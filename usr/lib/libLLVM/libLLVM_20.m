BOOL sub_1C5093378(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t ***v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  int v13;
  BOOL v15;
  const llvm::APInt *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::DataLayout *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t ***v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  const char *v39;
  char v40;
  char v41;
  unint64_t v42;
  char v44;
  uint64_t ***v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  const char *v53;
  char v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  char v60;
  llvm::Value *v61;
  unsigned __int8 v62;
  unsigned __int16 ParamAlignment;
  unsigned int v64;
  unsigned __int16 v66;
  unsigned __int8 v67;
  unsigned int v68;
  llvm::Value *v69;
  unsigned __int8 v70;
  uint64_t **v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t ***v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  llvm::Value *v82;
  uint64_t **v83;
  uint64_t **v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  char *v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t *v102;
  int v103;
  unsigned int v104;
  uint64_t *v105;
  unsigned __int8 *v106;
  uint64_t *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  uint64_t *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  int32x2_t *v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  int32x2_t *v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  int v141;
  int v142;
  llvm *v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  llvm::Value *Select;
  uint64_t **v154;
  uint64_t **v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  int v159;
  char v160;
  uint64_t *v161;
  uint64_t v162;
  llvm::Value *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  int32x2_t *v169;
  unint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t *v178;
  uint64_t v179;
  llvm::ValueAsMetadata *v180;
  llvm::UndefValue *v181;
  uint64_t **v182;
  uint64_t **v183;
  char v184;
  uint64_t *v185;
  char *v186;
  int v187;
  int32x2_t *****v188;
  unsigned int v189;
  unsigned int v190;
  int32x2_t *****v191;
  int32x2_t ****v192;
  _QWORD *v193;
  int32x2_t ****v194;
  unint64_t v196;
  BOOL v197;
  unint64_t *v198;
  llvm::Value *v199;
  unint64_t v200;
  unint64_t v201;
  llvm *v202;
  int32x2_t *v203;
  unint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  llvm **v208;
  llvm *v209;
  int v210;
  int v211;
  int32x2_t *****v213;
  unint64_t v214;
  int32x2_t ****v215;
  int32x2_t *v216;
  unint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  int32x2_t *****v221;
  int32x2_t ****v222;
  int v223;
  int v224;
  uint64_t **v225;
  uint64_t **v226;
  llvm::Constant *v227;
  unsigned int PrimitiveSizeInBits;
  unsigned int v229;
  unsigned __int8 *v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unsigned int v233;
  uint64_t v234;
  BOOL v235;
  uint64_t **v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t *v241;
  llvm::ConstantInt *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  _BOOL4 v250;
  unsigned int *v251;
  _QWORD *v252;
  uint64_t v253;
  llvm::PointerType *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  llvm::Constant *v259;
  llvm::Type *v260;
  uint64_t *v261;
  uint64_t ElementPtr;
  llvm::Type *v263;
  llvm::Value **NullValue;
  uint64_t v265;
  llvm::Value *v266;
  _DWORD *v267;
  _DWORD *v268;
  uint64_t v269;
  llvm::Value *v270;
  _QWORD *v271;
  llvm::BasicBlock *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  unsigned __int8 **v276;
  int v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  _QWORD *v281;
  uint64_t ***v282;
  uint64_t ***v283;
  uint64_t **v284;
  uint64_t **v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  _BYTE *v290;
  llvm::Value *v291;
  const llvm::APInt *v292;
  unint64_t v293;
  llvm::ValueHandleBase *v294;
  const llvm::APInt *v295;
  uint64_t v296;
  llvm::ValueHandleBase *v297;
  uint64_t ***v298;
  llvm::ValueHandleBase **v299;
  uint64_t **v300;
  _QWORD *v301;
  llvm::ValueHandleBase ***v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t *v311;
  uint64_t v312;
  int32x2_t *v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  int v320;
  int v321;
  unint64_t v322;
  unint64_t *v323;
  uint64_t v324;
  int32x2_t *v325;
  unint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  int v333;
  llvm::ConstantInt *v334;
  unsigned int v335;
  char v336;
  llvm::ConstantInt *v337;
  unsigned int v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  unsigned int v343;
  unsigned __int8 v344;
  unsigned __int8 *v345;
  unint64_t v346;
  unsigned __int8 *v347;
  unsigned __int8 v348;
  unsigned int v349;
  BOOL v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  llvm::BasicBlock *v354;
  uint64_t v355;
  _BYTE *v356;
  uint64_t v357;
  unint64_t p_src;
  unint64_t *v359;
  int32x2_t ****v360;
  __int16 v361;
  llvm *v362;
  llvm *v363;
  uint64_t v364;
  unsigned __int8 *v365;
  void *__src;
  uint64_t v367;
  _QWORD v368[2];
  uint64_t v369;
  char v370;
  uint64_t v371;
  uint64_t v372;
  llvm::ConstantInt *v373;
  void **v374;
  void **v375;
  uint64_t v376;
  int v377;
  __int16 v378;
  char v379;
  uint64_t v380;
  uint64_t v381;
  void *v382;
  void *v383;
  uint64_t v384;
  unint64_t *v385;
  llvm *v386;
  uint64_t v387;

  v4 = (uint64_t ***)a2;
  v5 = a1;
  v387 = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::BasicBlock **)(a2 + 40);
  if (*(_BYTE *)(*(_QWORD *)(a2 - 32) + 16) == 24)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 2000))(*(_QWORD *)(a1 + 48), a2))
    {
      *(_QWORD *)(v5 + 120) = *((_QWORD *)v6 + 6);
      v7 = *(_DWORD *)(v5 + 136);
      if (v7 || *(_DWORD *)(v5 + 140))
      {
        v113 = (_QWORD *)(v5 + 128);
        v114 = *(unsigned int *)(v5 + 144);
        if (v114 > 4 * v7 && v114 >= 0x41)
        {
          sub_1C509F99C(v113);
        }
        else
        {
          if ((_DWORD)v114)
          {
            v115 = (_QWORD *)*v113;
            v116 = (_QWORD *)(*v113 + (v114 << 6));
            do
            {
              v117 = v115[3];
              if (v117 != -4096)
              {
                if (v117 == -8192)
                  goto LABEL_180;
                v118 = v115[7];
                if (v118 && v118 != -8192 && v118 != -4096)
                {
                  v119 = v115[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v119 = v115[6];
                  v120 = (unint64_t *)v115[6];
                  if (v120)
                  {
                    *v120 = *v120 & 7 | v119;
                  }
                  else
                  {
                    v121 = v115[7];
                    v122 = ***(int32x2_t ****)v121;
                    v123 = (unint64_t)v122[303];
                    if (v123 <= v119)
                    {
                      v124 = v122[305].u32[0];
                      if (v123 + 16 * v124 > v119)
                      {
                        v125 = v124 - 1;
                        LODWORD(v126) = v125 & ((v121 >> 4) ^ (v121 >> 9));
                        v127 = (uint64_t *)(v123 + 16 * v126);
                        v128 = *v127;
                        if (v121 == *v127)
                        {
LABEL_171:
                          *v127 = -8192;
                          v122[304] = vadd_s32(v122[304], (int32x2_t)0x1FFFFFFFFLL);
                          v121 = v115[7];
                        }
                        else
                        {
                          v129 = 1;
                          while (v128 != -4096)
                          {
                            v130 = v126 + v129++;
                            v126 = v130 & v125;
                            v128 = *(_QWORD *)(v123 + 16 * v126);
                            if (v121 == v128)
                            {
                              v127 = (uint64_t *)(v123 + 16 * v126);
                              goto LABEL_171;
                            }
                          }
                        }
                        *(_BYTE *)(v121 + 17) &= ~1u;
                      }
                    }
                  }
                  v117 = v115[3];
                }
                if (v117 != -4096)
                {
LABEL_180:
                  if (v117 && v117 != -8192)
                  {
                    v131 = v115[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v131 = v115[2];
                    v132 = (unint64_t *)v115[2];
                    if (v132)
                    {
                      *v132 = *v132 & 7 | v131;
                    }
                    else
                    {
                      v133 = v115[3];
                      v134 = ***(int32x2_t ****)v133;
                      v135 = (unint64_t)v134[303];
                      if (v135 <= v131)
                      {
                        v136 = v134[305].u32[0];
                        if (v135 + 16 * v136 > v131)
                        {
                          v137 = v136 - 1;
                          LODWORD(v138) = v137 & ((v133 >> 4) ^ (v133 >> 9));
                          v139 = (uint64_t *)(v135 + 16 * v138);
                          v140 = *v139;
                          if (v133 == *v139)
                          {
LABEL_189:
                            *v139 = -8192;
                            v134[304] = vadd_s32(v134[304], (int32x2_t)0x1FFFFFFFFLL);
                            v133 = v115[3];
                          }
                          else
                          {
                            v141 = 1;
                            while (v140 != -4096)
                            {
                              v142 = v138 + v141++;
                              v138 = v142 & v137;
                              v140 = *(_QWORD *)(v135 + 16 * v138);
                              if (v133 == v140)
                              {
                                v139 = (uint64_t *)(v135 + 16 * v138);
                                goto LABEL_189;
                              }
                            }
                          }
                          *(_BYTE *)(v133 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v115[3] = -4096;
                }
                v115[4] = 0;
              }
              v115 += 8;
            }
            while (v115 != v116);
          }
          *(_QWORD *)(v5 + 136) = 0;
        }
      }
      if (*(_BYTE *)(v5 + 176))
      {
        sub_1C4E43068(v5 + 152);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 152), 8);
        *(_BYTE *)(v5 + 176) = 0;
      }
      return 1;
    }
    v8 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 32) + 16))(*(_QWORD *)(v5 + 32), v4[5][7]);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t ***))(**(_QWORD **)(v5 + 48) + 2008))(&__src, *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 720), v9, v4);
    v11 = __src;
    v10 = (_DWORD *)v367;
    if (__src == (void *)v367)
    {
      p_src = (unint64_t)&__src;
      sub_1C509B1A8((void ***)&p_src);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      do
      {
        (*(void (**)(_QWORD, _DWORD *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v5 + 48) + 2032))(*(_QWORD *)(v5 + 48), v11, 0, 0, 0);
        if (v11[26] != 2 || *((_BYTE *)v11 + 13) == 0)
        {
          if (!*v11)
            ++v13;
        }
        else
        {
          v12 |= sub_1C508FBB4();
          ++v13;
        }
        v11 += 32;
      }
      while (v11 != v10);
      p_src = (unint64_t)&__src;
      sub_1C509B1A8((void ***)&p_src);
      if ((v12 & 1) != 0)
        return 1;
    }
  }
  v357 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t ***, char *, uint64_t *))(**(_QWORD **)(v5 + 48) + 848))(*(_QWORD *)(v5 + 48), v4, (char *)&v357 + 4, &v357))
  {
    v17 = *((_DWORD *)v4 + 5);
    v18 = v17 & 0x7FFFFFF;
    v19 = (uint64_t *)&v4[-4 * v18];
    v20 = *((unsigned __int8 *)v4 + 16);
    if (v20 == 84)
    {
      v21 = 0;
    }
    else if (v20 == 39)
    {
      v21 = (*((_DWORD *)v4 + 20) + 1);
    }
    else
    {
      v21 = 2;
    }
    if (v17 < 0 && (v340 = *(v19 - 1), (v340 & 0xFFFFFFFF0) != 0))
      v22 = (*((_DWORD *)v19 - 3) - *(_DWORD *)((char *)v19 - v340));
    else
      v22 = 0;
    if (v19 != (uint64_t *)&(&v4[-4 * v21])[-4 * v22 - 4])
    {
      v23 = 32 * v18 - 32 * v21 - 32 * v22 - 32;
      v354 = v6;
      v355 = v5;
      do
      {
        v24 = *v19;
        if (*(_DWORD *)(*(_QWORD *)*v19 + 8) == 15)
        {
          v25 = *(llvm::DataLayout **)(v5 + 720);
          LODWORD(v367) = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v25, *(_DWORD *)(*(_QWORD *)*v19 + 8) >> 8)+ 12);
          if (v367 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v24 = *v19;
            v25 = *(llvm::DataLayout **)(v5 + 720);
          }
          else
          {
            __src = 0;
          }
          v27 = llvm::Value::stripAndAccumulateConstantOffsets(v24, v25, (const void **)&__src, 0, 0, 0, v26);
          v28 = sub_1C47EE5B8((uint64_t ***)&__src, 0xFFFFFFFFFFFFFFFFLL);
          if ((v28 & ((_DWORD)v357 - 1)) == 0)
          {
            v29 = v28;
            v30 = *(_BYTE *)(v27 + 16) != 59 || v27 == 0;
            if (!v30 && 1 << *(_WORD *)(v27 + 18) < (unint64_t)v357)
            {
              v31 = v4;
              v32 = a3;
              v33 = *(_QWORD *)(v5 + 720);
              v34 = *(_QWORD *)(v27 + 64);
              sub_1C4768AD0(v33, v34);
              v36 = v35;
              v38 = v37 == 1;
              llvm::DataLayout::getAlignment(v33, v34);
              v41 = v40;
              if (v38)
              v42 = ((1 << v41) + ((unint64_t)(v36 + 7) >> 3) - 1) & -(1 << v41);
              a3 = v32;
              v4 = v31;
              v6 = v354;
              v5 = v355;
              if (v42 >= (unint64_t)v29 + HIDWORD(v357))
                *(_WORD *)(v27 + 18) = *(_WORD *)(v27 + 18) & 0xFFC0 | (63 - __clz(v357));
            }
            if (*(_BYTE *)(v27 + 16) == 3
              && v27 != 0
              && llvm::GlobalObject::canIncreaseAlignment((llvm::GlobalObject *)v27))
            {
              llvm::Value::getPointerAlignment((llvm::Value *)v27, *(const llvm::DataLayout **)(v5 + 720));
              if (1 << v44 < (unint64_t)v357)
              {
                v45 = v4;
                v46 = a3;
                v47 = *(_QWORD *)(v5 + 720);
                v48 = *(_QWORD *)(v27 + 24);
                sub_1C4768AD0(v47, v48);
                v50 = v49;
                v52 = v51 == 1;
                llvm::DataLayout::getAlignment(v47, v48);
                v55 = v54;
                if (v52)
                v56 = ((1 << v55) + ((unint64_t)(v50 + 7) >> 3) - 1) & -(1 << v55);
                a3 = v46;
                v4 = v45;
                v6 = v354;
                v5 = v355;
                if (v56 >= (unint64_t)v29 + HIDWORD(v357))
                {
                  v57 = __clz(v357) ^ 0x13F;
                  if ((_DWORD)v357)
                    v58 = v57;
                  else
                    v58 = 0;
                  if (v58 >= 0x100)
                    v59 = ((v58 & 0x3F) << 16) + 0x10000;
                  else
                    v59 = 0;
                  *(_DWORD *)(v27 + 32) = v59 | *(_DWORD *)(v27 + 32) & 0xFFC0FFFF;
                }
              }
            }
          }
          if (v367 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
        v19 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    v60 = sub_1C4DE85D0((uint64_t)v4);
    if (v4 && (v60 & 1) != 0)
    {
      v61 = llvm::Value::stripPointerCasts((llvm::Value *)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)]);
      v62 = llvm::getOrEnforceKnownAlignment((uint64_t)v61, 0, *(unsigned __int8 **)(v5 + 720), 0, 0, 0);
      ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v4 + 8), 0);
      if (ParamAlignment < 0x100u || ParamAlignment < v62)
        sub_1C509D0D0((uint64_t)v4, v62);
      v64 = *((_DWORD *)*(v4 - 4) + 9) - 194;
      if (v64 <= 3 && v64 != 1)
      {
        v66 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v4 + 8), 1);
        v67 = v66;
        v68 = v66;
        v69 = llvm::Value::stripPointerCasts((llvm::Value *)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF) + 4]);
        v70 = llvm::getOrEnforceKnownAlignment((uint64_t)v69, 0, *(unsigned __int8 **)(v5 + 720), 0, 0, 0);
        if (v68 < 0x100 || v67 < v70)
          sub_1C509D15C((uint64_t)v4, v70);
      }
    }
  }
  v71 = v4[8];
  if ((v71 && (*((_BYTE *)v71 + 12) & 0x20) != 0
     || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v4, 5))
    && !*(_BYTE *)(v5 + 712)
    && !llvm::shouldOptimizeForSize(v6, *(_QWORD *)(v5 + 104), *(uint64_t ***)(v5 + 88)))
  {
    v72 = *((_DWORD *)v4 + 5);
    v73 = v72 & 0x7FFFFFF;
    v74 = *((unsigned __int8 *)v4 + 16);
    if (v74 == 84)
      v75 = 0;
    else
      v75 = v74 == 39 ? (*((_DWORD *)v4 + 20) + 1) : 2;
    v76 = &v4[-4 * v73];
    if (v72 < 0 && (v341 = (uint64_t)*(v76 - 1), (v341 & 0xFFFFFFFF0) != 0))
      v77 = (*((_DWORD *)v76 - 3) - *(_DWORD *)((char *)v76 - v341));
    else
      v77 = 0;
    if (v76 != &(&v4[-4 * v75])[-4 * v77 - 4])
    {
      v78 = -32 * v73;
      v79 = (32 * v75 + 32 * v77) ^ 0xFFFFFFFFFFFFFFE0;
      while (1)
      {
        v16 = (const llvm::APInt *)v4[(unint64_t)v78 / 8];
        if (*(_DWORD *)(*(_QWORD *)v16 + 8) == 15)
          break;
        v78 += 32;
        if (v79 == v78)
          goto LABEL_87;
      }
      return sub_1C508FBB4();
    }
  }
LABEL_87:
  v80 = (uint64_t)*(v4 - 4);
  if (!v80 || *(_BYTE *)(v80 + 16))
    return 0;
  if (*(uint64_t ***)(v80 + 24) != v4[9] || (*(_BYTE *)(v80 + 33) & 0x20) == 0)
    goto LABEL_91;
  v85 = *(_DWORD *)(v80 + 36);
  if (v85 <= 165)
  {
    if (v85 > 137)
    {
      if ((v85 - 148) >= 2)
      {
        if (v85 == 138)
        {
          if (v4[1])
          {
            v161 = **v4;
            v162 = *v161;
            v163 = *(llvm::Value **)(*v161 + 1560);
            if (!v163)
            {
              v334 = *(llvm::ConstantInt **)(v162 + 1888);
              v335 = *(_DWORD *)(v162 + 1896);
              LODWORD(v367) = v335 >> 8;
              if (v335 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
              }
              else
              {
                if (v335 <= 0xFF)
                  v336 = 0;
                else
                  v336 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v335);
                __src = (void *)(v336 & 1);
              }
              v163 = llvm::ConstantInt::get(v334, (llvm::LLVMContext *)&__src, v16);
              if (v367 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              *(_QWORD *)(v162 + 1560) = v163;
            }
            v164 = *(_QWORD *)(v5 + 120);
            if (v164)
              v165 = v164 - 24;
            else
              v165 = 0;
            __src = (void *)6;
            v367 = 0;
            v368[0] = v165;
            if (v165 != -8192 && v165 != -4096 && v165)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
            llvm::replaceAndRecursivelySimplify((llvm::Instruction *)v4, v163, *(_QWORD *)(v5 + 72), 0, 0, 0);
            if (v368[0] != v165)
            {
              *(_QWORD *)(v5 + 120) = *((_QWORD *)v6 + 6);
              v166 = *(_DWORD *)(v5 + 136);
              if (v166 || *(_DWORD *)(v5 + 140))
              {
                v304 = (_QWORD *)(v5 + 128);
                v305 = *(unsigned int *)(v5 + 144);
                if (v305 > 4 * v166 && v305 >= 0x41)
                {
                  sub_1C509F99C(v304);
                }
                else
                {
                  if ((_DWORD)v305)
                  {
                    v306 = (_QWORD *)*v304;
                    v307 = (_QWORD *)(*v304 + (v305 << 6));
                    do
                    {
                      v308 = v306[3];
                      if (v308 != -4096)
                      {
                        if (v308 == -8192)
                          goto LABEL_447;
                        v309 = v306[7];
                        if (v309 && v309 != -8192 && v309 != -4096)
                        {
                          v310 = v306[5] & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v310 = v306[6];
                          v311 = (unint64_t *)v306[6];
                          if (v311)
                          {
                            *v311 = *v311 & 7 | v310;
                          }
                          else
                          {
                            v312 = v306[7];
                            v313 = ***(int32x2_t ****)v312;
                            v314 = (unint64_t)v313[303];
                            if (v314 <= v310)
                            {
                              v315 = v313[305].u32[0];
                              if (v314 + 16 * v315 > v310)
                              {
                                v316 = v315 - 1;
                                LODWORD(v317) = v316 & ((v312 >> 4) ^ (v312 >> 9));
                                v318 = (uint64_t *)(v314 + 16 * v317);
                                v319 = *v318;
                                if (v312 == *v318)
                                {
LABEL_438:
                                  *v318 = -8192;
                                  v313[304] = vadd_s32(v313[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v312 = v306[7];
                                }
                                else
                                {
                                  v320 = 1;
                                  while (v319 != -4096)
                                  {
                                    v321 = v317 + v320++;
                                    v317 = v321 & v316;
                                    v319 = *(_QWORD *)(v314 + 16 * v317);
                                    if (v312 == v319)
                                    {
                                      v318 = (uint64_t *)(v314 + 16 * v317);
                                      goto LABEL_438;
                                    }
                                  }
                                }
                                *(_BYTE *)(v312 + 17) &= ~1u;
                              }
                            }
                          }
                          v308 = v306[3];
                        }
                        if (v308 != -4096)
                        {
LABEL_447:
                          if (v308 && v308 != -8192)
                          {
                            v322 = v306[1] & 0xFFFFFFFFFFFFFFF8;
                            *(_QWORD *)v322 = v306[2];
                            v323 = (unint64_t *)v306[2];
                            if (v323)
                            {
                              *v323 = *v323 & 7 | v322;
                            }
                            else
                            {
                              v324 = v306[3];
                              v325 = ***(int32x2_t ****)v324;
                              v326 = (unint64_t)v325[303];
                              if (v326 <= v322)
                              {
                                v327 = v325[305].u32[0];
                                if (v326 + 16 * v327 > v322)
                                {
                                  v328 = v327 - 1;
                                  LODWORD(v329) = v328 & ((v324 >> 4) ^ (v324 >> 9));
                                  v330 = (uint64_t *)(v326 + 16 * v329);
                                  v331 = *v330;
                                  if (v324 == *v330)
                                  {
LABEL_456:
                                    *v330 = -8192;
                                    v325[304] = vadd_s32(v325[304], (int32x2_t)0x1FFFFFFFFLL);
                                    v324 = v306[3];
                                  }
                                  else
                                  {
                                    v332 = 1;
                                    while (v331 != -4096)
                                    {
                                      v333 = v329 + v332++;
                                      v329 = v333 & v328;
                                      v331 = *(_QWORD *)(v326 + 16 * v329);
                                      if (v324 == v331)
                                      {
                                        v330 = (uint64_t *)(v326 + 16 * v329);
                                        goto LABEL_456;
                                      }
                                    }
                                  }
                                  *(_BYTE *)(v324 + 17) &= ~1u;
                                }
                              }
                            }
                          }
                          v306[3] = -4096;
                        }
                        v306[4] = 0;
                      }
                      v306 += 8;
                    }
                    while (v306 != v307);
                  }
                  *(_QWORD *)(v5 + 136) = 0;
                }
              }
              if (*(_BYTE *)(v5 + 176))
              {
                sub_1C4E43068(v5 + 152);
                MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 152), 8);
                *(_BYTE *)(v5 + 176) = 0;
              }
            }
            if (v368[0] != -8192 && v368[0] != -4096 && v368[0])
            {
              v167 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v367;
              if (v367)
              {
                *(_QWORD *)v367 = *(_QWORD *)v367 & 7 | v167;
              }
              else
              {
                v168 = v368[0];
                v169 = ***(int32x2_t ****)v368[0];
                v170 = (unint64_t)v169[303];
                if (v170 <= v167)
                {
                  v171 = v169[305].u32[0];
                  if (v170 + 16 * v171 > v167)
                  {
                    v172 = v171 - 1;
                    LODWORD(v173) = v172 & ((LODWORD(v368[0]) >> 4) ^ (LODWORD(v368[0]) >> 9));
                    v174 = (uint64_t *)(v170 + 16 * v173);
                    v175 = *v174;
                    if (v368[0] == *v174)
                    {
LABEL_236:
                      *v174 = -8192;
                      v169[304] = vadd_s32(v169[304], (int32x2_t)0x1FFFFFFFFLL);
                      v168 = v368[0];
                    }
                    else
                    {
                      v176 = 1;
                      while (v175 != -4096)
                      {
                        v177 = v173 + v176++;
                        v173 = v177 & v172;
                        v175 = *(_QWORD *)(v170 + 16 * v173);
                        if (v368[0] == v175)
                        {
                          v174 = (uint64_t *)(v170 + 16 * v173);
                          goto LABEL_236;
                        }
                      }
                    }
                    *(_BYTE *)(v168 + 17) &= ~1u;
                  }
                }
              }
            }
          }
          else
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), v4);
            v225 = v4[3];
            v226 = v4[4];
            *v226 = (uint64_t *)v225;
            v225[1] = (uint64_t *)v226;
            v4[3] = 0;
            v4[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v4);
          }
          return 1;
        }
        goto LABEL_345;
      }
      v365 = (unsigned __int8 *)*v4;
      if ((*((_DWORD *)v365 + 2) & 0xFE) != 0x12)
        return 0;
      if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 48) + 1104))(*(_QWORD *)(v5 + 48)))
        return 0;
      v363 = 0;
      v364 = 0;
      v362 = 0;
      v144 = (uint64_t)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF) + 8];
      __src = &v364;
      v367 = (uint64_t)&v363;
      v368[0] = &v362;
      v145 = *(_QWORD *)(v144 + 8);
      if (!v145 || *(_QWORD *)(v145 + 8) || !sub_1C4FA9CBC((_QWORD **)&__src, v144))
        return 0;
      v15 = 0;
      if (!llvm::isSplatValue((const void **)v363, (const llvm::Value *)0xFFFFFFFFLL, 0, v146))
        return v15;
      v15 = 0;
      if (!llvm::isSplatValue((const void **)v362, (const llvm::Value *)0xFFFFFFFFLL, 0, v147))
        return v15;
      sub_1C4773D54((uint64_t)&__src, (uint64_t)v4, 0, 0, 0);
      v148 = (uint64_t *)&v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
      v150 = (unint64_t *)v148[4];
      v384 = *v148;
      v149 = v384;
      v385 = v150;
      v386 = v363;
      v361 = 257;
      v151 = (uint64_t *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&__src, v85, (uint64_t *)&v365, 1, &v384, 3, 0, (uint64_t)&p_src);
      v384 = v149;
      v385 = v150;
      v386 = v362;
      v361 = 257;
      v152 = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&__src, v85, (uint64_t *)&v365, 1, &v384, 3, 0, (uint64_t)&p_src);
      v361 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&__src, v364, v151, v152, (uint64_t)&p_src, 0);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, Select, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), v4);
      v154 = v4[3];
      v155 = v4[4];
      *v155 = (uint64_t *)v154;
      v154[1] = (uint64_t *)v155;
      v4[3] = 0;
      v4[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v4);
      v156 = __src;
      goto LABEL_416;
    }
    if (v85 != 52 && v85 != 54)
    {
      if (v85 != 58)
        goto LABEL_345;
      llvm::DbgVariableIntrinsic::location_ops((uint64_t)v4, &p_src);
      v89 = p_src;
      llvm::DbgVariableIntrinsic::location_ops((uint64_t)v4, &v384);
      v90 = v385;
      if ((unint64_t *)v89 == v385)
        goto LABEL_122;
      v91 = -1;
      v92 = v89;
      do
      {
        if ((v92 & 4) != 0)
          v92 = (v92 & 0xFFFFFFFFFFFFFFF8) + 12;
        else
          v92 = (v92 & 0xFFFFFFFFFFFFFFF8) + 136;
        ++v91;
      }
      while ((unint64_t *)v92 != v385);
      v93 = v91 | (v91 >> 1) | ((v91 | (v91 >> 1)) >> 2);
      v94 = v93 | (v93 >> 4) | ((v93 | (v93 >> 4)) >> 8);
      v95 = (((v94 | (v94 >> 16)) >> 32) | v94 | (v94 >> 16)) + 1;
      if (v95 <= 4)
      {
LABEL_122:
        __src = (void *)1;
      }
      else
      {
        LODWORD(__src) = 0;
        v96 = (uint64_t *)operator new(8 * ((((v94 | (v94 >> 16)) >> 32) | v94 | (v94 >> 16)) + 1), (std::align_val_t)8uLL);
        v367 = (uint64_t)v96;
        v368[0] = v95;
        v351 = (char)__src;
        __src = (void *)(__src & 1);
        if ((v351 & 1) == 0)
        {
          v97 = (char *)&v96[v95];
          do
LABEL_124:
            *v96++ = -4096;
          while (v96 != (uint64_t *)v97);
          while ((unint64_t *)v89 != v90)
          {
            v98 = (unint64_t *)(v89 & 0xFFFFFFFFFFFFFFF8);
            v99 = v89 & 0xFFFFFFFFFFFFFFF8;
            if ((v89 & 4) != 0)
              v99 = *v98;
            v100 = *(unsigned __int8 **)(v99 + 128);
            v365 = v100;
            if ((__src & 1) != 0)
            {
              v101 = 4;
              v102 = &v367;
            }
            else
            {
              v101 = v368[0];
              if (!LODWORD(v368[0]))
              {
                v111 = 0;
LABEL_143:
                v112 = sub_1C4E4473C((uint64_t)&__src, (uint64_t)&v365, &v365, v111);
                *v112 = v365;
                goto LABEL_144;
              }
              v102 = (uint64_t *)v367;
            }
            v103 = v101 - 1;
            v104 = v103 & ((v100 >> 4) ^ (v100 >> 9));
            v105 = &v102[v104];
            v106 = (unsigned __int8 *)*v105;
            if (v100 != (unsigned __int8 *)*v105)
            {
              v107 = 0;
              v108 = 1;
              while (v106 != (unsigned __int8 *)-4096)
              {
                if (v107)
                  v109 = 0;
                else
                  v109 = v106 == (unsigned __int8 *)-8192;
                if (v109)
                  v107 = v105;
                v110 = v104 + v108++;
                v104 = v110 & v103;
                v105 = &v102[v104];
                v106 = (unsigned __int8 *)*v105;
                if (v100 == (unsigned __int8 *)*v105)
                  goto LABEL_144;
              }
              if (v107)
                v111 = v107;
              else
                v111 = v105;
              goto LABEL_143;
            }
LABEL_144:
            if ((v89 & 4) != 0)
              v89 = (unint64_t)(v98 + 1) | 4;
            else
              v89 = (uint64_t)(v98 + 17);
          }
          v184 = (char)__src;
          if (__src <= 1)
          {
            v342 = &v367;
            v185 = (uint64_t *)v367;
            v189 = v368[0];
            if ((_DWORD)__src)
            {
              v343 = 4;
            }
            else
            {
              v342 = (uint64_t *)v367;
              v343 = v368[0];
            }
            v188 = (int32x2_t *****)&v342[v343];
            v187 = (int)__src;
            v186 = (char *)v188;
          }
          else
          {
            if ((__src & 1) != 0)
            {
              v185 = &v367;
              v186 = &v370;
              goto LABEL_247;
            }
            v185 = (uint64_t *)v367;
            v187 = v368[0];
            if (LODWORD(v368[0]))
            {
              v186 = (char *)(v367 + 8 * LODWORD(v368[0]));
LABEL_247:
              v187 = __src & 1;
              while ((*v185 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                if (++v185 == (uint64_t *)v186)
                {
                  v185 = (uint64_t *)v186;
                  break;
                }
              }
              v188 = (int32x2_t *****)v185;
              v185 = (uint64_t *)v367;
              v189 = v368[0];
              goto LABEL_252;
            }
            v189 = 0;
            v188 = (int32x2_t *****)v367;
            v186 = (char *)v367;
          }
LABEL_252:
          if (v187)
          {
            v185 = &v367;
            v190 = 4;
          }
          else
          {
            v190 = v189;
          }
          v191 = (int32x2_t *****)&v185[v190];
          if (v188 == v191)
          {
            v15 = 0;
          }
          else
          {
            v15 = 0;
            do
            {
              v192 = *v188;
              v193 = sub_1C5098A68((_DWORD *)(v5 + 128), *v188);
              p_src = 6;
              v359 = 0;
              v194 = (int32x2_t ****)v193[2];
              v360 = v194;
              if (v194 != (int32x2_t ****)-8192 && v194 != (int32x2_t ****)-4096 && v194 != 0)
              {
                v196 = *v193 & 0xFFFFFFFFFFFFFFF8;
                v359 = *(unint64_t **)v196;
                *(_QWORD *)v196 = &p_src;
                p_src = v196 | 6;
                if (v359)
                  *v359 = *v359 & 7 | (unint64_t)&v359;
                v194 = v360;
              }
              if (v194 == (int32x2_t ****)-8192
                || (v194 != (int32x2_t ****)-4096 ? (v197 = v194 == 0) : (v197 = 1), v197))
              {
                v198 = 0;
                v199 = 0;
                v384 = 6;
                v385 = 0;
                v386 = 0;
              }
              else
              {
                v385 = 0;
                v386 = (llvm *)v194;
                v200 = p_src & 0xFFFFFFFFFFFFFFF8;
                v385 = *(unint64_t **)(p_src & 0xFFFFFFFFFFFFFFF8);
                *(_QWORD *)v200 = &v384;
                v384 = v200 | 6;
                v198 = v385;
                if (v385)
                  *v385 = *v385 & 7 | (unint64_t)&v385;
                v199 = v386;
              }
              if (v199 != (llvm::Value *)-8192 && v199 != (llvm::Value *)-4096 && v199)
              {
                v201 = v384 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v384 & 0xFFFFFFFFFFFFFFF8) = v198;
                if (v385)
                {
                  *v385 = *v385 & 7 | v201;
                }
                else
                {
                  v202 = v386;
                  v203 = ***(int32x2_t ****)v386;
                  v204 = (unint64_t)v203[303];
                  if (v204 <= v201)
                  {
                    v205 = v203[305].u32[0];
                    if (v204 + 16 * v205 > v201)
                    {
                      v206 = v205 - 1;
                      LODWORD(v207) = v206 & ((v386 >> 4) ^ (v386 >> 9));
                      v208 = (llvm **)(v204 + 16 * v207);
                      v209 = *v208;
                      if (v386 == *v208)
                      {
LABEL_286:
                        *v208 = (llvm *)-8192;
                        v203[304] = vadd_s32(v203[304], (int32x2_t)0x1FFFFFFFFLL);
                        v202 = v386;
                      }
                      else
                      {
                        v210 = 1;
                        while (v209 != (llvm *)-4096)
                        {
                          v211 = v207 + v210++;
                          v207 = v211 & v206;
                          v209 = *(llvm **)(v204 + 16 * v207);
                          if (v386 == v209)
                          {
                            v208 = (llvm **)(v204 + 16 * v207);
                            goto LABEL_286;
                          }
                        }
                      }
                      *((_BYTE *)v202 + 17) &= ~1u;
                    }
                  }
                }
              }
              if (v199)
              {
                llvm::DbgVariableIntrinsic::replaceVariableLocationOp((llvm::DbgVariableIntrinsic *)v4, (llvm::Value *)v192, v199);
                v15 = 1;
              }
              if (v360 != (int32x2_t ****)-8192 && v360 != (int32x2_t ****)-4096 && v360 != 0)
              {
                v214 = p_src & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(p_src & 0xFFFFFFFFFFFFFFF8) = v359;
                if (v359)
                {
                  *v359 = *v359 & 7 | v214;
                }
                else
                {
                  v215 = v360;
                  v216 = ***v360;
                  v217 = (unint64_t)v216[303];
                  if (v217 <= v214)
                  {
                    v218 = v216[305].u32[0];
                    if (v217 + 16 * v218 > v214)
                    {
                      v219 = v218 - 1;
                      LODWORD(v220) = v219 & ((v360 >> 4) ^ (v360 >> 9));
                      v221 = (int32x2_t *****)(v217 + 16 * v220);
                      v222 = *v221;
                      if (v360 == *v221)
                      {
LABEL_312:
                        *v221 = (int32x2_t ****)-8192;
                        v216[304] = vadd_s32(v216[304], (int32x2_t)0x1FFFFFFFFLL);
                        v215 = v360;
                      }
                      else
                      {
                        v223 = 1;
                        while (v222 != (int32x2_t ****)-4096)
                        {
                          v224 = v220 + v223++;
                          v220 = v224 & v219;
                          v222 = *(int32x2_t *****)(v217 + 16 * v220);
                          if (v360 == v222)
                          {
                            v221 = (int32x2_t *****)(v217 + 16 * v220);
                            goto LABEL_312;
                          }
                        }
                      }
                      *((_BYTE *)v215 + 17) &= ~1u;
                    }
                  }
                }
              }
              v213 = v188 + 1;
              v188 = (int32x2_t *****)v186;
              if (v213 != (int32x2_t *****)v186)
              {
                v188 = v213;
                while (((unint64_t)*v188 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  if (++v188 == (int32x2_t *****)v186)
                  {
                    v188 = (int32x2_t *****)v186;
                    break;
                  }
                }
              }
            }
            while (v188 != v191);
            v184 = (char)__src;
          }
          if ((v184 & 1) == 0)
            MEMORY[0x1CAA32FB4](v367, 8);
          return v15;
        }
      }
      v96 = &v367;
      v97 = &v370;
      goto LABEL_124;
    }
    v157 = *(_QWORD *)(v5 + 48);
    v158 = *(_QWORD **)(v5 + 720);
    if ((sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF) + 4]) & 1) != 0)
      return 0;
    v159 = *((_DWORD *)*(v4 - 4) + 9);
    if (v159 == 52)
    {
      v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 224))(v157);
    }
    else
    {
      if (v159 != 54)
      {
LABEL_321:
        v227 = (llvm::Constant *)*v4;
        if (((_DWORD)(*v4)[1] & 0xFE) == 0x12)
          return 0;
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v4);
        v229 = PrimitiveSizeInBits;
        v230 = (unsigned __int8 *)v158[4];
        v231 = v158[5];
        v232 = &v230[v231];
        if (v231 >= 2)
        {
          v345 = v230 + 1;
          v344 = *v230;
          v346 = v231 - 1;
          v347 = v230 + 1;
          do
          {
            v349 = *v347++;
            v348 = v349;
            v350 = v344 >= v349;
            if (v344 <= v349)
              v344 = v348;
            if (!v350)
              v230 = v345;
            v345 = v347;
            --v346;
          }
          while (v346);
        }
        v233 = v230 == v232 ? 0 : *v230;
        if (v233 < PrimitiveSizeInBits)
          return 0;
        v234 = (uint64_t)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
        if (v234)
          v235 = *(unsigned __int8 *)(v234 + 16) >= 0x1Cu;
        else
          v235 = 0;
        if (!v235 || (v236 = v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)], !*(_QWORD *)(v234 + 40)))
          v236 = 0;
        __src = v158;
        v367 = 0;
        v368[1] = 0;
        v369 = 0;
        v368[0] = v236;
        v370 = 1;
        v15 = 0;
        if ((sub_1C4F84D74(v234, 0, (uint64_t)&__src) & 1) != 0)
          return v15;
        v237 = (uint64_t *)v4[5];
        __src = "cond.false";
        LOWORD(v369) = 259;
        v238 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v237, (uint64_t *)v4 + 3, (uint64_t)&__src, 0);
        v239 = (uint64_t *)v4[4];
        __src = "cond.end";
        LOWORD(v369) = 259;
        v240 = llvm::BasicBlock::splitBasicBlock(v238, v239, (uint64_t)&__src, 0);
        v241 = 0;
        v242 = (llvm::ConstantInt *)**v4;
        __src = v368;
        v367 = 0x200000000;
        v373 = v242;
        v374 = &v382;
        v375 = &v383;
        v376 = 0;
        v377 = 0;
        v378 = 512;
        v379 = 7;
        v371 = 0;
        v372 = 0;
        v380 = 0;
        v381 = 0;
        v382 = &unk_1E8167888;
        v383 = &unk_1E8167A08;
        v353 = (uint64_t)v237;
        v244 = v237[5];
        v243 = v237 + 5;
        v245 = v244 - 24;
        if (v244)
          v246 = v245;
        else
          v246 = 0;
        if (*(unsigned __int8 *)(v246 + 16) - 29 >= 0xB)
          v246 = 0;
        v371 = *(_QWORD *)(v246 + 40);
        v372 = v246 + 24;
        v247 = *(uint64_t **)(v246 + 48);
        p_src = (unint64_t)v247;
        if (v247)
        {
          llvm::MetadataTracking::track((uint64_t)&p_src, (unsigned __int8 *)v247, 2);
          v241 = (uint64_t *)p_src;
        }
        sub_1C4774EF4((uint64_t)&__src, 0, (uint64_t)v241);
        if (p_src)
          llvm::MetadataTracking::untrack((uint64_t)&p_src, (unsigned __int8 *)p_src);
        v248 = (unsigned __int8 *)v4[6];
        v365 = v248;
        if (v248)
        {
          llvm::MetadataTracking::track((uint64_t)&v365, v248, 2);
          v249 = v365;
        }
        else
        {
          v249 = 0;
        }
        v356 = a3;
        sub_1C4774EF4((uint64_t)&__src, 0, (uint64_t)v249);
        v263 = (llvm::Type *)v365;
        if (v365)
          llvm::MetadataTracking::untrack((uint64_t)&v365, v365);
        NullValue = llvm::Constant::getNullValue(v227, v263);
        v265 = (uint64_t)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
        p_src = (unint64_t)"cmpz";
        v361 = 259;
        v266 = (llvm::Value *)sub_1C4774B48((uint64_t)&__src, 32, v265, (uint64_t)NullValue, (uint64_t)&p_src);
        v267 = operator new(0xA0uLL);
        v268 = v267;
        v269 = 0;
        v270 = (llvm::Value *)(v267 + 24);
        v267[29] = v267[29] & 0x38000000 | 3;
        do
        {
          v271 = &v267[v269];
          *v271 = 0;
          v271[1] = 0;
          v271[2] = 0;
          v271[3] = v270;
          v269 += 8;
        }
        while (v269 != 24);
        v352 = v240;
        v272 = (llvm::BasicBlock *)v240;
        v273 = (uint64_t)v238;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v267 + 24), v272, (llvm::BasicBlock *)v238, v266, 0);
        v361 = 257;
        (*((void (**)(void **, llvm::Value *, unint64_t *, uint64_t, uint64_t))*v375 + 2))(v375, v270, &p_src, v371, v372);
        if ((_DWORD)v367)
        {
          v274 = (char *)__src;
          v275 = (char *)__src + 16 * v367;
          v276 = (unsigned __int8 **)(v268 + 36);
          do
          {
            v277 = *(_DWORD *)v274;
            v278 = (unsigned __int8 *)*((_QWORD *)v274 + 1);
            if (v278)
            {
              if (!v277)
              {
                v384 = *((_QWORD *)v274 + 1);
                llvm::MetadataTracking::track((uint64_t)&v384, v278, 2);
                v279 = *v276;
                goto LABEL_381;
              }
            }
            else
            {
              v279 = *v276;
              if (!*v276 && (*((_BYTE *)v268 + 119) & 0x20) == 0)
                goto LABEL_378;
              if (!v277)
              {
                v384 = 0;
LABEL_381:
                if (v279)
                  llvm::MetadataTracking::untrack((uint64_t)(v268 + 36), v279);
                v280 = (unsigned __int8 *)v384;
                *v276 = (unsigned __int8 *)v384;
                if (v280)
                  llvm::MetadataTracking::retrack((uint64_t)&v384, v280, (uint64_t)(v268 + 36));
                goto LABEL_378;
              }
            }
            llvm::Value::setMetadata(v270, *(_DWORD *)v274, (llvm::MDNode *)v278);
LABEL_378:
            v274 += 16;
          }
          while (v274 != v275);
        }
        v281 = (_QWORD *)*v243;
        if ((_QWORD *)*v243 == v243)
        {
          v283 = 0;
        }
        else
        {
          if (v281)
            v282 = (uint64_t ***)(v281 - 3);
          else
            v282 = 0;
          if (*((unsigned __int8 *)v282 + 16) - 29 >= 0xB)
            v283 = 0;
          else
            v283 = v282;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v283[5] + 5), v283);
        v284 = v283[3];
        v285 = v283[4];
        *v285 = (uint64_t *)v284;
        v284[1] = (uint64_t *)v285;
        v283[3] = 0;
        v283[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v283);
        v286 = 0;
        v287 = *(_QWORD *)(v352 + 48);
        if (v287)
          v288 = v287 - 24;
        else
          v288 = 0;
        v371 = *(_QWORD *)(v288 + 40);
        v372 = v288 + 24;
        v289 = *(uint64_t **)(v288 + 48);
        p_src = (unint64_t)v289;
        if (v289)
        {
          llvm::MetadataTracking::track((uint64_t)&p_src, (unsigned __int8 *)v289, 2);
          v286 = (uint64_t *)p_src;
        }
        sub_1C4774EF4((uint64_t)&__src, 0, (uint64_t)v286);
        v290 = v356;
        if (p_src)
          llvm::MetadataTracking::untrack((uint64_t)&p_src, (unsigned __int8 *)p_src);
        p_src = (unint64_t)"ctz";
        v361 = 259;
        v291 = (llvm::Value *)sub_1C4867E94((uint64_t)&__src, (uint64_t)v227, 2, (uint64_t)&p_src);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v291, (llvm::Value *)1);
        LODWORD(v359) = v229;
        if (v229 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&p_src, v229, 0);
        }
        else
        {
          if (v229)
            v293 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v229;
          else
            LODWORD(v293) = 0;
          p_src = v293 & v229;
        }
        v294 = llvm::ConstantInt::get(v373, (llvm::LLVMContext *)&p_src, v292);
        if (v359 >= 0x41 && p_src)
          MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
        sub_1C477667C(v291, (uint64_t)v294, v353);
        sub_1C477667C(v291, (uint64_t)v4, v273);
        v296 = *(_QWORD *)v373;
        v297 = *(llvm::ValueHandleBase **)(*(_QWORD *)v373 + 1560);
        if (!v297)
        {
          v337 = *(llvm::ConstantInt **)(v296 + 1888);
          v338 = *(_DWORD *)(v296 + 1896);
          LODWORD(v359) = v338 >> 8;
          if (v338 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&p_src, 1, 0);
          }
          else
          {
            if (v338 <= 0xFF)
              LOBYTE(v339) = 0;
            else
              v339 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v338);
            p_src = v339 & 1;
          }
          v297 = llvm::ConstantInt::get(v337, (llvm::LLVMContext *)&p_src, v295);
          if (v359 >= 0x41 && p_src)
            MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
          *(_QWORD *)(v296 + 1560) = v297;
          v290 = v356;
        }
        v298 = &v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
        v299 = (llvm::ValueHandleBase **)(v298 + 4);
        if (v298[4])
        {
          *v298[6] = (uint64_t *)v298[5];
          v300 = v298[5];
          if (v300)
            v300[2] = (uint64_t *)v298[6];
        }
        *v299 = v297;
        if (v297)
        {
          v303 = (_QWORD *)*((_QWORD *)v297 + 1);
          v302 = (llvm::ValueHandleBase ***)((char *)v297 + 8);
          v301 = v303;
          v298[5] = (uint64_t **)v303;
          if (v303)
            v301[2] = v298 + 5;
          v298[6] = (uint64_t **)v302;
          *v302 = v299;
        }
        *v290 = 1;
        v156 = __src;
LABEL_416:
        if (v156 != v368)
          free(v156);
        return 1;
      }
      v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 216))(v157);
    }
    if ((v160 & 1) != 0)
      return 0;
    goto LABEL_321;
  }
  if (v85 <= 289)
  {
    if (v85 != 166)
    {
      if (v85 == 184)
      {
        v143 = (llvm *)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
      }
      else
      {
        if (v85 != 186)
          goto LABEL_345;
        v143 = (llvm *)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF) + 4];
      }
      return sub_1C509D1E8(v5, (uint64_t)v4, v143);
    }
    goto LABEL_239;
  }
  if (v85 <= 648)
  {
    if (v85 != 290)
    {
      if (v85 != 382)
        goto LABEL_345;
      llvm::ScalableVectorType::get((uint64_t **)(***v4 + 1912), (llvm::Type *)1);
      v254 = (llvm::PointerType *)v253;
      v255 = *(_QWORD *)(v5 + 720);
      sub_1C4768AD0(v255, v253);
      v257 = (unint64_t)(v256 + 7) >> 3;
      llvm::DataLayout::getAlignment(v255, (uint64_t)v254);
      if ((((1 << v258) + v257 - 1) & -(1 << v258)) != 8)
        goto LABEL_345;
      v259 = (llvm::Constant *)llvm::PointerType::get(v254, 0);
      v261 = (uint64_t *)llvm::Constant::getNullValue(v259, v260);
      v15 = 1;
      __src = llvm::ConstantInt::get((llvm::ConstantInt *)*v4, 1, (const llvm::APInt *)1);
      ElementPtr = llvm::ConstantExpr::getGetElementPtr(v254, v261, (llvm::Value *)&__src, 1, 0, 0, 0);
      v181 = sub_1C537D3B8((llvm *)0x2F, ElementPtr, (llvm::Constant *)*v4, 0);
      v180 = (llvm::ValueAsMetadata *)v4;
LABEL_241:
      llvm::Value::doRAUW(v180, v181, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), v4);
      v182 = v4[3];
      v183 = v4[4];
      *v183 = (uint64_t *)v182;
      v182[1] = (uint64_t *)v183;
      v4[3] = 0;
      v4[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v4);
      return v15;
    }
LABEL_239:
    v178 = (uint64_t *)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
    v179 = sub_1C5095410((uint64_t *)(v5 + 560), (uint64_t)v4);
    if (*(_QWORD *)(v5 + 592) != v179)
    {
      __src = v368;
      v367 = 0x2000000000;
      if (*(_DWORD *)(v179 + 16))
        sub_1C4E85538((uint64_t)&__src, v179 + 8);
      p_src = (unint64_t)v178;
      v251 = (unsigned int *)sub_1C61DAD48(v5 + 560, (uint64_t *)&p_src);
      sub_1C612E234(v251, __src, (_BYTE *)__src + 16 * v367);
      v252 = (_QWORD *)sub_1C5095410((uint64_t *)(v5 + 560), (uint64_t)v4);
      if (*(_QWORD **)(v5 + 592) != v252)
        sub_1C5095498((int32x2_t *)(v5 + 560), v252);
      if (__src != v368)
        free(__src);
    }
    v15 = 1;
    v180 = (llvm::ValueAsMetadata *)v4;
    v181 = (llvm::UndefValue *)v178;
    goto LABEL_241;
  }
  if (v85 == 649 || v85 == 651)
  {
    v15 = 0;
    v86 = (uint64_t)v4[-4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
    if (!v86 || *(_BYTE *)(v86 + 16) != 67)
      return v15;
    v87 = *(_QWORD *)(v86 + 8);
    if (!v87 || *(_QWORD *)(v87 + 8) || *(uint64_t ***)(v86 + 40) == v4[5])
      return 0;
    llvm::Instruction::moveBefore((llvm::Instruction *)v86, (llvm::Instruction *)v4);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v5 + 192), v86);
    return 1;
  }
LABEL_345:
  __src = v368;
  v367 = 0x200000000;
  p_src = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t ***, void **, unint64_t *))(**(_QWORD **)(v5 + 48) + 1056))(*(_QWORD *)(v5 + 48), v4, &__src, &p_src))
  {
    do
    {
      v250 = v367 == 0;
      if (!(_DWORD)v367)
        break;
      LODWORD(v367) = v367 - 1;
    }
    while (!sub_1C508FBB4());
  }
  else
  {
    v250 = 1;
  }
  if (__src != v368)
    free(__src);
  if (!v250)
    return 1;
  v80 = (uint64_t)*(v4 - 4);
  if (!v80 || *(_BYTE *)(v80 + 16))
    return 0;
LABEL_91:
  if (*(uint64_t ***)(v80 + 24) != v4[9])
    return 0;
  p_src = *(_QWORD *)(v5 + 72);
  LOBYTE(v359) = 1;
  sub_1C4773D54((uint64_t)&__src, (uint64_t)v4, 0, 0, 0);
  v82 = (llvm::Value *)llvm::FortifiedLibCallSimplifier::optimizeCall((uint64_t **)&p_src, (llvm::CallInst *)v4, (llvm::IRBuilderBase *)&__src);
  v15 = v82 != 0;
  if (v82)
  {
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v82, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v4[5] + 5), v4);
    v83 = v4[3];
    v84 = v4[4];
    *v84 = (uint64_t *)v83;
    v83[1] = (uint64_t *)v84;
    v4[3] = 0;
    v4[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v4);
  }
  if (__src != v368)
    free(__src);
  return v15;
}

uint64_t sub_1C5095410(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return a1[4];
  else
    return a1[3] + 536 * *((unsigned int *)v5 + 2);
}

void sub_1C5095498(int32x2_t *a1, _QWORD *a2)
{
  __int32 v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = a1[2].i32[0];
  if (v4)
  {
    v5 = *a1;
    v6 = v4 - 1;
    LODWORD(v7) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
    v8 = (uint64_t *)(*(_QWORD *)a1 + 16 * v7);
    v9 = *v8;
    if (*a2 == *v8)
    {
LABEL_7:
      *v8 = -8192;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
        if (*a2 == v9)
        {
          v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
          goto LABEL_7;
        }
      }
    }
  }
  v12 = (_QWORD *)a1[4];
  if (a2 + 67 == v12)
  {
    v16 = a2;
  }
  else
  {
    v13 = *(_QWORD *)&a1[3] + 8 * (((uint64_t)a2 - *(_QWORD *)&a1[3]) >> 3) + 544;
    do
    {
      *(_QWORD *)(v13 - 544) = *(_QWORD *)(v13 - 8);
      sub_1C4E85538(v13 - 536, v13);
      v14 = v13 + 536;
      v15 = v13 + 528;
      v13 += 536;
    }
    while ((_QWORD *)v15 != v12);
    v12 = (_QWORD *)a1[4];
    v16 = (_QWORD *)(v14 - 544);
  }
  while (v12 != v16)
  {
    v17 = (_QWORD *)*(v12 - 66);
    if (v12 - 64 != v17)
      free(v17);
    v12 -= 67;
  }
  a1[4] = (int32x2_t)v16;
  if (v16 != a2)
  {
    v18 = a1[2].u32[0];
    v19 = *(_QWORD *)a1 + 16 * v18;
    if (a1[1].i32[0])
    {
      if ((_DWORD)v18)
      {
        v20 = 16 * v18;
        v21 = (uint64_t)*a1;
        while ((*(_QWORD *)v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v21 += 16;
          v20 -= 16;
          if (!v20)
            goto LABEL_23;
        }
      }
      else
      {
        v21 = (uint64_t)*a1;
      }
    }
    else
    {
LABEL_23:
      v21 = *(_QWORD *)a1 + 16 * v18;
    }
    v22 = *(_QWORD *)a1 + 16 * v18;
    if (v21 != v22)
    {
      v23 = 0xF0B7672A07A44C6BLL * (((uint64_t)a2 - *(_QWORD *)&a1[3]) >> 3);
      do
      {
        v24 = *(unsigned int *)(v21 + 8);
        if (v23 < v24)
          *(_DWORD *)(v21 + 8) = v24 - 1;
        v25 = v21 + 16;
        v21 = v19;
        if (v25 != v19)
        {
          v21 = v25;
          while ((*(_QWORD *)v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v21 += 16;
            if (v21 == v19)
            {
              v21 = v19;
              break;
            }
          }
        }
      }
      while (v21 != v22);
    }
  }
}

uint64_t *sub_1C50956A8(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C5095784(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_6:
    sub_1C5095818(a1, v7);
    v8 = 0;
    sub_1C5095784(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
    goto LABEL_7;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_6;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C5095784(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_QWORD *sub_1C5095818(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C5095784(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C5095948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  llvm::Value *(*v19)(uint64_t, uint64_t, BOOL, unsigned int *, uint64_t, uint64_t, uint64_t);
  BOOL v20;
  llvm::Value *(*v21)(uint64_t, uint64_t, BOOL, unsigned int *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v55;
  _QWORD *v57;
  uint64_t **v58;
  char v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  _BYTE v69[16];
  void *v70[2];
  _QWORD v71[6];

  v71[4] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v5)
  {
LABEL_80:
    v59 = 0;
    return v59 & 1;
  }
  v7 = a2;
  v8 = a1;
  v59 = 0;
  v9 = *(uint64_t ***)a3;
  v10 = *(_QWORD *)a3 + 8 * v5;
  v11 = (_QWORD *)(a1 + 192);
  v12 = a1 + 352;
  v55 = a4 + 16;
  v60 = a1 + 352;
  v57 = (_QWORD *)(a1 + 192);
  v62 = v10;
  do
  {
    v13 = *v9;
    v14 = *((_DWORD *)*v9 + 5);
    if ((v14 & 0x40000000) != 0)
      v15 = (uint64_t *)*(v13 - 1);
    else
      v15 = &v13[-4 * (v14 & 0x7FFFFFF)];
    if (*(_BYTE *)(*v15 + 16) == 60)
    {
      v16 = *(unsigned int *)(a4 + 8);
      if (v16 >= *(unsigned int *)(a4 + 12))
        goto LABEL_20;
      goto LABEL_8;
    }
    v17 = *(_QWORD *)(v8 + 48);
    if (*(_BYTE *)(v17 + 184289))
      v18 = byte_1ED7F5800 == 0;
    else
      v18 = 0;
    if (!v18)
      goto LABEL_80;
    v64 = (uint64_t)*v9;
    v19 = sub_1C5095F24(v13, v11, v17, v12);
    if (!v19)
    {
      v16 = *(unsigned int *)(a4 + 8);
      v13 = (uint64_t *)v64;
      if (v16 >= *(unsigned int *)(a4 + 12))
      {
LABEL_20:
        v23 = v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v55, v16 + 1, 8);
        v13 = v23;
        v16 = *(unsigned int *)(a4 + 8);
      }
LABEL_8:
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v13;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_9;
    }
    v21 = v19;
    v22 = *(unsigned int *)(v7 + 8);
    if ((_DWORD)v22)
      v63 = *(_QWORD *)(*(_QWORD *)v7 + 8 * v22 - 8);
    else
      v63 = 0;
    v70[0] = v71;
    v70[1] = (void *)0x400000000;
    v66 = 0;
    v24 = sub_1C4848E88(*(_QWORD *)(v8 + 48), v64, v20) ^ 1;
    v25 = v7;
    v26 = (uint64_t)v21(v64, v7, v12, &v66, (uint64_t)v70, 0, *(_QWORD *)(v8 + 48));
    v65 = v24;
    v27 = (v66 + a5 - v24) & ~((v66 + a5 - v24) >> 63);
    if (!byte_1ED7F58C0 && (v27 > 1 || (sub_1C5096300(*(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 720), v26) & 1) == 0))
    {
      sub_1C5095E90(v7, v63);
      v51 = *(unsigned int *)(a4 + 8);
      if (v51 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v55, v51 + 1, 8);
        v51 = *(unsigned int *)(a4 + 8);
      }
      v10 = v62;
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v51) = v64;
      ++*(_DWORD *)(a4 + 8);
      v53 = 3;
      goto LABEL_74;
    }
    v67 = v69;
    v68 = 0x200000000;
    sub_1C5095948(v8, v7, v70, &v67, v27);
    v10 = v62;
    if (!(_DWORD)v68)
      goto LABEL_68;
    v58 = v9;
    v28 = v8;
    v29 = 0;
    v30 = (char *)v67;
    v31 = (char *)v67 + 8 * v68;
    do
    {
      while (1)
      {
        v32 = *(_QWORD *)v30;
        v33 = *(_DWORD *)(*(_QWORD *)v30 + 20);
        v34 = (v33 & 0x40000000) != 0 ? *(uint64_t **)(v32 - 8) : (uint64_t *)(v32 - 32 * (v33 & 0x7FFFFFF));
        v35 = *v34;
        if (*(_BYTE *)(v35 + 16) == 60 && !byte_1ED7F58C0 && v66 > v65)
        {
          v37 = *(_QWORD *)(v35 + 8);
          if (!v37 || *(_QWORD *)(v37 + 8))
            break;
        }
LABEL_55:
        v50 = *(unsigned int *)(a4 + 8);
        if (v50 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v55, v50 + 1, 8);
          v50 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v50) = v32;
        ++*(_DWORD *)(a4 + 8);
        v30 += 8;
        v29 = 1;
        if (v30 == v31)
        {
          v53 = 0;
          v59 = 1;
          v7 = a2;
          v8 = v28;
          v9 = v58;
          v10 = v62;
          goto LABEL_71;
        }
      }
      v38 = *(_QWORD *)(v28 + 48);
      v39 = *(uint64_t **)(v37 + 24);
      v40 = *((unsigned __int8 *)v39 + 16);
      v41 = *v39;
      while (1)
      {
        v42 = *(uint64_t **)(v37 + 24);
        v43 = *((unsigned __int8 *)v42 + 16);
        if (v40 != 68)
          break;
        if (v43 != 68 || *v42 != v41)
          goto LABEL_59;
LABEL_54:
        v37 = *(_QWORD *)(v37 + 8);
        if (!v37)
          goto LABEL_55;
      }
      if (v43 == 67)
      {
        v44 = *v42;
        if (v44 == v41)
          goto LABEL_54;
        v45 = *(_DWORD *)(v41 + 8);
        if ((v45 & 0xFE) == 0x12)
          v45 = *(_DWORD *)(**(_QWORD **)(v41 + 16) + 8);
        v46 = *(_DWORD *)(v44 + 8);
        if ((v46 & 0xFE) == 0x12)
          v46 = *(_DWORD *)(**(_QWORD **)(v44 + 16) + 8);
        v47 = v45 >> 8;
        v48 = v47 <= v46 >> 8 ? v41 : v44;
        v49 = v47 <= v46 >> 8 ? v44 : v41;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 1184))(v38, v48, v49))
          goto LABEL_54;
      }
LABEL_59:
      v30 += 8;
    }
    while (v30 != v31);
    v25 = a2;
    v8 = v28;
    v9 = v58;
    v10 = v62;
    if ((v29 & 1) != 0)
    {
      v53 = 0;
      v59 = 1;
      v7 = a2;
      goto LABEL_71;
    }
LABEL_68:
    sub_1C5095E90(v25, v63);
    v52 = *(unsigned int *)(a4 + 8);
    v7 = v25;
    if (v52 >= *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v55, v52 + 1, 8);
      v52 = *(unsigned int *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v52) = v64;
    ++*(_DWORD *)(a4 + 8);
    v53 = 3;
LABEL_71:
    if (v67 != v69)
      free(v67);
    v11 = v57;
LABEL_74:
    if (v70[0] != v71)
      free(v70[0]);
    if (v53)
    {
      v18 = v53 == 3;
      v12 = v60;
      if (!v18)
        goto LABEL_80;
    }
    else
    {
      v12 = v60;
    }
LABEL_9:
    ++v9;
  }
  while (v9 != (uint64_t **)v10);
  return v59 & 1;
}

uint64_t sub_1C5095E90(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)v4 + 8 * v2;
      v6 = *(_QWORD *)(v5 - 8);
      if (v6 == a2)
        break;
      *(_QWORD *)(v5 - 8) = 0;
      v7 = v2 - 1;
      *(_DWORD *)(v4 + 8) = v7;
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v7);
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v7) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v2 = *(_DWORD *)(v4 + 8);
    }
    while (v2);
  }
  return result;
}

llvm::Value *(*sub_1C5095F24(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, BOOL a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t *v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  llvm::Value *(*result)(uint64_t, uint64_t, BOOL, unsigned int *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int v14;
  BOOL v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  llvm::APInt *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t **v45;
  uint64_t v46;
  llvm::APInt *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;

  v7 = *((_DWORD *)a1 + 5);
  if ((v7 & 0x40000000) != 0)
    v8 = (uint64_t *)*(a1 - 1);
  else
    v8 = &a1[-4 * (v7 & 0x7FFFFFF)];
  v9 = (_QWORD *)*v8;
  v10 = *(unsigned __int8 *)(*v8 + 16);
  if (*v8)
    v11 = v10 >= 0x1C;
  else
    v11 = 0;
  if (!v11 || (*(_DWORD *)(*v9 + 8) & 0xFE) == 0x12)
    return 0;
  v13 = *a1;
  v14 = *((unsigned __int8 *)a1 + 16);
  v16 = v10 == 68 && v14 == 68;
  if (v10 == 67 || v16)
    goto LABEL_47;
  if (v10 - 59 >= 0xFFFFFFEE)
  {
    HIDWORD(v20) = v10 - 41;
    LODWORD(v20) = v10 - 41;
    v19 = v20 >> 1;
    v21 = v19 > 6;
    v22 = (1 << v19) & 0x47;
    if (!v21 && v22 != 0)
    {
      if (v14 == 68)
      {
        if ((*((_BYTE *)v9 + 17) & 4) != 0)
          goto LABEL_41;
      }
      else if ((*((_BYTE *)v9 + 17) & 2) != 0)
      {
        goto LABEL_41;
      }
    }
  }
  if (v10 - 56 < 2)
  {
LABEL_47:
    if (v10 - 66 < 3)
      return sub_1C50964D4;
    goto LABEL_60;
  }
  if (v10 != 58)
  {
    if (v14 != 68 && v10 == 54)
      goto LABEL_41;
    if (v10 == 53)
    {
      v24 = v9[1];
      if (v24)
      {
        if (!*(_QWORD *)(v24 + 8))
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 8);
          if (v40)
          {
            if (!*(_QWORD *)(v40 + 8))
            {
              v41 = *(_QWORD *)(v40 + 24);
              if (v41)
              {
                if (*(_BYTE *)(v41 + 16) == 56)
                {
                  v42 = *(_DWORD *)(v41 + 20);
                  v43 = (v42 & 0x40000000) != 0 ? *(_QWORD *)(v41 - 8) : v41 - 32 * (v42 & 0x7FFFFFF);
                  v46 = *(_QWORD *)(v43 + 32);
                  if (v46 && *(_BYTE *)(v46 + 16) == 16)
                  {
                    v48 = (llvm::APInt *)(v46 + 24);
                    v49 = *(_DWORD *)(*v9 + 8) >> 8;
                    v50 = *(_DWORD *)(v46 + 32);
                    v51 = v50 > 0x40
                        ? llvm::APInt::countLeadingZerosSlowCase(v48)
                        : v50 + __clz(*(_QWORD *)v48) - 64;
                    if (v50 - v51 <= v49)
                    {
LABEL_41:
                      if (v10 == 66)
                      {
                        v27 = sub_1C477672C((uint64_t)a2, (uint64_t)v9);
                        v28 = a2[1];
                        if (v28 == *a2)
                          v29 = (unsigned int *)a2 + 5;
                        else
                          v29 = (unsigned int *)(a2 + 2);
                        if (v27 != (_QWORD *)(v28 + 8 * *v29))
                          return 0;
                        v10 = *((unsigned __int8 *)v9 + 16);
                      }
                      goto LABEL_47;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v10 != 66)
      return 0;
    v25 = *((_DWORD *)v9 + 5);
    v26 = (v25 & 0x40000000) != 0 ? (uint64_t *)*(v9 - 1) : &v9[-4 * (v25 & 0x7FFFFFF)];
    v35 = *v26;
    v36 = *(_DWORD *)(*(_QWORD *)*v26 + 8);
    if (v36 != 13)
      return 0;
    if (v36 >> 8 > *(_DWORD *)(v13 + 8) >> 8)
      return 0;
    v37 = *(unsigned __int8 *)(v35 + 16);
    if (v37 < 0x1C)
      return 0;
    v52 = 0;
    if (!sub_1C49F21C0(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v35, &v52)
      || v52 == *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16)
      || (v38 = *(_QWORD *)(v52 + 8), v39 = v38 & 0xFFFFFFFFFFFFFFF8, (v38 & 0xFFFFFFFFFFFFFFF8) == 0)
      || ((v38 >> 1) & 3) != (v14 == 68))
    {
      if (v14 == 68)
      {
        if (v37 != 68)
          return 0;
      }
      else if (v37 != 67)
      {
        return 0;
      }
      v44 = *(_DWORD *)(v35 + 20);
      if ((v44 & 0x40000000) != 0)
        v45 = *(unint64_t ***)(v35 - 8);
      else
        v45 = (unint64_t **)(v35 - 32 * (v44 & 0x7FFFFFF));
      v39 = **v45;
    }
    if (*(_DWORD *)(*v9 + 8) >> 8 >= *(_DWORD *)(v39 + 8) >> 8)
    {
      v10 = *((unsigned __int8 *)v9 + 16);
      goto LABEL_41;
    }
    return 0;
  }
  v17 = *((_DWORD *)v9 + 5);
  if ((v17 & 0x40000000) != 0)
    v18 = (_QWORD *)*(v9 - 1);
  else
    v18 = &v9[-4 * (v17 & 0x7FFFFFF)];
  v30 = v18[4];
  if (v30)
    v31 = *(_BYTE *)(v30 + 16) == 16;
  else
    v31 = 0;
  if (!v31)
    return 0;
  v32 = *(_DWORD *)(v30 + 32);
  if (!v32)
    return 0;
  v33 = (llvm::APInt *)(v30 + 24);
  if (v32 <= 0x40)
  {
    result = 0;
    if (*(_QWORD *)v33 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v32)
      return result;
    goto LABEL_60;
  }
  if (llvm::APInt::countTrailingOnesSlowCase(v33) == v32)
    return 0;
LABEL_60:
  v34 = v9[1];
  if ((!v34 || *(_QWORD *)(v34 + 8))
    && !(*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 1144))(a3, v13, *v9))
  {
    return 0;
  }
  if (v14 == 68)
    return (llvm::Value *(*)(uint64_t, uint64_t, BOOL, unsigned int *, uint64_t, uint64_t, uint64_t))sub_1C50966A0;
  else
    return (llvm::Value *(*)(uint64_t, uint64_t, BOOL, unsigned int *, uint64_t, uint64_t, uint64_t))sub_1C50966A8;
}

uint64_t sub_1C5096300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v4;

  result = 0;
  if (a3)
  {
    v4 = *(unsigned __int8 *)(a3 + 16);
    if (v4 >= 0x1C)
      __asm { BR              X10 }
  }
  return result;
}

void sub_1C5096494()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C509649C()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C50964A4()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C50964AC()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C50964B4()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C50964BC()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C50964C4()
{
  JUMPOUT(0x1C5096434);
}

void sub_1C50964CC()
{
  JUMPOUT(0x1C5096434);
}

llvm::Value *sub_1C50964D4(uint64_t a1, uint64_t a2, BOOL a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 **v17;
  int v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  BOOL v21;
  int v22;
  llvm::Value **v23;
  llvm::Value *v24;
  uint64_t v25;

  v11 = a1;
  v12 = *(_DWORD *)(a1 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(uint64_t **)(a1 - 8);
  else
    v13 = (uint64_t *)(a1 - 32 * (v12 & 0x7FFFFFF));
  v14 = *v13;
  if (*(_BYTE *)(*v13 + 16) == 67)
  {
    v15 = sub_1C4848E88(a7, v14, a3);
    v16 = *(_DWORD *)(v14 + 20);
    if ((v16 & 0x40000000) != 0)
      v17 = *(unsigned __int8 ***)(v14 - 8);
    else
      v17 = (unsigned __int8 **)(v14 - 32 * (v16 & 0x7FFFFFF));
    v20 = sub_1C50966B0(a2, v11, *v17, *(_QWORD *)v11);
    sub_1C5096864(a2, (llvm::ValueAsMetadata *)v11, (llvm::Value *)v20);
    sub_1C50968E4(a2, v11, 0);
    v11 = (uint64_t)v20;
  }
  else
  {
    v18 = *(_DWORD *)(v14 + 20);
    if ((v18 & 0x40000000) != 0)
      v19 = *(uint64_t **)(v14 - 8);
    else
      v19 = (uint64_t *)(v14 - 32 * (v18 & 0x7FFFFFF));
    sub_1C5096B44(a2, a1, 0, *v19);
    v15 = 1;
  }
  *a4 = 0;
  if (!*(_QWORD *)(v14 + 8))
    sub_1C50968E4(a2, v14, 0);
  if (v11 && *(unsigned __int8 *)(v11 + 16) >= 0x1Cu)
  {
    v22 = *(_DWORD *)(v11 + 20);
    if ((v22 & 0x40000000) != 0)
      v23 = *(llvm::Value ***)(v11 - 8);
    else
      v23 = (llvm::Value **)(v11 - 32 * (v22 & 0x7FFFFFF));
    v24 = *v23;
    if (*(_QWORD *)v11 == *(_QWORD *)*v23)
    {
      sub_1C50968E4(a2, v11, v24);
      return v24;
    }
    else
    {
      if (a5)
      {
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(_DWORD *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v25 + 1, 8);
          LODWORD(v25) = *(_DWORD *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v11;
        ++*(_DWORD *)(a5 + 8);
      }
      *a4 = v15 & ~sub_1C4848E88(a7, v11, v21);
    }
  }
  return (llvm::Value *)v11;
}

uint64_t sub_1C50966A0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1C5097598(a1, a2, a3, a4, a5, a6, a7, 1);
}

uint64_t sub_1C50966A8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1C5097598(a1, a2, a3, a4, a5, a6, a7, 0);
}

unsigned __int8 *sub_1C50966B0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  unsigned __int8 *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  void *v21;
  unsigned int v22;
  _QWORD v23[16];

  v23[15] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E8140680;
  v8[1] = a2;
  sub_1C4773D54((uint64_t)&v21, a2, 0, 0, 0);
  v9 = v21;
  if (v22)
  {
    v14 = 0;
    v10 = (char *)v21 + 16 * v22;
    v15 = 16 * v22;
    while (*(_DWORD *)((char *)v21 + v14))
    {
      v14 += 16;
      if (v15 == v14)
        goto LABEL_3;
    }
    v10 = (char *)v21 + v14;
    if (16 * v22 - 16 != v14)
    {
      v16 = v10 + 24;
      v17 = v15 - v14 - 16;
      do
      {
        v18 = *((_DWORD *)v16 - 2);
        if (v18)
        {
          *(_DWORD *)v10 = v18;
          *((_QWORD *)v10 + 1) = *v16;
          v10 += 16;
        }
        v16 += 2;
        v17 -= 16;
      }
      while (v17);
    }
  }
  else
  {
    v10 = (char *)v21;
  }
LABEL_3:
  v22 = (unint64_t)(v10 - v9) >> 4;
  v19 = "promoted";
  v20 = 259;
  v11 = sub_1C4773E38((uint64_t *)&v21, 39, a3, a4, (uint64_t)&v19);
  v8[2] = v11;
  if (v21 != v23)
    free(v21);
  v21 = v8;
  sub_1C5096C44(a1, (char *)&v21);
  v12 = v21;
  v21 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  return v11;
}

uint64_t sub_1C5096864(uint64_t a1, llvm::ValueAsMetadata *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = operator new();
  v8 = sub_1C5096DE8(v6, a2, a3);
  sub_1C5096C44(a1, (char *)&v8);
  result = v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C50968E4(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::SmallPtrSetImplBase *v6;
  uint64_t v7;
  llvm::Type *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::UndefValue **v18;
  unint64_t v19;
  llvm::UndefValue *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  llvm::Value *v33;
  uint64_t v34;

  v6 = *(llvm::SmallPtrSetImplBase **)(a1 + 144);
  v7 = operator new();
  v9 = v7;
  *(_QWORD *)v7 = &off_1E81406E0;
  *(_QWORD *)(v7 + 8) = a2;
  v10 = (_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(v11 + 48);
  *(_BYTE *)(v7 + 24) = a2 + 24 != v12;
  v33 = a3;
  if (a2 + 24 != v12)
  {
    if (*v10)
      v11 = *v10 - 24;
    else
      v11 = 0;
  }
  *(_QWORD *)(v7 + 48) = v7 + 64;
  *(_QWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 32) = &off_1E8140710;
  *(_QWORD *)(v7 + 40) = a2;
  *(_QWORD *)(v7 + 56) = 0x400000000;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = v13 & 0x7FFFFFF;
  if ((v13 & 0x7FFFFFFu) < 5)
  {
    if (!(_DWORD)v14)
      goto LABEL_27;
    v14 = v14;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 48, v7 + 64, v13 & 0x7FFFFFF, 8);
  }
  v15 = 0;
  do
  {
    v16 = *(_DWORD *)(a2 + 20);
    if ((v16 & 0x40000000) != 0)
      v17 = *(_QWORD *)(a2 - 8);
    else
      v17 = a2 - 32 * (v16 & 0x7FFFFFF);
    v18 = *(llvm::UndefValue ***)(v17 + v15);
    v19 = *(unsigned int *)(v9 + 56);
    if (v19 >= *(unsigned int *)(v9 + 60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 48, v9 + 64, v19 + 1, 8);
      v19 = *(unsigned int *)(v9 + 56);
    }
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v19) = v18;
    ++*(_DWORD *)(v9 + 56);
    v20 = llvm::UndefValue::get(*v18, v8);
    v21 = *(_DWORD *)(a2 + 20);
    if ((v21 & 0x40000000) != 0)
      v22 = *(_QWORD *)(a2 - 8);
    else
      v22 = a2 - 32 * (v21 & 0x7FFFFFF);
    v23 = v22 + v15;
    if (*(_QWORD *)(v22 + v15))
    {
      **(_QWORD **)(v23 + 16) = *(_QWORD *)(v23 + 8);
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
    }
    *(_QWORD *)v23 = v20;
    if (v20)
    {
      v27 = *((_QWORD *)v20 + 1);
      v25 = (_QWORD *)((char *)v20 + 8);
      v26 = v27;
      v28 = v22 + v15;
      *(_QWORD *)(v28 + 8) = v27;
      if (v27)
        *(_QWORD *)(v26 + 16) = v28 + 8;
      *(_QWORD *)(v28 + 16) = v25;
      *v25 = v23;
    }
    v15 += 32;
    --v14;
  }
  while (v14);
LABEL_27:
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = v6;
  if (v33)
  {
    v29 = operator new();
    *(_QWORD *)(v9 + 96) = sub_1C5096DE8(v29, (llvm::ValueAsMetadata *)a2, v33);
  }
  sub_1C4774094(v6, a2);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
  v30 = *(_QWORD *)(a2 + 24);
  v31 = *(_QWORD **)(a2 + 32);
  *v31 = v30;
  *(_QWORD *)(v30 + 8) = v31;
  *v10 = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v34 = v9;
  sub_1C5096C44(a1, (char *)&v34);
  result = v34;
  v34 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1C5096B44(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v8 = operator new();
  *(_QWORD *)v8 = &off_1E8140740;
  *(_QWORD *)(v8 + 8) = a2;
  *(_DWORD *)(v8 + 24) = a3;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  v11 = *(_QWORD *)(v10 + 32 * a3);
  *(_QWORD *)(v8 + 16) = v11;
  v12 = v10 + 32 * a3;
  if (v11)
  {
    **(_QWORD **)(v12 + 16) = *(_QWORD *)(v12 + 8);
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
  }
  *(_QWORD *)v12 = a4;
  if (a4)
  {
    v16 = *(_QWORD *)(a4 + 8);
    v15 = (_QWORD *)(a4 + 8);
    v14 = v16;
    v17 = v10 + 32 * a3;
    *(_QWORD *)(v17 + 8) = v16;
    if (v16)
      *(_QWORD *)(v14 + 16) = v17 + 8;
    *(_QWORD *)(v17 + 16) = v15;
    *v15 = v12;
  }
  v19 = v8;
  sub_1C5096C44(a1, (char *)&v19);
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5096C44(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _BOOL4 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = &v5[8 * v4];
    v10 = v5 <= a2 && v8 > a2;
    if (v10)
      v11 = (a2 - v5) >> 3;
    else
      v11 = -1;
    v21 = 0;
    v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v7, 8, &v21);
    v12 = *(char **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      v15 = 8 * v13;
      v16 = v5;
      do
      {
        v17 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        v12 += 8;
        *(_QWORD *)v16 = v17;
        v16 += 8;
        v15 -= 8;
      }
      while (v15);
      v18 = *(_QWORD *)a1 - 8;
      do
      {
        v19 = *(_QWORD *)(v18 + v14);
        *(_QWORD *)(v18 + v14) = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v14 -= 8;
      }
      while (v14);
      v12 = *(char **)a1;
    }
    v20 = v21;
    if (v12 != (char *)(a1 + 16))
      free(v12);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v20;
    if (v10)
      a2 = &v5[8 * v11];
    v4 = *(unsigned int *)(a1 + 8);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 8) = v4 + 1;
}

void sub_1C5096D74()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5096D88(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  else
    v2 = 0;
  if (v2)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1 + 40) + 40, (uint64_t ***)v1);
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD **)(v1 + 32);
    *v4 = v3;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v1);
  }
}

uint64_t sub_1C5096DE8(uint64_t a1, llvm::ValueAsMetadata *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  *(_QWORD *)a1 = &off_1E81406B0;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = a1 + 32;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v7 = a1 + 16;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v8 = a1 + 96;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 104) = 0x100000000;
  *(_QWORD *)(a1 + 120) = a3;
  v9 = *((_QWORD *)a2 + 1);
  if (v9)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v9 + 24);
      v12 = *(_DWORD *)(v11 + 20);
      if ((v12 & 0x40000000) != 0)
        v13 = *(_QWORD *)(v11 - 8);
      else
        v13 = v11 - 32 * (v12 & 0x7FFFFFF);
      if (v10 >= *(_DWORD *)(a1 + 28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v10 + 1, 16);
        v10 = *(_DWORD *)(a1 + 24);
      }
      v14 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v10);
      *v14 = v11;
      v14[1] = ((unint64_t)(v9 - v13) >> 5);
      v10 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v10;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  llvm::findDbgValues(v8, (uint64_t)a2);
  llvm::Value::doRAUW(a2, a3, (llvm::Value *)1);
  return a1;
}

_QWORD *sub_1C5096F0C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E81406B0;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 14)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  return a1;
}

void sub_1C5096F60(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E81406B0;
  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 14)
    free(v2);
  v3 = (_QWORD *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5096FC4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::DbgVariableIntrinsic **v17;
  uint64_t v18;
  llvm::DbgVariableIntrinsic *v19;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned int **)(a1 + 16);
    v4 = &v3[4 * v2];
    do
    {
      v5 = *(_QWORD *)v3;
      v6 = *(_DWORD *)(*(_QWORD *)v3 + 20);
      if ((v6 & 0x40000000) != 0)
        v7 = *(_QWORD *)(v5 - 8);
      else
        v7 = v5 - 32 * (v6 & 0x7FFFFFF);
      v8 = v3[2];
      v9 = *(_QWORD *)(a1 + 8);
      v10 = v7 + 32 * v8;
      if (*(_QWORD *)v10)
      {
        **(_QWORD **)(v10 + 16) = *(_QWORD *)(v10 + 8);
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
          *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
      }
      *(_QWORD *)v10 = v9;
      if (v9)
      {
        v14 = *(_QWORD *)(v9 + 8);
        v12 = (_QWORD *)(v9 + 8);
        v13 = v14;
        v15 = v7 + 32 * v8;
        *(_QWORD *)(v15 + 8) = v14;
        if (v14)
          *(_QWORD *)(v13 + 16) = v15 + 8;
        *(_QWORD *)(v15 + 16) = v12;
        *v12 = v10;
      }
      v3 += 4;
    }
    while (v3 != v4);
  }
  v16 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v16)
  {
    v17 = *(llvm::DbgVariableIntrinsic ***)(a1 + 96);
    v18 = 8 * v16;
    do
    {
      v19 = *v17++;
      llvm::DbgVariableIntrinsic::replaceVariableLocationOp(v19, *(llvm::Value **)(a1 + 120), *(llvm::Value **)(a1 + 8));
      v18 -= 8;
    }
    while (v18);
  }
}

_QWORD *sub_1C50970A8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = &off_1E81406E0;
  v2 = a1[12];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[4] = &off_1E8140710;
  v3 = (_QWORD *)a1[6];
  if (v3 != a1 + 8)
    free(v3);
  return a1;
}

void sub_1C5097108(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = &off_1E81406E0;
  v2 = a1[12];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[4] = &off_1E8140710;
  v3 = (_QWORD *)a1[6];
  if (v3 != a1 + 8)
    free(v3);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5097178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;

  sub_1C50973C0((_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 8 * v3;
    do
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD *)(v7 - 8);
      else
        v9 = v7 - 32 * (v8 & 0x7FFFFFF);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v5);
      v11 = v9 + v4;
      if (*(_QWORD *)(v9 + v4))
      {
        **(_QWORD **)(v11 + 16) = *(_QWORD *)(v11 + 8);
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
      }
      *(_QWORD *)v11 = v10;
      if (v10)
      {
        v15 = *(_QWORD *)(v10 + 8);
        v13 = (_QWORD *)(v10 + 8);
        v14 = v15;
        v16 = v9 + v4;
        *(_QWORD *)(v16 + 8) = v15;
        if (v15)
          *(_QWORD *)(v14 + 16) = v16 + 8;
        *(_QWORD *)(v16 + 16) = v13;
        *v13 = v11;
      }
      v5 += 8;
      v4 += 32;
    }
    while (v6 != v5);
  }
  v17 = *(_QWORD *)(a1 + 104);
  result = sub_1C477672C(v17, *(_QWORD *)(a1 + 8));
  v19 = *(_QWORD *)(v17 + 8);
  v20 = 16;
  if (v19 == *(_QWORD *)v17)
    v20 = 20;
  if (result != (_QWORD *)(v19 + 8 * *(unsigned int *)(v17 + v20)))
  {
    *result = -2;
    ++*(_DWORD *)(v17 + 24);
  }
  return result;
}

_QWORD *sub_1C5097294(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140710;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C50972D4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140710;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5097324(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(unsigned int *)(result + 24);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 8 * v1;
    do
    {
      v5 = *(_QWORD *)(result + 8);
      v6 = *(_DWORD *)(v5 + 20);
      if ((v6 & 0x40000000) != 0)
        v7 = *(_QWORD *)(v5 - 8);
      else
        v7 = v5 - 32 * (v6 & 0x7FFFFFF);
      v8 = *(_QWORD *)(*(_QWORD *)(result + 16) + v3);
      v9 = v7 + v2;
      if (*(_QWORD *)(v7 + v2))
      {
        **(_QWORD **)(v9 + 16) = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
          *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
      }
      *(_QWORD *)v9 = v8;
      if (v8)
      {
        v13 = *(_QWORD *)(v8 + 8);
        v11 = (_QWORD *)(v8 + 8);
        v12 = v13;
        v14 = v7 + v2;
        *(_QWORD *)(v14 + 8) = v13;
        if (v13)
          *(_QWORD *)(v12 + 16) = v14 + 8;
        *(_QWORD *)(v14 + 16) = v11;
        *v11 = v9;
      }
      v3 += 8;
      v2 += 32;
    }
    while (v4 != v3);
  }
  return result;
}

void sub_1C50973C0(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ValueSymbolTable *v20;

  if (a1[8])
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v4 + 40, (uint64_t ***)a2);
      v5 = *(_QWORD *)(a2 + 24);
      v6 = *(_QWORD **)(a2 + 32);
      *v6 = v5;
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
    sub_1C53DF664((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 40), *(_QWORD *)a1 + 24, a2);
  }
  else
  {
    v7 = *(_QWORD *)a1 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)a1 + 48); i != v7; i = *(_QWORD *)(i + 8))
    {
      v9 = i - 24;
      if (!i)
        v9 = 0;
      if (*(_BYTE *)(v9 + 16) != 83)
      {
        v10 = *(unsigned __int8 *)(i - 8) - 38;
        v11 = v10 > 0x38;
        v12 = (1 << v10) & 0x100060000000001;
        if (v11 || v12 == 0)
          v7 = i;
        else
          v7 = *(_QWORD *)(i + 8);
        break;
      }
    }
    if (v7)
      v14 = (uint64_t *)(v7 - 24);
    else
      v14 = 0;
    if (*(_QWORD *)(a2 + 40))
    {
      llvm::Instruction::moveBefore((llvm::Instruction *)a2, (llvm::Instruction *)v14);
    }
    else
    {
      v15 = v14[5];
      *(_QWORD *)(a2 + 40) = v15;
      *(_WORD *)(v15 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
      {
        v19 = *(_QWORD *)(v15 + 56);
        if (v19)
        {
          v20 = *(llvm::ValueSymbolTable **)(v19 + 104);
          if (v20)
            llvm::ValueSymbolTable::reinsertValue(v20, (llvm::Value *)a2);
        }
      }
      v17 = v14[3];
      v16 = v14 + 3;
      *(_QWORD *)(a2 + 24) = v17;
      *(_QWORD *)(a2 + 32) = v16;
      v18 = a2 + 24;
      *(_QWORD *)(v17 + 8) = v18;
      *v16 = v18;
    }
  }
}

void sub_1C509750C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5097520(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(unsigned int *)(result + 24);
  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(v3 - 8);
  else
    v5 = v3 - 32 * (v4 & 0x7FFFFFF);
  v6 = v5 + 32 * v1;
  if (*(_QWORD *)v6)
  {
    **(_QWORD **)(v6 + 16) = *(_QWORD *)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  }
  *(_QWORD *)v6 = v2;
  if (v2)
  {
    v10 = *(_QWORD *)(v2 + 8);
    v8 = (_QWORD *)(v2 + 8);
    v9 = v10;
    v11 = v5 + 32 * v1;
    *(_QWORD *)(v11 + 8) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = v11 + 8;
    *(_QWORD *)(v11 + 16) = v8;
    *v8 = v6;
  }
  return result;
}

uint64_t sub_1C5097598(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v10;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  char *v21;
  unsigned __int8 *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  llvm::Type *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  BOOL v50;
  llvm::UndefValue *v51;
  unsigned int v52;
  llvm::APInt *v53;
  const llvm::APInt *v54;
  _QWORD *v55;
  void *v56;
  llvm::Value **v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  BOOL v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unsigned int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t *v97;
  _QWORD v98[4];
  __int16 v99;
  void *v100;
  unsigned int v101;
  _QWORD v102[17];

  v10 = a5;
  v102[15] = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)(a1 + 20);
  if ((v14 & 0x40000000) != 0)
    v15 = *(uint64_t **)(a1 - 8);
  else
    v15 = (uint64_t *)(a1 - 32 * (v14 & 0x7FFFFFF));
  v16 = *v15;
  *a4 = 0;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17 || *(_QWORD *)(v17 + 8))
  {
    v18 = *(_QWORD *)v16;
    v19 = (_QWORD *)operator new();
    *v19 = &off_1E8140770;
    v19[1] = a1;
    sub_1C4773D54((uint64_t)&v100, a1, 0, 0, 0);
    v20 = v100;
    if (v101)
    {
      v70 = 0;
      v21 = (char *)v100 + 16 * v101;
      v71 = 16 * v101;
      while (*(_DWORD *)((char *)v100 + v70))
      {
        v70 += 16;
        if (v71 == v70)
          goto LABEL_8;
      }
      v21 = (char *)v100 + v70;
      if (16 * v101 - 16 != v70)
      {
        v72 = v21 + 24;
        v73 = v71 - v70 - 16;
        v10 = a5;
        do
        {
          v74 = *((_DWORD *)v72 - 2);
          if (v74)
          {
            *(_DWORD *)v21 = v74;
            *((_QWORD *)v21 + 1) = *v72;
            v21 += 16;
          }
          v72 += 2;
          v73 -= 16;
        }
        while (v73);
      }
    }
    else
    {
      v21 = (char *)v100;
    }
LABEL_8:
    v101 = (unint64_t)(v21 - v20) >> 4;
    v98[0] = "promoted";
    v99 = 259;
    v22 = sub_1C4773E38((uint64_t *)&v100, 38, (unsigned __int8 *)a1, v18, (uint64_t)v98);
    v19[2] = v22;
    if (v100 != v102)
    {
      free(v100);
      v22 = (unsigned __int8 *)v19[2];
    }
    v100 = v19;
    sub_1C5096C44(a2, (char *)&v100);
    v23 = v100;
    v100 = 0;
    if (v23)
      (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
    if (v22[16] >= 0x1Cu)
    {
      if (v22)
      {
        llvm::Instruction::moveAfter((llvm::Instruction *)v22, (llvm::Instruction *)v16);
        if (a6)
        {
          v24 = *(unsigned int *)(a6 + 8);
          if (v24 >= *(_DWORD *)(a6 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v24 + 1, 8);
            LODWORD(v24) = *(_DWORD *)(a6 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a6 + 8 * v24) = v22;
          ++*(_DWORD *)(a6 + 8);
        }
      }
    }
    sub_1C5096864(a2, (llvm::ValueAsMetadata *)v16, (llvm::Value *)v22);
    sub_1C5096B44(a2, a1, 0, v16);
  }
  v100 = 0;
  v25 = sub_1C49F21C0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v16, &v100);
  v26 = *(_QWORD *)a3;
  v27 = *(unsigned int *)(a3 + 16);
  if (v25)
    v28 = v100 == (void *)(*(_QWORD *)a3 + 16 * v27);
  else
    v28 = 1;
  v29 = a8;
  if (!v28)
  {
    if (((*((_DWORD *)v100 + 2) >> 1) & 3) == a8)
      goto LABEL_32;
    v29 = 2;
  }
  v30 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF9 | (2 * v29);
  v97 = 0;
  v31 = sub_1C49F21C0(v26, v27, v16, &v97);
  v32 = v97;
  if ((v31 & 1) == 0)
  {
    v98[0] = v97;
    v33 = *(_DWORD *)(a3 + 8);
    if (4 * v33 + 4 >= (3 * v27))
    {
      LODWORD(v27) = 2 * v27;
    }
    else if ((int)v27 + ~v33 - *(_DWORD *)(a3 + 12) > v27 >> 3)
    {
LABEL_28:
      *(_DWORD *)(a3 + 8) = v33 + 1;
      if (*v32 != -4096)
        --*(_DWORD *)(a3 + 12);
      *v32 = v16;
      v32[1] = 0;
      goto LABEL_31;
    }
    v75 = *(unsigned int *)(a3 + 16);
    v76 = *(_QWORD *)a3;
    v77 = (v27 - 1) | ((unint64_t)(v27 - 1) >> 1);
    v78 = v77 | (v77 >> 2) | ((v77 | (v77 >> 2)) >> 4);
    v79 = ((v78 | (v78 >> 8)) >> 16) | v78 | (v78 >> 8);
    if ((v79 + 1) > 0x40)
      v80 = v79 + 1;
    else
      v80 = 64;
    *(_DWORD *)(a3 + 16) = v80;
    v81 = operator new(16 * v80, (std::align_val_t)8uLL);
    *(_QWORD *)a3 = v81;
    if (v76)
    {
      v92 = a8;
      *(_QWORD *)(a3 + 8) = 0;
      v82 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v82)
      {
        v83 = 16 * v82;
        do
        {
          *v81 = -4096;
          v81 += 2;
          v83 -= 16;
        }
        while (v83);
      }
      if ((_DWORD)v75)
      {
        v84 = 0;
        v85 = (_QWORD *)(v76 + 8);
        v86 = 16 * v75;
        do
        {
          v87 = *(v85 - 1);
          if ((v87 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v100 = 0;
            sub_1C49F21C0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v87, &v100);
            v88 = v100;
            *(_QWORD *)v100 = v87;
            v88[1] = *v85;
            *(_DWORD *)(a3 + 8) = ++v84;
          }
          v85 += 2;
          v86 -= 16;
        }
        while (v86);
      }
      MEMORY[0x1CAA32FB4](v76, 8);
      v81 = *(_QWORD **)a3;
      LODWORD(v89) = *(_DWORD *)(a3 + 16);
      a8 = v92;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = 0;
      v89 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v89)
      {
        v90 = 0;
        do
        {
          v81[v90] = -4096;
          v90 += 2;
        }
        while (2 * v89 != v90);
      }
    }
    v10 = a5;
    sub_1C49F21C0((uint64_t)v81, v89, v16, v98);
    v33 = *(_DWORD *)(a3 + 8);
    v32 = (uint64_t *)v98[0];
    goto LABEL_28;
  }
LABEL_31:
  v32[1] = v30;
LABEL_32:
  v34 = *(_QWORD *)a1;
  v35 = (_QWORD *)operator new();
  *v35 = &off_1E81407A0;
  v35[1] = v16;
  v35[2] = *(_QWORD *)v16;
  *(_QWORD *)v16 = v34;
  v100 = v35;
  sub_1C5096C44(a2, (char *)&v100);
  v36 = v100;
  v100 = 0;
  if (v36)
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  sub_1C5096864(a2, (llvm::ValueAsMetadata *)a1, (llvm::Value *)v16);
  v38 = *(_DWORD *)(v16 + 20);
  v39 = v38 & 0x7FFFFFF;
  if ((v38 & 0x7FFFFFF) == 0)
    goto LABEL_81;
  v40 = v10;
  v41 = 0;
  v42 = 0;
  v93 = v40 + 16;
  v43 = (unsigned __int8 *)a1;
  do
  {
    v44 = *(_DWORD *)(v16 + 20);
    if ((v44 & 0x40000000) != 0)
      v45 = *(_QWORD *)(v16 - 8);
    else
      v45 = v16 - 32 * (v44 & 0x7FFFFFF);
    v46 = *(_QWORD *)a1;
    if (**(_QWORD **)(v45 + v41) != *(_QWORD *)a1 && (v42 || *(_BYTE *)(v16 + 16) != 85))
    {
      if ((v44 & 0x40000000) != 0)
        v47 = *(_QWORD *)(v16 - 8);
      else
        v47 = v16 - 32 * (v44 & 0x7FFFFFF);
      v48 = *(unsigned __int8 **)(v47 + v41);
      v49 = v48[16];
      if (v48)
        v50 = v49 == 16;
      else
        v50 = 0;
      if (v50)
      {
        v52 = *(_DWORD *)(v46 + 8) >> 8;
        v53 = (llvm::APInt *)(v48 + 24);
        if (a8)
          llvm::APInt::sext(v53, v52, (llvm::APInt *)&v100);
        else
          llvm::APInt::zext(v53, v52, (uint64_t)&v100);
        v57 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)a1, (llvm::Type *)&v100, v54);
        sub_1C5096B44(a2, v16, v42, (uint64_t)v57);
        if (v101 >= 0x41 && v100)
          MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
      }
      else if ((v49 - 11) > 1)
      {
        if (v43)
          goto LABEL_68;
        if (a8)
        {
          v91 = a8;
          v55 = (_QWORD *)operator new();
          *v55 = &off_1E81407D0;
          v55[1] = a1;
          sub_1C4773D54((uint64_t)&v100, a1, 0, 0, 0);
          v98[0] = "promoted";
          v99 = 259;
          v43 = sub_1C4773E38((uint64_t *)&v100, 40, v48, v46, (uint64_t)v98);
          v55[2] = v43;
          if (v100 != v102)
          {
            free(v100);
            v43 = (unsigned __int8 *)v55[2];
          }
          v100 = v55;
          sub_1C5096C44(a2, (char *)&v100);
          v56 = v100;
          v100 = 0;
          if (v56)
            (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
          a8 = v91;
        }
        else
        {
          v43 = sub_1C50966B0(a2, a1, v48, *(_QWORD *)a1);
        }
        if (v43[16] > 0x1Bu)
        {
LABEL_68:
          if (a5)
          {
            v58 = *(unsigned int *)(a5 + 8);
            if (v58 >= *(unsigned int *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v93, v58 + 1, 8);
              v58 = *(unsigned int *)(a5 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v58) = v43;
            ++*(_DWORD *)(a5 + 8);
          }
          sub_1C5096B44(a2, (uint64_t)v43, 0, (uint64_t)v48);
          v59 = operator new();
          v60 = (void *)v59;
          *(_QWORD *)v59 = &off_1E8140800;
          *(_QWORD *)(v59 + 8) = v43;
          v61 = (uint64_t *)(v43 + 24);
          v62 = *((_QWORD *)v43 + 5);
          v63 = *(unsigned __int8 **)(v62 + 48);
          *(_BYTE *)(v59 + 24) = v43 + 24 != v63;
          if (v43 + 24 != v63)
          {
            v64 = *v61;
            v65 = *v61 - 24;
            if (v64)
              v62 = v65;
            else
              v62 = 0;
          }
          *(_QWORD *)(v59 + 16) = v62;
          llvm::Instruction::moveBefore((llvm::Instruction *)v43, (llvm::Instruction *)v16);
          v100 = v60;
          sub_1C5096C44(a2, (char *)&v100);
          v66 = v100;
          v100 = 0;
          if (v66)
            (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
          sub_1C5096B44(a2, v16, v42, (uint64_t)v43);
          v68 = sub_1C4848E88(a7, (uint64_t)v43, v67);
          v43 = 0;
          *a4 += v68 ^ 1;
        }
        else
        {
          sub_1C5096B44(a2, v16, v42, (uint64_t)v43);
          v43 = 0;
        }
      }
      else
      {
        v51 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, v37);
        sub_1C5096B44(a2, v16, v42, (uint64_t)v51);
      }
    }
    ++v42;
    v41 += 32;
  }
  while (v39 != v42);
  if (v43 == (unsigned __int8 *)a1)
LABEL_81:
    sub_1C50968E4(a2, a1, 0);
  return v16;
}

void sub_1C5097E28()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5097E3C(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  else
    v2 = 0;
  if (v2)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1 + 40) + 40, (uint64_t ***)v1);
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD **)(v1 + 32);
    *v4 = v3;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v1);
  }
}

void sub_1C5097E9C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5097EB0(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)(result + 16);
  return result;
}

void sub_1C5097EC0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5097ED4(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    v2 = *(unsigned __int8 *)(v1 + 16) >= 0x1Cu;
  else
    v2 = 0;
  if (v2)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1 + 40) + 40, (uint64_t ***)v1);
    v3 = *(_QWORD *)(v1 + 24);
    v4 = *(_QWORD **)(v1 + 32);
    *v4 = v3;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v1);
  }
}

void sub_1C5097F34()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5097F48(uint64_t a1)
{
  sub_1C50973C0((_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 8));
}

_QWORD *sub_1C5097F58(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(152 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DAC54(a1, v4, v4 + 152 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 152 * v10;
    do
    {
      *result = -4096;
      result += 19;
      v11 -= 152;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C509801C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C50980B0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5098168(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5098168(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C509801C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C5098214(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::Constant *a4, llvm::ValueAsMetadata *a5, int a6)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  llvm::ConstantFP *v30;
  unsigned int v31;
  llvm::Constant *Zero;
  llvm::Constant *v33;
  llvm::Constant *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _BOOL4 v41;
  uint64_t *BinaryIntrinsic;
  llvm::Value *v44;
  llvm::Value *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t LoopLatch;
  _QWORD **v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD v56[4];
  __int16 v57;
  void *v58[2];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 40) == *((_QWORD *)a5 + 5))
    goto LABEL_21;
  result = sub_1C5098630((llvm::Instruction *)a2, *(uint64_t **)(a1 + 80));
  if ((_DWORD)result)
  {
    v13 = *(uint64_t **)(a1 + 80);
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *((_DWORD *)v13 + 4);
    if (v15)
    {
      v16 = *v13;
      v17 = v15 - 1;
      v18 = ((v14 >> 4) ^ (v14 >> 9)) & v17;
      v19 = *(_QWORD *)(v16 + 16 * v18);
      if (v14 == v19)
      {
LABEL_8:
        v22 = *(_QWORD *)(v16 + 16 * v18 + 8);
      }
      else
      {
        v20 = 1;
        while (v19 != -4096)
        {
          v21 = v18 + v20++;
          v18 = v21 & v17;
          v19 = *(_QWORD *)(v16 + 16 * v18);
          if (v14 == v19)
            goto LABEL_8;
        }
        v22 = 0;
      }
      v23 = *((_QWORD *)a5 + 5);
      v24 = ((v23 >> 4) ^ (v23 >> 9)) & v17;
      v25 = *(_QWORD *)(v16 + 16 * v24);
      if (v23 == v25)
      {
LABEL_14:
        v28 = *(_QWORD *)(v16 + 16 * v24 + 8);
      }
      else
      {
        v26 = 1;
        while (v25 != -4096)
        {
          v27 = v24 + v26++;
          v24 = v27 & v17;
          v25 = *(_QWORD *)(v16 + 16 * v24);
          if (v23 == v25)
            goto LABEL_14;
        }
        v28 = 0;
      }
      if (v28 != v22)
        return 0;
    }
    else
    {
      v22 = 0;
    }
    v29 = sub_1C50986C8(a1, *(_QWORD *)(v14 + 56));
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v29, *((_QWORD *)a5 + 5), *(_QWORD *)(a2 + 40)))
      goto LABEL_21;
    v50 = *(_QWORD *)(a2 + 8);
    if (!v50 || *(_QWORD *)(v50 + 8))
      return 0;
    v51 = *((_QWORD *)a5 + 5);
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v22);
    result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v29, v51, LoopLatch);
    if ((_DWORD)result)
    {
LABEL_21:
      if (a6 == 312 && *(_BYTE *)(a2 + 16) == 41)
      {
        v30 = *(llvm::ConstantFP **)a4;
        if ((*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFE) == 0x12)
          v31 = *(unsigned __int8 *)(**((_QWORD **)v30 + 2) + 8);
        else
          v31 = *(_DWORD *)(*(_QWORD *)a4 + 8);
        if (v31 <= 6)
          Zero = llvm::ConstantFP::getZero(v30, (llvm::Type *)1);
        else
          Zero = (llvm::Constant *)llvm::Constant::getNullValue(v30, (llvm::Type *)a2);
        v34 = Zero;
        v35 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a4, v33);
        if (!v35)
        {
          v53 = *(_QWORD ***)v34;
          if (*(_QWORD *)v34)
          {
            v56[0] = v34;
            v56[1] = a4;
            v54 = **v53 + 1512;
            LODWORD(v58[0]) = 15;
            v58[1] = v56;
            v59 = 2;
            v60 = 0u;
            v61 = 0u;
            v62 = 0;
            v35 = sub_1C537D4FC(v54, (uint64_t)v53, (unsigned __int8 *)v58);
          }
          else
          {
            v35 = 0;
          }
        }
        a4 = (llvm::Constant *)v35;
      }
      v36 = *((_QWORD *)a5 + 5);
      v37 = v36 + 40;
      v38 = *(_QWORD *)(v36 + 48);
      if (v38 == v37)
      {
LABEL_44:
        v39 = 0;
      }
      else
      {
        while (1)
        {
          v39 = v38 ? v38 - 24 : 0;
          v40 = *(_BYTE *)(a2 + 16) != 58 && v39 == a2;
          v41 = v40;
          if ((llvm::ValueAsMetadata *)v39 == a5 || v41)
            break;
          v38 = *(_QWORD *)(v38 + 8);
          if (v38 == v37)
            goto LABEL_44;
        }
      }
      sub_1C4773D54((uint64_t)v58, v39, 0, 0, 0);
      v57 = 257;
      BinaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic((uint64_t *)v58, a6, a3, (uint64_t)a4, 0, (uint64_t)v56);
      if (*(_BYTE *)(a2 + 16) != 58)
      {
        v55 = 0;
        v56[0] = "math";
        v57 = 259;
        v44 = (llvm::Value *)sub_1C506DBC4((uint64_t)v58, BinaryIntrinsic, &v55, 1, (uint64_t)v56);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v44, (llvm::Value *)1);
      }
      v55 = 1;
      v56[0] = "ov";
      v57 = 259;
      v45 = (llvm::Value *)sub_1C506DBC4((uint64_t)v58, BinaryIntrinsic, &v55, 1, (uint64_t)v56);
      llvm::Value::doRAUW(a5, v45, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a5 + 5) + 40, (uint64_t ***)a5);
      v46 = *((_QWORD *)a5 + 3);
      v47 = (_QWORD *)*((_QWORD *)a5 + 4);
      *v47 = v46;
      *(_QWORD *)(v46 + 8) = v47;
      *((_QWORD *)a5 + 3) = 0;
      *((_QWORD *)a5 + 4) = 0;
      llvm::Value::deleteValue(a5);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a2 + 40) + 40, (uint64_t ***)a2);
      v48 = *(_QWORD *)(a2 + 24);
      v49 = *(_QWORD **)(a2 + 32);
      *v49 = v48;
      *(_QWORD *)(v48 + 8) = v49;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)a2);
      if (v58[0] != &v59)
        free(v58[0]);
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C5098630(llvm::Instruction *a1, uint64_t *a2)
{
  uint64_t result;
  llvm::Instruction *v5;
  char v6;
  llvm::Constant *v7;
  llvm::Instruction *v8;

  result = 0;
  if (a1)
  {
    if (*((unsigned __int8 *)a1 + 16) >= 0x1Cu)
    {
      v8 = 0;
      v7 = 0;
      result = matchIncrement(a1, &v8, &v7);
      if ((_DWORD)result)
      {
        result = 0;
        if (v8)
        {
          if (*((_BYTE *)v8 + 16) == 83)
          {
            sub_1C5098760((uint64_t)&v5, (uint64_t)v8, a2);
            return v6 && v5 == a1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C50986C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 728);
  if (!v2)
  {
    v4 = a1 + 728;
    v2 = operator new();
    *(_QWORD *)v2 = v2 + 16;
    *(_QWORD *)(v2 + 8) = 0x100000000;
    *(_DWORD *)(v2 + 68) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    *(_BYTE *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = a2;
    sub_1C53BA620(v2, 0);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)v4 = v2;
    if (v5)
    {
      sub_1C4DC4DE4(v4, v5);
      return *(_QWORD *)v4;
    }
  }
  return v2;
}

uint64_t sub_1C5098760(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  llvm::Constant *v31;
  char v32;
  llvm::Constant *v33;
  llvm::Instruction *v34;

  v3 = result;
  v4 = *((_DWORD *)a3 + 4);
  if (!v4)
    goto LABEL_8;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *a3;
  v9 = v4 - 1;
  v10 = ((v7 >> 4) ^ (v7 >> 9)) & (v4 - 1);
  v11 = *(_QWORD *)(*a3 + 16 * v10);
  if (v7 != v11)
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v10 + v12++;
      v10 = v13 & v9;
      v11 = *(_QWORD *)(v8 + 16 * v10);
      if (v7 == v11)
        goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_6:
  v14 = *(_QWORD *)(v8 + 16 * v10 + 8);
  if (!v14)
    goto LABEL_8;
  if (**(_QWORD **)(v14 + 32) != v7)
    goto LABEL_8;
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v14);
  if (!result)
    goto LABEL_8;
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v14);
  v15 = *(_DWORD *)(a2 + 20);
  v16 = v15 & 0x7FFFFFF;
  if ((v15 & 0x7FFFFFF) != 0)
  {
    v17 = 0;
    while (1)
    {
      v18 = a2 - 32 * v16;
      if ((v15 & 0x40000000) != 0)
        v18 = *(_QWORD *)(a2 - 8);
      if (*(_QWORD *)(v18 + 32 * *(unsigned int *)(a2 + 60) + 8 * v17) == result)
        break;
      if (v16 == ++v17)
        goto LABEL_17;
    }
  }
  else
  {
LABEL_17:
    LODWORD(v17) = -1;
  }
  v19 = (v15 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * v16;
  v20 = *(_QWORD *)(v19 + 32 * v17);
  if (!v20 || *(unsigned __int8 *)(v20 + 16) < 0x1Cu)
  {
LABEL_8:
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 16) = 0;
    return result;
  }
  v22 = *((_DWORD *)a3 + 4);
  if (v22)
  {
    v23 = *(_QWORD *)(v20 + 40);
    v24 = *a3;
    v25 = v22 - 1;
    v26 = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
    v27 = *(_QWORD *)(*a3 + 16 * v26);
    if (v23 == v27)
    {
LABEL_30:
      v30 = *(_QWORD *)(v24 + 16 * v26 + 8);
      goto LABEL_32;
    }
    v28 = 1;
    while (v27 != -4096)
    {
      v29 = v26 + v28++;
      v26 = v29 & v25;
      v27 = *(_QWORD *)(v24 + 16 * v26);
      if (v23 == v27)
        goto LABEL_30;
    }
  }
  v30 = 0;
LABEL_32:
  if (v30 != v14)
    goto LABEL_8;
  v33 = 0;
  v34 = 0;
  result = matchIncrement((const llvm::Instruction *)v20, &v34, &v33);
  if ((_DWORD)result && v34 == (llvm::Instruction *)a2)
  {
    v31 = v33;
    *(_QWORD *)v3 = v20;
    *(_QWORD *)(v3 + 8) = v31;
    v32 = 1;
  }
  else
  {
    v32 = 0;
    *(_BYTE *)v3 = 0;
  }
  *(_BYTE *)(v3 + 16) = v32;
  return result;
}

BOOL sub_1C5098958(unsigned __int8 *a1)
{
  unsigned int ExtendedSizeInBits;
  const char *v2;
  unsigned int v4;

  if (*a1)
  {
    if (*a1 - 120 >= 0x33)
    {
      ExtendedSizeInBits = sub_1C47A8C74(a1);
      goto LABEL_4;
    }
    return 0;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 1) + 8) == 19)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
LABEL_4:
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits >= 8 && (ExtendedSizeInBits & (ExtendedSizeInBits - 1)) == 0;
}

BOOL sub_1C50989E0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t ExtendedSizeInBits;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  _QWORD v11[2];

  v3 = a2;
  v11[0] = a2;
  v11[1] = a3;
  if (*a1)
    ExtendedSizeInBits = sub_1C47A8C74(a1);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  v6 = ExtendedSizeInBits;
  v7 = v5;
  if (v3)
    v8 = sub_1C47A8C74((unsigned __int8 *)v11);
  else
    v8 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v11);
  return (v7 == 1 || v9 != 1) && v6 > v8;
}

_QWORD *sub_1C5098A68(_DWORD *a1, int32x2_t ****a2)
{
  int v3;
  int32x2_t ****v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  int32x2_t ****v8;
  unint64_t v9;
  int32x2_t ****v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int32x2_t *****v16;
  int32x2_t ****v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int32x2_t ****v23;
  int32x2_t ****v24;
  BOOL v25;
  uint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  uint64_t (**v45)(llvm::CallbackVH *__hidden);
  uint64_t v46;
  unint64_t *v47;
  int32x2_t ****v48;
  _DWORD *v49;

  v46 = 2;
  v47 = 0;
  v48 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v46);
  v45 = &off_1E8140658;
  v49 = a1;
  v3 = a1[4];
  if (v3)
  {
    v4 = v48;
    v5 = v3 - 1;
    v6 = ((v48 >> 4) ^ (v48 >> 9)) & v5;
    v7 = (_QWORD *)(*(_QWORD *)a1 + (v6 << 6));
    v8 = (int32x2_t ****)v7[3];
    if (v48 == v8)
      goto LABEL_7;
    v20 = 0;
    v21 = 1;
    while (v8 != (int32x2_t ****)-4096)
    {
      if (v20)
        v43 = 0;
      else
        v43 = v8 == (int32x2_t ****)-8192;
      if (v43)
        v20 = v7;
      v44 = v6 + v21++;
      v6 = v44 & v5;
      v7 = (_QWORD *)(*(_QWORD *)a1 + (v6 << 6));
      v8 = (int32x2_t ****)v7[3];
      if (v48 == v8)
        goto LABEL_7;
    }
    if (v20)
      v22 = (uint64_t)v20;
    else
      v22 = (uint64_t)v7;
  }
  else
  {
    v22 = 0;
  }
  v7 = (_QWORD *)sub_1C5086994(a1, (uint64_t)&v45, v22);
  v23 = (int32x2_t ****)v7[3];
  v24 = v48;
  if (v23 != v48)
  {
    v25 = v23 == (int32x2_t ****)-4096 || v23 == 0;
    if (!v25 && v23 != (int32x2_t ****)-8192)
    {
      v31 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v31 = v7[2];
      v32 = (unint64_t *)v7[2];
      if (v32)
      {
        *v32 = *v32 & 7 | v31;
      }
      else
      {
        v33 = v7[3];
        v34 = ***(int32x2_t ****)v33;
        v35 = (unint64_t)v34[303];
        if (v35 <= v31)
        {
          v36 = v34[305].u32[0];
          if (v35 + 16 * v36 > v31)
          {
            v37 = v36 - 1;
            LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
            v39 = (uint64_t *)(v35 + 16 * v38);
            v40 = *v39;
            if (v33 == *v39)
            {
LABEL_50:
              *v39 = -8192;
              v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
              v33 = v7[3];
            }
            else
            {
              v41 = 1;
              while (v40 != -4096)
              {
                v42 = v38 + v41++;
                v38 = v42 & v37;
                v40 = *(_QWORD *)(v35 + 16 * v38);
                if (v33 == v40)
                {
                  v39 = (uint64_t *)(v35 + 16 * v38);
                  goto LABEL_50;
                }
              }
            }
            *(_BYTE *)(v33 + 17) &= ~1u;
          }
        }
      }
      v24 = v48;
    }
    v7[3] = v24;
    if (v24 != (int32x2_t ****)-4096 && v24 != (int32x2_t ****)-8192 && v24 != 0)
    {
      v27 = v46;
      v28 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
      v7[2] = *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8);
      *v28 = v7 + 1;
      v7[1] = v27 & 0xFFFFFFFFFFFFFFF8 | v7[1] & 7;
      v29 = (unint64_t *)v7[2];
      if (v29)
        *v29 = *v29 & 7 | (unint64_t)(v7 + 2);
    }
  }
  v4 = v48;
  v7[4] = v49;
  v7[5] = 6;
  v7[6] = 0;
  v7[7] = 0;
LABEL_7:
  if (v4 != (int32x2_t ****)-8192 && v4 != (int32x2_t ****)-4096 && v4)
  {
    v9 = v46 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8) = v47;
    if (v47)
    {
      *v47 = *v47 & 7 | v9;
    }
    else
    {
      v10 = v48;
      v11 = ***v48;
      v12 = (unint64_t)v11[303];
      if (v12 <= v9)
      {
        v13 = v11[305].u32[0];
        if (v12 + 16 * v13 > v9)
        {
          v14 = v13 - 1;
          LODWORD(v15) = v14 & ((v48 >> 4) ^ (v48 >> 9));
          v16 = (int32x2_t *****)(v12 + 16 * v15);
          v17 = *v16;
          if (v48 == *v16)
          {
LABEL_18:
            *v16 = (int32x2_t ****)-8192;
            v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
            v10 = v48;
          }
          else
          {
            v18 = 1;
            while (v17 != (int32x2_t ****)-4096)
            {
              v19 = v15 + v18++;
              v15 = v19 & v14;
              v17 = *(int32x2_t *****)(v12 + 16 * v15);
              if (v48 == v17)
              {
                v16 = (int32x2_t *****)(v12 + 16 * v15);
                goto LABEL_18;
              }
            }
          }
          *((_BYTE *)v10 + 17) &= ~1u;
        }
      }
    }
  }
  return v7 + 5;
}

unsigned __int8 *sub_1C5098D9C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *PointerCast;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23[4];
  __int16 v24;
  unsigned __int8 *v25;

  PointerCast = a2;
  if (*(_QWORD *)a2 == a3)
    return PointerCast;
  if (a2[16] <= 0x14u)
  {
    PointerCast = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1[9] + 232))(a1[9], a2, a3);
    if (PointerCast)
      v14 = PointerCast[16] >= 0x1Cu;
    else
      v14 = 0;
    if (!v14)
      return PointerCast;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], PointerCast, a4, a1[6], a1[7]);
    v15 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v15)
      return PointerCast;
    v17 = *a1;
    v18 = *a1 + 16 * v15;
    v19 = (unsigned __int8 **)(PointerCast + 48);
    while (1)
    {
      v20 = *(_DWORD *)v17;
      v21 = *(unsigned __int8 **)(v17 + 8);
      if (v21)
      {
        if (!v20)
        {
          v23[0] = *(unsigned __int8 **)(v17 + 8);
          llvm::MetadataTracking::track((uint64_t)v23, v21, 2);
LABEL_40:
          if (v23 == v19)
          {
            if (v23[0])
              llvm::MetadataTracking::untrack((uint64_t)v23, v23[0]);
          }
          else
          {
            if (*v19)
              llvm::MetadataTracking::untrack((uint64_t)(PointerCast + 48), *v19);
            v22 = v23[0];
            *v19 = v23[0];
            if (v22)
              llvm::MetadataTracking::retrack((uint64_t)v23, v22, (uint64_t)(PointerCast + 48));
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!*v19 && (PointerCast[23] & 0x20) == 0)
          goto LABEL_37;
        if (!v20)
        {
          v23[0] = 0;
          goto LABEL_40;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)PointerCast, v20, (llvm::MDNode *)v21);
LABEL_37:
      v17 += 16;
      if (v17 == v18)
        return PointerCast;
    }
  }
  v24 = 257;
  PointerCast = (unsigned __int8 *)llvm::CastInst::CreatePointerCast(a2, a3, (uint64_t)v23, 0);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], PointerCast, a4, a1[6], a1[7]);
  v7 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v7)
  {
    v8 = *a1;
    v9 = *a1 + 16 * v7;
    v10 = (unsigned __int8 **)(PointerCast + 48);
    do
    {
      v11 = *(_DWORD *)v8;
      v12 = *(unsigned __int8 **)(v8 + 8);
      if (v12)
      {
        if (!v11)
        {
          v25 = *(unsigned __int8 **)(v8 + 8);
          llvm::MetadataTracking::track((uint64_t)&v25, v12, 2);
LABEL_15:
          if (&v25 == v10)
          {
            if (v25)
              llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
          }
          else
          {
            if (*v10)
              llvm::MetadataTracking::untrack((uint64_t)(PointerCast + 48), *v10);
            v13 = v25;
            *v10 = v25;
            if (v13)
              llvm::MetadataTracking::retrack((uint64_t)&v25, v13, (uint64_t)(PointerCast + 48));
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (!*v10 && (PointerCast[23] & 0x20) == 0)
          goto LABEL_12;
        if (!v11)
        {
          v25 = 0;
          goto LABEL_15;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)PointerCast, v11, (llvm::MDNode *)v12);
LABEL_12:
      v8 += 16;
    }
    while (v8 != v9);
  }
  return PointerCast;
}

uint64_t ***sub_1C5098FF4(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t ***v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v28 = a4;
  v9 = a1[9];
  v30[0] = a4;
  v10 = (*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, uint64_t *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2, a3, v30, 1, 1);
  if (v10)
    return (uint64_t ***)v10;
  v31 = 257;
  v11 = (char *)operator new(0x90uLL);
  *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
  v12 = (uint64_t ***)(v11 + 64);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 64;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = v11 + 64;
  sub_1C4774650(a2, a3, (llvm::Value *)&v28, 1);
  *((_QWORD *)v11 + 8) = v13;
  *((_QWORD *)v11 + 9) = 0;
  v14 = *((_DWORD *)v11 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v11 + 20) = 62;
  *((_DWORD *)v11 + 21) = v14;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *((_DWORD *)v11 + 30) = 0;
  v15 = *(_QWORD *)v11;
  *((_QWORD *)v11 + 16) = a2;
  *((_QWORD *)v11 + 17) = a2;
  if (v15)
  {
    **((_QWORD **)v11 + 2) = *((_QWORD *)v11 + 1);
    v27 = *((_QWORD *)v11 + 1);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v11 + 2);
  }
  *(_QWORD *)v11 = a3;
  if (a3)
  {
    v18 = a3[1];
    v17 = a3 + 1;
    v16 = v18;
    *((_QWORD *)v11 + 1) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v17;
    *v17 = v11;
  }
  sub_1C5382FD4((uint64_t)&v29, &v28, (uint64_t *)&v29, (uint64_t)&v12[-4 * (*((_DWORD *)v11 + 21) & 0x7FFFFFF) + 4]);
  llvm::Value::setName(v12, (uint64_t)v30);
  v11[81] |= 2u;
  (*(void (**)(uint64_t, uint64_t ***, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, a5, a1[6], a1[7]);
  v19 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v19)
  {
    v21 = *a1;
    v22 = *a1 + 16 * v19;
    do
    {
      v23 = *(_DWORD *)v21;
      v24 = *(unsigned __int8 **)(v21 + 8);
      if (v24)
      {
        if (!v23)
        {
          v29 = *(unsigned __int8 **)(v21 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v24, 2);
          v25 = (unsigned __int8 *)*((_QWORD *)v11 + 14);
          goto LABEL_20;
        }
      }
      else
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v11 + 14);
        if (!v25 && (v11[87] & 0x20) == 0)
          goto LABEL_17;
        if (!v23)
        {
          v29 = 0;
LABEL_20:
          if (v25)
            llvm::MetadataTracking::untrack((uint64_t)(v11 + 112), v25);
          v26 = v29;
          *((_QWORD *)v11 + 14) = v29;
          if (v26)
            llvm::MetadataTracking::retrack((uint64_t)&v29, v26, (uint64_t)(v11 + 112));
          goto LABEL_17;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v12, *(_DWORD *)v21, (llvm::MDNode *)v24);
LABEL_17:
      v21 += 16;
    }
    while (v21 != v22);
  }
  return v12;
}

uint64_t sub_1C5099258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v19 = a14;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a9 + 40) + 56) + 40) + 272;
  *(_QWORD *)(a1 + 32) = a5;
  v20 = *(_QWORD *)(a6 + 24);
  if (v20)
  {
    v22 = a7;
    if (v20 == a6)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
    v19 = a14;
    a7 = v22;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 72) = a7;
  *(_DWORD *)(a1 + 80) = a8;
  *(_QWORD *)(a1 + 88) = a9;
  *(_QWORD *)(a1 + 96) = a10;
  *(_QWORD *)(a1 + 104) = a11;
  *(_QWORD *)(a1 + 112) = a12;
  *(_QWORD *)(a1 + 120) = a13;
  *(_QWORD *)(a1 + 128) = v19;
  *(_BYTE *)(a1 + 137) = a15;
  *(_QWORD *)(a1 + 144) = a16;
  *(_QWORD *)(a1 + 152) = a17;
  *(_BYTE *)(a1 + 136) = 0;
  return a1;
}

uint64_t sub_1C5099340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD **v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  __int128 *v16;
  __int128 v17;
  llvm::Value *v18;
  llvm::Value *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  char v25;
  int v26;
  char v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void (**v46)(_QWORD *);
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unsigned int v63;
  llvm::Value *v64;
  unint64_t v65;
  char *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[2];
  _QWORD v75[2];
  char v76;
  __int128 v77;
  __int128 v78;
  char v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  int v83;
  _BYTE v84[128];
  _QWORD v85[3];
  _QWORD *v86;
  _BYTE v87[40];
  _BYTE v88[24];
  _BYTE *v89;
  char v90;
  char *v91;
  uint64_t v92;
  _BYTE v93[256];
  char *v94;
  uint64_t v95;
  _QWORD v96[35];

  v96[32] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(unsigned int *)(v6 + 8);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(*(_QWORD *)v6 + 8 * v7 - 8);
  else
    v8 = 0;
  v9 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v9 == 16)
  {
    v10 = (_QWORD **)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 32);
    if (v11 - sub_1C4959174((llvm::APInt *)(a2 + 24)) + 1 <= 0x40)
    {
      v12 = *(_DWORD *)(a2 + 32);
      if (v12 > 0x40)
        v13 = **v10;
      else
        v13 = (uint64_t)((_QWORD)*v10 << -(char)v12) >> -(char)v12;
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) += v13;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 1064))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24)) & 1) != 0)return 1;
      v51 = *(_DWORD *)(a2 + 32);
      if (v51 > 0x40)
        v52 = **v10;
      else
        v52 = (uint64_t)((_QWORD)*v10 << -(char)v51) >> -(char)v51;
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) -= v52;
    }
LABEL_73:
    v53 = *(_QWORD *)(a1 + 96);
    if (!*(_BYTE *)(v53 + 16))
    {
      v54 = 1;
      *(_BYTE *)(v53 + 16) = 1;
      *(_QWORD *)(v53 + 32) = a2;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 1064))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24)) & 1) != 0)return v54;
      v53 = *(_QWORD *)(a1 + 96);
      *(_BYTE *)(v53 + 16) = 0;
      *(_QWORD *)(v53 + 32) = 0;
    }
    if (!*(_QWORD *)(v53 + 24))
    {
      v54 = 1;
      *(_QWORD *)(v53 + 24) = 1;
      *(_QWORD *)(v53 + 40) = a2;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 1064))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24)) & 1) != 0)return v54;
      v55 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 40) = 0;
    }
    sub_1C5095E90(*(_QWORD *)(a1 + 120), v8);
    return 0;
  }
  if (a2 && v9 <= 3)
  {
    v14 = *(uint64_t **)(a1 + 96);
    if (!*v14)
    {
      *v14 = a2;
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 1064))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24)) & 1) != 0)return 1;
      **(_QWORD **)(a1 + 96) = 0;
    }
    goto LABEL_73;
  }
  if (!a2 || (v15 = v9 - 28, v9 < 0x1C))
  {
    if (!a2 || v9 != 5)
    {
      if (v9 == 19)
        return 1;
      goto LABEL_73;
    }
    if ((sub_1C5099AAC((uint64_t *)a1, a2, *(unsigned __int16 *)(a2 + 18), a3, 0) & 1) != 0)
      return 1;
LABEL_64:
    sub_1C5095E90(*(_QWORD *)(a1 + 120), v8);
    goto LABEL_73;
  }
  v16 = *(__int128 **)(a1 + 96);
  v17 = v16[1];
  v72 = *v16;
  v73 = v17;
  v18 = (llvm::Value *)*((_QWORD *)v16 + 4);
  v19 = (llvm::Value *)*((_QWORD *)v16 + 5);
  v71 = v16[3];
  v20 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  v70 = 0;
  if (!sub_1C5099AAC((uint64_t *)a1, a2, v15, a3, &v70))
    goto LABEL_73;
  if (v70)
    return 1;
  v21 = *(_QWORD *)(a2 + 8);
  if (v21 && !*(_QWORD *)(v21 + 8) || *(_BYTE *)(a1 + 136))
    goto LABEL_93;
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(llvm::Value **)(v22 + 32);
  v24 = *(llvm::Value **)(v22 + 40);
  v25 = sub_1C509AD60(a1, v23, v18, v19);
  v26 = sub_1C509AD60(a1, v24, v18, v19);
  if (v23)
    v27 = v25 ^ 1;
  else
    v27 = 0;
  v28 = v26 ^ 1;
  if (!v24)
    v28 = 0;
  if ((v27 & 1) == 0 && !v28)
    goto LABEL_93;
  v94 = (char *)v96;
  v95 = 0x1000000000;
  v80 = v84;
  v81 = v84;
  v82 = 16;
  v83 = 0;
  v29 = 0;
  if ((sub_1C509ADE0(a2, (uint64_t)&v94, (llvm::SmallPtrSetImplBase *)&v80, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 137), *(_QWORD *)(a1 + 144), *(uint64_t ***)(a1 + 152), 0) & 1) != 0)goto LABEL_88;
  v91 = v93;
  v92 = 0x2000000000;
  v29 = 1;
  if (!(_DWORD)v95)
    goto LABEL_86;
  v64 = v18;
  v65 = v20;
  v30 = v94;
  v66 = &v94[16 * v95];
  v31 = a1 + 40;
  v67 = v19;
  while (1)
  {
    v32 = *(uint64_t **)v30;
    v33 = **(_QWORD **)v30;
    v34 = *(_DWORD *)(v33 + 8);
    if ((v34 & 0xFE) == 0x12)
      v34 = *(_DWORD *)(**(_QWORD **)(v33 + 16) + 8);
    v35 = *((_QWORD *)v30 + 1);
    v75[0] = 0;
    v75[1] = 0;
    v76 = 0;
    v77 = 0u;
    v78 = 0u;
    v79 = 1;
    v74[0] = 0;
    v74[1] = 0;
    v36 = *(_QWORD *)(a1 + 120);
    v37 = *(unsigned int *)(v36 + 8);
    v69 = (_DWORD)v37 ? *(_QWORD *)(*(_QWORD *)v36 + 8 * v37 - 8) : 0;
    v38 = *(_QWORD *)(a1 + 8);
    v39 = *(_QWORD *)(a1 + 16);
    v40 = *(_QWORD *)(a1 + 32);
    v41 = *(_QWORD *)(a1 + 64);
    if (v41)
    {
      v68 = *(_QWORD *)(a1 + 32);
      v42 = v32;
      v43 = v35;
      if (v41 == v31)
      {
        v86 = v85;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v31 + 24))(v31, v85);
      }
      else
      {
        v86 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
      }
      v35 = v43;
      v32 = v42;
      v40 = v68;
    }
    else
    {
      v86 = 0;
    }
    sub_1C5099258((uint64_t)v87, (uint64_t)&v91, v38, v39, v40, (uint64_t)v85, v35, v34 >> 8, *(_QWORD *)(a1 + 88), (uint64_t)v75, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), (uint64_t)v74, *(_BYTE *)(a1 + 137), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
    v44 = v86;
    if (v86 == v85)
    {
      v46 = (void (**)(_QWORD *))(v85[0] + 32);
      v44 = v85;
      v45 = v88;
    }
    else
    {
      v45 = v88;
      if (!v86)
        goto LABEL_47;
      v46 = (void (**)(_QWORD *))(*v86 + 40);
    }
    (*v46)(v44);
LABEL_47:
    v90 = 1;
    sub_1C5099340(v87, v32, 0);
    sub_1C5095E90(*(_QWORD *)(a1 + 120), v69);
    if ((_DWORD)v92)
    {
      v47 = 8 * v92;
      v48 = v91;
      v19 = v67;
      while (*(_QWORD *)v48 != a2)
      {
        v48 += 8;
        v47 -= 8;
        if (!v47)
        {
          v48 = &v91[8 * v92];
          break;
        }
      }
    }
    else
    {
      v48 = v91;
      v19 = v67;
    }
    if (v92 == (v48 - v91) >> 3)
      break;
    LODWORD(v92) = 0;
    v49 = v89;
    if (v89 == v88)
    {
      v49 = v88;
      v50 = 4;
      goto LABEL_58;
    }
    if (v89)
    {
      v50 = 5;
LABEL_58:
      (*(void (**)(void))(*v49 + 8 * v50))();
    }
    v30 += 16;
    v31 = a1 + 40;
    if (v30 == v66)
    {
      v29 = 1;
      v18 = v64;
      v20 = v65;
      goto LABEL_86;
    }
  }
  if (v89 == v88)
  {
    v56 = 4;
    v18 = v64;
    v20 = v65;
LABEL_84:
    (*(void (**)(_QWORD *))(*v45 + 8 * v56))(v45);
  }
  else
  {
    v18 = v64;
    v20 = v65;
    if (v89)
    {
      v56 = 5;
      v45 = v89;
      goto LABEL_84;
    }
  }
  v29 = 0;
LABEL_86:
  if (v91 != v93)
    free(v91);
LABEL_88:
  if (v81 != v80)
    free(v81);
  if (v94 != (char *)v96)
    free(v94);
  if (!v29)
  {
    v60 = *(_QWORD *)(a1 + 96);
    v61 = v73;
    *(_OWORD *)v60 = v72;
    *(_OWORD *)(v60 + 16) = v61;
    *(_QWORD *)(v60 + 32) = v18;
    *(_QWORD *)(v60 + 40) = v19;
    *(_QWORD *)(v60 + 48) = v71;
    *(_BYTE *)(v60 + 56) = BYTE8(v71);
    v62 = *(_QWORD *)a1;
    v63 = *(_DWORD *)(*(_QWORD *)a1 + 8);
    if (v63 != (_DWORD)v20)
    {
      if (v63 <= v20)
      {
        if (*(_DWORD *)(v62 + 12) < v20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)a1, v62 + 16, v20, 8);
          v63 = *(_DWORD *)(v62 + 8);
        }
        if (v63 != (_DWORD)v20)
          bzero((void *)(*(_QWORD *)v62 + 8 * v63), 8 * (v20 - v63));
      }
      *(_DWORD *)(v62 + 8) = v20;
    }
    goto LABEL_64;
  }
LABEL_93:
  v57 = *(_QWORD *)a1;
  v58 = *(unsigned int *)(v57 + 8);
  if (v58 >= *(_DWORD *)(v57 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v57, v57 + 16, v58 + 1, 8);
    LODWORD(v58) = *(_DWORD *)(v57 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v57 + 8 * v58) = a2;
  ++*(_DWORD *)(v57 + 8);
  return 1;
}

uint64_t sub_1C5099AAC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  uint64_t v7;
  BOOL v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, llvm::UndefValue ***, _QWORD, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t **v18;
  int v19;
  uint64_t **v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  llvm::DataLayout *v28;
  int v29;
  int v30;
  _BOOL4 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t **v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  int i;
  unint64_t v66;
  uint64_t v67;
  llvm::StructLayout *StructLayout;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  llvm::UndefValue *AggregateElement;
  BOOL v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  char v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  _QWORD **v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  int v98;
  int v100;
  uint64_t **v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  int v111;
  _QWORD *v112;
  _OWORD *v113;
  __int128 v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  _QWORD *v118;
  int v119;
  uint64_t v120;
  _BYTE **v121;
  int v122;
  uint64_t v123;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  unsigned int v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  unsigned int v132;
  _OWORD *v133;
  __int128 v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  int v138;
  uint64_t *v139;
  _OWORD *v140;
  __int128 v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  _QWORD *v145;
  int v146;
  uint64_t v147;
  _OWORD *v148;
  __int128 v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  _QWORD *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  BOOL v164;
  uint64_t v165;
  uint64_t *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  llvm::UndefValue **v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  _BYTE v178[32];

  if (a4 > 4)
    return 0;
  v7 = a4;
  if (a5)
    *a5 = 0;
  result = 0;
  if (a3 > 33)
  {
    switch(a3)
    {
      case '"':
        v21 = *(_BYTE *)(a2 + 16) != 62 || a2 == 0;
        v22 = 64;
        if (v21)
          v22 = 24;
        v23 = *(_QWORD *)(a2 + v22);
        v24 = *(_DWORD *)(a2 + 20);
        if ((v24 & 0x40000000) != 0)
        {
          v26 = *(_QWORD *)(a2 - 8);
          v25 = v24 & 0x7FFFFFF;
        }
        else
        {
          v25 = v24 & 0x7FFFFFF;
          v26 = a2 - 32 * (v24 & 0x7FFFFFF);
        }
        v174 = (llvm::UndefValue **)(v26 + 32);
        v175 = v23 | 4;
        if (v25 == 1)
        {
          v60 = 0;
          v61 = a1 + 12;
LABEL_92:
          v62 = *(_DWORD *)(a2 + 20);
          if ((v62 & 0x40000000) != 0)
            v63 = *(_QWORD **)(a2 - 8);
          else
            v63 = (_QWORD *)(a2 - 32 * (v62 & 0x7FFFFFF));
          if (sub_1C5099340(a1, *v63, (v7 + 1)))
          {
            if ((*(_BYTE *)(a2 + 17) & 2) == 0)
              *(_BYTE *)(*v61 + 56) = 0;
            return 1;
          }
          goto LABEL_255;
        }
        v171 = a4;
        v172 = 0;
        v60 = 0;
        v173 = -1;
        v64 = 32;
        for (i = 1; i != v25; ++i)
        {
          v66 = v175 & 0xFFFFFFFFFFFFFFF8;
          v67 = a1[3];
          if ((v175 & 4) != 0 || !v66)
          {
            v71 = a1;
            v72 = v60;
            if (v66)
              v73 = (v175 & 4) == 0;
            else
              v73 = 1;
            if (v73)
            {
              AggregateElement = *v174;
              if (*v174)
                v75 = *((_BYTE *)*v174 + 16) == 16;
              else
                v75 = 0;
              if (!v75)
                AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
              v78 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
              v76 = (unsigned int *)((char *)AggregateElement + 24);
              v77 = v78;
              if (v76[2] < 0x41)
                v77 = v76;
              v66 = *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * *v77);
            }
            sub_1C4768AD0(v67, v66);
            v80 = (unint64_t)(v79 + 7) >> 3;
            v82 = v81 == 1;
            llvm::DataLayout::getAlignment(v67, v66);
            v84 = (1 << v83) + v80 - 1;
            if (v84 >> v83)
            {
              if (v82)
                return 0;
              v85 = *(_DWORD *)(a2 + 20);
              if ((v85 & 0x40000000) != 0)
                v86 = *(_QWORD *)(a2 - 8);
              else
                v86 = a2 - 32 * (v85 & 0x7FFFFFF);
              v89 = v84 & -(1 << v83);
              v90 = *(_QWORD *)(v86 + v64);
              if (v90)
                v91 = *(_BYTE *)(v90 + 16) == 16;
              else
                v91 = 0;
              if (v91
                && (v92 = (_QWORD **)(v90 + 24),
                    v93 = *(_DWORD *)(v90 + 32),
                    v93 - sub_1C4959174((llvm::APInt *)(v90 + 24)) - 64 >= 0xFFFFFFBF))
              {
                v94 = *(_DWORD *)(v90 + 32);
                if (v94 > 0x40)
                  v95 = **v92;
                else
                  v95 = (uint64_t)((_QWORD)*v92 << -(char)v94) >> -(char)v94;
                v60 = v72 + v95 * v89;
              }
              else
              {
                if (v173 != -1)
                  return 0;
                v60 = v72;
                v172 = v89;
                v173 = i;
              }
            }
            else
            {
              v60 = v72;
            }
            a1 = v71;
          }
          else
          {
            StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)a1[3], (llvm::StructType *)(v175 & 0xFFFFFFFFFFFFFFF8));
            v69 = *(_DWORD *)(a2 + 20);
            if ((v69 & 0x40000000) != 0)
              v70 = *(_QWORD *)(a2 - 8);
            else
              v70 = a2 - 32 * (v69 & 0x7FFFFFF);
            v87 = *(_QWORD *)(v70 + v64);
            v88 = (unsigned int *)(v87 + 24);
            if (*(_DWORD *)(v87 + 32) >= 0x41u)
              v88 = *(unsigned int **)v88;
            v60 += *((_QWORD *)StructLayout + *v88 + 2);
          }
          sub_1C4774E38((uint64_t)&v174);
          v64 += 32;
        }
        v7 = v171;
        if (v173 != -1)
        {
          v107 = a1[12];
          v108 = *(_OWORD *)(v107 + 16);
          v176 = *(_OWORD *)v107;
          v177 = v108;
          v109 = *(_OWORD *)(v107 + 48);
          *(_OWORD *)v178 = *(_OWORD *)(v107 + 32);
          *(_OWORD *)&v178[16] = v109;
          v110 = *(unsigned int *)(*a1 + 8);
          *(_QWORD *)(v107 + 8) += v60;
          if ((*(_BYTE *)(a2 + 17) & 2) == 0)
            *(_BYTE *)(v107 + 56) = 0;
          v111 = *(_DWORD *)(a2 + 20);
          if ((v111 & 0x40000000) != 0)
            v112 = *(_QWORD **)(a2 - 8);
          else
            v112 = (_QWORD *)(a2 - 32 * (v111 & 0x7FFFFFF));
          if ((sub_1C5099340(a1, *v112, v171 + 1) & 1) == 0)
          {
            v140 = (_OWORD *)a1[12];
            if (*((_BYTE *)v140 + 16))
            {
LABEL_211:
              v141 = v177;
              *v140 = v176;
              v140[1] = v141;
              v140[2] = *(_OWORD *)v178;
              *(_OWORD *)((char *)v140 + 41) = *(_OWORD *)&v178[9];
              v142 = *a1;
              v143 = *(_DWORD *)(v142 + 8);
              if (v143 == (_DWORD)v110)
                return 0;
              if (v143 <= v110)
              {
                if (*(_DWORD *)(v142 + 12) < v110)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v142, v142 + 16, v110, 8);
                  v143 = *(_DWORD *)(v142 + 8);
                }
                if (v143 != (_DWORD)v110)
                  bzero((void *)(*(_QWORD *)v142 + 8 * v143), 8 * (v110 - v143));
              }
              result = 0;
              *(_DWORD *)(v142 + 8) = v110;
              return result;
            }
            *((_BYTE *)v140 + 16) = 1;
            v144 = *(_DWORD *)(a2 + 20);
            if ((v144 & 0x40000000) != 0)
              v145 = *(_QWORD **)(a2 - 8);
            else
              v145 = (_QWORD *)(a2 - 32 * (v144 & 0x7FFFFFF));
            *((_QWORD *)v140 + 4) = *v145;
          }
          v146 = *(_DWORD *)(a2 + 20);
          if ((v146 & 0x40000000) != 0)
            v147 = *(_QWORD *)(a2 - 8);
          else
            v147 = a2 - 32 * (v146 & 0x7FFFFFF);
          if ((sub_1C509A804(a1, *(_BYTE **)(v147 + 32 * v173), v172, v171) & 1) != 0)
            return 1;
          v148 = (_OWORD *)a1[12];
          v149 = v177;
          *v148 = v176;
          v148[1] = v149;
          v148[2] = *(_OWORD *)v178;
          *(_OWORD *)((char *)v148 + 41) = *(_OWORD *)&v178[9];
          v150 = *a1;
          v151 = *(_DWORD *)(*a1 + 8);
          if (v151 != (_DWORD)v110)
          {
            if (v151 <= v110)
            {
              v170 = *a1;
              if (*(_DWORD *)(v150 + 12) < v110)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v150, v150 + 16, v110, 8);
                v151 = *(_DWORD *)(v170 + 8);
              }
              v150 = v170;
              v7 = v171;
              if (v151 != (_DWORD)v110)
              {
                bzero((void *)(*(_QWORD *)v170 + 8 * v151), 8 * (v110 - v151));
                v150 = v170;
              }
            }
            *(_DWORD *)(v150 + 8) = v110;
          }
          v152 = a1[12];
          if (*(_BYTE *)(v152 + 16))
            return 0;
          *(_BYTE *)(v152 + 16) = 1;
          v153 = *(_DWORD *)(a2 + 20);
          if ((v153 & 0x40000000) != 0)
            v154 = *(_QWORD **)(a2 - 8);
          else
            v154 = (_QWORD *)(a2 - 32 * (v153 & 0x7FFFFFF));
          *(_QWORD *)(v152 + 32) = *v154;
          *(_QWORD *)(v152 + 8) += v60;
          v155 = *(_DWORD *)(a2 + 20);
          if ((v155 & 0x40000000) != 0)
            v156 = *(_QWORD *)(a2 - 8);
          else
            v156 = a2 - 32 * (v155 & 0x7FFFFFF);
          if ((sub_1C509A804(a1, *(_BYTE **)(v156 + 32 * v173), v172, v7) & 1) != 0)
            return 1;
          v140 = (_OWORD *)a1[12];
          goto LABEL_211;
        }
        v61 = a1 + 12;
        *(_QWORD *)(a1[12] + 8) += v60;
        if (!v60 || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1] + 1064))(a1[1], a1[3]))
          goto LABEL_92;
        if (!byte_1EF8EFD70)
          goto LABEL_255;
        if (*(_BYTE *)(a2 + 16) != 62)
          goto LABEL_255;
        v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 1448))(a1[1]);
        if (v171 || !v137 || v60 < 1)
          goto LABEL_255;
        v138 = *(_DWORD *)(a2 + 20);
        if ((v138 & 0x40000000) != 0)
          v139 = *(uint64_t **)(a2 - 8);
        else
          v139 = (uint64_t *)(a2 - 32 * (v138 & 0x7FFFFFF));
        v157 = *v139;
        v158 = *(unsigned __int8 *)(v157 + 16);
        if (v158 <= 0x1B)
          v157 = 0;
        if (v158 < 4 || v158 == 21)
        {
          if (!v157)
          {
            v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 80);
            if (v160)
              v159 = v160 - 24;
            else
              v159 = 0;
LABEL_245:
            v161 = *(_QWORD *)(v159 + 40);
            if (v161)
              v162 = v161 - 24;
            else
              v162 = 0;
            if (*(unsigned __int8 *)(v162 + 16) - 29 >= 0xB)
              v162 = 0;
            v163 = *(unsigned __int8 *)(v162 + 16) - 38;
            v164 = v163 > 0x38;
            v165 = (1 << v163) & 0x100060000000001;
            if (v164 || v165 == 0)
            {
              v167 = (uint64_t *)a1[16];
              *v167 = a2;
              v167[1] = v60;
            }
            goto LABEL_255;
          }
        }
        else if (!v157 || (v168 = *(unsigned __int8 *)(v157 + 16), v168 == 62) || (v168 - 66) < 0xD)
        {
LABEL_255:
          result = 0;
          *(_QWORD *)(*v61 + 8) -= v60;
          return result;
        }
        v159 = *(_QWORD *)(v157 + 40);
        goto LABEL_245;
      case '\'':
      case '(':
        if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu)
          return 0;
        result = (uint64_t)sub_1C5095F24((uint64_t *)a2, (_QWORD *)a1[13], a1[1], a1[14]);
        if (result)
        {
          v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, llvm::UndefValue ***, _QWORD, _QWORD, uint64_t))result;
          v12 = a1[15];
          v13 = *(unsigned int *)(v12 + 8);
          if ((_DWORD)v13)
            v14 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v13 - 8);
          else
            v14 = 0;
          LODWORD(v174) = 0;
          v122 = sub_1C4848E88(a1[1], a2, v10);
          v123 = v11(a2, a1[15], a1[14], &v174, 0, 0, a1[1]);
          if (a5)
            *a5 = 1;
          v124 = (__int128 *)a1[12];
          v125 = v124[1];
          v176 = *v124;
          v177 = v125;
          v126 = v124[3];
          *(_OWORD *)v178 = v124[2];
          *(_OWORD *)&v178[16] = v126;
          v127 = *(unsigned int *)(*a1 + 8);
          if (!sub_1C5099340(a1, v123, v7)
            || (v128 = *(_DWORD *)(*a1 + 8) - v127 + (v122 ^ 1), v174 > v128)
            || v174 >= v128 && (sub_1C5096300(a1[1], a1[3], v123) & 1) == 0)
          {
            v129 = (_OWORD *)a1[12];
            v130 = v177;
            *v129 = v176;
            v129[1] = v130;
            v129[2] = *(_OWORD *)v178;
            *(_OWORD *)((char *)v129 + 41) = *(_OWORD *)&v178[9];
            v131 = *a1;
            v132 = *(_DWORD *)(*a1 + 8);
            if (v132 != (_DWORD)v127)
            {
              if (v132 <= v127)
              {
                if (*(_DWORD *)(v131 + 12) < v127)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v131 + 16, v127, 8);
                  v132 = *(_DWORD *)(v131 + 8);
                }
                if (v132 != (_DWORD)v127)
                  bzero((void *)(*(_QWORD *)v131 + 8 * v132), 8 * (v127 - v132));
              }
              *(_DWORD *)(v131 + 8) = v127;
            }
            goto LABEL_195;
          }
          return 1;
        }
        return result;
      case '/':
        goto LABEL_145;
      case '0':
        v27 = *(_DWORD *)(*(_QWORD *)a2 + 8);
        if ((v27 & 0xFE) == 0x12)
          v27 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
        v28 = (llvm::DataLayout *)a1[3];
        v29 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v28, v27 >> 8) + 4);
        if (v29 == 128)
          v30 = 7;
        else
          v30 = 0;
        v31 = v29 == 64 || v29 == 128;
        if (v29 == 64)
          v32 = 6;
        else
          v32 = v30;
        v33 = v29 == 32 || v31;
        if (v29 == 32)
          v34 = 5;
        else
          v34 = v32;
        if (v29 == 16)
          v35 = 4;
        else
          v35 = 0;
        v36 = v29 == 8 || v29 == 16;
        if (v29 == 8)
          v37 = 3;
        else
          v37 = v35;
        v38 = v29 == 1 || v36;
        if (v29 == 1)
          v39 = 2;
        else
          v39 = v37;
        if (v29 <= 31)
          v40 = v38;
        else
          v40 = v33;
        if (v29 <= 31)
          v41 = v39;
        else
          v41 = v34;
        v42 = *(_DWORD *)(a2 + 20);
        if ((v42 & 0x40000000) != 0)
          v43 = *(uint64_t ***)(a2 - 8);
        else
          v43 = (uint64_t **)(a2 - 32 * (v42 & 0x7FFFFFF));
        v96 = sub_1C47A7FD0(a1[1], (uint64_t)v28, **v43, 0);
        result = 0;
        if (v97)
          v98 = v40;
        else
          v98 = 1;
        if (v41 == v96 && v98 != 0)
          goto LABEL_145;
        return result;
      case '1':
        v19 = *(_DWORD *)(a2 + 20);
        if ((v19 & 0x40000000) != 0)
          v20 = *(uint64_t ***)(a2 - 8);
        else
          v20 = (uint64_t **)(a2 - 32 * (v19 & 0x7FFFFFF));
        v58 = *v20;
        v59 = **v20;
        if ((*(_DWORD *)(v59 + 8) & 0xFD) != 0xD || v59 == *(_QWORD *)a2)
          return 0;
        return sub_1C5099340(a1, v58, v7);
      case '2':
        v17 = *(_DWORD *)(a2 + 20);
        if ((v17 & 0x40000000) != 0)
          v18 = *(uint64_t ***)(a2 - 8);
        else
          v18 = (uint64_t **)(a2 - 32 * (v17 & 0x7FFFFFF));
        v54 = **v18;
        v55 = *(_DWORD *)(v54 + 8);
        if ((v55 & 0xFE) == 0x12)
          v55 = *(_DWORD *)(**(_QWORD **)(v54 + 16) + 8);
        v56 = v55 >> 8;
        v57 = *(_DWORD *)(*(_QWORD *)a2 + 8);
        if ((v57 & 0xFE) == 0x12)
          v57 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1[1] + 8) + 64))(*(_QWORD *)(a1[1] + 8), v56, v57 >> 8);
        if ((_DWORD)result)
        {
LABEL_145:
          v100 = *(_DWORD *)(a2 + 20);
          if ((v100 & 0x40000000) != 0)
            v101 = *(uint64_t ***)(a2 - 8);
          else
            v101 = (uint64_t **)(a2 - 32 * (v100 & 0x7FFFFFF));
          v58 = *v101;
          return sub_1C5099340(a1, v58, v7);
        }
        return result;
      default:
        return result;
    }
  }
  if (a3 == 13)
  {
    v44 = a1[12];
    v45 = *(_OWORD *)(v44 + 16);
    v176 = *(_OWORD *)v44;
    v177 = v45;
    v46 = *(_OWORD *)(v44 + 48);
    *(_OWORD *)v178 = *(_OWORD *)(v44 + 32);
    *(_OWORD *)&v178[16] = v46;
    v47 = a1[15];
    v48 = *(unsigned int *)(v47 + 8);
    if ((_DWORD)v48)
      v14 = *(_QWORD *)(*(_QWORD *)v47 + 8 * v48 - 8);
    else
      v14 = 0;
    v102 = *(unsigned int *)(*a1 + 8);
    *(_BYTE *)(v44 + 56) = 0;
    v103 = *(_DWORD *)(a2 + 20);
    if ((v103 & 0x40000000) != 0)
      v104 = *(_QWORD *)(a2 - 8);
    else
      v104 = a2 - 32 * (v103 & 0x7FFFFFF);
    if (sub_1C5099340(a1, *(_QWORD *)(v104 + 32), (a4 + 1)))
    {
      v105 = *(_DWORD *)(a2 + 20);
      v106 = (v105 & 0x40000000) != 0 ? *(_QWORD **)(a2 - 8) : (_QWORD *)(a2 - 32 * (v105 & 0x7FFFFFF));
      if ((sub_1C5099340(a1, *v106, (v7 + 1)) & 1) != 0)
        return 1;
    }
    v113 = (_OWORD *)a1[12];
    v114 = v177;
    *v113 = v176;
    v113[1] = v114;
    v113[2] = *(_OWORD *)v178;
    *(_OWORD *)((char *)v113 + 41) = *(_OWORD *)&v178[9];
    v115 = *a1;
    v116 = *(_DWORD *)(*a1 + 8);
    if (v116 != (_DWORD)v102)
    {
      if (v116 <= v102)
      {
        v169 = *a1;
        if (*(_DWORD *)(v115 + 12) < v102)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v169 + 16, v102, 8);
          v116 = *(_DWORD *)(v169 + 8);
        }
        v115 = v169;
        if (v116 != (_DWORD)v102)
        {
          bzero((void *)(*(_QWORD *)v169 + 8 * v116), 8 * (v102 - v116));
          v115 = v169;
        }
      }
      *(_DWORD *)(v115 + 8) = v102;
    }
    sub_1C5095E90(a1[15], v14);
    v117 = *(_DWORD *)(a2 + 20);
    v118 = (v117 & 0x40000000) != 0 ? *(_QWORD **)(a2 - 8) : (_QWORD *)(a2 - 32 * (v117 & 0x7FFFFFF));
    if (sub_1C5099340(a1, *v118, (v7 + 1)))
    {
      v119 = *(_DWORD *)(a2 + 20);
      v120 = (v119 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v119 & 0x7FFFFFF);
      if ((sub_1C5099340(a1, *(_QWORD *)(v120 + 32), (v7 + 1)) & 1) != 0)
        return 1;
    }
    v133 = (_OWORD *)a1[12];
    v134 = v177;
    *v133 = v176;
    v133[1] = v134;
    v133[2] = *(_OWORD *)v178;
    *(_OWORD *)((char *)v133 + 41) = *(_OWORD *)&v178[9];
    v135 = *a1;
    v136 = *(_DWORD *)(*a1 + 8);
    if (v136 != (_DWORD)v102)
    {
      if (v136 <= v102)
      {
        if (*(_DWORD *)(v135 + 12) < v102)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v135 + 16, v102, 8);
          v136 = *(_DWORD *)(v135 + 8);
        }
        if (v136 != (_DWORD)v102)
          bzero((void *)(*(_QWORD *)v135 + 8 * v136), 8 * (v102 - v136));
      }
      *(_DWORD *)(v135 + 8) = v102;
    }
LABEL_195:
    sub_1C5095E90(a1[15], v14);
    return 0;
  }
  if (a3 == 17 || a3 == 25)
  {
    *(_BYTE *)(a1[12] + 56) = 0;
    v15 = *(_DWORD *)(a2 + 20);
    v16 = (v15 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v15 & 0x7FFFFFF);
    result = 0;
    v49 = *(_QWORD *)(v16 + 32);
    if (v49)
    {
      if (*(_BYTE *)(v49 + 16) == 16)
      {
        v50 = *(_DWORD *)(v49 + 32);
        if (v50 > 0x40)
          return 0;
        if (a3 == 25)
        {
          v51 = v50 - 1;
          v52 = *(_QWORD *)(v49 + 24);
          if (v52 >= v51)
            LOBYTE(v52) = v51;
          v53 = 1 << v52;
        }
        else
        {
          v53 = (uint64_t)(*(_QWORD *)(v49 + 24) << -(char)v50) >> -(char)v50;
        }
        if ((v15 & 0x40000000) != 0)
          v121 = *(_BYTE ***)(a2 - 8);
        else
          v121 = (_BYTE **)(a2 - 32 * (v15 & 0x7FFFFFF));
        return sub_1C509A804(a1, *v121, v53, a4);
      }
    }
  }
  return result;
}

uint64_t sub_1C509A804(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  const llvm::Value *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void **v40;
  void *v41;
  size_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::DominatorTree *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  llvm::Value *v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[32];
  uint64_t **v64;
  uint64_t v65;
  char v66;

  if (!a3)
    return 1;
  if (a3 == 1)
    return sub_1C5099340(a1, a2, a4);
  v8 = (__int128 *)a1[12];
  if (*((_QWORD *)v8 + 3) && *((_BYTE **)v8 + 5) != a2)
    return 0;
  v9 = v8[3];
  v10 = *v8;
  v11 = v8[1];
  *(_QWORD *)v63 = *((_QWORD *)v8 + 4);
  *(_OWORD *)&v63[16] = v9;
  v61 = v10;
  *(_QWORD *)&v62 = v11;
  *((_QWORD *)&v62 + 1) = *((_QWORD *)&v11 + 1) + a3;
  *(_QWORD *)&v63[8] = a2;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 1064))(a1[1], a1[3], &v61, a1[9], *((unsigned int *)a1 + 20), 0);
  if (!(_DWORD)v7)
    return v7;
  v12 = (_OWORD *)a1[12];
  v13 = v61;
  v14 = v62;
  v15 = *(_OWORD *)v63;
  *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)&v63[9];
  v12[1] = v14;
  v12[2] = v15;
  *v12 = v13;
  if (a2[16] == 41)
  {
    v16 = *((_QWORD *)a2 - 8);
    if (v16)
    {
      v17 = *((_QWORD *)a2 - 4);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 16) == 16 && (sub_1C5098630((llvm::Instruction *)a2, (uint64_t *)a1[4]) & 1) == 0)
        {
          v18 = (_QWORD **)(v17 + 24);
          v19 = *(_DWORD *)(v17 + 32);
          if (v19 - sub_1C4959174((llvm::APInt *)(v17 + 24)) + 1 <= 0x40)
          {
            v63[24] = 0;
            *(_QWORD *)&v63[8] = v16;
            v20 = *(_DWORD *)(v17 + 32);
            if (v20 > 0x40)
              v21 = **v18;
            else
              v21 = (uint64_t)((_QWORD)*v18 << -(char)v20) >> -(char)v20;
            *((_QWORD *)&v61 + 1) += *((_QWORD *)&v62 + 1) * v21;
            if ((*(unsigned int (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 1064))(a1[1], a1[3], &v61, a1[9], *((unsigned int *)a1 + 20), 0))
            {
              v22 = *a1;
              v23 = *(unsigned int *)(*a1 + 8);
              if (v23 >= *(_DWORD *)(*a1 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v22 + 16, v23 + 1, 8);
                LODWORD(v23) = *(_DWORD *)(v22 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = a2;
              ++*(_DWORD *)(v22 + 8);
              v24 = (_OWORD *)a1[12];
              v25 = v61;
              v26 = v62;
              v27 = *(_OWORD *)v63;
              *(_OWORD *)((char *)v24 + 41) = *(_OWORD *)&v63[9];
              v24[1] = v26;
              v24[2] = v27;
              *v24 = v25;
              return v7;
            }
            v28 = (__int128 *)a1[12];
            v30 = v28[1];
            v29 = v28[2];
            v31 = *v28;
            *(_OWORD *)&v63[9] = *(__int128 *)((char *)v28 + 41);
            v62 = v30;
            *(_OWORD *)v63 = v29;
            v61 = v31;
          }
        }
      }
    }
  }
  if (!*(_QWORD *)(a1[12] + 8))
    return v7;
  if (a2[16] != 83)
    return v7;
  sub_1C5098760((uint64_t)&v64, (uint64_t)a2, (uint64_t *)a1[4]);
  if (!v66)
    return v7;
  v32 = (const llvm::Value *)v64;
  HIDWORD(v34) = *((unsigned __int8 *)v64 + 16) - 41;
  LODWORD(v34) = HIDWORD(v34);
  v33 = v34 >> 1;
  if (v33 <= 6 && ((1 << v33) & 0x47) != 0 && (*((_BYTE *)v64 + 17) & 6) != 0)
    return v7;
  v35 = v65;
  if (!v65 || *(_BYTE *)(v65 + 16) != 16)
    return v7;
  v36 = *(unsigned int *)(v65 + 32);
  if (v36 >= 0x41)
  {
    v42 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
    v37 = operator new[]();
    memcpy((void *)v37, *(const void **)(v35 + 24), v42);
    v41 = (void *)operator new[]();
    memcpy(v41, (const void *)v37, v42);
    v60 = (char *)operator new[]();
    memcpy(v60, v41, v42);
    v43 = (unint64_t)(v36 + 63) >> 6;
    llvm::APInt::tcMultiplyPart((llvm::APInt *)v60, (unint64_t *)v60, *(const unint64_t **)(a1[12] + 24), 0, v43, v43, 0);
    v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
    v40 = (void **)&v60[8 * (v43 - 1)];
    v38 = (uint64_t)*v40;
  }
  else
  {
    v37 = *(_QWORD *)(v65 + 24);
    v38 = *(_QWORD *)(a1[12] + 24) * v37;
    v60 = (char *)v38;
    v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
    if (!(_DWORD)v36)
      v39 = 0;
    v40 = (void **)&v60;
    v41 = (void *)v37;
  }
  *v40 = (void *)(v38 & v39);
  LODWORD(v65) = v36;
  v64 = (uint64_t **)v60;
  if (v36 - sub_1C4959174((llvm::APInt *)&v64) + 1 > 0x40)
  {
LABEL_44:
    if (v65 >= 0x41 && v64)
      MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    if (v36 >= 0x41)
    {
      if (v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
      if (v37)
        MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    }
    return v7;
  }
  v63[24] = 0;
  *(_QWORD *)&v63[8] = v32;
  v44 = sub_1C47EE5B8(&v64, 0xFFFFFFFFFFFFFFFFLL);
  *((_QWORD *)&v61 + 1) -= v44;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 1064))(a1[1], a1[3], &v61, a1[9], *((unsigned int *)a1 + 20), 0))
  {
LABEL_43:
    v53 = (__int128 *)a1[12];
    v55 = v53[1];
    v54 = v53[2];
    v56 = *v53;
    *(_OWORD *)&v63[9] = *(__int128 *)((char *)v53 + 41);
    v62 = v55;
    *(_OWORD *)v63 = v54;
    v61 = v56;
    goto LABEL_44;
  }
  v45 = a1[8];
  if (v45)
  {
    v46 = (llvm::DominatorTree *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45);
    if (llvm::DominatorTree::dominates(v46, v32, (const llvm::Instruction *)a1[11]))
    {
      v47 = *a1;
      v48 = *(unsigned int *)(*a1 + 8);
      if (v48 >= *(_DWORD *)(*a1 + 12))
      {
        v59 = *a1;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v47, v47 + 16, v48 + 1, 8);
        v47 = v59;
        LODWORD(v48) = *(_DWORD *)(v59 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v47 + 8 * v48) = v32;
      ++*(_DWORD *)(v47 + 8);
      v49 = (_OWORD *)a1[12];
      v51 = v62;
      v50 = *(_OWORD *)v63;
      v52 = v61;
      *(_OWORD *)((char *)v49 + 41) = *(_OWORD *)&v63[9];
      v49[1] = v51;
      v49[2] = v50;
      *v49 = v52;
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  sub_1C485C2F0();
  return sub_1C509AD60(v57, v58);
}

uint64_t sub_1C509AD60(uint64_t a1, llvm::Value *this, llvm::Value *a3, llvm::Value *a4)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!this || this == a3 || this == a4)
    return 1;
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 <= 0x1B && v4 != 21)
    return 1;
  if (v4 == 59
    && *(_BYTE *)(*((_QWORD *)this - 4) + 16) == 16
    && ((v6 = *((_QWORD *)this + 5), (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80)) != 0) ? (v8 = v7 - 24) : (v8 = 0),
        v6 == v8 && (*((_WORD *)this + 9) & 0x40) == 0))
  {
    return 1;
  }
  else
  {
    return llvm::Value::isUsedInBasicBlock(this, *(const llvm::BasicBlock **)(*(_QWORD *)(a1 + 88) + 40));
  }
}

uint64_t sub_1C509ADE0(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t **a8, int a9)
{
  char v17;
  uint64_t result;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _QWORD **v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  int v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  _QWORD v50[3];
  void **v51;

  sub_1C4774094(a3, a1);
  if (!v17)
    return 0;
  result = 1;
  v19 = *(unsigned __int8 *)(a1 + 16) - 41;
  if (v19 > 0x25)
    return result;
  if (((1 << v19) & 0xC00200001) != 0)
  {
LABEL_16:
    v49 = a5;
    v25 = *(uint64_t **)(a1 + 8);
    if (v25)
    {
      v47 = a7;
      v48 = a8;
      v26 = a9;
      if (a9 <= 20)
        v27 = 20;
      else
        v27 = a9;
      do
      {
        if (v26 == v27)
          return 1;
        ++v26;
        v28 = (uint64_t *)v25[3];
        v29 = *((unsigned __int8 *)v28 + 16);
        if (v28 && v29 == 60)
        {
          v30 = *v25;
          v31 = *v28;
          goto LABEL_37;
        }
        if (v28 && v29 == 61)
        {
          v32 = *((_DWORD *)v28 + 5);
          if ((v32 & 0x40000000) != 0)
            v33 = (uint64_t *)*(v28 - 1);
          else
            v33 = &v28[-4 * (v32 & 0x7FFFFFF)];
          if ((((char *)v25 - (char *)v33) & 0x1FFFFFFFE0) != 0x20)
            return 1;
          goto LABEL_29;
        }
        if (v28 && v29 == 65)
        {
          v35 = *((_DWORD *)v28 + 5);
          if ((v35 & 0x40000000) != 0)
            v36 = (uint64_t *)*(v28 - 1);
          else
            v36 = &v28[-4 * (v35 & 0x7FFFFFF)];
          if ((((char *)v25 - (char *)v36) & 0x1FFFFFFFE0) != 0)
            return 1;
          v30 = *v25;
          v34 = (uint64_t *)*(v28 - 4);
          goto LABEL_36;
        }
        if (v28 && v29 == 64)
        {
          v39 = *((_DWORD *)v28 + 5);
          if ((v39 & 0x40000000) != 0)
            v40 = (uint64_t *)*(v28 - 1);
          else
            v40 = &v28[-4 * (v39 & 0x7FFFFFF)];
          if ((((char *)v25 - (char *)v40) & 0x1FFFFFFFE0) != 0)
            return 1;
LABEL_29:
          v30 = *v25;
          v34 = (uint64_t *)*(v28 - 8);
LABEL_36:
          v31 = *v34;
LABEL_37:
          v37 = *(unsigned int *)(a2 + 8);
          if (v37 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v37 + 1, 16);
            v37 = *(unsigned int *)(a2 + 8);
          }
          v38 = (_QWORD *)(*(_QWORD *)a2 + 16 * v37);
          *v38 = v30;
          v38[1] = v31;
          ++*(_DWORD *)(a2 + 8);
          goto LABEL_40;
        }
        if (v28 && v29 == 84)
        {
          v41 = v28[8];
          if ((v41 && (*(_BYTE *)(v41 + 12) & 0x20) != 0
             || llvm::CallBase::hasFnAttrOnCalledFunction(v25[3], 5))
            && (a6 & 1) == 0
            && !llvm::shouldOptimizeForSize((llvm::BasicBlock *)v28[5], v47, v48))
          {
            goto LABEL_40;
          }
          v42 = *(v28 - 4);
          result = 1;
          if (!v42 || *(_BYTE *)(v42 + 16) != 24)
            return result;
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 2008))(v50, a4, *(_QWORD *)(*(_QWORD *)(v28[5] + 56) + 40) + 272, v49, v28);
          v44 = v50[0];
          v43 = v50[1];
          while (1)
          {
            if (v44 == v43)
            {
              v46 = 3;
              goto LABEL_69;
            }
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 2032))(a4, v44, 0, 0, 0);
            if (*(_QWORD *)(v44 + 112) == a1 && (*(_DWORD *)(v44 + 104) != 2 || *(_BYTE *)(v44 + 13) == 0))
              break;
            v44 += 128;
          }
          v46 = 1;
LABEL_69:
          v51 = (void **)v50;
          sub_1C509B1A8(&v51);
        }
        else
        {
          v46 = sub_1C509ADE0(v28, a2, a3, a4, v49, a6, v47, v48, v26);
          if (!v46)
            goto LABEL_40;
        }
        if (v46 != 3)
          return 1;
LABEL_40:
        v25 = (uint64_t *)v25[1];
      }
      while (v25);
    }
    return 0;
  }
  if (((1 << v19) & 0x1010) == 0)
  {
    if (((1 << v19) & 0x3000000000) == 0)
      return result;
    v20 = *(_QWORD *)a1;
    v21 = *(_DWORD *)(a1 + 20);
    v22 = (v21 & 0x40000000) != 0 ? *(_QWORD ***)(a1 - 8) : (_QWORD **)(a1 - 32 * (v21 & 0x7FFFFFF));
    if (v20 == **v22 || (*(_DWORD *)(v20 + 8) & 0xFD) != 0xD)
      return result;
    goto LABEL_16;
  }
  v23 = *(_DWORD *)(a1 + 20);
  if ((v23 & 0x40000000) != 0)
    v24 = *(_QWORD *)(a1 - 8);
  else
    v24 = a1 - 32 * (v23 & 0x7FFFFFF);
  if (*(_BYTE *)(*(_QWORD *)(v24 + 32) + 16) == 16)
    goto LABEL_16;
  return result;
}

void sub_1C509B1A8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0)
          operator delete(*(v4 - 6));
        v6 = v4 - 10;
        sub_1C50107D8(&v6);
        v6 = v4 - 14;
        sub_1C4765410(&v6);
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C509B24C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C509B260(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8140830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C509B298(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8140830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C509B2B8(uint64_t a1)
{
  return sub_1C50986C8(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 56));
}

void sub_1C509B2CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xF0B7672A07A44C6BLL * (((uint64_t)v5 - *a1) >> 3);
    if (v7 + 1 > 0x7A44C6AFC2DD9CLL)
      abort();
    v8 = 0xF0B7672A07A44C6BLL * ((uint64_t)(v4 - *a1) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x3D226357E16ECELL)
      v10 = 0x7A44C6AFC2DD9CLL;
    else
      v10 = v9;
    v21 = a1 + 2;
    if (v10 > 0x7A44C6AFC2DD9CLL)
      sub_1C4764EE4();
    v11 = 536 * v10;
    v12 = (char *)operator new(536 * v10);
    v13 = &v12[536 * v7];
    __p = v12;
    v18 = v13;
    v20 = &v12[v11];
    *(_QWORD *)v13 = *(_QWORD *)a2;
    *((_QWORD *)v13 + 1) = v13 + 24;
    *((_QWORD *)v13 + 2) = 0x2000000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C4E85538((uint64_t)(v13 + 8), a2 + 8);
    v19 = v13 + 536;
    sub_1C61DAF08(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v14 = v18;
    for (i = v19; i != v14; i -= 536)
    {
      v16 = (char *)*((_QWORD *)i - 66);
      if (i - 512 != v16)
        free(v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = v5 + 3;
    v5[2] = 0x2000000000;
    if (*(_DWORD *)(a2 + 16))
      sub_1C4E85538((uint64_t)(v5 + 1), a2 + 8);
    v6 = v5 + 67;
  }
  a1[1] = (uint64_t)v6;
}

_QWORD *sub_1C509B474(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C49D7AB8(a1, v7);
      v17 = 0;
      sub_1C47AD1C0(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C49D7AB8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C509B5A4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DB104(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C509B65C(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  _OWORD v14[2];
  _OWORD v15[2];

  v3 = a2[1];
  v14[0] = *a2;
  v14[1] = v3;
  v15[0] = a2[2];
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)a2 + 41);
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  v6 = (__n128 *)v14;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v4 + 1;
    v12 = v5 + (v4 << 6) > (unint64_t)v14;
    if (v5 <= (unint64_t)v14 && v12)
    {
      v13 = (char *)v14 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 64);
      v5 = *(_QWORD *)a1;
      v6 = (__n128 *)&v13[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11, 64);
      v5 = *(_QWORD *)a1;
      v6 = (__n128 *)v14;
    }
  }
  v7 = (__n128 *)(v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6));
  result = *v6;
  v9 = v6[1];
  v10 = v6[3];
  v7[2] = v6[2];
  v7[3] = v10;
  *v7 = result;
  v7[1] = v9;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_QWORD *sub_1C509B72C(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E36534(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4EAD9B0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

char *sub_1C509B78C(uint64_t a1, llvm::UndefValue *a2)
{
  llvm::UndefValue *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::ValueAsMetadata *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t *v12;
  int v13;
  char *result;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  llvm::ValueAsMetadata *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v3 = llvm::UndefValue::get(a2, a2);
  v4 = (uint64_t *)(a1 + 824);
  v5 = *(_QWORD *)(a1 + 824);
  if (!v5)
  {
    sub_1C509BE6C(a1 + 32, (uint64_t *)(a1 + 824));
    v5 = *v4;
  }
  v37 = (_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 40);
  if (v5 != v6)
  {
    do
    {
      v7 = *(llvm::ValueAsMetadata **)(*v37 + 8 * v5);
      llvm::Value::doRAUW(v7, v3, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v7 + 5) + 40, (uint64_t ***)v7);
      v8 = *((_QWORD *)v7 + 3);
      v9 = (_QWORD *)*((_QWORD *)v7 + 4);
      *v9 = v8;
      *(_QWORD *)(v8 + 8) = v9;
      *((_QWORD *)v7 + 3) = 0;
      *((_QWORD *)v7 + 4) = 0;
      llvm::Value::deleteValue(v7);
      v38 = v5 + 1;
      sub_1C509BE6C((uint64_t)v37, &v38);
      v5 = v38;
    }
    while (v38 != v6);
  }
  v10 = *(_DWORD *)(a1 + 304);
  if (v10 > 1 || *(_DWORD *)(a1 + 308))
  {
    v11 = (_DWORD *)(a1 + 304);
    if ((v10 & 1) != 0)
    {
      v12 = (uint64_t *)(a1 + 312);
    }
    else
    {
      v32 = *(unsigned int *)(a1 + 320);
      if (((2 * v10) & 0xFFFFFFFC) < v32 && v32 >= 0x41)
      {
        v33 = 1 << (33 - __clz((v10 >> 1) - 1));
        if (v10 >= 2)
          v34 = v33;
        else
          v34 = 0;
        if (v34 == (_DWORD)v32)
        {
          *(_QWORD *)(a1 + 304) = 0;
          if (v10 >= 2)
          {
            v35 = *(_QWORD **)(a1 + 312);
            v36 = 16 * v32;
            do
            {
              *v35 = -4096;
              v35 += 2;
              v36 -= 16;
            }
            while (v36);
          }
        }
        else
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 312), 8);
          sub_1C61DB1B0((_QWORD *)(a1 + 304), v34);
        }
        goto LABEL_11;
      }
      if (!(_DWORD)v32)
      {
        v13 = 0;
LABEL_10:
        *(_DWORD *)(a1 + 304) = v13;
        *(_DWORD *)(a1 + 308) = 0;
        goto LABEL_11;
      }
      v12 = *(uint64_t **)(a1 + 312);
      v4 = &v12[2 * v32];
      v11 = (_DWORD *)(a1 + 304);
    }
    do
    {
      *v12 = -4096;
      v12 += 2;
    }
    while (v12 != v4);
    v13 = *v11 & 1;
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  result = *(char **)(a1 + 840);
  v15 = *(char **)(a1 + 832);
  v16 = 848;
  if (result == v15)
    v16 = 852;
  v17 = *(unsigned int *)(a1 + v16);
  v18 = *(unint64_t **)(a1 + 840);
  if ((_DWORD)v17)
  {
    v19 = 0;
    while (*(_QWORD *)&result[v19] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v19 += 8;
      if (8 * v17 == v19)
        goto LABEL_26;
    }
    v18 = (unint64_t *)&result[v19];
  }
  v20 = (unint64_t *)&result[8 * v17];
  if (v18 != v20)
  {
    v21 = (llvm::ValueAsMetadata *)*v18;
LABEL_21:
    llvm::Value::doRAUW(v21, v3, (llvm::Value *)1);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v21 + 5) + 40, (uint64_t ***)v21);
    v22 = *((_QWORD *)v21 + 3);
    v23 = (_QWORD *)*((_QWORD *)v21 + 4);
    *v23 = v22;
    *(_QWORD *)(v22 + 8) = v23;
    *((_QWORD *)v21 + 3) = 0;
    *((_QWORD *)v21 + 4) = 0;
    llvm::Value::deleteValue(v21);
    v24 = v18 + 1;
    while (v24 != v20)
    {
      v25 = *v24++;
      v21 = (llvm::ValueAsMetadata *)v25;
      if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v18 = v24 - 1;
        goto LABEL_21;
      }
    }
    result = *(char **)(a1 + 840);
    v15 = *(char **)(a1 + 832);
  }
LABEL_26:
  if (result == v15)
    goto LABEL_27;
  v26 = *(unsigned int *)(a1 + 848);
  if (v26 < 0x21 || 4 * (*(_DWORD *)(a1 + 852) - *(_DWORD *)(a1 + 856)) >= v26)
  {
    result = (char *)memset(result, 255, 8 * v26);
LABEL_27:
    *(_QWORD *)(a1 + 852) = 0;
    return result;
  }
  free(result);
  v28 = *(_DWORD *)(a1 + 852) - *(_DWORD *)(a1 + 856);
  v29 = 1 << (33 - __clz(v28 - 1));
  if (v28 <= 0x10)
    v30 = 32;
  else
    v30 = v29;
  *(_DWORD *)(a1 + 848) = v30;
  *(_QWORD *)(a1 + 852) = 0;
  v31 = malloc_type_malloc(8 * v30, 0x4065EBACuLL);
  if (!v31)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 840) = v31;
  return (char *)memset(v31, 255, 8 * *(unsigned int *)(a1 + 848));
}

uint64_t sub_1C509BAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  v3 = a1;
  v5 = a2;
  v6 = 0;
  while (sub_1C4926528(a1, &v5, &v6) && v6 != *(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 16))
  {
    v2 = *(_QWORD *)(v6 + 8);
    v5 = v2;
    v6 = 0;
    a1 = v3;
  }
  return v2;
}

uint64_t sub_1C509BB64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C509BC08(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[65];

  v14[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61DB230(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61DB230(a1, v14, v9);
}

uint64_t sub_1C509BD8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4E36534((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4EAD9B0(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C509BE1C(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C509BB64((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C509BE6C(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  if (*a2 < (unint64_t)*(unsigned int *)(result + 8))
  {
    v4 = result;
    v5 = result + 272;
    v6 = result + 280;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v2);
      v16 = 0;
      result = sub_1C509BF40(v5, v7, &v16);
      v8 = *(_DWORD *)(v4 + 272);
      if ((result & 1) != 0)
      {
        v9 = v16;
        if ((v8 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        if ((v8 & 1) != 0)
        {
          v12 = v6;
          v13 = 32;
        }
        else
        {
          v12 = *(_QWORD *)(v4 + 280);
          v13 = *(unsigned int *)(v4 + 288);
        }
        v9 = v12 + 16 * v13;
        if ((v8 & 1) != 0)
        {
LABEL_10:
          v10 = v6;
          v11 = 32;
          goto LABEL_11;
        }
      }
      v10 = *(_QWORD *)(v4 + 280);
      v11 = *(unsigned int *)(v4 + 288);
LABEL_11:
      v14 = v10 + 16 * v11;
      v15 = *a2;
      if (v14 == v9 || *(_QWORD *)(v9 + 8) != v15)
      {
        v2 = v15 + 1;
        *a2 = v15 + 1;
        if (v15 + 1 < (unint64_t)*(unsigned int *)(v4 + 8))
          continue;
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_1C509BF40(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C509BFEC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;

  v11 = 0;
  result = sub_1C509C11C(a1, *a2, a2[1], &v11);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 8;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 4) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C509C214(a1, v6);
  v11 = 0;
  result = sub_1C509C11C(a1, *a2, a2[1], &v11);
LABEL_6:
  v7 = v11;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096 || v7[1] != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_OWORD *)a2;
  v9 = *(unsigned int *)(a1 + 144);
  if (v9 >= *(_DWORD *)(a1 + 148))
  {
    v10 = *(_OWORD *)a2;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v9 + 1, 16);
    v8 = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 144);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 136) + 16 * v9) = v8;
  ++*(_DWORD *)(a1 + 144);
  return result;
}

uint64_t sub_1C509C11C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_12;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 16 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
LABEL_26:
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -8192)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 16 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_26;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_12:
  *a4 = v12;
  return result;
}

void sub_1C509C214(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C509C398(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  sub_1C509C398(a1, v14, v9);
}

void sub_1C509C398(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(a1 + 8);
    v9 = 128;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_12;
    v8 = *(void **)(a1 + 8);
    v9 = 16 * v7;
  }
  memset_pattern16(v8, &unk_1C85F2160, v9);
LABEL_12:
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      sub_1C509C11C(a1, v10, v11, &v13);
      v12 = v13;
      *v13 = *a2;
      v12[1] = a2[1];
      *(_DWORD *)a1 += 2;
    }
    a2 += 2;
  }
}

_QWORD *sub_1C509C468(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[4];
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (_QWORD *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = v7[5];
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (_QWORD *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

void sub_1C509C4C0(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > 1u || *(_DWORD *)(a1 + 4))
  {
    if ((v1 & 1) != 0)
    {
      v2 = (_QWORD *)(a1 + 8);
      v3 = a1 + 136;
    }
    else
    {
      v5 = *(unsigned int *)(a1 + 16);
      if (((2 * v1) & 0xFFFFFFFC) < v5 && v5 >= 0x41)
      {
        sub_1C509C53C(a1);
        return;
      }
      if (!(_DWORD)v5)
      {
        v4 = 0;
LABEL_6:
        *(_DWORD *)a1 = v4;
        *(_DWORD *)(a1 + 4) = 0;
        return;
      }
      v2 = *(_QWORD **)(a1 + 8);
      v3 = (uint64_t)&v2[2 * v5];
    }
    do
    {
      *v2 = -4096;
      v2[1] = -4096;
      v2 += 2;
    }
    while (v2 != (_QWORD *)v3);
    v4 = *(_DWORD *)a1 & 1;
    goto LABEL_6;
  }
}

void sub_1C509C53C(uint64_t a1)
{
  unsigned int v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  void *v8;
  size_t v9;
  unsigned int v10;

  v2 = *(_DWORD *)a1;
  v3 = __clz((*(_DWORD *)a1 >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) == 0 || v5 >= 9)
  {
    if ((v2 & 1) == 0)
    {
      if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
      {
        *(_QWORD *)a1 = 0;
        if (!(_DWORD)v5)
          return;
        v6 = *(void **)(a1 + 8);
        v7 = 16 * v5;
        goto LABEL_10;
      }
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    }
    if (v5 <= 8)
    {
      *(_QWORD *)a1 = 1;
    }
    else
    {
      *(_DWORD *)a1 &= ~1u;
      v9 = 16 * v5;
      v8 = operator new(v9, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v5;
      v10 = *(_DWORD *)a1;
      *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
      if ((v10 & 1) == 0)
        goto LABEL_21;
    }
    v8 = (void *)(a1 + 8);
    v9 = 128;
LABEL_21:
    v7 = v9;
    goto LABEL_22;
  }
  *(_QWORD *)a1 = 1;
  v6 = (void *)(a1 + 8);
  v7 = 128;
LABEL_10:
  v8 = v6;
LABEL_22:
  memset_pattern16(v8, &unk_1C85F2160, v7);
}

void sub_1C509C664()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C509C678(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8140878;
  result[1] = v3;
  return result;
}

uint64_t sub_1C509C6AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8140878;
  a2[1] = v2;
  return result;
}

void sub_1C509C6C8(uint64_t a1, unint64_t *a2)
{
  sub_1C509C6D4(*(_QWORD *)(a1 + 8), *a2);
}

void sub_1C509C6D4(uint64_t a1, unint64_t a2)
{
  int32x2_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v4 = (int32x2_t *)(a1 + 560);
  v5 = (_QWORD *)sub_1C5095410((uint64_t *)(a1 + 560), a2);
  if (*(_QWORD **)(a1 + 592) != v5)
    sub_1C5095498(v4, v5);
  if (*(_QWORD *)(a1 + 656))
  {
    sub_1C61A6188(a1 + 640, a2);
    if (!a2)
      return;
    goto LABEL_13;
  }
  v6 = *(unsigned int *)(a1 + 616);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 608);
    v8 = 8 * v6 - 8;
    v9 = v7;
    while (1)
    {
      v10 = *v9++;
      if (v10 == a2)
        break;
      v8 -= 8;
      v7 = v9;
      if (v8 == -8)
        goto LABEL_12;
    }
    if (v8)
      memmove(v7, v7 + 1, v8);
    *(_DWORD *)(a1 + 616) = v6 - 1;
  }
LABEL_12:
  if (a2)
  {
LABEL_13:
    if (*(_BYTE *)(a2 + 16) == 62)
    {
      v23 = 0;
      if (sub_1C4E2F6FC(*(_QWORD *)(a1 + 664), *(_DWORD *)(a1 + 680), a2, &v23))
      {
        *v23 = -8192;
        *(int32x2_t *)(a1 + 672) = vadd_s32(*(int32x2_t *)(a1 + 672), (int32x2_t)0x1FFFFFFFFLL);
      }
      v11 = sub_1C5095410((uint64_t *)v4, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      if (*(_QWORD *)(a1 + 592) != v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        v13 = *(unsigned int *)(v11 + 16);
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = (_QWORD *)(v12 + 16 * v13);
          v16 = 16 * v13;
          v17 = 16 * v13 - 16;
          while (*(_QWORD *)(v12 + v14) != a2)
          {
            v14 += 16;
            if (v16 == v14)
              goto LABEL_28;
          }
          v15 = (_QWORD *)(v12 + v14);
          if (v17 != v14)
          {
            v18 = v15 + 3;
            v19 = v16 - v14 - 16;
            do
            {
              v20 = *(v18 - 1);
              if (v20 != a2)
              {
                v21 = *v18;
                *v15 = v20;
                v15[1] = v21;
                v15 += 2;
              }
              v18 += 2;
              v19 -= 16;
            }
            while (v19);
          }
        }
        else
        {
          v15 = *(_QWORD **)(v11 + 8);
        }
LABEL_28:
        v22 = ((unint64_t)v15 - v12) >> 4;
        *(_DWORD *)(v11 + 16) = v22;
        if (!(_DWORD)v22)
          sub_1C5095498(v4, (_QWORD *)v11);
      }
    }
  }
}

llvm::Value *sub_1C509C8A4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  const llvm::APInt *v12;
  uint64_t *v13;
  uint64_t ***v14;
  unsigned __int8 v15;
  uint64_t *v16;
  llvm::GetElementPtrInst *v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  unint64_t v20;
  char v21;
  llvm::ValueHandleBase *v22;
  unint64_t v23;
  llvm::ConstantInt *v25;
  llvm::ValueHandleBase *v26;
  uint64_t v27;
  unsigned int v28;
  __int16 v29;

  v5 = *(uint64_t **)a1;
  v6 = **(_QWORD **)(a1 + 8);
  v29 = 257;
  v7 = (uint64_t *)sub_1C509CA90(v5, a2, v6, (uint64_t)&v27);
  v8 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 32);
  v9 = *(uint64_t **)a1;
  v10 = *(_DWORD *)(*(_QWORD *)v8 + 8);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v8 + 16) + 8);
  v11 = llvm::PointerType::get(**(llvm::PointerType ***)(a1 + 8), (llvm::Type *)(v10 >> 8));
  v29 = 257;
  v13 = (uint64_t *)sub_1C4773E38(v9, 49, v8, v11, (uint64_t)&v27);
  v14 = *(uint64_t ****)(a1 + 16);
  v15 = __clz(1 << ((unint64_t)*((unsigned __int16 *)v14 + 9) >> 1)) ^ 0x3F;
  if ((**(_BYTE **)(a1 + 24) == 0) != a3)
  {
    v16 = *(uint64_t **)a1;
    v17 = **(llvm::GetElementPtrInst ***)(a1 + 8);
    v18 = ***v14;
    v19 = *(llvm::ConstantInt **)(v18 + 1960);
    v20 = *(unsigned int *)(v18 + 1968);
    v28 = v20 >> 8;
    if (v20 >> 8 > 0x40)
    {
      v25 = v19;
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, 1, 0);
      v19 = v25;
    }
    else
    {
      if (v20 <= 0xFF)
        v21 = 0;
      else
        v21 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
      v27 = v21 & 1;
    }
    v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v27, v12);
    if (v28 >= 0x41 && v27)
    {
      v26 = v22;
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
      v22 = v26;
    }
    v29 = 257;
    v13 = (uint64_t *)sub_1C4867B70(v16, v17, v13, (uint64_t)v22, (uint64_t)&v27);
    v23 = (1 << v15) | ((unint64_t)**(unsigned int **)(a1 + 32) >> 3);
    v15 = 63 - __clz(v23 & -(uint64_t)v23);
  }
  return sub_1C509CCE8(*(uint64_t **)a1, v7, (uint64_t)v13, v15 | 0x100u, 0);
}

unsigned __int8 *sub_1C509CA90(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *ZExtOrBitCast;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23[4];
  __int16 v24;
  unsigned __int8 *v25;

  ZExtOrBitCast = a2;
  if (*(_QWORD *)a2 == a3)
    return ZExtOrBitCast;
  if (a2[16] <= 0x14u)
  {
    ZExtOrBitCast = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1[9] + 288))(a1[9], a2, a3);
    if (ZExtOrBitCast)
      v14 = ZExtOrBitCast[16] >= 0x1Cu;
    else
      v14 = 0;
    if (!v14)
      return ZExtOrBitCast;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], ZExtOrBitCast, a4, a1[6], a1[7]);
    v15 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v15)
      return ZExtOrBitCast;
    v17 = *a1;
    v18 = *a1 + 16 * v15;
    v19 = (unsigned __int8 **)(ZExtOrBitCast + 48);
    while (1)
    {
      v20 = *(_DWORD *)v17;
      v21 = *(unsigned __int8 **)(v17 + 8);
      if (v21)
      {
        if (!v20)
        {
          v23[0] = *(unsigned __int8 **)(v17 + 8);
          llvm::MetadataTracking::track((uint64_t)v23, v21, 2);
LABEL_40:
          if (v23 == v19)
          {
            if (v23[0])
              llvm::MetadataTracking::untrack((uint64_t)v23, v23[0]);
          }
          else
          {
            if (*v19)
              llvm::MetadataTracking::untrack((uint64_t)(ZExtOrBitCast + 48), *v19);
            v22 = v23[0];
            *v19 = v23[0];
            if (v22)
              llvm::MetadataTracking::retrack((uint64_t)v23, v22, (uint64_t)(ZExtOrBitCast + 48));
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!*v19 && (ZExtOrBitCast[23] & 0x20) == 0)
          goto LABEL_37;
        if (!v20)
        {
          v23[0] = 0;
          goto LABEL_40;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)ZExtOrBitCast, v20, (llvm::MDNode *)v21);
LABEL_37:
      v17 += 16;
      if (v17 == v18)
        return ZExtOrBitCast;
    }
  }
  v24 = 257;
  ZExtOrBitCast = (unsigned __int8 *)llvm::CastInst::CreateZExtOrBitCast((uint64_t *)a2, a3, (uint64_t)v23, 0);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], ZExtOrBitCast, a4, a1[6], a1[7]);
  v7 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v7)
  {
    v8 = *a1;
    v9 = *a1 + 16 * v7;
    v10 = (unsigned __int8 **)(ZExtOrBitCast + 48);
    do
    {
      v11 = *(_DWORD *)v8;
      v12 = *(unsigned __int8 **)(v8 + 8);
      if (v12)
      {
        if (!v11)
        {
          v25 = *(unsigned __int8 **)(v8 + 8);
          llvm::MetadataTracking::track((uint64_t)&v25, v12, 2);
LABEL_15:
          if (&v25 == v10)
          {
            if (v25)
              llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
          }
          else
          {
            if (*v10)
              llvm::MetadataTracking::untrack((uint64_t)(ZExtOrBitCast + 48), *v10);
            v13 = v25;
            *v10 = v25;
            if (v13)
              llvm::MetadataTracking::retrack((uint64_t)&v25, v13, (uint64_t)(ZExtOrBitCast + 48));
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (!*v10 && (ZExtOrBitCast[23] & 0x20) == 0)
          goto LABEL_12;
        if (!v11)
        {
          v25 = 0;
          goto LABEL_15;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)ZExtOrBitCast, v11, (llvm::MDNode *)v12);
LABEL_12:
      v8 += 16;
    }
    while (v8 != v9);
  }
  return ZExtOrBitCast;
}

llvm::Value *sub_1C509CCE8(uint64_t *a1, uint64_t *a2, uint64_t a3, __int16 a4, __int16 a5)
{
  char v6;
  char v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  _WORD v27[20];
  unsigned __int8 *v28;

  v6 = a4;
  if ((a4 & 0xFF00) == 0)
  {
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 272, *a2);
    v6 = v10;
  }
  v11 = (char *)operator new(0x80uLL);
  v12 = v11;
  *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 8) = **(_QWORD **)*a2 + 1576;
  v13 = (llvm::Value *)(v11 + 64);
  *((_QWORD *)v11 + 3) = v11 + 64;
  *((_QWORD *)v11 + 7) = v11 + 64;
  *((_QWORD *)v11 + 9) = 0;
  v11[80] = 61;
  v11[81] = 0;
  *((_DWORD *)v11 + 21) = 2;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *((_DWORD *)v11 + 30) = 0;
  v14 = a2 + 1;
  v15 = a2[1];
  *(_QWORD *)v11 = a2;
  *((_QWORD *)v11 + 1) = v15;
  if (v15)
    *(_QWORD *)(v15 + 16) = v11 + 8;
  *((_QWORD *)v11 + 2) = v14;
  *v14 = v11;
  *((_QWORD *)v11 + 4) = a3;
  if (a3)
  {
    v18 = *(_QWORD *)(a3 + 8);
    v17 = (_QWORD *)(a3 + 8);
    v16 = v18;
    *((_QWORD *)v11 + 5) = v18;
    if (v18)
      *(_QWORD *)(v16 + 16) = v11 + 40;
    *((_QWORD *)v11 + 6) = v17;
    *v17 = v11 + 32;
  }
  *((_WORD *)v11 + 41) = a5 & 0xFF81 | (2 * (v6 & 0x3F));
  v11[124] = 1;
  v27[16] = 257;
  (*(void (**)(uint64_t, llvm::Value *, _WORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v13, v27, a1[6], a1[7]);
  v19 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v19)
  {
    v21 = *a1;
    v22 = *a1 + 16 * v19;
    do
    {
      v23 = *(_DWORD *)v21;
      v24 = *(unsigned __int8 **)(v21 + 8);
      if (v24)
      {
        if (!v23)
        {
          v28 = *(unsigned __int8 **)(v21 + 8);
          llvm::MetadataTracking::track((uint64_t)&v28, v24, 2);
          v25 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_22;
        }
      }
      else
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v25 && (v12[87] & 0x20) == 0)
          goto LABEL_19;
        if (!v23)
        {
          v28 = 0;
LABEL_22:
          if (v25)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v25);
          v26 = v28;
          *((_QWORD *)v12 + 14) = v28;
          if (v26)
            llvm::MetadataTracking::retrack((uint64_t)&v28, v26, (uint64_t)(v12 + 112));
          goto LABEL_19;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v21, (llvm::MDNode *)v24);
LABEL_19:
      v21 += 16;
    }
    while (v21 != v22);
  }
  return v13;
}

BOOL sub_1C509CEFC(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C61DB390((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

_QWORD *sub_1C509D018(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DB560(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C509D0D0(uint64_t a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t result;
  int v7;

  v4 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 1, 74);
  v5 = llvm::Attribute::get(**(uint64_t ***)a1, 74, 1 << a2);
  v7 = 0;
  result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v5);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

uint64_t sub_1C509D15C(uint64_t a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t result;
  int v7;

  v4 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 2, 74);
  v5 = llvm::Attribute::get(**(uint64_t ***)a1, 74, 1 << a2);
  v7 = 1;
  result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v5);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

uint64_t sub_1C509D1E8(uint64_t a1, uint64_t a2, llvm *this)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t *v11;
  llvm::Type *v12;
  int v13;
  llvm::Type *v14;
  uint64_t **v15;
  llvm::Constant *v16;
  llvm::Type *v17;
  uint64_t v18;
  int v19;
  uint64_t **v20;
  const llvm::Value *v21;
  llvm **v22;
  int v23;
  llvm::APFloatBase *SplatValue;
  uint64_t v25;
  uint64_t v26;
  uint64_t ***v27;
  unsigned int v28;
  llvm::APFloatBase *v30;
  llvm::APInt *v31;
  unsigned int v32;
  llvm *v33;
  llvm::APFloatBase *v34;
  unsigned int *v35;
  llvm::APInt *v36;
  unsigned int v37;
  llvm::Value **v38;
  char v39;
  llvm::Type *v40;
  int v41;
  llvm::GetElementPtrInst *v42;
  uint64_t v43;
  llvm::Constant *v44;
  llvm::Type *v45;
  uint64_t **v46;
  llvm::Value **v47;
  llvm::Value *v48;
  llvm::GetElementPtrInst *v49;
  llvm::Value **v50;
  uint64_t v51;
  llvm::Constant *v52;
  llvm::Type *v53;
  llvm::Value *v54;
  llvm::Constant *v55;
  llvm::Type **v56;
  uint64_t v57;
  llvm::Type *v58;
  uint64_t *v59;
  void (**v60)(void);
  llvm *v61;
  llvm::Value **NullValue;
  llvm::Type **v63;
  uint64_t v64;
  llvm::Type *v65;
  llvm::GetElementPtrInst *v66;
  llvm::Value *v67;
  uint64_t TypeAtIndex;
  _BYTE v69[32];
  __int16 v70;
  _QWORD v71[3];
  _QWORD *v72;
  void *v73[2];
  _BYTE v74[120];
  llvm **v75;
  uint64_t v76;
  _QWORD v77[4];

  v77[2] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)this + 16);
  if (this && v6 == 62)
  {
    v7 = *((_DWORD *)this + 5);
    if ((v7 & 0x7FFFFFE) == 0 || *(_QWORD *)(a2 + 40) != *((_QWORD *)this + 5))
      return 0;
    if ((v7 & 0x40000000) != 0)
    {
      v9 = (char *)*((_QWORD *)this - 1);
      v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      v8 = v7 & 0x7FFFFFF;
      v9 = (char *)this - 32 * v8;
    }
    v75 = (llvm **)v77;
    v76 = 0x200000000;
    sub_1C509DA3C((uint64_t)&v75, v9, &v9[32 * v8]);
    v22 = v75;
    v23 = *(_DWORD *)(*(_QWORD *)*v75 + 8) & 0xFE;
    if (v23 == 18)
    {
      SplatValue = llvm::getSplatValue(*v75, v21);
      *v75 = SplatValue;
      v22 = v75;
      if (!*v75)
        goto LABEL_53;
    }
    v25 = (v76 - 1);
    if (v25 >= 2)
    {
      v26 = 1;
      while (1)
      {
        v27 = (uint64_t ***)v75[v26];
        v28 = *((unsigned __int8 *)v27 + 16);
        if (!v27 || v28 > 0x14)
          goto LABEL_53;
        if (((_DWORD)(*v27)[1] & 0xFE) == 0x12)
        {
          v30 = llvm::Constant::getSplatValue(v75[v26], 0);
          v27 = (uint64_t ***)v30;
          if (!v30)
          {
            v39 = 0;
            goto LABEL_69;
          }
          v28 = *((unsigned __int8 *)v30 + 16);
        }
        if (v28 != 16)
          goto LABEL_53;
        v31 = (llvm::APInt *)(v27 + 3);
        v32 = *((_DWORD *)v27 + 8);
        if (v32 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v31) != v32)
            goto LABEL_53;
        }
        else if (*(_QWORD *)v31)
        {
          goto LABEL_53;
        }
        v75[v26++] = (llvm *)v27;
        if (v25 == v26)
        {
          v22 = v75;
          break;
        }
      }
    }
    v33 = v22[v25];
    if ((*(_DWORD *)(*(_QWORD *)v33 + 8) & 0xFE) == 0x12)
    {
      v34 = llvm::getSplatValue(v33, v21);
      if (v34)
      {
        v35 = (unsigned int *)v34;
        if (*((_BYTE *)v34 + 16) != 16)
        {
LABEL_42:
          v75[v25] = (llvm *)v35;
          goto LABEL_54;
        }
        v36 = (llvm::APFloatBase *)((char *)v34 + 24);
        v37 = v35[8];
        if (v37 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v36) != v37)
            goto LABEL_42;
        }
        else if (*(_QWORD *)v36)
        {
          goto LABEL_42;
        }
      }
    }
    if (v23 != 18 && (_DWORD)v76 == 2)
    {
LABEL_53:
      v39 = 0;
      v27 = 0;
      goto LABEL_69;
    }
LABEL_54:
    v40 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)this + 32);
    v41 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    sub_1C4773D54((uint64_t)v73, a2, 0, 0, 0);
    v42 = (llvm::GetElementPtrInst *)*((_QWORD *)this + 8);
    v43 = *(_QWORD *)*v75;
    if ((*(_DWORD *)(v43 + 8) & 0xFE) == 0x12)
      v43 = **(_QWORD **)(v43 + 16);
    llvm::DataLayout::getIndexType(*(llvm::DataLayout **)(a1 + 720), (llvm::Type *)v43);
    v46 = (uint64_t **)v44;
    v47 = (llvm::Value **)v75[v25];
    v48 = *v75;
    if ((*((_DWORD *)*v47 + 2) & 0xFE) == 0x12)
    {
      if ((_DWORD)v76 != 2)
      {
        v61 = *v75;
        NullValue = llvm::Constant::getNullValue(v44, v45);
        v75[v25] = (llvm *)NullValue;
        v70 = 257;
        v48 = (llvm::Value *)sub_1C509D7B0((uint64_t *)v73, v42, (uint64_t *)v61, (llvm::Value *)(v75 + 1), v76 - 1, (uint64_t)v69);
        if ((_DWORD)v76 != 1)
        {
          v63 = v75 + 2;
          v64 = 8 * v76 - 16;
          do
          {
            if (!v64)
              break;
            v65 = *v63++;
            v66 = v42;
            v67 = v48;
            TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex(v66, v65, v48);
            v48 = v67;
            v42 = (llvm::GetElementPtrInst *)TypeAtIndex;
            v64 -= 8;
          }
          while (TypeAtIndex);
        }
      }
      v70 = 257;
      v49 = v42;
      v50 = v47;
    }
    else
    {
      v70 = 257;
      v51 = sub_1C509D7B0((uint64_t *)v73, v42, (uint64_t *)v48, (llvm::Value *)(v75 + 1), v76 - 1, (uint64_t)v69);
      if (v41 == 19)
        llvm::ScalableVectorType::get(v46, v40);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v46, v40);
      v55 = v52;
      if ((_DWORD)v76 != 1)
      {
        v56 = v75 + 2;
        v57 = 8 * v76 - 16;
        do
        {
          if (!v57)
            break;
          v58 = *v56++;
          v42 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(v42, v58, v54);
          v57 -= 8;
        }
        while (v42);
      }
      v50 = llvm::Constant::getNullValue(v55, v53);
      v70 = 257;
      v49 = v42;
      v48 = (llvm::Value *)v51;
    }
    v27 = sub_1C4867B70((uint64_t *)v73, v49, (uint64_t *)v48, (uint64_t)v50, (uint64_t)v69);
    if (v73[0] != v74)
      free(v73[0]);
    v39 = 1;
LABEL_69:
    if (v75 != v77)
      free(v75);
    if ((v39 & 1) != 0)
      goto LABEL_72;
    return 0;
  }
  if (v6 < 0x15)
    return 0;
  result = (uint64_t)llvm::getSplatValue(this, (const llvm::Value *)a2);
  if (!result)
    return result;
  v11 = (uint64_t *)result;
  v12 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)this + 32);
  v13 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  sub_1C4773D54((uint64_t)v73, a2, 0, 0, 0);
  v14 = (llvm::Type *)*v11;
  if ((*(_DWORD *)(*v11 + 8) & 0xFE) == 0x12)
    v14 = (llvm::Type *)**((_QWORD **)v14 + 2);
  llvm::DataLayout::getIndexType(*(llvm::DataLayout **)(a1 + 720), v14);
  if (v13 == 19)
    llvm::ScalableVectorType::get(v15, v12);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v15, v12);
  if (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) == 184)
  {
    v18 = *(_QWORD *)a2;
  }
  else
  {
    v19 = *(_DWORD *)(a2 + 20);
    if ((v19 & 0x40000000) != 0)
      v20 = *(uint64_t ***)(a2 - 8);
    else
      v20 = (uint64_t **)(a2 - 32 * (v19 & 0x7FFFFFF));
    v18 = **v20;
  }
  if ((*(_DWORD *)(v18 + 8) & 0xFE) == 0x12)
    v18 = **(_QWORD **)(v18 + 16);
  v38 = llvm::Constant::getNullValue(v16, v17);
  v70 = 257;
  v27 = sub_1C4867B70((uint64_t *)v73, (llvm::GetElementPtrInst *)v18, v11, (uint64_t)v38, (uint64_t)v69);
  if (v73[0] != v74)
    free(v73[0]);
LABEL_72:
  llvm::User::replaceUsesOfWith((llvm::User *)a2, this, (llvm::Value *)v27);
  if (!*((_QWORD *)this + 1))
  {
    v59 = *(uint64_t **)(a1 + 72);
    v71[0] = &off_1E81408C0;
    v71[1] = a1;
    v72 = v71;
    llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)this, v59, 0, v71);
    if (v72 == v71)
    {
      v60 = (void (**)(void))(v71[0] + 32);
      goto LABEL_77;
    }
    if (v72)
    {
      v60 = (void (**)(void))(*v72 + 40);
LABEL_77:
      (*v60)();
    }
  }
  return 1;
}

uint64_t sub_1C509D7B0(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::Value *a4, uint64_t a5, uint64_t a6)
{
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  llvm::Value *v17;
  uint64_t v18;
  unsigned int v19;
  llvm::Type **v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _WORD v39[20];
  unsigned __int8 *v40;

  TypeAtIndex = a2;
  v12 = (*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, uint64_t *, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)a1[9] + 48))(a1[9], a2, a3, a4, a5, 0);
  if (!v12)
  {
    v14 = (a5 + 1);
    v39[16] = 257;
    v15 = operator new(32 * v14 + 80);
    v12 = (uint64_t)&v15[4 * v14];
    v16 = v14 & 0x7FFFFFF;
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0x38000000 | v14 & 0x7FFFFFF;
    if ((_DWORD)a5 != -1)
    {
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        v15[3] = v12;
        v15 += 4;
      }
      while (v15 != (_QWORD *)v12);
    }
    sub_1C4774650(TypeAtIndex, a3, a4, a5);
    *(_QWORD *)v12 = v18;
    *(_QWORD *)(v12 + 8) = 0;
    v19 = *(_DWORD *)(v12 + 20) & 0xC0000000 | v16;
    *(_DWORD *)(v12 + 16) = 62;
    *(_DWORD *)(v12 + 20) = v19;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_DWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 64) = TypeAtIndex;
    if (a5)
    {
      v20 = (llvm::Type **)((char *)a4 + 8);
      v21 = 8 * a5 - 8;
      do
      {
        if (!v21)
          break;
        v22 = *v20++;
        TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v22, v17);
        v21 -= 8;
      }
      while (TypeAtIndex);
      v16 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
    }
    *(_QWORD *)(v12 + 72) = TypeAtIndex;
    v23 = (uint64_t **)(v12 - 32 * v16);
    if (*v23)
    {
      v35 = v12 - 32 * v16;
      v37 = *(_QWORD **)(v35 + 16);
      v36 = (_QWORD *)(v35 + 16);
      *v37 = *(v36 - 1);
      v38 = *(v36 - 1);
      if (v38)
        *(_QWORD *)(v38 + 16) = *v36;
    }
    *v23 = a3;
    if (a3)
    {
      v26 = a3[1];
      v25 = (uint64_t ***)(a3 + 1);
      v24 = v26;
      v27 = v12 - 32 * v16;
      *(_QWORD *)(v27 + 8) = v26;
      if (v26)
        *(_QWORD *)(v24 + 16) = v27 + 8;
      *(_QWORD *)(v27 + 16) = v25;
      *v25 = v23;
    }
    sub_1C5382FD4((uint64_t)&v40, (uint64_t *)a4, (uint64_t *)a4 + a5, v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
    llvm::Value::setName((uint64_t ***)v12, (uint64_t)v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, a6, a1[6], a1[7]);
    v28 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v28)
    {
      v29 = *a1;
      v30 = *a1 + 16 * v28;
      do
      {
        v31 = *(_DWORD *)v29;
        v32 = *(unsigned __int8 **)(v29 + 8);
        if (v32)
        {
          if (!v31)
          {
            v40 = *(unsigned __int8 **)(v29 + 8);
            llvm::MetadataTracking::track((uint64_t)&v40, v32, 2);
            v33 = *(unsigned __int8 **)(v12 + 48);
            goto LABEL_27;
          }
        }
        else
        {
          v33 = *(unsigned __int8 **)(v12 + 48);
          if (!v33 && (*(_BYTE *)(v12 + 23) & 0x20) == 0)
            goto LABEL_24;
          if (!v31)
          {
            v40 = 0;
LABEL_27:
            if (v33)
              llvm::MetadataTracking::untrack(v12 + 48, v33);
            v34 = v40;
            *(_QWORD *)(v12 + 48) = v40;
            if (v34)
              llvm::MetadataTracking::retrack((uint64_t)&v40, v34, v12 + 48);
            goto LABEL_24;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v12, *(_DWORD *)v29, (llvm::MDNode *)v32);
LABEL_24:
        v29 += 16;
      }
      while (v29 != v30);
    }
  }
  return v12;
}

uint64_t sub_1C509DA3C(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + ((a3 - a2) >> 5);
  if (v5 > *(unsigned int *)(result + 12))
  {
    v10 = a3 - a2;
    v11 = result;
    v8 = a3;
    v9 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v5, 8);
    a2 = v9;
    v3 = v10;
    a3 = v8;
    result = v11;
    v4 = *(unsigned int *)(v11 + 8);
  }
  if (a2 != a3)
  {
    v6 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v7 = *(_QWORD *)a2;
      a2 += 32;
      *v6++ = v7;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 5);
  return result;
}

void sub_1C509DACC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C509DAE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81408C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C509DB14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81408C0;
  a2[1] = v2;
  return result;
}

void sub_1C509DB30(uint64_t a1, unint64_t *a2)
{
  sub_1C509C6D4(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_1C509DB3C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  result = 0;
  v21[4] = *MEMORY[0x1E0C80C00];
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5 || *(_QWORD *)(v5 + 8))
      return 0;
    result = llvm::isSafeToSpeculativelyExecute(a2, 0, 0, 0);
    if ((_DWORD)result)
    {
      v6 = *(_DWORD *)(a2 + 20);
      if ((v6 & 0x40000000) != 0)
      {
        v8 = *(uint64_t **)(a2 - 8);
        v7 = v6 & 0x7FFFFFF;
      }
      else
      {
        v7 = v6 & 0x7FFFFFF;
        v8 = (uint64_t *)(a2 - 32 * v7);
      }
      v19 = v21;
      v20 = 0x400000000;
      if (v7 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v7, 8);
        v9 = v20;
        v11 = v19;
        v10 = v20;
      }
      else
      {
        v9 = 0;
        if (!v7)
        {
          v15 = v21;
LABEL_17:
          LODWORD(v20) = v9 + v7;
          v16 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a1 + 72))(*a1, a2, v15);
          v18 = v17;
          if (v19 != v21)
            free(v19);
          if (v18)
            return v18 >= 0;
          else
            return v16 > 3;
        }
        v10 = 0;
        v11 = v21;
      }
      v12 = 32 * v7;
      v13 = &v11[v10];
      do
      {
        v14 = *v8;
        v8 += 4;
        *v13++ = v14;
        v12 -= 32;
      }
      while (v12);
      v15 = v19;
      goto LABEL_17;
    }
  }
  return result;
}

void sub_1C509DCCC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C509DCE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8140908;
  result[1] = v3;
  return result;
}

uint64_t sub_1C509DD14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8140908;
  a2[1] = v2;
  return result;
}

void sub_1C509DD30(uint64_t a1, unint64_t *a2)
{
  sub_1C509C6D4(*(_QWORD *)(a1 + 8), *a2);
}

void sub_1C509DD40()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C509DD54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8140950;
  result[1] = v3;
  return result;
}

uint64_t sub_1C509DD88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8140950;
  a2[1] = v2;
  return result;
}

void sub_1C509DDA4(uint64_t a1, unint64_t *a2)
{
  sub_1C509C6D4(*(_QWORD *)(a1 + 8), *a2);
}

BOOL sub_1C509DDB0(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 244;
}

uint64_t *sub_1C509DDFC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *i;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  BOOL v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int64_t v121;
  int64_t v122;
  uint64_t *v123;
  int64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int64_t v152;
  uint64_t *v153;
  uint64_t v154;
  int64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  int v210;
  int v211;
  int64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  int v219;
  int v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;

  v221 = result;
LABEL_2:
  v209 = a2 - 2;
  v217 = a2;
  v200 = a2 - 6;
  v201 = a2 - 4;
  i = v221;
  while (2)
  {
    v9 = (char *)a2 - (char *)i;
    v10 = ((char *)a2 - (char *)i) >> 4;
    v221 = i;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v97 = *(a2 - 2);
        v98 = *i;
        if (v97 == *i)
          return result;
        v99 = *(a2 - 1);
        v100 = i[1];
        if (v99 == v100)
        {
          v198 = *a3 + 664;
          v223 = *(a2 - 2);
          v199 = *((_DWORD *)sub_1C61DAFE8(v198, &v223) + 2);
          v222 = v98;
          result = sub_1C61DAFE8(v198, &v222);
          if (v199 >= *((_DWORD *)result + 2))
            return result;
          v101 = i;
          v98 = *i;
          v100 = i[1];
          v97 = *(a2 - 2);
          v99 = *(a2 - 1);
        }
        else
        {
          if (v99 >= v100)
            return result;
          v101 = i;
        }
        *v101 = v97;
        *(a2 - 2) = v98;
        v101[1] = v99;
        *(a2 - 1) = v100;
        return result;
      case 3uLL:
        return sub_1C509F088(i, i + 2, v209, a3);
      case 4uLL:
        return sub_1C509F61C(i, i + 2, i + 4, v209, a3);
      case 5uLL:
        return sub_1C509EE44(i, i + 2, i + 4, i + 6, v209, a3);
      default:
        v11 = i;
        if (v9 <= 383)
        {
          v102 = i + 2;
          v104 = i == a2 || v102 == a2;
          if ((a5 & 1) != 0)
          {
            if (v104)
              return result;
            v105 = 0;
            v106 = i;
LABEL_131:
            v107 = v106;
            v106 = v102;
            v108 = v107[2];
            v109 = *v107;
            if (v108 == *v107)
              goto LABEL_146;
            v110 = v107[3];
            v111 = v107[1];
            if (v110 == v111)
            {
              v118 = *a3 + 664;
              v223 = v107[2];
              v119 = *((_DWORD *)sub_1C61DAFE8(v118, &v223) + 2);
              v222 = v109;
              v120 = v118;
              a2 = v217;
              result = sub_1C61DAFE8(v120, &v222);
              if (v119 >= *((_DWORD *)result + 2))
                goto LABEL_146;
              v108 = *v106;
              v110 = v107[3];
              v109 = *v107;
              v111 = v107[1];
            }
            else if (v110 >= v111)
            {
              goto LABEL_146;
            }
            v107[2] = v109;
            v106[1] = v111;
            v112 = v221;
            if (v107 == v221)
              goto LABEL_145;
            v113 = v105;
            v112 = v221;
            while (1)
            {
              v112 = (uint64_t *)((char *)v112 + v113);
              v114 = *(v112 - 2);
              if (v108 == v114)
                goto LABEL_144;
              v115 = *(v112 - 1);
              if (v110 == v115)
              {
                v117 = *a3 + 664;
                v223 = v108;
                v210 = *((_DWORD *)sub_1C61DAFE8(v117, &v223) + 2);
                v222 = v114;
                result = sub_1C61DAFE8(v117, &v222);
                if (v210 >= *((_DWORD *)result + 2))
                {
LABEL_143:
                  v112 = v107;
LABEL_144:
                  a2 = v217;
LABEL_145:
                  *v112 = v108;
                  v112[1] = v110;
LABEL_146:
                  v102 = v106 + 2;
                  v105 += 16;
                  if (v106 + 2 == a2)
                    return result;
                  goto LABEL_131;
                }
                v114 = *(v112 - 2);
                v115 = *(v112 - 1);
              }
              else if (v110 >= v115)
              {
                goto LABEL_143;
              }
              v107 -= 2;
              v112 = v221;
              v116 = (uint64_t *)((char *)v221 + v113);
              *v116 = v114;
              v116[1] = v115;
              v113 -= 16;
              if (!v113)
                goto LABEL_144;
            }
          }
          if (v104)
            return result;
LABEL_221:
          v184 = *v102;
          v185 = v221;
          v186 = *v221;
          if (*v102 == *v221)
            goto LABEL_236;
          v187 = v221[3];
          v188 = v221[1];
          if (v187 == v188)
          {
            v195 = *a3 + 664;
            v223 = *v102;
            v196 = *((_DWORD *)sub_1C61DAFE8(v195, &v223) + 2);
            v222 = v186;
            v197 = v195;
            a2 = v217;
            result = sub_1C61DAFE8(v197, &v222);
            v185 = v221;
            if (v196 >= *((_DWORD *)result + 2))
              goto LABEL_236;
            v184 = *v102;
            v187 = v221[3];
            v186 = *v221;
            v188 = v221[1];
          }
          else
          {
            v185 = v221;
            if (v187 >= v188)
              goto LABEL_236;
          }
          *v102 = v186;
          v102[1] = v188;
          v189 = v221;
          v190 = *(v221 - 2);
          if (v184 == v190)
            goto LABEL_235;
          v189 = v221;
          while (1)
          {
            v191 = *(v189 - 1);
            if (v187 == v191)
            {
              v193 = *a3 + 664;
              v223 = v184;
              v194 = *((_DWORD *)sub_1C61DAFE8(v193, &v223) + 2);
              v222 = v190;
              result = sub_1C61DAFE8(v193, &v222);
              if (v194 >= *((_DWORD *)result + 2))
              {
                a2 = v217;
LABEL_235:
                *v189 = v184;
                v189[1] = v187;
                v185 = v221;
LABEL_236:
                v102 += 2;
                v221 = v185 + 2;
                if (v102 == a2)
                  return result;
                goto LABEL_221;
              }
              v190 = *(v189 - 2);
              a2 = v217;
            }
            else if (v187 >= v191)
            {
              goto LABEL_235;
            }
            v192 = *(v189 - 1);
            *v189 = v190;
            v189[1] = v192;
            v190 = *(v189 - 4);
            v189 -= 2;
            if (v184 == v190)
              goto LABEL_235;
          }
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v121 = (v10 - 2) >> 1;
          v122 = v121;
          v123 = i;
          while (1)
          {
            v124 = v122;
            if (v121 < v122)
              goto LABEL_182;
            v125 = (2 * v122) | 1;
            v126 = &v123[2 * v125];
            v127 = 2 * v122 + 2;
            if (v127 < (uint64_t)v10)
            {
              v128 = v126[2];
              if (*v126 != v128)
              {
                v129 = v126[1];
                v130 = v126[3];
                if (v129 != v130)
                {
                  if (v129 >= v130)
                    goto LABEL_158;
LABEL_157:
                  v126 += 2;
                  v125 = v127;
                  goto LABEL_158;
                }
                v154 = *a3 + 664;
                v223 = *v126;
                v155 = v122;
                v214 = *((_DWORD *)sub_1C61DAFE8(v154, &v223) + 2);
                v222 = v128;
                result = sub_1C61DAFE8(v154, &v222);
                v124 = v155;
                v123 = v221;
                if (v214 < *((_DWORD *)result + 2))
                  goto LABEL_157;
              }
            }
LABEL_158:
            v131 = &v123[2 * v124];
            v132 = *v126;
            v133 = v126[1];
            v134 = *v131;
            v136 = v131 + 1;
            v135 = v131[1];
            if (*v126 == *v131)
            {
              v134 = *v126;
            }
            else if (v133 == v135)
            {
              v151 = *a3 + 664;
              v223 = *v126;
              v152 = v124;
              v153 = &v123[2 * v124];
              v213 = *((_DWORD *)sub_1C61DAFE8(v151, &v223) + 2);
              v222 = v134;
              result = sub_1C61DAFE8(v151, &v222);
              v131 = v153;
              v124 = v152;
              v123 = v221;
              if (v213 < *((_DWORD *)result + 2))
                goto LABEL_182;
              v134 = *v131;
              v135 = *v136;
              v132 = *v126;
              v133 = v126[1];
            }
            else if (v133 < v135)
            {
              goto LABEL_182;
            }
            *v131 = v132;
            *v136 = v133;
            while (1)
            {
              if (v121 < v125)
                goto LABEL_181;
              v137 = v126;
              v138 = 2 * v125;
              v125 = (2 * v125) | 1;
              v126 = &v123[2 * v125];
              v139 = v138 + 2;
              if (v138 + 2 < (uint64_t)v10)
              {
                v140 = v126[2];
                if (*v126 == v140)
                {
                  v123 = v221;
                }
                else
                {
                  v141 = v126[1];
                  v142 = v126[3];
                  v143 = v141 < v142;
                  if (v141 == v142)
                  {
                    v149 = *a3 + 664;
                    v203 = v149;
                    v207 = v135;
                    v223 = *v126;
                    v212 = v124;
                    v150 = *((_DWORD *)sub_1C61DAFE8(v149, &v223) + 2);
                    v222 = v140;
                    result = sub_1C61DAFE8(v203, &v222);
                    v135 = v207;
                    v124 = v212;
                    v143 = v150 < *((_DWORD *)result + 2);
                    v121 = (v10 - 2) >> 1;
                  }
                  v123 = v221;
                  if (v143)
                  {
                    v126 += 2;
                    v125 = v139;
                  }
                }
              }
              v144 = *v126;
              v145 = v126[1];
              if (*v126 == v134)
              {
                v144 = v134;
                goto LABEL_178;
              }
              if (v145 == v135)
                break;
              if (v145 < v135)
              {
                v126 = v137;
                goto LABEL_181;
              }
LABEL_178:
              *v137 = v144;
              v137[1] = v145;
            }
            v146 = v135;
            v147 = v124;
            v148 = *a3 + 664;
            v206 = v148;
            v223 = *v126;
            v211 = *((_DWORD *)sub_1C61DAFE8(v148, &v223) + 2);
            v222 = v134;
            result = sub_1C61DAFE8(v206, &v222);
            if (v211 >= *((_DWORD *)result + 2))
            {
              v144 = *v126;
              v145 = v126[1];
              v124 = v147;
              v135 = v146;
              goto LABEL_178;
            }
            v126 = v137;
            v124 = v147;
            v135 = v146;
LABEL_181:
            *v126 = v134;
            v126[1] = v135;
LABEL_182:
            v122 = v124 - 1;
            if (!v124)
            {
              v156 = v217;
              while (1)
              {
                v157 = 0;
                v158 = v221;
                v159 = *v221;
                v160 = v221[1];
                do
                {
                  v161 = v158;
                  v158 += 2 * v157 + 2;
                  v162 = 2 * v157;
                  v157 = (2 * v157) | 1;
                  v163 = v162 + 2;
                  if (v162 + 2 < (uint64_t)v10)
                  {
                    v164 = v158[2];
                    if (*v158 != v164)
                    {
                      v165 = v158[1];
                      v166 = v158[3];
                      if (v165 != v166)
                      {
                        if (v165 >= v166)
                          goto LABEL_195;
LABEL_194:
                        v158 += 2;
                        v157 = v163;
                        goto LABEL_195;
                      }
                      v215 = v159;
                      v218 = v156;
                      v167 = *a3 + 664;
                      v223 = *v158;
                      v208 = v160;
                      v204 = *((_DWORD *)sub_1C61DAFE8(v167, &v223) + 2);
                      v222 = v164;
                      v168 = v167;
                      v156 = v218;
                      result = sub_1C61DAFE8(v168, &v222);
                      v160 = v208;
                      v159 = v215;
                      if (v204 < *((_DWORD *)result + 2))
                        goto LABEL_194;
                    }
                  }
LABEL_195:
                  *v161 = *v158;
                  v161[1] = v158[1];
                }
                while (v157 <= (uint64_t)((v10 - 2) >> 1));
                v169 = v156 - 2;
                if (v158 == v156 - 2)
                {
                  *v158 = v159;
                  v158[1] = v160;
                }
                else
                {
                  *v158 = *(v156 - 2);
                  v158[1] = *(v156 - 1);
                  *(v156 - 2) = v159;
                  *(v156 - 1) = v160;
                  v170 = (char *)v158 - (char *)v221 + 16;
                  if (v170 >= 17)
                  {
                    v171 = ((unint64_t)v170 >> 4) - 2;
                    v172 = v171 >> 1;
                    v173 = &v221[2 * (v171 >> 1)];
                    v174 = *v173;
                    v175 = *v158;
                    if (*v173 != *v158)
                    {
                      v176 = v173[1];
                      v177 = v158[1];
                      if (v176 == v177)
                      {
                        v183 = *a3 + 664;
                        v223 = *v173;
                        v220 = *((_DWORD *)sub_1C61DAFE8(v183, &v223) + 2);
                        v222 = v175;
                        result = sub_1C61DAFE8(v183, &v222);
                        if (v220 < *((_DWORD *)result + 2))
                        {
                          v175 = *v158;
                          v177 = v158[1];
                          v174 = *v173;
                          v176 = v173[1];
LABEL_204:
                          *v158 = v174;
                          v158[1] = v176;
                          if (v171 >= 2)
                          {
                            while (1)
                            {
                              v179 = v172 - 1;
                              v172 = (v172 - 1) >> 1;
                              v178 = &v221[2 * v172];
                              v180 = *v178;
                              if (*v178 == v175)
                                break;
                              v181 = v178[1];
                              if (v181 == v177)
                              {
                                v182 = *a3 + 664;
                                v216 = v182;
                                v223 = *v178;
                                v219 = *((_DWORD *)sub_1C61DAFE8(v182, &v223) + 2);
                                v222 = v175;
                                result = sub_1C61DAFE8(v216, &v222);
                                if (v219 >= *((_DWORD *)result + 2))
                                  break;
                                v180 = *v178;
                                v181 = v178[1];
                              }
                              else if (v181 >= v177)
                              {
                                break;
                              }
                              *v173 = v180;
                              v173[1] = v181;
                              v173 = &v221[2 * v172];
                              if (v179 <= 1)
                                goto LABEL_206;
                            }
                          }
                          v178 = v173;
LABEL_206:
                          *v178 = v175;
                          v178[1] = v177;
                        }
                      }
                      else if (v176 < v177)
                      {
                        goto LABEL_204;
                      }
                    }
                  }
                }
                v156 = v169;
                v34 = (uint64_t)v10-- <= 2;
                if (v34)
                  return result;
              }
            }
          }
        }
        v12 = v10 >> 1;
        v13 = &i[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C509F088(&v11[2 * (v10 >> 1)], v11, v209, a3);
        }
        else
        {
          sub_1C509F088(v11, &v11[2 * (v10 >> 1)], v209, a3);
          sub_1C509F088(v11 + 2, v13 - 2, v201, a3);
          sub_1C509F088(v11 + 4, &v11[2 * v12 + 2], v200, a3);
          result = sub_1C509F088(v13 - 2, &v11[2 * (v10 >> 1)], &v11[2 * v12 + 2], a3);
          v14 = *v11;
          v15 = v11[1];
          v16 = v13[1];
          *v11 = *v13;
          v11[1] = v16;
          *v13 = v14;
          v13[1] = v15;
        }
        v205 = a4 - 1;
        v17 = *v11;
        if ((a5 & 1) == 0)
        {
          v18 = v11[1];
          v19 = *a3;
          if (*(v11 - 2) != v17)
          {
            v20 = *(v11 - 1);
            if (v20 == v18)
            {
              v60 = v19 + 664;
              v223 = *(v11 - 2);
              v61 = *((_DWORD *)sub_1C61DAFE8(v19 + 664, &v223) + 2);
              v222 = v17;
              result = sub_1C61DAFE8(v60, &v222);
              v17 = *v11;
              if (v61 < *((_DWORD *)result + 2))
                goto LABEL_13;
              v18 = v11[1];
              v19 = *a3;
            }
            else if (v20 < v18)
            {
              goto LABEL_13;
            }
          }
          v62 = *(a2 - 2);
          if (v17 != v62)
          {
            v63 = *(a2 - 1);
            if (v18 == v63)
            {
              v71 = v19 + 664;
              v223 = v17;
              v72 = *((_DWORD *)sub_1C61DAFE8(v19 + 664, &v223) + 2);
              v222 = v62;
              result = sub_1C61DAFE8(v71, &v222);
              if (v72 < *((_DWORD *)result + 2))
              {
LABEL_66:
                v64 = v11 + 2;
                do
                {
                  do
                  {
                    i = v64;
                    v66 = *v64;
                    v64 += 2;
                    v65 = v66;
                  }
                  while (v17 == v66);
                  v67 = i[1];
                  v68 = v18 < v67;
                  if (v18 == v67)
                  {
                    v69 = *a3 + 664;
                    v223 = v17;
                    v70 = *((_DWORD *)sub_1C61DAFE8(v69, &v223) + 2);
                    v222 = v65;
                    result = sub_1C61DAFE8(v69, &v222);
                    v68 = v70 < *((_DWORD *)result + 2);
                    a2 = v217;
                  }
                }
                while (!v68);
                goto LABEL_81;
              }
            }
            else if (v18 < v63)
            {
              goto LABEL_66;
            }
          }
          for (i = v11 + 2; i < a2; i += 2)
          {
            v73 = *i;
            if (v17 != *i)
            {
              v74 = i[1];
              if (v18 == v74)
              {
                v75 = *a3 + 664;
                v223 = v17;
                v76 = *((_DWORD *)sub_1C61DAFE8(v75, &v223) + 2);
                v222 = v73;
                result = sub_1C61DAFE8(v75, &v222);
                if (v76 < *((_DWORD *)result + 2))
                  break;
              }
              else if (v18 < v74)
              {
                break;
              }
            }
          }
LABEL_81:
          v77 = a2;
          if (i < a2)
          {
            v77 = v209;
            v78 = *v209;
            if (v17 != *v209)
            {
              v77 = v209;
              do
              {
                v79 = v77[1];
                if (v18 == v79)
                {
                  v81 = *a3 + 664;
                  v223 = v17;
                  v82 = *((_DWORD *)sub_1C61DAFE8(v81, &v223) + 2);
                  v222 = v78;
                  result = sub_1C61DAFE8(v81, &v222);
                  v34 = v82 < *((_DWORD *)result + 2);
                  a2 = v217;
                  if (!v34)
                    break;
                }
                else if (v18 >= v79)
                {
                  break;
                }
                v80 = *(v77 - 2);
                v77 -= 2;
                v78 = v80;
              }
              while (v17 != v80);
            }
          }
LABEL_106:
          while (i < v77)
          {
            v83 = *i;
            *i = *v77;
            *v77 = v83;
            v84 = i[1];
            i[1] = v77[1];
            v77[1] = v84;
            v85 = i + 2;
            do
            {
              while (1)
              {
                do
                {
                  i = v85;
                  v87 = *v85;
                  v85 += 2;
                  v86 = v87;
                }
                while (v17 == v87);
                v88 = i[1];
                if (v18 == v88)
                  break;
                if (v18 < v88)
                  goto LABEL_97;
              }
              v89 = *a3 + 664;
              v223 = v17;
              v90 = *((_DWORD *)sub_1C61DAFE8(v89, &v223) + 2);
              v222 = v86;
              result = sub_1C61DAFE8(v89, &v222);
              v34 = v90 < *((_DWORD *)result + 2);
              v11 = v221;
            }
            while (!v34);
LABEL_97:
            v92 = *(v77 - 2);
            v77 -= 2;
            v91 = v92;
            if (v17 != v92)
            {
              a2 = v217;
              while (1)
              {
                v93 = v77[1];
                if (v18 == v93)
                {
                  v95 = *a3 + 664;
                  v223 = v17;
                  v96 = *((_DWORD *)sub_1C61DAFE8(v95, &v223) + 2);
                  v222 = v91;
                  result = sub_1C61DAFE8(v95, &v222);
                  v34 = v96 < *((_DWORD *)result + 2);
                  a2 = v217;
                  if (!v34)
                    goto LABEL_106;
                }
                else if (v18 >= v93)
                {
                  goto LABEL_106;
                }
                v94 = *(v77 - 2);
                v77 -= 2;
                v91 = v94;
                if (v17 == v94)
                  goto LABEL_106;
              }
            }
            a2 = v217;
          }
          if (i - 2 != v11)
          {
            *v11 = *(i - 2);
            v11[1] = *(i - 1);
          }
          a5 = 0;
          *(i - 2) = v17;
          *(i - 1) = v18;
          a4 = v205;
          continue;
        }
LABEL_13:
        v22 = v11 + 2;
        v21 = v11[2];
        v23 = v11[1];
        if (v21 == v17)
          goto LABEL_29;
        v24 = v11;
        while (1)
        {
          v25 = v22;
          v26 = v22[1];
          if (v26 == v23)
            break;
          if (v26 >= v23)
            goto LABEL_21;
LABEL_17:
          v22 = v25 + 2;
          v21 = v25[2];
          v24 = v25;
          if (v21 == v17)
            goto LABEL_22;
        }
        v27 = *a3 + 664;
        v223 = v21;
        v28 = *((_DWORD *)sub_1C61DAFE8(v27, &v223) + 2);
        v222 = v17;
        if (v28 < *((_DWORD *)sub_1C61DAFE8(v27, &v222) + 2))
          goto LABEL_17;
        v24 = v25 - 2;
LABEL_21:
        v22 = v25;
LABEL_22:
        v29 = v209;
        if (v24 != v11)
        {
          do
          {
            do
            {
              v30 = v29;
              v32 = *v29;
              v29 -= 2;
              v31 = v32;
            }
            while (v32 == v17);
            v33 = v30[1];
            v34 = v33 < v23;
            if (v33 == v23)
            {
              v35 = *a3 + 664;
              v223 = v31;
              v36 = *((_DWORD *)sub_1C61DAFE8(v35, &v223) + 2);
              v222 = v17;
              v34 = v36 < *((_DWORD *)sub_1C61DAFE8(v35, &v222) + 2);
            }
          }
          while (!v34);
          goto LABEL_40;
        }
LABEL_29:
        v30 = v217;
        if (v22 < v217)
        {
          v37 = v209;
          do
          {
            while (1)
            {
              while (1)
              {
                v30 = v37;
                v39 = *v37;
                v37 -= 2;
                v38 = v39;
                if (v39 != v17)
                  break;
                if (v22 >= v30)
                  goto LABEL_40;
              }
              v40 = v30[1];
              if (v40 == v23)
                break;
              if (v22 >= v30 || v40 < v23)
                goto LABEL_40;
            }
            v41 = *a3 + 664;
            v223 = v38;
            v42 = *((_DWORD *)sub_1C61DAFE8(v41, &v223) + 2);
            v222 = v17;
            v43 = sub_1C61DAFE8(v41, &v222);
          }
          while (v22 < v30 && v42 >= *((_DWORD *)v43 + 2));
        }
LABEL_40:
        i = v22;
        if (v22 < v30)
        {
          i = v22;
          v44 = v30;
          do
          {
            v45 = *i;
            *i = *v44;
            *v44 = v45;
            v47 = i[2];
            i += 2;
            v46 = v47;
            v48 = *(i - 1);
            *(i - 1) = v44[1];
            v44[1] = v48;
            while (v46 != v17)
            {
              v49 = i[1];
              if (v49 == v23)
              {
                v51 = *a3 + 664;
                v223 = v46;
                v52 = *((_DWORD *)sub_1C61DAFE8(v51, &v223) + 2);
                v222 = v17;
                if (v52 >= *((_DWORD *)sub_1C61DAFE8(v51, &v222) + 2))
                  break;
              }
              else if (v49 >= v23)
              {
                break;
              }
              v50 = i[2];
              i += 2;
              v46 = v50;
            }
            v53 = v44 - 2;
            do
            {
              while (1)
              {
                do
                {
                  v44 = v53;
                  v55 = *v53;
                  v53 -= 2;
                  v54 = v55;
                }
                while (v55 == v17);
                v56 = v44[1];
                if (v56 == v23)
                  break;
                if (v56 < v23)
                  goto LABEL_54;
              }
              v57 = *a3 + 664;
              v223 = v54;
              v58 = *((_DWORD *)sub_1C61DAFE8(v57, &v223) + 2);
              v222 = v17;
            }
            while (v58 >= *((_DWORD *)sub_1C61DAFE8(v57, &v222) + 2));
LABEL_54:
            ;
          }
          while (i < v44);
        }
        if (i - 2 != v221)
        {
          *v221 = *(i - 2);
          v221[1] = *(i - 1);
        }
        *(i - 2) = v17;
        *(i - 1) = v23;
        a2 = v217;
        a4 = v205;
        if (v22 < v30)
        {
LABEL_60:
          result = (uint64_t *)sub_1C509DDFC(v221, i - 2, a3, v205, a5 & 1);
          a5 = 0;
          continue;
        }
        v59 = sub_1C509F318(v221, i - 2, a3);
        result = (uint64_t *)sub_1C509F318(i, v217, a3);
        if (!(_DWORD)result)
        {
          if (v59)
            continue;
          goto LABEL_60;
        }
        a2 = i - 2;
        if (!v59)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C509EE44(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  result = sub_1C509F61C(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  if (*a5 != *a4)
  {
    v15 = a5[1];
    v16 = a4[1];
    v17 = *a6;
    if (v15 == v16)
    {
      v30 = v17 + 664;
      v39 = *a5;
      v31 = *((_DWORD *)sub_1C61DAFE8(v17 + 664, &v39) + 2);
      v38 = v14;
      result = sub_1C61DAFE8(v30, &v38);
      if (v31 >= *((_DWORD *)result + 2))
        return result;
      v14 = *a4;
      v16 = a4[1];
      v13 = *a5;
      v15 = a5[1];
      v17 = *a6;
    }
    else if (v15 >= v16)
    {
      return result;
    }
    *a4 = v13;
    *a5 = v14;
    a4[1] = v15;
    a5[1] = v16;
    v18 = *a4;
    v19 = *a3;
    if (*a4 == *a3)
      return result;
    v20 = a4[1];
    v21 = a3[1];
    if (v20 == v21)
    {
      v32 = v17 + 664;
      v39 = *a4;
      v33 = *((_DWORD *)sub_1C61DAFE8(v17 + 664, &v39) + 2);
      v38 = v19;
      result = sub_1C61DAFE8(v32, &v38);
      if (v33 >= *((_DWORD *)result + 2))
        return result;
      v19 = *a3;
      v21 = a3[1];
      v18 = *a4;
      v20 = a4[1];
      v17 = *a6;
    }
    else if (v20 >= v21)
    {
      return result;
    }
    *a3 = v18;
    *a4 = v19;
    a3[1] = v20;
    a4[1] = v21;
    v22 = *a3;
    v23 = *a2;
    if (*a3 == *a2)
      return result;
    v24 = a3[1];
    v25 = a2[1];
    if (v24 == v25)
    {
      v34 = v17 + 664;
      v39 = *a3;
      v35 = *((_DWORD *)sub_1C61DAFE8(v17 + 664, &v39) + 2);
      v38 = v23;
      result = sub_1C61DAFE8(v34, &v38);
      if (v35 >= *((_DWORD *)result + 2))
        return result;
      v23 = *a2;
      v25 = a2[1];
      v22 = *a3;
      v24 = a3[1];
      v17 = *a6;
    }
    else if (v24 >= v25)
    {
      return result;
    }
    *a2 = v22;
    *a3 = v23;
    a2[1] = v24;
    a3[1] = v25;
    v26 = *a2;
    v27 = *a1;
    if (*a2 == *a1)
      return result;
    v28 = a2[1];
    v29 = a1[1];
    if (v28 != v29)
    {
      if (v28 >= v29)
        return result;
      goto LABEL_13;
    }
    v36 = v17 + 664;
    v39 = *a2;
    v37 = *((_DWORD *)sub_1C61DAFE8(v17 + 664, &v39) + 2);
    v38 = v27;
    result = sub_1C61DAFE8(v36, &v38);
    if (v37 < *((_DWORD *)result + 2))
    {
      v27 = *a1;
      v29 = a1[1];
      v26 = *a2;
      v28 = a2[1];
LABEL_13:
      *a1 = v26;
      *a2 = v27;
      a1[1] = v28;
      a2[1] = v29;
    }
  }
  return result;
}

uint64_t *sub_1C509F088(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v7 = result;
  v9 = *a2;
  v8 = a2[1];
  v10 = *result;
  v11 = *a4;
  if (*a2 == *result)
    goto LABEL_9;
  v12 = result[1];
  if (v8 != v12)
  {
    if (v8 < v12)
      goto LABEL_4;
LABEL_9:
    v19 = *a3;
    if (*a3 == v9)
      return result;
    v20 = a3[1];
    if (v20 == v8)
    {
      v25 = v11 + 664;
      v38 = *a3;
      v26 = *((_DWORD *)sub_1C61DAFE8(v11 + 664, &v38) + 2);
      v37 = v9;
      result = sub_1C61DAFE8(v25, &v37);
      if (v26 >= *((_DWORD *)result + 2))
        return result;
      v9 = *a2;
      v8 = a2[1];
      v19 = *a3;
      v20 = a3[1];
      v11 = *a4;
    }
    else if (v20 >= v8)
    {
      return result;
    }
    *a2 = v19;
    *a3 = v9;
    a2[1] = v20;
    a3[1] = v8;
    v21 = *a2;
    v22 = *v7;
    if (*a2 == *v7)
      return result;
    v23 = a2[1];
    v24 = v7[1];
    if (v23 == v24)
    {
      v29 = v11 + 664;
      v38 = *a2;
      v30 = *((_DWORD *)sub_1C61DAFE8(v11 + 664, &v38) + 2);
      v37 = v22;
      result = sub_1C61DAFE8(v29, &v37);
      if (v30 >= *((_DWORD *)result + 2))
        return result;
      v22 = *v7;
      v24 = v7[1];
      v21 = *a2;
      v23 = a2[1];
    }
    else if (v23 >= v24)
    {
      return result;
    }
    *v7 = v21;
    *a2 = v22;
    v7[1] = v23;
    a2[1] = v24;
    return result;
  }
  v17 = v11 + 664;
  v38 = *a2;
  v18 = *((_DWORD *)sub_1C61DAFE8(v11 + 664, &v38) + 2);
  v37 = v10;
  result = sub_1C61DAFE8(v17, &v37);
  v9 = *a2;
  v8 = a2[1];
  v11 = *a4;
  if (v18 >= *((_DWORD *)result + 2))
    goto LABEL_9;
LABEL_4:
  v13 = *a3;
  if (*a3 != v9)
  {
    v14 = a3[1];
    if (v14 == v8)
    {
      v27 = v11 + 664;
      v38 = *a3;
      v28 = *((_DWORD *)sub_1C61DAFE8(v11 + 664, &v38) + 2);
      v37 = v9;
      result = sub_1C61DAFE8(v27, &v37);
      if (v28 < *((_DWORD *)result + 2))
      {
        v13 = *a3;
        v14 = a3[1];
        goto LABEL_7;
      }
      v9 = *a2;
      v8 = a2[1];
      v11 = *a4;
    }
    else if (v14 < v8)
    {
LABEL_7:
      v15 = *v7;
      *v7 = v13;
      *a3 = v15;
      v16 = v7[1];
      v7[1] = v14;
      a3[1] = v16;
      return result;
    }
  }
  v31 = *v7;
  *v7 = v9;
  *a2 = v31;
  v32 = v7[1];
  v7[1] = v8;
  a2[1] = v32;
  v33 = *a3;
  if (*a3 != v31)
  {
    v34 = a3[1];
    if (v34 != v32)
    {
      if (v34 >= v32)
        return result;
      goto LABEL_26;
    }
    v35 = v11 + 664;
    v38 = *a3;
    v36 = *((_DWORD *)sub_1C61DAFE8(v11 + 664, &v38) + 2);
    v37 = v31;
    result = sub_1C61DAFE8(v35, &v37);
    if (v36 < *((_DWORD *)result + 2))
    {
      v31 = *a2;
      v32 = a2[1];
      v33 = *a3;
      v34 = a3[1];
LABEL_26:
      *a2 = v33;
      *a3 = v31;
      a2[1] = v34;
      a3[1] = v32;
    }
  }
  return result;
}

BOOL sub_1C509F318(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 2);
      v9 = *a1;
      if (v8 == *a1)
        return result;
      v10 = *(a2 - 1);
      v11 = a1[1];
      if (v10 == v11)
      {
        v30 = *a3 + 664;
        v37 = *(a2 - 2);
        v31 = *((_DWORD *)sub_1C61DAFE8(v30, &v37) + 2);
        v36 = v9;
        if (v31 >= *((_DWORD *)sub_1C61DAFE8(v30, &v36) + 2))
          return 1;
        v9 = *a1;
        v11 = a1[1];
        v4 = a2;
        v8 = *(a2 - 2);
        v10 = *(a2 - 1);
      }
      else if (v10 >= v11)
      {
        return result;
      }
      *a1 = v8;
      *(v4 - 2) = v9;
      a1[1] = v10;
      result = 1;
      *(v4 - 1) = v11;
      return result;
    case 3:
      sub_1C509F088(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1C509F61C(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1C509EE44(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v12 = a1 + 4;
      sub_1C509F088(a1, a1 + 2, a1 + 4, a3);
      v13 = a2;
      v14 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v32 = a3;
      v15 = 0;
      v16 = 0;
      break;
  }
  do
  {
    v17 = *v14;
    v18 = *v12;
    if (*v14 == *v12)
      goto LABEL_23;
    v19 = v14[1];
    v20 = v12[1];
    if (v19 == v20)
    {
      v27 = *v32 + 664;
      v37 = *v14;
      v28 = *((_DWORD *)sub_1C61DAFE8(v27, &v37) + 2);
      v36 = v18;
      if (v28 >= *((_DWORD *)sub_1C61DAFE8(v27, &v36) + 2))
      {
        v13 = a2;
        goto LABEL_23;
      }
      v17 = *v14;
      v19 = v14[1];
      v18 = *v12;
      v20 = v12[1];
      v13 = a2;
    }
    else if (v19 >= v20)
    {
      goto LABEL_23;
    }
    *v14 = v18;
    v14[1] = v20;
    v21 = a1;
    if (v12 == a1)
      goto LABEL_22;
    v22 = v15;
    while (1)
    {
      v23 = (uint64_t *)((char *)a1 + v22);
      v24 = *(uint64_t *)((char *)a1 + v22 + 16);
      if (v17 == v24)
      {
        v21 = v23 + 4;
        goto LABEL_22;
      }
      v25 = v23[3];
      if (v19 != v25)
      {
        if (v19 >= v25)
        {
          v21 = v12;
          goto LABEL_22;
        }
        goto LABEL_17;
      }
      v26 = *v32 + 664;
      v33 = v26;
      v37 = v17;
      v34 = *((_DWORD *)sub_1C61DAFE8(v26, &v37) + 2);
      v36 = v24;
      if (v34 >= *((_DWORD *)sub_1C61DAFE8(v33, &v36) + 2))
        break;
      v24 = v23[2];
      v25 = v23[3];
      v13 = a2;
LABEL_17:
      v12 -= 2;
      v23[4] = v24;
      *(uint64_t *)((char *)a1 + v22 + 40) = v25;
      v22 -= 16;
      if (v22 == -32)
      {
        v21 = a1;
        goto LABEL_22;
      }
    }
    v21 = v12;
    v13 = a2;
LABEL_22:
    *v21 = v17;
    v21[1] = v19;
    if (++v16 == 8)
      return v14 + 2 == v13;
LABEL_23:
    v12 = v14;
    v15 += 16;
    v14 += 2;
  }
  while (v14 != v13);
  return 1;
}

uint64_t *sub_1C509F61C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  result = sub_1C509F088(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  if (*a4 != *a3)
  {
    v13 = a4[1];
    v14 = a3[1];
    v15 = *a5;
    if (v13 == v14)
    {
      v24 = v15 + 664;
      v31 = *a4;
      v25 = *((_DWORD *)sub_1C61DAFE8(v15 + 664, &v31) + 2);
      v30 = v12;
      result = sub_1C61DAFE8(v24, &v30);
      if (v25 >= *((_DWORD *)result + 2))
        return result;
      v12 = *a3;
      v14 = a3[1];
      v11 = *a4;
      v13 = a4[1];
      v15 = *a5;
    }
    else if (v13 >= v14)
    {
      return result;
    }
    *a3 = v11;
    *a4 = v12;
    a3[1] = v13;
    a4[1] = v14;
    v16 = *a3;
    v17 = *a2;
    if (*a3 == *a2)
      return result;
    v18 = a3[1];
    v19 = a2[1];
    if (v18 == v19)
    {
      v26 = v15 + 664;
      v31 = *a3;
      v27 = *((_DWORD *)sub_1C61DAFE8(v15 + 664, &v31) + 2);
      v30 = v17;
      result = sub_1C61DAFE8(v26, &v30);
      if (v27 >= *((_DWORD *)result + 2))
        return result;
      v17 = *a2;
      v19 = a2[1];
      v16 = *a3;
      v18 = a3[1];
      v15 = *a5;
    }
    else if (v18 >= v19)
    {
      return result;
    }
    *a2 = v16;
    *a3 = v17;
    a2[1] = v18;
    a3[1] = v19;
    v20 = *a2;
    v21 = *a1;
    if (*a2 == *a1)
      return result;
    v22 = a2[1];
    v23 = a1[1];
    if (v22 != v23)
    {
      if (v22 >= v23)
        return result;
      goto LABEL_10;
    }
    v28 = v15 + 664;
    v31 = *a2;
    v29 = *((_DWORD *)sub_1C61DAFE8(v15 + 664, &v31) + 2);
    v30 = v21;
    result = sub_1C61DAFE8(v28, &v30);
    if (v29 < *((_DWORD *)result + 2))
    {
      v21 = *a1;
      v23 = a1[1];
      v20 = *a2;
      v22 = a2[1];
LABEL_10:
      *a1 = v20;
      *a2 = v21;
      a1[1] = v22;
      a2[1] = v23;
    }
  }
  return result;
}

uint64_t *sub_1C509F7DC(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = sub_1C4768E74((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t *sub_1C509F890(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[6];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    sub_1C61DB76C((uint64_t)&v11, (uint64_t)result, a3, a4);
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v9 = *v6;
    }
    result = sub_1C4768E74((uint64_t *)v4[1], v9);
    ++v4[2];
  }
  return result;
}

void sub_1C509F944(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_1C509F944(*a1);
    sub_1C509F944(a1[1]);
    v2 = a1[6];
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 4);
    operator delete(a1);
  }
}

char *sub_1C509F99C(_QWORD *a1)
{
  int v2;
  char *result;
  int v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *((_DWORD *)a1 + 2);
  result = (char *)sub_1C5087068(a1);
  if (v2)
  {
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == *((_DWORD *)a1 + 4))
    {
      a1[1] = 0;
      v6 = (unint64_t)v5 << 6;
      v7 = (_QWORD *)(*a1 + 16);
      do
      {
        *v7 = 0;
        v7[1] = -4096;
        *(v7 - 2) = &off_1E8140658;
        *(v7 - 1) = 2;
        v7[2] = 0;
        v7 += 8;
        v6 -= 64;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*a1, 8);
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = (char *)operator new((unint64_t)v9 << 6, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = v10 << 6;
        v12 = result + 16;
        do
        {
          *v12 = 0;
          v12[1] = -4096;
          *(v12 - 2) = &off_1E8140658;
          *(v12 - 1) = 2;
          v12[2] = 0;
          v12 += 8;
          v11 -= 64;
        }
        while (v11);
      }
    }
  }
  else if (*((_DWORD *)a1 + 4))
  {
    result = (char *)MEMORY[0x1CAA32FB4](*a1, 8);
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    a1[1] = 0;
  }
  return result;
}

_QWORD *sub_1C509FAE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v7 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 8;
    v9 = a1 + 8;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      v21 = 0;
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(a1 + 8);
  }
  v10 = v8 - 1;
  v11 = ((*a2 >> 4) ^ (*a2 >> 9)) & v10;
  result = (_QWORD *)(v9 + 8 * v11);
  v13 = *result;
  if (*a2 == *result)
  {
LABEL_12:
    if ((v6 & 1) != 0)
    {
      v18 = 8;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 8);
      v18 = *(unsigned int *)(a1 + 16);
    }
    v19 = 0;
    v20 = v7 + 8 * v18;
    goto LABEL_21;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == -8192;
    if (v16)
      v14 = result;
    v17 = v11 + v15++;
    v11 = v17 & v10;
    result = (_QWORD *)(v9 + 8 * v11);
    v13 = *result;
    if (*a2 == *result)
      goto LABEL_12;
  }
  if (v14)
    v21 = v14;
  else
    v21 = result;
LABEL_18:
  result = sub_1C509FCAC(a1, (uint64_t)a2, a2, v21);
  *result = *a2;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v22 = 8;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v22 = *(unsigned int *)(a1 + 16);
  }
  v20 = v7 + 8 * v22;
  v19 = 1;
LABEL_21:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = v19;
  return result;
}

uint64_t sub_1C509FC04(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C509FCAC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 8;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C509FE20(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 8;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C509FE20(a1, v8);
      v20 = 0;
      sub_1C509FC04(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C509FE20(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C509FF88((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C509FF88((int *)a1, v14, v8);
}

int *sub_1C509FF88(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 8;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C50A0088(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 8;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(v2 + 8 * v5);
  v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_10:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (*a2 == v7)
    {
      v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

BOOL sub_1C50A011C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 >= 0x1C
    && ((v2 = v1 - 33, v3 = v2 > 0x33, v4 = (1 << v2) & 0x8000000000041, !v3) ? (v5 = v4 == 0) : (v5 = 1),
        !v5 && (v6 = *(_QWORD *)(a1 - 32)) != 0 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *(_QWORD *)(a1 + 72)))
  {
    return *(_DWORD *)(v6 + 36) == 124;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1C50A0184(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DBA44(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C50A023C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DBCD0(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C50A0300(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 58;
}

uint64_t sub_1C50A034C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v2 = 0;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 84)
    {
      v2 = *(_QWORD *)(a2 - 32);
      if (v2)
      {
        if (!*(_BYTE *)(v2 + 16)
          && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72)
          && *(_DWORD *)(v2 + 36) == *(_DWORD *)a1
          && ((v3 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8))) != 0
            ? (v4 = *(unsigned __int8 *)(v3 + 16) >= 0x1Cu)
            : (v4 = 0),
              v4
           && ((**(_QWORD **)(a1 + 16) = v3,
                (v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24))) != 0)
             ? (v6 = *(unsigned __int8 *)(v5 + 16) > 0x14u)
             : (v6 = 1),
               !v6)))
        {
          **(_QWORD **)(a1 + 32) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v2;
}

uint64_t sub_1C50A0404()
{
  char v1;
  int v2;
  __n128 v3;
  char *v4;
  int v5;

  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable branch optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 46;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5240, "disable-cgp-branch-opts", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5240, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable GC optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 42;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5300, "disable-cgp-gc-opts", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5300, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable select to branch conversion.";
  v3.n128_u64[1] = 36;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F53C0, "disable-cgp-select2branch", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F53C0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Address sinking in CGP using GEPs.";
  v3.n128_u64[1] = 34;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5480, "addr-sink-using-gep", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5480, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Enable sinkinig and/cmp into branches.";
  v3.n128_u64[1] = 38;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5540, "enable-andcmp-sinking", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5540, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable store(extract) optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 54;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5600, "disable-cgp-store-extract", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5600, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Stress test store(extract) optimizations in CodeGenPrepare";
  v3.n128_u64[1] = 58;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F56C0, "stress-cgp-store-extract", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F56C0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare";
  v3.n128_u64[1] = 79;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&algn_1ED7F5741[63], "disable-cgp-ext-ld-promotion", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED7F5741[63], &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Stress test ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare";
  v3.n128_u64[1] = 83;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5840, "stress-cgp-ext-ld-promotion", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5840, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disable protection against removing loop preheaders";
  v3.n128_u64[1] = 51;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5900, "disable-preheader-prot", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5900, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Use profile info to add section prefix for hot/cold functions";
  v3.n128_u64[1] = 61;
  v4 = &v1;
  sub_1C61DBE98(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F59C0, &dword_1C475E000);
  v5 = 1;
  v1 = 0;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"In profiling mode like sampleFDO, if a function doesn't have profile, we cannot tel"
                                     "l the function is cold for sure because it may be a function newly added without ev"
                                     "er being sampled. With the flag enabled, compiler can put such profile unknown func"
                                     "tions into a special section, so runtime system can choose to handle it in a differ"
                                     "ent way than .text section, to save RAM for example. ";
  v3.n128_u64[1] = 385;
  v4 = &v1;
  sub_1C61DBFE0(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F5A80, &dword_1C475E000);
  v5 = 1;
  v2 = 2;
  v3.n128_u64[0] = (unint64_t)"Skip merging empty blocks if (frequency of empty block) / (frequency of destination"
                                     " block) is greater than this ratio";
  v3.n128_u64[1] = 117;
  v4 = (char *)&v2;
  sub_1C61DC128(&v5, (int **)&v4, (__int128 *)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F5B40, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Force store splitting no matter what the target query says.";
  v3.n128_u64[1] = 59;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5C00, "force-split-store", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5C00, &dword_1C475E000);
  v5 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable merging of redundant sexts when one is dominating the other.";
  v3.n128_u64[1] = 67;
  LOBYTE(v2) = 1;
  v4 = (char *)&v2;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F5CC0, "cgp-type-promotion-merge", &v5, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5CC0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 79;
  v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Disables combining addressing modes with different parts in optimizeMemoryInst.";
  sub_1C4E5DE0C((llvm::cl::Option *)&algn_1ED7F5D41[63], "disable-complex-addr-modes", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED7F5D41[63], &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 42;
  v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Allow creation of Phis in Address sinking.";
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5E40, "addr-sink-new-phis", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5E40, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Allow creation of selects in Address sinking.";
  v3.n128_u64[1] = 45;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5F00, "addr-sink-new-select", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5F00, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Allow combining of BaseReg field in Address sinking.";
  v3.n128_u64[1] = 52;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F5FC0, "addr-sink-combine-base-reg", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F5FC0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[1] = 51;
  v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Allow combining of BaseGV field in Address sinking.";
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F6080, "addr-sink-combine-base-gv", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6080, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Allow combining of BaseOffs field in Address sinking.";
  v3.n128_u64[1] = 53;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F6140, "addr-sink-combine-base-offs", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6140, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[1] = 54;
  v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Allow combining of ScaledReg field in Address sinking.";
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1EF8EFC30, "addr-sink-combine-scaled-reg", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EFC30, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Enable splitting large offset of GEP.";
  v3.n128_u64[1] = 37;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1EF8EFCF0, "cgp-split-large-offset-gep", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EFCF0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 42;
  v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Enable ICMP_EQ to ICMP_S(L|G)T conversion.";
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1EF8EFDB0, "cgp-icmp-eq2icmp-st", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EFDB0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Enable BFI update verification for CodeGenPrepare.";
  v3.n128_u64[1] = 50;
  v4 = (char *)&v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1EF8EFE70, "cgp-verify-bfi-updates", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EFE70, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[1] = 45;
  v4 = (char *)&v2;
  v3.n128_u64[0] = (unint64_t)"Enable converting phi types in CodeGenPrepare";
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1EF8EFF30, "cgp-optimize-phi-types", &v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8EFF30, &dword_1C475E000);
}

void *llvm::codegen::getMArch@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *result;

  if (byte_1EF8F0FB7 < 0)
    return sub_1C47EBC30((_BYTE *)a1, (void *)qword_1EF8F0FA0, unk_1EF8F0FA8);
  v2 = *(_QWORD *)(qword_1ED7F6200 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1ED7F6200 + 128);
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

void *llvm::codegen::getMCPU@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *result;

  if (byte_1EF8F109F < 0)
    return sub_1C47EBC30((_BYTE *)a1, (void *)qword_1EF8F1088, unk_1EF8F1090);
  v2 = *(_QWORD *)(qword_1ED7F6208 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1ED7F6208 + 128);
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

_QWORD *llvm::codegen::getMAttrs@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_1C484333C(a1, qword_1EF8F0EC8, qword_1EF8F0ED0, 0xAAAAAAAAAAAAAAABLL * ((qword_1EF8F0ED0 - qword_1EF8F0EC8) >> 3));
}

uint64_t llvm::codegen::getRelocModel(llvm::codegen *this)
{
  return dword_1EF8F1340;
}

uint64_t llvm::codegen::getExplicitRelocModel(llvm::codegen *this)
{
  if (word_1EF8F12C8)
    return dword_1EF8F1340 | 0x100000000;
  else
    return 0;
}

uint64_t llvm::codegen::getThreadModel(llvm::codegen *this)
{
  return dword_1EF8F1598;
}

uint64_t llvm::codegen::getCodeModel(llvm::codegen *this)
{
  return dword_1EF8F17F0;
}

uint64_t llvm::codegen::getExplicitCodeModel(llvm::codegen *this)
{
  if (word_1EF8F1778)
    return dword_1EF8F17F0 | 0x100000000;
  else
    return 0;
}

uint64_t llvm::codegen::getExceptionModel(llvm::codegen *this)
{
  return dword_1EF8F1A48;
}

uint64_t llvm::codegen::getFileType(llvm::codegen *this)
{
  return dword_1EF8F1CA0;
}

uint64_t llvm::codegen::getExplicitFileType(llvm::codegen *this)
{
  if (word_1EF8F1C28)
    return dword_1EF8F1CA0 | 0x100000000;
  else
    return 0;
}

uint64_t llvm::codegen::getFramePointerUsage(llvm::codegen *this)
{
  return dword_1EF8F1EF8;
}

uint64_t llvm::codegen::getEnableUnsafeFPMath(llvm::codegen *this)
{
  return byte_1ED7F64F8;
}

uint64_t llvm::codegen::getEnableNoInfsFPMath(llvm::codegen *this)
{
  return byte_1ED7F65B8;
}

uint64_t llvm::codegen::getEnableNoNaNsFPMath(llvm::codegen *this)
{
  return byte_1ED7F6678;
}

uint64_t llvm::codegen::getEnableNoSignedZerosFPMath(llvm::codegen *this)
{
  return byte_1ED7F6738;
}

uint64_t llvm::codegen::getEnableApproxFuncFPMath(llvm::codegen *this)
{
  return byte_1ED7F67F8;
}

uint64_t llvm::codegen::getEnableNoTrappingFPMath(llvm::codegen *this)
{
  return byte_1ED7F68B8;
}

uint64_t llvm::codegen::getEnableAIXExtendedAltivecABI(llvm::codegen *this)
{
  return byte_1ED7F6AF8;
}

uint64_t llvm::codegen::getDenormalFPMath(llvm::codegen *this)
{
  return byte_1EF8F2150;
}

uint64_t llvm::codegen::getDenormalFP32Math(llvm::codegen *this)
{
  return byte_1EF8F23A8;
}

uint64_t llvm::codegen::getEnableHonorSignDependentRoundingFPMath(llvm::codegen *this)
{
  return byte_1ED7F6978;
}

uint64_t llvm::codegen::getFloatABIForCalls(llvm::codegen *this)
{
  return dword_1EF8F2600;
}

uint64_t llvm::codegen::getFuseFPOps(llvm::codegen *this)
{
  return dword_1EF8F2858;
}

uint64_t llvm::codegen::getSwiftAsyncFramePointer(llvm::codegen *this)
{
  return dword_1EF8F2AB0;
}

uint64_t llvm::codegen::getDontPlaceZerosInBSS(llvm::codegen *this)
{
  return byte_1ED7F6A38;
}

uint64_t llvm::codegen::getEnableGuaranteedTailCallOpt(llvm::codegen *this)
{
  return byte_1ED7F6BB8;
}

uint64_t llvm::codegen::getDisableTailCalls(llvm::codegen *this)
{
  return byte_1ED7F6C78;
}

uint64_t llvm::codegen::getStackSymbolOrdering(llvm::codegen *this)
{
  return byte_1ED7F6D38;
}

uint64_t llvm::codegen::getStackRealign(llvm::codegen *this)
{
  return byte_1ED7F6DF8;
}

void *llvm::codegen::getTrapFuncName@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *result;

  if (byte_1EF8F1187 < 0)
    return sub_1C47EBC30((_BYTE *)a1, (void *)qword_1EF8F1170, unk_1EF8F1178);
  v2 = *(_QWORD *)(qword_1ED7F6210 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1ED7F6210 + 128);
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t llvm::codegen::getUseCtors(llvm::codegen *this)
{
  return byte_1ED7F6EB8;
}

uint64_t llvm::codegen::getLowerGlobalDtorsViaCxaAtExit(llvm::codegen *this)
{
  return byte_1ED7F6F78;
}

uint64_t llvm::codegen::getRelaxELFRelocations(llvm::codegen *this)
{
  return byte_1ED7F7038;
}

uint64_t llvm::codegen::getDataSections(llvm::codegen *this)
{
  return byte_1ED7F70F8;
}

uint64_t llvm::codegen::getExplicitDataSections(llvm::codegen *this)
{
  if (word_1ED7F7080)
    return byte_1ED7F70F8 | 0x100u;
  else
    return 0;
}

uint64_t llvm::codegen::getFunctionSections(llvm::codegen *this)
{
  return byte_1ED7F71B8;
}

uint64_t llvm::codegen::getExplicitFunctionSections(llvm::codegen *this)
{
  if (word_1ED7F7140)
    return byte_1ED7F71B8 | 0x100u;
  else
    return 0;
}

uint64_t llvm::codegen::getIgnoreXCOFFVisibility(llvm::codegen *this)
{
  return byte_1EF8F02C8;
}

uint64_t llvm::codegen::getXCOFFTracebackTable(llvm::codegen *this)
{
  return byte_1EF8F0388;
}

void *llvm::codegen::getBBSections@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *result;

  if (byte_1EF8F126F < 0)
    return sub_1C47EBC30((_BYTE *)a1, (void *)qword_1EF8F1258, unk_1EF8F1260);
  v2 = *(_QWORD *)(qword_1ED7F6218 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1ED7F6218 + 128);
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t llvm::codegen::getTLSSize(llvm::codegen *this)
{
  return dword_1EF8F0448;
}

uint64_t llvm::codegen::getEmulatedTLS(llvm::codegen *this)
{
  return byte_1EF8F0508;
}

uint64_t llvm::codegen::getUniqueSectionNames(llvm::codegen *this)
{
  return byte_1EF8F05C8;
}

uint64_t llvm::codegen::getUniqueBasicBlockSectionNames(llvm::codegen *this)
{
  return byte_1EF8F0688;
}

uint64_t llvm::codegen::getEABIVersion(llvm::codegen *this)
{
  return dword_1EF8F2D08;
}

uint64_t llvm::codegen::getDebuggerTuningOpt(llvm::codegen *this)
{
  return dword_1EF8F0070;
}

uint64_t llvm::codegen::getEnableStackSizeSection(llvm::codegen *this)
{
  return byte_1EF8F0748;
}

uint64_t llvm::codegen::getEnableAddrsig(llvm::codegen *this)
{
  return byte_1EF8F0808;
}

uint64_t llvm::codegen::getEmitCallSiteInfo(llvm::codegen *this)
{
  return byte_1EF8F08C8;
}

uint64_t llvm::codegen::getEnableMachineFunctionSplitter(llvm::codegen *this)
{
  return byte_1EF8F0A48;
}

uint64_t llvm::codegen::getEnableDebugEntryValues(llvm::codegen *this)
{
  return byte_1EF8F0988;
}

uint64_t llvm::codegen::getForceDwarfFrameSection(llvm::codegen *this)
{
  return byte_1EF8F0B08;
}

uint64_t llvm::codegen::getXRayOmitFunctionIndex(llvm::codegen *this)
{
  return byte_1EF8F0BC8;
}

uint64_t llvm::codegen::getDebugStrictDwarf(llvm::codegen *this)
{
  return byte_1EF8F0C88;
}

uint64_t llvm::codegen::getAlignLoops(llvm::codegen *this)
{
  return dword_1EF8F0D48;
}

uint64_t llvm::codegen::getJMCInstrument(llvm::codegen *this)
{
  return byte_1EF8F0E08;
}

llvm::codegen::RegisterCodeGenFlags *llvm::codegen::RegisterCodeGenFlags::RegisterCodeGenFlags(llvm::codegen::RegisterCodeGenFlags *this)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int32 v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 *v64;
  size_t v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  int **v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  size_t v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  int **v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  unint64_t v86;
  unsigned __int32 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  size_t v93;
  int v94;
  __int128 v95;
  uint64_t v96;
  int **v97;
  uint64_t v98;
  __int128 v99;
  int v100;
  unint64_t v101;
  unsigned __int32 v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned __int8 *v107;
  size_t v108;
  int v109;
  __int128 v110;
  uint64_t v111;
  int **v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  size_t v121;
  int v122;
  __int128 v123;
  uint64_t v124;
  int **v125;
  uint64_t v126;
  __int128 v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  size_t v134;
  int v135;
  __int128 v136;
  uint64_t v137;
  int **v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  size_t v149;
  int v150;
  __int128 v151;
  uint64_t v152;
  int **v153;
  uint64_t v154;
  __int128 v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned __int8 *v161;
  size_t v162;
  int v163;
  __int128 v164;
  uint64_t v165;
  int **v166;
  uint64_t v167;
  __int128 v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unsigned __int8 *v174;
  size_t v175;
  int v176;
  __int128 v177;
  uint64_t v178;
  int **v179;
  uint64_t v180;
  __int128 v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unsigned __int8 *v193;
  size_t v194;
  int v195;
  __int128 v196;
  uint64_t v197;
  int **v198;
  uint64_t v199;
  __int128 v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned __int8 *v206;
  size_t v207;
  int v208;
  __int128 v209;
  uint64_t v210;
  int **v211;
  uint64_t v212;
  __int128 v213;
  int v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  char v228;
  char v229;
  int v230;
  int *v231;
  size_t v232;
  __int128 v233;
  uint64_t (**v234)();
  int v235;
  char v236;
  __n128 v237;
  const char *v238;
  uint64_t v239;
  int v240;
  const char *v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  int v245;
  const char *v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  int v250;
  const char *v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  int v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1ED7F6220);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6220))
  {
    v56 = sub_1C47AD050((uint64_t)&qword_1EF8F0F20, 0, 0);
    qword_1EF8F0FA0 = 0;
    unk_1EF8F0FA8 = 0;
    qword_1EF8F0FC8 = 0;
    unk_1EF8F0FD0 = 0;
    qword_1EF8F0FC0 = 0;
    byte_1EF8F0FD8 = 0;
    unk_1EF8F0FB0 = 0;
    unk_1EF8F0FB8 = &unk_1E819E950;
    qword_1EF8F0F20 = (uint64_t)&unk_1E819E480;
    qword_1EF8F0FE0 = (uint64_t)&unk_1E819E970;
    qword_1EF8F0FE8 = (uint64_t)&off_1E7FA8CB8;
    qword_1EF8F1000 = (uint64_t)&qword_1EF8F0FE8;
    llvm::cl::Option::setArgStr(v56, "march", 5uLL);
    qword_1EF8F0F40 = (uint64_t)"Architecture to generate code for (see --version)";
    unk_1EF8F0F48 = 49;
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F0F20);
    __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1EF8F0F20, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6220);
  }
  qword_1ED7F6200 = (uint64_t)&qword_1EF8F0F20;
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7F6228);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6228))
  {
    v237.n128_u64[0] = (unint64_t)"";
    v57 = sub_1C47AD050((uint64_t)qword_1EF8F1008, 0, 0);
    qword_1EF8F1088 = 0;
    unk_1EF8F1090 = 0;
    qword_1EF8F10B0 = 0;
    unk_1EF8F10B8 = 0;
    qword_1EF8F10A8 = 0;
    byte_1EF8F10C0 = 0;
    unk_1EF8F1098 = 0;
    unk_1EF8F10A0 = &unk_1E819E950;
    qword_1EF8F1008[0] = (uint64_t)&unk_1E819E480;
    qword_1EF8F10C8 = (uint64_t)&unk_1E819E970;
    qword_1EF8F10D0 = (uint64_t)&off_1E7FA8CB8;
    qword_1EF8F10E8 = (uint64_t)&qword_1EF8F10D0;
    llvm::cl::Option::setArgStr(v57, "mcpu", 4uLL);
    qword_1EF8F1028 = (uint64_t)"Target a specific cpu type (-mcpu=help for details)";
    unk_1EF8F1030 = 51;
    qword_1EF8F1038 = (uint64_t)"cpu-name";
    unk_1EF8F1040 = 8;
    sub_1C49C7D74((const char **)&v237, (uint64_t)qword_1EF8F1008);
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F1008);
    __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1EF8F1008, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6228);
  }
  qword_1ED7F6208 = (uint64_t)qword_1EF8F1008;
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7F6230);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6230))
  {
    v58 = sub_1C47AD050((uint64_t)&qword_1EF8F0E48, 1, 0);
    qword_1EF8F0EC8 = 0;
    qword_1EF8F0ED0 = 0;
    qword_1EF8F0ED8 = 0;
    unk_1EF8F0EE0 = 0;
    qword_1EF8F0E48 = (uint64_t)&unk_1E81409D8;
    qword_1EF8F0EE8 = 0;
    unk_1EF8F0EF0 = 0;
    qword_1EF8F0EF8 = (uint64_t)&unk_1E819E970;
    qword_1EF8F0F00 = (uint64_t)&unk_1E81415E0;
    qword_1EF8F0F18 = (uint64_t)&qword_1EF8F0F00;
    llvm::cl::Option::setArgStr(v58, "mattr", 5uLL);
    word_1EF8F0E52 |= 0x200u;
    qword_1EF8F0E68 = (uint64_t)"Target specific attributes (-mattr=help for details)";
    unk_1EF8F0E70 = 52;
    qword_1EF8F0E78 = (uint64_t)"a1,+a2,-a3,...";
    unk_1EF8F0E80 = 14;
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F0E48);
    __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1EF8F0E48, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6230);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7F6238);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6238))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v237.n128_u64[1] = 0x400000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)&v238, 6uLL, 40);
    v59 = v237.n128_u32[2];
    v60 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
    *(_QWORD *)v60 = "static";
    *(_QWORD *)(v60 + 8) = 6;
    *(_DWORD *)(v60 + 16) = 0;
    *(_QWORD *)(v60 + 24) = "Non-relocatable code";
    *(_QWORD *)(v60 + 32) = 20;
    *(_QWORD *)(v60 + 40) = "pic";
    *(_QWORD *)(v60 + 48) = 3;
    *(_DWORD *)(v60 + 56) = 1;
    *(_QWORD *)(v60 + 64) = "Fully relocatable, position independent code";
    *(_QWORD *)(v60 + 72) = 44;
    *(_QWORD *)(v60 + 80) = "dynamic-no-pic";
    *(_QWORD *)(v60 + 88) = 14;
    *(_DWORD *)(v60 + 96) = 2;
    *(_QWORD *)(v60 + 104) = "Relocatable external references, non-relocatable code";
    *(_QWORD *)(v60 + 112) = 53;
    *(_QWORD *)(v60 + 120) = "ropi";
    *(_QWORD *)(v60 + 128) = 4;
    *(_DWORD *)(v60 + 136) = 3;
    *(_QWORD *)(v60 + 144) = "Code and read-only data relocatable, accessed PC-relative";
    *(_QWORD *)(v60 + 152) = 57;
    *(_QWORD *)(v60 + 160) = "rwpi";
    *(_QWORD *)(v60 + 168) = 4;
    *(_DWORD *)(v60 + 176) = 4;
    *(_QWORD *)(v60 + 184) = "Read-write data relocatable, accessed relative to static base";
    *(_QWORD *)(v60 + 192) = 61;
    *(_QWORD *)(v60 + 200) = "ropi-rwpi";
    *(_QWORD *)(v60 + 208) = 9;
    *(_DWORD *)(v60 + 216) = 5;
    *(_QWORD *)(v60 + 224) = "Combination of ropi and rwpi";
    *(_QWORD *)(v60 + 232) = 28;
    v237.n128_u32[2] = v59 + 6;
    v61 = sub_1C47AD050((uint64_t)&qword_1EF8F12C0, 0, 0);
    dword_1EF8F1340 = 0;
    qword_1EF8F1348 = (uint64_t)&off_1E8140AF8;
    unk_1EF8F1350 = 0;
    qword_1EF8F12C0 = (uint64_t)off_1E8140A40;
    qword_1EF8F1358 = (uint64_t)&off_1E8140AA8;
    qword_1EF8F1360 = (uint64_t)&qword_1EF8F12C0;
    qword_1EF8F1368 = (uint64_t)&unk_1EF8F1378;
    qword_1EF8F1370 = 0x800000000;
    qword_1EF8F14F8 = (uint64_t)&off_1E8141628;
    qword_1EF8F1510 = (uint64_t)&qword_1EF8F14F8;
    llvm::cl::Option::setArgStr(v61, "relocation-model", 0x10uLL);
    qword_1EF8F12E0 = (uint64_t)"Choose relocation model";
    unk_1EF8F12E8 = 23;
    if (v237.n128_u32[2])
    {
      v62 = v237.n128_u64[0];
      v63 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v64 = *(unsigned __int8 **)v62;
        v65 = *(_QWORD *)(v62 + 8);
        v66 = *(_DWORD *)(v62 + 16);
        v67 = *(_OWORD *)(v62 + 24);
        v231 = *(int **)v62;
        v232 = v65;
        v233 = v67;
        v234 = &off_1E8140AF8;
        v236 = 1;
        v235 = v66;
        v68 = qword_1EF8F1368;
        if (qword_1EF8F1370 >= HIDWORD(qword_1EF8F1370))
        {
          v73 = qword_1EF8F1370 + 1;
          if (qword_1EF8F1368 <= (unint64_t)&v231
            && qword_1EF8F1368 + 48 * (unint64_t)qword_1EF8F1370 > (unint64_t)&v231)
          {
            v217 = (char *)&v231 - qword_1EF8F1368;
            sub_1C50AA2B0(v73);
            v68 = qword_1EF8F1368;
            v69 = (int **)&v217[qword_1EF8F1368];
            goto LABEL_66;
          }
          sub_1C50AA2B0(v73);
          v68 = qword_1EF8F1368;
        }
        v69 = &v231;
LABEL_66:
        v70 = v68 + 48 * qword_1EF8F1370;
        v71 = *((_OWORD *)v69 + 1);
        *(_OWORD *)v70 = *(_OWORD *)v69;
        *(_OWORD *)(v70 + 16) = v71;
        *(_QWORD *)(v70 + 32) = &off_1E8140B18;
        v72 = *((_DWORD *)v69 + 10);
        *(_BYTE *)(v70 + 44) = *((_BYTE *)v69 + 44);
        *(_DWORD *)(v70 + 40) = v72;
        *(_QWORD *)(v70 + 32) = &off_1E8140AF8;
        LODWORD(qword_1EF8F1370) = qword_1EF8F1370 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F1360, v64, v65);
        v62 += 40;
      }
      while (v62 != v63);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F12C0);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A49E8, &qword_1EF8F12C0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6238);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7F6240);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6240))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "posix";
    v239 = 5;
    v240 = 0;
    v241 = "POSIX thread model";
    v242 = 18;
    v243 = "single";
    v244 = 6;
    v245 = 1;
    v246 = "Single thread model";
    v247 = 19;
    v237.n128_u64[1] = 0x400000002;
    v74 = sub_1C47AD050((uint64_t)qword_1EF8F1518, 0, 0);
    dword_1EF8F1598 = 0;
    qword_1EF8F15A0 = (uint64_t)&off_1E8140BF0;
    *(_QWORD *)&dword_1EF8F15A8 = 0;
    qword_1EF8F1518[0] = (uint64_t)off_1E8140B38;
    qword_1EF8F15B0 = (uint64_t)&off_1E8140BA0;
    qword_1EF8F15B8 = (uint64_t)qword_1EF8F1518;
    qword_1EF8F15C0 = (uint64_t)&unk_1EF8F15D0;
    qword_1EF8F15C8 = 0x800000000;
    qword_1EF8F1750 = (uint64_t)&off_1E8141670;
    qword_1EF8F1768 = (uint64_t)&qword_1EF8F1750;
    llvm::cl::Option::setArgStr(v74, "thread-model", 0xCuLL);
    qword_1EF8F1538 = (uint64_t)"Choose threading model";
    unk_1EF8F1540 = 22;
    dword_1EF8F1598 = 0;
    byte_1EF8F15AC = 1;
    dword_1EF8F15A8 = 0;
    if (v237.n128_u32[2])
    {
      v75 = v237.n128_u64[0];
      v76 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v77 = *(unsigned __int8 **)v75;
        v78 = *(_QWORD *)(v75 + 8);
        v79 = *(_DWORD *)(v75 + 16);
        v80 = *(_OWORD *)(v75 + 24);
        v231 = *(int **)v75;
        v232 = v78;
        v233 = v80;
        v234 = &off_1E8140BF0;
        v236 = 1;
        v235 = v79;
        v81 = qword_1EF8F15C0;
        if (qword_1EF8F15C8 >= HIDWORD(qword_1EF8F15C8))
        {
          v86 = qword_1EF8F15C8 + 1;
          if (qword_1EF8F15C0 <= (unint64_t)&v231
            && qword_1EF8F15C0 + 48 * (unint64_t)qword_1EF8F15C8 > (unint64_t)&v231)
          {
            v218 = (char *)&v231 - qword_1EF8F15C0;
            sub_1C50AA3D4(v86);
            v81 = qword_1EF8F15C0;
            v82 = (int **)&v218[qword_1EF8F15C0];
            goto LABEL_77;
          }
          sub_1C50AA3D4(v86);
          v81 = qword_1EF8F15C0;
        }
        v82 = &v231;
LABEL_77:
        v83 = v81 + 48 * qword_1EF8F15C8;
        v84 = *((_OWORD *)v82 + 1);
        *(_OWORD *)v83 = *(_OWORD *)v82;
        *(_OWORD *)(v83 + 16) = v84;
        *(_QWORD *)(v83 + 32) = &off_1E8140C10;
        v85 = *((_DWORD *)v82 + 10);
        *(_BYTE *)(v83 + 44) = *((_BYTE *)v82 + 44);
        *(_DWORD *)(v83 + 40) = v85;
        *(_QWORD *)(v83 + 32) = &off_1E8140BF0;
        LODWORD(qword_1EF8F15C8) = qword_1EF8F15C8 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F15B8, v77, v78);
        v75 += 40;
      }
      while (v75 != v76);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F1518);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4A64, qword_1EF8F1518, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6240);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7F6248);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6248))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v237.n128_u64[1] = 0x400000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)&v238, 5uLL, 40);
    v87 = v237.n128_u32[2];
    v88 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
    *(_QWORD *)v88 = "tiny";
    *(_QWORD *)(v88 + 8) = 4;
    *(_DWORD *)(v88 + 16) = 0;
    *(_QWORD *)(v88 + 24) = "Tiny code model";
    *(_QWORD *)(v88 + 32) = 15;
    *(_QWORD *)(v88 + 40) = "small";
    *(_QWORD *)(v88 + 48) = 5;
    *(_DWORD *)(v88 + 56) = 1;
    *(_QWORD *)(v88 + 64) = "Small code model";
    *(_QWORD *)(v88 + 72) = 16;
    *(_QWORD *)(v88 + 80) = "kernel";
    *(_QWORD *)(v88 + 88) = 6;
    *(_DWORD *)(v88 + 96) = 2;
    *(_QWORD *)(v88 + 104) = "Kernel code model";
    *(_QWORD *)(v88 + 112) = 17;
    *(_QWORD *)(v88 + 120) = "medium";
    *(_QWORD *)(v88 + 128) = 6;
    *(_DWORD *)(v88 + 136) = 3;
    *(_QWORD *)(v88 + 144) = "Medium code model";
    *(_QWORD *)(v88 + 152) = 17;
    *(_QWORD *)(v88 + 160) = "large";
    *(_QWORD *)(v88 + 168) = 5;
    *(_DWORD *)(v88 + 176) = 4;
    *(_QWORD *)(v88 + 184) = "Large code model";
    *(_QWORD *)(v88 + 192) = 16;
    v237.n128_u32[2] = v87 + 5;
    v89 = sub_1C47AD050((uint64_t)&qword_1EF8F1770, 0, 0);
    dword_1EF8F17F0 = 0;
    qword_1EF8F17F8 = (uint64_t)&off_1E8140CE8;
    unk_1EF8F1800 = 0;
    qword_1EF8F1770 = (uint64_t)off_1E8140C30;
    qword_1EF8F1808 = (uint64_t)&off_1E8140C98;
    qword_1EF8F1810 = (uint64_t)&qword_1EF8F1770;
    qword_1EF8F1818 = (uint64_t)&unk_1EF8F1828;
    qword_1EF8F1820 = 0x800000000;
    qword_1EF8F19A8 = (uint64_t)&off_1E81416B8;
    qword_1EF8F19C0 = (uint64_t)&qword_1EF8F19A8;
    llvm::cl::Option::setArgStr(v89, "code-model", 0xAuLL);
    qword_1EF8F1790 = (uint64_t)"Choose code model";
    unk_1EF8F1798 = 17;
    if (v237.n128_u32[2])
    {
      v90 = v237.n128_u64[0];
      v91 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v92 = *(unsigned __int8 **)v90;
        v93 = *(_QWORD *)(v90 + 8);
        v94 = *(_DWORD *)(v90 + 16);
        v95 = *(_OWORD *)(v90 + 24);
        v231 = *(int **)v90;
        v232 = v93;
        v233 = v95;
        v234 = &off_1E8140CE8;
        v236 = 1;
        v235 = v94;
        v96 = qword_1EF8F1818;
        if (qword_1EF8F1820 >= HIDWORD(qword_1EF8F1820))
        {
          v101 = qword_1EF8F1820 + 1;
          if (qword_1EF8F1818 <= (unint64_t)&v231
            && qword_1EF8F1818 + 48 * (unint64_t)qword_1EF8F1820 > (unint64_t)&v231)
          {
            v219 = (char *)&v231 - qword_1EF8F1818;
            sub_1C50AA4F8(v101);
            v96 = qword_1EF8F1818;
            v97 = (int **)&v219[qword_1EF8F1818];
            goto LABEL_88;
          }
          sub_1C50AA4F8(v101);
          v96 = qword_1EF8F1818;
        }
        v97 = &v231;
LABEL_88:
        v98 = v96 + 48 * qword_1EF8F1820;
        v99 = *((_OWORD *)v97 + 1);
        *(_OWORD *)v98 = *(_OWORD *)v97;
        *(_OWORD *)(v98 + 16) = v99;
        *(_QWORD *)(v98 + 32) = &off_1E8140D08;
        v100 = *((_DWORD *)v97 + 10);
        *(_BYTE *)(v98 + 44) = *((_BYTE *)v97 + 44);
        *(_DWORD *)(v98 + 40) = v100;
        *(_QWORD *)(v98 + 32) = &off_1E8140CE8;
        LODWORD(qword_1EF8F1820) = qword_1EF8F1820 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F1810, v92, v93);
        v90 += 40;
      }
      while (v90 != v91);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F1770);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4AE0, &qword_1EF8F1770, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6248);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7F6250);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6250))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v237.n128_u64[1] = 0x400000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)&v238, 6uLL, 40);
    v102 = v237.n128_u32[2];
    v103 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
    *(_QWORD *)v103 = "default";
    *(_QWORD *)(v103 + 8) = 7;
    *(_DWORD *)(v103 + 16) = 0;
    *(_QWORD *)(v103 + 24) = "default exception handling model";
    *(_QWORD *)(v103 + 32) = 32;
    *(_QWORD *)(v103 + 40) = "dwarf";
    *(_QWORD *)(v103 + 48) = 5;
    *(_DWORD *)(v103 + 56) = 1;
    *(_QWORD *)(v103 + 64) = "DWARF-like CFI based exception handling";
    *(_QWORD *)(v103 + 72) = 39;
    *(_QWORD *)(v103 + 80) = "sjlj";
    *(_QWORD *)(v103 + 88) = 4;
    *(_DWORD *)(v103 + 96) = 2;
    *(_QWORD *)(v103 + 104) = "SjLj exception handling";
    *(_QWORD *)(v103 + 112) = 23;
    *(_QWORD *)(v103 + 120) = "arm";
    *(_QWORD *)(v103 + 128) = 3;
    *(_DWORD *)(v103 + 136) = 3;
    *(_QWORD *)(v103 + 144) = "ARM EHABI exceptions";
    *(_QWORD *)(v103 + 152) = 20;
    *(_QWORD *)(v103 + 160) = "wineh";
    *(_QWORD *)(v103 + 168) = 5;
    *(_DWORD *)(v103 + 176) = 4;
    *(_QWORD *)(v103 + 184) = "Windows exception model";
    *(_QWORD *)(v103 + 192) = 23;
    *(_QWORD *)(v103 + 200) = "wasm";
    *(_QWORD *)(v103 + 208) = 4;
    *(_DWORD *)(v103 + 216) = 5;
    *(_QWORD *)(v103 + 224) = "WebAssembly exception handling";
    *(_QWORD *)(v103 + 232) = 30;
    v237.n128_u32[2] = v102 + 6;
    v104 = sub_1C47AD050((uint64_t)qword_1EF8F19C8, 0, 0);
    dword_1EF8F1A48 = 0;
    qword_1EF8F1A50 = (uint64_t)&off_1E8140DE0;
    *(_QWORD *)&dword_1EF8F1A58 = 0;
    qword_1EF8F19C8[0] = (uint64_t)off_1E8140D28;
    qword_1EF8F1A60 = (uint64_t)&off_1E8140D90;
    qword_1EF8F1A68 = (uint64_t)qword_1EF8F19C8;
    qword_1EF8F1A70 = (uint64_t)&unk_1EF8F1A80;
    qword_1EF8F1A78 = 0x800000000;
    qword_1EF8F1C00 = (uint64_t)&off_1E8141700;
    qword_1EF8F1C18 = (uint64_t)&qword_1EF8F1C00;
    llvm::cl::Option::setArgStr(v104, "exception-model", 0xFuLL);
    qword_1EF8F19E8 = (uint64_t)"exception model";
    unk_1EF8F19F0 = 15;
    dword_1EF8F1A48 = 0;
    byte_1EF8F1A5C = 1;
    dword_1EF8F1A58 = 0;
    if (v237.n128_u32[2])
    {
      v105 = v237.n128_u64[0];
      v106 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v107 = *(unsigned __int8 **)v105;
        v108 = *(_QWORD *)(v105 + 8);
        v109 = *(_DWORD *)(v105 + 16);
        v110 = *(_OWORD *)(v105 + 24);
        v231 = *(int **)v105;
        v232 = v108;
        v233 = v110;
        v234 = &off_1E8140DE0;
        v236 = 1;
        v235 = v109;
        v111 = qword_1EF8F1A70;
        if (qword_1EF8F1A78 >= HIDWORD(qword_1EF8F1A78))
        {
          v116 = qword_1EF8F1A78 + 1;
          if (qword_1EF8F1A70 <= (unint64_t)&v231
            && qword_1EF8F1A70 + 48 * (unint64_t)qword_1EF8F1A78 > (unint64_t)&v231)
          {
            v220 = (char *)&v231 - qword_1EF8F1A70;
            sub_1C50AA61C(v116);
            v111 = qword_1EF8F1A70;
            v112 = (int **)&v220[qword_1EF8F1A70];
            goto LABEL_99;
          }
          sub_1C50AA61C(v116);
          v111 = qword_1EF8F1A70;
        }
        v112 = &v231;
LABEL_99:
        v113 = v111 + 48 * qword_1EF8F1A78;
        v114 = *((_OWORD *)v112 + 1);
        *(_OWORD *)v113 = *(_OWORD *)v112;
        *(_OWORD *)(v113 + 16) = v114;
        *(_QWORD *)(v113 + 32) = &off_1E8140E00;
        v115 = *((_DWORD *)v112 + 10);
        *(_BYTE *)(v113 + 44) = *((_BYTE *)v112 + 44);
        *(_DWORD *)(v113 + 40) = v115;
        *(_QWORD *)(v113 + 32) = &off_1E8140DE0;
        LODWORD(qword_1EF8F1A78) = qword_1EF8F1A78 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F1A68, v107, v108);
        v105 += 40;
      }
      while (v105 != v106);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F19C8);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4B5C, qword_1EF8F19C8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6250);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7F6258);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6258))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "asm";
    v239 = 3;
    v240 = 0;
    v241 = "Emit an assembly ('.s') file";
    v242 = 28;
    v243 = "obj";
    v244 = 3;
    v245 = 1;
    v246 = "Emit a native object ('.o') file";
    v247 = 32;
    v248 = "null";
    v249 = 4;
    v250 = 2;
    v251 = "Emit nothing, for performance testing";
    v252 = 37;
    v237.n128_u64[1] = 0x400000003;
    v117 = sub_1C47AD050((uint64_t)&qword_1EF8F1C20, 0, 0);
    dword_1EF8F1CA0 = 0;
    qword_1EF8F1CA8 = (uint64_t)&off_1E8140ED8;
    *(_QWORD *)&dword_1EF8F1CB0 = 0;
    qword_1EF8F1C20 = (uint64_t)off_1E8140E20;
    qword_1EF8F1CB8 = (uint64_t)&off_1E8140E88;
    qword_1EF8F1CC0 = (uint64_t)&qword_1EF8F1C20;
    qword_1EF8F1CC8 = (uint64_t)&unk_1EF8F1CD8;
    qword_1EF8F1CD0 = 0x800000000;
    qword_1EF8F1E58 = (uint64_t)&off_1E8141748;
    qword_1EF8F1E70 = (uint64_t)&qword_1EF8F1E58;
    llvm::cl::Option::setArgStr(v117, "filetype", 8uLL);
    dword_1EF8F1CA0 = 0;
    byte_1EF8F1CB4 = 1;
    dword_1EF8F1CB0 = 0;
    qword_1EF8F1C40 = (uint64_t)"Choose a file type (not all types are supported by all targets):";
    unk_1EF8F1C48 = 64;
    if (v237.n128_u32[2])
    {
      v118 = v237.n128_u64[0];
      v119 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v120 = *(unsigned __int8 **)v118;
        v121 = *(_QWORD *)(v118 + 8);
        v122 = *(_DWORD *)(v118 + 16);
        v123 = *(_OWORD *)(v118 + 24);
        v231 = *(int **)v118;
        v232 = v121;
        v233 = v123;
        v234 = &off_1E8140ED8;
        v236 = 1;
        v235 = v122;
        v124 = qword_1EF8F1CC8;
        if (qword_1EF8F1CD0 >= HIDWORD(qword_1EF8F1CD0))
        {
          v129 = qword_1EF8F1CD0 + 1;
          if (qword_1EF8F1CC8 <= (unint64_t)&v231
            && qword_1EF8F1CC8 + 48 * (unint64_t)qword_1EF8F1CD0 > (unint64_t)&v231)
          {
            v221 = (char *)&v231 - qword_1EF8F1CC8;
            sub_1C50AA740(v129);
            v124 = qword_1EF8F1CC8;
            v125 = (int **)&v221[qword_1EF8F1CC8];
            goto LABEL_110;
          }
          sub_1C50AA740(v129);
          v124 = qword_1EF8F1CC8;
        }
        v125 = &v231;
LABEL_110:
        v126 = v124 + 48 * qword_1EF8F1CD0;
        v127 = *((_OWORD *)v125 + 1);
        *(_OWORD *)v126 = *(_OWORD *)v125;
        *(_OWORD *)(v126 + 16) = v127;
        *(_QWORD *)(v126 + 32) = &off_1E8140EF8;
        v128 = *((_DWORD *)v125 + 10);
        *(_BYTE *)(v126 + 44) = *((_BYTE *)v125 + 44);
        *(_DWORD *)(v126 + 40) = v128;
        *(_QWORD *)(v126 + 32) = &off_1E8140ED8;
        LODWORD(qword_1EF8F1CD0) = qword_1EF8F1CD0 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F1CC0, v120, v121);
        v118 += 40;
      }
      while (v118 != v119);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F1C20);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4BD8, &qword_1EF8F1C20, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6258);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_1ED7F6260);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6260))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "all";
    v239 = 3;
    v240 = 2;
    v241 = "Disable frame pointer elimination";
    v242 = 33;
    v243 = "non-leaf";
    v244 = 8;
    v245 = 1;
    v246 = "Disable frame pointer elimination for non-leaf frame";
    v247 = 52;
    v248 = "none";
    v249 = 4;
    v250 = 0;
    v251 = "Enable frame pointer elimination";
    v252 = 32;
    v237.n128_u64[1] = 0x400000003;
    v130 = sub_1C47AD050((uint64_t)&qword_1EF8F1E78, 0, 0);
    dword_1EF8F1EF8 = 0;
    qword_1EF8F1F00 = (uint64_t)&off_1E8140FD0;
    *(_QWORD *)&dword_1EF8F1F08 = 0;
    qword_1EF8F1E78 = (uint64_t)off_1E8140F18;
    qword_1EF8F1F10 = (uint64_t)&off_1E8140F80;
    qword_1EF8F1F18 = (uint64_t)&qword_1EF8F1E78;
    qword_1EF8F1F20 = (uint64_t)&unk_1EF8F1F30;
    qword_1EF8F1F28 = 0x800000000;
    qword_1EF8F20B0 = (uint64_t)&off_1E8141790;
    qword_1EF8F20C8 = (uint64_t)&qword_1EF8F20B0;
    llvm::cl::Option::setArgStr(v130, "frame-pointer", 0xDuLL);
    qword_1EF8F1E98 = (uint64_t)"Specify frame pointer elimination optimization";
    unk_1EF8F1EA0 = 46;
    dword_1EF8F1EF8 = 0;
    byte_1EF8F1F0C = 1;
    dword_1EF8F1F08 = 0;
    if (v237.n128_u32[2])
    {
      v131 = v237.n128_u64[0];
      v132 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v133 = *(unsigned __int8 **)v131;
        v134 = *(_QWORD *)(v131 + 8);
        v135 = *(_DWORD *)(v131 + 16);
        v136 = *(_OWORD *)(v131 + 24);
        v231 = *(int **)v131;
        v232 = v134;
        v233 = v136;
        v234 = &off_1E8140FD0;
        v236 = 1;
        v235 = v135;
        v137 = qword_1EF8F1F20;
        if (qword_1EF8F1F28 >= HIDWORD(qword_1EF8F1F28))
        {
          v142 = qword_1EF8F1F28 + 1;
          if (qword_1EF8F1F20 <= (unint64_t)&v231
            && qword_1EF8F1F20 + 48 * (unint64_t)qword_1EF8F1F28 > (unint64_t)&v231)
          {
            v222 = (char *)&v231 - qword_1EF8F1F20;
            sub_1C50AA864(v142);
            v137 = qword_1EF8F1F20;
            v138 = (int **)&v222[qword_1EF8F1F20];
            goto LABEL_121;
          }
          sub_1C50AA864(v142);
          v137 = qword_1EF8F1F20;
        }
        v138 = &v231;
LABEL_121:
        v139 = v137 + 48 * qword_1EF8F1F28;
        v140 = *((_OWORD *)v138 + 1);
        *(_OWORD *)v139 = *(_OWORD *)v138;
        *(_OWORD *)(v139 + 16) = v140;
        *(_QWORD *)(v139 + 32) = &off_1E8140FF0;
        v141 = *((_DWORD *)v138 + 10);
        *(_BYTE *)(v139 + 44) = *((_BYTE *)v138 + 44);
        *(_DWORD *)(v139 + 40) = v141;
        *(_QWORD *)(v139 + 32) = &off_1E8140FD0;
        LODWORD(qword_1EF8F1F28) = qword_1EF8F1F28 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F1F18, v133, v134);
        v131 += 40;
      }
      while (v131 != v132);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F1E78);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4C54, &qword_1EF8F1E78, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6260);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_1ED7F6268);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6268))
  {
    v237.n128_u64[0] = (unint64_t)"Enable optimizations that may decrease FP precision";
    v237.n128_u64[1] = 51;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1ED7F6478, "enable-unsafe-fp-math", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6478, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6268);
  }
  v12 = atomic_load((unsigned __int8 *)&qword_1ED7F6270);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6270))
  {
    v237.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume no +-Infs";
    v237.n128_u64[1] = 50;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1ED7F6538, "enable-no-infs-fp-math", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6538, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6270);
  }
  v13 = atomic_load((unsigned __int8 *)&qword_1ED7F6278);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6278))
  {
    v237.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume no NaNs";
    v237.n128_u64[1] = 48;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&algn_1ED7F65B9[63], "enable-no-nans-fp-math", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED7F65B9[63], &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6278);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_1ED7F6280);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6280))
  {
    v237.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume the sign of 0 is insignificant";
    v237.n128_u64[1] = 71;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1ED7F66B8, "enable-no-signed-zeros-fp-math", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F66B8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6280);
  }
  v15 = atomic_load((unsigned __int8 *)&qword_1ED7F6288);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6288))
  {
    v237.n128_u64[0] = (unint64_t)"Enable FP math optimizations that assume approx func";
    v237.n128_u64[1] = 52;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&algn_1ED7F6739[63], "enable-approx-func-fp-math", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED7F6739[63], &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6288);
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1ED7F6290);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6290))
  {
    v237.n128_u64[0] = (unint64_t)"Enable setting the FP exceptions build attribute not to use exceptions";
    v237.n128_u64[1] = 70;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1ED7F6838, "enable-no-trapping-fp-math", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6838, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6290);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1ED7F6298);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6298))
  {
    qword_1ED7F63C8 = (uint64_t)&qword_1ED7F63D8;
    qword_1ED7F63D8 = (uint64_t)"ieee";
    unk_1ED7F63E0 = 4;
    dword_1ED7F63E8 = 0;
    qword_1ED7F63F0 = (uint64_t)"IEEE 754 denormal numbers";
    unk_1ED7F63F8 = 25;
    qword_1ED7F6400 = (uint64_t)"preserve-sign";
    unk_1ED7F6408 = 13;
    dword_1ED7F6410 = 1;
    qword_1ED7F6418 = (uint64_t)"the sign of a  flushed-to-zero number is preserved in the sign of 0";
    unk_1ED7F6420 = 67;
    qword_1ED7F6428 = (uint64_t)"positive-zero";
    unk_1ED7F6430 = 13;
    dword_1ED7F6438 = 2;
    qword_1ED7F6440 = (uint64_t)"denormals are flushed to positive zero";
    unk_1ED7F6448 = 38;
    qword_1ED7F63D0 = 0x400000003;
    __cxa_atexit((void (*)(void *))sub_1C50A49B4, &qword_1ED7F63C8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6298);
  }
  v18 = atomic_load((unsigned __int8 *)&qword_1ED7F62A0);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62A0))
  {
    v143 = sub_1C47AD050((uint64_t)&qword_1EF8F20D0, 0, 0);
    byte_1EF8F2150 = 0;
    qword_1EF8F2158 = (uint64_t)&off_1E81410C8;
    *(_QWORD *)&word_1EF8F2160 = 0;
    qword_1EF8F20D0 = (uint64_t)off_1E8141010;
    qword_1EF8F2168 = (uint64_t)&off_1E8141078;
    unk_1EF8F2170 = &qword_1EF8F20D0;
    qword_1EF8F2178 = (uint64_t)&unk_1EF8F2188;
    qword_1EF8F2180 = 0x800000000;
    qword_1EF8F2308 = (uint64_t)&off_1E81417D8;
    qword_1EF8F2320 = (uint64_t)&qword_1EF8F2308;
    llvm::cl::Option::setArgStr(v143, "denormal-fp-math", 0x10uLL);
    qword_1EF8F20F0 = (uint64_t)"Select which denormal numbers the code is permitted to require";
    unk_1EF8F20F8 = 62;
    byte_1EF8F2150 = 0;
    word_1EF8F2160 = 256;
    sub_1C50AA988((uint64_t)&qword_1EF8F20D0);
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F20D0);
    __cxa_atexit((void (*)(void *))sub_1C50A4CD0, &qword_1EF8F20D0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62A0);
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ED7F62A8);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62A8))
  {
    v144 = sub_1C47AD050((uint64_t)&qword_1EF8F2328, 0, 0);
    byte_1EF8F23A8 = 0;
    qword_1EF8F23B0 = (uint64_t)&off_1E81410C8;
    *(_QWORD *)&word_1EF8F23B8 = 0;
    qword_1EF8F2328 = (uint64_t)off_1E8141010;
    qword_1EF8F23C0 = (uint64_t)&off_1E8141078;
    unk_1EF8F23C8 = &qword_1EF8F2328;
    qword_1EF8F23D0 = (uint64_t)&unk_1EF8F23E0;
    qword_1EF8F23D8 = 0x800000000;
    qword_1EF8F2560 = (uint64_t)&off_1E81417D8;
    qword_1EF8F2578 = (uint64_t)&qword_1EF8F2560;
    llvm::cl::Option::setArgStr(v144, "denormal-fp-math-f32", 0x14uLL);
    qword_1EF8F2348 = (uint64_t)"Select which denormal numbers the code is permitted to require for float";
    unk_1EF8F2350 = 72;
    byte_1EF8F23A8 = -1;
    word_1EF8F23B8 = 511;
    sub_1C50AA988((uint64_t)&qword_1EF8F2328);
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F2328);
    __cxa_atexit((void (*)(void *))sub_1C50A4CD0, &qword_1EF8F2328, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62A8);
  }
  v20 = atomic_load((unsigned __int8 *)&qword_1ED7F62B0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62B0))
  {
    v230 = 1;
    v237.n128_u64[0] = (unint64_t)"Force codegen to assume rounding mode can change dynamically";
    v237.n128_u64[1] = 60;
    v229 = 0;
    v231 = (int *)&v229;
    sub_1C6151DC0((llvm::cl::Option *)&unk_1ED7F68F8, "enable-sign-dependent-rounding-fp-math", &v230, &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F68F8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62B0);
  }
  v21 = atomic_load((unsigned __int8 *)&qword_1ED7F62B8);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62B8))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "default";
    v239 = 7;
    v240 = 0;
    v241 = "Target default float ABI type";
    v242 = 29;
    v243 = "soft";
    v244 = 4;
    v245 = 1;
    v246 = "Soft float ABI (implied by -soft-float)";
    v247 = 39;
    v248 = "hard";
    v249 = 4;
    v250 = 2;
    v251 = "Hard float ABI (uses FP registers)";
    v252 = 34;
    v237.n128_u64[1] = 0x400000003;
    v145 = sub_1C47AD050((uint64_t)&qword_1EF8F2580, 0, 0);
    dword_1EF8F2600 = 0;
    qword_1EF8F2608 = (uint64_t)&off_1E81411C0;
    *(_QWORD *)&dword_1EF8F2610 = 0;
    qword_1EF8F2580 = (uint64_t)off_1E8141108;
    qword_1EF8F2618 = (uint64_t)&off_1E8141170;
    qword_1EF8F2620 = (uint64_t)&qword_1EF8F2580;
    qword_1EF8F2628 = (uint64_t)&unk_1EF8F2638;
    qword_1EF8F2630 = 0x800000000;
    qword_1EF8F27B8 = (uint64_t)&off_1E8141820;
    qword_1EF8F27D0 = (uint64_t)&qword_1EF8F27B8;
    llvm::cl::Option::setArgStr(v145, "float-abi", 9uLL);
    qword_1EF8F25A0 = (uint64_t)"Choose float ABI type";
    unk_1EF8F25A8 = 21;
    dword_1EF8F2600 = 0;
    byte_1EF8F2614 = 1;
    dword_1EF8F2610 = 0;
    if (v237.n128_u32[2])
    {
      v146 = v237.n128_u64[0];
      v147 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v148 = *(unsigned __int8 **)v146;
        v149 = *(_QWORD *)(v146 + 8);
        v150 = *(_DWORD *)(v146 + 16);
        v151 = *(_OWORD *)(v146 + 24);
        v231 = *(int **)v146;
        v232 = v149;
        v233 = v151;
        v234 = &off_1E81411C0;
        v236 = 1;
        v235 = v150;
        v152 = qword_1EF8F2628;
        if (qword_1EF8F2630 >= HIDWORD(qword_1EF8F2630))
        {
          v157 = qword_1EF8F2630 + 1;
          if (qword_1EF8F2628 <= (unint64_t)&v231
            && qword_1EF8F2628 + 48 * (unint64_t)qword_1EF8F2630 > (unint64_t)&v231)
          {
            v223 = (char *)&v231 - qword_1EF8F2628;
            sub_1C50AABE0(v157);
            v152 = qword_1EF8F2628;
            v153 = (int **)&v223[qword_1EF8F2628];
            goto LABEL_152;
          }
          sub_1C50AABE0(v157);
          v152 = qword_1EF8F2628;
        }
        v153 = &v231;
LABEL_152:
        v154 = v152 + 48 * qword_1EF8F2630;
        v155 = *((_OWORD *)v153 + 1);
        *(_OWORD *)v154 = *(_OWORD *)v153;
        *(_OWORD *)(v154 + 16) = v155;
        *(_QWORD *)(v154 + 32) = &off_1E81411E0;
        v156 = *((_DWORD *)v153 + 10);
        *(_BYTE *)(v154 + 44) = *((_BYTE *)v153 + 44);
        *(_DWORD *)(v154 + 40) = v156;
        *(_QWORD *)(v154 + 32) = &off_1E81411C0;
        LODWORD(qword_1EF8F2630) = qword_1EF8F2630 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F2620, v148, v149);
        v146 += 40;
      }
      while (v146 != v147);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F2580);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4D4C, &qword_1EF8F2580, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62B8);
  }
  v22 = atomic_load((unsigned __int8 *)&qword_1ED7F62C0);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62C0))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "fast";
    v239 = 4;
    v240 = 0;
    v241 = "Fuse FP ops whenever profitable";
    v242 = 31;
    v243 = "on";
    v244 = 2;
    v245 = 1;
    v246 = "Only fuse 'blessed' FP ops.";
    v247 = 27;
    v248 = "off";
    v249 = 3;
    v250 = 2;
    v251 = "Only fuse FP ops when the result won't be affected.";
    v252 = 51;
    v237.n128_u64[1] = 0x400000003;
    v158 = sub_1C47AD050((uint64_t)qword_1EF8F27D8, 0, 0);
    dword_1EF8F2858 = 0;
    qword_1EF8F2860 = (uint64_t)&off_1E81412B8;
    *(_QWORD *)&dword_1EF8F2868 = 0;
    qword_1EF8F27D8[0] = (uint64_t)off_1E8141200;
    qword_1EF8F2870 = (uint64_t)&off_1E8141268;
    qword_1EF8F2878 = (uint64_t)qword_1EF8F27D8;
    qword_1EF8F2880 = (uint64_t)&unk_1EF8F2890;
    qword_1EF8F2888 = 0x800000000;
    qword_1EF8F2A10 = (uint64_t)&off_1E8141868;
    qword_1EF8F2A28 = (uint64_t)&qword_1EF8F2A10;
    llvm::cl::Option::setArgStr(v158, "fp-contract", 0xBuLL);
    qword_1EF8F27F8 = (uint64_t)"Enable aggressive formation of fused FP ops";
    unk_1EF8F2800 = 43;
    dword_1EF8F2858 = 1;
    byte_1EF8F286C = 1;
    dword_1EF8F2868 = 1;
    if (v237.n128_u32[2])
    {
      v159 = v237.n128_u64[0];
      v160 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v161 = *(unsigned __int8 **)v159;
        v162 = *(_QWORD *)(v159 + 8);
        v163 = *(_DWORD *)(v159 + 16);
        v164 = *(_OWORD *)(v159 + 24);
        v231 = *(int **)v159;
        v232 = v162;
        v233 = v164;
        v234 = &off_1E81412B8;
        v236 = 1;
        v235 = v163;
        v165 = qword_1EF8F2880;
        if (qword_1EF8F2888 >= HIDWORD(qword_1EF8F2888))
        {
          v170 = qword_1EF8F2888 + 1;
          if (qword_1EF8F2880 <= (unint64_t)&v231
            && qword_1EF8F2880 + 48 * (unint64_t)qword_1EF8F2888 > (unint64_t)&v231)
          {
            v224 = (char *)&v231 - qword_1EF8F2880;
            sub_1C50AAD04(v170);
            v165 = qword_1EF8F2880;
            v166 = (int **)&v224[qword_1EF8F2880];
            goto LABEL_163;
          }
          sub_1C50AAD04(v170);
          v165 = qword_1EF8F2880;
        }
        v166 = &v231;
LABEL_163:
        v167 = v165 + 48 * qword_1EF8F2888;
        v168 = *((_OWORD *)v166 + 1);
        *(_OWORD *)v167 = *(_OWORD *)v166;
        *(_OWORD *)(v167 + 16) = v168;
        *(_QWORD *)(v167 + 32) = &off_1E81412D8;
        v169 = *((_DWORD *)v166 + 10);
        *(_BYTE *)(v167 + 44) = *((_BYTE *)v166 + 44);
        *(_DWORD *)(v167 + 40) = v169;
        *(_QWORD *)(v167 + 32) = &off_1E81412B8;
        LODWORD(qword_1EF8F2888) = qword_1EF8F2888 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F2878, v161, v162);
        v159 += 40;
      }
      while (v159 != v160);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F27D8);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4DC8, qword_1EF8F27D8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62C0);
  }
  v23 = atomic_load((unsigned __int8 *)&qword_1ED7F62C8);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62C8))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "auto";
    v239 = 4;
    v240 = 0;
    v241 = "Determine based on deployment target";
    v242 = 36;
    v243 = "always";
    v244 = 6;
    v245 = 1;
    v246 = "Always set the bit";
    v247 = 18;
    v248 = "never";
    v249 = 5;
    v250 = 2;
    v251 = "Never set the bit";
    v252 = 17;
    v237.n128_u64[1] = 0x400000003;
    v171 = sub_1C47AD050((uint64_t)qword_1EF8F2A30, 0, 0);
    dword_1EF8F2AB0 = 0;
    qword_1EF8F2AB8 = (uint64_t)&off_1E81413B0;
    *(_QWORD *)&dword_1EF8F2AC0 = 0;
    qword_1EF8F2A30[0] = (uint64_t)off_1E81412F8;
    qword_1EF8F2AC8 = (uint64_t)&off_1E8141360;
    qword_1EF8F2AD0 = (uint64_t)qword_1EF8F2A30;
    qword_1EF8F2AD8 = (uint64_t)&unk_1EF8F2AE8;
    qword_1EF8F2AE0 = 0x800000000;
    qword_1EF8F2C68 = (uint64_t)&off_1E81418B0;
    qword_1EF8F2C80 = (uint64_t)&qword_1EF8F2C68;
    llvm::cl::Option::setArgStr(v171, "swift-async-fp", 0xEuLL);
    qword_1EF8F2A50 = (uint64_t)"Determine when the Swift async frame pointer should be set";
    unk_1EF8F2A58 = 58;
    dword_1EF8F2AB0 = 1;
    byte_1EF8F2AC4 = 1;
    dword_1EF8F2AC0 = 1;
    if (v237.n128_u32[2])
    {
      v172 = v237.n128_u64[0];
      v173 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v174 = *(unsigned __int8 **)v172;
        v175 = *(_QWORD *)(v172 + 8);
        v176 = *(_DWORD *)(v172 + 16);
        v177 = *(_OWORD *)(v172 + 24);
        v231 = *(int **)v172;
        v232 = v175;
        v233 = v177;
        v234 = &off_1E81413B0;
        v236 = 1;
        v235 = v176;
        v178 = qword_1EF8F2AD8;
        if (qword_1EF8F2AE0 >= HIDWORD(qword_1EF8F2AE0))
        {
          v183 = qword_1EF8F2AE0 + 1;
          if (qword_1EF8F2AD8 <= (unint64_t)&v231
            && qword_1EF8F2AD8 + 48 * (unint64_t)qword_1EF8F2AE0 > (unint64_t)&v231)
          {
            v225 = (char *)&v231 - qword_1EF8F2AD8;
            sub_1C50AAE28(v183);
            v178 = qword_1EF8F2AD8;
            v179 = (int **)&v225[qword_1EF8F2AD8];
            goto LABEL_174;
          }
          sub_1C50AAE28(v183);
          v178 = qword_1EF8F2AD8;
        }
        v179 = &v231;
LABEL_174:
        v180 = v178 + 48 * qword_1EF8F2AE0;
        v181 = *((_OWORD *)v179 + 1);
        *(_OWORD *)v180 = *(_OWORD *)v179;
        *(_OWORD *)(v180 + 16) = v181;
        *(_QWORD *)(v180 + 32) = &off_1E81413D0;
        v182 = *((_DWORD *)v179 + 10);
        *(_BYTE *)(v180 + 44) = *((_BYTE *)v179 + 44);
        *(_DWORD *)(v180 + 40) = v182;
        *(_QWORD *)(v180 + 32) = &off_1E81413B0;
        LODWORD(qword_1EF8F2AE0) = qword_1EF8F2AE0 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F2AD0, v174, v175);
        v172 += 40;
      }
      while (v172 != v173);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F2A30);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4E44, qword_1EF8F2A30, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62C8);
  }
  v24 = atomic_load((unsigned __int8 *)&qword_1ED7F62D0);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62D0))
  {
    v237.n128_u64[0] = (unint64_t)"Don't place zero-initialized symbols into bss section";
    v237.n128_u64[1] = 53;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1ED7F69B8, "nozero-initialized-in-bss", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F69B8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62D0);
  }
  v25 = atomic_load((unsigned __int8 *)&qword_1ED7F62D8);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62D8))
  {
    v237.n128_u64[0] = (unint64_t)"Enable the AIX Extended Altivec ABI.";
    v237.n128_u64[1] = 36;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C61DC3C0((__int128 *)&v237, (char **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F6A78, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62D8);
  }
  v26 = atomic_load((unsigned __int8 *)&qword_1ED7F62E0);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62E0))
  {
    v184 = sub_1C47AD050((uint64_t)qword_1ED7F6B38, 0, 0);
    byte_1ED7F6BB8 = 0;
    qword_1ED7F6BC8 = 0;
    qword_1ED7F6BC0 = (uint64_t)&off_1E7F9E8D8;
    qword_1ED7F6B38[0] = (uint64_t)&unk_1E819E898;
    qword_1ED7F6BD0 = (uint64_t)&off_1E819E9A0;
    qword_1ED7F6BD8 = (uint64_t)&off_1E7F9E8F8;
    qword_1ED7F6BF0 = (uint64_t)&qword_1ED7F6BD8;
    llvm::cl::Option::setArgStr(v184, "tailcallopt", 0xBuLL);
    qword_1ED7F6B58 = (uint64_t)"Turn fastcc calls into tail calls by (potentially) changing ABI.";
    qword_1ED7F6B60 = 64;
    byte_1ED7F6BB8 = 0;
    LOWORD(qword_1ED7F6BC8) = 256;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F6B38);
    __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F6B38, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62E0);
  }
  v27 = atomic_load((unsigned __int8 *)&qword_1ED7F62E8);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62E8))
  {
    v237.n128_u64[0] = (unint64_t)"Never emit tail calls";
    v237.n128_u64[1] = 21;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)algn_1ED7F6BF8, "disable-tail-calls", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, algn_1ED7F6BF8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62E8);
  }
  v28 = atomic_load((unsigned __int8 *)&qword_1ED7F62F0);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62F0))
  {
    v237.n128_u64[0] = (unint64_t)"Order local stack symbols.";
    v237.n128_u64[1] = 26;
    LOBYTE(v230) = 1;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1ED7F6CB8, "stack-symbol-ordering", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6CB8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62F0);
  }
  v29 = atomic_load((unsigned __int8 *)&qword_1ED7F62F8);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F62F8))
  {
    v237.n128_u64[0] = (unint64_t)"Force align the stack to the minimum alignment";
    v237.n128_u64[1] = 46;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1ED7F6D78, "stackrealign", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6D78, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F62F8);
  }
  v30 = atomic_load((unsigned __int8 *)&qword_1ED7F6300);
  if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6300))
  {
    v237.n128_u64[0] = (unint64_t)"";
    v185 = sub_1C47AD050((uint64_t)&qword_1EF8F10F0, 0, 0);
    qword_1EF8F1170 = 0;
    unk_1EF8F1178 = 0;
    qword_1EF8F1198 = 0;
    unk_1EF8F11A0 = 0;
    qword_1EF8F1190 = 0;
    byte_1EF8F11A8 = 0;
    unk_1EF8F1180 = 0;
    unk_1EF8F1188 = &unk_1E819E950;
    qword_1EF8F10F0 = (uint64_t)&unk_1E819E480;
    qword_1EF8F11B0 = (uint64_t)&unk_1E819E970;
    qword_1EF8F11B8 = (uint64_t)&off_1E7FA8CB8;
    qword_1EF8F11D0 = (uint64_t)&qword_1EF8F11B8;
    llvm::cl::Option::setArgStr(v185, "trap-func", 9uLL);
    word_1EF8F10FA = word_1EF8F10FA & 0xFF9F | 0x20;
    qword_1EF8F1110 = (uint64_t)"Emit a call to trap function rather than a trap instruction";
    unk_1EF8F1118 = 59;
    sub_1C49C7D74((const char **)&v237, (uint64_t)&qword_1EF8F10F0);
    llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F10F0);
    __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1EF8F10F0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6300);
  }
  qword_1ED7F6210 = (uint64_t)&qword_1EF8F10F0;
  v31 = atomic_load((unsigned __int8 *)&qword_1ED7F6308);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6308))
  {
    v237.n128_u64[0] = (unint64_t)"Use .ctors instead of .init_array.";
    v237.n128_u64[1] = 34;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C61DC484((__int128 *)&v237, (char **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F6E38, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6308);
  }
  v32 = atomic_load((unsigned __int8 *)&qword_1ED7F6310);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6310))
  {
    v186 = sub_1C47AD050((uint64_t)qword_1ED7F6EF8, 0, 0);
    byte_1ED7F6F78 = 0;
    qword_1ED7F6F88 = 0;
    qword_1ED7F6F80 = (uint64_t)&off_1E7F9E8D8;
    qword_1ED7F6EF8[0] = (uint64_t)&unk_1E819E898;
    qword_1ED7F6F90 = (uint64_t)&off_1E819E9A0;
    qword_1ED7F6F98 = (uint64_t)&off_1E7F9E8F8;
    qword_1ED7F6FB0 = (uint64_t)&qword_1ED7F6F98;
    llvm::cl::Option::setArgStr(v186, "lower-global-dtors-via-cxa-atexit", 0x21uLL);
    qword_1ED7F6F18 = (uint64_t)"Lower llvm.global_dtors (global destructors) via __cxa_atexit";
    qword_1ED7F6F20 = 61;
    byte_1ED7F6F78 = 0;
    LOWORD(qword_1ED7F6F88) = 256;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F6EF8);
    __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F6EF8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6310);
  }
  v33 = atomic_load((unsigned __int8 *)&qword_1ED7F6318);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6318))
  {
    v237.n128_u64[0] = (unint64_t)"Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF";
    v237.n128_u64[1] = 62;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1ED7F6FB8, "relax-elf-relocations", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F6FB8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6318);
  }
  v34 = atomic_load((unsigned __int8 *)&qword_1ED7F6320);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6320))
  {
    v237.n128_u64[0] = (unint64_t)"Emit data into separate sections";
    v237.n128_u64[1] = 32;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&algn_1ED7F7039[63], "data-sections", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED7F7039[63], &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6320);
  }
  v35 = atomic_load((unsigned __int8 *)&qword_1ED7F6328);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6328))
  {
    v237.n128_u64[0] = (unint64_t)"Emit functions into separate sections";
    v237.n128_u64[1] = 37;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1ED7F7138, "function-sections", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7138, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6328);
  }
  v36 = atomic_load((unsigned __int8 *)&qword_1ED7F6330);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6330))
  {
    v237.n128_u64[0] = (unint64_t)"Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspec"
                                         "ified' visibility in XCOFF object file";
    v237.n128_u64[1] = 117;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1EF8F0248, "ignore-xcoff-visibility", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0248, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6330);
  }
  v37 = atomic_load((unsigned __int8 *)&qword_1ED7F6338);
  if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6338))
  {
    v237.n128_u64[0] = (unint64_t)"Emit the XCOFF traceback table";
    v237.n128_u64[1] = 30;
    LOBYTE(v230) = 1;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F0308, "xcoff-traceback-table", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0308, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6338);
  }
  v38 = atomic_load((unsigned __int8 *)&qword_1ED7F6340);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6340))
  {
    v237.n128_u64[0] = (unint64_t)"none";
    v187 = sub_1C47AD050((uint64_t)qword_1EF8F11D8, 0, 0);
    qword_1EF8F1258 = 0;
    unk_1EF8F1260 = 0;
    qword_1EF8F1280 = 0;
    unk_1EF8F1288 = 0;
    qword_1EF8F1278 = 0;
    byte_1EF8F1290 = 0;
    unk_1EF8F1268 = 0;
    unk_1EF8F1270 = &unk_1E819E950;
    qword_1EF8F11D8[0] = (uint64_t)&unk_1E819E480;
    qword_1EF8F1298 = (uint64_t)&unk_1E819E970;
    qword_1EF8F12A0 = (uint64_t)&off_1E7FA8CB8;
    qword_1EF8F12B8 = (uint64_t)&qword_1EF8F12A0;
    llvm::cl::Option::setArgStr(v187, "basic-block-sections", 0x14uLL);
    qword_1EF8F11F8 = (uint64_t)"Emit basic blocks into separate sections";
    unk_1EF8F1200 = 40;
    qword_1EF8F1208 = (uint64_t)"all | <function list (file)> | labels | none";
    unk_1EF8F1210 = 44;
    sub_1C49C7D74((const char **)&v237, (uint64_t)qword_1EF8F11D8);
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F11D8);
    __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1EF8F11D8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6340);
  }
  qword_1ED7F6218 = (uint64_t)qword_1EF8F11D8;
  v39 = atomic_load((unsigned __int8 *)&qword_1ED7F6348);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6348))
  {
    v188 = sub_1C47AD050((uint64_t)qword_1EF8F03C8, 0, 0);
    dword_1EF8F0448 = 0;
    qword_1EF8F0450 = (uint64_t)&off_1E7F952A8;
    *(_QWORD *)&dword_1EF8F0458 = 0;
    qword_1EF8F03C8[0] = (uint64_t)&unk_1E819E3B0;
    qword_1EF8F0460 = (uint64_t)&unk_1E819E2C0;
    qword_1EF8F0468 = (uint64_t)&off_1E7F95260;
    qword_1EF8F0480 = (uint64_t)&qword_1EF8F0468;
    llvm::cl::Option::setArgStr(v188, "tls-size", 8uLL);
    qword_1EF8F03E8 = (uint64_t)"Bit size of immediate TLS offsets";
    unk_1EF8F03F0 = 33;
    dword_1EF8F0448 = 0;
    byte_1EF8F045C = 1;
    dword_1EF8F0458 = 0;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F03C8);
    __cxa_atexit((void (*)(void *))sub_1C4785FB8, qword_1EF8F03C8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6348);
  }
  v40 = atomic_load((unsigned __int8 *)&qword_1ED7F6350);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6350))
  {
    v237.n128_u64[0] = (unint64_t)"Use emulated TLS model";
    v237.n128_u64[1] = 22;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1EF8F0488, "emulated-tls", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0488, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6350);
  }
  v41 = atomic_load((unsigned __int8 *)&qword_1ED7F6358);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6358))
  {
    v237.n128_u64[0] = (unint64_t)"Give unique names to every section";
    v237.n128_u64[1] = 34;
    LOBYTE(v230) = 1;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F0548, "unique-section-names", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0548, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6358);
  }
  v42 = atomic_load((unsigned __int8 *)&qword_1ED7F6360);
  if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6360))
  {
    v189 = sub_1C47AD050((uint64_t)qword_1EF8F0608, 0, 0);
    byte_1EF8F0688 = 0;
    qword_1EF8F0690 = (uint64_t)&off_1E7F9E8D8;
    *(_QWORD *)&word_1EF8F0698 = 0;
    qword_1EF8F0608[0] = (uint64_t)&unk_1E819E898;
    qword_1EF8F06A0 = (uint64_t)&off_1E819E9A0;
    qword_1EF8F06A8 = (uint64_t)&off_1E7F9E8F8;
    qword_1EF8F06C0 = (uint64_t)&qword_1EF8F06A8;
    llvm::cl::Option::setArgStr(v189, "unique-basic-block-section-names", 0x20uLL);
    qword_1EF8F0628 = (uint64_t)"Give unique names to every basic block section";
    unk_1EF8F0630 = 46;
    byte_1EF8F0688 = 0;
    word_1EF8F0698 = 256;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F0608);
    __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1EF8F0608, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6360);
  }
  v43 = atomic_load((unsigned __int8 *)&qword_1ED7F6368);
  if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6368))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "default";
    v239 = 7;
    v240 = 1;
    v241 = "Triple default EABI version";
    v242 = 27;
    v243 = "4";
    v244 = 1;
    v245 = 2;
    v246 = "EABI version 4";
    v247 = 14;
    v248 = "5";
    v249 = 1;
    v250 = 3;
    v251 = "EABI version 5";
    v252 = 14;
    v253 = "gnu";
    v254 = 3;
    v255 = 4;
    v256 = "EABI GNU";
    v257 = 8;
    v237.n128_u64[1] = 0x400000004;
    v190 = sub_1C47AD050((uint64_t)qword_1EF8F2C88, 0, 0);
    dword_1EF8F2D08 = 0;
    qword_1EF8F2D10 = (uint64_t)&off_1E81414A8;
    *(_QWORD *)&dword_1EF8F2D18 = 0;
    qword_1EF8F2C88[0] = (uint64_t)off_1E81413F0;
    qword_1EF8F2D20 = (uint64_t)&off_1E8141458;
    qword_1EF8F2D28 = (uint64_t)qword_1EF8F2C88;
    qword_1EF8F2D30 = (uint64_t)&unk_1EF8F2D40;
    qword_1EF8F2D38 = 0x800000000;
    qword_1EF8F2EC0 = (uint64_t)&off_1E81418F8;
    qword_1EF8F2ED8 = (uint64_t)&qword_1EF8F2EC0;
    llvm::cl::Option::setArgStr(v190, "meabi", 5uLL);
    qword_1EF8F2CA8 = (uint64_t)"Set EABI type (default depends on triple):";
    unk_1EF8F2CB0 = 42;
    dword_1EF8F2D08 = 1;
    byte_1EF8F2D1C = 1;
    dword_1EF8F2D18 = 1;
    if (v237.n128_u32[2])
    {
      v191 = v237.n128_u64[0];
      v192 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v193 = *(unsigned __int8 **)v191;
        v194 = *(_QWORD *)(v191 + 8);
        v195 = *(_DWORD *)(v191 + 16);
        v196 = *(_OWORD *)(v191 + 24);
        v231 = *(int **)v191;
        v232 = v194;
        v233 = v196;
        v234 = &off_1E81414A8;
        v236 = 1;
        v235 = v195;
        v197 = qword_1EF8F2D30;
        if (qword_1EF8F2D38 >= HIDWORD(qword_1EF8F2D38))
        {
          v202 = qword_1EF8F2D38 + 1;
          if (qword_1EF8F2D30 <= (unint64_t)&v231
            && qword_1EF8F2D30 + 48 * (unint64_t)qword_1EF8F2D38 > (unint64_t)&v231)
          {
            v226 = (char *)&v231 - qword_1EF8F2D30;
            sub_1C50AAF4C(v202);
            v197 = qword_1EF8F2D30;
            v198 = (int **)&v226[qword_1EF8F2D30];
            goto LABEL_223;
          }
          sub_1C50AAF4C(v202);
          v197 = qword_1EF8F2D30;
        }
        v198 = &v231;
LABEL_223:
        v199 = v197 + 48 * qword_1EF8F2D38;
        v200 = *((_OWORD *)v198 + 1);
        *(_OWORD *)v199 = *(_OWORD *)v198;
        *(_OWORD *)(v199 + 16) = v200;
        *(_QWORD *)(v199 + 32) = &off_1E81414C8;
        v201 = *((_DWORD *)v198 + 10);
        *(_BYTE *)(v199 + 44) = *((_BYTE *)v198 + 44);
        *(_DWORD *)(v199 + 40) = v201;
        *(_QWORD *)(v199 + 32) = &off_1E81414A8;
        LODWORD(qword_1EF8F2D38) = qword_1EF8F2D38 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F2D28, v193, v194);
        v191 += 40;
      }
      while (v191 != v192);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F2C88);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4EC0, qword_1EF8F2C88, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6368);
  }
  v44 = atomic_load((unsigned __int8 *)&qword_1ED7F6370);
  if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6370))
  {
    v237.n128_u64[0] = (unint64_t)&v238;
    v238 = "gdb";
    v239 = 3;
    v240 = 1;
    v241 = "gdb";
    v242 = 3;
    v243 = "lldb";
    v244 = 4;
    v245 = 2;
    v246 = "lldb";
    v247 = 4;
    v248 = "dbx";
    v249 = 3;
    v250 = 4;
    v251 = "dbx";
    v252 = 3;
    v253 = "sce";
    v254 = 3;
    v255 = 3;
    v256 = "SCE targets (e.g. PS4)";
    v257 = 22;
    v237.n128_u64[1] = 0x400000004;
    v203 = sub_1C47AD050((uint64_t)qword_1EF8EFFF0, 0, 0);
    dword_1EF8F0070 = 0;
    qword_1EF8F0078 = (uint64_t)&off_1E81415A0;
    *(_QWORD *)&dword_1EF8F0080 = 0;
    qword_1EF8EFFF0[0] = (uint64_t)off_1E81414E8;
    qword_1EF8F0088 = (uint64_t)&off_1E8141550;
    qword_1EF8F0090 = (uint64_t)qword_1EF8EFFF0;
    qword_1EF8F0098 = (uint64_t)&unk_1EF8F00A8;
    qword_1EF8F00A0 = 0x800000000;
    qword_1EF8F0228 = (uint64_t)&off_1E8141940;
    qword_1EF8F0240 = (uint64_t)&qword_1EF8F0228;
    llvm::cl::Option::setArgStr(v203, "debugger-tune", 0xDuLL);
    qword_1EF8F0010 = (uint64_t)"Tune debug info for a particular debugger";
    unk_1EF8F0018 = 41;
    dword_1EF8F0070 = 0;
    byte_1EF8F0084 = 1;
    dword_1EF8F0080 = 0;
    if (v237.n128_u32[2])
    {
      v204 = v237.n128_u64[0];
      v205 = v237.n128_u64[0] + 40 * v237.n128_u32[2];
      do
      {
        v206 = *(unsigned __int8 **)v204;
        v207 = *(_QWORD *)(v204 + 8);
        v208 = *(_DWORD *)(v204 + 16);
        v209 = *(_OWORD *)(v204 + 24);
        v231 = *(int **)v204;
        v232 = v207;
        v233 = v209;
        v234 = &off_1E81415A0;
        v236 = 1;
        v235 = v208;
        v210 = qword_1EF8F0098;
        if (qword_1EF8F00A0 >= HIDWORD(qword_1EF8F00A0))
        {
          v215 = qword_1EF8F00A0 + 1;
          if (qword_1EF8F0098 <= (unint64_t)&v231
            && qword_1EF8F0098 + 48 * (unint64_t)qword_1EF8F00A0 > (unint64_t)&v231)
          {
            v227 = (char *)&v231 - qword_1EF8F0098;
            sub_1C50AB070(v215);
            v210 = qword_1EF8F0098;
            v211 = (int **)&v227[qword_1EF8F0098];
            goto LABEL_234;
          }
          sub_1C50AB070(v215);
          v210 = qword_1EF8F0098;
        }
        v211 = &v231;
LABEL_234:
        v212 = v210 + 48 * qword_1EF8F00A0;
        v213 = *((_OWORD *)v211 + 1);
        *(_OWORD *)v212 = *(_OWORD *)v211;
        *(_OWORD *)(v212 + 16) = v213;
        *(_QWORD *)(v212 + 32) = &off_1E81415C0;
        v214 = *((_DWORD *)v211 + 10);
        *(_BYTE *)(v212 + 44) = *((_BYTE *)v211 + 44);
        *(_DWORD *)(v212 + 40) = v214;
        *(_QWORD *)(v212 + 32) = &off_1E81415A0;
        LODWORD(qword_1EF8F00A0) = qword_1EF8F00A0 + 1;
        llvm::cl::AddLiteralOption(qword_1EF8F0090, v206, v207);
        v204 += 40;
      }
      while (v204 != v205);
    }
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8EFFF0);
    if ((const char **)v237.n128_u64[0] != &v238)
      free((void *)v237.n128_u64[0]);
    __cxa_atexit((void (*)(void *))sub_1C50A4F3C, qword_1EF8EFFF0, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6370);
  }
  v45 = atomic_load((unsigned __int8 *)&qword_1ED7F6378);
  if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6378))
  {
    v237.n128_u64[0] = (unint64_t)"Emit a section containing stack size metadata";
    v237.n128_u64[1] = 45;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F06C8, "stack-size-section", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F06C8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6378);
  }
  v46 = atomic_load((unsigned __int8 *)&qword_1ED7F6380);
  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6380))
  {
    v237.n128_u64[0] = (unint64_t)"Emit an address-significance table";
    v237.n128_u64[1] = 34;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C61DC548((__int128 *)&v237, (char **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1EF8F0788, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6380);
  }
  v47 = atomic_load((unsigned __int8 *)&qword_1ED7F6388);
  if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6388))
  {
    v237.n128_u64[0] = (unint64_t)"Emit call site debug information, if debug information is enabled.";
    v237.n128_u64[1] = 66;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1EF8F0848, "emit-call-site-info", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0848, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6388);
  }
  v48 = atomic_load((unsigned __int8 *)&qword_1ED7F6390);
  if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6390))
  {
    v237.n128_u64[0] = (unint64_t)"Enable debug info for the debug entry values.";
    v237.n128_u64[1] = 45;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F0908, "debug-entry-values", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0908, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6390);
  }
  v49 = atomic_load((unsigned __int8 *)&qword_1ED7F6398);
  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F6398))
  {
    v237.n128_u64[0] = (unint64_t)"Split out cold basic blocks from machine functions based on profile information";
    v237.n128_u64[1] = 79;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1EF8F09C8, "split-machine-functions", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F09C8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F6398);
  }
  v50 = atomic_load((unsigned __int8 *)&qword_1ED7F63A0);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F63A0))
  {
    v237.n128_u64[0] = (unint64_t)"Always emit a debug frame section.";
    v237.n128_u64[1] = 34;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F0A88, "force-dwarf-frame-section", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0A88, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F63A0);
  }
  v51 = atomic_load((unsigned __int8 *)&qword_1ED7F63A8);
  if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F63A8))
  {
    v237.n128_u64[0] = (unint64_t)"Don't emit xray_fn_idx section";
    v237.n128_u64[1] = 30;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F0B48, "no-xray-index", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0B48, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F63A8);
  }
  v52 = atomic_load((unsigned __int8 *)&qword_1ED7F63B0);
  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F63B0))
  {
    v237.n128_u64[0] = (unint64_t)"use strict dwarf";
    v237.n128_u64[1] = 16;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C614D990((uint64_t)&unk_1EF8F0C08, "strict-dwarf", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0C08, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F63B0);
  }
  v53 = atomic_load((unsigned __int8 *)&qword_1ED7F63B8);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F63B8))
  {
    v216 = sub_1C47AD050((uint64_t)qword_1EF8F0CC8, 0, 0);
    dword_1EF8F0D48 = 0;
    qword_1EF8F0D50 = (uint64_t)&off_1E7F952A8;
    unk_1EF8F0D58 = 0;
    qword_1EF8F0CC8[0] = (uint64_t)&unk_1E819E3B0;
    qword_1EF8F0D60 = (uint64_t)&unk_1E819E2C0;
    qword_1EF8F0D68 = (uint64_t)&off_1E7F95260;
    qword_1EF8F0D80 = (uint64_t)&qword_1EF8F0D68;
    llvm::cl::Option::setArgStr(v216, "align-loops", 0xBuLL);
    qword_1EF8F0CE8 = (uint64_t)"Default alignment for loops";
    unk_1EF8F0CF0 = 27;
    llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1EF8F0CC8);
    __cxa_atexit((void (*)(void *))sub_1C4785FB8, qword_1EF8F0CC8, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F63B8);
  }
  v54 = atomic_load((unsigned __int8 *)&qword_1ED7F63C0);
  if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7F63C0))
  {
    v237.n128_u64[0] = (unint64_t)"Instrument functions with a call to __CheckForDebuggerJustMyCode";
    v237.n128_u64[1] = 64;
    LOBYTE(v230) = 0;
    v231 = &v230;
    sub_1C6136B80((uint64_t)&unk_1EF8F0D88, "enable-jmc-instrument", &v237, (_BYTE **)&v231);
    __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F0D88, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED7F63C0);
  }
  llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags((uint64_t)&v228);
  return this;
}

_QWORD *sub_1C50A4924(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_1E81409D8;
  v2 = (_QWORD *)(a1 + 184);
  v3 = *(_QWORD **)(a1 + 208);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  v5 = *(void **)(a1 + 152);
  if (v5)
  {
    *(_QWORD *)(a1 + 160) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 128);
  sub_1C4765410(&v7);
  return sub_1C47A80D0((_QWORD *)a1);
}

void **sub_1C50A49B4(void **a1)
{
  void **v2;
  void **v3;

  v3 = a1 + 2;
  v2 = (void **)*a1;
  if (v2 != v3)
    free(v2);
  return a1;
}

_QWORD *sub_1C50A49E8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140A40;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140AA8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4A64(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140B38;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140BA0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4AE0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140C30;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140C98;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4B5C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140D28;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140D90;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4BD8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140E20;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140E88;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4C54(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140F18;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140F80;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4CD0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8141010;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141078;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4D4C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8141108;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141170;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4DC8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8141200;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141268;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4E44(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81412F8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141360;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4EC0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81413F0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141458;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C50A4F3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81414E8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141550;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t llvm::codegen::getBBSectionsMode(llvm::codegen *this, llvm::TargetOptions *a2)
{
  char v3;
  std::string::size_type size;
  std::string::size_type v5;
  std::string *p_p;
  size_t v7;
  BOOL v8;
  BOOL v9;
  char v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  size_t v15;
  BOOL v16;
  BOOL v17;
  char v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string *v21;
  size_t v22;
  BOOL v23;
  BOOL v24;
  llvm *v25;
  uint64_t v26;
  _QWORD *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  void *v30;
  std::string *v31;
  size_t v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38[2];
  uint64_t v39;
  std::string __p;
  __int16 v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (byte_1EF8F126F < 0)
    sub_1C47EBC30(&__p, (void *)qword_1EF8F1258, unk_1EF8F1260);
  else
    __p = *(std::string *)(qword_1ED7F6218 + 128);
  v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size != 3)
  {
    v9 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_25;
LABEL_23:
    if (!v9)
      goto LABEL_26;
    return 0;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v5 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v5 >= 3)
    v7 = 3;
  else
    v7 = v5;
  v8 = memcmp(p_p, "all", v7) == 0;
  v9 = v5 == 3 && v8;
  if ((v3 & 0x80) == 0)
    goto LABEL_23;
LABEL_25:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v9)
    return 0;
LABEL_26:
  if (byte_1EF8F126F < 0)
    sub_1C47EBC30(&__p, (void *)qword_1EF8F1258, unk_1EF8F1260);
  else
    __p = *(std::string *)(qword_1ED7F6218 + 128);
  v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v12 = __p.__r_.__value_.__l.__size_;
  if (v12 != 6)
  {
    v17 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_50;
LABEL_48:
    if (!v17)
      goto LABEL_51;
    return 2;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v13 >= 6)
    v15 = 6;
  else
    v15 = v13;
  v16 = memcmp(v14, "labels", v15) == 0;
  v17 = v13 == 6 && v16;
  if ((v11 & 0x80) == 0)
    goto LABEL_48;
LABEL_50:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v17)
    return 2;
LABEL_51:
  if (byte_1EF8F126F < 0)
    sub_1C47EBC30(&__p, (void *)qword_1EF8F1258, unk_1EF8F1260);
  else
    __p = *(std::string *)(qword_1ED7F6218 + 128);
  v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v19 = __p.__r_.__value_.__l.__size_;
  if (v19 == 4)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v20 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v20 >= 4)
      v22 = 4;
    else
      v22 = v20;
    v23 = memcmp(v21, "none", v22) == 0;
    v24 = v20 == 4 && v23;
    if (v18 < 0)
    {
LABEL_75:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v24)
        goto LABEL_76;
      return 4;
    }
  }
  else
  {
    v24 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_75;
  }
  if (v24)
    return 4;
LABEL_76:
  if (byte_1EF8F126F < 0)
  {
    sub_1C47EBC30(v38, (void *)qword_1EF8F1258, unk_1EF8F1260);
  }
  else
  {
    *(_OWORD *)v38 = *(_OWORD *)(qword_1ED7F6218 + 128);
    v39 = *(_QWORD *)(qword_1ED7F6218 + 144);
  }
  v41 = 260;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  v25 = (llvm *)sub_1C5E1F6CC((unsigned __int8 *)&__p, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v42);
  if (SHIBYTE(v39) < 0)
    operator delete(v38[0]);
  if ((v43 & 1) != 0)
  {
    v28 = (llvm::raw_ostream *)llvm::errs(v25);
    v29 = v28;
    v30 = (void *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v30 > 0x36uLL)
    {
      qmemcpy(v30, "Error loading basic block sections function list file: ", 55);
      *((_QWORD *)v28 + 4) += 55;
    }
    else
    {
      v29 = llvm::raw_ostream::write(v28, "Error loading basic block sections function list file: ", 0x37uLL);
    }
    v38[0] = (void *)v42[0];
    v38[1] = (void *)v42[1];
    std::error_code::message(&__p, (const std::error_code *)v38);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &__p;
    else
      v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v32 = __p.__r_.__value_.__l.__size_;
    v33 = llvm::raw_ostream::write(v29, (const char *)v31, v32);
    v34 = (_BYTE *)*((_QWORD *)v33 + 4);
    if (*((_BYTE **)v33 + 3) == v34)
    {
      llvm::raw_ostream::write(v33, "\n", 1uLL);
    }
    else
    {
      *v34 = 10;
      ++*((_QWORD *)v33 + 4);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = v42[0];
    if (v42[0])
    {
      v27 = (_QWORD *)operator new();
      *v27 = &off_1E8141988;
      v27[1] = 0;
      v27[2] = 0;
      v27[3] = v26;
    }
    else
    {
      v27 = 0;
    }
    v42[0] = 0;
    v35 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 5) = v26;
    *((_QWORD *)this + 6) = v27;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  if ((v43 & 1) == 0)
  {
    if (v42[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v42[0] + 8))(v42[0]);
  }
  return 1;
}

void llvm::codegen::InitTargetOptionsFromCodeGenFlags(llvm::codegen *this@<X0>, uint64_t a2@<X8>)
{
  llvm::TargetOptions *v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  BOOL v12;
  char v13;
  int BBSectionsMode;
  unsigned int v15;
  int v16;
  __int16 v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void **v37;

  sub_1C4D7B55C(a2);
  *(_DWORD *)(a2 + 96) = dword_1EF8F2858;
  v6 = *(_WORD *)(a2 + 12) & 0xF800 | byte_1ED7F64F8 | (2 * byte_1ED7F65B8) | (4 * byte_1ED7F6678);
  v7 = 16 * byte_1ED7F6738;
  v8 = 32 * byte_1ED7F67F8;
  v9 = 8 * byte_1ED7F68B8;
  *(_WORD *)(a2 + 112) = byte_1EF8F2150 | (byte_1EF8F2150 << 8);
  v10 = byte_1ED7F6978 << 7;
  if (dword_1EF8F2600)
    *(_DWORD *)(a2 + 92) = dword_1EF8F2600;
  *(_WORD *)(a2 + 12) = v10 | v9 | v8 | v7 | v6 | (byte_1ED7F6AF8 << 6) | (byte_1ED7F6A38 << 8) | (byte_1ED7F6BB8 << 9) | (byte_1ED7F6D38 << 10);
  *(_BYTE *)(a2 + 24) = (*(_BYTE *)(a2 + 24) & 0xFC | byte_1ED7F6EB8 | (2 * byte_1ED7F6F78)) ^ 1;
  v12 = *((_DWORD *)this + 11) == 9 || (*((_DWORD *)this + 6) - 63) < 2;
  if (word_1ED7F7080)
    v13 = byte_1ED7F70F8;
  else
    v13 = v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a2 + 32) & 0xFFFFFFE0 | byte_1ED7F7038 | (4 * (v13 != 0)) | (2 * byte_1ED7F71B8) | (8 * byte_1EF8F02C8) | (16 * byte_1EF8F0388);
  BBSectionsMode = llvm::codegen::getBBSectionsMode((llvm::codegen *)a2, v5);
  v15 = (dword_1EF8F0448 << 9) | *(_DWORD *)(a2 + 32) & 0xFEA8019F | (32
                                                                                     * byte_1EF8F05C8) | (byte_1EF8F0688 << 6) | (byte_1EF8F0508 << 17);
  v16 = word_1EF8F0490 != 0;
  *(_DWORD *)(a2 + 116) = dword_1EF8F1A48;
  *(_DWORD *)(a2 + 32) = v15 | (v16 << 18) | (byte_1EF8F0748 << 20) | (byte_1EF8F0A48 << 22) | (byte_1EF8F0808 << 24);
  *(_DWORD *)(a2 + 36) = BBSectionsMode;
  v17 = byte_1EF8F0C88;
  LOWORD(v15) = *(_WORD *)(a2 + 56) & 0xFD8A | byte_1EF8F08C8 | (4 * byte_1EF8F0988) | (16 * byte_1EF8F0B08) | (32 * byte_1EF8F0BC8);
  *(_DWORD *)(a2 + 88) = dword_1EF8F0D48;
  *(_WORD *)(a2 + 56) = v15 | (v17 << 6) | (byte_1EF8F0E08 << 9);
  llvm::mc::InitMCTargetOptionsFromFlags((uint64_t)&v23);
  *(_QWORD *)(a2 + 120) = v23;
  *(_DWORD *)(a2 + 128) = v24;
  v18 = (void **)(a2 + 136);
  if (*(char *)(a2 + 159) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = v25;
  *(_QWORD *)(a2 + 152) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(v25) = 0;
  v19 = (void **)(a2 + 160);
  if (*(char *)(a2 + 183) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v27;
  *(_QWORD *)(a2 + 176) = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  v20 = (void **)(a2 + 184);
  if (*(char *)(a2 + 207) < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = v29;
  *(_QWORD *)(a2 + 200) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(v29) = 0;
  v21 = (void **)(a2 + 208);
  if (*(char *)(a2 + 231) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 224) = v32;
  HIBYTE(v32) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a2 + 232) = v33;
  *(_QWORD *)(a2 + 248) = v34;
  sub_1C4D8305C((void **)(a2 + 256));
  *(_OWORD *)(a2 + 256) = v35;
  *(_QWORD *)(a2 + 272) = v36;
  v36 = 0;
  v35 = 0uLL;
  v37 = (void **)&v35;
  sub_1C4765410(&v37);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  v22 = dword_1EF8F2D08;
  *(_DWORD *)(a2 + 100) = dword_1EF8F1598;
  *(_DWORD *)(a2 + 104) = v22;
  *(_DWORD *)(a2 + 108) = dword_1EF8F0070;
  *(_DWORD *)(a2 + 20) = dword_1EF8F2AB0;
}

void llvm::codegen::getCPUStr(llvm::codegen *this@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  void *v4;
  unint64_t v5;
  void **v6;
  size_t v7;
  _BOOL4 v8;
  const char *HostCPUName;
  unint64_t v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *__p[2];
  uint64_t v18;

  if (byte_1EF8F109F < 0)
  {
    this = (llvm::codegen *)sub_1C47EBC30(__p, (void *)qword_1EF8F1088, unk_1EF8F1090);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(qword_1ED7F6208 + 128);
    v18 = *(_QWORD *)(qword_1ED7F6208 + 144);
  }
  v3 = HIBYTE(v18);
  if (v18 >= 0)
    v4 = (void *)(HIBYTE(v18) & 0x7F);
  else
    v4 = __p[1];
  if (v4 != (void *)6)
  {
    v8 = 0;
    if (v18 < 0)
      goto LABEL_28;
LABEL_23:
    if (!v8)
      goto LABEL_29;
LABEL_24:
    HostCPUName = llvm::sys::getHostCPUName(this);
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v11 = HostCPUName;
    v12 = v10;
    if (v10 >= 0x17)
    {
      v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v14 = v10 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      a2[1] = v12;
      a2[2] = v15 | 0x8000000000000000;
      *a2 = v16;
      a2 = v16;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (!v10)
        goto LABEL_35;
    }
    memmove(a2, v11, v12);
LABEL_35:
    *((_BYTE *)a2 + v12) = 0;
    return;
  }
  if (v18 >= 0)
    v5 = HIBYTE(v18);
  else
    v5 = (unint64_t)__p[1];
  if (v18 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v5 >= 6)
    v7 = 6;
  else
    v7 = v5;
  this = (llvm::codegen *)memcmp(v6, "native", v7);
  v8 = v5 == 6 && (_DWORD)this == 0;
  if ((v3 & 0x80) == 0)
    goto LABEL_23;
LABEL_28:
  operator delete(__p[0]);
  if (v8)
    goto LABEL_24;
LABEL_29:
  if (byte_1EF8F109F < 0)
  {
    sub_1C47EBC30(a2, (void *)qword_1EF8F1088, unk_1EF8F1090);
  }
  else
  {
    v13 = *(_QWORD *)(qword_1ED7F6208 + 144);
    *(_OWORD *)a2 = *(_OWORD *)(qword_1ED7F6208 + 128);
    a2[2] = v13;
  }
}

void llvm::codegen::getFeaturesStr(std::string *a1@<X8>)
{
  char v3;
  void *v4;
  unint64_t v5;
  void **v6;
  size_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  char *v10;
  char *v11;
  char v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  void *__p[2];
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  void **v21;

  v19 = 0uLL;
  v20 = 0;
  llvm::SubtargetFeatures::Split((unint64_t *)&v19, (uint64_t)"", 0);
  if (byte_1EF8F109F < 0)
  {
    sub_1C47EBC30(__p, (void *)qword_1EF8F1088, unk_1EF8F1090);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(qword_1ED7F6208 + 128);
    v18 = *(_QWORD *)(qword_1ED7F6208 + 144);
  }
  v3 = HIBYTE(v18);
  if (v18 >= 0)
    v4 = (void *)(HIBYTE(v18) & 0x7F);
  else
    v4 = __p[1];
  if (v4 != (void *)6)
  {
    v9 = 0;
    if ((v18 & 0x8000000000000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v18 >= 0)
    v5 = HIBYTE(v18);
  else
    v5 = (unint64_t)__p[1];
  if (v18 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v5 >= 6)
    v7 = 6;
  else
    v7 = v5;
  v8 = memcmp(v6, "native", v7) == 0;
  v9 = v5 == 6 && v8;
  if (v3 < 0)
LABEL_23:
    operator delete(__p[0]);
LABEL_24:
  if (v9)
  {
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0x1000000000;
    sub_1C4F02264((uint64_t)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  sub_1C484333C(__p, qword_1EF8F0EC8, qword_1EF8F0ED0, 0xAAAAAAAAAAAAAAABLL * ((qword_1EF8F0ED0 - qword_1EF8F0EC8) >> 3));
  v10 = (char *)__p[0];
  v11 = (char *)__p[1];
  while (v10 != v11)
  {
    v12 = v10[23];
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = v10;
    else
      v14 = *(char **)v10;
    v15 = v12 & 0x7F;
    if (v13)
      v16 = *((_QWORD *)v10 + 1);
    else
      v16 = v15;
    llvm::SubtargetFeatures::AddFeature(&v19, v14, v16, 1);
    v10 += 24;
  }
  v21 = __p;
  sub_1C4765410(&v21);
  sub_1C5021A04((std::string *)v19.i64[0], (std::string *)v19.i64[1], ",", 1uLL, a1);
  __p[0] = &v19;
  sub_1C4765410((void ***)__p);
}

void llvm::codegen::getFeatureList(_QWORD *a1@<X8>)
{
  char v3;
  void *v4;
  unint64_t v5;
  void **v6;
  size_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  char *v10;
  char *v11;
  char v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  void *__p[2];
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  void **v21;

  v19 = 0uLL;
  v20 = 0;
  llvm::SubtargetFeatures::Split((unint64_t *)&v19, (uint64_t)"", 0);
  if (byte_1EF8F109F < 0)
  {
    sub_1C47EBC30(__p, (void *)qword_1EF8F1088, unk_1EF8F1090);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(qword_1ED7F6208 + 128);
    v18 = *(_QWORD *)(qword_1ED7F6208 + 144);
  }
  v3 = HIBYTE(v18);
  if (v18 >= 0)
    v4 = (void *)(HIBYTE(v18) & 0x7F);
  else
    v4 = __p[1];
  if (v4 != (void *)6)
  {
    v9 = 0;
    if ((v18 & 0x8000000000000000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v18 >= 0)
    v5 = HIBYTE(v18);
  else
    v5 = (unint64_t)__p[1];
  if (v18 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v5 >= 6)
    v7 = 6;
  else
    v7 = v5;
  v8 = memcmp(v6, "native", v7) == 0;
  v9 = v5 == 6 && v8;
  if (v3 < 0)
LABEL_23:
    operator delete(__p[0]);
LABEL_24:
  if (v9)
  {
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0x1000000000;
    sub_1C4F02264((uint64_t)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  sub_1C484333C(__p, qword_1EF8F0EC8, qword_1EF8F0ED0, 0xAAAAAAAAAAAAAAABLL * ((qword_1EF8F0ED0 - qword_1EF8F0EC8) >> 3));
  v10 = (char *)__p[0];
  v11 = (char *)__p[1];
  while (v10 != v11)
  {
    v12 = v10[23];
    v13 = v12 < 0;
    if (v12 >= 0)
      v14 = v10;
    else
      v14 = *(char **)v10;
    v15 = v12 & 0x7F;
    if (v13)
      v16 = *((_QWORD *)v10 + 1);
    else
      v16 = v15;
    llvm::SubtargetFeatures::AddFeature(&v19, v14, v16, 1);
    v10 += 24;
  }
  v21 = __p;
  sub_1C4765410(&v21);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1C484333C(a1, v19.i64[0], v19.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v19.i64[1] - v19.i64[0]) >> 3));
  __p[0] = &v19;
  sub_1C4765410((void ***)__p);
}

uint64_t llvm::codegen::renderBoolStringAttr(uint64_t **a1, unsigned __int8 *a2, size_t a3, int a4)
{
  size_t v7;
  char *v8;
  unsigned int *v9;

  if (a4)
    v7 = 4;
  else
    v7 = 5;
  if (a4)
    v8 = "true";
  else
    v8 = "false";
  v9 = llvm::Attribute::get(*a1, a2, a3, (unsigned __int8 *)v8, v7);
  return sub_1C532EADC((uint64_t)(a1 + 1), a2, a3, (uint64_t)v9);
}

void llvm::codegen::setFunctionAttributes(unsigned __int8 *a1, size_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 v29;
  unint64_t v30;
  unsigned int v31;
  int i;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  unint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int8 v50;
  unint64_t v51;
  unsigned int v52;
  int j;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  char *v58;
  size_t v59;
  unsigned int *v60;
  size_t v61;
  char *v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int8 v71;
  unint64_t v72;
  unsigned int v73;
  int k;
  unsigned int v75;
  uint64_t v76;
  _QWORD *v77;
  size_t v79;
  char *v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned __int8 v86;
  unint64_t v87;
  unsigned int v88;
  int m;
  unsigned int v90;
  uint64_t v91;
  _QWORD *v92;
  size_t v94;
  char *v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned __int8 v101;
  unint64_t v102;
  unsigned int v103;
  int n;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  size_t v109;
  char *v110;
  unsigned int *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  int ii;
  unsigned int v121;
  uint64_t v122;
  _QWORD *v123;
  BOOL v124;
  size_t v126;
  char *v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  int jj;
  unsigned int v138;
  uint64_t v139;
  _QWORD *v140;
  BOOL v141;
  size_t v143;
  char *v144;
  unsigned int *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned __int8 v150;
  unint64_t v151;
  unsigned int v152;
  int kk;
  unsigned int v154;
  uint64_t v155;
  _QWORD *v156;
  __int128 v158;
  unsigned __int8 *v159;
  size_t v160;
  unsigned int *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  int mm;
  unsigned int v171;
  uint64_t *v172;
  uint64_t v173;
  BOOL v174;
  __int128 v176;
  unsigned __int8 *v177;
  size_t v178;
  unsigned int *v179;
  uint64_t nn;
  uint64_t v181;
  uint64_t v182;
  uint64_t i1;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unsigned __int8 *v189;
  size_t v190;
  unsigned int *v191;
  const void *v192;
  unsigned __int8 *v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char v207;
  char v208;
  void *__dst[2];
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  _BYTE __p[24];
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  int v221;
  void **v222;
  uint64_t *v223;
  void *v224[2];
  _QWORD v225[11];

  v5 = a5;
  v225[8] = *MEMORY[0x1E0C80C00];
  v8 = **(uint64_t ***)a5;
  v9 = *(_QWORD *)(a5 + 112);
  v215 = v9;
  v223 = v8;
  v224[0] = v225;
  v224[1] = (void *)0x800000000;
  if (a2)
  {
    v10 = a2;
    v12 = v8;
    if (v9)
    {
      v12 = v8;
      if (*(_DWORD *)(v9 + 8))
      {
        v13 = *(_QWORD *)(v9 + 40);
        v12 = v8;
        if (v13)
        {
          v14 = *(_DWORD *)(v13 + 40);
          v12 = v8;
          if (v14)
          {
            v15 = *(_QWORD *)(v13 + 24);
            v16 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v16 & 1) == 0)
            {
              v194 = a1;
              v195 = __cxa_guard_acquire(&qword_1ED7EAC88);
              a1 = v194;
              v10 = a2;
              if (v195)
              {
                v196 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v196 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v196;
                __cxa_guard_release(&qword_1ED7EAC88);
                a1 = v194;
                v10 = a2;
              }
            }
            v17 = 0x9DDFEA08EB382D69
                * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                                       * (qword_1ED7EAC80 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
            v18 = (-348639895 * ((v17 >> 47) ^ v17)) ^ 0x74656772;
            v19 = 1;
            v5 = a5;
            while (1)
            {
              v20 = v18 & (v14 - 1);
              v21 = (uint64_t *)(v15 + 24 * v20);
              v22 = *v21;
              if (*v21 == -1)
              {
                if ("target-cpu" == (char *)-1)
                  goto LABEL_24;
              }
              else if (v22 == -2)
              {
                if ("target-cpu" == (char *)-2)
                  goto LABEL_24;
              }
              else if (v21[1] == 10 && *(_QWORD *)v22 == 0x632D746567726174 && *(_WORD *)(v22 + 8) == 30064)
              {
                goto LABEL_24;
              }
              if (v22 == -1)
                break;
              v18 = v19 + v20;
              ++v19;
            }
            v12 = v223;
          }
        }
      }
    }
    v24 = llvm::Attribute::get(v12, "target-cpu", 0xAuLL, a1, v10);
    sub_1C532EADC((uint64_t)v224, "target-cpu", 0xAuLL, (uint64_t)v24);
  }
LABEL_24:
  if (!a4)
    goto LABEL_55;
  v25 = *(_QWORD *)(v5 + 112);
  if (!v25)
    goto LABEL_54;
  if (!*(_DWORD *)(v25 + 8))
    goto LABEL_54;
  v26 = *(_QWORD *)(v25 + 40);
  if (!v26)
    goto LABEL_54;
  v27 = *(_DWORD *)(v26 + 40);
  if (!v27)
    goto LABEL_54;
  v28 = *(_QWORD *)(v26 + 24);
  v29 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v200 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v200 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v200;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v30 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  v31 = (-348639895 * ((v30 >> 47) ^ v30)) ^ 0x74616566;
  for (i = 1; ; ++i)
  {
    v33 = v31 & (v27 - 1);
    v34 = v28 + 24 * v33;
    v35 = *(_QWORD **)v34;
    if (*(_QWORD *)v34 == -1)
    {
      if ("target-features" == (char *)-1)
        goto LABEL_44;
      goto LABEL_33;
    }
    if (v35 != (_QWORD *)-2)
      break;
    if ("target-features" == (char *)-2)
      goto LABEL_44;
LABEL_33:
    if (v35 == (_QWORD *)-1)
      goto LABEL_54;
    v31 = i + v33;
  }
  if (*(_QWORD *)(v34 + 8) != 15)
    goto LABEL_33;
  if (*v35 != 0x662D746567726174 || *(_QWORD *)((char *)v35 + 7) != 0x7365727574616566)
    goto LABEL_33;
LABEL_44:
  v37 = *(_QWORD *)(v34 + 16);
  if (!v37 || (v38 = *(unsigned int *)(v37 + 16), !(_DWORD)v38))
  {
LABEL_54:
    v45 = llvm::Attribute::get(v223, "target-features", 0xFuLL, a3, a4);
    sub_1C532EADC((uint64_t)v224, "target-features", 0xFuLL, (uint64_t)v45);
    goto LABEL_55;
  }
  v39 = (const void *)(v37 + *(unsigned int *)(v37 + 12) + 25);
  *(_QWORD *)__p = &v217;
  *(_OWORD *)&__p[8] = xmmword_1C64638F0;
  if (v38 >= 0x101)
  {
    v192 = v39;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__p, &v217, v38, 1);
    v39 = v192;
    v41 = *(uint64_t **)__p;
    v40 = *(_QWORD *)&__p[8];
  }
  else
  {
    v40 = 0;
    v41 = &v217;
  }
  memcpy((char *)v41 + v40, v39, v38);
  v42 = *(_QWORD *)&__p[8] + v38;
  *(_QWORD *)&__p[8] = v42;
  if (v42 + 1 > *(_QWORD *)&__p[16])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__p, &v217, v42 + 1, 1);
    v42 = *(_QWORD *)&__p[8];
  }
  *(_BYTE *)(*(_QWORD *)__p + v42) = 44;
  v43 = *(_QWORD *)&__p[8] + 1;
  *(_QWORD *)&__p[8] = v43;
  if (*(_QWORD *)&__p[16] < v43 + a4)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__p, &v217, v43 + a4, 1);
    v43 = *(_QWORD *)&__p[8];
  }
  memcpy((void *)(*(_QWORD *)__p + v43), a3, a4);
  *(_QWORD *)&__p[8] += a4;
  v44 = llvm::Attribute::get(v223, "target-features", 0xFuLL, *(unsigned __int8 **)__p, *(size_t *)&__p[8]);
  sub_1C532EADC((uint64_t)v224, "target-features", 0xFuLL, (uint64_t)v44);
  if (*(uint64_t **)__p != &v217)
    free(*(void **)__p);
LABEL_55:
  if (!word_1EF8F1E80)
    goto LABEL_83;
  v46 = *(_QWORD *)(v5 + 112);
  if (v46)
  {
    if (*(_DWORD *)(v46 + 8))
    {
      v47 = *(_QWORD *)(v46 + 40);
      if (v47)
      {
        v48 = *(_DWORD *)(v47 + 40);
        if (v48)
        {
          v49 = *(_QWORD *)(v47 + 24);
          v50 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v197 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v197 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v197;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v51 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1ED7EAC80 ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
          v52 = (-348639895 * ((v51 >> 47) ^ v51)) ^ 0x696F702D;
          for (j = 1; ; ++j)
          {
            v54 = v52 & (v48 - 1);
            v55 = v49 + 24 * v54;
            v56 = *(_QWORD **)v55;
            if (*(_QWORD *)v55 == -1)
            {
              if ("frame-pointer" == (char *)-1)
                goto LABEL_83;
            }
            else if (v56 == (_QWORD *)-2)
            {
              if ("frame-pointer" == (char *)-2)
                goto LABEL_83;
            }
            else if (*(_QWORD *)(v55 + 8) == 13
                   && *v56 == 0x6F702D656D617266
                   && *(_QWORD *)((char *)v56 + 5) == 0x7265746E696F702DLL)
            {
              goto LABEL_83;
            }
            if (v56 == (_QWORD *)-1)
              break;
            v52 = j + v54;
          }
        }
      }
    }
  }
  switch(dword_1EF8F1EF8)
  {
    case 0:
      v58 = "none";
      v59 = 4;
      goto LABEL_82;
    case 2:
      v58 = "all";
      v59 = 3;
LABEL_82:
      v60 = llvm::Attribute::get(v223, "frame-pointer", 0xDuLL, (unsigned __int8 *)v58, v59);
      sub_1C532EADC((uint64_t)v224, "frame-pointer", 0xDuLL, (uint64_t)v60);
      break;
    case 1:
      v58 = "non-leaf";
      v59 = 8;
      goto LABEL_82;
  }
LABEL_83:
  if (word_1ED7F6C00)
  {
    if (byte_1ED7F6C78)
      v61 = 4;
    else
      v61 = 5;
    if (byte_1ED7F6C78)
      v62 = "true";
    else
      v62 = "false";
    v63 = llvm::Attribute::get(v223, "disable-tail-calls", 0x12uLL, (unsigned __int8 *)v62, v61);
    sub_1C532EADC((uint64_t)v224, "disable-tail-calls", 0x12uLL, (uint64_t)v63);
  }
  if (byte_1ED7F6DF8)
  {
    v64 = llvm::Attribute::get(v223, "stackrealign", 0xCuLL, 0, 0);
    sub_1C532EADC((uint64_t)v224, "stackrealign", 0xCuLL, (uint64_t)v64);
  }
  v65 = *(_QWORD *)(v5 + 40);
  if (!v65)
    goto LABEL_97;
  v214 = 260;
  v211 = (void *)(v65 + 216);
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v211);
  v66 = v217;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((v66 - 27) >= 3)
  {
LABEL_97:
    if (word_1ED7F6480)
    {
      v67 = *(_QWORD *)(v5 + 112);
      if (v67)
      {
        if (*(_DWORD *)(v67 + 8))
        {
          v68 = *(_QWORD *)(v67 + 40);
          if (v68)
          {
            v69 = *(_DWORD *)(v68 + 40);
            if (v69)
            {
              v70 = *(_QWORD *)(v68 + 24);
              v71 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v201 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v201 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v201;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v72 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xFEC0C4B7E4C7DBB4)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1ED7EAC80 ^ 0xFEC0C4B7E4C7DBB4)) >> 47) ^ 0x98EDA1D185B4B5C1);
              v73 = (-348639895 * ((v72 >> 47) ^ v72)) ^ 0x2D70662D;
              for (k = 1; ; ++k)
              {
                v75 = v73 & (v69 - 1);
                v76 = v70 + 24 * v75;
                v77 = *(_QWORD **)v76;
                if (*(_QWORD *)v76 == -1)
                {
                  if ("unsafe-fp-math" == (char *)-1)
                    goto LABEL_125;
                }
                else if (v77 == (_QWORD *)-2)
                {
                  if ("unsafe-fp-math" == (char *)-2)
                    goto LABEL_125;
                }
                else if (*(_QWORD *)(v76 + 8) == 14
                       && *v77 == 0x662D656661736E75
                       && *(_QWORD *)((char *)v77 + 6) == 0x6874616D2D70662DLL)
                {
                  goto LABEL_125;
                }
                if (v77 == (_QWORD *)-1)
                  break;
                v73 = k + v75;
              }
            }
          }
        }
      }
      if (byte_1ED7F64F8)
        v79 = 4;
      else
        v79 = 5;
      if (byte_1ED7F64F8)
        v80 = "true";
      else
        v80 = "false";
      v81 = llvm::Attribute::get(v223, "unsafe-fp-math", 0xEuLL, (unsigned __int8 *)v80, v79);
      sub_1C532EADC((uint64_t)v224, "unsafe-fp-math", 0xEuLL, (uint64_t)v81);
    }
LABEL_125:
    if (word_1ED7F6540)
    {
      v82 = *(_QWORD *)(v5 + 112);
      if (v82)
      {
        if (*(_DWORD *)(v82 + 8))
        {
          v83 = *(_QWORD *)(v82 + 40);
          if (v83)
          {
            v84 = *(_DWORD *)(v83 + 40);
            if (v84)
            {
              v85 = *(_QWORD *)(v83 + 24);
              v86 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v202 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v202 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v202;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v87 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xE10BB686ABF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (qword_1ED7EAC80 ^ 0xE10BB686ABF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
              v88 = (-348639895 * ((v87 >> 47) ^ v87)) ^ 0x2D70662D;
              for (m = 1; ; ++m)
              {
                v90 = v88 & (v84 - 1);
                v91 = v85 + 24 * v90;
                v92 = *(_QWORD **)v91;
                if (*(_QWORD *)v91 == -1)
                {
                  if ("no-infs-fp-math" == (char *)-1)
                    goto LABEL_153;
                }
                else if (v92 == (_QWORD *)-2)
                {
                  if ("no-infs-fp-math" == (char *)-2)
                    goto LABEL_153;
                }
                else if (*(_QWORD *)(v91 + 8) == 15
                       && *v92 == 0x2D73666E692D6F6ELL
                       && *(_QWORD *)((char *)v92 + 7) == 0x6874616D2D70662DLL)
                {
                  goto LABEL_153;
                }
                if (v92 == (_QWORD *)-1)
                  break;
                v88 = m + v90;
              }
            }
          }
        }
      }
      if (byte_1ED7F65B8)
        v94 = 4;
      else
        v94 = 5;
      if (byte_1ED7F65B8)
        v95 = "true";
      else
        v95 = "false";
      v96 = llvm::Attribute::get(v223, "no-infs-fp-math", 0xFuLL, (unsigned __int8 *)v95, v94);
      sub_1C532EADC((uint64_t)v224, "no-infs-fp-math", 0xFuLL, (uint64_t)v96);
    }
LABEL_153:
    if (word_1ED7F6600)
    {
      v97 = *(_QWORD *)(v5 + 112);
      if (v97)
      {
        if (*(_DWORD *)(v97 + 8))
        {
          v98 = *(_QWORD *)(v97 + 40);
          if (v98)
          {
            v99 = *(_DWORD *)(v98 + 40);
            if (v99)
            {
              v100 = *(_QWORD *)(v98 + 24);
              v101 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v203 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v203 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v203;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v102 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xE10BBE89ACF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                                          * (qword_1ED7EAC80 ^ 0xE10BBE89ACF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
              v103 = (-348639895 * ((v102 >> 47) ^ v102)) ^ 0x2D70662D;
              for (n = 1; ; ++n)
              {
                v105 = v103 & (v99 - 1);
                v106 = v100 + 24 * v105;
                v107 = *(_QWORD **)v106;
                if (*(_QWORD *)v106 == -1)
                {
                  if ("no-nans-fp-math" == (char *)-1)
                    goto LABEL_181;
                }
                else if (v107 == (_QWORD *)-2)
                {
                  if ("no-nans-fp-math" == (char *)-2)
                    goto LABEL_181;
                }
                else if (*(_QWORD *)(v106 + 8) == 15
                       && *v107 == 0x2D736E616E2D6F6ELL
                       && *(_QWORD *)((char *)v107 + 7) == 0x6874616D2D70662DLL)
                {
                  goto LABEL_181;
                }
                if (v107 == (_QWORD *)-1)
                  break;
                v103 = n + v105;
              }
            }
          }
        }
      }
      if (byte_1ED7F6678)
        v109 = 4;
      else
        v109 = 5;
      if (byte_1ED7F6678)
        v110 = "true";
      else
        v110 = "false";
      v111 = llvm::Attribute::get(v223, "no-nans-fp-math", 0xFuLL, (unsigned __int8 *)v110, v109);
      sub_1C532EADC((uint64_t)v224, "no-nans-fp-math", 0xFuLL, (uint64_t)v111);
    }
LABEL_181:
    if (word_1ED7F66C0)
    {
      v112 = *(_QWORD *)(v5 + 112);
      if (v112)
      {
        if (*(_DWORD *)(v112 + 8))
        {
          v113 = *(_QWORD *)(v112 + 40);
          if (v113)
          {
            v114 = *(_DWORD *)(v113 + 40);
            if (v114)
            {
              v115 = *(_QWORD *)(v113 + 24);
              v116 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v204 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v204 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v204;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v117 = __ROR8__(qword_1ED7EAC80 ^ 0xFC9BC67DB8AC7E3, 30);
              v118 = 0x9DDFEA08EB382D69
                   * ((qword_1ED7EAC80 - 0x102CBA84B1F06A04) ^ ((0x9DDFEA08EB382D69
                                                                 * ((v117 + 0x4E390F61D0A552DLL) ^ (qword_1ED7EAC80
                                                                                                  - 0x102CBA84B1F06A04))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v117 + 0x4E390F61D0A552DLL) ^ (qword_1ED7EAC80 - 0x102CBA84B1F06A04))));
              v119 = -348639895 * ((v118 >> 47) ^ v118);
              for (ii = 1; ; ++ii)
              {
                v121 = v119 & (v114 - 1);
                v122 = v115 + 24 * v121;
                v123 = *(_QWORD **)v122;
                if (*(_QWORD *)v122 == -1)
                {
                  if ("no-signed-zeros-fp-math" == (char *)-1)
                    goto LABEL_212;
                }
                else if (v123 == (_QWORD *)-2)
                {
                  if ("no-signed-zeros-fp-math" == (char *)-2)
                    goto LABEL_212;
                }
                else if (*(_QWORD *)(v122 + 8) == 23)
                {
                  v124 = *v123 == 0x656E6769732D6F6ELL && v123[1] == 0x2D736F72657A2D64;
                  if (v124 && *(_QWORD *)((char *)v123 + 15) == 0x6874616D2D70662DLL)
                    goto LABEL_212;
                }
                if (v123 == (_QWORD *)-1)
                  break;
                v119 = ii + v121;
              }
            }
          }
        }
      }
      if (byte_1ED7F6738)
        v126 = 4;
      else
        v126 = 5;
      if (byte_1ED7F6738)
        v127 = "true";
      else
        v127 = "false";
      v128 = llvm::Attribute::get(v223, "no-signed-zeros-fp-math", 0x17uLL, (unsigned __int8 *)v127, v126);
      sub_1C532EADC((uint64_t)v224, "no-signed-zeros-fp-math", 0x17uLL, (uint64_t)v128);
    }
LABEL_212:
    if (word_1ED7F6780)
    {
      v129 = *(_QWORD *)(v5 + 112);
      if (v129)
      {
        if (*(_DWORD *)(v129 + 8))
        {
          v130 = *(_QWORD *)(v129 + 40);
          if (v130)
          {
            v131 = *(_DWORD *)(v130 + 40);
            if (v131)
            {
              v132 = *(_QWORD *)(v130 + 24);
              v133 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v133 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v205 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v205 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v205;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v134 = __ROR8__(qword_1ED7EAC80 ^ 0xFC9BC67DB8AC7E3, 30);
              v135 = 0x9DDFEA08EB382D69
                   * ((qword_1ED7EAC80 - 0x49BE07A926BA825ELL) ^ ((0x9DDFEA08EB382D69
                                                                 * ((v134 + 0x23F44D17BE4D1E1) ^ (qword_1ED7EAC80
                                                                                                  - 0x49BE07A926BA825ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v134 + 0x23F44D17BE4D1E1) ^ (qword_1ED7EAC80 - 0x49BE07A926BA825ELL))));
              v136 = -348639895 * ((v135 >> 47) ^ v135);
              for (jj = 1; ; ++jj)
              {
                v138 = v136 & (v131 - 1);
                v139 = v132 + 24 * v138;
                v140 = *(_QWORD **)v139;
                if (*(_QWORD *)v139 == -1)
                {
                  if ("approx-func-fp-math" == (char *)-1)
                    goto LABEL_243;
                }
                else if (v140 == (_QWORD *)-2)
                {
                  if ("approx-func-fp-math" == (char *)-2)
                    goto LABEL_243;
                }
                else if (*(_QWORD *)(v139 + 8) == 19)
                {
                  v141 = *v140 == 0x662D786F72707061 && v140[1] == 0x6D2D70662D636E75;
                  if (v141 && *(_QWORD *)((char *)v140 + 11) == 0x6874616D2D70662DLL)
                    goto LABEL_243;
                }
                if (v140 == (_QWORD *)-1)
                  break;
                v136 = jj + v138;
              }
            }
          }
        }
      }
      if (byte_1ED7F67F8)
        v143 = 4;
      else
        v143 = 5;
      if (byte_1ED7F67F8)
        v144 = "true";
      else
        v144 = "false";
      v145 = llvm::Attribute::get(v223, "approx-func-fp-math", 0x13uLL, (unsigned __int8 *)v144, v143);
      sub_1C532EADC((uint64_t)v224, "approx-func-fp-math", 0x13uLL, (uint64_t)v145);
    }
  }
LABEL_243:
  if (word_1EF8F20D8)
  {
    v146 = *(_QWORD *)(v5 + 112);
    if (v146)
    {
      if (*(_DWORD *)(v146 + 8))
      {
        v147 = *(_QWORD *)(v146 + 40);
        if (v147)
        {
          v148 = *(_DWORD *)(v147 + 40);
          if (v148)
          {
            v149 = *(_QWORD *)(v147 + 24);
            v150 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v198 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v198 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v198;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v151 = 0x9DDFEA08EB382D69
                 * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xA5C05060E034814)) ^ ((0x9DDFEA08EB382D69
                                                                                       * (qword_1ED7EAC80 ^ 0xA5C05060E034814)) >> 47) ^ 0x663D6874616D2D70);
            v152 = (-348639895 * ((v151 >> 47) ^ v151)) ^ 0x2D70662D;
            for (kk = 1; ; ++kk)
            {
              v154 = v152 & (v148 - 1);
              v155 = v149 + 24 * v154;
              v156 = *(_QWORD **)v155;
              if (*(_QWORD *)v155 == -1)
              {
                if ("denormal-fp-math" == (char *)-1)
                  goto LABEL_278;
              }
              else if (v156 == (_QWORD *)-2)
              {
                if ("denormal-fp-math" == (char *)-2)
                  goto LABEL_278;
              }
              else if (*(_QWORD *)(v155 + 8) == 16
                     && *v156 == 0x6C616D726F6E6564
                     && v156[1] == 0x6874616D2D70662DLL)
              {
                goto LABEL_278;
              }
              if (v156 == (_QWORD *)-1)
                break;
              v152 = kk + v154;
            }
          }
        }
      }
    }
    v207 = byte_1EF8F2150;
    v208 = byte_1EF8F2150;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    *(_DWORD *)&__p[8] = 0;
    v219 = 0;
    v220 = 0;
    *(_QWORD *)__p = &unk_1E81A7208;
    v222 = &v211;
    v221 = 0;
    v217 = 0;
    v218 = 0;
    *(_QWORD *)&__p[16] = 0;
    sub_1C61DC254((llvm::raw_ostream *)&v207, (llvm::raw_ostream *)__p);
    if (*((char *)v222 + 23) < 0)
    {
      sub_1C47EBC30(__dst, *v222, (unint64_t)v222[1]);
    }
    else
    {
      v158 = *(_OWORD *)v222;
      v210 = v222[2];
      *(_OWORD *)__dst = v158;
    }
    *(_QWORD *)__p = off_1E81A6E70;
    if (v221 == 1 && *(_QWORD *)&__p[16])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&__p[16], 0x1000C8077774924);
    if (SHIBYTE(v213) < 0)
      operator delete(v211);
    if (SHIBYTE(v210) >= 0)
      v159 = (unsigned __int8 *)__dst;
    else
      v159 = (unsigned __int8 *)__dst[0];
    if (SHIBYTE(v210) >= 0)
      v160 = HIBYTE(v210) & 0x7F;
    else
      v160 = (size_t)__dst[1];
    v161 = llvm::Attribute::get(v223, "denormal-fp-math", 0x10uLL, v159, v160);
    sub_1C532EADC((uint64_t)v224, "denormal-fp-math", 0x10uLL, (uint64_t)v161);
    if (SHIBYTE(v210) < 0)
      operator delete(__dst[0]);
  }
LABEL_278:
  if (word_1EF8F2330)
  {
    v162 = *(_QWORD *)(v5 + 112);
    if (v162)
    {
      if (*(_DWORD *)(v162 + 8))
      {
        v163 = *(_QWORD *)(v162 + 40);
        if (v163)
        {
          v164 = *(_DWORD *)(v163 + 40);
          if (v164)
          {
            v165 = *(_QWORD *)(v163 + 24);
            v166 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v199 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v199 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v199;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v167 = __ROR8__(qword_1ED7EAC80 ^ 0x9D169799249550A3, 30);
            v168 = 0x9DDFEA08EB382D69
                 * ((qword_1ED7EAC80 - 0x19036E9E735A94C5) ^ ((0x9DDFEA08EB382D69
                                                               * ((v167 + 0x60D41C67E817EB41) ^ (qword_1ED7EAC80
                                                                                                 - 0x19036E9E735A94C5))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v167 + 0x60D41C67E817EB41) ^ (qword_1ED7EAC80 - 0x19036E9E735A94C5))));
            v169 = -348639895 * ((v168 >> 47) ^ v168);
            for (mm = 1; ; ++mm)
            {
              v171 = v169 & (v164 - 1);
              v172 = (uint64_t *)(v165 + 24 * v171);
              v173 = *v172;
              if (*v172 == -1)
              {
                if ("denormal-fp-math-f32" == (char *)-1)
                  goto LABEL_316;
              }
              else if (v173 == -2)
              {
                if ("denormal-fp-math-f32" == (char *)-2)
                  goto LABEL_316;
              }
              else if (v172[1] == 20)
              {
                v174 = *(_QWORD *)v173 == 0x6C616D726F6E6564 && *(_QWORD *)(v173 + 8) == 0x6874616D2D70662DLL;
                if (v174 && *(_DWORD *)(v173 + 16) == 842229293)
                  goto LABEL_316;
              }
              if (v173 == -1)
                break;
              v169 = mm + v171;
            }
          }
        }
      }
    }
    v207 = byte_1EF8F23A8;
    v208 = byte_1EF8F23A8;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    *(_DWORD *)&__p[8] = 0;
    v219 = 0;
    v220 = 0;
    *(_QWORD *)__p = &unk_1E81A7208;
    v222 = &v211;
    v221 = 0;
    v217 = 0;
    v218 = 0;
    *(_QWORD *)&__p[16] = 0;
    sub_1C61DC254((llvm::raw_ostream *)&v207, (llvm::raw_ostream *)__p);
    if (*((char *)v222 + 23) < 0)
    {
      sub_1C47EBC30(__dst, *v222, (unint64_t)v222[1]);
    }
    else
    {
      v176 = *(_OWORD *)v222;
      v210 = v222[2];
      *(_OWORD *)__dst = v176;
    }
    *(_QWORD *)__p = off_1E81A6E70;
    if (v221 == 1 && *(_QWORD *)&__p[16])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&__p[16], 0x1000C8077774924);
    if (SHIBYTE(v213) < 0)
      operator delete(v211);
    if (SHIBYTE(v210) >= 0)
      v177 = (unsigned __int8 *)__dst;
    else
      v177 = (unsigned __int8 *)__dst[0];
    if (SHIBYTE(v210) >= 0)
      v178 = HIBYTE(v210) & 0x7F;
    else
      v178 = (size_t)__dst[1];
    v179 = llvm::Attribute::get(v223, "denormal-fp-math-f32", 0x14uLL, v177, v178);
    sub_1C532EADC((uint64_t)v224, "denormal-fp-math-f32", 0x14uLL, (uint64_t)v179);
    if (SHIBYTE(v210) < 0)
      operator delete(__dst[0]);
  }
LABEL_316:
  if (word_1EF8F10F8)
  {
    for (nn = *(_QWORD *)(a5 + 80); nn != a5 + 72; nn = *(_QWORD *)(nn + 8))
    {
      v181 = nn - 24;
      if (!nn)
        v181 = 0;
      v182 = v181 + 40;
      for (i1 = *(_QWORD *)(v181 + 48); i1 != v182; i1 = *(_QWORD *)(i1 + 8))
      {
        v184 = i1 - 24;
        if (!i1)
          v184 = 0;
        v185 = *(unsigned __int8 *)(v184 + 16);
        if (v185 == 84)
          v186 = v184;
        else
          v186 = 0;
        if (i1)
        {
          if (v185 == 84)
          {
            v187 = *(_QWORD *)(v186 - 32);
            if (v187)
            {
              if (!*(_BYTE *)(v187 + 16) && *(_QWORD *)(v187 + 24) == *(_QWORD *)(v186 + 72))
              {
                v188 = *(_DWORD *)(v187 + 36);
                if (v188 == 295 || v188 == 59)
                {
                  if (byte_1EF8F1187 < 0)
                  {
                    sub_1C47EBC30(__p, (void *)qword_1EF8F1170, unk_1EF8F1178);
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)(qword_1ED7F6210 + 128);
                    *(_QWORD *)&__p[16] = *(_QWORD *)(qword_1ED7F6210 + 144);
                  }
                  if (__p[23] >= 0)
                    v189 = __p;
                  else
                    v189 = *(unsigned __int8 **)__p;
                  if (__p[23] >= 0)
                    v190 = __p[23] & 0x7F;
                  else
                    v190 = *(_QWORD *)&__p[8];
                  v191 = llvm::Attribute::get(v8, "trap-func-name", 0xEuLL, v189, v190);
                  *(_QWORD *)(v186 + 64) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v186 + 64), **(llvm::LLVMContext ***)v186, -1, (uint64_t)v191);
                  if ((__p[23] & 0x80000000) != 0)
                    operator delete(*(void **)__p);
                }
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)(a5 + 112) = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v215, (llvm::LLVMContext *)v8, -1, (const llvm::AttrBuilder *)&v223);
  if (v224[0] != v225)
    free(v224[0]);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;

  v5 = a5 + 24;
  v6 = *(_QWORD *)(a5 + 32);
  if (v6 != a5 + 24)
  {
    do
    {
      if (v6)
        v11 = v6 - 56;
      else
        v11 = 0;
      llvm::codegen::setFunctionAttributes(a1, a2, a3, a4, v11);
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6 != v5);
  }
}

_QWORD *sub_1C50A7650(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_1E81409D8;
  v2 = (_QWORD *)(a1 + 184);
  v3 = *(_QWORD **)(a1 + 208);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  v5 = *(void **)(a1 + 152);
  if (v5)
  {
    *(_QWORD *)(a1 + 160) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 128);
  sub_1C4765410(&v7);
  return sub_1C47A80D0((_QWORD *)a1);
}

uint64_t sub_1C50A76E0(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  void *__p[2];
  unint64_t v30;
  __int128 __dst;
  unint64_t v32;

  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  if (!__src)
  {
    __dst = 0uLL;
    v32 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_40;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v32 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v32) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
LABEL_13:
  *(_OWORD *)__p = __dst;
  v30 = v32;
  v13 = *(_QWORD *)(a1 + 136);
  if (v13 >= *(_QWORD *)(a1 + 144))
  {
    v15 = sub_1C4D9AEFC((unint64_t *)(a1 + 128), (uint64_t)__p);
  }
  else
  {
    if (SHIBYTE(v30) < 0)
    {
      sub_1C47EBC30(*(_BYTE **)(a1 + 136), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      v14 = *(_OWORD *)__p;
      *(_QWORD *)(v13 + 16) = v30;
      *(_OWORD *)v13 = v14;
    }
    v15 = v13 + 24;
  }
  *(_QWORD *)(a1 + 136) = v15;
  *(_WORD *)(a1 + 12) = a2;
  v17 = *(char **)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  if ((unint64_t)v17 >= v16)
  {
    v19 = *(char **)(a1 + 152);
    v20 = (v17 - v19) >> 2;
    v21 = v20 + 1;
    if (!((unint64_t)(v20 + 1) >> 62))
    {
      v22 = v16 - (_QWORD)v19;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 62)
          goto LABEL_42;
        v24 = (char *)operator new(4 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = a2;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(_QWORD *)(a1 + 152) = v25;
      *(_QWORD *)(a1 + 160) = v18;
      *(_QWORD *)(a1 + 168) = &v24[4 * v23];
      if (v19)
        operator delete(v19);
      goto LABEL_36;
    }
LABEL_40:
    abort();
  }
  *(_DWORD *)v17 = a2;
  v18 = v17 + 4;
LABEL_36:
  *(_QWORD *)(a1 + 160) = v18;
  v27 = *(_QWORD *)(a1 + 208);
  if (!v27)
  {
    sub_1C485C2F0();
LABEL_42:
    sub_1C4764EE4();
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 48))(v27, __p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1C50A78F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;

  a1[20] = a1[19];
  v2 = a1[16];
  for (i = a1[17]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[17] = v2;
}

_QWORD *sub_1C50A7944(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140AA8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A7984(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A7AA4(v17);
  }
}

uint64_t sub_1C50A7AA4(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A7ABC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140A40;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140AA8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A7B4C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A7B58(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A7B68(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8140AF8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A7BD4(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A7BE8(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A7BF0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140AA8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A7C40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A7C48(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A7C5C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A7C70(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A7C84(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A7CB0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140BA0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A7CF0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A7E10(v17);
  }
}

uint64_t sub_1C50A7E10(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A7E28(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140B38;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140BA0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A7EB8(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A7EC4(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A7ED4(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8140BF0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A7F40(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A7F54(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A7F5C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140BA0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A7FAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A7FB4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A7FC8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A7FDC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A7FF0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A801C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140C98;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A805C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A817C(v17);
  }
}

uint64_t sub_1C50A817C(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A8194(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140C30;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140C98;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A8224(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A8230(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A8240(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8140CE8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A82AC(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A82C0(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A82C8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140C98;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A8318(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A8320(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A8334(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A8348(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A835C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A8388(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140D90;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A83C8(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A84E8(v17);
  }
}

uint64_t sub_1C50A84E8(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A8500(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140D28;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140D90;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A8590(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A859C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A85AC(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8140DE0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A8618(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A862C(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A8634(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140D90;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A8684(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A868C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A86A0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A86B4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A86C8(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A86F4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140E88;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A8734(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A8854(v17);
  }
}

uint64_t sub_1C50A8854(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A886C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140E20;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140E88;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A88FC(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A8908(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A8918(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8140ED8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A8984(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A8998(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A89A0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140E88;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A89F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A89F8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A8A0C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A8A20(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A8A34(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A8A60(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140F80;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A8AA0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A8BC0(v17);
  }
}

uint64_t sub_1C50A8BC0(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A8BD8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8140F18;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8140F80;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A8C68(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A8C74(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A8C84(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8140FD0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A8CF0(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A8D04(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A8D0C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8140F80;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A8D5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A8D64(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A8D78(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A8D8C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A8DA0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A8DCC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141078;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A8E0C(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_BYTE *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_BYTE *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A8F2C(v17);
  }
}

uint64_t sub_1C50A8F2C(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A8F44(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8141010;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141078;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A8FD4(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A8FE0(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A8FF0(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  char v5;
  char v6;

  if (a3)
  {
    LOBYTE(v3) = *((_BYTE *)result + 128);
LABEL_5:
    v4 = &off_1E81410C8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 145))
  {
    v3 = *((unsigned __int8 *)result + 128);
    if (*((unsigned __int8 *)result + 144) != v3)
      goto LABEL_5;
  }
  return result;
}

_BYTE *sub_1C50A905C(_BYTE *result)
{
  char v1;

  v1 = result[145];
  if (v1)
    v1 = result[144];
  result[128] = v1;
  return result;
}

_QWORD *sub_1C50A9070(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A9078(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141078;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A90C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A90D0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A90E4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A90F8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A910C(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 9) && *(_BYTE *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

_QWORD *sub_1C50A9138(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141170;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A9178(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A9298(v17);
  }
}

uint64_t sub_1C50A9298(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A92B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8141108;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141170;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A9340(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A934C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A935C(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81411C0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A93C8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A93DC(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A93E4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141170;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A9434(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A943C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A9450(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A9464(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A9478(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A94A4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141268;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A94E4(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A9604(v17);
  }
}

uint64_t sub_1C50A9604(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A961C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8141200;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141268;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A96AC(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A96B8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A96C8(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81412B8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A9734(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A9748(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A9750(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141268;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A97A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A97A8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A97BC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A97D0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A97E4(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A9810(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141360;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A9850(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A9970(v17);
  }
}

uint64_t sub_1C50A9970(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A9988(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81412F8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141360;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A9A18(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A9A24(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A9A34(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81413B0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A9AA0(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A9AB4(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A9ABC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141360;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A9B0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A9B14(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A9B28(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A9B3C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A9B50(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A9B7C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141458;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A9BBC(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50A9CDC(v17);
  }
}

uint64_t sub_1C50A9CDC(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50A9CF4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81413F0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141458;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50A9D84(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50A9D90(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50A9DA0(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81414A8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50A9E0C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50A9E20(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50A9E28(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141458;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50A9E78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50A9E80(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50A9E94(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50A9EA8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50A9EBC(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C50A9EE8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141550;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C50A9F28(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C50AA048(v17);
  }
}

uint64_t sub_1C50AA048(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C50AA060(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81414E8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8141550;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C50AA0F0(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C50AA0FC(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C50AA10C(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E81415A0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C50AA178(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C50AA18C(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C50AA194(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8141550;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50AA1E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C50AA1EC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C50AA200(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C50AA214(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C50AA228(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C50AA25C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA270()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141628;
  return result;
}

void sub_1C50AA294(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141628;
}

void sub_1C50AA2B0(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F1368, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F1368;
  if ((_DWORD)qword_1EF8F1370)
  {
    v3 = qword_1EF8F1368 + 48 * qword_1EF8F1370;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8140B18;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8140AF8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F1368;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F1378)
    free(v2);
  qword_1EF8F1368 = (uint64_t)v1;
  HIDWORD(qword_1EF8F1370) = v7;
}

void sub_1C50AA380()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA394()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141670;
  return result;
}

void sub_1C50AA3B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141670;
}

void sub_1C50AA3D4(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F15C0, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F15C0;
  if ((_DWORD)qword_1EF8F15C8)
  {
    v3 = qword_1EF8F15C0 + 48 * qword_1EF8F15C8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8140C10;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8140BF0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F15C0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F15D0)
    free(v2);
  qword_1EF8F15C0 = (uint64_t)v1;
  HIDWORD(qword_1EF8F15C8) = v7;
}

void sub_1C50AA4A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA4B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81416B8;
  return result;
}

void sub_1C50AA4DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81416B8;
}

void sub_1C50AA4F8(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F1818, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F1818;
  if ((_DWORD)qword_1EF8F1820)
  {
    v3 = qword_1EF8F1818 + 48 * qword_1EF8F1820;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8140D08;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8140CE8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F1818;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F1828)
    free(v2);
  qword_1EF8F1818 = (uint64_t)v1;
  HIDWORD(qword_1EF8F1820) = v7;
}

void sub_1C50AA5C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA5DC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141700;
  return result;
}

void sub_1C50AA600(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141700;
}

void sub_1C50AA61C(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F1A70, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F1A70;
  if ((_DWORD)qword_1EF8F1A78)
  {
    v3 = qword_1EF8F1A70 + 48 * qword_1EF8F1A78;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8140E00;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8140DE0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F1A70;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F1A80)
    free(v2);
  qword_1EF8F1A70 = (uint64_t)v1;
  HIDWORD(qword_1EF8F1A78) = v7;
}

void sub_1C50AA6EC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA700()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141748;
  return result;
}

void sub_1C50AA724(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141748;
}

void sub_1C50AA740(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F1CC8, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F1CC8;
  if ((_DWORD)qword_1EF8F1CD0)
  {
    v3 = qword_1EF8F1CC8 + 48 * qword_1EF8F1CD0;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8140EF8;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8140ED8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F1CC8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F1CD8)
    free(v2);
  qword_1EF8F1CC8 = (uint64_t)v1;
  HIDWORD(qword_1EF8F1CD0) = v7;
}

void sub_1C50AA810()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA824()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141790;
  return result;
}

void sub_1C50AA848(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141790;
}

void sub_1C50AA864(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F1F20, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F1F20;
  if ((_DWORD)qword_1EF8F1F28)
  {
    v3 = qword_1EF8F1F20 + 48 * qword_1EF8F1F28;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8140FF0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8140FD0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F1F20;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F1F30)
    free(v2);
  qword_1EF8F1F20 = (uint64_t)v1;
  HIDWORD(qword_1EF8F1F28) = v7;
}

void sub_1C50AA934()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AA948()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81417D8;
  return result;
}

void sub_1C50AA96C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81417D8;
}

void sub_1C50AA988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned __int8 *v5;
  size_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t (**v19)();
  char v20;
  char v21;

  if ((_DWORD)qword_1ED7F63D0)
  {
    v2 = qword_1ED7F63C8;
    v3 = qword_1ED7F63C8 + 40 * qword_1ED7F63D0;
    v4 = (unint64_t *)(a1 + 168);
    do
    {
      v5 = *(unsigned __int8 **)v2;
      v6 = *(_QWORD *)(v2 + 8);
      v7 = *(_DWORD *)(v2 + 16);
      v8 = *(_OWORD *)(v2 + 24);
      v17[0] = *(_QWORD *)v2;
      v17[1] = v6;
      v18 = v8;
      v19 = &off_1E81410C8;
      v21 = 1;
      v20 = v7;
      v9 = *(unsigned int *)(a1 + 176);
      v10 = *(_QWORD *)(a1 + 168);
      if (v9 >= *(_DWORD *)(a1 + 180))
      {
        v14 = v9 + 1;
        v15 = v10 + 48 * v9 > (unint64_t)v17;
        if (v10 <= (unint64_t)v17 && v15)
        {
          v16 = (char *)v17 - v10;
          sub_1C50AAAD8((uint64_t)v4, v14);
          v10 = *v4;
          v11 = &v16[*v4];
          goto LABEL_5;
        }
        sub_1C50AAAD8((uint64_t)v4, v14);
        v10 = *v4;
      }
      v11 = (char *)v17;
LABEL_5:
      v12 = v10 + 48 * *(unsigned int *)(a1 + 176);
      v13 = *((_OWORD *)v11 + 1);
      *(_OWORD *)v12 = *(_OWORD *)v11;
      *(_OWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v12 + 32) = &off_1E81410E8;
      *(_WORD *)(v12 + 40) = *((_WORD *)v11 + 20);
      *(_QWORD *)(v12 + 32) = &off_1E81410C8;
      ++*(_DWORD *)(a1 + 176);
      llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 160), v5, v6);
      v2 += 40;
    }
    while (v2 != v3);
  }
}

void sub_1C50AAAD8(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  unint64_t v10;

  v10 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v10);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &off_1E81410E8;
      *((_WORD *)v7 + 20) = *((_WORD *)v4 + 20);
      *((_QWORD *)v7 + 4) = &off_1E81410C8;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v9 = v10;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v9;
}

void sub_1C50AAB8C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AABA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141820;
  return result;
}

void sub_1C50AABC4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141820;
}

void sub_1C50AABE0(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F2628, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F2628;
  if ((_DWORD)qword_1EF8F2630)
  {
    v3 = qword_1EF8F2628 + 48 * qword_1EF8F2630;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E81411E0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E81411C0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F2628;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F2638)
    free(v2);
  qword_1EF8F2628 = (uint64_t)v1;
  HIDWORD(qword_1EF8F2630) = v7;
}

void sub_1C50AACB0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AACC4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141868;
  return result;
}

void sub_1C50AACE8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141868;
}

void sub_1C50AAD04(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F2880, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F2880;
  if ((_DWORD)qword_1EF8F2888)
  {
    v3 = qword_1EF8F2880 + 48 * qword_1EF8F2888;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E81412D8;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E81412B8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F2880;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F2890)
    free(v2);
  qword_1EF8F2880 = (uint64_t)v1;
  HIDWORD(qword_1EF8F2888) = v7;
}

void sub_1C50AADD4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AADE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81418B0;
  return result;
}

void sub_1C50AAE0C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81418B0;
}

void sub_1C50AAE28(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F2AD8, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F2AD8;
  if ((_DWORD)qword_1EF8F2AE0)
  {
    v3 = qword_1EF8F2AD8 + 48 * qword_1EF8F2AE0;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E81413D0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E81413B0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F2AD8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F2AE8)
    free(v2);
  qword_1EF8F2AD8 = (uint64_t)v1;
  HIDWORD(qword_1EF8F2AE0) = v7;
}

void sub_1C50AAEF8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AAF0C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81418F8;
  return result;
}

void sub_1C50AAF30(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81418F8;
}

void sub_1C50AAF4C(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F2D30, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F2D30;
  if ((_DWORD)qword_1EF8F2D38)
  {
    v3 = qword_1EF8F2D30 + 48 * qword_1EF8F2D38;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E81414C8;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E81414A8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F2D30;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F2D40)
    free(v2);
  qword_1EF8F2D30 = (uint64_t)v1;
  HIDWORD(qword_1EF8F2D38) = v7;
}

void sub_1C50AB01C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C50AB030()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8141940;
  return result;
}

void sub_1C50AB054(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8141940;
}

void sub_1C50AB070(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1EF8F0098, a1, 48, &v8);
  v2 = (_OWORD *)qword_1EF8F0098;
  if ((_DWORD)qword_1EF8F00A0)
  {
    v3 = qword_1EF8F0098 + 48 * qword_1EF8F00A0;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E81415C0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E81415A0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1EF8F0098;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1EF8F00A8)
    free(v2);
  qword_1EF8F0098 = (uint64_t)v1;
  HIDWORD(qword_1EF8F00A0) = v7;
}

uint64_t sub_1C50AB13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v14;
  int v15;

  *(_QWORD *)a1 = &off_1E81419D8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x600000000;
  *(_DWORD *)(a1 + 112) = 0;
  v6 = *(unsigned int *)(v5 + 16);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (char *)operator new(8 * v6);
    *(_QWORD *)(a1 + 120) = v8;
    v9 = &v8[8 * v6];
    *(_QWORD *)(a1 + 136) = v9;
    bzero(v8, v7);
    *(_QWORD *)(a1 + 128) = v9;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  v10 = *(unsigned int *)(v5 + 16);
  v15 = 0;
  sub_1C5065358((_QWORD *)(a1 + 168), v10, &v15);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16);
  v14 = 0;
  sub_1C5065358((_QWORD *)(a1 + 192), v11, &v14);
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
  *(_QWORD *)(a1 + 216) = a1 + 232;
  *(_QWORD *)(a1 + 224) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 216), (v12 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 280) = v12;
  return a1;
}

void sub_1C50AB270(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;

  v4 = **(unsigned __int16 **)(a2 + 16);
  if ((v4 - 13) >= 5 && v4 != 7)
  {
    v9 = a1[4];
    if (*(_DWORD *)(v9 + 16))
    {
      v10 = 0;
      do
      {
        v11 = v10;
        v12 = *(_DWORD *)(a1[21] + 4 * v10);
        v13 = a1 + 21;
        v14 = a3;
        if (v12 != -1
          || ((v15 = *(_DWORD *)(a1[24] + 4 * v11), v15 < a4) ? (v16 = v15 >= a3) : (v16 = 0),
              v13 = a1 + 24,
              v14 = a4,
              v16))
        {
          *(_QWORD *)(a1[15] + 8 * v11) = -1;
          *(_DWORD *)(*v13 + 4 * v11) = v14;
          v9 = a1[4];
        }
        v10 = v11 + 1;
      }
      while ((_DWORD)v11 + 1 != *(_DWORD *)(v9 + 16));
    }
    sub_1C50AB354((uint64_t)a1, a2);
    sub_1C50AB7AC((uint64_t)a1, a2, a3);
  }
}

uint64_t sub_1C50AB354(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  __int16 v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int16 *v60;
  unsigned int v61;

  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v5 = (*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0;
  if (v5)
  {
    if ((v4 & 0x80) != 0)
      goto LABEL_6;
    v7 = a2;
    while ((*(_WORD *)(v7 + 44) & 8) != 0)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8) & 0x80) != 0)
        goto LABEL_6;
    }
    if ((v4 & 0x80000000) != 0)
      goto LABEL_6;
    v8 = a2;
    while ((*(_WORD *)(v8 + 44) & 8) != 0)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v8 + 16) + 11) & 0x80) != 0)
        goto LABEL_6;
    }
LABEL_17:
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 24) + 768))(*(_QWORD *)(result + 24), a2);
    v6 = result;
    goto LABEL_18;
  }
  if ((v4 & 0x80000080) == 0)
    goto LABEL_17;
LABEL_6:
  v6 = 1;
LABEL_18:
  v9 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v9)
    return result;
  for (i = 0; i != v9; ++i)
  {
    v11 = *(_QWORD *)(a2 + 32) + 32 * i;
    if (*(_BYTE *)v11)
      continue;
    v12 = *(unsigned int *)(v11 + 4);
    if (!(_DWORD)v12)
      continue;
    if (i >= *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 2))
    {
      v13 = (uint64_t *)(*(_QWORD *)(v3 + 120) + 8 * v12);
LABEL_37:
      *v13 = -1;
      goto LABEL_38;
    }
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24));
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 120) + 8 * v12);
    if (*v13)
      v14 = 1;
    else
      v14 = result == 0;
    if (!v14)
    {
      *v13 = result;
      goto LABEL_38;
    }
    if (result)
      v15 = *v13 == result;
    else
      v15 = 0;
    if (!v15)
      goto LABEL_37;
LABEL_38:
    v16 = *(_QWORD *)(v3 + 32);
    if (v16)
      v17 = (_QWORD *)(v16 + 8);
    else
      v17 = 0;
    v19 = v17[5];
    v18 = v17[6];
    v20 = (_WORD *)(v18 + (((unint64_t)*(unsigned int *)(*v17 + 24 * v12 + 16) >> 3) & 0x1FFFFFFE));
    v21 = (unsigned __int16)*v20 + (*(_DWORD *)(*v17 + 24 * v12 + 16) & 0xF) * v12;
    while (1)
    {
      ++v20;
      v22 = 4 * (unsigned __int16)v21;
      v23 = *(unsigned __int16 *)(v19 + v22);
      if (*(_WORD *)(v19 + v22))
        break;
LABEL_50:
      v21 += (unsigned __int16)*v20;
      if (!*v20)
        goto LABEL_64;
    }
    v24 = *(unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21 + 2);
    v25 = v24 << 16;
    while (!v18)
    {
LABEL_48:
      v25 = 0;
      v23 = v24;
      v5 = (unsigned __int16)v24 == 0;
      v24 = 0;
      if (v5)
        goto LABEL_50;
    }
    v26 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(*v17 + 24 * (unsigned __int16)v23 + 8));
    while ((_DWORD)v12 == (unsigned __int16)v23)
    {
      v27 = *v26++;
      result = v27;
      v23 += v27;
      if (!v27)
        goto LABEL_48;
    }
    LOWORD(v28) = v23;
    v29 = v21;
    do
    {
      v30 = *(_QWORD *)(v3 + 120);
      if (*(_QWORD *)(v30 + 8 * (unsigned __int16)v28))
      {
        *(_QWORD *)(v30 + 8 * (unsigned __int16)v28) = -1;
        *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v12) = -1;
      }
      do
      {
        v33 = *v26++;
        v32 = v33;
        if (v33)
        {
          LOWORD(v28) = v32 + v28;
        }
        else
        {
          v28 = HIWORD(v25);
          if (HIWORD(v25))
          {
            v25 >>= 16;
          }
          else
          {
            if (!*v20)
              goto LABEL_64;
            v29 += (unsigned __int16)*v20++;
            v31 = (unsigned __int16 *)(v17[5] + 4 * (unsigned __int16)v29);
            v28 = *v31;
            v25 = v31[1] << 16;
          }
          v26 = (unsigned __int16 *)(v17[6] + 2 * *(unsigned int *)(*v17 + 24 * v28 + 8));
        }
      }
      while ((_DWORD)v12 == (unsigned __int16)v28);
    }
    while (v20);
LABEL_64:
    if (*(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v12) != -1)
      result = (uint64_t)sub_1C50AC4DC((uint64_t **)(v3 + 144), v12, v11);
    if ((*(_BYTE *)(v11 + 3) & 1) != 0)
      v34 = 0;
    else
      v34 = v6;
    if (v34 == 1)
    {
      v35 = *(_QWORD *)(v3 + 216);
      if (((*(_QWORD *)(v35 + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0)
      {
        v36 = *(_QWORD *)(v3 + 32);
        v37 = (_QWORD *)(v36 + 8);
        if (!v36)
          v37 = 0;
        v38 = v37[6];
        if (v38)
        {
          v39 = (unsigned __int16 *)(v38 + 2 * *(unsigned int *)(*v37 + 24 * v12 + 4));
          do
          {
            *(_QWORD *)(v35 + 8 * ((unsigned __int16)v12 >> 6)) |= 1 << v12;
            v40 = *v39++;
            LODWORD(v12) = v40 + v12;
          }
          while (v40);
        }
      }
    }
  }
  v41 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v41)
  {
    v42 = 0;
    v43 = *(_QWORD *)(a2 + 32);
    do
    {
      v44 = *(_DWORD *)(v43 + 32 * v42);
      if (!(_BYTE)v44)
      {
        v45 = *(unsigned int *)(v43 + 32 * v42 + 4);
        v46 = v44 & 0x10000FF;
        v47 = v44 & 0xF00000;
        v48 = (_DWORD)v45 && v46 == 0x1000000;
        v49 = !v48 || v47 == 0;
        if (!v49 && *(_QWORD *)(*(_QWORD *)(v3 + 120) + 8 * v45) == -1)
        {
          v50 = *(_QWORD *)(v3 + 32);
          v51 = (uint64_t *)(v50 + 8);
          if (!v50)
            v51 = 0;
          v52 = v51[6];
          v53 = *v51;
          if (v52)
          {
            v54 = (unsigned __int16 *)(v52 + 2 * *(unsigned int *)(v53 + 24 * v45 + 4));
            v55 = *(_QWORD *)(v3 + 216);
            v56 = *(_DWORD *)(v43 + 32 * v42 + 4);
            do
            {
              *(_QWORD *)(v55 + 8 * ((unsigned __int16)v56 >> 6)) |= 1 << v56;
              v57 = *v54++;
              v56 += v57;
            }
            while (v57);
          }
          result = *(unsigned int *)(v53 + 24 * v45 + 8);
          if (*(_WORD *)(v52 + 2 * result))
          {
            v58 = *(unsigned __int16 *)(v52 + 2 * result) + (_DWORD)v45;
            v59 = *(_QWORD *)(v3 + 216);
            v60 = (unsigned __int16 *)(v52 + 2 * result + 2);
            do
            {
              *(_QWORD *)(v59 + 8 * ((unsigned __int16)v58 >> 6)) |= 1 << v58;
              v61 = *v60++;
              result = v61;
              v58 += v61;
            }
            while (v61);
          }
        }
      }
      ++v42;
    }
    while (v42 != v41);
  }
  return result;
}

void sub_1C50AB7AC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 v29;
  unsigned int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int16 *v54;
  _WORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int16 *v65;
  int v66;
  unsigned __int16 *v67;
  uint64_t v68;
  uint64_t **v69;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 768))(*(_QWORD *)(a1 + 24)) & 1) == 0)
  {
    v6 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v68 = *(unsigned int *)(a2 + 40);
      v69 = (uint64_t **)(a1 + 144);
      do
      {
        v8 = *(_QWORD *)(a2 + 32);
        v9 = (int *)(v8 + 32 * v7);
        v10 = *v9;
        if (*v9 == 12)
        {
          v11 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16);
          if ((_DWORD)v11)
          {
            for (i = 0; i != v11; ++i)
            {
              v13 = *(_QWORD *)(a1 + 32);
              v14 = (_QWORD *)(v13 + 8);
              if (!v13)
                v14 = 0;
              v15 = v14[6];
              if (v15)
              {
                v16 = (unsigned __int16 *)(v15 + 2 * *(unsigned int *)(*v14 + 24 * i + 4));
                v17 = i;
                while (((*(_DWORD *)(*(_QWORD *)(v8 + 32 * v7 + 16) + 4 * (v17 >> 5)) >> v17) & 1) == 0)
                {
                  v18 = *v16++;
                  v17 += v18;
                  if (!v18)
                    goto LABEL_13;
                }
              }
              else
              {
LABEL_13:
                *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * i) = a3;
                *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * i) = -1;
                *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * (i >> 6)) &= ~(1 << i);
                *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * i) = 0;
                sub_1C61D727C(v69, i);
              }
            }
            v10 = *v9;
            v6 = v68;
          }
        }
        if (!(_BYTE)v10 && (v10 & 0x1000000) != 0)
        {
          v19 = *(_DWORD *)(v8 + 32 * v7 + 4);
          if (v19)
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v7);
            v21 = v20 & 0x10000FF;
            v22 = v20 & 0xF00000;
            if (v21 != 0x1000000 || v22 == 0)
            {
              v24 = *(_QWORD *)(a1 + 32);
              if (v24)
                v25 = (_QWORD *)(v24 + 8);
              else
                v25 = 0;
              v26 = v25[6];
              if (v26)
              {
                v27 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * (v19 >> 6)) & (1 << v19);
                v28 = (unsigned __int16 *)(v26 + 2 * *(unsigned int *)(*v25 + 24 * v19 + 4));
                v29 = v19;
                do
                {
                  v30 = v29;
                  *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v29) = a3;
                  *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v29) = -1;
                  *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v29) = 0;
                  sub_1C61D727C(v69, v29);
                  if (!v27)
                    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * (v30 >> 6)) &= ~(1 << v30);
                  v31 = *v28++;
                  v29 = v31 + v30;
                }
                while (v31);
                v24 = *(_QWORD *)(a1 + 32);
                v6 = v68;
              }
              v32 = (_QWORD *)(v24 + 8);
              if (!v24)
                v32 = 0;
              v33 = v32[6];
              v34 = *(unsigned int *)(*v32 + 24 * v19 + 8);
              if (*(_WORD *)(v33 + 2 * v34))
              {
                v35 = *(unsigned __int16 *)(v33 + 2 * v34) + v19;
                v36 = (unsigned __int16 *)(v33 + 2 * v34 + 2);
                do
                {
                  *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * (unsigned __int16)v35) = -1;
                  v37 = *v36++;
                  v35 += v37;
                }
                while (v37);
              }
            }
          }
        }
        ++v7;
      }
      while (v7 != v6);
    }
  }
  v38 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v38)
  {
    v39 = 0;
    while (1)
    {
      v40 = (_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v39);
      if (!*v40 && (*v40 & 0x1000000) == 0)
      {
        v41 = v40[1];
        if ((_DWORD)v41)
          break;
      }
LABEL_44:
      if (++v39 == v38)
        return;
    }
    if (v39 >= *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 2))
    {
      v43 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 8 * v41);
    }
    else
    {
      v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
      v43 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 8 * v41);
      if (*v43)
        v44 = 1;
      else
        v44 = v42 == 0;
      if (!v44)
      {
        *v43 = v42;
        goto LABEL_62;
      }
      if (v42)
        v45 = *v43 == v42;
      else
        v45 = 0;
      if (v45)
      {
LABEL_62:
        sub_1C50AC4DC((uint64_t **)(a1 + 144), v41, (uint64_t)v40);
        v46 = *(_QWORD *)(a1 + 32);
        if (v46)
          v47 = (uint64_t *)(v46 + 8);
        else
          v47 = 0;
        v48 = *v47;
        v49 = *(_DWORD *)(*v47 + 24 * v41 + 16) & 0xF;
        v50 = ((unint64_t)*(unsigned int *)(*v47 + 24 * v41 + 16) >> 3) & 0x1FFFFFFE;
        v53 = v47 + 5;
        v52 = v47[5];
        v51 = v53[1];
        v54 = (unsigned __int16 *)(v51 + v50);
        v56 = *v54;
        v55 = v54 + 1;
        v57 = v56 + v49 * v41;
        while (1)
        {
          v58 = 4 * (unsigned __int16)v57;
          v59 = *(unsigned __int16 *)(v52 + v58);
          if (*(_WORD *)(v52 + v58) && v51 != 0)
            break;
          v61 = (unsigned __int16)*v55++;
          v57 += v61;
          if (!v61)
            goto LABEL_44;
        }
        v62 = *(unsigned __int16 *)(v52 + 4 * (unsigned __int16)v57 + 2) << 16;
        v63 = *(_QWORD *)(a1 + 168);
        for (LOWORD(v64) = v59; ; LOWORD(v64) = v59)
        {
          while (1)
          {
            v65 = (unsigned __int16 *)(v51 + 2 * *(unsigned int *)(v48 + 24 * v59 + 8));
            do
            {
              if (*(_DWORD *)(v63 + 4 * (unsigned __int16)v64) == -1)
              {
                *(_DWORD *)(v63 + 4 * (unsigned __int16)v64) = a3;
                *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * (unsigned __int16)v64) = -1;
              }
              v66 = *v65++;
              LOWORD(v64) = v66 + v64;
            }
            while (v66);
            v59 = HIWORD(v62);
            if (!(_DWORD)v59)
              break;
            v64 = HIWORD(v62);
            v62 >>= 16;
          }
          if (!*v55)
            break;
          v57 += (unsigned __int16)*v55++;
          v67 = (unsigned __int16 *)(v52 + 4 * (unsigned __int16)v57);
          v59 = *v67;
          v62 = v67[1] << 16;
        }
        goto LABEL_44;
      }
    }
    *v43 = -1;
    goto LABEL_62;
  }
}

uint64_t sub_1C50ABBF0(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, int a5, uint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int16 ***v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned __int16 *v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t **v99;
  _QWORD *v100;
  void *v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  unsigned int v108;
  uint64_t v109;
  _QWORD v110[2];
  int v111;
  unsigned int *v112;
  uint64_t v113;
  _QWORD v114[3];

  v114[1] = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    return 0;
  v13 = 0;
  v110[0] = 0;
  v110[1] = 0;
  v111 = 0;
  do
  {
    v112 = *(unsigned int **)(v6 + 8);
    sub_1C6180A54((uint64_t)v110, (uint64_t *)&v112)[1] = v6;
    if (!v13)
      goto LABEL_9;
    if ((*(_BYTE *)(v6 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v6);
    v14 = *(_DWORD *)(v6 + 240);
    v15 = *(unsigned __int16 *)(v6 + 226);
    if ((*(_BYTE *)(v13 + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth((llvm::SUnit *)v13);
    if (v14 + v15 > *(_DWORD *)(v13 + 240) + *(unsigned __int16 *)(v13 + 226))
LABEL_9:
      v13 = v6;
    v6 += 272;
  }
  while (v6 != v7);
  v16 = *(_QWORD *)(v13 + 8);
  v17 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 16);
  if ((_DWORD)v17)
  {
    v18 = 4 * v17;
    v19 = operator new(4 * v17);
    bzero(v19, v18);
  }
  else
  {
    v19 = 0;
  }
  if (a4 != a3)
  {
    v106 = v13;
    v97 = a6;
    v103 = 0;
    v99 = (uint64_t **)(a1 + 144);
    v107 = (_QWORD *)a1;
    v101 = v19;
    while (1)
    {
      a4 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (!a4 || (*(_BYTE *)a4 & 4) == 0)
      {
        while ((*(_WORD *)(a4 + 44) & 4) != 0)
          a4 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      }
      --a5;
      v21 = **(unsigned __int16 **)(a4 + 16);
      v22 = (v21 - 13) < 5 || v21 == 7;
      if (!v22)
      {
        if (a4 == v16)
        {
          v23 = *(unsigned int *)(v106 + 40);
          if ((_DWORD)v23)
          {
            v16 = 0;
            v24 = 0;
            v25 = *(_QWORD *)(v106 + 32);
            v26 = 16 * v23;
            do
            {
              v27 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
              v28 = *(_DWORD *)(v25 + 12);
              if ((*(_BYTE *)(v27 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth((llvm::SUnit *)(*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8));
              v29 = *(_DWORD *)(v27 + 240) + v28;
              if (v24 < v29 || v24 == v29 && (*(_QWORD *)v25 & 6) == 2)
              {
                v24 = *(_DWORD *)(v27 + 240) + v28;
                v16 = v25;
              }
              v25 += 16;
              v26 -= 16;
            }
            while (v26);
            a1 = (uint64_t)v107;
            if (v16)
            {
              v30 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
              v19 = v101;
              if ((*(_QWORD *)v16 & 6) == 2
                && (v31 = *(unsigned int *)(v16 + 8),
                    v32 = (_QWORD *)v107[2],
                    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v32 + 16) + 176))(*(_QWORD *)(*v32 + 16)),
                    v34 = v31,
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 216) + 16) + v31))
                && (v35 = (v31 >> 3) & 0x1FFFFFF8, ((*(_QWORD *)(v32[44] + v35) >> v31) & 1) == 0)
                && ((*(_QWORD *)(v107[27] + v35) >> v31) & 1) == 0)
              {
                v79 = *(unsigned int *)(v106 + 40);
                if ((_DWORD)v79)
                {
                  v80 = 16 * v79;
                  v81 = (_DWORD *)(*(_QWORD *)(v106 + 32) + 8);
                  do
                  {
                    v82 = *((_QWORD *)v81 - 1) & 6;
                    if ((*((_QWORD *)v81 - 1) & 0xFFFFFFFFFFFFFFF8) == v30)
                    {
                      if (v82 != 2 || *v81 != (_DWORD)v31)
                        goto LABEL_45;
                    }
                    else if (!v82 && *v81 == (_DWORD)v31)
                    {
                      goto LABEL_45;
                    }
                    v81 += 4;
                    v80 -= 16;
                  }
                  while (v80);
                }
              }
              else
              {
LABEL_45:
                v34 = 0;
              }
              v108 = v34;
              v16 = *(_QWORD *)(v30 + 8);
              v106 = v30;
            }
            else
            {
              v108 = 0;
              v106 = 0;
              v19 = v101;
            }
          }
          else
          {
            v108 = 0;
            v16 = 0;
            v106 = 0;
          }
        }
        else
        {
          v108 = 0;
        }
        sub_1C50AB354(a1, a4);
        v112 = (unsigned int *)v114;
        v113 = 0x200000000;
        v36 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
        if ((*(_WORD *)(a4 + 44) & 0xC) == 0 || (*(_WORD *)(a4 + 44) & 4) != 0)
        {
          if ((v36 & 0x100000080) != 0)
            goto LABEL_124;
          goto LABEL_54;
        }
        v46 = a4;
        if ((v36 & 0x80) == 0)
        {
          while ((*(_WORD *)(v46 + 44) & 8) != 0)
          {
            v46 = *(_QWORD *)(v46 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v46 + 16) + 8) & 0x80) != 0)
              goto LABEL_124;
          }
          if ((v36 & 0x100000000) == 0)
          {
            v47 = a4;
            while ((*(_WORD *)(v47 + 44) & 8) != 0)
            {
              v47 = *(_QWORD *)(v47 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v47 + 16) + 12) & 1) != 0)
                goto LABEL_124;
            }
LABEL_54:
            if (((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 768))(*(_QWORD *)(a1 + 24), a4) & 1) != 0)goto LABEL_124;
            v38 = v108;
            if (!v108)
              goto LABEL_124;
            v102 = v16;
            v39 = *(unsigned int *)(a4 + 40);
            v40 = v108;
            if ((_DWORD)v39)
            {
              v41 = 32 * v39;
              v42 = (unsigned int *)(*(_QWORD *)(a4 + 32) + 4);
              do
              {
                if (!*(v42 - 1))
                {
                  v43 = *v42;
                  if (*v42)
                  {
                    if ((*(v42 - 1) & 0x1000000) != 0)
                    {
                      if (v43 != v38)
                      {
                        v45 = v113;
                        if (v113 >= (unint64_t)HIDWORD(v113))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 4);
                          v40 = v108;
                          v38 = v108;
                          v45 = v113;
                        }
                        v112[v45] = v43;
                        LODWORD(v113) = v113 + 1;
                      }
                    }
                    else
                    {
                      if (v38 == v43)
                        goto LABEL_123;
                      if (v108 - 1 <= 0x3FFFFFFE && !(v43 >> 30))
                      {
                        v44 = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v40, *v42);
                        v40 = v108;
                        v38 = v108;
                        if (v44)
                          goto LABEL_123;
                      }
                    }
                  }
                }
                v42 += 8;
                v41 -= 32;
              }
              while (v41);
            }
            v48 = *(unsigned __int16 ****)(*(_QWORD *)(a1 + 120) + 8 * v40);
            if (v48 == (unsigned __int16 ***)-1)
              goto LABEL_123;
            v49 = sub_1C50654A4((uint64_t)v99, v38);
            v51 = v50;
            v52 = *((_DWORD *)v19 + v108);
            v53 = *(_QWORD *)(a1 + 40);
            v54 = *((unsigned __int16 *)*v48 + 12);
            v55 = *(_QWORD *)v53;
            v105 = v50;
            v104 = v52;
            if (*(_DWORD *)(v53 + 8) != *(_DWORD *)(*(_QWORD *)v53 + 24 * *((unsigned __int16 *)*v48 + 12)))
            {
              llvm::RegisterClassInfo::compute((uint64_t *)v53, v48);
              v52 = v104;
              v51 = v105;
            }
            v56 = v55 + 24 * v54;
            v57 = *(unsigned int *)(v56 + 4);
            if (!(_DWORD)v57)
            {
LABEL_122:
              v19 = v101;
              goto LABEL_123;
            }
            v98 = a3;
            v58 = *(unsigned __int16 **)(v56 + 16);
            v59 = &v58[v57];
            v94 = v112;
            v95 = v113;
            v93 = 4 * v113;
            v60 = v108;
            while (1)
            {
              v61 = *v58;
              if (v60 != (_DWORD)v61 && v52 != (_DWORD)v61)
              {
                if (v49 == v51)
                {
LABEL_108:
                  v74 = v107[21];
                  if (*(_DWORD *)(v74 + 4 * v61) == -1)
                  {
                    v96 = v107[15];
                    if (*(_QWORD *)(v96 + 8 * v61) != -1
                      && *(_DWORD *)(v74 + 4 * v108) <= *(_DWORD *)(v107[24] + 4 * v61))
                    {
                      if (!v95)
                      {
LABEL_120:
                        if (!(_DWORD)v61)
                        {
LABEL_121:
                          a1 = (uint64_t)v107;
                          goto LABEL_122;
                        }
                        v19 = v101;
                        v83 = v96;
                        if (v49 != v51)
                        {
                          do
                          {
                            llvm::MachineOperand::setReg(v49[5], v61);
                            v109 = *(_QWORD *)(v49[5] + 8);
                            if (sub_1C6180A54((uint64_t)v110, &v109)[1])
                            {
                              v85 = *v97;
                              v84 = v97[1];
                              if (v84 != *v97)
                              {
                                v88 = 0;
                                v89 = *(_QWORD *)(v49[5] + 8);
                                do
                                {
                                  v90 = *(_QWORD *)(v84 - 8);
                                  if (v90 == v89 || v90 == v88)
                                  {
                                    v88 = *(_QWORD *)(v84 - 16);
                                    sub_1C61D721C((uint64_t)v107, v88, v108, v61);
                                  }
                                  else if (v88)
                                  {
                                    break;
                                  }
                                  v84 -= 16;
                                }
                                while (v84 != v85);
                              }
                            }
                            v86 = (uint64_t *)v49[1];
                            if (v86)
                            {
                              do
                              {
                                v87 = v86;
                                v86 = (uint64_t *)*v86;
                              }
                              while (v86);
                            }
                            else
                            {
                              do
                              {
                                v87 = (uint64_t *)v49[2];
                                v22 = *v87 == (_QWORD)v49;
                                v49 = v87;
                              }
                              while (!v22);
                            }
                            v49 = v87;
                          }
                          while (v87 != v105);
                          v60 = v108;
                          v83 = v107[15];
                        }
                        *(_QWORD *)(v83 + 8 * v61) = *(_QWORD *)(v83 + 8 * v108);
                        *(_DWORD *)(v107[24] + 4 * v61) = *(_DWORD *)(v107[24] + 4 * v108);
                        *(_DWORD *)(v107[21] + 4 * v61) = *(_DWORD *)(v107[21] + 4 * v108);
                        *(_QWORD *)(v107[15] + 8 * v108) = 0;
                        v92 = v107[21];
                        *(_DWORD *)(v107[24] + 4 * v108) = *(_DWORD *)(v92 + 4 * v108);
                        *(_DWORD *)(v92 + 4 * v108) = -1;
                        sub_1C61D727C(v99, v60);
                        *((_DWORD *)v101 + v108) = v61;
                        a1 = (uint64_t)v107;
                        ++v103;
                        a3 = v98;
LABEL_123:
                        v16 = v102;
                        break;
                      }
                      v100 = (_QWORD *)(v107[4] + 8);
                      v75 = v93;
                      v76 = v94;
                      while (1)
                      {
                        v77 = *v76;
                        if (*v76 == (_DWORD)v61)
                          break;
                        if ((v61 - 1) <= 0x3FFFFFFE && v77 - 1 <= 0x3FFFFFFE)
                        {
                          v78 = llvm::MCRegisterInfo::regsOverlap(v100, v61, v77);
                          v52 = v104;
                          v51 = v105;
                          v60 = v108;
                          if (v78)
                            break;
                        }
                        ++v76;
                        v75 -= 4;
                        if (!v75)
                          goto LABEL_120;
                      }
                    }
                  }
                }
                else
                {
                  v63 = v49;
                  while (1)
                  {
                    v64 = v63[5];
                    v65 = *(_DWORD *)v64;
                    if ((~*(_DWORD *)v64 & 0x41000000) == 0)
                      break;
                    v66 = *(_QWORD *)(v64 + 8);
                    v67 = *(unsigned int *)(v66 + 40);
                    if ((_DWORD)v67)
                    {
                      v68 = *(int **)(v66 + 32);
                      v69 = v65 & 0x1000000;
                      v70 = 32 * v67;
                      do
                      {
                        v71 = *v68;
                        if (*v68 == 12
                          && (*(_DWORD *)(*((_QWORD *)v68 + 2) + 4 * (v61 >> 5)) & (1 << v61)) == 0)
                        {
                          goto LABEL_109;
                        }
                        if ((v71 & 0x10000FF) == 0x1000000
                          && v68[1] == (_DWORD)v61
                          && (v71 & 0x40000000 | v69 || **(unsigned __int16 **)(v66 + 16) - 3 > 0xFFFFFFFD))
                        {
                          goto LABEL_109;
                        }
                        v68 += 8;
                        v70 -= 32;
                      }
                      while (v70);
                    }
                    v72 = (uint64_t *)v63[1];
                    if (v72)
                    {
                      do
                      {
                        v73 = v72;
                        v72 = (uint64_t *)*v72;
                      }
                      while (v72);
                    }
                    else
                    {
                      do
                      {
                        v73 = (uint64_t *)v63[2];
                        v22 = *v73 == (_QWORD)v63;
                        v63 = v73;
                      }
                      while (!v22);
                    }
                    v63 = v73;
                    if (v73 == v51)
                      goto LABEL_108;
                  }
                }
              }
LABEL_109:
              if (++v58 == v59)
                goto LABEL_121;
            }
          }
        }
LABEL_124:
        sub_1C50AB7AC(a1, a4, a5);
        if (v112 != (unsigned int *)v114)
          free(v112);
      }
      if (a4 == a3)
        goto LABEL_157;
    }
  }
  v103 = 0;
LABEL_157:
  if (v19)
    operator delete(v19);
  MEMORY[0x1CAA32FB4](v110[0], 8);
  return v103;
}

uint64_t *sub_1C50AC4DC(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *result;

  v6 = (uint64_t *)operator new(0x30uLL);
  v7 = v6;
  *((_DWORD *)v6 + 8) = a2;
  v6[5] = a3;
  v8 = a1 + 1;
  v9 = (uint64_t **)a1[1];
  if (v9)
  {
    do
    {
      while (1)
      {
        v8 = v9;
        if (*((_DWORD *)v9 + 8) <= a2)
          break;
        v9 = (uint64_t **)*v9;
        v10 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      v9 = (uint64_t **)v9[1];
    }
    while (v9);
    v10 = v8 + 1;
  }
  else
  {
    v10 = a1 + 1;
  }
LABEL_8:
  *v6 = 0;
  v6[1] = 0;
  v6[2] = (uint64_t)v8;
  *v10 = v6;
  v11 = (uint64_t *)**a1;
  if (v11)
  {
    *a1 = v11;
    v7 = *v10;
  }
  result = sub_1C4768E74(a1[1], v7);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1C50AC590(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Remove dead machine instructions";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "dead-mi-elimination";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6ED0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50AC620;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50AC620()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6ED0);
  *(_QWORD *)v1 = &off_1E8141A20;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 272) = v1 + 288;
  *(_QWORD *)(v1 + 280) = 0x600000000;
  *(_DWORD *)(v1 + 336) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F71F8);
  if (v3 != -1)
  {
    v7[0] = sub_1C50AC590;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F71F8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C50AC710(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8141A20;
  v2 = (char *)*((_QWORD *)this + 34);
  if (v2 != (char *)this + 288)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C50AC7A8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8141A20;
  v2 = (char *)*((_QWORD *)this + 34);
  if (v2 != (char *)this + 288)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50AC854(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C50AC884(llvm::FunctionPass *a1, const llvm::Function **a2)
{
  uint64_t result;

  if ((llvm::FunctionPass::skipFunction(a1, *a2) & 1) != 0)
    return 0;
  result = sub_1C50AC8DC((uint64_t)a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    while ((sub_1C50AC8DC((uint64_t)a1, (uint64_t)a2) & 1) != 0)
      ;
    return 1;
  }
  return result;
}

uint64_t sub_1C50AC8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const llvm::MachineBasicBlock *v12;
  llvm::LiveRegUnits *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  int v21;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _WORD *v29;
  unsigned __int16 *v30;
  __int16 v31;
  unsigned __int16 v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  const llvm::MachineBasicBlock *v40;
  char v41;
  void **v42;
  BOOL v43;

  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = v4;
  v5 = *(_QWORD *)(a1 + 272);
  v6 = *(unsigned int *)(a1 + 280);
  v7 = v6;
  if ((_DWORD)v6)
    bzero(*(void **)(a1 + 272), 8 * v6);
  v8 = *(_DWORD *)(v4 + 44);
  if ((*(_DWORD *)(a1 + 336) & 0x3F) != 0)
    *(_QWORD *)(v5 + 8 * v6 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 336) & 0x3F));
  v42 = (void **)(a1 + 272);
  *(_DWORD *)(a1 + 336) = v8;
  v9 = (v8 + 63) >> 6;
  v10 = v9 - v6;
  if ((_DWORD)v9 != (_DWORD)v6)
  {
    if (v9 >= v6)
    {
      v11 = v6;
      if (v9 > *(_DWORD *)(a1 + 284))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, a1 + 288, (v8 + 63) >> 6, 8);
        v11 = *(unsigned int *)(a1 + 280);
        v5 = *(_QWORD *)(a1 + 272);
        v8 = *(_DWORD *)(a1 + 336);
        LODWORD(v6) = *(_DWORD *)(a1 + 280);
      }
      bzero((void *)(v5 + 8 * v11), 8 * (v9 - v7));
      LODWORD(v6) = v6 + v10;
    }
    else
    {
      LODWORD(v6) = (v8 + 63) >> 6;
    }
    *(_DWORD *)(a1 + 280) = v6;
  }
  if ((v8 & 0x3F) != 0)
    *(_QWORD *)(v5 + 8 * v6 - 8) &= ~(-1 << (v8 & 0x3F));
  v12 = *(const llvm::MachineBasicBlock **)(a2 + 320);
  v40 = (const llvm::MachineBasicBlock *)(a2 + 320);
  if (v12 != (const llvm::MachineBasicBlock *)(a2 + 320))
  {
    v41 = 0;
    v13 = (llvm::LiveRegUnits *)(a1 + 264);
    while (1)
    {
      llvm::LiveRegUnits::addLiveOuts(v13, v12);
      v14 = (_QWORD *)((char *)v12 + 48);
      v15 = *((_QWORD *)v12 + 6) & 0xFFFFFFFFFFFFFFF8;
      if (!v15 || (*(_BYTE *)v15 & 4) == 0)
      {
        while ((*(_WORD *)(v15 + 44) & 4) != 0)
          v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v15 == v14)
        goto LABEL_71;
      do
      {
        v16 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
        if (!v16 || (*(_BYTE *)v16 & 4) == 0)
        {
          while ((*(_WORD *)(v16 + 44) & 4) != 0)
            v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
        }
        v17 = **(unsigned __int16 **)(v15 + 16);
        v18 = v17 > 0x20;
        v19 = (1 << v17) & 0x100000006;
        if (!v18 && v19 != 0)
          goto LABEL_31;
        v43 = 0;
        if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v15, 0, &v43))
        {
          v21 = **(unsigned __int16 **)(v15 + 16);
          if (v21 != 69 && v21 != 0)
            goto LABEL_31;
        }
        v23 = *(unsigned int *)(v15 + 40);
        if (!(_DWORD)v23)
        {
LABEL_65:
          v37 = v15;
          if ((*(_BYTE *)v15 & 4) == 0)
          {
            v37 = v15;
            if ((*(_WORD *)(v15 + 44) & 8) != 0)
            {
              v37 = v15;
              do
                v37 = *(_QWORD *)(v37 + 8);
              while ((*(_WORD *)(v37 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v15 + 24) + 40, v15, *(_QWORD *)(v37 + 8));
          v41 = 1;
          goto LABEL_32;
        }
        v24 = *(_DWORD **)(v15 + 32);
        v25 = &v24[8 * v23];
        while (1)
        {
          if ((*v24 & 0x10000FF) != 0x1000000)
            goto LABEL_59;
          v26 = v24[1];
          if ((v26 - 1) <= 0x3FFFFFFE)
            break;
          if ((~*v24 & 0x5000000) != 0)
          {
            v34 = *(_QWORD *)(a1 + 248);
            v35 = (uint64_t *)((v26 & 0x80000000) != 0
                            ? *(_QWORD *)(v34 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8
                            : *(_QWORD *)(v34 + 272) + 8 * v26);
            v36 = *v35;
            if (v36)
            {
              while ((*(_DWORD *)v36 & 0x81000000) != 0)
              {
                v36 = *(_QWORD *)(v36 + 24);
                if (!v36)
                  goto LABEL_59;
              }
LABEL_63:
              if (*(_QWORD *)(v36 + 8) != v15)
                goto LABEL_31;
              while (1)
              {
                v36 = *(_QWORD *)(v36 + 24);
                if (!v36)
                  break;
                if ((*(_DWORD *)v36 & 0x81000000) == 0)
                  goto LABEL_63;
              }
            }
          }
LABEL_59:
          v24 += 8;
          if (v24 == v25)
            goto LABEL_65;
        }
        if (*(_QWORD *)v13)
          v27 = (_QWORD *)(*(_QWORD *)v13 + 8);
        else
          v27 = 0;
        v28 = *(unsigned int *)(*v27 + 24 * (unsigned __int16)v24[1] + 16);
        v29 = (_WORD *)(v27[6] + ((v28 >> 3) & 0x1FFFFFFE));
        v31 = *v29;
        v30 = v29 + 1;
        v32 = v31 + (v28 & 0xF) * v26;
        while (((*((_QWORD *)*v42 + (v32 >> 6)) >> v32) & 1) == 0)
        {
          v33 = *v30++;
          v32 += v33;
          if (!v33)
          {
            if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 352) + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) == 0)
              goto LABEL_59;
            break;
          }
        }
LABEL_31:
        llvm::LiveRegUnits::stepBackward(v13, (const llvm::MachineInstr *)v15);
LABEL_32:
        v15 = v16;
      }
      while ((_QWORD *)v16 != v14);
LABEL_71:
      v12 = *(const llvm::MachineBasicBlock **)v12;
      if (v12 == v40)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 280);
        v38 = v41;
        if ((_DWORD)v6)
          goto LABEL_73;
        return v38 & 1;
      }
    }
  }
  v38 = 0;
  if ((_DWORD)v6)
LABEL_73:
    bzero(*v42, 8 * v6);
  return v38 & 1;
}

uint64_t sub_1C50ACD0C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Detect Dead Lanes";
  *(_QWORD *)(v2 + 8) = 17;
  *(_QWORD *)(v2 + 16) = "detect-dead-lanes";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6ED1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50ACD98;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double sub_1C50ACD98()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6ED1);
  *(_QWORD *)v1 = &off_1E8141AE8;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_QWORD *)(v1 + 320) = v1 + 336;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(v1 + 328) = 0x600000000;
  *(_DWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0x600000000;
  *(_DWORD *)(v1 + 456) = 0;
  return result;
}

void sub_1C50ACE0C(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)a1 = &off_1E8141AE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 49);
  if (v2 != (_QWORD *)((char *)a1 + 408))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 40);
  if (v3 != (_QWORD *)((char *)a1 + 336))
    free(v3);
  sub_1C50ADD7C((uint64_t)a1 + 272);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v4 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v4 != (_QWORD *)((char *)a1 + 192))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v5 != (_QWORD *)((char *)a1 + 120))
    free(v5);
  v6 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v6 != (_QWORD *)((char *)a1 + 48))
    free(v6);
  llvm::Pass::~Pass(a1);
}

void sub_1C50ACEC0(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)a1 = &off_1E8141AE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 49);
  if (v2 != (_QWORD *)((char *)a1 + 408))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 40);
  if (v3 != (_QWORD *)((char *)a1 + 336))
    free(v3);
  sub_1C50ADD7C((uint64_t)a1 + 272);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v4 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v4 != (_QWORD *)((char *)a1 + 192))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v5 != (_QWORD *)((char *)a1 + 120))
    free(v5);
  v6 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v6 != (_QWORD *)((char *)a1 + 48))
    free(v6);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50ACF88()
{
  return "Detect Dead Lanes";
}

void *sub_1C50ACF98(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C50ACFC8(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  uint64_t v53;
  _QWORD *v54;
  int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  _BOOL4 v65;
  int v66;
  void **v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t i;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD *v148;
  int v149;
  int v150;
  unsigned int v151;

  v2 = *(_BYTE **)(a2 + 40);
  *(_QWORD *)(a1 + 248) = v2;
  if (!v2[16])
    return 0;
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v2 + 16) + 176))(*(_QWORD *)(*(_QWORD *)v2 + 16));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 248) + 32);
  v5 = (void *)operator new[]();
  v6 = v5;
  if ((_DWORD)v4)
    bzero(v5, 16 * v4);
  *(_QWORD *)(a1 + 264) = v6;
  v7 = *(unsigned int *)(a1 + 328);
  if ((*(_DWORD *)(a1 + 384) & 0x3F) != 0)
  {
    v134 = *(_QWORD *)(a1 + 320) + 8 * v7;
    *(_QWORD *)(v134 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 384) & 0x3F));
  }
  v8 = v7;
  v142 = (_QWORD *)(a1 + 320);
  *(_DWORD *)(a1 + 384) = v4;
  v9 = (v4 + 63) >> 6;
  if ((_DWORD)v7 != (v4 + 63) >> 6)
  {
    if (v7 <= v9)
    {
      v10 = v7;
      if (v9 > *(_DWORD *)(a1 + 332))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v142, a1 + 336, v9, 8);
        v10 = *(unsigned int *)(a1 + 328);
        v8 = *(_DWORD *)(a1 + 328);
      }
      if (v9 != v7)
        bzero((void *)(*v142 + 8 * v10), 8 * (v9 - v7));
      v8 += v9 - v7;
      *(_DWORD *)(a1 + 328) = v8;
      v11 = *(_DWORD *)(a1 + 384);
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 328) = v9;
    v8 = (v4 + 63) >> 6;
  }
  LOBYTE(v11) = v4;
LABEL_13:
  v12 = v11 & 0x3F;
  if (v12)
    *(_QWORD *)(*v142 + 8 * v8 - 8) &= ~(-1 << v12);
  v13 = *(unsigned int *)(a1 + 400);
  if ((*(_DWORD *)(a1 + 456) & 0x3F) != 0)
  {
    v135 = *(_QWORD *)(a1 + 392) + 8 * v13;
    *(_QWORD *)(v135 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 456) & 0x3F));
  }
  v14 = v13;
  v148 = (_QWORD *)(a1 + 392);
  *(_DWORD *)(a1 + 456) = v4;
  if ((_DWORD)v13 != (_DWORD)v9)
  {
    if (v13 > v9)
    {
      *(_DWORD *)(a1 + 400) = v9;
    }
    else
    {
      v15 = v13;
      if (v9 > *(_DWORD *)(a1 + 404))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v148, a1 + 408, v9, 8);
        v15 = *(unsigned int *)(a1 + 400);
        v14 = *(_DWORD *)(a1 + 400);
      }
      if (v9 != v13)
        bzero((void *)(*v148 + 8 * v15), 8 * (v9 - v13));
      LODWORD(v9) = v14 + v9 - v13;
      *(_DWORD *)(a1 + 400) = v9;
      LODWORD(v4) = *(_DWORD *)(a1 + 456);
    }
  }
  if ((v4 & 0x3F) != 0)
    *(_QWORD *)(*v148 + 8 * v9 - 8) &= ~(-1 << (v4 & 0x3F));
  v16 = 0;
  v140 = (_QWORD *)(a1 + 272);
  v147 = a2 + 320;
  while (1)
  {
    v137 = v16;
    v17 = *(_QWORD *)(a1 + 248);
    v18 = *(unsigned int *)(v17 + 32);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v139 = *(unsigned int *)(v17 + 32);
      while (1)
      {
        v20 = *(_QWORD *)(a1 + 264);
        v21 = *(_QWORD *)(a1 + 248);
        v22 = v19 & 0x7FFFFFFF;
        v23 = *(_QWORD *)(v21 + 24);
        v24 = *(_QWORD *)(v23 + 16 * v22 + 8);
        if (!v24
          || (v25 = *(_QWORD *)(v23 + 16 * (v19 & 0x7FFFFFFF) + 8), (*(_DWORD *)v24 & 0x1000000) == 0)
          && ((v25 = *(_QWORD *)(v24 + 24)) == 0 || (*(_BYTE *)(v25 + 3) & 1) == 0)
          || (v26 = *(_QWORD *)(v25 + 24)) != 0 && (*(_BYTE *)(v26 + 3) & 1) != 0)
        {
          v28 = -1;
          goto LABEL_87;
        }
        if ((*(_DWORD *)v24 & 0x1000000) == 0)
        {
          v27 = *(_QWORD *)(v24 + 24);
          if (v27)
          {
            if ((*(_BYTE *)(v27 + 3) & 1) != 0)
              v24 = *(_QWORD *)(v24 + 24);
            else
              v24 = 0;
          }
          else
          {
            v24 = 0;
          }
        }
        v144 = *(_QWORD *)(v24 + 8);
        v29 = **(unsigned __int16 **)(v144 + 16);
        if (v29 > 0x13)
          goto LABEL_85;
        if (((1 << v29) & 0xC0301) == 0)
          break;
        v30 = (v19 >> 6) & 0x1FFFFFF;
        *(_QWORD *)(*v148 + 8 * v30) |= 1 << v19;
        v149 = v19 & 0x7FFFFFFF;
        v31 = *(_QWORD *)(*v142 + 8 * v30);
        if ((v31 & (1 << v19)) == 0)
        {
          *(_QWORD *)(*v142 + 8 * v30) = v31 | (1 << v19);
          sub_1C50AE0D4(v140, &v149);
          v22 = v19 & 0x7FFFFFFF;
          v21 = *(_QWORD *)(a1 + 248);
        }
        if ((~*(_DWORD *)v24 & 0x5000000) != 0)
        {
          v32 = *(_QWORD *)(v144 + 32);
          v33 = *(_QWORD *)(v144 + 16);
          v34 = *(unsigned __int8 *)(v33 + 4);
          v35 = *(unsigned int *)(v144 + 40);
          if ((*(_BYTE *)(v33 + 8) & 2) == 0)
          {
            v36 = *(unsigned __int8 *)(v33 + 4);
            goto LABEL_49;
          }
          if ((_DWORD)v35 != v34)
          {
            v36 = *(unsigned __int8 *)(v33 + 4);
            do
            {
              v66 = *(_DWORD *)(v32 + 32 * v34);
              if ((v66 & 0x10000FF) != 0x1000000)
                break;
              v36 += (v66 & 0x2000000) == 0;
              if ((_DWORD)v35 - 1 == v34)
                break;
              ++v34;
            }
            while ((v66 & 0x2000000) == 0);
LABEL_49:
            if (v36 != (_DWORD)v35)
            {
              v138 = v20;
              v28 = 0;
              v141 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 16 * v22) & 0xFFFFFFFFFFFFFFF8;
              v37 = (_DWORD *)(v32 + 32 * v36);
              v38 = 32 * v35 - 32 * v36;
              v39 = v37;
              v143 = v22;
              while (1)
              {
                if ((*v39 & 0x300000FF) == 0 && (*v39 & 0x10FFF00) != 0x1000000)
                {
                  v41 = v39[1];
                  if ((_DWORD)v41)
                  {
                    if (v41 >> 30
                      && !sub_1C50ADE40(**(_QWORD **)(a1 + 248), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24), v144, v141, v39))
                    {
                      v43 = *(_QWORD *)(a1 + 248);
                      if ((v41 & 0x80000000) != 0)
                        v44 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                      else
                        v44 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v41);
                      v22 = v143;
                      v45 = *v44;
                      if (v45)
                      {
                        if ((*(_BYTE *)(v45 + 3) & 1) != 0
                          || (v45 = *(_QWORD *)(v45 + 24)) != 0 && (*(_BYTE *)(v45 + 3) & 1) != 0)
                        {
                          v46 = *(_QWORD *)(v45 + 24);
                          if (!v46 || (*(_BYTE *)(v46 + 3) & 1) == 0)
                          {
                            if ((v41 & 0x80000000) != 0)
                              v47 = (uint64_t *)(*(_QWORD *)(v43 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                            else
                              v47 = (uint64_t *)(*(_QWORD *)(v43 + 272) + 8 * v41);
                            v48 = *v47;
                            if ((*(_BYTE *)(v48 + 3) & 1) == 0)
                            {
                              v48 = *(_QWORD *)(v48 + 24);
                              if ((*(_BYTE *)(v48 + 3) & 1) == 0)
                                v48 = 0;
                            }
                            v49 = **(unsigned __int16 **)(*(_QWORD *)(v48 + 8) + 16);
                            v50 = v49 > 0x13;
                            v51 = (1 << v49) & 0xC0701;
                            if (!v50 && v51 != 0)
                              goto LABEL_60;
                          }
                        }
                      }
                      v53 = (*v39 >> 8) & 0xFFF;
                      v42 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v43 + 24) + 16 * (v41 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 24);
                      if ((_DWORD)v53)
                        v42 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 224))(*(_QWORD *)(a1 + 256), v53, v42);
                    }
                    else
                    {
                      v42 = -1;
                    }
                    v28 |= sub_1C50ADFCC(a1, v24, ((unint64_t)v37 - *(_QWORD *)(v144 + 32)) >> 5, v42);
                    v22 = v143;
                  }
                }
LABEL_60:
                v39 += 8;
                v37 += 8;
                v38 -= 32;
                if (!v38)
                {
                  v21 = *(_QWORD *)(a1 + 248);
                  v20 = v138;
                  v18 = v139;
                  goto LABEL_87;
                }
              }
            }
          }
        }
LABEL_86:
        v28 = 0;
LABEL_87:
        v54 = (_QWORD *)(v20 + 16 * v19);
        v54[1] = v28;
        v55 = *(int **)(*(_QWORD *)(v21 + 24) + 16 * v22 + 8);
        if (v55)
        {
          while (1)
          {
            v56 = *v55;
            if ((*v55 & 0x81000000) == 0)
              break;
            v55 = (int *)*((_QWORD *)v55 + 3);
            if (!v55)
              goto LABEL_90;
          }
          v57 = 0;
LABEL_94:
          if ((v56 & 0x30000000) != 0)
            goto LABEL_104;
          if ((v56 & 0x10FFF00) == 0x1000000)
            goto LABEL_104;
          v58 = *((_QWORD *)v55 + 1);
          v59 = **(unsigned __int16 **)(v58 + 16);
          if (v59 == 7)
            goto LABEL_104;
          v60 = v59 > 0x13 || ((1 << v59) & 0xC0301) == 0;
          if (!v60
            && (v61 = *(_DWORD *)(*(_QWORD *)(v58 + 32) + 4), v61 < 0)
            && (v59 <= 0x13 ? (v63 = ((1 << v59) & 0xC0301) == 0) : (v63 = 1),
                v63
             || (v64 = v22,
                 v65 = sub_1C50ADE40(**(_QWORD **)(a1 + 248), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24), v58, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * (v61 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v55), v22 = v64, v18 = v139, !v65)))
          {
LABEL_104:
            while (1)
            {
              v55 = (int *)*((_QWORD *)v55 + 3);
              if (!v55)
                break;
              v56 = *v55;
              if ((*v55 & 0x81000000) == 0)
                goto LABEL_94;
            }
          }
          else
          {
            v62 = (v56 >> 8) & 0xFFF;
            if (v62)
            {
              v57 |= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 232) + 8 * v62);
              goto LABEL_104;
            }
            v57 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * v22) & 0xFFFFFFFFFFFFFFF8)
                            + 24);
          }
        }
        else
        {
LABEL_90:
          v57 = 0;
        }
        *v54 = v57;
        if (++v19 == v18)
          goto LABEL_170;
      }
      if (v29 == 10)
        goto LABEL_86;
LABEL_85:
      if ((~*(_DWORD *)v24 & 0x5000000) != 0)
      {
        v28 = *(_QWORD *)((*(_QWORD *)(v23 + 16 * v22) & 0xFFFFFFFFFFFFFFF8) + 24);
        goto LABEL_87;
      }
      goto LABEL_86;
    }
LABEL_170:
    while (1)
    {
      v111 = *(_QWORD *)(a1 + 312);
      if (!v111)
        break;
      v67 = *(void ***)(a1 + 280);
      v68 = (*(unsigned int **)((char *)v67 + ((*(_QWORD *)(a1 + 304) >> 7) & 0x1FFFFFFFFFFFFF8)))[*(_QWORD *)(a1 + 304) & 0x3FFLL];
      v69 = *(_QWORD *)(a1 + 304) + 1;
      *(_QWORD *)(a1 + 304) = v69;
      *(_QWORD *)(a1 + 312) = v111 - 1;
      if (v69 >= 0x800)
      {
        operator delete(*v67);
        *(_QWORD *)(a1 + 280) += 8;
        *(_QWORD *)(a1 + 304) -= 1024;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 320) + ((v68 >> 3) & 0x1FFFFFF8)) &= ~(1 << v68);
      v70 = *(_QWORD *)(a1 + 264);
      v71 = v68 & 0x7FFFFFFF;
      v72 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * v71 + 8);
      v73 = v72;
      if ((*((_BYTE *)v72 + 3) & 1) == 0)
      {
        v73 = (int *)*((_QWORD *)v72 + 3);
        if ((*((_BYTE *)v73 + 3) & 1) == 0)
          v73 = 0;
      }
      v74 = *((_QWORD *)v73 + 1);
      v75 = *(_QWORD *)(v70 + 16 * v68);
      v76 = *(_QWORD *)(v74 + 32);
      v77 = *(_QWORD *)(v74 + 16);
      v78 = *(unsigned __int8 *)(v77 + 4);
      v79 = *(unsigned int *)(v74 + 40);
      if ((*(_BYTE *)(v77 + 8) & 2) != 0)
      {
        if ((_DWORD)v79 == v78)
          goto LABEL_146;
        v80 = *(unsigned __int8 *)(v77 + 4);
        do
        {
          v110 = *(_DWORD *)(v76 + 32 * v78);
          if ((v110 & 0x10000FF) != 0x1000000)
            break;
          v80 += (v110 & 0x2000000) == 0;
          if ((_DWORD)v79 - 1 == v78)
            break;
          ++v78;
        }
        while ((v110 & 0x2000000) == 0);
      }
      else
      {
        v80 = *(unsigned __int8 *)(v77 + 4);
      }
      if (v80 != (_DWORD)v79)
      {
        v145 = *(_QWORD *)(a1 + 264);
        v81 = (_DWORD *)(v76 + 32 * v80);
        v82 = 32 * v79 - 32 * v80;
        do
        {
          if (!*(_BYTE *)v81 && (v81[1] & 0x80000000) != 0)
          {
            v83 = sub_1C50AE424(a1, v74, v75, (uint64_t)v81);
            if ((*v81 & 0x30000000) == 0 && (*v81 & 0x10FFF00) != 0x1000000)
            {
              v85 = v81[1];
              if (v85 < 0)
              {
                v86 = v83;
                v87 = (*v81 >> 8) & 0xFFF;
                if ((_DWORD)v87)
                  v86 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 216))(*(_QWORD *)(a1 + 256), v87, v83);
                v88 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * (v85 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 24) & v86;
                v89 = (_QWORD *)(*(_QWORD *)(a1 + 264) + 16 * (v85 & 0x7FFFFFFF));
                if ((v88 & ~*v89) != 0)
                {
                  *v89 |= v88;
                  v90 = 1 << v85;
                  v91 = (v85 & 0x7FFFFFFFu) >> 6;
                  if ((*(_QWORD *)(*v148 + 8 * v91) & (1 << v85)) != 0)
                  {
                    v150 = v85 & 0x7FFFFFFF;
                    v92 = *(_QWORD *)(*v142 + 8 * v91);
                    if ((v92 & v90) == 0)
                    {
                      *(_QWORD *)(*v142 + 8 * v91) = v92 | v90;
                      sub_1C50AE0D4(v140, &v150);
                    }
                  }
                }
              }
            }
          }
          v81 += 8;
          v82 -= 32;
        }
        while (v82);
        v72 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * v71 + 8);
        v70 = v145;
        if (!v72)
          continue;
      }
LABEL_146:
      while (1)
      {
        v93 = *v72;
        if ((*v72 & 0x81000000) == 0)
          break;
        v72 = (int *)*((_QWORD *)v72 + 3);
        if (!v72)
          goto LABEL_170;
      }
      v94 = (uint64_t *)(v70 + 16 * v68 + 8);
LABEL_150:
      if ((v93 & 0x30000000) == 0 && (v93 & 0x10FFF00) != 0x1000000)
      {
        v95 = *((_QWORD *)v72 + 1);
        v96 = *(_QWORD *)(v95 + 16);
        if (*(_BYTE *)(v96 + 4) == 1 && *(_WORD *)v96 != 27)
        {
          v97 = *(_QWORD *)(v95 + 32);
          v98 = *(_DWORD *)(v97 + 4);
          if ((v98 & 0x80000000) != 0)
          {
            v99 = 1 << v98;
            v100 = (v98 >> 6) & 0x1FFFFFF;
            if ((*(_QWORD *)(*v148 + 8 * v100) & (1 << v98)) != 0)
            {
              v101 = *v94;
              v102 = (v93 >> 8) & 0xFFF;
              if ((_DWORD)v102)
                v101 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 224))(*(_QWORD *)(a1 + 256), v102, *v94);
              v103 = v98 & 0x7FFFFFFF;
              v104 = sub_1C50ADFCC(a1, v97, ((unint64_t)v72 - v97) >> 5, v101);
              v105 = *(_QWORD *)(a1 + 264) + 16 * v103;
              v108 = *(_QWORD *)(v105 + 8);
              v106 = (uint64_t *)(v105 + 8);
              v107 = v108;
              if ((v104 & ~v108) != 0)
              {
                *v106 = v107 | v104;
                v151 = v103;
                v109 = *(_QWORD *)(*v142 + 8 * v100);
                if ((v109 & v99) == 0)
                {
                  *(_QWORD *)(*v142 + 8 * v100) = v109 | v99;
                  sub_1C50AE0D4(v140, &v151);
                }
              }
            }
          }
        }
      }
      while (1)
      {
        v72 = (int *)*((_QWORD *)v72 + 3);
        if (!v72)
          break;
        v93 = *v72;
        if ((*v72 & 0x81000000) == 0)
          goto LABEL_150;
      }
    }
    v112 = *(_QWORD *)(a2 + 328);
    if (v112 == v147)
      break;
    v113 = 0;
    v146 = 0;
    do
    {
      for (i = *(_QWORD *)(v112 + 56); i != v112 + 48; i = *(_QWORD *)(i + 8))
      {
        v115 = *(unsigned int *)(i + 40);
        if (!(_DWORD)v115)
          goto LABEL_205;
        v116 = *(_QWORD *)(i + 32);
        v117 = 32 * v115;
        do
        {
          v118 = *(_DWORD *)v116;
          if (!*(_DWORD *)v116)
          {
            v119 = *(_DWORD *)(v116 + 4);
            if (v119 < 0)
            {
              v120 = v119 & 0x7FFFFFFF;
              v121 = *(_QWORD *)(a1 + 264);
              v122 = (_QWORD *)(v121 + 16 * v120);
              if ((v118 & 0x1000000) != 0 && (v118 & 0x5000000) != 0x5000000 && !*v122)
              {
                v118 |= 0x4000000u;
                *(_DWORD *)v116 = v118;
                v113 = 1;
              }
              if ((v118 & 0x30000000) == 0 && (v118 & 0x10FFF00) != 0x1000000)
              {
                if ((*v122 & *(_QWORD *)(v121 + 16 * v120 + 8) & *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 232)
                                                                            + 8 * ((v118 >> 8) & 0xFFF))) == 0)
                  goto LABEL_201;
                if ((v118 & 0x1000000) == 0)
                {
                  v124 = *(_QWORD *)(v116 + 8);
                  v125 = **(unsigned __int16 **)(v124 + 16);
                  v50 = v125 > 0x13;
                  v126 = (1 << v125) & 0xC0301;
                  if (!v50 && v126 != 0)
                  {
                    v128 = *(_DWORD *)(*(_QWORD *)(v124 + 32) + 4);
                    if ((v128 & 0x80000000) != 0
                      && ((*(_QWORD *)(*v148 + 8 * ((v128 >> 6) & 0x1FFFFFF)) >> v128) & 1) != 0)
                    {
                      v129 = v128 & 0x7FFFFFFF;
                      v130 = sub_1C50AE424(a1, *(_QWORD *)(v116 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 264) + 16 * v129), v116);
                      if (v130 || (*(_DWORD *)(v116 + 4) & 0x80000000) == 0)
                      {
                        if (v130)
                          goto LABEL_203;
                        v118 = *(_DWORD *)v116;
LABEL_201:
                        *(_DWORD *)v116 = v118 | 0x10000000;
                      }
                      else
                      {
                        v131 = sub_1C50ADE40(**(_QWORD **)(a1 + 248), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24), v124, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * v129) & 0xFFFFFFFFFFFFFFF8, (_DWORD *)v116);
                        *(_DWORD *)v116 |= 0x10000000u;
                        if (v131)
                          v146 = 1;
                      }
                      v113 = 1;
                    }
                  }
                }
              }
            }
          }
LABEL_203:
          v116 += 32;
          v117 -= 32;
        }
        while (v117);
        if (i)
        {
LABEL_205:
          if ((*(_BYTE *)i & 4) != 0)
            continue;
        }
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
      v112 = *(_QWORD *)(v112 + 8);
    }
    while (v112 != v147);
    v16 = (v113 | v137) != 0;
    if (!v146)
      goto LABEL_215;
  }
  v16 = v137;
LABEL_215:
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  v132 = *(_QWORD *)(a1 + 264);
  if (v132)
    MEMORY[0x1CAA32F9C](v132, 0x1000C80451B5BE8, 787201);
  return v16;
}

uint64_t sub_1C50ADD7C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1C50ADE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v16;
  uint64_t CommonSuperRegClass;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a2 + 16 * (a5[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == a4)
    return 0;
  v9 = (*a5 >> 8) & 0xFFF;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16));
  v11 = v10;
  v12 = **(unsigned __int16 **)(a3 + 16);
  switch(v12)
  {
    case 8:
      v16 = *(_QWORD *)(a3 + 32);
      if (*(_DWORD *)(v16 + 80))
      {
        if (!(_DWORD)v9)
        {
          v9 = *(unsigned int *)(v16 + 80);
          goto LABEL_21;
        }
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 208))(v10);
      }
      break;
    case 18:
      v14 = (unsigned int *)(*(_QWORD *)(a3 + 32)
                           + 32 * ((((unint64_t)a5 - *(_QWORD *)(a3 + 32)) >> 5) + 1)
                           + 16);
      goto LABEL_14;
    case 9:
      v13 = *(_QWORD *)(a3 + 32);
      if ((((unint64_t)a5 - v13) & 0x1FFFFFFFE0) == 0x40)
      {
        v14 = (unsigned int *)(v13 + 112);
LABEL_14:
        v18 = *v14;
        v19 = 0;
        if ((_DWORD)v9 && (_DWORD)v18)
        {
          CommonSuperRegClass = (uint64_t)llvm::TargetRegisterInfo::getCommonSuperRegClass(v10, v5, v9, a4, v18, (_DWORD *)&v19 + 1, &v19);
          return CommonSuperRegClass == 0;
        }
        if (!(_DWORD)v9)
        {
          if ((_DWORD)v18)
          {
            CommonSuperRegClass = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 184))(v10, a4, v5, v18);
            return CommonSuperRegClass == 0;
          }
          goto LABEL_12;
        }
LABEL_21:
        CommonSuperRegClass = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 184))(v11, v5, a4, v9);
        return CommonSuperRegClass == 0;
      }
      break;
  }
  if ((_DWORD)v9)
    goto LABEL_21;
LABEL_12:
  CommonSuperRegClass = llvm::TargetRegisterInfo::getCommonSubClass(v11, v5, a4);
  return CommonSuperRegClass == 0;
}

uint64_t sub_1C50ADFCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = **(unsigned __int16 **)(v6 + 16);
  if (v7 <= 8)
  {
    if (**(_WORD **)(v6 + 16))
    {
      v10 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 80);
      if ((_DWORD)v10)
        a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 224))(*(_QWORD *)(a1 + 256), v10, a4);
    }
  }
  else
  {
    if (v7 == 9)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 112);
      v9 = v8;
      if (a3 != 2)
      {
        a4 &= ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 232) + 8 * v8);
        return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24)
                                      + 16 * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                         + 24) & a4;
      }
    }
    else
    {
      if (v7 == 19)
        return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24)
                                      + 16 * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                         + 24) & a4;
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 32 * (a3 + 1) + 16);
      v9 = v8;
    }
    if ((_DWORD)v8)
      a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 216))(*(_QWORD *)(a1 + 256), v8, a4);
    a4 &= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 232) + 8 * v9);
  }
  return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24) + 16 * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                   + 24) & a4;
}

void sub_1C50AE0D4(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1C50AE158((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1C50AE158(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v22 = 1;
      else
        v22 = (v6 - v10) >> 2;
      if (!(v22 >> 61))
      {
        v23 = (char *)operator new(8 * v22);
        v24 = &v23[8 * (v22 >> 2)];
        v25 = &v23[8 * v22];
        v27 = v6 - v7;
        v26 = v6 == v7;
        v6 = v24;
        if (!v26)
        {
          v6 = &v24[v27 & 0xFFFFFFFFFFFFFFF8];
          v28 = 8 * (v27 >> 3);
          v29 = &v23[8 * (v22 >> 2)];
          do
          {
            v30 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v29 = v30;
            v29 += 8;
            v28 -= 8;
          }
          while (v28);
        }
        goto LABEL_21;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_31;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = v18 - *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = v20 - *(_QWORD *)a1;
  if (v19 < v21)
  {
    if (v20 != v18)
    {
      *(_QWORD *)&v46 = operator new(0x1000uLL);
      sub_1C61A2C78(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0x1000uLL);
    sub_1C61A2DAC((const void **)a1, &v46);
    v34 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v35 = *v34;
    v7 = (char *)(v34 + 1);
    v8 = v35;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_31;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v40 = 1;
      else
        v40 = (v6 - v10) >> 2;
      if (!(v40 >> 61))
      {
        v23 = (char *)operator new(8 * v40);
        v24 = &v23[8 * (v40 >> 2)];
        v25 = &v23[8 * v40];
        v41 = v6 - v7;
        v26 = v6 == v7;
        v6 = v24;
        if (!v26)
        {
          v6 = &v24[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = 8 * (v41 >> 3);
          v43 = &v23[8 * (v40 >> 2)];
          do
          {
            v44 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v44;
            v43 += 8;
            v42 -= 8;
          }
          while (v42);
        }
LABEL_21:
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v24;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v25;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_31;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v20 == *(_QWORD *)a1)
    v31 = 1;
  else
    v31 = v21 >> 2;
  v48 = a1 + 24;
  if (v31 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v31);
  *((_QWORD *)&v46 + 1) = v46 + v19;
  *(_QWORD *)&v47 = v46 + v19;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v31;
  v45 = operator new(0x1000uLL);
  sub_1C61A2C78((uint64_t)&v46, &v45);
  v32 = *(char **)(a1 + 16);
  if (v32 == *(char **)(a1 + 8))
  {
    v33 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v32 -= 8;
      sub_1C61A2DAC((const void **)&v46, v32);
    }
    while (v32 != *(char **)(a1 + 8));
    v33 = *(char **)(a1 + 16);
  }
  v36 = *(char **)a1;
  v37 = v46;
  v38 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v32;
  v39 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v37;
  *(_OWORD *)(a1 + 16) = v38;
  *(_QWORD *)&v47 = v33;
  *((_QWORD *)&v47 + 1) = v39;
  if (v33 != v32)
    *(_QWORD *)&v47 = &v33[(v32 - v33 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v36)
    operator delete(v36);
}

uint64_t sub_1C50AE424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v12;
  unint64_t v13;

  v6 = *(_QWORD *)(a2 + 32);
  v7 = **(unsigned __int16 **)(a2 + 16);
  if (v7 <= 8)
  {
    if (**(_WORD **)(a2 + 16) && *(_DWORD *)(v6 + 80))
    {
      v9 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 256) + 216);
      return v9();
    }
    return a3;
  }
  v8 = a4 - v6;
  if (v7 != 9)
  {
    if (v7 != 19 && *(_DWORD *)(v6 + 32 * ((v8 >> 5) + 1) + 16))
    {
      v9 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 256) + 224);
      return v9();
    }
    return a3;
  }
  v12 = *(_QWORD *)(v6 + 112);
  result = a3;
  if ((_DWORD)v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 224))(*(_QWORD *)(a1 + 256), v12, a3);
  if ((v8 & 0x1FFFFFFFE0) != 0x40)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24)
                    + 16 * (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    if (*(_BYTE *)(v13 + 35))
      return a3 & ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 232) + 8 * v12);
    else
      return *(_QWORD *)(v13 + 24);
  }
  return result;
}

uint64_t sub_1C50AE550(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD **)(*(_QWORD *)a1 + 8);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v6 = *(_QWORD *)a1 + 8;
  do
  {
    v7 = v2[4];
    if (v7 >= v4)
    {
      if (v4 >= v7)
      {
        if (v2[5] < v5)
          ++v2;
        else
          v6 = (uint64_t)v2;
      }
      else
      {
        v6 = (uint64_t)v2;
      }
    }
    else
    {
      ++v2;
    }
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  if (v6 == *(_QWORD *)a1 + 8)
    return 0;
  v8 = *(_QWORD *)(v6 + 32);
  if (v4 < v8 || v8 >= v4 && v5 < *(_QWORD *)(v6 + 40))
    return 0;
  v10 = *(uint64_t **)(a1 + 16);
  if (v10 && *(_BYTE *)(a1 + 40))
  {
    v11 = *(unsigned int *)(v6 + 56);
    v12 = *v10;
    LODWORD(v13) = -1;
    do
      v13 = (v13 + 1);
    while (*(_QWORD *)(v12 + 16 * (v13 + v11) + 8));
    sub_1C61DCE14((uint64_t)v10, (_QWORD *)(v12 + 16 * v11), v13);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v6 + 48);
  return 1;
}

BOOL llvm::DFAPacketizer::canReserveResources(llvm::DFAPacketizer *this, llvm::MachineInstr *a2)
{
  BOOL v2;
  unint64_t v4;

  if (*(_WORD *)(*((_QWORD *)a2 + 2) + 6))
    v2 = *(_DWORD *)(*((_QWORD *)this + 7) + 4 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6)) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 7) + 4 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6));
  return sub_1C61DCB20((_QWORD *)this + 1, &v4);
}

uint64_t llvm::DFAPacketizer::reserveResources(uint64_t this, llvm::MachineInstr *a2)
{
  BOOL v2;
  unint64_t v3;

  if (*(_WORD *)(*((_QWORD *)a2 + 2) + 6))
    v2 = *(_DWORD *)(*(_QWORD *)(this + 56) + 4 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6)) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(this + 56) + 4 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6));
    return sub_1C50AE550(this + 8, &v3);
  }
  return this;
}

uint64_t llvm::DFAPacketizer::getUsedResources(llvm::DFAPacketizer *this, unsigned int a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  _QWORD *v24;
  uint64_t **v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  unint64_t v29;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 3);
  v4 = (unint64_t *)(v3 + 160);
  v5 = *(_QWORD *)(v3 + 160);
  v6 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v6)
  {
    v7 = 48 * v6;
    do
    {
      v8 = *(void **)(v5 + v7 - 48);
      if ((void *)(v5 + v7 - 32) != v8)
        free(v8);
      v7 -= 48;
    }
    while (v7);
  }
  *(_DWORD *)(v3 + 168) = 0;
  v9 = *(_QWORD *)(v3 + 120);
  if (*(_QWORD *)(v3 + 128) != v9)
  {
    v10 = *(_QWORD *)(v3 + 144);
    v11 = (_QWORD *)(v9 + 8 * (v10 >> 9));
    v12 = (uint64_t **)(*v11 + 8 * (v10 & 0x1FF));
    v13 = *(_QWORD *)(v9 + (((*(_QWORD *)(v3 + 152) + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(v3 + 152) + v10) & 0x1FF);
    while (v12 != (uint64_t **)v13)
    {
      v14 = *v12;
      v31 = v33;
      v32 = 0x400000000;
      v15 = *v14;
      if (*v14)
      {
        v16 = 0;
        do
        {
          if (v16 >= HIDWORD(v32))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v16 + 1, 8);
            v16 = v32;
          }
          *((_QWORD *)v31 + v16) = v15;
          v16 = v32 + 1;
          LODWORD(v32) = v32 + 1;
          v14 = (uint64_t *)v14[1];
          v15 = *v14;
        }
        while (*v14);
        v17 = (char *)v31 + 8 * v16 - 8;
        if (v16)
          v18 = v31 >= v17;
        else
          v18 = 1;
        if (!v18)
        {
          v19 = (char *)v31 + 8;
          do
          {
            v20 = *((_QWORD *)v19 - 1);
            *((_QWORD *)v19 - 1) = *(_QWORD *)v17;
            *(_QWORD *)v17 = v20;
            v17 -= 8;
            v18 = v19 >= v17;
            v19 += 8;
          }
          while (!v18);
        }
      }
      v21 = *(unsigned int *)(v3 + 168);
      v22 = *(_QWORD *)(v3 + 160);
      if (v21 >= *(_DWORD *)(v3 + 172))
      {
        v26 = v21 + 1;
        v27 = v22 + 48 * v21 > (unint64_t)&v31;
        if (v22 <= (unint64_t)&v31 && v27)
        {
          v28 = (char *)&v31 - v22;
          sub_1C50AFBD0((uint64_t)v4, v26);
          v22 = *v4;
          v23 = (void **)&v28[*v4];
          goto LABEL_22;
        }
        sub_1C50AFBD0((uint64_t)v4, v26);
        v22 = *v4;
      }
      v23 = &v31;
LABEL_22:
      v24 = (_QWORD *)(v22 + 48 * *(unsigned int *)(v3 + 168));
      *v24 = v24 + 2;
      v24[1] = 0x400000000;
      if (*((_DWORD *)v23 + 2))
        sub_1C614D378((uint64_t)v24, (uint64_t)v23);
      ++*(_DWORD *)(v3 + 168);
      if (v31 != v33)
        free(v31);
      if ((uint64_t **)((char *)++v12 - *v11) == (uint64_t **)4096)
      {
        v25 = (uint64_t **)v11[1];
        ++v11;
        v12 = v25;
      }
    }
  }
  v29 = *v4;
  if (a2)
    return *(_QWORD *)(*(_QWORD *)v29 + 8 * (a2 - 1)) ^ *(_QWORD *)(*(_QWORD *)v29 + 8 * a2);
  else
    return **(_QWORD **)v29;
}

llvm::ScheduleDAGInstrs *llvm::DefaultVLIWScheduler::DefaultVLIWScheduler(llvm::DefaultVLIWScheduler *this, const llvm::TargetSubtargetInfo **a2, llvm::MachineLoopInfo *a3, llvm::AAResults *a4)
{
  llvm::ScheduleDAGInstrs *result;

  result = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(this, a2, a3, 0);
  *(_QWORD *)result = off_1E8141BA8;
  *((_QWORD *)result + 329) = a4;
  *((_QWORD *)result + 330) = 0;
  *((_QWORD *)result + 332) = 0;
  *((_QWORD *)result + 331) = 0;
  *((_BYTE *)result + 913) = 1;
  return result;
}

{
  llvm::ScheduleDAGInstrs *result;

  result = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(this, a2, a3, 0);
  *(_QWORD *)result = off_1E8141BA8;
  *((_QWORD *)result + 329) = a4;
  *((_QWORD *)result + 330) = 0;
  *((_QWORD *)result + 332) = 0;
  *((_QWORD *)result + 331) = 0;
  *((_BYTE *)result + 913) = 1;
  return result;
}

uint64_t llvm::DefaultVLIWScheduler::postprocessDAG(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(this + 2640);
  v2 = *(uint64_t **)(this + 2648);
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      v4 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v3);
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t llvm::DefaultVLIWScheduler::schedule(llvm::AAResults **this)
{
  uint64_t result;
  llvm::AAResults *v3;
  llvm::AAResults *v4;
  uint64_t v5;

  result = llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)this, this[329], 0, 0, 0, 0);
  v3 = this[330];
  v4 = this[331];
  while (v3 != v4)
  {
    v5 = *(_QWORD *)v3;
    v3 = (llvm::AAResults *)((char *)v3 + 8);
    result = (*(uint64_t (**)(uint64_t, llvm::AAResults **))(*(_QWORD *)v5 + 24))(v5, this);
  }
  return result;
}

llvm::VLIWPacketizerList *llvm::VLIWPacketizerList::VLIWPacketizerList(llvm::VLIWPacketizerList *this, llvm::MachineFunction *a2, llvm::MachineLoopInfo *a3, llvm::AAResults *a4)
{
  uint64_t v7;
  uint64_t v8;
  llvm::ScheduleDAGInstrs *v9;
  uint64_t v10;
  llvm::ScheduleDAGInstrs *v11;

  *(_QWORD *)this = &off_1E8141C38;
  *((_QWORD *)this + 1) = a2;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 1056))(v7, *(_QWORD *)(*((_QWORD *)this + 1) + 16));
  *((_QWORD *)this + 8) = v8;
  *(_BYTE *)(v8 + 48) = 1;
  v9 = (llvm::ScheduleDAGInstrs *)operator new();
  v10 = *((_QWORD *)this + 3);
  v11 = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(v9, *((const llvm::TargetSubtargetInfo ***)this + 1), a3, 0);
  *(_QWORD *)v11 = off_1E8141BA8;
  *((_QWORD *)v11 + 329) = v10;
  *((_QWORD *)v11 + 330) = 0;
  *((_QWORD *)v11 + 332) = 0;
  *((_QWORD *)v11 + 331) = 0;
  *((_BYTE *)v11 + 913) = 1;
  *((_QWORD *)this + 4) = v11;
  return this;
}

void llvm::VLIWPacketizerList::~VLIWPacketizerList(llvm::VLIWPacketizerList *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E8141C38;
  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    sub_1C61DCC08(v3 + 8);
    MEMORY[0x1CAA32FC0](v3, 0x1070C405C112D20);
  }
  sub_1C49F3440(*((_QWORD **)this + 10));
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
}

{
  llvm::VLIWPacketizerList::~VLIWPacketizerList(this);
  JUMPOUT(0x1CAA32FC0);
}

void llvm::VLIWPacketizerList::endPacket(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)a1[5];
  if (a1[6] - (_QWORD)v4 >= 9uLL)
  {
    llvm::finalizeBundle(a2, *v4, a3);
    v4 = (uint64_t *)a1[5];
  }
  a1[6] = v4;
  v5 = a1[8];
  *(_QWORD *)(v5 + 40) = 1;
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
    sub_1C61DCC98(v6);
}

uint64_t llvm::VLIWPacketizerList::PacketizeMIs(_QWORD **a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  _DWORD *v15;
  uint64_t **v16;
  _QWORD *v17;
  BOOL v18;
  _BOOL4 v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;

  (*(void (**)(_QWORD *))(*a1[4] + 80))(a1[4]);
  if (a3 == a4)
  {
    v8 = 0;
  }
  else
  {
    LODWORD(v8) = 0;
    v9 = a3;
    do
    {
      if (!v9 || (*(_BYTE *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 8) != 0)
          v9 = *(_QWORD *)(v9 + 8);
      }
      v8 = (v8 + 1);
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != a4);
  }
  (*(void (**)(_QWORD *, uint64_t, unint64_t, unint64_t, uint64_t))(*a1[4] + 96))(a1[4], a2, a3, a4, v8);
  (*(void (**)(_QWORD *))(*a1[4] + 112))(a1[4]);
  sub_1C49F3440(a1[10]);
  a1[9] = a1 + 10;
  v10 = a1 + 9;
  a1[10] = 0;
  a1[11] = 0;
  v11 = a1[4];
  v12 = (uint64_t *)v11[6];
  v13 = (uint64_t *)v11[7];
  while (v12 != v13)
  {
    v34 = (uint64_t *)v12[1];
    sub_1C506577C(a1 + 9, (unint64_t)v34, &v34)[5] = v12;
    v12 += 34;
  }
  if (a3 != a4)
  {
    v14 = (unsigned __int16)word_1ED7F721C;
    v15 = &unk_1ED7F7000;
    do
    {
      if (v14)
      {
        if (dword_1ED7F7208 >= dword_1ED7F7290)
          goto LABEL_52;
        v15[130] = dword_1ED7F7208 + 1;
      }
      ((void (*)(_QWORD **))(*a1)[4])(a1);
      if (((unsigned int (*)(_QWORD **, unint64_t))(*a1)[6])(a1, a3))
      {
        ((void (*)(_QWORD **, uint64_t, unint64_t))(*a1)[3])(a1, a2, a3);
      }
      else if ((((uint64_t (*)(_QWORD **, unint64_t, uint64_t))(*a1)[5])(a1, a3, a2) & 1) == 0)
      {
        v34 = (uint64_t *)a3;
        v16 = sub_1C506577C(a1 + 9, a3, &v34);
        v17 = a1[8];
        if (*(_WORD *)(*(_QWORD *)(a3 + 16) + 6))
          v18 = *(_DWORD *)(v17[7] + 4 * *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6)) == 0;
        else
          v18 = 1;
        if (!v18
          && (v33 = v16[5],
              v34 = (uint64_t *)*(unsigned int *)(v17[7] + 4 * *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6)),
              v19 = sub_1C61DCB20(v17 + 1, (unint64_t *)&v34),
              v19 && ((unsigned int (*)(_QWORD **, unint64_t))(*a1)[7])(a1, a3)))
        {
          v21 = (uint64_t **)a1[5];
          v20 = (uint64_t **)a1[6];
          v31 = v20;
          while (v21 != v20)
          {
            v22 = *v21;
            v23 = a1 + 10;
            while (1)
            {
              v24 = *v23;
              v25 = v23;
              if (!*v23)
                break;
              while (1)
              {
                v23 = (uint64_t **)v24;
                v26 = v24[4];
                if (v26 > (unint64_t)v22)
                  break;
                if (v26 >= (unint64_t)v22)
                  goto LABEL_49;
                v24 = v23[1];
                if (!v24)
                {
                  v25 = v23 + 1;
                  goto LABEL_46;
                }
              }
            }
LABEL_46:
            v32 = (uint64_t *)v23;
            v23 = (uint64_t **)operator new(0x30uLL);
            v23[4] = v22;
            v23[5] = 0;
            *v23 = 0;
            v23[1] = 0;
            v23[2] = v32;
            *v25 = (uint64_t *)v23;
            v27 = (_QWORD *)**v10;
            v28 = (uint64_t *)v23;
            if (v27)
            {
              *v10 = v27;
              v28 = *v25;
            }
            sub_1C4768E74(a1[10], v28);
            a1[11] = (_QWORD *)((char *)a1[11] + 1);
LABEL_49:
            v29 = v23[5];
            v15 = (_DWORD *)&unk_1ED7F7000;
            if ((((uint64_t (*)(_QWORD **, uint64_t *, uint64_t *))(*a1)[8])(a1, v33, v29) & 1) == 0
              && !((unsigned int (*)(_QWORD **, uint64_t *, uint64_t *))(*a1)[9])(a1, v33, v29))
            {
              goto LABEL_27;
            }
            ++v21;
            v20 = v31;
          }
        }
        else
        {
LABEL_27:
          ((void (*)(_QWORD **, uint64_t, unint64_t))(*a1)[3])(a1, a2, a3);
        }
        a3 = ((uint64_t (*)(_QWORD **, unint64_t))(*a1)[2])(a1, a3);
      }
      if (!a3 || (*(_BYTE *)a3 & 4) == 0)
      {
        while ((*(_WORD *)(a3 + 44) & 8) != 0)
          a3 = *(_QWORD *)(a3 + 8);
      }
      a3 = *(_QWORD *)(a3 + 8);
    }
    while (a3 != a4);
    a3 = a4;
  }
LABEL_52:
  ((void (*)(_QWORD **, uint64_t, unint64_t))(*a1)[3])(a1, a2, a3);
  (*(void (**)(_QWORD *))(*a1[4] + 104))(a1[4]);
  return (*(uint64_t (**)(_QWORD *))(*a1[4] + 88))(a1[4]);
}

BOOL llvm::VLIWPacketizerList::alias(llvm::VLIWPacketizerList *this, const llvm::MachineMemOperand *a2, const llvm::MachineMemOperand *a3, int a4)
{
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unint64_t v30;
  _QWORD v31[2];
  int8x16_t v32;
  int8x16_t v33;
  _QWORD v34[2];
  int8x16_t v35;
  int8x16_t v36;

  if (*(_QWORD *)a2 < 8uLL || (*(_QWORD *)a2 & 4) != 0)
    return 1;
  if (*(_QWORD *)a3 < 8uLL || (*(_QWORD *)a3 & 4) != 0)
    return 1;
  v11 = *((_QWORD *)a2 + 1);
  if (*((_QWORD *)a3 + 1) >= v11)
    v12 = *((_QWORD *)a2 + 1);
  else
    v12 = *((_QWORD *)a3 + 1);
  if ((*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v14 = (unint64_t)(sub_1C4825F50((unint64_t *)a2 + 3) + 7) >> 3;
    if ((_DWORD)v13 == 1)
    v11 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v14 = -1;
  }
  v15 = v14 - v12 + v11;
  if ((*((_QWORD *)a3 + 3) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v17 = (unint64_t)(sub_1C4825F50((unint64_t *)a3 + 3) + 7) >> 3;
    if ((_DWORD)v16 == 1)
    {
      v30 = v17;
      v17 = v30;
    }
  }
  else
  {
    v17 = -1;
  }
  v18 = *(_QWORD *)a3;
  v19 = v17 - v12 + *((_QWORD *)a3 + 1);
  v20 = *((_QWORD *)this + 3);
  if ((*(_QWORD *)a2 & 4) != 0)
    v21 = 0;
  else
    v21 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v15 <= 0x7FFFFFFFFFFFFFFBLL)
    v22 = v15;
  else
    v22 = -2;
  if (a4)
    v23 = -1;
  else
    v23 = 0;
  v24 = (int8x16_t)vdupq_n_s64(v23);
  v25 = vandq_s8(*(int8x16_t *)((char *)a2 + 40), v24);
  v26 = vandq_s8(*(int8x16_t *)((char *)a2 + 56), v24);
  v34[0] = v21;
  v34[1] = v22;
  v35 = v25;
  v36 = v26;
  v27 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 4) != 0)
    v27 = 0;
  if (v19 > 0x7FFFFFFFFFFFFFFBLL)
    v19 = -2;
  v28 = vandq_s8(*(int8x16_t *)((char *)a3 + 40), v24);
  v29 = vandq_s8(*(int8x16_t *)((char *)a3 + 56), v24);
  v31[0] = v27;
  v31[1] = v19;
  v32 = v28;
  v33 = v29;
  return llvm::AAResults::alias(v20, (uint64_t)v34, (uint64_t)v31) != 0;
}

uint64_t llvm::VLIWPacketizerList::alias(llvm::VLIWPacketizerList *this, const llvm::MachineInstr *a2, const llvm::MachineInstr *a3, int a4)
{
  unint64_t v4;
  unint64_t *v5;
  _DWORD *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t result;
  _DWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  const llvm::MachineMemOperand **v18;
  unint64_t v19;
  const llvm::MachineMemOperand *v20;
  int *v21;
  uint64_t v23;
  const llvm::MachineMemOperand **v24;
  uint64_t v25;
  const llvm::MachineMemOperand **v26;

  v5 = (unint64_t *)((char *)a2 + 48);
  v4 = *((_QWORD *)a2 + 6);
  if (v4 < 8)
    return 1;
  if ((v4 & 7) != 0)
  {
    v8 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    v9 = (*((_QWORD *)a2 + 6) & 7) != 3 || v8 == 0;
    if (v9 || !*v8)
      return 1;
  }
  else
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
    *v5 = v4;
  }
  v11 = (unint64_t *)((char *)a3 + 48);
  v10 = *((_QWORD *)a3 + 6);
  if (v10 < 8)
    return 1;
  if ((v10 & 7) != 0)
  {
    result = 1;
    if ((*((_QWORD *)a3 + 6) & 7) != 3)
      return result;
    v13 = (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if (!v13 || !*v13)
      return result;
  }
  else
  {
    *v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    v4 = *v5;
  }
  if (v4 < 8)
    return 0;
  if ((v4 & 7) == 0)
  {
    *((_QWORD *)a2 + 6) = v4 & 0xFFFFFFFFFFFFFFF8;
    v17 = (unint64_t *)((char *)a2 + 56);
    goto LABEL_25;
  }
  result = 0;
  if ((v4 & 7) != 3)
    return result;
  v14 = (int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0)
    return result;
  v16 = *v14;
  v5 = (unint64_t *)(v14 + 2);
  v15 = v16;
  if (!(_DWORD)v16)
    return 0;
  v17 = &v5[v15];
LABEL_25:
  v18 = (const llvm::MachineMemOperand **)((char *)a3 + 56);
  while (1)
  {
    v19 = *v11;
    if (*v11 >= 8)
      break;
LABEL_37:
    result = 0;
    if (++v5 == v17)
      return result;
  }
  v20 = (const llvm::MachineMemOperand *)*v5;
  if ((v19 & 7) != 0)
  {
    v21 = (int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((*v11 & 7) == 3 && v21 != 0)
    {
      v25 = *v21;
      v24 = (const llvm::MachineMemOperand **)(v21 + 2);
      v23 = v25;
      if ((_DWORD)v25)
      {
        v26 = &v24[v23];
        goto LABEL_35;
      }
    }
    goto LABEL_37;
  }
  *v11 = v19 & 0xFFFFFFFFFFFFFFF8;
  v26 = v18;
  v24 = (const llvm::MachineMemOperand **)v11;
LABEL_35:
  while (!llvm::VLIWPacketizerList::alias(this, v20, *v24, a4))
  {
    if (++v24 == v26)
      goto LABEL_37;
  }
  return 1;
}

_QWORD *llvm::VLIWPacketizerList::addMutation(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  _QWORD *v6;

  v2 = result[4];
  v3 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)v3;
  v4 = *(uint64_t **)(v2 + 2648);
  if ((unint64_t)v4 >= *(_QWORD *)(v2 + 2656))
  {
    v5 = sub_1C483904C((char **)(v2 + 2640), (uint64_t *)&v6);
    result = v6;
    *(_QWORD *)(v2 + 2648) = v5;
    v6 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
  }
  else
  {
    *v4 = v3;
    *(_QWORD *)(v2 + 2648) = v4 + 1;
  }
  return result;
}

void sub_1C50AF3F0(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_1E8141BA8;
  v2 = (void **)(a1 + 2640);
  sub_1C50AF7B4(&v2);
  sub_1C50AF658(a1);
}

uint64_t sub_1C50AF438(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E8141BA8;
  v3 = (void **)(a1 + 2640);
  sub_1C50AF7B4(&v3);
  sub_1C50AF658(a1);
  return MEMORY[0x1CAA32FC0]();
}

uint64_t sub_1C50AF494(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v19;

  v5 = (_QWORD *)a1[6];
  v4 = a1[7];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[5];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[5];
    }
    a1[5] = v13;
    a1[6] = v6;
    a1[7] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[6] = v6;
  v15 = a1[8];
  v16 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 6);
  if (*(_WORD *)(*(_QWORD *)(a2 + 16) + 6))
    v17 = *(_DWORD *)(*(_QWORD *)(v15 + 56) + 4 * v16) == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v19 = *(unsigned int *)(*(_QWORD *)(v15 + 56) + 4 * v16);
    sub_1C50AE550(v15 + 8, &v19);
  }
  return a2;
}

uint64_t sub_1C50AF5BC()
{
  return 0;
}

uint64_t sub_1C50AF5C4()
{
  return 1;
}

uint64_t sub_1C50AF5CC()
{
  return 1;
}

uint64_t sub_1C50AF5D4()
{
  return 0;
}

uint64_t sub_1C50AF5DC()
{
  return 0;
}

void sub_1C50AF5E4(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[1];
  v3 = a1[2];
  a1[5] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      return;
    v6 = 512;
  }
  a1[4] = v6;
}

void sub_1C50AF658(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)a1 = off_1E814A778;
  free(*(void **)(a1 + 2616));
  v2 = *(void **)(a1 + 2576);
  if (v2 != (void *)(a1 + 2600))
    free(v2);
  v3 = *(void **)(a1 + 2536);
  if (v3)
  {
    *(_QWORD *)(a1 + 2544) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 2464);
  if (v4 != (void *)(a1 + 2480))
    free(v4);
  v5 = *(void **)(a1 + 2440);
  if (v5)
  {
    *(_QWORD *)(a1 + 2448) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 2416);
  if (v6)
  {
    *(_QWORD *)(a1 + 2424) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 2144);
  if (v7 != (void *)(a1 + 2160))
    free(v7);
  free(*(void **)(a1 + 2072));
  v8 = *(void **)(a1 + 1736);
  if (v8 != (void *)(a1 + 1752))
    free(v8);
  free(*(void **)(a1 + 1712));
  v9 = *(void **)(a1 + 1440);
  if (v9 != (void *)(a1 + 1456))
    free(v9);
  free(*(void **)(a1 + 1416));
  v10 = *(void **)(a1 + 1208);
  if (v10 != (void *)(a1 + 1224))
    free(v10);
  free(*(void **)(a1 + 1184));
  v11 = *(void **)(a1 + 976);
  if (v11 != (void *)(a1 + 992))
    free(v11);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 952), 8);
  v12 = *(void **)(a1 + 824);
  if (v12 != (void *)(a1 + 840))
    free(v12);
  llvm::ScheduleDAG::~ScheduleDAG((llvm::ScheduleDAG *)a1);
}

void sub_1C50AF7B4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C50AF830(_QWORD *a1, char *a2, char *a3, char *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  char **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char **v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char **v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char **i;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  unint64_t v52;
  char **v53;
  char *v54;
  char *v55;
  char ***v56;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - a2) << 6) - ((uint64_t)&a3[-*(_QWORD *)a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = a1[2];
  v10 = (char **)(v8 + 8 * (v7 >> 9));
  if (v9 == v8)
    v11 = 0;
  else
    v11 = (uint64_t)&(*v10)[8 * (a1[4] & 0x1FFLL)];
  if (a3 == (char *)v11)
  {
    v13 = 0;
LABEL_13:
    v14 = (char **)(v8 + 8 * (v7 >> 9));
    goto LABEL_14;
  }
  v12 = ((uint64_t)&a3[-*(_QWORD *)a2] >> 3) + ((a2 - (char *)v10) << 6);
  v13 = v12 - ((v11 - (uint64_t)*v10) >> 3);
  if (v12 == (v11 - (uint64_t)*v10) >> 3)
  {
    a3 = (char *)v11;
    goto LABEL_13;
  }
  if (v12 < 1)
  {
    v21 = 511 - v12;
    v14 = &v10[-(v21 >> 9)];
    a3 = &(*v14)[8 * (~(_WORD)v21 & 0x1FF)];
  }
  else
  {
    v14 = &v10[(unint64_t)v12 >> 9];
    a3 = &(*v14)[8 * (v12 & 0x1FF)];
  }
LABEL_14:
  if (v6 >= 1)
  {
    v15 = a1[5];
    v16 = v6 + ((a3 - *v14) >> 3);
    if (v13 <= (unint64_t)(v15 - v6) >> 1)
    {
      if (v16 < 1)
      {
        v18 = &v14[-((unint64_t)(511 - v16) >> 9)];
        v19 = *v18;
        v20 = ~(511 - (_WORD)v16) & 0x1FF;
      }
      else
      {
        v18 = &v14[(unint64_t)v16 >> 9];
        v19 = *v18;
        v20 = v16 & 0x1FF;
      }
      v28 = &v19[8 * v20];
      if (v10 == v14)
      {
        v39 = (char *)v11;
      }
      else
      {
        sub_1C4EB9D18(&v53, *v14, a3, v18, v28);
        v29 = v54;
        v30 = v55;
        v31 = v14 - 1;
        if (v14 - 1 != v10)
        {
          v32 = *(char **)v54;
          do
          {
            v33 = *v31;
            v34 = *v31 + 4096;
            while (1)
            {
              v35 = v30 - v32;
              if ((v34 - v33) >> 3 >= v35 >> 3)
                v36 = v35 >> 3;
              else
                v36 = (v34 - v33) >> 3;
              v34 -= 8 * v36;
              v30 -= 8 * v36;
              if (v36)
                memmove(v30, v34, 8 * v36);
              if (v34 == v33)
                break;
              v37 = (char *)*((_QWORD *)v29 - 1);
              v29 -= 8;
              v32 = v37;
              v30 = v37 + 4096;
            }
            v32 = *(char **)v29;
            if ((char *)(*(_QWORD *)v29 + 4096) == v30)
            {
              v38 = (char *)*((_QWORD *)v29 + 1);
              v29 += 8;
              v32 = v38;
              v30 = v38;
            }
            --v31;
          }
          while (v31 != v10);
        }
        a3 = *v10 + 4096;
        v39 = (char *)v11;
        v18 = (char **)v29;
        v28 = v30;
      }
      sub_1C4EB9D18(&v53, v39, a3, v18, v28);
      v49 = a1[5] - v6;
      v50 = a1[4] + v6;
      a1[4] = v50;
      a1[5] = v49;
      if (v50 >= 0x400)
      {
        v51 = (void **)a1[1];
        do
        {
          operator delete(*v51);
          v51 = (void **)(a1[1] + 8);
          a1[1] = v51;
          v52 = a1[4] - 512;
          a1[4] = v52;
        }
        while (v52 > 0x3FF);
      }
    }
    else
    {
      if (v16 < 1)
      {
        v22 = 511 - v16;
        LOWORD(v16) = ~(511 - v16);
        v17 = &v14[-(v22 >> 9)];
      }
      else
      {
        v17 = &v14[(unint64_t)v16 >> 9];
      }
      v23 = *v17;
      v24 = &(*v17)[8 * (v16 & 0x1FF)];
      v25 = v15 + v7;
      v26 = (char **)(v8 + 8 * (v25 >> 9));
      if (v9 == v8)
        v27 = 0;
      else
        v27 = &(*v26)[8 * (v25 & 0x1FF)];
      v53 = v14;
      v54 = a3;
      v56 = &v53;
      if (v17 != v26)
      {
        sub_1C4EBA3AC((void ****)&v56, v24, v23 + 4096);
        for (i = v17 + 1; i != v26; ++i)
        {
          v41 = *i;
          sub_1C4EBA3AC((void ****)&v56, v41, v41 + 4096);
        }
        v24 = *v26;
      }
      sub_1C4EBA3AC((void ****)&v56, v24, v27);
      v43 = a1[1];
      v42 = a1[2];
      if (v42 == v43)
        v44 = 0;
      else
        v44 = ((v42 - v43) << 6) - 1;
      v45 = a1[4];
      v46 = a1[5] - v6;
      a1[5] = v46;
      if ((unint64_t)(v44 - (v46 + v45)) >= 0x400)
      {
        do
        {
          operator delete(*(void **)(v42 - 8));
          v47 = a1[1];
          v42 = a1[2] - 8;
          a1[2] = v42;
          if (v42 == v47)
            v48 = 0;
          else
            v48 = ((v42 - v47) << 6) - 1;
        }
        while ((unint64_t)(v48 - (a1[5] + a1[4])) > 0x3FF);
      }
    }
  }
}

void sub_1C50AFBD0(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v13);
  v4 = v3;
  v5 = *(_DWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = 48 * v6;
    v8 = v3;
    do
    {
      *v8 = v8 + 2;
      v8[1] = 0x400000000;
      if (v5[2])
        sub_1C614D378((uint64_t)v8, (uint64_t)v5);
      v5 += 12;
      v8 += 6;
      v7 -= 48;
    }
    while (v7);
    v5 = *(_DWORD **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = 12 * v9;
      do
      {
        v11 = *(_DWORD **)&v5[v10 - 12];
        if (&v5[v10 - 8] != v11)
          free(v11);
        v10 -= 12;
      }
      while (v10 * 4);
      v5 = *(_DWORD **)a1;
    }
  }
  v12 = v13;
  if (v5 != (_DWORD *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t sub_1C50AFCD0()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "If present, stops packetizing after N instructions";
  *((_QWORD *)&v1 + 1) = 50;
  sub_1C61DCD38(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F7210, &dword_1C475E000);
}

uint64_t sub_1C50AFD38(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetPassConfigPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Prepare DWARF exceptions";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "dwarfehprepare";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2EE0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50AFDDC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double sub_1C50AFDDC()
{
  _QWORD *v0;
  double result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  v0[2] = &unk_1EF8F2EE0;
  *v0 = &off_1E8141C98;
  *(_QWORD *)&result = 0x200000002;
  v0[3] = 0x200000002;
  return result;
}

void sub_1C50AFE28(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50AFE4C()
{
  return "Exception handling preparation";
}

void *sub_1C50AFE5C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  if (*(_DWORD *)(a1 + 28))
  {
    sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
    sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  }
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C50AFEE0(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t AnalysisPass;
  const llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  void ***v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void **v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *i;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  llvm::LLVMContext ***v43;
  int v44;
  llvm::Value **v45;
  uint64_t v46;
  unsigned int v47;
  llvm::LLVMContext *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t DomTree;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  char *v66;
  llvm::PointerType *v67;
  uint64_t v68;
  uint64_t **v69;
  size_t v70;
  uint64_t v71;
  llvm::PointerType *inserted;
  uint64_t v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  uint64_t **v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  llvm::BasicBlock *v88;
  _DWORD *v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  llvm::BasicBlock **v99;
  llvm::BasicBlock **v100;
  llvm::Value *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  llvm::LLVMContext *v105;
  llvm::Instruction *v106;
  llvm *v107;
  llvm::UnreachableInst *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  _QWORD *v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::LLVMContext *v130;
  llvm::LLVMContext *v131;
  llvm::LLVMContext *v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  int v136[2];
  uint64_t **v137;
  _BYTE *v138;
  _DWORD *v139;
  int v140;
  llvm::LLVMContext ***v141;
  uint64_t *v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  int v146;
  _QWORD v147[2];
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  _BYTE *v157;
  _BYTE *v158;
  uint64_t v159;
  int v160;
  _BYTE v161[64];
  _QWORD v162[3];
  __int16 v163;
  void *v164;
  uint64_t v165;
  _BYTE v166[21];
  void *v167;
  uint64_t v168;
  _BYTE v169[128];
  __int128 v170;
  uint64_t v171;
  void *v172[2];
  _BYTE v173[16];
  __int16 v174;
  int v175;
  uint64_t *v176;
  unint64_t v177;
  uint64_t v178[7];

  v178[5] = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::TargetPassConfig::ID);
  v139 = *(_DWORD **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::TargetPassConfig::ID)+ 112);
  v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v139 + 16))(v139, a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  v8 = (uint64_t *)&llvm::DominatorTreeWrapperPass::ID;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
  v11 = AnalysisPass + 32;
  if (AnalysisPass)
    v12 = AnalysisPass + 32;
  else
    v12 = 0;
  if (*(_DWORD *)(a1 + 28))
  {
    v13 = *(void ****)(a1 + 8);
    if (!AnalysisPass)
    {
      v14 = *v13;
      do
      {
        v15 = *v14;
        v14 += 2;
      }
      while (v15 != &llvm::DominatorTreeWrapperPass::ID);
      v11 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
      v13 = *(void ****)(a1 + 8);
    }
    v16 = *v13;
    do
    {
      v17 = *v16;
      v16 += 2;
    }
    while (v17 != &llvm::TargetTransformInfoWrapperPass::ID);
    v18 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v147[0] = 0;
    v147[1] = 0;
    v148 = 0;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v19 = *(_QWORD *)(v18 + 56);
    if (v19)
    {
      v8 = v147;
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(&v167, v19, a2);
      v20 = (uint64_t *)(v18 + 64);
      v21 = v167;
      v142 = (uint64_t *)(v18 + 64);
      if (!*(_BYTE *)(v18 + 72))
      {
        *(_QWORD *)(v18 + 64) = v167;
        *(_BYTE *)(v18 + 72) = 1;
LABEL_19:
        MEMORY[0x1CAA32FB4](0, 8);
        sub_1C4D8B440(v8);
        sub_1C4D8B52C((uint64_t *)&v144);
        v24 = *(_DWORD *)(a1 + 28);
        goto LABEL_21;
      }
      v167 = 0;
      v22 = *v20;
      *v20 = (uint64_t)v21;
      if (!v22)
        goto LABEL_19;
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v23 = v167;
      v167 = 0;
      if (!v23)
        goto LABEL_19;
    }
    else
    {
      sub_1C485C2F0();
    }
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
    goto LABEL_19;
  }
  v24 = 0;
  v142 = 0;
  v11 = v12;
LABEL_21:
  v144 = &v146;
  v145 = 0x1000000000;
  v152 = 0;
  v153 = 0;
  v154 = v11;
  v155 = 0;
  v156 = 1;
  v157 = v161;
  v158 = v161;
  v159 = 8;
  v160 = 0;
  memset(v162, 0, sizeof(v162));
  v163 = 0;
  if (v11)
    v25 = &v144;
  else
    v25 = 0;
  v167 = v169;
  v168 = 0x1000000000;
  v26 = v166;
  v164 = v166;
  v165 = 0x1000000000;
  v27 = (uint64_t *)(a2 + 72);
  v28 = *(uint64_t **)(a2 + 80);
  if (v28 == (uint64_t *)(a2 + 72))
  {
    v46 = 0;
    goto LABEL_92;
  }
  v141 = (llvm::LLVMContext ***)a2;
  *(_QWORD *)v136 = v7 + 177232;
  do
  {
    if (v28)
      v29 = v28 - 3;
    else
      v29 = 0;
    v31 = v29 + 5;
    v30 = (uint64_t *)v29[5];
    if (v30 != v29 + 5)
    {
      v32 = v30 ? (uint64_t)(v30 - 3) : 0;
      v33 = *(unsigned __int8 *)(v32 + 16) - 40;
      v34 = v33 >= 0xFFFFFFF5 ? v32 : 0;
      if (v30)
      {
        if (*(_BYTE *)(v34 + 16) == 34 && v33 >= 0xFFFFFFF5)
        {
          v36 = v168;
          if (v168 >= (unint64_t)HIDWORD(v168))
          {
            v127 = v11;
            v41 = v26;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v167, (uint64_t)v169, v168 + 1, 8);
            v26 = v41;
            v11 = v127;
            v36 = v168;
          }
          *((_QWORD *)v167 + v36) = v34;
          LODWORD(v168) = v168 + 1;
        }
      }
    }
    for (i = (_QWORD *)v29[6]; i != v31; i = (_QWORD *)i[1])
    {
      v38 = i - 3;
      if (i)
        v39 = i - 3;
      else
        v39 = 0;
      if (*((_BYTE *)v39 + 16) != 83)
      {
        if (*((_BYTE *)i - 8) == 94 && (*((_WORD *)i - 3) & 1) != 0)
        {
          v40 = v165;
          if (v165 >= (unint64_t)HIDWORD(v165))
          {
            v42 = v26;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, (uint64_t)v26, v165 + 1, 8);
            v26 = v42;
            v40 = v165;
          }
          *((_QWORD *)v164 + v40) = v38;
          LODWORD(v165) = v165 + 1;
        }
        break;
      }
    }
    v28 = (uint64_t *)v28[1];
  }
  while (v28 != v27);
  if (!(_DWORD)v168)
  {
    v46 = 0;
    goto LABEL_92;
  }
  v43 = v141;
  v44 = *((_DWORD *)v141 + 5);
  v138 = v26;
  if ((v44 & 0x40000000) != 0)
    v45 = *(v141 - 1);
  else
    v45 = (llvm::Value **)&v141[-4 * (v44 & 0x7FFFFFF)];
  v47 = llvm::classifyEHPersonality(*v45, v10);
  if (v47 - 7 < 6 && ((0x2Fu >> (v47 - 7)) & 1) != 0)
  {
    v46 = 0;
    goto LABEL_91;
  }
  v133 = v47;
  v48 = **v141;
  v49 = v168;
  if (v24)
  {
    v172[0] = v173;
    v172[1] = (void *)0x600000000;
    sub_1C4765AA4((char *)v172, (v168 + 63) >> 6, 0);
    v175 = v49;
    if ((_DWORD)v168)
    {
      v128 = v11;
      v130 = v48;
      v50 = 0;
      v51 = (uint64_t *)v167;
      v52 = (uint64_t *)((char *)v167 + 8 * v168);
      do
      {
        if ((_DWORD)v165)
        {
          v53 = *v51;
          v54 = (uint64_t *)v164;
          v55 = 8 * v165;
          while (1)
          {
            v56 = *v54;
            DomTree = llvm::DomTreeUpdater::getDomTree((llvm::DomTreeUpdater *)v25);
            if (llvm::isPotentiallyReachable(v56, v53, 0, DomTree, 0))
              break;
            ++v54;
            v55 -= 8;
            if (!v55)
              goto LABEL_75;
          }
          *((_QWORD *)v172[0] + (v50 >> 6)) |= 1 << v50;
        }
LABEL_75:
        ++v50;
        ++v51;
      }
      while (v51 != v52);
      LODWORD(v49) = v175;
      v11 = v128;
      v43 = v141;
      v48 = v130;
    }
    v58 = v49 >> 6;
    if (v49 < 0x40)
    {
LABEL_83:
      if ((v49 & 0x3F) == 0 || *((_QWORD *)v172[0] + v58) == ~(-1 << (v49 & 0x3F)))
      {
        v49 = v168;
        goto LABEL_86;
      }
    }
    else
    {
      v59 = (uint64_t *)v172[0];
      if (v58 <= 1)
        v60 = 1;
      else
        v60 = v58;
      while (1)
      {
        v61 = *v59++;
        if (v61 != -1)
          break;
        if (!--v60)
          goto LABEL_83;
      }
    }
    v131 = v48;
    v71 = v168;
    if ((_DWORD)v168)
    {
      v104 = 0;
      v49 = 0;
      v105 = **v43;
      do
      {
        v106 = (llvm::Instruction *)*((_QWORD *)v167 + v104);
        if (((*((_QWORD *)v172[0] + (v104 >> 6)) >> v104) & 1) != 0)
        {
          *((_QWORD *)v167 + v49++) = v106;
        }
        else
        {
          v107 = (llvm *)*((_QWORD *)v106 + 5);
          v108 = (llvm::UnreachableInst *)operator new(0x40uLL);
          *((_DWORD *)v108 + 5) &= 0x38000000u;
          llvm::UnreachableInst::UnreachableInst(v108, v105, v106);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v106 + 5) + 40, (uint64_t ***)v106);
          v109 = *((_QWORD *)v106 + 3);
          v110 = (_QWORD *)*((_QWORD *)v106 + 4);
          *v110 = v109;
          *(_QWORD *)(v109 + 8) = v110;
          *((_QWORD *)v106 + 3) = 0;
          *((_QWORD *)v106 + 4) = 0;
          llvm::Value::deleteValue(v106);
          LODWORD(v170) = 1;
          *(_QWORD *)((char *)&v170 + 4) = 0x101000001000000;
          v171 = 0;
          v111 = *(_QWORD *)(*((_QWORD *)v107 + 7) + 40) + 272;
          v176 = v142;
          v177 = (unint64_t)v25;
          v178[1] = 0;
          v178[2] = 0;
          v178[0] = v111;
          v178[3] = (uint64_t)&v170;
          sub_1C5F89198((uint64_t)&v176, v107);
        }
        ++v104;
      }
      while (v71 != v104);
    }
    else
    {
      v49 = 0;
    }
    sub_1C6154790((uint64_t)&v167, v49);
    v48 = v131;
LABEL_86:
    if (v172[0] != v173)
      free(v172[0]);
  }
  v26 = v138;
  if (!v49)
  {
    v46 = 1;
    goto LABEL_92;
  }
  v129 = v11;
  if ((v133 & 0xFFFFFFFE) == 4
    && (v63 = v139[118], v63 <= 0x28)
    && ((1 << v63) & 0x18000000006) != 0
    && (v64 = v139[122], v64 <= 0xE)
    && ((1 << v64) & 0x6E30) != 0
    && v139[123] == 3)
  {
    v65 = *(_QWORD *)v136;
    v66 = *(char **)(*(_QWORD *)v136 + 8);
    v67 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v48 + 1576), 0, 0, 0);
    v135 = 0;
    v68 = 6064;
  }
  else
  {
    v65 = *(_QWORD *)v136;
    v66 = **(char ***)v136;
    v69 = (uint64_t **)(*(_QWORD *)v48 + 1576);
    v172[0] = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v48 + 1912), 0);
    v135 = 1;
    v67 = (llvm::PointerType *)llvm::FunctionType::get(v69, (uint64_t *)v172, 1, 0);
    v68 = 6060;
  }
  v140 = *(_DWORD *)(v65 + v68);
  if (v66)
    v70 = strlen(v66);
  else
    v70 = 0;
  v132 = v48;
  inserted = llvm::Module::getOrInsertFunction((uint64_t)v141[5], (unsigned __int8 *)v66, v70, v67, 0);
  v74 = (uint64_t **)inserted;
  v75 = v73;
  if (v49 == 1)
  {
    v76 = *(_QWORD *)(*(_QWORD *)v167 + 40);
    v77 = sub_1C50B0CC8(*(_QWORD *)v167);
    v176 = v178;
    v177 = 0x100000000;
    v78 = v74;
    if (v135)
    {
      v178[0] = (uint64_t)v77;
      v79 = 1;
      LODWORD(v177) = 1;
    }
    else
    {
      v79 = 0;
    }
    v112 = v79 + 1;
    v174 = 257;
    v113 = operator new(32 * v112 + 80);
    v114 = &v113[4 * v112];
    *((_DWORD *)v114 + 5) = *((_DWORD *)v114 + 5) & 0x38000000 | v112;
    do
    {
      *v113 = 0;
      v113[1] = 0;
      v113[2] = 0;
      v113[3] = v114;
      v113 += 4;
    }
    while (v113 != v114);
    sub_1C61DD0B0((llvm::Instruction *)v114, v78, v75, v178, v79, 0, 0, (uint64_t)v172, (llvm::BasicBlock *)v76);
    *((_WORD *)v114 + 9) = *((_WORD *)v114 + 9) & 0xF003 | (4 * v140);
    v114[8] = llvm::AttributeList::addAttributeAtIndex(v114 + 8, *(uint64_t **)*v114, -1, 32);
    v115 = (char *)operator new(0x40uLL);
    *(_QWORD *)v115 = *(_QWORD *)v132 + 1576;
    *((_QWORD *)v115 + 1) = 0;
    v115[16] = 35;
    *(_OWORD *)(v115 + 44) = 0u;
    *(_OWORD *)(v115 + 33) = 0u;
    *(_OWORD *)(v115 + 17) = 0u;
    *((_QWORD *)v115 + 5) = v76;
    *(_WORD *)(v76 + 18) &= ~0x8000u;
    v117 = *(_QWORD *)(v76 + 40);
    v116 = (_QWORD *)(v76 + 40);
    *((_QWORD *)v115 + 4) = v116;
    *((_QWORD *)v115 + 3) = v117;
    v115 += 24;
    *(_QWORD *)(v117 + 8) = v115;
    *v116 = v115;
    if (v176 != v178)
      free(v176);
    v46 = 1;
  }
  else
  {
    v134 = v73;
    v137 = (uint64_t **)inserted;
    v176 = 0;
    v177 = 0;
    v178[0] = 0;
    sub_1C501881C((uint64_t)&v176, v168);
    *(_QWORD *)&v170 = &v171;
    *((_QWORD *)&v170 + 1) = 0x100000000;
    v172[0] = "unwind_resume";
    v174 = 259;
    v80 = operator new();
    *(_QWORD *)v80 = *(_QWORD *)v48 + 1600;
    *(_QWORD *)(v80 + 8) = 0;
    v81 = *(_DWORD *)(v80 + 20) & 0xC0000000;
    *(_DWORD *)(v80 + 16) = 22;
    *(_DWORD *)(v80 + 20) = v81;
    *(_QWORD *)(v80 + 24) = 0;
    *(_QWORD *)(v80 + 32) = 0;
    *(_QWORD *)(v80 + 40) = v80 + 40;
    v126 = v80 + 40;
    *(_QWORD *)(v80 + 48) = v80 + 40;
    *(_QWORD *)(v80 + 56) = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v27, (_QWORD *)v80);
    v82 = *v27;
    *(_QWORD *)(v80 + 32) = v27;
    *(_QWORD *)(v80 + 24) = v82;
    *(_QWORD *)(v82 + 8) = v80 + 24;
    *v27 = v80 + 24;
    llvm::Value::setName((uint64_t ***)v80, (uint64_t)v172);
    v83 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v48 + 1912), 0);
    v172[0] = "exn.obj";
    v174 = 259;
    v84 = sub_1C50B1024(v83, v49, (uint64_t)v172, v80);
    if ((_DWORD)v168)
    {
      v85 = (uint64_t *)v167;
      v86 = (uint64_t *)((char *)v167 + 8 * v168);
      v143 = v80 & 0xFFFFFFFFFFFFFFFBLL;
      do
      {
        v87 = *v85;
        v88 = *(llvm::BasicBlock **)(*v85 + 40);
        v89 = operator new(0x60uLL);
        v89[13] = v89[13] & 0x38000000 | 1;
        *(_QWORD *)v89 = 0;
        *((_QWORD *)v89 + 1) = 0;
        *((_QWORD *)v89 + 2) = 0;
        *((_QWORD *)v89 + 3) = v89 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v89 + 8), (llvm::BasicBlock *)v80, v88);
        v90 = (uint64_t *)v177;
        if (v177 >= v178[0])
        {
          v92 = v80;
          v93 = v176;
          v94 = (uint64_t)(v177 - (_QWORD)v176) >> 4;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 60)
            abort();
          v96 = v178[0] - (_QWORD)v176;
          if ((v178[0] - (uint64_t)v176) >> 3 > v95)
            v95 = v96 >> 3;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
            v97 = 0xFFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            if (v97 >> 60)
              sub_1C4764EE4();
            v98 = (char *)operator new(16 * v97);
          }
          else
          {
            v98 = 0;
          }
          v99 = (llvm::BasicBlock **)&v98[16 * v94];
          *v99 = v88;
          v99[1] = (llvm::BasicBlock *)v143;
          v100 = v99;
          v80 = v92;
          if (v90 != v93)
          {
            do
            {
              *((_OWORD *)v100 - 1) = *((_OWORD *)v90 - 1);
              v100 -= 2;
              v90 -= 2;
            }
            while (v90 != v93);
            v90 = v176;
          }
          v91 = v99 + 2;
          v176 = (uint64_t *)v100;
          v177 = (unint64_t)(v99 + 2);
          v178[0] = (uint64_t)&v98[16 * v97];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *(_QWORD *)v177 = v88;
          v90[1] = v143;
          v91 = v90 + 2;
        }
        v177 = (unint64_t)v91;
        v101 = sub_1C50B0CC8(v87);
        sub_1C477667C((llvm::PHINode *)v84, (uint64_t)v101, (uint64_t)v88);
        ++v85;
      }
      while (v85 != v86);
    }
    v102 = DWORD2(v170);
    if ((v135 & 1) != 0)
    {
      v103 = v129;
      if (DWORD2(v170) >= HIDWORD(v170))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)&v171, DWORD2(v170) + 1, 8);
        v102 = DWORD2(v170);
      }
      *(_QWORD *)(v170 + 8 * v102) = v84;
      v102 = ++DWORD2(v170);
    }
    else
    {
      v103 = v129;
    }
    v118 = (uint64_t *)v170;
    v119 = v102;
    v120 = v102 + 1;
    v121 = v102 == -1;
    v174 = 257;
    v122 = operator new(32 * v120 + 80);
    v123 = &v122[4 * v120];
    *((_DWORD *)v123 + 5) = *((_DWORD *)v123 + 5) & 0x38000000 | v120 & 0x7FFFFFF;
    if (!v121)
    {
      do
      {
        *v122 = 0;
        v122[1] = 0;
        v122[2] = 0;
        v122[3] = v123;
        v122 += 4;
      }
      while (v122 != v123);
    }
    sub_1C61DD0B0((llvm::Instruction *)v123, v137, v134, v118, v119, 0, 0, (uint64_t)v172, (llvm::BasicBlock *)v80);
    *((_WORD *)v123 + 9) = *((_WORD *)v123 + 9) & 0xF003 | (4 * v140);
    v123[8] = llvm::AttributeList::addAttributeAtIndex(v123 + 8, *(uint64_t **)*v123, -1, 32);
    v124 = (char *)operator new(0x40uLL);
    *(_QWORD *)v124 = *(_QWORD *)v132 + 1576;
    *((_QWORD *)v124 + 1) = 0;
    v124[16] = 35;
    *(_OWORD *)(v124 + 44) = 0u;
    *(_OWORD *)(v124 + 33) = 0u;
    *(_OWORD *)(v124 + 17) = 0u;
    *(_WORD *)(v80 + 18) &= ~0x8000u;
    v125 = *(_QWORD *)(v80 + 40);
    *((_QWORD *)v124 + 4) = v126;
    *((_QWORD *)v124 + 5) = v80;
    *((_QWORD *)v124 + 3) = v125;
    v124 += 24;
    *(_QWORD *)(v125 + 8) = v124;
    *(_QWORD *)(v80 + 40) = v124;
    if (v103)
      llvm::DomTreeUpdater::applyUpdates((uint64_t)&v144, (unint64_t *)v176, (uint64_t)(v177 - (_QWORD)v176) >> 4);
    if ((uint64_t *)v170 != &v171)
      free((void *)v170);
    if (v176)
    {
      v177 = (unint64_t)v176;
      operator delete(v176);
    }
    v46 = 1;
  }
LABEL_91:
  v26 = v138;
LABEL_92:
  if (v164 != v26)
    free(v164);
  if (v167 != v169)
    free(v167);
  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v144);
  v167 = v162;
  sub_1C50B10F0((void ***)&v167);
  if (v158 != v157)
    free(v158);
  if (v144 != &v146)
    free(v144);
  return v46;
}

llvm::Value *sub_1C50B0CC8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  llvm::Value *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  llvm::ValueSymbolTable *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  const char *v41;
  __int16 v42;

  v2 = *(uint64_t **)(a1 - 32);
  if (*((_BYTE *)v2 + 16) == 93)
    v3 = *(_QWORD *)(a1 - 32);
  else
    v3 = 0;
  if (v3 && *(_DWORD *)(v3 + 72) == 1 && **(_DWORD **)(v3 + 64) == 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(v3 - 64);
    if (v6)
    {
      v7 = 0;
      if (*(_BYTE *)(v6 + 16) == 93)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v6 - 64) + 16) - 11 <= 1
          && *(_DWORD *)(v6 + 72) == 1
          && !**(_DWORD **)(v6 + 64))
        {
          v10 = *(llvm::Value **)(v6 - 32);
          if (*(_BYTE *)(*(_QWORD *)(v3 - 32) + 16) == 60)
            v5 = *(_QWORD *)(v3 - 32);
          else
            v5 = 0;
          if (v10)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
            v39 = *(_QWORD *)(a1 + 24);
            v40 = *(_QWORD **)(a1 + 32);
            *v40 = v39;
            *(_QWORD *)(v39 + 8) = v40;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)a1);
            v7 = v6;
LABEL_32:
            if (!*(_QWORD *)(v3 + 8))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v3 + 40) + 40, (uint64_t ***)v3);
              v27 = *(_QWORD *)(v3 + 24);
              v28 = *(_QWORD **)(v3 + 32);
              *v28 = v27;
              *(_QWORD *)(v27 + 8) = v28;
              *(_QWORD *)(v3 + 24) = 0;
              *(_QWORD *)(v3 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v3);
            }
            if (!*(_QWORD *)(v7 + 8))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
              v29 = *(_QWORD *)(v7 + 24);
              v30 = *(_QWORD **)(v7 + 32);
              *v30 = v29;
              *(_QWORD *)(v29 + 8) = v30;
              *(_QWORD *)(v7 + 24) = 0;
              *(_QWORD *)(v7 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v7);
            }
            if (v5 && !*(_QWORD *)(v5 + 8))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v5 + 40) + 40, (uint64_t ***)v5);
              v31 = *(_QWORD *)(v5 + 24);
              v32 = *(_QWORD **)(v5 + 32);
              *v32 = v31;
              *(_QWORD *)(v31 + 8) = v32;
              *(_QWORD *)(v5 + 24) = 0;
              *(_QWORD *)(v5 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v5);
            }
            return v10;
          }
          v4 = 1;
        }
        else
        {
          v5 = 0;
          v4 = 0;
        }
        v7 = *(_QWORD *)(v3 - 64);
      }
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
    v4 = 0;
  }
  v41 = "exn.obj";
  v42 = 259;
  v8 = (char *)operator new(0x80uLL);
  v9 = v8;
  v10 = (llvm::Value *)(v8 + 32);
  *((_DWORD *)v8 + 13) = *((_DWORD *)v8 + 13) & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 32;
  v11 = *v2;
  v12 = *(unsigned __int8 *)(*v2 + 8);
  if (*v2)
    v13 = v12 == 17;
  else
    v13 = 0;
  if (v13)
  {
    if (*(_QWORD *)(v11 + 32))
    {
      v15 = (uint64_t *)(v11 + 24);
      goto LABEL_26;
    }
LABEL_54:
    v16 = 0;
    goto LABEL_27;
  }
  if (v11)
    v14 = v12 == 16;
  else
    v14 = 0;
  if (!v14 || !*(_DWORD *)(v11 + 12))
    goto LABEL_54;
  v15 = *(uint64_t **)(v11 + 16);
LABEL_26:
  v16 = *v15;
LABEL_27:
  *(_OWORD *)(v8 + 56) = 0u;
  v17 = v8 + 56;
  *((_QWORD *)v8 + 4) = v16;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0x10000005CLL;
  *(_OWORD *)(v8 + 72) = 0u;
  *((_DWORD *)v8 + 22) = 0;
  v18 = *(_QWORD *)(a1 + 40);
  v19 = (uint64_t *)(a1 + 24);
  *((_QWORD *)v8 + 9) = v18;
  *(_WORD *)(v18 + 18) &= ~0x8000u;
  if ((v8[55] & 0x10) != 0
    && (v34 = *(_QWORD *)(v18 + 56)) != 0
    && (v35 = *(llvm::ValueSymbolTable **)(v34 + 104)) != 0)
  {
    llvm::ValueSymbolTable::reinsertValue(v35, v10);
    v36 = *(_QWORD *)v9;
    v37 = *v19;
    *((_QWORD *)v9 + 7) = *v19;
    *((_QWORD *)v9 + 8) = v19;
    *(_QWORD *)(v37 + 8) = v17;
    *v19 = (uint64_t)v17;
    if (v36)
    {
      **((_QWORD **)v9 + 2) = *((_QWORD *)v9 + 1);
      v38 = *((_QWORD *)v9 + 1);
      if (v38)
        *(_QWORD *)(v38 + 16) = *((_QWORD *)v9 + 2);
    }
  }
  else
  {
    v20 = *v19;
    *((_QWORD *)v9 + 7) = *v19;
    *((_QWORD *)v9 + 8) = v19;
    *(_QWORD *)(v20 + 8) = v17;
    *v19 = (uint64_t)v17;
  }
  *(_QWORD *)v9 = v2;
  v23 = v2[1];
  v22 = v2 + 1;
  v21 = v23;
  *((_QWORD *)v9 + 1) = v23;
  if (v23)
    *(_QWORD *)(v21 + 16) = v9 + 8;
  *((_QWORD *)v9 + 2) = v22;
  *v22 = v9;
  *((_DWORD *)v9 + 28) = 0;
  v24 = v9 + 112;
  *((_QWORD *)v24 - 2) = v24;
  *((_QWORD *)v24 - 1) = 0x400000001;
  llvm::Value::setName((uint64_t ***)v10, (uint64_t)&v41);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
  v25 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD **)(a1 + 32);
  *v26 = v25;
  *(_QWORD *)(v25 + 8) = v26;
  *v19 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a1);
  if (v4)
    goto LABEL_32;
  return v10;
}

char *sub_1C50B1024(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v8 = (char *)operator new(0x48uLL);
  *((_QWORD *)v8 + 1) = a1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0x4000000000000053;
  *((_QWORD *)v8 + 6) = a4;
  *((_QWORD *)v8 + 7) = 0;
  *(_WORD *)(a4 + 18) &= ~0x8000u;
  v9 = *(_QWORD *)(a4 + 40);
  a4 += 40;
  *((_QWORD *)v8 + 5) = a4;
  *((_QWORD *)v8 + 4) = v9;
  *((_DWORD *)v8 + 16) = 0;
  *(_QWORD *)(v9 + 8) = v8 + 32;
  *(_QWORD *)a4 = v8 + 32;
  *((_DWORD *)v8 + 17) = a2;
  llvm::Value::setName((uint64_t ***)v8 + 1, a3);
  v10 = *((unsigned int *)v8 + 17);
  v11 = operator new(40 * v10);
  *(_QWORD *)v8 = v11;
  if ((_DWORD)v10)
  {
    v12 = &v11[4 * v10];
    do
    {
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v8 + 8;
      v11 += 4;
    }
    while (v11 != v12);
  }
  return v8 + 8;
}

void sub_1C50B10F0(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1C6190B68(v4 - 9);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C50B1160(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineTraceMetricsPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Early If Converter";
  *(_QWORD *)(v4 + 8) = 18;
  *(_QWORD *)(v4 + 16) = "early-ifcvt";
  *(_QWORD *)(v4 + 24) = 11;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F6ED2;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C50B129C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C50B1204(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineBranchProbabilityInfoPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Early If Predicator";
  *(_QWORD *)(v3 + 8) = 19;
  *(_QWORD *)(v3 + 16) = "early-if-predicator";
  *(_QWORD *)(v3 + 24) = 19;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F2EE8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C50B4584;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

double sub_1C50B129C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6ED2);
  *(_QWORD *)v1 = &off_1E8141D48;
  *(_QWORD *)(v1 + 432) = v1 + 448;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 440) = 0x800000000;
  *(_QWORD *)(v1 + 704) = v1 + 720;
  *(_QWORD *)(v1 + 712) = 0x400000000;
  *(_QWORD *)(v1 + 848) = v1 + 880;
  *(_QWORD *)(v1 + 856) = v1 + 880;
  *(_QWORD *)(v1 + 864) = 8;
  *(_DWORD *)(v1 + 872) = 0;
  *(_QWORD *)(v1 + 944) = v1 + 960;
  *(_QWORD *)(v1 + 952) = 0x600000000;
  *(_DWORD *)(v1 + 1008) = 0;
  *(_QWORD *)(v1 + 1016) = v1 + 1032;
  *(_QWORD *)(v1 + 1024) = 0x800000000;
  *(_QWORD *)(v1 + 1064) = 0;
  *(_DWORD *)(v1 + 1072) = 0;
  *(_QWORD *)(v1 + 1080) = 0;
  return result;
}

void sub_1C50B1350(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &off_1E8141D48;
  free(*(void **)(a1 + 1064));
  v2 = *(void **)(a1 + 1016);
  if (v2 != (void *)(a1 + 1032))
    free(v2);
  v3 = *(void **)(a1 + 944);
  if (v3 != (void *)(a1 + 960))
    free(v3);
  v4 = *(void **)(a1 + 856);
  if (v4 != *(void **)(a1 + 848))
    free(v4);
  v5 = *(void **)(a1 + 704);
  if (v5 != (void *)(a1 + 720))
    free(v5);
  v6 = *(void **)(a1 + 432);
  if (v6 != (void *)(a1 + 448))
    free(v6);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192))
    free(v7);
  v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120))
    free(v8);
  v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48))
    free(v9);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C50B1440(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &off_1E8141D48;
  free(*(void **)(a1 + 1064));
  v2 = *(void **)(a1 + 1016);
  if (v2 != (void *)(a1 + 1032))
    free(v2);
  v3 = *(void **)(a1 + 944);
  if (v3 != (void *)(a1 + 960))
    free(v3);
  v4 = *(void **)(a1 + 856);
  if (v4 != *(void **)(a1 + 848))
    free(v4);
  v5 = *(void **)(a1 + 704);
  if (v5 != (void *)(a1 + 720))
    free(v5);
  v6 = *(void **)(a1 + 432);
  if (v6 != (void *)(a1 + 448))
    free(v6);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v7 = *(void **)(a1 + 176);
  if (v7 != (void *)(a1 + 192))
    free(v7);
  v8 = *(void **)(a1 + 104);
  if (v8 != (void *)(a1 + 120))
    free(v8);
  v9 = *(void **)(a1 + 32);
  if (v9 != (void *)(a1 + 48))
    free(v9);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50B1544()
{
  return "Early If-Conversion";
}

void *sub_1C50B1554(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineTraceMetrics::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineTraceMetrics::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C50B1610(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t AnalysisPass;
  void **v15;
  void *v16;
  unsigned int *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  llvm::MachineLoop *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  llvm::MachineTraceMetrics::Ensemble *Ensemble;
  const llvm::MachineBasicBlock *v48;
  llvm::MachineTraceMetrics::Ensemble *Trace;
  uint64_t v50;
  uint64_t v51;
  const llvm::MachineBasicBlock *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ***v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int ResourceLength;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  char *v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  void **v81;
  int v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  llvm::MachineTraceMetrics::Ensemble *v86;
  int *v87;
  llvm::MachineTraceMetrics::Ensemble *v88;
  int *v89;
  llvm::MachineTraceMetrics::Ensemble *v90;
  int *v91;
  int32x2_t *v92;
  uint64_t *v93;
  int32x2_t *v94;
  uint64_t v95;
  uint64_t v96;
  llvm::MachineTraceMetrics::Ensemble *v97;
  llvm::MachineTraceMetrics::Ensemble *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  uint64_t v104;
  int InstrSlack;
  int v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  BOOL v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int PHIDepth;
  int v115;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  void **v148;
  uint64_t v149;
  uint64_t *v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[2];
  uint64_t ***v159[2];
  _QWORD v160[2];
  _QWORD v161[2];
  const char *v162;
  uint64_t v163;
  void *v164;
  void *v165;
  void *v166;
  int v167;
  uint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  unsigned int v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  void *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  const llvm::MachineBasicBlock *v184;
  void *FirstTerminator;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  const char *v191;
  const char *v192;
  uint64_t v193;
  char v194;
  char v195;
  void *v196;
  uint64_t v197;
  _BYTE v198[256];
  char v199;
  int v200;
  uint64_t v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0
    || (v4 = *(_QWORD **)(a2 + 16), !(*(unsigned int (**)(_QWORD *))(*v4 + 384))(v4)))
  {
    v5 = 0;
    return v5 & 1;
  }
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD *))(*v4 + 104))(v4);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD *))(*v4 + 176))(v4);
  v7 = v4[20];
  v8 = *(_QWORD *)(v7 + 64);
  v10 = *(_OWORD *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(a1 + 296) = v10;
  *(_OWORD *)(a1 + 312) = v9;
  *(_QWORD *)(a1 + 328) = v8;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)v7;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 40);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 344) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachineDominatorTree::ID);
  v13 = *(_QWORD *)(a1 + 8);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v13 + 24), &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
    v13 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 352) = AnalysisPass;
  v15 = *(void ***)v13;
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::MachineTraceMetrics::ID);
  *(_QWORD *)(a1 + 360) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::MachineTraceMetrics::ID);
  *(_QWORD *)(a1 + 368) = 0;
  v17 = (unsigned int *)(a1 + 376);
  sub_1C50B2880(a1 + 376, a2);
  sub_1C61DD280((uint64_t)&v174, *(void ****)(a1 + 344));
  sub_1C61AF960((const void **)&v169, (llvm::SmallPtrSetImplBase *)&v174);
  sub_1C61AF960((const void **)&v164, (llvm::SmallPtrSetImplBase *)&v178);
  v5 = 0;
  while (1)
  {
    if (v172 != v167)
      goto LABEL_22;
    if (!v172)
      break;
    v18 = v166;
    v19 = v171;
    while (*v19 == *v18 && v19[1] == v18[1])
    {
      v19 += 2;
      v18 += 2;
      if (v19 == (_QWORD *)((char *)v171 + 16 * v172))
        goto LABEL_243;
    }
LABEL_22:
    v157 = **((_QWORD **)v171 + 2 * v172 - 2);
    v21 = 0;
    if (sub_1C50B2A18(v17, v157, 0))
    {
      v21 = 0;
      while (2)
      {
        if (byte_1ED7F7428)
          goto LABEL_102;
        v22 = *(_QWORD *)(a1 + 352);
        v23 = *(_DWORD *)(v22 + 264);
        if (v23)
        {
          v24 = *(_QWORD *)(a1 + 400);
          v25 = *(_QWORD *)(v22 + 248);
          v26 = v23 - 1;
          v27 = ((v24 >> 4) ^ (v24 >> 9)) & (v23 - 1);
          v28 = *(_QWORD *)(v25 + 16 * v27);
          if (v24 == v28)
          {
LABEL_30:
            v31 = *(llvm::MachineLoop **)(v25 + 16 * v27 + 8);
            if (v31)
            {
              v32 = *(unsigned int *)(a1 + 712);
              if ((_DWORD)v32)
              {
                v33 = *(_DWORD **)(a1 + 704);
                v34 = &v33[8 * v32];
                do
                {
                  if ((*v33 & 0x10000FF) == 0)
                  {
                    v35 = v33[1];
                    if ((v35 - 1) >= 0x3FFFFFFF)
                    {
                      v36 = *(_QWORD *)(a1 + 336);
                      if ((v35 & 0x80000000) != 0)
                        v37 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
                      else
                        v37 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v35);
                      v38 = *v37;
                      if ((*(_BYTE *)(v38 + 3) & 1) == 0)
                        v38 = *(_QWORD *)(v38 + 24);
                      v39 = *(_QWORD *)(v38 + 8);
                      if ((llvm::MachineLoop::isLoopInvariant(v31, (llvm::MachineInstr *)v39) & 1) != 0
                        || (v40 = *(unsigned int *)(v39 + 40), !(_DWORD)v40))
                      {
                        v17 = (unsigned int *)(a1 + 376);
                        goto LABEL_240;
                      }
                      v41 = *(_BYTE **)(v39 + 32);
                      v42 = 32 * v40;
                      while (1)
                      {
                        if (*v41 != 1)
                        {
                          if ((*v33 & 0x10000FF) != 0)
                            break;
                          v43 = v33[1];
                          if ((v43 - 1) < 0x3FFFFFFF)
                            break;
                          v44 = *(_QWORD *)(a1 + 336);
                          if ((v43 & 0x80000000) != 0)
                            v45 = (uint64_t *)(*(_QWORD *)(v44 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
                          else
                            v45 = (uint64_t *)(*(_QWORD *)(v44 + 272) + 8 * v43);
                          v46 = *v45;
                          if ((*(_BYTE *)(v46 + 3) & 1) == 0)
                            v46 = *(_QWORD *)(v46 + 24);
                          if (!llvm::MachineLoop::isLoopInvariant(v31, *(llvm::MachineInstr **)(v46 + 8)))
                            break;
                        }
                        v41 += 32;
                        v42 -= 32;
                        if (!v42)
                        {
                          v17 = (unsigned int *)(a1 + 376);
                          goto LABEL_240;
                        }
                      }
                    }
                  }
                  v33 += 8;
                }
                while (v33 != v34);
              }
            }
          }
          else
          {
            v29 = 1;
            while (v28 != -4096)
            {
              v30 = v27 + v29++;
              v27 = v30 & v26;
              v28 = *(_QWORD *)(v25 + 16 * v27);
              if (v24 == v28)
                goto LABEL_30;
            }
          }
        }
        Ensemble = *(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368);
        if (!Ensemble)
        {
          Ensemble = llvm::MachineTraceMetrics::getEnsemble(*(llvm::MachineTraceMetrics **)(a1 + 360), 0);
          *(_QWORD *)(a1 + 368) = Ensemble;
        }
        v48 = *(const llvm::MachineBasicBlock **)(a1 + 416);
        if (v48 == *(const llvm::MachineBasicBlock **)(a1 + 408))
          v48 = *(const llvm::MachineBasicBlock **)(a1 + 400);
        Trace = llvm::MachineTraceMetrics::Ensemble::getTrace(Ensemble, v48);
        v51 = v50;
        v161[0] = Trace;
        v161[1] = v50;
        v52 = *(const llvm::MachineBasicBlock **)(a1 + 424);
        if (v52 == *(const llvm::MachineBasicBlock **)(a1 + 408))
          v52 = *(const llvm::MachineBasicBlock **)(a1 + 400);
        v160[0] = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), v52);
        v160[1] = v53;
        if (*(_DWORD *)(v53 + 36) >= *(_DWORD *)(v51 + 36))
          v54 = *(_DWORD *)(v51 + 36);
        else
          v54 = *(_DWORD *)(v53 + 36);
        v55 = *(unsigned int *)(a1 + 284);
        v57 = *(_QWORD *)(a1 + 400);
        v56 = *(_QWORD *)(a1 + 408);
        v58 = *(uint64_t ****)(v57 + 32);
        v159[0] = v58;
        v159[1] = 0;
        v182 = &v184;
        v183 = 0x100000000;
        v156 = v57;
        if (*(_QWORD *)(a1 + 416) == v56)
        {
          v59 = 0;
        }
        else
        {
          v184 = *(const llvm::MachineBasicBlock **)(a1 + 416);
          LODWORD(v183) = 1;
          v59 = 1;
        }
        v60 = v55 >> 1;
        ResourceLength = llvm::MachineTraceMetrics::Trace::getResourceLength(v160, &v184, v59, 0, 0, 0, 0);
        if (ResourceLength > v60 + v54)
        {
          v62 = ResourceLength;
          v63 = *(_QWORD *)***v58;
          if (*(_QWORD *)(v63 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v63 + 72) + 48))(*(_QWORD *)(v63 + 72)))
          {
            v64 = v156;
            v17 = (unsigned int *)(a1 + 376);
            v65 = v156 + 48;
            v66 = *(_QWORD *)(v156 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v66 || (*(_BYTE *)v66 & 4) == 0)
            {
              while ((*(_WORD *)(v66 + 44) & 4) != 0)
                v66 = *(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8;
            }
            if (v65 == v66)
            {
LABEL_82:
              v70 = 0;
              v71 = 0;
              v72 = 0;
              v73 = 0;
              v162 = 0;
              goto LABEL_85;
            }
            while (1)
            {
              v67 = **(unsigned __int16 **)(v66 + 16);
              v110 = v67 > 0x17;
              v68 = (1 << v67) & 0x83E000;
              if (v110 || v68 == 0)
                break;
              v66 = *(_QWORD *)(v66 + 8);
              if (v66 == v65)
                goto LABEL_82;
            }
            v70 = *(char **)(v66 + 56);
            v162 = v70;
            if (v70)
            {
              llvm::MetadataTracking::track((uint64_t)&v162, (unsigned __int8 *)v70, 2);
              v70 = (char *)v162;
              if (v162)
              {
                v71 = *(_QWORD *)&v162[-8 * *((unsigned int *)v162 + 2)];
                if (*(_BYTE *)v71 != 15)
                  v71 = *(_QWORD *)(v71 - 8 * *(unsigned int *)(v71 + 8));
                v64 = v156;
                v74 = 0;
                v72 = *((_DWORD *)v162 + 1);
                v73 = *((unsigned __int16 *)v162 + 1);
              }
              else
              {
                v71 = 0;
                v72 = 0;
                v73 = 0;
                v74 = 1;
                v64 = v156;
              }
            }
            else
            {
              v71 = 0;
              v72 = 0;
              v73 = 0;
LABEL_85:
              v74 = 1;
            }
            v75 = **(_QWORD **)(v64 + 32);
            LODWORD(v186) = 16;
            BYTE4(v186) = 2;
            v187 = v75;
            v188 = v71;
            v189 = v72;
            v190 = v73;
            v191 = "early-ifcvt";
            v192 = "IfConversion";
            v193 = 12;
            v194 = 0;
            v195 = 0;
            v196 = v198;
            v197 = 0x400000000;
            v199 = 0;
            v200 = -1;
            v201 = v64;
            FirstTerminator = &unk_1E8141F00;
            if ((v74 & 1) == 0)
              llvm::MetadataTracking::untrack((uint64_t)&v162, (unsigned __int8 *)v70);
            v162 = "did not if-convert branch: the resulting critical path (";
            v163 = 56;
            sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
            v76 = sub_1C50B4050((uint64_t)&FirstTerminator, "ResLength", v62);
            v162 = ") would extend the shorter leg's critical path (";
            v163 = 48;
            sub_1C53B17B4(v76 + 80, (const void **)&v162);
            v77 = sub_1C50B4050(v76, "MinCrit", v54);
            v162 = ") by more than the threshold of ";
            v163 = 32;
            sub_1C53B17B4(v77 + 80, (const void **)&v162);
            v78 = sub_1C50B4050(v77, "CritLimit", v60);
            v162 = ", which cannot be hidden by available ILP.";
            v163 = 42;
            sub_1C53B17B4(v78 + 80, (const void **)&v162);
            llvm::MachineOptimizationRemarkEmitter::emit(v159, (llvm::DiagnosticInfoOptimizationBase *)&FirstTerminator);
            FirstTerminator = &off_1E814E790;
            v79 = (char *)v196;
            if ((_DWORD)v197)
            {
              v80 = (unint64_t)v197 << 6;
              do
              {
                v81 = (void **)&v79[v80];
                if (v79[v80 - 17] < 0)
                  operator delete(*(v81 - 5));
                if (*((char *)v81 - 41) < 0)
                  operator delete(*(v81 - 8));
                v80 -= 64;
              }
              while (v80);
              v79 = (char *)v196;
            }
            if (v79 != v198)
              free(v79);
            v82 = 0;
          }
          else
          {
            v82 = 0;
            v17 = (unsigned int *)(a1 + 376);
          }
LABEL_99:
          if (v182 != &v184)
            free(v182);
          if (!v82)
            goto LABEL_240;
LABEL_102:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 120))(*(_QWORD *)(a1 + 360));
          v83 = *(_QWORD *)(a1 + 360);
          v84 = *(int **)(a1 + 400);
          v85 = *(_QWORD *)(v83 + 568);
          *(_DWORD *)(v85 + 8 * v84[6]) = -1;
          if (!*(_QWORD *)(v83 + 632))
          {
            *(_DWORD *)(v85 + 8 * *(int *)(*(_QWORD *)(a1 + 408) + 24)) = -1;
LABEL_108:
            *(_DWORD *)(v85 + 8 * *(int *)(*(_QWORD *)(a1 + 416) + 24)) = -1;
            goto LABEL_109;
          }
          llvm::MachineTraceMetrics::Ensemble::invalidate(*(llvm::MachineTraceMetrics::Ensemble **)(v83 + 632), (const llvm::MachineBasicBlock *)v84);
          v83 = *(_QWORD *)(a1 + 360);
          v85 = *(_QWORD *)(v83 + 568);
          v86 = *(llvm::MachineTraceMetrics::Ensemble **)(v83 + 632);
          v87 = *(int **)(a1 + 408);
          *(_DWORD *)(v85 + 8 * v87[6]) = -1;
          if (!v86)
            goto LABEL_108;
          llvm::MachineTraceMetrics::Ensemble::invalidate(v86, (const llvm::MachineBasicBlock *)v87);
          v83 = *(_QWORD *)(a1 + 360);
          v85 = *(_QWORD *)(v83 + 568);
          v88 = *(llvm::MachineTraceMetrics::Ensemble **)(v83 + 632);
          v89 = *(int **)(a1 + 416);
          *(_DWORD *)(v85 + 8 * v89[6]) = -1;
          if (v88)
          {
            llvm::MachineTraceMetrics::Ensemble::invalidate(v88, (const llvm::MachineBasicBlock *)v89);
            v83 = *(_QWORD *)(a1 + 360);
            v90 = *(llvm::MachineTraceMetrics::Ensemble **)(v83 + 632);
            v91 = *(int **)(a1 + 424);
            *(_DWORD *)(*(_QWORD *)(v83 + 568) + 8 * v91[6]) = -1;
            if (v90)
            {
              llvm::MachineTraceMetrics::Ensemble::invalidate(v90, (const llvm::MachineBasicBlock *)v91);
              v83 = *(_QWORD *)(a1 + 360);
            }
            goto LABEL_110;
          }
LABEL_109:
          *(_DWORD *)(v85 + 8 * *(int *)(*(_QWORD *)(a1 + 424) + 24)) = -1;
LABEL_110:
          (*(void (**)(uint64_t))(*(_QWORD *)v83 + 120))(v83);
          FirstTerminator = &v187;
          v186 = 0x400000000;
          sub_1C50B3270(v17, (uint64_t)&FirstTerminator, 0);
          sub_1C50B3B2C(*(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 400), (uint64_t *)FirstTerminator, v186);
          v92 = *(int32x2_t **)(a1 + 352);
          v93 = (uint64_t *)FirstTerminator;
          if (v92 && (_DWORD)v186)
          {
            v94 = v92 + 31;
            v95 = 8 * v186;
            do
            {
              v96 = *v93++;
              llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock(v94, v96);
              v95 -= 8;
            }
            while (v95);
            v93 = (uint64_t *)FirstTerminator;
          }
          if (v93 != &v187)
            free(v93);
          v21 = 1;
          if ((sub_1C50B2A18(v17, v157, 0) & 1) == 0)
            goto LABEL_240;
          continue;
        }
        break;
      }
      v97 = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), *(const llvm::MachineBasicBlock **)(a1 + 400));
      FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 400));
      v162 = 0;
      LODWORD(v152) = 0;
      if (sub_1C61252B8((uint64_t *)v97 + 47, &FirstTerminator, &v162))
        v152 = *((_QWORD *)v162 + 1);
      v98 = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), *(const llvm::MachineBasicBlock **)(a1 + 408));
      v158[0] = v98;
      v158[1] = v99;
      v100 = *(unsigned int *)(a1 + 440);
      if ((_DWORD)v100)
      {
        v101 = 0;
        v153 = 0;
        v102 = 0;
        v155 = 0;
        v149 = 32 * v100;
        v150 = (uint64_t *)((char *)v98 + 376);
        v103 = 1;
        v151 = v60;
        do
        {
          v104 = *(_QWORD *)(a1 + 432);
          InstrSlack = llvm::MachineTraceMetrics::Trace::getInstrSlack((llvm::MachineTraceMetrics::Trace *)v158, *(const llvm::MachineInstr **)(v104 + v101));
          FirstTerminator = *(void **)(v104 + v101);
          v162 = 0;
          v106 = sub_1C61252B8(v150, &FirstTerminator, &v162);
          LODWORD(v107) = 0;
          if (v106)
            v107 = *((_QWORD *)v162 + 1);
          v108 = InstrSlack + v107;
          v60 = v104 + v101;
          v109 = *(_DWORD *)(v60 + 16);
          v110 = v109 + (int)v152 > v152 && v109 < 0;
          if (v110)
            v111 = 0;
          else
            v111 = v109 + v152;
          if (v111 - v108 <= v155)
            v112 = v155;
          else
            v112 = v111 - v108;
          if (v111 > v108)
            v113 = v112;
          else
            v113 = v155;
          v155 = v113;
          if (v111 > v108)
            v103 &= v111 - v108 <= v151;
          PHIDepth = llvm::MachineTraceMetrics::Trace::getPHIDepth((llvm::MachineTraceMetrics::Trace *)v161, *(const llvm::MachineInstr **)v60);
          v115 = *(_DWORD *)(v60 + 20);
          if (v115 + PHIDepth > PHIDepth && v115 < 0)
            v117 = 0;
          else
            v117 = v115 + PHIDepth;
          v118 = v153;
          if (v117 - v108 <= v153)
            v119 = v153;
          else
            v119 = v117 - v108;
          if (v117 > v108)
            v118 = v119;
          v153 = v118;
          if (v117 > v108)
            v103 &= v117 - v108 <= v151;
          v120 = llvm::MachineTraceMetrics::Trace::getPHIDepth((llvm::MachineTraceMetrics::Trace *)v160, *(const llvm::MachineInstr **)v60);
          v121 = *(_DWORD *)(v60 + 24);
          LODWORD(v60) = v151;
          if (v121 + v120 > v120 && v121 < 0)
            v123 = 0;
          else
            v123 = v121 + v120;
          if (v123 - v108 <= v102)
            v124 = v102;
          else
            v124 = v123 - v108;
          if (v123 > v108)
          {
            v102 = v124;
            v103 &= v123 - v108 <= v151;
          }
          v101 += 32;
        }
        while (v149 != v101);
        if (v153 >= v102)
          v125 = v102;
        else
          v125 = v153;
        if (v153 <= v102)
          v126 = v102;
        else
          v126 = v153;
        v154 = v126;
        if ((v103 & 1) != 0)
        {
LABEL_174:
          v127 = *(_QWORD *)***v58;
          if (*(_QWORD *)(v127 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v127 + 72) + 48))(*(_QWORD *)(v127 + 72)))
          {
            v17 = (unsigned int *)(a1 + 376);
            v128 = *(_QWORD *)(v156 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v128 || (*(_BYTE *)v128 & 4) == 0)
            {
              while ((*(_WORD *)(v128 + 44) & 4) != 0)
                v128 = *(_QWORD *)v128 & 0xFFFFFFFFFFFFFFF8;
            }
            v129 = *(_QWORD *)(v128 + 56);
            if (v129)
            {
              v130 = *(_QWORD *)(v129 - 8 * *(unsigned int *)(v129 + 8));
              if (*(_BYTE *)v130 != 15)
                v130 = *(_QWORD *)(v130 - 8 * *(unsigned int *)(v130 + 8));
              v131 = v60;
              v132 = *(_DWORD *)(v129 + 4);
              LODWORD(v129) = *(unsigned __int16 *)(v129 + 2);
            }
            else
            {
              v131 = v60;
              v130 = 0;
              v132 = 0;
            }
            v138 = **(_QWORD **)(v156 + 32);
            LODWORD(v186) = 15;
            BYTE4(v186) = 2;
            v187 = v138;
            v188 = v130;
            v189 = v132;
            v190 = v129;
            v191 = "early-ifcvt";
            v192 = "IfConversion";
            v193 = 12;
            v194 = 0;
            v195 = 0;
            v196 = v198;
            v197 = 0x400000000;
            v199 = 0;
            v200 = -1;
            v201 = v156;
            FirstTerminator = &unk_1E8141E08;
            v162 = "performing if-conversion on branch: the condition adds ";
            v163 = 55;
            sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
            v139 = sub_1C50B4050((uint64_t)&FirstTerminator, "CondCycles", v155);
            v162 = " to the critical path";
            v163 = 21;
            sub_1C53B17B4(v139 + 80, (const void **)&v162);
            if (v125)
            {
              v162 = ", and the short leg adds another ";
              v163 = 33;
              sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
              sub_1C50B4050((uint64_t)&FirstTerminator, "ShortCycles", v125);
            }
            if (v154)
            {
              v162 = ", and the long leg adds another ";
              v163 = 32;
              sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
              sub_1C50B4050((uint64_t)&FirstTerminator, "LongCycles", v154);
            }
            v162 = ", each staying under the threshold of ";
            v163 = 38;
            sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
            v140 = sub_1C50B4050((uint64_t)&FirstTerminator, "CritLimit", v131);
            v162 = ".";
            v163 = 1;
            sub_1C53B17B4(v140 + 80, (const void **)&v162);
            llvm::MachineOptimizationRemarkEmitter::emit(v159, (llvm::DiagnosticInfoOptimizationBase *)&FirstTerminator);
            FirstTerminator = &off_1E814E790;
            v141 = (char *)v196;
            if ((_DWORD)v197)
            {
              v142 = (unint64_t)v197 << 6;
              do
              {
                v143 = (void **)&v141[v142];
                if (v141[v142 - 17] < 0)
                  operator delete(*(v143 - 5));
                if (*((char *)v143 - 41) < 0)
                  operator delete(*(v143 - 8));
                v142 -= 64;
              }
              while (v142);
              v141 = (char *)v196;
            }
            if (v141 != v198)
              free(v141);
            v82 = 1;
            goto LABEL_99;
          }
          v82 = 1;
        }
        else
        {
          v133 = *(_QWORD *)***v58;
          if (*(_QWORD *)(v133 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v133 + 72) + 48))(*(_QWORD *)(v133 + 72)))
          {
            v17 = (unsigned int *)(a1 + 376);
            v134 = *(_QWORD *)(v156 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v134 || (*(_BYTE *)v134 & 4) == 0)
            {
              while ((*(_WORD *)(v134 + 44) & 4) != 0)
                v134 = *(_QWORD *)v134 & 0xFFFFFFFFFFFFFFF8;
            }
            v135 = *(_QWORD *)(v134 + 56);
            if (v135)
            {
              v136 = *(_QWORD *)(v135 - 8 * *(unsigned int *)(v135 + 8));
              if (*(_BYTE *)v136 != 15)
                v136 = *(_QWORD *)(v136 - 8 * *(unsigned int *)(v136 + 8));
              v137 = *(_DWORD *)(v135 + 4);
              LODWORD(v135) = *(unsigned __int16 *)(v135 + 2);
            }
            else
            {
              v136 = 0;
              v137 = 0;
            }
            v144 = **(_QWORD **)(v156 + 32);
            LODWORD(v186) = 16;
            BYTE4(v186) = 2;
            v187 = v144;
            v188 = v136;
            v189 = v137;
            v190 = v135;
            v191 = "early-ifcvt";
            v192 = "IfConversion";
            v193 = 12;
            v194 = 0;
            v195 = 0;
            v196 = v198;
            v197 = 0x400000000;
            v199 = 0;
            v200 = -1;
            v201 = v156;
            FirstTerminator = &unk_1E8141F00;
            v162 = "did not if-convert branch: the condition would add ";
            v163 = 51;
            sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
            v145 = sub_1C50B4050((uint64_t)&FirstTerminator, "CondCycles", v155);
            v162 = " to the critical path";
            v163 = 21;
            sub_1C53B17B4(v145 + 80, (const void **)&v162);
            if (v155 > v151)
            {
              v162 = " exceeding the limit of ";
              v163 = 24;
              sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
              sub_1C50B4050((uint64_t)&FirstTerminator, "CritLimit", v151);
            }
            if (v125)
            {
              v162 = ", and the short leg would add another ";
              v163 = 38;
              sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
              sub_1C50B4050((uint64_t)&FirstTerminator, "ShortCycles", v125);
              if (v125 > v151)
              {
                v162 = " exceeding the limit of ";
                v163 = 24;
                sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
                sub_1C50B4050((uint64_t)&FirstTerminator, "CritLimit", v151);
              }
            }
            if (v154)
            {
              v162 = ", and the long leg would add another ";
              v163 = 37;
              sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
              sub_1C50B4050((uint64_t)&FirstTerminator, "LongCycles", v154);
              if (v154 > v151)
              {
                v162 = " exceeding the limit of ";
                v163 = 24;
                sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
                sub_1C50B4050((uint64_t)&FirstTerminator, "CritLimit", v151);
              }
            }
            v162 = ".";
            v163 = 1;
            sub_1C53B17B4((uint64_t)&v196, (const void **)&v162);
            llvm::MachineOptimizationRemarkEmitter::emit(v159, (llvm::DiagnosticInfoOptimizationBase *)&FirstTerminator);
            FirstTerminator = &off_1E814E790;
            v146 = (char *)v196;
            if ((_DWORD)v197)
            {
              v147 = (unint64_t)v197 << 6;
              do
              {
                v148 = (void **)&v146[v147];
                if (v146[v147 - 17] < 0)
                  operator delete(*(v148 - 5));
                if (*((char *)v148 - 41) < 0)
                  operator delete(*(v148 - 8));
                v147 -= 64;
              }
              while (v147);
              v146 = (char *)v196;
            }
            if (v146 != v198)
              free(v146);
            v82 = 0;
            goto LABEL_99;
          }
          v82 = 0;
        }
        v17 = (unsigned int *)(a1 + 376);
        goto LABEL_99;
      }
      v154 = 0;
      v155 = 0;
      v125 = 0;
      goto LABEL_174;
    }
LABEL_240:
    v5 |= v21;
    if (--v172)
      sub_1C4EB6F48(&v169);
  }
LABEL_243:
  if (v166 != &v168)
    free(v166);
  if (v165 != v164)
    free(v165);
  if (v171 != &v173)
    free(v171);
  if (v170 != v169)
    free(v170);
  if (v180 != &v181)
    free(v180);
  if (v179 != v178)
    free(v179);
  if (v176 != &v177)
    free(v176);
  if (v175 != v174)
    free(v175);
  return v5 & 1;
}

void sub_1C50B2880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 648) = 0;
  sub_1C50B2990((void *)(a1 + 640), *(_DWORD *)(v4 + 44));
  *(_DWORD *)(a1 + 576) = 0;
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 44);
  *(_DWORD *)(a1 + 632) = v6;
  if ((v6 + 63) < 0x40)
  {
    v10 = 0;
  }
  else
  {
    v7 = (v6 + 63) >> 6;
    if (v7 > *(_DWORD *)(a1 + 580))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 568, a1 + 584, v7, 8);
      v8 = *(unsigned int *)(a1 + 576);
      v6 = *(_DWORD *)(a1 + 632);
      v9 = *(_DWORD *)(a1 + 576);
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    bzero((void *)(*(_QWORD *)(a1 + 568) + 8 * v8), 8 * v7);
    v10 = (v9 + v7);
    *(_DWORD *)(a1 + 576) = v10;
  }
  if ((v6 & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8 * v10 - 8) &= ~(-1 << (v6 & 0x3F));
}

void *sub_1C50B2990(void *result, unsigned int a2)
{
  unsigned int v2;
  _QWORD *v5;

  v2 = *((_DWORD *)result + 14);
  if (v2 < a2 || v2 >> 2 > a2)
  {
    v5 = result;
    free(*((void **)result + 6));
    result = malloc_type_calloc(a2, 1uLL, 0x6D9A4F0CuLL);
    if (!result && (a2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v5[6] = result;
    *((_DWORD *)v5 + 14) = a2;
  }
  return result;
}

uint64_t sub_1C50B2A18(_QWORD *a1, uint64_t a2, int a3)
{
  llvm::MachineBasicBlock **v3;
  llvm::MachineBasicBlock **v4;
  llvm::MachineBasicBlock **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::MachineBasicBlock *v10;
  llvm::MachineBasicBlock *v11;
  llvm::MachineBasicBlock **v12;
  llvm::MachineBasicBlock *v15;
  llvm::MachineBasicBlock **v16;
  int v17;
  uint64_t v19;
  llvm::MachineBasicBlock *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  uint64_t v26;
  unint64_t v27;
  void **v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  llvm::MachineBasicBlock **v40;
  llvm::MachineBasicBlock *v41;
  llvm::MachineBasicBlock *v42;
  unint64_t v43;
  BOOL v44;
  void *v45;
  uint64_t v46;
  llvm::MachineBasicBlock *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _WORD *v62;
  unsigned __int16 v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _WORD *v77;
  unsigned __int16 v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v89;
  unsigned int v91;
  int v92;
  unsigned int v93;
  void *v94;
  char *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t FirstTerminator;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  a1[4] = 0;
  v3 = (llvm::MachineBasicBlock **)(a1 + 4);
  a1[6] = 0;
  v4 = (llvm::MachineBasicBlock **)(a1 + 6);
  a1[5] = 0;
  v5 = (llvm::MachineBasicBlock **)(a1 + 5);
  a1[3] = a2;
  v6 = *(uint64_t **)(a2 + 88);
  if (((*(_QWORD *)(a2 + 96) - (_QWORD)v6) & 0x7FFFFFFF8) != 0x10)
    return 0;
  v8 = *v6;
  v7 = v6[1];
  v9 = (*(_QWORD *)(v8 + 72) - *(_QWORD *)(v8 + 64)) & 0x7FFFFFFF8;
  v10 = (llvm::MachineBasicBlock *)(v9 == 8 ? v7 : v8);
  v11 = (llvm::MachineBasicBlock *)(v9 == 8 ? v8 : v7);
  if (((*((_QWORD *)v11 + 9) - *((_QWORD *)v11 + 8)) & 0x7FFFFFFF8) != 8)
    return 0;
  v12 = (llvm::MachineBasicBlock **)*((_QWORD *)v11 + 11);
  if (((*((_QWORD *)v11 + 12) - (_QWORD)v12) & 0x7FFFFFFF8) != 8)
    return 0;
  v15 = *v12;
  *v3 = v15;
  if (v15 != v10)
  {
    if (((*((_QWORD *)v10 + 9) - *((_QWORD *)v10 + 8)) & 0x7FFFFFFF8) != 8)
      return 0;
    v16 = (llvm::MachineBasicBlock **)*((_QWORD *)v10 + 11);
    if (((*((_QWORD *)v10 + 12) - (_QWORD)v16) & 0x7FFFFFFF8) != 8
      || *v16 != v15
      || *((_QWORD *)v15 + 19) != *((_QWORD *)v15 + 20))
    {
      return 0;
    }
  }
  if ((a3 & 1) == 0)
  {
    if ((llvm::MachineBasicBlock *)((char *)v15 + 48) == (llvm::MachineBasicBlock *)(*((_QWORD *)v15 + 6) & 0xFFFFFFFFFFFFFFF8))
      return 0;
    v17 = **(unsigned __int16 **)(*((_QWORD *)v15 + 7) + 16);
    if (v17 != 69 && v17 != 0)
      return 0;
  }
  *((_DWORD *)a1 + 84) = 0;
  v19 = 0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 248))() & 1) != 0)
    return v19;
  v20 = *v5;
  if (!*v5 || !*((_DWORD *)a1 + 84))
    return 0;
  if (v20 == v11)
    v11 = v10;
  a1[6] = v11;
  *((_DWORD *)a1 + 16) = 0;
  v21 = a1[4];
  if (v20 == (llvm::MachineBasicBlock *)v21)
    v20 = (llvm::MachineBasicBlock *)a1[3];
  if (v11 == (llvm::MachineBasicBlock *)v21)
    v11 = (llvm::MachineBasicBlock *)a1[3];
  v22 = (_BYTE *)(v21 + 48);
  v23 = *(_BYTE **)(v21 + 56);
  if (v23 != (_BYTE *)(v21 + 48))
  {
    v96 = (uint64_t)(a1 + 9);
    v97 = a1 + 7;
    while (1)
    {
      v24 = **((unsigned __int16 **)v23 + 2);
      if (v24 != 69 && v24 != 0)
        goto LABEL_59;
      v99 = v23;
      v100 = 0;
      v101 = 0;
      v102 = 0;
      v26 = *((unsigned int *)a1 + 16);
      v27 = a1[7];
      if (v26 < *((_DWORD *)a1 + 17))
        goto LABEL_39;
      v43 = v26 + 1;
      v44 = v27 + 32 * v26 > (unint64_t)&v99;
      if (v27 > (unint64_t)&v99 || !v44)
        break;
      v95 = (char *)&v99 - v27;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v97, v96, v43, 32);
      v27 = *v97;
      v28 = (void **)&v95[*v97];
LABEL_40:
      v29 = (_OWORD *)(v27 + 32 * *((unsigned int *)a1 + 16));
      v30 = *((_OWORD *)v28 + 1);
      *v29 = *(_OWORD *)v28;
      v29[1] = v30;
      v31 = (*((_DWORD *)a1 + 16) + 1);
      *((_DWORD *)a1 + 16) = v31;
      v32 = a1[7] + 32 * v31;
      v33 = *(_QWORD *)(v32 - 32);
      v34 = *(_DWORD *)(v33 + 40);
      v35 = *(_QWORD *)(v33 + 32);
      v36 = v34 - 1;
      if (v36)
      {
        v37 = 0;
        v38 = (_DWORD *)(v35 + 36);
        do
        {
          v39 = v35 + 32 * (v37 + 2);
          v42 = *(llvm::MachineBasicBlock **)(v39 + 16);
          v40 = (llvm::MachineBasicBlock **)(v39 + 16);
          v41 = v42;
          if (v42 == v20)
          {
            *(_DWORD *)(v32 - 24) = *v38;
            v41 = *v40;
          }
          if (v41 == v11)
            *(_DWORD *)(v32 - 20) = *v38;
          v37 += 2;
          v38 += 16;
        }
        while (v36 != v37);
      }
      if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 368))(*a1, a1[3], a1[41], *((unsigned int *)a1 + 84), *(unsigned int *)(v35 + 4), *(unsigned int *)(v32 - 24), *(unsigned int *)(v32 - 20), v32 - 16, v32 - 12, v32 - 8) & 1) == 0)return 0;
      if (!v23 || (*v23 & 4) == 0)
      {
        while ((*((_WORD *)v23 + 22) & 8) != 0)
          v23 = (_BYTE *)*((_QWORD *)v23 + 1);
      }
      v23 = (_BYTE *)*((_QWORD *)v23 + 1);
      if (v23 == v22)
        goto LABEL_59;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v97, v96, v43, 32);
    v27 = *v97;
LABEL_39:
    v28 = &v99;
    goto LABEL_40;
  }
LABEL_59:
  v45 = (void *)a1[60];
  if (v45 == (void *)a1[59])
    goto LABEL_60;
  v89 = *((unsigned int *)a1 + 122);
  if (v89 < 0x21 || 4 * (*((_DWORD *)a1 + 123) - *((_DWORD *)a1 + 124)) >= v89)
  {
    memset(v45, 255, 8 * v89);
LABEL_60:
    *(_QWORD *)((char *)a1 + 492) = 0;
    goto LABEL_61;
  }
  free(v45);
  v91 = *((_DWORD *)a1 + 123) - *((_DWORD *)a1 + 124);
  v92 = 1 << (33 - __clz(v91 - 1));
  if (v91 <= 0x10)
    v93 = 32;
  else
    v93 = v92;
  *((_DWORD *)a1 + 122) = v93;
  *(_QWORD *)((char *)a1 + 492) = 0;
  v94 = malloc_type_malloc(8 * v93, 0x4065EBACuLL);
  if (!v94)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  a1[60] = v94;
  memset(v94, 255, 8 * *((unsigned int *)a1 + 122));
LABEL_61:
  v46 = *((unsigned int *)a1 + 144);
  if ((_DWORD)v46)
    bzero((void *)a1[71], 8 * v46);
  v47 = *v5;
  if (a3)
  {
    if (*v5 == *v3)
    {
LABEL_67:
      if (*v4 != v47 && (sub_1C50B3BE4(a1, *v4) & 1) == 0)
        return 0;
      goto LABEL_75;
    }
    if (sub_1C50B3BE4(a1, v47))
    {
      v47 = *v3;
      goto LABEL_67;
    }
    return 0;
  }
  if (*v5 != *v3)
  {
    if (!sub_1C50B3CF0(a1, v47))
      return 0;
    v47 = *v3;
  }
  if (*v4 != v47 && !sub_1C50B3CF0(a1, *v4))
    return 0;
LABEL_75:
  *((_DWORD *)a1 + 162) = 0;
  v99 = &v101;
  v100 = 0x800000000;
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)a1[3]);
  v48 = a1[3];
  v49 = v48 + 48;
  v50 = *(_QWORD *)(v48 + 56);
  if (v48 + 48 != v50)
  {
    while (1)
    {
      v49 = *(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v49 || (*(_BYTE *)v49 & 4) == 0)
      {
        while ((*(_WORD *)(v49 + 44) & 4) != 0)
          v49 = *(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8;
      }
      v51 = sub_1C477672C((uint64_t)(a1 + 59), v49);
      v52 = a1[60];
      v53 = 488;
      if (v52 == a1[59])
        v53 = 492;
      if (v51 != (_QWORD *)(v52 + 8 * *(unsigned int *)((char *)a1 + v53)))
      {
LABEL_135:
        v19 = 0;
        goto LABEL_146;
      }
      v54 = *(unsigned int *)(v49 + 40);
      if ((_DWORD)v54)
      {
        v55 = *(int **)(v49 + 32);
        v56 = &v55[8 * v54];
        do
        {
          v57 = *v55;
          if (!*v55)
          {
            v58 = v55[1];
            if (v58 - 1 <= 0x3FFFFFFE)
            {
              if ((v57 & 0x1000000) != 0)
              {
                v59 = a1[1];
                if (v59)
                  v60 = (_QWORD *)(v59 + 8);
                else
                  v60 = 0;
                v61 = *(unsigned int *)(*v60 + 24 * v58 + 16);
                v62 = (_WORD *)(v60[6] + ((v61 >> 3) & 0x1FFFFFFE));
                v63 = *v62 + (v61 & 0xF) * v58;
                v64 = *((_DWORD *)a1 + 162);
                do
                {
                  v65 = v63;
                  v66 = a1[86];
                  v67 = *(unsigned __int8 *)(v66 + v63);
                  if (v64 > v67)
                  {
                    v68 = a1[80];
                    while (1)
                    {
                      v69 = v67;
                      if (*(_DWORD *)(v68 + 4 * v67) == v65)
                        break;
                      v67 += 256;
                      if ((int)v69 + 256 >= v64)
                        goto LABEL_102;
                    }
                    if (v64 != v67)
                    {
                      v70 = (_DWORD *)(v68 + 4 * v64 - 4);
                      if (v70 != (_DWORD *)(v68 + 4 * v69))
                      {
                        *(_DWORD *)(v68 + 4 * v69) = *v70;
                        *(_BYTE *)(v66 + *(unsigned int *)(v68 + 4 * *((unsigned int *)a1 + 162) - 4)) = v69;
                        v64 = *((_DWORD *)a1 + 162);
                      }
                      *((_DWORD *)a1 + 162) = --v64;
                    }
                  }
LABEL_102:
                  v71 = (unsigned __int16)v62[1];
                  ++v62;
                  v63 = v71 + v65;
                }
                while (v71);
                v57 = *v55;
              }
              if ((v57 & 0x30000000) == 0 && (v57 & 0x10FFF00) != 0x1000000)
              {
                v72 = v100;
                if (v100 >= (unint64_t)HIDWORD(v100))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, (uint64_t)&v101, v100 + 1, 4);
                  v72 = v100;
                }
                *((_DWORD *)v99 + v72) = v58;
                LODWORD(v100) = v100 + 1;
              }
            }
          }
          v55 += 8;
        }
        while (v55 != v56);
      }
      while ((_DWORD)v100)
      {
        v73 = *((_DWORD *)v99 + v100 - 1);
        LODWORD(v100) = v100 - 1;
        v74 = a1[1];
        if (v74)
          v75 = (_QWORD *)(v74 + 8);
        else
          v75 = 0;
        v76 = *(unsigned int *)(*v75 + 24 * v73 + 16);
        v77 = (_WORD *)(v75[6] + ((v76 >> 3) & 0x1FFFFFFE));
        v78 = *v77 + (v76 & 0xF) * v73;
        do
        {
          v79 = v78;
          if (((*(_QWORD *)(a1[71] + 8 * (v78 >> 6)) >> v78) & 1) != 0)
          {
            v80 = a1[86];
            v81 = *(unsigned __int8 *)(v80 + v79);
            v82 = *((_DWORD *)a1 + 162);
            if (v82 <= v81)
              goto LABEL_119;
            while (*(_DWORD *)(a1[80] + 4 * v81) != (_DWORD)v79)
            {
              v81 += 256;
              if (v81 >= v82)
                goto LABEL_119;
            }
            if (v82 == v81)
            {
LABEL_119:
              *(_BYTE *)(v80 + v79) = v82;
              v83 = *((unsigned int *)a1 + 162);
              if (v83 >= *((unsigned int *)a1 + 163))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 80), (uint64_t)(a1 + 82), v83 + 1, 4);
                v83 = *((unsigned int *)a1 + 162);
              }
              *(_DWORD *)(a1[80] + 4 * v83) = v79;
              ++*((_DWORD *)a1 + 162);
            }
          }
          v84 = (unsigned __int16)v77[1];
          ++v77;
          v78 = v84 + v79;
        }
        while (v84);
      }
      if (v49 != FirstTerminator)
      {
        v85 = *(_WORD *)(v49 + 44);
        v86 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8);
        if ((v85 & 0xC) == 0 || (v85 & 4) != 0)
        {
          if ((v86 & 0x200) != 0)
            goto LABEL_134;
        }
        else
        {
          v87 = v49;
          if ((v86 & 0x200) != 0)
            goto LABEL_134;
          while ((*(_WORD *)(v87 + 44) & 8) != 0)
          {
            v87 = *(_QWORD *)(v87 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v87 + 16) + 9) & 2) != 0)
              goto LABEL_134;
          }
        }
      }
      if (!*((_DWORD *)a1 + 162))
      {
        a1[88] = v49;
        v19 = 1;
        goto LABEL_146;
      }
LABEL_134:
      if (v49 == v50)
        goto LABEL_135;
    }
  }
  v19 = 0;
LABEL_146:
  if (v99 != &v101)
    free(v99);
  return v19;
}

void sub_1C50B3270(unsigned int *a1, uint64_t a2, int a3)
{
  llvm::MachineBasicBlock *v6;
  llvm::MachineBasicBlock *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *FirstTerminator;
  llvm::MachineBasicBlock *v12;
  llvm::MachineBasicBlock *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::MachineFunction *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t i;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int IncompleteVirtualRegister;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  void **v65;
  llvm::MachineBasicBlock *v66;
  llvm::MachineBasicBlock *v67;
  llvm::MachineBasicBlock *v68;
  unsigned __int8 *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v6 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 5);
  if (v6 != *((llvm::MachineBasicBlock **)a1 + 4))
  {
    if (a3)
    {
      sub_1C50B41C0(a1, *((llvm::MachineBasicBlock **)a1 + 5), 0);
      v6 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 5);
    }
    v7 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 3);
    v8 = (unint64_t *)*((_QWORD *)a1 + 88);
    v9 = (unint64_t *)*((_QWORD *)v6 + 7);
    FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v6);
    if (v9 != FirstTerminator && v8 != FirstTerminator)
    {
      if (v7 != v6)
      {
        v96 = *((_QWORD *)v7 + 5);
        v97 = v9;
        do
        {
          v97[3] = v96;
          v97 = (unint64_t *)v97[1];
        }
        while (v97 != FirstTerminator);
      }
      sub_1C4785D30(v8, v9, FirstTerminator);
    }
  }
  v12 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 6);
  if (v12 != *((llvm::MachineBasicBlock **)a1 + 4))
  {
    if (a3)
    {
      sub_1C50B41C0(a1, *((llvm::MachineBasicBlock **)a1 + 6), 1);
      v12 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 6);
    }
    v13 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 3);
    v14 = (unint64_t *)*((_QWORD *)a1 + 88);
    v15 = (unint64_t *)*((_QWORD *)v12 + 7);
    v16 = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(v12);
    if (v15 != v16 && v14 != v16)
    {
      if (v13 != v12)
      {
        v98 = *((_QWORD *)v13 + 5);
        v99 = v15;
        do
        {
          v99[3] = v98;
          v99 = (unint64_t *)v99[1];
        }
        while (v99 != v16);
      }
      sub_1C4785D30(v14, v15, v16);
    }
  }
  v18 = (*(_QWORD *)(*((_QWORD *)a1 + 4) + 72) - *(_QWORD *)(*((_QWORD *)a1 + 4) + 64)) & 0x7FFFFFFF8;
  v19 = llvm::MachineBasicBlock::getFirstTerminator(*((llvm::MachineBasicBlock **)a1 + 3));
  v103 = (_QWORD *)v19;
  v100 = v18;
  v101 = a2;
  if (v18 == 16)
  {
    v20 = *(unsigned __int8 **)(v19 + 56);
    v104 = v20;
    v21 = (_QWORD *)v19;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v104, v20, 2);
    v22 = a1[16];
    if ((_DWORD)v22)
    {
      v23 = 0;
      v102 = a1[16];
      do
      {
        v24 = (unsigned int *)(*((_QWORD *)a1 + 7) + 32 * v23);
        v25 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v24 + 32) + 4);
        v26 = v24 + 2;
        if (sub_1C50B4330(*((_QWORD *)a1 + 2), *(_QWORD *)a1, v24[2], v24[3]))
        {
          v27 = *((_QWORD *)a1 + 3);
          v28 = *(_QWORD *)(*(_QWORD *)a1 + 8);
          v29 = *(llvm::MachineFunction **)(v27 + 32);
          v105 = v104;
          if (v104)
            llvm::MetadataTracking::track((uint64_t)&v105, v104, 2);
          v30 = *((_QWORD *)v29 + 28);
          if (v30)
            *((_QWORD *)v29 + 28) = *(_QWORD *)v30;
          else
            v30 = sub_1C484358C((uint64_t)v29 + 128, 72, 3);
          v106 = v105;
          if (v105)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v105, v105, (uint64_t)&v106);
            v105 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v30, v29, v28 + 912, (unsigned __int8 **)&v106, 0);
          if (v106)
            llvm::MetadataTracking::untrack((uint64_t)&v106, (unsigned __int8 *)v106);
          if (v105)
            llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
          v31 = *(_QWORD *)(v27 + 40);
          *(_QWORD *)(v30 + 24) = v31;
          v32 = *(_QWORD *)(v31 + 32);
          v33 = *(unsigned int *)(v30 + 40);
          v21 = v103;
          if ((_DWORD)v33)
          {
            v39 = *(_QWORD *)(v30 + 32);
            v40 = *(_QWORD *)(v32 + 40);
            v41 = 32 * v33;
            do
            {
              if (!*(_BYTE *)v39)
              {
                v42 = *(unsigned int *)(v39 + 4);
                if ((int)v42 >= 0)
                  v43 = (uint64_t *)(*(_QWORD *)(v40 + 272) + 8 * v42);
                else
                  v43 = (uint64_t *)(*(_QWORD *)(v40 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
                v44 = *v43;
                if (*v43)
                {
                  v45 = *(_QWORD *)(v44 + 16);
                  *(_QWORD *)(v44 + 16) = v39;
                  *(_QWORD *)(v39 + 16) = v45;
                  if ((*(_BYTE *)(v39 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v39 + 24) = v44;
                  }
                  else
                  {
                    *(_QWORD *)(v39 + 24) = 0;
                    v43 = (uint64_t *)(v45 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v39 + 16) = v39;
                  *(_QWORD *)(v39 + 24) = 0;
                }
                *v43 = v39;
              }
              v39 += 32;
              v41 -= 32;
            }
            while (v41);
          }
          v34 = *(_QWORD *)(v32 + 728);
          if (v34)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 24))(v34, v30);
          v35 = *v103 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v30 = v35 | *(_QWORD *)v30 & 7;
          *(_QWORD *)(v30 + 8) = v103;
          *(_QWORD *)(v35 + 8) = v30;
          *v103 = *v103 & 7 | v30;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          LODWORD(v106) = 0x1000000;
          HIDWORD(v106) = v25;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)&v106);
          v36 = *v26;
          v107 = 0;
          LODWORD(v106) = 0;
          HIDWORD(v106) = v36;
          v108 = 0;
          v109 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v30, v29, (const llvm::MachineOperand *)&v106);
          v22 = v102;
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD *, unsigned __int8 **, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)a1 + 376))(*(_QWORD *)a1, *((_QWORD *)a1 + 3), v21, &v104, v25, *((_QWORD *)a1 + 41), a1[84], *v26, v24[3]);
        }
        v37 = *(_QWORD *)v24;
        v38 = *(_QWORD *)v24;
        if ((**(_BYTE **)v24 & 4) == 0)
        {
          v38 = *(_QWORD *)v24;
          if ((*(_WORD *)(v37 + 44) & 8) != 0)
          {
            v38 = *(_QWORD *)v24;
            do
              v38 = *(_QWORD *)(v38 + 8);
            while ((*(_WORD *)(v38 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(*(_QWORD *)v24 + 24) + 40, v37, *(_QWORD *)(v38 + 8));
        *(_QWORD *)v24 = 0;
        ++v23;
      }
      while (v23 != v22);
    }
    v64 = v104;
    if (v104)
    {
      v65 = (void **)&v104;
LABEL_87:
      llvm::MetadataTracking::untrack((uint64_t)v65, v64);
    }
  }
  else
  {
    v46 = *(void **)(v19 + 56);
    v106 = v46;
    if (v46)
      llvm::MetadataTracking::track((uint64_t)&v106, (unsigned __int8 *)v46, 2);
    v47 = a1[16];
    if ((_DWORD)v47)
    {
      for (i = 0; i != v47; ++i)
      {
        v49 = (unsigned int *)(*((_QWORD *)a1 + 7) + 32 * i);
        v50 = v49 + 2;
        if (sub_1C50B4330(*((_QWORD *)a1 + 2), *(_QWORD *)a1, v49[2], v49[3]))
        {
          IncompleteVirtualRegister = *v50;
        }
        else
        {
          v52 = *((_QWORD *)a1 + 2);
          v53 = *(_QWORD *)(*(_QWORD *)(v52 + 24)
                          + 16 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 32) + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v52, "", 0);
          *(_QWORD *)(*(_QWORD *)(v52 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v53;
          v54 = *(_QWORD *)(v52 + 8);
          if (v54)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v54 + 24))(v54, IncompleteVirtualRegister);
          (*(void (**)(_QWORD, _QWORD, _QWORD *, void **, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)a1 + 376))(*(_QWORD *)a1, *((_QWORD *)a1 + 3), v103, &v106, IncompleteVirtualRegister, *((_QWORD *)a1 + 41), a1[84], *v50, v49[3]);
        }
        LODWORD(v55) = *(_DWORD *)(*(_QWORD *)v49 + 40);
        while ((_DWORD)v55 != 1)
        {
          v56 = *((_QWORD *)a1 + 4);
          v57 = *((_QWORD *)a1 + 5);
          if (v57 == v56)
            v57 = *((_QWORD *)a1 + 3);
          v58 = (v55 - 1);
          v59 = *(_QWORD *)(*(_QWORD *)v49 + 32) + 32 * v58;
          v62 = *(_QWORD *)(v59 + 16);
          v61 = (_QWORD *)(v59 + 16);
          v60 = v62;
          if (v62 == v57)
          {
            *v61 = *((_QWORD *)a1 + 3);
            v55 = (v55 - 2);
            llvm::MachineOperand::setReg(*(_QWORD *)(*(_QWORD *)v49 + 32) + 32 * v55, IncompleteVirtualRegister);
          }
          else
          {
            v63 = *((_QWORD *)a1 + 6);
            if (v63 == v56)
              v63 = *((_QWORD *)a1 + 3);
            if (v60 == v63)
            {
              llvm::MachineInstr::removeOperand(*(_QWORD *)v49, v58);
              LODWORD(v55) = v55 - 2;
              llvm::MachineInstr::removeOperand(*(_QWORD *)v49, v55);
            }
            else
            {
              LODWORD(v55) = v55 - 2;
            }
          }
        }
      }
    }
    v64 = (unsigned __int8 *)v106;
    if (v106)
    {
      v65 = &v106;
      goto LABEL_87;
    }
  }
  llvm::MachineBasicBlock::removeSuccessor(*((llvm::MachineBasicBlock **)a1 + 3), *((llvm::MachineBasicBlock **)a1 + 5), 0);
  llvm::MachineBasicBlock::removeSuccessor(*((llvm::MachineBasicBlock **)a1 + 3), *((llvm::MachineBasicBlock **)a1 + 6), 1);
  v66 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 4);
  v67 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 5);
  if (v67 != v66)
  {
    llvm::MachineBasicBlock::removeSuccessor(*((llvm::MachineBasicBlock **)a1 + 5), v66, 1);
    v67 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 4);
  }
  v68 = (llvm::MachineBasicBlock *)*((_QWORD *)a1 + 6);
  if (v68 != v67)
    llvm::MachineBasicBlock::removeSuccessor(v68, v67, 1);
  v69 = *(unsigned __int8 **)(llvm::MachineBasicBlock::getFirstTerminator(*((llvm::MachineBasicBlock **)a1 + 3)) + 56);
  v105 = v69;
  if (v69)
    llvm::MetadataTracking::track((uint64_t)&v105, v69, 2);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)a1 + 264))(*(_QWORD *)a1, *((_QWORD *)a1 + 3), 0);
  v70 = (unint64_t *)*((_QWORD *)a1 + 5);
  if (v70 != *((unint64_t **)a1 + 4))
  {
    v71 = *(unsigned int *)(v101 + 8);
    if (v71 >= *(_DWORD *)(v101 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v101, v101 + 16, v71 + 1, 8);
      LODWORD(v71) = *(_DWORD *)(v101 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v101 + 8 * v71) = v70;
    ++*(_DWORD *)(v101 + 8);
    v72 = (uint64_t *)*((_QWORD *)a1 + 5);
    v73 = v72[4];
    v74 = v73 + 320;
    *(_QWORD *)(*(_QWORD *)(v73 + 104) + 8 * *((unsigned int *)v72 + 6)) = 0;
    *((_DWORD *)v72 + 6) = -1;
    v75 = *v72;
    v76 = (_QWORD *)v72[1];
    *v76 = *v72;
    *(_QWORD *)(v75 + 8) = v76;
    *v72 = 0;
    v72[1] = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v74, (llvm::MachineBasicBlock *)v72);
    v70 = (unint64_t *)*((_QWORD *)a1 + 4);
  }
  v77 = (unint64_t *)*((_QWORD *)a1 + 6);
  if (v77 != v70)
  {
    v78 = *(unsigned int *)(v101 + 8);
    if (v78 >= *(_DWORD *)(v101 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v101, v101 + 16, v78 + 1, 8);
      LODWORD(v78) = *(_DWORD *)(v101 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v101 + 8 * v78) = v77;
    ++*(_DWORD *)(v101 + 8);
    v79 = (uint64_t *)*((_QWORD *)a1 + 6);
    v80 = v79[4];
    v81 = v80 + 320;
    *(_QWORD *)(*(_QWORD *)(v80 + 104) + 8 * *((unsigned int *)v79 + 6)) = 0;
    *((_DWORD *)v79 + 6) = -1;
    v82 = *v79;
    v83 = (_QWORD *)v79[1];
    *v83 = *v79;
    *(_QWORD *)(v82 + 8) = v83;
    *v79 = 0;
    v79[1] = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v81, (llvm::MachineBasicBlock *)v79);
    v70 = (unint64_t *)*((_QWORD *)a1 + 4);
  }
  v84 = *((_QWORD *)a1 + 3);
  if (v100 == 16 && *(unint64_t **)(v84 + 8) == v70)
  {
    if ((unint64_t *)v84 != v70)
    {
      v85 = v70 + 6;
      v86 = (unint64_t *)v70[7];
      if (v86 != v70 + 6)
      {
        v87 = *(_QWORD *)(v84 + 40);
        v88 = (unint64_t *)v70[7];
        do
        {
          v88[3] = v87;
          v88 = (unint64_t *)v88[1];
        }
        while (v88 != v85);
        sub_1C4785D30((unint64_t *)(v84 + 48), v86, v85);
        v84 = *((_QWORD *)a1 + 3);
        v70 = (unint64_t *)*((_QWORD *)a1 + 4);
      }
    }
    llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v84, (llvm::MachineBasicBlock *)v70);
    v89 = *((_QWORD *)a1 + 4);
    v90 = *(unsigned int *)(v101 + 8);
    if (v90 >= *(_DWORD *)(v101 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v101, v101 + 16, v90 + 1, 8);
      LODWORD(v90) = *(_DWORD *)(v101 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v101 + 8 * v90) = v89;
    ++*(_DWORD *)(v101 + 8);
    v91 = (uint64_t *)*((_QWORD *)a1 + 4);
    v92 = v91[4];
    v93 = v92 + 320;
    *(_QWORD *)(*(_QWORD *)(v92 + 104) + 8 * *((unsigned int *)v91 + 6)) = 0;
    *((_DWORD *)v91 + 6) = -1;
    v94 = *v91;
    v95 = (_QWORD *)v91[1];
    *v95 = *v91;
    *(_QWORD *)(v94 + 8) = v95;
    *v91 = 0;
    v91[1] = 0;
    llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v93, (llvm::MachineBasicBlock *)v91);
  }
  else
  {
    v106 = &v108;
    v107 = 0;
    (*(void (**)(_QWORD, uint64_t, unint64_t *, _QWORD, uint64_t *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)a1 + 272))(*(_QWORD *)a1, v84, v70, 0, &v108, 0, &v105, 0);
    llvm::MachineBasicBlock::addSuccessor(*((_QWORD **)a1 + 3), *((_QWORD **)a1 + 4), -1);
    if (v106 != &v108)
      free(v106);
  }
  if (v105)
    llvm::MetadataTracking::untrack((uint64_t)&v105, v105);
}

uint64_t sub_1C50B3B2C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1C49FA70C(a1, a2);
  if (a4)
  {
    v8 = result;
    v9 = &a3[a4];
    do
    {
      v10 = *a3;
      v11 = sub_1C49FA70C(a1, *a3);
      v12 = *(unsigned int *)(v11 + 32);
      if ((_DWORD)v12)
      {
        v13 = v11;
        do
        {
          v14 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * v12 - 8);
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
          *(_BYTE *)(*(_QWORD *)(a1 + 1320) + 64) = 0;
          llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom(v14, v8);
          v12 = *(unsigned int *)(v13 + 32);
        }
        while ((_DWORD)v12);
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
      result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::eraseNode(*(int32x2_t **)(a1 + 1320), v10);
      ++a3;
    }
    while (a3 != v9);
  }
  return result;
}

uint64_t sub_1C50B3BE4(_QWORD *a1, llvm::MachineBasicBlock *this)
{
  uint64_t result;
  uint64_t v4;
  unint64_t FirstTerminator;
  unint64_t v6;
  int v7;
  int v8;

  if (*((_QWORD *)this + 19) != *((_QWORD *)this + 20))
    return 0;
  v4 = *((_QWORD *)this + 7);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v4 == FirstTerminator)
    return 1;
  v6 = FirstTerminator;
  v7 = 0;
  while (1)
  {
    v8 = **(unsigned __int16 **)(v4 + 16);
    if ((v8 - 13) >= 5)
    {
      if (++v7 > dword_1ED7F7368 && byte_1ED7F7428 == 0)
        return 0;
      result = 0;
      if (!**(_WORD **)(v4 + 16))
        break;
      if (v8 == 69)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 832))(*a1, v4);
      if (!(_DWORD)result)
        break;
      if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 768))(*a1, v4) & 1) != 0)
        return 0;
      result = sub_1C50B3E50(a1, *(_DWORD **)(v4 + 32), *(_DWORD *)(v4 + 40));
      if (!(_DWORD)result)
        break;
    }
    if ((*(_BYTE *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
        v4 = *(_QWORD *)(v4 + 8);
    }
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v6)
      return 1;
  }
  return result;
}

uint64_t sub_1C50B3CF0(_QWORD *a1, llvm::MachineBasicBlock *this)
{
  uint64_t result;
  uint64_t v4;
  unint64_t FirstTerminator;
  unint64_t v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  if (*((_QWORD *)this + 19) != *((_QWORD *)this + 20))
    return 0;
  v4 = *((_QWORD *)this + 7);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v4 == FirstTerminator)
    return 1;
  v6 = FirstTerminator;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int16 **)(v4 + 16);
    v9 = *v8;
    if ((v9 - 13) >= 5)
    {
      if (++v7 > dword_1ED7F7368 && byte_1ED7F7428 == 0)
        return 0;
      result = 0;
      if (!*v8 || v9 == 69)
        break;
      if ((v9 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v4 + 32) + 48) & 8) != 0)
        return 0;
      v11 = *(_WORD *)(v4 + 44);
      v12 = *((_QWORD *)v8 + 1);
      if ((v11 & 0xC) != 0 && (v11 & 4) == 0)
      {
        v13 = v4;
        if ((v12 & 0x80000) != 0)
          return 0;
        while ((*(_WORD *)(v13 + 44) & 8) != 0)
        {
          result = 0;
          v13 = *(_QWORD *)(v13 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v13 + 16) + 10) & 8) != 0)
            return result;
        }
      }
      else if ((v12 & 0x80000) != 0)
      {
        return 0;
      }
      v14 = 1;
      if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v4, 0, &v14))
        return 0;
      result = sub_1C50B3E50(a1, *(_DWORD **)(v4 + 32), *(_DWORD *)(v4 + 40));
      if (!(_DWORD)result)
        break;
    }
    if ((*(_BYTE *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
        v4 = *(_QWORD *)(v4 + 8);
    }
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v6)
      return 1;
  }
  return result;
}

uint64_t sub_1C50B3E50(_QWORD *a1, _DWORD *a2, int a3)
{
  _DWORD *v3;
  llvm::SmallPtrSetImplBase *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _DWORD *v21;
  _QWORD *v22;
  llvm::SmallPtrSetImplBase *v23;
  _DWORD *v24;

  if (!a3)
    return 1;
  v3 = &a2[8 * a3];
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 59);
  while (1)
  {
    v5 = *a2;
    if (*a2)
    {
      if (*a2 == 12)
        return 0;
      goto LABEL_19;
    }
    v6 = a2[1];
    if ((v5 & 0x1000000) != 0 && v6 - 1 <= 0x3FFFFFFE)
    {
      v7 = a1[1];
      if (v7)
        v8 = (_QWORD *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(unsigned int *)(*v8 + 24 * v6 + 16);
      v10 = (unsigned __int16 *)(v8[6] + ((v9 >> 3) & 0x1FFFFFFE));
      v12 = *v10;
      v11 = v10 + 1;
      v13 = v12 + (v9 & 0xF) * v6;
      v14 = a1[71];
      do
      {
        *(_QWORD *)(v14 + 8 * ((unsigned __int16)v13 >> 6)) |= 1 << v13;
        v15 = *v11++;
        v13 += v15;
      }
      while (v15);
      v5 = *a2;
    }
    if ((v5 & 0x30000000) != 0 || (v5 & 0x1000000) != 0 && (v5 & 0xFFF00) == 0)
      goto LABEL_19;
    if ((v6 & 0x80000000) == 0)
      goto LABEL_19;
    v16 = *(_QWORD *)(*(_QWORD *)(a1[2] + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
    if (!v16)
      goto LABEL_19;
    v23 = v4;
    v24 = v3;
    v21 = a2;
    v22 = a1;
    if ((*(_BYTE *)(v16 + 3) & 1) == 0)
    {
      v16 = *(_QWORD *)(v16 + 24);
      if (!v16 || (*(_BYTE *)(v16 + 3) & 1) == 0)
        goto LABEL_19;
    }
    v17 = *(_QWORD *)(v16 + 8);
    if (!v17 || *(_QWORD *)(v17 + 24) != a1[3])
      goto LABEL_19;
    sub_1C4774094(v4, v17);
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8);
    if ((*(_WORD *)(v17 + 44) & 0xC) != 0 && (*(_WORD *)(v17 + 44) & 4) == 0)
      break;
    a2 = v21;
    a1 = v22;
    v4 = v23;
    v3 = v24;
    if ((v18 & 0x200) != 0)
      return 0;
LABEL_19:
    a2 += 8;
    if (a2 == v3)
      return 1;
  }
  if ((v18 & 0x200) == 0)
  {
    while (1)
    {
      a2 = v21;
      a1 = v22;
      v4 = v23;
      v3 = v24;
      if ((*(_WORD *)(v17 + 44) & 8) == 0)
        break;
      result = 0;
      v17 = *(_QWORD *)(v17 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + 9) & 2) != 0)
        return result;
    }
    goto LABEL_19;
  }
  return 0;
}

uint64_t sub_1C50B4050(uint64_t a1, char *__s, unsigned int a3)
{
  std::string::size_type v6;
  uint64_t v7;
  int32x2_t v8;
  int64x2_t v9;
  int8x16_t v10;
  int8x16_t v11;
  std::string v13;
  void *__p;
  char v15;
  int8x16_t v16;

  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v13, __s, v6, a3);
  v7 = sub_1C47E3888(a1, (uint64_t)&v13);
  v8 = vdup_n_s32(a3 == 1);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  v10 = (int8x16_t)vdupq_n_s64(7uLL);
  v10.i64[0] = (uint64_t)" cycles";
  v11 = (int8x16_t)vdupq_n_s64(6uLL);
  v11.i64[0] = (uint64_t)" cycle";
  v16 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v9, 0x3FuLL)), v11, v10);
  sub_1C53B17B4(v7 + 80, (const void **)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v7;
}

uint64_t sub_1C50B4134(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)a1 = &off_1E814E790;
  v2 = *(char **)(a1 + 80);
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 17] < 0)
        operator delete(*(v5 - 5));
      if (*((char *)v5 - 41) < 0)
        operator delete(*(v5 - 8));
      v4 -= 64;
    }
    while (v4);
    v2 = *(char **)(a1 + 80);
  }
  if (v2 != (char *)(a1 + 96))
    free(v2);
  return a1;
}

void sub_1C50B41C0(unsigned int *a1, llvm::MachineBasicBlock *this, int a3)
{
  unint64_t v6;
  void **v7;
  BOOL v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t FirstTerminator;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x400000000;
  v6 = a1[84];
  v7 = (void **)(a1 + 82);
  if ((_DWORD)v6)
    v8 = &v15 == v7;
  else
    v8 = 1;
  if (!v8)
  {
    if (v6 >= 5)
    {
      v14 = (void **)(a1 + 82);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v6, 32);
      v10 = a1[84];
      if (!v10)
        goto LABEL_8;
      v7 = v14;
      v9 = v15;
    }
    else
    {
      v9 = v17;
      v10 = v6;
    }
    memcpy(v9, *v7, 32 * v10);
LABEL_8:
    LODWORD(v16) = v6;
  }
  if (a3)
    (*(void (**)(_QWORD, void **))(**(_QWORD **)a1 + 728))(*(_QWORD *)a1, &v15);
  v11 = *((_QWORD *)this + 7);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(this);
  if (v11 != FirstTerminator)
  {
    v13 = FirstTerminator;
    do
    {
      if (**(unsigned __int16 **)(v11 + 16) - 13 >= 5)
        (*(void (**)(_QWORD, uint64_t, void *, _QWORD))(**(_QWORD **)a1 + 808))(*(_QWORD *)a1, v11, v15, v16);
      if ((*(_BYTE *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 8) != 0)
          v11 = *(_QWORD *)(v11 + 8);
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != v13);
  }
  if (v15 != v17)
    free(v15);
}

uint64_t sub_1C50B4330(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t result;
  uint64_t UniqueVRegDef;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int RegisterDefOperandIdx;
  int v25;
  BOOL v26;
  int v28;
  uint64_t v29;
  uint64_t v30;

  if (a3 == a4)
    return 1;
  if (((a3 & a4 & 0x80000000) != 0) == __OFSUB__(a3, a4))
    return 0;
  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(a1, a3);
  v10 = llvm::MachineRegisterInfo::getUniqueVRegDef(a1, a4);
  result = 0;
  if (UniqueVRegDef && v10)
  {
    if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)UniqueVRegDef))
      return 0;
    v11 = *(unsigned __int16 **)(UniqueVRegDef + 16);
    v12 = *v11 - 1;
    if (v12 <= 1 && (*(_BYTE *)(*(_QWORD *)(UniqueVRegDef + 32) + 48) & 8) != 0)
      goto LABEL_19;
    v13 = *(unsigned __int16 *)(UniqueVRegDef + 44);
    v26 = (v13 & 0xC) == 0;
    v14 = (v13 >> 2) & 1;
    if (v26)
      v15 = 1;
    else
      v15 = v14;
    v16 = *((_QWORD *)v11 + 1);
    if ((v15 & 1) != 0)
    {
      if ((v16 & 0x80000) != 0)
        goto LABEL_19;
    }
    else
    {
      if ((v16 & 0x80000) != 0)
        goto LABEL_19;
      v29 = UniqueVRegDef;
      while ((*(_WORD *)(v29 + 44) & 8) != 0)
      {
        v29 = *(_QWORD *)(v29 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v29 + 16) + 10) & 8) != 0)
          goto LABEL_19;
      }
    }
    if (v12 > 1 || (*(_BYTE *)(*(_QWORD *)(UniqueVRegDef + 32) + 48) & 0x10) == 0)
    {
      if ((v15 & 1) != 0)
      {
        if ((v16 & 0x100000) == 0)
          goto LABEL_21;
      }
      else if ((v16 & 0x100000) == 0)
      {
        v30 = UniqueVRegDef;
        while ((*(_WORD *)(v30 + 44) & 8) != 0)
        {
          v30 = *(_QWORD *)(v30 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v30 + 16) + 10) & 0x10) != 0)
            goto LABEL_19;
        }
        goto LABEL_21;
      }
    }
LABEL_19:
    result = llvm::MachineInstr::isDereferenceableInvariantLoad((llvm::MachineInstr *)UniqueVRegDef, 0);
    if (!(_DWORD)result)
      return result;
    v11 = *(unsigned __int16 **)(UniqueVRegDef + 16);
LABEL_21:
    v17 = *(_QWORD *)(UniqueVRegDef + 32);
    v18 = *((unsigned __int8 *)v11 + 4);
    v19 = *(unsigned int *)(UniqueVRegDef + 40);
    if ((v11[4] & 2) != 0)
    {
      if ((_DWORD)v19 == v18)
      {
LABEL_31:
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, UniqueVRegDef, v10, a1);
        if ((_DWORD)result)
        {
          RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(UniqueVRegDef, a3, 0, 0, 0);
          v25 = llvm::MachineInstr::findRegisterDefOperandIdx(v10, a4, 0, 0, 0);
          v26 = RegisterDefOperandIdx == -1 || v25 == -1;
          return !v26 && RegisterDefOperandIdx == v25;
        }
        return result;
      }
      v20 = *((unsigned __int8 *)v11 + 4);
      do
      {
        v28 = *(_DWORD *)(v17 + 32 * v18);
        if ((v28 & 0x10000FF) != 0x1000000)
          break;
        v20 += (v28 & 0x2000000) == 0;
        if ((_DWORD)v19 - 1 == v18)
          break;
        ++v18;
      }
      while ((v28 & 0x2000000) == 0);
    }
    else
    {
      v20 = *((unsigned __int8 *)v11 + 4);
    }
    if (v20 != (_DWORD)v19)
    {
      v21 = v17 + 32 * v19;
      v22 = v17 + 32 * v20;
      while (*(_BYTE *)v22 || (*(_DWORD *)(v22 + 4) - 1) >= 0x3FFFFFFF)
      {
        v22 += 32;
        if (v22 == v21)
          goto LABEL_31;
      }
      return 0;
    }
    goto LABEL_31;
  }
  return result;
}

double sub_1C50B4584()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F2EE8);
  *(_QWORD *)v1 = &off_1E8141E40;
  *(_OWORD *)(v1 + 296) = xmmword_1C8663800;
  *(_OWORD *)(v1 + 312) = unk_1C8663810;
  *(_QWORD *)(v1 + 328) = 0;
  *(_OWORD *)(v1 + 264) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v1 + 280) = unk_1C86637F0;
  *(_OWORD *)(v1 + 368) = xmmword_1C8663800;
  *(_OWORD *)(v1 + 384) = unk_1C8663810;
  *(_QWORD *)(v1 + 400) = 0;
  *(_OWORD *)(v1 + 336) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v1 + 352) = unk_1C86637F0;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_QWORD *)(v1 + 456) = v1 + 472;
  *(_QWORD *)(v1 + 464) = 0x1000000000;
  *(_QWORD *)(v1 + 536) = 0;
  *(_QWORD *)(v1 + 632) = v1 + 648;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 640) = 0x800000000;
  *(_QWORD *)(v1 + 904) = v1 + 920;
  *(_QWORD *)(v1 + 912) = 0x400000000;
  *(_QWORD *)(v1 + 1048) = v1 + 1080;
  *(_QWORD *)(v1 + 1056) = v1 + 1080;
  *(_QWORD *)(v1 + 1064) = 8;
  *(_DWORD *)(v1 + 1072) = 0;
  *(_QWORD *)(v1 + 1144) = v1 + 1160;
  *(_QWORD *)(v1 + 1152) = 0x600000000;
  *(_DWORD *)(v1 + 1208) = 0;
  *(_QWORD *)(v1 + 1216) = v1 + 1232;
  *(_QWORD *)(v1 + 1224) = 0x800000000;
  *(_QWORD *)(v1 + 1264) = 0;
  *(_DWORD *)(v1 + 1272) = 0;
  *(_QWORD *)(v1 + 1280) = 0;
  return result;
}

void sub_1C50B468C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)a1 = &off_1E8141E40;
  free(*(void **)(a1 + 1264));
  v2 = *(void **)(a1 + 1216);
  if (v2 != (void *)(a1 + 1232))
    free(v2);
  v3 = *(void **)(a1 + 1144);
  if (v3 != (void *)(a1 + 1160))
    free(v3);
  v4 = *(void **)(a1 + 1056);
  if (v4 != *(void **)(a1 + 1048))
    free(v4);
  v5 = *(void **)(a1 + 904);
  if (v5 != (void *)(a1 + 920))
    free(v5);
  v6 = *(void **)(a1 + 632);
  if (v6 != (void *)(a1 + 648))
    free(v6);
  v7 = *(void **)(a1 + 456);
  if (v7 != (void *)(a1 + 472))
    free(v7);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 192))
    free(v8);
  v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 120))
    free(v9);
  v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 48))
    free(v10);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C50B4790(uint64_t a1)
{
  sub_1C50B468C(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50B47B4()
{
  return "Early If-predicator";
}

void *sub_1C50B47C4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C50B4858(uint64_t a1, uint64_t a2)
{
  int v4;
  const llvm::TargetSubtargetInfo *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t AnalysisPass;
  void **v11;
  void *v12;
  unsigned int *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int EdgeProbability;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int32x2_t *v45;
  uint64_t *v46;
  int32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v6 = *(const llvm::TargetSubtargetInfo **)(a2 + 16);
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v6 + 104))(v6);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v6 + 176))(v6);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 40);
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 264), v6);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 552) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineDominatorTree::ID);
  v9 = *(_QWORD *)(a1 + 8);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v9 + 24), &llvm::MachineLoopInfo::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineLoopInfo::ID);
    v9 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 568) = AnalysisPass;
  v11 = *(void ***)v9;
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::MachineBranchProbabilityInfo::ID);
  *(_QWORD *)(a1 + 560) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachineBranchProbabilityInfo::ID);
  v13 = (unsigned int *)(a1 + 576);
  sub_1C50B2880(a1 + 576, a2);
  sub_1C61DD280((uint64_t)&v64, *(void ****)(a1 + 552));
  sub_1C61AF960((const void **)&v59, (llvm::SmallPtrSetImplBase *)&v64);
  sub_1C61AF960((const void **)&v54, (llvm::SmallPtrSetImplBase *)&v68);
  v4 = 0;
  while (1)
  {
    if (v62 != v57)
      goto LABEL_21;
    if (!v62)
      break;
    v14 = v56;
    v15 = v61;
    while (*v15 == *v14 && v15[1] == v14[1])
    {
      v15 += 2;
      v14 += 2;
      if (v15 == (_QWORD *)((char *)v61 + 16 * v62))
        goto LABEL_80;
    }
LABEL_21:
    v50 = v4;
    v52 = **((_QWORD **)v61 + 2 * v62 - 2);
    if (sub_1C50B2A18(v13, v52, 1))
    {
      v53 = 0;
      while (1)
      {
        EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 560), *(const llvm::MachineBasicBlock **)(a1 + 600), *(const llvm::MachineBasicBlock **)(a1 + 616));
        v18 = *(_QWORD *)(a1 + 616);
        v19 = *(_QWORD *)(a1 + 608);
        v20 = *(_QWORD *)(a1 + 624);
        if (v18 != v19)
        {
          if (v20 != v19)
          {
            v51 = EdgeProbability;
            v21 = v18 + 48;
            v22 = *(_QWORD *)(v18 + 56);
            if (v22 == v18 + 48)
            {
              v24 = 0;
              v23 = 0;
            }
            else
            {
              LODWORD(v23) = 0;
              LODWORD(v24) = 0;
              do
              {
                v25 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 264), (const llvm::MachineInstr *)v22, 0);
                if (v25)
                  v26 = v25 - 1;
                else
                  v26 = 0;
                v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 968))(*(_QWORD *)(a1 + 248), v22);
                if (!v22 || (*(_BYTE *)v22 & 4) == 0)
                {
                  while ((*(_WORD *)(v22 + 44) & 8) != 0)
                    v22 = *(_QWORD *)(v22 + 8);
                }
                v23 = (v26 + v23);
                v24 = (v27 + v24);
                v22 = *(_QWORD *)(v22 + 8);
              }
              while (v22 != v21);
              v20 = *(_QWORD *)(a1 + 624);
            }
            v37 = v20 + 48;
            v38 = *(_QWORD *)(v20 + 56);
            if (v38 == v20 + 48)
            {
              v40 = 0;
              v39 = 0;
            }
            else
            {
              LODWORD(v39) = 0;
              LODWORD(v40) = 0;
              do
              {
                v41 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 264), (const llvm::MachineInstr *)v38, 0);
                if (v41)
                  v42 = v41 - 1;
                else
                  v42 = 0;
                v43 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 968))(*(_QWORD *)(a1 + 248), v38);
                if (!v38 || (*(_BYTE *)v38 & 4) == 0)
                {
                  while ((*(_WORD *)(v38 + 44) & 8) != 0)
                    v38 = *(_QWORD *)(v38 + 8);
                }
                v39 = (v42 + v39);
                v40 = (v43 + v40);
                v38 = *(_QWORD *)(v38 + 8);
              }
              while (v38 != v37);
              v20 = *(_QWORD *)(a1 + 624);
            }
            v44 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 248) + 328))(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 616), v23, v24, v20, v39, v40, v51);
            v13 = (unsigned int *)(a1 + 576);
            if (!v44)
              goto LABEL_78;
            goto LABEL_68;
          }
          v20 = *(_QWORD *)(a1 + 616);
        }
        v28 = v13;
        v29 = *(_QWORD *)(v20 + 56);
        v30 = EdgeProbability;
        if (v29 == v20 + 48)
        {
          v32 = 0;
          v31 = 0;
        }
        else
        {
          LODWORD(v31) = 0;
          LODWORD(v32) = 0;
          do
          {
            v33 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 264), (const llvm::MachineInstr *)v29, 0);
            if (v33)
              v34 = v33 - 1;
            else
              v34 = 0;
            v35 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 968))(*(_QWORD *)(a1 + 248), v29);
            if (!v29 || (*(_BYTE *)v29 & 4) == 0)
            {
              while ((*(_WORD *)(v29 + 44) & 8) != 0)
                v29 = *(_QWORD *)(v29 + 8);
            }
            v32 = (v34 + v32);
            v31 = (v35 + v31);
            v29 = *(_QWORD *)(v29 + 8);
          }
          while (v29 != v20 + 48);
        }
        v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 248) + 320))(*(_QWORD *)(a1 + 248), v20, v32, v31, v30);
        v13 = v28;
        if ((v36 & 1) == 0)
          goto LABEL_78;
LABEL_68:
        v72 = v74;
        v73 = 0x400000000;
        sub_1C50B3270(v13, (uint64_t)&v72, 1);
        sub_1C50B3B2C(*(_QWORD *)(a1 + 552), *(_QWORD *)(a1 + 600), v72, v73);
        v45 = *(int32x2_t **)(a1 + 568);
        v46 = v72;
        if (v45 && (_DWORD)v73)
        {
          v47 = v45 + 31;
          v48 = 8 * v73;
          do
          {
            v49 = *v46++;
            llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock(v47, v49);
            v48 -= 8;
          }
          while (v48);
          v46 = v72;
        }
        if (v46 != v74)
          free(v46);
        v53 = 1;
        if ((sub_1C50B2A18(v13, v52, 1) & 1) == 0)
          goto LABEL_78;
      }
    }
    v53 = 0;
LABEL_78:
    v4 = v53 | v50;
    if (--v62)
      sub_1C4EB6F48(&v59);
  }
LABEL_80:
  if (v56 != &v58)
    free(v56);
  if (v55 != v54)
    free(v55);
  if (v61 != &v63)
    free(v61);
  if (v60 != v59)
    free(v60);
  if (v70 != &v71)
    free(v70);
  if (v69 != v68)
    free(v69);
  if (v66 != &v67)
    free(v66);
  if (v65 != v64)
    free(v65);
  return v4 & 1;
}

uint64_t sub_1C50B4E30()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  v3 = &v2;
  v1 = 1;
  v2 = 30;
  *(_QWORD *)&v4 = "Maximum number of instructions per speculated block.";
  *((_QWORD *)&v4 + 1) = 52;
  sub_1C4DB1928((uint64_t)&unk_1ED7F72E8, "early-ifcvt-limit", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F72E8, &dword_1C475E000);
  LODWORD(v3) = 1;
  *(_QWORD *)&v4 = "Turn all knobs to 11";
  *((_QWORD *)&v4 + 1) = 20;
  sub_1C61B2D38((uint64_t)&unk_1ED7F73A8, "stress-early-ifcvt", &v3, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F73A8, &dword_1C475E000);
}

uint64_t sub_1C50B4F00(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Bundle Machine CFG Edges";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "edge-bundles";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &llvm::EdgeBundles::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::EdgeBundles>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::EdgeBundles::runOnMachineFunction(llvm::EdgeBundles *this, llvm::MachineFunction *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v45;
  const char *v46;
  __int16 v47;

  v3 = 0;
  *((_QWORD *)this + 31) = a2;
  v4 = (uint64_t *)((char *)this + 256);
  *((_DWORD *)this + 66) = 0;
  *((_DWORD *)this + 76) = 0;
  v5 = (*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2;
  v6 = v5 & 0xFFFFFFFE;
  if (*((_DWORD *)this + 67) < (v5 & 0xFFFFFFFE))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 256, (uint64_t)this + 272, v5 & 0xFFFFFFFE, 4);
    v3 = *((_DWORD *)this + 66);
  }
  while (v3 < v6)
  {
    v7 = v3;
    if (v3 >= *((_DWORD *)this + 67))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, (uint64_t)this + 272, v3 + 1, 4);
      v7 = *((_DWORD *)this + 66);
    }
    *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v7) = v3;
    v3 = *((_DWORD *)this + 66) + 1;
    *((_DWORD *)this + 66) = v3;
  }
  v8 = *((_QWORD *)this + 31);
  v9 = v8 + 320;
  for (i = *(_QWORD *)(v8 + 328); i != v9; i = *(_QWORD *)(i + 8))
  {
    v11 = *(_QWORD *)(i + 88);
    v12 = *(_QWORD *)(i + 96);
    if (v11 != v12)
    {
      v13 = (2 * *(_DWORD *)(i + 24)) | 1u;
      v14 = *v4;
      do
      {
        v15 = 2 * *(_DWORD *)(*(_QWORD *)v11 + 24);
        v16 = *(_DWORD *)(v14 + 4 * v13);
        v17 = *(_DWORD *)(v14 + 4 * v15);
        if (v16 != v17)
        {
          v18 = v13;
          do
          {
            if (v16 < v17)
            {
              *(_DWORD *)(v14 + 4 * v15) = v16;
              v15 = v17;
              v17 = *(_DWORD *)(v14 + 4 * v17);
            }
            else
            {
              *(_DWORD *)(v14 + 4 * v18) = v17;
              v18 = v16;
              v16 = *(_DWORD *)(v14 + 4 * v16);
            }
          }
          while (v16 != v17);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
  }
  if (!*((_DWORD *)this + 76))
  {
    v19 = *((unsigned int *)this + 66);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = *v4;
      do
      {
        v22 = *(unsigned int *)(v21 + 4 * v20);
        if (v20 == v22)
        {
          v23 = *((_DWORD *)this + 76);
          *((_DWORD *)this + 76) = v23 + 1;
        }
        else
        {
          v23 = *(_DWORD *)(v21 + 4 * v22);
        }
        *(_DWORD *)(v21 + 4 * v20++) = v23;
      }
      while (v19 != v20);
    }
  }
  if (byte_1ED7F74E8)
  {
    v46 = "EdgeBundles";
    v47 = 259;
    sub_1C50B5350((uint64_t)this, (llvm::Twine *)&v46);
  }
  v24 = *((unsigned int *)this + 80);
  if ((_DWORD)v24)
  {
    v25 = *((_QWORD *)this + 39);
    v26 = 48 * v24;
    do
    {
      v27 = *(void **)(v25 + v26 - 48);
      if ((void *)(v25 + v26 - 32) != v27)
        free(v27);
      v26 -= 48;
    }
    while (v26);
  }
  v28 = (_QWORD *)((char *)this + 312);
  *((_DWORD *)this + 80) = 0;
  v29 = *((unsigned int *)this + 76);
  if ((_DWORD)v29)
  {
    if (*((_DWORD *)this + 81) < v29)
    {
      v45 = *((unsigned int *)this + 76);
      sub_1C61DDA28((uint64_t)this + 312, v29);
      v29 = v45;
      v30 = *((unsigned int *)this + 80);
    }
    else
    {
      v30 = 0;
    }
    if (v30 != v29)
    {
      v31 = 3 * v30;
      v32 = 48 * v29 - 48 * v30;
      v33 = *v28 + 16 * v31 + 16;
      do
      {
        *(_QWORD *)(v33 - 16) = v33;
        *(_QWORD *)(v33 - 8) = 0x800000000;
        v33 += 48;
        v32 -= 48;
      }
      while (v32);
    }
    *((_DWORD *)this + 80) = v29;
  }
  v34 = *(_QWORD *)(*((_QWORD *)this + 31) + 112) - *(_QWORD *)(*((_QWORD *)this + 31) + 104);
  if ((v34 & 0x7FFFFFFF8) != 0)
  {
    v35 = 0;
    v36 = (v34 >> 3);
    v37 = 1;
    do
    {
      v38 = *(_DWORD *)(*v4 + 4 * (v37 - 1));
      v39 = *(_DWORD *)(*v4 + 4 * v37);
      v40 = *v28 + 48 * v38;
      v41 = *(unsigned int *)(v40 + 8);
      if (v41 >= *(unsigned int *)(v40 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(*v28 + 48 * v38, v40 + 16, v41 + 1, 4);
        v41 = *(unsigned int *)(v40 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v40 + 4 * v41) = v35;
      ++*(_DWORD *)(v40 + 8);
      if (v39 != v38)
      {
        v42 = *v28 + 48 * v39;
        v43 = *(unsigned int *)(v42 + 8);
        if (v43 >= *(unsigned int *)(v42 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*v28 + 48 * v39, v42 + 16, v43 + 1, 4);
          v43 = *(unsigned int *)(v42 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v42 + 4 * v43) = v35;
        ++*(_DWORD *)(v42 + 8);
      }
      ++v35;
      v37 += 2;
    }
    while (v36 != v35);
  }
  return 0;
}

void llvm::EdgeBundles::view(llvm::EdgeBundles *this)
{
  const char *v1;
  __int16 v2;

  v1 = "EdgeBundles";
  v2 = 259;
  sub_1C50B5350((uint64_t)this, (llvm::Twine *)&v1);
}

void sub_1C50B5350(uint64_t a1, llvm::Twine *a2)
{
  llvm *v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  void **v6;
  size_t v7;
  llvm::raw_ostream *v8;
  void *v9;
  char v10;
  size_t v11;
  __int128 *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  _QWORD *v15;
  void *__p[2];
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  void *v20[2];
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v24 = 0;
  llvm::Twine::str(a2, v20);
  v19 = 260;
  v18[0] = v20;
  llvm::createGraphFilename((llvm::Twine *)v18, &v24, &v22);
  *(_OWORD *)__p = v22;
  v17 = v23;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  if (v21 < 0)
    operator delete(v20[0]);
  v3 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v18, v24, 1, 0, 0);
  if (v24 == -1)
  {
    v4 = (llvm::raw_ostream *)llvm::errs(v3);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x13)
    {
      *(_DWORD *)(v5 + 16) = 656434540;
      *(_OWORD *)v5 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v4 + 4) += 20;
    }
    else
    {
      v4 = llvm::raw_ostream::write(v4, "error opening file '", 0x14uLL);
    }
    if (v17 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if (v17 >= 0)
      v7 = HIBYTE(v17) & 0x7F;
    else
      v7 = (size_t)__p[1];
    v8 = llvm::raw_ostream::write(v4, (const char *)v6, v7);
    v9 = (void *)*((_QWORD *)v8 + 4);
    if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0xEuLL)
    {
      qmemcpy(v9, "' for writing!\n", 15);
      *((_QWORD *)v8 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v8, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v23) = 0;
    LOBYTE(v22) = 0;
  }
  else
  {
    v13 = llvm::WriteGraph<llvm::EdgeBundles>((llvm::raw_ostream *)v18, a1);
    v14 = (llvm::raw_ostream *)llvm::errs(v13);
    v15 = (_QWORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 7uLL)
    {
      *v15 = 0xA202E656E6F6420;
      *((_QWORD *)v14 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v14, " done. \n", 8uLL);
    }
    v22 = *(_OWORD *)__p;
    v23 = v17;
    __p[1] = 0;
    v17 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v18);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  v10 = HIBYTE(v23);
  if (v23 >= 0)
    v11 = HIBYTE(v23) & 0x7F;
  else
    v11 = *((_QWORD *)&v22 + 1);
  if (v11)
  {
    if (v23 >= 0)
      v12 = &v22;
    else
      v12 = (__int128 *)v22;
    llvm::DisplayGraph(v12, v11, 0, 0);
    v10 = HIBYTE(v23);
  }
  if (v10 < 0)
    operator delete((void *)v22);
}

uint64_t sub_1C50B5588()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Pop up a window to show edge bundle graphs";
  *((_QWORD *)&v1 + 1) = 42;
  sub_1C61B2D38((uint64_t)&unk_1ED7F7468, "view-edge-bundles", &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7468, &dword_1C475E000);
}

void llvm::initializeEHContGuardCatchretPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F7530);
  if (v1 != -1)
  {
    v4[0] = sub_1C50B5658;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F7530, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C50B5658(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Insert symbols at valid catchret targets for /guard:ehcont";
  *(_QWORD *)(v2 + 8) = 58;
  *(_QWORD *)(v2 + 16) = "EHContGuardCatchret";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F7528;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50B57D0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createEHContGuardCatchretPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C50B5710(v1);
}

uint64_t sub_1C50B5710(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7F7528) = &off_1E8142000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F7530);
  if (v3 != -1)
  {
    v7[0] = sub_1C50B5658;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F7530, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50B57D0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50B5710(v0);
}

void sub_1C50B57F8(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50B588C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50B5918()
{
  return "EH Cont Guard catchret targets";
}

uint64_t sub_1C50B5928(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  char v5;
  unint64_t EHCatchretSymbol;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;

  if (llvm::Module::getModuleFlag(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 2064), "ehcontguard", 0xBuLL))
    v3 = *(_BYTE *)(a2 + 634) == 0;
  else
    v3 = 1;
  if (v3 || (v4 = *(_QWORD *)(a2 + 328), v4 == a2 + 320))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (*(_BYTE *)(v4 + 188))
      {
        EHCatchretSymbol = llvm::MachineBasicBlock::getEHCatchretSymbol((llvm::MachineBasicBlock *)v4);
        v7 = EHCatchretSymbol;
        v9 = *(unint64_t **)(a2 + 496);
        v8 = *(_QWORD *)(a2 + 504);
        if ((unint64_t)v9 >= v8)
        {
          v11 = *(_QWORD **)(a2 + 488);
          v12 = v9 - v11;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            if (v15 >> 61)
              sub_1C4764EE4();
            v16 = (char *)operator new(8 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = (unint64_t *)&v16[8 * v12];
          *v17 = v7;
          v10 = v17 + 1;
          if (v9 != v11)
          {
            do
            {
              v18 = *--v9;
              *--v17 = v18;
            }
            while (v9 != v11);
            v9 = *(unint64_t **)(a2 + 488);
          }
          *(_QWORD *)(a2 + 488) = v17;
          *(_QWORD *)(a2 + 496) = v10;
          *(_QWORD *)(a2 + 504) = &v16[8 * v15];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = EHCatchretSymbol;
          v10 = v9 + 1;
        }
        *(_QWORD *)(a2 + 496) = v10;
        v5 = 1;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2 + 320);
  }
  return v5 & 1;
}

uint64_t llvm::ExecutionDomainFix::regIndices(llvm::ExecutionDomainFix *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 65) + 24 * a2);
}

double llvm::ExecutionDomainFix::alloc(llvm::ExecutionDomainFix *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  double result;

  v4 = *((unsigned int *)this + 88);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 43) + 8 * v4 - 8);
    *((_DWORD *)this + 88) = v4 - 1;
    if (a2 < 0)
      return result;
  }
  else
  {
    v5 = sub_1C484358C((uint64_t)this + 248, 96, 3);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = v5 + 32;
    *(_QWORD *)&result = 0x800000000;
    *(_QWORD *)(v5 + 24) = 0x800000000;
    if (a2 < 0)
      return result;
  }
  *(_DWORD *)(v5 + 4) |= 1 << a2;
  return result;
}

uint64_t llvm::ExecutionDomainFix::release(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = result + 344;
    v5 = result + 360;
    do
    {
      if ((*(_DWORD *)v2)-- != 1)
        break;
      v7 = *(_DWORD *)(v2 + 4);
      if (v7 && *(_DWORD *)(v2 + 24))
        result = llvm::ExecutionDomainFix::collapse(v3, v2, __clz(__rbit32(v7)));
      v8 = *(_QWORD *)(v2 + 8);
      *(_DWORD *)(v2 + 4) = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      v9 = *(unsigned int *)(v3 + 352);
      if (v9 >= *(unsigned int *)(v3 + 356))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v5, v9 + 1, 8);
        v9 = *(unsigned int *)(v3 + 352);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 344) + 8 * v9) = v2;
      ++*(_DWORD *)(v3 + 352);
      v2 = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t llvm::ExecutionDomainFix::collapse(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int j;
  _DWORD *v11;

  v5 = this;
  for (i = *(_DWORD *)(a2 + 24); i; i = *(_DWORD *)(a2 + 24))
  {
    v7 = *(_QWORD *)(v5 + 504);
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i - 8);
    *(_DWORD *)(a2 + 24) = i - 1;
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 1024))(v7, v8, a3);
  }
  *(_DWORD *)(a2 + 4) = 1 << a3;
  if (*(_QWORD *)(v5 + 552) != *(_QWORD *)(v5 + 560) && *(_DWORD *)a2 >= 2u)
  {
    v9 = *(_DWORD *)(v5 + 544);
    if (v9)
    {
      for (j = 0; j != v9; ++j)
      {
        if (*(_QWORD *)(*(_QWORD *)(v5 + 552) + 8 * j) == a2)
        {
          llvm::ExecutionDomainFix::alloc((llvm::ExecutionDomainFix *)v5, a3);
          this = llvm::ExecutionDomainFix::setLiveReg(v5, j, v11);
          v9 = *(_DWORD *)(v5 + 544);
        }
      }
    }
  }
  return this;
}

_DWORD *llvm::ExecutionDomainFix::resolve(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v3 = *a2;
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return (_DWORD *)v3;
  do
  {
    v5 = (_DWORD *)v4;
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  ++*v5;
  llvm::ExecutionDomainFix::release(a1, v3);
  *a2 = (uint64_t)v5;
  return v5;
}

uint64_t llvm::ExecutionDomainFix::setLiveReg(uint64_t result, int a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v6;

  v4 = *(_DWORD **)(*(_QWORD *)(result + 552) + 8 * a2);
  if (v4 != a3)
  {
    v6 = result;
    if (v4)
      result = llvm::ExecutionDomainFix::release(result);
    if (a3)
      ++*a3;
    *(_QWORD *)(*(_QWORD *)(v6 + 552) + 8 * a2) = a3;
  }
  return result;
}

uint64_t llvm::ExecutionDomainFix::kill(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(this + 552) + 8 * a2);
  if (v3)
  {
    v4 = this;
    v5 = a2;
    this = llvm::ExecutionDomainFix::release(this, v3);
    *(_QWORD *)(*(_QWORD *)(v4 + 552) + 8 * v5) = 0;
  }
  return this;
}

void llvm::ExecutionDomainFix::force(llvm::ExecutionDomainFix *this, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v4 = a2;
  v5 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * a2);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24))
    {
      v6 = *(_DWORD *)(v5 + 4);
      v7 = 1 << a3;
      if ((v6 & (1 << a3)) != 0)
      {
        llvm::ExecutionDomainFix::collapse((uint64_t)this, v5, a3);
      }
      else
      {
        llvm::ExecutionDomainFix::collapse((uint64_t)this, v5, __clz(__rbit32(v6)));
        v11 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v4);
        *(_DWORD *)(v11 + 4) |= v7;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 4) |= 1 << a3;
    }
  }
  else
  {
    llvm::ExecutionDomainFix::alloc(this, a3);
    v9 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v4);
    if ((_DWORD *)v9 != v8)
    {
      v10 = v8;
      if (v9)
        llvm::ExecutionDomainFix::release((uint64_t)this, v9);
      if (v10)
        ++*v10;
      *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v4) = v10;
    }
  }
}

uint64_t llvm::ExecutionDomainFix::merge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int i;
  uint64_t v13;
  uint64_t v14;
  void *__src;

  if (a2 == a3)
    return 1;
  v5 = *(_DWORD *)(a2 + 4) & *(_DWORD *)(a3 + 4);
  if (!v5)
    return 0;
  *(_DWORD *)(a2 + 4) = v5;
  v7 = *(const void **)(a3 + 16);
  v8 = *(unsigned int *)(a3 + 24);
  v9 = *(unsigned int *)(a2 + 24);
  if (v9 + v8 > (unint64_t)*(unsigned int *)(a2 + 28))
  {
    __src = *(void **)(a3 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, a2 + 32, v9 + v8, 8);
    v7 = __src;
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    if (!(_DWORD)v8)
      goto LABEL_5;
LABEL_18:
    memcpy((void *)(*(_QWORD *)(a2 + 16) + 8 * v9), v7, 8 * v8);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    goto LABEL_5;
  }
  if ((_DWORD)v8)
    goto LABEL_18;
LABEL_5:
  *(_DWORD *)(a2 + 24) = v9 + v8;
  *(_DWORD *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  v10 = *(_DWORD *)a2 + 1;
  *(_DWORD *)a2 = v10;
  *(_QWORD *)(a3 + 8) = a2;
  v11 = *(_DWORD *)(a1 + 544);
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = *(_QWORD *)(a1 + 552);
      if (*(_QWORD *)(v13 + 8 * i) == a3)
      {
        v14 = *(_QWORD *)(v13 + 8 * (int)i);
        if (v14 != a2)
        {
          if (v14)
          {
            llvm::ExecutionDomainFix::release(a1, v14);
            v10 = *(_DWORD *)a2;
            v13 = *(_QWORD *)(a1 + 552);
            v11 = *(_DWORD *)(a1 + 544);
          }
          *(_DWORD *)a2 = ++v10;
          *(_QWORD *)(v13 + 8 * (int)i) = a2;
        }
      }
    }
  }
  return 1;
}

void llvm::ExecutionDomainFix::enterBasicBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t i;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *a2;
  v4 = (uint64_t *)(a1 + 552);
  v5 = *(char **)(a1 + 552);
  if (v5 == *(char **)(a1 + 560))
  {
    v6 = *(unsigned int *)(a1 + 544);
    v7 = *(_QWORD *)(a1 + 568);
    if (v6 <= (v7 - (uint64_t)v5) >> 3)
    {
      if (!(_DWORD)v6)
      {
LABEL_15:
        *(_QWORD *)(a1 + 560) = &v5[8 * v6];
        goto LABEL_16;
      }
      v11 = 8 * v6;
      v10 = *(char **)(a1 + 552);
    }
    else
    {
      if (v5)
      {
        *(_QWORD *)(a1 + 560) = v5;
        operator delete(v5);
        v7 = 0;
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      v8 = v7 >> 2;
      if (v7 >> 2 <= v6)
        v8 = v6;
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
        v9 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v9 = v8;
      if (v9 >> 61)
        abort();
      v10 = (char *)operator new(8 * v9);
      v5 = v10;
      *(_QWORD *)(a1 + 552) = v10;
      *(_QWORD *)(a1 + 568) = &v10[8 * v9];
      v11 = 8 * v6;
    }
    bzero(v10, v11);
    goto LABEL_15;
  }
LABEL_16:
  v12 = *(_QWORD *)(v3 + 64);
  for (i = *(_QWORD *)(v3 + 72); v12 != i; v12 += 8)
  {
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 576) + 24 * *(int *)(*(_QWORD *)v12 + 24));
    if (*v14 != v14[1] && *(_DWORD *)(a1 + 544))
    {
      v15 = 0;
      do
      {
        v16 = v15;
        v17 = llvm::ExecutionDomainFix::resolve(a1, (uint64_t *)(*v14 + 8 * v15));
        if (v17)
        {
          v18 = v17;
          v19 = *v4;
          v20 = *(_QWORD *)(*v4 + 8 * v16);
          if (v20)
          {
            if (*(_DWORD *)(v20 + 24))
            {
              if (v17[6])
                llvm::ExecutionDomainFix::merge(a1, v20, (uint64_t)v17);
              else
                llvm::ExecutionDomainFix::force((llvm::ExecutionDomainFix *)a1, v16, __clz(__rbit32(v17[1])));
            }
            else if (v17[6])
            {
              v22 = __clz(__rbit32(*(_DWORD *)(v20 + 4)));
              if (((v17[1] >> v22) & 1) != 0)
                llvm::ExecutionDomainFix::collapse(a1, (uint64_t)v17, v22);
            }
          }
          else
          {
            v21 = *(_QWORD *)(v19 + 8 * (int)v16);
            if ((_DWORD *)v21 != v17)
            {
              if (v21)
              {
                llvm::ExecutionDomainFix::release(a1, v21);
                v19 = *(_QWORD *)(a1 + 552);
              }
              ++*v18;
              *(_QWORD *)(v19 + 8 * (int)v16) = v18;
            }
          }
        }
        v15 = v16 + 1;
      }
      while ((_DWORD)v16 + 1 != *(_DWORD *)(a1 + 544));
    }
  }
}

char *llvm::ExecutionDomainFix::leaveBasicBlock(char *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const void **v9;
  void **v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  char *v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  char *v29;

  v2 = (uint64_t)result;
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 24);
  v4 = *((_QWORD *)result + 72);
  v5 = (uint64_t **)(v4 + 24 * v3);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      v8 = *v6++;
      result = (char *)llvm::ExecutionDomainFix::release(v2, v8);
    }
    while (v6 != v7);
    v4 = *(_QWORD *)(v2 + 576);
  }
  v9 = (const void **)(v2 + 552);
  v10 = (void **)(v4 + 24 * v3);
  v11 = *(char **)(v2 + 552);
  if (v10 != (void **)(v2 + 552))
  {
    v12 = *(_BYTE **)(v2 + 560);
    v13 = v12 - v11;
    v14 = (v12 - v11) >> 3;
    v15 = v4 + 24 * v3;
    v18 = *(_QWORD *)(v15 + 16);
    v17 = (_QWORD *)(v15 + 16);
    v16 = v18;
    v19 = (char *)*v10;
    if (v14 <= (v18 - (uint64_t)*v10) >> 3)
    {
      v24 = v4 + 24 * v3;
      v26 = *(char **)(v24 + 8);
      v23 = (void **)(v24 + 8);
      v25 = v26;
      v27 = v26 - v19;
      v28 = (v26 - v19) >> 3;
      if (v28 >= v14)
      {
        if (v12 != v11)
        {
          result = (char *)memmove(*v10, *(const void **)(v2 + 552), v12 - v11);
          v9 = (const void **)(v2 + 552);
        }
      }
      else
      {
        v29 = &v11[8 * v28];
        if (v25 != v19)
        {
          result = (char *)memmove(*v10, *(const void **)(v2 + 552), v27);
          v19 = (char *)*v23;
        }
        v13 = v12 - v29;
        if (v12 != v29)
          result = (char *)memmove(v19, v29, v12 - v29);
        v9 = (const void **)(v2 + 552);
      }
    }
    else
    {
      if (v19)
      {
        *(_QWORD *)(v4 + 24 * v3 + 8) = v19;
        operator delete(v19);
        v16 = 0;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
      }
      if (v13 < 0)
        goto LABEL_28;
      v20 = v16 >> 2;
      if (v16 >> 2 <= v14)
        v20 = (v12 - v11) >> 3;
      v21 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v20;
      if (v21 >> 61)
LABEL_28:
        abort();
      result = (char *)operator new(8 * v21);
      v19 = result;
      *v10 = result;
      v22 = v4 + 24 * v3;
      *(_QWORD *)(v22 + 8) = result;
      v23 = (void **)(v22 + 8);
      *v17 = &result[8 * v21];
      if (v12 != v11)
        result = (char *)memcpy(result, v11, v12 - v11);
      v9 = (const void **)(v2 + 552);
    }
    *v23 = &v19[v13];
    v11 = (char *)*v9;
  }
  *(_QWORD *)(v2 + 560) = v11;
  return result;
}

BOOL llvm::ExecutionDomainFix::visitInstr(llvm::ExecutionDomainFix *this, llvm::MachineInstr *a2)
{
  unsigned int v4;
  int8x8_t v5;
  int v6;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 63) + 1016))(*((_QWORD *)this + 63));
  v6 = (unsigned __int16)v4;
  if ((_WORD)v4)
  {
    if (v4 >= 0x10000)
      llvm::ExecutionDomainFix::visitSoftInstr(this, a2, HIWORD(v4), v5);
    else
      llvm::ExecutionDomainFix::visitHardInstr(this, a2, (unsigned __int16)v4);
  }
  return v6 == 0;
}

void llvm::ExecutionDomainFix::visitSoftInstr(llvm::ExecutionDomainFix *this, llvm::MachineInstr *a2, unsigned int a3, int8x8_t a4)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint8x8_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int ReachingDef;
  _DWORD *v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[16];
  void *v69;
  uint64_t v70;
  _QWORD v71[3];

  v71[2] = *MEMORY[0x1E0C80C00];
  v69 = v71;
  v70 = 0x400000000;
  if (*((_QWORD *)this + 69) != *((_QWORD *)this + 70))
  {
    v7 = *((_QWORD *)a2 + 2);
    v8 = *(unsigned __int8 *)(v7 + 4);
    v9 = *(unsigned __int16 *)(v7 + 2);
    if (v8 != v9)
    {
      do
      {
        v29 = *((_QWORD *)a2 + 4);
        v30 = v8;
        if (!*(_BYTE *)(v29 + 32 * v8))
        {
          v31 = *((_QWORD *)this + 65) + 24 * *(unsigned int *)(v29 + 32 * v8 + 4);
          v32 = *(unsigned int *)(v31 + 8);
          if ((_DWORD)v32)
          {
            v33 = *(int **)v31;
            v34 = 4 * v32;
            do
            {
              v35 = *v33;
              v36 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * *v33);
              if (v36)
              {
                v37 = *(_DWORD *)(v36 + 4) & a3;
                if (*(_DWORD *)(v36 + 24))
                {
                  if (v37)
                  {
                    v38 = v70;
                    if (v70 >= (unint64_t)HIDWORD(v70))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v70 + 1, 4);
                      v38 = v70;
                    }
                    *((_DWORD *)v69 + v38) = v35;
                    LODWORD(v70) = v70 + 1;
                  }
                  else
                  {
                    llvm::ExecutionDomainFix::release((uint64_t)this, v36);
                    *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v35) = 0;
                  }
                }
                else if (v37)
                {
                  a3 &= *(_DWORD *)(v36 + 4);
                }
              }
              ++v33;
              v34 -= 4;
            }
            while (v34);
          }
        }
        v8 = v30 + 1;
      }
      while (v30 + 1 != v9);
    }
  }
  a4.i32[0] = a3;
  v10 = (uint8x8_t)vcnt_s8(a4);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.i32[0] == 1)
  {
    v11 = __clz(__rbit32(a3));
    (*(void (**)(_QWORD, llvm::MachineInstr *, uint64_t))(**((_QWORD **)this + 63) + 1024))(*((_QWORD *)this + 63), a2, v11);
    llvm::ExecutionDomainFix::visitHardInstr(this, a2, v11);
    goto LABEL_87;
  }
  v66 = v68;
  v67 = 0x400000000;
  if (!(_DWORD)v70)
    goto LABEL_66;
  v12 = (char *)v69;
  v65 = (char *)v69 + 4 * v70;
  v64 = a3;
  do
  {
    v13 = *(unsigned int *)v12;
    v14 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * (int)v13);
    if ((*(_DWORD *)(v14 + 4) & a3) != 0)
    {
      ReachingDef = llvm::ReachingDefAnalysis::getReachingDef(*((_QWORD *)this + 86), (uint64_t)a2, *(unsigned __int16 *)(***((_QWORD ***)this + 61) + 2 * v13));
      v16 = v66;
      v17 = v67;
      if ((_DWORD)v67)
      {
        v18 = ReachingDef;
        v19 = v66;
        do
        {
          v20 = (unsigned int *)&v19[4 * (v17 >> 1)];
          v22 = *v20;
          v21 = v20 + 1;
          v23 = llvm::ReachingDefAnalysis::getReachingDef(*((_QWORD *)this + 86), (uint64_t)a2, *(unsigned __int16 *)(***((_QWORD ***)this + 61) + 2 * v22));
          if (v23 <= v18)
            v17 += ~(v17 >> 1);
          else
            v17 >>= 1;
          if (v23 <= v18)
            v19 = v21;
        }
        while (v17);
        v16 = v66;
        v24 = v67;
        a3 = v64;
      }
      else
      {
        v24 = 0;
        v19 = v66;
      }
      if (&v16[v24] == (_DWORD *)v19)
      {
        if (v24 >= HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v24 + 1, 4);
          v16 = v66;
          v24 = v67;
        }
        v16[v24] = v13;
        LODWORD(v67) = v67 + 1;
      }
      else
      {
        if (v24 >= HIDWORD(v67))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, (uint64_t)v68, v24 + 1, 4);
          v25 = v66;
          v24 = v67;
        }
        else
        {
          v25 = v16;
        }
        v26 = &v25[(v19 - (_BYTE *)v16) >> 2];
        v25[v24] = v25[v24 - 1];
        v27 = v67;
        v28 = (uint64_t)&v25[v67 - 1];
        if ((_DWORD *)v28 != v26)
        {
          memmove(v26 + 1, v26, v28 - (_QWORD)v26);
          v27 = v67;
        }
        LODWORD(v67) = v27 + 1;
        *v26 = v13;
      }
    }
    else
    {
      llvm::ExecutionDomainFix::release((uint64_t)this, v14);
      *(_QWORD *)(*((_QWORD *)this + 69) + 8 * (int)v13) = 0;
    }
    v12 += 4;
  }
  while (v12 != v65);
  v39 = v67;
  if ((_DWORD)v67)
  {
    v40 = 0;
    do
    {
      v41 = v39;
      while (v40)
      {
        v42 = *((int *)v66 + v41 - 1);
        LODWORD(v67) = v41 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v42);
        if (v43 != v40
          && !*(_QWORD *)(v43 + 8)
          && (llvm::ExecutionDomainFix::merge((uint64_t)this, v40, *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v42)) & 1) == 0
          && (_DWORD)v70)
        {
          v44 = (int *)v69;
          v45 = 4 * v70;
          do
          {
            v46 = *v44;
            v47 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v46);
            if (v47 == v43 && v47 != 0)
            {
              llvm::ExecutionDomainFix::release((uint64_t)this, v43);
              *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v46) = 0;
            }
            ++v44;
            v45 -= 4;
          }
          while (v45);
        }
        v41 = v67;
        if (!(_DWORD)v67)
          goto LABEL_67;
      }
      v49 = *((int *)v66 + --v39);
      LODWORD(v67) = v39;
      v40 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v49);
      *(_DWORD *)(v40 + 4) &= a3;
    }
    while ((_DWORD)v39);
  }
  else
  {
LABEL_66:
    llvm::ExecutionDomainFix::alloc(this, -1);
    v40 = v50;
    *(_DWORD *)(v50 + 4) = a3;
  }
LABEL_67:
  v51 = *(unsigned int *)(v40 + 24);
  if (v51 >= *(_DWORD *)(v40 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v40 + 16, v40 + 32, v51 + 1, 8);
    LODWORD(v51) = *(_DWORD *)(v40 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * v51) = a2;
  ++*(_DWORD *)(v40 + 24);
  v52 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v52)
  {
    v53 = *((_QWORD *)a2 + 4);
    v54 = v53 + 32 * v52;
    while (1)
    {
      if (!*(_BYTE *)v53)
      {
        v55 = *((_QWORD *)this + 65) + 24 * *(unsigned int *)(v53 + 4);
        v56 = *(unsigned int *)(v55 + 8);
        if ((_DWORD)v56)
          break;
      }
LABEL_84:
      v53 += 32;
      if (v53 == v54)
        goto LABEL_85;
    }
    v57 = *(int **)v55;
    v58 = 4 * v56;
    while (1)
    {
      v59 = *v57;
      v60 = *((_QWORD *)this + 69);
      v61 = *(_QWORD *)(v60 + 8 * v59);
      if (v61)
      {
        if (v61 == v40 || (*(_DWORD *)v53 & 0x1000000) == 0)
          goto LABEL_83;
        llvm::ExecutionDomainFix::release((uint64_t)this, v61);
        *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v59) = 0;
        v60 = *((_QWORD *)this + 69);
        v63 = *(_QWORD *)(v60 + 8 * v59);
        if (v63 == v40)
          goto LABEL_83;
        if (v63)
        {
          llvm::ExecutionDomainFix::release((uint64_t)this, v63);
          v60 = *((_QWORD *)this + 69);
        }
      }
      ++*(_DWORD *)v40;
      *(_QWORD *)(v60 + 8 * v59) = v40;
LABEL_83:
      ++v57;
      v58 -= 4;
      if (!v58)
        goto LABEL_84;
    }
  }
LABEL_85:
  if (v66 != v68)
    free(v66);
LABEL_87:
  if (v69 != v71)
    free(v69);
}

void llvm::ExecutionDomainFix::visitHardInstr(llvm::ExecutionDomainFix *this, llvm::MachineInstr *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *((_QWORD *)a2 + 2);
  v7 = *(unsigned __int8 *)(v6 + 4);
  v8 = *(unsigned __int16 *)(v6 + 2);
  if (v7 != v8)
  {
    do
    {
      v9 = *((_QWORD *)a2 + 4);
      v10 = v7;
      if (!*(_BYTE *)(v9 + 32 * v7))
      {
        v11 = *((_QWORD *)this + 65) + 24 * *(unsigned int *)(v9 + 32 * v7 + 4);
        v12 = *(unsigned int *)(v11 + 8);
        if ((_DWORD)v12)
        {
          v13 = *(int **)v11;
          v14 = 4 * v12;
          do
          {
            v15 = *v13++;
            llvm::ExecutionDomainFix::force(this, v15, a3);
            v14 -= 4;
          }
          while (v14);
        }
      }
      v7 = v10 + 1;
    }
    while (v10 + 1 != v8);
    v7 = *(unsigned __int8 *)(*((_QWORD *)a2 + 2) + 4);
  }
  if (v7)
  {
    v16 = 0;
    v17 = v7;
    do
    {
      v18 = *((_QWORD *)a2 + 4);
      if (!*(_BYTE *)(v18 + 32 * v16))
      {
        v19 = *((_QWORD *)this + 65) + 24 * *(unsigned int *)(v18 + 32 * v16 + 4);
        v20 = *(unsigned int *)(v19 + 8);
        if ((_DWORD)v20)
        {
          v21 = *(int **)v19;
          v22 = 4 * v20;
          do
          {
            v23 = *v21;
            v24 = *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v23);
            if (v24)
            {
              llvm::ExecutionDomainFix::release((uint64_t)this, v24);
              *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v23) = 0;
            }
            llvm::ExecutionDomainFix::force(this, v23, a3);
            ++v21;
            v22 -= 4;
          }
          while (v22);
        }
      }
      ++v16;
    }
    while (v16 != v17);
  }
}

uint64_t llvm::ExecutionDomainFix::processDefs(uint64_t this, llvm::MachineInstr *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = this;
  v6 = *((_QWORD *)a2 + 2);
  if ((*(_BYTE *)(v6 + 8) & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 10);
    if (!v7)
      return this;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 4);
    if (!v7)
      return this;
  }
  v8 = 0;
  v9 = v7;
  do
  {
    v10 = *((_QWORD *)a2 + 4);
    if ((*(_DWORD *)(v10 + 32 * v8) & 0x10000FF) == 0x1000000)
    {
      v11 = *(_QWORD *)(v5 + 520) + 24 * *(unsigned int *)(v10 + 32 * v8 + 4);
      v12 = *(unsigned int *)(v11 + 8);
      if ((_DWORD)v12)
      {
        v13 = *(int **)v11;
        v14 = 4 * v12;
        do
        {
          if (a3)
          {
            v15 = *v13;
            v16 = *(_QWORD *)(*(_QWORD *)(v5 + 552) + 8 * v15);
            if (v16)
            {
              this = llvm::ExecutionDomainFix::release(v5, v16);
              *(_QWORD *)(*(_QWORD *)(v5 + 552) + 8 * v15) = 0;
            }
          }
          ++v13;
          v14 -= 4;
        }
        while (v14);
      }
    }
    ++v8;
  }
  while (v8 != v9);
  return this;
}

char *llvm::ExecutionDomainFix::processBasicBlock(llvm::ExecutionDomainFix *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  _BOOL4 v6;

  llvm::ExecutionDomainFix::enterBasicBlock((uint64_t)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)a2 + 48;
  for (i = *(_QWORD *)(*(_QWORD *)a2 + 56); i != v4; i = *(_QWORD *)(i + 8))
  {
    if (**(unsigned __int16 **)(i + 16) - 13 >= 5)
    {
      if (*(_BYTE *)(a2 + 8))
        v6 = llvm::ExecutionDomainFix::visitInstr(a1, (llvm::MachineInstr *)i);
      else
        v6 = 0;
      llvm::ExecutionDomainFix::processDefs((uint64_t)a1, (llvm::MachineInstr *)i, v6);
    }
    if ((*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  return llvm::ExecutionDomainFix::leaveBasicBlock((char *)a1, a2);
}

uint64_t llvm::ExecutionDomainFix::runOnMachineFunction(llvm::ExecutionDomainFix *this, llvm::MachineFunction *a2)
{
  unsigned __int16 **v4;
  _QWORD *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  int v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _WORD *v57;
  int v58;
  unsigned __int16 v59;
  BOOL v60;
  int v61;
  unsigned int v62;
  unsigned __int16 *i;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  void *v71;
  unsigned int v72;
  uint64_t v73;
  void *v74[2];
  _QWORD v75[10];

  v75[8] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(this, *(const llvm::Function **)a2) & 1) == 0)
  {
    *((_QWORD *)this + 62) = a2;
    *((_QWORD *)this + 63) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
    *((_QWORD *)this + 64) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 62) + 16) + 176))(*(_QWORD *)(*((_QWORD *)this + 62) + 16));
    *((_QWORD *)this + 70) = *((_QWORD *)this + 69);
    v4 = (unsigned __int16 **)**((_QWORD **)this + 61);
    if (*((_WORD *)v4 + 10))
    {
      v5 = (_QWORD *)*((_QWORD *)a2 + 5);
      v6 = *v4;
      v7 = 2 * *((unsigned __int16 *)v4 + 10);
      while (!llvm::MachineRegisterInfo::isPhysRegUsed(v5, *v6, 0))
      {
        ++v6;
        v7 -= 2;
        if (!v7)
          return 0;
      }
      v70 = a2;
      v8 = (void **)**((_QWORD **)this + 1);
      do
      {
        v9 = *v8;
        v8 += 2;
      }
      while (v9 != &llvm::ReachingDefAnalysis::ID);
      *((_QWORD *)this + 86) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::ReachingDefAnalysis::ID);
      v10 = (char *)*((_QWORD *)this + 65);
      if (v10 == *((char **)this + 66))
      {
        v19 = *(unsigned int *)(*((_QWORD *)this + 64) + 16);
        if ((_DWORD)v19)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 67) - (_QWORD)v10) >> 3);
          if (v20 >= v19)
          {
            v47 = 24 * v19;
            v48 = v10 + 16;
            do
            {
              *((_QWORD *)v48 - 2) = v48;
              *((_QWORD *)v48 - 1) = 0x100000000;
              v48 += 24;
              v47 -= 24;
            }
            while (v47);
            *((_QWORD *)this + 66) = &v10[24 * v19];
          }
          else
          {
            v21 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)this + 67) - (_QWORD)v10) >> 3);
            if (v21 <= v19)
              v21 = *(unsigned int *)(*((_QWORD *)this + 64) + 16);
            if (v20 >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            if (v22 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v23 = (char *)operator new(24 * v22);
            v24 = 0;
            do
            {
              v25 = &v23[v24];
              *(_QWORD *)v25 = &v23[v24 + 16];
              *((_QWORD *)v25 + 1) = 0x100000000;
              v24 += 24;
            }
            while (24 * v19 != v24);
            *((_QWORD *)this + 65) = v23;
            *((_QWORD *)this + 66) = &v23[24 * v19];
            *((_QWORD *)this + 67) = &v23[24 * v22];
            if (v10)
              operator delete(v10);
          }
        }
        v49 = **((_QWORD **)this + 61);
        v50 = *(unsigned __int16 *)(v49 + 20);
        if (*(_WORD *)(v49 + 20))
        {
          v51 = 0;
          v69 = *(unsigned __int16 *)(v49 + 20);
          do
          {
            v52 = *((_QWORD *)this + 64);
            if (v52)
              v53 = (_QWORD *)(v52 + 8);
            else
              v53 = 0;
            v54 = ((unint64_t)*(unsigned int *)(*v53
                                                     + 24
                                                     * *(unsigned __int16 *)(***((_QWORD ***)this + 61) + 2 * v51)
                                                     + 16) >> 3) & 0x1FFFFFFE;
            v56 = v53[5];
            v55 = v53[6];
            v57 = (_WORD *)(v55 + v54 + 2);
            v58 = *(unsigned __int16 *)(v55 + v54)
                + (*(_DWORD *)(*v53 + 24 * *(unsigned __int16 *)(***((_QWORD ***)this + 61) + 2 * v51) + 16) & 0xF)
                * *(unsigned __int16 *)(***((_QWORD ***)this + 61) + 2 * v51);
            do
            {
              v59 = *(_WORD *)(v56 + 4 * (unsigned __int16)v58);
              if (v59)
                v60 = v55 == 0;
              else
                v60 = 1;
              if (!v60)
              {
                v62 = *(unsigned __int16 *)(v56 + 4 * (unsigned __int16)v58 + 2) << 16;
                for (i = (unsigned __int16 *)(v55
                                             + 2
                                             * *(unsigned int *)(*v53
                                                               + 24
                                                               * *(unsigned __int16 *)(v56 + 4 * (unsigned __int16)v58)
                                                               + 8));
                      ;
                      i = (unsigned __int16 *)(v53[6] + 2 * *(unsigned int *)(*v53 + 24 * v67 + 8)))
                {
                  do
                  {
                    v64 = *((_QWORD *)this + 65) + 24 * v59;
                    v65 = *(unsigned int *)(v64 + 8);
                    if (v65 >= *(unsigned int *)(v64 + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(*((_QWORD *)this + 65) + 24 * v59, v64 + 16, v65 + 1, 4);
                      v50 = v69;
                      v65 = *(unsigned int *)(v64 + 8);
                    }
                    *(_DWORD *)(*(_QWORD *)v64 + 4 * v65) = v51;
                    ++*(_DWORD *)(v64 + 8);
                    v66 = *i++;
                    v59 += v66;
                  }
                  while (v66);
                  v67 = HIWORD(v62);
                  if (HIWORD(v62))
                  {
                    v62 >>= 16;
                  }
                  else
                  {
                    if (!*v57)
                      goto LABEL_80;
                    v58 += (unsigned __int16)*v57++;
                    v68 = (unsigned __int16 *)(v53[5] + 4 * (unsigned __int16)v58);
                    v67 = *v68;
                    v62 = v68[1] << 16;
                  }
                  v59 = v67;
                }
              }
              v61 = (unsigned __int16)*v57++;
              v58 += v61;
            }
            while (v61);
LABEL_80:
            ++v51;
          }
          while (v51 != v50);
        }
      }
      v11 = *((_QWORD *)v70 + 14) - *((_QWORD *)v70 + 13);
      v12 = (v11 >> 3);
      v13 = *((unsigned int *)this + 146);
      if (v12 != v13)
      {
        v14 = (char **)((char *)this + 576);
        if (v12 >= v13)
        {
          if (v12 > *((unsigned int *)this + 147))
          {
            v74[0] = 0;
            v26 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)this + 576, (v11 >> 3), 24, (unint64_t *)v74);
            v27 = (char *)*((_QWORD *)this + 72);
            v28 = *((unsigned int *)this + 146);
            if ((_DWORD)v28)
            {
              v29 = &v27[24 * v28];
              v30 = v26;
              do
              {
                *v30 = 0;
                v30[1] = 0;
                v30[2] = 0;
                *(_OWORD *)v30 = *(_OWORD *)v27;
                v30[2] = *((_QWORD *)v27 + 2);
                *(_QWORD *)v27 = 0;
                *((_QWORD *)v27 + 1) = 0;
                *((_QWORD *)v27 + 2) = 0;
                v27 += 24;
                v30 += 3;
              }
              while (v27 != v29);
              v31 = *v14;
              v32 = 24 * v28;
              do
              {
                v33 = *(void **)&v31[v32 - 24];
                if (v33)
                {
                  *(_QWORD *)&v31[v32 - 16] = v33;
                  operator delete(v33);
                }
                v32 -= 24;
              }
              while (v32);
              v27 = *v14;
            }
            v34 = (int)v74[0];
            if (v27 != (char *)this + 592)
              free(v27);
            *((_QWORD *)this + 72) = v26;
            *((_DWORD *)this + 147) = v34;
            v13 = *((unsigned int *)this + 146);
          }
          if (v12 != v13)
            bzero(&(*v14)[24 * v13], 24 * ((24 * (v12 - v13) - 24) / 0x18) + 24);
        }
        else
        {
          v15 = 3 * v13;
          v16 = (uint64_t)&(*v14)[8 * v15 - 24];
          v17 = 24 * v12 - 8 * v15;
          do
          {
            v18 = *(void **)v16;
            if (*(_QWORD *)v16)
            {
              *(_QWORD *)(v16 + 8) = v18;
              operator delete(v18);
            }
            v16 -= 24;
            v17 += 24;
          }
          while (v17);
        }
        *((_DWORD *)this + 146) = v11 >> 3;
      }
      v74[0] = v75;
      v74[1] = (void *)0x400000000;
      llvm::LoopTraversal::traverse((llvm::LoopTraversal *)v74, v70, (uint64_t)&v71);
      if (v72)
      {
        v35 = (char *)v71;
        v36 = 16 * v72;
        do
        {
          llvm::ExecutionDomainFix::processBasicBlock(this, (uint64_t)v35);
          v35 += 16;
          v36 -= 16;
        }
        while (v36);
      }
      v37 = *((_DWORD *)this + 146);
      if (v37)
      {
        v38 = (uint64_t **)*((_QWORD *)this + 72);
        v39 = &v38[3 * v37];
        do
        {
          v40 = *v38;
          v41 = v38[1];
          while (v40 != v41)
          {
            if (*v40)
              llvm::ExecutionDomainFix::release((uint64_t)this, *v40);
            ++v40;
          }
          v38 += 3;
        }
        while (v38 != v39);
        v42 = *((unsigned int *)this + 146);
        if ((_DWORD)v42)
        {
          v43 = *((_QWORD *)this + 72);
          v44 = 24 * v42;
          do
          {
            v45 = *(void **)(v43 + v44 - 24);
            if (v45)
            {
              *(_QWORD *)(v43 + v44 - 16) = v45;
              operator delete(v45);
            }
            v44 -= 24;
          }
          while (v44);
        }
      }
      *((_DWORD *)this + 146) = 0;
      *((_DWORD *)this + 88) = 0;
      sub_1C50B729C((uint64_t)this + 248);
      if (v71 != &v73)
        free(v71);
      if (v74[0] != v75)
        free(v74[0]);
    }
  }
  return 0;
}

uint64_t sub_1C50B729C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 96; i <= v8; i += 96)
      {
        v10 = *(void **)(i - 80);
        if ((void *)(i - 64) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 96; j <= v14; j += 96)
      {
        v16 = *(void **)(j - 80);
        if ((void *)(j - 64) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

void sub_1C50B73BC(uint64_t a1)
{
  sub_1C50B754C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50B73E0(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ReachingDefAnalysis::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

void sub_1C50B7420(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C50B754C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *(_QWORD *)a1 = &off_1E81420C0;
  v2 = *(char **)(a1 + 576);
  v3 = *(unsigned int *)(a1 + 584);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = *(void **)&v2[v4 - 24];
      if (v5)
      {
        *(_QWORD *)&v2[v4 - 16] = v5;
        operator delete(v5);
      }
      v4 -= 24;
    }
    while (v4);
    v2 = *(char **)(a1 + 576);
  }
  if (v2 != (char *)(a1 + 592))
    free(v2);
  v6 = *(void **)(a1 + 552);
  if (v6)
  {
    *(_QWORD *)(a1 + 560) = v6;
    operator delete(v6);
  }
  v7 = *(char **)(a1 + 520);
  if (v7)
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(void **)(a1 + 520);
    if (v8 != v7)
    {
      v10 = v8 - 8;
      do
      {
        v11 = (char *)*((_QWORD *)v10 - 2);
        if (v10 != v11)
          free(v11);
        v12 = v10 - 16;
        v10 -= 24;
      }
      while (v12 != v7);
      v9 = *(void **)(a1 + 520);
    }
    *(_QWORD *)(a1 + 528) = v7;
    operator delete(v9);
  }
  v13 = *(void **)(a1 + 344);
  if (v13 != (void *)(a1 + 360))
    free(v13);
  sub_1C50B729C(a1 + 248);
  sub_1C4926AE8(a1 + 248);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v14 = *(void **)(a1 + 176);
  if (v14 != (void *)(a1 + 192))
    free(v14);
  v15 = *(void **)(a1 + 104);
  if (v15 != (void *)(a1 + 120))
    free(v15);
  v16 = *(void **)(a1 + 32);
  if (v16 != (void *)(a1 + 48))
    free(v16);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

uint64_t sub_1C50B76A0(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLazyBlockFrequencyInfoPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Expand memcmp() to load/stores";
  *(_QWORD *)(v4 + 8) = 30;
  *(_QWORD *)(v4 + 16) = "expandmemcmp";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &unk_1ED7F7538;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C50B781C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C50B7754(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F7538;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8142180;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F7540);
  if (v3 != -1)
  {
    v7[0] = sub_1C50B76A0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F7540, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50B781C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50B7754(v0);
}

void sub_1C50B7848(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::AnalysisUsage *sub_1C50B786C(uint64_t a1, llvm::LazyBlockFrequencyInfoPass *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v3);
}

BOOL sub_1C50B78D8(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  uint64_t v2;
  uint64_t AnalysisPass;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  _BOOL8 v13;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ***v19;
  uint64_t v20;
  uint64_t ***v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Type *v27;
  llvm::DSOLocalEquivalent **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  int v38;
  uint64_t v39;
  const llvm::Instruction *v40;
  llvm::BasicBlock *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 shouldOptimizeForSize;
  int v49;
  char v50;
  unsigned int *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  llvm *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  _QWORD *v82;
  uint64_t isOnlyUsedInZeroEqualityComparison;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  BOOL v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int j;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  unsigned __int8 *v115;
  llvm::Instruction *v116;
  unint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  int v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  _QWORD *v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  llvm::Value *v131;
  char *v132;
  llvm::BasicBlock *v133;
  llvm::BasicBlock **v134;
  llvm::BasicBlock *v135;
  _DWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  llvm::Value *v139;
  _QWORD *v140;
  const llvm::APInt *v141;
  char *v142;
  char *v143;
  unsigned __int8 **v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  uint64_t v148;
  llvm::ConstantInt *v149;
  llvm::ValueHandleBase *v150;
  llvm::PHINode *v151;
  unint64_t v152;
  unint64_t v153;
  _DWORD *v154;
  int v155;
  unsigned int v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  llvm::ConstantInt **v160;
  llvm::Value **v161;
  llvm::Value *v162;
  llvm::BasicBlock *v163;
  llvm::BasicBlock *v164;
  _DWORD *v165;
  _DWORD *v166;
  uint64_t v167;
  llvm::Value *v168;
  _QWORD *v169;
  char *v170;
  char *v171;
  unsigned __int8 **v172;
  int v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  _QWORD *v177;
  int v178;
  _QWORD *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  llvm::Value *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unsigned __int8 **v189;
  int v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  llvm::Instruction *v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  llvm::Value *v204;
  char *v205;
  llvm::BasicBlock *v206;
  llvm::BasicBlock **v207;
  llvm::BasicBlock *v208;
  _DWORD *v209;
  _DWORD *v210;
  uint64_t v211;
  llvm::Value *v212;
  _QWORD *v213;
  const llvm::APInt *v214;
  char *v215;
  char *v216;
  unsigned __int8 **v217;
  int v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  uint64_t v221;
  llvm::ConstantInt *v222;
  llvm::ValueHandleBase *v223;
  _DWORD *v224;
  _DWORD *v225;
  int v226;
  _DWORD *v227;
  _DWORD *v228;
  int v229;
  BOOL v230;
  int v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  uint64_t v235;
  unsigned __int8 *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _DWORD *v247;
  _DWORD *v248;
  int v249;
  _DWORD *v250;
  _DWORD *v251;
  int v252;
  uint64_t k;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t *v256;
  char **v257;
  char *v258;
  uint64_t v259;
  void *v260;
  void **v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t **v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void **v272;
  llvm::ValueAsMetadata *v273;
  uint64_t v274;
  uint64_t *v275;
  _BYTE *v276;
  _BYTE *v277;
  uint64_t v278;
  int v279;
  _BYTE v280[16];
  _BYTE *v281;
  _BYTE *v282;
  uint64_t v283;
  int v284;
  _BYTE v285[16];
  uint64_t v286;
  int v287;
  unsigned __int8 *v288;
  unsigned int v289;
  void *v290;
  void *__src;
  unsigned int v292;
  _QWORD v293[2];
  int v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  void *v299;
  void *v300;
  uint64_t v301;
  char v302;
  int v303[2];
  uint64_t v304;
  llvm::PHINode *v305;
  llvm::PHINode *v306;
  unint64_t v307;
  unsigned int v308;
  uint64_t v309;
  unint64_t v310;
  void *__p;
  char *v312;
  char *v313;
  uint64_t v314;
  llvm::PHINode *v315;
  unsigned __int8 v316;
  _BYTE *v317;
  int v318[2];
  void *v319;
  unsigned int v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  void *__dst;
  uint64_t v327;
  _BYTE v328[128];
  uint64_t v329;
  void *v330;
  unsigned int v331;
  uint64_t v332;
  unsigned int v333;
  char v334;
  void *v335;
  uint64_t v336;
  _BYTE v337[128];
  char *v338;
  unint64_t v339;
  char *v340;
  unint64_t v341;
  __int16 v342;
  uint64_t v343;

  v2 = (uint64_t)a2;
  v343 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass)
    return 0;
  v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
  if (!v5)
    return 0;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 112) + 16))(*(_QWORD *)(v5 + 112), v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
  v7 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::TargetLibraryInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v304 = 0;
  *(_QWORD *)v303 = 0;
  LODWORD(v305) = 0;
  v307 = 0;
  v306 = 0;
  v308 = 0;
  v310 = 0;
  v309 = 0;
  LODWORD(__p) = 0;
  v10 = (unint64_t)&v290;
  llvm::TargetLibraryAnalysis::run(v9 + 32, v2, (uint64_t)&v290);
  *(_QWORD *)(v9 + 240) = v290;
  v264 = v2;
  v275 = (uint64_t *)(v9 + 240);
  if (*(_BYTE *)(v9 + 320))
  {
    if ((void **)(v9 + 240) == &v290)
    {
LABEL_21:
      *(_DWORD *)(v9 + 312) = v298;
      goto LABEL_22;
    }
    v11 = (void **)(v9 + 248);
    v10 = v292;
    v12 = *(unsigned int *)(v9 + 256);
    if (v12 >= v292)
    {
      if (v292)
        memmove(*v11, __src, 8 * v292);
      goto LABEL_20;
    }
    if (*(_DWORD *)(v9 + 260) < v292)
    {
      *(_DWORD *)(v9 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 248, v9 + 264, v10, 8);
    }
    else if ((_DWORD)v12)
    {
      memmove(*v11, __src, 8 * v12);
      goto LABEL_18;
    }
    v12 = 0;
LABEL_18:
    if (v12 != v292)
      memcpy((char *)*v11 + 8 * v12, (char *)__src + 8 * v12, 8 * v292 - 8 * v12);
LABEL_20:
    *(_DWORD *)(v9 + 256) = v10;
    v2 = v264;
    goto LABEL_21;
  }
  v260 = (void *)(v9 + 264);
  *(_QWORD *)(v9 + 248) = v9 + 264;
  v261 = (void **)(v9 + 248);
  *(_QWORD *)(v9 + 256) = 0x600000000;
  v10 = v292;
  if (v292 && v261 != &__src)
  {
    if (v292 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 248, v9 + 264, v292, 8);
      v262 = v292;
      if (!v292)
      {
LABEL_448:
        *(_DWORD *)(v9 + 256) = v10;
        goto LABEL_449;
      }
      v260 = *v261;
    }
    else
    {
      v262 = v292;
    }
    memcpy(v260, __src, 8 * v262);
    goto LABEL_448;
  }
LABEL_449:
  *(_DWORD *)(v9 + 312) = v298;
  *(_BYTE *)(v9 + 320) = 1;
LABEL_22:
  if (__src != v293)
    free(__src);
  MEMORY[0x1CAA32FB4](v309, 8);
  sub_1C4D8B440((uint64_t *)&v306);
  sub_1C4D8B52C((uint64_t *)v303);
  v15 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::TargetTransformInfoWrapperPass::ID);
  v17 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v290 = 0;
  __src = 0;
  v292 = 0;
  v293[0] = 0;
  v293[1] = 0;
  v294 = 0;
  v295 = 0;
  v296 = 0;
  v297 = 0;
  v18 = *(_QWORD *)(v17 + 56);
  if (!v18)
  {
    sub_1C485C2F0();
    goto LABEL_451;
  }
  v10 = (unint64_t)v293;
  (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v303, v18, v2);
  v19 = *(uint64_t ****)v303;
  v269 = v17;
  if (!*(_BYTE *)(v17 + 72))
  {
    *(_QWORD *)(v17 + 64) = *(_QWORD *)v303;
    *(_BYTE *)(v17 + 72) = 1;
    goto LABEL_30;
  }
  *(_QWORD *)v303 = 0;
  v20 = *(_QWORD *)(v17 + 64);
  *(_QWORD *)(v17 + 64) = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = *(uint64_t ****)v303;
    *(_QWORD *)v303 = 0;
    if (v21)
LABEL_451:
      ((void (*)(uint64_t ***))(*v21)[1])(v21);
  }
LABEL_30:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440((uint64_t *)v10);
  sub_1C4D8B52C((uint64_t *)&v290);
  v22 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v23 = *v22;
    v22 += 2;
  }
  while (v23 != &llvm::ProfileSummaryInfoWrapperPass::ID);
  v266 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v22 - 1) + 96))(*(v22 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  if (*(_QWORD *)(v266 + 8))
  {
    v257 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v258 = *v257;
      v257 += 2;
    }
    while (v258 != llvm::LazyBlockFrequencyInfoPass::ID);
    v259 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v257 - 1) + 96))(*(v257 - 1), llvm::LazyBlockFrequencyInfoPass::ID);
    v265 = (uint64_t **)sub_1C619C0A4(v259 + 32);
  }
  else
  {
    v265 = 0;
  }
  v24 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (v24)
  {
    v29 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v24 + 96))(v24, &llvm::DominatorTreeWrapperPass::ID);
    v30 = v29 + 32;
    if (!v29)
      v30 = 0;
    v286 = v30;
    LOBYTE(v290) = 0;
    v302 = 0;
    v31 = (uint64_t *)(v9 + 240);
    if (v29)
    {
      LOBYTE(v303[0]) = 1;
      sub_1C61DDBE0((uint64_t)&v290, &v286, (char *)v303);
    }
  }
  else
  {
    v286 = 0;
    LOBYTE(v290) = 0;
    v302 = 0;
    v31 = (uint64_t *)(v9 + 240);
  }
  v32 = *(_QWORD *)(v2 + 80);
  v271 = v2 + 72;
  if (v32 == v2 + 72)
    goto LABEL_418;
  v263 = 0;
  v267 = *(_QWORD *)(v2 + 40) + 272;
  do
  {
LABEL_42:
    v33 = v32 - 24;
    v274 = v32;
    if (!v32)
      v33 = 0;
    v34 = &v290;
    if (!v302)
      v34 = 0;
    v272 = v34;
    v35 = v33 + 40;
    for (i = *(_QWORD *)(v33 + 48); i != v35; i = *(_QWORD *)(i + 8))
    {
      v37 = i - 24;
      if (!i)
        v37 = 0;
      v38 = *(unsigned __int8 *)(v37 + 16);
      if (v38 == 84)
        v39 = v37;
      else
        v39 = 0;
      if (i)
      {
        if (v38 == 84)
        {
          v287 = 0;
          if (sub_1C4ECD910(v31, v39, &v287))
          {
            if (v287 == 321 || v287 == 168)
            {
              v41 = *(llvm::BasicBlock **)(v39 + 40);
              v42 = *(_QWORD *)(*((_QWORD *)v41 + 7) + 112);
              if (!v42 || (*(char *)(v42 + 13) & 0x80000000) == 0)
              {
                v43 = *(_QWORD *)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) + 64);
                if (v43 && *(_BYTE *)(v43 + 16) == 16)
                {
                  v45 = (unint64_t *)(v43 + 24);
                  if (*(_DWORD *)(v43 + 32) >= 0x41u)
                    v45 = (unint64_t *)*v45;
                  v46 = *v45;
                  if (*v45)
                  {
                    v273 = (llvm::ValueAsMetadata *)v39;
                    if (v287 != 168)
                    {
                      isOnlyUsedInZeroEqualityComparison = llvm::isOnlyUsedInZeroEqualityComparison((llvm *)v39, v40);
                      v84 = v39;
                      v47 = isOnlyUsedInZeroEqualityComparison;
                      v41 = *(llvm::BasicBlock **)(v84 + 40);
                      v42 = *(_QWORD *)(*((_QWORD *)v41 + 7) + 112);
                      if (v42)
                        goto LABEL_70;
                      goto LABEL_72;
                    }
                    v47 = 1;
                    if (!v42)
                      goto LABEL_72;
LABEL_70:
                    if ((*(_BYTE *)(v42 + 17) & 4) != 0 || *(char *)(v42 + 13) < 0)
                      shouldOptimizeForSize = 1;
                    else
LABEL_72:
                      shouldOptimizeForSize = llvm::shouldOptimizeForSize(v41, v266, v265);
                    (*(void (**)(uint64_t *__return_ptr, _QWORD, _BOOL8, uint64_t))(**(_QWORD **)(v269 + 64)
                                                                                           + 560))(&v329, *(_QWORD *)(v269 + 64), shouldOptimizeForSize, v47);
                    if (!(_DWORD)v329)
                    {
                      v50 = 0;
                      goto LABEL_384;
                    }
                    if (word_1ED7F7550)
                      v333 = dword_1ED7F75C8;
                    if (shouldOptimizeForSize)
                    {
                      if (word_1ED7F76D0)
                      {
                        v49 = dword_1ED7F7748;
                        goto LABEL_83;
                      }
                    }
                    else if (word_1ED7F7610)
                    {
                      v49 = dword_1ED7F7688;
LABEL_83:
                      LODWORD(v329) = v49;
                    }
                    v305 = 0;
                    v306 = 0;
                    v304 = 0;
                    *(_QWORD *)v303 = v273;
                    v307 = v46;
                    v308 = 0;
                    v309 = 0;
                    v310 = v333;
                    v312 = 0;
                    v313 = 0;
                    __p = 0;
                    v316 = v47;
                    v317 = (_BYTE *)v267;
                    *(_QWORD *)v318 = v272;
                    sub_1C4773D54((uint64_t)&v319, (uint64_t)v273, 0, 0, 0);
                    __dst = v328;
                    v327 = 0x800000000;
                    v51 = (unsigned int *)v330;
                    v52 = v331;
                    if (v331)
                    {
                      while (v46 < *v51)
                      {
                        ++v51;
                        if (!--v52)
                        {
                          v51 = (unsigned int *)((char *)v330 + 4 * v331);
                          break;
                        }
                      }
                    }
                    else
                    {
                      v52 = 0;
                    }
                    v308 = *v51;
                    v53 = v329;
                    v338 = (char *)&v340;
                    v339 = 0x800000000;
                    v270 = v35;
                    if (v52)
                    {
                      v54 = 0;
                      v55 = 0;
                      v56 = 0;
                      v268 = v46;
                      do
                      {
                        v57 = *v51;
                        if (v46 / v57 + v54 > v53)
                        {
                          v335 = v337;
                          v336 = 0x800000000;
                          v31 = v275;
                          goto LABEL_109;
                        }
                        if (v46 >= v57)
                        {
                          if (v46 / v57 <= 1)
                            v58 = 1;
                          else
                            v58 = v46 / v57;
                          do
                          {
                            if (v54 >= HIDWORD(v339))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v338, (uint64_t)&v340, v54 + 1, 16);
                              v54 = v339;
                            }
                            v59 = &v338[16 * v54];
                            *(_QWORD *)v59 = v57;
                            *((_QWORD *)v59 + 1) = v55;
                            v54 = v339 + 1;
                            LODWORD(v339) = v339 + 1;
                            v55 += v57;
                            --v58;
                          }
                          while (v58);
                          if (v57 > 1)
                            ++v56;
                          v46 %= v57;
                        }
                        if (!v46)
                          break;
                        ++v51;
                        --v52;
                      }
                      while (v52);
                      v335 = v337;
                      v336 = 0x800000000;
                      v31 = v275;
                      if (v54)
                        sub_1C4D72194((uint64_t)&v335, (uint64_t)&v338);
LABEL_109:
                      v46 = v268;
                    }
                    else
                    {
                      v56 = 0;
                      v335 = v337;
                      v336 = 0x800000000;
                      v31 = v275;
                    }
                    if (v338 != (char *)&v340)
                      free(v338);
                    sub_1C4D72194((uint64_t)&__dst, (uint64_t)&v335);
                    if (v335 != v337)
                      free(v335);
                    v309 = v56;
                    v60 = v327;
                    if (!v334)
                      goto LABEL_123;
                    if ((unint64_t)v327 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      if (v46 < 2 || (v61 = v308, v308 <= 1) || (v62 = v46 / v308, v63 = v62 * v308, v63 == v46))
                      {
                        v338 = (char *)&v340;
                        v339 = 0x800000000;
                        goto LABEL_120;
                      }
                      v338 = (char *)&v340;
                      v339 = 0x800000000;
                      if (v62 < v329)
                      {
                        if (v46 >= v308)
                        {
                          LODWORD(v85) = 0;
                          v87 = 0;
                          v88 = v62 <= 1 ? 1 : v46 / v308;
                          do
                          {
                            if (v85 >= HIDWORD(v339))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v338, (uint64_t)&v340, v85 + 1, 16);
                              LODWORD(v85) = v339;
                            }
                            v89 = &v338[16 * v85];
                            *(_QWORD *)v89 = v61;
                            *((_QWORD *)v89 + 1) = v87;
                            v85 = (v339 + 1);
                            LODWORD(v339) = v339 + 1;
                            v87 += v61;
                            --v88;
                          }
                          while (v88);
                          v86 = v46 - (v63 + v61) + v87;
                          if (v85 >= HIDWORD(v339))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v338, (uint64_t)&v340, v85 + 1, 16);
                            LODWORD(v85) = v339;
                          }
                          v31 = v275;
                        }
                        else
                        {
                          LODWORD(v85) = 0;
                          v86 = v46 - v308 - v63;
                        }
                        v90 = &v338[16 * v85];
                        *(_QWORD *)v90 = v61;
                        *((_QWORD *)v90 + 1) = v86;
                        v91 = __CFADD__((_DWORD)v339, 1);
                        v92 = (v339 + 1);
                        LODWORD(v339) = v339 + 1;
                        if (!v91)
                        {
                          v93 = v327;
                          if ((int)v327 - 1 >= v92)
                          {
                            if (v327 >= v92)
                            {
                              memmove(__dst, v338, 16 * v92);
                            }
                            else
                            {
                              if (HIDWORD(v327) < v92)
                              {
                                LODWORD(v327) = 0;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v328, v92, 16);
                                goto LABEL_391;
                              }
                              if ((_DWORD)v327)
                                memmove(__dst, v338, 16 * v327);
                              else
LABEL_391:
                                v93 = 0;
                              if (v93 != v339)
                                memcpy((char *)__dst + 16 * v93, &v338[16 * v93], 16 * v339 - 16 * v93);
                            }
                            LODWORD(v327) = v92;
                            v309 = 1;
                          }
                        }
                      }
LABEL_120:
                      if (v338 != (char *)&v340)
                        free(v338);
                      v60 = v327;
LABEL_123:
                      if (!v60)
                      {
                        v50 = 0;
                        goto LABEL_378;
                      }
                    }
                    if (v316)
                    {
                      v64 = v60 / v310;
                      if (v60 % v310)
                        v60 = (v64 + 1);
                      else
                        v60 = v64;
                    }
                    if (v60 != 1)
                    {
                      v65 = *(llvm **)(*(_QWORD *)v303 + 40);
                      v338 = "endblock";
                      v342 = 259;
                      v66 = sub_1C5EBD70C(v65, *(llvm::BasicBlock **)v303, *(llvm::Instruction **)v318, 0, 0, 0, (llvm::Twine *)&v338, 0);
                      v67 = 0;
                      v314 = v66;
                      v68 = *(_QWORD *)(v66 + 48);
                      if (v68)
                        v69 = v68 - 24;
                      else
                        v69 = 0;
                      v322 = *(char **)(v69 + 40);
                      v323 = v69 + 24;
                      v70 = *(char **)(v69 + 48);
                      v338 = v70;
                      if (v70)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v338, (unsigned __int8 *)v70, 2);
                        v67 = v338;
                      }
                      sub_1C4774EF4((uint64_t)&v319, 0, (uint64_t)v67);
                      if (v338)
                        llvm::MetadataTracking::untrack((uint64_t)&v338, (unsigned __int8 *)v338);
                      v71 = ****(_QWORD ****)v303 + 1960;
                      v338 = "phi.res";
                      v342 = 259;
                      v315 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v319, v71, 2, (uint64_t)&v338);
                      v72 = v314;
                      v73 = ***(_QWORD ****)v303;
                      v338 = "res_block";
                      v342 = 259;
                      v74 = *(_QWORD *)(v314 + 56);
                      v75 = operator new();
                      *(_QWORD *)v75 = *v73 + 1600;
                      *(_QWORD *)(v75 + 8) = 0;
                      v76 = *(_DWORD *)(v75 + 20) & 0xC0000000;
                      *(_QWORD *)(v75 + 24) = 0;
                      v77 = v75 + 24;
                      *(_DWORD *)(v75 + 16) = 22;
                      *(_DWORD *)(v75 + 20) = v76;
                      *(_QWORD *)(v75 + 32) = 0;
                      *(_QWORD *)(v75 + 40) = v75 + 40;
                      *(_QWORD *)(v75 + 48) = v75 + 40;
                      *(_QWORD *)(v75 + 56) = 0;
                      if (v74)
                      {
                        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v74 + 72, (_QWORD *)v75);
                        v79 = *(_QWORD *)(v72 + 24);
                        v78 = (uint64_t *)(v72 + 24);
                        *(_QWORD *)(v75 + 24) = v79;
                        *(_QWORD *)(v75 + 32) = v78;
                        *(_QWORD *)(v79 + 8) = v77;
                        *v78 = v77;
                      }
                      llvm::Value::setName((uint64_t ***)v75, (uint64_t)&v338);
                      v304 = v75;
                      if (!v316)
                      {
                        v80 = ***(_QWORD ****)v303;
                        v81 = 8 * v308;
                        LODWORD(v338) = 8 * v308;
                        if ((int)(8 * v308) <= 63)
                        {
                          if (v81 == 32)
                          {
                            v82 = (_QWORD *)(*v80 + 1960);
                            goto LABEL_166;
                          }
                          if (v81 == 16)
                          {
                            v82 = (_QWORD *)(*v80 + 1936);
                            goto LABEL_166;
                          }
                          if (v81 != 8)
                            goto LABEL_403;
                          v82 = (_QWORD *)(*v80 + 1912);
                        }
                        else
                        {
                          if (v81 == 64)
                          {
                            v82 = (_QWORD *)(*v80 + 1984);
                            goto LABEL_166;
                          }
                          if (v81 == 128)
                          {
                            v82 = (_QWORD *)(*v80 + 2008);
                            goto LABEL_166;
                          }
LABEL_403:
                          v247 = sub_1C5270984(*v80 + 2168, &v338);
                          v82 = (_QWORD *)*((_QWORD *)v247 + 1);
                          if (!v82)
                          {
                            v248 = v247;
                            v82 = (_QWORD *)sub_1C484358C(*v80 + 2040, 24, 3);
                            v249 = (int)v338;
                            *v82 = v80;
                            v82[2] = 0;
                            v82[1] = (v249 << 8) | 0xDu;
                            *((_QWORD *)v248 + 1) = v82;
                          }
                        }
LABEL_166:
                        v322 = (char *)v304;
                        v323 = v304 + 40;
                        v338 = "phi.src1";
                        v342 = 259;
                        v305 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v319, (uint64_t)v82, v309, (uint64_t)&v338);
                        v338 = "phi.src2";
                        v342 = 259;
                        v306 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v319, (uint64_t)v82, v309, (uint64_t)&v338);
                      }
                      for (j = 0; ; ++j)
                      {
                        v95 = v327;
                        if (v316)
                        {
                          if (v327 % v310)
                            v95 = v327 / v310 + 1;
                          else
                            v95 = v327 / v310;
                        }
                        if (j >= v95)
                          break;
                        v96 = v314;
                        v97 = ***(_QWORD ****)v303;
                        v338 = "loadbb";
                        v342 = 259;
                        v98 = *(_QWORD *)(v314 + 56);
                        v99 = operator new();
                        *(_QWORD *)v99 = *v97 + 1600;
                        *(_QWORD *)(v99 + 8) = 0;
                        v100 = *(_DWORD *)(v99 + 20) & 0xC0000000;
                        *(_QWORD *)(v99 + 24) = 0;
                        v101 = v99 + 24;
                        *(_DWORD *)(v99 + 16) = 22;
                        *(_DWORD *)(v99 + 20) = v100;
                        *(_QWORD *)(v99 + 32) = 0;
                        *(_QWORD *)(v99 + 40) = v99 + 40;
                        *(_QWORD *)(v99 + 48) = v99 + 40;
                        *(_QWORD *)(v99 + 56) = 0;
                        if (v98)
                        {
                          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v98 + 72, (_QWORD *)v99);
                          v103 = *(_QWORD *)(v96 + 24);
                          v102 = (uint64_t *)(v96 + 24);
                          *(_QWORD *)(v99 + 24) = v103;
                          *(_QWORD *)(v99 + 32) = v102;
                          *(_QWORD *)(v103 + 8) = v101;
                          *v102 = v101;
                        }
                        llvm::Value::setName((uint64_t ***)v99, (uint64_t)&v338);
                        v104 = v312;
                        if (v312 >= v313)
                        {
                          v106 = (char *)__p;
                          v107 = (v312 - (_BYTE *)__p) >> 3;
                          v108 = v107 + 1;
                          if ((unint64_t)(v107 + 1) >> 61)
                            abort();
                          v109 = v313 - (_BYTE *)__p;
                          if ((v313 - (_BYTE *)__p) >> 2 > v108)
                            v108 = v109 >> 2;
                          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
                            v110 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v110 = v108;
                          if (v110)
                          {
                            if (v110 >> 61)
                              sub_1C4764EE4();
                            v111 = (char *)operator new(8 * v110);
                          }
                          else
                          {
                            v111 = 0;
                          }
                          v112 = (uint64_t *)&v111[8 * v107];
                          *v112 = v99;
                          v105 = (char *)(v112 + 1);
                          if (v104 != v106)
                          {
                            do
                            {
                              v113 = *((_QWORD *)v104 - 1);
                              v104 -= 8;
                              *--v112 = v113;
                            }
                            while (v104 != v106);
                            v104 = (char *)__p;
                          }
                          __p = v112;
                          v312 = v105;
                          v313 = &v111[8 * v110];
                          if (v104)
                            operator delete(v104);
                        }
                        else
                        {
                          *(_QWORD *)v312 = v99;
                          v105 = v104 + 8;
                        }
                        v312 = v105;
                      }
                      v114 = (_QWORD *)*((_QWORD *)v65 + 5);
                      if (v114 == (_QWORD *)((char *)v65 + 40))
                      {
                        v116 = 0;
                      }
                      else
                      {
                        if (v114)
                          v115 = (unsigned __int8 *)(v114 - 3);
                        else
                          v115 = 0;
                        if (v115[16] - 29 >= 0xB)
                          v116 = 0;
                        else
                          v116 = (llvm::Instruction *)v115;
                      }
                      llvm::Instruction::setSuccessor(v116, 0, *(llvm::BasicBlock **)__p);
                      if (*(_QWORD *)v318)
                      {
                        v117 = *(_QWORD *)__p & 0xFFFFFFFFFFFFFFFBLL;
                        v338 = (char *)v65;
                        v339 = v117;
                        v340 = (char *)v65;
                        v341 = v314 | 4;
                        llvm::DomTreeUpdater::applyUpdates(*(uint64_t *)v318, (unint64_t *)&v338, 2);
                      }
                    }
                    v118 = *(unsigned __int8 **)(*(_QWORD *)v303 + 48);
                    v288 = v118;
                    if (v118)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v288, v118, 2);
                      v119 = v288;
                    }
                    else
                    {
                      v119 = 0;
                    }
                    sub_1C4774EF4((uint64_t)&v319, 0, (uint64_t)v119);
                    v31 = v275;
                    if (v288)
                      llvm::MetadataTracking::untrack((uint64_t)&v288, v288);
                    v120 = v327;
                    if (!v316)
                    {
                      if (v327 == 1)
                      {
                        v125 = ***(_QWORD ****)v303;
                        v126 = 8 * v307;
                        LODWORD(v338) = 8 * v307;
                        if (8 * (int)v307 <= 63)
                        {
                          if (v126 == 32)
                          {
                            v127 = (_QWORD *)(*v125 + 1960);
                            goto LABEL_366;
                          }
                          if (v126 == 16)
                          {
                            v127 = (_QWORD *)(*v125 + 1936);
                            goto LABEL_366;
                          }
                          if (v126 != 8)
                            goto LABEL_405;
                          v127 = (_QWORD *)(*v125 + 1912);
                        }
                        else
                        {
                          if (v126 == 64)
                          {
                            v127 = (_QWORD *)(*v125 + 1984);
                            goto LABEL_366;
                          }
                          if (v126 == 128)
                          {
                            v127 = (_QWORD *)(*v125 + 2008);
                            goto LABEL_366;
                          }
LABEL_405:
                          v250 = sub_1C5270984(*v125 + 2168, &v338);
                          v127 = (_QWORD *)*((_QWORD *)v250 + 1);
                          if (!v127)
                          {
                            v251 = v250;
                            v127 = (_QWORD *)sub_1C484358C(*v125 + 2040, 24, 3);
                            v252 = (int)v338;
                            *v127 = v125;
                            v127[2] = 0;
                            v127[1] = (v252 << 8) | 0xDu;
                            *((_QWORD *)v251 + 1) = v127;
                          }
                        }
LABEL_366:
                        if (*v317)
                          v230 = 1;
                        else
                          v230 = v307 == 1;
                        v231 = !v230;
                        if (v307 > 3)
                        {
                          v237 = sub_1C50BA604((const llvm::DataLayout **)v303, (uint64_t)v127, v231, (uint64_t)v127, 0);
                          v239 = v238;
                          v342 = 257;
                          v240 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v319, 34, v237, v238, (uint64_t)&v338);
                          v342 = 257;
                          v241 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v319, 36, v237, v239, (uint64_t)&v338);
                          v242 = *v324 + 1960;
                          v342 = 257;
                          v243 = sub_1C4773E38((uint64_t *)&v319, 39, v240, v242, (uint64_t)&v338);
                          v244 = *v324 + 1960;
                          v342 = 257;
                          v236 = sub_1C4773E38((uint64_t *)&v319, 39, v241, v244, (uint64_t)&v338);
                          v342 = 257;
                          v235 = (uint64_t)v243;
                        }
                        else
                        {
                          v232 = sub_1C50BA604((const llvm::DataLayout **)v303, (uint64_t)v127, v231, *v324 + 1960, 0);
                          v234 = v233;
                          v342 = 257;
                          v235 = v232;
                          v236 = v234;
                        }
                        v124 = sub_1C47733F8((uint64_t)&v319, v235, (uint64_t)v236, (uint64_t)&v338, 0, 0);
LABEL_376:
                        v151 = (llvm::PHINode *)v124;
                        goto LABEL_377;
                      }
                      v152 = 0;
                      while (2)
                      {
                        if (v152 >= v120)
                        {
                          sub_1C50B994C((uint64_t *)v303);
                          v151 = v315;
                          goto LABEL_361;
                        }
                        v154 = __dst;
                        v155 = *((_DWORD *)__dst + 4 * v152);
                        if (v155 == 1)
                        {
                          v156 = *((_DWORD *)__dst + 4 * v152 + 2);
                          v322 = (char *)*((_QWORD *)__p + v152);
                          v157 = v322;
                          v323 = (uint64_t)(v322 + 40);
                          v158 = sub_1C50BA604((const llvm::DataLayout **)v303, ****(_QWORD ****)v303 + 1912, 0, ****(_QWORD ****)v303 + 1960, v156);
                          v342 = 257;
                          v160 = (llvm::ConstantInt **)sub_1C47733F8((uint64_t)&v319, v158, v159, (uint64_t)&v338, 0, 0);
                          sub_1C477667C(v315, (uint64_t)v160, (uint64_t)v157);
                          if (((v312 - (_BYTE *)__p) >> 3) - 1 > v152)
                          {
                            v161 = llvm::ConstantInt::get(*v160, 0, 0);
                            v342 = 257;
                            v162 = (llvm::Value *)sub_1C4774B48((uint64_t)&v319, 33, (uint64_t)v160, (uint64_t)v161, (uint64_t)&v338);
                            v163 = (llvm::BasicBlock *)v314;
                            v164 = (llvm::BasicBlock *)*((_QWORD *)__p + v152 + 1);
                            v165 = operator new(0xA0uLL);
                            v166 = v165;
                            v167 = 0;
                            v168 = (llvm::Value *)(v165 + 24);
                            v165[29] = v165[29] & 0x38000000 | 3;
                            do
                            {
                              v169 = &v165[v167];
                              *v169 = 0;
                              v169[1] = 0;
                              v169[2] = 0;
                              v169[3] = v168;
                              v167 += 8;
                            }
                            while (v167 != 24);
                            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v165 + 24), v163, v164, v162, 0);
                            v342 = 257;
                            (*(void (**)(uint64_t, llvm::Value *, char **, char *, uint64_t))(*(_QWORD *)v325 + 16))(v325, v168, &v338, v322, v323);
                            if (v320)
                            {
                              v170 = (char *)v319;
                              v171 = (char *)v319 + 16 * v320;
                              v172 = (unsigned __int8 **)(v166 + 36);
                              do
                              {
                                v173 = *(_DWORD *)v170;
                                v174 = (unsigned __int8 *)*((_QWORD *)v170 + 1);
                                if (v174)
                                {
                                  if (!v173)
                                  {
                                    v335 = (void *)*((_QWORD *)v170 + 1);
                                    llvm::MetadataTracking::track((uint64_t)&v335, v174, 2);
                                    v175 = *v172;
                                    if (!*v172)
                                    {
LABEL_277:
                                      v176 = (unsigned __int8 *)v335;
                                      *v172 = (unsigned __int8 *)v335;
                                      if (v176)
                                        llvm::MetadataTracking::retrack((uint64_t)&v335, v176, (uint64_t)(v166 + 36));
                                      goto LABEL_274;
                                    }
LABEL_271:
                                    llvm::MetadataTracking::untrack((uint64_t)(v166 + 36), v175);
                                    goto LABEL_277;
                                  }
                                }
                                else
                                {
                                  v175 = *v172;
                                  if (!*v172 && (*((_BYTE *)v166 + 119) & 0x20) == 0)
                                    goto LABEL_274;
                                  if (!v173)
                                  {
                                    v335 = 0;
                                    if (!v175)
                                      goto LABEL_277;
                                    goto LABEL_271;
                                  }
                                }
                                llvm::Value::setMetadata(v168, *(_DWORD *)v170, (llvm::MDNode *)v174);
LABEL_274:
                                v170 += 16;
                              }
                              while (v170 != v171);
                            }
                            v194 = *(llvm::Instruction **)v318;
                            if (*(_QWORD *)v318)
                            {
                              v338 = v157;
                              v339 = v314 & 0xFFFFFFFFFFFFFFFBLL;
                              v195 = *((_QWORD *)__p + v152 + 1) & 0xFFFFFFFFFFFFFFFBLL;
                              v340 = v157;
                              v341 = v195;
                              v196 = 2;
                              goto LABEL_303;
                            }
                            goto LABEL_343;
                          }
                          v180 = v314;
                          v181 = (char *)operator new(0x60uLL);
                          v182 = v181;
                          *((_DWORD *)v181 + 13) = *((_DWORD *)v181 + 13) & 0x38000000 | 1;
                          *(_QWORD *)v181 = 0;
                          *((_QWORD *)v181 + 2) = 0;
                          *((_QWORD *)v181 + 1) = 0;
                          *((_QWORD *)v181 + 4) = ***(_QWORD ***)v180 + 1576;
                          v183 = (llvm::Value *)(v181 + 32);
                          *((_QWORD *)v181 + 3) = v181 + 32;
                          *((_QWORD *)v181 + 5) = 0;
                          v181[48] = 30;
                          v181[49] = 0;
                          *((_WORD *)v181 + 25) = 0;
                          *((_DWORD *)v181 + 13) = 1;
                          *(_OWORD *)(v181 + 56) = 0u;
                          *(_OWORD *)(v181 + 72) = 0u;
                          *((_DWORD *)v181 + 22) = 0;
                          *(_QWORD *)v181 = v180;
                          v186 = *(_QWORD *)(v180 + 8);
                          v185 = (_QWORD *)(v180 + 8);
                          v184 = v186;
                          *((_QWORD *)v181 + 1) = v186;
                          if (v186)
                            *(_QWORD *)(v184 + 16) = v181 + 8;
                          *((_QWORD *)v181 + 2) = v185;
                          *v185 = v181;
                          v342 = 257;
                          (*(void (**)(uint64_t, llvm::Value *, char **, char *, uint64_t))(*(_QWORD *)v325 + 16))(v325, v183, &v338, v322, v323);
                          if (!v320)
                          {
LABEL_301:
                            v194 = *(llvm::Instruction **)v318;
                            if (*(_QWORD *)v318)
                            {
                              v338 = v157;
                              v339 = v314 & 0xFFFFFFFFFFFFFFFBLL;
                              v196 = 1;
LABEL_303:
                              llvm::DomTreeUpdater::applyUpdates((uint64_t)v194, (unint64_t *)&v338, v196);
                            }
LABEL_343:
                            ++v152;
                            v120 = v327;
                            v31 = v275;
                            if (v316)
                            {
                              v153 = v327 / v310;
                              if (v327 % v310)
                                v120 = (v153 + 1);
                              else
                                v120 = v153;
                            }
                            continue;
                          }
                          v187 = (char *)v319;
                          v188 = (char *)v319 + 16 * v320;
                          v189 = (unsigned __int8 **)(v182 + 80);
                          while (2)
                          {
                            v190 = *(_DWORD *)v187;
                            v191 = (unsigned __int8 *)*((_QWORD *)v187 + 1);
                            if (v191)
                            {
                              if (v190)
                                goto LABEL_293;
                              v335 = (void *)*((_QWORD *)v187 + 1);
                              llvm::MetadataTracking::track((uint64_t)&v335, v191, 2);
                              v192 = *v189;
                              if (*v189)
LABEL_291:
                                llvm::MetadataTracking::untrack((uint64_t)(v182 + 80), v192);
LABEL_297:
                              v193 = (unsigned __int8 *)v335;
                              *v189 = (unsigned __int8 *)v335;
                              if (v193)
                                llvm::MetadataTracking::retrack((uint64_t)&v335, v193, (uint64_t)(v182 + 80));
                            }
                            else
                            {
                              v192 = *v189;
                              if (*v189 || (v182[55] & 0x20) != 0)
                              {
                                if (!v190)
                                {
                                  v335 = 0;
                                  if (v192)
                                    goto LABEL_291;
                                  goto LABEL_297;
                                }
LABEL_293:
                                llvm::Value::setMetadata(v183, *(_DWORD *)v187, (llvm::MDNode *)v191);
                              }
                            }
                            v187 += 16;
                            if (v187 == v188)
                              goto LABEL_301;
                            continue;
                          }
                        }
                        break;
                      }
                      v177 = ***(_QWORD ****)v303;
                      v178 = 8 * v155;
                      LODWORD(v338) = v178;
                      if (v178 <= 63)
                      {
                        if (v178 == 32)
                        {
                          v179 = (_QWORD *)(*v177 + 1960);
                          goto LABEL_308;
                        }
                        if (v178 == 16)
                        {
                          v179 = (_QWORD *)(*v177 + 1936);
                          goto LABEL_308;
                        }
                        if (v178 != 8)
                          goto LABEL_353;
                        v179 = (_QWORD *)(*v177 + 1912);
                      }
                      else
                      {
                        if (v178 == 64)
                        {
                          v179 = (_QWORD *)(*v177 + 1984);
                          goto LABEL_308;
                        }
                        if (v178 == 128)
                        {
                          v179 = (_QWORD *)(*v177 + 2008);
                          goto LABEL_308;
                        }
LABEL_353:
                        v224 = sub_1C5270984(*v177 + 2168, &v338);
                        v179 = (_QWORD *)*((_QWORD *)v224 + 1);
                        if (!v179)
                        {
                          v225 = v224;
                          v179 = (_QWORD *)sub_1C484358C(*v177 + 2040, 24, 3);
                          v226 = (int)v338;
                          *v179 = v177;
                          v179[2] = 0;
                          v179[1] = (v226 << 8) | 0xDu;
                          *((_QWORD *)v225 + 1) = v179;
                        }
                      }
LABEL_308:
                      v197 = ***(_QWORD ****)v303;
                      v198 = 8 * v308;
                      LODWORD(v338) = 8 * v308;
                      if ((int)(8 * v308) <= 63)
                      {
                        if (v198 == 32)
                        {
                          v199 = (_QWORD *)(*v197 + 1960);
                          goto LABEL_315;
                        }
                        if (v198 == 16)
                        {
                          v199 = (_QWORD *)(*v197 + 1936);
                          goto LABEL_315;
                        }
                        if (v198 != 8)
                          goto LABEL_355;
                        v199 = (_QWORD *)(*v197 + 1912);
                      }
                      else
                      {
                        if (v198 == 64)
                        {
                          v199 = (_QWORD *)(*v197 + 1984);
                          goto LABEL_315;
                        }
                        if (v198 == 128)
                        {
                          v199 = (_QWORD *)(*v197 + 2008);
                          goto LABEL_315;
                        }
LABEL_355:
                        v227 = sub_1C5270984(*v197 + 2168, &v338);
                        v199 = (_QWORD *)*((_QWORD *)v227 + 1);
                        if (!v199)
                        {
                          v228 = v227;
                          v199 = (_QWORD *)sub_1C484358C(*v197 + 2040, 24, 3);
                          v229 = (int)v338;
                          *v199 = v197;
                          v199[2] = 0;
                          v199[1] = (v229 << 8) | 0xDu;
                          *((_QWORD *)v228 + 1) = v199;
                        }
                      }
LABEL_315:
                      v200 = *((_QWORD *)__p + v152) + 40;
                      v322 = (char *)*((_QWORD *)__p + v152);
                      v323 = v200;
                      v201 = sub_1C50BA604((const llvm::DataLayout **)v303, (uint64_t)v179, *v317 == 0, (uint64_t)v199, v154[4 * v152 + 2]);
                      v203 = v202;
                      if (!v316)
                      {
                        sub_1C477667C(v305, v201, *((_QWORD *)__p + v152));
                        sub_1C477667C(v306, v203, *((_QWORD *)__p + v152));
                      }
                      v342 = 257;
                      v204 = (llvm::Value *)sub_1C4774B48((uint64_t)&v319, 32, v201, v203, (uint64_t)&v338);
                      v205 = v322;
                      v206 = (llvm::BasicBlock *)v304;
                      v207 = (llvm::BasicBlock **)&v314;
                      if (((v312 - (_BYTE *)__p) >> 3) - 1 != v152)
                        v207 = (llvm::BasicBlock **)((char *)__p + 8 * v152 + 8);
                      v208 = *v207;
                      v209 = operator new(0xA0uLL);
                      v210 = v209;
                      v211 = 0;
                      v212 = (llvm::Value *)(v209 + 24);
                      v209[29] = v209[29] & 0x38000000 | 3;
                      do
                      {
                        v213 = &v209[v211];
                        *v213 = 0;
                        v213[1] = 0;
                        v213[2] = 0;
                        v213[3] = v212;
                        v211 += 8;
                      }
                      while (v211 != 24);
                      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v209 + 24), v208, v206, v204, 0);
                      v342 = 257;
                      (*(void (**)(uint64_t, llvm::Value *, char **, char *, uint64_t))(*(_QWORD *)v325 + 16))(v325, v212, &v338, v322, v323);
                      if (!v320)
                      {
LABEL_336:
                        if (*(_QWORD *)v318)
                        {
                          v338 = v205;
                          v339 = (unint64_t)v208 & 0xFFFFFFFFFFFFFFFBLL;
                          v340 = v205;
                          v341 = v304 & 0xFFFFFFFFFFFFFFFBLL;
                          llvm::DomTreeUpdater::applyUpdates(*(uint64_t *)v318, (unint64_t *)&v338, 2);
                        }
                        if (((v312 - (_BYTE *)__p) >> 3) - 1 == v152)
                        {
                          v221 = ****(_QWORD ****)v303;
                          v222 = *(llvm::ConstantInt **)(v221 + 1960);
                          LODWORD(v339) = *(_DWORD *)(v221 + 1968) >> 8;
                          if (v339 > 0x40)
                            llvm::APInt::initSlowCase((llvm::APInt *)&v338, 0, 0);
                          else
                            v338 = 0;
                          v223 = llvm::ConstantInt::get(v222, (llvm::LLVMContext *)&v338, v214);
                          if (v339 >= 0x41 && v338)
                            MEMORY[0x1CAA32F9C](v338, 0x1000C8000313F17);
                          sub_1C477667C(v315, (uint64_t)v223, *((_QWORD *)__p + v152));
                        }
                        goto LABEL_343;
                      }
                      v215 = (char *)v319;
                      v216 = (char *)v319 + 16 * v320;
                      v217 = (unsigned __int8 **)(v210 + 36);
                      while (2)
                      {
                        v218 = *(_DWORD *)v215;
                        v214 = (const llvm::APInt *)*((_QWORD *)v215 + 1);
                        if (v214)
                        {
                          if (v218)
                            goto LABEL_330;
                          v335 = (void *)*((_QWORD *)v215 + 1);
                          llvm::MetadataTracking::track((uint64_t)&v335, (unsigned __int8 *)v214, 2);
                          v219 = *v217;
                          if (*v217)
LABEL_328:
                            llvm::MetadataTracking::untrack((uint64_t)(v210 + 36), v219);
LABEL_334:
                          v220 = (unsigned __int8 *)v335;
                          *v217 = (unsigned __int8 *)v335;
                          if (v220)
                            llvm::MetadataTracking::retrack((uint64_t)&v335, v220, (uint64_t)(v210 + 36));
                        }
                        else
                        {
                          v219 = *v217;
                          if (*v217 || (*((_BYTE *)v210 + 119) & 0x20) != 0)
                          {
                            if (!v218)
                            {
                              v335 = 0;
                              if (v219)
                                goto LABEL_328;
                              goto LABEL_334;
                            }
LABEL_330:
                            llvm::Value::setMetadata(v212, *(_DWORD *)v215, v214);
                          }
                        }
                        v215 += 16;
                        if (v215 == v216)
                          goto LABEL_336;
                        continue;
                      }
                    }
                    if (v327 % v310)
                      v121 = v327 / v310 + 1;
                    else
                      v121 = v327 / v310;
                    if (v121 == 1)
                    {
                      LODWORD(v335) = 0;
                      v122 = (unsigned __int8 *)sub_1C50B9DBC((const llvm::DataLayout **)v303, 0, (unsigned int *)&v335);
                      v123 = ****(_QWORD ****)v303 + 1960;
                      v342 = 257;
                      v124 = (uint64_t)sub_1C4773E38((uint64_t *)&v319, 39, v122, v123, (uint64_t)&v338);
                      goto LABEL_376;
                    }
                    v128 = 0;
                    v289 = 0;
                    v129 = 1;
                    while (2)
                    {
                      if (v129)
                      {
                        v130 = v120 / v310;
                        if (v120 % v310)
                          v120 = (v130 + 1);
                        else
                          v120 = v130;
                      }
                      if (v128 < v120)
                      {
                        v131 = (llvm::Value *)sub_1C50B9DBC((const llvm::DataLayout **)v303, v128, &v289);
                        v132 = v322;
                        v133 = (llvm::BasicBlock *)v304;
                        v134 = (llvm::BasicBlock **)&v314;
                        if (((v312 - (_BYTE *)__p) >> 3) - 1 != v128)
                          v134 = (llvm::BasicBlock **)((char *)__p + 8 * v128 + 8);
                        v135 = *v134;
                        v136 = operator new(0xA0uLL);
                        v137 = v136;
                        v138 = 0;
                        v139 = (llvm::Value *)(v136 + 24);
                        v136[29] = v136[29] & 0x38000000 | 3;
                        do
                        {
                          v140 = &v136[v138];
                          *v140 = 0;
                          v140[1] = 0;
                          v140[2] = 0;
                          v140[3] = v139;
                          v138 += 8;
                        }
                        while (v138 != 24);
                        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v136 + 24), v133, v135, v131, 0);
                        v342 = 257;
                        (*(void (**)(uint64_t, llvm::Value *, char **, char *, uint64_t))(*(_QWORD *)v325 + 16))(v325, v139, &v338, v322, v323);
                        if (!v320)
                        {
LABEL_243:
                          if (*(_QWORD *)v318)
                          {
                            v338 = v132;
                            v339 = v304 & 0xFFFFFFFFFFFFFFFBLL;
                            v340 = v132;
                            v341 = (unint64_t)v135 & 0xFFFFFFFFFFFFFFFBLL;
                            llvm::DomTreeUpdater::applyUpdates(*(uint64_t *)v318, (unint64_t *)&v338, 2);
                          }
                          if (((v312 - (_BYTE *)__p) >> 3) - 1 == v128)
                          {
                            v148 = ****(_QWORD ****)v303;
                            v149 = *(llvm::ConstantInt **)(v148 + 1960);
                            LODWORD(v339) = *(_DWORD *)(v148 + 1968) >> 8;
                            if (v339 > 0x40)
                              llvm::APInt::initSlowCase((llvm::APInt *)&v338, 0, 0);
                            else
                              v338 = 0;
                            v150 = llvm::ConstantInt::get(v149, (llvm::LLVMContext *)&v338, v141);
                            if (v339 >= 0x41 && v338)
                              MEMORY[0x1CAA32F9C](v338, 0x1000C8000313F17);
                            sub_1C477667C(v315, (uint64_t)v150, *((_QWORD *)__p + v128));
                          }
                          v129 = v316;
                          v120 = v327;
                          ++v128;
                          continue;
                        }
                        v142 = (char *)v319;
                        v143 = (char *)v319 + 16 * v320;
                        v144 = (unsigned __int8 **)(v137 + 36);
                        while (2)
                        {
                          v145 = *(_DWORD *)v142;
                          v141 = (const llvm::APInt *)*((_QWORD *)v142 + 1);
                          if (v141)
                          {
                            if (v145)
                              goto LABEL_237;
                            v335 = (void *)*((_QWORD *)v142 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v335, (unsigned __int8 *)v141, 2);
                            v146 = *v144;
                            if (*v144)
LABEL_235:
                              llvm::MetadataTracking::untrack((uint64_t)(v137 + 36), v146);
LABEL_241:
                            v147 = (unsigned __int8 *)v335;
                            *v144 = (unsigned __int8 *)v335;
                            if (v147)
                              llvm::MetadataTracking::retrack((uint64_t)&v335, v147, (uint64_t)(v137 + 36));
                          }
                          else
                          {
                            v146 = *v144;
                            if (*v144 || (*((_BYTE *)v137 + 119) & 0x20) != 0)
                            {
                              if (!v145)
                              {
                                v335 = 0;
                                if (v146)
                                  goto LABEL_235;
                                goto LABEL_241;
                              }
LABEL_237:
                              llvm::Value::setMetadata(v139, *(_DWORD *)v142, v141);
                            }
                          }
                          v142 += 16;
                          if (v142 == v143)
                            goto LABEL_243;
                          continue;
                        }
                      }
                      break;
                    }
                    sub_1C50B994C((uint64_t *)v303);
                    v151 = v315;
                    v31 = v275;
LABEL_361:
                    v35 = v270;
LABEL_377:
                    v50 = 1;
                    llvm::Value::doRAUW(v273, v151, (llvm::Value *)1);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v273 + 5) + 40, (uint64_t ***)v273);
                    v245 = *((_QWORD *)v273 + 3);
                    v246 = (_QWORD *)*((_QWORD *)v273 + 4);
                    *v246 = v245;
                    *(_QWORD *)(v245 + 8) = v246;
                    *((_QWORD *)v273 + 3) = 0;
                    *((_QWORD *)v273 + 4) = 0;
                    llvm::Value::deleteValue(v273);
LABEL_378:
                    if (__dst != v328)
                      free(__dst);
                    if (v319 != &v321)
                      free(v319);
                    if (__p)
                    {
                      v312 = (char *)__p;
                      operator delete(__p);
                    }
LABEL_384:
                    if (v330 != &v332)
                      free(v330);
                    if ((v50 & 1) == 0)
                      continue;
                    v32 = *(_QWORD *)(v264 + 80);
                    v263 = 1;
                    if (v32 == v271)
                      goto LABEL_410;
                    goto LABEL_42;
                  }
                }
              }
            }
          }
        }
      }
    }
    v32 = *(_QWORD *)(v274 + 8);
  }
  while (v32 != v271);
  if ((v263 & 1) == 0)
  {
LABEL_418:
    v276 = v280;
    v277 = v280;
    v278 = 2;
    v279 = 0;
    v281 = v285;
    v282 = v285;
    v283 = 2;
    v284 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v276, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    for (k = *(_QWORD *)(v264 + 80); k != v271; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v254 = (_QWORD *)(k - 24);
      else
        v254 = 0;
      llvm::SimplifyInstructionsInBlock(v254, 0, v25, v26, v27, v28);
    }
LABEL_410:
    v276 = v280;
    v277 = v280;
    v278 = 2;
    v279 = 0;
    v281 = v285;
    v282 = v285;
    v283 = 2;
    v284 = 0;
    sub_1C4DDB144((uint64_t)&v276, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  }
  if (v302)
  {
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)&v290);
    *(_QWORD *)v303 = &v301;
    sub_1C50B10F0((void ***)v303);
    if (v300 != v299)
      free(v300);
    if (v290 != &v292)
      free(v290);
    v302 = 0;
  }
  if (HIDWORD(v283) == v284)
  {
    v255 = sub_1C477672C((uint64_t)&v276, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v277 == v276)
      v256 = (uint64_t *)((char *)&v278 + 4);
    else
      v256 = &v278;
    v13 = v255 == (_QWORD *)&v277[8 * *(unsigned int *)v256];
  }
  else
  {
    v13 = 1;
  }
  if (v282 != v281)
    free(v282);
  if (v277 != v276)
    free(v277);
  return v13;
}

uint64_t sub_1C50B98E4(uint64_t a1)
{
  void *v2;
  void **v4;

  llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)a1);
  v4 = (void **)(a1 + 408);
  sub_1C50B10F0(&v4);
  v2 = *(void **)(a1 + 320);
  if (v2 != *(void **)(a1 + 312))
    free(v2);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

uint64_t sub_1C50B994C(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const llvm::APInt *v11;
  uint64_t v12;
  llvm::ConstantInt *v13;
  unint64_t v14;
  char v15;
  llvm::ValueHandleBase *v16;
  uint64_t ***v17;
  char *v18;
  unsigned __int8 **v19;
  _QWORD *v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  const llvm::APInt *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ConstantInt *v27;
  unint64_t v28;
  unint64_t v29;
  const llvm::APInt *v30;
  uint64_t *v31;
  uint64_t v32;
  llvm::ConstantInt *v33;
  unsigned int v34;
  unint64_t v35;
  llvm::ValueHandleBase *v36;
  llvm::Value *Select;
  uint64_t ***v38;
  char *v39;
  _QWORD *v40;
  uint64_t **v41;
  uint64_t result;
  unint64_t v43;
  llvm::ConstantInt *v44;
  llvm::ValueHandleBase *v45;
  uint64_t v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)a1 + 104);
  v3 = a1[1];
  v4 = v3 + 40;
  for (i = *(_QWORD *)(v3 + 48); i != v4; i = *(_QWORD *)(i + 8))
  {
    v6 = i - 24;
    if (!i)
      v6 = 0;
    if (*(_BYTE *)(v6 + 16) != 83)
    {
      v7 = *(unsigned __int8 *)(i - 8) - 38;
      v8 = v7 > 0x38;
      v9 = (1 << v7) & 0x100060000000001;
      if (v8 || v9 == 0)
        v4 = i;
      else
        v4 = *(_QWORD *)(i + 8);
      break;
    }
  }
  sub_1C4D8AE2C((uint64_t)(a1 + 16), v3, v4);
  if (v2)
  {
    v12 = ***(_QWORD ***)*a1;
    v13 = *(llvm::ConstantInt **)(v12 + 1960);
    v14 = *(unsigned int *)(v12 + 1968);
    LODWORD(v47) = v14 >> 8;
    if (v14 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 1, 0);
    }
    else
    {
      if (v14 <= 0xFF)
        v15 = 0;
      else
        v15 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v14);
      v46 = v15 & 1;
    }
    v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v46, v11);
    if (v47 >= 0x41 && v46)
      MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
    sub_1C477667C((llvm::PHINode *)a1[12], (uint64_t)v16, a1[1]);
    v17 = (uint64_t ***)a1[11];
    v18 = (char *)operator new(0x60uLL);
    *((_DWORD *)v18 + 13) = *((_DWORD *)v18 + 13) & 0x38000000 | 1;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 2) = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 4) = ***v17 + 1576;
    v19 = (unsigned __int8 **)(v18 + 32);
    *((_QWORD *)v18 + 3) = v18 + 32;
    *((_QWORD *)v18 + 5) = 0;
    v18[48] = 30;
    v18[49] = 0;
    *((_WORD *)v18 + 25) = 0;
    *((_DWORD *)v18 + 13) = 1;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *((_DWORD *)v18 + 22) = 0;
    v20 = v17 + 1;
    v21 = v17[1];
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = v21;
    if (v21)
      v21[2] = (uint64_t *)(v18 + 8);
    *((_QWORD *)v18 + 2) = v20;
    *v20 = v18;
    v48 = 257;
  }
  else
  {
    v22 = a1[2];
    v23 = a1[3];
    v48 = 257;
    v25 = sub_1C4774B48((uint64_t)(a1 + 16), 36, v22, v23, (uint64_t)&v46);
    v26 = *(_QWORD *)a1[24];
    v27 = *(llvm::ConstantInt **)(v26 + 1960);
    v28 = *(unsigned int *)(v26 + 1968);
    LODWORD(v47) = v28 >> 8;
    if (v28 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, -1, 0);
    }
    else
    {
      if (v28 <= 0xFF)
        v29 = 0;
      else
        v29 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v28);
      v46 = v29;
    }
    v31 = (uint64_t *)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v46, v24);
    if (v47 >= 0x41 && v46)
      MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
    v32 = *(_QWORD *)a1[24];
    v33 = *(llvm::ConstantInt **)(v32 + 1960);
    v34 = *(_DWORD *)(v32 + 1968);
    LODWORD(v47) = v34 >> 8;
    if (v34 >> 8 > 0x40)
    {
      v44 = v33;
      llvm::APInt::initSlowCase((llvm::APInt *)&v46, 1, 0);
      v33 = v44;
    }
    else
    {
      if (v34 <= 0xFF)
        LOBYTE(v35) = 0;
      else
        v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v34);
      v46 = v35 & 1;
    }
    v36 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v46, v30);
    if (v47 >= 0x41 && v46)
    {
      v45 = v36;
      MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
      v36 = v45;
    }
    v48 = 257;
    Select = llvm::IRBuilderBase::CreateSelect(a1 + 16, v25, v31, (uint64_t)v36, (uint64_t)&v46, 0);
    sub_1C477667C((llvm::PHINode *)a1[12], (uint64_t)Select, a1[1]);
    v38 = (uint64_t ***)a1[11];
    v39 = (char *)operator new(0x60uLL);
    *((_DWORD *)v39 + 13) = *((_DWORD *)v39 + 13) & 0x38000000 | 1;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 4) = ***v38 + 1576;
    v19 = (unsigned __int8 **)(v39 + 32);
    *((_QWORD *)v39 + 3) = v39 + 32;
    *((_QWORD *)v39 + 5) = 0;
    v39[48] = 30;
    v39[49] = 0;
    *((_WORD *)v39 + 25) = 0;
    *((_DWORD *)v39 + 13) = 1;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    *((_DWORD *)v39 + 22) = 0;
    v40 = v38 + 1;
    v41 = v38[1];
    *(_QWORD *)v39 = v38;
    *((_QWORD *)v39 + 1) = v41;
    if (v41)
      v41[2] = (uint64_t *)(v39 + 8);
    *((_QWORD *)v39 + 2) = v40;
    *v40 = v39;
    v48 = 257;
  }
  sub_1C4867F8C(a1 + 16, v19, (uint64_t)&v46);
  result = a1[15];
  if (result)
  {
    v43 = a1[11] & 0xFFFFFFFFFFFFFFFBLL;
    v46 = a1[1];
    v47 = v43;
    return llvm::DomTreeUpdater::applyUpdates(result, (unint64_t *)&v46, 1);
  }
  return result;
}

uint64_t sub_1C50B9DBC(const llvm::DataLayout **a1, unsigned int a2, unsigned int *a3)
{
  const llvm::DataLayout **v4;
  const llvm::DataLayout *v5;
  const llvm::DataLayout *v6;
  uint64_t v7;
  uint64_t v8;
  const llvm::DataLayout *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  uint64_t *v19;
  unsigned int v20;
  const llvm::DataLayout *v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  llvm::ConstantInt ***v34;
  unsigned __int8 **v35;
  llvm::ConstantInt **v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Value **v67;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  _QWORD *v95;
  int v96;
  _DWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  char v100;
  llvm::ConstantInt **v101;
  unsigned __int8 **__p;
  unsigned __int8 *v104[4];
  __int16 v105;

  v4 = a1;
  v5 = a1[8];
  if ((unint64_t)a1[7] >= *((unsigned int *)a1 + 68) - (unint64_t)*a3)
    LODWORD(v6) = *((_DWORD *)a1 + 68) - *a3;
  else
    v6 = a1[7];
  if (v5 == a1[9])
  {
    v8 = (uint64_t)(a1 + 16);
    v9 = *a1;
    v10 = (uint64_t)*a1 + 24;
    a1[22] = (const llvm::DataLayout *)*((_QWORD *)*a1 + 5);
    a1[23] = (const llvm::DataLayout *)v10;
    v11 = (unsigned __int8 *)*((_QWORD *)v9 + 6);
    v104[0] = v11;
    if (v11)
    {
      llvm::MetadataTracking::track((uint64_t)v104, v11, 2);
      v12 = v104[0];
    }
    else
    {
      v12 = 0;
    }
    sub_1C4774EF4(v8, 0, (uint64_t)v12);
    if (v104[0])
      llvm::MetadataTracking::untrack((uint64_t)v104, v104[0]);
    v4 = a1;
  }
  else
  {
    v7 = *((_QWORD *)v5 + a2);
    a1[22] = (const llvm::DataLayout *)v7;
    a1[23] = (const llvm::DataLayout *)(v7 + 40);
  }
  if ((_DWORD)v6 != 1)
  {
    v14 = **(_QWORD ***)*v4;
    v15 = 8 * *((_DWORD *)v4 + 10);
    LODWORD(v104[0]) = v15;
    if (v15 <= 63)
    {
      switch(v15)
      {
        case 32:
          v13 = *v14 + 1960;
          goto LABEL_20;
        case 16:
          v13 = *v14 + 1936;
          goto LABEL_20;
        case 8:
          v13 = *v14 + 1912;
          goto LABEL_20;
      }
    }
    else
    {
      if (v15 == 64)
      {
        v13 = *v14 + 1984;
        goto LABEL_20;
      }
      if (v15 == 128)
      {
        v13 = *v14 + 2008;
        goto LABEL_20;
      }
    }
    v93 = sub_1C5270984(*v14 + 2168, v104);
    v4 = a1;
    v13 = *((_QWORD *)v93 + 1);
    if (!v13)
    {
      v94 = v93;
      v95 = (_QWORD *)sub_1C484358C(*v14 + 2040, 24, 3);
      v4 = a1;
      v13 = (uint64_t)v95;
      v96 = (int)v104[0];
      *v95 = v14;
      v95[2] = 0;
      v95[1] = (v96 << 8) | 0xDu;
      *((_QWORD *)v94 + 1) = v95;
    }
LABEL_20:
    if (!(_DWORD)v6)
    {
      v101 = 0;
      __p = 0;
      v17 = 0;
      goto LABEL_60;
    }
    goto LABEL_21;
  }
  v13 = 0;
LABEL_21:
  v99 = 0;
  v101 = 0;
  v16 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v19 = (uint64_t *)(v4 + 16);
  v20 = *a3;
  do
  {
    v21 = v4[33];
    v22 = **(_QWORD ***)*v4;
    v23 = 8 * *((_DWORD *)v21 + 4 * v20);
    LODWORD(v104[0]) = v23;
    if (v23 <= 63)
    {
      switch(v23)
      {
        case 32:
          v24 = *v22 + 1960;
          goto LABEL_29;
        case 16:
          v24 = *v22 + 1936;
          goto LABEL_29;
        case 8:
          v24 = *v22 + 1912;
          goto LABEL_29;
      }
    }
    else
    {
      if (v23 == 64)
      {
        v24 = *v22 + 1984;
        goto LABEL_29;
      }
      if (v23 == 128)
      {
        v24 = *v22 + 2008;
        goto LABEL_29;
      }
    }
    v37 = sub_1C5270984(*v22 + 2168, v104);
    v24 = *((_QWORD *)v37 + 1);
    if (!v24)
    {
      v97 = v37;
      v24 = sub_1C484358C(*v22 + 2040, 24, 3);
      v38 = (int)v104[0];
      *(_QWORD *)v24 = v22;
      *(_QWORD *)(v24 + 16) = 0;
      *(_DWORD *)(v24 + 8) = (v38 << 8) | 0xD;
      *(_DWORD *)(v24 + 12) = 0;
      *((_QWORD *)v97 + 1) = v24;
    }
LABEL_29:
    v26 = (_QWORD *)sub_1C50BA604(a1, v24, 0, v13, *((_DWORD *)v21 + 4 * v20 + 2));
    if ((_DWORD)v6 == 1)
    {
      v105 = 257;
      v99 = sub_1C4774B48((uint64_t)v19, 33, (uint64_t)v26, v25, (uint64_t)v104);
    }
    else
    {
      v105 = 257;
      v27 = sub_1C506EC1C(v19, v26, v25, (uint64_t)v104);
      v105 = 257;
      v28 = sub_1C4773E38(v19, 39, v27, v13, (uint64_t)v104);
      v101 = (llvm::ConstantInt **)v28;
      if (v17 >= v18)
      {
        v29 = __p;
        v30 = v17 - __p;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_157;
        if (((char *)v18 - (char *)__p) >> 2 > v31)
          v31 = ((char *)v18 - (char *)__p) >> 2;
        if ((unint64_t)((char *)v18 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          if (v32 >> 61)
            goto LABEL_158;
          v33 = (char *)operator new(8 * v32);
          v29 = __p;
        }
        else
        {
          v33 = 0;
        }
        v34 = (llvm::ConstantInt ***)&v33[8 * v30];
        *v34 = v101;
        v35 = (unsigned __int8 **)(v34 + 1);
        while (v17 != v29)
        {
          v36 = (llvm::ConstantInt **)*--v17;
          *--v34 = v36;
        }
        v18 = (unsigned __int8 **)&v33[8 * v32];
        if (v29)
          operator delete(v29);
        v17 = v35;
        __p = (unsigned __int8 **)v34;
      }
      else
      {
        *v17++ = v28;
      }
    }
    v4 = a1;
    ++v16;
    v20 = *a3 + 1;
    *a3 = v20;
  }
  while (v16 != (_DWORD)v6);
  v39 = v99;
  if (v99)
    goto LABEL_104;
LABEL_60:
  if ((char *)v17 - (char *)__p == 8)
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = (uint64_t *)(v17 - 1);
    goto LABEL_87;
  }
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v44 = 0;
  v45 = 0;
  v46 = (uint64_t)(v4 + 16);
  v47 = __p;
  do
  {
    v48 = v47[v44];
    v49 = (uint64_t)v47[v45 | 1];
    v105 = 257;
    v50 = sub_1C4773594(v46, v48, v49, (uint64_t)v104);
    v51 = v50;
    if (v41 >= v40)
    {
      v52 = v41 - v42;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        goto LABEL_157;
      if (((char *)v40 - (char *)v42) >> 2 > v53)
        v53 = ((char *)v40 - (char *)v42) >> 2;
      if ((unint64_t)((char *)v40 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      if (v54)
      {
        if (v54 >> 61)
          goto LABEL_158;
        v55 = (char *)operator new(8 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = (uint64_t *)&v55[8 * v52];
      *v56 = v51;
      v57 = v56 + 1;
      while (v41 != v42)
      {
        v58 = *--v41;
        *--v56 = v58;
      }
      v40 = (uint64_t *)&v55[8 * v54];
      if (v42)
        operator delete(v42);
      v42 = v56;
      v41 = v57;
      v47 = __p;
    }
    else
    {
      *v41++ = v50;
      v47 = __p;
    }
    v45 += 2;
    v44 = v45;
  }
  while (v17 - __p - 1 > (unint64_t)v45);
  if ((((_BYTE)v17 - (_BYTE)__p) & 8) == 0)
  {
LABEL_85:
    v59 = v41;
    goto LABEL_101;
  }
  v43 = (uint64_t *)(v17 - 1);
  if (v41 < v40)
  {
    *v41++ = *v43;
    goto LABEL_85;
  }
  v4 = a1;
LABEL_87:
  v60 = v41 - v42;
  v61 = v60 + 1;
  if ((unint64_t)(v60 + 1) >> 61)
LABEL_157:
    abort();
  if (((char *)v40 - (char *)v42) >> 2 > v61)
    v61 = ((char *)v40 - (char *)v42) >> 2;
  if ((unint64_t)((char *)v40 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8)
    v61 = 0x1FFFFFFFFFFFFFFFLL;
  if (v61)
  {
    if (v61 >> 61)
LABEL_158:
      sub_1C4764EE4();
    v62 = (char *)operator new(8 * v61);
    v4 = a1;
  }
  else
  {
    v62 = 0;
  }
  v63 = (uint64_t *)&v62[8 * v60];
  *v63 = *v43;
  v59 = v63 + 1;
  if (v41 != v42)
  {
    do
    {
      v64 = *--v41;
      *--v63 = v64;
    }
    while (v41 != v42);
    v41 = v42;
  }
  v42 = v63;
  if (v41)
  {
    operator delete(v41);
LABEL_101:
    v4 = a1;
  }
  v65 = (char *)v59 - (char *)v42;
  if ((char *)v59 - (char *)v42 != 8)
  {
    v69 = (uint64_t)(v4 + 16);
    while (1)
    {
      v98 = v59;
      v100 = v65;
      v70 = 0;
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v74 = v42;
      v75 = (v65 >> 3) - 1;
      v42 = 0;
      do
      {
        v76 = (_QWORD *)v74[v72];
        v77 = v74[v73 | 1];
        v105 = 257;
        v78 = sub_1C4773594(v69, v76, v77, (uint64_t)v104);
        v79 = v78;
        if (v70 >= v71)
        {
          v80 = v70 - v42;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61)
            goto LABEL_157;
          if (((char *)v71 - (char *)v42) >> 2 > v81)
            v81 = ((char *)v71 - (char *)v42) >> 2;
          if ((unint64_t)((char *)v71 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          if (v82)
          {
            if (v82 >> 61)
              goto LABEL_158;
            v83 = (char *)operator new(8 * v82);
          }
          else
          {
            v83 = 0;
          }
          v84 = (uint64_t *)&v83[8 * v80];
          *v84 = v79;
          v85 = v84 + 1;
          while (v70 != v42)
          {
            v86 = *--v70;
            *--v84 = v86;
          }
          v71 = (uint64_t *)&v83[8 * v82];
          if (v42)
            operator delete(v42);
          v42 = v84;
          v70 = v85;
        }
        else
        {
          *v70++ = v78;
        }
        v73 += 2;
        v72 = v73;
      }
      while (v75 > v73);
      if ((v100 & 8) == 0)
        goto LABEL_131;
      if (v70 < v71)
        break;
      v87 = v70 - v42;
      v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 61)
        goto LABEL_157;
      if (((char *)v71 - (char *)v42) >> 2 > v88)
        v88 = ((char *)v71 - (char *)v42) >> 2;
      if ((unint64_t)((char *)v71 - (char *)v42) >= 0x7FFFFFFFFFFFFFF8)
        v88 = 0x1FFFFFFFFFFFFFFFLL;
      if (v88)
      {
        v89 = v98;
        if (v88 >> 61)
          goto LABEL_158;
        v90 = (char *)operator new(8 * v88);
      }
      else
      {
        v90 = 0;
        v89 = v98;
      }
      v91 = (uint64_t *)&v90[8 * v87];
      *v91 = *(v89 - 1);
      v59 = v91 + 1;
      if (v70 == v42)
        goto LABEL_147;
      do
      {
        v92 = *--v70;
        *--v91 = v92;
      }
      while (v70 != v42);
      if (v42)
LABEL_147:
        operator delete(v42);
      v42 = v91;
      if (v74)
LABEL_132:
        operator delete(v74);
LABEL_133:
      v65 = (char *)v59 - (char *)v42;
      if ((char *)v59 - (char *)v42 == 8)
        goto LABEL_103;
    }
    *v70++ = *(v98 - 1);
LABEL_131:
    v59 = v70;
    if (v74)
      goto LABEL_132;
    goto LABEL_133;
  }
LABEL_103:
  v66 = *v42;
  v67 = llvm::ConstantInt::get(*v101, 0, 0);
  v105 = 257;
  v39 = sub_1C4774B48((uint64_t)(a1 + 16), 33, v66, (uint64_t)v67, (uint64_t)v104);
  operator delete(v42);
LABEL_104:
  if (__p)
    operator delete(__p);
  return v39;
}

uint64_t sub_1C50BA604(const llvm::DataLayout **a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  llvm::PointerType *v7;
  uint64_t v9;
  unsigned __int8 *v10;
  llvm::Value *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const llvm::DataLayout *v19;
  unsigned __int8 *v20;
  BOOL v21;
  const llvm::DataLayout *v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t Declaration;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t **v29;
  llvm::PointerType *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned __int8 *v37;
  uint64_t v38[4];
  __int16 v39;
  _BYTE v40[32];
  __int16 v41;
  llvm::PointerType *v42;

  v7 = (llvm::PointerType *)a2;
  v42 = (llvm::PointerType *)a2;
  v9 = (uint64_t)*a1 - 32 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF);
  v10 = *(unsigned __int8 **)v9;
  v11 = *(llvm::Value **)(v9 + 32);
  llvm::Value::getPointerAlignment(*(llvm::Value **)v9, a1[14]);
  v13 = v12;
  llvm::Value::getPointerAlignment(v11, a1[14]);
  v15 = v14;
  if (a5)
  {
    v31 = (llvm::PointerType *)(***(_QWORD ***)*a1 + 1912);
    v32 = llvm::PointerType::get(v31, 0);
    v41 = 257;
    v33 = (uint64_t *)sub_1C4773E38((uint64_t *)a1 + 16, 49, v10, v32, (uint64_t)v40);
    v39 = 257;
    v10 = (unsigned __int8 *)sub_1C61DDC60((uint64_t)(a1 + 16), v31, v33, a5, (uint64_t)v38);
    v34 = llvm::PointerType::get(v31, 0);
    v41 = 257;
    v35 = (uint64_t *)sub_1C4773E38((uint64_t *)a1 + 16, 49, (unsigned __int8 *)v11, v34, (uint64_t)v40);
    v39 = 257;
    v11 = (llvm::Value *)sub_1C61DDC60((uint64_t)(a1 + 16), v31, v35, a5, (uint64_t)v38);
    v13 = 63 - __clz(((1 << v13) | a5) & -((1 << v13) | a5));
    v15 = 63 - __clz(((1 << v15) | a5) & -((1 << v15) | a5));
  }
  v16 = llvm::PointerType::get(v7, 0);
  v41 = 257;
  v17 = sub_1C4773E38((uint64_t *)a1 + 16, 49, v10, v16, (uint64_t)v40);
  v18 = llvm::PointerType::get(v7, 0);
  v41 = 257;
  v20 = sub_1C4773E38((uint64_t *)a1 + 16, 49, (unsigned __int8 *)v11, v18, (uint64_t)v40);
  v21 = v17[16] > 0x14u || v17 == 0;
  if (v21
    || (v23 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr((llvm *)v17, v7, a1[14], v19),
        (v38[0] = (uint64_t)v23) == 0))
  {
    v41 = 257;
    v23 = (unsigned __int8 *)sub_1C506D920((uint64_t *)a1 + 16, (uint64_t)v7, (uint64_t)v17, v13 | 0x100u, 0, (uint64_t)v40);
    v38[0] = (uint64_t)v23;
  }
  v24 = v20[16] > 0x14u || v20 == 0;
  if (v24 || (v37 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr((llvm *)v20, v7, a1[14], v22)) == 0)
  {
    v41 = 257;
    v37 = (unsigned __int8 *)sub_1C506D920((uint64_t *)a1 + 16, (uint64_t)v7, (uint64_t)v20, v15 | 0x100u, 0, (uint64_t)v40);
  }
  if (a3)
  {
    Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)*a1 + 5) + 56) + 40), 9, (uint64_t *)&v42, 1);
    v26 = Declaration;
    if (Declaration)
    {
      v27 = *(uint64_t ***)(Declaration + 24);
      v41 = 257;
      v28 = sub_1C4774778((uint64_t *)a1 + 16, v27, Declaration, v38, 1, (uint64_t)v40, 0);
      v29 = *(uint64_t ***)(v26 + 24);
    }
    else
    {
      v41 = 257;
      v28 = sub_1C4774778((uint64_t *)a1 + 16, 0, 0, v38, 1, (uint64_t)v40, 0);
      v29 = 0;
    }
    v38[0] = v28;
    v41 = 257;
    v37 = (unsigned __int8 *)sub_1C4774778((uint64_t *)a1 + 16, v29, v26, (uint64_t *)&v37, 1, (uint64_t)v40, 0);
    v7 = v42;
    v23 = (unsigned __int8 *)v38[0];
  }
  if (a4 && v7 != (llvm::PointerType *)a4)
  {
    v41 = 257;
    v38[0] = (uint64_t)sub_1C4773E38((uint64_t *)a1 + 16, 39, v23, a4, (uint64_t)v40);
    v41 = 257;
    sub_1C4773E38((uint64_t *)a1 + 16, 39, v37, a4, (uint64_t)v40);
    return v38[0];
  }
  return (uint64_t)v23;
}

uint64_t sub_1C50BA9C0()
{
  int v1;
  int *v2;
  int v3;
  __int128 v4;

  v3 = 1;
  v1 = 1;
  v2 = &v1;
  *(_QWORD *)&v4 = "The number of loads per basic block for inline expansion of memcmp that is only being compared against zero.";
  *((_QWORD *)&v4 + 1) = 108;
  sub_1C61798D0((uint64_t)&unk_1ED7F7548, "memcmp-num-loads-per-block", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F7548, &dword_1C475E000);
  LODWORD(v2) = 1;
  *(_QWORD *)&v4 = "Set maximum number of loads used in expanded memcmp";
  *((_QWORD *)&v4 + 1) = 51;
  sub_1C61DDD4C((uint64_t)&unk_1ED7F7608, "max-loads-per-memcmp", &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F7608, &dword_1C475E000);
  LODWORD(v2) = 1;
  *(_QWORD *)&v4 = "Set maximum number of loads used in expanded memcmp for -Os/Oz";
  *((_QWORD *)&v4 + 1) = 62;
  sub_1C61DDE18(&v2, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F76C8, &dword_1C475E000);
}

uint64_t sub_1C50BAAC8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Post-RA pseudo instruction expansion pass";
  *(_QWORD *)(v2 + 8) = 41;
  *(_QWORD *)(v2 + 16) = "postrapseudos";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6ED9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50BAB58;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C50BAB58()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6ED9);
  *result = &off_1E8142228;
  return result;
}

void sub_1C50BAB98(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50BAC2C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50BACB8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C50BAD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  int v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int NumExplicitOperands;
  const llvm::MachineOperand *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;

  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = a2 + 320;
  v5 = *(_QWORD *)(a2 + 328);
  if (v5 != a2 + 320)
  {
    v6 = 0;
    v51 = a2 + 320;
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7 != v5 + 48)
        break;
LABEL_87:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        return v6 & 1;
    }
    while (1)
    {
      if (!v7 || (v8 = v7, (*(_BYTE *)v7 & 4) == 0))
      {
        v8 = v7;
        if ((*(_WORD *)(v7 + 44) & 8) != 0)
        {
          v8 = v7;
          do
            v8 = *(_QWORD *)(v8 + 8);
          while ((*(_WORD *)(v8 + 44) & 8) != 0);
        }
      }
      v9 = *(_QWORD *)(v8 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8) & 8) == 0)
        goto LABEL_79;
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 480))(*(_QWORD *)(a1 + 256), v7) & 1) != 0)
        goto LABEL_11;
      v10 = **(unsigned __int16 **)(v7 + 16);
      if (v10 == 19)
        break;
      if (v10 == 11)
      {
        v11 = *(_DWORD **)(v7 + 32);
        v12 = v11[1];
        v13 = *(_QWORD **)(a1 + 248);
        v14 = v13[1];
        v15 = v13[7];
        v16 = *(unsigned int *)(v14 + 24 * v12 + 4);
        if (*(_WORD *)(v15 + 2 * v16))
        {
          v17 = *(_WORD *)(v15 + 2 * v16) + v12;
          v18 = (unsigned __int16 *)(v13[11] + 2 * *(unsigned int *)(v14 + 24 * v12 + 12));
          v19 = (unsigned __int16 *)(v15 + 2 * v16 + 2);
          while (*v18 != v11[28])
          {
            v20 = *v19++;
            v17 += v20;
            ++v18;
            if (!v20)
              goto LABEL_18;
          }
          v21 = v17;
        }
        else
        {
LABEL_18:
          v21 = 0;
        }
        v31 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(v7 + 24);
          v33 = v11[17];
          v34 = 32 * v31;
          v35 = *(_DWORD **)(v7 + 32);
          while ((*v35 & 0x10000FF) != 0x1000000 || (*v35 & 0x5000000) == 83886080)
          {
            v35 += 8;
            v34 -= 32;
            if (!v34)
              goto LABEL_46;
          }
          if (v21 != v33)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 256) + 400))(*(_QWORD *)(a1 + 256), *(_QWORD *)(v7 + 24), v7, v7 + 56, v21);
            v37 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
            if (v37 && (*(_BYTE *)v37 & 4) != 0 || (*(_WORD *)(v37 + 44) & 4) == 0)
            {
              llvm::MachineInstr::addRegisterDefined(v37, v12, 0);
LABEL_53:
              v38 = v7;
LABEL_56:
              if ((*(_BYTE *)v7 & 4) == 0)
              {
LABEL_57:
                while ((*(_WORD *)(v7 + 44) & 8) != 0)
                  v7 = *(_QWORD *)(v7 + 8);
              }
              sub_1C487FE80(v32 + 40, v38, *(_QWORD *)(v7 + 8));
              v6 = 1;
              goto LABEL_79;
            }
            do
              v37 = *(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v37 + 44) & 4) != 0);
            llvm::MachineInstr::addRegisterDefined(v37, v12, 0);
            v38 = v7;
            if (v7)
              goto LABEL_56;
            goto LABEL_57;
          }
          if (v12 == v33)
            goto LABEL_53;
        }
LABEL_46:
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8) + 336;
        llvm::MachineInstr::removeOperand(v7, 3u);
        v6 = 1;
        llvm::MachineInstr::removeOperand(v7, 1u);
      }
LABEL_79:
      v7 = v9;
      if (v9 == v5 + 48)
        goto LABEL_87;
    }
    v22 = *(unsigned int *)(v7 + 40);
    if ((_DWORD)v22)
    {
      v23 = *(_DWORD **)(v7 + 32);
      v24 = 32 * v22;
      v25 = v23;
      while ((*v25 & 0x10000FF) != 0x1000000 || (*v25 & 0x5000000) == 83886080)
      {
        v25 += 8;
        v24 -= 32;
        if (!v24)
          goto LABEL_48;
      }
      v27 = v23[1];
      v29 = v23 + 8;
      v28 = v23[8];
      if (v29[1] == v27)
      {
        if (v22 <= 2 && (v28 & 0x10000000) == 0)
        {
          v30 = v7;
          if ((*(_BYTE *)v7 & 4) == 0)
          {
            v30 = v7;
            if ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              v30 = v7;
              do
                v30 = *(_QWORD *)(v30 + 8);
              while ((*(_WORD *)(v30 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v7 + 24) + 40, v7, *(_QWORD *)(v30 + 8));
          goto LABEL_11;
        }
      }
      else if ((v28 & 0x10000000) == 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 400))(*(_QWORD *)(a1 + 256), *(_QWORD *)(v7 + 24), v7, v7 + 56);
        v39 = *(unsigned int *)(v7 + 40);
        v40 = *(_QWORD *)v7;
        if (v39 >= 3)
        {
          v41 = v40 & 0xFFFFFFFFFFFFFFF8;
          if ((v40 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v41 & 4) == 0)
          {
            while ((*(_WORD *)(v41 + 44) & 4) != 0)
              v41 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
          }
          v42 = *(_QWORD *)(v7 + 32);
          v43 = *(_DWORD *)(v42 + 4);
          NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v7);
          if (NumExplicitOperands != (_DWORD)v39)
          {
            v45 = (const llvm::MachineOperand *)(v42 + 32 * NumExplicitOperands);
            v46 = 32 * v39 - 32 * NumExplicitOperands;
            do
            {
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v41, *(llvm::MachineFunction **)(*(_QWORD *)(v41 + 24) + 32), v45);
              if (((*(_DWORD *)v45 >> 26) & ~HIBYTE(*(_DWORD *)v45) & 1) != 0)
              {
                v47 = *((_DWORD *)v45 + 1);
                if (v43 == v47
                  || v43 - 1 <= 0x3FFFFFFE
                  && v47 - 1 <= 0x3FFFFFFE
                  && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a1 + 248) + 8), v43, v47))
                {
                  v48 = 32 * (*(_DWORD *)(v41 + 40) - 1);
                  *(_DWORD *)(*(_QWORD *)(v41 + 32) + v48) &= ~0x4000000u;
                }
              }
              v45 = (const llvm::MachineOperand *)((char *)v45 + 32);
              v46 -= 32;
            }
            while (v46);
            v40 = *(_QWORD *)v7;
          }
        }
        v49 = v7;
        if ((v40 & 4) == 0)
        {
          v49 = v7;
          if ((*(_WORD *)(v7 + 44) & 8) != 0)
          {
            v49 = v7;
            do
              v49 = *(_QWORD *)(v49 + 8);
            while ((*(_WORD *)(v49 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v7 + 24) + 40, v7, *(_QWORD *)(v49 + 8));
        v6 = 1;
        v4 = v51;
        goto LABEL_79;
      }
    }
LABEL_48:
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8) + 336;
LABEL_11:
    v6 = 1;
    goto LABEL_79;
  }
  v6 = 0;
  return v6 & 1;
}

void llvm::initializeExpandReductionsPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F7798);
  if (v1 != -1)
  {
    v4[0] = sub_1C50BB280;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F7798, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C50BB280(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Expand reduction intrinsics";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "expand-reductions";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F7790;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50BB984;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50BB314(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F7790;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81422E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F7798);
  if (v3 != -1)
  {
    v7[0] = sub_1C50BB280;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F7798, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::ExpandReductionsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  char v6;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1);
  v6 = sub_1C50BB46C(a1, (_QWORD *)(ResultImpl + 8));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v6 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C50BB46C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  llvm::PoisonValue **v25;
  int v26;
  int v28;
  uint64_t v29;
  int v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  llvm::PoisonValue **v34;
  uint8x8_t v35;
  uint64_t v36;
  unsigned __int8 *ShuffleReduction;
  unsigned __int8 *OrderedReduction;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  char v43;
  const char *v44;
  __int16 v45;
  void *v46[2];
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  char v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD v55[6];

  v55[4] = *MEMORY[0x1E0C80C00];
  v53 = v55;
  v54 = 0x400000000;
  v2 = a1 + 72;
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 == a1 + 72)
  {
LABEL_6:
    v7 = 0;
  }
  else
  {
    while (1)
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 48);
      if (v6 != v5 + 40)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        goto LABEL_6;
    }
    while (1)
    {
      if (v6)
        v8 = v6 - 24;
      else
        v8 = 0;
      if (*(_BYTE *)(v8 + 16) == 84)
      {
        v9 = *(_QWORD *)(v8 - 32);
        if (v9)
        {
          if (!*(_BYTE *)(v9 + 16)
            && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v8 + 72)
            && (*(_BYTE *)(v9 + 33) & 0x20) != 0
            && (*(_DWORD *)(*(_QWORD *)(v6 - 56) + 36) - 317) <= 0xC
            && (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 1152))(*a2, v6 - 24))
          {
            v10 = v54;
            if (v54 >= (unint64_t)HIDWORD(v54))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
              v10 = v54;
            }
            v53[v10] = v6 - 24;
            LODWORD(v54) = v54 + 1;
          }
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
      v11 = v3 - 24;
      if (!v3)
        v11 = 0;
      if (v6 == v11 + 40)
        break;
LABEL_27:
      if (v3 == v2)
        goto LABEL_28;
    }
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        break;
      v12 = v3 - 24;
      if (!v3)
        v12 = 0;
      v6 = *(_QWORD *)(v12 + 48);
      if (v6 != v12 + 40)
        goto LABEL_27;
    }
LABEL_28:
    v13 = v53;
    if ((_DWORD)v54)
    {
      v43 = 0;
      v14 = 8 * v54;
      while (2)
      {
        v15 = *v13;
        if (sub_1C4774A9C(*v13))
        {
          if (*(unsigned __int8 *)(v15 + 17) >> 1 == 127)
            v16 = -1;
          else
            v16 = *(unsigned __int8 *)(v15 + 17) >> 1;
        }
        else
        {
          v16 = 0;
        }
        v17 = *(_DWORD *)(*(_QWORD *)(v15 - 32) + 36);
        v18 = 13;
        v19 = 7;
        switch(v17)
        {
          case 320:
            goto LABEL_37;
          case 321:
            v18 = 12;
LABEL_37:
            sub_1C4773D54((uint64_t)v46, v15, 0, 0, 0);
            v20 = v49;
            v21 = v48;
            v22 = v50;
            v23 = v51;
            v24 = v52;
            v49 = v16;
            v25 = *(llvm::PoisonValue ***)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
            v26 = *((_DWORD *)*v25 + 8);
            if (!v26)
              goto LABEL_50;
            if ((v26 & (v26 - 1)) != 0 || (v16 & 2) == 0)
              goto LABEL_50;
            v42 = v48;
            v28 = v20;
            v29 = 54;
            v30 = v18;
            goto LABEL_58;
          case 325:
            goto LABEL_48;
          case 326:
            v19 = 6;
            goto LABEL_48;
          case 327:
            v19 = 9;
            goto LABEL_48;
          case 328:
            v19 = 8;
LABEL_48:
            sub_1C4773D54((uint64_t)v46, v15, 0, 0, 0);
            v20 = v49;
            v21 = v48;
            v22 = v50;
            v23 = v51;
            v24 = v52;
            v49 = v16;
            goto LABEL_49;
          default:
            sub_1C4773D54((uint64_t)v46, v15, 0, 0, 0);
            v20 = v49;
            v21 = v48;
            v22 = v50;
            v23 = v51;
            v24 = v52;
            v49 = v16;
            if (((1 << (v17 - 61)) & 0x10C3) == 0)
            {
              v32 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
              v33 = *(unsigned __int8 **)v32;
              v34 = *(llvm::PoisonValue ***)(v32 + 32);
              if ((v16 & 1) != 0)
              {
                v35 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)*v34 + 8));
                v35.i16[0] = vaddlv_u8(v35);
                if (v35.i32[0] != 1)
                  goto LABEL_50;
                v42 = v48;
                v28 = v20;
                v36 = dword_1C85FAAA0[v17 - 319];
                ShuffleReduction = llvm::getShuffleReduction((uint64_t)v46, v34, v36, 0);
                v44 = "bin.rdx";
                v45 = 259;
                OrderedReduction = sub_1C4773860((uint64_t)v46, v36, v33, (uint64_t)ShuffleReduction, (uint64_t)&v44, 0);
              }
              else
              {
                v42 = v48;
                v28 = v20;
                OrderedReduction = llvm::getOrderedReduction((uint64_t)v46, v33, (uint64_t)v34, dword_1C85FAAA0[v17 - 319], 0);
              }
              goto LABEL_59;
            }
            v19 = 0;
LABEL_49:
            v25 = *(llvm::PoisonValue ***)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
            v31 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)*v25 + 8));
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.i32[0] == 1)
            {
              v42 = v21;
              v28 = v20;
              v29 = dword_1C85FAA6C[v17 - 317];
              v30 = v19;
LABEL_58:
              OrderedReduction = llvm::getShuffleReduction((uint64_t)v46, v25, v29, v30);
LABEL_59:
              v43 = 1;
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v15, (llvm::Value *)OrderedReduction, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v15 + 40) + 40, (uint64_t ***)v15);
              v39 = *(_QWORD *)(v15 + 24);
              v40 = *(_QWORD **)(v15 + 32);
              *v40 = v39;
              *(_QWORD *)(v39 + 8) = v40;
              *(_QWORD *)(v15 + 24) = 0;
              *(_QWORD *)(v15 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v15);
              v20 = v28;
              v21 = v42;
            }
LABEL_50:
            v49 = v20;
            v48 = v21;
            v50 = v22;
            v51 = v23;
            v52 = v24;
            if (v46[0] != &v47)
              free(v46[0]);
            ++v13;
            v14 -= 8;
            if (v14)
              continue;
            v13 = v53;
            v7 = v43;
            break;
        }
        break;
      }
    }
    else
    {
      v7 = 0;
    }
    if (v13 != v55)
      free(v13);
  }
  return v7 & 1;
}

uint64_t sub_1C50BB984()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50BB314(v0);
}

void sub_1C50BB9B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C50BB9D4(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C50BBA04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetTransformInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v8 = *(_QWORD *)(v7 + 56);
  if (!v8)
  {
    sub_1C485C2F0();
    goto LABEL_10;
  }
  v2 = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(&v13, v8, a2);
  v3 = (uint64_t *)(v7 + 64);
  v9 = v13;
  if (!*(_BYTE *)(v7 + 72))
  {
    *(_QWORD *)(v7 + 64) = v13;
    *(_BYTE *)(v7 + 72) = 1;
    goto LABEL_7;
  }
  v13 = 0;
  v10 = *v3;
  *v3 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v13;
    v13 = 0;
    if (v11)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v14);
  return sub_1C50BB46C(a2, v3);
}

void llvm::initializeExpandVectorPredicationPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F77A8);
  if (v1 != -1)
  {
    v4[0] = sub_1C50BBB84;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F77A8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C50BBB84(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Expand vector predication intrinsics";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "expandvp";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F77A0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50BCE4C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50BBC20(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F77A0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8142388;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F77A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C50BBB84;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F77A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::ExpandVectorPredicationPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  _QWORD v9[2];
  BOOL v10;

  v9[0] = a1;
  v9[1] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8;
  v4 = qword_1ED7F7838;
  if (byte_1ED7F7847 >= 0)
    v4 = byte_1ED7F7847 & 0x7F;
  if (v4)
  {
    v5 = 1;
  }
  else
  {
    v6 = qword_1ED7F7920;
    if (byte_1ED7F792F >= 0)
      v6 = byte_1ED7F792F & 0x7F;
    v5 = v6 != 0;
  }
  v10 = v5;
  v7 = sub_1C50BBDE0((uint64_t)v9);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if (v7)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

BOOL sub_1C50BBDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 isVPIntrinsic;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int isSafeToSpeculativelyExecute;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  llvm::FixedVectorType ***v26;
  uint64_t *v27;
  llvm::VPIntrinsic *v28;
  int v29;
  int v30;
  uint64_t MaskParam;
  uint64_t ***VectorLengthParam;
  unint64_t StaticVectorLength;
  char *v34;
  uint64_t *v35;
  llvm::ConstantInt *v36;
  uint64_t v37;
  uint64_t VectorSplat;
  uint64_t i;
  llvm::Value **v40;
  uint64_t v41;
  llvm::Type *v42;
  uint64_t Impl;
  _QWORD **v44;
  _QWORD *v45;
  llvm::Value *v46;
  unsigned int v47;
  uint64_t FunctionalOpcodeForVP;
  llvm::Constant *v50;
  llvm::Type *v51;
  _QWORD ***v52;
  _QWORD *v53;
  uint64_t *Select;
  llvm::Constant *v55;
  uint64_t v56;
  llvm::Value **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  llvm::VPIntrinsic **v63;
  llvm::VPIntrinsic *v64;
  int v65;
  int v66;
  uint64_t *v67;
  void *v68;
  const llvm::APInt *v69;
  uint64_t Declaration;
  llvm::ConstantInt *v71;
  llvm::ValueHandleBase *v72;
  uint64_t **v73;
  llvm::VPIntrinsic *v74;
  void *v75;
  char *v76;
  void *v77;
  unsigned __int8 *v78;
  _QWORD **v79;
  _QWORD *v80;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[256];
  void *v86[2];
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  _BYTE v93[16];
  __int16 v94;
  uint64_t v95[7];

  v95[5] = *MEMORY[0x1E0C80C00];
  v83 = v85;
  v84 = 0x1000000000;
  v1 = *(_QWORD *)a1 + 72;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v2 == v1)
    return 0;
  while (1)
  {
    v4 = v2 - 24;
    if (!v2)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    if (v5 != v4 + 40)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == v1)
      return 0;
  }
  while (1)
  {
    if (v5)
      v7 = v5 - 24;
    else
      v7 = 0;
    if (*(_BYTE *)(v7 + 16) == 84)
    {
      v8 = *(_QWORD *)(v7 - 32);
      if (v8)
      {
        if (!*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 24) == *(_QWORD *)(v7 + 72) && (*(_BYTE *)(v8 + 33) & 0x20) != 0)
        {
          isVPIntrinsic = llvm::VPIntrinsic::isVPIntrinsic((llvm::VPIntrinsic *)*(unsigned int *)(v8 + 36));
          v12 = isVPIntrinsic ? v5 - 24 : 0;
          if (v5 && isVPIntrinsic)
          {
            v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 1200))(**(_QWORD **)(a1 + 8), v12);
            if (*(_BYTE *)(a1 + 16))
            {
              v14 = sub_1C50BD260((uint64_t)&qword_1ED7F7830);
              v15 = sub_1C50BD260((uint64_t)&qword_1ED7F7918);
            }
            else
            {
              v14 = v13;
              v15 = HIDWORD(v13);
            }
            isSafeToSpeculativelyExecute = llvm::isSafeToSpeculativelyExecute(v7, 0, 0, 0);
            v17 = (_DWORD)v15 == 2 || v14 == 1;
            LODWORD(v18) = v17 ? 2 : v14;
            v19 = (_DWORD)v15 == 2 ? 1 : v14;
            v18 = isSafeToSpeculativelyExecute ? v19 : v18;
            if (v18 | v15)
            {
              v20 = v15 << 32;
              if (v84 >= HIDWORD(v84))
              {
                v22 = v20 | v18;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 16);
                v23 = (uint64_t *)((char *)v83 + 16 * v84);
                *v23 = v12;
                v23[1] = v22;
              }
              else
              {
                v21 = (uint64_t *)((char *)v83 + 16 * v84);
                *v21 = v12;
                v21[1] = v20 | v18;
              }
              LODWORD(v84) = v84 + 1;
            }
          }
        }
      }
    }
    v5 = *(_QWORD *)(v5 + 8);
    v9 = v2 - 24;
    if (!v2)
      v9 = 0;
    if (v5 == v9 + 40)
      break;
LABEL_22:
    if (v2 == v1)
      goto LABEL_49;
  }
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2 == v1)
      break;
    v10 = v2 - 24;
    if (!v2)
      v10 = 0;
    v5 = *(_QWORD *)(v10 + 48);
    if (v5 != v10 + 40)
      goto LABEL_22;
  }
LABEL_49:
  v6 = (_DWORD)v84 != 0;
  v24 = (char *)v83;
  if ((_DWORD)v84)
  {
    v25 = (char *)v83 + 16 * v84;
    v26 = (llvm::FixedVectorType ***)v93;
    v27 = &v87;
    while (1)
    {
      v28 = *(llvm::VPIntrinsic **)v24;
      v29 = *((_DWORD *)v24 + 2);
      v30 = *((_DWORD *)v24 + 3);
      if (v29 == 2)
      {
        sub_1C4773D54((uint64_t)v86, *(_QWORD *)v24, 0, 0, 0);
        if ((llvm::VPIntrinsic::canIgnoreVectorLengthParam(v28) & 1) == 0)
        {
          MaskParam = llvm::VPIntrinsic::getMaskParam(v28);
          VectorLengthParam = (uint64_t ***)llvm::VPIntrinsic::getVectorLengthParam(v28);
          StaticVectorLength = llvm::VPIntrinsic::getStaticVectorLength(v28);
          if (HIDWORD(StaticVectorLength) == 1)
          {
            v67 = *(uint64_t **)(*(_QWORD *)(v89 + 56) + 40);
            llvm::ScalableVectorType::get((uint64_t **)(*(_QWORD *)v90 + 1888), (llvm::Type *)StaticVectorLength);
            v91 = v68;
            v92 = (uint64_t)*VectorLengthParam;
            Declaration = llvm::Intrinsic::getDeclaration(v67, 153, (uint64_t *)&v91, 2);
            v71 = *(llvm::ConstantInt **)(*(_QWORD *)v90 + 1960);
            LODWORD(v92) = *(_DWORD *)(*(_QWORD *)v90 + 1968) >> 8;
            if (v92 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v91, 0, 0);
            else
              v91 = 0;
            v72 = llvm::ConstantInt::get(v71, (llvm::LLVMContext *)&v91, v69);
            if (v92 >= 0x41 && v91)
              MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
            if (Declaration)
              v73 = *(uint64_t ***)(Declaration + 24);
            else
              v73 = 0;
            v95[0] = (uint64_t)v72;
            v95[1] = (uint64_t)VectorLengthParam;
            v94 = 257;
            v45 = (_QWORD *)sub_1C4774778((uint64_t *)v86, v73, Declaration, v95, 2, (uint64_t)&v91, 0);
          }
          else
          {
            v82 = MaskParam;
            v34 = v25;
            v35 = v27;
            v36 = (llvm::ConstantInt *)*VectorLengthParam;
            v94 = 257;
            v37 = StaticVectorLength;
            VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)v86, (llvm::Type *)StaticVectorLength, VectorLengthParam, (uint64_t)&v91);
            v91 = v93;
            v92 = 0x1000000000;
            if (v37)
            {
              for (i = 0; i != v37; ++i)
              {
                v40 = llvm::ConstantInt::get(v36, i, 0);
                v41 = v92;
                if (v92 >= (unint64_t)HIDWORD(v92))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v91, (uint64_t)v93, v92 + 1, 8);
                  v41 = v92;
                }
                *((_QWORD *)v91 + v41) = v40;
                v42 = (llvm::Type *)(v92 + 1);
                LODWORD(v92) = v92 + 1;
              }
              v26 = (llvm::FixedVectorType ***)v91;
            }
            else
            {
              v42 = 0;
            }
            Impl = (uint64_t)llvm::ConstantVector::getImpl(v26, (llvm::Type *)v42);
            if (!Impl)
            {
              llvm::FixedVectorType::get(**v26, v42);
              Impl = sub_1C537B3A4(**v44 + 1288, (uint64_t)v44, v26, v42);
            }
            v26 = (llvm::FixedVectorType ***)v93;
            if (v91 != v93)
              free(v91);
            v94 = 257;
            v45 = (_QWORD *)sub_1C4774B48((uint64_t)v86, 36, Impl, VectorSplat, (uint64_t)&v91);
            v27 = v35;
            v25 = v34;
            MaskParam = v82;
          }
          v94 = 257;
          v46 = (llvm::Value *)sub_1C4D89BCC((uint64_t)v86, v45, MaskParam, (uint64_t)&v91);
          llvm::VPIntrinsic::setMaskParam(v28, v46);
          sub_1C50BD048((uint64_t ***)v28);
        }
        if (v86[0] != v27)
          free(v86[0]);
      }
      else if (v29 == 1)
      {
        sub_1C50BD048(*(uint64_t ****)v24);
      }
      if (v30 != 2)
        goto LABEL_72;
      sub_1C4773D54((uint64_t)&v91, (uint64_t)v28, 0, 0, 0);
      v47 = *(_DWORD *)(*((_QWORD *)v28 - 4) + 36);
      FunctionalOpcodeForVP = llvm::VPIntrinsic::getFunctionalOpcodeForVP((llvm::VPIntrinsic *)v47);
      if ((FunctionalOpcodeForVP & 0xFF00000000) == 0 || (FunctionalOpcodeForVP - 13) > 0x11)
      {
        if (v47 - 354 <= 0xC)
        {
          v50 = (llvm::Constant *)llvm::VPIntrinsic::getMaskParam(v28);
          if (v50 && (*((_BYTE *)v50 + 16) != 10 || !llvm::Constant::isAllOnesValue(v50)))
          {
            v51 = *(llvm::Type **)v28;
            if ((*(_DWORD *)(*(_QWORD *)v28 + 8) & 0xFE) == 0x12)
              v51 = **(llvm::Type ***)(*(_QWORD *)v28 + 16);
            llvm::Type::getPrimitiveSizeInBits(v51);
            __asm { BR              X9 }
          }
          __asm { BR              X9 }
        }
        goto LABEL_113;
      }
      v52 = (_QWORD ***)((char *)v28 - 32 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF));
      v53 = *v52;
      Select = (uint64_t *)v52[4];
      v55 = (llvm::Constant *)llvm::VPIntrinsic::getMaskParam(v28);
      if (v55)
      {
        v56 = (uint64_t)v55;
        if ((*((_BYTE *)v55 + 16) != 10 || !llvm::Constant::isAllOnesValue(v55))
          && FunctionalOpcodeForVP <= 0x17
          && ((1 << FunctionalOpcodeForVP) & 0xD80000) != 0)
        {
          v58 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v28, 1, 0);
          v88 = 257;
          Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v91, v56, Select, (uint64_t)v58, (uint64_t)v86, 0);
        }
      }
      v26 = (llvm::FixedVectorType ***)v93;
      if ((*((_BYTE *)v28 + 23) & 0x10) == 0)
      {
        v75 = 0;
        v76 = &byte_1C871356D;
        goto LABEL_108;
      }
      v59 = ***(_QWORD ***)v28;
      v60 = *(_QWORD *)(v59 + 152);
      v61 = *(unsigned int *)(v59 + 168);
      if (!(_DWORD)v61)
        goto LABEL_106;
      LODWORD(v62) = (v61 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v63 = (llvm::VPIntrinsic **)(v60 + 16 * v62);
      v64 = *v63;
      if (*v63 != v28)
        break;
LABEL_107:
      v74 = v63[1];
      v77 = *(void **)v74;
      v76 = (char *)v74 + 16;
      v75 = v77;
LABEL_108:
      v88 = 261;
      v86[0] = v76;
      v86[1] = v75;
      v78 = sub_1C4773860((uint64_t)&v91, FunctionalOpcodeForVP, v53, (uint64_t)Select, (uint64_t)v86, 0);
      sub_1C50BD2E4((uint64_t)v78, (uint64_t)v28);
      llvm::Value::doRAUW(v28, (llvm::Value *)v78, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v28 + 5) + 40, (uint64_t ***)v28);
      v79 = (_QWORD **)*((_QWORD *)v28 + 3);
      v80 = (_QWORD *)*((_QWORD *)v28 + 4);
      *v80 = v79;
      v79[1] = v80;
      *((_QWORD *)v28 + 3) = 0;
      *((_QWORD *)v28 + 4) = 0;
      llvm::Value::deleteValue(v28);
LABEL_113:
      if (v91 != v93)
        free(v91);
LABEL_72:
      v24 += 16;
      if (v24 == v25)
      {
        v24 = (char *)v83;
        v6 = 1;
        goto LABEL_118;
      }
    }
    v65 = 1;
    while (v64 != (llvm::VPIntrinsic *)-4096)
    {
      v66 = v62 + v65++;
      v62 = v66 & (v61 - 1);
      v64 = *(llvm::VPIntrinsic **)(v60 + 16 * v62);
      if (v64 == v28)
      {
        v63 = (llvm::VPIntrinsic **)(v60 + 16 * v62);
        goto LABEL_107;
      }
    }
LABEL_106:
    v63 = (llvm::VPIntrinsic **)(v60 + 16 * v61);
    goto LABEL_107;
  }
LABEL_118:
  if (v24 != v85)
    free(v24);
  return v6;
}

uint64_t sub_1C50BCE4C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50BBC20(v0);
}

void sub_1C50BCE78(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C50BCE9C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C50BCECC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetTransformInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v8 = *(_QWORD *)(v7 + 56);
  if (!v8)
  {
    sub_1C485C2F0();
LABEL_17:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_7;
  }
  v2 = v20;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(&v16, v8, a2);
  v3 = (_QWORD *)(v7 + 64);
  v9 = v16;
  if (!*(_BYTE *)(v7 + 72))
  {
    *(_QWORD *)(v7 + 64) = v16;
    *(_BYTE *)(v7 + 72) = 1;
    goto LABEL_7;
  }
  v16 = 0;
  v10 = *v3;
  *v3 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v16;
    v16 = 0;
    if (v11)
      goto LABEL_17;
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v17);
  v17 = a2;
  v18 = v3;
  v12 = qword_1ED7F7838;
  if (byte_1ED7F7847 >= 0)
    v12 = byte_1ED7F7847 & 0x7F;
  if (v12)
  {
    v13 = 1;
  }
  else
  {
    v14 = qword_1ED7F7920;
    if (byte_1ED7F792F >= 0)
      v14 = byte_1ED7F792F & 0x7F;
    v13 = v14 != 0;
  }
  LOBYTE(v19) = v13;
  return sub_1C50BBDE0((uint64_t)&v17);
}

uint64_t sub_1C50BD048(uint64_t ***a1)
{
  uint64_t result;
  unint64_t StaticVectorLength;
  llvm::ConstantInt *v4;
  uint64_t Declaration;
  const llvm::APInt *v6;
  uint64_t v7;
  llvm::ConstantInt *v8;
  unsigned int v9;
  unint64_t v10;
  llvm::ValueHandleBase *v11;
  uint64_t **v12;
  llvm::Value *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  __int16 v17;
  llvm::ConstantInt *v18;
  void *v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  result = llvm::VPIntrinsic::canIgnoreVectorLengthParam((llvm::VPIntrinsic *)a1);
  if ((result & 1) == 0)
  {
    result = llvm::VPIntrinsic::getVectorLengthParam((llvm::VPIntrinsic *)a1);
    if (result)
    {
      StaticVectorLength = llvm::VPIntrinsic::getStaticVectorLength((llvm::VPIntrinsic *)a1);
      v4 = (llvm::ConstantInt *)(***a1 + 1960);
      v18 = v4;
      if (HIDWORD(StaticVectorLength) == 1)
      {
        Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)a1[5][7][5], 382, (uint64_t *)&v18, 1);
        sub_1C4D8ADA0((uint64_t)v19, a1[5], (uint64_t)(a1 + 3), 0, 0, 0);
        v7 = StaticVectorLength;
        v8 = *(llvm::ConstantInt **)(*(_QWORD *)v21 + 1960);
        v9 = *(_DWORD *)(*(_QWORD *)v21 + 1968);
        v16 = v9 >> 8;
        if (v9 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v15, v7, 0);
        }
        else
        {
          if (v9 <= 0xFF)
            v10 = 0;
          else
            v10 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v9);
          v15 = (const char *)(v10 & v7);
        }
        v11 = llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v15, v6);
        if (v16 >= 0x41 && v15)
          MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
        if (Declaration)
          v12 = *(uint64_t ***)(Declaration + 24);
        else
          v12 = 0;
        v15 = "vscale";
        v17 = 259;
        v14 = sub_1C4774778((uint64_t *)v19, v12, Declaration, 0, 0, (uint64_t)&v15, 0);
        v15 = "scalable_size";
        v17 = 259;
        v13 = (llvm::Value *)sub_1C4EC4040((uint64_t)v19, v14, (uint64_t)v11, (uint64_t)&v15, 1, 0);
        if (v19[0] != &v20)
          free(v19[0]);
      }
      else
      {
        v13 = (llvm::Value *)llvm::ConstantInt::get(v4, StaticVectorLength, 0);
      }
      return llvm::VPIntrinsic::setVectorLengthParam((llvm::VPIntrinsic *)a1, v13);
    }
  }
  return result;
}

uint64_t sub_1C50BD260(uint64_t a1)
{
  char v1;
  BOOL v2;
  int *v3;
  uint64_t v4;
  int v6;
  int v7;
  _BOOL4 v9;

  v1 = *(_BYTE *)(a1 + 23);
  v2 = v1 < 0;
  v3 = *(int **)a1;
  if (v1 >= 0)
    v3 = (int *)a1;
  v4 = v1 & 0x7F;
  if (v2)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4 != 7)
    return 0;
  if (*v3 == 1668507972 && *(int *)((char *)v3 + 3) == 1685217635)
    return 1;
  v6 = *v3;
  v7 = *(int *)((char *)v3 + 3);
  v9 = v6 == 1986948931 && v7 == 1953654134;
  return (2 * v9);
}

uint64_t sub_1C50BD2E4(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(unsigned __int8 *)(result + 16) >= 0x1Cu)
  {
    v3 = result;
    result = sub_1C4774A9C(result);
    if ((_DWORD)result)
    {
      result = sub_1C4774A9C(a2);
      if ((_DWORD)result)
        *(_BYTE *)(v3 + 17) |= *(_BYTE *)(a2 + 17) & 0xFE;
    }
  }
  return result;
}

uint64_t sub_1C50BD338()
{
  __n128 v1;
  int v2;
  const char *v3;

  v3 = "";
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Options: <empty>|Legal|Discard|Convert. If non-empty, ignore TargetTransformInfo an"
                                     "d always use this transformation for the %evl parameter (Used in testing).";
  v1.n128_u64[1] = 157;
  sub_1C47AD050((uint64_t)&qword_1ED7F77B0, 0, 0);
  qword_1ED7F7830 = 0;
  qword_1ED7F7838 = 0;
  qword_1ED7F7858 = 0;
  unk_1ED7F7860 = 0;
  qword_1ED7F7850 = 0;
  byte_1ED7F7868 = 0;
  unk_1ED7F7840 = 0;
  unk_1ED7F7848 = &unk_1E819E950;
  qword_1ED7F77B0 = (uint64_t)&unk_1E819E480;
  qword_1ED7F7870 = (uint64_t)&unk_1E819E970;
  qword_1ED7F7878 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7F7890 = (uint64_t)&qword_1ED7F7878;
  sub_1C61DDF8C(&v3, &v2, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F77B0);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7F77B0, &dword_1C475E000);
  v3 = "";
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Options: <empty>|Legal|Discard|Convert. If non-empty, Ignore TargetTransformInfo an"
                                     "d always use this transformation for the %mask parameter (Used in testing).";
  v1.n128_u64[1] = 158;
  sub_1C47AD050((uint64_t)&qword_1ED7F7898, 0, 0);
  qword_1ED7F7918 = 0;
  qword_1ED7F7920 = 0;
  qword_1ED7F7940 = 0;
  unk_1ED7F7948 = 0;
  qword_1ED7F7930 = (uint64_t)&unk_1E819E950;
  unk_1ED7F7938 = 0;
  byte_1ED7F7950 = 0;
  unk_1ED7F7928 = 0;
  qword_1ED7F7898 = (uint64_t)&unk_1E819E480;
  qword_1ED7F7958 = (uint64_t)&unk_1E819E970;
  qword_1ED7F7960[0] = &off_1E7FA8CB8;
  qword_1ED7F7978 = (uint64_t)qword_1ED7F7960;
  sub_1C61DE000(&v3, &v2, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F7898);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7F7898, &dword_1C475E000);
}

_QWORD *llvm::FaultMaps::FaultMaps(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  *result = result + 1;
  result[2] = 0;
  result[3] = a2;
  return result;
}

{
  result[1] = 0;
  *result = result + 1;
  result[2] = 0;
  result[3] = a2;
  return result;
}

void llvm::FaultMaps::recordFaultingOp(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;

  v8 = *(_QWORD *)(a1[3][34] + 8);
  v9 = sub_1C484358C(v8 + 192, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a3;
  v11 = a1[3][43];
  v12 = sub_1C484358C(v8 + 192, 24, 3);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 18) << 16;
  *(_BYTE *)v12 = 2;
  *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v11;
  v14 = sub_1C484358C(v8 + 192, 32, 3);
  *(_BYTE *)v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = sub_1C484358C(v8 + 192, 24, 3);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 18) << 16;
  *(_BYTE *)v15 = 2;
  *(_DWORD *)(v15 + 1) = v16 | (*(unsigned __int8 *)(v15 + 4) << 24);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = a4;
  v17 = a1[3][43];
  v18 = sub_1C484358C(v8 + 192, 24, 3);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 18) << 16;
  *(_BYTE *)v18 = 2;
  *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = v17;
  v20 = sub_1C484358C(v8 + 192, 32, 3);
  *(_BYTE *)v20 = 0;
  *(_DWORD *)(v20 + 1) = (*(unsigned __int8 *)(v20 + 4) << 24) | 0x12;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = v15;
  *(_QWORD *)(v20 + 24) = v18;
  v21 = (uint64_t *)a1[3][41];
  v23 = a1 + 1;
  v22 = a1[1];
  if (v22)
  {
    while (1)
    {
      while (1)
      {
        v24 = (uint64_t **)v22;
        v25 = (_BYTE *)v22[4];
        if (!sub_1C50BDA5C(v21, v25))
          break;
        v22 = *v24;
        v23 = v24;
        if (!*v24)
          goto LABEL_9;
      }
      if (!sub_1C50BDA5C(v25, v21))
        break;
      v22 = v24[1];
      if (!v22)
      {
        v23 = v24 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v24 = a1 + 1;
LABEL_9:
    v26 = (uint64_t *)v24;
    v24 = (uint64_t **)operator new(0x40uLL);
    v24[4] = v21;
    v24[5] = 0;
    v24[6] = 0;
    v24[7] = 0;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = v26;
    *v23 = (uint64_t *)v24;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v24;
    if (v27)
    {
      *a1 = v27;
      v28 = *v23;
    }
    sub_1C4768E74(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v30 = (char *)v24[6];
  v29 = (unint64_t)v24[7];
  if ((unint64_t)v30 >= v29)
  {
    v32 = (char *)v24[5];
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v32) >> 3) + 1;
    if (v33 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v32) >> 3);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0x555555555555555)
      v35 = 0xAAAAAAAAAAAAAAALL;
    else
      v35 = v33;
    if (v35 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v36 = 3 * v35;
    v37 = (char *)operator new(24 * v35);
    v38 = &v37[8 * ((v30 - v32) >> 3)];
    *(_DWORD *)v38 = a2;
    *((_QWORD *)v38 + 1) = v14;
    *((_QWORD *)v38 + 2) = v20;
    v31 = v38 + 24;
    if (v30 == v32)
    {
      v40 = &v37[8 * ((v30 - v32) >> 3)];
    }
    else
    {
      do
      {
        v39 = *(_OWORD *)(v30 - 24);
        v40 = v38 - 24;
        *((_QWORD *)v38 - 1) = *((_QWORD *)v30 - 1);
        *(_OWORD *)(v38 - 24) = v39;
        v30 -= 24;
        v38 -= 24;
      }
      while (v30 != v32);
    }
    v24[5] = (uint64_t *)v40;
    v24[6] = (uint64_t *)v31;
    v24[7] = (uint64_t *)&v37[8 * v36];
    if (v32)
      operator delete(v32);
  }
  else
  {
    *(_DWORD *)v30 = a2;
    v31 = v30 + 24;
    *((_QWORD *)v30 + 1) = v14;
    *((_QWORD *)v30 + 2) = v20;
  }
  v24[6] = (uint64_t *)v31;
}

unsigned int ***llvm::FaultMaps::serializeToFaultMapSection(unsigned int ***this)
{
  unsigned int ***v1;
  unsigned int *v2;
  uint64_t v3;
  unint64_t Symbol;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int ***v7;
  BOOL v8;
  const char *v9;
  __int16 v10;

  if (this[2])
  {
    v1 = this;
    v2 = this[3][34];
    v3 = *((_QWORD *)v2 + 1);
    (*(void (**)(unsigned int *, _QWORD, _QWORD))(*(_QWORD *)v2 + 168))(v2, *(_QWORD *)(*(_QWORD *)(v3 + 168) + 440), 0);
    v9 = "__LLVM_FaultMaps";
    v10 = 259;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)&v9);
    (*(void (**)(unsigned int *, unint64_t, _QWORD))(*(_QWORD *)v2 + 192))(v2, Symbol, 0);
    (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v2 + 512))(v2, 1, 1);
    (*(void (**)(unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v2 + 512))(v2, 0, 1);
    (*(void (**)(unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v2 + 512))(v2, 0, 2);
    this = (unsigned int ***)(*(uint64_t (**)(unsigned int *, unsigned int **, uint64_t))(*(_QWORD *)v2 + 512))(v2, v1[2], 4);
    v5 = *v1;
    if (*v1 != (unsigned int **)(v1 + 1))
    {
      do
      {
        this = (unsigned int ***)llvm::FaultMaps::emitFunctionInfo((uint64_t)v1, (const llvm::MCSymbol *)v5[4], v5 + 5);
        v6 = v5[1];
        if (v6)
        {
          do
          {
            v7 = (unsigned int ***)v6;
            v6 = *(unsigned int **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (unsigned int ***)v5[2];
            v8 = *v7 == v5;
            v5 = (unsigned int **)v7;
          }
          while (!v8);
        }
        v5 = (unsigned int **)v7;
      }
      while (v7 != v1 + 1);
    }
  }
  return this;
}

uint64_t llvm::FaultMaps::emitFunctionInfo(uint64_t a1, const llvm::MCSymbol *a2, unsigned int **a3)
{
  llvm::MCStreamer *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int *v7;

  v4 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 24) + 272);
  llvm::MCStreamer::emitSymbolValue(v4, a2, 8, 0);
  (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t))(*(_QWORD *)v4 + 512))(v4, 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3), 4);
  result = (*(uint64_t (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v4 + 512))(v4, 0, 4);
  v7 = *a3;
  v6 = a3[1];
  while (v7 != v6)
  {
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v4 + 512))(v4, *v7, 4);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 504))(v4, *((_QWORD *)v7 + 1), 4, 0);
    result = (*(uint64_t (**)(llvm::MCStreamer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 504))(v4, *((_QWORD *)v7 + 2), 4, 0);
    v7 += 6;
  }
  return result;
}

char *llvm::FaultMaps::faultTypeToString(int a1)
{
  return off_1E8142418[a1 - 1];
}

BOOL sub_1C50BDA5C(_BYTE *a1, _BYTE *a2)
{
  const void *v2;
  size_t v3;
  size_t *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;

  if ((*a1 & 4) != 0)
  {
    v4 = (size_t *)*((_QWORD *)a1 - 1);
    v5 = *v4;
    v2 = v4 + 2;
    v3 = v5;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if ((*a2 & 4) != 0)
  {
    v8 = (size_t *)*((_QWORD *)a2 - 1);
    v9 = *v8;
    v6 = v8 + 2;
    v7 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (v7 >= v3)
    v10 = v3;
  else
    v10 = v7;
  if (v10 && (v11 = memcmp(v2, v6, v10)) != 0)
  {
    v12 = (v11 >> 31) | 1;
  }
  else
  {
    if (v3 < v7)
      v12 = -1;
    else
      v12 = 1;
    if (v3 == v7)
      v12 = 0;
  }
  return v12 == -1;
}

uint64_t sub_1C50BDAE4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Insert fentry calls";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "fentry-insert";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6EDA;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50BDB74;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50BDB74()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6EDA) = &off_1E8142440;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F7980);
  if (v2 != -1)
  {
    v6[0] = sub_1C50BDAE4;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F7980, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C50BDC4C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50BDCE0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50BDD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  void *p_p;
  uint64_t v19;
  char v20;
  size_t v21;
  unint64_t v22;
  const void *v23;
  size_t v24;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *__p;
  size_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (!v3)
    goto LABEL_24;
  if (!*(_DWORD *)(v3 + 8))
    goto LABEL_24;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    goto LABEL_24;
  v5 = *(_DWORD *)(v4 + 40);
  if (!v5)
    goto LABEL_24;
  v6 = *(_QWORD *)(v4 + 24);
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v46 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v46 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v46;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0x2CC0F4FE580BCA48)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1ED7EAC80 ^ 0x2CC0F4FE580BCA48)) >> 47) ^ 0x4FED8D8C2C65AF2ELL);
  v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x2D797274;
  for (i = 1; ; ++i)
  {
    v11 = v9 & (v5 - 1);
    v12 = v6 + 24 * v11;
    v13 = *(_QWORD **)v12;
    if (*(_QWORD *)v12 == -1)
    {
      if ("fentry-call" == (char *)-1)
        goto LABEL_20;
      goto LABEL_9;
    }
    if (v13 != (_QWORD *)-2)
      break;
    if ("fentry-call" == (char *)-2)
      goto LABEL_20;
LABEL_9:
    if (v13 == (_QWORD *)-1)
      goto LABEL_24;
    v9 = i + v11;
  }
  if (*(_QWORD *)(v12 + 8) != 11)
    goto LABEL_9;
  if (*v13 != 0x632D7972746E6566 || *(_QWORD *)((char *)v13 + 3) != 0x6C6C61632D797274)
    goto LABEL_9;
LABEL_20:
  v15 = *(_QWORD *)(v12 + 16);
  if (!v15)
  {
LABEL_24:
    v16 = 0;
    HIBYTE(v49) = 0;
    p_p = &__p;
    goto LABEL_25;
  }
  v17 = *(unsigned int *)(v15 + 12);
  v16 = *(unsigned int *)(v15 + 16);
  if (v16 >= 0x17)
  {
    if ((v16 | 7) == 0x17)
      v45 = (v16 & 0xFFFFFFF8) + 8;
    else
      v45 = v16 | 7;
    p_p = operator new(v45 + 1);
    v48 = v16;
    v49 = v45 - 0x7FFFFFFFFFFFFFFFLL;
    __p = p_p;
  }
  else
  {
    HIBYTE(v49) = *(_DWORD *)(v15 + 16);
    p_p = &__p;
    if (!(_DWORD)v16)
    {
      v16 = 0;
      goto LABEL_25;
    }
  }
  memmove(p_p, (const void *)(v15 + v17 + 25), v16);
LABEL_25:
  v19 = 0;
  *((_BYTE *)p_p + v16) = 0;
  v20 = HIBYTE(v49);
  if (v49 >= 0)
    v21 = HIBYTE(v49) & 0x7F;
  else
    v21 = v48;
  if (v21 == 4)
  {
    if (v49 >= 0)
      v22 = HIBYTE(v49);
    else
      v22 = v48;
    if (v49 >= 0)
      v23 = &__p;
    else
      v23 = __p;
    if (v22 >= 4)
      v24 = 4;
    else
      v24 = v22;
    if (memcmp(v23, "true", v24) || v22 != 4)
    {
      v19 = 0;
      goto LABEL_43;
    }
    v27 = *(_QWORD **)(a2 + 328);
    v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    v29 = (unint64_t *)v27[7];
    v30 = *(_QWORD *)(v28 + 8) + 1248;
    v31 = (llvm::MachineFunction *)v27[4];
    v50 = 0;
    v32 = *((_QWORD *)v31 + 28);
    if (v32)
      *((_QWORD *)v31 + 28) = *(_QWORD *)v32;
    else
      v32 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
    v51 = 0;
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v31, v30, &v51, 0);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, v51);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
    v33 = v27[5];
    *(_QWORD *)(v32 + 24) = v33;
    v34 = *(_QWORD *)(v33 + 32);
    v35 = *(unsigned int *)(v32 + 40);
    if ((_DWORD)v35)
    {
      v38 = *(_QWORD *)(v32 + 32);
      v39 = *(_QWORD *)(v34 + 40);
      v40 = 32 * v35;
      do
      {
        if (!*(_BYTE *)v38)
        {
          v41 = *(unsigned int *)(v38 + 4);
          if ((int)v41 >= 0)
            v42 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v41);
          else
            v42 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
          v43 = *v42;
          if (*v42)
          {
            v44 = *(_QWORD *)(v43 + 16);
            *(_QWORD *)(v43 + 16) = v38;
            *(_QWORD *)(v38 + 16) = v44;
            if ((*(_BYTE *)(v38 + 3) & 1) != 0)
            {
              *(_QWORD *)(v38 + 24) = v43;
            }
            else
            {
              *(_QWORD *)(v38 + 24) = 0;
              v42 = (uint64_t *)(v44 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v38 + 16) = v38;
            *(_QWORD *)(v38 + 24) = 0;
          }
          *v42 = v38;
        }
        v38 += 32;
        v40 -= 32;
      }
      while (v40);
    }
    v36 = *(_QWORD *)(v34 + 728);
    if (v36)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 24))(v36, v32);
    v37 = *v29 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v32 = v37 | *(_QWORD *)v32 & 7;
    *(_QWORD *)(v32 + 8) = v29;
    *(_QWORD *)(v37 + 8) = v32;
    *v29 = *v29 & 7 | v32;
    v19 = 1;
    if (v20 < 0)
LABEL_44:
      operator delete(__p);
  }
  else
  {
LABEL_43:
    if (v20 < 0)
      goto LABEL_44;
  }
  return v19;
}

uint64_t sub_1C50BE18C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Finalize ISel and expand pseudo-instructions";
  *(_QWORD *)(v2 + 8) = 44;
  *(_QWORD *)(v2 + 16) = "finalize-isel";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6EDB;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50BE21C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C50BE21C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6EDB);
  *result = &off_1E8142510;
  return result;
}

void sub_1C50BE25C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50BE2F0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50BE380(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 120))(*(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(a2 + 328);
  if (v4 == a2 + 320)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v4 + 48;
      v7 = *(_QWORD *)(v4 + 56);
      if (v7 != v4 + 48)
      {
        do
        {
          if (!v7 || (v8 = v7, (*(_BYTE *)v7 & 4) == 0))
          {
            v8 = v7;
            if ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              v8 = v7;
              do
                v8 = *(_QWORD *)(v8 + 8);
              while ((*(_WORD *)(v8 + 44) & 8) != 0);
            }
          }
          v9 = *(_QWORD *)(v8 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 11) & 8) != 0)
          {
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2144))(v3);
            if (v10 == v4)
            {
              v5 = 1;
            }
            else
            {
              v6 = v10 + 48;
              v9 = *(_QWORD *)(v10 + 56);
              v5 = 1;
              v4 = v10;
            }
          }
          v7 = v9;
        }
        while (v9 != v6);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2 + 320);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1480))(v3, a2);
  return v5 & 1;
}

uint64_t sub_1C50BE494(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Fixup Statepoint Caller Saved";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "fixup-statepoint-caller-saved";
  *(_QWORD *)(v2 + 24) = 29;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6EDC;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50BE520;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50BE520()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6EDC) = &off_1E81425D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F7990);
  if (v2 != -1)
  {
    v6[0] = sub_1C50BE494;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F7990, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C50BE5F8(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50BE68C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50BE718()
{
  return "Fixup Statepoint Caller Saved";
}

void *sub_1C50BE728(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C50BE758(llvm::FunctionPass *a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  llvm::MachineFunction *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int *v32;
  unint64_t v33;
  unsigned int *v34;
  _BOOL4 v35;
  uint64_t **v36;
  uint64_t **v37;
  int v38;
  int v39;
  int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  unsigned int v56;
  llvm::MachineInstr *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  _DWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t **v96;
  unint64_t v97;
  uint64_t **v98;
  uint64_t v99;
  int64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  int *v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t SpillStackObject;
  uint64_t *j;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unsigned __int8 *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int64_t *v128;
  int64_t v129;
  unsigned __int8 v130;
  unint64_t v131;
  uint64_t **v132;
  uint64_t **v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  llvm::MachineInstr *v138;
  uint64_t v139;
  unsigned int RegisterUseOperandIdx;
  uint64_t v141;
  unsigned int v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  BOOL v151;
  unint64_t v152;
  uint64_t *v153;
  int v154;
  int v155;
  int v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  int v177;
  int *v178;
  int v179;
  BOOL v180;
  int v181;
  int *v182;
  int v183;
  BOOL v184;
  int v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  int v191;
  BOOL v192;
  int v193;
  llvm::MachineFunction *v194;
  unsigned int v195;
  uint64_t v196;
  unsigned __int8 *v197;
  unint64_t v198;
  unsigned __int8 *v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  unsigned __int8 v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  llvm::MachineFunction *v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  unsigned int v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  llvm::MachineInstr *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  llvm::MachineInstr *v228;
  unsigned int v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  unsigned int TiedOperandIdx;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t *v244;
  unint64_t v245;
  uint64_t **v246;
  unsigned int v247;
  unint64_t v248;
  int v249;
  uint64_t **v250;
  uint64_t v251;
  unint64_t v252;
  llvm::MachineFunction *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  int *v257;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int *v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int *v274;
  int v275;
  unint64_t v276;
  uint64_t *FixedStack;
  int v278;
  uint64_t v279;
  char *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t **v283;
  unint64_t v284;
  uint64_t **v285;
  uint64_t v286;
  __int16 v287;
  unint64_t v288;
  char v289;
  unint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  llvm::MachineInstr *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  llvm::MachineInstr *v299;
  uint64_t v300;
  _DWORD *v301;
  char *v302;
  _QWORD *v303;
  unsigned int v304;
  int v305;
  int v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _DWORD *v312;
  unsigned int v314;
  uint64_t *v315;
  _QWORD *v316;
  uint64_t *v317;
  unsigned int v318;
  int v319;
  uint64_t *v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  _DWORD *v324;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned __int8 *v339;
  BOOL v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  _DWORD *v346;
  unint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  char *v350;
  char *v351;
  _BOOL4 v352;
  int v353;
  char *v354;
  unsigned int v355;
  int v356;
  _DWORD *v357;
  unsigned __int8 *v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD v361[2];
  _DWORD *v362;
  uint64_t v363;
  unsigned int v364;
  void *v365;
  uint64_t v366;
  _BYTE v367[32];
  uint64_t *v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD v371[2];
  unsigned int v372;
  _QWORD v373[2];
  unsigned int v374;
  void *v375;
  uint64_t v376;
  _BYTE v377[128];
  llvm::MachineInstr *v378;
  llvm::MachineFunction *v379;
  uint64_t *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  char v386;
  void *v387;
  uint64_t v388;
  _BYTE v389[32];
  void *v390;
  uint64_t v391;
  _BYTE v392[32];
  void *v393;
  uint64_t v394;
  _BYTE v395[32];
  unsigned int *v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t *v399;
  uint64_t v400;
  _QWORD v401[4];
  _QWORD **v402;
  _QWORD *v403[2];
  uint64_t *v404;
  uint64_t v405;
  _BYTE v406[32];
  uint64_t *v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;

  v410 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) != 0
    || (*(_WORD *)(*(_QWORD *)a2 + 18) & 0x4000) == 0)
  {
    LOBYTE(v3) = 0;
    return v3 & 1;
  }
  v375 = v377;
  v376 = 0x1000000000;
  v5 = *(_QWORD *)(a2 + 328);
  if (v5 != a2 + 320)
  {
    v6 = 0;
    do
    {
      for (i = *(_QWORD *)(v5 + 56); i != v5 + 48; i = *(_QWORD *)(i + 8))
      {
        if (**(_WORD **)(i + 16) == 31)
        {
          if (v6 >= HIDWORD(v376))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v375, (uint64_t)v377, v6 + 1, 8);
            v6 = v376;
          }
          *((_QWORD *)v375 + v6) = i;
          v6 = v376 + 1;
          LODWORD(v376) = v376 + 1;
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != a2 + 320);
    if (v6)
    {
      v359 = a2;
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
      v9 = *(_QWORD *)(a2 + 56);
      v360 = v8;
      v361[0] = v9;
      v362 = 0;
      v363 = 0;
      v361[1] = v8;
      v364 = 0;
      v365 = v367;
      v366 = 0x800000000;
      v368 = (uint64_t *)&v369;
      v369 = 0;
      v371[0] = 0;
      v371[1] = 0;
      v370 = 0;
      v372 = 0;
      v373[0] = 0;
      v373[1] = 0;
      v374 = 0;
      if (!(_DWORD)v376)
      {
        v10 = 0;
        v11 = 0;
        LOBYTE(v3) = 0;
LABEL_576:
        sub_1C61DEB2C(v11, v10);
        MEMORY[0x1CAA32FB4](v373[0], 8);
        v342 = v371[0];
        if (v372)
        {
          v343 = 88 * v372;
          v344 = v371[0] + 24;
          do
          {
            if ((*(_QWORD *)(v344 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v345 = *(void **)(v344 - 16);
              if ((void *)v344 != v345)
                free(v345);
            }
            v344 += 88;
            v343 -= 88;
          }
          while (v343);
          v342 = v371[0];
        }
        MEMORY[0x1CAA32FB4](v342, 8);
        sub_1C61247C0((uint64_t)&v368, v369);
        if (v365 != v367)
          free(v365);
        v346 = v362;
        if (v364)
        {
          v347 = (unint64_t)v364 << 6;
          v348 = v362 + 6;
          do
          {
            if (*((_DWORD *)v348 - 6) <= 0xFFFFFFFD)
            {
              v349 = (_QWORD *)*(v348 - 2);
              if (v348 != v349)
                free(v349);
            }
            v348 += 8;
            v347 -= 64;
          }
          while (v347);
          v346 = v362;
        }
        MEMORY[0x1CAA32FB4](v346, 8);
        goto LABEL_20;
      }
      v12 = 0;
      v3 = 0;
      v13 = (char *)v375;
      v14 = (char *)v375 + 8 * v376;
      v15 = byte_1ED7F7AD8 != 0;
      v16 = &unk_1ED7F7000;
      v350 = v14;
      while (1)
      {
        ++v12;
        if (v16[1520])
          v15 = (v12 < dword_1ED7F7C58) & v15;
        v17 = *(_QWORD *)v13;
        v18 = *(_QWORD *)(*(_QWORD *)v13 + 16);
        v19 = *(unsigned __int8 *)(v18 + 4);
        if ((*(_BYTE *)(v18 + 8) & 2) == 0 || (v38 = *(_DWORD *)(v17 + 40), v38 == v19))
        {
          v20 = *(unsigned __int8 *)(v18 + 4);
        }
        else
        {
          v39 = v38 - 1;
          v20 = *(unsigned __int8 *)(v18 + 4);
          do
          {
            v40 = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 32 * v19);
            if ((v40 & 0x10000FF) != 0x1000000)
              break;
            v20 += (v40 & 0x2000000) == 0;
            if (v39 == v19)
              break;
            ++v19;
          }
          while ((v40 & 0x2000000) == 0);
        }
        v21 = *(_QWORD *)(v18 + 32);
        if (v21)
        {
          v22 = -1;
          do
            ++v22;
          while (*(_WORD *)(v21 + 2 * v22));
        }
        else
        {
          v22 = 0;
        }
        v23 = v22 + v20;
        v24 = v22 + v20 + 2;
        v25 = *(_QWORD *)(v17 + 32);
        v26 = v23 + *(_DWORD *)(v25 + 32 * v24 + 16);
        if ((*(_BYTE *)(v25 + 32 * (v26 + 7) + 16) & 2) == 0)
          break;
        v35 = 0;
LABEL_526:
        v3 |= v35;
        v13 += 8;
        if (v13 == v14)
        {
          v11 = v373[0];
          v10 = v374;
          goto LABEL_576;
        }
      }
      v354 = v13;
      v355 = v12;
      v356 = v3;
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v360 + 40))(v360, v359, *(unsigned int *)(v25 + 32 * (v26 + 5) + 16));
      v28 = *(llvm::MachineFunction **)(*(_QWORD *)(v17 + 24) + 32);
      v378 = (llvm::MachineInstr *)v17;
      v379 = v28;
      v381 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v28 + 2) + 176))(*((_QWORD **)v28 + 2));
      v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v379 + 2) + 104))(*((_QWORD *)v379 + 2));
      v383 = *((_QWORD *)v379 + 7);
      v384 = v27;
      v385 = v361;
      v386 = v15 & 1;
      v387 = v389;
      v388 = 0x800000000;
      v390 = v392;
      v391 = 0x800000000;
      v393 = v395;
      v394 = 0x800000000;
      v382 = (_QWORD *)v29;
      v380 = 0;
      v396 = 0;
      v397 = 0;
      v398 = 0;
      v30 = *(_QWORD *)(v17 + 24);
      while (1)
      {
        v17 = *(_QWORD *)(v17 + 8);
        if (v17 == v30 + 48)
          break;
        if (**(_WORD **)(v17 + 16) == 31)
          goto LABEL_38;
      }
      v37 = *(uint64_t ***)(v30 + 88);
      v36 = *(uint64_t ***)(v30 + 96);
      while (v37 != v36)
      {
        v31 = *v37;
        if (*((_BYTE *)*v37 + 184))
        {
          v380 = *v37;
          goto LABEL_39;
        }
        ++v37;
      }
LABEL_38:
      v31 = 0;
LABEL_39:
      v404 = v31;
      v32 = &v362[16 * (unint64_t)v364];
      if ((_DWORD)v363)
      {
        if (v364)
        {
          v33 = (unint64_t)v364 << 6;
          v34 = v362;
          while (*v34 >= 0xFFFFFFFE)
          {
            v34 += 16;
            v33 -= 64;
            if (!v33)
              goto LABEL_44;
          }
        }
        else
        {
          v34 = v362;
        }
      }
      else
      {
LABEL_44:
        v34 = &v362[16 * (unint64_t)v364];
      }
      v41 = &v362[16 * (unint64_t)v364];
LABEL_58:
      while (v34 != v41)
      {
        v34[14] = 0;
        v42 = v34 + 16;
        while (v42 != v32)
        {
          v43 = *v42;
          v42 += 16;
          if (v43 <= 0xFFFFFFFD)
          {
            v34 = v42 - 16;
            goto LABEL_58;
          }
        }
        v34 = v32;
      }
      LODWORD(v366) = 0;
      sub_1C61247C0((uint64_t)&v368, v369);
      v369 = 0;
      v370 = 0;
      v368 = (uint64_t *)&v369;
      if (v31 && v372)
      {
        v44 = (v372 - 1) & ((v31 >> 4) ^ (v31 >> 9));
        v45 = *(uint64_t **)(v371[0] + 88 * v44);
        if (v31 == v45)
        {
LABEL_67:
          v46 = sub_1C61DE23C((uint64_t)v371, (uint64_t *)&v404);
          v47 = *((unsigned int *)v46 + 4);
          if ((_DWORD)v47)
          {
            v48 = v46[1];
            v49 = v48 + 8 * v47;
            do
            {
              if (!v370)
              {
                v50 = v365;
                v51 = v366;
                v52 = *(_DWORD *)(v48 + 4);
                if (!(_DWORD)v366)
                  goto LABEL_78;
                v53 = 4 * v366;
                v54 = v365;
                while (*v54 != v52)
                {
                  ++v54;
                  v53 -= 4;
                  if (!v53)
                    goto LABEL_77;
                }
                if (v53)
                  goto LABEL_81;
LABEL_77:
                if (v366 < 8)
                {
LABEL_78:
                  if (v366 >= HIDWORD(v366))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v365, (uint64_t)v367, v366 + 1, 4);
                    v50 = v365;
                    v51 = v366;
                  }
                  v50[v51] = v52;
                  LODWORD(v366) = v366 + 1;
                  goto LABEL_81;
                }
                do
                {
                  sub_1C49915F0(&v368, (int *)v365 + v51 - 1, (_DWORD *)v365 + v51 - 1);
                  LODWORD(v51) = v366 - 1;
                  LODWORD(v366) = v366 - 1;
                }
                while ((_DWORD)v366);
              }
              sub_1C49915F0(&v368, (int *)(v48 + 4), (_DWORD *)(v48 + 4));
LABEL_81:
              v48 += 8;
            }
            while (v48 != v49);
          }
        }
        else
        {
          v55 = 1;
          while (v45 != (uint64_t *)-4096)
          {
            v56 = v44 + v55++;
            v44 = v56 & (v372 - 1);
            v45 = *(uint64_t **)(v371[0] + 88 * v44);
            if (v31 == v45)
              goto LABEL_67;
          }
        }
      }
      v404 = (uint64_t *)v406;
      v405 = 0x800000000;
      v408 = 0;
      v409 = 0;
      v407 = (uint64_t *)&v408;
      v57 = v378;
      v58 = *((_QWORD *)v378 + 4);
      v59 = *((_QWORD *)v378 + 2);
      v60 = *(unsigned __int8 *)(v59 + 4);
      if ((*(_BYTE *)(v59 + 8) & 2) != 0)
      {
        v259 = *((_DWORD *)v378 + 10);
        if (v259 == v60)
        {
          v61 = v60;
        }
        else
        {
          v260 = v259 - 1;
          v61 = v60;
          do
          {
            v261 = *(_DWORD *)(v58 + 32 * v60);
            if ((v261 & 0x10000FF) != 0x1000000)
              break;
            v61 += (v261 & 0x2000000) == 0;
            if (v260 == v60)
              break;
            ++v60;
          }
          while ((v261 & 0x2000000) == 0);
        }
      }
      else
      {
        v61 = *(unsigned __int8 *)(v59 + 4);
      }
      if (v61)
      {
        v62 = 32 * v61;
        v63 = (int *)(v58 + 4);
        do
        {
          v64 = *v63;
          v63 += 8;
          LODWORD(v399) = v64;
          sub_1C484FF44((uint64_t)&v404, (unsigned int *)&v399);
          v62 -= 32;
        }
        while (v62);
        v57 = v378;
      }
      v399 = v401;
      v400 = 0x800000000;
      v403[0] = 0;
      v403[1] = 0;
      v402 = v403;
      v65 = *((_QWORD *)v57 + 2);
      v66 = *(unsigned __int8 *)(v65 + 4);
      if ((*(_BYTE *)(v65 + 8) & 2) == 0 || (v262 = *((_DWORD *)v57 + 10), v262 == v66))
      {
        v67 = *(unsigned __int8 *)(v65 + 4);
      }
      else
      {
        v263 = v262 - 1;
        v67 = *(unsigned __int8 *)(v65 + 4);
        do
        {
          v264 = *(_DWORD *)(*((_QWORD *)v57 + 4) + 32 * v66);
          if ((v264 & 0x10000FF) != 0x1000000)
            break;
          v67 += (v264 & 0x2000000) == 0;
          if (v263 == v66)
            break;
          ++v66;
        }
        while ((v264 & 0x2000000) == 0);
      }
      v68 = *(_QWORD *)(v65 + 32);
      if (v68)
      {
        v69 = -1;
        do
          ++v69;
        while (*(_WORD *)(v68 + 2 * v69));
      }
      else
      {
        v69 = 0;
      }
      v70 = v69 + v67 + *(_DWORD *)(*((_QWORD *)v57 + 4) + 32 * (v69 + v67 + 2) + 16) + 4;
      v71 = *((unsigned int *)v57 + 10);
      if (v70 < v71)
      {
        do
        {
          v72 = *((_QWORD *)v378 + 4);
          if ((*(_DWORD *)(v72 + 32 * v70) & 0x120000FF) == 0)
          {
            v73 = *(unsigned int *)(v72 + 32 * v70 + 4);
            LODWORD(v358) = v73;
            if (((*(_DWORD *)(v384 + ((v73 >> 3) & 0x1FFFFFFC)) >> v73) & 1) != 0)
            {
              if (v386)
                goto LABEL_132;
              v74 = v407;
              if (!v409)
                v74 = v404;
              v75 = (char *)v404 + 4 * v405;
              if (v409)
                v75 = (char *)&v408;
              if (v74 == (uint64_t *)v75)
                goto LABEL_132;
              while (1)
              {
                v76 = (uint64_t *)((char *)v74 + 28);
                if (!v409)
                  v76 = v74;
                if (*(_DWORD *)v76 == (_DWORD)v73)
                  break;
                if (v409)
                {
                  v77 = (uint64_t *)v74[1];
                  if (v77)
                  {
                    do
                    {
                      v78 = v77;
                      v77 = (uint64_t *)*v77;
                    }
                    while (v77);
                  }
                  else
                  {
                    do
                    {
                      v78 = (uint64_t *)v74[2];
                      v90 = *v78 == (_QWORD)v74;
                      v74 = v78;
                    }
                    while (!v90);
                  }
                }
                else
                {
                  v78 = (uint64_t *)((char *)v74 + 4);
                }
                v74 = v78;
                if (v78 == (uint64_t *)v75)
                  goto LABEL_132;
              }
            }
            if ((sub_1C484FF44((uint64_t)&v399, (unsigned int *)&v358) & 0x100000000) != 0)
            {
              v79 = (int)v358;
              v80 = v391;
              if (v391 >= (unint64_t)HIDWORD(v391))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v390, (uint64_t)v392, v391 + 1, 4);
                v80 = v391;
              }
              *((_DWORD *)v390 + v80) = v79;
              LODWORD(v391) = v391 + 1;
            }
            v81 = v388;
            if (v388 >= (unint64_t)HIDWORD(v388))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v387, (uint64_t)v389, v388 + 1, 4);
              v81 = v388;
            }
            *((_DWORD *)v387 + v81) = v70;
            LODWORD(v388) = v388 + 1;
          }
LABEL_132:
          ++v70;
        }
        while (v70 != v71);
      }
      if (byte_1ED7F7A18)
      {
        v358 = (unsigned __int8 *)v385;
        v82 = 126 - 2 * __clz(v391);
        if ((_DWORD)v391)
          v83 = v82;
        else
          v83 = 0;
        sub_1C50C0C08((unint64_t)v390, (unsigned int *)v390 + v391, (uint64_t *)&v358, v83, 1);
      }
      v84 = v391;
      sub_1C47655E8((uint64_t)&v402, v403[0]);
      if (v399 != v401)
        free(v399);
      v353 = v15;
      sub_1C47655E8((uint64_t)&v407, v408);
      if (v404 != (uint64_t *)v406)
        free(v404);
      v352 = v84 != 0;
      if (!v84)
      {
LABEL_519:
        MEMORY[0x1CAA32FB4](v396, 4);
        if (v393 != v395)
          free(v393);
        v3 = v356;
        v15 = v353;
        if (v390 != v392)
          free(v390);
        if (v387 != v389)
          free(v387);
        v12 = v355;
        v13 = v354;
        v14 = v350;
        v16 = (_WORD *)&unk_1ED7F7000;
        v35 = v352;
        goto LABEL_526;
      }
      if ((_DWORD)v391)
      {
        v85 = v390;
        v351 = (char *)v390 + 4 * v391;
        while (1)
        {
          v86 = *v85;
          LODWORD(v358) = *v85;
          v87 = v385;
          v88 = v380;
          v399 = v380;
          v89 = v385[14];
          v404 = 0;
          v90 = !sub_1C61DE1A0(v89, *((_DWORD *)v385 + 32), (uint64_t)v380, &v404)
             || v404 == (uint64_t *)(v87[14] + 88 * *((unsigned int *)v87 + 32));
          v357 = v85;
          if (v90)
            break;
          v91 = *((unsigned int *)v404 + 4);
          if (!(_DWORD)v91)
            break;
          v92 = (unsigned int *)(v404[1] + 4);
          v93 = 8 * v91;
          while (*(v92 - 1) != (_DWORD)v86)
          {
            v92 += 2;
            v93 -= 8;
            if (!v93)
              goto LABEL_153;
          }
          SpillStackObject = *v92;
LABEL_201:
          v131 = v358;
          v132 = *(uint64_t ***)(v381 + 240);
          v133 = *(uint64_t ***)(v381 + 248);
          if (v132 == v133)
          {
            v134 = 0;
          }
          else
          {
            v134 = 0;
            v135 = (unint64_t)v358 >> 3;
            do
            {
              if (((_DWORD)v358 - 0x40000000) >= 0xC0000001)
              {
                v136 = **v132;
                if (v135 < *(unsigned __int16 *)(v136 + 22)
                  && ((1 << (v358 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v136 + 8) + v135)) != 0
                  && (!v134
                   || *v132 != v134
                   && ((*(_DWORD *)(v134[1] + ((*(unsigned __int16 *)(v136 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v136 + 24)) & 1) != 0))
                {
                  v134 = *v132;
                }
              }
              ++v132;
            }
            while (v132 != v133);
          }
          sub_1C61DE458((uint64_t)&v396, (int *)&v358)[1] = SpillStackObject;
          v137 = v382;
          v138 = v378;
          v139 = v381;
          RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)v378, v131, 0, v381);
          if ((RegisterUseOperandIdx & 0x80000000) != 0)
            goto LABEL_595;
          v141 = *((_QWORD *)v138 + 2);
          v142 = *(unsigned __int8 *)(v141 + 4);
          if ((*(_BYTE *)(v141 + 8) & 2) == 0 || (v154 = *((_DWORD *)v138 + 10), v154 == v142))
          {
            v143 = *(unsigned __int8 *)(v141 + 4);
          }
          else
          {
            v155 = v154 - 1;
            v143 = *(unsigned __int8 *)(v141 + 4);
            do
            {
              v156 = *(_DWORD *)(*((_QWORD *)v138 + 4) + 32 * v142);
              if ((v156 & 0x10000FF) != 0x1000000)
                break;
              v143 += (v156 & 0x2000000) == 0;
              if (v155 == v142)
                break;
              ++v142;
            }
            while ((v156 & 0x2000000) == 0);
          }
          v144 = *(_QWORD *)(v141 + 32);
          if (v144)
          {
            v145 = -1;
            do
              ++v145;
            while (*(_WORD *)(v144 + 2 * v145));
          }
          else
          {
            v145 = 0;
          }
          if (RegisterUseOperandIdx >= v145
                                      + v143
                                      + *(_DWORD *)(*((_QWORD *)v138 + 4) + 32 * (v145 + v143 + 2) + 16)
                                      + 9)
          {
LABEL_595:
            if (byte_1ED7F7B98)
            {
              v147 = *(_QWORD *)v138 & 0xFFFFFFFFFFFFFFF8;
              if (!v147 || (*(_BYTE *)v147 & 4) == 0)
              {
                while ((*(_WORD *)(v147 + 44) & 4) != 0)
                  v147 = *(_QWORD *)v147 & 0xFFFFFFFFFFFFFFF8;
              }
              v148 = *((_QWORD *)v138 + 3) + 48;
              if (v147 != v148)
              {
                v149 = 0;
                while (1)
                {
                  v150 = llvm::MachineInstr::findRegisterUseOperandIdx(v147, v131, 0, v139);
                  if (v149)
                    v151 = 1;
                  else
                    v151 = v150 == -1;
                  if (!v151)
                    v149 = v147;
                  if (llvm::MachineInstr::findRegisterDefOperandIdx(v147, v131, 0, 1, v139) != -1)
                    break;
                  v147 = *(_QWORD *)v147 & 0xFFFFFFFFFFFFFFF8;
                  if (!v147 || (*(_BYTE *)v147 & 4) == 0)
                  {
                    while ((*(_WORD *)(v147 + 44) & 4) != 0)
                      v147 = *(_QWORD *)v147 & 0xFFFFFFFFFFFFFFF8;
                  }
                  if (v147 == v148)
                    goto LABEL_243;
                }
                if (**(_WORD **)(v147 + 16) == 19)
                {
                  v153 = *(uint64_t **)(v147 + 32);
                  v404 = v153;
                  v405 = (uint64_t)(v153 + 4);
                  v406[0] = 1;
LABEL_257:
                  if (*((_DWORD *)v153 + 1) == (_DWORD)v131)
                  {
                    v157 = 0;
                    v152 = *(unsigned int *)(v405 + 4);
                    v158 = v152;
                    v159 = *(char **)(v139 + 240);
                    v160 = *(char **)(v139 + 248);
                    v161 = v131 >> 3;
                    v162 = v159;
                    do
                    {
                      if ((v131 - 0x40000000) >= 0xC0000001)
                      {
                        v163 = **(_QWORD **)v162;
                        if (v161 < *(unsigned __int16 *)(v163 + 22)
                          && ((1 << (v131 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v163 + 8) + v161)) != 0
                          && (!v157
                           || *(uint64_t **)v162 != v157
                           && ((*(_DWORD *)(v157[1] + ((*(unsigned __int16 *)(v163 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v163 + 24)) & 1) != 0))
                        {
                          v157 = *(uint64_t **)v162;
                        }
                      }
                      v162 += 8;
                    }
                    while (v162 != v160);
                    v164 = 0;
                    v165 = *(_QWORD *)(v139 + 264);
                    v166 = *(_DWORD *)(v139 + 272) * ((unint64_t)(v160 - v159) >> 3);
                    v167 = *(_DWORD *)(v165 + 24 * (v166 + *(unsigned __int16 *)(*v157 + 24)) + 4);
                    v168 = v152 >> 3;
                    do
                    {
                      if ((v152 - 0x40000000) >= 0xC0000001)
                      {
                        v169 = **(_QWORD **)v159;
                        if (v168 < *(unsigned __int16 *)(v169 + 22)
                          && ((1 << (v152 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v169 + 8) + v168)) != 0
                          && (!v164
                           || *(uint64_t **)v159 != v164
                           && ((*(_DWORD *)(v164[1] + ((*(unsigned __int16 *)(v169 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v169 + 24)) & 1) != 0))
                        {
                          v164 = *(uint64_t **)v159;
                        }
                      }
                      v159 += 8;
                    }
                    while (v159 != v160);
                    if ((*(_DWORD *)(v165 + 24 * (v166 + *(unsigned __int16 *)(*v164 + 24)) + 4) ^ v167) <= 7)
                    {
                      v170 = v147;
                      if ((*(_QWORD *)v147 & 4) == 0)
                      {
                        v170 = v147;
                        if ((*(_WORD *)(v147 + 44) & 8) != 0)
                        {
                          v170 = v147;
                          do
                            v170 = *(_QWORD *)(v170 + 8);
                          while ((*(_WORD *)(v170 + 44) & 8) != 0);
                        }
                      }
                      v138 = *(llvm::MachineInstr **)(v170 + 8);
                      v146 = (*(_DWORD *)v405 >> 26) & ~HIBYTE(*(_DWORD *)v405) & 1;
                      if (!v149)
                      {
                        v171 = *(unsigned int *)(v405 + 4);
                        v172 = v147;
                        if ((*(_QWORD *)v147 & 4) == 0)
                        {
                          v172 = v147;
                          if ((*(_WORD *)(v147 + 44) & 8) != 0)
                          {
                            v172 = v147;
                            do
                              v172 = *(_QWORD *)(v172 + 8);
                            while ((*(_WORD *)(v172 + 44) & 8) != 0);
                          }
                        }
                        sub_1C487FE80(*(_QWORD *)(v147 + 24) + 40, v147, *(_QWORD *)(v172 + 8));
                        v158 = v171;
                      }
                      goto LABEL_287;
                    }
                  }
                }
                else
                {
                  (*(void (**)(uint64_t **__return_ptr, _QWORD *, unint64_t))(*v137 + 416))(&v404, v137, v147);
                  if (v406[0])
                  {
                    v153 = v404;
                    goto LABEL_257;
                  }
                }
                v146 = 1;
                v158 = v131;
                LODWORD(v152) = v131;
LABEL_287:
                v131 = v158;
                goto LABEL_245;
              }
            }
LABEL_243:
            v146 = 1;
          }
          else
          {
            v146 = 0;
          }
          LODWORD(v152) = v131;
LABEL_245:
          LODWORD(v358) = v152;
          (*(void (**)(_QWORD *, _QWORD, llvm::MachineInstr *, unint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*v382 + 448))(v382, *((_QWORD *)v378 + 3), v138, v131, v146, SpillStackObject, v134, v381);
          v85 = v357 + 1;
          if (v357 + 1 == (_DWORD *)v351)
            goto LABEL_329;
        }
LABEL_153:
        v94 = 0;
        v95 = v87[1];
        v96 = *(uint64_t ***)(v95 + 248);
        v97 = v86 >> 3;
        v98 = *(uint64_t ***)(v95 + 240);
        do
        {
          if ((v86 - 0x40000000) >= 0xC0000001)
          {
            v99 = **v98;
            if (v97 < *(unsigned __int16 *)(v99 + 22)
              && ((1 << (v86 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v99 + 8) + v97)) != 0
              && (!v94
               || *v98 != v94
               && ((*(_DWORD *)(v94[1] + ((*(unsigned __int16 *)(v99 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v99 + 24)) & 1) != 0))
            {
              v94 = *v98;
            }
          }
          ++v98;
        }
        while (v98 != v96);
        v100 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v95 + 264)
                                                 + 24
                                                 * (*(unsigned __int16 *)(*v94 + 24)
                                                  + *(_DWORD *)(v95 + 272)
                                                  * (((unint64_t)v96 - *(_QWORD *)(v95 + 240)) >> 3))
                                                 + 4) >> 3;
        v101 = v87 + 2;
        v102 = v87[2];
        if (byte_1ED7F7A18)
          v103 = 0;
        else
          v103 = v100;
        v104 = *((_DWORD *)v87 + 8);
        if (v104)
        {
          v107 = (37 * v103) & (v104 - 1);
          v105 = (int *)(v102 + (v107 << 6));
          v108 = *v105;
          if (v103 == *v105)
            goto LABEL_174;
          v182 = 0;
          v183 = 1;
          while (v108 != -1)
          {
            if (v182)
              v184 = 0;
            else
              v184 = v108 == -2;
            if (v184)
              v182 = v105;
            v185 = v107 + v183++;
            v107 = v185 & (v104 - 1);
            v105 = (int *)(v102 + (v107 << 6));
            v108 = *v105;
            if (v103 == *v105)
              goto LABEL_174;
          }
          if (v182)
            v105 = v182;
        }
        else
        {
          v105 = 0;
        }
        v106 = *((_DWORD *)v87 + 6);
        if (4 * v106 + 4 >= 3 * v104)
        {
          sub_1C50C4CCC(v101, 2 * v104);
          v173 = *((_DWORD *)v87 + 8);
          if (!v173)
            goto LABEL_309;
          v174 = v87[2];
          v175 = v173 - 1;
          v176 = v175 & (37 * v103);
          v105 = (int *)(v174 + (v176 << 6));
          v177 = *v105;
          if (v103 == *v105)
            goto LABEL_170;
          v178 = 0;
          v179 = 1;
          while (v177 != -1)
          {
            if (v178)
              v180 = 0;
            else
              v180 = v177 == -2;
            if (v180)
              v178 = v105;
            v181 = v176 + v179++;
            v176 = v181 & v175;
            v105 = (int *)(v174 + (v176 << 6));
            v177 = *v105;
            if (v103 == *v105)
              goto LABEL_170;
          }
        }
        else
        {
          if (v104 + ~v106 - *((_DWORD *)v87 + 7) > v104 >> 3)
          {
LABEL_170:
            ++*((_DWORD *)v87 + 6);
            if (*v105 != -1)
              --*((_DWORD *)v87 + 7);
            *v105 = v103;
            *(_OWORD *)(v105 + 10) = 0u;
            *((_QWORD *)v105 + 7) = 0;
            *(_OWORD *)(v105 + 6) = 0u;
            *((_QWORD *)v105 + 1) = v105 + 6;
            *((_QWORD *)v105 + 2) = 0x800000000;
LABEL_174:
            v109 = v105[4];
            v110 = v105[14];
            if (v109 <= v110)
            {
LABEL_190:
              SpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject((unsigned __int8 *)*v87, v100, 63 - __clz(v100));
              v120 = v105[4];
              if (v120 >= v105[5])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v105 + 2), (uint64_t)(v105 + 6), v120 + 1, 4);
                v120 = v105[4];
                v88 = v399;
              }
              *(_DWORD *)(*((_QWORD *)v105 + 1) + 4 * v120) = SpillStackObject;
              ++v105[4];
              ++v105[14];
              if (v88)
              {
                v121 = sub_1C61DE23C((uint64_t)(v87 + 14), (uint64_t *)&v399);
                v122 = v121;
                v123 = *((unsigned int *)v121 + 4);
                if (v123 >= *((unsigned int *)v121 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v121 + 1), (uint64_t)(v121 + 3), v123 + 1, 8);
                  v123 = *((unsigned int *)v122 + 4);
                }
                *(_QWORD *)(v122[1] + 8 * v123) = v86 | (SpillStackObject << 32);
                ++*((_DWORD *)v122 + 4);
              }
            }
            else
            {
              v111 = *((_QWORD *)v105 + 1);
              v112 = v87[13];
              while (1)
              {
                v113 = v110 + 1;
                v105[14] = v110 + 1;
                SpillStackObject = *(unsigned int *)(v111 + 4 * v110);
                if (v112)
                  break;
                v117 = *((unsigned int *)v87 + 12);
                if (!(_DWORD)v117)
                  goto LABEL_196;
                v118 = (_DWORD *)v87[5];
                v119 = 4 * v117;
                while (*v118 != (_DWORD)SpillStackObject)
                {
                  ++v118;
                  v119 -= 4;
                  if (!v119)
                    goto LABEL_196;
                }
                if (!v119)
                  goto LABEL_196;
LABEL_189:
                v110 = v113;
                if (v109 == (_DWORD)v113)
                  goto LABEL_190;
              }
              for (j = (uint64_t *)v87[12]; j; j = (uint64_t *)*j)
              {
                v116 = *((_DWORD *)j + 7);
                if ((int)SpillStackObject >= v116)
                {
                  if (v116 >= (int)SpillStackObject)
                    goto LABEL_189;
                  ++j;
                }
              }
LABEL_196:
              v124 = (unsigned __int8 *)*v87;
              v125 = *(_DWORD *)(*v87 + 32) + SpillStackObject;
              v126 = *(_QWORD *)(*v87 + 8);
              v127 = v126 + 40 * v125;
              v129 = *(_QWORD *)(v127 + 8);
              v128 = (int64_t *)(v127 + 8);
              if (v129 < v100)
              {
                *v128 = v100;
                v130 = 63 - __clz(v100);
                *(_BYTE *)(v126 + 40 * v125 + 16) = v130;
                if (!*(_BYTE *)(*((_QWORD *)v124 + 1)
                               + 40 * (*((_DWORD *)v124 + 8) + SpillStackObject)
                               + 20)
                  && v124[60] < v130)
                {
                  v124[60] = v130;
                }
              }
            }
            goto LABEL_201;
          }
          sub_1C50C4CCC(v101, v104);
          v186 = *((_DWORD *)v87 + 8);
          if (!v186)
          {
LABEL_309:
            v105 = 0;
            goto LABEL_170;
          }
          v187 = v87[2];
          v188 = v186 - 1;
          v189 = v188 & (37 * v103);
          v105 = (int *)(v187 + (v189 << 6));
          v190 = *v105;
          if (v103 == *v105)
            goto LABEL_170;
          v178 = 0;
          v191 = 1;
          while (v190 != -1)
          {
            if (v178)
              v192 = 0;
            else
              v192 = v190 == -2;
            if (v192)
              v178 = v105;
            v193 = v189 + v191++;
            v189 = v193 & v188;
            v105 = (int *)(v187 + (v189 << 6));
            v190 = *v105;
            if (v103 == *v105)
              goto LABEL_170;
          }
        }
        if (v178)
          v105 = v178;
        goto LABEL_170;
      }
LABEL_329:
      v194 = v379;
      v195 = **((unsigned __int16 **)v378 + 2);
      v196 = v382[1];
      v197 = (unsigned __int8 *)*((_QWORD *)v378 + 7);
      v358 = v197;
      if (v197)
        llvm::MetadataTracking::track((uint64_t)&v358, v197, 2);
      v198 = *((_QWORD *)v194 + 28);
      if (v198)
        *((_QWORD *)v194 + 28) = *(_QWORD *)v198;
      else
        v198 = sub_1C484358C((uint64_t)v194 + 128, 72, 3);
      v199 = v358;
      v404 = (uint64_t *)v358;
      if (v358)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v358, v358, (uint64_t)&v404);
        v358 = 0;
        v199 = (unsigned __int8 *)v404;
      }
      v200 = v196 + 48 * v195;
      *(_QWORD *)v198 = 0;
      *(_QWORD *)(v198 + 8) = 0;
      *(_QWORD *)(v198 + 16) = v200;
      *(_OWORD *)(v198 + 24) = 0u;
      *(_QWORD *)(v198 + 56) = v199;
      *(_OWORD *)(v198 + 40) = 0u;
      if (v199)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v404, v199, v198 + 56);
        v404 = 0;
        v200 = *(_QWORD *)(v198 + 16);
      }
      v201 = 0;
      *(_DWORD *)(v198 + 64) = 0;
      v202 = *(unsigned __int16 *)(v200 + 2);
      v203 = *(_QWORD *)(v200 + 32);
      if (v203)
      {
        v201 = -1;
        do
          ++v201;
        while (*(_WORD *)(v203 + 2 * v201));
      }
      v204 = *(_QWORD *)(v200 + 24);
      if (v204)
      {
        v205 = -1;
        do
          ++v205;
        while (*(_WORD *)(v204 + 2 * v205));
      }
      else
      {
        v205 = 0;
      }
      v206 = v201 + v202 + v205;
      if ((_DWORD)v206)
      {
        v207 = 64 - __clz(v206 - 1);
        *(_BYTE *)(v198 + 47) = v207;
        v208 = v207;
        if (*((_DWORD *)v194 + 60) > v207
          && (v209 = *((_QWORD *)v194 + 29), (v210 = *(_QWORD **)(v209 + 8 * v208)) != 0))
        {
          *(_QWORD *)(v209 + 8 * v208) = *v210;
        }
        else
        {
          v210 = (_QWORD *)sub_1C484358C((uint64_t)v194 + 128, 32 << v208, 3);
        }
        *(_QWORD *)(v198 + 32) = v210;
        if (v404)
          llvm::MetadataTracking::untrack((uint64_t)&v404, (unsigned __int8 *)v404);
      }
      if (v358)
        llvm::MetadataTracking::untrack((uint64_t)&v358, v358);
      v211 = v379;
      v212 = *((_DWORD *)v378 + 10);
      v404 = (uint64_t *)v406;
      v405 = 0x800000000;
      v213 = *((_QWORD *)v378 + 2);
      v214 = *(unsigned __int8 *)(v213 + 4);
      if ((*(_BYTE *)(v213 + 8) & 2) != 0)
      {
        v215 = v212;
        if (v212 != v214)
        {
          v215 = *(unsigned __int8 *)(v213 + 4);
          do
          {
            v330 = *(_DWORD *)(*((_QWORD *)v378 + 4) + 32 * v214);
            if ((v330 & 0x10000FF) != 0x1000000)
              break;
            v215 += (v330 & 0x2000000) == 0;
            if (v212 - 1 == v214)
              break;
            ++v214;
          }
          while ((v330 & 0x2000000) == 0);
        }
      }
      else
      {
        v215 = *(unsigned __int8 *)(v213 + 4);
      }
      v216 = *(_QWORD *)(v213 + 32);
      if (v216)
      {
        v217 = -1;
        do
          ++v217;
        while (*(_WORD *)(v216 + 2 * v217));
      }
      else
      {
        v217 = 0;
      }
      v218 = v217 + v215;
      if (v217 + v215)
      {
        v219 = 0;
        v220 = 4;
        while (1)
        {
          v221 = v378;
          v222 = *(unsigned int *)(*((_QWORD *)v378 + 4) + v220);
          if ((*(_BYTE *)(*((_QWORD *)v221 + 4)
                         + 32 * llvm::MachineInstr::findTiedOperandIdx(v378, v219)
                         + 3) & 0x10) != 0)
          {
            if (v386)
            {
LABEL_369:
              v225 = *(_DWORD *)(v198 + 40);
              v226 = v405;
              if (v405 >= (unint64_t)HIDWORD(v405))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v404, (uint64_t)v406, v405 + 1, 4);
                v226 = v405;
              }
              *((_DWORD *)v404 + v226) = v225;
              LODWORD(v405) = v405 + 1;
              v400 = 0;
              v401[0] = 0;
              v401[1] = 0;
              LODWORD(v399) = 0x1000000;
              HIDWORD(v399) = v222;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v211, (const llvm::MachineOperand *)&v399);
            }
          }
          else
          {
            if (v386)
            {
              if (((*(_DWORD *)(v384 + ((v222 >> 3) & 0x1FFFFFFC)) >> v222) & 1) != 0)
                goto LABEL_369;
              v223 = v405;
              if (v405 >= (unint64_t)HIDWORD(v405))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v404, (uint64_t)v406, v405 + 1, 4);
                v223 = v405;
              }
              *((_DWORD *)v404 + v223) = v212;
              LODWORD(v405) = v405 + 1;
            }
            v224 = v394;
            if (v394 >= (unint64_t)HIDWORD(v394))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v393, (uint64_t)v395, v394 + 1, 4);
              v224 = v394;
            }
            *((_DWORD *)v393 + v224) = v222;
            LODWORD(v394) = v394 + 1;
          }
          ++v219;
          v220 += 32;
          if (v218 == v219)
          {
            v212 = *((_DWORD *)v378 + 10);
            break;
          }
        }
      }
      v227 = v388;
      if (v388 >= (unint64_t)HIDWORD(v388))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v387, (uint64_t)v389, v388 + 1, 4);
        v227 = v388;
      }
      *((_DWORD *)v387 + v227) = v212;
      LODWORD(v388) = v388 + 1;
      v228 = v378;
      if (v218 < *((_DWORD *)v378 + 10))
      {
        v229 = 0;
        do
        {
          v230 = *((_QWORD *)v228 + 4);
          if (v218 == *((_DWORD *)v387 + v229))
          {
            v242 = v230 + 32 * v218;
            LODWORD(v399) = *(_DWORD *)(v242 + 4);
            v243 = sub_1C61DE458((uint64_t)&v396, (int *)&v399)[1];
            LODWORD(v399) = 1;
            v400 = 0;
            v401[0] = 1;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v211, (const llvm::MachineOperand *)&v399);
            v244 = 0;
            v245 = *(unsigned int *)(v242 + 4);
            v246 = *(uint64_t ***)(v381 + 248);
            v247 = v245 - 0x40000000;
            v248 = v245 >> 3;
            v249 = 1 << (v245 & 7);
            v250 = *(uint64_t ***)(v381 + 240);
            do
            {
              if (v247 >= 0xC0000001)
              {
                v251 = **v250;
                if (v248 < *(unsigned __int16 *)(v251 + 22)
                  && (v249 & *(_BYTE *)(*(_QWORD *)(v251 + 8) + v248)) != 0
                  && (!v244
                   || *v250 != v244
                   && ((*(_DWORD *)(v244[1] + ((*(unsigned __int16 *)(v251 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v251 + 24)) & 1) != 0))
                {
                  v244 = *v250;
                }
              }
              ++v250;
            }
            while (v250 != v246);
            v252 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v381 + 264)
                                                     + 24
                                                     * (*(unsigned __int16 *)(*v244 + 24)
                                                      + *(_DWORD *)(v381 + 272)
                                                      * (((unint64_t)v246 - *(_QWORD *)(v381 + 240)) >> 3))
                                                     + 4) >> 3;
            LODWORD(v399) = 1;
            v400 = 0;
            v401[0] = v252;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v211, (const llvm::MachineOperand *)&v399);
            LODWORD(v399) = 5;
            v400 = 0;
            LODWORD(v401[0]) = v243;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v211, (const llvm::MachineOperand *)&v399);
            LODWORD(v399) = 1;
            v400 = 0;
            v401[0] = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v211, (const llvm::MachineOperand *)&v399);
            ++v229;
          }
          else
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v198, v211, (const llvm::MachineOperand *)(v230 + 32 * v218));
            if (v386)
            {
              v231 = *(_DWORD *)(*((_QWORD *)v378 + 4) + 32 * v218);
              v232 = v231 & 0x10000FF;
              v233 = v231 & 0xF00000;
              if (!v232 && v233 != 0)
              {
                TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(v378, v218);
                v236 = *((unsigned int *)v404 + TiedOperandIdx);
                v237 = *(_DWORD *)(v198 + 40);
                v238 = *(_QWORD *)(v198 + 32);
                v239 = (unsigned int *)(v238 + 32 * (v237 - 1));
                v240 = *v239 & 0xFF0FFFFF | ((((((_DWORD)v236 << 20) + 0x100000) >> 20) & 0xF) << 20);
                if (v236 > 0xE)
                  v240 = *v239 | 0xF00000;
                v241 = 32 * v236;
                *v239 = v240;
                if (v237 >= 0xF)
                  v237 = 15;
                *(_DWORD *)(v238 + v241) = *(_DWORD *)(v238 + v241) & 0xFF0FFFFF | (v237 << 20);
              }
            }
          }
          ++v218;
          v228 = v378;
        }
        while (v218 < *((unsigned int *)v378 + 10));
      }
      v253 = v379;
      v256 = *((_QWORD *)v228 + 6);
      v254 = (unint64_t *)((char *)v228 + 48);
      v255 = v256;
      if (v256 >= 8)
      {
        if ((v255 & 7) == 0)
        {
          *v254 = v255 & 0xFFFFFFFFFFFFFFF8;
          v265 = 1;
          goto LABEL_423;
        }
        v257 = (int *)(v255 & 0xFFFFFFFFFFFFFFF8);
        if ((v255 & 7) == 3 && v257 != 0)
        {
          v266 = *v257;
          v254 = (unint64_t *)(v257 + 2);
          v265 = v266;
          if ((_DWORD)v266)
          {
LABEL_423:
            v267 = *(_QWORD *)(v198 + 48);
            if (v267 >= 8)
            {
              v338 = *(_QWORD *)(v198 + 48) & 7;
              v339 = (unsigned __int8 *)(v267 & 0xFFFFFFFFFFFFFFF8);
              if (v338 == 1 && v339)
              {
                v268 = 0;
                v270 = 0;
                v269 = (uint64_t)v339;
                goto LABEL_426;
              }
              if (v338 != 3 || !v339)
              {
                v269 = 0;
                v270 = 0;
                if (v339)
                  v340 = v338 == 2;
                else
                  v340 = 0;
                if (v340)
                  v268 = (uint64_t)v339;
                else
                  v268 = 0;
                goto LABEL_426;
              }
              v341 = v339[4];
              if (v339[4])
                v269 = *(_QWORD *)&v339[8 * *(int *)v339 + 8];
              else
                v269 = 0;
              if (v339[5])
                v268 = *(_QWORD *)&v339[8 * *(int *)v339 + 8 + 8 * v341];
              else
                v268 = 0;
              if (v339[6])
              {
                v270 = *(_QWORD *)&v339[8 * *(int *)v339 + 8 + 8 * v339[5] + 8 * v341];
                goto LABEL_426;
              }
            }
            else
            {
              v268 = 0;
              v269 = 0;
            }
            v270 = 0;
LABEL_426:
            llvm::MachineInstr::setExtraInfo(v198, (uint64_t)v253, v254, v265, v269, v268, v270);
LABEL_427:
            v271 = &v396[2 * v398];
            if ((_DWORD)v397)
            {
              if (v398)
              {
                v272 = 8 * v398;
                v273 = v396;
                while (*v273 >= 0xFFFFFFFE)
                {
                  v273 += 2;
                  v272 -= 8;
                  if (!v272)
                    goto LABEL_432;
                }
              }
              else
              {
                v273 = v396;
              }
            }
            else
            {
LABEL_432:
              v273 = &v396[2 * v398];
            }
            v274 = &v396[2 * v398];
LABEL_435:
            while (v273 != v274)
            {
              v276 = *v273;
              v275 = v273[1];
              FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*((uint64_t ***)v379 + 54), v275);
              if (FixedStack)
                v278 = *((_DWORD *)FixedStack + 3);
              else
                v278 = 0;
              if ((_DWORD)v394)
              {
                v279 = 4 * v394;
                v280 = (char *)v393;
                while (*(_DWORD *)v280 != (_DWORD)v276)
                {
                  v280 += 4;
                  v279 -= 4;
                  if (!v279)
                  {
                    v280 = (char *)v393 + 4 * v394;
                    break;
                  }
                }
              }
              else
              {
                v280 = (char *)v393;
              }
              v281 = 0;
              v282 = (unint64_t)FixedStack | 4;
              v283 = *(uint64_t ***)(v381 + 248);
              v284 = v276 >> 3;
              v285 = *(uint64_t ***)(v381 + 240);
              do
              {
                if ((v276 - 0x40000000) >= 0xC0000001)
                {
                  v286 = **v285;
                  if (v284 < *(unsigned __int16 *)(v286 + 22)
                    && ((1 << (v276 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v286 + 8) + v284)) != 0
                    && (!v281
                     || *v285 != v281
                     && ((*(_DWORD *)(v281[1] + ((*(unsigned __int16 *)(v286 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v286 + 24)) & 1) != 0))
                  {
                    v281 = *v285;
                  }
                }
                ++v285;
              }
              while (v285 != v283);
              if ((v280 - (_BYTE *)v393) >> 2 == v394)
                v287 = 1;
              else
                v287 = 3;
              v288 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v381 + 264)
                                                       + 24
                                                       * (*(unsigned __int16 *)(*v281 + 24)
                                                        + *(_DWORD *)(v381 + 272)
                                                        * (((unint64_t)v283
                                                                        - *(_QWORD *)(v381 + 240)) >> 3))
                                                       + 4) >> 3;
              v289 = *(_BYTE *)(*(_QWORD *)(v383 + 8) + 40 * (*(_DWORD *)(v383 + 32) + v275) + 16);
              v290 = sub_1C484358C((uint64_t)v379 + 128, 80, 3);
              *(_QWORD *)v290 = v282;
              *(_QWORD *)(v290 + 8) = 0;
              *(_DWORD *)(v290 + 16) = v278;
              *(_BYTE *)(v290 + 20) = 0;
              *(_WORD *)(v290 + 21) = (_WORD)v399;
              *(_BYTE *)(v290 + 23) = BYTE2(v399);
              *(_QWORD *)(v290 + 24) = ((v288 & 0x1FFFFFFF) << 6) | 1;
              *(_WORD *)(v290 + 32) = v287;
              *(_BYTE *)(v290 + 34) = v289;
              *(_OWORD *)(v290 + 40) = 0u;
              *(_OWORD *)(v290 + 56) = 0u;
              *(_QWORD *)(v290 + 72) = 0;
              *(_WORD *)(v290 + 36) = 1;
              llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v198, v379, (llvm::MachineMemOperand *)v290);
              v291 = v273 + 2;
              while (v291 != v271)
              {
                v292 = *v291;
                v291 += 2;
                if (v292 <= 0xFFFFFFFD)
                {
                  v273 = v291 - 2;
                  goto LABEL_435;
                }
              }
              v273 = v271;
            }
            v293 = v378;
            v294 = *(_QWORD *)(*((_QWORD *)v378 + 3) + 40);
            *(_QWORD *)(v198 + 24) = v294;
            v295 = *(_QWORD *)(v294 + 32);
            v296 = *(unsigned int *)(v198 + 40);
            if ((_DWORD)v296)
            {
              v331 = *(_QWORD *)(v198 + 32);
              v332 = *(_QWORD *)(v295 + 40);
              v333 = 32 * v296;
              do
              {
                if (!*(_BYTE *)v331)
                {
                  v334 = *(unsigned int *)(v331 + 4);
                  if ((int)v334 >= 0)
                    v335 = (uint64_t *)(*(_QWORD *)(v332 + 272) + 8 * v334);
                  else
                    v335 = (uint64_t *)(*(_QWORD *)(v332 + 24) + 16 * (v334 & 0x7FFFFFFF) + 8);
                  v336 = *v335;
                  if (*v335)
                  {
                    v337 = *(_QWORD *)(v336 + 16);
                    *(_QWORD *)(v336 + 16) = v331;
                    *(_QWORD *)(v331 + 16) = v337;
                    if ((*(_BYTE *)(v331 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v331 + 24) = v336;
                    }
                    else
                    {
                      *(_QWORD *)(v331 + 24) = 0;
                      v335 = (uint64_t *)(v337 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v331 + 16) = v331;
                    *(_QWORD *)(v331 + 24) = 0;
                  }
                  *v335 = v331;
                }
                v331 += 32;
                v333 -= 32;
              }
              while (v333);
            }
            v297 = *(_QWORD *)(v295 + 728);
            if (v297)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v297 + 24))(v297, v198);
            v298 = *(_QWORD *)v293 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v198 = v298 | *(_QWORD *)v198 & 7;
            *(_QWORD *)(v198 + 8) = v293;
            *(_QWORD *)(v298 + 8) = v198;
            *(_QWORD *)v293 = *(_QWORD *)v293 & 7 | v198;
            v299 = v378;
            if ((*(_BYTE *)v378 & 4) == 0)
            {
              v299 = v378;
              if ((*((_WORD *)v378 + 22) & 8) != 0)
              {
                v299 = v378;
                do
                  v299 = (llvm::MachineInstr *)*((_QWORD *)v299 + 1);
                while ((*((_WORD *)v299 + 22) & 8) != 0);
              }
            }
            sub_1C487FE80(*((_QWORD *)v378 + 3) + 40, (uint64_t)v378, *((_QWORD *)v299 + 1));
            if (v404 != (uint64_t *)v406)
              free(v404);
            if ((_DWORD)v394)
            {
              v300 = *(_QWORD *)(v198 + 24);
              v301 = v393;
              v302 = (char *)v393 + 4 * v394;
              v303 = *(_QWORD **)(v198 + 8);
              while (1)
              {
                LODWORD(v358) = *v301;
                v304 = v358;
                sub_1C50C4F6C((uint64_t)&v378, v358, v303, v300);
                if (v380)
                  break;
LABEL_473:
                if (++v301 == (_DWORD *)v302)
                  goto LABEL_519;
              }
              v305 = sub_1C61DE458((uint64_t)&v396, (int *)&v358)[1];
              v404 = v380;
              if (!v374)
              {
LABEL_476:
                v306 = sub_1C61DE458((uint64_t)&v396, (int *)&v358)[1];
                v404 = v380;
                v399 = (uint64_t *)__PAIR64__(v306, v304);
                v307 = sub_1C61DE7F4((uint64_t)v373, (uint64_t *)&v404);
                v308 = v307;
                if (v307[13])
                {
                  v326 = (uint64_t)(v307 + 11);
                }
                else
                {
                  v309 = v307[1];
                  v310 = *((unsigned int *)v307 + 4);
                  if (!(_DWORD)v310)
                    goto LABEL_497;
                  v311 = 8 * v310;
                  v312 = (_DWORD *)(v309 + 4);
                  while (*(v312 - 1) != v304 || *v312 != v306)
                  {
                    v312 += 2;
                    v311 -= 8;
                    if (!v311)
                      goto LABEL_496;
                  }
                  if (v311)
                    goto LABEL_500;
LABEL_496:
                  if (v310 <= 7)
                  {
LABEL_497:
                    v320 = v399;
                    if (v310 >= *((_DWORD *)v307 + 5))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v307 + 1), (uint64_t)(v307 + 3), v310 + 1, 8);
                      v309 = v308[1];
                      v310 = *((unsigned int *)v308 + 4);
                    }
                    *(_QWORD *)(v309 + 8 * v310) = v320;
                    ++*((_DWORD *)v308 + 4);
                    goto LABEL_500;
                  }
                  do
                  {
                    v327 = v308[1] + 8 * v310;
                    sub_1C61DEA8C((uint64_t)(v308 + 11), *(_DWORD *)(v327 - 8), *(_DWORD *)(v327 - 4), (uint64_t *)(v327 - 8));
                    LODWORD(v310) = *((_DWORD *)v308 + 4) - 1;
                    *((_DWORD *)v308 + 4) = v310;
                  }
                  while ((_DWORD)v310);
                  v326 = (uint64_t)(v308 + 11);
                }
                sub_1C61DEA8C(v326, v304, v306, (uint64_t *)&v399);
LABEL_500:
                v321 = (_QWORD *)llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug((uint64_t)v380, v380[7], 1);
                sub_1C50C4F6C((uint64_t)&v378, v304, v321, (uint64_t)v380);
                goto LABEL_473;
              }
              v314 = (v374 - 1) & ((v380 >> 4) ^ (v380 >> 9));
              v315 = *(uint64_t **)(v373[0] + 112 * v314);
              if (v380 != v315)
              {
                v328 = 1;
                while (v315 != (uint64_t *)-4096)
                {
                  v329 = v314 + v328++;
                  v314 = v329 & (v374 - 1);
                  v315 = *(uint64_t **)(v373[0] + 112 * v314);
                  if (v380 == v315)
                    goto LABEL_486;
                }
                goto LABEL_476;
              }
LABEL_486:
              v316 = sub_1C61DE7F4((uint64_t)v373, (uint64_t *)&v404);
              if (!v316[13])
              {
                v322 = *((unsigned int *)v316 + 4);
                if ((_DWORD)v322)
                {
                  v323 = 8 * v322;
                  v324 = (_DWORD *)(v316[1] + 4);
                  while (*(v324 - 1) != v304 || *v324 != v305)
                  {
                    v324 += 2;
                    v323 -= 8;
                    if (!v323)
                      goto LABEL_476;
                  }
                  if (v323)
                    goto LABEL_473;
                }
                goto LABEL_476;
              }
              v317 = (uint64_t *)v316[12];
              if (!v317)
                goto LABEL_476;
              while (2)
              {
                v318 = *((_DWORD *)v317 + 7);
                if (v318 <= v304)
                {
                  if (v318 < v304)
                    goto LABEL_492;
                  v319 = *((_DWORD *)v317 + 8);
                  if (v319 <= v305)
                  {
                    if (v319 >= v305)
                      goto LABEL_473;
LABEL_492:
                    ++v317;
                  }
                }
                v317 = (uint64_t *)*v317;
                if (!v317)
                  goto LABEL_476;
                continue;
              }
            }
            goto LABEL_519;
          }
        }
      }
      llvm::MachineInstr::dropMemRefs(v198, v379);
      goto LABEL_427;
    }
  }
  LOBYTE(v3) = 0;
LABEL_20:
  if (v375 != v377)
    free(v375);
  return v3 & 1;
}

_QWORD *sub_1C50C09FC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DE364(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C50C0AC0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_DWORD **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_21;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = &v4[2 * v8];
        v11 = *(_DWORD **)a1;
        do
        {
          *v11 = *v4;
          v11[1] = v4[1];
          v4 += 2;
          v11 += 2;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = &v4[2 * v9];
        v13 = *(_DWORD **)a1;
        do
        {
          *v13 = *v4;
          v13[1] = v4[1];
          v4 += 2;
          v13 += 2;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v14 - (*(_QWORD *)a2 + 8 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

unint64_t sub_1C50C0C08(unint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  uint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  char *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  uint64_t *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  char *v99;
  uint64_t v100;
  unsigned int *v101;
  BOOL v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  unsigned int v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  int v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  char *v116;
  uint64_t v117;
  uint64_t *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  unsigned int v130;
  unint64_t v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  uint64_t v139;
  uint64_t *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  int v145;
  char *v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  uint64_t *v151;
  char *v152;
  uint64_t v153;
  uint64_t *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  int v159;
  char *v160;
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  int v170;
  char *v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD *v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  unsigned int v212;
  unint64_t v213;
  int v214;
  char *v215;
  uint64_t v216;
  BOOL v217;
  char v218;
  uint64_t v219;
  char *v220;
  char *v221;
  unint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t *v225;
  unsigned int *v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  int v230;
  char *v231;
  uint64_t v232;
  uint64_t *v233;
  int v234;
  unsigned int v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  unsigned int *v240;
  uint64_t *v241;
  char *v242;
  uint64_t v243;
  uint64_t *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  int64_t v248;
  uint64_t v249;
  int64_t v250;
  unsigned int *v251;
  int64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  unint64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  unsigned int v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t *v273;
  unsigned int *v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  unint64_t v281;
  int v282;
  unsigned int v283;
  unint64_t v284;
  unsigned int v285;
  unint64_t v286;
  int v287;
  char *v288;
  uint64_t v289;
  unsigned int *v290;
  uint64_t v291;
  uint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t *v297;
  unint64_t v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unint64_t v302;
  int v303;
  char *v304;
  uint64_t v305;
  uint64_t *v306;
  unint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t *v310;
  int v311;
  unsigned int v312;
  char *v313;
  uint64_t v314;
  unint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int *v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  char *v324;
  unsigned int v325;
  unint64_t v326;
  int v327;
  char *v328;
  uint64_t v329;
  uint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  unint64_t v336;
  int v337;
  uint64_t v338;
  unsigned int *v339;
  uint64_t v340;
  uint64_t *v341;
  unint64_t v342;
  unsigned int *v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t **v347;
  uint64_t **v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  unint64_t v352;
  int v353;
  unsigned int v354;
  unint64_t v355;
  unsigned int v356;
  unint64_t v357;
  int v358;
  uint64_t **v359;
  uint64_t v360;
  unsigned int *v361;
  uint64_t *v362;
  unint64_t v363;
  uint64_t **v364;
  uint64_t v365;
  uint64_t *v366;
  int v367;
  unsigned int v368;
  uint64_t **v369;
  uint64_t v370;
  BOOL v371;
  uint64_t *v372;
  int v373;
  unsigned int v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  uint64_t v378;
  uint64_t *v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  char *v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t *v387;
  unsigned int *v388;
  unint64_t v389;
  unsigned int v390;
  unint64_t v391;
  int v392;
  char *v393;
  uint64_t v394;
  uint64_t *v395;
  int v396;
  unsigned int v397;
  unint64_t v398;
  unint64_t v399;
  char *v400;
  uint64_t v401;
  unsigned int *v402;
  uint64_t *v403;
  char *v404;
  uint64_t v405;
  uint64_t *v406;
  int v407;
  unsigned int v408;
  unint64_t v409;
  char *v410;
  uint64_t v411;
  uint64_t *v412;
  int v413;
  unsigned int v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t *v419;
  char *v420;
  uint64_t v421;
  uint64_t *v422;
  int v423;
  unsigned int v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unsigned int *v428;
  unsigned int v430;
  unsigned int v431;
  int64_t v434;
  unsigned int *v436;

  v5 = (uint64_t)a3;
  v436 = (unsigned int *)result;
LABEL_2:
  v6 = v436;
  v428 = a2 - 1;
  while (2)
  {
    v7 = (char *)a2 - (char *)v6;
    v8 = a2 - v6;
    v436 = v6;
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v174 = 0;
        v175 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v176 = *(a2 - 1);
        v177 = *(char **)(v175 + 240);
        v178 = *(char **)(v175 + 248);
        v179 = v176 >> 3;
        v180 = v177;
        do
        {
          if ((v176 - 0x40000000) >= 0xC0000001)
          {
            v181 = **(_QWORD **)v180;
            if (v179 < *(unsigned __int16 *)(v181 + 22)
              && ((1 << (v176 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v181 + 8) + v179)) != 0
              && (!v174
               || *(uint64_t **)v180 != v174
               && ((*(_DWORD *)(v174[1] + ((*(unsigned __int16 *)(v181 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v181 + 24)) & 1) != 0))
            {
              v174 = *(uint64_t **)v180;
            }
          }
          v180 += 8;
        }
        while (v180 != v178);
        v182 = 0;
        v183 = *(_QWORD *)(v175 + 264);
        v184 = *(_DWORD *)(v175 + 272) * ((unint64_t)(v178 - v177) >> 3);
        v185 = *(_DWORD *)(v183 + 24 * (v184 + *(unsigned __int16 *)(*v174 + 24)) + 4);
        v186 = *v6;
        v187 = v186 >> 3;
        result = (1 << (v186 & 7));
        do
        {
          if ((v186 - 0x40000000) >= 0xC0000001)
          {
            v188 = **(_QWORD **)v177;
            if (v187 < *(unsigned __int16 *)(v188 + 22)
              && (result & *(_BYTE *)(*(_QWORD *)(v188 + 8) + v187)) != 0
              && (!v182
               || *(uint64_t **)v177 != v182
               && ((*(_DWORD *)(v182[1] + ((*(unsigned __int16 *)(v188 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v188 + 24)) & 1) != 0))
            {
              v182 = *(uint64_t **)v177;
            }
          }
          v177 += 8;
        }
        while (v177 != v178);
        if (v185 >> 3 > *(_DWORD *)(v183 + 24 * (v184 + *(unsigned __int16 *)(*v182 + 24)) + 4) >> 3)
        {
          *v6 = v176;
          *(a2 - 1) = v186;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C50C36A4((uint64_t *)v6, v6 + 1, v428, *(_QWORD *)(*(_QWORD *)v5 + 8));
      case 4:
        return sub_1C50C4814((uint64_t *)v6, v6 + 1, v6 + 2, v428, v5);
      case 5:
        v189 = v6 + 1;
        v190 = v6 + 2;
        v191 = v6 + 3;
        v192 = v5;
        sub_1C50C4814((uint64_t *)v6, v6 + 1, v6 + 2, v6 + 3, v5);
        v193 = 0;
        v194 = *(_QWORD *)(*(_QWORD *)v192 + 8);
        v195 = *(a2 - 1);
        v196 = *(char **)(v194 + 240);
        v197 = *(char **)(v194 + 248);
        v198 = v195 >> 3;
        v199 = v196;
        do
        {
          if ((v195 - 0x40000000) >= 0xC0000001)
          {
            v200 = **(_QWORD **)v199;
            if (v198 < *(unsigned __int16 *)(v200 + 22)
              && ((1 << (v195 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v200 + 8) + v198)) != 0
              && (!v193
               || *(uint64_t **)v199 != v193
               && ((*(_DWORD *)(v193[1] + ((*(unsigned __int16 *)(v200 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v200 + 24)) & 1) != 0))
            {
              v193 = *(uint64_t **)v199;
            }
          }
          v199 += 8;
        }
        while (v199 != v197);
        v201 = 0;
        v202 = *(_QWORD *)(v194 + 264);
        v203 = (unint64_t)(v197 - v196) >> 3;
        v204 = *(_DWORD *)(v194 + 272) * v203;
        v205 = *(_DWORD *)(v202 + 24 * (v204 + *(unsigned __int16 *)(*v193 + 24)) + 4);
        v206 = *v191;
        result = (v206 - 0x40000000);
        v207 = v206 >> 3;
        v208 = *(char **)(v194 + 240);
        do
        {
          if (result >= 0xC0000001)
          {
            v209 = **(_QWORD **)v208;
            if (v207 < *(unsigned __int16 *)(v209 + 22)
              && ((1 << (v206 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v209 + 8) + v207)) != 0
              && (!v201
               || *(uint64_t **)v208 != v201
               && ((*(_DWORD *)(v201[1] + ((*(unsigned __int16 *)(v209 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v209 + 24)) & 1) != 0))
            {
              v201 = *(uint64_t **)v208;
            }
          }
          v208 += 8;
        }
        while (v208 != v197);
        if (v205 >> 3 > *(_DWORD *)(v202 + 24 * (v204 + *(unsigned __int16 *)(*v201 + 24)) + 4) >> 3)
        {
          v210 = 0;
          *v191 = v195;
          *(a2 - 1) = v206;
          v211 = *v191;
          v212 = v211 - 0x40000000;
          v213 = v211 >> 3;
          v214 = 1 << (v211 & 7);
          v215 = v196;
          do
          {
            if (v212 >= 0xC0000001)
            {
              v216 = **(_QWORD **)v215;
              if (v213 < *(unsigned __int16 *)(v216 + 22)
                && (v214 & *(_BYTE *)(*(_QWORD *)(v216 + 8) + v213)) != 0
                && (!v210
                 || *(uint64_t **)v215 != v210
                 && ((*(_DWORD *)(v210[1] + ((*(unsigned __int16 *)(v216 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v216 + 24)) & 1) != 0))
              {
                v210 = *(uint64_t **)v215;
              }
            }
            v215 += 8;
          }
          while (v215 != v197);
          v372 = 0;
          v373 = *(_DWORD *)(v194 + 272) * v203;
          v374 = *(_DWORD *)(v202 + 24 * (v373 + *(unsigned __int16 *)(*v210 + 24)) + 4);
          v375 = *v190;
          v376 = v375 >> 3;
          v377 = v196;
          do
          {
            if ((v375 - 0x40000000) >= 0xC0000001)
            {
              v378 = **(_QWORD **)v377;
              if (v376 < *(unsigned __int16 *)(v378 + 22)
                && ((1 << (v375 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v378 + 8) + v376)) != 0
                && (!v372
                 || *(uint64_t **)v377 != v372
                 && ((*(_DWORD *)(v372[1] + ((*(unsigned __int16 *)(v378 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v378 + 24)) & 1) != 0))
              {
                v372 = *(uint64_t **)v377;
              }
            }
            v377 += 8;
          }
          while (v377 != v197);
          result = *(unsigned int *)(v202 + 24 * (v373 + *(unsigned __int16 *)(*v372 + 24)) + 4);
          if (v374 >> 3 > result >> 3)
          {
            v379 = 0;
            *v190 = v211;
            *v191 = v375;
            v380 = v196;
            do
            {
              if (v212 >= 0xC0000001)
              {
                v381 = **(_QWORD **)v380;
                if (v213 < *(unsigned __int16 *)(v381 + 22)
                  && (v214 & *(_BYTE *)(*(_QWORD *)(v381 + 8) + v213)) != 0
                  && (!v379
                   || *(uint64_t **)v380 != v379
                   && ((*(_DWORD *)(v379[1] + ((*(unsigned __int16 *)(v381 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v381 + 24)) & 1) != 0))
                {
                  v379 = *(uint64_t **)v380;
                }
              }
              v380 += 8;
            }
            while (v380 != v197);
            v412 = 0;
            v413 = *(_DWORD *)(v194 + 272) * v203;
            v414 = *(_DWORD *)(v202 + 24 * (v413 + *(unsigned __int16 *)(*v379 + 24)) + 4);
            v415 = *v189;
            v416 = v415 >> 3;
            v417 = v196;
            do
            {
              if ((v415 - 0x40000000) >= 0xC0000001)
              {
                v418 = **(_QWORD **)v417;
                if (v416 < *(unsigned __int16 *)(v418 + 22)
                  && ((1 << (v415 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v418 + 8) + v416)) != 0
                  && (!v412
                   || *(uint64_t **)v417 != v412
                   && ((*(_DWORD *)(v412[1] + ((*(unsigned __int16 *)(v418 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v418 + 24)) & 1) != 0))
                {
                  v412 = *(uint64_t **)v417;
                }
              }
              v417 += 8;
            }
            while (v417 != v197);
            result = *(unsigned int *)(v202 + 24 * (v413 + *(unsigned __int16 *)(*v412 + 24)) + 4);
            if (v414 >> 3 > result >> 3)
            {
              v419 = 0;
              *v189 = v211;
              *v190 = v415;
              v420 = v196;
              do
              {
                if (v212 >= 0xC0000001)
                {
                  v421 = **(_QWORD **)v420;
                  if (v213 < *(unsigned __int16 *)(v421 + 22)
                    && (v214 & *(_BYTE *)(*(_QWORD *)(v421 + 8) + v213)) != 0
                    && (!v419
                     || *(uint64_t **)v420 != v419
                     && ((*(_DWORD *)(v419[1] + ((*(unsigned __int16 *)(v421 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v421 + 24)) & 1) != 0))
                  {
                    v419 = *(uint64_t **)v420;
                  }
                }
                v420 += 8;
              }
              while (v420 != v197);
              v422 = 0;
              v423 = *(_DWORD *)(v194 + 272) * v203;
              v424 = *(_DWORD *)(v202 + 24 * (v423 + *(unsigned __int16 *)(*v419 + 24)) + 4);
              v425 = *v6;
              v426 = v425 >> 3;
              result = (1 << (v425 & 7));
              do
              {
                if ((v425 - 0x40000000) >= 0xC0000001)
                {
                  v427 = **(_QWORD **)v196;
                  if (v426 < *(unsigned __int16 *)(v427 + 22)
                    && (result & *(_BYTE *)(*(_QWORD *)(v427 + 8) + v426)) != 0
                    && (!v422
                     || *(uint64_t **)v196 != v422
                     && ((*(_DWORD *)(v422[1] + ((*(unsigned __int16 *)(v427 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v427 + 24)) & 1) != 0))
                  {
                    v422 = *(uint64_t **)v196;
                  }
                }
                v196 += 8;
              }
              while (v196 != v197);
              if (v424 >> 3 > *(_DWORD *)(v202 + 24 * (v423 + *(unsigned __int16 *)(*v422 + 24)) + 4) >> 3)
              {
                *v6 = v211;
                v6[1] = v425;
              }
            }
          }
        }
        return result;
      default:
        v9 = (uint64_t *)v6;
        if (v7 <= 95)
        {
          result = (unint64_t)(v6 + 1);
          v217 = v6 == a2 || result == (_QWORD)a2;
          v218 = v217;
          if ((a5 & 1) != 0)
          {
            if ((v218 & 1) == 0)
            {
              v219 = *(_QWORD *)(*(_QWORD *)v5 + 8);
              v220 = *(char **)(v219 + 240);
              v221 = *(char **)(v219 + 248);
              v222 = (unint64_t)(v221 - v220) >> 3;
              v223 = *(_QWORD *)(v219 + 264);
              v224 = v6;
              do
              {
                v225 = 0;
                v226 = v224;
                v224 = (unsigned int *)result;
                v227 = v226[1];
                v228 = v227 - 0x40000000;
                v229 = v227 >> 3;
                v230 = 1 << (v227 & 7);
                v231 = v220;
                do
                {
                  if (v228 >= 0xC0000001)
                  {
                    v232 = **(_QWORD **)v231;
                    if (v229 < *(unsigned __int16 *)(v232 + 22)
                      && (v230 & *(_BYTE *)(*(_QWORD *)(v232 + 8) + v229)) != 0
                      && (!v225
                       || *(uint64_t **)v231 != v225
                       && ((*(_DWORD *)(v225[1] + ((*(unsigned __int16 *)(v232 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v232 + 24)) & 1) != 0))
                    {
                      v225 = *(uint64_t **)v231;
                    }
                  }
                  v231 += 8;
                }
                while (v231 != v221);
                v233 = 0;
                v234 = *(_DWORD *)(v219 + 272) * v222;
                v235 = *(_DWORD *)(v223 + 24 * (v234 + *(unsigned __int16 *)(*v225 + 24)) + 4);
                v236 = *v226;
                v237 = v236 >> 3;
                v238 = v220;
                do
                {
                  if ((v236 - 0x40000000) >= 0xC0000001)
                  {
                    v239 = **(_QWORD **)v238;
                    if (v237 < *(unsigned __int16 *)(v239 + 22)
                      && ((1 << (v236 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v239 + 8) + v237)) != 0
                      && (!v233
                       || *(uint64_t **)v238 != v233
                       && ((*(_DWORD *)(v233[1] + ((*(unsigned __int16 *)(v239 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v239 + 24)) & 1) != 0))
                    {
                      v233 = *(uint64_t **)v238;
                    }
                  }
                  v238 += 8;
                }
                while (v238 != v221);
                if (v235 >> 3 > *(_DWORD *)(v223 + 24 * (v234 + *(unsigned __int16 *)(*v233 + 24)) + 4) >> 3)
                {
                  v240 = v224;
                  while (1)
                  {
                    *v240 = v236;
                    v240 = v226;
                    if (v226 == v436)
                      break;
                    v241 = 0;
                    v242 = v220;
                    do
                    {
                      if (v228 >= 0xC0000001)
                      {
                        v243 = **(_QWORD **)v242;
                        if (v229 < *(unsigned __int16 *)(v243 + 22)
                          && (v230 & *(_BYTE *)(*(_QWORD *)(v243 + 8) + v229)) != 0
                          && (!v241
                           || *(uint64_t **)v242 != v241
                           && ((*(_DWORD *)(v241[1] + ((*(unsigned __int16 *)(v243 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v243 + 24)) & 1) != 0))
                        {
                          v241 = *(uint64_t **)v242;
                        }
                      }
                      v242 += 8;
                    }
                    while (v242 != v221);
                    v244 = 0;
                    v226 = v240 - 1;
                    v236 = *(v240 - 1);
                    v245 = v236 >> 3;
                    v246 = v220;
                    do
                    {
                      if ((v236 - 0x40000000) >= 0xC0000001)
                      {
                        v247 = **(_QWORD **)v246;
                        if (v245 < *(unsigned __int16 *)(v247 + 22)
                          && ((1 << (v236 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v247 + 8) + v245)) != 0
                          && (!v244
                           || *(uint64_t **)v246 != v244
                           && ((*(_DWORD *)(v244[1] + ((*(unsigned __int16 *)(v247 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v247 + 24)) & 1) != 0))
                        {
                          v244 = *(uint64_t **)v246;
                        }
                      }
                      v246 += 8;
                    }
                    while (v246 != v221);
                    if (*(_DWORD *)(v223
                                   + 24
                                   * (*(_DWORD *)(v219 + 272) * (_DWORD)v222
                                    + *(unsigned __int16 *)(*v241 + 24))
                                   + 4) >> 3 <= *(_DWORD *)(v223
                                                          + 24
                                                          * (*(_DWORD *)(v219 + 272) * (_DWORD)v222
                                                           + *(unsigned __int16 *)(*v244 + 24))
                                                          + 4) >> 3)
                      goto LABEL_390;
                  }
                  v240 = v436;
LABEL_390:
                  *v240 = v227;
                }
                result = (unint64_t)(v224 + 1);
              }
              while (v224 + 1 != a2);
            }
          }
          else if ((v218 & 1) == 0)
          {
            v382 = *(_QWORD *)(*(_QWORD *)v5 + 8);
            v383 = *(char **)(v382 + 240);
            v384 = *(char **)(v382 + 248);
            v385 = (unint64_t)(v384 - v383) >> 3;
            v386 = *(_QWORD *)(v382 + 264);
            do
            {
              v387 = 0;
              v388 = v436;
              v436 = (unsigned int *)result;
              v389 = v388[1];
              v390 = v389 - 0x40000000;
              v391 = v389 >> 3;
              v392 = 1 << (v389 & 7);
              v393 = v383;
              do
              {
                if (v390 >= 0xC0000001)
                {
                  v394 = **(_QWORD **)v393;
                  if (v391 < *(unsigned __int16 *)(v394 + 22)
                    && (v392 & *(_BYTE *)(*(_QWORD *)(v394 + 8) + v391)) != 0
                    && (!v387
                     || *(uint64_t **)v393 != v387
                     && ((*(_DWORD *)(v387[1] + ((*(unsigned __int16 *)(v394 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v394 + 24)) & 1) != 0))
                  {
                    v387 = *(uint64_t **)v393;
                  }
                }
                v393 += 8;
              }
              while (v393 != v384);
              v395 = 0;
              v396 = *(_DWORD *)(v382 + 272) * v385;
              v397 = *(_DWORD *)(v386 + 24 * (v396 + *(unsigned __int16 *)(*v387 + 24)) + 4);
              v398 = *v388;
              v399 = v398 >> 3;
              v400 = v383;
              do
              {
                if ((v398 - 0x40000000) >= 0xC0000001)
                {
                  v401 = **(_QWORD **)v400;
                  if (v399 < *(unsigned __int16 *)(v401 + 22)
                    && ((1 << (v398 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v401 + 8) + v399)) != 0
                    && (!v395
                     || *(uint64_t **)v400 != v395
                     && ((*(_DWORD *)(v395[1] + ((*(unsigned __int16 *)(v401 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v401 + 24)) & 1) != 0))
                  {
                    v395 = *(uint64_t **)v400;
                  }
                }
                v400 += 8;
              }
              while (v400 != v384);
              if (v397 >> 3 > *(_DWORD *)(v386 + 24 * (v396 + *(unsigned __int16 *)(*v395 + 24)) + 4) >> 3)
              {
                v402 = v436;
                do
                {
                  v403 = 0;
                  *v402 = v398;
                  v402 = v388;
                  v404 = v383;
                  do
                  {
                    if (v390 >= 0xC0000001)
                    {
                      v405 = **(_QWORD **)v404;
                      if (v391 < *(unsigned __int16 *)(v405 + 22)
                        && (v392 & *(_BYTE *)(*(_QWORD *)(v405 + 8) + v391)) != 0
                        && (!v403
                         || *(uint64_t **)v404 != v403
                         && ((*(_DWORD *)(v403[1] + ((*(unsigned __int16 *)(v405 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v405 + 24)) & 1) != 0))
                      {
                        v403 = *(uint64_t **)v404;
                      }
                    }
                    v404 += 8;
                  }
                  while (v404 != v384);
                  v406 = 0;
                  v388 = v402 - 1;
                  v398 = *(v402 - 1);
                  v407 = *(_DWORD *)(v382 + 272) * v385;
                  v408 = *(_DWORD *)(v386 + 24 * (v407 + *(unsigned __int16 *)(*v403 + 24)) + 4);
                  v409 = v398 >> 3;
                  v410 = v383;
                  do
                  {
                    if ((v398 - 0x40000000) >= 0xC0000001)
                    {
                      v411 = **(_QWORD **)v410;
                      if (v409 < *(unsigned __int16 *)(v411 + 22)
                        && ((1 << (v398 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v411 + 8) + v409)) != 0
                        && (!v406
                         || *(uint64_t **)v410 != v406
                         && ((*(_DWORD *)(v406[1] + ((*(unsigned __int16 *)(v411 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v411 + 24)) & 1) != 0))
                      {
                        v406 = *(uint64_t **)v410;
                      }
                    }
                    v410 += 8;
                  }
                  while (v410 != v384);
                }
                while (v408 >> 3 > *(_DWORD *)(v386
                                              + 24 * (v407 + *(unsigned __int16 *)(*v406 + 24))
                                              + 4) >> 3);
                *v402 = v389;
              }
              result = (unint64_t)(v436 + 1);
            }
            while (v436 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v6 != a2)
          {
            v248 = (unint64_t)(v8 - 2) >> 1;
            v249 = *(_QWORD *)v5;
            v250 = v248;
            v251 = v6;
            do
            {
              v252 = v250;
              v253 = v249;
              if (v248 >= v250)
              {
                v254 = (2 * v250) | 1;
                v255 = &v251[v254];
                v256 = 2 * v250 + 2;
                v257 = *(_QWORD *)(v249 + 8);
                v434 = v250;
                if (v256 >= v8)
                {
                  v261 = *(char **)(v257 + 240);
                  v260 = *(char **)(v257 + 248);
                }
                else
                {
                  v258 = 0;
                  v259 = *v255;
                  v261 = *(char **)(v257 + 240);
                  v260 = *(char **)(v257 + 248);
                  v262 = v259 >> 3;
                  v263 = v261;
                  do
                  {
                    if ((v259 - 0x40000000) >= 0xC0000001)
                    {
                      v264 = **(_QWORD **)v263;
                      if (v262 < *(unsigned __int16 *)(v264 + 22)
                        && ((1 << (v259 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v264 + 8) + v262)) != 0
                        && (!v258
                         || *(uint64_t **)v263 != v258
                         && ((*(_DWORD *)(v258[1] + ((*(unsigned __int16 *)(v264 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v264 + 24)) & 1) != 0))
                      {
                        v258 = *(uint64_t **)v263;
                      }
                    }
                    v263 += 8;
                  }
                  while (v263 != v260);
                  v265 = 0;
                  v266 = v255[1];
                  v267 = *(_QWORD *)(v257 + 264);
                  v268 = *(_DWORD *)(v257 + 272) * ((unint64_t)(v260 - v261) >> 3);
                  v269 = *(_DWORD *)(v267 + 24 * (v268 + *(unsigned __int16 *)(*v258 + 24)) + 4);
                  v270 = v266 >> 3;
                  v271 = *(char **)(v257 + 240);
                  do
                  {
                    if ((v266 - 0x40000000) >= 0xC0000001)
                    {
                      v272 = **(_QWORD **)v271;
                      if (v270 < *(unsigned __int16 *)(v272 + 22)
                        && ((1 << (v266 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v272 + 8) + v270)) != 0
                        && (!v265
                         || *(uint64_t **)v271 != v265
                         && ((*(_DWORD *)(v265[1] + ((*(unsigned __int16 *)(v272 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v272 + 24)) & 1) != 0))
                      {
                        v265 = *(uint64_t **)v271;
                      }
                    }
                    v271 += 8;
                  }
                  while (v271 != v260);
                  if (v269 >> 3 > *(_DWORD *)(v267 + 24 * (v268 + *(unsigned __int16 *)(*v265 + 24)) + 4) >> 3)
                  {
                    ++v255;
                    v254 = v256;
                  }
                  v252 = v434;
                }
                v273 = 0;
                v274 = &v251[v252];
                v275 = *v255;
                v276 = v275 >> 3;
                v277 = v261;
                do
                {
                  if ((v275 - 0x40000000) >= 0xC0000001)
                  {
                    v278 = **(_QWORD **)v277;
                    if (v276 < *(unsigned __int16 *)(v278 + 22)
                      && ((1 << (v275 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v278 + 8) + v276)) != 0
                      && (!v273
                       || *(uint64_t **)v277 != v273
                       && ((*(_DWORD *)(v273[1] + ((*(unsigned __int16 *)(v278 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v278 + 24)) & 1) != 0))
                    {
                      v273 = *(uint64_t **)v277;
                    }
                  }
                  v277 += 8;
                }
                while (v277 != v260);
                v279 = 0;
                v280 = *(_QWORD *)(v257 + 264);
                v281 = (unint64_t)(v260 - v261) >> 3;
                v282 = *(_DWORD *)(v257 + 272) * v281;
                v283 = *(_DWORD *)(v280 + 24 * (v282 + *(unsigned __int16 *)(*v273 + 24)) + 4);
                v284 = *v274;
                v285 = v284 - 0x40000000;
                v286 = v284 >> 3;
                v431 = *v274;
                v287 = 1 << (v284 & 7);
                v288 = v261;
                do
                {
                  if (v285 >= 0xC0000001)
                  {
                    v289 = **(_QWORD **)v288;
                    if (v286 < *(unsigned __int16 *)(v289 + 22)
                      && (v287 & *(_BYTE *)(*(_QWORD *)(v289 + 8) + v286)) != 0
                      && (!v279
                       || *(uint64_t **)v288 != v279
                       && ((*(_DWORD *)(v279[1] + ((*(unsigned __int16 *)(v289 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v289 + 24)) & 1) != 0))
                    {
                      v279 = *(uint64_t **)v288;
                    }
                  }
                  v288 += 8;
                }
                while (v288 != v260);
                v252 = v434;
                if (v283 >> 3 <= *(_DWORD *)(v280 + 24 * (v282 + *(unsigned __int16 *)(*v279 + 24)) + 4) >> 3)
                {
                  do
                  {
                    v290 = v255;
                    *v274 = v275;
                    if (v248 < v254)
                      break;
                    v291 = (2 * v254) | 1;
                    v255 = &v251[v291];
                    v254 = 2 * v254 + 2;
                    if (v254 >= v8)
                    {
                      v254 = v291;
                    }
                    else
                    {
                      v292 = 0;
                      v293 = *v255;
                      v294 = v293 >> 3;
                      v295 = v261;
                      do
                      {
                        if ((v293 - 0x40000000) >= 0xC0000001)
                        {
                          v296 = **(_QWORD **)v295;
                          if (v294 < *(unsigned __int16 *)(v296 + 22)
                            && ((1 << (v293 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v296 + 8) + v294)) != 0
                            && (!v292
                             || *(uint64_t **)v295 != v292
                             && ((*(_DWORD *)(v292[1] + ((*(unsigned __int16 *)(v296 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v296 + 24)) & 1) != 0))
                          {
                            v292 = *(uint64_t **)v295;
                          }
                        }
                        v295 += 8;
                      }
                      while (v295 != v260);
                      v297 = 0;
                      v298 = v255[1];
                      v299 = *(_DWORD *)(v257 + 272) * v281;
                      v300 = *(_DWORD *)(v280 + 24 * (v299 + *(unsigned __int16 *)(*v292 + 24)) + 4);
                      v301 = v298 - 0x40000000;
                      v302 = v298 >> 3;
                      v303 = 1 << (v298 & 7);
                      v304 = v261;
                      do
                      {
                        if (v301 >= 0xC0000001)
                        {
                          v305 = **(_QWORD **)v304;
                          if (v302 < *(unsigned __int16 *)(v305 + 22)
                            && (v303 & *(_BYTE *)(*(_QWORD *)(v305 + 8) + v302)) != 0
                            && (!v297
                             || *(uint64_t **)v304 != v297
                             && ((*(_DWORD *)(v297[1] + ((*(unsigned __int16 *)(v305 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v305 + 24)) & 1) != 0))
                          {
                            v297 = *(uint64_t **)v304;
                          }
                        }
                        v304 += 8;
                      }
                      while (v304 != v260);
                      if (v300 >> 3 <= *(_DWORD *)(v280
                                                  + 24 * (v299 + *(unsigned __int16 *)(*v297 + 24))
                                                  + 4) >> 3)
                        v254 = v291;
                      else
                        ++v255;
                    }
                    v306 = 0;
                    v275 = *v255;
                    v307 = v275 >> 3;
                    v308 = v261;
                    do
                    {
                      if ((v275 - 0x40000000) >= 0xC0000001)
                      {
                        v309 = **(_QWORD **)v308;
                        if (v307 < *(unsigned __int16 *)(v309 + 22)
                          && ((1 << (v275 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v309 + 8) + v307)) != 0
                          && (!v306
                           || *(uint64_t **)v308 != v306
                           && ((*(_DWORD *)(v306[1] + ((*(unsigned __int16 *)(v309 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v309 + 24)) & 1) != 0))
                        {
                          v306 = *(uint64_t **)v308;
                        }
                      }
                      v308 += 8;
                    }
                    while (v308 != v260);
                    v310 = 0;
                    v311 = *(_DWORD *)(v257 + 272) * v281;
                    v312 = *(_DWORD *)(v280 + 24 * (v311 + *(unsigned __int16 *)(*v306 + 24)) + 4);
                    v313 = v261;
                    do
                    {
                      if (v285 >= 0xC0000001)
                      {
                        v314 = **(_QWORD **)v313;
                        if (v286 < *(unsigned __int16 *)(v314 + 22)
                          && (v287 & *(_BYTE *)(*(_QWORD *)(v314 + 8) + v286)) != 0
                          && (!v310
                           || *(uint64_t **)v313 != v310
                           && ((*(_DWORD *)(v310[1] + ((*(unsigned __int16 *)(v314 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v314 + 24)) & 1) != 0))
                        {
                          v310 = *(uint64_t **)v313;
                        }
                      }
                      v313 += 8;
                    }
                    while (v313 != v260);
                    v274 = v290;
                    v251 = v436;
                  }
                  while (v312 >> 3 <= *(_DWORD *)(v280
                                                 + 24 * (v311 + *(unsigned __int16 *)(*v310 + 24))
                                                 + 4) >> 3);
                  *v290 = v431;
                  v252 = v434;
                  v249 = *a3;
                }
              }
              v250 = v252 - 1;
            }
            while (v252);
            do
            {
              v315 = 0;
              v316 = v436;
              v317 = *v436;
              do
              {
                v318 = &v316[v315 + 1];
                result = (2 * v315) | 1;
                v319 = 2 * v315 + 2;
                if (v319 < v8)
                {
                  v320 = 0;
                  v321 = *(_QWORD *)(v253 + 8);
                  v322 = *v318;
                  v323 = *(char **)(v321 + 240);
                  v324 = *(char **)(v321 + 248);
                  v325 = v322 - 0x40000000;
                  v326 = v322 >> 3;
                  v327 = 1 << (v322 & 7);
                  v328 = v323;
                  do
                  {
                    if (v325 >= 0xC0000001)
                    {
                      v329 = **(_QWORD **)v328;
                      if (v326 < *(unsigned __int16 *)(v329 + 22)
                        && (v327 & *(_BYTE *)(*(_QWORD *)(v329 + 8) + v326)) != 0
                        && (!v320
                         || *(uint64_t **)v328 != v320
                         && ((*(_DWORD *)(v320[1] + ((*(unsigned __int16 *)(v329 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v329 + 24)) & 1) != 0))
                      {
                        v320 = *(uint64_t **)v328;
                      }
                    }
                    v328 += 8;
                  }
                  while (v328 != v324);
                  v330 = 0;
                  v331 = v318[1];
                  v332 = *(_QWORD *)(v321 + 264);
                  v333 = *(_DWORD *)(v321 + 272) * ((unint64_t)(v324 - v323) >> 3);
                  v334 = *(_DWORD *)(v332 + 24 * (v333 + *(unsigned __int16 *)(*v320 + 24)) + 4);
                  v335 = v331 - 0x40000000;
                  v336 = v331 >> 3;
                  v337 = 1 << (v331 & 7);
                  do
                  {
                    if (v335 >= 0xC0000001)
                    {
                      v338 = **(_QWORD **)v323;
                      if (v336 < *(unsigned __int16 *)(v338 + 22)
                        && (v337 & *(_BYTE *)(*(_QWORD *)(v338 + 8) + v336)) != 0
                        && (!v330
                         || *(uint64_t **)v323 != v330
                         && ((*(_DWORD *)(v330[1] + ((*(unsigned __int16 *)(v338 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v338 + 24)) & 1) != 0))
                      {
                        v330 = *(uint64_t **)v323;
                      }
                    }
                    v323 += 8;
                  }
                  while (v323 != v324);
                  if (v334 >> 3 > *(_DWORD *)(v332 + 24 * (v333 + *(unsigned __int16 *)(*v330 + 24)) + 4) >> 3)
                  {
                    ++v318;
                    result = v319;
                  }
                }
                *v316 = *v318;
                v316 = v318;
                v315 = result;
              }
              while ((uint64_t)result <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
              v339 = a2 - 1;
              v217 = v318 == --a2;
              if (v217)
              {
                *v318 = v317;
              }
              else
              {
                *v318 = *v339;
                *v339 = v317;
                v340 = (char *)v318 - (char *)v436 + 4;
                if (v340 >= 5)
                {
                  v341 = 0;
                  v342 = (((unint64_t)v340 >> 2) - 2) >> 1;
                  v343 = &v436[v342];
                  v344 = *(_QWORD *)(v253 + 8);
                  v345 = *v343;
                  v346 = v345 >> 3;
                  result = *(_QWORD *)(v344 + 240);
                  v347 = *(uint64_t ***)(v344 + 248);
                  v348 = (uint64_t **)result;
                  do
                  {
                    if ((v345 - 0x40000000) >= 0xC0000001)
                    {
                      v349 = **v348;
                      if (v346 < *(unsigned __int16 *)(v349 + 22)
                        && ((1 << (v345 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v349 + 8) + v346)) != 0
                        && (!v341
                         || *v348 != v341
                         && ((*(_DWORD *)(v341[1] + ((*(unsigned __int16 *)(v349 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v349 + 24)) & 1) != 0))
                      {
                        v341 = *v348;
                      }
                    }
                    ++v348;
                  }
                  while (v348 != v347);
                  v350 = 0;
                  v351 = *(_QWORD *)(v344 + 264);
                  v352 = ((unint64_t)v347 - result) >> 3;
                  v353 = *(_DWORD *)(v344 + 272) * v352;
                  v354 = *(_DWORD *)(v351 + 24 * (v353 + *(unsigned __int16 *)(*v341 + 24)) + 4);
                  v355 = *v318;
                  v356 = v355 - 0x40000000;
                  v357 = v355 >> 3;
                  v358 = 1 << (v355 & 7);
                  v359 = *(uint64_t ***)(v344 + 240);
                  do
                  {
                    if (v356 >= 0xC0000001)
                    {
                      v360 = **v359;
                      if (v357 < *(unsigned __int16 *)(v360 + 22)
                        && (v358 & *(_BYTE *)(*(_QWORD *)(v360 + 8) + v357)) != 0
                        && (!v350
                         || *v359 != v350
                         && ((*(_DWORD *)(v350[1] + ((*(unsigned __int16 *)(v360 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v360 + 24)) & 1) != 0))
                      {
                        v350 = *v359;
                      }
                    }
                    ++v359;
                  }
                  while (v359 != v347);
                  if (v354 >> 3 > *(_DWORD *)(v351 + 24 * (v353 + *(unsigned __int16 *)(*v350 + 24)) + 4) >> 3)
                  {
                    do
                    {
                      v361 = v343;
                      *v318 = v345;
                      if (!v342)
                        break;
                      v362 = 0;
                      v342 = (v342 - 1) >> 1;
                      v343 = &v436[v342];
                      v345 = *v343;
                      v363 = v345 >> 3;
                      v364 = (uint64_t **)result;
                      do
                      {
                        if ((v345 - 0x40000000) >= 0xC0000001)
                        {
                          v365 = **v364;
                          if (v363 < *(unsigned __int16 *)(v365 + 22)
                            && ((1 << (v345 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v365 + 8) + v363)) != 0
                            && (!v362
                             || *v364 != v362
                             && ((*(_DWORD *)(v362[1] + ((*(unsigned __int16 *)(v365 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v365 + 24)) & 1) != 0))
                          {
                            v362 = *v364;
                          }
                        }
                        ++v364;
                      }
                      while (v364 != v347);
                      v366 = 0;
                      v367 = *(_DWORD *)(v344 + 272) * v352;
                      v368 = *(_DWORD *)(v351 + 24 * (v367 + *(unsigned __int16 *)(*v362 + 24)) + 4);
                      v369 = (uint64_t **)result;
                      do
                      {
                        if (v356 >= 0xC0000001)
                        {
                          v370 = **v369;
                          if (v357 < *(unsigned __int16 *)(v370 + 22)
                            && (v358 & *(_BYTE *)(*(_QWORD *)(v370 + 8) + v357)) != 0
                            && (!v366
                             || *v369 != v366
                             && ((*(_DWORD *)(v366[1] + ((*(unsigned __int16 *)(v370 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v370 + 24)) & 1) != 0))
                          {
                            v366 = *v369;
                          }
                        }
                        ++v369;
                      }
                      while (v369 != v347);
                      v371 = v368 >> 3 > *(_DWORD *)(v351
                                                   + 24 * (v367 + *(unsigned __int16 *)(*v366 + 24))
                                                   + 4) >> 3;
                      v318 = v361;
                    }
                    while (v371);
                    *v361 = v355;
                  }
                }
              }
              v371 = v8-- <= 2;
            }
            while (!v371);
          }
          return result;
        }
        v10 = (unint64_t)v8 >> 1;
        v11 = (uint64_t *)&v6[(unint64_t)v8 >> 1];
        v12 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        v13 = v5;
        if ((unint64_t)v7 < 0x201)
        {
          sub_1C50C36A4(v11, v9, v428, v12);
          v15 = v436;
        }
        else
        {
          sub_1C50C36A4(v9, v11, v428, v12);
          sub_1C50C36A4((uint64_t *)(v436 + 1), (_DWORD *)v11 - 1, a2 - 2, *(_QWORD *)(*(_QWORD *)v13 + 8));
          v14 = &v436[v10 + 1];
          sub_1C50C36A4((uint64_t *)v436 + 1, v14, a2 - 3, *(_QWORD *)(*(_QWORD *)v13 + 8));
          sub_1C50C36A4((uint64_t *)((char *)v11 - 4), v11, v14, *(_QWORD *)(*(_QWORD *)v13 + 8));
          v15 = v436;
          v16 = *v436;
          *v436 = *(_DWORD *)v11;
          *(_DWORD *)v11 = v16;
        }
        --a4;
        v17 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if ((a5 & 1) == 0)
        {
          v27 = 0;
          v28 = *(v15 - 1);
          v19 = *(char **)(v17 + 240);
          v20 = *(char **)(v17 + 248);
          v29 = v28 - 0x40000000;
          v30 = v28 >> 3;
          v31 = 1 << (v28 & 7);
          v32 = v19;
          do
          {
            if (v29 >= 0xC0000001)
            {
              v33 = **(_QWORD **)v32;
              if (v30 < *(unsigned __int16 *)(v33 + 22)
                && (v31 & *(_BYTE *)(*(_QWORD *)(v33 + 8) + v30)) != 0
                && (!v27
                 || *(uint64_t **)v32 != v27
                 && ((*(_DWORD *)(v27[1] + ((*(unsigned __int16 *)(v33 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v33 + 24)) & 1) != 0))
              {
                v27 = *(uint64_t **)v32;
              }
            }
            v32 += 8;
          }
          while (v32 != v20);
          v34 = 0;
          v21 = *(_QWORD *)(v17 + 264);
          v22 = (unint64_t)(v20 - v19) >> 3;
          v23 = *(_DWORD *)(v17 + 272) * v22;
          v35 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v27 + 24)) + 4);
          v36 = *v436;
          v25 = v36 >> 3;
          v24 = v36 - 0x40000000;
          v26 = 1 << (v36 & 7);
          v37 = *(char **)(v17 + 240);
          do
          {
            if (v24 >= 0xC0000001)
            {
              v38 = **(_QWORD **)v37;
              if (v25 < *(unsigned __int16 *)(v38 + 22)
                && (v26 & *(_BYTE *)(*(_QWORD *)(v38 + 8) + v25)) != 0
                && (!v34
                 || *(uint64_t **)v37 != v34
                 && ((*(_DWORD *)(v34[1] + ((*(unsigned __int16 *)(v38 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v38 + 24)) & 1) != 0))
              {
                v34 = *(uint64_t **)v37;
              }
            }
            v37 += 8;
          }
          while (v37 != v20);
          if (v35 >> 3 > *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v34 + 24)) + 4) >> 3)
          {
            v430 = *v436;
            v15 = v436;
            goto LABEL_32;
          }
          v103 = 0;
          v104 = *(char **)(v17 + 240);
          do
          {
            if (v24 >= 0xC0000001)
            {
              v105 = **(_QWORD **)v104;
              if (v25 < *(unsigned __int16 *)(v105 + 22)
                && (v26 & *(_BYTE *)(*(_QWORD *)(v105 + 8) + v25)) != 0
                && (!v103
                 || *(uint64_t **)v104 != v103
                 && ((*(_DWORD *)(v103[1] + ((*(unsigned __int16 *)(v105 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v105 + 24)) & 1) != 0))
              {
                v103 = *(uint64_t **)v104;
              }
            }
            v104 += 8;
          }
          while (v104 != v20);
          v106 = *v436;
          v107 = 0;
          v108 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v103 + 24)) + 4);
          v109 = *v428;
          v110 = v109 - 0x40000000;
          v111 = v109 >> 3;
          v112 = 1 << (v109 & 7);
          v113 = *(char **)(v17 + 240);
          do
          {
            if (v110 >= 0xC0000001)
            {
              v114 = **(_QWORD **)v113;
              if (v111 < *(unsigned __int16 *)(v114 + 22)
                && (v112 & *(_BYTE *)(*(_QWORD *)(v114 + 8) + v111)) != 0
                && (!v107
                 || *(uint64_t **)v113 != v107
                 && ((*(_DWORD *)(v107[1] + ((*(unsigned __int16 *)(v114 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v114 + 24)) & 1) != 0))
              {
                v107 = *(uint64_t **)v113;
              }
            }
            v113 += 8;
          }
          while (v113 != v20);
          v6 = v436;
          if (v108 >> 3 <= *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v107 + 24)) + 4) >> 3)
          {
            do
            {
              if (++v6 >= a2)
                break;
              v126 = 0;
              v127 = *(char **)(v17 + 240);
              do
              {
                if (v24 >= 0xC0000001)
                {
                  v128 = **(_QWORD **)v127;
                  if (v25 < *(unsigned __int16 *)(v128 + 22)
                    && (v26 & *(_BYTE *)(*(_QWORD *)(v128 + 8) + v25)) != 0
                    && (!v126
                     || *(uint64_t **)v127 != v126
                     && ((*(_DWORD *)(v126[1] + ((*(unsigned __int16 *)(v128 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v128 + 24)) & 1) != 0))
                  {
                    v126 = *(uint64_t **)v127;
                  }
                }
                v127 += 8;
              }
              while (v127 != v20);
              v129 = 0;
              v130 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v126 + 24)) + 4);
              v131 = *v6;
              v132 = v131 - 0x40000000;
              v133 = v131 >> 3;
              v134 = 1 << (v131 & 7);
              v135 = *(char **)(v17 + 240);
              do
              {
                if (v132 >= 0xC0000001)
                {
                  v136 = **(_QWORD **)v135;
                  if (v133 < *(unsigned __int16 *)(v136 + 22)
                    && (v134 & *(_BYTE *)(*(_QWORD *)(v136 + 8) + v133)) != 0
                    && (!v129
                     || *(uint64_t **)v135 != v129
                     && ((*(_DWORD *)(v129[1] + ((*(unsigned __int16 *)(v136 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v136 + 24)) & 1) != 0))
                  {
                    v129 = *(uint64_t **)v135;
                  }
                }
                v135 += 8;
              }
              while (v135 != v20);
            }
            while (v130 >> 3 <= *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v129 + 24)) + 4) >> 3);
          }
          else
          {
            v6 = v436;
            do
            {
              v115 = 0;
              v116 = *(char **)(v17 + 240);
              do
              {
                if (v24 >= 0xC0000001)
                {
                  v117 = **(_QWORD **)v116;
                  if (v25 < *(unsigned __int16 *)(v117 + 22)
                    && (v26 & *(_BYTE *)(*(_QWORD *)(v117 + 8) + v25)) != 0
                    && (!v115
                     || *(uint64_t **)v116 != v115
                     && ((*(_DWORD *)(v115[1] + ((*(unsigned __int16 *)(v117 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v117 + 24)) & 1) != 0))
                  {
                    v115 = *(uint64_t **)v116;
                  }
                }
                v116 += 8;
              }
              while (v116 != v20);
              v118 = 0;
              v119 = v6[1];
              ++v6;
              v120 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v115 + 24)) + 4);
              v121 = v119 - 0x40000000;
              v122 = (unint64_t)v119 >> 3;
              v123 = 1 << (v119 & 7);
              v124 = *(char **)(v17 + 240);
              do
              {
                if (v121 >= 0xC0000001)
                {
                  v125 = **(_QWORD **)v124;
                  if (v122 < *(unsigned __int16 *)(v125 + 22)
                    && (v123 & *(_BYTE *)(*(_QWORD *)(v125 + 8) + v122)) != 0
                    && (!v118
                     || *(uint64_t **)v124 != v118
                     && ((*(_DWORD *)(v118[1] + ((*(unsigned __int16 *)(v125 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v125 + 24)) & 1) != 0))
                  {
                    v118 = *(uint64_t **)v124;
                  }
                }
                v124 += 8;
              }
              while (v124 != v20);
            }
            while (v120 >> 3 <= *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v118 + 24)) + 4) >> 3);
          }
          result = (unint64_t)a2;
          if (v6 < a2)
          {
            result = (unint64_t)a2;
            do
            {
              v137 = 0;
              v138 = *(char **)(v17 + 240);
              do
              {
                if (v24 >= 0xC0000001)
                {
                  v139 = **(_QWORD **)v138;
                  if (v25 < *(unsigned __int16 *)(v139 + 22)
                    && (v26 & *(_BYTE *)(*(_QWORD *)(v139 + 8) + v25)) != 0
                    && (!v137
                     || *(uint64_t **)v138 != v137
                     && ((*(_DWORD *)(v137[1] + ((*(unsigned __int16 *)(v139 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v139 + 24)) & 1) != 0))
                  {
                    v137 = *(uint64_t **)v138;
                  }
                }
                v138 += 8;
              }
              while (v138 != v20);
              v140 = 0;
              v141 = *(_DWORD *)(result - 4);
              result -= 4;
              v142 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v137 + 24)) + 4);
              v143 = v141 - 0x40000000;
              v144 = (unint64_t)v141 >> 3;
              v145 = 1 << (v141 & 7);
              v146 = *(char **)(v17 + 240);
              do
              {
                if (v143 >= 0xC0000001)
                {
                  v147 = **(_QWORD **)v146;
                  if (v144 < *(unsigned __int16 *)(v147 + 22)
                    && (v145 & *(_BYTE *)(*(_QWORD *)(v147 + 8) + v144)) != 0
                    && (!v140
                     || *(uint64_t **)v146 != v140
                     && ((*(_DWORD *)(v140[1] + ((*(unsigned __int16 *)(v147 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v147 + 24)) & 1) != 0))
                  {
                    v140 = *(uint64_t **)v146;
                  }
                }
                v146 += 8;
              }
              while (v146 != v20);
            }
            while (v142 >> 3 > *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v140 + 24)) + 4) >> 3);
          }
          if ((unint64_t)v6 < result)
          {
            v148 = *v6;
            v149 = *(_DWORD *)result;
            do
            {
              *v6 = v149;
              *(_DWORD *)result = v148;
              v150 = *(_DWORD *)(v17 + 272) * v22;
              do
              {
                v151 = 0;
                v152 = v19;
                do
                {
                  if (v24 >= 0xC0000001)
                  {
                    v153 = **(_QWORD **)v152;
                    if (v25 < *(unsigned __int16 *)(v153 + 22)
                      && (v26 & *(_BYTE *)(*(_QWORD *)(v153 + 8) + v25)) != 0
                      && (!v151
                       || *(uint64_t **)v152 != v151
                       && ((*(_DWORD *)(v151[1] + ((*(unsigned __int16 *)(v153 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v153 + 24)) & 1) != 0))
                    {
                      v151 = *(uint64_t **)v152;
                    }
                  }
                  v152 += 8;
                }
                while (v152 != v20);
                v154 = 0;
                v155 = v6[1];
                ++v6;
                v148 = v155;
                v156 = *(_DWORD *)(v21 + 24 * (v150 + *(unsigned __int16 *)(*v151 + 24)) + 4);
                v157 = v155 - 0x40000000;
                v158 = (unint64_t)v155 >> 3;
                v159 = 1 << (v155 & 7);
                v160 = v19;
                do
                {
                  if (v157 >= 0xC0000001)
                  {
                    v161 = **(_QWORD **)v160;
                    if (v158 < *(unsigned __int16 *)(v161 + 22)
                      && (v159 & *(_BYTE *)(*(_QWORD *)(v161 + 8) + v158)) != 0
                      && (!v154
                       || *(uint64_t **)v160 != v154
                       && ((*(_DWORD *)(v154[1] + ((*(unsigned __int16 *)(v161 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v161 + 24)) & 1) != 0))
                    {
                      v154 = *(uint64_t **)v160;
                    }
                  }
                  v160 += 8;
                }
                while (v160 != v20);
              }
              while (v156 >> 3 <= *(_DWORD *)(v21 + 24 * (v150 + *(unsigned __int16 *)(*v154 + 24)) + 4) >> 3);
              do
              {
                v162 = 0;
                v163 = v19;
                do
                {
                  if (v24 >= 0xC0000001)
                  {
                    v164 = **(_QWORD **)v163;
                    if (v25 < *(unsigned __int16 *)(v164 + 22)
                      && (v26 & *(_BYTE *)(*(_QWORD *)(v164 + 8) + v25)) != 0
                      && (!v162
                       || *(uint64_t **)v163 != v162
                       && ((*(_DWORD *)(v162[1] + ((*(unsigned __int16 *)(v164 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v164 + 24)) & 1) != 0))
                    {
                      v162 = *(uint64_t **)v163;
                    }
                  }
                  v163 += 8;
                }
                while (v163 != v20);
                v165 = 0;
                v166 = *(_DWORD *)(result - 4);
                result -= 4;
                v149 = v166;
                v167 = *(_DWORD *)(v21 + 24 * (v150 + *(unsigned __int16 *)(*v162 + 24)) + 4);
                v168 = v166 - 0x40000000;
                v169 = (unint64_t)v166 >> 3;
                v170 = 1 << (v166 & 7);
                v171 = v19;
                do
                {
                  if (v168 >= 0xC0000001)
                  {
                    v172 = **(_QWORD **)v171;
                    if (v169 < *(unsigned __int16 *)(v172 + 22)
                      && (v170 & *(_BYTE *)(*(_QWORD *)(v172 + 8) + v169)) != 0
                      && (!v165
                       || *(uint64_t **)v171 != v165
                       && ((*(_DWORD *)(v165[1] + ((*(unsigned __int16 *)(v172 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v172 + 24)) & 1) != 0))
                    {
                      v165 = *(uint64_t **)v171;
                    }
                  }
                  v171 += 8;
                }
                while (v171 != v20);
              }
              while (v167 >> 3 > *(_DWORD *)(v21 + 24 * (v150 + *(unsigned __int16 *)(*v165 + 24)) + 4) >> 3);
            }
            while ((unint64_t)v6 < result);
          }
          v173 = v6 - 1;
          if (v6 - 1 != v436)
            *v436 = *v173;
          a5 = 0;
          *v173 = v106;
          v5 = (uint64_t)a3;
          continue;
        }
        v18 = *v15;
        v19 = *(char **)(v17 + 240);
        v20 = *(char **)(v17 + 248);
        v21 = *(_QWORD *)(v17 + 264);
        v22 = (unint64_t)(v20 - v19) >> 3;
        v23 = *(_DWORD *)(v17 + 272) * v22;
        v24 = v18 - 0x40000000;
        v25 = v18 >> 3;
        v430 = *v15;
        v26 = 1 << (v18 & 7);
LABEL_32:
        v39 = v15;
        do
        {
          v40 = 0;
          v41 = v39;
          v43 = v39[1];
          ++v39;
          v42 = v43;
          v44 = v43 - 0x40000000;
          v45 = (unint64_t)v43 >> 3;
          v46 = 1 << (v43 & 7);
          v47 = v19;
          do
          {
            if (v44 >= 0xC0000001)
            {
              v48 = **(_QWORD **)v47;
              if (v45 < *(unsigned __int16 *)(v48 + 22)
                && (v46 & *(_BYTE *)(*(_QWORD *)(v48 + 8) + v45)) != 0
                && (!v40
                 || *(uint64_t **)v47 != v40
                 && ((*(_DWORD *)(v40[1] + ((*(unsigned __int16 *)(v48 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v48 + 24)) & 1) != 0))
              {
                v40 = *(uint64_t **)v47;
              }
            }
            v47 += 8;
          }
          while (v47 != v20);
          v49 = 0;
          v50 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v40 + 24)) + 4);
          v51 = v19;
          do
          {
            if (v24 >= 0xC0000001)
            {
              v52 = **(_QWORD **)v51;
              if (v25 < *(unsigned __int16 *)(v52 + 22)
                && (v26 & *(_BYTE *)(*(_QWORD *)(v52 + 8) + v25)) != 0
                && (!v49
                 || *(uint64_t **)v51 != v49
                 && ((*(_DWORD *)(v49[1] + ((*(unsigned __int16 *)(v52 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v52 + 24)) & 1) != 0))
              {
                v49 = *(uint64_t **)v51;
              }
            }
            v51 += 8;
          }
          while (v51 != v20);
        }
        while (v50 >> 3 > *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v49 + 24)) + 4) >> 3);
        v53 = a2;
        if (v41 == v436)
        {
          v53 = a2;
          do
          {
            if (v39 >= v53)
              break;
            v65 = 0;
            v66 = *--v53;
            v67 = v66 - 0x40000000;
            v68 = (unint64_t)v66 >> 3;
            v69 = 1 << (v66 & 7);
            v70 = v19;
            do
            {
              if (v67 >= 0xC0000001)
              {
                v71 = **(_QWORD **)v70;
                if (v68 < *(unsigned __int16 *)(v71 + 22)
                  && (v69 & *(_BYTE *)(*(_QWORD *)(v71 + 8) + v68)) != 0
                  && (!v65
                   || *(uint64_t **)v70 != v65
                   && ((*(_DWORD *)(v65[1] + ((*(unsigned __int16 *)(v71 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v71 + 24)) & 1) != 0))
                {
                  v65 = *(uint64_t **)v70;
                }
              }
              v70 += 8;
            }
            while (v70 != v20);
            v72 = 0;
            v73 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v65 + 24)) + 4);
            v74 = v19;
            do
            {
              if (v24 >= 0xC0000001)
              {
                v75 = **(_QWORD **)v74;
                if (v25 < *(unsigned __int16 *)(v75 + 22)
                  && (v26 & *(_BYTE *)(*(_QWORD *)(v75 + 8) + v25)) != 0
                  && (!v72
                   || *(uint64_t **)v74 != v72
                   && ((*(_DWORD *)(v72[1] + ((*(unsigned __int16 *)(v75 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v75 + 24)) & 1) != 0))
                {
                  v72 = *(uint64_t **)v74;
                }
              }
              v74 += 8;
            }
            while (v74 != v20);
          }
          while (v73 >> 3 <= *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v72 + 24)) + 4) >> 3);
        }
        else
        {
          do
          {
            v54 = 0;
            v55 = *--v53;
            v56 = v55 - 0x40000000;
            v57 = (unint64_t)v55 >> 3;
            v58 = 1 << (v55 & 7);
            v59 = v19;
            do
            {
              if (v56 >= 0xC0000001)
              {
                v60 = **(_QWORD **)v59;
                if (v57 < *(unsigned __int16 *)(v60 + 22)
                  && (v58 & *(_BYTE *)(*(_QWORD *)(v60 + 8) + v57)) != 0
                  && (!v54
                   || *(uint64_t **)v59 != v54
                   && ((*(_DWORD *)(v54[1] + ((*(unsigned __int16 *)(v60 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v60 + 24)) & 1) != 0))
                {
                  v54 = *(uint64_t **)v59;
                }
              }
              v59 += 8;
            }
            while (v59 != v20);
            v61 = 0;
            v62 = *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v54 + 24)) + 4);
            v63 = v19;
            do
            {
              if (v24 >= 0xC0000001)
              {
                v64 = **(_QWORD **)v63;
                if (v25 < *(unsigned __int16 *)(v64 + 22)
                  && (v26 & *(_BYTE *)(*(_QWORD *)(v64 + 8) + v25)) != 0
                  && (!v61
                   || *(uint64_t **)v63 != v61
                   && ((*(_DWORD *)(v61[1] + ((*(unsigned __int16 *)(v64 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v64 + 24)) & 1) != 0))
                {
                  v61 = *(uint64_t **)v63;
                }
              }
              v63 += 8;
            }
            while (v63 != v20);
          }
          while (v62 >> 3 <= *(_DWORD *)(v21 + 24 * (v23 + *(unsigned __int16 *)(*v61 + 24)) + 4) >> 3);
        }
        if (v39 >= v53)
        {
          v6 = v39;
        }
        else
        {
          v76 = *v53;
          v6 = v39;
          v77 = v53;
          do
          {
            *v6 = v76;
            *v77 = v42;
            v78 = *(_DWORD *)(v17 + 272) * v22;
            do
            {
              v79 = 0;
              v80 = v6[1];
              ++v6;
              v42 = v80;
              v81 = v80 - 0x40000000;
              v82 = (unint64_t)v80 >> 3;
              v83 = 1 << (v80 & 7);
              v84 = v19;
              do
              {
                if (v81 >= 0xC0000001)
                {
                  v85 = **(_QWORD **)v84;
                  if (v82 < *(unsigned __int16 *)(v85 + 22)
                    && (v83 & *(_BYTE *)(*(_QWORD *)(v85 + 8) + v82)) != 0
                    && (!v79
                     || *(uint64_t **)v84 != v79
                     && ((*(_DWORD *)(v79[1] + ((*(unsigned __int16 *)(v85 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v85 + 24)) & 1) != 0))
                  {
                    v79 = *(uint64_t **)v84;
                  }
                }
                v84 += 8;
              }
              while (v84 != v20);
              v86 = 0;
              v87 = *(_DWORD *)(v21 + 24 * (v78 + *(unsigned __int16 *)(*v79 + 24)) + 4);
              v88 = v19;
              do
              {
                if (v24 >= 0xC0000001)
                {
                  v89 = **(_QWORD **)v88;
                  if (v25 < *(unsigned __int16 *)(v89 + 22)
                    && (v26 & *(_BYTE *)(*(_QWORD *)(v89 + 8) + v25)) != 0
                    && (!v86
                     || *(uint64_t **)v88 != v86
                     && ((*(_DWORD *)(v86[1] + ((*(unsigned __int16 *)(v89 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v89 + 24)) & 1) != 0))
                  {
                    v86 = *(uint64_t **)v88;
                  }
                }
                v88 += 8;
              }
              while (v88 != v20);
            }
            while (v87 >> 3 > *(_DWORD *)(v21 + 24 * (v78 + *(unsigned __int16 *)(*v86 + 24)) + 4) >> 3);
            do
            {
              v90 = 0;
              v91 = *--v77;
              v76 = v91;
              v92 = v91 - 0x40000000;
              v93 = (unint64_t)v91 >> 3;
              v94 = 1 << (v91 & 7);
              v95 = v19;
              do
              {
                if (v92 >= 0xC0000001)
                {
                  v96 = **(_QWORD **)v95;
                  if (v93 < *(unsigned __int16 *)(v96 + 22)
                    && (v94 & *(_BYTE *)(*(_QWORD *)(v96 + 8) + v93)) != 0
                    && (!v90
                     || *(uint64_t **)v95 != v90
                     && ((*(_DWORD *)(v90[1] + ((*(unsigned __int16 *)(v96 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v96 + 24)) & 1) != 0))
                  {
                    v90 = *(uint64_t **)v95;
                  }
                }
                v95 += 8;
              }
              while (v95 != v20);
              v97 = 0;
              v98 = *(_DWORD *)(v21 + 24 * (v78 + *(unsigned __int16 *)(*v90 + 24)) + 4);
              v99 = v19;
              do
              {
                if (v24 >= 0xC0000001)
                {
                  v100 = **(_QWORD **)v99;
                  if (v25 < *(unsigned __int16 *)(v100 + 22)
                    && (v26 & *(_BYTE *)(*(_QWORD *)(v100 + 8) + v25)) != 0
                    && (!v97
                     || *(uint64_t **)v99 != v97
                     && ((*(_DWORD *)(v97[1] + ((*(unsigned __int16 *)(v100 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v100 + 24)) & 1) != 0))
                  {
                    v97 = *(uint64_t **)v99;
                  }
                }
                v99 += 8;
              }
              while (v99 != v20);
            }
            while (v98 >> 3 <= *(_DWORD *)(v21 + 24 * (v78 + *(unsigned __int16 *)(*v97 + 24)) + 4) >> 3);
          }
          while (v6 < v77);
        }
        v101 = v6 - 1;
        result = (unint64_t)v436;
        if (v6 - 1 != v436)
          *v436 = *v101;
        v5 = (uint64_t)a3;
        *v101 = v430;
        if (v39 < v53)
        {
LABEL_148:
          result = sub_1C50C0C08(result, v6 - 1, v5, a4, a5 & 1);
          v5 = (uint64_t)a3;
          a5 = 0;
          continue;
        }
        v102 = sub_1C50C3CA8(v436, v6 - 1, (uint64_t)a3);
        result = sub_1C50C3CA8(v6, a2, (uint64_t)a3);
        if (!(_DWORD)result)
        {
          result = (unint64_t)v436;
          v5 = (uint64_t)a3;
          if (v102)
            continue;
          goto LABEL_148;
        }
        a2 = v6 - 1;
        v5 = (uint64_t)a3;
        if (!v102)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C50C36A4(uint64_t *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;

  v4 = 0;
  v5 = *a2;
  v6 = *(char **)(a4 + 240);
  v7 = *(char **)(a4 + 248);
  v8 = v5 - 0x40000000;
  v9 = v5 >> 3;
  v10 = 1 << (v5 & 7);
  v11 = v6;
  do
  {
    if (v8 >= 0xC0000001)
    {
      v12 = **(_QWORD **)v11;
      if (v9 < *(unsigned __int16 *)(v12 + 22)
        && (v10 & *(_BYTE *)(*(_QWORD *)(v12 + 8) + v9)) != 0
        && (!v4
         || *(uint64_t **)v11 != v4
         && ((*(_DWORD *)(v4[1] + ((*(unsigned __int16 *)(v12 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v12 + 24)) & 1) != 0))
      {
        v4 = *(uint64_t **)v11;
      }
    }
    v11 += 8;
  }
  while (v11 != v7);
  v13 = 0;
  v14 = *(_QWORD *)(a4 + 264);
  v15 = (unint64_t)(v7 - v6) >> 3;
  v16 = *(_DWORD *)(a4 + 272) * v15;
  v17 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v4 + 24)) + 4);
  v18 = *(unsigned int *)result;
  v19 = v18 - 0x40000000;
  v20 = v18 >> 3;
  v21 = 1 << (v18 & 7);
  v22 = *(char **)(a4 + 240);
  do
  {
    if (v19 >= 0xC0000001)
    {
      v23 = **(_QWORD **)v22;
      if (v20 < *(unsigned __int16 *)(v23 + 22)
        && (v21 & *(_BYTE *)(*(_QWORD *)(v23 + 8) + v20)) != 0
        && (!v13
         || *(uint64_t **)v22 != v13
         && ((*(_DWORD *)(v13[1] + ((*(unsigned __int16 *)(v23 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v23 + 24)) & 1) != 0))
      {
        v13 = *(uint64_t **)v22;
      }
    }
    v22 += 8;
  }
  while (v22 != v7);
  v24 = 0;
  v25 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v13 + 24)) + 4) >> 3;
  v26 = *a3;
  v27 = v26 >> 3;
  v28 = *(char **)(a4 + 240);
  do
  {
    if ((v26 - 0x40000000) >= 0xC0000001)
    {
      v29 = **(_QWORD **)v28;
      if (v27 < *(unsigned __int16 *)(v29 + 22)
        && ((1 << (v26 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v29 + 8) + v27)) != 0
        && (!v24
         || *(uint64_t **)v28 != v24
         && ((*(_DWORD *)(v24[1] + ((*(unsigned __int16 *)(v29 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v29 + 24)) & 1) != 0))
      {
        v24 = *(uint64_t **)v28;
      }
    }
    v28 += 8;
  }
  while (v28 != v7);
  v30 = 0;
  v31 = v17 >> 3;
  v32 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v24 + 24)) + 4);
  v33 = *(char **)(a4 + 240);
  do
  {
    if (v8 >= 0xC0000001)
    {
      v34 = **(_QWORD **)v33;
      if (v9 < *(unsigned __int16 *)(v34 + 22)
        && (v10 & *(_BYTE *)(*(_QWORD *)(v34 + 8) + v9)) != 0
        && (!v30
         || *(uint64_t **)v33 != v30
         && ((*(_DWORD *)(v30[1] + ((*(unsigned __int16 *)(v34 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v34 + 24)) & 1) != 0))
      {
        v30 = *(uint64_t **)v33;
      }
    }
    v33 += 8;
  }
  while (v33 != v7);
  v35 = v32 >> 3;
  v36 = *(_DWORD *)(v14 + 24 * (v16 + *(unsigned __int16 *)(*v30 + 24)) + 4) >> 3;
  if (v31 <= v25)
  {
    if (v35 > v36)
    {
      v37 = 0;
      *a2 = v26;
      *a3 = v5;
      v38 = *a2;
      v39 = v38 >> 3;
      v40 = v6;
      do
      {
        if ((v38 - 0x40000000) >= 0xC0000001)
        {
          v41 = **(_QWORD **)v40;
          if (v39 < *(unsigned __int16 *)(v41 + 22)
            && ((1 << (v38 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v41 + 8) + v39)) != 0
            && (!v37
             || *(uint64_t **)v40 != v37
             && ((*(_DWORD *)(v37[1] + ((*(unsigned __int16 *)(v41 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v41 + 24)) & 1) != 0))
          {
            v37 = *(uint64_t **)v40;
          }
        }
        v40 += 8;
      }
      while (v40 != v7);
      v47 = 0;
      v48 = *(_DWORD *)(a4 + 272) * v15;
      v49 = *(_DWORD *)(v14 + 24 * (v48 + *(unsigned __int16 *)(*v37 + 24)) + 4);
      v50 = *(unsigned int *)result;
      v51 = v50 >> 3;
      do
      {
        if ((v50 - 0x40000000) >= 0xC0000001)
        {
          v52 = **(_QWORD **)v6;
          if (v51 < *(unsigned __int16 *)(v52 + 22)
            && ((1 << (v50 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v52 + 8) + v51)) != 0
            && (!v47
             || *(uint64_t **)v6 != v47
             && ((*(_DWORD *)(v47[1] + ((*(unsigned __int16 *)(v52 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v52 + 24)) & 1) != 0))
          {
            v47 = *(uint64_t **)v6;
          }
        }
        v6 += 8;
      }
      while (v6 != v7);
      if (v49 >> 3 > *(_DWORD *)(v14 + 24 * (v48 + *(unsigned __int16 *)(*v47 + 24)) + 4) >> 3)
      {
        *(_DWORD *)result = v38;
        *a2 = v50;
      }
    }
  }
  else
  {
    if (v35 > v36)
    {
      *(_DWORD *)result = v26;
LABEL_84:
      *a3 = v18;
      return result;
    }
    v42 = 0;
    *(_DWORD *)result = v5;
    *a2 = v18;
    v43 = *a3;
    v44 = v43 >> 3;
    v45 = v6;
    do
    {
      if ((v43 - 0x40000000) >= 0xC0000001)
      {
        v46 = **(_QWORD **)v45;
        if (v44 < *(unsigned __int16 *)(v46 + 22)
          && ((1 << (v43 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v46 + 8) + v44)) != 0
          && (!v42
           || *(uint64_t **)v45 != v42
           && ((*(_DWORD *)(v42[1] + ((*(unsigned __int16 *)(v46 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v46 + 24)) & 1) != 0))
        {
          v42 = *(uint64_t **)v45;
        }
      }
      v45 += 8;
    }
    while (v45 != v7);
    result = 0;
    v53 = *(_DWORD *)(a4 + 272) * v15;
    v54 = *(_DWORD *)(v14 + 24 * (v53 + *(unsigned __int16 *)(*v42 + 24)) + 4);
    do
    {
      if (v19 >= 0xC0000001)
      {
        v55 = **(_QWORD **)v6;
        if (v20 < *(unsigned __int16 *)(v55 + 22)
          && (v21 & *(_BYTE *)(*(_QWORD *)(v55 + 8) + v20)) != 0
          && (!result
           || *(uint64_t **)v6 != result
           && ((*(_DWORD *)(result[1] + ((*(unsigned __int16 *)(v55 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v55 + 24)) & 1) != 0))
        {
          result = *(uint64_t **)v6;
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
    if (v54 >> 3 > *(_DWORD *)(v14 + 24 * (v53 + *(unsigned __int16 *)(*result + 24)) + 4) >> 3)
    {
      *a2 = v43;
      goto LABEL_84;
    }
  }
  return result;
}

BOOL sub_1C50C3CA8(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v8 = *(a2 - 1);
      v9 = *(char **)(v7 + 240);
      v10 = *(char **)(v7 + 248);
      v11 = v8 >> 3;
      v12 = v9;
      do
      {
        if ((v8 - 0x40000000) >= 0xC0000001)
        {
          v13 = **(_QWORD **)v12;
          if (v11 < *(unsigned __int16 *)(v13 + 22)
            && ((1 << (v8 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v13 + 8) + v11)) != 0
            && (!v6
             || *(uint64_t **)v12 != v6
             && ((*(_DWORD *)(v6[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
          {
            v6 = *(uint64_t **)v12;
          }
        }
        v12 += 8;
      }
      while (v12 != v10);
      v14 = 0;
      v15 = *(_QWORD *)(v7 + 264);
      v16 = *(_DWORD *)(v7 + 272) * ((unint64_t)(v10 - v9) >> 3);
      v17 = *(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*v6 + 24)) + 4);
      v18 = *a1;
      v19 = v18 >> 3;
      do
      {
        if ((v18 - 0x40000000) >= 0xC0000001)
        {
          v20 = **(_QWORD **)v9;
          if (v19 < *(unsigned __int16 *)(v20 + 22)
            && ((1 << (v18 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v20 + 8) + v19)) != 0
            && (!v14
             || *(uint64_t **)v9 != v14
             && ((*(_DWORD *)(v14[1] + ((*(unsigned __int16 *)(v20 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v20 + 24)) & 1) != 0))
          {
            v14 = *(uint64_t **)v9;
          }
        }
        v9 += 8;
      }
      while (v9 != v10);
      if (v17 >> 3 > *(_DWORD *)(v15 + 24 * (v16 + *(unsigned __int16 *)(*v14 + 24)) + 4) >> 3)
      {
        *a1 = v8;
        *(a2 - 1) = v18;
      }
      return 1;
    case 3:
      sub_1C50C36A4((uint64_t *)a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 8));
      return 1;
    case 4:
      sub_1C50C4814((uint64_t *)a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v53 = a1 + 1;
      v54 = a1 + 2;
      v55 = a1 + 3;
      sub_1C50C4814((uint64_t *)a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v56 = 0;
      v57 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v58 = *(a2 - 1);
      v59 = *(char **)(v57 + 240);
      v60 = *(char **)(v57 + 248);
      v61 = v58 >> 3;
      v62 = v59;
      do
      {
        if ((v58 - 0x40000000) >= 0xC0000001)
        {
          v63 = **(_QWORD **)v62;
          if (v61 < *(unsigned __int16 *)(v63 + 22)
            && ((1 << (v58 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v63 + 8) + v61)) != 0
            && (!v56
             || *(uint64_t **)v62 != v56
             && ((*(_DWORD *)(v56[1] + ((*(unsigned __int16 *)(v63 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v63 + 24)) & 1) != 0))
          {
            v56 = *(uint64_t **)v62;
          }
        }
        v62 += 8;
      }
      while (v62 != v60);
      v64 = 0;
      v65 = *(_QWORD *)(v57 + 264);
      v66 = (unint64_t)(v60 - v59) >> 3;
      v67 = *(_DWORD *)(v57 + 272) * v66;
      v68 = *(_DWORD *)(v65 + 24 * (v67 + *(unsigned __int16 *)(*v56 + 24)) + 4);
      v69 = *v55;
      v70 = v69 >> 3;
      v71 = *(char **)(v57 + 240);
      do
      {
        if ((v69 - 0x40000000) >= 0xC0000001)
        {
          v72 = **(_QWORD **)v71;
          if (v70 < *(unsigned __int16 *)(v72 + 22)
            && ((1 << (v69 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v72 + 8) + v70)) != 0
            && (!v64
             || *(uint64_t **)v71 != v64
             && ((*(_DWORD *)(v64[1] + ((*(unsigned __int16 *)(v72 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v72 + 24)) & 1) != 0))
          {
            v64 = *(uint64_t **)v71;
          }
        }
        v71 += 8;
      }
      while (v71 != v60);
      result = 1;
      if (v68 >> 3 <= *(_DWORD *)(v65 + 24 * (v67 + *(unsigned __int16 *)(*v64 + 24)) + 4) >> 3)
        return result;
      v73 = 0;
      *v55 = v58;
      *(a2 - 1) = v69;
      v74 = *v55;
      v75 = v74 - 0x40000000;
      v76 = v74 >> 3;
      v77 = 1 << (v74 & 7);
      v78 = v59;
      do
      {
        if (v75 >= 0xC0000001)
        {
          v79 = **(_QWORD **)v78;
          if (v76 < *(unsigned __int16 *)(v79 + 22)
            && (v77 & *(_BYTE *)(*(_QWORD *)(v79 + 8) + v76)) != 0
            && (!v73
             || *(uint64_t **)v78 != v73
             && ((*(_DWORD *)(v73[1] + ((*(unsigned __int16 *)(v79 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v79 + 24)) & 1) != 0))
          {
            v73 = *(uint64_t **)v78;
          }
        }
        v78 += 8;
      }
      while (v78 != v60);
      v80 = 0;
      v81 = *(_DWORD *)(v57 + 272) * v66;
      v82 = *(_DWORD *)(v65 + 24 * (v81 + *(unsigned __int16 *)(*v73 + 24)) + 4);
      v83 = *v54;
      v84 = v83 >> 3;
      v85 = v59;
      do
      {
        if ((v83 - 0x40000000) >= 0xC0000001)
        {
          v86 = **(_QWORD **)v85;
          if (v84 < *(unsigned __int16 *)(v86 + 22)
            && ((1 << (v83 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v86 + 8) + v84)) != 0
            && (!v80
             || *(uint64_t **)v85 != v80
             && ((*(_DWORD *)(v80[1] + ((*(unsigned __int16 *)(v86 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v86 + 24)) & 1) != 0))
          {
            v80 = *(uint64_t **)v85;
          }
        }
        v85 += 8;
      }
      while (v85 != v60);
      if (v82 >> 3 > *(_DWORD *)(v65 + 24 * (v81 + *(unsigned __int16 *)(*v80 + 24)) + 4) >> 3)
      {
        v87 = 0;
        *v54 = v74;
        *v55 = v83;
        v88 = v59;
        do
        {
          if (v75 >= 0xC0000001)
          {
            v89 = **(_QWORD **)v88;
            if (v76 < *(unsigned __int16 *)(v89 + 22)
              && (v77 & *(_BYTE *)(*(_QWORD *)(v89 + 8) + v76)) != 0
              && (!v87
               || *(uint64_t **)v88 != v87
               && ((*(_DWORD *)(v87[1] + ((*(unsigned __int16 *)(v89 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v89 + 24)) & 1) != 0))
            {
              v87 = *(uint64_t **)v88;
            }
          }
          v88 += 8;
        }
        while (v88 != v60);
        v90 = 0;
        v91 = *(_DWORD *)(v57 + 272) * v66;
        v92 = *(_DWORD *)(v65 + 24 * (v91 + *(unsigned __int16 *)(*v87 + 24)) + 4);
        v93 = *v53;
        v94 = v93 >> 3;
        v95 = v59;
        do
        {
          if ((v93 - 0x40000000) >= 0xC0000001)
          {
            v96 = **(_QWORD **)v95;
            if (v94 < *(unsigned __int16 *)(v96 + 22)
              && ((1 << (v93 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v96 + 8) + v94)) != 0
              && (!v90
               || *(uint64_t **)v95 != v90
               && ((*(_DWORD *)(v90[1] + ((*(unsigned __int16 *)(v96 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v96 + 24)) & 1) != 0))
            {
              v90 = *(uint64_t **)v95;
            }
          }
          v95 += 8;
        }
        while (v95 != v60);
        if (v92 >> 3 > *(_DWORD *)(v65 + 24 * (v91 + *(unsigned __int16 *)(*v90 + 24)) + 4) >> 3)
        {
          v97 = 0;
          *v53 = v74;
          *v54 = v93;
          v98 = v59;
          do
          {
            if (v75 >= 0xC0000001)
            {
              v99 = **(_QWORD **)v98;
              if (v76 < *(unsigned __int16 *)(v99 + 22)
                && (v77 & *(_BYTE *)(*(_QWORD *)(v99 + 8) + v76)) != 0
                && (!v97
                 || *(uint64_t **)v98 != v97
                 && ((*(_DWORD *)(v97[1] + ((*(unsigned __int16 *)(v99 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v99 + 24)) & 1) != 0))
              {
                v97 = *(uint64_t **)v98;
              }
            }
            v98 += 8;
          }
          while (v98 != v60);
          v100 = 0;
          v101 = *(_DWORD *)(v57 + 272) * v66;
          v102 = *a1;
          v103 = v102 >> 3;
          do
          {
            if ((v102 - 0x40000000) >= 0xC0000001)
            {
              v104 = **(_QWORD **)v59;
              if (v103 < *(unsigned __int16 *)(v104 + 22)
                && ((1 << (v102 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v104 + 8) + v103)) != 0
                && (!v100
                 || *(uint64_t **)v59 != v100
                 && ((*(_DWORD *)(v100[1] + ((*(unsigned __int16 *)(v104 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v104 + 24)) & 1) != 0))
              {
                v100 = *(uint64_t **)v59;
              }
            }
            v59 += 8;
          }
          while (v59 != v60);
          if (*(_DWORD *)(v65 + 24 * (v101 + *(unsigned __int16 *)(*v97 + 24)) + 4) >> 3 > *(_DWORD *)(v65 + 24 * (v101 + *(unsigned __int16 *)(*v100 + 24)) + 4) >> 3)
          {
            *a1 = v74;
            a1[1] = v102;
          }
        }
      }
      return 1;
    default:
      v21 = a1 + 2;
      sub_1C50C36A4((uint64_t *)a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 8));
      v22 = a1 + 3;
      result = 1;
      if (a1 + 3 == a2)
        return result;
      v23 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v25 = *(char **)(v24 + 240);
      v26 = *(char **)(v24 + 248);
      v27 = *(_QWORD *)(v24 + 264);
      v28 = (unint64_t)(v26 - v25) >> 3;
      break;
  }
  while (1)
  {
    v29 = 0;
    v30 = *v22;
    v31 = v30 - 0x40000000;
    v32 = v30 >> 3;
    v33 = 1 << (v30 & 7);
    v34 = v25;
    do
    {
      if (v31 >= 0xC0000001)
      {
        v35 = **(_QWORD **)v34;
        if (v32 < *(unsigned __int16 *)(v35 + 22)
          && (v33 & *(_BYTE *)(*(_QWORD *)(v35 + 8) + v32)) != 0
          && (!v29
           || *(uint64_t **)v34 != v29
           && ((*(_DWORD *)(v29[1] + ((*(unsigned __int16 *)(v35 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v35 + 24)) & 1) != 0))
        {
          v29 = *(uint64_t **)v34;
        }
      }
      v34 += 8;
    }
    while (v34 != v26);
    v36 = 0;
    v37 = *(_DWORD *)(v24 + 272) * v28;
    v38 = *(_DWORD *)(v27 + 24 * (v37 + *(unsigned __int16 *)(*v29 + 24)) + 4);
    v39 = *v21;
    v40 = v39 >> 3;
    v41 = v25;
    do
    {
      if ((v39 - 0x40000000) >= 0xC0000001)
      {
        v42 = **(_QWORD **)v41;
        if (v40 < *(unsigned __int16 *)(v42 + 22)
          && ((1 << (v39 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v42 + 8) + v40)) != 0
          && (!v36
           || *(uint64_t **)v41 != v36
           && ((*(_DWORD *)(v36[1] + ((*(unsigned __int16 *)(v42 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v42 + 24)) & 1) != 0))
        {
          v36 = *(uint64_t **)v41;
        }
      }
      v41 += 8;
    }
    while (v41 != v26);
    if (v38 >> 3 > *(_DWORD *)(v27 + 24 * (v37 + *(unsigned __int16 *)(*v36 + 24)) + 4) >> 3)
    {
      v43 = v22;
      while (1)
      {
        *v43 = v39;
        if (v21 == a1)
          break;
        v43 = v21;
        v44 = 0;
        v45 = v25;
        do
        {
          if (v31 >= 0xC0000001)
          {
            v46 = **(_QWORD **)v45;
            if (v32 < *(unsigned __int16 *)(v46 + 22)
              && (v33 & *(_BYTE *)(*(_QWORD *)(v46 + 8) + v32)) != 0
              && (!v44
               || *(uint64_t **)v45 != v44
               && ((*(_DWORD *)(v44[1] + ((*(unsigned __int16 *)(v46 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v46 + 24)) & 1) != 0))
            {
              v44 = *(uint64_t **)v45;
            }
          }
          v45 += 8;
        }
        while (v45 != v26);
        v47 = 0;
        v21 = v43 - 1;
        v39 = *(v43 - 1);
        v48 = *(_DWORD *)(v24 + 272) * v28;
        v49 = *(_DWORD *)(v27 + 24 * (v48 + *(unsigned __int16 *)(*v44 + 24)) + 4);
        v50 = v39 >> 3;
        v51 = v25;
        do
        {
          if ((v39 - 0x40000000) >= 0xC0000001)
          {
            v52 = **(_QWORD **)v51;
            if (v50 < *(unsigned __int16 *)(v52 + 22)
              && ((1 << (v39 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v52 + 8) + v50)) != 0
              && (!v47
               || *(uint64_t **)v51 != v47
               && ((*(_DWORD *)(v47[1] + ((*(unsigned __int16 *)(v52 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v52 + 24)) & 1) != 0))
            {
              v47 = *(uint64_t **)v51;
            }
          }
          v51 += 8;
        }
        while (v51 != v26);
        if (v49 >> 3 <= *(_DWORD *)(v27 + 24 * (v48 + *(unsigned __int16 *)(*v47 + 24)) + 4) >> 3)
          goto LABEL_70;
      }
      v43 = a1;
LABEL_70:
      *v43 = v30;
      if (++v23 == 8)
        return v22 + 1 == a2;
    }
    v21 = v22++;
    if (v22 == a2)
      return 1;
  }
}

uint64_t sub_1C50C4814(uint64_t *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t result;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  sub_1C50C36A4(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 8));
  v10 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)a5 + 8);
  v12 = *a4;
  v13 = *(char **)(v11 + 240);
  v14 = *(char **)(v11 + 248);
  v15 = v12 >> 3;
  v16 = v13;
  do
  {
    if ((v12 - 0x40000000) >= 0xC0000001)
    {
      v17 = **(_QWORD **)v16;
      if (v15 < *(unsigned __int16 *)(v17 + 22)
        && ((1 << (v12 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v17 + 8) + v15)) != 0
        && (!v10
         || *(uint64_t **)v16 != v10
         && ((*(_DWORD *)(v10[1] + ((*(unsigned __int16 *)(v17 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v17 + 24)) & 1) != 0))
      {
        v10 = *(uint64_t **)v16;
      }
    }
    v16 += 8;
  }
  while (v16 != v14);
  v18 = 0;
  v19 = *(_QWORD *)(v11 + 264);
  v20 = (unint64_t)(v14 - v13) >> 3;
  v21 = *(_DWORD *)(v11 + 272) * v20;
  v22 = *(_DWORD *)(v19 + 24 * (v21 + *(unsigned __int16 *)(*v10 + 24)) + 4);
  v23 = *a3;
  result = (v23 - 0x40000000);
  v25 = v23 >> 3;
  v26 = *(char **)(v11 + 240);
  do
  {
    if (result >= 0xC0000001)
    {
      v27 = **(_QWORD **)v26;
      if (v25 < *(unsigned __int16 *)(v27 + 22)
        && ((1 << (v23 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v27 + 8) + v25)) != 0
        && (!v18
         || *(uint64_t **)v26 != v18
         && ((*(_DWORD *)(v18[1] + ((*(unsigned __int16 *)(v27 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v27 + 24)) & 1) != 0))
      {
        v18 = *(uint64_t **)v26;
      }
    }
    v26 += 8;
  }
  while (v26 != v14);
  if (v22 >> 3 > *(_DWORD *)(v19 + 24 * (v21 + *(unsigned __int16 *)(*v18 + 24)) + 4) >> 3)
  {
    v28 = 0;
    *a3 = v12;
    *a4 = v23;
    v29 = *a3;
    v30 = v29 >> 3;
    v31 = v13;
    do
    {
      if ((v29 - 0x40000000) >= 0xC0000001)
      {
        v32 = **(_QWORD **)v31;
        if (v30 < *(unsigned __int16 *)(v32 + 22)
          && ((1 << (v29 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v32 + 8) + v30)) != 0
          && (!v28
           || *(uint64_t **)v31 != v28
           && ((*(_DWORD *)(v28[1] + ((*(unsigned __int16 *)(v32 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v32 + 24)) & 1) != 0))
        {
          v28 = *(uint64_t **)v31;
        }
      }
      v31 += 8;
    }
    while (v31 != v14);
    v33 = 0;
    v34 = *(_DWORD *)(v11 + 272) * v20;
    v35 = *(_DWORD *)(v19 + 24 * (v34 + *(unsigned __int16 *)(*v28 + 24)) + 4);
    v36 = *a2;
    result = (v36 - 0x40000000);
    v37 = v36 >> 3;
    v38 = v13;
    do
    {
      if (result >= 0xC0000001)
      {
        v39 = **(_QWORD **)v38;
        if (v37 < *(unsigned __int16 *)(v39 + 22)
          && ((1 << (v36 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v39 + 8) + v37)) != 0
          && (!v33
           || *(uint64_t **)v38 != v33
           && ((*(_DWORD *)(v33[1] + ((*(unsigned __int16 *)(v39 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v39 + 24)) & 1) != 0))
        {
          v33 = *(uint64_t **)v38;
        }
      }
      v38 += 8;
    }
    while (v38 != v14);
    if (v35 >> 3 > *(_DWORD *)(v19 + 24 * (v34 + *(unsigned __int16 *)(*v33 + 24)) + 4) >> 3)
    {
      v40 = 0;
      *a2 = v29;
      *a3 = v36;
      v41 = *a2;
      v42 = v41 >> 3;
      v43 = v13;
      do
      {
        if ((v41 - 0x40000000) >= 0xC0000001)
        {
          v44 = **(_QWORD **)v43;
          if (v42 < *(unsigned __int16 *)(v44 + 22)
            && ((1 << (v41 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v44 + 8) + v42)) != 0
            && (!v40
             || *(uint64_t **)v43 != v40
             && ((*(_DWORD *)(v40[1] + ((*(unsigned __int16 *)(v44 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v44 + 24)) & 1) != 0))
          {
            v40 = *(uint64_t **)v43;
          }
        }
        v43 += 8;
      }
      while (v43 != v14);
      v45 = 0;
      v46 = *(_DWORD *)(v11 + 272) * v20;
      v47 = *(_DWORD *)(v19 + 24 * (v46 + *(unsigned __int16 *)(*v40 + 24)) + 4);
      v48 = *(unsigned int *)a1;
      v49 = v48 >> 3;
      result = (1 << (v48 & 7));
      do
      {
        if ((v48 - 0x40000000) >= 0xC0000001)
        {
          v50 = **(_QWORD **)v13;
          if (v49 < *(unsigned __int16 *)(v50 + 22)
            && (result & *(_BYTE *)(*(_QWORD *)(v50 + 8) + v49)) != 0
            && (!v45
             || *(uint64_t **)v13 != v45
             && ((*(_DWORD *)(v45[1] + ((*(unsigned __int16 *)(v50 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v50 + 24)) & 1) != 0))
          {
            v45 = *(uint64_t **)v13;
          }
        }
        v13 += 8;
      }
      while (v13 != v14);
      if (v47 >> 3 > *(_DWORD *)(v19 + 24 * (v46 + *(unsigned __int16 *)(*v45 + 24)) + 4) >> 3)
      {
        *(_DWORD *)a1 = v41;
        *a2 = v48;
      }
    }
  }
  return result;
}

_DWORD *sub_1C50C4CCC(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;
  int v21;
  BOOL v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -1;
        result += 16;
        v11 -= 64;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[16 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if (*v13 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4);
          if (v15)
          {
            v16 = v15 - 1;
            v17 = v16 & (37 * v14);
            v18 = (int *)(*a1 + (v17 << 6));
            v19 = *v18;
            if (v14 != *v18)
            {
              v20 = 0;
              v21 = 1;
              while (v19 != -1)
              {
                if (v20)
                  v22 = 0;
                else
                  v22 = v19 == -2;
                if (v22)
                  v20 = v18;
                v23 = v17 + v21++;
                v17 = v23 & v16;
                v18 = (int *)(*a1 + (v17 << 6));
                v19 = *v18;
                if (v14 == *v18)
                  goto LABEL_23;
              }
              if (v20)
                v18 = v20;
            }
          }
          else
          {
            v18 = 0;
          }
LABEL_23:
          *v18 = v14;
          *((_QWORD *)v18 + 1) = v18 + 6;
          *((_QWORD *)v18 + 2) = 0x800000000;
          if (v13[4])
            sub_1C614C900((uint64_t)(v18 + 2), (uint64_t)(v13 + 2));
          v18[14] = v13[14];
          ++*((_DWORD *)a1 + 2);
          v24 = (int *)*((_QWORD *)v13 + 1);
          if (v24 != v13 + 6)
            free(v24);
        }
        v13 += 16;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = v25 << 6;
    do
    {
      *result = -1;
      result += 16;
      v26 -= 64;
    }
    while (v26);
  }
  return result;
}

_DWORD *sub_1C50C4EB4(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DE684(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C50C4F6C(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = a2;
  v9 = *(uint64_t ***)(v7 + 240);
  v10 = *(uint64_t ***)(v7 + 248);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = (unint64_t)a2 >> 3;
    do
    {
      if (a2 - 0x40000000 >= 0xC0000001)
      {
        v13 = **v9;
        if (v12 < *(unsigned __int16 *)(v13 + 22)
          && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v13 + 8) + v12)) != 0
          && (!v11
           || *v9 != v11
           && ((*(_DWORD *)(v11[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
        {
          v11 = *v9;
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v33 = a2;
  v14 = sub_1C61DE458(a1 + 216, (int *)&v33)[1];
  if ((_QWORD *)(a4 + 48) != a3)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 32) + 464))(*(_QWORD *)(a1 + 32), a4, a3, v8, v14, v11, *(_QWORD *)(a1 + 24));
  v16 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (!v16 || (*(_BYTE *)v16 & 4) == 0)
  {
    while ((*(_WORD *)(v16 + 44) & 4) != 0)
      v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
  }
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 32)
                                                                                                 + 464))(*(_QWORD *)(a1 + 32), a4, v16, v8, v14, v11, *(_QWORD *)(a1 + 24));
  if (*(_QWORD *)(*(_QWORD *)(v16 + 24) + 56) == v16)
    v17 = 0;
  else
    v17 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
  v18 = (uint64_t *)(a4 + 40);
  v19 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 32);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 728);
    if (v20)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v20 + 32))(v20, v17);
    v21 = *(unsigned int *)(v17 + 40);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(v17 + 32);
      v23 = *(_QWORD *)(v19 + 40);
      v24 = 32 * v21;
      do
      {
        if (!*(_BYTE *)v22)
        {
          v25 = *(unsigned int *)(v22 + 4);
          if ((v25 & 0x80000000) != 0)
            v26 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
          else
            v26 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v25);
          v27 = *v26;
          v29 = *(_QWORD *)(v22 + 16);
          v28 = *(_QWORD *)(v22 + 24);
          if (v22 != *v26)
            v26 = (uint64_t *)(v29 + 24);
          *v26 = v28;
          if (v28)
            v30 = v28;
          else
            v30 = v27;
          *(_QWORD *)(v30 + 16) = v29;
          *(_QWORD *)(v22 + 16) = 0;
          *(_QWORD *)(v22 + 24) = 0;
        }
        v22 += 32;
        v24 -= 32;
      }
      while (v24);
    }
  }
  *(_QWORD *)(v17 + 24) = 0;
  v31 = *(unint64_t **)(v17 + 8);
  v32 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
  *v31 = v32 | *v31 & 7;
  *(_QWORD *)(v32 + 8) = v31;
  *(_QWORD *)v17 &= 7uLL;
  *(_QWORD *)(v17 + 8) = 0;
  return sub_1C49879A4(v18, v16, v17);
}

_QWORD *sub_1C50C51DC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DE940(a1, v4, v4 + 112 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 112 * v10;
    do
    {
      *result = -4096;
      result += 14;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C50C52A0(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  int v9;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = *((_DWORD *)v7 + 8);
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

uint64_t sub_1C50C52F8()
{
  int v1;
  char v2;
  char *v3;
  int v4;
  __n128 v5;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v5.n128_u64[0] = (unint64_t)"Allow spill in spill slot of greater size than register size";
  v5.n128_u64[1] = 60;
  v1 = 1;
  sub_1C61DEB94(&v4, &v3, &v5, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F7998, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v3 = (char *)&v1;
  v5.n128_u64[0] = (unint64_t)"Allow passing GC Pointer arguments in callee saved registers";
  v5.n128_u64[1] = 60;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F7A58, "fixup-allow-gcptr-in-csr", &v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7A58, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 1;
  v3 = (char *)&v1;
  v5.n128_u64[0] = (unint64_t)"Enable simple copy propagation during register reloading";
  v5.n128_u64[1] = 56;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F7B18, "fixup-scs-enable-copy-propagation", &v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7B18, &dword_1C475E000);
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Max number of statepoints allowed to pass GC Ptrs in registers";
  v5.n128_u64[1] = 62;
  sub_1C61DECE0(&v3, (__int128 *)&v5);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F7BD8, &dword_1C475E000);
}

uint64_t sub_1C50C5458(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Contiguously Lay Out Funclets";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "funclet-layout";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6EDD;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50C54E8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50C54E8()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6EDD) = &off_1E81426A0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F7C98);
  if (v2 != -1)
  {
    v6[0] = sub_1C50C5458;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F7C98, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C50C55C0(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50C5654(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C50C56E0(int a1, llvm *this)
{
  int v3;
  uint64_t v5;
  int v6;

  llvm::getEHScopeMembership(this, this, (uint64_t)&v5);
  v3 = v6;
  if (v6)
    sub_1C50C5868((uint64_t)this + 320, (uint64_t)&v5);
  MEMORY[0x1CAA32FB4](v5, 8);
  return v3 != 0;
}

void sub_1C50C573C(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C50C5868(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;

  v2 = *(_QWORD **)result;
  if (*(_QWORD *)result != result)
  {
    v3 = (uint64_t *)result;
    v4 = *(uint64_t **)(result + 8);
    if (v4[1] != result)
    {
      if (v4 == (uint64_t *)result)
      {
        v23 = &v23;
        v24 = (uint64_t *)&v23;
        v8 = &v23 == (_QWORD **)result;
      }
      else
      {
        v6 = *(_QWORD *)(result + 8);
        do
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7 == result)
            break;
          v4 = (uint64_t *)v4[1];
          v6 = *(_QWORD *)(v7 + 8);
        }
        while (v6 != result);
        v23 = &v23;
        v24 = (uint64_t *)&v23;
        v8 = &v23 == (_QWORD **)result;
        if (&v23 != (_QWORD **)result && v4 != (uint64_t *)result)
        {
          v8 = 0;
          v9 = (_QWORD *)*v4;
          v9[1] = result;
          *(_QWORD *)result = v9;
          v2[1] = &v23;
          *v4 = (uint64_t)&v23;
          v23 = v2;
          v24 = v4;
        }
      }
      sub_1C50C5868(result, a2);
      result = sub_1C50C5868(&v23, a2);
      if (!v8 && v23 != &v23)
      {
        v10 = v24;
        v11 = (uint64_t *)v3[1];
        if (v11 != v3)
        {
          while (1)
          {
            v25 = v10;
            v26 = 0;
            if ((sub_1C61252B8((uint64_t *)a2, &v25, &v26) & 1) != 0)
              v12 = v26;
            else
              v12 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
            v25 = v11;
            v26 = 0;
            result = sub_1C61252B8((uint64_t *)a2, &v25, &v26);
            if ((result & 1) != 0)
              v13 = v26;
            else
              v13 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
            if (*(_DWORD *)(v12 + 8) >= *(_DWORD *)(v13 + 8))
            {
              v14 = v10;
            }
            else
            {
              v14 = v10;
              do
              {
                v15 = (uint64_t *)v14[1];
                v14 = (uint64_t *)&v23;
                if (v15 == (uint64_t *)&v23)
                  break;
                v14 = v15;
                v25 = v15;
                v26 = 0;
                v16 = (sub_1C61252B8((uint64_t *)a2, &v25, &v26) & 1) != 0
                    ? v26
                    : *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
                v25 = v11;
                v26 = 0;
                result = sub_1C61252B8((uint64_t *)a2, &v25, &v26);
                v17 = (result & 1) != 0 ? v26 : *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
              }
              while (*(_DWORD *)(v16 + 8) < *(_DWORD *)(v17 + 8));
              if (v11 != v14 && v10 != v14)
              {
                v18 = *v14;
                v19 = *v10;
                *(_QWORD *)(v19 + 8) = v14;
                *v14 = v19;
                v20 = *v11;
                *(_QWORD *)(v18 + 8) = v11;
                *v10 = v20;
                *(_QWORD *)(v20 + 8) = v10;
                *v11 = v18;
              }
              if (v15 == (uint64_t *)&v23)
                return result;
            }
            v11 = (uint64_t *)v11[1];
            v10 = v14;
            if (v11 == v3)
              goto LABEL_39;
          }
        }
        v14 = v24;
LABEL_39:
        if (v14 != (uint64_t *)&v23)
        {
          v21 = v23;
          *(_QWORD *)(*v14 + 8) = &v23;
          v22 = *v3;
          v21[1] = v3;
          *v14 = v22;
          *(_QWORD *)(v22 + 8) = v14;
          *v3 = (uint64_t)v21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C50C5AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Create Garbage Collector Module Metadata";
  *(_QWORD *)(v2 + 8) = 40;
  *(_QWORD *)(v2 + 16) = "collector-metadata";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &llvm::GCModuleInfo::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::GCModuleInfo>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double llvm::GCFunctionInfo::GCFunctionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

uint64_t llvm::GCModuleInfo::getGCStrategy(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  size_t *v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  unint64_t v30;
  BOOL v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  size_t v35;

  v6 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v6)
  {
    v7 = 0;
    if (a3)
    {
      v8 = a3;
      v9 = a2;
      do
      {
        v10 = *v9++;
        v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    v11 = *(_QWORD *)(a1 + 56);
    v12 = 1;
    v13 = v7;
    while (1)
    {
      v14 = v13 & (v6 - 1);
      v15 = *(_QWORD **)(v11 + 8 * v14);
      if (v15 != (_QWORD *)-8)
      {
        if (!v15)
          goto LABEL_16;
        if (*(_DWORD *)(v11 + 8 * v6 + 8 + 4 * v14) == v7
          && a3 == *v15
          && (!a3 || !memcmp(a2, (char *)v15 + *(unsigned int *)(a1 + 76), a3)))
        {
          break;
        }
      }
      v13 = v12 + v14;
      ++v12;
    }
    if ((_DWORD)v14 != -1 && (int)v14 != v6)
      return *(_QWORD *)(*(_QWORD *)(v11 + 8 * (int)v14) + 8);
  }
LABEL_16:
  llvm::getGCStrategy(a2, (const void *)a3);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v18 = a3 | 7;
    v19 = v18 + 1;
    v17 = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&v33 + 1) = a3;
    v34 = v19 | 0x8000000000000000;
    *(_QWORD *)&v33 = v17;
  }
  else
  {
    HIBYTE(v34) = a3;
    v17 = &v33;
    if (!a3)
      goto LABEL_24;
  }
  memmove(v17, a2, a3);
LABEL_24:
  *((_BYTE *)v17 + a3) = 0;
  v20 = v35;
  v21 = v35 + 8;
  if (*(char *)(v35 + 31) < 0)
  {
    operator delete(*(void **)v21);
    v20 = v35;
  }
  *(_OWORD *)v21 = v33;
  *(_QWORD *)(v21 + 16) = v34;
  (*sub_1C6136E50(a1 + 56, a2, a3))[1] = v20;
  v23 = (unint64_t *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 32);
  v24 = *(unsigned int *)(a1 + 40);
  v25 = &v35;
  if (v24 >= *(_DWORD *)(a1 + 44))
  {
    v30 = v24 + 1;
    v31 = v22 + 8 * v24 > (unint64_t)&v35;
    if (v22 <= (unint64_t)&v35 && v31)
    {
      v32 = (char *)&v35 - v22;
      sub_1C6189DFC(a1 + 32, v30);
      v22 = *v23;
      v25 = (size_t *)&v32[*v23];
    }
    else
    {
      sub_1C6189DFC(a1 + 32, v30);
      v22 = *v23;
      v25 = &v35;
    }
  }
  v26 = *(unsigned int *)(a1 + 40);
  v27 = *v25;
  *v25 = 0;
  *(_QWORD *)(v22 + 8 * v26) = v27;
  *(_DWORD *)(a1 + 40) = v26 + 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v26 + 1) - 8);
  v28 = v35;
  v35 = 0;
  if (v28)
    (*(void (**)(size_t))(*(_QWORD *)v28 + 8))(v28);
  return v16;
}

void sub_1C50C5E38(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50C5E5C()
{
  return "Print Garbage Collector Information";
}

uint64_t sub_1C50C5E6C(uint64_t a1)
{
  llvm::GCModuleInfo *AnalysisPass;

  AnalysisPass = (llvm::GCModuleInfo *)llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  if (AnalysisPass)
    AnalysisPass = (llvm::GCModuleInfo *)(*(uint64_t (**)(llvm::GCModuleInfo *, void *))(*(_QWORD *)AnalysisPass
                                                                                                 + 96))(AnalysisPass, &llvm::GCModuleInfo::ID);
  llvm::GCModuleInfo::clear(AnalysisPass);
  return 0;
}

void *sub_1C50C5EB4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::GCModuleInfo::ID);
}

uint64_t sub_1C50C5ECC(uint64_t a1, const llvm::Function *a2)
{
  void **v5;
  void *v6;
  llvm::GCModuleInfo *v7;
  uint64_t ****FunctionInfo;
  llvm::raw_ostream *v9;
  void *v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  size_t *v20;
  const void *v21;
  size_t v22;
  size_t v23;
  _WORD *v24;
  int *v25;
  int *i;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  int v31;
  _BYTE *v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  int v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  size_t *v48;
  const void *v49;
  size_t v50;
  size_t v51;
  _WORD *v52;
  uint64_t ***v53;
  uint64_t ***j;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  size_t *v57;
  const void *v58;
  size_t v59;
  size_t v60;
  void *v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  int *v66;
  char v67;
  llvm::raw_ostream *v68;
  size_t v69;
  _BYTE *v70;
  const char *v71;
  unint64_t v72;
  llvm::raw_ostream *v73;
  int v74;
  llvm::raw_ostream *v75;
  uint64_t v76;

  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
    return 0;
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::GCModuleInfo::ID);
  v7 = (llvm::GCModuleInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::GCModuleInfo::ID);
  FunctionInfo = (uint64_t ****)llvm::GCModuleInfo::getFunctionInfo(v7, a2);
  v9 = *(llvm::raw_ostream **)(a1 + 32);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 0xCuLL)
  {
    qmemcpy(v10, "GC roots for ", 13);
    *((_QWORD *)v9 + 4) += 13;
  }
  else
  {
    v9 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "GC roots for ", 0xDuLL);
  }
  v11 = *FunctionInfo;
  if ((*((_BYTE *)*FunctionInfo + 23) & 0x10) == 0)
  {
    v24 = (_WORD *)*((_QWORD *)v9 + 4);
    goto LABEL_19;
  }
  v12 = ***v11;
  v13 = *(_QWORD *)(v12 + 152);
  v14 = *(unsigned int *)(v12 + 168);
  if ((_DWORD)v14)
  {
    LODWORD(v15) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v16 = (uint64_t ****)(v13 + 16 * v15);
    v17 = *v16;
    if (*v16 == v11)
      goto LABEL_15;
    v18 = 1;
    while (v17 != (uint64_t ***)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(uint64_t ****)(v13 + 16 * v15);
      if (v17 == v11)
      {
        v16 = (uint64_t ****)(v13 + 16 * v15);
        goto LABEL_15;
      }
    }
  }
  v16 = (uint64_t ****)(v13 + 16 * v14);
LABEL_15:
  v20 = (size_t *)v16[1];
  v23 = *v20;
  v21 = v20 + 2;
  v22 = v23;
  v24 = (_WORD *)*((_QWORD *)v9 + 4);
  if (v23 <= *((_QWORD *)v9 + 3) - (_QWORD)v24)
  {
    if (v22)
    {
      memcpy(v24, v21, v22);
      v24 = (_WORD *)(*((_QWORD *)v9 + 4) + v22);
      *((_QWORD *)v9 + 4) = v24;
    }
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, (const char *)v21, v22);
    v24 = (_WORD *)*((_QWORD *)v9 + 4);
  }
LABEL_19:
  if (*((_QWORD *)v9 + 3) - (_QWORD)v24 > 1uLL)
  {
    *v24 = 2618;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v9, ":\n", 2uLL);
  }
  v25 = (int *)FunctionInfo[3];
  for (i = (int *)FunctionInfo[4]; v25 != i; v25 += 4)
  {
    v27 = *(llvm::raw_ostream **)(a1 + 32);
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (*((_BYTE **)v27 + 3) == v28)
    {
      v27 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "\t", 1uLL);
    }
    else
    {
      *v28 = 9;
      ++*((_QWORD *)v27 + 4);
    }
    v29 = *v25;
    if ((v29 & 0x80000000) != 0)
    {
      v29 = -(uint64_t)v29;
      v30 = v27;
      v31 = 1;
    }
    else
    {
      v30 = v27;
      v31 = 0;
    }
    sub_1C5E21910(v30, v29, 0, 0, v31);
    v32 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (*((_BYTE **)v27 + 3) == v32)
    {
      v27 = llvm::raw_ostream::write(v27, "\t", 1uLL);
    }
    else
    {
      *v32 = 9;
      ++*((_QWORD *)v27 + 4);
    }
    v33 = v25[1];
    if ((v33 & 0x80000000) != 0)
    {
      v33 = -(uint64_t)v33;
      v34 = v27;
      v35 = 1;
    }
    else
    {
      v34 = v27;
      v35 = 0;
    }
    sub_1C5E21910(v34, v33, 0, 0, v35);
    v36 = *((_QWORD *)v27 + 4);
    if ((unint64_t)(*((_QWORD *)v27 + 3) - v36) > 4)
    {
      *(_BYTE *)(v36 + 4) = 10;
      *(_DWORD *)v36 = 1567650651;
      *((_QWORD *)v27 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v27, "[sp]\n", 5uLL);
    }
  }
  v37 = *(llvm::raw_ostream **)(a1 + 32);
  v38 = *((_QWORD *)v37 + 4);
  if ((unint64_t)(*((_QWORD *)v37 + 3) - v38) > 0x12)
  {
    *(_DWORD *)(v38 + 15) = 544370534;
    *(_OWORD *)v38 = *(_OWORD *)"GC safe points for ";
    *((_QWORD *)v37 + 4) += 19;
  }
  else
  {
    v37 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "GC safe points for ", 0x13uLL);
  }
  v39 = *FunctionInfo;
  if ((*((_BYTE *)*FunctionInfo + 23) & 0x10) != 0)
  {
    v40 = ***v39;
    v41 = *(_QWORD *)(v40 + 152);
    v42 = *(unsigned int *)(v40 + 168);
    if ((_DWORD)v42)
    {
      LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 == v39)
        goto LABEL_49;
      v46 = 1;
      while (v45 != (uint64_t ***)-4096)
      {
        v47 = v43 + v46++;
        v43 = v47 & (v42 - 1);
        v45 = *(uint64_t ****)(v41 + 16 * v43);
        if (v45 == v39)
        {
          v44 = (uint64_t ****)(v41 + 16 * v43);
          goto LABEL_49;
        }
      }
    }
    v44 = (uint64_t ****)(v41 + 16 * v42);
LABEL_49:
    v48 = (size_t *)v44[1];
    v51 = *v48;
    v49 = v48 + 2;
    v50 = v51;
    v52 = (_WORD *)*((_QWORD *)v37 + 4);
    if (v51 <= *((_QWORD *)v37 + 3) - (_QWORD)v52)
    {
      if (v50)
      {
        memcpy(v52, v49, v50);
        v52 = (_WORD *)(*((_QWORD *)v37 + 4) + v50);
        *((_QWORD *)v37 + 4) = v52;
      }
    }
    else
    {
      v37 = llvm::raw_ostream::write(v37, (const char *)v49, v50);
      v52 = (_WORD *)*((_QWORD *)v37 + 4);
    }
    goto LABEL_53;
  }
  v52 = (_WORD *)*((_QWORD *)v37 + 4);
LABEL_53:
  if (*((_QWORD *)v37 + 3) - (_QWORD)v52 > 1uLL)
  {
    *v52 = 2618;
    *((_QWORD *)v37 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v37, ":\n", 2uLL);
  }
  v53 = FunctionInfo[6];
  for (j = FunctionInfo[7]; v53 != j; v53 += 2)
  {
    v55 = *(llvm::raw_ostream **)(a1 + 32);
    v56 = (_BYTE *)*((_QWORD *)v55 + 4);
    if (*((_BYTE **)v55 + 3) == v56)
    {
      v55 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), "\t", 1uLL);
    }
    else
    {
      *v56 = 9;
      ++*((_QWORD *)v55 + 4);
    }
    if ((*(_BYTE *)*v53 & 4) != 0)
    {
      v57 = (size_t *)*(*v53 - 1);
      v60 = *v57;
      v58 = v57 + 2;
      v59 = v60;
      v61 = (void *)*((_QWORD *)v55 + 4);
      if (v60 <= *((_QWORD *)v55 + 3) - (_QWORD)v61)
      {
        if (v59)
        {
          memcpy(v61, v58, v59);
          *((_QWORD *)v55 + 4) += v59;
        }
      }
      else
      {
        v55 = llvm::raw_ostream::write(v55, (const char *)v58, v59);
      }
    }
    v62 = (_WORD *)*((_QWORD *)v55 + 4);
    if (*((_QWORD *)v55 + 3) - (_QWORD)v62 > 1uLL)
    {
      *v62 = 8250;
      v63 = *((_QWORD *)v55 + 4) + 2;
      *((_QWORD *)v55 + 4) = v63;
    }
    else
    {
      v55 = llvm::raw_ostream::write(v55, ": ", 2uLL);
      v63 = *((_QWORD *)v55 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v55 + 3) - v63) > 8)
    {
      *(_BYTE *)(v63 + 8) = 108;
      *(_QWORD *)v63 = *(_QWORD *)"post-call";
      v64 = *((_QWORD *)v55 + 4) + 9;
      *((_QWORD *)v55 + 4) = v64;
    }
    else
    {
      v55 = llvm::raw_ostream::write(v55, "post-call", 9uLL);
      v64 = *((_QWORD *)v55 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v55 + 3) - v64) > 9)
    {
      *(_WORD *)(v64 + 8) = 31520;
      *(_QWORD *)v64 = *(_QWORD *)", live = {";
      *((_QWORD *)v55 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v55, ", live = {", 0xAuLL);
    }
    v65 = (int *)FunctionInfo[3];
    v66 = (int *)FunctionInfo[4];
    if (v65 != v66)
    {
      v67 = 0;
      do
      {
        v68 = *(llvm::raw_ostream **)(a1 + 32);
        v69 = v67 & 1;
        v70 = (_BYTE *)*((_QWORD *)v68 + 4);
        if (*((_QWORD *)v68 + 3) - (_QWORD)v70 >= v69)
        {
          if ((v67 & 1) != 0)
          {
            memcpy(v70, ",", v69);
            v70 = (_BYTE *)(*((_QWORD *)v68 + 4) + v69);
            *((_QWORD *)v68 + 4) = v70;
          }
        }
        else
        {
          if ((_DWORD)v69)
            v71 = ",";
          else
            v71 = 0;
          v68 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 32), v71, v69);
          v70 = (_BYTE *)*((_QWORD *)v68 + 4);
        }
        if (*((_BYTE **)v68 + 3) == v70)
        {
          v68 = llvm::raw_ostream::write(v68, " ", 1uLL);
        }
        else
        {
          *v70 = 32;
          ++*((_QWORD *)v68 + 4);
        }
        v72 = *v65;
        if ((v72 & 0x80000000) != 0)
        {
          v72 = -(uint64_t)v72;
          v73 = v68;
          v74 = 1;
        }
        else
        {
          v73 = v68;
          v74 = 0;
        }
        sub_1C5E21910(v73, v72, 0, 0, v74);
        v65 += 4;
        v67 = 1;
      }
      while (v65 != v66);
    }
    v75 = *(llvm::raw_ostream **)(a1 + 32);
    v76 = *((_QWORD *)v75 + 4);
    if ((unint64_t)(*((_QWORD *)v75 + 3) - v76) > 2)
    {
      *(_BYTE *)(v76 + 2) = 10;
      *(_WORD *)v76 = 32032;
      *((_QWORD *)v75 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v75, " }\n", 3uLL);
    }
  }
  return 0;
}

void sub_1C50C661C(void ***a1)
{
  void **v1;
  unsigned __int8 **v2;
  unsigned __int8 **v4;
  void *v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;

  v1 = *a1;
  v2 = (unsigned __int8 **)**a1;
  if (v2)
  {
    v4 = (unsigned __int8 **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1;
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
        v7 = v6 - 1;
        v6 -= 2;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C50C669C(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  llvm::GCFunctionInfo *v17;
  llvm::GCFunctionInfo *v18;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = (llvm::GCFunctionInfo *)*((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        llvm::GCFunctionInfo::~GCFunctionInfo(v17);
        MEMORY[0x1CAA32FC0]();
      }
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

llvm::GCFunctionInfo *sub_1C50C67B0(llvm::GCFunctionInfo *result, _QWORD *a2)
{
  llvm::GCFunctionInfo *v3;
  _QWORD *v4;
  llvm::GCFunctionInfo *v5;

  v3 = result;
  v4 = (_QWORD *)*((_QWORD *)result + 1);
  while (v4 != a2)
  {
    v5 = (llvm::GCFunctionInfo *)*--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      llvm::GCFunctionInfo::~GCFunctionInfo(result);
      result = (llvm::GCFunctionInfo *)MEMORY[0x1CAA32FC0]();
    }
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

uint64_t llvm::Registry<llvm::GCMetadataPrinter>::add_node(uint64_t result)
{
  uint64_t *v1;

  v1 = (uint64_t *)llvm::Registry<llvm::GCMetadataPrinter>::Tail;
  if (!llvm::Registry<llvm::GCMetadataPrinter>::Tail)
    v1 = (uint64_t *)&llvm::Registry<llvm::GCMetadataPrinter>::Head;
  *v1 = result;
  llvm::Registry<llvm::GCMetadataPrinter>::Tail = result;
  return result;
}

_QWORD *llvm::GCMetadataPrinter::GCMetadataPrinter(_QWORD *this)
{
  *this = &off_1E81428A8;
  return this;
}

{
  *this = &off_1E81428A8;
  return this;
}

void llvm::GCMetadataPrinter::~GCMetadataPrinter(llvm::GCMetadataPrinter *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50C6888()
{
  return 0;
}

uint64_t sub_1C50C6890(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeGCModuleInfoPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "GC Lowering";
  *(_QWORD *)(v3 + 8) = 11;
  *(_QWORD *)(v3 + 16) = "gc-lowering";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6EE8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C50C6AA0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::createGCLoweringPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C50C6948(v1);
}

uint64_t sub_1C50C6948(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F6EE8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81428F0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82F0D0);
  if (v3 != -1)
  {
    v7[0] = sub_1C50C6890;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82F0D0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50C6A10(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Analyze Machine Code For Garbage Collection";
  *(_QWORD *)(v2 + 8) = 43;
  *(_QWORD *)(v2 + 16) = "gc-analysis";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6EE9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50C70A4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50C6AA0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50C6948(v0);
}

void sub_1C50C6ACC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50C6AF0()
{
  return "Lower Garbage Collection Instructions";
}

uint64_t sub_1C50C6B00(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisPass;
  llvm::GCModuleInfo *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::GCModuleInfo::ID, 1);
  if (AnalysisPass)
    v4 = (llvm::GCModuleInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::GCModuleInfo::ID);
  else
    v4 = 0;
  v5 = a2 + 24;
  for (i = *(_QWORD *)(a2 + 32); i != v5; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v7 = i - 56;
    else
      v7 = 0;
    if (i && *(_BYTE *)(v7 + 16) == 3)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 0)
        continue;
LABEL_16:
      if ((*(_WORD *)(v7 + 18) & 0x4000) != 0)
        llvm::GCModuleInfo::getFunctionInfo(v4, (const llvm::Function *)v7);
      continue;
    }
    if (*(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 72) != v7 + 72 || (*(_BYTE *)(v7 + 34) & 0x80) != 0)
      goto LABEL_16;
  }
  return 0;
}

void *sub_1C50C6BD8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::GCModuleInfo::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C50C6C14(uint64_t a1, uint64_t a2)
{
  char v2;
  void **v5;
  void *v6;
  llvm::GCModuleInfo *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  llvm::Value *v18;
  llvm::Value **v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *Inst;
  uint64_t v24;
  _QWORD *v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  llvm::Value *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  _DWORD *v45;
  llvm::StoreInst *v46;
  llvm::PointerType *v47;
  llvm::Value *v48;
  uint64_t v49;
  BOOL v50;
  llvm::Instruction *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  _WORD v56[64];
  void *v57;
  uint64_t v58;
  _QWORD v59[34];

  v59[32] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a2 + 18) & 0x4000) == 0)
    goto LABEL_2;
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::GCModuleInfo::ID);
  v7 = (llvm::GCModuleInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::GCModuleInfo::ID);
  llvm::GCModuleInfo::getFunctionInfo(v7, (const llvm::Function *)a2);
  v57 = v59;
  v58 = 0x2000000000;
  v8 = *(_QWORD *)(a2 + 80);
  if (v8 == a2 + 72)
  {
LABEL_2:
    v2 = 0;
    return v2 & 1;
  }
  v2 = 0;
  do
  {
    v9 = v8 - 24;
    if (!v8)
      v9 = 0;
    v10 = (_QWORD *)(v9 + 40);
    v11 = *(_QWORD **)(v9 + 48);
    if (v11 != (_QWORD *)(v9 + 40))
    {
      while (1)
      {
        v12 = (_QWORD *)v11[1];
        v13 = v11 - 3;
        if (v11)
          v14 = v11 - 3;
        else
          v14 = 0;
        if (*((_BYTE *)v14 + 16) != 84)
          goto LABEL_28;
        v15 = *(v14 - 4);
        if (!v15 || *(_BYTE *)(v15 + 16) || *(_QWORD *)(v15 + 24) != v14[9] || (*(_BYTE *)(v15 + 33) & 0x20) == 0)
          goto LABEL_28;
        v16 = *(_DWORD *)(*(v11 - 7) + 36);
        if (v16 == 150)
          break;
        if (v16 == 151)
        {
          v26 = llvm::Value::stripPointerCasts((llvm::Value *)v13[-4 * (*((_DWORD *)v11 - 1) & 0x7FFFFFF)]);
          v27 = v58;
          if (v58 >= (unint64_t)HIDWORD(v58))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 8);
            v27 = v58;
          }
          *((_QWORD *)v57 + v27) = v26;
          LODWORD(v58) = v58 + 1;
          goto LABEL_28;
        }
        if (v16 == 152)
        {
          v17 = operator new(0x80uLL);
          v18 = (llvm::Value *)(v17 + 16);
          v17[21] = v17[21] & 0x38000000 | 2;
          *(_QWORD *)v17 = 0;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = 0;
          *((_QWORD *)v17 + 3) = v17 + 16;
          *((_QWORD *)v17 + 4) = 0;
          *((_QWORD *)v17 + 5) = 0;
          *((_QWORD *)v17 + 6) = 0;
          *((_QWORD *)v17 + 7) = v17 + 16;
          v19 = (llvm::Value **)&v13[-4 * (*((_DWORD *)v11 - 1) & 0x7FFFFFF)];
          llvm::StoreInst::StoreInst((llvm::StoreInst *)(v17 + 16), *v19, v19[8], 0, (llvm::Instruction *)(v11 - 3));
LABEL_24:
          v2 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)(v11 - 3), v18, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v11[2] + 40, (uint64_t ***)v11 - 3);
          v24 = *v11;
          v25 = (_QWORD *)v11[1];
          *v25 = *v11;
          *(_QWORD *)(v24 + 8) = v25;
          *v11 = 0;
          v11[1] = 0;
          llvm::Value::deleteValue((llvm::Value *)(v11 - 3));
        }
LABEL_28:
        v11 = v12;
        if (v12 == v10)
          goto LABEL_29;
      }
      v20 = operator new(0x60uLL);
      v18 = (llvm::Value *)(v20 + 8);
      v20[13] = v20[13] & 0x38000000 | 1;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = v20 + 8;
      v21 = *(v11 - 3);
      v22 = v13[-4 * (*((_DWORD *)v11 - 1) & 0x7FFFFFF) + 4];
      v56[0] = 257;
      Inst = (llvm::Value *)llvm::LoadInst::LoadInst((uint64_t)(v20 + 8), v21, v22, (uint64_t)&v52, 0, (uint64_t)(v11 - 3));
      llvm::Value::takeName(Inst, (llvm::Value *)(v11 - 3));
      goto LABEL_24;
    }
LABEL_29:
    v8 = *(_QWORD *)(v8 + 8);
  }
  while (v8 != a2 + 72);
  v28 = v58;
  v29 = (uint64_t *)v57;
  if (!(_DWORD)v58)
    goto LABEL_70;
  v30 = *(_QWORD *)(a2 + 80);
  if (v30)
    v31 = v30 - 24;
  else
    v31 = 0;
  v32 = (uint64_t *)(v31 + 48);
  do
  {
    v33 = *v32;
    v34 = *v32 - 24;
    if (!v33)
      v34 = 0;
    v35 = *(unsigned __int8 *)(v34 + 16);
    v32 = (uint64_t *)(v33 + 8);
  }
  while (v35 == 59);
  v52 = (char *)v56;
  v53 = (char *)v56;
  v54 = 16;
  v55 = 0;
  while (1)
  {
    v36 = v33 - 24;
    if (!v33)
      v36 = 0;
    v37 = *(unsigned __int8 *)(v36 + 16);
    if ((v37 - 59) >= 4)
      break;
    if (v33)
    {
      if (v37 == 61)
      {
        v38 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v36 - 32));
        if (v38)
        {
          if (*((_BYTE *)v38 + 16) == 59)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v52, (uint64_t)v38);
        }
      }
    }
LABEL_53:
    v33 = *(_QWORD *)(v33 + 8);
  }
  if (v33)
  {
    if (v37 == 84)
    {
      v39 = *(_QWORD *)(v36 - 32);
      if (v39)
      {
        if (!*(_BYTE *)(v39 + 16) && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v36 + 72) && *(_DWORD *)(v39 + 36) == 151)
          goto LABEL_53;
      }
    }
  }
  v40 = 0;
  v41 = 8 * v28;
  do
  {
    v42 = *v29;
    v43 = (char *)sub_1C477672C((uint64_t)&v52, *v29);
    if (v53 == v52)
      v44 = (uint64_t *)((char *)&v54 + 4);
    else
      v44 = &v54;
    if (v43 == &v53[8 * *(unsigned int *)v44])
    {
      v45 = operator new(0x80uLL);
      v46 = (llvm::StoreInst *)(v45 + 16);
      v45[21] = v45[21] & 0x38000000 | 2;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      *((_QWORD *)v45 + 2) = 0;
      *((_QWORD *)v45 + 3) = v45 + 16;
      *((_QWORD *)v45 + 4) = 0;
      *((_QWORD *)v45 + 5) = 0;
      *((_QWORD *)v45 + 6) = 0;
      *((_QWORD *)v45 + 7) = v45 + 16;
      v48 = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v42 + 64), v47);
      v49 = *(_QWORD *)(v42 + 32);
      if (v49)
        v50 = v49 == *(_QWORD *)(v42 + 40) + 40;
      else
        v50 = 1;
      if (v50)
        v51 = 0;
      else
        v51 = (llvm::Instruction *)(v49 - 24);
      llvm::StoreInst::StoreInst(v46, v48, (llvm::Value *)v42, 0, v51);
      v40 = 1;
    }
    ++v29;
    v41 -= 8;
  }
  while (v41);
  if (v53 != v52)
    free(v53);
  v2 |= v40;
  v29 = (uint64_t *)v57;
LABEL_70:
  if (v29 != v59)
    free(v29);
  return v2 & 1;
}

_QWORD *sub_1C50C70A4()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6EE9);
  *result = &off_1E8142990;
  return result;
}

void sub_1C50C70E4(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50C7178(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50C7204(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  *((_BYTE *)a2 + 160) = 1;
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::GCModuleInfo::ID);
}

uint64_t sub_1C50C723C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  llvm::GCModuleInfo *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t i;
  __int16 v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::MachineFunction *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char *v50;
  unsigned __int8 *TempSymbol;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54[3];
  int v55;
  __int16 v56;

  if ((*(_WORD *)(*(_QWORD *)a2 + 18) & 0x4000) == 0)
    return 0;
  v4 = a1;
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::GCModuleInfo::ID);
  v7 = (llvm::GCModuleInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::GCModuleInfo::ID);
  *(_QWORD *)(v4 + 248) = llvm::GCModuleInfo::getFunctionInfo(v7, *(const llvm::Function **)a2);
  *(_QWORD *)(v4 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(a2 + 56);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  if (!*(_BYTE *)(v8 + 36))
  {
    v12 = v9;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 440))(v9, a2) & 1) != 0)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 432))(v12, a2);
      v10 = *(_QWORD *)(v4 + 248);
      if ((v13 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v10 = *(_QWORD *)(v4 + 248);
    }
    v11 = *(_QWORD *)(v8 + 48);
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v4 + 248);
LABEL_7:
  v11 = -1;
LABEL_13:
  *(_QWORD *)(v10 + 16) = v11;
  v52 = v4;
  if (!*(_BYTE *)(*(_QWORD *)(v10 + 8) + 33))
    goto LABEL_67;
  v14 = *(_QWORD *)(a2 + 328);
  if (v14 == a2 + 320)
    goto LABEL_67;
  do
  {
    for (i = *(_QWORD *)(v14 + 56); i != v14 + 48; i = *(_QWORD *)(i + 8))
    {
      v16 = *(_WORD *)(i + 44);
      v17 = *(_QWORD *)(*(_QWORD *)(i + 16) + 8);
      if ((v16 & 0xC) == 0 || (v16 & 4) != 0)
      {
        if ((*(_QWORD *)(*(_QWORD *)(i + 16) + 8) & 0x280) != 0x80)
          goto LABEL_22;
LABEL_34:
        v21 = i;
        if ((v16 & 8) != 0)
        {
          v21 = i;
          if ((*(_QWORD *)i & 4) == 0)
          {
            v21 = i;
            do
              v21 = *(_QWORD *)(v21 + 8);
            while ((*(_WORD *)(v21 + 44) & 8) != 0);
          }
        }
        v22 = *(unint64_t **)(v21 + 8);
        v23 = *(_QWORD *)(i + 24);
        v24 = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 24);
        v54[0] = "tmp";
        v56 = 259;
        TempSymbol = (unsigned __int8 *)llvm::MCContext::createTempSymbol(v24, (uint64_t)v54, 1);
        v25 = *(_QWORD *)(*(_QWORD *)(v4 + 256) + 8);
        v26 = *(llvm::MachineFunction **)(v23 + 32);
        v27 = *(unsigned __int8 **)(i + 56);
        v53 = v27;
        if (v27)
          llvm::MetadataTracking::track((uint64_t)&v53, v27, 2);
        v28 = *((_QWORD *)v26 + 28);
        if (v28)
          *((_QWORD *)v26 + 28) = *(_QWORD *)v28;
        else
          v28 = sub_1C484358C((uint64_t)v26 + 128, 72, 3);
        v54[0] = v53;
        if (v53)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v53, v53, (uint64_t)v54);
          v53 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v28, v26, v25 + 240, v54, 0);
        if (v54[0])
          llvm::MetadataTracking::untrack((uint64_t)v54, v54[0]);
        if (v53)
          llvm::MetadataTracking::untrack((uint64_t)&v53, v53);
        v29 = *(_QWORD *)(v23 + 40);
        *(_QWORD *)(v28 + 24) = v29;
        v30 = *(_QWORD *)(v29 + 32);
        v31 = *(unsigned int *)(v28 + 40);
        if ((_DWORD)v31)
        {
          v34 = *(_QWORD *)(v28 + 32);
          v35 = *(_QWORD *)(v30 + 40);
          v36 = 32 * v31;
          do
          {
            if (!*(_BYTE *)v34)
            {
              v37 = *(unsigned int *)(v34 + 4);
              if ((int)v37 >= 0)
                v38 = (uint64_t *)(*(_QWORD *)(v35 + 272) + 8 * v37);
              else
                v38 = (uint64_t *)(*(_QWORD *)(v35 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
              v39 = *v38;
              if (*v38)
              {
                v40 = *(_QWORD *)(v39 + 16);
                *(_QWORD *)(v39 + 16) = v34;
                *(_QWORD *)(v34 + 16) = v40;
                if ((*(_BYTE *)(v34 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v34 + 24) = v39;
                }
                else
                {
                  *(_QWORD *)(v34 + 24) = 0;
                  v38 = (uint64_t *)(v40 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v34 + 16) = v34;
                *(_QWORD *)(v34 + 24) = 0;
              }
              *v38 = v34;
            }
            v34 += 32;
            v36 -= 32;
          }
          while (v36);
        }
        v32 = *(_QWORD *)(v30 + 728);
        if (v32)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v32 + 24))(v32, v28);
        v33 = *v22 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v28 = v33 | *(_QWORD *)v28 & 7;
        *(_QWORD *)(v28 + 8) = v22;
        *(_QWORD *)(v33 + 8) = v28;
        *v22 = *v22 & 7 | v28;
        v54[1] = 0;
        v54[2] = TempSymbol;
        v55 = 0;
        v54[0] = (unsigned __int8 *)15;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v28, v26, (const llvm::MachineOperand *)v54);
        v4 = v52;
        sub_1C61DF470((uint64_t *)(*(_QWORD *)(v52 + 248) + 48), (uint64_t)TempSymbol, *(unsigned __int8 **)(i + 56));
        goto LABEL_22;
      }
      v19 = i;
      if ((v17 & 0x80) != 0)
      {
LABEL_29:
        if ((v17 & 0x200) != 0)
          goto LABEL_22;
        v20 = i;
        while ((*(_WORD *)(v20 + 44) & 8) != 0)
        {
          v20 = *(_QWORD *)(v20 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v20 + 16) + 9) & 2) != 0)
            goto LABEL_22;
        }
        goto LABEL_34;
      }
      while ((*(_WORD *)(v19 + 44) & 8) != 0)
      {
        v19 = *(_QWORD *)(v19 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 8) & 0x80) != 0)
          goto LABEL_29;
      }
LABEL_22:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v14 = *(_QWORD *)(v14 + 8);
  }
  while (v14 != a2 + 320);
LABEL_67:
  v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
  v42 = *(_QWORD *)(v4 + 248);
  v43 = *(char **)(v42 + 24);
  v46 = *(char **)(v42 + 32);
  v45 = (_QWORD *)(v42 + 32);
  v44 = v46;
  if (v43 != v46)
  {
    v47 = v41;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8)
                     + 40 * (*(_DWORD *)(*(_QWORD *)(a2 + 56) + 32) + *(_DWORD *)v43)
                     + 8) == -1)
      {
        v48 = v44 - (v43 + 16);
        if (v44 != v43 + 16)
          memmove(v43, v43 + 16, v44 - (v43 + 16));
        *v45 = &v43[v48];
        v4 = v52;
      }
      else
      {
        LODWORD(v54[0]) = 0;
        *((_DWORD *)v43 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 232))(v47, a2);
        v43 += 16;
      }
      v49 = *(_QWORD *)(v4 + 248);
      v50 = *(char **)(v49 + 32);
      v45 = (_QWORD *)(v49 + 32);
      v44 = v50;
    }
    while (v43 != v50);
  }
  return 0;
}

uint64_t sub_1C50C7704(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    abort();
  v8 = a1[2] - *a1;
  if (v8 >> 3 > v4)
    v4 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v4;
  v17 = a1 + 2;
  if (v9)
  {
    if (v9 >> 60)
      sub_1C4764EE4();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v13 = v10;
  v14 = &v10[16 * v3];
  v16 = &v10[16 * v9];
  sub_1C50C77EC(v14, a2, a3);
  v15 = v14 + 16;
  sub_1C61DF4B4(a1, &v13);
  v11 = a1[1];
  sub_1C61DF56C((uint64_t)&v13);
  return v11;
}

_QWORD *sub_1C50C77EC(_QWORD *result, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = result;
  v7 = a3;
  if (a3)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)&v7, a3, 2);
    v5 = v7;
    *v4 = a2;
    v4[1] = v5;
    v6 = (uint64_t)(v4 + 1);
    if (v5)
      return (_QWORD *)llvm::MetadataTracking::retrack((uint64_t)&v7, v5, v6);
  }
  else
  {
    *result = a2;
    result[1] = 0;
  }
  return result;
}

void llvm::initializeGlobalMergePass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F7CB0);
  if (v1 != -1)
  {
    v4[0] = sub_1C50C78B0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F7CB0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C50C78B0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Merge global variables";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "global-merge";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F7CA8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50C7A78;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createGlobalMergePass(llvm *this, const llvm::TargetMachine *a2, char a3, BOOL a4)
{
  int v5;
  uint64_t v8;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  v5 = (int)a2;
  if (dword_1ED7F80F8)
    a4 = dword_1ED7F80F8 == 1;
  v8 = operator new();
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = &unk_1ED7F7CA8;
  *(_DWORD *)(v8 + 24) = 2;
  *(_QWORD *)v8 = &off_1E8142A50;
  *(_QWORD *)(v8 + 32) = this;
  *(_DWORD *)(v8 + 40) = v5;
  *(_BYTE *)(v8 + 44) = a3;
  *(_BYTE *)(v8 + 45) = a4;
  *(_QWORD *)(v8 + 48) = v8 + 80;
  *(_QWORD *)(v8 + 56) = v8 + 80;
  *(_QWORD *)(v8 + 64) = 16;
  *(_DWORD *)(v8 + 72) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v12 = qword_1ED830BC0[0];
  v10 = atomic_load(&qword_1ED7F7CB0);
  if (v10 != -1)
  {
    v14[0] = sub_1C50C78B0;
    v14[1] = &v12;
    v13 = v14;
    std::__call_once(&qword_1ED7F7CB0, &v13, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v8;
}

uint64_t sub_1C50C7A78()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED7F7CA8;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E8142A50;
  *(_QWORD *)(v0 + 32) = 0;
  *(_DWORD *)(v0 + 40) = dword_1ED7F7DF8;
  *(_WORD *)(v0 + 44) = 0;
  *(_QWORD *)(v0 + 48) = v0 + 80;
  *(_QWORD *)(v0 + 56) = v0 + 80;
  *(_QWORD *)(v0 + 64) = 16;
  *(_DWORD *)(v0 + 72) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F7CB0);
  if (v2 != -1)
  {
    v6[0] = sub_1C50C78B0;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F7CB0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C50C7B80(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8142A50;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2 != *((void **)this + 6))
    free(v2);
  llvm::Pass::~Pass(this);
}

void sub_1C50C7BC0(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8142A50;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2 != *((void **)this + 6))
    free(v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50C7C14()
{
  return "Merge internal globals";
}

uint64_t sub_1C50C7C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  llvm::Value **v18;
  uint64_t v19;
  llvm::Value *v20;
  BOOL v21;
  const llvm::Module *v22;
  _QWORD *v23;
  uint64_t ***v24;
  llvm::TargetMachine *v25;
  int v26;
  BOOL v27;
  unsigned int v29;
  uint64_t ***v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t ****v36;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ****v42;
  uint64_t ***v43;
  int v44;
  int v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t ****v51;
  uint64_t ***v52;
  int v53;
  int v54;
  uint64_t ***v55;
  int v56;
  int v57;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  char v67;
  const char *v68;
  const llvm::TargetMachine *v69;
  const llvm::GlobalObject *v70;
  void **p_p;
  uint64_t ****v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t ****v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  int64x2_t v83;
  int v84;
  unsigned int *v85;
  unint64_t v86;
  int64x2_t v87;
  unsigned int *k;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  int64x2_t v92;
  unsigned int *v93;
  uint64_t v94;
  void *v95;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  const llvm::Module *v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t ***v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  __int16 v110;
  void *__p;
  uint64_t v112;
  unsigned int v113;
  char v114;
  int v115;

  if (!byte_1ED7F7D38)
  {
    LOBYTE(v84) = 0;
    return v84 & 1;
  }
  v110 = 260;
  v107 = a2 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v107);
  *(_BYTE *)(a1 + 46) = v115 == 5;
  if (v114 < 0)
    operator delete(__p);
  __p = 0;
  v112 = 0;
  v113 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  sub_1C50C9138(a1, *(uint64_t **)(a2 + 112), "llvm.used", 9uLL);
  sub_1C50C9138(a1, *(uint64_t **)(a2 + 112), "llvm.compiler.used", 0x12uLL);
  v4 = a2 + 24;
  v100 = (const llvm::Module *)a2;
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 != a2 + 24)
  {
    do
    {
      v6 = v5 - 56;
      if (!v5)
        v6 = 0;
      v7 = v6 + 72;
      for (i = *(_QWORD *)(v6 + 80); i != v7; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 24;
        if (!i)
          v9 = 0;
        for (j = *(_QWORD *)(v9 + 48); ; j = *(_QWORD *)(j + 8))
        {
          v11 = j - 24;
          if (!j)
            v11 = 0;
          if (*(_BYTE *)(v11 + 16) != 83)
            break;
        }
        v12 = *(unsigned __int8 *)(j - 8) - 38;
        v13 = v12 > 0x38;
        v14 = (1 << v12) & 0x100060000000001;
        if (!v13 && v14 != 0)
        {
          v16 = *(_DWORD *)(j - 4);
          if ((v16 & 0x40000000) != 0)
          {
            v18 = *(llvm::Value ***)(j - 32);
            v17 = v16 & 0x7FFFFFF;
            if (!v17)
              continue;
          }
          else
          {
            v17 = v16 & 0x7FFFFFF;
            v18 = (llvm::Value **)(j - 32 * v17 - 24);
            if (!v17)
              continue;
          }
          v19 = 32 * v17;
          do
          {
            v20 = llvm::Value::stripPointerCasts(*v18);
            if (v20)
              v21 = *((_BYTE *)v20 + 16) == 3;
            else
              v21 = 0;
            if (v21)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 48), (uint64_t)v20);
            v18 += 4;
            v19 -= 32;
          }
          while (v19);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  v22 = v100;
  v23 = (_QWORD *)*((_QWORD *)v100 + 2);
  if (v23 == (_QWORD *)((char *)v100 + 8))
  {
    v82 = 0;
    goto LABEL_125;
  }
  v97 = (uint64_t)v100 + 272;
  do
  {
    if (v23)
      v24 = (uint64_t ***)(v23 - 7);
    else
      v24 = 0;
    if (v23 && *((_BYTE *)v24 + 16) == 3)
    {
      if ((*((_DWORD *)v24 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_114;
    }
    else if (!*((_BYTE *)v24 + 16) && v24[9] == (uint64_t **)(v24 + 9) && (*((_BYTE *)v24 + 34) & 0x80) == 0)
    {
      goto LABEL_114;
    }
    if ((*((_BYTE *)v24 + 33) & 0x1C) == 0 && (sub_1C50C8520((uint64_t)v24) & 1) == 0)
    {
      v25 = *(llvm::TargetMachine **)(a1 + 32);
      if (!v25 || llvm::TargetMachine::shouldAssumeDSOLocal(v25, v22, (const llvm::GlobalValue *)v24))
      {
        v26 = *((_DWORD *)v24 + 8);
        v27 = (v26 & 0xF) != 0 || *(_BYTE *)(a1 + 45) == 0;
        if (!v27 || ((_DWORD)v24[4] & 0xF) == 7)
        {
          v29 = v24 >> 4;
          v99 = *((_DWORD *)*v24 + 2);
          if ((v26 & 0x400000) == 0)
          {
            v98 = 0;
            v30 = 0;
            goto LABEL_62;
          }
          v31 = ***v24;
          v102.i64[0] = (uint64_t)v24;
          v32 = *(_DWORD *)(v31 + 2520);
          if (v32)
          {
            v33 = *(_QWORD *)(v31 + 2504);
            v34 = v32 - 1;
            v35 = v34 & (v29 ^ (v24 >> 9));
            v36 = (uint64_t ****)(v33 + 24 * v35);
            v37 = *v36;
            if (*v36 == v24)
            {
LABEL_61:
              v30 = v36[2];
              v98 = (uint64_t)v36[1];
LABEL_62:
              if ((*((_BYTE *)v24 + 23) & 0x10) == 0)
              {
LABEL_87:
                v59 = sub_1C477672C(a1 + 48, (uint64_t)v24);
                v60 = *(_QWORD *)(a1 + 56);
                if (v60 == *(_QWORD *)(a1 + 48))
                  v61 = 68;
                else
                  v61 = 64;
                if (v59 == (_QWORD *)(v60 + 8 * *(unsigned int *)(a1 + v61)))
                {
                  v62 = (uint64_t)v24[3];
                  sub_1C4768AD0(v97, v62);
                  v64 = v63;
                  v66 = v65 == 1;
                  llvm::DataLayout::getAlignment(v97, v62);
                  if (v66)
                  {
                    v81 = v67;
                    v67 = v81;
                  }
                  v22 = v100;
                  if ((((1 << v67) + ((unint64_t)(v64 + 7) >> 3) - 1) & -(1 << v67)) < *(unsigned int *)(a1 + 40))
                  {
                    v70 = *(const llvm::GlobalObject **)(a1 + 32);
                    if (v70
                      && llvm::TargetLoweringObjectFile::getKindForGlobal((llvm::TargetLoweringObjectFile *)v24, v70, v69)- 15 <= 2)
                    {
                      v102.i32[0] = v99 >> 8;
                      v102.i64[1] = v98;
                      v103 = v30;
                      p_p = (void **)&v104;
                    }
                    else if (((_BYTE)v24[10] & 1) != 0)
                    {
                      v102.i32[0] = v99 >> 8;
                      v102.i64[1] = v98;
                      v103 = v30;
                      p_p = (void **)&v107;
                    }
                    else
                    {
                      v102.i32[0] = v99 >> 8;
                      v102.i64[1] = v98;
                      v103 = v30;
                      p_p = &__p;
                    }
                    v76 = sub_1C50C91F4((uint64_t)p_p, (uint64_t)&v102);
                    v77 = *(unsigned int *)(v76 + 32);
                    if (v77 >= *(unsigned int *)(v76 + 36))
                    {
                      v80 = v76;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v76 + 24, v76 + 40, v77 + 1, 8);
                      v76 = v80;
                      v77 = *(unsigned int *)(v80 + 32);
                    }
                    *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v77) = v24;
                    ++*(_DWORD *)(v76 + 32);
                  }
                }
                goto LABEL_114;
              }
              v38 = ***v24;
              v39 = *(_QWORD *)(v38 + 152);
              v40 = *(unsigned int *)(v38 + 168);
              if ((_DWORD)v40)
              {
                LODWORD(v41) = (v40 - 1) & (v29 ^ (v24 >> 9));
                v42 = (uint64_t ****)(v39 + 16 * v41);
                v43 = *v42;
                if (*v42 == v24)
                {
LABEL_70:
                  v46 = v42[1];
                  if ((unint64_t)*v46 >= 5)
                  {
                    v47 = *((_DWORD *)v46 + 4);
                    v48 = *((unsigned __int8 *)v46 + 20);
                    if (v47 == 1836477548 && v48 == 46)
                      goto LABEL_114;
                  }
                  if ((_DWORD)v40)
                  {
                    LODWORD(v50) = (v40 - 1) & (v29 ^ (v24 >> 9));
                    v51 = (uint64_t ****)(v39 + 16 * v50);
                    v52 = *v51;
                    if (*v51 == v24)
                    {
LABEL_82:
                      v55 = v51[1];
                      if ((unint64_t)*v55 >= 6)
                      {
                        v56 = *((_DWORD *)v55 + 4);
                        v57 = *((unsigned __int16 *)v55 + 10);
                        if (v56 == 1986817070 && v57 == 11885)
                          goto LABEL_114;
                      }
                      goto LABEL_87;
                    }
                    v53 = 1;
                    while (v52 != (uint64_t ***)-4096)
                    {
                      v54 = v50 + v53++;
                      v50 = v54 & (v40 - 1);
                      v52 = *(uint64_t ****)(v39 + 16 * v50);
                      if (v52 == v24)
                      {
                        v51 = (uint64_t ****)(v39 + 16 * v50);
                        goto LABEL_82;
                      }
                    }
                  }
                  v51 = (uint64_t ****)(v39 + 16 * v40);
                  goto LABEL_82;
                }
                v44 = 1;
                while (v43 != (uint64_t ***)-4096)
                {
                  v45 = v41 + v44++;
                  v41 = v45 & (v40 - 1);
                  v43 = *(uint64_t ****)(v39 + 16 * v41);
                  if (v43 == v24)
                  {
                    v42 = (uint64_t ****)(v39 + 16 * v41);
                    goto LABEL_70;
                  }
                }
              }
              v42 = (uint64_t ****)(v39 + 16 * v40);
              goto LABEL_70;
            }
            v72 = 0;
            v73 = 1;
            while (v37 != (uint64_t ***)-4096)
            {
              if (v72)
                v74 = 0;
              else
                v74 = v37 == (uint64_t ***)-8192;
              if (v74)
                v72 = v36;
              v75 = v35 + v73++;
              v35 = v75 & v34;
              v36 = (uint64_t ****)(v33 + 24 * v35);
              v37 = *v36;
              if (*v36 == v24)
                goto LABEL_61;
            }
            if (v72)
              v78 = v72;
            else
              v78 = v36;
          }
          else
          {
            v78 = 0;
          }
          v36 = (uint64_t ****)sub_1C53D65B8(v31 + 2504, (uint64_t)&v102, v102.i64, v78);
          v79 = v102.i64[0];
          v36[1] = 0;
          v36[2] = 0;
          *v36 = (uint64_t ***)v79;
          goto LABEL_61;
        }
      }
    }
LABEL_114:
    v23 = (_QWORD *)v23[1];
  }
  while (v23 != (_QWORD *)((char *)v100 + 8));
  v82 = (char *)__p + 168 * v113;
  if ((_DWORD)v112)
  {
    v102.i64[0] = (uint64_t)__p;
    v102.i64[1] = (uint64_t)__p + 168 * v113;
    sub_1C50C96F0(v102.i64);
    v83 = v102;
    goto LABEL_126;
  }
LABEL_125:
  v83 = vdupq_n_s64((unint64_t)v82);
LABEL_126:
  v101 = v83;
  v85 = (unsigned int *)v83.i64[0];
  if (v82 == (char *)v83.i64[0])
  {
    v84 = 0;
  }
  else
  {
    v84 = 0;
    do
    {
      if (v85[8] >= 2)
      {
        v84 |= sub_1C50C8610(a1, (uint64_t)(v85 + 6), (uint64_t **)v22, 0, *v85);
        v85 = (unsigned int *)v101.i64[0];
      }
      v101.i64[0] = (uint64_t)(v85 + 42);
      sub_1C50C96F0(v101.i64);
      v85 = (unsigned int *)v101.i64[0];
    }
    while ((char *)v101.i64[0] != v82);
  }
  v86 = v104 + 168 * v106;
  if ((_DWORD)v105)
  {
    v102.i64[0] = v104;
    v102.i64[1] = v104 + 168 * v106;
    sub_1C50C96F0(v102.i64);
    v87 = v102;
  }
  else
  {
    v87 = vdupq_n_s64(v86);
  }
  v102 = v87;
  for (k = (unsigned int *)v87.i64[0]; v102.i64[0] != v86; k = (unsigned int *)v102.i64[0])
  {
    if (k[8] >= 2)
    {
      v84 |= sub_1C50C8610(a1, (uint64_t)(k + 6), (uint64_t **)v22, 0, *k);
      k = (unsigned int *)v102.i64[0];
    }
    v102.i64[0] = (uint64_t)(k + 42);
    sub_1C50C96F0(v102.i64);
  }
  v89 = v107;
  v90 = v109;
  if (byte_1ED7F8038)
  {
    v91 = v107 + 168 * v109;
    if ((_DWORD)v108)
    {
      v102.i64[0] = v107;
      v102.i64[1] = v107 + 168 * v109;
      sub_1C50C96F0(v102.i64);
      v92 = v102;
    }
    else
    {
      v92 = vdupq_n_s64(v91);
    }
    v102 = v92;
    v93 = (unsigned int *)v92.i64[0];
    if (v91 != v92.i64[0])
    {
      do
      {
        if (v93[8] >= 2)
        {
          v84 |= sub_1C50C8610(a1, (uint64_t)(v93 + 6), (uint64_t **)v22, 1, *v93);
          v93 = (unsigned int *)v102.i64[0];
        }
        v102.i64[0] = (uint64_t)(v93 + 42);
        sub_1C50C96F0(v102.i64);
        v93 = (unsigned int *)v102.i64[0];
      }
      while (v102.i64[0] != v91);
      v89 = v107;
      v90 = v109;
    }
  }
  v94 = v104;
  sub_1C50CE324(v104, v106);
  MEMORY[0x1CAA32FB4](v94, 8);
  sub_1C50CE324(v89, v90);
  MEMORY[0x1CAA32FB4](v89, 8);
  v95 = __p;
  sub_1C50CE324((uint64_t)__p, v113);
  MEMORY[0x1CAA32FB4](v95, 8);
  return v84 & 1;
}

uint64_t sub_1C50C843C(uint64_t a1)
{
  void *v2;
  uint64_t v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  void *v9;

  v2 = *(void **)(a1 + 56);
  if (v2 == *(void **)(a1 + 48))
    goto LABEL_2;
  v4 = *(unsigned int *)(a1 + 64);
  if (v4 < 0x21 || 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) >= v4)
  {
    memset(v2, 255, 8 * v4);
LABEL_2:
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    return 0;
  }
  free(v2);
  v6 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72);
  v7 = 1 << (33 - __clz(v6 - 1));
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  if (v6 <= 0x10)
    v8 = 32;
  else
    v8 = v7;
  *(_DWORD *)(a1 + 64) = v8;
  v9 = malloc_type_malloc(8 * v8, 0x4065EBACuLL);
  if (!v9)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 56) = v9;
  memset(v9, 255, 8 * *(unsigned int *)(a1 + 64));
  return 0;
}

void sub_1C50C8510(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C50C8518()
{
  return 0;
}

uint64_t sub_1C50C8520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    return 0;
  v7 = "bss-section";
  v8 = 11;
  v9 = 0;
  if ((sub_1C5331A1C((uint64_t *)(v1 + 24), (uint64_t)&v7, &v9) & 1) != 0)
    return 1;
  v4 = *(_QWORD *)(a1 + 72);
  if (!v4)
    return 0;
  v7 = "data-section";
  v8 = 12;
  v9 = 0;
  if ((sub_1C5331A1C((uint64_t *)(v4 + 24), (uint64_t)&v7, &v9) & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v7 = "relro-section";
    v8 = 13;
    v9 = 0;
    if ((sub_1C5331A1C((uint64_t *)(v5 + 24), (uint64_t)&v7, &v9) & 1) != 0)
      return 1;
    v6 = *(_QWORD *)(a1 + 72);
    if (v6)
    {
      v7 = "rodata-section";
      v8 = 14;
      v9 = 0;
      return sub_1C5331A1C((uint64_t *)(v6 + 24), (uint64_t)&v7, &v9);
    }
  }
  return 0;
}

uint64_t sub_1C50C8610(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, unsigned int a5)
{
  uint64_t *v6;
  unint64_t v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _DWORD *v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  void *v69;
  void **v70;
  unint64_t v71;
  const std::nothrow_t *v72;
  unint64_t v73;
  void **v74;
  void **v75;
  char v76;
  uint64_t v77;
  void **v78;
  void **v79;
  void **v80;
  uint64_t v81;
  unsigned int v82;
  int8x8_t *v83;
  uint64_t v84;
  int8x8_t v85;
  uint8x8_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  void **v97;
  void **v98;
  void *v99;
  char *v100;
  char *v101;
  unsigned int v103;
  void **v104;
  void **v105;
  unsigned int v106;
  void **v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int8x8_t *v117;
  _QWORD *v118;
  int8x8_t *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int8x8_t v124;
  uint8x8_t v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unsigned int v134;
  int v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v142;
  char *v143;
  char *v144;
  char *__p;
  _QWORD v146[2];
  int v147;
  void **v148[2];
  void *v149;
  void **v150;
  uint64_t v151;
  void *__b;
  uint64_t v153;
  _BYTE v154[48];
  unsigned int v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)a2;
  v7 = *(unsigned int *)(a2 + 8);
  __b = a3 + 34;
  if (v7 < 0x81)
  {
LABEL_5:
    sub_1C50CA6F4(v6, &v6[v7], (uint64_t *)&__b, v7, 0, 0);
  }
  else
  {
    v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v9 = v7;
    while (1)
    {
      v10 = (uint64_t *)operator new(8 * v9, v8);
      if (v10)
        break;
      v11 = v9 > 1;
      v9 >>= 1;
      if (!v11)
        goto LABEL_5;
    }
    v12 = v10;
    sub_1C50CA6F4(v6, &v6[v7], (uint64_t *)&__b, v7, v10, v9);
    operator delete(v12);
  }
  if (byte_1ED7F7EB8)
  {
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v148[0] = &v149;
    v148[1] = (void **)a2;
    *(_DWORD *)(sub_1C50CA468(v148) + 72) = 0;
    v146[0] = 0;
    v146[1] = 0;
    v147 = 0;
    v140 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v140)
    {
      __p = 0;
      v13 = 0;
      v139 = 0;
      v14 = 0;
      while (1)
      {
        v142 = v14;
        v143 = v13;
        v15 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v14);
        v16 = v13 - __p;
        v17 = (v13 - __p) >> 3;
        if (v13 - __p >= 1)
        {
          if (v17 <= 1)
            v18 = 1;
          else
            v18 = (v13 - __p) >> 3;
          bzero(__p, 8 * v18);
        }
        v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v150 - (_BYTE *)v149) >> 4);
        v20 = v19 - v17;
        if (v19 <= v17)
        {
          v26 = v143;
          if (v19 < v17)
            v26 = &__p[0x6666666666666668 * (((char *)v150 - (_BYTE *)v149) >> 4)];
          v144 = v26;
        }
        else if (v20 <= (v139 - v143) >> 3)
        {
          bzero(v143, 8 * v20);
          v144 = &v143[8 * v20];
        }
        else
        {
          if (v19 >> 61)
            abort();
          if ((v139 - __p) >> 2 > v19)
            v19 = (v139 - __p) >> 2;
          if ((unint64_t)(v139 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21 >> 61)
            sub_1C4764EE4();
          v22 = (char *)operator new(8 * v21);
          v23 = &v22[8 * v17];
          bzero(v23, 8 * v20);
          for (i = v143; i != __p; i -= 8)
          {
            v25 = *((_QWORD *)i - 1);
            *((_QWORD *)v23 - 1) = v25;
            v23 -= 8;
          }
          v139 = &v22[8 * v21];
          v144 = &v22[8 * v20 + v16];
          if (__p)
            operator delete(__p);
          __p = v23;
        }
        v27 = *(_QWORD *)(v15 + 8);
        if (v27)
          break;
LABEL_81:
        v13 = v144;
        v14 = v142 + 1;
        if (v142 + 1 == v140)
          goto LABEL_90;
      }
      v28 = 0;
      v29 = 1 << v142;
      v30 = v142 >> 6;
      while (1)
      {
        v31 = *(_QWORD *)(v27 + 24);
        v32 = *(unsigned __int8 *)(v31 + 16);
        if (v31)
          v33 = v32 == 5;
        else
          v33 = 0;
        if (v33)
        {
          v35 = *(_QWORD *)(v31 + 8);
          if (v35)
          {
            v34 = 0;
            do
            {
LABEL_62:
              v53 = *(_QWORD *)(v35 + 24);
              if (v53)
                v54 = *(unsigned __int8 *)(v53 + 16) >= 0x1Cu;
              else
                v54 = 0;
              if (v54)
              {
                v55 = *(_QWORD **)(*(_QWORD *)(v53 + 40) + 56);
                __b = v55;
                if (!*(_BYTE *)(a1 + 44) || (v56 = v55[14]) != 0 && *(char *)(v56 + 13) < 0)
                {
                  v57 = sub_1C50CB730((uint64_t)v146, (uint64_t *)&__b)[1];
                  if (v57)
                  {
                    v58 = (char *)v149;
                    v59 = (char *)v149 + 80 * v57;
                    v62 = *((_DWORD *)v59 + 18);
                    v60 = v59 + 72;
                    v61 = v62;
                    if ((*(_QWORD *)(*((_QWORD *)v149 + 10 * v57) + 8 * v30) & v29) != 0)
                    {
                      *v60 = v61 + 1;
                    }
                    else
                    {
                      *v60 = v61 - 1;
                      v63 = *(_QWORD *)&__p[8 * v57];
                      if (v63)
                      {
                        ++*(_DWORD *)&v58[80 * v63 + 72];
                        sub_1C50CB730((uint64_t)v146, (uint64_t *)&__b)[1] = v63;
                      }
                      else
                      {
                        v36 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v150 - v58) >> 4);
                        *(_QWORD *)&__p[8 * v57] = v36;
                        sub_1C50CB730((uint64_t)v146, (uint64_t *)&__b)[1] = v36;
                        v37 = sub_1C50CA468(v148);
                        v38 = v37;
                        v39 = *(_QWORD *)v37;
                        *(_QWORD *)(*(_QWORD *)v37 + 8 * v30) |= v29;
                        v40 = (char *)v149 + 80 * v57;
                        v41 = *((_DWORD *)v40 + 16);
                        if (*(_DWORD *)(v37 + 64) < v41)
                        {
                          v46 = *(_DWORD *)(v37 + 64) & 0x3F;
                          v47 = *(unsigned int *)(v37 + 8);
                          if (v46)
                            *(_QWORD *)(v39 + 8 * v47 - 8) &= ~(-1 << v46);
                          v48 = v47;
                          *(_DWORD *)(v37 + 64) = v41;
                          v49 = v41 + 63;
                          if ((_DWORD)v47 != (v41 + 63) >> 6)
                          {
                            v50 = v49 >> 6;
                            if (v47 > v50)
                            {
                              *(_DWORD *)(v37 + 8) = v50;
                              v48 = v49 >> 6;
                            }
                            else
                            {
                              v51 = v47;
                              if (v50 > *(_DWORD *)(v37 + 12))
                              {
                                v136 = v47;
                                v138 = v49 >> 6;
                                llvm::SmallVectorBase<unsigned int>::grow_pod(v37, v37 + 16, v50, 8);
                                v47 = v136;
                                v50 = v138;
                                v51 = *(unsigned int *)(v38 + 8);
                                v48 = *(_DWORD *)(v38 + 8);
                              }
                              if (v50 != v47)
                              {
                                v134 = v48;
                                v135 = v47;
                                v137 = v50;
                                bzero((void *)(*(_QWORD *)v38 + 8 * v51), 8 * (v50 - v47));
                                LODWORD(v47) = v135;
                                LODWORD(v50) = v137;
                                v48 = v134;
                              }
                              v48 += v50 - v47;
                              *(_DWORD *)(v38 + 8) = v48;
                              v41 = *(_DWORD *)(v38 + 64);
                            }
                          }
                          v52 = v41 & 0x3F;
                          if (v52)
                            *(_QWORD *)(*(_QWORD *)v38 + 8 * v48 - 8) &= ~(-1 << v52);
                        }
                        v42 = *((unsigned int *)v40 + 2);
                        if ((_DWORD)v42)
                        {
                          v43 = *(uint64_t **)v40;
                          v44 = *(_QWORD **)v38;
                          do
                          {
                            v45 = *v43++;
                            *v44++ |= v45;
                            --v42;
                          }
                          while (v42);
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v28)
                    {
                      ++*((_DWORD *)v149 + 20 * v28 + 18);
                    }
                    else
                    {
                      v28 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v150 - (_BYTE *)v149) >> 4);
                      v64 = (_QWORD *)sub_1C50CA468(v148);
                      *(_QWORD *)(*v64 + 8 * v30) |= v29;
                    }
                    sub_1C50CB730((uint64_t)v146, (uint64_t *)&__b)[1] = v28;
                  }
                }
              }
              v35 = *(_QWORD *)(v35 + 8);
            }
            while (v35 != v34);
          }
        }
        else if (v32 > 0x1B)
        {
          v34 = *(_QWORD *)(v27 + 8);
          v35 = v27;
          if (v27 != v34)
            goto LABEL_62;
        }
        v27 = *(_QWORD *)(v27 + 8);
        if (!v27)
          goto LABEL_81;
      }
    }
    __p = 0;
LABEL_90:
    v69 = v149;
    v70 = v150;
    v71 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v150 - (_BYTE *)v149) >> 4);
    if ((char *)v150 - (_BYTE *)v149 < 1)
    {
LABEL_94:
      sub_1C50CB930((uint64_t)v69, v70, v71, 0, 0);
    }
    else
    {
      v72 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v73 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v150 - (_BYTE *)v149) >> 4);
      while (1)
      {
        v74 = (void **)operator new(80 * v73, v72);
        if (v74)
          break;
        v11 = v73 > 1;
        v73 >>= 1;
        if (!v11)
          goto LABEL_94;
      }
      v75 = v74;
      sub_1C50CB930((uint64_t)v69, v70, v71, v74, v73);
      operator delete(v75);
    }
    v76 = a4;
    if (byte_1ED7F7F78)
    {
      v77 = *(unsigned int *)(a2 + 8);
      __b = v154;
      v153 = 0x600000000;
      sub_1C4765AA4((char *)&__b, (v77 + 63) >> 6, 0);
      v155 = v77;
      v78 = (void **)v149;
      v79 = v150;
      if (v150 != v149)
      {
        do
        {
          v80 = v79;
          v79 -= 10;
          if (*((_DWORD *)v80 - 2))
          {
            v81 = *((unsigned int *)v80 - 18);
            if ((_DWORD)v81)
            {
              v82 = 0;
              v83 = (int8x8_t *)*(v80 - 10);
              v84 = 8 * v81;
              do
              {
                v85 = *v83++;
                v86 = (uint8x8_t)vcnt_s8(v85);
                v86.i16[0] = vaddlv_u8(v86);
                v82 += v86.i32[0];
                v84 -= 8;
              }
              while (v84);
              if (v82 >= 2)
              {
                v87 = *((unsigned int *)v80 - 4);
                if (v77 < v87)
                {
                  v92 = v153;
                  if ((v77 & 0x3F) != 0)
                    *((_QWORD *)__b + v153 - 1) &= ~(-1 << (v77 & 0x3F));
                  v93 = v92;
                  v155 = v87;
                  v94 = v87 + 63;
                  if ((_DWORD)v92 != (v87 + 63) >> 6)
                  {
                    v95 = v94 >> 6;
                    if (v92 > v95)
                    {
                      LODWORD(v153) = v94 >> 6;
                      v93 = v94 >> 6;
                    }
                    else
                    {
                      v96 = v92;
                      if (v95 > HIDWORD(v153))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, (uint64_t)v154, v95, 8);
                        v96 = v153;
                        v93 = v153;
                      }
                      if (v95 != v92)
                        bzero((char *)__b + 8 * v96, 8 * (v95 - v92));
                      v93 += v95 - v92;
                      LODWORD(v153) = v93;
                      v87 = v155;
                    }
                  }
                  if ((v87 & 0x3F) != 0)
                    *((_QWORD *)__b + v93 - 1) &= ~(-1 << (v87 & 0x3F));
                }
                else
                {
                  v87 = v77;
                }
                v88 = *((unsigned int *)v80 - 18);
                if ((_DWORD)v88)
                {
                  v89 = (uint64_t *)*v79;
                  v90 = __b;
                  do
                  {
                    v91 = *v89++;
                    *v90++ |= v91;
                    --v88;
                  }
                  while (v88);
                }
                v77 = v87;
              }
            }
          }
        }
        while (v79 != v78);
      }
      LOBYTE(v68) = sub_1C50C9780(a1, (_QWORD *)a2, (uint64_t)&__b, a3, a4, a5);
    }
    else
    {
      v103 = *(_DWORD *)(a2 + 8);
      __b = v154;
      v153 = 0x600000000;
      sub_1C4765AA4((char *)&__b, (v103 + 63) >> 6, 0);
      v155 = v103;
      v104 = (void **)v149;
      v105 = v150;
      if (v150 == v149)
      {
        LOBYTE(v68) = 0;
      }
      else
      {
        v68 = 0;
        v106 = a5;
        do
        {
          v107 = v105;
          v105 -= 10;
          if (*((_DWORD *)v107 - 2))
          {
            v108 = v153;
            LODWORD(v109) = *((_DWORD *)v107 - 18);
            if (v109 >= v153)
              v109 = v153;
            else
              v109 = v109;
            if ((_DWORD)v109)
            {
              v110 = (uint64_t *)__b;
              v111 = (uint64_t *)*v105;
              while (1)
              {
                v113 = *v110++;
                v112 = v113;
                v114 = *v111++;
                if ((v114 & v112) != 0)
                  break;
                if (!--v109)
                  goto LABEL_146;
              }
            }
            else
            {
LABEL_146:
              v115 = *((_DWORD *)v107 - 4);
              if (v155 < v115)
              {
                if ((v155 & 0x3F) != 0)
                  *((_QWORD *)__b + v153 - 1) &= ~(-1 << (v155 & 0x3F));
                v155 = v115;
                v126 = v115 + 63;
                if ((_DWORD)v108 != (v115 + 63) >> 6)
                {
                  v127 = v126 >> 6;
                  if (v108 > v127)
                  {
                    LODWORD(v153) = v126 >> 6;
                    LODWORD(v108) = v126 >> 6;
                  }
                  else
                  {
                    v128 = v108;
                    v129 = v108;
                    if (v127 > HIDWORD(v153))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, (uint64_t)v154, v127, 8);
                      v128 = v153;
                      v129 = v153;
                    }
                    if (v127 != v108)
                      bzero((char *)__b + 8 * v128, 8 * (v127 - v108));
                    LODWORD(v108) = v129 + v127 - v108;
                    LODWORD(v153) = v108;
                    LOBYTE(v115) = v155;
                  }
                  v106 = a5;
                  v76 = a4;
                }
                v130 = v115 & 0x3F;
                if (v130)
                  *((_QWORD *)__b + v108 - 1) &= ~(-1 << v130);
              }
              v116 = *((unsigned int *)v107 - 18);
              if ((_DWORD)v116)
              {
                v117 = (int8x8_t *)*(v107 - 10);
                v118 = __b;
                v119 = v117;
                v120 = *((unsigned int *)v107 - 18);
                do
                {
                  v121 = (uint64_t)*v119++;
                  *v118++ |= v121;
                  --v120;
                }
                while (v120);
                v122 = 0;
                v123 = 8 * v116;
                do
                {
                  v124 = *v117++;
                  v125 = (uint8x8_t)vcnt_s8(v124);
                  v125.i16[0] = vaddlv_u8(v125);
                  v122 += v125.i32[0];
                  v123 -= 8;
                }
                while (v123);
                if (v122 >= 2)
                  v68 |= sub_1C50C9780(a1, (_QWORD *)a2, (uint64_t)v105, a3, v76, v106);
              }
            }
          }
        }
        while (v105 != v104);
      }
    }
    if (__b != v154)
      free(__b);
    if (__p)
      operator delete(__p);
    MEMORY[0x1CAA32FB4](v146[0], 8);
    v97 = (void **)v149;
    if (v149)
    {
      v98 = v150;
      v99 = v149;
      if (v150 != v149)
      {
        do
        {
          v101 = (char *)*(v98 - 10);
          v98 -= 10;
          v100 = v101;
          if (v98 + 2 != (void **)v101)
            free(v100);
        }
        while (v98 != v97);
        v99 = v149;
      }
      v150 = v97;
      operator delete(v99);
    }
  }
  else
  {
    v65 = *(_DWORD *)(a2 + 8);
    __b = v154;
    v153 = 0x600000000;
    sub_1C4765AA4((char *)&__b, (v65 + 63) >> 6, 0);
    v155 = v65;
    v66 = __b;
    v67 = v153;
    if ((_DWORD)v153)
      memset(__b, 255, 8 * v153);
    if ((v65 & 0x3F) != 0)
      v66[v67 - 1] &= ~(-1 << (v65 & 0x3F));
    LOBYTE(v68) = sub_1C50C9780(a1, (_QWORD *)a2, (uint64_t)&__b, a3, a4, a5);
    if (__b != v154)
      free(__b);
  }
  return v68 & 1;
}

uint64_t sub_1C50C9138(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  llvm::SmallPtrSetImplBase *v9;
  uint64_t v10;
  BOOL v11;

  result = sub_1C4FB7E80(a2, a3, a4);
  if (result)
  {
    if (*(_BYTE *)(result + 16) == 3
      && (*(_DWORD *)(result + 32) & 0xFu) - 7 >= 2
      && (*(_DWORD *)(result + 20) & 0x7FFFFFF) != 0)
    {
      v6 = *(_QWORD *)(result - 32);
      v7 = *(_DWORD *)(v6 + 20);
      v8 = v7 & 0x7FFFFFF;
      if ((v7 & 0x7FFFFFF) != 0)
      {
        v9 = (llvm::SmallPtrSetImplBase *)(a1 + 48);
        v10 = *(_QWORD *)(result - 32);
        do
        {
          result = (uint64_t)llvm::Value::stripPointerCasts(*(llvm::Value **)(v10
                                                                           - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)));
          if (result)
            v11 = *(_BYTE *)(result + 16) == 3;
          else
            v11 = 0;
          if (v11)
            result = (uint64_t)sub_1C4774094(v9, result);
          v10 += 32;
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

uint64_t sub_1C50C91F4(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;
  __int128 v10;

  v9 = 0;
  v4 = sub_1C50C9308(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C50C94FC(a1, v7);
    v9 = 0;
    sub_1C50C9308(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  LODWORD(v9) = -1;
  v10 = xmmword_1C85F6FF0;
  if ((sub_1C50C947C(v5, (uint64_t)&v9) & 1) == 0)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v5 = *(_DWORD *)a2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 24) = v5 + 40;
  *(_QWORD *)(v5 + 32) = 0x1000000000;
  return v5;
}

uint64_t sub_1C50C9308(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;

  if (a2)
  {
    v22 = -1;
    v23 = xmmword_1C85F6FF0;
    v20 = -2;
    v21 = xmmword_1C85FAB10;
    v8 = 37 * *(_DWORD *)a3;
    v9 = sub_1C5E3DF4C(*(_QWORD **)(a3 + 8), *(_QWORD *)(a3 + 8) + *(_QWORD *)(a3 + 16));
    v10 = (v9 | ((unint64_t)v8 << 32)) + ~(v9 << 32);
    v11 = 9
        * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = a2 - 1;
    v14 = (a2 - 1) & ((v12 >> 31) ^ v12);
    v15 = a1 + 168 * v14;
    if ((sub_1C50C947C(a3, v15) & 1) != 0)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      while (!sub_1C50C947C(v15, (uint64_t)&v22))
      {
        if ((sub_1C50C947C(v15, (uint64_t)&v20) & (v17 == 0)) != 0)
          v17 = v15;
        v14 = (v14 + v18) & v13;
        v15 = a1 + 168 * v14;
        v19 = sub_1C50C947C(a3, v15);
        result = 1;
        ++v18;
        if (v19)
          goto LABEL_4;
      }
      result = 0;
      if (v17)
        v15 = v17;
    }
LABEL_4:
    *a4 = v15;
  }
  else
  {
    result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t sub_1C50C947C(uint64_t a1, uint64_t a2)
{
  char *v4;
  const void *v5;
  size_t v7;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v4 = *(char **)(a1 + 8);
  v5 = *(const void **)(a2 + 8);
  if (v5 != (const void *)-2)
  {
    if (v5 == (const void *)-1)
      return v4 + 1 == 0;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a1 + 16) == v7)
    {
      if (!v7)
        return 1;
      return memcmp(v4, v5, v7) == 0;
    }
    return 0;
  }
  return v4 + 2 == 0;
}

char *sub_1C50C94FC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  _DWORD *v24;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(168 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[168 * v10];
      do
      {
        *(_DWORD *)result = -1;
        *(_OWORD *)(result + 8) = xmmword_1C85F6FF0;
        result += 168;
      }
      while (result != v11);
    }
    v22 = -1;
    v23 = xmmword_1C85F6FF0;
    v20 = -2;
    v21 = xmmword_1C85FAB10;
    if (v3)
    {
      v12 = 168 * v3;
      v13 = v4 + 24;
      do
      {
        if ((sub_1C50C947C(v13 - 24, (uint64_t)&v22) & 1) == 0 && (sub_1C50C947C(v13 - 24, (uint64_t)&v20) & 1) == 0)
        {
          v24 = 0;
          sub_1C50C9308(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13 - 24, (uint64_t *)&v24);
          v14 = v24;
          v15 = v24;
          *v24 = *(_DWORD *)(v13 - 24);
          v16 = *(_OWORD *)(v13 - 16);
          *((_QWORD *)v14 + 3) = v15 + 10;
          v17 = (uint64_t)(v14 + 6);
          *(_OWORD *)(v17 - 16) = v16;
          *(_QWORD *)(v17 + 8) = 0x1000000000;
          if (*(_DWORD *)(v13 + 8))
            sub_1C614D378(v17, v13);
          ++*(_DWORD *)(a1 + 8);
          if (v13 + 16 != *(_QWORD *)v13)
            free(*(void **)v13);
        }
        v13 += 168;
        v12 -= 168;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    v19 = &result[168 * v18];
    do
    {
      *(_DWORD *)result = -1;
      *(_OWORD *)(result + 8) = xmmword_1C85F6FF0;
      result += 168;
    }
    while (result != v19);
  }
  return result;
}

uint64_t *sub_1C50C96F0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int v4;
  __int128 v5;
  int v6;
  __int128 v7;

  v6 = -1;
  v7 = xmmword_1C85F6FF0;
  v4 = -2;
  v5 = xmmword_1C85FAB10;
  v1 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v3 = result;
    do
    {
      result = (uint64_t *)sub_1C50C947C(v1, (uint64_t)&v6);
      if ((result & 1) == 0)
      {
        result = (uint64_t *)sub_1C50C947C(v1, (uint64_t)&v4);
        if (!(_DWORD)result)
          break;
      }
      v1 += 168;
      *v3 = v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1C50C9780(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4, char a5, unsigned int a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  llvm::GlobalObject *v16;
  llvm::GlobalObject *v17;
  llvm::GlobalObject *v18;
  _QWORD *v19;
  const llvm::GlobalVariable *v20;
  uint64_t v21;
  unsigned __int8 PreferredAlign;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  const char *v27;
  char v28;
  char v29;
  llvm::Type *v30;
  uint64_t v31;
  llvm::Type *v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::GlobalObject *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  int v72;
  unsigned __int8 v73;
  uint64_t ***v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t ****v79;
  uint64_t ***v80;
  int v81;
  int v82;
  uint64_t ***v83;
  int v84;
  uint64_t v85;
  char *v86;
  char v87;
  char v88;
  llvm::UndefValue *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  llvm::GlobalObject *v95;
  char v96;
  unsigned int v97;
  uint64_t ***v98;
  llvm::GlobalObject *v99;
  size_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  uint64_t ****v106;
  uint64_t ***v107;
  llvm::GlobalObject *v108;
  llvm::GlobalObject *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  llvm::GlobalObject **v115;
  llvm::GlobalObject *v116;
  llvm::StructLayout *StructLayout;
  uint64_t v118;
  uint64_t v119;
  uint64_t ***v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t ****v126;
  uint64_t ***v127;
  int v128;
  int v129;
  unint64_t *v130;
  size_t v131;
  const void *v132;
  unint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  const llvm::GlobalObject *v137;
  llvm::Value *ElementPtr;
  llvm::PointerType *v139;
  llvm::GlobalValue *v140;
  llvm::GlobalValue *v141;
  int v142;
  unsigned int v143;
  char hasExternalWeakLinkage;
  llvm::GlobalObject **v145;
  int v146;
  BOOL v147;
  unsigned int v148;
  uint64_t ****v149;
  int v150;
  BOOL v151;
  unsigned int v152;
  llvm::GlobalObject **v153;
  uint64_t v154;
  uint64_t ****v155;
  uint64_t v156;
  uint64_t v158;
  char v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t **v163;
  llvm::ConstantInt *v164;
  char *v165;
  uint64_t **v166;
  llvm::ArrayType *v167;
  llvm::DataLayout *v168;
  _QWORD *v169;
  char v172;
  unsigned __int8 v173;
  char *v174;
  uint64_t *v175;
  unsigned __int8 v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  llvm::GlobalObject *v181;
  llvm::GlobalObject *v182;
  char *v183;
  int v184;
  int v185;
  llvm::ConstantAggregateZero *v186;
  char *__p;
  uint64_t v188[4];
  __int16 v189;
  void *__dst[2];
  unint64_t v191;
  _QWORD v192[4];
  char v193;
  char v194;
  llvm::Value **v195;
  llvm::Value **v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v9 = **a4;
  v10 = sub_1C476B7EC(a3);
  if (v10 == -1)
  {
    v160 = 0;
    return v160 & 1;
  }
  v160 = 0;
  v161 = a6;
  v163 = a4;
  v164 = (llvm::ConstantInt *)(v9 + 1960);
  v167 = (llvm::ArrayType *)(v9 + 1912);
  v168 = (llvm::DataLayout *)(a4 + 34);
  v11 = v10;
  v158 = a6 | 0x100000000;
  v169 = a2;
  do
  {
    v177 = 0;
    v172 = 0;
    v12 = 0;
    v165 = 0;
    v166 = 0;
    v176 = 0;
    v181 = 0;
    v183 = 0;
    v13 = 0;
    v14 = 0;
    __p = 0;
    v15 = 0;
    v174 = 0;
    v16 = 0;
    v17 = 0;
    v162 = v11;
    while (1)
    {
      v175 = v14;
      v18 = v16;
      v185 = v12;
      v19 = a2;
      v179 = v11;
      v20 = *(const llvm::GlobalVariable **)(*a2 + 8 * v11);
      v21 = *((_QWORD *)v20 + 3);
      PreferredAlign = llvm::DataLayout::getPreferredAlign(v168, v20);
      sub_1C4768AD0((uint64_t)v168, v21);
      v24 = v23;
      v26 = v25 == 1;
      llvm::DataLayout::getAlignment((uint64_t)v168, v21);
      v29 = v28;
      if (v26)
      v173 = PreferredAlign;
      v30 = (llvm::Type *)(((v177 + (1 << PreferredAlign) - 1) & -(int)(1 << PreferredAlign))
                         - v177);
      if ((unint64_t)v30 + v177 + (((1 << v29) + ((unint64_t)(v24 + 7) >> 3) - 1) & -(1 << v29)) > *(unsigned int *)(a1 + 40))
        break;
      v177 += (uint64_t)v30 + (((1 << v29) + ((unint64_t)(v24 + 7) >> 3) - 1) & -(1 << v29));
      a2 = v19;
      if (v30)
      {
        llvm::ArrayType::get(v167, v30);
        v33 = v31;
        v16 = v18;
        if (v13 >= v183)
        {
          v37 = (v13 - (char *)v175) >> 3;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61)
            goto LABEL_211;
          if ((v183 - (char *)v175) >> 2 > v38)
            v38 = (v183 - (char *)v175) >> 2;
          if ((unint64_t)(v183 - (char *)v175) >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v38;
          if (v39)
          {
            if (v39 >> 61)
              goto LABEL_212;
            v40 = (char *)operator new(8 * v39);
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[8 * v37];
          *(_QWORD *)v41 = v33;
          v34 = (uint64_t *)(v41 + 8);
          if (v13 != (char *)v175)
          {
            do
            {
              v42 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            while (v13 != (char *)v175);
            v13 = (char *)v175;
          }
          v14 = (uint64_t *)v41;
          v183 = &v40[8 * v39];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v13 = v31;
          v34 = (uint64_t *)(v13 + 8);
          v14 = v175;
        }
        v43 = llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*(v34 - 1), v32);
        v44 = v43;
        if (v17 >= v181)
        {
          v45 = (v17 - v16) >> 3;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61)
            goto LABEL_211;
          if ((v181 - v16) >> 2 > v46)
            v46 = (v181 - v16) >> 2;
          if ((unint64_t)(v181 - v16) >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47)
          {
            if (v47 >> 61)
              goto LABEL_212;
            v48 = (char *)operator new(8 * v47);
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[8 * v45];
          *(_QWORD *)v49 = v44;
          v35 = (llvm::GlobalObject *)(v49 + 8);
          while (v17 != v16)
          {
            v50 = *((_QWORD *)v17 - 1);
            v17 = (llvm::GlobalObject *)((char *)v17 - 8);
            *((_QWORD *)v49 - 1) = v50;
            v49 -= 8;
          }
          v181 = (llvm::GlobalObject *)&v48[8 * v47];
          if (v16)
            operator delete(v16);
          v16 = (llvm::GlobalObject *)v49;
          a2 = v169;
        }
        else
        {
          *(_QWORD *)v17 = v43;
          v35 = (llvm::GlobalObject *)((char *)v17 + 8);
        }
        v36 = __p;
        ++v185;
      }
      else
      {
        v35 = v17;
        v34 = (uint64_t *)v13;
        v36 = __p;
        v16 = v18;
        v14 = v175;
      }
      if (v34 >= (uint64_t *)v183)
      {
        v52 = v34 - v14;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 61)
          goto LABEL_211;
        if ((v183 - (char *)v14) >> 2 > v53)
          v53 = (v183 - (char *)v14) >> 2;
        if ((unint64_t)(v183 - (char *)v14) >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54)
        {
          if (v54 >> 61)
            goto LABEL_212;
          v55 = (char *)operator new(8 * v54);
          v36 = __p;
        }
        else
        {
          v55 = 0;
        }
        v56 = (uint64_t *)&v55[8 * v52];
        *v56 = v21;
        v13 = (char *)(v56 + 1);
        if (v34 == v14)
        {
          v51 = v179;
        }
        else
        {
          v51 = v179;
          do
          {
            v57 = *--v34;
            *--v56 = v57;
          }
          while (v34 != v14);
        }
        v183 = &v55[8 * v54];
        if (v14)
        {
          operator delete(v14);
          v36 = __p;
        }
        v14 = v56;
        a2 = v169;
      }
      else
      {
        *v34 = v21;
        v13 = (char *)(v34 + 1);
        v51 = v179;
      }
      v58 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v51) - 32);
      if (v35 >= v181)
      {
        v59 = (v35 - v16) >> 3;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          goto LABEL_211;
        if ((v181 - v16) >> 2 > v60)
          v60 = (v181 - v16) >> 2;
        if ((unint64_t)(v181 - v16) >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
        {
          if (v61 >> 61)
            goto LABEL_212;
          v62 = (char *)operator new(8 * v61);
          v36 = __p;
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[8 * v59];
        *(_QWORD *)v63 = v58;
        v17 = (llvm::GlobalObject *)(v63 + 8);
        if (v35 == v16)
        {
          v16 = (llvm::GlobalObject *)&v62[8 * v59];
          a2 = v169;
        }
        else
        {
          a2 = v169;
          do
          {
            v64 = *((_QWORD *)v35 - 1);
            v35 = (llvm::GlobalObject *)((char *)v35 - 8);
            *((_QWORD *)v63 - 1) = v64;
            v63 -= 8;
          }
          while (v35 != v16);
          v35 = v16;
          v16 = (llvm::GlobalObject *)v63;
        }
        v181 = (llvm::GlobalObject *)&v62[8 * v61];
        if (v35)
        {
          operator delete(v35);
          v36 = __p;
        }
      }
      else
      {
        *(_QWORD *)v35 = v58;
        v17 = (llvm::GlobalObject *)((char *)v35 + 8);
      }
      if (v15 >= v174)
      {
        v66 = (v15 - v36) >> 2;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
LABEL_211:
          abort();
        if ((v174 - v36) >> 1 > v67)
          v67 = (v174 - v36) >> 1;
        if ((unint64_t)(v174 - v36) >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          if (v68 >> 62)
LABEL_212:
            sub_1C4764EE4();
          v69 = (char *)operator new(4 * v68);
          v36 = __p;
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[4 * v66];
        *(_DWORD *)v70 = v185;
        v71 = v70 + 4;
        while (v15 != v36)
        {
          v72 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v70 - 1) = v72;
          v70 -= 4;
        }
        v174 = &v69[4 * v68];
        if (v36)
          operator delete(v36);
        v36 = v70;
        v15 = v71;
        v65 = v185;
      }
      else
      {
        v65 = v185;
        *(_DWORD *)v15 = v185;
        v15 += 4;
      }
      __p = v36;
      v73 = v173;
      if (v176 > v173)
        v73 = v176;
      v176 = v73;
      v74 = *(uint64_t ****)(*a2 + 8 * v51);
      if ((((_BYTE)v74[4] & 0xF) != 0) | v172 & 1)
        goto LABEL_114;
      if ((*((_BYTE *)v74 + 23) & 0x10) == 0)
      {
        v172 = 1;
        v165 = &byte_1C871356D;
        v166 = 0;
        goto LABEL_114;
      }
      v75 = ***v74;
      v76 = *(_QWORD *)(v75 + 152);
      v77 = *(unsigned int *)(v75 + 168);
      if (!(_DWORD)v77)
        goto LABEL_112;
      LODWORD(v78) = (v77 - 1) & ((v74 >> 4) ^ (v74 >> 9));
      v79 = (uint64_t ****)(v76 + 16 * v78);
      v80 = *v79;
      if (*v79 != v74)
      {
        v81 = 1;
        while (v80 != (uint64_t ***)-4096)
        {
          v82 = v78 + v81++;
          v78 = v82 & (v77 - 1);
          v80 = *(uint64_t ****)(v76 + 16 * v78);
          if (v80 == v74)
          {
            v79 = (uint64_t ****)(v76 + 16 * v78);
            goto LABEL_113;
          }
        }
LABEL_112:
        v79 = (uint64_t ****)(v76 + 16 * v77);
      }
LABEL_113:
      v83 = v79[1];
      v165 = (char *)(v83 + 2);
      v166 = *v83;
      v172 = 1;
LABEL_114:
      v12 = v65 + 1;
      v84 = sub_1C476BA0C((_QWORD *)a3, (int)v51 + 1, *(_DWORD *)(a3 + 64), 1u);
      v11 = v84;
      if (v84 == -1)
      {
        v11 = -1;
        goto LABEL_118;
      }
    }
    v11 = v179;
    a2 = v19;
    v16 = v18;
    v14 = v175;
LABEL_118:
    v85 = v13 - (char *)v14;
    v86 = __p;
    if ((unint64_t)(v13 - (char *)v14) >= 0x10)
    {
      if ((v172 & 1) != 0)
        v87 = 0;
      else
        v87 = 7;
      v88 = 1;
      v186 = (llvm::ConstantAggregateZero *)llvm::StructType::get(*v163, (uint64_t)v14, v85 >> 3, 1);
      v89 = llvm::ConstantStruct::get(v186, v16, (v17 - v16) >> 3);
      v90 = *(unsigned __int8 *)(a1 + 46);
      v180 = v11;
      if ((v172 & 1 & (*(_BYTE *)(a1 + 46) != 0)) == 1)
      {
        v192[2] = v165;
        v192[3] = v166;
        v88 = 5;
        v91 = "_MergedGlobals_";
      }
      else
      {
        v91 = "_MergedGlobals";
      }
      a2 = v169;
      v92 = v162;
      v193 = 3;
      v194 = v88;
      v192[0] = v91;
      v93 = (char *)operator new(0x78uLL);
      v94 = v93;
      *((_DWORD *)v93 + 13) = *((_DWORD *)v93 + 13) & 0x38000000 | 1;
      v95 = (llvm::GlobalObject *)(v93 + 32);
      *(_QWORD *)v93 = 0;
      *((_QWORD *)v93 + 1) = 0;
      *((_QWORD *)v93 + 2) = 0;
      *((_QWORD *)v93 + 3) = v93 + 32;
      if (v90)
        v96 = v87;
      else
        v96 = 8;
      llvm::GlobalVariable::GlobalVariable((uint64_t)(v93 + 32), (uint64_t)v163, v186, a5, v96, (uint64_t)v89, (uint64_t)v192, 0, 0, v158, 0);
      v97 = *((_DWORD *)v94 + 16) & 0xFFC0FFFF | ((v176 << 16) + 0x10000);
      *((_DWORD *)v94 + 16) = v97;
      v98 = *(uint64_t ****)(*v169 + 8 * v162);
      if ((*((_BYTE *)v98 + 34) & 0x40) == 0)
      {
        v99 = 0;
        v100 = 0;
        if ((v97 & 0x400000) != 0)
        {
LABEL_135:
          if (v100)
          {
            v99 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***(_QWORD ***)v95 + 2136, v99, v100);
            v109 = v108;
          }
          else
          {
            v109 = 0;
          }
          v110 = ***(_QWORD ***)v95;
          v188[0] = (uint64_t)v95;
          v111 = *(_DWORD *)(v110 + 2520);
          if (v111)
          {
            v112 = *(_QWORD *)(v110 + 2504);
            v113 = v111 - 1;
            v114 = v113 & ((v95 >> 4) ^ (v95 >> 9));
            v115 = (llvm::GlobalObject **)(v112 + 24 * v114);
            v116 = *v115;
            if (*v115 == v95)
              goto LABEL_139;
            v145 = 0;
            v146 = 1;
            while (v116 != (llvm::GlobalObject *)-4096)
            {
              if (v145)
                v147 = 0;
              else
                v147 = v116 == (llvm::GlobalObject *)-8192;
              if (v147)
                v145 = v115;
              v148 = v114 + v146++;
              v114 = v148 & v113;
              v115 = (llvm::GlobalObject **)(v112 + 24 * v114);
              v116 = *v115;
              if (*v115 == v95)
                goto LABEL_139;
            }
            if (v145)
              v153 = v145;
            else
              v153 = v115;
          }
          else
          {
            v153 = 0;
          }
          v115 = (llvm::GlobalObject **)sub_1C53D65B8(v110 + 2504, (uint64_t)v188, v188, v153);
          v154 = v188[0];
          v115[1] = 0;
          v115[2] = 0;
          *v115 = (llvm::GlobalObject *)v154;
LABEL_139:
          v115[1] = v99;
          v115[2] = v109;
          *((_DWORD *)v94 + 16) = *((_DWORD *)v94 + 16) & 0xFFBFFFFF | ((v109 != 0) << 22);
LABEL_140:
          v182 = v95;
          StructLayout = llvm::DataLayout::getStructLayout(v168, v186);
          v11 = v180;
          if (v162 == v180)
          {
LABEL_141:
            v160 = 1;
            v86 = __p;
            goto LABEL_142;
          }
          v118 = 0;
          v178 = (char *)StructLayout + 16;
          while (2)
          {
            v119 = v92;
            v120 = *(uint64_t ****)(*a2 + 8 * v92);
            v121 = *((_DWORD *)v120 + 8);
            if ((*((_BYTE *)v120 + 23) & 0x10) != 0)
            {
              v122 = ***v120;
              v123 = *(_QWORD *)(v122 + 152);
              v124 = *(unsigned int *)(v122 + 168);
              if (!(_DWORD)v124)
                goto LABEL_158;
              LODWORD(v125) = (v124 - 1) & ((v120 >> 4) ^ (v120 >> 9));
              v126 = (uint64_t ****)(v123 + 16 * v125);
              v127 = *v126;
              if (*v126 != v120)
              {
                v128 = 1;
                while (v127 != (uint64_t ***)-4096)
                {
                  v129 = v125 + v128++;
                  v125 = v129 & (v124 - 1);
                  v127 = *(uint64_t ****)(v123 + 16 * v125);
                  if (v127 == v120)
                  {
                    v126 = (uint64_t ****)(v123 + 16 * v125);
                    goto LABEL_159;
                  }
                }
LABEL_158:
                v126 = (uint64_t ****)(v123 + 16 * v124);
              }
LABEL_159:
              v130 = (unint64_t *)v126[1];
              v133 = *v130;
              v132 = v130 + 2;
              v131 = v133;
              if (v133 >= 0x7FFFFFFFFFFFFFF8)
                goto LABEL_211;
              if (v131 >= 0x17)
              {
                v135 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v131 | 7) != 0x17)
                  v135 = v131 | 7;
                v136 = v135 + 1;
                v134 = (void **)operator new(v135 + 1);
                __dst[1] = (void *)v131;
                v191 = v136 | 0x8000000000000000;
                __dst[0] = v134;
              }
              else
              {
                HIBYTE(v191) = v131;
                v134 = __dst;
                if (!v131)
                {
LABEL_167:
                  v11 = v180;
LABEL_168:
                  *((_BYTE *)v134 + v131) = 0;
                  v137 = *(const llvm::GlobalObject **)(*a2 + 8 * v119);
                  v184 = *((_DWORD *)v137 + 8);
                  llvm::GlobalObject::copyMetadata(v182, v137, *(_QWORD *)&v178[8 * *(unsigned int *)&__p[4 * v118]]);
                  v195 = 0;
                  v196 = 0;
                  v195 = llvm::ConstantInt::get(v164, 0, 0);
                  v196 = llvm::ConstantInt::get(v164, *(unsigned int *)&__p[4 * v118], 0);
                  ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr(v186, (uint64_t *)v182, (llvm::Value *)&v195, 2, 1, 0, 0);
                  llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(*a2 + 8 * v119), ElementPtr, (llvm::Value *)1);
                  llvm::GlobalVariable::eraseFromParent(*(llvm::GlobalVariable **)(*a2 + 8 * v119));
                  if ((v121 & 0xF) != 7 || !*(_BYTE *)(a1 + 46))
                  {
                    v139 = (llvm::PointerType *)v14[*(unsigned int *)&__p[4 * v118]];
                    v189 = 260;
                    v188[0] = (uint64_t)__dst;
                    v140 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v139, (llvm::Type *)v161, v121 & 0xF, (uint64_t)v188, (uint64_t)ElementPtr, (uint64_t)v163);
                    v141 = v140;
                    v142 = *((_DWORD *)v140 + 8);
                    v143 = v142 & 0xFFFFFFCF | v184 & 0x30;
                    *((_DWORD *)v140 + 8) = v143;
                    if ((v142 & 0xFu) - 7 < 2
                      || (v184 & 0x30) != 0
                      && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v140),
                          v143 = *((_DWORD *)v141 + 8),
                          (hasExternalWeakLinkage & 1) == 0))
                    {
                      v143 |= 0x4000u;
                    }
                    *((_DWORD *)v141 + 8) = v143 & 0xFFFFFCFF | v184 & 0x300;
                    a2 = v169;
                  }
                  if (SHIBYTE(v191) < 0)
                    operator delete(__dst[0]);
                  v92 = (int)sub_1C476BA0C((_QWORD *)a3, (int)v119 + 1, *(_DWORD *)(a3 + 64), 1u);
                  ++v118;
                  if (v11 == v92)
                    goto LABEL_141;
                  continue;
                }
              }
              memmove(v134, v132, v131);
              goto LABEL_167;
            }
            break;
          }
          v131 = 0;
          HIBYTE(v191) = 0;
          v134 = __dst;
          goto LABEL_168;
        }
LABEL_134:
        if (v100)
          goto LABEL_135;
        goto LABEL_140;
      }
      v101 = ***v98;
      v188[0] = *(_QWORD *)(*v169 + 8 * v162);
      v102 = *(_DWORD *)(v101 + 2520);
      if (v102)
      {
        v103 = *(_QWORD *)(v101 + 2504);
        v104 = v102 - 1;
        v105 = v104 & ((v98 >> 4) ^ (v98 >> 9));
        v106 = (uint64_t ****)(v103 + 24 * v105);
        v107 = *v106;
        if (*v106 == v98)
          goto LABEL_133;
        v149 = 0;
        v150 = 1;
        while (v107 != (uint64_t ***)-4096)
        {
          if (v149)
            v151 = 0;
          else
            v151 = v107 == (uint64_t ***)-8192;
          if (v151)
            v149 = v106;
          v152 = v105 + v150++;
          v105 = v152 & v104;
          v106 = (uint64_t ****)(v103 + 24 * v105);
          v107 = *v106;
          if (*v106 == v98)
            goto LABEL_133;
        }
        if (v149)
          v155 = v149;
        else
          v155 = v106;
      }
      else
      {
        v155 = 0;
      }
      v106 = (uint64_t ****)sub_1C53D65B8(v101 + 2504, (uint64_t)v188, v188, v155);
      v156 = v188[0];
      v106[1] = 0;
      v106[2] = 0;
      *v106 = (uint64_t ***)v156;
      v97 = *((_DWORD *)v94 + 16);
LABEL_133:
      v99 = (llvm::GlobalObject *)v106[1];
      v100 = (size_t)v106[2];
      if ((v97 & 0x400000) != 0)
        goto LABEL_135;
      goto LABEL_134;
    }
LABEL_142:
    if (v86)
      operator delete(v86);
    if (v16)
      operator delete(v16);
    if (v14)
      operator delete(v14);
  }
  while (v11 != -1);
  return v160 & 1;
}

uint64_t sub_1C50CA468(void ***a1)
{
  void **v2;
  int v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  const void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  char *v31;

  v2 = *a1;
  v3 = *((_DWORD *)a1[1] + 2);
  v5 = (char *)(*a1)[1];
  v4 = (char *)(*a1)[2];
  if (v5 < v4)
  {
    *(_QWORD *)v5 = v5 + 16;
    *((_QWORD *)v5 + 1) = 0x600000000;
    sub_1C4765AA4(v5, (v3 + 63) >> 6, 0);
    *((_DWORD *)v5 + 16) = v3;
    *((_DWORD *)v5 + 18) = 1;
    v6 = v5 + 80;
    goto LABEL_34;
  }
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*v2) >> 4);
  if (v7 + 1 > 0x333333333333333)
    abort();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*v2) >> 4);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x199999999999999)
    v10 = 0x333333333333333;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 > 0x333333333333333)
      sub_1C4764EE4();
    v11 = (char *)operator new(80 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[80 * v7];
  v13 = &v11[80 * v10];
  *(_QWORD *)v12 = v12 + 16;
  *((_QWORD *)v12 + 1) = 0x600000000;
  sub_1C4765AA4(v12, (v3 + 63) >> 6, 0);
  *((_DWORD *)v12 + 16) = v3;
  *((_DWORD *)v12 + 18) = 1;
  v6 = v12 + 80;
  v15 = (char *)*v2;
  v14 = (char *)v2[1];
  if (v14 != *v2)
  {
    v31 = v13;
    v16 = 0;
    while (1)
    {
      v17 = &v14[v16];
      v18 = &v12[v16];
      v19 = &v12[v16 - 64];
      *(_QWORD *)&v12[v16 - 80] = v19;
      v20 = &v12[v16 - 80];
      *(_QWORD *)&v12[v16 - 72] = 0x600000000;
      if (v12 == v14)
        goto LABEL_23;
      v21 = *((unsigned int *)v17 - 18);
      if (!(_DWORD)v21)
        goto LABEL_23;
      v22 = (const void *)*((_QWORD *)v17 - 10);
      v23 = &v14[v16];
      v24 = (uint64_t)&v14[v16 - 64];
      if ((const void *)v24 != v22)
      {
        *(_QWORD *)v20 = v22;
        v26 = *((_DWORD *)v23 - 17);
        *((_DWORD *)v18 - 18) = v21;
        *((_DWORD *)v18 - 17) = v26;
        *((_QWORD *)v17 - 10) = v24;
        *((_DWORD *)v23 - 17) = 0;
        goto LABEL_22;
      }
      if (v21 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v20, (uint64_t)&v12[v16 - 64], v21, 8);
        v25 = *((unsigned int *)v17 - 18);
        if (!(_DWORD)v25)
          goto LABEL_21;
        v22 = (const void *)*((_QWORD *)v17 - 10);
        v19 = *(char **)&v12[v16 - 80];
      }
      else
      {
        v25 = *((unsigned int *)v17 - 18);
      }
      memcpy(v19, v22, 8 * v25);
LABEL_21:
      *((_DWORD *)v18 - 18) = v21;
LABEL_22:
      *((_DWORD *)v17 - 18) = 0;
LABEL_23:
      *((_DWORD *)v18 - 4) = *((_DWORD *)v17 - 4);
      *((_DWORD *)v18 - 2) = *((_DWORD *)v17 - 2);
      v16 -= 80;
      if (&v14[v16] == v15)
      {
        v14 = (char *)*v2;
        v27 = (char *)v2[1];
        *v2 = &v12[v16];
        v2[1] = v6;
        v2[2] = v31;
        while (v27 != v14)
        {
          v29 = (char *)*((_QWORD *)v27 - 10);
          v27 -= 80;
          v28 = v29;
          if (v27 + 16 != v29)
            free(v28);
        }
        goto LABEL_32;
      }
    }
  }
  *v2 = v12;
  v2[1] = v6;
  v2[2] = v13;
LABEL_32:
  if (v14)
    operator delete(v14);
LABEL_34:
  v2[1] = v6;
  return (uint64_t)(*a1)[1] - 80;
}

void sub_1C50CA6F4(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t *v87;

  if (a4 >= 2)
  {
    v7 = a2;
    v8 = a1;
    if (a4 == 2)
    {
      v9 = *a1;
      v10 = *a3;
      v11 = *(_QWORD *)(*(a2 - 1) + 24);
      sub_1C4768AD0(*a3, v11);
      v13 = (unint64_t)(v12 + 7) >> 3;
      llvm::DataLayout::getAlignment(v10, v11);
      v15 = ((1 << v14) + v13 - 1) & -(1 << v14);
      v16 = *a3;
      v17 = *(_QWORD *)(v9 + 24);
      sub_1C4768AD0(v16, v17);
      v19 = (unint64_t)(v18 + 7) >> 3;
      llvm::DataLayout::getAlignment(v16, v17);
      if (v15 < (((1 << v20) + v19 - 1) & -(1 << v20)))
      {
        v21 = *v8;
        *v8 = *(v7 - 1);
        *(v7 - 1) = v21;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v56 = a5;
      v57 = a4 >> 1;
      v58 = &a1[a4 >> 1];
      v59 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C50CAB84(a1, v58, a3, v59, a5);
        v60 = &v56[v57];
        sub_1C50CAB84(&v8[a4 >> 1], v7, a3, a4 - (a4 >> 1), v60);
        v61 = &v56[a4];
        v62 = v60;
        v87 = v60;
        while (v62 != v61)
        {
          v63 = v62;
          v64 = v8;
          v65 = *v56;
          v66 = *a3;
          v67 = *(_QWORD *)(*v62 + 24);
          v68 = v61;
          sub_1C4768AD0(*a3, v67);
          v70 = (unint64_t)(v69 + 7) >> 3;
          llvm::DataLayout::getAlignment(v66, v67);
          v72 = ((1 << v71) + v70 - 1) & -(1 << v71);
          v73 = *a3;
          v74 = *(_QWORD *)(v65 + 24);
          sub_1C4768AD0(*a3, v74);
          v76 = (unint64_t)(v75 + 7) >> 3;
          llvm::DataLayout::getAlignment(v73, v74);
          v78 = ((1 << v77) + v76 - 1) & -(1 << v77);
          if (v72 < v78)
            v79 = v63;
          else
            v79 = v56;
          v56 += v72 >= v78;
          v62 = &v63[v72 < v78];
          v80 = *v79;
          v61 = v68;
          v60 = v87;
          *v64 = v80;
          v8 = v64 + 1;
          if (v56 == v87)
          {
            if (v62 != v61)
            {
              v81 = 0;
              if (v72 < v78)
                v82 = 1;
              else
                v82 = 2;
              v83 = &v63[v82 & 1];
              do
              {
                v8[v81] = v83[v81];
                ++v81;
              }
              while (&v83[v81] != v61);
            }
            return;
          }
        }
        if (v56 != v60)
        {
          v84 = 0;
          do
          {
            v8[v84] = v56[v84];
            ++v84;
          }
          while (&v56[v84] != v60);
        }
      }
      else
      {
        sub_1C50CA6F4(a1, v58, a3, v59, a5, a6);
        sub_1C50CA6F4(&v8[a4 >> 1], v7, a3, a4 - (a4 >> 1), v56, a6);
        sub_1C50CAFB4(v8, &v8[a4 >> 1], v7, a3, a4 >> 1, a4 - (a4 >> 1), v56, a6);
      }
    }
    else if (a1 != a2)
    {
      v23 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v86 = 0;
        v24 = a1;
        do
        {
          v26 = *v24;
          v25 = v24[1];
          v24 = v23;
          v27 = *a3;
          v28 = *(_QWORD *)(v25 + 24);
          sub_1C4768AD0(*a3, v28);
          v30 = (unint64_t)(v29 + 7) >> 3;
          llvm::DataLayout::getAlignment(v27, v28);
          v32 = ((1 << v31) + v30 - 1) & -(1 << v31);
          v33 = *a3;
          v34 = *(_QWORD *)(v26 + 24);
          sub_1C4768AD0(*a3, v34);
          v36 = (unint64_t)(v35 + 7) >> 3;
          llvm::DataLayout::getAlignment(v33, v34);
          if (v32 < (((1 << v37) + v36 - 1) & -(1 << v37)))
          {
            v38 = *v24;
            v39 = v86;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v39 + 8) = *(uint64_t *)((char *)v8 + v39);
              if (!v39)
                break;
              v40 = *(uint64_t *)((char *)v8 + v39 - 8);
              v41 = *a3;
              v42 = *(_QWORD *)(v38 + 24);
              sub_1C4768AD0(*a3, v42);
              v44 = v8;
              v45 = (unint64_t)(v43 + 7) >> 3;
              llvm::DataLayout::getAlignment(v41, v42);
              v47 = ((1 << v46) + v45 - 1) & -(1 << v46);
              v48 = *a3;
              v49 = *(_QWORD *)(v40 + 24);
              sub_1C4768AD0(*a3, v49);
              v51 = (unint64_t)(v50 + 7) >> 3;
              llvm::DataLayout::getAlignment(v48, v49);
              v39 -= 8;
              v53 = v47 >= (((1 << v52) + v51 - 1) & -(1 << v52));
              v8 = v44;
              if (v53)
              {
                v54 = (uint64_t *)((char *)v44 + v39 + 8);
                goto LABEL_16;
              }
            }
            v54 = v8;
LABEL_16:
            v7 = a2;
            *v54 = v38;
          }
          v23 = v24 + 1;
          v86 += 8;
        }
        while (v24 + 1 != v7);
      }
    }
  }
}

void sub_1C50CAB84(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_10:
      *v5 = *v7;
      return;
    }
    v9 = a2;
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = *a1;
      v12 = *a3;
      v13 = *(_QWORD *)(*(a2 - 1) + 24);
      sub_1C4768AD0(*a3, v13);
      v15 = (unint64_t)(v14 + 7) >> 3;
      llvm::DataLayout::getAlignment(v12, v13);
      v17 = ((1 << v16) + v15 - 1) & -(1 << v16);
      v18 = *a3;
      v19 = *(_QWORD *)(v11 + 24);
      sub_1C4768AD0(v18, v19);
      v21 = (unint64_t)(v20 + 7) >> 3;
      llvm::DataLayout::getAlignment(v18, v19);
      v23 = ((1 << v22) + v21 - 1) & -(1 << v22);
      v24 = v17 >= v23;
      if (v17 >= v23)
        v25 = v7;
      else
        v25 = v10;
      *v5++ = *v25;
      if (v24)
        v7 = v10;
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      v56 = &a1[a4 >> 1];
      sub_1C50CA6F4(a1, v56, a3, a4 >> 1, a5, a4 >> 1);
      sub_1C50CA6F4(&v7[a4 >> 1], v9, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v57 = &v7[a4 >> 1];
      while (v57 != v9)
      {
        v58 = v57;
        v59 = *v7;
        v60 = *a3;
        v61 = *(_QWORD *)(*v57 + 24);
        sub_1C4768AD0(*a3, v61);
        v63 = (unint64_t)(v62 + 7) >> 3;
        llvm::DataLayout::getAlignment(v60, v61);
        v65 = ((1 << v64) + v63 - 1) & -(1 << v64);
        v66 = *a3;
        v67 = *(_QWORD *)(v59 + 24);
        sub_1C4768AD0(*a3, v67);
        v69 = (unint64_t)(v68 + 7) >> 3;
        llvm::DataLayout::getAlignment(v66, v67);
        v71 = (1 << v70) + v69;
        v9 = a2;
        v72 = (v71 - 1) & -(1 << v70);
        if (v65 >= v72)
          v73 = v7;
        else
          v73 = v58;
        v57 = &v58[v65 < v72];
        v7 += v65 >= v72;
        *v5++ = *v73;
        if (v7 == v56)
        {
          if (v57 != a2)
          {
            v74 = 0;
            v75 = &v58[v65 < v72];
            do
            {
              v5[v74] = v75[v74];
              ++v74;
            }
            while (&v75[v74] != a2);
          }
          return;
        }
      }
      if (v7 != v56)
      {
        v76 = 0;
        do
        {
          v5[v76] = v7[v76];
          ++v76;
        }
        while (&v7[v76] != v56);
      }
    }
    else if (a1 != a2)
    {
      v26 = a1 + 1;
      *a5 = *a1;
      if (a1 + 1 != a2)
      {
        v27 = 0;
        v78 = a5;
        do
        {
          v77 = v78;
          v28 = *v78;
          v29 = *a3;
          v30 = *(_QWORD *)(*v26 + 24);
          sub_1C4768AD0(*a3, v30);
          v32 = (unint64_t)(v31 + 7) >> 3;
          llvm::DataLayout::getAlignment(v29, v30);
          v34 = ((1 << v33) + v32 - 1) & -(1 << v33);
          v35 = *a3;
          v36 = *(_QWORD *)(v28 + 24);
          sub_1C4768AD0(*a3, v36);
          v38 = (unint64_t)(v37 + 7) >> 3;
          llvm::DataLayout::getAlignment(v35, v36);
          v40 = ((1 << v39) + v38 - 1) & -(1 << v39);
          v41 = ++v78;
          if (v34 < v40)
          {
            v77[1] = *v77;
            v41 = v5;
            if (v77 != v5)
            {
              v42 = v27;
              while (1)
              {
                v41 = (uint64_t *)((char *)v5 + v42);
                v43 = *(uint64_t *)((char *)v5 + v42 - 8);
                v44 = *a3;
                v45 = *(_QWORD *)(*v26 + 24);
                sub_1C4768AD0(*a3, v45);
                v47 = (unint64_t)(v46 + 7) >> 3;
                llvm::DataLayout::getAlignment(v44, v45);
                v49 = ((1 << v48) + v47 - 1) & -(1 << v48);
                v50 = *a3;
                v51 = *(_QWORD *)(v43 + 24);
                sub_1C4768AD0(*a3, v51);
                v53 = (unint64_t)(v52 + 7) >> 3;
                llvm::DataLayout::getAlignment(v50, v51);
                if (v49 >= (((1 << v54) + v53 - 1) & -(1 << v54)))
                  break;
                *v41 = *(v41 - 1);
                v42 -= 8;
                if (!v42)
                {
                  v41 = v5;
                  break;
                }
              }
            }
          }
          v55 = *v26++;
          *v41 = v55;
          v27 += 8;
        }
        while (v26 != a2);
      }
    }
  }
}

void sub_1C50CAFB4(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  BOOL v118;
  unsigned int v119;
  unsigned int v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;

  v128 = a6;
  if (!a6)
    return;
  while (a5 > a8 && v128 > a8)
  {
    if (!a5)
      return;
    while (1)
    {
      v12 = a2;
      v13 = *a1;
      v14 = *a4;
      v15 = *(_QWORD *)(*a2 + 24);
      sub_1C4768AD0(*a4, v15);
      v17 = (unint64_t)(v16 + 7) >> 3;
      llvm::DataLayout::getAlignment(v14, v15);
      v19 = ((1 << v18) + v17 - 1) & -(1 << v18);
      v20 = *a4;
      v21 = *(_QWORD *)(v13 + 24);
      sub_1C4768AD0(*a4, v21);
      v23 = (unint64_t)(v22 + 7) >> 3;
      llvm::DataLayout::getAlignment(v20, v21);
      if (v19 < (((1 << v24) + v23 - 1) & -(1 << v24)))
        break;
      ++a1;
      --a5;
      a2 = v12;
      if (!a5)
        return;
    }
    v125 = a8;
    v25 = v128;
    if (a5 >= v128)
    {
      v47 = v12;
      v30 = a7;
      if (a5 == 1)
      {
        v122 = *a1;
        *a1 = *v12;
        *v12 = v122;
        return;
      }
      if (a5 >= 0)
        v48 = a5;
      else
        v48 = a5 + 1;
      v29 = v48 >> 1;
      v28 = a3;
      v31 = &a1[v48 >> 1];
      v27 = a3 - v12;
      v131 = a4;
      if (a3 != v12)
      {
        v130 = v48 >> 1;
        v134 = &a1[v48 >> 1];
        v49 = *a4;
        v28 = v12;
        do
        {
          v50 = &v28[v27 >> 1];
          v52 = *v50;
          v51 = v50 + 1;
          v53 = *v31;
          v54 = *(_QWORD *)(v52 + 24);
          sub_1C4768AD0(v49, v54);
          v56 = (unint64_t)(v55 + 7) >> 3;
          llvm::DataLayout::getAlignment(v49, v54);
          v58 = ((1 << v57) + v56 - 1) & -(1 << v57);
          v59 = *(_QWORD *)(v53 + 24);
          sub_1C4768AD0(v49, v59);
          v61 = (unint64_t)(v60 + 7) >> 3;
          llvm::DataLayout::getAlignment(v49, v59);
          v31 = v134;
          v63 = ((1 << v62) + v61 - 1) & -(1 << v62);
          if (v58 >= v63)
            v27 >>= 1;
          else
            v27 += ~(v27 >> 1);
          if (v58 < v63)
            v28 = v51;
        }
        while (v27);
        v47 = v12;
        v27 = v28 - v12;
        v30 = a7;
        v25 = v128;
        v29 = v130;
      }
    }
    else
    {
      if (v128 >= 0)
        v26 = v128;
      else
        v26 = v128 + 1;
      v27 = v26 >> 1;
      v28 = &v12[v26 >> 1];
      v29 = v12 - a1;
      v30 = a7;
      if (v12 == a1)
      {
        v31 = v12;
        a1 = v12;
        v67 = &v12[v26 >> 1];
        goto LABEL_46;
      }
      v124 = v26 >> 1;
      v31 = a1;
      v129 = &v12[v26 >> 1];
      v131 = a4;
      do
      {
        v132 = v29 >> 1;
        v133 = v31;
        v32 = &v31[v29 >> 1];
        v34 = *v32;
        v33 = v32 + 1;
        v35 = *v131;
        v36 = *(_QWORD *)(*v129 + 24);
        v37 = v29;
        sub_1C4768AD0(*v131, v36);
        v39 = (unint64_t)(v38 + 7) >> 3;
        llvm::DataLayout::getAlignment(v35, v36);
        v41 = ((1 << v40) + v39 - 1) & -(1 << v40);
        v42 = *v131;
        v43 = *(_QWORD *)(v34 + 24);
        sub_1C4768AD0(*v131, v43);
        v45 = (unint64_t)(v44 + 7) >> 3;
        llvm::DataLayout::getAlignment(v42, v43);
        v31 = v133;
        if (v41 < (((1 << v46) + v45 - 1) & -(1 << v46)))
        {
          v29 = v132;
        }
        else
        {
          v31 = v33;
          v29 = v37 + ~(v37 >> 1);
        }
      }
      while (v29);
      v29 = v31 - a1;
      v30 = a7;
      v25 = v128;
      v47 = v12;
      v28 = v129;
      v27 = v124;
    }
    if (v31 == v47)
    {
      v31 = v47;
      v67 = v28;
    }
    else if (v47 == v28)
    {
      v28 = v47;
      v67 = v31;
    }
    else
    {
      if (v31 + 1 != v47)
      {
        v64 = v29;
        if (v47 + 1 == v28)
        {
          v73 = *(v28 - 1);
          v67 = v31 + 1;
          a4 = v131;
          if (v28 - 1 != v31)
          {
            v74 = v31;
            memmove(v31 + 1, v31, (char *)(v28 - 1) - (char *)v31);
            v31 = v74;
          }
          *v31 = v73;
          v25 = v128;
        }
        else
        {
          v65 = v31;
          v66 = sub_1C4E85DF0(v31, v47, v28);
          v31 = v65;
          v67 = v66;
          a4 = v131;
        }
        v29 = v64;
        goto LABEL_46;
      }
      v68 = v27;
      v69 = *v31;
      v70 = (char *)v28 - (char *)v47;
      v71 = v29;
      v72 = v31;
      memmove(v31, v47, (char *)v28 - (char *)v47);
      v31 = v72;
      v29 = v71;
      v67 = (_QWORD *)((char *)v72 + v70);
      *v67 = v69;
      v27 = v68;
    }
    a4 = v131;
LABEL_46:
    a5 -= v29;
    v75 = v25 - v27;
    if ((uint64_t)(v27 + v29) >= (uint64_t)(v75 + a5))
    {
      v77 = v28;
      v78 = v29;
      v79 = v30;
      a8 = v125;
      v28 = v31;
      sub_1C50CAFB4(v67, v77, a3, a4, a5, v75, v79, v125);
      v75 = v27;
      a5 = v78;
      a3 = v67;
    }
    else
    {
      v76 = v30;
      a8 = v125;
      sub_1C50CAFB4(a1, v31, v67, a4, v29, v27, v76, v125);
      a1 = v67;
    }
    a2 = v28;
    v128 = v75;
    if (!v75)
      return;
  }
  if (a5 <= v128)
  {
    if (a1 != a2)
    {
      v102 = 0;
      do
      {
        a7[v102] = a1[v102];
        ++v102;
      }
      while (&a1[v102] != a2);
      if (v102 * 8)
      {
        v103 = a7;
        while (a2 != a3)
        {
          v104 = *v103;
          v105 = *a4;
          v106 = *(_QWORD *)(*a2 + 24);
          v107 = a2;
          sub_1C4768AD0(*a4, v106);
          v109 = a4;
          v110 = (unint64_t)(v108 + 7) >> 3;
          llvm::DataLayout::getAlignment(v105, v106);
          v112 = ((1 << v111) + v110 - 1) & -(1 << v111);
          v113 = *v109;
          v114 = *(_QWORD *)(v104 + 24);
          sub_1C4768AD0(*v109, v114);
          v116 = (unint64_t)(v115 + 7) >> 3;
          llvm::DataLayout::getAlignment(v113, v114);
          v118 = v112 >= (((1 << v117) + v116 - 1) & -(1 << v117));
          a4 = v109;
          v119 = !v118;
          v120 = v118;
          if (v118)
            v121 = v103;
          else
            v121 = v107;
          v103 += v120;
          a2 = &v107[v119];
          *a1++ = *v121;
          if (&a7[v102] == v103)
            return;
        }
        memmove(a1, v103, (char *)a7 - (char *)v103 + v102 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v80 = 0;
    do
    {
      a7[v80] = a2[v80];
      ++v80;
    }
    while (&a2[v80] != a3);
    if (v80 * 8)
    {
      v81 = &a7[v80];
      v82 = a3 - 1;
      while (a2 != a1)
      {
        v83 = a4;
        v84 = a2 - 1;
        v85 = *(a2 - 1);
        v86 = *v83;
        v87 = *(_QWORD *)(*(v81 - 1) + 24);
        v88 = a2;
        sub_1C4768AD0(*v83, v87);
        v90 = (unint64_t)(v89 + 7) >> 3;
        llvm::DataLayout::getAlignment(v86, v87);
        v92 = ((1 << v91) + v90 - 1) & -(1 << v91);
        v93 = *v83;
        v94 = *(_QWORD *)(v85 + 24);
        sub_1C4768AD0(*v83, v94);
        v96 = (unint64_t)(v95 + 7) >> 3;
        llvm::DataLayout::getAlignment(v93, v94);
        v98 = (1 << v97) + v96;
        a4 = v83;
        v99 = (v98 - 1) & -(1 << v97);
        v100 = v92 >= v99;
        if (v92 >= v99)
          v101 = v81;
        else
          v101 = v88;
        if (v100)
          a2 = v88;
        else
          a2 = v84;
        if (v100)
          --v81;
        *v82-- = *(v101 - 1);
        if (v81 == a7)
          return;
      }
      if (v81 != a7)
      {
        v123 = 0;
        do
        {
          v82[v123] = v81[v123 - 1];
          --v123;
        }
        while (&v81[v123] != a7);
      }
    }
  }
}

uint64_t *sub_1C50CB730(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C50CB808(a1, v7);
    v8 = 0;
    sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_1C50CB808(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = v13[1];
          *v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void sub_1C50CB930(uint64_t a1, void **a2, unint64_t a3, void **a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int8x8_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v17;
  int8x8_t **v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  void **v26;
  uint64_t v27;
  void **v28;
  int8x8_t *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int8x8_t *v33;
  int8x8_t v34;
  uint8x8_t v35;
  uint64_t v36;
  int v37;
  int8x8_t *v38;
  uint64_t v39;
  int8x8_t v40;
  uint8x8_t v41;
  int v42;
  unint64_t v43;
  _BYTE *v44;
  int8x8_t *v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  int8x8_t *v54;
  int8x8_t v55;
  uint8x8_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int8x8_t *v60;
  int8x8_t v61;
  uint8x8_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  void **v69;
  int8x8_t *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  int8x8_t *v74;
  int8x8_t v75;
  uint8x8_t v76;
  int8x8_t *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  int8x8_t *v81;
  int8x8_t v82;
  uint8x8_t v83;
  int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void **v92;
  void **v93;
  unint64_t v94;
  void *v95;
  void **v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  void *v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const void *v108;
  _DWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  void *v115;
  uint64_t v116;
  void **v117;
  unint64_t v118;
  void *v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  void **v123;
  void **v124;
  uint64_t v125;
  void *v126;
  unint64_t v127;
  _BYTE v128[48];
  int v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return;
  v6 = a1;
  if (a3 == 2)
  {
    v7 = (uint64_t)(a2 - 10);
    v8 = (int8x8_t *)*(a2 - 10);
    v9 = *((unsigned int *)a2 - 18);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 8 * v9;
      do
      {
        v12 = *v8++;
        v13 = (uint8x8_t)vcnt_s8(v12);
        v13.i16[0] = vaddlv_u8(v13);
        v10 += v13.i32[0];
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      v10 = 0;
    }
    v20 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = *(int8x8_t **)a1;
      v23 = 8 * v20;
      do
      {
        v24 = *v22++;
        v25 = (uint8x8_t)vcnt_s8(v24);
        v25.i16[0] = vaddlv_u8(v25);
        v21 += v25.i32[0];
        v23 -= 8;
      }
      while (v23);
    }
    else
    {
      v21 = 0;
    }
    if (*((_DWORD *)a2 - 2) * v10 < (*(_DWORD *)(a1 + 72) * v21))
      sub_1C50CC49C(a1, v7);
    return;
  }
  if ((uint64_t)a3 > 0)
  {
    v17 = a3 >> 1;
    v18 = (int8x8_t **)(a1 + 80 * (a3 >> 1));
    v19 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C50CB930(a1, v18, v19, a4, a5);
      sub_1C50CB930(v6 + 80 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
      sub_1C50CD498(v6, v6 + 80 * (a3 >> 1), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      return;
    }
    sub_1C50CC7B0(a1, v18, v19, (uint64_t)a4);
    v66 = (uint64_t)&a4[10 * v17];
    sub_1C50CC7B0(v6 + 80 * (a3 >> 1), (int8x8_t **)a2, a3 - (a3 >> 1), v66);
    v122 = a3;
    v123 = a4;
    v67 = &a4[10 * a3];
    v68 = v66;
    v69 = a4;
    while (1)
    {
      if ((void **)v68 == v67)
      {
        if (v69 == (void **)v66)
          goto LABEL_184;
        v91 = 0;
        v92 = v69;
        v125 = v66;
        while (2)
        {
          v93 = &v69[v91 / 8];
          v94 = v6 + v91;
          if ((void **)v6 != v69)
          {
            v95 = *v93;
            if (v93 + 2 == *v93)
            {
              v96 = &v69[v91 / 8 + 1];
              v97 = *(unsigned int *)v96;
              v98 = v6 + v91;
              v99 = *(unsigned int *)(v6 + v91 + 8);
              if (v99 >= v97)
              {
                if ((_DWORD)v97)
                  memmove(*(void **)v94, v95, 8 * v97);
                goto LABEL_149;
              }
              if (*(_DWORD *)(v98 + 12) < v97)
              {
                *(_DWORD *)(v98 + 8) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + v91, v6 + v91 + 16, v97, 8);
LABEL_155:
                v99 = 0;
              }
              else
              {
                if (!(_DWORD)v99)
                  goto LABEL_155;
                memmove(*(void **)v94, v95, 8 * v99);
              }
              v100 = *(unsigned int *)v96;
              if (v99 != v100)
                memcpy((void *)(*(_QWORD *)v94 + 8 * v99), (char *)*v93 + 8 * v99, (_BYTE *)*v93 + 8 * v100 - ((_BYTE *)*v93 + 8 * v99));
LABEL_149:
              *(_DWORD *)(v98 + 8) = v97;
            }
            else
            {
              v101 = (_QWORD *)(v6 + v91);
              v102 = *(void **)(v6 + v91);
              if ((void *)(v6 + v91 + 16) != v102)
              {
                free(v102);
                v95 = *v93;
              }
              *v101 = v95;
              v96 = v92 + 1;
              v103 = &v69[v91 / 8];
              v101[1] = v69[v91 / 8 + 1];
              *v103 = v93 + 2;
              *((_DWORD *)v103 + 3) = 0;
            }
            *(_DWORD *)v96 = 0;
            v66 = v125;
          }
          *(_DWORD *)(v94 + 64) = *((_DWORD *)v93 + 16);
          *(_DWORD *)(v94 + 72) = *((_DWORD *)v93 + 18);
          v92 += 10;
          v91 += 80;
          if (&v69[v91 / 8] == (void **)v66)
            goto LABEL_184;
          continue;
        }
      }
      v70 = *(int8x8_t **)v68;
      v71 = *(unsigned int *)(v68 + 8);
      v72 = 0;
      if ((_DWORD)v71)
      {
        v73 = 8 * v71;
        v74 = *(int8x8_t **)v68;
        do
        {
          v75 = *v74++;
          v76 = (uint8x8_t)vcnt_s8(v75);
          v76.i16[0] = vaddlv_u8(v76);
          v72 += v76.i32[0];
          v73 -= 8;
        }
        while (v73);
      }
      v77 = (int8x8_t *)*v69;
      v78 = *((unsigned int *)v69 + 2);
      v79 = 0;
      if ((_DWORD)v78)
      {
        v80 = 8 * v78;
        v81 = (int8x8_t *)*v69;
        do
        {
          v82 = *v81++;
          v83 = (uint8x8_t)vcnt_s8(v82);
          v83.i16[0] = vaddlv_u8(v83);
          v79 += v83.i32[0];
          v80 -= 8;
        }
        while (v80);
      }
      v84 = *(_DWORD *)(v68 + 72);
      v85 = v84 * v72;
      v86 = *((_DWORD *)v69 + 18);
      if (v85 >= v86 * v79)
      {
        if ((void **)v6 != v69)
        {
          if (v77 == (int8x8_t *)(v69 + 2))
          {
            v88 = *(unsigned int *)(v6 + 8);
            if (v88 >= v78)
            {
              if ((_DWORD)v78)
                memmove(*(void **)v6, *v69, 8 * v78);
              goto LABEL_117;
            }
            if (*(_DWORD *)(v6 + 12) < v78)
            {
              *(_DWORD *)(v6 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v78, 8);
LABEL_129:
              v88 = 0;
            }
            else
            {
              if (!(_DWORD)v88)
                goto LABEL_129;
              memmove(*(void **)v6, *v69, 8 * v88);
            }
            v90 = *((unsigned int *)v69 + 2);
            if (v88 != v90)
              memcpy((void *)(*(_QWORD *)v6 + 8 * v88), (char *)*v69 + 8 * v88, (_BYTE *)*v69 + 8 * v90 - ((_BYTE *)*v69 + 8 * v88));
LABEL_117:
            *(_DWORD *)(v6 + 8) = v78;
          }
          else
          {
            if (*(_QWORD *)v6 != v6 + 16)
            {
              free(*(void **)v6);
              v77 = (int8x8_t *)*v69;
              LODWORD(v78) = *((_DWORD *)v69 + 2);
            }
            *(_QWORD *)v6 = v77;
            *(_DWORD *)(v6 + 8) = v78;
            *(_DWORD *)(v6 + 12) = *((_DWORD *)v69 + 3);
            *v69 = v69 + 2;
            *((_DWORD *)v69 + 3) = 0;
          }
          *((_DWORD *)v69 + 2) = 0;
          v86 = *((_DWORD *)v69 + 18);
        }
        *(_DWORD *)(v6 + 64) = *((_DWORD *)v69 + 16);
        *(_DWORD *)(v6 + 72) = v86;
        v69 += 10;
        goto LABEL_120;
      }
      if (v6 != v68)
        break;
LABEL_111:
      *(_DWORD *)(v6 + 64) = *(_DWORD *)(v68 + 64);
      *(_DWORD *)(v6 + 72) = v84;
      v68 += 80;
LABEL_120:
      v6 += 80;
      if (v69 == (void **)v66)
      {
        if ((void **)v68 != v67)
        {
          v104 = 0;
          v105 = v68;
          v124 = v67;
          while (1)
          {
            v106 = v68 + v104;
            v107 = v6 + v104;
            if (v6 != v68)
              break;
LABEL_172:
            *(_DWORD *)(v107 + 64) = *(_DWORD *)(v106 + 64);
            *(_DWORD *)(v107 + 72) = *(_DWORD *)(v106 + 72);
            v105 += 80;
            v104 += 80;
            if ((void **)(v68 + v104) == v67)
              goto LABEL_184;
          }
          v108 = *(const void **)v106;
          if (v106 + 16 == *(_QWORD *)v106)
          {
            v109 = (_DWORD *)(v68 + v104 + 8);
            v110 = *v109;
            v111 = v6 + v104;
            v112 = *(unsigned int *)(v6 + v104 + 8);
            if (v112 >= v110)
            {
              if ((_DWORD)v110)
                memmove(*(void **)(v6 + v104), v108, 8 * v110);
              goto LABEL_170;
            }
            if (*(_DWORD *)(v111 + 12) < v110)
            {
              *(_DWORD *)(v111 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + v104, v6 + v104 + 16, v110, 8);
LABEL_176:
              v112 = 0;
            }
            else
            {
              if (!(_DWORD)v112)
                goto LABEL_176;
              memmove(*(void **)(v6 + v104), v108, 8 * v112);
            }
            v113 = *v109;
            if (v112 != v113)
              memcpy((void *)(*(_QWORD *)(v6 + v104) + 8 * v112), (const void *)(*(_QWORD *)v106 + 8 * v112), *(_QWORD *)v106 + 8 * v113 - (*(_QWORD *)v106 + 8 * v112));
LABEL_170:
            *(_DWORD *)(v111 + 8) = v110;
            v67 = v124;
          }
          else
          {
            v114 = (_QWORD *)(v6 + v104);
            v115 = *(void **)(v6 + v104);
            if ((void *)(v6 + v104 + 16) != v115)
            {
              free(v115);
              v108 = *(const void **)v106;
            }
            *v114 = v108;
            v109 = (_DWORD *)(v105 + 8);
            v116 = v68 + v104;
            v114[1] = *(_QWORD *)(v68 + v104 + 8);
            *(_QWORD *)v116 = v106 + 16;
            *(_DWORD *)(v116 + 12) = 0;
          }
          *v109 = 0;
          goto LABEL_172;
        }
LABEL_184:
        v117 = v123;
        if (v123)
        {
          v118 = v122;
          do
          {
            v121 = *v117;
            v120 = v117 + 2;
            v119 = v121;
            if (v121 != v120)
              free(v119);
            v117 = (void **)(v120 + 8);
            --v118;
          }
          while (v118);
        }
        return;
      }
    }
    if (v70 != (int8x8_t *)(v68 + 16))
    {
      if (*(_QWORD *)v6 != v6 + 16)
      {
        free(*(void **)v6);
        v70 = *(int8x8_t **)v68;
        LODWORD(v71) = *(_DWORD *)(v68 + 8);
      }
      *(_QWORD *)v6 = v70;
      *(_DWORD *)(v6 + 8) = v71;
      *(_DWORD *)(v6 + 12) = *(_DWORD *)(v68 + 12);
      *(_QWORD *)v68 = v68 + 16;
      *(_DWORD *)(v68 + 12) = 0;
      goto LABEL_110;
    }
    v87 = *(unsigned int *)(v6 + 8);
    if (v87 >= v71)
    {
      if ((_DWORD)v71)
        memmove(*(void **)v6, v70, 8 * v71);
LABEL_109:
      *(_DWORD *)(v6 + 8) = v71;
LABEL_110:
      *(_DWORD *)(v68 + 8) = 0;
      v84 = *(_DWORD *)(v68 + 72);
      goto LABEL_111;
    }
    if (*(_DWORD *)(v6 + 12) < v71)
    {
      *(_DWORD *)(v6 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v71, 8);
    }
    else if ((_DWORD)v87)
    {
      memmove(*(void **)v6, v70, 8 * v87);
LABEL_125:
      v89 = *(unsigned int *)(v68 + 8);
      if (v87 != v89)
        memcpy((void *)(*(_QWORD *)v6 + 8 * v87), (const void *)(*(_QWORD *)v68 + 8 * v87), *(_QWORD *)v68 + 8 * v89 - (*(_QWORD *)v68 + 8 * v87));
      goto LABEL_109;
    }
    v87 = 0;
    goto LABEL_125;
  }
  if ((void **)a1 == a2)
    return;
  v26 = (void **)(a1 + 80);
  if ((void **)(a1 + 80) == a2)
    return;
  v27 = a1;
  do
  {
    v28 = v26;
    v29 = (int8x8_t *)*v26;
    v30 = *(unsigned int *)(v27 + 88);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = 8 * v30;
      v33 = v29;
      do
      {
        v34 = *v33++;
        v35 = (uint8x8_t)vcnt_s8(v34);
        v35.i16[0] = vaddlv_u8(v35);
        v31 += v35.i32[0];
        v32 -= 8;
      }
      while (v32);
    }
    else
    {
      v31 = 0;
    }
    v36 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v36)
    {
      v37 = 0;
      v38 = *(int8x8_t **)v27;
      v39 = 8 * v36;
      do
      {
        v40 = *v38++;
        v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        v37 += v41.i32[0];
        v39 -= 8;
      }
      while (v39);
    }
    else
    {
      v37 = 0;
    }
    v42 = *(_DWORD *)(v27 + 152);
    if (v42 * v31 >= (*(_DWORD *)(v27 + 72) * v37))
      goto LABEL_77;
    v126 = v128;
    v127 = 0x600000000;
    if (&v126 == v28 || !(_DWORD)v30)
      goto LABEL_38;
    if (v29 != (int8x8_t *)(v27 + 96))
    {
      v126 = v29;
      v127 = __PAIR64__(*(_DWORD *)(v27 + 92), v30);
      *v28 = (void *)(v27 + 96);
      *(_DWORD *)(v27 + 92) = 0;
      goto LABEL_37;
    }
    if (v30 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v128, v30, 8);
      v43 = *(unsigned int *)(v27 + 88);
      if (!(_DWORD)v43)
        goto LABEL_36;
      v44 = v126;
    }
    else
    {
      v43 = v30;
      v44 = v128;
    }
    memcpy(v44, *v28, 8 * v43);
LABEL_36:
    LODWORD(v127) = v30;
    v42 = *(_DWORD *)(v27 + 152);
LABEL_37:
    *(_DWORD *)(v27 + 88) = 0;
LABEL_38:
    v129 = *(_DWORD *)(v27 + 144);
    v130 = v42;
    v45 = *(int8x8_t **)v27;
    v46 = (uint64_t)v28;
    while (1)
    {
      v47 = v27;
      v48 = (int8x8_t *)(v27 + 16);
      if (v45 == v48)
      {
        v49 = *(unsigned int *)(v47 + 8);
        v50 = *(unsigned int *)(v46 + 8);
        if (v50 >= v49)
        {
          if ((_DWORD)v49)
            memmove(*(void **)v46, v45, 8 * v49);
LABEL_43:
          *(_DWORD *)(v46 + 8) = v49;
          goto LABEL_44;
        }
        if (*(_DWORD *)(v46 + 12) < v49)
        {
          *(_DWORD *)(v46 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v46, v46 + 16, v49, 8);
        }
        else if ((_DWORD)v50)
        {
          memmove(*(void **)v46, v45, 8 * v50);
LABEL_60:
          v63 = *(unsigned int *)(v47 + 8);
          if (v50 != v63)
            memcpy((void *)(*(_QWORD *)v46 + 8 * v50), (const void *)(*(_QWORD *)v47 + 8 * v50), *(_QWORD *)v47 + 8 * v63 - (*(_QWORD *)v47 + 8 * v50));
          goto LABEL_43;
        }
        v50 = 0;
        goto LABEL_60;
      }
      if (*(_QWORD *)v46 != v46 + 16)
      {
        free(*(void **)v46);
        v45 = *(int8x8_t **)v47;
      }
      *(_QWORD *)v46 = v45;
      *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
      *(_QWORD *)v47 = v48;
      *(_DWORD *)(v47 + 12) = 0;
LABEL_44:
      *(_DWORD *)(v47 + 8) = 0;
      *(_DWORD *)(v46 + 64) = *(_DWORD *)(v47 + 64);
      *(_DWORD *)(v46 + 72) = *(_DWORD *)(v47 + 72);
      v51 = v126;
      if (v47 == v6)
        break;
      if ((_DWORD)v127)
      {
        v52 = 0;
        v53 = 8 * v127;
        v54 = (int8x8_t *)v126;
        do
        {
          v55 = *v54++;
          v56 = (uint8x8_t)vcnt_s8(v55);
          v56.i16[0] = vaddlv_u8(v56);
          v52 += v56.i32[0];
          v53 -= 8;
        }
        while (v53);
      }
      else
      {
        v52 = 0;
      }
      v45 = *(int8x8_t **)(v47 - 80);
      v57 = *(unsigned int *)(v47 - 72);
      if ((_DWORD)v57)
      {
        v58 = 0;
        v59 = 8 * v57;
        v60 = *(int8x8_t **)(v47 - 80);
        do
        {
          v61 = *v60++;
          v62 = (uint8x8_t)vcnt_s8(v61);
          v62.i16[0] = vaddlv_u8(v62);
          v58 += v62.i32[0];
          v59 -= 8;
        }
        while (v59);
      }
      else
      {
        v58 = 0;
      }
      v27 = v47 - 80;
      v46 = v47;
      if (v130 * v52 >= (*(_DWORD *)(v47 - 8) * v58))
        goto LABEL_68;
    }
    v47 = v6;
LABEL_68:
    if ((void **)v47 != &v126)
    {
      if (v126 == v128)
      {
        v64 = v127;
        v65 = *(unsigned int *)(v47 + 8);
        if (v65 >= v127)
        {
          if ((_DWORD)v127)
            memmove(*(void **)v47, v128, 8 * v127);
          goto LABEL_73;
        }
        if (*(_DWORD *)(v47 + 12) < v127)
        {
          *(_DWORD *)(v47 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v47, v47 + 16, v64, 8);
LABEL_81:
          v65 = 0;
        }
        else
        {
          if (!(_DWORD)v65)
            goto LABEL_81;
          memmove(*(void **)v47, v128, 8 * v65);
        }
        if (v65 != v127)
          memcpy((void *)(*(_QWORD *)v47 + 8 * v65), (char *)v126 + 8 * v65, 8 * v127 - 8 * v65);
LABEL_73:
        *(_DWORD *)(v47 + 8) = v64;
      }
      else
      {
        if (*(_QWORD *)v47 != v47 + 16)
        {
          free(*(void **)v47);
          v51 = v126;
        }
        *(_QWORD *)v47 = v51;
        *(_QWORD *)(v47 + 8) = v127;
        v126 = v128;
        HIDWORD(v127) = 0;
      }
      LODWORD(v127) = 0;
      v51 = v126;
    }
    *(_DWORD *)(v47 + 64) = v129;
    *(_DWORD *)(v47 + 72) = v130;
    if (v51 != v128)
      free(v51);
LABEL_77:
    v26 = v28 + 10;
    v27 = (uint64_t)v28;
  }
  while (v28 + 10 != a2);
}

void sub_1C50CC49C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  _BYTE *v6;
  unsigned int v7;
  int v8;
  const void *v9;
  unint64_t v10;
  _DWORD *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  _BYTE v19[48];
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x600000000;
  v4 = *(unsigned int *)(a1 + 8);
  if (&v17 != (void **)a1 && (_DWORD)v4)
  {
    v5 = *(const void **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
    {
      v17 = *(void **)a1;
      v18 = __PAIR64__(*(_DWORD *)(a1 + 12), v4);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_7;
    }
    v6 = v19;
    v7 = v4;
    if (v4 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v4, 8);
      v7 = *(_DWORD *)(a1 + 8);
      if (!v7)
        goto LABEL_6;
      v5 = *(const void **)a1;
      v6 = v17;
    }
    memcpy(v6, v5, 8 * v7);
LABEL_6:
    LODWORD(v18) = v4;
LABEL_7:
    LODWORD(v4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  v8 = *(_DWORD *)(a1 + 72);
  v20 = *(_DWORD *)(a1 + 64);
  v21 = v8;
  if (a1 == a2)
    goto LABEL_15;
  v9 = *(const void **)a2;
  if (*(_QWORD *)a2 != a2 + 16)
  {
    if (*(_QWORD *)a1 != a1 + 16)
    {
      free(*(void **)a1);
      v9 = *(const void **)a2;
    }
    *(_QWORD *)a1 = v9;
    v11 = (_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 12) = 0;
    goto LABEL_14;
  }
  v11 = (_DWORD *)(a2 + 8);
  v10 = *(unsigned int *)(a2 + 8);
  if (v4 < v10)
  {
    if (*(_DWORD *)(a1 + 12) < v10)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v10, 8);
    }
    else if ((_DWORD)v4)
    {
      v4 = v4;
      memmove(*(void **)a1, v9, 8 * v4);
LABEL_28:
      v16 = *v11;
      if (v4 != v16)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v4), (const void *)(*(_QWORD *)a2 + 8 * v4), *(_QWORD *)a2 + 8 * v16 - (*(_QWORD *)a2 + 8 * v4));
      goto LABEL_13;
    }
    v4 = 0;
    goto LABEL_28;
  }
  if ((_DWORD)v10)
    memmove(*(void **)a1, v9, 8 * v10);
LABEL_13:
  *(_DWORD *)(a1 + 8) = v10;
LABEL_14:
  *v11 = 0;
LABEL_15:
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v12 = v17;
  if (&v17 == (void **)a2)
    goto LABEL_22;
  if (v17 != v19)
  {
    if (*(_QWORD *)a2 != a2 + 16)
    {
      free(*(void **)a2);
      v12 = v17;
    }
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v18;
    v17 = v19;
    HIDWORD(v18) = 0;
    goto LABEL_21;
  }
  v13 = v18;
  v14 = *(unsigned int *)(a2 + 8);
  if (v14 < v18)
  {
    if (*(_DWORD *)(a2 + 12) < v18)
    {
      *(_DWORD *)(a2 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13, 8);
    }
    else if ((_DWORD)v14)
    {
      memmove(*(void **)a2, v19, 8 * v14);
LABEL_33:
      if (v14 != v18)
        memcpy((void *)(*(_QWORD *)a2 + 8 * v14), (char *)v17 + 8 * v14, 8 * v18 - 8 * v14);
      goto LABEL_20;
    }
    v14 = 0;
    goto LABEL_33;
  }
  if ((_DWORD)v18)
    memmove(*(void **)a2, v19, 8 * v18);
LABEL_20:
  *(_DWORD *)(a2 + 8) = v13;
LABEL_21:
  LODWORD(v18) = 0;
  v12 = v17;
LABEL_22:
  v15 = v21;
  *(_DWORD *)(a2 + 64) = v20;
  *(_DWORD *)(a2 + 72) = v15;
  if (v12 != v19)
    free(v12);
}

void sub_1C50CC7B0(uint64_t a1, int8x8_t **a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void **v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  _DWORD *v12;
  int8x8_t **v13;
  int8x8_t *v14;
  const void **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int8x8_t v19;
  uint8x8_t v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  int8x8_t **v25;
  uint64_t v26;
  int8x8_t **v27;
  uint64_t v28;
  int v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  int8x8_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int8x8_t *v38;
  int8x8_t v39;
  uint8x8_t v40;
  void **v41;
  int v42;
  unsigned int v43;
  int v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int8x8_t *v50;
  uint64_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  const void *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int8x8_t *v58;
  int8x8_t v59;
  uint8x8_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int8x8_t *v66;
  uint64_t v67;
  int8x8_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  void **v76;
  int8x8_t **v77;
  uint64_t v78;
  int v79;
  int8x8_t *v80;
  uint64_t v81;
  int8x8_t v82;
  uint8x8_t v83;
  uint64_t v84;
  int v85;
  int8x8_t *v86;
  uint64_t v87;
  int8x8_t v88;
  uint8x8_t v89;
  int v90;
  unsigned int v91;
  int v92;
  void *v93;
  unint64_t v94;
  int8x8_t *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int8x8_t *v104;
  uint64_t v105;
  int8x8_t v106;
  uint8x8_t v107;
  int v108;
  unsigned int v109;
  int v110;
  void *v111;
  unsigned int v112;
  int8x8_t **v113;
  int8x8_t *v114;
  unsigned int v115;
  int v116;
  void *v117;
  void **v118;
  unsigned int v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int v122;
  int8x8_t *v123;
  unsigned int v124;
  int v125;
  void *v126;
  unsigned int v127;
  int8x8_t **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  void *v133;
  unint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int8x8_t **v141;
  uint64_t v142;
  void *v143;
  unint64_t v144;
  uint64_t *v145;
  int8x8_t *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;

  if (!a3)
    return;
  v4 = a4;
  v7 = (void **)a1;
  if (a3 == 2)
  {
    v15 = (const void **)(a2 - 10);
    v14 = *(a2 - 10);
    v16 = *((unsigned int *)a2 - 18);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 8 * v16;
      do
      {
        v19 = *v14++;
        v20 = (uint8x8_t)vcnt_s8(v19);
        v20.i16[0] = vaddlv_u8(v20);
        v17 += v20.i32[0];
        v18 -= 8;
      }
      while (v18);
    }
    else
    {
      v17 = 0;
    }
    v102 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v102)
    {
      v103 = 0;
      v104 = *(int8x8_t **)a1;
      v105 = 8 * v102;
      do
      {
        v106 = *v104++;
        v107 = (uint8x8_t)vcnt_s8(v106);
        v107.i16[0] = vaddlv_u8(v107);
        v103 += v107.i32[0];
        v105 -= 8;
      }
      while (v105);
    }
    else
    {
      v103 = 0;
    }
    v108 = *((_DWORD *)a2 - 2);
    v109 = v108 * v17;
    v13 = (int8x8_t **)(a1 + 72);
    v110 = *(_DWORD *)(a1 + 72);
    v111 = (void *)(a4 + 16);
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x600000000;
    if (v109 < v110 * v103)
    {
      if (v15 == (const void **)a4 || (v112 = *((_DWORD *)a2 - 18)) == 0)
      {
LABEL_164:
        v116 = *((_DWORD *)a2 - 4);
        v117 = (void *)(v4 + 96);
        *(_QWORD *)(v4 + 80) = v4 + 96;
        v118 = (void **)(v4 + 80);
        *(_DWORD *)(v4 + 64) = v116;
        *(_DWORD *)(v4 + 72) = v108;
        *(_QWORD *)(v4 + 88) = 0x600000000;
        v119 = *((_DWORD *)v7 + 2);
        if (!v119 || v118 == v7)
          goto LABEL_172;
        v120 = v7 + 2;
        if (*v7 != v7 + 2)
        {
          *(_QWORD *)(v4 + 80) = *v7;
          v152 = *((_DWORD *)v7 + 3);
          *(_DWORD *)(v4 + 88) = v119;
          *(_DWORD *)(v4 + 92) = v152;
          *v7 = v120;
          *((_DWORD *)v7 + 3) = 0;
          goto LABEL_171;
        }
        if (v119 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, v4 + 96, *((unsigned int *)v7 + 2), 8);
          v121 = *((unsigned int *)v7 + 2);
          if (!(_DWORD)v121)
            goto LABEL_170;
          v120 = *v7;
          v117 = *v118;
        }
        else
        {
          v121 = *((unsigned int *)v7 + 2);
        }
        memcpy(v117, v120, 8 * v121);
LABEL_170:
        *(_DWORD *)(v4 + 88) = v119;
LABEL_171:
        *((_DWORD *)v7 + 2) = 0;
LABEL_172:
        *(_DWORD *)(v4 + 144) = *((_DWORD *)v7 + 16);
        v12 = (_DWORD *)(v4 + 152);
        goto LABEL_190;
      }
      v113 = (int8x8_t **)*(a2 - 10);
      v114 = (int8x8_t *)(a2 - 8);
      if (v113 != a2 - 8)
      {
        *(_QWORD *)a4 = v113;
        v151 = *((_DWORD *)a2 - 17);
        *(_DWORD *)(a4 + 8) = v112;
        *(_DWORD *)(a4 + 12) = v151;
        *(a2 - 10) = v114;
        *((_DWORD *)a2 - 17) = 0;
        goto LABEL_163;
      }
      if (v112 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, *((unsigned int *)a2 - 18), 8);
        v115 = *((_DWORD *)a2 - 18);
        if (!v115)
          goto LABEL_162;
        v114 = (int8x8_t *)*v15;
        v111 = *(void **)v4;
      }
      else
      {
        v115 = *((_DWORD *)a2 - 18);
      }
      memcpy(v111, v114, 8 * v115);
LABEL_162:
      *(_DWORD *)(v4 + 8) = v112;
      v108 = *((_DWORD *)a2 - 2);
LABEL_163:
      *((_DWORD *)a2 - 18) = 0;
      goto LABEL_164;
    }
    v122 = *(_DWORD *)(a1 + 8);
    if (!v122 || a1 == a4)
    {
LABEL_181:
      v125 = *((_DWORD *)v7 + 16);
      v126 = (void *)(v4 + 96);
      *(_QWORD *)(v4 + 80) = v4 + 96;
      *(_DWORD *)(v4 + 64) = v125;
      *(_DWORD *)(v4 + 72) = v110;
      *(_QWORD *)(v4 + 88) = 0x600000000;
      if ((const void **)(v4 + 80) == v15)
        goto LABEL_189;
      v127 = *((_DWORD *)a2 - 18);
      if (!v127)
        goto LABEL_189;
      v128 = (int8x8_t **)*(a2 - 10);
      if (v128 != a2 - 8)
      {
        *(_QWORD *)(v4 + 80) = v128;
        v154 = *((_DWORD *)a2 - 17);
        *(_DWORD *)(v4 + 88) = v127;
        *(_DWORD *)(v4 + 92) = v154;
        *(a2 - 10) = (int8x8_t *)(a2 - 8);
        *((_DWORD *)a2 - 17) = 0;
        goto LABEL_188;
      }
      if (v127 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 80, v4 + 96, *((unsigned int *)a2 - 18), 8);
        v129 = *((unsigned int *)a2 - 18);
        if (!(_DWORD)v129)
          goto LABEL_187;
        v128 = (int8x8_t **)*v15;
        v126 = *(void **)(v4 + 80);
      }
      else
      {
        v129 = *((unsigned int *)a2 - 18);
      }
      memcpy(v126, v128, 8 * v129);
LABEL_187:
      *(_DWORD *)(v4 + 88) = v127;
LABEL_188:
      *((_DWORD *)a2 - 18) = 0;
LABEL_189:
      *(_DWORD *)(v4 + 144) = *((_DWORD *)a2 - 4);
      v12 = (_DWORD *)(v4 + 152);
      v13 = a2 - 1;
      goto LABEL_190;
    }
    v123 = *(int8x8_t **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
    {
      *(_QWORD *)a4 = v123;
      v153 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a4 + 8) = v122;
      *(_DWORD *)(a4 + 12) = v153;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_180;
    }
    if (v122 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, *(unsigned int *)(a1 + 8), 8);
      v124 = *((_DWORD *)v7 + 2);
      if (!v124)
        goto LABEL_179;
      v123 = (int8x8_t *)*v7;
      v111 = *(void **)v4;
    }
    else
    {
      v124 = *(_DWORD *)(a1 + 8);
    }
    memcpy(v111, v123, 8 * v124);
LABEL_179:
    *(_DWORD *)(v4 + 8) = v122;
    v110 = *(_DWORD *)v13;
LABEL_180:
    *((_DWORD *)v7 + 2) = 0;
    goto LABEL_181;
  }
  if (a3 == 1)
  {
    v8 = (void *)(a4 + 16);
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0x600000000;
    v9 = *(_DWORD *)(a1 + 8);
    if (!v9 || a1 == a4)
      goto LABEL_12;
    v10 = (void *)(a1 + 16);
    if (*(_QWORD *)a1 != a1 + 16)
    {
      *(_QWORD *)a4 = *(_QWORD *)a1;
      v150 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 12) = v150;
      *(_QWORD *)a1 = v10;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_11;
    }
    if (v9 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, *(unsigned int *)(a1 + 8), 8);
      v11 = *((_DWORD *)v7 + 2);
      if (!v11)
        goto LABEL_10;
      v10 = *v7;
      v8 = *(void **)v4;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 8);
    }
    memcpy(v8, v10, 8 * v11);
LABEL_10:
    *(_DWORD *)(v4 + 8) = v9;
LABEL_11:
    *((_DWORD *)v7 + 2) = 0;
LABEL_12:
    *(_DWORD *)(v4 + 64) = *((_DWORD *)v7 + 16);
    v12 = (_DWORD *)(v4 + 72);
    v13 = (int8x8_t **)(v7 + 9);
LABEL_190:
    *v12 = *(_DWORD *)v13;
    return;
  }
  if ((uint64_t)a3 > 8)
  {
    v76 = (void **)(a1 + 80 * (a3 >> 1));
    sub_1C50CB930(a1, v76, a3 >> 1, a4, a3 >> 1);
    sub_1C50CB930(&v7[10 * (a3 >> 1)], a2, a3 - (a3 >> 1), v4 + 80 * (a3 >> 1), a3 - (a3 >> 1));
    v77 = (int8x8_t **)&v7[10 * (a3 >> 1)];
    while (v77 != a2)
    {
      v78 = *((unsigned int *)v77 + 2);
      if ((_DWORD)v78)
      {
        v79 = 0;
        v80 = *v77;
        v81 = 8 * v78;
        do
        {
          v82 = *v80++;
          v83 = (uint8x8_t)vcnt_s8(v82);
          v83.i16[0] = vaddlv_u8(v83);
          v79 += v83.i32[0];
          v81 -= 8;
        }
        while (v81);
      }
      else
      {
        v79 = 0;
      }
      v84 = *((unsigned int *)v7 + 2);
      if ((_DWORD)v84)
      {
        v85 = 0;
        v86 = (int8x8_t *)*v7;
        v87 = 8 * v84;
        do
        {
          v88 = *v86++;
          v89 = (uint8x8_t)vcnt_s8(v88);
          v89.i16[0] = vaddlv_u8(v89);
          v85 += v89.i32[0];
          v87 -= 8;
        }
        while (v87);
      }
      else
      {
        v85 = 0;
      }
      v90 = *((_DWORD *)v77 + 18);
      v91 = v90 * v79;
      v92 = *((_DWORD *)v7 + 18);
      v93 = (void *)(v4 + 16);
      *(_QWORD *)v4 = v4 + 16;
      *(_QWORD *)(v4 + 8) = 0x600000000;
      if (v91 >= v92 * v85)
      {
        v97 = *((unsigned int *)v7 + 2);
        if ((_DWORD)v97 && (void **)v4 != v7)
        {
          v98 = *v7;
          if (*v7 == v7 + 2)
          {
            if (v97 < 7)
            {
              v99 = *((unsigned int *)v7 + 2);
              goto LABEL_137;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, *((unsigned int *)v7 + 2), 8);
            v99 = *((unsigned int *)v7 + 2);
            if ((_DWORD)v99)
            {
              v98 = *v7;
              v93 = *(void **)v4;
LABEL_137:
              memcpy(v93, v98, 8 * v99);
            }
            *(_DWORD *)(v4 + 8) = v97;
            v92 = *((_DWORD *)v7 + 18);
          }
          else
          {
            *(_QWORD *)v4 = v98;
            v101 = *((_DWORD *)v7 + 3);
            *(_DWORD *)(v4 + 8) = v97;
            *(_DWORD *)(v4 + 12) = v101;
            *v7 = v7 + 2;
            *((_DWORD *)v7 + 3) = 0;
          }
          *((_DWORD *)v7 + 2) = 0;
        }
        *(_DWORD *)(v4 + 64) = *((_DWORD *)v7 + 16);
        *(_DWORD *)(v4 + 72) = v92;
        v7 += 10;
        goto LABEL_141;
      }
      v94 = *((unsigned int *)v77 + 2);
      if ((_DWORD)v94 && (int8x8_t **)v4 != v77)
      {
        v95 = *v77;
        if (*v77 == (int8x8_t *)(v77 + 2))
        {
          if (v94 < 7)
          {
            v96 = *((unsigned int *)v77 + 2);
            goto LABEL_128;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, *((unsigned int *)v77 + 2), 8);
          v96 = *((unsigned int *)v77 + 2);
          if ((_DWORD)v96)
          {
            v95 = *v77;
            v93 = *(void **)v4;
LABEL_128:
            memcpy(v93, v95, 8 * v96);
          }
          *(_DWORD *)(v4 + 8) = v94;
          v90 = *((_DWORD *)v77 + 18);
        }
        else
        {
          *(_QWORD *)v4 = v95;
          v100 = *((_DWORD *)v77 + 3);
          *(_DWORD *)(v4 + 8) = v94;
          *(_DWORD *)(v4 + 12) = v100;
          *v77 = (int8x8_t *)(v77 + 2);
          *((_DWORD *)v77 + 3) = 0;
        }
        *((_DWORD *)v77 + 2) = 0;
      }
      *(_DWORD *)(v4 + 64) = *((_DWORD *)v77 + 16);
      *(_DWORD *)(v4 + 72) = v90;
      v77 += 10;
LABEL_141:
      v4 += 80;
      if (v7 == v76)
      {
        if (v77 == a2)
          return;
        v140 = 0;
        while (2)
        {
          v141 = &v77[v140];
          v142 = v4 + v140 * 8;
          v143 = (void *)(v4 + v140 * 8 + 16);
          *(_QWORD *)v142 = v143;
          *(_QWORD *)(v142 + 8) = 0x600000000;
          if (v77 == (int8x8_t **)v4)
            goto LABEL_216;
          v144 = *((unsigned int *)v141 + 2);
          if (!*((_DWORD *)v141 + 2))
            goto LABEL_216;
          v145 = (uint64_t *)&v77[v140];
          v147 = (uint64_t)&v77[v140 + 2];
          v146 = v77[v140];
          if ((int8x8_t *)v147 == v146)
          {
            v148 = *((unsigned int *)v141 + 2);
            if (v144 < 7)
              goto LABEL_213;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v140 * 8, v4 + v140 * 8 + 16, *((unsigned int *)v141 + 2), 8);
            v148 = *((unsigned int *)v141 + 2);
            if ((_DWORD)v148)
            {
              v146 = *v141;
              v143 = *(void **)v142;
LABEL_213:
              memcpy(v143, v146, 8 * v148);
            }
            *(_DWORD *)(v142 + 8) = v144;
          }
          else
          {
            *(_QWORD *)(v4 + v140 * 8) = v146;
            v149 = *((_DWORD *)v145 + 3);
            *(_DWORD *)(v142 + 8) = v144;
            *(_DWORD *)(v142 + 12) = v149;
            *v145 = v147;
            *((_DWORD *)v145 + 3) = 0;
          }
          *((_DWORD *)v141 + 2) = 0;
LABEL_216:
          *(_DWORD *)(v142 + 64) = *((_DWORD *)v141 + 16);
          *(_DWORD *)(v142 + 72) = *((_DWORD *)v141 + 18);
          v140 += 10;
          if (&v77[v140] == a2)
            return;
          continue;
        }
      }
    }
    if (v7 == v76)
      return;
    v130 = 0;
    while (1)
    {
      v131 = v4 + v130 * 8;
      v132 = &v7[v130];
      v133 = (void *)(v4 + v130 * 8 + 16);
      *(_QWORD *)v131 = v133;
      *(_QWORD *)(v131 + 8) = 0x600000000;
      if (v7 == (void **)v4)
        goto LABEL_202;
      v134 = *((unsigned int *)v132 + 2);
      if (!*((_DWORD *)v132 + 2))
        goto LABEL_202;
      v135 = (uint64_t *)&v7[v130];
      v137 = (uint64_t)&v7[v130 + 2];
      v136 = v7[v130];
      if ((_QWORD *)v137 != v136)
      {
        *(_QWORD *)v131 = v136;
        v139 = *((_DWORD *)v135 + 3);
        *(_DWORD *)(v131 + 8) = v134;
        *(_DWORD *)(v131 + 12) = v139;
        *v135 = v137;
        *((_DWORD *)v135 + 3) = 0;
        goto LABEL_201;
      }
      if (v134 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + v130 * 8, v4 + v130 * 8 + 16, *((unsigned int *)v132 + 2), 8);
        v138 = *((unsigned int *)v132 + 2);
        if (!(_DWORD)v138)
          goto LABEL_200;
        v136 = *v132;
        v133 = *(void **)v131;
      }
      else
      {
        v138 = *((unsigned int *)v132 + 2);
      }
      memcpy(v133, v136, 8 * v138);
LABEL_200:
      *(_DWORD *)(v131 + 8) = v134;
LABEL_201:
      *((_DWORD *)v132 + 2) = 0;
LABEL_202:
      *(_DWORD *)(v131 + 64) = *((_DWORD *)v132 + 16);
      *(_DWORD *)(v131 + 72) = *((_DWORD *)v132 + 18);
      v130 += 10;
      if (&v7[v130] == v76)
        return;
    }
  }
  if ((int8x8_t **)a1 == a2)
    return;
  v21 = (void *)(a4 + 16);
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 8) = 0x600000000;
  v22 = *(_DWORD *)(a1 + 8);
  if (!v22 || a1 == a4)
    goto LABEL_27;
  v23 = (void *)(a1 + 16);
  if (*(_QWORD *)a1 != a1 + 16)
  {
    *(_QWORD *)a4 = *(_QWORD *)a1;
    v155 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a4 + 8) = v22;
    *(_DWORD *)(a4 + 12) = v155;
    *(_QWORD *)a1 = v23;
    *(_DWORD *)(a1 + 12) = 0;
    goto LABEL_26;
  }
  if (v22 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, *(unsigned int *)(a1 + 8), 8);
    v24 = *((_DWORD *)v7 + 2);
    if (!v24)
      goto LABEL_25;
    v23 = *v7;
    v21 = *(void **)v4;
  }
  else
  {
    v24 = *(_DWORD *)(a1 + 8);
  }
  memcpy(v21, v23, 8 * v24);
LABEL_25:
  *(_DWORD *)(v4 + 8) = v22;
LABEL_26:
  *((_DWORD *)v7 + 2) = 0;
LABEL_27:
  *(_DWORD *)(v4 + 64) = *((_DWORD *)v7 + 16);
  *(_DWORD *)(v4 + 72) = *((_DWORD *)v7 + 18);
  v25 = (int8x8_t **)(v7 + 10);
  if (v7 + 10 == (void **)a2)
    return;
  v26 = v4;
  do
  {
    v27 = v25;
    v28 = *((unsigned int *)v7 + 22);
    if ((_DWORD)v28)
    {
      v29 = 0;
      v30 = *v27;
      v31 = 8 * v28;
      do
      {
        v32 = *v30++;
        v33 = (uint8x8_t)vcnt_s8(v32);
        v33.i16[0] = vaddlv_u8(v33);
        v29 += v33.i32[0];
        v31 -= 8;
      }
      while (v31);
    }
    else
    {
      v29 = 0;
    }
    v34 = *(int8x8_t **)v26;
    v35 = *(unsigned int *)(v26 + 8);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = 8 * v35;
      v38 = *(int8x8_t **)v26;
      do
      {
        v39 = *v38++;
        v40 = (uint8x8_t)vcnt_s8(v39);
        v40.i16[0] = vaddlv_u8(v40);
        v36 += v40.i32[0];
        v37 -= 8;
      }
      while (v37);
    }
    else
    {
      v36 = 0;
    }
    v41 = (void **)(v26 + 80);
    v42 = *((_DWORD *)v7 + 38);
    v43 = v42 * v29;
    v44 = *(_DWORD *)(v26 + 72);
    v45 = (void *)(v26 + 96);
    *(_QWORD *)(v26 + 80) = v26 + 96;
    *(_QWORD *)(v26 + 88) = 0x600000000;
    if (v43 >= v44 * v36)
    {
      v65 = *((_DWORD *)v7 + 22);
      if (!v65 || (void **)v26 == v7)
        goto LABEL_82;
      v66 = *v27;
      if (*v27 != (int8x8_t *)(v7 + 12))
      {
        *(_QWORD *)(v26 + 80) = v66;
        v74 = *((_DWORD *)v7 + 23);
        *(_DWORD *)(v26 + 88) = v65;
        *(_DWORD *)(v26 + 92) = v74;
        *v27 = (int8x8_t *)(v7 + 12);
        *((_DWORD *)v7 + 23) = 0;
        goto LABEL_81;
      }
      if (v65 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v26 + 80, v26 + 96, *((unsigned int *)v7 + 22), 8);
        v67 = *((unsigned int *)v7 + 22);
        if (!(_DWORD)v67)
          goto LABEL_80;
        v66 = *v27;
        v45 = *v41;
      }
      else
      {
        v67 = *((unsigned int *)v7 + 22);
      }
      memcpy(v45, v66, 8 * v67);
LABEL_80:
      *(_DWORD *)(v26 + 88) = v65;
      v42 = *((_DWORD *)v7 + 38);
LABEL_81:
      *((_DWORD *)v7 + 22) = 0;
LABEL_82:
      *(_DWORD *)(v26 + 144) = *((_DWORD *)v7 + 36);
      *(_DWORD *)(v26 + 152) = v42;
      goto LABEL_92;
    }
    if (!(_DWORD)v35)
      goto LABEL_47;
    if (v34 != (int8x8_t *)(v26 + 16))
    {
      *(_QWORD *)(v26 + 80) = v34;
      v73 = *(_DWORD *)(v26 + 12);
      *(_DWORD *)(v26 + 88) = v35;
      *(_DWORD *)(v26 + 92) = v73;
      *(_QWORD *)v26 = v26 + 16;
      *(_DWORD *)(v26 + 12) = 0;
      goto LABEL_46;
    }
    if (v35 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v26 + 80, v26 + 96, v35, 8);
      v46 = *(unsigned int *)(v26 + 8);
      if (!*(_DWORD *)(v26 + 8))
        goto LABEL_45;
    }
    else
    {
      v46 = v35;
    }
    memcpy(*(void **)(v26 + 80), *(const void **)v26, 8 * v46);
LABEL_45:
    *(_DWORD *)(v26 + 88) = v35;
    v44 = *(_DWORD *)(v26 + 72);
LABEL_46:
    *(_DWORD *)(v26 + 8) = 0;
LABEL_47:
    *(_DWORD *)(v26 + 144) = *(_DWORD *)(v26 + 64);
    *(_DWORD *)(v26 + 152) = v44;
    v47 = v4;
    if (v26 == v4)
      goto LABEL_84;
    while (1)
    {
      v48 = *((unsigned int *)v7 + 22);
      if ((_DWORD)v48)
      {
        v49 = 0;
        v50 = *v27;
        v51 = 8 * v48;
        do
        {
          v52 = *v50++;
          v53 = (uint8x8_t)vcnt_s8(v52);
          v53.i16[0] = vaddlv_u8(v53);
          v49 += v53.i32[0];
          v51 -= 8;
        }
        while (v51);
      }
      else
      {
        v49 = 0;
      }
      v54 = *(const void **)(v26 - 80);
      v55 = *(unsigned int *)(v26 - 72);
      v56 = 0;
      if ((_DWORD)v55)
      {
        v57 = 8 * v55;
        v58 = *(int8x8_t **)(v26 - 80);
        do
        {
          v59 = *v58++;
          v60 = (uint8x8_t)vcnt_s8(v59);
          v60.i16[0] = vaddlv_u8(v60);
          v56 += v60.i32[0];
          v57 -= 8;
        }
        while (v57);
      }
      if (*((_DWORD *)v7 + 38) * v49 >= (*(_DWORD *)(v26 - 8) * v56))
        break;
      if (v54 != (const void *)(v26 - 64))
      {
        if (*(_QWORD *)v26 != v26 + 16)
        {
          free(*(void **)v26);
          v54 = *(const void **)(v26 - 80);
          LODWORD(v55) = *(_DWORD *)(v26 - 72);
        }
        *(_QWORD *)v26 = v54;
        v64 = *(_DWORD *)(v26 - 68);
        *(_DWORD *)(v26 + 8) = v55;
        *(_DWORD *)(v26 + 12) = v64;
        *(_QWORD *)(v26 - 80) = v26 - 64;
        *(_DWORD *)(v26 - 68) = 0;
        goto LABEL_62;
      }
      v61 = *(unsigned int *)(v26 + 8);
      if (v61 < v55)
      {
        if (*(_DWORD *)(v26 + 12) < v55)
        {
          *(_DWORD *)(v26 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v26, v26 + 16, v55, 8);
LABEL_66:
          v61 = 0;
        }
        else
        {
          if (!(_DWORD)v61)
            goto LABEL_66;
          memmove(*(void **)v26, v54, 8 * v61);
        }
        v63 = *(unsigned int *)(v26 - 72);
        if (v61 != v63)
          memcpy((void *)(*(_QWORD *)v26 + 8 * v61), (const void *)(*(_QWORD *)(v26 - 80) + 8 * v61), 8 * v63 - 8 * v61);
        goto LABEL_61;
      }
      if ((_DWORD)v55)
        memmove(*(void **)v26, v54, 8 * v55);
LABEL_61:
      *(_DWORD *)(v26 + 8) = v55;
LABEL_62:
      *(_DWORD *)(v26 - 72) = 0;
      v62 = *(_DWORD *)(v26 - 8);
      *(_DWORD *)(v26 + 64) = *(_DWORD *)(v26 - 16);
      *(_DWORD *)(v26 + 72) = v62;
      v26 -= 80;
      if (v26 == v4)
      {
        v47 = v4;
        goto LABEL_84;
      }
    }
    v47 = v26;
LABEL_84:
    if ((int8x8_t **)v47 != v27)
    {
      v68 = *v27;
      if (*v27 == (int8x8_t *)(v7 + 12))
      {
        v69 = *((unsigned int *)v7 + 22);
        v70 = *(unsigned int *)(v47 + 8);
        if (v70 >= v69)
        {
          if ((_DWORD)v69)
            memmove(*(void **)v47, v7 + 12, 8 * v69);
          goto LABEL_89;
        }
        if (*(_DWORD *)(v47 + 12) < v69)
        {
          *(_DWORD *)(v47 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v47, v47 + 16, v69, 8);
LABEL_96:
          v71 = 0;
        }
        else
        {
          if (!(_DWORD)v70)
            goto LABEL_96;
          v75 = *(unsigned int *)(v47 + 8);
          memmove(*(void **)v47, v7 + 12, 8 * v70);
          v71 = v75;
        }
        v72 = *((unsigned int *)v7 + 22);
        if (v71 != v72)
          memcpy((void *)(*(_QWORD *)v47 + 8 * v71), &(*v27)[v71], (char *)&(*v27)[v72] - (char *)&(*v27)[v71]);
LABEL_89:
        *(_DWORD *)(v47 + 8) = v69;
      }
      else
      {
        if (*(_QWORD *)v47 != v47 + 16)
        {
          free(*(void **)v47);
          v68 = *v27;
        }
        *(_QWORD *)v47 = v68;
        *(_QWORD *)(v47 + 8) = v7[11];
        *v27 = (int8x8_t *)(v7 + 12);
        *((_DWORD *)v7 + 23) = 0;
      }
      *((_DWORD *)v7 + 22) = 0;
    }
    *(_DWORD *)(v47 + 64) = *((_DWORD *)v7 + 36);
    *(_DWORD *)(v47 + 72) = *((_DWORD *)v7 + 38);
LABEL_92:
    v25 = v27 + 10;
    v26 = (uint64_t)v41;
    v7 = (void **)v27;
  }
  while (v27 + 10 != a2);
}

void sub_1C50CD498(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint8x8_t v19;
  uint64_t v20;
  int v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int8x8_t *v35;
  int8x8_t v36;
  uint8x8_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int8x8_t *v42;
  uint64_t v43;
  int8x8_t v44;
  uint8x8_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int8x8_t *v56;
  uint64_t v57;
  int8x8_t v58;
  uint8x8_t v59;
  int v60;
  uint64_t v61;
  int8x8_t *v62;
  int8x8_t v63;
  uint8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  void **v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  void **v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  void **v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void **v99;
  void **v100;
  void **v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int8x8_t *v105;
  int8x8_t v106;
  uint8x8_t v107;
  void *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  int8x8_t *v112;
  int8x8_t v113;
  uint8x8_t v114;
  unsigned int v115;
  int v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void **v123;
  int v124;
  void **v125;
  int v126;
  void **v127;
  void **v128;
  void **v129;
  int8x8_t *v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  int8x8_t *v134;
  int8x8_t v135;
  uint8x8_t v136;
  int8x8_t *v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  int8x8_t *v141;
  int8x8_t v142;
  uint8x8_t v143;
  int v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  void **v154;
  void **v155;
  void **v156;
  void **v157;
  void **v158;
  unint64_t v159;
  void **v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void **v165;
  void **v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  void **v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  void *v176;
  _QWORD *v177;
  void *v178;
  void **v179;
  void *v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void **i;
  uint64_t v187;
  uint64_t v188;
  void **v189;
  void **v190;
  void **v191;

  if (!a5)
    return;
  v9 = a5;
  while (a4 > a7 && v9 > a7)
  {
    if (!a4)
      return;
    v14 = *(unsigned int *)(a2 + 8);
    while (1)
    {
      v15 = 0;
      if ((_DWORD)v14)
      {
        v16 = 8 * v14;
        v17 = *(int8x8_t **)a2;
        do
        {
          v18 = *v17++;
          v19 = (uint8x8_t)vcnt_s8(v18);
          v19.i16[0] = vaddlv_u8(v19);
          v15 += v19.i32[0];
          v16 -= 8;
        }
        while (v16);
      }
      v20 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = *(int8x8_t **)a1;
        v23 = 8 * v20;
        do
        {
          v24 = *v22++;
          v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          v21 += v25.i32[0];
          v23 -= 8;
        }
        while (v23);
      }
      else
      {
        v21 = 0;
      }
      if (v15 * *(_DWORD *)(a2 + 72) < (*(_DWORD *)(a1 + 72) * v21))
        break;
      a1 += 80;
      if (!--a4)
        return;
    }
    v187 = a7;
    v189 = a6;
    if (a4 >= v9)
    {
      if (a4 == 1)
      {
        sub_1C50CC49C(a1, a2);
        return;
      }
      if (a4 >= 0)
        v49 = a4;
      else
        v49 = a4 + 1;
      v47 = v49 >> 1;
      v30 = a1 + 80 * (v49 >> 1);
      v48 = a2;
      v28 = (uint64_t)a3;
      if (a3 != (void **)a2)
      {
        v50 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a3 - a2) >> 4);
        v51 = *(unsigned int *)(v30 + 8);
        v28 = a2;
        do
        {
          v52 = v50 >> 1;
          v53 = v28 + 80 * (v50 >> 1);
          v54 = *(unsigned int *)(v53 + 8);
          if ((_DWORD)v54)
          {
            v55 = 0;
            v56 = *(int8x8_t **)v53;
            v57 = 8 * v54;
            do
            {
              v58 = *v56++;
              v59 = (uint8x8_t)vcnt_s8(v58);
              v59.i16[0] = vaddlv_u8(v59);
              v55 += v59.i32[0];
              v57 -= 8;
            }
            while (v57);
          }
          else
          {
            v55 = 0;
          }
          v60 = 0;
          if ((_DWORD)v51)
          {
            v61 = 8 * v51;
            v62 = *(int8x8_t **)v30;
            do
            {
              v63 = *v62++;
              v64 = (uint8x8_t)vcnt_s8(v63);
              v64.i16[0] = vaddlv_u8(v64);
              v60 += v64.i32[0];
              v61 -= 8;
            }
            while (v61);
          }
          v65 = v53 + 80;
          v50 += ~v52;
          if (*(_DWORD *)(v28 + 80 * v52 + 72) * v55 < (v60 * *(_DWORD *)(a1 + 80 * v47 + 72)))
            v28 = v65;
          else
            v50 = v52;
        }
        while (v50);
        v48 = v28;
      }
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((v48 - a2) >> 4);
      v29 = a1 + 80 * (v49 >> 1);
    }
    else
    {
      if (v9 >= 0)
        v26 = v9;
      else
        v26 = v9 + 1;
      v27 = v26 >> 1;
      v28 = a2 + 80 * (v26 >> 1);
      v29 = a2;
      v30 = a1;
      if (a2 != a1)
      {
        v31 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 4);
        v32 = *(unsigned int *)(v28 + 8);
        v30 = a1;
        do
        {
          v33 = 0;
          if ((_DWORD)v32)
          {
            v34 = 8 * v32;
            v35 = *(int8x8_t **)v28;
            do
            {
              v36 = *v35++;
              v37 = (uint8x8_t)vcnt_s8(v36);
              v37.i16[0] = vaddlv_u8(v37);
              v33 += v37.i32[0];
              v34 -= 8;
            }
            while (v34);
          }
          v38 = v31 >> 1;
          v39 = v30 + 80 * (v31 >> 1);
          v40 = *(unsigned int *)(v39 + 8);
          if ((_DWORD)v40)
          {
            v41 = 0;
            v42 = *(int8x8_t **)v39;
            v43 = 8 * v40;
            do
            {
              v44 = *v42++;
              v45 = (uint8x8_t)vcnt_s8(v44);
              v45.i16[0] = vaddlv_u8(v45);
              v41 += v45.i32[0];
              v43 -= 8;
            }
            while (v43);
          }
          else
          {
            v41 = 0;
          }
          v46 = v39 + 80;
          v31 += ~v38;
          if (v33 * *(_DWORD *)(a2 + 80 * v27 + 72) < (*(_DWORD *)(v30 + 80 * v38 + 72) * v41))
            v31 = v38;
          else
            v30 = v46;
        }
        while (v31);
        v29 = v30;
      }
      v47 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - a1) >> 4);
      v48 = a2 + 80 * (v26 >> 1);
    }
    v66 = v48;
    if (v30 != a2)
    {
      v66 = v29;
      if (v28 != a2)
      {
        v183 = v9;
        v184 = v27;
        v185 = v47;
        sub_1C50CC49C(v30, a2);
        v66 = v30 + 80;
        v67 = a2 + 80;
        for (i = a3; v67 != v28; v67 += 80)
        {
          if (v66 == a2)
            a2 = v67;
          sub_1C50CC49C(v66, v67);
          v66 += 80;
        }
        if (v66 != a2)
        {
          v68 = v66;
          v69 = a2;
          do
          {
            while (1)
            {
              sub_1C50CC49C(v68, a2);
              v68 += 80;
              a2 += 80;
              if (a2 == v28)
                break;
              if (v68 == v69)
                v69 = a2;
            }
            a2 = v69;
          }
          while (v68 != v69);
        }
        v47 = v185;
        a3 = i;
        v9 = v183;
        v27 = v184;
      }
    }
    a4 -= v47;
    v70 = v9 - v27;
    if (v47 + v27 >= a4 + v70)
    {
      v73 = a3;
      v74 = v47;
      v75 = v27;
      a7 = v187;
      a6 = v189;
      sub_1C50CD498(v66, v48, v73, a4, v70, v189, v187);
      v48 = v29;
      v9 = v75;
      a4 = v74;
      a3 = (void **)v66;
    }
    else
    {
      v71 = a1;
      a7 = v187;
      a6 = v189;
      v72 = v70;
      sub_1C50CD498(v71, v29, v66, v47, v27, v189, v187);
      v9 = v72;
      a1 = v66;
    }
    a2 = v48;
    if (!v9)
      return;
  }
  if (a4 <= v9)
  {
    if (a1 == a2)
      return;
    v88 = a3;
    v89 = 0;
    v78 = 0;
    while (1)
    {
      v90 = &a6[v89];
      v91 = a1 + v89 * 8;
      v92 = &a6[v89 + 2];
      *v90 = v92;
      v90[1] = (void *)0x600000000;
      if ((void **)a1 == a6)
        goto LABEL_104;
      v93 = *(unsigned int *)(v91 + 8);
      if (!*(_DWORD *)(v91 + 8))
        goto LABEL_104;
      v94 = a1 + v89 * 8;
      v96 = a1 + v89 * 8 + 16;
      v95 = *(void **)(a1 + v89 * 8);
      if ((void *)v96 != v95)
      {
        *v90 = v95;
        v98 = *(_DWORD *)(v94 + 12);
        *((_DWORD *)v90 + 2) = v93;
        *((_DWORD *)v90 + 3) = v98;
        *(_QWORD *)v94 = v96;
        *(_DWORD *)(v94 + 12) = 0;
        goto LABEL_103;
      }
      if (v93 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a6[v89], (uint64_t)&a6[v89 + 2], *(unsigned int *)(v91 + 8), 8);
        v97 = *(unsigned int *)(v91 + 8);
        if (!(_DWORD)v97)
          goto LABEL_102;
        v95 = *(void **)v91;
        v92 = (void **)*v90;
      }
      else
      {
        v97 = *(unsigned int *)(v91 + 8);
      }
      memcpy(v92, v95, 8 * v97);
LABEL_102:
      *((_DWORD *)v90 + 2) = v93;
LABEL_103:
      *(_DWORD *)(v91 + 8) = 0;
LABEL_104:
      *((_DWORD *)v90 + 16) = *(_DWORD *)(v91 + 64);
      *((_DWORD *)v90 + 18) = *(_DWORD *)(v91 + 72);
      ++v78;
      v89 += 10;
      if (a1 + v89 * 8 == a2)
      {
        if (!(v89 * 8))
          goto LABEL_251;
        v127 = &a6[v89];
        v188 = (uint64_t)&a6[v89 - 10];
        v128 = a6;
        v129 = v88;
        while (2)
        {
          if ((void **)a2 == v129)
          {
            if (v127 == v128)
              goto LABEL_251;
            v164 = 0;
            v165 = v128;
            v191 = a6;
            while (2)
            {
              v166 = &v128[v164 / 8];
              v167 = a1 + v164;
              if (v128 != (void **)a1)
              {
                v168 = *v166;
                if (v166 + 2 == *v166)
                {
                  v170 = &v128[v164 / 8 + 1];
                  v169 = *(unsigned int *)v170;
                  v171 = a1 + v164;
                  v172 = *(unsigned int *)(a1 + v164 + 8);
                  if (v172 >= v169)
                  {
                    if ((_DWORD)v169)
                    {
                      v173 = a1 + v164;
                      memmove(*(void **)v167, v168, 8 * v169);
                      goto LABEL_236;
                    }
                    goto LABEL_237;
                  }
                  if (*(_DWORD *)(v171 + 12) < v169)
                  {
                    *(_DWORD *)(v171 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + v164, a1 + v164 + 16, v169, 8);
                    v167 = a1 + v164;
LABEL_243:
                    v172 = 0;
                  }
                  else
                  {
                    if (!(_DWORD)v172)
                      goto LABEL_243;
                    memmove(*(void **)v167, v168, 8 * v172);
                    v167 = a1 + v164;
                  }
                  v174 = *(unsigned int *)v170;
                  if (v172 != v174)
                  {
                    v175 = (char *)*v166 + 8 * v172;
                    v176 = (void *)(*(_QWORD *)v167 + 8 * v172);
                    v173 = v167;
                    memcpy(v176, v175, (_BYTE *)*v166 + 8 * v174 - v175);
LABEL_236:
                    v167 = v173;
                  }
LABEL_237:
                  *(_DWORD *)(v171 + 8) = v169;
                }
                else
                {
                  v177 = (_QWORD *)(a1 + v164);
                  v178 = *(void **)(a1 + v164);
                  if ((void *)(a1 + v164 + 16) != v178)
                  {
                    free(v178);
                    v167 = a1 + v164;
                    v168 = *v166;
                  }
                  *v177 = v168;
                  v170 = v165 + 1;
                  v179 = &v128[v164 / 8];
                  v177[1] = v128[v164 / 8 + 1];
                  *v179 = v166 + 2;
                  *((_DWORD *)v179 + 3) = 0;
                }
                *(_DWORD *)v170 = 0;
                a6 = v191;
              }
              *(_DWORD *)(v167 + 64) = *((_DWORD *)v166 + 16);
              *(_DWORD *)(v167 + 72) = *((_DWORD *)v166 + 18);
              v165 += 10;
              v164 += 80;
              if ((void **)v188 == &v128[v164 / 8 - 10])
                goto LABEL_251;
              continue;
            }
          }
          v130 = *(int8x8_t **)a2;
          v131 = *(unsigned int *)(a2 + 8);
          v132 = 0;
          if ((_DWORD)v131)
          {
            v133 = 8 * v131;
            v134 = *(int8x8_t **)a2;
            do
            {
              v135 = *v134++;
              v136 = (uint8x8_t)vcnt_s8(v135);
              v136.i16[0] = vaddlv_u8(v136);
              v132 += v136.i32[0];
              v133 -= 8;
            }
            while (v133);
          }
          v137 = (int8x8_t *)*v128;
          v138 = *((unsigned int *)v128 + 2);
          v139 = 0;
          if ((_DWORD)v138)
          {
            v140 = 8 * v138;
            v141 = (int8x8_t *)*v128;
            do
            {
              v142 = *v141++;
              v143 = (uint8x8_t)vcnt_s8(v142);
              v143.i16[0] = vaddlv_u8(v143);
              v139 += v143.i32[0];
              v140 -= 8;
            }
            while (v140);
          }
          v144 = *(_DWORD *)(a2 + 72);
          v145 = v144 * v132;
          v146 = *((_DWORD *)v128 + 18);
          if (v145 < v146 * v139)
          {
            if (a1 != a2)
            {
              if (v130 == (int8x8_t *)(a2 + 16))
              {
                v147 = *(unsigned int *)(a1 + 8);
                if (v147 >= v131)
                {
                  if ((_DWORD)v131)
                    memmove(*(void **)a1, v130, 8 * v131);
                  goto LABEL_173;
                }
                if (*(_DWORD *)(a1 + 12) < v131)
                {
                  *(_DWORD *)(a1 + 8) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v131, 8);
LABEL_188:
                  v147 = 0;
                }
                else
                {
                  if (!(_DWORD)v147)
                    goto LABEL_188;
                  memmove(*(void **)a1, v130, 8 * v147);
                }
                v149 = *(unsigned int *)(a2 + 8);
                if (v147 != v149)
                  memcpy((void *)(*(_QWORD *)a1 + 8 * v147), (const void *)(*(_QWORD *)a2 + 8 * v147), *(_QWORD *)a2 + 8 * v149 - (*(_QWORD *)a2 + 8 * v147));
LABEL_173:
                *(_DWORD *)(a1 + 8) = v131;
              }
              else
              {
                if (*(_QWORD *)a1 != a1 + 16)
                {
                  free(*(void **)a1);
                  v130 = *(int8x8_t **)a2;
                  LODWORD(v131) = *(_DWORD *)(a2 + 8);
                }
                *(_QWORD *)a1 = v130;
                v151 = *(_DWORD *)(a2 + 12);
                *(_DWORD *)(a1 + 8) = v131;
                *(_DWORD *)(a1 + 12) = v151;
                *(_QWORD *)a2 = a2 + 16;
                *(_DWORD *)(a2 + 12) = 0;
              }
              *(_DWORD *)(a2 + 8) = 0;
              v144 = *(_DWORD *)(a2 + 72);
            }
            v129 = v88;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
            *(_DWORD *)(a1 + 72) = v144;
            a2 += 80;
LABEL_184:
            a1 += 80;
            if (v127 == v128)
              goto LABEL_251;
            continue;
          }
          break;
        }
        if ((void **)a1 == v128)
        {
          v129 = v88;
        }
        else
        {
          if (v137 == (int8x8_t *)(v128 + 2))
          {
            v148 = *(unsigned int *)(a1 + 8);
            if (v148 >= v138)
            {
              if ((_DWORD)v138)
                memmove(*(void **)a1, *v128, 8 * v138);
              goto LABEL_181;
            }
            if (*(_DWORD *)(a1 + 12) < v138)
            {
              *(_DWORD *)(a1 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v138, 8);
LABEL_193:
              v148 = 0;
            }
            else
            {
              if (!(_DWORD)v148)
                goto LABEL_193;
              memmove(*(void **)a1, *v128, 8 * v148);
            }
            v150 = *((unsigned int *)v128 + 2);
            if (v148 != v150)
              memcpy((void *)(*(_QWORD *)a1 + 8 * v148), (char *)*v128 + 8 * v148, (_BYTE *)*v128 + 8 * v150 - ((_BYTE *)*v128 + 8 * v148));
LABEL_181:
            *(_DWORD *)(a1 + 8) = v138;
          }
          else
          {
            if (*(_QWORD *)a1 != a1 + 16)
            {
              free(*(void **)a1);
              v137 = (int8x8_t *)*v128;
              LODWORD(v138) = *((_DWORD *)v128 + 2);
            }
            *(_QWORD *)a1 = v137;
            v152 = *((_DWORD *)v128 + 3);
            *(_DWORD *)(a1 + 8) = v138;
            *(_DWORD *)(a1 + 12) = v152;
            *v128 = v128 + 2;
            *((_DWORD *)v128 + 3) = 0;
          }
          v129 = v88;
          *((_DWORD *)v128 + 2) = 0;
          v146 = *((_DWORD *)v128 + 18);
        }
        *(_DWORD *)(a1 + 64) = *((_DWORD *)v128 + 16);
        *(_DWORD *)(a1 + 72) = v146;
        v128 += 10;
        goto LABEL_184;
      }
    }
  }
  if (a3 == (void **)a2)
    return;
  v76 = a3;
  v77 = 0;
  v78 = 0;
  do
  {
    v79 = &a6[v77];
    v80 = a2 + v77 * 8;
    v81 = &a6[v77 + 2];
    *v79 = v81;
    v79[1] = (void *)0x600000000;
    if ((void **)a2 != a6)
    {
      v82 = *(unsigned int *)(v80 + 8);
      if (*(_DWORD *)(v80 + 8))
      {
        v83 = a2 + v77 * 8;
        v85 = a2 + v77 * 8 + 16;
        v84 = *(void **)(a2 + v77 * 8);
        if ((void *)v85 != v84)
        {
          *v79 = v84;
          v87 = *(_DWORD *)(v83 + 12);
          *((_DWORD *)v79 + 2) = v82;
          *((_DWORD *)v79 + 3) = v87;
          *(_QWORD *)v83 = v85;
          *(_DWORD *)(v83 + 12) = 0;
          goto LABEL_88;
        }
        if (v82 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a6[v77], (uint64_t)&a6[v77 + 2], *(unsigned int *)(v80 + 8), 8);
          v86 = *(unsigned int *)(v80 + 8);
          if (!(_DWORD)v86)
            goto LABEL_87;
          v84 = *(void **)v80;
          v81 = (void **)*v79;
        }
        else
        {
          v86 = *(unsigned int *)(v80 + 8);
        }
        memcpy(v81, v84, 8 * v86);
LABEL_87:
        *((_DWORD *)v79 + 2) = v82;
LABEL_88:
        *(_DWORD *)(v80 + 8) = 0;
      }
    }
    *((_DWORD *)v79 + 16) = *(_DWORD *)(v80 + 64);
    *((_DWORD *)v79 + 18) = *(_DWORD *)(v80 + 72);
    ++v78;
    v77 += 10;
  }
  while ((void **)(a2 + v77 * 8) != v76);
  if (v77 * 8)
  {
    v99 = &a6[v77];
    while (1)
    {
      v100 = v76;
      if (a2 == a1)
        break;
      v101 = (void **)*(v99 - 10);
      v102 = *((unsigned int *)v99 - 18);
      v103 = 0;
      if ((_DWORD)v102)
      {
        v104 = 8 * v102;
        v105 = (int8x8_t *)*(v99 - 10);
        do
        {
          v106 = *v105++;
          v107 = (uint8x8_t)vcnt_s8(v106);
          v107.i16[0] = vaddlv_u8(v107);
          v103 += v107.i32[0];
          v104 -= 8;
        }
        while (v104);
      }
      v108 = *(void **)(a2 - 80);
      v109 = *(unsigned int *)(a2 - 72);
      v110 = 0;
      if ((_DWORD)v109)
      {
        v111 = 8 * v109;
        v112 = *(int8x8_t **)(a2 - 80);
        do
        {
          v113 = *v112++;
          v114 = (uint8x8_t)vcnt_s8(v113);
          v114.i16[0] = vaddlv_u8(v114);
          v110 += v114.i32[0];
          v111 -= 8;
        }
        while (v111);
      }
      v115 = *((_DWORD *)v99 - 2) * v103;
      v116 = *(_DWORD *)(a2 - 8);
      v76 -= 10;
      if (v115 >= v116 * v110)
      {
        if (v100 == v99)
        {
          v119 = (uint64_t)v99;
          v116 = *((_DWORD *)v99 - 2);
          v117 = (_QWORD *)a2;
          v99 -= 10;
          goto LABEL_134;
        }
        if (v101 == v99 - 8)
        {
          v120 = *((unsigned int *)v100 - 18);
          if (v120 >= v102)
          {
            if ((_DWORD)v102)
              memmove(*v76, v101, 8 * v102);
            goto LABEL_131;
          }
          if (*((_DWORD *)v100 - 17) < v102)
          {
            *((_DWORD *)v100 - 18) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v100 - 10), (uint64_t)(v100 - 8), v102, 8);
LABEL_143:
            v120 = 0;
          }
          else
          {
            if (!(_DWORD)v120)
              goto LABEL_143;
            memmove(*v76, v101, 8 * v120);
          }
          v122 = *((unsigned int *)v99 - 18);
          if (v120 != v122)
            memcpy((char *)*v76 + 8 * v120, (char *)*(v99 - 10) + 8 * v120, (_BYTE *)*(v99 - 10) + 8 * v122 - ((_BYTE *)*(v99 - 10) + 8 * v120));
LABEL_131:
          *((_DWORD *)v100 - 18) = v102;
        }
        else
        {
          v125 = (void **)*(v100 - 10);
          if (v125 != v100 - 8)
          {
            free(v125);
            v101 = (void **)*(v99 - 10);
            LODWORD(v102) = *((_DWORD *)v99 - 18);
          }
          *(v100 - 10) = v101;
          v126 = *((_DWORD *)v99 - 17);
          *((_DWORD *)v100 - 18) = v102;
          *((_DWORD *)v100 - 17) = v126;
          *(v99 - 10) = v99 - 8;
          *((_DWORD *)v99 - 17) = 0;
        }
        v119 = (uint64_t)v99;
        v117 = (_QWORD *)a2;
        v99 -= 10;
        goto LABEL_133;
      }
      v117 = (_QWORD *)(a2 - 80);
      if (v100 == (void **)a2)
      {
        v119 = a2;
        goto LABEL_134;
      }
      if (v108 != (void *)(a2 - 64))
      {
        v123 = (void **)*(v100 - 10);
        if (v123 != v100 - 8)
        {
          free(v123);
          v108 = *(void **)(a2 - 80);
          LODWORD(v109) = *(_DWORD *)(a2 - 72);
        }
        *(v100 - 10) = v108;
        v124 = *(_DWORD *)(a2 - 68);
        *((_DWORD *)v100 - 18) = v109;
        *((_DWORD *)v100 - 17) = v124;
        *(_QWORD *)(a2 - 80) = a2 - 64;
        *(_DWORD *)(a2 - 68) = 0;
        goto LABEL_125;
      }
      v118 = *((unsigned int *)v100 - 18);
      if (v118 < v109)
      {
        if (*((_DWORD *)v100 - 17) < v109)
        {
          *((_DWORD *)v100 - 18) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v100 - 10), (uint64_t)(v100 - 8), v109, 8);
LABEL_138:
          v118 = 0;
        }
        else
        {
          if (!(_DWORD)v118)
            goto LABEL_138;
          memmove(*v76, *(const void **)(a2 - 80), 8 * v118);
        }
        v121 = *(unsigned int *)(a2 - 72);
        if (v118 != v121)
          memcpy((char *)*v76 + 8 * v118, (const void *)(*v117 + 8 * v118), *v117 + 8 * v121 - (*v117 + 8 * v118));
        goto LABEL_124;
      }
      if ((_DWORD)v109)
        memmove(*v76, *(const void **)(a2 - 80), 8 * v109);
LABEL_124:
      *((_DWORD *)v100 - 18) = v109;
LABEL_125:
      v119 = a2;
LABEL_133:
      *(_DWORD *)(v119 - 72) = 0;
      v116 = *(_DWORD *)(v119 - 8);
LABEL_134:
      *((_DWORD *)v100 - 4) = *(_DWORD *)(v119 - 16);
      *((_DWORD *)v100 - 2) = v116;
      a2 = (uint64_t)v117;
      if (v99 == a6)
        goto LABEL_251;
    }
    if (v99 != a6)
    {
      v153 = 0;
      v154 = v99;
      v190 = a6;
      while (1)
      {
        v155 = &v99[v153];
        v156 = &v100[v153];
        if (v100 != v99)
          break;
LABEL_217:
        *((_DWORD *)v156 - 4) = *((_DWORD *)v155 - 4);
        *((_DWORD *)v156 - 2) = *((_DWORD *)v155 - 2);
        v153 -= 10;
        v154 = v155 - 10;
        if (v155 - 10 == a6)
          goto LABEL_251;
      }
      v157 = v156 - 10;
      v158 = (void **)*(v155 - 10);
      if (v155 - 8 == v158)
      {
        v160 = &v99[v153 - 9];
        v159 = *(unsigned int *)v160;
        v161 = &v100[v153];
        v162 = LODWORD(v100[v153 - 9]);
        if (v162 >= v159)
        {
          if ((_DWORD)v159)
            memmove(*v157, v158, 8 * v159);
          goto LABEL_215;
        }
        if (*((_DWORD *)v161 - 17) < v159)
        {
          *((_DWORD *)v161 - 18) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v156 - 10), (uint64_t)&v100[v153 - 8], v159, 8);
          v157 = v156 - 10;
LABEL_221:
          v162 = 0;
        }
        else
        {
          if (!(_DWORD)v162)
            goto LABEL_221;
          memmove(*v157, v158, 8 * v162);
          v157 = v156 - 10;
        }
        v163 = *(unsigned int *)v160;
        if (v162 != v163)
          memcpy((char *)*v157 + 8 * v162, (char *)*(v155 - 10) + 8 * v162, 8 * v163 - 8 * v162);
LABEL_215:
        *((_DWORD *)v161 - 18) = v159;
      }
      else
      {
        if (&v100[v153 - 8] != *v157)
        {
          free(*v157);
          v157 = v156 - 10;
          v158 = (void **)*(v155 - 10);
        }
        *v157 = v158;
        v160 = v154 - 9;
        v100[v153 - 9] = v99[v153 - 9];
        *(v155 - 10) = v155 - 8;
        *((_DWORD *)&v99[v153 - 8] - 1) = 0;
      }
      *(_DWORD *)v160 = 0;
      a6 = v190;
      goto LABEL_217;
    }
  }
LABEL_251:
  if (a6 && v78)
  {
    do
    {
      v182 = *a6;
      v181 = a6 + 2;
      v180 = v182;
      if (v182 != v181)
        free(v180);
      a6 = (void **)(v181 + 8);
      --v78;
    }
    while (v78);
  }
}

void sub_1C50CE324(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;

  if (a2)
  {
    v7 = -1;
    v8 = xmmword_1C85F6FF0;
    v5 = -2;
    v6 = xmmword_1C85FAB10;
    v2 = 168 * a2;
    v3 = (_QWORD *)(a1 + 40);
    do
    {
      if ((sub_1C50C947C((uint64_t)(v3 - 5), (uint64_t)&v7) & 1) == 0
        && (sub_1C50C947C((uint64_t)(v3 - 5), (uint64_t)&v5) & 1) == 0)
      {
        v4 = (_QWORD *)*(v3 - 2);
        if (v3 != v4)
          free(v4);
      }
      v3 += 21;
      v2 -= 168;
    }
    while (v2);
  }
}

uint64_t sub_1C50CE3C4()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  char *v4;
  __n128 v5;
  int v6;

  v6 = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the global merge pass";
  v5.n128_u64[1] = 28;
  v3 = 1;
  v4 = &v3;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F7CB8, "enable-global-merge", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7CB8, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1ED7F7D78, 0, 0);
  dword_1ED7F7DF8 = 0;
  qword_1ED7F7E00 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7F7E08 = 0;
  qword_1ED7F7D78 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7F7E10 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7F7E18[0] = &off_1E7F95260;
  qword_1ED7F7E30 = (uint64_t)qword_1ED7F7E18;
  llvm::cl::Option::setArgStr(v0, "global-merge-max-offset", 0x17uLL);
  word_1ED7F7D82 = word_1ED7F7D82 & 0xFF9F | 0x20;
  qword_1ED7F7D98 = (uint64_t)"Set maximum offset for global merge pass";
  unk_1ED7F7DA0 = 40;
  dword_1ED7F7DF8 = 0;
  byte_1ED7F7E0C = 1;
  dword_1ED7F7E08 = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F7D78);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F7D78, &dword_1C475E000);
  v6 = 1;
  v5.n128_u64[0] = (unint64_t)"Improve global merge pass to look at uses";
  v5.n128_u64[1] = 41;
  v3 = 1;
  v4 = &v3;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F7E38, "global-merge-group-by-use", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7E38, &dword_1C475E000);
  v6 = 1;
  v5.n128_u64[0] = (unint64_t)"Improve global merge pass to ignore globals only used alone";
  v5.n128_u64[1] = 59;
  v3 = 1;
  v4 = &v3;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F7EF8, "global-merge-ignore-single-use", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7EF8, &dword_1C475E000);
  v6 = 1;
  v5.n128_u64[0] = (unint64_t)"Enable global merge pass on constants";
  v5.n128_u64[1] = 37;
  v3 = 0;
  v4 = &v3;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7F7FB8, "global-merge-on-const", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F7FB8, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&qword_1ED7F8078, 0, 0);
  dword_1ED7F80F8 = 0;
  qword_1ED7F8108 = 0;
  qword_1ED7F8100 = (uint64_t)&unk_1E819E900;
  qword_1ED7F8078 = (uint64_t)&unk_1E8140060;
  qword_1ED7F8110 = (uint64_t)&unk_1E819E920;
  qword_1ED7F8118 = (uint64_t)&unk_1E81400C8;
  qword_1ED7F8130 = (uint64_t)&qword_1ED7F8118;
  llvm::cl::Option::setArgStr(v1, "global-merge-on-external", 0x18uLL);
  word_1ED7F8082 = word_1ED7F8082 & 0xFF9F | 0x20;
  qword_1ED7F8098 = (uint64_t)"Enable global merge pass on external linkage";
  qword_1ED7F80A0 = 44;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F8078);
  return __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED7F8078, &dword_1C475E000);
}

uint64_t sub_1C50CE6A8(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Hardware Loop Insertion";
  *(_QWORD *)(v4 + 8) = 23;
  *(_QWORD *)(v4 + 16) = "hardware-loops";
  *(_QWORD *)(v4 + 24) = 14;
  *(_QWORD *)(v4 + 32) = &unk_1ED7F8138;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C50CE838;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C50CE754(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F8138;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8142AF0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F8140);
  if (v3 != -1)
  {
    v7[0] = sub_1C50CE6A8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F8140, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50CE838()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50CE754(v0);
}

void sub_1C50CE864(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50CE888(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
}

BOOL sub_1C50CE948(uint64_t a1, const llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char **v7;
  char *v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t AnalysisPass;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void *v32;
  llvm::AssumptionCacheTracker *v33;
  uint64_t v34;
  llvm::Loop **v35;
  llvm::Loop **v36;
  void *v37;
  void **v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  int v43;
  uint64_t v44[2];
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *__src;
  unsigned int v51;
  _QWORD v52[2];
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) != 0)
    return 0;
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::ScalarEvolutionWrapperPass::ID);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::TargetTransformInfoWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v49 = 0;
  __src = 0;
  v51 = 0;
  v52[0] = 0;
  v52[1] = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v16 = *(_QWORD *)(v15 + 56);
  if (!v16)
  {
    sub_1C485C2F0();
    goto LABEL_57;
  }
  v2 = v52;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v16 + 48))(v42, v16, a2);
  v3 = (uint64_t *)(v15 + 64);
  v17 = v42[0];
  if (!*(_BYTE *)(v15 + 72))
  {
    *(_QWORD *)(v15 + 64) = v42[0];
    *(_BYTE *)(v15 + 72) = 1;
    goto LABEL_15;
  }
  v42[0] = 0;
  v18 = *v3;
  *v3 = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v42[0];
    v42[0] = 0;
    if (v19)
LABEL_57:
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
LABEL_15:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(&v49);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5) + 272;
  v20 = **(void ****)(a1 + 8);
  do
  {
    v21 = *v20;
    v20 += 2;
  }
  while (v21 != &llvm::OptimizationRemarkEmitterWrapperPass::ID);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::OptimizationRemarkEmitterWrapperPass::ID)+ 32);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::TargetLibraryInfoWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v23 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::TargetLibraryInfoWrapperPass::ID);
    if (v23)
    {
      v24 = v23;
      v42[0] = 0;
      v42[1] = 0;
      v43 = 0;
      v44[0] = 0;
      v44[1] = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      llvm::TargetLibraryAnalysis::run(v23 + 32, (uint64_t)a2, (uint64_t)&v49);
      *(_QWORD *)(v24 + 240) = v49;
      v25 = (uint64_t *)(v24 + 240);
      if (*(_BYTE *)(v24 + 320))
      {
        if (v25 == &v49)
        {
LABEL_33:
          *(_DWORD *)(v24 + 312) = v57;
LABEL_34:
          if (__src != v52)
            free(__src);
          MEMORY[0x1CAA32FB4](0, 8);
          sub_1C4D8B440(v44);
          sub_1C4D8B52C(v42);
          goto LABEL_37;
        }
        v26 = (void **)(v24 + 248);
        v27 = v51;
        v28 = *(unsigned int *)(v24 + 256);
        if (v28 >= v51)
        {
          if (v51)
            memmove(*v26, __src, 8 * v51);
          goto LABEL_32;
        }
        if (*(_DWORD *)(v24 + 260) < v51)
        {
          *(_DWORD *)(v24 + 256) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 248, v24 + 264, v27, 8);
        }
        else if ((_DWORD)v28)
        {
          v41 = *(unsigned int *)(v24 + 256);
          memmove(*v26, __src, 8 * v28);
          v29 = v41;
          goto LABEL_30;
        }
        v29 = 0;
LABEL_30:
        if (v29 != v51)
          memcpy((char *)*v26 + 8 * v29, (char *)__src + 8 * v29, 8 * v51 - 8 * v29);
LABEL_32:
        *(_DWORD *)(v24 + 256) = v27;
        goto LABEL_33;
      }
      v37 = (void *)(v24 + 264);
      *(_QWORD *)(v24 + 248) = v24 + 264;
      v38 = (void **)(v24 + 248);
      *(_QWORD *)(v24 + 256) = 0x600000000;
      v39 = v51;
      if (!v51 || v38 == &__src)
      {
LABEL_55:
        *(_DWORD *)(v24 + 312) = v57;
        *(_BYTE *)(v24 + 320) = 1;
        goto LABEL_34;
      }
      if (v51 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v24 + 248, v24 + 264, v51, 8);
        v40 = v51;
        if (!v51)
        {
LABEL_54:
          *(_DWORD *)(v24 + 256) = v39;
          goto LABEL_55;
        }
        v37 = *v38;
      }
      else
      {
        v40 = v51;
      }
      memcpy(v37, __src, 8 * v40);
      goto LABEL_54;
    }
  }
  v25 = 0;
LABEL_37:
  *(_QWORD *)(a1 + 96) = v25;
  v30 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 80) = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(v30 + 24), &unk_1EF8F7648, 1) != 0;
  v31 = *(void ***)v30;
  do
  {
    v32 = *v31;
    v31 += 2;
  }
  while (v32 != &llvm::AssumptionCacheTracker::ID);
  v33 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v31 - 1) + 96))(*(v31 - 1), &llvm::AssumptionCacheTracker::ID);
  *(_QWORD *)(a1 + 88) = llvm::AssumptionCacheTracker::getAssumptionCache(v33, a2);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 5);
  v34 = *(_QWORD *)(a1 + 40);
  v35 = *(llvm::Loop ***)(v34 + 24);
  v36 = *(llvm::Loop ***)(v34 + 32);
  while (v35 != v36)
  {
    if (!*(_QWORD *)*v35)
      sub_1C50CEE4C(a1, *v35);
    ++v35;
  }
  return *(_BYTE *)(a1 + 112) != 0;
}

BOOL sub_1C50CEE4C(uint64_t a1, llvm::Loop *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _BOOL8 result;
  const llvm::APInt *v9;
  _QWORD *v10;
  _QWORD *v11;
  llvm::OptimizationRemarkEmitter *v12;
  const char *v13;
  const char *v14;
  llvm::ConstantInt *v15;
  unsigned int v16;
  int v17;
  llvm::ValueHandleBase *v18;
  char v19;
  char v20;
  _QWORD *v21;
  _DWORD *v22;
  int v23;
  llvm *v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  unsigned int v28;

  v4 = (uint64_t *)*((_QWORD *)a2 + 1);
  v5 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 |= sub_1C50CEE4C(a1, v7);
    }
    while (v4 != v5);
    if ((v6 & 1) != 0)
    {
      sub_1C50CF150("nested hardware-loops not supported", 35, (uint64_t)"HWLoopNested", 12, *(llvm::OptimizationRemarkEmitter **)(a1 + 56), a2);
      return 1;
    }
  }
  v24 = a2;
  v25 = 0u;
  memset(v26, 0, 27);
  if ((llvm::HardwareLoopInfo::canAnalyze((llvm::HardwareLoopInfo *)&v24, *(llvm::LoopInfo **)(a1 + 40)) & 1) == 0)
  {
    v12 = *(llvm::OptimizationRemarkEmitter **)(a1 + 56);
    v13 = "cannot analyze loop, irreducible control flow";
    v14 = "HWLoopCannotAnalyze";
LABEL_15:
    sub_1C50CF150(v13, 45, (uint64_t)v14, 19, v12, a2);
    return 0;
  }
  if (!byte_1ED7F81C8
    && ((*(uint64_t (**)(_QWORD, llvm::Loop *, _QWORD, _QWORD, _QWORD, llvm **))(***(_QWORD ***)(a1 + 64)
                                                                                         + 200))(**(_QWORD **)(a1 + 64), a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), &v24) & 1) == 0)
  {
    v12 = *(llvm::OptimizationRemarkEmitter **)(a1 + 56);
    v13 = "it's not profitable to create a hardware-loop";
    v14 = "HWLoopNotProfitable";
    goto LABEL_15;
  }
  if (word_1ED7F8450)
  {
    v10 = **(_QWORD ***)(a1 + 104);
    LODWORD(v27) = dword_1ED7F84C8;
    if (dword_1ED7F84C8 <= 63)
    {
      if (dword_1ED7F84C8 <= 31)
      {
        switch(dword_1ED7F84C8)
        {
          case 16:
            v11 = (_QWORD *)(*v10 + 1936);
            goto LABEL_22;
          case 8:
            v11 = (_QWORD *)(*v10 + 1912);
            goto LABEL_22;
          case 1:
            v11 = (_QWORD *)(*v10 + 1888);
            goto LABEL_22;
        }
      }
      else if (dword_1ED7F84C8 == 32)
      {
        v11 = (_QWORD *)(*v10 + 1960);
        goto LABEL_22;
      }
    }
    else
    {
      if (dword_1ED7F84C8 == 64)
      {
        v11 = (_QWORD *)(*v10 + 1984);
LABEL_22:
        *((_QWORD *)&v26[0] + 1) = v11;
        goto LABEL_23;
      }
      if (dword_1ED7F84C8 == 128)
      {
        v11 = (_QWORD *)(*v10 + 2008);
        goto LABEL_22;
      }
    }
    v21 = v10;
    v22 = sub_1C5270984(*v10 + 2168, &v27);
    v11 = (_QWORD *)*((_QWORD *)v22 + 1);
    if (!v11)
    {
      v11 = (_QWORD *)sub_1C484358C(*v21 + 2040, 24, 3);
      v23 = v27;
      *v11 = v21;
      v11[2] = 0;
      v11[1] = (v23 << 8) | 0xDu;
      *((_QWORD *)v22 + 1) = v11;
    }
    goto LABEL_22;
  }
LABEL_23:
  if (word_1ED7F8390)
  {
    v15 = (llvm::ConstantInt *)**((_QWORD **)&v26[0] + 1);
    v16 = *(_DWORD *)(*((_QWORD *)&v26[0] + 1) + 8);
    v28 = v16 >> 8;
    if (v16 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, dword_1ED7F8408, 0);
    }
    else
    {
      if (v16 <= 0xFF)
        v17 = 0;
      else
        v17 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v16);
      v27 = v17 & dword_1ED7F8408;
    }
    v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v27, v9);
    if (v28 >= 0x41 && v27)
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    *(_QWORD *)&v26[1] = v18;
  }
  v19 = sub_1C50CF334(a1, &v24);
  result = 0;
  v20 = *(_BYTE *)(a1 + 112) | v19;
  *(_BYTE *)(a1 + 112) = v20;
  if (v20)
  {
    if (!BYTE8(v26[1]))
      return byte_1ED7F8348 == 0;
  }
  return result;
}

void sub_1C50CF150(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::OptimizationRemarkEmitter *a5, llvm::Loop *this)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void **v18;
  unsigned __int8 *v19;
  const char *v20;
  uint64_t v21;
  uint64_t (**v22)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[260];
  int v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = **((_QWORD **)this + 4);
  llvm::Loop::getStartLoc(this, &v19);
  v12 = (int)v19;
  if (v19)
  {
    v13 = *(_QWORD *)&v19[-8 * *((unsigned int *)v19 + 2)];
    if (*(_BYTE *)v13 != 15)
      v13 = *(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8));
    v14 = *((_DWORD *)v19 + 1);
    v12 = *((unsigned __int16 *)v19 + 1);
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = *(_QWORD *)(v11 + 56);
  v23 = 11;
  v24 = 2;
  v25 = v15;
  v26 = v13;
  v27 = v14;
  v28 = v12;
  v29 = "hardware-loops";
  v30 = a3;
  v31 = a4;
  v32 = 0;
  v33 = 0;
  v34 = v36;
  v35 = 0x400000000;
  v36[256] = 0;
  v37 = -1;
  v38 = v11;
  v22 = &off_1E814E570;
  v20 = "hardware-loop not created: ";
  v21 = 27;
  sub_1C53B17B4((uint64_t)&v34, (const void **)&v20);
  if (v19)
    llvm::MetadataTracking::untrack((uint64_t)&v19, v19);
  v20 = a1;
  v21 = a2;
  sub_1C53B17B4((uint64_t)&v34, (const void **)&v20);
  llvm::OptimizationRemarkEmitter::emit(a5, (llvm::DiagnosticInfoOptimizationBase *)&v22);
  v22 = &off_1E814E790;
  v16 = (char *)v34;
  if ((_DWORD)v35)
  {
    v17 = (unint64_t)v35 << 6;
    do
    {
      v18 = (void **)&v16[v17];
      if (v16[v17 - 17] < 0)
        operator delete(*(v18 - 5));
      if (*((char *)v18 - 41) < 0)
        operator delete(*(v18 - 8));
      v17 -= 64;
    }
    while (v17);
    v16 = (char *)v34;
  }
  if (v16 != v36)
    free(v16);
}

uint64_t sub_1C50CF334(uint64_t a1, llvm **this)
{
  llvm *v4;
  uint64_t LoopPredecessor;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  llvm *v9;
  int v10;
  void *v11[105];

  v11[103] = *(void **)MEMORY[0x1E0C80C00];
  v4 = *this;
  if (llvm::HardwareLoopInfo::isHardwareLoopCandidate(this, *(llvm::ScalarEvolution **)(a1 + 32), *(llvm::LoopInfo **)(a1 + 40), *(llvm::DominatorTree **)(a1 + 72), byte_1ED7F8348, byte_1ED7F8288))
  {
    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v4);
    if (LoopPredecessor)
    {
      v6 = *(_QWORD *)(LoopPredecessor + 40);
      if (v6 != LoopPredecessor + 40)
      {
        if (v6)
          v7 = v6 - 24;
        else
          v7 = 0;
        if (*(_BYTE *)(v7 + 16) != 30)
        {
          switch(*(_BYTE *)(v7 + 16))
          {
            case 0x1E:
              __break(1u);
              JUMPOUT(0x1C50D0224);
            case 0x1F:
              v10 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_14;
            case 0x20:
              v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_14;
            case 0x27:
              v10 = *(_DWORD *)(v7 + 80) + 1;
LABEL_14:
              if (v10 == 1)
                goto LABEL_10;
              goto LABEL_9;
            default:
              goto LABEL_9;
          }
        }
        if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 3)
        {
LABEL_10:
          v9 = this[3];
          sub_1C50D02DC((uint64_t)v11, *(uint64_t ****)(a1 + 32), *(_QWORD *)(a1 + 48), (uint64_t)"loopcnt", 1);
          __asm { BR              X11 }
        }
      }
    }
LABEL_9:
    result = llvm::InsertPreheaderForLoop(v4, *(llvm::Loop **)(a1 + 72), *(llvm::DominatorTree **)(a1 + 40), 0, (llvm::MemorySSAUpdater *)*(unsigned __int8 *)(a1 + 80));
    if (result)
      goto LABEL_10;
  }
  else
  {
    sub_1C50CF150("loop is not a candidate", 23, (uint64_t)"HWLoopNoCandidate", 17, *(llvm::OptimizationRemarkEmitter **)(a1 + 56), v4);
    return 0;
  }
  return result;
}

uint64_t sub_1C50D02DC(uint64_t a1, uint64_t ***a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;
  __int16 v15;
  _QWORD v16[3];
  _QWORD *v17;
  void (**v18)(llvm::IRBuilderCallbackInserter *__hidden);
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 136;
  *(_QWORD *)(a1 + 112) = a1 + 136;
  *(_QWORD *)(a1 + 120) = 16;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x200000000;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = a1 + 384;
  *(_QWORD *)(a1 + 360) = a1 + 384;
  *(_QWORD *)(a1 + 368) = 2;
  *(_DWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 1;
  v6 = ***a2;
  v12[0] = &unk_1E8138570;
  v12[1] = &unk_1E8135C10;
  v12[2] = a3;
  v12[3] = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 257;
  v16[0] = &off_1E8142B90;
  v16[1] = a1;
  v17 = v16;
  v18 = &off_1E8167568;
  v19[0] = &off_1E8142B90;
  v20 = v19;
  v19[1] = a1;
  sub_1C50D04F0(a1 + 448, v6, (uint64_t)v12, (uint64_t)&v18, 0, 0, 0);
  v18 = &off_1E8167568;
  v7 = v20;
  if (v20 == v19)
  {
    v8 = 4;
    v7 = v19;
LABEL_3:
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_4;
  }
  if (v20)
  {
    v8 = 5;
    goto LABEL_3;
  }
LABEL_4:
  v9 = v17;
  if (v17 == v16)
  {
    v10 = (void (**)(_QWORD *))(v16[0] + 32);
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_7;
    v10 = (void (**)(_QWORD *))(*v17 + 40);
  }
  (*v10)(v9);
LABEL_7:
  *(_QWORD *)(a1 + 680) = a1 + 696;
  *(_QWORD *)(a1 + 688) = 0x800000000;
  *(_QWORD *)(a1 + 760) = "";
  return a1;
}

uint64_t sub_1C50D04CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8142B90;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C50D04E4(uint64_t a1, llvm::Value **a2)
{
  return llvm::SCEVExpander::rememberInstruction(*(llvm::SCEVExpander **)(a1 + 8), *a2);
}

uint64_t sub_1C50D04F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8138570;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 80) = a1 + 192;
  *(_QWORD *)(a1 + 88) = a5;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a6;
  *(_QWORD *)(a1 + 112) = a7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 128) = &unk_1E8135C10;
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_OWORD *)(a3 + 24);
  v10 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 192) = &off_1E8167568;
  v11 = *(_QWORD *)(a4 + 32);
  if (v11)
  {
    if (v11 == a4 + 8)
    {
      *(_QWORD *)(a1 + 224) = a1 + 200;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 32) + 24))(*(_QWORD *)(a4 + 32));
    }
    else
    {
      *(_QWORD *)(a1 + 224) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 224) = 0;
  }
  return a1;
}

uint64_t sub_1C50D05E0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 680);
  if (v2 != (void *)(a1 + 696))
    free(v2);
  *(_QWORD *)(a1 + 640) = &off_1E8167568;
  v3 = *(_QWORD **)(a1 + 672);
  if (v3 == (_QWORD *)(a1 + 648))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 648);
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_5;
  }
LABEL_6:
  v5 = *(void **)(a1 + 448);
  if (v5 != (void *)(a1 + 464))
    free(v5);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 416), 8);
  v6 = *(void **)(a1 + 360);
  if (v6 != *(void **)(a1 + 352))
    free(v6);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 328), 8);
  sub_1C50D06E4((void **)(a1 + 264));
  v7 = *(void **)(a1 + 112);
  if (v7 != *(void **)(a1 + 104))
    free(v7);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  sub_1C50D0778(a1 + 32);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 32), 8);
  return a1;
}

void **sub_1C50D06E4(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;
  char *v7;
  void **v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v7 = (char *)*result;
    v8 = result;
    v3 = 24 * v2;
    do
    {
      v4 = *(_QWORD *)&v7[v3 - 8];
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(&v7[v3 - 24]);
      v3 -= 24;
    }
    while (v3);
    result = v8;
    v1 = (void **)*v8;
  }
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_1C50D0778(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD **)result;
    v3 = *(_QWORD *)result + 40 * v1;
    do
    {
      v4 = v2[1];
      if ((*v2 != -4096 || v4 != -4096) && (*v2 != -8192 || v4 != -8192))
      {
        v5 = v2[4];
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          v7 = v2[2] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v7 = v2[3];
          v8 = (unint64_t *)v2[3];
          if (v8)
          {
            *v8 = *v8 & 7 | v7;
          }
          else
          {
            v9 = v2[4];
            v10 = ***(int32x2_t ****)v9;
            v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                v15 = (uint64_t *)(v11 + 16 * v14);
                v16 = *v15;
                if (v9 == *v15)
                {
LABEL_22:
                  *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = v2[4];
                }
                else
                {
                  v17 = 1;
                  while (v16 != -4096)
                  {
                    v18 = v14 + v17++;
                    v14 = v18 & v13;
                    v16 = *(_QWORD *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_22;
                    }
                  }
                }
                *(_BYTE *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v2 += 5;
    }
    while (v2 != (_QWORD *)v3);
  }
  return result;
}

uint64_t sub_1C50D08AC()
{
  int v1;
  __n128 v2;
  int *v3;
  int v4;

  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Force hardware loops intrinsics to be inserted";
  v2.n128_u64[1] = 46;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F8148, "force-hardware-loops", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8148, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Force hardware loop counter to be updated through a phi";
  v2.n128_u64[1] = 55;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F8208, "force-hardware-loop-phi", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8208, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Force allowance of nested hardware loops";
  v2.n128_u64[1] = 40;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F82C8, "force-nested-hardware-loop", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F82C8, &dword_1C475E000);
  v4 = 1;
  v1 = 1;
  v2.n128_u64[0] = (unint64_t)"Set the loop decrement value";
  v2.n128_u64[1] = 28;
  v3 = &v1;
  sub_1C61798D0((uint64_t)&unk_1ED7F8388, "hardware-loop-decrement", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F8388, &dword_1C475E000);
  v4 = 1;
  v1 = 32;
  v2.n128_u64[0] = (unint64_t)"Set the loop counter bitwidth";
  v2.n128_u64[1] = 29;
  v3 = &v1;
  sub_1C61798D0((uint64_t)&unk_1ED7F8448, "hardware-loop-counter-bitwidth", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F8448, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[1] = 40;
  v3 = &v1;
  v2.n128_u64[0] = (unint64_t)"Force generation of loop guard intrinsic";
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F8508, "force-hardware-loop-guard", &v4, (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8508, &dword_1C475E000);
}

uint64_t sub_1C50D0AD0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "If Converter";
  *(_QWORD *)(v4 + 8) = 12;
  *(_QWORD *)(v4 + 16) = "if-converter";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &unk_1ED7F85C8;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C50D0DE4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t llvm::createIfConverter(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v6);
    }
    else
    {
      v7 = (_QWORD *)a1[3];
      a1[3] = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1C50D0C58(v2, (uint64_t)v6);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v4)();
  }
  return v2;
}

uint64_t sub_1C50D0C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  v4 = sub_1C4776848(a1, (uint64_t)&unk_1ED7F85C8);
  *(_QWORD *)v4 = &off_1E8142BE0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  *(_OWORD *)(v4 + 304) = xmmword_1C8663800;
  *(_OWORD *)(v4 + 320) = unk_1C8663810;
  *(_QWORD *)(v4 + 336) = 0;
  *(_OWORD *)(v4 + 272) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v4 + 288) = unk_1C86637F0;
  *(_OWORD *)(v4 + 360) = unk_1C86637F0;
  *(_OWORD *)(v4 + 376) = xmmword_1C8663800;
  *(_OWORD *)(v4 + 392) = unk_1C8663810;
  *(_QWORD *)(v4 + 408) = 0;
  *(_OWORD *)(v4 + 344) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 448) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_QWORD *)(v4 + 464) = v4 + 480;
  *(_QWORD *)(v4 + 472) = 0x1000000000;
  *(_QWORD *)(v4 + 544) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 600) = v4 + 624;
  *(_OWORD *)(v4 + 608) = xmmword_1C6464ED0;
  *(_QWORD *)(v4 + 640) = 0;
  *(_DWORD *)(v4 + 648) = 0;
  *(_DWORD *)(v4 + 660) = -1;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 688) = a1 + 664;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 688) = v5;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 688) = 0;
  }
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED7F85D0);
  if (v7 != -1)
  {
    v11[0] = sub_1C50D0AD0;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED7F85D0, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50D0DE4()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v4 = 0;
  sub_1C50D0C58(v0, (uint64_t)v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C50D0E90(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)a1 = &off_1E8142BE0;
  v2 = (_QWORD *)(a1 + 664);
  v3 = *(_QWORD **)(a1 + 688);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  free(*(void **)(a1 + 640));
  v5 = *(void **)(a1 + 600);
  if (v5 != (void *)(a1 + 624))
    free(v5);
  v6 = *(void **)(a1 + 464);
  if (v6 != (void *)(a1 + 480))
    free(v6);
  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
  {
    sub_1C50D3EE4(a1 + 248, v7);
    operator delete(*(void **)(a1 + 248));
  }
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 192))
    free(v8);
  v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 120))
    free(v9);
  v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 48))
    free(v10);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C50D0F90(uint64_t a1)
{
  sub_1C50D0E90(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50D0FB4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1C50D1014(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const llvm::TargetSubtargetInfo *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL8 v16;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  void **v37;
  char *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void **v47;
  unsigned int v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int16 *v69;
  _QWORD *v70;
  __int16 *v71;
  uint64_t v72;
  int v73;
  _WORD *v74;
  int v75;
  __int16 *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  _QWORD *v85;
  const llvm::MachineBasicBlock *v86;
  int v87;
  __int16 v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  int v109;
  __int16 *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  _BYTE **v140;
  _DWORD *v141;
  int v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  __int16 v146;
  _BYTE *v147;
  _BYTE *v148;
  __int16 v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  BOOL v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  char v170;
  uint64_t v171;
  int v172;
  __int16 v173;
  uint64_t v174;
  BOOL v175;
  __int16 v176;
  __int16 v177;
  BOOL v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  __int16 v182;
  int v183;
  uint64_t v184;
  uint64_t *v185;
  llvm::MachineBasicBlock *v186;
  llvm::MachineBasicBlock *v187;
  uint64_t v188;
  llvm::MachineBasicBlock **v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  char *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  char v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  BOOL v262;
  char v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t *v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t *v290;
  const std::nothrow_t *v291;
  unint64_t v292;
  uint64_t *v293;
  uint64_t *v294;
  __int16 **v295;
  uint64_t *v296;
  __int16 *v297;
  int v298;
  __int16 v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v308;
  char *v309;
  BOOL v310;
  _QWORD *v311;
  BOOL v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  char v316;
  char *v317;
  __int16 *v318;
  char *v319;
  uint64_t *v320;
  char *v321;
  uint64_t *v322;
  char *__p;
  uint64_t *__pa;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  _QWORD v329[11];
  unsigned int EdgeProbability;
  uint64_t v331;
  llvm::MachineBasicBlock *v332;
  _QWORD *v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  _BYTE v337[36];
  int v338;
  void *v339;
  uint64_t v340;
  _BYTE v341[128];
  void *v342;
  uint64_t v343;
  _BYTE v344[128];
  _BYTE v345[36];
  int v346;
  void *v347;
  uint64_t v348;
  _BYTE v349[128];
  void *v350;
  uint64_t v351;
  _BYTE v352[128];
  void *v353[2];
  _BYTE v354[128];
  void *v355;
  uint64_t v356;
  _QWORD v357[34];

  v2 = (uint64_t)a1;
  v357[32] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  v3 = *(_QWORD *)(v2 + 688);
  if (v3)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a2))
      return 0;
  }
  v4 = *(const llvm::TargetSubtargetInfo **)(a2 + 16);
  *(_QWORD *)(v2 + 552) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v4 + 120))(v4);
  *(_QWORD *)(v2 + 560) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(v2 + 568) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v4 + 176))(v4);
  v5 = **(void ****)(v2 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineBlockFrequencyInfo::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v326 = 0;
  v327 = 0;
  v325 = v7;
  v328 = 0;
  v8 = **(void ****)(v2 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineBranchProbabilityInfo::ID);
  *(_QWORD *)(v2 + 576) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineBranchProbabilityInfo::ID);
  v10 = **(void ****)(v2 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::ProfileSummaryInfoWrapperPass::ID);
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  *(_QWORD *)(v2 + 584) = *(_QWORD *)(a2 + 40);
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(v2 + 272), v4);
  if (*(_QWORD *)(v2 + 560))
  {
    v13 = **(_QWORD **)(**(_QWORD **)(v2 + 584) + 360);
    *(_BYTE *)(v2 + 656) = **(_BYTE **)(**(_QWORD **)(v2 + 584) + 360) & 1;
    if ((v13 & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      sub_1C61D7B10((uint64_t)v345, 1, 0, (uint64_t)&v325, *(_QWORD *)(v2 + 576), v12, 0);
      v55 = *(_QWORD *)(v2 + 560);
      v56 = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)v4 + 176))(v4);
      v14 = sub_1C506F920((uint64_t)v345, (const llvm::MachineFunction *)a2, v55, v56, 0, 0);
      sub_1C61D8C9C((uint64_t)v345);
    }
    v15 = *(_DWORD *)(v2 + 660);
    if (v15 >= dword_1ED7F8658 && (dword_1ED7F8718 == -1 || v15 <= dword_1ED7F8718))
    {
      v305 = v14;
      v306 = v12;
      llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
      v18 = *(char **)(v2 + 256);
      v19 = (_QWORD *)(v2 + 248);
      v20 = ((*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
      __p = *(char **)(v2 + 248);
      v21 = 0x8F9C18F9C18F9C19 * ((v18 - __p) >> 3);
      v22 = v20 >= v21;
      v23 = v20 - v21;
      v313 = v2;
      v311 = (_QWORD *)(v2 + 248);
      if (v20 <= v21)
      {
        v30 = v306;
        if (!v22)
          sub_1C50D3EE4(v2 + 248, (uint64_t)&__p[328 * v20]);
        goto LABEL_74;
      }
      v24 = *(_QWORD *)(v2 + 264);
      if (0x8F9C18F9C18F9C19 * ((v24 - (uint64_t)v18) >> 3) >= v23)
      {
        v54 = &v18[328 * v23];
        do
        {
          *(_WORD *)v18 &= 0xFC00u;
          *(_OWORD *)(v18 + 4) = 0uLL;
          *(_OWORD *)(v18 + 20) = 0uLL;
          *((_DWORD *)v18 + 9) = 0;
          *((_QWORD *)v18 + 5) = v18 + 56;
          *((_QWORD *)v18 + 6) = 0x400000000;
          *((_QWORD *)v18 + 23) = v18 + 200;
          *((_QWORD *)v18 + 24) = 0x400000000;
          v18 += 328;
        }
        while (v18 != v54);
        *(_QWORD *)(v2 + 256) = v54;
        v30 = v306;
        goto LABEL_74;
      }
      v25 = 0x1F3831F3831F3832 * ((v24 - (uint64_t)__p) >> 3);
      if (v25 <= v20)
        v25 = ((*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
      if (0x8F9C18F9C18F9C19 * ((v24 - (uint64_t)__p) >> 3) >= 0x63E7063E7063E7)
        v26 = 0xC7CE0C7CE0C7CELL;
      else
        v26 = v25;
      if (v26 > 0xC7CE0C7CE0C7CELL)
LABEL_477:
        sub_1C4764EE4();
      v27 = (char *)operator new(328 * v26);
      v28 = &v27[328 * v20];
      v319 = &v27[8 * ((v18 - __p) >> 3)];
      v29 = v319;
      do
      {
        *(_WORD *)v29 &= 0xFC00u;
        *(_OWORD *)(v29 + 4) = 0uLL;
        *(_OWORD *)(v29 + 20) = 0uLL;
        *((_DWORD *)v29 + 9) = 0;
        *((_QWORD *)v29 + 5) = v29 + 56;
        *((_QWORD *)v29 + 6) = 0x400000000;
        *((_QWORD *)v29 + 23) = v29 + 200;
        *((_QWORD *)v29 + 24) = 0x400000000;
        v29 += 328;
      }
      while (v29 != v28);
      v30 = v306;
      if (v18 == __p)
      {
        *(_QWORD *)(v2 + 248) = v319;
        *(_QWORD *)(v2 + 256) = v28;
        *(_QWORD *)(v2 + 264) = &v27[328 * v26];
        goto LABEL_72;
      }
      v317 = &v27[328 * v26];
      v31 = 0;
      while (1)
      {
        v32 = &v18[v31];
        v33 = &v319[v31];
        v34 = (uint64_t)&v319[v31 - 328];
        v35 = *(_OWORD *)&v18[v31 - 328];
        v36 = *(_OWORD *)&v18[v31 - 312];
        *(_QWORD *)(v34 + 32) = *(_QWORD *)&v18[v31 - 296];
        *(_OWORD *)v34 = v35;
        *(_OWORD *)(v34 + 16) = v36;
        v37 = (void **)&v319[v31 - 288];
        v38 = &v319[v31 - 272];
        *((_QWORD *)v33 - 36) = v33 - 272;
        v39 = (unsigned int *)&v319[v31 - 280];
        *((_QWORD *)v33 - 35) = 0x400000000;
        v40 = (unsigned int *)&v18[v31 - 280];
        v41 = *v40;
        if (*v40)
        {
          if (v33 != v32)
            break;
        }
LABEL_40:
        v46 = v33 - 128;
        *((_QWORD *)v33 - 18) = v33 - 128;
        v47 = (void **)(v33 - 144);
        *((_QWORD *)v33 - 17) = 0x400000000;
        v48 = *((_DWORD *)v32 - 34);
        v2 = v313;
        if (!v48 || v33 == v32)
          goto LABEL_48;
        v49 = &v18[v31];
        v50 = *(void **)&v18[v31 - 144];
        v51 = (uint64_t)&v18[v31 - 128];
        if ((void *)v51 != v50)
        {
          *v47 = v50;
          *((_DWORD *)v33 - 34) = v48;
          *((_DWORD *)v33 - 33) = *(_DWORD *)&v18[v31 - 132];
          *((_QWORD *)v49 - 18) = v51;
          *(_DWORD *)&v18[v31 - 132] = 0;
          goto LABEL_47;
        }
        if (v48 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v33 - 144), (uint64_t)(v33 - 128), *((unsigned int *)v32 - 34), 32);
          v52 = *((unsigned int *)v32 - 34);
          if (!(_DWORD)v52)
            goto LABEL_46;
          v50 = (void *)*((_QWORD *)v49 - 18);
          v46 = (char *)*v47;
        }
        else
        {
          v52 = *((unsigned int *)v32 - 34);
        }
        memcpy(v46, v50, 32 * v52);
LABEL_46:
        *((_DWORD *)v33 - 34) = v48;
LABEL_47:
        *((_DWORD *)v32 - 34) = 0;
LABEL_48:
        v31 -= 328;
        if (&v18[v31] == __p)
        {
          v18 = *(char **)(v313 + 248);
          v57 = *(char **)(v313 + 256);
          *(_QWORD *)(v313 + 248) = &v319[v31];
          *(_QWORD *)(v313 + 256) = v28;
          *(_QWORD *)(v313 + 264) = v317;
          if (v57 == v18)
          {
            v30 = v306;
            v19 = v311;
          }
          else
          {
            v19 = v311;
            do
            {
              v58 = (char *)*((_QWORD *)v57 - 18);
              if (v57 - 128 != v58)
                free(v58);
              v59 = (char *)*((_QWORD *)v57 - 36);
              if (v57 - 272 != v59)
                free(v59);
              v57 -= 328;
            }
            while (v57 != v18);
            v30 = v306;
          }
LABEL_72:
          if (v18)
            operator delete(v18);
LABEL_74:
          *(_BYTE *)(v2 + 657) = 0;
          v60 = dword_1ED7F87D8 != -1 && dword_1ED7F87D8 < 1;
          if (v60)
          {
            v62 = 0;
            goto LABEL_470;
          }
          v61 = 0;
          v62 = 0;
          v309 = 0;
          v63 = *(_QWORD *)(a2 + 328);
          while (2)
          {
            if (v63 == a2 + 320)
            {
              *(_QWORD *)v345 = sub_1C50D3F54;
              v291 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
              if ((char *)v62 - (char *)v61 < 1)
              {
LABEL_458:
                sub_1C50D529C(v61, v62, (uint64_t (**)(uint64_t *, uint64_t *))v345, v62 - v61, 0, 0);
              }
              else
              {
                v292 = v62 - v61;
                while (1)
                {
                  v293 = (uint64_t *)operator new(8 * v292, v291);
                  if (v293)
                    break;
                  v60 = v292 > 1;
                  v292 >>= 1;
                  if (!v60)
                    goto LABEL_458;
                }
                v294 = v293;
                sub_1C50D529C(v61, v62, (uint64_t (**)(uint64_t *, uint64_t *))v345, v62 - v61, v293, v292);
                operator delete(v294);
              }
              if (v61 != v62)
              {
                do
                {
                  v295 = (__int16 **)*(v62 - 1);
                  v296 = v62 - 1;
                  *(v62 - 1) = 0;
                  v297 = *v295;
                  v298 = *((_DWORD *)v295 + 2);
                  v299 = **v295;
                  if ((v299 & 1) != 0)
                  {
                    v299 &= ~8u;
                    *v297 = v299;
                  }
                  if ((v299 & 8) != 0)
                  {
                    *v297 = v299 & 0xFFF7;
                    __asm { BR              X9 }
                  }
                  --v62;
                  MEMORY[0x1CAA32FC0](v295, 0x1020C400ADEC36ALL);
                }
                while (v61 != v296);
                v19 = v311;
                v62 = v61;
              }
              v30 = v306;
LABEL_470:
              sub_1C50D3EE4((uint64_t)v19, *(_QWORD *)(v2 + 248));
              v300 = *(unsigned __int8 *)(v2 + 657);
              if (*(_BYTE *)(v2 + 657))
              {
                v301 = v305;
                if (byte_1ED7F8E98)
                {
                  sub_1C61D7B10((uint64_t)v345, 0, 0, (uint64_t)&v325, *(_QWORD *)(v2 + 576), v30, 0);
                  v302 = *(_QWORD *)(v2 + 560);
                  v303 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
                  sub_1C506F920((uint64_t)v345, (const llvm::MachineFunction *)a2, v302, v303, 0, 0);
                  sub_1C61D8C9C((uint64_t)v345);
                  v301 = v305;
                  v300 = *(unsigned __int8 *)(v2 + 657);
                }
              }
              else
              {
                v301 = v305;
              }
              v304 = v300 | v301;
              v16 = v304 != 0;
              *(_BYTE *)(v2 + 657) = v304;
              if (v62)
                operator delete(v62);
              goto LABEL_17;
            }
            v355 = v357;
            v308 = v63;
            v357[0] = v63;
            v357[1] = 0;
            v64 = 1;
            v356 = 0x1000000001;
LABEL_81:
            while (2)
            {
              while (2)
              {
                __pa = v61;
                v65 = (char *)v355 + 16 * v64;
                v332 = 0;
                v66 = *((_QWORD *)v65 - 2);
                v332 = (llvm::MachineBasicBlock *)v66;
                v67 = *(_DWORD *)(v66 + 24);
                v68 = *v19;
                v69 = (__int16 *)(*v19 + 328 * v67);
                if (!*(v65 - 8))
                {
                  v88 = *v69;
                  if ((*v69 & 6) != 0)
                  {
                    LODWORD(v356) = --v64;
                    v61 = __pa;
                    if (!v64)
                      goto LABEL_451;
                    continue;
                  }
                  v134 = v68 + 328 * v67;
                  *(_QWORD *)(v134 + 16) = v66;
                  v135 = (uint64_t *)(v134 + 16);
                  *v69 = v88 | 2;
                  if ((v88 & 1) == 0)
                  {
                    v136 = v62;
                    v137 = v68 + 328 * v67;
                    *(_QWORD *)(v137 + 32) = 0;
                    v138 = (uint64_t *)(v137 + 32);
                    *(v138 - 1) = 0;
                    v139 = v138 - 1;
                    v140 = (_BYTE **)(v138 + 1);
                    *((_DWORD *)v138 + 4) = 0;
                    v141 = v138 + 2;
                    v142 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v313 + 560) + 248))(*(_QWORD *)(v313 + 560));
                    if (v142)
                      v143 = 0;
                    else
                      v143 = 16;
                    *v69 = *v69 & 0xFFEF | v143;
                    if ((v142 & 1) != 0)
                    {
                      v144 = 0;
                      *v141 = 0;
                      *v139 = 0;
                      *v138 = 0;
                    }
                    else
                    {
                      v144 = *v141;
                    }
                    v147 = *v140;
                    v148 = &(*v140)[32 * v144];
                    *(_QWORD *)v345 = &v345[16];
                    *(_QWORD *)&v345[8] = 0x400000000;
                    sub_1C4778D38((unsigned int *)v345, v147, v148);
                    if (*(_DWORD *)&v345[8])
                    {
                      if ((*(unsigned int (**)(_QWORD, _BYTE *))(**(_QWORD **)(v313 + 560) + 728))(*(_QWORD *)(v313 + 560), v345))
                      {
                        v149 = 0;
                      }
                      else
                      {
                        v149 = 32;
                      }
                    }
                    else
                    {
                      v149 = 32;
                    }
                    v173 = *v69 & 0xFF9F | v149;
                    v174 = *v138;
                    if (*v138)
                      v175 = 1;
                    else
                      v175 = (*v69 & 0x10) == 0;
                    if (v175)
                      v176 = 0;
                    else
                      v176 = 64;
                    v177 = v173 | v176;
                    *v69 = v177;
                    if (*v141)
                      v178 = v174 == 0;
                    else
                      v178 = 0;
                    v62 = v136;
                    v19 = v311;
                    if (!v178)
                      goto LABEL_234;
                    v179 = *(uint64_t **)(*v135 + 88);
                    v180 = *(uint64_t **)(*v135 + 96);
                    if (v179 == v180)
                    {
LABEL_232:
                      *v138 = 0;
LABEL_233:
                      *v69 = v177 | 0x80;
                      goto LABEL_234;
                    }
                    while (1)
                    {
                      v181 = *v179;
                      if (*v179 != *v139)
                        break;
                      if (++v179 == v180)
                        goto LABEL_232;
                    }
                    *v138 = v181;
                    if (!v181)
                      goto LABEL_233;
LABEL_234:
                    if (*(_BYTE **)v345 != &v345[16])
                      free(*(void **)v345);
                    v66 = *v135;
                  }
                  *(_QWORD *)v345 = *(_QWORD *)(v66 + 56);
                  *(_QWORD *)v337 = v66 + 48;
                  v2 = v313;
                  sub_1C50D3FF0(v313, v69, (uint64_t *)v345, (uint64_t *)v337, 0);
                  v182 = *v69;
                  if ((*v69 & 0x10) != 0 && (v182 & 1) == 0 && *(_DWORD *)(v68 + 328 * v67 + 48))
                  {
                    v184 = v68 + 328 * v67;
                    v186 = *(llvm::MachineBasicBlock **)(v184 + 24);
                    v185 = (uint64_t *)(v184 + 24);
                    if (v186 != v332)
                    {
                      v187 = *(llvm::MachineBasicBlock **)(v68 + 328 * v67 + 32);
                      if (v187 != v332)
                      {
                        if (v187)
                        {
                          *(v65 - 8) = 1;
                          v188 = v356;
                          if (v356 >= (unint64_t)HIDWORD(v356))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v355, (uint64_t)v357, v356 + 1, 16);
                            v188 = v356;
                          }
                          v189 = (llvm::MachineBasicBlock **)((char *)v355 + 16 * v188);
                          *v189 = v187;
                          v189[1] = 0;
                          v190 = (v356 + 1);
                          LODWORD(v356) = v190;
                          v191 = *v185;
                          v61 = __pa;
                          if (v190 >= HIDWORD(v356))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v355, (uint64_t)v357, v190 + 1, 16);
                            LODWORD(v190) = v356;
                          }
                          v192 = (char *)v355 + 16 * v190;
                          *v192 = v191;
                          v192[1] = 0;
                          v183 = 1;
LABEL_251:
                          v64 = v356 + v183;
                          LODWORD(v356) = v64;
                          if (!v64)
                            goto LABEL_451;
                          continue;
                        }
                      }
                    }
                    *v69 = v182 & 0xFFF9 | 4;
                    v183 = -1;
                  }
                  else
                  {
                    *v69 = v182 & 0xFFF9 | 4;
                    v183 = -1;
                  }
                  v61 = __pa;
                  goto LABEL_251;
                }
                break;
              }
              v70 = v19;
              v71 = (__int16 *)(*v19 + 328 * v67);
              v320 = v62;
              v72 = v68 + 328 * v67;
              v73 = *(_DWORD *)(*(_QWORD *)(v72 + 24) + 24);
              v74 = (_WORD *)(v68 + 328 * v73);
              v75 = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 24);
              v76 = (__int16 *)(v68 + 328 * v75);
              if ((*v74 & 1) != 0 && (*v76 & 1) != 0)
              {
                *v71 = *v71 & 0xFFF9 | 4;
                v64 = v356 - 1;
                LODWORD(v356) = v64;
                v62 = v320;
                v61 = __pa;
                v19 = v70;
                if (!v64)
                  goto LABEL_451;
                continue;
              }
              break;
            }
            v77 = v68 + 328 * v67;
            v78 = *(_BYTE **)(v77 + 40);
            v314 = v77 + 40;
            v79 = &v78[32 * *(unsigned int *)(v77 + 48)];
            v353[0] = v354;
            v353[1] = (void *)0x400000000;
            sub_1C4778D38((unsigned int *)v353, v78, v79);
            v80 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(v2 + 560) + 728))(*(_QWORD *)(v2 + 560), v353);
            v331 = 0;
            v81 = v68 + 328 * v73;
            v82 = v2;
            v83 = *(_DWORD *)(v81 + 192);
            v312 = v83 != 0;
            v315 = v75;
            v84 = *(_DWORD *)(v68 + 328 * v75 + 192);
            v310 = v84 != 0;
            v86 = *(const llvm::MachineBasicBlock **)(v81 + 16);
            v85 = (_QWORD *)(v81 + 16);
            EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v82 + 576), v332, v86);
            v316 = v80;
            v318 = v71;
            if ((v80 & 1) != 0)
            {
              v87 = 0;
              v2 = v82;
              goto LABEL_103;
            }
            *(_WORD *)v345 = 0;
            memset(&v345[4], 0, 32);
            v346 = 0;
            v347 = v349;
            v348 = 0x400000000;
            v350 = v352;
            v351 = 0x400000000;
            *(_WORD *)v337 = 0;
            memset(&v337[4], 0, 32);
            v338 = 0;
            v339 = v341;
            v340 = 0x400000000;
            v342 = v344;
            v343 = 0x400000000;
            v329[0] = v82;
            v329[1] = v345;
            v329[2] = v337;
            v329[3] = &v332;
            v329[4] = (char *)&v331 + 4;
            v329[5] = &v331;
            v329[6] = &EdgeProbability;
            v329[7] = v68 + 328 * v73;
            v329[8] = v71;
            v329[9] = v76;
            v329[10] = v353;
            v331 = 0;
            v89 = (unsigned __int16)*v74;
            if ((v89 & 3) == 0)
            {
              v90 = (unsigned __int16)*v76;
              if ((v90 & 3) == 0)
              {
                v150 = (_QWORD *)*v85;
                v151 = v68 + 328 * v315;
                v154 = *(_QWORD **)(v151 + 16);
                v153 = (_QWORD *)(v151 + 16);
                v152 = v154;
                if ((_QWORD *)*v85 != v154)
                {
                  v155 = *(_QWORD *)(v68 + 328 * v73 + 24);
                  if (!v155)
                  {
                    if ((v89 & 0x10) != 0)
                    {
                      if (v150[1] == v150[4] + 320)
                        v155 = 0;
                      else
                        v155 = v150[1];
                    }
                    else
                    {
                      v155 = 0;
                    }
                  }
                  v236 = *(_QWORD *)(v68 + 328 * v315 + 24);
                  if (!v236)
                  {
                    if ((v90 & 0x10) != 0)
                    {
                      if (v152[1] == v152[4] + 320)
                        v236 = 0;
                      else
                        v236 = v152[1];
                    }
                    else
                    {
                      v236 = 0;
                    }
                  }
                  if (v155 == v236
                    && (v155 || ((v90 | v89) & 0x10) == 0)
                    && ((v150[9] - v150[8]) & 0x7FFFFFFF0) == 0
                    && ((v152[9] - v152[8]) & 0x7FFFFFFF0) == 0
                    && !(*(_QWORD *)(v68 + 328 * v73 + 32) | *(_QWORD *)(v68 + 328 * v315 + 32)))
                  {
                    v336 = v150[7];
                    v237 = v152[7];
                    v334 = v150 + 6;
                    v335 = v237;
                    v333 = v152 + 6;
                    if (sub_1C50D4BC0(v313, &v336, &v335, (uint64_t *)&v334, (uint64_t *)&v333, (_DWORD *)&v331 + 1, &v331, (uint64_t)v150, (uint64_t)v152, (v89 & v90 & 0x10) != 0))
                    {
                      *(_QWORD *)&v345[16] = *v85;
                      *(_QWORD *)&v337[16] = *v153;
                      *(_WORD *)v345 = *(_WORD *)v345 & 0xFFEF | *v74 & 0x10;
                      *(_WORD *)v337 = *(_WORD *)v337 & 0xFFEF | *v76 & 0x10;
                      if (sub_1C50D514C(v313, &v336, &v335, (uint64_t *)&v334, (uint64_t *)&v333, (__int16 *)v345, (__int16 *)v337))
                      {
                        *(_DWORD *)&v345[4] = *(_DWORD *)(v68 + 328 * v73 + 4);
                        *(_DWORD *)&v337[4] = *(_DWORD *)(v68 + 328 * v315 + 4);
                        if ((sub_1C50D4350((uint64_t)v329, 0) & 1) != 0)
                        {
                          v238 = (v84 | v83) != 0;
                          v239 = v345[1];
                          v240 = *(unsigned __int16 *)v337;
                          v241 = operator new();
                          v242 = v241;
                          v243 = HIDWORD(v331);
                          v244 = v331;
                          *(_QWORD *)v241 = v71;
                          *(_DWORD *)(v241 + 8) = 7;
                          *(_DWORD *)(v241 + 12) = v243;
                          *(_DWORD *)(v241 + 16) = v244;
                          *(_BYTE *)(v241 + 20) = v239 & 2 | (v240 >> 7) & 4 | *(_BYTE *)(v241 + 20) & 0xF8 | v238;
                          if (v320 < (uint64_t *)v309)
                          {
                            *v320 = v241;
                            v245 = v320 + 1;
                            goto LABEL_408;
                          }
                          v281 = v320 - __pa;
                          v282 = v281 + 1;
                          if ((unint64_t)(v281 + 1) >> 61)
LABEL_476:
                            abort();
                          if ((v309 - (char *)__pa) >> 2 > v282)
                            v282 = (v309 - (char *)__pa) >> 2;
                          if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                            v283 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v283 = v282;
                          if (v283)
                          {
                            if (v283 >> 61)
                              goto LABEL_477;
                            v284 = (char *)operator new(8 * v283);
                          }
                          else
                          {
                            v284 = 0;
                          }
                          v273 = (uint64_t *)&v284[8 * v281];
                          *v273 = v242;
                          v274 = v273 + 1;
                          if (v320 != __pa)
                          {
                            v285 = v284;
                            v286 = v320;
                            do
                            {
                              v287 = *--v286;
                              *v286 = 0;
                              *--v273 = v287;
                            }
                            while (v286 != __pa);
                            v288 = v320;
                            do
                            {
                              v289 = *(v288 - 1);
                              v290 = v288 - 1;
                              *(v288 - 1) = 0;
                              if (v289)
                                MEMORY[0x1CAA32FC0](v289, 0x1020C400ADEC36ALL);
                              v288 = v290;
                            }
                            while (v290 != __pa);
                            v284 = v285;
                          }
                          v280 = &v284[8 * v283];
LABEL_429:
                          v309 = v280;
                          if (__pa)
                            operator delete(__pa);
                          v87 = 1;
                          v320 = v274;
                          __pa = v273;
                          goto LABEL_410;
                        }
LABEL_93:
                        v87 = 0;
                        goto LABEL_94;
                      }
                    }
                  }
                }
              }
            }
            v331 = 0;
            v91 = (unsigned __int16)*v74;
            if ((v91 & 3) != 0)
              goto LABEL_93;
            v92 = (unsigned __int16)*v76;
            if ((v92 & 3) != 0)
              goto LABEL_93;
            if ((v91 & v92 & 0x10) == 0)
              goto LABEL_93;
            v156 = (_QWORD *)*v85;
            if (((*(_QWORD *)(*v85 + 72) - *(_QWORD *)(*v85 + 64)) & 0x7FFFFFFF0) != 0)
              goto LABEL_93;
            v157 = v68 + 328 * v315;
            v160 = *(_QWORD **)(v157 + 16);
            v159 = v157 + 16;
            v158 = v160;
            v161 = ((v160[9] - v160[8]) & 0x7FFFFFFF0) != 0 || *(_DWORD *)(v68 + 328 * v73 + 48) == 0;
            if (v161 || *(_DWORD *)(v159 + 32) == 0)
              goto LABEL_93;
            v163 = v68 + 328 * v73;
            v164 = *(_QWORD *)(v163 + 24);
            if (!v164)
            {
              if (v156[1] == v156[4] + 320)
                v164 = 0;
              else
                v164 = v156[1];
            }
            v165 = *(_QWORD *)(v163 + 32);
            if (!v165)
            {
              if (v156[1] == v156[4] + 320)
                v165 = 0;
              else
                v165 = v156[1];
            }
            v166 = v68 + 328 * v315;
            v167 = *(_QWORD *)(v166 + 24);
            if (!v167)
            {
              if (v158[1] == v158[4] + 320)
                v167 = 0;
              else
                v167 = v158[1];
            }
            v168 = *(_QWORD *)(v166 + 32);
            if (!v168)
            {
              if (v158[1] == v158[4] + 320)
                v168 = 0;
              else
                v168 = v158[1];
            }
            v87 = 0;
            if (v164 && v165 && (v164 == v167 && v165 == v168 || (v87 = 0, v165 == v167) && v164 == v168))
            {
              v169 = v165 == v167 && v164 == v168;
              v170 = !v169;
              if (v169)
              {
                if ((v92 & 0x20) == 0)
                  goto LABEL_93;
                sub_1C50D51F0(v313, (uint64_t)v76);
                v156 = (_QWORD *)*v85;
                v158 = *(_QWORD **)v159;
              }
              v336 = v156[7];
              v171 = v158[7];
              v334 = v156 + 6;
              v335 = v171;
              v333 = v158 + 6;
              if (sub_1C50D4BC0(v313, &v336, &v335, (uint64_t *)&v334, (uint64_t *)&v333, (_DWORD *)&v331 + 1, &v331, (uint64_t)v156, (uint64_t)v158, 1)&& (*(_QWORD *)&v345[16] = *v85, *(_QWORD *)&v337[16] = *(_QWORD *)v159, *(_WORD *)v345 = *(_WORD *)v345 & 0xFFEF | *v74 & 0x10, *(_WORD *)v337 = *(_WORD *)v337 & 0xFFEF | *v76 & 0x10, sub_1C50D514C(v313, &v336, &v335, (uint64_t *)&v334,
                      (uint64_t *)&v333,
                      (__int16 *)v345,
                      (__int16 *)v337)))
              {
                *(_DWORD *)&v345[4] = *(_DWORD *)(v68 + 328 * v73 + 4);
                *(_DWORD *)&v337[4] = *(_DWORD *)(v68 + 328 * v315 + 4);
                v172 = 1;
                if ((v170 & 1) != 0)
                  goto LABEL_404;
LABEL_403:
                sub_1C50D51F0(v313, (uint64_t)v76);
              }
              else
              {
                v172 = 0;
                if ((v170 & 1) == 0)
                  goto LABEL_403;
              }
LABEL_404:
              if (v172 && sub_1C50D4350((uint64_t)v329, 1))
              {
                v262 = (v84 | v83) != 0;
                v263 = v345[1];
                v264 = *(unsigned __int16 *)v337;
                v265 = operator new();
                v266 = v265;
                v267 = HIDWORD(v331);
                v268 = v331;
                *(_QWORD *)v265 = v318;
                *(_DWORD *)(v265 + 8) = 8;
                *(_DWORD *)(v265 + 12) = v267;
                *(_DWORD *)(v265 + 16) = v268;
                *(_BYTE *)(v265 + 20) = v263 & 2 | (v264 >> 7) & 4 | *(_BYTE *)(v265 + 20) & 0xF8 | v262;
                if (v320 >= (uint64_t *)v309)
                {
                  v269 = v320 - __pa;
                  v270 = v269 + 1;
                  if ((unint64_t)(v269 + 1) >> 61)
                    goto LABEL_476;
                  if ((v309 - (char *)__pa) >> 2 > v270)
                    v270 = (v309 - (char *)__pa) >> 2;
                  if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                    v271 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v271 = v270;
                  if (v271)
                  {
                    if (v271 >> 61)
                      goto LABEL_477;
                    v272 = (char *)operator new(8 * v271);
                  }
                  else
                  {
                    v272 = 0;
                  }
                  v273 = (uint64_t *)&v272[8 * v269];
                  *v273 = v266;
                  v274 = v273 + 1;
                  if (v320 != __pa)
                  {
                    v275 = v320;
                    do
                    {
                      v276 = *--v275;
                      *v275 = 0;
                      *--v273 = v276;
                    }
                    while (v275 != __pa);
                    v277 = v320;
                    do
                    {
                      v278 = *(v277 - 1);
                      v279 = v277 - 1;
                      *(v277 - 1) = 0;
                      if (v278)
                        MEMORY[0x1CAA32FC0](v278, 0x1020C400ADEC36ALL);
                      v277 = v279;
                    }
                    while (v279 != __pa);
                  }
                  v280 = &v272[8 * v271];
                  goto LABEL_429;
                }
                *v320 = v265;
                v245 = v320 + 1;
LABEL_408:
                v320 = v245;
                v87 = 1;
              }
              else
              {
                v87 = 0;
              }
LABEL_410:
              v2 = v313;
            }
            else
            {
LABEL_94:
              v2 = v313;
            }
            if (v342 != v344)
              free(v342);
            if (v339 != v341)
              free(v339);
            if (v350 != v352)
              free(v350);
            if (v347 != v349)
              free(v347);
LABEL_103:
            if (sub_1C50D4878(v2, v68 + 328 * v73, (uint64_t)v76, 0, (_DWORD *)&v331 + 1)
              && (v93 = v68 + 328 * v73, v95 = *(_DWORD *)(v93 + 4), v94 = *(_DWORD *)(v93 + 8), v94 + v95)
              && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 560) + 320))(*(_QWORD *)(v2 + 560), *v85, (v94 + v95), *(unsigned int *)(v68 + 328 * v73 + 12), EdgeProbability)&& sub_1C50D4988(v2, (__int16 *)(v68 + 328 * v73), v314, 1, 0, 0))
            {
              v96 = operator new();
              v97 = v96;
              v98 = HIDWORD(v331);
              *(_QWORD *)v96 = v318;
              *(_DWORD *)(v96 + 8) = 6;
              *(_DWORD *)(v96 + 12) = v98;
              *(_DWORD *)(v96 + 16) = 0;
              *(_BYTE *)(v96 + 20) = *(_BYTE *)(v96 + 20) & 0xF8 | v312;
              if (v320 >= (uint64_t *)v309)
              {
                v193 = v320 - __pa;
                v194 = v193 + 1;
                if ((unint64_t)(v193 + 1) >> 61)
                  goto LABEL_476;
                if ((v309 - (char *)__pa) >> 2 > v194)
                  v194 = (v309 - (char *)__pa) >> 2;
                if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                  v195 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v195 = v194;
                if (v195)
                {
                  if (v195 >> 61)
                    goto LABEL_477;
                  v196 = (char *)operator new(8 * v195);
                }
                else
                {
                  v196 = 0;
                }
                v219 = (uint64_t *)&v196[8 * v193];
                *v219 = v97;
                v99 = v219 + 1;
                v220 = v320;
                if (v320 != __pa)
                {
                  v221 = v320;
                  do
                  {
                    v222 = *--v221;
                    *v221 = 0;
                    *--v219 = v222;
                  }
                  while (v221 != __pa);
                  v223 = v320;
                  do
                  {
                    v224 = *(v223 - 1);
                    v225 = v223 - 1;
                    *(v223 - 1) = 0;
                    if (v224)
                      MEMORY[0x1CAA32FC0](v224, 0x1020C400ADEC36ALL);
                    v223 = v225;
                  }
                  while (v225 != __pa);
                  v220 = __pa;
                }
                v309 = &v196[8 * v195];
                if (v220)
                  operator delete(v220);
                v87 = 1;
                __pa = v219;
                v2 = v313;
              }
              else
              {
                *v320 = v96;
                v99 = v320 + 1;
                v87 = 1;
              }
            }
            else
            {
              v99 = v320;
            }
            if (sub_1C50D4878(v2, v68 + 328 * v73, (uint64_t)v76, 1, (_DWORD *)&v331 + 1)
              && (v100 = v68 + 328 * v73, v102 = *(_DWORD *)(v100 + 4), v101 = *(_DWORD *)(v100 + 8), v101 + v102)
              && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 560) + 320))(*(_QWORD *)(v2 + 560), *v85, (v101 + v102), *(unsigned int *)(v68 + 328 * v73 + 12), EdgeProbability)&& sub_1C50D4988(v2, (__int16 *)(v68 + 328 * v73), v314, 1, 1, 0))
            {
              v103 = operator new();
              v104 = v103;
              v105 = HIDWORD(v331);
              *(_QWORD *)v103 = v318;
              *(_DWORD *)(v103 + 8) = 4;
              *(_DWORD *)(v103 + 12) = v105;
              *(_DWORD *)(v103 + 16) = 0;
              *(_BYTE *)(v103 + 20) = *(_BYTE *)(v103 + 20) & 0xF8 | v312;
              if (v99 < (uint64_t *)v309)
              {
                *v99++ = v103;
                v87 = 1;
                goto LABEL_116;
              }
              v197 = v99 - __pa;
              v198 = v197 + 1;
              if ((unint64_t)(v197 + 1) >> 61)
                goto LABEL_476;
              if ((v309 - (char *)__pa) >> 2 > v198)
                v198 = (v309 - (char *)__pa) >> 2;
              if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                v199 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v199 = v198;
              if (v199)
              {
                if (v199 >> 61)
                  goto LABEL_477;
                v200 = (char *)operator new(8 * v199);
              }
              else
              {
                v200 = 0;
              }
              v226 = (uint64_t *)&v200[8 * v197];
              *v226 = v104;
              v106 = v226 + 1;
              if (v99 != __pa)
              {
                v321 = v200;
                v227 = v99;
                do
                {
                  v228 = *--v227;
                  *v227 = 0;
                  *--v226 = v228;
                }
                while (v227 != __pa);
                do
                {
                  v230 = *--v99;
                  v229 = v230;
                  *v99 = 0;
                  if (v230)
                    MEMORY[0x1CAA32FC0](v229, 0x1020C400ADEC36ALL);
                }
                while (v99 != __pa);
                v99 = __pa;
                v200 = v321;
              }
              v309 = &v200[8 * v199];
              if (v99)
                operator delete(v99);
              v87 = 1;
              __pa = v226;
              v2 = v313;
            }
            else
            {
LABEL_116:
              v106 = v99;
            }
            if (!sub_1C50D4B3C(v2, v68 + 328 * v73, (_DWORD *)&v331 + 1)
              || (v107 = v68 + 328 * v73, v109 = *(_DWORD *)(v107 + 4), v108 = *(_DWORD *)(v107 + 8), !(v108 + v109))
              || !(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 560)
                                                                                         + 320))(*(_QWORD *)(v2 + 560), *v85, (v108 + v109), *(unsigned int *)(v68 + 328 * v73 + 12), EdgeProbability))
            {
              v62 = v106;
              v19 = v311;
              goto LABEL_124;
            }
            v110 = v318;
            if (sub_1C50D4988(v2, (__int16 *)(v68 + 328 * v73), v314, 0, 0, 0))
            {
              v111 = operator new();
              v112 = v111;
              v113 = HIDWORD(v331);
              *(_QWORD *)v111 = v318;
              *(_DWORD *)(v111 + 8) = 2;
              *(_DWORD *)(v111 + 12) = v113;
              *(_DWORD *)(v111 + 16) = 0;
              *(_BYTE *)(v111 + 20) = *(_BYTE *)(v111 + 20) & 0xF8 | v312;
              if (v106 < (uint64_t *)v309)
              {
                *v106 = v111;
                v87 = 1;
                v62 = v106 + 1;
                v2 = v313;
                goto LABEL_154;
              }
              v201 = v106 - __pa;
              v202 = v201 + 1;
              if ((unint64_t)(v201 + 1) >> 61)
                goto LABEL_476;
              if ((v309 - (char *)__pa) >> 2 > v202)
                v202 = (v309 - (char *)__pa) >> 2;
              if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                v203 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v203 = v202;
              if (v203)
              {
                if (v203 >> 61)
                  goto LABEL_477;
                v204 = (char *)operator new(8 * v203);
              }
              else
              {
                v204 = 0;
              }
              v231 = (uint64_t *)&v204[8 * v201];
              *v231 = v112;
              v322 = v231 + 1;
              if (v106 == __pa)
              {
                v2 = v313;
              }
              else
              {
                v232 = v106;
                do
                {
                  v233 = *--v232;
                  *v232 = 0;
                  *--v231 = v233;
                }
                while (v232 != __pa);
                v2 = v313;
                do
                {
                  v235 = *--v106;
                  v234 = v235;
                  *v106 = 0;
                  if (v235)
                    MEMORY[0x1CAA32FC0](v234, 0x1020C400ADEC36ALL);
                }
                while (v106 != __pa);
                v106 = __pa;
              }
              v309 = &v204[8 * v203];
              if (v106)
                operator delete(v106);
              v87 = 1;
              __pa = v231;
              v19 = v311;
              v62 = v322;
LABEL_124:
              v110 = v318;
              if ((v316 & 1) == 0)
              {
LABEL_125:
                if (sub_1C50D4878(v2, (uint64_t)v76, (uint64_t)v74, 0, (_DWORD *)&v331 + 1)
                  && (v114 = v68 + 328 * v315, v116 = *(_DWORD *)(v114 + 4), v115 = *(_DWORD *)(v114 + 8), v115 + v116)
                  && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 560)
                                                                                            + 320))(*(_QWORD *)(v2 + 560), *(_QWORD *)(v68 + 328 * v315 + 16), (v115 + v116), *(unsigned int *)(v68 + 328 * v315 + 12), 0x80000000 - EdgeProbability)&& sub_1C50D4988(v2, v76, (uint64_t)v353, 1, 0, 0))
                {
                  v117 = operator new();
                  v118 = v62;
                  v119 = v117;
                  v120 = HIDWORD(v331);
                  *(_QWORD *)v117 = v110;
                  *(_DWORD *)(v117 + 8) = 5;
                  *(_DWORD *)(v117 + 12) = v120;
                  *(_DWORD *)(v117 + 16) = 0;
                  *(_BYTE *)(v117 + 20) = *(_BYTE *)(v117 + 20) & 0xF8 | v310;
                  if (v118 >= (uint64_t *)v309)
                  {
                    v205 = v118;
                    v206 = v118 - __pa;
                    v207 = v206 + 1;
                    if ((unint64_t)(v206 + 1) >> 61)
                      goto LABEL_476;
                    if ((v309 - (char *)__pa) >> 2 > v207)
                      v207 = (v309 - (char *)__pa) >> 2;
                    if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                      v208 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v208 = v207;
                    if (v208)
                    {
                      if (v208 >> 61)
                        goto LABEL_477;
                      v209 = (char *)operator new(8 * v208);
                    }
                    else
                    {
                      v209 = 0;
                    }
                    v246 = (uint64_t *)&v209[8 * v206];
                    *v246 = v119;
                    v121 = v246 + 1;
                    if (v205 != __pa)
                    {
                      v247 = v205;
                      do
                      {
                        v248 = *--v247;
                        *v247 = 0;
                        *--v246 = v248;
                      }
                      while (v247 != __pa);
                      do
                      {
                        v250 = *--v205;
                        v249 = v250;
                        *v205 = 0;
                        if (v250)
                          MEMORY[0x1CAA32FC0](v249, 0x1020C400ADEC36ALL);
                      }
                      while (v205 != __pa);
                      v205 = __pa;
                    }
                    v309 = &v209[8 * v208];
                    if (v205)
                      operator delete(v205);
                    v87 = 1;
                    __pa = v246;
                    v2 = v313;
                    v19 = v311;
                    v110 = v318;
                  }
                  else
                  {
                    *v118 = v117;
                    v121 = v118 + 1;
                    v87 = 1;
                  }
                }
                else
                {
                  v121 = v62;
                }
                if (sub_1C50D4878(v2, (uint64_t)v76, (uint64_t)v74, 1, (_DWORD *)&v331 + 1)
                  && (v122 = v68 + 328 * v315, v124 = *(_DWORD *)(v122 + 4), v123 = *(_DWORD *)(v122 + 8), v123 + v124)
                  && (*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 560)
                                                                                            + 320))(*(_QWORD *)(v2 + 560), *(_QWORD *)(v68 + 328 * v315 + 16), (v123 + v124), *(unsigned int *)(v68 + 328 * v315 + 12), 0x80000000 - EdgeProbability)&& sub_1C50D4988(v2, v76, (uint64_t)v353, 1, 1, 0))
                {
                  v125 = operator new();
                  v126 = v125;
                  v127 = HIDWORD(v331);
                  *(_QWORD *)v125 = v110;
                  *(_DWORD *)(v125 + 8) = 3;
                  *(_DWORD *)(v125 + 12) = v127;
                  *(_DWORD *)(v125 + 16) = 0;
                  *(_BYTE *)(v125 + 20) = *(_BYTE *)(v125 + 20) & 0xF8 | v310;
                  if (v121 >= (uint64_t *)v309)
                  {
                    v210 = v121 - __pa;
                    v211 = v210 + 1;
                    if ((unint64_t)(v210 + 1) >> 61)
                      goto LABEL_476;
                    if ((v309 - (char *)__pa) >> 2 > v211)
                      v211 = (v309 - (char *)__pa) >> 2;
                    if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                      v212 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v212 = v211;
                    if (v212)
                    {
                      if (v212 >> 61)
                        goto LABEL_477;
                      v213 = (char *)operator new(8 * v212);
                    }
                    else
                    {
                      v213 = 0;
                    }
                    v251 = (uint64_t *)&v213[8 * v210];
                    *v251 = v126;
                    v252 = v251 + 1;
                    if (v121 == __pa)
                    {
                      v2 = v313;
                    }
                    else
                    {
                      v253 = v121;
                      do
                      {
                        v254 = *--v253;
                        *v253 = 0;
                        *--v251 = v254;
                      }
                      while (v253 != __pa);
                      v2 = v313;
                      do
                      {
                        v256 = *--v121;
                        v255 = v256;
                        *v121 = 0;
                        if (v256)
                          MEMORY[0x1CAA32FC0](v255, 0x1020C400ADEC36ALL);
                      }
                      while (v121 != __pa);
                      v121 = __pa;
                    }
                    v309 = &v213[8 * v212];
                    if (v121)
                      operator delete(v121);
                    v87 = 1;
                    __pa = v251;
                    v62 = v252;
                    v19 = v311;
                    v110 = v318;
                  }
                  else
                  {
                    *v121 = v125;
                    v87 = 1;
                    v62 = v121 + 1;
                    v2 = v313;
                  }
                }
                else
                {
                  v62 = v121;
                }
                if (sub_1C50D4B3C(v2, (uint64_t)v76, (_DWORD *)&v331 + 1))
                {
                  v128 = v68 + 328 * v315;
                  v130 = *(_DWORD *)(v128 + 4);
                  v129 = *(_DWORD *)(v128 + 8);
                  if (v129 + v130)
                  {
                    if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 560)
                                                                                                + 320))(*(_QWORD *)(v2 + 560), *(_QWORD *)(v68 + 328 * v315 + 16), (v129 + v130), *(unsigned int *)(v68 + 328 * v315 + 12), 0x80000000 - EdgeProbability)&& sub_1C50D4988(v2, v76, (uint64_t)v353, 0, 0, 0))
                    {
                      v131 = operator new();
                      v132 = v131;
                      v133 = HIDWORD(v331);
                      *(_QWORD *)v131 = v110;
                      *(_DWORD *)(v131 + 8) = 1;
                      *(_DWORD *)(v131 + 12) = v133;
                      *(_DWORD *)(v131 + 16) = 0;
                      *(_BYTE *)(v131 + 20) = *(_BYTE *)(v131 + 20) & 0xF8 | v310;
                      if (v62 >= (uint64_t *)v309)
                      {
                        v214 = __pa;
                        v215 = v62 - __pa;
                        v216 = v215 + 1;
                        if ((unint64_t)(v215 + 1) >> 61)
                          goto LABEL_476;
                        if ((v309 - (char *)__pa) >> 2 > v216)
                          v216 = (v309 - (char *)__pa) >> 2;
                        if ((unint64_t)(v309 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
                          v217 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v217 = v216;
                        if (v217)
                        {
                          if (v217 >> 61)
                            goto LABEL_477;
                          v218 = (char *)operator new(8 * v217);
                        }
                        else
                        {
                          v218 = 0;
                        }
                        v257 = (uint64_t *)&v218[8 * v215];
                        *v257 = v132;
                        if (v62 == __pa)
                        {
                          v61 = v257;
                          v214 = v62;
                        }
                        else
                        {
                          v258 = v62;
                          v61 = v257;
                          do
                          {
                            v259 = *--v258;
                            *v258 = 0;
                            *--v61 = v259;
                          }
                          while (v258 != __pa);
                          do
                          {
                            v261 = *--v62;
                            v260 = v261;
                            *v62 = 0;
                            if (v261)
                              MEMORY[0x1CAA32FC0](v260, 0x1020C400ADEC36ALL);
                          }
                          while (v62 != __pa);
                        }
                        v309 = &v218[8 * v217];
                        if (v214)
                          operator delete(v214);
                        v62 = v257;
                        v110 = v318;
                      }
                      else
                      {
                        *v62 = v131;
                        v61 = __pa;
                      }
                      ++v62;
                      v145 = *v110;
LABEL_157:
                      v146 = 8;
                      goto LABEL_159;
                    }
                  }
                }
              }
            }
            else
            {
              v62 = v106;
LABEL_154:
              v19 = v311;
              if ((v316 & 1) == 0)
                goto LABEL_125;
            }
            v145 = *v110;
            if (v87)
            {
              v61 = __pa;
              goto LABEL_157;
            }
            v146 = 0;
            v61 = __pa;
LABEL_159:
            *v110 = v145 & 0xFFF1 | v146 | 4;
            v64 = v356 - 1;
            LODWORD(v356) = v356 - 1;
            if (v353[0] != v354)
            {
              free(v353[0]);
              v64 = v356;
            }
            if (!v64)
            {
LABEL_451:
              if (v355 != v357)
                free(v355);
              v63 = *(_QWORD *)(v308 + 8);
              continue;
            }
            goto LABEL_81;
          }
        }
      }
      v42 = (uint64_t *)(v32 - 288);
      v43 = (void *)*((_QWORD *)v32 - 36);
      v44 = (uint64_t)&v18[v31 - 272];
      if ((void *)v44 != v43)
      {
        *v37 = v43;
        *v39 = v41;
        v53 = &v18[v31 - 276];
        *((_DWORD *)v33 - 69) = *(_DWORD *)v53;
        *v42 = v44;
        *(_DWORD *)v53 = 0;
        goto LABEL_39;
      }
      if (v41 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v33 - 288), (uint64_t)(v33 - 272), *v40, 32);
        v45 = *v40;
        if (!(_DWORD)v45)
          goto LABEL_38;
        v43 = (void *)*v42;
        v38 = (char *)*v37;
      }
      else
      {
        v45 = *v40;
      }
      memcpy(v38, v43, 32 * v45);
LABEL_38:
      *v39 = v41;
LABEL_39:
      *v40 = 0;
      goto LABEL_40;
    }
  }
  v16 = 0;
LABEL_17:
  MEMORY[0x1CAA32FB4](v326, 8);
  return v16;
}

void sub_1C50D3DB8(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C50D3EE4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 328)
  {
    v5 = *(void **)(i - 144);
    if ((void *)(i - 128) != v5)
      free(v5);
    v6 = *(void **)(i - 288);
    if ((void *)(i - 272) != v6)
      free(v6);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

BOOL sub_1C50D3F54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v9;
  int v10;

  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 8);
  v4 = *(_DWORD *)(*a1 + 12);
  if (v3 == 7)
    v4 = -(v4 + *(_DWORD *)(v2 + 16));
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 8);
  v7 = *(_DWORD *)(*a2 + 12);
  if (v6 == 7)
    v7 = -(v7 + *(_DWORD *)(v5 + 16));
  if (v4 > v7)
    return 1;
  if (v4 != v7)
    return 0;
  v9 = *(unsigned __int8 *)(v2 + 20);
  v10 = *(unsigned __int8 *)(v5 + 20);
  if ((v9 & 1) == 0 && (v10 & 1) != 0)
    return 1;
  if (((v10 ^ v9) & 1) != 0)
    return 0;
  if (v3 < v6)
    return 1;
  if (v3 == v6)
    return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 16) + 24) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 24);
  return 0;
}

void sub_1C50D3FF0(uint64_t a1, __int16 *a2, uint64_t *a3, uint64_t *a4, int a5)
{
  __int16 v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::TargetSchedModel *v12;
  unsigned __int16 *v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  void *__p;
  void *v37;
  uint64_t v38;

  v5 = *a2;
  if ((*a2 & 0x81) == 0)
  {
    v7 = *((_DWORD *)a2 + 48);
    *((_QWORD *)a2 + 1) = 0;
    *((_DWORD *)a2 + 1) = 0;
    *a2 = v5 & 0xFDFF;
    v8 = *a3;
    v9 = *a4;
    if (*a3 != *a4)
    {
      v12 = (llvm::TargetSchedModel *)(a1 + 272);
      while (1)
      {
        v13 = *(unsigned __int16 **)(v8 + 16);
        v14 = *v13;
        if ((v14 - 13) < 5)
          goto LABEL_50;
        v15 = *(unsigned __int16 *)(v8 + 44);
        v21 = (v15 & 0xC) == 0;
        v16 = (v15 >> 2) & 1;
        if (v21)
          LOBYTE(v16) = 1;
        v17 = *((_QWORD *)v13 + 1);
        if ((v16 & 1) != 0)
        {
          if ((v17 & 0x800000) != 0)
            goto LABEL_14;
        }
        else
        {
          v25 = v8;
          if ((v17 & 0x800000) != 0)
            goto LABEL_14;
          while ((*(_WORD *)(v25 + 44) & 8) != 0)
          {
            v25 = *(_QWORD *)(v25 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v25 + 16) + 10) & 0x80) != 0)
              goto LABEL_14;
          }
        }
        if ((v14 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v8 + 32) + 48) & 0x20) != 0)
          goto LABEL_14;
        if ((v16 & 1) != 0)
          break;
        v31 = v8;
        if ((v17 & 0x1000000000) != 0)
          goto LABEL_14;
        while ((*(_WORD *)(v31 + 44) & 8) != 0)
        {
          v31 = *(_QWORD *)(v31 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v31 + 16) + 12) & 0x10) != 0)
            goto LABEL_14;
        }
LABEL_15:
        v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 768))(*(_QWORD *)(a1 + 560), v8);
        v19 = *a2;
        if ((*a2 & 0x10) == 0)
          goto LABEL_21;
        v20 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
        v21 = (*(_WORD *)(v8 + 44) & 0xC) != 0 && (*(_WORD *)(v8 + 44) & 4) == 0;
        if (v21)
        {
          v32 = v8;
          if ((v20 & 0x400) == 0)
          {
            while ((*(_WORD *)(v32 + 44) & 8) != 0)
            {
              v32 = *(_QWORD *)(v32 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 9) & 4) != 0)
                goto LABEL_67;
            }
LABEL_21:
            v22 = 0;
            goto LABEL_22;
          }
LABEL_67:
          if ((v20 & 0x100) != 0)
            goto LABEL_21;
          v33 = v8;
          while ((*(_WORD *)(v33 + 44) & 8) != 0)
          {
            v22 = 0;
            v33 = *(_QWORD *)(v33 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v33 + 16) + 9) & 1) != 0)
              goto LABEL_22;
          }
          v34 = v8;
          if ((v20 & 0x800) != 0)
          {
            LOBYTE(v30) = 1;
          }
          else
          {
            do
            {
              v35 = *(unsigned __int16 *)(v34 + 44);
              LODWORD(v30) = (v35 >> 3) & 1;
              if ((v35 & 8) == 0)
                break;
              v34 = *(_QWORD *)(v34 + 8);
            }
            while ((*(_BYTE *)(*(_QWORD *)(v34 + 16) + 9) & 8) == 0);
          }
        }
        else
        {
          if ((*(_QWORD *)(*(_QWORD *)(v8 + 16) + 8) & 0x500) != 0x400)
            goto LABEL_21;
          v30 = (v20 >> 11) & 1;
        }
        v22 = v30 ^ 1;
LABEL_22:
        if (a5)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
          if ((*(_WORD *)(v8 + 44) & 0xC) != 0 && (*(_WORD *)(v8 + 44) & 4) == 0)
          {
            v26 = v8;
            if ((v23 & 0x400) != 0)
              goto LABEL_77;
            while ((*(_WORD *)(v26 + 44) & 8) != 0)
            {
              v26 = *(_QWORD *)(v26 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v26 + 16) + 9) & 4) != 0)
                goto LABEL_77;
            }
          }
          else if ((v23 & 0x400) != 0)
          {
            goto LABEL_77;
          }
        }
        if ((v22 & 1) == 0)
        {
          if ((v18 & 1) != 0)
          {
            if (!v7)
              goto LABEL_77;
          }
          else
          {
            ++*((_DWORD *)a2 + 1);
            v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 968))(*(_QWORD *)(a1 + 560), v8);
            v28 = llvm::TargetSchedModel::computeInstrLatency(v12, (const llvm::MachineInstr *)v8, 0);
            if (v28 >= 2)
              *((_DWORD *)a2 + 2) = v28 + *((_DWORD *)a2 + 2) - 1;
            *((_DWORD *)a2 + 3) += v27;
            v19 = *a2;
            if ((*a2 & 0x200) != 0)
            {
LABEL_77:
              *a2 = v19 | 0x80;
              return;
            }
          }
          __p = 0;
          v37 = 0;
          v38 = 0;
          if ((*(unsigned int (**)(_QWORD, uint64_t, void **, uint64_t))(**(_QWORD **)(a1 + 560) + 824))(*(_QWORD *)(a1 + 560), v8, &__p, 1))
          {
            *a2 |= 0x200u;
          }
          v29 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 832))(*(_QWORD *)(a1 + 560), v8);
          if ((v29 & 1) == 0)
            *a2 |= 0x80u;
          if (__p)
          {
            v37 = __p;
            operator delete(__p);
          }
          if (!v29)
            return;
        }
LABEL_50:
        if ((*(_BYTE *)v8 & 4) == 0)
        {
          while ((*(_WORD *)(v8 + 44) & 8) != 0)
            v8 = *(_QWORD *)(v8 + 8);
        }
        v8 = *(_QWORD *)(v8 + 8);
        if (v8 == v9)
          return;
      }
      if ((v17 & 0x1000000000) == 0)
        goto LABEL_15;
LABEL_14:
      *a2 |= 0x100u;
      goto LABEL_15;
    }
  }
}

uint64_t sub_1C50D4350(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t FirstTerminator;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v43;
  llvm::MachineBasicBlock *v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(**(_QWORD **)(v6 + 32) + 112);
  if (v7 && *(char *)(v7 + 13) < 0)
  {
    v43 = *(_QWORD *)(v6 + 32);
    v44 = **(llvm::MachineBasicBlock ***)(a1 + 24);
    v51 = *(_QWORD *)(v6 + 56);
    v13 = *(_QWORD *)(v5 + 16);
    v14 = *(_QWORD *)(v13 + 56);
    v49 = v6 + 48;
    v50 = v14;
    v47 = 0;
    v48 = v13 + 48;
    sub_1C50D4BC0(v3, &v51, &v50, &v49, &v48, (_DWORD *)&v47 + 1, &v47, v6, v13, 1);
    v15 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 56);
    v16 = v51;
    if (v15 == v51)
    {
      v17 = 0;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 144))(*(_QWORD *)(v3 + 560), v15);
        if (!v15 || (*(_BYTE *)v15 & 4) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
            v15 = *(_QWORD *)(v15 + 8);
        }
        v17 += v18;
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != v16);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 56);
    v20 = v50;
    while (v19 != v20)
    {
      v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 144))(*(_QWORD *)(v3 + 560), v19);
      if (!v19 || (*(_BYTE *)v19 & 4) == 0)
      {
        while ((*(_WORD *)(v19 + 44) & 8) != 0)
          v19 = *(_QWORD *)(v19 + 8);
      }
      v17 += v21;
      v19 = *(_QWORD *)(v19 + 8);
    }
    v22 = v49;
    v23 = *(_QWORD *)(v4 + 16) + 48;
    if (v49 != v23)
    {
      v45 = 0;
      v24 = v49;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8);
        if ((*(_WORD *)(v24 + 44) & 0xC) != 0 && (*(_WORD *)(v24 + 44) & 4) == 0)
        {
          v27 = v24;
          if ((v25 & 0x400) == 0)
          {
            while ((*(_WORD *)(v27 + 44) & 8) != 0)
            {
              v27 = *(_QWORD *)(v27 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v27 + 16) + 9) & 4) != 0)
                goto LABEL_42;
            }
            goto LABEL_33;
          }
        }
        else if ((v25 & 0x400) == 0)
        {
          goto LABEL_33;
        }
LABEL_42:
        if ((*(_WORD *)v4 & 0x10) != 0 && (a2 & 1) == 0)
        {
          v45 += (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 352))(*(_QWORD *)(v3 + 560), v24);
          goto LABEL_34;
        }
LABEL_33:
        v17 += (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 144))(*(_QWORD *)(v3 + 560), v24);
LABEL_34:
        if ((*(_BYTE *)v24 & 4) == 0)
        {
          while ((*(_WORD *)(v24 + 44) & 8) != 0)
            v24 = *(_QWORD *)(v24 + 8);
        }
        v24 = *(_QWORD *)(v24 + 8);
        if (v24 == v23)
          goto LABEL_46;
      }
    }
    v45 = 0;
LABEL_46:
    v28 = v48;
    v29 = *(_QWORD *)(v5 + 16) + 48;
    if (v48 != v29)
    {
      v30 = v48;
      do
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8);
        if ((*(_WORD *)(v30 + 44) & 0xC) != 0 && (*(_WORD *)(v30 + 44) & 4) == 0)
        {
          v33 = v30;
          if ((v31 & 0x400) == 0)
          {
            while ((*(_WORD *)(v33 + 44) & 8) != 0)
            {
              v33 = *(_QWORD *)(v33 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v33 + 16) + 9) & 4) != 0)
                goto LABEL_62;
            }
            goto LABEL_53;
          }
        }
        else if ((v31 & 0x400) == 0)
        {
          goto LABEL_53;
        }
LABEL_62:
        if ((*(_WORD *)v5 & 0x10) != 0 && (a2 & 1) == 0)
        {
          v45 += (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 352))(*(_QWORD *)(v3 + 560), v30);
          goto LABEL_54;
        }
LABEL_53:
        v17 += (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 144))(*(_QWORD *)(v3 + 560), v30);
LABEL_54:
        if ((*(_BYTE *)v30 & 4) == 0)
        {
          while ((*(_WORD *)(v30 + 44) & 8) != 0)
            v30 = *(_QWORD *)(v30 + 8);
        }
        v30 = *(_QWORD *)(v30 + 8);
      }
      while (v30 != v29);
    }
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v44);
    if ((llvm::MachineBasicBlock *)((char *)v44 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
    {
      v36 = v45;
LABEL_83:
      if (v16 == v22)
      {
        v40 = 0;
      }
      else
      {
        v40 = 0;
        do
        {
          if (**(unsigned __int16 **)(v16 + 16) - 18 < 0xFFFFFFFB)
            ++v40;
          if ((*(_BYTE *)v16 & 4) == 0)
          {
            while ((*(_WORD *)(v16 + 44) & 8) != 0)
              v16 = *(_QWORD *)(v16 + 8);
          }
          v16 = *(_QWORD *)(v16 + 8);
        }
        while (v16 != v22);
      }
      while (v20 != v28)
      {
        if (**(unsigned __int16 **)(v20 + 16) - 18 < 0xFFFFFFFB)
          ++v40;
        if ((*(_BYTE *)v20 & 4) == 0)
        {
          while ((*(_WORD *)(v20 + 44) & 8) != 0)
            v20 = *(_QWORD *)(v20 + 8);
        }
        v20 = *(_QWORD *)(v20 + 8);
      }
      if (v40 <= 0xF)
      {
        v12 = v36 + (v17 >> 1) > (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 560) + 344))(*(_QWORD *)(v3 + 560), v43);
        goto LABEL_102;
      }
      goto LABEL_101;
    }
    v35 = FirstTerminator;
    v36 = v45;
    while (1)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 8);
      if ((*(_WORD *)(v35 + 44) & 0xC) != 0 && (*(_WORD *)(v35 + 44) & 4) == 0)
        break;
      if ((v37 & 0x400) != 0)
        goto LABEL_72;
LABEL_73:
      if ((*(_BYTE *)v35 & 4) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 8) != 0)
          v35 = *(_QWORD *)(v35 + 8);
      }
      v35 = *(_QWORD *)(v35 + 8);
      if ((llvm::MachineBasicBlock *)v35 == (llvm::MachineBasicBlock *)((char *)v44 + 48))
        goto LABEL_83;
    }
    v39 = v35;
    if ((v37 & 0x400) == 0)
    {
      while ((*(_WORD *)(v39 + 44) & 8) != 0)
      {
        v39 = *(_QWORD *)(v39 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v39 + 16) + 9) & 4) != 0)
          goto LABEL_72;
      }
      goto LABEL_73;
    }
LABEL_72:
    v36 += (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 560) + 352))(*(_QWORD *)(v3 + 560), v35);
    goto LABEL_73;
  }
  v8 = **(_DWORD **)(a1 + 40) + **(_DWORD **)(a1 + 32);
  v9 = *(_DWORD *)(v4 + 8) + *(_DWORD *)(v4 + 4);
  v10 = *(_DWORD *)(v5 + 8) + *(_DWORD *)(v5 + 4);
  if (v9 == v8 || v10 == v8)
  {
LABEL_101:
    v12 = 0;
    goto LABEL_102;
  }
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v3 + 560)
                                                                                                  + 328))(*(_QWORD *)(v3 + 560), *(_QWORD *)(v4 + 16), (v9 - v8), *(unsigned int *)(v4 + 12), *(_QWORD *)(v5 + 16), (v10 - v8), *(unsigned int *)(v5 + 12), **(unsigned int **)(a1 + 48));
LABEL_102:
  v41 = sub_1C50D4988(v3, *(__int16 **)(a1 + 56), *(_QWORD *)(a1 + 64) + 40, 0, 0, 1);
  return v12 & sub_1C50D4988(v3, *(__int16 **)(a1 + 72), *(_QWORD *)(a1 + 80), 0, 0, 1) & v41;
}

uint64_t sub_1C50D4878(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t v6;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *a5 = 0;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 == *(_QWORD *)(a3 + 16) || (*(_WORD *)a2 & 3) != 0)
    return 0;
  if (((*(_QWORD *)(v6 + 72) - *(_QWORD *)(v6 + 64)) & 0x7FFFFFFF0) == 0)
    goto LABEL_17;
  if ((*(_WORD *)a2 & 0x100) != 0)
    return 0;
  v11 = *(_DWORD *)(a2 + 4);
  if ((*(_WORD *)a2 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12 || *(_DWORD *)(a2 + 48))
    {
      if (!a4)
        v12 = *(_QWORD *)(a2 + 32);
      if (v12)
        ++v11;
    }
    else
    {
      --v11;
    }
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 336))(*(_QWORD *)(a1 + 560));
  if ((_DWORD)result)
  {
    *a5 = v11;
LABEL_17:
    v13 = *(_QWORD *)(a2 + 32);
    if (!a4)
      v13 = *(_QWORD *)(a2 + 24);
    if (!v13 && (*(_WORD *)a2 & 0x10) != 0 && !*(_QWORD *)(a2 + 24))
    {
      v15 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(v15 + 8);
      if (v13 == *(_QWORD *)(v15 + 32) + 320)
        return 0;
    }
    return v13 && v13 == *(_QWORD *)(a3 + 16);
  }
  return result;
}

uint64_t sub_1C50D4988(uint64_t a1, __int16 *a2, uint64_t a3, int a4, int a5, int a6)
{
  __int16 v6;
  char v7;
  int v13;
  uint64_t result;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[128];
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if ((*a2 & 1) != 0)
    return 0;
  v7 = a6;
  if ((v6 & 0x80) != 0 && !a6)
    return 0;
  v13 = *((_DWORD *)a2 + 48);
  if ((v6 & 0x10) == 0)
  {
    if (v13)
      return 0;
  }
  if (!v13
    || (result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 560) + 816))(*(_QWORD *)(a1 + 560), *(_QWORD *)a3, *(unsigned int *)(a3 + 8), *((_QWORD *)a2 + 23)), (_DWORD)result))
  {
    if ((v7 & 1) != 0 || !*((_DWORD *)a2 + 12))
      return 1;
    if (a4)
    {
      v15 = *(_BYTE **)a3;
      v16 = (_BYTE *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
      v23 = v25;
      v24 = 0x400000000;
      sub_1C4778D38((unsigned int *)&v23, v15, v16);
      v17 = (_BYTE *)*((_QWORD *)a2 + 5);
      v18 = &v17[32 * *((unsigned int *)a2 + 12)];
      v20 = v22;
      v21 = 0x400000000;
      sub_1C4778D38((unsigned int *)&v20, v17, v18);
      if (a5)
      {
        if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 560) + 728))(*(_QWORD *)(a1 + 560), &v20) & 1) != 0)goto LABEL_16;
      }
      if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 560) + 728))(*(_QWORD *)(a1 + 560), &v23) & 1) != 0)
LABEL_16:
        v19 = 0;
      else
        v19 = (*(uint64_t (**)(_QWORD, void *, _QWORD, void *, _QWORD))(**(_QWORD **)(a1 + 560) + 816))(*(_QWORD *)(a1 + 560), v20, v21, v23, v24);
      if (v20 != v22)
        free(v20);
      if (v23 != v25)
        free(v23);
      if (v19)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C50D4B3C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = 0;
  *a3 = 0;
  if ((*(_WORD *)a2 & 0x13) == 0)
  {
    if (((*(_QWORD *)(*(_QWORD *)(a2 + 16) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 16) + 64)) & 0x7FFFFFFF0) != 0)
    {
      if ((*(_WORD *)a2 & 0x100) != 0
        || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 336))(*(_QWORD *)(a1 + 560)))
      {
        return 0;
      }
      *a3 = *(_DWORD *)(a2 + 4);
    }
    return 1;
  }
  return v3;
}

uint64_t sub_1C50D4BC0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  uint64_t v21;
  char isIdenticalTo;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  void *__p;
  void *v41;
  uint64_t v42;

  while (1)
  {
    v18 = *a2;
    v19 = (_QWORD *)*a4;
    v20 = *a2 == *a4;
    if (*a2 == *a4)
      return v20;
    if (*a3 == *a5)
      goto LABEL_46;
    while (**(unsigned __int16 **)(v18 + 16) - 13 <= 4)
    {
      if ((*(_BYTE *)v18 & 4) == 0)
      {
        while ((*(_WORD *)(v18 + 44) & 8) != 0)
          v18 = *(_QWORD *)(v18 + 8);
      }
      v18 = *(_QWORD *)(v18 + 8);
      if ((_QWORD *)v18 == v19)
      {
        v18 = *a4;
        break;
      }
    }
    *a2 = v18;
    v21 = *a3;
    if (*a3 != *a5)
    {
      while (**(unsigned __int16 **)(v21 + 16) - 13 <= 4)
      {
        if ((*(_BYTE *)v21 & 4) == 0)
        {
          while ((*(_WORD *)(v21 + 44) & 8) != 0)
            v21 = *(_QWORD *)(v21 + 8);
        }
        v21 = *(_QWORD *)(v21 + 8);
        if (v21 == *a5)
        {
          v21 = *a5;
          break;
        }
      }
    }
    *a3 = v21;
    v18 = *a2;
    v19 = (_QWORD *)*a4;
    if (*a2 == *a4 || v21 == *a5)
      goto LABEL_46;
    isIdenticalTo = llvm::MachineInstr::isIdenticalTo(*a2, v21, 0);
    v18 = *a2;
    if ((isIdenticalTo & 1) == 0)
      break;
    __p = 0;
    v41 = 0;
    v42 = 0;
    v24 = (*(uint64_t (**)(_QWORD, uint64_t, void **, _QWORD))(**(_QWORD **)(a1 + 560) + 824))(*(_QWORD *)(a1 + 560), v18, &__p, 0);
    if ((v24 & 1) == 0)
    {
      v25 = *a2;
      v26 = *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8);
      if ((*(_WORD *)(*a2 + 44) & 0xC) != 0 && (*(_WORD *)(*a2 + 44) & 4) == 0)
      {
        v29 = *a2;
        if ((v26 & 0x400) == 0)
        {
          while ((*(_WORD *)(v29 + 44) & 8) != 0)
          {
            v29 = *(_QWORD *)(v29 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v29 + 16) + 9) & 4) != 0)
              goto LABEL_28;
          }
LABEL_27:
          ++*a6;
          v25 = *a2;
        }
      }
      else if ((v26 & 0x400) == 0)
      {
        goto LABEL_27;
      }
LABEL_28:
      if ((*(_BYTE *)v25 & 4) == 0)
      {
        while ((*(_WORD *)(v25 + 44) & 8) != 0)
          v25 = *(_QWORD *)(v25 + 8);
      }
      *a2 = *(_QWORD *)(v25 + 8);
      v28 = *a3;
      if (!*a3 || (*(_BYTE *)v28 & 4) == 0)
      {
        while ((*(_WORD *)(v28 + 44) & 8) != 0)
          v28 = *(_QWORD *)(v28 + 8);
      }
      *a3 = *(_QWORD *)(v28 + 8);
    }
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    if ((v24 & 1) != 0)
      return v20;
  }
  v19 = (_QWORD *)*a4;
LABEL_46:
  if ((_QWORD *)v18 == v19)
    return 1;
  v30 = (_QWORD *)*a3;
  if (*a3 == *a5)
    return 1;
  v31 = *v19 & 0xFFFFFFFFFFFFFFF8;
  if (!v31 || (*(_BYTE *)v31 & 4) == 0)
  {
    while ((*(_WORD *)(v31 + 44) & 4) != 0)
      v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *(_QWORD *)*a5 & 0xFFFFFFFFFFFFFFF8;
  if (!v32 || (*(_BYTE *)v32 & 4) == 0)
  {
    while ((*(_WORD *)(v32 + 44) & 4) != 0)
      v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
  }
  v33 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
  if (!v33 || (*(_BYTE *)v33 & 4) == 0)
  {
    while ((*(_WORD *)(v33 + 44) & 4) != 0)
      v33 = *(_QWORD *)v33 & 0xFFFFFFFFFFFFFFF8;
  }
  v34 = *v30 & 0xFFFFFFFFFFFFFFF8;
  if (!v34 || (*(_BYTE *)v34 & 4) == 0)
  {
    while ((*(_WORD *)(v34 + 44) & 4) != 0)
      v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_QWORD *)(a8 + 88) != *(_QWORD *)(a8 + 96))
  {
    if (!a10)
      goto LABEL_91;
    goto LABEL_73;
  }
  if (*(_QWORD *)(a9 + 88) == *(_QWORD *)(a9 + 96) || (a10 & 1) == 0)
  {
    while (1)
    {
LABEL_91:
      if (v31 == v33 || v32 == v34)
        goto LABEL_134;
      while (**(unsigned __int16 **)(v31 + 16) - 13 <= 4)
      {
        v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
        if (!v31 || (*(_BYTE *)v31 & 4) == 0)
        {
          while ((*(_WORD *)(v31 + 44) & 4) != 0)
            v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
        }
        if (v31 == v33)
        {
          v31 = v33;
          break;
        }
      }
      v35 = (_QWORD *)v34;
      if (v32 != v34)
      {
        while (**(unsigned __int16 **)(v32 + 16) - 13 <= 4)
        {
          v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
          if (!v32 || (*(_BYTE *)v32 & 4) == 0)
          {
            while ((*(_WORD *)(v32 + 44) & 4) != 0)
              v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
          }
          if (v32 == v34)
          {
            v35 = (_QWORD *)v34;
            goto LABEL_111;
          }
        }
        v35 = (_QWORD *)v32;
      }
LABEL_111:
      if (v33 == v31
        || (_QWORD *)v34 == v35
        || !llvm::MachineInstr::isIdenticalTo(v31, (uint64_t)v35, 0))
      {
        v32 = (unint64_t)v35;
        goto LABEL_134;
      }
      v36 = *(_WORD *)(v31 + 44);
      v37 = *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8);
      if ((v36 & 0xC) == 0 || (v36 & 4) != 0)
      {
        if ((v37 & 0x400) == 0)
          goto LABEL_121;
      }
      else
      {
        v38 = v31;
        if ((v37 & 0x400) == 0)
        {
          while ((*(_WORD *)(v38 + 44) & 8) != 0)
          {
            v38 = *(_QWORD *)(v38 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v38 + 16) + 9) & 4) != 0)
              goto LABEL_122;
          }
LABEL_121:
          ++*a7;
        }
      }
LABEL_122:
      v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v31 || (*(_BYTE *)v31 & 4) == 0)
      {
        while ((*(_WORD *)(v31 + 44) & 4) != 0)
          v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
      }
      v32 = *v35 & 0xFFFFFFFFFFFFFFF8;
      if (!v32 || (*(_BYTE *)v32 & 4) == 0)
      {
        while ((*(_WORD *)(v32 + 44) & 4) != 0)
          v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
      }
    }
  }
LABEL_73:
  if (v31 != v33)
  {
    while (sub_1C61D913C(v31, 1))
    {
      v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v31 || (*(_BYTE *)v31 & 4) == 0)
      {
        while ((*(_WORD *)(v31 + 44) & 4) != 0)
          v31 = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v31 == v33)
      {
        v31 = v33;
        break;
      }
    }
  }
  if (v32 == v34)
    goto LABEL_91;
  do
  {
    if (!sub_1C61D913C(v32, 1))
      goto LABEL_91;
    v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    if (!v32 || (*(_BYTE *)v32 & 4) == 0)
    {
      while ((*(_WORD *)(v32 + 44) & 4) != 0)
        v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (v32 != v34);
  v32 = v34;
LABEL_134:
  if (!v31 || (*(_BYTE *)v31 & 4) == 0)
  {
    while ((*(_WORD *)(v31 + 44) & 8) != 0)
      v31 = *(_QWORD *)(v31 + 8);
  }
  *a4 = *(_QWORD *)(v31 + 8);
  if (!v32 || (*(_BYTE *)v32 & 4) == 0)
  {
    while ((*(_WORD *)(v32 + 44) & 8) != 0)
      v32 = *(_QWORD *)(v32 + 8);
  }
  *a5 = *(_QWORD *)(v32 + 8);
  return 1;
}

BOOL sub_1C50D514C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, __int16 *a6, __int16 *a7)
{
  *a7 &= ~0x80u;
  *a6 &= ~0x80u;
  sub_1C50D3FF0(a1, a6, a2, a4, 1);
  if ((*a6 & 0x80) != 0)
    return 0;
  sub_1C50D3FF0(a1, a7, a3, a5, 1);
  return (*a7 & 0x80) == 0 && ((unsigned __int16)*a7 & (unsigned __int16)*a6 & 0x200) == 0;
}

uint64_t sub_1C50D51F0(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int8 *v6;

  v6 = 0;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 728))(*(_QWORD *)(a1 + 560), a2 + 40);
  if ((v4 & 1) == 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 560) + 264))(*(_QWORD *)(a1 + 560), *(_QWORD *)(a2 + 16), 0);
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 560) + 272))(*(_QWORD *)(a1 + 560), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 40), *(unsigned int *)(a2 + 48), &v6, 0);
    *(int8x16_t *)(a2 + 24) = vextq_s8(*(int8x16_t *)(a2 + 24), *(int8x16_t *)(a2 + 24), 8uLL);
    if (v6)
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
  return v4 ^ 1u;
}

uint64_t *sub_1C50D529C(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t i;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = a2 - 1;
      result = (uint64_t *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
      {
        v10 = *v8;
        *v8 = *v9;
        *v9 = v10;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (result != a2)
      {
        v17 = result + 1;
        if (result + 1 != a2)
        {
          v18 = 0;
          v19 = result;
          do
          {
            v20 = v19;
            v19 = v17;
            result = (uint64_t *)(*a3)(v17, v20);
            if ((_DWORD)result)
            {
              v21 = 0;
              v22 = (uint64_t *)*v19;
              *v19 = 0;
              v40 = v22;
              for (i = v18; ; i -= 8)
              {
                v24 = (uint64_t *)((char *)v8 + i);
                v25 = *(uint64_t *)((char *)v8 + i);
                *v24 = 0;
                v24[1] = v25;
                if (v21)
                  MEMORY[0x1CAA32FC0](v21, 0x1020C400ADEC36ALL);
                if (!i)
                  break;
                v26 = (uint64_t *)((char *)v8 + i);
                if (((*a3)((uint64_t *)&v40, (uint64_t *)((char *)v8 + i - 8)) & 1) == 0)
                  goto LABEL_20;
                v21 = *v24;
              }
              v26 = v8;
LABEL_20:
              v27 = v40;
              v40 = 0;
              v28 = *v26;
              *v26 = (uint64_t)v27;
              if (v28)
                MEMORY[0x1CAA32FC0](v28, 0x1020C400ADEC36ALL);
              result = v40;
              v40 = 0;
              if (result)
                result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
            }
            v17 = v19 + 1;
            v18 += 8;
          }
          while (v19 + 1 != a2);
        }
      }
    }
    else
    {
      v13 = (char *)a5;
      v14 = a4 >> 1;
      v15 = &result[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C50D5628(result, v15, a3, v16, a5);
        v29 = (uint64_t *)&v13[8 * v14];
        result = sub_1C50D5628(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        v30 = &v13[8 * a4];
        v31 = v29;
        v32 = (uint64_t *)v13;
        while (v31 != (uint64_t *)v30)
        {
          if ((*a3)(v31, v32))
          {
            v33 = *v31;
            *v31 = 0;
            result = (uint64_t *)*v8;
            *v8 = v33;
            if (result)
              result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
            ++v31;
          }
          else
          {
            v34 = *v32;
            *v32 = 0;
            result = (uint64_t *)*v8;
            *v8 = v34;
            if (result)
              result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
            ++v32;
          }
          ++v8;
          if (v32 == v29)
          {
            if (v31 != (uint64_t *)v30)
            {
              v35 = 0;
              do
              {
                v36 = v31[v35];
                v31[v35] = 0;
                result = (uint64_t *)v8[v35];
                v8[v35] = v36;
                if (result)
                  result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
                ++v35;
              }
              while (&v31[v35] != (uint64_t *)v30);
            }
            goto LABEL_47;
          }
        }
        if (v32 != v29)
        {
          v37 = 0;
          do
          {
            v38 = v32[v37];
            v32[v37] = 0;
            result = (uint64_t *)v8[v37];
            v8[v37] = v38;
            if (result)
              result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
            ++v37;
          }
          while (&v32[v37] != v29);
        }
LABEL_47:
        if (v13)
        {
          v39 = a4;
          do
          {
            result = *(uint64_t **)v13;
            *(_QWORD *)v13 = 0;
            if (result)
              result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
            v13 += 8;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        sub_1C50D529C(result, v15, a3, v16, a5, a6);
        sub_1C50D529C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v13, a6);
        return (uint64_t *)sub_1C50D5894((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, (unsigned int (**)(char *, uint64_t))a3, a4 >> 1, a4 - (a4 >> 1), v13, a6);
      }
    }
  }
  return result;
}

uint64_t *sub_1C50D5628(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      v13 = *v7;
      *v7 = 0;
      *v5 = v13;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(a2 - 1, result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      v12 = *v11;
      *v11 = 0;
      *v5++ = v12;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v27 = &result[a4 >> 1];
      sub_1C50D529C(result, v27, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_1C50D529C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        result = (uint64_t *)(*a3)(v28, v7);
        if ((_DWORD)result)
        {
          v29 = *v28;
          *v28++ = 0;
        }
        else
        {
          v29 = *v7;
          *v7++ = 0;
        }
        *v5++ = v29;
        if (v7 == v27)
        {
          if (v28 != a2)
          {
            v30 = 0;
            do
            {
              v31 = v28[v30];
              v28[v30] = 0;
              v5[v30++] = v31;
            }
            while (&v28[v30] != a2);
          }
          return result;
        }
      }
      if (v7 != v27)
      {
        v32 = 0;
        do
        {
          v33 = v7[v32];
          v7[v32] = 0;
          v5[v32++] = v33;
        }
        while (&v7[v32] != v27);
      }
    }
    else if (result != a2)
    {
      v14 = *result;
      *result = 0;
      v15 = result + 1;
      *a5 = v14;
      if (result + 1 != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v18 = v17++;
          result = (uint64_t *)(*a3)(v15, v18);
          if ((_DWORD)result)
          {
            v19 = *v18;
            *v18 = 0;
            v18[1] = v19;
            v20 = (uint64_t **)v5;
            if (v18 != v5)
            {
              v21 = v16;
              while (1)
              {
                v20 = (uint64_t **)((char *)v5 + v21);
                v22 = (uint64_t *)((char *)v5 + v21 - 8);
                if (!(*a3)(v15, v22))
                  break;
                v23 = *v22;
                *v22 = 0;
                v24 = *(uint64_t *)((char *)v5 + v21);
                *(uint64_t *)((char *)v5 + v21) = v23;
                if (v24)
                  MEMORY[0x1CAA32FC0](v24, 0x1020C400ADEC36ALL);
                v21 -= 8;
                if (!v21)
                {
                  v20 = (uint64_t **)v5;
                  break;
                }
              }
            }
            v25 = (uint64_t *)*v15;
            *v15 = 0;
            result = *v20;
            *v20 = v25;
            if (result)
              result = (uint64_t *)MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
          }
          else
          {
            v26 = (_QWORD *)*v15;
            *v15 = 0;
            *v17 = (uint64_t)v26;
          }
          ++v15;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C50D5894(uint64_t result, char *a2, char *a3, unsigned int (**a4)(char *, uint64_t), int64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t);
  unsigned int (**v70)(char *, uint64_t);

  v68 = a6;
  if (!a6)
    return result;
  v14 = (char *)result;
  while (a5 > a8 && v68 > a8)
  {
    if (!a5)
      return result;
    v15 = 0;
    v16 = -a5;
    while (1)
    {
      v17 = &v14[v15];
      result = ((uint64_t (*)(char *, char *))*a4)(a2, &v14[v15]);
      if ((result & 1) != 0)
        break;
      v15 += 8;
      if (__CFADD__(v16++, 1))
        return result;
    }
    v19 = -v16;
    v20 = v68;
    v66 = a3;
    v67 = a7;
    v70 = a4;
    v64 = v14;
    v65 = a8;
    if (-v16 >= v68)
    {
      if (v16 == -1)
      {
        v59 = *(_QWORD *)&v14[v15];
        *(_QWORD *)&v14[v15] = *(_QWORD *)a2;
        *(_QWORD *)a2 = v59;
        return result;
      }
      if (v16 > 0)
        v19 = 1 - v16;
      v24 = v19 >> 1;
      v26 = a3;
      v25 = &v14[8 * (v19 >> 1) + v15];
      v22 = (v26 - a2) >> 3;
      if (v26 == a2)
      {
        v23 = v26;
        goto LABEL_37;
      }
      v69 = *a4;
      v23 = a2;
      do
      {
        v27 = &v23[8 * (v22 >> 1)];
        v28 = v69(v27, (uint64_t)v25);
        if (v28)
          v22 += ~(v22 >> 1);
        else
          v22 >>= 1;
        if (v28)
          v23 = v27 + 8;
      }
      while (v22);
      v22 = (v23 - a2) >> 3;
    }
    else
    {
      if (v68 >= 0)
        v21 = v68;
      else
        v21 = v68 + 1;
      v22 = v21 >> 1;
      v23 = &a2[8 * (v21 >> 1)];
      v24 = (a2 - v14 - v15) >> 3;
      if (v17 == a2)
      {
        v25 = a2;
        goto LABEL_37;
      }
      v25 = &v14[v15];
      do
      {
        if ((*v70)(v23, (uint64_t)&v25[8 * (v24 >> 1)]))
        {
          v24 >>= 1;
        }
        else
        {
          v25 += 8 * (v24 >> 1) + 8;
          v24 += ~(v24 >> 1);
        }
      }
      while (v24);
      v24 = (v25 - v14 - v15) >> 3;
    }
    v20 = v68;
LABEL_37:
    v29 = v23;
    if (v25 != a2)
    {
      v29 = v25;
      if (a2 != v23)
      {
        v30 = *(_QWORD *)v25;
        *(_QWORD *)v25 = *(_QWORD *)a2;
        v29 = v25 + 8;
        v31 = a2;
        while (1)
        {
          *(_QWORD *)v31 = v30;
          v31 += 8;
          if (v31 == v23)
            break;
          if (v29 == a2)
            a2 = v31;
          v30 = *(_QWORD *)v29;
          *(_QWORD *)v29 = *(_QWORD *)v31;
          v29 += 8;
        }
        if (v29 != a2)
        {
          v32 = v29;
          v33 = a2;
          while (1)
          {
            v34 = v32;
            while (1)
            {
              v35 = *(_QWORD *)v32;
              *(_QWORD *)v34 = *(_QWORD *)v33;
              v34 += 8;
              *(_QWORD *)v33 = v35;
              v33 += 8;
              if (v33 != v23)
                break;
              v32 = v34;
              v33 = a2;
              if (v34 == a2)
                goto LABEL_53;
            }
            if (v34 == a2)
              a2 = v33;
            v32 += 8;
          }
        }
      }
    }
LABEL_53:
    a5 = -(uint64_t)(v24 + v16);
    if ((uint64_t)(v24 + v22) >= (uint64_t)(v20 - (v24 + v22) - v16))
    {
      result = sub_1C50D5894(v29, v23, v66, v70, a5, v20 - v22, v67, v65);
      v23 = v25;
      v40 = v22;
      a7 = v67;
      a5 = v24;
      a8 = v65;
      a3 = v29;
    }
    else
    {
      v36 = v25;
      v37 = v24;
      v38 = v20 - v22;
      v39 = v22;
      a7 = v67;
      a8 = v65;
      result = sub_1C50D5894(&v64[v15], v36, v29, v70, v37, v39, v67, v65);
      v40 = v38;
      v17 = v29;
      a3 = v66;
    }
    v68 = v40;
    v14 = v17;
    a2 = v23;
    a4 = v70;
    if (!v40)
      return result;
  }
  if (a5 <= v68)
  {
    if (v14 == a2)
      return result;
    v51 = 0;
    v42 = 0;
    do
    {
      v52 = *(_QWORD *)&v14[v51];
      *(_QWORD *)&v14[v51] = 0;
      *(_QWORD *)&a7[v51] = v52;
      ++v42;
      v51 += 8;
    }
    while (&v14[v51] != a2);
    if (v51)
    {
      v53 = a3;
      v54 = (uint64_t *)&a7[v51];
      v55 = (uint64_t)&a7[v51 - 8];
      v56 = (uint64_t *)a7;
      while (a2 != v53)
      {
        if ((*a4)(a2, (uint64_t)v56))
        {
          v57 = *(_QWORD *)a2;
          *(_QWORD *)a2 = 0;
          result = *(_QWORD *)v14;
          *(_QWORD *)v14 = v57;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
          a2 += 8;
        }
        else
        {
          v58 = *v56;
          *v56 = 0;
          result = *(_QWORD *)v14;
          *(_QWORD *)v14 = v58;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
          ++v56;
        }
        v14 += 8;
        if (v54 == v56)
          goto LABEL_99;
      }
      if (v54 != v56)
      {
        v62 = 0;
        do
        {
          v63 = v56[v62];
          v56[v62] = 0;
          result = *(_QWORD *)&v14[v62 * 8];
          *(_QWORD *)&v14[v62 * 8] = v63;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
          ++v62;
        }
        while ((uint64_t *)v55 != &v56[v62 - 1]);
      }
    }
  }
  else
  {
    if (a2 == a3)
      return result;
    v41 = 0;
    v42 = 0;
    do
    {
      v43 = *(_QWORD *)&a2[v41];
      *(_QWORD *)&a2[v41] = 0;
      *(_QWORD *)&a7[v41] = v43;
      ++v42;
      v41 += 8;
    }
    while (&a2[v41] != a3);
    if (v41)
    {
      v44 = &a7[v41];
      v45 = (uint64_t *)(a3 - 8);
      while (a2 != v14)
      {
        v46 = v14;
        v47 = (uint64_t *)(a2 - 8);
        v48 = (uint64_t *)(v44 - 8);
        if ((*a4)(v44 - 8, (uint64_t)(a2 - 8)))
        {
          v49 = *v47;
          *v47 = 0;
          result = *v45;
          *v45 = v49;
          a2 -= 8;
        }
        else
        {
          v50 = *v48;
          *v48 = 0;
          result = *v45;
          *v45 = v50;
          v44 -= 8;
        }
        v14 = v46;
        if (result)
          result = MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
        --v45;
        if (v44 == a7)
          goto LABEL_99;
      }
      if (v44 != a7)
      {
        v60 = 0;
        do
        {
          v61 = *(_QWORD *)&v44[v60 * 8 - 8];
          *(_QWORD *)&v44[v60 * 8 - 8] = 0;
          result = v45[v60];
          v45[v60] = v61;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
          --v60;
        }
        while (&v44[v60 * 8] != a7);
      }
    }
  }
LABEL_99:
  if (a7)
  {
    do
    {
      result = *(_QWORD *)a7;
      *(_QWORD *)a7 = 0;
      if (result)
        result = MEMORY[0x1CAA32FC0](result, 0x1020C400ADEC36ALL);
      a7 += 8;
      --v42;
    }
    while (v42);
  }
  return result;
}

unsigned int *sub_1C50D5E20(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE **a4, int a5)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::TargetSchedModel *v11;
  llvm::MachineFunction *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  _BYTE *v38;
  _BYTE *v39;
  int64_t v40;
  char *v41;
  char *v42;
  _QWORD *v44;
  char *v45;
  unsigned int *result;
  _QWORD *v47;

  v7 = *(_QWORD **)(a3 + 16);
  v8 = v7 + 6;
  v47 = v7;
  v9 = v7[7];
  if ((_QWORD *)v9 != v7 + 6)
  {
    v11 = (llvm::TargetSchedModel *)(a1 + 272);
    v12 = *(llvm::MachineFunction **)(*(_QWORD *)(a2 + 16) + 32);
    v13 = a1 + 592;
    do
    {
      if (a5)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8);
        if ((*(_WORD *)(v9 + 44) & 0xC) != 0 && (*(_WORD *)(v9 + 44) & 4) == 0)
        {
          v26 = v9;
          if ((v14 & 0x400) != 0)
            goto LABEL_67;
          while ((*(_WORD *)(v26 + 44) & 8) != 0)
          {
            v26 = *(_QWORD *)(v26 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v26 + 16) + 9) & 4) != 0)
              goto LABEL_67;
          }
        }
        else if ((v14 & 0x400) != 0)
        {
          goto LABEL_67;
        }
      }
      v16 = *((_QWORD *)v12 + 28);
      if (v16)
        *((_QWORD *)v12 + 28) = *(_QWORD *)v16;
      else
        v16 = sub_1C484358C((uint64_t)v12 + 128, 72, 3);
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v16, v12, (const llvm::MachineInstr *)v9);
      v17 = *(unsigned __int16 **)(v9 + 16);
      if ((v17[4] & 0x80) != 0)
      {
        v34 = *v17;
        v35 = v34 > 0x1F;
        v36 = (1 << v34) & 0x8E000000;
        if (v35 || v36 == 0)
          llvm::MachineFunction::copyCallSiteInfo(v12, (const llvm::MachineInstr *)v9, (const llvm::MachineInstr *)v16);
      }
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v16 + 24) = v19;
      v20 = *(_QWORD *)(v19 + 32);
      v21 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v21)
      {
        v27 = *(_QWORD *)(v16 + 32);
        v28 = *(_QWORD *)(v20 + 40);
        v29 = 32 * v21;
        do
        {
          if (!*(_BYTE *)v27)
          {
            v30 = *(unsigned int *)(v27 + 4);
            if ((int)v30 >= 0)
              v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
            else
              v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
            v32 = *v31;
            if (*v31)
            {
              v33 = *(_QWORD *)(v32 + 16);
              *(_QWORD *)(v32 + 16) = v27;
              *(_QWORD *)(v27 + 16) = v33;
              if ((*(_BYTE *)(v27 + 3) & 1) != 0)
              {
                *(_QWORD *)(v27 + 24) = v32;
              }
              else
              {
                *(_QWORD *)(v27 + 24) = 0;
                v31 = (uint64_t *)(v33 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v27 + 16) = v27;
              *(_QWORD *)(v27 + 24) = 0;
            }
            *v31 = v27;
          }
          v27 += 32;
          v29 -= 32;
        }
        while (v29);
      }
      v22 = *(_QWORD *)(v20 + 728);
      if (v22)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 24))(v22, v16);
      v23 = *(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v16 = v23 | *(_QWORD *)v16 & 7;
      *(_QWORD *)(v16 + 8) = v18 + 48;
      *(_QWORD *)(v23 + 8) = v16;
      *(_QWORD *)(v18 + 48) = *(_QWORD *)(v18 + 48) & 7 | v16;
      ++*(_DWORD *)(a2 + 4);
      v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 968))(*(_QWORD *)(a1 + 560), v9);
      v25 = llvm::TargetSchedModel::computeInstrLatency(v11, (const llvm::MachineInstr *)v9, 0);
      if (v25 >= 2)
        *(_DWORD *)(a2 + 8) = v25 + *(_DWORD *)(a2 + 8) - 1;
      *(_DWORD *)(a2 + 12) += v24;
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 560) + 768))(*(_QWORD *)(a1 + 560), v9) & 1) == 0
        && **(unsigned __int16 **)(v16 + 16) - 13 >= 5)
      {
        (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 560) + 808))(*(_QWORD *)(a1 + 560), v16, *a4, *((unsigned int *)a4 + 2));
      }
      sub_1C50D6994(v16, v13);
      if ((*(_BYTE *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 8) != 0)
          v9 = *(_QWORD *)(v9 + 8);
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while ((_QWORD *)v9 != v8);
  }
  if ((a5 & 1) == 0)
  {
    v39 = (_BYTE *)v47[11];
    v38 = (_BYTE *)v47[12];
    v40 = v38 - v39;
    if (v38 == v39)
    {
      v42 = 0;
      v41 = 0;
    }
    else
    {
      if (v40 < 0)
        abort();
      v41 = (char *)operator new(v38 - v39);
      memmove(v41, v39, v40);
      v42 = &v41[8 * (v40 >> 3)];
    }
    if (v47[1] == v47[4] + 320 || (*(_WORD *)a3 & 0x40) == 0)
      v44 = 0;
    else
      v44 = (_QWORD *)v47[1];
    if (v41 != v42)
    {
      v45 = v41;
      do
      {
        if (*(_QWORD **)v45 != v44)
          llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(a2 + 16), *(_QWORD **)v45, -1);
        v45 += 8;
      }
      while (v45 != v42);
    }
    if (v41)
      operator delete(v41);
  }
LABEL_67:
  sub_1C4778D38((unsigned int *)(a2 + 184), *(_BYTE **)(a3 + 184), (_BYTE *)(*(_QWORD *)(a3 + 184) + 32 * *(unsigned int *)(a3 + 192)));
  result = sub_1C4778D38((unsigned int *)(a2 + 184), *a4, &(*a4)[32 * *((unsigned int *)a4 + 2)]);
  *(_WORD *)a2 = *(_WORD *)a2 & 0xFFFB | *(_WORD *)a3 & 0x200;
  return result;
}

unsigned int *sub_1C50D620C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE **a4, unsigned __int16 **a5)
{
  unint64_t v7;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned __int16 *i;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int *result;
  BOOL v23;

  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 56);
  if (v7 == a3)
    goto LABEL_35;
  v11 = a5 != 0;
  v12 = a1 + 592;
  do
  {
    if (**(unsigned __int16 **)(v7 + 16) - 13 < 5
      || ((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 560) + 768))(*(_QWORD *)(a1 + 560), v7) & 1) != 0)
    {
      goto LABEL_28;
    }
    if (!v11)
      goto LABEL_27;
    v23 = 1;
    if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v7, 0, &v23))
      goto LABEL_27;
    v13 = *(unsigned int *)(v7 + 40);
    if (!(_DWORD)v13)
    {
LABEL_30:
      v11 = 1;
      if (v7)
        goto LABEL_28;
      goto LABEL_33;
    }
    v14 = *(_DWORD **)(v7 + 32);
    v15 = &v14[8 * v13];
    while (1)
    {
      if (*v14 || (*v14 & 0x1000000) == 0 || !v14[1])
        goto LABEL_10;
      v16 = (unsigned __int16)v14[1];
      if (a5[6])
        break;
      v19 = a5[1];
      if (!v19)
        goto LABEL_27;
      v20 = *a5;
      v21 = 2 * (_QWORD)v19;
      while (*v20 != v16)
      {
        ++v20;
        v21 -= 2;
        if (!v21)
          goto LABEL_27;
      }
      if (!v21)
        goto LABEL_27;
LABEL_10:
      v14 += 8;
      if (v14 == v15)
        goto LABEL_30;
    }
    for (i = a5[5]; i; i = *(unsigned __int16 **)i)
    {
      v18 = i[13];
      if (v18 <= v16)
      {
        if (v18 >= v16)
          goto LABEL_10;
        i += 4;
      }
    }
LABEL_27:
    (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 560) + 808))(*(_QWORD *)(a1 + 560), v7, *a4, *((unsigned int *)a4 + 2));
    sub_1C50D6994(v7, v12);
    v11 = 0;
    if (v7)
    {
LABEL_28:
      if ((*(_BYTE *)v7 & 4) != 0)
        goto LABEL_34;
    }
LABEL_33:
    while ((*(_WORD *)(v7 + 44) & 8) != 0)
      v7 = *(_QWORD *)(v7 + 8);
LABEL_34:
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a3);
LABEL_35:
  result = sub_1C4778D38((unsigned int *)(a2 + 184), *a4, &(*a4)[32 * *((unsigned int *)a4 + 2)]);
  *(_WORD *)a2 &= ~4u;
  *(_DWORD *)(a2 + 4) = 0;
  return result;
}

void sub_1C50D63E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t *v6;
  unint64_t *FirstTerminator;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v12;
  unint64_t *v13;
  int v14;
  unint64_t *v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  llvm::MachineBasicBlock *v26;
  const llvm::MachineBasicBlock *v27;
  unint64_t **v28;
  unint64_t **v29;
  const llvm::MachineBasicBlock **v30;
  const llvm::MachineBasicBlock **v31;
  llvm::MachineBasicBlock *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  llvm::MachineBasicBlock **v36;
  llvm::MachineBasicBlock **v37;
  llvm::MachineBasicBlock **v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  llvm::MachineBasicBlock *v42;
  llvm::MachineBasicBlock *v43;
  llvm::MachineBasicBlock *v44;
  __int16 v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unsigned int EdgeProbability;
  void *v54;
  uint64_t v55;
  _QWORD v56[5];

  v56[4] = *MEMORY[0x1E0C80C00];
  v6 = *(unint64_t **)(a3 + 16);
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v6);
  v8 = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a2 + 16));
  v9 = v8;
  v10 = (unint64_t *)v6[7];
  if (v10 != FirstTerminator && v8 != FirstTerminator)
  {
    v12 = *(unint64_t **)(a2 + 16);
    if (v12 != v6)
    {
      v46 = v12[5];
      v47 = (unint64_t *)v6[7];
      do
      {
        v47[3] = v46;
        v47 = (unint64_t *)v47[1];
      }
      while (v47 != FirstTerminator);
    }
    sub_1C4785D30(v8, v10, FirstTerminator);
  }
  v13 = v6 + 6;
  if (v6 + 6 != FirstTerminator)
  {
    v14 = (*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(a1 + 560) + 768))(*(_QWORD *)(a1 + 560), FirstTerminator);
    v15 = *(unint64_t **)(a2 + 16);
    v16 = v14 ? v9 : v15 + 6;
    if (v13 != v16)
    {
      if (v15 != v6)
      {
        v48 = v15[5];
        v49 = FirstTerminator;
        do
        {
          v49[3] = v48;
          v49 = (unint64_t *)v49[1];
        }
        while (v49 != v13);
      }
      sub_1C4785D30(v16, FirstTerminator, v6 + 6);
    }
  }
  if ((*(_WORD *)a2 & 0x10) != 0)
    sub_1C50D6C6C(*(unsigned int **)(*(_QWORD *)(a2 + 16) + 112), *(unsigned int **)(*(_QWORD *)(a2 + 16) + 120));
  v17 = (char *)v6[11];
  v18 = (char *)v6[12];
  v54 = v56;
  v55 = 0x400000000;
  v19 = v18 - v17;
  if ((unint64_t)(v18 - v17) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v19 >> 3, 8);
    v20 = v55;
    v21 = v55;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  if (v17 != v18)
  {
    v22 = (char *)v54 + 8 * v20;
    do
    {
      v23 = *(_QWORD *)v17;
      v17 += 8;
      *v22++ = v23;
    }
    while (v17 != v18);
  }
  v24 = v21 + ((unint64_t)v19 >> 3);
  LODWORD(v55) = v24;
  if (v6[1] == v6[4] + 320 || (*(_WORD *)a3 & 0x40) == 0)
    v26 = 0;
  else
    v26 = (llvm::MachineBasicBlock *)v6[1];
  v50 = a3;
  if (!a4)
    goto LABEL_35;
  v27 = *(const llvm::MachineBasicBlock **)(a2 + 16);
  v28 = (unint64_t **)*((_QWORD *)v27 + 11);
  v29 = (unint64_t **)*((_QWORD *)v27 + 12);
  if (v28 != v29)
  {
    while (*v28 != v6)
    {
      if (++v28 == v29)
      {
        v28 = (unint64_t **)*((_QWORD *)v27 + 12);
        break;
      }
    }
  }
  if (v28 == v29)
  {
LABEL_35:
    EdgeProbability = 0;
    if (!v24)
      goto LABEL_62;
    goto LABEL_36;
  }
  EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 576), v27, (const llvm::MachineBasicBlock *)v6);
  llvm::MachineBasicBlock::removeSuccessor(*(llvm::MachineBasicBlock **)(a2 + 16), (llvm::MachineBasicBlock *)v6, 0);
  v24 = v55;
  if ((_DWORD)v55)
  {
LABEL_36:
    v30 = (const llvm::MachineBasicBlock **)v54;
    v31 = (const llvm::MachineBasicBlock **)((char *)v54 + 8 * v24);
    do
    {
      v32 = *v30;
      if (*v30 == v26)
      {
        v42 = (llvm::MachineBasicBlock *)v6;
        v43 = v26;
      }
      else
      {
        if (a4)
        {
          v33 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 576), (const llvm::MachineBasicBlock *)v6, *v30);
          if (EdgeProbability)
            v34 = (EdgeProbability * (unint64_t)v33 + 0x40000000) >> 31;
          else
            v34 = v33;
          llvm::MachineBasicBlock::removeSuccessor((llvm::MachineBasicBlock *)v6, v32, 0);
          v35 = *(_QWORD **)(a2 + 16);
          v37 = (llvm::MachineBasicBlock **)v35[11];
          v36 = (llvm::MachineBasicBlock **)v35[12];
          if (v37 == v36)
            goto LABEL_61;
          v38 = (llvm::MachineBasicBlock **)v35[11];
          while (*v38 != v32)
          {
            if (++v38 == v36)
            {
              v38 = (llvm::MachineBasicBlock **)v35[12];
              break;
            }
          }
          if (v38 == v36)
          {
LABEL_61:
            llvm::MachineBasicBlock::addSuccessor(*(_QWORD **)(a2 + 16), v32, v34);
          }
          else
          {
            while (*v37 != v32)
            {
              if (++v37 == v36)
              {
                v37 = (llvm::MachineBasicBlock **)v35[12];
                break;
              }
            }
            v39 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 576), *(const llvm::MachineBasicBlock **)(a2 + 16), v32);
            v40 = v35[14];
            if (v40 != v35[15])
            {
              if (v39 + (unint64_t)v34 <= 0x80000000)
                v41 = v39 + v34;
              else
                v41 = 0x80000000;
              *(_DWORD *)(v40 + (((uint64_t)v37 - v35[11]) >> 1)) = v41;
            }
          }
          goto LABEL_59;
        }
        v42 = (llvm::MachineBasicBlock *)v6;
        v43 = *v30;
      }
      llvm::MachineBasicBlock::removeSuccessor(v42, v43, 0);
LABEL_59:
      ++v30;
    }
    while (v30 != v31);
  }
LABEL_62:
  v44 = *(llvm::MachineBasicBlock **)(v6[4] + 320);
  if (v44 != (llvm::MachineBasicBlock *)v6)
    llvm::MachineBasicBlock::moveAfter((uint64_t *)v6, v44);
  if ((*(_WORD *)a2 & 0x10) != 0 && (*(_WORD *)v50 & 0x10) != 0)
    sub_1C50D6C6C(*(unsigned int **)(*(_QWORD *)(a2 + 16) + 112), *(unsigned int **)(*(_QWORD *)(a2 + 16) + 120));
  sub_1C4778D38((unsigned int *)(a2 + 184), *(_BYTE **)(v50 + 184), (_BYTE *)(*(_QWORD *)(v50 + 184) + 32 * *(unsigned int *)(v50 + 192)));
  *(_DWORD *)(v50 + 192) = 0;
  *(int32x2_t *)(a2 + 4) = vadd_s32(*(int32x2_t *)(a2 + 4), *(int32x2_t *)(v50 + 4));
  *(_DWORD *)(a2 + 12) += *(_DWORD *)(v50 + 12);
  *(_QWORD *)(v50 + 8) = 0;
  *(_DWORD *)(v50 + 4) = 0;
  v45 = *(_WORD *)v50 & 0x200 | *(_WORD *)a2;
  *(_WORD *)a2 = v45;
  *(_WORD *)a2 = *(_WORD *)v50 & 0x40 | v45 & 0xFFBB;
  *(_WORD *)v50 &= ~4u;
  if (v54 != v56)
    free(v54);
}

BOOL sub_1C50D6860(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;

  v2 = (_QWORD *)a1[1];
  if (v2 == a2)
  {
    v4 = a1;
LABEL_14:
    v9 = (_QWORD *)v4[11];
    v8 = (_QWORD *)v4[12];
    if (v9 != v8)
    {
      while ((_QWORD *)*v9 != a2)
      {
        if (++v9 == v8)
        {
          v9 = v8;
          return v9 != v8;
        }
      }
    }
    return v9 != v8;
  }
  else
  {
    v3 = a1[4] + 320;
    while (v2 != (_QWORD *)v3)
    {
      v4 = v2;
      if (v2 + 6 != (_QWORD *)(v2[6] & 0xFFFFFFFFFFFFFFF8))
        break;
      v5 = (_QWORD *)a1[11];
      v6 = (_QWORD *)a1[12];
      if (v5 != v6)
      {
        while ((_QWORD *)*v5 != v4)
        {
          if (++v5 == v6)
          {
            v5 = (_QWORD *)a1[12];
            break;
          }
        }
      }
      if (v5 == v6)
        break;
      v2 = (_QWORD *)v4[1];
      a1 = v4;
      if (v2 == a2)
        goto LABEL_14;
    }
    return 0;
  }
}

void sub_1C50D6914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;

  v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned __int8 **, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)a3 + 272))(a3, a1, a2, 0, &v3, 0, &v3, 0);
  if (v3)
    llvm::MetadataTracking::untrack((uint64_t)&v3, v3);
}

void sub_1C50D6994(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  __int16 v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MachineInstr *v18;
  llvm::MachineFunction *v19;
  unsigned int v20;
  _WORD *v21;
  unsigned __int16 v22;
  unsigned int i;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[64];
  void *v33;
  __int128 v34;
  _BYTE v35[16];
  void *v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v6 = v5;
  v33 = v35;
  v34 = xmmword_1C6464ED0;
  v36 = 0;
  v37 = 0;
  v7 = *(_DWORD *)(v5 + 16);
  if (v7)
  {
    v8 = malloc_type_calloc(*(unsigned int *)(v5 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v8)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v36 = v8;
    v37 = v7;
  }
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = *(__int16 **)(a2 + 8);
    v11 = 2 * v9;
    do
    {
      v12 = *v10++;
      LOWORD(v30) = v12;
      sub_1C61DF708((uint64_t *)&v33, (unsigned __int16 *)&v30);
      v11 -= 2;
    }
    while (v11);
  }
  v30 = v32;
  v31 = 0x400000000;
  llvm::LivePhysRegs::stepForward(a2, a1, (uint64_t)&v30);
  v13 = (char *)v30;
  if ((_DWORD)v31)
  {
    if (v6)
      v14 = (_QWORD *)(v6 + 8);
    else
      v14 = 0;
    v15 = (char *)v30 + 16 * v31;
    do
    {
      v16 = *(unsigned __int16 *)v13;
      v17 = *((_QWORD *)v13 + 1);
      v18 = *(llvm::MachineInstr **)(v17 + 8);
      v19 = *(llvm::MachineFunction **)(*((_QWORD *)v18 + 3) + 32);
      v20 = *((unsigned __int8 *)v36 + v16);
      if (*(_BYTE *)v17 == 12)
      {
        while (v20 < v34)
        {
          if (*((unsigned __int16 *)v33 + v20) == (_DWORD)v16)
          {
            if ((_QWORD)v34 != v20)
            {
              v27 = 0;
              v28 = 0;
              v29 = 0;
              v25 = 0x2000000;
              v26 = v16;
              llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v25);
            }
            break;
          }
          v20 += 256;
        }
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v25 = 50331648;
        v26 = v16;
LABEL_22:
        llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v25);
      }
      else
      {
        while (v20 < v34)
        {
          if (*((unsigned __int16 *)v33 + v20) == (_DWORD)v16)
          {
            if ((_QWORD)v34 != v20)
            {
LABEL_34:
              v27 = 0;
              v28 = 0;
              v29 = 0;
              v25 = 0x2000000;
              v26 = v16;
              goto LABEL_22;
            }
            break;
          }
          v20 += 256;
        }
        v21 = (_WORD *)(v14[6] + 2 * *(unsigned int *)(*v14 + 24 * *(unsigned __int16 *)v13 + 4));
        if (*v21)
        {
          v22 = *v21 + v16;
          do
          {
            for (i = *((unsigned __int8 *)v36 + v22); i < v34; i += 256)
            {
              if (*((unsigned __int16 *)v33 + i) == v22)
              {
                if ((_QWORD)v34 != i)
                  goto LABEL_34;
                break;
              }
            }
            v24 = (unsigned __int16)v21[1];
            ++v21;
            v22 += v24;
          }
          while (v24);
        }
      }
      v13 += 16;
    }
    while (v13 != v15);
    v13 = (char *)v30;
  }
  if (v13 != v32)
    free(v13);
  free(v36);
  if (v33 != v35)
    free(v33);
}

unsigned int *sub_1C50D6C6C(unsigned int *result, unsigned int *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;

  if (result != a2)
  {
    v2 = 0;
    v3 = 0;
    v4 = result;
    do
    {
      v6 = *v4++;
      LODWORD(v5) = v6;
      v7 = v6 == -1;
      if (v6 == -1)
        ++v3;
      if (v7)
        v5 = 0;
      else
        v5 = v5;
      v2 += v5;
    }
    while (v4 != a2);
    if (v3)
    {
      if (v2 >> 31)
        v8 = 0;
      else
        v8 = (0x80000000 - v2) / v3;
      v11 = result;
      do
      {
        if (*v11 == -1)
          *v11 = v8;
        ++v11;
      }
      while (v11 != a2);
      if (v2 > 0x80000000)
        goto LABEL_21;
    }
    else
    {
      if (v2)
      {
        do
        {
LABEL_21:
          *result = ((v2 >> 1) + ((unint64_t)*result << 31)) / v2;
          ++result;
        }
        while (result != a2);
        return result;
      }
      v9 = a2 - result;
      if ((_DWORD)v9 == 0x80000000)
        v10 = 1;
      else
        v10 = ((v9 >> 1) | 0x80000000) / v9;
      if ((char *)a2 - (char *)result >= 1)
      {
        v12 = v9 + 1;
        do
        {
          *result++ = v10;
          --v12;
        }
        while (v12 > 1);
      }
    }
  }
  return result;
}

uint64_t sub_1C50D6D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, int a8, char a9, unsigned __int8 a10)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE *v21;
  void **v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char *i;
  llvm::MachineBasicBlock *v35;
  unint64_t *v36;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int16 v41;
  int v42;
  int v43;
  unsigned __int16 *v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  unsigned int v56;
  _QWORD *j;
  unsigned int v58;
  uint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  int v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  unsigned int v69;
  _QWORD *k;
  unsigned int v71;
  unsigned __int16 *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned __int16 *v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  unint64_t FirstTerminator;
  unint64_t v82;
  char v83;
  __int16 v84;
  int v85;
  int v86;
  unsigned __int16 *v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void **v93;
  void **v94;
  uint64_t v95;
  llvm::MachineBasicBlock *v96;
  llvm::MachineBasicBlock *v97;
  uint64_t v98;
  _QWORD *v99;
  unsigned __int16 v100;
  uint64_t *v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  __int128 v105;
  _QWORD v106[2];
  _QWORD *v107;
  uint64_t v108;
  void *v109;
  __int128 v110;
  _QWORD v111[2];
  _QWORD *v112;
  uint64_t v113;
  void *v114[2];
  _QWORD v115[18];

  v11 = a3;
  v115[16] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)a3 & 1) != 0
    || (*(_WORD *)a4 & 1) != 0
    || (v13 = *(_QWORD *)(a3 + 16), ((*(_QWORD *)(v13 + 72) - *(_QWORD *)(v13 + 64)) & 0x7FFFFFFF0) != 0)
    || (v14 = *(_QWORD *)(a4 + 16), ((*(_QWORD *)(v14 + 72) - *(_QWORD *)(v14 + 64)) & 0x7FFFFFFF0) != 0))
  {
    result = 0;
    *(_WORD *)a2 &= ~4u;
    *(_WORD *)a3 &= ~4u;
    *(_WORD *)a4 &= ~4u;
    return result;
  }
  if (*(_BYTE *)(v13 + 185) || *(_BYTE *)(v14 + 185))
    return 0;
  v22 = (void **)(a2 + 40);
  v21 = *(_BYTE **)(a2 + 40);
  v23 = &v21[32 * *(unsigned int *)(a2 + 48)];
  v114[0] = v115;
  v114[1] = (void *)0x400000000;
  sub_1C4778D38((unsigned int *)v114, v21, v23);
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 560) + 728))(*(_QWORD *)(a1 + 560), v114);
  if ((!a7 || a8) && ((a7 & 1) != 0 || (a8 & 1) != 0 || *(_DWORD *)(v11 + 4) <= *(_DWORD *)(a4 + 4)))
  {
    v93 = v114;
    v24 = a4;
  }
  else
  {
    v93 = (void **)(a2 + 40);
    v22 = v114;
    v24 = v11;
    v11 = a4;
  }
  v94 = v22;
  *(_DWORD *)(a2 + 4) -= (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 560) + 264))(*(_QWORD *)(a1 + 560), *(_QWORD *)(a2 + 16), 0);
  v25 = *(_QWORD *)(v11 + 16);
  v26 = *(unsigned __int16 ***)(v24 + 16);
  v27 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 592) = v27;
  *(_QWORD *)(a1 + 608) = 0;
  sub_1C61D8D14((void *)(a1 + 600), *(_DWORD *)(v27 + 16));
  if ((**(_BYTE **)(**(_QWORD **)(a1 + 584) + 360) & 4) != 0)
  {
    llvm::LivePhysRegs::addBlockLiveIns((llvm::LivePhysRegs *)(a1 + 592), (unsigned __int16 **)v25);
    llvm::LivePhysRegs::addBlockLiveIns((llvm::LivePhysRegs *)(a1 + 592), v26);
  }
  v96 = (llvm::MachineBasicBlock *)v26;
  v97 = (llvm::MachineBasicBlock *)v25;
  v28 = v25 + 48;
  v29 = *(_QWORD *)(v25 + 56);
  v30 = v29;
  if (v29 != v28)
  {
    v30 = v29;
    while (**(unsigned __int16 **)(v30 + 16) - 13 <= 4)
    {
      if ((*(_BYTE *)v30 & 4) == 0)
      {
        while ((*(_WORD *)(v30 + 44) & 8) != 0)
          v30 = *(_QWORD *)(v30 + 8);
      }
      v30 = *(_QWORD *)(v30 + 8);
      if (v30 == v28)
      {
        v30 = v28;
        break;
      }
    }
  }
  v95 = v24;
  v31 = *((_QWORD *)v96 + 7);
  if ((llvm::MachineBasicBlock *)v31 != (llvm::MachineBasicBlock *)((char *)v96 + 48))
  {
    while (**(unsigned __int16 **)(v31 + 16) - 13 <= 4)
    {
      if ((*(_BYTE *)v31 & 4) == 0)
      {
        while ((*(_WORD *)(v31 + 44) & 8) != 0)
          v31 = *(_QWORD *)(v31 + 8);
      }
      v31 = *(_QWORD *)(v31 + 8);
      if ((llvm::MachineBasicBlock *)v31 == (llvm::MachineBasicBlock *)((char *)v96 + 48))
      {
        v31 = (uint64_t)v96 + 48;
        break;
      }
    }
  }
  *(_DWORD *)(v11 + 4) -= a5;
  *(_DWORD *)(v95 + 4) -= a5;
  if (a5 && v28 != v30)
  {
    v32 = 0;
    do
    {
      if (**(unsigned __int16 **)(v30 + 16) - 18 < 0xFFFFFFFB)
        ++v32;
      if ((*(_BYTE *)v30 & 4) == 0)
      {
        while ((*(_WORD *)(v30 + 44) & 8) != 0)
          v30 = *(_QWORD *)(v30 + 8);
      }
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v32 < a5 && v30 != v28);
  }
  v99 = (_QWORD *)((char *)v96 + 48);
  if (!a5)
    goto LABEL_61;
  while (1)
  {
    if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v31))
    {
      llvm::MachineFunction::eraseCallSiteInfo(*((int32x2_t **)v96 + 4), (const llvm::MachineInstr *)v31);
      if (!v31)
        goto LABEL_50;
    }
    else if (!v31)
    {
      goto LABEL_50;
    }
    if ((*(_BYTE *)v31 & 4) != 0)
    {
      i = (char *)v96 + 48;
      goto LABEL_54;
    }
LABEL_50:
    for (i = (char *)v96 + 48; (*(_WORD *)(v31 + 44) & 8) != 0; v31 = *(_QWORD *)(v31 + 8))
      ;
LABEL_54:
    v31 = *(_QWORD *)(v31 + 8);
    if ((char *)v31 == i)
      break;
    a5 = (__PAIR64__(a5, **(unsigned __int16 **)(v31 + 16) - 18) - 4294967291u) >> 32;
    if (!a5)
      goto LABEL_60;
  }
  v31 = (uint64_t)i;
LABEL_60:
  v29 = *((_QWORD *)v97 + 7);
LABEL_61:
  if ((**(_BYTE **)(**(_QWORD **)(a1 + 584) + 360) & 4) != 0)
  {
    if (v29 != v30)
    {
      do
      {
        v109 = (char *)&v110 + 8;
        *(_QWORD *)&v110 = 0x400000000;
        llvm::LivePhysRegs::stepForward(a1 + 592, v29, (uint64_t)&v109);
        if (v109 != (char *)&v110 + 8)
          free(v109);
        if ((*(_BYTE *)v29 & 4) == 0)
        {
          while ((*(_WORD *)(v29 + 44) & 8) != 0)
            v29 = *(_QWORD *)(v29 + 8);
        }
        v29 = *(_QWORD *)(v29 + 8);
      }
      while (v29 != v30);
      v29 = *((_QWORD *)v97 + 7);
      goto LABEL_70;
    }
  }
  else
  {
LABEL_70:
    v35 = *(llvm::MachineBasicBlock **)(a2 + 16);
    v36 = (unint64_t *)((char *)v35 + 48);
    if (v29 != v30 && v36 != (unint64_t *)v30)
    {
      if (v35 != v97)
      {
        v91 = *((_QWORD *)v35 + 5);
        v92 = v29;
        do
        {
          *(_QWORD *)(v92 + 24) = v91;
          v92 = *(_QWORD *)(v92 + 8);
        }
        while (v92 != v30);
      }
      sub_1C4785D30(v36, (unint64_t *)v29, (unint64_t *)v30);
    }
  }
  sub_1C487FE80((uint64_t)v96 + 40, *((_QWORD *)v96 + 7), v31);
  v38 = *((_QWORD *)v97 + 7);
  v39 = v28;
  if (v28 == v38)
    goto LABEL_95;
  v40 = v28;
  while (2)
  {
    v39 = v40;
    v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
    if (v40 && (*(_BYTE *)v40 & 4) != 0)
    {
      v41 = *(_WORD *)(v40 + 44);
    }
    else
    {
      while (1)
      {
        v41 = *(_WORD *)(v40 + 44);
        if ((v41 & 4) == 0)
          break;
        v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    v42 = v41 & 0xC;
    v43 = v41 & 4;
    v44 = *(unsigned __int16 **)(v40 + 16);
    v45 = *((_QWORD *)v44 + 1);
    if (v42)
      v46 = v43 == 0;
    else
      v46 = 0;
    if (v46)
    {
      v47 = v40;
      if ((v45 & 0x400) == 0)
      {
        while ((*(_WORD *)(v47 + 44) & 8) != 0)
        {
          v47 = *(_QWORD *)(v47 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v47 + 16) + 9) & 4) != 0)
            goto LABEL_89;
        }
        goto LABEL_88;
      }
    }
    else if ((v45 & 0x400) == 0)
    {
LABEL_88:
      if (*v44 - 13 > 4)
        goto LABEL_95;
    }
LABEL_89:
    if (v40 != v38)
      continue;
    break;
  }
  v39 = *((_QWORD *)v97 + 7);
LABEL_95:
  if (a6)
  {
    v49 = 0;
    do
    {
      v39 = *(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8;
      if (!v39 || (*(_BYTE *)v39 & 4) == 0)
      {
        while ((*(_WORD *)(v39 + 44) & 4) != 0)
          v39 = *(_QWORD *)v39 & 0xFFFFFFFFFFFFFFF8;
      }
      if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v39))
        llvm::MachineFunction::eraseCallSiteInfo(*((int32x2_t **)v97 + 4), (const llvm::MachineInstr *)v39);
      if (**(unsigned __int16 **)(v39 + 16) - 18 < 0xFFFFFFFB)
        ++v49;
    }
    while (v49 != a6);
  }
  sub_1C487FE80((uint64_t)v97 + 40, v39, v28);
  v48 = *(_QWORD *)(v95 + 16) + 48;
  if ((a9 & 1) != 0)
  {
    *(_DWORD *)(v95 + 4) -= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 264))(*(_QWORD *)(a1 + 560));
LABEL_111:
    v51 = v48;
    goto LABEL_112;
  }
  v50 = *((_QWORD *)v96 + 7);
  if (v48 == v50)
    goto LABEL_111;
  while (2)
  {
    v51 = v48;
    v48 = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8;
    if (v48 && (*(_BYTE *)v48 & 4) != 0)
    {
      v84 = *(_WORD *)(v48 + 44);
    }
    else
    {
      while (1)
      {
        v84 = *(_WORD *)(v48 + 44);
        if ((v84 & 4) == 0)
          break;
        v48 = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    v85 = v84 & 0xC;
    v86 = v84 & 4;
    v87 = *(unsigned __int16 **)(v48 + 16);
    v88 = *((_QWORD *)v87 + 1);
    if (v85)
      v89 = v86 == 0;
    else
      v89 = 0;
    if (v89)
    {
      v90 = v48;
      if ((v88 & 0x400) == 0)
      {
        while ((*(_WORD *)(v90 + 44) & 8) != 0)
        {
          v90 = *(_QWORD *)(v90 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v90 + 16) + 9) & 4) != 0)
            goto LABEL_199;
        }
        goto LABEL_198;
      }
    }
    else if ((v88 & 0x400) == 0)
    {
LABEL_198:
      if (*v87 - 13 > 4)
        goto LABEL_112;
    }
LABEL_199:
    if (v48 != v50)
      continue;
    break;
  }
  v51 = *((_QWORD *)v96 + 7);
LABEL_112:
  while (a6)
  {
    v51 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFF8;
    if (!v51 || (*(_BYTE *)v51 & 4) == 0)
    {
      while ((*(_WORD *)(v51 + 44) & 4) != 0)
        v51 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFF8;
    }
    a6 = (__PAIR64__(a6, **(unsigned __int16 **)(v51 + 16) - 18) - 4294967291u) >> 32;
  }
  v108 = 0;
  v109 = v111;
  v110 = xmmword_1C6612EF0;
  v112 = 0;
  v113 = 0;
  v111[1] = &v112;
  v104 = v106;
  v105 = xmmword_1C6612EF0;
  v106[1] = &v107;
  v107 = 0;
  if (!(*(unsigned int (**)(_QWORD, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *))(**(_QWORD **)(a1 + 560) + 360))(*(_QWORD *)(a1 + 560), v97, v96))goto LABEL_181;
  v52 = *((_QWORD *)v96 + 7);
  if (v52 == v51)
    goto LABEL_181;
  v98 = v28;
  while (2)
  {
    if (**(unsigned __int16 **)(v52 + 16) - 13 < 5)
      goto LABEL_176;
    v101 = &v103;
    v102 = xmmword_1C6612EF0;
    v53 = *(unsigned int *)(v52 + 40);
    if (!(_DWORD)v53)
      goto LABEL_176;
    v54 = *(_DWORD **)(v52 + 32);
    v55 = &v54[8 * v53];
    while (2)
    {
      if (!*v54)
      {
        v56 = v54[1];
        if (v56)
        {
          if ((*v54 & 0x1000000) != 0)
          {
            v59 = v102;
            if ((unint64_t)(v102 + 1) > *((_QWORD *)&v102 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v101, &v103, v102 + 1, 2);
              v59 = v102;
            }
            *((_WORD *)v101 + v59) = v56;
            *(_QWORD *)&v102 = v102 + 1;
          }
          else
          {
            if (v113)
            {
              for (j = v112; j; j = (_QWORD *)*j)
              {
                v58 = *((unsigned __int16 *)j + 13);
                if (v58 <= (unsigned __int16)v56)
                {
                  if (v58 >= (unsigned __int16)v56)
                    goto LABEL_126;
                  ++j;
                }
              }
              goto LABEL_146;
            }
            if (!(_QWORD)v110)
              goto LABEL_146;
            v60 = (unsigned __int16 *)v109;
            v61 = 2 * v110;
            while (*v60 != (unsigned __int16)v56)
            {
              ++v60;
              v61 -= 2;
              if (!v61)
                goto LABEL_146;
            }
            if (!v61)
            {
LABEL_146:
              v62 = *(_QWORD *)(a1 + 568);
              v63 = (_QWORD *)(v62 + 8);
              if (!v62)
                v63 = 0;
              v64 = v63[6];
              if (v64)
              {
                v65 = (unsigned __int16 *)(v64 + 2 * *(unsigned int *)(*v63 + 24 * v56 + 4));
                do
                {
                  v100 = v56;
                  sub_1C50D789C((uint64_t **)&v104, &v100);
                  v66 = *v65++;
                  v56 += v66;
                }
                while (v66);
              }
            }
          }
        }
      }
LABEL_126:
      v54 += 8;
      if (v54 != v55)
        continue;
      break;
    }
    v67 = (unsigned __int16 *)v101;
    v68 = (unsigned __int16 *)v101 + v102;
    if (!(_QWORD)v102)
      goto LABEL_173;
    while (2)
    {
      v69 = *v67;
      if (v108)
      {
        for (k = v107; k; k = (_QWORD *)*k)
        {
          v71 = *((unsigned __int16 *)k + 13);
          if (v69 >= v71)
          {
            if (v71 >= v69)
              goto LABEL_171;
            ++k;
          }
        }
        goto LABEL_166;
      }
      if (!(_QWORD)v105)
        goto LABEL_166;
      v72 = (unsigned __int16 *)v104;
      v73 = 2 * v105;
      while (*v72 != v69)
      {
        ++v72;
        v73 -= 2;
        if (!v73)
          goto LABEL_166;
      }
      if (!v73)
      {
LABEL_166:
        v74 = *(_QWORD *)(a1 + 568);
        v75 = (_QWORD *)(v74 + 8);
        if (!v74)
          v75 = 0;
        v76 = v75[6];
        if (v76)
        {
          v77 = (unsigned __int16 *)(v76 + 2 * *(unsigned int *)(*v75 + 24 * *v67 + 4));
          do
          {
            v100 = v69;
            sub_1C50D789C((uint64_t **)&v109, &v100);
            v78 = *v77++;
            v69 += v78;
          }
          while (v78);
        }
      }
LABEL_171:
      if (++v67 != v68)
        continue;
      break;
    }
    v67 = (unsigned __int16 *)v101;
LABEL_173:
    v28 = v98;
    if (v67 != (unsigned __int16 *)&v103)
      free(v67);
    if (v52)
    {
LABEL_176:
      if ((*(_BYTE *)v52 & 4) != 0)
        goto LABEL_180;
    }
    while ((*(_WORD *)(v52 + 44) & 8) != 0)
      v52 = *(_QWORD *)(v52 + 8);
LABEL_180:
    v52 = *(_QWORD *)(v52 + 8);
    if (v52 != v51)
      continue;
    break;
  }
LABEL_181:
  sub_1C50D620C(a1, v11, v28, (_BYTE **)v94, (unsigned __int16 **)&v109);
  v79 = v99 != (_QWORD *)(*v99 & 0xFFFFFFFFFFFFFFF8) && v51 == (_QWORD)v99;
  v80 = v95;
  if (v79)
  {
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v97);
    v82 = llvm::MachineBasicBlock::getFirstTerminator(v96);
    if (v28 == FirstTerminator)
      v83 = 0;
    else
      v83 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 560) + 768))(*(_QWORD *)(a1 + 560), FirstTerminator);
    if (v99 == (_QWORD *)v82)
    {
      v51 = (unint64_t)v96 + 48;
    }
    else if (((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 560) + 768))(*(_QWORD *)(a1 + 560), v82) & 1) != 0|| (v83 & 1) == 0 && (*(_WORD *)v95 & 0x10) != 0)
    {
      v51 = (unint64_t)v96 + 48;
    }
    else
    {
      v51 = *v99 & 0xFFFFFFFFFFFFFFF8;
      if (!v51 || (*(_BYTE *)v51 & 4) == 0)
      {
        if ((*(_WORD *)(v51 + 44) & 4) != 0)
        {
          v80 = v95;
          do
            v51 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v51 + 44) & 4) != 0);
        }
        else
        {
          v80 = v95;
        }
      }
    }
  }
  sub_1C50D620C(a1, v80, v51, (_BYTE **)v93, 0);
  sub_1C50D63E8(a1, a2, v11, a10);
  sub_1C50D63E8(a1, a2, v80, a10);
  sub_1C6143384(v107);
  if (v104 != v106)
    free(v104);
  sub_1C6143384(v112);
  if (v109 != v111)
    free(v109);
  if (v114[0] != v115)
    free(v114[0]);
  return 1;
}

uint64_t **sub_1C50D789C(uint64_t **result, unsigned __int16 *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  __int16 v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  __int16 v11;

  v3 = result;
  if (result[6])
  {
    v4 = result + 4;
    v5 = *a2;
    return (uint64_t **)sub_1C50D7994(v4, v5, v5);
  }
  v7 = *result;
  v6 = (unint64_t)result[1];
  v8 = *a2;
  if (v6)
  {
    v9 = 2 * v6;
    v10 = (unsigned __int16 *)*result;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 2;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return result;
LABEL_10:
    if (v6 > 3)
    {
      do
      {
        v11 = *((_WORD *)*v3 + v6 - 1);
        sub_1C50D7994(v3 + 4, v11, v11);
        v6 = (unint64_t)v3[1] - 1;
        v3[1] = (uint64_t *)v6;
      }
      while (v6);
      v5 = *a2;
      v4 = v3 + 4;
      return (uint64_t **)sub_1C50D7994(v4, v5, v5);
    }
  }
  if (v6 >= (unint64_t)result[2])
  {
    result = (uint64_t **)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v6 + 1, 2);
    v7 = *v3;
    v6 = (unint64_t)v3[1];
  }
  *((_WORD *)v7 + v6) = v8;
  v3[1] = (uint64_t *)((char *)v3[1] + 1);
  return result;
}

uint64_t sub_1C50D7994(uint64_t **a1, unsigned __int16 a2, __int16 a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  _WORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((unsigned __int16 *)v5 + 13);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[13] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

uint64_t sub_1C50D7A58()
{
  int v1;
  int v2;
  int *v3;

  v3 = &v2;
  v1 = 1;
  v2 = -1;
  sub_1C61DF7C0(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7F85D8, &dword_1C475E000);
  v1 = 1;
  v2 = -1;
  v3 = &v2;
  sub_1C61DF88C((uint64_t)&unk_1ED7F8698, "ifcvt-fn-stop", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F8698, &dword_1C475E000);
  v1 = 1;
  v2 = -1;
  v3 = &v2;
  sub_1C61DF964(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7F8758, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8818, "disable-ifcvt-simple", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8818, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F88D8, "disable-ifcvt-simple-false", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F88D8, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8998, "disable-ifcvt-triangle", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8998, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8A58, "disable-ifcvt-triangle-rev", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8A58, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8B18, "disable-ifcvt-triangle-false", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8B18, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8BD8, "disable-ifcvt-triangle-false-rev", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8BD8, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8C98, "disable-ifcvt-diamond", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8C98, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8D58, "disable-ifcvt-forked-diamond", (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8D58, &dword_1C475E000);
  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED7F8E18, "ifcvt-branch-fold", (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F8E18, &dword_1C475E000);
}

uint64_t sub_1C50D7D34(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Implicit null checks";
  *(_QWORD *)(v3 + 8) = 20;
  *(_QWORD *)(v3 + 16) = "implicit-null-checks";
  *(_QWORD *)(v3 + 24) = 20;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6EEA;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C50D7DC4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C50D7DC4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6EEA);
  *(_QWORD *)v1 = &off_1E8142CA8;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F8ED8);
  if (v3 != -1)
  {
    v7[0] = sub_1C50D7D34;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F8ED8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C50D7EAC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C50D7F40(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50D7FCC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

BOOL sub_1C50D8004(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t ****v20;
  uint64_t ***v21;
  uint64_t ****v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t ****v33;
  uint64_t ***v34;
  uint64_t v35;
  __int16 v36;
  BOOL v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int RegSizeInBits;
  unsigned int v53;
  int v54;
  int v55;
  _BOOL4 v56;
  BOOL v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned __int16 *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  char v65;
  uint64_t v66;
  unsigned __int16 *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v71;
  unint64_t v73;
  _DWORD *v74;
  BOOL v75;
  unint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  __int128 v90;
  unsigned __int8 *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned __int16 *v116;
  _WORD *v117;
  int v118;
  int v119;
  uint64_t v120;
  int v122;
  unsigned int v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  int v127;
  unsigned __int16 *v128;
  __int16 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int16 *v132;
  __int16 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t *v142;
  int v143;
  unint64_t v144;
  unsigned __int8 **v145;
  char *v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  int64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unsigned __int16 *v175;
  int v176;
  unsigned int v177;
  __int16 v178;
  int v179;
  uint64_t v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm::MachineFunction *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int v207;
  const llvm::MachineOperand *v208;
  uint64_t v209;
  llvm::MachineInstr *v210;
  llvm::MachineFunction *v211;
  const llvm::MachineOperand *v212;
  __int128 v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  int *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _DWORD *v225;
  _DWORD *v226;
  _QWORD *v227;
  int v228;
  unsigned __int16 *v229;
  unsigned __int16 *v230;
  unsigned __int16 *v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  int *v244;
  int v245;
  int v246;
  BOOL v247;
  _QWORD *v249;
  unsigned __int16 *v250;
  unsigned __int16 *v251;
  unsigned __int16 *v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 *v275;
  BOOL v276;
  uint64_t v277;
  int v278;
  unint64_t *v280;
  uint64_t *v281;
  unsigned int v282;
  _QWORD *v283;
  int v284;
  unint64_t *v285;
  uint64_t v286;
  int *v287;
  uint64_t *v288;
  uint64_t v289;
  _BOOL4 v290;
  uint64_t v291;
  unint64_t *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  _QWORD v314[4];
  uint64_t v315;
  _QWORD v316[3];
  char v317;
  unsigned __int8 *v318[2];
  __int128 v319;
  __int128 v320;
  unsigned __int8 *v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  void *v325;
  uint64_t v326;
  _BYTE v327[768];
  _QWORD *v328;
  uint64_t v329;
  _QWORD v330[10];

  v3 = a1;
  v330[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(**(_QWORD **)(a2 + 40) + 16);
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  *(_QWORD *)(v3 + 272) = *(_QWORD *)(a2 + 56);
  v5 = **(void ****)(v3 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v3 + 264) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v7 = (uint64_t *)v327;
  v325 = v327;
  v326 = 0x1000000000;
  v8 = (_QWORD *)(a2 + 320);
  v9 = *(_QWORD **)(a2 + 328);
  if (v9 == v8)
  {
    v278 = 0;
    return v278 != 0;
  }
  v10 = v330;
  v303 = v3;
  do
  {
    v11 = v9[2];
    if (!v11)
      goto LABEL_327;
    v12 = *(_QWORD *)(v11 + 40);
    if (v12 == v11 + 40)
    {
      v14 = 0;
    }
    else
    {
      v13 = v12 - 24;
      if (!v12)
        v13 = 0;
      v14 = *(unsigned __int8 *)(v13 + 16) - 29 >= 0xB ? 0 : (uint64_t ***)v13;
    }
    if ((*((_BYTE *)v14 + 23) & 0x20) == 0)
      goto LABEL_327;
    v15 = ***v14;
    *(_QWORD *)&v305 = v14;
    v16 = *(_DWORD *)(v15 + 2496);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 2480);
      v18 = v16 - 1;
      v19 = v18 & ((v14 >> 4) ^ (v14 >> 9));
      v20 = (uint64_t ****)(v17 + 40 * v19);
      v21 = *v20;
      if (*v20 == v14)
        goto LABEL_24;
      v22 = 0;
      v23 = 1;
      while (v21 != (uint64_t ***)-4096)
      {
        if (v22)
          v24 = 0;
        else
          v24 = v21 == (uint64_t ***)-8192;
        if (v24)
          v22 = v20;
        v25 = v19 + v23++;
        v19 = v25 & v18;
        v20 = (uint64_t ****)(v17 + 40 * v19);
        v21 = *v20;
        if (*v20 == v14)
          goto LABEL_24;
      }
      if (v22)
        v33 = v22;
      else
        v33 = v20;
    }
    else
    {
      v33 = 0;
    }
    v20 = (uint64_t ****)sub_1C541AB24(v15 + 2480, (uint64_t)&v305, (uint64_t *)&v305, v33);
    v34 = (uint64_t ***)v305;
    v20[4] = 0;
    v20[3] = 0;
    *v20 = v34;
    v20[1] = (uint64_t ***)(v20 + 3);
    v20[2] = (uint64_t ***)0x100000000;
LABEL_24:
    v26 = *((unsigned int *)v20 + 4);
    if (!(_DWORD)v26)
      goto LABEL_327;
    v27 = v20[1] + 1;
    v28 = 16 * v26;
    while (*((_DWORD *)v27 - 2) != 14)
    {
      v27 += 2;
      v28 -= 16;
      if (!v28)
        goto LABEL_327;
    }
    if (!*v27)
      goto LABEL_327;
    LODWORD(v305) = 2;
    DWORD2(v305) = DWORD2(v305) & 0xFFF00000 | 1;
    v306 = 0uLL;
    v307 = v307 & 0xFFF00000 | 1;
    v308 = 0;
    v309 = 0;
    v311 = 0;
    v312 = 0;
    v310 = 0;
    v313 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD *, __int128 *, uint64_t))(**(_QWORD **)(v3 + 248) + 256))(*(_QWORD *)(v3 + 248), v9, &v305, 1) & 1) != 0)goto LABEL_326;
    if (BYTE8(v305))
      goto LABEL_326;
    if (v307 != 1)
      goto LABEL_326;
    if (v309)
      goto LABEL_326;
    if (v305 > 1)
      goto LABEL_326;
    v29 = v312;
    if (v312)
    {
      if (!v313)
        goto LABEL_326;
    }
    v30 = (_DWORD)v305 == 1 ? v310 : v311;
    v31 = (_DWORD)v305 == 1 ? v311 : v310;
    v296 = v31;
    v297 = v30;
    if (((*(_QWORD *)(v30 + 72) - *(_QWORD *)(v30 + 64)) & 0x7FFFFFFF8) != 8)
      goto LABEL_326;
    v301 = HIDWORD(v305);
    if (v312)
    {
      v32 = v9[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v32 || (*(_BYTE *)v32 & 4) == 0)
      {
        while ((*(_WORD *)(v32 + 44) & 4) != 0)
          v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v29 != v32)
      {
        if (llvm::MachineInstr::findRegisterDefOperandIdx(v32, v301, 0, 1, *(_QWORD *)(v303 + 256)) != -1)
          goto LABEL_326;
        v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
        if (!v32 || (*(_BYTE *)v32 & 4) == 0)
        {
          while ((*(_WORD *)(v32 + 44) & 4) != 0)
            v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
        }
        v29 = v312;
      }
    }
    v300 = (uint64_t)v7;
    v295 = v10;
    v328 = v10;
    v329 = 0x800000000;
    v35 = *(_QWORD *)(v297 + 56);
    if (v35 == v297 + 48)
      goto LABEL_323;
    v298 = 0;
    do
    {
      v36 = *(_WORD *)(v35 + 44);
      v37 = (v36 & 0xC) == 0 || (v36 & 4) != 0;
      v38 = *(unsigned __int16 **)(v35 + 16);
      v39 = *((_QWORD *)v38 + 1);
      if (v37)
      {
        if ((v39 & 0x80) != 0)
          break;
        if ((v39 & 0x200000) == 0)
          goto LABEL_72;
LABEL_86:
        if ((*(_WORD *)(v35 + 44) & 0x4000) == 0)
          break;
        goto LABEL_72;
      }
      v46 = v35;
      if ((v39 & 0x80) != 0)
        break;
      while ((*(_WORD *)(v46 + 44) & 8) != 0)
      {
        v46 = *(_QWORD *)(v46 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v46 + 16) + 8) & 0x80) != 0)
          goto LABEL_323;
      }
      v47 = v35;
      if ((v39 & 0x200000) != 0)
        goto LABEL_86;
      while ((*(_WORD *)(v47 + 44) & 8) != 0)
      {
        v47 = *(_QWORD *)(v47 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v47 + 16) + 10) & 0x20) != 0)
          goto LABEL_86;
      }
LABEL_72:
      if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v35))
        break;
      v40 = *(_QWORD *)(v35 + 48);
      if (v40 >= 8)
      {
        if ((v40 & 7) == 0)
        {
          *(_QWORD *)(v35 + 48) = v40 & 0xFFFFFFFFFFFFFFF8;
          v45 = v35 + 56;
          v42 = (int *)(v35 + 48);
          goto LABEL_89;
        }
        if ((*(_QWORD *)(v35 + 48) & 7) == 3)
        {
          v41 = (int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          if (v41)
          {
            v44 = *v41;
            v42 = v41 + 2;
            v43 = v44;
            if ((_DWORD)v44)
            {
              v45 = (uint64_t)&v42[2 * v43];
              do
              {
LABEL_89:
                if ((*(_WORD *)(*(_QWORD *)v42 + 36) & 0xE00) != 0 || (*(_WORD *)(*(_QWORD *)v42 + 32) & 4) != 0)
                  goto LABEL_323;
                v42 += 2;
              }
              while (v42 != (int *)v45);
            }
          }
        }
      }
      if (v298 >= dword_1ED7F9020)
        break;
      if (*((unsigned __int8 *)v38 + 4) > 1u)
        goto LABEL_268;
      v48 = *v38 - 1;
      if (v48 <= 1 && (*(_BYTE *)(*(_QWORD *)(v35 + 32) + 48) & 8) != 0)
        goto LABEL_288;
      v49 = *((_QWORD *)v38 + 1);
      if (v37)
      {
        if ((v49 & 0x80000) != 0)
          goto LABEL_100;
      }
      else
      {
        v135 = v35;
        if ((v49 & 0x80000) != 0)
          goto LABEL_289;
        while ((*(_WORD *)(v135 + 44) & 8) != 0)
        {
          v135 = *(_QWORD *)(v135 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v135 + 16) + 10) & 8) != 0)
            goto LABEL_288;
        }
      }
      if (v48 <= 1 && (*(_BYTE *)(*(_QWORD *)(v35 + 32) + 48) & 0x10) != 0)
        goto LABEL_288;
      if (v37)
      {
        if ((v49 & 0x100000) == 0)
          goto LABEL_268;
LABEL_100:
        if ((v38[5] & 0x40) != 0)
          goto LABEL_268;
        goto LABEL_101;
      }
      v137 = v35;
      if ((v49 & 0x100000) == 0)
      {
        do
        {
          if ((*(_WORD *)(v137 + 44) & 8) == 0)
            goto LABEL_268;
          v137 = *(_QWORD *)(v137 + 8);
        }
        while ((*(_BYTE *)(*(_QWORD *)(v137 + 16) + 10) & 0x10) == 0);
LABEL_288:
        if (v37)
          goto LABEL_100;
      }
LABEL_289:
      v136 = v35;
      while ((v38[5] & 0x40) != 0 || *v38 == 20)
      {
        if ((*(_WORD *)(v136 + 44) & 8) == 0)
          goto LABEL_268;
        v136 = *(_QWORD *)(v136 + 8);
        v38 = *(unsigned __int16 **)(v136 + 16);
      }
LABEL_101:
      v292 = (unint64_t *)(v35 + 48);
      v293 = v328;
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v303 + 248) + 696))(v316, *(_QWORD *)(v303 + 248), v35, *(_QWORD *)(v303 + 256));
      if (!v317)
        goto LABEL_268;
      v50 = v316[0];
      v286 = v316[1];
      v51 = HIDWORD(v316[0]);
      v315 = v316[2];
      if ((_DWORD)v301 != LODWORD(v316[0]) && (_DWORD)v301 != HIDWORD(v316[0]))
        goto LABEL_268;
      v289 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 24) + 32) + 40);
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(v303 + 256), v301, v289);
      v53 = v51;
      v284 = RegSizeInBits;
      if (v50)
      {
        v54 = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(v303 + 256), v50, v289);
        v53 = v51;
        if (v54 != v284)
          goto LABEL_268;
      }
      if (v53)
      {
        v55 = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(v303 + 256), v51, v289);
        v53 = v51;
        if (v55 != v284)
          goto LABEL_268;
      }
      v282 = v53;
      v314[0] = v35;
      v314[1] = v303;
      v314[2] = v289;
      v314[3] = &v315;
      v290 = sub_1C50D9B54((uint64_t)v314, v50, 1);
      v56 = sub_1C50D9B54((uint64_t)v314, v282, v286);
      if (v50)
      {
        if ((_DWORD)v301 != v50 && !v290)
          goto LABEL_268;
      }
      v57 = !(_DWORD)v51 || (_DWORD)v301 == (_DWORD)v51;
      v58 = v57 || v56;
      if (v58 != 1 || v315 <= -(uint64_t)dword_1ED7F8F60 || v315 >= dword_1ED7F8F60)
        goto LABEL_268;
      v59 = v293;
      if (!v298)
      {
LABEL_216:
        v97 = (uint64_t)v328;
        sub_1C50D9E84((_BOOL8)&v321, v303, v35, (uint64_t)v328, v329);
        if (!(_BYTE)v321)
          goto LABEL_268;
        if ((_BYTE)v323)
        {
          v98 = *(_QWORD *)v322;
          v99 = *(unsigned __int16 **)(*(_QWORD *)v322 + 16);
          v100 = *v99 - 1;
          if (v100 <= 1 && (*(_BYTE *)(*(_QWORD *)(v98 + 32) + 48) & 8) != 0)
            goto LABEL_268;
          v101 = *(unsigned __int16 *)(v98 + 44);
          v24 = (v101 & 0xC) == 0;
          v102 = (v101 >> 2) & 1;
          if (v24)
            LOBYTE(v102) = 1;
          v103 = *((_QWORD *)v99 + 1);
          if ((v102 & 1) != 0)
          {
            if ((v103 & 0x80000) != 0)
              goto LABEL_268;
          }
          else
          {
            v138 = *(_QWORD *)v322;
            if ((v103 & 0x80000) != 0)
              goto LABEL_268;
            while ((*(_WORD *)(v138 + 44) & 8) != 0)
            {
              v138 = *(_QWORD *)(v138 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v138 + 16) + 10) & 8) != 0)
                goto LABEL_268;
            }
          }
          if (v100 <= 1 && (*(_BYTE *)(*(_QWORD *)(v98 + 32) + 48) & 0x10) != 0)
            goto LABEL_268;
          if ((v102 & 1) != 0)
          {
            if ((v103 & 0x100000) != 0)
              goto LABEL_268;
          }
          else
          {
            v139 = *(_QWORD *)v322;
            if ((v103 & 0x100000) != 0)
              goto LABEL_268;
            while ((*(_WORD *)(v139 + 44) & 8) != 0)
            {
              v139 = *(_QWORD *)(v139 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v139 + 16) + 10) & 0x10) != 0)
                goto LABEL_268;
            }
          }
          v104 = *(unsigned int *)(v98 + 40);
          if ((_DWORD)v104)
          {
            v105 = *(_QWORD *)(v98 + 32);
            v106 = v105 + 32 * v104;
            while (1)
            {
              if (!*(_BYTE *)v105)
              {
                v107 = *(_DWORD *)(v105 + 4);
                if (v107)
                  break;
              }
LABEL_230:
              v105 += 32;
              if (v105 == v106)
                goto LABEL_278;
            }
            v108 = *(_QWORD *)(v303 + 256);
            if (v108)
              v109 = (uint64_t *)(v108 + 8);
            else
              v109 = 0;
            v110 = *v109;
            v111 = *(_DWORD *)(*v109 + 24 * v107 + 16) & 0xF;
            v112 = ((unint64_t)*(unsigned int *)(*v109 + 24 * v107 + 16) >> 3) & 0x1FFFFFFE;
            v115 = v109 + 5;
            v114 = v109[5];
            v113 = v115[1];
            v116 = (unsigned __int16 *)(v113 + v112);
            v118 = *v116;
            v117 = v116 + 1;
            v119 = v118 + v111 * v107;
            while (1)
            {
              v120 = *(unsigned __int16 *)(v114 + 4 * (unsigned __int16)v119);
              if (*(_WORD *)(v114 + 4 * (unsigned __int16)v119) && v113 != 0)
                break;
              v122 = (unsigned __int16)*v117++;
              v119 += v122;
              if (!v122)
                goto LABEL_230;
            }
            v123 = *(unsigned __int16 *)(v114 + 4 * (unsigned __int16)v119 + 2) << 16;
            v124 = *(unsigned __int16 **)(v296 + 160);
LABEL_244:
            v125 = (unsigned __int16 *)(v113 + 2 * *(unsigned int *)(v110 + 24 * v120 + 8));
            while (1)
            {
              if (*(unsigned __int16 **)(v296 + 152) != v124)
              {
                v126 = *(unsigned __int16 **)(v296 + 152);
                while (*v126 != (unsigned __int16)v120)
                {
                  v126 += 8;
                  if (v126 == v124)
                    goto LABEL_249;
                }
                if (*((_QWORD *)v126 + 1))
                  goto LABEL_268;
              }
LABEL_249:
              v127 = *v125++;
              LOWORD(v120) = v127 + v120;
              if (!v127)
              {
                v120 = HIWORD(v123);
                if ((_DWORD)v120)
                {
                  v123 >>= 16;
                }
                else
                {
                  if (!*v117)
                    goto LABEL_230;
                  v119 += (unsigned __int16)*v117++;
                  v128 = (unsigned __int16 *)(v114 + 4 * (unsigned __int16)v119);
                  v120 = *v128;
                  v123 = v128[1] << 16;
                }
                goto LABEL_244;
              }
            }
          }
LABEL_278:
          sub_1C50D9E84((_BOOL8)v318, v303, *(_QWORD *)v322, v97, (v322 - v97) >> 3);
          if (!LOBYTE(v318[0]) || (_BYTE)v319)
            goto LABEL_268;
        }
        else
        {
          v98 = 0;
        }
        v140 = v326;
        if (v326 >= HIDWORD(v326))
        {
          v321 = (unsigned __int8 *)v35;
          v322 = v312;
          *(_QWORD *)&v323 = v9;
          *((_QWORD *)&v323 + 1) = v297;
          *(_QWORD *)&v324 = v296;
          *((_QWORD *)&v324 + 1) = v98;
          v144 = v326 + 1;
          if (v325 <= &v321 && (char *)v325 + 48 * v326 > (char *)&v321)
          {
            v150 = (char *)&v321 - (_BYTE *)v325;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, v300, v144, 48);
            v146 = (char *)v325;
            v145 = (unsigned __int8 **)((char *)v325 + v150);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, v300, v144, 48);
            v145 = &v321;
            v146 = (char *)v325;
          }
          v147 = &v146[48 * v326];
          v148 = *(_OWORD *)v145;
          v149 = *((_OWORD *)v145 + 2);
          *((_OWORD *)v147 + 1) = *((_OWORD *)v145 + 1);
          *((_OWORD *)v147 + 2) = v149;
          *(_OWORD *)v147 = v148;
          v143 = v326 + 1;
        }
        else
        {
          v141 = v312;
          v142 = (uint64_t *)((char *)v325 + 48 * v326);
          *v142 = v35;
          v142[1] = v141;
          v142[2] = (uint64_t)v9;
          v142[3] = v297;
          v142[4] = v296;
          v142[5] = v98;
          v143 = v140 + 1;
        }
        LODWORD(v326) = v143;
        break;
      }
      v283 = &v293[v298];
      while (1)
      {
        v294 = v59;
        v60 = *v59;
        v61 = *(unsigned __int16 **)(*v59 + 16);
        v62 = *v61 - 1;
        if (v62 > 1 || (*(_BYTE *)(*(_QWORD *)(v60 + 32) + 48) & 0x10) == 0)
        {
          v63 = *(unsigned __int16 *)(v60 + 44);
          v24 = (v63 & 0xC) == 0;
          v64 = (v63 >> 2) & 1;
          if (v24)
            v65 = 1;
          else
            v65 = v64;
          v66 = *((_QWORD *)v61 + 1);
          if ((v65 & 1) != 0)
          {
            if ((v66 & 0x100000) != 0)
              goto LABEL_131;
          }
          else
          {
            v93 = *v59;
            if ((v66 & 0x100000) != 0)
              goto LABEL_131;
            while ((*(_WORD *)(v93 + 44) & 8) != 0)
            {
              v93 = *(_QWORD *)(v93 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v93 + 16) + 10) & 0x10) != 0)
                goto LABEL_131;
            }
          }
          if (v62 > 1 || (*(_BYTE *)(*(_QWORD *)(v60 + 32) + 48) & 8) == 0)
          {
            if ((v65 & 1) != 0)
            {
              if ((v66 & 0x80000) == 0)
                goto LABEL_190;
            }
            else
            {
              v95 = *v59;
              if ((v66 & 0x80000) == 0)
              {
                while ((*(_WORD *)(v95 + 44) & 8) != 0)
                {
                  v95 = *(_QWORD *)(v95 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v95 + 16) + 10) & 8) != 0)
                    goto LABEL_131;
                }
                goto LABEL_190;
              }
            }
          }
        }
LABEL_131:
        v67 = *(unsigned __int16 **)(v35 + 16);
        v68 = *v67 - 1;
        if (v68 > 1 || (*(_BYTE *)(*(_QWORD *)(v35 + 32) + 48) & 0x10) == 0)
        {
          v69 = *((_QWORD *)v67 + 1);
          if ((*(_WORD *)(v35 + 44) & 0xC) != 0 && (*(_WORD *)(v35 + 44) & 4) == 0)
          {
            v94 = v35;
            if ((v69 & 0x100000) != 0)
              goto LABEL_143;
            while ((*(_WORD *)(v94 + 44) & 8) != 0)
            {
              v94 = *(_QWORD *)(v94 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v94 + 16) + 10) & 0x10) != 0)
                goto LABEL_143;
            }
          }
          else if ((v69 & 0x100000) != 0)
          {
            goto LABEL_143;
          }
          if (v62 > 1 || (*(_BYTE *)(*(_QWORD *)(v60 + 32) + 48) & 0x10) == 0)
          {
            v71 = *((_QWORD *)v61 + 1);
            if ((*(_WORD *)(v60 + 44) & 0xC) != 0 && (*(_WORD *)(v60 + 44) & 4) == 0)
            {
              v96 = *v59;
              if ((v71 & 0x100000) == 0)
              {
                while ((*(_WORD *)(v96 + 44) & 8) != 0)
                {
                  v96 = *(_QWORD *)(v96 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v96 + 16) + 10) & 0x10) != 0)
                    goto LABEL_143;
                }
                goto LABEL_190;
              }
            }
            else if ((v71 & 0x100000) == 0)
            {
              goto LABEL_190;
            }
          }
        }
LABEL_143:
        v73 = *v292;
        if (*v292 < 8)
          goto LABEL_257;
        if ((v73 & 7) != 0)
        {
          v74 = (_DWORD *)(v73 & 0xFFFFFFFFFFFFFFF8);
          v75 = (*v292 & 7) != 3 || v74 == 0;
          if (v75 || !*v74)
          {
LABEL_257:
            if (v68 <= 1 && (*(_BYTE *)(*(_QWORD *)(v35 + 32) + 48) & 0x10) != 0)
              goto LABEL_323;
            v129 = *(_WORD *)(v35 + 44);
            v130 = *((_QWORD *)v67 + 1);
            if ((v129 & 0xC) != 0 && (v129 & 4) == 0)
            {
              v131 = v35;
              if ((v130 & 0x100000) != 0)
                goto LABEL_323;
              while ((*(_WORD *)(v131 + 44) & 8) != 0)
              {
                v131 = *(_QWORD *)(v131 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v131 + 16) + 10) & 0x10) != 0)
                  goto LABEL_323;
              }
              goto LABEL_268;
            }
LABEL_267:
            if ((v130 & 0x100000) != 0)
              goto LABEL_323;
            goto LABEL_268;
          }
        }
        else
        {
          v73 &= 0xFFFFFFFFFFFFFFF8;
          *v292 = v73;
        }
        v76 = *(_QWORD *)(v60 + 48);
        v285 = (unint64_t *)(v60 + 48);
        if (v76 < 8)
          break;
        if ((v76 & 7) == 0)
        {
          *v285 = v76 & 0xFFFFFFFFFFFFFFF8;
          v73 = *v292;
          goto LABEL_159;
        }
        if ((*(_QWORD *)(v60 + 48) & 7) != 3)
          break;
        v77 = (_DWORD *)(v76 & 0xFFFFFFFFFFFFFFF8);
        if (!v77 || !*v77)
          break;
LABEL_159:
        if (v73 >= 8)
        {
          if ((v73 & 7) == 0)
          {
            *v292 = v73 & 0xFFFFFFFFFFFFFFF8;
            v281 = (uint64_t *)(v35 + 56);
            v288 = (uint64_t *)(v35 + 48);
            goto LABEL_166;
          }
          if ((v73 & 7) == 3)
          {
            v287 = (int *)(v73 & 0xFFFFFFFFFFFFFFF8);
            if ((v73 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              v78 = *v287;
              v288 = (uint64_t *)(v287 + 2);
              if ((_DWORD)v78)
              {
                v281 = &v288[v78];
LABEL_166:
                v280 = (unint64_t *)(v60 + 56);
                do
                {
                  v79 = *v285;
                  if (*v285 >= 8)
                  {
                    v291 = *v288;
                    if ((v79 & 7) == 0)
                    {
                      v83 = v285;
                      *v285 = v79 & 0xFFFFFFFFFFFFFFF8;
                      v85 = v280;
                      goto LABEL_176;
                    }
                    v80 = (int *)(v79 & 0xFFFFFFFFFFFFFFF8);
                    if ((*v285 & 7) == 3 && v80 != 0)
                    {
                      v84 = *v80;
                      v83 = (unint64_t *)(v80 + 2);
                      v82 = v84;
                      if ((_DWORD)v84)
                      {
                        v85 = &v83[v82];
LABEL_176:
                        v299 = v85;
                        do
                        {
                          v86 = (_QWORD *)*v83;
                          v87 = *(_QWORD *)*v83;
                          if ((v87 & 4) != 0 && (v87 & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if (((*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 40))(v87 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v303 + 272)) & 1) != 0)goto LABEL_268;
                          }
                          else
                          {
                            v88 = *(_QWORD *)(v303 + 264);
                            if ((*(_QWORD *)v291 & 4) != 0)
                              v89 = 0;
                            else
                              v89 = (unsigned __int8 *)(*(_QWORD *)v291 & 0xFFFFFFFFFFFFFFF8);
                            v321 = v89;
                            v322 = -2;
                            v90 = *(_OWORD *)(v291 + 56);
                            v323 = *(_OWORD *)(v291 + 40);
                            v324 = v90;
                            if ((*v86 & 4) != 0)
                              v91 = 0;
                            else
                              v91 = (unsigned __int8 *)(*v86 & 0xFFFFFFFFFFFFFFF8);
                            v318[0] = v91;
                            v318[1] = (unsigned __int8 *)-2;
                            v92 = *(_OWORD *)(v86 + 7);
                            v319 = *(_OWORD *)(v86 + 5);
                            v320 = v92;
                            if (llvm::AAResults::alias(v88, (uint64_t)&v321, (uint64_t)v318))
                              goto LABEL_268;
                          }
                          ++v83;
                        }
                        while (v83 != v299);
                      }
                    }
                  }
                  ++v288;
                }
                while (v288 != v281);
              }
            }
          }
        }
LABEL_190:
        v59 = v294 + 1;
        if (v294 + 1 == v283)
          goto LABEL_216;
      }
      v132 = *(unsigned __int16 **)(v60 + 16);
      if (*v132 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v60 + 32) + 48) & 0x10) != 0)
        break;
      v133 = *(_WORD *)(v60 + 44);
      v130 = *((_QWORD *)v132 + 1);
      if ((v133 & 0xC) == 0 || (v133 & 4) != 0)
        goto LABEL_267;
      if ((v130 & 0x100000) != 0)
        break;
      while ((*(_WORD *)(v60 + 44) & 8) != 0)
      {
        v60 = *(_QWORD *)(v60 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v60 + 16) + 10) & 0x10) != 0)
          goto LABEL_323;
      }
LABEL_268:
      if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v303 + 248) + 704))(*(_QWORD *)(v303 + 248), v35, v301, *(_QWORD *)(v303 + 256)))break;
      v134 = v329;
      if (v329 >= (unint64_t)HIDWORD(v329))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v328, (uint64_t)v295, v329 + 1, 8);
        v134 = v329;
      }
      v328[v134] = v35;
      v298 = v329 + 1;
      LODWORD(v329) = v329 + 1;
      if (!v35 || (*(_BYTE *)v35 & 4) == 0)
      {
        while ((*(_WORD *)(v35 + 44) & 8) != 0)
          v35 = *(_QWORD *)(v35 + 8);
      }
      v35 = *(_QWORD *)(v35 + 8);
    }
    while (v35 != v297 + 48);
LABEL_323:
    v10 = v295;
    if (v328 != v295)
      free(v328);
    v7 = (uint64_t *)v300;
LABEL_326:
    v3 = v303;
LABEL_327:
    v9 = (_QWORD *)v9[1];
  }
  while (v9 != v8);
  v151 = (uint64_t *)v325;
  if (!(_DWORD)v326)
  {
    v278 = 0;
    goto LABEL_557;
  }
  v302 = (uint64_t *)((char *)v325 + 48 * v326);
  v318[0] = 0;
  while (2)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 248) + 264))(*(_QWORD *)(v3 + 248), v151[2], 0);
    v152 = v151[5];
    if (v152)
    {
      v153 = *(_QWORD *)(*(_QWORD *)(v152 + 24) + 32);
      if (v153)
      {
        v154 = *(_QWORD *)(v153 + 728);
        if (v154)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v154 + 32))(v154, v151[5]);
        v155 = *(unsigned int *)(v152 + 40);
        if ((_DWORD)v155)
        {
          v156 = *(_QWORD *)(v152 + 32);
          v157 = *(_QWORD *)(v153 + 40);
          v158 = 32 * v155;
          do
          {
            if (!*(_BYTE *)v156)
            {
              v159 = *(unsigned int *)(v156 + 4);
              if ((v159 & 0x80000000) != 0)
                v160 = (uint64_t *)(*(_QWORD *)(v157 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8);
              else
                v160 = (uint64_t *)(*(_QWORD *)(v157 + 272) + 8 * v159);
              v161 = *v160;
              v163 = *(_QWORD *)(v156 + 16);
              v162 = *(_QWORD *)(v156 + 24);
              if (v156 != *v160)
                v160 = (uint64_t *)(v163 + 24);
              *v160 = v162;
              if (v162)
                v164 = v162;
              else
                v164 = v161;
              *(_QWORD *)(v164 + 16) = v163;
              *(_QWORD *)(v156 + 16) = 0;
              *(_QWORD *)(v156 + 24) = 0;
            }
            v156 += 32;
            v158 -= 32;
          }
          while (v158);
        }
      }
      v165 = *(unint64_t **)(v152 + 8);
      v166 = *(_QWORD *)v152 & 0xFFFFFFFFFFFFFFF8;
      *v165 = v166 | *v165 & 7;
      *(_QWORD *)(v166 + 8) = v165;
      *(_QWORD *)v152 &= 7uLL;
      *(_QWORD *)(v152 + 8) = 0;
      v167 = v151[2];
      v168 = *(_QWORD *)(v167 + 40);
      *(_QWORD *)(v152 + 24) = v168;
      v169 = *(_QWORD *)(v168 + 32);
      v170 = *(unsigned int *)(v152 + 40);
      if ((_DWORD)v170)
      {
        v183 = *(_QWORD *)(v152 + 32);
        v184 = *(_QWORD *)(v169 + 40);
        v185 = 32 * v170;
        do
        {
          if (!*(_BYTE *)v183)
          {
            v186 = *(unsigned int *)(v183 + 4);
            if ((int)v186 >= 0)
              v187 = (uint64_t *)(*(_QWORD *)(v184 + 272) + 8 * v186);
            else
              v187 = (uint64_t *)(*(_QWORD *)(v184 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
            v188 = *v187;
            if (*v187)
            {
              v189 = *(_QWORD *)(v188 + 16);
              *(_QWORD *)(v188 + 16) = v183;
              *(_QWORD *)(v183 + 16) = v189;
              if ((*(_BYTE *)(v183 + 3) & 1) != 0)
              {
                *(_QWORD *)(v183 + 24) = v188;
              }
              else
              {
                *(_QWORD *)(v183 + 24) = 0;
                v187 = (uint64_t *)(v189 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v183 + 16) = v183;
              *(_QWORD *)(v183 + 24) = 0;
            }
            *v187 = v183;
          }
          v183 += 32;
          v185 -= 32;
        }
        while (v185);
      }
      v171 = *(_QWORD *)(v169 + 728);
      if (v171)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v171 + 24))(v171, v152);
      v172 = *(_QWORD *)(v167 + 48) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v152 = v172 | *(_QWORD *)v152 & 7;
      *(_QWORD *)(v152 + 8) = v167 + 48;
      *(_QWORD *)(v172 + 8) = v152;
      *(_QWORD *)(v167 + 48) = *(_QWORD *)(v167 + 48) & 7 | v152;
    }
    v173 = *v151;
    v174 = (_QWORD *)v151[2];
    v304 = v151[4];
    v321 = 0;
    v175 = *(unsigned __int16 **)(v173 + 16);
    if (*((_BYTE *)v175 + 4))
      v176 = *(_DWORD *)(*(_QWORD *)(v173 + 32) + 4);
    else
      v176 = 0;
    v177 = *v175 - 1;
    if (v177 > 1 || (v190 = *(_QWORD *)(*(_QWORD *)(v173 + 32) + 48), (v190 & 8) == 0))
    {
      v178 = *(_WORD *)(v173 + 44);
      v179 = v178 & 0xC;
      v180 = *((_QWORD *)v175 + 1);
      if ((v178 & 0xC) != 0 && (v178 & 4) == 0)
      {
        v191 = v173;
        if ((v180 & 0x80000) == 0)
        {
          while ((*(_WORD *)(v191 + 44) & 8) != 0)
          {
            v191 = *(_QWORD *)(v191 + 8);
            v3 = v303;
            if ((*(_BYTE *)(*(_QWORD *)(v191 + 16) + 10) & 8) != 0)
              goto LABEL_386;
          }
          v182 = 3;
          goto LABEL_548;
        }
      }
      else if ((v180 & 0x80000) == 0)
      {
        v182 = 3;
        goto LABEL_399;
      }
LABEL_386:
      if (v177 <= 1)
      {
        v190 = *(_QWORD *)(*(_QWORD *)(v173 + 32) + 48);
        goto LABEL_393;
      }
LABEL_387:
      v192 = *((_QWORD *)v175 + 1);
      if (!v179 || (v178 & 4) != 0)
      {
        if ((v192 & 0x100000) != 0)
          goto LABEL_398;
        v182 = 1;
        goto LABEL_399;
      }
      v193 = v173;
      if ((v192 & 0x100000) != 0)
        goto LABEL_398;
      while ((*(_WORD *)(v193 + 44) & 8) != 0)
      {
        v193 = *(_QWORD *)(v193 + 8);
        v3 = v303;
        if ((*(_BYTE *)(*(_QWORD *)(v193 + 16) + 10) & 0x10) != 0)
          goto LABEL_398;
      }
      v182 = 1;
LABEL_548:
      v3 = v303;
      goto LABEL_399;
    }
LABEL_393:
    if ((v190 & 0x10) == 0)
    {
      v178 = *(_WORD *)(v173 + 44);
      v179 = v178 & 0xC;
      goto LABEL_387;
    }
LABEL_398:
    v182 = 2;
LABEL_399:
    v194 = *(_QWORD *)(*(_QWORD *)(v3 + 248) + 8);
    v195 = (llvm::MachineFunction *)v174[4];
    v328 = 0;
    v196 = *((_QWORD *)v195 + 28);
    if (v196)
    {
      *((_QWORD *)v195 + 28) = *(_QWORD *)v196;
      *(_QWORD *)&v305 = 0;
    }
    else
    {
      v196 = sub_1C484358C((uint64_t)v195 + 128, 72, 3);
      *(_QWORD *)&v305 = v328;
      if (v328)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v328, (unsigned __int8 *)v328, (uint64_t)&v305);
        v328 = 0;
      }
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v196, v195, v194 + 1584, (unsigned __int8 **)&v305, 0);
    if ((_QWORD)v305)
      llvm::MetadataTracking::untrack((uint64_t)&v305, (unsigned __int8 *)v305);
    if (v328)
      llvm::MetadataTracking::untrack((uint64_t)&v328, (unsigned __int8 *)v328);
    v197 = v174[5];
    *(_QWORD *)(v196 + 24) = v197;
    v198 = *(_QWORD *)(v197 + 32);
    v199 = *(unsigned int *)(v196 + 40);
    if ((_DWORD)v199)
    {
      v267 = *(_QWORD *)(v196 + 32);
      v268 = *(_QWORD *)(v198 + 40);
      v269 = 32 * v199;
      do
      {
        if (!*(_BYTE *)v267)
        {
          v270 = *(unsigned int *)(v267 + 4);
          if ((int)v270 >= 0)
            v271 = (uint64_t *)(*(_QWORD *)(v268 + 272) + 8 * v270);
          else
            v271 = (uint64_t *)(*(_QWORD *)(v268 + 24) + 16 * (v270 & 0x7FFFFFFF) + 8);
          v272 = *v271;
          if (*v271)
          {
            v273 = *(_QWORD *)(v272 + 16);
            *(_QWORD *)(v272 + 16) = v267;
            *(_QWORD *)(v267 + 16) = v273;
            if ((*(_BYTE *)(v267 + 3) & 1) != 0)
            {
              *(_QWORD *)(v267 + 24) = v272;
            }
            else
            {
              *(_QWORD *)(v267 + 24) = 0;
              v271 = (uint64_t *)(v273 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v267 + 16) = v267;
            *(_QWORD *)(v267 + 24) = 0;
          }
          *v271 = v267;
        }
        v267 += 32;
        v269 -= 32;
      }
      while (v269);
    }
    v200 = *(_QWORD *)(v198 + 728);
    if (v200)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v200 + 24))(v200, v196);
    v201 = v174[6] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v196 = v201 | *(_QWORD *)v196 & 7;
    *(_QWORD *)(v196 + 8) = v174 + 6;
    *(_QWORD *)(v201 + 8) = v196;
    v174[6] = v174[6] & 7 | v196;
    *((_QWORD *)&v305 + 1) = 0;
    v306 = 0uLL;
    LODWORD(v305) = 0x1000000;
    DWORD1(v305) = v176;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v196, v195, (const llvm::MachineOperand *)&v305);
    LODWORD(v305) = 1;
    *((_QWORD *)&v305 + 1) = 0;
    *(_QWORD *)&v306 = v182;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v196, v195, (const llvm::MachineOperand *)&v305);
    *((_QWORD *)&v305 + 1) = 0;
    *(_QWORD *)&v306 = v304;
    LODWORD(v305) = 4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v196, v195, (const llvm::MachineOperand *)&v305);
    v202 = **(unsigned __int16 **)(v173 + 16);
    LODWORD(v305) = 1;
    *((_QWORD *)&v305 + 1) = 0;
    *(_QWORD *)&v306 = v202;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v196, v195, (const llvm::MachineOperand *)&v305);
    v203 = *(_QWORD *)(v173 + 32);
    v204 = *(_QWORD *)(v173 + 16);
    v205 = *(unsigned __int8 *)(v204 + 4);
    v206 = *(unsigned int *)(v173 + 40);
    if ((*(_BYTE *)(v204 + 8) & 2) != 0)
    {
      if ((_DWORD)v206 != v205)
      {
        v207 = *(unsigned __int8 *)(v204 + 4);
        do
        {
          v266 = *(_DWORD *)(v203 + 32 * v205);
          if ((v266 & 0x10000FF) != 0x1000000)
            break;
          v207 += (v266 & 0x2000000) == 0;
          if ((_DWORD)v206 - 1 == v205)
            break;
          ++v205;
        }
        while ((v266 & 0x2000000) == 0);
        goto LABEL_412;
      }
    }
    else
    {
      v207 = *(unsigned __int8 *)(v204 + 4);
LABEL_412:
      if (v207 != (_DWORD)v206)
      {
        v208 = (const llvm::MachineOperand *)(v203 + 32 * v207);
        v209 = 32 * v206 - 32 * v207;
        do
        {
          if (*(_BYTE *)v208)
          {
            v210 = (llvm::MachineInstr *)v196;
            v211 = v195;
            v212 = v208;
          }
          else
          {
            v213 = *((_OWORD *)v208 + 1);
            v305 = *(_OWORD *)v208;
            v306 = v213;
            LODWORD(v305) = v305 & 0xFBFFFFFF;
            v212 = (const llvm::MachineOperand *)&v305;
            v210 = (llvm::MachineInstr *)v196;
            v211 = v195;
          }
          llvm::MachineInstr::addOperand(v210, v211, v212);
          v208 = (const llvm::MachineOperand *)((char *)v208 + 32);
          v209 -= 32;
        }
        while (v209);
      }
    }
    v216 = *(_QWORD *)(v173 + 48);
    v215 = (unint64_t *)(v173 + 48);
    v214 = v216;
    if (v216 < 8)
    {
LABEL_423:
      llvm::MachineInstr::dropMemRefs(v196, v195);
    }
    else
    {
      if ((v214 & 7) != 0)
      {
        if ((v214 & 7) != 3)
          goto LABEL_423;
        v217 = (int *)(v214 & 0xFFFFFFFFFFFFFFF8);
        if ((v214 & 0xFFFFFFFFFFFFFFF8) == 0)
          goto LABEL_423;
        v219 = *v217;
        v215 = (unint64_t *)(v217 + 2);
        v218 = v219;
        if (!(_DWORD)v219)
          goto LABEL_423;
      }
      else
      {
        *v215 = v214 & 0xFFFFFFFFFFFFFFF8;
        v218 = 1;
      }
      v220 = *(_QWORD *)(v196 + 48);
      if (v220 < 8)
      {
        v221 = 0;
        v222 = 0;
        goto LABEL_427;
      }
      v274 = *(_QWORD *)(v196 + 48) & 7;
      v275 = (unsigned __int8 *)(v220 & 0xFFFFFFFFFFFFFFF8);
      if (v274 == 1 && v275)
      {
        v221 = 0;
        v223 = 0;
        v222 = (uint64_t)v275;
      }
      else if (v274 == 3 && v275)
      {
        v277 = v275[4];
        if (v275[4])
          v222 = *(_QWORD *)&v275[8 * *(int *)v275 + 8];
        else
          v222 = 0;
        if (v275[5])
          v221 = *(_QWORD *)&v275[8 * *(int *)v275 + 8 + 8 * v277];
        else
          v221 = 0;
        if (v275[6])
          v223 = *(_QWORD *)&v275[8 * *(int *)v275 + 8 + 8 * v275[5] + 8 * v277];
        else
LABEL_427:
          v223 = 0;
      }
      else
      {
        v222 = 0;
        v223 = 0;
        if (v275)
          v276 = v274 == 2;
        else
          v276 = 0;
        if (v276)
          v221 = (uint64_t)v275;
        else
          v221 = 0;
      }
      llvm::MachineInstr::setExtraInfo(v196, (uint64_t)v195, v215, v218, v222, v221, v223);
    }
    if (v321)
      llvm::MetadataTracking::untrack((uint64_t)&v321, v321);
    v224 = *(unsigned int *)(v196 + 40);
    if ((_DWORD)v224)
    {
      v225 = *(_DWORD **)(v196 + 32);
      v226 = &v225[8 * v224];
      v227 = *(_QWORD **)(*v151 + 24);
      do
      {
        if ((*v225 & 0x10000FF) == 0x1000000)
        {
          v228 = v225[1];
          if (v228)
          {
            v229 = (unsigned __int16 *)v227[19];
            v230 = (unsigned __int16 *)v227[20];
            if (v229 == v230)
              goto LABEL_439;
            v231 = (unsigned __int16 *)v227[19];
            while (*v231 != (unsigned __int16)v228)
            {
              v231 += 8;
              if (v231 == v230)
                goto LABEL_439;
            }
            if (!*((_QWORD *)v231 + 1))
            {
LABEL_439:
              v232 = v227[21];
              if ((unint64_t)v230 >= v232)
              {
                v234 = ((char *)v230 - (char *)v229) >> 4;
                v235 = v234 + 1;
                if ((unint64_t)(v234 + 1) >> 60)
LABEL_560:
                  abort();
                v236 = v232 - (_QWORD)v229;
                if (v236 >> 3 > v235)
                  v235 = v236 >> 3;
                if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFF0)
                  v237 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v237 = v235;
                if (v237)
                {
                  if (v237 >> 60)
LABEL_561:
                    sub_1C4764EE4();
                  v238 = (char *)operator new(16 * v237);
                }
                else
                {
                  v238 = 0;
                }
                v239 = &v238[16 * v234];
                *(_WORD *)v239 = v228;
                *((_QWORD *)v239 + 1) = -1;
                v240 = v239;
                if (v229 != v230)
                {
                  do
                  {
                    *((_OWORD *)v240 - 1) = *((_OWORD *)v230 - 1);
                    v240 -= 16;
                    v230 -= 8;
                  }
                  while (v230 != v229);
                  v229 = (unsigned __int16 *)v227[19];
                }
                v233 = v239 + 16;
                v227[19] = v240;
                v227[20] = v239 + 16;
                v227[21] = &v238[16 * v237];
                if (v229)
                  operator delete(v229);
              }
              else
              {
                *v230 = v228;
                *((_QWORD *)v230 + 1) = -1;
                v233 = (char *)(v230 + 8);
              }
              v227[20] = v233;
            }
          }
        }
        v225 += 8;
      }
      while (v225 != v226);
    }
    v241 = v151[5];
    if (v241)
    {
      v242 = *(unsigned int *)(v241 + 40);
      if ((_DWORD)v242)
      {
        v243 = *(int **)(v241 + 32);
        v244 = &v243[8 * v242];
        do
        {
          v245 = *v243;
          if (!*v243)
          {
            v246 = v243[1];
            v247 = (~v245 & 0x5000000) == 0 || (v245 & 0x1000000) == 0;
            if (!v247 && v246 != 0)
            {
              v249 = (_QWORD *)v151[3];
              v250 = (unsigned __int16 *)v249[19];
              v251 = (unsigned __int16 *)v249[20];
              if (v250 == v251)
                goto LABEL_476;
              v252 = (unsigned __int16 *)v249[19];
              while (*v252 != (unsigned __int16)v246)
              {
                v252 += 8;
                if (v252 == v251)
                  goto LABEL_476;
              }
              if (!*((_QWORD *)v252 + 1))
              {
LABEL_476:
                v253 = v249[21];
                if ((unint64_t)v251 >= v253)
                {
                  v255 = ((char *)v251 - (char *)v250) >> 4;
                  v256 = v255 + 1;
                  if ((unint64_t)(v255 + 1) >> 60)
                    goto LABEL_560;
                  v257 = v253 - (_QWORD)v250;
                  if (v257 >> 3 > v256)
                    v256 = v257 >> 3;
                  if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF0)
                    v258 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v258 = v256;
                  if (v258)
                  {
                    if (v258 >> 60)
                      goto LABEL_561;
                    v259 = (char *)operator new(16 * v258);
                  }
                  else
                  {
                    v259 = 0;
                  }
                  v260 = &v259[16 * v255];
                  *(_WORD *)v260 = v246;
                  *((_QWORD *)v260 + 1) = -1;
                  v261 = v260;
                  if (v250 != v251)
                  {
                    do
                    {
                      *((_OWORD *)v261 - 1) = *((_OWORD *)v251 - 1);
                      v261 -= 16;
                      v251 -= 8;
                    }
                    while (v251 != v250);
                    v250 = (unsigned __int16 *)v249[19];
                  }
                  v254 = v260 + 16;
                  v249[19] = v261;
                  v249[20] = v260 + 16;
                  v249[21] = &v259[16 * v258];
                  if (v250)
                    operator delete(v250);
                }
                else
                {
                  *v251 = v246;
                  *((_QWORD *)v251 + 1) = -1;
                  v254 = (char *)(v251 + 8);
                }
                v249[20] = v254;
              }
            }
          }
          v243 += 8;
        }
        while (v243 != v244);
      }
    }
    v262 = *v151;
    v263 = *v151;
    if ((*(_BYTE *)*v151 & 4) == 0)
    {
      v263 = *v151;
      if ((*(_WORD *)(v262 + 44) & 8) != 0)
      {
        v263 = *v151;
        do
          v263 = *(_QWORD *)(v263 + 8);
        while ((*(_WORD *)(v263 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v262 + 24) + 40, v262, *(_QWORD *)(v263 + 8));
    v264 = v151[1];
    v3 = v303;
    if (v264)
    {
      v265 = v151[1];
      if ((*(_BYTE *)v264 & 4) == 0)
      {
        v265 = v151[1];
        if ((*(_WORD *)(v264 + 44) & 8) != 0)
        {
          v265 = v151[1];
          do
            v265 = *(_QWORD *)(v265 + 8);
          while ((*(_WORD *)(v265 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v264 + 24) + 40, v264, *(_QWORD *)(v265 + 8));
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(v303 + 248) + 272))(*(_QWORD *)(v303 + 248), v151[2], v151[3], 0, 0, 0, v318, 0);
    v151 += 6;
    if (v151 != v302)
      continue;
    break;
  }
  if (v318[0])
    llvm::MetadataTracking::untrack((uint64_t)v318, v318[0]);
  v278 = v326;
  v151 = (uint64_t *)v325;
LABEL_557:
  if (v151 != v7)
    free(v151);
  return v278 != 0;
}

void sub_1C50D9A28(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

BOOL sub_1C50D9B54(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unsigned int RegSizeInBits;
  unsigned int v9;
  unint64_t v10;
  const void *v11;
  _BOOL8 v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  int64_t v19;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int v26;
  const void *v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  unsigned int v31;
  const void *v32;
  unsigned int v33;
  uint64_t v34;

  v3 = a2;
  if (!a2)
    return 0;
  v6 = **(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v6 || (*(_BYTE *)v6 & 4) == 0)
  {
    while ((*(_WORD *)(v6 + 44) & 4) != 0)
      v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v6 == *(_QWORD *)(*(_QWORD *)a1 + 24) + 48)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  while (llvm::MachineInstr::findRegisterDefOperandIdx(v6, v3, 0, 1, *(_QWORD *)(v7 + 256)) == -1)
  {
    v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(_BYTE *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v6 == *(_QWORD *)(*(_QWORD *)a1 + 24) + 48)
      return 0;
  }
  v34 = 0;
  if (!(*(unsigned int (**)(_QWORD, unint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v7 + 248) + 440))(*(_QWORD *)(v7 + 248), v6, v3, &v34))return 0;
  RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(v7 + 256), v3, *(_QWORD *)(a1 + 16));
  v9 = RegSizeInBits;
  v33 = RegSizeInBits;
  if (RegSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v32, v34, 1);
    v31 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, a3, 0);
  }
  else
  {
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)RegSizeInBits;
    v11 = (const void *)(v10 & v34);
    if (!RegSizeInBits)
    {
      v11 = 0;
      v10 = 0;
    }
    v32 = v11;
    v31 = RegSizeInBits;
    v30 = v10 & a3;
  }
  v29 = 0;
  llvm::APInt::smul_ov(&v32, (const llvm::APInt *)&v30, &v29, (llvm::APInt *)&v27);
  v12 = 0;
  if (!v29)
  {
    v13 = **(uint64_t ***)(a1 + 24);
    v26 = 64;
    v25 = v13;
    llvm::APInt::sadd_ov(&v27, (const llvm::APInt *)&v25, &v29, (uint64_t)&v23);
    if (v26 >= 0x41 && v25)
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    v14 = v23;
    v25 = v23;
    v15 = v24;
    v26 = v24;
    v12 = !v29;
    if (!v29)
    {
      if (v24 >= 0x41)
      {
        v18 = 0;
        v19 = ((unint64_t)v24 + 63) >> 6;
        do
        {
          if (v19-- < 1)
            break;
          v21 = v23[v19];
          v18 += __clz(v21);
        }
        while (!v21);
        v22 = v24 | 0xFFFFFFC0;
        if ((v24 & 0x3F) == 0)
          v22 = 0;
        if (v24 - v18 - v22 > 0x40)
        {
          v12 = 0;
          goto LABEL_42;
        }
        v16 = *v23;
      }
      else
      {
        v16 = (uint64_t)((_QWORD)v23 << -(char)v24) >> -(char)v24;
      }
      **(_QWORD **)(a1 + 24) = v16;
    }
    if (v15 >= 0x41)
    {
      v14 = v25;
LABEL_42:
      if (v14)
        MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    }
  }
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v33 >= 0x41 && v32)
    MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  return v12;
}

BOOL sub_1C50D9E84(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = result;
  if (a5)
  {
    v5 = a4;
    v19 = 0;
    v20 = 0;
    v21 = a4 + 8 * a5;
    while (1)
    {
      v8 = *(unsigned int *)(*(_QWORD *)v5 + 40);
      if ((_DWORD)v8)
      {
        v9 = *(int **)(*(_QWORD *)v5 + 32);
        v10 = &v9[8 * v8];
        while (1)
        {
          v11 = *v9;
          if (!*v9)
          {
            v12 = v9[1];
            if (v12)
            {
              v13 = *(unsigned int *)(a3 + 40);
              if ((_DWORD)v13)
                break;
            }
          }
LABEL_6:
          v9 += 8;
          if (v9 == v10)
            goto LABEL_21;
        }
        v14 = 32 * v13;
        v15 = (unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
        while (1)
        {
          v16 = *(v15 - 1);
          if (!(_BYTE)v16)
          {
            v17 = *v15;
            if (*v15)
            {
              if ((v12 == v17
                 || !((v17 | v12) >> 30)
                 && (result = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a2 + 256) + 8), v12, v17)))
                && ((v16 | v11) & 0x1000000) != 0)
              {
                break;
              }
            }
          }
          v15 += 8;
          v14 -= 32;
          if (!v14)
            goto LABEL_6;
        }
        if ((_BYTE)v20)
        {
          *(_BYTE *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = 0;
          return result;
        }
        v19 = v5;
        v20 = 1;
      }
LABEL_21:
      v5 += 8;
      if (v5 == v21)
        goto LABEL_24;
    }
  }
  v19 = 0;
  v20 = 0;
LABEL_24:
  *(_BYTE *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v19;
  *(_QWORD *)(v18 + 16) = v20;
  return result;
}

__n128 sub_1C50D9FD4(__n128 *a1, int **a2, _WORD *a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F8EE0, "imp-null-check-page-size", 0x18uLL);
  result = *a1;
  xmmword_1ED7F8F00 = (__int128)*a1;
  v7 = *a2;
  dword_1ED7F8F60 = **a2;
  byte_1ED7F8F74 = 1;
  dword_1ED7F8F70 = *v7;
  word_1ED7F8EEA = (32 * (*a3 & 3)) | word_1ED7F8EEA & 0xFF9F;
  return result;
}

uint64_t sub_1C50DA058()
{
  int v1;
  int *v2;
  int v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"The page size of the target in bytes";
  v4.n128_u64[1] = 36;
  v3 = 4096;
  v2 = &v3;
  v1 = 1;
  sub_1C61DFA94(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7F8EE0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"The max number of instructions to consider hoisting loads over (the algorithm is qu"
                                     "adratic over this number)";
  v4.n128_u64[1] = 108;
  v3 = 1;
  v1 = 8;
  v2 = &v1;
  sub_1C61DFB30((uint64_t)&unk_1ED7F8FA0, "imp-null-max-insts-to-consider", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F8FA0, &dword_1C475E000);
}

uint64_t sub_1C50DA134(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Expand indirectbr instructions";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "indirectbr-expand";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F9060;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50DA2BC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createIndirectBrExpandPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C50DA1F0(v1);
}

uint64_t sub_1C50DA1F0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F9060;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8142D68;
  *(_QWORD *)(a1 + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F9068);
  if (v3 != -1)
  {
    v7[0] = sub_1C50DA134;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F9068, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50DA2BC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50DA1F0(v0);
}

void sub_1C50DA2E8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C50DA30C(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C50DA320(uint64_t a1, llvm::LLVMContext ***a2)
{
  llvm::LLVMContext **v4;
  uint64_t AnalysisPass;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::LLVMContext **v10;
  llvm::LLVMContext **v11;
  llvm::DataLayout *v12;
  llvm::LLVMContext **v13;
  llvm::LLVMContext **v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  llvm::UnreachableInst *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::LLVMContext **v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  const llvm::APInt *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::ConstantInt *v42;
  unsigned int v43;
  unint64_t v44;
  llvm::ValueHandleBase *v45;
  llvm::UndefValue *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  llvm::UnreachableInst *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _WORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  llvm::Type ***v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  llvm::LLVMContext *v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  llvm::LLVMContext **v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t ****v84;
  uint64_t ***v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ****v90;
  uint64_t ***v91;
  int v92;
  int v93;
  uint64_t ***v94;
  char *v95;
  char *v96;
  char *v97;
  llvm::Value *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  llvm::ValueSymbolTable *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t ***v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t ****v129;
  uint64_t ***v130;
  int v131;
  int v132;
  uint64_t ***v133;
  char *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  llvm::BasicBlock *v143;
  int v144;
  _DWORD *v145;
  _DWORD *v146;
  const llvm::APInt *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  llvm::ConstantInt *v160;
  unsigned int v161;
  unint64_t v162;
  llvm::ConstantInt *v163;
  uint64_t *v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t *v170;
  llvm::PHINode *PointerCast;
  const char *v172;
  char *v173;
  uint64_t v174;
  int v175;
  _WORD v176[28];
  char *v177;
  char *v178;
  uint64_t v179;
  int v180;
  _BYTE v181[32];
  void *v182;
  uint64_t v183;
  _BYTE v184[128];
  void *v185;
  uint64_t v186;
  _WORD v187[8];
  _QWORD *v188;
  __int128 v189;
  _QWORD v190[3];
  _BYTE v191[152];
  _QWORD *v192;
  uint64_t v193;
  _QWORD v194[19];
  uint64_t v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  _BYTE v199[32];
  void *v200;
  uint64_t v201;
  uint64_t v202;
  void *v203[2];
  _QWORD v204[38];
  void *v205;
  uint64_t v206;
  char v207;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  v4 = a2[5];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass)
    return 0;
  v6 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
  if (!v6)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD, llvm::LLVMContext ***))(**(_QWORD **)(v6 + 112) + 16))(*(_QWORD *)(v6 + 112), a2);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 288))(v7))
    return 0;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
  LOBYTE(v203[0]) = 0;
  v207 = 0;
  v8 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::DominatorTreeWrapperPass::ID, 1);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v8 + 96))(v8, &llvm::DominatorTreeWrapperPass::ID);
    if (v9)
    {
      LOBYTE(v185) = 1;
      sub_1C61DFC84((uint64_t)v203, v9 + 32, (char *)&v185);
    }
  }
  v200 = &v202;
  v201 = 0x100000000;
  v177 = v181;
  v178 = v181;
  v179 = 4;
  v180 = 0;
  v10 = (llvm::LLVMContext **)(a2 + 9);
  v11 = a2[10];
  if (v11 != (llvm::LLVMContext **)(a2 + 9))
  {
    v12 = (llvm::DataLayout *)(v4 + 34);
    do
    {
      if (v11)
        v13 = v11 - 3;
      else
        v13 = 0;
      v14 = (llvm::LLVMContext **)v13[5];
      if (v14 != v13 + 5)
      {
        v15 = v14 ? (uint64_t)(v14 - 3) : 0;
        v16 = *(unsigned __int8 *)(v15 + 16) - 40;
        v17 = v16 >= 0xFFFFFFF5 ? v15 : 0;
        if (v14)
        {
          if (*(_BYTE *)(v17 + 16) == 32 && v16 >= 0xFFFFFFF5)
          {
            if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 1)
            {
              v19 = (llvm::UnreachableInst *)operator new(0x40uLL);
              *((_DWORD *)v19 + 5) &= 0x38000000u;
              llvm::UnreachableInst::UnreachableInst(v19, **a2, (llvm::Instruction *)v17);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v17 + 40) + 40, (uint64_t ***)v17);
              v20 = *(_QWORD *)(v17 + 24);
              v21 = *(_QWORD **)(v17 + 32);
              *v21 = v20;
              *(_QWORD *)(v20 + 8) = v21;
              *(_QWORD *)(v17 + 24) = 0;
              *(_QWORD *)(v17 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v17);
            }
            else
            {
              v22 = v201;
              if (v201 >= (unint64_t)HIDWORD(v201))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)&v202, v201 + 1, 8);
                v22 = v201;
              }
              *((_QWORD *)v200 + v22) = v17;
              LODWORD(v201) = v201 + 1;
              v23 = *(_DWORD *)(v17 + 20);
              if ((v23 & 0x40000000) != 0)
              {
                v25 = *(_QWORD *)(v17 - 8);
                v24 = v23 & 0x7FFFFFF;
              }
              else
              {
                v24 = v23 & 0x7FFFFFF;
                v25 = v17 - 32 * v24;
              }
              if (v24 != 1)
              {
                v26 = (uint64_t *)(v25 + 32);
                v27 = 32 * v24 - 32;
                do
                {
                  v28 = *v26;
                  v26 += 4;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v177, v28);
                  v27 -= 32;
                }
                while (v27);
              }
            }
          }
        }
      }
      v11 = (llvm::LLVMContext **)v11[1];
    }
    while (v11 != v10);
    if ((_DWORD)v201)
    {
      v197 = v199;
      v198 = 0x400000000;
      v31 = a2[10];
      if (v31 == v10)
        goto LABEL_69;
      do
      {
        if (v31)
          v32 = (uint64_t)(v31 - 3);
        else
          v32 = 0;
        v33 = (char *)sub_1C477672C((uint64_t)&v177, v32);
        if (v178 == v177)
          v34 = (uint64_t *)((char *)&v179 + 4);
        else
          v34 = &v179;
        if (v33 != &v178[8 * *(unsigned int *)v34])
        {
          v35 = *(_QWORD *)(v32 + 8);
          if (v35)
          {
            while (1)
            {
              v36 = *(_QWORD *)(v35 + 24);
              if (*(_BYTE *)(v36 + 16) == 4)
                break;
              v35 = *(_QWORD *)(v35 + 8);
              if (!v35)
                goto LABEL_62;
            }
            if (llvm::Constant::isConstantUsed(*(llvm::Constant **)(v35 + 24)))
            {
              v37 = v198;
              v38 = v198;
              if (v198 >= HIDWORD(v198))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v197, (uint64_t)v199, v198 + 1, 8);
                v38 = v198;
              }
              *((_QWORD *)v197 + v38) = v32;
              LODWORD(v198) = v198 + 1;
              llvm::DataLayout::getIntPtrType(v12, *(llvm::Type **)v36);
              v40 = v37 + 1;
              v42 = *(llvm::ConstantInt **)v41;
              v43 = *(_DWORD *)(v41 + 8);
              LODWORD(v186) = v43 >> 8;
              if (v43 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v185, v40, 0);
              }
              else
              {
                if (v43 <= 0xFF)
                  v44 = 0;
                else
                  v44 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v43);
                v185 = (void *)(v44 & v40);
              }
              v45 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v185, v39);
              if (v186 >= 0x41 && v185)
                MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
              v46 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v45, *(llvm::Constant **)v36, 0);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v36, v46, (llvm::Value *)1);
            }
          }
        }
LABEL_62:
        v31 = (llvm::LLVMContext **)v31[1];
      }
      while (v31 != v10);
      if (!(_DWORD)v198)
      {
LABEL_69:
        v185 = v187;
        v186 = 0x800000000;
        if (v207)
        {
          v47 = (HIDWORD(v179) - v180);
          if (v47 >= 9)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v185, (uint64_t)v187, v47, 16);
        }
        if ((_DWORD)v201)
        {
          v48 = (char *)v200;
          v49 = (char *)v200 + 8 * v201;
          do
          {
            v50 = *(_QWORD *)v48;
            if (v207)
            {
              v51 = *(_DWORD *)(v50 + 20);
              if ((v51 & 0x40000000) != 0)
              {
                v53 = *(_QWORD *)(v50 - 8);
                v52 = v51 & 0x7FFFFFF;
              }
              else
              {
                v52 = v51 & 0x7FFFFFF;
                v53 = v50 - 32 * v52;
              }
              if (v52 != 1)
              {
                v57 = (uint64_t *)(v53 + 32);
                v58 = v186;
                v59 = 32 * v52 - 32;
                do
                {
                  v60 = *v57;
                  v61 = *(_QWORD *)(v50 + 40);
                  if (v58 >= HIDWORD(v186))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v185, (uint64_t)v187, v58 + 1, 16);
                    v58 = v186;
                  }
                  v62 = (char *)v185 + 16 * v58;
                  *v62 = v61;
                  v62[1] = v60 | 4;
                  v58 = v186 + 1;
                  LODWORD(v186) = v186 + 1;
                  v57 += 4;
                  v59 -= 32;
                }
                while (v59);
              }
            }
            v54 = (llvm::UnreachableInst *)operator new(0x40uLL);
            *((_DWORD *)v54 + 5) &= 0x38000000u;
            llvm::UnreachableInst::UnreachableInst(v54, **a2, (llvm::Instruction *)v50);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v50 + 40) + 40, (uint64_t ***)v50);
            v55 = *(_QWORD *)(v50 + 24);
            v56 = *(_QWORD **)(v50 + 32);
            *v56 = v55;
            *(_QWORD *)(v55 + 8) = v56;
            *(_QWORD *)(v50 + 24) = 0;
            *(_QWORD *)(v50 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v50);
            v48 += 8;
          }
          while (v48 != v49);
        }
        v63 = v185;
        if (v207)
        {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v203, (unint64_t *)v185, v186);
          v63 = v185;
        }
        if (v63 != v187)
          free(v63);
LABEL_90:
        if (v197 != v199)
          free(v197);
        v29 = 1;
        goto LABEL_93;
      }
      if ((_DWORD)v201)
      {
        v64 = 0;
        v65 = (char *)v200;
        v66 = 8 * v201;
        do
        {
          v67 = *(_QWORD *)v65;
          v68 = *(_DWORD *)(*(_QWORD *)v65 + 20);
          if ((v68 & 0x40000000) != 0)
            v69 = *(llvm::Type ****)(v67 - 8);
          else
            v69 = (llvm::Type ***)(v67 - 32 * (v68 & 0x7FFFFFF));
          llvm::DataLayout::getIntPtrType(v12, **v69);
          if (!v64 || *(_DWORD *)(v70 + 8) >> 8 > *(_DWORD *)(v64 + 8) >> 8)
            v64 = v70;
          v65 += 8;
          v66 -= 8;
        }
        while (v66);
      }
      else
      {
        v64 = 0;
      }
      LOWORD(v186) = 0;
      v187[2] = 0;
      v188 = v190;
      v189 = xmmword_1C6464ED0;
      v190[1] = v191;
      v190[2] = 0x1000000000;
      memset(&v191[128], 0, 24);
      v192 = v194;
      v193 = 0x800000000;
      v194[16] = 0;
      v194[17] = &v195;
      v194[18] = 0x800000000;
      sub_1C48815D8((uint64_t)&v185, (uint64_t)v12);
      v196 = v64;
      v182 = v184;
      v183 = 0x800000000;
      if ((_DWORD)v201 == 1)
      {
        v71 = *(_QWORD *)v200;
        v72 = *(_DWORD *)(*(_QWORD *)v200 + 20);
        if ((v72 & 0x40000000) != 0)
          v73 = *(_QWORD *)(v71 - 8);
        else
          v73 = v71 - 32 * (v72 & 0x7FFFFFF);
        v124 = *(uint64_t ****)v73;
        if ((*(_BYTE *)(*(_QWORD *)v73 + 23) & 0x10) == 0)
        {
          v135 = 0;
          v134 = &byte_1C871356D;
          goto LABEL_166;
        }
        v125 = ***v124;
        v126 = *(_QWORD *)(v125 + 152);
        v127 = *(unsigned int *)(v125 + 168);
        if ((_DWORD)v127)
        {
          LODWORD(v128) = (v127 - 1) & ((v124 >> 4) ^ (v124 >> 9));
          v129 = (uint64_t ****)(v126 + 16 * v128);
          v130 = *v129;
          if (*v129 == v124)
          {
LABEL_165:
            v133 = v129[1];
            v136 = (char *)*v133;
            v134 = (char *)(v133 + 2);
            v135 = v136;
LABEL_166:
            v75 = *(_QWORD *)(v71 + 40);
            v172 = v134;
            v173 = v135;
            v174 = (uint64_t)".switch_cast";
            v176[0] = 773;
            PointerCast = llvm::CastInst::CreatePointerCast(v124, v64, (uint64_t)&v172, v71);
            if (v207)
            {
              v137 = (HIDWORD(v179) - v180);
              if (HIDWORD(v183) < v137)
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v137, 16);
              v138 = *(_DWORD *)(v71 + 20);
              if ((v138 & 0x40000000) != 0)
              {
                v140 = *(_QWORD *)(v71 - 8);
                v139 = v138 & 0x7FFFFFF;
              }
              else
              {
                v139 = v138 & 0x7FFFFFF;
                v140 = v71 - 32 * v139;
              }
              if (v139 != 1)
              {
                v164 = (uint64_t *)(v140 + 32);
                v165 = v183;
                v166 = 32 * v139 - 32;
                do
                {
                  v167 = *v164;
                  v168 = *(_QWORD *)(v71 + 40);
                  if (v165 >= HIDWORD(v183))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v165 + 1, 16);
                    v165 = v183;
                  }
                  v169 = (char *)v182 + 16 * v165;
                  *v169 = v168;
                  v169[1] = v167 | 4;
                  v165 = v183 + 1;
                  LODWORD(v183) = v183 + 1;
                  v164 += 4;
                  v166 -= 32;
                }
                while (v166);
              }
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v71 + 40) + 40, (uint64_t ***)v71);
            v141 = *(_QWORD *)(v71 + 24);
            v142 = *(_QWORD **)(v71 + 32);
            *v142 = v141;
            *(_QWORD *)(v141 + 8) = v142;
            *(_QWORD *)(v71 + 24) = 0;
            *(_QWORD *)(v71 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v71);
LABEL_174:
            v143 = *(llvm::BasicBlock **)v197;
            v144 = v198;
            v145 = operator new(0x48uLL);
            v146 = v145 + 2;
            v145[7] = v145[7] & 0x38000000 | 0x40000000;
            *(_QWORD *)v145 = 0;
            llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v145 + 2), PointerCast, v143, v144, (llvm::BasicBlock *)v75);
            if ((_DWORD)v198 != 1)
            {
              v156 = (int)v198 - 1;
              v157 = 0x200000000;
              v158 = 0x100000000;
              do
              {
                v159 = v157 >> 32;
                v160 = *(llvm::ConstantInt **)v64;
                v161 = *(_DWORD *)(v64 + 8);
                LODWORD(v173) = v161 >> 8;
                if (v161 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v172, v159, 0);
                }
                else
                {
                  if (v161 <= 0xFF)
                    v162 = 0;
                  else
                    v162 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v161);
                  v172 = (const char *)(v162 & v159);
                }
                v163 = llvm::ConstantInt::get(v160, (llvm::LLVMContext *)&v172, v147);
                if (v173 >= 0x41 && v172)
                  MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
                llvm::SwitchInst::addCase(v146, v163, *(llvm::BasicBlock **)((char *)v197 + (v158 >> 29)));
                v158 += 0x100000000;
                v157 += 0x100000000;
                --v156;
              }
              while (v156);
            }
            if (v207)
            {
              v172 = (const char *)v176;
              v173 = (char *)v176;
              v174 = 8;
              v175 = 0;
              v148 = v198;
              v149 = v198 + (unint64_t)v183;
              if (v149 > HIDWORD(v183))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v149, 16);
                v148 = v198;
              }
              if ((_DWORD)v148)
              {
                v150 = (uint64_t *)v197;
                v151 = 8 * v148;
                do
                {
                  v152 = *v150;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v172, *v150);
                  if (v153)
                  {
                    v154 = v183;
                    if (v183 >= (unint64_t)HIDWORD(v183))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v183 + 1, 16);
                      v154 = v183;
                    }
                    v155 = (uint64_t *)((char *)v182 + 16 * v154);
                    *v155 = v75;
                    v155[1] = v152 & 0xFFFFFFFFFFFFFFFBLL;
                    LODWORD(v183) = v183 + 1;
                  }
                  ++v150;
                  v151 -= 8;
                }
                while (v151);
              }
              llvm::DomTreeUpdater::applyUpdates((uint64_t)v203, (unint64_t *)v182, v183);
              if (v173 != v172)
                free(v173);
            }
            if (v182 != v184)
              free(v182);
            llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v185);
            goto LABEL_90;
          }
          v131 = 1;
          while (v130 != (uint64_t ***)-4096)
          {
            v132 = v128 + v131++;
            v128 = v132 & (v127 - 1);
            v130 = *(uint64_t ****)(v126 + 16 * v128);
            if (v130 == v124)
            {
              v129 = (uint64_t ****)(v126 + 16 * v128);
              goto LABEL_165;
            }
          }
        }
        v129 = (uint64_t ****)(v126 + 16 * v127);
        goto LABEL_165;
      }
      v74 = **a2;
      v172 = "switch_bb";
      v176[0] = 259;
      v75 = operator new();
      *(_QWORD *)v75 = *(_QWORD *)v74 + 1600;
      *(_QWORD *)(v75 + 8) = 0;
      v76 = (_QWORD *)(v75 + 8);
      v77 = *(_DWORD *)(v75 + 20) & 0xC0000000;
      *(_DWORD *)(v75 + 16) = 22;
      *(_DWORD *)(v75 + 20) = v77;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0;
      *(_QWORD *)(v75 + 40) = v75 + 40;
      *(_QWORD *)(v75 + 48) = v75 + 40;
      *(_QWORD *)(v75 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(a2 + 9), (_QWORD *)v75);
      v78 = a2[9];
      *(_QWORD *)(v75 + 32) = v10;
      *(_QWORD *)(v75 + 24) = v78;
      v78[1] = (llvm::LLVMContext *)(v75 + 24);
      a2[9] = (llvm::LLVMContext **)(v75 + 24);
      llvm::Value::setName((uint64_t ***)v75, (uint64_t)&v172);
      v172 = "switch_value_phi";
      v176[0] = 259;
      PointerCast = (llvm::PHINode *)sub_1C50B1024(v64, v201, (uint64_t)&v172, v75);
      v79 = v201;
      if (v207)
      {
        v80 = (2 * (HIDWORD(v179) - v180)) + (unint64_t)v201;
        if (v80 > HIDWORD(v183))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v80, 16);
          v79 = v201;
        }
      }
      if (!v79)
        goto LABEL_174;
      v81 = (uint64_t *)v200;
      v170 = (uint64_t *)((char *)v200 + 8 * v79);
      while (1)
      {
        v82 = *v81;
        v83 = *(_DWORD *)(*v81 + 20);
        v84 = (v83 & 0x40000000) != 0 ? *(uint64_t *****)(v82 - 8) : (uint64_t ****)(v82 - 32 * (v83 & 0x7FFFFFF));
        v85 = *v84;
        if ((*((_BYTE *)*v84 + 23) & 0x10) != 0)
          break;
        v95 = 0;
        v96 = &byte_1C871356D;
LABEL_132:
        v172 = v96;
        v173 = v95;
        v174 = (uint64_t)".switch_cast";
        v176[0] = 773;
        v98 = llvm::CastInst::CreatePointerCast(v85, v196, (uint64_t)&v172, v82);
        sub_1C477667C(PointerCast, (uint64_t)v98, *(_QWORD *)(v82 + 40));
        v99 = (char *)operator new(0x60uLL);
        *((_DWORD *)v99 + 13) = *((_DWORD *)v99 + 13) & 0x38000000 | 1;
        *((_QWORD *)v99 + 1) = 0;
        *((_QWORD *)v99 + 2) = 0;
        *(_QWORD *)v99 = 0;
        *((_QWORD *)v99 + 4) = ***(_QWORD ***)v75 + 1576;
        *((_QWORD *)v99 + 3) = v99 + 32;
        *((_QWORD *)v99 + 5) = 0;
        v99[48] = 30;
        v99[49] = 0;
        *((_WORD *)v99 + 25) = 0;
        *((_DWORD *)v99 + 13) = 1;
        *(_OWORD *)(v99 + 56) = 0u;
        v100 = v99 + 56;
        *(_OWORD *)(v99 + 72) = 0u;
        *((_DWORD *)v99 + 22) = 0;
        v101 = *(_QWORD *)(v82 + 40);
        v102 = (uint64_t *)(v82 + 24);
        *((_QWORD *)v99 + 9) = v101;
        *(_WORD *)(v101 + 18) &= ~0x8000u;
        if ((v99[55] & 0x10) != 0
          && (v119 = *(_QWORD *)(v101 + 56)) != 0
          && (v120 = *(llvm::ValueSymbolTable **)(v119 + 104)) != 0)
        {
          llvm::ValueSymbolTable::reinsertValue(v120, (llvm::Value *)(v99 + 32));
          v121 = *(_QWORD *)v99;
          v122 = *v102;
          *((_QWORD *)v99 + 7) = *v102;
          *((_QWORD *)v99 + 8) = v102;
          *(_QWORD *)(v122 + 8) = v100;
          *v102 = (uint64_t)v100;
          if (v121)
          {
            **((_QWORD **)v99 + 2) = *((_QWORD *)v99 + 1);
            v123 = *((_QWORD *)v99 + 1);
            if (v123)
              *(_QWORD *)(v123 + 16) = *((_QWORD *)v99 + 2);
          }
        }
        else
        {
          v103 = *v102;
          *((_QWORD *)v99 + 7) = *v102;
          *((_QWORD *)v99 + 8) = v102;
          *(_QWORD *)(v103 + 8) = v100;
          *v102 = (uint64_t)v100;
        }
        *(_QWORD *)v99 = v75;
        v104 = *(_QWORD *)(v75 + 8);
        *((_QWORD *)v99 + 1) = v104;
        if (v104)
          *(_QWORD *)(v104 + 16) = v99 + 8;
        *((_QWORD *)v99 + 2) = v76;
        *v76 = v99;
        if (v207)
        {
          v105 = *(_QWORD *)(v82 + 40);
          v106 = v183;
          if (v183 >= (unint64_t)HIDWORD(v183))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v183 + 1, 16);
            v106 = v183;
          }
          v107 = (char *)v182 + 16 * v106;
          *v107 = v105;
          v107[1] = v75 & 0xFFFFFFFFFFFFFFFBLL;
          v108 = v183 + 1;
          LODWORD(v183) = v183 + 1;
          v109 = *(_DWORD *)(v82 + 20);
          if ((v109 & 0x40000000) != 0)
          {
            v111 = *(_QWORD *)(v82 - 8);
            v110 = v109 & 0x7FFFFFF;
          }
          else
          {
            v110 = v109 & 0x7FFFFFF;
            v111 = v82 - 32 * v110;
          }
          if (v110 != 1)
          {
            v114 = (uint64_t *)(v111 + 32);
            v115 = 32 * v110 - 32;
            do
            {
              v116 = *v114;
              v117 = *(_QWORD *)(v82 + 40);
              if (v108 >= HIDWORD(v183))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, (uint64_t)v184, v108 + 1, 16);
                v108 = v183;
              }
              v118 = (char *)v182 + 16 * v108;
              *v118 = v117;
              v118[1] = v116 | 4;
              v108 = v183 + 1;
              LODWORD(v183) = v183 + 1;
              v114 += 4;
              v115 -= 32;
            }
            while (v115);
          }
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v82 + 40) + 40, (uint64_t ***)v82);
        v112 = *(_QWORD *)(v82 + 24);
        v113 = *(_QWORD **)(v82 + 32);
        *v113 = v112;
        *(_QWORD *)(v112 + 8) = v113;
        *v102 = 0;
        *(_QWORD *)(v82 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v82);
        if (++v81 == v170)
          goto LABEL_174;
      }
      v86 = ***v85;
      v87 = *(_QWORD *)(v86 + 152);
      v88 = *(unsigned int *)(v86 + 168);
      if ((_DWORD)v88)
      {
        LODWORD(v89) = (v88 - 1) & ((v85 >> 4) ^ (v85 >> 9));
        v90 = (uint64_t ****)(v87 + 16 * v89);
        v91 = *v90;
        if (*v90 == v85)
        {
LABEL_131:
          v94 = v90[1];
          v97 = (char *)*v94;
          v96 = (char *)(v94 + 2);
          v95 = v97;
          goto LABEL_132;
        }
        v92 = 1;
        while (v91 != (uint64_t ***)-4096)
        {
          v93 = v89 + v92++;
          v89 = v93 & (v88 - 1);
          v91 = *(uint64_t ****)(v87 + 16 * v89);
          if (v91 == v85)
          {
            v90 = (uint64_t ****)(v87 + 16 * v89);
            goto LABEL_131;
          }
        }
      }
      v90 = (uint64_t ****)(v87 + 16 * v88);
      goto LABEL_131;
    }
  }
  v29 = 0;
LABEL_93:
  if (v178 != v177)
    free(v178);
  if (v200 != &v202)
    free(v200);
  if (v207)
  {
    llvm::DomTreeUpdater::flush((llvm::DomTreeUpdater *)v203);
    v185 = &v206;
    sub_1C50B10F0((void ***)&v185);
    if (v205 != (void *)v204[37])
      free(v205);
    if (v203[0] != v204)
      free(v203[0]);
  }
  return v29;
}

uint64_t llvm::createInlineSpiller(llvm *this, llvm::MachineFunctionPass *a2, llvm::MachineFunction *a3, llvm::VirtRegMap *a4, llvm::VirtRegAuxInfo *a5)
{
  uint64_t v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  void **v15;
  void *v16;
  void **v17;
  void *v18;
  void **v19;
  void *v20;
  void **v21;
  void *v22;
  void **v23;
  void *v24;
  void **v25;
  void *v26;
  void **v27;
  void *v28;
  void **v29;
  void *v30;
  void **v31;
  void *v32;
  unint64_t v33;

  v8 = operator new();
  *(_QWORD *)v8 = &off_1E8142E40;
  *(_QWORD *)(v8 + 8) = a2;
  v9 = (void **)**((_QWORD **)this + 1);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(v8 + 16) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::LiveIntervals::ID);
  v11 = (void **)**((_QWORD **)this + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::LiveStacks::ID);
  *(_QWORD *)(v8 + 24) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::LiveStacks::ID);
  v13 = (void **)**((_QWORD **)this + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v15 = (void **)**((_QWORD **)this + 1);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v8 + 40) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::MachineDominatorTree::ID);
  v17 = (void **)**((_QWORD **)this + 1);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v8 + 48) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v8 + 72) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *(_QWORD *)(v8 + 80) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  v19 = (void **)**((_QWORD **)this + 1);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(v8 + 88) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  *(_DWORD *)(v8 + 116) = 0;
  *(_QWORD *)(v8 + 120) = v8 + 136;
  *(_QWORD *)(v8 + 128) = 0x800000000;
  *(_QWORD *)(v8 + 168) = v8 + 200;
  *(_QWORD *)(v8 + 176) = v8 + 200;
  *(_QWORD *)(v8 + 184) = 8;
  *(_DWORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 264) = v8 + 296;
  *(_QWORD *)(v8 + 272) = v8 + 296;
  *(_QWORD *)(v8 + 280) = 8;
  *(_DWORD *)(v8 + 288) = 0;
  *(_QWORD *)(v8 + 360) = v8 + 376;
  *(_QWORD *)(v8 + 368) = 0x800000000;
  *(_QWORD *)(v8 + 440) = &off_1E8142E78;
  *(_QWORD *)(v8 + 448) = a2;
  v21 = (void **)**((_QWORD **)this + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(v8 + 456) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::LiveIntervals::ID);
  v23 = (void **)**((_QWORD **)this + 1);
  do
  {
    v24 = *v23;
    v23 += 2;
  }
  while (v24 != &llvm::LiveStacks::ID);
  *(_QWORD *)(v8 + 464) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v23 - 1) + 96))(*(v23 - 1), &llvm::LiveStacks::ID);
  v25 = (void **)**((_QWORD **)this + 1);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v8 + 472) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v27 = (void **)**((_QWORD **)this + 1);
  do
  {
    v28 = *v27;
    v27 += 2;
  }
  while (v28 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v8 + 480) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v27 - 1) + 96))(*(v27 - 1), &llvm::MachineDominatorTree::ID);
  v29 = (void **)**((_QWORD **)this + 1);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v8 + 488) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v8 + 496) = a3;
  *(_QWORD *)(v8 + 504) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v8 + 512) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *(_QWORD *)(v8 + 520) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  v31 = (void **)**((_QWORD **)this + 1);
  do
  {
    v32 = *v31;
    v31 += 2;
  }
  while (v32 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(v8 + 528) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v31 - 1) + 96))(*(v31 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v33 = *((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13);
  *(_QWORD *)(v8 + 536) = *(_QWORD *)(v8 + 456);
  *(_QWORD *)(v8 + 544) = v8 + 560;
  *(_QWORD *)(v8 + 552) = 0x800000000;
  sub_1C529482C((char *)(v8 + 544), (v33 >> 3), 0, 0);
  *(_QWORD *)(v8 + 696) = 0;
  *(_QWORD *)(v8 + 688) = 0;
  *(_DWORD *)(v8 + 704) = 0;
  *(_QWORD *)(v8 + 720) = 0;
  *(_QWORD *)(v8 + 712) = 0;
  *(_DWORD *)(v8 + 728) = 0;
  *(_OWORD *)(v8 + 736) = 0u;
  *(_OWORD *)(v8 + 752) = 0u;
  *(_OWORD *)(v8 + 764) = 0u;
  *(_QWORD *)(v8 + 784) = a4;
  return v8;
}

void sub_1C50DB700(llvm *a1, uint64_t a2, uint64_t a3, const char *a4, unsigned int a5)
{
  uint64_t v9;
  llvm *v10;
  char v11;
  char v12;
  llvm::raw_ostream *RegisterDefOperandIdx;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  size_t v16;
  _WORD *v17;
  char *v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm *v38;
  llvm *v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;

  v9 = (uint64_t)a1;
  if (!a1)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v10 = a1;
  if ((*(_BYTE *)a1 & 4) == 0)
  {
LABEL_6:
    while ((*((_WORD *)v10 + 22) & 8) != 0)
      v10 = (llvm *)*((_QWORD *)v10 + 1);
  }
  if (*((_QWORD *)v10 + 1) == a2)
    v11 = 32;
  else
    v11 = 9;
  if (*((_QWORD *)v10 + 1) == a2)
    v12 = 32;
  else
    v12 = 10;
  RegisterDefOperandIdx = llvm::dbgs(a1);
  v14 = RegisterDefOperandIdx;
  v15 = (_BYTE *)*((_QWORD *)RegisterDefOperandIdx + 4);
  if ((unint64_t)v15 >= *((_QWORD *)RegisterDefOperandIdx + 3))
  {
    RegisterDefOperandIdx = llvm::raw_ostream::write(RegisterDefOperandIdx, 9);
  }
  else
  {
    *((_QWORD *)RegisterDefOperandIdx + 4) = v15 + 1;
    *v15 = 9;
  }
  if (a4)
  {
    v16 = strlen(a4);
    RegisterDefOperandIdx = (llvm::raw_ostream *)*((_QWORD *)v14 + 4);
    if (v16 <= *((_QWORD *)v14 + 3) - (_QWORD)RegisterDefOperandIdx)
    {
      if (v16)
      {
        RegisterDefOperandIdx = (llvm::raw_ostream *)memcpy(RegisterDefOperandIdx, a4, v16);
        *((_QWORD *)v14 + 4) += v16;
      }
    }
    else
    {
      RegisterDefOperandIdx = llvm::raw_ostream::write(v14, a4, v16);
      v14 = RegisterDefOperandIdx;
    }
  }
  v17 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 8250;
    v18 = (char *)(*((_QWORD *)v14 + 4) + 2);
    *((_QWORD *)v14 + 4) = v18;
  }
  else
  {
    RegisterDefOperandIdx = llvm::raw_ostream::write(v14, ": ", 2uLL);
    v14 = RegisterDefOperandIdx;
    v18 = (char *)*((_QWORD *)RegisterDefOperandIdx + 4);
  }
  if ((unint64_t)v18 >= *((_QWORD *)v14 + 3))
  {
    RegisterDefOperandIdx = llvm::raw_ostream::write(v14, v12);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v18 + 1;
    *v18 = v12;
  }
  for (; v9 != a2; v9 = *(_QWORD *)(v9 + 8))
  {
    v19 = *(_WORD *)(v9 + 44);
    v20 = v9;
    if ((v19 & 4) != 0)
    {
      do
        v20 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v20 + 44) & 4) != 0);
    }
    v21 = v9;
    if ((v19 & 8) != 0)
    {
      do
        v21 = *(_QWORD *)(v21 + 8);
      while ((*(_WORD *)(v21 + 44) & 8) != 0);
    }
    v22 = *(_QWORD *)(v21 + 8);
    if (v20 != v22)
    {
      while (1)
      {
        v23 = **(unsigned __int16 **)(v20 + 16);
        v24 = v23 > 0x17;
        v25 = (1 << v23) & 0x83E000;
        if (v24 || v25 == 0)
          break;
        v20 = *(_QWORD *)(v20 + 8);
        if (v20 == v22)
        {
          v20 = v22;
          break;
        }
      }
    }
    v27 = *(_QWORD *)(a3 + 288);
    v28 = *(_QWORD *)(v27 + 368);
    v29 = *(unsigned int *)(v27 + 384);
    if ((_DWORD)v29)
    {
      LODWORD(v30) = ((v20 >> 4) ^ (v20 >> 9)) & (v29 - 1);
      v31 = (uint64_t *)(v28 + 16 * v30);
      v32 = *v31;
      if (v20 == *v31)
        goto LABEL_41;
      v33 = 1;
      while (v32 != -4096)
      {
        v34 = v30 + v33++;
        v30 = v34 & (v29 - 1);
        v32 = *(_QWORD *)(v28 + 16 * v30);
        if (v20 == v32)
        {
          v31 = (uint64_t *)(v28 + 16 * v30);
          goto LABEL_41;
        }
      }
    }
    v31 = (uint64_t *)(v28 + 16 * v29);
LABEL_41:
    v35 = v31[1] & 0xFFFFFFFFFFFFFFF8;
    v36 = v35 | 4;
    if (a5)
    {
      RegisterDefOperandIdx = (llvm::raw_ostream *)llvm::MachineInstr::findRegisterDefOperandIdx(v9, a5, 0, 0, 0);
      if ((_DWORD)RegisterDefOperandIdx != -1)
      {
        v37 = *(_QWORD *)(v9 + 32);
        if (v37)
        {
          if ((*(_BYTE *)(v37 + 32 * RegisterDefOperandIdx + 3) & 0x40) != 0)
            v36 = v35 | 2;
        }
      }
    }
    v38 = llvm::dbgs(RegisterDefOperandIdx);
    v39 = v38;
    v40 = (char *)*((_QWORD *)v38 + 4);
    if ((unint64_t)v40 >= *((_QWORD *)v38 + 3))
    {
      llvm::raw_ostream::write(v38, v11);
    }
    else
    {
      *((_QWORD *)v38 + 4) = v40 + 1;
      *v40 = v11;
    }
    v42 = v36;
    llvm::SlotIndex::print((llvm::SlotIndex *)&v42, v39);
    v41 = (_BYTE *)*((_QWORD *)v39 + 4);
    if ((unint64_t)v41 >= *((_QWORD *)v39 + 3))
    {
      llvm::raw_ostream::write(v39, 9);
    }
    else
    {
      *((_QWORD *)v39 + 4) = v41 + 1;
      *v41 = 9;
    }
    llvm::MachineInstr::print((llvm::MachineInstr *)v9, v39, 1, 0, 0, 1, 0);
    if ((*(_BYTE *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
        v9 = *(_QWORD *)(v9 + 8);
    }
  }
}

uint64_t sub_1C50DBA7C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &off_1E8142E40;
  *(_QWORD *)(a1 + 440) = &off_1E8142E78;
  sub_1C50E0F60(a1 + 760);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 760), 8);
  v8 = (void **)(a1 + 736);
  sub_1C50E0FD4(&v8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 712), 8);
  sub_1C50E104C((uint64_t *)(a1 + 688));
  v2 = *(void **)(a1 + 544);
  if (v2 != (void *)(a1 + 560))
    free(v2);
  v3 = *(void **)(a1 + 360);
  if (v3 != (void *)(a1 + 376))
    free(v3);
  v4 = *(void **)(a1 + 272);
  if (v4 != *(void **)(a1 + 264))
    free(v4);
  v5 = *(void **)(a1 + 176);
  if (v5 != *(void **)(a1 + 168))
    free(v5);
  v6 = *(void **)(a1 + 120);
  if (v6 != (void *)(a1 + 136))
    free(v6);
  return a1;
}

void sub_1C50DBB50(uint64_t a1)
{
  sub_1C50DBA7C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C50DBB74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::LiveInterval *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  llvm::LiveInterval *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  unint64_t i;
  int v46;
  char v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  BOOL v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  llvm::LiveInterval *v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 **v115;
  unsigned __int8 *v116;
  unsigned int *v117;
  unsigned int *v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v133;
  uint64_t v134;
  int *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int SpillSlot;
  uint64_t *Interval;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  llvm::LiveInterval *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  unint64_t v198;
  __int16 v199;
  unint64_t v200;
  unint64_t j;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int v208;
  int32x2_t *v209;
  int32x2_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  int v215;
  int v216;
  __int16 v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  int v224;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  int v232;
  unint64_t v233;
  unsigned int v234;
  _QWORD *v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  _QWORD *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  BOOL v243;
  unint64_t v244;
  uint64_t v245;
  _DWORD *v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned __int8 *v255;
  uint64_t *v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int *v260;
  int *v261;
  int v262;
  int v263;
  int v264;
  int v265;
  BOOL v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t *v269;
  uint64_t LiveSubranges;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t k;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  int v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  llvm::SmallPtrSetImplBase *v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  llvm::MachineFunction *v301;
  unsigned __int8 *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  llvm::LiveInterval *v310;
  unsigned int v311;
  _QWORD *v312;
  uint64_t v313;
  unsigned int v314;
  unsigned int v315;
  _QWORD *v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  BOOL v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unsigned int v325;
  int v326;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  int v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  llvm::LiveInterval *v343;
  unsigned int v344;
  _QWORD *v345;
  uint64_t v346;
  unsigned int v347;
  unsigned int v348;
  unint64_t v349;
  _QWORD *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  BOOL v354;
  unint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int v360;
  _QWORD *v361;
  unint64_t v362;
  uint64_t v363;
  BOOL v364;
  unint64_t v365;
  _BOOL4 v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  unsigned int *v370;
  unsigned int v371;
  _QWORD *v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  _QWORD *v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  BOOL v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  unsigned __int8 *v393;
  _QWORD *v394;
  uint64_t *v395;
  unsigned __int8 *v396;
  unsigned __int8 *v397;
  uint64_t m;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int *v403;
  int v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  int v409;
  unint64_t v410;
  unint64_t v411;
  unsigned __int8 *v412;
  unsigned __int8 *v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  int v420;
  llvm::LiveInterval *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v427;
  llvm::LiveInterval *v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  int v433;
  llvm::LiveInterval *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  int v440;
  int *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  int32x2_t *v447;
  int32x2_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  int v453;
  int v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int *v458;
  uint64_t v459;
  unsigned int v460;
  unsigned int v461;
  int v462;
  unsigned int v463;
  void *v464;
  unsigned int v465;
  int v466;
  unsigned int v467;
  void *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  int *v476;
  unsigned int v477;
  llvm::LiveInterval *v478;
  unint64_t v479;
  llvm::LiveInterval *v480;
  uint64_t v481;
  int *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  llvm::LiveInterval *v487;
  llvm::SmallPtrSetImplBase *v488;
  int *v489;
  uint64_t v490;
  llvm::MachineFunction *v491;
  __int16 v492;
  char v493;
  llvm::MachineFunction *v494;
  llvm::MachineFunction *v495;
  llvm::MachineFunction *v496;
  unsigned __int8 *v497;
  int *v498;
  int v499;
  unsigned __int8 *v500[3];
  uint64_t v501;
  uint64_t v502;
  unsigned __int8 *v503;
  uint64_t v504;
  unsigned __int8 *v505;
  uint64_t v506;
  unsigned __int8 *v507;
  void *v508;
  uint64_t v509;
  _QWORD v510[18];

  v510[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 96) = a2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(v4 + 112);
  if (*(_DWORD *)(*(_QWORD *)(v3 + 328) + 4 * (v5 & 0x7FFFFFFF)))
    v5 = *(_DWORD *)(*(_QWORD *)(v3 + 328) + 4 * (v5 & 0x7FFFFFFF));
  *(_DWORD *)(a1 + 116) = v5;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)(v3 + 304) + 4 * (v5 & 0x7FFFFFFF));
  *(_QWORD *)(a1 + 104) = 0;
  v6 = *(unsigned int *)(v4 + 112);
  v7 = (_QWORD *)(a1 + 120);
  sub_1C4893E04((char *)(a1 + 120), 1uLL, *(_DWORD *)(v4 + 112));
  v488 = (llvm::SmallPtrSetImplBase *)(a1 + 168);
  v8 = *(void **)(a1 + 176);
  if (v8 == *(void **)(a1 + 168))
    goto LABEL_4;
  v168 = *(unsigned int *)(a1 + 184);
  if (v168 < 0x21 || 4 * (*(_DWORD *)(a1 + 188) - *(_DWORD *)(a1 + 192)) >= v168)
  {
    memset(v8, 255, 8 * v168);
LABEL_4:
    *(_DWORD *)(a1 + 188) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    goto LABEL_5;
  }
  free(v8);
  v461 = *(_DWORD *)(a1 + 188) - *(_DWORD *)(a1 + 192);
  v462 = 1 << (33 - __clz(v461 - 1));
  *(_DWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  if (v461 <= 0x10)
    v463 = 32;
  else
    v463 = v462;
  *(_DWORD *)(a1 + 184) = v463;
  v464 = malloc_type_malloc(8 * v463, 0x4065EBACuLL);
  if (!v464)
    goto LABEL_721;
  *(_QWORD *)(a1 + 176) = v464;
  memset(v464, 255, 8 * *(unsigned int *)(a1 + 184));
LABEL_5:
  if (*(_DWORD *)(a1 + 116) != v6)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = (uint64_t *)((v6 & 0x80000000) != 0
                    ? *(_QWORD *)(v9 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v9 + 272) + 8 * v6);
    v11 = *v10;
    while (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      do
        v11 = *(_QWORD *)(v11 + 24);
      while (v11 && *(_QWORD *)(v11 + 8) == v12);
      if (**(_WORD **)(v12 + 16) == 19)
      {
        v13 = *(_DWORD **)(v12 + 32);
        if ((*v13 & 0xFFF00) == 0 && (v13[8] & 0xFFF00) == 0)
        {
          v14 = v13[1];
          v15 = v13[9];
          if (v14 == v6)
          {
            v14 = v15;
LABEL_19:
            if ((v14 & 0x80000000) != 0)
            {
              v16 = v14 & 0x7FFFFFFF;
              v17 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 328) + 4 * v16);
              if (!(_DWORD)v17)
                v17 = v14;
              if (v17 == *(_DWORD *)(a1 + 116))
              {
                v18 = *(_QWORD *)(a1 + 16);
                if (v16 >= *(unsigned int *)(v18 + 416)
                  || (v19 = *(llvm::LiveInterval **)(*(_QWORD *)(v18 + 408) + 8 * v16)) == 0)
                {
                  v19 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 16), v14);
                  v24 = *(_QWORD *)(v18 + 304);
                  v25 = *(_QWORD *)(v18 + 248);
                  *(_QWORD *)v24 = v25;
                  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 40);
                  *(_OWORD *)(v24 + 16) = *(_OWORD *)(v18 + 288);
                  *(_QWORD *)(v24 + 32) = v18 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v24);
                  *(_DWORD *)(v24 + 184) = 0;
                  v26 = *(_QWORD *)(v18 + 256);
                  v28 = *(_BYTE *)(v26 + 16) == 0;
                  v27 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v26 + 24)
                                                        + 16 * (*((_DWORD *)v19 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                           + 34);
                  v28 = v28 || v27 == 0;
                  v29 = !v28;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v18 + 304), v19, v29);
                  llvm::LiveIntervals::computeDeadValues(v18, (uint64_t)v19, 0);
                }
                if (sub_1C50E1358(a1, (uint64_t)v19))
                {
                  sub_1C4774094(v488, v12);
                  v20 = *(_DWORD **)(a1 + 120);
                  v21 = *(unsigned int *)(a1 + 128);
                  v22 = v20;
                  if ((_DWORD)v21)
                  {
                    v23 = 4 * v21;
                    v22 = *(_DWORD **)(a1 + 120);
                    while (*v22 != v14)
                    {
                      ++v22;
                      v23 -= 4;
                      if (!v23)
                      {
                        v22 = &v20[v21];
                        break;
                      }
                    }
                  }
                  if (v21 == v22 - v20)
                  {
                    if (v21 >= *(_DWORD *)(a1 + 132))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v7, a1 + 136, v21 + 1, 4);
                      v20 = *(_DWORD **)(a1 + 120);
                      v21 = *(unsigned int *)(a1 + 128);
                    }
                    v20[v21] = v14;
                    ++*(_DWORD *)(a1 + 128);
                  }
                }
              }
            }
            continue;
          }
          if (v15 == v6)
            goto LABEL_19;
        }
      }
    }
  }
  v30 = *(_QWORD *)(a1 + 96);
  if (!*(_BYTE *)(v30 + 68))
    llvm::LiveRangeEdit::scanRemattable(*(_QWORD *)(a1 + 96), *(llvm::AAResults **)(a1 + 32));
  if (*(_DWORD *)(v30 + 100) == *(_DWORD *)(v30 + 104))
    goto LABEL_260;
  v31 = *(void **)(a1 + 272);
  if (v31 == *(void **)(a1 + 264))
    goto LABEL_48;
  v169 = *(unsigned int *)(a1 + 280);
  if (v169 >= 0x21 && 4 * (*(_DWORD *)(a1 + 284) - *(_DWORD *)(a1 + 288)) < v169)
  {
    free(v31);
    v465 = *(_DWORD *)(a1 + 284) - *(_DWORD *)(a1 + 288);
    v466 = 1 << (33 - __clz(v465 - 1));
    if (v465 <= 0x10)
      v467 = 32;
    else
      v467 = v466;
    *(_DWORD *)(a1 + 280) = v467;
    *(_QWORD *)(a1 + 284) = 0;
    v468 = malloc_type_malloc(8 * v467, 0x4065EBACuLL);
    if (v468)
    {
      *(_QWORD *)(a1 + 272) = v468;
      memset(v468, 255, 8 * *(unsigned int *)(a1 + 280));
      goto LABEL_49;
    }
LABEL_721:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  memset(v31, 255, 8 * v169);
LABEL_48:
  *(_QWORD *)(a1 + 284) = 0;
LABEL_49:
  v32 = *(unsigned int *)(a1 + 128);
  if (!(_DWORD)v32)
    goto LABEL_260;
  v33 = 0;
  v34 = *(int **)(a1 + 120);
  v491 = (llvm::MachineFunction *)&v34[v32];
  do
  {
    v35 = *v34;
    v36 = *(_QWORD *)(a1 + 16);
    v37 = v35 & 0x7FFFFFFF;
    if (v37 >= *(unsigned int *)(v36 + 416)
      || (v38 = *(llvm::LiveInterval **)(*(_QWORD *)(v36 + 408) + 8 * v37)) == 0)
    {
      v38 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 16), *v34);
      v128 = *(_QWORD *)(v36 + 304);
      v129 = *(_QWORD *)(v36 + 248);
      *(_QWORD *)v128 = v129;
      *(_QWORD *)(v128 + 8) = *(_QWORD *)(v129 + 40);
      *(_OWORD *)(v128 + 16) = *(_OWORD *)(v36 + 288);
      *(_QWORD *)(v128 + 32) = v36 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v128);
      *(_DWORD *)(v128 + 184) = 0;
      v130 = *(_QWORD *)(v36 + 256);
      v28 = *(_BYTE *)(v130 + 16) == 0;
      v131 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v130 + 24) + 16 * (*((_DWORD *)v38 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v133 = !v28 && v131 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v36 + 304), v38, v133);
      llvm::LiveIntervals::computeDeadValues(v36, (uint64_t)v38, 0);
    }
    v39 = *(_QWORD *)(a1 + 64);
    if ((v35 & 0x80000000) != 0)
      v40 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * v37 + 8);
    else
      v40 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v35);
    v41 = *v40;
    while (v41)
    {
      v42 = *(_QWORD *)(v41 + 8);
      v43 = *(_WORD *)(v42 + 44);
      v44 = v42;
      if ((v43 & 4) != 0)
      {
        do
          v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v44 + 44) & 4) != 0);
      }
      do
      {
        v41 = *(_QWORD *)(v41 + 24);
        if (!v41)
          break;
        for (i = *(_QWORD *)(v41 + 8); (*(_WORD *)(i + 44) & 4) != 0; i = *(_QWORD *)i & 0xFFFFFFFFFFFFFFF8)
          ;
      }
      while (i == v44);
      if ((v43 & 4) != 0)
      {
        do
          v42 = *(_QWORD *)v42 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v42 + 44) & 4) != 0);
      }
      if (**(unsigned __int16 **)(v42 + 16) - 13 >= 2)
      {
        v508 = v510;
        v509 = 0x800000000;
        v46 = llvm::AnalyzeVirtRegInBundle(v42, *((_DWORD *)v38 + 28), (uint64_t)&v508);
        if ((v46 & 1) == 0)
          goto LABEL_69;
        v48 = v46;
        v49 = *(_WORD *)(v42 + 44);
        v50 = v42;
        if ((v49 & 4) != 0)
        {
          do
            v50 = *(_QWORD *)v50 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v50 + 44) & 4) != 0);
        }
        v51 = v42;
        if ((v49 & 8) != 0)
        {
          do
            v51 = *(_QWORD *)(v51 + 8);
          while ((*(_WORD *)(v51 + 44) & 8) != 0);
        }
        v52 = *(_QWORD *)(v51 + 8);
        if (v50 != v52)
        {
          while (1)
          {
            v53 = **(unsigned __int16 **)(v50 + 16);
            v54 = v53 > 0x17;
            v55 = (1 << v53) & 0x83E000;
            if (v54 || v55 == 0)
              break;
            v50 = *(_QWORD *)(v50 + 8);
            if (v50 == v52)
            {
              v50 = v52;
              break;
            }
          }
        }
        v57 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288);
        v58 = *(_QWORD *)(v57 + 368);
        v59 = *(unsigned int *)(v57 + 384);
        if ((_DWORD)v59)
        {
          LODWORD(v60) = ((v50 >> 4) ^ (v50 >> 9)) & (v59 - 1);
          v61 = (uint64_t *)(v58 + 16 * v60);
          v62 = *v61;
          if (v50 == *v61)
            goto LABEL_86;
          v63 = 1;
          while (v62 != -4096)
          {
            v64 = v60 + v63++;
            v60 = v64 & (v59 - 1);
            v62 = *(_QWORD *)(v58 + 16 * v60);
            if (v50 == v62)
            {
              v61 = (uint64_t *)(v58 + 16 * v60);
              goto LABEL_86;
            }
          }
        }
        v61 = (uint64_t *)(v58 + 16 * v59);
LABEL_86:
        v65 = v61[1] & 0xFFFFFFFFFFFFFFF8;
        v66 = *((_DWORD *)v38 + 2);
        v67 = *(_QWORD **)v38;
        if (!v66)
        {
          v66 = 0;
LABEL_96:
          v71 = &v67[3 * v66];
          goto LABEL_97;
        }
        v68 = v67[3 * v66 - 2];
        v69 = *(_DWORD *)(v65 + 24);
        v70 = (v68 >> 1) & 3 | *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24);
        v71 = *(_QWORD **)v38;
        v72 = *((unsigned int *)v38 + 2);
        if (v69 >= v70)
          goto LABEL_96;
        do
        {
          v73 = v72 >> 1;
          v74 = v71[3 * (v72 >> 1) + 1];
          LODWORD(v74) = (v74 >> 1) & 3 | *(_DWORD *)((v74 & 0xFFFFFFFFFFFFFFF8) + 24);
          v72 -= (v72 >> 1) + 1;
          v75 = v69 >= v74;
          if (v69 >= v74)
            v76 = v73 + 1;
          else
            v76 = 0;
          v71 += 3 * v76;
          if (!v75)
            v72 = v73;
        }
        while (v72);
LABEL_97:
        if (v71 == &v67[3 * v66]
          || ((*v71 >> 1) & 3 | *(_DWORD *)((*v71 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v65 + 24)
          || !v71[2])
        {
          v94 = *(unsigned int *)(v42 + 40);
          if ((_DWORD)v94)
          {
            v95 = *(_DWORD **)(v42 + 32);
            v96 = 32 * v94;
            do
            {
              if ((*v95 & 0x10000FF) == 0 && v95[1] == *((_DWORD *)v38 + 28))
                *v95 |= 0x10000000u;
              v95 += 8;
              v96 -= 32;
            }
            while (v96);
          }
          goto LABEL_120;
        }
        v497 = (unsigned __int8 *)v71[2];
        v77 = sub_1C477672C((uint64_t)v488, v42);
        v78 = *(_QWORD *)(a1 + 176);
        v79 = 184;
        if (v78 == *(_QWORD *)(a1 + 168))
          v79 = 188;
        if (v77 != (_QWORD *)(v78 + 8 * *(unsigned int *)(a1 + v79)))
          goto LABEL_69;
        v489 = v34;
        v80 = *(_QWORD *)(a1 + 16);
        v81 = *(_DWORD *)(a1 + 116);
        if ((v81 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v80 + 416)
          || (v82 = *(llvm::LiveInterval **)(*(_QWORD *)(v80 + 408) + 8 * (v81 & 0x7FFFFFFF))) == 0)
        {
          v483 = *(_QWORD *)(a1 + 16);
          v82 = (llvm::LiveInterval *)sub_1C4851220(v483, v81);
          v481 = *(_QWORD *)(v483 + 304);
          v123 = *(_QWORD *)(v483 + 248);
          *(_QWORD *)v481 = v123;
          *(_QWORD *)(v481 + 8) = *(_QWORD *)(v123 + 40);
          *(_OWORD *)(v481 + 16) = *(_OWORD *)(v483 + 288);
          *(_QWORD *)(v481 + 32) = v483 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v481);
          *(_DWORD *)(v481 + 184) = 0;
          v124 = *(_QWORD *)(v483 + 256);
          v28 = *(_BYTE *)(v124 + 16) == 0;
          v125 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v124 + 24) + 16 * (*((_DWORD *)v82 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v127 = !v28 && v125 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v483 + 304), v82, v127);
          llvm::LiveIntervals::computeDeadValues(v483, (uint64_t)v82, 0);
        }
        v83 = *((_DWORD *)v82 + 2);
        v84 = *(_QWORD **)v82;
        if (!v83)
        {
          v83 = 0;
          v34 = v489;
          goto LABEL_126;
        }
        v85 = v84[3 * v83 - 2];
        v86 = *(_DWORD *)(v65 + 24) | 1;
        v87 = (v85 >> 1) & 3 | *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 24);
        v88 = *(_QWORD **)v82;
        v89 = *((unsigned int *)v82 + 2);
        if (v86 >= v87)
        {
          v34 = v489;
LABEL_126:
          v88 = &v84[3 * v83];
          goto LABEL_127;
        }
        do
        {
          v90 = v89 >> 1;
          v91 = v88[3 * (v89 >> 1) + 1];
          LODWORD(v91) = (v91 >> 1) & 3 | *(_DWORD *)((v91 & 0xFFFFFFFFFFFFFFF8) + 24);
          v89 -= (v89 >> 1) + 1;
          v92 = v86 >= v91;
          if (v86 >= v91)
            v93 = v90 + 1;
          else
            v93 = 0;
          v88 += 3 * v93;
          if (!v92)
            v89 = v90;
        }
        while (v89);
        v34 = v489;
LABEL_127:
        if (v88 == &v84[3 * v83]
          || ((*v88 >> 1) & 3 | *(_DWORD *)((*v88 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v65 + 24) | 1u))
        {
          v97 = 0;
        }
        else
        {
          v97 = v88[2];
        }
        v503 = v497;
        v98 = *(_QWORD *)(v97 + 8);
        if (v98 < 8)
          v99 = 0;
        else
          v99 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFFF8) + 16);
        v504 = v99;
        if ((llvm::LiveRangeEdit::canRematerializeAt(*(_QWORD *)(a1 + 96), (uint64_t)&v503, v97, v65 | 2, 0) & 1) == 0
          || (v48 & 0x10000) != 0)
        {
          goto LABEL_155;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v504 + 16) + 10) & 4) != 0
          && sub_1C50E19A0(a1, (uint64_t)v508, v509, v504))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)(a1 + 96) + 144), (uint64_t)v503);
LABEL_120:
          v47 = 1;
          goto LABEL_121;
        }
        if (byte_1ED7F91B0)
        {
          v100 = *(_QWORD *)(v42 + 16);
          if (*(_WORD *)v100 == 31)
          {
            v101 = *(unsigned __int8 *)(v100 + 4);
            if ((*(_BYTE *)(v100 + 8) & 2) == 0 || (v120 = *(_DWORD *)(v42 + 40), v120 == v101))
            {
              v102 = *(unsigned __int8 *)(v100 + 4);
            }
            else
            {
              v121 = v120 - 1;
              v102 = *(unsigned __int8 *)(v100 + 4);
              do
              {
                v122 = *(_DWORD *)(*(_QWORD *)(v42 + 32) + 32 * v101);
                if ((v122 & 0x10000FF) != 0x1000000)
                  break;
                v102 += (v122 & 0x2000000) == 0;
                if (v121 == v101)
                  break;
                ++v101;
              }
              while ((v122 & 0x2000000) == 0);
            }
            v103 = *(_QWORD *)(v100 + 32);
            if (v103)
            {
              v104 = -1;
              do
                ++v104;
              while (*(_WORD *)(v103 + 2 * v104));
            }
            else
            {
              v104 = 0;
            }
            v105 = v104 + v102;
            v106 = *(_QWORD *)(v42 + 32);
            v107 = (v105 + *(_DWORD *)(v106 + 32 * (v105 + 2) + 16) + 4);
            v108 = *(unsigned int *)(v42 + 40);
            if (v107 < v108)
            {
              v109 = v108 - v107;
              v110 = (_DWORD *)(v106 + 32 * v107 + 4);
              while (*((_BYTE *)v110 - 4) || *v110 != *((_DWORD *)v38 + 28))
              {
                v110 += 8;
                if (!--v109)
                  goto LABEL_153;
              }
LABEL_155:
              sub_1C50E154C((uint64_t *)a1, (uint64_t)v38, (uint64_t)v497);
LABEL_69:
              v47 = 0;
              goto LABEL_121;
            }
          }
        }
LABEL_153:
        v111 = llvm::LiveRangeEdit::createFrom(*(_QWORD **)(a1 + 96), *(_DWORD *)(a1 + 116));
        v112 = llvm::LiveRangeEdit::rematerializeAt(*(_QWORD *)(a1 + 96), *(_QWORD *)(v42 + 24), (_QWORD *)v42, v111, (uint64_t *)&v503, *(_QWORD *)(a1 + 80), 0);
        if (v112 < 8)
          v113 = 0;
        else
          v113 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFFF8) + 16);
        v114 = *(unsigned __int8 **)(v42 + 56);
        v500[0] = v114;
        if (v114)
          llvm::MetadataTracking::track((uint64_t)v500, v114, 2);
        v115 = (unsigned __int8 **)(v113 + 56);
        if (v500 == (unsigned __int8 **)(v113 + 56))
        {
          if (v500[0])
            llvm::MetadataTracking::untrack((uint64_t)v500, v500[0]);
        }
        else
        {
          if (*v115)
            llvm::MetadataTracking::untrack(v113 + 56, *v115);
          v116 = v500[0];
          *v115 = v500[0];
          if (v116)
          {
            llvm::MetadataTracking::retrack((uint64_t)v500, v116, v113 + 56);
            v500[0] = 0;
          }
        }
        if ((_DWORD)v509)
        {
          v117 = (unsigned int *)v508;
          v118 = (unsigned int *)((char *)v508 + 16 * v509);
          do
          {
            v119 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v117 + 32) + 32 * v117[2]);
            if ((*v119 & 0x10000FF) == 0 && v119[1] == *((_DWORD *)v38 + 28))
            {
              llvm::MachineOperand::setReg(*(_QWORD *)(*(_QWORD *)v117 + 32) + 32 * v117[2], v111);
              *v119 |= 0x4000000u;
            }
            v117 += 4;
          }
          while (v117 != v118);
        }
        v47 = 1;
        v34 = v489;
LABEL_121:
        if (v508 != v510)
          free(v508);
        v33 |= v47;
      }
    }
    ++v34;
  }
  while (v34 != (int *)v491);
  if ((v33 & 1) != 0)
  {
    v134 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v134)
    {
      v135 = *(int **)(a1 + 120);
      v498 = &v135[v134];
      do
      {
        v136 = *v135;
        v137 = *(_QWORD *)(a1 + 16);
        if ((*v135 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v137 + 416)
          || (v138 = *(_QWORD *)(*(_QWORD *)(v137 + 408) + 8 * (*v135 & 0x7FFFFFFF))) == 0)
        {
          v138 = sub_1C4851220(*(_QWORD *)(a1 + 16), *v135);
          v154 = *(_QWORD *)(v137 + 304);
          v155 = *(_QWORD *)(v137 + 248);
          *(_QWORD *)v154 = v155;
          *(_QWORD *)(v154 + 8) = *(_QWORD *)(v155 + 40);
          *(_OWORD *)(v154 + 16) = *(_OWORD *)(v137 + 288);
          *(_QWORD *)(v154 + 32) = v137 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v154);
          *(_DWORD *)(v154 + 184) = 0;
          v156 = *(_QWORD *)(v137 + 256);
          v28 = *(_BYTE *)(v156 + 16) == 0;
          v157 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v156 + 24) + 16
                                                                          * (*(_DWORD *)(v138 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v159 = !v28 && v157 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v137 + 304), (llvm::LiveInterval *)v138, v159);
          llvm::LiveIntervals::computeDeadValues(v137, v138, 0);
        }
        v139 = *(unsigned int *)(v138 + 72);
        if ((_DWORD)v139)
        {
          v140 = *(uint64_t **)(v138 + 64);
          v141 = &v140[v139];
          do
          {
            v142 = *v140;
            if (*(_QWORD *)(*v140 + 8) >= 8uLL && (*(_QWORD *)(*v140 + 8) & 6) != 0)
            {
              v144 = sub_1C477672C(a1 + 264, *v140);
              v145 = *(_QWORD *)(a1 + 272);
              v146 = v145 == *(_QWORD *)(a1 + 264) ? 284 : 280;
              if (v144 == (_QWORD *)(v145 + 8 * *(unsigned int *)(a1 + v146)))
              {
                v147 = *(_QWORD *)(v142 + 8);
                if (v147 < 8)
                  v148 = 0;
                else
                  v148 = *(_QWORD *)((v147 & 0xFFFFFFFFFFFFFFF8) + 16);
                llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v148, v136, *(_QWORD *)(a1 + 80), 0);
                v149 = *(unsigned int *)(v148 + 40);
                if ((_DWORD)v149)
                {
                  v150 = *(_DWORD **)(v148 + 32);
                  v151 = 32 * v149;
                  while ((*v150 & 0x10000FF) != 0x1000000 || (*v150 & 0x5000000) == 83886080)
                  {
                    v150 += 8;
                    v151 -= 32;
                    if (!v151)
                      goto LABEL_227;
                  }
                }
                else
                {
LABEL_227:
                  v153 = *(unsigned int *)(a1 + 368);
                  if (v153 >= *(unsigned int *)(a1 + 372))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, a1 + 376, v153 + 1, 8);
                    v153 = *(unsigned int *)(a1 + 368);
                  }
                  *(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * v153) = v148;
                  ++*(_DWORD *)(a1 + 368);
                }
              }
            }
            ++v140;
          }
          while (v140 != v141);
        }
        ++v135;
      }
      while (v135 != v498);
    }
    if (*(_DWORD *)(a1 + 368))
    {
      llvm::LiveRangeEdit::eliminateDeadDefs(*(uint64_t **)(a1 + 96), a1 + 360, *(_DWORD **)(a1 + 120), *(unsigned int *)(a1 + 128), *(llvm::AAResults **)(a1 + 32));
      v160 = *(unsigned int *)(a1 + 128);
      if ((_DWORD)v160)
      {
        v161 = 0;
        v162 = *(unsigned int **)(a1 + 120);
        v163 = &v162[v160];
        do
        {
          v164 = *v162;
          v165 = *(_QWORD *)(a1 + 64);
          if ((v164 & 0x80000000) != 0)
            v166 = (uint64_t *)(*(_QWORD *)(v165 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8);
          else
            v166 = (uint64_t *)(*(_QWORD *)(v165 + 272) + 8 * v164);
          v167 = *v166;
          if (v167)
          {
            while ((*(_DWORD *)v167 & 0x80000000) != 0)
            {
              v167 = *(_QWORD *)(v167 + 24);
              if (!v167)
                goto LABEL_248;
            }
            *(_DWORD *)(*v7 + 4 * v161++) = v164;
          }
          else
          {
LABEL_248:
            llvm::LiveRangeEdit::eraseVirtReg(*(_QWORD *)(a1 + 96), v164);
          }
          ++v162;
        }
        while (v162 != v163);
      }
      else
      {
        v161 = 0;
      }
      *(_DWORD *)(a1 + 128) = v161;
    }
  }
LABEL_260:
  if (*(_DWORD *)(a1 + 128))
  {
    if (*(_DWORD *)(a1 + 112) == 0x3FFFFFFF)
    {
      v170 = *(_QWORD *)(a1 + 56);
      v171 = *(_DWORD *)(a1 + 116) & 0x7FFFFFFF;
      SpillSlot = llvm::VirtRegMap::createSpillSlot(v170, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v170 + 272) + 40) + 24) + 16 * v171) & 0xFFFFFFFFFFFFFFF8);
      *(_DWORD *)(*(_QWORD *)(v170 + 304) + 4 * v171) = SpillSlot;
      *(_DWORD *)(a1 + 112) = SpillSlot;
      Interval = llvm::LiveStacks::getOrCreateInterval(*(_QWORD *)(a1 + 24), SpillSlot, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 16 * (*(_DWORD *)(a1 + 116) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a1 + 104) = Interval;
      v174 = sub_1C484358C(*(_QWORD *)(a1 + 24) + 256, 16, 3);
      v175 = *((unsigned int *)Interval + 18);
      *(_DWORD *)v174 = v175;
      *(_QWORD *)(v174 + 8) = 0;
      if (v175 >= *((_DWORD *)Interval + 19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(Interval + 8), (uint64_t)(Interval + 10), v175 + 1, 8);
        LODWORD(v175) = *((_DWORD *)Interval + 18);
      }
      *(_QWORD *)(Interval[8] + 8 * v175) = v174;
      ++*((_DWORD *)Interval + 18);
    }
    else
    {
      v176 = *(_QWORD *)(a1 + 24);
      LODWORD(v508) = *(_DWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 104) = sub_1C50E36C4((_QWORD *)(v176 + 352), (int *)&v508) + 3;
    }
    v177 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 112);
    if (*(_DWORD *)(a1 + 116) != v177)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 304) + 4 * (v177 & 0x7FFFFFFF)) = *(_DWORD *)(a1 + 112);
    v178 = *(int **)(a1 + 120);
    v179 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v179)
    {
      v180 = 4 * v179;
      do
      {
        v181 = *(uint64_t **)(a1 + 104);
        v182 = *(_QWORD *)(a1 + 16);
        if ((*v178 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v182 + 416)
          || (v183 = *(llvm::LiveInterval **)(*(_QWORD *)(v182 + 408) + 8 * (*v178 & 0x7FFFFFFF)),
              v184 = *(_QWORD *)(a1 + 104),
              !v183))
        {
          v183 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 16), *v178);
          v185 = *(_QWORD *)(v182 + 304);
          v186 = *(_QWORD *)(v182 + 248);
          *(_QWORD *)v185 = v186;
          *(_QWORD *)(v185 + 8) = *(_QWORD *)(v186 + 40);
          *(_OWORD *)(v185 + 16) = *(_OWORD *)(v182 + 288);
          *(_QWORD *)(v185 + 32) = v182 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v185);
          *(_DWORD *)(v185 + 184) = 0;
          v187 = *(_QWORD *)(v182 + 256);
          v28 = *(_BYTE *)(v187 + 16) == 0;
          v188 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v187 + 24) + 16 * (*((_DWORD *)v183 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v190 = !v28 && v188 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v182 + 304), v183, v190);
          llvm::LiveIntervals::computeDeadValues(v182, (uint64_t)v183, 0);
          v184 = *(_QWORD *)(a1 + 104);
        }
        llvm::LiveRange::MergeSegmentsInAsValue(v181, (uint64_t)v183, **(_QWORD **)(v184 + 64));
        ++v178;
        v180 -= 4;
      }
      while (v180);
      v178 = *(int **)(a1 + 120);
      v179 = *(unsigned int *)(a1 + 128);
      if ((_DWORD)v179)
      {
        v475 = a1 + 440;
        v476 = &v178[v179];
        v191 = a1 + 168;
        while (1)
        {
          v192 = *v178;
          v193 = *(_QWORD *)(a1 + 16);
          v194 = v192 & 0x7FFFFFFF;
          if (v194 >= *(unsigned int *)(v193 + 416) || (v490 = *(_QWORD *)(*(_QWORD *)(v193 + 408) + 8 * v194)) == 0)
          {
            v434 = (llvm::LiveInterval *)sub_1C4851220(v193, v192);
            v435 = *(_QWORD *)(v193 + 304);
            v436 = *(_QWORD *)(v193 + 248);
            *(_QWORD *)v435 = v436;
            *(_QWORD *)(v435 + 8) = *(_QWORD *)(v436 + 40);
            *(_OWORD *)(v435 + 16) = *(_OWORD *)(v193 + 288);
            *(_QWORD *)(v435 + 32) = v193 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v435);
            *(_DWORD *)(v435 + 184) = 0;
            v191 = a1 + 168;
            v437 = *(_QWORD *)(v193 + 256);
            v28 = *(_BYTE *)(v437 + 16) == 0;
            v438 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v437 + 24)
                                                   + 16 * (*((_DWORD *)v434 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v440 = !v28 && v438 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v193 + 304), v434, v440);
            v490 = (uint64_t)v434;
            llvm::LiveIntervals::computeDeadValues(v193, (uint64_t)v434, 0);
          }
          v195 = *(_QWORD *)(a1 + 64);
          v482 = v178;
          v196 = (uint64_t *)((v192 & 0x80000000) != 0
                           ? *(_QWORD *)(v195 + 24) + 16 * v194 + 8
                           : *(_QWORD *)(v195 + 272) + 8 * v192);
          v197 = *v196;
          if (*v196)
            break;
LABEL_670:
          v178 = v482 + 1;
          if (v482 + 1 == v476)
          {
            v178 = *(int **)(a1 + 120);
            LODWORD(v179) = *(_DWORD *)(a1 + 128);
            goto LABEL_679;
          }
        }
        v499 = v192;
        while (2)
        {
          while (2)
          {
            while (2)
            {
              v198 = *(_QWORD *)(v197 + 8);
              v199 = *(_WORD *)(v198 + 44);
              v200 = v198;
              if ((v199 & 4) != 0)
              {
                do
                  v200 = *(_QWORD *)v200 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v200 + 44) & 4) != 0);
              }
              do
              {
                v197 = *(_QWORD *)(v197 + 24);
                if (!v197)
                  break;
                for (j = *(_QWORD *)(v197 + 8); (*(_WORD *)(j + 44) & 4) != 0; j = *(_QWORD *)j & 0xFFFFFFFFFFFFFFF8)
                  ;
              }
              while (j == v200);
              if ((v199 & 4) != 0)
              {
                do
                  v198 = *(_QWORD *)v198 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v198 + 44) & 4) != 0);
              }
              v202 = v198;
              if (**(unsigned __int16 **)(v198 + 16) - 13 <= 1)
              {
                v203 = *(_QWORD *)(v198 + 24);
                llvm::buildDbgValueForSpill(v203, (unint64_t *)v198, v198, *(_DWORD *)(a1 + 112), v192);
                if (v198)
                {
                  if ((*(_BYTE *)v198 & 4) == 0)
                  {
LABEL_302:
                    while ((*(_WORD *)(v198 + 44) & 8) != 0)
                      v198 = *(_QWORD *)(v198 + 8);
                  }
                  sub_1C487FE80(v203 + 40, v202, *(_QWORD *)(v198 + 8));
                  if (!v197)
                    goto LABEL_670;
                  continue;
                }
                v198 = 0;
                goto LABEL_302;
              }
              break;
            }
            v204 = sub_1C477672C(v191, v198);
            v205 = *(_QWORD *)(a1 + 176);
            v206 = 184;
            if (v205 == *(_QWORD *)(a1 + 168))
              v206 = 188;
            if (v204 != (_QWORD *)(v205 + 8 * *(unsigned int *)(a1 + v206)))
              goto LABEL_429;
            LODWORD(v508) = 0;
            v207 = (*(uint64_t (**)(_QWORD, unint64_t, void **))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), v198, &v508);
            v208 = v207;
            if (!v207)
              v207 = (*(uint64_t (**)(_QWORD, unint64_t, void **))(**(_QWORD **)(a1 + 72) + 96))(*(_QWORD *)(a1 + 72), v198, &v508);
            if (v207 != (_DWORD)v192 || (_DWORD)v508 != *(_DWORD *)(a1 + 112))
            {
              v508 = v510;
              v509 = 0x800000000;
              v492 = llvm::AnalyzeVirtRegInBundle(v198, v192, (uint64_t)&v508);
              v217 = *(_WORD *)(v198 + 44);
              v218 = v198;
              if ((v217 & 4) != 0)
              {
                do
                  v218 = *(_QWORD *)v218 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v218 + 44) & 4) != 0);
              }
              v219 = *(_QWORD *)(a1 + 16);
              v220 = *(_QWORD *)(v219 + 288);
              v221 = v198;
              if ((v217 & 8) != 0)
              {
                do
                  v221 = *(_QWORD *)(v221 + 8);
                while ((*(_WORD *)(v221 + 44) & 8) != 0);
              }
              v222 = *(_QWORD *)(v221 + 8);
              if (v218 != v222)
              {
                while (1)
                {
                  v223 = **(unsigned __int16 **)(v218 + 16);
                  v54 = v223 > 0x17;
                  v224 = (1 << v223) & 0x83E000;
                  if (v54 || v224 == 0)
                    break;
                  v218 = *(_QWORD *)(v218 + 8);
                  if (v218 == v222)
                  {
                    v218 = v222;
                    break;
                  }
                }
              }
              v226 = *(_QWORD *)(v220 + 368);
              v227 = *(unsigned int *)(v220 + 384);
              if ((_DWORD)v227)
              {
                LODWORD(v228) = ((v218 >> 4) ^ (v218 >> 9)) & (v227 - 1);
                v229 = (uint64_t *)(v226 + 16 * v228);
                v230 = *v229;
                if (v218 != *v229)
                {
                  v231 = 1;
                  while (v230 != -4096)
                  {
                    v232 = v228 + v231++;
                    v228 = v232 & (v227 - 1);
                    v230 = *(_QWORD *)(v226 + 16 * v228);
                    if (v218 == v230)
                    {
                      v229 = (uint64_t *)(v226 + 16 * v228);
                      goto LABEL_337;
                    }
                  }
                  goto LABEL_336;
                }
              }
              else
              {
LABEL_336:
                v229 = (uint64_t *)(v226 + 16 * v227);
              }
LABEL_337:
              v233 = v229[1] & 0xFFFFFFFFFFFFFFF8;
              v234 = *(_DWORD *)(v490 + 8);
              v235 = *(_QWORD **)v490;
              if (v234)
              {
                v236 = v235[3 * v234 - 2];
                v237 = *(_DWORD *)(v233 + 24) | 1;
                v238 = (v236 >> 1) & 3 | *(_DWORD *)((v236 & 0xFFFFFFFFFFFFFFF8) + 24);
                v239 = *(_QWORD **)v490;
                v240 = *(unsigned int *)(v490 + 8);
                if (v237 < v238)
                {
                  do
                  {
                    v241 = v240 >> 1;
                    v242 = v239[3 * (v240 >> 1) + 1];
                    LODWORD(v242) = (v242 >> 1) & 3 | *(_DWORD *)((v242 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v240 -= (v240 >> 1) + 1;
                    v243 = v237 >= v242;
                    if (v237 >= v242)
                      v244 = v241 + 1;
                    else
                      v244 = 0;
                    v239 += 3 * v244;
                    if (!v243)
                      v240 = v241;
                  }
                  while (v240);
LABEL_348:
                  v245 = v233 | 4;
                  if (v239 != &v235[3 * v234]
                    && ((*v239 >> 1) & 3 | *(_DWORD *)((*v239 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v233 + 24) | 1u))
                  {
                    v253 = v239[2];
                    if (v253)
                    {
                      v254 = *(_QWORD *)(v253 + 8);
                      if (v233 == (v254 & 0xFFFFFFFFFFFFFFF8))
                        v245 = v254;
                    }
                  }
                  v484 = v245;
                  if (**(_WORD **)(v198 + 16) != 19)
                    goto LABEL_353;
                  v246 = *(_DWORD **)(v198 + 32);
                  if ((*v246 & 0xFFF00) != 0)
                    goto LABEL_353;
                  if ((v246[8] & 0xFFF00) != 0)
                    goto LABEL_353;
                  v288 = v246[1];
                  v289 = v246[9];
                  v290 = v289;
                  if (v288 != (_DWORD)v192)
                  {
                    v290 = v288;
                    v28 = v289 == (_DWORD)v192;
                    v289 = v192;
                    if (!v28)
                      goto LABEL_353;
                  }
                  if (!v290 || (v290 & 0x80000000) == 0)
                    goto LABEL_353;
                  v291 = v290 & 0x7FFFFFFF;
                  v292 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 328) + 4 * v291);
                  if (!v292)
                    v292 = v290;
                  if (v292 != *(_DWORD *)(a1 + 116))
                    goto LABEL_353;
                  v293 = *(_QWORD *)(a1 + 120);
                  v294 = *(unsigned int *)(a1 + 128);
                  if ((_DWORD)v294)
                  {
                    v295 = 4 * v294;
                    v296 = *(_DWORD **)(a1 + 120);
                    v297 = (llvm::SmallPtrSetImplBase *)(a1 + 168);
                    while (*v296 != v290)
                    {
                      ++v296;
                      v295 -= 4;
                      if (!v295)
                      {
                        v296 = (_DWORD *)(v293 + 4 * v294);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v296 = *(_DWORD **)(a1 + 120);
                    v297 = (llvm::SmallPtrSetImplBase *)(a1 + 168);
                  }
                  if (v294 != ((uint64_t)v296 - v293) >> 2)
                  {
                    sub_1C4774094(v297, v198);
                    goto LABEL_426;
                  }
                  if ((v492 & 0x100) == 0)
                  {
                    if (v291 >= *(unsigned int *)(v219 + 416)
                      || (v310 = *(llvm::LiveInterval **)(*(_QWORD *)(v219 + 408) + 8 * v291)) == 0)
                    {
                      v310 = (llvm::LiveInterval *)sub_1C4851220(v219, v290);
                      v415 = *(_QWORD *)(v219 + 304);
                      v416 = *(_QWORD *)(v219 + 248);
                      *(_QWORD *)v415 = v416;
                      *(_QWORD *)(v415 + 8) = *(_QWORD *)(v416 + 40);
                      *(_OWORD *)(v415 + 16) = *(_OWORD *)(v219 + 288);
                      *(_QWORD *)(v415 + 32) = v219 + 312;
                      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v415);
                      *(_DWORD *)(v415 + 184) = 0;
                      v417 = *(_QWORD *)(v219 + 256);
                      v28 = *(_BYTE *)(v417 + 16) == 0;
                      v418 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v417 + 24)
                                                             + 16 * (*((_DWORD *)v310 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                + 34);
                      v420 = !v28 && v418 != 0;
                      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v219 + 304), v310, v420);
                      llvm::LiveIntervals::computeDeadValues(v219, (uint64_t)v310, 0);
                      v245 = v484;
                    }
                    v311 = *((_DWORD *)v310 + 2);
                    v312 = *(_QWORD **)v310;
                    if (v311)
                    {
                      v313 = v312[3 * v311 - 2];
                      v314 = *(_DWORD *)((v245 & 0xFFFFFFFFFFFFFFF8) + 24) | (v245 >> 1) & 3;
                      v315 = (v313 >> 1) & 3 | *(_DWORD *)((v313 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v316 = *(_QWORD **)v310;
                      v317 = *((unsigned int *)v310 + 2);
                      if (v314 < v315)
                      {
                        do
                        {
                          v318 = v317 >> 1;
                          v319 = v316[3 * (v317 >> 1) + 1];
                          LODWORD(v319) = (v319 >> 1) & 3 | *(_DWORD *)((v319 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v317 -= (v317 >> 1) + 1;
                          v320 = v314 >= v319;
                          if (v314 >= v319)
                            v321 = v318 + 1;
                          else
                            v321 = 0;
                          v316 += 3 * v321;
                          if (!v320)
                            v317 = v318;
                        }
                        while (v317);
LABEL_526:
                        if (v316 == &v312[3 * v311]
                          || ((*v316 >> 1) & 3 | *(_DWORD *)((*v316 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v245 & 0xFFFFFFFFFFFFFFF8) + 24) | (v245 >> 1) & 3))
                        {
                          v356 = 0;
                        }
                        else
                        {
                          v356 = v316[2];
                        }
                        sub_1C50E3788(a1, (uint64_t)v310, v356);
LABEL_353:
                        if (!sub_1C50E19A0(a1, (uint64_t)v508, v509, 0))
                        {
                          v247 = llvm::LiveRangeEdit::createFrom(*(_QWORD **)(a1 + 96), v192);
                          if ((v492 & 1) != 0)
                          {
                            v248 = *(_QWORD *)(v198 + 24);
                            sub_1C50E2A94(&v503, v198, v248);
                            v249 = sub_1C50E1358(a1, v490);
                            v250 = *(_QWORD *)(a1 + 16);
                            if (v249)
                            {
                              v251 = *(_QWORD *)(a1 + 64);
                              v500[0] = (unsigned __int8 *)(v484 & 0xFFFFFFFFFFFFFFF8);
                              v252 = v490;
                            }
                            else
                            {
                              v252 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
                              v251 = *(_QWORD *)(a1 + 64);
                              v500[0] = (unsigned __int8 *)(v484 & 0xFFFFFFFFFFFFFFF8);
                            }
                            llvm::LiveIntervals::getLiveSubranges(v250, v252, v251, v500);
                            (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a1 + 72) + 472))(*(_QWORD *)(a1 + 72), v248, v198);
                            v255 = v505;
                            if (v505 == v503 + 48)
                            {
                              v256 = (uint64_t *)(v503 + 56);
                            }
                            else
                            {
                              if (!v505 || (*v505 & 4) == 0)
                              {
                                while ((*((_WORD *)v255 + 22) & 8) != 0)
                                  v255 = (unsigned __int8 *)*((_QWORD *)v255 + 1);
                              }
                              v256 = (uint64_t *)(v255 + 8);
                            }
                            sub_1C50E3E24(*(_QWORD *)(a1 + 16), *v256, v198);
                          }
                          if ((_DWORD)v509)
                          {
                            v257 = 0;
                            v477 = v247;
                            v258 = v247;
                            v259 = 16 * v509;
                            v260 = (unsigned int *)((char *)v508 + 8);
                            do
                            {
                              v261 = (int *)(*(_QWORD *)(*((_QWORD *)v260 - 1) + 32) + 32 * *v260);
                              llvm::MachineOperand::setReg((uint64_t)v261, v258);
                              v262 = *v261;
                              if ((*v261 & 0x1000000) != 0)
                              {
                                v257 |= (~v262 & 0x5000000) != 0;
                              }
                              else
                              {
                                v263 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v260 - 1) + 32) + 32 * *v260);
                                v264 = v263 & 0x10000FF;
                                v265 = v263 & 0xF00000;
                                if (v264)
                                  v266 = 1;
                                else
                                  v266 = v265 == 0;
                                if (v266)
                                  *v261 = v262 | 0x4000000;
                              }
                              v260 += 4;
                              v259 -= 16;
                            }
                            while (v259);
                            LODWORD(v192) = v499;
                            if ((*(_DWORD *)&v257 & ((unsigned __int16)(v492 & 0x100) >> 8) & 1) != 0)
                            {
                              v502 = v484;
                              v267 = *(_QWORD *)(v198 + 24);
                              sub_1C50E2A94(v500, v198, v267);
                              v268 = v198;
                              if ((*(_BYTE *)v198 & 4) == 0)
                              {
                                v268 = v198;
                                if ((*(_WORD *)(v198 + 44) & 8) != 0)
                                {
                                  v268 = v198;
                                  do
                                    v268 = *(_QWORD *)(v268 + 8);
                                  while ((*(_WORD *)(v268 + 44) & 8) != 0);
                                }
                              }
                              v269 = *(uint64_t **)(v268 + 8);
                              if (**(_WORD **)(v198 + 16) == 10 && (**(_DWORD **)(v198 + 32) & 0xFFF00) == 0)
                              {
                                v300 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
                                v301 = *(llvm::MachineFunction **)(v267 + 32);
                                v302 = *(unsigned __int8 **)(v198 + 56);
                                v507 = v302;
                                v494 = v301;
                                if (v302)
                                {
                                  llvm::MetadataTracking::track((uint64_t)&v507, v302, 2);
                                  v301 = v494;
                                }
                                v303 = *((_QWORD *)v301 + 28);
                                if (v303)
                                {
                                  *((_QWORD *)v301 + 28) = *(_QWORD *)v303;
                                }
                                else
                                {
                                  v304 = sub_1C484358C((uint64_t)v301 + 128, 72, 3);
                                  v301 = v494;
                                  v303 = v304;
                                }
                                v503 = v507;
                                if (v507)
                                {
                                  llvm::MetadataTracking::retrack((uint64_t)&v507, v507, (uint64_t)&v503);
                                  v301 = v494;
                                  v507 = 0;
                                }
                                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v303, v301, v300 + 336, &v503, 0);
                                if (v503)
                                  llvm::MetadataTracking::untrack((uint64_t)&v503, v503);
                                if (v507)
                                  llvm::MetadataTracking::untrack((uint64_t)&v507, v507);
                                v305 = *(_QWORD *)(v267 + 40);
                                *(_QWORD *)(v303 + 24) = v305;
                                v306 = *(_QWORD *)(v305 + 32);
                                v307 = *(unsigned int *)(v303 + 40);
                                if ((_DWORD)v307)
                                {
                                  v333 = *(_QWORD *)(v303 + 32);
                                  v334 = *(_QWORD *)(v306 + 40);
                                  v335 = 32 * v307;
                                  do
                                  {
                                    if (!*(_BYTE *)v333)
                                    {
                                      v336 = *(unsigned int *)(v333 + 4);
                                      if ((int)v336 >= 0)
                                        v337 = (uint64_t *)(*(_QWORD *)(v334 + 272) + 8 * v336);
                                      else
                                        v337 = (uint64_t *)(*(_QWORD *)(v334 + 24) + 16 * (v336 & 0x7FFFFFFF) + 8);
                                      v338 = *v337;
                                      if (*v337)
                                      {
                                        v339 = *(_QWORD *)(v338 + 16);
                                        *(_QWORD *)(v338 + 16) = v333;
                                        *(_QWORD *)(v333 + 16) = v339;
                                        if ((*(_BYTE *)(v333 + 3) & 1) != 0)
                                        {
                                          *(_QWORD *)(v333 + 24) = v338;
                                        }
                                        else
                                        {
                                          *(_QWORD *)(v333 + 24) = 0;
                                          v337 = (uint64_t *)(v339 + 24);
                                        }
                                      }
                                      else
                                      {
                                        *(_QWORD *)(v333 + 16) = v333;
                                        *(_QWORD *)(v333 + 24) = 0;
                                      }
                                      *v337 = v333;
                                    }
                                    v333 += 32;
                                    v335 -= 32;
                                  }
                                  while (v335);
                                }
                                v308 = *(_QWORD *)(v306 + 728);
                                if (v308)
                                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v308 + 24))(v308, v303);
                                v309 = *v269 & 0xFFFFFFFFFFFFFFF8;
                                *(_QWORD *)v303 = v309 | *(_QWORD *)v303 & 7;
                                *(_QWORD *)(v303 + 8) = v269;
                                *(_QWORD *)(v309 + 8) = v303;
                                *v269 = *v269 & 7 | v303;
                                v504 = 0;
                                v505 = 0;
                                v506 = 0;
                                LODWORD(v503) = 0x4000000;
                                HIDWORD(v503) = v477;
                                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v303, v494, (const llvm::MachineOperand *)&v503);
                                v493 = 0;
                              }
                              else
                              {
                                LiveSubranges = llvm::LiveIntervals::getLiveSubranges(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8), *(_QWORD *)(a1 + 64), &v502);
                                v493 = 1;
                                (*(void (**)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 456))(*(_QWORD *)(a1 + 72), v267, v269, v258, 1, *(unsigned int *)(a1 + 112), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 16 * (v258 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 80), LiveSubranges);
                              }
                              LODWORD(v192) = v499;
                              if ((*(_BYTE *)v198 & 4) == 0)
                              {
                                while ((*(_WORD *)(v198 + 44) & 8) != 0)
                                  v198 = *(_QWORD *)(v198 + 8);
                              }
                              v271 = *(_QWORD *)(v198 + 8);
                              sub_1C50E3E24(*(_QWORD *)(a1 + 16), v271, v501);
                              v272 = v271;
                              v273 = v501;
                              for (k = v271; k != v273; k = *(_QWORD *)(k + 8))
                              {
                                v275 = *(unsigned int *)(k + 40);
                                if ((_DWORD)v275)
                                {
                                  v276 = *(_QWORD *)(a1 + 16);
                                  v277 = 32 * v275;
                                  v278 = (int *)(*(_QWORD *)(k + 32) + 4);
                                  do
                                  {
                                    if ((*(v278 - 1) & 0x10000FF) == 0x1000000)
                                    {
                                      v279 = *v278;
                                      if (*v278 < 0
                                        && ((v279 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v276 + 416)
                                         || !*(_QWORD *)(*(_QWORD *)(v276 + 408) + 8 * (v279 & 0x7FFFFFFF))))
                                      {
                                        v485 = v272;
                                        v487 = (llvm::LiveInterval *)sub_1C4851220(v276, v279);
                                        v478 = *(llvm::LiveInterval **)(v276 + 304);
                                        v280 = *(_QWORD *)(v276 + 248);
                                        *(_QWORD *)v478 = v280;
                                        *((_QWORD *)v478 + 1) = *(_QWORD *)(v280 + 40);
                                        *((_OWORD *)v478 + 1) = *(_OWORD *)(v276 + 288);
                                        *((_QWORD *)v478 + 4) = v276 + 312;
                                        llvm::LiveRangeCalc::resetLiveOutMap(v478);
                                        *((_DWORD *)v478 + 46) = 0;
                                        v281 = *(_QWORD *)(v276 + 256);
                                        v28 = *(_BYTE *)(v281 + 16) == 0;
                                        v282 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v281 + 24)
                                                                               + 16
                                                                               * (*((_DWORD *)v487 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 34);
                                        v284 = !v28 && v282 != 0;
                                        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v276 + 304), v487, v284);
                                        llvm::LiveIntervals::computeDeadValues(v276, (uint64_t)v487, 0);
                                        v272 = v485;
                                      }
                                    }
                                    v278 += 8;
                                    v277 -= 32;
                                  }
                                  while (v277);
                                  LODWORD(v192) = v499;
                                  if (!k)
                                    goto LABEL_413;
                                }
                                if ((*(_BYTE *)k & 4) == 0)
                                {
LABEL_413:
                                  while ((*(_WORD *)(k + 44) & 8) != 0)
                                    k = *(_QWORD *)(k + 8);
                                }
                              }
                              if ((v493 & 1) != 0)
                              {
                                if (v272 == v501)
                                  goto LABEL_425;
                                v285 = 0;
                                v286 = v272;
                                do
                                {
                                  v287 = v285;
                                  if (!v286 || (*(_BYTE *)v286 & 4) == 0)
                                  {
                                    while ((*(_WORD *)(v286 + 44) & 8) != 0)
                                      v286 = *(_QWORD *)(v286 + 8);
                                  }
                                  ++v285;
                                  v286 = *(_QWORD *)(v286 + 8);
                                }
                                while (v286 != v501);
                                if (!v287)
LABEL_425:
                                  sub_1C50E2698(v475, v272, *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 116));
                              }
                            }
                          }
                        }
LABEL_426:
                        if (v508 != v510)
                          free(v508);
                        v191 = a1 + 168;
LABEL_429:
                        if (!v197)
                          goto LABEL_670;
                        continue;
                      }
                    }
                    else
                    {
                      v311 = 0;
                    }
                    v316 = &v312[3 * v311];
                    goto LABEL_526;
                  }
                  v322 = v198;
                  if ((v217 & 4) != 0)
                  {
                    do
                      v322 = *(_QWORD *)v322 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v322 + 44) & 4) != 0);
                  }
                  v323 = v198;
                  if ((v217 & 8) != 0)
                  {
                    do
                      v323 = *(_QWORD *)(v323 + 8);
                    while ((*(_WORD *)(v323 + 44) & 8) != 0);
                  }
                  v324 = *(_QWORD *)(v323 + 8);
                  if (v322 != v324)
                  {
                    while (1)
                    {
                      v325 = **(unsigned __int16 **)(v322 + 16);
                      v54 = v325 > 0x17;
                      v326 = (1 << v325) & 0x83E000;
                      if (v54 || v326 == 0)
                        break;
                      v322 = *(_QWORD *)(v322 + 8);
                      if (v322 == v324)
                      {
                        v322 = v324;
                        break;
                      }
                    }
                  }
                  if ((_DWORD)v227)
                  {
                    LODWORD(v328) = ((v322 >> 4) ^ (v322 >> 9)) & (v227 - 1);
                    v329 = (uint64_t *)(v226 + 16 * v328);
                    v330 = *v329;
                    if (v322 != *v329)
                    {
                      v331 = 1;
                      while (v330 != -4096)
                      {
                        v332 = v328 + v331++;
                        v328 = v332 & (v227 - 1);
                        v330 = *(_QWORD *)(v226 + 16 * v328);
                        if (v322 == v330)
                        {
                          v329 = (uint64_t *)(v226 + 16 * v328);
                          goto LABEL_511;
                        }
                      }
                      goto LABEL_510;
                    }
                  }
                  else
                  {
LABEL_510:
                    v329 = (uint64_t *)(v226 + 16 * v227);
                  }
LABEL_511:
                  v340 = v329[1];
                  v341 = v289;
                  v342 = v289 & 0x7FFFFFFF;
                  v470 = v342;
                  v479 = v340;
                  if (v342 >= *(unsigned int *)(v219 + 416)
                    || (v343 = *(llvm::LiveInterval **)(*(_QWORD *)(v219 + 408) + 8 * v342)) == 0)
                  {
                    v421 = (llvm::LiveInterval *)sub_1C4851220(v219, v289);
                    v422 = *(_QWORD *)(v219 + 304);
                    v423 = *(_QWORD *)(v219 + 248);
                    *(_QWORD *)v422 = v423;
                    *(_QWORD *)(v422 + 8) = *(_QWORD *)(v423 + 40);
                    *(_OWORD *)(v422 + 16) = *(_OWORD *)(v219 + 288);
                    *(_QWORD *)(v422 + 32) = v219 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v422);
                    *(_DWORD *)(v422 + 184) = 0;
                    v343 = v421;
                    v424 = *(_QWORD *)(v219 + 256);
                    v28 = *(_BYTE *)(v424 + 16) == 0;
                    v425 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v424 + 24)
                                                           + 16 * (*((_DWORD *)v421 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                              + 34);
                    v427 = !v28 && v425 != 0;
                    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v219 + 304), v421, v427);
                    llvm::LiveIntervals::computeDeadValues(v219, (uint64_t)v421, 0);
                    v340 = v479;
                  }
                  v344 = *((_DWORD *)v343 + 2);
                  v345 = *(_QWORD **)v343;
                  if (v344)
                  {
                    v346 = v345[3 * v344 - 2];
                    v347 = *(_DWORD *)((v340 & 0xFFFFFFFFFFFFFFF8) + 24) | (v340 >> 1) & 3;
                    v348 = (v346 >> 1) & 3 | *(_DWORD *)((v346 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v349 = *((unsigned int *)v343 + 2);
                    v350 = *(_QWORD **)v343;
                    v351 = v349;
                    if (v347 < v348)
                    {
                      do
                      {
                        v352 = v351 >> 1;
                        v353 = v350[3 * (v351 >> 1) + 1];
                        LODWORD(v353) = (v353 >> 1) & 3 | *(_DWORD *)((v353 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v351 -= (v351 >> 1) + 1;
                        v354 = v347 >= v353;
                        if (v347 >= v353)
                          v355 = v352 + 1;
                        else
                          v355 = 0;
                        v350 += 3 * v355;
                        if (!v354)
                          v351 = v352;
                      }
                      while (v351);
                      v349 = *((unsigned int *)v343 + 2);
LABEL_533:
                      v357 = &v345[3 * v349];
                      if (v350 == v357)
                      {
                        v359 = 0;
                        v358 = v340 & 0xFFFFFFFFFFFFFFF8;
                      }
                      else
                      {
                        v358 = v340 & 0xFFFFFFFFFFFFFFF8;
                        if (((*v350 >> 1) & 3 | *(_DWORD *)((*v350 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v340 & 0xFFFFFFFFFFFFFFF8) + 24) | (v340 >> 1) & 3))
                          v359 = v350[2];
                        else
                          v359 = 0;
                      }
                      v471 = v341;
                      v472 = (uint64_t)v343;
                      if (!v344)
                        goto LABEL_549;
                      v360 = *(_DWORD *)(v358 + 24);
                      if (v360 >= ((*(v357 - 2) >> 1) & 3 | *(_DWORD *)((*(v357 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 24)))
                        goto LABEL_549;
                      do
                      {
                        v361 = v345;
                        v362 = v349 >> 1;
                        v363 = v345[3 * (v349 >> 1) + 1];
                        LODWORD(v363) = (v363 >> 1) & 3 | *(_DWORD *)((v363 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v349 -= (v349 >> 1) + 1;
                        v364 = v360 >= v363;
                        if (v360 >= v363)
                          v365 = v362 + 1;
                        else
                          v365 = 0;
                        v345 = &v361[3 * v365];
                        if (!v364)
                          v349 = v362;
                      }
                      while (v349);
                      if (v345 == v357
                        || ((*v345 >> 1) & 3 | *(_DWORD *)((*v345 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v358 + 24))
                      {
LABEL_549:
                        v366 = 0;
                      }
                      else
                      {
                        v366 = v358 == (v361[3 * v365 + 1] & 0xFFFFFFFFFFFFFFF8);
                      }
                      v469 = v359;
                      v473 = (_QWORD *)(v359 + 8);
                      v367 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *(_QWORD *)(v359 + 8));
                      if (!v366 || v367 != *(_QWORD *)(v198 + 24))
                        goto LABEL_353;
                      v368 = *(_QWORD *)(a1 + 16);
                      v369 = *(_DWORD *)(a1 + 116);
                      if ((v369 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v368 + 416)
                        || (v370 = *(unsigned int **)(*(_QWORD *)(v368 + 408) + 8 * (v369 & 0x7FFFFFFF))) == 0)
                      {
                        v428 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 16), v369);
                        v496 = *(llvm::MachineFunction **)(v368 + 304);
                        v429 = *(_QWORD *)(v368 + 248);
                        *(_QWORD *)v496 = v429;
                        *((_QWORD *)v496 + 1) = *(_QWORD *)(v429 + 40);
                        *((_OWORD *)v496 + 1) = *(_OWORD *)(v368 + 288);
                        *((_QWORD *)v496 + 4) = v368 + 312;
                        llvm::LiveRangeCalc::resetLiveOutMap(v496);
                        *((_DWORD *)v496 + 46) = 0;
                        v430 = *(_QWORD *)(v368 + 256);
                        v28 = *(_BYTE *)(v430 + 16) == 0;
                        v431 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v430 + 24)
                                                               + 16 * (*((_DWORD *)v428 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                  + 34);
                        v433 = !v28 && v431 != 0;
                        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v368 + 304), v428, v433);
                        llvm::LiveIntervals::computeDeadValues(v368, (uint64_t)v428, 0);
                        v370 = (unsigned int *)v428;
                      }
                      v371 = v370[2];
                      v372 = *(_QWORD **)v370;
                      if (v371)
                      {
                        v373 = v372[3 * v371 - 2];
                        v374 = v479;
                        v375 = *(_DWORD *)((v479 & 0xFFFFFFFFFFFFFFF8) + 24) | (v479 >> 1) & 3;
                        v376 = (v373 >> 1) & 3 | *(_DWORD *)((v373 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v377 = *(_QWORD **)v370;
                        v378 = v370[2];
                        v379 = v472;
                        if (v375 < v376)
                        {
                          do
                          {
                            v380 = v378 >> 1;
                            v381 = v377[3 * (v378 >> 1) + 1];
                            LODWORD(v381) = (v381 >> 1) & 3 | *(_DWORD *)((v381 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v378 -= (v378 >> 1) + 1;
                            v382 = v375 >= v381;
                            if (v375 >= v381)
                              v383 = v380 + 1;
                            else
                              v383 = 0;
                            v377 += 3 * v383;
                            if (!v382)
                              v378 = v380;
                          }
                          while (v378);
LABEL_566:
                          if (v377 == &v372[3 * v371]
                            || ((*v377 >> 1) & 3 | *(_DWORD *)((*v377 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v358 + 24) | (v374 >> 1) & 3))
                          {
                            v384 = 0;
                          }
                          else
                          {
                            v384 = v377[2];
                          }
                          v385 = (uint64_t)v370;
                          llvm::LiveRange::MergeValueInAsValue(*(uint64_t **)(a1 + 104), v370, v384, **(_QWORD **)(*(_QWORD *)(a1 + 104) + 64));
                          sub_1C50E3788(a1, v379, v469);
                          v386 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), *(_QWORD *)(v469 + 8));
                          v387 = v386;
                          v388 = *(_QWORD *)(v469 + 8);
                          if ((v388 & 6) != 0)
                          {
                            if (v388 < 8)
                            {
                              v389 = 0;
                            }
                            else
                            {
                              v389 = *(_QWORD *)((v388 & 0xFFFFFFFFFFFFFFF8) + 16);
                              if (v389)
                              {
                                v390 = v473;
                                if ((*(_BYTE *)v389 & 4) != 0)
                                  goto LABEL_580;
                                goto LABEL_579;
                              }
                            }
                            v390 = v473;
LABEL_579:
                            while ((*(_WORD *)(v389 + 44) & 8) != 0)
                              v389 = *(_QWORD *)(v389 + 8);
LABEL_580:
                            v391 = *(_QWORD *)(v389 + 8);
                          }
                          else
                          {
                            v391 = llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug(v386, *(_QWORD *)(v386 + 56), 1);
                            v390 = v473;
                          }
                          sub_1C50E2A94(&v503, v391, v387);
                          v392 = llvm::LiveIntervals::getLiveSubranges(*(_QWORD *)(a1 + 16), v385, *(_QWORD *)(a1 + 64), v390);
                          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 456))(*(_QWORD *)(a1 + 72), v387, v391, v471, 0, *(unsigned int *)(a1 + 112), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24) + 16 * v470) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 80), v392);
                          v393 = v505;
                          v394 = (_QWORD *)v391;
                          if (v505 == v503 + 48)
                          {
                            v395 = (uint64_t *)(v503 + 56);
                          }
                          else
                          {
                            if (!v505 || (*v505 & 4) == 0)
                            {
                              while ((*((_WORD *)v393 + 22) & 8) != 0)
                                v393 = (unsigned __int8 *)*((_QWORD *)v393 + 1);
                            }
                            v395 = (uint64_t *)(v393 + 8);
                          }
                          sub_1C50E3E24(*(_QWORD *)(a1 + 16), *v395, v391);
                          v396 = v505;
                          if (v505 == v503 + 48)
                          {
                            v397 = v503 + 56;
                          }
                          else
                          {
                            if (!v505 || (*v505 & 4) == 0)
                            {
                              while ((*((_WORD *)v396 + 22) & 8) != 0)
                                v396 = (unsigned __int8 *)*((_QWORD *)v396 + 1);
                            }
                            v397 = v396 + 8;
                          }
                          for (m = *(_QWORD *)v397; (_QWORD *)m != v394; m = *(_QWORD *)(m + 8))
                          {
                            v399 = *(unsigned int *)(m + 40);
                            if ((_DWORD)v399)
                            {
                              v400 = *(_QWORD *)(a1 + 16);
                              v401 = v400 + 312;
                              v402 = 32 * v399;
                              v403 = (int *)(*(_QWORD *)(m + 32) + 4);
                              do
                              {
                                if ((*(v403 - 1) & 0x10000FF) == 0x1000000)
                                {
                                  v404 = *v403;
                                  if (*v403 < 0
                                    && ((v404 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v400 + 416)
                                     || !*(_QWORD *)(*(_QWORD *)(v400 + 408) + 8 * (v404 & 0x7FFFFFFF))))
                                  {
                                    v495 = (llvm::MachineFunction *)v400;
                                    v486 = v401;
                                    v480 = (llvm::LiveInterval *)sub_1C4851220(v400, v404);
                                    v474 = *((_QWORD *)v495 + 38);
                                    v405 = *((_QWORD *)v495 + 31);
                                    *(_QWORD *)v474 = v405;
                                    *(_QWORD *)(v474 + 8) = *(_QWORD *)(v405 + 40);
                                    *(_OWORD *)(v474 + 16) = *((_OWORD *)v495 + 18);
                                    *(_QWORD *)(v474 + 32) = v486;
                                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v474);
                                    *(_DWORD *)(v474 + 184) = 0;
                                    v406 = *((_QWORD *)v495 + 32);
                                    v28 = *(_BYTE *)(v406 + 16) == 0;
                                    v407 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v406 + 24)
                                                                           + 16
                                                                           * (*((_DWORD *)v480 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                              + 34);
                                    v409 = !v28 && v407 != 0;
                                    llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)v495 + 38), v480, v409);
                                    llvm::LiveIntervals::computeDeadValues((uint64_t)v495, (uint64_t)v480, 0);
                                    v401 = v486;
                                    v400 = (uint64_t)v495;
                                  }
                                }
                                v403 += 8;
                                v402 -= 32;
                              }
                              while (v402);
                              if (!m)
                                goto LABEL_618;
                            }
                            if ((*(_BYTE *)m & 4) == 0)
                            {
LABEL_618:
                              while ((*(_WORD *)(m + 44) & 8) != 0)
                                m = *(_QWORD *)(m + 8);
                            }
                          }
                          v410 = *v394 & 0xFFFFFFFFFFFFFFF8;
                          if (v410)
                          {
                            v411 = v198;
                            if ((*(_BYTE *)v410 & 4) != 0)
                            {
LABEL_626:
                              v412 = v505;
                              if (v505 == v503 + 48)
                              {
                                v413 = v503 + 56;
                              }
                              else
                              {
                                if (!v505 || (*v505 & 4) == 0)
                                {
                                  while ((*((_WORD *)v412 + 22) & 8) != 0)
                                    v412 = (unsigned __int8 *)*((_QWORD *)v412 + 1);
                                }
                                v413 = v412 + 8;
                              }
                              if (*(_QWORD *)v413 == v410)
                                sub_1C50E2698(v475, v410, *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 116));
                              **(_DWORD **)(v198 + 32) |= 0x4000000u;
                              v414 = *(unsigned int *)(a1 + 368);
                              if (v414 >= *(unsigned int *)(a1 + 372))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, a1 + 376, v414 + 1, 8);
                                v414 = *(unsigned int *)(a1 + 368);
                              }
                              *(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * v414) = v411;
                              ++*(_DWORD *)(a1 + 368);
                              goto LABEL_426;
                            }
                          }
                          else
                          {
                            v411 = v198;
                          }
                          while ((*(_WORD *)(v410 + 44) & 4) != 0)
                            v410 = *(_QWORD *)v410 & 0xFFFFFFFFFFFFFFF8;
                          goto LABEL_626;
                        }
                      }
                      else
                      {
                        v371 = 0;
                        v379 = v472;
                        v374 = v479;
                      }
                      v377 = &v372[3 * v371];
                      goto LABEL_566;
                    }
                  }
                  else
                  {
                    v349 = 0;
                  }
                  v350 = &v345[3 * v349];
                  goto LABEL_533;
                }
              }
              else
              {
                v234 = 0;
              }
              v239 = &v235[3 * v234];
              goto LABEL_348;
            }
            break;
          }
          if (!v208)
            sub_1C50E2420(v475, v198, v508);
          v209 = *(int32x2_t **)(*(_QWORD *)(a1 + 16) + 288);
          v210 = v209[46];
          v211 = v209[48].u32[0];
          if ((_DWORD)v211)
          {
            LODWORD(v212) = (v211 - 1) & ((v198 >> 4) ^ (v198 >> 9));
            v213 = (uint64_t *)(*(_QWORD *)&v210 + 16 * v212);
            v214 = *v213;
            if (*v213 != v198)
            {
              v215 = 1;
              while (v214 != -4096)
              {
                v216 = v212 + v215++;
                v212 = v216 & (v211 - 1);
                v214 = *(_QWORD *)(*(_QWORD *)&v210 + 16 * v212);
                if (v214 == v198)
                {
                  v213 = (uint64_t *)(*(_QWORD *)&v210 + 16 * v212);
                  goto LABEL_445;
                }
              }
              goto LABEL_444;
            }
          }
          else
          {
LABEL_444:
            v213 = (uint64_t *)(*(_QWORD *)&v210 + 16 * v211);
          }
LABEL_445:
          if (v213 != (uint64_t *)(*(_QWORD *)&v210 + 16 * v211))
          {
            v298 = v213[1] & 0xFFFFFFFFFFFFFFF8;
            *v213 = -8192;
            v209[47] = vadd_s32(v209[47], (int32x2_t)0x1FFFFFFFFLL);
            *(_QWORD *)(v298 + 16) = 0;
          }
          v299 = v198;
          if ((*(_BYTE *)v198 & 4) == 0)
          {
            v299 = v198;
            if ((*(_WORD *)(v198 + 44) & 8) != 0)
            {
              v299 = v198;
              do
                v299 = *(_QWORD *)(v299 + 8);
              while ((*(_WORD *)(v299 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v198 + 24) + 40, v198, *(_QWORD *)(v299 + 8));
          if (!v197)
            goto LABEL_670;
          continue;
        }
      }
    }
LABEL_679:
    if (*(_DWORD *)(a1 + 368))
    {
      llvm::LiveRangeEdit::eliminateDeadDefs(*(uint64_t **)(a1 + 96), a1 + 360, v178, v179, *(llvm::AAResults **)(a1 + 32));
      v178 = *(int **)(a1 + 120);
      LODWORD(v179) = *(_DWORD *)(a1 + 128);
    }
    if ((_DWORD)v179)
    {
      v441 = &v178[v179];
      do
      {
        v442 = *v178;
        v443 = *(_QWORD *)(a1 + 64);
        if ((v442 & 0x80000000) != 0)
          v444 = (uint64_t *)(*(_QWORD *)(v443 + 24) + 16 * (v442 & 0x7FFFFFFF) + 8);
        else
          v444 = (uint64_t *)(*(_QWORD *)(v443 + 272) + 8 * v442);
        v445 = *v444;
        if (*v444)
        {
          while (1)
          {
            v446 = *(_QWORD *)(v445 + 8);
            do
              v445 = *(_QWORD *)(v445 + 24);
            while (v445 && *(_QWORD *)(v445 + 8) == v446);
            v447 = *(int32x2_t **)(*(_QWORD *)(a1 + 16) + 288);
            v448 = v447[46];
            v449 = v447[48].u32[0];
            if (!(_DWORD)v449)
              goto LABEL_696;
            LODWORD(v450) = (v449 - 1) & ((v446 >> 4) ^ (v446 >> 9));
            v451 = (uint64_t *)(*(_QWORD *)&v448 + 16 * v450);
            v452 = *v451;
            if (*v451 != v446)
              break;
LABEL_697:
            if (v451 != (uint64_t *)(*(_QWORD *)&v448 + 16 * v449))
            {
              v455 = v451[1] & 0xFFFFFFFFFFFFFFF8;
              *v451 = -8192;
              v447[47] = vadd_s32(v447[47], (int32x2_t)0x1FFFFFFFFLL);
              *(_QWORD *)(v455 + 16) = 0;
            }
            v456 = v446;
            if ((*(_BYTE *)v446 & 4) == 0)
            {
              v456 = v446;
              if ((*(_WORD *)(v446 + 44) & 8) != 0)
              {
                v456 = v446;
                do
                  v456 = *(_QWORD *)(v456 + 8);
                while ((*(_WORD *)(v456 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v446 + 24) + 40, v446, *(_QWORD *)(v456 + 8));
            if (!v445)
              goto LABEL_706;
          }
          v453 = 1;
          while (v452 != -4096)
          {
            v454 = v450 + v453++;
            v450 = v454 & (v449 - 1);
            v452 = *(_QWORD *)(*(_QWORD *)&v448 + 16 * v450);
            if (v452 == v446)
            {
              v451 = (uint64_t *)(*(_QWORD *)&v448 + 16 * v450);
              goto LABEL_697;
            }
          }
LABEL_696:
          v451 = (uint64_t *)(*(_QWORD *)&v448 + 16 * v449);
          goto LABEL_697;
        }
LABEL_706:
        ++v178;
      }
      while (v178 != v441);
      v457 = *(unsigned int *)(a1 + 128);
      if ((_DWORD)v457)
      {
        v458 = *(unsigned int **)(a1 + 120);
        v459 = 4 * v457;
        do
        {
          v460 = *v458++;
          llvm::LiveRangeEdit::eraseVirtReg(*(_QWORD *)(a1 + 96), v460);
          v459 -= 4;
        }
        while (v459);
      }
    }
  }
  llvm::LiveRangeEdit::calculateRegClassAndHint(*(llvm::LiveRangeEdit **)(a1 + 96), *(llvm::MachineFunction **)(a1 + 8), *(llvm::VirtRegAuxInfo **)(a1 + 784));
}

void sub_1C50DE584(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int *v28;
  _DWORD *v29;
  int v30;
  unint64_t v31;
  int *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  int *v36;
  __int128 v37;
  _QWORD *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  BOOL v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  __int16 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  int v151;
  BOOL v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  BOOL v167;
  int v168;
  unsigned int v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  llvm::MachineBasicBlock **v194;
  llvm::MachineBasicBlock *v195;
  unsigned int v196;
  unsigned int v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t *v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t *v215;
  uint64_t v216;
  llvm::SmallPtrSetImplBase *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t *v220;
  unsigned int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  unsigned int *v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  int v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  uint64_t *v240;
  unint64_t *v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  uint64_t **v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  int v249;
  BOOL v250;
  unsigned int v251;
  uint64_t *v252;
  int v253;
  BOOL v254;
  int v255;
  int v256;
  int v257;
  uint64_t *v258;
  int v259;
  BOOL v260;
  unsigned int v261;
  uint64_t *v262;
  int v263;
  BOOL v264;
  unsigned int v265;
  uint64_t *v266;
  int v267;
  BOOL v268;
  unsigned int v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t *v282;
  uint64_t v283;
  llvm::SmallPtrSetImplBase *v284;
  uint64_t *v285;
  uint64_t v286;
  unsigned int *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unsigned int v292;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  unsigned int v297;
  int *v298;
  int v299;
  uint64_t v300;
  int *v301;
  int *v302;
  uint64_t v303;
  llvm::LiveInterval *v304;
  unsigned int v305;
  _QWORD *v306;
  uint64_t v307;
  unsigned int v308;
  unsigned int v309;
  _QWORD *v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  BOOL v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v320;
  uint64_t *v321;
  int v322;
  BOOL v323;
  unsigned int v324;
  uint64_t *v325;
  int v326;
  BOOL v327;
  unsigned int v328;
  uint64_t *v329;
  uint64_t *v330;
  uint64_t v331;
  int v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  llvm::MachineBasicBlock *v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t *v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  llvm::MachineBasicBlock *v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  llvm::SmallPtrSetImplBase *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t *v361;
  int v362;
  int v363;
  uint64_t *v364;
  int v365;
  BOOL v366;
  int v367;
  uint64_t *v368;
  int v369;
  BOOL v370;
  int v371;
  uint64_t *v372;
  uint64_t *v373;
  int v374;
  int v375;
  unint64_t *v376;
  _BYTE *v377;
  unsigned int v378;
  unsigned int v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t **v385;
  uint64_t *v386;
  unint64_t *v387;
  unint64_t v388;
  int v389;
  _BYTE *v390;
  unsigned int v391;
  unsigned int v392;
  _QWORD *v393;
  int v394;
  BOOL v395;
  unsigned int v396;
  int v397;
  int v398;
  _QWORD *v399;
  unsigned int v400;
  _QWORD *v401;
  uint64_t v402;
  llvm::MachineBasicBlock *v403;
  uint64_t *v404;
  _QWORD *v405;
  int v406;
  BOOL v407;
  unsigned int v408;
  _QWORD *v409;
  void *v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  llvm::MachineBasicBlock *v416;
  uint64_t v417;
  int *v418;
  int v419;
  BOOL v420;
  unsigned int v421;
  int v422;
  int v423;
  int *v424;
  uint64_t v425;
  __int128 v426;
  int v427;
  uint64_t v428;
  unsigned int v429;
  unsigned int v430;
  _QWORD *v431;
  int v432;
  BOOL v433;
  unsigned int v434;
  unsigned int v435;
  int v436;
  unsigned int v437;
  void *v438;
  _QWORD *v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  void **v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  llvm::SmallPtrSetImplBase *v459;
  llvm::MachineBasicBlock *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t LiveSubranges;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t i;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  int *v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  int v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  uint64_t v485;
  int v486;
  unsigned int v487;
  uint64_t v488;
  int v489;
  int v490;
  int v491;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int *v496;
  int *v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  llvm::LiveInterval *v501;
  llvm::SmallPtrSetImplBase *v502;
  llvm::SmallPtrSetImplBase *v503;
  unsigned int *v504;
  llvm::MachineBasicBlock *v505;
  unsigned int v506;
  _QWORD *v507;
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  unsigned int v512;
  uint64_t v513[3];
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  _QWORD *v518;
  int v519;
  char v520;
  uint64_t v521;
  _BYTE *v522;
  _BYTE *v523;
  uint64_t v524;
  int v525;
  _BYTE v526[32];
  _BYTE *v527;
  _BYTE *v528;
  uint64_t v529;
  int v530;
  _BYTE v531[32];
  _QWORD v532[2];
  int v533;
  uint64_t v534;
  int32x2_t v535;
  unsigned int v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  uint64_t *v540;
  uint64_t v541;
  int v542;
  _BYTE v543[64];
  _BYTE *v544;
  void *v545;
  uint64_t v546;
  int v547;
  _BYTE v548[64];
  void *v549;
  uint64_t v550;
  _BYTE v551[128];
  void *v552;
  uint64_t v553;
  _BYTE v554[16];
  void *v555;
  uint64_t v556;
  _QWORD v557[34];

  v557[32] = *MEMORY[0x1E0C80C00];
  v2 = a1 + 55;
  v552 = v554;
  v553 = 0x400000000;
  v3 = a1[56];
  v4 = a1[57];
  v5 = a1[62];
  v513[0] = (uint64_t)&off_1E8143478;
  v513[1] = 0;
  v6 = *(_QWORD *)(v3 + 40);
  v513[2] = (uint64_t)&v552;
  v514 = v6;
  v515 = v4;
  v516 = v5;
  v517 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 104))(*(_QWORD *)(v3 + 16));
  v518 = v2;
  v519 = v553;
  v520 = 0;
  v521 = 0;
  v522 = v526;
  v523 = v526;
  v524 = 4;
  v525 = 0;
  v527 = v531;
  v528 = v531;
  v529 = 4;
  v530 = 0;
  *(_QWORD *)(v6 + 8) = v513;
  v508 = a1;
  v7 = *(_DWORD *)(a1[63] + 32);
  if (v7)
  {
    v8 = 0;
    v9 = (uint64_t)(a1 + 95);
    while (1)
    {
      LODWORD(v555) = v8 | 0x80000000;
      v10 = v508[63];
      v11 = *(_DWORD *)(*(_QWORD *)(v508[62] + 328) + 4 * (v8 & 0x7FFFFFFF));
      LODWORD(v549) = v11;
      if (sub_1C50E3E8C(v10, v8 | 0x80000000))
        goto LABEL_25;
      v12 = *((_DWORD *)v508 + 194);
      if (!v12)
        break;
      v13 = v508[95];
      v14 = v12 - 1;
      v15 = v14 & (37 * v11);
      v16 = (int *)(v13 + 160 * v15);
      v17 = *v16;
      if (v11 != *v16)
      {
        v32 = 0;
        v33 = 1;
        while (v17 != -1)
        {
          if (v32)
            v34 = 0;
          else
            v34 = v17 == -2;
          if (v34)
            v32 = v16;
          v35 = v15 + v33++;
          v15 = v35 & v14;
          v16 = (int *)(v13 + 160 * v15);
          v17 = *v16;
          if (v11 == *v16)
            goto LABEL_6;
        }
        if (v32)
          v36 = v32;
        else
          v36 = v16;
        goto LABEL_41;
      }
LABEL_6:
      if ((v16[2] & 1) != 0)
      {
        v19 = v16 + 4;
        v18 = 16;
      }
      else
      {
        v18 = v16[6];
        if (!v18)
        {
          v28 = 0;
LABEL_22:
          v29 = sub_1C4A12CDC((uint64_t)(v16 + 2), (uint64_t)&v555, &v555, v28);
          *v29 = (_DWORD)v555;
          v30 = (int)v555;
          v31 = v16[22];
          if (v31 >= v16[23])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 20), (uint64_t)(v16 + 24), v31 + 1, 4);
            v31 = v16[22];
          }
          *(_DWORD *)(*((_QWORD *)v16 + 10) + 4 * v31) = v30;
          ++v16[22];
          goto LABEL_25;
        }
        v19 = (int *)*((_QWORD *)v16 + 2);
      }
      v20 = v18 - 1;
      v21 = (37 * (_DWORD)v555) & v20;
      v22 = &v19[v21];
      v23 = *v22;
      if ((_DWORD)v555 != *v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != -1)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == -2;
          if (v26)
            v24 = v22;
          v27 = v21 + v25++;
          v21 = v27 & v20;
          v22 = &v19[v21];
          v23 = *v22;
          if ((_DWORD)v555 == *v22)
            goto LABEL_25;
        }
        if (v24)
          v28 = v24;
        else
          v28 = v22;
        goto LABEL_22;
      }
LABEL_25:
      if (++v8 == v7)
        goto LABEL_43;
    }
    v36 = 0;
LABEL_41:
    v16 = sub_1C50E3F68(v9, (int *)&v549, v36);
    *v16 = v11;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((_OWORD *)v16 + 9) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_QWORD *)v16 + 1) = 1;
    *(_QWORD *)&v37 = -1;
    *((_QWORD *)&v37 + 1) = -1;
    *((_OWORD *)v16 + 1) = v37;
    *((_OWORD *)v16 + 2) = v37;
    *((_OWORD *)v16 + 3) = v37;
    *((_OWORD *)v16 + 4) = v37;
    *((_QWORD *)v16 + 10) = v16 + 24;
    *((_QWORD *)v16 + 11) = 0x1000000000;
    goto LABEL_6;
  }
LABEL_43:
  v38 = v508;
  v39 = (int *)v508[92];
  v40 = (int *)v508[93];
  if (v39 == v40)
    goto LABEL_749;
  v41 = (uint64_t)(v508 + 86);
  v507 = v508 + 67;
  v496 = (int *)v508[93];
  do
  {
    v512 = *v39;
    v42 = sub_1C50E32FC(v41, &v512);
    LODWORD(v43) = v39[9];
    if ((_DWORD)v43 == v39[10])
      goto LABEL_743;
    v504 = *(unsigned int **)(v42 + 8);
    v500 = *((_QWORD *)v39 + 1);
    v549 = v551;
    v550 = 0x1000000000;
    v509 = 0;
    v510 = 0;
    v511 = 0;
    v555 = v557;
    v556 = 0x2000000000;
    v534 = 0;
    v535 = 0;
    v536 = 0;
    v532[0] = 0;
    v532[1] = 0;
    v44 = (unint64_t *)*((_QWORD *)v39 + 3);
    if (v44 == *((unint64_t **)v39 + 2))
      v43 = v43;
    else
      v43 = v39[8];
    v533 = 0;
    v497 = v39;
    if ((_DWORD)v43)
    {
      v45 = 8 * v43;
      v46 = v44;
      while (*v46 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v46;
        v45 -= 8;
        if (!v45)
          goto LABEL_160;
      }
    }
    else
    {
      v46 = v44;
    }
    v47 = &v44[v43];
    if (v46 != v47)
    {
      v48 = (uint64_t)(v39 + 4);
      v49 = *v46;
LABEL_57:
      v50 = *(_QWORD *)(v49 + 24);
      v51 = v508[60];
      if (!*(_QWORD *)(v51 + 1320))
      {
        v120 = operator new();
        *(_OWORD *)(v120 + 32) = 0u;
        *(_OWORD *)(v120 + 48) = 0u;
        *(_QWORD *)(v120 + 56) = 0;
        *(_QWORD *)(v120 + 64) = 0;
        *(_OWORD *)(v120 + 16) = 0u;
        *(_QWORD *)v120 = v120 + 16;
        *(_QWORD *)(v120 + 8) = 0x100000000;
        *(_QWORD *)(v120 + 24) = 0;
        *(_QWORD *)(v120 + 32) = 0;
        *(_DWORD *)(v120 + 40) = 0;
        *(_QWORD *)(v120 + 48) = 0;
        *(_BYTE *)(v120 + 64) = 0;
        v121 = *(_QWORD *)(v51 + 1320);
        *(_QWORD *)(v51 + 1320) = v120;
        if (v121)
          sub_1C4DC4DE4(v51 + 1320, v121);
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v51);
      v52 = *(_QWORD *)(v51 + 1320);
      v53 = *(unsigned int *)(v52 + 40);
      v54 = v50 >> 4;
      if ((_DWORD)v53)
      {
        v55 = *(_QWORD *)(v52 + 24);
        LODWORD(v56) = (v53 - 1) & (v54 ^ (v50 >> 9));
        v57 = (uint64_t *)(v55 + 16 * v56);
        v58 = *v57;
        if (v50 == *v57)
        {
LABEL_64:
          if (v57 != (uint64_t *)(v55 + 16 * v53))
          {
            v61 = v57[1];
            goto LABEL_67;
          }
        }
        else
        {
          v59 = 1;
          while (v58 != -4096)
          {
            v60 = v56 + v59++;
            v56 = v60 & (v53 - 1);
            v58 = *(_QWORD *)(v55 + 16 * v56);
            if (v50 == v58)
            {
              v57 = (uint64_t *)(v55 + 16 * v56);
              goto LABEL_64;
            }
          }
        }
      }
      v61 = 0;
LABEL_67:
      v544 = (_BYTE *)v61;
      v62 = sub_1C50E486C((uint64_t)v532, (uint64_t *)&v544);
      v63 = v62[1];
      if (!v63)
      {
        v80 = v508[60];
        if (!*(_QWORD *)(v80 + 1320))
        {
          v124 = operator new();
          *(_OWORD *)(v124 + 32) = 0u;
          *(_OWORD *)(v124 + 48) = 0u;
          *(_QWORD *)(v124 + 56) = 0;
          *(_QWORD *)(v124 + 64) = 0;
          *(_OWORD *)(v124 + 16) = 0u;
          *(_QWORD *)v124 = v124 + 16;
          *(_QWORD *)(v124 + 8) = 0x100000000;
          *(_QWORD *)(v124 + 24) = 0;
          *(_QWORD *)(v124 + 32) = 0;
          *(_DWORD *)(v124 + 40) = 0;
          *(_QWORD *)(v124 + 48) = 0;
          *(_BYTE *)(v124 + 64) = 0;
          v125 = *(_QWORD *)(v80 + 1320);
          *(_QWORD *)(v80 + 1320) = v124;
          if (v125)
            sub_1C4DC4DE4(v80 + 1320, v125);
        }
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v80);
        v81 = *(_QWORD *)(v80 + 1320);
        v82 = *(unsigned int *)(v81 + 40);
        if ((_DWORD)v82)
        {
          v83 = *(_QWORD *)(v81 + 24);
          LODWORD(v84) = (v82 - 1) & (v54 ^ (v50 >> 9));
          v85 = (uint64_t *)(v83 + 16 * v84);
          v86 = *v85;
          if (v50 == *v85)
          {
LABEL_90:
            v38 = v508;
            if (v85 == (uint64_t *)(v83 + 16 * v82))
              v89 = 0;
            else
              v89 = v85[1];
          }
          else
          {
            v87 = 1;
            while (v86 != -4096)
            {
              v88 = v84 + v87++;
              v84 = v88 & (v82 - 1);
              v86 = *(_QWORD *)(v83 + 16 * v84);
              if (v50 == v86)
              {
                v85 = (uint64_t *)(v83 + 16 * v84);
                goto LABEL_90;
              }
            }
            v89 = 0;
            v38 = v508;
          }
        }
        else
        {
          v89 = 0;
          v38 = v508;
        }
        v539 = (uint64_t *)v89;
        sub_1C50E43A0((uint64_t)v532, (uint64_t *)&v539)[1] = v49;
        goto LABEL_132;
      }
      v64 = v62[1];
      v65 = *(_WORD *)(v63 + 44);
      v66 = v64;
      if ((v65 & 4) != 0)
      {
        do
          v66 = *(_QWORD *)v66 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v66 + 44) & 4) != 0);
      }
      if ((v65 & 8) != 0)
      {
        do
          v64 = *(_QWORD *)(v64 + 8);
        while ((*(_WORD *)(v64 + 44) & 8) != 0);
      }
      v67 = *(_QWORD *)(v64 + 8);
      if (v66 != v67)
      {
        while (1)
        {
          v68 = **(unsigned __int16 **)(v66 + 16);
          v69 = v68 > 0x17;
          v70 = (1 << v68) & 0x83E000;
          if (v69 || v70 == 0)
            break;
          v66 = *(_QWORD *)(v66 + 8);
          if (v66 == v67)
          {
            v66 = v67;
            break;
          }
        }
      }
      v72 = *(_QWORD *)(v508[57] + 288);
      v73 = *(_QWORD *)(v72 + 368);
      v74 = *(unsigned int *)(v72 + 384);
      if ((_DWORD)v74)
      {
        LODWORD(v75) = ((v66 >> 4) ^ (v66 >> 9)) & (v74 - 1);
        v76 = (uint64_t *)(v73 + 16 * v75);
        v77 = *v76;
        if (v66 == *v76)
          goto LABEL_94;
        v78 = 1;
        while (v77 != -4096)
        {
          v79 = v75 + v78++;
          v75 = v79 & (v74 - 1);
          v77 = *(_QWORD *)(v73 + 16 * v75);
          if (v66 == v77)
          {
            v76 = (uint64_t *)(v73 + 16 * v75);
            goto LABEL_94;
          }
        }
      }
      v76 = (uint64_t *)(v73 + 16 * v74);
LABEL_94:
      v90 = *(_WORD *)(v49 + 44);
      v91 = v49;
      if ((v90 & 4) != 0)
      {
        do
          v91 = *(_QWORD *)v91 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v91 + 44) & 4) != 0);
      }
      v92 = v49;
      if ((v90 & 8) != 0)
      {
        do
          v92 = *(_QWORD *)(v92 + 8);
        while ((*(_WORD *)(v92 + 44) & 8) != 0);
      }
      v93 = v76[1];
      v94 = *(_QWORD *)(v92 + 8);
      if (v91 != v94)
      {
        while (1)
        {
          v95 = **(unsigned __int16 **)(v91 + 16);
          v69 = v95 > 0x17;
          v96 = (1 << v95) & 0x83E000;
          if (v69 || v96 == 0)
            break;
          v91 = *(_QWORD *)(v91 + 8);
          if (v91 == v94)
          {
            v91 = v94;
            break;
          }
        }
      }
      if ((_DWORD)v74)
      {
        LODWORD(v98) = ((v91 >> 4) ^ (v91 >> 9)) & (v74 - 1);
        v99 = (uint64_t *)(v73 + 16 * v98);
        v100 = *v99;
        if (v91 == *v99)
        {
LABEL_110:
          v103 = (v99[1] >> 1) & 3 | *(_DWORD *)((v99[1] & 0xFFFFFFFFFFFFFFF8) + 24);
          v104 = *(_DWORD *)((v93 & 0xFFFFFFFFFFFFFFF8) + 24) | (v93 >> 1) & 3;
          if (v103 <= v104)
            v105 = v62[1];
          else
            v105 = v49;
          if (v103 <= v104)
            v106 = v49;
          else
            v106 = v62[1];
          v107 = v550;
          if (v550 >= (unint64_t)HIDWORD(v550))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v549, (uint64_t)v551, v550 + 1, 8);
            v107 = v550;
          }
          *((_QWORD *)v549 + v107) = v105;
          LODWORD(v550) = v550 + 1;
          v108 = v508[60];
          if (!*(_QWORD *)(v108 + 1320))
          {
            v122 = operator new();
            *(_OWORD *)(v122 + 32) = 0u;
            *(_OWORD *)(v122 + 48) = 0u;
            *(_QWORD *)(v122 + 56) = 0;
            *(_QWORD *)(v122 + 64) = 0;
            *(_OWORD *)(v122 + 16) = 0u;
            *(_QWORD *)v122 = v122 + 16;
            *(_QWORD *)(v122 + 8) = 0x100000000;
            *(_QWORD *)(v122 + 24) = 0;
            *(_QWORD *)(v122 + 32) = 0;
            *(_DWORD *)(v122 + 40) = 0;
            *(_QWORD *)(v122 + 48) = 0;
            *(_BYTE *)(v122 + 64) = 0;
            v123 = *(_QWORD *)(v108 + 1320);
            *(_QWORD *)(v108 + 1320) = v122;
            if (v123)
              sub_1C4DC4DE4(v108 + 1320, v123);
          }
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v108);
          v109 = *(_QWORD *)(v108 + 1320);
          v110 = *(unsigned int *)(v109 + 40);
          if ((_DWORD)v110)
          {
            v111 = *(_QWORD *)(v109 + 24);
            LODWORD(v112) = (v110 - 1) & (v54 ^ (v50 >> 9));
            v113 = (uint64_t *)(v111 + 16 * v112);
            v114 = *v113;
            if (v50 == *v113)
            {
LABEL_125:
              v38 = v508;
              if (v113 == (uint64_t *)(v111 + 16 * v110))
                v117 = 0;
              else
                v117 = v113[1];
            }
            else
            {
              v115 = 1;
              while (v114 != -4096)
              {
                v116 = v112 + v115++;
                v112 = v116 & (v110 - 1);
                v114 = *(_QWORD *)(v111 + 16 * v112);
                if (v50 == v114)
                {
                  v113 = (uint64_t *)(v111 + 16 * v112);
                  goto LABEL_125;
                }
              }
              v117 = 0;
              v38 = v508;
            }
          }
          else
          {
            v117 = 0;
            v38 = v508;
          }
          v539 = (uint64_t *)v117;
          sub_1C50E43A0((uint64_t)v532, (uint64_t *)&v539)[1] = v106;
LABEL_132:
          v118 = v46 + 1;
          while (v118 != v47)
          {
            v119 = *v118++;
            v49 = v119;
            if (v119 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v46 = v118 - 1;
              goto LABEL_57;
            }
          }
          v39 = v497;
          if ((_DWORD)v550)
          {
            v126 = (uint64_t *)v549;
            v127 = 8 * v550;
            do
            {
              v128 = sub_1C477672C(v48, *v126);
              v129 = *((_QWORD *)v497 + 3);
              if (v129 == *((_QWORD *)v497 + 2))
                v130 = (unsigned int *)(v497 + 9);
              else
                v130 = (unsigned int *)(v497 + 8);
              if (v128 != (_QWORD *)(v129 + 8 * *v130))
              {
                *v128 = -2;
                ++v497[10];
              }
              ++v126;
              v127 -= 8;
            }
            while (v127);
          }
          goto LABEL_160;
        }
        v101 = 1;
        while (v100 != -4096)
        {
          v102 = v98 + v101++;
          v98 = v102 & (v74 - 1);
          v100 = *(_QWORD *)(v73 + 16 * v98);
          if (v91 == v100)
          {
            v99 = (uint64_t *)(v73 + 16 * v98);
            goto LABEL_110;
          }
        }
      }
      v99 = (uint64_t *)(v73 + 16 * v74);
      goto LABEL_110;
    }
LABEL_160:
    v131 = sub_1C499C548(*(_QWORD *)(v38[57] + 288), *(_QWORD *)(v500 + 8));
    v544 = v548;
    v545 = v548;
    v546 = 8;
    v547 = 0;
    v539 = (uint64_t *)v543;
    v540 = (uint64_t *)v543;
    v541 = 8;
    v542 = 0;
    v132 = *(_QWORD *)(sub_1C49FA70C(v38[60], v131) + 8);
    v133 = *((_QWORD *)v39 + 3);
    if (v133 == *((_QWORD *)v39 + 2))
      v134 = (unsigned int *)(v39 + 9);
    else
      v134 = (unsigned int *)(v39 + 8);
    v135 = *v134;
    if ((_DWORD)v135)
    {
      v136 = 8 * v135;
      v137 = (unint64_t *)*((_QWORD *)v39 + 3);
      while (*v137 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v137;
        v136 -= 8;
        if (!v136)
          goto LABEL_232;
      }
    }
    else
    {
      v137 = (unint64_t *)*((_QWORD *)v39 + 3);
    }
    v138 = (unint64_t *)(v133 + 8 * v135);
    if (v137 != v138)
    {
      v139 = *v137;
LABEL_171:
      v140 = *(_QWORD *)(v139 + 24);
      v141 = sub_1C49FA70C(v38[60], v140);
      v538 = v141;
      if (v141 != v132)
      {
        v142 = v141;
        while (v142 == sub_1C49FA70C(v38[60], v140) || !sub_1C50E486C((uint64_t)v532, &v538)[1])
        {
          v143 = sub_1C477672C((uint64_t)&v544, v142);
          if (v545 == v544)
            v144 = (uint64_t *)((char *)&v546 + 4);
          else
            v144 = &v546;
          if (v143 == (_QWORD *)((char *)v545 + 8 * *(unsigned int *)v144))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v539, v142);
            v142 = *(_QWORD *)(v142 + 8);
            v538 = v142;
            if (v142 != v132)
              continue;
          }
          goto LABEL_180;
        }
        v537 = sub_1C49FA70C(v38[60], v140);
        v163 = sub_1C50E43A0((uint64_t)v532, &v537)[1];
        if (v163)
        {
          v164 = v550;
          if (v550 >= (unint64_t)HIDWORD(v550))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v549, (uint64_t)v551, v550 + 1, 8);
            v164 = v550;
          }
          *((_QWORD *)v549 + v164) = v163;
          LODWORD(v550) = v550 + 1;
          goto LABEL_214;
        }
      }
LABEL_180:
      v145 = sub_1C49FA70C(v38[60], v140);
      v537 = v145;
      if (v536)
      {
        v146 = v536 - 1;
        v147 = ((v145 >> 4) ^ (v145 >> 9)) & (v536 - 1);
        v148 = (_QWORD *)(v534 + 16 * v147);
        v149 = *v148;
        if (v145 == *v148)
        {
LABEL_195:
          *((_DWORD *)v148 + 2) = 0;
          if (v540 == v539)
            v155 = (uint64_t *)((char *)&v541 + 4);
          else
            v155 = &v541;
          v156 = *(unsigned int *)v155;
          if ((_DWORD)v156)
          {
            v157 = 8 * v156;
            v158 = v540;
            while ((unint64_t)*v158 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v158;
              v157 -= 8;
              if (!v157)
                goto LABEL_214;
            }
          }
          else
          {
            v158 = v540;
          }
          v159 = (char *)&v540[v156];
          if (v158 != (uint64_t *)v159)
          {
            v160 = *v158;
LABEL_206:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v544, v160);
            v161 = (unint64_t *)(v158 + 1);
            while (v161 != (unint64_t *)v159)
            {
              v162 = *v161++;
              v160 = v162;
              if (v162 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v158 = (uint64_t *)(v161 - 1);
                goto LABEL_206;
              }
            }
          }
LABEL_214:
          if (v540 != v539)
          {
            v167 = v541 < 0x21 || 4 * (HIDWORD(v541) - v542) >= v541;
            if (!v167)
            {
              free(v540);
              v168 = 1 << (33 - __clz(HIDWORD(v541) - v542 - 1));
              v69 = (HIDWORD(v541) - v542) > 0x10;
              v542 = 0;
              if (v69)
                v169 = v168;
              else
                v169 = 32;
              v541 = v169;
              v170 = (char *)malloc_type_malloc(8 * v169, 0x4065EBACuLL);
              if (!v170)
LABEL_756:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              v540 = (uint64_t *)v170;
              memset(v170, 255, 8 * v541);
LABEL_216:
              v165 = v137 + 1;
              while (v165 != v138)
              {
                v166 = *v165++;
                v139 = v166;
                if (v166 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v137 = v165 - 1;
                  goto LABEL_171;
                }
              }
              goto LABEL_232;
            }
            memset(v540, 255, 8 * v541);
          }
          v542 = 0;
          HIDWORD(v541) = 0;
          goto LABEL_216;
        }
        v150 = 0;
        v151 = 1;
        while (v149 != -4096)
        {
          if (v150)
            v152 = 0;
          else
            v152 = v149 == -8192;
          if (v152)
            v150 = v148;
          v153 = v147 + v151++;
          v147 = v153 & v146;
          v148 = (_QWORD *)(v534 + 16 * (v153 & v146));
          v149 = *v148;
          if (v145 == *v148)
            goto LABEL_195;
        }
        if (v150)
          v154 = v150;
        else
          v154 = v148;
      }
      else
      {
        v154 = 0;
      }
      v148 = sub_1C50E44BC((uint64_t)&v534, (uint64_t)&v537, &v537, v154);
      *v148 = v537;
      *((_DWORD *)v148 + 2) = 0;
      goto LABEL_195;
    }
LABEL_232:
    v171 = v38[60];
    if (!*(_QWORD *)(v171 + 1320))
    {
      v493 = operator new();
      *(_OWORD *)(v493 + 32) = 0u;
      *(_OWORD *)(v493 + 48) = 0u;
      *(_QWORD *)(v493 + 56) = 0;
      *(_QWORD *)(v493 + 64) = 0;
      *(_OWORD *)(v493 + 16) = 0u;
      *(_QWORD *)v493 = v493 + 16;
      *(_QWORD *)(v493 + 8) = 0x100000000;
      *(_QWORD *)(v493 + 24) = 0;
      *(_QWORD *)(v493 + 32) = 0;
      *(_DWORD *)(v493 + 40) = 0;
      *(_QWORD *)(v493 + 48) = 0;
      *(_BYTE *)(v493 + 64) = 0;
      v494 = *(_QWORD *)(v171 + 1320);
      *(_QWORD *)(v171 + 1320) = v493;
      if (v494)
        sub_1C4DC4DE4(v171 + 1320, v494);
    }
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v171);
    v172 = *(_QWORD *)(v171 + 1320);
    v173 = *(unsigned int *)(v172 + 40);
    if (!(_DWORD)v173)
      goto LABEL_241;
    v174 = *(_QWORD *)(v172 + 24);
    LODWORD(v175) = (v173 - 1) & ((v131 >> 4) ^ (v131 >> 9));
    v176 = (uint64_t *)(v174 + 16 * v175);
    v177 = *v176;
    if (v131 != *v176)
    {
      v178 = 1;
      while (v177 != -4096)
      {
        v179 = v175 + v178++;
        v175 = v179 & (v173 - 1);
        v177 = *(_QWORD *)(v174 + 16 * v175);
        if (v131 == v177)
        {
          v176 = (uint64_t *)(v174 + 16 * v175);
          goto LABEL_239;
        }
      }
LABEL_241:
      v180 = 0;
      goto LABEL_242;
    }
LABEL_239:
    if (v176 == (uint64_t *)(v174 + 16 * v173))
      goto LABEL_241;
    v180 = v176[1];
LABEL_242:
    v181 = v556;
    if (v556 >= (unint64_t)HIDWORD(v556))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v555, (uint64_t)v557, v556 + 1, 8);
      v181 = v556;
    }
    v182 = 0;
    *((_QWORD *)v555 + v181) = v180;
    v183 = v556 + 1;
    LODWORD(v556) = v556 + 1;
    do
    {
      v184 = *((_QWORD *)v555 + v182);
      v185 = *(unsigned int *)(v184 + 32);
      if ((_DWORD)v185)
      {
        v186 = *(uint64_t **)(v184 + 24);
        v187 = 8 * v185;
        do
        {
          v188 = *v186;
          v189 = sub_1C477672C((uint64_t)&v544, *v186);
          if (v545 == v544)
            v190 = (uint64_t *)((char *)&v546 + 4);
          else
            v190 = &v546;
          if (v189 != (_QWORD *)((char *)v545 + 8 * *(unsigned int *)v190))
          {
            v191 = v556;
            if (v556 >= (unint64_t)HIDWORD(v556))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v555, (uint64_t)v557, v556 + 1, 8);
              v191 = v556;
            }
            *((_QWORD *)v555 + v191) = v188;
            LODWORD(v556) = v556 + 1;
          }
          ++v186;
          v187 -= 8;
        }
        while (v187);
        v183 = v556;
      }
      ++v182;
    }
    while (v183 != v182);
    if (v540 != v539)
      free(v540);
    if (v545 != v544)
      free(v545);
    v545 = 0;
    v544 = 0;
    LODWORD(v546) = 0;
    if (!(_DWORD)v556)
      goto LABEL_644;
    v192 = (uint64_t *)((char *)v555 + 8 * v556);
    do
    {
      v194 = (llvm::MachineBasicBlock **)*--v192;
      v193 = (uint64_t)v194;
      v195 = *v194;
      v505 = *v194;
      if (!v536)
        goto LABEL_268;
      v196 = v536 - 1;
      v197 = ((v193 >> 4) ^ (v193 >> 9)) & (v536 - 1);
      v198 = (_QWORD *)(v534 + 16 * v197);
      v199 = *v198;
      if (v193 == *v198)
      {
        if (v197 == v536)
          goto LABEL_268;
LABEL_266:
        if (*((_DWORD *)v198 + 2))
        {
          v193 = *v192;
          goto LABEL_268;
        }
        if ((_DWORD)v546)
        {
          v331 = *v192;
          v332 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v546 - 1);
          v333 = (uint64_t *)&v544[176 * v332];
          v334 = *v333;
          if (*v192 == *v333)
          {
LABEL_470:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v333 + 1), v331);
            v335 = *(_QWORD *)(v508[66] + 248);
            if (v335 && (v336 = *(_DWORD *)(v335 + 176)) != 0)
            {
              v337 = *(_QWORD *)(v335 + 160);
              v338 = v336 - 1;
              v339 = (v336 - 1) & ((v195 >> 4) ^ (v195 >> 9));
              v340 = *(llvm::MachineBasicBlock **)(v337 + 16 * v339);
              if (v340 == v195)
              {
LABEL_473:
                v341 = *(unsigned int *)(v337 + 16 * v339 + 8);
                if (v341 != 0xFFFFFFFFLL)
                {
                  v342 = *(_QWORD *)(*(_QWORD *)(v335 + 8) + 24 * v341 + 16);
                  goto LABEL_475;
                }
              }
              else
              {
                v362 = 1;
                while (v340 != (llvm::MachineBasicBlock *)-4096)
                {
                  v363 = v339 + v362++;
                  v339 = v363 & v338;
                  v340 = *(llvm::MachineBasicBlock **)(v337 + 16 * v339);
                  if (v340 == v195)
                    goto LABEL_473;
                }
              }
              v342 = 0;
            }
            else
            {
              v342 = 0;
            }
LABEL_475:
            if ((_DWORD)v546)
            {
              v343 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v546 - 1);
              v344 = (uint64_t *)&v544[176 * v343];
              v345 = *v344;
              if (*v192 == *v344)
              {
LABEL_477:
                v344[21] = v342;
                continue;
              }
              v368 = 0;
              v369 = 1;
              while (v345 != -4096)
              {
                if (v368)
                  v370 = 0;
                else
                  v370 = v345 == -8192;
                if (v370)
                  v368 = v344;
                v371 = v343 + v369++;
                v343 = v371 & (v546 - 1);
                v344 = (uint64_t *)&v544[176 * v343];
                v345 = *v344;
                if (*v192 == *v344)
                  goto LABEL_477;
              }
              if (v368)
                v373 = v368;
              else
                v373 = v344;
            }
            else
            {
              v373 = 0;
            }
            v344 = sub_1C50E4670((uint64_t)&v544, v192, v373);
            *v344 = *v192;
            v344[1] = (uint64_t)(v344 + 5);
            v344[2] = (uint64_t)(v344 + 5);
            v344[3] = 16;
            *((_DWORD *)v344 + 8) = 0;
            v344[21] = 0;
            goto LABEL_477;
          }
          v364 = 0;
          v365 = 1;
          while (v334 != -4096)
          {
            if (v364)
              v366 = 0;
            else
              v366 = v334 == -8192;
            if (v366)
              v364 = v333;
            v367 = v332 + v365++;
            v332 = v367 & (v546 - 1);
            v333 = (uint64_t *)&v544[176 * v332];
            v334 = *v333;
            if (v331 == *v333)
              goto LABEL_470;
          }
          if (v364)
            v372 = v364;
          else
            v372 = v333;
        }
        else
        {
          v372 = 0;
        }
        v333 = sub_1C50E4670((uint64_t)&v544, v192, v372);
        *v333 = *v192;
        v333[1] = (uint64_t)(v333 + 5);
        v333[2] = (uint64_t)(v333 + 5);
        v333[3] = 16;
        *((_DWORD *)v333 + 8) = 0;
        v333[21] = 0;
        v331 = *v192;
        goto LABEL_470;
      }
      v427 = 1;
      v428 = *v198;
      v429 = ((v193 >> 4) ^ (v193 >> 9)) & v196;
      do
      {
        if (v428 == -4096)
          goto LABEL_268;
        v430 = v429 + v427++;
        v429 = v430 & v196;
        v428 = *(_QWORD *)(v534 + 16 * v429);
      }
      while (v193 != v428);
      if (v429 != v536)
      {
        v431 = 0;
        v432 = 1;
        while (v199 != -4096)
        {
          if (v431)
            v433 = 0;
          else
            v433 = v199 == -8192;
          if (v433)
            v431 = v198;
          v434 = v197 + v432++;
          v197 = v434 & v196;
          v198 = (_QWORD *)(v534 + 16 * v197);
          v199 = *v198;
          v195 = v505;
          if (v193 == *v198)
            goto LABEL_266;
        }
        if (v431)
          v439 = v431;
        else
          v439 = v198;
        v198 = sub_1C50E44BC((uint64_t)&v534, (uint64_t)v192, v192, v439);
        *v198 = *v192;
        *((_DWORD *)v198 + 2) = 0;
        v195 = v505;
        goto LABEL_266;
      }
LABEL_268:
      v200 = *(unsigned int *)(v193 + 32);
      if ((_DWORD)v200)
      {
        v201 = *(uint64_t **)(v193 + 24);
        v202 = &v201[v200];
        v203 = v546;
        v204 = (uint64_t)v544;
        v205 = v546;
        v206 = v546;
        while (1)
        {
          v207 = *v201;
          v539 = (uint64_t *)*v201;
          if (v206)
          {
            v208 = (v207 >> 4) ^ (v207 >> 9);
            v209 = v208 & (v206 - 1);
            v210 = (uint64_t *)(v204 + 176 * v209);
            v211 = *v210;
            if (*v210 != v207)
            {
              v277 = 1;
              while (v211 != -4096)
              {
                v278 = v209 + v277++;
                v209 = v278 & (v206 - 1);
                v210 = (uint64_t *)(v204 + 176 * v209);
                v211 = *v210;
                if (*v210 == v207)
                  goto LABEL_272;
              }
              goto LABEL_311;
            }
LABEL_272:
            if (v210 != (uint64_t *)(v204 + 176 * v205))
            {
              if (v205)
              {
                v212 = *v192;
                v213 = v205 - 1;
                v214 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v205 - 1);
                v215 = (uint64_t *)(v204 + 176 * v214);
                v216 = *v215;
                if (*v192 == *v215)
                {
                  v217 = (llvm::SmallPtrSetImplBase *)(v215 + 1);
                  goto LABEL_276;
                }
                v248 = 0;
                v249 = 1;
                while (v216 != -4096)
                {
                  if (v248)
                    v250 = 0;
                  else
                    v250 = v216 == -8192;
                  if (v250)
                    v248 = v215;
                  v251 = v214 + v249++;
                  v214 = v251 & v213;
                  v215 = (uint64_t *)(v204 + 176 * v214);
                  v216 = *v215;
                  if (v212 == *v215)
                    goto LABEL_366;
                }
                if (v248)
                  v270 = v248;
                else
                  v270 = v215;
              }
              else
              {
                v270 = 0;
              }
              v215 = sub_1C50E4670((uint64_t)&v544, v192, v270);
              *v215 = *v192;
              v215[1] = (uint64_t)(v215 + 5);
              v215[2] = (uint64_t)(v215 + 5);
              v215[3] = 16;
              *((_DWORD *)v215 + 8) = 0;
              v215[21] = 0;
              v204 = (uint64_t)v544;
              v205 = v546;
LABEL_366:
              v217 = (llvm::SmallPtrSetImplBase *)(v215 + 1);
              if (v205)
              {
                v212 = *v192;
                v213 = v205 - 1;
                v214 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v205 - 1);
LABEL_276:
                v218 = (uint64_t *)(v204 + 176 * v214);
                v219 = *v218;
                if (v212 == *v218)
                {
                  v220 = v218 + 21;
                  goto LABEL_278;
                }
                v258 = 0;
                v259 = 1;
                while (v219 != -4096)
                {
                  if (v258)
                    v260 = 0;
                  else
                    v260 = v219 == -8192;
                  if (v260)
                    v258 = v218;
                  v261 = v214 + v259++;
                  v214 = v261 & v213;
                  v218 = (uint64_t *)(v204 + 176 * v214);
                  v219 = *v218;
                  if (v212 == *v218)
                    goto LABEL_376;
                }
                if (v258)
                  v272 = v258;
                else
                  v272 = v218;
              }
              else
              {
                v272 = 0;
              }
              v218 = sub_1C50E4670((uint64_t)&v544, v192, v272);
              *v218 = *v192;
              v218[1] = (uint64_t)(v218 + 5);
              v218[2] = (uint64_t)(v218 + 5);
              v218[3] = 16;
              *((_DWORD *)v218 + 8) = 0;
              v218[21] = 0;
              v204 = (uint64_t)v544;
              v205 = v546;
LABEL_376:
              v220 = v218 + 21;
              if (v205)
              {
                v213 = v205 - 1;
LABEL_278:
                v221 = v213 & v208;
                v222 = (uint64_t *)(v204 + 176 * (v213 & v208));
                v223 = *v222;
                if (v207 == *v222)
                {
                  v224 = v222[21];
                  v167 = __CFADD__(v224, *v220);
                  v225 = v224 + *v220;
                  if (v167)
                    v225 = -1;
                  *v220 = v225;
                  goto LABEL_283;
                }
                v262 = 0;
                v263 = 1;
                while (v223 != -4096)
                {
                  if (v262)
                    v264 = 0;
                  else
                    v264 = v223 == -8192;
                  if (v264)
                    v262 = v222;
                  v265 = v221 + v263++;
                  v221 = v265 & v213;
                  v222 = (uint64_t *)(v204 + 176 * v221);
                  v223 = *v222;
                  if (v207 == *v222)
                    goto LABEL_382;
                }
                if (v262)
                  v273 = v262;
                else
                  v273 = v222;
              }
              else
              {
                v273 = 0;
              }
              v222 = sub_1C50E4670((uint64_t)&v544, (uint64_t *)&v539, v273);
              *v222 = v207;
              v222[1] = (uint64_t)(v222 + 5);
              v222[2] = (uint64_t)(v222 + 5);
              v222[3] = 16;
              *((_DWORD *)v222 + 8) = 0;
              v222[21] = 0;
              v204 = (uint64_t)v544;
              v205 = v546;
LABEL_382:
              v274 = v222[21];
              v167 = __CFADD__(v274, *v220);
              v275 = v274 + *v220;
              if (v167)
                v275 = -1;
              *v220 = v275;
              if (!v205)
              {
                v276 = 0;
                goto LABEL_390;
              }
LABEL_283:
              v226 = v205 - 1;
              v227 = v226 & v208;
              v228 = (uint64_t *)(v204 + 176 * (v226 & v208));
              v229 = *v228;
              if (v207 != *v228)
              {
                v266 = 0;
                v267 = 1;
                while (v229 != -4096)
                {
                  if (v266)
                    v268 = 0;
                  else
                    v268 = v229 == -8192;
                  if (v268)
                    v266 = v228;
                  v269 = v227 + v267++;
                  v227 = v269 & v226;
                  v228 = (uint64_t *)(v204 + 176 * v227);
                  v229 = *v228;
                  if (v207 == *v228)
                    goto LABEL_284;
                }
                if (v266)
                  v276 = v266;
                else
                  v276 = v228;
LABEL_390:
                v228 = sub_1C50E4670((uint64_t)&v544, (uint64_t *)&v539, v276);
                *v228 = v207;
                v228[1] = (uint64_t)(v228 + 5);
                v228[2] = (uint64_t)(v228 + 5);
                v228[3] = 16;
                *((_DWORD *)v228 + 8) = 0;
                v228[21] = 0;
              }
LABEL_284:
              v230 = (uint64_t *)v228[2];
              if (v230 == (uint64_t *)v228[1])
                v231 = (unsigned int *)v228 + 7;
              else
                v231 = (unsigned int *)(v228 + 3);
              v232 = *v231;
              v233 = &v230[v232];
              if ((_DWORD)v232)
              {
                v234 = 8 * v232;
                while ((unint64_t)*v230 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v230;
                  v234 -= 8;
                  if (!v234)
                  {
                    v230 = v233;
                    break;
                  }
                }
              }
              if ((_DWORD)v546)
              {
                v235 = (v546 - 1) & v208;
                v236 = (uint64_t *)&v544[176 * v235];
                v237 = *v236;
                if (v207 == *v236)
                {
LABEL_294:
                  v238 = v236[2];
                  if (v238 == v236[1])
                    v239 = (unsigned int *)v236 + 7;
                  else
                    v239 = (unsigned int *)(v236 + 3);
                  v240 = (uint64_t *)(v238 + 8 * *v239);
LABEL_298:
                  while (v230 != v240)
                  {
                    v242 = *v230;
                    v241 = (unint64_t *)(v230 + 1);
                    sub_1C4774094(v217, v242);
                    while (v241 != (unint64_t *)v233)
                    {
                      v243 = *v241++;
                      if (v243 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v230 = (uint64_t *)(v241 - 1);
                        goto LABEL_298;
                      }
                    }
                    v230 = v233;
                  }
                  v204 = (uint64_t)v544;
                  v203 = v546;
                  if ((_DWORD)v546)
                  {
                    v244 = ((v539 >> 4) ^ (v539 >> 9)) & (v546 - 1);
                    v245 = (uint64_t **)&v544[176 * v244];
                    v246 = *v245;
                    if (*v245 == v539)
                    {
LABEL_306:
                      v247 = v245[2];
                      if (v247 != v245[1])
                        free(v247);
                      *v245 = (uint64_t *)-8192;
                      v545 = (void *)vadd_s32((int32x2_t)v545, (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      v256 = 1;
                      while (v246 != (uint64_t *)-4096)
                      {
                        v257 = v244 + v256++;
                        v244 = v257 & (v546 - 1);
                        v245 = (uint64_t **)&v544[176 * v244];
                        v246 = *v245;
                        if (*v245 == v539)
                          goto LABEL_306;
                      }
                    }
                    v205 = v203;
                    v206 = v203;
                  }
                  else
                  {
                    v205 = 0;
                    v206 = 0;
                  }
                  goto LABEL_311;
                }
                v252 = 0;
                v253 = 1;
                while (v237 != -4096)
                {
                  if (v252)
                    v254 = 0;
                  else
                    v254 = v237 == -8192;
                  if (v254)
                    v252 = v236;
                  v255 = v235 + v253++;
                  v235 = v255 & (v546 - 1);
                  v236 = (uint64_t *)&v544[176 * v235];
                  v237 = *v236;
                  if (v207 == *v236)
                    goto LABEL_294;
                }
                if (v252)
                  v271 = v252;
                else
                  v271 = v236;
              }
              else
              {
                v271 = 0;
              }
              v236 = sub_1C50E4670((uint64_t)&v544, (uint64_t *)&v539, v271);
              *v236 = v207;
              v236[1] = (uint64_t)(v236 + 5);
              v236[2] = (uint64_t)(v236 + 5);
              v236[3] = 16;
              *((_DWORD *)v236 + 8) = 0;
              v236[21] = 0;
              goto LABEL_294;
            }
            v206 = v205;
          }
LABEL_311:
          if (++v201 == v202)
            goto LABEL_401;
        }
      }
      v204 = (uint64_t)v544;
      v203 = v546;
LABEL_401:
      if (v203)
      {
        v279 = *v192;
        v280 = v203 - 1;
        v281 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v203 - 1);
        v282 = (uint64_t *)(v204 + 176 * v281);
        v283 = *v282;
        if (*v192 == *v282)
        {
          v284 = (llvm::SmallPtrSetImplBase *)(v282 + 1);
          goto LABEL_404;
        }
        v325 = 0;
        v326 = 1;
        while (v283 != -4096)
        {
          if (v325)
            v327 = 0;
          else
            v327 = v283 == -8192;
          if (v327)
            v325 = v282;
          v328 = v281 + v326++;
          v281 = v328 & v280;
          v282 = (uint64_t *)(v204 + 176 * v281);
          v283 = *v282;
          if (v279 == *v282)
            goto LABEL_466;
        }
        if (v325)
          v330 = v325;
        else
          v330 = v282;
      }
      else
      {
        v330 = 0;
      }
      v282 = sub_1C50E4670((uint64_t)&v544, v192, v330);
      *v282 = *v192;
      v282[1] = (uint64_t)(v282 + 5);
      v282[2] = (uint64_t)(v282 + 5);
      v282[3] = 16;
      *((_DWORD *)v282 + 8) = 0;
      v282[21] = 0;
      v204 = (uint64_t)v544;
      v203 = v546;
LABEL_466:
      v284 = (llvm::SmallPtrSetImplBase *)(v282 + 1);
      if (!v203)
      {
        v329 = 0;
        v287 = (unsigned int *)v505;
LABEL_461:
        v502 = v284;
        v285 = sub_1C50E4670((uint64_t)&v544, v192, v329);
        *v285 = *v192;
        v285[1] = (uint64_t)(v285 + 5);
        v285[2] = (uint64_t)(v285 + 5);
        v285[3] = 16;
        *((_DWORD *)v285 + 8) = 0;
        v285[21] = 0;
        goto LABEL_406;
      }
      v279 = *v192;
      v280 = v203 - 1;
      v281 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v203 - 1);
LABEL_404:
      v285 = (uint64_t *)(v204 + 176 * v281);
      v286 = *v285;
      v287 = (unsigned int *)v505;
      if (v279 != *v285)
      {
        v321 = 0;
        v322 = 1;
        while (v286 != -4096)
        {
          if (v321)
            v323 = 0;
          else
            v323 = v286 == -8192;
          if (v323)
            v321 = v285;
          v324 = v281 + v322++;
          v281 = v324 & v280;
          v285 = (uint64_t *)(v204 + 176 * v281);
          v286 = *v285;
          if (v279 == *v285)
            goto LABEL_405;
        }
        if (v321)
          v329 = v321;
        else
          v329 = v285;
        goto LABEL_461;
      }
LABEL_405:
      v502 = v284;
LABEL_406:
      if (*((_DWORD *)v282 + 7) == *((_DWORD *)v282 + 8))
        continue;
      v288 = v287[6];
      v289 = v508[68];
      v290 = *(_QWORD *)(v289 + 16 * v288);
      if (v290 < 8 || *(_QWORD *)(v289 + 16 * v288 + 8) >= 8uLL)
        v290 = sub_1C528C724(v507, (uint64_t)v504, (llvm::MachineBasicBlock *)v287);
      v291 = v290 & 0xFFFFFFFFFFFFFFF8;
      v292 = (v290 >> 1) & 3;
      if ((v292 | *(_DWORD *)((v290 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*(_QWORD *)(v500 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v500 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)))
        continue;
      v293 = v504[28];
      LODWORD(v539) = v293;
      v294 = *((_DWORD *)v508 + 194);
      if (!v294)
      {
        v424 = 0;
LABEL_616:
        v298 = sub_1C50E3F68((uint64_t)(v508 + 95), (int *)&v539, v424);
        *v298 = v293;
        *((_OWORD *)v298 + 7) = 0u;
        *((_OWORD *)v298 + 8) = 0u;
        *((_OWORD *)v298 + 9) = 0u;
        *((_OWORD *)v298 + 6) = 0u;
        *((_QWORD *)v298 + 1) = 1;
        *(_QWORD *)&v426 = -1;
        *((_QWORD *)&v426 + 1) = -1;
        *((_OWORD *)v298 + 1) = v426;
        *((_OWORD *)v298 + 2) = v426;
        *((_OWORD *)v298 + 3) = v426;
        *((_OWORD *)v298 + 4) = v426;
        *((_QWORD *)v298 + 10) = v298 + 24;
        *((_QWORD *)v298 + 11) = 0x1000000000;
        goto LABEL_413;
      }
      v295 = v508[95];
      v296 = v294 - 1;
      v297 = v296 & (37 * v293);
      v298 = (int *)(v295 + 160 * v297);
      v299 = *v298;
      if (v293 != *v298)
      {
        v418 = 0;
        v419 = 1;
        while (v299 != -1)
        {
          if (v418)
            v420 = 0;
          else
            v420 = v299 == -2;
          if (v420)
            v418 = v298;
          v421 = v297 + v419++;
          v297 = v421 & v296;
          v298 = (int *)(v295 + 160 * v297);
          v299 = *v298;
          if (v293 == *v298)
            goto LABEL_413;
        }
        if (v418)
          v424 = v418;
        else
          v424 = v298;
        goto LABEL_616;
      }
LABEL_413:
      v498 = v285;
      v300 = v298[22];
      if (!(_DWORD)v300)
        continue;
      v301 = (int *)*((_QWORD *)v298 + 10);
      v302 = &v301[v300];
      while (1)
      {
        v303 = v508[57];
        if ((*v301 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v303 + 416)
          || (v304 = *(llvm::LiveInterval **)(*(_QWORD *)(v303 + 408) + 8 * (*v301 & 0x7FFFFFFF))) == 0)
        {
          v304 = (llvm::LiveInterval *)sub_1C4851220(v508[57], *v301);
          v495 = *(_QWORD *)(v303 + 304);
          v316 = *(_QWORD *)(v303 + 248);
          *(_QWORD *)v495 = v316;
          *(_QWORD *)(v495 + 8) = *(_QWORD *)(v316 + 40);
          *(_OWORD *)(v495 + 16) = *(_OWORD *)(v303 + 288);
          *(_QWORD *)(v495 + 32) = v303 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v495);
          *(_DWORD *)(v495 + 184) = 0;
          v317 = *(_QWORD *)(v303 + 256);
          v26 = *(_BYTE *)(v317 + 16) == 0;
          v318 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v317 + 24) + 16 * (*((_DWORD *)v304 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v320 = !v26 && v318 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v303 + 304), v304, v320);
          llvm::LiveIntervals::computeDeadValues(v303, (uint64_t)v304, 0);
        }
        v305 = *((_DWORD *)v304 + 2);
        v306 = *(_QWORD **)v304;
        if (!v305)
        {
          v305 = 0;
LABEL_427:
          v310 = &v306[3 * v305];
          goto LABEL_428;
        }
        v307 = v306[3 * v305 - 2];
        v308 = *(_DWORD *)(v291 + 24) | v292;
        v309 = (v307 >> 1) & 3 | *(_DWORD *)((v307 & 0xFFFFFFFFFFFFFFF8) + 24);
        v310 = *(_QWORD **)v304;
        v311 = *((unsigned int *)v304 + 2);
        if (v308 >= v309)
          goto LABEL_427;
        do
        {
          v312 = v311 >> 1;
          v313 = v310[3 * (v311 >> 1) + 1];
          LODWORD(v313) = (v313 >> 1) & 3 | *(_DWORD *)((v313 & 0xFFFFFFFFFFFFFFF8) + 24);
          v311 -= (v311 >> 1) + 1;
          v314 = v308 >= v313;
          if (v308 >= v313)
            v315 = v312 + 1;
          else
            v315 = 0;
          v310 += 3 * v315;
          if (!v314)
            v311 = v312;
        }
        while (v311);
LABEL_428:
        if (v310 != &v306[3 * v305]
          && ((*v310 >> 1) & 3 | *(_DWORD *)((*v310 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v291 + 24) | v292)
          && v310[2])
        {
          break;
        }
        if (++v301 == v302)
          goto LABEL_478;
      }
      v346 = *((_DWORD *)v282 + 7);
      if (v346 - *((_DWORD *)v282 + 8) <= 1)
        v347 = 0x80000000;
      else
        v347 = 1932735283;
      v348 = *(_QWORD *)(v508[66] + 248);
      if (v348)
      {
        v349 = *(_DWORD *)(v348 + 176);
        if (v349)
        {
          v350 = *(_QWORD *)(v348 + 160);
          v351 = v349 - 1;
          v352 = (v349 - 1) & ((v505 >> 4) ^ (v505 >> 9));
          v353 = *(llvm::MachineBasicBlock **)(v350 + 16 * v352);
          if (v353 == v505)
          {
LABEL_486:
            v354 = *(unsigned int *)(v350 + 16 * v352 + 8);
            if (v354 != 0xFFFFFFFFLL)
            {
              v355 = *(_QWORD *)(*(_QWORD *)(v348 + 8) + 24 * v354 + 16);
              goto LABEL_488;
            }
          }
          else
          {
            v374 = 1;
            while (v353 != (llvm::MachineBasicBlock *)-4096)
            {
              v375 = v352 + v374++;
              v352 = v375 & v351;
              v353 = *(llvm::MachineBasicBlock **)(v350 + 16 * v352);
              if (v353 == v505)
                goto LABEL_486;
            }
          }
        }
      }
      v355 = 0;
LABEL_488:
      v356 = *v301;
      LODWORD(v539) = v347;
      if (v498[21] <= llvm::BranchProbability::scale((llvm::BranchProbability *)&v539, v355))
        continue;
      v357 = v282[2];
      v358 = v502;
      if (v357 == *(_QWORD *)v502)
        v359 = v346;
      else
        v359 = *((unsigned int *)v282 + 6);
      if ((_DWORD)v359)
      {
        v360 = 8 * v359;
        v361 = (unint64_t *)v282[2];
        while (*v361 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v361;
          v360 -= 8;
          if (!v360)
            goto LABEL_570;
        }
      }
      else
      {
        v361 = (unint64_t *)v282[2];
      }
      v376 = (unint64_t *)(v357 + 8 * v359);
      if (v361 != v376)
      {
LABEL_535:
        v539 = 0;
        v377 = (_BYTE *)*v361;
        v539 = (uint64_t *)*v361;
        if (v536)
        {
          v378 = v536 - 1;
          v379 = ((v377 >> 4) ^ (v377 >> 9)) & (v536 - 1);
          v380 = (_QWORD *)(v534 + 16 * v379);
          v381 = *v380;
          if (v377 == (_BYTE *)*v380)
          {
            if (v379 != v536)
            {
LABEL_538:
              if (!*((_DWORD *)v380 + 2))
              {
                v382 = sub_1C50E486C((uint64_t)v532, (uint64_t *)&v539)[1];
                v383 = v550;
                if (v550 >= (unint64_t)HIDWORD(v550))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v549, (uint64_t)v551, v550 + 1, 8);
                  v383 = v550;
                }
                *((_QWORD *)v549 + v383) = v382;
                LODWORD(v550) = v550 + 1;
              }
            }
          }
          else
          {
            v389 = 1;
            v390 = (_BYTE *)*v380;
            v391 = ((v377 >> 4) ^ (v377 >> 9)) & v378;
            while (v390 != (_BYTE *)-4096)
            {
              v392 = v391 + v389++;
              v391 = v392 & v378;
              v390 = *(_BYTE **)(v534 + 16 * v391);
              if (v377 == v390)
              {
                if (v391 == v536)
                  break;
                v393 = 0;
                v394 = 1;
                while (v381 != -4096)
                {
                  if (v393)
                    v395 = 0;
                  else
                    v395 = v381 == -8192;
                  if (v395)
                    v393 = v380;
                  v396 = v379 + v394++;
                  v379 = v396 & v378;
                  v380 = (_QWORD *)(v534 + 16 * v379);
                  v381 = *v380;
                  v358 = v502;
                  if (v377 == (_BYTE *)*v380)
                    goto LABEL_538;
                }
                if (v393)
                  v399 = v393;
                else
                  v399 = v380;
                v380 = sub_1C50E44BC((uint64_t)&v534, (uint64_t)&v539, (uint64_t *)&v539, v399);
                *v380 = v539;
                *((_DWORD *)v380 + 2) = 0;
                v358 = v502;
                goto LABEL_538;
              }
            }
          }
          if (v536)
          {
            LODWORD(v384) = ((v539 >> 4) ^ (v539 >> 9)) & (v536 - 1);
            v385 = (uint64_t **)(v534 + 16 * v384);
            v386 = *v385;
            if (v539 == *v385)
            {
LABEL_544:
              *v385 = (uint64_t *)-8192;
              v535 = vadd_s32(v535, (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v397 = 1;
              while (v386 != (uint64_t *)-4096)
              {
                v398 = v384 + v397++;
                v384 = v398 & (v536 - 1);
                v386 = *(uint64_t **)(v534 + 16 * v384);
                if (v539 == v386)
                {
                  v385 = (uint64_t **)(v534 + 16 * v384);
                  goto LABEL_544;
                }
              }
            }
          }
        }
        v387 = v361 + 1;
        while (v387 != v376)
        {
          v388 = *v387++;
          if (v388 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v361 = v387 - 1;
            goto LABEL_535;
          }
        }
      }
LABEL_570:
      if (!v536)
      {
        v409 = 0;
        v403 = v505;
        v404 = v498;
        goto LABEL_584;
      }
      v400 = ((*v192 >> 4) ^ (*v192 >> 9)) & (v536 - 1);
      v401 = (_QWORD *)(v534 + 16 * v400);
      v402 = *v401;
      v403 = v505;
      v404 = v498;
      if (*v192 != *v401)
      {
        v405 = 0;
        v406 = 1;
        while (v402 != -4096)
        {
          if (v405)
            v407 = 0;
          else
            v407 = v402 == -8192;
          if (v407)
            v405 = v401;
          v408 = v400 + v406++;
          v400 = v408 & (v536 - 1);
          v401 = (_QWORD *)(v534 + 16 * v400);
          v402 = *v401;
          if (*v192 == *v401)
            goto LABEL_585;
        }
        if (v405)
          v409 = v405;
        else
          v409 = v401;
LABEL_584:
        v401 = sub_1C50E44BC((uint64_t)&v534, (uint64_t)v192, v192, v409);
        *v401 = *v192;
        *((_DWORD *)v401 + 2) = 0;
      }
LABEL_585:
      *((_DWORD *)v401 + 2) = v356;
      v410 = (void *)v282[2];
      if (v410 == *(void **)v358)
      {
LABEL_586:
        *((_DWORD *)v282 + 7) = 0;
        *((_DWORD *)v282 + 8) = 0;
        goto LABEL_587;
      }
      v425 = *((unsigned int *)v282 + 6);
      if (v425 < 0x21 || 4 * (*((_DWORD *)v282 + 7) - *((_DWORD *)v282 + 8)) >= v425)
      {
        memset(v410, 255, 8 * v425);
        goto LABEL_586;
      }
      free(*((void **)v358 + 1));
      v435 = *((_DWORD *)v358 + 5) - *((_DWORD *)v358 + 6);
      v436 = 1 << (33 - __clz(v435 - 1));
      *((_DWORD *)v358 + 5) = 0;
      *((_DWORD *)v358 + 6) = 0;
      if (v435 <= 0x10)
        v437 = 32;
      else
        v437 = v436;
      *((_DWORD *)v358 + 4) = v437;
      v438 = malloc_type_malloc(8 * v437, 0x4065EBACuLL);
      if (!v438)
        goto LABEL_756;
      *((_QWORD *)v358 + 1) = v438;
      memset(v438, 255, 8 * *((unsigned int *)v358 + 4));
LABEL_587:
      sub_1C4774094(v358, *v192);
      v411 = *(_QWORD *)(v508[66] + 248);
      if (v411)
      {
        v412 = *(_DWORD *)(v411 + 176);
        if (v412)
        {
          v413 = *(_QWORD *)(v411 + 160);
          v414 = v412 - 1;
          v415 = (v412 - 1) & ((v403 >> 4) ^ (v403 >> 9));
          v416 = *(llvm::MachineBasicBlock **)(v413 + 16 * v415);
          if (v416 == v403)
          {
LABEL_590:
            v417 = *(unsigned int *)(v413 + 16 * v415 + 8);
            if (v417 != 0xFFFFFFFFLL)
            {
              v411 = *(_QWORD *)(*(_QWORD *)(v411 + 8) + 24 * v417 + 16);
              goto LABEL_592;
            }
          }
          else
          {
            v422 = 1;
            while (v416 != (llvm::MachineBasicBlock *)-4096)
            {
              v423 = v415 + v422++;
              v415 = v423 & v414;
              v416 = *(llvm::MachineBasicBlock **)(v413 + 16 * v415);
              if (v416 == v403)
                goto LABEL_590;
            }
          }
        }
        v411 = 0;
      }
LABEL_592:
      v404[21] = v411;
LABEL_478:
      ;
    }
    while (v192 != v555);
LABEL_644:
    v440 = v534 + 16 * v536;
    if (v535.i32[0])
    {
      v441 = v508;
      if (v536)
      {
        v442 = 16 * v536;
        v443 = v534;
        while ((*(_QWORD *)v443 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v443 += 16;
          v442 -= 16;
          if (!v442)
          {
            v443 = v534 + 16 * v536;
            break;
          }
        }
      }
      else
      {
        v443 = v534;
      }
    }
    else
    {
      v443 = v534 + 16 * v536;
      v441 = v508;
    }
    v444 = v534 + 16 * v536;
LABEL_653:
    while (v443 != v444)
    {
      v445 = *(_DWORD *)(v443 + 8);
      if (v445)
      {
        v539 = **(uint64_t ***)v443;
        *((_DWORD *)sub_1C49D78CC((uint64_t)&v509, (uint64_t *)&v539) + 2) = v445;
      }
      v446 = v443 + 16;
      v443 = v440;
      if (v446 != v440)
      {
        v443 = v446;
        while ((*(_QWORD *)v443 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v443 += 16;
          if (v443 == v440)
          {
            v443 = v440;
            goto LABEL_653;
          }
        }
      }
    }
    v447 = (uint64_t)v544;
    if ((_DWORD)v546)
    {
      v448 = (void **)(v544 + 16);
      v449 = 176 * v546;
      do
      {
        v450 = (uint64_t)*(v448 - 2);
        if (v450 != -4096 && v450 != -8192 && *v448 != *(v448 - 1))
          free(*v448);
        v448 += 22;
        v449 -= 176;
      }
      while (v449);
    }
    MEMORY[0x1CAA32FB4](v447, 8);
    MEMORY[0x1CAA32FB4](v532[0], 8);
    MEMORY[0x1CAA32FB4](v534, 8);
    if (v555 != v557)
      free(v555);
    v451 = v441[58];
    v506 = v512;
    LODWORD(v555) = v512;
    v452 = sub_1C50E36C4((_QWORD *)(v451 + 352), (int *)&v555);
    v453 = (uint64_t)v504;
    if (v510 | v550
      && (llvm::LiveRange::MergeValueInAsValue(v452 + 3, v504, v500, *(_QWORD *)v452[11]), (_DWORD)v510))
    {
      v454 = v509;
      v455 = v511;
      v456 = v509 + 16 * v511;
      if (v511)
      {
        v457 = 0;
        while ((*(_QWORD *)(v509 + v457) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v457 += 16;
          if (16 * v511 == v457)
          {
            v458 = v509 + 16 * v511;
            goto LABEL_679;
          }
        }
        v458 = v509 + v457;
      }
      else
      {
        v455 = 0;
        v458 = v509;
      }
    }
    else
    {
      v454 = v509;
      v455 = v511;
      v458 = v509 + 16 * v511;
      v456 = v458;
    }
LABEL_679:
    v459 = (llvm::SmallPtrSetImplBase *)(v454 + 16 * v455);
    v503 = v459;
    while ((llvm::SmallPtrSetImplBase *)v458 != v459)
    {
      v460 = *(llvm::MachineBasicBlock **)v458;
      v461 = *(unsigned int *)(v458 + 8);
      v462 = sub_1C528CD90(v507, v453, *(llvm::MachineBasicBlock **)v458);
      sub_1C50E2A94(&v555, v462, (uint64_t)v460);
      v463 = *((unsigned int *)v460 + 6);
      v464 = v508[68];
      v465 = *(_QWORD *)(v464 + 16 * v463);
      if (v465 < 8 || *(_QWORD *)(v464 + 16 * v463 + 8) >= 8uLL)
        v465 = sub_1C528C724(v507, v453, v460);
      v544 = (_BYTE *)v465;
      LiveSubranges = llvm::LiveIntervals::getLiveSubranges(v508[57], v453, v508[63], &v544);
      (*(void (**)(_QWORD, llvm::MachineBasicBlock *, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v508[64] + 456))(v508[64], v460, v462, v461, 0, v506, *(_QWORD *)(*(_QWORD *)(v508[63] + 24) + 16 * (v461 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v508[65], LiveSubranges);
      v467 = v557[0];
      if ((void *)v557[0] == (char *)v555 + 48)
      {
        v468 = (uint64_t *)((char *)v555 + 56);
      }
      else
      {
        if (!v557[0] || (*(_BYTE *)v557[0] & 4) == 0)
        {
          while ((*(_WORD *)(v467 + 44) & 8) != 0)
            v467 = *(_QWORD *)(v467 + 8);
        }
        v468 = (uint64_t *)(v467 + 8);
      }
      sub_1C50E3E24(v508[57], *v468, v462);
      v469 = v557[0];
      if ((void *)v557[0] == (char *)v555 + 48)
      {
        v470 = (uint64_t *)((char *)v555 + 56);
      }
      else
      {
        if (!v557[0] || (*(_BYTE *)v557[0] & 4) == 0)
        {
          while ((*(_WORD *)(v469 + 44) & 8) != 0)
            v469 = *(_QWORD *)(v469 + 8);
        }
        v470 = (uint64_t *)(v469 + 8);
      }
      for (i = *v470; i != v462; i = *(_QWORD *)(i + 8))
      {
        v472 = *(unsigned int *)(i + 40);
        if ((_DWORD)v472)
        {
          v473 = v508[57];
          v474 = 32 * v472;
          v475 = (int *)(*(_QWORD *)(i + 32) + 4);
          do
          {
            if ((*(v475 - 1) & 0x10000FF) == 0x1000000)
            {
              v476 = *v475;
              if (*v475 < 0
                && ((v476 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v473 + 416)
                 || !*(_QWORD *)(*(_QWORD *)(v473 + 408) + 8 * (v476 & 0x7FFFFFFF))))
              {
                v501 = (llvm::LiveInterval *)sub_1C4851220(v473, v476);
                v499 = *(_QWORD *)(v473 + 304);
                v477 = *(_QWORD *)(v473 + 248);
                *(_QWORD *)v499 = v477;
                *(_QWORD *)(v499 + 8) = *(_QWORD *)(v477 + 40);
                *(_OWORD *)(v499 + 16) = *(_OWORD *)(v473 + 288);
                *(_QWORD *)(v499 + 32) = v473 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v499);
                *(_DWORD *)(v499 + 184) = 0;
                v478 = *(_QWORD *)(v473 + 256);
                v26 = *(_BYTE *)(v478 + 16) == 0;
                v479 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v478 + 24)
                                                       + 16 * (*((_DWORD *)v501 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 34);
                v481 = !v26 && v479 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v473 + 304), v501, v481);
                llvm::LiveIntervals::computeDeadValues(v473, (uint64_t)v501, 0);
              }
            }
            v475 += 8;
            v474 -= 32;
          }
          while (v474);
          if (!i)
            goto LABEL_721;
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
LABEL_721:
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v482 = v458 + 16;
      v458 = v456;
      v453 = (uint64_t)v504;
      if (v482 != v456)
      {
        v458 = v482;
        while ((*(_QWORD *)v458 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v458 += 16;
          if (v458 == v456)
          {
            v458 = v456;
            break;
          }
        }
      }
      v459 = v503;
    }
    v38 = v508;
    v39 = v497;
    if ((_DWORD)v550)
    {
      v483 = (uint64_t *)v549;
      v484 = (uint64_t *)((char *)v549 + 8 * v550);
      do
      {
        v485 = *v483;
        *(_QWORD *)(v485 + 16) = *(_QWORD *)(v508[64] + 8) + 336;
        v486 = *(_DWORD *)(v485 + 40);
        if (v486)
        {
          v487 = v486 - 1;
          v488 = 32 * (v486 - 1);
          do
          {
            v489 = *(_DWORD *)(*(_QWORD *)(v485 + 32) + v488);
            v490 = v489 & 0x30000FF;
            v491 = v489 & 0x5000000;
            if (v490 == 50331648 && v491 != 83886080)
              llvm::MachineInstr::removeOperand(v485, v487);
            --v487;
            v488 -= 32;
          }
          while (v487 != -1);
        }
        ++v483;
      }
      while (v483 != v484);
    }
    llvm::LiveRangeEdit::eliminateDeadDefs(v513, (uint64_t)&v549, 0, 0, (llvm::AAResults *)v508[59]);
    MEMORY[0x1CAA32FB4](v509, 8);
    if (v549 != v551)
      free(v549);
    v41 = (uint64_t)(v508 + 86);
    v40 = v496;
LABEL_743:
    v39 += 44;
  }
  while (v39 != v40);
LABEL_749:
  v513[0] = (uint64_t)&off_1E8143478;
  *(_QWORD *)(v514 + 8) = 0;
  if (v528 != v527)
    free(v528);
  if (v523 != v522)
    free(v523);
  if (v552 != v554)
    free(v552);
}

uint64_t sub_1C50E0D90(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E8142E78;
  sub_1C50E0F60(a1 + 320);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v4 = (void **)(a1 + 296);
  sub_1C50E0FD4(&v4);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 272), 8);
  sub_1C50E104C((uint64_t *)(a1 + 248));
  v2 = *(void **)(a1 + 104);
  if (v2 != (void *)(a1 + 120))
    free(v2);
  return a1;
}

void sub_1C50E0E10(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E8142E78;
  sub_1C50E0F60(a1 + 320);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v3 = (void **)(a1 + 296);
  sub_1C50E0FD4(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 272), 8);
  sub_1C50E104C((uint64_t *)(a1 + 248));
  v2 = *(void **)(a1 + 104);
  if (v2 != (void *)(a1 + 120))
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50E0EA4()
{
  return 1;
}

double sub_1C50E0EB0(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  int v8;
  double result;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  _OWORD v14[2];
  _QWORD v15[4];

  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v5 + 280);
  if (*(_DWORD *)(v7 + 4 * (a3 & 0x7FFFFFFF)))
  {
    v8 = (unsigned __int16)*(_DWORD *)(v7 + 4 * (a3 & 0x7FFFFFFF));
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 304);
    v8 = *(_DWORD *)(v7 + 4 * (a3 & 0x7FFFFFFF));
  }
  *(_DWORD *)(v7 + 4 * (a2 & 0x7FFFFFFF)) = v8;
  *(_QWORD *)&result = sub_1C50E120C(v5, a3, v15).n128_u64[0];
  if (v15[0])
    v10 = v15[1] == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 56);
    sub_1C50E120C(v11, a3, v14);
    LODWORD(v15[0]) = a2;
    v12 = sub_1C61DFD04((uint64_t *)(v11 + 352), v15);
    result = *(double *)v14;
    v13 = v14[1];
    *(_OWORD *)(v12 + 2) = v14[0];
    *(_OWORD *)(v12 + 6) = v13;
  }
  return result;
}

void sub_1C50E0F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)a1 + 96;
    v3 = 160 * v1;
    do
    {
      if (*(_DWORD *)(v2 - 96) <= 0xFFFFFFFD)
      {
        v4 = *(void **)(v2 - 16);
        if ((void *)v2 != v4)
          free(v4);
        if ((*(_BYTE *)(v2 - 88) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 - 80), 4);
      }
      v2 += 160;
      v3 -= 160;
    }
    while (v3);
  }
}

void sub_1C50E0FD4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 19);
        if (v6 != *((void **)v4 - 20))
          free(v6);
        v4 -= 176;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C50E104C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v6 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*((_DWORD *)v6 - 2) - 0x7FFFFFFF) >= 2)
        sub_1C50E10CC(v6, 0);
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t *sub_1C50E10CC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 104);
    if (v3)
    {
      do
      {
        v8 = *(_QWORD *)(v3 + 96);
        v9 = *(_QWORD *)(v3 + 104);
        *(_QWORD *)(v3 + 96) = 0;
        if (v8)
        {
          v11 = v3;
          v6 = v8;
          sub_1C47655E8(v8, *(_QWORD **)(v8 + 8));
          v7 = v6;
          v3 = v11;
          MEMORY[0x1CAA32FC0](v7, 0x1020C4062D53EE8);
        }
        v10 = *(void **)(v3 + 64);
        if (v10 != (void *)(v3 + 80))
          free(v10);
        if (*(_QWORD *)v3 != v3 + 16)
          free(*(void **)v3);
        v3 = v9;
      }
      while (v9);
    }
    v4 = *(_QWORD *)(v2 + 96);
    *(_QWORD *)(v2 + 96) = 0;
    *(_QWORD *)(v2 + 104) = 0;
    if (v4)
    {
      sub_1C47655E8(v4, *(_QWORD **)(v4 + 8));
      MEMORY[0x1CAA32FC0](v4, 0x1020C4062D53EE8);
    }
    v5 = *(void **)(v2 + 64);
    if (v5 != (void *)(v2 + 80))
      free(v5);
    if (*(_QWORD *)v2 != v2 + 16)
      free(*(void **)v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

__n128 sub_1C50E120C@<Q0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  int v11;
  unsigned int v12;

  v3 = *(_DWORD *)(a1 + 368);
  if (!v3)
  {
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = -1;
    a3[3] = -1;
    return result;
  }
  v4 = *(_QWORD *)(a1 + 352);
  v5 = v3 - 1;
  v6 = (v3 - 1) & (37 * a2);
  v7 = *(_DWORD *)(v4 + 40 * v6);
  if (v7 != a2)
  {
    v11 = 1;
    while (v7 != -1)
    {
      v12 = v6 + v11++;
      v6 = v12 & v5;
      v7 = *(_DWORD *)(v4 + 40 * v6);
      if (v7 == a2)
        goto LABEL_4;
    }
    goto LABEL_2;
  }
LABEL_4:
  v8 = v4 + 40 * v6;
  result = *(__n128 *)(v8 + 8);
  v10 = *(_OWORD *)(v8 + 24);
  *(__n128 *)a3 = result;
  *((_OWORD *)a3 + 1) = v10;
  return result;
}

_DWORD *sub_1C50E1294(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61DFEC0(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -1;
      result += 10;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C50E1358(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (*(_DWORD *)(a2 + 72) > 2u)
    return 0;
  v3 = *(unint64_t **)a2;
  v4 = **(_QWORD **)a2;
  if ((v4 & 6) == 0)
    return 0;
  v5 = v3[3 * *(unsigned int *)(a2 + 8) - 2];
  if ((v5 & 6) == 0)
    return 0;
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 112);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = sub_1C499C548(*(_QWORD *)(v8 + 288), v4);
  v10 = sub_1C499C548(*(_QWORD *)(v8 + 288), v5);
  v11 = v9 && v9 == v10;
  if (!v11)
    return 0;
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(unsigned int *)(a2 + 112);
  if ((v14 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v14);
  v16 = *v15;
  if (*v15)
  {
    while ((*(_DWORD *)v16 & 0x80000000) != 0)
    {
      v16 = *(_QWORD *)(v16 + 24);
      if (!v16)
        return 1;
    }
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(v16 + 8);
      do
        v16 = *(_QWORD *)(v16 + 24);
      while (v16 && ((*(_DWORD *)v16 & 0x80000000) != 0 || *(_QWORD *)(v16 + 8) == v18));
      if (**(_WORD **)(v18 + 16) != 19
        || (v19 = *(_DWORD **)(v18 + 32), (*v19 & 0xFFF00) != 0)
        || (v19[8] & 0xFFF00) != 0
        || (v22 = v19[1], v23 = v19[9], v22 != v7) && (v11 = v23 == v7, v23 = v22, !v11)
        || !v23)
      {
        v24 = 0;
        v20 = *(_DWORD *)(a2 + 112);
        if (v20 != (*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), v18, &v24)|| v24 != *(_DWORD *)(a1 + 112))
        {
          v21 = *(_DWORD *)(a2 + 112);
          if (v21 != (*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 72) + 96))(*(_QWORD *)(a1 + 72), v18, &v24)|| v24 != *(_DWORD *)(a1 + 112))
          {
            if (v17)
            {
              v11 = v18 == v17;
              v17 = v18;
              if (!v11)
                return 0;
            }
            else
            {
              v17 = v18;
            }
          }
        }
      }
    }
    while (v16);
  }
  return 1;
}

void sub_1C50E154C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  llvm::LiveInterval *v39;
  unint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  char *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD v64[18];

  v64[16] = *MEMORY[0x1E0C80C00];
  v61 = (char *)v64;
  v63 = 8;
  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 33);
  v5 = (uint64_t)(a1 + 21);
  v64[0] = a2;
  v64[1] = a3;
  v6 = 1;
  do
  {
    while (1)
    {
      v7 = &v61[16 * v6];
      v8 = *((_QWORD *)v7 - 2);
      v9 = *((_QWORD *)v7 - 1);
      v62 = v6 - 1;
      sub_1C4774094(v4, v9);
      if (v10)
        break;
LABEL_45:
      v6 = v62;
      if (!v62)
        goto LABEL_64;
    }
    v11 = *(_QWORD *)(v9 + 8);
    if ((v11 & 6) == 0)
    {
      v13 = sub_1C499C548(*(_QWORD *)(a1[2] + 288), v11);
      v14 = *(_QWORD *)(v13 + 64);
      v15 = *(_QWORD *)(v13 + 72);
      while (1)
      {
        if (v14 == v15)
          goto LABEL_45;
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] + 288) + 392)
                        + 16 * *(unsigned int *)(*(_QWORD *)v14 + 24)
                        + 8);
        v17 = (v16 >> 1) & 3;
        v18 = v16 & 0xFFFFFFFFFFFFFFF8;
        v19 = v17 ? v18 | (2 * (v17 - 1)) : *(_QWORD *)v18 | 6;
        v20 = *(_DWORD *)(v8 + 8);
        v21 = *(_QWORD **)v8;
        if (!v20)
          break;
        v22 = v21[3 * v20 - 2];
        v23 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3;
        v24 = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
        v25 = *(_QWORD **)v8;
        v26 = *(unsigned int *)(v8 + 8);
        if (v23 >= v24)
          goto LABEL_20;
        do
        {
          v27 = v26 >> 1;
          v28 = v25[3 * (v26 >> 1) + 1];
          LODWORD(v28) = (v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24);
          v26 -= (v26 >> 1) + 1;
          v29 = v23 >= v28;
          if (v23 >= v28)
            v30 = v27 + 1;
          else
            v30 = 0;
          v25 += 3 * v30;
          if (!v29)
            v26 = v27;
        }
        while (v26);
LABEL_21:
        if (v25 != &v21[3 * v20]
          && ((*v25 >> 1) & 3 | *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3))
        {
          v31 = v25[2];
          if (v31)
          {
            v32 = v62;
            if (v62 >= (unint64_t)v63)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v64, v62 + 1, 16);
              v32 = v62;
            }
            v33 = &v61[16 * v32];
            *(_QWORD *)v33 = v8;
            *((_QWORD *)v33 + 1) = v31;
            ++v62;
          }
        }
        v14 += 8;
      }
      v20 = 0;
LABEL_20:
      v25 = &v21[3 * v20];
      goto LABEL_21;
    }
    if (v11 < 8)
      v12 = 0;
    else
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    v34 = sub_1C477672C(v5, v12);
    v35 = a1[22];
    if (v35 == a1[21])
      v36 = 188;
    else
      v36 = 184;
    if (v34 == (_QWORD *)(v35 + 8 * *(unsigned int *)((char *)a1 + v36)))
      goto LABEL_45;
    v37 = a1[2];
    v38 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 36);
    if ((v38 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v37 + 416)
      || (v39 = *(llvm::LiveInterval **)(*(_QWORD *)(v37 + 408) + 8 * (v38 & 0x7FFFFFFF))) == 0)
    {
      v39 = (llvm::LiveInterval *)sub_1C4851220(a1[2], v38);
      v55 = *(_QWORD *)(v37 + 304);
      v56 = *(_QWORD *)(v37 + 248);
      *(_QWORD *)v55 = v56;
      *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 40);
      *(_OWORD *)(v55 + 16) = *(_OWORD *)(v37 + 288);
      *(_QWORD *)(v55 + 32) = v37 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v55);
      *(_DWORD *)(v55 + 184) = 0;
      v57 = *(_QWORD *)(v37 + 256);
      v59 = *(_BYTE *)(v57 + 16) == 0;
      v58 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v57 + 24) + 16 * (*((_DWORD *)v39 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v59 = v59 || v58 == 0;
      v60 = !v59;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v37 + 304), v39, v60);
      llvm::LiveIntervals::computeDeadValues(v37, (uint64_t)v39, 0);
    }
    v40 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
    v41 = *((_DWORD *)v39 + 2);
    v42 = *(_QWORD **)v39;
    if (!v41)
    {
      v41 = 0;
LABEL_48:
      v46 = &v42[3 * v41];
      goto LABEL_49;
    }
    v43 = v42[3 * v41 - 2];
    v44 = *(_DWORD *)(v40 + 24) | 1;
    v45 = (v43 >> 1) & 3 | *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24);
    v46 = *(_QWORD **)v39;
    v47 = *((unsigned int *)v39 + 2);
    if (v44 >= v45)
      goto LABEL_48;
    do
    {
      v48 = v47 >> 1;
      v49 = v46[3 * (v47 >> 1) + 1];
      LODWORD(v49) = (v49 >> 1) & 3 | *(_DWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 24);
      v47 -= (v47 >> 1) + 1;
      v50 = v44 >= v49;
      if (v44 >= v49)
        v51 = v48 + 1;
      else
        v51 = 0;
      v46 += 3 * v51;
      if (!v50)
        v47 = v48;
    }
    while (v47);
LABEL_49:
    if (v46 == &v42[3 * v41]
      || ((*v46 >> 1) & 3 | *(_DWORD *)((*v46 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v40 + 24) | 1u))
    {
      v52 = 0;
    }
    else
    {
      v52 = v46[2];
    }
    v53 = v62;
    if (v62 >= (unint64_t)v63)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v64, v62 + 1, 16);
      v53 = v62;
    }
    v54 = &v61[16 * v53];
    *(_QWORD *)v54 = v39;
    *((_QWORD *)v54 + 1) = v52;
    v6 = v62 + 1;
    v62 = v6;
  }
  while (v6);
LABEL_64:
  if (v61 != (char *)v64)
    free(v61);
}

BOOL sub_1C50E19A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BOOL8 v7;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int TiedOperandIdx;
  unsigned int v31;
  unsigned int *v32;
  _DWORD *v33;
  unsigned int v35;
  uint64_t v36;
  int v37;
  llvm::LiveInterval *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int16 v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned __int16 *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  llvm::MachineInstr *v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  _BYTE v126[48];
  void *v127;
  uint64_t v128;
  _QWORD v129[6];

  v129[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)(a2 + 16 * a3 - 16) != *(_QWORD *)a2 || (*(_WORD *)(v6 + 44) & 0xC) != 0)
    return 0;
  v117 = **(unsigned __int16 **)(v6 + 16);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 488))(*(_QWORD *)(a1 + 72)) & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v12 = **(unsigned __int16 **)(v6 + 16);
    v13 = v12 > 0x1F;
    v14 = (0x8A000000 >> v12) & 1;
    if (v13)
      v11 = 0;
    else
      v11 = v14;
  }
  v15 = 0;
  v118 = 0;
  v16 = v129;
  v127 = v129;
  v128 = 0x800000000;
  v17 = 16 * a3;
  v18 = (unsigned int *)(a2 + 8);
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    v21 = *(_QWORD *)(v6 + 32);
    v22 = *(_DWORD *)(v21 + 32 * v20);
    if ((v22 & 0x2000000) != 0)
    {
      v118 = *(_DWORD *)(v21 + 32 * v19 + 4);
    }
    else
    {
      if ((((v22 & 0xFFF00) != 0) & ~v11) != 0 || a4 && (v22 & 0x1000000) != 0)
        goto LABEL_42;
      if (v117 == 31 || ((v23 = v22 & 0x10000FF, v24 = v22 & 0xF00000, !v23) ? (v25 = v24 == 0) : (v25 = 1), v25))
      {
        if (v15 >= HIDWORD(v128))
        {
          v114 = v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v16, v15 + 1, 4);
          v16 = v114;
          v15 = v128;
        }
        *((_DWORD *)v127 + v15) = v19;
        v15 = v128 + 1;
        LODWORD(v128) = v128 + 1;
      }
    }
    v17 -= 16;
  }
  while (v17);
  if (v15)
  {
    v115 = v16;
    sub_1C50E2A94(&v121, v6, *(_QWORD *)(v6 + 24));
    v124 = v126;
    v125 = 0x600000000;
    if (v117 == 31 && (_DWORD)v128)
    {
      v26 = (unsigned int *)v127;
      v27 = 4 * v128;
      do
      {
        v120 = *v26;
        v28 = v120;
        v29 = *(_QWORD *)(v6 + 32) + 32 * v120;
        if ((*(_BYTE *)(v29 + 2) & 0xF0) != 0)
        {
          TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v6, v120);
          v119 = TiedOperandIdx;
          if ((*(_BYTE *)(v29 + 3) & 1) != 0)
          {
            v32 = &v119;
            v31 = v28;
          }
          else
          {
            v31 = TiedOperandIdx;
            v32 = &v120;
          }
          sub_1C61DFF7C((uint64_t)&v124, v31, v32);
          v33 = (_DWORD *)(*(_QWORD *)(v6 + 32) + 32 * v28);
          if (!*v33 && (*v33 & 0xF00000) != 0)
          {
            v35 = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v6, v28);
            *(_DWORD *)(*(_QWORD *)(v6 + 32) + 32 * v35) &= 0xFF0FFFFF;
            *v33 &= 0xFF0FFFFF;
          }
        }
        ++v26;
        v27 -= 4;
      }
      while (v27);
    }
    v36 = *(_QWORD *)(a1 + 16);
    v37 = *(_DWORD *)(a1 + 116);
    if ((v37 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v36 + 416)
      || (v38 = *(llvm::LiveInterval **)(*(_QWORD *)(v36 + 408) + 8 * (v37 & 0x7FFFFFFF))) == 0)
    {
      v38 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 16), v37);
      v102 = *(_QWORD *)(v36 + 304);
      v103 = *(_QWORD *)(v36 + 248);
      *(_QWORD *)v102 = v103;
      *(_QWORD *)(v102 + 8) = *(_QWORD *)(v103 + 40);
      *(_OWORD *)(v102 + 16) = *(_OWORD *)(v36 + 288);
      *(_QWORD *)(v102 + 32) = v36 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v102);
      *(_DWORD *)(v102 + 184) = 0;
      v104 = *(_QWORD *)(v36 + 256);
      v25 = *(_BYTE *)(v104 + 16) == 0;
      v105 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v104 + 24) + 16 * (*((_DWORD *)v38 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v107 = !v25 && v105 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v36 + 304), v38, v107);
      llvm::LiveIntervals::computeDeadValues(v36, (uint64_t)v38, 0);
    }
    v39 = *(_QWORD **)(a1 + 72);
    if (a4)
      v40 = llvm::TargetInstrInfo::foldMemoryOperand(v39, (uint64_t *)v6, (__int32 *)v127, v128, a4, *(_QWORD *)(a1 + 16));
    else
      v40 = llvm::TargetInstrInfo::foldMemoryOperand(v39, v6, (__int32 *)v127, v128, *(_DWORD *)(a1 + 112), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), (uint64_t)v38);
    v7 = v40 != 0;
    if (v40)
    {
      v116 = (llvm::MachineInstr *)v40;
      v41 = v6;
      if ((*(_WORD *)(v6 + 44) & 4) != 0)
      {
        v41 = v6;
        do
          v41 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v41 + 44) & 4) != 0);
      }
      v42 = *(_QWORD *)(v6 + 24) + 48;
      v43 = *(_DWORD **)(v41 + 32);
      v44 = *(unsigned int *)(v41 + 40);
      v45 = &v43[8 * v44];
      if (!(_DWORD)v44)
      {
        v101 = *(_QWORD *)(v41 + 8);
        if (v101 == v42)
        {
          v41 = *(_QWORD *)(v6 + 24) + 48;
          goto LABEL_51;
        }
        v41 = *(_QWORD *)(v6 + 24) + 48;
        if ((*(_WORD *)(v101 + 44) & 4) != 0)
        {
          while (1)
          {
            v111 = v101;
            v112 = *(unsigned int *)(v101 + 40);
            if ((_DWORD)v112)
              break;
            v101 = *(_QWORD *)(v101 + 8);
            if (v101 == v42 || (*(_WORD *)(v101 + 44) & 4) == 0)
            {
              v113 = *(_QWORD *)(v6 + 24) + 48;
              goto LABEL_196;
            }
          }
          v113 = v101;
LABEL_196:
          v43 = *(_DWORD **)(v111 + 32);
          v45 = &v43[8 * v112];
          v41 = v113;
          goto LABEL_51;
        }
      }
      while (1)
      {
LABEL_51:
        if (v43 == v45)
        {
LABEL_87:
          v120 = 0;
          if ((*(unsigned int (**)(_QWORD, uint64_t, unsigned int *))(**(_QWORD **)(a1 + 72) + 96))(*(_QWORD *)(a1 + 72), v6, &v120))
          {
            sub_1C50E2420(a1 + 440, v6, v120);
          }
          sub_1C49FB860(*(int32x2_t **)(*(_QWORD *)(a1 + 16) + 288), v6, (uint64_t)v116);
          v68 = *(unsigned __int16 **)(v6 + 16);
          if ((v68[4] & 0x80) != 0)
          {
            v108 = *v68;
            v13 = v108 > 0x1F;
            v109 = (1 << v108) & 0x8E000000;
            if (v13 || v109 == 0)
              llvm::MachineFunction::moveCallSiteInfo(*(llvm::MachineFunction **)(*(_QWORD *)(v6 + 24) + 32), (const llvm::MachineInstr *)v6, v116);
          }
          v69 = *(_DWORD *)(v6 + 64);
          v70 = (uint64_t)v116;
          if (v69)
          {
            v71 = *(_DWORD *)(a2 + 8);
            if (v71)
            {
              llvm::MachineFunction::substituteDebugValuesForInst(*(_QWORD *)(a1 + 8), (const llvm::MachineInstr *)v6, v116, v71);
            }
            else
            {
              v91 = *(_QWORD *)(v6 + 32);
              if (a3 == 2)
              {
                if ((*(_BYTE *)(v91 + 3) & 1) != 0
                  && (*(_BYTE *)(v91 + 34) & 0xF0) != 0
                  && *(_DWORD *)(v91 + 4) == *(_DWORD *)(v91 + 36))
                {
                  v95 = *((_DWORD *)v116 + 16);
                  if (!v95)
                  {
                    v96 = *(_QWORD *)(*((_QWORD *)v116 + 3) + 32);
                    v95 = *(_DWORD *)(v96 + 912) + 1;
                    *(_DWORD *)(v96 + 912) = v95;
                    *((_DWORD *)v116 + 16) = v95;
                    v69 = *(_DWORD *)(v6 + 64);
                    if (!v69)
                    {
                      v97 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 32);
                      v69 = *(_DWORD *)(v97 + 912) + 1;
                      *(_DWORD *)(v97 + 912) = v69;
                      *(_DWORD *)(v6 + 64) = v69;
                    }
                  }
                  llvm::MachineFunction::makeDebugValueSubstitution(*(_QWORD *)(a1 + 8), v69, v95 | 0xF424000000000, 0);
                  v70 = (uint64_t)v116;
                }
              }
              else if (a3 == 1 && (*(_BYTE *)(v91 + 3) & 1) != 0)
              {
                v92 = *((_DWORD *)v116 + 16);
                if (!v92)
                {
                  v93 = *(_QWORD *)(*((_QWORD *)v116 + 3) + 32);
                  v92 = *(_DWORD *)(v93 + 912) + 1;
                  *(_DWORD *)(v93 + 912) = v92;
                  *((_DWORD *)v116 + 16) = v92;
                  v69 = *(_DWORD *)(v6 + 64);
                  if (!v69)
                  {
                    v94 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 32);
                    v69 = *(_DWORD *)(v94 + 912) + 1;
                    *(_DWORD *)(v94 + 912) = v69;
                    *(_DWORD *)(v6 + 64) = v69;
                  }
                  v70 = (uint64_t)v116;
                }
                llvm::MachineFunction::makeDebugValueSubstitution(*(_QWORD *)(a1 + 8), v69, v92 | 0xF424000000000, 0);
              }
            }
          }
          v72 = v6;
          if ((*(_BYTE *)v6 & 4) == 0)
          {
            v72 = v6;
            if ((*(_WORD *)(v6 + 44) & 8) != 0)
            {
              v72 = v6;
              do
                v72 = *(_QWORD *)(v72 + 8);
              while ((*(_WORD *)(v72 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v6 + 24) + 40, v6, *(_QWORD *)(v72 + 8));
          v73 = v122;
          if (v122 == (_BYTE *)(v121 + 48))
          {
            v74 = (uint64_t *)(v121 + 56);
          }
          else
          {
            if (!v122 || (*v122 & 4) == 0)
            {
              while ((*((_WORD *)v73 + 22) & 8) != 0)
                v73 = (_BYTE *)*((_QWORD *)v73 + 1);
            }
            v74 = (uint64_t *)(v73 + 8);
          }
          v84 = *v74;
          v85 = v123;
          while (v84 != v85)
          {
            if (v84 != v70)
              sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 288), v84, 0);
            if (!v84 || (*(_BYTE *)v84 & 4) == 0)
            {
              while ((*(_WORD *)(v84 + 44) & 8) != 0)
                v84 = *(_QWORD *)(v84 + 8);
            }
            v84 = *(_QWORD *)(v84 + 8);
          }
          if (v118)
          {
            v86 = *(_DWORD *)(v70 + 40);
            if (v86)
            {
              v87 = v86 - 1;
              do
              {
                v88 = *(_QWORD *)(v70 + 32);
                if ((*(_DWORD *)(v88 + 32 * v87) & 0x20000FF) != 0x2000000)
                  break;
                if (*(_DWORD *)(v88 + 32 * v87 + 4) == v118)
                  llvm::MachineInstr::removeOperand(v70, v87);
                --v87;
              }
              while (v87 != -1);
            }
          }
          if (v117 == 19 && !*(_DWORD *)(a2 + 8))
          {
            v89 = v122;
            if (v122 == (_BYTE *)(v121 + 48))
            {
              v90 = (uint64_t *)(v121 + 56);
            }
            else
            {
              if (!v122 || (*v122 & 4) == 0)
              {
                while ((*((_WORD *)v89 + 22) & 8) != 0)
                  v89 = (_BYTE *)*((_QWORD *)v89 + 1);
              }
              v90 = (uint64_t *)(v89 + 8);
            }
            v98 = *v90;
            if (v98 == v123)
              goto LABEL_163;
            v99 = 0;
            do
            {
              v100 = v99;
              if (!v98 || (*(_BYTE *)v98 & 4) == 0)
              {
                while ((*(_WORD *)(v98 + 44) & 8) != 0)
                  v98 = *(_QWORD *)(v98 + 8);
              }
              ++v99;
              v98 = *(_QWORD *)(v98 + 8);
            }
            while (v98 != v123);
            if (!v100)
LABEL_163:
              sub_1C50E2698(a1 + 440, v70, *(_DWORD *)(a1 + 112), *(_DWORD *)(a1 + 116));
          }
          goto LABEL_164;
        }
        if (!*v43)
        {
          v49 = v43[1];
          if ((int)v49 >= 1
            && (*v43 & 0x1000000) != 0
            && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 352) + ((v49 >> 3) & 0x1FFFFFF8)) & (1 << v49)) == 0)
          {
            v50 = v41;
            v51 = llvm::AnalyzePhysRegInBundle((unint64_t)v116, v43[1], *(_QWORD *)(a1 + 80));
            v41 = v50;
            if ((v51 & 0x10000) == 0)
              break;
          }
        }
LABEL_53:
        v43 += 8;
        if (v43 == v45)
        {
          v46 = *(_QWORD *)(v41 + 8);
          if (v46 == v42)
            goto LABEL_87;
          v43 = v45;
          v41 = v42;
          if ((*(_WORD *)(v46 + 44) & 4) != 0)
          {
            while (1)
            {
              v47 = v46;
              v48 = *(unsigned int *)(v46 + 40);
              if ((_DWORD)v48)
                break;
              v46 = *(_QWORD *)(v46 + 8);
              if (v46 == v42 || (*(_WORD *)(v46 + 44) & 4) == 0)
              {
                v41 = v42;
                goto LABEL_80;
              }
            }
            v41 = v46;
LABEL_80:
            v43 = *(_DWORD **)(v47 + 32);
            v45 = &v43[8 * v48];
          }
        }
      }
      v52 = *(_WORD *)(v6 + 44);
      v53 = v6;
      if ((v52 & 4) != 0)
      {
        do
          v53 = *(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v53 + 44) & 4) != 0);
      }
      v54 = v6;
      if ((v52 & 8) != 0)
      {
        do
          v54 = *(_QWORD *)(v54 + 8);
        while ((*(_WORD *)(v54 + 44) & 8) != 0);
      }
      v55 = *(_QWORD *)(v54 + 8);
      if (v53 != v55)
      {
        while (1)
        {
          v56 = **(unsigned __int16 **)(v53 + 16);
          v13 = v56 > 0x17;
          v57 = (1 << v56) & 0x83E000;
          if (v13 || v57 == 0)
            break;
          v53 = *(_QWORD *)(v53 + 8);
          if (v53 == v55)
          {
            v53 = v55;
            break;
          }
        }
      }
      v59 = *(_QWORD **)(a1 + 16);
      v60 = v59[36];
      v61 = *(_QWORD *)(v60 + 368);
      v62 = *(unsigned int *)(v60 + 384);
      if ((_DWORD)v62)
      {
        LODWORD(v63) = ((v53 >> 4) ^ (v53 >> 9)) & (v62 - 1);
        v64 = (uint64_t *)(v61 + 16 * v63);
        v65 = *v64;
        if (v53 == *v64)
        {
LABEL_82:
          llvm::LiveIntervals::removePhysRegDefAt(v59, v49, v64[1] & 0xFFFFFFFFFFFFFFF8 | 4);
          v41 = v50;
          goto LABEL_53;
        }
        v66 = 1;
        while (v65 != -4096)
        {
          v67 = v63 + v66++;
          v63 = v67 & (v62 - 1);
          v65 = *(_QWORD *)(v61 + 16 * v63);
          if (v53 == v65)
          {
            v64 = (uint64_t *)(v61 + 16 * v63);
            goto LABEL_82;
          }
        }
      }
      v64 = (uint64_t *)(v61 + 16 * v62);
      goto LABEL_82;
    }
    if ((_DWORD)v125)
    {
      v75 = (char *)v124;
      v76 = (char *)v124 + 8 * v125;
      do
      {
        v77 = *(unsigned int *)v75;
        v78 = *((unsigned int *)v75 + 1);
        v75 += 8;
        v79 = *(_QWORD *)(v6 + 32);
        v80 = (unsigned int *)(v79 + 32 * v78);
        v81 = *v80 & 0xFF0FFFFF | ((((((_DWORD)v77 << 20) + 0x100000) >> 20) & 0xF) << 20);
        if (v77 > 0xE)
          v81 = *v80 | 0xF00000;
        v82 = 32 * v77;
        *v80 = v81;
        if ((v78 + 1) < 0xF)
          v83 = v78 + 1;
        else
          v83 = 15;
        *(_DWORD *)(v79 + v82) = *(_DWORD *)(v79 + v82) & 0xFF0FFFFF | (v83 << 20);
      }
      while (v75 != v76);
    }
LABEL_164:
    if (v124 != v126)
      free(v124);
    v16 = v115;
  }
  else
  {
LABEL_42:
    v7 = 0;
  }
  if (v127 != v16)
    free(v127);
  return v7;
}

_QWORD *sub_1C50E2420(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  __int128 v41;

  v6 = *(_QWORD *)(a1 + 248);
  v7 = *(unsigned int *)(a1 + 264);
  result = sub_1C50E2B00(v6, v7, a3);
  if ((_QWORD *)(v6 + 16 * v7) == result)
    return result;
  v9 = *(_WORD *)(a2 + 44);
  v10 = a2;
  if ((v9 & 4) != 0)
  {
    v10 = a2;
    do
      v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v10 + 44) & 4) != 0);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288);
  v12 = a2;
  if ((v9 & 8) != 0)
  {
    v12 = a2;
    do
      v12 = *(_QWORD *)(v12 + 8);
    while ((*(_WORD *)(v12 + 44) & 8) != 0);
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (v10 != v13)
  {
    while (1)
    {
      v14 = **(unsigned __int16 **)(v10 + 16);
      v15 = v14 > 0x17;
      v16 = (1 << v14) & 0x83E000;
      if (v15 || v16 == 0)
        break;
      v10 = *(_QWORD *)(v10 + 8);
      if (v10 == v13)
      {
        v10 = *(_QWORD *)(v12 + 8);
        break;
      }
    }
  }
  v18 = *(_QWORD *)(v11 + 368);
  v19 = *(unsigned int *)(v11 + 384);
  if ((_DWORD)v19)
  {
    LODWORD(v20) = ((v10 >> 4) ^ (v10 >> 9)) & (v19 - 1);
    v21 = (uint64_t *)(v18 + 16 * v20);
    v22 = *v21;
    if (v10 == *v21)
      goto LABEL_18;
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v22 = *(_QWORD *)(v18 + 16 * v20);
      if (v10 == v22)
      {
        v21 = (uint64_t *)(v18 + 16 * v20);
        goto LABEL_18;
      }
    }
  }
  v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_18:
  v25 = result[1];
  v26 = v21[1] & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned int *)(v25 + 8);
  v28 = *(_QWORD **)v25;
  if ((_DWORD)v27)
  {
    v29 = v28[3 * v27 - 2];
    v30 = *(_DWORD *)(v26 + 24) | 2;
    if (v30 < ((v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      v31 = v28;
      v32 = v27;
      do
      {
        v33 = v32 >> 1;
        v34 = v31[3 * (v32 >> 1) + 1];
        LODWORD(v34) = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
        v32 -= (v32 >> 1) + 1;
        v35 = v30 >= v34;
        if (v30 >= v34)
          v36 = v33 + 1;
        else
          v36 = 0;
        v31 += 3 * v36;
        if (!v35)
          v32 = v33;
      }
      while (v32);
      goto LABEL_30;
    }
  }
  else
  {
    LODWORD(v27) = 0;
  }
  v31 = &v28[3 * v27];
LABEL_30:
  if (v31 == &v28[3 * v27]
    || ((*v31 >> 1) & 3 | *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v26 + 24) | 2u))
  {
    v37 = 0;
  }
  else
  {
    v37 = v31[2];
  }
  *(_QWORD *)&v41 = a3;
  *((_QWORD *)&v41 + 1) = v37;
  v38 = sub_1C50E2B64(a1 + 272, &v41);
  result = sub_1C477672C(v38, a2);
  v39 = *(_QWORD *)(v38 + 8);
  if (v39 == *(_QWORD *)v38)
    v40 = (unsigned int *)(v38 + 20);
  else
    v40 = (unsigned int *)(v38 + 16);
  if (result != (_QWORD *)(v39 + 8 * *v40))
  {
    *result = -2;
    ++*(_DWORD *)(v38 + 24);
  }
  return result;
}

_QWORD *sub_1C50E2698(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  llvm::SmallPtrSetImplBase *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v55;
  __int128 v56;
  unsigned int v57;

  v57 = a3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = a4 & 0x7FFFFFFF;
  if (v8 >= *(unsigned int *)(v7 + 416) || (v9 = *(_QWORD *)(*(_QWORD *)(v7 + 408) + 8 * v8)) == 0)
  {
    v9 = sub_1C4851220(*(_QWORD *)(a1 + 16), a4);
    v50 = *(_QWORD *)(v7 + 304);
    v51 = *(_QWORD *)(v7 + 248);
    *(_QWORD *)v50 = v51;
    *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 40);
    *(_OWORD *)(v50 + 16) = *(_OWORD *)(v7 + 288);
    *(_QWORD *)(v50 + 32) = v7 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v50);
    *(_DWORD *)(v50 + 184) = 0;
    v52 = *(_QWORD *)(v7 + 256);
    v26 = *(_BYTE *)(v52 + 16) == 0;
    v53 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v52 + 24) + 16 * (*(_DWORD *)(v9 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v55 = !v26 && v53 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v7 + 304), (llvm::LiveInterval *)v9, v55);
    llvm::LiveIntervals::computeDeadValues(v7, v9, 0);
  }
  v10 = *(_QWORD *)(a1 + 248);
  v11 = *(unsigned int *)(a1 + 264);
  if ((int *)(v10 + 16 * v11) == sub_1C50E2B00(v10, *(_DWORD *)(a1 + 264), a3))
  {
    v12 = *(_DWORD *)(v9 + 112);
    v13 = *(_DWORD *)(v9 + 116);
    v14 = operator new();
    *(_QWORD *)v14 = v14 + 16;
    *(_QWORD *)(v14 + 8) = 0x200000000;
    *(_QWORD *)(v14 + 64) = v14 + 80;
    *(_QWORD *)(v14 + 72) = 0x200000000;
    *(_QWORD *)(v14 + 96) = 0;
    *(_QWORD *)(v14 + 104) = 0;
    *(_DWORD *)(v14 + 112) = v12;
    *(_DWORD *)(v14 + 116) = v13;
    sub_1C50E31B0(v14, v9, v7 + 312);
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 104);
      if (!v9)
        break;
      v15 = *(_QWORD *)(v9 + 112);
      v16 = (_QWORD *)sub_1C484358C(v7 + 312, 120, 3);
      *v16 = v16 + 2;
      v16[1] = 0x200000000;
      v16[8] = v16 + 10;
      v16[9] = 0x200000000;
      v16[12] = 0;
      sub_1C50E31B0((uint64_t)v16, v9, v7 + 312);
      v16[14] = v15;
      v16[13] = *(_QWORD *)(v14 + 104);
      *(_QWORD *)(v14 + 104) = v16;
    }
    v17 = sub_1C50E32FC(a1 + 248, &v57);
    *(_QWORD *)&v56 = 0;
    sub_1C50E10CC((uint64_t *)(v17 + 8), v14);
    sub_1C50E10CC((uint64_t *)&v56, 0);
  }
  v18 = *(_WORD *)(a2 + 44);
  v19 = a2;
  if ((v18 & 4) != 0)
  {
    v19 = a2;
    do
      v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v19 + 44) & 4) != 0);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288);
  v21 = a2;
  if ((v18 & 8) != 0)
  {
    v21 = a2;
    do
      v21 = *(_QWORD *)(v21 + 8);
    while ((*(_WORD *)(v21 + 44) & 8) != 0);
  }
  v22 = *(_QWORD *)(v21 + 8);
  if (v19 != v22)
  {
    while (1)
    {
      v23 = **(unsigned __int16 **)(v19 + 16);
      v24 = v23 > 0x17;
      v25 = (1 << v23) & 0x83E000;
      v26 = v24 || v25 == 0;
      if (v26)
        break;
      v19 = *(_QWORD *)(v19 + 8);
      if (v19 == v22)
      {
        v19 = *(_QWORD *)(v21 + 8);
        break;
      }
    }
  }
  v27 = *(_QWORD *)(v20 + 368);
  v28 = *(unsigned int *)(v20 + 384);
  if ((_DWORD)v28)
  {
    LODWORD(v29) = ((v19 >> 4) ^ (v19 >> 9)) & (v28 - 1);
    v30 = (uint64_t *)(v27 + 16 * v29);
    v31 = *v30;
    if (v19 == *v30)
      goto LABEL_24;
    v32 = 1;
    while (v31 != -4096)
    {
      v33 = v29 + v32++;
      v29 = v33 & (v28 - 1);
      v31 = *(_QWORD *)(v27 + 16 * v29);
      if (v19 == v31)
      {
        v30 = (uint64_t *)(v27 + 16 * v29);
        goto LABEL_24;
      }
    }
  }
  v30 = (uint64_t *)(v27 + 16 * v28);
LABEL_24:
  v34 = v30[1];
  v35 = *(_QWORD *)(sub_1C50E32FC(a1 + 248, &v57) + 8);
  v36 = v34 & 0xFFFFFFFFFFFFFFF8;
  v37 = *(unsigned int *)(v35 + 8);
  v38 = *(_QWORD **)v35;
  if (!(_DWORD)v37)
  {
    LODWORD(v37) = 0;
    goto LABEL_35;
  }
  v39 = v38[3 * v37 - 2];
  v40 = *(_DWORD *)(v36 + 24) | 2;
  if (v40 >= ((v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_35:
    v41 = &v38[3 * v37];
    goto LABEL_36;
  }
  v41 = v38;
  v42 = v37;
  do
  {
    v43 = v42 >> 1;
    v44 = v41[3 * (v42 >> 1) + 1];
    LODWORD(v44) = (v44 >> 1) & 3 | *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24);
    v42 -= (v42 >> 1) + 1;
    v45 = v40 >= v44;
    if (v40 >= v44)
      v46 = v43 + 1;
    else
      v46 = 0;
    v41 += 3 * v46;
    if (!v45)
      v42 = v43;
  }
  while (v42);
LABEL_36:
  if (v41 == &v38[3 * v37]
    || ((*v41 >> 1) & 3 | *(_DWORD *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v36 + 24) | 2u))
  {
    v47 = 0;
  }
  else
  {
    v47 = v41[2];
  }
  *(_QWORD *)&v56 = a3;
  *((_QWORD *)&v56 + 1) = v47;
  v48 = (llvm::SmallPtrSetImplBase *)sub_1C50E2B64(a1 + 272, &v56);
  return sub_1C4774094(v48, a2);
}

_QWORD *sub_1C50E2A94(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  *result = a3;
  result[1] = a2;
  if (*(_QWORD *)(a3 + 56) == a2)
  {
    v3 = a3 + 48;
  }
  else
  {
    v3 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v3 || (*(_BYTE *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 4) != 0)
        v3 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  result[2] = v3;
  if (!a2 || (*(_BYTE *)a2 & 4) == 0)
  {
    while ((*(_WORD *)(a2 + 44) & 8) != 0)
      a2 = *(_QWORD *)(a2 + 8);
  }
  result[3] = *(_QWORD *)(a2 + 8);
  return result;
}

int *sub_1C50E2B00(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;

  if (!a2)
    return (int *)(a1 + 16 * a2);
  LODWORD(v3) = (37 * a3) & (a2 - 1);
  v4 = (int *)(a1 + 16 * v3);
  v5 = *v4;
  if (*v4 != a3)
  {
    v6 = 1;
    while (v5 != 0x7FFFFFFF)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a2 - 1);
      v5 = *(_DWORD *)(a1 + 16 * v3);
      if (v5 == a3)
        return (int *)(a1 + 16 * v3);
    }
    return (int *)(a1 + 16 * a2);
  }
  return v4;
}

uint64_t sub_1C50E2B64(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  void *v12;
  void *v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  unsigned int v17;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const void **v28;
  char *v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  _OWORD *v35;
  void *v36;
  _OWORD *v37;
  __int128 v38;
  _BYTE *v39;
  void *__src;
  uint64_t v41;
  int v42;
  _BYTE v43[128];

  v4 = *(_DWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v38 = 0;
  v6 = sub_1C50E2F44(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v4, v5, &v38);
  v7 = v38;
  if ((v6 & 1) != 0)
  {
    v17 = *(_DWORD *)(v38 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    return v16 + 176 * v17 + 16;
  }
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
    goto LABEL_4;
  }
  sub_1C50E3034(a1, v9);
  *(_QWORD *)&v38 = 0;
  sub_1C50E2F44(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v4, v5, &v38);
  v7 = v38;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v7 != 0x7FFFFFFF || *(_QWORD *)(v7 + 8) != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v7 = v4;
  *(_QWORD *)(v7 + 8) = v5;
  *(_DWORD *)(v7 + 16) = 0;
  v38 = *a2;
  v39 = v43;
  __src = v43;
  v41 = 16;
  v42 = 0;
  v11 = *(_OWORD **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v11 >= v10)
  {
    v19 = *(_OWORD **)(a1 + 24);
    v20 = 0x2E8BA2E8BA2E8BA3 * (v11 - v19) + 1;
    if (v20 > 0x1745D1745D1745DLL)
      abort();
    v21 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - (_QWORD)v19) >> 4);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0xBA2E8BA2E8BA2ELL)
      v22 = 0x1745D1745D1745DLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 > 0x1745D1745D1745DLL)
        sub_1C4764EE4();
      v23 = (char *)operator new(176 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = *a2;
    v25 = &v23[16 * (v11 - v19)];
    *(_OWORD *)v25 = v24;
    *((_QWORD *)v25 + 2) = v25 + 48;
    *((_QWORD *)v25 + 3) = v25 + 48;
    *((_QWORD *)v25 + 4) = 16;
    *((_DWORD *)v25 + 10) = 0;
    v41 = 16;
    v42 = 0;
    if (v11 == v19)
    {
      v15 = v25 + 176;
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = v25 + 176;
      *(_QWORD *)(a1 + 40) = &v23[176 * v22];
    }
    else
    {
      v26 = 0;
      do
      {
        v27 = &v25[v26 * 16];
        v28 = (const void **)&v11[v26];
        *((_OWORD *)v27 - 11) = v11[v26 - 11];
        v29 = &v25[v26 * 16 - 128];
        *((_QWORD *)v27 - 20) = v29;
        v31 = *(const void **)&v11[v26 - 10];
        v30 = (const void *)*((_QWORD *)&v11[v26 - 9] - 1);
        if (v30 == v31)
        {
          *((_QWORD *)v27 - 19) = v29;
          v32 = *((unsigned int *)v28 - 35);
          if ((_DWORD)v32)
            memmove(v29, *(v28 - 19), 8 * v32);
        }
        else
        {
          *((_QWORD *)v27 - 19) = v30;
          *(v28 - 19) = v31;
        }
        v33 = &v11[v26];
        v34 = &v25[v26 * 16];
        *((_QWORD *)v34 - 18) = *(_QWORD *)&v11[v26 - 9];
        *((_DWORD *)v34 - 34) = *((_DWORD *)&v11[v26 - 8] - 2);
        *((_QWORD *)v33 - 18) = 16;
        *((_DWORD *)v33 - 34) = 0;
        v26 -= 11;
      }
      while (&v11[v26] != v19);
      v11 = *(_OWORD **)(a1 + 24);
      v35 = *(_OWORD **)(a1 + 32);
      v15 = v25 + 176;
      *(_QWORD *)(a1 + 24) = &v25[v26 * 16];
      *(_QWORD *)(a1 + 32) = v25 + 176;
      *(_QWORD *)(a1 + 40) = &v23[176 * v22];
      while (v35 != v11)
      {
        v36 = (void *)*((_QWORD *)v35 - 19);
        if (v36 != *((void **)v35 - 20))
        {
          v37 = v35;
          free(v36);
          v35 = v37;
        }
        v35 -= 11;
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v11 = *a2;
    v12 = v11 + 3;
    *((_QWORD *)v11 + 2) = v11 + 3;
    v13 = v39;
    if (__src == v39)
    {
      *((_QWORD *)v11 + 3) = v12;
      v14 = HIDWORD(v41);
      if (HIDWORD(v41))
        memmove(v12, __src, 8 * HIDWORD(v41));
    }
    else
    {
      *((_QWORD *)v11 + 3) = __src;
      __src = v13;
      v14 = HIDWORD(v41);
    }
    *((_DWORD *)v11 + 8) = v41;
    *((_DWORD *)v11 + 9) = v14;
    *((_DWORD *)v11 + 10) = v42;
    v41 = 16;
    v42 = 0;
    v15 = v11 + 11;
  }
  *(_QWORD *)(a1 + 32) = v15;
  if (__src != v39)
    free(__src);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = -1171354717 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v16) >> 4) - 1;
  *(_DWORD *)(v7 + 16) = v17;
  return v16 + 176 * v17 + 16;
}

uint64_t sub_1C50E2F44(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v18;
  uint64_t result;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (int *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_QWORD *)v10 + 1);
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != 0x7FFFFFFF || v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16 && v11 == 0x80000000)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (int *)(a1 + 24 * (v18 & v8));
        v11 = *v10;
        v12 = *((_QWORD *)v10 + 1);
        if (*v10 == a3 && v12 == a4)
          goto LABEL_22;
      }
      result = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a5 = v10;
  return result;
}

_OWORD *sub_1C50E3034(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_1C85FABF0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4 + 8;
      do
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = *(_QWORD *)v13;
        if ((v14 != 0x7FFFFFFF || v15 != -4096) && (v14 != 0x80000000 || v15 != -8192))
        {
          v19 = 0;
          sub_1C50E2F44(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v19);
          v16 = v19;
          *v19 = *(_DWORD *)(v13 - 8);
          *((_QWORD *)v16 + 1) = *(_QWORD *)v13;
          v16[4] = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 24 * v17;
    do
    {
      *result = xmmword_1C85FABF0;
      result = (_OWORD *)((char *)result + 24);
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

__n128 sub_1C50E31B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 result;
  unint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    v23 = v3;
    v24 = v4;
    v7 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v7)
    {
      v9 = *(uint64_t **)(a2 + 64);
      v10 = 8 * v7;
      do
      {
        v11 = *v9;
        v12 = sub_1C484358C(a3, 16, 3);
        v14 = *(unsigned int *)(a1 + 72);
        *(_DWORD *)v12 = v14;
        *(_QWORD *)(v12 + 8) = *(_QWORD *)(v11 + 8);
        if (v14 >= *(unsigned int *)(a1 + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v14 + 1, 8);
          v14 = *(unsigned int *)(a1 + 72);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14) = v12;
        ++*(_DWORD *)(a1 + 72);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v15 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v15)
    {
      v16 = (unsigned int **)(*(_QWORD *)a2 + 16);
      v17 = 24 * v15;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * **v16);
        v21 = *((_OWORD *)v16 - 1);
        v22 = v18;
        v19 = (__n128 *)sub_1C4926708(a1, (unint64_t)&v21, 1);
        v20 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8));
        result = *v19;
        v20[1].n128_u64[0] = v19[1].n128_u64[0];
        *v20 = result;
        ++*(_DWORD *)(a1 + 8);
        v16 += 3;
        v17 -= 24;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t sub_1C50E32FC(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == 0x80000000;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C50E3514((uint64_t *)a1, 2 * v4);
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *a2) & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v18 = 1;
      while (v16 != 0x7FFFFFFF)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == 0x80000000;
        if (v19)
          v17 = result;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        result = *(_QWORD *)a1 + 16 * v15;
        v16 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
LABEL_45:
      if (v17)
        result = v17;
      goto LABEL_15;
    }
LABEL_44:
    result = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C50E3514((uint64_t *)a1, v4);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a2) & v22;
      result = *(_QWORD *)a1 + 16 * v23;
      v24 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v25 = 1;
      while (v24 != 0x7FFFFFFF)
      {
        if (v17)
          v26 = 0;
        else
          v26 = v24 == 0x80000000;
        if (v26)
          v17 = result;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        result = *(_QWORD *)a1 + 16 * v23;
        v24 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_DWORD *sub_1C50E3514(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0x7FFFFFFF;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if ((*v12 - 0x7FFFFFFF) >= 2)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v20 = 0;
            v21 = 1;
            while (v18 != 0x7FFFFFFF)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v18 == 0x80000000;
              if (v22)
                v20 = v17;
              v23 = v16 + v21++;
              v16 = v23 & v15;
              v17 = *a1 + 16 * (v23 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v20)
              v17 = v20;
          }
LABEL_12:
          v19 = *((_QWORD *)v12 + 1);
          *(_DWORD *)v17 = v14;
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          sub_1C50E10CC((uint64_t *)v12 + 1, 0);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = 0x7FFFFFFF;
      result += 4;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t *sub_1C50E36C4(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *result;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = *a2;
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] <= 1uLL)
    {
      v5 = (*(_QWORD *)&v2 - 1) & v3;
    }
    else
    {
      v5 = *a2;
      if (*(_QWORD *)&v2 <= v3)
        v5 = v3 % *(_QWORD *)&v2;
    }
    v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        while (1)
        {
          v8 = v7[1];
          if (v8 == v3)
          {
            if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
              return v7;
          }
          else
          {
            if (v4.u32[0] <= 1uLL)
            {
              v8 &= *(_QWORD *)&v2 - 1;
            }
            else if (v8 >= *(_QWORD *)&v2)
            {
              v8 %= *(_QWORD *)&v2;
            }
            if (v8 != v5)
              return 0;
          }
          result = 0;
          v7 = (uint64_t *)*v7;
          if (!v7)
            return result;
        }
      }
    }
  }
  return 0;
}

void sub_1C50E3788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  llvm::LiveInterval *v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  llvm::LiveInterval *v33;
  uint64_t v34;
  llvm::LiveInterval **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  int v46;
  uint64_t v47;
  __int16 v49;
  unint64_t v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  void *v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD v88[18];

  v88[16] = *MEMORY[0x1E0C80C00];
  v85 = v88;
  v87 = 8;
  v81 = a1 + 376;
  v82 = a1 + 360;
  v83 = a1 + 440;
  v88[0] = a2;
  v88[1] = a3;
  v4 = 1;
  do
  {
    v5 = (char *)v85 + 16 * v4;
    v6 = (unsigned int *)*((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v86 = v4 - 1;
    v8 = v6[28];
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v10)
    {
      v11 = 4 * v10;
      v12 = *(_DWORD **)(a1 + 120);
      while (*v12 != (_DWORD)v8)
      {
        ++v12;
        v11 -= 4;
        if (!v11)
        {
          v12 = (_DWORD *)(v9 + 4 * v10);
          break;
        }
      }
    }
    else
    {
      v12 = *(_DWORD **)(a1 + 120);
    }
    if (v10 == ((uint64_t)v12 - v9) >> 2)
    {
      llvm::LiveRange::MergeValueInAsValue(*(uint64_t **)(a1 + 104), v6, v7, **(_QWORD **)(*(_QWORD *)(a1 + 104) + 64));
      v13 = *(_QWORD *)(a1 + 64);
      v14 = (uint64_t *)((v8 & 0x80000000) != 0
                      ? *(_QWORD *)(v13 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v13 + 272) + 8 * v8);
      v15 = *v14;
      if (*v14)
      {
        while ((*(_DWORD *)v15 & 0x81000000) != 0)
        {
          v15 = *(_QWORD *)(v15 + 24);
          if (!v15)
            goto LABEL_113;
        }
        do
        {
          v44 = *(_QWORD *)(v15 + 8);
          do
            v15 = *(_QWORD *)(v15 + 24);
          while (v15 && ((*(_DWORD *)v15 & 0x81000000) != 0 || *(_QWORD *)(v15 + 8) == v44));
          v45 = *(unsigned __int16 **)(v44 + 16);
          v46 = *v45;
          if (v46 != 19 && ((v46 - 1) > 1 || (*(_BYTE *)(*(_QWORD *)(v44 + 32) + 48) & 0x10) == 0))
          {
            v47 = *((_QWORD *)v45 + 1);
            if ((*(_WORD *)(v44 + 44) & 0xC) != 0 && (*(_WORD *)(v44 + 44) & 4) == 0)
            {
              v43 = v44;
              if ((v47 & 0x100000) == 0)
              {
                while ((*(_WORD *)(v43 + 44) & 8) != 0)
                {
                  v43 = *(_QWORD *)(v43 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v43 + 16) + 10) & 0x10) != 0)
                    goto LABEL_72;
                }
                continue;
              }
            }
            else if ((v47 & 0x100000) == 0)
            {
              continue;
            }
          }
LABEL_72:
          v49 = *(_WORD *)(v44 + 44);
          v37 = v44;
          if ((v49 & 4) != 0)
          {
            do
              v37 = *(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v37 + 44) & 4) != 0);
          }
          v36 = v44;
          if ((v49 & 8) != 0)
          {
            do
              v36 = *(_QWORD *)(v36 + 8);
            while ((*(_WORD *)(v36 + 44) & 8) != 0);
          }
          v50 = *(_QWORD *)(v36 + 8);
          if (v37 != v50)
          {
            while (1)
            {
              v51 = **(unsigned __int16 **)(v37 + 16);
              v52 = v51 > 0x17;
              v53 = (1 << v51) & 0x83E000;
              if (v52 || v53 == 0)
                break;
              v37 = *(_QWORD *)(v37 + 8);
              if (v37 == v50)
              {
                v37 = v50;
                break;
              }
            }
          }
          v55 = *(_QWORD *)(a1 + 16);
          v56 = *(_QWORD *)(v55 + 288);
          v57 = *(_QWORD *)(v56 + 368);
          v58 = *(unsigned int *)(v56 + 384);
          if ((_DWORD)v58)
          {
            LODWORD(v59) = ((v37 >> 4) ^ (v37 >> 9)) & (v58 - 1);
            v60 = (uint64_t *)(v57 + 16 * v59);
            v61 = *v60;
            if (v37 == *v60)
              goto LABEL_88;
            v62 = 1;
            while (v61 != -4096)
            {
              v63 = v59 + v62++;
              v59 = v63 & (v58 - 1);
              v61 = *(_QWORD *)(v57 + 16 * v59);
              if (v37 == v61)
              {
                v60 = (uint64_t *)(v57 + 16 * v59);
                goto LABEL_88;
              }
            }
          }
          v60 = (uint64_t *)(v57 + 16 * v58);
LABEL_88:
          v64 = v60[1];
          v65 = v6[2];
          v66 = *(_QWORD **)v6;
          if (v65)
          {
            v67 = v66[3 * v65 - 2];
            v68 = *(_DWORD *)((v64 & 0xFFFFFFFFFFFFFFF8) + 24) | (v64 >> 1) & 3;
            v69 = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
            v70 = *(_QWORD **)v6;
            v71 = v6[2];
            if (v68 < v69)
            {
              do
              {
                v72 = v71 >> 1;
                v73 = v70[3 * (v71 >> 1) + 1];
                LODWORD(v73) = (v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
                v71 -= (v71 >> 1) + 1;
                v74 = v68 >= v73;
                if (v68 >= v73)
                  v75 = v72 + 1;
                else
                  v75 = 0;
                v70 += 3 * v75;
                if (!v74)
                  v71 = v72;
              }
              while (v71);
              goto LABEL_99;
            }
          }
          else
          {
            v65 = 0;
          }
          v70 = &v66[3 * v65];
LABEL_99:
          if (v70 == &v66[3 * v65]
            || ((*v70 >> 1) & 3 | *(_DWORD *)((*v70 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v64 & 0xFFFFFFFFFFFFFFF8) + 24) | (v64 >> 1) & 3))
          {
            v76 = 0;
          }
          else
          {
            v76 = v70[2];
          }
          if (v76 == v7)
          {
            if (v46 != 19
              || (v77 = *(_DWORD **)(v44 + 32), (*v77 & 0xFFF00) != 0)
              || (v77[8] & 0xFFF00) != 0
              || (v16 = v77[1], v17 = v77[9], v16 != (_DWORD)v8) && (v41 = v17 == (_DWORD)v8, v17 = v16, !v41)
              || !v17)
            {
              v84 = 0;
              if ((_DWORD)v8 == (*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 72) + 96))(*(_QWORD *)(a1 + 72), v44, &v84)&& v84 == *(_DWORD *)(a1 + 112))
              {
                *(_QWORD *)(v44 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 336;
                v78 = *(unsigned int *)(a1 + 368);
                if (v78 >= *(unsigned int *)(a1 + 372))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v82, v81, v78 + 1, 8);
                  v78 = *(unsigned int *)(a1 + 368);
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * v78) = v44;
                ++*(_DWORD *)(a1 + 368);
                sub_1C50E2420(v83, v44, *(_DWORD *)(a1 + 112));
              }
              continue;
            }
            if (v17 < 0)
            {
              v18 = v17;
              v19 = v17 & 0x7FFFFFFF;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 328) + 4 * v19))
                v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 328) + 4 * v19);
              if (v17 == *(_DWORD *)(a1 + 116))
              {
                if (v19 >= *(unsigned int *)(v55 + 416)
                  || (v20 = *(llvm::LiveInterval **)(*(_QWORD *)(v55 + 408) + 8 * v19)) == 0)
                {
                  v80 = *(_QWORD *)(a1 + 16);
                  v20 = (llvm::LiveInterval *)sub_1C4851220(v80, v18);
                  v79 = *(_QWORD *)(v80 + 304);
                  v38 = *(_QWORD *)(v80 + 248);
                  *(_QWORD *)v79 = v38;
                  *(_QWORD *)(v79 + 8) = *(_QWORD *)(v38 + 40);
                  *(_OWORD *)(v79 + 16) = *(_OWORD *)(v80 + 288);
                  *(_QWORD *)(v79 + 32) = v80 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v79);
                  *(_DWORD *)(v79 + 184) = 0;
                  v39 = *(_QWORD *)(v80 + 256);
                  v41 = *(_BYTE *)(v39 + 16) == 0;
                  v40 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v39 + 24)
                                                        + 16 * (*((_DWORD *)v20 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                           + 34);
                  v41 = v41 || v40 == 0;
                  v42 = !v41;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v80 + 304), v20, v42);
                  llvm::LiveIntervals::computeDeadValues(v80, (uint64_t)v20, 0);
                }
                v21 = v64 & 0xFFFFFFFFFFFFFFF8;
                v22 = *((_DWORD *)v20 + 2);
                v23 = *(_QWORD **)v20;
                if (v22)
                {
                  v24 = v23[3 * v22 - 2];
                  v25 = *(_DWORD *)(v21 + 24) | 2;
                  v26 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v27 = *(_QWORD **)v20;
                  v28 = *((unsigned int *)v20 + 2);
                  if (v25 < v26)
                  {
                    do
                    {
                      v29 = v28 >> 1;
                      v30 = v27[3 * (v28 >> 1) + 1];
                      LODWORD(v30) = (v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v28 -= (v28 >> 1) + 1;
                      v31 = v25 >= v30;
                      if (v25 >= v30)
                        v32 = v29 + 1;
                      else
                        v32 = 0;
                      v27 += 3 * v32;
                      if (!v31)
                        v28 = v29;
                    }
                    while (v28);
                    goto LABEL_37;
                  }
                }
                else
                {
                  v22 = 0;
                }
                v27 = &v23[3 * v22];
LABEL_37:
                if (v27 == &v23[3 * v22]
                  || ((*v27 >> 1) & 3 | *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v21 + 24) | 2u))
                {
                  v33 = 0;
                }
                else
                {
                  v33 = (llvm::LiveInterval *)v27[2];
                }
                v34 = v86;
                if (v86 >= (unint64_t)v87)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v88, v86 + 1, 16);
                  v34 = v86;
                }
                v35 = (llvm::LiveInterval **)((char *)v85 + 16 * v34);
                *v35 = v20;
                v35[1] = v33;
                ++v86;
              }
            }
          }
        }
        while (v15);
      }
    }
LABEL_113:
    v4 = v86;
  }
  while (v86);
  if (v85 != v88)
    free(v85);
}

unint64_t sub_1C50E3E24(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    do
    {
      result = sub_1C4850BC8(*(_QWORD *)(v5 + 288), v4, 0);
      if ((*(_BYTE *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 8) != 0)
          v4 = *(_QWORD *)(v4 + 8);
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a3);
  }
  return result;
}

BOOL sub_1C50E3E8C(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 1;
  if ((*(_BYTE *)(v3 + 3) & 1) == 0)
  {
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
      return (*(_BYTE *)(v4 + 3) & 1) == 0;
    return 1;
  }
  return 0;
}

uint64_t sub_1C50E3EE4(uint64_t result, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(result + 160 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -2;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_DWORD *)(result + 160 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

int *sub_1C50E3F68(uint64_t a1, int *a2, int *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C50E40A4((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C50E3EE4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
  }
  else
  {
    sub_1C50E40A4((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v8 = *(_DWORD *)(a1 + 16) - 1;
    v9 = (37 * *a2) & v8;
    a3 = (int *)(*(_QWORD *)a1 + 160 * v9);
    v10 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
    v12 = 0;
    v13 = 1;
    while (v10 != -1)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v10 == -2;
      if (v14)
        v12 = a3;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      a3 = (int *)(*(_QWORD *)a1 + 160 * v9);
      v10 = *a3;
      if (v7 == *a3)
        goto LABEL_3;
    }
    if (v12)
      a3 = v12;
  }
  v7 = *a3;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C50E40A4(uint64_t *a1, int a2)
{
  unsigned int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t i;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(160 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 160 * v10;
      do
      {
        *result = -1;
        result += 40;
        v11 -= 160;
      }
      while (v11);
    }
    if (!v3)
LABEL_46:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[40 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
        break;
LABEL_22:
      v13 += 40;
      if (v13 == v12)
        goto LABEL_46;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & (37 * v14);
    v17 = *a1 + 160 * v16;
    v18 = *(_DWORD *)v17;
    if (v14 != *(_DWORD *)v17)
    {
      v30 = 0;
      v31 = 1;
      while (v18 != -1)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v18 == -2;
        if (v32)
          v30 = v17;
        v33 = v16 + v31++;
        v16 = v33 & v15;
        v17 = *a1 + 160 * v16;
        v18 = *(_DWORD *)v17;
        if (v14 == *(_DWORD *)v17)
          goto LABEL_12;
      }
      if (v30)
        v17 = v30;
    }
LABEL_12:
    *(_DWORD *)v17 = v14;
    *(_QWORD *)(v17 + 8) = 1;
    v19 = v17 + 8;
    *(_QWORD *)&v20 = -1;
    *((_QWORD *)&v20 + 1) = -1;
    *(_OWORD *)(v17 + 16) = v20;
    *(_OWORD *)(v17 + 32) = v20;
    *(_OWORD *)(v17 + 48) = v20;
    *(_OWORD *)(v17 + 64) = v20;
    v21 = v13[2];
    v13[2] = v21 & 1;
    *(_DWORD *)(v17 + 8) = v21 & 0xFFFFFFFE | *(_DWORD *)(v17 + 8) & 1;
    v22 = *(_DWORD *)(v17 + 12);
    *(_DWORD *)(v17 + 12) = v13[3];
    v13[3] = v22;
    v23 = *(_DWORD *)(v17 + 8);
    v24 = v13[2];
    if ((v23 & 1) != 0)
    {
      v23 = v13[2];
      v25 = (uint64_t)(v13 + 2);
      if ((v24 & 1) != 0)
      {
        for (i = 4; i != 20; ++i)
        {
          v27 = *(_DWORD *)(v17 + i * 4);
          *(_DWORD *)(v17 + i * 4) = v13[i];
          v13[i] = v27;
        }
        goto LABEL_16;
      }
    }
    else
    {
      v25 = v17 + 8;
      v19 = (uint64_t)(v13 + 2);
      if ((v24 & 1) == 0)
      {
        v34 = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(v17 + 16) = *((_QWORD *)v13 + 2);
        *((_QWORD *)v13 + 2) = v34;
        LODWORD(v34) = *(_DWORD *)(v17 + 24);
        *(_DWORD *)(v17 + 24) = v13[6];
        v13[6] = v34;
LABEL_16:
        *(_QWORD *)(v17 + 80) = v17 + 96;
        v28 = v17 + 80;
        *(_QWORD *)(v28 + 8) = 0x1000000000;
        if (v13[22])
          sub_1C48621E4(v28, (uint64_t)(v13 + 20));
        ++*((_DWORD *)a1 + 2);
        v29 = (int *)*((_QWORD *)v13 + 10);
        if (v29 != v13 + 24)
          free(v29);
        if ((v13[2] & 1) == 0)
          MEMORY[0x1CAA32FB4](*((_QWORD *)v13 + 2), 4);
        goto LABEL_22;
      }
    }
    v38 = *(_OWORD *)(v25 + 8);
    *(_DWORD *)v25 = v23 | 1;
    for (j = 8; j != 72; j += 4)
      *(_DWORD *)(v25 + j) = *(_DWORD *)(v19 + j);
    *(_DWORD *)v19 &= ~1u;
    *(_OWORD *)(v19 + 8) = v38;
    goto LABEL_16;
  }
  a1[1] = 0;
  v36 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v36)
  {
    v37 = 160 * v36;
    do
    {
      *result = -1;
      result += 40;
      v37 -= 160;
    }
    while (v37);
  }
  return result;
}

_QWORD *sub_1C50E43A0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4F57124(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C50E4408(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C50E4408(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4F5726C(a1, v6);
  v8 = 0;
  sub_1C4F57124(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C50E44BC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C49D7AB8(a1, v7);
      v17 = 0;
      sub_1C48BF0C0((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C49D7AB8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C50E45EC(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 176 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 176 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C50E4670(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C50E47A8(a1, v6);
      v16 = 0;
      sub_1C50E45EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C50E47A8(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 176 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 176 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C50E47A8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(176 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61E002C(a1, v4, &v4[22 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 176 * v10;
    do
    {
      *result = -4096;
      result += 22;
      v11 -= 176;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C50E486C(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4F57124(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C50E4408(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C50E48D0()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Disable inline spill hoisting";
  v1.n128_u64[1] = 29;
  sub_1C61B2D38((uint64_t)&unk_1ED7F9070, "disable-spill-hoist", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9070, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Restrict remat for statepoint operands";
  v1.n128_u64[1] = 38;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F9130, "restrict-statepoint-remat", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9130, &dword_1C475E000);
}

void *sub_1C50E49A0(void *result)
{
  _QWORD *v1;
  size_t v2;

  if (*((_QWORD *)result + 4) != *(_DWORD *)(*(_QWORD *)result + 16))
  {
    v1 = result;
    free(*((void **)result + 3));
    v2 = *(unsigned int *)(*v1 + 16);
    v1[4] = v2;
    result = sub_1C5074000(v2, 1uLL);
    v1[3] = result;
  }
  return result;
}

unsigned int *sub_1C50E49F8(uint64_t a1, unsigned int a2)
{
  unsigned int *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + a2) <= 0x1FuLL
    && (v4 = a1 + 720 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + a2),
        v5 = *(_DWORD *)(v4 + 48),
        v2 = (unsigned int *)(v4 + 48),
        v5 == a2))
  {
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    if ((sub_1C50E4AE4(v2, v7, *(_QWORD *)a1) & 1) == 0)
      sub_1C50E4B94(v2, v7, v6);
  }
  else
  {
    v8 = a2;
    v9 = *(_DWORD *)(a1 + 40);
    if (v9 == 31)
      v10 = 0;
    else
      v10 = v9 + 1;
    *(_DWORD *)(a1 + 40) = v10;
    v11 = 32;
    while (*(_DWORD *)(a1 + 720 * v9 + 56))
    {
      if ((v9 + 1) == 32)
        LOBYTE(v9) = 0;
      else
        LOBYTE(v9) = v9 + 1;
      if (!--v11)
        return v2;
    }
    v2 = (unsigned int *)(a1 + 720 * v9 + 48);
    sub_1C50E4C18((int *)v2, a2, *(_QWORD *)(a1 + 8), *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + v8) = v9;
  }
  return v2;
}

uint64_t sub_1C50E4AE4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;

  v3 = a1[14];
  if (!(_DWORD)v3)
    return 0;
  v4 = (_QWORD *)(a3 + 8);
  if (!a3)
    v4 = 0;
  v5 = *(unsigned int *)(*v4 + 24 * *a1 + 16);
  v6 = (unsigned __int16 *)(v4[6] + ((v5 >> 3) & 0x1FFFFFFE));
  v8 = *v6;
  v7 = v6 + 1;
  v9 = v8 + (v5 & 0xF) * *a1;
  v10 = (int *)(*((_QWORD *)a1 + 6) + 88);
  v11 = v3 - 1;
  while (1)
  {
    v12 = *v10;
    v10 += 28;
    if (*(_DWORD *)(a2 + 216 * (unsigned __int16)v9) != v12)
      break;
    v14 = *v7++;
    v13 = v14;
    v15 = v14 == 0;
    if (!v14)
      v7 = 0;
    v16 = v11 == 0;
    if (v11)
    {
      LOWORD(v9) = v13 + v9;
      --v11;
      if (v13)
        continue;
    }
    return v15 & v16;
  }
  v15 = 0;
  v16 = 0;
  return v15 & v16;
}

unsigned int *sub_1C50E4B94(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;

  v3 = 0;
  v4 = *result;
  ++result[1];
  *((_QWORD *)result + 5) = 0;
  v5 = (_QWORD *)(a3 + 8);
  if (!a3)
    v5 = 0;
  v6 = *(unsigned int *)(*v5 + 24 * v4 + 16);
  v7 = (unsigned __int16 *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  v9 = *v7;
  v8 = v7 + 1;
  v10 = v9 + (v6 & 0xF) * v4;
  v11 = *((_QWORD *)result + 6);
  do
  {
    *(_DWORD *)(v11 + 112 * v3 + 88) = *(_DWORD *)(a2 + 216 * (unsigned __int16)v10);
    v12 = v8[v3];
    v10 += v12;
    ++v3;
  }
  while (v12);
  return result;
}

llvm::LiveRange *sub_1C50E4C18(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  _WORD *v21;
  unsigned __int16 *v22;
  __int16 v23;
  unsigned __int16 v24;
  _DWORD *v25;
  char *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  llvm::LiveRange *result;
  int v33;
  _QWORD *v34;
  unint64_t v35;
  BOOL v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unsigned int v40;
  _QWORD *v41;
  unint64_t v42;
  _DWORD *v43;
  void *v44;
  uint64_t v45;
  _DWORD v46[18];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a1[1] + 1;
  *a1 = a2;
  a1[1] = v8;
  v9 = *(_QWORD *)(a5 + 112) - *(_QWORD *)(a5 + 104);
  v10 = (v9 >> 3);
  v11 = a1[130];
  if (v10 != v11)
  {
    if (v10 >= v11)
    {
      v34 = a1 + 128;
      if (v10 > a1[131])
      {
        v41 = a1 + 128;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 128), (uint64_t)(a1 + 132), (v9 >> 3), 24);
        v34 = v41;
        v11 = a1[130];
      }
      if (v10 != v11)
        bzero((void *)(*v34 + 24 * v11), 24 * ((24 * (v10 - v11) - 24) / 0x18) + 24);
    }
    a1[130] = v9 >> 3;
  }
  v13 = (unint64_t *)(a1 + 12);
  v12 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 5) = 0;
  v14 = a1[14];
  if ((_DWORD)v14)
  {
    v15 = 112 * v14;
    do
    {
      v16 = *(void **)(v12 + v15 - 104);
      if ((void *)(v12 + v15 - 88) != v16)
      {
        v38 = v12;
        free(v16);
        v12 = v38;
      }
      v15 -= 112;
    }
    while (v15);
    v12 = *v13;
  }
  v17 = 0;
  a1[14] = 0;
  v18 = *a1;
  v19 = (_QWORD *)(a4 + 8);
  if (!a4)
    v19 = 0;
  v20 = *(unsigned int *)(*v19 + 24 * v18 + 16);
  v21 = (_WORD *)(v19[6] + ((v20 >> 3) & 0x1FFFFFFE));
  v23 = *v21;
  v22 = v21 + 1;
  v24 = v23 + (v20 & 0xF) * v18;
  do
  {
    v25 = (_DWORD *)(a3 + 216 * v24);
    v45 = 0x400000000;
    v46[16] = *v25;
    v47 = 0;
    v43 = v25 + 2;
    v44 = v46;
    v26 = (char *)&v43;
    if (v17 >= a1[15])
    {
      v35 = v17 + 1;
      v36 = v12 + 112 * v17 > (unint64_t)&v43;
      if (v12 <= (unint64_t)&v43 && v36)
      {
        v37 = (char *)&v43 - v12;
        sub_1C50E5AE4((uint64_t)(a1 + 12), v35);
        v12 = *v13;
        v26 = &v37[*v13];
      }
      else
      {
        sub_1C50E5AE4((uint64_t)(a1 + 12), v35);
        v12 = *v13;
        v26 = (char *)&v43;
      }
    }
    v27 = a1[14];
    v28 = (_QWORD *)(v12 + 112 * v27);
    *v28 = *(_QWORD *)v26;
    v28[2] = 0x400000000;
    v28[1] = v28 + 3;
    v29 = (uint64_t)(v28 + 1);
    if (*((_DWORD *)v26 + 4))
    {
      v40 = v27;
      v42 = v12;
      v39 = v26;
      sub_1C50E5C18(v29, (uint64_t)(v26 + 8));
      v26 = v39;
      v27 = v40;
      v12 = v42;
    }
    v30 = v12 + 112 * v27;
    v31 = *(_OWORD *)(v26 + 88);
    *(_QWORD *)(v30 + 104) = *((_QWORD *)v26 + 13);
    *(_OWORD *)(v30 + 88) = v31;
    ++a1[14];
    if (v44 != v46)
      free(v44);
    result = sub_1C50E4F00(*((llvm::LiveIntervals **)a1 + 4), v24);
    v12 = *((_QWORD *)a1 + 6);
    v17 = a1[14];
    *(_QWORD *)(v12 + 112 * v17 - 16) = result;
    v33 = *v22++;
    v24 += v33;
  }
  while (v33);
  return result;
}

llvm::LiveRange *sub_1C50E4F00(llvm::LiveIntervals *a1, unsigned int a2)
{
  llvm::LiveRange *v2;
  uint64_t v5;
  int v6;
  _QWORD *v7;

  v2 = *(llvm::LiveRange **)(*((_QWORD *)a1 + 85) + 8 * a2);
  if (!v2)
  {
    v5 = a2;
    v2 = (llvm::LiveRange *)operator new();
    v6 = byte_1ED82F170;
    *(_QWORD *)v2 = (char *)v2 + 16;
    *((_QWORD *)v2 + 1) = 0x200000000;
    *((_QWORD *)v2 + 8) = (char *)v2 + 80;
    *((_QWORD *)v2 + 9) = 0x200000000;
    if (v6)
    {
      v7 = (_QWORD *)operator new();
      v7[2] = 0;
      v7[1] = 0;
      *v7 = v7 + 1;
    }
    else
    {
      v7 = 0;
    }
    *((_QWORD *)v2 + 12) = v7;
    *(_QWORD *)(*((_QWORD *)a1 + 85) + 8 * v5) = v2;
    llvm::LiveIntervals::computeRegUnitRange(a1, v2, a2);
  }
  return v2;
}

void sub_1C50E4FD4(unsigned int *a1, unsigned int a2)
{
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t **v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t k;
  unint64_t v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t *v135;
  _QWORD *v136;
  unsigned int v137;
  uint64_t j;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  __int128 v158;
  uint64_t v159;

  v3 = a2;
  v4 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 392) + 16 * a2);
  v5 = *((_QWORD *)a1 + 5);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 392) + 16 * a2);
  if (v5 == v6)
    goto LABEL_56;
  v158 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 392) + 16 * a2);
  if (v5 >= 8)
  {
    v7 = (v6 >> 1) & 3;
    if ((*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24) | v7) >= (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (v5 >> 1) & 3))
    {
      v8 = a1[14];
      if ((_DWORD)v8)
      {
        for (i = 0; i != v8; ++i)
        {
          v10 = *((_QWORD *)a1 + 6);
          v11 = (uint64_t *)(v10 + 112 * i);
          v12 = *((unsigned int *)v11 + 4);
          if ((_DWORD)v12)
          {
            v13 = v11[1];
            if (*(_DWORD *)(v13 + 12) < *(_DWORD *)(v13 + 8))
            {
              v14 = *v11;
              if (*(_DWORD *)(*v11 + 192))
              {
                sub_1C50E5D4C(v11, v6);
                v4 = v158;
              }
              else
              {
                v20 = v13 + 16 * v12;
                v21 = *(_DWORD *)(v20 - 4);
                v22 = *(_DWORD *)(v14 + 196);
                if (v21 != v22)
                {
                  while (1)
                  {
                    v23 = *(_QWORD *)(v14 + 16 * v21 + 8);
                    if (((v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24) | v7))
                      break;
                    if (v22 == ++v21)
                    {
                      v21 = *(_DWORD *)(v14 + 196);
                      break;
                    }
                  }
                }
                *(_DWORD *)(v20 - 4) = v21;
              }
            }
          }
          v15 = v10 + 112 * i;
          v18 = *(_QWORD *)(v15 + 104);
          v17 = (uint64_t *)(v15 + 104);
          v16 = v18;
          v19 = *(v17 - 1);
          if (v18 != *(_QWORD *)v19 + 24 * *(unsigned int *)(v19 + 8))
          {
            v24 = sub_1C50E5A80(v19, v16, v6);
            v4 = v158;
            *v17 = v24;
          }
        }
      }
      goto LABEL_55;
    }
  }
  v25 = a1[14];
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = v6 & 0xFFFFFFFFFFFFFFF8;
    v28 = (v6 >> 1) & 3;
    v156 = a1[14];
    do
    {
      v29 = *((_QWORD *)a1 + 6);
      v30 = (_DWORD *)(v29 + 112 * v26);
      v31 = *(_QWORD *)v30;
      if (*(_DWORD *)(*(_QWORD *)v30 + 192))
      {
        v45 = *(unsigned int *)(v31 + 196);
        if ((_DWORD)v45)
        {
          v46 = 0;
          v47 = v31 + 96;
          while (((*(_QWORD *)(v47 + 8 * v46) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v47 + 8 * v46) & 0xFFFFFFFFFFFFFFF8)
                                                                                   + 24)) <= (*(_DWORD *)(v27 + 24) | v28))
          {
            if (v45 == ++v46)
            {
              v46 = v45;
              break;
            }
          }
        }
        else
        {
          v46 = 0;
        }
        sub_1C4A078FC((_DWORD *)(v29 + 112 * v26), v46);
        v48 = v30[4];
        if (v48)
        {
          v50 = v30 + 2;
          v49 = *((_QWORD *)v30 + 1);
          if (*(_DWORD *)(v49 + 12) < *(_DWORD *)(v49 + 8))
          {
            v51 = *(_DWORD *)(*(_QWORD *)v30 + 192);
            v52 = *(_QWORD *)(*(_QWORD *)(v49 + 16 * (v48 - 1))
                            + 8 * *(unsigned int *)(v49 + 16 * (v48 - 1) + 12));
            v53 = v51 - v48;
            if (v51 != v48)
            {
              do
              {
                LODWORD(v56) = -1;
                do
                {
                  v56 = (v56 + 1);
                  v57 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFC0) + 8 * v56 + 0x60);
                }
                while (((v57 >> 1) & 3 | *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v27 + 24) | v28));
                v154 = v52 & 0xFFFFFFFFFFFFFFC0;
                sub_1C4A079DC(v50, v52, v56);
                v52 = *(_QWORD *)(v154 + 8 * v56);
                --v53;
              }
              while (v53);
            }
            LODWORD(v54) = -1;
            do
            {
              v54 = (v54 + 1);
              v55 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFC0) + 16 * v54 + 8);
            }
            while (((v55 >> 1) & 3 | *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v27 + 24) | v28));
            sub_1C4A079DC(v50, v52, v54);
            v25 = v156;
          }
        }
      }
      else
      {
        v32 = *(unsigned int *)(v31 + 196);
        if ((_DWORD)v32)
        {
          v33 = 0;
          v34 = (uint64_t *)(v31 + 8);
          while (1)
          {
            v35 = *v34;
            v34 += 2;
            if (((v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v27 + 24) | v28))
              break;
            if (v32 == ++v33)
            {
              v33 = v32;
              break;
            }
          }
        }
        else
        {
          v33 = 0;
        }
        sub_1C4A078FC((_DWORD *)(v29 + 112 * v26), v33);
      }
      v36 = *(uint64_t **)(v29 + 112 * v26 + 96);
      v37 = *((unsigned int *)v36 + 2);
      v38 = *v36;
      v4 = v158;
      if ((_DWORD)v37)
      {
        v39 = *(_QWORD *)(v38 + 24 * v37 - 16);
        v40 = *(_DWORD *)(v27 + 24) | v28;
        if (v40 < ((v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          do
          {
            v41 = v37 >> 1;
            v42 = *(_QWORD *)(v38 + 24 * (v37 >> 1) + 8);
            LODWORD(v42) = (v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24);
            v37 -= (v37 >> 1) + 1;
            v43 = v40 >= v42;
            if (v40 >= v42)
              v44 = v41 + 1;
            else
              v44 = 0;
            v38 += 24 * v44;
            if (!v43)
              v37 = v41;
          }
          while (v37);
          goto LABEL_36;
        }
      }
      else
      {
        LODWORD(v37) = 0;
      }
      v38 += 24 * v37;
LABEL_36:
      *(_QWORD *)(v29 + 112 * v26++ + 104) = v38;
    }
    while (v26 != v25);
  }
LABEL_55:
  *((_QWORD *)a1 + 5) = v6;
LABEL_56:
  v58 = *((_QWORD *)a1 + 2);
  v59 = *(_QWORD *)(*(_QWORD *)(v58 + 104) + 8 * v3);
  v60 = *((_QWORD *)a1 + 64);
  v61 = v60 + 24 * v3;
  v62 = a1[1];
  v63 = a1[14];
  v64 = (_QWORD *)*((_QWORD *)a1 + 4);
  v65 = v64[75];
  v66 = v64[55];
  v67 = v64[65];
  v68 = v58 + 320;
  while (1)
  {
    *(_DWORD *)v61 = v62;
    *(_QWORD *)(v61 + 8) = 0;
    v69 = (unint64_t *)(v61 + 8);
    *(_QWORD *)(v61 + 16) = 0;
    v70 = *((_QWORD *)&v4 + 1);
    v71 = 0;
    if ((_DWORD)v63)
    {
      v72 = *((_QWORD *)a1 + 6);
      v73 = *((_QWORD *)&v4 + 1) & 0xFFFFFFFFFFFFFFF8;
      v74 = (DWORD2(v4) >> 1) & 3;
      v75 = (unsigned int *)(v72 + 16);
      v76 = v63;
      do
      {
        v77 = *v75;
        if ((_DWORD)v77)
        {
          v78 = *((_QWORD *)v75 - 1);
          if (*(_DWORD *)(v78 + 12) < *(_DWORD *)(v78 + 8))
          {
            v79 = *(_QWORD *)(*(_QWORD *)(v78 + 16 * v77 - 16) + 16 * *(unsigned int *)(v78 + 16 * v77 - 4));
            v80 = (v79 >> 1) & 3 | *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v80 < (*(_DWORD *)(v73 + 24) | v74)
              && (v71 < 8 || v80 < (*(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24) | (v71 >> 1) & 3)))
            {
              *v69 = v79;
              v71 = v79;
            }
          }
        }
        v75 += 28;
        --v76;
      }
      while (v76);
      v81 = (unint64_t **)(v72 + 104);
      v82 = v63;
      do
      {
        if (*v81 != (unint64_t *)(**(v81 - 1) + 24 * *((unsigned int *)*(v81 - 1) + 2)))
        {
          v83 = **v81;
          v84 = (v83 >> 1) & 3 | *(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 24);
          if (v84 < (*(_DWORD *)(v73 + 24) | v74)
            && (v71 < 8 || v84 < (*(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24) | (v71 >> 1) & 3)))
          {
            *v69 = v83;
            v71 = v83;
          }
        }
        v81 += 14;
        --v82;
      }
      while (v82);
    }
    v85 = (unsigned int *)(v65 + 8 * v3);
    v86 = *v85;
    v87 = v85[1];
    if ((_DWORD)v87)
    {
      v135 = (unint64_t *)(v66 + 8 * v86);
      v136 = (_QWORD *)(v67 + 8 * v86);
      if (v71 <= 7)
        v71 = *((_QWORD *)&v4 + 1);
      v137 = *(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24) | (v71 >> 1) & 3;
      for (j = v87; j; --j)
      {
        v140 = *v135++;
        v139 = v140;
        if (((v140 >> 1) & 3 | *(_DWORD *)((v140 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v137)
          break;
        if (((*(_DWORD *)(*v136 + (((unint64_t)*a1 >> 3) & 0x1FFFFFFC)) >> *a1) & 1) == 0)
        {
          *v69 = v139;
          break;
        }
        ++v136;
      }
    }
    *((_QWORD *)a1 + 5) = *((_QWORD *)&v4 + 1);
    if (*v69 >= 8)
      break;
    v59 = *(_QWORD *)(v59 + 8);
    if (v59 == v68)
      return;
    v3 = *(unsigned int *)(v59 + 24);
    v61 = v60 + 24 * v3;
    if (*(_DWORD *)v61 == v62)
      return;
    v4 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 392) + 16 * v3);
  }
  v153 = v67;
  v155 = v66;
  if ((_DWORD)v63)
  {
    v88 = 0;
    v89 = *((_QWORD *)&v4 + 1) & 0xFFFFFFFFFFFFFFF8;
    v90 = (DWORD2(v4) >> 1) & 3;
    v159 = v4;
    v157 = v90;
    while (1)
    {
      v91 = (_DWORD *)(*((_QWORD *)a1 + 6) + 112 * v88);
      v92 = v91[4];
      if (!(_DWORD)v92)
        goto LABEL_95;
      v94 = (uint64_t *)(v91 + 2);
      v93 = *((_QWORD *)v91 + 1);
      if (*(_DWORD *)(v93 + 12) >= *(_DWORD *)(v93 + 8))
        goto LABEL_95;
      v95 = v93 + 16 * v92;
      v96 = *(unsigned int *)(v95 - 4);
      v97 = *(_QWORD *)(*(_QWORD *)(v95 - 16) + 16 * v96);
      v98 = (v97 >> 1) & 3 | *(_DWORD *)((v97 & 0xFFFFFFFFFFFFFFF8) + 24);
      v99 = *(_DWORD *)(v89 + 24) | v90;
      if (v98 >= v99)
        goto LABEL_95;
      v100 = *(_QWORD *)v91;
      if (*(_DWORD *)(*(_QWORD *)v91 + 192))
      {
        sub_1C50E5D4C(v91, v70);
        v90 = v157;
        v93 = *((_QWORD *)v91 + 1);
      }
      else
      {
        v114 = *(_DWORD *)(v100 + 196);
        if ((_DWORD)v96 != v114)
        {
          while (1)
          {
            v115 = *(_QWORD *)(v100 + 16 * v96 + 8);
            if (((v115 >> 1) & 3 | *(_DWORD *)((v115 & 0xFFFFFFFFFFFFFFF8) + 24)) > v99)
              break;
            LODWORD(v96) = v96 + 1;
            if (v114 == (_DWORD)v96)
            {
              LODWORD(v96) = *(_DWORD *)(v100 + 196);
              break;
            }
          }
        }
        *(_DWORD *)(v95 - 4) = v96;
      }
      v101 = v91[4];
      if (!(_DWORD)v101)
        break;
      v102 = v93 + 16 * v101;
      *(_QWORD *)&v4 = v159;
      if (*(_DWORD *)(v93 + 12) >= *(_DWORD *)(v93 + 8))
      {
        v116 = *(_DWORD *)(v102 - 4);
        v103 = (_DWORD *)(v102 - 4);
        v104 = v116;
        if (!v116)
          goto LABEL_153;
LABEL_106:
        v117 = *(_DWORD *)(*(_QWORD *)v91 + 192);
        if (v117)
          goto LABEL_107;
LABEL_98:
        *v103 = v104 - 1;
LABEL_99:
        v107 = 1;
        goto LABEL_88;
      }
      v105 = *(_DWORD *)(v102 - 4);
      v103 = (_DWORD *)(v102 - 4);
      v104 = v105;
      v106 = *(_QWORD *)(*(_QWORD *)(v103 - 3) + 16 * v105);
      if (((v106 >> 1) & 3 | *(_DWORD *)((v106 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)(v89 + 24) | v90))
      {
        if (v104)
          goto LABEL_98;
LABEL_153:
        v117 = *(_DWORD *)(*(_QWORD *)v91 + 192);
LABEL_107:
        llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(v91 + 2), v117);
        v90 = v157;
        *(_QWORD *)&v4 = v159;
        v93 = *v94;
        goto LABEL_99;
      }
      v107 = 0;
LABEL_88:
      v108 = *(_QWORD *)v91;
      v109 = v93 + 16 * v91[4];
      v110 = *(unsigned int *)(v109 - 4);
      v111 = *(_QWORD *)(*(_QWORD *)(v109 - 16) + 16 * v110 + 8);
      v112 = *(_QWORD *)(v61 + 16);
      if (v112 < 8
        || (*(_DWORD *)((v111 & 0xFFFFFFFFFFFFFFF8) + 24) | (v111 >> 1) & 3) > (*(_DWORD *)((v112 & 0xFFFFFFFFFFFFFFF8) + 24) | (v112 >> 1) & 3))
      {
        *(_QWORD *)(v61 + 16) = v111;
        if (v107)
        {
LABEL_91:
          *(_DWORD *)(v109 - 4) = v110 + 1;
          if ((_DWORD)v110 + 1 == *(_DWORD *)(v93 + 16 * v91[4] - 8))
          {
            v113 = *(unsigned int *)(v108 + 192);
            if ((_DWORD)v113)
            {
              v141 = 1;
              v142 = v113 + 1;
              v143 = (_DWORD *)(v93 + 16 * v113 - 8);
              while (1)
              {
                v144 = v143;
                if (v142 == 2)
                  break;
                v146 = *v143;
                v145 = v143[1];
                v147 = *v143 - 1;
                --v142;
                v143 -= 4;
                if (v145 != v147)
                {
                  v141 = v142;
                  goto LABEL_143;
                }
              }
              v146 = *(_DWORD *)(v93 + 8);
              v145 = *(_DWORD *)(v93 + 12);
LABEL_143:
              v148 = v145 + 1;
              v144[1] = v148;
              if (v148 != v146)
              {
                v149 = *(_QWORD *)(*((_QWORD *)v144 - 1) + 8 * v148);
                if ((_DWORD)v113 != v141)
                {
                  do
                  {
                    v151 = *v94 + 16 * v141;
                    *(_QWORD *)v151 = v149 & 0xFFFFFFFFFFFFFFC0;
                    *(_DWORD *)(v151 + 8) = (v149 & 0x3F) + 1;
                    *(_DWORD *)(v151 + 12) = 0;
                    ++v141;
                    v149 = *(_QWORD *)(v149 & 0xFFFFFFFFFFFFFFC0);
                  }
                  while ((_DWORD)v113 != v141);
                  v93 = *v94;
                }
                v150 = (unint64_t *)(v93 + 16 * v113);
                *v150 = v149 & 0xFFFFFFFFFFFFFFC0;
                v150[1] = (v149 & 0x3F) + 1;
              }
            }
          }
        }
      }
      else if (v107)
      {
        goto LABEL_91;
      }
LABEL_95:
      if (++v88 == v63)
      {
        v152 = v70 & 0xFFFFFFFFFFFFFFF8;
        v118 = a1[14];
        if ((_DWORD)v118)
        {
          v119 = 0;
          v120 = 112 * v118;
          do
          {
            v121 = *((_QWORD *)a1 + 6) + v119;
            v123 = *(_QWORD *)(v121 + 96);
            v122 = *(_QWORD **)(v121 + 104);
            if (v122 != (_QWORD *)(*(_QWORD *)v123 + 24 * *(unsigned int *)(v123 + 8))
              && ((*v122 >> 1) & 3 | *(_DWORD *)((*v122 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)(v152 + 24) | v90))
            {
              v124 = (_QWORD *)sub_1C50E5A80(*(_QWORD *)(v121 + 96), (uint64_t)v122, v70);
              v90 = v157;
              *(_QWORD *)(v121 + 104) = v124;
              if (v124 == (_QWORD *)(*(_QWORD *)v123 + 24 * *(unsigned int *)(v123 + 8))
                || ((*v124 >> 1) & 3 | *(_DWORD *)((*v124 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)(v152 + 24) | v157))
              {
                v124 -= 3;
                *(_QWORD *)(v121 + 104) = v124;
                v125 = 1;
              }
              else
              {
                v125 = 0;
              }
              v126 = v124[1];
              v127 = *(_QWORD *)(v61 + 16);
              *(_QWORD *)&v4 = v159;
              if (v127 < 8
                || (*(_DWORD *)((v126 & 0xFFFFFFFFFFFFFFF8) + 24) | (v126 >> 1) & 3) > (*(_DWORD *)((v127 & 0xFFFFFFFFFFFFFFF8) + 24) | (v127 >> 1) & 3))
              {
                *(_QWORD *)(v61 + 16) = v126;
              }
              if (v125)
                *(_QWORD *)(v121 + 104) = v124 + 3;
            }
            v119 += 112;
          }
          while (v120 != v119);
        }
        goto LABEL_121;
      }
    }
    v103 = (_DWORD *)(v93 - 4);
    v104 = *(_DWORD *)(v93 - 4);
    *(_QWORD *)&v4 = v159;
    if (!v104)
      goto LABEL_153;
    goto LABEL_106;
  }
LABEL_121:
  for (k = 8 * v87; k; k -= 8)
  {
    v129 = *(_QWORD *)(v61 + 16);
    if (v129 <= 7)
      v129 = v4;
    v130 = v129 & 0xFFFFFFFFFFFFFFF8;
    v131 = (v129 >> 1) & 3;
    v132 = *(_QWORD *)(v155 + 8 * v86 - 8 + k) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)(v132 + 24) | 3u) <= (*(_DWORD *)(v130 + 24) | v131))
      break;
    v133 = *a1;
    v134 = *(_DWORD *)(*(_QWORD *)(v153 + 8 * v86 - 8 + k) + ((v133 >> 3) & 0x1FFFFFFC));
    if (((v134 >> v133) & 1) == 0)
    {
      *(_QWORD *)(v61 + 16) = v132 | 6;
      return;
    }
  }
}

uint64_t sub_1C50E5A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  result = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v4 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
  if (v4 < ((*(_QWORD *)(result - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(result - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                           + 24)))
  {
    result = a2 - 24;
    do
    {
      v5 = (*(_QWORD *)(result + 32) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24);
      result += 24;
    }
    while (v5 <= v4);
  }
  return result;
}

void sub_1C50E5AE4(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;

  v21 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 112, &v21);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[112 * v5];
    v7 = (uint64_t)(v4 + 8);
    v8 = 0x400000000;
    v9 = v3;
    do
    {
      v10 = v7 - 8;
      *(_QWORD *)v9 = *(_QWORD *)(v7 - 8);
      *((_QWORD *)v9 + 1) = v9 + 24;
      *((_QWORD *)v9 + 2) = v8;
      if (*(_DWORD *)(v7 + 8))
      {
        v18 = v9;
        v19 = v7;
        v16 = v6;
        v17 = v8;
        sub_1C50E5C18((uint64_t)(v9 + 8), v7);
        v9 = v18;
        v7 = v19;
        v8 = v17;
        v6 = v16;
      }
      v11 = *(_OWORD *)(v10 + 88);
      *((_QWORD *)v9 + 13) = *(_QWORD *)(v10 + 104);
      *(_OWORD *)(v9 + 88) = v11;
      v9 += 112;
      v7 += 112;
    }
    while ((char *)(v10 + 112) != v6);
    v4 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 112 * v12;
      do
      {
        v14 = *(char **)&v4[v13 - 104];
        if (&v4[v13 - 88] != v14)
        {
          v20 = v4;
          free(v14);
          v4 = v20;
        }
        v13 -= 112;
      }
      while (v13);
      v4 = *(char **)a1;
    }
  }
  v15 = v21;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v15;
}

uint64_t sub_1C50E5C18(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 16);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 16 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v8), (const void *)(*(_QWORD *)a2 + 16 * v8), *(_QWORD *)a2 + 16 * v9 - (*(_QWORD *)a2 + 16 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

_DWORD *sub_1C50E5D4C(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = result + 2;
  v2 = *((_QWORD *)result + 1);
  v4 = result[4];
  v5 = v2 + 16 * v4;
  v6 = *(_QWORD *)(v5 - 16);
  v7 = *(_QWORD *)(v6 + 16 * (*(_DWORD *)(v5 - 8) - 1) + 8);
  v8 = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 >> 1) & 3;
  v11 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | v10;
  if (v8 > v11)
  {
    v12 = *(_DWORD *)(v5 - 4);
    do
      v13 = *(_QWORD *)(v6 + 16 * v12++ + 8);
    while (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
    *(_DWORD *)(v5 - 4) = v12 - 1;
    return result;
  }
  v14 = result;
  result[4] = v4 - 1;
  v15 = v4 - 2;
  if ((_DWORD)v4 == 2)
  {
    v34 = *(_QWORD *)result;
    v35 = *(unsigned int *)(v2 + 12);
  }
  else
  {
    v16 = (v4 - 3);
    if ((_DWORD)v4 != 3)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * v16)
                      + 8 * *(unsigned int *)(v2 + 16 * v16 + 12)
                      + 96);
      if (((v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11)
      {
LABEL_12:
        v22 = (uint64_t *)(v2 + 16 * v15);
        v23 = *v22;
        v26 = *((_DWORD *)v22 + 3);
        v24 = (_DWORD *)v22 + 3;
        v25 = v26;
        do
          v27 = *(_QWORD *)(v23 + 8 * v25++ + 96);
        while (((v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
        *v24 = v25 - 1;
        v28 = result[4];
        v29 = *(_DWORD *)(*(_QWORD *)result + 192);
        v30 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * (v28 - 1))
                        + 8 * *(unsigned int *)(v2 + 16 * (v28 - 1) + 12));
        v31 = v29 - v28;
        if (v29 != v28)
        {
          do
          {
            v50 = v30 & 0xFFFFFFFFFFFFFFC0;
            LODWORD(v51) = -1;
            do
            {
              v51 = (v51 + 1);
              v52 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFC0) + 8 * v51 + 0x60);
            }
            while (((v52 >> 1) & 3 | *(_DWORD *)((v52 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | v10));
            sub_1C4A079DC(v3, v30, v51);
            v30 = *(_QWORD *)(v50 + 8 * v51);
            --v31;
          }
          while (v31);
        }
        LODWORD(v32) = -1;
        do
        {
          v32 = (v32 + 1);
          v33 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFC0) + 16 * v32 + 8);
        }
        while (((v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | v10));
        return sub_1C4A079DC(v3, v30, v32);
      }
      v18 = 16 * v16;
      while (1)
      {
        result[4] = v15;
        v19 = v18 - 16;
        if (v18 == 16)
          break;
        v20 = *(_QWORD *)(*(_QWORD *)(v2 + v18 - 16) + 8 * *(unsigned int *)(v2 + v18 - 4) + 96);
        v21 = (v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24);
        --v15;
        v18 = v19;
        if (v21 > v11)
          goto LABEL_12;
      }
    }
    v34 = *(_QWORD *)result;
    v35 = *(unsigned int *)(v2 + 12);
    v36 = *(_QWORD *)(*(_QWORD *)result + 8 * v35 + 96);
    if (((v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11)
    {
      v37 = *(_DWORD *)(v2 + 28);
      do
        v38 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * v37++ + 96);
      while (((v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
      *(_DWORD *)(v2 + 28) = v37 - 1;
      v39 = result[4];
      v40 = *(_DWORD *)(v34 + 192);
      v30 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * (v39 - 1))
                      + 8 * *(unsigned int *)(v2 + 16 * (v39 - 1) + 12));
      v41 = v40 - v39;
      if (v40 != v39)
      {
        do
        {
          v53 = v30 & 0xFFFFFFFFFFFFFFC0;
          LODWORD(v54) = -1;
          do
          {
            v54 = (v54 + 1);
            v55 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFC0) + 8 * v54 + 0x60);
          }
          while (((v55 >> 1) & 3 | *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | v10));
          sub_1C4A079DC(v3, v30, v54);
          v30 = *(_QWORD *)(v53 + 8 * v54);
          --v41;
        }
        while (v41);
      }
      LODWORD(v32) = -1;
      do
      {
        v32 = (v32 + 1);
        v42 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFC0) + 16 * v32 + 8);
      }
      while (((v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | v10));
      return sub_1C4A079DC(v3, v30, v32);
    }
  }
  v43 = *(unsigned int *)(v34 + 196);
  if ((_DWORD)v35 != (_DWORD)v43)
  {
    v44 = v34 + 8;
    while (1)
    {
      v45 = *(_QWORD *)(v44 + 8 * v35 + 88);
      if (((v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11)
        break;
      v35 = (v35 + 1);
      if ((_DWORD)v43 == (_DWORD)v35)
      {
        v35 = v43;
        break;
      }
    }
  }
  result = sub_1C4A078FC(result, v35);
  v46 = v14[4];
  if (v46 && *(_DWORD *)(*(_QWORD *)v3 + 12) < *(_DWORD *)(*(_QWORD *)v3 + 8))
  {
    v47 = *(_DWORD *)(*(_QWORD *)v14 + 192);
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 16 * (v46 - 1))
                    + 8 * *(unsigned int *)(*(_QWORD *)v3 + 16 * (v46 - 1) + 12));
    v48 = v47 - v46;
    if (v47 != v46)
    {
      do
      {
        v56 = v30 & 0xFFFFFFFFFFFFFFC0;
        LODWORD(v57) = -1;
        do
        {
          v57 = (v57 + 1);
          v58 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFC0) + 8 * v57 + 0x60);
        }
        while (((v58 >> 1) & 3 | *(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | v10));
        sub_1C4A079DC(v3, v30, v57);
        v30 = *(_QWORD *)(v56 + 8 * v57);
        --v48;
      }
      while (v48);
    }
    LODWORD(v32) = -1;
    do
    {
      v32 = (v32 + 1);
      v49 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFC0) + 16 * v32 + 8);
    }
    while (((v49 >> 1) & 3 | *(_DWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | v10));
    return sub_1C4A079DC(v3, v30, v32);
  }
  return result;
}

uint64_t sub_1C50E619C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Lower interleaved memory accesses to target specific intrinsics";
  *(_QWORD *)(v2 + 8) = 63;
  *(_QWORD *)(v2 + 16) = "interleaved-access";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F92B0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50E6324;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createInterleavedAccessPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C50E6258(v1);
}

uint64_t sub_1C50E6258(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F92B0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8142EC0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F92B8);
  if (v3 != -1)
  {
    v7[0] = sub_1C50E619C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F92B8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50E6324()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50E6258(v0);
}

void sub_1C50E6350(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50E6374()
{
  return "Interleaved Access Pass";
}

void sub_1C50E6384(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C50E63B4(uint64_t a1, uint64_t a2)
{
  uint64_t AnalysisPass;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void **v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  int *v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  _QWORD *v64;
  int v65;
  int *v66;
  uint64_t v67;
  int *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  BOOL v76;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  _QWORD *v95;
  int v96;
  int *v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 **v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  const llvm::Value **v112;
  const llvm::Value *v113;
  unsigned __int8 *v114;
  const void *v115;
  unint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned __int8 *v124;
  BOOL v125;
  _QWORD *v126;
  char v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned __int8 *v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::ValueAsMetadata *v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  const llvm::APInt *v141;
  llvm::ConstantInt *v142;
  unsigned int v143;
  unint64_t v144;
  llvm::ValueHandleBase *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  llvm::ValueAsMetadata **v150;
  llvm::ValueAsMetadata *v151;
  uint64_t v152;
  llvm::PoisonValue *v153;
  char *v154;
  _QWORD *v155;
  llvm::Type *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  llvm::ValueAsMetadata **v162;
  llvm::ValueAsMetadata *v163;
  int v164;
  int v165;
  llvm::ValueAsMetadata *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  llvm::PoisonValue **v171;
  llvm::Type *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::ValueAsMetadata **v178;
  llvm::ValueAsMetadata *v179;
  int v180;
  int v181;
  llvm::ValueAsMetadata *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  int v193;
  int v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  llvm::Value *v199;
  void (**v200)(void);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  const void *v209;
  unint64_t v210;
  uint64_t ***v211;
  unsigned int v212;
  const llvm::Value **v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  char *v217;
  char *v218;
  int v219;
  _QWORD *v220;
  _BOOL4 v221;
  llvm::ConstantInt *v222;
  llvm::ValueAsMetadata **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  int v229;
  int v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _BYTE **v234;
  _QWORD *v235;
  _QWORD *v236;
  unsigned int v237;
  uint64_t v238;
  _BYTE **v239;
  int64x2_t v240;
  uint64_t v241;
  uint64_t v242;
  const llvm::Value **v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL4 v247;
  unint64_t v248;
  unsigned int v249;
  void *v250;
  uint64_t v251;
  _BYTE v252[256];
  void *v253;
  uint64_t v254;
  _BYTE v255[16];
  uint64_t v256;
  int64x2_t v257;
  int64x2_t v258;
  void *v259;
  uint64_t v260;
  _BYTE v261[32];
  void *v262;
  uint64_t v263;
  _BYTE v264[32];
  void *v265;
  uint64_t v266;
  _BYTE v267[32];
  unsigned __int8 *v268[3];
  unsigned __int8 **v269;
  __int16 v270;
  void *v271;
  uint64_t v272;
  _BYTE v273[16];
  __int16 v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  void **v278;
  _QWORD *v279;
  uint64_t v280;
  int v281;
  __int16 v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  _QWORD v287[3];

  v287[1] = *MEMORY[0x1E0C80C00];
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass
    || ((v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) != 0? (v6 = byte_1ED7F9270 == 0): (v6 = 1), v6))
  {
LABEL_7:
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  v9 = v5;
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 112) + 16))(*(_QWORD *)(v9 + 112), a2);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 120))(v12);
  *(_QWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1256))(v13);
  v250 = v252;
  v251 = 0x2000000000;
  v14 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v14)
      goto LABEL_7;
    v16 = i - 24;
    if (!i)
      v16 = 0;
    v17 = *(_QWORD *)(v16 + 48);
    if (v17 != v16 + 40)
      break;
  }
  v7 = 0;
  v18 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v240 = v18;
  while (2)
  {
    if (v17)
      v19 = v17 - 24;
    else
      v19 = 0;
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 == 60)
      v21 = v19;
    else
      v21 = 0;
    if (!v17 || v20 != 60)
      goto LABEL_31;
    v22 = *(unsigned __int8 *)(v21 + 16);
    if (v22 == 60 || v22 == 61)
    {
      v23 = *(_WORD *)(v21 + 18);
      if ((v23 & 0x380) != 0 || (v23 & 1) != 0)
        goto LABEL_29;
    }
    else if ((v22 - 63) < 3 || (*(_WORD *)(v21 + 18) & 1) != 0)
    {
LABEL_29:
      v24 = 0;
      v20 = 60;
      goto LABEL_30;
    }
    if (*(_BYTE *)(*(_QWORD *)v21 + 8) == 19)
      goto LABEL_29;
    v265 = v267;
    v266 = 0x400000000;
    v262 = v264;
    v263 = 0x400000000;
    v256 = 1;
    v18.i32[1] = v240.i32[1];
    v257 = v240;
    v258 = v240;
    v259 = v261;
    v260 = 0x400000000;
    v36 = *(_QWORD *)(v21 + 8);
    if (!v36)
    {
      v46 = 0;
      v45 = 0;
      goto LABEL_95;
    }
    do
    {
      v37 = *(_QWORD *)(v36 + 24);
      v38 = *(unsigned __int8 *)(v37 + 16);
      if (v37 && v38 == 89)
      {
        if (*(_BYTE *)(*(_QWORD *)(v37 - 32) + 16) != 16)
          goto LABEL_100;
        v39 = v263;
        v40 = &v262;
        if (v263 >= (unint64_t)HIDWORD(v263))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v262, (uint64_t)v264, v263 + 1, 8);
          v39 = v263;
        }
LABEL_85:
        *((_QWORD *)*v40 + v39) = v37;
        ++*((_DWORD *)v40 + 2);
        goto LABEL_86;
      }
      if (v37)
        v41 = v38 >= 0x1C;
      else
        v41 = 0;
      if (!v41 || v38 - 59 < 0xFFFFFFEE)
      {
LABEL_80:
        v24 = 0;
        if (!v37 || v38 != 91)
          goto LABEL_101;
        if (*(unsigned __int8 *)(*(_QWORD *)(v37 - 32) + 16) - 11 > 1)
          goto LABEL_100;
        v39 = v266;
        v40 = &v265;
        if (v266 >= (unint64_t)HIDWORD(v266))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, (uint64_t)v267, v266 + 1, 8);
          v39 = v266;
        }
        goto LABEL_85;
      }
      v43 = *(_QWORD *)(v37 + 8);
      v44 = v43;
      if (v43)
      {
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v44 + 24) + 16) != 91)
            goto LABEL_80;
          v44 = *(_QWORD *)(v44 + 8);
        }
        while (v44);
        do
        {
          v271 = *(void **)(v43 + 24);
          sub_1C61ABE04((uint64_t)&v256, (uint64_t *)&v271);
          v43 = *(_QWORD *)(v43 + 8);
        }
        while (v43);
      }
LABEL_86:
      v36 = *(_QWORD *)(v36 + 8);
    }
    while (v36);
    v45 = v266;
    v46 = v260;
LABEL_95:
    if (!(v45 | v46)
      || ((v47 = (char *)v265, v48 = v259, v45) ? (v49 = (uint64_t **)v265) : (v49 = (uint64_t **)v259),
          v50 = *v49,
          v51 = *((unsigned int *)v50 + 18),
          v51 < 2))
    {
LABEL_100:
      v24 = 0;
      goto LABEL_101;
    }
    v24 = 0;
    v52 = *(_DWORD *)(a1 + 48);
    if (v52 >= 2)
    {
      v53 = *(unsigned int *)(*(_QWORD *)v21 + 32);
      if (2 * v51 <= v53)
      {
        v54 = 2;
        while (!v54)
        {
LABEL_121:
          v24 = 0;
          if (++v54 > v52 || v51 * (unint64_t)v54 > v53)
            goto LABEL_101;
        }
        v55 = 0;
LABEL_115:
        v56 = (int *)v50[8];
        v57 = v55;
        v58 = *((unsigned int *)v50 + 18);
        do
        {
          v60 = *v56++;
          v59 = v60;
          if ((v60 & 0x80000000) == 0 && v57 != v59)
          {
            if (++v55 != v54)
              goto LABEL_115;
            goto LABEL_121;
          }
          v57 += v54;
          --v58;
        }
        while (v58);
        v253 = v255;
        v254 = 0x400000000;
        v61 = *v50;
        v212 = v54;
        v62 = 0;
        if (v45)
        {
          v63 = (char *)v265 + 8 * v45;
          do
          {
            v64 = *(_QWORD **)v47;
            if (**(_QWORD **)v47 != v61)
              goto LABEL_343;
            v65 = 0;
            v66 = (int *)v64[8];
            v67 = *((unsigned int *)v64 + 18);
            while ((_DWORD)v67)
            {
              v68 = v66;
              v69 = v65;
              v70 = v67;
              while (1)
              {
                v72 = *v68++;
                v71 = v72;
                if ((v72 & 0x80000000) == 0 && v69 != v71)
                  break;
                v69 += v54;
                if (!--v70)
                  goto LABEL_137;
              }
              if (++v65 == v54)
                goto LABEL_343;
            }
            v65 = 0;
LABEL_137:
            if (v62 >= HIDWORD(v254))
            {
              v241 = v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v62 + 1, 4);
              v61 = v241;
              v54 = v212;
              v62 = v254;
            }
            *((_DWORD *)v253 + v62) = v65;
            v62 = v254 + 1;
            LODWORD(v254) = v254 + 1;
            v47 += 8;
          }
          while (v47 != v63);
          v48 = v259;
          v46 = v260;
        }
        if (v46)
        {
          v93 = &v48[v46];
          if (v54 <= 1)
            v94 = 1;
          else
            v94 = v54;
          while (1)
          {
            v95 = (_QWORD *)*v48;
            if (*(_QWORD *)*v48 != v61)
              break;
            v96 = 0;
            while (*((_DWORD *)v95 + 18))
            {
              v97 = (int *)v95[8];
              v98 = v96;
              v99 = *((unsigned int *)v95 + 18);
              while (1)
              {
                v101 = *v97++;
                v100 = v101;
                if ((v101 & 0x80000000) == 0 && v98 != v100)
                  break;
                v98 += v54;
                if (!--v99)
                  goto LABEL_199;
              }
              if (++v96 == v94)
                goto LABEL_343;
            }
            v96 = 0;
LABEL_199:
            v102 = *(v95 - 8);
            v103 = *(_DWORD *)(v102 + 20);
            if ((v103 & 0x40000000) != 0)
              v104 = *(_QWORD **)(v102 - 8);
            else
              v104 = (_QWORD *)(v102 - 32 * (v103 & 0x7FFFFFF));
            if (*v104 == v21)
            {
              if (v62 >= HIDWORD(v254))
              {
                v242 = v61;
                v235 = v93;
                v229 = v94;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v62 + 1, 4);
                v94 = v229;
                v93 = v235;
                v61 = v242;
                v54 = v212;
                v62 = v254;
              }
              *((_DWORD *)v253 + v62) = v96;
              v62 = v254 + 1;
              LODWORD(v254) = v254 + 1;
              v102 = *(v95 - 8);
              v103 = *(_DWORD *)(v102 + 20);
            }
            if ((v103 & 0x40000000) != 0)
              v105 = *(_QWORD *)(v102 - 8);
            else
              v105 = v102 - 32 * (v103 & 0x7FFFFFF);
            if (*(_QWORD *)(v105 + 32) == v21)
            {
              if (v62 >= HIDWORD(v254))
              {
                v106 = v61;
                v236 = v93;
                v230 = v94;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v253, (uint64_t)v255, v62 + 1, 4);
                v94 = v230;
                v93 = v236;
                v61 = v106;
                v54 = v212;
                v62 = v254;
              }
              *((_DWORD *)v253 + v62) = v96;
              v62 = v254 + 1;
              LODWORD(v254) = v254 + 1;
            }
            if (++v48 == v93)
              goto LABEL_214;
          }
LABEL_343:
          v24 = 0;
LABEL_344:
          if (v253 != v255)
            free(v253);
          goto LABEL_101;
        }
LABEL_214:
        v215 = v21;
        if (!(_DWORD)v263)
          goto LABEL_290;
        v24 = 0;
        v227 = 0;
        v107 = (unsigned __int8 **)v262;
        v218 = (char *)v262 + 8 * v263;
        v219 = v266;
        v213 = (const llvm::Value **)v265;
        v243 = (const llvm::Value **)((char *)v265 + 8 * v266);
        v245 = 0;
        v246 = 0;
        v247 = 0;
        v211 = (uint64_t ***)v262;
        while (1)
        {
          v231 = (unint64_t)v107;
          v108 = *v107;
          v268[0] = v108;
          v109 = *((_QWORD *)v108 - 4);
          v110 = *(_DWORD *)(v109 + 32);
          v111 = v110 > 0x40
               ? **(_QWORD **)(v109 + 24)
               : (uint64_t)(*(_QWORD *)(v109 + 24) << -(char)v110) >> -(char)v110;
          v237 = v108 >> 4;
          if (v219)
            break;
LABEL_251:
          if (!v24)
          {
            MEMORY[0x1CAA32FB4](v227, 8);
            goto LABEL_344;
          }
          v130 = v24 ? 0 : v237 ^ (v108 >> 9);
          v131 = *(unsigned __int8 **)(v227 + 24 * v130);
          if (v108 != v131)
          {
            v132 = 1;
            while (v131 != (unsigned __int8 *)-4096)
            {
              v133 = v130 + v132++;
              v130 = v24 ? 0 : v133;
              v131 = *(unsigned __int8 **)(v227 + 24 * v130);
              if (v108 == v131)
                goto LABEL_253;
            }
            MEMORY[0x1CAA32FB4](v227, 8);
            goto LABEL_343;
          }
LABEL_253:
          v107 = (unsigned __int8 **)(v231 + 8);
          v21 = v215;
          if ((char *)(v231 + 8) == v218)
          {
            v134 = ***v211;
            v271 = v273;
            v272 = 0x200000000;
            v277 = v134;
            v278 = &v286;
            v279 = v287;
            v280 = 0;
            v281 = 0;
            v282 = 512;
            v283 = 7;
            v275 = 0;
            v276 = 0;
            v284 = 0;
            v285 = 0;
            v286 = &unk_1E8167888;
            v287[0] = &unk_1E8167A08;
            v135 = v227 + 24 * v24;
            if ((_DWORD)v246)
            {
              v136 = 24 * v24;
              v137 = v227;
              while ((*(_QWORD *)v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v137 += 24;
                v136 -= 24;
                if (!v136)
                  goto LABEL_264;
              }
            }
            else
            {
LABEL_264:
              v137 = v227 + 24 * v24;
            }
            v225 = v227 + 24 * v24;
            if (v137 != v225)
            {
              do
              {
                v138 = *(llvm::ValueAsMetadata **)v137;
                v232 = *(int *)(v137 + 16);
                v238 = *(_QWORD *)(v137 + 8);
                v275 = *(_QWORD *)(*(_QWORD *)v137 + 40);
                v276 = (_QWORD *)((char *)v138 + 24);
                v139 = (unsigned __int8 *)*((_QWORD *)v138 + 6);
                v268[0] = v139;
                if (v139)
                {
                  llvm::MetadataTracking::track((uint64_t)v268, v139, 2);
                  v140 = v268[0];
                }
                else
                {
                  v140 = 0;
                }
                sub_1C4774EF4((uint64_t)&v271, 0, (uint64_t)v140);
                if (v268[0])
                  llvm::MetadataTracking::untrack((uint64_t)v268, v268[0]);
                v270 = 257;
                v142 = *(llvm::ConstantInt **)(*(_QWORD *)v277 + 1984);
                v143 = *(_DWORD *)(*(_QWORD *)v277 + 1992);
                v249 = v143 >> 8;
                if (v143 >> 8 > 0x40)
                {
                  v222 = v142;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v248, v232, 0);
                  v142 = v222;
                }
                else
                {
                  if (v143 <= 0xFF)
                    v144 = 0;
                  else
                    v144 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v143);
                  v248 = v144 & v232;
                }
                v145 = llvm::ConstantInt::get(v142, (llvm::LLVMContext *)&v248, v141);
                if (v249 >= 0x41 && v248)
                {
                  v233 = (unint64_t)v145;
                  MEMORY[0x1CAA32F9C](v248, 0x1000C8000313F17);
                  v145 = (llvm::ValueHandleBase *)v233;
                }
                v146 = sub_1C4772EE0((uint64_t *)&v271, v238, (uint64_t)v145, (uint64_t)v268);
                llvm::Value::doRAUW(v138, (llvm::Value *)v146, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v138 + 5) + 40, (uint64_t ***)v138);
                v147 = *((_QWORD *)v138 + 3);
                v148 = (_QWORD *)*((_QWORD *)v138 + 4);
                *v148 = v147;
                *(_QWORD *)(v147 + 8) = v148;
                *((_QWORD *)v138 + 3) = 0;
                *((_QWORD *)v138 + 4) = 0;
                llvm::Value::deleteValue(v138);
                v149 = v137 + 24;
                v137 = v135;
                if (v149 != v135)
                {
                  v137 = v149;
                  while ((*(_QWORD *)v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v137 += 24;
                    if (v137 == v135)
                    {
                      v137 = v135;
                      break;
                    }
                  }
                }
              }
              while (v137 != v225);
              if (v271 != v273)
                free(v271);
            }
            MEMORY[0x1CAA32FB4](v227, 8);
LABEL_290:
            v214 = v260;
            if (!(_DWORD)v260)
            {
LABEL_337:
              if (((*(uint64_t (**)(_QWORD, uint64_t, void *, _QWORD, void *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 1264))(*(_QWORD *)(a1 + 40), v21, v265, v266, v253, v254, v212) & 1) != 0)
              {
                sub_1C6177054((unsigned int *)&v250, (char *)v265, (char *)v265 + 8 * v266);
                v203 = v251;
                if (v251 >= (unint64_t)HIDWORD(v251))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v250, (uint64_t)v252, v251 + 1, 8);
                  v203 = v251;
                }
                *((_QWORD *)v250 + v203) = v215;
                LODWORD(v251) = v251 + 1;
                v24 = 1;
              }
              else
              {
                v24 = (v263 | v214) != 0;
              }
              goto LABEL_344;
            }
            v150 = (llvm::ValueAsMetadata **)v259;
            v217 = (char *)v259 + 8 * v260;
            while (2)
            {
              v151 = *v150;
              v152 = *((_QWORD *)*v150 - 8);
              v153 = **(llvm::PoisonValue ***)(v152 - 64);
              v228 = (void *)*((_QWORD *)*v150 + 8);
              v223 = v150;
              v226 = *((unsigned int *)*v150 + 18);
              v154 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v154 + 21) = *((_DWORD *)v154 + 21) & 0x38000000 | 2;
              *(_QWORD *)v154 = 0;
              *((_QWORD *)v154 + 1) = 0;
              *((_QWORD *)v154 + 2) = 0;
              *((_QWORD *)v154 + 3) = v154 + 64;
              *((_QWORD *)v154 + 4) = 0;
              *((_QWORD *)v154 + 5) = 0;
              *((_QWORD *)v154 + 6) = 0;
              *((_QWORD *)v154 + 7) = v154 + 64;
              v239 = (_BYTE **)(v154 + 64);
              v220 = v154;
              v244 = v152;
              v155 = *(_QWORD **)(v152 - 64);
              v157 = llvm::PoisonValue::get(v153, v156);
              if ((*((_BYTE *)v151 + 23) & 0x10) != 0)
              {
                v158 = ***(_QWORD ***)v151;
                v159 = *(_QWORD *)(v158 + 152);
                v160 = *(unsigned int *)(v158 + 168);
                if (!(_DWORD)v160)
                  goto LABEL_299;
                LODWORD(v161) = (v160 - 1) & ((v151 >> 4) ^ (v151 >> 9));
                v162 = (llvm::ValueAsMetadata **)(v159 + 16 * v161);
                v163 = *v162;
                if (*v162 != v151)
                {
                  v164 = 1;
                  while (v163 != (llvm::ValueAsMetadata *)-4096)
                  {
                    v165 = v161 + v164++;
                    v161 = v165 & (v160 - 1);
                    v163 = *(llvm::ValueAsMetadata **)(v159 + 16 * v161);
                    if (v163 == v151)
                    {
                      v162 = (llvm::ValueAsMetadata **)(v159 + 16 * v161);
                      goto LABEL_300;
                    }
                  }
LABEL_299:
                  v162 = (llvm::ValueAsMetadata **)(v159 + 16 * v160);
                }
LABEL_300:
                v166 = v162[1];
                v169 = *(_QWORD *)v166;
                v168 = (char *)v166 + 16;
                v167 = v169;
              }
              else
              {
                v167 = 0;
                v168 = &byte_1C871356D;
              }
              v274 = 261;
              v271 = v168;
              v272 = v167;
              llvm::ShuffleVectorInst::ShuffleVectorInst(v239, v155, (uint64_t)v157, v228, v226, (uint64_t)&v271, (uint64_t)v151);
              v170 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v170 + 21) = *((_DWORD *)v170 + 21) & 0x38000000 | 2;
              *(_QWORD *)v170 = 0;
              *((_QWORD *)v170 + 1) = 0;
              *((_QWORD *)v170 + 2) = 0;
              *((_QWORD *)v170 + 3) = v170 + 64;
              *((_QWORD *)v170 + 4) = 0;
              *((_QWORD *)v170 + 5) = 0;
              *((_QWORD *)v170 + 6) = 0;
              *((_QWORD *)v170 + 7) = v170 + 64;
              v234 = (_BYTE **)(v170 + 64);
              v171 = *(llvm::PoisonValue ***)(v244 - 32);
              v173 = llvm::PoisonValue::get(*v171, v172);
              if ((*((_BYTE *)v151 + 23) & 0x10) != 0)
              {
                v174 = ***(_QWORD ***)v151;
                v175 = *(_QWORD *)(v174 + 152);
                v176 = *(unsigned int *)(v174 + 168);
                if (!(_DWORD)v176)
                  goto LABEL_308;
                LODWORD(v177) = (v176 - 1) & ((v151 >> 4) ^ (v151 >> 9));
                v178 = (llvm::ValueAsMetadata **)(v175 + 16 * v177);
                v179 = *v178;
                if (*v178 != v151)
                {
                  v180 = 1;
                  while (v179 != (llvm::ValueAsMetadata *)-4096)
                  {
                    v181 = v177 + v180++;
                    v177 = v181 & (v176 - 1);
                    v179 = *(llvm::ValueAsMetadata **)(v175 + 16 * v177);
                    if (v179 == v151)
                    {
                      v178 = (llvm::ValueAsMetadata **)(v175 + 16 * v177);
                      goto LABEL_309;
                    }
                  }
LABEL_308:
                  v178 = (llvm::ValueAsMetadata **)(v175 + 16 * v176);
                }
LABEL_309:
                v182 = v178[1];
                v185 = *(_QWORD *)v182;
                v184 = (char *)v182 + 16;
                v183 = v185;
              }
              else
              {
                v183 = 0;
                v184 = &byte_1C871356D;
              }
              v274 = 261;
              v271 = v184;
              v272 = v183;
              llvm::ShuffleVectorInst::ShuffleVectorInst(v234, v171, (uint64_t)v173, v228, v226, (uint64_t)&v271, (uint64_t)v151);
              v186 = *(_BYTE *)(v244 + 16);
              if ((*(_BYTE *)(v244 + 23) & 0x10) != 0)
              {
                v187 = ***(_QWORD ***)v244;
                v188 = *(_QWORD *)(v187 + 152);
                v189 = *(unsigned int *)(v187 + 168);
                if (!(_DWORD)v189)
                  goto LABEL_317;
                LODWORD(v190) = (v189 - 1) & ((v244 >> 4) ^ (v244 >> 9));
                v191 = (uint64_t *)(v188 + 16 * v190);
                v192 = *v191;
                if (*v191 != v244)
                {
                  v193 = 1;
                  while (v192 != -4096)
                  {
                    v194 = v190 + v193++;
                    v190 = v194 & (v189 - 1);
                    v192 = *(_QWORD *)(v188 + 16 * v190);
                    if (v192 == v244)
                    {
                      v191 = (uint64_t *)(v188 + 16 * v190);
                      goto LABEL_318;
                    }
                  }
LABEL_317:
                  v191 = (uint64_t *)(v188 + 16 * v189);
                }
LABEL_318:
                v195 = (_QWORD *)v191[1];
                v198 = *v195;
                v197 = (char *)(v195 + 2);
                v196 = v198;
              }
              else
              {
                v196 = 0;
                v197 = &byte_1C871356D;
              }
              v274 = 261;
              v271 = v197;
              v272 = v196;
              v199 = llvm::BinaryOperator::Create(v186 - 28, v239, (uint64_t)v234, (uint64_t)&v271, (uint64_t)v151);
              llvm::Instruction::copyIRFlags((uint64_t)v199, v244, 1);
              llvm::Value::doRAUW(v151, v199, (llvm::Value *)1);
              v269 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v151, 0, 0, v268);
              if (v269 == v268)
              {
                v200 = (void (**)(void))(v268[0] + 32);
LABEL_323:
                (*v200)();
              }
              else if (v269)
              {
                v200 = (void (**)(void))(*v269 + 40);
                goto LABEL_323;
              }
              if (*v220 == v21)
              {
                v201 = v266;
                if (v266 >= (unint64_t)HIDWORD(v266))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, (uint64_t)v267, v266 + 1, 8);
                  v201 = v266;
                }
                *((_QWORD *)v265 + v201) = v239;
                LODWORD(v266) = v266 + 1;
              }
              if (*(_QWORD *)v170 == v21)
              {
                v202 = v266;
                if (v266 >= (unint64_t)HIDWORD(v266))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v265, (uint64_t)v267, v266 + 1, 8);
                  v202 = v266;
                }
                *((_QWORD *)v265 + v202) = v234;
                LODWORD(v266) = v266 + 1;
              }
              v150 = v223 + 1;
              if (v223 + 1 == (llvm::ValueAsMetadata **)v217)
                goto LABEL_337;
              continue;
            }
          }
        }
        v224 = v111;
        v216 = (v108 >> 4) ^ (v108 >> 9);
        v112 = v213;
        while (2)
        {
          while (1)
          {
            v113 = *v112;
            v114 = v108;
            if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(a1 + 32), *v112, (const llvm::Instruction *)v108))
            {
              break;
            }
            ++v112;
            v108 = v114;
            if (v112 == v243)
              goto LABEL_251;
          }
          v271 = v273;
          v115 = (const void *)*((_QWORD *)v113 + 8);
          v116 = *((unsigned int *)v113 + 18);
          v272 = 0x400000000;
          v221 = v24;
          if (v116 >= 5)
          {
            v209 = v115;
            v210 = v116;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v271, (uint64_t)v273, v116, 4);
            v115 = v209;
            v116 = v210;
            v117 = v272;
            v118 = v271;
LABEL_227:
            v119 = v116;
            memcpy(&v118[4 * v117], v115, 4 * v116);
            v120 = v272;
          }
          else
          {
            if ((_DWORD)v116)
            {
              v117 = 0;
              v118 = v273;
              goto LABEL_227;
            }
            v120 = 0;
            v119 = 0;
          }
          v121 = (v120 + v119);
          LODWORD(v272) = v121;
          v108 = v114;
          if ((_DWORD)v121)
          {
            v122 = 0;
            while (v224 != *((_DWORD *)v271 + v122))
            {
              if (v121 == ++v122)
                goto LABEL_232;
            }
            v126 = sub_1C61E016C((uint64_t)&v245, (uint64_t *)v268);
            v108 = v114;
            v126[1] = v113;
            *((_DWORD *)v126 + 4) = v122;
            v227 = v245;
            v24 = v247;
            if (!v247)
            {
LABEL_236:
              v125 = 0;
              goto LABEL_237;
            }
          }
          else
          {
LABEL_232:
            v24 = v221;
            if (!v221)
              goto LABEL_236;
          }
          v123 = v24 ? 0 : v216;
          v124 = *(unsigned __int8 **)(v227 + 24 * v123);
          if (v108 == v124)
          {
            v125 = 1;
          }
          else
          {
            v128 = 1;
            while (1)
            {
              v125 = v124 != (unsigned __int8 *)-4096;
              if (v124 == (unsigned __int8 *)-4096)
                break;
              v129 = v123 + v128++;
              v123 = v24 ? 0 : v129;
              v124 = *(unsigned __int8 **)(v227 + 24 * v123);
              v108 = v114;
              if (v114 == v124)
                goto LABEL_237;
            }
            v108 = v114;
          }
LABEL_237:
          if (v271 != v273)
          {
            free(v271);
            v108 = v114;
          }
          ++v112;
          v127 = v112 == v243 || v125;
          if ((v127 & 1) != 0)
            goto LABEL_251;
          continue;
        }
      }
    }
LABEL_101:
    if (v259 != v261)
      free(v259);
    if ((v256 & 1) == 0)
      MEMORY[0x1CAA32FB4](v257.i64[0], 8);
    if (v262 != v264)
      free(v262);
    if (v265 != v267)
      free(v265);
    v20 = *(unsigned __int8 *)(v19 + 16);
LABEL_30:
    v7 |= v24;
LABEL_31:
    if (v20 == 61)
      v25 = v19;
    else
      v25 = 0;
    if (v17 && v20 == 61)
    {
      v26 = *(unsigned __int8 *)(v25 + 16);
      if (v26 == 60 || v26 == 61)
      {
        v27 = *(_WORD *)(v25 + 18);
        if ((v27 & 0x380) != 0 || (v27 & 1) != 0)
          goto LABEL_48;
      }
      else if ((v26 - 63) < 3 || (*(_WORD *)(v25 + 18) & 1) != 0)
      {
        goto LABEL_48;
      }
      v28 = 0;
      v29 = *(_QWORD *)(v25 - 64);
      if (v29 && *(_BYTE *)(v29 + 16) == 91)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (!v30 || *(_QWORD *)(v30 + 8) || *(_BYTE *)(*(_QWORD *)v29 + 8) == 19)
          goto LABEL_48;
        v31 = *(_DWORD *)(v29 + 72);
        v32 = *(_DWORD *)(a1 + 48);
        if (v31 < 4 || v32 < 2)
          goto LABEL_48;
        v73 = *(_QWORD *)(v29 + 64);
        v74 = 2;
        do
        {
          v75 = v31 / v74;
          v18.i32[0] = v31 / v74;
          *(int8x8_t *)v18.i8 = vcnt_s8(*(int8x8_t *)v18.i8);
          v18.i16[0] = vaddlv_u8(*(uint8x8_t *)v18.i8);
          v76 = v31 % v74 || v74 > v31;
          if (!v76 && v18.i32[0] <= 1u)
            break;
LABEL_150:
          v28 = 0;
          ++v74;
        }
        while (v74 <= v32);
        v78 = 0;
        v79 = v74;
        while (v75 == 1)
        {
          v81 = 0;
          v80 = 0;
LABEL_166:
          v87 = *(_DWORD *)(v73 + 4 * v78);
          if (v87 < 0)
          {
            v88 = *(_DWORD *)(v73 + 4 * ((v75 - 1) * v74 + v78));
            v89 = v81 - v75 + v80;
            if (v80)
              v90 = v89 + 1;
            else
              v90 = 0;
            if (v88 >= 0)
              v87 = v88 - (v75 - 1);
            else
              v87 = v90;
          }
          if (v87 < 0 || v87 + v75 > (2 * *(_DWORD *)(**(_QWORD **)(v29 - 64) + 32)))
            goto LABEL_177;
          ++v78;
          ++v79;
          if (v78 == v74)
            goto LABEL_178;
        }
        v80 = 0;
        v81 = 0;
        v82 = v79;
        v83 = v78;
        v84 = (v75 - 1);
        while (1)
        {
          v85 = *(_DWORD *)(v73 + 4 * v83);
          v86 = *(_DWORD *)(v73 + 4 * v82);
          if ((v85 & 0x80000000) == 0 && (v86 & 0x80000000) == 0 && v85 + 1 != v86)
            break;
          if (v85 >= 0 && v86 < 0)
          {
            v81 = *(_DWORD *)(v73 + 4 * v83);
            v80 = 1;
          }
          if (v85 < 0)
          {
            if (v80)
            {
              ++v80;
              if ((v86 & 0x80000000) == 0 && v80 + v81 != v86)
                break;
            }
          }
          v83 += v74;
          v82 += v74;
          if (!--v84)
            goto LABEL_166;
        }
LABEL_177:
        if ((_DWORD)v78 != v74)
          goto LABEL_150;
LABEL_178:
        if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 1272))(*(_QWORD *)(a1 + 40), v25, *(_QWORD *)(v25 - 64)))
        {
          v91 = v251;
          if (v251 >= (unint64_t)HIDWORD(v251))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v250, (uint64_t)v252, v251 + 1, 8);
            v91 = v251;
          }
          *((_QWORD *)v250 + v91) = v25;
          v92 = (v251 + 1);
          LODWORD(v251) = v92;
          if (v92 >= HIDWORD(v251))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v250, (uint64_t)v252, v92 + 1, 8);
            LODWORD(v92) = v251;
          }
          *((_QWORD *)v250 + v92) = v29;
          LODWORD(v251) = v251 + 1;
          v28 = 1;
        }
        else
        {
LABEL_48:
          v28 = 0;
        }
      }
      v7 |= v28;
    }
    v17 = *(_QWORD *)(v17 + 8);
    v34 = i - 24;
    if (!i)
      v34 = 0;
    if (v17 != v34 + 40)
    {
LABEL_57:
      if (i == v14)
        goto LABEL_346;
      continue;
    }
    break;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v14)
      break;
    v35 = i - 24;
    if (!i)
      v35 = 0;
    v17 = *(_QWORD *)(v35 + 48);
    if (v17 != v35 + 40)
      goto LABEL_57;
  }
LABEL_346:
  v204 = (uint64_t *)v250;
  if ((_DWORD)v251)
  {
    v205 = 8 * v251;
    do
    {
      v206 = *v204++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v206 + 40) + 40, (uint64_t ***)v206);
      v207 = *(_QWORD *)(v206 + 24);
      v208 = *(_QWORD **)(v206 + 32);
      *v208 = v207;
      *(_QWORD *)(v207 + 8) = v208;
      *(_QWORD *)(v206 + 24) = 0;
      *(_QWORD *)(v206 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v206);
      v205 -= 8;
    }
    while (v205);
    v204 = (uint64_t *)v250;
  }
  if (v204 != (uint64_t *)v252)
    free(v204);
  return v7 & 1;
}

uint64_t sub_1C50E78D4()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Enable lowering interleaved accesses to intrinsics";
  v4.n128_u64[1] = 50;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C614FDB4((llvm::cl::Option *)&unk_1ED7F91F0, "lower-interleaved-accesses", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F91F0, &dword_1C475E000);
}

uint64_t sub_1C50E7954(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeMemorySSAWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Combine interleaved loads into wide loads and shufflevector instructions";
  *(_QWORD *)(v3 + 8) = 72;
  *(_QWORD *)(v3 + 16) = "interleaved-load-combine";
  *(_QWORD *)(v3 + 24) = 24;
  *(_QWORD *)(v3 + 32) = &unk_1ED7F9380;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C50E7AE0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::createInterleavedLoadCombinePass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C50E7A18(v1);
}

uint64_t sub_1C50E7A18(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F9380;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8142F60;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F9388);
  if (v3 != -1)
  {
    v7[0] = sub_1C50E7954;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F9388, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50E7AE0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50E7A18(v0);
}

void sub_1C50E7B0C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C50E7B30()
{
  return "Interleaved Load Combine Pass";
}

void *sub_1C50E7B40(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::MemorySSAWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C50E7B7C(uint64_t a1, const llvm::Function *a2)
{
  char v2;
  uint64_t AnalysisPass;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  llvm::DominatorTree *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *i;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  const char *v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  __int128 *v45;
  BOOL v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  const char *v57;
  char v58;
  char v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *j;
  uint64_t v65;
  int *v66;
  __int128 *v67;
  _BOOL4 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t **v80;
  llvm::Value *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t **v97;
  BOOL v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t **v101;
  unsigned __int16 *v102;
  _QWORD *v103;
  int64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t k;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD **v112;
  int v113;
  int64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  void **v118;
  int v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  void **v123;
  void *v124;
  void **v125;
  uint64_t v126;
  int v127;
  int v128;
  _QWORD *v129;
  unint64_t v130;
  _QWORD **v131;
  _QWORD **v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD **v139;
  _QWORD **v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD **v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  _QWORD *v165;
  _QWORD **v166;
  uint64_t **m;
  uint64_t v168;
  int v169;
  llvm::PointerType *v170;
  llvm::PointerType *v171;
  uint64_t v172;
  unsigned int v173;
  int v174;
  _BOOL4 v175;
  _BOOL4 v176;
  unsigned __int8 *v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned __int16 v180;
  char *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  unsigned __int16 *v189;
  int v190;
  int v191;
  uint64_t v192;
  char *MemoryAccessBefore;
  uint64_t **v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  unint64_t v200;
  void **v201;
  char *v202;
  unint64_t v203;
  void **v204;
  int v205;
  unsigned int v206;
  int v207;
  int v208;
  uint64_t *v209;
  llvm::Type *v210;
  llvm::Type *v211;
  llvm::Type *v212;
  void *v213;
  uint64_t v214;
  _QWORD *v215;
  llvm::Value *v216;
  char *v217;
  char *v218;
  void **v219;
  int v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  uint64_t *v224;
  uint64_t **v225;
  uint64_t *v226;
  uint64_t **v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  llvm::Value *v238;
  char v239;
  uint64_t v240;
  unint64_t v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  uint64_t ***v245;
  llvm::DataLayout *v246;
  unint64_t v247;
  llvm::DominatorTree *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD v258[2];
  uint64_t *v259;
  uint64_t *v260;
  _QWORD *v261[2];
  _QWORD *v262;
  _QWORD *v263[2];
  _QWORD *v264;
  _QWORD *v265;
  unint64_t v266;
  std::string v267;
  void *__p;
  char v269;
  __int128 v270;
  void *v271;
  uint64_t v272;
  _WORD v273[48];
  void *v274;
  unsigned int v275;
  _BYTE *v276;
  void *v277;
  uint64_t v278;
  int v279;
  _BYTE v280[64];
  void *v281;
  uint64_t v282;
  _BYTE v283[64];
  _QWORD **v284;
  _QWORD *v285[2];
  void *v286;
  uint64_t v287;
  _BYTE v288[16];
  void *v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  _BYTE v297[64];
  void *v298;
  unsigned int v299;
  uint64_t v300;
  llvm::Type *v301;
  int v302;
  char v303;
  uint64_t v304;
  __int128 v305;
  const char *v306;
  const char *v307;
  uint64_t v308;
  char v309;
  char v310;
  void *v311;
  uint64_t v312;
  _BYTE v313[260];
  int v314;
  uint64_t v315;
  uint64_t v316;

  v316 = *MEMORY[0x1E0C80C00];
  if (byte_1ED7F9340
    || (AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1)) == 0|| (v7 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID)) == 0)
  {
    v2 = 0;
    return v2 & 1;
  }
  v8 = v7;
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::DominatorTreeWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v12 = **(void ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::MemorySSAWrapperPass::ID);
  v14 = (llvm::DominatorTree *)(v11 + 32);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::MemorySSAWrapperPass::ID);
  v16 = *(_QWORD *)(v8 + 112);
  v248 = v14;
  v249 = *(_QWORD *)(v15 + 32);
  v17 = (*(uint64_t (**)(uint64_t, const llvm::Function *))(*(_QWORD *)v16 + 16))(v16, a2);
  v250 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 120))(v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v16 + 88))(&v251, v16, a2);
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v258, a2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v250 + 1256))(v250);
  if (v18 < 2)
  {
    v239 = 0;
    goto LABEL_338;
  }
  v19 = v18;
  v239 = 0;
  v20 = v18;
  v21 = 8 * v18;
  v246 = (llvm::DataLayout *)(*((_QWORD *)a2 + 5) + 272);
  do
  {
    v243 = v21;
    v241 = v20 - 1;
    v242 = v19;
    v247 = v20;
    if (v20 <= 1)
      v22 = 1;
    else
      v22 = v20;
    v240 = v22;
    v255 = &v255;
    v256 = &v255;
    v257 = 0;
    v23 = (_QWORD *)*((_QWORD *)a2 + 10);
    if (v23 == (_QWORD *)((char *)a2 + 72))
      goto LABEL_331;
    do
    {
      v24 = v23 - 3;
      if (!v23)
        v24 = 0;
      v25 = v24 + 5;
      for (i = (_QWORD *)v24[6]; i != v25; i = (_QWORD *)i[1])
      {
        v27 = (uint64_t)(i - 3);
        if (!i)
          v27 = 0;
        v28 = *(unsigned __int8 *)(v27 + 16);
        if (v28 == 91)
          v29 = v27;
        else
          v29 = 0;
        if (i)
        {
          if (v28 == 91)
          {
            v30 = *(_QWORD *)v29;
            if (*(_BYTE *)(*(_QWORD *)v29 + 8) != 19)
            {
              v31 = operator new(0x70uLL);
              *v31 = 0;
              v31[1] = 0;
              sub_1C50E9BB4(v31 + 2, v30);
              v32 = v255;
              *v31 = v255;
              v31[1] = &v255;
              v32[1] = v31;
              v255 = v31;
              ++v257;
              v33 = sub_1C50E9348(v29, (uint64_t)(v31 + 2), v246);
              v34 = v255;
              if (!v33)
                goto LABEL_54;
              v35 = *(_QWORD *)(v255[13] + 24);
              sub_1C4768AD0((uint64_t)v246, v35);
              v37 = v36;
              v39 = v38 == 1;
              llvm::DataLayout::getAlignment((uint64_t)v246, v35);
              v42 = v41;
              if (v39)
              if (*(_DWORD *)(v34[13] + 32) >= 2u)
              {
                v43 = (((1 << v42) + 0xFFFFFFFFLL + ((unint64_t)(v37 + 7) >> 3)) & -(1 << v42)) * v247;
                v44 = 1;
                while (1)
                {
                  v45 = (__int128 *)v34[12];
                  v270 = *v45;
                  v271 = v273;
                  v272 = 0x400000000;
                  if (*((_DWORD *)v45 + 6))
                    sub_1C50E9DBC((uint64_t)&v271, (uint64_t *)v45 + 2);
                  v275 = *((_DWORD *)v45 + 34);
                  if (v275 > 0x40)
                  {
                    v274 = (void *)operator new[]();
                    memcpy(v274, *((const void **)v45 + 16), (((unint64_t)v275 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v274 = (void *)*((_QWORD *)v45 + 16);
                  }
                  llvm::APInt::operator+=((uint64_t)&v274, (v43 * v44));
                  v46 = sub_1C50EC1F0((int *)v45 + 38 * v44, (int *)&v270);
                  if (v275 >= 0x41 && v274)
                    MEMORY[0x1CAA32F9C](v274, 0x1000C8000313F17);
                  v47 = (char *)v271;
                  if ((_DWORD)v272)
                  {
                    v48 = 24 * v272;
                    do
                    {
                      if (*(_DWORD *)&v47[v48 - 8] >= 0x41u)
                      {
                        v49 = *(_QWORD *)&v47[v48 - 16];
                        if (v49)
                          MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
                      }
                      v48 -= 24;
                    }
                    while (v48);
                    v47 = (char *)v271;
                  }
                  if (v47 != (char *)v273)
                    free(v47);
                  if (!v46)
                    break;
                  if (++v44 >= (unint64_t)*(unsigned int *)(v34[13] + 32))
                    goto LABEL_55;
                }
                v34 = v255;
LABEL_54:
                v50 = *v34;
                *(_QWORD *)(v50 + 8) = v34[1];
                *(_QWORD *)v34[1] = v50;
                --v257;
                (*(void (**)(uint64_t *))v34[2])(v34 + 2);
                operator delete(v34);
                continue;
              }
            }
          }
        }
LABEL_55:
        ;
      }
      v23 = (_QWORD *)v23[1];
    }
    while (v23 != (_QWORD *)((char *)a2 + 72));
    v51 = v256;
    v252 = (uint64_t *)&v252;
    v253 = &v252;
    v254 = 0;
    if (v256 == &v255)
    {
      v19 = v242;
LABEL_331:
      v20 = v241;
      goto LABEL_332;
    }
    while (2)
    {
      v52 = *(_QWORD *)(v51[13] + 24);
      sub_1C4768AD0((uint64_t)v246, v52);
      v54 = v53;
      v56 = v55 == 1;
      llvm::DataLayout::getAlignment((uint64_t)v246, v52);
      v59 = v58;
      if (v56)
      v60 = ((1 << v59) + 0xFFFFFFFFLL + ((unint64_t)(v54 + 7) >> 3)) & -(1 << v59);
      v61 = operator new(8 * v247);
      v62 = v61;
      v63 = 0;
      do
      {
        v61[v63 / 8] = &v255;
        v63 += 8;
      }
      while (v243 != v63);
      for (j = v256; j != &v255; j = (_QWORD *)j[1])
      {
        if (j[13] == v51[13] && j[3] == v51[3] && j[4] == v51[4])
        {
          v65 = 1;
          do
          {
            v66 = (int *)j[12];
            v67 = (__int128 *)v51[12];
            v270 = *v67;
            v271 = v273;
            v272 = 0x400000000;
            if (*((_DWORD *)v67 + 6))
              sub_1C50E9DBC((uint64_t)&v271, (uint64_t *)v67 + 2);
            v275 = *((_DWORD *)v67 + 34);
            if (v275 > 0x40)
            {
              v274 = (void *)operator new[]();
              memcpy(v274, *((const void **)v67 + 16), (((unint64_t)v275 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v274 = (void *)*((_QWORD *)v67 + 16);
            }
            llvm::APInt::operator+=((uint64_t)&v274, (v65 * v60));
            v68 = sub_1C50EC1F0(v66, (int *)&v270);
            if (v275 >= 0x41 && v274)
              MEMORY[0x1CAA32F9C](v274, 0x1000C8000313F17);
            v69 = (char *)v271;
            if ((_DWORD)v272)
            {
              v70 = 24 * v272;
              do
              {
                if (*(_DWORD *)&v69[v70 - 8] >= 0x41u)
                {
                  v71 = *(_QWORD *)&v69[v70 - 16];
                  if (v71)
                    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
                }
                v70 -= 24;
              }
              while (v70);
              v69 = (char *)v271;
            }
            if (v69 != (char *)v273)
              free(v69);
            if (v68)
              v62[v65] = j;
            ++v65;
          }
          while (v65 != v247);
          v72 = 1;
          while ((_QWORD **)v62[v72] != &v255)
          {
            if (v247 == ++v72)
            {
              LODWORD(v72) = v247;
              break;
            }
          }
          if (v247 == v72)
          {
            *v62 = v51;
            break;
          }
        }
      }
      if ((_QWORD **)*v62 == &v255)
      {
        operator delete(v62);
        v51 = (_QWORD *)v51[1];
        goto LABEL_97;
      }
      v73 = 0;
      v74 = v257;
      v75 = v254;
      do
      {
        v76 = (uint64_t **)v62[v73];
        if (v76 != &v252)
        {
          v77 = (uint64_t **)v76[1];
          if (v77 != &v252)
          {
            v78 = *v76;
            v78[1] = (uint64_t)v77;
            *v76[1] = (uint64_t)v78;
            v79 = v252;
            v252[1] = (uint64_t)v76;
            *v76 = v79;
            v76[1] = (uint64_t *)&v252;
            v257 = --v74;
            ++v75;
            v252 = (uint64_t *)v76;
            v254 = v75;
          }
        }
        ++v73;
      }
      while (v240 != v73);
      operator delete(v62);
      v80 = v253;
      v81 = (llvm::Value *)v253[12][18];
      if (!v81)
        goto LABEL_105;
      v265 = 0;
      v266 = 0;
      v264 = &v265;
      v263[0] = 0;
      v263[1] = 0;
      v262 = v263;
      v261[0] = 0;
      v261[1] = 0;
      v260 = (uint64_t *)v261;
      if (v253 == &v252)
        goto LABEL_134;
      v238 = v81;
      v94 = v254;
      v237 = v254;
      do
      {
        v95 = (uint64_t **)v80[5];
        if (v95 != v80 + 6)
        {
          do
          {
            sub_1C61B7C9C(&v264, &v265, (unint64_t)v95[4], (uint64_t *)v95 + 4);
            v96 = v95[1];
            if (v96)
            {
              do
              {
                v97 = (uint64_t **)v96;
                v96 = (uint64_t *)*v96;
              }
              while (v96);
            }
            else
            {
              do
              {
                v97 = (uint64_t **)v95[2];
                v98 = *v97 == (uint64_t *)v95;
                v95 = v97;
              }
              while (!v98);
            }
            v95 = v97;
          }
          while (v97 != v80 + 6);
        }
        v99 = (uint64_t **)v80[8];
        if (v99 != v80 + 9)
        {
          do
          {
            sub_1C61B7C9C(&v262, v263, (unint64_t)v99[4], (uint64_t *)v99 + 4);
            v100 = v99[1];
            if (v100)
            {
              do
              {
                v101 = (uint64_t **)v100;
                v100 = (uint64_t *)*v100;
              }
              while (v100);
            }
            else
            {
              do
              {
                v101 = (uint64_t **)v99[2];
                v98 = *v101 == (uint64_t *)v99;
                v99 = v101;
              }
              while (!v98);
            }
            v99 = v101;
          }
          while (v101 != v80 + 9);
        }
        *(_QWORD *)&v270 = v80[11];
        sub_1C47BC21C(&v260, (unint64_t *)&v270, (uint64_t **)&v270);
        v80 = (uint64_t **)v80[1];
      }
      while (v80 != &v252);
      v102 = (unsigned __int16 *)v238;
      if (v266 < 2)
        goto LABEL_134;
      v103 = v262;
      if (v262 == v263)
      {
        v104 = 0;
        goto LABEL_137;
      }
      v113 = 0;
      v104 = 0;
      while (2)
      {
        v244 = v113;
        v114 = v104;
        v115 = v103[4];
        v116 = *(_DWORD *)(v115 + 20);
        if ((v116 & 0x40000000) != 0)
        {
          v118 = *(void ***)(v115 - 8);
          v117 = v116 & 0x7FFFFFF;
        }
        else
        {
          v117 = v116 & 0x7FFFFFF;
          v118 = (void **)(v115 - 32 * v117);
        }
        *(_QWORD *)&v270 = &v271;
        *((_QWORD *)&v270 + 1) = 0x400000000;
        if (v117 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v270, (uint64_t)&v271, v117, 8);
          v119 = DWORD2(v270);
          v121 = (void **)v270;
          v120 = DWORD2(v270);
          goto LABEL_157;
        }
        v119 = 0;
        if (v117)
        {
          v120 = 0;
          v121 = &v271;
LABEL_157:
          v122 = 32 * v117;
          v123 = &v121[v120];
          do
          {
            v124 = *v118;
            v118 += 4;
            *v123++ = v124;
            v122 -= 32;
          }
          while (v122);
          v125 = (void **)v270;
        }
        else
        {
          v125 = &v271;
        }
        DWORD2(v270) = v119 + v117;
        v126 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v251 + 72))(v251, v115, v125);
        v128 = v127;
        v102 = (unsigned __int16 *)v238;
        if ((void **)v270 != &v271)
          free((void *)v270);
        v113 = v244;
        if (v128 == 1)
          v113 = 1;
        if (__OFADD__(v114, v126))
          v104 = ((v114 + v126) >> 63) ^ 0x8000000000000000;
        else
          v104 = v114 + v126;
        v129 = v261[0];
        v130 = v103[4];
        if (v261[0])
        {
          v131 = v261;
          do
          {
            v132 = v131;
            v133 = v129;
            v134 = v129[4];
            v135 = v129 + 1;
            if (v134 >= v130)
            {
              v135 = v133;
              v131 = (_QWORD **)v133;
            }
            v129 = (_QWORD *)*v135;
          }
          while (v129);
          if (v131 != v261)
          {
            if (v134 >= v130)
              v132 = (_QWORD **)v133;
            if (v130 >= (unint64_t)v132[4])
              goto LABEL_191;
          }
        }
        v136 = *(_QWORD *)(v130 + 8);
        if (!v136)
        {
LABEL_191:
          v143 = (_QWORD *)v103[1];
          if (v143)
          {
            do
            {
              v144 = (_QWORD **)v143;
              v143 = (_QWORD *)*v143;
            }
            while (v143);
          }
          else
          {
            do
            {
              v144 = (_QWORD **)v103[2];
              v98 = *v144 == v103;
              v103 = v144;
            }
            while (!v98);
          }
          v103 = v144;
          if (v144 != v263)
            continue;
          if (v113)
            goto LABEL_134;
LABEL_137:
          v105 = v264;
          v106 = *(_QWORD *)(v264[4] + 40);
          v107 = v106 + 40;
          for (k = *(_QWORD *)(v106 + 48); k != v107; k = *(_QWORD *)(k + 8))
          {
            v109 = k - 24;
            if (!k)
              v109 = 0;
            if (v264 != &v265)
            {
              v110 = v264;
              while (v110[4] != v109)
              {
                v111 = (_QWORD *)v110[1];
                if (v111)
                {
                  do
                  {
                    v112 = (_QWORD **)v111;
                    v111 = (_QWORD *)*v111;
                  }
                  while (v111);
                }
                else
                {
                  do
                  {
                    v112 = (_QWORD **)v110[2];
                    v98 = *v112 == v110;
                    v110 = v112;
                  }
                  while (!v98);
                }
                v110 = v112;
                if (v112 == &v265)
                  goto LABEL_150;
              }
              v107 = k;
              break;
            }
LABEL_150:
            ;
          }
          v145 = v107 - 24;
          if (!v107)
            v145 = 0;
          v146 = *(_DWORD *)(v249 + 40);
          if (v146)
          {
            v147 = *(_QWORD *)(v249 + 24);
            v148 = v146 - 1;
            v149 = ((v145 >> 4) ^ (v145 >> 9)) & (v146 - 1);
            v150 = *(_QWORD *)(v147 + 16 * v149);
            if (v145 == v150)
            {
LABEL_208:
              v153 = *(_QWORD *)(v147 + 16 * v149 + 8);
            }
            else
            {
              v151 = 1;
              while (v150 != -4096)
              {
                v152 = v149 + v151++;
                v149 = v152 & v148;
                v150 = *(_QWORD *)(v147 + 16 * v149);
                if (v145 == v150)
                  goto LABEL_208;
              }
              v153 = 0;
            }
          }
          else
          {
            v153 = 0;
          }
          if (v264 != &v265)
          {
            while (2)
            {
              v154 = *(_DWORD *)(v249 + 40);
              if (!v154)
                goto LABEL_217;
              v155 = v105[4];
              v156 = *(_QWORD *)(v249 + 24);
              v157 = v154 - 1;
              v158 = ((v155 >> 4) ^ (v155 >> 9)) & (v154 - 1);
              v159 = *(_QWORD *)(v156 + 16 * v158);
              if (v155 == v159)
              {
LABEL_216:
                v162 = *(_QWORD *)(v156 + 16 * v158 + 8);
              }
              else
              {
                v160 = 1;
                while (v159 != -4096)
                {
                  v161 = v158 + v160++;
                  v158 = v161 & v157;
                  v159 = *(_QWORD *)(v156 + 16 * v158);
                  if (v155 == v159)
                    goto LABEL_216;
                }
LABEL_217:
                v162 = 0;
              }
              if (*(_BYTE *)(v162 + 16) == 25)
                v163 = v162;
              else
                v163 = 0;
              v164 = (uint64_t *)(v162 - 64);
              if (v163)
                v164 = (uint64_t *)(v163 - 32);
              if (!llvm::MemorySSA::dominates(v249, *v164, v153))
                goto LABEL_134;
              v165 = (_QWORD *)v105[1];
              if (v165)
              {
                do
                {
                  v166 = (_QWORD **)v165;
                  v165 = (_QWORD *)*v165;
                }
                while (v165);
              }
              else
              {
                do
                {
                  v166 = (_QWORD **)v105[2];
                  v98 = *v166 == v105;
                  v105 = v166;
                }
                while (!v98);
              }
              v105 = v166;
              if (v166 == &v265)
                break;
              continue;
            }
          }
          for (m = v253; m != &v252; m = (uint64_t **)m[1])
          {
            if (!llvm::DominatorTree::dominates(v248, (const llvm::Value *)v102, (const llvm::Instruction *)m[11]))
              goto LABEL_134;
          }
          sub_1C4773D54((uint64_t)&v289, (uint64_t)v102, 0, 0, 0);
          v168 = *v253[11];
          v169 = *(_DWORD *)(v168 + 32);
          llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(v168 + 24), (llvm::Type *)(v169 * v94));
          v171 = v170;
          v286 = v288;
          v287 = 0x400000000;
          sub_1C50EC5B8((unsigned int *)&v286, 0, v237);
          v172 = **((_QWORD **)v102 - 4);
          v173 = *(_DWORD *)(v172 + 8);
          if ((v173 & 0xFE) == 0x12)
            v173 = *(_DWORD *)(**(_QWORD **)(v172 + 16) + 8);
          WORD2(v235) = 0;
          LODWORD(v235) = 3;
          v175 = (*(uint64_t (**)(uint64_t, uint64_t, llvm::PointerType *, uint64_t, void *, _QWORD, unint64_t, _QWORD, uint64_t))(*(_QWORD *)v251 + 920))(v251, 32, v171, v94, v286, v287, ((unint64_t)v102[9] >> 1) & 0x3F, v173 >> 8, v235) < v104;
          if (v174)
            v176 = v174 < 0;
          else
            v176 = v175;
          if (!v176)
          {
LABEL_284:
            if (v286 != v288)
              free(v286);
            if (v289 != &v291)
              free(v289);
            sub_1C47655E8((uint64_t)&v260, v261[0]);
            sub_1C47655E8((uint64_t)&v262, v263[0]);
            sub_1C6143384(v265);
            if (!v176)
              goto LABEL_105;
            v239 = 1;
            goto LABEL_112;
          }
          v177 = (unsigned __int8 *)*((_QWORD *)v102 - 4);
          v178 = llvm::PointerType::get(v171, 0);
          *(_QWORD *)&v270 = "interleaved.wide.ptrcast";
          v273[0] = 259;
          v179 = sub_1C5098D9C((uint64_t *)&v289, v177, v178, (uint64_t)&v270);
          v180 = v102[9];
          v301 = (llvm::Type *)"interleaved.wide.load";
          WORD4(v305) = 259;
          v181 = (char *)operator new(0x60uLL);
          *((_QWORD *)v181 + 2) = 0;
          *((_QWORD *)v181 + 3) = v181 + 32;
          v245 = (uint64_t ***)(v181 + 32);
          v273[0] = 257;
          *((_QWORD *)v181 + 4) = v171;
          *((_QWORD *)v181 + 5) = 0;
          *((_WORD *)v181 + 24) = 60;
          *((_DWORD *)v181 + 13) = 1;
          *(_OWORD *)(v181 + 56) = 0u;
          *(_OWORD *)(v181 + 72) = 0u;
          *((_DWORD *)v181 + 22) = 0;
          *(_QWORD *)v181 = v179;
          *((_QWORD *)v181 + 1) = 0;
          if (v179)
          {
            v184 = *((_QWORD *)v179 + 1);
            v183 = v179 + 8;
            v182 = v184;
            *((_QWORD *)v181 + 1) = v184;
            if (v184)
              *(_QWORD *)(v182 + 16) = v181 + 8;
            *((_QWORD *)v181 + 2) = v183;
            *v183 = v181;
          }
          *((_WORD *)v181 + 25) = v180 & 0x7E;
          v236 = v181;
          v181[92] = 1;
          llvm::Value::setName(v245, (uint64_t)&v270);
          (*(void (**)(uint64_t, uint64_t ***, llvm::Type **, uint64_t, uint64_t *))(*(_QWORD *)v294 + 16))(v294, v245, &v301, v292, v293);
          if (!v290)
          {
LABEL_245:
            *(_QWORD *)&v270 = v249;
            *((_QWORD *)&v270 + 1) = &v272;
            v271 = (void *)0x1000000000;
            v276 = v280;
            v277 = v280;
            v278 = 8;
            v279 = 0;
            v281 = v283;
            v282 = 0x800000000;
            v285[0] = 0;
            v285[1] = 0;
            v284 = v285;
            v185 = *(_DWORD *)(v249 + 40);
            if (v185)
            {
              v186 = *(_QWORD *)(v249 + 24);
              v187 = v185 - 1;
              v188 = (v185 - 1) & ((v102 >> 4) ^ (v102 >> 9));
              v189 = *(unsigned __int16 **)(v186 + 16 * v188);
              if (v102 == v189)
              {
LABEL_250:
                v192 = *(_QWORD *)(v186 + 16 * v188 + 8);
              }
              else
              {
                v190 = 1;
                while (v189 != (unsigned __int16 *)-4096)
                {
                  v191 = v188 + v190++;
                  v188 = v191 & v187;
                  v189 = *(unsigned __int16 **)(v186 + 16 * v188);
                  if (v102 == v189)
                    goto LABEL_250;
                }
                v192 = 0;
              }
            }
            else
            {
              v192 = 0;
            }
            MemoryAccessBefore = llvm::MemorySSAUpdater::createMemoryAccessBefore((uint64_t **)&v270, (uint64_t)v245, 0, v192);
            llvm::MemorySSAUpdater::insertUse((llvm::MemorySSAUpdater *)&v270, (llvm::BasicBlock **)MemoryAccessBefore, 1);
            v194 = v253;
            if (v253 != &v252)
            {
              v205 = 0;
              do
              {
                v295 = v297;
                v296 = 0x400000000;
                if (v169)
                {
                  v206 = 0;
                  v207 = v205;
                  v208 = v169;
                  do
                  {
                    if (v206 >= HIDWORD(v296))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v295, (uint64_t)v297, v206 + 1, 4);
                      v206 = v296;
                    }
                    *((_DWORD *)v295 + v206) = v207;
                    v206 = v296 + 1;
                    LODWORD(v296) = v296 + 1;
                    v207 += v94;
                    --v208;
                  }
                  while (v208);
                }
                v209 = v194[11];
                v292 = v209[5];
                v293 = v209 + 3;
                v210 = (llvm::Type *)v209[6];
                v301 = v210;
                if (v210)
                {
                  llvm::MetadataTracking::track((uint64_t)&v301, (unsigned __int8 *)v210, 2);
                  v211 = v301;
                }
                else
                {
                  v211 = 0;
                }
                sub_1C4774EF4((uint64_t)&v289, 0, (uint64_t)v211);
                v212 = v301;
                if (v301)
                  llvm::MetadataTracking::untrack((uint64_t)&v301, (unsigned __int8 *)v301);
                v213 = v295;
                v214 = v296;
                v301 = (llvm::Type *)"interleaved.shuffle";
                WORD4(v305) = 259;
                v215 = llvm::PoisonValue::get((llvm::PoisonValue *)*v245, v212);
                v216 = (llvm::Value *)sub_1C486AD20((uint64_t)&v289, (uint64_t)v245, (uint64_t)v215, v213, v214, (uint64_t)&v301);
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v194[11], v216, (llvm::Value *)1);
                if (v295 != v297)
                  free(v295);
                ++v205;
                v194 = (uint64_t **)v194[1];
              }
              while (v194 != &v252);
            }
            v195 = ***(_QWORD ***)v258[0];
            if (*(_QWORD *)(v195 + 128)
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v195 + 72) + 48))(*(_QWORD *)(v195 + 72)))
            {
              v196 = *(_QWORD *)(*((_QWORD *)v236 + 9) + 56);
              llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v267, (const llvm::DebugLoc *)(v236 + 80));
              v197 = *((_QWORD *)v236 + 9);
              v302 = 9;
              v303 = 2;
              v305 = *(_OWORD *)&v267.__r_.__value_.__l.__data_;
              v304 = v196;
              v306 = "interleaved-load-combine";
              v307 = "Combined Interleaved Load";
              v308 = 25;
              v309 = 0;
              v310 = 0;
              v311 = v313;
              v312 = 0x400000000;
              v313[256] = 0;
              v314 = -1;
              v315 = v197;
              v301 = (llvm::Type *)&off_1E814E500;
              v267.__r_.__value_.__r.__words[0] = (std::string::size_type)"Load interleaved combined with factor ";
              v267.__r_.__value_.__l.__size_ = 38;
              sub_1C53B17B4((uint64_t)&v311, (const void **)&v267.__r_.__value_.__l.__data_);
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v267, "Factor", 6uLL, v94);
              v198 = sub_1C47E3888((uint64_t)&v301, (uint64_t)&v267);
              sub_1C61998EC((uint64_t)&v295, v198);
              v295 = &off_1E814E500;
              if (v269 < 0)
                operator delete(__p);
              if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v267.__r_.__value_.__l.__data_);
              v301 = (llvm::Type *)&off_1E814E790;
              v199 = (char *)v311;
              if ((_DWORD)v312)
              {
                v200 = (unint64_t)v312 << 6;
                do
                {
                  v201 = (void **)&v199[v200];
                  if (v199[v200 - 17] < 0)
                    operator delete(*(v201 - 5));
                  if (*((char *)v201 - 41) < 0)
                    operator delete(*(v201 - 8));
                  v200 -= 64;
                }
                while (v200);
                v199 = (char *)v311;
              }
              if (v199 != v313)
                free(v199);
              llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v258, (llvm::DiagnosticInfoOptimizationBase *)&v295);
              v295 = &off_1E814E790;
              v202 = (char *)v298;
              if (v299)
              {
                v203 = (unint64_t)v299 << 6;
                do
                {
                  v204 = (void **)&v202[v203];
                  if (v202[v203 - 17] < 0)
                    operator delete(*(v204 - 5));
                  if (*((char *)v204 - 41) < 0)
                    operator delete(*(v204 - 8));
                  v203 -= 64;
                }
                while (v203);
                v202 = (char *)v298;
              }
              if (v202 != (char *)&v300)
                free(v202);
            }
            sub_1C61247C0((uint64_t)&v284, v285[0]);
            LOBYTE(v176) = 1;
            if (v281 != v283)
              free(v281);
            if (v277 != v276)
              free(v277);
            sub_1C4EE41F8((char **)&v270 + 1);
            goto LABEL_284;
          }
          v217 = (char *)v289;
          v218 = (char *)v289 + 16 * v290;
          v219 = (void **)(v236 + 80);
          while (2)
          {
            v220 = *(_DWORD *)v217;
            v221 = (unsigned __int8 *)*((_QWORD *)v217 + 1);
            if (v221)
            {
              if (v220)
                goto LABEL_314;
              v295 = (void *)*((_QWORD *)v217 + 1);
              llvm::MetadataTracking::track((uint64_t)&v295, v221, 2);
              v222 = (unsigned __int8 *)*v219;
LABEL_318:
              if (v222)
                llvm::MetadataTracking::untrack((uint64_t)v219, v222);
              v223 = (unsigned __int8 *)v295;
              *v219 = v295;
              if (v223)
                llvm::MetadataTracking::retrack((uint64_t)&v295, v223, (uint64_t)v219);
              v102 = (unsigned __int16 *)v238;
            }
            else
            {
              v222 = (unsigned __int8 *)*v219;
              if (*v219 || (v236[55] & 0x20) != 0)
              {
                if (!v220)
                {
                  v295 = 0;
                  goto LABEL_318;
                }
LABEL_314:
                llvm::Value::setMetadata((llvm::Value *)v245, *(_DWORD *)v217, (llvm::MDNode *)v221);
              }
            }
            v217 += 16;
            if (v217 == v218)
              goto LABEL_245;
            continue;
          }
        }
        break;
      }
      if (v263[0])
      {
        while (1)
        {
          v137 = *(_QWORD *)(v136 + 24);
          if (*(unsigned __int8 *)(v137 + 16) <= 0x1Bu)
            v137 = 0;
          v138 = v263[0];
          v139 = v263;
          do
          {
            v140 = v139;
            v141 = v138;
            v142 = v138[4];
            if (v142 >= v137)
              v139 = (_QWORD **)v138;
            else
              ++v138;
            v138 = (_QWORD *)*v138;
          }
          while (v138);
          if (v139 == v263)
            break;
          if (v142 >= v137)
            v140 = (_QWORD **)v141;
          if (v137 < (unint64_t)v140[4])
            break;
          v136 = *(_QWORD *)(v136 + 8);
          if (!v136)
            goto LABEL_191;
        }
      }
LABEL_134:
      sub_1C47655E8((uint64_t)&v260, v261[0]);
      sub_1C47655E8((uint64_t)&v262, v263[0]);
      sub_1C6143384(v265);
LABEL_105:
      v82 = v253[1];
      if (v82 != (uint64_t *)&v252)
      {
        v83 = v252;
        if (v82 == v252)
        {
          v84 = 0;
        }
        else
        {
          v84 = 0;
          v85 = v253[1];
          do
          {
            ++v84;
            v85 = (uint64_t *)v85[1];
          }
          while (v85 != v252);
        }
        v86 = v84 + 1;
        v254 -= v86;
        v87 = v256;
        v257 += v86;
        v88 = *v82;
        *(_QWORD *)(v88 + 8) = v252[1];
        *(_QWORD *)v83[1] = v88;
        v89 = *v87;
        *(_QWORD *)(v89 + 8) = v82;
        *v82 = v89;
        *v87 = (uint64_t)v83;
        v83[1] = (uint64_t)v87;
      }
LABEL_112:
      if (v254)
      {
        v90 = v252;
        v91 = v253;
        v92 = *v253;
        v92[1] = v252[1];
        *(_QWORD *)v90[1] = v92;
        v254 = 0;
        if (v91 != &v252)
        {
          do
          {
            v93 = (uint64_t **)v91[1];
            ((void (*)(uint64_t **))*v91[2])(v91 + 2);
            operator delete(v91);
            v91 = v93;
          }
          while (v93 != &v252);
        }
      }
      v51 = v256;
LABEL_97:
      if (v51 != &v255)
        continue;
      break;
    }
    v19 = v242;
    if (!v254)
      goto LABEL_331;
    v224 = v252;
    v225 = v253;
    v226 = *v253;
    v226[1] = v252[1];
    *(_QWORD *)v224[1] = v226;
    v254 = 0;
    v20 = v241;
    if (v225 != &v252)
    {
      do
      {
        v227 = (uint64_t **)v225[1];
        ((void (*)(uint64_t **))*v225[2])(v225 + 2);
        operator delete(v225);
        v225 = v227;
      }
      while (v227 != &v252);
    }
LABEL_332:
    if (v257)
    {
      v228 = v255;
      v229 = v256;
      v230 = *v256;
      *(_QWORD *)(v230 + 8) = v255[1];
      *(_QWORD *)v228[1] = v230;
      v257 = 0;
      if (v229 != &v255)
      {
        do
        {
          v231 = (_QWORD *)v229[1];
          (*(void (**)(_QWORD *))v229[2])(v229 + 2);
          operator delete(v229);
          v229 = v231;
        }
        while (v231 != &v255);
      }
    }
    --v19;
    v21 = v243 - 8;
  }
  while (v19 > 1);
LABEL_338:
  v232 = v259;
  v259 = 0;
  if (v232)
  {
    v233 = *v232;
    *v232 = 0;
    if (v233)
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
    MEMORY[0x1CAA32FC0](v232, 0x20C4093837F09);
  }
  v234 = v251;
  v251 = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  v2 = v239;
  return v2 & 1;
}

uint64_t sub_1C50E9348(uint64_t a1, uint64_t a2, llvm::DataLayout *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _BYTE *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE v68[16];
  _QWORD *v69;
  _QWORD v70[5];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[16];
  _QWORD *v76;
  _QWORD v77[5];
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _BYTE v82[96];
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  _BYTE v89[96];
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  _BYTE v96[96];
  uint64_t v97;
  unsigned int v98;
  __int128 v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[96];
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v6 = **(_QWORD **)(a1 - 64);
  sub_1C50E9BB4(&v71, v6);
  if ((sub_1C50EA1EC(*(_QWORD *)(a1 - 64), (uint64_t)&v71, a3) & 1) == 0)
    v72 = 0;
  sub_1C50E9BB4(&v64, v6);
  if (sub_1C50EA1EC(*(_QWORD *)(a1 - 32), (uint64_t)&v64, a3))
  {
    v7 = v65;
  }
  else
  {
    v7 = 0;
    v65 = 0;
  }
  if (!(v72 | v7))
    goto LABEL_11;
  v63 = v6;
  if (v72)
  {
    if (v7)
    {
      if (v72 != v7 || (v8 = v73, v73 != v66))
      {
LABEL_11:
        v9 = 0;
        goto LABEL_132;
      }
      *(_QWORD *)(a2 + 8) = v7;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = v72;
      v8 = v73;
    }
    *(_QWORD *)(a2 + 16) = v8;
    v11 = v74;
    if (v74 != v75)
    {
      do
      {
        sub_1C61B7C9C((_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32), v11[4], v11 + 4);
        v12 = (_QWORD *)v11[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_BYTE *)v11[2];
            v14 = *(_QWORD *)v13 == (_QWORD)v11;
            v11 = v13;
          }
          while (!v14);
        }
        v11 = v13;
      }
      while (v13 != v75);
    }
    v15 = v76;
    if (v76 != v77)
    {
      do
      {
        sub_1C61B7C9C((_QWORD **)(a2 + 48), (_QWORD *)(a2 + 56), v15[4], v15 + 4);
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v15[2];
            v14 = *v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v14);
        }
        v15 = v17;
      }
      while (v17 != v77);
    }
  }
  else
  {
    v10 = v66;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v10;
  }
  if (v65)
  {
    v18 = v67;
    if (v67 != v68)
    {
      do
      {
        sub_1C61B7C9C((_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32), v18[4], v18 + 4);
        v19 = (_QWORD *)v18[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_BYTE *)v18[2];
            v14 = *(_QWORD *)v20 == (_QWORD)v18;
            v18 = v20;
          }
          while (!v14);
        }
        v18 = v20;
      }
      while (v20 != v68);
    }
    v21 = v69;
    if (v69 != v70)
    {
      do
      {
        sub_1C61B7C9C((_QWORD **)(a2 + 48), (_QWORD *)(a2 + 56), v21[4], v21 + 4);
        v22 = (_QWORD *)v21[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v21[2];
            v14 = *v23 == (_QWORD)v21;
            v21 = v23;
          }
          while (!v14);
        }
        v21 = v23;
      }
      while (v23 != v70);
    }
  }
  *(_QWORD *)&v99 = a1;
  sub_1C47BC21C((uint64_t **)(a2 + 48), (unint64_t *)&v99, (uint64_t **)&v99);
  *(_QWORD *)(a2 + 72) = a1;
  v24 = *(unsigned int *)(a1 + 72);
  v9 = 1;
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = *(unsigned int **)(a1 + 64);
    v27 = &v26[v24];
    v61 = v27;
    v62 = a2;
    v28 = v63;
    while (1)
    {
      v29 = *v26;
      if ((*v26 & 0x80000000) != 0)
      {
        LODWORD(v92) = -1;
        v93 = 0;
        v94 = v96;
        v95 = 0x400000000;
        v98 = 1;
        v97 = 0;
        v99 = v92;
        v100 = v102;
        v101 = 0x400000000;
        v104 = 1;
        v103 = 0;
        v32 = *(_QWORD *)(a2 + 80) + 152 * v25;
        v105 = 0;
        v33 = sub_1C50EB61C(v32, (uint64_t)&v99);
        *(_QWORD *)(v33 + 144) = v105;
        if (v104 >= 0x41 && v103)
          MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
        v34 = (char *)v100;
        if ((_DWORD)v101)
        {
          v35 = 24 * v101;
          do
          {
            if (*(_DWORD *)&v34[v35 - 8] >= 0x41u)
            {
              v36 = *(_QWORD *)&v34[v35 - 16];
              if (v36)
                MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
            }
            v35 -= 24;
          }
          while (v35);
          v34 = (char *)v100;
        }
        if (v34 != v102)
          free(v34);
        if (v98 >= 0x41 && v97)
          MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
        v37 = (char *)v94;
        if ((_DWORD)v95)
        {
          v38 = 24 * v95;
          do
          {
            if (*(_DWORD *)&v37[v38 - 8] >= 0x41u)
            {
              v39 = *(_QWORD *)&v37[v38 - 16];
              if (v39)
                MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
            }
            v38 -= 24;
          }
          while (v38);
          v37 = (char *)v94;
        }
        v40 = v96;
        goto LABEL_125;
      }
      v30 = *(_DWORD *)(v28 + 32);
      if ((int)v29 >= v30)
      {
        if (!v65)
        {
          LODWORD(v78) = -1;
          v79 = 0;
          v80 = v82;
          v81 = 0x400000000;
          v84 = 1;
          v83 = 0;
          v99 = v78;
          v100 = v102;
          v101 = 0x400000000;
          v104 = 1;
          v103 = 0;
          v51 = *(_QWORD *)(a2 + 80) + 152 * v25;
          v105 = 0;
          v52 = sub_1C50EB61C(v51, (uint64_t)&v99);
          *(_QWORD *)(v52 + 144) = v105;
          if (v104 >= 0x41 && v103)
            MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
          v53 = (char *)v100;
          if ((_DWORD)v101)
          {
            v54 = 24 * v101;
            do
            {
              if (*(_DWORD *)&v53[v54 - 8] >= 0x41u)
              {
                v55 = *(_QWORD *)&v53[v54 - 16];
                if (v55)
                  MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
              }
              v54 -= 24;
            }
            while (v54);
            v53 = (char *)v100;
          }
          if (v53 != v102)
            free(v53);
          if (v84 >= 0x41 && v83)
            MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
          v37 = v80;
          if ((_DWORD)v81)
          {
            v56 = 24 * v81;
            do
            {
              if (*(_DWORD *)&v37[v56 - 8] >= 0x41u)
              {
                v57 = *(_QWORD *)&v37[v56 - 16];
                if (v57)
                  MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
              }
              v56 -= 24;
            }
            while (v56);
            v37 = v80;
          }
          v40 = v82;
          goto LABEL_125;
        }
        v31 = v70[3];
        v29 -= v30;
      }
      else
      {
        if (!v72)
        {
          LODWORD(v85) = -1;
          v86 = 0;
          v87 = v89;
          v88 = 0x400000000;
          v91 = 1;
          v90 = 0;
          v99 = v85;
          v100 = v102;
          v101 = 0x400000000;
          v104 = 1;
          v103 = 0;
          v44 = *(_QWORD *)(a2 + 80) + 152 * v25;
          v105 = 0;
          v45 = sub_1C50EB61C(v44, (uint64_t)&v99);
          *(_QWORD *)(v45 + 144) = v105;
          if (v104 >= 0x41 && v103)
            MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
          v46 = (char *)v100;
          if ((_DWORD)v101)
          {
            v47 = 24 * v101;
            do
            {
              if (*(_DWORD *)&v46[v47 - 8] >= 0x41u)
              {
                v48 = *(_QWORD *)&v46[v47 - 16];
                if (v48)
                  MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
              }
              v47 -= 24;
            }
            while (v47);
            v46 = (char *)v100;
          }
          if (v46 != v102)
            free(v46);
          if (v91 >= 0x41 && v90)
            MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
          v37 = v87;
          if ((_DWORD)v88)
          {
            v49 = 24 * v88;
            do
            {
              if (*(_DWORD *)&v37[v49 - 8] >= 0x41u)
              {
                v50 = *(_QWORD *)&v37[v49 - 16];
                if (v50)
                  MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
              }
              v49 -= 24;
            }
            while (v49);
            v37 = v87;
          }
          v40 = v89;
LABEL_125:
          if (v37 != v40)
            free(v37);
          goto LABEL_127;
        }
        v31 = v77[3];
      }
      v41 = v31 + 152 * v29;
      v42 = *(_QWORD *)(a2 + 80);
      v43 = v42 + 152 * v25;
      *(_OWORD *)v43 = *(_OWORD *)v41;
      sub_1C50E9DBC(v43 + 16, (uint64_t *)(v41 + 16));
      if (*(_DWORD *)(v43 + 136) > 0x40u || *(_DWORD *)(v41 + 136) > 0x40u)
      {
        if (v43 != v41)
        {
          v60 = (void **)(v43 + 128);
          llvm::APInt::reallocate(v43 + 128, *(_DWORD *)(v41 + 136));
          v58 = *(unsigned int *)(v43 + 136);
          if (v58 <= 0x40)
            *v60 = *(void **)(v41 + 128);
          else
            memcpy(*v60, *(const void **)(v41 + 128), ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else
      {
        *(_QWORD *)(v43 + 128) = *(_QWORD *)(v41 + 128);
        *(_DWORD *)(v43 + 136) = *(_DWORD *)(v41 + 136);
      }
      *(_QWORD *)(v42 + 152 * v25 + 144) = *(_QWORD *)(v31 + 152 * v29 + 144);
      a2 = v62;
      v28 = v63;
      v27 = v61;
LABEL_127:
      ++v25;
      if (++v26 == v27)
      {
        v9 = 1;
        break;
      }
    }
  }
LABEL_132:
  sub_1C50E9C80((uint64_t)&v64);
  sub_1C50E9C80((uint64_t)&v71);
  return v9;
}

_QWORD *sub_1C50E9BB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_1E8143000;
  a1[1] = 0;
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = a1 + 4;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  a1[5] = 0;
  a1[6] = a1 + 7;
  a1[11] = a2;
  v3 = *(unsigned int *)(a2 + 32);
  v4 = (_QWORD *)operator new[]();
  *v4 = 152;
  v4[1] = v3;
  v5 = v4 + 2;
  if ((_DWORD)v3)
  {
    v6 = v4 + 2;
    do
    {
      *(_DWORD *)v6 = -1;
      v6[1] = 0;
      v6[2] = v6 + 4;
      v6[3] = 0x400000000;
      *((_DWORD *)v6 + 34) = 1;
      v6[16] = 0;
      v6[18] = 0;
      v6 += 19;
    }
    while (v6 != &v5[19 * v3]);
  }
  a1[10] = v5;
  return a1;
}

uint64_t sub_1C50E9C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E8143000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = v2 + 152 * v3;
      do
      {
        if (*(_DWORD *)(v4 - 16) >= 0x41u)
        {
          v5 = *(_QWORD *)(v4 - 24);
          if (v5)
            MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
        }
        v6 = *(char **)(v4 - 136);
        v7 = *(unsigned int *)(v4 - 128);
        if ((_DWORD)v7)
        {
          v8 = 24 * v7;
          do
          {
            if (*(_DWORD *)&v6[v8 - 8] >= 0x41u)
            {
              v9 = *(_QWORD *)&v6[v8 - 16];
              if (v9)
                MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
            }
            v8 -= 24;
          }
          while (v8);
          v6 = *(char **)(v4 - 136);
        }
        if (v6 != (char *)(v4 - 120))
          free(v6);
        v4 -= 152;
      }
      while (v4 != v2);
    }
    MEMORY[0x1CAA32F9C](v2 - 16, 0x10B2C805E89C145);
  }
  sub_1C47655E8(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  return a1;
}

void sub_1C50E9D98(uint64_t a1)
{
  sub_1C50E9C80(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50E9DBC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t i;
  uint64_t v33;
  void **v34;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *a2;
        v5 = *(_QWORD *)a1;
        do
        {
          v11 = v5 + v9;
          v12 = v10 + v9;
          *(_DWORD *)(v5 + v9) = *(_DWORD *)(v10 + v9);
          if (*(_DWORD *)(v5 + v9 + 16) > 0x40u || *(_DWORD *)(v12 + 16) > 0x40u)
          {
            if (v12 != v11)
            {
              v13 = (void **)(v11 + 8);
              llvm::APInt::reallocate(v11 + 8, *(_DWORD *)(v10 + v9 + 16));
              v14 = *(unsigned int *)(v11 + 16);
              if (v14 <= 0x40)
                *v13 = *(void **)(v12 + 8);
              else
                memcpy(*v13, *(const void **)(v12 + 8), ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
            *(_DWORD *)(v11 + 16) = *(_DWORD *)(v12 + 16);
          }
          v9 += 24;
        }
        while (24 * v4 != v9);
        v15 = v5 + v9;
        v16 = *(_QWORD *)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v16 = *(_QWORD *)a1;
        v15 = *(_QWORD *)a1;
      }
      for (i = v16 + 24 * v5; i != v15; i -= 24)
      {
        if (*(_DWORD *)(i - 8) >= 0x41u)
        {
          v33 = *(_QWORD *)(i - 16);
          if (v33)
            MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
        }
      }
      goto LABEL_40;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v17 = 0;
        v18 = *a2;
        v19 = *(_QWORD *)a1;
        do
        {
          v20 = v19 + v17;
          v21 = v18 + v17;
          *(_DWORD *)(v19 + v17) = *(_DWORD *)(v18 + v17);
          if (*(_DWORD *)(v19 + v17 + 16) > 0x40u || *(_DWORD *)(v21 + 16) > 0x40u)
          {
            if (v21 != v20)
            {
              v34 = (void **)(v20 + 8);
              llvm::APInt::reallocate(v20 + 8, *(_DWORD *)(v18 + v17 + 16));
              v22 = *(unsigned int *)(v20 + 16);
              if (v22 <= 0x40)
                *v34 = *(void **)(v21 + 8);
              else
                memcpy(*v34, *(const void **)(v21 + 8), ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
            *(_DWORD *)(v20 + 16) = *(_DWORD *)(v21 + 16);
          }
          v17 += 24;
        }
        while (24 * v5 != v17);
        goto LABEL_34;
      }
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)a1;
        v7 = 24 * v5;
        do
        {
          if (*(_DWORD *)(v6 + v7 - 8) >= 0x41u)
          {
            v8 = *(_QWORD *)(v6 + v7 - 16);
            if (v8)
              MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
          }
          v7 -= 24;
        }
        while (v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C50EA0FC(a1, v4);
    }
    v5 = 0;
LABEL_34:
    v23 = *((unsigned int *)a2 + 2);
    if (v5 != v23)
    {
      v24 = *a2;
      v25 = *a2 + 24 * v23;
      v26 = v24 + 24 * v5 + 8;
      v27 = (unsigned int *)(*(_QWORD *)a1 + 24 * v5 + 16);
      do
      {
        v28 = v26 - 8;
        *(v27 - 4) = *(_DWORD *)(v26 - 8);
        v29 = *(_DWORD *)(v26 + 8);
        *v27 = v29;
        if (v29 > 0x40)
        {
          v30 = (void *)operator new[]();
          *((_QWORD *)v27 - 1) = v30;
          memcpy(v30, *(const void **)v26, (((unint64_t)*v27 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *((_QWORD *)v27 - 1) = *(_QWORD *)v26;
        }
        v26 += 24;
        v27 += 6;
      }
      while (v28 + 24 != v25);
    }
LABEL_40:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1C50EA0FC(uint64_t a1, unint64_t a2)
{
  void *v3;
  void *v4;
  char *v5;
  int v6;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v13);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = &v5[24 * v6];
    v8 = v3;
    do
    {
      *v8 = *(_DWORD *)v5;
      v8[4] = *((_DWORD *)v5 + 4);
      *((_QWORD *)v8 + 1) = *((_QWORD *)v5 + 1);
      *((_DWORD *)v5 + 4) = 0;
      v5 += 24;
      v8 += 6;
    }
    while (v5 != v7);
    v5 = *(char **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = 24 * v9;
      do
      {
        if (*(_DWORD *)&v5[v10 - 8] >= 0x41u)
        {
          v11 = *(_QWORD *)&v5[v10 - 16];
          if (v11)
            MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
        }
        v10 -= 24;
      }
      while (v10);
      v5 = *(char **)a1;
    }
  }
  v12 = v13;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t sub_1C50EA1EC(unint64_t a1, uint64_t a2, llvm::DataLayout *a3)
{
  int v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE *v39;
  _QWORD *v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  const llvm::APInt *v61;
  unint64_t v62;
  uint64_t v63;
  llvm::ConstantInt *v64;
  const llvm::APInt *v65;
  llvm::UndefValue *v66;
  uint64_t v67;
  llvm::ConstantInt *v68;
  unint64_t v69;
  unint64_t v70;
  llvm::ValueHandleBase *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t PointerAlignElem;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t IndexedOffsetInType;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  BOOL v110;
  const char *v111;
  char v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t *v125;
  llvm::UndefValue *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BOOL4 v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  _BOOL4 v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  int v140;
  _BYTE v141[24];
  uint64_t v142;
  _BYTE v143[16];
  _BYTE *v144;
  _BYTE v145[24];
  uint64_t v146;
  void *v147;
  unsigned int v148;
  __int128 v149;
  void *v150;
  uint64_t v151;
  _BYTE v152[96];
  void *__src;
  unsigned int v154;
  __int128 v155;
  void *v156;
  uint64_t v157;
  _BYTE v158[96];
  void *v159;
  unsigned int v160;
  unint64_t v161;
  llvm::UndefValue *v162;
  llvm::ValueHandleBase *v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v6 == 91)
    return sub_1C50E9348(a1, a2, a3);
  if (a1 && v6 == 60)
  {
    LODWORD(v149) = -1;
    *((_QWORD *)&v149 + 1) = 0;
    v150 = v152;
    v151 = 0x400000000;
    v154 = 1;
    __src = 0;
    v135 = (*(_WORD *)(a1 + 18) & 0x381) == 0;
    if ((*(_WORD *)(a1 + 18) & 0x381) == 0)
    {
      v43 = *(_QWORD *)(a1 - 32);
      v44 = *(_QWORD *)v43;
      v45 = *(_DWORD *)(*(_QWORD *)v43 + 8);
      if (*(_QWORD *)v43)
        v46 = *(_DWORD *)(*(_QWORD *)v43 + 8) == 15;
      else
        v46 = 0;
      if (v46)
      {
        while (1)
        {
          v47 = v44;
          if ((v45 & 0xFE) == 0x12)
            v47 = **(_QWORD **)(v44 + 16);
          v48 = *(unsigned __int8 *)(v43 + 16);
          if (v48 < 0x1C || v48 - 66 > 0xC)
            break;
          if (v48 != 77)
          {
            v84 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(a3, *(_DWORD *)(v47 + 8) >> 8) + 12);
            LODWORD(v155) = 0;
            *((_QWORD *)&v155 + 1) = 0;
            v156 = v158;
            v157 = 0x400000000;
            v160 = v84;
            if (v84 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v159, 0, 0);
              if (v160 >= 0x41 && v159)
                MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
            }
            else
            {
              v159 = 0;
            }
            v85 = (char *)v156;
            if ((_DWORD)v157)
            {
              v86 = 24 * v157;
              do
              {
                if (*(_DWORD *)&v85[v86 - 8] >= 0x41u)
                {
                  v87 = *(_QWORD *)&v85[v86 - 16];
                  if (v87)
                    MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
                }
                v86 -= 24;
              }
              while (v86);
              goto LABEL_223;
            }
            goto LABEL_224;
          }
          v43 = *(_QWORD *)(v43 - 32);
          v44 = *(_QWORD *)v43;
          v45 = *(_DWORD *)(*(_QWORD *)v43 + 8);
          if (*(_QWORD *)v43)
            v50 = *(_DWORD *)(*(_QWORD *)v43 + 8) == 15;
          else
            v50 = 0;
          if (!v50)
            goto LABEL_112;
        }
        PointerAlignElem = llvm::DataLayout::getPointerAlignElem(a3, *(_DWORD *)(v47 + 8) >> 8);
        if (v48 != 62)
        {
          if ((v45 & 0xFE) == 0x12)
            v45 = *(_DWORD *)(**(_QWORD **)(v44 + 16) + 8);
          v88 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(a3, v45 >> 8) + 12);
          LODWORD(v155) = 0;
          *((_QWORD *)&v155 + 1) = 0;
          v156 = v158;
          v157 = 0x400000000;
          v160 = v88;
          if (v88 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v159, 0, 0);
            if (v160 >= 0x41 && v159)
              MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          }
          else
          {
            v159 = 0;
          }
          v85 = (char *)v156;
          if ((_DWORD)v157)
          {
            v89 = 24 * v157;
            do
            {
              if (*(_DWORD *)&v85[v89 - 8] >= 0x41u)
              {
                v90 = *(_QWORD *)&v85[v89 - 16];
                if (v90)
                  MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
              }
              v89 -= 24;
            }
            while (v89);
LABEL_223:
            v85 = (char *)v156;
          }
LABEL_224:
          if (v85 != v158)
            free(v85);
          goto LABEL_125;
        }
        v83 = *(unsigned int *)(PointerAlignElem + 12);
        LODWORD(v163) = v83;
        if (v83 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v162, 0, 0);
        else
          v162 = 0;
        if (llvm::GEPOperator::accumulateConstantOffset(v43, a3, (uint64_t)&v162, 0, v82))
        {
          LODWORD(v155) = 0;
          *((_QWORD *)&v155 + 1) = 0;
          v156 = v158;
          v157 = 0x400000000;
          v160 = v163;
          if (v163 > 0x40)
          {
            v159 = (void *)operator new[]();
            memcpy(v159, v162, (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v159 = v162;
          }
          sub_1C50EB61C((uint64_t)&v149, (uint64_t)&v155);
          if (v160 >= 0x41 && v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          v98 = (char *)v156;
          if ((_DWORD)v157)
          {
            v99 = 24 * v157;
            do
            {
              if (*(_DWORD *)&v98[v99 - 8] >= 0x41u)
              {
                v100 = *(_QWORD *)&v98[v99 - 16];
                if (v100)
                  MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
              }
              v99 -= 24;
            }
            while (v99);
            v98 = (char *)v156;
          }
          if (v98 != v158)
            free(v98);
          v43 = *(_QWORD *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF));
        }
        else
        {
          *(_QWORD *)v141 = &v141[16];
          *(_QWORD *)&v141[8] = 0x400000000;
          v91 = *(_DWORD *)(v43 + 20);
          v92 = v91 & 0x7FFFFFF;
          if ((v91 & 0x7FFFFFFu) < 2)
          {
            LODWORD(v95) = 1;
          }
          else
          {
            v93 = 0;
            v94 = v43 + 32;
            v95 = 1;
            while (1)
            {
              v96 = *(_QWORD *)(v94 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF));
              if (!v96 || *(_BYTE *)(v96 + 16) != 16)
                break;
              if (v93 >= *(_DWORD *)&v141[12])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v141, (uint64_t)&v141[16], v93 + 1, 8);
                v93 = *(_DWORD *)&v141[8];
              }
              *(_QWORD *)(*(_QWORD *)v141 + 8 * v93) = v96;
              v93 = ++*(_DWORD *)&v141[8];
              ++v95;
              v94 += 32;
              if (v92 == v95)
              {
                LODWORD(v95) = v92;
                break;
              }
            }
          }
          if ((_DWORD)v95 + 1 == (_DWORD)v92)
          {
            sub_1C50EB9CC(*(_QWORD *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF) + 32 * v95), (uint64_t)&v149);
            IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType(a3, *(_QWORD *)(v43 + 64), *(llvm::UndefValue ***)v141, *(unsigned int *)&v141[8]);
            v102 = v163;
            if (v163 > 0x40)
            {
              *(_QWORD *)v162 = IndexedOffsetInType;
              bzero((char *)v162 + 8, (((unint64_t)(v102 + 63) >> 3) - 8) & 0xFFFFFFF8);
            }
            else
            {
              if ((_DWORD)v163)
                v103 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v163;
              else
                v103 = 0;
              v162 = (llvm::UndefValue *)(v103 & IndexedOffsetInType);
            }
            v107 = *(_QWORD *)(v43 + 72);
            sub_1C4768AD0((uint64_t)a3, v107);
            v137 = (unint64_t)(v108 + 7) >> 3;
            v110 = v109 == 1;
            llvm::DataLayout::getAlignment((uint64_t)a3, v107);
            v113 = 1 << v112;
            if (v110)
            v114 = v113 - 1 + v137;
            v115 = -v113;
            v116 = v154;
            v117 = v154 - v83;
            if (v154 > v83)
            {
              if ((_DWORD)v149 != -1)
              {
                v118 = v149 - v117;
                if (v149 < v117)
                  v118 = 0;
                LODWORD(v149) = v118;
              }
              llvm::APInt::trunc((llvm::APInt *)&__src, v83, (llvm::APInt *)&v155);
              if (v154 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              __src = (void *)v155;
              v154 = DWORD2(v155);
              DWORD2(v155) = 32;
              *(_QWORD *)&v155 = v83;
              sub_1C50EC0A0((uint64_t)&v149, 3, (uint64_t)&v155);
              v116 = v154;
            }
            if (v83 > v116)
            {
              if ((_DWORD)v149 != -1)
              {
                if (v83 - v116 + v149 < v116)
                  v116 = v83 - v116 + v149;
                LODWORD(v149) = v116;
              }
              llvm::APInt::sext((llvm::APInt *)&__src, v83, (llvm::APInt *)&v155);
              if (v154 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              __src = (void *)v155;
              v154 = DWORD2(v155);
              DWORD2(v155) = 32;
              *(_QWORD *)&v155 = v83;
              sub_1C50EC0A0((uint64_t)&v149, 2, (uint64_t)&v155);
            }
            v119 = v115 & v114;
            DWORD2(v155) = v83;
            if (v83 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v155, v119, 0);
              v123 = DWORD2(v155);
              sub_1C50EBE54((uint64_t)&v149, (llvm::APInt *)&v155);
              if (v123 >= 0x41 && (_QWORD)v155)
                MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
            }
            else
            {
              if ((_DWORD)v83)
                v120 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v83;
              else
                v120 = 0;
              *(_QWORD *)&v155 = v120 & v119;
              sub_1C50EBE54((uint64_t)&v149, (llvm::APInt *)&v155);
            }
            v121 = (char)v163;
            if ((_DWORD)v163 == v154)
            {
              if (v163 >= 0x41)
              {
                v124 = 0;
                v125 = (unint64_t *)__src;
                v126 = v162;
                v127 = ((unint64_t)v163 + 63) >> 6;
                v128 = v127;
                do
                {
                  v129 = *(_QWORD *)v126;
                  v126 = (llvm::UndefValue *)((char *)v126 + 8);
                  v130 = v129 + *v125;
                  v131 = v130 + 1 <= *v125;
                  if (v124)
                  {
                    ++v130;
                    v124 = v131;
                  }
                  else
                  {
                    v124 = v130 < *v125;
                  }
                  *v125++ = v130;
                  --v128;
                }
                while (v128);
                *((_QWORD *)__src + (v127 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v121;
              }
              else
              {
                if ((_DWORD)v163)
                  v122 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v163;
                else
                  v122 = 0;
                __src = (void *)(v122 & ((unint64_t)v162 + (_QWORD)__src));
              }
            }
            else
            {
              LODWORD(v149) = -1;
            }
            v43 = *(_QWORD *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF));
          }
          else
          {
            LODWORD(v155) = -1;
            *((_QWORD *)&v155 + 1) = 0;
            v156 = v158;
            v157 = 0x400000000;
            v160 = 1;
            v159 = 0;
            sub_1C50EB61C((uint64_t)&v149, (uint64_t)&v155);
            if (v160 >= 0x41 && v159)
              MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
            v104 = (char *)v156;
            if ((_DWORD)v157)
            {
              v105 = 24 * v157;
              do
              {
                if (*(_DWORD *)&v104[v105 - 8] >= 0x41u)
                {
                  v106 = *(_QWORD *)&v104[v105 - 16];
                  if (v106)
                    MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
                }
                v105 -= 24;
              }
              while (v105);
              v104 = (char *)v156;
            }
            if (v104 != v158)
              free(v104);
            v43 = 0;
          }
          if (*(_BYTE **)v141 != &v141[16])
            free(*(void **)v141);
        }
        if (v163 >= 0x41 && v162)
          MEMORY[0x1CAA32F9C](v162, 0x1000C8000313F17);
      }
      else
      {
LABEL_112:
        LODWORD(v155) = -1;
        *((_QWORD *)&v155 + 1) = 0;
        v156 = v158;
        v157 = 0x400000000;
        v160 = 1;
        v159 = 0;
        sub_1C50EB61C((uint64_t)&v149, (uint64_t)&v155);
        if (v160 >= 0x41 && v159)
          MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
        v51 = (char *)v156;
        if ((_DWORD)v157)
        {
          v52 = 24 * v157;
          do
          {
            if (*(_DWORD *)&v51[v52 - 8] >= 0x41u)
            {
              v53 = *(_QWORD *)&v51[v52 - 16];
              if (v53)
                MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
            }
            v52 -= 24;
          }
          while (v52);
          v51 = (char *)v156;
        }
        if (v51 != v158)
          free(v51);
        v43 = 0;
      }
LABEL_125:
      v55 = (uint64_t **)(a2 + 32);
      v54 = *(uint64_t **)(a2 + 32);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a2 + 16) = v43;
      if (v54)
      {
        while (1)
        {
          while (1)
          {
            v56 = (uint64_t **)v54;
            v57 = v54[4];
            if (v57 <= a1)
              break;
            v54 = *v56;
            v55 = v56;
            if (!*v56)
              goto LABEL_138;
          }
          if (v57 >= a1)
            break;
          v54 = v56[1];
          if (!v54)
          {
            v55 = v56 + 1;
            goto LABEL_138;
          }
        }
      }
      else
      {
        v56 = (uint64_t **)(a2 + 32);
LABEL_138:
        v58 = (uint64_t *)operator new(0x28uLL);
        v58[4] = a1;
        *v58 = 0;
        v58[1] = 0;
        v58[2] = (uint64_t)v56;
        *v55 = v58;
        v59 = **(_QWORD **)(a2 + 24);
        if (v59)
        {
          *(_QWORD *)(a2 + 24) = v59;
          v60 = *v55;
        }
        else
        {
          v60 = v58;
        }
        sub_1C4768E74(*(uint64_t **)(a2 + 32), v60);
        ++*(_QWORD *)(a2 + 40);
      }
      *(_QWORD *)&v155 = a1;
      sub_1C47BC21C((uint64_t **)(a2 + 48), (unint64_t *)&v155, (uint64_t **)&v155);
      if (*(_DWORD *)(*(_QWORD *)(a2 + 88) + 32))
      {
        v62 = 0;
        do
        {
          v162 = 0;
          v163 = 0;
          v63 = ***(_QWORD ***)a1;
          v64 = *(llvm::ConstantInt **)(v63 + 1960);
          DWORD2(v155) = *(_DWORD *)(v63 + 1968) >> 8;
          if (DWORD2(v155) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v155, 0, 0);
          else
            *(_QWORD *)&v155 = 0;
          v66 = llvm::ConstantInt::get(v64, (llvm::LLVMContext *)&v155, v61);
          if (DWORD2(v155) >= 0x41 && (_QWORD)v155)
            MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
          v162 = v66;
          v67 = ***(_QWORD ***)a1;
          v68 = *(llvm::ConstantInt **)(v67 + 1960);
          v69 = *(unsigned int *)(v67 + 1968);
          DWORD2(v155) = v69 >> 8;
          if (v69 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v155, v62, 0);
          }
          else
          {
            if (v69 <= 0xFF)
              v70 = 0;
            else
              v70 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v69);
            *(_QWORD *)&v155 = v70 & v62;
          }
          v71 = llvm::ConstantInt::get(v68, (llvm::LLVMContext *)&v155, v65);
          if (DWORD2(v155) >= 0x41 && (_QWORD)v155)
            MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
          v163 = v71;
          v72 = llvm::DataLayout::getIndexedOffsetInType(a3, *(_QWORD *)(a2 + 88), &v162, 2);
          *(_OWORD *)v141 = v149;
          *(_QWORD *)&v141[16] = v143;
          v142 = 0x400000000;
          if ((_DWORD)v151)
            sub_1C50E9DBC((uint64_t)&v141[16], (uint64_t *)&v150);
          v148 = v154;
          if (v154 > 0x40)
          {
            v147 = (void *)operator new[]();
            memcpy(v147, __src, (((unint64_t)v148 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v147 = __src;
          }
          llvm::APInt::operator+=((uint64_t)&v147, v72);
          if (v62)
            v73 = 0;
          else
            v73 = a1;
          v155 = *(_OWORD *)v141;
          v156 = v158;
          v157 = 0x400000000;
          if ((_DWORD)v142)
            sub_1C50E9DBC((uint64_t)&v156, (uint64_t *)&v141[16]);
          v160 = v148;
          if (v148 > 0x40)
          {
            v159 = (void *)operator new[]();
            memcpy(v159, v147, (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v159 = v147;
          }
          v161 = v73;
          v74 = sub_1C50EB61C(*(_QWORD *)(a2 + 80) + 152 * v62, (uint64_t)&v155);
          *(_QWORD *)(v74 + 144) = v161;
          if (v160 >= 0x41 && v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          v75 = (char *)v156;
          if ((_DWORD)v157)
          {
            v76 = 24 * v157;
            do
            {
              if (*(_DWORD *)&v75[v76 - 8] >= 0x41u)
              {
                v77 = *(_QWORD *)&v75[v76 - 16];
                if (v77)
                  MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
              }
              v76 -= 24;
            }
            while (v76);
            v75 = (char *)v156;
          }
          if (v75 != v158)
            free(v75);
          if (v148 >= 0x41 && v147)
            MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
          v78 = *(char **)&v141[16];
          if ((_DWORD)v142)
          {
            v79 = 24 * v142;
            do
            {
              if (*(_DWORD *)&v78[v79 - 8] >= 0x41u)
              {
                v80 = *(_QWORD *)&v78[v79 - 16];
                if (v80)
                  MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
              }
              v79 -= 24;
            }
            while (v79);
            v78 = *(char **)&v141[16];
          }
          if (v78 != v143)
            free(v78);
          ++v62;
        }
        while (v62 < *(unsigned int *)(*(_QWORD *)(a2 + 88) + 32));
      }
    }
    if (v154 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    v8 = (char *)v150;
    if ((_DWORD)v151)
    {
      v9 = 24 * v151;
      v10 = v135;
      do
      {
        if (*(_DWORD *)&v8[v9 - 8] >= 0x41u)
        {
          v11 = *(_QWORD *)&v8[v9 - 16];
          if (v11)
            MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
        }
        v9 -= 24;
      }
      while (v9);
      v8 = (char *)v150;
    }
    else
    {
      v10 = v135;
    }
    if (v8 != v152)
      free(v8);
  }
  else
  {
    v10 = 0;
    if (a1)
    {
      if (v6 == 77)
      {
        v10 = 0;
        v12 = *(unsigned __int8 **)(a1 - 32);
        if (v12)
        {
          if (v12[16] >= 0x1Cu)
          {
            v13 = *(_QWORD *)v12;
            if (*(_QWORD *)v12)
              v14 = *(_BYTE *)(*(_QWORD *)v12 + 8) == 18;
            else
              v14 = 0;
            if (!v14)
              return 0;
            v15 = *(_QWORD *)(a2 + 88);
            v16 = *(_DWORD *)(v15 + 32);
            v17 = *(_DWORD *)(v13 + 32);
            if (v16 % v17)
              return 0;
            v134 = v16 / v17;
            v140 = sub_1C4E3D148((uint64_t)a3, *(_QWORD *)(v15 + 24));
            if ((_DWORD)v18 == 1)
            v20 = sub_1C4E3D148((uint64_t)a3, *(_QWORD *)(v13 + 24));
            if ((_DWORD)v19 == 1)
            if (v134 * v140 == v20)
            {
              sub_1C50E9BB4(v141, v13);
              v21 = sub_1C50EA1EC(v12, v141, a3);
              v10 = v21;
              if ((_DWORD)v21)
              {
                v136 = v21;
                v22 = *(_QWORD *)(a2 + 88);
                v23 = v16 / v17;
                if (*(_DWORD *)(v22 + 32))
                {
                  v24 = 0;
                  if (v134 <= 1)
                    v25 = 1;
                  else
                    v25 = v134;
                  v138 = v25;
                  v132 = v17;
                  v133 = v16;
                  do
                  {
                    if (v17 <= v16)
                    {
                      v26 = 0;
                      v27 = v24 / v23;
                      do
                      {
                        v28 = (__int128 *)(v146 + 152 * v27);
                        v149 = *v28;
                        v150 = v152;
                        v151 = 0x400000000;
                        if (*((_DWORD *)v28 + 6))
                          sub_1C50E9DBC((uint64_t)&v150, (uint64_t *)v28 + 2);
                        v154 = *((_DWORD *)v28 + 34);
                        if (v154 > 0x40)
                        {
                          __src = (void *)operator new[]();
                          memcpy(__src, *((const void **)v28 + 16), (((unint64_t)v154 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else
                        {
                          __src = (void *)*((_QWORD *)v28 + 16);
                        }
                        llvm::APInt::operator+=((uint64_t)&__src, (v26 * v140));
                        if (v26)
                          v29 = 0;
                        else
                          v29 = *(_QWORD *)(v146 + 152 * v27 + 144);
                        v155 = v149;
                        v156 = v158;
                        v157 = 0x400000000;
                        if ((_DWORD)v151)
                          sub_1C50E9DBC((uint64_t)&v156, (uint64_t *)&v150);
                        v160 = v154;
                        if (v154 > 0x40)
                        {
                          v159 = (void *)operator new[]();
                          memcpy(v159, __src, (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else
                        {
                          v159 = __src;
                        }
                        v161 = v29;
                        v30 = sub_1C50EB61C(*(_QWORD *)(a2 + 80) + 152 * (v24 + v26), (uint64_t)&v155);
                        *(_QWORD *)(v30 + 144) = v161;
                        if (v160 >= 0x41 && v159)
                          MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
                        v31 = (char *)v156;
                        if ((_DWORD)v157)
                        {
                          v32 = 24 * v157;
                          do
                          {
                            if (*(_DWORD *)&v31[v32 - 8] >= 0x41u)
                            {
                              v33 = *(_QWORD *)&v31[v32 - 16];
                              if (v33)
                                MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
                            }
                            v32 -= 24;
                          }
                          while (v32);
                          v31 = (char *)v156;
                        }
                        if (v31 != v158)
                          free(v31);
                        if (v154 >= 0x41 && __src)
                          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                        v34 = (char *)v150;
                        if ((_DWORD)v151)
                        {
                          v35 = 24 * v151;
                          do
                          {
                            if (*(_DWORD *)&v34[v35 - 8] >= 0x41u)
                            {
                              v36 = *(_QWORD *)&v34[v35 - 16];
                              if (v36)
                                MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
                            }
                            v35 -= 24;
                          }
                          while (v35);
                          v34 = (char *)v150;
                        }
                        if (v34 != v152)
                          free(v34);
                        ++v26;
                      }
                      while (v26 != v138);
                      v22 = *(_QWORD *)(a2 + 88);
                      v17 = v132;
                      v16 = v133;
                      v23 = v134;
                    }
                    v24 += v23;
                  }
                  while (v24 < *(_DWORD *)(v22 + 32));
                }
                *(_OWORD *)(a2 + 8) = *(_OWORD *)&v141[8];
                v37 = (_QWORD *)v142;
                if ((_BYTE *)v142 != v143)
                {
                  do
                  {
                    sub_1C61B7C9C((_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32), v37[4], v37 + 4);
                    v38 = (_QWORD *)v37[1];
                    if (v38)
                    {
                      do
                      {
                        v39 = v38;
                        v38 = (_QWORD *)*v38;
                      }
                      while (v38);
                    }
                    else
                    {
                      do
                      {
                        v39 = (_BYTE *)v37[2];
                        v14 = *(_QWORD *)v39 == (_QWORD)v37;
                        v37 = v39;
                      }
                      while (!v14);
                    }
                    v37 = v39;
                  }
                  while (v39 != v143);
                }
                v40 = v144;
                if (v144 != v145)
                {
                  do
                  {
                    sub_1C61B7C9C((_QWORD **)(a2 + 48), (_QWORD *)(a2 + 56), v40[4], v40 + 4);
                    v41 = (_QWORD *)v40[1];
                    if (v41)
                    {
                      do
                      {
                        v42 = v41;
                        v41 = (_QWORD *)*v41;
                      }
                      while (v41);
                    }
                    else
                    {
                      do
                      {
                        v42 = (_BYTE *)v40[2];
                        v14 = *(_QWORD *)v42 == (_QWORD)v40;
                        v40 = v42;
                      }
                      while (!v14);
                    }
                    v40 = v42;
                  }
                  while (v42 != v145);
                }
                *(_QWORD *)&v155 = a1;
                sub_1C47BC21C((uint64_t **)(a2 + 48), (unint64_t *)&v155, (uint64_t **)&v155);
                *(_QWORD *)(a2 + 72) = 0;
                v10 = v136;
              }
              sub_1C50E9C80((uint64_t)v141);
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return v10;
}

uint64_t sub_1C50EB61C(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (a1 != a2)
  {
    v4 = (void **)(a1 + 16);
    v5 = *(_QWORD *)(a2 + 16);
    if (v5 != a2 + 32)
    {
      v6 = *(char **)(a1 + 16);
      v7 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v7)
      {
        v8 = 24 * v7;
        do
        {
          if (*(_DWORD *)&v6[v8 - 8] >= 0x41u)
          {
            v9 = *(_QWORD *)&v6[v8 - 16];
            if (v9)
              MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
          }
          v8 -= 24;
        }
        while (v8);
        v6 = (char *)*v4;
      }
      if (v6 != (char *)(a1 + 32))
        free(v6);
      v10 = (_DWORD *)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a2 + 16) = a2 + 32;
      *(_DWORD *)(a2 + 28) = 0;
LABEL_13:
      *v10 = 0;
      goto LABEL_14;
    }
    v10 = (_DWORD *)(a2 + 24);
    v14 = *(unsigned int *)(a2 + 24);
    v15 = *(unsigned int *)(a1 + 24);
    if (v15 >= v14)
    {
      v19 = *v4;
      if ((_DWORD)v14)
      {
        v20 = v5 + 24 * v14;
        do
        {
          *(_DWORD *)v19 = *(_DWORD *)v5;
          if (*((_DWORD *)v19 + 4) >= 0x41u)
          {
            v21 = v19[1];
            if (v21)
              MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
          }
          v19[1] = *(_QWORD *)(v5 + 8);
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v5 + 16);
          *(_DWORD *)(v5 + 16) = 0;
          v19 += 3;
          v5 += 24;
        }
        while (v5 != v20);
        v22 = *(_QWORD **)(a1 + 16);
        LODWORD(v15) = *(_DWORD *)(a1 + 24);
      }
      else
      {
        v22 = v19;
      }
      for (i = &v22[3 * v15]; i != v19; i -= 3)
      {
        if (*((_DWORD *)i - 2) >= 0x41u)
        {
          v35 = *(i - 2);
          if (v35)
            MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
        }
      }
      *(_DWORD *)(a1 + 24) = v14;
      v36 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v36)
      {
        v37 = *(_QWORD *)(a2 + 16);
        v38 = 24 * v36;
        do
        {
          if (*(_DWORD *)(v37 + v38 - 8) >= 0x41u)
          {
            v39 = *(_QWORD *)(v37 + v38 - 16);
            if (v39)
              MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
          }
          v38 -= 24;
        }
        while (v38);
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 28) >= v14)
    {
      if ((_DWORD)v15)
      {
        v23 = v5 + 24 * v15;
        v24 = (char *)*v4 + 16;
        do
        {
          *(v24 - 4) = *(_DWORD *)v5;
          if (*v24 >= 0x41u)
          {
            v25 = *((_QWORD *)v24 - 1);
            if (v25)
              MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
          }
          *((_QWORD *)v24 - 1) = *(_QWORD *)(v5 + 8);
          *v24 = *(_DWORD *)(v5 + 16);
          v24 += 6;
          *(_DWORD *)(v5 + 16) = 0;
          v5 += 24;
        }
        while (v5 != v23);
        goto LABEL_42;
      }
    }
    else
    {
      if ((_DWORD)v15)
      {
        v16 = (char *)*v4;
        v17 = 24 * v15;
        do
        {
          if (*(_DWORD *)&v16[v17 - 8] >= 0x41u)
          {
            v18 = *(_QWORD *)&v16[v17 - 16];
            if (v18)
              MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
          }
          v17 -= 24;
        }
        while (v17);
      }
      *(_DWORD *)(a1 + 24) = 0;
      sub_1C50EA0FC(a1 + 16, v14);
    }
    v15 = 0;
LABEL_42:
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(unsigned int *)(a2 + 24);
    if (v15 != v27)
    {
      v28 = v26 + 24 * v27;
      v29 = (uint64_t)*v4 + 24 * v15;
      v30 = v26 + 24 * v15;
      do
      {
        *(_DWORD *)v29 = *(_DWORD *)v30;
        *(_DWORD *)(v29 + 16) = *(_DWORD *)(v30 + 16);
        *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
        *(_DWORD *)(v30 + 16) = 0;
        v30 += 24;
        v29 += 24;
      }
      while (v30 != v28);
      v26 = *(_QWORD *)(a2 + 16);
    }
    *(_DWORD *)(a1 + 24) = v14;
    v31 = *v10;
    if ((_DWORD)v31)
    {
      v32 = 24 * v31;
      do
      {
        if (*(_DWORD *)(v26 + v32 - 8) >= 0x41u)
        {
          v33 = *(_QWORD *)(v26 + v32 - 16);
          if (v33)
            MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
        }
        v32 -= 24;
      }
      while (v32);
    }
    goto LABEL_13;
  }
LABEL_14:
  if (*(_DWORD *)(a1 + 136) >= 0x41u)
  {
    v12 = *(_QWORD *)(a1 + 128);
    if (v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  return a1;
}

void sub_1C50EB9CC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  llvm::APInt *v17;
  unint64_t *v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 < 0x1C || v4 - 59 < 0xFFFFFFEE)
  {
    sub_1C50EBFD0((uint64_t)&v35, (uint64_t *)a1);
    sub_1C50EB61C(a2, (uint64_t)&v35);
    if (v41 >= 0x41 && v40)
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    v6 = (char *)v37;
    if (!v38)
      goto LABEL_56;
    v7 = 24 * v38;
    do
    {
      if (*(_DWORD *)&v6[v7 - 8] >= 0x41u)
      {
        v8 = *(_QWORD *)&v6[v7 - 16];
        if (v8)
          MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
      }
      v7 -= 24;
    }
    while (v7);
LABEL_55:
    v6 = (char *)v37;
LABEL_56:
    if (v6 != (char *)&v39)
      free(v6);
    return;
  }
  v9 = *(_QWORD *)(a1 - 64);
  v10 = *(_QWORD *)(a1 - 32);
  if (v10)
    v11 = *(_BYTE *)(v10 + 16) == 16;
  else
    v11 = 0;
  if (!v11)
  {
    if (llvm::Instruction::isCommutative((llvm::Instruction *)a1))
    {
      if (*(_BYTE *)(v9 + 16) == 16)
        v12 = v9;
      else
        v12 = 0;
      if (v12)
        v9 = v10;
      v10 = v12;
    }
    else
    {
      v10 = 0;
    }
  }
  if (v4 != 54)
  {
    if (v4 == 41 && v10 != 0)
    {
      sub_1C50EB9CC(v9, a2);
      v14 = *(unsigned int *)(v10 + 32);
      if ((_DWORD)v14 == *(_DWORD *)(a2 + 136))
      {
        if (v14 >= 0x41)
        {
          v27 = 0;
          v28 = *(unint64_t **)(a2 + 128);
          v29 = *(uint64_t **)(v10 + 24);
          v30 = (unint64_t)(v14 + 63) >> 6;
          v31 = v30;
          do
          {
            v32 = *v29++;
            v33 = v32 + *v28;
            v34 = v33 + 1 <= *v28;
            if (v27)
            {
              ++v33;
              v27 = v34;
            }
            else
            {
              v27 = v33 < *v28;
            }
            *v28++ = v33;
            --v31;
          }
          while (v31);
          *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * (v30 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
        }
        else
        {
          if ((_DWORD)v14)
            v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
          else
            v15 = 0;
          *(_QWORD *)(a2 + 128) = v15 & (*(_QWORD *)(a2 + 128) + *(_QWORD *)(v10 + 24));
        }
        return;
      }
LABEL_59:
      *(_DWORD *)a2 = -1;
      return;
    }
LABEL_46:
    sub_1C50EBFD0((uint64_t)&v35, (uint64_t *)a1);
    sub_1C50EB61C(a2, (uint64_t)&v35);
    if (v41 >= 0x41 && v40)
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    v6 = (char *)v37;
    if (!v38)
      goto LABEL_56;
    v22 = 24 * v38;
    do
    {
      if (*(_DWORD *)&v6[v22 - 8] >= 0x41u)
      {
        v23 = *(_QWORD *)&v6[v22 - 16];
        if (v23)
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
      }
      v22 -= 24;
    }
    while (v22);
    goto LABEL_55;
  }
  if (!v10)
    goto LABEL_46;
  sub_1C50EB9CC(v9, a2);
  v16 = *(_DWORD *)(v10 + 32);
  if (v16 != *(_DWORD *)(a2 + 136))
    goto LABEL_59;
  v17 = (llvm::APInt *)(v10 + 24);
  v18 = (unint64_t *)(a2 + 128);
  if (v16 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v17) == v16)
      return;
    LODWORD(v19) = **(_DWORD **)v17;
    if (v16 > v19)
    {
      v21 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(a2 + 128));
      goto LABEL_63;
    }
    v36 = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, 0, 0);
  }
  else
  {
    v19 = *(_DWORD **)v17;
    if (!*(_QWORD *)v17)
      return;
    if (v16 > v19)
    {
      v20 = __clz(__rbit64(*v18));
      if (v16 >= v20)
        v21 = v20;
      else
        v21 = v16;
LABEL_63:
      if (v21 >= v19)
      {
        if (*(_DWORD *)a2 == -1)
        {
LABEL_68:
          sub_1C50EC0A0(a2, 0, (uint64_t)v17);
          v24 = *(unsigned int *)(a2 + 136);
          if (v24 > 0x40)
          {
            v25 = operator new[]();
            v26 = *(const void **)(a2 + 128);
            memcpy((void *)v25, v26, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
            llvm::APInt::tcShiftRight((llvm::APInt *)v25, (unint64_t *)((unint64_t)(v24 + 63) >> 6), v19);
            if (*(_DWORD *)(a2 + 136) >= 0x41u && v26)
              MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
          }
          else if ((_DWORD)v24 == (_DWORD)v19)
          {
            v25 = 0;
          }
          else
          {
            v25 = *v18 >> (char)v19;
          }
          *(_QWORD *)(a2 + 128) = v25;
          *(_DWORD *)(a2 + 136) = v24;
          return;
        }
        if (*(_DWORD *)a2 + (int)v19 < v16)
          v16 = *(_DWORD *)a2 + (_DWORD)v19;
      }
      *(_DWORD *)a2 = v16;
      goto LABEL_68;
    }
    v36 = v16;
    v35 = 0;
  }
  sub_1C50EBE54(a2, (llvm::APInt *)&v35);
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
}

uint64_t sub_1C50EBE54(uint64_t a1, llvm::APInt *this)
{
  unsigned int v3;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  int v19;

  v3 = *((_DWORD *)this + 2);
  if (v3 != *(_DWORD *)(a1 + 136))
  {
    *(_DWORD *)a1 = -1;
    return a1;
  }
  if (v3 > 0x40)
  {
    v6 = llvm::APInt::countLeadingZerosSlowCase(this);
    if (v6 == v3 - 1)
      return a1;
    if (v6 != v3)
      goto LABEL_21;
  }
  else
  {
    v5 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (v5 == 1)
        return a1;
      goto LABEL_18;
    }
  }
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = 24 * v7;
    do
    {
      if (*(_DWORD *)(v8 + v9 - 8) >= 0x41u)
      {
        v10 = *(_QWORD *)(v8 + v9 - 16);
        if (v10)
          MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      }
      v9 -= 24;
    }
    while (v9);
    v3 = *((_DWORD *)this + 2);
  }
  *(_DWORD *)(a1 + 24) = 0;
  if (v3 <= 0x40)
  {
    v5 = *(_QWORD *)this;
LABEL_18:
    v11 = __clz(__rbit64(v5));
    if (v3 >= v11)
      v12 = v11;
    else
      v12 = v3;
    goto LABEL_22;
  }
LABEL_21:
  v12 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
LABEL_22:
  v13 = (_QWORD *)(a1 + 128);
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != -1)
  {
    v15 = v14 >= v12;
    v16 = v14 - v12;
    if (!v15)
      v16 = 0;
    *(_DWORD *)a1 = v16;
  }
  llvm::APInt::operator*(a1 + 128, this, (uint64_t)&v18);
  if (*(_DWORD *)(a1 + 136) >= 0x41u && *v13)
    MEMORY[0x1CAA32F9C](*v13, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 128) = v18;
  *(_DWORD *)(a1 + 136) = v19;
  sub_1C50EC0A0(a1, 1, (uint64_t)this);
  return a1;
}

uint64_t sub_1C50EBFD0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  *(_DWORD *)result = -1;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = result + 32;
  *(_QWORD *)(result + 24) = 0x400000000;
  *(_DWORD *)(result + 136) = 1;
  *(_QWORD *)(result + 128) = 0;
  v2 = *a2;
  if (*a2 && *(_BYTE *)(v2 + 8) == 13)
  {
    *(_DWORD *)result = 0;
    *(_QWORD *)(result + 8) = a2;
    v5 = *(_DWORD *)(v2 + 8) >> 8;
    if (v5 > 0x40)
    {
      v3 = result;
      llvm::APInt::initSlowCase((llvm::APInt *)&v4, 0, 0);
      result = v3;
      if (*(_DWORD *)(v3 + 136) >= 0x41u)
      {
        if (*(_QWORD *)(v3 + 128))
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)(v3 + 128), 0x1000C8000313F17);
          result = v3;
        }
      }
    }
    else
    {
      v4 = 0;
    }
    *(_QWORD *)(result + 128) = v4;
    *(_DWORD *)(result + 136) = v5;
  }
  return result;
}

void sub_1C50EC0A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  char *v15;
  int v16;
  void *v17;
  unsigned int v18;

  if (*(_QWORD *)(a1 + 8))
  {
    v5 = *(unsigned int *)(a3 + 8);
    v16 = a2;
    v18 = v5;
    if (v5 > 0x40)
    {
      v7 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
      v6 = (void *)operator new[]();
      memcpy(v6, *(const void **)a3, v7);
    }
    else
    {
      v6 = *(void **)a3;
    }
    v17 = v6;
    v8 = *(unsigned int *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = (char *)&v16;
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      v12 = (unint64_t *)(a1 + 16);
      v13 = v8 + 1;
      v14 = v9 + 24 * v8 > (unint64_t)&v16;
      if (v9 <= (unint64_t)&v16 && v14)
      {
        v15 = (char *)&v16 - v9;
        sub_1C50EA0FC(a1 + 16, v13);
        v9 = *v12;
        v10 = &v15[*v12];
      }
      else
      {
        sub_1C50EA0FC(a1 + 16, v13);
        v9 = *v12;
        v10 = (char *)&v16;
      }
    }
    v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
    *(_DWORD *)v11 = *(_DWORD *)v10;
    *(_DWORD *)(v11 + 16) = *((_DWORD *)v10 + 4);
    *(_QWORD *)(v11 + 8) = *((_QWORD *)v10 + 1);
    *((_DWORD *)v10 + 4) = 0;
    ++*(_DWORD *)(a1 + 24);
    if (v18 >= 0x41)
    {
      if (v17)
        MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
  }
}

BOOL sub_1C50EC1F0(int *a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  _BOOL8 v16;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  int v27;
  int v28;
  int64_t v29;
  unint64_t v31;
  int v32;
  int v33;
  void *v34;

  v2 = a1[34];
  if ((_DWORD)v2 != a2[34])
    return 0;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a2 + 1);
  if (!(v5 | v6))
    goto LABEL_13;
  if (v5 != v6)
    return 0;
  v7 = a1[6];
  if (v7 != a2[6])
    return 0;
  if (v7)
  {
    v8 = *((_QWORD *)a1 + 2);
    v9 = v8 + 24 * v7;
    v10 = (const void **)(*((_QWORD *)a2 + 2) + 8);
    v11 = v8 + 8;
    do
    {
      v12 = v11 - 8;
      if (*(_DWORD *)(v11 - 8) != *((_DWORD *)v10 - 2))
        return 0;
      v13 = *(unsigned int *)(v11 + 8);
      if (v13 > 0x40)
      {
        if (memcmp(*(const void **)v11, *v10, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8))
          return 0;
      }
      else if (*(const void **)v11 != *v10)
      {
        return 0;
      }
      v10 += 3;
      v11 += 24;
    }
    while (v12 + 24 != v9);
  }
LABEL_13:
  if (v2 >= 0x41)
  {
    v15 = (void *)operator new[]();
    memcpy(v15, *((const void **)a1 + 16), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8);
    v18 = 0;
    v19 = (unint64_t *)*((_QWORD *)a2 + 16);
    v20 = (unint64_t)(v2 + 63) >> 6;
    v21 = (unint64_t *)v15;
    v22 = v20;
    do
    {
      v23 = *v19++;
      v24 = *v21 - v23;
      v25 = *v21 < v23;
      v26 = *v21 + ~v23;
      if (v18)
      {
        v18 = v26 >= *v21;
      }
      else
      {
        v26 = v24;
        v18 = v25;
      }
      *v21++ = v26;
      --v22;
    }
    while (v22);
    *((_QWORD *)v15 + (v20 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    if (!(_DWORD)v2)
      v14 = 0;
    v15 = (void *)(v14 & (*((_QWORD *)a1 + 16) - *((_QWORD *)a2 + 16)));
  }
  v27 = *a1;
  if (*a1 <= *a2)
    v27 = *a2;
  v33 = v27;
  if (v2 > 0x40)
  {
    v34 = (void *)operator new[]();
    memcpy(v34, v15, (((unint64_t)v2 + 63) >> 3) & 0x3FFFFFF8);
    if (v15)
      MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  else
  {
    v34 = v15;
  }
  if (v33)
  {
    if (v2 < 0x41)
      return 0;
    v16 = 0;
    if (!v34)
      return v16;
    goto LABEL_43;
  }
  if (v2 <= 0x40)
    return v34 == 0;
  v28 = 0;
  v29 = ((unint64_t)v2 + 63) >> 6;
  do
  {
    if (v29-- < 1)
      break;
    v31 = *((_QWORD *)v34 + v29);
    v28 += __clz(v31);
  }
  while (!v31);
  v32 = v2 | 0xFFFFFFC0;
  if ((v2 & 0x3F) == 0)
    v32 = 0;
  v16 = v28 + v32 == (_DWORD)v2;
  if (v34)
LABEL_43:
    MEMORY[0x1CAA32F9C]();
  return v16;
}

unsigned int *sub_1C50EC5B8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = a3 - a2 + v7;
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 4);
    v7 = v5[2];
  }
  if (a3 != v4)
  {
    v9 = (_DWORD *)(*(_QWORD *)v5 + 4 * v7);
    do
      *v9++ = v4++;
    while (a3 != v4);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + v6;
  return result;
}

uint64_t sub_1C50EC63C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable combining of interleaved loads";
  v1.n128_u64[1] = 38;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F92C0, "disable-interleaved-load-combine", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F92C0, &dword_1C475E000);
}

void llvm::IntrinsicLowering::LowerIntrinsicCall(llvm::DataLayout **this, llvm **a2)
{
  llvm::Type *v4;
  llvm *v5;
  uint64_t v6;
  int v7;
  llvm::LLVMContext *v8;
  llvm::raw_ostream *v9;
  const llvm::APInt *v10;
  void *v11;
  void *v12;
  llvm::ConstantInt *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  llvm::PointerType *v16;
  void *v17;
  const char *v18;
  size_t v19;
  llvm::Value *NullValue;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  llvm::Type ***v25;
  llvm::Type **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  char *v34;
  void **v35;
  llvm::Value *v36;
  llvm::raw_ostream *v37;
  void *v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  void *v41;
  void *v42;
  int v43;
  const char *v44;
  size_t v45;
  size_t v46;
  llvm::raw_ostream *v47;
  llvm::raw_ostream *v48;
  void *v49;
  void *v50;
  int v51;
  const char *v52;
  size_t v53;
  size_t v54;
  char *Name;
  uint64_t v56;
  const char *v57;
  _QWORD *IntPtrType;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  llvm **v61;
  llvm *v62;
  llvm *v63;
  _QWORD *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  llvm **v67;
  llvm *v68;
  llvm *v69;
  llvm::ConstantInt **v70;
  llvm::ConstantInt *v71;
  int PrimitiveSizeInBits;
  llvm::Value **v73;
  _QWORD *v74;
  llvm::Value **v75;
  _QWORD *v76;
  llvm::Value **v77;
  _QWORD *v78;
  llvm::Value **v79;
  uint64_t v80;
  llvm::Value **v81;
  uint64_t v82;
  llvm::Value **v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  llvm::Value **v87;
  llvm::Value **v88;
  const char *v89;
  llvm::Value **v90;
  _QWORD *v91;
  llvm::Value **v92;
  _QWORD *v93;
  llvm::Value **v94;
  _QWORD *v95;
  llvm::Value **v96;
  _QWORD *v97;
  llvm::Value **v98;
  _QWORD *v99;
  llvm::Value **v100;
  _QWORD *v101;
  llvm::Value **v102;
  _QWORD *v103;
  llvm::Value **v104;
  llvm::Value **v105;
  uint64_t v106;
  llvm::Value **v107;
  _QWORD *v108;
  llvm::Value **v109;
  uint64_t v110;
  llvm::Value **v111;
  _QWORD *v112;
  llvm::Value **v113;
  uint64_t v114;
  llvm::Value **v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  llvm::ValueAsMetadata *v121;
  llvm *v122;
  llvm *v123;
  uint64_t v124;
  const char *v125;
  __int16 v126;
  void *v127[2];
  uint64_t v128;
  uint64_t v129[2];
  void *v130;
  uint64_t v131;
  __int16 v132;
  void *v133;
  llvm *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v127, (uint64_t)a2, 0, 0, 0);
  v5 = *a2;
  v6 = (uint64_t)*(a2 - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(llvm **)(v6 + 24) != a2[9])
    v6 = 0;
  v7 = *(_DWORD *)(v6 + 36);
  if (v7 <= 162)
  {
    if (v7 <= 72)
    {
      switch(v7)
      {
        case 0:
          Name = llvm::Value::getName((llvm::Value *)v6);
          v132 = 1283;
          v57 = "Cannot lower a call to a non-intrinsic function '";
          goto LABEL_132;
        case 1:
        case 3:
        case 5:
        case 6:
        case 8:
        case 10:
        case 11:
        case 12:
        case 13:
          goto LABEL_87;
        case 2:
          v15 = (llvm::raw_ostream *)llvm::errs(v5);
          v17 = (void *)*((_QWORD *)v15 + 4);
          if (*((_QWORD *)v15 + 3) - (_QWORD)v17 <= 0x50uLL)
          {
            v18 = "WARNING: this target does not support the llvm.addressofreturnaddress intrinsic.\n";
            v19 = 81;
            goto LABEL_82;
          }
          qmemcpy(v17, "WARNING: this target does not support the llvm.addressofreturnaddress intrinsic.\n", 81);
          *((_QWORD *)v15 + 4) += 81;
          goto LABEL_83;
        case 4:
          goto LABEL_45;
        case 7:
          goto LABEL_117;
        case 9:
          v70 = (llvm::ConstantInt **)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          v71 = *v70;
          if ((*((_DWORD *)*v70 + 2) & 0xFE) == 0x12)
            v71 = (llvm::ConstantInt *)**((_QWORD **)v71 + 2);
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v71);
          sub_1C4773D54((uint64_t)&v133, (uint64_t)a2, 0, 0, 0);
          if (PrimitiveSizeInBits == 16)
          {
            v87 = llvm::ConstantInt::get(*v70, 8, 0);
            v129[0] = (uint64_t)"bswap.2";
            v132 = 259;
            v85 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v87, (uint64_t)v129, 0, 0);
            v88 = llvm::ConstantInt::get(*v70, 8, 0);
            v129[0] = (uint64_t)"bswap.1";
            v132 = 259;
            v86 = sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v88, (uint64_t)v129, 0);
            v89 = "bswap.i16";
          }
          else
          {
            if (PrimitiveSizeInBits == 32)
            {
              v73 = llvm::ConstantInt::get(*v70, 24, 0);
              v129[0] = (uint64_t)"bswap.4";
              v132 = 259;
              v74 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v73, (uint64_t)v129, 0, 0);
              v75 = llvm::ConstantInt::get(*v70, 8, 0);
              v129[0] = (uint64_t)"bswap.3";
              v132 = 259;
              v76 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v75, (uint64_t)v129, 0, 0);
              v77 = llvm::ConstantInt::get(*v70, 8, 0);
              v129[0] = (uint64_t)"bswap.2";
              v132 = 259;
              v78 = (_QWORD *)sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v77, (uint64_t)v129, 0);
              v79 = llvm::ConstantInt::get(*v70, 24, 0);
              v129[0] = (uint64_t)"bswap.1";
              v132 = 259;
              v80 = sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v79, (uint64_t)v129, 0);
              v81 = llvm::ConstantInt::get(*v70, 16711680, 0);
              v129[0] = (uint64_t)"bswap.and3";
              v132 = 259;
              v82 = sub_1C4D89BCC((uint64_t)&v133, v76, (uint64_t)v81, (uint64_t)v129);
              v83 = llvm::ConstantInt::get(*v70, 65280, 0);
              v129[0] = (uint64_t)"bswap.and2";
              v132 = 259;
              v84 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v133, v78, (uint64_t)v83, (uint64_t)v129);
              v129[0] = (uint64_t)"bswap.or1";
              v132 = 259;
              v85 = (_QWORD *)sub_1C4773594((uint64_t)&v133, v74, v82, (uint64_t)v129);
              v129[0] = (uint64_t)"bswap.or2";
              v132 = 259;
              v86 = sub_1C4773594((uint64_t)&v133, v84, v80, (uint64_t)v129);
              v129[0] = (uint64_t)"bswap.i32";
              v132 = 259;
              goto LABEL_111;
            }
            v90 = llvm::ConstantInt::get(*v70, 56, 0);
            v129[0] = (uint64_t)"bswap.8";
            v132 = 259;
            v91 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v90, (uint64_t)v129, 0, 0);
            v92 = llvm::ConstantInt::get(*v70, 40, 0);
            v129[0] = (uint64_t)"bswap.7";
            v132 = 259;
            v93 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v92, (uint64_t)v129, 0, 0);
            v94 = llvm::ConstantInt::get(*v70, 24, 0);
            v129[0] = (uint64_t)"bswap.6";
            v132 = 259;
            v95 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v94, (uint64_t)v129, 0, 0);
            v96 = llvm::ConstantInt::get(*v70, 8, 0);
            v129[0] = (uint64_t)"bswap.5";
            v132 = 259;
            v97 = (_QWORD *)sub_1C506E874((uint64_t)&v133, (uint64_t)v70, (uint64_t)v96, (uint64_t)v129, 0, 0);
            v98 = llvm::ConstantInt::get(*v70, 8, 0);
            v129[0] = (uint64_t)"bswap.4";
            v132 = 259;
            v99 = (_QWORD *)sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v98, (uint64_t)v129, 0);
            v100 = llvm::ConstantInt::get(*v70, 24, 0);
            v129[0] = (uint64_t)"bswap.3";
            v132 = 259;
            v101 = (_QWORD *)sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v100, (uint64_t)v129, 0);
            v102 = llvm::ConstantInt::get(*v70, 40, 0);
            v129[0] = (uint64_t)"bswap.2";
            v132 = 259;
            v103 = (_QWORD *)sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v102, (uint64_t)v129, 0);
            v104 = llvm::ConstantInt::get(*v70, 56, 0);
            v129[0] = (uint64_t)"bswap.1";
            v132 = 259;
            v124 = sub_1C506ED1C((uint64_t)&v133, (uint64_t)v70, (uint64_t)v104, (uint64_t)v129, 0);
            v105 = llvm::ConstantInt::get(*v70, 0xFF000000000000, 0);
            v129[0] = (uint64_t)"bswap.and7";
            v132 = 259;
            v106 = sub_1C4D89BCC((uint64_t)&v133, v93, (uint64_t)v105, (uint64_t)v129);
            v107 = llvm::ConstantInt::get(*v70, 0xFF0000000000, 0);
            v129[0] = (uint64_t)"bswap.and6";
            v132 = 259;
            v108 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v133, v95, (uint64_t)v107, (uint64_t)v129);
            v109 = llvm::ConstantInt::get(*v70, 0xFF00000000, 0);
            v129[0] = (uint64_t)"bswap.and5";
            v132 = 259;
            v110 = sub_1C4D89BCC((uint64_t)&v133, v97, (uint64_t)v109, (uint64_t)v129);
            v111 = llvm::ConstantInt::get(*v70, 4278190080, 0);
            v129[0] = (uint64_t)"bswap.and4";
            v132 = 259;
            v112 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v133, v99, (uint64_t)v111, (uint64_t)v129);
            v113 = llvm::ConstantInt::get(*v70, 16711680, 0);
            v129[0] = (uint64_t)"bswap.and3";
            v132 = 259;
            v114 = sub_1C4D89BCC((uint64_t)&v133, v101, (uint64_t)v113, (uint64_t)v129);
            v115 = llvm::ConstantInt::get(*v70, 65280, 0);
            v129[0] = (uint64_t)"bswap.and2";
            v132 = 259;
            v116 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v133, v103, (uint64_t)v115, (uint64_t)v129);
            v129[0] = (uint64_t)"bswap.or1";
            v132 = 259;
            v117 = (_QWORD *)sub_1C4773594((uint64_t)&v133, v91, v106, (uint64_t)v129);
            v129[0] = (uint64_t)"bswap.or2";
            v132 = 259;
            v118 = sub_1C4773594((uint64_t)&v133, v108, v110, (uint64_t)v129);
            v129[0] = (uint64_t)"bswap.or3";
            v132 = 259;
            v119 = (_QWORD *)sub_1C4773594((uint64_t)&v133, v112, v114, (uint64_t)v129);
            v129[0] = (uint64_t)"bswap.or4";
            v132 = 259;
            v120 = sub_1C4773594((uint64_t)&v133, v116, v124, (uint64_t)v129);
            v129[0] = (uint64_t)"bswap.or5";
            v132 = 259;
            v85 = (_QWORD *)sub_1C4773594((uint64_t)&v133, v117, v118, (uint64_t)v129);
            v129[0] = (uint64_t)"bswap.or6";
            v132 = 259;
            v86 = sub_1C4773594((uint64_t)&v133, v119, v120, (uint64_t)v129);
            v89 = "bswap.i64";
          }
          v129[0] = (uint64_t)v89;
          v132 = 259;
LABEL_111:
          v14 = sub_1C4773594((uint64_t)&v133, v85, v86, (uint64_t)v129);
          if (v133 != &v135)
            free(v133);
LABEL_113:
          v121 = (llvm::ValueAsMetadata *)a2;
          v36 = (llvm::Value *)v14;
          break;
        case 14:
          v21 = "ceilf";
          v22 = "ceil";
          v23 = "ceill";
          goto LABEL_107;
        default:
          if (v7 != 19)
            goto LABEL_87;
          v21 = "copysignf";
          v22 = "copysign";
          v23 = "copysignl";
          goto LABEL_107;
      }
LABEL_116:
      llvm::Value::doRAUW(v121, v36, (llvm::Value *)1);
      goto LABEL_117;
    }
    if (v7 <= 139)
    {
      switch(v7)
      {
        case 'I':
          goto LABEL_38;
        case 'J':
          goto LABEL_87;
        case 'K':
          v21 = "expf";
          v22 = "exp";
          v23 = "expl";
          goto LABEL_107;
        case 'L':
          v21 = "exp2f";
          v22 = "exp2";
          v23 = "exp2l";
          goto LABEL_107;
        case 'M':
LABEL_45:
          v36 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
          goto LABEL_115;
        default:
          if (v7 != 126)
            goto LABEL_87;
          goto LABEL_117;
      }
    }
    if (v7 > 146)
    {
      if (v7 == 147)
      {
LABEL_70:
        v47 = (llvm::raw_ostream *)llvm::errs(v5);
        v48 = v47;
        v49 = (void *)*((_QWORD *)v47 + 4);
        if (*((_QWORD *)v47 + 3) - (_QWORD)v49 > 0x2EuLL)
        {
          qmemcpy(v49, "WARNING: this target does not support the llvm.", 47);
          v50 = (void *)(*((_QWORD *)v47 + 4) + 47);
          *((_QWORD *)v48 + 4) = v50;
        }
        else
        {
          llvm::raw_ostream::write(v47, "WARNING: this target does not support the llvm.", 0x2FuLL);
          v50 = (void *)*((_QWORD *)v48 + 4);
        }
        v51 = *(_DWORD *)(v6 + 36);
        if (v51 == 257)
          v52 = "return";
        else
          v52 = "frame";
        if (v51 == 257)
          v53 = 6;
        else
          v53 = 5;
        if (v53 <= *((_QWORD *)v48 + 3) - (_QWORD)v50)
        {
          memcpy(v50, v52, v53);
          v54 = *((_QWORD *)v48 + 4) + v53;
          *((_QWORD *)v48 + 4) = v54;
        }
        else
        {
          llvm::raw_ostream::write(v48, v52, v53);
          v54 = *((_QWORD *)v48 + 4);
        }
        if (*((_QWORD *)v48 + 3) - v54 > 0x12)
        {
          *(_DWORD *)(v54 + 15) = 170812265;
          *(_OWORD *)v54 = *(_OWORD *)"address intrinsic.\n";
          *((_QWORD *)v48 + 4) += 19;
        }
        else
        {
          v18 = "address intrinsic.\n";
          v15 = v48;
          v19 = 19;
LABEL_82:
          llvm::raw_ostream::write(v15, v18, v19);
        }
LABEL_83:
        NullValue = (llvm::Value *)llvm::ConstantPointerNull::get(*a2, v16);
LABEL_114:
        v36 = NullValue;
LABEL_115:
        v121 = (llvm::ValueAsMetadata *)a2;
        goto LABEL_116;
      }
      if (v7 != 154)
        goto LABEL_87;
      v37 = (llvm::raw_ostream *)llvm::errs(v5);
      v38 = (void *)*((_QWORD *)v37 + 4);
      if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0x73uLL)
      {
        qmemcpy(v38, "WARNING: this target does not support the custom llvm.get.dynamic.area.offset.  It is being lowered to a constant 0\n", 116);
        *((_QWORD *)v37 + 4) += 116;
      }
      else
      {
        llvm::raw_ostream::write(v37, "WARNING: this target does not support the custom llvm.get.dynamic.area.offset.  It is being lowered to a constant 0\n", 0x74uLL);
      }
      v5 = *a2;
      v24 = 0;
    }
    else
    {
      if (v7 == 140)
      {
        v21 = "floorf";
        v22 = "floor";
        v23 = "floorl";
        goto LABEL_107;
      }
      if (v7 != 141)
      {
LABEL_87:
        Name = llvm::Value::getName((llvm::Value *)v6);
        v132 = 1283;
        v57 = "Code generator does not support intrinsic function '";
LABEL_132:
        v129[0] = (uint64_t)v57;
        v130 = Name;
        v131 = v56;
        v125 = "'!";
        v126 = 259;
        sub_1C6131AAC(v129, (uint64_t *)&v125, (uint64_t)&v133);
        llvm::report_fatal_error((uint64_t)&v133, 1);
      }
      if (*((_BYTE *)v5 + 8) == 7)
        goto LABEL_117;
LABEL_38:
      v24 = 1;
    }
    NullValue = (llvm::Value *)llvm::ConstantInt::get(v5, v24, 0);
    goto LABEL_114;
  }
  v8 = *(llvm::LLVMContext **)v5;
  if (v7 <= 236)
  {
    if (v7 <= 193)
    {
      switch(v7)
      {
        case 163:
        case 167:
          goto LABEL_117;
        case 164:
        case 168:
          NullValue = llvm::UndefValue::get(v5, v4);
          goto LABEL_114;
        case 175:
          v21 = "logf";
          v22 = "log";
          v23 = "logl";
          goto LABEL_107;
        case 176:
          v21 = "log10f";
          v22 = "log10";
          v23 = "log10l";
          goto LABEL_107;
        case 177:
          v21 = "log2f";
          v22 = "log2";
          v23 = "log2l";
          goto LABEL_107;
        default:
          goto LABEL_87;
      }
    }
    switch(v7)
    {
      case 194:
        IntPtrType = llvm::DataLayout::getIntPtrType(*this, v8, 0);
        v59 = (unsigned __int8 *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
        v137 = 257;
        v60 = sub_1C4D8D514((uint64_t *)v127, v59, (uint64_t)IntPtrType, 0, (uint64_t)&v133);
        v61 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        v62 = *v61;
        v63 = v61[4];
        v133 = v62;
        v134 = v63;
        v135 = v60;
        v32 = (uint64_t **)&v136;
        v33 = *(uint64_t ***)v62;
        v34 = "memcpy";
        break;
      case 197:
        v64 = llvm::DataLayout::getIntPtrType(*this, v8, 0);
        v65 = (unsigned __int8 *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
        v137 = 257;
        v66 = sub_1C4D8D514((uint64_t *)v127, v65, (uint64_t)v64, 0, (uint64_t)&v133);
        v67 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        v68 = *v67;
        v69 = v67[4];
        v133 = v68;
        v134 = v69;
        v135 = v66;
        v32 = (uint64_t **)&v136;
        v33 = *(uint64_t ***)v68;
        v34 = "memmove";
        break;
      case 199:
        v25 = (llvm::Type ***)&a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        v26 = *v25;
        llvm::DataLayout::getIntPtrType(*this, **v25);
        v27 = (unsigned __int8 *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
        v137 = 257;
        v29 = sub_1C4D8D514((uint64_t *)v127, v27, v28, 0, (uint64_t)&v133);
        v129[0] = (uint64_t)v26;
        v30 = (unsigned __int8 *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 4];
        v31 = *(_QWORD *)v8 + 1960;
        v137 = 257;
        v129[1] = (uint64_t)sub_1C4D8D514((uint64_t *)v127, v30, v31, 0, (uint64_t)&v133);
        v130 = v29;
        v32 = (uint64_t **)&v131;
        v33 = *(uint64_t ***)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
        v34 = "memset";
        v35 = (void **)v129;
LABEL_99:
        sub_1C50EE0F8(v34, (uint64_t ***)a2, (uint64_t **)v35, v32, v33);
        goto LABEL_117;
      default:
        goto LABEL_87;
    }
    v35 = &v133;
    goto LABEL_99;
  }
  if (v7 <= 272)
  {
    switch(v7)
    {
      case 237:
      case 240:
        goto LABEL_117;
      case 238:
        v21 = "powf";
        v22 = "pow";
        v23 = "powl";
        goto LABEL_107;
      case 239:
      case 241:
      case 242:
      case 243:
      case 244:
        goto LABEL_87;
      case 245:
        goto LABEL_45;
      default:
        switch(v7)
        {
          case 256:
            v9 = (llvm::raw_ostream *)llvm::errs(v5);
            v11 = (void *)*((_QWORD *)v9 + 4);
            if (*((_QWORD *)v9 + 3) - (_QWORD)v11 > 0x3BuLL)
            {
              qmemcpy(v11, "WARNING: this target does not support the llvm.readcyclecoun", 60);
              v12 = (void *)(*((_QWORD *)v9 + 4) + 60);
              *((_QWORD *)v9 + 4) = v12;
            }
            else
            {
              v9 = llvm::raw_ostream::write(v9, "WARNING: this target does not support the llvm.readcyclecoun", 0x3CuLL);
              v12 = (void *)*((_QWORD *)v9 + 4);
            }
            if (*((_QWORD *)v9 + 3) - (_QWORD)v12 > 0x33uLL)
            {
              qmemcpy(v12, "ter intrinsic.  It is being lowered to a constant 0\n", 52);
              *((_QWORD *)v9 + 4) += 52;
            }
            else
            {
              llvm::raw_ostream::write(v9, "ter intrinsic.  It is being lowered to a constant 0\n", 0x34uLL);
            }
            v13 = *(llvm::ConstantInt **)(*(_QWORD *)v8 + 1984);
            LODWORD(v134) = *(_DWORD *)(*(_QWORD *)v8 + 1992) >> 8;
            if (v134 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v133, 0, 0);
            else
              v133 = 0;
            v14 = (uint64_t)llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v133, v10);
            if (v134 >= 0x41 && v133)
              MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
            goto LABEL_113;
          case 257:
            goto LABEL_70;
          case 259:
            v21 = "roundf";
            v22 = "round";
            v23 = "roundl";
            goto LABEL_107;
          case 260:
            v21 = "roundevenf";
            v22 = "roundeven";
            v23 = "roundevenl";
            goto LABEL_107;
          default:
            goto LABEL_87;
        }
    }
  }
  if (v7 <= 286)
  {
    if (v7 == 273)
    {
      v21 = "sinf";
      v22 = "sin";
      v23 = "sinl";
      goto LABEL_107;
    }
    if (v7 == 280)
    {
      v21 = "sqrtf";
      v22 = "sqrt";
      v23 = "sqrtl";
LABEL_107:
      sub_1C50EE41C((uint64_t)a2, v21, v22, v23);
      goto LABEL_117;
    }
    goto LABEL_87;
  }
  if ((v7 - 287) < 2)
  {
    if (!*((_BYTE *)this + 8))
    {
      v39 = (llvm::raw_ostream *)llvm::errs(v5);
      v40 = v39;
      v41 = (void *)*((_QWORD *)v39 + 4);
      if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 0x33uLL)
      {
        qmemcpy(v41, "WARNING: this target does not support the llvm.stack", 52);
        v42 = (void *)(*((_QWORD *)v39 + 4) + 52);
        *((_QWORD *)v40 + 4) = v42;
      }
      else
      {
        llvm::raw_ostream::write(v39, "WARNING: this target does not support the llvm.stack", 0x34uLL);
        v42 = (void *)*((_QWORD *)v40 + 4);
      }
      v43 = *(_DWORD *)(v6 + 36);
      if (v43 == 288)
        v44 = "save";
      else
        v44 = "restore";
      if (v43 == 288)
        v45 = 4;
      else
        v45 = 7;
      if (v45 <= *((_QWORD *)v40 + 3) - (_QWORD)v42)
      {
        memcpy(v42, v44, v45);
        v46 = *((_QWORD *)v40 + 4) + v45;
        *((_QWORD *)v40 + 4) = v46;
      }
      else
      {
        llvm::raw_ostream::write(v40, v44, v45);
        v46 = *((_QWORD *)v40 + 4);
      }
      if (*((_QWORD *)v40 + 3) - v46 > 0xB)
      {
        *(_DWORD *)(v46 + 8) = 170812265;
        *(_QWORD *)v46 = *(_QWORD *)" intrinsic.\n";
        *((_QWORD *)v40 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v40, " intrinsic.\n", 0xCuLL);
      }
    }
    *((_BYTE *)this + 8) = 1;
    if (*(_DWORD *)(v6 + 36) != 288)
      goto LABEL_117;
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(*a2, v4);
    goto LABEL_114;
  }
  if (v7 == 296)
  {
    v21 = "truncf";
    v22 = "trunc";
    v23 = "truncl";
    goto LABEL_107;
  }
  if (v7 != 316)
    goto LABEL_87;
LABEL_117:
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)a2[5] + 40, (uint64_t ***)a2);
  v122 = a2[3];
  v123 = a2[4];
  *(_QWORD *)v123 = v122;
  *((_QWORD *)v122 + 1) = v123;
  a2[3] = 0;
  a2[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)a2);
  if (v127[0] != &v128)
    free(v127[0]);
}

llvm::Value *sub_1C50EDAEC(llvm::Type **a1, uint64_t a2)
{
  llvm::ConstantInt *v3;
  const char *v4;
  unint64_t PrimitiveSizeInBits;
  unsigned int v6;
  llvm::Value **v7;
  llvm::Value *v8;
  int v10;
  unsigned int v11;
  llvm::Type **v12;
  unsigned int v13;
  unsigned int v14;
  llvm::Value **v15;
  _QWORD *v16;
  llvm::Value **v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unsigned __int8 **v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  llvm::Value **v37;
  char *v38;
  char *v39;
  llvm::Value ***v40;
  llvm::Type *v41;
  _QWORD *v42;
  llvm::Type *v43;
  llvm::Value *v44;
  llvm::Value ****v45;
  char *v46;
  char *v47;
  unsigned __int8 **v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  llvm::Value **v54;
  int v55;
  unint64_t v56;
  _QWORD v57[4];
  __int16 v58;
  _QWORD v59[4];
  __int16 v60;
  unsigned __int8 *v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v62, a2, 0, 0, 0);
  v3 = *a1;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*a1);
  if ((_DWORD)v4 == 1)
  {
    v3 = *a1;
  }
  v6 = PrimitiveSizeInBits + 63;
  v7 = llvm::ConstantInt::get(v3, 0, 0);
  if ((PrimitiveSizeInBits + 63) >= 0x40)
  {
    v10 = 0;
    while (1)
    {
      v54 = v7;
      v55 = v10;
      v56 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits >= 0x40)
        v11 = 64;
      else
        v11 = PrimitiveSizeInBits;
      v12 = a1;
      if (v11 >= 2)
      {
        v13 = 0;
        v14 = 1;
        v12 = a1;
        while (1)
        {
          v15 = llvm::ConstantInt::get(*a1, qword_1C85FAC88[v13], 0);
          v59[0] = "cppop.and1";
          v60 = 259;
          v16 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v62, v12, (uint64_t)v15, (uint64_t)v59);
          v17 = llvm::ConstantInt::get(*a1, v14, 0);
          v59[0] = "ctpop.sh";
          v60 = 259;
          v18 = (_QWORD *)sub_1C506ED1C((uint64_t)&v62, (uint64_t)v12, (uint64_t)v17, (uint64_t)v59, 0);
          v59[0] = "cppop.and2";
          v60 = 259;
          v19 = sub_1C4D89BCC((uint64_t)&v62, v18, (uint64_t)v15, (uint64_t)v59);
          v57[0] = "ctpop.step";
          v58 = 259;
          v12 = (llvm::Type **)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v67 + 16))(v67, v16, v19, 0, 0);
          if (!v12)
          {
            v60 = 257;
            v20 = (char *)operator new(0x80uLL);
            v21 = v20;
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v20 + 1) = 0;
            *((_QWORD *)v20 + 2) = 0;
            *((_QWORD *)v20 + 5) = 0;
            *((_QWORD *)v20 + 6) = 0;
            *((_QWORD *)v20 + 4) = 0;
            v22 = (uint64_t *)(v20 + 32);
            *((_QWORD *)v20 + 8) = *v16;
            v12 = (llvm::Type **)(v20 + 64);
            *((_QWORD *)v20 + 3) = v20 + 64;
            *((_QWORD *)v20 + 7) = v20 + 64;
            *((_QWORD *)v20 + 9) = 0;
            v20[80] = 41;
            v20[81] = 0;
            *((_WORD *)v20 + 41) = 0;
            *((_DWORD *)v20 + 21) = 2;
            *((_DWORD *)v20 + 30) = 0;
            *(_OWORD *)(v20 + 104) = 0u;
            *(_OWORD *)(v20 + 88) = 0u;
            *(_QWORD *)v20 = v16;
            v25 = v16[1];
            v24 = v16 + 1;
            v23 = v25;
            *((_QWORD *)v20 + 1) = v25;
            if (v25)
              *(_QWORD *)(v23 + 16) = v20 + 8;
            *((_QWORD *)v20 + 2) = v24;
            *v24 = v20;
            if (*((_QWORD *)v20 + 4))
            {
              **((_QWORD **)v20 + 6) = *((_QWORD *)v20 + 5);
              v36 = *((_QWORD *)v20 + 5);
              if (v36)
                *(_QWORD *)(v36 + 16) = *((_QWORD *)v20 + 6);
            }
            *v22 = v19;
            if (v19)
            {
              v28 = *(_QWORD *)(v19 + 8);
              v27 = (uint64_t **)(v19 + 8);
              v26 = v28;
              *((_QWORD *)v20 + 5) = v28;
              if (v28)
                *(_QWORD *)(v26 + 16) = v20 + 40;
              *((_QWORD *)v20 + 6) = v27;
              *v27 = v22;
            }
            llvm::Value::setName((uint64_t ***)v20 + 8, (uint64_t)v59);
            (*(void (**)(uint64_t, llvm::Type **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v12, v57, v65, v66);
            if (v63)
              break;
          }
LABEL_37:
          v14 *= 2;
          ++v13;
          if (v14 >= v11)
            goto LABEL_41;
        }
        v29 = (char *)v62;
        v30 = (char *)v62 + 16 * v63;
        v31 = (unsigned __int8 **)(v21 + 112);
        while (1)
        {
          v32 = *(_DWORD *)v29;
          v33 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
          if (v33)
          {
            if (!v32)
            {
              v61 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
              llvm::MetadataTracking::track((uint64_t)&v61, v33, 2);
              v34 = *v31;
              if (!*v31)
              {
LABEL_35:
                v35 = v61;
                *v31 = v61;
                if (v35)
                  llvm::MetadataTracking::retrack((uint64_t)&v61, v35, (uint64_t)(v21 + 112));
                goto LABEL_32;
              }
LABEL_29:
              llvm::MetadataTracking::untrack((uint64_t)(v21 + 112), v34);
              goto LABEL_35;
            }
          }
          else
          {
            v34 = *v31;
            if (!*v31 && (v21[87] & 0x20) == 0)
              goto LABEL_32;
            if (!v32)
            {
              v61 = 0;
              if (!v34)
                goto LABEL_35;
              goto LABEL_29;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v12, *(_DWORD *)v29, (llvm::MDNode *)v33);
LABEL_32:
          v29 += 16;
          if (v29 == v30)
            goto LABEL_37;
        }
      }
LABEL_41:
      v57[0] = "ctpop.part";
      v58 = 259;
      v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Type **, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v67 + 16))(v67, v12, v54, 0, 0);
      if (!v8)
      {
        v60 = 257;
        v38 = (char *)operator new(0x80uLL);
        v39 = v38;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        *((_QWORD *)v38 + 5) = 0;
        *((_QWORD *)v38 + 6) = 0;
        *((_QWORD *)v38 + 4) = 0;
        v40 = (llvm::Value ***)(v38 + 32);
        *((_QWORD *)v38 + 8) = *v12;
        v8 = (llvm::Value *)(v38 + 64);
        *((_QWORD *)v38 + 3) = v38 + 64;
        *((_QWORD *)v38 + 7) = v38 + 64;
        *((_QWORD *)v38 + 9) = 0;
        v38[80] = 41;
        v38[81] = 0;
        *((_WORD *)v38 + 41) = 0;
        *((_DWORD *)v38 + 21) = 2;
        *((_DWORD *)v38 + 30) = 0;
        *(_OWORD *)(v38 + 104) = 0u;
        *(_OWORD *)(v38 + 88) = 0u;
        *(_QWORD *)v38 = v12;
        v43 = v12[1];
        v42 = v12 + 1;
        v41 = v43;
        *((_QWORD *)v38 + 1) = v43;
        if (v43)
          *((_QWORD *)v41 + 2) = v38 + 8;
        *((_QWORD *)v38 + 2) = v42;
        *v42 = v38;
        if (*((_QWORD *)v38 + 4))
        {
          **((_QWORD **)v38 + 6) = *((_QWORD *)v38 + 5);
          v53 = *((_QWORD *)v38 + 5);
          if (v53)
            *(_QWORD *)(v53 + 16) = *((_QWORD *)v38 + 6);
        }
        *v40 = v54;
        if (v54)
        {
          v45 = (llvm::Value ****)(v54 + 1);
          v44 = v54[1];
          *((_QWORD *)v38 + 5) = v44;
          if (v44)
            *((_QWORD *)v44 + 2) = v38 + 40;
          *((_QWORD *)v38 + 6) = v45;
          *v45 = v40;
        }
        llvm::Value::setName((uint64_t ***)v38 + 8, (uint64_t)v59);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v68 + 16))(v68, v8, v57, v65, v66);
        if (v63)
          break;
      }
LABEL_42:
      PrimitiveSizeInBits = v56;
      if (v56 > 0x40)
      {
        v37 = llvm::ConstantInt::get(*a1, 64, 0);
        v59[0] = "ctpop.part.sh";
        v60 = 259;
        a1 = (llvm::Type **)sub_1C506ED1C((uint64_t)&v62, (uint64_t)a1, (uint64_t)v37, (uint64_t)v59, 0);
        PrimitiveSizeInBits = (v56 - 64);
      }
      v10 = v55 + 1;
      v7 = (llvm::Value **)v8;
      if (v55 + 1 == v6 >> 6)
        goto LABEL_5;
    }
    v46 = (char *)v62;
    v47 = (char *)v62 + 16 * v63;
    v48 = (unsigned __int8 **)(v39 + 112);
    while (1)
    {
      v49 = *(_DWORD *)v46;
      v50 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
      if (v50)
      {
        if (!v49)
        {
          v61 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
          llvm::MetadataTracking::track((uint64_t)&v61, v50, 2);
          v51 = *v48;
          if (!*v48)
          {
LABEL_66:
            v52 = v61;
            *v48 = v61;
            if (v52)
              llvm::MetadataTracking::retrack((uint64_t)&v61, v52, (uint64_t)(v39 + 112));
            goto LABEL_63;
          }
LABEL_60:
          llvm::MetadataTracking::untrack((uint64_t)(v39 + 112), v51);
          goto LABEL_66;
        }
      }
      else
      {
        v51 = *v48;
        if (!*v48 && (v39[87] & 0x20) == 0)
          goto LABEL_63;
        if (!v49)
        {
          v61 = 0;
          if (!v51)
            goto LABEL_66;
          goto LABEL_60;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v46, (llvm::MDNode *)v50);
LABEL_63:
      v46 += 16;
      if (v46 == v47)
        goto LABEL_42;
    }
  }
  v8 = (llvm::Value *)v7;
LABEL_5:
  if (v62 != &v64)
    free(v62);
  return v8;
}

void sub_1C50EE0F8(char *a1, uint64_t ***a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t **v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  llvm::PointerType *v19;
  uint64_t **inserted;
  uint64_t v21;
  uint64_t v22;
  uint64_t ***v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  char *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t v37;
  _QWORD v42[4];
  __int16 v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  void *v47[2];
  _QWORD v48[17];

  v48[15] = *MEMORY[0x1E0C80C00];
  v37 = a2[5][7][5];
  if (a3 == a4)
  {
    v11 = 0;
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = a3;
    do
    {
      v10 = **v9;
      if (v8 >= v6)
      {
        v12 = (v8 - v7) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          abort();
        if ((v6 - v7) >> 2 > v13)
          v13 = (v6 - v7) >> 2;
        if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v12];
        *(_QWORD *)v16 = v10;
        v11 = v16 + 8;
        while (v8 != v7)
        {
          v17 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        v6 = &v15[8 * v14];
        if (v7)
          operator delete(v7);
        v7 = v16;
      }
      else
      {
        *(_QWORD *)v8 = v10;
        v11 = v8 + 8;
      }
      ++v9;
      v8 = v11;
    }
    while (v9 != a4);
  }
  if (a1)
    v18 = strlen(a1);
  else
    v18 = 0;
  v19 = (llvm::PointerType *)llvm::FunctionType::get(a5, (uint64_t *)v7, (v11 - v7) >> 3, 0);
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v37, (unsigned __int8 *)a1, v18, v19, 0);
  v22 = v21;
  sub_1C4D8ADA0((uint64_t)v47, a2[5], (uint64_t)(a2 + 3), 0, 0, 0);
  v44 = v46;
  v45 = 0x800000000;
  sub_1C486AF08((unsigned int *)&v44, a3, a4);
  v43 = 257;
  v23 = (uint64_t ***)sub_1C4774778((uint64_t *)v47, inserted, v22, (uint64_t *)v44, v45, (uint64_t)v42, 0);
  v24 = (llvm::Value *)v23;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v25 = ***a2;
    v26 = *(_QWORD *)(v25 + 152);
    v27 = *(unsigned int *)(v25 + 168);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v29 = (uint64_t ****)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 == a2)
      {
LABEL_35:
        v33 = v29[1];
        v36 = *v33;
        v34 = (char *)(v33 + 2);
        v35 = v36;
        goto LABEL_36;
      }
      v31 = 1;
      while (v30 != (uint64_t ***)-4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(uint64_t ****)(v26 + 16 * v28);
        if (v30 == a2)
        {
          v29 = (uint64_t ****)(v26 + 16 * v28);
          goto LABEL_35;
        }
      }
    }
    v29 = (uint64_t ****)(v26 + 16 * v27);
    goto LABEL_35;
  }
  v35 = 0;
  v34 = &byte_1C871356D;
LABEL_36:
  v43 = 261;
  v42[0] = v34;
  v42[1] = v35;
  llvm::Value::setName(v23, (uint64_t)v42);
  if (a2[1])
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v24, (llvm::Value *)1);
  if (v44 != v46)
    free(v44);
  if (v47[0] == v48)
  {
    if (!v7)
      return;
  }
  else
  {
    free(v47[0]);
    if (!v7)
      return;
  }
  operator delete(v7);
}

void sub_1C50EE41C(uint64_t a1, char *a2, char *a3, char *a4)
{
  int v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_DWORD *)(a1 + 20);
  v7 = (char *)(a1 - 32 * (v6 & 0x7FFFFFF));
  v8 = **(_QWORD **)v7;
  v9 = *(unsigned __int8 *)(v8 + 8);
  if ((v9 - 4) >= 3)
  {
    if (v9 == 2)
    {
      v17 = *(unsigned __int8 *)(a1 + 16);
      if (v17 == 84)
      {
        v18 = 0;
      }
      else if (v17 == 39)
      {
        v18 = (*(_DWORD *)(a1 + 80) + 1);
      }
      else
      {
        v18 = 2;
      }
      if (v6 < 0 && (v24 = *((_QWORD *)v7 - 1), (v24 & 0xFFFFFFFF0) != 0))
        v19 = (*((_DWORD *)v7 - 3) - *(_DWORD *)&v7[-v24]);
      else
        v19 = 0;
      v16 = (char *)(a1 - 32 * v18 - 32 * v19 - 32);
      v8 = ***(_QWORD ***)a1 + 1672;
      a4 = a2;
    }
    else
    {
      v20 = *(unsigned __int8 *)(a1 + 16);
      if (v20 == 84)
      {
        v21 = 0;
      }
      else if (v20 == 39)
      {
        v21 = (*(_DWORD *)(a1 + 80) + 1);
      }
      else
      {
        v21 = 2;
      }
      if (v6 < 0 && (v25 = *((_QWORD *)v7 - 1), (v25 & 0xFFFFFFFF0) != 0))
        v22 = (*((_DWORD *)v7 - 3) - *(_DWORD *)&v7[-v25]);
      else
        v22 = 0;
      v16 = (char *)(a1 - 32 * v21 - 32 * v22 - 32);
      v8 = ***(_QWORD ***)a1 + 1696;
      a4 = a3;
    }
    v15 = (uint64_t ***)a1;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 16);
    if (v10 == 84)
    {
      v11 = 0;
    }
    else if (v10 == 39)
    {
      v11 = (*(_DWORD *)(a1 + 80) + 1);
    }
    else
    {
      v11 = 2;
    }
    if (v6 < 0 && (v23 = *((_QWORD *)v7 - 1), (v23 & 0xFFFFFFFF0) != 0))
      v12 = (*((_DWORD *)v7 - 3) - *(_DWORD *)&v7[-v23]);
    else
      v12 = 0;
    v13 = a1 - 32 * v11 - 32 * v12 - 32;
    v15 = (uint64_t ***)a1;
    v16 = (char *)v13;
  }
  sub_1C50EE8A8(a4, v15, v7, v16, (uint64_t **)v8);
}

uint64_t llvm::IntrinsicLowering::LowerToByteSwap(llvm::IntrinsicLowering *this, llvm::CallInst *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::IntrinsicLowering *v9;
  uint64_t *v10;
  uint64_t Declaration;
  uint64_t v12;
  int v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::IntrinsicLowering *v20;
  int v21;
  int v22;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  llvm::Value *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  llvm::ValueSymbolTable *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40[4];
  __int16 v41;
  char *v42;

  v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 84)
  {
    v4 = 0;
  }
  else if (v3 == 39)
  {
    v4 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    v4 = 2;
  }
  v5 = 0;
  v6 = *((_DWORD *)this + 5);
  v7 = -(uint64_t)(v6 & 0x7FFFFFF);
  if (v6 < 0)
  {
    v38 = (char *)this - 32 * (v6 & 0x7FFFFFF);
    v39 = *((_QWORD *)v38 - 1);
    if ((v39 & 0xFFFFFFFF0) != 0)
      v5 = *((_DWORD *)v38 - 3) - *(_DWORD *)&v38[-v39];
    else
      v5 = 0;
  }
  v8 = 0;
  v9 = (llvm::IntrinsicLowering *)((char *)this + 32 * v7);
  if ((((llvm::IntrinsicLowering *)((char *)this + 32 * -v5 + -32 * v4) - v9 - 32) & 0x1FFFFFFFE0) == 0x20)
  {
    if (*(_QWORD *)this != **(_QWORD **)v9 || *(_BYTE *)(*(_QWORD *)this + 8) != 13)
      return 0;
    v10 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
    v40[0] = *(_QWORD *)this;
    Declaration = llvm::Intrinsic::getDeclaration(v10, 9, v40, 1);
    v12 = Declaration;
    v13 = *((_DWORD *)this + 5);
    v42 = (char *)*((_QWORD *)this - 4 * (v13 & 0x7FFFFFF));
    if (Declaration)
    {
      v14 = *(uint64_t ***)(Declaration + 24);
      if ((v13 & 0x10000000) != 0)
        goto LABEL_9;
    }
    else
    {
      v14 = 0;
      if ((v13 & 0x10000000) != 0)
      {
LABEL_9:
        v15 = ***(_QWORD ***)this;
        v16 = *(_QWORD *)(v15 + 152);
        v17 = *(unsigned int *)(v15 + 168);
        if ((_DWORD)v17)
        {
          LODWORD(v18) = (v17 - 1) & ((this >> 4) ^ (this >> 9));
          v19 = v16 + 16 * v18;
          v20 = *(llvm::IntrinsicLowering **)v19;
          if (*(llvm::IntrinsicLowering **)v19 == this)
          {
LABEL_20:
            v26 = *(_QWORD **)(v19 + 8);
            v27 = *v26;
            v25 = (char *)(v26 + 2);
            v24 = v27;
LABEL_21:
            v41 = 261;
            v40[0] = (uint64_t)v25;
            v40[1] = v24;
            v28 = (char *)operator new(0x90uLL);
            v29 = (llvm::Value *)(v28 + 64);
            *((_DWORD *)v28 + 21) = *((_DWORD *)v28 + 21) & 0x38000000 | 2;
            *(_QWORD *)v28 = 0;
            *((_QWORD *)v28 + 1) = 0;
            *((_QWORD *)v28 + 2) = 0;
            *((_QWORD *)v28 + 3) = v28 + 64;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = v28 + 64;
            *((_QWORD *)v28 + 8) = *v14[2];
            *((_QWORD *)v28 + 9) = 0;
            v28[80] = 84;
            v28[81] = 0;
            *((_WORD *)v28 + 41) = 0;
            *((_DWORD *)v28 + 21) = 2;
            *(_OWORD *)(v28 + 88) = 0u;
            v30 = v28 + 88;
            *(_OWORD *)(v28 + 104) = 0u;
            *((_DWORD *)v28 + 30) = 0;
            v31 = *((_QWORD *)this + 5);
            v32 = (_QWORD *)((char *)this + 24);
            *((_QWORD *)v28 + 13) = v31;
            *(_WORD *)(v31 + 18) &= ~0x8000u;
            if ((v28[87] & 0x10) != 0)
            {
              v36 = *(_QWORD *)(v31 + 56);
              if (v36)
              {
                v37 = *(llvm::ValueSymbolTable **)(v36 + 104);
                if (v37)
                  llvm::ValueSymbolTable::reinsertValue(v37, v29);
              }
            }
            v33 = *((_QWORD *)this + 3);
            *((_QWORD *)v28 + 11) = v33;
            *((_QWORD *)v28 + 12) = v32;
            *(_QWORD *)(v33 + 8) = v30;
            *((_QWORD *)this + 3) = v30;
            *((_QWORD *)v28 + 16) = 0;
            llvm::CallInst::init((uint64_t ***)v29, v14, v12, (uint64_t *)&v42, 1, 0, 0, (uint64_t)v40);
            v42 = v28 + 64;
            v8 = 1;
            llvm::Value::doRAUW(this, v29, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)this + 5) + 40, (uint64_t ***)this);
            v34 = *((_QWORD *)this + 3);
            v35 = (_QWORD *)*((_QWORD *)this + 4);
            *v35 = v34;
            *(_QWORD *)(v34 + 8) = v35;
            *v32 = 0;
            *((_QWORD *)this + 4) = 0;
            llvm::Value::deleteValue(this);
            return v8;
          }
          v21 = 1;
          while (v20 != (llvm::IntrinsicLowering *)-4096)
          {
            v22 = v18 + v21++;
            v18 = v22 & (v17 - 1);
            v20 = *(llvm::IntrinsicLowering **)(v16 + 16 * v18);
            if (v20 == this)
            {
              v19 = v16 + 16 * v18;
              goto LABEL_20;
            }
          }
        }
        v19 = v16 + 16 * v17;
        goto LABEL_20;
      }
    }
    v24 = 0;
    v25 = &byte_1C871356D;
    goto LABEL_21;
  }
  return v8;
}

void sub_1C50EE8A8(char *a1, uint64_t ***a2, char *a3, char *a4, uint64_t **a5)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  llvm::PointerType *v20;
  uint64_t **inserted;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t ***v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ****v36;
  uint64_t ***v37;
  int v38;
  int v39;
  uint64_t ***v40;
  char *v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t v44;
  _QWORD v48[4];
  __int16 v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[64];
  void *v53[2];
  _QWORD v54[17];

  v6 = a3;
  v54[15] = *MEMORY[0x1E0C80C00];
  v44 = a2[5][7][5];
  if (a3 == a4)
  {
    v12 = 0;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a3;
    do
    {
      v11 = **(_QWORD **)v10;
      if (v9 >= v7)
      {
        v13 = (v9 - v8) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          abort();
        if ((v7 - v8) >> 2 > v14)
          v14 = (v7 - v8) >> 2;
        if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 >> 61)
            sub_1C4764EE4();
          v16 = (char *)operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[8 * v13];
        *(_QWORD *)v17 = v11;
        v12 = v17 + 8;
        while (v9 != v8)
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v17 - 1) = v18;
          v17 -= 8;
        }
        v7 = &v16[8 * v15];
        if (v8)
          operator delete(v8);
        v8 = v17;
      }
      else
      {
        *(_QWORD *)v9 = v11;
        v12 = v9 + 8;
      }
      v10 += 32;
      v9 = v12;
    }
    while (v10 != a4);
  }
  if (a1)
    v19 = strlen(a1);
  else
    v19 = 0;
  v20 = (llvm::PointerType *)llvm::FunctionType::get(a5, (uint64_t *)v8, (v12 - v8) >> 3, 0);
  inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v44, (unsigned __int8 *)a1, v19, v20, 0);
  v23 = v22;
  sub_1C4D8ADA0((uint64_t)v53, a2[5], (uint64_t)(a2 + 3), 0, 0, 0);
  v50 = v52;
  v51 = 0x800000000;
  v24 = a4 - v6;
  if ((unint64_t)(a4 - v6) >= 0x101)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v24 >> 5, 8);
    v25 = v51;
    v27 = (uint64_t *)v50;
    v26 = v51;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = (uint64_t *)v52;
  }
  if (v6 != a4)
  {
    v28 = &v27[v25];
    do
    {
      v29 = *(_QWORD *)v6;
      v6 += 32;
      *v28++ = v29;
    }
    while (v6 != a4);
    v27 = (uint64_t *)v50;
  }
  LODWORD(v51) = v26 + ((unint64_t)v24 >> 5);
  v49 = 257;
  v30 = (uint64_t ***)sub_1C4774778((uint64_t *)v53, inserted, v23, v27, v51, (uint64_t)v48, 0);
  v31 = (llvm::Value *)v30;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v32 = ***a2;
    v33 = *(_QWORD *)(v32 + 152);
    v34 = *(unsigned int *)(v32 + 168);
    if ((_DWORD)v34)
    {
      LODWORD(v35) = (v34 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v36 = (uint64_t ****)(v33 + 16 * v35);
      v37 = *v36;
      if (*v36 == a2)
      {
LABEL_41:
        v40 = v36[1];
        v43 = *v40;
        v41 = (char *)(v40 + 2);
        v42 = v43;
        goto LABEL_42;
      }
      v38 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(uint64_t ****)(v33 + 16 * v35);
        if (v37 == a2)
        {
          v36 = (uint64_t ****)(v33 + 16 * v35);
          goto LABEL_41;
        }
      }
    }
    v36 = (uint64_t ****)(v33 + 16 * v34);
    goto LABEL_41;
  }
  v42 = 0;
  v41 = &byte_1C871356D;
LABEL_42:
  v49 = 261;
  v48[0] = v41;
  v48[1] = v42;
  llvm::Value::setName(v30, (uint64_t)v48);
  if (a2[1])
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v31, (llvm::Value *)1);
  if (v50 != v52)
    free(v50);
  if (v53[0] == v54)
  {
    if (!v8)
      return;
  }
  else
  {
    free(v53[0]);
    if (!v8)
      return;
  }
  operator delete(v8);
}

uint64_t sub_1C50EEC20(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Instrument function entry with call to __CheckForDebuggerJustMyCode";
  *(_QWORD *)(v2 + 8) = 67;
  *(_QWORD *)(v2 + 16) = "jmc-instrument";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F9390;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C50EED78;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50EECB0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F9390;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8143020;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F9398);
  if (v3 != -1)
  {
    v7[0] = sub_1C50EEC20;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F9398, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C50EED78()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C50EECB0(v0);
}

void sub_1C50EEDA4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C50EEDC8(uint64_t a1, uint64_t **a2)
{
  uint64_t *v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  const char ***v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *i;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t **v43;
  llvm::PointerType *v44;
  char v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  llvm::Instruction *v50;
  int v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  char *v56;
  char *v57;
  llvm::Value *v58;
  _QWORD *v59;
  int v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  llvm::PointerType *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ****v77;
  uint64_t ***v78;
  int v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  size_t *v90;
  size_t *v91;
  char *v92;
  BOOL v93;
  unsigned __int8 *v94;
  uint64_t v95;
  size_t *v96;
  size_t *v97;
  char *v98;
  BOOL v99;
  int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  const void *v107;
  unint64_t v108;
  uint64_t v109;
  const char ***v110;
  std::string::size_type v111;
  const char *v112;
  _QWORD *v113;
  std::string::size_type v114;
  uint64_t v115;
  unsigned __int8 *v116;
  std::string::value_type v117;
  int v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  int v122;
  char *v123;
  uint64_t v124;
  char *v125;
  std::string *v126;
  std::string::size_type v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  std::string::size_type v131;
  std::string *v132;
  std::string::size_type v133;
  llvm::PointerType *v134;
  unsigned __int8 *v135;
  unint64_t v136;
  uint64_t ***v137;
  size_t v138;
  unsigned __int8 *v139;
  size_t v140;
  size_t *inserted;
  std::string *v142;
  std::string::size_type v143;
  std::string *v144;
  std::string::size_type v145;
  void *p_dst;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  std::string *v150;
  std::string::size_type size;
  std::string *v152;
  std::string::size_type v153;
  unsigned __int8 *v154;
  size_t v155;
  unsigned __int8 *Impl;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 **v160;
  uint64_t v161;
  llvm::ValueSymbolTable *v162;
  uint64_t v163;
  _QWORD *v165;
  _QWORD *v166;
  const char ***v167;
  int v168;
  uint64_t *v169;
  _BOOL4 v170;
  std::string::value_type *__s;
  const char *v172;
  int v173;
  char *v174;
  uint64_t ***v175;
  char *v176;
  void *__p[2];
  uint64_t v178;
  unsigned __int8 *v179;
  _QWORD v180[2];
  int v181;
  const char *v182;
  void *v183;
  char v184;
  int v185;
  int v186;
  int v187;
  int v188;
  std::string __dst;
  __int16 v190;
  std::string v191;
  __int16 v192;
  std::string v193;
  __int16 v194;
  _BYTE v195[24];
  const char **v196;
  uint64_t *v197;
  std::string v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  LOWORD(v197) = 260;
  *(_QWORD *)v195 = a2 + 27;
  llvm::Triple::Triple((uint64_t)&v183, (llvm::Twine *)v195);
  v4 = v188;
  v5 = v186 == 15 && v187 == 16;
  v6 = v5 && v185 == 41;
  v7 = ".msvcjmc";
  if (v188 == 3)
    v7 = ".just.my.code";
  v182 = v7;
  v181 = 16;
  v8 = (char *)operator new(0x100uLL, (std::align_val_t)8uLL);
  v9 = 0;
  v180[0] = v8;
  v180[1] = 0;
  do
  {
    *(_QWORD *)&v8[v9] = -4096;
    v9 += 16;
  }
  while (v9 != 256);
  v10 = a2[4];
  if (v10 != (uint64_t *)(a2 + 3))
  {
    v11 = 0;
    v174 = 0;
    v12 = &v196;
    if (v6)
      v13 = "_";
    else
      v13 = "__";
    v14 = "__JustMyCode_Default";
    __s = (std::string::value_type *)v13;
    if (v6)
      v14 = "_JustMyCode_Default";
    v172 = v14;
    v173 = *(unsigned __int8 *)v14;
    while (1)
    {
      if (v10)
        v15 = v10 - 7;
      else
        v15 = 0;
      if (v10 && *((_BYTE *)v15 + 16) == 3)
      {
        if ((*((_DWORD *)v15 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_45;
      }
      else if (!*((_BYTE *)v15 + 16) && (uint64_t *)v15[9] == v15 + 9 && (*((_BYTE *)v15 + 34) & 0x80) == 0)
      {
        goto LABEL_45;
      }
      v179 = 0;
      if ((*((_BYTE *)v15 + 23) & 0x20) != 0)
      {
        v16 = **(_QWORD **)*v15;
        *(_QWORD *)v195 = v15;
        v17 = *(_DWORD *)(v16 + 2496);
        if (!v17)
        {
          v30 = 0;
          goto LABEL_50;
        }
        v18 = *(_QWORD *)(v16 + 2480);
        v19 = v17 - 1;
        v20 = v19 & ((v15 >> 4) ^ (v15 >> 9));
        v21 = (_QWORD *)(v18 + 40 * v20);
        v22 = *v21;
        if ((uint64_t *)*v21 != v15)
        {
          v23 = 0;
          v24 = 1;
          while (v22 != -4096)
          {
            if (v23)
              v25 = 0;
            else
              v25 = v22 == -8192;
            if (v25)
              v23 = v21;
            v26 = v20 + v24++;
            v20 = v26 & v19;
            v21 = (_QWORD *)(v18 + 40 * v20);
            v22 = *v21;
            if ((uint64_t *)*v21 == v15)
              goto LABEL_39;
          }
          if (v23)
            v30 = v23;
          else
            v30 = v21;
LABEL_50:
          v21 = sub_1C541AB24(v16 + 2480, (uint64_t)v195, (uint64_t *)v195, v30);
          v31 = *(_QWORD *)v195;
          v21[4] = 0;
          v21[3] = 0;
          *v21 = v31;
          v21[1] = v21 + 3;
          v21[2] = 0x100000000;
        }
LABEL_39:
        v27 = *((unsigned int *)v21 + 4);
        if (!(_DWORD)v27)
          goto LABEL_45;
        v28 = (uint64_t *)(v21[1] + 8);
        v29 = 16 * v27;
        while (*((_DWORD *)v28 - 2))
        {
          v28 += 2;
          v29 -= 16;
          if (!v29)
            goto LABEL_45;
        }
        v179 = (unsigned __int8 *)*v28;
        if (!v179)
          goto LABEL_45;
        v170 = v6;
        v168 = v4;
        v32 = sub_1C6180A54((uint64_t)v180, (uint64_t *)&v179);
        v169 = v3;
        v167 = v12;
        if (v32[1])
        {
LABEL_52:
          v33 = v174;
          if (v174)
            goto LABEL_53;
          v165 = v32;
          v41 = *a2;
          v42 = **a2;
          v43 = (uint64_t **)(v42 + 1576);
          *(_QWORD *)v195 = llvm::PointerType::get((llvm::PointerType *)(v42 + 1912), 0);
          v44 = (llvm::PointerType *)llvm::FunctionType::get(v43, (uint64_t *)v195, 1, 0);
          v45 = 1;
          BYTE1(v197) = 1;
          if (v173)
          {
            *(_QWORD *)v195 = v172;
            v45 = 3;
          }
          LOBYTE(v197) = v45;
          v46 = (char *)operator new(0x80uLL);
          *((_DWORD *)v46 + 7) = *((_DWORD *)v46 + 7) & 0x38000000 | 0x40000000;
          *(_QWORD *)v46 = 0;
          v175 = (uint64_t ***)(v46 + 8);
          llvm::Function::Function((uint64_t *)v46 + 1, v44, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v195, (uint64_t)a2);
          *((_DWORD *)v46 + 10) = *((_DWORD *)v46 + 10) & 0xFFFFFF3F | 0x80;
          *((_QWORD *)v46 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v46 + 15, **((uint64_t ***)v46 + 1), 1, 36);
          if (v170)
            *((_QWORD *)v46 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v46 + 15, **v175, 1, 10);
          LOWORD(v197) = 257;
          v47 = operator new();
          *(_QWORD *)v47 = *v41 + 1600;
          *(_QWORD *)(v47 + 8) = 0;
          v48 = *(_DWORD *)(v47 + 20) & 0xC0000000;
          *(_DWORD *)(v47 + 16) = 22;
          *(_DWORD *)(v47 + 20) = v48;
          *(_QWORD *)(v47 + 24) = 0;
          *(_QWORD *)(v47 + 32) = 0;
          *(_QWORD *)(v47 + 40) = v47 + 40;
          *(_QWORD *)(v47 + 48) = v47 + 40;
          *(_QWORD *)(v47 + 56) = 0;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v46 + 80), (_QWORD *)v47);
          v49 = *((_QWORD *)v46 + 10);
          *(_QWORD *)(v47 + 32) = v46 + 80;
          *(_QWORD *)(v47 + 24) = v49;
          *(_QWORD *)(v49 + 8) = v47 + 24;
          *((_QWORD *)v46 + 10) = v47 + 24;
          llvm::Value::setName((uint64_t ***)v47, (uint64_t)v195);
          v50 = (llvm::Instruction *)operator new(0x40uLL);
          *((_DWORD *)v50 + 5) &= 0x38000000u;
          llvm::Instruction::Instruction(v50, (llvm::Type *)(*v41 + 1576), 1, v50, 0, (llvm::BasicBlock *)v47);
          if (v168 == 3)
          {
            *(_QWORD *)v195 = "__CheckForDebuggerJustMyCode";
            LOWORD(v197) = 259;
            v33 = v46 + 8;
            llvm::Value::setName(v175, (uint64_t)v195);
            v51 = *((_DWORD *)v46 + 10);
            *((_DWORD *)v46 + 10) = v51 & 0xFFFFFFF0 | 4;
            v3 = v169;
            if ((v51 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v175) & 1) == 0)
              *((_DWORD *)v46 + 10) |= 0x4000u;
            goto LABEL_53;
          }
          v3 = v169;
          v69 = (uint64_t **)(*v169 + 1576);
          *(_QWORD *)v195 = llvm::PointerType::get((llvm::PointerType *)(*v169 + 1912), 0);
          v70 = (llvm::PointerType *)llvm::FunctionType::get(v69, (uint64_t *)v195, 1, 0);
          llvm::Module::getOrInsertFunction((uint64_t)a2, "__CheckForDebuggerJustMyCode", 0x1CuLL, v70, 0);
          v33 = v71;
          *((_DWORD *)v71 + 8) = *((_DWORD *)v71 + 8) & 0xFFFFFF3F | 0x80;
          v72 = (uint64_t *)(v71 + 112);
          *((_QWORD *)v71 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v71 + 14, **(uint64_t ***)v71, 1, 36);
          if (v170)
          {
            *((_WORD *)v33 + 9) = *((_WORD *)v33 + 9) & 0xC00F | 0x410;
            *((_QWORD *)v33 + 14) = llvm::AttributeList::addAttributeAtIndex(v72, **(uint64_t ***)v33, 1, 10);
          }
          if ((v46[31] & 0x10) != 0)
          {
            v73 = ***v175;
            v74 = *(_QWORD *)(v73 + 152);
            v75 = *(unsigned int *)(v73 + 168);
            if (!(_DWORD)v75)
              goto LABEL_179;
            LODWORD(v76) = (v75 - 1) & ((v175 >> 4) ^ (v175 >> 9));
            v77 = (uint64_t ****)(v74 + 16 * v76);
            v78 = *v77;
            if (*v77 != v175)
            {
              v79 = 1;
              while (v78 != (uint64_t ***)-4096)
              {
                v80 = v76 + v79++;
                v76 = v80 & (v75 - 1);
                v78 = *(uint64_t ****)(v74 + 16 * v76);
                if (v78 == v175)
                {
                  v77 = (uint64_t ****)(v74 + 16 * v76);
                  goto LABEL_180;
                }
              }
LABEL_179:
              v77 = (uint64_t ****)(v74 + 16 * v75);
            }
LABEL_180:
            v137 = v77[1];
            v140 = (size_t)*v137;
            v139 = (unsigned __int8 *)(v137 + 2);
            v138 = v140;
          }
          else
          {
            v138 = 0;
            v139 = (unsigned __int8 *)&byte_1C871356D;
          }
          *(_QWORD *)v195 = v175;
          sub_1C5F50CB4(a2, "llvm.used", 9uLL, (llvm::UndefValue **)v195, 1);
          inserted = llvm::Module::getOrInsertComdat((uint64_t)a2, v139, v138);
          *((_DWORD *)inserted + 2) = 0;
          llvm::GlobalObject::setComdat((llvm::GlobalObject *)v175, (llvm::Comdat *)inserted);
          *((_BYTE *)&v191.__r_.__value_.__s + 23) = 15;
          strcpy((char *)&v191, "/alternatename:");
          v142 = std::string::append(&v191, "__CheckForDebuggerJustMyCode");
          v143 = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v193.__r_.__value_.__l.__data_ = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v193.__r_.__value_.__r.__words[2] = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          v144 = std::string::append(&v193, "=");
          v145 = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v198.__r_.__value_.__l.__data_ = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v198.__r_.__value_.__r.__words[2] = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          if (v138 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          if (v138 >= 0x17)
          {
            v147 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v138 | 7) != 0x17)
              v147 = v138 | 7;
            v176 = v33;
            v148 = v147 + 1;
            p_dst = operator new(v147 + 1);
            v149 = v148 | 0x8000000000000000;
            v33 = v176;
            __dst.__r_.__value_.__l.__size_ = v138;
            __dst.__r_.__value_.__r.__words[2] = v149;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v138;
            p_dst = &__dst;
            if (!v138)
              goto LABEL_189;
          }
          memmove(p_dst, v139, v138);
LABEL_189:
          *((_BYTE *)p_dst + v138) = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v150 = &__dst;
          else
            v150 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __dst.__r_.__value_.__l.__size_;
          v152 = std::string::append(&v198, (const std::string::value_type *)v150, size);
          v153 = v152->__r_.__value_.__r.__words[2];
          *(_OWORD *)v195 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
          *(_QWORD *)&v195[16] = v153;
          v152->__r_.__value_.__l.__size_ = 0;
          v152->__r_.__value_.__r.__words[2] = 0;
          v152->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v198.__r_.__value_.__l.__data_);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v191.__r_.__value_.__l.__data_);
          v193.__r_.__value_.__r.__words[0] = 0;
          if (v195[23] >= 0)
            v154 = v195;
          else
            v154 = *(unsigned __int8 **)v195;
          if (v195[23] >= 0)
            v155 = v195[23] & 0x7F;
          else
            v155 = *(_QWORD *)&v195[8];
          v193.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::MDString::get(v169, v154, v155);
          Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v169, &v193, 1, 0, 1);
          v157 = llvm::Module::getOrInsertNamedMetadata((uint64_t)a2, "llvm.linker.options", 0x13uLL);
          v198.__r_.__value_.__r.__words[0] = (std::string::size_type)Impl;
          v158 = *(_QWORD *)(v157 + 48);
          v159 = *(unsigned int *)(v158 + 8);
          if (v159 >= *(_DWORD *)(v158 + 12))
          {
            sub_1C5419FD8(*(_QWORD *)(v157 + 48), (unsigned __int8 **)&v198);
          }
          else
          {
            v160 = (unsigned __int8 **)(*(_QWORD *)v158 + 8 * v159);
            *v160 = Impl;
            if (Impl)
            {
              llvm::MetadataTracking::track((uint64_t)v160, Impl, 2);
              LODWORD(v159) = *(_DWORD *)(v158 + 8);
            }
            *(_DWORD *)(v158 + 8) = v159 + 1;
          }
          v32 = v165;
          if ((v195[23] & 0x80000000) != 0)
            operator delete(*(void **)v195);
LABEL_53:
          v174 = v33;
          v34 = (uint64_t **)(*v3 + 1576);
          *(_QWORD *)v195 = llvm::PointerType::get((llvm::PointerType *)(*v3 + 1912), 0);
          v35 = llvm::FunctionType::get(v34, (uint64_t *)v195, 1, 0);
          v198.__r_.__value_.__r.__words[0] = v32[1];
          LOWORD(v197) = 257;
          v36 = v15[10];
          if (v36)
            v37 = v36 - 24;
          else
            v37 = 0;
          v38 = (uint64_t *)(v37 + 40);
          for (i = *(uint64_t **)(v37 + 48); i != v38; i = (uint64_t *)i[1])
          {
            v40 = i - 3;
            if (!i)
              v40 = 0;
            if (*((_BYTE *)v40 + 16) != 83)
            {
              v52 = *((unsigned __int8 *)i - 8) - 38;
              v53 = v52 > 0x38;
              v54 = (1 << v52) & 0x100060000000001;
              if (v53 || v54 == 0)
                v38 = i;
              else
                v38 = (uint64_t *)i[1];
              break;
            }
          }
          v56 = (char *)operator new(0x90uLL);
          v57 = v56;
          v58 = (llvm::Value *)(v56 + 64);
          *((_DWORD *)v56 + 21) = *((_DWORD *)v56 + 21) & 0x38000000 | 2;
          *(_QWORD *)v56 = 0;
          *((_QWORD *)v56 + 1) = 0;
          *((_QWORD *)v56 + 4) = 0;
          v59 = v56 + 32;
          *((_QWORD *)v56 + 2) = 0;
          *((_QWORD *)v56 + 3) = v56 + 64;
          *((_QWORD *)v56 + 5) = 0;
          *((_QWORD *)v56 + 6) = 0;
          *((_QWORD *)v56 + 7) = v56 + 64;
          *((_QWORD *)v56 + 8) = **(_QWORD **)(v35 + 16);
          *((_QWORD *)v56 + 9) = 0;
          v56[80] = 84;
          v56[81] = 0;
          *((_WORD *)v56 + 41) = 0;
          v60 = 2;
          *((_DWORD *)v56 + 21) = 2;
          *(_OWORD *)(v56 + 88) = 0u;
          v61 = v56 + 88;
          *((_DWORD *)v56 + 30) = 0;
          *(_OWORD *)(v56 + 104) = 0u;
          if (v38)
          {
            v67 = v38[2];
            *((_QWORD *)v56 + 13) = v67;
            *(_WORD *)(v67 + 18) &= ~0x8000u;
            if ((v56[87] & 0x10) != 0)
            {
              v161 = *(_QWORD *)(v67 + 56);
              if (v161)
              {
                v162 = *(llvm::ValueSymbolTable **)(v161 + 104);
                if (v162)
                  llvm::ValueSymbolTable::reinsertValue(v162, v58);
              }
            }
            v68 = *v38;
            *((_QWORD *)v57 + 11) = *v38;
            *((_QWORD *)v57 + 12) = v38;
            *(_QWORD *)(v68 + 8) = v61;
            *v38 = (uint64_t)v61;
            v60 = *((_DWORD *)v57 + 21);
          }
          *((_QWORD *)v57 + 16) = 0;
          *((_QWORD *)v57 + 17) = v35;
          sub_1C5382FD4((uint64_t)&v193, (uint64_t *)&v198, (uint64_t *)&v198.__r_.__value_.__l.__size_, (uint64_t)v58 - 32 * (v60 & 0x7FFFFFF));
          if (*((_QWORD *)v57 + 4))
          {
            **((_QWORD **)v57 + 6) = *((_QWORD *)v57 + 5);
            v163 = *((_QWORD *)v57 + 5);
            if (v163)
              *(_QWORD *)(v163 + 16) = *((_QWORD *)v57 + 6);
          }
          *v59 = v174;
          v3 = v169;
          if (v174)
          {
            v62 = v174 + 8;
            v63 = *((_QWORD *)v174 + 1);
            *((_QWORD *)v57 + 5) = v63;
            if (v63)
              *(_QWORD *)(v63 + 16) = v57 + 40;
            *((_QWORD *)v57 + 6) = v62;
            *v62 = v59;
          }
          v11 = 1;
          llvm::CallBase::populateBundleOperandInfos((uint64_t)v58, 0, 0, 1u);
          llvm::Value::setName((uint64_t ***)v58, (uint64_t)v195);
          *((_QWORD *)v57 + 16) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v57 + 16, **(uint64_t ***)v58, 1, 36);
          if (v170)
          {
            *((_WORD *)v57 + 41) = *((_WORD *)v57 + 41) & 0xF003 | 0x104;
            *((_QWORD *)v57 + 16) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v57 + 16, **((uint64_t ***)v57 + 8), 1, 10);
          }
          v4 = v168;
          v6 = v170;
          v12 = v167;
          goto LABEL_45;
        }
        v64 = v179;
        v65 = (uint64_t)v179;
        if (*v179 == 15 || (v65 = *(_QWORD *)&v179[-8 * *((unsigned int *)v179 + 2)]) != 0)
        {
          v65 = *(_QWORD *)(v65 - 8 * *(unsigned int *)(v65 + 8) + 8);
          if (v65)
          {
            v81 = *(_QWORD **)(v65 + 8);
            v82 = *v81;
            v66 = (const char *)(v81 + 3);
            v65 = v82;
          }
          else
          {
            v66 = 0;
          }
        }
        else
        {
          v66 = "";
        }
        LOWORD(v197) = 261;
        *(_QWORD *)v195 = v66;
        *(_QWORD *)&v195[8] = v65;
        v83 = 3;
        if (!llvm::sys::path::has_root_name((const char **)v195, (const llvm::Twine *)3))
        {
          v84 = v32;
          v85 = *v64;
          v86 = v64;
          if (v85 != 15)
          {
            v87 = *((unsigned int *)v64 + 2);
            v86 = *(unsigned __int8 **)&v64[-8 * v87];
            if (!v86)
            {
              v88 = -v87;
              v32 = v84;
              goto LABEL_117;
            }
          }
          v89 = *(_QWORD *)&v86[-8 * *((unsigned int *)v86 + 2) + 8];
          if (v89
            && (v90 = *(size_t **)(v89 + 8), *v90)
            && ((v91 = v90 + 3, (v92 = (char *)memchr(v90 + 3, 92, *v90)) != 0)
              ? (v93 = v92 - (char *)v91 == -1)
              : (v93 = 1),
                !v93))
          {
            v83 = 3;
            v32 = v84;
          }
          else
          {
            v94 = v64;
            v5 = v85 == 15;
            v32 = v84;
            if (!v5)
            {
              v88 = -(uint64_t)*((unsigned int *)v64 + 2);
LABEL_117:
              v94 = *(unsigned __int8 **)&v64[8 * v88];
              if (!v94)
                goto LABEL_125;
            }
            if ((v95 = *(_QWORD *)&v94[-8 * *((unsigned int *)v94 + 2)]) != 0
              && (v96 = *(size_t **)(v95 + 8), *v96)
              && ((v97 = v96 + 3, (v98 = (char *)memchr(v96 + 3, 92, *v96)) != 0)
                ? (v99 = v98 - (char *)v97 == -1)
                : (v99 = 1),
                  !v99))
            {
              v83 = 3;
            }
            else
            {
LABEL_125:
              v83 = 1;
            }
          }
        }
        v166 = v32;
        v100 = *v64;
        v101 = v64;
        if (v100 == 15 || (v101 = *(unsigned __int8 **)&v64[-8 * *((unsigned int *)v64 + 2)]) != 0)
        {
          v102 = *(_QWORD *)&v101[-8 * *((unsigned int *)v101 + 2) + 8];
          if (v102)
          {
            v105 = *(unint64_t **)(v102 + 8);
            v108 = *v105;
            v107 = v105 + 3;
            v106 = v108;
            *(_QWORD *)v195 = v167;
            *(_OWORD *)&v195[8] = xmmword_1C64638F0;
            if (v108 >= 0x101)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v195, v167, v106, 1);
              v110 = *(const char ****)v195;
              v109 = *(_QWORD *)&v195[8];
            }
            else
            {
              v109 = 0;
              v103 = 0;
              v104 = 0;
              v110 = v167;
              if (!v106)
                goto LABEL_133;
            }
            memcpy((char *)v110 + v109, v107, v106);
            v104 = *(_QWORD *)&v195[8];
            v100 = *v64;
            v103 = v106;
            goto LABEL_133;
          }
        }
        v103 = 0;
        v104 = 0;
        *(_QWORD *)v195 = v167;
        *(_QWORD *)&v195[16] = 256;
LABEL_133:
        *(_QWORD *)&v195[8] = v104 + v103;
        if (v100 == 15 || (v64 = *(unsigned __int8 **)&v64[-8 * *((unsigned int *)v64 + 2)]) != 0)
        {
          v111 = *(_QWORD *)&v64[-8 * *((unsigned int *)v64 + 2)];
          if (v111)
          {
            v113 = *(_QWORD **)(v111 + 8);
            v114 = *v113;
            v112 = (const char *)(v113 + 3);
            v111 = v114;
          }
          else
          {
            v112 = 0;
          }
        }
        else
        {
          v111 = 0;
          v112 = "";
        }
        LOWORD(v200) = 261;
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
        v198.__r_.__value_.__l.__size_ = v111;
        v194 = 257;
        v192 = 257;
        v190 = 257;
        llvm::sys::path::append(v195, (const llvm::Twine *)v83, &v198, &v193, &v191, (void ***)&__dst);
        llvm::sys::path::native((char **)v195, v83);
        llvm::sys::path::remove_dots((unsigned __int8 **)v195, 1, v83);
        memset(&v193, 0, sizeof(v193));
        v199 = 0;
        v198.__r_.__value_.__r.__words[0] = *(_QWORD *)v195;
        *(_OWORD *)&v198.__r_.__value_.__r.__words[1] = *(unint64_t *)&v195[8];
        v200 = *(_QWORD *)&v195[8];
        v201 = v83;
        llvm::sys::path::reverse_iterator::operator++((uint64_t)&v198);
        v115 = v199;
        if (v199)
        {
          v116 = (unsigned __int8 *)v198.__r_.__value_.__r.__words[2];
          do
          {
            v118 = *v116++;
            v117 = v118;
            if (v118 == 46)
              v117 = 64;
            std::string::push_back(&v193, v117);
            --v115;
          }
          while (v115);
        }
        v119 = sub_1C5E7BE8C(*(unsigned __int8 **)v195, *(unint64_t *)&v195[8], v83);
        v3 = v169;
        if (v119 == -1)
          v119 = *(_QWORD *)&v195[8];
        else
          *(_QWORD *)&v195[8] = v119;
        v32 = v166;
        if (v119)
        {
          v120 = *(unsigned __int8 **)v195;
          LODWORD(v121) = 5381;
          do
          {
            v122 = *v120++;
            v121 = (33 * v121 + v122);
            --v119;
          }
          while (v119);
          if (!(_DWORD)v121)
          {
            v121 = 0;
            v198.__r_.__value_.__s.__data_[16] = 48;
            v123 = &v198.__r_.__value_.__s.__data_[16];
            goto LABEL_153;
          }
        }
        else
        {
          v121 = 5381;
        }
        v123 = &v198.__r_.__value_.__s.__data_[17];
LABEL_153:
        v124 = 17;
        v125 = v123;
        do
        {
          *--v125 = a0123456789abcd_6[v121 & 0xF];
          v121 >>= 4;
          ++v124;
        }
        while ((_DWORD)v124 != 25);
        sub_1C4E61270(&__dst, v125, &v198.__r_.__value_.__s.__data_[17], (char *)&v198 - v123 + v124);
        v126 = std::string::insert(&__dst, 0, __s);
        v127 = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v191.__r_.__value_.__l.__data_ = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v191.__r_.__value_.__r.__words[2] = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        v128 = std::string::append(&v191, "_");
        v129 = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v198.__r_.__value_.__l.__data_ = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        v198.__r_.__value_.__r.__words[2] = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = &v193;
        else
          v130 = (std::string *)v193.__r_.__value_.__r.__words[0];
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v131 = *((_BYTE *)&v193.__r_.__value_.__s + 23) & 0x7F;
        else
          v131 = v193.__r_.__value_.__l.__size_;
        v132 = std::string::append(&v198, (const std::string::value_type *)v130, v131);
        v133 = v132->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
        v178 = v133;
        v132->__r_.__value_.__l.__size_ = 0;
        v132->__r_.__value_.__r.__words[2] = 0;
        v132->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v198.__r_.__value_.__l.__data_);
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v191.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v193.__r_.__value_.__l.__data_);
        if (*(const char ****)v195 != v167)
          free(*(void **)v195);
        v134 = (llvm::PointerType *)(*v169 + 1912);
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
        if (v178 >= 0)
          v135 = (unsigned __int8 *)__p;
        else
          v135 = (unsigned __int8 *)__p[0];
        if (v178 >= 0)
          v136 = HIBYTE(v178) & 0x7F;
        else
          v136 = (unint64_t)__p[1];
        *(_QWORD *)v195 = a2;
        *(_QWORD *)&v195[8] = &v198;
        *(_QWORD *)&v195[16] = __p;
        v196 = &v182;
        v197 = (uint64_t *)&v179;
        v166[1] = llvm::Module::getOrInsertGlobal((uint64_t)a2, v135, v136, v134, (uint64_t (*)(uint64_t))sub_1C50EFE58, (uint64_t)v195);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        goto LABEL_52;
      }
LABEL_45:
      v10 = (uint64_t *)v10[1];
      if (v10 == (uint64_t *)(a2 + 3))
      {
        v8 = (char *)v180[0];
        goto LABEL_225;
      }
    }
  }
  v11 = 0;
LABEL_225:
  MEMORY[0x1CAA32FB4](v8, 8);
  if (v184 < 0)
    operator delete(v183);
  return v11 & 1;
}

char *sub_1C50EFE58(uint64_t a1)
{
  const llvm::APInt *v2;
  _DWORD *v3;
  llvm::Value *v4;
  uint64_t v5;
  llvm::PointerType *v6;
  llvm::ConstantInt *v7;
  unsigned int v8;
  char v9;
  llvm::ValueHandleBase *v10;
  uint64_t v11;
  size_t v12;
  const char **v13;
  llvm::Value *v14;
  unsigned int v15;
  unsigned int v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  llvm::Value **v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::MDNode *BasicType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value **v33;
  llvm::Value *v34;
  int v35;
  int v36;
  llvm::Value **v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  llvm::Value *v41;
  unsigned __int8 *v42;
  size_t v43;
  size_t v44;
  llvm::MDNode *GlobalVariableExpression;
  llvm::Value **v47;
  uint64_t v48;
  llvm::ConstantInt *v49;
  llvm::ValueHandleBase *v50;
  uint64_t v51;
  unsigned int v52;
  __int16 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = operator new(0x78uLL);
  v4 = (llvm::Value *)(v3 + 8);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 8;
  v5 = *(_QWORD *)a1;
  v6 = **(llvm::PointerType ***)(a1 + 8);
  v7 = *(llvm::ConstantInt **)v6;
  v8 = *((_DWORD *)v6 + 2);
  v52 = v8 >> 8;
  if (v8 >> 8 > 0x40)
  {
    v49 = v7;
    llvm::APInt::initSlowCase((llvm::APInt *)&v51, 1, 0);
    v7 = v49;
  }
  else
  {
    if (v8 <= 0xFF)
      v9 = 0;
    else
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v8);
    v51 = v9 & 1;
  }
  v10 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v51, v2);
  if (v52 >= 0x41 && v51)
  {
    v50 = v10;
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    v10 = v50;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v53 = 260;
  v51 = v11;
  llvm::GlobalVariable::GlobalVariable((uint64_t)v4, v5, v6, 0, 7, (uint64_t)v10, (uint64_t)&v51, 0, 0, 0, 0);
  v12 = 0;
  v13 = *(const char ***)(a1 + 24);
  v14 = (llvm::Value *)*v13;
  if (*v13)
    v12 = strlen(*v13);
  v15 = v3[16];
  v16 = v4 >> 4;
  if ((v15 & 0x400000) != 0 || v12)
  {
    if (v12)
    {
      v14 = (llvm::Value *)llvm::UniqueStringSaver::save(***(_QWORD ***)v4 + 2136, v14, v12);
      v18 = v17;
    }
    else
    {
      v18 = 0;
    }
    v19 = ***(_QWORD ***)v4;
    v51 = (uint64_t)(v3 + 8);
    v20 = *(_DWORD *)(v19 + 2520);
    if (v20)
    {
      v21 = *(_QWORD *)(v19 + 2504);
      v22 = v20 - 1;
      v23 = v22 & (v16 ^ (v4 >> 9));
      v24 = (llvm::Value **)(v21 + 24 * v23);
      v25 = *v24;
      if (*v24 == v4)
      {
LABEL_15:
        v24[1] = v14;
        v24[2] = v18;
        v15 = v3[16] & 0xFFBFFFFF | ((v18 != 0) << 22);
        goto LABEL_16;
      }
      v37 = 0;
      v38 = 1;
      while (v25 != (llvm::Value *)-4096)
      {
        if (v37)
          v39 = 0;
        else
          v39 = v25 == (llvm::Value *)-8192;
        if (v39)
          v37 = v24;
        v40 = v23 + v38++;
        v23 = v40 & v22;
        v24 = (llvm::Value **)(v21 + 24 * v23);
        v25 = *v24;
        if (*v24 == v4)
          goto LABEL_15;
      }
      if (v37)
        v47 = v37;
      else
        v47 = v24;
    }
    else
    {
      v47 = 0;
    }
    v24 = (llvm::Value **)sub_1C53D65B8(v19 + 2504, (uint64_t)&v51, &v51, v47);
    v48 = v51;
    v24[1] = 0;
    v24[2] = 0;
    *v24 = (llvm::Value *)v48;
    goto LABEL_15;
  }
LABEL_16:
  v3[16] = v15 & 0xFFC0FF3F | 0x10080;
  v26 = **(_QWORD **)(a1 + 32);
  v27 = *(_QWORD *)(v26 - 8 * *(unsigned int *)(v26 + 8) + 40);
  llvm::DIBuilder::DIBuilder((uint64_t)&v51, *((_QWORD **)v3 + 9), 0, v27);
  BasicType = llvm::DIBuilder::createBasicType((uint64_t)&v51, "unsigned char", (_QWORD *)0xD, 8, 8, 64);
  if ((*((_BYTE *)v3 + 55) & 0x10) != 0)
  {
    v29 = ***(_QWORD ***)v4;
    v30 = *(_QWORD *)(v29 + 152);
    v31 = *(unsigned int *)(v29 + 168);
    if ((_DWORD)v31)
    {
      LODWORD(v32) = (v31 - 1) & (v16 ^ (v4 >> 9));
      v33 = (llvm::Value **)(v30 + 16 * v32);
      v34 = *v33;
      if (*v33 == v4)
      {
LABEL_33:
        v41 = v33[1];
        v44 = *(_QWORD *)v41;
        v42 = (unsigned __int8 *)v41 + 16;
        v43 = v44;
        goto LABEL_34;
      }
      v35 = 1;
      while (v34 != (llvm::Value *)-4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v31 - 1);
        v34 = *(llvm::Value **)(v30 + 16 * v32);
        if (v34 == v4)
        {
          v33 = (llvm::Value **)(v30 + 16 * v32);
          goto LABEL_33;
        }
      }
    }
    v33 = (llvm::Value **)(v30 + 16 * v31);
    goto LABEL_33;
  }
  v43 = 0;
  v42 = (unsigned __int8 *)&byte_1C871356D;
LABEL_34:
  if (*(_BYTE *)v26 != 15)
    v26 = *(_QWORD *)(v26 - 8 * *(unsigned int *)(v26 + 8));
  GlobalVariableExpression = llvm::DIBuilder::createGlobalVariableExpression((uint64_t)&v51, v27, v42, v43, 0, 0, v26, 0, (uint64_t)BasicType, 1, 1, 0, 0, 0, 0, 0);
  llvm::Value::addMetadata(v4, 0, GlobalVariableExpression);
  llvm::DIBuilder::finalize((llvm::DIBuilder *)&v51);
  sub_1C50F023C((uint64_t)&v51);
  return (char *)(v3 + 8);
}

uint64_t sub_1C50F023C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;

  sub_1C50F03D4((uint64_t *)(a1 + 424));
  sub_1C50F03D4((uint64_t *)(a1 + 400));
  v2 = *(char **)(a1 + 344);
  v3 = *(unsigned int *)(a1 + 352);
  if ((_DWORD)v3)
  {
    v12 = 8 * v3;
    v13 = v2 - 8;
    v21 = v2 - 8;
    do
    {
      v24 = v12;
      v14 = *(unsigned __int8 **)&v13[v12];
      if (v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[v12], v14);
      v13 = v21;
      v12 = v24 - 8;
    }
    while (v24 != 8);
    v2 = *(char **)(a1 + 344);
  }
  if (v2 != (char *)(a1 + 360))
    free(v2);
  v27 = (void **)(a1 + 320);
  sub_1C50F043C(&v27);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 296), 8);
  v4 = *(char **)(a1 + 248);
  v5 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v5)
  {
    v15 = 8 * v5;
    v16 = v4 - 8;
    v22 = v4 - 8;
    do
    {
      v25 = v15;
      v17 = *(unsigned __int8 **)&v16[v15];
      if (v17)
        llvm::MetadataTracking::untrack((uint64_t)&v16[v15], v17);
      v16 = v22;
      v15 = v25 - 8;
    }
    while (v25 != 8);
    v4 = *(char **)(a1 + 248);
  }
  if (v4 != (char *)(a1 + 264))
    free(v4);
  v6 = *(void **)(a1 + 200);
  if (v6 != (void *)(a1 + 216))
    free(v6);
  v7 = *(void **)(a1 + 152);
  if (v7 != (void *)(a1 + 168))
    free(v7);
  v8 = *(char **)(a1 + 104);
  v9 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v9)
  {
    v18 = 8 * v9;
    v19 = v8 - 8;
    v23 = v8 - 8;
    do
    {
      v26 = v18;
      v20 = *(unsigned __int8 **)&v19[v18];
      if (v20)
        llvm::MetadataTracking::untrack((uint64_t)&v19[v18], v20);
      v19 = v23;
      v18 = v26 - 8;
    }
    while (v26 != 8);
    v8 = *(char **)(a1 + 104);
  }
  if (v8 != (char *)(a1 + 120))
    free(v8);
  v10 = *(void **)(a1 + 56);
  if (v10 != (void *)(a1 + 72))
    free(v10);
  return a1;
}

uint64_t *sub_1C50F03D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (char **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C61E02C8(v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C50F043C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        sub_1C6176BF8((_QWORD *)v4 - 6);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t llvm::LatencyPriorityQueue::getSingleUnscheduledPred(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t result;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD **)(a2 + 32);
    v5 = 16 * v2;
    while (1)
    {
      result = *v4 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_WORD *)(result + 228) & 0x400) != 0)
      {
        result = v3;
      }
      else if (v3 && v3 != result)
      {
        return 0;
      }
      v4 += 2;
      v3 = result;
      v5 -= 16;
      if (!v5)
        return result;
    }
  }
  return 0;
}

void llvm::LatencyPriorityQueue::push(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD **)(a2 + 112);
    v7 = &v6[2 * v4];
    do
    {
      v8 = *v6 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(_QWORD **)(v8 + 32);
        v12 = 16 * v9;
        while (1)
        {
          v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_WORD *)(v13 + 228) & 0x400) != 0)
          {
            v13 = v10;
          }
          else if (v10 && v10 != v13)
          {
            break;
          }
          v11 += 2;
          v10 = v13;
          v12 -= 16;
          if (!v12)
            goto LABEL_13;
        }
      }
      v13 = 0;
LABEL_13:
      if (v13 == a2)
        ++v5;
      v6 += 2;
    }
    while (v6 != v7);
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1[3] + 4 * *(unsigned int *)(a2 + 192)) = v5;
  v15 = (_QWORD *)a1[7];
  v14 = a1[8];
  if ((unint64_t)v15 >= v14)
  {
    v17 = (_QWORD *)a1[6];
    v18 = v15 - v17;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      abort();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_1C4764EE4();
      v22 = (char *)operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[8 * v18];
    *(_QWORD *)v23 = a2;
    v16 = v23 + 8;
    if (v15 != v17)
    {
      do
      {
        v24 = *--v15;
        *((_QWORD *)v23 - 1) = v24;
        v23 -= 8;
      }
      while (v15 != v17);
      v15 = (_QWORD *)a1[6];
    }
    a1[6] = v23;
    a1[7] = v16;
    a1[8] = &v22[8 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = a2;
    v16 = v15 + 1;
  }
  a1[7] = v16;
}

uint64_t llvm::LatencyPriorityQueue::AdjustPriorityOfUnscheduledPreds(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;

  if ((*(_WORD *)(a2 + 228) & 0x200) == 0)
  {
    v2 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v2)
    {
      v3 = result;
      v4 = 0;
      v5 = *(_QWORD **)(a2 + 32);
      v6 = 16 * v2;
      do
      {
        v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_WORD *)(v7 + 228) & 0x400) == 0)
        {
          if (v4)
          {
            v8 = v4 == v7;
            v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
            if (!v8)
              return result;
          }
          else
          {
            v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v5 += 2;
        v6 -= 16;
      }
      while (v6);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 228) & 0x200) != 0)
        {
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 104))(result, v4);
          return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 88))(v3, v4);
        }
      }
    }
  }
  return result;
}

void sub_1C50F0728(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;

  v7 = *(_DWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v6 - (uint64_t)v7) >> 2)
  {
    if (a2)
    {
      v14 = 4 * a2;
      v15 = &v7[a2];
      do
      {
        *v7++ = *a3;
        v14 -= 4;
      }
      while (v14);
      v7 = v15;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(_DWORD **)a1;
    v9 = (uint64_t)v7 - *(_QWORD *)a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_1C4764EE4();
      v13 = (char *)operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v16 = &v13[4 * (v9 >> 2)];
    v17 = &v16[4 * a2];
    v18 = 4 * a2;
    v19 = v16;
    do
    {
      *(_DWORD *)v19 = *a3;
      v19 += 4;
      v18 -= 4;
    }
    while (v18);
    while (v7 != v8)
    {
      v20 = *--v7;
      *((_DWORD *)v16 - 1) = v20;
      v16 -= 4;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = &v13[4 * v12];
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1C50F0858(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Lazy Machine Block Frequency Analysis";
  *(_QWORD *)(v3 + 8) = 37;
  *(_QWORD *)(v3 + 16) = "lazy-machine-block-freq";
  *(_QWORD *)(v3 + 24) = 23;
  *(_QWORD *)(v3 + 32) = &llvm::LazyMachineBlockFrequencyInfoPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::LazyMachineBlockFrequencyInfoPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

_QWORD *llvm::LazyMachineBlockFrequencyInfoPass::releaseMemory(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = this[31];
  this[31] = 0;
  if (v1)
  {
    v4 = this;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    this = v4;
  }
  v2 = this[32];
  this[32] = 0;
  if (v2)
  {
    v5 = this;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    this = v5;
  }
  v3 = this[33];
  this[33] = 0;
  if (v3)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return this;
}

uint64_t sub_1C50F0988(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)(a1 + 1320))
  {
    v3 = (uint64_t *)(a1 + 1320);
    v4 = operator new();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_QWORD *)(v4 + 56) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)v4 = v4 + 16;
    *(_QWORD *)(v4 + 8) = 0x100000000;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 64) = 0;
    v5 = *v3;
    *v3 = v4;
    if (v5)
      sub_1C4DC4DE4(a1 + 1320, v5);
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1);
  return *(_QWORD *)(a1 + 1320);
}

uint64_t llvm::LazyMachineBlockFrequencyInfoPass::runOnMachineFunction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 272) = a2;
  return 0;
}

void sub_1C50F0A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t *Node;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  void *__p;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  sub_1C4EF5C94((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      sub_1C61E0C00(*(_QWORD *)(a2 + 8), v5);
      v4 = *(_QWORD *)(a1 + 56);
      v6 = a2;
    }
    else
    {
      v6 = 0;
    }
    v7 = operator new(8uLL);
    __p = v7;
    *v7 = 0;
    v21 = v7 + 1;
    v22 = v7 + 1;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v6;
    v27 = v29;
    v8 = *(_QWORD *)(v4 + 328);
    v29[0] = v8;
    v28 = 0x100000001;
    if (&v27 == (void **)a1)
    {
LABEL_11:
      sub_1C50F1834((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(_QWORD *, _QWORD *))sub_1C50F0D30, 0, 0);
      sub_1C50F0D38((uint64_t)&__p, a1, 0);
      *(_BYTE *)a2 = 1;
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 8))
    {
      **(_QWORD **)a1 = v8;
    }
    else
    {
      if (*(_DWORD *)(a1 + 12))
      {
        v9 = 8;
        v10 = v29;
LABEL_8:
        memcpy(*(void **)a1, v10, v9);
        goto LABEL_9;
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      if ((_DWORD)v28)
      {
        v10 = v27;
        v9 = 8 * v28;
        goto LABEL_8;
      }
    }
LABEL_9:
    *(_DWORD *)(a1 + 8) = 1;
    LODWORD(v28) = 0;
    if (v27 != v29)
      free(v27);
    goto LABEL_11;
  }
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = 0;
  v21 = v11 + 1;
  v22 = v11 + 1;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v29;
  v29[0] = *(_QWORD *)(v4 + 328);
  v28 = 0x100000001;
  if (&v27 != (void **)a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v12 = 1;
      v13 = v29;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      v12 = v28;
      v13 = v27;
      if (!(_DWORD)v28)
      {
LABEL_16:
        *(_DWORD *)(a1 + 8) = 1;
        LODWORD(v28) = 0;
        if (v13 != v29)
          free(v13);
        goto LABEL_18;
      }
    }
    memcpy(*(void **)a1, v13, 8 * v12);
    v13 = v27;
    goto LABEL_16;
  }
LABEL_18:
  sub_1C50F1834((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(_QWORD *, _QWORD *))sub_1C50F0D30, 0, 0);
  sub_1C50F0D38((uint64_t)&__p, a1, 0);
LABEL_19:
  if (*(_DWORD *)(a1 + 8))
  {
    Node = (uint64_t *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createNode(a1, **(_QWORD **)a1);
    *(_QWORD *)(a1 + 48) = Node;
    sub_1C50F1518((uint64_t)&__p, a1, Node);
  }
  v15 = v23;
  if (v25)
  {
    v16 = 72 * v25;
    v17 = (_QWORD *)(v23 + 56);
    do
    {
      v18 = *(v17 - 7);
      if (v18 != -4096 && v18 != -8192)
      {
        v19 = (_QWORD *)*(v17 - 2);
        if (v17 != v19)
          free(v19);
      }
      v17 += 9;
      v16 -= 72;
    }
    while (v16);
    v15 = v23;
  }
  MEMORY[0x1CAA32FB4](v15, 8);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

uint64_t sub_1C50F0D30()
{
  return 1;
}

void sub_1C50F0D38(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  _QWORD *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  int v79;
  BOOL v80;
  unsigned int v81;
  _QWORD *v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  _QWORD *v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  _QWORD *v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  BOOL v114;
  unsigned int v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121[2];
  _QWORD v122[34];

  v122[32] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v118 = v7 >> 3;
  if ((v7 >> 3) >= 2)
  {
    v8 = 1;
    while (1)
    {
      v121[0] = 0;
      v9 = *(void **)(v6 + 8 * v8);
      v121[0] = v9;
      v10 = *(_DWORD *)(a1 + 40);
      if (!v10)
        break;
      v11 = *(_QWORD *)(a1 + 24);
      v12 = v10 - 1;
      v13 = ((v9 >> 4) ^ (v9 >> 9)) & v12;
      v14 = (_QWORD *)(v11 + 72 * v13);
      v15 = (void *)*v14;
      if (v9 != (void *)*v14)
      {
        v16 = 0;
        v17 = 1;
        while (v15 != (void *)-4096)
        {
          if (v16)
            v18 = 0;
          else
            v18 = v15 == (void *)-8192;
          if (v18)
            v16 = v14;
          v19 = v13 + v17++;
          v13 = v19 & v12;
          v14 = (_QWORD *)(v11 + 72 * v13);
          v15 = (void *)*v14;
          if (v9 == (void *)*v14)
            goto LABEL_18;
        }
        if (v16)
          v20 = v16;
        else
          v20 = v14;
        goto LABEL_17;
      }
LABEL_18:
      v14[4] = *(_QWORD *)(v6 + 8 * *((unsigned int *)v14 + 3));
      if (++v8 == (v7 >> 3))
        goto LABEL_21;
    }
    v20 = 0;
LABEL_17:
    v14 = sub_1C50F1F2C(a1 + 24, (uint64_t)v121, (uint64_t *)v121, v20);
    *v14 = v121[0];
    *(_OWORD *)(v14 + 5) = 0u;
    *(_OWORD *)(v14 + 3) = 0u;
    *(_OWORD *)(v14 + 1) = 0u;
    *(_OWORD *)(v14 + 7) = 0u;
    v14[5] = v14 + 7;
    *((_DWORD *)v14 + 13) = 2;
    v6 = *(_QWORD *)a1;
    goto LABEL_18;
  }
LABEL_21:
  v117 = v7;
  v121[0] = v122;
  v121[1] = (void *)0x2000000000;
  v21 = (v118 - 1);
  if (v21 < 2)
    goto LABEL_150;
  v22 = v118;
  do
  {
    v120 = 0;
    v23 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    v120 = v23;
    v24 = *(_DWORD *)(a1 + 40);
    if (v24)
    {
      v25 = *(_QWORD *)(a1 + 24);
      v26 = v24 - 1;
      v27 = ((v23 >> 4) ^ (v23 >> 9)) & v26;
      v28 = (_QWORD *)(v25 + 72 * v27);
      v29 = *v28;
      if (v23 == *v28)
        goto LABEL_38;
      v30 = 0;
      v31 = 1;
      while (v29 != -4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == -8192;
        if (v32)
          v30 = v28;
        v33 = v27 + v31++;
        v27 = v33 & v26;
        v28 = (_QWORD *)(v25 + 72 * v27);
        v29 = *v28;
        if (v23 == *v28)
          goto LABEL_38;
      }
      if (v30)
        v34 = v30;
      else
        v34 = v28;
    }
    else
    {
      v34 = 0;
    }
    v28 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v120, &v120, v34);
    *v28 = v120;
    *(_OWORD *)(v28 + 5) = 0u;
    *(_OWORD *)(v28 + 1) = 0u;
    *(_OWORD *)(v28 + 3) = 0u;
    *(_OWORD *)(v28 + 7) = 0u;
    v28[5] = v28 + 7;
    *((_DWORD *)v28 + 13) = 2;
LABEL_38:
    *((_DWORD *)v28 + 4) = *((_DWORD *)v28 + 3);
    v35 = *((unsigned int *)v28 + 12);
    if ((_DWORD)v35)
    {
      v36 = (uint64_t *)v28[5];
      v37 = &v36[v35];
      do
      {
        v38 = *(_DWORD *)(a1 + 40);
        if (v38)
        {
          v39 = *v36;
          v40 = *(_QWORD *)(a1 + 24);
          v41 = (*v36 >> 4) ^ (*v36 >> 9);
          v42 = v38 - 1;
          v43 = v41 & v42;
          v44 = *(_QWORD *)(v40 + 72 * (v41 & v42));
          if (*v36 != v44)
          {
            v45 = 1;
            while (v44 != -4096)
            {
              v46 = v43 + v45++;
              v43 = v46 & v42;
              v44 = *(_QWORD *)(v40 + 72 * v43);
              if (v39 == v44)
                goto LABEL_45;
            }
            goto LABEL_71;
          }
LABEL_45:
          v47 = *(unsigned int *)(a2 + 40);
          if (!(_DWORD)v47)
            goto LABEL_54;
          v48 = *(_QWORD *)(a2 + 24);
          LODWORD(v49) = (v47 - 1) & v41;
          v50 = (uint64_t *)(v48 + 16 * v49);
          v51 = *v50;
          if (v39 != *v50)
          {
            v52 = 1;
            while (v51 != -4096)
            {
              v53 = v49 + v52++;
              v49 = v53 & (v47 - 1);
              v51 = *(_QWORD *)(v48 + 16 * v49);
              if (v39 == v51)
              {
                v50 = (uint64_t *)(v48 + 16 * v49);
                goto LABEL_51;
              }
            }
LABEL_54:
            v55 = sub_1C50F34FC(a1, v39, v22, (uint64_t)v121);
            v119 = v55;
            v56 = *(_DWORD *)(a1 + 40);
            if (v56)
            {
              v57 = *(_QWORD *)(a1 + 24);
              v58 = v56 - 1;
              v59 = ((v55 >> 4) ^ (v55 >> 9)) & (v56 - 1);
              v60 = (_QWORD *)(v57 + 72 * v59);
              v61 = *v60;
              if (v55 != *v60)
              {
                v62 = 0;
                v63 = 1;
                while (v61 != -4096)
                {
                  if (v62)
                    v64 = 0;
                  else
                    v64 = v61 == -8192;
                  if (v64)
                    v62 = v60;
                  v65 = v59 + v63++;
                  v59 = v65 & v58;
                  v60 = (_QWORD *)(v57 + 72 * (v65 & v58));
                  v61 = *v60;
                  if (v55 == *v60)
                    goto LABEL_69;
                }
                if (v62)
                  v66 = v62;
                else
                  v66 = v60;
LABEL_68:
                v60 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v119, &v119, v66);
                *v60 = v119;
                *(_OWORD *)(v60 + 5) = 0u;
                *(_OWORD *)(v60 + 1) = 0u;
                *(_OWORD *)(v60 + 3) = 0u;
                *(_OWORD *)(v60 + 7) = 0u;
                v60[5] = v60 + 7;
                *((_DWORD *)v60 + 13) = 2;
              }
LABEL_69:
              v67 = *((_DWORD *)v60 + 4);
              if (v67 < *((_DWORD *)v28 + 4))
                *((_DWORD *)v28 + 4) = v67;
              goto LABEL_71;
            }
            v66 = 0;
            goto LABEL_68;
          }
LABEL_51:
          if (v50 == (uint64_t *)(v48 + 16 * v47))
            goto LABEL_54;
          v54 = v50[1];
          if (!v54 || *(_DWORD *)(v54 + 16) >= a3)
            goto LABEL_54;
        }
LABEL_71:
        ++v36;
      }
      while (v36 != v37);
    }
    v22 = v21--;
  }
  while ((v21 & 0xFFFFFFFE) != 0);
  if (v118 < 3)
    goto LABEL_150;
  v68 = 2;
  while (2)
  {
    v120 = 0;
    v69 = *(_QWORD *)a1;
    v70 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v68);
    v120 = v70;
    v71 = *(_DWORD *)(a1 + 40);
    if (v71)
    {
      v72 = *(_QWORD *)(a1 + 24);
      v73 = v71 - 1;
      v74 = ((v70 >> 4) ^ (v70 >> 9)) & (v71 - 1);
      v75 = (_QWORD *)(v72 + 72 * v74);
      v76 = *v75;
      if (v70 == *v75)
      {
        v77 = (uint64_t *)(v69 + 8 * *((unsigned int *)v75 + 4));
        goto LABEL_97;
      }
      v78 = 0;
      v79 = 1;
      while (v76 != -4096)
      {
        if (v78)
          v80 = 0;
        else
          v80 = v76 == -8192;
        if (v80)
          v78 = v75;
        v81 = v74 + v79++;
        v74 = v81 & v73;
        v75 = (_QWORD *)(v72 + 72 * v74);
        v76 = *v75;
        if (v70 == *v75)
          goto LABEL_95;
      }
      if (v78)
        v82 = v78;
      else
        v82 = v75;
    }
    else
    {
      v82 = 0;
    }
    v75 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v120, &v120, v82);
    *v75 = v120;
    *(_OWORD *)(v75 + 5) = 0u;
    *(_OWORD *)(v75 + 3) = 0u;
    *(_OWORD *)(v75 + 7) = 0u;
    *(_OWORD *)(v75 + 1) = 0u;
    v75[5] = v75 + 7;
    *((_DWORD *)v75 + 13) = 2;
    v69 = *(_QWORD *)a1;
    v72 = *(_QWORD *)(a1 + 24);
    v71 = *(_DWORD *)(a1 + 40);
LABEL_95:
    v77 = (uint64_t *)(v69 + 8 * *((unsigned int *)v75 + 4));
    if (!v71)
    {
      v90 = 0;
      goto LABEL_110;
    }
    v73 = v71 - 1;
LABEL_97:
    v83 = ((*v77 >> 4) ^ (*v77 >> 9)) & v73;
    v84 = (_QWORD *)(v72 + 72 * v83);
    v85 = *v84;
    if (*v77 != *v84)
    {
      v86 = 0;
      v87 = 1;
      while (v85 != -4096)
      {
        if (v86)
          v88 = 0;
        else
          v88 = v85 == -8192;
        if (v88)
          v86 = v84;
        v89 = v83 + v87++;
        v83 = v89 & v73;
        v84 = (_QWORD *)(v72 + 72 * v83);
        v85 = *v84;
        if (*v77 == *v84)
          goto LABEL_111;
      }
      if (v86)
        v90 = v86;
      else
        v90 = v84;
LABEL_110:
      v84 = sub_1C50F1F2C(a1 + 24, (uint64_t)v77, v77, v90);
      *v84 = *v77;
      *(_OWORD *)(v84 + 5) = 0u;
      *(_OWORD *)(v84 + 3) = 0u;
      *(_OWORD *)(v84 + 1) = 0u;
      *(_OWORD *)(v84 + 7) = 0u;
      v84[5] = v84 + 7;
      *((_DWORD *)v84 + 13) = 2;
    }
LABEL_111:
    v91 = *((_DWORD *)v84 + 2);
    v92 = v75 + 4;
    v93 = v92;
    while (2)
    {
      v94 = *v93;
      v119 = v94;
      v95 = *(_DWORD *)(a1 + 40);
      if (!v95)
      {
        v105 = 0;
        goto LABEL_126;
      }
      v96 = *(_QWORD *)(a1 + 24);
      v97 = v95 - 1;
      v98 = ((v94 >> 4) ^ (v94 >> 9)) & v97;
      v99 = (_QWORD *)(v96 + 72 * v98);
      v100 = *v99;
      if (v94 != *v99)
      {
        v101 = 0;
        v102 = 1;
        while (v100 != -4096)
        {
          if (v101)
            v103 = 0;
          else
            v103 = v100 == -8192;
          if (v103)
            v101 = v99;
          v104 = v98 + v102++;
          v98 = v104 & v97;
          v99 = (_QWORD *)(v96 + 72 * v98);
          v100 = *v99;
          if (v94 == *v99)
            goto LABEL_127;
        }
        if (v101)
          v105 = v101;
        else
          v105 = v99;
LABEL_126:
        v99 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v119, &v119, v105);
        *v99 = v119;
        *(_OWORD *)(v99 + 5) = 0u;
        *(_OWORD *)(v99 + 1) = 0u;
        *(_OWORD *)(v99 + 3) = 0u;
        *(_OWORD *)(v99 + 7) = 0u;
        v99[5] = v99 + 7;
        *((_DWORD *)v99 + 13) = 2;
      }
LABEL_127:
      if (*((_DWORD *)v99 + 2) > v91)
      {
        v106 = *(_DWORD *)(a1 + 40);
        if (v106)
        {
          v107 = *(_QWORD *)(a1 + 24);
          v108 = v106 - 1;
          v109 = ((v119 >> 4) ^ (v119 >> 9)) & v108;
          v110 = (_QWORD *)(v107 + 72 * v109);
          v111 = *v110;
          if (v119 != *v110)
          {
            v112 = 0;
            v113 = 1;
            while (v111 != -4096)
            {
              if (v112)
                v114 = 0;
              else
                v114 = v111 == -8192;
              if (v114)
                v112 = v110;
              v115 = v109 + v113++;
              v109 = v115 & v108;
              v110 = (_QWORD *)(v107 + 72 * v109);
              v111 = *v110;
              if (v119 == *v110)
                goto LABEL_143;
            }
            if (v112)
              v116 = v112;
            else
              v116 = v110;
LABEL_142:
            v110 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v119, &v119, v116);
            *v110 = v119;
            *(_OWORD *)(v110 + 5) = 0u;
            *(_OWORD *)(v110 + 1) = 0u;
            *(_OWORD *)(v110 + 3) = 0u;
            *(_OWORD *)(v110 + 7) = 0u;
            v110[5] = v110 + 7;
            *((_DWORD *)v110 + 13) = 2;
          }
LABEL_143:
          v93 = v110 + 4;
          continue;
        }
        v116 = 0;
        goto LABEL_142;
      }
      break;
    }
    *v92 = v119;
    if (++v68 != (v117 >> 3))
      continue;
    break;
  }
LABEL_150:
  if (v121[0] != v122)
    free(v121[0]);
}

uint64_t sub_1C50F1518(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *a3;
  v7 = (uint64_t *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)a1;
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8);
  v10 = *(_DWORD *)(a1 + 40);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = ((*v9 >> 4) ^ (*v9 >> 9)) & v11;
    result = v6 + 72 * v12;
    v14 = *(_QWORD *)result;
    if (*v9 == *(_QWORD *)result)
      goto LABEL_16;
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = (_QWORD *)result;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      result = v6 + 72 * v12;
      v14 = *(_QWORD *)result;
      if (*v9 == *(_QWORD *)result)
        goto LABEL_16;
    }
    if (v15)
      v19 = v15;
    else
      v19 = (_QWORD *)result;
  }
  else
  {
    v19 = 0;
  }
  result = (uint64_t)sub_1C50F1F2C((uint64_t)v7, (uint64_t)v9, v9, v19);
  *(_QWORD *)result = *v9;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 40) = result + 56;
  *(_DWORD *)(result + 52) = 2;
  v8 = *(_QWORD *)a1;
LABEL_16:
  *(_QWORD *)(result + 32) = v5;
  v20 = *(_QWORD *)(a1 + 8) - v8;
  if (v20 != 8)
  {
    v21 = v20 >> 3;
    v22 = 1;
    while (1)
    {
      v37 = 0;
      v23 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      v37 = v23;
      v24 = *(_DWORD *)(a2 + 40);
      if (!v24)
        break;
      v25 = *(_QWORD *)(a2 + 24);
      v26 = v24 - 1;
      v27 = ((v23 >> 4) ^ (v23 >> 9)) & v26;
      result = v25 + 16 * v27;
      v28 = *(_QWORD *)result;
      if (v23 != *(_QWORD *)result)
      {
        v29 = 0;
        v30 = 1;
        while (v28 != -4096)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == -8192;
          if (v31)
            v29 = (_QWORD *)result;
          v32 = v27 + v30++;
          v27 = v32 & v26;
          result = v25 + 16 * v27;
          v28 = *(_QWORD *)result;
          if (v23 == *(_QWORD *)result)
            goto LABEL_33;
        }
        if (v29)
          v33 = v29;
        else
          v33 = (_QWORD *)result;
        goto LABEL_32;
      }
LABEL_33:
      if (!*(_QWORD *)(result + 8))
      {
        v34 = sub_1C50F1E18(v7, v37);
        if ((uint64_t *)(*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) == v34)
          v35 = 0;
        else
          v35 = v34[4];
        v36 = sub_1C50F3C1C(a1, v35, a2);
        result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createChild(a2, v37, v36);
      }
      if (++v22 == v21)
        return result;
    }
    v33 = 0;
LABEL_32:
    result = (uint64_t)sub_1C50F392C(a2 + 24, (uint64_t)&v37, &v37, v33);
    *(_QWORD *)result = v37;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_1C50F1754(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 8 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 8);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C50F1834(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int (*a4)(_QWORD *, _QWORD *), int a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  unsigned int v64;
  _QWORD *v65;
  _QWORD *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[66];

  v85[64] = *MEMORY[0x1E0C80C00];
  v78 = a2;
  v83 = v85;
  v85[0] = a2;
  v84 = 0x4000000001;
  v9 = (uint64_t *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 40);
  if (!v10)
    goto LABEL_15;
  v12 = v10 - 1;
  v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = (_QWORD *)(v8 + 72 * v13);
  v15 = *v14;
  if (*v14 == a2)
  {
LABEL_14:
    *(_DWORD *)(v8 + 72 * v13 + 12) = a5;
LABEL_15:
    v24 = 1;
    goto LABEL_16;
  }
  v16 = 1;
  v17 = *v14;
  v18 = v12 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v17 == -4096)
      goto LABEL_15;
    v19 = v18 + v16++;
    v18 = v19 & v12;
    v17 = *(_QWORD *)(v8 + 72 * v18);
  }
  while (v17 != a2);
  v20 = 0;
  v21 = 1;
  while (v15 != -4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v15 == -8192;
    if (v22)
      v20 = v14;
    v23 = v13 + v21++;
    v13 = v23 & v12;
    v14 = (_QWORD *)(v8 + 72 * v13);
    v15 = *v14;
    if (*v14 == a2)
      goto LABEL_14;
  }
  if (v20)
    v72 = v20;
  else
    v72 = v14;
  v73 = sub_1C50F1F2C(a1 + 24, (uint64_t)&v78, &v78, v72);
  *v73 = v78;
  *(_OWORD *)(v73 + 5) = 0u;
  *(_OWORD *)(v73 + 3) = 0u;
  *(_OWORD *)(v73 + 7) = 0u;
  *(_OWORD *)(v73 + 1) = 0u;
  v73[5] = v73 + 7;
  *((_DWORD *)v73 + 13) = 2;
  v24 = v84;
  *((_DWORD *)v73 + 3) = a5;
  if (v24)
  {
    do
    {
LABEL_16:
      v77 = 0;
      v25 = (_QWORD *)*((_QWORD *)v83 + v24 - 1);
      LODWORD(v84) = v24 - 1;
      v77 = v25;
      v26 = *(_DWORD *)(a1 + 40);
      if (v26)
      {
        v27 = *(_QWORD *)(a1 + 24);
        v28 = v26 - 1;
        v29 = v28 & ((v25 >> 4) ^ (v25 >> 9));
        v30 = (_QWORD *)(v27 + 72 * v29);
        v31 = (_QWORD *)*v30;
        if (v25 == (_QWORD *)*v30)
          goto LABEL_31;
        v32 = 0;
        v33 = 1;
        while (v31 != (_QWORD *)-4096)
        {
          if (v32)
            v34 = 0;
          else
            v34 = v31 == (_QWORD *)-8192;
          if (v34)
            v32 = v30;
          v35 = v29 + v33++;
          v29 = v35 & v28;
          v30 = (_QWORD *)(v27 + 72 * v29);
          v31 = (_QWORD *)*v30;
          if (v25 == (_QWORD *)*v30)
            goto LABEL_31;
        }
        if (v32)
          v36 = v32;
        else
          v36 = v30;
      }
      else
      {
        v36 = 0;
      }
      v30 = sub_1C50F1F2C((uint64_t)v9, (uint64_t)&v77, (uint64_t *)&v77, v36);
      *v30 = v77;
      *(_OWORD *)(v30 + 5) = 0u;
      *(_OWORD *)(v30 + 1) = 0u;
      *(_OWORD *)(v30 + 3) = 0u;
      *(_OWORD *)(v30 + 7) = 0u;
      v30[5] = v30 + 7;
      *((_DWORD *)v30 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v30 + 2))
      {
        *((_DWORD *)v30 + 4) = ++a3;
        *((_DWORD *)v30 + 2) = a3;
        v37 = v77;
        v30[3] = v77;
        v39 = *(_QWORD **)(a1 + 8);
        v38 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v39 >= v38)
        {
          v41 = *(_QWORD **)a1;
          v42 = ((uint64_t)v39 - *(_QWORD *)a1) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            abort();
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_1C4764EE4();
            v46 = (char *)operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[8 * v42];
          *(_QWORD *)v47 = v37;
          v40 = v47 + 8;
          if (v39 != v41)
          {
            do
            {
              v48 = *--v39;
              *((_QWORD *)v47 - 1) = v48;
              v47 -= 8;
            }
            while (v39 != v41);
            v39 = *(_QWORD **)a1;
          }
          *(_QWORD *)a1 = v47;
          *(_QWORD *)(a1 + 8) = v40;
          *(_QWORD *)(a1 + 16) = &v46[8 * v45];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v39 = v37;
          v40 = v39 + 1;
        }
        *(_QWORD *)(a1 + 8) = v40;
        v49 = *(_QWORD *)(a1 + 48);
        if (v49)
          sub_1C50F2308(*(_QWORD *)(v49 + 8), (uint64_t)v77, (uint64_t)&v80);
        else
          sub_1C50F2538(v77, (uint64_t *)&v80);
        v50 = v81;
        if (a6 && v81 >= 2uLL)
        {
          v79 = a6;
          sub_1C50F2654((uint64_t)v80, (uint64_t *)v80 + v81, (uint64_t *)&v79, 126 - 2 * __clz(v81), 1);
          v50 = v81;
        }
        v51 = (uint64_t *)v80;
        v52 = (char *)v80 + 8 * v50;
        if (v50)
        {
          while (1)
          {
            v79 = 0;
            v79 = (_QWORD *)*v51;
            v53 = sub_1C50F1E18(v9, (uint64_t)v79);
            if ((uint64_t *)(*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) == v53
              || (v54 = v53, !*((_DWORD *)v53 + 2)))
            {
              if (a4(v77, v79))
              {
                v60 = *(_DWORD *)(a1 + 40);
                if (!v60)
                {
                  v70 = 0;
                  goto LABEL_75;
                }
                v61 = *(_QWORD *)(a1 + 24);
                v62 = v79;
                v63 = v60 - 1;
                v64 = ((v79 >> 4) ^ (v79 >> 9)) & v63;
                v54 = (_QWORD *)(v61 + 72 * v64);
                v65 = (_QWORD *)*v54;
                if (v79 != (_QWORD *)*v54)
                {
                  v66 = 0;
                  v67 = 1;
                  while (v65 != (_QWORD *)-4096)
                  {
                    if (v66)
                      v68 = 0;
                    else
                      v68 = v65 == (_QWORD *)-8192;
                    if (v68)
                      v66 = v54;
                    v69 = v64 + v67++;
                    v64 = v69 & v63;
                    v54 = (_QWORD *)(v61 + 72 * v64);
                    v65 = (_QWORD *)*v54;
                    if (v79 == (_QWORD *)*v54)
                      goto LABEL_76;
                  }
                  if (v66)
                    v70 = v66;
                  else
                    v70 = v54;
LABEL_75:
                  v54 = sub_1C50F1F2C((uint64_t)v9, (uint64_t)&v79, (uint64_t *)&v79, v70);
                  *v54 = v79;
                  *(_OWORD *)(v54 + 5) = 0u;
                  *(_OWORD *)(v54 + 1) = 0u;
                  *(_OWORD *)(v54 + 3) = 0u;
                  *(_OWORD *)(v54 + 7) = 0u;
                  v54[5] = v54 + 7;
                  *((_DWORD *)v54 + 13) = 2;
                  v62 = v79;
                }
LABEL_76:
                v71 = v84;
                if (v84 >= (unint64_t)HIDWORD(v84))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, v84 + 1, 8);
                  v71 = v84;
                }
                *((_QWORD *)v83 + v71) = v62;
                v58 = v54 + 6;
                v57 = *((unsigned int *)v54 + 12);
                LODWORD(v84) = v84 + 1;
                *((_DWORD *)v54 + 3) = a3;
                v56 = v54 + 5;
                v55 = v77;
                v59 = *((unsigned int *)v54 + 13);
LABEL_79:
                if (v57 >= v59)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, (uint64_t)(v54 + 7), v57 + 1, 8);
                  v57 = *((unsigned int *)v54 + 12);
                }
                *(_QWORD *)(*v56 + 8 * v57) = v55;
                ++*v58;
              }
            }
            else
            {
              v55 = v77;
              if (v79 != v77)
              {
                v56 = v53 + 5;
                v58 = v53 + 6;
                v57 = *((unsigned int *)v53 + 12);
                v59 = *((unsigned int *)v53 + 13);
                goto LABEL_79;
              }
            }
            if (++v51 == (uint64_t *)v52)
            {
              v51 = (uint64_t *)v80;
              break;
            }
          }
        }
        if (v51 != &v82)
          free(v51);
      }
      v24 = v84;
    }
    while ((_DWORD)v84);
  }
  if (v83 != v85)
    free(v83);
  return a3;
}

uint64_t *sub_1C50F1E18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
    return (uint64_t *)(v2 + 72 * v3);
  v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  result = (uint64_t *)(v2 + 72 * v4);
  v6 = *result;
  if (*result != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      result = (uint64_t *)(v2 + 72 * v4);
      v6 = *result;
      if (*result == a2)
        return result;
    }
    return (uint64_t *)(v2 + 72 * v3);
  }
  return result;
}

uint64_t sub_1C50F1E8C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 72 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 72 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C50F1F2C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C50F2060(a1, v7);
      v17 = 0;
      sub_1C50F1E8C((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C50F2060(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 72 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 72 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C50F2060(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C50F2124(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1C50F2124(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6;
    do
    {
      *v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    while (1)
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_17:
      v4 += 9;
      if (v4 == a3)
        return;
    }
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
    v12 = *(_QWORD *)a1 + 72 * v11;
    v13 = *(_QWORD *)v12;
    if (v9 != *(_QWORD *)v12)
    {
      v21 = 0;
      v22 = 1;
      while (v13 != -4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v13 == -8192;
        if (v23)
          v21 = v12;
        v24 = v11 + v22++;
        v11 = v24 & v10;
        v12 = *(_QWORD *)a1 + 72 * v11;
        v13 = *(_QWORD *)v12;
        if (v9 == *(_QWORD *)v12)
          goto LABEL_7;
      }
      if (v21)
        v12 = v21;
    }
LABEL_7:
    *(_QWORD *)v12 = v9;
    v14 = (void *)(v12 + 56);
    v15 = *(_OWORD *)(v4 + 1);
    v16 = *(_OWORD *)(v4 + 3);
    *(_QWORD *)(v12 + 40) = v12 + 56;
    *(_OWORD *)(v12 + 8) = v15;
    *(_OWORD *)(v12 + 24) = v16;
    *(_QWORD *)(v12 + 48) = 0x200000000;
    v17 = *((unsigned int *)v4 + 12);
    if (!(_DWORD)v17 || (uint64_t *)v12 == v4)
    {
LABEL_15:
      ++*(_DWORD *)(a1 + 8);
      v20 = (uint64_t *)v4[5];
      if (v20 != v4 + 7)
        free(v20);
      goto LABEL_17;
    }
    v18 = (uint64_t *)v4[5];
    if (v18 != v4 + 7)
    {
      *(_QWORD *)(v12 + 40) = v18;
      v25 = *((_DWORD *)v4 + 13);
      *(_DWORD *)(v12 + 48) = v17;
      *(_DWORD *)(v12 + 52) = v25;
      v4[5] = (uint64_t)(v4 + 7);
      *((_DWORD *)v4 + 13) = 0;
      goto LABEL_14;
    }
    if (v17 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 40, v12 + 56, v17, 8);
      v19 = *((unsigned int *)v4 + 12);
      if (!(_DWORD)v19)
        goto LABEL_13;
      v18 = (uint64_t *)v4[5];
      v14 = *(void **)(v12 + 40);
    }
    else
    {
      v19 = *((unsigned int *)v4 + 12);
    }
    memcpy(v14, v18, 8 * v19);
LABEL_13:
    *(_DWORD *)(v12 + 48) = v17;
LABEL_14:
    *((_DWORD *)v4 + 12) = 0;
    goto LABEL_15;
  }
}

_BYTE *sub_1C50F2308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  _BYTE *result;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  v7 = a3 + 16;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = 0x800000000;
  v8 = v6 - v5;
  if ((unint64_t)(v6 - v5) >= 0x41)
  {
    v39 = v6;
    v40 = a2;
    v37 = v5;
    v38 = v6 - v5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v7, v8 >> 3, 8);
    v8 = v38;
    v6 = v39;
    v5 = v37;
    a2 = v40;
    v9 = *(unsigned int *)(a3 + 8);
    v7 = *(_QWORD *)a3;
    v10 = *(_DWORD *)(a3 + 8);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  if (v6 != v5)
  {
    v11 = (_QWORD *)(v7 + 8 * v9);
    do
    {
      v12 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      *v11++ = v12;
    }
    while (v6 != v5);
    v7 = *(_QWORD *)a3;
  }
  v13 = (unint64_t)v8 >> 3;
  v14 = (_QWORD *)v7;
  v15 = (v10 + v13);
  if (v10 + (_DWORD)v13)
  {
    v16 = 8 * v15;
    v14 = (_QWORD *)v7;
    while (*v14)
    {
      ++v14;
      v16 -= 8;
      if (!v16)
      {
        v14 = (_QWORD *)(v7 + 8 * v15);
        break;
      }
    }
  }
  v17 = ((uint64_t)v14 - v7) >> 3;
  v18 = v14 + 1;
  if (v17 != v15 && v18 != (_QWORD *)(v7 + 8 * v15))
  {
    v20 = 8 * v15 - 8 * v17 - 8;
    do
    {
      if (*v18)
        *v14++ = *v18;
      ++v18;
      v20 -= 8;
    }
    while (v20);
    v7 = *(_QWORD *)a3;
  }
  *(_DWORD *)(a3 + 8) = ((unint64_t)v14 - v7) >> 3;
  result = (_BYTE *)sub_1C61E0EDC(a1, a2);
  v22 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v23 = 4;
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(_DWORD *)(a1 + 16);
  }
  if ((_BYTE *)(v22 + 72 * v23) != result)
  {
    v24 = *((unsigned int *)result + 4);
    v25 = *(unsigned int *)(a3 + 8);
    v26 = *(_QWORD **)a3;
    if ((_DWORD)v24)
    {
      v27 = (uint64_t *)*((_QWORD *)result + 1);
      v28 = &v27[v24];
      do
      {
        v29 = *v27;
        v30 = 8 * v25;
        v31 = v26;
        v32 = &v26[v25];
        if (v25)
        {
          v33 = 8 * v25;
          v31 = v26;
          while (*v31 != v29)
          {
            ++v31;
            v33 -= 8;
            if (!v33)
            {
              v31 = &v26[v25];
              break;
            }
          }
        }
        v34 = v31 - v26;
        if (v34 != v25)
        {
          v35 = v31 + 1;
          if (v31 + 1 != v32)
          {
            v36 = v30 - 8 * v34 - 8;
            do
            {
              if (*v35 != v29)
                *v31++ = *v35;
              ++v35;
              v36 -= 8;
            }
            while (v36);
            v26 = *(_QWORD **)a3;
          }
        }
        v25 = ((unint64_t)((char *)v31 - (char *)v26) >> 3);
        ++v27;
      }
      while (v27 != v28);
      *(_DWORD *)(a3 + 8) = v25;
    }
    return sub_1C61BB99C((unsigned int *)a3, (uint64_t)&v26[v25], *((uint64_t **)result + 5), (uint64_t *)(*((_QWORD *)result + 5) + 8 * *((unsigned int *)result + 12)));
  }
  return result;
}

_QWORD *sub_1C50F2538@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v2 = result[11];
  v3 = result[12];
  v4 = (uint64_t)(a2 + 2);
  *a2 = (uint64_t)(a2 + 2);
  a2[1] = 0x800000000;
  v5 = v3 - v2;
  if ((unint64_t)(v3 - v2) >= 0x41)
  {
    v21 = a2;
    v19 = v3 - v2;
    v20 = v2;
    v18 = v3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, v4, v5 >> 3, 8);
    v3 = v18;
    v5 = v19;
    v2 = v20;
    a2 = v21;
    v6 = *((unsigned int *)v21 + 2);
    v4 = *v21;
    v7 = *((_DWORD *)v21 + 2);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (v3 != v2)
  {
    v8 = (_QWORD *)(v4 + 8 * v6);
    do
    {
      v9 = *(_QWORD *)(v3 - 8);
      v3 -= 8;
      *v8++ = v9;
    }
    while (v3 != v2);
    v4 = *a2;
  }
  v10 = (unint64_t)v5 >> 3;
  v11 = (_QWORD *)v4;
  v12 = (v7 + v10);
  if (v7 + (_DWORD)v10)
  {
    v13 = 8 * v12;
    v11 = (_QWORD *)v4;
    while (*v11)
    {
      ++v11;
      v13 -= 8;
      if (!v13)
      {
        v11 = (_QWORD *)(v4 + 8 * v12);
        break;
      }
    }
  }
  v14 = ((uint64_t)v11 - v4) >> 3;
  v15 = v11 + 1;
  if (v14 != v12 && v15 != (_QWORD *)(v4 + 8 * v12))
  {
    v17 = 8 * v12 - 8 * v14 - 8;
    do
    {
      if (*v15)
        *v11++ = *v15;
      ++v15;
      v17 -= 8;
    }
    while (v17);
    v4 = *a2;
  }
  *((_DWORD *)a2 + 2) = ((unint64_t)v11 - v4) >> 3;
  return result;
}

uint64_t sub_1C50F2654(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_1C61E1020(a3, *(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_1C50F2AEC(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_1C50F2FA4(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_1C50F3058(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1C50F2998(v9, a2, a3);
          else
            return (uint64_t)sub_1C50F2A58(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1C50F2AEC(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1C50F2AEC(v9, &v9[v13 >> 1], a2 - 1, a3);
            sub_1C50F2AEC(v9 + 1, v15 - 1, a2 - 2, a3);
            sub_1C50F2AEC(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            sub_1C50F2AEC(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_1C61E1020(a3, *(v9 - 1), *v9))
          {
            result = (uint64_t)sub_1C50F2BD8(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_18;
          }
LABEL_11:
          v17 = sub_1C50F2CE4(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_17;
          v19 = sub_1C50F2DFC(v9, v17, a3);
          v9 = v17 + 1;
          result = sub_1C50F2DFC(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_17:
            result = sub_1C50F2654(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1C50F3134(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *sub_1C50F2998(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (uint64_t *)sub_1C61E1020(a3, v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = *(uint64_t *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (uint64_t *)sub_1C61E1020(a3, v11, *(uint64_t *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_1C50F2A58(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  if (result != a2)
  {
    v4 = result;
    for (i = result + 1; v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (uint64_t *)sub_1C61E1020(a3, v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (uint64_t *)sub_1C61E1020(a3, v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1C50F2AEC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C61E1020(a4, *a2, *a1);
  result = sub_1C61E1020(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (!sub_1C61E1020(a4, *a3, v10))
      return 1;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    return 2;
  }
  if ((_DWORD)result)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    if (!sub_1C61E1020(a4, *a2, *a1))
      return 1;
    v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    return 2;
  }
  return result;
}

uint64_t *sub_1C50F2BD8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;

  v4 = a2;
  v6 = *a1;
  if (sub_1C61E1020(a3, *a1, *(a2 - 1)))
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (!sub_1C61E1020(a3, v6, v8));
  }
  else
  {
    v14 = a1 + 1;
    do
    {
      v7 = v14;
      if (v14 >= v4)
        break;
      ++v14;
    }
    while (!sub_1C61E1020(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v9 = *--v4;
    while (sub_1C61E1020(a3, v6, v9));
  }
  while (v7 < v4)
  {
    v10 = *v7;
    *v7 = *v4;
    *v4 = v10;
    do
    {
      v11 = v7[1];
      ++v7;
    }
    while (!sub_1C61E1020(a3, v6, v11));
    do
      v12 = *--v4;
    while (sub_1C61E1020(a3, v6, v12));
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1C50F2CE4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  while (sub_1C61E1020(a3, a1[++v6], v7))
    ;
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (!sub_1C61E1020(a3, v12, v7));
  }
  else
  {
    do
      v11 = *--a2;
    while (!sub_1C61E1020(a3, v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (sub_1C61E1020(a3, v16, v7));
      do
        v17 = *--v14;
      while (!sub_1C61E1020(a3, v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL sub_1C50F2DFC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C61E1020(a3, *(a2 - 1), *a1))
      {
        v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1C50F2AEC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C50F2FA4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C50F3058(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C50F2AEC(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C61E1020(a3, *v9, *v8))
    {
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v13 -= 8;
        if (!sub_1C61E1020(a3, v12, *((_QWORD *)v14 + 1)))
        {
          v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      v15 = a1;
LABEL_11:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

BOOL sub_1C50F2FA4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C50F2AEC(a1, a2, a3, a5);
  result = sub_1C61E1020(a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_1C61E1020(a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_1C61E1020(a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1C50F3058(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C50F2FA4(a1, a2, a3, a4, a6);
  result = sub_1C61E1020(a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_1C61E1020(a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_1C61E1020(a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_1C61E1020(a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C50F3134(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1C50F3284((_BOOL8)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_1C61E1020(a4, *v14, *a1))
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          sub_1C50F3284((_BOOL8)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = a2 - 1;
      do
      {
        v17 = *a1;
        v18 = sub_1C50F33A8(a1, a4, v9);
        if (v16 == v18)
        {
          *v18 = v17;
        }
        else
        {
          *v18 = *v16;
          *v16 = v17;
          sub_1C50F345C((_BOOL8)a1, (uint64_t)(v18 + 1), a4, v18 + 1 - a1);
        }
        --v16;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

BOOL sub_1C50F3284(_BOOL8 result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  _BOOL8 v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (uint64_t *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_1C61E1020(a2, *v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = sub_1C61E1020(a2, *v12, *v5);
      if (!result)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (uint64_t *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3 && sub_1C61E1020(a2, *v12, v12[1]))
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = sub_1C61E1020(a2, *v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!result);
        *v15 = v14;
      }
    }
  }
  return result;
}

uint64_t *sub_1C50F33A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && sub_1C61E1020(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL sub_1C50F345C(_BOOL8 result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = sub_1C61E1020(a3, *v8, *(_QWORD *)(a2 - 8));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = sub_1C61E1020(a3, *v8, v10);
        v9 = v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

uint64_t sub_1C50F34FC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;

  v61 = a2;
  v8 = a1 + 24;
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    v12 = (_QWORD *)(v7 + 72 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_3;
    v16 = 0;
    v17 = 1;
    while (v13 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v13 == -8192;
      if (v18)
        v16 = v12;
      v19 = v11 + v17++;
      v11 = v19 & v10;
      v12 = (_QWORD *)(v7 + 72 * v11);
      v13 = *v12;
      if (*v12 == a2)
        goto LABEL_3;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v12;
  }
  else
  {
    v20 = 0;
  }
  v12 = sub_1C50F1F2C(v8, (uint64_t)&v61, &v61, v20);
  *v12 = v61;
  *(_OWORD *)(v12 + 5) = 0u;
  *(_OWORD *)(v12 + 1) = 0u;
  *(_OWORD *)(v12 + 3) = 0u;
  *(_OWORD *)(v12 + 7) = 0u;
  v12[5] = v12 + 7;
  *((_DWORD *)v12 + 13) = 2;
LABEL_3:
  if (*((_DWORD *)v12 + 3) >= a3)
  {
    v21 = v12 + 1;
    while (1)
    {
      v22 = *(unsigned int *)(a4 + 8);
      if (v22 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v22 + 1, 8);
        v22 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v22) = v21;
      ++*(_DWORD *)(a4 + 8);
      v23 = (uint64_t *)(*(_QWORD *)a1 + 8 * *((unsigned int *)v21 + 1));
      v24 = *(_DWORD *)(a1 + 40);
      if (!v24)
        break;
      v25 = *(_QWORD *)(a1 + 24);
      v26 = v24 - 1;
      v27 = ((*v23 >> 4) ^ (*v23 >> 9)) & v26;
      v28 = (_QWORD *)(v25 + 72 * v27);
      v29 = *v28;
      if (*v23 != *v28)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & v26;
          v28 = (_QWORD *)(v25 + 72 * v27);
          v29 = *v28;
          if (*v23 == *v28)
            goto LABEL_24;
        }
        if (v30)
          v34 = v30;
        else
          v34 = v28;
        goto LABEL_38;
      }
LABEL_24:
      v21 = v28 + 1;
      if (*((_DWORD *)v28 + 3) < a3)
      {
        v35 = v28 + 3;
        v36 = *(_DWORD *)(a1 + 40);
        if (v36)
        {
          v37 = *(_QWORD *)(a1 + 24);
          v38 = v36 - 1;
          v39 = ((*v35 >> 4) ^ (*v35 >> 9)) & v38;
          v40 = (_QWORD *)(v37 + 72 * v39);
          v41 = *v40;
          if (*v35 == *v40)
            goto LABEL_41;
          v56 = 0;
          v57 = 1;
          while (v41 != -4096)
          {
            if (v56)
              v58 = 0;
            else
              v58 = v41 == -8192;
            if (v58)
              v56 = v40;
            v59 = v39 + v57++;
            v39 = v59 & v38;
            v40 = (_QWORD *)(v37 + 72 * v39);
            v41 = *v40;
            if (*v35 == *v40)
              goto LABEL_41;
          }
          if (v56)
            v60 = v56;
          else
            v60 = v40;
        }
        else
        {
          v60 = 0;
        }
        v40 = sub_1C50F1F2C(v8, (uint64_t)v35, v35, v60);
        *v40 = *v35;
        *(_OWORD *)(v40 + 5) = 0u;
        *(_OWORD *)(v40 + 3) = 0u;
        *(_OWORD *)(v40 + 1) = 0u;
        *(_OWORD *)(v40 + 7) = 0u;
        v40[5] = v40 + 7;
        *((_DWORD *)v40 + 13) = 2;
LABEL_41:
        v42 = v40 + 1;
        v43 = *(_DWORD *)(a4 + 8);
        while (2)
        {
          v44 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v43 - 8);
          *(_DWORD *)(a4 + 8) = v43 - 1;
          *(_DWORD *)(v44 + 4) = *((_DWORD *)v21 + 1);
          v14 = (_QWORD *)(v44 + 16);
          v45 = *(_DWORD *)(a1 + 40);
          if (v45)
          {
            v46 = *(_QWORD *)(a1 + 24);
            v47 = v45 - 1;
            v48 = ((*v14 >> 4) ^ (*v14 >> 9)) & v47;
            v49 = (_QWORD *)(v46 + 72 * v48);
            v50 = *v49;
            if (*v14 == *v49)
              goto LABEL_44;
            v51 = 0;
            v52 = 1;
            while (v50 != -4096)
            {
              if (v51)
                v53 = 0;
              else
                v53 = v50 == -8192;
              if (v53)
                v51 = v49;
              v54 = v48 + v52++;
              v48 = v54 & v47;
              v49 = (_QWORD *)(v46 + 72 * v48);
              v50 = *v49;
              if (*v14 == *v49)
                goto LABEL_44;
            }
            if (v51)
              v55 = v51;
            else
              v55 = v49;
          }
          else
          {
            v55 = 0;
          }
          v49 = sub_1C50F1F2C(v8, v44 + 16, (uint64_t *)(v44 + 16), v55);
          *v49 = *v14;
          *(_OWORD *)(v49 + 5) = 0u;
          *(_OWORD *)(v49 + 3) = 0u;
          *(_OWORD *)(v49 + 1) = 0u;
          *(_OWORD *)(v49 + 7) = 0u;
          v49[5] = v49 + 7;
          *((_DWORD *)v49 + 13) = 2;
LABEL_44:
          if (*((_DWORD *)v42 + 2) >= *((_DWORD *)v49 + 4))
            v42 = v49 + 1;
          else
            *v14 = v21[2];
          v43 = *(_DWORD *)(a4 + 8);
          v21 = (_QWORD *)v44;
          if (!v43)
            return *v14;
          continue;
        }
      }
    }
    v34 = 0;
LABEL_38:
    v28 = sub_1C50F1F2C(v8, (uint64_t)v23, v23, v34);
    *v28 = *v23;
    *(_OWORD *)(v28 + 5) = 0u;
    *(_OWORD *)(v28 + 3) = 0u;
    *(_OWORD *)(v28 + 1) = 0u;
    *(_OWORD *)(v28 + 7) = 0u;
    v28[5] = v28 + 7;
    *((_DWORD *)v28 + 13) = 2;
    goto LABEL_24;
  }
  v14 = v12 + 3;
  return *v14;
}

