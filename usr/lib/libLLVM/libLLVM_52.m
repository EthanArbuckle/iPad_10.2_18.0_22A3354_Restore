BOOL sub_1C5CF9D70(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  _BOOL8 result;

  result = sub_1C5CEE918(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3));
  if (!result)
    __asm { BR              X10 }
  return result;
}

uint64_t *sub_1C5CFD340(unint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  BOOL v5;
  unint64_t EVT;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  llvm *v10;
  const char *v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  llvm *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  __int16 v84;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  unsigned __int8 *v88;
  int v89;
  _OWORD v90[17];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v83 = *(unsigned __int16 *)(a2 + 24);
  v4 = *(unsigned __int8 **)(a2 + 64);
  v88 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v88, v4, 2);
  v89 = *(_DWORD *)(a2 + 60);
  llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::EVT **)(a1[1] + 56), **(_QWORD **)(a2 + 40), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8), (uint64_t)v90);
  v87 = *(_OWORD *)((char *)v90 + 8);
  if (BYTE8(v90[0]))
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v87);
    v9 = 0;
    v8 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*(_QWORD *)&v90[1] + 24), 0, v5);
    v8 = (uint64_t)v7;
    v9 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v10 = (llvm *)(v9 | EVT);
  v86 = v87;
  v12 = sub_1C612FE00((llvm::EVT *)&v86, v7);
  v84 = *(_WORD *)(a2 + 72);
  LOBYTE(v13) = v86;
  while (1)
  {
    v14 = v13;
    if ((_BYTE)v13)
      v14 = *(_QWORD *)(*a1 + 8 * v13 + 96) != 0;
    if (v14 || v12 == 1)
      break;
    v12 >>= 1;
    v13 = sub_1C4816F98(*(llvm::LLVMContext **)(a1[1] + 56), (uint64_t)v10, v8, v12, 0);
    *(_QWORD *)&v86 = v13;
    *((_QWORD *)&v86 + 1) = v11;
  }
  if (v12 == 1)
  {
    v15 = a1[1];
    v16 = sub_1C612FE00((llvm::EVT *)&v87, v11);
    v17 = sub_1C5D625F4(v15, a2, v16);
LABEL_31:
    v54 = v17;
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)*a1 + 496))(*a1, *(unsigned __int16 *)(a2 + 24)) & 1) == 0)
  {
    v48 = sub_1C6335540((uint64_t)a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
    v50 = v49;
    v51 = sub_1C6335540((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48));
    v17 = sub_1C5D56C70(a1[1], *(unsigned __int16 *)(a2 + 24), (const llvm::APInt *)&v88, (llvm *)v87, *((uint64_t *)&v87 + 1), v48, v50, v53, v51, v52, v84);
    goto LABEL_31;
  }
  v77 = *((_QWORD *)&v86 + 1);
  v78 = (llvm *)v86;
  v18 = sub_1C6335540((uint64_t)a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  v81 = v19;
  v82 = v18;
  v20 = sub_1C6335540((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48));
  v79 = (unint64_t)v21;
  v80 = v20;
  v90[0] = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v22 = sub_1C612FE00((llvm::EVT *)v90, v21);
  *(_QWORD *)&v90[0] = &v90[1];
  *((_QWORD *)&v90[0] + 1) = 0x1000000000;
  sub_1C4825C80((unsigned int *)v90, v22, 0, 0);
  v23 = 0;
  if (v22)
  {
    v24 = 0;
    while (1)
    {
      while (v22 >= v12)
      {
        v25 = a1[1];
        v26 = v86;
        v27 = sub_1C6366C9C(v25, v24, (uint64_t)&v88, 0);
        v30 = *(_QWORD *)(v25 + 832);
        v85 = v22;
        if (v30)
          LOWORD(v30) = *(_WORD *)(v30 + 8);
        v31 = sub_1C5D56C70(v25, 151, (const llvm::APInt *)&v88, (llvm *)v26, *((uint64_t *)&v26 + 1), v82, v81, v29, v27, v28, v30);
        v33 = v32;
        v34 = a1[1];
        v35 = v86;
        v36 = sub_1C6366C9C(v34, v24, (uint64_t)&v88, 0);
        v39 = *(_QWORD *)(v34 + 832);
        if (v39)
          LOWORD(v39) = *(_WORD *)(v39 + 8);
        v40 = sub_1C5D56C70(v34, 151, (const llvm::APInt *)&v88, (llvm *)v35, *((uint64_t *)&v35 + 1), v80, v79, v38, v36, v37, v39);
        v43 = sub_1C5D56C70(a1[1], v83, (const llvm::APInt *)&v88, (llvm *)v86, *((uint64_t *)&v86 + 1), (uint64_t)v31, v33, v42, (uint64_t)v40, v41, v84);
        v44 = *(_QWORD *)&v90[0] + 16 * v23++;
        *(_QWORD *)v44 = v43;
        *(_DWORD *)(v44 + 8) = v45;
        v24 += v12;
        v22 = v85 - v12;
      }
      do
      {
        v12 >>= 1;
        *(_QWORD *)&v86 = sub_1C4816F98(*(llvm::LLVMContext **)(a1[1] + 56), (uint64_t)v10, v8, v12, 0);
        *((_QWORD *)&v86 + 1) = v46;
        v47 = v86;
        if ((_BYTE)v86)
          v47 = *(_QWORD *)(*a1 + 8 * v86 + 96) != 0;
      }
      while (v12 != 1 && !v47);
      if (v12 == 1)
        break;
      if (!v22)
        goto LABEL_42;
    }
    if (v22)
    {
      v56 = v24;
      v57 = v23;
      do
      {
        v58 = a1[1];
        v59 = sub_1C6366C9C(v58, v56, (uint64_t)&v88, 0);
        v62 = *(_QWORD *)(v58 + 832);
        if (v62)
          LOWORD(v62) = *(_WORD *)(v62 + 8);
        v63 = sub_1C5D56C70(v58, 148, (const llvm::APInt *)&v88, v10, v8, v82, v81, v61, v59, v60, v62);
        v65 = v64;
        v66 = a1[1];
        v67 = sub_1C6366C9C(v66, v56, (uint64_t)&v88, 0);
        v70 = *(_QWORD *)(v66 + 832);
        if (v70)
          LOWORD(v70) = *(_WORD *)(v70 + 8);
        v71 = sub_1C5D56C70(v66, 148, (const llvm::APInt *)&v88, v10, v8, v80, v79, v69, v67, v68, v70);
        v74 = sub_1C5D56C70(a1[1], v83, (const llvm::APInt *)&v88, v10, v8, (uint64_t)v63, v65, v73, (uint64_t)v71, v72, v84);
        v23 = v57 + 1;
        v75 = *(_QWORD *)&v90[0] + 16 * v57;
        *(_QWORD *)v75 = v74;
        *(_DWORD *)(v75 + 8) = v76;
        ++v56;
        ++v57;
        --v22;
      }
      while (v22);
    }
  }
LABEL_42:
  v54 = sub_1C5CFD880(a1[1], *a1, (unsigned int **)v90, v23, (llvm *)v86, *((uint64_t *)&v86 + 1), v78, v77, (llvm *)v87, *((uint64_t *)&v87 + 1));
  if (*(_OWORD **)&v90[0] != &v90[1])
    free(*(void **)&v90[0]);
LABEL_32:
  if (v88)
    llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
  return v54;
}

uint64_t *sub_1C5CFD880(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int a4, llvm *a5, uint64_t a6, llvm *a7, uint64_t a8, llvm *a9, uint64_t a10)
{
  unsigned __int8 v10;
  unsigned int v11;
  unsigned int *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  unsigned __int8 *v20;
  unint64_t EVT;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int **v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  int v34;
  unsigned __int8 *v35;
  unsigned int v37;
  llvm *v38;
  uint64_t v39;
  llvm *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  const char *v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  llvm *v72;
  BOOL v73;
  unsigned int v75;
  const char *v76;
  unsigned int v77;
  uint64_t **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int i;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 *v94;
  int v95;
  llvm *v96;
  uint64_t v97;
  llvm *v98;
  uint64_t v99;
  llvm *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _QWORD v104[34];

  v10 = a7;
  v11 = a4;
  v104[32] = *MEMORY[0x1E0C80C00];
  v100 = a5;
  v101 = a6;
  v98 = a7;
  v99 = a8;
  v96 = a9;
  v97 = a10;
  v14 = *a3;
  v15 = a9;
  if (a4 == 1)
  {
    v16 = *(uint64_t **)v14;
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 40) + 16 * v14[2];
    v19 = *(llvm **)v17;
    v18 = *(_QWORD *)(v17 + 8);
    v100 = v19;
    v101 = v18;
    if (a9 == v19 && ((_BYTE)a9 || v18 == a10))
      return v16;
  }
  else
  {
    v16 = *(uint64_t **)v14;
  }
  v20 = (unsigned __int8 *)v16[8];
  v94 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track((uint64_t)&v94, v20, 2);
    v15 = v96;
  }
  v95 = *((_DWORD *)v16 + 15);
  if (v15)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v96);
    v23 = 0;
    v24 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v97 + 24), 0, (BOOL)a3);
    v24 = (uint64_t)v22;
    v23 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v25 = v23 | EVT;
  v26 = v10;
  v27 = a3;
  for (i = v10; ; v26 = i)
  {
    v28 = v11 - 1;
    v29 = *v27;
    v30 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&(*v27)[4 * v28] + 40) + 16 * (*v27)[4 * v28 + 2]);
    if (*v30 == v26 && (v26 || *((_QWORD *)v30 + 1) == a8))
      break;
    v31 = *(_QWORD *)(*(_QWORD *)&v29[4 * v28] + 40) + 16 * v29[4 * v28 + 2];
    v33 = *(llvm **)v31;
    v32 = *(_QWORD *)(v31 + 8);
    v100 = v33;
    v101 = v32;
    v34 = v11 - 2;
    if ((int)(v11 - 2) >= 0)
    {
      while (1)
      {
        v35 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)&v29[4 * v34] + 40) + 16 * v29[4 * v34 + 2]);
        if (*v35 != v33)
          break;
        if (!(_BYTE)v33 && *((_QWORD *)v35 + 1) != v32)
          goto LABEL_24;
        if (v34-- <= 0)
        {
          v34 = -1;
          break;
        }
      }
    }
    if ((_BYTE)v33)
    {
      if (v33 - 15 < 0x9C)
      {
LABEL_25:
        v37 = sub_1C612FE00((llvm::EVT *)&v100, v22);
        goto LABEL_28;
      }
    }
    else
    {
LABEL_24:
      if ((*(_DWORD *)(v32 + 8) & 0xFE) == 0x12)
        goto LABEL_25;
    }
    v37 = 1;
    do
    {
      do
      {
LABEL_28:
        v37 *= 2;
        v38 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), v25, v24, v37, 0);
      }
      while (!(_BYTE)v38);
    }
    while (!*(_QWORD *)(a2 + 8 * v38 + 96));
    v40 = v38;
    v41 = v39;
    if ((_BYTE)v100)
    {
      if (v100 - 15 > 0x9B)
      {
LABEL_43:
        v58 = sub_1C61312D0(a1, v38, v39);
        v59 = (unint64_t)v22;
        v60 = v34 + 1;
        v87 = v11 + ~v34;
        if (v11 + ~v34)
        {
          v61 = 0;
          v27 = a3;
          do
          {
            v62 = (uint64_t *)&(*v27)[4 * (v60 + v61)];
            v90 = v62[1];
            v92 = *v62;
            v63 = sub_1C6366C9C(a1, v61, (uint64_t)&v94, 0);
            v66 = *(_QWORD *)(a1 + 832);
            if (v66)
              LOWORD(v66) = *(_WORD *)(v66 + 8);
            v58 = sub_1C5D58E08(a1, (const char *)0x93, (const llvm::APInt *)&v94, v40, v41, (uint64_t)v58, v59, v65, v92, v90, v63, v64, SHIDWORD(v64), v66);
            v59 = v59 & 0xFFFFFFFF00000000 | v22;
            ++v61;
            v60 = v34 + 1;
            v27 = a3;
          }
          while (v87 != v61);
        }
        else
        {
          v27 = a3;
        }
        v69 = (uint64_t)&(*v27)[4 * v60];
        *(_QWORD *)v69 = v58;
        *(_DWORD *)(v69 + 8) = v59;
        goto LABEL_54;
      }
      v42 = v101;
    }
    else
    {
      v42 = v101;
      if ((*(_DWORD *)(v101 + 8) & 0xFE) != 0x12)
        goto LABEL_43;
    }
    v43 = sub_1C61312D0(a1, v100, v42);
    v91 = v11;
    v45 = (int)v44;
    v46 = sub_1C612FE00((llvm::EVT *)&v100, v44);
    v102 = v104;
    v103 = 0x1000000000;
    v47 = v37 / v46;
    sub_1C4825C80((unsigned int *)&v102, v47, 0, 0);
    v48 = v91 + ~v34;
    if (v48)
    {
      v49 = 0;
      do
      {
        v50 = (uint64_t)&(*a3)[4 * v34 + 4 + v49];
        v51 = (char *)v102 + v49 * 4;
        v52 = *(_QWORD *)v50;
        *((_DWORD *)v51 + 2) = *(_DWORD *)(v50 + 8);
        *(_QWORD *)v51 = v52;
        v49 += 4;
      }
      while (4 * (v91 + ~v34) != v49);
    }
    if (v48 < v47)
    {
      v53 = 16 * (v91 + ~v34);
      v54 = v47 - v48;
      do
      {
        v55 = (char *)v102 + v53;
        *(_QWORD *)v55 = v43;
        *((_DWORD *)v55 + 2) = v45;
        v53 += 16;
        --v54;
      }
      while (v54);
    }
    v56 = *(_QWORD *)(a1 + 832);
    if (v56)
      v57 = *(unsigned __int16 *)(v56 + 8);
    else
      v57 = 0;
    v67 = sub_1C636D0C8(a1, (const char *)0x95, (const llvm::APInt *)&v94, v40, v41, (uint64_t *)v102, v103, v57);
    v27 = a3;
    v68 = (uint64_t)&(*a3)[4 * (v34 + 1)];
    *(_QWORD *)v68 = v67;
    *(_DWORD *)(v68 + 8) = (_DWORD)v22;
    if (v102 != v104)
    {
      free(v102);
      v27 = a3;
    }
LABEL_54:
    v11 = v34 + 2;
  }
  if (v11 == 1
    && (v70 = *(_QWORD *)(*(_QWORD *)v29 + 40) + 16 * v29[2],
        v72 = *(llvm **)v70,
        v71 = *(_QWORD *)(v70 + 8),
        v100 = v72,
        v101 = v71,
        v72 == v96)
    && (!(_BYTE)v72 ? (v73 = v71 == v97) : (v73 = 1), v73))
  {
    v16 = *(uint64_t **)v29;
  }
  else
  {
    v75 = sub_1C612FE00((llvm::EVT *)&v96, v22);
    v77 = sub_1C612FE00((llvm::EVT *)&v98, v76);
    v78 = (uint64_t **)a3;
    v79 = v75 / v77;
    if ((_DWORD)v79 != v11)
    {
      v82 = sub_1C61312D0(a1, v98, v99);
      v78 = (uint64_t **)a3;
      if (v11 < v79)
      {
        v84 = 4 * v11;
        v85 = v79 - v11;
        do
        {
          v86 = (uint64_t)&(*a3)[v84];
          *(_QWORD *)v86 = v82;
          *(_DWORD *)(v86 + 8) = v83;
          v84 += 4;
          --v85;
        }
        while (v85);
      }
    }
    v80 = *(_QWORD *)(a1 + 832);
    if (v80)
      v81 = *(unsigned __int16 *)(v80 + 8);
    else
      v81 = 0;
    v16 = sub_1C636D0C8(a1, (const char *)0x95, (const llvm::APInt *)&v94, v96, v97, *v78, v79, v81);
  }
  if (v94)
    llvm::MetadataTracking::untrack((uint64_t)&v94, v94);
  return v16;
}

uint64_t *sub_1C5CFDE28(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t EVT;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  const char *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t ExtendedSizeInBits;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *i;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  __int16 v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  const char *v80;
  _OWORD v81[2];
  unsigned __int8 *v82;
  int v83;
  _QWORD v84[2];
  llvm *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  _QWORD v89[34];

  v89[32] = *MEMORY[0x1E0C80C00];
  llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)a1, *(llvm::EVT **)(*(_QWORD *)(a1 + 8) + 56), **(_QWORD **)(a3 + 40), *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8), (uint64_t)&v87);
  v8 = v88;
  v7 = v89[0];
  v85 = (llvm *)v88;
  v86 = v89[0];
  v9 = *(_QWORD *)(a3 + 88);
  v84[0] = *(_QWORD *)(a3 + 80);
  v84[1] = v9;
  v74 = a3;
  v10 = *(unsigned __int8 **)(a3 + 64);
  v82 = v10;
  v11 = LOBYTE(v84[0]);
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v82, v10, 2);
  v83 = *(_DWORD *)(v74 + 60);
  v12 = *(uint64_t **)(v74 + 32);
  v69 = v12[1];
  v70 = *v12;
  v67 = v12[6];
  v68 = v12[5];
  v13 = *(_QWORD *)(v74 + 96);
  v66 = *(_WORD *)(v13 + 32);
  v14 = *(_OWORD *)(v13 + 56);
  v81[0] = *(_OWORD *)(v13 + 40);
  v81[1] = v14;
  if (!v11)
  {
    if (*(_BYTE *)(v9 + 8) != 19)
      goto LABEL_5;
LABEL_8:
    llvm::report_fatal_error((llvm *)"Generating widen scalable extending vector loads is not yet supported", (const char *)1);
  }
  if ((v11 - 120) < 0x33)
    goto LABEL_8;
LABEL_5:
  if (v8)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v85);
    v18 = 0;
    v73 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v7 + 24), 0, v6);
    v73 = v17;
    v18 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v19 = EVT;
  if (v11)
  {
    LOBYTE(v20) = sub_1C47F37A0((unsigned __int8 *)v84);
    v22 = 0;
    v21 = 0;
  }
  else
  {
    v20 = llvm::EVT::getEVT(*(llvm::EVT **)(v9 + 24), 0, v16);
    v22 = v20 & 0xFFFFFFFFFFFFFF00;
  }
  v72 = (llvm *)(v18 | v19);
  v23 = v20;
  v79 = v22 | v20;
  v80 = v21;
  v24 = sub_1C612FE00((llvm::EVT *)v84, v21);
  v26 = sub_1C612FE00((llvm::EVT *)&v85, v25);
  v27 = (unint64_t)v89;
  v87 = v89;
  v88 = 0x1000000000;
  sub_1C4825C80((unsigned int *)&v87, v26, 0, 0);
  if (v23)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v79);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v79);
  v31 = ExtendedSizeInBits;
  if ((_DWORD)v29 == 1)
  v32 = *(_QWORD *)(a1 + 8);
  v33 = *(_QWORD *)(v74 + 96);
  v77 = *(_OWORD *)v33;
  v78 = *(_QWORD *)(v33 + 16);
  v34 = sub_1C636B4C8(v32, a4, (uint64_t)&v82, (uint64_t)v72, v73, v70, v69, v30, v68, v67, &v77, v79, (uint64_t)v80, *(unsigned __int8 *)(v33 + 34) | 0x100u, (*(unsigned __int8 *)(v33 + 34) | 0x100uLL) >> 32, v66, (uint64_t)v81);
  v35 = v87;
  *(_QWORD *)v87 = v34;
  v35[2] = v36;
  v37 = *(_QWORD *)v87;
  v38 = *(unsigned int *)(a2 + 8);
  if (v38 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v38 + 1, 16);
    LODWORD(v38) = *(_DWORD *)(a2 + 8);
  }
  v39 = (_QWORD *)(*(_QWORD *)a2 + 16 * v38);
  v40 = 1;
  *v39 = v37;
  v39[1] = 1;
  ++*(_DWORD *)(a2 + 8);
  if (v24 >= 2)
  {
    v64 = v26;
    v41 = 0;
    v63 = v24;
    v65 = 16 * v24 - 16;
    v42 = v31 >> 3;
    v43 = v31 >> 3;
    do
    {
      v44 = sub_1C6369954(*(_QWORD *)(a1 + 8), v68, v67, v43, 0, (const llvm::APInt *)&v82, 3);
      v46 = v45;
      v47 = *(_QWORD *)(a1 + 8);
      sub_1C4824250(*(uint64_t **)(v74 + 96), v43, (uint64_t)&v76);
      v27 = v27 & 0xFFFFFFFFFFFF0000 | *(unsigned __int8 *)(*(_QWORD *)(v74 + 96) + 34) | 0x100;
      v49 = sub_1C636B4C8(v47, a4, (uint64_t)&v82, (uint64_t)v72, v73, v70, v69, v48, (uint64_t)v44, v46, &v76, v79, (uint64_t)v80, v27, SHIDWORD(v27), v66, (uint64_t)v81);
      v50 = (char *)v87 + v41;
      *((_QWORD *)v50 + 2) = v49;
      *((_DWORD *)v50 + 6) = v51;
      v52 = *(_QWORD *)((char *)v87 + v41 + 16);
      v53 = *(unsigned int *)(a2 + 8);
      if (v53 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v53 + 1, 16);
        v53 = *(unsigned int *)(a2 + 8);
      }
      v54 = (_QWORD *)(*(_QWORD *)a2 + 16 * v53);
      *v54 = v52;
      v54[1] = 1;
      ++*(_DWORD *)(a2 + 8);
      LODWORD(v43) = v43 + v42;
      v41 += 16;
    }
    while (v65 != v41);
    v40 = v63;
    v26 = v64;
  }
  for (i = sub_1C61312D0(*(_QWORD *)(a1 + 8), v72, v73); v26 != v40; ++v40)
  {
    v57 = (char *)v87 + 16 * v40;
    *(_QWORD *)v57 = i;
    *((_DWORD *)v57 + 2) = v56;
  }
  v58 = *(_QWORD *)(a1 + 8);
  v59 = *(_QWORD *)(v58 + 832);
  if (v59)
    v60 = *(unsigned __int16 *)(v59 + 8);
  else
    v60 = 0;
  v61 = sub_1C636D0C8(v58, (const char *)0x92, (const llvm::APInt *)&v82, v85, v86, (uint64_t *)v87, v88, v60);
  if (v87 != v89)
    free(v87);
  if (v82)
    llvm::MetadataTracking::untrack((uint64_t)&v82, v82);
  return v61;
}

_QWORD *sub_1C5CFE2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  unsigned __int8 *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t ExtendedSizeInBits;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  int v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm *v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  unsigned int *v98;
  uint64_t v99;
  BOOL v100;
  uint64_t *v101;
  char *v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  char *v129;
  int v130;
  uint64_t *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  int v155;
  unint64_t v156;
  uint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  _OWORD v173[2];
  __int128 v174;
  unsigned __int8 *v175;
  int v176;
  __int128 v177;
  __int128 v178;
  void *v179;
  uint64_t v180;
  _BYTE v181[256];
  void *v182[2];
  uint64_t v183;
  _BYTE v184[24];
  unint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  _QWORD v188[18];

  v188[16] = *MEMORY[0x1E0C80C00];
  llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)a1, *(llvm::EVT **)(*(_QWORD *)(a1 + 8) + 56), **(_QWORD **)(a3 + 40), *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8), (uint64_t)v184);
  v6 = *(_OWORD *)(a3 + 80);
  v177 = v6;
  v178 = *(_OWORD *)&v184[8];
  v7 = *(unsigned __int8 **)(a3 + 64);
  v175 = v7;
  if (v7)
  {
    llvm::MetadataTracking::track((uint64_t)&v175, v7, 2);
    v8 = v177;
  }
  else
  {
    v8 = v6;
  }
  v176 = *(_DWORD *)(a3 + 60);
  v9 = *(_QWORD *)(a3 + 32);
  v10 = *(_QWORD *)v9;
  v161 = *(_QWORD *)(v9 + 8);
  v11 = *(_OWORD *)(v9 + 40);
  v12 = *(_QWORD *)(a3 + 96);
  v160 = *(_WORD *)(v12 + 32);
  v13 = *(_OWORD *)(v12 + 56);
  v173[0] = *(_OWORD *)(v12 + 40);
  v173[1] = v13;
  v174 = v11;
  if (v8)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v177);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v177);
  v16 = ExtendedSizeInBits;
  v17 = v15;
  if ((_BYTE)v178)
    v18 = sub_1C47A8C74((unsigned __int8 *)&v178);
  else
    v18 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v178);
  v20 = v18;
  v21 = v19;
  v22 = v18 - v16;
  v23 = *(_QWORD *)(a3 + 96);
  if ((*(_WORD *)(v23 + 36) & 0xF00) != 0 || (*(_BYTE *)(a3 + 26) & 8) != 0)
    goto LABEL_14;
  if ((_BYTE)v177)
  {
    if (v177 - 120 < 0x33)
    {
LABEL_14:
      LODWORD(v24) = 0;
      goto LABEL_15;
    }
  }
  else if (*(_BYTE *)(*((_QWORD *)&v177 + 1) + 8) == 19)
  {
    goto LABEL_14;
  }
  v40 = (1 << *(_BYTE *)(v23 + 34)) | *(_QWORD *)(v23 + 8);
  v24 = 1 << (63 - __clz(v40 & -v40));
LABEL_15:
  sub_1C5D01EEC(&v171, *(_QWORD *)(a1 + 8), *(_QWORD *)a1, v16, v178, *((uint64_t *)&v178 + 1), v24, v22);
  if (!(_BYTE)v172)
  {
    v27 = 0;
    goto LABEL_49;
  }
  v159 = v10;
  v155 = v21;
  v158 = v20;
  v186 = v188;
  v187 = 0x800000000;
  if ((_BYTE)v171)
    v25 = sub_1C47A8C74((unsigned __int8 *)&v171);
  else
    v25 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v171);
  v28 = v26;
  v29 = v17;
  v30 = v26 != 1 && v17 == 1;
  if (v30 || v16 > v25)
  {
    *(_OWORD *)v184 = v171;
    *(_QWORD *)&v184[16] = v172;
    v156 = v25;
    v31 = v25;
    do
    {
      v16 -= v31;
      if ((v28 == 1 || v29 != 1) && v16 < v31)
      {
        sub_1C5D01EEC(v182, *(_QWORD *)(a1 + 8), *(_QWORD *)a1, v16, v178, *((uint64_t *)&v178 + 1), v24, v22);
        *(_QWORD *)&v184[16] = v183;
        *(_OWORD *)v184 = *(_OWORD *)v182;
        if (!(_BYTE)v183)
        {
          v27 = 0;
          goto LABEL_47;
        }
        if (v184[0])
          v34 = sub_1C47A8C74(v184);
        else
          v34 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v184);
        v31 = v34;
        v28 = v35;
      }
      v36 = *(_OWORD *)v184;
      v37 = v187;
      if (v187 >= (unint64_t)HIDWORD(v187))
      {
        v154 = *(_OWORD *)v184;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v186, (uint64_t)v188, v187 + 1, 16);
        v36 = v154;
        v37 = v187;
      }
      *(_OWORD *)&v186[2 * v37] = v36;
      LODWORD(v187) = v187 + 1;
      v38 = v28 != 1 || v29 == 1;
    }
    while (v38 && v16 > v31);
    v25 = v156;
  }
  v41 = v25;
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(_QWORD *)(a3 + 96);
  v169 = *(_OWORD *)v43;
  v170 = *(_QWORD *)(v43 + 16);
  v44 = v159;
  v27 = sub_1C63681B0(v42, v171, *((uint64_t *)&v171 + 1), (uint64_t)&v175, v159, v161, v174, *((uint64_t *)&v174 + 1), &v169, *(unsigned __int8 *)(v43 + 34) | 0x100u, (*(unsigned __int8 *)(v43 + 34) | 0x100uLL) >> 32, v160, (uint64_t)v173, 0);
  v46 = v45;
  v47 = a2;
  v48 = *(unsigned int *)(a2 + 8);
  if (v48 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v48 + 1, 16);
    LODWORD(v48) = *(_DWORD *)(a2 + 8);
  }
  v49 = (_QWORD *)(*(_QWORD *)a2 + 16 * v48);
  *v49 = v27;
  v49[1] = 1;
  ++*(_DWORD *)(a2 + 8);
  if ((_DWORD)v187)
  {
    *(_QWORD *)v184 = &v184[16];
    *(_QWORD *)&v184[16] = v27;
    v185 = v46;
    *(_QWORD *)&v184[8] = 0x1000000001;
    v71 = *(_QWORD *)(a3 + 96);
    v166 = *(_OWORD *)v71;
    v167 = *(_QWORD *)(v71 + 16);
    v168 = 0;
    sub_1C63519B4(a1, (uint64_t)v27, v171, *((uint64_t *)&v171 + 1), (uint64_t)&v166, (uint64_t)&v174, &v168);
    if ((_DWORD)v187)
    {
      v72 = v186;
      v157 = &v186[2 * v187];
      do
      {
        v73 = *(_QWORD *)(a3 + 96);
        v74 = *(_BYTE *)(v73 + 34);
        if (v168)
        {
          v75 = (1 << (63
                       - __clz(((1 << v74) | *(_QWORD *)(v73 + 8)) & -((1 << v74) | *(_QWORD *)(v73 + 8))))) | v168;
          v74 = 63 - __clz(v75 & -v75);
        }
        v76 = *v72;
        v77 = v72[1];
        v78 = *(_QWORD *)(a1 + 8);
        v164 = v166;
        v165 = v167;
        v47 = v47 & 0xFFFFFFFFFFFF0000 | v74 | 0x100;
        v79 = sub_1C63681B0(v78, v76, v77, (uint64_t)&v175, v44, v161, v174, *((uint64_t *)&v174 + 1), &v164, v47, SHIDWORD(v47), v160, (uint64_t)v173, 0);
        v81 = v80;
        v82 = *(unsigned int *)&v184[8];
        if (*(unsigned int *)&v184[8] >= (unint64_t)*(unsigned int *)&v184[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v184, (uint64_t)&v184[16], *(unsigned int *)&v184[8] + 1, 16);
          v82 = *(unsigned int *)&v184[8];
        }
        v83 = (_QWORD *)(*(_QWORD *)v184 + 16 * v82);
        *v83 = v79;
        v83[1] = v81;
        ++*(_DWORD *)&v184[8];
        v84 = *(unsigned int *)(a2 + 8);
        if (v84 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v84 + 1, 16);
          v84 = *(unsigned int *)(a2 + 8);
        }
        v44 = v159;
        v85 = (_QWORD *)(*(_QWORD *)a2 + 16 * v84);
        *v85 = v79;
        v85[1] = 1;
        ++*(_DWORD *)(a2 + 8);
        sub_1C63519B4(a1, (uint64_t)v79, v76, v77, (uint64_t)&v166, (uint64_t)&v174, &v168);
        v72 += 2;
      }
      while (v72 != v157);
    }
    v86 = *(_DWORD *)&v184[8];
    v87 = (unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)v184 + 40) + 16 * *(unsigned int *)(*(_QWORD *)v184 + 8));
    if (*v87)
    {
      if (*v87 - 15 < 0x9C)
        goto LABEL_89;
    }
    else if ((*(_DWORD *)(*((_QWORD *)v87 + 1) + 8) & 0xFE) == 0x12)
    {
LABEL_89:
      v182[0] = &v183;
      v182[1] = (void *)0x1000000000;
      sub_1C4825C80((unsigned int *)v182, *(unsigned int *)&v184[8], 0, 0);
      v88 = (v86 - 1);
      v89 = (int)v88;
      v90 = *(_QWORD *)v184;
      v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v184 + 16 * (int)v88) + 40)
          + 16 * *(unsigned int *)(*(_QWORD *)v184 + 16 * (int)v88 + 8);
      v92 = *(llvm **)v91;
      v93 = *(_QWORD *)(v91 + 8);
      *(_QWORD *)&v163 = v92;
      *((_QWORD *)&v163 + 1) = v93;
      if ((_BYTE)v92)
      {
        v94 = v86 - 1;
        v95 = (int)v88;
        LODWORD(v96) = v86 - 1;
        if (v92 - 15 < 0x9C)
          goto LABEL_109;
      }
      else
      {
        v94 = v86 - 1;
        v95 = (int)v88;
        LODWORD(v96) = v86 - 1;
        if ((*(_DWORD *)(v93 + 8) & 0xFE) == 0x12)
        {
LABEL_109:
          v104 = (uint64_t *)(v90 + 16 * v95);
          v105 = *v104;
          v106 = (char *)v182[0] + 16 * v89;
          *((_DWORD *)v106 + 2) = *((_DWORD *)v104 + 2);
          *(_QWORD *)v106 = v105;
          if ((int)v96 >= 1)
          {
            v107 = v96;
            do
            {
              v108 = *(_QWORD *)v184;
              v109 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v184 + 16 * (v107 - 1)) + 40)
                              + 16 * *(unsigned int *)(*(_QWORD *)v184 + 16 * (v107 - 1) + 8));
              v110 = v109[1];
              *(_QWORD *)&v162 = *v109;
              *((_QWORD *)&v162 + 1) = v110;
              v111 = v162;
              if (v162 != v163
                || (!(_BYTE)v162 ? (v112 = v110 == *((_QWORD *)&v163 + 1)) : (v112 = 1), !v112))
              {
                if ((_BYTE)v163)
                {
                  v113 = sub_1C47A8C74((unsigned __int8 *)&v163);
                  v111 = v162;
                }
                else
                {
                  v113 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v163);
                }
                if (v111)
                  v114 = sub_1C47A8C74((unsigned __int8 *)&v162);
                else
                  v114 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v162);
                v115 = v114 / v113;
                v179 = v181;
                v180 = 0x1000000000;
                sub_1C4825C80((unsigned int *)&v179, v115, 0, 0);
                v116 = v86 - v94;
                if (v86 != v94)
                {
                  v117 = 0;
                  v118 = v86 - v94;
                  do
                  {
                    v119 = (char *)v182[0] + 16 * v94;
                    v120 = (char *)v179 + v117;
                    v121 = *(_QWORD *)v119;
                    *((_DWORD *)v120 + 2) = *((_DWORD *)v119 + 2);
                    *(_QWORD *)v120 = v121;
                    v117 += 16;
                    ++v94;
                    --v118;
                  }
                  while (v118);
                }
                for (; (_DWORD)v115 != v116; ++v116)
                {
                  v122 = sub_1C61312D0(*(_QWORD *)(a1 + 8), (llvm *)v163, *((uint64_t *)&v163 + 1));
                  v123 = (char *)v179 + 16 * v116;
                  *(_QWORD *)v123 = v122;
                  *((_DWORD *)v123 + 2) = v124;
                }
                v125 = *(_QWORD *)(a1 + 8);
                v126 = *(_QWORD *)(v125 + 832);
                if (v126)
                  v127 = *(unsigned __int16 *)(v126 + 8);
                else
                  v127 = 0;
                v128 = sub_1C636D0C8(v125, (const char *)0x95, (const llvm::APInt *)&v175, (llvm *)v162, *((uint64_t *)&v162 + 1), (uint64_t *)v179, v180, v127);
                v129 = (char *)v182[0] + 16 * v88;
                *(_QWORD *)v129 = v128;
                *((_DWORD *)v129 + 2) = v130;
                v163 = v162;
                if (v179 != v181)
                  free(v179);
                v108 = *(_QWORD *)v184;
                v94 = v86 - 1;
              }
              v131 = (uint64_t *)(v108 + 16 * (v107 - 1));
              --v94;
              v132 = *v131;
              v133 = (char *)v182[0] + 16 * (int)v94;
              *((_DWORD *)v133 + 2) = *((_DWORD *)v131 + 2);
              *(_QWORD *)v133 = v132;
              v100 = v107-- <= 1;
            }
            while (!v100);
          }
          if ((_BYTE)v163)
            v134 = sub_1C47A8C74((unsigned __int8 *)&v163);
          else
            v134 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v163);
          v136 = v86 - v94;
          if (v158 == v134 * v136 && v155 == v135)
          {
            v138 = *(_QWORD *)(a1 + 8);
            v139 = *(_QWORD *)(v138 + 832);
            if (v139)
              v140 = *(unsigned __int16 *)(v139 + 8);
            else
              v140 = 0;
            v27 = sub_1C636D0C8(v138, (const char *)0x95, (const llvm::APInt *)&v175, (llvm *)v178, *((uint64_t *)&v178 + 1), (uint64_t *)v182[0] + 2 * (int)v94, v86 - v94, v140);
          }
          else
          {
            if ((_BYTE)v163)
              v141 = sub_1C47A8C74((unsigned __int8 *)&v163);
            else
              v141 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v163);
            v142 = v158 / v141;
            v179 = v181;
            v180 = 0x1000000000;
            sub_1C4825C80((unsigned int *)&v179, (v158 / v141), 0, 0);
            v143 = sub_1C61312D0(*(_QWORD *)(a1 + 8), (llvm *)v163, *((uint64_t *)&v163 + 1));
            if (v86 == v94)
            {
              LODWORD(v136) = 0;
            }
            else
            {
              v145 = 0;
              v146 = v86 - v94;
              do
              {
                v147 = (char *)v182[0] + 16 * v94;
                v148 = (char *)v179 + v145;
                v149 = *(_QWORD *)v147;
                *((_DWORD *)v148 + 2) = *((_DWORD *)v147 + 2);
                *(_QWORD *)v148 = v149;
                v145 += 16;
                ++v94;
                --v146;
              }
              while (v146);
            }
            for (; (_DWORD)v142 != (_DWORD)v136; LODWORD(v136) = v136 + 1)
            {
              v150 = (char *)v179 + 16 * v136;
              *(_QWORD *)v150 = v143;
              *((_DWORD *)v150 + 2) = v144;
            }
            v151 = *(_QWORD *)(a1 + 8);
            v152 = *(_QWORD *)(v151 + 832);
            if (v152)
              v153 = *(unsigned __int16 *)(v152 + 8);
            else
              v153 = 0;
            v27 = sub_1C636D0C8(v151, (const char *)0x95, (const llvm::APInt *)&v175, (llvm *)v178, *((uint64_t *)&v178 + 1), (uint64_t *)v179, v180, v153);
            if (v179 != v181)
              free(v179);
          }
          if (v182[0] != &v183)
            free(v182[0]);
LABEL_149:
          v97 = *(void **)v184;
          if (*(_BYTE **)v184 == &v184[16])
            goto LABEL_47;
          goto LABEL_150;
        }
      }
      v94 = v86 - 2;
      if (v86 - 2 < 0)
      {
        LODWORD(v96) = v86 - 2;
      }
      else
      {
        v98 = (unsigned int *)(*(_QWORD *)v184 + 16 * v94 + 8);
        v96 = (v86 - 2);
        do
        {
          v99 = *(_QWORD *)(*((_QWORD *)v98 - 1) + 40) + 16 * *v98;
          v92 = *(llvm **)v99;
          v93 = *(_QWORD *)(v99 + 8);
          *(_QWORD *)&v163 = v92;
          *((_QWORD *)&v163 + 1) = v93;
          if ((_BYTE)v92)
          {
            if (v92 - 15 < 0x9C)
              goto LABEL_108;
          }
          else if ((*(_DWORD *)(v93 + 8) & 0xFE) == 0x12)
          {
            goto LABEL_108;
          }
          v98 -= 4;
          v100 = v96-- <= 0;
        }
        while (!v100);
        LODWORD(v96) = -1;
      }
LABEL_108:
      v101 = sub_1C5D022F4(*(_QWORD *)(a1 + 8), v92, v93, v184, (int)v96 + 1, v86);
      v102 = (char *)v182[0] + 16 * (int)v88;
      *(_QWORD *)v102 = v101;
      *((_DWORD *)v102 + 2) = v103;
      v90 = *(_QWORD *)v184;
      v95 = (int)v96;
      v89 = (int)v94;
      goto LABEL_109;
    }
    v27 = sub_1C5D022F4(*(_QWORD *)(a1 + 8), (llvm *)v178, *((uint64_t *)&v178 + 1), v184, 0, *(int *)&v184[8]);
    goto LABEL_149;
  }
  if (!(_BYTE)v171)
  {
    v50 = *((_QWORD *)&v171 + 1);
    if ((*(_DWORD *)(*((_QWORD *)&v171 + 1) + 8) & 0xFE) != 0x12)
      goto LABEL_71;
    goto LABEL_62;
  }
  if (v171 - 15 < 0x9C)
  {
LABEL_62:
    if ((_BYTE)v172
      && v171 == v178
      && ((_BYTE)v171 || *((_QWORD *)&v171 + 1) == *((_QWORD *)&v178 + 1)))
    {
      goto LABEL_47;
    }
    v51 = v158 / v41;
    *(_QWORD *)v184 = &v184[16];
    *(_QWORD *)&v184[8] = 0x1000000000;
    sub_1C4825C80((unsigned int *)v184, v51, 0, 0);
    v52 = sub_1C61312D0(*(_QWORD *)(a1 + 8), (llvm *)v171, *((uint64_t *)&v171 + 1));
    v54 = *(_QWORD *)v184;
    **(_QWORD **)v184 = v27;
    *(_DWORD *)(v54 + 8) = v46;
    v55 = v51 - 1;
    if ((_DWORD)v51 != 1)
    {
      v56 = 0;
      do
      {
        v57 = *(_QWORD *)v184 + v56;
        *(_QWORD *)(v57 + 16) = v52;
        *(_DWORD *)(v57 + 24) = v53;
        v56 += 16;
        --v55;
      }
      while (v55);
    }
    v58 = *(_QWORD *)(a1 + 8);
    v59 = *(_QWORD *)(v58 + 832);
    v60 = v59 ? *(unsigned __int16 *)(v59 + 8) : 0;
    v27 = sub_1C636D0C8(v58, (const char *)0x95, (const llvm::APInt *)&v175, (llvm *)v178, *((uint64_t *)&v178 + 1), *(uint64_t **)v184, *(unsigned int *)&v184[8], v60);
    v97 = *(void **)v184;
    if (*(_BYTE **)v184 == &v184[16])
      goto LABEL_47;
LABEL_150:
    free(v97);
    goto LABEL_47;
  }
  v50 = *((_QWORD *)&v171 + 1);
LABEL_71:
  v62 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56), v171, v50, v158 / v41, 0);
  v63 = *(_QWORD *)(a1 + 8);
  v64 = *(_QWORD *)(v63 + 832);
  if (v64)
    v65 = *(_WORD *)(v64 + 8);
  else
    v65 = 0;
  v67 = sub_1C5D52060(v63, 155, (const llvm::APInt *)&v175, v62, v61, (uint64_t)v27, v46, v65);
  v68 = *(_QWORD *)(a1 + 8);
  v69 = *(_QWORD *)(v68 + 832);
  if (v69)
    v70 = *(_WORD *)(v69 + 8);
  else
    v70 = 0;
  v27 = sub_1C5D52060(v68, 216, (const llvm::APInt *)&v175, (llvm *)v178, *((uint64_t *)&v178 + 1), (uint64_t)v67, v66, v70);
LABEL_47:
  if (v186 != v188)
    free(v186);
LABEL_49:
  if (v175)
    llvm::MetadataTracking::untrack((uint64_t)&v175, v175);
  return v27;
}

uint64_t *sub_1C5CFEFA8(uint64_t a1, uint64_t a2, unint64_t a3, llvm *a4, uint64_t a5, int a6)
{
  uint64_t *v8;
  __int128 v10;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  uint64_t v15;
  const char *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unint64_t EVT;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  llvm *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  llvm *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  int v67;
  __int128 v68;
  llvm *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[34];

  v8 = (uint64_t *)a2;
  v73[32] = *MEMORY[0x1E0C80C00];
  v69 = a4;
  v70 = a5;
  v10 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v68 = v10;
  v11 = *(unsigned __int8 **)(a2 + 64);
  v66 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)&v66, v11, 2);
    LOBYTE(a4) = (_BYTE)v69;
    v12 = v68;
  }
  else
  {
    v12 = v10;
  }
  v67 = *((_DWORD *)v8 + 15);
  if (v12 == a4 && (v12 || *((_QWORD *)&v68 + 1) == v70))
    goto LABEL_10;
  LODWORD(v15) = sub_1C612FE00((llvm::EVT *)&v68, (const char *)v11);
  v17 = sub_1C612FE00((llvm::EVT *)&v69, v16);
  v18 = v17;
  if (v17 <= v15 || (v19 = v17 / v15, v17 % v15))
  {
    if (v17 < v15 && v15 % v17)
    {
      v49 = *(_QWORD *)(a1 + 8);
      v50 = v69;
      v51 = v70;
      v52 = sub_1C6366C9C(v49, 0, (uint64_t)&v66, 0);
      v55 = *(_QWORD *)(v49 + 832);
      if (v55)
        LOWORD(v55) = *(_WORD *)(v55 + 8);
      v8 = sub_1C5D56C70(v49, 151, (const llvm::APInt *)&v66, v50, v51, (uint64_t)v8, a3, v54, v52, v53, v55);
    }
    else
    {
      v71 = v73;
      v72 = 0x1000000000;
      v63 = v17;
      sub_1C4825C80((unsigned int *)&v71, v17, 0, 0);
      if ((_BYTE)v69)
      {
        LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v69);
        v27 = 0;
        v26 = 0;
      }
      else
      {
        EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v70 + 24), 0, v23);
        v26 = v25;
        v27 = EVT & 0xFFFFFFFFFFFFFF00;
      }
      v28 = (llvm *)(v27 | EVT);
      v64 = v18;
      v65 = v15;
      if (v18 >= v15)
        v15 = v15;
      else
        v15 = v18;
      if ((_DWORD)v15)
      {
        v29 = 0;
        for (i = 0; i != v15; ++i)
        {
          v31 = *(_QWORD *)(a1 + 8);
          v32 = sub_1C6366C9C(v31, i, (uint64_t)&v66, 0);
          v35 = *(_QWORD *)(v31 + 832);
          if (v35)
            LOWORD(v35) = *(_WORD *)(v35 + 8);
          v36 = sub_1C5D56C70(v31, 148, (const llvm::APInt *)&v66, v28, v26, (uint64_t)v8, a3, v34, v32, v33, v35);
          v37 = (char *)v71 + v29;
          *(_QWORD *)v37 = v36;
          *((_DWORD *)v37 + 2) = v38;
          v29 += 16;
        }
      }
      v39 = *(_QWORD *)(a1 + 8);
      if (a6)
        v40 = sub_1C6366AB4(v39, 0, (const llvm::APInt *)&v66, v28, v26, 0, 0);
      else
        v40 = sub_1C61312D0(v39, v28, v26);
      if (v64 > v65)
      {
        v42 = 16 * v15;
        v43 = v63 - v15;
        do
        {
          v44 = (char *)v71 + v42;
          *(_QWORD *)v44 = v40;
          *((_DWORD *)v44 + 2) = v41;
          v42 += 16;
          --v43;
        }
        while (v43);
      }
      v45 = *(_QWORD *)(a1 + 8);
      v46 = *(_QWORD *)(v45 + 832);
      if (v46)
        v47 = *(unsigned __int16 *)(v46 + 8);
      else
        v47 = 0;
      v8 = sub_1C636D0C8(v45, (const char *)0x92, (const llvm::APInt *)&v66, v69, v70, (uint64_t *)v71, v72, v47);
      v48 = v71;
      if (v71 != v73)
        goto LABEL_52;
    }
  }
  else
  {
    v71 = v73;
    v72 = 0x1000000000;
    sub_1C4825C80((unsigned int *)&v71, v19, 0, 0);
    v20 = *(_QWORD *)(a1 + 8);
    if (a6)
      v21 = sub_1C6366AB4(v20, 0, (const llvm::APInt *)&v66, (llvm *)v68, *((uint64_t *)&v68 + 1), 0, 0);
    else
      v21 = sub_1C61312D0(v20, (llvm *)v68, *((uint64_t *)&v68 + 1));
    v56 = v71;
    *(_QWORD *)v71 = v8;
    v56[2] = a3;
    v57 = v19 - 1;
    if ((_DWORD)v19 != 1)
    {
      v58 = 0;
      do
      {
        v59 = (char *)v71 + v58;
        *((_QWORD *)v59 + 2) = v21;
        *((_DWORD *)v59 + 6) = v22;
        v58 += 16;
        --v57;
      }
      while (v57);
    }
    v60 = *(_QWORD *)(a1 + 8);
    v61 = *(_QWORD *)(v60 + 832);
    if (v61)
      v62 = *(unsigned __int16 *)(v61 + 8);
    else
      v62 = 0;
    v8 = sub_1C636D0C8(v60, (const char *)0x95, (const llvm::APInt *)&v66, v69, v70, (uint64_t *)v71, v72, v62);
    v48 = v71;
    if (v71 != v73)
LABEL_52:
      free(v48);
  }
LABEL_10:
  if (v66)
    llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
  return v8;
}

uint64_t *sub_1C5CFF3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm *a6, uint64_t a7)
{
  BOOL v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  __n128 v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  llvm::LLVMContext *v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  const char *v33;
  BOOL v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t EVT;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  llvm *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  const char *v73;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  unsigned __int8 *v84;
  int v85;
  llvm *v86;
  uint64_t v87;
  __int128 v88;
  void *v89[2];
  char v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _QWORD v94[9];

  v94[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v88 = a4;
  *((_QWORD *)&v88 + 1) = a5;
  v86 = a6;
  v87 = a7;
  v92 = v94;
  v93 = 0x400000000;
  if (*(_WORD *)(a2 + 56))
  {
    v19 = 0;
    v20 = 0;
    v21 = 40 * *(unsigned __int16 *)(a2 + 56);
    do
    {
      v22 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + v19);
      if (v20 >= HIDWORD(v93))
      {
        v83 = *(_OWORD *)(*(_QWORD *)(a2 + 32) + v19);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v20 + 1, 16);
        v22 = v83;
        v20 = v93;
      }
      *(_OWORD *)&v92[2 * v20] = v22;
      v20 = v93 + 1;
      LODWORD(v93) = v93 + 1;
      v19 += 40;
    }
    while (v21 != v19);
  }
  v9 = sub_1C6141934(a2);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (const char *)*(unsigned __int16 *)(a2 + 24);
  if (v9)
  {
    v12 = *(unsigned __int8 **)(a2 + 64);
    v84 = v12;
    if (v12)
      llvm::MetadataTracking::track((uint64_t)&v84, v12, 2);
    v85 = *(_DWORD *)(a2 + 60);
    *(_OWORD *)v89 = v88;
    v90 = 1;
    v91 = 0;
    v13 = sub_1C6366344(v10, v11, (const llvm::APInt *)&v84, (uint64_t *)v89, 2, v92, v93);
    v16 = v15;
    if (v84)
      llvm::MetadataTracking::untrack((uint64_t)&v84, v84);
    sub_1C5CED824(a1, a2, 1, (uint64_t)v13, 1uLL, v14);
  }
  else
  {
    v23 = *(void **)(a2 + 64);
    v89[0] = v23;
    if (v23)
      llvm::MetadataTracking::track((uint64_t)v89, (unsigned __int8 *)v23, 2);
    LODWORD(v89[1]) = *(_DWORD *)(a2 + 60);
    v24 = *(_QWORD *)(v10 + 832);
    if (v24)
      v25 = *(unsigned __int16 *)(v24 + 8);
    else
      v25 = 0;
    v13 = sub_1C636D0C8(v10, v11, (const llvm::APInt *)v89, (llvm *)v88, *((uint64_t *)&v88 + 1), v92, v93, v25);
    v16 = v26;
    v17 = v89[0];
    if (v89[0])
      llvm::MetadataTracking::untrack((uint64_t)v89, (unsigned __int8 *)v89[0]);
  }
  v27 = v16;
  v28 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56);
  v29 = sub_1C6131328((unsigned __int8 *)&v88, (uint64_t)v17, v18);
  v32 = sub_1C6131328((unsigned __int8 *)&v86, v30, v31);
  if (v29 >= v32)
  {
    if (v29 <= v32)
      goto LABEL_42;
    if ((_BYTE)v86)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v86);
      v42 = 0;
      v41 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v87 + 24), 0, v34);
      v41 = (uint64_t)v40;
      v42 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    v54 = v42 | EVT;
    v55 = sub_1C612FE00((llvm::EVT *)&v88, v40);
    v45 = (llvm *)sub_1C4816F98(v28, v54, v41, v55, 0);
    v47 = v56;
    v57 = *(_QWORD *)(a1 + 8);
    v58 = (void *)v13[8];
    v89[0] = v58;
    if (v58)
      llvm::MetadataTracking::track((uint64_t)v89, (unsigned __int8 *)v58, 2);
    LODWORD(v89[1]) = *((_DWORD *)v13 + 15);
    v59 = *(_QWORD *)(v57 + 832);
    if (v59)
      v51 = *(_WORD *)(v59 + 8);
    else
      v51 = 0;
    v52 = v57;
    v53 = 201;
  }
  else
  {
    if ((_BYTE)v86)
    {
      LOBYTE(v35) = sub_1C47F37A0((unsigned __int8 *)&v86);
      v38 = 0;
      v37 = 0;
    }
    else
    {
      v35 = llvm::EVT::getEVT(*(llvm::EVT **)(v87 + 24), 0, v34);
      v37 = (uint64_t)v36;
      v38 = v35 & 0xFFFFFFFFFFFFFF00;
    }
    v43 = v38 | v35;
    v44 = sub_1C612FE00((llvm::EVT *)&v88, v36);
    v45 = (llvm *)sub_1C4816F98(v28, v43, v37, v44, 0);
    v47 = v46;
    v48 = *(_QWORD *)(a1 + 8);
    v49 = (void *)v13[8];
    v89[0] = v49;
    if (v49)
      llvm::MetadataTracking::track((uint64_t)v89, (unsigned __int8 *)v49, 2);
    LODWORD(v89[1]) = *((_DWORD *)v13 + 15);
    v50 = *(_QWORD *)(v48 + 832);
    if (v50)
      v51 = *(_WORD *)(v50 + 8);
    else
      v51 = 0;
    v52 = v48;
    v53 = 198;
  }
  v13 = sub_1C5D52060(v52, v53, (const llvm::APInt *)v89, v45, v47, (uint64_t)v13, v27, v51);
  v27 = v60;
  v33 = (const char *)v89[0];
  if (v89[0])
    llvm::MetadataTracking::untrack((uint64_t)v89, (unsigned __int8 *)v89[0]);
LABEL_42:
  *(_OWORD *)v89 = *(_OWORD *)v13[5];
  v61 = sub_1C612FE00((llvm::EVT *)v89, v33);
  if (v61 <= sub_1C612FE00((llvm::EVT *)&v86, v62))
  {
    if (v61 < sub_1C612FE00((llvm::EVT *)&v86, v63))
    {
      v75 = sub_1C612FE00((llvm::EVT *)&v86, v73) / v61;
      v76 = sub_1C61312D0(*(_QWORD *)(a1 + 8), *(llvm **)v13[5], *(_QWORD *)(v13[5] + 8));
      v89[0] = &v90;
      v89[1] = (void *)0x1000000000;
      sub_1C4825C80((unsigned int *)v89, v75, (uint64_t)v76, v77);
      v78 = v89[0];
      *(_QWORD *)v89[0] = v13;
      v78[2] = v27;
      v79 = *(_QWORD *)(a1 + 8);
      v80 = (unsigned __int8 *)v13[8];
      v84 = v80;
      if (v80)
        llvm::MetadataTracking::track((uint64_t)&v84, v80, 2);
      v85 = *((_DWORD *)v13 + 15);
      v81 = *(_QWORD *)(v79 + 832);
      if (v81)
        v82 = *(unsigned __int16 *)(v81 + 8);
      else
        v82 = 0;
      v13 = sub_1C636D0C8(v79, (const char *)0x95, (const llvm::APInt *)&v84, v86, v87, (uint64_t *)v89[0], LODWORD(v89[1]), v82);
      if (v84)
        llvm::MetadataTracking::untrack((uint64_t)&v84, v84);
      if (v89[0] != &v90)
        free(v89[0]);
    }
  }
  else
  {
    v64 = *(_QWORD *)(a1 + 8);
    v65 = (void *)v13[8];
    v89[0] = v65;
    if (v65)
      llvm::MetadataTracking::track((uint64_t)v89, (unsigned __int8 *)v65, 2);
    LODWORD(v89[1]) = *((_DWORD *)v13 + 15);
    v67 = sub_1C6366C9C(v64, 0, (uint64_t)v89, 0);
    v69 = v68;
    if (v89[0])
      llvm::MetadataTracking::untrack((uint64_t)v89, (unsigned __int8 *)v89[0]);
    v70 = *(_QWORD *)(a1 + 8);
    v71 = (void *)v13[8];
    v89[0] = v71;
    if (v71)
      llvm::MetadataTracking::track((uint64_t)v89, (unsigned __int8 *)v71, 2);
    LODWORD(v89[1]) = *((_DWORD *)v13 + 15);
    v72 = *(_QWORD *)(v70 + 832);
    if (v72)
      LOWORD(v72) = *(_WORD *)(v72 + 8);
    v13 = sub_1C5D56C70(v70, 151, (const llvm::APInt *)v89, v86, v87, (uint64_t)v13, v27, v66, v67, v69, v72);
    if (v89[0])
      llvm::MetadataTracking::untrack((uint64_t)v89, (unsigned __int8 *)v89[0]);
  }
  if (v92 != v94)
    free(v92);
  return v13;
}

uint64_t *sub_1C5CFF95C(unint64_t *a1, uint64_t a2, BOOL a3)
{
  llvm::LLVMContext *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ExtendedSizeInBits;
  const char *v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm *v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t *v81;
  unsigned int v82;
  unint64_t v83;
  llvm *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  __int128 *v96;
  uint64_t v97;
  BOOL v98;
  uint64_t *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];

  if (*(_WORD *)(a2 + 24) != 191)
    return 0;
  v5 = *(llvm::LLVMContext **)(a1[1] + 56);
  v6 = *(uint64_t **)(a2 + 32);
  v8 = *v6;
  v7 = v6[1];
  v9 = *(unsigned __int16 *)(*v6 + 24);
  v10 = (v9 - 138) > 0x37 || ((1 << (v9 + 118)) & 0x80000000000003) == 0;
  if (v10 && (v9 - 171) > 2)
    return 0;
  v109 = *(_OWORD *)*(_QWORD *)(v8 + 40);
  if (sub_1C6131328((unsigned __int8 *)&v109, a2, a3) != (llvm::Type *)1)
    return 0;
  v12 = *(uint64_t **)(a2 + 40);
  v14 = *v12;
  v13 = v12[1];
  *(_QWORD *)&v108 = v14;
  *((_QWORD *)&v108 + 1) = v13;
  if ((_BYTE)v14)
  {
    if (v14 - 120 < 0x33)
      return 0;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v108);
  }
  else
  {
    if (*(_BYTE *)(v13 + 8) == 19)
      return 0;
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v108);
  }
  v17 = (int8x8_t)ExtendedSizeInBits;
  if ((_DWORD)v16 == 1)
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] != 1)
    return 0;
  v107 = v108;
  v20 = *((_QWORD *)&v108 + 1);
  v19 = v108;
  while (1)
  {
    llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::EVT **)(a1[1] + 56), v19, v20, (uint64_t)v110);
    if (LOBYTE(v110[0]) != 6)
      break;
    v19 = sub_1C52B7018((uint64_t)&v107, v5, v22);
    v20 = v23;
    *(_QWORD *)&v107 = v19;
    *((_QWORD *)&v107 + 1) = v23;
  }
  if (sub_1C612FE00((llvm::EVT *)&v107, v21) == 1)
    return 0;
  if (*(unsigned __int16 *)(v8 + 24) - 138 <= 0x37
    && ((1 << (*(_WORD *)(v8 + 24) + 118)) & 0x80000000000003) != 0)
  {
    v27 = (unsigned int *)(*(_QWORD *)(v8 + 32) + 40 * sub_1C6141934(v8));
    v28 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v27 + 40) + 16 * v27[2]);
    v29 = *v28;
    for (i = v28[1]; ; i = *(_QWORD *)&v110[1])
    {
      llvm::TargetLoweringBase::getTypeConversion(*a1, v5, v29, i, (uint64_t)v110);
      if (!LOBYTE(v110[0]))
        break;
      llvm::TargetLoweringBase::getTypeConversion(*a1, v5, v29, i, (uint64_t)v110);
      v29 = *((_QWORD *)&v110[0] + 1);
    }
    *(_QWORD *)&v110[0] = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 400))(*a1, *(_QWORD *)(**(_QWORD **)(a1[1] + 40) + 40) + 272, *(_QWORD *)(a1[1] + 56), v29, i);
    *((_QWORD *)&v110[0] + 1) = v31;
    if (sub_1C6131328((unsigned __int8 *)v110, v31, v32) != (llvm::Type *)1)
      goto LABEL_37;
    return 0;
  }
  if (sub_1C6131264((unsigned __int8 *)&v109, v24, v25) == 2)
  {
    v34 = *((_QWORD *)&v109 + 1);
    v33 = v109;
    while (1)
    {
      llvm::TargetLoweringBase::getTypeConversion(*a1, v5, v33, v34, (uint64_t)v110);
      if (!LOBYTE(v110[0]))
        break;
      llvm::TargetLoweringBase::getTypeConversion(*a1, v5, v109, *((uint64_t *)&v109 + 1), (uint64_t)v110);
      v33 = *((_QWORD *)&v110[0] + 1);
      v34 = *(_QWORD *)&v110[1];
      v109 = *(_OWORD *)((char *)v110 + 8);
    }
    if (sub_1C6131264((unsigned __int8 *)&v109, v35, v36) == 2)
      return 0;
  }
LABEL_37:
  llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::EVT **)(a1[1] + 56), v108, *((uint64_t *)&v108 + 1), (uint64_t)v110);
  if (LOBYTE(v110[0]) == 7)
  {
    llvm::TargetLoweringBase::getTypeConversion(*a1, v5, v108, *((uint64_t *)&v108 + 1), (uint64_t)v110);
    v108 = *(_OWORD *)((char *)v110 + 8);
  }
  v110[0] = v108;
  v41 = sub_1C6131264((unsigned __int8 *)v110, v37, v38);
  if (v41)
  {
    if ((v41 - 120) >= 0x20 && (v41 - 2) >= 6 && (v41 - 15) >= 0x3C)
    {
LABEL_43:
      *(_QWORD *)&v110[0] = sub_1C612EE78((llvm::EVT *)v110, v39, v40);
      *((_QWORD *)&v110[0] + 1) = v42;
    }
  }
  else
  {
    if ((*(_DWORD *)(v39 + 8) & 0xFE) == 0x12)
      v43 = *(unsigned __int8 *)(**(_QWORD **)(v39 + 16) + 8);
    else
      v43 = *(_DWORD *)(v39 + 8);
    if (v43 != 13)
      goto LABEL_43;
  }
  v44 = *(unsigned __int16 *)(v8 + 24);
  if ((v44 - 138) <= 0x37 && ((1 << (v44 + 118)) & 0x80000000000003) != 0)
  {
    v91 = (unsigned int *)(*(_QWORD *)(v8 + 32) + 40 * sub_1C6141934(v8));
    v92 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v91 + 40) + 16 * v91[2]);
    v89 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 400))(*a1, *(_QWORD *)(**(_QWORD **)(a1[1] + 40) + 40) + 272, *(_QWORD *)(a1[1] + 56), *v92, v92[1]);
    v90 = v93;
    v85 = *((_QWORD *)&v110[0] + 1);
    v84 = *(llvm **)&v110[0];
    v86 = (uint64_t)a1;
    v87 = v8;
    v88 = v7;
    return sub_1C5CFF3BC(v86, v87, v88, v89, v90, v84, v85);
  }
  if ((v44 - 171) >= 3)
    return 0;
  v45 = *(uint64_t **)(v8 + 32);
  v46 = *v45;
  if (*(unsigned __int16 *)(*v45 + 24) - 138 > 0x37
    || ((1 << (*(_WORD *)(*v45 + 24) + 118)) & 0x80000000000003) == 0)
  {
    return 0;
  }
  v48 = v45[5];
  if (*(unsigned __int16 *)(v48 + 24) - 138 > 0x37)
    return 0;
  result = 0;
  if (((1 << (*(_WORD *)(v48 + 24) + 118)) & 0x80000000000003) != 0)
  {
    v49 = v45[1];
    v100 = v45[6];
    v50 = (unsigned int *)(*(_QWORD *)(v46 + 32) + 40 * sub_1C6141934(v46));
    v51 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v50 + 40) + 16 * v50[2]);
    v105 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 400))(*a1, *(_QWORD *)(**(_QWORD **)(a1[1] + 40) + 40) + 272, *(_QWORD *)(a1[1] + 56), *v51, v51[1]);
    v106 = v52;
    v53 = (unsigned int *)(*(_QWORD *)(v48 + 32) + 40 * sub_1C6141934(v48));
    v54 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 40) + 16 * v53[2]);
    v103 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 400))(*a1, *(_QWORD *)(**(_QWORD **)(a1[1] + 40) + 40) + 272, *(_QWORD *)(a1[1] + 56), *v54, v54[1]);
    v104 = v55;
    v56 = &v105;
    v58 = sub_1C6131328((unsigned __int8 *)&v105, v55, v57);
    v61 = sub_1C6131328((unsigned __int8 *)&v103, v59, v60);
    v64 = sub_1C6131328((unsigned __int8 *)v110, v62, v63);
    if (v58 == v61)
    {
      v67 = v105;
      v68 = v106;
      v69 = v106;
      v70 = (llvm *)v105;
    }
    else
    {
      if (v58 >= v61)
        v94 = &v103;
      else
        v94 = &v105;
      v102 = *(_OWORD *)v94;
      if (v102 == v105)
      {
        v56 = &v103;
        if (!(_BYTE)v102 && *((_QWORD *)&v102 + 1) != v106)
          v56 = &v105;
      }
      v101 = *(_OWORD *)v56;
      v95 = v64;
      v96 = &v101;
      if (v64 < (unint64_t)sub_1C6131328((unsigned __int8 *)&v101, v65, v66))
      {
        v96 = &v102;
        if (v95 > (unint64_t)sub_1C6131328((unsigned __int8 *)&v102, v97, v98))
          v96 = v110;
      }
      v70 = *(llvm **)v96;
      v68 = *((_QWORD *)v96 + 1);
      v67 = v105;
      v69 = v106;
    }
    v99 = sub_1C5CFF3BC((uint64_t)a1, v46, v49, v67, v69, v70, v68);
    v72 = v49 & 0xFFFFFFFF00000000 | v71;
    v74 = sub_1C5CFF3BC((uint64_t)a1, v48, v100, v103, v104, v70, v68);
    v76 = v100 & 0xFFFFFFFF00000000 | v75;
    v77 = a1[1];
    v78 = *(unsigned __int16 *)(v8 + 24);
    v79 = *(unsigned __int8 **)(v8 + 64);
    *(_QWORD *)&v102 = v79;
    if (v79)
      llvm::MetadataTracking::track((uint64_t)&v102, v79, 2);
    DWORD2(v102) = *(_DWORD *)(v8 + 60);
    v80 = *(_QWORD *)(v77 + 832);
    if (v80)
      LOWORD(v80) = *(_WORD *)(v80 + 8);
    v81 = sub_1C5D56C70(v77, v78, (const llvm::APInt *)&v102, v70, v68, (uint64_t)v99, v72, v73, (uint64_t)v74, v76, v80);
    v83 = v7 & 0xFFFFFFFF00000000 | v82;
    if ((_QWORD)v102)
      llvm::MetadataTracking::untrack((uint64_t)&v102, (unsigned __int8 *)v102);
    v85 = *((_QWORD *)&v110[0] + 1);
    v84 = *(llvm **)&v110[0];
    v86 = (uint64_t)a1;
    v87 = (uint64_t)v81;
    v88 = v83;
    v89 = (uint64_t)v70;
    v90 = v68;
    return sub_1C5CFF3BC(v86, v87, v88, v89, v90, v84, v85);
  }
  return result;
}

_QWORD *sub_1C5D00008(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unsigned __int8 *v9;
  unsigned int ExtendedSizeInBits;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  unint64_t EVT;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  const char *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  llvm *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  __int128 v63;
  __int128 v64;

  v4 = *(uint64_t **)(a2 + 32);
  v58 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v64 = v58;
  v5 = sub_1C6335540((uint64_t)a1, *v4, v4[1]);
  v7 = v6;
  v8 = *(_OWORD *)(*(_QWORD *)(v5 + 40) + 16 * v6);
  v63 = v8;
  v9 = *(unsigned __int8 **)(a2 + 64);
  v61 = v9;
  if (v9)
  {
    v57 = v8;
    llvm::MetadataTracking::track((uint64_t)&v61, v9, 2);
    LOBYTE(v8) = v57;
  }
  v62 = *(_DWORD *)(a2 + 60);
  if ((_BYTE)v8)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v63);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v63);
  v12 = ExtendedSizeInBits;
  if ((_DWORD)v11 == 1)
  if ((_BYTE)v58)
    v13 = sub_1C47A8C74((unsigned __int8 *)&v64);
  else
    v13 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v64);
  v15 = v13;
  if ((_DWORD)v14 == 1)
  if (v12 % v15)
    goto LABEL_14;
  if (!(_BYTE)v64)
  {
    v19 = *((_QWORD *)&v64 + 1);
    v20 = *(_DWORD *)(*((_QWORD *)&v64 + 1) + 8);
    if ((v20 & 0xFE) == 0x12)
      goto LABEL_21;
    goto LABEL_39;
  }
  if (v64 - 15 >= 0x9C)
  {
    if (v64 == 171)
    {
LABEL_14:
      if ((_BYTE)v64)
      {
        if (v64 - 15 >= 0x9C)
          goto LABEL_31;
        goto LABEL_19;
      }
      v19 = *((_QWORD *)&v64 + 1);
      v20 = *(_DWORD *)(*((_QWORD *)&v64 + 1) + 8);
LABEL_21:
      if ((v20 & 0xFE) != 0x12)
      {
LABEL_31:
        v26 = sub_1C5CEE63C((uint64_t)a1, v5, v7, v64, *((uint64_t *)&v64 + 1));
        goto LABEL_32;
      }
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v19 + 24), 0, v19);
      v17 = EVT & 0xFFFFFFFFFFFFFF00;
      goto LABEL_23;
    }
    v19 = *((_QWORD *)&v64 + 1);
LABEL_39:
    v29 = sub_1C4816F98(*(llvm::LLVMContext **)(a1[1] + 56), v64, v19, v12 / v15, 0);
    if ((_BYTE)v29 && *(_QWORD *)(*a1 + 8 * v29 + 96))
    {
      v31 = (llvm *)v29;
      v32 = a1[1];
      v33 = *(_QWORD *)(v32 + 832);
      if (v33)
        v34 = *(_WORD *)(v33 + 8);
      else
        v34 = 0;
      v48 = sub_1C5D52060(v32, 216, (const llvm::APInt *)&v61, v31, v30, v5, v7, v34);
      v50 = v49;
      v51 = a1[1];
      v52 = v64;
      v53 = sub_1C6366C9C(v51, 0, (uint64_t)&v61, 0);
      v56 = *(_QWORD *)(v51 + 832);
      if (v56)
        LOWORD(v56) = *(_WORD *)(v56 + 8);
      v26 = sub_1C5D56C70(v51, 148, (const llvm::APInt *)&v61, (llvm *)v52, *((uint64_t *)&v52 + 1), (uint64_t)v48, v50, v55, v53, v54, v56);
      goto LABEL_32;
    }
    goto LABEL_14;
  }
LABEL_19:
  LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v64);
  v17 = 0;
  v18 = 0;
LABEL_23:
  v59 = v17 | EVT;
  v60 = v18;
  if ((_BYTE)EVT)
    v21 = sub_1C47A8C74((unsigned __int8 *)&v59);
  else
    v21 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v59);
  v23 = v21;
  if ((_DWORD)v22 == 1)
  if (v12 % v23)
    goto LABEL_31;
  v24 = sub_1C4816F98(*(llvm::LLVMContext **)(a1[1] + 56), v59, v60, v12 / v23, 0);
  if (!(_BYTE)v24 || !*(_QWORD *)(*a1 + 8 * v24 + 96))
    goto LABEL_31;
  v35 = (llvm *)v24;
  v36 = a1[1];
  v37 = *(_QWORD *)(v36 + 832);
  if (v37)
    v38 = *(_WORD *)(v37 + 8);
  else
    v38 = 0;
  v39 = sub_1C5D52060(v36, 216, (const llvm::APInt *)&v61, v35, v25, v5, v7, v38);
  v41 = v40;
  v42 = a1[1];
  v43 = v64;
  v44 = sub_1C6366C9C(v42, 0, (uint64_t)&v61, 0);
  v47 = *(_QWORD *)(v42 + 832);
  if (v47)
    LOWORD(v47) = *(_WORD *)(v47 + 8);
  v26 = sub_1C5D56C70(v42, 151, (const llvm::APInt *)&v61, (llvm *)v43, *((uint64_t *)&v43 + 1), (uint64_t)v39, v41, v46, v44, v45, v47);
LABEL_32:
  v27 = v26;
  if (v61)
    llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
  return v27;
}

uint64_t *sub_1C5D00384(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  llvm *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _OWORD v26[2];

  v5 = *(uint64_t **)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v7 = *(llvm **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v9 = v5[5];
  v8 = v5[6];
  v10 = *v5;
  v11 = v5[1];
  v12 = *(_QWORD *)(v9 + 40) + 16 * v8;
  llvm::TargetLoweringBase::getTypeConversion(*a1, *(llvm::EVT **)(a1[1] + 56), *(_QWORD *)v12, *(_QWORD *)(v12 + 8), (uint64_t)v26);
  if (LOBYTE(v26[0]) == 7)
  {
    v9 = sub_1C6335540((uint64_t)a1, v9, v8);
    v14 = v13;
    v8 = v8 & 0xFFFFFFFF00000000 | v13;
  }
  else
  {
    v14 = v8;
  }
  v26[0] = *(_OWORD *)(*(_QWORD *)(v9 + 40) + 16 * v14);
  if (!sub_1C632979C((unsigned __int8 *)v26, (uint64_t)v7, v6) || *(_WORD *)(v10 + 24) != 51)
    goto LABEL_16;
  v16 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(v16 + 80);
  v18 = *(_QWORD *)(v17 + 80);
  v19 = (_QWORD *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u)
    v19 = (_QWORD *)*v19;
  if (*v19)
LABEL_16:
    llvm::report_fatal_error((llvm *)"Don't know how to widen the operands for INSERT_SUBVECTOR", (const char *)1);
  v20 = a1[1];
  v21 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)&v26[0] = v21;
  if (v21)
  {
    llvm::MetadataTracking::track((uint64_t)v26, v21, 2);
    v16 = *(_QWORD *)(a2 + 32);
    v17 = *(_QWORD *)(v16 + 80);
  }
  DWORD2(v26[0]) = *(_DWORD *)(a2 + 60);
  v22 = *(_QWORD *)(v16 + 88);
  v23 = *(_QWORD *)(v20 + 832);
  if (v23)
    LOWORD(v23) = *(_WORD *)(v23 + 8);
  v24 = sub_1C5D58E08(v20, (const char *)0x96, (const llvm::APInt *)v26, v7, v6, v10, v11, v15, v9, v8, v17, v22, SHIDWORD(v22), v23);
  if (*(_QWORD *)&v26[0])
    llvm::MetadataTracking::untrack((uint64_t)v26, *(unsigned __int8 **)&v26[0]);
  return v24;
}

_QWORD *sub_1C5D00510(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  llvm::LLVMContext *v19;
  unint64_t EVT;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t *v25;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::LLVMContext *v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  llvm *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  llvm *v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD v49[2];
  unsigned __int8 *v50;
  int v51;
  _QWORD v52[2];
  _OWORD v53[2];

  v6 = *(_QWORD **)(a2 + 32);
  v8 = v6[20];
  v7 = v6[21];
  v9 = (uint64_t *)(*(_QWORD *)(v8 + 40) + 16 * v7);
  v11 = *v9;
  v10 = v9[1];
  v52[0] = *v9;
  v52[1] = v10;
  v13 = v6[5];
  v12 = v6[6];
  v14 = *(unsigned __int8 **)(a2 + 64);
  v50 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v50, v14, 2);
  v51 = *(_DWORD *)(a2 + 60);
  if (a3 == 1)
  {
    v16 = sub_1C6335540(a1, v13, v12);
    v18 = v17;
    v53[0] = *(_OWORD *)(*(_QWORD *)(v16 + 40) + 16 * v17);
    v19 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56);
    if ((_BYTE)v11)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)v52);
      v23 = 0;
      v22 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v10 + 24), 0, v15);
      v22 = (uint64_t)v21;
      v23 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    v36 = v23 | EVT;
    v37 = sub_1C612FE00((llvm::EVT *)v53, v21);
    v38 = (llvm *)sub_1C4816F98(v19, v36, v22, v37, 0);
    v25 = sub_1C5CFEFA8(a1, v8, v7, v38, v39, 1);
    v27 = v40;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)a1, *(llvm::EVT **)(*(_QWORD *)(a1 + 8) + 56), v11, v10, (uint64_t)v53);
    v53[0] = *(_OWORD *)((char *)v53 + 8);
    v25 = sub_1C5CFEFA8(a1, v8, v7, *(llvm **)&v53[0], *(uint64_t *)&v53[1], 1);
    v27 = v26;
    v28 = (uint64_t *)(*(_QWORD *)(v13 + 40) + 16 * v12);
    v30 = *v28;
    v29 = v28[1];
    v49[0] = v30;
    v49[1] = v29;
    v31 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56);
    if ((_BYTE)v30)
    {
      LOBYTE(v32) = sub_1C47F37A0((unsigned __int8 *)v49);
      v35 = 0;
      v34 = 0;
    }
    else
    {
      v32 = llvm::EVT::getEVT(*(llvm::EVT **)(v29 + 24), 0, v24);
      v34 = (uint64_t)v33;
      v35 = v32 & 0xFFFFFFFFFFFFFF00;
    }
    v41 = v35 | v32;
    v42 = sub_1C612FE00((llvm::EVT *)v53, v33);
    v43 = (llvm *)sub_1C4816F98(v31, v41, v34, v42, 0);
    v16 = (uint64_t)sub_1C5CFEFA8(a1, v13, v12, v43, v44, 0);
    v18 = v45;
  }
  v46 = *(uint64_t **)(a2 + 32);
  v47 = sub_1C5D60180(*(_QWORD *)(a1 + 8), *v46, v46[1], (uint64_t)&v50, v16, v18, v46[10], v46[11], v46[15], v46[16], (uint64_t)v25, v27, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), *(_QWORD *)(a2 + 96), (*(unsigned __int16 *)(a2 + 26) >> 7) & 7, 0, (*(_WORD *)(a2 + 26) & 0x800) != 0);
  if (v50)
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  return v47;
}

_QWORD *sub_1C5D00790(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  BOOL v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::LLVMContext *v18;
  unint64_t EVT;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  llvm *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  llvm::LLVMContext *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  llvm *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::LLVMContext *v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  __int128 v55;
  unsigned __int8 *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = *(uint64_t **)(v5 + 80);
  v9 = *(_QWORD *)(v5 + 88);
  v10 = *(_QWORD *)(v5 + 160);
  v11 = *(_QWORD *)(v5 + 168);
  v58 = *(_OWORD *)(v5 + 200);
  if (a3 == 1)
  {
    v6 = sub_1C6335540(a1, v6, v7);
    LODWORD(v7) = (_DWORD)v12;
    v59 = *(_OWORD *)(*(_QWORD *)(v6 + 40) + 16 * v12);
    v14 = sub_1C612FE00((llvm::EVT *)&v59, v12);
    v15 = (uint64_t *)(*(_QWORD *)(v10 + 40) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    *(_QWORD *)&v59 = v17;
    *((_QWORD *)&v59 + 1) = v16;
    v18 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56);
    if ((_BYTE)v17)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v59);
      v22 = 0;
      v21 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v16 + 24), 0, v13);
      v21 = v20;
      v22 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    v28 = (llvm *)sub_1C4816F98(v18, v22 | EVT, v21, v14, 0);
    v25 = (uint64_t)sub_1C5CFEFA8(a1, v10, v11, v28, v29, 0);
    v27 = v31;
    v32 = v8[5] + 16 * v9;
    v34 = *(unsigned __int8 **)v32;
    v33 = *(_QWORD *)(v32 + 8);
    v56 = v34;
    v57 = v33;
    v35 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56);
    if ((_BYTE)v34)
    {
      LOBYTE(v36) = sub_1C47F37A0((unsigned __int8 *)&v56);
      v39 = 0;
      v38 = 0;
    }
    else
    {
      v36 = llvm::EVT::getEVT(*(llvm::EVT **)(v33 + 24), 0, v30);
      v38 = v37;
      v39 = v36 & 0xFFFFFFFFFFFFFF00;
    }
    v40 = (llvm *)sub_1C4816F98(v35, v39 | v36, v38, v14, 0);
    v8 = sub_1C5CFEFA8(a1, (uint64_t)v8, v9, v40, v41, 1);
    LODWORD(v9) = v42;
    v43 = *(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56);
    v55 = *(_OWORD *)(a2 + 80);
    v45 = sub_1C6131264((unsigned __int8 *)&v55, v42, v44);
    v23 = (void *)sub_1C4816F98(v43, v45, v46, v14, 0);
    v24 = v47;
  }
  else
  {
    v23 = *(void **)(a2 + 80);
    v24 = *(_QWORD *)(a2 + 88);
    v25 = sub_1C6335540(a1, v10, v11);
    v27 = v26;
  }
  v48 = *(_QWORD *)(a2 + 32);
  v49 = *(_DWORD *)(v48 + 8);
  *(_QWORD *)&v59 = *(_QWORD *)v48;
  DWORD2(v59) = v49;
  v60 = v6;
  v61 = v7;
  v62 = v8;
  v63 = v9;
  v64 = *(_QWORD *)(v48 + 120);
  v65 = *(_DWORD *)(v48 + 128);
  v66 = v25;
  v67 = v27;
  v68 = v58;
  v69 = DWORD2(v58);
  v50 = *(_QWORD *)(a1 + 8);
  v51 = sub_1C636D7B0((llvm *)1, 0);
  v52 = *(unsigned __int8 **)(a2 + 64);
  v56 = v52;
  if (v52)
    llvm::MetadataTracking::track((uint64_t)&v56, v52, 2);
  LODWORD(v57) = *(_DWORD *)(a2 + 60);
  v53 = sub_1C5D609EC(v50, v51, 1, v23, v24, (uint64_t)&v56, (uint64_t *)&v59, 6, *(_QWORD *)(a2 + 96), (*(unsigned __int16 *)(a2 + 26) >> 7) & 7, (*(_WORD *)(a2 + 26) & 0x400) != 0);
  if (v56)
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
  return v53;
}

uint64_t *sub_1C5D00AA0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  llvm::LLVMContext *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  llvm::LLVMContext *v31;
  unint64_t EVT;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  llvm *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t *v55;
  unsigned __int8 *v57;
  int v58;
  llvm *v59;
  uint64_t v60;
  __int128 v61;
  unsigned __int8 *v62;
  int v63;

  v4 = sub_1C6335540((uint64_t)a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  v6 = v5;
  v7 = sub_1C6335540((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48));
  v9 = v8;
  v10 = *(unsigned __int8 **)(a2 + 64);
  v62 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v62, v10, 2);
  v63 = *(_DWORD *)(a2 + 60);
  v61 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v11 = (_QWORD *)(*(_QWORD *)(v4 + 40) + 16 * v6);
  v12 = (llvm *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a1 + 400))(*a1, *(_QWORD *)(**(_QWORD **)(a1[1] + 40) + 40) + 272, *(_QWORD *)(a1[1] + 56), *v11, v11[1]);
  v14 = v13;
  v59 = v12;
  v60 = v13;
  if (sub_1C6131264((unsigned __int8 *)&v61, v13, v15) == 2)
  {
    v18 = *(llvm::LLVMContext **)(a1[1] + 56);
    v19 = sub_1C612FE00((llvm::EVT *)&v59, v16);
    v12 = (llvm *)sub_1C4816F98(v18, 2, 0, v19, 0);
    v14 = v20;
    v59 = v12;
    v60 = v20;
  }
  v21 = a1[1];
  v22 = *(unsigned __int8 **)(a2 + 64);
  v57 = v22;
  if (v22)
  {
    llvm::MetadataTracking::track((uint64_t)&v57, v22, 2);
    v12 = v59;
    v14 = v60;
  }
  v58 = *(_DWORD *)(a2 + 60);
  v23 = *(_QWORD *)(a2 + 32);
  v24 = *(_QWORD *)(v23 + 80);
  v25 = *(_QWORD *)(v23 + 88);
  v26 = *(_QWORD *)(v21 + 832);
  if (v26)
    LOWORD(v26) = *(_WORD *)(v26 + 8);
  v28 = sub_1C5D58E08(v21, (const char *)0xC1, (const llvm::APInt *)&v57, v12, v14, v4, v6, v17, v7, v9, v24, v25, SHIDWORD(v25), v26);
  v30 = v29;
  if (v57)
    llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  v31 = *(llvm::LLVMContext **)(a1[1] + 56);
  if ((_BYTE)v59)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v59);
    v35 = 0;
    v34 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v60 + 24), 0, v27);
    v34 = (uint64_t)v33;
    v35 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v36 = v35 | EVT;
  v37 = sub_1C612FE00((llvm::EVT *)&v61, v33);
  v38 = (llvm *)sub_1C4816F98(v31, v36, v34, v37, 0);
  v40 = v39;
  v41 = a1[1];
  v42 = sub_1C6366C9C(v41, 0, (uint64_t)&v62, 0);
  v45 = 0;
  v46 = *(_QWORD *)(v41 + 832);
  if (v46)
    v45 = *(_WORD *)(v46 + 8);
  v47 = sub_1C5D56C70(v41, 151, (const llvm::APInt *)&v62, v38, v40, (uint64_t)v28, v30, v44, v42, v43, v45);
  v49 = v48;
  v50 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 8));
  v51 = 200 - sub_1C6329468((unsigned int *)*a1, *v50, v50[1]);
  v52 = a1[1];
  v53 = *(_QWORD *)(v52 + 832);
  if (v53)
    v54 = *(_WORD *)(v53 + 8);
  else
    v54 = 0;
  v55 = sub_1C5D52060(v52, v51, (const llvm::APInt *)&v62, (llvm *)v61, *((uint64_t *)&v61 + 1), (uint64_t)v47, v49, v54);
  if (v62)
    llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
  return v55;
}

uint64_t *sub_1C5D00D7C(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t ExtendedSizeInBits;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  char EVT;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  llvm::Type *v29;
  const char *v30;
  BOOL v31;
  _BOOL4 v32;
  llvm::Type *v33;
  int v34;
  llvm::Type *v35;
  int v36;
  llvm::Type *v37;
  int v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  llvm *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int v52;
  const char *v53;
  unsigned int v54;
  uint64_t v55;
  llvm *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  llvm *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  unsigned __int8 *v78;
  int v79;

  v4 = *(unsigned __int8 **)(a2 + 64);
  v78 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v78, v4, 2);
  v79 = *(_DWORD *)(a2 + 60);
  v5 = *(uint64_t **)(a2 + 32);
  v77 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v6 = v5[1];
  v7 = sub_1C6335540((uint64_t)a1, *v5, v6);
  v9 = v8;
  v76 = *(_OWORD *)(*(_QWORD *)(v7 + 40) + 16 * v8);
  if ((_BYTE)v76)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v76);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v76);
  v12 = ExtendedSizeInBits;
  v13 = v11;
  v14 = v6 & 0xFFFFFFFF00000000 | v9;
  if ((_BYTE)v77)
    v15 = sub_1C47A8C74((unsigned __int8 *)&v77);
  else
    v15 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v77);
  if (v12 == v15 && v13 == v16)
    goto LABEL_43;
  v72 = v6 & 0xFFFFFFFF00000000 | v9;
  v73 = v7;
  if ((_BYTE)v76)
  {
    EVT = sub_1C47F37A0((unsigned __int8 *)&v76);
    v20 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v76 + 1) + 24), 0, v17);
    v20 = v21;
  }
  v71 = v6 & 0xFFFFFFFF00000000;
  v22 = 15;
  while (1)
  {
    LOBYTE(v74) = v22;
    v75 = 0;
    if ((_BYTE)v22)
    {
      v23 = sub_1C47F37A0((unsigned __int8 *)&v74);
      v24 = 0;
    }
    else
    {
      v23 = llvm::EVT::getEVT(MEMORY[0x18], 0, v18);
      v24 = v25;
    }
    if ((_BYTE)v74 && *(_QWORD *)(*a1 + 8 * v74 + 96))
    {
      v26 = sub_1C47A8C74((unsigned __int8 *)&v74);
      v28 = v27;
      v29 = (_BYTE)v77
          ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v77)
          : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v77);
      v31 = EVT || v20 == v24;
      v32 = v31;
      if ((llvm::Type *)v26 == v29 && v28 == (_DWORD)v30 && v23 == EVT && v32)
        break;
    }
    if (++v22 == 171)
    {
      v14 = v72;
      v7 = v73;
      goto LABEL_35;
    }
  }
  v52 = sub_1C612FE00((llvm::EVT *)&v74, v30);
  v54 = sub_1C612FE00((llvm::EVT *)&v76, v53);
  v55 = a1[1];
  v56 = v74;
  v57 = v75;
  if (v52 <= v54)
  {
    v67 = sub_1C6366C9C(a1[1], 0, (uint64_t)&v78, 0);
    v70 = *(_QWORD *)(v55 + 832);
    if (v70)
      LOWORD(v70) = *(_WORD *)(v70 + 8);
    v65 = sub_1C5D56C70(v55, 151, (const llvm::APInt *)&v78, v56, v57, v73, v72, v69, v67, v68, v70);
  }
  else
  {
    v58 = sub_1C61312D0(a1[1], v74, v75);
    v60 = v59;
    v61 = sub_1C6366C9C(a1[1], 0, (uint64_t)&v78, 0);
    v64 = *(_QWORD *)(v55 + 832);
    if (v64)
      LOWORD(v64) = *(_WORD *)(v64 + 8);
    v65 = sub_1C5D58E08(v55, (const char *)0x96, (const llvm::APInt *)&v78, v56, v57, (uint64_t)v58, v60, v63, v73, v72, v61, v62, SHIDWORD(v62), v64);
  }
  v7 = (uint64_t)v65;
  v14 = v66 | v71;
LABEL_35:
  v76 = *(_OWORD *)(*(_QWORD *)(v7 + 40) + 16 * v14);
  v33 = (_BYTE)v76
      ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v76)
      : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v76);
  v35 = v33;
  v36 = v34;
  v37 = (_BYTE)v77
      ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v77)
      : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v77);
  if (v35 == v37 && v36 == v38)
  {
LABEL_43:
    v40 = *(unsigned __int16 *)(a2 + 24);
    if (v40 == 198)
    {
      v41 = a1[1];
      v43 = *((_QWORD *)&v77 + 1);
      v42 = (llvm *)v77;
      v47 = *(_QWORD *)(v41 + 832);
      if (v47)
        v45 = *(_WORD *)(v47 + 8);
      else
        v45 = 0;
      v49 = 206;
    }
    else if (v40 == 199)
    {
      v41 = a1[1];
      v43 = *((_QWORD *)&v77 + 1);
      v42 = (llvm *)v77;
      v44 = *(_QWORD *)(v41 + 832);
      if (v44)
        v45 = *(_WORD *)(v44 + 8);
      else
        v45 = 0;
      v49 = 207;
    }
    else
    {
      v41 = a1[1];
      v43 = *((_QWORD *)&v77 + 1);
      v42 = (llvm *)v77;
      v48 = *(_QWORD *)(v41 + 832);
      if (v48)
        v45 = *(_WORD *)(v48 + 8);
      else
        v45 = 0;
      v49 = 205;
    }
    v46 = sub_1C5D52060(v41, v49, (const llvm::APInt *)&v78, v42, v43, v7, v14, v45);
  }
  else
  {
    v46 = sub_1C5D01174(a1, a2, v39);
  }
  v50 = v46;
  if (v78)
    llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
  return v50;
}

uint64_t *sub_1C5D01174(_QWORD *a1, uint64_t a2, BOOL a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm *v7;
  unint64_t EVT;
  uint64_t v9;
  unint64_t v10;
  llvm *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  llvm::LLVMContext *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t *v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  unsigned int v95;
  unsigned int v96;
  __n128 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  __n128 v105;
  unint64_t v106;
  uint64_t v107;
  llvm *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  unsigned __int8 *v119;
  int v120;
  llvm *v121;
  uint64_t v122;
  uint64_t v123[2];
  char v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void *v132;
  uint64_t v133;
  _BYTE v134[64];
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 40);
  v7 = *(llvm **)v5;
  v6 = *(_QWORD *)(v5 + 8);
  v121 = v7;
  v122 = v6;
  if ((_BYTE)v7)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v121);
    v10 = 0;
    v117 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v6 + 24), 0, a3);
    v117 = v9;
    v10 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v11 = (llvm *)(v10 | EVT);
  v12 = *(unsigned __int8 **)(a2 + 64);
  v119 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v119, v12, 2);
  v120 = *(_DWORD *)(a2 + 60);
  v13 = sub_1C612FE00((llvm::EVT *)&v121, (const char *)v12);
  v14 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * sub_1C6141934(a2));
  v15 = v14[1];
  v16 = sub_1C6335540((uint64_t)a1, *v14, v15);
  v18 = (int)v17;
  v19 = v15 & 0xFFFFFFFF00000000 | v17;
  v116 = v16;
  v118 = *(_OWORD *)(*(_QWORD *)(v16 + 40) + 16 * v17);
  v20 = *(unsigned __int16 *)(a2 + 24);
  v21 = *(llvm::LLVMContext **)(a1[1] + 56);
  v22 = sub_1C612FE00((llvm::EVT *)&v118, v17);
  v23 = sub_1C4816F98(v21, (uint64_t)v11, v117, v22, 0);
  if ((_BYTE)v23
    && *(_QWORD *)(*a1 + 8 * v23 + 96)
    && (v26 = (void *)v23, v27 = v24, !sub_1C6141934(a2)))
  {
    v54 = sub_1C6141934(a2);
    v55 = a1[1];
    if (v54)
    {
      if ((_DWORD)v20 == 136)
      {
        v135 = v26;
        v136 = v27;
        LOBYTE(v137) = 1;
        v138 = 0;
        v56 = *(_QWORD *)(a2 + 32);
        v57 = *(_DWORD *)(v56 + 8);
        v126 = *(void **)v56;
        LODWORD(v127) = v57;
        v128 = v116;
        LODWORD(v129) = v18;
        v130 = *(_QWORD *)(v56 + 80);
        v131 = *(_DWORD *)(v56 + 88);
        v58 = (uint64_t *)&v135;
        v59 = (uint64_t *)&v126;
        v60 = 136;
        v61 = 3;
      }
      else
      {
        v126 = v26;
        v127 = v27;
        LOBYTE(v128) = 1;
        v129 = 0;
        v92 = *(_QWORD *)(a2 + 32);
        v93 = *(_DWORD *)(v92 + 8);
        v135 = *(void **)v92;
        LODWORD(v136) = v93;
        v137 = v116;
        LODWORD(v138) = v18;
        v58 = (uint64_t *)&v126;
        v59 = (uint64_t *)&v135;
        v60 = v20;
        v61 = 2;
      }
      v94 = sub_1C6366344(v55, (const char *)v60, (const llvm::APInt *)&v119, v58, 2, v59, v61);
      v96 = v95;
      sub_1C5CED824((uint64_t)a1, a2, 1, (uint64_t)v94, 1uLL, v97);
    }
    else
    {
      if ((_DWORD)v20 == 212)
      {
        v62 = *(_QWORD *)(a2 + 32);
        v63 = *(_QWORD *)(v62 + 40);
        v64 = *(_QWORD *)(v62 + 48);
        v65 = *(_QWORD *)(v55 + 832);
        if (v65)
          LOWORD(v65) = *(_WORD *)(v65 + 8);
        v66 = sub_1C5D56C70(v55, 212, (const llvm::APInt *)&v119, (llvm *)v26, v27, v116, v19, v53, v63, v64, v65);
      }
      else
      {
        v98 = *(_QWORD *)(v55 + 832);
        if (v98)
          v99 = *(_WORD *)(v98 + 8);
        else
          v99 = 0;
        v66 = sub_1C5D52060(v55, v20, (const llvm::APInt *)&v119, (llvm *)v26, v27, v116, v19, v99);
      }
      v94 = v66;
      v96 = v67;
    }
    v106 = v96;
    v107 = a1[1];
    v108 = v121;
    v109 = v122;
    v110 = sub_1C6366C9C(v107, 0, (uint64_t)&v119, 0);
    v113 = *(_QWORD *)(v107 + 832);
    if (v113)
      LOWORD(v113) = *(_WORD *)(v113 + 8);
    v51 = sub_1C5D56C70(v107, 151, (const llvm::APInt *)&v119, v108, v109, (uint64_t)v94, v106, v112, v110, v111, v113);
  }
  else
  {
    if ((_BYTE)v118)
    {
      LOBYTE(v28) = sub_1C47F37A0((unsigned __int8 *)&v118);
      v30 = 0;
      v115 = 0;
    }
    else
    {
      v28 = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v118 + 1) + 24), 0, v25);
      v115 = v29;
      v30 = v28 & 0xFFFFFFFFFFFFFF00;
    }
    v31 = (llvm *)(v30 | v28);
    v32 = v13;
    v135 = &v137;
    v136 = 0x1000000000;
    sub_1C4825C80((unsigned int *)&v135, v13, 0, 0);
    if (sub_1C6141934(a2))
    {
      v68 = *(char **)(a2 + 32);
      v69 = &v68[40 * *(unsigned __int16 *)(a2 + 56)];
      v132 = v134;
      v133 = 0x400000000;
      sub_1C6132D88((unsigned int *)&v132, v68, v69);
      v126 = &v128;
      v127 = 0x2000000000;
      if (v13)
      {
        v70 = 0;
        v71 = 0;
        do
        {
          v114 = v70;
          v72 = a1[1];
          v73 = v71;
          v74 = sub_1C6366C9C(v72, v71, (uint64_t)&v119, 0);
          v77 = *(_QWORD *)(v72 + 832);
          if (v77)
            LOWORD(v77) = *(_WORD *)(v77 + 8);
          v78 = sub_1C5D56C70(v72, 148, (const llvm::APInt *)&v119, v31, v115, v116, v19, v76, v74, v75, v77);
          v79 = (uint64_t *)v132;
          *((_QWORD *)v132 + 2) = v78;
          *((_DWORD *)v79 + 6) = v80;
          v81 = a1[1];
          v123[0] = (uint64_t)v11;
          v123[1] = v117;
          v124 = 1;
          v125 = 0;
          v82 = v20;
          v83 = sub_1C6366344(v81, (const char *)v20, (const llvm::APInt *)&v119, v123, 2, v79, v133);
          v84 = v114;
          v85 = (char *)v135 + v114;
          *(_QWORD *)v85 = v83;
          *((_DWORD *)v85 + 2) = v86;
          v87 = *(_QWORD *)((char *)v135 + v114);
          v88 = v127;
          if (v127 >= (unint64_t)HIDWORD(v127))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)&v128, v127 + 1, 16);
            v84 = v114;
            v88 = v127;
          }
          v89 = (char *)v126 + 16 * v88;
          *v89 = v87;
          v89[1] = 1;
          v90 = (v127 + 1);
          LODWORD(v127) = v127 + 1;
          v71 = v73 + 1;
          v70 = v84 + 16;
          v20 = v82;
        }
        while (v32 != v73 + 1);
        v91 = (uint64_t *)v126;
      }
      else
      {
        v90 = 0;
        v91 = &v128;
      }
      v100 = a1[1];
      v101 = *(_QWORD *)(v100 + 832);
      if (v101)
        v102 = *(unsigned __int16 *)(v101 + 8);
      else
        v102 = 0;
      v103 = sub_1C636D0C8(v100, (const char *)2, (const llvm::APInt *)&v119, (llvm *)1, 0, v91, v90, v102);
      sub_1C5CED824((uint64_t)a1, a2, 1, (uint64_t)v103, v104, v105);
      if (v126 != &v128)
        free(v126);
      if (v132 != v134)
        free(v132);
    }
    else if (v13)
    {
      v33 = v20;
      v34 = 0;
      v35 = 0;
      do
      {
        v36 = a1[1];
        v37 = sub_1C6366C9C(v36, v35, (uint64_t)&v119, 0);
        v40 = *(_QWORD *)(v36 + 832);
        if (v40)
          LOWORD(v40) = *(_WORD *)(v40 + 8);
        v42 = sub_1C5D56C70(v36, 148, (const llvm::APInt *)&v119, v31, v115, v116, v19, v39, v37, v38, v40);
        v43 = *(_QWORD *)(v36 + 832);
        if (v43)
          v44 = *(_WORD *)(v43 + 8);
        else
          v44 = 0;
        v45 = sub_1C5D52060(v36, v33, (const llvm::APInt *)&v119, v11, v117, (uint64_t)v42, v41, v44);
        v46 = (char *)v135 + v34;
        *(_QWORD *)v46 = v45;
        *((_DWORD *)v46 + 2) = v47;
        ++v35;
        v34 += 16;
      }
      while (v32 != v35);
    }
    v48 = a1[1];
    v49 = *(_QWORD *)(v48 + 832);
    if (v49)
      v50 = *(unsigned __int16 *)(v49 + 8);
    else
      v50 = 0;
    v51 = sub_1C636D0C8(v48, (const char *)0x92, (const llvm::APInt *)&v119, v121, v122, (uint64_t *)v135, v136, v50);
    if (v135 != &v137)
      free(v135);
  }
  if (v119)
    llvm::MetadataTracking::untrack((uint64_t)&v119, v119);
  return v51;
}

uint64_t sub_1C5D01828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t ExtendedSizeInBits;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  unint64_t EVT;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  __int128 *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int v29;
  unint64_t v30;
  int v31;
  char *v32;
  char *v33;
  int v34;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  llvm *v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  int v106;
  __int128 v107;
  char v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  _QWORD v112[2];
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  unsigned __int8 *v116;
  int v117;
  _OWORD v118[2];
  __int128 v119;
  char *v120;
  uint64_t v121;
  _QWORD v122[14];

  v122[12] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 32);
  v98 = *(_QWORD *)(v6 + 8);
  v99 = *(_QWORD *)v6;
  v7 = *(_OWORD *)(v6 + 80);
  v8 = *(_QWORD *)(a3 + 96);
  v97 = *(_WORD *)(v8 + 32);
  v9 = *(_OWORD *)(v8 + 56);
  v118[0] = *(_OWORD *)(v8 + 40);
  v118[1] = v9;
  v119 = v7;
  v10 = sub_1C6335540(a1, *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48));
  v95 = v11;
  v96 = v10;
  v100 = a3;
  v12 = *(unsigned __int8 **)(a3 + 64);
  v116 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v116, v12, 2);
  v117 = *(_DWORD *)(a3 + 60);
  v115 = *(_OWORD *)(a3 + 80);
  if ((_BYTE)v115)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v115);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v115);
  v15 = ExtendedSizeInBits;
  v16 = v14;
  v17 = (uint64_t *)(*(_QWORD *)(v96 + 40) + 16 * v95);
  v18 = v17[1];
  v113 = *v17;
  v114 = v18;
  if ((_BYTE)v113)
  {
    v91 = sub_1C47A8C74((unsigned __int8 *)&v113);
    if ((_BYTE)v113)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v113);
      v21 = 0;
      v22 = 0;
      goto LABEL_12;
    }
    v18 = v114;
  }
  else
  {
    v91 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v113);
  }
  EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v18 + 24), 0, v19);
  v21 = EVT & 0xFFFFFFFFFFFFFF00;
LABEL_12:
  v112[0] = v21 | EVT;
  v112[1] = v22;
  if ((_BYTE)EVT)
    v23 = sub_1C47A8C74((unsigned __int8 *)v112);
  else
    v23 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v112);
  v92 = v23;
  v24 = *(__int128 **)(v100 + 96);
  v110 = *v24;
  v111 = *((_QWORD *)v24 + 2);
  v109 = 0;
  v120 = (char *)v122;
  v121 = 0x400000000;
  if (v15)
  {
    do
    {
      sub_1C5D01EEC(&v107, *(_QWORD *)(a1 + 8), *(_QWORD *)a1, v15, v113, v114, 0, 0);
      if (!v108)
      {
        v42 = 0;
        goto LABEL_70;
      }
      v105 = v107;
      v106 = 0;
      v25 = v120;
      if (v121 >= HIDWORD(v121))
      {
        v40 = v121 + 1;
        if (v120 <= (char *)&v105 && &v120[24 * v121] > (char *)&v105)
        {
          v41 = (char *)&v105 - v120;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v40, 24);
          v25 = v120;
          v26 = &v120[v41];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v40, 24);
          v26 = (char *)&v105;
          v25 = v120;
        }
      }
      else
      {
        v26 = (char *)&v105;
      }
      v27 = &v25[24 * v121];
      v28 = *(_OWORD *)v26;
      *((_QWORD *)v27 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v27 = v28;
      v29 = v121 + 1;
      LODWORD(v121) = v121 + 1;
      if ((_BYTE)v107)
      {
        v30 = sub_1C47A8C74((unsigned __int8 *)&v107);
        v29 = v121;
      }
      else
      {
        v30 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v107);
      }
      v32 = v120;
      v33 = &v120[24 * v29];
      v34 = *((_DWORD *)v33 - 2);
      v36 = v16 == 1 || v31 != 1;
      do
      {
        v37 = v15;
        v15 -= v30;
        ++v34;
        v38 = v37 - v30;
        v39 = v37 - v30 >= v30 && v36;
      }
      while (v38 && v39);
      *((_DWORD *)v33 - 2) = v34;
    }
    while (v15);
    if (v29)
    {
      LODWORD(v43) = 0;
      v90 = a2 + 16;
      v94 = v33;
      do
      {
        v107 = *(_OWORD *)v32;
        v44 = *((_DWORD *)v32 + 4);
        if ((_BYTE)v107)
        {
          v45 = sub_1C47A8C74((unsigned __int8 *)&v107);
          if ((_BYTE)v107)
          {
            if (v107 - 15 < 0x9C)
              goto LABEL_49;
            v46 = *((_QWORD *)&v107 + 1);
            goto LABEL_58;
          }
        }
        else
        {
          v45 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v107);
        }
        v46 = *((_QWORD *)&v107 + 1);
        if ((*(_DWORD *)(*((_QWORD *)&v107 + 1) + 8) & 0xFE) == 0x12)
        {
LABEL_49:
          v47 = sub_1C52B71D4((unsigned __int8 *)&v107);
          do
          {
            v48 = *(_QWORD *)(v100 + 96);
            v49 = *(_BYTE *)(v48 + 34);
            if (v109)
            {
              v50 = (1 << (63
                           - __clz(((1 << v49) | *(_QWORD *)(v48 + 8)) & -((1 << v49) | *(_QWORD *)(v48 + 8))))) | v109;
              v49 = 63 - __clz(v50 & -v50);
            }
            v51 = *(_QWORD *)(a1 + 8);
            v52 = v107;
            v53 = sub_1C6366C9C(v51, (int)v43, (uint64_t)&v116, 0);
            v56 = *(_QWORD *)(v51 + 832);
            if (v56)
              LOWORD(v56) = *(_WORD *)(v56 + 8);
            v57 = sub_1C5D56C70(v51, 151, (const llvm::APInt *)&v116, (llvm *)v52, *((uint64_t *)&v52 + 1), v96, v95, v55, v53, v54, v56);
            v58 = *(_QWORD *)(a1 + 8);
            v103 = v110;
            v104 = v111;
            v60 = sub_1C636B75C(v58, v99, v98, (uint64_t)&v116, (uint64_t)v57, v59, v119, DWORD2(v119), (uint64_t)&v103, v49, 0, v97, (uint64_t)v118);
            v62 = v61;
            v63 = *(unsigned int *)(a2 + 8);
            if (v63 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v90, v63 + 1, 16);
              v63 = *(unsigned int *)(a2 + 8);
            }
            v64 = (_QWORD *)(*(_QWORD *)a2 + 16 * v63);
            *v64 = v60;
            v64[1] = v62;
            ++*(_DWORD *)(a2 + 8);
            LODWORD(v43) = v43 + v47;
            sub_1C63519B4(a1, (uint64_t)v60, v107, *((uint64_t *)&v107 + 1), (uint64_t)&v110, (uint64_t)&v119, &v109);
            --v44;
          }
          while (v44);
          goto LABEL_68;
        }
LABEL_58:
        v66 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(*(_QWORD *)(a1 + 8) + 56), v107, v46, v91 / v45, 0);
        v67 = *(_QWORD *)(a1 + 8);
        v68 = *(_QWORD *)(v67 + 832);
        if (v68)
          v69 = *(_WORD *)(v68 + 8);
        else
          v69 = 0;
        v70 = sub_1C5D52060(v67, 216, (const llvm::APInt *)&v116, v66, v65, v96, v95, v69);
        v72 = v71;
        v93 = v45;
        v73 = (int)(v43 * v92 / v45);
        do
        {
          v74 = *(_QWORD *)(a1 + 8);
          v75 = v107;
          v76 = sub_1C6366C9C(v74, v73, (uint64_t)&v116, 0);
          v79 = *(_QWORD *)(v74 + 832);
          if (v79)
            LOWORD(v79) = *(_WORD *)(v79 + 8);
          v80 = sub_1C5D56C70(v74, 148, (const llvm::APInt *)&v116, (llvm *)v75, *((uint64_t *)&v75 + 1), (uint64_t)v70, v72, v78, v76, v77, v79);
          v81 = *(_QWORD *)(a1 + 8);
          v101 = v110;
          v102 = v111;
          v89 = *(unsigned __int8 *)(*(_QWORD *)(v100 + 96) + 34);
          v83 = sub_1C636B75C(v81, v99, v98, (uint64_t)&v116, (uint64_t)v80, v82, v119, DWORD2(v119), (uint64_t)&v101, v89, SHIDWORD(v89), v97, (uint64_t)v118);
          v85 = v84;
          v86 = *(unsigned int *)(a2 + 8);
          if (v86 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v90, v86 + 1, 16);
            v86 = *(unsigned int *)(a2 + 8);
          }
          v87 = (_QWORD *)(*(_QWORD *)a2 + 16 * v86);
          *v87 = v83;
          v87[1] = v85;
          ++*(_DWORD *)(a2 + 8);
          sub_1C63519B4(a1, (uint64_t)v83, v107, *((uint64_t *)&v107 + 1), (uint64_t)&v110, (uint64_t)&v119, 0);
          ++v73;
          --v44;
        }
        while (v44);
        v43 = (int)v73 * v93 / v92;
LABEL_68:
        v32 += 24;
      }
      while (v32 != v94);
    }
    v42 = 1;
  }
  else
  {
    v42 = 1;
  }
LABEL_70:
  if (v120 != (char *)v122)
    free(v120);
  if (v116)
    llvm::MetadataTracking::untrack((uint64_t)&v116, v116);
  return v42;
}

llvm::Type *sub_1C5D01EEC(_BYTE *a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t EVT;
  _BOOL4 v19;
  unsigned int ExtendedSizeInBits;
  llvm::Type *result;
  const char *v22;
  unsigned int v23;
  char v24;
  uint64_t j;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  int8x8_t v29;
  uint64_t v30;
  uint8x8_t v31;
  BOOL v32;
  BOOL v33;
  __int128 v34;
  unint64_t v35;
  uint64_t i;
  unsigned int v37;
  const char *v38;
  unsigned int v39;
  const char *v40;
  int8x8_t v41;
  uint8x8_t v42;
  BOOL v43;
  BOOL v44;
  llvm::Type *v45;
  unsigned int v46;
  unsigned int v47;
  __int128 v48;
  unsigned __int8 v49[24];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];

  v51 = a5;
  v52 = a6;
  if ((_BYTE)a5)
  {
    v14 = sub_1C47F37A0((unsigned __int8 *)&v51);
    v15 = 0;
    v16 = 0;
    v17 = v51;
  }
  else
  {
    v17 = a5;
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a6 + 24), 0, a3);
    v15 = EVT & 0xFFFFFFFFFFFFFF00;
    v14 = EVT;
  }
  *(_QWORD *)&v50 = v15 | v14;
  *((_QWORD *)&v50 + 1) = v16;
  if (v17)
  {
    v19 = (v17 - 120) < 0x33;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v51);
    v14 = v50;
  }
  else
  {
    v19 = *(unsigned __int8 *)(v52 + 8) == 19;
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v51);
  }
  if (v14)
    result = (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v50);
  else
    result = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v50);
  v23 = result;
  if ((_DWORD)v22 == 1)
  *(_OWORD *)v49 = v50;
  v24 = v23 != a4 || v19;
  if ((v24 & 1) == 0)
  {
    v34 = v50;
    goto LABEL_85;
  }
  v47 = 8 * a7;
  if (v19)
  {
    v46 = a8 + a4;
  }
  else
  {
    v35 = v23;
    v46 = a8 + a4;
    for (i = 7; i != 1; --i)
    {
      LOBYTE(v48) = i;
      *((_QWORD *)&v48 + 1) = 0;
      if ((_BYTE)i)
        v37 = sub_1C47A8C74((unsigned __int8 *)&v48);
      else
        v37 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v48);
      v39 = v37;
      if ((_DWORD)v38 == 1)
      if ((_BYTE)v48)
        result = (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v48);
      else
        result = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v48);
      if ((_DWORD)v40 == 1)
      {
        v45 = result;
        result = v45;
      }
      if ((unint64_t)result <= v35)
        break;
      result = (llvm::Type *)llvm::TargetLoweringBase::getTypeConversion(a3, *(llvm::EVT **)(a2 + 56), v48, *((uint64_t *)&v48 + 1), (uint64_t)v53);
      if (v53[0] <= 1u)
      {
        v41.i32[0] = ExtendedSizeInBits / v39;
        v42 = (uint8x8_t)vcnt_s8(v41);
        v42.i16[0] = vaddlv_u8(v42);
        v43 = ExtendedSizeInBits % v39 || v39 > ExtendedSizeInBits;
        v44 = v43 || v42.i32[0] > 1u;
        if (!v44 && (v39 <= a4 || a7 && v47 >= v39 && v46 >= v39))
        {
          if (v39 == ExtendedSizeInBits)
          {
LABEL_87:
            v34 = v48;
            goto LABEL_85;
          }
          *(_OWORD *)v49 = v48;
          break;
        }
      }
    }
  }
  for (j = 170; j != 14; --j)
  {
    LOBYTE(v48) = j;
    *((_QWORD *)&v48 + 1) = 0;
    if ((_BYTE)j)
    {
      if (((v19 ^ (j - 120 < 0x33)) & 1) != 0)
        continue;
      v26 = sub_1C47A8C74((unsigned __int8 *)&v48);
      v27 = *((_QWORD *)&v48 + 1);
    }
    else
    {
      if (((v19 ^ (MEMORY[8] == 19)) & 1) != 0)
        continue;
      v26 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v48);
      v27 = 0;
    }
    result = (llvm::Type *)llvm::TargetLoweringBase::getTypeConversion(a3, *(llvm::EVT **)(a2 + 56), v48, v27, (uint64_t)v53);
    if (v53[0] <= 1u)
    {
      if ((_BYTE)v48)
      {
        result = (llvm::Type *)sub_1C47F37A0((unsigned __int8 *)&v48);
        v30 = 0;
      }
      else
      {
        result = (llvm::Type *)llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v48 + 1) + 24), 0, v28);
      }
      if (v50 == result && ((_BYTE)result || *((_QWORD *)&v50 + 1) == v30))
      {
        v29.i32[0] = ExtendedSizeInBits / v26;
        v31 = (uint8x8_t)vcnt_s8(v29);
        v31.i16[0] = vaddlv_u8(v31);
        v32 = ExtendedSizeInBits % v26 || v26 > ExtendedSizeInBits;
        v33 = v32 || v31.i32[0] > 1u;
        if (!v33 && (v26 <= a4 || a7 && v47 >= v26 && v46 >= v26))
        {
          result = v49[0] ? (llvm::Type *)sub_1C47A8C74(v49) : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v49);
          if ((unint64_t)result < v26
            || v48 == v51 && ((_BYTE)v48 || *((_QWORD *)&v48 + 1) == v52))
          {
            goto LABEL_87;
          }
        }
      }
    }
  }
  if (v19)
  {
    *a1 = 0;
    a1[16] = 0;
    return result;
  }
  v34 = *(_OWORD *)v49;
LABEL_85:
  *(_OWORD *)a1 = v34;
  a1[16] = 1;
  return result;
}

uint64_t *sub_1C5D022F4(uint64_t a1, llvm *a2, uint64_t a3, _QWORD *a4, unsigned int a5, int a6)
{
  _QWORD *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int ExtendedSizeInBits;
  const char *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t *v64;
  int v66;
  unint64_t v67;
  __int128 v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  unsigned __int8 *v72;
  int v73;
  llvm *v74;
  uint64_t v75;

  v8 = a4;
  v9 = (char)a2;
  v74 = a2;
  v75 = a3;
  v11 = a5;
  v12 = *a4;
  v13 = *(_QWORD *)(*a4 + 16 * a5);
  v14 = *(unsigned __int8 **)(v13 + 64);
  v72 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v72, v14, 2);
    v12 = *v8;
    v15 = *(_QWORD *)(*v8 + 16 * v11);
  }
  else
  {
    v15 = v13;
  }
  v73 = *(_DWORD *)(v13 + 60);
  v68 = *(_OWORD *)(*(_QWORD *)(v15 + 40) + 16 * *(unsigned int *)(v12 + 16 * v11 + 8));
  v71 = v68;
  if (v9)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v74);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v74);
  v18 = ExtendedSizeInBits;
  if ((_DWORD)v17 == 1)
  if ((_BYTE)v68)
    v19 = sub_1C47A8C74((unsigned __int8 *)&v71);
  else
    v19 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v71);
  v21 = v19;
  if ((_DWORD)v20 == 1)
  v23 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), v71, *((uint64_t *)&v71 + 1), v18 / v21, 0);
  v24 = v22;
  v25 = (uint64_t *)(*v8 + 16 * v11);
  v26 = *v25;
  v27 = v25[1];
  v28 = *(_QWORD *)(a1 + 832);
  v67 = v18;
  if (v28)
    v29 = *(_WORD *)(v28 + 8);
  else
    v29 = 0;
  v30 = sub_1C5D52060(a1, 155, (const llvm::APInt *)&v72, v23, v22, v26, v27, v29);
  v32 = v31;
  v33 = a5 + 1;
  if (a5 + 1 != a6)
  {
    LODWORD(v36) = 1;
    v69 = v8;
    v66 = a6;
    while (1)
    {
      v37 = *v8;
      v38 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v8 + 16 * v33) + 40)
                      + 16 * *(unsigned int *)(*v8 + 16 * v33 + 8));
      v40 = *v38;
      v39 = v38[1];
      *(_QWORD *)&v70 = v40;
      *((_QWORD *)&v70 + 1) = v39;
      if (v40 != v71)
        break;
      if ((_BYTE)v40)
        v41 = 1;
      else
        v41 = v39 == *((_QWORD *)&v71 + 1);
      if (!v41)
        goto LABEL_29;
LABEL_47:
      v56 = (uint64_t *)(v37 + 16 * v33);
      v57 = *v56;
      v58 = v56[1];
      v59 = sub_1C6366C9C(a1, v36, (uint64_t)&v72, 0);
      v62 = *(_QWORD *)(a1 + 832);
      if (v62)
        LOWORD(v62) = *(_WORD *)(v62 + 8);
      LODWORD(v36) = v36 + 1;
      v30 = sub_1C5D58E08(a1, (const char *)0x93, (const llvm::APInt *)&v72, v23, v24, (uint64_t)v30, v32, v61, v57, v58, v59, v60, SHIDWORD(v60), v62);
      v32 = v32 & 0xFFFFFFFF00000000 | v63;
      ++v33;
      v8 = v69;
      if (a6 == v33)
        goto LABEL_18;
    }
    if ((_BYTE)v40)
      v42 = sub_1C47A8C74((unsigned __int8 *)&v70);
    else
LABEL_29:
      v42 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v70);
    v44 = v42;
    if ((_DWORD)v43 == 1)
    v23 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), v70, *((uint64_t *)&v70 + 1), v67 / v44, 0);
    v24 = v45;
    v46 = *(_QWORD *)(a1 + 832);
    if (v46)
      v47 = *(_WORD *)(v46 + 8);
    else
      v47 = 0;
    v30 = sub_1C5D52060(a1, 216, (const llvm::APInt *)&v72, v23, v45, (uint64_t)v30, v32, v47);
    v49 = v48;
    if ((_BYTE)v71)
      v50 = sub_1C47A8C74((unsigned __int8 *)&v71);
    else
      v50 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v71);
    v52 = v50;
    if ((_DWORD)v51 == 1)
    if ((_BYTE)v70)
      v53 = sub_1C47A8C74((unsigned __int8 *)&v70);
    else
      v53 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v70);
    v55 = v53;
    if ((_DWORD)v54 == 1)
    v32 = v32 & 0xFFFFFFFF00000000 | v49;
    v71 = v70;
    v37 = *v69;
    v36 = v52 * (unint64_t)v36 / v55;
    a6 = v66;
    goto LABEL_47;
  }
LABEL_18:
  v34 = *(_QWORD *)(a1 + 832);
  if (v34)
    v35 = *(_WORD *)(v34 + 8);
  else
    v35 = 0;
  v64 = sub_1C5D52060(a1, 216, (const llvm::APInt *)&v72, v74, v75, (uint64_t)v30, v32, v35);
  if (v72)
    llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
  return v64;
}

void sub_1C5D026C4(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  void *v21;
  void **v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *i;
  char *v28;
  int v29;
  void *__p;
  char *v31;
  char *v32;
  char *v33;
  uint64_t *v34;

  v4 = a1[2];
  v5 = a1[1];
  if (v5 < v4)
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v6;
    v7 = (void *)(v5 + 48);
    *(_QWORD *)(v5 + 32) = v5 + 48;
    *(_QWORD *)(v5 + 40) = 0xC00000000;
    v8 = *(_DWORD *)(a2 + 40);
    if (!v8 || v5 == a2)
      goto LABEL_10;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = (const void *)(a2 + 48);
    if (v9 != a2 + 48)
    {
      *(_QWORD *)(v5 + 32) = v9;
      *(_DWORD *)(v5 + 40) = v8;
      *(_DWORD *)(v5 + 44) = *(_DWORD *)(a2 + 44);
      *(_QWORD *)(a2 + 32) = v10;
      *(_DWORD *)(a2 + 44) = 0;
      goto LABEL_9;
    }
    if (v8 >= 0xD)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 32, v5 + 48, *(unsigned int *)(a2 + 40), 4);
      v11 = *(unsigned int *)(a2 + 40);
      if (!(_DWORD)v11)
        goto LABEL_8;
      v10 = *(const void **)(a2 + 32);
      v7 = *(void **)(v5 + 32);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 40);
    }
    memcpy(v7, v10, 4 * v11);
LABEL_8:
    *(_DWORD *)(v5 + 40) = v8;
LABEL_9:
    *(_DWORD *)(a2 + 40) = 0;
LABEL_10:
    v12 = v5 + 96;
    goto LABEL_11;
  }
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
  if (v13 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 5);
  v15 = 2 * v14;
  if (2 * v14 <= v13 + 1)
    v15 = v13 + 1;
  if (v14 >= 0x155555555555555)
    v16 = 0x2AAAAAAAAAAAAAALL;
  else
    v16 = v15;
  v34 = a1 + 2;
  if (v16 > 0x2AAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v17 = 3 * v16;
  v18 = (char *)operator new(96 * v16);
  v19 = &v18[96 * v13];
  __p = v18;
  v31 = v19;
  v33 = &v18[32 * v17];
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v19 = *(_OWORD *)a2;
  *((_OWORD *)v19 + 1) = v20;
  v21 = v19 + 48;
  *((_QWORD *)v19 + 4) = v19 + 48;
  v22 = (void **)(v19 + 32);
  *((_QWORD *)v19 + 5) = 0xC00000000;
  v23 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v23 && v22 != (void **)(a2 + 32))
  {
    v24 = *(void **)(a2 + 32);
    if (v24 != (void *)(a2 + 48))
    {
      *v22 = v24;
      v29 = *(_DWORD *)(a2 + 44);
      *((_DWORD *)v19 + 10) = v23;
      *((_DWORD *)v19 + 11) = v29;
      *(_QWORD *)(a2 + 32) = a2 + 48;
      *(_DWORD *)(a2 + 44) = 0;
      goto LABEL_26;
    }
    if (v23 >= 0xD)
    {
      *((_DWORD *)v19 + 10) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v19 + 32), (uint64_t)(v19 + 48), v23, 4);
      v25 = *(unsigned int *)(a2 + 40);
      if (!(_DWORD)v25)
        goto LABEL_25;
      v24 = *(void **)(a2 + 32);
      v21 = *v22;
    }
    else
    {
      v25 = *(unsigned int *)(a2 + 40);
    }
    memcpy(v21, v24, 4 * v25);
LABEL_25:
    *((_DWORD *)v19 + 10) = v23;
LABEL_26:
    *(_DWORD *)(a2 + 40) = 0;
  }
  v32 = v19 + 96;
  sub_1C6358D80(a1, &__p);
  v12 = a1[1];
  v26 = v31;
  for (i = v32; i != v26; i -= 96)
  {
    v28 = (char *)*((_QWORD *)i - 8);
    if (i - 48 != v28)
      free(v28);
  }
  if (__p)
    operator delete(__p);
LABEL_11:
  a1[1] = v12;
}

_OWORD *sub_1C5D0295C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  _OWORD *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6358C70(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = (_OWORD *)((char *)result + 40 * v10);
    do
    {
      *result = xmmword_1C6429E90;
      result[1] = xmmword_1C6429E90;
      result = (_OWORD *)((char *)result + 40);
    }
    while (result != v11);
  }
  return result;
}

void sub_1C5D02A28(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v4 - 8);
        if (v4 - 48 != v6)
          free(v6);
        v4 -= 96;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5D02AA4(_QWORD *a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[24];

  sub_1C6358FCC((uint64_t)v16, (uint64_t)a1, (uint64_t)a2);
  if (v16[16])
  {
    v5 = (char *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (char *)a1[3];
      v8 = (v5 - v7) >> 4;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 60)
          sub_1C4764EE4();
        v12 = (char *)operator new(16 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * v8];
      *(_OWORD *)v13 = *a2;
      v6 = v13 + 16;
      if (v5 != v7)
      {
        do
        {
          v14 = *((_QWORD *)v5 - 2);
          v5 -= 16;
          v15 = *((_DWORD *)v5 + 2);
          *((_QWORD *)v13 - 2) = v14;
          v13 -= 16;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v5 != v7);
        v5 = (char *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[16 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_OWORD *)v5 = *a2;
      v6 = v5 + 16;
    }
    a1[4] = v6;
  }
}

_OWORD *sub_1C5D02BBC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_1C6429E90;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        v15 = *(_DWORD *)(v13 + 8);
        if (*(_QWORD *)v13)
          v16 = 0;
        else
          v16 = v15 > 0xFFFFFFFD;
        if (!v16)
        {
          v21 = 0;
          sub_1C6359064(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v21);
          v17 = (unint64_t *)v21;
          v18 = *(_QWORD *)v13;
          *(_DWORD *)(v21 + 8) = *(_DWORD *)(v13 + 8);
          *v17 = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = 16 * v19;
    do
    {
      *result++ = xmmword_1C6429E90;
      v20 -= 16;
    }
    while (v20);
  }
  return result;
}

unsigned int *sub_1C5D02D00(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6++ = xmmword_1C6429E90;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_OWORD *)result = xmmword_1C6429E90;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

unsigned int *sub_1C5D02E04(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  _BYTE *v10;
  _BYTE *v11;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = result[3];
  v7 = v5 + ((a3 - a2) >> 2);
  v8 = v7 > v6;
  v9 = v7 <= v6;
  if (!v8 && a2 != a3)
    goto LABEL_3;
  if (!v9)
  {
    v10 = a3;
    v11 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7, 4);
    a3 = v10;
    a2 = v11;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
LABEL_3:
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 4 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 2);
  return result;
}

_QWORD *sub_1C5D02EA0(uint64_t *a1)
{
  _QWORD *result;
  uint64_t v3;
  int v4;

  result = sub_1C61312D0(a1[1], (llvm *)a1[2], a1[3]);
  v3 = *a1;
  *(_QWORD *)v3 = result;
  *(_DWORD *)(v3 + 8) = v4;
  return result;
}

uint64_t *sub_1C5D02ED4(uint64_t ***a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *result;
  int v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;

  v7 = a4;
  v8 = (uint64_t *)&a1[5][2 * a4];
  v9 = *v8;
  if (*(_WORD *)(*v8 + 24) == 146)
  {
    result = sub_1C5D02FC0((unsigned int *)a1[6], (uint64_t)v8, (_BOOL8)v8, (uint64_t)a2);
  }
  else
  {
    v15 = (uint64_t)a1[1];
    v16 = (llvm *)a1[2];
    v17 = (uint64_t)a1[3];
    v18 = (uint64_t)a1[4];
    v19 = v8[1];
    v20 = sub_1C61312D0(v15, v16, v17);
    result = sub_1C5D41DE4(v15, v16, v17, v18, v9, v19, (uint64_t)v20, v21, a2, a3);
  }
  v12 = *a1;
  *v12 = result;
  *((_DWORD *)v12 + 2) = v11;
  v13 = (uint64_t)&a1[5][2 * v7];
  v14 = **a1;
  *(_DWORD *)(v13 + 8) = *((_DWORD *)*a1 + 2);
  *(_QWORD *)v13 = v14;
  return result;
}

uint64_t *sub_1C5D02FC0(unsigned int *a1, uint64_t a2, _BOOL8 a3, uint64_t a4)
{
  unsigned __int8 *v8;
  int v9;
  unint64_t EVT;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  llvm *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD v42[2];
  void *v43;
  uint64_t v44;
  _QWORD v45[7];

  v45[6] = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned __int8 *)a1 + 16);
  v8 = (unsigned __int8 *)(a1 + 4);
  if (v9)
  {
    v14 = sub_1C47F37A0(v8);
    v13 = 0;
    v12 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)a1 + 3) + 24), 0, a3);
    v12 = v11;
    v13 = EVT & 0xFFFFFFFFFFFFFF00;
    v14 = EVT;
  }
  v15 = (llvm *)(v13 | v14);
  v16 = *a1;
  v17 = sub_1C61312D0(*((_QWORD *)a1 + 1), v15, v12);
  v43 = v45;
  v44 = 0x300000000;
  sub_1C4825C80((unsigned int *)&v43, v16, (uint64_t)v17, v18);
  LODWORD(v19) = *a1;
  if (*a1)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = *(_DWORD *)(a4 + 4 * v21);
      if (v22 != -1)
      {
        if (v22 >= v19)
        {
          v23 = a3;
        }
        else
        {
          LODWORD(v19) = 0;
          v23 = a2;
        }
        v24 = *(_QWORD *)(*(_QWORD *)v23 + 32) + 40 * (v22 - v19);
        v25 = (char *)v43 + v20;
        v26 = *(_QWORD *)v24;
        *((_DWORD *)v25 + 2) = *(_DWORD *)(v24 + 8);
        *(_QWORD *)v25 = v26;
        v27 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)v43 + v20) + 40)
                        + 16 * *(unsigned int *)((char *)v43 + v20 + 8));
        v29 = *v27;
        v28 = v27[1];
        v42[0] = v29;
        v42[1] = v28;
        v30 = v28 == v12 || v14 != 0;
        if ((v14 != v29 || !v30) && sub_1C50989E0((unsigned __int8 *)v42, (uint64_t)v15, v12))
        {
          v31 = *((_QWORD *)a1 + 1);
          v32 = *(_QWORD *)(v31 + 832);
          if (v32)
            v33 = *(_WORD *)(v32 + 8);
          else
            v33 = 0;
          v34 = sub_1C5D52060(v31, 201, *((const llvm::APInt **)a1 + 4), v15, v12, *(_QWORD *)((char *)v43 + v20), *(_QWORD *)((char *)v43 + v20 + 8), v33);
          v35 = (char *)v43 + v20;
          *(_QWORD *)v35 = v34;
          *((_DWORD *)v35 + 2) = v36;
        }
      }
      ++v21;
      v19 = *a1;
      v20 += 16;
    }
    while (v21 < v19);
  }
  v37 = *((_QWORD *)a1 + 1);
  v38 = *(_QWORD *)(v37 + 832);
  if (v38)
    v39 = *(unsigned __int16 *)(v38 + 8);
  else
    v39 = 0;
  v40 = sub_1C636D0C8(v37, (const char *)0x92, *((const llvm::APInt **)a1 + 4), *((llvm **)a1 + 2), *((_QWORD *)a1 + 3), (uint64_t *)v43, v44, v39);
  if (v43 != v45)
    free(v43);
  return v40;
}

_QWORD *sub_1C5D03210(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *result;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v8 = **(unsigned int ***)a1;
  if ((*v8 & 0x80000000) != 0)
  {
    *v8 = a4;
  }
  else
  {
    v9 = *(_BYTE **)(*(_QWORD *)a1 + 8);
    if (*v8 == a4)
    {
      *v9 = 1;
LABEL_6:
      v10 = *(_QWORD *)(a1 + 48);
      goto LABEL_8;
    }
    if (*v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 56);
LABEL_8:
  v11 = a4;
  v12 = (uint64_t *)(v10 + 16 * a4);
  v13 = (uint64_t *)(v10 + 16 * a5);
  if (*(_WORD *)(*v12 + 24) != 146)
  {
    v14 = *v13;
    goto LABEL_12;
  }
  v14 = *v13;
  if (*(_WORD *)(*v13 + 24) != 146)
  {
LABEL_12:
    result = sub_1C5D41DE4(*(_QWORD *)(a1 + 16), *(llvm **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *v12, v12[1], v14, *(_QWORD *)(v10 + 16 * a5 + 8), a2, a3);
    goto LABEL_13;
  }
  result = sub_1C5D02FC0(*(unsigned int **)(a1 + 64), (uint64_t)v12, (_BOOL8)v13, (uint64_t)a2);
LABEL_13:
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v17 = result;
  *(_DWORD *)(v17 + 8) = v16;
  v18 = *(uint64_t **)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 48) + 16 * v11;
  v20 = *v18;
  *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
  *(_QWORD *)v19 = v20;
  return result;
}

uint64_t sub_1C5D03314(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = 0;
    do
    {
      v4 = *(unsigned __int16 *)(v2 + 24);
      if (*(__int16 *)(v2 + 24) < 0)
      {
        if (v4 == 65525)
          goto LABEL_16;
        v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 144) + 8)
                                + 48 * (*(unsigned __int16 *)(v2 + 24) ^ 0xFFFFu)
                                + 4);
        if (v3 >= *(unsigned __int16 *)(v2 + 58))
          v3 = *(unsigned __int16 *)(v2 + 58);
      }
      else
      {
        v5 = v4 - 261;
        if (v4 == 50)
          v6 = v3 + 1;
        else
          v6 = v3;
        if (v5 < 2)
          ++v3;
        else
          v3 = v6;
      }
      if (!*(_WORD *)(v2 + 56))
        break;
      v7 = (unsigned int *)(*(_QWORD *)(v2 + 32) + 40 * (*(unsigned __int16 *)(v2 + 56) - 1));
      v2 = *(_QWORD *)v7;
    }
    while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v7 + 40) + 16 * v7[2]) == 172);
  }
  else
  {
LABEL_16:
    LOWORD(v3) = 0;
  }
  *((_WORD *)a2 + 112) = v3;
  return result;
}

void sub_1C5D033BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD **)(a2 + 112);
    v7 = &v6[2 * v4];
    do
    {
      v8 = *v6 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(_QWORD **)(v8 + 32);
        v12 = 16 * v9;
        while (1)
        {
          v13 = *v11 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_WORD *)(v13 + 228) & 0x400) != 0)
          {
            v13 = v10;
          }
          else if (v10 && v10 != v13)
          {
            break;
          }
          v11 += 2;
          v10 = v13;
          v12 -= 16;
          if (!v12)
            goto LABEL_13;
        }
      }
      v13 = 0;
LABEL_13:
      if (v13 == a2)
        ++v5;
      v6 += 2;
    }
    while (v6 != v7);
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1[3] + 4 * *(unsigned int *)(a2 + 192)) = v5;
  v15 = (_QWORD *)a1[7];
  v14 = a1[8];
  if ((unint64_t)v15 >= v14)
  {
    v17 = (_QWORD *)a1[6];
    v18 = v15 - v17;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      abort();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_1C4764EE4();
      v22 = (char *)operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[8 * v18];
    *(_QWORD *)v23 = a2;
    v16 = v23 + 8;
    if (v15 != v17)
    {
      do
      {
        v24 = *--v15;
        *((_QWORD *)v23 - 1) = v24;
        v23 -= 8;
      }
      while (v15 != v17);
      v15 = (_QWORD *)a1[6];
    }
    a1[6] = v23;
    a1[7] = v16;
    a1[8] = &v22[8 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = a2;
    v16 = v15 + 1;
  }
  a1[7] = v16;
}

BOOL sub_1C5D03538(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BOOL8 result;

  if (!a2)
    return 0;
  v3 = *a2;
  if (!*a2)
    return 0;
  if (*(_WORD *)(v3 + 56))
  {
    v5 = (unsigned int *)(*(_QWORD *)(v3 + 32) + 40 * (*(unsigned __int16 *)(v3 + 56) - 1));
    if (*(_QWORD *)v5)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v5 + 40) + 16 * v5[2]) == 172)
        return 1;
    }
  }
  v6 = *(__int16 *)(v3 + 24);
  if ((v6 & 0x80000000) == 0
    || ((v7 = (unsigned __int16)~(_WORD)v6, (v7 - 8) >= 4) ? (v8 = v7 == 18) : (v8 = 1),
        v8
     || (result = llvm::DFAPacketizer::canReserveResources(a1[20], *(_QWORD *)(a1[18] + 8) + 48 * (unsigned __int16)~(_WORD)v6))))
  {
    v9 = a1[21];
    v10 = a1[22];
    if (v9 != v10)
    {
      while (1)
      {
        v11 = *(unsigned int *)(*(_QWORD *)v9 + 120);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD **)(*(_QWORD *)v9 + 112);
          v13 = 16 * v11;
          while (1)
          {
            v14 = *v12 & 0xFFFFFFFFFFFFFFF8;
            v15 = (*v12 & 6) != 0 ? 6 : v14 == (_QWORD)a2;
            if (v15 != 6 && v15 != 0)
              break;
            v12 += 2;
            v13 -= 16;
            if (!v13)
              goto LABEL_26;
          }
          if ((uint64_t *)v14 == a2)
            return 0;
        }
LABEL_26:
        v9 += 8;
        if (v9 == v10)
          return 1;
      }
    }
    return 1;
  }
  return result;
}

void sub_1C5D03664(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  unint64_t v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  if (!sub_1C5D03538((_QWORD *)a1, a2)
    || (v4 = *a2, *(_WORD *)(*a2 + 56))
    && (v5 = (unsigned int *)(*(_QWORD *)(v4 + 32) + 40 * (*(unsigned __int16 *)(*a2 + 56) - 1)),
        *(_QWORD *)v5)
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v5 + 40) + 16 * v5[2]) == 172)
  {
    v6 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v6 + 40) = 1;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
      sub_1C61DCC98(v7);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
    v4 = *a2;
    if (!*a2)
      goto LABEL_9;
  }
  v8 = *(__int16 *)(v4 + 24);
  if (v8 < 0)
  {
    v13 = (unsigned __int16)~(_WORD)v8;
    if ((v13 - 8) >= 4 && v13 != 18)
      llvm::DFAPacketizer::reserveResources(*(_QWORD *)(a1 + 160), *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 48 * (unsigned __int16)~(_WORD)v8);
    v16 = *(uint64_t ***)(a1 + 176);
    v15 = *(_QWORD *)(a1 + 184);
    if ((unint64_t)v16 >= v15)
    {
      v17 = *(_QWORD **)(a1 + 168);
      v18 = v16 - (uint64_t **)v17;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        abort();
      v20 = v15 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_1C4764EE4();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = (uint64_t **)&v22[8 * v18];
      *v23 = a2;
      v12 = v23 + 1;
      if (v16 != v17)
      {
        do
        {
          v24 = *--v16;
          *--v23 = v24;
        }
        while (v16 != v17);
        v16 = *(uint64_t ***)(a1 + 168);
      }
      *(_QWORD *)(a1 + 168) = v23;
      *(_QWORD *)(a1 + 176) = v12;
      *(_QWORD *)(a1 + 184) = &v22[8 * v21];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = a2;
      v12 = v16 + 1;
    }
    *(_QWORD *)(a1 + 176) = v12;
    v11 = *(_QWORD **)(a1 + 168);
  }
  else
  {
LABEL_9:
    v9 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v9 + 40) = 1;
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
      sub_1C61DCC98(v10);
    v11 = *(_QWORD **)(a1 + 168);
    *(_QWORD *)(a1 + 176) = v11;
    v12 = v11;
  }
  if (**(unsigned int **)(a1 + 152) <= (unint64_t)(v12 - v11))
  {
    v25 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v25 + 40) = 1;
    v26 = *(_QWORD *)(v25 + 24);
    if (v26)
    {
      sub_1C61DCC98(v26);
      v11 = *(_QWORD **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v11;
  }
}

uint64_t sub_1C5D03868(uint64_t a1, llvm::SUnit *this)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int *v18;

  if ((*((_WORD *)this + 114) & 0x400) != 0)
    return 1;
  if ((*((_WORD *)this + 114) & 0x800) != 0)
    v5 = 201;
  else
    v5 = 1;
  v6 = *(_DWORD *)(a1 + 196);
  v7 = dword_1ED824378;
  if (v6 <= dword_1ED824378)
  {
    if ((*((_BYTE *)this + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(this);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * *((unsigned int *)this + 48)) + *((_DWORD *)this + 61);
    v9 = -10;
  }
  else
  {
    if ((*((_BYTE *)this + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(this);
    v8 = *((_DWORD *)this + 61);
    v9 = -20;
  }
  v10 = v6 > v7;
  v11 = v5 + 10 * v8;
  if (sub_1C5D03538((_QWORD *)a1, (uint64_t *)this))
    v11 *= 4;
  result = v11 + sub_1C6359984((_QWORD *)a1, (unsigned int *)this, v10) * v9;
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v13 = *(unsigned __int16 *)(v12 + 24);
      if (*(__int16 *)(v12 + 24) < 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 48 * (unsigned __int16)~(_WORD)v13 + 8) & 0x80) != 0)
          result = result + 5 * *(unsigned __int16 *)(v12 + 58) + 50;
      }
      else
      {
        v14 = result + 15;
        if (v13 - 261 >= 2)
          v14 = result;
        v15 = v13 > 0x32;
        v16 = (1 << v13) & 0x6000000000004;
        if (v15 || v16 == 0)
          result = v14;
        else
          result = (result + 5);
      }
      if (!*(_WORD *)(v12 + 56))
        break;
      v18 = (unsigned int *)(*(_QWORD *)(v12 + 32) + 40 * (*(unsigned __int16 *)(v12 + 56) - 1));
      v12 = *(_QWORD *)v18;
    }
    while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v18 + 40) + 16 * v18[2]) == 172);
  }
  return result;
}

uint64_t sub_1C5D039F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;

  if ((*(_WORD *)(a2 + 228) & 0x200) == 0)
  {
    v2 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v2)
    {
      v3 = result;
      v4 = 0;
      v5 = *(_QWORD **)(a2 + 32);
      v6 = 16 * v2;
      do
      {
        v7 = *v5 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_WORD *)(v7 + 228) & 0x400) == 0)
        {
          if (v4)
          {
            v8 = v4 == v7;
            v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
            if (!v8)
              return result;
          }
          else
          {
            v4 = *v5 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v5 += 2;
        v6 -= 16;
      }
      while (v6);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 228) & 0x200) != 0)
        {
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 104))(result, v4);
          return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 88))(v3, v4);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5D03A9C()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;
  int v5;

  v5 = 1;
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable use of DFA during scheduling";
  v1.n128_u64[1] = 36;
  sub_1C635A070(&v5, &v4, (char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED824238, &dword_1C475E000);
  v5 = 1;
  v4 = 1;
  v2 = 5;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Track reg pressure and switch priority to in-depth";
  v1.n128_u64[1] = 50;
  sub_1C635A1B8(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED8242F8, &dword_1C475E000);
}

uint64_t *sub_1C5D03B70(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = &qword_1ED8369D8;
  while (1)
  {
    v3 = v2;
    v2 = (uint64_t *)*v2;
    if (!v2)
      break;
    if (v2 == a1)
    {
      v4 = a1;
      if (qword_1ED8369E8)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)qword_1ED8369E8 + 32))(qword_1ED8369E8, a1[1], a1[2]);
        v4 = (uint64_t *)*v3;
      }
      *v3 = *v4;
      return a1;
    }
  }
  return a1;
}

_QWORD *sub_1C5D03BD8(_QWORD *a1, char *__s, const char *a3, uint64_t a4)
{
  size_t v8;
  size_t v9;

  *a1 = 0;
  a1[1] = __s;
  if (__s)
    v8 = strlen(__s);
  else
    v8 = 0;
  a1[2] = v8;
  a1[3] = a3;
  if (a3)
    v9 = strlen(a3);
  else
    v9 = 0;
  a1[4] = v9;
  a1[5] = a4;
  *a1 = qword_1ED8369D8;
  qword_1ED8369D8 = (uint64_t)a1;
  if (qword_1ED8369E8)
    (*(void (**)(uint64_t, char *, size_t, uint64_t, const char *))(*(_QWORD *)qword_1ED8369E8 + 24))(qword_1ED8369E8, __s, v8, a4, a3);
  return a1;
}

void sub_1C5D03C8C(llvm::ScheduleDAG *this)
{
  void *v2;
  void *v3;
  char *v4;

  *(_QWORD *)this = &off_1E8198628;
  v2 = (void *)*((_QWORD *)this + 105);
  if (v2)
  {
    *((_QWORD *)this + 106) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 102);
  if (v3)
  {
    *((_QWORD *)this + 103) = v3;
    operator delete(v3);
  }
  v4 = (char *)*((_QWORD *)this + 83);
  if (v4 != (char *)this + 680)
    free(v4);
  sub_1C635A3B8(this);
}

void sub_1C5D03CEC(llvm::ScheduleDAG *this)
{
  void *v2;
  void *v3;
  char *v4;

  *(_QWORD *)this = &off_1E8198628;
  v2 = (void *)*((_QWORD *)this + 105);
  if (v2)
  {
    *((_QWORD *)this + 106) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 102);
  if (v3)
  {
    *((_QWORD *)this + 103) = v3;
    operator delete(v3);
  }
  v4 = (char *)*((_QWORD *)this + 83);
  if (v4 != (char *)this + 680)
    free(v4);
  sub_1C635A3B8(this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5D03D60(uint64_t a1)
{
  char **v2;
  unint64_t v3;
  char *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int *v39;
  _WORD *v40;
  unsigned int v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _WORD *v63;
  BOOL v64;
  unsigned __int16 *v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t *v72;
  int v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  int v80;
  int v81;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  llvm::SUnit *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  llvm::SUnit *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  char v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unsigned int *v106;
  unsigned int *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  __int128 v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const llvm::SDep *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  unint64_t v136;
  uint64_t *v137;
  __int128 v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  __int16 *v150;
  __int16 v151;
  int v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  __int128 *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  const llvm::SDep *v174;
  uint64_t v175;
  uint64_t v176;
  const llvm::SDep *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t *v193;
  uint64_t *v194;
  unint64_t v195;
  int64_t v196;
  int64_t v197;
  uint64_t v198;
  llvm::SUnit *v199[2];
  llvm::SUnit *v200[2];
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int64_t v204;
  int v205;
  int v206;
  uint64_t *v207;
  uint64_t **v208;
  unsigned int v209;
  char v210;
  llvm::SUnit *v211;
  unint64_t v212;
  llvm::SUnit *v213;
  unint64_t v214;
  llvm::SUnit *v215;
  uint64_t v216[2];
  unsigned int v217;
  __int128 v218;
  __int128 v219;
  void *v220;
  uint64_t v221;
  _BYTE v222[32];
  void *v223[2];
  _BYTE v224[64];
  _BYTE v225[72];
  void *__src;
  unsigned int v227[18];
  void *v228;
  uint64_t v229;
  _BYTE v230[16];
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD **v235;
  _QWORD *v236[11];

  v236[9] = *(_QWORD **)MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 808) = 0;
  v2 = (char **)(a1 + 816);
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  v4 = *(char **)(a1 + 824);
  v5 = *(_BYTE **)(a1 + 816);
  v6 = (char *)(v4 - v5);
  v7 = (v4 - v5) >> 3;
  if (v3 <= v7)
  {
    if (v3 < v7)
      *(_QWORD *)(a1 + 824) = &v5[8 * v3];
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 832);
    if (v3 - v7 <= (v8 - (uint64_t)v4) >> 3)
    {
      bzero(*(void **)(a1 + 824), ((8 * v3 - (_QWORD)v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_QWORD *)(a1 + 824) = &v4[8 * (v3 - v7)];
    }
    else
    {
      v9 = v8 - (_QWORD)v5;
      v10 = (v8 - (uint64_t)v5) >> 2;
      if (v10 <= v3)
        v10 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11 >> 61)
        goto LABEL_318;
      v12 = (char *)operator new(8 * v11);
      v13 = &v12[8 * v7];
      bzero(v13, ((8 * v3 - (_QWORD)v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v4 != v5)
      {
        do
        {
          v14 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v4 != v5);
        v4 = *v2;
      }
      *(_QWORD *)(a1 + 816) = v13;
      *(_QWORD *)(a1 + 824) = &v12[8 * v3];
      *(_QWORD *)(a1 + 832) = &v12[8 * v11];
      if (v4)
        operator delete(v4);
    }
    v3 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  }
  LODWORD(v231) = 0;
  v15 = *(_QWORD *)(a1 + 840);
  v16 = (*(_QWORD *)(a1 + 848) - v15) >> 2;
  if (v3 <= v16)
  {
    if (v3 < v16)
      *(_QWORD *)(a1 + 848) = v15 + 4 * v3;
  }
  else
  {
    sub_1C50F0728(a1 + 840, v3 - v16, &v231);
  }
  sub_1C635B36C((uint64_t *)a1);
  sub_1C5D053A4((char *)a1, *(_QWORD *)(a1 + 376), *(_DWORD *)(a1 + 384), 0);
  v17 = *(_QWORD *)(a1 + 48);
  if (v17 == *(_QWORD *)(a1 + 56))
  {
    v20 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v18 = v17 + 272 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 192) + 28);
    *(_WORD *)(v18 + 228) |= 0x200u;
    v19 = *(unsigned int *)(a1 + 672);
    if (v19 >= *(_DWORD *)(a1 + 676))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 664, a1 + 680, v19 + 1, 8);
      LODWORD(v19) = *(_DWORD *)(a1 + 672);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v19) = v18;
    ++*(_DWORD *)(a1 + 672);
    v17 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 56);
  }
  v220 = v222;
  v221 = 0x400000000;
  v216[0] = 0;
  v216[1] = 0;
  v217 = 0;
  v208 = (uint64_t **)(a1 + 640);
  sub_1C4DB1D18(a1 + 640, 0xF0F0F0F0F0F0F0F1 * ((v20 - v17) >> 4));
  if (*(_DWORD *)(a1 + 672))
  {
    v21 = 0;
    while (1)
    {
      v209 = v21;
      sub_1C6326114((uint64_t)v216);
      v22 = *(unsigned int *)(a1 + 672);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v22 - 8);
        *(_DWORD *)(a1 + 672) = v22 - 1;
      }
      else
      {
        v23 = 0;
      }
      v210 = 0;
      while (v23)
      {
        __src = &v227[2];
        *(_QWORD *)v227 = 0x400000000;
        if (*(_DWORD *)(a1 + 808))
        {
          v231 = &v233;
          v232 = 0x400000000;
          v236[0] = 0;
          v236[1] = 0;
          v235 = v236;
          v24 = *(unsigned int *)(v23 + 40);
          if ((_DWORD)v24)
          {
            v25 = 16 * v24;
            v26 = (unsigned int *)(*(_QWORD *)(v23 + 32) + 8);
            do
            {
              v27 = *((_QWORD *)v26 - 1);
              if ((v27 & 6) == 0 && *v26)
                sub_1C5D054BC(v27 & 0xFFFFFFFFFFFFFFF8, *v26, v2, (uint64_t)&v231, (uint64_t)&__src, *(_QWORD *)(a1 + 24));
              v26 += 4;
              v25 -= 16;
            }
            while (v25);
          }
          v28 = *(_QWORD *)v23;
          if (*(_QWORD *)v23)
          {
            do
            {
              v29 = *(unsigned __int16 *)(v28 + 24);
              if ((v29 - 261) > 1)
              {
                if ((__int16)v29 < 0)
                {
                  v40 = *(_WORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48 * (unsigned __int16)~(_WORD)v29 + 32);
                  if (v40)
                  {
                    v41 = (unsigned __int16)*v40;
                    if (*v40)
                    {
                      v42 = v40 + 1;
                      do
                      {
                        sub_1C5D054BC(v23, v41, v2, (uint64_t)&v231, (uint64_t)&__src, *(_QWORD *)(a1 + 24));
                        v43 = *v42++;
                        v41 = v43;
                      }
                      while (v43);
                    }
                  }
                }
              }
              else
              {
                v30 = *(unsigned __int16 *)(v28 + 56);
                v31 = (unsigned int *)(*(_QWORD *)(v28 + 32) + 40 * (v30 - 1));
                if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v31 + 40) + 16 * v31[2]) == 172)
                  v32 = v30 - 1;
                else
                  v32 = *(unsigned __int16 *)(v28 + 56);
                if (v32 != 4)
                {
                  v33 = 4;
                  do
                  {
                    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 40 * v33) + 80);
                    v35 = (_QWORD *)(v34 + 24);
                    if (*(_DWORD *)(v34 + 32) >= 0x41u)
                      v35 = (_QWORD *)*v35;
                    v36 = *(_DWORD *)v35;
                    v37 = (unsigned __int16)v36 >> 3;
                    ++v33;
                    if ((v36 & 7u) - 2 > 2)
                    {
                      v33 += v37;
                    }
                    else if ((unsigned __int16)v36 >> 3)
                    {
                      do
                      {
                        v38 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 40 * v33) + 76);
                        if (v38 - 1 <= 0x3FFFFFFE)
                          sub_1C5D054BC(v23, v38, v2, (uint64_t)&v231, (uint64_t)&__src, *(_QWORD *)(a1 + 24));
                        ++v33;
                        --v37;
                      }
                      while (v37);
                    }
                  }
                  while (v33 != v32);
                }
              }
              if (!*(_WORD *)(v28 + 56))
                break;
              v39 = (unsigned int *)(*(_QWORD *)(v28 + 32) + 40 * (*(unsigned __int16 *)(v28 + 56) - 1));
              v28 = *(_QWORD *)v39;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v39 + 40) + 16 * v39[2]) == 172);
          }
          v44 = v227[0];
          sub_1C47655E8((uint64_t)&v235, v236[0]);
          if (v231 != &v233)
            free(v231);
          if (!v44)
            goto LABEL_83;
          v231 = (uint64_t *)v23;
          v232 = (uint64_t)&v234;
          v233 = 0x400000000;
          v45 = v227[0];
          if (v227[0])
          {
            if (v227[0] < 5)
            {
              v46 = &v234;
              v47 = v227[0];
              goto LABEL_74;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)&v234, v227[0], 4);
            v47 = v227[0];
            if (v227[0])
            {
              v46 = (uint64_t *)v232;
LABEL_74:
              memcpy(v46, __src, 4 * v47);
            }
            LODWORD(v233) = v45;
          }
          sub_1C635A3F8((uint64_t)v216, &v231, (uint64_t)&v232, (uint64_t)v225);
          if ((uint64_t *)v232 != &v234)
            free((void *)v232);
          *(_WORD *)(v23 + 228) |= 0x100u;
          v48 = v221;
          if (v221 >= (unint64_t)HIDWORD(v221))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v220, (uint64_t)v222, v221 + 1, 8);
            v48 = v221;
          }
          *((_QWORD *)v220 + v48) = v23;
          LODWORD(v221) = v221 + 1;
          v49 = *(unsigned int *)(a1 + 672);
          if ((_DWORD)v49)
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v49 - 8);
            *(_DWORD *)(a1 + 672) = v49 - 1;
          }
          else
          {
            v23 = 0;
          }
          LOBYTE(v44) = 1;
          v210 = 1;
          goto LABEL_83;
        }
        LOBYTE(v44) = 0;
LABEL_83:
        if (__src != &v227[2])
          free(__src);
        if ((v44 & 1) == 0)
          break;
      }
      if ((v210 & 1) != 0 && !v23)
        break;
LABEL_93:
      if ((_DWORD)v221)
      {
        v50 = 0;
        v51 = 8 * v221;
        do
        {
          v52 = (char *)v220;
          *(_WORD *)(*(_QWORD *)((char *)v220 + v50) + 228) &= ~0x100u;
          v53 = *(_QWORD *)&v52[v50];
          if ((*(_BYTE *)(v53 + 229) & 2) != 0)
          {
            v54 = *(unsigned int *)(a1 + 672);
            if (v54 >= *(unsigned int *)(a1 + 676))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 664, a1 + 680, v54 + 1, 8);
              v54 = *(unsigned int *)(a1 + 672);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v54) = v53;
            ++*(_DWORD *)(a1 + 672);
          }
          v50 += 8;
        }
        while (v51 != v50);
      }
      LODWORD(v221) = 0;
      if (v23)
      {
        llvm::SUnit::setHeightToAtLeast((llvm::SUnit *)v23, v209);
        v59 = *(uint64_t **)(a1 + 648);
        v60 = *(_QWORD *)(a1 + 656);
        if ((unint64_t)v59 < v60)
        {
          *v59 = v23;
          v61 = v59 + 1;
LABEL_156:
          *(_QWORD *)(a1 + 648) = v61;
          sub_1C5D053A4((char *)a1, *(_QWORD *)(v23 + 32), *(_DWORD *)(v23 + 40), v209);
          v91 = *(unsigned int *)(v23 + 120);
          if ((_DWORD)v91)
          {
            v92 = 16 * v91;
            v93 = (unsigned int *)(*(_QWORD *)(v23 + 112) + 8);
            do
            {
              v94 = *((_QWORD *)v93 - 1);
              if ((v94 & 6) == 0)
              {
                v95 = *v93;
                if ((_DWORD)v95)
                {
                  v96 = *(_DWORD *)(*(_QWORD *)(a1 + 840) + 4 * v95);
                  v97 = (llvm::SUnit *)(v94 & 0xFFFFFFFFFFFFFFF8);
                  if ((*(_BYTE *)((v94 & 0xFFFFFFFFFFFFFFF8) + 236) & 2) == 0)
                    llvm::SUnit::ComputeHeight(v97);
                  if (v96 == *((_DWORD *)v97 + 61))
                  {
                    --*(_DWORD *)(a1 + 808);
                    *(_QWORD *)(*(_QWORD *)(a1 + 816) + 8 * *v93) = 0;
                    *(_DWORD *)(*(_QWORD *)(a1 + 840) + 4 * *v93) = 0;
                  }
                }
              }
              v93 += 4;
              v92 -= 16;
            }
            while (v92);
          }
          *(_WORD *)(v23 + 228) |= 0x400u;
          goto LABEL_101;
        }
        v83 = *v208;
        v84 = v59 - *v208;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61)
          abort();
        v86 = v60 - (_QWORD)v83;
        if (v86 >> 2 > v85)
          v85 = v86 >> 2;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
          v85 = 0x1FFFFFFFFFFFFFFFLL;
        v211 = (llvm::SUnit *)v85;
        if (!v85)
        {
          v87 = 0;
LABEL_149:
          v88 = (uint64_t *)&v87[8 * v84];
          *v88 = v23;
          v61 = v88 + 1;
          if (v59 == v83)
          {
            v89 = v211;
          }
          else
          {
            v89 = v211;
            do
            {
              v90 = *--v59;
              *--v88 = v90;
            }
            while (v59 != v83);
            v59 = *v208;
          }
          *(_QWORD *)(a1 + 640) = v88;
          *(_QWORD *)(a1 + 648) = v61;
          *(_QWORD *)(a1 + 656) = &v87[8 * (_QWORD)v89];
          if (v59)
            operator delete(v59);
          goto LABEL_156;
        }
        if (!(v85 >> 61))
        {
          v87 = (char *)operator new(8 * v85);
          goto LABEL_149;
        }
LABEL_318:
        sub_1C4764EE4();
      }
LABEL_101:
      v21 = v209 + 1;
      if (!*(_DWORD *)(a1 + 672))
        goto LABEL_303;
    }
    v215 = 0;
    v215 = *(llvm::SUnit **)v220;
    v55 = *(unsigned int *)sub_1C635A728(v216, &v215)[1];
    v56 = *(_QWORD *)&(*v2)[8 * v55];
    v57 = *(unsigned __int16 *)(*(_QWORD *)v56 + 24);
    if (v57 == 50)
    {
      v58 = 1;
    }
    else
    {
      v62 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48 * (__int16)~(_WORD)v57;
      v58 = *(unsigned __int8 *)(v62 + 4);
      v63 = *(_WORD **)(v62 + 32);
      if (*v63)
        v64 = (_DWORD)v55 == (unsigned __int16)*v63;
      else
        v64 = 1;
      if (!v64)
      {
        v65 = v63 + 1;
        do
        {
          ++v58;
          v67 = *v65++;
          v66 = v67;
          if (v67)
            v68 = (_DWORD)v55 == v66;
          else
            v68 = 1;
        }
        while (!v68);
      }
    }
    v69 = *(_QWORD *)(a1 + 24);
    v70 = *(char **)(v69 + 240);
    v71 = *(char **)(v69 + 248);
    if (v70 != v71)
    {
      v72 = 0;
      v73 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v56 + 40) + 16 * v58);
      v74 = (unint64_t)(v71 - v70) >> 3;
      v75 = v55 - 0x40000000;
      v76 = v55 >> 3;
      while (1)
      {
        v77 = *(uint64_t **)v70;
        if (v73 == 1)
        {
          if (v75 >= 0xC0000001)
          {
            v78 = *v77;
LABEL_122:
            if (v76 < *(unsigned __int16 *)(v78 + 22)
              && ((1 << (v55 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v78 + 8) + v76)) != 0
              && (!v72
               || v77 != v72
               && ((*(_DWORD *)(v72[1] + ((*(unsigned __int16 *)(v78 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v78 + 24)) & 1) != 0))
            {
              v72 = *(uint64_t **)v70;
            }
          }
        }
        else
        {
          v78 = *v77;
          v79 = *(unsigned __int8 **)(*(_QWORD *)(v69 + 264)
                                    + 24
                                    * (*(unsigned __int16 *)(*v77 + 24)
                                     + *(_DWORD *)(v69 + 272) * (_DWORD)v74)
                                    + 16);
          do
          {
            v81 = *v79++;
            v80 = v81;
          }
          while (v81 != 1 && v80 != v73);
          if (v75 >= 0xC0000001 && v80 != 1)
            goto LABEL_122;
        }
        v70 += 8;
        if (v70 == v71)
          goto LABEL_168;
      }
    }
    v72 = 0;
LABEL_168:
    v98 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v69 + 248))(v69, v72, 3221225473);
    v207 = v72;
    if ((uint64_t *)v98 == v72)
    {
LABEL_191:
      __src = &v227[2];
      *(_QWORD *)v227 = 0x200000000;
      v109 = v98;
      v110 = sub_1C635AC34(a1, 0);
      *(_QWORD *)(v110 + 256) = v109;
      *(_QWORD *)(v110 + 264) = v207;
      v197 = v110;
      v111 = sub_1C635AC34(a1, 0);
      *(_QWORD *)(v111 + 256) = v207;
      *(_QWORD *)(v111 + 264) = v109;
      v204 = v111;
      v231 = &v233;
      v232 = 0x400000000;
      v212 = v56;
      v112 = *(unsigned int *)(v56 + 120);
      if ((_DWORD)v112)
      {
        v113 = 0;
        v114 = *(uint64_t **)(v56 + 112);
        v115 = 16 * v112;
        do
        {
          v116 = *v114;
          if ((~*(_DWORD *)v114 & 6) != 0 || *((_DWORD *)v114 + 2) != 3)
          {
            v117 = v116 & 0xFFFFFFFFFFFFFFF8;
            if ((*(_WORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 228) & 0x400) != 0)
            {
              *(_OWORD *)v223 = *(_OWORD *)v114;
              v223[0] = (void *)((uint64_t)v223[0] & 7 | (unint64_t)v204);
              llvm::SUnit::addPred(v117, (const llvm::SDep *)v223, 1);
              *(_QWORD *)v225 = v117;
              *(_OWORD *)&v225[8] = *(_OWORD *)v114;
              v118 = sub_1C4926708((uint64_t)&v231, (unint64_t)v225, 1);
              v119 = &v231[3 * v232];
              v120 = *(_OWORD *)v118;
              v119[2] = *(_QWORD *)(v118 + 16);
              *(_OWORD *)v119 = v120;
              v113 = v232 + 1;
              LODWORD(v232) = v232 + 1;
            }
          }
          v114 += 2;
          v115 -= 16;
        }
        while (v115);
        if (v113)
        {
          v121 = 0;
          v122 = 24 * v113;
          do
          {
            llvm::SUnit::removePred(v231[v121 / 8], (const llvm::SDep *)&v231[v121 / 8 + 1]);
            v121 += 24;
          }
          while (v122 != v121);
        }
      }
      *(_QWORD *)v225 = v212 & 0xFFFFFFFFFFFFFFF9;
      v123 = *(unsigned __int16 *)(v212 + 226);
      *(_DWORD *)&v225[8] = v55;
      *(_DWORD *)&v225[12] = v123;
      llvm::SUnit::addPred(v197, (const llvm::SDep *)v225, 1);
      v223[0] = (void *)(v197 & 0xFFFFFFFFFFFFFFF9);
      v124 = *(unsigned __int16 *)(v197 + 226);
      LODWORD(v223[1]) = 0;
      HIDWORD(v223[1]) = v124;
      llvm::SUnit::addPred(v204, (const llvm::SDep *)v223, 1);
      v125 = v227[0];
      if (v227[0] >= (unint64_t)v227[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v227[2], v227[0] + 1, 8);
        v125 = v227[0];
      }
      *((_QWORD *)__src + v125) = v197;
      v126 = v227[0] + 1;
      v227[0] = v126;
      if (v126 >= v227[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v227[2], v126 + 1, 8);
        LODWORD(v126) = v227[0];
      }
      *((_QWORD *)__src + v126) = v204;
      ++v227[0];
      if (v231 != &v233)
        free(v231);
      v231 = (uint64_t *)(*(_QWORD *)__src | 6);
      v232 = 3;
      llvm::SUnit::addPred((int64_t)v215, (const llvm::SDep *)&v231, 1);
      v23 = *((_QWORD *)__src + v227[0] - 1);
      if (__src != &v227[2])
        free(__src);
LABEL_190:
      *(_QWORD *)&(*v2)[8 * v55] = v23;
      v231 = (uint64_t *)((unint64_t)v215 | 6);
      v232 = 3;
      llvm::SUnit::addPred(v23, (const llvm::SDep *)&v231, 1);
      *((_WORD *)v215 + 114) &= ~0x200u;
      goto LABEL_93;
    }
    v99 = *(_QWORD *)v56;
    if (!*(_WORD *)(*(_QWORD *)v56 + 56)
      || (v100 = (unsigned int *)(*(_QWORD *)(v99 + 32)
                                + 40 * (*(unsigned __int16 *)(*(_QWORD *)v56 + 56) - 1)),
          *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v100 + 40) + 16 * v100[2]) != 172))
    {
      v101 = *(unsigned __int16 *)(v99 + 58);
      if (*(_WORD *)(v99 + 58))
      {
        v102 = 0;
        v103 = *(unsigned __int8 **)(v99 + 40);
        while (1)
        {
          v105 = *v103;
          v103 += 16;
          v104 = v105;
          if (v105 == 172)
            break;
          v102 |= v104 == 1;
          if (!--v101)
            goto LABEL_178;
        }
      }
      else
      {
        v102 = 0;
LABEL_178:
        if (!*(_WORD *)(*(_QWORD *)v56 + 56))
        {
LABEL_182:
          v202 = v98;
          v203 = v56;
          if ((v102 & 1) == 0)
            goto LABEL_209;
          v228 = v230;
          v229 = 0x200000000;
          if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 624)))
          {
            v195 = v55;
            v141 = *((_QWORD *)v228 + 1);
            v198 = *(_QWORD *)v228;
            v142 = *(unsigned __int16 *)(v141 + 58);
            v214 = v56;
            v143 = *(_QWORD *)v56;
            v144 = *(unsigned __int16 *)(*(_QWORD *)v56 + 58);
            if (*(_WORD *)(v141 + 58))
            {
              v205 = *(unsigned __int16 *)(*(_QWORD *)v56 + 58);
              v145 = 0;
              do
              {
                sub_1C5D6146C(*(_QWORD *)(a1 + 624), *(_QWORD *)v56, v145, v141, v145);
                ++v145;
              }
              while (v142 != v145);
              v143 = *(_QWORD *)v56;
              v144 = v205;
            }
            sub_1C5D6146C(*(_QWORD *)(a1 + 624), v143, v144 - 1, v198, 1);
            v146 = sub_1C635AC34(a1, v141);
            v23 = v146;
            *(_DWORD *)(v141 + 28) = *(_DWORD *)(v146 + 192);
            v147 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
            v148 = (__int16)~*(_WORD *)(v141 + 24);
            v149 = *(unsigned __int16 *)(v147 + 48 * v148 + 2);
            if (*(_WORD *)(v147 + 48 * v148 + 2))
            {
              v150 = (__int16 *)(*(_QWORD *)(v147 + 48 * v148 + 40) + 4);
              while (1)
              {
                v151 = *v150;
                v150 += 3;
                if ((v151 & 1) != 0)
                  break;
                if (!--v149)
                  goto LABEL_238;
              }
              *(_WORD *)(v146 + 228) |= 8u;
            }
LABEL_238:
            if ((*(_BYTE *)(v147 + 48 * v148 + 11) & 2) != 0)
              *(_WORD *)(v146 + 228) |= 0x10u;
            v152 = *(_DWORD *)(v198 + 28);
            v206 = v152;
            if (v152 == -1)
            {
              v196 = sub_1C635AC34(a1, v198);
              *(_DWORD *)(v198 + 28) = *(_DWORD *)(v196 + 192);
            }
            else
            {
              v196 = *(_QWORD *)(a1 + 48) + 272 * v152;
            }
            *(_QWORD *)&v219 = 0;
            v231 = &v233;
            v232 = 0x400000000;
            __src = &v227[2];
            *(_QWORD *)v227 = 0x400000000;
            *(_QWORD *)v225 = &v225[16];
            *(_QWORD *)&v225[8] = 0x400000000;
            v223[0] = v224;
            v223[1] = (void *)0x400000000;
            v153 = *(unsigned int *)(v56 + 40);
            if ((_DWORD)v153)
            {
              v154 = *(uint64_t **)(v56 + 32);
              v155 = &v154[2 * v153];
              do
              {
                v156 = *v154;
                if ((*v154 & 6) != 0)
                {
                  v219 = *(_OWORD *)v154;
                }
                else
                {
                  v157 = *(_QWORD *)(v156 & 0xFFFFFFFFFFFFFFF8);
                  if (v157 && *(_WORD *)(v198 + 56))
                  {
                    v158 = *(_QWORD **)(v198 + 32);
                    v159 = 40 * *(unsigned __int16 *)(v198 + 56);
                    while (v157 != *v158)
                    {
                      v158 += 5;
                      v159 -= 40;
                      if (!v159)
                        goto LABEL_251;
                    }
                    v163 = v154[1];
                    v164 = v227[0];
                    if (v227[0] >= (unint64_t)v227[1])
                    {
                      v194 = v155;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v227[2], v227[0] + 1, 16);
                      v155 = v194;
                      v164 = v227[0];
                    }
                    v165 = (char *)__src + 16 * v164;
                    *v165 = v156;
                    v165[1] = v163;
                    ++v227[0];
                  }
                  else
                  {
LABEL_251:
                    v160 = v154[1];
                    v161 = *(unsigned int *)&v225[8];
                    if (*(unsigned int *)&v225[8] >= (unint64_t)*(unsigned int *)&v225[12])
                    {
                      v193 = v155;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v225, (uint64_t)&v225[16], *(unsigned int *)&v225[8] + 1, 16);
                      v155 = v193;
                      v161 = *(unsigned int *)&v225[8];
                    }
                    v162 = (_QWORD *)(*(_QWORD *)v225 + 16 * v161);
                    *v162 = v156;
                    v162[1] = v160;
                    ++*(_DWORD *)&v225[8];
                  }
                  v56 = v214;
                }
                v154 += 2;
              }
              while (v154 != v155);
            }
            v166 = *(unsigned int *)(v56 + 120);
            if ((_DWORD)v166)
            {
              v167 = *(__int128 **)(v56 + 112);
              v168 = 16 * v166;
              do
              {
                v169 = *v167;
                if ((*(_QWORD *)v167 & 6) != 0)
                {
                  v170 = v232;
                  v171 = (void **)&v231;
                  if (v232 >= (unint64_t)HIDWORD(v232))
                  {
                    *(_OWORD *)v199 = *v167;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v231, (uint64_t)&v233, v232 + 1, 16);
                    v169 = *(_OWORD *)v199;
                    v170 = v232;
                  }
                }
                else
                {
                  v170 = LODWORD(v223[1]);
                  v171 = v223;
                  if (LODWORD(v223[1]) >= (unint64_t)HIDWORD(v223[1]))
                  {
                    *(_OWORD *)v200 = *v167;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v223, (uint64_t)v224, LODWORD(v223[1]) + 1, 16);
                    v169 = *(_OWORD *)v200;
                    v170 = LODWORD(v223[1]);
                  }
                }
                *((_OWORD *)*v171 + v170) = v169;
                ++*((_DWORD *)v171 + 2);
                ++v167;
                v168 -= 16;
                v56 = v214;
              }
              while (v168);
            }
            if ((unint64_t)v219 >= 8)
            {
              llvm::SUnit::removePred(v56, (const llvm::SDep *)&v219);
              if (v206 == -1)
                llvm::SUnit::addPred(v196, (const llvm::SDep *)&v219, 1);
            }
            if (v227[0])
            {
              v172 = 0;
              v173 = 16 * v227[0];
              do
              {
                v174 = (const llvm::SDep *)((char *)__src + v172);
                llvm::SUnit::removePred(v214, (const llvm::SDep *)((char *)__src + v172));
                if (v206 == -1)
                  llvm::SUnit::addPred(v196, v174, 1);
                v172 += 16;
              }
              while (v173 != v172);
            }
            if (*(_DWORD *)&v225[8])
            {
              v175 = 0;
              v176 = 16 * *(unsigned int *)&v225[8];
              do
              {
                v177 = (const llvm::SDep *)(*(_QWORD *)v225 + v175);
                llvm::SUnit::removePred(v214, (const llvm::SDep *)(*(_QWORD *)v225 + v175));
                llvm::SUnit::addPred(v23, v177, 1);
                v175 += 16;
              }
              while (v176 != v175);
            }
            if (LODWORD(v223[1]))
            {
              v178 = 0;
              v201 = 16 * LODWORD(v223[1]);
              do
              {
                v218 = *(_OWORD *)((char *)v223[0] + v178);
                v179 = v218 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)&v218 = v218 & 7 | v214;
                llvm::SUnit::removePred(v179, (const llvm::SDep *)&v218);
                *(_QWORD *)&v218 = v218 & 7 | v23;
                llvm::SUnit::addPred(v179, (const llvm::SDep *)&v218, 1);
                v178 += 16;
              }
              while (v201 != v178);
            }
            if ((_DWORD)v232)
            {
              v180 = 0;
              v181 = 16 * v232;
              do
              {
                v218 = *(_OWORD *)&v231[v180 / 8];
                v182 = v218 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)&v218 = v218 & 7 | v214;
                llvm::SUnit::removePred(v182, (const llvm::SDep *)&v218);
                if (v206 == -1)
                {
                  *(_QWORD *)&v218 = v218 & 7 | v196;
                  llvm::SUnit::addPred(v182, (const llvm::SDep *)&v218, 1);
                }
                v180 += 16;
              }
              while (v181 != v180);
            }
            if (v206 == -1)
            {
              *(_QWORD *)&v218 = v196 | 6;
              *((_QWORD *)&v218 + 1) = 0;
              HIDWORD(v218) = *(unsigned __int16 *)(v196 + 226);
              llvm::SUnit::addPred(v23, (const llvm::SDep *)&v218, 1);
            }
            v55 = v195;
            v56 = v214;
            if (*(_DWORD *)(v23 + 212))
            {
              v108 = 0;
              v203 = v23;
              v23 = 0;
            }
            else
            {
              *(_WORD *)(v23 + 228) |= 0x200u;
              v108 = 1;
              v203 = v214;
            }
            if (v223[0] != v224)
              free(v223[0]);
            if (*(_BYTE **)v225 != &v225[16])
              free(*(void **)v225);
            if (__src != &v227[2])
              free(__src);
            if (v231 != &v233)
              free(v231);
          }
          else
          {
            v23 = 0;
            v108 = 1;
            v203 = v56;
          }
          if (v228 != v230)
            free(v228);
          v98 = v202;
          if (!v108)
          {
LABEL_209:
            v213 = (llvm::SUnit *)v56;
            v23 = sub_1C635AD6C(a1, v203);
            v127 = *(unsigned int *)(v203 + 40);
            if ((_DWORD)v127)
            {
              v128 = *(const llvm::SDep **)(v203 + 32);
              v129 = 16 * v127;
              do
              {
                if ((~*(_DWORD *)v128 & 6) != 0 || *((_DWORD *)v128 + 2) != 3)
                  llvm::SUnit::addPred(v23, v128, 1);
                v128 = (const llvm::SDep *)((char *)v128 + 16);
                v129 -= 16;
              }
              while (v129);
            }
            v231 = &v233;
            v232 = 0x400000000;
            v130 = *(unsigned int *)(v203 + 120);
            if ((_DWORD)v130)
            {
              v131 = 0;
              v132 = *(uint64_t **)(v203 + 112);
              v133 = 16 * v130;
              do
              {
                v134 = *v132;
                if ((~*(_DWORD *)v132 & 6) != 0 || *((_DWORD *)v132 + 2) != 3)
                {
                  v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFF8);
                  if ((*(_WORD *)((v134 & 0xFFFFFFFFFFFFFFF8) + 228) & 0x400) != 0)
                  {
                    *(_OWORD *)v225 = *(_OWORD *)v132;
                    *(_QWORD *)v225 = v225[0] & 7 | (unint64_t)v23;
                    llvm::SUnit::addPred((int64_t)v135, (const llvm::SDep *)v225, 1);
                    *(_QWORD *)v225 = v225[0] & 7 | (unint64_t)v203;
                    __src = v135;
                    *(_OWORD *)v227 = *(_OWORD *)v225;
                    v136 = sub_1C4926708((uint64_t)&v231, (unint64_t)&__src, 1);
                    v137 = &v231[3 * v232];
                    v138 = *(_OWORD *)v136;
                    v137[2] = *(_QWORD *)(v136 + 16);
                    *(_OWORD *)v137 = v138;
                    v131 = v232 + 1;
                    LODWORD(v232) = v232 + 1;
                  }
                }
                v132 += 2;
                v133 -= 16;
              }
              while (v133);
              if (v131)
              {
                v139 = 0;
                v140 = 24 * v131;
                do
                {
                  llvm::SUnit::removePred(v231[v139 / 8], (const llvm::SDep *)&v231[v139 / 8 + 1]);
                  v139 += 24;
                }
                while (v140 != v139);
              }
            }
            v56 = (unint64_t)v213;
            if (v231 != &v233)
              free(v231);
            v98 = v202;
          }
LABEL_188:
          if (!(v98 | v23))
            llvm::report_fatal_error((llvm *)"Can't handle live physical register dependency!", (const char *)1);
          if (v23)
            goto LABEL_190;
          goto LABEL_191;
        }
        v106 = *(unsigned int **)(v99 + 32);
        v107 = &v106[10 * *(unsigned __int16 *)(*(_QWORD *)v56 + 56)];
        while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v106 + 40) + 16 * v106[2]) != 172)
        {
          v106 += 10;
          if (v106 == v107)
            goto LABEL_182;
        }
      }
    }
    v23 = 0;
    goto LABEL_188;
  }
LABEL_303:
  v183 = *(_QWORD *)(a1 + 640);
  v184 = *(_QWORD *)(a1 + 648);
  if (v183 != v184)
  {
    v185 = (_QWORD *)(v184 - 8);
    if (v183 < (unint64_t)v185)
    {
      v186 = v183 + 8;
      do
      {
        v187 = *(_QWORD *)(v186 - 8);
        *(_QWORD *)(v186 - 8) = *v185;
        *v185-- = v187;
        v188 = v186 >= (unint64_t)v185;
        v186 += 8;
      }
      while (!v188);
    }
  }
  v189 = v216[0];
  if (v217)
  {
    v190 = 40 * v217;
    v191 = v216[0] + 24;
    do
    {
      if ((*(_QWORD *)(v191 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v192 = *(void **)(v191 - 16);
        if ((void *)v191 != v192)
          free(v192);
      }
      v191 += 40;
      v190 -= 40;
    }
    while (v190);
    v189 = v216[0];
  }
  MEMORY[0x1CAA32FB4](v189, 8);
  if (v220 != v222)
    free(v220);
}

uint64_t sub_1C5D0539C()
{
  return 1;
}

char *sub_1C5D053A4(char *result, uint64_t a2, unsigned int a3, int a4)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3)
  {
    v5 = result;
    v6 = result + 72;
    v7 = (uint64_t)(result + 664);
    v8 = (uint64_t)(result + 680);
    v9 = 16 * a3;
    v10 = (unsigned int *)(a2 + 8);
    do
    {
      v11 = *((_QWORD *)v10 - 1);
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      v13 = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 212) - 1;
      *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 212) = v13;
      if (v13)
        v14 = 1;
      else
        v14 = v6 == (char *)v12;
      if (!v14)
      {
        *(_WORD *)(v12 + 228) |= 0x200u;
        v15 = *((unsigned int *)v5 + 168);
        if (v15 >= *((unsigned int *)v5 + 169))
        {
          result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v8, v15 + 1, 8);
          v15 = *((unsigned int *)v5 + 168);
        }
        *(_QWORD *)(*((_QWORD *)v5 + 83) + 8 * v15) = v12;
        ++*((_DWORD *)v5 + 168);
        v11 = *((_QWORD *)v10 - 1);
      }
      if ((v11 & 6) == 0)
      {
        v16 = *v10;
        if ((_DWORD)v16)
        {
          v17 = *((_QWORD *)v5 + 102);
          if (!*(_QWORD *)(v17 + 8 * v16))
          {
            ++*((_DWORD *)v5 + 202);
            *(_QWORD *)(v17 + 8 * *v10) = v11 & 0xFFFFFFFFFFFFFFF8;
            *(_DWORD *)(*((_QWORD *)v5 + 105) + 4 * *v10) = a4;
          }
        }
      }
      v10 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  return result;
}

unint64_t sub_1C5D054BC(unint64_t result, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  unsigned __int16 v16;
  BOOL v17;
  int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v9 = result;
  if (a6)
    v10 = (_QWORD *)(a6 + 8);
  else
    v10 = 0;
  v11 = ((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v13 = v10[5];
  v12 = v10[6];
  v14 = (_WORD *)(v12 + v11 + 2);
  v15 = *(unsigned __int16 *)(v12 + v11) + (*(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF) * a2;
  do
  {
    v16 = *(_WORD *)(v13 + 4 * (unsigned __int16)v15);
    if (v16)
      v17 = v12 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v27 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15 + 2) << 16;
      v19 = (unsigned __int16 *)(v12
                               + 2
                               * *(unsigned int *)(*v10
                                                 + 24 * *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15)
                                                 + 8));
      v26 = a5 + 16;
      while (1)
      {
        do
        {
          v20 = *(_QWORD *)(*a3 + 8 * v16);
          if (v20)
            v21 = v20 == v9;
          else
            v21 = 1;
          if (!v21)
          {
            v28 = v16;
            result = sub_1C4854E58(a4, &v28);
            if ((result & 0x100000000) != 0)
            {
              v22 = *(unsigned int *)(a5 + 8);
              if (v22 >= *(unsigned int *)(a5 + 12))
              {
                result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v26, v22 + 1, 4);
                v22 = *(unsigned int *)(a5 + 8);
              }
              *(_DWORD *)(*(_QWORD *)a5 + 4 * v22) = v16;
              ++*(_DWORD *)(a5 + 8);
            }
          }
          v23 = *v19++;
          v16 += v23;
        }
        while (v23);
        v24 = HIWORD(v27);
        if (HIWORD(v27))
        {
          v27 >>= 16;
        }
        else
        {
          if (!*v14)
            return result;
          v15 += (unsigned __int16)*v14++;
          v25 = (unsigned __int16 *)(v10[5] + 4 * (unsigned __int16)v15);
          v24 = *v25;
          v27 = v25[1] << 16;
        }
        v16 = v24;
        v19 = (unsigned __int16 *)(v10[6] + 2 * *(unsigned int *)(*v10 + 24 * v24 + 8));
      }
    }
    v18 = (unsigned __int16)*v14++;
    v15 += v18;
  }
  while (v18);
  return result;
}

_QWORD *sub_1C5D05668(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C635A634(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1C5D0572C(llvm::ScheduleDAG *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E81986B0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 86), 8);
  v2 = (void *)*((_QWORD *)a1 + 83);
  if (v2)
  {
    *((_QWORD *)a1 + 84) = v2;
    operator delete(v2);
  }
  sub_1C635A3B8(a1);
}

void sub_1C5D05774(llvm::ScheduleDAG *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E81986B0;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 86), 8);
  v2 = (void *)*((_QWORD *)a1 + 83);
  if (v2)
  {
    *((_QWORD *)a1 + 84) = v2;
    operator delete(v2);
  }
  sub_1C635A3B8(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5D057D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x800000000;
  v2 = *(_QWORD *)(a1 + 624);
  v3 = v2 + 208;
  v4 = *(_QWORD *)(v2 + 216);
  if (v4 == v2 + 208)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = &v28;
    do
    {
      v7 = v4 - 8;
      if (v4)
        v8 = v4 - 8;
      else
        v8 = 0;
      v9 = *(_QWORD *)(v8 + 48);
      if (v9)
      {
        v10 = 0;
        v11 = *(_QWORD *)(v8 + 48);
        do
        {
          ++v10;
          v11 = *(_QWORD *)(v11 + 32);
        }
        while (v11);
      }
      else
      {
        v10 = 0;
      }
      *(_DWORD *)(v8 + 28) = v10;
      if (*(_WORD *)(v8 + 58)
        && v9
        && *(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + 16 * (*(unsigned __int16 *)(v8 + 58) - 1)) == 172)
      {
        while (*(_DWORD *)(v9 + 8) != *(unsigned __int16 *)(v8 + 58) - 1)
        {
          v9 = *(_QWORD *)(v9 + 32);
          if (!v9)
            goto LABEL_23;
        }
        while (2)
        {
          v12 = v7;
          v13 = *(_QWORD *)(v7 + 48);
          if (!v13)
            goto LABEL_33;
          while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v13 + 40) + 16 * *(unsigned int *)(v13 + 8)) != 172)
          {
            v13 = *(_QWORD *)(v13 + 32);
            if (!v13)
              goto LABEL_22;
          }
          v7 = *(_QWORD *)(v13 + 16);
          if (v7)
            continue;
          break;
        }
LABEL_22:
        if (v12)
        {
LABEL_33:
          v16 = v30;
          if (v30 >= (unint64_t)HIDWORD(v30))
          {
            v25 = v6;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
            v6 = v25;
            v16 = v30;
          }
          *((_QWORD *)v29 + v16) = v8;
          LODWORD(v30) = v30 + 1;
          v27 = v8;
          v28 = v12;
          v17 = v6;
          sub_1C6187718((uint64_t)v26, a1 + 688, &v27, v6);
          v6 = v17;
        }
      }
LABEL_23:
      if (*(__int16 *)(v8 + 24) < 0
        || ((v14 = *(unsigned __int16 *)(v8 + 24), v14 <= 0x2D)
          ? (v15 = ((1 << v14) & 0x3FF8000FFE42) == 0)
          : (v15 = 1),
            v15 && v14 != 278))
      {
        ++v5;
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    v18 = v30;
    if ((_DWORD)v30)
    {
      v19 = 0;
      do
      {
        v26[0] = *((_QWORD *)v29 + v19);
        v20 = v26[0];
        v21 = sub_1C6180A54(a1 + 688, v26);
        v22 = *(_DWORD *)(v20 + 28);
        v23 = *(_QWORD *)(v20 + 48);
        if (v23)
        {
          v24 = *(_QWORD *)(v20 + 48);
          while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v24 + 40) + 16 * *(unsigned int *)(v24 + 8)) != 172)
          {
            v24 = *(_QWORD *)(v24 + 32);
            if (!v24)
              goto LABEL_44;
          }
          v24 = *(_QWORD *)(v24 + 16);
          do
          {
LABEL_44:
            v22 -= *(_QWORD *)(v23 + 16) == v24;
            v23 = *(_QWORD *)(v23 + 32);
          }
          while (v23);
        }
        *(_DWORD *)(v21[1] + 28) += v22;
        *(_DWORD *)(v20 + 28) = 1;
        ++v19;
      }
      while (v19 != v18);
    }
  }
  sub_1C4DB1D18(a1 + 664, v5);
  sub_1C5D05D4C(a1, *(_QWORD *)(*(_QWORD *)(a1 + 624) + 192));
  if (v29 != v31)
    free(v29);
}

uint64_t sub_1C5D05AB0(_QWORD *a1, unint64_t **a2)
{
  unint64_t **v2;
  uint64_t v4;
  unint64_t *v5;
  char v6;
  uint64_t v7;
  llvm::MachineFunction *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  llvm::MachineInstr *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t **v37;
  uint64_t v38[2];
  int v39;
  llvm::MachineFunction *v40[5];
  uint64_t v41;
  unint64_t *v42;
  char v43;

  v2 = a2;
  v4 = a1[77];
  v5 = *a2;
  v6 = *(_BYTE *)(a1[78] + 650);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(llvm::MachineFunction **)(v7 + 40);
  v40[0] = (llvm::MachineFunction *)v7;
  v40[1] = v8;
  v40[2] = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 104))(*(_QWORD *)(v7 + 16));
  v40[3] = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 176))(*(_QWORD *)(v7 + 16));
  v40[4] = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 120))(*(_QWORD *)(v7 + 16));
  v41 = v4;
  v42 = v5;
  v43 = v6;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v9 = a1[84] - a1[83];
  if ((v9 & 0x7FFFFFFF8) != 0)
  {
    v37 = v2;
    v10 = 0;
    v11 = v9 >> 3;
    v12 = (v9 >> 3);
    do
    {
      v13 = a1[83];
      v14 = *(_QWORD *)(v13 + 8 * (v11 + ~(_DWORD)v10));
      if (*(__int16 *)(v14 + 24) < 0)
        sub_1C5CCB208((uint64_t)v40, *(_QWORD *)(v13 + 8 * (v11 + ~(_DWORD)v10)), 0, 0, (uint64_t)v38);
      else
        sub_1C5CCD4D8(v40, *(_QWORD *)(v13 + 8 * (v11 + ~(_DWORD)v10)), 0, 0, (uint64_t)v38);
      if ((*(_BYTE *)(v14 + 26) & 1) != 0)
      {
        v15 = v42;
        v16 = *(_QWORD *)(a1[78] + 616);
        v17 = sub_1C5D05F58(v16 + 688, v14);
        if (*(_QWORD *)(v16 + 688) + 40 * *(unsigned int *)(v16 + 704) != v17)
        {
          v18 = *(unsigned int *)(v17 + 16);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)(v17 + 8);
            v20 = &v19[v18];
            do
            {
              if (!*(_BYTE *)(*v19 + 63))
              {
                v21 = sub_1C632C21C((uint64_t)v40, *v19, v38);
                if (v21)
                {
                  v22 = (unint64_t)v21;
                  v23 = *(_QWORD *)(v4 + 40);
                  *((_QWORD *)v21 + 3) = v23;
                  v24 = *(_QWORD *)(v23 + 32);
                  v25 = *((unsigned int *)v21 + 10);
                  if ((_DWORD)v25)
                  {
                    v28 = *((_QWORD *)v21 + 4);
                    v29 = *(_QWORD *)(v24 + 40);
                    v30 = 32 * v25;
                    do
                    {
                      if (!*(_BYTE *)v28)
                      {
                        v31 = *(unsigned int *)(v28 + 4);
                        if ((int)v31 >= 0)
                          v32 = (uint64_t *)(*(_QWORD *)(v29 + 272) + 8 * v31);
                        else
                          v32 = (uint64_t *)(*(_QWORD *)(v29 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
                        v33 = *v32;
                        if (*v32)
                        {
                          v34 = *(_QWORD *)(v33 + 16);
                          *(_QWORD *)(v33 + 16) = v28;
                          *(_QWORD *)(v28 + 16) = v34;
                          if ((*(_BYTE *)(v28 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v28 + 24) = v33;
                          }
                          else
                          {
                            *(_QWORD *)(v28 + 24) = 0;
                            v32 = (uint64_t *)(v34 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v28 + 16) = v28;
                          *(_QWORD *)(v28 + 24) = 0;
                        }
                        *v32 = v28;
                      }
                      v28 += 32;
                      v30 -= 32;
                    }
                    while (v30);
                  }
                  v26 = *(_QWORD *)(v24 + 728);
                  if (v26)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 24))(v26, v22);
                  v27 = *v15 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v22 = v27 | *(_QWORD *)v22 & 7;
                  *(_QWORD *)(v22 + 8) = v15;
                  *(_QWORD *)(v27 + 8) = v22;
                  *v15 = *v15 & 7 | v22;
                }
              }
              ++v19;
            }
            while (v19 != v20);
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
    v4 = v41;
    v5 = v42;
    v2 = v37;
    v35 = v38[0];
  }
  else
  {
    v35 = 0;
  }
  *v2 = v5;
  MEMORY[0x1CAA32FB4](v35, 8);
  return v4;
}

void sub_1C5D05D4C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;

  if (*(__int16 *)(a2 + 24) < 0
    || ((v4 = *(unsigned __int16 *)(a2 + 24), v4 <= 0x2D) ? (v5 = ((1 << v4) & 0x3FF8000FFE42) == 0) : (v5 = 1),
        v5 && v4 != 278))
  {
    v6 = *(_QWORD **)(a1 + 672);
    v7 = *(_QWORD *)(a1 + 680);
    if ((unint64_t)v6 >= v7)
    {
      v9 = *(_QWORD **)(a1 + 664);
      v10 = v6 - v9;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v12 = v7 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          sub_1C4764EE4();
        v14 = (char *)operator new(8 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      *(_QWORD *)v15 = a2;
      v8 = v15 + 8;
      if (v6 != v9)
      {
        do
        {
          v16 = *--v6;
          *((_QWORD *)v15 - 1) = v16;
          v15 -= 8;
        }
        while (v6 != v9);
        v6 = *(_QWORD **)(a1 + 664);
      }
      *(_QWORD *)(a1 + 664) = v15;
      *(_QWORD *)(a1 + 672) = v8;
      *(_QWORD *)(a1 + 680) = &v14[8 * v13];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = a2;
      v8 = v6 + 1;
    }
    *(_QWORD *)(a1 + 672) = v8;
    if (*(_WORD *)(a2 + 56))
    {
      v17 = 0;
      v18 = 0;
      v19 = *(unsigned __int16 *)(a2 + 56) - 1;
      do
      {
        v20 = (v19 + v17);
        v21 = *(_QWORD *)(a2 + 32) + 40 * v20;
        v22 = *(_QWORD *)v21;
        if (v17 || *(unsigned __int8 *)(*(_QWORD *)(v22 + 40) + 16 * *(unsigned int *)(v21 + 8)) != 172)
        {
          if (v22 != v18)
          {
            v25 = 0;
            if (sub_1C6144BDC(*(_QWORD *)(a1 + 688), *(_DWORD *)(a1 + 704), v22, &v25))
              v23 = v25 == *(_QWORD *)(a1 + 688) + 16 * *(unsigned int *)(a1 + 704);
            else
              v23 = 1;
            if (!v23 && *(_QWORD *)(v25 + 8) != a2)
              v22 = *(_QWORD *)(v25 + 8);
            v24 = *(_DWORD *)(v22 + 28) - 1;
            *(_DWORD *)(v22 + 28) = v24;
            if (!v24)
              sub_1C5D05D4C(a1, v22);
          }
          v22 = v18;
        }
        else
        {
          *(_DWORD *)(v22 + 28) = 0;
          sub_1C5D05D4C(a1, v22);
        }
        --v17;
        v18 = v22;
      }
      while (v20);
    }
  }
}

uint64_t sub_1C5D05F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_1C635A4E4((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C5D05FBC()
{
  sub_1C5D03BD8(qword_1ED8243B8, "fast", "Fast suboptimal list scheduling", (uint64_t)sub_1C635A2F8);
  __cxa_atexit((void (*)(void *))sub_1C5D03B70, qword_1ED8243B8, &dword_1C475E000);
  sub_1C5D03BD8(&qword_1ED8243B8[6], "linearize", "Linearize DAG, no scheduling", (uint64_t)sub_1C635A360);
  return __cxa_atexit((void (*)(void *))sub_1C5D03B70, &qword_1ED8243B8[6], &dword_1C475E000);
}

llvm::ScheduleDAG *sub_1C5D06058(llvm::ScheduleDAG *a1, llvm::MachineFunction *a2, char a3, uint64_t a4)
{
  llvm::ScheduleDAG *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v8 = sub_1C635ABD4(a1, a2);
  *(_QWORD *)v8 = &off_1E8198738;
  *((_BYTE *)v8 + 664) = a3;
  *((_QWORD *)v8 + 84) = a4;
  *((_DWORD *)v8 + 178) = 0;
  *((_QWORD *)v8 + 85) = 0;
  *((_OWORD *)v8 + 43) = 0u;
  *(_OWORD *)((char *)v8 + 728) = 0u;
  *((_QWORD *)v8 + 93) = (char *)v8 + 760;
  *((_QWORD *)v8 + 94) = 0x400000000;
  *(_OWORD *)((char *)v8 + 792) = 0u;
  *((_DWORD *)v8 + 202) = 0;
  *((_QWORD *)v8 + 102) = (char *)v8 + 48;
  *((_QWORD *)v8 + 103) = 0;
  *((_BYTE *)v8 + 832) = 0;
  *((_QWORD *)v8 + 105) = (char *)v8 + 856;
  *((_QWORD *)v8 + 106) = 0x1000000000;
  *(_OWORD *)((char *)v8 + 1112) = 0u;
  *(_OWORD *)((char *)v8 + 1128) = 0u;
  *(_OWORD *)((char *)v8 + 1144) = 0u;
  *((_QWORD *)v8 + 145) = (char *)v8 + 1176;
  *((_QWORD *)v8 + 146) = 0x600000000;
  *((_DWORD *)v8 + 306) = 0;
  *((_DWORD *)v8 + 312) = 0;
  *((_OWORD *)v8 + 77) = 0u;
  if (byte_1ED824558 || (a3 & 1) == 0)
  {
    v11 = (_QWORD *)operator new();
    *v11 = &unk_1E814A6D8;
    v11[1] = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::ScheduleDAG *))(*(_QWORD *)v10 + 864))(v10, v9, a1);
  }
  *((_QWORD *)a1 + 88) = v11;
  return a1;
}

void sub_1C5D06194(llvm::ScheduleDAG *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_1E8198738;
  v2 = *((_QWORD *)a1 + 88);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)a1 + 84);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 154), 8);
  v4 = (_QWORD *)*((_QWORD *)a1 + 145);
  if (v4 != (_QWORD *)((char *)a1 + 1176))
    free(v4);
  v5 = (void *)*((_QWORD *)a1 + 142);
  if (v5)
  {
    *((_QWORD *)a1 + 143) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)a1 + 139);
  if (v6)
  {
    *((_QWORD *)a1 + 140) = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)*((_QWORD *)a1 + 105);
  if (v7 != (_QWORD *)((char *)a1 + 856))
    free(v7);
  sub_1C63261C4((uint64_t)a1 + 792);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 99), 8);
  v8 = (_QWORD *)*((_QWORD *)a1 + 93);
  if (v8 != (_QWORD *)((char *)a1 + 760))
    free(v8);
  v9 = *((_QWORD *)a1 + 92);
  *((_QWORD *)a1 + 92) = 0;
  if (v9)
    MEMORY[0x1CAA32F9C](v9, 0x20C8093837F09);
  v10 = *((_QWORD *)a1 + 91);
  *((_QWORD *)a1 + 91) = 0;
  if (v10)
    MEMORY[0x1CAA32F9C](v10, 0x20C8093837F09);
  v11 = (void *)*((_QWORD *)a1 + 85);
  if (v11)
  {
    *((_QWORD *)a1 + 86) = v11;
    operator delete(v11);
  }
  sub_1C635A3B8(a1);
}

void sub_1C5D062C4(llvm::ScheduleDAG *a1)
{
  sub_1C5D06194(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D062E8(uint64_t a1)
{
  size_t v2;
  void *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  llvm::ScheduleDAGTopologicalSort *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  llvm::SUnit *v13;
  uint64_t v14;
  llvm::SUnit **v15;
  uint64_t v16;
  llvm::SUnit **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  llvm::SUnit *v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  __int16 v63;
  _BYTE *v64;
  void *v65;
  uint64_t v66;
  int v67;
  unsigned int *v68;
  uint64_t **v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  llvm::SUnit **v80;
  unint64_t v81;
  llvm::SUnit **v82;
  llvm::SUnit *v83;
  unsigned int v84;
  llvm::SUnit *v85;
  __int16 v86;
  int64_t v87;
  llvm::SUnit *v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  _WORD *v94;
  BOOL v95;
  unsigned __int16 *v96;
  int v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t *v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  int v112;
  uint64_t v114;
  int64_t v115;
  unsigned int *v116;
  uint64_t v117;
  char v118;
  unsigned __int8 *v119;
  int v120;
  int v121;
  unsigned int *v122;
  unsigned int *v123;
  int64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  const llvm::SUnit *v132;
  const llvm::SUnit *v133;
  int v134;
  const llvm::SUnit *v135;
  int64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  __int16 *v140;
  __int16 v141;
  uint64_t i;
  uint64_t v143;
  uint64_t v144;
  const llvm::SDep *v145;
  uint64_t v146;
  const llvm::SDep *v147;
  uint64_t v148;
  const llvm::SDep *v149;
  uint64_t v150;
  llvm::SDep *v151;
  uint64_t v152;
  __int128 *v153;
  uint64_t v154;
  llvm::SUnit *v155;
  llvm::SUnit *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  llvm::SDep **v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  unsigned int *v167;
  _QWORD *v168;
  __int128 *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  void **v173;
  __int128 *v174;
  uint64_t v175;
  llvm::SUnit *v176;
  int v177;
  unint64_t v178;
  unsigned int v179;
  uint64_t v180;
  const llvm::SDep *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  llvm::SUnit *v188;
  unint64_t v189;
  char *v190;
  __int128 v191;
  unint64_t *v192;
  unint64_t *v193;
  const llvm::SDep *v194;
  unint64_t v195;
  int64_t v196;
  int64_t v197;
  uint64_t v198;
  llvm::SUnit *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  llvm::SUnit *v204;
  unint64_t v205;
  char *v206;
  __int128 v207;
  unint64_t *v208;
  unint64_t *v209;
  const llvm::SDep *v210;
  unint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  llvm::SUnit *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t *v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  uint64_t v232;
  __int32 *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  __int16 v242;
  _DWORD *v243;
  int v244;
  int v245;
  BOOL v246;
  uint64_t v247;
  int v248;
  unsigned int *v249;
  int v250;
  unsigned int v251;
  unint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  unint64_t v256;
  uint64_t v257;
  int v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  int64_t v267;
  _QWORD *v268;
  uint64_t **v269;
  uint64_t *v270;
  uint64_t **v271;
  llvm::SUnit *v272;
  void **v273[2];
  llvm::SUnit *v274;
  __int128 v275;
  void *v276;
  uint64_t v277;
  _BYTE v278[64];
  llvm::SDep *v279[2];
  _BYTE v280[64];
  _BYTE v281[72];
  void *v282;
  unsigned int v283[18];
  void *v284;
  uint64_t v285;
  _BYTE v286[16];
  _QWORD *v287;
  uint64_t v288;
  _QWORD v289[14];

  v289[12] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 716) = byte_1ED824558 - 1;
  *(_QWORD *)(a1 + 720) = 0;
  v2 = 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1);
  v3 = (void *)operator new[]();
  bzero(v3, v2);
  v4 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v3;
  if (v4)
    MEMORY[0x1CAA32F9C](v4, 0x20C8093837F09);
  v5 = 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1);
  v6 = (void *)operator new[]();
  bzero(v6, v5);
  v7 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = v6;
  if (v7)
    MEMORY[0x1CAA32F9C](v7, 0x20C8093837F09);
  sub_1C61446F0((unsigned int *)(a1 + 1232));
  sub_1C635B36C((uint64_t *)a1);
  v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
  *(_BYTE *)(a1 + 832) = 1;
  v268 = (_QWORD *)(a1 + 48);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 32))(*(_QWORD *)(a1 + 672));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 704) + 32))(*(_QWORD *)(a1 + 704));
  sub_1C5D08144(a1, a1 + 344);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 == *(_QWORD *)(a1 + 56))
  {
    v11 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v10 = v9 + 272 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 624) + 192) + 28);
    *(_WORD *)(v10 + 228) |= 0x200u;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 88))(*(_QWORD *)(a1 + 672));
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
  }
  v269 = (uint64_t **)(a1 + 640);
  sub_1C4DB1D18(a1 + 640, 0xF0F0F0F0F0F0F0F1 * ((v11 - v9) >> 4));
  v270 = (uint64_t *)(a1 + 792);
  v271 = (uint64_t **)(a1 + 816);
  while (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 64))(*(_QWORD *)(a1 + 672))
       || *(_DWORD *)(a1 + 752))
  {
    v274 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 64))(*(_QWORD *)(a1 + 672));
    v13 = 0;
    if ((v12 & 1) == 0)
      v13 = (llvm::SUnit *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 96))(*(_QWORD *)(a1 + 672));
    v273[1] = (void **)a1;
    v274 = v13;
    v273[0] = (void **)&v274;
    sub_1C5D0865C(v273);
    v14 = (uint64_t)v274;
    if (!v274)
    {
      v15 = *(llvm::SUnit ***)(a1 + 744);
      v16 = *(unsigned int *)(a1 + 752);
      if (!(_DWORD)v16)
        goto LABEL_145;
      v17 = &v15[v16];
      while (1)
      {
        *(_QWORD *)v281 = 0;
        *(_QWORD *)v281 = *v15;
        v18 = sub_1C635A728(v270, v281);
        v19 = *((unsigned int *)v18 + 4);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = (unsigned int *)v18[1];
          v22 = 4 * v19;
          v23 = -1;
          do
          {
            v24 = *v21;
            v25 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v24);
            if ((*(_BYTE *)(v25 + 236) & 2) == 0)
              llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(*(_QWORD *)(a1 + 736) + 8 * v24));
            if (*(_DWORD *)(v25 + 244) < v23)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v24);
              if ((*(_BYTE *)(v20 + 236) & 2) == 0)
                llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(*(_QWORD *)(a1 + 736) + 8 * v24));
              v23 = *(_DWORD *)(v20 + 244);
            }
            ++v21;
            v22 -= 4;
          }
          while (v22);
        }
        else
        {
          v20 = 0;
        }
        if ((llvm::ScheduleDAGTopologicalSort::WillCreateCycle(v271, *(llvm::SUnit **)v281, (llvm::SUnit *)v20) & 1) == 0)
          break;
        if (++v15 == v17)
          goto LABEL_143;
      }
      do
      {
        v32 = *(_QWORD *)(a1 + 648);
        v33 = *(uint64_t **)(v32 - 8);
        *(_QWORD *)(a1 + 648) = v32 - 8;
        if ((*((_BYTE *)v33 + 236) & 2) == 0)
          llvm::SUnit::ComputeHeight((llvm::SUnit *)v33);
        *(_DWORD *)(a1 + 712) = *((_DWORD *)v33 + 61);
        v282 = v33;
        v34 = *((unsigned int *)v33 + 10);
        if ((_DWORD)v34)
        {
          v35 = 16 * v34;
          v36 = (__int32 *)(v33[4] + 8);
          do
          {
            v37 = *((_QWORD *)v36 - 1) & 0xFFFFFFFFFFFFFFF8;
            v38 = *(_WORD *)(v37 + 228);
            if ((v38 & 0x200) != 0)
            {
              *(_WORD *)(v37 + 228) = v38 & 0xFDFF;
              if ((v38 & 0x100) == 0)
                (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 672) + 104))(*(_QWORD *)(a1 + 672), v37);
            }
            ++*(_DWORD *)(v37 + 212);
            if ((*(_BYTE *)(v36 - 2) & 6) == 0)
            {
              v39 = *v36;
              if ((_DWORD)v39)
              {
                if (v33 == *(uint64_t **)(*(_QWORD *)(a1 + 736) + 8 * v39))
                {
                  --*(_DWORD *)(a1 + 724);
                  *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * *v36) = 0;
                  *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * *v36) = 0;
                  sub_1C5D09188(a1, *v36);
                }
              }
            }
            v36 += 4;
            v35 -= 16;
          }
          while (v35);
        }
        v40 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
        v41 = *v33;
        if (*v33)
        {
          do
          {
            v42 = *(__int16 *)(v41 + 24);
            if (v42 < 0 && *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64) == (unsigned __int16)~(_WORD)v42)
            {
              v44 = sub_1C6180A54(a1 + 1232, (uint64_t *)&v282)[1];
              ++*(_DWORD *)(a1 + 724);
              *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v40) = v33;
              *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v40) = v44;
            }
            if (!*(_WORD *)(v41 + 56))
              break;
            v43 = (unsigned int *)(*(_QWORD *)(v41 + 32) + 40 * (*(unsigned __int16 *)(v41 + 56) - 1));
            v41 = *(_QWORD *)v43;
          }
          while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v43 + 40) + 16 * v43[2]) == 172);
        }
        if (*(uint64_t **)(*(_QWORD *)(a1 + 736) + 8 * v40) == v33)
        {
          v66 = *v33;
          if (*v33)
          {
            do
            {
              v67 = *(__int16 *)(v66 + 24);
              if (v67 < 0 && *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68) == (unsigned __int16)~(_WORD)v67)
              {
                --*(_DWORD *)(a1 + 724);
                *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v40) = 0;
                *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v40) = 0;
                sub_1C5D09188(a1, v40);
              }
              if (!*(_WORD *)(v66 + 56))
                break;
              v68 = (unsigned int *)(*(_QWORD *)(v66 + 32) + 40 * (*(unsigned __int16 *)(v66 + 56) - 1));
              v66 = *(_QWORD *)v68;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v68 + 40) + 16 * v68[2]) == 172);
          }
        }
        v45 = *((unsigned int *)v33 + 30);
        if ((_DWORD)v45)
        {
          v46 = (uint64_t *)v33[14];
          v47 = &v46[2 * v45];
          do
          {
            v48 = *v46;
            if ((*v46 & 6) == 0)
            {
              v49 = *((unsigned int *)v46 + 2);
              if ((_DWORD)v49)
              {
                v50 = *(_QWORD *)(a1 + 728);
                if (!*(_QWORD *)(v50 + 8 * v49))
                  ++*(_DWORD *)(a1 + 724);
                *(_QWORD *)(v50 + 8 * v49) = v33;
                v51 = *(_QWORD *)(a1 + 736);
                if (!*(_QWORD *)(v51 + 8 * v49))
                {
                  *(_QWORD *)(v51 + 8 * v49) = v48 & 0xFFFFFFFFFFFFFFF8;
                  v52 = *((unsigned int *)v33 + 30);
                  if ((_DWORD)v52)
                  {
                    v53 = (uint64_t *)v33[14];
                    v54 = 16 * v52;
                    do
                    {
                      v55 = *v53;
                      if ((*v53 & 6) == 0)
                      {
                        v56 = *((_DWORD *)v53 + 2);
                        if (v56 && v56 == (_DWORD)v49)
                        {
                          v58 = (llvm::SUnit *)(v55 & 0xFFFFFFFFFFFFFFF8);
                          if ((*(_BYTE *)((v55 & 0xFFFFFFFFFFFFFFF8) + 236) & 2) == 0)
                            llvm::SUnit::ComputeHeight(v58);
                          v59 = *((_DWORD *)v58 + 61);
                          v60 = *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v49);
                          if ((*(_BYTE *)(v60 + 236) & 2) == 0)
                            llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(*(_QWORD *)(a1 + 736) + 8 * v49));
                          if (v59 < *(_DWORD *)(v60 + 244))
                            *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v49) = *v53 & 0xFFFFFFFFFFFFFFF8;
                        }
                      }
                      v53 += 2;
                      v54 -= 16;
                    }
                    while (v54);
                  }
                }
              }
            }
            v46 += 2;
          }
          while (v46 != v47);
        }
        v61 = *((_BYTE *)v33 + 236);
        if ((v61 & 2) == 0)
        {
          llvm::SUnit::ComputeHeight((llvm::SUnit *)v33);
          v61 = *((_BYTE *)v33 + 236);
        }
        v62 = *((_DWORD *)v33 + 61);
        if (v62 < *(_DWORD *)(a1 + 716))
        {
          if ((v61 & 2) == 0)
          {
            llvm::SUnit::ComputeHeight((llvm::SUnit *)v33);
            v62 = *((_DWORD *)v33 + 61);
          }
          *(_DWORD *)(a1 + 716) = v62;
          v61 = *((_BYTE *)v33 + 236);
        }
        if ((v61 & 2) != 0)
        {
          v287 = v289;
          HIDWORD(v288) = 8;
          v26 = 1;
          v289[0] = v33;
          do
          {
            v27 = v287[--v26];
            LODWORD(v288) = v26;
            *(_BYTE *)(v27 + 236) &= ~2u;
            v28 = *(unsigned int *)(v27 + 40);
            if ((_DWORD)v28)
            {
              v29 = *(_QWORD **)(v27 + 32);
              v30 = 16 * v28;
              do
              {
                v31 = *v29 & 0xFFFFFFFFFFFFFFF8;
                if ((*(_BYTE *)(v31 + 236) & 2) != 0)
                {
                  if (v26 >= HIDWORD(v288))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v287, (uint64_t)v289, v26 + 1, 8);
                    v26 = v288;
                  }
                  v287[v26] = v31;
                  v26 = v288 + 1;
                  LODWORD(v288) = v288 + 1;
                }
                v29 += 2;
                v30 -= 16;
              }
              while (v30);
            }
          }
          while (v26);
          if (v287 != v289)
            free(v287);
        }
        v63 = *((_WORD *)v33 + 114) & 0xF9FF;
        *((_WORD *)v33 + 114) = v63 | 0x200;
        v64 = *(_BYTE **)(a1 + 672);
        if (byte_1ED824558 || !v64[12])
        {
          (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v64 + 88))(v64, v33);
          v65 = v33;
        }
        else
        {
          *((_WORD *)v33 + 114) = v63 | 0x300;
          v69 = *(uint64_t ***)(a1 + 688);
          v70 = *(_QWORD *)(a1 + 696);
          if ((unint64_t)v69 >= v70)
          {
            v72 = *(_QWORD **)(a1 + 680);
            v73 = v69 - (uint64_t **)v72;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61)
              goto LABEL_426;
            v75 = v70 - (_QWORD)v72;
            if (v75 >> 2 > v74)
              v74 = v75 >> 2;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              if (v76 >> 61)
                goto LABEL_427;
              v77 = (char *)operator new(8 * v76);
            }
            else
            {
              v77 = 0;
            }
            v78 = &v77[8 * v73];
            *(_QWORD *)v78 = v33;
            v71 = v78 + 8;
            if (v69 != v72)
            {
              do
              {
                v79 = (uint64_t)*--v69;
                *((_QWORD *)v78 - 1) = v79;
                v78 -= 8;
              }
              while (v69 != v72);
              v69 = *(uint64_t ***)(a1 + 680);
            }
            *(_QWORD *)(a1 + 680) = v78;
            *(_QWORD *)(a1 + 688) = v71;
            *(_QWORD *)(a1 + 696) = &v77[8 * v76];
            if (v69)
              operator delete(v69);
          }
          else
          {
            *v69 = v33;
            v71 = v69 + 1;
          }
          *(_QWORD *)(a1 + 688) = v71;
          v65 = v282;
        }
        (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 672) + 128))(*(_QWORD *)(a1 + 672), v65);
        *(_DWORD *)(*(_QWORD *)(a1 + 672) + 8) = *(_DWORD *)(a1 + 712);
      }
      while (v33 != (uint64_t *)v20);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 704) + 32))(*(_QWORD *)(a1 + 704));
      v80 = *(llvm::SUnit ***)(a1 + 648);
      v81 = ((unint64_t)v80 - *(_QWORD *)(a1 + 640)) >> 3;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 704) + 8) < v81)
        LODWORD(v81) = *(_DWORD *)(*(_QWORD *)(a1 + 704) + 8);
      if ((_DWORD)v81)
      {
        v82 = &v80[-v81];
        v83 = *v82;
        if ((*((_BYTE *)*v82 + 236) & 2) == 0)
        {
          llvm::SUnit::ComputeHeight(*v82);
          v80 = *(llvm::SUnit ***)(a1 + 648);
        }
        if (v82 != v80)
        {
          v84 = *((_DWORD *)v83 + 61);
          do
          {
            v85 = *v82;
            while (1)
            {
              if ((*((_BYTE *)v85 + 236) & 2) == 0)
                llvm::SUnit::ComputeHeight(v85);
              if (*((_DWORD *)v85 + 61) <= v84)
                break;
              (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 704) + 88))(*(_QWORD *)(a1 + 704));
              ++v84;
            }
            sub_1C5D092DC(a1, v85);
            ++v82;
          }
          while (v82 != v80);
        }
      }
      sub_1C5D09054(a1);
      v86 = *(_WORD *)(v20 + 228);
      if ((v86 & 0x200) != 0)
      {
        *(_WORD *)(v20 + 228) = v86 & 0xFDFF;
        if ((v86 & 0x100) == 0)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 672) + 104))(*(_QWORD *)(a1 + 672), v20);
      }
      v87 = *(_QWORD *)v281;
      v287 = (_QWORD *)(v20 | 6);
      v288 = 3;
      llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, *(llvm::SUnit **)v281, (llvm::SUnit *)(v20 & 0xFFFFFFFFFFFFFFF8));
      llvm::SUnit::addPred(v87, (const llvm::SDep *)&v287, 1);
      if ((*(_WORD *)(*(_QWORD *)v281 + 228) & 0x200) != 0 && *(_DWORD *)(*(_QWORD *)v281 + 196))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 104))(*(_QWORD *)(a1 + 672));
        v88 = *(llvm::SUnit **)v281;
      }
      else
      {
        v88 = (llvm::SUnit *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 96))(*(_QWORD *)(a1 + 672));
      }
      v274 = v88;
      sub_1C5D0865C(v273);
LABEL_143:
      v14 = (uint64_t)v274;
      v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
      if (!v274)
      {
        v15 = *(llvm::SUnit ***)(a1 + 744);
LABEL_145:
        v272 = 0;
        v272 = *v15;
        v89 = *(unsigned int *)sub_1C635A728(v270, &v272)[1];
        v90 = *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v89);
        v91 = *(unsigned __int16 *)(*(_QWORD *)v90 + 24);
        if (v91 == 50)
        {
          v92 = 1;
        }
        else
        {
          v93 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 48 * (__int16)~(_WORD)v91;
          v92 = *(unsigned __int8 *)(v93 + 4);
          v94 = *(_WORD **)(v93 + 32);
          if (*v94)
            v95 = (_DWORD)v89 == (unsigned __int16)*v94;
          else
            v95 = 1;
          if (!v95)
          {
            v96 = v94 + 1;
            do
            {
              ++v92;
              v98 = *v96++;
              v97 = v98;
              if (v98)
                v99 = (_DWORD)v89 == v97;
              else
                v99 = 1;
            }
            while (!v99);
          }
        }
        v100 = *(_QWORD *)(a1 + 24);
        v101 = *(char **)(v100 + 240);
        v102 = *(char **)(v100 + 248);
        if (v101 != v102)
        {
          v103 = 0;
          v104 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v90 + 40) + 16 * v92);
          v105 = (unint64_t)(v102 - v101) >> 3;
          v106 = v89 - 0x40000000;
          v107 = v89 >> 3;
          while (1)
          {
            v108 = *(uint64_t **)v101;
            if (v104 == 1)
            {
              if (v106 >= 0xC0000001)
              {
                v109 = *v108;
LABEL_162:
                if (v107 < *(unsigned __int16 *)(v109 + 22)
                  && ((1 << (v89 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v109 + 8) + v107)) != 0
                  && (!v103
                   || v108 != v103
                   && ((*(_DWORD *)(v103[1] + ((*(unsigned __int16 *)(v109 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v109 + 24)) & 1) != 0))
                {
                  v103 = *(uint64_t **)v101;
                }
              }
            }
            else
            {
              v109 = *v108;
              v110 = *(unsigned __int8 **)(*(_QWORD *)(v100 + 264)
                                         + 24
                                         * (*(unsigned __int16 *)(*v108 + 24)
                                          + *(_DWORD *)(v100 + 272) * (_DWORD)v105)
                                         + 16);
              do
              {
                v112 = *v110++;
                v111 = v112;
              }
              while (v112 != 1 && v111 != v104);
              if (v106 < 0xC0000001)
              {
                v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
              }
              else
              {
                v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
                if (v111 != 1)
                  goto LABEL_162;
              }
            }
            v101 += 8;
            if (v101 == v102)
              goto LABEL_181;
          }
        }
        v103 = 0;
LABEL_181:
        v114 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v100 + 248))(v100, v103, 3221225473);
        if ((uint64_t *)v114 != v103)
        {
          v115 = *(_QWORD *)v90;
          if (!*(_QWORD *)v90)
            goto LABEL_320;
          if (*(_WORD *)(v115 + 56))
          {
            v116 = (unsigned int *)(*(_QWORD *)(v115 + 32) + 40 * (*(unsigned __int16 *)(v115 + 56) - 1));
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v116 + 40) + 16 * v116[2]) == 172
              && !(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 584))(*(_QWORD *)(a1 + 16), *(_QWORD *)v90))
            {
              goto LABEL_298;
            }
          }
          v117 = *(unsigned __int16 *)(v115 + 58);
          if (!*(_WORD *)(v115 + 58))
          {
            v118 = 0;
LABEL_191:
            if (*(_WORD *)(v115 + 56))
            {
              v122 = *(unsigned int **)(v115 + 32);
              v123 = &v122[10 * *(unsigned __int16 *)(v115 + 56)];
              while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v122 + 40) + 16 * v122[2]) != 172
                   || (*(unsigned int (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 16) + 584))(*(_QWORD *)(a1 + 16), v115))
              {
                v122 += 10;
                if (v122 == v123)
                  goto LABEL_196;
              }
              goto LABEL_203;
            }
LABEL_196:
            v14 = v90;
            v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
            if ((v118 & 1) == 0)
              goto LABEL_300;
            v264 = v103;
            v124 = *(_QWORD *)v90;
            v284 = v286;
            v285 = 0x200000000;
            if ((*(unsigned int (**)(_QWORD, _QWORD, int64_t, void **))(**(_QWORD **)(a1 + 16) + 648))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 624), v124, &v284))
            {
              v125 = (_DWORD)v285 == 3;
            }
            else
            {
              v125 = 1;
            }
            v265 = v114;
            if (v125)
            {
              v14 = 0;
            }
            else
            {
              v126 = *((_QWORD *)v284 + 1);
              v127 = *(unsigned __int16 *)(v126 + 58);
              v128 = *(unsigned __int16 *)(*(_QWORD *)v90 + 58);
              v129 = *(_DWORD *)(*(_QWORD *)v284 + 28);
              v261 = *(_QWORD *)v284;
              if (v129 == -1)
              {
                v130 = *(_QWORD *)v284;
                v131 = *(unsigned __int16 *)(*(_QWORD *)v90 + 58);
                v132 = sub_1C5D093AC((_QWORD *)a1, *(_QWORD *)v284);
                *(_DWORD *)(v130 + 28) = *((_DWORD *)v132 + 48);
                sub_1C635AED0(a1, (uint64_t *)v132);
                v260 = (uint64_t)v132;
                v133 = v132;
                v128 = v131;
                (*(void (**)(uint64_t, const llvm::SUnit *))(*(_QWORD *)a1 + 72))(a1, v133);
                goto LABEL_207;
              }
              v260 = *v268 + 272 * v129;
              v14 = v90;
              if ((*(_WORD *)(v260 + 228) & 0x400) == 0)
              {
LABEL_207:
                v134 = *(_DWORD *)(v126 + 28);
                v259 = v134;
                if (v134 == -1)
                {
                  v135 = sub_1C5D093AC((_QWORD *)a1, v126);
                  v136 = (int64_t)v135;
                  *(_DWORD *)(v126 + 28) = *((_DWORD *)v135 + 48);
                  v137 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
                  v138 = (__int16)~*(_WORD *)(v126 + 24);
                  v139 = *(unsigned __int16 *)(v137 + 48 * v138 + 2);
                  if (*(_WORD *)(v137 + 48 * v138 + 2))
                  {
                    v140 = (__int16 *)(*(_QWORD *)(v137 + 48 * v138 + 40) + 4);
                    while (1)
                    {
                      v141 = *v140;
                      v140 += 3;
                      if ((v141 & 1) != 0)
                        break;
                      if (!--v139)
                        goto LABEL_216;
                    }
                    *((_WORD *)v135 + 114) |= 8u;
                  }
LABEL_216:
                  if ((*(_BYTE *)(v137 + 48 * v138 + 11) & 2) != 0)
                    *((_WORD *)v135 + 114) |= 0x10u;
                  sub_1C635AED0(a1, (uint64_t *)v135);
                  (*(void (**)(uint64_t, int64_t))(*(_QWORD *)a1 + 72))(a1, v136);
LABEL_219:
                  if ((_DWORD)v127)
                  {
                    for (i = 0; i != v127; ++i)
                      sub_1C5D6146C(*(_QWORD *)(a1 + 624), *(_QWORD *)v90, i, v126, i);
                  }
                  sub_1C5D6146C(*(_QWORD *)(a1 + 624), *(_QWORD *)v90, v128 - 1, v261, 1);
                  v287 = v289;
                  v288 = 0x400000000;
                  v282 = &v283[2];
                  *(_QWORD *)v283 = 0x400000000;
                  *(_QWORD *)v281 = &v281[16];
                  *(_QWORD *)&v281[8] = 0x400000000;
                  v279[0] = (llvm::SDep *)v280;
                  v279[1] = (llvm::SDep *)0x400000000;
                  v276 = v278;
                  v277 = 0x400000000;
                  v143 = *(unsigned int *)(v90 + 40);
                  if ((_DWORD)v143)
                  {
                    v157 = v261;
                    v158 = *(uint64_t **)(v90 + 32);
                    v159 = &v158[2 * v143];
                    do
                    {
                      v160 = *v158;
                      if ((*v158 & 6) != 0)
                      {
                        v161 = v158[1];
                        v162 = v288;
                        v163 = (llvm::SDep **)&v287;
                        if (v288 >= (unint64_t)HIDWORD(v288))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v287, (uint64_t)v289, v288 + 1, 16);
                          v157 = v261;
                          v162 = v288;
                        }
                      }
                      else
                      {
                        v164 = *(_QWORD *)(v160 & 0xFFFFFFFFFFFFFFF8);
                        if (v164)
                        {
                          while (1)
                          {
                            v165 = 40 * *(unsigned __int16 *)(v157 + 56);
                            v166 = *(_QWORD **)(v157 + 32);
                            if (*(_WORD *)(v157 + 56))
                              break;
LABEL_255:
                            if (*(_WORD *)(v164 + 56))
                            {
                              v167 = (unsigned int *)(*(_QWORD *)(v164 + 32)
                                                    + 40 * (*(unsigned __int16 *)(v164 + 56) - 1));
                              v164 = *(_QWORD *)v167;
                              if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v167 + 40) + 16 * v167[2]) == 172)
                                continue;
                            }
                            goto LABEL_257;
                          }
                          while (v164 != *v166)
                          {
                            v166 += 5;
                            v165 -= 40;
                            if (!v165)
                              goto LABEL_255;
                          }
                          v161 = v158[1];
                          v162 = *(unsigned int *)&v281[8];
                          v163 = (llvm::SDep **)v281;
                          if (*(unsigned int *)&v281[8] >= (unint64_t)*(unsigned int *)&v281[12])
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v281, (uint64_t)&v281[16], *(unsigned int *)&v281[8] + 1, 16);
                            v157 = v261;
                            v162 = *(unsigned int *)&v281[8];
                          }
                        }
                        else
                        {
LABEL_257:
                          v161 = v158[1];
                          v162 = LODWORD(v279[1]);
                          v163 = v279;
                          if (LODWORD(v279[1]) >= (unint64_t)HIDWORD(v279[1]))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v279, (uint64_t)v280, LODWORD(v279[1]) + 1, 16);
                            v157 = v261;
                            v162 = LODWORD(v279[1]);
                          }
                        }
                      }
                      v168 = (_QWORD *)((char *)*v163 + 16 * v162);
                      *v168 = v160;
                      v168[1] = v161;
                      ++*((_DWORD *)v163 + 2);
                      v158 += 2;
                      v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
                    }
                    while (v158 != v159);
                  }
                  v144 = *(unsigned int *)(v90 + 120);
                  if ((_DWORD)v144)
                  {
                    v169 = *(__int128 **)(v90 + 112);
                    v170 = 16 * v144;
                    do
                    {
                      v171 = *v169;
                      if ((*(_QWORD *)v169 & 6) != 0)
                      {
                        v172 = v283[0];
                        v173 = &v282;
                        if (v283[0] >= (unint64_t)v283[1])
                        {
                          v262 = *v169;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)&v283[2], v283[0] + 1, 16);
                          v171 = v262;
                          v172 = v283[0];
                        }
                      }
                      else
                      {
                        v172 = v277;
                        v173 = &v276;
                        if (v277 >= (unint64_t)HIDWORD(v277))
                        {
                          v263 = *v169;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, (uint64_t)v278, v277 + 1, 16);
                          v171 = v263;
                          v172 = v277;
                        }
                      }
                      *((_OWORD *)*v173 + v172) = v171;
                      ++*((_DWORD *)v173 + 2);
                      ++v169;
                      v170 -= 16;
                    }
                    while (v170);
                  }
                  if ((_DWORD)v288)
                  {
                    v145 = (const llvm::SDep *)v287;
                    v146 = 16 * v288;
                    do
                    {
                      llvm::SUnit::removePred(v90, v145);
                      if (v129 == -1)
                      {
                        llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v260, (llvm::SUnit *)(*(_QWORD *)v145 & 0xFFFFFFFFFFFFFFF8));
                        llvm::SUnit::addPred(v260, v145, 1);
                      }
                      v145 = (const llvm::SDep *)((char *)v145 + 16);
                      v146 -= 16;
                    }
                    while (v146);
                  }
                  if (*(_DWORD *)&v281[8])
                  {
                    v147 = *(const llvm::SDep **)v281;
                    v148 = 16 * *(unsigned int *)&v281[8];
                    do
                    {
                      llvm::SUnit::removePred(v90, v147);
                      if (v129 == -1)
                      {
                        llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v260, (llvm::SUnit *)(*(_QWORD *)v147 & 0xFFFFFFFFFFFFFFF8));
                        llvm::SUnit::addPred(v260, v147, 1);
                      }
                      v147 = (const llvm::SDep *)((char *)v147 + 16);
                      v148 -= 16;
                    }
                    while (v148);
                  }
                  if (LODWORD(v279[1]))
                  {
                    v149 = v279[0];
                    v150 = 16 * LODWORD(v279[1]);
                    v151 = v279[0];
                    do
                    {
                      llvm::SUnit::removePred(v90, v149);
                      v152 = *(_QWORD *)v151;
                      v151 = (llvm::SDep *)((char *)v151 + 16);
                      llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v136, (llvm::SUnit *)(v152 & 0xFFFFFFFFFFFFFFF8));
                      llvm::SUnit::addPred(v136, v149, 1);
                      v149 = v151;
                      v150 -= 16;
                    }
                    while (v150);
                  }
                  if ((_DWORD)v277)
                  {
                    v153 = (__int128 *)v276;
                    v154 = 16 * v277;
                    do
                    {
                      v275 = *v153;
                      v155 = (llvm::SUnit *)(v275 & 0xFFFFFFFFFFFFFFF8);
                      *(_QWORD *)&v275 = v275 & 7 | v90;
                      llvm::SUnit::removePred((unint64_t)v155, (const llvm::SDep *)&v275);
                      *(_QWORD *)&v275 = v275 & 7 | v136;
                      llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, v155, (llvm::SUnit *)(v136 & 0xFFFFFFFFFFFFFFF8));
                      llvm::SUnit::addPred((int64_t)v155, (const llvm::SDep *)&v275, 1);
                      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 72))(*(_QWORD *)(a1 + 672))
                        && (*((_WORD *)v155 + 114) & 0x400) != 0
                        && (v275 & 6) == 0
                        && *(_WORD *)(v136 + 224))
                      {
                        --*(_WORD *)(v136 + 224);
                      }
                      ++v153;
                      v154 -= 16;
                    }
                    while (v154);
                  }
                  if (v283[0])
                  {
                    v174 = (__int128 *)v282;
                    v156 = (llvm::SUnit *)(v260 & 0xFFFFFFFFFFFFFFF8);
                    v175 = 16 * v283[0];
                    do
                    {
                      v275 = *v174;
                      v176 = (llvm::SUnit *)(v275 & 0xFFFFFFFFFFFFFFF8);
                      *(_QWORD *)&v275 = v275 & 7 | v90;
                      llvm::SUnit::removePred((unint64_t)v176, (const llvm::SDep *)&v275);
                      if (v129 == -1)
                      {
                        *(_QWORD *)&v275 = v275 & 7 | v260;
                        llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, v176, (llvm::SUnit *)(v260 & 0xFFFFFFFFFFFFFFF8));
                        llvm::SUnit::addPred((int64_t)v176, (const llvm::SDep *)&v275, 1);
                      }
                      ++v174;
                      v175 -= 16;
                    }
                    while (v175);
                  }
                  else
                  {
                    v156 = (llvm::SUnit *)(v260 & 0xFFFFFFFFFFFFFFF8);
                  }
                  *(_QWORD *)&v275 = v260 & 0xFFFFFFFFFFFFFFF9;
                  v177 = *(unsigned __int16 *)(v260 + 226);
                  DWORD2(v275) = 0;
                  HIDWORD(v275) = v177;
                  v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
                  llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, (llvm::SUnit *)v136, v156);
                  llvm::SUnit::addPred(v136, (const llvm::SDep *)&v275, 1);
                  if (v129 == -1)
                    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 672) + 40))(*(_QWORD *)(a1 + 672), v260);
                  if (v259 == -1)
                    (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 672) + 40))(*(_QWORD *)(a1 + 672), v136);
                  if (!*(_DWORD *)(v136 + 212))
                    *(_WORD *)(v136 + 228) |= 0x200u;
                  if (v276 != v278)
                    free(v276);
                  if ((_BYTE *)v279[0] != v280)
                    free(v279[0]);
                  if (*(_BYTE **)v281 != &v281[16])
                    free(*(void **)v281);
                  if (v282 != &v283[2])
                    free(v282);
                  if (v287 != v289)
                    free(v287);
                  v14 = v136;
                }
                else
                {
                  v136 = *v268 + 272 * v134;
                  v14 = v90;
                  if ((*(_WORD *)(v136 + 228) & 0x400) == 0)
                    goto LABEL_219;
                }
              }
            }
            if (v284 != v286)
              free(v284);
            v103 = v264;
            v114 = v265;
            if (!v14)
            {
LABEL_298:
              v115 = 0;
              goto LABEL_320;
            }
            if (*(_DWORD *)(v14 + 212))
            {
LABEL_300:
              v178 = v90;
              v179 = -252645135 * ((*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 4);
              v115 = sub_1C635AD6C(a1, v14);
              if (*(_DWORD *)(v115 + 192) >= v179)
                llvm::ScheduleDAGTopologicalSort::AddSUnitWithoutPredecessors(v8, (const llvm::SUnit *)v115);
              v180 = *(unsigned int *)(v14 + 40);
              v90 = v178;
              if ((_DWORD)v180)
              {
                v181 = *(const llvm::SDep **)(v14 + 32);
                v182 = 16 * v180;
                do
                {
                  if ((~*(_DWORD *)v181 & 6) != 0 || *((_DWORD *)v181 + 2) != 3)
                  {
                    llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v115, (llvm::SUnit *)(*(_QWORD *)v181 & 0xFFFFFFFFFFFFFFF8));
                    llvm::SUnit::addPred(v115, v181, 1);
                  }
                  v181 = (const llvm::SDep *)((char *)v181 + 16);
                  v182 -= 16;
                }
                while (v182);
              }
              v287 = (_QWORD *)(v14 | 6);
              v288 = 3;
              llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v115, (llvm::SUnit *)(v14 & 0xFFFFFFFFFFFFFFF8));
              llvm::SUnit::addPred(v115, (const llvm::SDep *)&v287, 1);
              v287 = v289;
              v288 = 0x400000000;
              v183 = *(unsigned int *)(v14 + 120);
              if ((_DWORD)v183)
              {
                v266 = v114;
                v184 = 0;
                v185 = *(uint64_t **)(v14 + 112);
                v186 = 16 * v183;
                do
                {
                  v187 = *v185;
                  if ((~*(_DWORD *)v185 & 6) != 0 || *((_DWORD *)v185 + 2) != 3)
                  {
                    v188 = (llvm::SUnit *)(v187 & 0xFFFFFFFFFFFFFFF8);
                    if ((*(_WORD *)((v187 & 0xFFFFFFFFFFFFFFF8) + 228) & 0x400) != 0)
                    {
                      *(_OWORD *)v281 = *(_OWORD *)v185;
                      *(_QWORD *)v281 = v281[0] & 7 | (unint64_t)v115;
                      llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, v188, (llvm::SUnit *)(v115 & 0xFFFFFFFFFFFFFFF8));
                      llvm::SUnit::addPred((int64_t)v188, (const llvm::SDep *)v281, 1);
                      *(_QWORD *)v281 = v281[0] & 7 | (unint64_t)v14;
                      v282 = v188;
                      *(_OWORD *)v283 = *(_OWORD *)v281;
                      v189 = sub_1C4926708((uint64_t)&v287, (unint64_t)&v282, 1);
                      v190 = (char *)&v287[3 * v288];
                      v191 = *(_OWORD *)v189;
                      *((_QWORD *)v190 + 2) = *(_QWORD *)(v189 + 16);
                      *(_OWORD *)v190 = v191;
                      v184 = v288 + 1;
                      LODWORD(v288) = v288 + 1;
                    }
                  }
                  v185 += 2;
                  v186 -= 16;
                }
                while (v186);
                v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
                v114 = v266;
                if (v184)
                {
                  v192 = v287;
                  v193 = &v287[3 * v184];
                  do
                  {
                    v194 = (const llvm::SDep *)(v192 + 1);
                    v195 = *v192;
                    v192 += 3;
                    llvm::SUnit::removePred(v195, v194);
                  }
                  while (v192 != v193);
                }
              }
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 672) + 48))(*(_QWORD *)(a1 + 672), v14);
              (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 672) + 40))(*(_QWORD *)(a1 + 672), v115);
              if (v287 != v289)
                free(v287);
              goto LABEL_320;
            }
            goto LABEL_343;
          }
          v118 = 0;
          v119 = *(unsigned __int8 **)(v115 + 40);
          while (1)
          {
            v121 = *v119;
            v119 += 16;
            v120 = v121;
            if (v121 == 172)
              break;
            v118 |= v120 == 1;
            if (!--v117)
              goto LABEL_191;
          }
LABEL_203:
          v115 = 0;
          v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
LABEL_320:
          if (!(v114 | v115))
            llvm::report_fatal_error((llvm *)"Can't handle live physical register dependency!", (const char *)1);
          v14 = v115;
          if (v115)
          {
LABEL_343:
            *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v89) = v14;
            v287 = (_QWORD *)((unint64_t)v272 | 6);
            v288 = 3;
            llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v14, (llvm::SUnit *)((unint64_t)v272 & 0xFFFFFFFFFFFFFFF8));
            llvm::SUnit::addPred(v14, (const llvm::SDep *)&v287, 1);
            *((_WORD *)v272 + 114) &= ~0x200u;
            goto LABEL_344;
          }
        }
        v282 = &v283[2];
        *(_QWORD *)v283 = 0x200000000;
        v196 = (int64_t)sub_1C5D093AC((_QWORD *)a1, 0);
        *(_QWORD *)(v196 + 256) = v114;
        *(_QWORD *)(v196 + 264) = v103;
        v197 = (int64_t)sub_1C5D093AC((_QWORD *)a1, 0);
        *(_QWORD *)(v197 + 256) = v103;
        *(_QWORD *)(v197 + 264) = v114;
        v287 = v289;
        v288 = 0x400000000;
        v198 = *(unsigned int *)(v90 + 120);
        if ((_DWORD)v198)
        {
          v200 = *(uint64_t **)(v90 + 112);
          v201 = v196 | 6;
          v267 = v196;
          v199 = (llvm::SUnit *)(v196 & 0xFFFFFFFFFFFFFFF8);
          v202 = 16 * v198;
          do
          {
            v203 = *v200;
            if ((~*(_DWORD *)v200 & 6) != 0 || *((_DWORD *)v200 + 2) != 3)
            {
              v204 = (llvm::SUnit *)(v203 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_WORD *)((v203 & 0xFFFFFFFFFFFFFFF8) + 228) & 0x400) != 0)
              {
                *(_OWORD *)v279 = *(_OWORD *)v200;
                v279[0] = (llvm::SDep *)((uint64_t)v279[0] & 7 | (unint64_t)v197);
                llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, v204, (llvm::SUnit *)(v197 & 0xFFFFFFFFFFFFFFF8));
                llvm::SUnit::addPred((int64_t)v204, (const llvm::SDep *)v279, 1);
                *(_QWORD *)v281 = v204;
                *(_OWORD *)&v281[8] = *(_OWORD *)v200;
                v205 = sub_1C4926708((uint64_t)&v287, (unint64_t)v281, 1);
                v206 = (char *)&v287[3 * v288];
                v207 = *(_OWORD *)v205;
                *((_QWORD *)v206 + 2) = *(_QWORD *)(v205 + 16);
                *(_OWORD *)v206 = v207;
                LODWORD(v288) = v288 + 1;
              }
              else
              {
                *(_QWORD *)v281 = v201;
                *(_QWORD *)&v281[8] = 3;
                llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v271, v204, v199);
                llvm::SUnit::addPred((int64_t)v204, (const llvm::SDep *)v281, 1);
              }
            }
            v200 += 2;
            v202 -= 16;
          }
          while (v202);
          v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
          v196 = v267;
          if ((_DWORD)v288)
          {
            v208 = v287;
            v209 = &v287[3 * v288];
            do
            {
              v210 = (const llvm::SDep *)(v208 + 1);
              v211 = *v208;
              v208 += 3;
              llvm::SUnit::removePred(v211, v210);
            }
            while (v208 != v209);
            v8 = (llvm::ScheduleDAGTopologicalSort *)(a1 + 816);
            v196 = v267;
          }
        }
        else
        {
          v199 = (llvm::SUnit *)(v196 & 0xFFFFFFFFFFFFFFF8);
        }
        *(_QWORD *)v281 = v90 & 0xFFFFFFFFFFFFFFF9;
        v212 = *(unsigned __int16 *)(v90 + 226);
        *(_DWORD *)&v281[8] = v89;
        *(_DWORD *)&v281[12] = v212;
        llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v196, (llvm::SUnit *)(v90 & 0xFFFFFFFFFFFFFFF8));
        llvm::SUnit::addPred(v196, (const llvm::SDep *)v281, 1);
        v279[0] = (llvm::SDep *)(v196 & 0xFFFFFFFFFFFFFFF9);
        v213 = *(unsigned __int16 *)(v196 + 226);
        LODWORD(v279[1]) = 0;
        HIDWORD(v279[1]) = v213;
        llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, (llvm::SUnit *)v197, v199);
        llvm::SUnit::addPred(v197, (const llvm::SDep *)v279, 1);
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 672) + 48))(*(_QWORD *)(a1 + 672), v90);
        (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 672) + 40))(*(_QWORD *)(a1 + 672), v196);
        (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 672) + 40))(*(_QWORD *)(a1 + 672), v197);
        v214 = v283[0];
        if (v283[0] >= (unint64_t)v283[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)&v283[2], v283[0] + 1, 8);
          v214 = v283[0];
        }
        *((_QWORD *)v282 + v214) = v196;
        v215 = v283[0] + 1;
        v283[0] = v215;
        if (v215 >= v283[1])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v282, (uint64_t)&v283[2], v215 + 1, 8);
          LODWORD(v215) = v283[0];
        }
        *((_QWORD *)v282 + v215) = v197;
        ++v283[0];
        if (v287 != v289)
          free(v287);
        v216 = v272;
        v217 = *(_QWORD *)v282;
        v287 = (_QWORD *)(*(_QWORD *)v282 | 6);
        v288 = 3;
        llvm::ScheduleDAGTopologicalSort::AddPredQueued((uint64_t)v8, v272, (llvm::SUnit *)(v217 & 0xFFFFFFFFFFFFFFF8));
        llvm::SUnit::addPred((int64_t)v216, (const llvm::SDep *)&v287, 1);
        v14 = *((_QWORD *)v282 + v283[0] - 1);
        if (v282 != &v283[2])
          free(v282);
        goto LABEL_343;
      }
    }
LABEL_344:
    if (!byte_1ED824558)
    {
      if ((*(_BYTE *)(v14 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v14);
      sub_1C5D0846C(a1, *(_DWORD *)(v14 + 244));
      if ((*(_WORD *)(v14 + 228) & 2) == 0)
      {
        LODWORD(v218) = 1;
        do
          v218 = (v218 - 1);
        while ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 704) + 24))(*(_QWORD *)(a1 + 704), v14, v218));
        sub_1C5D0846C(a1, *(_DWORD *)(a1 + 712) - v218);
      }
    }
    llvm::SUnit::setHeightToAtLeast((llvm::SUnit *)v14, *(_DWORD *)(a1 + 712));
    sub_1C5D092DC(a1, (_WORD *)v14);
    v219 = *(uint64_t **)(a1 + 648);
    v220 = *(_QWORD *)(a1 + 656);
    if ((unint64_t)v219 >= v220)
    {
      v222 = *v269;
      v223 = v219 - *v269;
      v224 = v223 + 1;
      if ((unint64_t)(v223 + 1) >> 61)
LABEL_426:
        abort();
      v225 = v220 - (_QWORD)v222;
      if (v225 >> 2 > v224)
        v224 = v225 >> 2;
      if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8)
        v226 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v226 = v224;
      if (v226)
      {
        if (v226 >> 61)
LABEL_427:
          sub_1C4764EE4();
        v227 = (char *)operator new(8 * v226);
      }
      else
      {
        v227 = 0;
      }
      v228 = (uint64_t *)&v227[8 * v223];
      *v228 = v14;
      v221 = v228 + 1;
      if (v219 != v222)
      {
        do
        {
          v229 = *--v219;
          *--v228 = v229;
        }
        while (v219 != v222);
        v219 = *v269;
      }
      *(_QWORD *)(a1 + 640) = v228;
      *(_QWORD *)(a1 + 648) = v221;
      *(_QWORD *)(a1 + 656) = &v227[8 * v226];
      if (v219)
        operator delete(v219);
    }
    else
    {
      *v219 = v14;
      v221 = v219 + 1;
    }
    *(_QWORD *)(a1 + 648) = v221;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 672) + 120))(*(_QWORD *)(a1 + 672), v14);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 704) + 8))
      v230 = 1;
    else
      v230 = dword_1ED824CD8 > 1;
    if (!v230)
      sub_1C5D0846C(a1, *(_DWORD *)(a1 + 712) + 1);
    sub_1C5D08144(a1, v14);
    v231 = *(unsigned int *)(v14 + 120);
    if ((_DWORD)v231)
    {
      v232 = 16 * v231;
      v233 = (__int32 *)(*(_QWORD *)(v14 + 112) + 8);
      do
      {
        if ((*(_BYTE *)(v233 - 2) & 6) == 0)
        {
          v234 = *v233;
          if ((_DWORD)v234)
          {
            v235 = *(_QWORD *)(a1 + 728);
            if (*(_QWORD *)(v235 + 8 * v234) == v14)
            {
              --*(_DWORD *)(a1 + 724);
              *(_QWORD *)(v235 + 8 * *v233) = 0;
              *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * *v233) = 0;
              sub_1C5D09188(a1, *v233);
            }
          }
        }
        v233 += 4;
        v232 -= 16;
      }
      while (v232);
    }
    v236 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v236) == v14)
    {
      v247 = *(_QWORD *)v14;
      if (*(_QWORD *)v14)
      {
        do
        {
          v248 = *(__int16 *)(v247 + 24);
          if (v248 < 0 && *(_DWORD *)(*(_QWORD *)(a1 + 16) + 64) == (unsigned __int16)~(_WORD)v248)
          {
            --*(_DWORD *)(a1 + 724);
            *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v236) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v236) = 0;
            sub_1C5D09188(a1, v236);
          }
          if (!*(_WORD *)(v247 + 56))
            break;
          v249 = (unsigned int *)(*(_QWORD *)(v247 + 32) + 40 * (*(unsigned __int16 *)(v247 + 56) - 1));
          v247 = *(_QWORD *)v249;
        }
        while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v249 + 40) + 16 * v249[2]) == 172);
      }
    }
    v237 = *(_WORD *)(v14 + 228);
    if ((v237 & 1) != 0)
    {
      v238 = *(unsigned int *)(v14 + 40);
      if ((_DWORD)v238)
      {
        v239 = *(_QWORD **)(v14 + 32);
        v240 = 16 * v238;
        do
        {
          if ((*v239 & 6) == 0)
          {
            v241 = *v239 & 0xFFFFFFFFFFFFFFF8;
            v242 = *(_WORD *)(v241 + 228);
            if ((v242 & 1) != 0)
              *(_WORD *)(v241 + 228) = v242 & 0xFFFE;
          }
          v239 += 2;
          v240 -= 16;
        }
        while (v240);
        v237 = *(_WORD *)(v14 + 228);
      }
    }
    *(_WORD *)(v14 + 228) = v237 | 0x400;
    v243 = *(_DWORD **)(a1 + 704);
    v244 = v243[2];
    v245 = dword_1ED824CD8;
    if (v244)
      v246 = 1;
    else
      v246 = dword_1ED824CD8 >= 2;
    if (!v246)
      goto LABEL_411;
    if (*(_QWORD *)v14 && *(__int16 *)(*(_QWORD *)v14 + 24) < 0)
    {
      ++*(_DWORD *)(a1 + 720);
      if (!v244)
        goto LABEL_409;
    }
    else if (!v244)
    {
      goto LABEL_409;
    }
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v243 + 16))(v243) & 1) != 0)
      goto LABEL_410;
    if (!*(_DWORD *)(*(_QWORD *)(a1 + 704) + 8))
    {
      v245 = dword_1ED824CD8;
LABEL_409:
      if (*(_DWORD *)(a1 + 720) == v245)
LABEL_410:
        sub_1C5D0846C(a1, *(_DWORD *)(a1 + 712) + 1);
    }
LABEL_411:
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 64))(*(_QWORD *)(a1 + 672)))
    {
      do
      {
        if (*(_QWORD *)(a1 + 680) == *(_QWORD *)(a1 + 688))
          break;
        v250 = *(_DWORD *)(a1 + 712);
        v251 = (v250 + 1) > *(_DWORD *)(a1 + 716) ? v250 + 1 : *(_DWORD *)(a1 + 716);
        sub_1C5D0846C(a1, v251);
      }
      while (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 64))(*(_QWORD *)(a1 + 672)) & 1) != 0);
    }
  }
  v252 = *(_QWORD *)(a1 + 640);
  v253 = *(_QWORD *)(a1 + 648);
  v254 = (_QWORD *)(v253 - 8);
  if (v252 != v253 && v252 < (unint64_t)v254)
  {
    v256 = v252 + 8;
    do
    {
      v257 = *(_QWORD *)(v256 - 8);
      *(_QWORD *)(v256 - 8) = *v254;
      *v254-- = v257;
      v246 = v256 >= (unint64_t)v254;
      v256 += 8;
    }
    while (!v246);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 56))(*(_QWORD *)(a1 + 672));
}

BOOL sub_1C5D08134(uint64_t a1)
{
  return *(_BYTE *)(a1 + 664) == 0;
}

void sub_1C5D08144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = v5 + 16 * v4;
    v7 = a1 + 72;
    do
    {
      v8 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      --*(_DWORD *)(v8 + 212);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1) & 1) == 0)
      {
        if ((*(_BYTE *)(a2 + 236) & 2) == 0)
          llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
        llvm::SUnit::setHeightToAtLeast((llvm::SUnit *)v8, *(_DWORD *)(v5 + 12) + *(_DWORD *)(a2 + 244));
      }
      if (*(_DWORD *)(v8 + 212))
        v9 = 1;
      else
        v9 = v7 == v8;
      if (v9)
        goto LABEL_14;
      *(_WORD *)(v8 + 228) |= 0x200u;
      if ((*(_BYTE *)(v8 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v8);
      v10 = *(_DWORD *)(v8 + 244);
      if (v10 < *(_DWORD *)(a1 + 716))
        *(_DWORD *)(a1 + 716) = v10;
      v11 = *(_BYTE **)(a1 + 672);
      if (!byte_1ED824558 && v11[12])
      {
        if (!(*(unsigned int (**)(_BYTE *, unint64_t))(*(_QWORD *)v11 + 80))(v11, v8))
        {
          if ((*(_WORD *)(v8 + 228) & 0x100) == 0)
          {
            *(_WORD *)(v8 + 228) |= 0x100u;
            v14 = *(unint64_t **)(a1 + 688);
            v15 = *(_QWORD *)(a1 + 696);
            if ((unint64_t)v14 >= v15)
            {
              v17 = *(_QWORD **)(a1 + 680);
              v18 = v14 - v17;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 61)
                abort();
              v20 = v15 - (_QWORD)v17;
              if (v20 >> 2 > v19)
                v19 = v20 >> 2;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                v19 = 0x1FFFFFFFFFFFFFFFLL;
              v30 = v19;
              if (v19)
              {
                if (v19 >> 61)
                  sub_1C4764EE4();
                v21 = (char *)operator new(8 * v19);
              }
              else
              {
                v21 = 0;
              }
              v22 = (unint64_t *)&v21[8 * v18];
              *v22 = v8;
              v16 = v22 + 1;
              if (v14 != v17)
              {
                do
                {
                  v23 = *--v14;
                  *--v22 = v23;
                }
                while (v14 != v17);
                v14 = *(unint64_t **)(a1 + 680);
              }
              *(_QWORD *)(a1 + 680) = v22;
              *(_QWORD *)(a1 + 688) = v16;
              *(_QWORD *)(a1 + 696) = &v21[8 * v30];
              if (v14)
                operator delete(v14);
            }
            else
            {
              *v14 = v8;
              v16 = v14 + 1;
            }
            *(_QWORD *)(a1 + 688) = v16;
          }
          goto LABEL_14;
        }
        v11 = *(_BYTE **)(a1 + 672);
      }
      (*(void (**)(_BYTE *, unint64_t))(*(_QWORD *)v11 + 88))(v11, v8);
LABEL_14:
      if ((*(_QWORD *)v5 & 6) == 0)
      {
        v12 = *(unsigned int *)(v5 + 8);
        if ((_DWORD)v12)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v12) = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
          v13 = *(_QWORD *)(a1 + 736);
          if (!*(_QWORD *)(v13 + 8 * *(unsigned int *)(v5 + 8)))
          {
            ++*(_DWORD *)(a1 + 724);
            *(_QWORD *)(v13 + 8 * *(unsigned int *)(v5 + 8)) = a2;
          }
        }
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  v24 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v24))
  {
    v25 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      while (1)
      {
        v26 = *(__int16 *)(v25 + 24);
        if (v26 < 0)
        {
          v27 = *(_QWORD *)(a1 + 16);
          if (*(_DWORD *)(v27 + 68) == (unsigned __int16)~(_WORD)v26)
            break;
        }
        if (*(_WORD *)(v25 + 56))
        {
          v28 = (unsigned int *)(*(_QWORD *)(v25 + 32) + 40 * (*(unsigned __int16 *)(v25 + 56) - 1));
          v25 = *(_QWORD *)v28;
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v28 + 40) + 16 * v28[2]) == 172)
            continue;
        }
        return;
      }
      v32 = 0;
      v29 = *(_QWORD *)(a1 + 48)
          + 272 * *(int *)(sub_1C5D084EC(v25, (unsigned int *)&v32 + 1, (unsigned int *)&v32, v27) + 28);
      v31 = v29;
      sub_1C6180A54(a1 + 1232, &v31)[1] = a2;
      ++*(_DWORD *)(a1 + 724);
      *(_QWORD *)(*(_QWORD *)(a1 + 728) + 8 * v24) = v29;
      *(_QWORD *)(*(_QWORD *)(a1 + 736) + 8 * v24) = a2;
    }
  }
}

void sub_1C5D0846C(uint64_t a1, unsigned int a2)
{
  int v4;

  if (*(_DWORD *)(a1 + 712) < a2)
  {
    *(_DWORD *)(a1 + 720) = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 672) + 8) = a2;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 704) + 8))
    {
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 704) + 88))(*(_QWORD *)(a1 + 704));
        v4 = *(_DWORD *)(a1 + 712) + 1;
        *(_DWORD *)(a1 + 712) = v4;
      }
      while (v4 != a2);
    }
    else
    {
      *(_DWORD *)(a1 + 712) = a2;
    }
    sub_1C5D09054(a1);
  }
}

uint64_t sub_1C5D084EC(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v24;
  unsigned int v25;

  v6 = a1;
  v7 = *(unsigned __int16 *)(a1 + 24);
  while (v7 != 2)
  {
    if ((v7 & 0x8000) != 0)
    {
      v8 = v7 ^ 0xFFFF;
      if (*(_DWORD *)(a4 + 68) == v8)
      {
        v9 = *a2;
        v10 = *a2 + 1;
        *a2 = v10;
        if (*a3 <= v10)
          v11 = v9 + 1;
        else
          v11 = *a3;
        *a3 = v11;
      }
      else if (*(_DWORD *)(a4 + 64) == v8 && (*a2)-- == 1)
      {
        return v6;
      }
    }
    if (*(_WORD *)(v6 + 56))
    {
      v13 = *(unsigned int **)(v6 + 32);
      v14 = &v13[10 * *(unsigned __int16 *)(v6 + 56)];
      while (1)
      {
        v6 = *(_QWORD *)v13;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v13 + 40) + 16 * v13[2]) == 1)
          break;
        v13 += 10;
        if (v13 == v14)
          return 0;
      }
      v7 = *(unsigned __int16 *)(v6 + 24);
      if (v7 != 1)
        continue;
    }
    return 0;
  }
  v16 = *a3;
  if (*(_WORD *)(v6 + 56))
  {
    v17 = *(_QWORD **)(v6 + 32);
    v18 = *a2;
    v19 = 40 * *(unsigned __int16 *)(v6 + 56);
    v20 = *a3;
    v6 = 0;
    do
    {
      v24 = v16;
      v25 = v18;
      v21 = sub_1C5D084EC(*v17, &v25, &v24, a4);
      if (v21)
      {
        if (!v6 || v24 > v20)
        {
          v20 = v24;
          v6 = v21;
        }
      }
      v17 += 5;
      v19 -= 40;
    }
    while (v19);
  }
  else
  {
    v6 = 0;
    v20 = *a3;
  }
  *a3 = v20;
  return v6;
}

void sub_1C5D0865C(void ***a1)
{
  void **v1;
  void **v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unsigned int v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  uint64_t v58;
  void **v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64[4];
  char v65;
  void *__src;
  uint64_t v67;
  _BYTE v68[16];
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  _QWORD *v74[4];

  v74[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v1 = a1[1];
  do
  {
    v2 = *a1;
    if (!**a1)
      break;
    __src = v68;
    v67 = 0x400000000;
    if (*((_DWORD *)v1 + 181))
    {
      v3 = (unint64_t)*v2;
      v69 = &v71;
      v70 = (void *)0x400000000;
      v74[0] = 0;
      v74[1] = 0;
      v73 = v74;
      v4 = *(unsigned int *)(v3 + 40);
      if ((_DWORD)v4)
      {
        v5 = 16 * v4;
        v6 = (unsigned int *)(*(_QWORD *)(v3 + 32) + 8);
        do
        {
          v7 = *((_QWORD *)v6 - 1);
          if ((v7 & 6) == 0)
          {
            v8 = *v6;
            if ((_DWORD)v8)
            {
              v9 = (uint64_t)v1[91];
              if (*(_QWORD *)(v9 + 8 * v8) != v3)
                sub_1C5D08D98(v7 & 0xFFFFFFFFFFFFFFF8, v8, v9, (uint64_t)&v69, (uint64_t)&__src, (uint64_t)v1[3]);
            }
          }
          v6 += 4;
          v5 -= 16;
        }
        while (v5);
      }
      v10 = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        do
        {
          v11 = *(unsigned __int16 *)(v10 + 24);
          if ((v11 - 261) > 1)
          {
            if ((__int16)v11 < 0)
            {
              v22 = (uint64_t)v1[2];
              if (*(_DWORD *)(v22 + 68) == (unsigned __int16)~(_WORD)v11)
              {
                v64[0] = *((_DWORD *)v1[3] + 4);
                if (*((_QWORD *)v1[91] + v64[0]))
                {
                  v23 = **((_QWORD **)v1[92] + v64[0]);
                  do
                  {
                    v24 = v23;
                    v25 = *(unsigned __int16 *)(v23 + 56);
                    if (!v25)
                      break;
                    v26 = (unsigned int *)(*(_QWORD *)(v24 + 32) + 40 * (v25 - 1));
                    v23 = *(_QWORD *)v26;
                  }
                  while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v26 + 40) + 16 * v26[2]) == 172);
                  if ((sub_1C5D08F40(v24, v10, 0, v22) & 1) == 0
                    && (sub_1C4854E58((uint64_t)&v69, v64) & 0x100000000) != 0)
                  {
                    v27 = v64[0];
                    v28 = v67;
                    if (v67 >= (unint64_t)HIDWORD(v67))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v68, v67 + 1, 4);
                      v28 = v67;
                    }
                    *((_DWORD *)__src + v28) = v27;
                    LODWORD(v67) = v67 + 1;
                  }
                }
              }
              if (*(_WORD *)(v10 + 56))
              {
                v29 = *(_QWORD *)(v10 + 32);
                v30 = 40 * *(unsigned __int16 *)(v10 + 56);
                while (!*(_QWORD *)v29 || *(_WORD *)(*(_QWORD *)v29 + 24) != 10)
                {
                  v29 += 40;
                  v30 -= 40;
                  if (!v30)
                    goto LABEL_54;
                }
                v32 = *(_QWORD *)(*(_QWORD *)v29 + 80);
                if (v32)
                {
                  v33 = v1[91];
                  v34 = *((_DWORD *)v1[3] + 4);
                  v64[0] = 1;
                  v35 = v34 - 1;
                  if (v34 != 2)
                  {
                    v47 = 1;
                    do
                    {
                      v48 = v33[v47];
                      if (v48)
                        v49 = v48 == v3;
                      else
                        v49 = 1;
                      if (!v49 && ((*(_DWORD *)(v32 + (((unint64_t)v47 >> 3) & 0x1FFFFFFC)) >> v47) & 1) == 0)
                      {
                        v50 = sub_1C4854E58((uint64_t)&v69, v64);
                        v47 = v64[0];
                        if ((v50 & 0x100000000) != 0)
                        {
                          v51 = v67;
                          if (v67 >= (unint64_t)HIDWORD(v67))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v68, v67 + 1, 4);
                            v51 = v67;
                          }
                          *((_DWORD *)__src + v51) = v47;
                          LODWORD(v67) = v67 + 1;
                          v47 = v64[0];
                        }
                      }
                      v64[0] = ++v47;
                    }
                    while (v47 != v35);
                  }
                }
              }
LABEL_54:
              v36 = (__int16)~*(_WORD *)(v10 + 24);
              v63 = *((_QWORD *)v1[2] + 1);
              if ((*(_BYTE *)(v63 + 48 * v36 + 8) & 4) != 0)
              {
                v37 = v63 + 48 * v36;
                v40 = *(unsigned __int8 *)(v37 + 4);
                v39 = (unsigned __int8 *)(v37 + 4);
                v38 = v40;
                if (v40)
                {
                  v41 = 0;
                  v42 = 2;
                  do
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(v63 + 48 * v36 + 40) + v42) & 4) != 0)
                    {
                      sub_1C5D08D98(v3, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32)+ 40 * (v41 - *(unsigned __int16 *)(v10 + 58)))+ 76), (uint64_t)v1[91], (uint64_t)&v69, (uint64_t)&__src, (uint64_t)v1[3]);
                      v38 = *v39;
                    }
                    ++v41;
                    v42 += 6;
                  }
                  while (v41 < v38);
                }
              }
              v43 = *(_WORD **)(v63 + 48 * v36 + 32);
              if (v43)
              {
                v44 = (unsigned __int16)*v43;
                if (*v43)
                {
                  v45 = v43 + 1;
                  do
                  {
                    sub_1C5D08D98(v3, v44, (uint64_t)v1[91], (uint64_t)&v69, (uint64_t)&__src, (uint64_t)v1[3]);
                    v46 = *v45++;
                    v44 = v46;
                  }
                  while (v46);
                }
              }
            }
          }
          else
          {
            v12 = *(unsigned __int16 *)(v10 + 56);
            v13 = (unsigned int *)(*(_QWORD *)(v10 + 32) + 40 * (v12 - 1));
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v13 + 40) + 16 * v13[2]) == 172)
              v14 = v12 - 1;
            else
              v14 = *(unsigned __int16 *)(v10 + 56);
            if (v14 != 4)
            {
              v15 = 4;
              do
              {
                v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40 * v15) + 80);
                v17 = (_QWORD *)(v16 + 24);
                if (*(_DWORD *)(v16 + 32) >= 0x41u)
                  v17 = (_QWORD *)*v17;
                v18 = *(_DWORD *)v17;
                v19 = (unsigned __int16)v18 >> 3;
                ++v15;
                if ((v18 & 7u) - 2 > 2)
                {
                  v15 += v19;
                }
                else if ((unsigned __int16)v18 >> 3)
                {
                  do
                  {
                    v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40 * v15) + 76);
                    if (v20 - 1 <= 0x3FFFFFFE)
                      sub_1C5D08D98(v3, v20, (uint64_t)v1[91], (uint64_t)&v69, (uint64_t)&__src, (uint64_t)v1[3]);
                    ++v15;
                    --v19;
                  }
                  while (v19);
                }
              }
              while (v15 != v14);
            }
          }
          if (!*(_WORD *)(v10 + 56))
            break;
          v21 = (unsigned int *)(*(_QWORD *)(v10 + 32) + 40 * (*(unsigned __int16 *)(v10 + 56) - 1));
          v10 = *(_QWORD *)v21;
        }
        while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 16 * v21[2]) == 172);
      }
      v52 = v67;
      sub_1C47655E8((uint64_t)&v73, v74[0]);
      if (v69 != &v71)
        free(v69);
      if (!v52)
        goto LABEL_92;
      v69 = **a1;
      v70 = &v72;
      v71 = 0x400000000;
      v53 = v67;
      if ((_DWORD)v67)
      {
        if (v67 < 5)
        {
          v54 = &v72;
          v55 = v67;
          goto LABEL_83;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)&v72, v67, 4);
        v55 = v67;
        if ((_DWORD)v67)
        {
          v54 = (uint64_t *)v70;
LABEL_83:
          memcpy(v54, __src, 4 * v55);
        }
        LODWORD(v71) = v53;
      }
      sub_1C635A3F8((uint64_t)(v1 + 99), &v69, (uint64_t)&v70, (uint64_t)v64);
      if (v70 != &v72)
        free(v70);
      if (v65)
      {
        *((_WORD *)**a1 + 114) |= 0x100u;
        v56 = **a1;
        v57 = *((unsigned int *)v1 + 188);
        if (v57 >= *((unsigned int *)v1 + 189))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v1 + 93), (uint64_t)(v1 + 95), v57 + 1, 8);
          v57 = *((unsigned int *)v1 + 188);
        }
        *((_QWORD *)v1[93] + v57) = v56;
        ++*((_DWORD *)v1 + 188);
        goto LABEL_106;
      }
      v58 = *(_QWORD *)v64;
      v59 = (void **)(*(_QWORD *)v64 + 8);
      if ((void **)(*(_QWORD *)v64 + 8) != &__src)
      {
        v60 = v67;
        v61 = *(unsigned int *)(*(_QWORD *)v64 + 16);
        if (v61 >= v67)
        {
          if ((_DWORD)v67)
            memmove(*v59, __src, 4 * v67);
        }
        else
        {
          if (*(_DWORD *)(*(_QWORD *)v64 + 20) < v67)
          {
            *(_DWORD *)(*(_QWORD *)v64 + 16) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v59, v58 + 24, v60, 4);
LABEL_100:
            v61 = 0;
          }
          else
          {
            if (!(_DWORD)v61)
              goto LABEL_100;
            memmove(*v59, __src, 4 * v61);
          }
          if (v61 != v67)
            memcpy((char *)*v59 + 4 * v61, (char *)__src + 4 * v61, 4 * v67 - 4 * v61);
        }
        *(_DWORD *)(v58 + 16) = v60;
      }
LABEL_106:
      **a1 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v1[84] + 96))(v1[84]);
      LOBYTE(v52) = 1;
      goto LABEL_92;
    }
    LOBYTE(v52) = 0;
LABEL_92:
    if (__src != v68)
      free(__src);
  }
  while ((v52 & 1) != 0);
}

unint64_t sub_1C5D08D98(unint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  unsigned __int16 v16;
  BOOL v17;
  int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v9 = result;
  if (a6)
    v10 = (_QWORD *)(a6 + 8);
  else
    v10 = 0;
  v11 = ((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  v13 = v10[5];
  v12 = v10[6];
  v14 = (_WORD *)(v12 + v11 + 2);
  v15 = *(unsigned __int16 *)(v12 + v11) + (*(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF) * a2;
  do
  {
    v16 = *(_WORD *)(v13 + 4 * (unsigned __int16)v15);
    if (v16)
      v17 = v12 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v27 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15 + 2) << 16;
      v19 = (unsigned __int16 *)(v12
                               + 2
                               * *(unsigned int *)(*v10
                                                 + 24 * *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v15)
                                                 + 8));
      v26 = a5 + 16;
      while (1)
      {
        do
        {
          v20 = *(_QWORD *)(a3 + 8 * v16);
          if (v20)
            v21 = v20 == v9;
          else
            v21 = 1;
          if (!v21)
          {
            v28 = v16;
            result = sub_1C4854E58(a4, &v28);
            if ((result & 0x100000000) != 0)
            {
              v22 = *(unsigned int *)(a5 + 8);
              if (v22 >= *(unsigned int *)(a5 + 12))
              {
                result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v26, v22 + 1, 4);
                v22 = *(unsigned int *)(a5 + 8);
              }
              *(_DWORD *)(*(_QWORD *)a5 + 4 * v22) = v16;
              ++*(_DWORD *)(a5 + 8);
            }
          }
          v23 = *v19++;
          v16 += v23;
        }
        while (v23);
        v24 = HIWORD(v27);
        if (HIWORD(v27))
        {
          v27 >>= 16;
        }
        else
        {
          if (!*v14)
            return result;
          v15 += (unsigned __int16)*v14++;
          v25 = (unsigned __int16 *)(v10[5] + 4 * (unsigned __int16)v15);
          v24 = *v25;
          v27 = v25[1] << 16;
        }
        v16 = v24;
        v19 = (unsigned __int16 *)(v10[6] + 2 * *(unsigned int *)(*v10 + 24 * v24 + 8));
      }
    }
    v18 = (unsigned __int16)*v14++;
    v15 += v18;
  }
  while (v18);
  return result;
}

uint64_t sub_1C5D08F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  while (1)
  {
    result = a1 == a2;
    if (a1 == a2)
      break;
    v9 = *(unsigned __int16 *)(a1 + 24);
    if (v9 == 2)
    {
      if (!*(_WORD *)(a1 + 56))
        return 0;
      v13 = *(uint64_t **)(a1 + 32);
      v14 = 40 * *(unsigned __int16 *)(a1 + 56) - 40;
      do
      {
        v15 = *v13;
        v13 += 5;
        result = sub_1C5D08F40(v15, a2, a3, a4);
        if ((result & 1) != 0)
          break;
        v16 = v14;
        v14 -= 40;
      }
      while (v16);
      return result;
    }
    if ((v9 & 0x8000) != 0)
    {
      v10 = v9 ^ 0xFFFF;
      if (*(_DWORD *)(a4 + 68) == v10)
      {
        a3 = (a3 + 1);
      }
      else if (*(_DWORD *)(a4 + 64) == v10)
      {
        if (!(_DWORD)a3)
          return result;
        a3 = (a3 - 1);
      }
    }
    if (*(_WORD *)(a1 + 56))
    {
      v11 = *(unsigned int **)(a1 + 32);
      v12 = &v11[10 * *(unsigned __int16 *)(a1 + 56)];
      while (1)
      {
        a1 = *(_QWORD *)v11;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v11 + 40) + 16 * v11[2]) == 1)
          break;
        v11 += 10;
        if (v11 == v12)
          return 0;
      }
      if (*(_WORD *)(a1 + 24) != 1)
        continue;
    }
    return result;
  }
  return result;
}

void sub_1C5D09054(uint64_t a1)
{
  uint64_t v2;
  unsigned int i;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  _BYTE *v8;

  if (!byte_1ED824558)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 672) + 64))(*(_QWORD *)(a1 + 672)))
      *(_DWORD *)(a1 + 716) = -1;
    v2 = (*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 3;
    if ((_DWORD)v2)
    {
      for (i = 0; i != (_DWORD)v2; ++i)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * i);
        if ((*(_BYTE *)(v4 + 236) & 2) == 0)
          llvm::SUnit::ComputeHeight(*(llvm::SUnit **)(*(_QWORD *)(a1 + 680) + 8 * i));
        v5 = *(_DWORD *)(v4 + 244);
        if (v5 < *(_DWORD *)(a1 + 716))
          *(_DWORD *)(a1 + 716) = v5;
        v6 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * i);
        v7 = *(_WORD *)(v6 + 228);
        if ((v7 & 0x200) != 0)
        {
          v8 = *(_BYTE **)(a1 + 672);
          if (!byte_1ED824558 && v8[12])
          {
            if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v8 + 80))(v8))
              continue;
            v8 = *(_BYTE **)(a1 + 672);
          }
          (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 88))(v8);
          v6 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * i);
          v7 = *(_WORD *)(v6 + 228);
        }
        *(_WORD *)(v6 + 228) = v7 & 0xFEFF;
        *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * i) = *(_QWORD *)(*(_QWORD *)(a1 + 688) - 8);
        *(_QWORD *)(a1 + 688) -= 8;
        --i;
        LODWORD(v2) = v2 - 1;
      }
    }
  }
}

void sub_1C5D09188(uint64_t a1, __int32 a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int32 *v8;
  size_t v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int16 v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 752);
  if ((_DWORD)v2)
  {
    do
    {
      v5 = (v2 - 1);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 8 * v5);
      v16 = 0;
      if (sub_1C61DBB84(*(_QWORD *)(a1 + 792), *(_DWORD *)(a1 + 808), v6, &v16))
        v7 = v16;
      else
        v7 = *(_QWORD *)(a1 + 792) + 40 * *(unsigned int *)(a1 + 808);
      if (!a2
        || ((v8 = *(__int32 **)(v7 + 8),
             v9 = *(unsigned int *)(v7 + 16),
             v10 = &v8[v9],
             (v11 = wmemchr(v8, a2, v9)) != 0)
          ? (v12 = v11)
          : (v12 = v10),
            v12 != (__int32 *)(*(_QWORD *)(v7 + 8) + 4 * *(unsigned int *)(v7 + 16))))
      {
        v13 = *(_WORD *)(v6 + 228);
        *(_WORD *)(v6 + 228) = v13 & 0xFEFF;
        if ((v13 & 0x200) != 0 && !*(_DWORD *)(v6 + 196))
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 672) + 88))(*(_QWORD *)(a1 + 672), v6);
        v14 = *(unsigned int *)(a1 + 752);
        if (v2 < v14)
          *(_QWORD *)(*(_QWORD *)(a1 + 744) + 8 * v5) = *(_QWORD *)(*(_QWORD *)(a1 + 744) + 8 * v14 - 8);
        *(_DWORD *)(a1 + 752) = v14 - 1;
        v15 = *(void **)(v7 + 8);
        if (v15 != (void *)(v7 + 24))
          free(v15);
        *(_QWORD *)v7 = -8192;
        *(int32x2_t *)(a1 + 800) = vadd_s32(*(int32x2_t *)(a1 + 800), (int32x2_t)0x1FFFFFFFFLL);
      }
      --v2;
    }
    while (v5);
  }
}

_DWORD *sub_1C5D092DC(uint64_t a1, _WORD *a2)
{
  _DWORD *result;
  unsigned int v5;
  char v6;
  BOOL v7;
  uint64_t v8;

  result = *(_DWORD **)(a1 + 704);
  if (result[2] && *(_QWORD *)a2)
  {
    v5 = *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
    v6 = v5 - 5;
    if (v5 - 261 <= 0x34)
    {
      if (((1 << v6) & 0x18000000000004) != 0)
        return result;
      if (((1 << v6) & 3) != 0)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 32))(result);
    }
    v7 = v5 > 0x37;
    v8 = (1 << v5) & 0x86000000000004;
    if (v7 || v8 == 0)
    {
      if ((a2[114] & 2) != 0)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)result + 32))(result);
        result = *(_DWORD **)(a1 + 704);
      }
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, _WORD *))(*(_QWORD *)result + 40))(result, a2);
    }
  }
  return result;
}

const llvm::SUnit *sub_1C5D093AC(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;
  const llvm::SUnit *v4;

  v3 = -252645135 * ((a1[7] - a1[6]) >> 4);
  v4 = (const llvm::SUnit *)sub_1C635AC34((uint64_t)a1, a2);
  if (*((_DWORD *)v4 + 48) >= v3)
    llvm::ScheduleDAGTopologicalSort::AddSUnitWithoutPredecessors((llvm::ScheduleDAGTopologicalSort *)(a1 + 102), v4);
  return v4;
}

uint64_t sub_1C5D09410(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  char **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &off_1E8198858;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = a3;
  *(_OWORD *)(a1 + 120) = 0u;
  v7 = (char **)(a1 + 120);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v8 = a4[31] - a4[30];
  v9 = (v8 >> 3);
  *(_QWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = a5;
  if ((v8 >> 3))
  {
    sub_1C4D63CD0((char **)(a1 + 144), (v8 >> 3));
    v10 = *(_QWORD *)(a1 + 120);
    v11 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = v11 - v10;
  v13 = (v11 - v10) >> 2;
  if (v9 <= v12 >> 2)
  {
    if (v9 < v13)
      *(_QWORD *)(a1 + 128) = v10 + 4 * v9;
  }
  else
  {
    sub_1C4D63CD0(v7, v9 - v13);
  }
  v14 = *(void **)(a1 + 144);
  v15 = *(_QWORD *)(a1 + 152) - (_QWORD)v14;
  if (v15 >= 1)
  {
    v16 = (unint64_t)v15 >> 2;
    if (v16 <= 1)
      v16 = 1;
    bzero(v14, 4 * v16);
  }
  v17 = *(void **)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128) - (_QWORD)v17;
  if (v18 >= 1)
  {
    v19 = (unint64_t)v18 >> 2;
    if (v19 <= 1)
      v19 = 1;
    bzero(v17, 4 * v19);
  }
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(uint64_t **)(v20 + 240);
  v22 = *(uint64_t **)(v20 + 248);
  while (v21 != v22)
  {
    v23 = *v21++;
    *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(unsigned __int16 *)(*(_QWORD *)v23 + 24)) = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a4 + 264))(a4, v23, *(_QWORD *)(a1 + 56));
  }
  return a1;
}

_QWORD *sub_1C5D09574(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1C5D095E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D0965C()
{
  return 1;
}

void sub_1C5D09664(uint64_t a1, int64_t *a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int64_t v9;
  int64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned __int16 *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  int64_t *v69;
  int64_t v70;
  int64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  unsigned int i;
  llvm::SUnit *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  llvm::ScheduleDAGTopologicalSort *v99;
  _QWORD *v100;
  int64_t v102;
  int v103;
  int v104;
  __int128 v105;

  *(_QWORD *)(a1 + 48) = a2;
  if (!byte_1ED824B58)
  {
    v19 = *a2;
    v102 = a2[1];
    if (*a2 != v102)
    {
      do
      {
        if ((*(_WORD *)(v19 + 228) & 8) != 0)
        {
          v20 = *(_QWORD *)v19;
          if (*(_QWORD *)v19)
          {
            v21 = *(__int16 *)(v20 + 24);
            if (v21 < 0)
            {
              if (!*(_WORD *)(v20 + 56)
                || (v22 = (unsigned int *)(*(_QWORD *)(v20 + 32)
                                         + 40 * (*(unsigned __int16 *)(v20 + 56) - 1)),
                    *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v22 + 40) + 16 * v22[2]) != 172))
              {
                v93 = sub_1C5D0A850(*(_QWORD **)(v19 + 112), *(_DWORD *)(v19 + 120));
                v23 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
                v24 = v23 + 48 * (unsigned __int16)~(_WORD)v21;
                v26 = *(unsigned __int16 *)(v24 + 2);
                v25 = (unsigned __int16 *)(v24 + 2);
                v27 = *((unsigned __int8 *)v25 + 2);
                v103 = v26 - v27;
                v104 = v27;
                if (v26 != v27)
                {
                  v28 = 0;
                  v100 = (_QWORD *)(v23 + 48 * (unsigned __int16)~(_WORD)v21 + 40);
                  do
                  {
                    if ((int)v28 + v104 < *v25
                      && (*(_WORD *)(*v100 + 6 * (v28 + v104) + 4) & 1) != 0)
                    {
                      v29 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 32) + 40 * v28) + 28);
                      if (v29 != -1)
                      {
                        v30 = **(_QWORD **)(a1 + 48);
                        v31 = v30 + 272 * v29;
                        v32 = *(unsigned int *)(v31 + 120);
                        if ((_DWORD)v32)
                        {
                          v33 = *(_QWORD **)(v31 + 112);
                          v34 = &v33[2 * v32];
                          v95 = (_QWORD *)(v30 + 272 * v29 + 16);
                          do
                          {
                            v35 = *v33 & 0xFFFFFFFFFFFFFFF8;
                            if ((*v33 & 6) == 0 && v19 != v35)
                            {
                              if ((*(_BYTE *)(v35 + 236) & 2) == 0)
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)(*v33 & 0xFFFFFFFFFFFFFFF8));
                              v37 = *(_DWORD *)(v35 + 244);
                              if ((*(_BYTE *)(v19 + 236) & 2) == 0)
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)v19);
                              v38 = *(_DWORD *)(v19 + 244);
                              if (v37 >= v38)
                                goto LABEL_67;
                              if ((*(_BYTE *)(v19 + 236) & 2) == 0)
                              {
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)v19);
                                v38 = *(_DWORD *)(v19 + 244);
                              }
                              if ((*(_BYTE *)(v35 + 236) & 2) == 0)
                                llvm::SUnit::ComputeHeight((llvm::SUnit *)v35);
                              if (v38 - *(_DWORD *)(v35 + 244) <= 1)
                              {
LABEL_67:
                                while (*(_DWORD *)(v35 + 120) == 1)
                                {
                                  v39 = *(_QWORD *)v35;
                                  v40 = *(unsigned __int16 *)(*(_QWORD *)v35 + 24);
                                  if (v40 != 65523)
                                    goto LABEL_72;
                                  v35 = **(_QWORD **)(v35 + 112) & 0xFFFFFFFFFFFFFFF8;
                                }
                                v39 = *(_QWORD *)v35;
                                if (!*(_QWORD *)v35)
                                  goto LABEL_55;
                                v40 = *(unsigned __int16 *)(v39 + 24);
LABEL_72:
                                if ((v40 & 0x8000) != 0)
                                {
                                  v41 = *(_WORD *)(v35 + 228);
                                  if (((v41 & 0x40) == 0
                                     || (*(_WORD *)(v19 + 228) & 0x80) == 0
                                     || (sub_1C5D0A8B4(v39, *(_QWORD *)v19, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8), *(_QWORD *)(a1 + 72)) & 1) == 0)&& ((v40 ^ 0xFFFFu) > 0xB || ((1 << ~(_BYTE)v40) & 0xB00) == 0))
                                  {
                                    v43 = *(_QWORD *)v19;
                                    if (*(_WORD *)(*(_QWORD *)v19 + 56))
                                    {
                                      v44 = *(_QWORD *)(v43 + 32);
                                      v45 = 40 * *(unsigned __int16 *)(*(_QWORD *)v19 + 56);
                                      v46 = (_QWORD *)a1;
                                      while (!*(_QWORD *)v44 || *(_WORD *)(*(_QWORD *)v44 + 24) != 10)
                                      {
                                        v44 += 40;
                                        v45 -= 40;
                                        if (!v45)
                                        {
                                          v48 = 0;
                                          goto LABEL_91;
                                        }
                                      }
                                      v48 = *(_QWORD *)(*(_QWORD *)v44 + 80);
                                    }
                                    else
                                    {
                                      v48 = 0;
                                      v46 = (_QWORD *)a1;
                                    }
LABEL_91:
                                    v97 = *(_QWORD *)(*(_QWORD *)(v46[8] + 8)
                                                    + 48 * (__int16)~*(_WORD *)(v43 + 24)
                                                    + 32);
                                    if (v97 | v48 && (v49 = *(unsigned int *)(v19 + 120), (_DWORD)v49))
                                    {
                                      v94 = v48;
                                      v50 = *(_QWORD **)(v19 + 112);
                                      v91 = &v50[2 * v49];
                                      v99 = (llvm::ScheduleDAGTopologicalSort *)(v46[11] + 816);
                                      v96 = (_QWORD *)(v46[9] + 8);
                                      while (1)
                                      {
                                        v92 = v50;
                                        v51 = *v50 & 0xFFFFFFFFFFFFFFF8;
                                        v52 = *(unsigned int *)(v51 + 40);
                                        if ((_DWORD)v52)
                                          break;
LABEL_112:
                                        v50 = v92 + 2;
                                        if (v92 + 2 == v91)
                                        {
                                          v41 = *(_WORD *)(v35 + 228);
                                          goto LABEL_114;
                                        }
                                      }
                                      v53 = *(_QWORD *)(v51 + 32);
                                      v54 = v53 + 16 * v52;
                                      while (1)
                                      {
                                        if ((*(_QWORD *)v53 & 6) == 0)
                                        {
                                          v55 = *(unsigned int *)(v53 + 8);
                                          if ((_DWORD)v55)
                                          {
                                            if (v94
                                              && ((*(_DWORD *)(v94 + ((v55 >> 3) & 0x1FFFFFFC)) >> v55) & 1) == 0
                                              && llvm::ScheduleDAGTopologicalSort::IsReachable(v99, (const llvm::SUnit *)v35, (const llvm::SUnit *)(*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8)))
                                            {
                                              goto LABEL_55;
                                            }
                                            if (v97)
                                            {
                                              v56 = *(unsigned __int16 *)v97;
                                              if (*(_WORD *)v97)
                                                break;
                                            }
                                          }
                                        }
LABEL_97:
                                        v53 += 16;
                                        if (v53 == v54)
                                          goto LABEL_112;
                                      }
                                      v57 = (unsigned __int16 *)(v97 + 2);
                                      while (1)
                                      {
                                        v58 = *(_DWORD *)(v53 + 8);
                                        if ((v58 == v56
                                           || v58 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v96, v56, v58))
                                          && llvm::ScheduleDAGTopologicalSort::IsReachable(v99, (const llvm::SUnit *)v35, (const llvm::SUnit *)(*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8)))
                                        {
                                          break;
                                        }
                                        v59 = *v57++;
                                        v56 = v59;
                                        if (!v59)
                                          goto LABEL_97;
                                      }
                                    }
                                    else
                                    {
LABEL_114:
                                      if ((v41 & 8) == 0)
                                        goto LABEL_122;
                                      v60 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
                                      v61 = (__int16)~*(_WORD *)(*(_QWORD *)v35 + 24);
                                      v62 = v60 + 48 * v61;
                                      v63 = *(unsigned __int8 *)(v62 + 4);
                                      v64 = *(unsigned __int16 *)(v62 + 2);
                                      if (v64 == v63)
                                        goto LABEL_122;
                                      v65 = 0;
                                      v66 = (_QWORD *)(v60 + 48 * v61 + 40);
                                      while (1)
                                      {
                                        if (v63 < v64 && (*(_WORD *)(*v66 + 6 * v63 + 4) & 1) != 0)
                                        {
                                          v67 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v35 + 32) + v65) + 28);
                                          if (v67 != -1 && *v95 == **(_QWORD **)(a1 + 48) + 272 * v67)
                                            break;
                                        }
                                        ++v63;
                                        v65 += 40;
                                        if (v64 == v63)
                                          goto LABEL_122;
                                      }
                                      if (v93
                                        && !sub_1C5D0A850(*(_QWORD **)(v35 + 112), *(_DWORD *)(v35 + 120))
                                        || (v41 & 0x10) != 0 && (*(_WORD *)(v19 + 228) & 0x10) == 0)
                                      {
LABEL_122:
                                        if (!llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(_QWORD *)(a1 + 88) + 816), (const llvm::SUnit *)v35, (const llvm::SUnit *)v19))
                                        {
                                          v68 = *(_QWORD *)(a1 + 88);
                                          *(_QWORD *)&v105 = v35 | 6;
                                          *((_QWORD *)&v105 + 1) = 3;
                                          llvm::ScheduleDAGTopologicalSort::AddPredQueued(v68 + 816, (llvm::SUnit *)v19, (llvm::SUnit *)(v35 & 0xFFFFFFFFFFFFFFF8));
                                          llvm::SUnit::addPred(v19, (const llvm::SDep *)&v105, 1);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_55:
                            v33 += 2;
                          }
                          while (v33 != v34);
                        }
                      }
                    }
                    ++v28;
                  }
                  while (v103 != (_DWORD)v28);
                }
              }
            }
          }
        }
        v19 += 272;
      }
      while (v19 != v102);
    }
  }
  if (!*(_BYTE *)(a1 + 44) && !*(_BYTE *)(a1 + 45))
  {
    v69 = *(int64_t **)(a1 + 48);
    v71 = *v69;
    v70 = v69[1];
    while (v71 != v70)
    {
      if (*(_DWORD *)(v71 + 204))
        v72 = 0;
      else
        v72 = *(_DWORD *)(v71 + 200) == 1;
      if (v72)
      {
        v73 = *(_QWORD *)v71;
        if (!*(_QWORD *)v71
          || *(_WORD *)(v73 + 24) != 49
          || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 32) + 40) + 76) & 0x80000000) == 0)
        {
          v74 = *(unsigned int *)(v71 + 40);
          if ((_DWORD)v74)
          {
            v75 = *(_QWORD **)(v71 + 32);
            v76 = 16 * v74;
            v77 = v76;
            v78 = v75;
            while (1)
            {
              v79 = (uint64_t *)(*v78 & 0xFFFFFFFFFFFFFFF8);
              if ((*v78 & 6) != 0 && v79 != 0)
              {
                v81 = *v79;
                if (v81)
                {
                  v82 = *(__int16 *)(v81 + 24);
                  if (v82 < 0 && *(_DWORD *)(*(_QWORD *)(a1 + 64) + 64) == (unsigned __int16)~(_WORD)v82)
                    break;
                }
              }
              v78 += 2;
              v77 -= 16;
              if (!v77)
              {
                while ((*v75 & 6) != 0)
                {
                  v75 += 2;
                  v76 -= 16;
                  if (!v76)
                    goto LABEL_153;
                }
                v83 = *v75 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_155;
              }
            }
          }
          else
          {
LABEL_153:
            v83 = 0;
LABEL_155:
            if ((*(_WORD *)(v83 + 228) & 0x40) == 0
              && *(_DWORD *)(v83 + 204) != 1
              && (!v73
               || *(_WORD *)(v73 + 24) != 50
               || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 32) + 40) + 76) & 0x80000000) == 0))
            {
              v84 = *(unsigned int *)(v83 + 120);
              if ((_DWORD)v84)
              {
                v85 = *(_QWORD **)(v83 + 112);
                v86 = 16 * v84;
                while (1)
                {
                  v87 = *v85 & 0xFFFFFFFFFFFFFFF8;
                  if (v71 != v87
                    && (!*(_DWORD *)(v87 + 204)
                     || (*(_WORD *)(v71 + 228) & 0x80) != 0
                     && (*(_WORD *)(v87 + 228) & 0x40) != 0
                     && (sub_1C5D0A8B4(*(_QWORD *)v87, *(_QWORD *)v71, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8), *(_QWORD *)(a1 + 72)) & 1) != 0|| llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(_QWORD *)(a1 + 88) + 816), (const llvm::SUnit *)v71, (const llvm::SUnit *)v87)))
                  {
                    break;
                  }
                  v85 += 2;
                  v86 -= 16;
                  if (!v86)
                  {
                    v88 = *(_DWORD *)(v83 + 120);
                    if (v88)
                    {
                      for (i = 0; i != v88; ++i)
                      {
                        v105 = *(_OWORD *)(*(_QWORD *)(v83 + 112) + 16 * i);
                        v90 = (llvm::SUnit *)(v105 & 0xFFFFFFFFFFFFFFF8);
                        if (v71 != (v105 & 0xFFFFFFFFFFFFFFF8))
                        {
                          *(_QWORD *)&v105 = v105 & 7 | v83;
                          llvm::SUnit::removePred((unint64_t)v90, (const llvm::SDep *)&v105);
                          llvm::ScheduleDAGTopologicalSort::AddPredQueued(*(_QWORD *)(a1 + 88) + 816, (llvm::SUnit *)v71, (llvm::SUnit *)(v105 & 0xFFFFFFFFFFFFFFF8));
                          llvm::SUnit::addPred(v71, (const llvm::SDep *)&v105, 1);
                          *(_QWORD *)&v105 = v105 & 7 | v71;
                          llvm::ScheduleDAGTopologicalSort::AddPredQueued(*(_QWORD *)(a1 + 88) + 816, v90, (llvm::SUnit *)(v71 & 0xFFFFFFFFFFFFFFF8));
                          llvm::SUnit::addPred((int64_t)v90, (const llvm::SDep *)&v105, 1);
                          --i;
                          v88 = *(_DWORD *)(v83 + 120);
                        }
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
      v71 += 272;
    }
  }
  v2 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - **(_QWORD **)(a1 + 48)) >> 4);
  LODWORD(v105) = 0;
  sub_1C522E4AC(a1 + 96, v2, (int *)&v105);
  v3 = *(uint64_t **)(a1 + 48);
  v5 = *v3;
  v4 = v3[1];
  while (v5 != v4)
  {
    sub_1C5D0AAB8(v5, (uint64_t *)(a1 + 96));
    v5 += 272;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 616);
  v7 = *(_QWORD **)(v6 + 88);
  v8 = *(_QWORD **)(v6 + 96);
  if (v7 != v8)
  {
    while (*v7 != v6)
    {
      if (++v7 == v8)
      {
        v7 = *(_QWORD **)(v6 + 96);
        break;
      }
    }
  }
  if (v7 != v8)
  {
    v9 = *a2;
    v10 = a2[1];
    if (*a2 != v10)
    {
      v11 = byte_1ED824798;
      do
      {
        if (!v11)
        {
          v12 = *(unsigned int *)(v9 + 40);
          if ((_DWORD)v12)
          {
            v13 = 0;
            v14 = *(_QWORD **)(v9 + 32);
            v15 = &v14[2 * v12];
            v16 = v14;
            do
            {
              while ((*v16 & 6) == 0)
              {
                v17 = *(_QWORD *)(*v16 & 0xFFFFFFFFFFFFFFF8);
                if (!v17
                  || *(_WORD *)(v17 + 24) != 50
                  || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 40) + 76) & 0x80000000) == 0)
                {
                  goto LABEL_15;
                }
                v16 += 2;
                v13 = 1;
                if (v16 == v15)
                  goto LABEL_28;
              }
              v16 += 2;
            }
            while (v16 != v15);
            if ((v13 & 1) == 0)
              goto LABEL_15;
LABEL_28:
            if (sub_1C5D0A850(*(_QWORD **)(v9 + 112), *(_DWORD *)(v9 + 120)))
            {
              *(_WORD *)(v9 + 228) |= 1u;
              v18 = 16 * v12;
              do
              {
                if ((*v14 & 6) == 0)
                  *(_WORD *)((*v14 & 0xFFFFFFFFFFFFFFF8) + 228) |= 1u;
                v14 += 2;
                v18 -= 16;
              }
              while (v18);
            }
          }
        }
LABEL_15:
        v9 += 272;
      }
      while (v9 != v10);
    }
  }
}

void sub_1C5D09FD4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  v3 = a1[12];
  v4 = a1 + 12;
  v5 = a1[13] - v3;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1[6] + 8) - *(_QWORD *)a1[6]) >> 4) > ((unint64_t)v5 >> 2))
  {
    v6 = ((unint64_t)v5 >> 1) & 0xFFFFFFFE;
    v8 = 0;
    v7 = v5 >> 2;
    if (v6 <= v5 >> 2)
    {
      if (v6 < v7)
        a1[13] = v3 + 4 * v6;
    }
    else
    {
      sub_1C50F0728((uint64_t)(a1 + 12), v6 - v7, &v8);
    }
  }
  sub_1C5D0AAB8(a2, v4);
}

void sub_1C5D0A074(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * *(unsigned int *)(a2 + 192)) = 0;
  sub_1C5D0AAB8(a2, (uint64_t *)(a1 + 96));
}

void sub_1C5D0A090(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  a1[6] = 0;
  a1[13] = a1[12];
  v2 = (void *)a1[15];
  v3 = a1[16] - (_QWORD)v2;
  if (v3 >= 1)
  {
    v4 = (unint64_t)v3 >> 2;
    if (v4 <= 1)
      v4 = 1;
    bzero(v2, 4 * v4);
  }
}

BOOL sub_1C5D0A0CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24);
}

uint64_t sub_1C5D0A0DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 44);
}

uint64_t sub_1C5D0A0E4()
{
  return 0;
}

void sub_1C5D0A0EC(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a2 + 196) = v4;
  v6 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)(a1 + 16);
    v9 = v6 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1C4764EE4();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *--v6;
        *((_QWORD *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v6 != v8);
      v6 = *(_QWORD **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 24) = v7;
}

uint64_t sub_1C5D0A1E4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[2];
  v4 = a1[3];
  v2 = a1 + 2;
  if (v3 == v4)
    return 0;
  result = sub_1C5D0AC68(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

uint64_t sub_1C5D0A218(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 16);
  v3 = *(uint64_t **)(result + 24);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(uint64_t **)(result + 24);
        break;
      }
    }
  }
  v4 = v3 - 1;
  if (v2 != v3 - 1)
  {
    v5 = *v2;
    *v2 = *v4;
    *v4 = v5;
    v3 = *(uint64_t **)(result + 24);
  }
  *(_QWORD *)(result + 24) = v3 - 1;
  *(_DWORD *)(a2 + 196) = 0;
  return result;
}

void sub_1C5D0A270(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  _WORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = (_BYTE *)a1[2];
  v2 = (_BYTE *)a1[3];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v7 = (char *)operator new(v2 - v3);
    v8 = &v7[8 * (v4 >> 3)];
    v15 = v7;
    v17 = v8;
    memmove(v7, v3, v4);
    v16 = v8;
    v14 = a1[21];
    do
    {
      v9 = sub_1C5D0AC68((uint64_t *)&v15, &v14);
      v10 = llvm::dbgs((llvm *)v9);
      v11 = v10;
      v12 = (_DWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *v12 = 1734960456;
        *((_QWORD *)v10 + 4) += 7;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(_BYTE *)(v9 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      sub_1C5E21910(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      v13 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8250;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v9);
    }
    while (v15 != v16);
    if (v15)
      operator delete(v15);
  }
}

uint64_t sub_1C5D0A40C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int16 v15;
  int v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19;

  if (*(_BYTE *)(result + 44) && *(_QWORD *)a2)
  {
    v3 = result;
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4)
    {
      v10 = *(uint64_t **)(a2 + 32);
      v11 = &v10[2 * v4];
      do
      {
        v12 = *v10;
        if ((*v10 & 6) == 0)
        {
          v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          v14 = *(unsigned __int16 *)((v12 & 0xFFFFFFFFFFFFFFF8) + 224);
          if (v14)
          {
            v15 = v14 - 1;
            *(_WORD *)(v13 + 224) = v14 - 1;
            sub_1C635B460((uint64_t)v18, (uint64_t *)v13, *(_QWORD *)(v3 + 88));
            if (v19)
            {
              v16 = v15 + 1;
              while (--v16)
              {
                sub_1C635B398((uint64_t)v18);
                if (!v19)
                  goto LABEL_15;
              }
              v17 = 0;
              sub_1C5D0B370((uint64_t)v18, *(_QWORD *)(v3 + 80), *(uint64_t **)(v3 + 64), *(_QWORD *)(v3 + 72), (_DWORD *)&v17 + 1, &v17, *(_QWORD *)(v3 + 56));
              *(_DWORD *)(*(_QWORD *)(v3 + 120) + 4 * HIDWORD(v17)) += v17;
            }
          }
        }
LABEL_15:
        v10 += 2;
      }
      while (v10 != v11);
    }
    v5 = *(unsigned __int16 *)(a2 + 224);
    result = sub_1C635B460((uint64_t)v18, (uint64_t *)a2, *(_QWORD *)(v3 + 88));
    while (v19)
    {
      if (v5 <= 0)
      {
        v17 = 0;
        sub_1C5D0B370((uint64_t)v18, *(_QWORD *)(v3 + 80), *(uint64_t **)(v3 + 64), *(_QWORD *)(v3 + 72), (_DWORD *)&v17 + 1, &v17, *(_QWORD *)(v3 + 56));
        v6 = *(_QWORD *)(v3 + 120);
        v7 = *(_DWORD *)(v6 + 4 * HIDWORD(v17));
        v8 = v7 >= v17;
        v9 = v7 - v17;
        if (!v8)
          v9 = 0;
        *(_DWORD *)(v6 + 4 * HIDWORD(v17)) = v9;
      }
      result = sub_1C635B398((uint64_t)v18);
      --v5;
    }
  }
  return result;
}

uint64_t sub_1C5D0A568(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (!*(_BYTE *)(result + 44))
    return result;
  v3 = *a2;
  if (!*a2)
    return result;
  v4 = result;
  v5 = *(unsigned __int16 *)(v3 + 24);
  if (*(__int16 *)(v3 + 24) < 0)
  {
    v22 = v5 ^ 0xFFFF;
    if ((v22 - 8) < 4 || v22 == 18)
      return result;
  }
  else if (v5 != 49)
  {
    return result;
  }
  v31 = *a2;
  v6 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)a2[4];
    v8 = &v7[2 * v6];
    while (1)
    {
      if ((*v7 & 6) != 0)
        goto LABEL_16;
      v9 = (_DWORD *)(*v7 & 0xFFFFFFFFFFFFFFF8);
      if (v9[30] != v9[53])
        goto LABEL_16;
      v10 = *(_QWORD *)v9;
      v11 = *(__int16 *)(*(_QWORD *)v9 + 24);
      if ((v11 & 0x80000000) == 0)
        break;
      v12 = (unsigned __int16)v11 ^ 0xFFFF;
      if (v12 - 8 < 2)
        goto LABEL_15;
      if (v12 != 10)
      {
        if (v12 != 11)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8) + 48 * v12;
          v16 = *(unsigned __int8 *)(v15 + 4);
          if (*(_BYTE *)(v15 + 4))
          {
            v17 = 0;
            do
            {
              v18 = *(_QWORD *)(v10 + 48);
              if (v18)
              {
                while (*(_DWORD *)(v18 + 8) != (_DWORD)v17)
                {
                  v18 = *(_QWORD *)(v18 + 32);
                  if (!v18)
                    goto LABEL_27;
                }
                v19 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 40) + 16 * v17);
                v20 = *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80)
                                                                                                  + 440))(*(_QWORD *)(v4 + 80), v19)+ 24);
                v21 = *(_DWORD *)(*(_QWORD *)(v4 + 120) + 4 * v20);
                result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80) + 448))(*(_QWORD *)(v4 + 80), v19);
                if (v21 >= result)
                {
                  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80) + 448))(*(_QWORD *)(v4 + 80), v19);
                  *(_DWORD *)(*(_QWORD *)(v4 + 120) + 4 * v20) -= result;
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)(v4 + 120) + 4 * v20) = 0;
                }
              }
LABEL_27:
              ++v17;
            }
            while (v17 != v16);
          }
          goto LABEL_16;
        }
LABEL_15:
        v13 = **(unsigned __int8 **)(v10 + 40);
        v14 = *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80)
                                                                                          + 440))(*(_QWORD *)(v4 + 80), v13)+ 24);
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80) + 448))(*(_QWORD *)(v4 + 80), v13);
        *(_DWORD *)(*(_QWORD *)(v4 + 120) + 4 * v14) += result;
      }
LABEL_16:
      v7 += 2;
      if (v7 == v8)
        goto LABEL_34;
    }
    if ((unsigned __int16)v11 != 50)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_34:
  if (*((_DWORD *)a2 + 51))
  {
    v24 = *(__int16 *)(v31 + 24);
    if (v24 < 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 8) + 48 * (unsigned __int16)~(_WORD)v24 + 4);
      v26 = *(unsigned __int16 *)(v31 + 58);
      while (v25 != v26)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v31 + 40) + 16 * v25);
        if (v27 != 1)
        {
          v28 = v27;
          if (v27 != 172)
          {
            v29 = *(_QWORD *)(v31 + 48);
            if (v29)
            {
              while (*(_DWORD *)(v29 + 8) != v25)
              {
                v29 = *(_QWORD *)(v29 + 32);
                if (!v29)
                  goto LABEL_46;
              }
              v30 = *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80)
                                                                                                + 440))(*(_QWORD *)(v4 + 80), v28)+ 24);
              result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 80) + 448))(*(_QWORD *)(v4 + 80), v28);
              *(_DWORD *)(*(_QWORD *)(v4 + 120) + 4 * v30) += result;
            }
          }
        }
LABEL_46:
        ++v25;
      }
    }
  }
  return result;
}

uint64_t sub_1C5D0A850(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t i;

  LOBYTE(v2) = 0;
  if (a2)
  {
    for (i = 16 * a2; i; i -= 16)
    {
      if ((*a1 & 6) == 0)
      {
        v2 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
        if (!v2)
          return v2 & 1;
        if (*(_WORD *)(v2 + 24) != 49
          || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 40) + 76) & 0x80000000) == 0)
        {
          LOBYTE(v2) = 0;
          return v2 & 1;
        }
        LOBYTE(v2) = 1;
      }
      a1 += 2;
    }
  }
  return v2 & 1;
}

uint64_t sub_1C5D0A8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;

  if (!a2)
    return 0;
  v4 = a2;
  v6 = a3 + 48 * (__int16)~*(_WORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(v6 + 4);
  v26 = *(_QWORD *)(v6 + 32);
  v28 = (_QWORD *)(a4 + 8);
  while (1)
  {
    v8 = *(__int16 *)(v4 + 24);
    if (v8 < 0)
      break;
    LODWORD(v9) = *(unsigned __int16 *)(v4 + 56);
LABEL_33:
    if ((_DWORD)v9)
    {
      v23 = (unsigned int *)(*(_QWORD *)(v4 + 32) + 40 * (v9 - 1));
      v4 = *(_QWORD *)v23;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v23 + 40) + 16 * v23[2]) == 172)
        continue;
    }
    return 0;
  }
  v9 = *(unsigned __int16 *)(v4 + 56);
  if (*(_WORD *)(v4 + 56))
  {
    v10 = *(_QWORD *)(v4 + 32);
    v11 = 40 * v9;
    while (!*(_QWORD *)v10 || *(_WORD *)(*(_QWORD *)v10 + 24) != 10)
    {
      v10 += 40;
      v11 -= 40;
      if (!v11)
        goto LABEL_12;
    }
    v13 = *(_QWORD *)(*(_QWORD *)v10 + 80);
  }
  else
  {
LABEL_12:
    v13 = 0;
  }
  v14 = *(_QWORD *)(a3 + 48 * (unsigned __int16)~(_WORD)v8 + 32);
  if (!(v14 | v13))
    goto LABEL_33;
  v15 = *(unsigned __int16 *)(a1 + 58);
  if (v7 == v15)
    goto LABEL_33;
  v25 = a3;
  v16 = *(_QWORD *)(a1 + 40);
  v27 = v7;
  v17 = v7;
  while (1)
  {
    v18 = *(unsigned __int8 *)(v16 + 16 * v17);
    if (v18 != 1 && v18 != 172)
    {
      v19 = *(_QWORD *)(a1 + 48);
      if (v19)
      {
        while (*(_DWORD *)(v19 + 8) != v17)
        {
          v19 = *(_QWORD *)(v19 + 32);
          if (!v19)
            goto LABEL_31;
        }
        v20 = *(unsigned __int16 *)(v26 + 2 * (v17 - v27));
        if (v13 && ((*(_DWORD *)(v13 + ((v20 >> 3) & 0x1FFC)) >> v20) & 1) == 0)
          return 1;
        if (v14)
        {
          v21 = *(unsigned __int16 *)v14;
          if (*(_WORD *)v14)
            break;
        }
      }
    }
LABEL_31:
    if (++v17 == v15)
    {
      a3 = v25;
      v7 = v27;
      goto LABEL_33;
    }
  }
  while ((_DWORD)v20 != v21
       && ((v20 - 1) > 0x3FFFFFFE || !llvm::MCRegisterInfo::regsOverlap(v28, v20, v21)))
  {
    v22 = *(unsigned __int16 *)(v14 + 2);
    v14 += 2;
    v21 = v22;
    if (!v22)
      goto LABEL_31;
  }
  return 1;
}

void sub_1C5D0AAB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unint64_t *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[33];

  v24[32] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(*a2 + 4 * *(unsigned int *)(a1 + 192)))
  {
    v22 = v24;
    v24[0] = a1;
    v24[1] = 0;
    v23 = 0x1000000001;
    LODWORD(v3) = 1;
    do
    {
      v4 = (char *)v22;
      v5 = (char *)v22 + 16 * v3;
      v6 = *((_QWORD *)v5 - 2);
      v7 = *((unsigned int *)v5 - 2);
      v8 = *(unsigned int *)(v6 + 40);
      v9 = *(_QWORD **)(v6 + 32);
      v10 = *a2;
      if (v8 <= v7)
      {
LABEL_8:
        if ((_DWORD)v8)
        {
          v15 = 0;
          v16 = 0;
          v17 = 16 * v8;
          do
          {
            if ((*v9 & 6) == 0)
            {
              v18 = *(_DWORD *)(v10 + 4 * *(unsigned int *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 192));
              if (v18 <= v16)
              {
                if (v18 == v16)
                  ++v15;
              }
              else
              {
                v15 = 0;
                v16 = *(_DWORD *)(v10 + 4 * *(unsigned int *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 192));
              }
            }
            v9 += 2;
            v17 -= 16;
          }
          while (v17);
          v19 = v15 + v16;
        }
        else
        {
          v19 = 0;
        }
        if (v19 <= 1)
          v19 = 1;
        *(_DWORD *)(v10 + 4 * *(unsigned int *)(v6 + 192)) = v19;
        v20 = -1;
      }
      else
      {
        v3 = v3;
        v11 = &v9[2 * v7];
        while (1)
        {
          v13 = *v11;
          v11 += 2;
          v12 = v13;
          if ((v13 & 6) == 0)
          {
            v14 = v12 & 0xFFFFFFFFFFFFFFF8;
            if (!*(_DWORD *)(v10 + 4 * *(unsigned int *)((v12 & 0xFFFFFFFFFFFFFFF8) + 192)))
              break;
          }
          LODWORD(v7) = v7 + 1;
          if ((_DWORD)v8 == (_DWORD)v7)
            goto LABEL_8;
        }
        *((_DWORD *)v5 - 2) = v7 + 1;
        if (v3 >= HIDWORD(v23))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v3 + 1, 16);
          v4 = (char *)v22;
          v3 = v23;
        }
        v21 = (unint64_t *)&v4[16 * v3];
        *v21 = v14;
        v21[1] = 0;
        v20 = 1;
      }
      LODWORD(v3) = v23 + v20;
      LODWORD(v23) = v23 + v20;
    }
    while ((_DWORD)v23);
    if (v22 != v24)
      free(v22);
  }
}

uint64_t sub_1C5D0AC68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8)
    LODWORD(v6) = 1000;
  else
    v6 = (v3 - *a1) >> 3;
  if ((_DWORD)v6 == 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v9 = 1;
    do
    {
      v10 = *(_QWORD *)(*a1 + 8 * v7);
      v11 = *(_QWORD *)(*a1 + 8 * v9);
      v12 = (*(unsigned __int16 *)(v10 + 228) >> 12) & 1;
      v13 = (*(unsigned __int16 *)(v11 + 228) >> 12) & 1;
      v14 = v12 == v13;
      v15 = v12 < v13;
      if (v14)
        v15 = sub_1C5D0AD48(v10, v11, *a2);
      if (v15)
        v7 = v9;
      ++v9;
    }
    while ((_DWORD)v6 != (_DWORD)v9);
    v4 = *a1;
    v3 = a1[1];
    v5 = (v3 - *a1) >> 3;
  }
  result = *(_QWORD *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v3 - 8) = result;
    v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

BOOL sub_1C5D0AD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  _BOOL8 result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;

  if (byte_1ED824858
    || (v6 = (*(unsigned __int16 *)(a1 + 228) >> 6) & 1,
        v7 = (*(unsigned __int16 *)(a2 + 228) >> 6) & 1,
        result = v6 < v7,
        v6 == v7))
  {
    v9 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v10 = *(unsigned __int16 *)(v9 + 24);
      v26 = v10 > 0x31;
      v11 = (1 << v10) & 0x2000000000B04;
      if (!v26 && v11 != 0)
        goto LABEL_8;
    }
    v14 = *(_DWORD *)(a1 + 200);
    if (*(_DWORD *)(a1 + 204))
    {
      if (!v14)
      {
LABEL_8:
        v13 = 0;
LABEL_15:
        v15 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v16 = *(unsigned __int16 *)(v15 + 24);
          v26 = v16 > 0x31;
          v17 = (1 << v16) & 0x2000000000B04;
          if (!v26 && v17 != 0)
            goto LABEL_20;
        }
        v20 = *(_DWORD *)(a2 + 200);
        if (*(_DWORD *)(a2 + 204))
        {
          if (!v20)
          {
LABEL_20:
            v19 = 0;
            goto LABEL_27;
          }
        }
        else if (v20)
        {
          v19 = 0xFFFF;
          goto LABEL_27;
        }
        v19 = *(_DWORD *)(*(_QWORD *)(a3 + 96) + 4 * *(unsigned int *)(a2 + 192));
LABEL_27:
        v21 = *(unsigned __int16 *)(a1 + 228);
        v22 = *(unsigned __int16 *)(a2 + 228);
        if ((v21 & 2) != 0 && (v22 & 4) != 0)
        {
          v23 = *(unsigned __int16 *)(v15 + 58);
          v29 = v19 >= v23;
          v24 = v19 - v23;
          if (v29)
            v19 = v24;
          else
            v19 = 0;
        }
        if ((v21 & 4) != 0 && (v22 & 2) != 0)
        {
          v25 = *(unsigned __int16 *)(v9 + 58);
          v29 = v13 >= v25;
          v13 -= v25;
          if (!v29)
            v13 = 0;
        }
        v26 = v13 > v19;
        if (v13 == v19)
        {
          if (((v22 | v21) & 2) != 0)
          {
            if (v9)
              LODWORD(v9) = *(_DWORD *)(v9 + 60);
            if (v15)
              LODWORD(v15) = *(_DWORD *)(v15 + 60);
            if ((_DWORD)v9 != (_DWORD)v15 && v15 | v9)
            {
              v29 = (int)v9 - 1 >= (v15 - 1);
              return !v29;
            }
          }
          v27 = sub_1C5D0B074(a1);
          v28 = sub_1C5D0B074(a2);
          v29 = v27 >= v28;
          if (v27 != v28)
            return !v29;
          v30 = *(unsigned int *)(a1 + 40);
          if ((_DWORD)v30)
          {
            v31 = 0;
            v32 = *(char **)(a1 + 32);
            v33 = 16 * v30;
            do
            {
              v34 = *v32;
              v32 += 16;
              if ((v34 & 6) == 0)
                ++v31;
              v33 -= 16;
            }
            while (v33);
          }
          else
          {
            v31 = 0;
          }
          v35 = *(unsigned int *)(a2 + 40);
          if ((_DWORD)v35)
          {
            v36 = 0;
            v37 = *(char **)(a2 + 32);
            v38 = 16 * v35;
            do
            {
              v39 = *v37;
              v37 += 16;
              if ((v39 & 6) == 0)
                ++v36;
              v38 -= 16;
            }
            while (v38);
          }
          else
          {
            v36 = 0;
          }
          v26 = v31 > v36;
          if (v31 == v36)
          {
            v40 = *(unsigned __int16 *)(a1 + 228);
            if ((v40 & 2) == 0 || !v19)
            {
              v41 = *(unsigned __int16 *)(a2 + 228);
              if (!v19 || (v41 & 2) == 0)
              {
                if (((v41 | v40) & 2) != 0 || byte_1ED824558)
                {
                  if ((*(_BYTE *)(a1 + 236) & 2) == 0)
                    llvm::SUnit::ComputeHeight((llvm::SUnit *)a1);
                  v43 = *(_DWORD *)(a1 + 244);
                  if ((*(_BYTE *)(a2 + 236) & 2) == 0)
                    llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
                  if (v43 != *(_DWORD *)(a2 + 244))
                  {
                    if ((*(_BYTE *)(a1 + 236) & 2) == 0)
                      llvm::SUnit::ComputeHeight((llvm::SUnit *)a1);
                    v46 = *(_DWORD *)(a1 + 244);
                    if ((*(_BYTE *)(a2 + 236) & 2) == 0)
                      llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
                    return v46 > *(_DWORD *)(a2 + 244);
                  }
                  if ((*(_BYTE *)(a1 + 236) & 1) == 0)
                    llvm::SUnit::ComputeDepth((llvm::SUnit *)a1);
                  v44 = *(_DWORD *)(a1 + 240);
                  if ((*(_BYTE *)(a2 + 236) & 1) == 0)
                    llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
                  if (v44 != *(_DWORD *)(a2 + 240))
                  {
                    if ((*(_BYTE *)(a1 + 236) & 1) == 0)
                      llvm::SUnit::ComputeDepth((llvm::SUnit *)a1);
                    v45 = *(_DWORD *)(a1 + 240);
                    if ((*(_BYTE *)(a2 + 236) & 1) == 0)
                      llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
                    v29 = v45 >= *(_DWORD *)(a2 + 240);
                    return !v29;
                  }
                }
                else
                {
                  v42 = sub_1C5D0B114(a1, a2, 0, a3);
                  result = v42 > 0;
                  if (v42)
                    return result;
                }
              }
            }
            return *(_DWORD *)(a1 + 196) > *(_DWORD *)(a2 + 196);
          }
        }
        return v26;
      }
    }
    else if (v14)
    {
      v13 = 0xFFFF;
      goto LABEL_15;
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a3 + 96) + 4 * *(unsigned int *)(a1 + 192));
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1C5D0B074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::SUnit *v6;
  unint64_t v7;
  unsigned int v8;

  v1 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = *(uint64_t **)(a1 + 112);
  v4 = 16 * v1;
  do
  {
    v5 = *v3;
    if ((*v3 & 6) == 0)
    {
      v6 = (llvm::SUnit *)(v5 & 0xFFFFFFFFFFFFFFF8);
      v7 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFF8) + 236) & 2) == 0)
      {
        llvm::SUnit::ComputeHeight(v6);
        v7 = *v3 & 0xFFFFFFFFFFFFFFF8;
      }
      v8 = *((_DWORD *)v6 + 61);
      if (*(_QWORD *)v7 && *(_WORD *)(*(_QWORD *)v7 + 24) == 49)
        v8 = sub_1C5D0B074() + 1;
      if (v8 <= v2)
        v2 = v2;
      else
        v2 = v8;
    }
    v3 += 2;
    v4 -= 16;
  }
  while (v4);
  return v2;
}

uint64_t sub_1C5D0B114(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  v8 = sub_1C5D0B314(a1);
  v9 = sub_1C5D0B314(a2);
  if ((*(_BYTE *)(a1 + 236) & 2) == 0)
    llvm::SUnit::ComputeHeight((llvm::SUnit *)a1);
  v10 = *(_DWORD *)(a1 + 244);
  if ((*(_BYTE *)(a2 + 236) & 2) == 0)
    llvm::SUnit::ComputeHeight((llvm::SUnit *)a2);
  v11 = v10 + v8;
  v12 = *(_DWORD *)(a2 + 244) + v9;
  if (a3 && *(_DWORD *)(a1 + 232) != 4)
  {
    v13 = 0;
  }
  else if (*(_DWORD *)(a4 + 8) >= v11)
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 88) + 704) + 24))(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 704), a1, 0) != 0;
    if (!a3)
      goto LABEL_14;
  }
  else
  {
    v13 = 1;
    if (!a3)
      goto LABEL_14;
  }
  if (*(_DWORD *)(a2 + 232) != 4)
  {
    v14 = 0;
    if (v13)
      goto LABEL_19;
LABEL_16:
    if (v14)
      return 0xFFFFFFFFLL;
    goto LABEL_21;
  }
LABEL_14:
  if (*(_DWORD *)(a4 + 8) >= v12)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 88) + 704) + 24))(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 704), a2, 0) != 0;
    if (v13)
      goto LABEL_19;
    goto LABEL_16;
  }
  v14 = 1;
  if (!v13)
    goto LABEL_16;
LABEL_19:
  if (!v14)
    return 1;
  v16 = v11 <= v12;
  if (v11 != v12)
    goto LABEL_39;
LABEL_21:
  if (a3 && *(_DWORD *)(a1 + 232) != 4 && *(_DWORD *)(a2 + 232) != 4)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 704) + 8))
    v17 = 1;
  else
    v17 = v11 == v12;
  if (!v17)
  {
    v16 = v11 <= v12;
LABEL_39:
    if (v16)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if ((*(_BYTE *)(a1 + 236) & 1) == 0)
    llvm::SUnit::ComputeDepth((llvm::SUnit *)a1);
  v18 = *(_DWORD *)(a1 + 240) - v8;
  if ((*(_BYTE *)(a2 + 236) & 1) == 0)
    llvm::SUnit::ComputeDepth((llvm::SUnit *)a2);
  v19 = *(_DWORD *)(a2 + 240) - v9;
  if (v18 == v19)
  {
    v20 = *(unsigned __int16 *)(a1 + 226);
    v21 = *(unsigned __int16 *)(a2 + 226);
    if (v20 == v21)
      return 0;
    if (v20 > v21)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else if (v18 < v19)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1C5D0B314(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _WORD *v4;

  if ((*(_WORD *)(a1 + 228) & 1) != 0)
    return 0;
  v1 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(_QWORD **)(a1 + 32);
  v3 = 16 * v1;
  while (1)
  {
    if ((*v2 & 6) == 0)
    {
      v4 = (_WORD *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      if ((v4[114] & 1) != 0 && *(_WORD *)(*(_QWORD *)v4 + 24) == 50)
        break;
    }
    v2 += 2;
    v3 -= 16;
    if (!v3)
      return 0;
  }
  return 1;
}

uint64_t sub_1C5D0B370(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  v9 = *(unsigned __int8 *)(result + 24);
  if (v9 != 174)
  {
    *a5 = *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 440))(a2, v9)
                              + 24);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 448))(a2, v9);
    *a6 = result;
    return result;
  }
  v10 = *(_QWORD *)(result + 8);
  v11 = *(unsigned __int16 *)(v10 + 24);
  if (v11 == 65517)
  {
    v14 = *(_QWORD *)(**(_QWORD **)(v10 + 32) + 80);
    v15 = (unsigned int *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u)
      v15 = *(unsigned int **)v15;
    v12 = *(uint64_t **)(*(_QWORD *)(a4 + 240) + 8 * *v15);
  }
  else
  {
    if (v11 != 50)
    {
      v17 = *a3;
      v18 = (__int128 *)(a3[1] + 48 * (__int16)~(_WORD)v11);
      v19 = (*(_DWORD *)(result + 16) - 1);
      v20 = v18[2];
      v21 = *v18;
      v22[1] = v18[1];
      v22[2] = v20;
      v22[0] = v21;
      result = (*(uint64_t (**)(uint64_t *, _OWORD *, uint64_t, uint64_t, uint64_t))(v17 + 16))(a3, v22, v19, a4, a7);
      v16 = *(_QWORD *)result;
      goto LABEL_11;
    }
    v12 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 40) + 24)
                                + 16 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) + 76) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = *v12;
LABEL_11:
  *a5 = *(unsigned __int16 *)(v16 + 24);
  *a6 = 1;
  return result;
}

_QWORD *sub_1C5D0B4C0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1C5D0B52C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D0B5A8()
{
  return 1;
}

uint64_t sub_1C5D0B5B0()
{
  return 0;
}

uint64_t sub_1C5D0B5B8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[2];
  v4 = a1[3];
  v2 = a1 + 2;
  if (v3 == v4)
    return 0;
  result = sub_1C5D0B788(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

void sub_1C5D0B5EC(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  _WORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = (_BYTE *)a1[2];
  v2 = (_BYTE *)a1[3];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v7 = (char *)operator new(v2 - v3);
    v8 = &v7[8 * (v4 >> 3)];
    v15 = v7;
    v17 = v8;
    memmove(v7, v3, v4);
    v16 = v8;
    v14 = a1[21];
    do
    {
      v9 = sub_1C5D0B788((uint64_t *)&v15, &v14);
      v10 = llvm::dbgs((llvm *)v9);
      v11 = v10;
      v12 = (_DWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *v12 = 1734960456;
        *((_QWORD *)v10 + 4) += 7;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(_BYTE *)(v9 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      sub_1C5E21910(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      v13 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8250;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v9);
    }
    while (v15 != v16);
    if (v15)
      operator delete(v15);
  }
}

uint64_t sub_1C5D0B788(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8)
    LODWORD(v6) = 1000;
  else
    v6 = (v3 - *a1) >> 3;
  if ((_DWORD)v6 == 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v9 = 1;
    do
    {
      v10 = *(_QWORD *)(*a1 + 8 * v7);
      v11 = *(_QWORD *)(*a1 + 8 * v9);
      v12 = (*(unsigned __int16 *)(v10 + 228) >> 12) & 1;
      v13 = (*(unsigned __int16 *)(v11 + 228) >> 12) & 1;
      v14 = v12 == v13;
      v15 = v12 < v13;
      if (v14)
      {
        v16 = *(_QWORD *)v10;
        if (*(_QWORD *)v10)
          LODWORD(v16) = *(_DWORD *)(v16 + 60);
        v17 = *(_QWORD *)v11;
        if (*(_QWORD *)v11)
          LODWORD(v17) = *(_DWORD *)(v17 + 60);
        if ((_DWORD)v16 == (_DWORD)v17 || !(v17 | v16))
          v15 = sub_1C5D0AD48(v10, v11, *a2);
        else
          v15 = (int)v16 - 1 < (v17 - 1);
      }
      if (v15)
        v7 = v9;
      ++v9;
    }
    while ((_DWORD)v6 != (_DWORD)v9);
    v4 = *a1;
    v3 = a1[1];
    v5 = (v3 - *a1) >> 3;
  }
  result = *(_QWORD *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v3 - 8) = result;
    v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

_QWORD *sub_1C5D0B8A4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1C5D0B910(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D0B98C()
{
  return 1;
}

uint64_t sub_1C5D0B994()
{
  return 0;
}

uint64_t sub_1C5D0B99C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[2];
  v4 = a1[3];
  v2 = a1 + 2;
  if (v3 == v4)
    return 0;
  result = sub_1C5D0BB6C(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

void sub_1C5D0B9D0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  _WORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = (_BYTE *)a1[2];
  v2 = (_BYTE *)a1[3];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v7 = (char *)operator new(v2 - v3);
    v8 = &v7[8 * (v4 >> 3)];
    v15 = v7;
    v17 = v8;
    memmove(v7, v3, v4);
    v16 = v8;
    v14 = a1[21];
    do
    {
      v9 = sub_1C5D0BB6C((uint64_t *)&v15, &v14);
      v10 = llvm::dbgs((llvm *)v9);
      v11 = v10;
      v12 = (_DWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *v12 = 1734960456;
        *((_QWORD *)v10 + 4) += 7;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(_BYTE *)(v9 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      sub_1C5E21910(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      v13 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8250;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v9);
    }
    while (v15 != v16);
    if (v15)
      operator delete(v15);
  }
}

uint64_t sub_1C5D0BB6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8)
    LODWORD(v6) = 1000;
  else
    v6 = (v3 - *a1) >> 3;
  if ((_DWORD)v6 == 1)
  {
    v7 = 0;
    goto LABEL_24;
  }
  v7 = 0;
  v9 = 1;
  do
  {
    v10 = *(_QWORD *)(*a1 + 8 * v7);
    v11 = *(_QWORD *)(*a1 + 8 * v9);
    v12 = *(unsigned __int16 *)(v10 + 228);
    v13 = *(unsigned __int16 *)(v11 + 228);
    v14 = (v12 >> 12) & 1;
    v15 = (v13 >> 12) & 1;
    v20 = v14 == v15;
    v16 = v14 < v15;
    if (!v20)
    {
LABEL_17:
      if (!v16)
        goto LABEL_19;
LABEL_18:
      v7 = v9;
      goto LABEL_19;
    }
    v17 = *a2;
    if (((v13 | v12) & 2) == 0)
    {
      v18 = sub_1C5D0BCD0(*a2, *(_QWORD *)(*a1 + 8 * v7));
      v19 = sub_1C5D0BCD0(*a2, v11);
      if (v18)
        v20 = v19 == 0;
      else
        v20 = 0;
      if (v20)
        goto LABEL_18;
      if ((v18 | v19 ^ 1) != 1)
        goto LABEL_19;
      if (((v18 | v19) & 1) == 0)
      {
        v21 = sub_1C5D0B114(v10, v11, 1, *a2);
        v16 = v21 > 0;
        if (v21)
          goto LABEL_17;
      }
      v17 = *a2;
    }
    if (sub_1C5D0AD48(v10, v11, v17))
      goto LABEL_18;
LABEL_19:
    ++v9;
  }
  while ((_DWORD)v6 != (_DWORD)v9);
  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
LABEL_24:
  result = *(_QWORD *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v3 - 8) = result;
    v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

uint64_t sub_1C5D0BCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  if (*(_QWORD *)(a1 + 80))
  {
    v2 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v2)
    {
      v4 = *(uint64_t **)(a2 + 32);
      v5 = &v4[2 * v2];
      do
      {
        v6 = *v4;
        if ((*v4 & 6) == 0 && *(_WORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 224))
        {
          sub_1C635B460((uint64_t)v9, (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(a1 + 88));
          while (v10)
          {
            v8 = 0;
            sub_1C5D0B370((uint64_t)v9, *(_QWORD *)(a1 + 80), *(uint64_t **)(a1 + 64), *(_QWORD *)(a1 + 72), (_DWORD *)&v8 + 1, &v8, *(_QWORD *)(a1 + 56));
            if ((v8 + *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * HIDWORD(v8))) >= *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * HIDWORD(v8)))
              return 1;
            sub_1C635B398((uint64_t)v9);
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
  return 0;
}

_QWORD *sub_1C5D0BDA4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1C5D0BE10(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8198858;
  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D0BE8C()
{
  return 1;
}

uint64_t sub_1C5D0BE94()
{
  return 0;
}

uint64_t sub_1C5D0BE9C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[2];
  v4 = a1[3];
  v2 = a1 + 2;
  if (v3 == v4)
    return 0;
  result = sub_1C5D0C06C(v2, a1 + 21);
  *(_DWORD *)(result + 196) = 0;
  return result;
}

void sub_1C5D0BED0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  llvm *v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  _WORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = (_BYTE *)a1[2];
  v2 = (_BYTE *)a1[3];
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0)
      abort();
    v7 = (char *)operator new(v2 - v3);
    v8 = &v7[8 * (v4 >> 3)];
    v15 = v7;
    v17 = v8;
    memmove(v7, v3, v4);
    v16 = v8;
    v14 = a1[21];
    do
    {
      v9 = sub_1C5D0C06C((uint64_t *)&v15, &v14);
      v10 = llvm::dbgs((llvm *)v9);
      v11 = v10;
      v12 = (_DWORD *)*((_QWORD *)v10 + 4);
      if (*((_QWORD *)v10 + 3) - (_QWORD)v12 > 6uLL)
      {
        *(_DWORD *)((char *)v12 + 3) = 544499815;
        *v12 = 1734960456;
        *((_QWORD *)v10 + 4) += 7;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v10, "Height ", 7uLL);
      }
      if ((*(_BYTE *)(v9 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v9);
      sub_1C5E21910(v11, *(unsigned int *)(v9 + 244), 0, 0, 0);
      v13 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 8250;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ": ", 2uLL);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v9);
    }
    while (v15 != v16);
    if (v15)
      operator delete(v15);
  }
}

uint64_t sub_1C5D0C06C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _BOOL4 v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t result;
  uint64_t v38;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (v5 >= 0x3E8)
    LODWORD(v6) = 1000;
  else
    v6 = (v3 - *a1) >> 3;
  if ((_DWORD)v6 == 1)
  {
    v7 = 0;
    goto LABEL_93;
  }
  v7 = 0;
  v9 = 1;
  do
  {
    v10 = *(_QWORD *)(*a1 + 8 * v7);
    v11 = *(_QWORD *)(*a1 + 8 * v9);
    v12 = *(unsigned __int16 *)(v10 + 228);
    v13 = *(unsigned __int16 *)(v11 + 228);
    v14 = (v12 >> 12) & 1;
    v15 = (v13 >> 12) & 1;
    v16 = v14 < v15;
    if (v14 != v15)
      goto LABEL_73;
    if (((v13 | v12) & 2) != 0)
    {
LABEL_72:
      v16 = sub_1C5D0AD48(v10, v11, *a2);
      goto LABEL_73;
    }
    v38 = 0;
    if (byte_1ED824618)
      v17 = byte_1ED8246D8 == 0;
    else
      v17 = 1;
    if (v17)
    {
      v18 = sub_1C5D0C478(*a2, (uint64_t *)v10, (_DWORD *)&v38 + 1);
      v19 = sub_1C5D0C478(*a2, (uint64_t *)v11, &v38);
      if (!byte_1ED824618 && v18 != v19)
      {
        v16 = v18 > v19;
        goto LABEL_73;
      }
      if (!byte_1ED824618)
      {
        v20 = v18 <= 0 && v19 < 1;
        if (!v20)
        {
          v22 = *(_QWORD *)v10
             && (v21 = *(unsigned __int16 *)(*(_QWORD *)v10 + 24) - 2, v21 < 0x30)
             && ((0x8000000002C1uLL >> v21) & 1) != 0
             || !*(_DWORD *)(v10 + 200) && *(_DWORD *)(v10 + 204);
          if (*(_QWORD *)v11
            && ((v23 = *(unsigned __int16 *)(*(_QWORD *)v11 + 24),
                 v20 = v23 > 0x31,
                 v24 = (1 << v23) & 0x2000000000B04,
                 !v20)
              ? (v25 = v24 == 0)
              : (v25 = 1),
                !v25)
            || !*(_DWORD *)(v11 + 200) && *(_DWORD *)(v11 + 204))
          {
            if (!v22)
            {
              v16 = 1;
              goto LABEL_73;
            }
          }
          else if (v22)
          {
            v16 = 0;
            goto LABEL_73;
          }
        }
      }
      if (!byte_1ED8246D8)
      {
        v26 = HIDWORD(v38) >= v38;
        if (HIDWORD(v38) != (_DWORD)v38)
          goto LABEL_56;
      }
    }
    if (!byte_1ED824918)
    {
      if ((*(_BYTE *)(v10 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
      if (*(_DWORD *)(*a2 + 8) >= *(_DWORD *)(v10 + 244))
      {
        v34 = *(_QWORD *)(*(_QWORD *)(*a2 + 88) + 704);
        v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v34, v10, 0) != 0;
      }
      else
      {
        v33 = 1;
      }
      if ((*(_BYTE *)(v11 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
      if (*(_DWORD *)(*a2 + 8) >= *(_DWORD *)(v11 + 244))
      {
        v35 = *(_QWORD *)(*(_QWORD *)(*a2 + 88) + 704);
        if (v33 != ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 24))(v35, v11, 0) != 0))
          goto LABEL_88;
      }
      else if (!v33)
      {
        goto LABEL_88;
      }
    }
    if (!byte_1ED8249D8)
    {
      if ((*(_BYTE *)(v10 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v10);
      v27 = *(_DWORD *)(v10 + 240);
      if ((*(_BYTE *)(v11 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v11);
      v28 = v27 - *(_DWORD *)(v11 + 240);
      if (v28 < 0)
        v28 = *(_DWORD *)(v11 + 240) - v27;
      if (v28 > dword_1ED824C18)
      {
        if ((*(_BYTE *)(v10 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth((llvm::SUnit *)v10);
        v29 = *(_DWORD *)(v10 + 240);
        if ((*(_BYTE *)(v11 + 236) & 1) == 0)
          llvm::SUnit::ComputeDepth((llvm::SUnit *)v11);
        v26 = v29 >= *(_DWORD *)(v11 + 240);
LABEL_56:
        v16 = !v26;
        goto LABEL_73;
      }
    }
    if (byte_1ED824A98)
      goto LABEL_72;
    if ((*(_BYTE *)(v10 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
    v30 = *(_DWORD *)(v10 + 244);
    if ((*(_BYTE *)(v11 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
    if (v30 == *(_DWORD *)(v11 + 244))
      goto LABEL_72;
    if ((*(_BYTE *)(v10 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
    v31 = *(_DWORD *)(v10 + 244);
    if ((*(_BYTE *)(v11 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
    v32 = v31 - *(_DWORD *)(v11 + 244);
    if (v32 < 0)
      v32 = *(_DWORD *)(v11 + 244) - v31;
    if (v32 <= dword_1ED824C18)
      goto LABEL_72;
LABEL_88:
    if ((*(_BYTE *)(v10 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v10);
    v36 = *(_DWORD *)(v10 + 244);
    if ((*(_BYTE *)(v11 + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight((llvm::SUnit *)v11);
    v16 = v36 > *(_DWORD *)(v11 + 244);
LABEL_73:
    if (v16)
      v7 = v9;
    ++v9;
  }
  while ((_DWORD)v6 != (_DWORD)v9);
  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
LABEL_93:
  result = *(_QWORD *)(v4 + 8 * v7);
  if (v5 != v7 + 1)
  {
    *(_QWORD *)(v4 + 8 * v7) = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v3 - 8) = result;
    v3 = a1[1];
  }
  a1[1] = v3 - 8;
  return result;
}

uint64_t sub_1C5D0C478(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  unsigned __int8 v22;

  *a3 = 0;
  v5 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v5)
  {
    v7 = 0;
    v8 = (uint64_t *)a2[4];
    v9 = &v8[2 * v5];
    do
    {
      v10 = *v8;
      if ((*v8 & 6) == 0)
      {
        v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if (*(_WORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 224))
        {
          sub_1C635B460((uint64_t)v21, v11, *(_QWORD *)(a1 + 88));
          while (v21[1])
          {
            v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 440))(*(_QWORD *)(a1 + 80), v22);
            if (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * *(unsigned __int16 *)(*(_QWORD *)v12 + 24)) < *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(unsigned __int16 *)(*(_QWORD *)v12 + 24)))
              v7 = v7;
            else
              v7 = (v7 + 1);
            sub_1C635B398((uint64_t)v21);
          }
        }
        else if (*(__int16 *)(*v11 + 24) < 0)
        {
          ++*a3;
        }
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  else
  {
    v7 = 0;
  }
  v13 = *a2;
  if (*a2)
  {
    v14 = *(__int16 *)(v13 + 24);
    if (v14 < 0)
    {
      if (*((_DWORD *)a2 + 51))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48 * (unsigned __int16)~(_WORD)v14;
        v17 = *(unsigned __int8 *)(v16 + 4);
        if (*(_BYTE *)(v16 + 4))
        {
          v18 = 0;
          do
          {
            v19 = *(_QWORD *)(v13 + 48);
            if (v19)
            {
              while (*(_DWORD *)(v19 + 8) != (_DWORD)v18)
              {
                v19 = *(_QWORD *)(v19 + 32);
                if (!v19)
                  goto LABEL_27;
              }
              v20 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 440))(*(_QWORD *)(a1 + 80), *(unsigned __int8 *)(*(_QWORD *)(v13 + 40) + 16 * v18));
              v7 = v7
                 - (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * *(unsigned __int16 *)(*(_QWORD *)v20 + 24)) >= *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(unsigned __int16 *)(*(_QWORD *)v20 + 24)));
            }
LABEL_27:
            ++v18;
          }
          while (v18 != v17);
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1C5D0C614()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  sub_1C5D03BD8(qword_1ED824418, "list-burr", "Bottom-up register reduction list scheduling", (uint64_t)sub_1C635A7A0);
  __cxa_atexit((void (*)(void *))sub_1C5D03B70, qword_1ED824418, &dword_1C475E000);
  sub_1C5D03BD8(&qword_1ED824418[6], "source", "Similar to list-burr but schedules in source order when possible", (uint64_t)sub_1C635A87C);
  __cxa_atexit((void (*)(void *))sub_1C5D03B70, &qword_1ED824418[6], &dword_1C475E000);
  sub_1C5D03BD8(&qword_1ED824418[12], "list-hybrid", "Bottom-up register pressure aware list scheduling which tries to balance latency and register pressure", (uint64_t)sub_1C635A960);
  __cxa_atexit((void (*)(void *))sub_1C5D03B70, &qword_1ED824418[12], &dword_1C475E000);
  sub_1C5D03BD8(&qword_1ED824418[18], "list-ilp", "Bottom-up register pressure aware list scheduling which tries to balance ILP and register pressure", (uint64_t)sub_1C635AA2C);
  __cxa_atexit((void (*)(void *))sub_1C5D03B70, &qword_1ED824418[18], &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable cycle-level precision during preRA scheduling";
  v1.n128_u64[1] = 53;
  sub_1C4E5DE0C((llvm::cl::Option *)&qword_1ED824418[24], "disable-sched-cycles", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED824418[24], &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable regpressure priority in sched=list-ilp";
  v1.n128_u64[1] = 46;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824598, "disable-sched-reg-pressure", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824598, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable live use priority in sched=list-ilp";
  v1.n128_u64[1] = 43;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824658, "disable-sched-live-uses", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824658, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable virtual register cycle interference checks";
  v1.n128_u64[1] = 50;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824718, "disable-sched-vrcycle", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824718, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable physreg def-use affinity";
  v1.n128_u64[1] = 32;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8247D8, "disable-sched-physreg-join", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8247D8, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable no-stall priority in sched=list-ilp";
  v1.n128_u64[1] = 43;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824898, "disable-sched-stalls", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824898, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable critical path priority in sched=list-ilp";
  v1.n128_u64[1] = 48;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824958, "disable-sched-critical-path", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824958, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable scheduled-height priority in sched=list-ilp";
  v1.n128_u64[1] = 51;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824A18, "disable-sched-height", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824A18, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v2) = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable scheduler's two-address hack";
  v1.n128_u64[1] = 36;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED824AD8, "disable-2addr-hack", &v4, (_BYTE **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED824AD8, &dword_1C475E000);
  v4 = 1;
  v2 = 6;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Number of instructions to allow ahead of the critical path in sched=list-ilp";
  v1.n128_u64[1] = 76;
  sub_1C6199E68((llvm::cl::Option *)&unk_1ED824B98, "max-sched-reorder", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED824B98, &dword_1C475E000);
  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Average inst/cycle whan no target itinerary exists.";
  v1.n128_u64[1] = 51;
  sub_1C635AAF8(&v4, &v3, (__int128 *)&v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED824C58, &dword_1C475E000);
}

void sub_1C5D0CA78(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int16 *v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int16 *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[128];
  uint64_t *v53;
  uint64_t v54;
  _BYTE v55[32];
  uint64_t *v56;
  uint64_t v57;
  _QWORD v58[6];

  v58[4] = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int *)(*(_QWORD *)(a2 + 32) + 40 * (*(unsigned __int16 *)(a2 + 56) - 1));
  v3 = *(_QWORD *)v2;
  v4 = v2[2];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v2 + 40) + 16 * v4) == 1)
  {
    v48 = v52;
    v49 = v52;
    v50 = 16;
    v51 = 0;
    v56 = v58;
    v57 = 0x400000000;
    v46[0] = 0;
    v46[1] = 0;
    v47 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v8 = (__int16)~*(_WORD *)(a2 + 24);
    v9 = *(unsigned __int16 *)(v7 + 48 * v8 + 2);
    if (*(_WORD *)(v7 + 48 * v8 + 2))
    {
      v10 = (__int16 *)(*(_QWORD *)(v7 + 48 * v8 + 40) + 4);
      while (1)
      {
        v11 = *v10;
        v10 += 3;
        if ((v11 & 1) != 0)
          break;
        if (!--v9)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v12 = *(_QWORD *)(v3 + 48);
      if (v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = a2;
        do
        {
          if (*(_DWORD *)(v12 + 8) == (_DWORD)v4)
          {
            v16 = *(_QWORD *)(v12 + 16);
            if (v16 != a2)
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v48, *(_QWORD *)(v12 + 16));
              if (v17)
              {
                v44 = 0;
                v45 = 0;
                if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 16) + 664))(*(_QWORD *)(a1 + 16), v15, v16, &v45, &v44))
                {
                  if (v45 != v44)
                  {
                    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
                    v19 = (__int16)~*(_WORD *)(v16 + 24);
                    v20 = *(unsigned __int16 *)(v18 + 48 * v19 + 2);
                    if (*(_WORD *)(v18 + 48 * v19 + 2))
                    {
                      v21 = (__int16 *)(*(_QWORD *)(v18 + 48 * v19 + 40) + 4);
                      while (1)
                      {
                        v22 = *v21;
                        v21 += 3;
                        if ((v22 & 1) != 0)
                          break;
                        if (!--v20)
                          goto LABEL_17;
                      }
                    }
                    else
                    {
LABEL_17:
                      v42 = v45;
                      v43 = v15;
                      sub_1C5D0F348((uint64_t)&v53, (uint64_t)v46, &v42, &v43);
                      if (v55[0])
                      {
                        v23 = v45;
                        v24 = v57;
                        if (v57 >= (unint64_t)HIDWORD(v57))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
                          v24 = v57;
                        }
                        v56[v24] = v23;
                        LODWORD(v57) = v57 + 1;
                      }
                      v42 = v44;
                      v43 = v16;
                      sub_1C5D0F348((uint64_t)&v53, (uint64_t)v46, &v42, &v43);
                      v25 = v44;
                      v26 = v57;
                      if (v57 >= (unint64_t)HIDWORD(v57))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
                        v26 = v57;
                      }
                      v14 = 0;
                      v56[v26] = v25;
                      LODWORD(v57) = v57 + 1;
                      if (v44 < v45)
                        v15 = v16;
                      v13 = 1;
                    }
                  }
                }
              }
            }
          }
          v12 = *(_QWORD *)(v12 + 32);
          if (!v12)
            break;
          ++v14;
        }
        while (v14 < 0x64);
        if ((v13 & 1) != 0)
        {
          v27 = v56;
          if (v57 >= 2)
          {
            qsort(v56, v57, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5D0F734);
            v27 = v56;
          }
          v53 = (uint64_t *)v55;
          v54 = 0x400000000;
          v28 = *v27;
          v42 = *v27;
          v29 = sub_1C5D0F750((uint64_t)v46, &v42)[1];
          v30 = v54;
          if (v54 >= HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
            v30 = v54;
          }
          v53[v30] = v29;
          LODWORD(v54) = v54 + 1;
          v31 = v57 - 1;
          if ((_DWORD)v57 != 1)
          {
            v32 = 0;
            while (1)
            {
              v45 = v56[v32 + 1];
              v33 = v45;
              v34 = sub_1C5D0F750((uint64_t)v46, &v45)[1];
              if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 672))(*(_QWORD *)(a1 + 16), v29, v34, v28, v33, v32))break;
              v35 = v54;
              if (v54 >= (unint64_t)HIDWORD(v54))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
                v35 = v54;
              }
              ++v32;
              v53[v35] = v34;
              LODWORD(v54) = v54 + 1;
              if (v31 == (_DWORD)v32)
                goto LABEL_41;
            }
            v31 = v32;
LABEL_41:
            if (v31)
            {
              v36 = *v53;
              if (sub_1C5D0CF88(*v53, 0, 0, 1, *(void **)(a1 + 624)))
              {
                v37 = *(unsigned __int16 *)(v36 + 58) - 1;
              }
              else
              {
                v36 = 0;
                v37 = 0;
              }
              v38 = v54;
              if ((_DWORD)v54 != 1)
              {
                v39 = (v54 - 1);
                v40 = 1;
                do
                {
                  v41 = v53[v40];
                  if (sub_1C5D0CF88(v41, v36, v37, v40 < v39, *(void **)(a1 + 624)))
                  {
                    if (v40 < v39)
                    {
                      v37 = *(unsigned __int16 *)(v41 + 58) - 1;
                      v36 = v41;
                    }
                  }
                  else if (v40 >= v39 && v36)
                  {
                    sub_1C5D0EC38(v36, *(void **)(a1 + 624), *(uint64_t **)(v36 + 40), *(unsigned __int16 *)(v36 + 58) - 1, 0, 0);
                  }
                  ++v40;
                }
                while (v38 != (_DWORD)v40);
              }
            }
          }
          if (v53 != (uint64_t *)v55)
            free(v53);
        }
      }
    }
    MEMORY[0x1CAA32FB4](v46[0], 8);
    if (v56 != v58)
      free(v56);
    if (v49 != v48)
      free(v49);
  }
}

uint64_t sub_1C5D0CF88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  unsigned int *v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  if (a2 == a1)
    return 0;
  if (a2)
  {
    v10 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 40 * (*(unsigned __int16 *)(a1 + 56) - 1));
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v10 + 40) + 16 * v10[2]) == 172)
      return 0;
  }
  v11 = *(unsigned __int16 *)(a1 + 58);
  v12 = *(_BYTE **)(a1 + 40);
  if (v12[16 * (v11 - 1)] == 172)
    return 0;
  v15 = v17;
  v16 = 0x400000000;
  sub_1C612E234((unsigned int *)&v15, v12, &v12[16 * v11]);
  v14 = v16;
  if (a4)
  {
    if (v16 >= HIDWORD(v16))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v16 + 1, 16);
      v14 = v16;
    }
    *((_OWORD *)v15 + v14) = xmmword_1C866D130;
    v14 = v16 + 1;
    LODWORD(v16) = v16 + 1;
  }
  sub_1C5D0EC38(a1, a5, (uint64_t *)v15, v14, a2, a3);
  if (v15 != v17)
    free(v15);
  return 1;
}

void sub_1C5D0D0F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[256];
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  void *v47;
  uint64_t v48;
  uint64_t v49[66];

  v49[64] = *MEMORY[0x1E0C80C00];
  v2 = a1[78];
  v3 = v2 + 208;
  v4 = *(_QWORD *)(v2 + 216);
  if (v4 == v3)
  {
    v5 = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    do
    {
      v6 = v4 - 8;
      if (!v4)
        v6 = 0;
      *(_DWORD *)(v6 + 28) = -1;
      v4 = *(_QWORD *)(v4 + 8);
      v5 = (v5 + 2);
    }
    while (v4 != v3);
  }
  sub_1C527E4E4(a1 + 6, v5);
  v47 = v49;
  v39 = v43;
  v40 = v43;
  v41 = 32;
  v42 = 0;
  v49[0] = *(_QWORD *)(a1[78] + 192);
  v48 = 0x4000000001;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, v49[0]);
  v44 = v46;
  v45 = 0x800000000;
  v7 = v48;
  if ((_DWORD)v48)
  {
    do
    {
      v8 = *((_QWORD *)v47 + v7 - 1);
      LODWORD(v48) = v7 - 1;
      if (*(_WORD *)(v8 + 56))
      {
        v9 = *(uint64_t **)(v8 + 32);
        v10 = 40 * *(unsigned __int16 *)(v8 + 56);
        do
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, *v9);
          if (v11)
          {
            v12 = *v9;
            v13 = v48;
            if (v48 >= (unint64_t)HIDWORD(v48))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v48 + 1, 8);
              v13 = v48;
            }
            *((_QWORD *)v47 + v13) = v12;
            LODWORD(v48) = v48 + 1;
          }
          v9 += 5;
          v10 -= 40;
        }
        while (v10);
      }
      v14 = *(unsigned __int16 *)(v8 + 24);
      v15 = v14 > 0x2D || ((1 << v14) & 0x3FF8000FFE42) == 0;
      if (v15 && v14 != 278 && *(_DWORD *)(v8 + 28) == -1)
      {
        v16 = sub_1C635AC34((uint64_t)a1, v8);
        v17 = v16;
        v18 = *(unsigned __int16 *)(v8 + 56);
        if (*(_WORD *)(v8 + 56))
        {
          v19 = v8;
          do
          {
            v20 = (unsigned int *)(*(_QWORD *)(v19 + 32) + 40 * (v18 - 1));
            v19 = *(_QWORD *)v20;
            if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v20 + 40) + 16 * v20[2]) != 172)
              break;
            *(_DWORD *)(v19 + 28) = *(_DWORD *)(v16 + 192);
            v21 = *(__int16 *)(v19 + 24);
            if (v21 < 0 && (*(_BYTE *)(*(_QWORD *)(a1[2] + 8) + 48 * (unsigned __int16)~(_WORD)v21 + 8) & 0x80) != 0)
              *(_WORD *)(v16 + 228) |= 2u;
            v18 = *(unsigned __int16 *)(v19 + 56);
          }
          while (*(_WORD *)(v19 + 56));
        }
        v22 = *(unsigned __int16 *)(v8 + 58);
        v23 = v8;
        if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + 16 * (v22 - 1)) == 172)
        {
          v23 = v8;
          while (1)
          {
            v24 = v23;
            v25 = *(_QWORD *)(v23 + 48);
            if (!v25)
              break;
            v26 = v22 - 1;
            while (1)
            {
              v23 = *(_QWORD *)(v25 + 16);
              if (*(_WORD *)(v23 + 56))
              {
                v27 = 40 * *(unsigned __int16 *)(v23 + 56);
                v28 = *(_QWORD *)(v23 + 32);
                while (*(_QWORD *)v28 != v24 || *(_DWORD *)(v28 + 8) != v26)
                {
                  v28 += 40;
                  v27 -= 40;
                  if (!v27)
                    goto LABEL_43;
                }
              }
              else
              {
                v28 = *(_QWORD *)(v23 + 32);
              }
              if (v28 != *(_QWORD *)(v23 + 32) + 40 * *(unsigned __int16 *)(v23 + 56))
                break;
LABEL_43:
              v25 = *(_QWORD *)(v25 + 32);
              if (!v25)
                goto LABEL_50;
            }
            *(_DWORD *)(v24 + 28) = *(_DWORD *)(v16 + 192);
            v29 = *(__int16 *)(v23 + 24);
            if (v29 < 0 && (*(_BYTE *)(*(_QWORD *)(a1[2] + 8) + 48 * (unsigned __int16)~(_WORD)v29 + 8) & 0x80) != 0)
              *(_WORD *)(v16 + 228) |= 2u;
            v22 = *(unsigned __int16 *)(v23 + 58);
            if (*(unsigned __int8 *)(*(_QWORD *)(v23 + 40) + 16 * (v22 - 1)) != 172)
              goto LABEL_51;
          }
LABEL_50:
          v23 = v24;
        }
LABEL_51:
        if ((*(_WORD *)(v16 + 228) & 2) != 0)
        {
          v30 = v45;
          if (v45 >= (unint64_t)HIDWORD(v45))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
            v30 = v45;
          }
          *((_QWORD *)v44 + v30) = v17;
          LODWORD(v45) = v45 + 1;
        }
        if (*(_WORD *)(v8 + 24) == 2)
          *(_WORD *)(v17 + 228) |= 0x1000u;
        *(_QWORD *)v17 = v23;
        *(_DWORD *)(v23 + 28) = *(_DWORD *)(v17 + 192);
        sub_1C635AED0((uint64_t)a1, (uint64_t *)v17);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 72))(a1, v17);
      }
      v7 = v48;
    }
    while ((_DWORD)v48);
    v31 = v45;
    while (v31)
    {
      v32 = (uint64_t *)*((_QWORD *)v44 + --v31);
      LODWORD(v45) = v31;
      v33 = *v32;
      if (v33)
      {
        do
        {
          if (*(_WORD *)(v33 + 24) == 49)
          {
            v34 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 80);
            v35 = *(unsigned __int16 *)(v34 + 24);
            v36 = v35 > 0x2D || ((1 << v35) & 0x3FF8000FFE42) == 0;
            if (v36 && v35 != 278)
            {
              v38 = a1[6] + 272 * *(int *)(v34 + 28);
              *(_WORD *)(v38 + 228) |= 4u;
            }
          }
          if (!*(_WORD *)(v33 + 56))
            break;
          v37 = (unsigned int *)(*(_QWORD *)(v33 + 32) + 40 * (*(unsigned __int16 *)(v33 + 56) - 1));
          v33 = *(_QWORD *)v37;
        }
        while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v37 + 40) + 16 * v37[2]) == 172);
        v31 = v45;
      }
    }
  }
  if (v44 != v46)
    free(v44);
  if (v40 != v39)
    free(v40);
  if (v47 != v49)
    free(v47);
}

uint64_t sub_1C5D0D604(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if ((*(__int16 *)(v1 + 24) & 0x80000000) == 0)
    {
      if (*(_WORD *)(v1 + 24) == 50)
      {
        *(_DWORD *)(result + 20) = 1;
        return result;
      }
      goto LABEL_7;
    }
    v2 = *(unsigned __int16 *)(v1 + 24) ^ 0xFFFF;
    if (v2 == 27)
    {
      if (**(_BYTE **)(v1 + 40) == 1)
        goto LABEL_7;
    }
    else if (v2 == 10)
    {
LABEL_7:
      *(_DWORD *)(result + 20) = 0;
      return result;
    }
    v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 16) + 8) + 48 * v2 + 4);
    v4 = *(unsigned __int16 *)(v1 + 58);
    if (v3 < v4)
      v4 = v3;
    *(_DWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 20) = v4;
  }
  return result;
}

llvm::MachineBasicBlock *sub_1C5D0D688(uint64_t a1, unint64_t **a2)
{
  unint64_t **v2;
  llvm::MachineBasicBlock *v4;
  unint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::MDNode *v29;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::MDNode *v37;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::MachineFunction *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  llvm::MachineFunction *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  llvm::MachineInstr *v66;
  llvm::MachineFunction *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 *v91;
  unint64_t v92;
  __n128 *v93;
  const std::nothrow_t *v94;
  unint64_t v95;
  __n128 *v96;
  BOOL v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  llvm::MachineInstr *v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  __n128 *v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  const std::nothrow_t *v120;
  unint64_t v121;
  uint64_t *v122;
  int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  char *v132;
  unsigned int v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int v138;
  llvm::MachineInstr *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  llvm::MachineInstr *v154;
  llvm::MachineInstr *v155;
  uint64_t v156;
  llvm::MachineBasicBlock *v157;
  unint64_t FirstTerminator;
  _QWORD *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t **v177;
  uint64_t **v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  _QWORD *v184;
  unsigned int v185;
  llvm::MachineInstr *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  llvm::MachineBasicBlock *v201;
  _BYTE *v202;
  char *v203;
  unint64_t **v204;
  _BYTE *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v210;
  uint64_t v211;
  unsigned int IncompleteVirtualRegister;
  _DWORD *v213;
  llvm::MachineFunction *v214;
  llvm::MachineFunction *v215;
  llvm::MachineFunction *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t **i;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222[2];
  unsigned int v223;
  uint64_t v224[2];
  int v225;
  _QWORD v226[5];
  llvm::MachineBasicBlock *v227;
  unint64_t *v228;
  char v229;
  unsigned __int8 *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236[2];
  _BYTE v237[32];
  _QWORD **v238;
  _QWORD *v239[2];
  void *v240;
  uint64_t v241;
  _QWORD v242[66];

  v2 = a2;
  v242[64] = *MEMORY[0x1E0C80C00];
  v218 = a1 + 616;
  v4 = *(llvm::MachineBasicBlock **)(a1 + 616);
  v5 = *a2;
  v6 = *(_BYTE *)(*(_QWORD *)(a1 + 624) + 650);
  v7 = *((_QWORD *)v4 + 4);
  v8 = *(_QWORD *)(v7 + 40);
  v226[0] = v7;
  v226[1] = v8;
  v226[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 104))(*(_QWORD *)(v7 + 16));
  v226[3] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 176))(*(_QWORD *)(v7 + 16));
  v226[4] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 120))(*(_QWORD *)(v7 + 16));
  v227 = v4;
  v228 = v5;
  v229 = v6;
  v224[0] = 0;
  v224[1] = 0;
  v225 = 0;
  v222[0] = 0;
  v222[1] = 0;
  v223 = 0;
  v239[1] = 0;
  v240 = v242;
  v9.n128_u64[0] = 0x2000000000;
  v241 = 0x2000000000;
  v236[0] = v237;
  v236[1] = (void *)0x800000000;
  v238 = v239;
  v239[0] = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 616);
  if (*(_DWORD *)(v10 + 104) || *(_DWORD *)(v10 + 376))
  {
    v220 = a1;
    v221 = v226;
  }
  else
  {
    v123 = *(_DWORD *)(v10 + 648);
    v220 = a1;
    v221 = v226;
    if (!v123)
    {
      v11 = 0;
      goto LABEL_6;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v218 + 32) + 328) == *(_QWORD *)v218
    && (v98 = *(unsigned int *)(v10 + 376), (_DWORD)v98))
  {
    v99 = *(uint64_t **)(v10 + 368);
    v100 = &v99[v98];
    do
    {
      v101 = sub_1C632C21C((uint64_t)v226, *v99, v224);
      if (v101)
      {
        v102 = (unint64_t)v101;
        v103 = *v2;
        v104 = *(_QWORD *)(*(_QWORD *)v218 + 40);
        *((_QWORD *)v101 + 3) = v104;
        v105 = *(_QWORD *)(v104 + 32);
        v106 = *((unsigned int *)v101 + 10);
        if ((_DWORD)v106)
        {
          v109 = *((_QWORD *)v101 + 4);
          v110 = *(_QWORD *)(v105 + 40);
          v111 = 32 * v106;
          do
          {
            if (!*(_BYTE *)v109)
            {
              v112 = *(unsigned int *)(v109 + 4);
              if ((int)v112 >= 0)
                v113 = (uint64_t *)(*(_QWORD *)(v110 + 272) + 8 * v112);
              else
                v113 = (uint64_t *)(*(_QWORD *)(v110 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
              v114 = *v113;
              if (*v113)
              {
                v115 = *(_QWORD *)(v114 + 16);
                *(_QWORD *)(v114 + 16) = v109;
                *(_QWORD *)(v109 + 16) = v115;
                if ((*(_BYTE *)(v109 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v109 + 24) = v114;
                }
                else
                {
                  *(_QWORD *)(v109 + 24) = 0;
                  v113 = (uint64_t *)(v115 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v109 + 16) = v109;
                *(_QWORD *)(v109 + 24) = 0;
              }
              *v113 = v109;
            }
            v109 += 32;
            v111 -= 32;
          }
          while (v111);
        }
        v107 = *(_QWORD *)(v105 + 728);
        if (v107)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v107 + 24))(v107, v102);
        v108 = *v103 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v102 = v108 | *(_QWORD *)v102 & 7;
        *(_QWORD *)(v102 + 8) = v103;
        *(_QWORD *)(v108 + 8) = v102;
        *v103 = *v103 & 7 | v102;
        *(_BYTE *)(*v99 + 63) = 0;
      }
      ++v99;
      v11 = 1;
    }
    while (v99 != v100);
  }
  else
  {
    v11 = 1;
  }
LABEL_6:
  v12 = *(uint64_t **)(a1 + 640);
  v13 = *(uint64_t **)(a1 + 648);
  for (i = v2; v12 != v13; ++v12)
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(_QWORD *)v14;
      if (*(_QWORD *)v14)
      {
        v232 = &v234;
        v233 = 0x400000000;
        if (*(_WORD *)(v15 + 56))
        {
          v16 = (unsigned int *)(*(_QWORD *)(v15 + 32) + 40 * (*(unsigned __int16 *)(v15 + 56) - 1));
          v17 = *(_QWORD *)v16;
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v16 + 40) + 16 * v16[2]) == 172)
          {
            v18 = 0;
            do
            {
              if (v18 >= HIDWORD(v233))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)&v234, v18 + 1, 8);
                v18 = v233;
              }
              *((_QWORD *)v232 + v18) = v17;
              v18 = v233 + 1;
              LODWORD(v233) = v233 + 1;
              if (!*(_WORD *)(v17 + 56))
                break;
              v19 = (unsigned int *)(*(_QWORD *)(v17 + 32) + 40 * (*(unsigned __int16 *)(v17 + 56) - 1));
              v17 = *(_QWORD *)v19;
            }
            while (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v19 + 40) + 16 * v19[2]) == 172);
            if (v18)
            {
              while (1)
              {
                v25 = *((_QWORD *)v232 + v18 - 1);
                v26 = sub_1C5D0E7F4(&v220, v25, *(_QWORD *)(v14 + 16) != v14, (*(_WORD *)(v14 + 228) & 0x2000) != 0, (uint64_t)v224);
                if (v11)
                  sub_1C5D0EA6C(v25, *(_QWORD *)(a1 + 624), (uint64_t)v226, v224, (uint64_t)&v240, (uint64_t)v236, v26);
                v27 = *(_QWORD *)(a1 + 624);
                v28 = sub_1C5D0EE68(v27 + 624, v25);
                if (*(_QWORD *)(v27 + 624) + 48 * *(unsigned int *)(v27 + 640) == v28)
                  goto LABEL_37;
                v29 = *(llvm::MDNode **)(v28 + 32);
                if (!v29 || v26 == 0)
                  goto LABEL_37;
                v31 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8);
                if ((*(_WORD *)(v26 + 44) & 0xC) != 0 && (*(_WORD *)(v26 + 44) & 4) == 0)
                  break;
                if ((v31 & 0x80) != 0)
                  goto LABEL_36;
LABEL_37:
                v18 = v233 - 1;
                LODWORD(v233) = v233 - 1;
                if (!(_DWORD)v233)
                  goto LABEL_43;
              }
              v33 = v26;
              if ((v31 & 0x80) == 0)
              {
                while ((*(_WORD *)(v33 + 44) & 8) != 0)
                {
                  v33 = *(_QWORD *)(v33 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v33 + 16) + 8) & 0x80) != 0)
                    goto LABEL_36;
                }
                goto LABEL_37;
              }
LABEL_36:
              llvm::MachineInstr::setHeapAllocMarker(v26, *(llvm::MachineFunction **)(a1 + 32), v29);
              goto LABEL_37;
            }
          }
        }
LABEL_43:
        v34 = sub_1C5D0E7F4(&v220, *(_QWORD *)v14, *(_QWORD *)(v14 + 16) != v14, (*(_WORD *)(v14 + 228) & 0x2000) != 0, (uint64_t)v224);
        if (v11)
          sub_1C5D0EA6C(*(_QWORD *)v14, *(_QWORD *)(a1 + 624), (uint64_t)v226, v224, (uint64_t)&v240, (uint64_t)v236, v34);
        v35 = *(_QWORD *)(a1 + 624);
        v36 = sub_1C5D0EE68(v35 + 624, *(_QWORD *)v14);
        if (*(_QWORD *)(v35 + 624) + 48 * *(unsigned int *)(v35 + 640) != v36)
        {
          v37 = *(llvm::MDNode **)(v36 + 32);
          if (v37 && v34 != 0)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8);
            if ((*(_WORD *)(v34 + 44) & 0xC) != 0 && (*(_WORD *)(v34 + 44) & 4) == 0)
            {
              v41 = v34;
              if ((v39 & 0x80) != 0)
              {
LABEL_55:
                llvm::MachineInstr::setHeapAllocMarker(v34, *(llvm::MachineFunction **)(a1 + 32), v37);
              }
              else
              {
                while ((*(_WORD *)(v41 + 44) & 8) != 0)
                {
                  v41 = *(_QWORD *)(v41 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v41 + 16) + 8) & 0x80) != 0)
                    goto LABEL_55;
                }
              }
            }
            else if ((v39 & 0x80) != 0)
            {
              goto LABEL_55;
            }
          }
        }
        if (v232 != &v234)
          free(v232);
LABEL_58:
        v2 = i;
        continue;
      }
      v20 = *(unsigned int *)(v14 + 40);
      if ((_DWORD)v20)
      {
        v21 = *v2;
        v22 = (_DWORD *)(*(_QWORD *)(v14 + 32) + 8);
        v23 = 16 * v20;
        while (1)
        {
          v24 = *((_QWORD *)v22 - 1);
          if ((v24 & 6) == 0)
            break;
          v22 += 4;
          v23 -= 16;
          if (!v23)
            goto LABEL_59;
        }
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 256))
        {
          v232 = 0;
          v48 = v222[0];
          v49 = v223;
          v50 = sub_1C6144BDC(v222[0], v223, v24 & 0xFFFFFFFFFFFFFFF8, &v232);
          v51 = v232;
          if (!v50)
            v51 = (_DWORD *)(v48 + 16 * v49);
          v213 = v51;
          v52 = *(unsigned int *)(v14 + 120);
          if ((_DWORD)v52)
          {
            v53 = (int *)(*(_QWORD *)(v14 + 112) + 8);
            v54 = 16 * v52;
            while (1)
            {
              if ((*(_BYTE *)(v53 - 2) & 6) == 0)
              {
                v55 = *v53;
                if (*v53)
                  break;
              }
              v53 += 4;
              v54 -= 16;
              if (!v54)
                goto LABEL_77;
            }
          }
          else
          {
LABEL_77:
            v55 = 0;
          }
          v56 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
          v211 = *(_QWORD *)(a1 + 616);
          v57 = *(llvm::MachineFunction **)(v211 + 32);
          v230 = 0;
          v58 = *((_QWORD *)v57 + 28);
          v216 = v57;
          if (v58)
          {
            *((_QWORD *)v57 + 28) = *(_QWORD *)v58;
          }
          else
          {
            v68 = sub_1C484358C((uint64_t)v57 + 128, 72, 3);
            v57 = v216;
            v58 = v68;
          }
          v232 = 0;
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v58, v57, v56 + 912, (unsigned __int8 **)&v232, 0);
          if (v232)
            llvm::MetadataTracking::untrack((uint64_t)&v232, (unsigned __int8 *)v232);
          if (v230)
            llvm::MetadataTracking::untrack((uint64_t)&v230, v230);
          v69 = *(_QWORD *)(v211 + 40);
          *(_QWORD *)(v58 + 24) = v69;
          v70 = *(_QWORD *)(v69 + 32);
          v71 = *(unsigned int *)(v58 + 40);
          if ((_DWORD)v71)
          {
            v82 = *(_QWORD *)(v58 + 32);
            v83 = *(_QWORD *)(v70 + 40);
            v84 = 32 * v71;
            do
            {
              if (!*(_BYTE *)v82)
              {
                v85 = *(unsigned int *)(v82 + 4);
                if ((int)v85 >= 0)
                  v86 = (uint64_t *)(*(_QWORD *)(v83 + 272) + 8 * v85);
                else
                  v86 = (uint64_t *)(*(_QWORD *)(v83 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
                v87 = *v86;
                if (*v86)
                {
                  v88 = *(_QWORD *)(v87 + 16);
                  *(_QWORD *)(v87 + 16) = v82;
                  *(_QWORD *)(v82 + 16) = v88;
                  if ((*(_BYTE *)(v82 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v82 + 24) = v87;
                  }
                  else
                  {
                    *(_QWORD *)(v82 + 24) = 0;
                    v86 = (uint64_t *)(v88 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v82 + 16) = v82;
                  *(_QWORD *)(v82 + 24) = 0;
                }
                *v86 = v82;
              }
              v82 += 32;
              v84 -= 32;
            }
            while (v84);
          }
          v72 = *(_QWORD *)(v70 + 728);
          if (v72)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v72 + 24))(v72, v58);
          v73 = *v21 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v58 = v73 | *(_QWORD *)v58 & 7;
          *(_QWORD *)(v58 + 8) = v21;
          *(_QWORD *)(v73 + 8) = v58;
          *v21 = *v21 & 7 | v58;
          v233 = 0;
          v234 = 0;
          v235 = 0;
          LODWORD(v232) = 0x1000000;
          HIDWORD(v232) = v55;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v216, (const llvm::MachineOperand *)&v232);
          v74 = v213[2];
          v233 = 0;
          LODWORD(v232) = 0;
          HIDWORD(v232) = v74;
          v234 = 0;
          v235 = 0;
          v66 = (llvm::MachineInstr *)v58;
          v67 = v216;
        }
        else
        {
          v42 = *(_QWORD *)(a1 + 40);
          v214 = *(llvm::MachineFunction **)(v14 + 256);
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v42, "", 0);
          v43 = IncompleteVirtualRegister;
          *(_QWORD *)(*(_QWORD *)(v42 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = (unint64_t)v214 & 0xFFFFFFFFFFFFFFFBLL;
          v44 = *(_QWORD *)(v42 + 8);
          if (v44)
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 24))(v44, IncompleteVirtualRegister);
            v43 = IncompleteVirtualRegister;
          }
          v230 = (unsigned __int8 *)v14;
          v231 = v43;
          sub_1C6144658((uint64_t)&v232, (uint64_t)v222, (uint64_t *)&v230, &v231);
          v45 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
          v210 = *(_QWORD *)(a1 + 616);
          v46 = *(llvm::MachineFunction **)(v210 + 32);
          v230 = 0;
          v47 = *((_QWORD *)v46 + 28);
          v215 = v46;
          if (v47)
          {
            *((_QWORD *)v46 + 28) = *(_QWORD *)v47;
          }
          else
          {
            v59 = sub_1C484358C((uint64_t)v46 + 128, 72, 3);
            v46 = v215;
            v47 = v59;
          }
          v232 = 0;
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v47, v46, v45 + 912, (unsigned __int8 **)&v232, 0);
          if (v232)
            llvm::MetadataTracking::untrack((uint64_t)&v232, (unsigned __int8 *)v232);
          if (v230)
            llvm::MetadataTracking::untrack((uint64_t)&v230, v230);
          v60 = *(_QWORD *)(v210 + 40);
          *(_QWORD *)(v47 + 24) = v60;
          v61 = *(_QWORD *)(v60 + 32);
          v62 = *(unsigned int *)(v47 + 40);
          if ((_DWORD)v62)
          {
            v75 = *(_QWORD *)(v47 + 32);
            v76 = *(_QWORD *)(v61 + 40);
            v77 = 32 * v62;
            do
            {
              if (!*(_BYTE *)v75)
              {
                v78 = *(unsigned int *)(v75 + 4);
                if ((int)v78 >= 0)
                  v79 = (uint64_t *)(*(_QWORD *)(v76 + 272) + 8 * v78);
                else
                  v79 = (uint64_t *)(*(_QWORD *)(v76 + 24) + 16 * (v78 & 0x7FFFFFFF) + 8);
                v80 = *v79;
                if (*v79)
                {
                  v81 = *(_QWORD *)(v80 + 16);
                  *(_QWORD *)(v80 + 16) = v75;
                  *(_QWORD *)(v75 + 16) = v81;
                  if ((*(_BYTE *)(v75 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v75 + 24) = v80;
                  }
                  else
                  {
                    *(_QWORD *)(v75 + 24) = 0;
                    v79 = (uint64_t *)(v81 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v75 + 16) = v75;
                  *(_QWORD *)(v75 + 24) = 0;
                }
                *v79 = v75;
              }
              v75 += 32;
              v77 -= 32;
            }
            while (v77);
          }
          v63 = *(_QWORD *)(v61 + 728);
          if (v63)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v63 + 24))(v63, v47);
          v64 = *v21 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v47 = v64 | *(_QWORD *)v47 & 7;
          *(_QWORD *)(v47 + 8) = v21;
          *(_QWORD *)(v64 + 8) = v47;
          *v21 = *v21 & 7 | v47;
          v233 = 0;
          v234 = 0;
          v235 = 0;
          LODWORD(v232) = 0x1000000;
          HIDWORD(v232) = IncompleteVirtualRegister;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v215, (const llvm::MachineOperand *)&v232);
          v65 = *v22;
          v233 = 0;
          LODWORD(v232) = 0;
          HIDWORD(v232) = v65;
          v234 = 0;
          v235 = 0;
          v66 = (llvm::MachineInstr *)v47;
          v67 = v215;
        }
        llvm::MachineInstr::addOperand(v66, v67, (const llvm::MachineOperand *)&v232);
        goto LABEL_58;
      }
    }
    else
    {
      (*(void (**)(_QWORD, llvm::MachineBasicBlock *, unint64_t *))(**(_QWORD **)(a1 + 16) + 736))(*(_QWORD *)(a1 + 16), v227, *v2);
    }
LABEL_59:
    ;
  }
  if ((v11 & 1) != 0)
  {
    v89 = *(_QWORD *)v218 + 48;
    v90 = *(_QWORD *)(*(_QWORD *)v218 + 56);
    if (v90 != v89)
    {
      while (!**(_WORD **)(v90 + 16) || **(_WORD **)(v90 + 16) == 69)
      {
        v90 = *(_QWORD *)(v90 + 8);
        if (v90 == v89)
          goto LABEL_132;
      }
      v89 = v90;
    }
LABEL_132:
    v91 = (__n128 *)v240;
    v92 = v241;
    v93 = (__n128 *)((char *)v240 + 16 * v241);
    if ((_DWORD)v241)
    {
      v94 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v95 = v241;
      while (1)
      {
        v96 = (__n128 *)operator new(16 * v95, v94);
        if (v96)
          break;
        v97 = v95 > 1;
        v95 >>= 1;
        if (!v97)
          goto LABEL_136;
      }
      v116 = v96;
      sub_1C5D0F808(v91, v93, v92, v96, v95, v9);
      operator delete(v116);
    }
    else
    {
LABEL_136:
      sub_1C5D0F808(v91, v93, v92, 0, 0, v9);
    }
    v117 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 616);
    v118 = *(char **)(v117 + 96);
    v119 = *(unsigned int *)(v117 + 104);
    if (v119 < 0x81)
    {
LABEL_164:
      sub_1C5D0FC6C(v118, &v118[8 * v119], v119, 0, 0);
    }
    else
    {
      v120 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v121 = *(unsigned int *)(v117 + 104);
      while (1)
      {
        v122 = (uint64_t *)operator new(8 * v121, v120);
        if (v122)
          break;
        v97 = v121 > 1;
        v121 >>= 1;
        if (!v97)
          goto LABEL_164;
      }
      v124 = v122;
      sub_1C5D0FC6C(v118, &v118[8 * v119], v119, v122, v121);
      operator delete(v124);
    }
    v125 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 616);
    v126 = *(uint64_t **)(v125 + 96);
    v127 = *(unsigned int *)(v125 + 104);
    v128 = &v126[v127];
    v129 = v241;
    if ((_DWORD)v241 && (_DWORD)v127)
    {
      v130 = 0;
      v131 = 0;
      do
      {
        v132 = (char *)v240 + 16 * v130;
        v133 = *(_DWORD *)v132;
        v134 = (_QWORD *)*((_QWORD *)v132 + 1);
        v135 = v134 + 3;
        if (!v131)
          v135 = (_QWORD *)v218;
        v217 = v135;
        if (v131)
          v136 = v134;
        else
          v136 = (_QWORD *)v89;
        while (1)
        {
          v137 = *v126;
          v138 = *(_DWORD *)(*v126 + 56);
          if (v138 < v131 || v138 >= v133)
            break;
          if (!*(_BYTE *)(v137 + 63))
          {
            v140 = sub_1C632C21C((uint64_t)v226, v137, v224);
            if (v140)
            {
              v141 = (unint64_t)v140;
              v142 = *(_QWORD *)(*v217 + 40);
              *((_QWORD *)v140 + 3) = v142;
              v143 = *(_QWORD *)(v142 + 32);
              v144 = *((unsigned int *)v140 + 10);
              if ((_DWORD)v144)
              {
                v147 = *((_QWORD *)v140 + 4);
                v148 = *(_QWORD *)(v143 + 40);
                v149 = 32 * v144;
                do
                {
                  if (!*(_BYTE *)v147)
                  {
                    v150 = *(unsigned int *)(v147 + 4);
                    if ((int)v150 >= 0)
                      v151 = (uint64_t *)(*(_QWORD *)(v148 + 272) + 8 * v150);
                    else
                      v151 = (uint64_t *)(*(_QWORD *)(v148 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
                    v152 = *v151;
                    if (*v151)
                    {
                      v153 = *(_QWORD *)(v152 + 16);
                      *(_QWORD *)(v152 + 16) = v147;
                      *(_QWORD *)(v147 + 16) = v153;
                      if ((*(_BYTE *)(v147 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v147 + 24) = v152;
                      }
                      else
                      {
                        *(_QWORD *)(v147 + 24) = 0;
                        v151 = (uint64_t *)(v153 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v147 + 16) = v147;
                      *(_QWORD *)(v147 + 24) = 0;
                    }
                    *v151 = v147;
                  }
                  v147 += 32;
                  v149 -= 32;
                }
                while (v149);
              }
              v145 = *(_QWORD *)(v143 + 728);
              if (v145)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v145 + 24))(v145, v141);
              v146 = *v136 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v141 = v146 | *(_QWORD *)v141 & 7;
              *(_QWORD *)(v141 + 8) = v136;
              *(_QWORD *)(v146 + 8) = v141;
              *v136 = *v136 & 7 | v141;
            }
          }
          if (++v126 == v128)
          {
            v232 = &v234;
            v233 = 0x800000000;
            goto LABEL_211;
          }
        }
        if (++v130 == v129)
          break;
        v131 = v133;
      }
      while (v126 != v128);
    }
    v232 = &v234;
    v233 = 0x800000000;
    while (v126 != v128)
    {
      if (!*(_BYTE *)(*v126 + 63))
      {
        v154 = sub_1C632C21C((uint64_t)v226, *v126, v224);
        if (v154)
        {
          v155 = v154;
          v156 = v233;
          if (v233 >= (unint64_t)HIDWORD(v233))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)&v234, v233 + 1, 8);
            v156 = v233;
          }
          *((_QWORD *)v232 + v156) = v155;
          LODWORD(v233) = v233 + 1;
        }
      }
      ++v126;
    }
LABEL_211:
    v157 = v227;
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v227);
    if ((_DWORD)v233)
    {
      v159 = (_QWORD *)FirstTerminator;
      v160 = (char *)v232;
      v161 = (char *)v232 + 8 * v233;
      do
      {
        v162 = *(_QWORD *)v160;
        v163 = *((_QWORD *)v157 + 5);
        *(_QWORD *)(v162 + 24) = v163;
        v164 = *(_QWORD *)(v163 + 32);
        v165 = *(unsigned int *)(v162 + 40);
        if ((_DWORD)v165)
        {
          v168 = *(_QWORD *)(v162 + 32);
          v169 = *(_QWORD *)(v164 + 40);
          v170 = 32 * v165;
          do
          {
            if (!*(_BYTE *)v168)
            {
              v171 = *(unsigned int *)(v168 + 4);
              if ((int)v171 >= 0)
                v172 = (uint64_t *)(*(_QWORD *)(v169 + 272) + 8 * v171);
              else
                v172 = (uint64_t *)(*(_QWORD *)(v169 + 24) + 16 * (v171 & 0x7FFFFFFF) + 8);
              v173 = *v172;
              if (*v172)
              {
                v174 = *(_QWORD *)(v173 + 16);
                *(_QWORD *)(v173 + 16) = v168;
                *(_QWORD *)(v168 + 16) = v174;
                if ((*(_BYTE *)(v168 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v168 + 24) = v173;
                }
                else
                {
                  *(_QWORD *)(v168 + 24) = 0;
                  v172 = (uint64_t *)(v174 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v168 + 16) = v168;
                *(_QWORD *)(v168 + 24) = 0;
              }
              *v172 = v168;
            }
            v168 += 32;
            v170 -= 32;
          }
          while (v170);
        }
        v166 = *(_QWORD *)(v164 + 728);
        if (v166)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166 + 24))(v166, v162);
        v167 = *v159 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v162 = v167 | *(_QWORD *)v162 & 7;
        *(_QWORD *)(v162 + 8) = v159;
        *(_QWORD *)(v167 + 8) = v162;
        *v159 = *v159 & 7 | v162;
        v160 += 8;
      }
      while (v160 != v161);
    }
    if ((_DWORD)v241)
    {
      v175 = 0;
      v176 = *(_QWORD *)(*(_QWORD *)(a1 + 624) + 616);
      v177 = *(uint64_t ***)(v176 + 640);
      v178 = &v177[*(unsigned int *)(v176 + 648)];
      v179 = (char *)v240;
      v180 = (char *)v240 + 16 * v241;
      do
      {
        v181 = *((_QWORD *)v179 + 1);
        if (v181)
        {
          if (v177 == v178)
            break;
          v182 = *(_DWORD *)v179;
          if (v175)
            v183 = v181 + 24;
          else
            v183 = v218;
          if (v175)
            v184 = (_QWORD *)*((_QWORD *)v179 + 1);
          else
            v184 = (_QWORD *)v89;
          while (1)
          {
            v185 = *((_DWORD *)*v177 + 4);
            if (v185 < v175 || v185 >= v182)
              break;
            v187 = sub_1C632C460((uint64_t)v226, *v177);
            if (v187)
            {
              v188 = (unint64_t)v187;
              v189 = *(_QWORD *)(*(_QWORD *)v183 + 40);
              *((_QWORD *)v187 + 3) = v189;
              v190 = *(_QWORD *)(v189 + 32);
              v191 = *((unsigned int *)v187 + 10);
              if ((_DWORD)v191)
              {
                v194 = *((_QWORD *)v187 + 4);
                v195 = *(_QWORD *)(v190 + 40);
                v196 = 32 * v191;
                do
                {
                  if (!*(_BYTE *)v194)
                  {
                    v197 = *(unsigned int *)(v194 + 4);
                    if ((int)v197 >= 0)
                      v198 = (uint64_t *)(*(_QWORD *)(v195 + 272) + 8 * v197);
                    else
                      v198 = (uint64_t *)(*(_QWORD *)(v195 + 24) + 16 * (v197 & 0x7FFFFFFF) + 8);
                    v199 = *v198;
                    if (*v198)
                    {
                      v200 = *(_QWORD *)(v199 + 16);
                      *(_QWORD *)(v199 + 16) = v194;
                      *(_QWORD *)(v194 + 16) = v200;
                      if ((*(_BYTE *)(v194 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v194 + 24) = v199;
                      }
                      else
                      {
                        *(_QWORD *)(v194 + 24) = 0;
                        v198 = (uint64_t *)(v200 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v194 + 16) = v194;
                      *(_QWORD *)(v194 + 24) = 0;
                    }
                    *v198 = v194;
                  }
                  v194 += 32;
                  v196 -= 32;
                }
                while (v196);
              }
              v192 = *(_QWORD *)(v190 + 728);
              if (v192)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v192 + 24))(v192, v188);
              v193 = *v184 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v188 = v193 | *(_QWORD *)v188 & 7;
              *(_QWORD *)(v188 + 8) = v184;
              *(_QWORD *)(v193 + 8) = v188;
              *v184 = *v184 & 7 | v188;
            }
            if (++v177 == v178)
              goto LABEL_267;
          }
          v175 = v182;
        }
        v179 += 16;
      }
      while (v179 != v180);
    }
LABEL_267:
    if (v232 != &v234)
      free(v232);
    v2 = i;
  }
  v201 = v227;
  *v2 = v228;
  v202 = (_BYTE *)llvm::MachineBasicBlock::getFirstTerminator(v201);
  v203 = (char *)v201 + 48;
  if ((char *)v201 + 48 != v202)
  {
    v204 = (unint64_t **)v202;
    if (v202)
    {
      v205 = v202;
      if ((*v202 & 4) != 0)
        goto LABEL_277;
    }
    else
    {
      v205 = 0;
    }
    while ((*((_WORD *)v205 + 22) & 8) != 0)
      v205 = (_BYTE *)*((_QWORD *)v205 + 1);
LABEL_277:
    v206 = (char *)*((_QWORD *)v205 + 1);
    if (v206 != v203)
    {
      do
      {
        if (!v206 || (v207 = v206, (*v206 & 4) == 0))
        {
          v207 = v206;
          if ((*((_WORD *)v206 + 22) & 8) != 0)
          {
            v207 = v206;
            do
              v207 = (char *)*((_QWORD *)v207 + 1);
            while ((*((_WORD *)v207 + 22) & 8) != 0);
          }
        }
        if (*v2 == (unint64_t *)v206)
          break;
        v208 = (char *)*((_QWORD *)v207 + 1);
        if (**((unsigned __int16 **)v206 + 2) - 13 <= 1)
        {
          llvm::MachineOperand::ChangeToRegister(*((_QWORD *)v206 + 4), 0, 0, 0, 0, 0, 0, 0);
          sub_1C48532D0(v204[3], (unint64_t *)v204, *((unint64_t **)v206 + 3), (unint64_t *)v206);
        }
        v206 = v208;
      }
      while (v208 != v203);
    }
  }
  sub_1C47655E8((uint64_t)&v238, v239[0]);
  if (v236[0] != v237)
    free(v236[0]);
  if (v240 != v242)
    free(v240);
  MEMORY[0x1CAA32FB4](v222[0], 8);
  MEMORY[0x1CAA32FB4](v224[0], 8);
  return v201;
}

uint64_t sub_1C5D0E7F4(uint64_t *a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD v30[3];
  uint64_t v31;
  void *v32[2];
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*a1;
  v7 = a1[1];
  v9 = *(_QWORD **)(v7 + 48);
  v10 = *(_QWORD *)(*a1 + 616);
  if (*(_QWORD **)(v10 + 56) == v9)
  {
    v11 = v10 + 48;
  }
  else
  {
    v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
    if (!v11 || (*(_BYTE *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 4) != 0)
        v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (*(__int16 *)(a2 + 24) < 0)
    sub_1C5CCB208(a1[1], a2, a3, a4, a5);
  else
    sub_1C5CCD4D8((llvm::MachineFunction **)a1[1], a2, a3, a4, a5);
  v12 = a1[1];
  v13 = v8[77];
  if (*(_QWORD *)(v13 + 56) == *(_QWORD *)(v12 + 48))
  {
    v14 = v13 + 48;
  }
  else
  {
    v14 = **(_QWORD **)(v7 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v14 || (*(_BYTE *)v14 & 4) == 0)
    {
      while ((*(_WORD *)(v14 + 44) & 4) != 0)
        v14 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v11 == v14)
    return 0;
  if (v13 + 48 == v11)
  {
    v15 = *(_QWORD *)(v12 + 40) + 56;
  }
  else
  {
    if (!v11 || (*(_BYTE *)v11 & 4) == 0)
    {
      while ((*(_WORD *)(v11 + 44) & 8) != 0)
        v11 = *(_QWORD *)(v11 + 8);
    }
    v15 = v11 + 8;
  }
  v16 = *(_QWORD *)v15;
  v17 = *(unsigned __int16 **)(*(_QWORD *)v15 + 16);
  if ((v17[4] & 0x80) != 0)
  {
    v21 = *v17;
    v22 = v21 > 0x1F;
    v23 = (1 << v21) & 0x8E000000;
    if (v22 || v23 == 0)
    {
      v25 = v8[78];
      if ((*(_WORD *)(*(_QWORD *)v25 + 1064) & 1) != 0)
      {
        v26 = v8[4];
        v30[0] = 0;
        v27 = sub_1C635BA04(*(_QWORD *)(v25 + 624), *(_DWORD *)(v25 + 640), a2, v30);
        v28 = *(_QWORD *)(v25 + 624);
        v29 = *(_DWORD *)(v25 + 640);
        v32[0] = v33;
        v32[1] = (void *)0x100000000;
        if (v27 && v30[0] != v28 + 48 * v29 && *(_DWORD *)(v30[0] + 16))
          sub_1C61EF278((uint64_t)v32, v30[0] + 8);
        v31 = v16;
        sub_1C635B910((uint64_t)v30, v26 + 744, &v31, (uint64_t)v32);
        if (v32[0] != v33)
          free(v32[0]);
      }
    }
  }
  v18 = v8[78];
  v19 = sub_1C5D0EE68(v18 + 624, a2);
  if (*(_QWORD *)(v18 + 624) + 48 * *(unsigned int *)(v18 + 640) != v19 && *(_BYTE *)(v19 + 40))
    *(_WORD *)(v16 + 44) |= 0x8000u;
  return v16;
}

uint64_t sub_1C5D0EA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t *i;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;

  v12 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v12)
    return sub_1C5D0EEC0(a1, a2, a3, a5, a4, 0);
  if (!*(_QWORD *)(a6 + 64))
  {
    v16 = *(unsigned int *)(a6 + 8);
    if (!(_DWORD)v16)
      goto LABEL_16;
    v17 = *(_DWORD **)a6;
    v18 = 4 * v16;
    while (*v17 != (_DWORD)v12)
    {
      ++v17;
      v18 -= 4;
      if (!v18)
        goto LABEL_16;
    }
    if (!v18)
      goto LABEL_16;
    return sub_1C5D0EEC0(a1, a2, a3, a5, a4, 0);
  }
  for (i = *(uint64_t **)(a6 + 56); i; i = (uint64_t *)*i)
  {
    v15 = *((_DWORD *)i + 7);
    if (v12 >= v15)
    {
      if (v15 >= v12)
        return sub_1C5D0EEC0(a1, a2, a3, a5, a4, 0);
      ++i;
    }
  }
LABEL_16:
  if (a7)
  {
    v22 = *(_DWORD *)(a1 + 60);
    sub_1C484FF44(a6, &v22);
    v20 = *(unsigned int *)(a5 + 8);
    if (v20 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v20 + 1, 16);
      LODWORD(v20) = *(_DWORD *)(a5 + 8);
    }
    v21 = (_QWORD *)(*(_QWORD *)a5 + 16 * v20);
    *v21 = v12;
    v21[1] = a7;
    ++*(_DWORD *)(a5 + 8);
  }
  return sub_1C5D0EEC0(a1, a2, a3, a5, a4, v12);
}

void sub_1C5D0EBCC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  llvm::MachineBasicBlock::getFullName(*(llvm::MachineBasicBlock **)(a1 + 616), &v4);
  v3 = std::string::insert(&v4, 0, "sunit-dag.");
  *a2 = *v3;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1C5D0EC38(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v12;
  char *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  int v24;
  _BYTE *v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[16];
  void *v29;
  uint64_t v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x1E0C80C00];
  v12 = *(char **)(a1 + 32);
  v13 = &v12[40 * *(unsigned __int16 *)(a1 + 56)];
  v29 = v31;
  v30 = 0x800000000;
  sub_1C6132D88((unsigned int *)&v29, v12, v13);
  if (a5)
  {
    v14 = v30;
    if (v30 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 16);
      v14 = v30;
    }
    v15 = (char *)v29 + 16 * v14;
    *v15 = a5;
    v15[1] = a6;
    LODWORD(v30) = v30 + 1;
  }
  v17 = sub_1C636AB20((uint64_t)a2, a3, a4);
  v18 = v16;
  v19 = *(__int16 *)(a1 + 24);
  v26 = v28;
  v27 = 0x200000000;
  if ((v19 & 0x80000000) == 0)
  {
    sub_1C5D60DE8((uint64_t)a2, a1, v19, v17, v16, (uint64_t *)v29, v30);
    goto LABEL_7;
  }
  v20 = *(_DWORD *)(a1 + 88);
  if (v20)
  {
    if (v20 == 1)
    {
      v21 = 0;
      v22 = (const void *)(a1 + 80);
      v23 = 8;
    }
    else
    {
      v22 = (const void *)(*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8);
      v23 = 8 * v20;
      if (v23 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, v20, 8);
        v23 = 8 * v20;
        v25 = v26;
        v21 = v27;
        goto LABEL_19;
      }
      v21 = 0;
    }
    v25 = v28;
LABEL_19:
    memcpy(&v25[8 * v21], v22, v23);
    v24 = v27;
    LOWORD(v19) = *(_WORD *)(a1 + 24);
    goto LABEL_20;
  }
  v24 = 0;
LABEL_20:
  LODWORD(v27) = v24 + v20;
  sub_1C5D60DE8((uint64_t)a2, a1, v19, v17, v18, (uint64_t *)v29, v30);
  sub_1C636E10C(a2, a1, v26, v27);
LABEL_7:
  if (v26 != v28)
    free(v26);
  if (v29 != v31)
    free(v29);
}

uint64_t sub_1C5D0EE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C635BA04(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C5D0EEC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  if ((*(_BYTE *)(result + 26) & 1) != 0)
  {
    v33 = *(uint64_t **)(a3 + 48);
    v34 = *(_QWORD *)(a3 + 40);
    v10 = *(_QWORD *)(a2 + 616);
    result = sub_1C5D05F58(v10 + 688, result);
    if (*(_QWORD *)(v10 + 688) + 40 * *(unsigned int *)(v10 + 704) != result)
    {
      v11 = *(unsigned int *)(result + 16);
      if ((_DWORD)v11)
      {
        v12 = *(uint64_t **)(result + 8);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (!*(_BYTE *)(*v12 + 63))
          {
            v15 = *(unsigned int *)(v14 + 56);
            if (!a6 || (_DWORD)v15 == a6)
            {
              if (*(_BYTE *)(v14 + 62) || !*(_QWORD *)v14)
              {
LABEL_16:
                result = (uint64_t)sub_1C632C21C(a3, v14, a5);
                if (result)
                {
                  v19 = result;
                  v20 = *(unsigned int *)(a4 + 8);
                  if (v20 >= *(unsigned int *)(a4 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v20 + 1, 16);
                    v20 = *(unsigned int *)(a4 + 8);
                  }
                  v21 = (_QWORD *)(*(_QWORD *)a4 + 16 * v20);
                  *v21 = v15;
                  v21[1] = v19;
                  ++*(_DWORD *)(a4 + 8);
                  v22 = *(_QWORD *)(v34 + 40);
                  *(_QWORD *)(v19 + 24) = v22;
                  v23 = *(_QWORD *)(v22 + 32);
                  v24 = *(unsigned int *)(v19 + 40);
                  if ((_DWORD)v24)
                  {
                    v26 = *(_QWORD *)(v19 + 32);
                    v27 = *(_QWORD *)(v23 + 40);
                    v28 = 32 * v24;
                    do
                    {
                      if (!*(_BYTE *)v26)
                      {
                        v29 = *(unsigned int *)(v26 + 4);
                        if ((int)v29 >= 0)
                          v30 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v29);
                        else
                          v30 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
                        v31 = *v30;
                        if (*v30)
                        {
                          v32 = *(_QWORD *)(v31 + 16);
                          *(_QWORD *)(v31 + 16) = v26;
                          *(_QWORD *)(v26 + 16) = v32;
                          if ((*(_BYTE *)(v26 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v26 + 24) = v31;
                          }
                          else
                          {
                            *(_QWORD *)(v26 + 24) = 0;
                            v30 = (uint64_t *)(v32 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v26 + 16) = v26;
                          *(_QWORD *)(v26 + 24) = 0;
                        }
                        *v30 = v26;
                      }
                      v26 += 32;
                      v28 -= 32;
                    }
                    while (v28);
                  }
                  result = *(_QWORD *)(v23 + 728);
                  if (result)
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, v19);
                  v25 = *v33 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v19 = v25 | *(_QWORD *)v19 & 7;
                  *(_QWORD *)(v19 + 8) = v33;
                  *(_QWORD *)(v25 + 8) = v19;
                  *v33 = *v33 & 7 | v19;
                }
              }
              else
              {
                v16 = 24 * *(_QWORD *)v14;
                v17 = (_DWORD *)(*(_QWORD *)(v14 + 8) + 16);
                while (1)
                {
                  if (!*(v17 - 4))
                  {
                    v18 = *v17;
                    v35 = *((_QWORD *)v17 - 1);
                    v36 = v18;
                    v37 = 0;
                    result = sub_1C632C56C(a5, (uint64_t)&v35, &v37);
                    if ((result & 1) == 0)
                      break;
                  }
                  v17 += 6;
                  v16 -= 24;
                  if (!v16)
                    goto LABEL_16;
                }
              }
            }
          }
          ++v12;
        }
        while (v12 != v13);
      }
    }
  }
  return result;
}

__n128 sub_1C5D0F128(_WORD *a1, int **a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED824D18, "sched-high-latency-cycles", 0x19uLL);
  word_1ED824D22 = (32 * (*a1 & 3)) | word_1ED824D22 & 0xFF9F;
  v6 = *a2;
  dword_1ED824D98 = **a2;
  byte_1ED824DAC = 1;
  dword_1ED824DA8 = *v6;
  result = *a3;
  xmmword_1ED824D38 = (__int128)*a3;
  return result;
}

uint64_t sub_1C5D0F1AC(uint64_t *a1, uint64_t a2, int a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v3[-*a1] >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - (uint64_t)v4) >> 4) > v6)
    v6 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - (uint64_t)v4) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - (uint64_t)v4) >> 4) >= 0x78787878787878)
    v10 = 0xF0F0F0F0F0F0F0;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xF0F0F0F0F0F0F0)
      sub_1C4764EE4();
    v11 = (char *)operator new(272 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (uint64_t)&v11[272 * v5];
  *(_QWORD *)v12 = a2;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  v13 = &v11[272 * v10];
  *(_QWORD *)(v12 + 32) = v12 + 48;
  *(_QWORD *)(v12 + 40) = 0x400000000;
  *(_QWORD *)(v12 + 112) = v12 + 128;
  *(_QWORD *)(v12 + 120) = 0x400000000;
  *(_DWORD *)(v12 + 192) = a3;
  *(_DWORD *)(v12 + 232) = 0;
  *(_OWORD *)(v12 + 196) = 0u;
  *(_OWORD *)(v12 + 212) = 0u;
  *(_WORD *)(v12 + 228) = 0;
  *(_BYTE *)(v12 + 236) &= 0xFCu;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  v14 = v12 + 272;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v3 -= 272;
      v12 = sub_1C6212274(v12 - 272, (uint64_t)v3);
    }
    while (v3 != v4);
    v3 = (char *)*a1;
    v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (uint64_t)v13;
    while (v15 != v3)
    {
      v16 = (char *)*((_QWORD *)v15 - 20);
      if (v15 - 144 != v16)
        free(v16);
      v17 = (char *)*((_QWORD *)v15 - 30);
      if (v15 - 224 != v17)
        free(v17);
      v15 -= 272;
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

_QWORD *sub_1C5D0F348(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_5:
    result = sub_1C5D0F434(a2, a3, v14);
    v15 = *a4;
    *result = *a3;
    result[1] = v15;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a2;
  v10 = (37 * *a3) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v16 = 0;
    v17 = 1;
    while (v12 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v12 == 0x8000000000000000;
      if (v18)
        v16 = result;
      v19 = v10 + v17++;
      v10 = v19 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_3;
    }
    if (v16)
      v14 = v16;
    else
      v14 = result;
    goto LABEL_5;
  }
LABEL_3:
  v13 = 0;
LABEL_6:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

_QWORD *sub_1C5D0F434(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C5D0F5B4(a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = (37 * *a2) & v9;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == 0x8000000000000000;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C5D0F5B4(a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = (37 * *a2) & v16;
    a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == 0x8000000000000000;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_QWORD *)(*(_QWORD *)a1 + 16 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5D0F5B4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0x7FFFFFFFFFFFFFFFLL;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((unint64_t)(*v14 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
        {
          v16 = (37 * v15) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v20 = 0;
            v21 = 1;
            while (v18 != 0x7FFFFFFFFFFFFFFFLL)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v18 == 0x8000000000000000;
              if (v22)
                v20 = v17;
              v23 = v16 + v21++;
              v16 = v23 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v23 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_12;
            }
            if (v20)
              v17 = v20;
          }
LABEL_12:
          v19 = v14[1];
          *v17 = v15;
          v17[1] = v19;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = 0x7FFFFFFFFFFFFFFFLL;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C5D0F734(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

_QWORD *sub_1C5D0F750(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C5D0F434(a1, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == 0x8000000000000000;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

void sub_1C5D0F808(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unint64_t v10;
  char *v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  __n128 *v28;
  char *v29;
  __n128 *v30;
  unsigned __int32 v31;
  __n128 *v32;
  unint64_t v33;
  uint64_t v34;
  __n128 *v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  __n128 *v39;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-1].n128_u32[0];
      v9 = a1->n128_u32[0];
      if (v8 < a1->n128_u32[0])
      {
        a1->n128_u32[0] = v8;
        a2[-1].n128_u32[0] = v9;
        v10 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v10;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v17 = a1 + 1;
        if (&a1[1] != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v20 = v17;
            v21 = v19[1].n128_u32[0];
            v22 = v19->n128_u32[0];
            if (v21 < v19->n128_u32[0])
            {
              v23 = v19[1].n128_u64[1];
              v24 = v18;
              while (1)
              {
                v25 = (char *)a1 + v24;
                *((_DWORD *)v25 + 4) = v22;
                *((_QWORD *)v25 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v24);
                if (!v24)
                  break;
                v22 = *((_DWORD *)v25 - 4);
                v24 -= 16;
                if (v21 >= v22)
                {
                  v26 = (uint64_t)&a1[1] + v24;
                  goto LABEL_18;
                }
              }
              v26 = (uint64_t)a1;
LABEL_18:
              *(_DWORD *)v26 = v21;
              *(_QWORD *)(v26 + 8) = v23;
            }
            v17 = v20 + 1;
            v18 += 16;
            v19 = v20;
          }
          while (&v20[1] != a2);
        }
      }
    }
    else
    {
      v13 = (char *)a4;
      v14 = a3 >> 1;
      v15 = &a1[a3 >> 1];
      v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v27 = sub_1C5D0FA64(a1, v15, v16, a4, a6);
        v28 = (__n128 *)&v13[16 * v14];
        sub_1C5D0FA64(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v28, v27);
        v29 = &v13[16 * a3];
        v30 = v28;
        while (v30 != (__n128 *)v29)
        {
          v31 = v30->n128_u32[0];
          if (v30->n128_u32[0] < *(_DWORD *)v13)
          {
            v32 = v30;
          }
          else
          {
            v31 = *(_DWORD *)v13;
            v32 = (__n128 *)v13;
          }
          v33 = v32->n128_u64[1];
          if (v30->n128_u32[0] < *(_DWORD *)v13)
            ++v30;
          else
            v13 += 16;
          v7->n128_u32[0] = v31;
          v7->n128_u64[1] = v33;
          ++v7;
          if (v13 == (char *)v28)
          {
            if (v30 != (__n128 *)v29)
            {
              v34 = 0;
              do
              {
                v35 = &v30[v34];
                v36 = &v7[v34];
                v36->n128_u32[0] = v30[v34].n128_u32[0];
                v36->n128_u64[1] = v30[v34++].n128_u64[1];
              }
              while (&v35[1] != (__n128 *)v29);
            }
            return;
          }
        }
        if (v13 != (char *)v28)
        {
          v37 = 0;
          do
          {
            v38 = &v7[v37 / 0x10];
            v39 = (__n128 *)&v13[v37];
            v38->n128_u32[0] = *(_DWORD *)&v13[v37];
            v38->n128_u64[1] = *(_QWORD *)&v13[v37 + 8];
            v37 += 16;
          }
          while (&v39[1] != v28);
        }
      }
      else
      {
        sub_1C5D0F808(a1, v15, v16, a4, a5);
        sub_1C5D0F808(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v13, a5);
        sub_1C541A504((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
      }
    }
  }
}

__n128 sub_1C5D0FA64(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unsigned __int32 v15;
  __n128 *v16;
  uint64_t v17;
  unsigned __int32 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u32[0] >= a1->n128_u32[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = &a1[a3 >> 1];
      sub_1C5D0F808(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_1C5D0F808(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v20 = &v8[a3 >> 1];
      while (v20 != a2)
      {
        if (v20->n128_u32[0] >= v8->n128_u32[0])
        {
          v22 = *v8++;
          result = v22;
        }
        else
        {
          v21 = *v20++;
          result = v21;
        }
        *v5++ = result;
        if (v8 == v19)
        {
          if (v20 != a2)
          {
            v23 = 0;
            do
            {
              result = v20[v23];
              v5[v23++] = result;
            }
            while (&v20[v23] != a2);
          }
          return result;
        }
      }
      if (v8 != v19)
      {
        v24 = 0;
        do
        {
          result = v8[v24];
          v5[v24++] = result;
        }
        while (&v8[v24] != v19);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          v14 = v10;
          v15 = v13->n128_u32[0];
          ++v13;
          if (v8[1].n128_u32[0] >= v15)
          {
            result = *v10;
            *v13 = *v10;
          }
          else
          {
            result = *v12;
            *v13 = *v12;
            v16 = a4;
            if (v12 != a4)
            {
              v17 = v11;
              while (1)
              {
                v16 = (__n128 *)((char *)a4 + v17);
                v18 = *(unsigned __int32 *)((char *)a4[-1].n128_u32 + v17);
                if (v14->n128_u32[0] >= v18)
                  break;
                v16->n128_u32[0] = v18;
                v16->n128_u64[1] = v16[-1].n128_u64[1];
                v17 -= 16;
                if (!v17)
                {
                  v16 = a4;
                  break;
                }
              }
            }
            v16->n128_u32[0] = v14->n128_u32[0];
            v16->n128_u64[1] = v8[1].n128_u64[1];
          }
          v10 = v14 + 1;
          v11 += 16;
          v12 = v13;
          v8 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1C5D0FC6C(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_DWORD *)(v7 + 56) < *(_DWORD *)(*(_QWORD *)result + 56))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = (char *)a4;
      v21 = a3 >> 1;
      v22 = &result[8 * (a3 >> 1)];
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5D0FEA0((uint64_t)result, v22, v23, a4);
        v24 = (uint64_t *)&v20[8 * v21];
        result = (char *)sub_1C5D0FEA0((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v24);
        v25 = &v20[8 * a3];
        v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          v27 = v26;
          v28 = *v26;
          v29 = *(_QWORD *)v20;
          v30 = *(_DWORD *)(v28 + 56);
          v31 = *(_DWORD *)(*(_QWORD *)v20 + 56);
          if (v30 < v31)
            v29 = v28;
          v20 += 8 * (v30 >= v31);
          v26 = &v27[v30 < v31];
          *(_QWORD *)v6 = v29;
          v6 += 8;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              v32 = 0;
              if (v30 < v31)
                v33 = 1;
              else
                v33 = 2;
              v34 = &v27[v33 & 1];
              do
              {
                *(_QWORD *)&v6[v32 * 8] = v34[v32];
                ++v32;
              }
              while (&v34[v32] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          v35 = 0;
          do
          {
            *(_QWORD *)&v6[v35] = *(_QWORD *)&v20[v35];
            v35 += 8;
          }
          while (&v20[v35] != (char *)v24);
        }
      }
      else
      {
        sub_1C5D0FC6C(result, v22, v23, a4, a5);
        sub_1C5D0FC6C(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        return sub_1C5D10098(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v20, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 8;
      if (result + 8 != a2)
      {
        v11 = 8;
        v12 = result;
        do
        {
          v14 = *(_QWORD *)v12;
          v13 = *((_QWORD *)v12 + 1);
          v12 = v10;
          v15 = *(_DWORD *)(v13 + 56);
          if (v15 < *(_DWORD *)(v14 + 56))
          {
            v16 = v11;
            while (1)
            {
              *(_QWORD *)&result[v16] = v14;
              v17 = v16 - 8;
              if (v16 == 8)
                break;
              v14 = *(_QWORD *)&result[v16 - 16];
              v16 -= 8;
              if (v15 >= *(_DWORD *)(v14 + 56))
              {
                v18 = &result[v17];
                goto LABEL_15;
              }
            }
            v18 = result;
LABEL_15:
            *(_QWORD *)v18 = v13;
          }
          v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5D0FEA0(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *v4 = *(_QWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(v8 + 56);
      v10 = *(_DWORD *)(*(_QWORD *)result + 56);
      if (v9 >= v10)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v9 >= v10)
        v6 = (uint64_t)(a2 - 1);
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = result + 8 * (a3 >> 1);
      sub_1C5D0FC6C(result, v20, a3 >> 1, a4, a3 >> 1);
      result = sub_1C5D0FC6C(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = (_QWORD *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *(_QWORD *)v6;
        v25 = *(_DWORD *)(v23 + 56);
        v26 = *(_DWORD *)(*(_QWORD *)v6 + 56);
        if (v25 < v26)
          v24 = v23;
        v21 = &v22[v25 < v26];
        v6 += 8 * (v25 >= v26);
        *v4++ = v24;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v27 = 0;
            v28 = &v22[v25 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v29 = 0;
        do
        {
          v4[v29] = *(_QWORD *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v11 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_DWORD *)(*(_QWORD *)v11 + 56) >= *(_DWORD *)(v16 + 56))
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (uint64_t *)((char *)a4 + v18);
                v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(_DWORD *)(*(_QWORD *)v11 + 56) >= *(_DWORD *)(v19 + 56))
                  break;
                *v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = v14;
        }
        while ((_QWORD *)v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C5D10098(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      while (1)
      {
        v12 = *(_QWORD *)v11;
        if (*(_DWORD *)(*(_QWORD *)a2 + 56) < *(_DWORD *)(*(_QWORD *)v11 + 56))
          break;
        v11 += 8;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *(_QWORD *)v11 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v12;
          return result;
        }
        if (a4 >= 0)
          v23 = a4;
        else
          v23 = a4 + 1;
        v22 = v23 >> 1;
        v16 = &v11[8 * (v23 >> 1)];
        v15 = a3;
        if (a3 != a2)
        {
          v24 = (a3 - a2) >> 3;
          v15 = a2;
          do
          {
            v25 = v24 >> 1;
            v26 = &v15[8 * (v24 >> 1)];
            v28 = *(_QWORD *)v26;
            v27 = v26 + 8;
            v24 += ~(v24 >> 1);
            if (*(_DWORD *)(v28 + 56) < *(_DWORD *)(*(_QWORD *)v16 + 56))
              v15 = v27;
            else
              v24 = v25;
          }
          while (v24);
        }
        v14 = (v15 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v13 = v8;
        else
          v13 = v8 + 1;
        v14 = v13 >> 1;
        v15 = &a2[8 * (v13 >> 1)];
        v16 = a2;
        if (v11 != a2)
        {
          v17 = (a2 - v11) >> 3;
          v16 = v11;
          do
          {
            v18 = v17 >> 1;
            v19 = &v16[8 * (v17 >> 1)];
            v21 = *(_QWORD *)v19;
            v20 = v19 + 8;
            v17 += ~(v17 >> 1);
            if (*(_DWORD *)(*(_QWORD *)v15 + 56) < *(_DWORD *)(v21 + 56))
              v17 = v18;
            else
              v16 = v20;
          }
          while (v17);
        }
        v22 = (v16 - v11) >> 3;
      }
      v29 = v15;
      if (v16 != a2)
      {
        v29 = v16;
        if (a2 != v15)
        {
          if (v16 + 8 == a2)
          {
            v69 = *(_QWORD *)v16;
            v71 = a3;
            v36 = v15 - a2;
            v73 = a6;
            memmove(v16, a2, v15 - a2);
            a3 = v71;
            a6 = v73;
            v29 = &v16[v36];
            *(_QWORD *)v29 = v69;
          }
          else if (a2 + 8 == v15)
          {
            v37 = *((_QWORD *)v15 - 1);
            v29 = v16 + 8;
            if (v15 - 8 != v16)
            {
              v72 = a3;
              v74 = a6;
              v70 = *((_QWORD *)v15 - 1);
              memmove(v16 + 8, v16, v15 - 8 - v16);
              v37 = v70;
              a3 = v72;
              a6 = v74;
            }
            *(_QWORD *)v16 = v37;
          }
          else
          {
            v30 = (a2 - v16) >> 3;
            if (v30 == (v15 - a2) >> 3)
            {
              v31 = 0;
              do
              {
                v32 = *(_QWORD *)&v16[v31];
                *(_QWORD *)&v16[v31] = *(_QWORD *)&a2[v31];
                v33 = (uint64_t)&v16[v31 + 8];
                *(_QWORD *)&a2[v31] = v32;
                v34 = (uint64_t)&a2[v31 + 8];
                v31 += 8;
              }
              while ((char *)v33 != a2 && v34 != (_QWORD)v15);
              v29 = a2;
            }
            else
            {
              v38 = (v15 - a2) >> 3;
              v39 = (a2 - v16) >> 3;
              do
              {
                v40 = v39;
                v39 = v38;
                v38 = v40 % v38;
              }
              while (v38);
              if (v39)
              {
                v41 = &v16[8 * v39];
                do
                {
                  v43 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  v42 = v43;
                  v44 = &v41[8 * v30];
                  v45 = v41;
                  do
                  {
                    v46 = v45;
                    v45 = v44;
                    *(_QWORD *)v46 = *(_QWORD *)v44;
                    v47 = __OFSUB__(v30, (v15 - v44) >> 3);
                    v49 = v30 - ((v15 - v44) >> 3);
                    v48 = (v49 < 0) ^ v47;
                    v44 = &v16[8 * v49];
                    if (v48)
                      v44 = &v45[8 * v30];
                  }
                  while (v44 != v41);
                  *(_QWORD *)v45 = v42;
                }
                while (v41 != v16);
              }
              v29 = &v16[8 * ((v15 - a2) >> 3)];
            }
          }
        }
      }
      a4 -= v22;
      v8 -= v14;
      if (v22 + v14 >= a4 + v8)
      {
        v54 = v8;
        v55 = a6;
        result = (char *)sub_1C5D10098(v29, v15, a3, a4, v54, a6, a7);
        a6 = v55;
        v15 = v16;
        v8 = v14;
        a4 = v22;
        a3 = v29;
      }
      else
      {
        v50 = v11;
        v51 = v16;
        v52 = a6;
        v53 = a3;
        result = (char *)sub_1C5D10098(v50, v51, v29, v22, v14, a6, a7);
        a3 = v53;
        a6 = v52;
        v11 = v29;
      }
      a2 = v15;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v60 = 0;
        do
        {
          *(_QWORD *)&a6[v60] = *(_QWORD *)&v11[v60];
          v60 += 8;
        }
        while (&v11[v60] != a2);
        if (v60)
        {
          v61 = a6;
          while (a2 != a3)
          {
            v62 = *(_QWORD *)a2;
            v63 = *(_DWORD *)(*(_QWORD *)a2 + 56);
            v64 = *(_DWORD *)(*(_QWORD *)v61 + 56);
            v65 = v63 >= v64;
            v66 = v63 < v64;
            v67 = v65;
            if (v65)
              v62 = *(_QWORD *)v61;
            v61 += 8 * v67;
            a2 += 8 * v66;
            *(_QWORD *)v11 = v62;
            v11 += 8;
            if (&a6[v60] == v61)
              return result;
          }
          return (char *)memmove(v11, v61, a6 - v61 + v60);
        }
      }
    }
    else if (a2 != a3)
    {
      v56 = 0;
      do
      {
        *(_QWORD *)&a6[v56] = *(_QWORD *)&a2[v56];
        v56 += 8;
      }
      while (&a2[v56] != a3);
      if (v56)
      {
        v57 = &a6[v56];
        v58 = a3 - 8;
        while (a2 != v11)
        {
          v59 = *((_QWORD *)v57 - 1);
          if (*(_DWORD *)(v59 + 56) >= *(_DWORD *)(*((_QWORD *)a2 - 1) + 56))
          {
            v57 -= 8;
          }
          else
          {
            v59 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          *(_QWORD *)v58 = v59;
          v58 -= 8;
          if (v57 == a6)
            return result;
        }
        if (v57 != a6)
        {
          v68 = 0;
          do
          {
            *(_QWORD *)&v58[v68] = *(_QWORD *)&v57[v68 - 8];
            v68 -= 8;
          }
          while (&v57[v68] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5D1052C()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 10;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Roughly estimate the number of cycles that 'long latency'instructions take for targ"
                                     "ets with no itinerary";
  v1.n128_u64[1] = 104;
  sub_1C635BAA0(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED824D18, &dword_1C475E000);
}

void sub_1C5D10598(llvm::ScheduleDAG *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E8198B40;
  v2 = *((_QWORD *)this + 87);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 83);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v4 = (void *)*((_QWORD *)this + 84);
  if (v4)
  {
    *((_QWORD *)this + 85) = v4;
    operator delete(v4);
  }
  sub_1C635A3B8(this);
}

void sub_1C5D105FC(llvm::ScheduleDAG *a1)
{
  sub_1C5D10598(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5D10620(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  char v21;
  llvm::SUnit *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  llvm::SUnit **v29;
  char *v30;
  llvm::SUnit *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::SUnit **v36;
  unint64_t v37;
  _QWORD *v38;
  llvm::SUnit **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  llvm::SUnit **v48;
  unint64_t v49;
  _QWORD *v50;
  llvm::SUnit **v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  llvm::SUnit **v57;
  llvm::SUnit *v58;
  llvm::SUnit ***v60;

  sub_1C635B36C((uint64_t *)a1);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 664) + 32))(*(_QWORD *)(a1 + 664), a1 + 48);
  sub_1C5D10B74((_QWORD *)a1, (llvm::SUnit *)(a1 + 72));
  v3 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 56);
  if (v3 == v2)
  {
    v4 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    do
    {
      if (!*(_DWORD *)(v3 + 40))
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 664) + 88))(*(_QWORD *)(a1 + 664), v3);
        *(_WORD *)(v3 + 228) |= 0x200u;
      }
      v3 += 272;
    }
    while (v3 != v2);
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
  }
  sub_1C4DB1D18(a1 + 640, 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 4));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 64))(*(_QWORD *)(a1 + 664));
  v6 = *(_QWORD *)(a1 + 680);
  v7 = *(_QWORD *)(a1 + 672);
  if (v5)
    v8 = v7 == v6;
  else
    v8 = 0;
  if (!v8)
  {
    v60 = (llvm::SUnit ***)(a1 + 640);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unint64_t)(v6 - v7) >> 3;
      if ((_DWORD)v13)
      {
        v14 = 0;
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * v14);
          if ((*(_BYTE *)(v15 + 236) & 1) == 0)
            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(*(_QWORD *)(a1 + 672) + 8 * v14));
          if (*(_DWORD *)(v15 + 240) == v9)
          {
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 664) + 88))(*(_QWORD *)(a1 + 664), *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * v14));
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * v14);
            *(_WORD *)(v16 + 228) |= 0x200u;
            *(_QWORD *)(*(_QWORD *)(a1 + 672) + 8 * v14) = *(_QWORD *)(*(_QWORD *)(a1 + 680) - 8);
            *(_QWORD *)(a1 + 680) -= 8;
            --v14;
            LODWORD(v13) = v13 - 1;
          }
          ++v14;
        }
        while (v14 != (_DWORD)v13);
      }
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 64))(*(_QWORD *)(a1 + 664));
      v18 = **(_QWORD **)(a1 + 664);
      if ((v17 & 1) != 0)
      {
        (*(void (**)(void))(v18 + 120))();
        ++v9;
      }
      else
      {
        v21 = 0;
        if (((*(uint64_t (**)(void))(v18 + 64))() & 1) != 0)
        {
LABEL_48:
          v22 = 0;
        }
        else
        {
          while (1)
          {
            v22 = (llvm::SUnit *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 96))(*(_QWORD *)(a1 + 664));
            v23 = (*(uint64_t (**)(_QWORD, llvm::SUnit *, _QWORD))(**(_QWORD **)(a1 + 696) + 24))(*(_QWORD *)(a1 + 696), v22, 0);
            if (!v23)
              break;
            v24 = v23 == 2;
            if (v12 >= v10)
            {
              v25 = (v12 - v11) >> 3;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61)
                goto LABEL_97;
              if ((v10 - v11) >> 2 > v26)
                v26 = (v10 - v11) >> 2;
              if ((unint64_t)(v10 - v11) >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              if (v27)
              {
                if (v27 >> 61)
                  goto LABEL_98;
                v28 = (char *)operator new(8 * v27);
              }
              else
              {
                v28 = 0;
              }
              v29 = (llvm::SUnit **)&v28[8 * v25];
              *v29 = v22;
              v30 = (char *)(v29 + 1);
              while (v12 != v11)
              {
                v31 = (llvm::SUnit *)*((_QWORD *)v12 - 1);
                v12 -= 8;
                *--v29 = v31;
              }
              v10 = &v28[8 * v27];
              if (v11)
                operator delete(v11);
              v12 = v30;
              v11 = (char *)v29;
            }
            else
            {
              *(_QWORD *)v12 = v22;
              v12 += 8;
            }
            v21 |= v24;
            if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 64))(*(_QWORD *)(a1 + 664)))
              goto LABEL_48;
          }
        }
        if (v11 != v12)
        {
          v32 = *(_QWORD *)(a1 + 664);
          v33 = v11;
          do
          {
            v34 = *(_QWORD *)v33;
            v33 += 8;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 88))(v32, v34);
          }
          while (v33 != v12);
          v12 = v11;
        }
        if (v22)
        {
          v48 = *(llvm::SUnit ***)(a1 + 648);
          v49 = *(_QWORD *)(a1 + 656);
          if ((unint64_t)v48 >= v49)
          {
            v51 = *v60;
            v52 = v48 - *v60;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61)
LABEL_97:
              abort();
            v54 = v49 - (_QWORD)v51;
            if (v54 >> 2 > v53)
              v53 = v54 >> 2;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              if (v55 >> 61)
LABEL_98:
                sub_1C4764EE4();
              v56 = (char *)operator new(8 * v55);
            }
            else
            {
              v56 = 0;
            }
            v57 = (llvm::SUnit **)&v56[8 * v52];
            *v57 = v22;
            v50 = v57 + 1;
            if (v48 != v51)
            {
              do
              {
                v58 = *--v48;
                *--v57 = v58;
              }
              while (v48 != v51);
              v48 = *v60;
            }
            *(_QWORD *)(a1 + 640) = v57;
            *(_QWORD *)(a1 + 648) = v50;
            *(_QWORD *)(a1 + 656) = &v56[8 * v55];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *v48 = v22;
            v50 = v48 + 1;
          }
          *(_QWORD *)(a1 + 648) = v50;
          llvm::SUnit::setDepthToAtLeast(v22, v9);
          sub_1C5D10B74((_QWORD *)a1, v22);
          *((_WORD *)v22 + 114) |= 0x400u;
          (*(void (**)(_QWORD, llvm::SUnit *))(**(_QWORD **)(a1 + 664) + 120))(*(_QWORD *)(a1 + 664), v22);
          (*(void (**)(_QWORD, llvm::SUnit *))(**(_QWORD **)(a1 + 696) + 40))(*(_QWORD *)(a1 + 696), v22);
          v47 = *((_WORD *)v22 + 113) != 0;
        }
        else
        {
          v35 = **(_QWORD **)(a1 + 696);
          if ((v21 & 1) != 0)
          {
            (*(void (**)(void))(v35 + 96))();
            v36 = *(llvm::SUnit ***)(a1 + 648);
            v37 = *(_QWORD *)(a1 + 656);
            if ((unint64_t)v36 >= v37)
            {
              v39 = *v60;
              v40 = v36 - *v60;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
                goto LABEL_97;
              v42 = v37 - (_QWORD)v39;
              if (v42 >> 2 > v41)
                v41 = v42 >> 2;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                if (v43 >> 61)
                  goto LABEL_98;
                v44 = (char *)operator new(8 * v43);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[8 * v40];
              *(_QWORD *)v45 = 0;
              v38 = v45 + 8;
              if (v36 != v39)
              {
                do
                {
                  v46 = (uint64_t)*--v36;
                  *((_QWORD *)v45 - 1) = v46;
                  v45 -= 8;
                }
                while (v36 != v39);
                v36 = *v60;
              }
              *(_QWORD *)(a1 + 640) = v45;
              *(_QWORD *)(a1 + 648) = v38;
              *(_QWORD *)(a1 + 656) = &v44[8 * v43];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v36 = 0;
              v38 = v36 + 1;
            }
            *(_QWORD *)(a1 + 648) = v38;
          }
          else
          {
            (*(void (**)(void))(v35 + 80))();
          }
          v47 = 1;
        }
        v9 += v47;
      }
      v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 64))(*(_QWORD *)(a1 + 664));
      v6 = *(_QWORD *)(a1 + 680);
      v7 = *(_QWORD *)(a1 + 672);
      if (v19)
        v20 = v7 == v6;
      else
        v20 = 0;
    }
    while (!v20);
    if (v11)
      operator delete(v11);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 664) + 56))(*(_QWORD *)(a1 + 664));
}

void sub_1C5D10B74(_QWORD *a1, llvm::SUnit *this)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  llvm::SUnit *v7;
  llvm::SUnit *v8;
  BOOL v9;
  llvm::SUnit **v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  llvm::SUnit **v19;
  llvm::SUnit *v20;

  v2 = *((unsigned int *)this + 30);
  if ((_DWORD)v2)
  {
    v5 = *((_QWORD *)this + 14);
    v6 = v5 + 16 * v2;
    v7 = (llvm::SUnit *)(a1 + 43);
    do
    {
      v8 = (llvm::SUnit *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8);
      --*((_DWORD *)v8 + 52);
      if ((*((_BYTE *)this + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth(this);
      llvm::SUnit::setDepthToAtLeast(v8, *(_DWORD *)(v5 + 12) + *((_DWORD *)this + 60));
      if (*((_DWORD *)v8 + 52))
        v9 = 1;
      else
        v9 = v7 == v8;
      if (!v9)
      {
        v10 = (llvm::SUnit **)a1[85];
        v11 = a1[86];
        if ((unint64_t)v10 >= v11)
        {
          v13 = (_QWORD *)a1[84];
          v14 = v10 - (llvm::SUnit **)v13;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          v16 = v11 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            if (v17 >> 61)
              sub_1C4764EE4();
            v18 = (char *)operator new(8 * v17);
          }
          else
          {
            v18 = 0;
          }
          v19 = (llvm::SUnit **)&v18[8 * v14];
          *v19 = v8;
          v12 = v19 + 1;
          if (v10 != v13)
          {
            do
            {
              v20 = *--v10;
              *--v19 = v20;
            }
            while (v10 != v13);
            v10 = (llvm::SUnit **)a1[84];
          }
          a1[84] = v19;
          a1[85] = v12;
          a1[86] = &v18[8 * v17];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v10 = v8;
          v12 = v10 + 1;
        }
        a1[85] = v12;
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
}

uint64_t sub_1C5D10CE0()
{
  sub_1C5D03BD8(qword_1ED824DD8, "vliw-td", "VLIW scheduler", (uint64_t)sub_1C635BB3C);
  return __cxa_atexit((void (*)(void *))sub_1C5D03B70, qword_1ED824DD8, &dword_1C475E000);
}

uint64_t *sub_1C5D10D34(uint64_t a1, _QWORD *a2, uint64_t a3, const llvm::APInt *a4, uint64_t *a5, uint64_t *a6, unsigned __int8 *a7)
{
  unint64_t v7;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const llvm::APInt *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t *v34;
  char *v35;
  int v36;
  unsigned __int8 v37;
  unsigned int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  uint64_t v43;
  llvm::APInt *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  llvm::LLVMContext *v49;
  _QWORD *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t ExtendedIntegerVT;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  llvm *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  void *v87;
  uint64_t v88;
  _BYTE v89[128];
  uint64_t *v90;
  uint64_t v91;
  _QWORD v92[10];

  v92[8] = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v9)
    return 0;
  v73 = a2[3];
  v90 = v92;
  v91 = 0x400000000;
  sub_1C4825C80((unsigned int *)&v90, v9, 0, 0);
  v17 = 0;
  v87 = v89;
  v88 = 0x800000000;
  v75 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v75)
    goto LABEL_70;
  v81 = a3;
  v18 = 0;
  v19 = 0;
  v20 = a4;
  v84 = a2;
  v74 = a7;
  do
  {
    v21 = *(_QWORD *)a1 + 16 * v18;
    v76 = *(_QWORD *)(v21 + 8);
    v77 = *(llvm **)v21;
    v22 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * v18);
    v80 = v18;
    if (*(_BYTE *)(a1 + 180))
      v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v73 + 592))(v73, a2[7], *(unsigned int *)(a1 + 176), *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + v18), 0);
    else
      v23 = *(_BYTE *)(*(_QWORD *)(a1 + 80) + v18);
    v85 = v23;
    sub_1C63646F4((uint64_t)&v87, v22);
    v79 = v19;
    v78 = v22;
    if ((_DWORD)v22)
    {
      v28 = 0;
      v82 = 16 * v22;
      v29 = v19;
      while (1)
      {
        v30 = *a5;
        v31 = a5[1];
        v32 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v29);
        if (a6)
        {
          v34 = sub_1C6142EE0((uint64_t)a2, v30, v31, v20, v32, (llvm *)v85, 0, v24, *a6, a6[1]);
          *a6 = (uint64_t)v34;
          *((_DWORD *)a6 + 2) = 2;
        }
        else
        {
          v34 = sub_1C612E4E4((uint64_t)a2, v30, v31, v20, v32, (llvm *)v85, 0);
        }
        v7 = v33 | v7 & 0xFFFFFFFF00000000;
        *a5 = (uint64_t)v34;
        *((_DWORD *)a5 + 2) = 1;
        v35 = (char *)v87 + v28;
        *(_QWORD *)v35 = v34;
        *((_DWORD *)v35 + 2) = v33;
        v36 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4 * v29);
        if ((v36 & 0x80000000) == 0)
          goto LABEL_60;
        v37 = v85;
        if ((v85 - 120) >= 0x20u
          && (v85 - 2) >= 6u
          && (v85 - 15) > 0x3Bu)
        {
          goto LABEL_60;
        }
        v38 = v36 & 0x7FFFFFFF;
        if ((v36 & 0x7FFFFFFFu) >= *(_DWORD *)(v81 + 792))
          goto LABEL_60;
        v39 = *(_QWORD *)(v81 + 784);
        v40 = (int *)(v39 + 40 * v38);
        if ((*v40 & 0x80000000) == 0)
          goto LABEL_60;
        if ((v85 - 15) <= 0x9Bu)
          v37 = sub_1C47F37A0(&v85);
        v86 = v37;
        v41 = sub_1C47A8C74(&v86);
        v42 = *v40;
        v43 = v39 + 40 * v38;
        v44 = (llvm::APInt *)(v43 + 8);
        v45 = *(_DWORD *)(v43 + 16);
        if (v45 > 0x40)
          break;
        v46 = (uint64_t)v84;
        if (v45)
        {
          v47 = __clz(~(*(_QWORD *)v44 << -(char)v45));
          goto LABEL_28;
        }
        if (!v41)
        {
LABEL_29:
          v50 = sub_1C6366AB4(v46, 0, a4, (llvm *)v85, 0, 0, 0);
          goto LABEL_59;
        }
LABEL_31:
        if ((v42 & 0x7FFFFFFFu) >= 2)
        {
          v52 = v41 - (v42 & 0x7FFFFFFFu);
          if ((int)v52 <= 30)
          {
            v46 = (uint64_t)v84;
            switch((_DWORD)v52)
            {
              case 0:
                v53 = v41 - (v42 & 0x7FFFFFFFu);
                v54 = 2;
                goto LABEL_55;
              case 0xF:
                v52 = 0;
                v53 = 0;
                v54 = 4;
                goto LABEL_55;
              case 7:
                v52 = 0;
                v53 = 0;
                v54 = 3;
                goto LABEL_55;
            }
          }
          else
          {
            v46 = (uint64_t)v84;
            switch((_DWORD)v52)
            {
              case 0x1F:
                v52 = 0;
                v53 = 0;
                v54 = 5;
LABEL_55:
                v57 = v54 | v52;
                v58 = 3;
                goto LABEL_56;
              case 0x3F:
                v52 = 0;
                v53 = 0;
                v54 = 6;
                goto LABEL_55;
              case 0x7F:
                v52 = 0;
                v53 = 0;
                v54 = 7;
                goto LABEL_55;
            }
          }
          ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v46 + 56), (llvm::LLVMContext *)(v52 + 1));
          v53 = v68;
          v52 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
          v54 = ExtendedIntegerVT;
          goto LABEL_55;
        }
LABEL_60:
        v28 += 16;
        ++v29;
        v20 = a4;
        a2 = v84;
        if (v82 == v28)
          goto LABEL_10;
      }
      v48 = v41;
      v47 = llvm::APInt::countLeadingOnesSlowCase(v44);
      v41 = v48;
      v46 = (uint64_t)v84;
LABEL_28:
      v49 = (llvm::LLVMContext *)(v41 - v47);
      if (v41 == v47)
        goto LABEL_29;
      if (v47)
      {
        if ((int)v49 <= 31)
        {
          switch((_DWORD)v49)
          {
            case 1:
              v55 = 0;
              v53 = 0;
              v56 = 2;
              goto LABEL_52;
            case 0x10:
              v55 = 0;
              v53 = 0;
              v56 = 4;
              goto LABEL_52;
            case 8:
              v55 = 0;
              v53 = 0;
              v56 = 3;
              goto LABEL_52;
          }
        }
        else
        {
          switch((_DWORD)v49)
          {
            case 0x20:
              v55 = 0;
              v53 = 0;
              v56 = 5;
              goto LABEL_52;
            case 0x40:
              v55 = 0;
              v53 = 0;
              v56 = 6;
              goto LABEL_52;
            case 0x80:
              v55 = 0;
              v53 = 0;
              v56 = 7;
              goto LABEL_52;
          }
        }
        v65 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v46 + 56), v49);
        v53 = v66;
        v55 = v65 & 0xFFFFFFFFFFFFFF00;
        v56 = v65;
LABEL_52:
        v57 = v56 | v55;
        v58 = 4;
LABEL_56:
        v59 = (llvm *)v85;
        v60 = sub_1C6367494(v46, v57, v53);
        v63 = *(_QWORD *)(v46 + 832);
        if (v63)
          LOWORD(v63) = *(_WORD *)(v63 + 8);
        v50 = sub_1C5D56C70(v46, v58, a4, v59, 0, (uint64_t)v34, v7, v62, v60, v61, v63);
LABEL_59:
        v64 = (char *)v87 + v28;
        *(_QWORD *)v64 = v50;
        *((_DWORD *)v64 + 2) = v51;
        goto LABEL_60;
      }
      goto LABEL_31;
    }
LABEL_10:
    v25 = sub_1C5D11328((uint64_t)a2, v20, (__int128 *)v87, v78, v85, v77, v76, v74, *(_QWORD *)(a1 + 176), 0);
    v26 = &v90[2 * v80];
    *v26 = (uint64_t)v25;
    *((_DWORD *)v26 + 2) = v27;
    v19 = v78 + v79;
    LODWORD(v88) = 0;
    v18 = v80 + 1;
  }
  while (v80 + 1 != v75);
  v17 = *(unsigned int *)(a1 + 8);
LABEL_70:
  v70 = sub_1C636AB20((uint64_t)a2, *(uint64_t **)a1, v17);
  v71 = a2[104];
  if (v71)
    v72 = *(_WORD *)(v71 + 8);
  else
    v72 = 0;
  v10 = sub_1C636D410((uint64_t)a2, (const char *)0x37, a4, v70, v69, v90, v91, v72);
  if (v87 != v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  return v10;
}

uint64_t *sub_1C5D11328(uint64_t a1, const llvm::APInt *a2, __int128 *a3, uint64_t a4, unsigned __int8 a5, llvm *a6, uint64_t a7, unsigned __int8 *a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  unsigned int v29;
  const char *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  llvm *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t ExtendedSizeInBits;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  llvm::EVT *v47;
  uint64_t v48;
  const char *v49;
  const llvm::APInt *v50;
  int v51;
  uint64_t v52;
  const char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  llvm *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const llvm::APInt *v66;
  uint64_t v67;
  unint64_t v68;
  __int16 v69;
  uint64_t *v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  llvm *v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  int v81;
  llvm::EVT *v82;
  unsigned int VectorTypeBreakdown;
  llvm::LLVMContext *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  __int16 v92;
  uint64_t *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  BOOL v106;
  uint64_t i;
  uint64_t v108;
  char *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  llvm::LLVMContext *v114;
  unint64_t v115;
  uint64_t v116;
  llvm *v117;
  uint64_t v118;
  llvm::LLVMContext *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BOOL4 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t v131;
  BOOL v132;
  llvm *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  const llvm::APInt *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  llvm::LLVMContext *v141;
  unint64_t EVT;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  llvm::Type *v147;
  llvm *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  llvm::LLVMContext *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  llvm *v161;
  llvm *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const llvm::APInt *v166;
  int v167;
  __int128 *v168;
  uint64_t v169;
  uint64_t *v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  __int16 v174;
  int v175;
  uint64_t v176;
  __int16 v177;
  void *v178;
  void *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  llvm *v188;
  BOOL v189;
  BOOL v190;
  int v191;
  BOOL v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  int v198;
  unsigned int v199;
  unint64_t v200;
  int v201;
  unint64_t v202;
  int v203;
  llvm::EVT *v204;
  uint64_t v205;
  const char *v206;
  llvm::LLVMContext *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  llvm::LLVMContext *v212;
  uint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  const char *v218;
  uint64_t v219;
  unint64_t v220;
  unsigned __int8 v221;
  char v222;
  uint64_t v223;
  int v224;
  llvm *v225;
  uint64_t v226;
  __int16 v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  char v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  unint64_t v254;
  int v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  unint64_t v260;
  int v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  __int16 v265;
  unsigned int v266;
  unint64_t v267;
  int v268;
  unint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  llvm *v274;
  unsigned __int8 v275;
  _QWORD *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  const llvm::APInt *v280;
  int v281;
  llvm *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unint64_t v290;
  int v291;
  unint64_t v292;
  int v293;
  llvm::LLVMContext *v294;
  llvm::LLVMContext *v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  __int16 v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  unsigned int v320;
  uint64_t v321;
  unint64_t v322;
  llvm::LLVMContext *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  llvm *v327;
  uint64_t v328;
  __int16 v329;
  uint64_t *v330;
  unsigned int v331;
  unint64_t v332;
  const char *v333;
  llvm::Type *v334;
  llvm *ShiftAmountTy;
  uint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  __int16 v345;
  uint64_t *v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  unsigned int v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  llvm *v359;
  uint64_t v360;
  __int16 v361;
  uint64_t *v362;
  int v363;
  uint64_t ExtendedIntegerVT;
  uint64_t v365;
  int v366;
  unsigned int v367;
  uint64_t *v368;
  const llvm::APInt *v369;
  uint64_t v370;
  unint64_t v372;
  llvm *v373;
  uint64_t v374;
  unsigned __int8 v375;
  unsigned int v376;
  unsigned __int8 v377;
  llvm *v378;
  uint64_t v379;
  __int128 v380;
  llvm *v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  _WORD v385[64];
  uint64_t v386;

  v386 = *MEMORY[0x1E0C80C00];
  v375 = a5;
  v373 = a6;
  v374 = a7;
  v17 = *(uint64_t **)(a1 + 24);
  v18 = a5;
  v19 = (*(uint64_t (**)(uint64_t *, uint64_t, const llvm::APInt *, __int128 *, uint64_t, _QWORD, llvm *, uint64_t, uint64_t))(*v17 + 1824))(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  if (v19)
    return (uint64_t *)v19;
  v368 = v17;
  v369 = a2;
  v370 = a1;
  v20 = a6;
  if ((_BYTE)a6)
  {
    v21 = a8;
    v22 = a3;
    v23 = a7;
    if (a6 - 15 >= 0x9C)
    {
      v24 = *(uint64_t **)a3;
      v25 = *((_QWORD *)a3 + 1);
      if (a4 >= 2)
      {
        v26 = a4;
        if (a6 - 2 < 6)
          goto LABEL_6;
        goto LABEL_25;
      }
      goto LABEL_30;
    }
LABEL_11:
    v381 = a6;
    v382 = v23;
    v31 = *(_QWORD *)(v370 + 24);
    v380 = *v22;
    if (a4 <= 1)
    {
      v24 = (uint64_t *)v380;
      v32 = DWORD2(v380);
      v33 = v370;
      goto LABEL_13;
    }
    LOBYTE(v378) = 0;
    v379 = 0;
    v377 = 0;
    v376 = 0;
    v82 = *(llvm::EVT **)(v370 + 56);
    if ((a9 & 0xFF00000000) != 0)
      VectorTypeBreakdown = (*(uint64_t (**)(unint64_t, llvm::EVT *, uint64_t, llvm *, uint64_t, llvm **, unsigned int *, unsigned __int8 *))(*(_QWORD *)v31 + 464))(v31, v82, a9, a6, v23, &v378, &v376, &v377);
    else
      VectorTypeBreakdown = llvm::TargetLoweringBase::getVectorTypeBreakdown(v31, v82, (uint64_t)a6, v23, &v378, &v376, &v377);
    v104 = VectorTypeBreakdown;
    v383 = v385;
    v384 = 0x800000000;
    sub_1C4825C80((unsigned int *)&v383, v376, 0, 0);
    v33 = v370;
    if (v376 == v104)
    {
      if (v104)
      {
        for (i = 0; i != v104; ++i)
        {
          v108 = sub_1C5D11328(v370, a2, &v22[i], 1, v18, v378, v379, v21, a9, 0);
          v109 = (char *)v383 + i * 16;
          *(_QWORD *)v109 = v108;
          *((_DWORD *)v109 + 2) = v105;
        }
      }
    }
    else if (v104 && v376)
    {
      v110 = 0;
      v111 = v104 / v376;
      do
      {
        v112 = sub_1C5D11328(v370, v369, &v22[v110 * v111], v111, v18, v378, v379, v21, a9, 0);
        v113 = (char *)v383 + 16 * v110;
        *(_QWORD *)v113 = v112;
        *((_DWORD *)v113 + 2) = v105;
        ++v110;
      }
      while (v110 != v376);
    }
    if ((_BYTE)v378)
    {
      if (v378 - 15 >= 0x9C)
        goto LABEL_107;
    }
    else if ((*(_DWORD *)(v379 + 8) & 0xFE) != 0x12)
    {
LABEL_107:
      v114 = *(llvm::LLVMContext **)(v370 + 56);
      v115 = sub_1C6131264((unsigned __int8 *)&v378, v105, v106);
      v117 = (llvm *)sub_1C4816F98(v114, v115, v116, v376, 0);
LABEL_110:
      v124 = v118;
      if ((_BYTE)v378)
        v125 = v378 - 15 < 0x9C;
      else
        v125 = (*(_DWORD *)(v379 + 8) & 0xFE) == 18;
      if (v125)
        v126 = 149;
      else
        v126 = 146;
      v127 = *(_QWORD *)(v370 + 832);
      if (v127)
        v128 = *(unsigned __int16 *)(v127 + 8);
      else
        v128 = 0;
      v24 = sub_1C636D0C8(v370, (const char *)v126, v369, v117, v124, (uint64_t *)v383, v384, v128);
      v32 = v129;
      *(_QWORD *)&v380 = v24;
      DWORD2(v380) = v129;
      if (v383 != v385)
      {
        v130 = v24;
        free(v383);
        v24 = v130;
      }
      v20 = v381;
LABEL_13:
      v34 = (void **)(v24[5] + 16 * v32);
      v36 = (llvm *)*v34;
      v35 = (uint64_t)v34[1];
      v378 = v36;
      v379 = v35;
      v37 = v36;
      if (v20 == v36)
      {
        if (v20 || v35 == v382)
          return v24;
      }
      else if ((_BYTE)v36)
      {
        if (v36 - 15 < 0x9C)
        {
LABEL_21:
          v38 = (uint64_t)v24;
          if (v20)
          {
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v381);
            v44 = v43;
            v37 = v378;
          }
          else
          {
            ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v381);
            v44 = v54;
          }
          v55 = (uint64_t)v369;
          if (v37)
            v56 = sub_1C47A8C74((unsigned __int8 *)&v378);
          else
            v56 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v378);
          if (ExtendedSizeInBits != v56 || v44 != v57)
          {
            v131 = sub_1C52B71D4((unsigned __int8 *)&v378);
            if (v131 == sub_1C52B71D4((unsigned __int8 *)&v381))
            {
              v133 = v381;
              v134 = v382;
              v24 = (uint64_t *)v38;
            }
            else
            {
              v141 = *(llvm::LLVMContext **)(v33 + 56);
              if ((_BYTE)v378)
              {
                LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v378);
                v145 = 0;
                v144 = 0;
              }
              else
              {
                EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v379 + 24), 0, v132);
                v144 = v143;
                v145 = EVT & 0xFFFFFFFFFFFFFF00;
              }
              v146 = v145 | EVT;
              v147 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)&v381);
              v148 = (llvm *)sub_1C47AC578(v141, v146, v144, v147);
              v150 = v149;
              v378 = v148;
              v379 = v149;
              v151 = *((_QWORD *)&v380 + 1);
              v152 = sub_1C6366C9C(v33, 0, (uint64_t)v369, 0);
              v155 = *(_QWORD *)(v33 + 832);
              if (v155)
                LOWORD(v155) = *(_WORD *)(v155 + 8);
              v24 = sub_1C5D56C70(v33, 151, v369, v148, v150, v38, v151, v154, v152, v153, v155);
              DWORD2(v380) = v156;
              v133 = v381;
              v134 = v382;
              if (v378 == v381 && ((_BYTE)v378 || v379 == v382))
                return v24;
              v55 = (uint64_t)v369;
            }
            return (uint64_t *)sub_1C63663BC(v33, (uint64_t)v24, *((uint64_t *)&v380 + 1), v55, (uint64_t)v133, v134);
          }
          v58 = v381;
          v59 = v382;
          v60 = *((_QWORD *)&v380 + 1);
          v63 = *(_QWORD *)(v33 + 832);
          if (v63)
            v62 = *(_WORD *)(v63 + 8);
          else
            v62 = 0;
          v64 = v33;
          v65 = 216;
          v66 = v369;
LABEL_55:
          v70 = (uint64_t *)v38;
          return sub_1C5D52060(v64, v65, v66, v58, v59, (uint64_t)v70, v60, v62);
        }
        v38 = (uint64_t)v24;
        v39 = sub_1C47A8C74((unsigned __int8 *)&v378);
        v41 = v40;
        v20 = v381;
LABEL_32:
        if (v20)
          v52 = sub_1C47A8C74((unsigned __int8 *)&v381);
        else
          v52 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v381);
        if (v39 == v52 && v41 == (_DWORD)v53)
        {
          v58 = v381;
          if ((_BYTE)v381)
          {
            if (*(_QWORD *)(v31 + 8 * v381 + 96))
            {
              v59 = v382;
              v60 = *((_QWORD *)&v380 + 1);
              v61 = *(_QWORD *)(v33 + 832);
              if (v61)
                v62 = *(_WORD *)(v61 + 8);
              else
                v62 = 0;
              v66 = v369;
              v64 = v33;
              v65 = 216;
              goto LABEL_55;
            }
          }
        }
        if (sub_1C612FE00((llvm::EVT *)&v381, v53) != 1)
        {
          if ((_BYTE)v381)
            v80 = sub_1C47A8C74((unsigned __int8 *)&v381);
          else
            v80 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v381);
          v135 = v80;
          v136 = v81;
          v137 = v369;
          if ((_BYTE)v378)
            v138 = sub_1C47A8C74((unsigned __int8 *)&v378);
          else
            v138 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v378);
          if (v135 == v138 && v136 == v139)
          {
            v58 = v381;
            v59 = v382;
            v60 = *((_QWORD *)&v380 + 1);
            v140 = *(_QWORD *)(v33 + 832);
            if (v140)
              v62 = *(_WORD *)(v140 + 8);
            else
              v62 = 0;
            v64 = v33;
            v65 = 216;
            v66 = v369;
            goto LABEL_55;
          }
          v222 = (char)v378;
          if (v381 == v378)
          {
            if ((_BYTE)v381 || v382 == v379)
              goto LABEL_391;
            v383 = v378;
            v384 = v379;
          }
          else
          {
            v383 = v378;
            v384 = v379;
            if ((_BYTE)v381)
            {
              v223 = sub_1C47A8C74((unsigned __int8 *)&v381);
LABEL_384:
              v290 = v223;
              v291 = v224;
              if (v222)
                v292 = sub_1C47A8C74((unsigned __int8 *)&v383);
              else
                v292 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v383);
              if ((v291 != 1 || v293 == 1) && v290 < v292)
              {
                if ((_BYTE)v381)
                  v294 = (llvm::LLVMContext *)sub_1C47A8C74((unsigned __int8 *)&v381);
                else
                  v294 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v381);
                if ((int)v294 <= 31)
                {
                  switch((_DWORD)v294)
                  {
                    case 1:
                      v310 = 0;
                      v311 = 0;
                      v312 = 2;
LABEL_479:
                      v33 = v370;
LABEL_480:
                      v137 = v369;
                      goto LABEL_481;
                    case 0x10:
                      v310 = 0;
                      v311 = 0;
                      v312 = 4;
                      goto LABEL_479;
                    case 8:
                      v310 = 0;
                      v311 = 0;
                      v312 = 3;
                      goto LABEL_479;
                  }
                }
                else
                {
                  switch((_DWORD)v294)
                  {
                    case 0x20:
                      v310 = 0;
                      v311 = 0;
                      v312 = 5;
LABEL_481:
                      v359 = (llvm *)(v312 | v310);
                      v360 = *(_QWORD *)(v33 + 832);
                      if (v360)
                        v361 = *(_WORD *)(v360 + 8);
                      else
                        v361 = 0;
                      v362 = sub_1C5D52060(v33, 201, v137, v359, v311, v38, *((unint64_t *)&v380 + 1), v361);
                      DWORD2(v380) = v363;
                      return (uint64_t *)sub_1C6367DA8(v33, (uint64_t)v381, v382, (uint64_t)v362, *((uint64_t *)&v380 + 1));
                    case 0x40:
                      v310 = 0;
                      v311 = 0;
                      v312 = 6;
                      goto LABEL_479;
                    case 0x80:
                      v310 = 0;
                      v311 = 0;
                      v312 = 7;
                      goto LABEL_479;
                  }
                }
                v33 = v370;
                ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v370 + 56), v294);
                v311 = v365;
                v310 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
                v312 = ExtendedIntegerVT;
                goto LABEL_480;
              }
LABEL_391:
              v295 = *(llvm::LLVMContext **)(v33 + 56);
              v383 = "non-trivial scalar-to-vector conversion";
              v385[8] = 259;
              sub_1C5D385E0(v295, v21, (uint64_t)&v383);
              return sub_1C61312D0(v33, v381, v382);
            }
          }
          v223 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v381);
          goto LABEL_384;
        }
        if ((_BYTE)v381)
        {
          v221 = sub_1C47F37A0((unsigned __int8 *)&v381);
          v220 = 0;
          v219 = 0;
        }
        else
        {
          v217 = llvm::EVT::getEVT(*(llvm::EVT **)(v382 + 24), 0, v79);
          v219 = (uint64_t)v218;
          v220 = v217 & 0xFFFFFFFFFFFFFF00;
          v221 = v217;
        }
        v280 = v369;
        v383 = (void *)(v220 | v221);
        v384 = v219;
        if (sub_1C612FE00((llvm::EVT *)&v381, v218) != 1)
        {
LABEL_471:
          v352 = *(_QWORD *)(v33 + 832);
          if (v352)
            v353 = *(unsigned __int16 *)(v352 + 8);
          else
            v353 = 0;
          return sub_1C636D0C8(v33, (const char *)0x92, v280, v381, v382, (uint64_t *)&v380, 1, v353);
        }
        v281 = v378;
        if (v378 == v221)
        {
          if (v221 || v219 == v379)
            goto LABEL_471;
        }
        else if (v221)
        {
          v299 = sub_1C47A8C74((unsigned __int8 *)&v383);
          v301 = v300;
          v281 = v378;
          goto LABEL_402;
        }
        v299 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v383);
        v301 = v302;
LABEL_402:
        if (v281)
          v303 = sub_1C47A8C74((unsigned __int8 *)&v378);
        else
          v303 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v378);
        if (v299 == v303 && v301 == v304)
        {
          v313 = *(_QWORD *)(v33 + 832);
          if (v313)
            v314 = *(_WORD *)(v313 + 8);
          else
            v314 = 0;
          v315 = (uint64_t)sub_1C5D52060(v33, 216, v369, (llvm *)v383, v384, v38, *((unint64_t *)&v380 + 1), v314);
          goto LABEL_470;
        }
        if ((_BYTE)v381)
        {
          if (((_BYTE)v381 + 104) >= 0x13u
            && ((_BYTE)v381 - 8) >= 7u
            && ((_BYTE)v381 - 75) >= 0x2Du)
          {
LABEL_419:
            v315 = sub_1C63663BC(v33, v38, *((uint64_t *)&v380 + 1), (uint64_t)v280, (uint64_t)v383, v384);
LABEL_470:
            *(_QWORD *)&v380 = v315;
            DWORD2(v380) = v316;
            goto LABEL_471;
          }
        }
        else
        {
          if ((*(_DWORD *)(v382 + 8) & 0xFE) == 0x12)
            v351 = *(unsigned __int8 *)(**(_QWORD **)(v382 + 16) + 8);
          else
            v351 = *(_DWORD *)(v382 + 8);
          v280 = v369;
          v33 = v370;
          if (v351 > 6)
            goto LABEL_419;
        }
        v315 = sub_1C5D3F69C(v33, v38, *((uint64_t *)&v380 + 1), (uint64_t)v280, (uint64_t)v383, v384);
        goto LABEL_470;
      }
      if ((*(_DWORD *)(v35 + 8) & 0xFE) == 0x12)
        goto LABEL_21;
      v38 = (uint64_t)v24;
      v39 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v378);
      v41 = v51;
      goto LABEL_32;
    }
    v119 = *(llvm::LLVMContext **)(v370 + 56);
    v120 = sub_1C6131264((unsigned __int8 *)&v378, v105, v106);
    v122 = v121;
    v123 = sub_1C52B71D4((unsigned __int8 *)&v378);
    v117 = (llvm *)sub_1C47AC578(v119, v120, v122, (llvm::Type *)(v123 & 0xFFFFFFFF00000000 | (v104 * v123)));
    goto LABEL_110;
  }
  v23 = a7;
  v21 = a8;
  v22 = a3;
  if ((*(_DWORD *)(a7 + 8) & 0xFE) == 0x12)
    goto LABEL_11;
  v24 = *(uint64_t **)a3;
  v25 = *((_QWORD *)a3 + 1);
  if (a4 > 1)
  {
    v26 = a4;
    if (*(_DWORD *)(a7 + 8) == 13)
    {
LABEL_6:
      v372 = v25;
      v28 = sub_1C47A8C74(&v375);
      if ((_DWORD)v27 == 1)
      if ((_BYTE)v373)
        v29 = sub_1C47A8C74((unsigned __int8 *)&v373);
      else
        v29 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
      v71 = v29;
      if ((_DWORD)v30 == 1)
      v72 = 1 << (__clz(v26) ^ 0x1F);
      if ((v26 & ((_DWORD)v26 - 1)) != 0)
        v73 = v72;
      else
        v73 = v26;
      v74 = v73 * v28;
      if (v73 * v28 == v71)
      {
        v76 = v373;
        v75 = v374;
        goto LABEL_159;
      }
      if (v74 <= 31)
      {
        switch(v74)
        {
          case 1:
            v77 = 0;
            v75 = 0;
            v78 = 2;
            goto LABEL_158;
          case 16:
            v77 = 0;
            v75 = 0;
            v78 = 4;
            goto LABEL_158;
          case 8:
            v77 = 0;
            v75 = 0;
            v78 = 3;
            goto LABEL_158;
        }
      }
      else
      {
        switch(v74)
        {
          case 32:
            v77 = 0;
            v75 = 0;
            v78 = 5;
LABEL_158:
            v76 = (llvm *)(v78 | v77);
LABEL_159:
            v383 = 0;
            LODWORD(v384) = 0;
            v157 = (llvm::LLVMContext *)(v74 >> 1);
            v366 = v28;
            if (v74 >> 1 <= 0x1F)
            {
              switch((_DWORD)v157)
              {
                case 1:
                  v158 = 0;
                  v159 = 0;
                  v160 = 2;
                  goto LABEL_170;
                case 0x10:
                  v158 = 0;
                  v159 = 0;
                  v160 = 4;
                  goto LABEL_170;
                case 8:
                  v158 = 0;
                  v159 = 0;
                  v160 = 3;
                  goto LABEL_170;
              }
            }
            else
            {
              switch((_DWORD)v157)
              {
                case 0x20:
                  v158 = 0;
                  v159 = 0;
                  v160 = 5;
                  goto LABEL_170;
                case 0x40:
                  v158 = 0;
                  v159 = 0;
                  v160 = 6;
                  goto LABEL_170;
                case 0x80:
                  v158 = 0;
                  v159 = 0;
                  v160 = 7;
                  goto LABEL_170;
              }
            }
            v296 = v73;
            v297 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v370 + 56), v157);
            v73 = v296;
            v159 = v298;
            v158 = v297 & 0xFFFFFFFFFFFFFF00;
            v160 = v297;
LABEL_170:
            v161 = (llvm *)(v160 | v158);
            v367 = v73;
            if (v73 < 3)
            {
              v173 = *(_QWORD *)(v370 + 832);
              if (v173)
                v174 = *(_WORD *)(v173 + 8);
              else
                v174 = 0;
              v166 = v369;
              v383 = sub_1C5D52060(v370, 216, v369, v161, v159, *(_QWORD *)v22, *((_QWORD *)v22 + 1), v174);
              LODWORD(v384) = v175;
              v176 = *(_QWORD *)(v370 + 832);
              if (v176)
                v177 = *(_WORD *)(v176 + 8);
              else
                v177 = 0;
              v165 = v370;
              v170 = sub_1C5D52060(v370, 216, v369, v161, v159, *((_QWORD *)v22 + 2), *((_QWORD *)v22 + 3), v177);
            }
            else
            {
              v162 = v76;
              v163 = v75;
              v164 = v73 >> 1;
              v166 = v369;
              v165 = v370;
              v383 = (void *)sub_1C5D11328(v370, v369, v22, v164, v375, v160 | v158, v159, v21, 0, 0);
              LODWORD(v384) = v167;
              v168 = &v22[v164];
              v169 = v164;
              v75 = v163;
              v76 = v162;
              v170 = (uint64_t *)sub_1C5D11328(v370, v369, v168, v169, v375, v161, v159, v21, 0, 0);
            }
            v178 = v170;
            if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v165 + 40) + 40) + 272))
            {
              v179 = v383;
              v180 = v384;
              v383 = v170;
              LODWORD(v384) = v171;
            }
            else
            {
              v179 = v170;
              v180 = v171;
              v178 = v383;
            }
            v181 = *(_QWORD *)(v370 + 832);
            if (v181)
              LOWORD(v181) = *(_WORD *)(v181 + 8);
            v182 = sub_1C5D56C70(v370, 54, v166, v76, v75, (uint64_t)v178, v384, v172, (uint64_t)v179, v180, v181);
            v24 = v182;
            v184 = v183;
            v185 = v26 - v367;
            if (v26 <= v367)
            {
              v46 = v370;
LABEL_186:
              v25 = v184 | v372 & 0xFFFFFFFF00000000;
              v50 = v369;
              goto LABEL_187;
            }
            v212 = (llvm::LLVMContext *)(v185 * v366);
            v213 = v182;
            if ((int)v212 <= 31)
            {
              switch((_DWORD)v212)
              {
                case 1:
                  v214 = 0;
                  v215 = 0;
                  v216 = 2;
                  goto LABEL_424;
                case 0x10:
                  v214 = 0;
                  v215 = 0;
                  v216 = 4;
                  goto LABEL_424;
                case 8:
                  v214 = 0;
                  v215 = 0;
                  v216 = 3;
                  goto LABEL_424;
              }
            }
            else
            {
              switch((_DWORD)v212)
              {
                case 0x20:
                  v214 = 0;
                  v215 = 0;
                  v216 = 5;
                  goto LABEL_424;
                case 0x40:
                  v214 = 0;
                  v215 = 0;
                  v216 = 6;
                  goto LABEL_424;
                case 0x80:
                  v214 = 0;
                  v215 = 0;
                  v216 = 7;
                  goto LABEL_424;
              }
            }
            v354 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v370 + 56), v212);
            v215 = v355;
            v214 = v354 & 0xFFFFFFFFFFFFFF00;
            v216 = v354;
LABEL_424:
            v46 = v370;
            v319 = (void *)sub_1C5D11328(v370, v369, &v22[v367], v185, v375, v216 | v214, v215, v21, a9, 0);
            v383 = v213;
            LODWORD(v384) = v184;
            if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v370 + 40) + 40) + 272))
            {
              v321 = (uint64_t)v213;
              v383 = v319;
              LODWORD(v384) = v320;
            }
            else
            {
              v321 = (uint64_t)v319;
              v184 = v320;
            }
            v322 = v184;
            v323 = (llvm::LLVMContext *)(v366 * v26);
            if ((int)v323 <= 31)
            {
              switch((_DWORD)v323)
              {
                case 1:
                  v324 = 0;
                  v325 = 0;
                  v326 = 2;
                  goto LABEL_438;
                case 0x10:
                  v324 = 0;
                  v325 = 0;
                  v326 = 4;
                  goto LABEL_438;
                case 8:
                  v324 = 0;
                  v325 = 0;
                  v326 = 3;
                  goto LABEL_438;
              }
            }
            else
            {
              switch((_DWORD)v323)
              {
                case 0x20:
                  v324 = 0;
                  v325 = 0;
                  v326 = 5;
LABEL_438:
                  v327 = (llvm *)(v326 | v324);
                  v328 = *(_QWORD *)(v370 + 832);
                  if (v328)
                    v329 = *(_WORD *)(v328 + 8);
                  else
                    v329 = 0;
                  v330 = sub_1C5D52060(v370, 200, v369, v327, v325, v321, v322, v329);
                  v332 = v331;
                  v334 = sub_1C6131A64((unsigned int *)&v383);
                  if ((_DWORD)v333 == 1)
                  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(v368, (uint64_t)v327, v325, *(_QWORD *)(**(_QWORD **)(v370 + 40) + 40) + 272, 1);
                  v337 = sub_1C6366AB4(v370, (uint64_t)v334, v369, ShiftAmountTy, v336, 0, 0);
                  v340 = *(_QWORD *)(v370 + 832);
                  if (v340)
                    LOWORD(v340) = *(_WORD *)(v340 + 8);
                  v341 = sub_1C5D56C70(v370, 175, v369, v327, v325, (uint64_t)v330, v332, v339, (uint64_t)v337, v338, v340);
                  v343 = v342;
                  v344 = *(_QWORD *)(v370 + 832);
                  if (v344)
                    v345 = *(_WORD *)(v344 + 8);
                  else
                    v345 = 0;
                  v346 = sub_1C5D52060(v370, 199, v369, v327, v325, (uint64_t)v383, v384, v345);
                  v383 = v346;
                  LODWORD(v384) = v348;
                  v349 = *(_QWORD *)(v370 + 832);
                  if (v349)
                    LOWORD(v349) = *(_WORD *)(v349 + 8);
                  v24 = sub_1C5D56C70(v370, 172, v369, v327, v325, (uint64_t)v346, v384, v347, (uint64_t)v341, v343, v349);
                  v184 = v350;
                  goto LABEL_186;
                case 0x40:
                  v324 = 0;
                  v325 = 0;
                  v326 = 6;
                  goto LABEL_438;
                case 0x80:
                  v324 = 0;
                  v325 = 0;
                  v326 = 7;
                  goto LABEL_438;
              }
            }
            v356 = v321;
            v357 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v370 + 56), v323);
            v321 = v356;
            v325 = v358;
            v324 = v357 & 0xFFFFFFFFFFFFFF00;
            v326 = v357;
            goto LABEL_438;
          case 64:
            v77 = 0;
            v75 = 0;
            v78 = 6;
            goto LABEL_158;
          case 128:
            v77 = 0;
            v75 = 0;
            v78 = 7;
            goto LABEL_158;
        }
      }
      v307 = v73;
      v308 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v370 + 56), (llvm::LLVMContext *)(v73 * v28));
      v73 = v307;
      v75 = v309;
      v77 = v308 & 0xFFFFFFFFFFFFFF00;
      v78 = v308;
      goto LABEL_158;
    }
LABEL_25:
    if ((a5 + 104) < 0x13u || (a5 - 8) < 7u || (a5 - 75) <= 0x2Cu)
    {
      v67 = *(_QWORD *)(v370 + 832);
      v68 = v25;
      if (v67)
        v69 = *(_WORD *)(v67 + 8);
      else
        v69 = 0;
      v50 = a2;
      v88 = sub_1C5D52060(v370, 216, a2, (llvm *)0xB, 0, (uint64_t)v24, v25, v69);
      v90 = v89;
      v91 = *(_QWORD *)(v370 + 832);
      if (v91)
        v92 = *(_WORD *)(v91 + 8);
      else
        v92 = 0;
      v93 = sub_1C5D52060(v370, 216, v369, (llvm *)0xB, 0, *((_QWORD *)v22 + 2), *((_QWORD *)v22 + 3), v92);
      v96 = (uint64_t)v93;
      v97 = v94;
      if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v370 + 40) + 40) + 272))
        v98 = 1;
      else
        v98 = a6 == 14;
      if (v98)
      {
        v99 = (uint64_t)v88;
        v100 = v90;
      }
      else
      {
        v99 = (uint64_t)v93;
        v100 = v94;
        v96 = (uint64_t)v88;
        v97 = v90;
      }
      v101 = *(_QWORD *)(v370 + 832);
      if (v101)
        LOWORD(v101) = *(_WORD *)(v101 + 8);
      v46 = v370;
      v24 = sub_1C5D56C70(v370, 54, v369, a6, a7, v96, v97, v95, v99, v100, v101);
      v103 = v68;
      goto LABEL_155;
    }
    v45 = v25;
    v46 = v370;
    v47 = *(llvm::EVT **)(v370 + 56);
    if (v20)
      v48 = sub_1C47A8C74((unsigned __int8 *)&v373);
    else
      v48 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
    v84 = (llvm::LLVMContext *)v48;
    v50 = v369;
    if ((_DWORD)v49 == 1)
    if ((int)v84 <= 31)
    {
      switch((_DWORD)v84)
      {
        case 1:
          v85 = 0;
          v86 = 0;
          v87 = 2;
          goto LABEL_154;
        case 0x10:
          v85 = 0;
          v86 = 0;
          v87 = 4;
          goto LABEL_154;
        case 8:
          v85 = 0;
          v86 = 0;
          v87 = 3;
          goto LABEL_154;
      }
    }
    else
    {
      switch((_DWORD)v84)
      {
        case 0x20:
          v85 = 0;
          v86 = 0;
          v87 = 5;
LABEL_154:
          v24 = (uint64_t *)sub_1C5D11328(v370, v369, v22, v26, v375, v87 | v85, v86, v21, a9, 0);
          v103 = v45;
LABEL_155:
          v25 = v103 & 0xFFFFFFFF00000000 | v102;
          goto LABEL_187;
        case 0x40:
          v85 = 0;
          v86 = 0;
          v87 = 6;
          goto LABEL_154;
        case 0x80:
          v85 = 0;
          v86 = 0;
          v87 = 7;
          goto LABEL_154;
      }
    }
    v305 = llvm::EVT::getExtendedIntegerVT(v47, v84);
    v86 = v306;
    v85 = v305 & 0xFFFFFFFFFFFFFF00;
    v87 = v305;
    goto LABEL_154;
  }
LABEL_30:
  v50 = a2;
  v46 = v370;
LABEL_187:
  v186 = v24[5] + 16 * v25;
  v188 = *(llvm **)v186;
  v187 = *(_QWORD *)(v186 + 8);
  v381 = v188;
  v382 = v187;
  if (v373 != v188)
  {
    if ((_BYTE)v188)
    {
      v189 = ((_BYTE)v188 - 120) >= 0x20u && ((_BYTE)v188 - 2) >= 6u;
      if (v189 && ((_BYTE)v188 - 15) >= 0x3Cu)
        goto LABEL_262;
LABEL_203:
      if ((_BYTE)v373)
      {
        v194 = v373 - 8 < 7
            || v373 - 75 < 0x2D
            || ((_BYTE)v373 + 104) < 0x13u;
        if (v373 == v188 || !v194)
          goto LABEL_262;
        v195 = v25;
        v196 = v24;
        v383 = v188;
        v384 = v187;
        v197 = sub_1C47A8C74((unsigned __int8 *)&v373);
      }
      else
      {
        if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
          v199 = *(unsigned __int8 *)(**(_QWORD **)(v374 + 16) + 8);
        else
          v199 = *(_DWORD *)(v374 + 8);
        if (v199 > 6 || !(_BYTE)v188 && v374 == v187)
          goto LABEL_262;
        v195 = v25;
        v196 = v24;
        v383 = v188;
        v384 = v187;
        v197 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
      }
      v200 = v197;
      v201 = v198;
      if ((_BYTE)v188)
        v202 = sub_1C47A8C74((unsigned __int8 *)&v383);
      else
        v202 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v383);
      v24 = v196;
      v25 = v195;
      if ((v201 != 1 || v203 == 1) && v200 < v202)
      {
        v204 = *(llvm::EVT **)(v46 + 56);
        if ((_BYTE)v373)
          v205 = sub_1C47A8C74((unsigned __int8 *)&v373);
        else
          v205 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
        v207 = (llvm::LLVMContext *)v205;
        v208 = (uint64_t)v196;
        if ((_DWORD)v206 == 1)
        {
          v208 = (uint64_t)v196;
        }
        if ((int)v207 <= 31)
        {
          switch((_DWORD)v207)
          {
            case 1:
              v209 = 0;
              v210 = 0;
              v211 = 2;
              goto LABEL_258;
            case 0x10:
              v209 = 0;
              v210 = 0;
              v211 = 4;
              goto LABEL_258;
            case 8:
              v209 = 0;
              v210 = 0;
              v211 = 3;
              goto LABEL_258;
          }
        }
        else
        {
          switch((_DWORD)v207)
          {
            case 0x20:
              v209 = 0;
              v210 = 0;
              v211 = 5;
LABEL_258:
              v225 = (llvm *)(v211 | v209);
              v381 = (llvm *)(v211 | v209);
              v382 = v210;
              v226 = *(_QWORD *)(v46 + 832);
              if (v226)
                v227 = *(_WORD *)(v226 + 8);
              else
                v227 = 0;
              v24 = sub_1C5D52060(v46, 201, v50, v225, v210, v208, v195, v227);
              v25 = v195 & 0xFFFFFFFF00000000 | v228;
              goto LABEL_262;
            case 0x40:
              v209 = 0;
              v210 = 0;
              v211 = 6;
              goto LABEL_258;
            case 0x80:
              v209 = 0;
              v210 = 0;
              v211 = 7;
              goto LABEL_258;
          }
        }
        v317 = llvm::EVT::getExtendedIntegerVT(v204, v207);
        v208 = (uint64_t)v196;
        v210 = v318;
        v209 = v317 & 0xFFFFFFFFFFFFFF00;
        v211 = v317;
        goto LABEL_258;
      }
LABEL_262:
      v229 = v25;
      v230 = (uint64_t)v24;
      if ((_BYTE)v381)
        v231 = sub_1C47A8C74((unsigned __int8 *)&v381);
      else
        v231 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v381);
      v233 = v231;
      v234 = v232;
      if ((_BYTE)v373)
        v235 = sub_1C47A8C74((unsigned __int8 *)&v373);
      else
        v235 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
      v70 = (uint64_t *)v230;
      if (v233 == v235 && v234 == v236)
      {
        v58 = v373;
        v59 = v374;
        v237 = *(_QWORD *)(v46 + 832);
        if (v237)
          v62 = *(_WORD *)(v237 + 8);
        else
          v62 = 0;
        v64 = v46;
        v65 = 216;
LABEL_361:
        v66 = v50;
LABEL_362:
        v60 = v229;
        return sub_1C5D52060(v64, v65, v66, v58, v59, (uint64_t)v70, v60, v62);
      }
      if ((_BYTE)v381)
      {
        if (((_BYTE)v381 - 120) >= 0x20u
          && ((_BYTE)v381 - 2) >= 6u
          && ((_BYTE)v381 - 15) >= 0x3Cu)
        {
          goto LABEL_295;
        }
      }
      else
      {
        v238 = v382;
        v239 = *(_DWORD *)(v382 + 8);
        v240 = v239;
        if ((*(_DWORD *)(v382 + 8) & 0xFE) == 0x12)
          v240 = *(unsigned __int8 *)(**(_QWORD **)(v382 + 16) + 8);
        if (v240 != 13)
          goto LABEL_306;
      }
      if ((_BYTE)v373)
      {
        if (v373 - 120 < 0x20
          || v373 - 2 < 6
          || v373 - 15 < 0x3C)
        {
          v241 = (char)v381;
          if (v373 == v381)
          {
LABEL_285:
            v59 = v374;
            goto LABEL_355;
          }
          v383 = v381;
          v384 = v382;
          v243 = sub_1C47A8C74((unsigned __int8 *)&v373);
          goto LABEL_346;
        }
      }
      else
      {
        v59 = v374;
        if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
          v242 = *(unsigned __int8 *)(**(_QWORD **)(v374 + 16) + 8);
        else
          v242 = *(_DWORD *)(v374 + 8);
        if (v242 == 13)
        {
          v241 = (char)v381;
          if (!(_BYTE)v381 && v374 == v382)
          {
LABEL_355:
            v58 = v373;
            v272 = *(_QWORD *)(v46 + 832);
            if (v272)
              v62 = *(_WORD *)(v272 + 8);
            else
              v62 = 0;
            v64 = v46;
            v65 = 200;
            goto LABEL_361;
          }
          v383 = v381;
          v384 = v382;
          v243 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
LABEL_346:
          v267 = v243;
          v268 = v244;
          if (v241)
            v269 = sub_1C47A8C74((unsigned __int8 *)&v383);
          else
            v269 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v383);
          v70 = (uint64_t *)v230;
          if (v268 == 1 && v270 != 1)
            goto LABEL_285;
          v59 = v374;
          if (v267 >= v269)
            goto LABEL_355;
          if ((a10 & 0xFF00000000) != 0)
          {
            v282 = v381;
            v283 = v382;
            v284 = sub_1C6367494(v46, (uint64_t)v373, v374);
            v287 = *(_QWORD *)(v46 + 832);
            if (v287)
              LOWORD(v287) = *(_WORD *)(v287 + 8);
            v288 = v283;
            v50 = v369;
            v70 = sub_1C5D56C70(v46, a10, v369, v282, v288, v230, v229, v286, v284, v285, v287);
            v229 = v229 & 0xFFFFFFFF00000000 | v289;
            v59 = v374;
          }
          v58 = v373;
LABEL_353:
          v271 = *(_QWORD *)(v46 + 832);
          if (v271)
            v62 = *(_WORD *)(v271 + 8);
          else
            v62 = 0;
          v64 = v46;
          v65 = 201;
          goto LABEL_361;
        }
      }
      if ((_BYTE)v381)
      {
LABEL_295:
        if (((_BYTE)v381 + 104) >= 0x13u
          && ((_BYTE)v381 - 8) >= 7u
          && ((_BYTE)v381 - 75) >= 0x2Du)
        {
          if (v381 != 171)
            goto LABEL_489;
          if ((_BYTE)v373)
          {
            if (v373 - 120 >= 0x20
              && v373 - 2 >= 6
              && v373 - 15 >= 0x3C
              || v373 == v381)
            {
              goto LABEL_489;
            }
            v383 = v381;
            v384 = v382;
            v245 = sub_1C47A8C74((unsigned __int8 *)&v373);
          }
          else
          {
            if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
              v259 = *(unsigned __int8 *)(**(_QWORD **)(v374 + 16) + 8);
            else
              v259 = *(_DWORD *)(v374 + 8);
            if (v259 != 13)
              goto LABEL_489;
            v383 = v381;
            v384 = v382;
            v245 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
          }
          v260 = v245;
          v261 = v246;
          v262 = sub_1C47A8C74((unsigned __int8 *)&v383);
          if ((v261 != 1 || v263 == 1) && v260 < v262)
          {
            v264 = *(_QWORD *)(v46 + 832);
            if (v264)
              v265 = *(_WORD *)(v264 + 8);
            else
              v265 = 0;
            v70 = sub_1C5D52060(v46, 216, v50, (llvm *)6, 0, v230, v229, v265);
            v229 = v229 & 0xFFFFFFFF00000000 | v266;
            v58 = v373;
            v59 = v374;
            goto LABEL_353;
          }
LABEL_489:
          llvm::report_fatal_error((llvm *)"Unknown mismatch in getCopyFromParts!", (const char *)1);
        }
LABEL_309:
        if ((_BYTE)v373)
        {
          if (((_BYTE)v373 + 104) >= 0x13u
            && ((_BYTE)v373 - 8) >= 7u
            && ((_BYTE)v373 - 75) >= 0x2Du)
          {
            goto LABEL_489;
          }
        }
        else
        {
          if ((*(_DWORD *)(v374 + 8) & 0xFE) == 0x12)
            v247 = *(unsigned __int8 *)(**(_QWORD **)(v374 + 16) + 8);
          else
            v247 = *(_DWORD *)(v374 + 8);
          if (v247 > 6)
            goto LABEL_489;
        }
        v248 = *(_QWORD *)(v230 + 40) + 16 * v229;
        v250 = *(void **)v248;
        v249 = *(_QWORD *)(v248 + 8);
        if (v373 == v250)
        {
          v251 = v374;
          if ((_BYTE)v373 || v374 == v249)
          {
LABEL_330:
            v58 = v373;
            v258 = *(_QWORD *)(v46 + 832);
            if (v258)
              v62 = *(_WORD *)(v258 + 8);
            else
              v62 = 0;
            v64 = v46;
            v65 = 215;
            v66 = v50;
            v59 = v251;
            goto LABEL_362;
          }
          v383 = v250;
          v384 = v249;
        }
        else
        {
          v383 = v250;
          v384 = v249;
          if ((_BYTE)v373)
          {
            v252 = sub_1C47A8C74((unsigned __int8 *)&v373);
LABEL_325:
            v254 = v252;
            v255 = v253;
            if ((_BYTE)v250)
              v256 = sub_1C47A8C74((unsigned __int8 *)&v383);
            else
              v256 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v383);
            v70 = (uint64_t *)v230;
            if (v255 == 1 && v257 != 1)
            {
              v251 = v374;
            }
            else
            {
              v251 = v374;
              if (v254 < v256)
              {
                v274 = v373;
                v275 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*v368 + 32))(v368, *(_QWORD *)(**(_QWORD **)(v46 + 40) + 40) + 272, 0);
                v276 = sub_1C6366AB4(v46, 1, v50, (llvm *)v275, 0, 1, 0);
                v279 = *(_QWORD *)(v46 + 832);
                if (v279)
                  LOWORD(v279) = *(_WORD *)(v279 + 8);
                return sub_1C5D56C70(v46, 212, v50, v274, v251, v230, v229, v278, (uint64_t)v276, v277, v279);
              }
            }
            goto LABEL_330;
          }
        }
        v252 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v373);
        goto LABEL_325;
      }
      v238 = v382;
      v239 = *(unsigned __int8 *)(v382 + 8);
LABEL_306:
      if ((v239 & 0xFE) == 0x12)
        v239 = *(unsigned __int8 *)(**(_QWORD **)(v238 + 16) + 8);
      if (v239 > 6)
        goto LABEL_489;
      goto LABEL_309;
    }
LABEL_200:
    if ((*(_DWORD *)(v187 + 8) & 0xFE) == 0x12)
      v191 = *(unsigned __int8 *)(**(_QWORD **)(v187 + 16) + 8);
    else
      v191 = *(_DWORD *)(v187 + 8);
    if (v191 != 13)
      goto LABEL_262;
    goto LABEL_203;
  }
  if ((_BYTE)v188)
    v190 = 1;
  else
    v190 = v187 == v374;
  if (!v190)
    goto LABEL_200;
  return v24;
}

void sub_1C5D12FF0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, const llvm::APInt *a5, uint64_t *a6, uint64_t *a7, unsigned __int8 *a8, unsigned int a9)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  int v40;
  int v41;
  unint64_t v43;
  uint64_t v44;
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  void *v51[2];
  _QWORD v52[18];

  v52[16] = *MEMORY[0x1E0C80C00];
  v13 = a4[3];
  v14 = *(unsigned int *)(a1 + 120);
  v51[0] = v52;
  v51[1] = (void *)0x800000000;
  v43 = v14;
  sub_1C4825C80((unsigned int *)v51, v14, 0, 0);
  v44 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v44)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v15);
      if (*(_BYTE *)(a1 + 180))
        v19 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v13 + 592))(v13, a4[7], *(unsigned int *)(a1 + 176), *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + v15), 0);
      else
        v19 = *(_BYTE *)(*(_QWORD *)(a1 + 80) + v15);
      v20 = v19;
      if (a9 == 200)
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 1280))(v13, a2, a3, v19, 0))
        {
          a9 = 199;
        }
        else
        {
          a9 = 200;
        }
      }
      sub_1C5D13344((uint64_t)a4, a5, a2, (a3 + v15), (unint64_t)v51[0] + 16 * v16, v18, v20, a8, *(_QWORD *)(a1 + 176), a9);
      v16 += v18;
      ++v15;
    }
    while (v44 != v15);
  }
  v48 = v50;
  v49 = 0x800000000;
  sub_1C4825C80((unsigned int *)&v48, v43, 0, 0);
  if ((_DWORD)v43)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = *a6;
      v25 = a6[1];
      v26 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + v22);
      v27 = *(_QWORD *)((char *)v51[0] + v23);
      v28 = *(_QWORD *)((char *)v51[0] + v23 + 8);
      if (a7)
      {
        v34 = sub_1C6132BA0((uint64_t)a4, v24, v25, a5, v26, v27, v28, v21, *a7, a7[1]);
        *a7 = (uint64_t)v34;
        *((_DWORD *)a7 + 2) = 1;
      }
      else
      {
        v29 = *(_QWORD *)(v27 + 40) + 16 * v28;
        v30 = sub_1C5D428B0((uint64_t)a4, v26, *(llvm **)v29, *(_QWORD *)(v29 + 8));
        v33 = a4[104];
        if (v33)
          LOWORD(v33) = *(_WORD *)(v33 + 8);
        v34 = sub_1C5D58E08((uint64_t)a4, (const char *)0x31, a5, (llvm *)1, 0, v24, v25, v32, v30, v31, v27, v28, SHIDWORD(v28), v33);
      }
      v35 = (char *)v48 + v23;
      *(_QWORD *)v35 = v34;
      *((_DWORD *)v35 + 2) = 0;
      v23 += 16;
      v22 += 4;
    }
    while (16 * v43 != v23);
  }
  if (a7 || (_DWORD)v43 == 1)
  {
    v38 = v48;
    v39 = (char *)v48 + 16 * (v43 - 1);
    v40 = *((_DWORD *)v39 + 2);
    *a6 = *(_QWORD *)v39;
    *((_DWORD *)a6 + 2) = v40;
  }
  else
  {
    v36 = a4[104];
    if (v36)
      v37 = *(unsigned __int16 *)(v36 + 8);
    else
      v37 = 0;
    *a6 = (uint64_t)sub_1C636D0C8((uint64_t)a4, (const char *)2, a5, (llvm *)1, 0, (uint64_t *)v48, v49, v37);
    *((_DWORD *)a6 + 2) = v41;
    v38 = v48;
  }
  if (v38 != v50)
    free(v38);
  if (v51[0] != v52)
    free(v51[0]);
}

void sub_1C5D13344(uint64_t a1, const llvm::APInt *a2, uint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned __int8 a7, unsigned __int8 *a8, uint64_t a9, unsigned int a10)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  unint64_t v28;
  uint64_t ExtendedSizeInBits;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t *v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  llvm *v37;
  const llvm::APInt *v38;
  llvm::EVT *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  const llvm::APInt *v48;
  __int16 v49;
  uint64_t v50;
  const char *v51;
  llvm::EVT *v52;
  unsigned int VectorTypeBreakdown;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  llvm::LLVMContext *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  llvm::LLVMContext *v72;
  unint64_t v73;
  uint64_t v74;
  llvm *v75;
  uint64_t v76;
  const llvm::APInt *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  unint64_t EVT;
  void *v89;
  BOOL v90;
  unint64_t v91;
  uint64_t v92;
  __int16 v93;
  BOOL v94;
  unsigned __int8 v95;
  unint64_t v96;
  void *v97;
  unsigned int v98;
  unint64_t v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  llvm::LLVMContext *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  llvm *v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  void *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  BOOL v133;
  llvm::LLVMContext *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  llvm *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  llvm::LLVMContext *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  llvm::Type *v151;
  uint64_t v152;
  llvm *v153;
  uint64_t v154;
  __int16 v155;
  unsigned int v156;
  uint64_t *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  llvm *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  int v169;
  char *v170;
  unint64_t v171;
  llvm *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  unsigned int v179;
  llvm *v180;
  uint64_t v181;
  __int16 v182;
  unsigned int v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  __int16 v189;
  unsigned int v190;
  uint64_t v191;
  llvm *v192;
  uint64_t v193;
  int v194;
  llvm::LLVMContext *v195;
  uint64_t v196;
  __int16 v197;
  unint64_t v198;
  llvm::EVT *v199;
  uint64_t v200;
  const char *v201;
  llvm::LLVMContext *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  int v207;
  char v208;
  _QWORD *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  BOOL v218;
  const llvm::APInt *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  llvm *v223;
  uint64_t v224;
  __int16 v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  llvm::LLVMContext *v229;
  const llvm::APInt *v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  llvm *v241;
  unint64_t v242;
  int v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  int v251;
  uint64_t v252;
  __int16 v253;
  int v254;
  uint64_t v255;
  __int16 v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  BOOL v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  llvm *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t ExtendedIntegerVT;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  llvm *v277;
  uint64_t v278;
  __int16 v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned int v291;
  uint64_t v292;
  unsigned int v293;
  int v294;
  int v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v302;
  uint64_t v303;
  unsigned __int8 v304;
  llvm *v305;
  uint64_t v306;
  unsigned int v307;
  unsigned __int8 v308;
  llvm *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unsigned __int8 v313;
  void *v314[2];
  _WORD v315[64];
  uint64_t v316;

  v16 = a1;
  v316 = *MEMORY[0x1E0C80C00];
  v304 = a7;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 1816))(*(_QWORD *)(a1 + 24), a1) & 1) != 0)
    return;
  v17 = (uint64_t *)(*(_QWORD *)(a3 + 40) + 16 * a4);
  v18 = v17[1];
  v302 = *v17;
  v303 = v18;
  v300 = v16;
  if ((_BYTE)v302)
  {
    if (v302 - 15 < 0x9C)
      goto LABEL_4;
LABEL_11:
    v294 = sub_1C47A8C74(&v304);
    if ((_DWORD)v27 == 1)
    {
      if (!a6)
        return;
    }
    else if (!a6)
    {
      return;
    }
    if (v304 == v302 && (v304 || !v303))
      goto LABEL_46;
    v295 = v304;
    v299 = a5;
    v28 = v294 * a6;
    if ((_BYTE)v302)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v302);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v302);
    v36 = ExtendedSizeInBits;
    if ((_DWORD)v30 == 1)
    if (v36 < v28)
    {
      v37 = (llvm *)v304;
      v38 = a2;
      if ((v304 + 104) >= 0x13u
        && (v304 - 8) >= 7u
        && (v304 - 75) > 0x2Cu)
      {
        goto LABEL_36;
      }
      if ((_BYTE)v302)
      {
        if ((v302 + 104) >= 0x13u
          && (v302 - 8) >= 7u
          && (v302 - 75) >= 0x2Du)
        {
LABEL_36:
          if ((_BYTE)v302)
          {
            if ((v302 + 104) >= 0x13u
              && (v302 - 8) >= 7u
              && (v302 - 75) >= 0x2Du)
            {
              goto LABEL_215;
            }
            v39 = *(llvm::EVT **)(v16 + 56);
            v40 = sub_1C47A8C74((unsigned __int8 *)&v302);
            goto LABEL_77;
          }
          v56 = v303;
          v57 = *(unsigned __int8 *)(v303 + 8);
LABEL_73:
          if ((v57 & 0xFE) == 0x12)
            v57 = *(unsigned __int8 *)(**(_QWORD **)(v56 + 16) + 8);
          if (v57 >= 7)
          {
LABEL_215:
            if ((int)v28 <= 31)
            {
              switch((_DWORD)v28)
              {
                case 1:
                  v184 = 0;
                  v62 = 0;
                  v185 = 2;
                  goto LABEL_226;
                case 0x10:
                  v184 = 0;
                  v62 = 0;
                  v185 = 4;
                  goto LABEL_226;
                case 8:
                  v184 = 0;
                  v62 = 0;
                  v185 = 3;
                  goto LABEL_226;
              }
            }
            else
            {
              switch((_DWORD)v28)
              {
                case 0x20:
                  v184 = 0;
                  v62 = 0;
                  v185 = 5;
LABEL_226:
                  v111 = (llvm *)(v185 | v184);
                  v302 = v185 | v184;
                  v303 = v62;
                  v186 = *(_QWORD *)(v16 + 832);
                  if (v186)
                    v113 = *(_WORD *)(v186 + 8);
                  else
                    v113 = 0;
                  v114 = v16;
                  v115 = a10;
LABEL_230:
                  a3 = (uint64_t)sub_1C5D52060(v114, v115, v38, v111, v62, a3, a4, v113);
                  if (v304 == 171)
                  {
                    v188 = *(_QWORD *)(v16 + 832);
                    if (v188)
                      v189 = *(_WORD *)(v188 + 8);
                    else
                      v189 = 0;
                    a3 = (uint64_t)sub_1C5D52060(v16, 216, v38, (llvm *)0xAB, 0, a3, a4 & 0xFFFFFFFF00000000 | v187, v189);
                    a4 = v190 | a4 & 0xFFFFFFFF00000000;
                  }
                  else
                  {
                    a4 = a4 & 0xFFFFFFFF00000000 | v187;
                  }
                  goto LABEL_236;
                case 0x40:
                  v184 = 0;
                  v62 = 0;
                  v185 = 6;
                  goto LABEL_226;
                case 0x80:
                  v184 = 0;
                  v62 = 0;
                  v185 = 7;
                  goto LABEL_226;
              }
            }
            ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v16 + 56), (llvm::LLVMContext *)v28);
            v62 = v274;
            v184 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
            v185 = ExtendedIntegerVT;
            goto LABEL_226;
          }
          v39 = *(llvm::EVT **)(v16 + 56);
          v40 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v302);
LABEL_77:
          v66 = (llvm::LLVMContext *)v40;
          if ((_DWORD)v41 == 1)
          if ((int)v66 <= 31)
          {
            switch((_DWORD)v66)
            {
              case 1:
                v67 = 0;
                v68 = 0;
                v69 = 2;
                goto LABEL_211;
              case 0x10:
                v67 = 0;
                v68 = 0;
                v69 = 4;
                goto LABEL_211;
              case 8:
                v67 = 0;
                v68 = 0;
                v69 = 3;
                goto LABEL_211;
            }
          }
          else
          {
            switch((_DWORD)v66)
            {
              case 0x20:
                v67 = 0;
                v68 = 0;
                v69 = 5;
LABEL_211:
                v180 = (llvm *)(v69 | v67);
                v302 = v69 | v67;
                v303 = v68;
                v181 = *(_QWORD *)(v16 + 832);
                v38 = a2;
                if (v181)
                  v182 = *(_WORD *)(v181 + 8);
                else
                  v182 = 0;
                a3 = (uint64_t)sub_1C5D52060(v16, 216, a2, v180, v68, a3, a4, v182);
                a4 = a4 & 0xFFFFFFFF00000000 | v183;
                goto LABEL_215;
              case 0x40:
                v67 = 0;
                v68 = 0;
                v69 = 6;
                goto LABEL_211;
              case 0x80:
                v67 = 0;
                v68 = 0;
                v69 = 7;
                goto LABEL_211;
            }
          }
          v275 = llvm::EVT::getExtendedIntegerVT(v39, v66);
          v68 = v276;
          v67 = v275 & 0xFFFFFFFFFFFFFF00;
          v69 = v275;
          goto LABEL_211;
        }
      }
      else
      {
        v56 = v303;
        v57 = *(_DWORD *)(v303 + 8);
        v64 = v57;
        if ((*(_DWORD *)(v303 + 8) & 0xFE) == 0x12)
          v64 = *(unsigned __int8 *)(**(_QWORD **)(v303 + 16) + 8);
        if (v64 > 6)
          goto LABEL_73;
      }
      v65 = *(_QWORD *)(v16 + 832);
      if (v65)
        v49 = *(_WORD *)(v65 + 8);
      else
        v49 = 0;
      v58 = v16;
      v59 = 215;
      v48 = a2;
LABEL_101:
      a3 = (uint64_t)sub_1C5D52060(v58, v59, v48, v37, 0, a3, a4, v49);
      a4 = a4 & 0xFFFFFFFF00000000 | v87;
      goto LABEL_236;
    }
    if ((_BYTE)v302)
      v42 = sub_1C47A8C74((unsigned __int8 *)&v302);
    else
      v42 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v302);
    v46 = v42;
    if ((_DWORD)v43 == 1)
    if (v294 == v46)
    {
      v37 = (llvm *)v304;
      v47 = *(_QWORD *)(v16 + 832);
      v48 = a2;
      if (v47)
        v49 = *(_WORD *)(v47 + 8);
      else
        v49 = 0;
      v58 = v16;
      v59 = 216;
      goto LABEL_101;
    }
    if ((_BYTE)v302)
      v50 = sub_1C47A8C74((unsigned __int8 *)&v302);
    else
      v50 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v302);
    v60 = v50;
    if ((_DWORD)v51 == 1)
    if (v60 <= v28)
    {
LABEL_236:
      v191 = *(_QWORD *)(a3 + 40) + 16 * a4;
      v192 = *(llvm **)v191;
      v193 = *(_QWORD *)(v191 + 8);
      v302 = (uint64_t)v192;
      v303 = v193;
      v194 = v192;
      if (a6 == 1)
      {
        if (v295 == v192 && (v295 || !v193))
        {
          v206 = v299;
        }
        else
        {
          v195 = *(llvm::LLVMContext **)(v16 + 56);
          v314[0] = "scalar-to-vector conversion failed";
          v315[8] = 259;
          sub_1C5D385E0(v195, a8, (uint64_t)v314);
          v196 = *(_QWORD *)(v16 + 832);
          if (v196)
            v197 = *(_WORD *)(v196 + 8);
          else
            v197 = 0;
          v206 = v299;
          a3 = (uint64_t)sub_1C5D52060(v16, 216, a2, (llvm *)v304, 0, a3, a4, v197);
          LODWORD(a4) = v207;
        }
        *(_QWORD *)v206 = a3;
        *(_DWORD *)(v206 + 8) = a4;
        return;
      }
      v290 = v299 + 16 * a6;
      if ((a6 & (a6 - 1)) == 0)
      {
        v198 = v299;
        goto LABEL_244;
      }
      v208 = __clz(a6) ^ 0x1F;
      v292 = (1 << v208);
      v297 = (v294 << v208);
      v209 = sub_1C6366C2C(v16, v297, (uint64_t)v192, v193, a2, 1);
      v212 = *(_QWORD *)(v16 + 832);
      if (v212)
        LOWORD(v212) = *(_WORD *)(v212 + 8);
      v213 = sub_1C5D56C70(v16, 177, a2, v192, v193, a3, a4, v211, (uint64_t)v209, v210, v212);
      v198 = v299;
      sub_1C5D13344(v16, a2, v213, v214, v299 + 16 * v292, a6 - v292, v304, a8, a9, 200);
      if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v16 + 40) + 40) + 272))
      {
        if (a6 != (_DWORD)v292)
        {
          v215 = v290 - 16;
          if (v299 + 16 * v292 < v290 - 16)
          {
            v216 = v299 + 16 * v292 + 16;
            do
            {
              *(_OWORD *)v314 = *(_OWORD *)(v216 - 16);
              v217 = *(_DWORD *)(v215 + 8);
              *(_QWORD *)(v216 - 16) = *(_QWORD *)v215;
              *(_DWORD *)(v216 - 8) = v217;
              *(void **)v215 = v314[0];
              *(_DWORD *)(v215 + 8) = v314[1];
              v215 -= 16;
              v218 = v216 >= v215;
              v216 += 16;
            }
            while (!v218);
          }
        }
      }
      if ((int)v297 <= 31)
      {
        v219 = a2;
        switch((_DWORD)v297)
        {
          case 1:
            v220 = 0;
            v221 = 0;
            v222 = 2;
            goto LABEL_352;
          case 0x10:
            v220 = 0;
            v221 = 0;
            v222 = 4;
            goto LABEL_352;
          case 8:
            v220 = 0;
            v221 = 0;
            v222 = 3;
            goto LABEL_352;
        }
      }
      else
      {
        v219 = a2;
        switch((_DWORD)v297)
        {
          case 0x20:
            v220 = 0;
            v221 = 0;
            v222 = 5;
LABEL_352:
            v277 = (llvm *)(v222 | v220);
            v302 = v222 | v220;
            v303 = v221;
            v278 = *(_QWORD *)(v16 + 832);
            if (v278)
              v279 = *(_WORD *)(v278 + 8);
            else
              v279 = 0;
            a3 = (uint64_t)sub_1C5D52060(v16, 201, v219, v277, v221, a3, a4, v279);
            a4 = a4 & 0xFFFFFFFF00000000 | v280;
            v194 = v302;
            a6 = v292;
LABEL_244:
            v199 = *(llvm::EVT **)(v16 + 56);
            if (v194)
              v200 = sub_1C47A8C74((unsigned __int8 *)&v302);
            else
              v200 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v302);
            v202 = (llvm::LLVMContext *)v200;
            if ((_DWORD)v201 == 1)
            if ((int)v202 <= 31)
            {
              switch((_DWORD)v202)
              {
                case 1:
                  v203 = 0;
                  v204 = 0;
                  v205 = 2;
                  goto LABEL_275;
                case 0x10:
                  v203 = 0;
                  v204 = 0;
                  v205 = 4;
                  goto LABEL_275;
                case 8:
                  v203 = 0;
                  v204 = 0;
                  v205 = 3;
                  goto LABEL_275;
              }
            }
            else
            {
              switch((_DWORD)v202)
              {
                case 0x20:
                  v203 = 0;
                  v204 = 0;
                  v205 = 5;
LABEL_275:
                  v223 = (llvm *)(v205 | v203);
                  v224 = *(_QWORD *)(v16 + 832);
                  if (v224)
                    v225 = *(_WORD *)(v224 + 8);
                  else
                    v225 = 0;
                  *(_QWORD *)v198 = sub_1C5D52060(v16, 216, a2, v223, v204, a3, a4, v225);
                  *(_DWORD *)(v198 + 8) = v226;
                  if (a6 < 2)
                    goto LABEL_313;
                  v227 = a6;
                  v291 = a6;
                  while (1)
                  {
                    v293 = v227;
                    v228 = 0;
                    v229 = (llvm::LLVMContext *)((v227 * v294) >> 1);
                    v298 = v227 >> 1;
                    do
                    {
                      if ((int)v229 <= 31)
                      {
                        v230 = a2;
                        switch((_DWORD)v229)
                        {
                          case 1:
                            v231 = 0;
                            v232 = 0;
                            v233 = 2;
                            goto LABEL_292;
                          case 0x10:
                            v231 = 0;
                            v232 = 0;
                            v233 = 4;
                            goto LABEL_292;
                          case 8:
                            v231 = 0;
                            v232 = 0;
                            v233 = 3;
                            goto LABEL_292;
                        }
                      }
                      else
                      {
                        v230 = a2;
                        switch((_DWORD)v229)
                        {
                          case 0x20:
                            v231 = 0;
                            v232 = 0;
                            v233 = 5;
                            goto LABEL_292;
                          case 0x40:
                            v231 = 0;
                            v232 = 0;
                            v233 = 6;
                            goto LABEL_292;
                          case 0x80:
                            v231 = 0;
                            v232 = 0;
                            v233 = 7;
                            goto LABEL_292;
                        }
                      }
                      v258 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v16 + 56), v229);
                      v232 = v259;
                      v231 = v258 & 0xFFFFFFFFFFFFFF00;
                      v233 = v258;
LABEL_292:
                      v234 = v198 + 16 * v228;
                      v235 = *(_QWORD *)v234;
                      v236 = *(_QWORD *)(v234 + 8);
                      v237 = sub_1C63662D4(v16, 1, v230, 0);
                      v240 = *(_QWORD *)(v16 + 832);
                      if (v240)
                        LOWORD(v240) = *(_WORD *)(v240 + 8);
                      v241 = (llvm *)(v233 | v231);
                      v242 = v299 + 16 * (v298 + v228);
                      *(_QWORD *)v242 = sub_1C5D56C70(v16, 53, a2, v241, v232, v235, v236, v239, (uint64_t)v237, v238, v240);
                      *(_DWORD *)(v242 + 8) = v243;
                      v244 = *(_QWORD *)v234;
                      v245 = *(_QWORD *)(v234 + 8);
                      v16 = v300;
                      v246 = sub_1C63662D4(v300, 0, a2, 0);
                      v249 = *(_QWORD *)(v300 + 832);
                      if (v249)
                        LOWORD(v249) = *(_WORD *)(v249 + 8);
                      v250 = sub_1C5D56C70(v300, 53, a2, v241, v232, v244, v245, v248, (uint64_t)v246, v247, v249);
                      *(_QWORD *)v234 = v250;
                      *(_DWORD *)(v234 + 8) = v251;
                      v198 = v299;
                      if ((_DWORD)v229 == v294 && (v304 != (_DWORD)v233 || !v304 && v232))
                      {
                        v252 = *(_QWORD *)(v300 + 832);
                        if (v252)
                          v253 = *(_WORD *)(v252 + 8);
                        else
                          v253 = 0;
                        *(_QWORD *)v234 = sub_1C5D52060(v300, 216, a2, (llvm *)v304, 0, (uint64_t)v250, *(_QWORD *)(v234 + 8), v253);
                        *(_DWORD *)(v234 + 8) = v254;
                        v255 = *(_QWORD *)(v300 + 832);
                        if (v255)
                          v256 = *(_WORD *)(v255 + 8);
                        else
                          v256 = 0;
                        *(_QWORD *)v242 = sub_1C5D52060(v300, 216, a2, (llvm *)v304, 0, *(_QWORD *)v242, *(_QWORD *)(v242 + 8), v256);
                        *(_DWORD *)(v242 + 8) = v257;
                      }
                      v228 += v293;
                    }
                    while (v228 < v291);
                    v227 = v298;
                    if (v293 <= 3)
                    {
LABEL_313:
                      v260 = v290 - 16;
                      if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v16 + 40) + 40) + 272))
                        v261 = v260 > v198;
                      else
                        v261 = 0;
                      if (v261)
                      {
                        v262 = v198 + 16;
                        do
                        {
                          *(_OWORD *)v314 = *(_OWORD *)(v262 - 16);
                          v263 = *(_DWORD *)(v260 + 8);
                          *(_QWORD *)(v262 - 16) = *(_QWORD *)v260;
                          *(_DWORD *)(v262 - 8) = v263;
                          *(void **)v260 = v314[0];
                          *(_DWORD *)(v260 + 8) = v314[1];
                          v260 -= 16;
                          v218 = v262 >= v260;
                          v262 += 16;
                        }
                        while (!v218);
                      }
                      return;
                    }
                  }
                case 0x40:
                  v203 = 0;
                  v204 = 0;
                  v205 = 6;
                  goto LABEL_275;
                case 0x80:
                  v203 = 0;
                  v204 = 0;
                  v205 = 7;
                  goto LABEL_275;
              }
            }
            v271 = llvm::EVT::getExtendedIntegerVT(v199, v202);
            v204 = v272;
            v203 = v271 & 0xFFFFFFFFFFFFFF00;
            v205 = v271;
            goto LABEL_275;
          case 0x40:
            v220 = 0;
            v221 = 0;
            v222 = 6;
            goto LABEL_352;
          case 0x80:
            v220 = 0;
            v221 = 0;
            v222 = 7;
            goto LABEL_352;
        }
      }
      v286 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v16 + 56), (llvm::LLVMContext *)v297);
      v221 = v287;
      v220 = v286 & 0xFFFFFFFFFFFFFF00;
      v222 = v286;
      goto LABEL_352;
    }
    if ((int)v28 <= 31)
    {
      if ((_DWORD)v28 == 1)
      {
        v61 = 0;
        v62 = 0;
        v63 = 2;
        goto LABEL_134;
      }
      if ((_DWORD)v28 == 16)
      {
        v61 = 0;
        v62 = 0;
        v63 = 4;
        goto LABEL_134;
      }
      v38 = a2;
      if ((_DWORD)v28 == 8)
      {
        v61 = 0;
        v62 = 0;
        v63 = 3;
        goto LABEL_135;
      }
    }
    else
    {
      if ((_DWORD)v28 == 32)
      {
        v61 = 0;
        v62 = 0;
        v63 = 5;
LABEL_134:
        v38 = a2;
LABEL_135:
        v111 = (llvm *)(v63 | v61);
        v302 = v63 | v61;
        v303 = v62;
        v112 = *(_QWORD *)(v16 + 832);
        if (v112)
          v113 = *(_WORD *)(v112 + 8);
        else
          v113 = 0;
        v114 = v16;
        v115 = 201;
        goto LABEL_230;
      }
      if ((_DWORD)v28 == 64)
      {
        v61 = 0;
        v62 = 0;
        v63 = 6;
        goto LABEL_134;
      }
      v38 = a2;
      if ((_DWORD)v28 == 128)
      {
        v61 = 0;
        v62 = 0;
        v63 = 7;
        goto LABEL_135;
      }
    }
    v281 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v16 + 56), (llvm::LLVMContext *)v28);
    v62 = v282;
    v61 = v281 & 0xFFFFFFFFFFFFFF00;
    v63 = v281;
    goto LABEL_135;
  }
  if ((*(_DWORD *)(v18 + 8) & 0xFE) != 0x12)
    goto LABEL_11;
LABEL_4:
  v313 = a7;
  v19 = *v17;
  v20 = v17[1];
  v311 = v19;
  v312 = v20;
  v21 = *(_QWORD *)(v16 + 24);
  if (a6 == 1)
  {
    LOBYTE(v309) = a7;
    v310 = 0;
    if (a7 == v19 && (a7 || !v20))
      goto LABEL_46;
    v22 = sub_1C47A8C74(&v313);
    v24 = v23;
    if ((_BYTE)v311)
      v25 = sub_1C47A8C74((unsigned __int8 *)&v311);
    else
      v25 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v311);
    if (v22 == v25 && v24 == v26)
    {
      v31 = *(_QWORD *)(v300 + 832);
      if (v31)
        v32 = *(_WORD *)(v31 + 8);
      else
        v32 = 0;
      v44 = (uint64_t)sub_1C5D52060(v300, 216, a2, (llvm *)v313, 0, a3, a4, v32);
      goto LABEL_45;
    }
    v33 = sub_1C5D386CC(v300, a3, a4, a2, (llvm *)v313, 0);
    if (v33)
    {
      LODWORD(a4) = v34;
      a3 = (uint64_t)v33;
LABEL_46:
      *(_QWORD *)a5 = a3;
      *(_DWORD *)(a5 + 8) = a4;
      return;
    }
    if (v313 - 15 <= 0x9B)
    {
      if ((_BYTE)v309)
      {
        LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v309);
        v91 = 0;
        v89 = 0;
      }
      else
      {
        EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v310 + 24), 0, v35);
        v91 = EVT & 0xFFFFFFFFFFFFFF00;
      }
      v314[0] = (void *)(v91 | EVT);
      v314[1] = v89;
      if ((_BYTE)v311)
      {
        LOBYTE(v116) = sub_1C47F37A0((unsigned __int8 *)&v311);
        v119 = 0;
        v118 = 0;
      }
      else
      {
        v116 = llvm::EVT::getEVT(*(llvm::EVT **)(v312 + 24), 0, v90);
        v118 = v117;
        v119 = v116 & 0xFFFFFFFFFFFFFF00;
      }
      if (LOBYTE(v314[0]) == v116 && ((_BYTE)v116 || v314[1] == v118)
        || sub_1C6329714((unsigned __int8 *)v314, v119 | v116, (uint64_t)v118))
      {
        v120 = sub_1C52B71D4((unsigned __int8 *)&v309);
        v121 = sub_1C52B71D4((unsigned __int8 *)&v311);
        v122 = (uint64_t)a2;
        if (v120 == v121)
        {
          v123 = v313;
          v124 = v300;
          v125 = a3;
          v126 = a4;
LABEL_338:
          v44 = sub_1C63663BC(v124, v125, v126, v122, v123, 0);
LABEL_45:
          a3 = v44;
          LODWORD(a4) = v45;
          goto LABEL_46;
        }
      }
    }
    if ((_BYTE)v309)
    {
      if (v309 - 15 >= 0x9C)
        goto LABEL_164;
      v128 = sub_1C47F37A0((unsigned __int8 *)&v309);
      v130 = 0;
    }
    else
    {
      if ((*(_DWORD *)(v310 + 8) & 0xFE) != 0x12)
        goto LABEL_164;
      v128 = llvm::EVT::getEVT(*(llvm::EVT **)(v310 + 24), 0, v35);
      v130 = v129;
    }
    if ((_BYTE)v311)
    {
      v131 = sub_1C47F37A0((unsigned __int8 *)&v311);
      v132 = 0;
    }
    else
    {
      v131 = llvm::EVT::getEVT(*(llvm::EVT **)(v312 + 24), 0, v127);
    }
    if (v128 != v131 || !v128 && v130 != v132)
    {
      llvm::TargetLoweringBase::getTypeConversion(v21, *(llvm::EVT **)(v300 + 56), v311, v312, (uint64_t)v314);
      if (LOBYTE(v314[0]) == 7)
      {
        v134 = *(llvm::LLVMContext **)(v300 + 56);
        if ((_BYTE)v311)
        {
          LOBYTE(v135) = sub_1C47F37A0((unsigned __int8 *)&v311);
          v138 = 0;
          v137 = 0;
        }
        else
        {
          v135 = llvm::EVT::getEVT(*(llvm::EVT **)(v312 + 24), 0, v133);
          v137 = v136;
          v138 = v135 & 0xFFFFFFFFFFFFFF00;
        }
        v264 = v138 | v135;
        v265 = sub_1C47F381C(&v313);
        v266 = (llvm *)sub_1C47AC578(v134, v264, v137, (llvm::Type *)(v265 | ((unint64_t)(v313 - 120 < 0x33) << 32)));
        v268 = sub_1C5D386CC(v300, a3, a4, a2, v266, v267);
        v270 = v269;
        v123 = v313;
        v124 = v300;
        v125 = (uint64_t)v268;
        v126 = v270;
        v122 = (uint64_t)a2;
        goto LABEL_338;
      }
    }
LABEL_164:
    v139 = sub_1C52B71D4((unsigned __int8 *)&v311);
    if (HIDWORD(v139) != 1 && v139 == 1)
    {
      v140 = (llvm *)v313;
      v141 = sub_1C6366C9C(v300, 0, (uint64_t)a2, 0);
      v144 = *(_QWORD *)(v300 + 832);
      if (v144)
        LOWORD(v144) = *(_WORD *)(v144 + 8);
      v44 = (uint64_t)sub_1C5D56C70(v300, 148, a2, v140, 0, a3, a4, v143, v141, v142, v144);
      goto LABEL_45;
    }
    if ((_BYTE)v311)
      v145 = (llvm::LLVMContext *)sub_1C47A8C74((unsigned __int8 *)&v311);
    else
      v145 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v311);
    if ((int)v145 <= 31)
    {
      switch((_DWORD)v145)
      {
        case 1:
          v146 = 0;
          v147 = 0;
          v148 = 2;
          goto LABEL_359;
        case 0x10:
          v146 = 0;
          v147 = 0;
          v148 = 4;
          goto LABEL_359;
        case 8:
          v146 = 0;
          v147 = 0;
          v148 = 3;
          goto LABEL_359;
      }
    }
    else
    {
      switch((_DWORD)v145)
      {
        case 0x20:
          v146 = 0;
          v147 = 0;
          v148 = 5;
LABEL_359:
          v283 = sub_1C6367DA8(v300, v148 | v146, v147, a3, a4);
          a3 = sub_1C63663BC(v300, v283, a4 & 0xFFFFFFFF00000000 | v284, (uint64_t)a2, v313, 0);
          LODWORD(a4) = v285;
          goto LABEL_46;
        case 0x40:
          v146 = 0;
          v147 = 0;
          v148 = 6;
          goto LABEL_359;
        case 0x80:
          v146 = 0;
          v147 = 0;
          v148 = 7;
          goto LABEL_359;
      }
    }
    v288 = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(v300 + 56), v145);
    v147 = v289;
    v146 = v288 & 0xFFFFFFFFFFFFFF00;
    v148 = v288;
    goto LABEL_359;
  }
  LOBYTE(v309) = 0;
  v310 = 0;
  v308 = 0;
  v307 = 0;
  v52 = *(llvm::EVT **)(v300 + 56);
  if ((a9 & 0xFF00000000) != 0)
    VectorTypeBreakdown = (*(uint64_t (**)(unint64_t, llvm::EVT *, uint64_t))(*(_QWORD *)v21 + 464))(v21, v52, a9);
  else
    VectorTypeBreakdown = llvm::TargetLoweringBase::getVectorTypeBreakdown(v21, v52, v19, v20, &v309, &v307, &v308);
  v296 = VectorTypeBreakdown;
  if ((_BYTE)v309)
  {
    if (v309 - 15 >= 0x9C)
      goto LABEL_85;
  }
  else if ((*(_DWORD *)(v310 + 8) & 0xFE) != 0x12)
  {
LABEL_85:
    v70 = v307;
    goto LABEL_88;
  }
  v71 = sub_1C52B71D4((unsigned __int8 *)&v309);
  v70 = v71 & 0xFFFFFFFF00000000 | (v307 * v71);
LABEL_88:
  v72 = *(llvm::LLVMContext **)(v300 + 56);
  v73 = sub_1C6131264((unsigned __int8 *)&v309, v54, v55);
  v75 = (llvm *)sub_1C47AC578(v72, v73, v74, (llvm::Type *)v70);
  v305 = v75;
  v306 = v76;
  if (v311 == v75)
  {
    if ((_BYTE)v311 || v312 == v76)
    {
      v78 = v300;
      v77 = a2;
      goto LABEL_182;
    }
  }
  else if ((_BYTE)v311)
  {
    v79 = sub_1C47A8C74((unsigned __int8 *)&v311);
    v81 = v80;
    v82 = v305;
    goto LABEL_95;
  }
  v82 = v75;
  v79 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v311);
  v81 = v83;
LABEL_95:
  if (v82)
    v84 = sub_1C47A8C74((unsigned __int8 *)&v305);
  else
    v84 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v305);
  if (v79 == v84 && v81 == v85)
  {
    v78 = v300;
    v92 = *(_QWORD *)(v300 + 832);
    if (v92)
      v93 = *(_WORD *)(v92 + 8);
    else
      v93 = 0;
    v77 = a2;
    a3 = (uint64_t)sub_1C5D52060(v300, 216, a2, v305, v306, a3, a4, v93);
    a4 = a4 & 0xFFFFFFFF00000000 | v98;
  }
  else
  {
    if ((_BYTE)v305)
    {
      v95 = sub_1C47F37A0((unsigned __int8 *)&v305);
      v96 = 0;
      v97 = 0;
    }
    else
    {
      v99 = llvm::EVT::getEVT(*(llvm::EVT **)(v306 + 24), 0, v86);
      v97 = v100;
      v96 = v99 & 0xFFFFFFFFFFFFFF00;
      v95 = v99;
    }
    v314[0] = (void *)(v96 | v95);
    v314[1] = v97;
    if ((_BYTE)v311)
    {
      LOBYTE(v101) = sub_1C47F37A0((unsigned __int8 *)&v311);
      v102 = 0;
      v103 = 0;
    }
    else
    {
      v101 = llvm::EVT::getEVT(*(llvm::EVT **)(v312 + 24), 0, v94);
      v103 = v104;
      v102 = v101 & 0xFFFFFFFFFFFFFF00;
    }
    if (v95 == v101 && (v95 || v97 == (void *)v103))
    {
      v78 = v300;
    }
    else
    {
      v78 = v300;
      if (sub_1C50989E0((unsigned __int8 *)v314, v102 | v101, v103))
      {
        v106 = *(llvm::LLVMContext **)(v300 + 56);
        v107 = a5;
        if ((_BYTE)v305)
        {
          LOBYTE(v108) = sub_1C47F37A0((unsigned __int8 *)&v305);
          v109 = 0;
          v110 = 0;
        }
        else
        {
          v108 = llvm::EVT::getEVT(*(llvm::EVT **)(v306 + 24), 0, v105);
          v110 = v149;
          v109 = v108 & 0xFFFFFFFFFFFFFF00;
        }
        v150 = v109 | v108;
        v151 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)&v311);
        v153 = (llvm *)sub_1C47AC578(v106, v150, v110, v151);
        v311 = (uint64_t)v153;
        v312 = v152;
        v78 = v300;
        v154 = *(_QWORD *)(v300 + 832);
        if (v154)
          v155 = *(_WORD *)(v154 + 8);
        else
          v155 = 0;
        a5 = v107;
        a3 = (uint64_t)sub_1C5D52060(v300, 200, a2, v153, v152, a3, a4, v155);
        a4 = a4 & 0xFFFFFFFF00000000 | v156;
      }
    }
    v77 = a2;
    v157 = sub_1C5D386CC(v78, a3, a4, a2, v305, v306);
    if (v157)
    {
      a3 = (uint64_t)v157;
      a4 = a4 & 0xFFFFFFFF00000000 | v158;
    }
  }
LABEL_182:
  v314[0] = v315;
  v314[1] = (void *)0x800000000;
  sub_1C4825C80((unsigned int *)v314, v307, 0, 0);
  if (v307)
  {
    v159 = 0;
    while (1)
    {
      if ((_BYTE)v309)
      {
        if (v309 - 15 < 0x9C)
        {
LABEL_188:
          v161 = sub_1C52B71D4((unsigned __int8 *)&v309);
          v162 = v309;
          v163 = v310;
          v164 = sub_1C6366C9C(v300, v159 * v161, (uint64_t)a2, 0);
          v167 = *(_QWORD *)(v300 + 832);
          if (v167)
            LOWORD(v167) = *(_WORD *)(v167 + 8);
          v168 = sub_1C5D56C70(v300, 151, a2, v162, v163, a3, a4, v166, v164, v165, v167);
          v170 = (char *)v314[0] + 16 * v159;
          *(_QWORD *)v170 = v168;
          goto LABEL_195;
        }
        v160 = v310;
      }
      else
      {
        v160 = v310;
        if ((*(_DWORD *)(v310 + 8) & 0xFE) == 0x12)
          goto LABEL_188;
      }
      v171 = a5;
      v172 = v309;
      v173 = sub_1C6366C9C(v300, v159, (uint64_t)a2, 0);
      v176 = *(_QWORD *)(v300 + 832);
      if (v176)
        LOWORD(v176) = *(_WORD *)(v176 + 8);
      v177 = sub_1C5D56C70(v300, 148, a2, v172, v160, a3, a4, v175, v173, v174, v176);
      v170 = (char *)v314[0] + 16 * v159;
      *(_QWORD *)v170 = v177;
      a5 = v171;
LABEL_195:
      *((_DWORD *)v170 + 2) = v169;
      ++v159;
      v78 = v300;
      v77 = a2;
      if (v159 == v307)
        goto LABEL_198;
    }
  }
  v159 = 0;
LABEL_198:
  if (v296 == v159)
  {
    if (v296)
    {
      v178 = 0;
      do
      {
        sub_1C5D13344(v78, v77, *(_QWORD *)((char *)v314[0] + v178), *(_QWORD *)((char *)v314[0] + v178 + 8), a5 + v178, 1, v313, a8, a9, 200);
        v178 += 16;
      }
      while (16 * v296 != v178);
    }
  }
  else if (v296 && v159)
  {
    v179 = 0;
    do
    {
      sub_1C5D13344(v78, v77, *((_QWORD *)v314[0] + 2 * v179), *((_QWORD *)v314[0] + 2 * v179 + 1), a5 + 16 * v179 * (v296 / v159), v296 / v159, v313, a8, a9, 200);
      ++v179;
    }
    while (v179 != v307);
  }
  if (v314[0] != v315)
    free(v314[0]);
}

uint64_t *sub_1C5D14AF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  int v21;

  v2 = a1[104];
  v4 = *(uint64_t **)(v2 + 192);
  v3 = *(uint64_t **)(v2 + 200);
  v5 = (uint64_t **)*(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    if (*((_WORD *)v4 + 12) != 1)
    {
      v8 = 0;
      v9 = *(uint64_t ***)a2;
      while (1)
      {
        v10 = v9[v8][4];
        if (*(uint64_t **)v10 == v4 && *(_DWORD *)(v10 + 8) == (_DWORD)v3)
          break;
        v8 += 2;
        if (2 * (_QWORD)v5 == v8)
        {
          if (v5 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, (unint64_t)v5 + 1, 16);
            v9 = *(uint64_t ***)a2;
            v5 = (uint64_t **)*(unsigned int *)(a2 + 8);
          }
          v5 = &v9[2 * (_QWORD)v5];
          *v5 = v4;
          v5[1] = v3;
          LODWORD(v5) = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = (_DWORD)v5;
          break;
        }
      }
    }
    if ((_DWORD)v5 == 1)
    {
      v4 = **(uint64_t ***)a2;
      v11 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    }
    else
    {
      v12 = a1[104];
      v13 = *a1;
      v14 = *((_DWORD *)a1 + 204);
      v20 = 0;
      v21 = v14;
      if (v13)
      {
        v15 = (unsigned __int8 **)(v13 + 48);
        if (v15 != &v20)
        {
          v16 = *v15;
          v20 = v16;
          if (v16)
            llvm::MetadataTracking::track((uint64_t)&v20, v16, 2);
        }
      }
      v4 = sub_1C5D63E30(v12, (const llvm::APInt *)&v20, a2);
      v11 = v17;
      if (v20)
        llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
    }
    v18 = a1[104];
    *(_QWORD *)(v18 + 192) = v4;
    *(_DWORD *)(v18 + 200) = v11;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return v4;
}

uint64_t sub_1C5D14C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  const llvm::Value *v26;
  uint64_t v27;
  unsigned int *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const llvm::Value *v72;
  uint64_t Successor;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  int v77;
  _BYTE v78[32];
  unsigned __int8 *v79;
  unsigned int *v80;
  uint64_t v81;
  _QWORD v82[10];

  v2 = a1;
  v82[8] = *MEMORY[0x1E0C80C00];
  v58 = a2;
  if (*(unsigned __int8 *)(a2 + 16) - 29 <= 0xA)
  {
    v3 = *(_QWORD *)(a2 + 40);
    v4 = *(_QWORD *)(v3 + 40);
    if (v4 == v3 + 40)
    {
      v5 = 0;
    }
    else
    {
      if (v4)
        v6 = v4 - 24;
      else
        v6 = 0;
      if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
        v5 = 0;
      else
        v5 = v6;
    }
    v65 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
    v74 = v78;
    v75 = v78;
    v76 = 4;
    v77 = 0;
    v7 = *(unsigned __int8 *)(v5 + 16);
    if (v7 != 30)
      __asm { BR              X10 }
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
      v8 = 2;
    else
      v8 = 1;
    v9 = 0;
    v59 = a1 + 888;
    v61 = v5;
    v62 = v3;
    v60 = v8;
    do
    {
      Successor = 0;
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v5, v9);
      v10 = *(_QWORD *)(Successor + 48);
      if (v10)
        v11 = v10 - 24;
      else
        v11 = 0;
      if (*(_BYTE *)(v11 + 16) == 83)
      {
        v63 = v9;
        v12 = sub_1C61294C8((_DWORD *)(*(_QWORD *)(v2 + 912) + 56), &Successor)[1];
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v74, v12);
        if (v13
          && *(_QWORD *)(Successor + 40) != Successor + 40
          && ((v14 = *(_QWORD *)(Successor + 48), v15 = v14 - 24, v14) ? (v16 = v14 - 24) : (v16 = 0),
              v14 && *(_BYTE *)(v16 + 16) == 83))
        {
          v17 = *(_QWORD *)(v12 + 56);
          v9 = v63;
          do
          {
            if (*(_QWORD *)(v15 + 8))
            {
              v67 = v15;
              if ((llvm::Type::isEmptyTy(*(llvm::Type **)v15) & 1) == 0)
              {
                v20 = *(_DWORD *)(v67 + 20);
                v21 = v20 & 0x7FFFFFF;
                if ((v20 & 0x7FFFFFF) != 0)
                {
                  v22 = 0;
                  while (1)
                  {
                    v23 = v67 - 32 * v21;
                    if ((v20 & 0x40000000) != 0)
                      v23 = *(_QWORD *)(v67 - 8);
                    if (*(_QWORD *)(v23 + 32 * *(unsigned int *)(v67 + 60) + 8 * v22) == v3)
                      break;
                    if (v21 == ++v22)
                      goto LABEL_44;
                  }
                }
                else
                {
LABEL_44:
                  LODWORD(v22) = -1;
                }
                if ((v20 & 0x40000000) != 0)
                  v24 = *(_QWORD *)(v67 - 8);
                else
                  v24 = v67 - 32 * v21;
                v25 = *(unsigned __int8 **)(v24 + 32 * v22);
                if (v25[16] >= 0x15u)
                  v26 = 0;
                else
                  v26 = *(const llvm::Value **)(v24 + 32 * v22);
                v72 = v26;
                if (v26)
                {
                  v29 = sub_1C6144C70(v59, (uint64_t *)&v72);
                  v30 = *((unsigned int *)v29 + 2);
                  if (!(_DWORD)v30)
                  {
                    v31 = v29;
                    v32 = sub_1C632BA34(*(_QWORD *)(v2 + 912), v26);
                    *((_DWORD *)v31 + 2) = v32;
                    if (*((_BYTE *)v26 + 16) == 16)
                    {
                      if ((*(unsigned int (**)(uint64_t, const llvm::Value *))(*(_QWORD *)v65 + 1216))(v65, v26))
                      {
                        v33 = 198;
                      }
                      else
                      {
                        v33 = 199;
                      }
                      v34 = *((_DWORD *)v31 + 2);
                    }
                    else
                    {
                      v34 = v32;
                      v33 = 200;
                    }
                    sub_1C5D1F374(v2, v25, v34, v33);
                    v30 = *((unsigned int *)v31 + 2);
                  }
                }
                else
                {
                  v27 = *(_QWORD *)(v2 + 912);
                  v79 = v25;
                  v80 = 0;
                  if ((sub_1C61252B8((uint64_t *)(v27 + 80), &v79, &v80) & 1) != 0)
                    v28 = v80;
                  else
                    v28 = (unsigned int *)(*(_QWORD *)(v27 + 80) + 16 * *(unsigned int *)(v27 + 96));
                  v35 = *(_QWORD *)(v2 + 912);
                  if (v28 == (unsigned int *)(*(_QWORD *)(v35 + 80) + 16 * *(unsigned int *)(v35 + 96)))
                  {
                    v30 = sub_1C632BA34(v35, (const llvm::Value *)v25);
                    sub_1C5D1F374(v2, v25, v30, 0xC8u);
                  }
                  else
                  {
                    v30 = v28[2];
                  }
                }
                v80 = (unsigned int *)v82;
                v81 = 0x400000000;
                llvm::ComputeValueVTs(v65, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v2 + 832) + 40) + 40) + 272), *(_QWORD *)v67, (uint64_t)&v80, 0, 0, 0);
                v64 = v81;
                if ((_DWORD)v81)
                {
                  v36 = 0;
                  v66 &= 0xFFFFFFFFFFFF0000;
                  do
                  {
                    v69 = v36;
                    v37 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v65 + 584))(v65, *(_QWORD *)(*(_QWORD *)(v2 + 832) + 56), *(_QWORD *)&v80[4 * v36], *(_QWORD *)&v80[4 * v36 + 2], v66);
                    v68 = v37;
                    if (v37)
                    {
                      v38 = 0;
                      v39 = v37;
                      v40 = v17;
                      v70 = v37;
                      do
                      {
                        if (!v40 || (v41 = v40, (*(_BYTE *)v40 & 4) == 0))
                        {
                          v41 = v40;
                          if ((*(_WORD *)(v40 + 44) & 8) != 0)
                          {
                            v41 = v40;
                            do
                              v41 = *(_QWORD *)(v41 + 8);
                            while ((*(_WORD *)(v41 + 44) & 8) != 0);
                          }
                        }
                        v42 = *(_QWORD **)(v2 + 912);
                        v17 = *(_QWORD *)(v41 + 8);
                        v43 = (v30 + v38);
                        v44 = (char *)v42[94];
                        v45 = v42[95];
                        if ((unint64_t)v44 >= v45)
                        {
                          v47 = v30;
                          v48 = (char *)v42[93];
                          v49 = (v44 - v48) >> 4;
                          v50 = v49 + 1;
                          if ((unint64_t)(v49 + 1) >> 60)
                            abort();
                          v71 = v17;
                          v51 = v2;
                          v52 = v45 - (_QWORD)v48;
                          if (v52 >> 3 > v50)
                            v50 = v52 >> 3;
                          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
                            v53 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v53 = v50;
                          if (v53)
                          {
                            if (v53 >> 60)
                              sub_1C4764EE4();
                            v54 = (char *)operator new(16 * v53);
                          }
                          else
                          {
                            v54 = 0;
                          }
                          v55 = &v54[16 * v49];
                          *(_QWORD *)v55 = v40;
                          *((_QWORD *)v55 + 1) = v43;
                          v56 = v55;
                          v30 = v47;
                          if (v44 != v48)
                          {
                            do
                            {
                              *((_OWORD *)v56 - 1) = *((_OWORD *)v44 - 1);
                              v56 -= 16;
                              v44 -= 16;
                            }
                            while (v44 != v48);
                            v44 = (char *)v42[93];
                          }
                          v42[93] = v56;
                          v46 = v55 + 16;
                          v42[94] = v55 + 16;
                          v42[95] = &v54[16 * v53];
                          if (v44)
                            operator delete(v44);
                          v2 = v51;
                          v39 = v70;
                          v17 = v71;
                        }
                        else
                        {
                          *(_QWORD *)v44 = v40;
                          *((_QWORD *)v44 + 1) = v43;
                          v46 = v44 + 16;
                        }
                        v42[94] = v46;
                        ++v38;
                        v40 = v17;
                      }
                      while (v38 != v39);
                    }
                    v30 = v68 + v30;
                    v36 = v69 + 1;
                  }
                  while (v69 + 1 != v64);
                  v5 = v61;
                  v3 = v62;
                  v8 = v60;
                  v9 = v63;
                }
                if (v80 != (unsigned int *)v82)
                  free(v80);
              }
              v15 = v67;
            }
            v18 = *(_QWORD *)(v15 + 32);
            v15 = v18 - 24;
            if (v18)
              v19 = v18 - 24;
            else
              v19 = 0;
          }
          while (v18 && *(_BYTE *)(v19 + 16) == 83);
        }
        else
        {
          v9 = v63;
        }
      }
      ++v9;
    }
    while (v9 != v8);
    sub_1C61446F0((unsigned int *)(v2 + 888));
    if (v75 != v74)
      free(v75);
    a2 = v58;
  }
  if (!sub_1C4D99D08(a2))
    ++*(_DWORD *)(v2 + 816);
  *(_QWORD *)v2 = v58;
  result = sub_1C635C434(v2, *(unsigned __int8 *)(v58 + 16) - 28);
  if (*(unsigned __int8 *)(v58 + 16) - 29 >= 0xB && !*(_BYTE *)(v2 + 960))
  {
    result = sub_1C50A011C(v58);
    if ((result & 1) == 0)
      result = sub_1C5D152D8(v2, (llvm::Type **)v58);
  }
  *(_QWORD *)v2 = 0;
  return result;
}

void sub_1C5D152A8()
{
  JUMPOUT(0x1C5D151D4);
}

void sub_1C5D152B8()
{
  JUMPOUT(0x1C5D151D4);
}

void sub_1C5D152C4()
{
  JUMPOUT(0x1C5D14D24);
}

void sub_1C5D152CC()
{
  JUMPOUT(0x1C5D151D4);
}

uint64_t sub_1C5D152D8(uint64_t a1, llvm::Type **a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  llvm::Type **v7;
  uint64_t v8;

  result = llvm::Type::isEmptyTy(*a2);
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 912);
    v7 = a2;
    v8 = 0;
    result = sub_1C61252B8((uint64_t *)(v5 + 80), &v7, &v8);
    if ((result & 1) != 0)
      v6 = v8;
    else
      v6 = *(_QWORD *)(v5 + 80) + 16 * *(unsigned int *)(v5 + 96);
    if (v6 != *(_QWORD *)(*(_QWORD *)(a1 + 912) + 80) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 912) + 96))
      return sub_1C5D1F374(a1, (unsigned __int8 *)a2, *(_DWORD *)(v6 + 8), 0xC8u);
  }
  return result;
}

void sub_1C5D15374(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int8 v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int VRegUseAt;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void **v38;
  void *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  void **v55;
  void *v56;
  unint64_t v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned __int8 **v68;
  BOOL v69;
  unsigned __int8 *v70;
  uint64_t *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _OWORD *v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned __int8 **v87;
  unsigned __int8 *v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _OWORD *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  int v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  void **v123;
  void *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t **v152;
  llvm::DataLayout *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  _OWORD v165[2];
  _QWORD v166[2];
  int v167;
  char v168;
  unsigned __int8 *v169;
  int v170;
  void *v171;
  uint64_t v172;
  _QWORD v173[2];
  char v174;
  int v175;
  int v176;
  void *v177[2];
  _BYTE v178[32];
  void *v179;
  uint64_t v180;
  _BYTE v181[64];
  void *v182;
  uint64_t v183;
  _QWORD v184[2];
  char v185;
  uint64_t v186;
  void *v187[2];
  _BYTE v188[16];
  void *v189;
  uint64_t v190;
  _BYTE v191[128];
  void *v192;
  uint64_t v193;
  _QWORD v194[50];

  v194[48] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 832);
  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(**(_QWORD **)(v4 + 40) + 40);
  v7 = a1 + 384;
  sub_1C612E234((unsigned int *)(a1 + 384), *(_BYTE **)(a1 + 672), (_BYTE *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
  *(_DWORD *)(a1 + 680) = 0;
  v161 = sub_1C5D14AF0((uint64_t *)a1, v7);
  v163 = v8;
  v192 = v194;
  v193 = 0x800000000;
  v189 = v191;
  v190 = 0x800000000;
  v9 = *(_QWORD **)(a2 + 40);
  v10 = (_QWORD *)v9[5];
  if (v10 != v9 + 5)
  {
    v11 = v10 - 3;
    if (!v10)
      v11 = 0;
    v12 = *((unsigned __int8 *)v11 + 16);
    if (v12 != 29)
      v11 = 0;
    if (v10 && v12 == 29)
    {
      v44 = v9[6];
      v45 = v44 ? v44 - 24 : 0;
      if (v11 != (_QWORD *)v45)
      {
        v46 = v11 + 3;
        if (*(_QWORD **)(v11[5] + 48) != v11 + 3)
        {
          v47 = *v46;
          if (*v46)
          {
            if (*(_BYTE *)(v47 - 8) == 84)
            {
              v48 = *(_QWORD *)(v47 - 56);
              if (v48)
              {
                if (!*(_BYTE *)(v48 + 16)
                  && *(_QWORD *)(v48 + 24) == *(_QWORD *)(v47 + 48)
                  && *(_DWORD *)(v48 + 36) == 119)
                {
                  sub_1C6374370((uint64_t *)a1);
                  goto LABEL_26;
                }
              }
            }
          }
        }
      }
    }
  }
  v13 = *(_QWORD *)(a1 + 912);
  v160 = v5;
  v164 = a2;
  v153 = (llvm::DataLayout *)(v6 + 272);
  if (!*(_BYTE *)(v13 + 48))
  {
    v49 = *(_DWORD *)(v13 + 52);
    v50 = v9[7];
    v187[0] = v188;
    v187[1] = (void *)0x100000000;
    v51 = llvm::PointerType::get(**(llvm::PointerType ***)(*(_QWORD *)(v50 + 24) + 16), (llvm::Type *)*(unsigned int *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 276));
    llvm::ComputeValueVTs(v5, (llvm::DataLayout *)(v6 + 272), v51, (uint64_t)v187, 0, 0, 0);
    v52 = *(_QWORD *)(a1 + 832);
    v53 = *(_QWORD *)a1;
    v54 = *(_DWORD *)(a1 + 816);
    v182 = 0;
    LODWORD(v183) = v54;
    if (v53)
    {
      v55 = (void **)(v53 + 48);
      if (v55 != &v182)
      {
        v56 = *v55;
        v182 = v56;
        if (v56)
          llvm::MetadataTracking::track((uint64_t)&v182, (unsigned __int8 *)v56, 2);
      }
    }
    v162 = sub_1C612E4E4(v52, (uint64_t)v161, v163, (const llvm::APInt *)&v182, v49, *(llvm **)v187[0], *((_QWORD *)v187[0] + 1));
    v159 = v57;
    if (v182)
      llvm::MetadataTracking::untrack((uint64_t)&v182, (unsigned __int8 *)v182);
    v58 = sub_1C635FDC4(a1, *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    v154 = v59;
    v156 = (uint64_t)v58;
    v182 = v184;
    v183 = 0x400000000;
    v179 = v181;
    v180 = 0x400000000;
    v177[0] = v178;
    v177[1] = (void *)0x400000000;
    llvm::ComputeValueVTs(v5, v153, **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (uint64_t)&v182, (uint64_t)&v179, (uint64_t)v177, 0);
    v60 = v183;
    v171 = v173;
    v172 = 0x400000000;
    sub_1C4825C80((unsigned int *)&v171, v183, 0, 0);
    llvm::DataLayout::getAlignment((uint64_t)v153, **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    if ((_DWORD)v60)
    {
      v62 = 0;
      v63 = 0;
      v64 = 1 << v61;
      do
      {
        v65 = *(_QWORD *)(a1 + 832);
        v66 = *(_QWORD *)a1;
        v67 = *(_DWORD *)(a1 + 816);
        *(_QWORD *)&v165[0] = 0;
        DWORD2(v165[0]) = v67;
        v69 = v66 == 0;
        v68 = (unsigned __int8 **)(v66 + 48);
        v69 = v69 || v68 == (unsigned __int8 **)v165;
        if (!v69)
        {
          v70 = *v68;
          *(_QWORD *)&v165[0] = v70;
          if (v70)
            llvm::MetadataTracking::track((uint64_t)v165, v70, 2);
        }
        v71 = sub_1C6369954(v65, (uint64_t)v162, v159, *((_QWORD *)v177[0] + v63), 0, (const llvm::APInt *)v165, 3);
        v73 = v72;
        if (*(_QWORD *)&v165[0])
          llvm::MetadataTracking::untrack((uint64_t)v165, *(unsigned __int8 **)&v165[0]);
        v74 = (v154 + v63);
        v75 = (char *)v179;
        if (*((unsigned __int8 *)v179 + v62) == *((unsigned __int8 *)v182 + v62)
          && (*((_BYTE *)v179 + v62) || *(_QWORD *)((char *)v179 + v62 + 8) == *(_QWORD *)((char *)v182 + v62 + 8)))
        {
          v76 = v156;
        }
        else
        {
          v77 = *(_QWORD *)(a1 + 832);
          v78 = *(_QWORD *)a1;
          v79 = *(_DWORD *)(a1 + 816);
          *(_QWORD *)&v165[0] = 0;
          DWORD2(v165[0]) = v79;
          if (v78)
          {
            v80 = (_OWORD *)(v78 + 48);
            if (v80 != v165)
            {
              v81 = *(unsigned __int8 **)v80;
              *(_QWORD *)&v165[0] = v81;
              if (v81)
              {
                llvm::MetadataTracking::track((uint64_t)v165, v81, 2);
                v75 = (char *)v179;
              }
            }
          }
          v76 = sub_1C6366544(v77, v156, v74, (uint64_t)v165, *(_QWORD *)&v75[v62], *(_QWORD *)&v75[v62 + 8]);
          LODWORD(v74) = v82;
          if (*(_QWORD *)&v165[0])
            llvm::MetadataTracking::untrack((uint64_t)v165, *(unsigned __int8 **)&v165[0]);
        }
        v83 = *(_QWORD *)(a1 + 832);
        v84 = *(_QWORD *)a1;
        v85 = *(_DWORD *)(a1 + 816);
        v169 = 0;
        v170 = v85;
        v86 = v83;
        if (v84)
        {
          v87 = (unsigned __int8 **)(v84 + 48);
          v86 = v83;
          if (v87 != &v169)
          {
            v88 = *v87;
            v169 = v88;
            v86 = v83;
            if (v88)
            {
              llvm::MetadataTracking::track((uint64_t)&v169, v88, 2);
              v86 = *(_QWORD *)(a1 + 832);
            }
          }
        }
        v89 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v86 + 40) + 40) + 276);
        v166[0] = 0;
        v166[1] = 0;
        v167 = v89;
        v168 = 0;
        v90 = (63 - __clz((*((_QWORD *)v177[0] + v63) | v64) & -(*((_QWORD *)v177[0] + v63) | v64)));
        memset(v165, 0, sizeof(v165));
        v91 = sub_1C636B75C(v83, (uint64_t)v161, v163, (uint64_t)&v169, v76, v74, (uint64_t)v71, v73, (uint64_t)v166, v90, SHIDWORD(v90), 0, (uint64_t)v165);
        v92 = (char *)v171 + v62;
        *(_QWORD *)v92 = v91;
        *((_DWORD *)v92 + 2) = v93;
        if (v169)
          llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
        ++v63;
        v62 += 16;
      }
      while (v60 != v63);
    }
    v94 = *(_QWORD *)(a1 + 832);
    v95 = *(_QWORD *)a1;
    v96 = *(_DWORD *)(a1 + 816);
    *(_QWORD *)&v165[0] = 0;
    DWORD2(v165[0]) = v96;
    if (v95)
    {
      v97 = (_OWORD *)(v95 + 48);
      if (v97 != v165)
      {
        v98 = *(unsigned __int8 **)v97;
        *(_QWORD *)&v165[0] = v98;
        if (v98)
          llvm::MetadataTracking::track((uint64_t)v165, v98, 2);
      }
    }
    v99 = *(_QWORD *)(v94 + 832);
    v5 = v160;
    if (v99)
      v100 = *(unsigned __int16 *)(v99 + 8);
    else
      v100 = 0;
    v161 = sub_1C636D0C8(v94, (const char *)2, (const llvm::APInt *)v165, (llvm *)1, 0, (uint64_t *)v171, v172, v100);
    v139 = v138;
    a2 = v164;
    if (*(_QWORD *)&v165[0])
      llvm::MetadataTracking::untrack((uint64_t)v165, *(unsigned __int8 **)&v165[0]);
    if (v171 != v173)
      free(v171);
    if (v177[0] != v178)
      free(v177[0]);
    if (v179 != v181)
      free(v179);
    if (v182 != v184)
      free(v182);
    v163 = v163 & 0xFFFFFFFF00000000 | v139;
    if (v187[0] != v188)
      free(v187[0]);
    goto LABEL_13;
  }
  v14 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if ((_DWORD)v14)
  {
    v182 = v184;
    v183 = 0x400000000;
    llvm::ComputeValueVTs(v5, (llvm::DataLayout *)(v6 + 272), **(_QWORD **)(a2 - 32 * v14), (uint64_t)&v182, 0, 0, 0);
    v158 = v183;
    if (!(_DWORD)v183)
    {
LABEL_11:
      if (v182 != v184)
        free(v182);
      goto LABEL_13;
    }
    v101 = sub_1C635FDC4(a1, *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    v150 = v102;
    v151 = (uint64_t)v101;
    v103 = *(uint64_t ***)(*(_QWORD *)(a2 + 40) + 56);
    v149 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, llvm::DataLayout *))(*(_QWORD *)v5 + 1912))(v5, **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (*((unsigned __int16 *)v103 + 9) >> 4) & 0x3FF, 0, v153);
    v152 = v103;
    v104 = v103[14];
    if (!v104 || *((_DWORD *)v104 + 2) < 2u)
    {
      v145 = 0;
      v155 = **v103;
      v148 = 1;
      v157 = 200;
      goto LABEL_85;
    }
    v140 = v104[6];
    if (v140 && (*(_BYTE *)(v140 + 18) & 1) != 0)
    {
      v148 = 0;
      v157 = 198;
      v142 = 2;
    }
    else
    {
      v141 = v104[6];
      if (!v141 || (*(_BYTE *)(v141 + 20) & 8) == 0)
      {
        v145 = 0;
        v148 = 1;
        v157 = 200;
        goto LABEL_145;
      }
      v148 = 0;
      v157 = 199;
      v142 = 1;
    }
    v145 = v142;
LABEL_145:
    v155 = **v103;
    v143 = v104[6];
    if (v143)
    {
      v105 = *(_BYTE *)(v143 + 13) & 4;
      goto LABEL_86;
    }
LABEL_85:
    v105 = 0;
LABEL_86:
    v106 = 0;
    v146 = v105 | 0x80000000;
    v147 = v105;
    while (1)
    {
      v107 = (uint64_t *)((char *)v182 + 16 * v106);
      v108 = *v107;
      v109 = v107[1];
      if ((v148 & 1) != 0)
      {
LABEL_95:
        LOBYTE(v112) = v108;
        goto LABEL_101;
      }
      v110 = *v107;
      if ((_BYTE)v108)
        break;
      if ((*(_DWORD *)(v109 + 8) & 0xFE) == 0x12)
        v113 = *(unsigned __int8 *)(**(_QWORD **)(v109 + 16) + 8);
      else
        v113 = *(_DWORD *)(v109 + 8);
      if (v113 == 13)
        goto LABEL_99;
      LOBYTE(v112) = 0;
LABEL_101:
      v115 = ((unint64_t)*((unsigned __int16 *)v152 + 9) >> 4) & 0x3FF;
      v116 = v108 & 0xFFFFFFFFFFFFFF00 | v112;
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 600))(v5, v155, v115, v116, v109);
      v118 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 592))(v5, v155, v115, v116, v109);
      v119 = v117;
      v179 = v181;
      v180 = 0x400000000;
      sub_1C4825C80((unsigned int *)&v179, v117, 0, 0);
      v120 = *(_QWORD *)(a1 + 832);
      v121 = *(_QWORD *)a1;
      v122 = *(_DWORD *)(a1 + 816);
      v171 = 0;
      LODWORD(v172) = v122;
      if (v121)
      {
        v123 = (void **)(v121 + 48);
        if (v123 != &v171)
        {
          v124 = *v123;
          v171 = v124;
          if (v124)
            llvm::MetadataTracking::track((uint64_t)&v171, (unsigned __int8 *)v124, 2);
        }
      }
      sub_1C5D13344(v120, (const llvm::APInt *)&v171, v151, (v106 + v150), (unint64_t)v179, v119, v118, (unsigned __int8 *)v164, v115 | 0x100000000, v157);
      if (v171)
        llvm::MetadataTracking::untrack((uint64_t)&v171, (unsigned __int8 *)v171);
      v125 = v147;
      if (*(_DWORD *)(**(_QWORD **)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF)) + 8) == 15)
      {
        v125 = v146;
        v126 = *(_DWORD *)(**(_QWORD **)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF)) + 8) >> 8;
      }
      else
      {
        v126 = 0;
      }
      v127 = 0x20000000;
      if (v106 == v158 - 1)
        v127 = 805306368;
      if (!v149)
        v127 = 0;
      if ((_DWORD)v119)
      {
        v128 = 0;
        v129 = (void *)(v127 | v145 | v125);
        v130 = 16 * v119;
        do
        {
          v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v179 + v128) + 40)
                           + 16 * *(unsigned int *)((char *)v179 + v128 + 8));
          v171 = v129;
          LODWORD(v172) = v126;
          v174 = 1;
          v176 = 0;
          v175 = 0;
          BYTE4(v172) = v131;
          v173[0] = v116;
          v173[1] = v109;
          v132 = (_OWORD *)sub_1C52B9D4C((uint64_t)&v192, (unint64_t)&v171, 1);
          v133 = (char *)v192 + 48 * v193;
          v135 = v132[1];
          v134 = v132[2];
          *v133 = *v132;
          v133[1] = v135;
          v133[2] = v134;
          LODWORD(v193) = v193 + 1;
          v136 = *(_OWORD *)((char *)v179 + v128);
          v137 = v190;
          if (v190 >= (unint64_t)HIDWORD(v190))
          {
            v144 = *(_OWORD *)((char *)v179 + v128);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 16);
            v136 = v144;
            v137 = v190;
          }
          *((_OWORD *)v189 + v137) = v136;
          LODWORD(v190) = v190 + 1;
          v128 += 16;
        }
        while (v130 != v128);
      }
      if (v179 != v181)
        free(v179);
      ++v106;
      v5 = v160;
      a2 = v164;
      if (v158 == (_DWORD)v106)
        goto LABEL_11;
    }
    v111 = (v110 - 120) >= 0x20 && (v110 - 2) >= 6;
    if (v111 && (v110 - 15) >= 0x3C)
      goto LABEL_95;
LABEL_99:
    v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 1904))(v5, v155, v108, v109, v157);
    v109 = v114;
    v108 = v112;
    goto LABEL_101;
  }
LABEL_13:
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 1768))(v5))
  {
    v16 = *(_QWORD *)(v15 + 112);
    if (v16)
    {
      if (*(char *)(v16 + 31) < 0)
      {
        v17 = (*(uint64_t (**)(uint64_t, llvm::DataLayout *, _QWORD))(*(_QWORD *)v5 + 32))(v5, v153, 0);
        v18 = (*(uint64_t (**)(uint64_t, llvm::DataLayout *, _QWORD))(*(_QWORD *)v5 + 32))(v5, v153, 0);
        v182 = (void *)0x4000;
        LODWORD(v183) = 0;
        v185 = 1;
        v186 = 1;
        BYTE4(v183) = v17;
        v184[0] = v18;
        v184[1] = 0;
        v19 = (_OWORD *)sub_1C52B9D4C((uint64_t)&v192, (unint64_t)&v182, 1);
        v20 = (char *)v192 + 48 * v193;
        v22 = v19[1];
        v21 = v19[2];
        *v20 = *v19;
        v20[1] = v22;
        v20[2] = v21;
        LODWORD(v193) = v193 + 1;
        v23 = *(_QWORD *)(a1 + 832);
        VRegUseAt = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt(*(llvm::SwiftErrorValueTracking **)(a1 + 920), a2, *(const llvm::MachineBasicBlock **)(*(_QWORD *)(a1 + 912) + 640), *(const llvm::Value **)(*(_QWORD *)(a1 + 920) + 104));
        v25 = (*(uint64_t (**)(uint64_t, llvm::DataLayout *, _QWORD))(*(_QWORD *)v5 + 32))(v5, v153, 0);
        v26 = sub_1C5D428B0(v23, VRegUseAt, (llvm *)v25, 0);
        v28 = v27;
        v29 = v190;
        if (v190 >= HIDWORD(v190))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 16);
          v29 = v190;
        }
        v30 = (uint64_t *)((char *)v189 + 16 * v29);
        *v30 = v26;
        v30[1] = v28;
        LODWORD(v190) = v190 + 1;
      }
    }
  }
  v31 = *(_QWORD *)(a1 + 832);
  v32 = **(_QWORD **)(v31 + 40);
  v33 = *(_DWORD *)(*(_QWORD *)(v32 + 24) + 8);
  v34 = (*(unsigned __int16 *)(v32 + 18) >> 4) & 0x3FF;
  v35 = *(_QWORD *)(v31 + 24);
  v36 = *(_QWORD *)a1;
  v37 = *(_DWORD *)(a1 + 816);
  v182 = 0;
  LODWORD(v183) = v37;
  if (v36)
  {
    v38 = (void **)(v36 + 48);
    if (v38 != &v182)
    {
      v39 = *v38;
      v182 = v39;
      if (v39)
      {
        llvm::MetadataTracking::track((uint64_t)&v182, (unsigned __int8 *)v39, 2);
        v31 = *(_QWORD *)(a1 + 832);
      }
    }
  }
  v40 = (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, BOOL, void **, void **, void **, uint64_t))(*(_QWORD *)v35 + 1864))(v35, v161, v163, v34, v33 > 0xFF, &v192, &v189, &v182, v31);
  v42 = v41;
  if (v182)
    llvm::MetadataTracking::untrack((uint64_t)&v182, (unsigned __int8 *)v182);
  v43 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(v43 + 192) = v40;
  *(_DWORD *)(v43 + 200) = v42;
LABEL_26:
  if (v189 != v191)
    free(v189);
  if (v192 != v194)
    free(v192);
}

void sub_1C5D16178(uint64_t a1, unsigned __int8 *a2, const llvm::APInt *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  const llvm::APInt *v20;
  const llvm::APInt *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  unsigned __int8 **v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned __int8 **v61;
  unsigned __int8 *v62;
  unsigned __int8 **v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned __int8 **v70;
  unsigned __int8 **v71;
  int v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  unsigned int v78;
  unsigned int v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 **v88;
  unsigned __int8 **v89;
  unsigned __int8 **v90;
  unsigned __int8 **v91;
  unsigned __int8 *v92;
  unsigned __int8 **v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  llvm::ValueHandleBase *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int v105;
  unsigned __int8 **v106;
  unsigned __int8 **v107;
  unsigned __int8 *v108;
  unsigned __int8 **v109;
  llvm::ConstantInt *v110;
  unsigned int v111;
  char v112;
  unsigned __int8 **v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  uint64_t *v118;
  uint64_t v119;
  llvm::ValueHandleBase *v120;
  const llvm::APInt *v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v5 = *(_QWORD *)(a1 + 912);
  v6 = *(_QWORD **)(v5 + 640);
  v9 = *(_QWORD *)(v5 + 56);
  v7 = (_DWORD *)(v5 + 56);
  v8 = v9;
  v10 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v117 = v10;
  v11 = v7[4];
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v11 - 1);
    v14 = (unsigned __int8 **)(v8 + 16 * v13);
    v15 = *v14;
    if (v10 == *v14)
      goto LABEL_11;
    v16 = 0;
    v17 = 1;
    while (v15 != (unsigned __int8 *)-4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == (unsigned __int8 *)-8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (unsigned __int8 **)(v8 + 16 * (v19 & v12));
      v15 = *v14;
      if (v10 == *v14)
        goto LABEL_11;
    }
    if (v16)
      v70 = v16;
    else
      v70 = v14;
  }
  else
  {
    v70 = 0;
  }
  v14 = (unsigned __int8 **)sub_1C47AD254(v7, (uint64_t)&v117, &v117, v70);
  *v14 = v117;
  v14[1] = 0;
LABEL_11:
  v20 = (const llvm::APInt *)v14[1];
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 1)
  {
    llvm::MachineBasicBlock::addSuccessor(v6, v20, -1);
    v21 = (const llvm::APInt *)v6[1];
    if (v21 == (const llvm::APInt *)(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 8) + 320))
      v21 = 0;
    if (v20 != v21 || !*(_DWORD *)(*(_QWORD *)(a1 + 824) + 552))
    {
      v22 = *(_QWORD *)(a1 + 832);
      v23 = *(_QWORD *)a1;
      v24 = *(_DWORD *)(a1 + 816);
      v117 = 0;
      LODWORD(v118) = v24;
      if (v23)
      {
        v25 = (unsigned __int8 **)(v23 + 48);
        if (v25 != &v117)
        {
          v26 = *v25;
          v117 = v26;
          if (v26)
            llvm::MetadataTracking::track((uint64_t)&v117, v26, 2);
        }
      }
      sub_1C612E234((unsigned int *)(a1 + 384), *(_BYTE **)(a1 + 672), (_BYTE *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
      *(_DWORD *)(a1 + 680) = 0;
      v27 = sub_1C5D14AF0((uint64_t *)a1, a1 + 384);
      v29 = v28;
      v30 = sub_1C5D4145C(*(_QWORD *)(a1 + 832), (uint64_t)v20);
      v33 = *(_QWORD *)(v22 + 832);
      if (v33)
        LOWORD(v33) = *(_WORD *)(v33 + 8);
      *(_QWORD *)(v22 + 192) = sub_1C5D56C70(v22, 256, (const llvm::APInt *)&v117, (llvm *)1, 0, (uint64_t)v27, v29, v32, v30, v31, v33);
      *(_DWORD *)(v22 + 200) = v34;
      v35 = v117;
      if (v117)
      {
        v36 = &v117;
LABEL_25:
        llvm::MetadataTracking::untrack((uint64_t)v36, v35);
        return;
      }
    }
    return;
  }
  v37 = *((_QWORD *)a2 - 12);
  v38 = *(_QWORD *)(a1 + 912);
  v41 = *(_QWORD *)(v38 + 56);
  v39 = (_DWORD *)(v38 + 56);
  v40 = v41;
  v42 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v117 = v42;
  v43 = v39[4];
  if (v43)
  {
    v44 = v43 - 1;
    v45 = ((v42 >> 4) ^ (v42 >> 9)) & (v43 - 1);
    v46 = (unsigned __int8 **)(v40 + 16 * v45);
    v47 = *v46;
    if (v42 == *v46)
      goto LABEL_36;
    v48 = 0;
    v49 = 1;
    while (v47 != (unsigned __int8 *)-4096)
    {
      if (v48)
        v50 = 0;
      else
        v50 = v47 == (unsigned __int8 *)-8192;
      if (v50)
        v48 = v46;
      v51 = v45 + v49++;
      v45 = v51 & v44;
      v46 = (unsigned __int8 **)(v40 + 16 * (v51 & v44));
      v47 = *v46;
      if (v42 == *v46)
        goto LABEL_36;
    }
    if (v48)
      v71 = v48;
    else
      v71 = v46;
  }
  else
  {
    v71 = 0;
  }
  v46 = (unsigned __int8 **)sub_1C47AD254(v39, (uint64_t)&v117, &v117, v71);
  *v46 = v117;
  v46[1] = 0;
LABEL_36:
  v52 = (uint64_t)v46[1];
  if (*(unsigned __int8 *)(v37 + 16) <= 0x1Bu)
    v53 = 0;
  else
    v53 = (uint64_t *)v37;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24) + 48))
    v54 = 1;
  else
    v54 = v53 == 0;
  if (v54)
    goto LABEL_103;
  v55 = v53[1];
  if (!v55 || *(_QWORD *)(v55 + 8))
    goto LABEL_103;
  if ((a2[23] & 0x20) != 0)
  {
    v56 = ***(_QWORD ***)a2;
    v117 = a2;
    v57 = *(_DWORD *)(v56 + 2496);
    if (v57)
    {
      v58 = *(_QWORD *)(v56 + 2480);
      v59 = v57 - 1;
      v60 = v59 & ((a2 >> 4) ^ (a2 >> 9));
      v61 = (unsigned __int8 **)(v58 + 40 * v60);
      v62 = *v61;
      if (*v61 == a2)
      {
LABEL_56:
        v67 = *((unsigned int *)v61 + 4);
        if ((_DWORD)v67)
        {
          v68 = v61[1] + 8;
          v69 = 16 * v67;
          while (*((_DWORD *)v68 - 2) != 15)
          {
            v68 += 2;
            v69 -= 16;
            if (!v69)
              goto LABEL_70;
          }
          if (*v68)
            goto LABEL_103;
        }
        goto LABEL_70;
      }
      v63 = 0;
      v64 = 1;
      while (v62 != (unsigned __int8 *)-4096)
      {
        if (v63)
          v65 = 0;
        else
          v65 = v62 == (unsigned __int8 *)-8192;
        if (v65)
          v63 = v61;
        v66 = v60 + v64++;
        v60 = v66 & v59;
        v61 = (unsigned __int8 **)(v58 + 40 * v60);
        v62 = *v61;
        if (*v61 == a2)
          goto LABEL_56;
      }
      if (v63)
        v113 = v63;
      else
        v113 = v61;
    }
    else
    {
      v113 = 0;
    }
    v61 = (unsigned __int8 **)sub_1C541AB24(v56 + 2480, (uint64_t)&v117, (uint64_t *)&v117, v113);
    v114 = v117;
    v61[3] = 0;
    v61[4] = 0;
    *v61 = v114;
    v61[1] = (unsigned __int8 *)(v61 + 3);
    v61[2] = (unsigned __int8 *)0x100000000;
    goto LABEL_56;
  }
LABEL_70:
  v128 = 0;
  v129 = 0;
  v117 = (unsigned __int8 *)&v129;
  v118 = &v128;
  if ((sub_1C4FA438C((_QWORD **)&v117, v53) & 1) != 0)
  {
    v72 = 28;
LABEL_74:
    if (*(_BYTE *)(v129 + 16) != 89
      || ((v73 = *(_DWORD *)(v129 + 20), (v73 & 0x40000000) != 0)
        ? (v74 = *(uint64_t **)(v129 - 8))
        : (v74 = (uint64_t *)(v129 - 32 * (v73 & 0x7FFFFFF))),
          (v75 = *v74) == 0
       || *(_BYTE *)(v128 + 16) != 89
       || ((v76 = *(_DWORD *)(v128 + 20), (v76 & 0x40000000) != 0)
         ? (v77 = *(_QWORD **)(v128 - 8))
         : (v77 = (_QWORD *)(v128 - 32 * (v76 & 0x7FFFFFF))),
           v75 != *v77)))
    {
      v78 = sub_1C5D1F5D4(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 32), v6[2], (uint64_t)v20);
      v79 = sub_1C5D1F5D4(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 32), v6[2], v52);
      sub_1C5D1F6B8(a1, (uint64_t)v53, v20, v52, v6, v6, v72, v78, v79, 0);
      v80 = sub_1C636002C((int **)(*(_QWORD *)(a1 + 856) + 8));
      v81 = *(_QWORD *)(a1 + 856);
      v83 = *(_QWORD *)(v81 + 8);
      v82 = *(_QWORD *)(v81 + 16);
      v84 = -1171354717 * ((unint64_t)(v82 - v83) >> 3);
      if (v80)
      {
        v85 = v84 - 1;
        if (v84 != 1)
        {
          v86 = 0;
          do
          {
            sub_1C635FFB4(a1, *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 8) + v86 + 96));
            sub_1C635FFB4(a1, *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 8) + v86 + 112));
            v86 += 88;
            --v85;
          }
          while (v85);
          v83 = *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8);
        }
        sub_1C63600E8(a1, v83, (uint64_t)v6);
        v87 = *(_QWORD *)(a1 + 856);
        sub_1C5509C8C((uint64_t)&v117, *(_QWORD *)(v87 + 8) + 88, *(_QWORD *)(v87 + 16), *(_QWORD *)(v87 + 8));
        v89 = v88;
        v90 = *(unsigned __int8 ***)(v87 + 16);
        if (v90 != v88)
        {
          v91 = v90 - 2;
          do
          {
            if (*v91)
              llvm::MetadataTracking::untrack((uint64_t)v91, *v91);
            v92 = *(v91 - 2);
            if (v92)
              llvm::MetadataTracking::untrack((uint64_t)(v91 - 2), v92);
            v93 = v91 - 9;
            v91 -= 11;
          }
          while (v93 != v89);
        }
        *(_QWORD *)(v87 + 16) = v89;
        return;
      }
      v94 = v84 - 1;
      if (v84 != 1)
      {
        v95 = 136;
        do
        {
          v96 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 856) + 8) + v95);
          v97 = *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8) + 320;
          *(_QWORD *)(*(_QWORD *)(v96[4] + 104) + 8 * *((unsigned int *)v96 + 6)) = 0;
          *((_DWORD *)v96 + 6) = -1;
          v98 = *v96;
          v99 = (_QWORD *)v96[1];
          *v99 = *v96;
          *(_QWORD *)(v98 + 8) = v99;
          *v96 = 0;
          v96[1] = 0;
          llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v97, (llvm::MachineBasicBlock *)v96);
          v95 += 88;
          --v94;
        }
        while (v94);
        v81 = *(_QWORD *)(a1 + 856);
        v83 = *(_QWORD *)(v81 + 8);
        v82 = *(_QWORD *)(v81 + 16);
      }
      if (v82 != v83)
      {
        v107 = (unsigned __int8 **)(v82 - 16);
        do
        {
          if (*v107)
            llvm::MetadataTracking::untrack((uint64_t)v107, *v107);
          v108 = *(v107 - 2);
          if (v108)
            llvm::MetadataTracking::untrack((uint64_t)(v107 - 2), v108);
          v109 = v107 - 9;
          v107 -= 11;
        }
        while (v109 != (unsigned __int8 **)v83);
      }
      *(_QWORD *)(v81 + 16) = v83;
    }
    goto LABEL_103;
  }
  v117 = (unsigned __int8 *)&v129;
  v118 = &v128;
  if (sub_1C4FA4278((_QWORD **)&v117, v53))
  {
    v72 = 29;
    goto LABEL_74;
  }
LABEL_103:
  v100 = *(uint64_t **)(*(_QWORD *)(a1 + 832) + 56);
  v101 = *v100;
  v102 = *(llvm::ValueHandleBase **)(*v100 + 1560);
  if (!v102)
  {
    v110 = *(llvm::ConstantInt **)(v101 + 1888);
    v111 = *(_DWORD *)(v101 + 1896);
    LODWORD(v118) = v111 >> 8;
    if (v111 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v117, 1, 0);
    }
    else
    {
      if (v111 <= 0xFF)
        v112 = 0;
      else
        v112 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v111);
      v117 = (unsigned __int8 *)(v112 & 1);
    }
    v102 = llvm::ConstantInt::get(v110, (llvm::LLVMContext *)&v117, a3);
    if (v118 >= 0x41 && v117)
      MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
    *(_QWORD *)(v101 + 1560) = v102;
  }
  v103 = 0;
  v104 = *(_QWORD *)a1;
  v105 = *(_DWORD *)(a1 + 816);
  v115 = 0;
  v116 = v105;
  if (v104)
  {
    v106 = (unsigned __int8 **)(v104 + 48);
    if (v106 == &v115)
    {
      v103 = 0;
    }
    else
    {
      v103 = *v106;
      v115 = v103;
      if (v103)
      {
        llvm::MetadataTracking::track((uint64_t)&v115, v103, 2);
        v103 = v115;
      }
    }
  }
  LODWORD(v117) = 17;
  v118 = (uint64_t *)v37;
  v119 = 0;
  v120 = v102;
  v121 = v20;
  v122 = v52;
  v123 = v6;
  v124 = v103;
  if (v103)
  {
    llvm::MetadataTracking::track((uint64_t)&v124, v103, 2);
    v125 = v116;
    v126 = 0;
    v127 = -1;
    if (v115)
      llvm::MetadataTracking::untrack((uint64_t)&v115, v115);
  }
  else
  {
    v125 = v116;
    v126 = 0;
    v127 = -1;
  }
  sub_1C63600E8(a1, (uint64_t)&v117, (uint64_t)v6);
  if (v126)
    llvm::MetadataTracking::untrack((uint64_t)&v126, v126);
  v35 = v124;
  if (v124)
  {
    v36 = &v124;
    goto LABEL_25;
  }
}

void sub_1C5D1699C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  llvm::MachineBasicBlock *v21;
  const llvm::Value *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  int EdgeProbability;
  char *v31;
  char *v32;
  llvm::MachineBasicBlock *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 **v57;
  unsigned __int8 *v58;
  unsigned __int8 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  uint64_t v74;
  __int16 v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[18];

  v95[16] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 912);
  v7 = *(_QWORD *)(v6 + 640);
  v10 = *(_QWORD *)(v6 + 56);
  v8 = (_DWORD *)(v6 + 56);
  v9 = v10;
  v11 = *(void **)(a2 - 96);
  v93 = v11;
  v12 = v8[4];
  if (v12)
  {
    v13 = v12 - 1;
    v14 = ((v11 >> 4) ^ (v11 >> 9)) & (v12 - 1);
    v15 = (_QWORD *)(v9 + 16 * v14);
    v16 = (void *)*v15;
    if (v11 == (void *)*v15)
      goto LABEL_11;
    v17 = 0;
    v18 = 1;
    while (v16 != (void *)-4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == (void *)-8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v9 + 16 * (v20 & v13));
      v16 = (void *)*v15;
      if (v11 == (void *)*v15)
        goto LABEL_11;
    }
    if (v17)
      v76 = v17;
    else
      v76 = v15;
  }
  else
  {
    v76 = 0;
  }
  v15 = sub_1C47AD254(v8, (uint64_t)&v93, &v93, v76);
  *v15 = v93;
  v15[1] = 0;
LABEL_11:
  v21 = (llvm::MachineBasicBlock *)v15[1];
  v22 = *(const llvm::Value **)(a2 - 64);
  v23 = *(unsigned __int8 **)(a2 - 32);
  if (v23[16])
    v24 = 0;
  else
    v24 = *(_QWORD *)(a2 - 32);
  if (v23[16] == 24)
  {
    sub_1C5D21CFC(a1, a2, *(_QWORD *)(a2 - 64), a4);
  }
  else if (v24 && (*(_BYTE *)(v24 + 33) & 0x20) != 0)
  {
    v47 = *(_DWORD *)(v24 + 36);
    if (v47 <= 265)
    {
      if ((v47 - 127) >= 2)
      {
        if (v47 != 60)
          sub_1C5D78F30(a1, a2, *(_QWORD *)(a2 - 64), a4);
      }
      else
      {
        sub_1C5D25158(a1, a2, *(_QWORD *)(a2 - 64), a4);
      }
    }
    else if ((v47 - 266) >= 4)
    {
      v93 = v95;
      v94 = 0x800000000;
      v48 = sub_1C635C370(a1);
      v50 = v49;
      v51 = v94;
      if (v94 >= HIDWORD(v94))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
        v51 = v94;
      }
      v52 = (uint64_t **)((char *)v93 + 16 * v51);
      *v52 = v48;
      v52[1] = v50;
      LODWORD(v94) = v94 + 1;
      v53 = *(_QWORD *)(a1 + 832);
      v54 = *(_QWORD *)(v53 + 24);
      v55 = *(_QWORD *)a1;
      LODWORD(v52) = *(_DWORD *)(a1 + 816);
      v91 = 0;
      LODWORD(v92) = (_DWORD)v52;
      v56 = v53;
      if (v55)
      {
        v57 = (unsigned __int8 **)(v55 + 48);
        v56 = v53;
        if (v57 != &v91)
        {
          v58 = *v57;
          v91 = v58;
          v56 = v53;
          if (v58)
          {
            llvm::MetadataTracking::track((uint64_t)&v91, v58, 2);
            v56 = *(_QWORD *)(a1 + 832);
          }
        }
      }
      v59 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v54 + 32))(v54, *(_QWORD *)(**(_QWORD **)(v56 + 40) + 40) + 272, 0);
      v60 = sub_1C6366AB4(v53, 11082, (const llvm::APInt *)&v91, (llvm *)v59, 0, 1, 0);
      v62 = v61;
      v63 = v94;
      if (v94 >= HIDWORD(v94))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v94 + 1, 16);
        v63 = v94;
      }
      v64 = (char *)v93 + 16 * v63;
      *v64 = v60;
      v64[1] = v62;
      LODWORD(v94) = v94 + 1;
      if (v91)
        llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
      v65 = *(_QWORD *)(a1 + 832);
      LOBYTE(v91) = 1;
      v92 = 0;
      v66 = sub_1C636AB20(v65, (uint64_t *)&v91, 1);
      v68 = v67;
      v69 = *(_QWORD *)(a1 + 832);
      v70 = *(_QWORD *)a1;
      v71 = *(_DWORD *)(a1 + 816);
      v91 = 0;
      LODWORD(v92) = v71;
      if (v70)
      {
        v72 = (unsigned __int8 **)(v70 + 48);
        if (v72 != &v91)
        {
          v73 = *v72;
          v91 = v73;
          if (v73)
            llvm::MetadataTracking::track((uint64_t)&v91, v73, 2);
        }
      }
      v74 = *(_QWORD *)(v69 + 832);
      if (v74)
        v75 = *(_WORD *)(v74 + 8);
      else
        v75 = 0;
      *(_QWORD *)(v69 + 192) = sub_1C636D410(v69, (const char *)0x30, (const llvm::APInt *)&v91, v66, v68, (uint64_t *)v93, v94, v75);
      *(_DWORD *)(v69 + 200) = v77;
      if (v91)
        llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
      if (v93 != v95)
        free(v93);
    }
  }
  else
  {
    v25 = *(_DWORD *)(a2 + 20);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_19;
    v78 = v25 & 0x7FFFFFF;
    v79 = a2 - 32 * v78;
    v82 = *(_QWORD *)(v79 - 8);
    v80 = (_QWORD *)(v79 - 8);
    v81 = v82;
    if ((v82 & 0xFFFFFFFF0) != 0)
    {
      v86 = 0;
      v87 = (v81 >> 4);
      v88 = -8 - (v81 + 32 * v78);
      do
      {
        if (!*(_DWORD *)(*(_QWORD *)(a2 + v88) + 8))
          ++v86;
        v88 += 16;
        --v87;
      }
      while (v87);
      if (v86)
      {
        v89 = sub_1C635FDC4(a1, v23);
        sub_1C6373FA0(a1, a2, (uint64_t)v89, v90);
        goto LABEL_20;
      }
    }
    if ((v81 & 0xFFFFFFFF0) == 0)
      goto LABEL_19;
    v83 = 0;
    v84 = (v81 >> 4);
    v85 = -8 - (*v80 + 32 * v78);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(a2 + v85) + 8) == 7)
        ++v83;
      v85 += 16;
      --v84;
    }
    while (v84);
    if (v83)
    {
      sub_1C5D25B4C(a1, a2, *(_QWORD *)(a2 - 64));
    }
    else
    {
LABEL_19:
      v26 = sub_1C635FDC4(a1, v23);
      sub_1C5D25CEC(a1, a2, (uint64_t)v26, v27, 0, 0, (uint64_t)v22, 0);
    }
  }
LABEL_20:
  v28 = *(_QWORD *)(a2 - 32);
  if (!v28 || *(_BYTE *)(v28 + 16) || *(_QWORD *)(v28 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v28 + 36) != 124)
    sub_1C5D152D8(a1, (llvm::Type **)a2);
  v93 = v95;
  v94 = 0x100000000;
  v29 = *(uint64_t **)(a1 + 912);
  if (v29[4])
  {
    EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v29[4], *(_QWORD *)(v7 + 16), (uint64_t)v22);
    v29 = *(uint64_t **)(a1 + 912);
  }
  else
  {
    EdgeProbability = 0;
  }
  sub_1C5D1F008(v29, v22, EdgeProbability, (uint64_t)&v93);
  sub_1C635FF50(a1, (llvm::MachineBasicBlock *)v7, v21, -1);
  if ((_DWORD)v94)
  {
    v31 = (char *)v93;
    v32 = (char *)v93 + 16 * v94;
    do
    {
      v33 = *(llvm::MachineBasicBlock **)v31;
      *((_BYTE *)v33 + 184) = 1;
      sub_1C635FF50(a1, (llvm::MachineBasicBlock *)v7, v33, *((_DWORD *)v31 + 2));
      v31 += 16;
    }
    while (v31 != v32);
  }
  sub_1C50D6C6C(*(unsigned int **)(v7 + 112), *(unsigned int **)(v7 + 120));
  v34 = *(_QWORD *)(a1 + 832);
  v35 = *(_QWORD *)a1;
  v36 = *(_DWORD *)(a1 + 816);
  v91 = 0;
  LODWORD(v92) = v36;
  if (v35)
  {
    v37 = (unsigned __int8 **)(v35 + 48);
    if (v37 != &v91)
    {
      v38 = *v37;
      v91 = v38;
      if (v38)
        llvm::MetadataTracking::track((uint64_t)&v91, v38, 2);
    }
  }
  sub_1C612E234((unsigned int *)(a1 + 384), *(_BYTE **)(a1 + 672), (_BYTE *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
  *(_DWORD *)(a1 + 680) = 0;
  v39 = sub_1C5D14AF0((uint64_t *)a1, a1 + 384);
  v41 = v40;
  v42 = sub_1C5D4145C(*(_QWORD *)(a1 + 832), (uint64_t)v21);
  v45 = *(_QWORD *)(v34 + 832);
  if (v45)
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  *(_QWORD *)(v34 + 192) = sub_1C5D56C70(v34, 256, (const llvm::APInt *)&v91, (llvm *)1, 0, (uint64_t)v39, v41, v44, v42, v43, v45);
  *(_DWORD *)(v34 + 200) = v46;
  if (v91)
    llvm::MetadataTracking::untrack((uint64_t)&v91, v91);
  if (v93 != v95)
    free(v93);
}

uint64_t sub_1C5D17020(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 **v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  unsigned __int8 *v20;
  int v21;

  v2 = *(_QWORD *)(result + 832);
  v3 = *(_DWORD *)(*(_QWORD *)v2 + 1040);
  if ((v3 & 0x80) == 0)
    return result;
  v4 = result;
  if ((v3 & 0x100) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 48);
    if (!v5 || v5 - 24 != a2)
    {
      v7 = *(_QWORD *)(a2 + 24);
      result = v7 ? v7 - 24 : 0;
      if (v7 && *(_BYTE *)(result + 16) == 84)
      {
        v8 = *(_QWORD *)(result + 64);
        if (v8 && (*(_BYTE *)(v8 + 16) & 1) != 0)
          return result;
        result = llvm::CallBase::hasFnAttrOnCalledFunction(result, 32);
        if ((result & 1) != 0)
          return result;
        v2 = *(_QWORD *)(v4 + 832);
      }
    }
  }
  v9 = *(_QWORD *)v4;
  v10 = *(_DWORD *)(v4 + 816);
  v20 = 0;
  v21 = v10;
  v11 = (unsigned __int8 **)(v9 + 48);
  if (v9)
    v12 = v11 == &v20;
  else
    v12 = 1;
  v13 = v2;
  if (!v12)
  {
    v14 = *v11;
    v20 = v14;
    v13 = v2;
    if (v14)
    {
      llvm::MetadataTracking::track((uint64_t)&v20, v14, 2);
      v13 = *(_QWORD *)(v4 + 832);
    }
  }
  v15 = *(_QWORD *)(v13 + 192);
  v16 = *(_QWORD *)(v13 + 200);
  v17 = *(_QWORD *)(v2 + 832);
  if (v17)
    v18 = *(_WORD *)(v17 + 8);
  else
    v18 = 0;
  result = (uint64_t)sub_1C5D52060(v2, 284, (const llvm::APInt *)&v20, (llvm *)1, 0, v15, v16, v18);
  *(_QWORD *)(v2 + 192) = result;
  *(_DWORD *)(v2 + 200) = v19;
  if (v20)
    return llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
  return result;
}

void sub_1C5D17144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int8 **v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _BOOL8 v17;
  char v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unsigned __int8 *v28;
  int v29;
  llvm *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  llvm *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  void *__p[2];
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  llvm *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  int v98;
  uint64_t v99;
  uint64_t v100[3];
  int v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 912) + 176;
  __p[0] = (void *)a2;
  v100[0] = 0;
  if ((sub_1C47A82D8(v4, __p, v100) & 1) == 0)
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 816);
    v97 = 0;
    v98 = v6;
    v8 = v5 == 0;
    v7 = (unsigned __int8 **)(v5 + 48);
    v8 = v8 || v7 == &v97;
    if (!v8)
    {
      v9 = *v7;
      v97 = v9;
      if (v9)
        llvm::MetadataTracking::track((uint64_t)&v97, v9, 2);
    }
    v10 = *(_QWORD *)(a2 + 64);
    v11 = *(_QWORD *)(a1 + 832);
    v12 = *(_QWORD *)(v11 + 24);
    v13 = *(_QWORD *)(**(_QWORD **)(v11 + 40) + 40);
    sub_1C4768AD0(v13 + 272, v10);
    v15 = (unint64_t)(v14 + 7) >> 3;
    v17 = v16 == 1;
    llvm::DataLayout::getAlignment(v13 + 272, v10);
    v19 = ((1 << v18) + v15 - 1) & -(1 << v18);
    llvm::DataLayout::getAlignment(v13 + 272, v10);
    v21 = __clz(1 << *(_WORD *)(a2 + 18)) ^ 0x3F;
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    v23 = (uint64_t)sub_1C635FDC4(a1, *(unsigned __int8 **)(a2 - 32));
    v25 = v24;
    LOBYTE(v95) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(unsigned int *)(v13 + 276));
    v96 = 0;
    v28 = (unsigned __int8 *)(*(_QWORD *)(v23 + 40) + 16 * v25);
    v29 = *v28;
    v30 = v95;
    if (v29 != v95 || ((v31 = *((_QWORD *)v28 + 1), !v29) ? (v32 = v31 == 0) : (v32 = 1), !v32))
    {
      v23 = sub_1C6366544(*(_QWORD *)(a1 + 832), v23, v25, (uint64_t)&v97, (uint64_t)v95, 0);
      v25 = v25 & 0xFFFFFFFF00000000 | v26;
    }
    v33 = *(_QWORD *)(a1 + 832);
    if (v17)
    {
      v34 = sub_1C6131328((unsigned __int8 *)&v95, v26, v27);
      v94 = v34;
      if (v34 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v93, v19, 0);
      }
      else
      {
        v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
        if (!v34)
          v35 = 0;
        v93 = v35 & v19;
      }
      v36 = sub_1C5C9E150(v33, (const llvm::APInt *)&v97, (uint64_t)v30, 0, (llvm::APInt *)&v93);
      v39 = 0;
      v40 = *(_QWORD *)(v33 + 832);
      if (v40)
        v39 = *(_WORD *)(v40 + 8);
      v41 = sub_1C5D56C70(v33, 58, (const llvm::APInt *)&v97, v30, 0, v23, v25, v38, v36, v37, v39);
      v43 = v25 & 0xFFFFFFFF00000000 | v42;
      if (v94 >= 0x41 && v93)
        MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
    }
    else
    {
      v44 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), v19, (const llvm::APInt *)&v97, v30, 0, 0, 0);
      v47 = 0;
      v48 = *(_QWORD *)(v33 + 832);
      if (v48)
        v47 = *(_WORD *)(v48 + 8);
      v41 = sub_1C5D56C70(v33, 58, (const llvm::APInt *)&v97, v30, 0, v23, v25, v46, (uint64_t)v44, v45, v47);
      v43 = v25 & 0xFFFFFFFF00000000 | v49;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 40) + 16);
    v51 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 112))(v50) + 12);
    if (v22 <= v51)
      v52 = 0;
    else
      v52 = v22;
    v53 = **(_QWORD **)(a1 + 832);
    if (*(char *)(v53 + 471) < 0)
    {
      sub_1C47EBC30(__p, *(void **)(v53 + 448), *(_QWORD *)(v53 + 456));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v53 + 448);
      v90 = *(_QWORD *)(v53 + 464);
    }
    v91 = *(_OWORD *)(v53 + 472);
    v92 = *(_QWORD *)(v53 + 488);
    if (HIDWORD(v91) > 0x21
      || ((1 << SBYTE12(v91)) & 0x3F0000888) == 0
      || (_DWORD)v91 != 42 && (_DWORD)v91 != 3
      || ((*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 832))(v12, *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8)), !v54))
    {
      v88 = v52;
      v55 = *(_QWORD *)(a1 + 832);
      v56 = v41[5] + 16 * v43;
      v57 = *(llvm **)v56;
      v58 = *(_QWORD *)(v56 + 8);
      v59 = sub_1C6366AB4(v55, (1 << v51) - 1, (const llvm::APInt *)&v97, v95, v96, 0, 0);
      v62 = sub_1C5D56C70(v55, 56, (const llvm::APInt *)&v97, v57, v58, (uint64_t)v41, v43, v61, (uint64_t)v59, v60, 3);
      v43 = v43 & 0xFFFFFFFF00000000 | v63;
      v64 = *(_QWORD *)(a1 + 832);
      v65 = v62[5] + 16 * v63;
      v66 = *(llvm **)v65;
      v67 = *(_QWORD *)(v65 + 8);
      v68 = sub_1C6366AB4(v64, -(1 << v51), (const llvm::APInt *)&v97, v95, v96, 0, 0);
      v71 = 0;
      v72 = *(_QWORD *)(v64 + 832);
      if (v72)
        v71 = *(_WORD *)(v72 + 8);
      v41 = sub_1C5D56C70(v64, 171, (const llvm::APInt *)&v97, v66, v67, (uint64_t)v62, v43, v70, (uint64_t)v68, v69, v71);
      LODWORD(v43) = v73;
      v52 = v88;
    }
    v100[0] = (uint64_t)sub_1C635C370(a1);
    v100[1] = v74;
    v100[2] = (uint64_t)v41;
    v101 = v43;
    if (v22 <= v51)
      v75 = 0;
    else
      v75 = 1 << v52;
    v102 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), v75, (const llvm::APInt *)&v97, v95, v96, 0, 0);
    v103 = v76;
    v77 = (uint64_t *)(v41[5] + 16 * v43);
    v79 = sub_1C636A8B4(*(_QWORD *)(a1 + 832), *v77, v77[1], 1, 0);
    v80 = 0;
    v81 = *(_QWORD *)(a1 + 832);
    v82 = *(_QWORD *)(v81 + 832);
    if (v82)
      v80 = *(_WORD *)(v82 + 8);
    v83 = sub_1C636D410(v81, (const char *)0xFF, (const llvm::APInt *)&v97, v79, v78, v100, 3, v80);
    v85 = v84;
    v99 = a2;
    v86 = sub_1C6364290((uint64_t *)(a1 + 8), &v99);
    v86[1] = v83;
    *((_DWORD *)v86 + 4) = v85;
    v87 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(v87 + 192) = v83;
    *(_DWORD *)(v87 + 200) = 1;
    if (SHIBYTE(v90) < 0)
      operator delete(__p[0]);
    if (v97)
      llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
  }
}

void sub_1C5D176F0(uint64_t a1, uint64_t ***a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned __int8 **v7;
  BOOL v8;
  __int16 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::TargetLoweringBase *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t ExtendedSizeInBits;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t ****v38;
  uint64_t ***v39;
  uint64_t ****v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int16 LoadMemOperandFlags;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  const char *v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t ****v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  llvm *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int16 v150;
  uint64_t *v151;
  int v152;
  int v153;
  _QWORD *v154;
  uint64_t v155;
  char v156;
  __int16 v157;
  uint64_t v158;
  __int16 v159;
  unint64_t v160;
  unint64_t v161;
  __int16 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  unsigned int v172;
  char v173;
  unsigned __int8 *v174;
  int v175;
  _OWORD v176[2];
  uint64_t ***v177;
  void *v178[2];
  _BYTE v179[64];
  void *v180;
  uint64_t v181;
  _OWORD v182[4];
  void *v183[2];
  _BYTE v184[32];
  void *v185;
  uint64_t v186;
  _BYTE v187[64];
  unsigned __int8 *v188;
  uint64_t v189;
  _QWORD v190[10];

  v190[8] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 60 || v4 == 61)
  {
    if ((*((_WORD *)a2 + 9) & 0x380) == 0)
      goto LABEL_14;
    goto LABEL_3;
  }
  if ((v4 - 63) < 3)
  {
LABEL_3:
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 816);
    v188 = 0;
    LODWORD(v189) = v6;
    v8 = v5 == 0;
    v7 = (unsigned __int8 **)(v5 + 48);
    v8 = v8 || v7 == &v188;
    if (!v8)
    {
      v188 = *v7;
      if (v188)
        llvm::MetadataTracking::track((uint64_t)&v188, v188, 2);
    }
    v167 = *((unsigned __int16 *)a2 + 9);
    v9 = *((unsigned __int8 *)a2 + 60);
    v10 = sub_1C635C370(a1);
    v169 = v11;
    v12 = *(_QWORD *)(a1 + 832);
    v13 = *(llvm::TargetLoweringBase **)(v12 + 24);
    v14 = sub_1C47A7FD0((uint64_t)v13, *(_QWORD *)(**(_QWORD **)(v12 + 40) + 40) + 272, (uint64_t)*a2, 0);
    v16 = v15;
    v17 = (void *)sub_1C5065E80((uint64_t)v13, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, (uint64_t)*a2, 0);
    v185 = v17;
    v186 = v18;
    if (!*((_BYTE *)v13 + 84))
    {
      v19 = (unint64_t)*((unsigned __int16 *)a2 + 9) >> 1;
      if ((_BYTE)v17)
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v185);
      else
        ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v185);
      v48 = ExtendedSizeInBits;
      v49 = 1 << v19;
      if ((_DWORD)v21 == 1)
      if (v49 < v48 >> 3)
        llvm::report_fatal_error((llvm *)"Cannot generate unaligned atomic load", (const char *)1);
    }
    v162 = v9;
    LoadMemOperandFlags = llvm::TargetLoweringBase::getLoadMemOperandFlags(v13, a2, (const llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40)+ 272));
    v51 = *(_QWORD *)(a1 + 832);
    v52 = (uint64_t)*(a2 - 4);
    v53 = v52 & 0xFFFFFFFFFFFFFFFBLL;
    v164 = v16;
    v165 = v14;
    v54 = a1;
    if (v52)
    {
      v57 = *(_QWORD *)v52;
      v58 = *(_DWORD *)(*(_QWORD *)v52 + 8);
      if ((v58 & 0xFE) == 0x12)
        v58 = *(_DWORD *)(**(_QWORD **)(v57 + 16) + 8);
      v55 = v10;
      v56 = v58 >> 8;
    }
    else
    {
      v55 = v10;
      v56 = 0;
    }
    v59 = *(_QWORD *)(v51 + 40);
    v61 = sub_1C47C1C70((unsigned __int8 *)&v185);
    if ((_DWORD)v60 == 1)
    v62 = *((unsigned __int8 *)a2 + 18);
    v63 = sub_1C484358C(v59 + 128, 80, 3);
    v64 = v63;
    v65 = ((v61 & 0x1FFFFFFF) << 6) | 1;
    if (v61 == -1)
      v65 = 0;
    *(_QWORD *)v63 = v53;
    *(_QWORD *)(v63 + 8) = 0;
    *(_DWORD *)(v63 + 16) = v56;
    *(_BYTE *)(v63 + 20) = 0;
    *(_QWORD *)(v63 + 24) = v65;
    *(_WORD *)(v63 + 32) = LoadMemOperandFlags;
    *(_BYTE *)(v63 + 34) = (v62 >> 1) & 0x3F;
    *(_OWORD *)(v63 + 40) = 0u;
    *(_OWORD *)(v63 + 56) = 0u;
    *(_QWORD *)(v63 + 72) = 0;
    *(_WORD *)(v63 + 36) = v162 & 0xF8FF | (((v167 >> 7) & 7) << 8);
    v66 = (*(uint64_t (**)(llvm::TargetLoweringBase *, uint64_t *, uint64_t, unsigned __int8 **, _QWORD))(*(_QWORD *)v13 + 1936))(v13, v55, v169, &v188, *(_QWORD *)(v54 + 832));
    v68 = v67;
    v69 = sub_1C635FDC4(v54, (unsigned __int8 *)*(a2 - 4));
    v71 = v70;
    v73 = (*(uint64_t (**)(llvm::TargetLoweringBase *, uint64_t ***))(*(_QWORD *)v13 + 1952))(v13, a2);
    v74 = *(_QWORD *)(v54 + 832);
    if (v73)
    {
      v76 = (uint64_t)sub_1C636B420(v74, (uint64_t)v185, v186, (uint64_t)&v188, v66, v68, (uint64_t)v69, v71, v64);
      v77 = v75;
      if (v185 != v165 || !(_BYTE)v165 && v186 != v164)
      {
        v76 = sub_1C6366544(*(_QWORD *)(v54 + 832), v76, v75, (uint64_t)&v188, v165, v164);
        v77 = v78;
      }
      v180 = a2;
      v79 = sub_1C6364290((uint64_t *)(v54 + 8), &v180);
      v79[1] = v76;
      *((_DWORD *)v79 + 4) = v77;
      if ((*((_WORD *)a2 + 9) & 0x301) == 0)
      {
        v80 = *(unsigned int *)(v54 + 112);
        if (v80 >= *(_DWORD *)(v54 + 116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v54 + 104, v54 + 120, v80 + 1, 16);
          LODWORD(v80) = *(_DWORD *)(v54 + 112);
        }
        v81 = (uint64_t *)(*(_QWORD *)(v54 + 104) + 16 * v80);
        *v81 = v76;
        v81[1] = 1;
        ++*(_DWORD *)(v54 + 112);
        goto LABEL_80;
      }
LABEL_79:
      v88 = *(_QWORD *)(v54 + 832);
      *(_QWORD *)(v88 + 192) = v76;
      *(_DWORD *)(v88 + 200) = 1;
LABEL_80:
      if (v188)
        llvm::MetadataTracking::untrack((uint64_t)&v188, v188);
      return;
    }
    v82 = sub_1C636AA2C(v74, 290, (uint64_t)&v188, (uint64_t)v185, v186, (uint64_t)v185, v186, v72, v66, v68, (uint64_t)v69, v71, v64);
    v76 = (uint64_t)v82;
    v84 = v83;
    if (v185 != v165)
      goto LABEL_77;
    if ((_BYTE)v185)
    {
      v85 = (uint64_t)v82;
      goto LABEL_78;
    }
    v85 = (uint64_t)v82;
    if (v186 != v164)
    {
LABEL_77:
      v85 = sub_1C6366544(*(_QWORD *)(v54 + 832), (uint64_t)v82, v83, (uint64_t)&v188, v165, v164);
      v84 = v86;
    }
LABEL_78:
    v180 = a2;
    v87 = sub_1C6364290((uint64_t *)(v54 + 8), &v180);
    v87[1] = v85;
    *((_DWORD *)v87 + 4) = v84;
    goto LABEL_79;
  }
LABEL_14:
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
  v23 = (uint64_t)*(a2 - 4);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 1768))(v22))
    goto LABEL_28;
  v24 = *(unsigned __int8 *)(v23 + 16);
  if (v24 == 21 && v23 != 0)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 112);
    if (!v27)
      goto LABEL_28;
    v28 = *(_DWORD *)(v23 + 32) + 2;
    if (v28 >= *(_DWORD *)(v27 + 8))
      goto LABEL_28;
    v155 = *(_QWORD *)(v27 + 8 * v28 + 40);
    if (!v155 || (*(char *)(v155 + 19) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_25:
    sub_1C6361DBC(a1, (unsigned __int8 *)a2);
    return;
  }
  v26 = v24 != 59 || v23 == 0;
  if (!v26 && (*(_WORD *)(v23 + 18) & 0x80) != 0)
    goto LABEL_25;
LABEL_28:
  v29 = sub_1C635FDC4(a1, (unsigned __int8 *)v23);
  v161 = v30;
  v163 = (uint64_t)v29;
  v31 = (uint64_t)*a2;
  v32 = *((unsigned __int16 *)a2 + 9);
  llvm::Instruction::getAAMetadata(a2, v176);
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_44;
  v33 = ***a2;
  v188 = (unsigned __int8 *)a2;
  v34 = *(_DWORD *)(v33 + 2496);
  if (v34)
  {
    v35 = *(_QWORD *)(v33 + 2480);
    v36 = v34 - 1;
    v37 = v36 & ((a2 >> 4) ^ (a2 >> 9));
    v38 = (uint64_t ****)(v35 + 40 * v37);
    v39 = *v38;
    if (*v38 == a2)
      goto LABEL_39;
    v40 = 0;
    v41 = 1;
    while (v39 != (uint64_t ***)-4096)
    {
      if (v40)
        v42 = 0;
      else
        v42 = v39 == (uint64_t ***)-8192;
      if (v42)
        v40 = v38;
      v43 = v37 + v41++;
      v37 = v43 & v36;
      v38 = (uint64_t ****)(v35 + 40 * v37);
      v39 = *v38;
      if (*v38 == a2)
        goto LABEL_39;
    }
    if (v40)
      v90 = v40;
    else
      v90 = v38;
  }
  else
  {
    v90 = 0;
  }
  v38 = (uint64_t ****)sub_1C541AB24(v33 + 2480, (uint64_t)&v188, (uint64_t *)&v188, v90);
  v91 = v188;
  v38[3] = 0;
  v38[4] = 0;
  *v38 = (uint64_t ***)v91;
  v38[1] = (uint64_t ***)(v38 + 3);
  v38[2] = (uint64_t ***)0x100000000;
LABEL_39:
  v44 = *((unsigned int *)v38 + 4);
  if ((_DWORD)v44)
  {
    v45 = (uint64_t *)(v38[1] + 1);
    v46 = 16 * v44;
    while (*((_DWORD *)v45 - 2) != 4)
    {
      v170 = 0;
      v45 += 2;
      v46 -= 16;
      if (!v46)
        goto LABEL_45;
    }
    v170 = *v45;
    goto LABEL_45;
  }
LABEL_44:
  v170 = 0;
LABEL_45:
  v188 = (unsigned __int8 *)v190;
  v189 = 0x400000000;
  v185 = v187;
  v186 = 0x400000000;
  v47 = (unint64_t)v184;
  v183[0] = v184;
  v183[1] = (void *)0x400000000;
  llvm::ComputeValueVTs(v22, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), v31, (uint64_t)&v188, (uint64_t)&v185, (uint64_t)v183, 0);
  if ((_DWORD)v189)
  {
    v157 = *((_WORD *)a2 + 9);
    v160 = v189;
    if ((v157 & 1) != 0)
    {
      v168 = sub_1C635C370(a1);
      v156 = 0;
    }
    else if (v189 < 0x41)
    {
      v92 = *(_QWORD *)(a1 + 840);
      if (!v92)
        goto LABEL_98;
      sub_1C4768AD0(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, v31);
      v94 = (unint64_t)(v93 + 7) >> 3;
      if (v95 == 1)
        v94 = -2;
      v180 = (void *)v23;
      v181 = v94;
      v182[0] = v176[0];
      v182[1] = v176[1];
      if (llvm::AAResults::pointsToConstantMemory(v92, (uint64_t)&v180, 0))
      {
        v89 = 0;
        v168 = (uint64_t *)(*(_QWORD *)(a1 + 832) + 112);
        v156 = 1;
      }
      else
      {
LABEL_98:
        v156 = 0;
        v96 = *(_QWORD *)(a1 + 832);
        v168 = *(uint64_t **)(v96 + 192);
        v89 = *(_DWORD *)(v96 + 200);
      }
    }
    else
    {
      v168 = sub_1C5D14AF0((uint64_t *)a1, a1 + 104);
      v156 = 0;
    }
    v97 = *(_QWORD *)a1;
    v98 = *(_DWORD *)(a1 + 816);
    v166 = v89;
    v174 = 0;
    v175 = v98;
    if (v97)
    {
      v99 = (unsigned __int8 **)(v97 + 48);
      if (v99 != &v174)
      {
        v100 = *v99;
        v174 = v100;
        if (v100)
          llvm::MetadataTracking::track((uint64_t)&v174, v100, 2);
      }
    }
    v101 = (v32 >> 1) & 0x3F;
    if ((v157 & 1) != 0)
    {
      v102 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, unsigned __int8 **, _QWORD))(*(_QWORD *)v22 + 1936))(v22, v168, v166, &v174, *(_QWORD *)(a1 + 832));
      LODWORD(v166) = v103;
      v168 = (uint64_t *)v102;
    }
    v180 = v182;
    v181 = 0x400000000;
    sub_1C4825C80((unsigned int *)&v180, v160, 0, 0);
    if (v160 >= 0x40)
      v104 = 64;
    else
      v104 = v160;
    v178[0] = v179;
    v178[1] = (void *)0x400000000;
    sub_1C4825C80((unsigned int *)v178, v104, 0, 0);
    v105 = *(_QWORD *)(v163 + 40) + 16 * v161;
    v107 = *(llvm **)v105;
    v106 = *(_QWORD *)(v105 + 8);
    v159 = llvm::TargetLoweringBase::getLoadMemOperandFlags((llvm::TargetLoweringBase *)v22, a2, (const llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272));
    v108 = 0;
    v109 = 0;
    LODWORD(v22) = 0;
    v158 = v101 | 0x100;
    do
    {
      if ((_DWORD)v22 == 64)
      {
        v110 = *(_QWORD *)(a1 + 832);
        v111 = *(_QWORD *)(v110 + 832);
        if (v111)
          v112 = *(unsigned __int16 *)(v111 + 8);
        else
          v112 = 0;
        v113 = sub_1C636D0C8(v110, (const char *)2, (const llvm::APInt *)&v174, (llvm *)1, 0, (uint64_t *)v178[0], 64, v112);
        LODWORD(v22) = 0;
        LODWORD(v166) = v114;
        v168 = v113;
      }
      v115 = *(_QWORD *)(a1 + 832);
      v116 = sub_1C6366AB4(v115, *((_QWORD *)v183[0] + v109), (const llvm::APInt *)&v174, v107, v106, 0, 0);
      v119 = sub_1C5D56C70(v115, 56, (const llvm::APInt *)&v174, v107, v106, v163, v161, v118, (uint64_t)v116, v117, 3);
      v121 = v120;
      v122 = 0;
      v123 = *(_QWORD *)(a1 + 832);
      v124 = *(_QWORD *)((char *)v185 + v108);
      v125 = *(_QWORD *)((char *)v185 + v108 + 8);
      v126 = *((_QWORD *)v183[0] + v109);
      *(_QWORD *)&v171 = v23 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v171 + 1) = v126;
      v173 = 0;
      if (v23)
      {
        v127 = *(_DWORD *)(*(_QWORD *)v23 + 8);
        if ((v127 & 0xFE) == 0x12)
          v127 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v23 + 16) + 8);
        v122 = v127 >> 8;
      }
      v172 = v122;
      v47 = v47 & 0xFFFFFFFFFFFF0000 | v158;
      v129 = (uint64_t)sub_1C63681B0(v123, v124, v125, (uint64_t)&v174, (uint64_t)v168, v166, (uint64_t)v119, v121, &v171, v47, SHIDWORD(v47), v159, (uint64_t)v176, v170);
      v130 = v128;
      v131 = (char *)v178[0] + 16 * v22;
      *(_QWORD *)v131 = v129;
      *((_DWORD *)v131 + 2) = 1;
      v132 = *(_QWORD *)&v188[v108];
      v133 = *(_QWORD *)&v188[v108 + 8];
      if (*((unsigned __int8 *)v185 + v108) != v132
        || !*((_BYTE *)v185 + v108) && *(_QWORD *)((char *)v185 + v108 + 8) != v133)
      {
        v129 = sub_1C6366544(*(_QWORD *)(a1 + 832), v129, v128, (uint64_t)&v174, v132, v133);
        v130 = v134;
      }
      v135 = (char *)v180 + v108;
      *(_QWORD *)v135 = v129;
      *((_DWORD *)v135 + 2) = v130;
      ++v109;
      v22 = (v22 + 1);
      v108 += 16;
    }
    while ((_DWORD)v160 != (_DWORD)v109);
    if ((v156 & 1) == 0)
    {
      v136 = *(_QWORD *)(a1 + 832);
      v137 = *(_QWORD *)(v136 + 832);
      if (v137)
        v138 = *(unsigned __int16 *)(v137 + 8);
      else
        v138 = 0;
      v139 = sub_1C636D0C8(v136, (const char *)2, (const llvm::APInt *)&v174, (llvm *)1, 0, (uint64_t *)v178[0], v22, v138);
      v141 = v139;
      v142 = v140;
      if ((v157 & 1) != 0)
      {
        v145 = *(_QWORD *)(a1 + 832);
        *(_QWORD *)(v145 + 192) = v139;
        *(_DWORD *)(v145 + 200) = (_DWORD)v140;
      }
      else
      {
        v143 = *(unsigned int *)(a1 + 112);
        if (v143 >= *(_DWORD *)(a1 + 116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v143 + 1, 16);
          LODWORD(v143) = *(_DWORD *)(a1 + 112);
        }
        v144 = (uint64_t **)(*(_QWORD *)(a1 + 104) + 16 * v143);
        *v144 = v141;
        v144[1] = v142;
        ++*(_DWORD *)(a1 + 112);
      }
    }
    v146 = *(_QWORD *)(a1 + 832);
    v148 = sub_1C636AB20(v146, (uint64_t *)v188, v189);
    v149 = *(_QWORD *)(v146 + 832);
    if (v149)
      v150 = *(_WORD *)(v149 + 8);
    else
      v150 = 0;
    v151 = sub_1C636D410(v146, (const char *)0x37, (const llvm::APInt *)&v174, v148, v147, (uint64_t *)v180, v181, v150);
    v153 = v152;
    v177 = a2;
    v154 = sub_1C6364290((uint64_t *)(a1 + 8), &v177);
    v154[1] = v151;
    *((_DWORD *)v154 + 4) = v153;
    if (v178[0] != v179)
      free(v178[0]);
    if (v180 != v182)
      free(v180);
    if (v174)
      llvm::MetadataTracking::untrack((uint64_t)&v174, v174);
  }
  if (v183[0] != v184)
    free(v183[0]);
  if (v185 != v187)
    free(v185);
  if (v188 != (unsigned __int8 *)v190)
    free(v188);
}

void sub_1C5D18324(uint64_t a1, unint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::TargetLoweringBase *v7;
  int v8;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int16 StoreMemOperandFlags;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  _QWORD v69[2];
  unsigned int v70;
  char v71;
  _QWORD v72[4];
  unsigned __int8 *v73;
  int v74;
  void *v75[2];
  _BYTE v76[64];
  void *v77[2];
  _BYTE v78[32];
  void *v79[2];
  _BYTE v80[64];
  char *v81;
  uint64_t v82;
  _QWORD v83[10];

  v83[8] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 60 || v4 == 61)
  {
    if ((*(_WORD *)(a2 + 18) & 0x380) != 0)
    {
LABEL_27:
      sub_1C636210C(a1, a2);
      return;
    }
  }
  else if ((v4 - 63) < 3)
  {
    goto LABEL_27;
  }
  v5 = *(uint64_t **)(a2 - 64);
  v6 = *(_QWORD *)(a2 - 32);
  v7 = *(llvm::TargetLoweringBase **)(*(_QWORD *)(a1 + 832) + 24);
  if ((*(unsigned int (**)(llvm::TargetLoweringBase *))(*(_QWORD *)v7 + 1768))(v7))
  {
    v8 = *(unsigned __int8 *)(v6 + 16);
    if (v8 != 21 || v6 == 0)
    {
      v10 = v8 != 59 || v6 == 0;
      if (!v10 && (*(_WORD *)(v6 + 18) & 0x80) != 0)
        goto LABEL_14;
    }
    else
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 112);
      if (v11)
      {
        v12 = *(_DWORD *)(v6 + 32) + 2;
        if (v12 < *(_DWORD *)(v11 + 8))
        {
          v60 = *(_QWORD *)(v11 + 8 * v12 + 40);
          if (v60)
          {
            if (*(char *)(v60 + 19) < 0)
            {
LABEL_14:
              sub_1C6361F40(a1, a2);
              return;
            }
          }
        }
      }
    }
  }
  v13 = (char *)v83;
  v81 = (char *)v83;
  v82 = 0x400000000;
  v14 = v80;
  v79[0] = v80;
  v79[1] = (void *)0x400000000;
  v77[0] = v78;
  v77[1] = (void *)0x400000000;
  llvm::ComputeValueVTs(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), *v5, (uint64_t)&v81, (uint64_t)v79, (uint64_t)v77, 0);
  v15 = v82;
  if (!(_DWORD)v82)
    goto LABEL_18;
  v16 = sub_1C635FDC4(a1, (unsigned __int8 *)v5);
  v65 = v17;
  v66 = (uint64_t)v16;
  v18 = sub_1C635FDC4(a1, (unsigned __int8 *)v6);
  v63 = v19;
  v64 = (uint64_t)v18;
  if ((*(_WORD *)(a2 + 18) & 1) != 0)
    v20 = sub_1C635C370(a1);
  else
    v20 = sub_1C5D14AF0((uint64_t *)a1, a1 + 104);
  v67 = v20;
  v68 = v21;
  if (v15 >= 0x40)
    v22 = 64;
  else
    v22 = v15;
  v75[0] = v76;
  v75[1] = (void *)0x400000000;
  sub_1C4825C80((unsigned int *)v75, v22, 0, 0);
  v23 = *(_QWORD *)a1;
  v24 = *(_DWORD *)(a1 + 816);
  v73 = 0;
  v74 = v24;
  if (v23)
  {
    v25 = (unsigned __int8 **)(v23 + 48);
    if (v25 != &v73)
    {
      v26 = *v25;
      v73 = v26;
      if (v26)
        llvm::MetadataTracking::track((uint64_t)&v73, v26, 2);
    }
  }
  v62 = ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v72);
  StoreMemOperandFlags = llvm::TargetLoweringBase::getStoreMemOperandFlags(v7, (const llvm::StoreInst *)a2, (const llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40)+ 272));
  v27 = 0;
  v28 = 0;
  LODWORD(v29) = 0;
  do
  {
    if ((_DWORD)v29 == 64)
    {
      v30 = *(_QWORD *)(a1 + 832);
      v31 = *(_QWORD *)(v30 + 832);
      if (v31)
        v32 = *(unsigned __int16 *)(v31 + 8);
      else
        v32 = 0;
      LODWORD(v29) = 0;
      v67 = sub_1C636D0C8(v30, (const char *)2, (const llvm::APInt *)&v73, (llvm *)1, 0, (uint64_t *)v75[0], 64, v32);
      v68 = v33;
    }
    v35 = sub_1C6369954(*(_QWORD *)(a1 + 832), v64, v63, *((_QWORD *)v77[0] + v28), 0, (const llvm::APInt *)&v73, 3);
    v36 = v34;
    v37 = v65 + v28;
    if (*((unsigned __int8 *)v79[0] + v27) == v81[v27])
    {
      if (*((_BYTE *)v79[0] + v27) || (v38 = *(_QWORD *)((char *)v79[0] + v27 + 8), v38 == *(_QWORD *)&v81[v27 + 8]))
      {
        v39 = v66;
        goto LABEL_49;
      }
    }
    else
    {
      v38 = *(_QWORD *)((char *)v79[0] + v27 + 8);
    }
    v40 = v13;
    v41 = v35;
    v42 = v14;
    v43 = v15;
    v44 = v34;
    v45 = sub_1C6366544(*(_QWORD *)(a1 + 832), v66, (v65 + v28), (uint64_t)&v73, *(_QWORD *)((char *)v79[0] + v27), v38);
    v36 = v44;
    v15 = v43;
    v14 = v42;
    v35 = v41;
    v13 = v40;
    v39 = v45;
    v37 = v46;
LABEL_49:
    v47 = 0;
    v48 = *(_QWORD *)(a1 + 832);
    v49 = *((_QWORD *)v77[0] + v28);
    v69[0] = v6 & 0xFFFFFFFFFFFFFFFBLL;
    v69[1] = v49;
    v71 = 0;
    if (v6)
    {
      v50 = *(_DWORD *)(*(_QWORD *)v6 + 8);
      if ((v50 & 0xFE) == 0x12)
        v50 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
      v47 = v50 >> 8;
    }
    v70 = v47;
    v51 = sub_1C636B75C(v48, (uint64_t)v67, v68, (uint64_t)&v73, v39, v37, (uint64_t)v35, v36, (uint64_t)v69, v62, SHIDWORD(v62), StoreMemOperandFlags, (uint64_t)v72);
    v52 = (char *)v75[0] + 16 * v29;
    *(_QWORD *)v52 = v51;
    *((_DWORD *)v52 + 2) = v53;
    ++v28;
    v29 = (v29 + 1);
    v27 += 16;
  }
  while ((_DWORD)v15 != (_DWORD)v28);
  v54 = *(_QWORD *)(a1 + 832);
  v55 = *(_QWORD *)(v54 + 832);
  if (v55)
    v56 = *(unsigned __int16 *)(v55 + 8);
  else
    v56 = 0;
  v57 = sub_1C636D0C8(v54, (const char *)2, (const llvm::APInt *)&v73, (llvm *)1, 0, (uint64_t *)v75[0], v29, v56);
  v58 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(v58 + 192) = v57;
  *(_DWORD *)(v58 + 200) = v59;
  if (v73)
    llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
  if (v75[0] != v76)
    free(v75[0]);
LABEL_18:
  if (v77[0] != v78)
    free(v77[0]);
  if (v79[0] != v14)
    free(v79[0]);
  if (v81 != v13)
    free(v81);
}

_QWORD *sub_1C5D18880(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  llvm *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Constant **v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v37;
  unint64_t v38;
  llvm::Constant **v39;
  llvm::UndefValue *AggregateElement;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  llvm *v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  llvm::DataLayout *v59;
  unsigned int v60;
  unint64_t v61;
  llvm::Constant *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  _BOOL8 v73;
  unsigned int v74;
  llvm::APFloatBase *SplatValue;
  llvm::APInt *v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  llvm *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  _QWORD *v101;
  uint8x8_t v102;
  int v103;
  int v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  llvm *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  __int128 *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  llvm *v136;
  uint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  int v144;
  uint8x8_t v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  llvm *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  unsigned int v176;
  char v177;
  int v178;
  _QWORD *result;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  llvm *v183;
  llvm *v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  _BOOL4 v188;
  unint64_t v189;
  int v190;
  int v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  __int128 v196;
  _QWORD *v197;
  unsigned int v198;
  llvm::Constant **v199;
  uint64_t v200;
  unsigned __int8 *v201;
  int v202;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(unsigned __int8 ***)(a2 - 8);
  else
    v5 = (unsigned __int8 **)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  v7 = *(_QWORD *)*v5;
  v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    v7 = **(_QWORD **)(v7 + 16);
    v8 = *(_DWORD *)(v7 + 8);
  }
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
  v9 = sub_1C635FDC4(a1, v6);
  v11 = v10;
  v12 = *(_QWORD *)a1;
  v13 = *(_DWORD *)(a1 + 816);
  v201 = 0;
  v202 = v13;
  if (v12)
  {
    v14 = (unsigned __int8 **)(v12 + 48);
    if (v14 != &v201)
    {
      v201 = *v14;
      if (v201)
        llvm::MetadataTracking::track((uint64_t)&v201, v201, 2);
    }
  }
  v15 = *(_QWORD *)(a1 + 832);
  v180 = *(_QWORD *)(v15 + 24);
  v191 = *(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE;
  if (v191 != 18)
  {
    v193 = v11;
    v188 = 0;
    v189 = 0;
    goto LABEL_21;
  }
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 8) == 19;
  v17 = (uint64_t *)(v9[5] + 16 * v11);
  v18 = *v17;
  v19 = v17[1];
  v20 = *v17;
  v188 = *(_DWORD *)(*(_QWORD *)a2 + 8) == 19;
  v189 = *(unsigned int *)(*(_QWORD *)a2 + 32) | (unint64_t)(v16 << 32);
  if (!v20)
  {
    if ((*(_DWORD *)(v19 + 8) & 0xFE) != 0x12)
      goto LABEL_16;
LABEL_19:
    v193 = v11;
    goto LABEL_21;
  }
  if ((v20 - 15) < 0x9C)
    goto LABEL_19;
LABEL_16:
  v22 = (llvm *)sub_1C47AC578(*(llvm::LLVMContext **)(v15 + 56), v18, v19, (llvm::Type *)(*(unsigned int *)(*(_QWORD *)a2 + 32) | (unint64_t)(v16 << 32)));
  v23 = *(_QWORD *)(a1 + 832);
  v24 = v11 & 0xFFFFFFFF00000000;
  if (v188)
  {
    v9 = sub_1C5CA0F18(v23, v22, v21, (const llvm::APInt *)&v201, (uint64_t)v9, v11);
    v193 = v26 | v24;
    v188 = 1;
  }
  else
  {
    v9 = sub_1C5CA0FB8(v23, v22, v21, (const llvm::APInt *)&v201, (uint64_t)v9, v11);
    v188 = 0;
    v193 = v25 | v24;
  }
LABEL_21:
  v27 = v8 >> 8;
  v28 = 24;
  if (*(_BYTE *)(a2 + 16) == 62)
    v28 = 64;
  v29 = *(_QWORD *)(a2 + v28);
  v30 = *(_DWORD *)(a2 + 20);
  if ((v30 & 0x40000000) != 0)
  {
    v32 = *(_QWORD *)(a2 - 8);
    v31 = v30 & 0x7FFFFFF;
  }
  else
  {
    v31 = v30 & 0x7FFFFFF;
    v32 = a2 - 32 * v31;
  }
  v192 = v9;
  v187 = a2;
  v33 = v29 | 4;
  v34 = (llvm::Constant **)(v32 + 32);
  v199 = (llvm::Constant **)(v32 + 32);
  v200 = v33;
  if (v31 != 1)
  {
    v190 = v33;
    v186 = v33;
    v39 = (llvm::Constant **)(v32 + 32 * v31);
    while (1)
    {
      AggregateElement = *v34;
      v41 = v200;
      v42 = v200 & 0xFFFFFFFFFFFFFFF8;
      if ((v200 & 4) != 0 || !v42)
        break;
      if (AggregateElement)
        v43 = *((_BYTE *)AggregateElement + 16) == 16;
      else
        v43 = 0;
      if (!v43)
        AggregateElement = llvm::Constant::getAggregateElement(*v34, 0);
      v46 = (_DWORD *)*((_QWORD *)AggregateElement + 3);
      v45 = (_DWORD *)((char *)AggregateElement + 24);
      v44 = v46;
      if (v45[2] < 0x41u)
        v44 = v45;
      if (*v44)
      {
        v47 = *v44;
        v48 = *((_QWORD *)llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), (llvm::StructType *)(v41 & 0xFFFFFFFFFFFFFFF8))+ v47+ 2);
        v49 = v190 & 0xFFFFF000;
        if ((v48 & 0x8000000000000000) == 0 && (*(_BYTE *)(v187 + 17) & 2) != 0)
          v49 |= 3u;
        v50 = *(_QWORD *)(a1 + 832);
        v51 = v192[5] + 16 * v193;
        v52 = *(llvm **)v51;
        v53 = *(_QWORD *)(v51 + 8);
        v54 = v49;
        v55 = sub_1C6366AB4(v50, v48, (const llvm::APInt *)&v201, *(llvm **)v51, v53, 0, 0);
        v190 = v54;
        v192 = sub_1C5D56C70(v50, 56, (const llvm::APInt *)&v201, v52, v53, (uint64_t)v192, v193, v57, (uint64_t)v55, v56, v54);
        v193 = v193 & 0xFFFFFFFF00000000 | v58;
      }
LABEL_117:
      sub_1C4774E38((uint64_t)&v199);
      v34 = v199;
      if (v199 == v39)
        goto LABEL_27;
    }
    v59 = (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272);
    v60 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v59, v27) + 12);
    if ((int)v60 > 31)
    {
      switch(v60)
      {
        case 0x20u:
          v61 = 5;
          if ((v41 & 4) != 0)
            goto LABEL_66;
          break;
        case 0x40u:
          v61 = 6;
          if ((v41 & 4) != 0)
            goto LABEL_66;
          break;
        case 0x80u:
          v61 = 7;
          if ((v41 & 4) != 0)
            goto LABEL_66;
          break;
        default:
          v61 = 0;
          if ((v41 & 4) != 0)
            goto LABEL_66;
          break;
      }
    }
    else if (v60 == 1)
    {
      v61 = 2;
      if ((v41 & 4) != 0)
        goto LABEL_66;
    }
    else
    {
      if (v60 != 8)
      {
        if (v60 == 16)
          v61 = 4;
        else
          v61 = 0;
        if ((v41 & 4) == 0)
          goto LABEL_67;
LABEL_66:
        if (v42)
          goto LABEL_72;
        goto LABEL_67;
      }
      v61 = 3;
      if ((v41 & 4) != 0)
        goto LABEL_66;
    }
LABEL_67:
    v62 = *v34;
    if (!*v34 || *((_BYTE *)v62 + 16) != 16)
      v62 = llvm::Constant::getAggregateElement(v62, 0);
    v65 = (unsigned int *)*((_QWORD *)v62 + 3);
    v63 = (unsigned int *)((char *)v62 + 24);
    v64 = v65;
    if (v63[2] < 0x41)
      v64 = v63;
    v42 = *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * *v64);
LABEL_72:
    sub_1C4768AD0((uint64_t)v59, v42);
    v67 = (unint64_t)(v66 + 7) >> 3;
    v69 = v68 == 1;
    llvm::DataLayout::getAlignment((uint64_t)v59, v42);
    v71 = ((1 << v70) + v67 - 1) & -(1 << v70);
    v198 = v60;
    if (v60 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v197, v71, 0);
    }
    else
    {
      v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v60;
      if (!v60)
        v72 = 0;
      v197 = (_QWORD *)(v72 & v71);
    }
    v73 = v69;
    v74 = *((unsigned __int8 *)AggregateElement + 16);
    if (v74 <= 0x14 && AggregateElement)
    {
      SplatValue = AggregateElement;
      if ((*(_DWORD *)(*(_QWORD *)AggregateElement + 8) & 0xFE) == 0x12)
      {
        SplatValue = llvm::Constant::getSplatValue(AggregateElement, 0);
        if (!SplatValue)
          goto LABEL_90;
        v74 = *((unsigned __int8 *)SplatValue + 16);
      }
      if (v74 == 16)
      {
        v76 = (llvm::APFloatBase *)((char *)SplatValue + 24);
        v77 = *((_DWORD *)SplatValue + 8);
        if (v77 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APFloatBase *)((char *)SplatValue + 24)) == v77)
            goto LABEL_86;
        }
        else if (!*(_QWORD *)v76)
        {
          goto LABEL_86;
        }
        if (!v73)
        {
          v116 = v77 > v60;
          if (v77 < v60)
          {
            llvm::APInt::sext(v76, v60, (llvm::APInt *)&v194);
            v117 = v185;
            v118 = v186;
          }
          else
          {
            v117 = v185;
            v118 = v186;
            if (v116)
              llvm::APInt::trunc(v76, v60, (llvm::APInt *)&v194);
            else
              sub_1C5DD14E0((uint64_t)&v194, (uint64_t)v76);
          }
          llvm::APInt::operator*((uint64_t)&v197, &v194, (uint64_t)&v196);
          if (v195 >= 0x41 && v194)
            MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
          v119 = *(_QWORD *)(a1 + 832);
          if (v191 == 18)
          {
            v61 = sub_1C47AC578(*(llvm::LLVMContext **)(v119 + 56), v61, 0, (llvm::Type *)v189);
            v120 = v121;
          }
          else
          {
            v120 = 0;
          }
          v123 = sub_1C63666FC(v119, (llvm::LLVMContext *)&v196, (const llvm::APInt *)&v201, v61, v120, 0, 0);
          v124 = v118 & 0xFFFFF000;
          v125 = DWORD2(v196) - 1;
          v126 = &v196;
          if (DWORD2(v196) >= 0x41)
            v126 = (__int128 *)(v196 + 8 * (v125 >> 6));
          if (((*(_QWORD *)v126 >> v125) & 1) == 0 && (*(_BYTE *)(v187 + 17) & 2) != 0)
            v124 |= 3u;
          v127 = v117 & 0xFFFFFFFF00000000;
          v128 = v122 | v117 & 0xFFFFFFFF00000000;
          v129 = 16 * v193;
          v130 = sub_1C6366480(*(_QWORD *)(a1 + 832), v123, v128, (uint64_t)&v201, *(_QWORD *)(v192[5] + v129), *(_QWORD *)(v192[5] + v129 + 8));
          v185 = v131 | v127;
          v186 = v124;
          v192 = sub_1C5D56C70(*(_QWORD *)(a1 + 832), 56, (const llvm::APInt *)&v201, *(llvm **)(v192[5] + v129), *(_QWORD *)(v192[5] + v129 + 8), (uint64_t)v192, v193, v132, v130, v185, v124);
          v134 = v133;
          if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
            MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
          v193 = v193 & 0xFFFFFFFF00000000 | v134;
LABEL_86:
          if (v198 >= 0x41 && v197)
            MEMORY[0x1CAA32F9C](v197, 0x1000C8000313F17);
          goto LABEL_117;
        }
      }
    }
LABEL_90:
    v78 = sub_1C635FDC4(a1, (unsigned __int8 *)AggregateElement);
    v80 = v79;
    v81 = (uint64_t *)(v78[5] + 16 * v79);
    v82 = *v81;
    v83 = v81[1];
    v84 = *v81;
    if (v84)
      LOBYTE(v84) = (v84 - 15) < 0x9C;
    else
      v84 = (*(_DWORD *)(v83 + 8) & 0xFE) == 18;
    v85 = v192;
    if (v191 == 18 && (v84 & 1) == 0)
    {
      v87 = (llvm *)sub_1C47AC578(*(llvm::LLVMContext **)(a1 + 968), v82, v83, (llvm::Type *)v189);
      v88 = *(_QWORD *)(a1 + 832);
      if (v188)
        v89 = sub_1C5CA0F18(v88, v87, v86, (const llvm::APInt *)&v201, (uint64_t)v78, v80);
      else
        v89 = sub_1C5CA0FB8(v88, v87, v86, (const llvm::APInt *)&v201, (uint64_t)v78, v80);
      v78 = v89;
      v80 = v90 | v80 & 0xFFFFFFFF00000000;
      v85 = v192;
    }
    v91 = sub_1C6366480(*(_QWORD *)(a1 + 832), (uint64_t)v78, v80, (uint64_t)&v201, *(_QWORD *)(v85[5] + 16 * v193), *(_QWORD *)(v85[5] + 16 * v193 + 8));
    v95 = v91;
    v96 = v80 & 0xFFFFFFFF00000000;
    v97 = v80 & 0xFFFFFFFF00000000 | v92;
    if (v73)
    {
      v196 = *(_OWORD *)(v192[5] + 16 * v193);
      v136 = (llvm *)sub_1C6131264((unsigned __int8 *)&v196, v92, v93);
      v137 = *(_QWORD *)(a1 + 832);
      v99 = v198;
      v101 = v197;
      v138 = (uint64_t *)&v197;
      if (v198 >= 0x41)
        v138 = v197;
      v181 = v135;
      v183 = v136;
      v140 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), *v138, (const llvm::APInt *)&v201, v136, v135, 0, 0);
      v141 = *(_QWORD *)(v137 + 832);
      if (v141)
        v142 = *(_WORD *)(v141 + 8);
      else
        v142 = 0;
      v160 = sub_1C5D52060(v137, 318, (const llvm::APInt *)&v201, v183, v181, (uint64_t)v140, v139, v142);
      v161 = v158;
      if (v191 == 18)
      {
        v163 = sub_1C5CA0F18(*(_QWORD *)(a1 + 832), *(llvm **)(v192[5] + 16 * v193), *(_QWORD *)(v192[5] + 16 * v193 + 8), (const llvm::APInt *)&v201, (uint64_t)v160, v158);
        v162 = v192;
        v160 = v163;
        v161 = v161 & 0xFFFFFFFF00000000 | v164;
      }
      else
      {
        v162 = v192;
      }
      v165 = *(_QWORD *)(a1 + 832);
      v166 = v162[5] + 16 * v193;
      v167 = *(llvm **)v166;
      v168 = *(_QWORD *)(v166 + 8);
      v169 = *(_QWORD *)(v165 + 832);
      if (v169)
        LOWORD(v169) = *(_WORD *)(v169 + 8);
      v155 = sub_1C5D56C70(v165, 58, (const llvm::APInt *)&v201, v167, v168, v95, v97, v159, (uint64_t)v160, v161, v169);
      goto LABEL_159;
    }
    v98 = v92;
    v99 = v198;
    v100 = (uint64_t)v192;
    if (v198 >= 0x41)
    {
      v104 = 0;
      v105 = ((unint64_t)v198 + 63) >> 6;
      v101 = v197;
      v106 = v105;
      do
      {
        v116 = v106-- < 1;
        if (v116)
          break;
        v107 = v197[v106];
        v104 += __clz(v107);
      }
      while (!v107);
      v108 = v198 | 0xFFFFFFC0;
      if ((v198 & 0x3F) == 0)
        v108 = 0;
      if (v198 - v104 - v108 < 0x41 && *v197 == 1)
        goto LABEL_111;
      v143 = 0;
      v144 = 0;
      do
      {
        v145 = (uint8x8_t)vcnt_s8((int8x8_t)v197[v143]);
        v145.i16[0] = vaddlv_u8(v145);
        v144 += v145.i32[0];
        ++v143;
      }
      while (v105 != v143);
      if (v144 == 1)
      {
        v146 = 0;
        do
        {
          v116 = v105-- < 1;
          if (v116)
            break;
          v147 = v197[v105];
          v146 += __clz(v147);
        }
        while (!v147);
        v103 = v146 + v108;
        goto LABEL_148;
      }
      v157 = *v197;
    }
    else
    {
      v101 = v197;
      if (v197 == (_QWORD *)1)
      {
LABEL_111:
        v109 = *(_QWORD *)(a1 + 832);
        v110 = *(_QWORD *)(v100 + 40) + 16 * v193;
        v111 = *(llvm **)v110;
        v112 = *(_QWORD *)(v110 + 8);
        v113 = *(_QWORD *)(v109 + 832);
        if (v113)
          LOWORD(v113) = *(_WORD *)(v113 + 8);
        v192 = sub_1C5D56C70(v109, 56, (const llvm::APInt *)&v201, v111, v112, v100, v193, v94, v95, v97, v113);
        v115 = v114;
        if (v99 >= 0x41 && v101)
          MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
        v193 = v193 & 0xFFFFFFFF00000000 | v115;
        goto LABEL_117;
      }
      v102 = (uint8x8_t)vcnt_s8((int8x8_t)v197);
      v102.i16[0] = vaddlv_u8(v102);
      if (v102.u32[0] == 1)
      {
        v103 = v198 + __clz((unint64_t)v197) - 64;
LABEL_148:
        v148 = v198 + ~v103;
        v149 = *(_QWORD *)(a1 + 832);
        v150 = v192[5] + 16 * v193;
        v182 = *(_QWORD *)(v150 + 8);
        v184 = *(llvm **)v150;
        v151 = sub_1C6366AB4(v149, v148, (const llvm::APInt *)&v201, *(llvm **)(*(_QWORD *)(v91 + 40) + 16 * v98), *(_QWORD *)(*(_QWORD *)(v91 + 40) + 16 * v98 + 8), 0, 0);
        v154 = *(_QWORD *)(v149 + 832);
        if (v154)
          LOWORD(v154) = *(_WORD *)(v154 + 8);
        v155 = sub_1C5D56C70(v149, 175, (const llvm::APInt *)&v201, v184, v182, v95, v97, v153, (uint64_t)v151, v152, v154);
LABEL_159:
        v95 = (uint64_t)v155;
        v97 = v156 | v96;
        v100 = (uint64_t)v192;
        goto LABEL_111;
      }
      v157 = (uint64_t)v197;
    }
    v170 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), v157, (const llvm::APInt *)&v201, *(llvm **)(*(_QWORD *)(v91 + 40) + 16 * v98), *(_QWORD *)(*(_QWORD *)(v91 + 40) + 16 * v98 + 8), 0, 0);
    v173 = *(_QWORD *)(a1 + 832);
    v174 = *(_QWORD *)(v173 + 832);
    if (v174)
      LOWORD(v174) = *(_WORD *)(v174 + 8);
    v175 = sub_1C5D56C70(v173, 58, (const llvm::APInt *)&v201, *(llvm **)(v192[5] + 16 * v193), *(_QWORD *)(v192[5] + 16 * v193 + 8), v95, v97, v172, (uint64_t)v170, v171, v174);
    v100 = (uint64_t)v192;
    v95 = (uint64_t)v175;
    v97 = v176 | v96;
    goto LABEL_111;
  }
LABEL_27:
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v180 + 32))(v180, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, v27);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v180 + 40))(v180, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, v27);
  if (v191 == 18)
  {
    v177 = v36;
    v37 = v187;
    v38 = v193;
    if (HIDWORD(v189) == 1)
    {
      v35 = sub_1C47AC5FC(v35, v189);
      v36 = sub_1C47AC5FC(v177, v189);
    }
    else
    {
      v35 = sub_1C47AC934(v35, v189);
      v36 = sub_1C47AC934(v177, v189);
    }
  }
  else
  {
    v37 = v187;
    v38 = v193;
  }
  if (v36 != v35 && (*(_BYTE *)(v37 + 17) & 2) == 0)
  {
    v192 = sub_1C5D3F9A0(*(_QWORD *)(a1 + 832), (uint64_t)v192, v38, (const llvm::APInt *)&v201, v36, 0);
    LODWORD(v38) = v178;
  }
  v199 = (llvm::Constant **)v37;
  result = sub_1C6364290((uint64_t *)(a1 + 8), &v199);
  result[1] = v192;
  *((_DWORD *)result + 4) = v38;
  if (v201)
    return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)&v201, v201);
  return result;
}

_QWORD *sub_1C5D19548(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int8 **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 **v11;
  BOOL v12;
  unsigned __int8 *v13;
  uint64_t v14;
  llvm *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  _QWORD *result;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(unsigned __int8 ***)(a2 - 8);
  else
    v5 = (unsigned __int8 **)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = sub_1C635FDC4(a1, *v5);
  v8 = v7;
  v9 = *(_QWORD *)a1;
  v10 = *(_DWORD *)(a1 + 816);
  v30 = 0;
  v31 = v10;
  v12 = v9 == 0;
  v11 = (unsigned __int8 **)(v9 + 48);
  v12 = v12 || v11 == &v30;
  if (!v12)
  {
    v13 = *v11;
    v30 = v13;
    if (v13)
      llvm::MetadataTracking::track((uint64_t)&v30, v13, 2);
  }
  v15 = (llvm *)sub_1C47A7FD0(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(_QWORD *)a2, 0);
  v16 = (unsigned __int8 *)(v6[5] + 16 * v8);
  if (v15 != *v16
    || ((v17 = *((_QWORD *)v16 + 1), !(_BYTE)v15) ? (v18 = v14 == v17) : (v18 = 1), !v18))
  {
    v21 = *(_QWORD *)(a1 + 832);
    v22 = *(_QWORD *)(v21 + 832);
    if (v22)
      v23 = *(_WORD *)(v22 + 8);
    else
      v23 = 0;
    v24 = (uint64_t)sub_1C5D52060(v21, 216, (const llvm::APInt *)&v30, v15, v14, (uint64_t)v6, v8, v23);
    goto LABEL_22;
  }
  v19 = *(_DWORD *)(a2 + 20);
  if ((v19 & 0x40000000) != 0)
    v20 = *(uint64_t **)(a2 - 8);
  else
    v20 = (uint64_t *)(a2 - 32 * (v19 & 0x7FFFFFF));
  v29 = *v20;
  if (v29 && *(_BYTE *)(v29 + 16) == 16)
  {
    v24 = sub_1C63666FC(*(_QWORD *)(a1 + 832), (llvm::LLVMContext *)(v29 + 24), (const llvm::APInt *)&v30, (uint64_t)v15, v14, 0, 1);
LABEL_22:
    v26 = v24;
    v27 = v25;
    v32 = a2;
    result = sub_1C6364290((uint64_t *)(a1 + 8), &v32);
    result[1] = v26;
    *((_DWORD *)result + 4) = v27;
    goto LABEL_23;
  }
  v32 = a2;
  result = sub_1C6364290((uint64_t *)(a1 + 8), &v32);
  result[1] = v6;
  *((_DWORD *)result + 4) = v8;
LABEL_23:
  if (v30)
    return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)&v30, v30);
  return result;
}

_QWORD *sub_1C5D196F8(uint64_t a1, uint64_t a2)
{
  int v4;
  __int16 v5;
  int v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  unsigned int v41;
  llvm *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  int v56;
  _QWORD *result;
  unsigned int v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    v5 = *(_WORD *)(a2 + 24);
  }
  else if (v4 == 81)
  {
    v5 = *(_WORD *)(a2 + 18) & 0x3F;
  }
  else
  {
    v5 = 42;
  }
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(unsigned __int8 ***)(a2 - 8);
  else
    v7 = (unsigned __int8 **)(a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = (uint64_t)sub_1C635FDC4(a1, *v7);
  v10 = v9;
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(_QWORD *)(a2 - 8);
  else
    v12 = a2 - 32 * (v11 & 0x7FFFFFF);
  v13 = (uint64_t)sub_1C635FDC4(a1, *(unsigned __int8 **)(v12 + 32));
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 832);
  v17 = *(_QWORD *)(v16 + 24);
  v18 = *(_QWORD *)(**(_QWORD **)(v16 + 40) + 40) + 272;
  v19 = *(_DWORD *)(a2 + 20);
  if ((v19 & 0x40000000) != 0)
    v20 = *(uint64_t ***)(a2 - 8);
  else
    v20 = (uint64_t **)(a2 - 32 * (v19 & 0x7FFFFFF));
  v21 = dword_1C866D984[v5 - 32];
  v23 = sub_1C5065E80(v17, v18, **v20, 0);
  v24 = v22;
  v25 = (unsigned __int8 *)(*(_QWORD *)(v8 + 40) + 16 * v10);
  v26 = *v25;
  if (v26 != v23 || ((v27 = *((_QWORD *)v25 + 1), !v26) ? (v28 = v27 == v22) : (v28 = 1), !v28))
  {
    v58 = v21;
    v29 = *(_QWORD *)(a1 + 832);
    v30 = *(_QWORD *)a1;
    v31 = *(_DWORD *)(a1 + 816);
    v59 = 0;
    v60 = v31;
    if (v30)
    {
      v32 = (unsigned __int8 **)(v30 + 48);
      if (v32 != &v59)
      {
        v33 = *v32;
        v59 = v33;
        if (v33)
          llvm::MetadataTracking::track((uint64_t)&v59, v33, 2);
      }
    }
    v8 = sub_1C6366544(v29, v8, v10, (uint64_t)&v59, v23, v24);
    v35 = v34;
    if (v59)
      llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
    v36 = *(_QWORD *)(a1 + 832);
    v37 = *(_QWORD *)a1;
    v38 = *(_DWORD *)(a1 + 816);
    v59 = 0;
    v60 = v38;
    if (v37)
    {
      v39 = (unsigned __int8 **)(v37 + 48);
      if (v39 != &v59)
      {
        v40 = *v39;
        v59 = v40;
        if (v40)
          llvm::MetadataTracking::track((uint64_t)&v59, v40, 2);
      }
    }
    v10 = v10 & 0xFFFFFFFF00000000 | v35;
    v13 = sub_1C6366544(v36, v13, v15, (uint64_t)&v59, v23, v24);
    v15 = v15 & 0xFFFFFFFF00000000 | v41;
    if (v59)
      llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
    v21 = v58;
  }
  v42 = (llvm *)sub_1C47A7FD0(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(_QWORD *)a2, 0);
  v44 = v43;
  v45 = *(_QWORD **)(a1 + 832);
  v46 = *(_QWORD *)a1;
  v47 = *(_DWORD *)(a1 + 816);
  v59 = 0;
  v60 = v47;
  if (v46)
  {
    v48 = (unsigned __int8 **)(v46 + 48);
    if (v48 != &v59)
    {
      v49 = *v48;
      v59 = v49;
      if (v49)
        llvm::MetadataTracking::track((uint64_t)&v59, v49, 2);
    }
  }
  v50 = sub_1C6367818(v45, v21);
  v53 = v45[104];
  if (v53)
    LOWORD(v53) = *(_WORD *)(v53 + 8);
  v54 = sub_1C5D58E08((uint64_t)v45, (const char *)0xC1, (const llvm::APInt *)&v59, v42, v44, v8, v10, v52, v13, v15, v50, v51, SHIDWORD(v51), v53);
  v56 = v55;
  v61 = a2;
  result = sub_1C6364290((uint64_t *)(a1 + 8), &v61);
  result[1] = v54;
  *((_DWORD *)result + 4) = v56;
  if (v59)
    return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
  return result;
}

uint64_t sub_1C5D19A20(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned __int8 **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t result;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    v5 = *(unsigned __int16 *)(a2 + 24);
  }
  else if (v4 == 82)
  {
    v5 = *(_WORD *)(a2 + 18) & 0x3F;
  }
  else
  {
    v5 = 16;
  }
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(unsigned __int8 ***)(a2 - 8);
  else
    v7 = (unsigned __int8 **)(a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = sub_1C635FDC4(a1, *v7);
  v10 = v9;
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(_QWORD *)(a2 - 8);
  else
    v12 = a2 - 32 * (v11 & 0x7FFFFFF);
  v13 = sub_1C635FDC4(a1, *(unsigned __int8 **)(v12 + 32));
  v15 = v14;
  if ((*(_BYTE *)(a2 + 17) & 4) != 0 || (*(_WORD *)(*(_QWORD *)(a1 + 824) + 1020) & 4) != 0)
    LODWORD(v5) = llvm::getFCmpCodeWithoutNaN(v5);
  v38 = 0;
  sub_1C6361CFC(&v38, a2);
  v16 = *(_QWORD *)(a1 + 832);
  v35 = v16;
  v36 = v38;
  v37 = *(_QWORD *)(v16 + 832);
  *(_QWORD *)(v16 + 832) = &v35;
  v17 = (llvm *)sub_1C47A7FD0(*(_QWORD *)(v16 + 24), *(_QWORD *)(**(_QWORD **)(v16 + 40) + 40) + 272, *(_QWORD *)a2, 0);
  v19 = v18;
  v20 = *(_QWORD **)(a1 + 832);
  v21 = *(_QWORD *)a1;
  v22 = *(_DWORD *)(a1 + 816);
  v33 = 0;
  v34 = v22;
  if (v21)
  {
    v23 = (unsigned __int8 **)(v21 + 48);
    if (v23 != &v33)
    {
      v24 = *v23;
      v33 = v24;
      if (v24)
        llvm::MetadataTracking::track((uint64_t)&v33, v24, 2);
    }
  }
  v25 = sub_1C6367818(v20, v5);
  v28 = v20[104];
  if (v28)
    LOWORD(v28) = *(_WORD *)(v28 + 8);
  v29 = sub_1C5D58E08((uint64_t)v20, (const char *)0xC1, (const llvm::APInt *)&v33, v17, v19, (uint64_t)v8, v10, v27, (uint64_t)v13, v15, v25, v26, SHIDWORD(v26), v28);
  v31 = v30;
  v39 = a2;
  result = (uint64_t)sub_1C6364290((uint64_t *)(a1 + 8), &v39);
  *(_QWORD *)(result + 8) = v29;
  *(_DWORD *)(result + 16) = v31;
  if (v33)
    result = llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  *(_QWORD *)(v35 + 832) = v37;
  return result;
}

void sub_1C5D19C28(uint64_t a1, llvm *this, uint64_t a3, uint64_t a4)
{
  uint64_t ***v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int hasFnAttrOnCalledFunction;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 **v54;
  uint64_t v55;
  llvm *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  int v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  unsigned __int8 **v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned __int8 v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  llvm *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  int v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  llvm *v113;
  uint64_t v114;
  uint64_t v115;
  llvm *v116;
  uint64_t v117;
  char *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  char *v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142;
  unsigned __int8 *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  char *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 **v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  __int128 *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned __int8 *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  int v183;
  unsigned __int8 *v184;
  int v185;
  _QWORD *v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  BOOL v196;
  int v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  __int128 v203;
  int v204;
  __int128 v205;
  unsigned int v206;
  char v207;
  unsigned __int8 *v208;
  int v209;
  __int128 v210;
  unsigned int v211;
  char v212;
  unsigned __int8 *v213;
  uint64_t v214;
  __int128 v215;

  v6 = (uint64_t ***)*((_QWORD *)this - 4);
  if (*((_BYTE *)v6 + 16))
  {
    if (*((_BYTE *)v6 + 16) == 24)
    {
      sub_1C5D21CFC(a1, (uint64_t)this, 0, a4);
      return;
    }
    goto LABEL_5;
  }
  if (v6[3] != *((uint64_t ***)this + 9))
    goto LABEL_5;
  llvm::diagnoseDontCall((uint64_t)this, this);
  if (*((_BYTE *)v6 + 16))
  {
    if (*((_BYTE *)v6 + 16) != 3 || (*((_DWORD *)v6 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_19;
  }
  else if (v6[9] != (uint64_t **)(v6 + 9) || (*((_BYTE *)v6 + 34) & 0x80) != 0)
  {
    goto LABEL_19;
  }
  v13 = *((unsigned int *)v6 + 9);
  if ((_DWORD)v13
    || (v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 56))(*(_QWORD *)(a1 + 824))) != 0
    && (v13 = (*(uint64_t (**)(uint64_t, uint64_t ***))(*(_QWORD *)v14 + 32))(v14, v6), (_DWORD)v13))
  {
    sub_1C5D28D3C(a1, (uint64_t)this, v13, v12);
    return;
  }
LABEL_19:
  v204 = 0;
  v15 = (_BYTE *)*((_QWORD *)this + 8);
  if (!v15 || (v15[14] & 0x10) == 0)
  {
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 20);
    v15 = (_BYTE *)*((_QWORD *)this + 8);
    if (!hasFnAttrOnCalledFunction)
      goto LABEL_26;
    if (!v15)
      goto LABEL_24;
  }
  if ((v15[12] & 0x10) == 0)
  {
LABEL_24:
    if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 4))
      goto LABEL_5;
    v15 = (_BYTE *)*((_QWORD *)this + 8);
LABEL_26:
    if (!v15)
      goto LABEL_28;
  }
  if ((v15[19] & 0x20) != 0)
    goto LABEL_5;
LABEL_28:
  v17 = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 61);
  if ((v17 & 1) != 0)
    goto LABEL_5;
  v18 = *((_DWORD *)v6 + 8);
  if ((v18 & 0xFu) - 7 < 2 || (*((_BYTE *)v6 + 23) & 0x10) == 0 || (v18 & 0x2000) != 0)
    goto LABEL_5;
  v19 = ***v6;
  v20 = *(_QWORD *)(v19 + 152);
  v21 = *(unsigned int *)(v19 + 168);
  if (!(_DWORD)v21)
    goto LABEL_38;
  LODWORD(v22) = (v21 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  v23 = (uint64_t ****)(v20 + 16 * v22);
  v24 = *v23;
  if (*v23 != v6)
  {
    v25 = 1;
    while (v24 != (uint64_t ***)-4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(uint64_t ****)(v20 + 16 * v22);
      if (v24 == v6)
      {
        v23 = (uint64_t ****)(v20 + 16 * v22);
        goto LABEL_39;
      }
    }
LABEL_38:
    v23 = (uint64_t ****)(v20 + 16 * v21);
  }
LABEL_39:
  v27 = **(_QWORD **)(a1 + 848);
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(v17, (_BYTE *)v23[1] + 16, (size_t)*v23[1], &v204))
    goto LABEL_5;
  v28 = (uint64_t)v6[3];
  v29 = v204;
  if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v27, v28, v204)
    || !sub_1C632B1A8(*(_QWORD **)(a1 + 848), v29))
  {
    goto LABEL_5;
  }
  if (v29 > 233)
  {
    if (v29 > 369)
    {
      if (v29 <= 407)
      {
        switch(v29)
        {
          case 370:
          case 371:
          case 372:
            v115 = a1;
            v116 = this;
            v117 = 237;
            goto LABEL_162;
          case 373:
          case 375:
          case 376:
          case 377:
          case 380:
          case 381:
          case 382:
          case 383:
          case 386:
          case 387:
          case 388:
          case 390:
          case 391:
          case 392:
          case 396:
          case 397:
          case 398:
          case 399:
          case 400:
            goto LABEL_5;
          case 374:
          case 378:
          case 379:
            v115 = a1;
            v116 = this;
            v117 = 239;
            goto LABEL_162;
          case 384:
          case 385:
          case 389:
            v115 = a1;
            v116 = this;
            v117 = 226;
            goto LABEL_162;
          case 393:
          case 394:
          case 395:
            goto LABEL_147;
          case 401:
            v30 = a1;
            v31 = this;
            goto LABEL_112;
          default:
            if (v29 != 406)
              goto LABEL_5;
            v149 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
            v150 = *(unsigned __int8 **)v149;
            v151 = (unsigned __int8 *)*((_QWORD *)v149 + 4);
            v152 = *(_QWORD *)(a1 + 832);
            v153 = *(_QWORD *)(v152 + 8);
            v154 = *(_QWORD *)a1;
            LODWORD(v149) = *(_DWORD *)(a1 + 816);
            v208 = 0;
            v209 = (int)v149;
            v155 = v152;
            if (v154)
            {
              v156 = (unsigned __int8 **)(v154 + 48);
              v155 = v152;
              if (v156 != &v208)
              {
                v157 = *v156;
                v208 = v157;
                v155 = v152;
                if (v157)
                {
                  llvm::MetadataTracking::track((uint64_t)&v208, v157, 2);
                  v155 = *(_QWORD *)(a1 + 832);
                }
              }
            }
            v158 = *(_QWORD *)(v155 + 192);
            v159 = *(_QWORD *)(v155 + 200);
            v160 = sub_1C635FDC4(a1, v150);
            v162 = v161;
            sub_1C635FDC4(a1, v151);
            *(_QWORD *)&v210 = (unint64_t)v150 & 0xFFFFFFFFFFFFFFFBLL;
            *((_QWORD *)&v210 + 1) = 0;
            v212 = 0;
            if (v150)
            {
              v163 = *(_DWORD *)(*(_QWORD *)v150 + 8);
              if ((v163 & 0xFE) == 0x12)
                v163 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v150 + 16) + 8);
              v164 = v163 >> 8;
            }
            else
            {
              v164 = 0;
            }
            v211 = v164;
            *(_QWORD *)&v205 = (unint64_t)v151 & 0xFFFFFFFFFFFFFFFBLL;
            *((_QWORD *)&v205 + 1) = 0;
            v207 = 0;
            if (v151)
            {
              v187 = *(_DWORD *)(*(_QWORD *)v151 + 8);
              if ((v187 & 0xFE) == 0x12)
                v187 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v151 + 16) + 8);
              v188 = v187 >> 8;
            }
            else
            {
              v188 = 0;
            }
            v206 = v188;
            (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v153 + 64))(&v213, v153, v152, &v208, v158, v159, v160, v162);
            if (v208)
              llvm::MetadataTracking::untrack((uint64_t)&v208, v208);
            v179 = v213;
            if (!v213)
              goto LABEL_5;
            v180 = v214;
            v181 = (uint64_t *)a1;
            v182 = (uint64_t *)this;
            v183 = 1;
            break;
        }
LABEL_204:
        sub_1C6363B30(v181, v182, (uint64_t)v179, v180, v183);
LABEL_205:
        v203 = v215;
        v189 = *(unsigned int *)(a1 + 112);
        if (v189 >= *(_DWORD *)(a1 + 116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v189 + 1, 16);
          LODWORD(v189) = *(_DWORD *)(a1 + 112);
        }
        *(_OWORD *)(*(_QWORD *)(a1 + 104) + 16 * v189) = v203;
        ++*(_DWORD *)(a1 + 112);
        return;
      }
      if (v29 <= 412)
      {
        if (v29 != 408)
          goto LABEL_5;
        v30 = a1;
        v31 = this;
LABEL_112:
        if (!sub_1C5D34860(v30, (uint64_t)v31))
          goto LABEL_5;
        return;
      }
      if ((v29 - 445) >= 3)
      {
        if (v29 == 413)
        {
          v165 = (unsigned __int8 *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          v166 = *(_QWORD *)(a1 + 832);
          v167 = *(_QWORD *)(v166 + 8);
          v168 = *(_QWORD *)a1;
          v169 = *(_DWORD *)(a1 + 816);
          *(_QWORD *)&v205 = 0;
          DWORD2(v205) = v169;
          v170 = v166;
          if (v168)
          {
            v171 = (__int128 *)(v168 + 48);
            v170 = v166;
            if (v171 != &v205)
            {
              v172 = *(unsigned __int8 **)v171;
              *(_QWORD *)&v205 = v172;
              v170 = v166;
              if (v172)
              {
                llvm::MetadataTracking::track((uint64_t)&v205, v172, 2);
                v170 = *(_QWORD *)(a1 + 832);
              }
            }
          }
          v173 = *(_QWORD *)(v170 + 192);
          v174 = *(_QWORD *)(v170 + 200);
          v176 = sub_1C635FDC4(a1, v165);
          *(_QWORD *)&v210 = (unint64_t)v165 & 0xFFFFFFFFFFFFFFFBLL;
          *((_QWORD *)&v210 + 1) = 0;
          v212 = 0;
          if (v165)
          {
            v177 = *(_DWORD *)(*(_QWORD *)v165 + 8);
            if ((v177 & 0xFE) == 0x12)
              v177 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v165 + 16) + 8);
            v178 = v177 >> 8;
          }
          else
          {
            v178 = 0;
          }
          v211 = v178;
          (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *))(*(_QWORD *)v167 + 72))(&v213, v167, v166, &v205, v173, v174, v176, v175, &v210);
        }
        else
        {
          if (v29 != 419)
            goto LABEL_5;
          v118 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
          v119 = *(unsigned __int8 **)v118;
          v120 = (unsigned __int8 *)*((_QWORD *)v118 + 4);
          v121 = *(_QWORD *)(a1 + 832);
          v122 = *(_QWORD *)(v121 + 8);
          v123 = *(_QWORD *)a1;
          LODWORD(v118) = *(_DWORD *)(a1 + 816);
          *(_QWORD *)&v205 = 0;
          DWORD2(v205) = (_DWORD)v118;
          v124 = v121;
          if (v123)
          {
            v125 = (__int128 *)(v123 + 48);
            v124 = v121;
            if (v125 != &v205)
            {
              v126 = *(unsigned __int8 **)v125;
              *(_QWORD *)&v205 = v126;
              v124 = v121;
              if (v126)
              {
                llvm::MetadataTracking::track((uint64_t)&v205, v126, 2);
                v124 = *(_QWORD *)(a1 + 832);
              }
            }
          }
          v127 = *(_QWORD *)(v124 + 192);
          v128 = *(_QWORD *)(v124 + 200);
          v129 = sub_1C635FDC4(a1, v119);
          v131 = v130;
          sub_1C635FDC4(a1, v120);
          *(_QWORD *)&v210 = (unint64_t)v119 & 0xFFFFFFFFFFFFFFFBLL;
          *((_QWORD *)&v210 + 1) = 0;
          v212 = 0;
          if (v119)
          {
            v132 = *(_DWORD *)(*(_QWORD *)v119 + 8);
            if ((v132 & 0xFE) == 0x12)
              v132 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v119 + 16) + 8);
            v133 = v132 >> 8;
          }
          else
          {
            v133 = 0;
          }
          v211 = v133;
          (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v122 + 80))(&v213, v122, v121, &v205, v127, v128, v129, v131);
        }
        if ((_QWORD)v205)
          llvm::MetadataTracking::untrack((uint64_t)&v205, (unsigned __int8 *)v205);
        v179 = v213;
        if (!v213)
          goto LABEL_5;
        v180 = v214;
        v181 = (uint64_t *)a1;
        v182 = (uint64_t *)this;
        v183 = 0;
        goto LABEL_204;
      }
      v115 = a1;
      v116 = this;
      v117 = 236;
LABEL_162:
      if ((sub_1C6363C5C(v115, (uint64_t)v116, v117) & 1) != 0)
        return;
      goto LABEL_5;
    }
    if (v29 > 320)
    {
      if (v29 != 321)
      {
        if ((v29 - 335) < 3)
        {
          v115 = a1;
          v116 = this;
          v117 = 238;
          goto LABEL_162;
        }
        if (v29 != 324)
          goto LABEL_5;
        v65 = sub_1C635FDC4(a1, *((unsigned __int8 **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
        v67 = v66;
        v68 = sub_1C635FDC4(a1, ((unsigned __int8 **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4]);
        v70 = v69;
        v201 = sub_1C635FDC4(a1, ((unsigned __int8 **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8]);
        v72 = v71;
        v73 = (unsigned __int16)sub_1C5D633A0(*(_QWORD *)(a1 + 832), (uint64_t)v65);
        if (v73 <= 0x100)
          v74 = 0;
        else
          v74 = v73;
        v75 = (unsigned __int16)sub_1C5D633A0(*(_QWORD *)(a1 + 832), (uint64_t)v68);
        if (v75 <= 0x100)
          LOBYTE(v75) = 0;
        LODWORD(v76) = v75;
        v77 = *(_QWORD *)a1;
        v78 = *(_DWORD *)(a1 + 816);
        if (v76 >= v74)
          v76 = v74;
        else
          v76 = v76;
        v199 = v76;
        v208 = 0;
        v209 = v78;
        if (v77)
        {
          v79 = (unsigned __int8 **)(v77 + 48);
          if (v79 != &v208)
          {
            v80 = *v79;
            v208 = v80;
            if (v80)
              llvm::MetadataTracking::track((uint64_t)&v208, v80, 2);
          }
        }
        v81 = sub_1C5D14AF0((uint64_t *)a1, a1 + 104);
        v83 = v82;
        v84 = 0;
        v85 = *(_QWORD *)(a1 + 832);
        v86 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
        v87 = *(uint64_t **)v86;
        *(_QWORD *)&v210 = *(_QWORD *)v86 & 0xFFFFFFFFFFFFFFFBLL;
        *((_QWORD *)&v210 + 1) = 0;
        v212 = 0;
        if (v87)
        {
          v88 = *v87;
          v89 = *(_DWORD *)(v88 + 8);
          if ((v89 & 0xFE) == 0x12)
            v89 = *(_DWORD *)(**(_QWORD **)(v88 + 16) + 8);
          v84 = v89 >> 8;
        }
        v90 = 0;
        v211 = v84;
        v91 = *((_QWORD *)v86 + 4);
        *(_QWORD *)&v205 = v91 & 0xFFFFFFFFFFFFFFFBLL;
        *((_QWORD *)&v205 + 1) = 0;
        v207 = 0;
        if (v91)
        {
          v92 = *(_QWORD *)v91;
          v93 = *(_DWORD *)(*(_QWORD *)v91 + 8);
          if ((v93 & 0xFE) == 0x12)
            v93 = *(_DWORD *)(**(_QWORD **)(v92 + 16) + 8);
          v90 = v93 >> 8;
        }
        v206 = v90;
        llvm::Instruction::getAAMetadata((uint64_t ***)this, &v213);
        v94 = sub_1C5D59738(v85, (uint64_t)v81, v83, (uint64_t)&v208, (uint64_t)v65, v67, (uint64_t)v68, v70, (uint64_t)v201, v72, SHIDWORD(v72), v199, SHIDWORD(v199), 0, 0, 0, &v210, &v205, (uint64_t)&v213);
        v95 = *(_QWORD *)(a1 + 832);
        *(_QWORD *)(v95 + 192) = v94;
        *(_DWORD *)(v95 + 200) = v96;
        v97 = 16 * v67;
        v98 = sub_1C6366480(*(_QWORD *)(a1 + 832), (uint64_t)v201, v72, (uint64_t)&v208, *(_QWORD *)(v65[5] + v97), *(_QWORD *)(v65[5] + v97 + 8));
        v101 = v72 & 0xFFFFFFFF00000000 | v100;
        v102 = *(_QWORD *)(a1 + 832);
        v103 = v65[5] + v97;
        v104 = *(llvm **)v103;
        v105 = *(_QWORD *)(v103 + 8);
        v106 = *(_QWORD *)(v102 + 832);
        if (v106)
          LOWORD(v106) = *(_WORD *)(v106 + 8);
        v107 = sub_1C5D56C70(v102, 56, (const llvm::APInt *)&v208, v104, v105, (uint64_t)v65, v67, v99, v98, v101, v106);
        v109 = v108;
        v213 = (unsigned __int8 *)this;
        v110 = sub_1C6364290((uint64_t *)(a1 + 8), &v213);
        v110[1] = v107;
        *((_DWORD *)v110 + 4) = v109;
        v63 = v208;
        if (v208)
        {
          v64 = &v208;
          goto LABEL_77;
        }
        return;
      }
LABEL_107:
      if ((sub_1C5D33DDC(a1, (uint64_t)this) & 1) != 0)
        return;
      goto LABEL_5;
    }
    v111 = v29 + 22;
    if ((v29 - 234) <= 0xB)
    {
      if (((1 << v111) & 7) != 0)
      {
        v115 = a1;
        v116 = this;
        v117 = 241;
        goto LABEL_162;
      }
      if (((1 << v111) & 0x1C0) != 0)
      {
        v112 = a1;
        v113 = this;
        v114 = 247;
LABEL_157:
        if ((sub_1C6363D68(v112, (uint64_t)v113, v114) & 1) != 0)
          return;
        goto LABEL_5;
      }
      if (((1 << v111) & 0xE00) != 0)
      {
        v112 = a1;
        v113 = this;
        v114 = 246;
        goto LABEL_157;
      }
    }
    if ((v29 - 307) >= 3)
    {
      if (v29 != 320)
        goto LABEL_5;
      v134 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
      v135 = *(unsigned __int8 **)v134;
      v136 = (unsigned __int8 *)*((_QWORD *)v134 + 4);
      v137 = (unsigned __int8 *)*((_QWORD *)v134 + 8);
      v138 = *(_QWORD *)(a1 + 832);
      v139 = *(_QWORD *)(v138 + 8);
      v140 = *(_QWORD *)a1;
      LODWORD(v134) = *(_DWORD *)(a1 + 816);
      *(_QWORD *)&v205 = 0;
      DWORD2(v205) = (_DWORD)v134;
      v141 = v138;
      if (v140)
      {
        v142 = (__int128 *)(v140 + 48);
        v141 = v138;
        if (v142 != &v205)
        {
          v143 = *(unsigned __int8 **)v142;
          *(_QWORD *)&v205 = v143;
          v141 = v138;
          if (v143)
          {
            llvm::MetadataTracking::track((uint64_t)&v205, v143, 2);
            v141 = *(_QWORD *)(a1 + 832);
          }
        }
      }
      v200 = *(_QWORD *)(v141 + 200);
      v202 = *(_QWORD *)(v141 + 192);
      v144 = sub_1C635FDC4(a1, v135);
      v146 = v145;
      sub_1C635FDC4(a1, v136);
      sub_1C635FDC4(a1, v137);
      *(_QWORD *)&v210 = (unint64_t)v135 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v210 + 1) = 0;
      v212 = 0;
      if (v135)
      {
        v147 = *(_DWORD *)(*(_QWORD *)v135 + 8);
        if ((v147 & 0xFE) == 0x12)
          v147 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v135 + 16) + 8);
        v148 = v147 >> 8;
      }
      else
      {
        v148 = 0;
      }
      v211 = v148;
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v139 + 48))(&v213, v139, v138, &v205, v202, v200, v144, v146);
      if ((_QWORD)v205)
        llvm::MetadataTracking::untrack((uint64_t)&v205, (unsigned __int8 *)v205);
      v184 = v213;
      if (!v213)
        goto LABEL_5;
      v185 = v214;
      *(_QWORD *)&v205 = this;
      v186 = sub_1C6364290((uint64_t *)(a1 + 8), &v205);
      v186[1] = v184;
      *((_DWORD *)v186 + 4) = v185;
      goto LABEL_205;
    }
    v115 = a1;
    v116 = this;
    v117 = 231;
    goto LABEL_162;
  }
  if (v29 <= 184)
  {
    if (v29 != 168)
    {
      if ((v29 - 123) < 3)
      {
LABEL_147:
        v115 = a1;
        v116 = this;
        v117 = 224;
      }
      else
      {
        if ((v29 - 178) >= 3)
          goto LABEL_5;
        v115 = a1;
        v116 = this;
        v117 = 235;
      }
      goto LABEL_162;
    }
    goto LABEL_107;
  }
  if (v29 > 192)
  {
    if ((v29 - 207) < 3)
    {
      v115 = a1;
      v116 = this;
      v117 = 234;
      goto LABEL_162;
    }
    if ((v29 - 215) < 3)
    {
      v115 = a1;
      v116 = this;
      v117 = 223;
      goto LABEL_162;
    }
    if (v29 != 193)
      goto LABEL_5;
LABEL_149:
    v115 = a1;
    v116 = this;
    v117 = 227;
    goto LABEL_162;
  }
  if ((v29 - 185) >= 3)
  {
    if ((v29 - 188) >= 2)
      goto LABEL_5;
    goto LABEL_149;
  }
  v42 = *((_QWORD *)this + 8);
  if (!v42 || (*(_BYTE *)(v42 + 17) & 0x30) == 0)
  {
    v43 = *((_DWORD *)this + 5);
    if (v43 < 0)
    {
      v190 = (char *)this - 32 * (v43 & 0x7FFFFFF);
      v193 = *((_QWORD *)v190 - 1);
      v191 = v190 - 8;
      v192 = v193;
      if (v193)
      {
        v194 = -v192;
        do
        {
          v195 = *(_DWORD *)(*(_QWORD *)&v191[v194] + 8);
          v196 = v195 > 7;
          v197 = (1 << v195) & 0x83;
          if (v196 || v197 == 0)
            goto LABEL_5;
          v194 += 16;
        }
        while (v194);
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
    {
LABEL_5:
      v7 = *((_DWORD *)this + 5);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_6;
      v32 = v7 & 0x7FFFFFF;
      v33 = *((_QWORD *)this - 4 * v32 - 1);
      if ((v33 & 0xFFFFFFFF0) == 0)
        goto LABEL_6;
      v34 = 0;
      v35 = (v33 >> 4);
      v36 = -8 - (v33 + 32 * v32);
      do
      {
        if (*(_DWORD *)(*(_QWORD *)((char *)this + v36) + 8) == 7)
          ++v34;
        v36 += 16;
        --v35;
      }
      while (v35);
      if (v34)
      {
        sub_1C5D25B4C(a1, (unint64_t)this, 0);
      }
      else
      {
LABEL_6:
        v9 = sub_1C635FDC4(a1, *((unsigned __int8 **)this - 4));
        v10 = *((_DWORD *)this + 5);
        if ((v10 & 0x80000000) == 0)
          goto LABEL_7;
        v37 = v10 & 0x7FFFFFF;
        v38 = *((_QWORD *)this - 4 * v37 - 1);
        if ((v38 & 0xFFFFFFFF0) == 0)
          goto LABEL_7;
        v39 = 0;
        v40 = (v38 >> 4);
        v41 = -8 - (v38 + 32 * v37);
        do
        {
          if (!*(_DWORD *)(*(_QWORD *)((char *)this + v41) + 8))
            ++v39;
          v41 += 16;
          --v40;
        }
        while (v40);
        if (v39)
        {
          sub_1C6373FA0(a1, (uint64_t)this, (uint64_t)v9, v8);
        }
        else
        {
LABEL_7:
          v11 = *((_WORD *)this + 9) & 3;
          sub_1C5D25CEC(a1, (unint64_t)this, (uint64_t)v9, v8, (v11 - 1) < 2, v11 == 2, 0, 0);
        }
      }
      return;
    }
  }
  v44 = sub_1C635FDC4(a1, *((unsigned __int8 **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
  v46 = v45;
  v48 = sub_1C635FDC4(a1, ((unsigned __int8 **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4]);
  v50 = v49;
  v51 = *(_QWORD *)(a1 + 832);
  v52 = *(_QWORD *)a1;
  v53 = *(_DWORD *)(a1 + 816);
  v213 = 0;
  LODWORD(v214) = v53;
  if (v52)
  {
    v54 = (unsigned __int8 **)(v52 + 48);
    if (v54 != &v213)
    {
      v213 = *v54;
      if (v213)
        llvm::MetadataTracking::track((uint64_t)&v213, v213, 2);
    }
  }
  v55 = v44[5] + 16 * v46;
  v56 = *(llvm **)v55;
  v57 = *(_QWORD *)(v55 + 8);
  v58 = *(_QWORD *)(v51 + 832);
  if (v58)
    LOWORD(v58) = *(_WORD *)(v58 + 8);
  v59 = sub_1C5D56C70(v51, 143, (const llvm::APInt *)&v213, v56, v57, (uint64_t)v44, v46, v47, (uint64_t)v48, v50, v58);
  v61 = v60;
  *(_QWORD *)&v210 = this;
  v62 = sub_1C6364290((uint64_t *)(a1 + 8), &v210);
  v62[1] = v59;
  *((_DWORD *)v62 + 4) = v61;
  v63 = v213;
  if (v213)
  {
    v64 = &v213;
LABEL_77:
    llvm::MetadataTracking::untrack((uint64_t)v64, v63);
  }
}

void sub_1C5D1AB60(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned __int8 **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  _BOOL4 v20;
  int v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  llvm::EVT *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  unint64_t matched;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void **v42;
  BOOL v43;
  void *v44;
  uint64_t v45;
  llvm *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t *v51;
  char *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  int v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t **v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  void **v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  uint64_t *v94;
  int v95;
  int v96;
  _QWORD *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  __int128 v104;
  unsigned __int16 v105;
  void *v106;
  _OWORD v107[3];
  void *__src;
  uint64_t v109;
  _BYTE v110[16];
  void *v111;
  uint64_t v112;
  _BYTE v113[64];
  __int128 *v114;
  uint64_t v115;
  _QWORD v116[10];

  v116[8] = *MEMORY[0x1E0C80C00];
  v114 = (__int128 *)v116;
  v115 = 0x400000000;
  llvm::ComputeValueVTs(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), *(_QWORD *)a2, (uint64_t)&v114, 0, 0, 0);
  v4 = v115;
  if (!(_DWORD)v115)
    goto LABEL_2;
  v111 = v113;
  v112 = 0x400000000;
  sub_1C4825C80((unsigned int *)&v111, v115, 0, 0);
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(unsigned __int8 ***)(a2 - 8);
  else
    v6 = (unsigned __int8 **)(a2 - 32 * (v5 & 0x7FFFFFF));
  v7 = sub_1C635FDC4(a1, *v6);
  v9 = v8;
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  v12 = sub_1C635FDC4(a1, *(unsigned __int8 **)(v11 + 32));
  v14 = v13;
  v15 = *(_DWORD *)(a2 + 20);
  if ((v15 & 0x40000000) != 0)
    v16 = *(_QWORD *)(a2 - 8);
  else
    v16 = a2 - 32 * (v15 & 0x7FFFFFF);
  v101 = sub_1C635FDC4(a1, *(unsigned __int8 **)(v16 + 64));
  v18 = v17;
  __src = v110;
  v109 = 0x100000000;
  sub_1C4825C80((unsigned int *)&__src, 1uLL, (uint64_t)v7, v9);
  v19 = (unsigned __int8 *)(v7[5] + 16 * v9);
  if (*v19)
    v20 = *v19 - 15 < 0x9C;
  else
    v20 = (*(_DWORD *)(*((_QWORD *)v19 + 1) + 8) & 0xFE) == 18;
  if (v20)
    v21 = 191;
  else
    v21 = 190;
  v102 = v21;
  v105 = 0;
  if (sub_1C4774A9C(a2))
    sub_1C6361CFC(&v105, a2);
  v100 = a2;
  if ((_DWORD)v115)
  {
    if ((_DWORD)v115 != 1)
    {
      v23 = 0;
      v22 = v114;
      while (LOBYTE(v114[v23 / 0x10 + 1]) == LOBYTE(v114[v23 / 0x10])
           && (LOBYTE(v114[v23 / 0x10 + 1])
            || *((_QWORD *)&v114[v23 / 0x10 + 1] + 1) == *((_QWORD *)&v114[v23 / 0x10] + 1)))
      {
        v23 += 16;
        if (16 * v115 - 16 == v23)
          goto LABEL_30;
      }
      goto LABEL_121;
    }
    v22 = v114;
LABEL_30:
    v104 = *v22;
    v24 = *(_QWORD *)(a1 + 832);
    v25 = *(llvm::EVT **)(v24 + 56);
    v26 = *(_QWORD *)(v24 + 24);
    v28 = *((_QWORD *)&v104 + 1);
    v27 = v104;
    while (1)
    {
      llvm::TargetLoweringBase::getTypeConversion(v26, v25, v27, v28, (uint64_t)&v106);
      if (!(_BYTE)v106)
        break;
      llvm::TargetLoweringBase::getTypeConversion(v26, v25, v104, *((uint64_t *)&v104 + 1), (uint64_t)&v106);
      v28 = *((_QWORD *)&v107[0] + 1);
      v27 = *(_QWORD *)&v107[0];
      v104 = v107[0];
    }
    if ((_BYTE)v104)
    {
      if (v104 - 15 >= 0x9C)
        goto LABEL_35;
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v104 + 1) + 8) & 0xFE) != 0x12)
    {
LABEL_35:
      v29 = 0;
LABEL_44:
      v106 = 0;
      v103 = 0;
      matched = llvm::matchSelectPattern(a2, (uint64_t)&v106, &v103, 0, 0);
      v34 = 0;
      v35 = 170;
      switch((int)matched)
      {
        case 1:
          v35 = 167;
          goto LABEL_107;
        case 2:
          v35 = 169;
          goto LABEL_107;
        case 3:
          v35 = 168;
          goto LABEL_107;
        case 4:
          goto LABEL_107;
        case 5:
          if (HIDWORD(matched) == 1)
            goto LABEL_93;
          if (HIDWORD(matched) != 3)
          {
            if (HIDWORD(matched) != 2)
              goto LABEL_119;
            goto LABEL_51;
          }
          if (!(_BYTE)v104)
            goto LABEL_89;
          if (v104 != 1)
          {
            v62 = *(_QWORD *)(v26 + 8 * v104 + 96);
            if (!v62)
              goto LABEL_85;
          }
          if ((*(unsigned __int8 *)(v26 + 390 * v104 + 4108) | 4) == 4)
          {
LABEL_51:
            v35 = 246;
            goto LABEL_107;
          }
          if (v104 == 1)
            goto LABEL_86;
          v62 = *(_QWORD *)(v26 + 8 * v104 + 96);
LABEL_85:
          if (v62)
          {
LABEL_86:
            if ((*(_BYTE *)(v26 + 390 * v104 + 4112) & 0xFB) == 0)
              goto LABEL_93;
            if (!v29)
              goto LABEL_119;
          }
          else
          {
LABEL_89:
            if ((v29 & 1) == 0)
              goto LABEL_119;
          }
          v63 = sub_1C6131264((unsigned __int8 *)&v104, v32, v33);
          if (v63)
          {
            if (v63 == 1 || (v35 = 250, *(_QWORD *)(v26 + 8 * v63 + 96)))
            {
              if ((*(_BYTE *)(v26 + 390 * v63 + 4108) & 0xFB) != 0)
                v35 = 250;
              else
                v35 = 246;
            }
            goto LABEL_107;
          }
LABEL_93:
          v35 = 250;
          goto LABEL_107;
        case 6:
          if (HIDWORD(matched) == 1)
            goto LABEL_106;
          if (HIDWORD(matched) != 3)
          {
            if (HIDWORD(matched) != 2)
              goto LABEL_119;
            goto LABEL_55;
          }
          if (!(_BYTE)v104)
            goto LABEL_102;
          if (v104 != 1)
          {
            v64 = *(_QWORD *)(v26 + 8 * v104 + 96);
            if (!v64)
              goto LABEL_98;
          }
          if ((*(unsigned __int8 *)(v26 + 390 * v104 + 4109) | 4) == 4)
          {
LABEL_55:
            v35 = 247;
            goto LABEL_107;
          }
          if (v104 == 1)
            goto LABEL_99;
          v64 = *(_QWORD *)(v26 + 8 * v104 + 96);
LABEL_98:
          if (v64)
          {
LABEL_99:
            v35 = 251;
            if ((*(_BYTE *)(v26 + 390 * v104 + 4113) & 0xFB) == 0)
              goto LABEL_107;
            if (!v29)
              goto LABEL_119;
          }
          else
          {
LABEL_102:
            if ((v29 & 1) == 0)
              goto LABEL_119;
          }
          v65 = sub_1C6131264((unsigned __int8 *)&v104, v32, v33);
          if (v65)
          {
            if (v65 == 1 || (v35 = 251, *(_QWORD *)(v26 + 8 * v65 + 96)))
            {
              if ((*(_BYTE *)(v26 + 390 * v65 + 4109) & 0xFB) != 0)
                v35 = 251;
              else
                v35 = 247;
            }
          }
          else
          {
LABEL_106:
            v35 = 251;
          }
LABEL_107:
          if ((_BYTE)v104
            && (v104 == 1 || *(_QWORD *)(v26 + 8 * v104 + 96))
            && (*(_BYTE *)(v26 + 390 * v104 + v35 + 3862) & 0xFB) == 0
            || v29
            && (v66 = sub_1C6131264((unsigned __int8 *)&v104, v32, v33)) != 0
            && (v66 == 1 || *(_QWORD *)(v26 + 8 * v66 + 96))
            && (*(_BYTE *)(v26 + 390 * v66 + v35 + 3862) & 0xFB) == 0)
          {
            v67 = *(_QWORD *)(v100 - 96);
            while (1)
            {
              v67 = *(_QWORD *)(v67 + 8);
              if (!v67)
                break;
              if (*(_BYTE *)(*(_QWORD *)(v67 + 24) + 16) != 85)
                goto LABEL_119;
            }
            v12 = sub_1C635FDC4(a1, (unsigned __int8 *)v106);
            v14 = v98;
            v101 = sub_1C635FDC4(a1, v103);
            v18 = v99;
            LODWORD(v109) = 0;
            goto LABEL_120;
          }
LABEL_119:
          v35 = v102;
LABEL_120:
          v102 = v35;
          goto LABEL_121;
        case 7:
          goto LABEL_57;
        case 8:
          v34 = 1;
LABEL_57:
          v36 = sub_1C635FDC4(a1, (unsigned __int8 *)v106);
          v38 = v37;
          v39 = 0;
          LODWORD(v109) = 0;
          do
          {
            v40 = *(_QWORD *)a1;
            v41 = *(_DWORD *)(a1 + 816);
            v106 = 0;
            LODWORD(v107[0]) = v41;
            v43 = v40 == 0;
            v42 = (void **)(v40 + 48);
            v43 = v43 || v42 == &v106;
            if (!v43)
            {
              v44 = *v42;
              v106 = v44;
              if (v44)
                llvm::MetadataTracking::track((uint64_t)&v106, (unsigned __int8 *)v44, 2);
            }
            v45 = v36[5] + 16 * v38;
            v46 = *(llvm **)v45;
            v47 = *(_QWORD *)(v45 + 8);
            v48 = *(_QWORD *)(a1 + 832);
            v49 = *(_QWORD *)(v48 + 832);
            if (v49)
              v50 = *(_WORD *)(v49 + 8);
            else
              v50 = 0;
            v51 = sub_1C5D52060(v48, 174, (const llvm::APInt *)&v106, v46, v47, (uint64_t)v36, v38, v50);
            v52 = (char *)v111 + v39;
            *(_QWORD *)v52 = v51;
            *((_DWORD *)v52 + 2) = v53;
            if (v34)
            {
              v54 = *(_QWORD *)(a1 + 832);
              v56 = sub_1C6366AB4(v54, 0, (const llvm::APInt *)&v106, v46, v47, 0, 0);
              v58 = *(_QWORD *)(v54 + 832);
              if (v58)
                LOWORD(v58) = *(_WORD *)(v58 + 8);
              v59 = sub_1C5D56C70(v54, 57, (const llvm::APInt *)&v106, v46, v47, (uint64_t)v56, v55, v57, *(_QWORD *)((char *)v111 + v39), *(_QWORD *)((char *)v111 + v39 + 8), v58);
              v60 = (char *)v111 + v39;
              *(_QWORD *)v60 = v59;
              *((_DWORD *)v60 + 2) = v61;
            }
            if (v106)
              llvm::MetadataTracking::untrack((uint64_t)&v106, (unsigned __int8 *)v106);
            v39 += 16;
            ++v38;
            --v4;
          }
          while (v4);
          goto LABEL_135;
        default:
          goto LABEL_119;
      }
    }
    if ((_BYTE)v104)
    {
      if (v104 == 1 || (v30 = 0, *(_QWORD *)(v26 + 8 * v104 + 96)))
        v30 = (*(_BYTE *)(v26 + 390 * v104 + 4053) & 0xFB) == 0;
    }
    else
    {
      v30 = 0;
    }
    v29 = !v30;
    goto LABEL_44;
  }
LABEL_121:
  v68 = 0;
  v69 = v105;
  do
  {
    v106 = (char *)v107 + 8;
    *(_QWORD *)&v107[0] = 0x300000000;
    sub_1C612E234((unsigned int *)&v106, __src, (_BYTE *)__src + 16 * v109);
    v70 = LODWORD(v107[0]);
    if (LODWORD(v107[0]) >= (unint64_t)DWORD1(v107[0]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v107 + 8, LODWORD(v107[0]) + 1, 16);
      v70 = LODWORD(v107[0]);
    }
    v71 = (uint64_t **)((char *)v106 + 16 * v70);
    *v71 = v12;
    v71[1] = (uint64_t *)v14;
    v72 = (LODWORD(v107[0]) + 1);
    LODWORD(v107[0]) = v72;
    if (v72 >= DWORD1(v107[0]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v107 + 8, v72 + 1, 16);
      LODWORD(v72) = v107[0];
    }
    v73 = (uint64_t **)((char *)v106 + 16 * v72);
    *v73 = v101;
    v73[1] = (uint64_t *)v18;
    v74 = ++LODWORD(v107[0]);
    v75 = *(_QWORD *)(a1 + 832);
    v76 = *(_QWORD *)a1;
    v77 = *(_DWORD *)(a1 + 816);
    *(_QWORD *)&v104 = 0;
    DWORD2(v104) = v77;
    if (v76)
    {
      v78 = (__int128 *)(v76 + 48);
      if (v78 != &v104)
      {
        v79 = *(unsigned __int8 **)v78;
        *(_QWORD *)&v104 = v79;
        if (v79)
        {
          llvm::MetadataTracking::track((uint64_t)&v104, v79, 2);
          v74 = v107[0];
        }
      }
    }
    v80 = v12[5] + 16 * v14;
    v81 = sub_1C636D0C8(v75, (const char *)v102, (const llvm::APInt *)&v104, *(llvm **)v80, *(_QWORD *)(v80 + 8), (uint64_t *)v106, v74, v69);
    v82 = (char *)v111 + v68;
    *(_QWORD *)v82 = v81;
    *((_DWORD *)v82 + 2) = v83;
    if ((_QWORD)v104)
      llvm::MetadataTracking::untrack((uint64_t)&v104, (unsigned __int8 *)v104);
    if (v106 != (char *)v107 + 8)
      free(v106);
    v68 += 16;
    ++v18;
    ++v14;
    --v4;
  }
  while (v4);
LABEL_135:
  v84 = *(_QWORD *)(a1 + 832);
  v85 = *(_QWORD *)a1;
  v86 = *(_DWORD *)(a1 + 816);
  v106 = 0;
  LODWORD(v107[0]) = v86;
  v87 = v84;
  if (v85)
  {
    v88 = (void **)(v85 + 48);
    v87 = v84;
    if (v88 != &v106)
    {
      v89 = *v88;
      v106 = v89;
      v87 = v84;
      if (v89)
      {
        llvm::MetadataTracking::track((uint64_t)&v106, (unsigned __int8 *)v89, 2);
        v87 = *(_QWORD *)(a1 + 832);
      }
    }
  }
  v91 = sub_1C636AB20(v87, (uint64_t *)v114, v115);
  v92 = *(_QWORD *)(v84 + 832);
  if (v92)
    v93 = *(_WORD *)(v92 + 8);
  else
    v93 = 0;
  v94 = sub_1C636D410(v84, (const char *)0x37, (const llvm::APInt *)&v106, v91, v90, (uint64_t *)v111, v112, v93);
  v96 = v95;
  *(_QWORD *)&v104 = v100;
  v97 = sub_1C6364290((uint64_t *)(a1 + 8), &v104);
  v97[1] = v94;
  *((_DWORD *)v97 + 4) = v96;
  if (v106)
    llvm::MetadataTracking::untrack((uint64_t)&v106, (unsigned __int8 *)v106);
  if (__src != v110)
    free(__src);
  if (v111 != v113)
    free(v111);
LABEL_2:
  if (v114 != (__int128 *)v116)
    free(v114);
}

void sub_1C5D1B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned __int8 **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *__src;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  llvm *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  llvm *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  int v61;
  _BOOL8 v62;
  unsigned int v63;
  int v64;
  _DWORD *v65;
  int v66;
  unint64_t v67;
  llvm::LLVMContext *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  _DWORD *v89;
  signed int v90;
  int v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  llvm *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  char v108;
  uint64_t *v109;
  uint64_t *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  llvm *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  int v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t EVT;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  llvm *v140;
  uint64_t v141;
  signed int v142;
  _QWORD *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t *v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  int v176;
  int v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t *v180;
  int v181;
  int v182;
  _QWORD *v183;
  int v184;
  int v185;
  _QWORD *v186;
  uint64_t v187;
  llvm *v188;
  int v189;
  int v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  int v197[2];
  __int128 v198;
  llvm *v199;
  uint64_t v200;
  unsigned __int8 *v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  void *v205;
  void *v206;
  uint64_t v207;
  _BYTE v208[32];
  void *v209;
  uint64_t v210;
  _BYTE v211[128];
  uint64_t *v212;
  uint64_t v213;
  _QWORD v214[18];

  v3 = a1;
  v214[16] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(unsigned __int8 ***)(a2 - 8);
  else
    v5 = (unsigned __int8 **)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = sub_1C635FDC4(a1, *v5);
  v8 = v7;
  v204 = v7;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  v196 = sub_1C635FDC4(v3, *(unsigned __int8 **)(v10 + 32));
  v12 = v11;
  v203 = v11;
  v13 = 24;
  if (*(_BYTE *)(a2 + 16) == 91)
    v13 = 64;
  v14 = 32;
  if (*(_BYTE *)(a2 + 16) == 91)
    v14 = 72;
  v15 = *(unsigned int *)(a2 + v14);
  __src = *(_DWORD **)(a2 + v13);
  v17 = *(_QWORD *)v3;
  v18 = *(_DWORD *)(v3 + 816);
  v201 = 0;
  v202 = v18;
  if (v17)
  {
    v19 = (unsigned __int8 **)(v17 + 48);
    if (v19 != &v201)
    {
      v20 = *v19;
      v201 = v20;
      if (v20)
        llvm::MetadataTracking::track((uint64_t)&v201, v20, 2);
    }
  }
  v21 = (llvm *)sub_1C47A7FD0(*(_QWORD *)(*(_QWORD *)(v3 + 832) + 24), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v3 + 832) + 40) + 40) + 272, *(_QWORD *)a2, 0);
  v199 = v21;
  v200 = v22;
  v198 = *(_OWORD *)(v6[5] + 16 * v8);
  if ((_DWORD)v15)
  {
    v24 = 4 * v15;
    v25 = __src;
    while (!*v25)
    {
      ++v25;
      v24 -= 4;
      if (!v24)
        goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_19:
  if ((_BYTE)v21)
  {
    if (v21 - 120 >= 0x33)
      goto LABEL_21;
LABEL_24:
    v30 = (uint64_t)v6;
    v31 = *(_QWORD *)(v3 + 832);
    v32 = (llvm *)sub_1C6131264((unsigned __int8 *)&v198, v22, v23);
    v34 = v33;
    v35 = sub_1C6366C9C(*(_QWORD *)(v3 + 832), 0, (uint64_t)&v201, 0);
    v38 = 0;
    v39 = *(_QWORD *)(v31 + 832);
    if (v39)
      v38 = *(_WORD *)(v39 + 8);
    v41 = sub_1C5D56C70(v31, 148, (const llvm::APInt *)&v201, v32, v34, v30, v8, v37, v35, v36, v38);
    v42 = *(_QWORD *)(v3 + 832);
    v43 = *(_QWORD *)(v42 + 832);
    if (v43)
      v44 = *(_WORD *)(v43 + 8);
    else
      v44 = 0;
    v28 = sub_1C5D52060(v42, 156, (const llvm::APInt *)&v201, v199, v200, (uint64_t)v41, v40, v44);
    goto LABEL_41;
  }
  if (*(_BYTE *)(v22 + 8) == 19)
    goto LABEL_24;
LABEL_21:
  v26 = sub_1C612FE00((llvm::EVT *)&v198, (const char *)v22);
  if (v26 == (_DWORD)v15)
  {
    v28 = sub_1C5D41DE4(*(_QWORD *)(v3 + 832), v199, v200, (uint64_t)&v201, (uint64_t)v6, v8, (uint64_t)v196, v12, __src, v15);
LABEL_41:
    v56 = v28;
    v57 = v29;
    v212 = (uint64_t *)a2;
LABEL_42:
    v58 = sub_1C6364290((uint64_t *)(v3 + 8), &v212);
    v58[1] = v56;
    *((_DWORD *)v58 + 4) = v57;
    goto LABEL_43;
  }
  v45 = v26;
  v192 = (void *)a2;
  v195 = v3;
  if (v26 < v15)
  {
    v46 = v15 / v26;
    if (v15 % v26)
    {
LABEL_64:
      v67 = (v15 + v45 - 1) / v45 * v45;
      v68 = *(llvm::LLVMContext **)(*(_QWORD *)(v3 + 832) + 56);
      v69 = sub_1C6131264((unsigned __int8 *)&v199, v46, v27);
      v71 = sub_1C4816F98(v68, v69, v70, ((v15 + v45 - 1) / v45) * v45, 0);
      v187 = v72;
      v188 = (llvm *)v71;
      v73 = sub_1C61312D0(*(_QWORD *)(v3 + 832), (llvm *)v198, *((uint64_t *)&v198 + 1));
      v75 = v74;
      v212 = v214;
      v213 = 0x800000000;
      sub_1C4825C80((unsigned int *)&v212, v67 / v45, (uint64_t)v73, v74);
      v209 = v211;
      v210 = 0x800000000;
      sub_1C4825C80((unsigned int *)&v209, v67 / v45, (uint64_t)v73, v75);
      v76 = v212;
      *v212 = (uint64_t)v6;
      *((_DWORD *)v76 + 2) = v8;
      v77 = v209;
      *(_QWORD *)v209 = v196;
      v77[2] = v12;
      v78 = *(_QWORD *)(v3 + 832);
      v79 = *(_QWORD *)(v78 + 832);
      if (v79)
        v80 = *(unsigned __int16 *)(v79 + 8);
      else
        v80 = 0;
      v81 = sub_1C636D0C8(v78, (const char *)0x95, (const llvm::APInt *)&v201, v188, v187, v212, v213, v80);
      LODWORD(v204) = v82;
      v83 = *(_QWORD *)(v3 + 832);
      v84 = *(_QWORD *)(v83 + 832);
      if (v84)
        v85 = *(unsigned __int16 *)(v84 + 8);
      else
        v85 = 0;
      v86 = sub_1C636D0C8(v83, (const char *)0x95, (const llvm::APInt *)&v201, v188, v187, (uint64_t *)v209, v210, v85);
      LODWORD(v203) = v87;
      v206 = v208;
      v207 = 0x800000000;
      sub_1C4893E04((char *)&v206, ((v15 + v45 - 1) / v45) * v45, -1);
      v88 = 0;
      v89 = v206;
      do
      {
        v90 = __src[v88];
        if (v90 >= (int)v45)
          v91 = v67 - v45;
        else
          v91 = 0;
        v89[v88++] = v91 + v90;
      }
      while ((_DWORD)v15 != (_DWORD)v88);
      v92 = sub_1C5D41DE4(*(_QWORD *)(v3 + 832), v188, v187, (uint64_t)&v201, (uint64_t)v81, v204, (uint64_t)v86, v203, v89, v207);
      v94 = v93;
      if ((_DWORD)v15 == (_DWORD)v67)
      {
        v95 = v192;
      }
      else
      {
        v96 = *(_QWORD *)(v3 + 832);
        v97 = v199;
        v98 = v200;
        v99 = sub_1C6366C9C(v96, 0, (uint64_t)&v201, 0);
        v102 = 0;
        v103 = *(_QWORD *)(v96 + 832);
        v95 = v192;
        if (v103)
          v102 = *(_WORD *)(v103 + 8);
        v92 = sub_1C5D56C70(v96, 151, (const llvm::APInt *)&v201, v97, v98, (uint64_t)v92, v94, v101, v99, v100, v102);
        LODWORD(v94) = v104;
        v3 = v195;
      }
      v205 = v95;
      v105 = sub_1C6364290((uint64_t *)(v3 + 8), &v205);
      v105[1] = v92;
      *((_DWORD *)v105 + 4) = v94;
      if (v206 != v208)
        free(v206);
      if (v209 != v211)
        free(v209);
      v106 = v212;
      if (v212 != v214)
        goto LABEL_173;
    }
    else
    {
      v209 = v211;
      v210 = 0x800000000;
      sub_1C4893E04((char *)&v209, v46, -1);
      v47 = 0;
      v48 = v209;
      do
      {
        v49 = __src[v47];
        if ((v49 & 0x80000000) == 0)
        {
          v50 = v49 / v45;
          v51 = v49 % v45;
          v52 = v47 / v45;
          if (v51 != v47 % v45 || (v53 = v48[v52], (v53 & 0x80000000) == 0) && v53 != v50)
          {
            if (v48 != (_DWORD *)v211)
              free(v48);
            goto LABEL_64;
          }
          v48[v52] = v50;
        }
        ++v47;
      }
      while (v15 != v47);
      v212 = v214;
      v213 = 0x800000000;
      if ((_DWORD)v210)
      {
        LODWORD(v54) = 0;
        v164 = 4 * v210;
        v165 = v196;
        do
        {
          if ((*v48 & 0x80000000) != 0)
          {
            v168 = v6;
            v169 = sub_1C61312D0(*(_QWORD *)(v3 + 832), (llvm *)v198, *((uint64_t *)&v198 + 1));
            v167 = v170;
            v171 = v213;
            if (v213 >= (unint64_t)HIDWORD(v213))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v213 + 1, 16);
              v171 = v213;
            }
            v166 = &v212[2 * v171];
            *v166 = (uint64_t)v169;
            v6 = v168;
            v165 = v196;
          }
          else if (*v48)
          {
            if (v54 >= HIDWORD(v213))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v54 + 1, 16);
              v165 = v196;
              LODWORD(v54) = v213;
            }
            v166 = &v212[2 * v54];
            *v166 = (uint64_t)v165;
            v167 = v12;
          }
          else
          {
            if (v54 >= HIDWORD(v213))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v54 + 1, 16);
              v165 = v196;
              LODWORD(v54) = v213;
            }
            v166 = &v212[2 * v54];
            *v166 = (uint64_t)v6;
            v167 = v8;
          }
          v166[1] = v167;
          v54 = (v213 + 1);
          LODWORD(v213) = v213 + 1;
          ++v48;
          v164 -= 4;
        }
        while (v164);
        v55 = v212;
      }
      else
      {
        v54 = 0;
        v55 = v214;
      }
      v172 = *(_QWORD *)(v3 + 832);
      v173 = *(_QWORD *)(v172 + 832);
      if (v173)
        v174 = *(unsigned __int16 *)(v173 + 8);
      else
        v174 = 0;
      v175 = sub_1C636D0C8(v172, (const char *)0x95, (const llvm::APInt *)&v201, v199, v200, v55, v54, v174);
      v177 = v176;
      v206 = v192;
      v178 = sub_1C6364290((uint64_t *)(v3 + 8), &v206);
      v178[1] = v175;
      *((_DWORD *)v178 + 4) = v177;
      if (v212 != v214)
        free(v212);
      v106 = v209;
      if (v209 != v211)
        goto LABEL_173;
    }
    goto LABEL_43;
  }
  if (v26 <= v15)
    goto LABEL_114;
  v206 = (void *)-1;
  if (!(_DWORD)v15)
    goto LABEL_61;
  v59 = 0;
  v60 = 1;
  do
  {
    v61 = __src[v59];
    if ((v61 & 0x80000000) == 0)
    {
      v62 = v61 >= (int)v26;
      if (v61 < (int)v26)
        v63 = 0;
      else
        v63 = v26;
      v64 = (int)(v61 - v63) / v15 * v15;
      v65 = (_DWORD *)((unint64_t)&v206 | (4 * v62));
      if (v64 + (int)v15 > v26 || (*v65 & 0x80000000) == 0 && *v65 != v64)
        v60 = 0;
      *v65 = v64;
    }
    ++v59;
  }
  while (v15 != v59);
  if ((v206 & 0x80000000) != 0 && (HIDWORD(v206) & 0x80000000) != 0)
  {
LABEL_61:
    v56 = sub_1C61312D0(*(_QWORD *)(v3 + 832), v199, v200);
    v57 = v66;
    v212 = (uint64_t *)a2;
    goto LABEL_42;
  }
  if ((v60 & 1) == 0)
  {
LABEL_114:
    if ((_BYTE)v199)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v199);
      v137 = 0;
      v136 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v200 + 24), 0, v27);
      v136 = v135;
      v137 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    v212 = v214;
    v213 = 0x800000000;
    if ((_DWORD)v15)
    {
      v194 = v6;
      v140 = (llvm *)(v137 | EVT);
      v141 = 4 * v15;
      do
      {
        v142 = *__src;
        if ((*__src & 0x80000000) != 0)
        {
          v143 = sub_1C61312D0(*(_QWORD *)(v195 + 832), v140, v136);
        }
        else
        {
          if (v142 >= (int)v45)
            v145 = v45;
          else
            v145 = 0;
          v146 = *(_QWORD *)(v195 + 832);
          if (v142 >= (int)v45)
            v147 = (uint64_t)v196;
          else
            v147 = (uint64_t)v194;
          if (v142 >= (int)v45)
            v148 = v12;
          else
            v148 = v8;
          v149 = sub_1C6366C9C(*(_QWORD *)(v195 + 832), (int)(v142 - v145), (uint64_t)&v201, 0);
          v152 = *(_QWORD *)(v146 + 832);
          if (v152)
            LOWORD(v152) = *(_WORD *)(v152 + 8);
          v143 = sub_1C5D56C70(v146, 148, (const llvm::APInt *)&v201, v140, v136, v147, v148, v151, v149, v150, v152);
        }
        v153 = v143;
        v154 = v144;
        v155 = v213;
        if (v213 >= (unint64_t)HIDWORD(v213))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v213 + 1, 16);
          v155 = v213;
        }
        v156 = &v212[2 * v155];
        *v156 = (uint64_t)v153;
        v156[1] = v154;
        v138 = (v213 + 1);
        LODWORD(v213) = v213 + 1;
        ++__src;
        v141 -= 4;
      }
      while (v141);
      v139 = v212;
      v3 = v195;
    }
    else
    {
      v138 = 0;
      v139 = v214;
    }
    v157 = *(_QWORD *)(v3 + 832);
    v158 = *(_QWORD *)(v157 + 832);
    if (v158)
      v159 = *(unsigned __int16 *)(v158 + 8);
    else
      v159 = 0;
    v160 = sub_1C636D0C8(v157, (const char *)0x92, (const llvm::APInt *)&v201, v199, v200, v139, v138, v159);
    v162 = v161;
    v209 = v192;
    v163 = sub_1C6364290((uint64_t *)(v3 + 8), &v209);
    v163[1] = v160;
    *((_DWORD *)v163 + 4) = v162;
    v106 = v212;
    if (v212 != v214)
      goto LABEL_173;
    goto LABEL_43;
  }
  v189 = HIDWORD(v206);
  v190 = (int)v206;
  v107 = 0;
  v108 = 1;
  v109 = v196;
  do
  {
    v110 = v6;
    v111 = v108;
    v112 = *((unsigned int *)&v206 + v107);
    v113 = *(_QWORD *)(v3 + 832);
    v114 = v199;
    v115 = v200;
    if ((v112 & 0x80000000) != 0)
    {
      v116 = v109;
      v117 = sub_1C61312D0(*(_QWORD *)(v3 + 832), v199, v200);
      if ((v111 & 1) != 0)
        v109 = v116;
      else
        v109 = v117;
      if ((v111 & 1) != 0)
        v6 = v117;
      else
        v6 = v110;
      if ((v111 & 1) != 0)
        v119 = &v204;
      else
        v119 = &v203;
    }
    else
    {
      *(_QWORD *)v197 = v109;
      if ((v108 & 1) != 0)
        v120 = (uint64_t)v110;
      else
        v120 = (uint64_t)v109;
      v193 = v120;
      if ((v111 & 1) != 0)
        v119 = &v204;
      else
        v119 = &v203;
      v191 = *v119;
      v121 = sub_1C6366C9C(v113, v112, (uint64_t)&v201, 0);
      v124 = *(_QWORD *)(v113 + 832);
      if (v124)
        LOWORD(v124) = *(_WORD *)(v124 + 8);
      v125 = sub_1C5D56C70(v113, 151, (const llvm::APInt *)&v201, v114, v115, v193, v191, v123, v121, v122, v124);
      v109 = *(uint64_t **)v197;
      if ((v111 & 1) != 0)
      {
        v6 = v125;
      }
      else
      {
        v109 = v125;
        v6 = v110;
      }
    }
    v108 = 0;
    *(_DWORD *)v119 = v118;
    v107 = 1;
    v3 = v195;
  }
  while ((v111 & 1) != 0);
  v212 = v214;
  v213 = 0x800000000;
  v126 = (uint64_t)v109;
  if (v15 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v212, (uint64_t)v214, v15, 4);
    v127 = v213;
    v128 = v212;
  }
  else
  {
    v127 = 0;
    v128 = v214;
  }
  memcpy((char *)v128 + 4 * v127, __src, 4 * v15);
  v129 = v212;
  v130 = v213;
  v131 = (v213 + v15);
  LODWORD(v213) = v213 + v15;
  if (!(v130 + (_DWORD)v15))
  {
    v132 = 0;
    v133 = (void *)a2;
    goto LABEL_172;
  }
  v179 = 4 * v131;
  v180 = v212;
  v133 = (void *)a2;
  do
  {
    v181 = *(_DWORD *)v180;
    if (*(_DWORD *)v180 >= (signed int)v45)
    {
      v182 = v15 - (v45 + v189) + v181;
    }
    else
    {
      if (v181 < 0)
        goto LABEL_170;
      v182 = v181 - v190;
    }
    *(_DWORD *)v180 = v182;
LABEL_170:
    v180 = (uint64_t *)((char *)v180 + 4);
    v179 -= 4;
  }
  while (v179);
  v132 = v213;
LABEL_172:
  v183 = sub_1C5D41DE4(*(_QWORD *)(v195 + 832), v199, v200, (uint64_t)&v201, (uint64_t)v6, v204, v126, v203, v129, v132);
  v185 = v184;
  v209 = v133;
  v186 = sub_1C6364290((uint64_t *)(v195 + 8), &v209);
  v186[1] = v183;
  *((_DWORD *)v186 + 4) = v185;
  v106 = v212;
  if (v212 != v214)
LABEL_173:
    free(v106);
LABEL_43:
  if (v201)
    llvm::MetadataTracking::untrack((uint64_t)&v201, v201);
}

void sub_1C5D1C1D0(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  llvm ***v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t *v42;
  int v43;
  int v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  int v47;
  _BYTE *v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[64];
  void *v52;
  uint64_t v53;
  _QWORD v54[9];

  v54[8] = *MEMORY[0x1E0C80C00];
  v7 = 64;
  if (a2[16] != 92)
    v7 = 24;
  v8 = 32;
  if (a2[16] == 92)
    v8 = 72;
  v9 = *(unsigned int *)&a2[v8];
  v10 = *(_DWORD **)&a2[v7];
  v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0)
    v12 = (llvm ***)*((_QWORD *)a2 - 1);
  else
    v12 = (llvm ***)&a2[-32 * (v11 & 0x7FFFFFF)];
  v13 = (unsigned __int8 *)*v12;
  v14 = *(_QWORD *)a2;
  v15 = *((unsigned __int8 *)*v12 + 16);
  v16 = llvm::ComputeLinearIndex(**v12, v10, &v10[v9], 0, a5);
  v17 = *(_QWORD *)(a1 + 832);
  v18 = *(_QWORD *)(v17 + 24);
  v52 = v54;
  v53 = 0x400000000;
  llvm::ComputeValueVTs(v18, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v17 + 40) + 40) + 272), v14, (uint64_t)&v52, 0, 0, 0);
  v19 = v53;
  if ((_DWORD)v53)
  {
    v49 = v51;
    v50 = 0x400000000;
    sub_1C4825C80((unsigned int *)&v49, v53, 0, 0);
    v24 = sub_1C635FDC4(a1, v13);
    v25 = 0;
    v27 = v16 + v26;
    do
    {
      if ((v15 - 11) <= 1)
      {
        v31 = v24[5] + 16 * v27;
        v29 = sub_1C61312D0(*(_QWORD *)(a1 + 832), *(llvm **)v31, *(_QWORD *)(v31 + 8));
      }
      else
      {
        v28 = v27;
        v29 = v24;
      }
      v30 = (char *)v49 + v25;
      *(_QWORD *)v30 = v29;
      *((_DWORD *)v30 + 2) = v28;
      v25 += 16;
      ++v27;
      --v19;
    }
    while (v19);
    v32 = *(_QWORD *)(a1 + 832);
    v33 = *(_QWORD *)a1;
    v34 = *(_DWORD *)(a1 + 816);
    v46 = 0;
    v47 = v34;
    v35 = v32;
    if (v33)
    {
      v36 = (unsigned __int8 **)(v33 + 48);
      v35 = v32;
      if (v36 != &v46)
      {
        v37 = *v36;
        v46 = v37;
        v35 = v32;
        if (v37)
        {
          llvm::MetadataTracking::track((uint64_t)&v46, v37, 2);
          v35 = *(_QWORD *)(a1 + 832);
        }
      }
    }
    v39 = sub_1C636AB20(v35, (uint64_t *)v52, v53);
    v40 = *(_QWORD *)(v32 + 832);
    if (v40)
      v41 = *(_WORD *)(v40 + 8);
    else
      v41 = 0;
    v42 = sub_1C636D410(v32, (const char *)0x37, (const llvm::APInt *)&v46, v39, v38, (uint64_t *)v49, v50, v41);
    v44 = v43;
    v48 = a2;
    v45 = sub_1C6364290((uint64_t *)(a1 + 8), &v48);
    v45[1] = v42;
    *((_DWORD *)v45 + 4) = v44;
    if (v46)
      llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
    if (v49 != v51)
      free(v49);
  }
  else
  {
    v20 = sub_1C61312D0(*(_QWORD *)(a1 + 832), (llvm *)1, 0);
    v22 = v21;
    v49 = a2;
    v23 = sub_1C6364290((uint64_t *)(a1 + 8), &v49);
    v23[1] = v20;
    *((_DWORD *)v23 + 4) = v22;
  }
  if (v52 != v54)
    free(v52);
}

void sub_1C5D1C4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  llvm *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  int v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  int v27;
  uint64_t *v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t *v57;
  int v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[64];
  void *v72;
  uint64_t v73;
  _BYTE v74[64];
  llvm **v75;
  uint64_t v76;
  _QWORD v77[10];

  v77[8] = *MEMORY[0x1E0C80C00];
  v7 = 64;
  if (*(_BYTE *)(a2 + 16) != 93)
    v7 = 24;
  v8 = 32;
  if (*(_BYTE *)(a2 + 16) == 93)
    v8 = 72;
  v9 = *(unsigned int *)(a2 + v8);
  v10 = *(_DWORD **)(a2 + v7);
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(unsigned __int8 ***)(a2 - 8);
  else
    v12 = (unsigned __int8 **)(a2 - 32 * (v11 & 0x7FFFFFF));
  v13 = *v12;
  v14 = v12[4];
  v15 = *(llvm **)a2;
  v16 = *(_QWORD *)v14;
  v64 = (*v12)[16];
  v62 = v14[16];
  v17 = llvm::ComputeLinearIndex(*(llvm **)a2, v10, &v10[v9], 0, a5);
  v18 = *(_QWORD *)(a1 + 832);
  v19 = *(_QWORD *)(v18 + 24);
  v75 = (llvm **)v77;
  v76 = 0x400000000;
  llvm::ComputeValueVTs(v19, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v18 + 40) + 40) + 272), (uint64_t)v15, (uint64_t)&v75, 0, 0, 0);
  v72 = v74;
  v73 = 0x400000000;
  llvm::ComputeValueVTs(v19, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), v16, (uint64_t)&v72, 0, 0, 0);
  v20 = v76;
  v21 = v73;
  v69 = v71;
  v70 = 0x400000000;
  sub_1C4825C80((unsigned int *)&v69, v76, 0, 0);
  if (v20)
  {
    v61 = a2;
    v26 = v64 - 11;
    v65 = a1;
    v28 = sub_1C635FDC4(a1, v13);
    v29 = v27;
    if (v17)
    {
      v38 = 0;
      v39 = v27;
      do
      {
        if (v26 <= 1)
        {
          v41 = sub_1C61312D0(*(_QWORD *)(v65 + 832), v75[v38], (uint64_t)v75[v38 + 1]);
        }
        else
        {
          v40 = v39;
          v41 = v28;
        }
        v42 = (char *)v69 + v38 * 8;
        *(_QWORD *)v42 = v41;
        *((_DWORD *)v42 + 2) = v40;
        v38 += 2;
        ++v39;
      }
      while (2 * v17 != v38);
    }
    if (v21)
    {
      v30 = v62 - 11;
      v31 = sub_1C635FDC4(v65, v14);
      v33 = v32;
      v63 = v21 + v17;
      do
      {
        if (v30 <= 1)
        {
          v36 = v17;
          v35 = sub_1C61312D0(*(_QWORD *)(v65 + 832), v75[2 * v17], (uint64_t)v75[2 * v17 + 1]);
        }
        else
        {
          v34 = v33;
          v35 = v31;
          v36 = v17;
        }
        v37 = (char *)v69 + 16 * v36;
        *(_QWORD *)v37 = v35;
        *((_DWORD *)v37 + 2) = v34;
        ++v17;
        ++v33;
        --v21;
      }
      while (v21);
      v17 = v63;
    }
    for (; v20 != v17; ++v17)
    {
      if (v26 <= 1)
      {
        v54 = v17;
        v55 = sub_1C61312D0(*(_QWORD *)(v65 + 832), v75[2 * v17], (uint64_t)v75[2 * v17 + 1]);
      }
      else
      {
        v53 = v29 + v17;
        v54 = v17;
        v55 = v28;
      }
      v56 = (char *)v69 + 16 * v54;
      *(_QWORD *)v56 = v55;
      *((_DWORD *)v56 + 2) = v53;
    }
    v43 = *(_QWORD *)(v65 + 832);
    v44 = *(_QWORD *)v65;
    v45 = *(_DWORD *)(v65 + 816);
    v66 = 0;
    v67 = v45;
    v46 = v43;
    if (v44)
    {
      v47 = (unsigned __int8 **)(v44 + 48);
      v46 = v43;
      if (v47 != &v66)
      {
        v48 = *v47;
        v66 = v48;
        v46 = v43;
        if (v48)
        {
          llvm::MetadataTracking::track((uint64_t)&v66, v48, 2);
          v46 = *(_QWORD *)(v65 + 832);
        }
      }
    }
    v50 = sub_1C636AB20(v46, (uint64_t *)v75, v76);
    v51 = *(_QWORD *)(v43 + 832);
    if (v51)
      v52 = *(_WORD *)(v51 + 8);
    else
      v52 = 0;
    v57 = sub_1C636D410(v43, (const char *)0x37, (const llvm::APInt *)&v66, v50, v49, (uint64_t *)v69, v70, v52);
    v59 = v58;
    v68 = v61;
    v60 = sub_1C6364290((uint64_t *)(v65 + 8), &v68);
    v60[1] = v57;
    *((_DWORD *)v60 + 4) = v59;
    if (v66)
      llvm::MetadataTracking::untrack((uint64_t)&v66, v66);
  }
  else
  {
    v22 = sub_1C61312D0(*(_QWORD *)(a1 + 832), (llvm *)1, 0);
    v24 = v23;
    v66 = (unsigned __int8 *)a2;
    v25 = sub_1C6364290((uint64_t *)(a1 + 8), &v66);
    v25[1] = v22;
    *((_DWORD *)v25 + 4) = v24;
  }
  if (v69 != v71)
    free(v69);
  if (v72 != v74)
    free(v72);
  if (v75 != v77)
    free(v75);
}

uint64_t sub_1C5D1C8F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v3 = *(_QWORD *)(result + 80);
  v17 = *(_QWORD *)(result + 88);
  if (v3 != v17)
  {
    v6 = result;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8);
      v8 = *(_QWORD *)(v3 + 16);
      if (v7 != v8)
      {
        do
        {
          v9 = *(_QWORD *)v7 - 32 * (*(_DWORD *)(*(_QWORD *)v7 + 20) & 0x7FFFFFF);
          if (*(_QWORD *)(*(_QWORD *)(v9 + 32) + 24) == a2
            && sub_1C520AAB4(a3, *(_QWORD *)(*(_QWORD *)(v9 + 64) + 24)))
          {
            sub_1C5D1CABC(v6, (_QWORD *)v7);
          }
          v7 += 24;
        }
        while (v7 != v8);
        v7 = *(_QWORD *)(v3 + 8);
        v10 = *(_QWORD *)(v3 + 16);
        if (v7 != v10)
          break;
      }
LABEL_13:
      result = sub_1C636489C(v3 + 8, v7, *(_QWORD *)(v3 + 16));
      v3 += 32;
      if (v3 == v17)
        return result;
    }
    while (1)
    {
      v11 = *(_QWORD *)v7 - 32 * (*(_DWORD *)(*(_QWORD *)v7 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) == a2
        && sub_1C520AAB4(a3, *(_QWORD *)(*(_QWORD *)(v11 + 64) + 24)))
      {
        break;
      }
      v7 += 24;
      if (v7 == v10)
      {
        v7 = v10;
        goto LABEL_13;
      }
    }
    for (i = v7 + 24; ; i += 24)
    {
      if (i == v10)
        goto LABEL_13;
      v13 = *(_QWORD *)i;
      v14 = *(_QWORD *)i - 32 * (*(_DWORD *)(*(_QWORD *)i + 20) & 0x7FFFFFF);
      if (*(_QWORD *)(*(_QWORD *)(v14 + 32) + 24) == a2)
      {
        if (sub_1C520AAB4(a3, *(_QWORD *)(*(_QWORD *)(v14 + 64) + 24)))
          continue;
        v13 = *(_QWORD *)i;
      }
      *(_QWORD *)v7 = v13;
      v15 = (unsigned __int8 **)(v7 + 8);
      if (i != v7)
      {
        if (*v15)
          llvm::MetadataTracking::untrack(v7 + 8, *v15);
        *v15 = *(unsigned __int8 **)(i + 8);
        v16 = *(unsigned __int8 **)(i + 8);
        if (v16)
        {
          llvm::MetadataTracking::retrack(i + 8, v16, v7 + 8);
          *(_QWORD *)(i + 8) = 0;
        }
      }
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(i + 16);
      v7 += 24;
    }
  }
  return result;
}

void sub_1C5D1CABC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  llvm::Type **v8;
  llvm::DIVariable *v9;
  uint64_t **appended;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char v13;
  unsigned __int8 *v14;
  llvm::CastInst *v15;
  unint64_t NumLocationOperands;
  BOOL v17;
  int v18;
  uint64_t v19;
  llvm::UndefValue *v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  llvm::Type **v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[32];
  void *v32;
  uint64_t v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF));
  v6 = *(unsigned __int8 **)(*v5 + 24);
  v7 = *v6;
  if (v7 > 0x22)
    goto LABEL_4;
  if (v7 == 32)
  {
    v6 = (unsigned __int8 *)**((_QWORD **)v6 + 3);
LABEL_4:
    v8 = (llvm::Type **)*((_QWORD *)v6 + 16);
    goto LABEL_7;
  }
  if (((1 << v7) & 0x6FFFFFFF0) == 0)
    goto LABEL_4;
  v8 = 0;
LABEL_7:
  v28 = v8;
  v9 = *(llvm::DIVariable **)(v5[4] + 24);
  appended = *(uint64_t ***)(v5[8] + 24);
  v11 = (unsigned __int8 *)a2[1];
  v27 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)&v27, v11, 2);
    v4 = *a2;
  }
  v12 = *(unsigned __int8 **)(v4 + 48);
  v26 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v26, v12, 2);
  v25 = v27;
  if (v27)
    llvm::MetadataTracking::track((uint64_t)&v25, v27, 2);
  v24 = v26;
  if (v26)
    llvm::MetadataTracking::track((uint64_t)&v24, v26, 2);
  v13 = sub_1C5D1D678(a1, (uint64_t *)&v28, 1, v9, appended, &v25, (uint64_t)&v24, 0);
  if (v24)
    llvm::MetadataTracking::untrack((uint64_t)&v24, v24);
  v14 = v25;
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  if ((v13 & 1) == 0)
  {
    while (1)
    {
      v15 = (llvm::CastInst *)v28;
      if (*((unsigned __int8 *)v28 + 16) < 0x1Cu)
        break;
      v32 = v34;
      v33 = 0x1000000000;
      v29 = v31;
      v30 = 0x400000000;
      NumLocationOperands = llvm::DIExpression::getNumLocationOperands((llvm::DIExpression *)appended);
      v28 = llvm::salvageDebugInfoImpl(v15, NumLocationOperands, (unsigned int *)&v32, (uint64_t)&v29);
      if (v28)
        v17 = (_DWORD)v30 == 0;
      else
        v17 = 0;
      if (v17)
      {
        appended = (uint64_t **)llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v32, v33, 0, 1);
        v23 = v27;
        if (v27)
          llvm::MetadataTracking::track((uint64_t)&v23, v27, 2);
        v22 = v26;
        if (v26)
          llvm::MetadataTracking::track((uint64_t)&v22, v26, 2);
        v18 = sub_1C5D1D678(a1, (uint64_t *)&v28, 1, v9, appended, &v23, (uint64_t)&v22, 0);
        if (v22)
          llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
        v14 = v23;
        if (v23)
          llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
      }
      else
      {
        v18 = 3;
      }
      if (v29 != v31)
        free(v29);
      if (v32 != v34)
        free(v32);
      if (v18)
      {
        if (v18 != 3)
          goto LABEL_40;
        break;
      }
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF)) + 24);
    if (*(_BYTE *)v19 == 32)
      v19 = **(_QWORD **)(v19 + 24);
    v20 = llvm::UndefValue::get(**(llvm::UndefValue ***)(v19 + 128), (llvm::Type *)v14);
    v21 = (_QWORD *)sub_1C636E9B0(*(_QWORD *)(a1 + 832), (uint64_t)v9, (uint64_t)appended, (uint64_t)v20, &v27, *(_DWORD *)(a1 + 816));
    sub_1C636ED38(*(_QWORD *)(a1 + 832), v21, 0);
  }
LABEL_40:
  if (v26)
    llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
}

void sub_1C5D1CE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  llvm::DIExpression *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26[2];

  v26[0] = a3;
  v26[1] = a4;
  v24 = a4;
  v7 = sub_1C635FA20(a1 + 56, a2);
  if (*(_QWORD *)(a1 + 88) != v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(v7 + 16);
    if (v9 != v10)
    {
      do
      {
        v12 = *(unsigned __int8 **)v9;
        v11 = *(unsigned __int8 **)(v9 + 8);
        v25 = v11;
        if (v11)
        {
          llvm::MetadataTracking::track((uint64_t)&v25, v11, 2);
          v13 = v25;
        }
        else
        {
          v13 = 0;
        }
        v14 = *(_DWORD *)(a3 + 60);
        v15 = *(_DWORD *)(v9 + 16);
        v16 = &v12[-32 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF)];
        v17 = *(_QWORD *)(*((_QWORD *)v16 + 4) + 24);
        v18 = *(llvm::DIExpression **)(*((_QWORD *)v16 + 8) + 24);
        if ((sub_1C5D1CF80(a1, a2, v17, v18, (uint64_t)v13, 0, v26) & 1) == 0)
        {
          if (v15 <= v14)
            v19 = v14;
          else
            v19 = v15;
          v20 = (_QWORD *)sub_1C635FA84(a1, a3, v24, v17, (uint64_t)v18, &v25, v19);
          sub_1C636ED38(*(_QWORD *)(a1 + 832), v20, 0);
        }
        if (v25)
          llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
        v9 += 24;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)(v8 + 8);
      v21 = *(_QWORD *)(v8 + 16);
      if (v21 == v9)
      {
        v9 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        v22 = (unsigned __int8 **)(v21 - 16);
        do
        {
          if (*v22)
            llvm::MetadataTracking::untrack((uint64_t)v22, *v22);
          v23 = v22 - 1;
          v22 -= 3;
        }
        while (v23 != (unsigned __int8 **)v9);
      }
    }
    *(_QWORD *)(v8 + 16) = v9;
  }
}

uint64_t sub_1C5D1CF80(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DIExpression *a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  BOOL v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  llvm::MDNode *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _QWORD v66[7];
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD v73[4];
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  llvm::DIExpression *v77;
  uint64_t v78;
  llvm::EVT ***v79;
  void *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned __int8 *v83[19];
  unsigned int v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[26];

  v7 = 0;
  v87[24] = *MEMORY[0x1E0C80C00];
  v78 = a3;
  v79 = (llvm::EVT ***)a2;
  v76 = (unsigned __int8 *)a5;
  v77 = a4;
  v75 = a6;
  if (!a2 || *(_BYTE *)(a2 + 16) != 21)
    return v7;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 40);
  v74 = 0;
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 16) + 104))(*(_QWORD *)(v14 + 16));
  v73[0] = v14;
  v73[1] = &v74;
  v73[2] = &v76;
  v73[3] = &v78;
  v74 = v15;
  v16 = *(_QWORD *)(a1 + 912);
  if (!a6)
  {
    if (*(_QWORD *)(v16 + 640) != *(_QWORD *)(*(_QWORD *)(v16 + 8) + 328))
      return 0;
    if (!*(_WORD *)(a3 + 32))
    {
      if (*(_DWORD *)(a1 + 816) != 1)
        return 0;
      goto LABEL_31;
    }
    if (*(_DWORD *)(a5 + 8) == 2)
    {
      v18 = *(_DWORD *)(a1 + 816);
      v19 = v18 == 1;
      if (*(_QWORD *)(a5 - 8))
      {
        if (v18 != 1)
          return 0;
        goto LABEL_31;
      }
    }
    else
    {
      v19 = *(_DWORD *)(a1 + 816) == 1;
    }
    v20 = *(unsigned int *)(a2 + 32);
    v21 = (_QWORD *)(v16 + 304);
    if (v20 >= *(_DWORD *)(v16 + 368))
    {
      v22 = v20 + 1;
      v23 = *(_DWORD *)(v16 + 368) & 0x3F;
      v24 = *(unsigned int *)(v16 + 312);
      if (v23)
      {
        v65 = *(_QWORD *)(v16 + 304) + 8 * v24;
        *(_QWORD *)(v65 - 8) &= ~(-1 << v23);
      }
      v25 = v24;
      *(_DWORD *)(v16 + 368) = v22;
      v26 = v20 + 64;
      if ((_DWORD)v24 != (v20 + 64) >> 6)
      {
        v27 = v26 >> 6;
        if (v24 > v27)
        {
          *(_DWORD *)(v16 + 312) = v27;
          v25 = v26 >> 6;
        }
        else
        {
          v28 = v24;
          if (v27 > *(_DWORD *)(v16 + 316))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 304, v16 + 320, v27, 8);
            v28 = *(unsigned int *)(v16 + 312);
            v25 = *(_DWORD *)(v16 + 312);
          }
          if (v27 != v24)
            bzero((void *)(*v21 + 8 * v28), 8 * (v27 - v24));
          v25 += v27 - v24;
          *(_DWORD *)(v16 + 312) = v25;
          v22 = *(_DWORD *)(v16 + 368);
        }
      }
      v29 = v22 & 0x3F;
      if (v29)
        *(_QWORD *)(*v21 + 8 * v25 - 8) &= ~(-1 << v29);
    }
    else if (!v19 && ((*(_QWORD *)(*v21 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0)
    {
      return 0;
    }
    v16 = *(_QWORD *)(a1 + 912);
    *(_QWORD *)(*(_QWORD *)(v16 + 304) + 8 * (v20 >> 6)) |= 1 << v20;
  }
LABEL_31:
  LOBYTE(v67) = 0;
  v72 = 0;
  v30 = sub_1C632BB28(v16, a2);
  if (v30 != 0x7FFFFFFF)
  {
    v36 = 0;
    v72 = 1;
    v38 = 5;
    v67 = 5;
    v69 = 0;
    LODWORD(v70) = v30;
    v85 = v87;
    v86 = 0x800000000;
    goto LABEL_48;
  }
  v85 = v87;
  v86 = 0x800000000;
  if (!*a7)
  {
LABEL_76:
    v66[0] = &v77;
    v66[1] = a1;
    v66[2] = &v78;
    v66[3] = &v79;
    v66[4] = &v76;
    v66[5] = v73;
    v66[6] = &v75;
    v58 = *(_QWORD *)(a1 + 912);
    v80 = v79;
    v83[0] = 0;
    if ((sub_1C61252B8((uint64_t *)(v58 + 80), &v80, v83) & 1) != 0)
      v59 = v83[0];
    else
      v59 = (unsigned __int8 *)(*(_QWORD *)(v58 + 80) + 16 * *(unsigned int *)(v58 + 96));
    if (v59 == (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 80)
                                  + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 912) + 96)))
    {
      if (v86 > 1)
      {
        sub_1C5D28908((uint64_t)v66, (const char *)v85, v86);
LABEL_70:
        v7 = 1;
        goto LABEL_83;
      }
      goto LABEL_82;
    }
    sub_1C635BCC4((uint64_t)v83, **v79, *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), *((_DWORD *)v59 + 2), (uint64_t)*v79, 0);
    if (v84)
    {
      v61 = 0;
      v62 = v83[18];
      v63 = 4 * v84;
      do
      {
        v64 = *(_DWORD *)v62;
        v62 += 4;
        v61 += v64;
        v63 -= 4;
      }
      while (v63);
      if (v61 >= 2)
      {
        sub_1C635C150(&v80, (uint64_t)v83);
        sub_1C5D28908((uint64_t)v66, (const char *)v80, v81);
        if (v80 != &v82)
          free(v80);
        sub_1C63640DC((uint64_t)v83);
        goto LABEL_70;
      }
    }
    LODWORD(v16) = *((_DWORD *)v59 + 2);
    v72 = 1;
    v67 = 0;
    v68 = v16;
    v70 = 0;
    v71 = 0;
    v69 = 0;
    v36 = v75 != 0;
    sub_1C63640DC((uint64_t)v83);
    v38 = 0;
    goto LABEL_48;
  }
  sub_1C5D287F0((unint64_t)&v85, a7);
  if ((_DWORD)v86 != 1)
  {
LABEL_36:
    v31 = *a7;
    if (!*a7)
      goto LABEL_76;
    while (1)
    {
      v32 = *(unsigned __int16 *)(v31 + 24);
      if (v32 != 216)
        break;
      v31 = **(_QWORD **)(v31 + 32);
    }
    if (v32 != 253)
      goto LABEL_76;
    v33 = *(_QWORD *)(*(_QWORD *)(v31 + 32) + 40);
    v34 = *(unsigned __int16 *)(v33 + 24);
    if (v34 != 39 && v34 != 15)
      goto LABEL_76;
    v36 = 0;
    v37 = *(_DWORD *)(v33 + 76);
    v72 = 1;
    v38 = 5;
    v67 = 5;
    v69 = 0;
    LODWORD(v70) = v37;
LABEL_48:
    v39 = v75;
    goto LABEL_49;
  }
  LODWORD(v16) = *(_DWORD *)v85;
  if ((*(_DWORD *)v85 & 0x80000000) != 0)
  {
    v53 = *(_QWORD *)(v14 + 40);
    v54 = *(_QWORD *)(v53 + 456);
    v55 = *(_QWORD *)(v53 + 464) - v54;
    if (v55)
    {
      v56 = (_DWORD *)(v54 + 4);
      v57 = 8 * (v55 >> 3);
      while (*v56 != (_DWORD)v16)
      {
        v56 += 2;
        v57 -= 8;
        if (!v57)
          goto LABEL_87;
      }
      v60 = *(v56 - 1);
      if (v60)
        LODWORD(v16) = v60;
    }
  }
  else if (!(_DWORD)v16)
  {
    goto LABEL_36;
  }
LABEL_87:
  v38 = 0;
  v72 = 1;
  v67 = 0;
  v68 = v16;
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v39 = v75;
  v36 = v75 != 0;
LABEL_49:
  if (v39 != 1)
  {
    if (v38)
    {
      v83[0] = v76;
      if (v76)
        llvm::MetadataTracking::track((uint64_t)v83, v76, 2);
      llvm::BuildMI((llvm::MachineInstr **)v14, v83, *(_QWORD *)(v74 + 8) + 624, 1, &v67, v78, (uint64_t)v77);
      v49 = v48;
      if (v83[0])
        llvm::MetadataTracking::untrack((uint64_t)v83, v83[0]);
    }
    else
    {
      sub_1C5D28AFC((uint64_t)v73, v16, v77, v36);
      v49 = v50;
    }
    v51 = *(_QWORD *)(a1 + 912);
    v52 = *(unsigned int *)(v51 + 232);
    if (v52 >= *(_DWORD *)(v51 + 236))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v51 + 224, v51 + 240, v52 + 1, 8);
      LODWORD(v52) = *(_DWORD *)(v51 + 232);
    }
    *(_QWORD *)(*(_QWORD *)(v51 + 224) + 8 * v52) = v49;
    ++*(_DWORD *)(v51 + 232);
    goto LABEL_70;
  }
  if (v38
    || (v40 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112)) == 0
    || (v41 = *(_DWORD *)(a2 + 32), (v41 + 2) >= *(_DWORD *)(v40 + 8))
    || (v42 = *(_QWORD *)(v40 + 8 * (v41 + 2) + 40)) == 0)
  {
LABEL_82:
    v7 = 0;
    goto LABEL_83;
  }
  v7 = 0;
  if ((*(_BYTE *)(v42 + 19) & 0x40) != 0 && !v41)
  {
    v43 = **(_DWORD **)(*(_QWORD *)(v14 + 40) + 456);
    v44 = llvm::DIExpression::prepend(v77, (const llvm::DIExpression *)8, 0);
    v77 = v44;
    v45 = *(_QWORD *)(a1 + 832);
    v46 = v78;
    v83[0] = v76;
    if (v76)
      llvm::MetadataTracking::track((uint64_t)v83, v76, 2);
    v47 = (_QWORD *)sub_1C636EB74(v45, v46, (uint64_t)v44, v43, 1, v83, *(_DWORD *)(a1 + 816));
    if (v83[0])
      llvm::MetadataTracking::untrack((uint64_t)v83, v83[0]);
    sub_1C636ED38(*(_QWORD *)(a1 + 832), v47, 0);
    goto LABEL_70;
  }
LABEL_83:
  if (v85 != v87)
    free(v85);
  return v7;
}

uint64_t sub_1C5D1D678(uint64_t a1, uint64_t *a2, uint64_t a3, llvm::DIVariable *a4, uint64_t **a5, unsigned __int8 **a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  __int32 SizeInBits;
  char v39;
  __int32 v40;
  __int32 v41;
  const char *v42;
  char *v43;
  unsigned int v44;
  const llvm::DIExpression *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  const llvm::DIExpression *v50;
  unsigned int v51;
  llvm::MDNode *FragmentExpression;
  _QWORD *v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t *v57;
  unsigned int v58;
  __int128 v59;
  uint64_t v60;
  int8x16_t v61;
  char v62;
  __int128 v63;
  int v64;
  int *v65;
  unsigned int v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE v69[48];
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[8];

  v72[6] = *MEMORY[0x1E0C80C00];
  v8 = 1;
  if (!a3)
    return v8;
  v13 = a2;
  v70 = v72;
  v71 = 0x200000000;
  v67 = v69;
  v15 = &a2[a3];
  v68 = 0x600000000;
  v16 = (uint64_t *)(a1 + 8);
  v57 = (uint64_t *)(a1 + 32);
  while (1)
  {
    v17 = *v13;
    v60 = v17;
    v18 = *(unsigned __int8 *)(v17 + 16);
    if ((v18 & 0xFE) == 0x10)
      goto LABEL_11;
    if (*(unsigned __int8 *)(v17 + 16) > 0x12u)
      break;
    if ((v18 - 11) >= 2)
    {
      if (v18 != 5 || *(_WORD *)(v17 + 18) != 48)
        goto LABEL_19;
      v17 = *(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
    }
LABEL_11:
    LODWORD(v63) = 1;
    *((_QWORD *)&v63 + 1) = v17;
LABEL_12:
    sub_1C635FB10((unint64_t)&v70, &v63);
LABEL_13:
    if (++v13 == v15)
    {
      v36 = (_QWORD *)sub_1C636EC58(*(_QWORD *)(a1 + 832), (uint64_t)a4, (uint64_t)a5, v70, v71, v67, v68, 0, a6, *(_DWORD *)(a1 + 816), a8);
      sub_1C636ED38(*(_QWORD *)(a1 + 832), v36, 0);
LABEL_49:
      v8 = 1;
      goto LABEL_50;
    }
  }
  if (v18 != 59)
  {
    if (v18 != 19)
      goto LABEL_19;
    goto LABEL_11;
  }
  v19 = *(_QWORD *)(a1 + 912);
  v61.i64[0] = v17;
  *(_QWORD *)&v63 = 0;
  if ((sub_1C47A82D8(v19 + 176, &v61, &v63) & 1) != 0)
    v20 = v63;
  else
    v20 = *(_QWORD *)(v19 + 176) + 16 * *(unsigned int *)(v19 + 192);
  if (v20 != *(_QWORD *)(*(_QWORD *)(a1 + 912) + 176) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 912) + 192))
  {
    v25 = *(_DWORD *)(v20 + 8);
    goto LABEL_31;
  }
LABEL_19:
  v59 = *(_OWORD *)(sub_1C6364290(v16, &v60) + 1);
  v21 = v59;
  if ((_QWORD)v59)
    goto LABEL_21;
  v26 = v60;
  if (*(_BYTE *)(v60 + 16) != 21)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
    goto LABEL_40;
  }
  v27 = sub_1C6364290(v57, &v60);
  v21 = v27[1];
  *(_QWORD *)&v59 = v21;
  DWORD2(v59) = *((_DWORD *)v27 + 4);
  if (v21)
  {
LABEL_21:
    if ((a8 & 1) == 0
      && (sub_1C5D1CF80(a1, v60, (uint64_t)a4, (llvm::DIExpression *)a5, (uint64_t)*a6, 0, (uint64_t *)&v59) & 1) != 0)
    {
      goto LABEL_49;
    }
    v22 = *(unsigned __int16 *)(v21 + 24);
    if (v22 != 39 && v22 != 15)
    {
      LODWORD(v63) = 0;
      *((_QWORD *)&v63 + 1) = v21;
      v64 = DWORD2(v59);
      goto LABEL_12;
    }
    v24 = v68;
    if (v68 >= (unint64_t)HIDWORD(v68))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v68 + 1, 8);
      v24 = v68;
    }
    *(_QWORD *)&v67[8 * v24] = v21;
    LODWORD(v68) = v68 + 1;
    v25 = *(_DWORD *)(v21 + 76);
LABEL_31:
    LODWORD(v63) = 2;
    DWORD2(v63) = v25;
    goto LABEL_12;
  }
  v26 = v60;
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
  if (*(_BYTE *)(v60 + 16) == 21
    && *((_WORD *)a4 + 16)
    && (*(_DWORD *)(*(_QWORD *)a7 + 8) != 2 || !*(_QWORD *)(*(_QWORD *)a7 - 8)))
  {
    goto LABEL_55;
  }
LABEL_40:
  v55 = v28;
  v29 = *(_QWORD *)(a1 + 912);
  v61.i64[0] = v26;
  *(_QWORD *)&v63 = 0;
  if ((sub_1C61252B8((uint64_t *)(v29 + 80), &v61, &v63) & 1) != 0)
    v30 = v63;
  else
    v30 = *(_QWORD *)(v29 + 80) + 16 * *(unsigned int *)(v29 + 96);
  if (v30 == *(_QWORD *)(*(_QWORD *)(a1 + 912) + 80) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 912) + 96))
  {
LABEL_55:
    v8 = 0;
    goto LABEL_50;
  }
  v31 = *(_DWORD *)(v30 + 8);
  sub_1C635BCC4((uint64_t)&v63, **(llvm::EVT ***)v60, v55, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), v31, *(_QWORD *)v60, 0);
  if (!v66)
    goto LABEL_48;
  v32 = 0;
  v33 = v65;
  v34 = 4 * v66;
  do
  {
    v35 = *v33++;
    v32 += v35;
    v34 -= 4;
  }
  while (v34);
  if (v32 < 2)
  {
LABEL_48:
    v61.i32[0] = 3;
    v61.i32[2] = v31;
    sub_1C635FB10((unint64_t)&v70, (__int128 *)v61.i8);
    sub_1C63640DC((uint64_t)&v63);
    goto LABEL_13;
  }
  if ((a8 & 1) == 0)
  {
    SizeInBits = llvm::DIVariable::getSizeInBits(a4);
    if (v39)
      v40 = SizeInBits;
    else
      v40 = 0;
    llvm::DIExpression::getFragmentInfo(a5[3], a5[4], &v61);
    if (v62)
      v41 = v61.i32[0];
    else
      v41 = v40;
    sub_1C635C150(&v61, (uint64_t)&v63);
    v43 = (char *)v61.i64[0];
    if (v61.i32[2] && v41)
    {
      v44 = v41;
      v45 = 0;
      v46 = v61.i64[0] + 16;
      v47 = 24 * v61.u32[2] - 24;
      v48 = (int *)(v61.i64[0] + 16);
      v58 = v44;
      do
      {
        v49 = *v48;
        v48 += 6;
        if (v49 == 1)
        {
          v54 = v44;
          v44 = v54;
        }
        v50 = (const llvm::DIExpression *)((_DWORD)v45 + *(_DWORD *)(v46 - 8));
        if (v50 <= v44)
          v51 = *(_DWORD *)(v46 - 8);
        else
          v51 = v44 - (_DWORD)v45;
        FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)a5, v45, v51);
        if ((_BYTE)v42)
        {
          v53 = (_QWORD *)sub_1C636EB74(*(_QWORD *)(a1 + 832), (uint64_t)a4, (uint64_t)FragmentExpression, *(_DWORD *)(v46 - 16), 0, a6, *(_DWORD *)(a1 + 816));
          sub_1C636ED38(*(_QWORD *)(a1 + 832), v53, 0);
          v45 = v50;
        }
        v44 = v58;
        if (!v47)
          break;
        v47 -= 24;
        v46 = (uint64_t)v48;
      }
      while (v45 < v58);
      v43 = (char *)v61.i64[0];
    }
    if (v43 != &v62)
      free(v43);
  }
  v8 = a8 ^ 1u;
  sub_1C63640DC((uint64_t)&v63);
LABEL_50:
  if (v67 != v69)
    free(v67);
  if (v70 != v72)
    free(v70);
  return v8;
}

uint64_t *sub_1C5D1DBE4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const llvm::Value *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16;
  _QWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *v24;
  unsigned int ExtendedSizeInBits;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void **v46;
  void *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned __int8 **v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void **v74;
  void *v75;
  unsigned __int8 v76;
  unsigned __int8 **v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  unsigned int v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  void **v88;
  void *v89;
  uint64_t *v90;
  int v91;
  int v92;
  uint64_t *v93;
  int v94;
  int v95;
  uint64_t *v96;
  int v97;
  int v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  _BOOL4 v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  void **v110;
  void *v111;
  int v113;
  uint64_t v114;
  unsigned __int8 **v115;
  int v116;
  int v117;
  int i;
  unsigned __int8 *ElementAsConstant;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  unsigned int v124;
  uint64_t **v125;
  uint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  void **v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm *v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned __int8 **v143;
  unsigned __int8 *v144;
  _QWORD *v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unsigned __int8 **v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  _QWORD *v154;
  unsigned __int8 *v155;
  int v156;
  unsigned __int8 **v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  unsigned int v162;
  uint64_t **v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  void **v169;
  uint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  int v174;
  unsigned __int8 **v175;
  unsigned __int8 *v176;
  uint64_t v177;
  int v178;
  void **v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  int v191;
  void **v192;
  unint64_t v193;
  uint64_t v194;
  llvm *v195;
  uint64_t v196;
  unsigned int v197;
  unsigned __int8 *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t **v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  void **v208;
  void *v209;
  uint64_t *v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  void **v215;
  void *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  void **v222;
  void *v223;
  int v224;
  int v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  void **v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  _QWORD *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  int v238;
  unint64_t v239;
  unsigned int v240;
  unsigned __int8 *v241;
  const llvm::Value *v242;
  unsigned __int8 *v243;
  void *v244;
  uint64_t v245;
  _BYTE v246[256];
  unsigned __int8 *v247;
  uint64_t v248;
  _QWORD v249[10];

  v3 = a2;
  v249[8] = *MEMORY[0x1E0C80C00];
  v243 = a2;
  v5 = *(_QWORD *)(a1 + 832);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = a2[16];
  if (!a2 || v7 > 0x14)
  {
    if (a2 && v7 == 59)
    {
      v2 = *(_QWORD *)(a1 + 912);
      v247 = a2;
      v244 = 0;
      if ((sub_1C47A82D8(v2 + 176, &v247, &v244) & 1) != 0)
        v18 = v244;
      else
        v18 = (_DWORD *)(*(_QWORD *)(v2 + 176) + 16 * *(unsigned int *)(v2 + 192));
      if (v18 != (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 176)
                           + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 912) + 192)))
      {
        v27 = *(_QWORD *)(a1 + 832);
        v28 = v18[2];
        v29 = *(_QWORD *)(**(_QWORD **)(v27 + 40) + 40);
        v30 = (*(uint64_t (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, v29 + 272, *(unsigned int *)(v29 + 276));
        return (uint64_t *)sub_1C5D406AC(v27, v28, (llvm *)v30, 0, 0);
      }
      v3 = v243;
      v7 = v243[16];
    }
    if (v7 >= 0x1C)
    {
      v51 = sub_1C6128BA8(*(_QWORD *)(a1 + 912), (const llvm::Value *)v3);
      sub_1C635BCC4((uint64_t)&v244, *(llvm::EVT **)(*(_QWORD *)(a1 + 832) + 56), v6, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), v51, *(_QWORD *)v3, 0);
      v52 = *(_QWORD **)(a1 + 832);
      v247 = (unsigned __int8 *)(v52 + 14);
      v248 = 0;
      v53 = *(_QWORD *)(a1 + 912);
      v54 = *(_QWORD *)a1;
      v55 = *(_DWORD *)(a1 + 816);
      v241 = 0;
      LODWORD(v242) = v55;
      if (v54)
      {
        v56 = (unsigned __int8 **)(v54 + 48);
        if (v56 != &v241)
        {
          v57 = *v56;
          v241 = v57;
          if (v57)
            llvm::MetadataTracking::track((uint64_t)&v241, v57, 2);
        }
      }
      v2 = (uint64_t)sub_1C5D10D34((uint64_t)&v244, v52, v53, (const llvm::APInt *)&v241, (uint64_t *)&v247, 0, v243);
      if (v241)
        llvm::MetadataTracking::untrack((uint64_t)&v241, v241);
      sub_1C63640DC((uint64_t)&v244);
      return (uint64_t *)v2;
    }
    if (v7 == 23)
      return (uint64_t *)sub_1C5D438A8(*(_QWORD *)(a1 + 832), *((_QWORD *)v3 + 3));
    if (v7 == 22)
      v48 = v3;
    else
      v48 = 0;
    v244 = v48;
    if (!v48)
      return (uint64_t *)v2;
    v60 = *(_QWORD *)(a1 + 832);
    v61 = sub_1C61294C8((_DWORD *)(*(_QWORD *)(a1 + 912) + 56), &v244);
    return (uint64_t *)sub_1C5D4145C(v60, v61[1]);
  }
  v9 = (unsigned __int8 *)sub_1C47A7FD0(*(_QWORD *)(v5 + 24), *(_QWORD *)(**(_QWORD **)(v5 + 40) + 40) + 272, *(_QWORD *)a2, (llvm::Type *)1);
  v10 = (uint64_t)v8;
  v241 = v9;
  v242 = v8;
  v11 = v3[16];
  if (v11 == 16)
  {
    v12 = *(_QWORD *)(a1 + 832);
    v13 = *(_QWORD *)a1;
    v14 = *(_DWORD *)(a1 + 816);
    v244 = 0;
    LODWORD(v245) = v14;
    if (v13)
    {
      v15 = (void **)(v13 + 48);
      if (v15 != &v244)
      {
        v16 = *v15;
        v244 = v16;
        if (v16)
          llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v16, 2);
      }
    }
    v17 = sub_1C5D3FAF8(v12, (uint64_t)v3, (const llvm::APInt *)&v244, (llvm *)v9, v10, 0, 0);
LABEL_137:
    v2 = (uint64_t)v17;
LABEL_138:
    if (v244)
      llvm::MetadataTracking::untrack((uint64_t)&v244, (unsigned __int8 *)v244);
    return (uint64_t *)v2;
  }
  if (v11 <= 3)
  {
    if (v11 != 3 || (v3[34] & 0x40) == 0)
    {
LABEL_38:
      v43 = *(_QWORD *)(a1 + 832);
      v44 = *(_QWORD *)a1;
      v45 = *(_DWORD *)(a1 + 816);
      v244 = 0;
      LODWORD(v245) = v45;
      if (v44)
      {
        v46 = (void **)(v44 + 48);
        if (v46 != &v244)
        {
          v47 = *v46;
          v244 = v47;
          if (v47)
            llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v47, 2);
        }
      }
      v17 = sub_1C6366FFC(v43, (uint64_t)v3, (uint64_t)&v244, (llvm *)v9, v10, 0, 0, 0);
      goto LABEL_137;
    }
    v32 = ***(_QWORD ***)v3;
    v244 = v3;
    v33 = *(_DWORD *)(v32 + 2520);
    if (v33)
    {
      v34 = *(_QWORD *)(v32 + 2504);
      v35 = v33 - 1;
      v36 = v35 & ((v3 >> 4) ^ (v3 >> 9));
      v37 = (unsigned __int8 **)(v34 + 24 * v36);
      v38 = *v37;
      if (*v37 == v3)
      {
LABEL_33:
        if (v37[2] == (unsigned __int8 *)12)
        {
          v39 = v37[1];
          v40 = *(_QWORD *)v39;
          v41 = *((_DWORD *)v39 + 2);
          if (v40 == 0x7274702E6D766C6CLL && v41 == 1752462689)
          {
            v85 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)v3, v8);
            v236 = *(_QWORD *)(a1 + 832);
            v86 = *(_QWORD *)a1;
            v87 = *(_DWORD *)(a1 + 816);
            v244 = 0;
            LODWORD(v245) = v87;
            if (v86)
            {
              v88 = (void **)(v86 + 48);
              if (v88 != &v244)
              {
                v89 = *v88;
                v244 = v89;
                if (v89)
                  llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v89, 2);
              }
            }
            v90 = sub_1C635FDC4(a1, *(unsigned __int8 **)(*((_QWORD *)v85 - 4)- 32 * (*(_DWORD *)(*((_QWORD *)v85 - 4) + 20) & 0x7FFFFFF)));
            v92 = v91;
            v93 = sub_1C635FDC4(a1, *(unsigned __int8 **)(*((_QWORD *)v85 - 4)- 32 * (*(_DWORD *)(*((_QWORD *)v85 - 4) + 20) & 0x7FFFFFF)+ 32));
            v95 = v94;
            v96 = sub_1C635FDC4(a1, *(unsigned __int8 **)(*((_QWORD *)v85 - 4)- 32 * (*(_DWORD *)(*((_QWORD *)v85 - 4) + 20) & 0x7FFFFFF)+ 64));
            v98 = v97;
            v99 = sub_1C635FDC4(a1, *(unsigned __int8 **)(*((_QWORD *)v85 - 4)- 32 * (*(_DWORD *)(*((_QWORD *)v85 - 4) + 20) & 0x7FFFFFF)+ 96));
            v17 = sub_1C6366A24(v236, (const char *)0x14, (const llvm::APInt *)&v244, (llvm *)v9, v10, (uint64_t)v90, v92, v101, (uint64_t)v93, v95, (uint64_t)v96, v98, (uint64_t)v99, v100);
            goto LABEL_137;
          }
        }
        goto LABEL_38;
      }
      v77 = 0;
      v78 = 1;
      while (v38 != (unsigned __int8 *)-4096)
      {
        if (v77)
          v79 = 0;
        else
          v79 = v38 == (unsigned __int8 *)-8192;
        if (v79)
          v77 = v37;
        v80 = v36 + v78++;
        v36 = v80 & v35;
        v37 = (unsigned __int8 **)(v34 + 24 * v36);
        v38 = *v37;
        if (*v37 == v3)
          goto LABEL_33;
      }
      if (v77)
        v81 = v77;
      else
        v81 = v37;
    }
    else
    {
      v81 = 0;
    }
    v37 = (unsigned __int8 **)sub_1C53D65B8(v32 + 2504, (uint64_t)&v244, (uint64_t *)&v244, v81);
    v82 = (unsigned __int8 *)v244;
    v37[1] = 0;
    v37[2] = 0;
    *v37 = v82;
    goto LABEL_33;
  }
  if (v11 == 19)
  {
    v68 = *(_DWORD *)(*(_QWORD *)v3 + 8);
    if ((v68 & 0xFE) == 0x12)
      v68 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v3 + 16) + 8);
    v69 = v68 >> 8;
    v70 = *(_QWORD *)(a1 + 832);
    v71 = *(_QWORD *)a1;
    v72 = *(_DWORD *)(a1 + 816);
    v244 = 0;
    LODWORD(v245) = v72;
    v73 = v70;
    if (v71)
    {
      v74 = (void **)(v71 + 48);
      v73 = v70;
      if (v74 != &v244)
      {
        v75 = *v74;
        v244 = v75;
        v73 = v70;
        if (v75)
        {
          llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v75, 2);
          v73 = *(_QWORD *)(a1 + 832);
        }
      }
    }
    v76 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, *(_QWORD *)(**(_QWORD **)(v73 + 40) + 40) + 272, v69);
    v17 = sub_1C6366AB4(v70, 0, (const llvm::APInt *)&v244, (llvm *)v76, 0, 0, 0);
    goto LABEL_137;
  }
  v19 = *(_QWORD *)(a1 + 832);
  if (v11 == 84)
  {
    v20 = *((_QWORD *)v3 - 4);
    if (v20 && !*(_BYTE *)(v20 + 16) && *(_QWORD *)(v20 + 24) == *((_QWORD *)v3 + 9) && *(_DWORD *)(v20 + 36) == 382)
      goto LABEL_20;
  }
  else
  {
    v49 = *(_QWORD *)(**(_QWORD **)(v19 + 40) + 40);
    if (v11 > 0x1B || v11 == 5)
    {
      v50 = v11 <= 0x1B ? *((unsigned __int16 *)v3 + 9) : v11 - 28;
      if (v50 == 47)
      {
        v58 = *((_DWORD *)v3 + 5);
        v59 = (v58 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)v3 - 1) : &v3[-32 * (v58 & 0x7FFFFFF)];
        v62 = *(_QWORD *)v59;
        if (*(_QWORD *)v59)
        {
          v63 = *(unsigned __int8 *)(v62 + 16);
          if (v63 == 62 || v63 == 5 && *(_WORD *)(v62 + 18) == 34)
          {
            v64 = 64;
            if (v63 != 62)
              v64 = 24;
            v65 = *(_DWORD *)(v62 + 20);
            if ((v65 & 0x7FFFFFF) == 2)
            {
              v66 = *(_QWORD *)(v62 + v64);
              if (*(_BYTE *)(v66 + 8) == 19)
              {
                v67 = (v65 & 0x40000000) != 0 ? *(unsigned __int8 ***)(v62 - 8) : (unsigned __int8 **)(v62 - 64);
                v102 = *v67;
                if (*v67)
                {
                  if (v102[16] <= 0x14u
                    && ((llvm::Constant::isNullValue((llvm::Constant *)v102) & 1) != 0
                     || (sub_1C4E71060((uint64_t)&v244, (llvm::Constant *)v102) & 1) != 0))
                  {
                    LODWORD(v245) = 64;
                    v244 = (void *)1;
                    v103 = *(_DWORD *)(v62 + 20);
                    if ((v103 & 0x40000000) != 0)
                      v104 = *(_QWORD *)(v62 - 8);
                    else
                      v104 = v62 - 32 * (v103 & 0x7FFFFFF);
                    v105 = sub_1C4D8A7F0((llvm::APInt *)&v244, *(unsigned __int8 **)(v104 + 32))
                        && sub_1C53E2F94(v49 + 272, v66) == 8;
                    if (v245 >= 0x41 && v244)
                      MEMORY[0x1CAA32F9C](v244, 0x1000C8000313F17);
                    if (v105)
                    {
                      v19 = *(_QWORD *)(a1 + 832);
LABEL_20:
                      v21 = *(_QWORD *)a1;
                      v22 = *(_DWORD *)(a1 + 816);
                      v244 = 0;
                      LODWORD(v245) = v22;
                      if (v21)
                      {
                        v23 = (void **)(v21 + 48);
                        if (v23 != &v244)
                        {
                          v24 = *v23;
                          v244 = v24;
                          if (v24)
                            llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v24, 2);
                        }
                      }
                      if ((_BYTE)v9)
                        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v241);
                      else
                        ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v241);
                      v83 = ExtendedSizeInBits;
                      if ((_DWORD)v26 == 1)
                      v240 = v83;
                      if (v83 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v239, 1, 0);
                      }
                      else
                      {
                        v84 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v83;
                        if (!v83)
                          LOBYTE(v84) = 0;
                        v239 = v84 & 1;
                      }
                      v2 = sub_1C5C9E150(v19, (const llvm::APInt *)&v244, (uint64_t)v9, v10, (llvm::APInt *)&v239);
                      if (v240 >= 0x41 && v239)
                        MEMORY[0x1CAA32F9C](v239, 0x1000C8000313F17);
                      goto LABEL_138;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v106 = v3[16];
  if (v106 == 17)
  {
    v107 = *(_QWORD *)(a1 + 832);
    v108 = *(_QWORD *)a1;
    v109 = *(_DWORD *)(a1 + 816);
    v244 = 0;
    LODWORD(v245) = v109;
    if (v108)
    {
      v110 = (void **)(v108 + 48);
      if (v110 != &v244)
      {
        v111 = *v110;
        v244 = v111;
        if (v111)
          llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v111, 2);
      }
    }
    v17 = sub_1C6366D64(v107, (uint64_t)v3, (const llvm::APInt *)&v244, (llvm *)v9, v10, 0);
    goto LABEL_137;
  }
  if ((v106 - 11) > 1)
  {
    if (v106 == 5)
    {
      sub_1C635C434(a1, *((unsigned __int16 *)v3 + 9));
      return (uint64_t *)sub_1C6364290((uint64_t *)(a1 + 8), &v243)[1];
    }
  }
  else if ((*(_DWORD *)(*(_QWORD *)v243 + 8) & 0xFE) != 0x10)
  {
    return sub_1C61312D0(*(_QWORD *)(a1 + 832), (llvm *)v9, v10);
  }
  if ((v106 & 0xFE) == 0xE)
  {
    v244 = v246;
    v245 = 0x400000000;
    v116 = *(unsigned __int8 *)(*(_QWORD *)v3 + 8);
    v117 = *(_DWORD *)(*(_QWORD *)v3 + 32);
    if (v117)
    {
      for (i = 0; i != v117; ++i)
      {
        ElementAsConstant = (unsigned __int8 *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)v3);
        v120 = sub_1C635FDC4(a1, ElementAsConstant);
        v121 = (uint64_t *)*((unsigned __int16 *)v120 + 29);
        if (*((_WORD *)v120 + 29))
        {
          v122 = v120;
          v123 = 0;
          v124 = v245;
          do
          {
            if (v124 >= HIDWORD(v245))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v244, (uint64_t)v246, v124 + 1, 16);
              v124 = v245;
            }
            v125 = (uint64_t **)((char *)v244 + 16 * v124);
            *v125 = v122;
            v125[1] = v123;
            v124 = v245 + 1;
            LODWORD(v245) = v245 + 1;
            v123 = (uint64_t *)((char *)v123 + 1);
          }
          while (v121 != v123);
        }
      }
      v116 = *(unsigned __int8 *)(*(_QWORD *)v3 + 8);
    }
    v126 = *(_QWORD *)(a1 + 832);
    if (v116 == 17)
    {
      v127 = (uint64_t *)v244;
      v128 = v245;
      v129 = *(_QWORD *)a1;
      v130 = *(_DWORD *)(a1 + 816);
      v247 = 0;
      LODWORD(v248) = v130;
      if (v129)
      {
        v131 = (void **)(v129 + 48);
        if (v131 != (void **)&v247)
        {
          v247 = (unsigned __int8 *)*v131;
          if (v247)
            llvm::MetadataTracking::track((uint64_t)&v247, v247, 2);
        }
      }
      v2 = (uint64_t)sub_1C5D5C56C(v126, v127, v128, (const llvm::APInt *)&v247);
LABEL_164:
      if (v247)
        llvm::MetadataTracking::untrack((uint64_t)&v247, v247);
      v132 = v244;
      if (v244 != v246)
        goto LABEL_230;
      return (uint64_t *)v2;
    }
    v177 = *(_QWORD *)a1;
    v178 = *(_DWORD *)(a1 + 816);
    v247 = 0;
    LODWORD(v248) = v178;
    if (v177)
    {
      v179 = (void **)(v177 + 48);
      if (v179 != (void **)&v247)
      {
        v247 = (unsigned __int8 *)*v179;
        if (v247)
          llvm::MetadataTracking::track((uint64_t)&v247, v247, 2);
      }
    }
    v180 = (uint64_t *)v244;
    v181 = v245;
LABEL_240:
    v182 = *(_QWORD *)(v126 + 832);
    if (v182)
      v183 = *(unsigned __int16 *)(v182 + 8);
    else
      v183 = 0;
    v2 = (uint64_t)sub_1C636D0C8(v126, (const char *)0x92, (const llvm::APInt *)&v247, (llvm *)v9, v10, v180, v181, v183);
    v185 = v184;
    v186 = sub_1C6364290((uint64_t *)(a1 + 8), &v243);
    v186[1] = v2;
    *((_DWORD *)v186 + 4) = v185;
    goto LABEL_164;
  }
  if ((v106 & 0xFE) == 8)
  {
    v244 = v246;
    v245 = 0x400000000;
    v113 = *((_DWORD *)v3 + 5);
    if ((v113 & 0x40000000) != 0)
    {
      v115 = (unsigned __int8 **)*((_QWORD *)v3 - 1);
      v114 = v113 & 0x7FFFFFF;
    }
    else
    {
      v114 = v113 & 0x7FFFFFF;
      v115 = (unsigned __int8 **)&v3[-32 * v114];
    }
    if (v114)
    {
      v157 = &v115[4 * v114];
      do
      {
        v158 = sub_1C635FDC4(a1, *v115);
        if (v158)
        {
          v159 = v158;
          v160 = (uint64_t *)*((unsigned __int16 *)v158 + 29);
          if (*((_WORD *)v158 + 29))
          {
            v161 = 0;
            v162 = v245;
            do
            {
              if (v162 >= HIDWORD(v245))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v244, (uint64_t)v246, v162 + 1, 16);
                v162 = v245;
              }
              v163 = (uint64_t **)((char *)v244 + 16 * v162);
              *v163 = v159;
              v163[1] = v161;
              v162 = v245 + 1;
              LODWORD(v245) = v245 + 1;
              v161 = (uint64_t *)((char *)v161 + 1);
            }
            while (v160 != v161);
          }
        }
        v115 += 4;
      }
      while (v115 != v157);
      v164 = (uint64_t *)v244;
      v165 = v245;
    }
    else
    {
      v165 = 0;
      v164 = (uint64_t *)v246;
    }
    v166 = *(_QWORD *)(a1 + 832);
    v167 = *(_QWORD *)a1;
    v168 = *(_DWORD *)(a1 + 816);
    v247 = 0;
    LODWORD(v248) = v168;
    if (v167)
    {
      v169 = (void **)(v167 + 48);
      if (v169 != (void **)&v247)
      {
        v247 = (unsigned __int8 *)*v169;
        if (v247)
          llvm::MetadataTracking::track((uint64_t)&v247, v247, 2);
      }
    }
    v2 = (uint64_t)sub_1C5D5C56C(v166, v164, v165, (const llvm::APInt *)&v247);
    if (v247)
      llvm::MetadataTracking::untrack((uint64_t)&v247, v247);
    v132 = v244;
    if (v244 == v246)
      return (uint64_t *)v2;
LABEL_230:
    free(v132);
    return (uint64_t *)v2;
  }
  v133 = *(_QWORD *)v3;
  if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x10)
  {
    v244 = v246;
    v245 = 0x400000000;
    llvm::ComputeValueVTs(v6, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), v133, (uint64_t)&v244, 0, 0, 0);
    v134 = v245;
    if (!(_DWORD)v245)
    {
      v2 = 0;
      goto LABEL_229;
    }
    v247 = (unsigned __int8 *)v249;
    v248 = 0x400000000;
    sub_1C4825C80((unsigned int *)&v247, v245, 0, 0);
    v135 = 0;
    v136 = 16 * v134;
    while (1)
    {
      v138 = *(llvm **)((char *)v244 + v135);
      v137 = *(_QWORD *)((char *)v244 + v135 + 8);
      if (v3[16] - 11 > 1)
        break;
      v154 = sub_1C61312D0(*(_QWORD *)(a1 + 832), *(llvm **)((char *)v244 + v135), *(_QWORD *)((char *)v244 + v135 + 8));
      v155 = &v247[v135];
      *(_QWORD *)v155 = v154;
      *((_DWORD *)v155 + 2) = v156;
LABEL_195:
      v135 += 16;
      if (v136 == v135)
      {
        v170 = *(_QWORD *)(a1 + 832);
        v171 = (uint64_t *)v247;
        v172 = v248;
        v173 = *(_QWORD *)a1;
        v174 = *(_DWORD *)(a1 + 816);
        v237 = 0;
        v238 = v174;
        if (v173)
        {
          v175 = (unsigned __int8 **)(v173 + 48);
          if (v175 != &v237)
          {
            v176 = *v175;
            v237 = v176;
            if (v176)
              llvm::MetadataTracking::track((uint64_t)&v237, v176, 2);
          }
        }
        v2 = (uint64_t)sub_1C5D5C56C(v170, v171, v172, (const llvm::APInt *)&v237);
        if (v237)
          llvm::MetadataTracking::untrack((uint64_t)&v237, v237);
        if (v247 != (unsigned __int8 *)v249)
          free(v247);
        goto LABEL_229;
      }
    }
    if (*(_QWORD *)((char *)v244 + v135))
    {
      v139 = ((_BYTE)v138 + 104) >= 0x13u && ((_BYTE)v138 - 8) >= 7u;
      if (v139 && ((_BYTE)v138 - 75) >= 0x2Du)
      {
LABEL_179:
        v140 = *(_QWORD *)(a1 + 832);
        v141 = *(_QWORD *)a1;
        v142 = *(_DWORD *)(a1 + 816);
        v237 = 0;
        v238 = v142;
        if (v141)
        {
          v143 = (unsigned __int8 **)(v141 + 48);
          if (v143 != &v237)
          {
            v144 = *v143;
            v237 = v144;
            if (v144)
              llvm::MetadataTracking::track((uint64_t)&v237, v144, 2);
          }
        }
        v145 = sub_1C6366AB4(v140, 0, (const llvm::APInt *)&v237, v138, v137, 0, 0);
LABEL_193:
        v153 = &v247[v135];
        *(_QWORD *)v153 = v145;
        *((_DWORD *)v153 + 2) = v146;
        if (v237)
          llvm::MetadataTracking::untrack((uint64_t)&v237, v237);
        goto LABEL_195;
      }
    }
    else
    {
      if ((*(_DWORD *)(v137 + 8) & 0xFE) == 0x12)
        v147 = *(unsigned __int8 *)(**(_QWORD **)(v137 + 16) + 8);
      else
        v147 = *(_DWORD *)(v137 + 8);
      if (v147 > 6)
        goto LABEL_179;
    }
    v148 = *(_QWORD *)(a1 + 832);
    v149 = *(_QWORD *)a1;
    v150 = *(_DWORD *)(a1 + 816);
    v237 = 0;
    v238 = v150;
    if (v149)
    {
      v151 = (unsigned __int8 **)(v149 + 48);
      if (v151 != &v237)
      {
        v152 = *v151;
        v237 = v152;
        if (v152)
          llvm::MetadataTracking::track((uint64_t)&v237, v152, 2);
      }
    }
    v145 = sub_1C5D404C4(v148, (const llvm::APInt *)&v237, (_BOOL8)v138, v137, 0, 0.0);
    goto LABEL_193;
  }
  if (v106 == 4)
    return (uint64_t *)sub_1C5D431E4(*(_QWORD *)(a1 + 832), (uint64_t)v3, (llvm *)v9, v10, 0, 0, 0);
  if (v106 == 6 || v106 == 7)
    return sub_1C635FDC4(a1, *((unsigned __int8 **)v3 - 4));
  v187 = *(_QWORD *)v243;
  if (v106 == 10)
  {
    v244 = v246;
    v245 = 0x1000000000;
    v188 = *(unsigned int *)(v187 + 32);
    if ((_DWORD)v188)
    {
      v198 = v3;
      do
      {
        v199 = sub_1C635FDC4(a1, *(unsigned __int8 **)&v198[-32 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF)]);
        v201 = v200;
        v202 = v245;
        if (v245 >= (unint64_t)HIDWORD(v245))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v244, (uint64_t)v246, v245 + 1, 16);
          v202 = v245;
        }
        v203 = (uint64_t **)((char *)v244 + 16 * v202);
        *v203 = v199;
        v203[1] = v201;
        v189 = v245 + 1;
        LODWORD(v245) = v245 + 1;
        v198 += 32;
        --v188;
      }
      while (v188);
    }
    else
    {
      v189 = 0;
    }
    v126 = *(_QWORD *)(a1 + 832);
    v190 = *(_QWORD *)a1;
    v191 = *(_DWORD *)(a1 + 816);
    v247 = 0;
    LODWORD(v248) = v191;
    if (v190)
    {
      v192 = (void **)(v190 + 48);
      if (v192 != (void **)&v247)
      {
        v247 = (unsigned __int8 *)*v192;
        if (v247)
        {
          llvm::MetadataTracking::track((uint64_t)&v247, v247, 2);
          v189 = v245;
        }
      }
    }
    v180 = (uint64_t *)v244;
    v181 = v189;
    goto LABEL_240;
  }
  v193 = sub_1C47A7FD0(v6, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(_QWORD *)(v187 + 24), 0);
  v195 = (llvm *)v193;
  v196 = v194;
  if ((_BYTE)v193)
  {
    v204 = (v193 + 104) >= 0x13u && (v193 - 8) >= 7u;
    if (!v204 || (v193 - 75) < 0x2Du)
      goto LABEL_274;
  }
  else
  {
    if ((*(_DWORD *)(v194 + 8) & 0xFE) == 0x12)
      v197 = *(unsigned __int8 *)(**(_QWORD **)(v194 + 16) + 8);
    else
      v197 = *(_DWORD *)(v194 + 8);
    if (v197 <= 6)
    {
LABEL_274:
      v212 = *(_QWORD *)(a1 + 832);
      v213 = *(_QWORD *)a1;
      v214 = *(_DWORD *)(a1 + 816);
      v244 = 0;
      LODWORD(v245) = v214;
      if (v213)
      {
        v215 = (void **)(v213 + 48);
        if (v215 != &v244)
        {
          v216 = *v215;
          v244 = v216;
          if (v216)
            llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v216, 2);
        }
      }
      v210 = sub_1C5D404C4(v212, (const llvm::APInt *)&v244, (_BOOL8)v195, v196, 0, 0.0);
      goto LABEL_279;
    }
  }
  v205 = *(_QWORD *)(a1 + 832);
  v206 = *(_QWORD *)a1;
  v207 = *(_DWORD *)(a1 + 816);
  v244 = 0;
  LODWORD(v245) = v207;
  if (v206)
  {
    v208 = (void **)(v206 + 48);
    if (v208 != &v244)
    {
      v209 = *v208;
      v244 = v209;
      if (v209)
        llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v209, 2);
    }
  }
  v210 = sub_1C6366AB4(v205, 0, (const llvm::APInt *)&v244, v195, v196, 0, 0);
LABEL_279:
  v217 = (uint64_t)v210;
  v218 = v211;
  if (v244)
    llvm::MetadataTracking::untrack((uint64_t)&v244, (unsigned __int8 *)v244);
  if (*(_BYTE *)(v187 + 8) == 19)
  {
    v219 = *(_QWORD *)(a1 + 832);
    v220 = *(_QWORD *)a1;
    v221 = *(_DWORD *)(a1 + 816);
    v244 = 0;
    LODWORD(v245) = v221;
    if (v220)
    {
      v222 = (void **)(v220 + 48);
      if (v222 != &v244)
      {
        v223 = *v222;
        v244 = v223;
        if (v223)
          llvm::MetadataTracking::track((uint64_t)&v244, (unsigned __int8 *)v223, 2);
      }
    }
    v2 = (uint64_t)sub_1C5CA0F18(v219, (llvm *)v9, v10, (const llvm::APInt *)&v244, v217, v218);
    v225 = v224;
    v226 = sub_1C6364290((uint64_t *)(a1 + 8), &v243);
    v226[1] = v2;
    *((_DWORD *)v226 + 4) = v225;
    goto LABEL_138;
  }
  v244 = v246;
  v245 = 0x1000000000;
  sub_1C4825C80((unsigned int *)&v244, *(unsigned int *)(v187 + 32), v217, v218);
  v227 = *(_QWORD *)(a1 + 832);
  v228 = *(_QWORD *)a1;
  v229 = *(_DWORD *)(a1 + 816);
  v247 = 0;
  LODWORD(v248) = v229;
  if (v228)
  {
    v230 = (void **)(v228 + 48);
    if (v230 != (void **)&v247)
    {
      v247 = (unsigned __int8 *)*v230;
      if (v247)
        llvm::MetadataTracking::track((uint64_t)&v247, v247, 2);
    }
  }
  v231 = *(_QWORD *)(v227 + 832);
  if (v231)
    v232 = *(unsigned __int16 *)(v231 + 8);
  else
    v232 = 0;
  v2 = (uint64_t)sub_1C636D0C8(v227, (const char *)0x92, (const llvm::APInt *)&v247, (llvm *)v9, v10, (uint64_t *)v244, v245, v232);
  v234 = v233;
  v235 = sub_1C6364290((uint64_t *)(a1 + 8), &v243);
  v235[1] = v2;
  *((_DWORD *)v235 + 4) = v234;
  if (v247)
    llvm::MetadataTracking::untrack((uint64_t)&v247, v247);
LABEL_229:
  v132 = v244;
  if (v244 != v246)
    goto LABEL_230;
  return (uint64_t *)v2;
}

uint64_t sub_1C5D1F008(uint64_t *a1, const llvm::Value *a2, int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::Value **v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  LODWORD(v5) = a3;
  v6 = (uint64_t)a2;
  v47 = (uint64_t)a2;
  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(llvm::Value ***)(v7 - 8);
  else
    v9 = (llvm::Value **)(v7 - 32 * (v8 & 0x7FFFFFF));
  result = (uint64_t)llvm::classifyEHPersonality(*v9, a2);
  if ((_DWORD)result == 12)
  {
    v49 = v6;
    if (v6)
    {
      v11 = *(_QWORD *)(v6 + 48);
      v12 = v11 - 24;
      if (!v11)
        v12 = 0;
      v13 = *(unsigned __int8 *)(v12 + 16);
      while (1)
      {
        v14 = *(_QWORD *)(v6 + 48);
        if (v13 == 83)
        {
          v14 = *(_QWORD *)(v6 + 48);
          do
          {
            v14 = *(_QWORD *)(v14 + 8);
            v15 = v14 - 24;
            if (!v14)
              v15 = 0;
          }
          while (*(_BYTE *)(v15 + 16) == 83);
        }
        v16 = *(unsigned __int8 *)(v14 - 8);
        if (v16 == 38)
          break;
        if (v16 == 79)
        {
          v17 = sub_1C61294C8((_DWORD *)a1 + 14, &v49);
          result = sub_1C6202DAC(a4, v17[1], v5);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
          return result;
        }
      }
      v35 = *(_DWORD *)(v14 - 4);
      if ((v35 & 0x40000000) != 0)
      {
        v37 = *(_QWORD *)(v14 - 32);
        v36 = v35 & 0x7FFFFFF;
      }
      else
      {
        v36 = v35 & 0x7FFFFFF;
        v37 = v14 - 32 * v36 - 24;
      }
      if ((*(_WORD *)(v14 - 6) & 1) != 0)
        v38 = 2;
      else
        v38 = 1;
      if (v38 != v36)
      {
        v39 = (uint64_t *)(v37 + 32 * v38);
        v40 = 32 * v36 - 32 * v38;
        do
        {
          v48 = 0;
          v41 = *v39;
          v39 += 4;
          v48 = v41;
          v42 = sub_1C61294C8((_DWORD *)a1 + 14, &v48);
          result = sub_1C6202DAC(a4, v42[1], v5);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
          v40 -= 32;
        }
        while (v40);
      }
    }
  }
  else if (v6)
  {
    v18 = result - 7;
    v19 = a1 + 7;
    v20 = result - 9;
    do
    {
      while (1)
      {
        for (i = *(_QWORD *)(v6 + 48); ; i = *(_QWORD *)(i + 8))
        {
          v22 = i - 24;
          v23 = i ? i - 24 : 0;
          if (*(_BYTE *)(v23 + 16) != 83)
            break;
        }
        v24 = *(unsigned __int8 *)(i - 8);
        if (v24 != 38)
          break;
        v25 = *(_DWORD *)(i - 4);
        if ((v25 & 0x40000000) != 0)
        {
          v27 = *(_QWORD *)(i - 32);
          v26 = v25 & 0x7FFFFFF;
        }
        else
        {
          v26 = v25 & 0x7FFFFFF;
          v27 = v22 - 32 * v26;
        }
        v28 = *(_WORD *)(i - 6) & 1;
        if ((*(_WORD *)(i - 6) & 1) != 0)
          v29 = 2;
        else
          v29 = 1;
        if (v29 != v26)
        {
          v30 = (uint64_t *)(v27 + 32 * v29);
          v31 = 32 * v26 - 32 * v29;
          do
          {
            v49 = 0;
            v49 = *v30;
            v32 = sub_1C61294C8(v19, &v49);
            result = sub_1C6202DAC(a4, v32[1], v5);
            if (v20 <= 1)
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 189) = 1;
            if (v18 >= 2)
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16) + 187) = 1;
            v30 += 4;
            v31 -= 32;
          }
          while (v31);
          v28 = *(_WORD *)(i - 6) & 1;
        }
        if (v28)
        {
          v33 = *(_DWORD *)(i - 4);
          if ((v33 & 0x40000000) != 0)
            v34 = *(_QWORD *)(i - 32);
          else
            v34 = v22 - 32 * (v33 & 0x7FFFFFF);
          v6 = *(_QWORD *)(v34 + 32);
          result = a1[4];
          if (result && v6)
          {
            result = llvm::BranchProbabilityInfo::getEdgeProbability(result, v47, v6);
            v5 = (result * (unint64_t)v5 + 0x40000000) >> 31;
          }
        }
        else
        {
          v6 = 0;
        }
        v47 = v6;
        if (!v6)
          return result;
      }
      if (v24 == 79)
      {
        v43 = sub_1C61294C8(v19, &v47);
        result = sub_1C6202DAC(a4, v43[1], v5);
        v44 = *(_QWORD *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8) - 16);
        *(_BYTE *)(v44 + 187) = 1;
        *(_BYTE *)(v44 + 189) = 1;
        return result;
      }
    }
    while (v24 != 94);
    v45 = sub_1C61294C8(v19, &v47);
    return sub_1C6202DAC(a4, v45[1], v5);
  }
  return result;
}

uint64_t sub_1C5D1F374(uint64_t a1, unsigned __int8 *a2, int a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24[3];
  unsigned __int8 *v25;
  _BYTE v26[184];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = sub_1C635FE78(a1, a2);
  v10 = v9;
  sub_1C635BCC4((uint64_t)v26, **(llvm::EVT ***)a2, *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), a3, *(_QWORD *)a2, 0);
  *(_OWORD *)v24 = (unint64_t)(*(_QWORD *)(a1 + 832) + 112);
  if (a4 == 200)
  {
    v11 = *(_QWORD *)(a1 + 912);
    v25 = a2;
    v22 = 0;
    if ((sub_1C61252B8((uint64_t *)(v11 + 656), &v25, &v22) & 1) != 0)
      v12 = v22;
    else
      v12 = (unsigned __int8 *)(*(_QWORD *)(v11 + 656) + 16 * *(unsigned int *)(v11 + 672));
    if (v12 == (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 656)
                                  + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 912) + 672)))
      a4 = 200;
    else
      a4 = *((_DWORD *)v12 + 2);
  }
  v13 = *(_QWORD **)(a1 + 832);
  v14 = *(_QWORD *)a1;
  v15 = *(_DWORD *)(a1 + 816);
  v22 = 0;
  v23 = v15;
  if (v14)
  {
    v16 = (unsigned __int8 **)(v14 + 48);
    if (v16 != &v22)
    {
      v17 = *v16;
      v22 = v17;
      if (v17)
        llvm::MetadataTracking::track((uint64_t)&v22, v17, 2);
    }
  }
  sub_1C5D12FF0((uint64_t)v26, (uint64_t)v8, v10, v13, (const llvm::APInt *)&v22, v24, 0, a2, a4);
  if (v22)
    llvm::MetadataTracking::untrack((uint64_t)&v22, v22);
  v18 = *(_OWORD *)v24;
  v19 = *(unsigned int *)(a1 + 392);
  if (v19 >= *(_DWORD *)(a1 + 396))
  {
    v21 = *(_OWORD *)v24;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 384, a1 + 400, v19 + 1, 16);
    v18 = v21;
    LODWORD(v19) = *(_DWORD *)(a1 + 392);
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 384) + 16 * v19) = v18;
  ++*(_DWORD *)(a1 + 392);
  return sub_1C63640DC((uint64_t)v26);
}

uint64_t sub_1C5D1F560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v3 >= 0x1C)
  {
    v4 = *(_QWORD *)(a2 + 40);
  }
  else
  {
    if (v3 != 21)
      return 1;
    v5 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 80);
    if (v5)
      v4 = v5 - 24;
    else
      v4 = 0;
  }
  if (v4 != a3)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 912) + 80);
    v8 = 0;
    v9 = a2;
    return sub_1C61252B8(v7, &v9, &v8);
  }
  return 1;
}

unint64_t sub_1C5D1F5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;

  if (a1)
    return llvm::BranchProbabilityInfo::getEdgeProbability(a1, a2, *(_QWORD *)(a3 + 16));
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 == a2 + 40)
  {
LABEL_10:
    v8 = 0;
  }
  else
  {
    v5 = v4 - 24;
    if (!v4)
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v6 - 29;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
        v8 = 2;
      else
        v8 = 1;
    }
    else
    {
      v8 = 0;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          break;
        case 1:
          __break(1u);
          goto LABEL_19;
        case 2:
          v8 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
LABEL_19:
          v8 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          v8 = 2;
          break;
        case 7:
          v8 = *(_WORD *)(v5 + 18) & 1;
          break;
        case 8:
          v8 = 1;
          break;
        case 10:
          v8 = *(_DWORD *)(v5 + 80) + 1;
          break;
        default:
          goto LABEL_10;
      }
    }
  }
  if (v8 <= 1)
    v8 = 1;
  if (v8 == 0x80000000)
    return 1;
  else
    return ((v8 >> 1) | 0x80000000) / v8;
}

void sub_1C5D1F6B8(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7, unsigned int a8, uint64_t a9, char a10)
{
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  llvm::ValueHandleBase *v28;
  uint64_t v29;
  int v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  llvm::BasicBlock *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::ValueHandleBase *v50;
  uint64_t v51;
  int v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  llvm::ConstantInt *v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t *v67;
  uint64_t *v68;
  __int128 v69;
  unint64_t v70;
  llvm::ValueHandleBase *v71;
  const llvm::APInt *v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  unsigned int v78;
  int v79;
  uint64_t v80;

  v18 = a9;
  v80 = *MEMORY[0x1E0C80C00];
  v64 = 0;
  *(_QWORD *)&v69 = &v64;
  v19 = *(_QWORD *)(a2 + 8);
  if (v19
    && !*(_QWORD *)(v19 + 8)
    && sub_1C4D9EC28((_QWORD **)&v69, 30, a2)
    && (!v64 || *(unsigned __int8 *)(v64 + 16) < 0x1Cu || *(_QWORD *)(v64 + 40) == a5[2]))
  {
    sub_1C5D1F6B8(a1);
    return;
  }
  v61 = a8;
  v62 = 0;
  v20 = *(unsigned __int8 *)(a2 + 16);
  v63 = 0;
  if (v20 < 0x1C)
    goto LABEL_8;
  *(_QWORD *)&v69 = &v63;
  *((_QWORD *)&v69 + 1) = &v62;
  if ((sub_1C4FA438C((_QWORD **)&v69, (uint64_t *)a2) & 1) != 0)
  {
    v33 = a10 ? 29 : 28;
  }
  else
  {
    v67 = &v63;
    v68 = &v62;
    v37 = sub_1C4FA4278(&v67, (uint64_t *)a2);
    if (v37)
      v33 = 29;
    else
      v33 = 0;
    if (v37)
      v38 = 28;
    else
      v38 = 0;
    if (a10)
      v33 = v38;
  }
  if ((v18 = a9, !v33)
    || v33 != a7
    || (v39 = *(_QWORD *)(a2 + 8)) == 0
    || *(_QWORD *)(v39 + 8)
    || (v40 = *(llvm::BasicBlock **)(a2 + 40), v40 != (llvm::BasicBlock *)a5[2])
    || v63 && *(unsigned __int8 *)(v63 + 16) >= 0x1Cu && *(llvm::BasicBlock **)(v63 + 40) != v40
    || v62 && *(unsigned __int8 *)(v62 + 16) >= 0x1Cu && *(llvm::BasicBlock **)(v62 + 40) != v40)
  {
LABEL_8:
    v21 = *(unsigned __int8 *)(a2 + 16);
    if (v21 >= 0x1C && v21 - 83 >= 0xFFFFFFFE)
    {
      if (a5 == a6)
      {
LABEL_14:
        v23 = *(_WORD *)(a2 + 18) & 0x3FLL;
        if (v21 == 81)
        {
          if (a10)
            v24 = &unk_1C866D8B4;
          else
            v24 = dword_1C866D984;
          LODWORD(v23) = v24[v23 - 32];
        }
        else
        {
          if (a10)
            v23 = dword_1C866D8DC[v23];
          if ((*(_WORD *)(*(_QWORD *)(a1 + 824) + 1020) & 4) != 0)
            LODWORD(v23) = llvm::getFCmpCodeWithoutNaN(v23);
        }
        v49 = *(_QWORD *)(a2 - 64);
        v50 = *(llvm::ValueHandleBase **)(a2 - 32);
        v51 = *(_QWORD *)a1;
        v52 = *(_DWORD *)(a1 + 816);
        v67 = 0;
        LODWORD(v68) = v52;
        if (!v51 || (v53 = (uint64_t **)(v51 + 48), v53 == &v67))
        {
          v54 = 0;
        }
        else
        {
          v54 = *v53;
          v67 = v54;
          if (v54)
          {
            llvm::MetadataTracking::track((uint64_t)&v67, (unsigned __int8 *)v54, 2);
            v54 = v67;
          }
        }
        LODWORD(v69) = v23;
        *((_QWORD *)&v69 + 1) = v49;
        v70 = 0;
        v71 = v50;
        v72 = a3;
        v73 = a4;
        v74 = a5;
        v75 = (unsigned __int8 *)v54;
        if (v54)
        {
          llvm::MetadataTracking::track((uint64_t)&v75, (unsigned __int8 *)v54, 2);
          v34 = (unsigned __int8 *)v67;
          v76 = (int)v68;
          v77 = 0;
          v78 = v61;
          v79 = v18;
          if (v67)
          {
            v35 = (unsigned __int8 **)&v67;
            goto LABEL_74;
          }
          goto LABEL_77;
        }
        v36 = (int)v68;
        goto LABEL_76;
      }
      v22 = a5[2];
      if (sub_1C5D1F560(a1, *(_QWORD *)(a2 - 64), v22)
        && sub_1C5D1F560(a1, *(_QWORD *)(a2 - 32), v22))
      {
        v21 = *(unsigned __int8 *)(a2 + 16);
        goto LABEL_14;
      }
    }
    if (a10)
      v25 = 22;
    else
      v25 = 17;
    v26 = *(uint64_t **)(*(_QWORD *)(a1 + 832) + 56);
    v27 = *v26;
    v28 = *(llvm::ValueHandleBase **)(*v26 + 1560);
    if (!v28)
    {
      v58 = *(llvm::ConstantInt **)(v27 + 1888);
      v59 = *(_DWORD *)(v27 + 1896);
      DWORD2(v69) = v59 >> 8;
      if (v59 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v69, 1, 0);
      }
      else
      {
        if (v59 <= 0xFF)
          v60 = 0;
        else
          v60 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v59);
        *(_QWORD *)&v69 = v60 & 1;
      }
      v28 = llvm::ConstantInt::get(v58, (llvm::LLVMContext *)&v69, a3);
      if (DWORD2(v69) >= 0x41 && (_QWORD)v69)
        MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
      *(_QWORD *)(v27 + 1560) = v28;
    }
    v29 = *(_QWORD *)a1;
    v30 = *(_DWORD *)(a1 + 816);
    v65 = 0;
    v66 = v30;
    if (!v29 || (v31 = (unsigned __int8 **)(v29 + 48), v31 == &v65))
    {
      v32 = 0;
    }
    else
    {
      v32 = *v31;
      v65 = v32;
      if (v32)
      {
        llvm::MetadataTracking::track((uint64_t)&v65, v32, 2);
        v32 = v65;
      }
    }
    LODWORD(v69) = v25;
    *((_QWORD *)&v69 + 1) = a2;
    v70 = 0;
    v71 = v28;
    v72 = a3;
    v73 = a4;
    v74 = a5;
    v75 = v32;
    if (v32)
    {
      llvm::MetadataTracking::track((uint64_t)&v75, v32, 2);
      v34 = v65;
      v76 = v66;
      v77 = 0;
      v78 = v61;
      v79 = v18;
      if (v65)
      {
        v35 = &v65;
LABEL_74:
        llvm::MetadataTracking::untrack((uint64_t)v35, v34);
      }
LABEL_77:
      v55 = *(_QWORD *)(a1 + 856);
      v56 = *(_QWORD *)(v55 + 16);
      if (v56 < *(_QWORD *)(v55 + 24))
        v57 = sub_1C6270B40(v56, &v69) + 88;
      else
        v57 = sub_1C5509B18((__int128 **)(v55 + 8), &v69);
      *(_QWORD *)(v55 + 16) = v57;
      if (v77)
        llvm::MetadataTracking::untrack((uint64_t)&v77, v77);
      if (v75)
        llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
      return;
    }
    v36 = v66;
LABEL_76:
    v76 = v36;
    v77 = 0;
    v78 = v61;
    v79 = v18;
    goto LABEL_77;
  }
  v41 = *(_QWORD *)(a1 + 832);
  v42 = *(_QWORD *)(v41 + 40);
  v43 = *(_QWORD *)(v42 + 312);
  if (v43)
  {
    *(_QWORD *)(v42 + 312) = *(_QWORD *)v43;
  }
  else
  {
    v44 = *(_QWORD *)(v41 + 40);
    v45 = sub_1C484358C(v42 + 128, 232, 3);
    v42 = v44;
    v43 = v45;
  }
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = v40;
  *(_DWORD *)(v43 + 24) = -1;
  *(_QWORD *)(v43 + 48) = (v43 + 48) | 4;
  *(_QWORD *)(v43 + 56) = v43 + 48;
  *(_BYTE *)(v43 + 144) = 0;
  *(_OWORD *)(v43 + 64) = 0u;
  *(_OWORD *)(v43 + 80) = 0u;
  *(_OWORD *)(v43 + 96) = 0u;
  *(_OWORD *)(v43 + 112) = 0u;
  *(_OWORD *)(v43 + 121) = 0u;
  *(_QWORD *)(v43 + 160) = 0;
  *(_QWORD *)(v43 + 168) = 0;
  *(_QWORD *)(v43 + 152) = 0;
  *(_BYTE *)(v43 + 176) = 0;
  *(_DWORD *)(v43 + 187) = 0;
  *(_QWORD *)(v43 + 180) = 0;
  *(_QWORD *)(v43 + 192) = 0;
  *(_DWORD *)(v43 + 199) = 0;
  *(_QWORD *)(v43 + 216) = 0;
  *(_QWORD *)(v43 + 224) = 0;
  *(_QWORD *)(v43 + 208) = 0;
  *(_QWORD *)(v43 + 32) = v42;
  *(_QWORD *)(v43 + 40) = v43;
  if (v40)
  {
    *(_QWORD *)(v43 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v40);
    *(_QWORD *)(v43 + 144) = v46;
  }
  v47 = (uint64_t *)a5[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(a5[4] + 320, v43);
  v48 = *v47;
  *(_QWORD *)v43 = *v47;
  *(_QWORD *)(v43 + 8) = v47;
  *(_QWORD *)(v48 + 8) = v43;
  *v47 = v43;
  sub_1C5D1F6B8(a1);
  *(_QWORD *)&v69 = &v70;
  if (a7 == 29)
    v70 = (v61 >> 1) | (unint64_t)(a9 << 32);
  else
    v70 = v61 | ((unint64_t)(a9 >> 1) << 32);
  *((_QWORD *)&v69 + 1) = 0x200000002;
  sub_1C50D6C6C((unsigned int *)&v70, (unsigned int *)&v71);
  sub_1C5D1F6B8(a1);
  if ((unint64_t *)v69 != &v70)
    free((void *)v69);
}

void sub_1C5D1FE10(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  llvm::DataLayout *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t **v31;
  __int16 v32;
  unsigned int v33;
  unsigned __int8 *v34;
  int *v35;
  uint64_t **v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  const char *v47;
  char v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int StackObject;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  __int128 *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  _OWORD *v97;
  __int128 *v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  _BOOL4 v103;
  __int128 *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  __int16 v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  BOOL v142;
  const char *v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  __int16 v152;
  int v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  char v159;
  char v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t ExtendedSizeInBits;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  unint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  _OWORD *v177;
  _OWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  unint64_t v182;
  char v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned int v189;
  char v190;
  int v191;
  unint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  llvm *v198;
  uint64_t v199;
  unsigned __int8 v200;
  uint64_t v201;
  int v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t **v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const llvm::APInt *v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *FixedStack;
  int v232;
  uint64_t v233;
  _QWORD *v234;
  char *v235;
  int v236;
  char *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int16 v243;
  uint64_t *v244;
  uint64_t v245;
  llvm::PointerType *v246;
  unint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  unsigned __int8 *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  llvm *v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  _OWORD v274[2];
  __int128 v275;
  int v276;
  char v277;
  unsigned __int8 v278[17];
  void *v279;
  uint64_t v280;
  _QWORD v281[2];
  BOOL v282;
  int v283;
  int v284;
  void *v285[2];
  _BYTE v286[24];
  void *v287;
  uint64_t v288;
  _BYTE v289[64];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  void *v293;
  uint64_t v294;
  _BYTE v295[192];
  char *v296;
  uint64_t v297;
  _BYTE v298[32];
  uint64_t *v299;
  uint64_t v300;
  _QWORD v301[11];

  v301[8] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a2 + 2200) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  v299 = v301;
  v300 = 0x400000000;
  v296 = v298;
  v297 = 0x400000000;
  v250 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 80) + 40) + 40);
  v6 = (llvm::DataLayout *)(v250 + 272);
  v246 = (llvm::PointerType *)v5;
  llvm::ComputeValueVTs((uint64_t)a1, (llvm::DataLayout *)(v250 + 272), v5, (uint64_t)&v299, 0, (uint64_t)&v296, 0);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 80) + 24) + 1768))(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 24)))
  {
    v7 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a2 + 80) + 40) + 112);
    if (v7)
    {
      if (*(char *)(v7 + 31) < 0)
        *(_BYTE *)(a2 + 26) = 0;
    }
  }
  v256 = a1;
  if (*(_BYTE *)(a2 + 27))
  {
    v293 = v295;
    v294 = 0x400000000;
    *(_QWORD *)&v290 = &v291;
    *((_QWORD *)&v290 + 1) = 0x400000000;
    v8 = v300;
    if (v300 < 5)
    {
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v293, (uint64_t)v295, v300, 16);
      v8 = v300;
      v9 = v294;
    }
    if (v8 >= v9)
      v10 = v9;
    else
      v10 = v8;
    if ((_DWORD)v10)
    {
      v11 = 0;
      do
      {
        v12 = (char *)v293;
        v13 = *(_OWORD *)&v299[v11];
        *(_OWORD *)&v299[v11] = *(_OWORD *)((char *)v293 + v11 * 8);
        *(_OWORD *)&v12[v11 * 8] = v13;
        v11 += 2;
      }
      while (2 * v10 != v11);
      v8 = v300;
      v9 = v294;
    }
    v14 = v8 - v9;
    if (v8 <= v9)
    {
      v16 = v9 - v8;
      if (v9 <= v8)
        goto LABEL_25;
      v15 = &v294;
      if ((_DWORD)v10 != v9)
      {
        memcpy(&v299[2 * v8], (char *)v293 + 16 * v10, 16 * v9 - 16 * v10);
        v8 = v300;
      }
      LODWORD(v300) = v16 + v8;
    }
    else
    {
      v15 = &v300;
      if ((_DWORD)v10 != v8)
      {
        memcpy((char *)v293 + 16 * v9, &v299[2 * v10], 16 * v8 - 16 * v10);
        v9 = v294;
      }
      LODWORD(v294) = v14 + v9;
    }
    *(_DWORD *)v15 = v10;
LABEL_25:
    v17 = v296;
    if (v296 == v298)
    {
      v18 = DWORD2(v290);
    }
    else
    {
      v18 = DWORD2(v290);
      if ((__int128 *)v290 != &v291)
      {
        v296 = (char *)v290;
        *(_QWORD *)&v290 = v17;
        v28 = v297;
        v297 = *((_QWORD *)&v290 + 1);
        *((_QWORD *)&v290 + 1) = v28;
LABEL_43:
        v29 = v294;
        if ((_DWORD)v294)
        {
          v64 = 0;
          do
          {
            v65 = (uint64_t *)((char *)v293 + 16 * v64);
            v66 = *v65;
            v67 = v65[1];
            v68 = *(_QWORD *)(v290 + 8 * v64);
            LOBYTE(v287) = sub_1C47A8BD8((unint64_t)a1, **(llvm::EVT ***)(a2 + 16), *v65, v67);
            v69 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 584))(a1, **(_QWORD **)(a2 + 16), v66, v67, 0);
            v71 = sub_1C47A8C74((unsigned __int8 *)&v287);
            if ((_DWORD)v70 == 1)
            v72 = v69;
            sub_1C63299CC((unsigned int *)&v299, v69, v287, 0);
            if (v69)
            {
              v73 = 0;
              v74 = v71 >> 3;
              v75 = v297;
              do
              {
                if (v75 >= HIDWORD(v297))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, (uint64_t)v298, v75 + 1, 8);
                  v75 = v297;
                }
                *(_QWORD *)&v296[8 * v75] = v68 + v73;
                v75 = v297 + 1;
                LODWORD(v297) = v297 + 1;
                v73 += v74;
                --v72;
              }
              while (v72);
            }
            ++v64;
          }
          while (v64 != v29);
        }
        if ((__int128 *)v290 != &v291)
          free((void *)v290);
        v6 = (llvm::DataLayout *)(v250 + 272);
        if (v293 != v295)
          free(v293);
        goto LABEL_48;
      }
    }
    if (HIDWORD(v297) < v18)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v296, (uint64_t)v298, v18, 8);
    v19 = v297;
    if (HIDWORD(v290) < v297)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v290, (uint64_t)&v291, v297, 8);
      v19 = v297;
    }
    v20 = DWORD2(v290);
    if (v19 >= DWORD2(v290))
      v21 = DWORD2(v290);
    else
      v21 = v19;
    if ((_DWORD)v21)
    {
      v22 = (uint64_t *)v296;
      v23 = (uint64_t *)v290;
      v24 = v21;
      do
      {
        v25 = *v22;
        *v22++ = *v23;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    if (v20 >= v19)
    {
      if (v20 > v19)
      {
        v27 = v20 - v19;
        memcpy(&v296[8 * v19], (const void *)(v290 + 8 * v21), 8 * v20 - 8 * v21);
        LODWORD(v297) = v27 + v297;
        DWORD2(v290) = v21;
      }
    }
    else
    {
      v26 = v19 - v20;
      memcpy((void *)(v290 + 8 * v20), &v296[8 * v21], 8 * v19 - 8 * v21);
      DWORD2(v290) += v26;
      LODWORD(v297) = v21;
    }
    goto LABEL_43;
  }
LABEL_48:
  v293 = v295;
  v294 = 0x400000000;
  v30 = *(_DWORD *)(a2 + 32);
  v31 = *(uint64_t ***)(a2 + 16);
  *(_QWORD *)&v290 = &v291;
  *((_QWORD *)&v290 + 1) = 0x200000000;
  v32 = *(_WORD *)(a2 + 24);
  if ((v32 & 1) != 0)
  {
    v33 = 1;
    LODWORD(v291) = 48;
    DWORD2(v290) = 1;
    if ((v32 & 2) == 0)
      goto LABEL_53;
    goto LABEL_52;
  }
  v33 = 0;
  if ((v32 & 2) != 0)
  {
LABEL_52:
    *((_DWORD *)&v291 + v33++) = 67;
    DWORD2(v290) = v33;
  }
LABEL_53:
  v34 = a1;
  if ((v32 & 8) != 0)
  {
    if (v33 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v290, (uint64_t)&v291, 3uLL, 4);
      v37 = (__int128 *)v290;
      v33 = DWORD2(v290);
    }
    else
    {
      v37 = &v291;
    }
    *((_DWORD *)v37 + v33) = 10;
    v33 = ++DWORD2(v290);
    v36 = *(uint64_t ***)(a2 + 16);
    v35 = (int *)v290;
  }
  else
  {
    v35 = (int *)&v291;
    v36 = v31;
  }
  v271 = a2 + 2192;
  v38 = llvm::AttributeList::get(*v36, 0, v35, v33);
  if ((__int128 *)v290 != &v291)
    free((void *)v290);
  v39 = v38;
  v40 = (unint64_t)a1;
  llvm::GetReturnInfo(v30, v31, v39, (uint64_t)&v293, a1, v6);
  v41 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, void **, _QWORD))(*(_QWORD *)a1 + 1856))(a1, *(unsigned int *)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 80) + 40), (*(unsigned __int16 *)(a2 + 24) >> 2) & 1, &v293, **(_QWORD **)(a2 + 16));
  v42 = *(_QWORD *)(a2 + 16);
  v255 = v41;
  if ((v41 & 1) != 0)
  {
    v268 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD, _QWORD, llvm::DataLayout *))(*(_QWORD *)a1 + 1912))(a1, v42, *(unsigned int *)(a2 + 32), (*(unsigned __int16 *)(a2 + 24) >> 2) & 1, v6);
    v267 = v300;
    if ((_DWORD)v300)
    {
      v76 = 0;
      do
      {
        if (v300 - 1 == v76)
          v77 = 805306368;
        else
          v77 = 0x20000000;
        if (v268)
          v78 = v77;
        else
          v78 = 0;
        v79 = &v299[2 * v76];
        v80 = *v79;
        v81 = v79[1];
        v82 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 592))(a1, **(_QWORD **)(a2 + 16), *(unsigned int *)(a2 + 32), *v79, v81);
        v83 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 600))(a1, **(_QWORD **)(a2 + 16), *(unsigned int *)(a2 + 32), v80, v81);
        if (v83)
        {
          v84 = v83;
          do
          {
            DWORD2(v290) = 0;
            *(_QWORD *)&v290 = v78;
            BYTE12(v290) = v82;
            *(_QWORD *)&v291 = v80;
            *((_QWORD *)&v291 + 1) = v81;
            v85 = *(unsigned __int16 *)(a2 + 24);
            LOBYTE(v292) = (v85 & 0x20) != 0;
            v86 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8);
            v87 = v78;
            if (v86 == 15)
            {
              LODWORD(v290) = v78 | 0x80000000;
              DWORD2(v290) = v86 >> 8;
              v87 = v78 | 0x80000000;
            }
            if ((v85 & 0xB) != 0)
              LODWORD(v290) = v87 | (v85 >> 1) & 4 | (__rbit32(v85) >> 30);
            v88 = (_OWORD *)sub_1C52B9D4C(v271, (unint64_t)&v290, 1);
            v89 = (_OWORD *)(*(_QWORD *)(a2 + 2192) + 48 * *(unsigned int *)(a2 + 2200));
            v91 = v88[1];
            v90 = v88[2];
            *v89 = *v88;
            v89[1] = v91;
            v89[2] = v90;
            ++*(_DWORD *)(a2 + 2200);
            --v84;
          }
          while (v84);
        }
        ++v76;
      }
      while (v76 != v267);
      v247 = 0;
      v248 = 0;
      v249 = -100;
      v6 = (llvm::DataLayout *)(v250 + 272);
      v40 = (unint64_t)a1;
    }
    else
    {
      v247 = 0;
      v248 = 0;
      v249 = -100;
    }
  }
  else
  {
    sub_1C4768AD0((uint64_t)v6, v42);
    v44 = (unint64_t)(v43 + 7) >> 3;
    v46 = v45 == 1;
    llvm::DataLayout::getAlignment((uint64_t)v6, v42);
    v49 = ((1 << v48) + v44 - 1) & -(1 << v48);
    if (v46)
    llvm::DataLayout::getAlignment((uint64_t)v6, *(_QWORD *)(a2 + 16));
    v51 = v50;
    StackObject = llvm::MachineFrameInfo::CreateStackObject(*(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) + 56), v49, v50, 0, 0, 0);
    v53 = llvm::PointerType::get(*(llvm::PointerType **)(a2 + 16), (llvm::Type *)*(unsigned int *)(v250 + 276));
    v54 = *(_QWORD *)(a2 + 80);
    v55 = (*(uint64_t (**)(unsigned __int8 *, llvm::DataLayout *, _QWORD))(*(_QWORD *)v34 + 32))(v34, v6, *(unsigned int *)(v250 + 276));
    v249 = StackObject;
    v56 = sub_1C5D406AC(v54, StackObject, (llvm *)v55, 0, 0);
    v58 = v57;
    *((_QWORD *)&v292 + 1) = 0;
    *(_QWORD *)&v290 = 0;
    v248 = v56;
    *((_QWORD *)&v290 + 1) = v56;
    *(_QWORD *)&v291 = v57;
    *((_QWORD *)&v291 + 1) = v53;
    LOWORD(v292) = v292 & 0xC000 | 8;
    WORD1(v292) = v51 | 0x100;
    v59 = *(__int128 **)(a2 + 56);
    v60 = *(_QWORD *)(a2 + 64);
    v61 = *(_QWORD *)(a2 + 72);
    if (v60 >= v61)
    {
      v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)v59) >> 4) + 1;
      if (v92 > 0x555555555555555)
        abort();
      v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)v59) >> 4);
      if (2 * v93 > v92)
        v92 = 2 * v93;
      if (v93 >= 0x2AAAAAAAAAAAAAALL)
        v94 = 0x555555555555555;
      else
        v94 = v92;
      if (v94)
      {
        if (v94 > 0x555555555555555)
          sub_1C4764EE4();
        v107 = 3 * v94;
        v95 = operator new(48 * v94);
        v96 = &v95[v107];
      }
      else
      {
        v95 = operator new(0x30uLL);
        v96 = v95 + 3;
      }
      v108 = v291;
      *v95 = v290;
      v95[1] = v108;
      v95[2] = v292;
      if ((__int128 *)v60 != v59)
        memmove(v95 + 3, v59, v60 - (_QWORD)v59);
      *(_QWORD *)(a2 + 56) = v95;
      *(_QWORD *)(a2 + 64) = &v95[((uint64_t)(v60 - (_QWORD)v59) >> 4) + 3];
      *(_QWORD *)(a2 + 72) = v96;
      v6 = (llvm::DataLayout *)(v250 + 272);
      v40 = (unint64_t)v256;
      if (v59)
        operator delete(v59);
    }
    else if (v59 == (__int128 *)v60)
    {
      v62 = v290;
      v63 = v292;
      v59[1] = v291;
      v59[2] = v63;
      *v59 = v62;
      *(_QWORD *)(a2 + 64) = v59 + 3;
      v40 = (unint64_t)v34;
    }
    else
    {
      v97 = v59 + 3;
      v98 = (__int128 *)(v60 - 48);
      v40 = (unint64_t)v34;
      v99 = *(__int128 **)(a2 + 64);
      if (v60 >= 0x30)
      {
        do
        {
          v100 = *v98;
          v101 = v98[2];
          v99[1] = v98[1];
          v99[2] = v101;
          *v99 = v100;
          v99 += 3;
          v98 += 3;
        }
        while ((unint64_t)v98 < v60);
      }
      *(_QWORD *)(a2 + 64) = v99;
      if ((_OWORD *)v60 != v97)
      {
        memmove(v59 + 3, v59, v60 - (_QWORD)v97);
        v99 = *(__int128 **)(a2 + 64);
      }
      v103 = v59 <= &v290 && v99 > &v290;
      v104 = &v290 + 3 * v103;
      v105 = *v104;
      v106 = v104[2];
      v59[1] = v104[1];
      v59[2] = v106;
      *v59 = v105;
    }
    v247 = v58;
    ++*(_DWORD *)(a2 + 28);
    *(_QWORD *)(a2 + 16) = ***(_QWORD ***)(a2 + 16) + 1576;
    *(_BYTE *)(a2 + 26) = 0;
  }
  v109 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v40 + 1768))(v40);
  v110 = *(_QWORD *)(a2 + 56);
  if (v109)
  {
    v111 = *(_QWORD *)(a2 + 64);
    if (v110 != v111)
    {
      do
      {
        if ((*(_WORD *)(v110 + 32) & 0x1000) != 0)
        {
          *(_QWORD *)&v290 = 0;
          DWORD2(v290) = 0;
          BYTE12(v290) = 1;
          LOBYTE(v291) = 0;
          *((_QWORD *)&v291 + 1) = 0;
          LOBYTE(v292) = 0;
          BYTE12(v290) = (*(uint64_t (**)(unint64_t, llvm::DataLayout *, _QWORD))(*(_QWORD *)v40 + 32))(v40, v6, 0);
          LOBYTE(v291) = (*(uint64_t (**)(unint64_t, llvm::DataLayout *, _QWORD))(*(_QWORD *)v40 + 32))(v40, v6, 0);
          *((_QWORD *)&v291 + 1) = 0;
          LODWORD(v290) = v290 | 0x4000;
          v112 = (_OWORD *)sub_1C52B9D4C(v271, (unint64_t)&v290, 1);
          v113 = (_OWORD *)(*(_QWORD *)(a2 + 2192) + 48 * *(unsigned int *)(a2 + 2200));
          v115 = v112[1];
          v114 = v112[2];
          *v113 = *v112;
          v113[1] = v115;
          v113[2] = v114;
          ++*(_DWORD *)(a2 + 2200);
        }
        v110 += 48;
      }
      while (v110 != v111);
      v110 = *(_QWORD *)(a2 + 56);
    }
  }
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 1672) = 0;
  v253 = -1431655765 * ((unint64_t)(*(_QWORD *)(a2 + 64) - v110) >> 4);
  if ((_DWORD)v253)
  {
    v116 = 0;
    while (1)
    {
      *(_QWORD *)&v290 = &v291;
      *((_QWORD *)&v290 + 1) = 0x400000000;
      llvm::ComputeValueVTs(v40, v6, *(_QWORD *)(*(_QWORD *)(a2 + 56) + 48 * v116 + 24), (uint64_t)&v290, 0, 0, 0);
      v117 = *(_QWORD *)(a2 + 56) + 48 * v116;
      v118 = (uint64_t *)(v117 + 24);
      v119 = *(_WORD *)(v117 + 32);
      v120 = (uint64_t *)(v117 + 40);
      if ((v119 & 0x20) == 0)
        v120 = v118;
      v254 = *v120;
      v261 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v40 + 1912))(v40);
      if (DWORD2(v290))
        break;
LABEL_210:
      if ((__int128 *)v290 != &v291)
        free((void *)v290);
      if (++v116 == v253)
        goto LABEL_213;
    }
    v121 = 0;
    v257 = (DWORD2(v290) - 1);
    v258 = DWORD2(v290);
    while (1)
    {
      *(_OWORD *)v285 = *(_OWORD *)(v290 + 16 * v121);
      llvm::EVT::getTypeForEVT((llvm::EVT *)v285, **(llvm::LLVMContext ***)(a2 + 16));
      v122 = *(_QWORD *)(a2 + 56) + 48 * v116;
      v266 = *(_QWORD *)(v122 + 8);
      v123 = *(_DWORD *)(v122 + 16);
      v125 = (*(uint64_t (**)(unint64_t, uint64_t, llvm::DataLayout *))(*(_QWORD *)v40 + 608))(v40, v124, v6);
      v126 = *(_QWORD *)(a2 + 56);
      v127 = v126 + 48 * v116;
      v128 = *(_DWORD *)(*(_QWORD *)(v127 + 24) + 8);
      if (v128 == 15)
        v129 = ((v125 << 23) + 0x800000) & 0xF800000 | 0x80000000;
      else
        v129 = ((v125 << 23) + 0x800000) & 0xF800000;
      if (v128 == 15)
        v130 = *(_DWORD *)(*(_QWORD *)(v127 + 24) + 8) >> 8;
      else
        v130 = 0;
      v269 = v130;
      v131 = *(unsigned __int16 *)(v127 + 32);
      v132 = v129 & 0xFFFFFFFC | (v131 >> 1) & 1 | (2 * (v131 & 1));
      if ((v131 & 4) != 0)
      {
        if (*(_DWORD *)(a2 + 32) == 80)
        {
          v133 = v132 | 0x20000;
          if (v121)
            v133 = v132;
          v134 = v133 | 0x10000;
          if (*(_BYTE *)(v254 + 8) == 16)
            v132 = v134;
        }
        v132 |= 4uLL;
      }
      v135 = v132 | v131 & 8 | (((v131 >> 10) & 0xF) << 12) | (v131 >> 1) & 0x30;
      if ((v131 & 0x100) != 0)
        v135 = v135 & 0xFFFFFBEF | 0x410;
      if ((v131 & 0x80) != 0)
        v136 = v135 | 0x210;
      else
        v136 = v135;
      v262 = v121;
      if ((v131 & 0x1A0) != 0)
      {
        v137 = v40;
        v138 = *(_QWORD *)(v126 + 48 * v116 + 40);
        sub_1C4768AD0((uint64_t)v6, v138);
        v140 = v139;
        v142 = v141 == 1;
        llvm::DataLayout::getAlignment((uint64_t)v6, v138);
        v145 = v144;
        if (v142)
        v136 |= (((1 << v145) + 0xFFFFFFFFLL + ((unint64_t)(v140 + 7) >> 3)) & -(1 << v145)) << 32;
        v126 = *(_QWORD *)(a2 + 56);
        v146 = *(unsigned __int16 *)(v126 + 48 * v116 + 34);
        v40 = v137;
        if (v146 <= 0xFF)
        {
          v146 = 63
               - __clz((*(uint64_t (**)(unint64_t, _QWORD, llvm::DataLayout *))(*(_QWORD *)v137 + 576))(v137, *(_QWORD *)(v126 + 48 * v116 + 40), v6));
          v126 = *(_QWORD *)(a2 + 56);
        }
        LODWORD(v121) = v262;
      }
      else
      {
        v146 = *(unsigned __int16 *)(v126 + 48 * v116 + 34);
        if (v146 < 0x100)
          v146 = v125;
      }
      v147 = (v123 + v121);
      v148 = v136 & 0xFFFFFFFF00000000;
      v149 = v136 & 0xFFFFFFFFFF87FFFFLL | ((((unint64_t)((v146 << 19) + 0x80000) >> 19) & 0xF) << 19);
      if ((*(_WORD *)(v126 + 48 * v116 + 32) & 0x10) != 0)
        v150 = v148 | v149 & 0xFFFFFFBF | 0x40;
      else
        v150 = v149;
      if (v261)
        v150 |= 0x20000000uLL;
      v272 = v150;
      v278[0] = (*(uint64_t (**)(unint64_t, _QWORD, _QWORD, void *, void *))(*(_QWORD *)v40 + 592))(v40, **(_QWORD **)(a2 + 16), *(unsigned int *)(a2 + 32), v285[0], v285[1]);
      v151 = (*(unsigned int (**)(unint64_t, _QWORD, _QWORD, void *, void *))(*(_QWORD *)v40 + 600))(v40, **(_QWORD **)(a2 + 16), *(unsigned int *)(a2 + 32), v285[0], v285[1]);
      v287 = v289;
      v288 = 0x400000000;
      sub_1C4825C80((unsigned int *)&v287, v151, 0, 0);
      v152 = *(_WORD *)(*(_QWORD *)(a2 + 56) + 48 * v116 + 32);
      if ((v152 & 2) != 0)
        v153 = 199;
      else
        v153 = 200;
      if ((v152 & 1) != 0)
        v154 = 198;
      else
        v154 = v153;
      if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 48 * v116 + 32) & 0x200) != 0)
      {
        v156 = v266;
        v157 = *(_QWORD *)(v266 + 40) + 16 * v147;
        v158 = *(_BYTE *)v157;
        if (*(_BYTE *)v157)
        {
          v159 = v255;
          if ((v158 + 85) >= 0x64u)
            v159 = 0;
          v155 = v259;
          if ((v159 & 1) == 0)
            goto LABEL_190;
        }
        else
        {
          v193 = (*(_DWORD *)(*(_QWORD *)(v157 + 8) + 8) & 0xFE) == 18;
          v160 = v255 ^ 1;
          if (v193)
            v160 = 1;
          v155 = v259;
          if ((v160 & 1) != 0)
            goto LABEL_190;
        }
        v161 = sub_1C47A8C74(v278);
        v163 = v162;
        if (LOBYTE(v285[0]))
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v285);
        else
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v285);
        if (v161 * v151 == ExtendedSizeInBits && v163 == v165
          || (v152 & 3) != 0 && ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 48 * v116 + 32) ^ *(_WORD *)(a2 + 24)) & 3) == 0)
        {
          v272 |= 0x80uLL;
        }
      }
      else
      {
        v155 = v259;
        v156 = v266;
      }
LABEL_190:
      v259 = v155 & 0xFFFFFFFF00000000 | v147;
      sub_1C5D13344(*(_QWORD *)(a2 + 80), (const llvm::APInt *)(a2 + 88), v156, v259, (unint64_t)v287, v151, v278[0], *(unsigned __int8 **)(a2 + 104), *(unsigned int *)(a2 + 32) | 0x100000000, v154);
      if ((_DWORD)v151)
      {
        v166 = 0;
        v167 = 0;
        do
        {
          v168 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((char *)v287 + v167) + 40)
                           + 16 * *(unsigned int *)((char *)v287 + v167 + 8));
          v169 = v285[0];
          v170 = v285[1];
          v171 = v116;
          v172 = v116 < *(unsigned int *)(a2 + 28);
          v174 = *v168;
          v173 = v168[1];
          *(_QWORD *)&v274[0] = v174;
          *((_QWORD *)&v274[0] + 1) = v173;
          v175 = sub_1C47C1C70((unsigned __int8 *)v274);
          v279 = (void *)v272;
          LODWORD(v280) = v269;
          v282 = v172;
          v116 = v171;
          v283 = v171;
          v284 = v175 * v166;
          BYTE4(v280) = v174;
          v281[0] = v169;
          v281[1] = v170;
          if ((_DWORD)v151 == 1 || v167)
          {
            if (v167)
            {
              if (16 * (v151 - 1) == v167)
                v176 = 8390656;
              else
                v176 = 0x800000;
              LODWORD(v279) = v176 | v272 & 0xF07FFFFF;
            }
          }
          else
          {
            LODWORD(v279) = v272 | 0x100;
          }
          v177 = (_OWORD *)sub_1C52B9D4C(a2 + 112, (unint64_t)&v279, 1);
          v178 = (_OWORD *)(*(_QWORD *)(a2 + 112) + 48 * *(unsigned int *)(a2 + 120));
          v180 = v177[1];
          v179 = v177[2];
          *v178 = *v177;
          v178[1] = v180;
          v178[2] = v179;
          ++*(_DWORD *)(a2 + 120);
          v181 = *(_OWORD *)((char *)v287 + v167);
          v182 = *(unsigned int *)(a2 + 1672);
          if (v182 >= *(unsigned int *)(a2 + 1676))
          {
            v252 = *(_OWORD *)((char *)v287 + v167);
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 1664, a2 + 1680, v182 + 1, 16);
            v181 = v252;
            v182 = *(unsigned int *)(a2 + 1672);
          }
          *(_OWORD *)(*(_QWORD *)(a2 + 1664) + 16 * v182) = v181;
          ++*(_DWORD *)(a2 + 1672);
          v167 += 16;
          ++v166;
        }
        while (16 * v151 != v167);
      }
      v183 = v261;
      if (v262 != v257)
        v183 = 0;
      if ((v183 & 1) != 0)
      {
        v184 = *(_QWORD *)(a2 + 112) + 48 * *(unsigned int *)(a2 + 120);
        *(_DWORD *)(v184 - 48) |= 0x10000000u;
      }
      v6 = (llvm::DataLayout *)(v250 + 272);
      v40 = (unint64_t)v256;
      if (v287 != v289)
        free(v287);
      v121 = v262 + 1;
      if (v262 + 1 == v258)
        goto LABEL_210;
    }
  }
LABEL_213:
  *(_QWORD *)&v290 = &v291;
  *((_QWORD *)&v290 + 1) = 0x400000000;
  *(_QWORD *)a2 = (*(uint64_t (**)(unint64_t, uint64_t, __int128 *))(*(_QWORD *)v40 + 1840))(v40, a2, &v290);
  *(_DWORD *)(a2 + 8) = v185;
  sub_1C6273000(a2 + 3744, (uint64_t)&v290);
  if (*(_BYTE *)(a2 + 26))
  {
    v186 = *(_QWORD *)(a2 + 80);
    v187 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v186 + 192) = *(_QWORD *)a2;
    *(_DWORD *)(v186 + 200) = v187;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    goto LABEL_230;
  }
  v287 = v289;
  v288 = 0x400000000;
  if ((v255 & 1) != 0)
  {
    if (!(_DWORD)v300)
      goto LABEL_227;
    v188 = 0;
    v189 = 0;
    v190 = *(_WORD *)(a2 + 24);
    v191 = v190 & 2;
    v192 = (unint64_t)(v190 & 2) << 31;
    v193 = (v190 & 1) == 0;
    v194 = 0x100000000;
    if (v193)
      v194 = v192;
    LODWORD(v195) = 2 * v191;
    v195 = v193 ? v195 : 3;
    v196 = v194 | v195;
    v197 = 16 * v300;
    do
    {
      v198 = (llvm *)v299[v188 / 8];
      v199 = v299[v188 / 8 + 1];
      v200 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, llvm *, uint64_t))(*(_QWORD *)v256 + 592))(v256, **(_QWORD **)(a2 + 16), *(unsigned int *)(a2 + 32), v198, v199);
      v201 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, llvm *, uint64_t))(*(_QWORD *)v256 + 600))(v256, **(_QWORD **)(a2 + 16), *(unsigned int *)(a2 + 32), v198, v199);
      v202 = v201;
      v203 = sub_1C5D11328(*(_QWORD *)(a2 + 80), (const llvm::APInt *)(a2 + 88), (__int128 *)(v290 + 16 * v189), v201, v200, v198, v199, 0, *(unsigned int *)(a2 + 32) | 0x100000000, v196);
      v205 = v204;
      v206 = v288;
      if (v288 >= (unint64_t)HIDWORD(v288))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v287, (uint64_t)v289, v288 + 1, 16);
        v206 = v288;
      }
      v207 = (uint64_t **)((char *)v287 + 16 * v206);
      *v207 = v203;
      v207[1] = v205;
      v208 = v288 + 1;
      LODWORD(v288) = v288 + 1;
      v189 += v202;
      v188 += 16;
    }
    while (v197 != v188);
    if (!v208)
    {
LABEL_227:
      v209 = a3;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      goto LABEL_228;
    }
  }
  else
  {
    v285[0] = v286;
    v285[1] = (void *)0x100000000;
    v210 = llvm::PointerType::get(v246, (llvm::Type *)*(unsigned int *)(v250 + 276));
    llvm::ComputeValueVTs(v40, v6, v210, (uint64_t)v285, 0, 0, 0);
    v264 = *((_QWORD *)v285[0] + 1);
    v265 = *(llvm **)v285[0];
    v211 = v300;
    sub_1C63646F4((uint64_t)&v287, v300);
    v279 = v281;
    v280 = 0x400000000;
    sub_1C4825C80((unsigned int *)&v279, v211, 0, 0);
    if ((_DWORD)v211)
    {
      v215 = 0;
      v216 = 0;
      v217 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 40) + 56);
      v263 = *(unsigned __int8 *)(*(_QWORD *)(v217 + 8) + 40 * (*(_DWORD *)(v217 + 32) + v249) + 16);
      v218 = (const llvm::APInt *)(a2 + 88);
      v260 = 8 * v211;
      do
      {
        v219 = *(_QWORD *)(a2 + 80);
        v220 = sub_1C6366AB4(v219, *(_QWORD *)&v296[v216], v218, v265, v264, 0, 0);
        v223 = sub_1C5D56C70(v219, 56, v218, v265, v264, v248, v247, v222, (uint64_t)v220, v221, 3);
        v270 = v224;
        v273 = (uint64_t)v223;
        v225 = *(_QWORD *)(a2 + 80);
        v226 = v299[v215];
        v227 = v299[v215 + 1];
        v228 = *(_QWORD *)a2;
        v229 = *(_QWORD *)(a2 + 8);
        v230 = *(_QWORD *)&v296[v216];
        FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(_QWORD *)(v225 + 40) + 432), v249);
        *(_QWORD *)&v275 = (unint64_t)FixedStack | 4;
        *((_QWORD *)&v275 + 1) = v230;
        v277 = 0;
        if (FixedStack)
          v232 = *((_DWORD *)FixedStack + 3);
        else
          v232 = 0;
        v276 = v232;
        v40 = v40 & 0xFFFFFFFFFFFF0000 | v263 | 0x100;
        memset(v274, 0, sizeof(v274));
        v233 = v225;
        v218 = (const llvm::APInt *)(a2 + 88);
        v234 = sub_1C63681B0(v233, v226, v227, a2 + 88, v228, v229, v273, v270, &v275, v40, SHIDWORD(v40), 0, (uint64_t)v274, 0);
        v235 = (char *)v287 + v215 * 8;
        *(_QWORD *)v235 = v234;
        *((_DWORD *)v235 + 2) = v236;
        v237 = (char *)v279 + v215 * 8;
        *(_QWORD *)v237 = v234;
        *((_DWORD *)v237 + 2) = 1;
        v216 += 8;
        v215 += 2;
      }
      while (v260 != v216);
    }
    v212 = *(_QWORD *)(a2 + 80);
    v213 = *(_QWORD *)(v212 + 832);
    if (v213)
      v214 = *(unsigned __int16 *)(v213 + 8);
    else
      v214 = 0;
    *(_QWORD *)a2 = sub_1C636D0C8(v212, (const char *)2, (const llvm::APInt *)(a2 + 88), (llvm *)1, 0, (uint64_t *)v279, v280, v214);
    *(_DWORD *)(a2 + 8) = v238;
    if (v279 != v281)
      free(v279);
    if (v285[0] != v286)
      free(v285[0]);
  }
  v239 = *(_QWORD *)(a2 + 80);
  v241 = sub_1C636AB20(v239, v299, v300);
  v242 = *(_QWORD *)(v239 + 832);
  if (v242)
    v243 = *(_WORD *)(v242 + 8);
  else
    v243 = 0;
  v244 = sub_1C636D410(v239, (const char *)0x37, (const llvm::APInt *)(a2 + 88), v241, v240, (uint64_t *)v287, v288, v243);
  v209 = a3;
  *(_QWORD *)a3 = v244;
  *(_QWORD *)(a3 + 8) = v245;
LABEL_228:
  *(_OWORD *)(v209 + 16) = *(_OWORD *)a2;
  if (v287 != v289)
    free(v287);
LABEL_230:
  if ((__int128 *)v290 != &v291)
    free((void *)v290);
  if (v293 != v295)
    free(v293);
  if (v296 != v298)
    free(v296);
  if (v299 != v301)
    free(v299);
}

uint64_t sub_1C5D21564(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  unsigned int v14;
  unint64_t v15;
  unsigned int ExtendedSizeInBits;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char v21;
  unint64_t v22;
  llvm *v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 0);
  v24 = 0;
  v7 = (*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 0);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 776))(v6, *(_QWORD *)(*(_QWORD *)v8 + 40));
  v10 = v23;
  v11 = sub_1C636E344(a1, 28, a2, v23, 0, *a3, a3[1]);
  if (v9)
  {
    v14 = *(_DWORD *)(*(_QWORD *)v9 + 8);
    if ((v14 & 0xFE) == 0x12)
      v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v9 + 16) + 8);
    v15 = v9 & 0xFFFFFFFFFFFFFFFBLL;
    if ((_BYTE)v23)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v23);
    else
      ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v23);
    v18 = ExtendedSizeInBits;
    v19 = v14 >> 8;
    if ((_DWORD)v17 == 1)
    sub_1C6365BD8(a1, (uint64_t)v23, v24);
    v21 = v20;
    v22 = sub_1C484358C(v8 + 128, 80, 3);
    *(_QWORD *)v22 = v15;
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 16) = v19;
    *(_BYTE *)(v22 + 20) = 0;
    *(_QWORD *)(v22 + 24) = ((unint64_t)(v18 >> 3) << 6) | 1;
    *(_WORD *)(v22 + 32) = 49;
    *(_BYTE *)(v22 + 34) = v21;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_QWORD *)(v22 + 72) = 0;
    *(_WORD *)(v22 + 36) = 1;
    v25[0] = v22;
    sub_1C636E10C((void *)a1, (uint64_t)v11, v25, 1);
    v10 = v23;
  }
  if ((_DWORD)v7 != v10)
    return sub_1C6366544(a1, (uint64_t)v11, 0, a2, v7, 0);
  if (!(_DWORD)v7 && v24 != 0)
    return sub_1C6366544(a1, (uint64_t)v11, 0, a2, v7, 0);
  return (uint64_t)v11;
}

uint64_t *sub_1C5D2179C(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  int v13;
  unsigned __int8 **v14;
  BOOL v15;
  unsigned __int8 *v16;
  llvm *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  llvm *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::APInt *v43;
  unsigned int v44;
  llvm::APInt *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *result;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  llvm::MachineBasicBlock *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  unsigned __int8 *v117;
  int v118;

  v12 = *(_QWORD *)a1;
  v13 = *(_DWORD *)(a1 + 816);
  v117 = 0;
  v118 = v13;
  v15 = v12 == 0;
  v14 = (unsigned __int8 **)(v12 + 48);
  v15 = v15 || v14 == &v117;
  if (!v15)
  {
    v16 = *v14;
    v117 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v117, v16, 2);
  }
  v17 = (llvm *)*(unsigned __int8 *)(a2 + 44);
  v18 = *(_QWORD *)(a1 + 832);
  sub_1C612E234((unsigned int *)(a1 + 384), *(_BYTE **)(a1 + 672), (_BYTE *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
  *(_DWORD *)(a1 + 680) = 0;
  v19 = sub_1C5D14AF0((uint64_t *)a1, a1 + 384);
  v21 = sub_1C612E4E4(v18, (uint64_t)v19, v20, (const llvm::APInt *)&v117, a5, v17, 0);
  v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a6);
  v22.i16[0] = vaddlv_u8(v22);
  v23 = v22.u32[0];
  v24 = *(_QWORD *)(a1 + 832);
  v25 = *(_QWORD *)(v24 + 24);
  v113 = v26;
  if (v22.u32[0] == 1)
  {
    v27 = v21;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, llvm *, _QWORD))(*(_QWORD *)v25 + 400))(v25, *(_QWORD *)(**(_QWORD **)(v24 + 40) + 40) + 272, *(_QWORD *)(v24 + 56), v17, 0);
    v30 = v29;
    v31 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), __clz(__rbit64(*(_QWORD *)a6)), (const llvm::APInt *)&v117, v17, 0, 0, 0);
    v33 = v32;
    v34 = sub_1C6367818((_QWORD *)v24, 0x11u);
    v37 = 0;
    v38 = *(_QWORD *)(v24 + 832);
    if (v38)
      v37 = *(_WORD *)(v38 + 8);
    v110 = v35;
    v111 = v37;
    v108 = v33;
    v109 = v34;
    v107 = (uint64_t)v31;
    v39 = v24;
    v40 = (llvm *)v28;
    v41 = v30;
    v42 = (uint64_t)v27;
LABEL_19:
    v56 = v113;
    goto LABEL_27;
  }
  v112 = (uint64_t)v21;
  v43 = (llvm::APInt *)(a2 + 16);
  v44 = *(_DWORD *)(a2 + 24);
  if (v44 < 0x41 || v44 - llvm::APInt::countLeadingZerosSlowCase(v43) <= 0x40)
  {
    v45 = *(llvm::APInt **)v43;
    if (v44 < 0x41)
      v45 = v43;
    if (*(_QWORD *)v45 == v23)
    {
      v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, llvm *, _QWORD))(*(_QWORD *)v25 + 400))(v25, *(_QWORD *)(**(_QWORD **)(v24 + 40) + 40) + 272, *(_QWORD *)(v24 + 56), v17, 0);
      v48 = v47;
      v49 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), __clz(__rbit64(~*(_QWORD *)a6)), (const llvm::APInt *)&v117, v17, 0, 0, 0);
      v51 = v50;
      v52 = sub_1C6367818((_QWORD *)v24, 0x16u);
      v54 = 0;
      v55 = *(_QWORD *)(v24 + 832);
      if (v55)
        v54 = *(_WORD *)(v55 + 8);
      v110 = v53;
      v111 = v54;
      v108 = v51;
      v109 = v52;
      v107 = (uint64_t)v49;
      v39 = v24;
      v40 = (llvm *)v46;
      v41 = v48;
      v42 = v112;
      goto LABEL_19;
    }
  }
  v58 = sub_1C6366AB4(v24, 1, (const llvm::APInt *)&v117, v17, 0, 0, 0);
  v60 = 0;
  v61 = *(_QWORD *)(v24 + 832);
  if (v61)
    v60 = *(_WORD *)(v61 + 8);
  v62 = sub_1C5D56C70(v24, 175, (const llvm::APInt *)&v117, v17, 0, (uint64_t)v58, v57, v59, v112, v113, v60);
  v64 = v63;
  v65 = *(_QWORD *)(a1 + 832);
  v66 = sub_1C6366AB4(v65, *(_QWORD *)a6, (const llvm::APInt *)&v117, v17, 0, 0, 0);
  v69 = 0;
  v70 = *(_QWORD *)(v65 + 832);
  if (v70)
    v69 = *(_WORD *)(v70 + 8);
  v114 = sub_1C5D56C70(v65, 171, (const llvm::APInt *)&v117, v17, 0, (uint64_t)v62, v64, v68, (uint64_t)v66, v67, v69);
  v72 = v71;
  v73 = *(_QWORD *)(a1 + 832);
  v74 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, llvm *, _QWORD))(*(_QWORD *)v25 + 400))(v25, *(_QWORD *)(**(_QWORD **)(v73 + 40) + 40) + 272, *(_QWORD *)(v73 + 56), v17, 0);
  v76 = v75;
  v77 = sub_1C6366AB4(*(_QWORD *)(a1 + 832), 0, (const llvm::APInt *)&v117, v17, 0, 0, 0);
  v79 = v78;
  v80 = sub_1C6367818((_QWORD *)v73, 0x16u);
  v82 = 0;
  v83 = *(_QWORD *)(v73 + 832);
  if (v83)
    v82 = *(_WORD *)(v83 + 8);
  v110 = v81;
  v111 = v82;
  v108 = v79;
  v109 = v80;
  v107 = (uint64_t)v77;
  v39 = v73;
  v40 = (llvm *)v74;
  v41 = v76;
  v42 = (uint64_t)v114;
  v56 = v72;
LABEL_27:
  v84 = sub_1C5D58E08(v39, (const char *)0xC1, (const llvm::APInt *)&v117, v40, v41, v42, v56, v36, v107, v108, v109, v110, SHIDWORD(v110), v111);
  v86 = v85;
  sub_1C635FF50(a1, (llvm::MachineBasicBlock *)a7, *(llvm::MachineBasicBlock **)(a6 + 16), *(_DWORD *)(a6 + 24));
  sub_1C635FF50(a1, (llvm::MachineBasicBlock *)a7, a3, a4);
  sub_1C50D6C6C(*(unsigned int **)(a7 + 112), *(unsigned int **)(a7 + 120));
  v87 = *(_QWORD *)(a1 + 832);
  sub_1C612E234((unsigned int *)(a1 + 384), *(_BYTE **)(a1 + 672), (_BYTE *)(*(_QWORD *)(a1 + 672) + 16 * *(unsigned int *)(a1 + 680)));
  *(_DWORD *)(a1 + 680) = 0;
  v88 = sub_1C5D14AF0((uint64_t *)a1, a1 + 384);
  v90 = v89;
  v91 = sub_1C5D4145C(*(_QWORD *)(a1 + 832), *(_QWORD *)(a6 + 16));
  v94 = *(_QWORD *)(v87 + 832);
  if (v94)
    LOWORD(v94) = *(_WORD *)(v94 + 8);
  result = sub_1C5D58E08(v87, (const char *)0x103, (const llvm::APInt *)&v117, (llvm *)1, 0, (uint64_t)v88, v90, v93, (uint64_t)v84, v86, v91, v92, SHIDWORD(v92), v94);
  v96 = (uint64_t)result;
  v98 = v97;
  v99 = *(llvm::MachineBasicBlock **)(a7 + 8);
  if (v99 == (llvm::MachineBasicBlock *)(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 8) + 320))
    v99 = 0;
  if (v99 != a3)
  {
    v100 = *(_QWORD *)(a1 + 832);
    v101 = sub_1C5D4145C(v100, (uint64_t)a3);
    v104 = *(_QWORD *)(v100 + 832);
    if (v104)
      LOWORD(v104) = *(_WORD *)(v104 + 8);
    result = sub_1C5D56C70(v100, 256, (const llvm::APInt *)&v117, (llvm *)1, 0, v96, v98, v103, v101, v102, v104);
    v96 = (uint64_t)result;
    LODWORD(v98) = v105;
  }
  v106 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(v106 + 192) = v96;
  *(_DWORD *)(v106 + 200) = v98;
  if (v117)
    return (uint64_t *)llvm::MetadataTracking::untrack((uint64_t)&v117, v117);
  return result;
}

void sub_1C5D21CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  void **v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  unsigned int v20;
  __int128 *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char *v26;
  void **v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t *v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  _DWORD *v36;
  void **v37;
  __int128 *p_p;
  __int128 *v39;
  char *v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  char v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v65;
  uint64_t *v66;
  int v67;
  uint64_t ParamElementType;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  char v78;
  int v79;
  const char *v80;
  _BOOL4 v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  int v96;
  char *v97;
  _DWORD *v98;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  void **v102;
  int v103;
  _BOOL4 v104;
  int v105;
  int v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  char *v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  int v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _BOOL4 v140;
  int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  uint64_t v146;
  int v147;
  void **v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned __int8 v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  _QWORD *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  const char *v166;
  unsigned __int8 v167;
  uint64_t v168;
  unsigned __int8 v169;
  unsigned int v170;
  uint64_t *FixedStack;
  uint64_t v172;
  uint64_t v173;
  char v174;
  int v175;
  _DWORD *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t *v182;
  uint64_t v183;
  int v184;
  uint64_t MetadataImpl;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  _DWORD *v190;
  char *v191;
  unsigned int v192;
  _DWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  unint64_t *v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  void **v206;
  void *v207;
  unsigned __int8 v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  _DWORD *v213;
  char *v214;
  const llvm::InvokeInst *v215;
  _DWORD *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  int v224;
  char *v225;
  void **v226;
  const char *v227;
  int v228;
  const char *v229;
  char *v230;
  unsigned int v231;
  _QWORD *v232;
  uint64_t v233;
  int v234;
  void **v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char v247;
  int v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unsigned __int16 ***v253;
  unsigned __int16 ***v254;
  _BYTE *v255;
  int v256;
  int v257;
  char *v258;
  int v260;
  int v261;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t v266;
  __int16 v267;
  BOOL v268;
  char v269;
  int v270;
  const char *v271;
  uint64_t v272;
  int v273;
  const char *v274;
  int v275;
  uint64_t v276;
  int v277;
  unsigned __int16 *v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int16 *v281;
  uint64_t v282;
  unsigned __int16 *v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unsigned int *v289;
  uint64_t v290;
  unsigned int v291;
  unint64_t v292;
  uint64_t v293;
  int v294;
  void **v295;
  void *v296;
  uint64_t v297;
  int v298;
  void **v299;
  void *v300;
  unsigned __int8 *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  const char *v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  unsigned int *v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  void **v316;
  void *v318;
  uint64_t v319;
  int v320;
  unsigned int i;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  _QWORD *v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  void *v334;
  uint64_t v335;
  int v336;
  const char *v337;
  unint64_t *v338;
  unint64_t *v339;
  unsigned int v340;
  unint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t *v345;
  uint64_t v346;
  int v347;
  void **v348;
  void *v349;
  int v350;
  unint64_t v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  char v355;
  BOOL v356;
  char *v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  void **v364;
  void *v365;
  _QWORD *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  _DWORD *v370;
  char *v371;
  unint64_t v372;
  int IncompleteVirtualRegister;
  uint64_t v374;
  uint64_t v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  void **v381;
  void *v382;
  unsigned __int8 v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _DWORD *v388;
  _DWORD *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  void **v399;
  void *v400;
  unsigned __int8 v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _DWORD *v406;
  char *v407;
  _DWORD *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  char *v414;
  char *v415;
  uint64_t v416;
  int v417;
  _OWORD *v418;
  char *v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  unint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  int v428;
  char *v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  int v434;
  void **v435;
  void *v436;
  _QWORD *v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  _DWORD *v441;
  char *v442;
  _DWORD *v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  char *v448;
  _DWORD *v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  int v458;
  unsigned int v459;
  char *v460;
  char *v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  char *v465;
  char *v466;
  uint64_t v467;
  int v468;
  char *v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  char *v474;
  uint64_t v475;
  int v476;
  uint64_t *v477;
  uint64_t *v478;
  uint64_t v479;
  int v480;
  char *v481;
  char *v482;
  uint64_t v483;
  int v484;
  uint64_t v485;
  __int16 v486;
  uint64_t v487;
  char v488;
  uint64_t *v489;
  int v490;
  _BYTE *v491;
  int v492;
  const char *p_p_src;
  char v494;
  const llvm::Instruction *v495;
  uint64_t *v496;
  __int16 v497;
  uint64_t v498;
  uint64_t v499;
  _BYTE *v500;
  int v501;
  void **v502;
  char v503;
  _BYTE *v504;
  int v505;
  char v506;
  _QWORD *v507;
  uint64_t v508;
  int v509;
  _DWORD *v510;
  char *v511;
  const char *v512;
  char *v513;
  uint64_t v514;
  uint64_t v515;
  void **v516;
  _DWORD *v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  void **v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  __int16 v536;
  void **v537;
  uint64_t *v538;
  int v539;
  void **v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t *v545;
  char *v546;
  char *v547;
  unsigned int v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  _OWORD *v553;
  unsigned __int8 *v554;
  uint64_t *v555;
  unsigned int v556;
  uint64_t v557;
  int v558;
  _OWORD *v559;
  unsigned __int8 *v560;
  uint64_t v561;
  unsigned int v562;
  unsigned int v563;
  uint64_t *v564;
  uint64_t *v565;
  uint64_t v566;
  uint64_t v567;
  unsigned __int8 *v568;
  uint64_t v569;
  uint64_t *v570;
  int v571;
  uint64_t v572;
  unsigned __int8 **v573;
  unsigned __int8 *v574;
  uint64_t *v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  uint64_t *v580;
  char v581;
  _QWORD *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  unsigned int v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  _OWORD *v591;
  unsigned __int8 *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  char v597;
  BOOL v598;
  int v599;
  uint64_t v600;
  int v601;
  const char *v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  int v606;
  uint64_t v607;
  _OWORD *v608;
  unsigned __int8 *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  __int16 v613;
  uint64_t *v614;
  int v615;
  int v616;
  _QWORD *v617;
  unint64_t v618;
  _BOOL4 v619;
  _DWORD *v620;
  int v621;
  _QWORD *v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int v625;
  unsigned int v626;
  char *v627;
  llvm::AttributeList *v628;
  unsigned int v629;
  uint64_t v630;
  int *v631;
  int StackObject;
  void **v633;
  uint64_t v634;
  int v635;
  unsigned __int8 *v636;
  uint64_t v637;
  BOOL v638;
  unint64_t v639;
  uint64_t v640;
  char v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  int v648;
  uint64_t v649;
  _BOOL4 v650;
  uint64_t *v651;
  uint64_t *v652;
  void **v653;
  char *v654;
  __int128 *v655;
  _BOOL4 v656;
  void **v657;
  _OWORD v658[2];
  unsigned __int8 *v659;
  int v660;
  uint64_t *v661;
  uint64_t v662;
  void *v663;
  char *v664;
  char *v665;
  llvm::MCSymbol *v666;
  __int128 v667;
  __int128 v668;
  int *v669;
  int *v670;
  _QWORD v671[2];
  unsigned int v672;
  char v673;
  void *v674;
  uint64_t v675;
  _QWORD v676[2];
  __int16 v677;
  void *__src;
  uint64_t v679;
  _QWORD v680[2];
  char v681;
  char v682;
  void *v683[2];
  __int128 v684;
  uint64_t v685;
  char v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  __int128 __p;
  uint64_t v692;
  __int128 v693;
  char v694;
  uint64_t v695;
  int v696;
  _QWORD v697[2];
  _QWORD v698[9];
  __int128 v699;
  _QWORD v700[3];
  _QWORD v701[4];
  _BYTE v702[32];
  void *v703;
  uint64_t v704;
  _BYTE v705[5248];
  void **p_src;
  uint64_t v707;
  _QWORD v708[2];
  void **v709;
  uint64_t v710;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v624 = v5;
  v7 = v6;
  v8 = (uint64_t *)v4;
  v710 = *MEMORY[0x1E0C80C00];
  v9 = *(char **)(v6 - 32);
  v703 = v705;
  v704 = 0x1000000000;
  v10 = *(_QWORD *)(v4 + 832);
  v11 = *(void ***)(v10 + 24);
  v12 = *(_QWORD ***)(v10 + 40);
  v13 = (*v12)[5] + 272;
  v14 = (*(uint64_t (**)(_QWORD *))(*v12[2] + 176))(v12[2]);
  (*((void (**)(int **__return_ptr, void **, uint64_t, uint64_t, uint64_t))*v11 + 251))(&v669, v11, v13, v14, v7);
  v627 = v9;
  v656 = v9[80] != 0;
  v15 = *(_QWORD *)(v7 - 32);
  if (*(_BYTE *)(v15 + 81))
    v16 = *(unsigned __int8 *)(v15 + 80) | 2;
  else
    v16 = *(unsigned __int8 *)(v15 + 80);
  v630 = v7;
  v17 = *(_QWORD *)(v7 + 64);
  v628 = (llvm::AttributeList *)(v7 + 64);
  if (v17 && (*(_BYTE *)(v17 + 12) & 0x40) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v7, 6))
    v16 |= 0x20u;
  v657 = v11;
  v652 = v8;
  v18 = v16 | (4 * *(_DWORD *)(v15 + 84));
  v19 = v669;
  v631 = v670;
  if (v669 != v670)
  {
    v629 = 0;
    v20 = 0;
    v653 = (void **)&v689;
    v654 = (char *)&v690;
    v651 = &v688;
    v21 = (__int128 *)v697;
    v655 = (__int128 *)v697;
    do
    {
      v22 = *(void **)v19;
      *(void **)((char *)v683 + 6) = *(void **)((char *)v19 + 6);
      v683[0] = v22;
      v685 = 0;
      v684 = 0uLL;
      sub_1C484333C(&v684, *((_QWORD *)v19 + 2), *((_QWORD *)v19 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v19 + 3) - *((_QWORD *)v19 + 2)) >> 3));
      v686 = *((_BYTE *)v19 + 40);
      v688 = 0;
      v689 = 0;
      v687 = 0;
      sub_1C53DF0E8(&v687, *((_QWORD *)v19 + 6), *((_QWORD *)v19 + 7), (uint64_t)(*((_QWORD *)v19 + 7) - *((_QWORD *)v19 + 6)) >> 5);
      v690 = v19[18];
      if (*((char *)v19 + 103) < 0)
      {
        sub_1C47EBC30(&__p, *((void **)v19 + 10), *((_QWORD *)v19 + 11));
      }
      else
      {
        v23 = *((_OWORD *)v19 + 5);
        v692 = *((_QWORD *)v19 + 12);
        __p = v23;
      }
      v24 = *(_OWORD *)(v19 + 26);
      v694 = *((_BYTE *)v19 + 120);
      v693 = v24;
      v695 = 0;
      v696 = 0;
      v697[0] = v698;
      v697[1] = 0x400000000;
      v699 = xmmword_1C6612EF0;
      v698[8] = v700;
      v700[1] = v701;
      v700[2] = 0x400000000;
      v701[2] = v702;
      v701[3] = 0x400000000;
      v702[16] = 0;
      v702[20] = 0;
      v25 = v704;
      v26 = (char *)v703;
      if (v704 >= HIDWORD(v704))
      {
        v82 = v703 <= v683 && (char *)v703 + 328 * v704 > (char *)v683;
        v625 = v18;
        v619 = v82;
        if (v82)
          v83 = 0x8F9C18F9C18F9C19 * (((char *)v683 - (_BYTE *)v703) >> 3);
        else
          v83 = -1;
        v618 = v83;
        __src = 0;
        v84 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v703, v704 + 1, 328, (unint64_t *)&__src);
        v26 = v84;
        v85 = (char *)v703;
        if ((_DWORD)v704)
        {
          v86 = (char *)v703 + 328 * v704;
          v87 = (uint64_t)(v84 + 144);
          v88 = (char *)v703 + 144;
          do
          {
            v89 = *((_QWORD *)v88 - 18);
            *(_QWORD *)(v87 - 138) = *(_QWORD *)(v88 - 138);
            *(_QWORD *)(v87 - 144) = v89;
            *(_QWORD *)(v87 - 120) = 0;
            *(_QWORD *)(v87 - 112) = 0;
            *(_QWORD *)(v87 - 128) = 0;
            *(_OWORD *)(v87 - 128) = *((_OWORD *)v88 - 8);
            *(_QWORD *)(v87 - 112) = *((_QWORD *)v88 - 14);
            *((_QWORD *)v88 - 15) = 0;
            *((_QWORD *)v88 - 14) = 0;
            *((_QWORD *)v88 - 16) = 0;
            *(_BYTE *)(v87 - 104) = *(v88 - 104);
            *(_QWORD *)(v87 - 88) = 0;
            *(_QWORD *)(v87 - 80) = 0;
            *(_QWORD *)(v87 - 96) = 0;
            *(_OWORD *)(v87 - 96) = *((_OWORD *)v88 - 6);
            *(_QWORD *)(v87 - 80) = *((_QWORD *)v88 - 10);
            *((_QWORD *)v88 - 11) = 0;
            *((_QWORD *)v88 - 10) = 0;
            *((_QWORD *)v88 - 12) = 0;
            *(_DWORD *)(v87 - 72) = *((_DWORD *)v88 - 18);
            v90 = *((_OWORD *)v88 - 4);
            *(_QWORD *)(v87 - 48) = *((_QWORD *)v88 - 6);
            *(_OWORD *)(v87 - 64) = v90;
            *((_QWORD *)v88 - 7) = 0;
            *((_QWORD *)v88 - 6) = 0;
            *((_QWORD *)v88 - 8) = 0;
            v91 = *(_OWORD *)(v88 - 40);
            *(_BYTE *)(v87 - 24) = *(v88 - 24);
            *(_OWORD *)(v87 - 40) = v91;
            *(_OWORD *)(v87 - 16) = *((_OWORD *)v88 - 1);
            v87 = sub_1C6364A58(v87, (uint64_t)v88) + 328;
            v92 = v88 + 184;
            v88 += 328;
          }
          while (v92 != v86);
          v85 = (char *)v703;
          if ((_DWORD)v704)
          {
            v93 = 0;
            v94 = 328 * v704;
            v623 = v94;
            do
            {
              v95 = (void **)&v85[v94];
              sub_1C63640DC((uint64_t)&v85[v94 - 184]);
              if (*((char *)v95 - 225) < 0)
                operator delete(*(v95 - 31));
              p_src = v95 - 35;
              sub_1C50107D8(&p_src);
              p_src = v95 - 39;
              sub_1C4765410(&p_src);
              v85 -= 328;
              v93 += 328;
              v94 = v623;
            }
            while (v623 != v93);
            v85 = (char *)v703;
          }
        }
        v96 = (int)__src;
        if (v85 != v705)
          free(v85);
        v97 = &v26[328 * v618];
        if (v619)
          v27 = (void **)&v26[328 * v618];
        else
          v27 = v683;
        v39 = (__int128 *)(v97 + 104);
        v703 = v26;
        HIDWORD(v704) = v96;
        if (!v619)
          v39 = &v693;
        p_p = (__int128 *)(v97 + 80);
        if (!v619)
          p_p = &__p;
        v36 = v97 + 72;
        if (!v619)
          v36 = v654;
        v34 = (uint64_t *)(v97 + 48);
        v37 = (void **)(v97 + 64);
        if (!v619)
          v37 = v653;
        v35 = (uint64_t *)(v97 + 56);
        v33 = &v686;
        if (v619)
        {
          v33 = v97 + 40;
          v32 = (uint64_t *)(v97 + 32);
        }
        else
        {
          v35 = v651;
          v34 = &v687;
          v32 = &v685;
        }
        if (v619)
          v28 = v97 + 24;
        else
          v28 = (_QWORD *)&v684 + 1;
        if (v619)
          v31 = (__int128 *)(v97 + 16);
        else
          v31 = &v684;
        v21 = v655;
        if (v619)
          v30 = (uint64_t)(v97 + 144);
        else
          v30 = (uint64_t)v655;
        v29 = (uint64_t *)(v97 + 128);
        if (!v619)
          v29 = &v695;
        v25 = v704;
        v18 = v625;
      }
      else
      {
        v27 = v683;
        v29 = &v695;
        v28 = (_QWORD *)&v684 + 1;
        v30 = (uint64_t)v21;
        v31 = &v684;
        v32 = &v685;
        v33 = &v686;
        v34 = &v687;
        v35 = v651;
        v37 = v653;
        v36 = v654;
        p_p = &__p;
        v39 = &v693;
      }
      v40 = &v26[328 * v25];
      v41 = *v27;
      *(_QWORD *)(v40 + 6) = *(void **)((char *)v27 + 6);
      *(_QWORD *)v40 = v41;
      *((_QWORD *)v40 + 3) = 0;
      *((_QWORD *)v40 + 4) = 0;
      *((_QWORD *)v40 + 2) = 0;
      *((_QWORD *)v40 + 2) = *(_QWORD *)v31;
      *((_QWORD *)v40 + 3) = *v28;
      *((_QWORD *)v40 + 4) = *v32;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      *(_QWORD *)v31 = 0;
      v40[40] = *v33;
      *((_QWORD *)v40 + 7) = 0;
      *((_QWORD *)v40 + 8) = 0;
      *((_QWORD *)v40 + 6) = 0;
      *((_QWORD *)v40 + 6) = *v34;
      *((_QWORD *)v40 + 7) = *v35;
      *((_QWORD *)v40 + 8) = *v37;
      *v34 = 0;
      v34[1] = 0;
      v34[2] = 0;
      *((_DWORD *)v40 + 18) = *v36;
      v42 = *p_p;
      *((_QWORD *)v40 + 12) = *((_QWORD *)p_p + 2);
      *((_OWORD *)v40 + 5) = v42;
      *((_QWORD *)p_p + 1) = 0;
      *((_QWORD *)p_p + 2) = 0;
      *(_QWORD *)p_p = 0;
      v43 = *v39;
      v40[120] = *((_BYTE *)v39 + 16);
      *(_OWORD *)(v40 + 104) = v43;
      *((_OWORD *)v40 + 8) = *(_OWORD *)v29;
      sub_1C6364A58((uint64_t)(v40 + 144), v30);
      LODWORD(v704) = v704 + 1;
      sub_1C63640DC((uint64_t)v21);
      if (SHIBYTE(v692) < 0)
        operator delete((void *)__p);
      p_src = (void **)&v687;
      sub_1C50107D8(&p_src);
      p_src = (void **)&v684;
      sub_1C4765410(&p_src);
      v44 = (char *)v703 + 328 * v704;
      v45 = *((_DWORD *)v44 - 82);
      if (v45 == 1)
      {
        if (*(v44 - 315))
        {
LABEL_62:
          v65 = *(unsigned __int8 **)(v630 - 32 * (*(_DWORD *)(v630 + 20) & 0x7FFFFFF) + 32 * v629);
          *((_QWORD *)v44 - 27) = v65;
          v66 = v652;
          *((_QWORD *)v44 - 25) = sub_1C635FDC4((uint64_t)v652, v65);
          *((_DWORD *)v44 - 48) = v67;
          ParamElementType = llvm::AttributeList::getParamElementType(v628, v629);
          v69 = *((_QWORD *)v44 - 27);
          if (!v69)
          {
            v73 = 1;
            goto LABEL_77;
          }
          v70 = v66[104];
          v71 = *(_QWORD *)(**(_QWORD **)(v70 + 40) + 40);
          v72 = v71 + 272;
          if (*(_BYTE *)(v69 + 16) == 22)
          {
            v73 = (*((uint64_t (**)(void **, uint64_t, _QWORD))*v657 + 4))(v657, v71 + 272, *(unsigned int *)(v71 + 284));
LABEL_77:
            v78 = v73;
            if ((v73 & 0xFE) == 0)
              v78 = 1;
            *(v44 - 208) = v78;
            ++v629;
            goto LABEL_26;
          }
          v74 = v18;
          v75 = *(_QWORD *)v69;
          if (*(v44 - 315))
            v76 = ParamElementType;
          else
            v76 = v75;
          v77 = *(_DWORD *)(v76 + 8);
          if (v77 == 16 && v76 && *(_DWORD *)(v76 + 12) == 1)
          {
            v76 = **(_QWORD **)(v76 + 16);
            v77 = *(_DWORD *)(v76 + 8);
          }
          if ((v77 & 0xFE) != 0x12)
          {
            if (v77 > 0x15u)
              goto LABEL_89;
            if (((1 << v77) & 0x20AC7F) != 0)
              goto LABEL_76;
            if (((1 << v77) & 0x30000) == 0)
            {
LABEL_89:
              if (v77 != 21)
                goto LABEL_76;
            }
            v622 = *(_QWORD **)(v70 + 56);
            if (!llvm::Type::isSizedDerivedType(v76, 0))
              goto LABEL_76;
            sub_1C4768AD0(v72, v76);
            if ((_DWORD)v80 == 1)
            {
              v621 = v79;
              v79 = v621;
            }
            if (((v79 - 1) > 0x3F || ((1 << (v79 - 1)) & 0x8000000080008081) == 0)
              && v79 != 128)
            {
              goto LABEL_76;
            }
            LODWORD(v683[0]) = v79;
            if (v79 <= 63)
            {
              if (v79 <= 31)
              {
                switch(v79)
                {
                  case 16:
                    v76 = *v622 + 1936;
                    goto LABEL_76;
                  case 8:
                    v76 = *v622 + 1912;
                    goto LABEL_76;
                  case 1:
                    v76 = *v622 + 1888;
                    goto LABEL_76;
                }
              }
              else if (v79 == 32)
              {
                v76 = *v622 + 1960;
                goto LABEL_76;
              }
            }
            else
            {
              if (v79 == 64)
              {
                v76 = *v622 + 1984;
                goto LABEL_76;
              }
              if (v79 == 128)
              {
                v76 = *v622 + 2008;
                goto LABEL_76;
              }
            }
            v98 = sub_1C5270984(*v622 + 2168, v683);
            v76 = *((_QWORD *)v98 + 1);
            if (!v76)
            {
              v620 = v98;
              v76 = sub_1C484358C(*v622 + 2040, 24, 3);
              v99 = (int)v683[0];
              *(_QWORD *)v76 = v622;
              *(_QWORD *)(v76 + 16) = 0;
              *(_DWORD *)(v76 + 8) = (v99 << 8) | 0xD;
              *(_DWORD *)(v76 + 12) = 0;
              *((_QWORD *)v620 + 1) = v76;
            }
          }
LABEL_76:
          v73 = (*((uint64_t (**)(void **, uint64_t, unint64_t, uint64_t))*v657 + 71))(v657, v72, v76, 1);
          v18 = v74;
          goto LABEL_77;
        }
        v46 = *(_QWORD *)v630;
        v47 = *(_QWORD *)(**(_QWORD **)(v652[104] + 40) + 40) + 272;
        if (*(_QWORD *)v630 && *(_BYTE *)(v46 + 8) == 16)
          v48 = sub_1C47A7FD0((uint64_t)v657, v47, *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8 * v20), 0);
        else
          v48 = (*((uint64_t (**)(void **, uint64_t))*v657 + 71))(v657, v47);
        *(v44 - 208) = v48;
        ++v20;
      }
      else
      {
        if (!v45)
          goto LABEL_62;
        *(v44 - 208) = 1;
      }
LABEL_26:
      if (v656 || *(v44 - 315))
      {
        v656 = 1;
      }
      else
      {
        v57 = (uint64_t *)*((_QWORD *)v44 - 39);
        v56 = (uint64_t *)*((_QWORD *)v44 - 38);
        if (v57 == v56)
        {
          v656 = 0;
        }
        else
        {
          do
          {
            v58 = *((_BYTE *)v57 + 23);
            v59 = v58 < 0;
            if (v58 >= 0)
              v60 = v57;
            else
              v60 = (uint64_t *)*v57;
            v61 = v58 & 0x7F;
            if (v59)
              v62 = v57[1];
            else
              v62 = v61;
            v63 = (*((uint64_t (**)(void **, uint64_t *, uint64_t))*v657 + 255))(v657, v60, v62);
            v57 += 3;
          }
          while (v63 != 2 && v57 != v56);
          v656 = v63 == 2;
        }
      }
      (*((void (**)(void **, int *, _QWORD, _QWORD, _QWORD))*v657 + 254))(v657, v19, 0, 0, 0);
      v49 = v19[26];
      v50 = v49 == 2 || v49 == 5;
      v21 = v655;
      if (v50)
      {
        v51 = *v19;
        v52 = v18 | 0x10;
        v53 = v18 | 8;
        if (*v19)
          v53 = v18;
        if (v51 != 1)
          v52 = v53;
        if (v51 == 2)
          v18 = v18 | 0x18;
        else
          v18 = v52;
      }
      else if (v49 == 4)
      {
        v54 = *((_QWORD *)v44 - 25);
        if (v54)
        {
          v55 = *(unsigned __int16 *)(v54 + 24);
          if (v55 != 11 && v55 != 35)
          {
            p_src = (void **)"constraint '";
            v708[0] = v19 + 20;
            LOWORD(v709) = 1027;
            v683[0] = &p_src;
            *(_QWORD *)&v684 = "' expects an integer constant expression";
            LOWORD(v685) = 770;
            sub_1C5D34A4C(v652, (const llvm::Instruction *)v630, (const llvm::Twine *)v683);
            goto LABEL_696;
          }
        }
      }
      v19 += 32;
    }
    while (v19 != v631);
  }
  *(_QWORD *)&v668 = 0;
  DWORD2(v668) = 0;
  v100 = v652;
  if (v656)
  {
    *(_QWORD *)&v667 = sub_1C635C370((uint64_t)v652);
    *((_QWORD *)&v667 + 1) = v101;
  }
  else
  {
    v667 = *(_OWORD *)(v652[104] + 192);
  }
  v102 = v657;
  v103 = *(unsigned __int8 *)(v630 + 16);
  v104 = v103 == 33 && v627[88] != 0;
  if (v103 == 39 || v104)
  {
    sub_1C612E234((unsigned int *)v652 + 96, (_BYTE *)v652[84], (_BYTE *)(v652[84] + 16 * *((unsigned int *)v652 + 170)));
    *((_DWORD *)v652 + 170) = 0;
    *(_QWORD *)&v667 = sub_1C5D14AF0(v100, (uint64_t)(v100 + 48));
    DWORD2(v667) = v105;
  }
  v626 = v18;
  LODWORD(v651) = v103;
  v666 = 0;
  v650 = v104;
  if (v104)
  {
    *(_QWORD *)&v667 = sub_1C63635B4(v100, v667, SDWORD2(v667), v624, (uint64_t *)&v666);
    DWORD2(v667) = v106;
  }
  if ((_DWORD)v704)
  {
    v119 = 0;
    v120 = v703;
    v121 = 328 * v704;
    do
    {
      v122 = &v120[v119];
      v123 = *(_DWORD *)&v120[v119 + 8];
      if (v123 != -1)
      {
        v124 = (char *)v703 + 328 * v123;
        if (v122[120] != v124[120])
        {
          v125 = v100[104];
          v126 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v125 + 40) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v125 + 40) + 16));
          v127 = *(_QWORD *)(v125 + 24);
          v128 = v120[v119 + 103];
          if (v128 >= 0)
            v129 = (uint64_t)&v120[v119 + 80];
          else
            v129 = *(_QWORD *)&v120[v119 + 80];
          if (v128 >= 0)
            v130 = v128 & 0x7F;
          else
            v130 = *(_QWORD *)&v120[v119 + 88];
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v127 + 2048))(*(_QWORD *)(v125 + 24), v126, v129, v130, v122[120]);
          v132 = v131;
          v133 = v124[103];
          v134 = v133;
          if (v133 >= 0)
            v135 = v124 + 80;
          else
            v135 = (char *)*((_QWORD *)v124 + 10);
          v136 = v133 & 0x7F;
          if (v134 >= 0)
            v137 = v136;
          else
            v137 = *((_QWORD *)v124 + 11);
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)v127 + 2048))(v127, v126, v135, v137, v124[120]);
          v139 = v122[120];
          v140 = (v139 - 15) < 0x3C || (v139 - 120) < 0x20;
          v141 = (v139 - 2) < 6 || v140;
          v142 = v124[120];
          v143 = v142 - 2;
          v144 = v142 - 15;
          v145 = (v142 - 120) < 0x20;
          if (v144 < 0x3C)
            v145 = 1;
          if (v143 < 6)
            v145 = 1;
          if (v141 != v145 || v132 != v138)
            llvm::report_fatal_error((llvm *)"Unsupported asm: input constraint with a matching output constraint of incompatible type!", (const char *)1);
          v124[120] = v139;
        }
      }
      (*((void (**)(void **, _BYTE *, _QWORD, _QWORD, uint64_t))*v102 + 254))(v102, &v120[v119], *((_QWORD *)v122 + 16), *((_QWORD *)v122 + 17), v100[104]);
      if (*((_DWORD *)v122 + 26) == 2 && *(_DWORD *)v122 != 2 && !v120[v119 + 13])
      {
        v654 = (char *)*((_QWORD *)&v667 + 1);
        v655 = (__int128 *)v667;
        v146 = *v100;
        v147 = *((_DWORD *)v100 + 204);
        __src = 0;
        LODWORD(v679) = v147;
        if (v146)
        {
          v148 = (void **)(v146 + 48);
          if (v148 != &__src)
          {
            v149 = *v148;
            __src = v149;
            if (v149)
              llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v149, 2);
          }
        }
        v150 = v100[104];
        v151 = *(_QWORD *)(v150 + 24);
        v653 = (void **)&v120[v119];
        v152 = *(_QWORD *)&v120[v119 + 112];
        v153 = *(unsigned __int8 *)(v152 + 16);
        if ((v153 - 15) < 3 || v153 == 10)
        {
          v155 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v151 + 32))(v151, *(_QWORD *)(**(_QWORD **)(v150 + 40) + 40) + 272, 0);
          v156 = sub_1C5D40C8C(v150, (uint64_t *)v152, (llvm *)v155, 0, 0, 0, 0, 0);
          v158 = v157;
          v160 = (int)v654;
          v159 = v655;
        }
        else
        {
          v161 = *(_QWORD *)v152;
          v642 = *(_QWORD *)(**(_QWORD **)(v150 + 40) + 40);
          v162 = v642 + 272;
          sub_1C4768AD0(v642 + 272, v161);
          v645 = v163;
          v638 = v164 == 1;
          llvm::DataLayout::getAlignment(v642 + 272, v161);
          if (v638)
          {
            v641 = v165;
            v165 = v641;
          }
          v639 = ((1 << v165) + ((unint64_t)(v645 + 7) >> 3) - 1) & -(1 << v165);
          v634 = *(_QWORD *)(v150 + 40);
          v636 = *(unsigned __int8 **)(v634 + 56);
          v646 = v161;
          llvm::DataLayout::getAlignment(v162, v161);
          StackObject = llvm::MachineFrameInfo::CreateStackObject(v636, v639, v167, 0, 0, 0);
          v168 = *(unsigned int *)(v642 + 276);
          v643 = v642 + 272;
          v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v151 + 32))(v151, v162, v168);
          v156 = sub_1C5D406AC(v150, StackObject, (llvm *)v169, 0, 0);
          v158 = v170;
          v637 = *((_QWORD *)v122 + 17);
          v640 = *((_QWORD *)v122 + 16);
          FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v634 + 432), StackObject);
          if (FixedStack)
            v635 = *((_DWORD *)FixedStack + 3);
          else
            v635 = 0;
          v633 = (void **)((unint64_t)FixedStack | 4);
          v647 = sub_1C5065E80(v151, v643, v646, 0);
          v173 = v172;
          *(_OWORD *)v683 = 0u;
          v684 = 0u;
          p_src = v633;
          v707 = 0;
          LODWORD(v708[0]) = v635;
          BYTE4(v708[0]) = 0;
          sub_1C6365BD8(v150, v647, v172);
          v159 = sub_1C636B9CC(v150, (uint64_t)v655, (int)v654, (uint64_t)&__src, v640, v637, v156, v158, (uint64_t)&p_src, v647, v173, v174, 0, 0, (uint64_t)v683);
          v160 = v175;
        }
        *((_QWORD *)v122 + 16) = v156;
        *((_DWORD *)v122 + 34) = v158;
        *(_QWORD *)&v667 = v159;
        DWORD2(v667) = v160;
        v102 = v657;
        if (__src)
          llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
        v100 = v652;
        v653[14] = 0;
        v120[v119 + 13] = 1;
      }
      v119 += 328;
    }
    while (v121 != v119);
  }
  v107 = (char *)operator new(0x10uLL);
  *(_QWORD *)v107 = 0;
  *((_QWORD *)v107 + 1) = 0;
  v664 = v107 + 16;
  v665 = v107 + 16;
  v663 = v107;
  v108 = v100[104];
  v109 = v627 + 24;
  if (v627[47] < 0)
    v109 = *(char **)v109;
  v110 = *(_QWORD *)(**(_QWORD **)(v108 + 40) + 40);
  v111 = (*((uint64_t (**)(void **, uint64_t, _QWORD))*v102 + 4))(v102, v110 + 272, *(unsigned int *)(v110 + 284));
  v112 = sub_1C5D41764(v108, v109, v111, 0, 0);
  v114 = v112;
  v115 = v113;
  v116 = v664;
  if (v664 >= v665)
  {
    v176 = v663;
    v177 = (v664 - (_BYTE *)v663) >> 4;
    v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 60)
      goto LABEL_826;
    v179 = v665 - (_BYTE *)v663;
    if ((v665 - (_BYTE *)v663) >> 3 > v178)
      v178 = v179 >> 3;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0)
      v180 = 0xFFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
    {
      if (v180 >> 60)
        goto LABEL_827;
      v181 = (char *)operator new(16 * v180);
    }
    else
    {
      v181 = 0;
    }
    v182 = (uint64_t *)&v181[16 * v177];
    *v182 = v114;
    v182[1] = v115;
    v117 = (char *)(v182 + 2);
    if (v116 == v176)
    {
      v118 = v630;
    }
    else
    {
      v118 = v630;
      do
      {
        v183 = *((_QWORD *)v116 - 2);
        v116 -= 4;
        v184 = v116[2];
        *(v182 - 2) = v183;
        v182 -= 2;
        *((_DWORD *)v182 + 2) = v184;
      }
      while (v116 != v176);
      v116 = v663;
    }
    v663 = v182;
    v664 = v117;
    v665 = &v181[16 * v180];
    if (v116)
      operator delete(v116);
  }
  else
  {
    *(_QWORD *)v664 = v112;
    *((_QWORD *)v116 + 1) = v113;
    v117 = (char *)(v116 + 4);
    v118 = v630;
  }
  v664 = v117;
  if (*(_QWORD *)(v118 + 48) || (*(_BYTE *)(v118 + 23) & 0x20) != 0)
    MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)v118, "srcloc", 6uLL);
  else
    MetadataImpl = 0;
  v186 = sub_1C5D438A8(v100[104], MetadataImpl);
  v188 = v186;
  v189 = v187;
  v190 = v664;
  if (v664 >= v665)
  {
    v193 = v663;
    v194 = (v664 - (_BYTE *)v663) >> 4;
    v195 = v194 + 1;
    if ((unint64_t)(v194 + 1) >> 60)
      goto LABEL_826;
    v196 = v665 - (_BYTE *)v663;
    if ((v665 - (_BYTE *)v663) >> 3 > v195)
      v195 = v196 >> 3;
    if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0)
      v197 = 0xFFFFFFFFFFFFFFFLL;
    else
      v197 = v195;
    if (v197)
    {
      if (v197 >> 60)
        goto LABEL_827;
      v198 = (char *)operator new(16 * v197);
    }
    else
    {
      v198 = 0;
    }
    v199 = (unint64_t *)&v198[16 * v194];
    *v199 = v188;
    v199[1] = v189;
    v191 = (char *)(v199 + 2);
    if (v190 == v193)
    {
      v192 = v626;
    }
    else
    {
      v192 = v626;
      do
      {
        v200 = *((_QWORD *)v190 - 2);
        v190 -= 4;
        v201 = v190[2];
        *(v199 - 2) = v200;
        v199 -= 2;
        *((_DWORD *)v199 + 2) = v201;
      }
      while (v190 != v193);
      v190 = v663;
    }
    v663 = v199;
    v664 = v191;
    v665 = &v198[16 * v197];
    if (v190)
      operator delete(v190);
  }
  else
  {
    *(_QWORD *)v664 = v186;
    *((_QWORD *)v190 + 1) = v187;
    v191 = (char *)(v190 + 4);
    v192 = v626;
  }
  v664 = v191;
  v202 = v100[104];
  v203 = *v100;
  v204 = *((_DWORD *)v100 + 204);
  v683[0] = 0;
  LODWORD(v683[1]) = v204;
  v205 = v202;
  if (v203)
  {
    v206 = (void **)(v203 + 48);
    v205 = v202;
    if (v206 != v683)
    {
      v207 = *v206;
      v683[0] = v207;
      v205 = v202;
      if (v207)
      {
        llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v207, 2);
        v205 = v100[104];
      }
    }
  }
  v208 = (*((uint64_t (**)(void **, uint64_t, _QWORD))*v102 + 4))(v102, *(_QWORD *)(**(_QWORD **)(v205 + 40) + 40) + 272, 0);
  v209 = sub_1C6366AB4(v202, v192, (const llvm::APInt *)v683, (llvm *)v208, 0, 1, 0);
  v211 = v209;
  v212 = v210;
  v213 = v664;
  if (v664 >= v665)
  {
    v216 = v663;
    v217 = (v664 - (_BYTE *)v663) >> 4;
    v218 = v217 + 1;
    if ((unint64_t)(v217 + 1) >> 60)
      goto LABEL_826;
    v219 = v665 - (_BYTE *)v663;
    if ((v665 - (_BYTE *)v663) >> 3 > v218)
      v218 = v219 >> 3;
    if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF0)
      v220 = 0xFFFFFFFFFFFFFFFLL;
    else
      v220 = v218;
    if (v220)
    {
      if (v220 >> 60)
        goto LABEL_827;
      v221 = (char *)operator new(16 * v220);
    }
    else
    {
      v221 = 0;
    }
    v222 = &v221[16 * v217];
    *(_QWORD *)v222 = v211;
    *((_QWORD *)v222 + 1) = v212;
    v214 = v222 + 16;
    if (v213 == v216)
    {
      v215 = (const llvm::InvokeInst *)v630;
    }
    else
    {
      v215 = (const llvm::InvokeInst *)v630;
      do
      {
        v223 = *((_QWORD *)v213 - 2);
        v213 -= 4;
        v224 = v213[2];
        *((_QWORD *)v222 - 2) = v223;
        v222 -= 16;
        *((_DWORD *)v222 + 2) = v224;
      }
      while (v213 != v216);
      v213 = v663;
    }
    v663 = v222;
    v664 = v214;
    v665 = &v221[16 * v220];
    if (v213)
      operator delete(v213);
  }
  else
  {
    *(_QWORD *)v664 = v209;
    *((_QWORD *)v213 + 1) = v210;
    v214 = (char *)(v213 + 4);
    v215 = (const llvm::InvokeInst *)v630;
  }
  v664 = v214;
  if (v683[0])
    llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
  if (!(_DWORD)v704)
  {
LABEL_680:
    v507 = v663;
    v508 = v667;
    *((_DWORD *)v663 + 2) = DWORD2(v667);
    *v507 = v508;
    v509 = (int)v651;
    if (!(_QWORD)v668)
    {
LABEL_722:
      if (v509 == 39)
        v526 = 262;
      else
        v526 = 261;
      v527 = v100[104];
      v528 = *v100;
      v529 = *((_DWORD *)v100 + 204);
      v683[0] = 0;
      LODWORD(v683[1]) = v529;
      v530 = v527;
      if (v528)
      {
        v531 = (void **)(v528 + 48);
        v530 = v527;
        if (v531 != v683)
        {
          v532 = *v531;
          v683[0] = v532;
          v530 = v527;
          if (v532)
          {
            llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v532, 2);
            v530 = v100[104];
          }
        }
      }
      v534 = sub_1C636A8B4(v530, 1, 0, 172, 0);
      v535 = *(_QWORD *)(v527 + 832);
      if (v535)
        v536 = *(_WORD *)(v535 + 8);
      else
        v536 = 0;
      v537 = v657;
      v538 = sub_1C636D410(v527, (const char *)v526, (const llvm::APInt *)v683, v534, v533, (uint64_t *)v663, (v664 - (_BYTE *)v663) >> 4, v536);
      *(_QWORD *)&v667 = v538;
      DWORD2(v667) = v539;
      if (v683[0])
      {
        llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
        v538 = (uint64_t *)v667;
      }
      *(_QWORD *)&v668 = v538;
      DWORD2(v668) = 1;
      v540 = (void **)v680;
      __src = v680;
      v679 = 0x100000000;
      v541 = v676;
      v674 = v676;
      v675 = 0x100000000;
      v542 = (uint64_t)&v684;
      v683[0] = &v684;
      v683[1] = (void *)0x800000000;
      v543 = *(_QWORD *)v215;
      v662 = v543;
      v544 = *(unsigned __int8 *)(v543 + 8);
      if (v543 && v544 == 16)
      {
        v545 = *(uint64_t **)(v543 + 16);
      }
      else
      {
        v545 = &v662;
        if (v544 == 7)
          v545 = 0;
      }
      v661 = v545;
      p_src = v657;
      v707 = (uint64_t)v100;
      v708[0] = &v661;
      v708[1] = &__src;
      v709 = &v674;
      if (!(_DWORD)v704)
      {
LABEL_783:
        v587 = v683[1];
        if (LODWORD(v683[1]))
        {
          v588 = v100[104];
          v589 = *v100;
          v590 = *((_DWORD *)v100 + 204);
          *(_QWORD *)&v658[0] = 0;
          DWORD2(v658[0]) = v590;
          if (v589)
          {
            v591 = (_OWORD *)(v589 + 48);
            if (v591 != v658)
            {
              v592 = *(unsigned __int8 **)v591;
              *(_QWORD *)&v658[0] = v592;
              if (v592)
              {
                llvm::MetadataTracking::track((uint64_t)v658, v592, 2);
                v587 = v683[1];
              }
            }
          }
          v593 = v587;
          v594 = *(_QWORD *)(v588 + 832);
          if (v594)
            v595 = *(unsigned __int16 *)(v594 + 8);
          else
            v595 = 0;
          *(_QWORD *)&v667 = sub_1C636D0C8(v588, (const char *)2, (const llvm::APInt *)v658, (llvm *)1, 0, (uint64_t *)v683[0], v593, v595);
          DWORD2(v667) = v596;
          if (*(_QWORD *)&v658[0])
            llvm::MetadataTracking::untrack((uint64_t)v658, *(unsigned __int8 **)&v658[0]);
        }
        if (v650)
        {
          *(_QWORD *)&v667 = sub_1C636370C(v100, v667, SDWORD2(v667), v215, v624, v666);
          DWORD2(v667) = v603;
        }
        v597 = v656;
        if (!(_DWORD)v675)
          v597 = 1;
        if ((v597 & 1) != 0
          || (v509 != 39 ? (v598 = LODWORD(v683[1]) == 0) : (v598 = 0), !v598 ? (v599 = 1) : (v599 = v650), v599 == 1))
        {
          v600 = v100[104];
          v601 = DWORD2(v667);
          *(_QWORD *)(v600 + 192) = v667;
          *(_DWORD *)(v600 + 200) = v601;
        }
        if (v683[0] != (void *)v542)
          free(v683[0]);
        if (v674 != v541)
          free(v674);
        if (__src != v540)
          free(__src);
        goto LABEL_694;
      }
      v654 = (char *)v676;
      v655 = &v684;
      v546 = (char *)v703;
      v547 = (char *)v703 + 328 * v704;
      while (1)
      {
        if (*(_DWORD *)v546 == 1)
        {
          v542 &= 0xFFFFFFFF00000000;
          if (*((_DWORD *)v546 + 66))
            break;
        }
LABEL_765:
        v546 += 328;
        if (v546 == v547)
        {
          v215 = (const llvm::InvokeInst *)v630;
          v541 = v654;
          v542 = (uint64_t)v655;
          if ((_DWORD)v675)
          {
            v604 = v100[104];
            v605 = *v100;
            v606 = *((_DWORD *)v100 + 204);
            *(_QWORD *)&v658[0] = 0;
            DWORD2(v658[0]) = v606;
            v607 = v604;
            if (v605)
            {
              v608 = (_OWORD *)(v605 + 48);
              v607 = v604;
              if (v608 != v658)
              {
                v609 = *(unsigned __int8 **)v608;
                *(_QWORD *)&v658[0] = v609;
                v607 = v604;
                if (v609)
                {
                  llvm::MetadataTracking::track((uint64_t)v658, v609, 2);
                  v607 = v100[104];
                }
              }
            }
            v611 = sub_1C636AB20(v607, (uint64_t *)__src, v679);
            v612 = *(_QWORD *)(v604 + 832);
            if (v612)
              v613 = *(_WORD *)(v612 + 8);
            else
              v613 = 0;
            v614 = sub_1C636D410(v604, (const char *)0x37, (const llvm::APInt *)v658, v611, v610, (uint64_t *)v674, v675, v613);
            v616 = v615;
            if (*(_QWORD *)&v658[0])
              llvm::MetadataTracking::untrack((uint64_t)v658, *(unsigned __int8 **)&v658[0]);
            *(_QWORD *)&v658[0] = v630;
            v617 = sub_1C6364290(v100 + 1, v658);
            v617[1] = v614;
            *((_DWORD *)v617 + 4) = v616;
          }
          goto LABEL_783;
        }
      }
      v548 = *((_DWORD *)v546 + 26);
      if (v548 - 4 < 2)
      {
        v557 = *v100;
        v558 = *((_DWORD *)v100 + 204);
        *(_QWORD *)&v658[0] = 0;
        DWORD2(v658[0]) = v558;
        if (v557)
        {
          v559 = (_OWORD *)(v557 + 48);
          if (v559 != v658)
          {
            v560 = *(unsigned __int8 **)v559;
            *(_QWORD *)&v658[0] = v560;
            if (v560)
              llvm::MetadataTracking::track((uint64_t)v658, v560, 2);
          }
        }
        v555 = (uint64_t *)(*((uint64_t (**)(void **, __int128 *, __int128 *, _OWORD *, char *, uint64_t))*v537
                           + 260))(v537, &v667, &v668, v658, v546, v100[104]);
      }
      else
      {
        if (v548 > 1)
        {
          v561 = 0;
LABEL_758:
          if (v546[13])
          {
            v653 = v540;
            v568 = (unsigned __int8 *)*((_QWORD *)v546 + 14);
            v569 = v100[104];
            v649 = v667;
            v570 = v100;
            v571 = DWORD2(v667);
            v572 = *v570;
            LODWORD(v570) = *((_DWORD *)v570 + 204);
            v659 = 0;
            v660 = (int)v570;
            if (v572)
            {
              v573 = (unsigned __int8 **)(v572 + 48);
              if (v573 != &v659)
              {
                v574 = *v573;
                v659 = v574;
                if (v574)
                  llvm::MetadataTracking::track((uint64_t)&v659, v574, 2);
              }
            }
            v575 = sub_1C635FDC4((uint64_t)v652, v568);
            v577 = v576;
            if (v568)
            {
              v579 = *(_DWORD *)(*(_QWORD *)v568 + 8);
              if ((v579 & 0xFE) == 0x12)
                v579 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v568 + 16) + 8);
              v578 = v579 >> 8;
            }
            else
            {
              v578 = 0;
            }
            memset(v658, 0, sizeof(v658));
            v671[0] = (unint64_t)v568 & 0xFFFFFFFFFFFFFFFBLL;
            v671[1] = 0;
            v672 = v578;
            v673 = 0;
            v580 = (uint64_t *)(*(_QWORD *)(v561 + 40) + 16 * v542);
            sub_1C6365BD8(v569, *v580, v580[1]);
            v582 = sub_1C636B75C(v569, v649, v571, (uint64_t)&v659, v561, v542, (uint64_t)v575, v577, (uint64_t)v671, v581, 0, 0, (uint64_t)v658);
            v584 = v583;
            if (v659)
              llvm::MetadataTracking::untrack((uint64_t)&v659, v659);
            v585 = LODWORD(v683[1]);
            v100 = v652;
            v540 = v653;
            v537 = v657;
            v509 = (int)v651;
            if (LODWORD(v683[1]) >= (unint64_t)HIDWORD(v683[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v683, (uint64_t)v655, LODWORD(v683[1]) + 1, 16);
              v585 = LODWORD(v683[1]);
            }
            v586 = (char *)v683[0] + 16 * v585;
            *v586 = v582;
            v586[1] = v584;
            ++LODWORD(v683[1]);
          }
          else if (*(_WORD *)(v561 + 24) == 55)
          {
            v563 = *(unsigned __int16 *)(v561 + 56);
            if (*(_WORD *)(v561 + 56))
            {
              v564 = *(uint64_t **)(v561 + 32);
              v565 = &v564[5 * v563];
              do
              {
                v566 = *v564;
                v567 = v564[1];
                v564 += 5;
                sub_1C5D34C50((uint64_t)&p_src, v566, v567);
              }
              while (v564 != v565);
            }
          }
          else
          {
            sub_1C5D34C50((uint64_t)&p_src, v561, v542);
          }
          goto LABEL_765;
        }
        v549 = (_QWORD *)v100[104];
        v550 = v100[114];
        v551 = *v100;
        v552 = *((_DWORD *)v100 + 204);
        *(_QWORD *)&v658[0] = 0;
        DWORD2(v658[0]) = v552;
        if (v551)
        {
          v553 = (_OWORD *)(v551 + 48);
          if (v553 != v658)
          {
            v554 = *(unsigned __int8 **)v553;
            *(_QWORD *)&v658[0] = v554;
            if (v554)
              llvm::MetadataTracking::track((uint64_t)v658, v554, 2);
          }
        }
        v555 = sub_1C5D10D34((uint64_t)(v546 + 144), v549, v550, (const llvm::APInt *)v658, (uint64_t *)&v667, (uint64_t *)&v668, (unsigned __int8 *)v630);
      }
      v561 = (uint64_t)v555;
      v562 = v556;
      if (*(_QWORD *)&v658[0])
        llvm::MetadataTracking::untrack((uint64_t)v658, *(unsigned __int8 **)&v658[0]);
      v542 = v562 | (unint64_t)v542;
      goto LABEL_758;
    }
    v510 = v664;
    if (v664 < v665)
    {
      *(_OWORD *)v664 = v668;
      v511 = (char *)(v510 + 4);
LABEL_721:
      v664 = v511;
      goto LABEL_722;
    }
    v517 = v663;
    v518 = (v664 - (_BYTE *)v663) >> 4;
    v519 = v518 + 1;
    if (!((unint64_t)(v518 + 1) >> 60))
    {
      v520 = v665 - (_BYTE *)v663;
      if ((v665 - (_BYTE *)v663) >> 3 > v519)
        v519 = v520 >> 3;
      if ((unint64_t)v520 >= 0x7FFFFFFFFFFFFFF0)
        v521 = 0xFFFFFFFFFFFFFFFLL;
      else
        v521 = v519;
      if (!v521)
      {
        v522 = 0;
LABEL_716:
        v523 = &v522[16 * v518];
        *(_OWORD *)v523 = v668;
        v511 = v523 + 16;
        if (v510 != v517)
        {
          do
          {
            v524 = *((_QWORD *)v510 - 2);
            v510 -= 4;
            v525 = v510[2];
            *((_QWORD *)v523 - 2) = v524;
            v523 -= 16;
            *((_DWORD *)v523 + 2) = v525;
          }
          while (v510 != v517);
          v510 = v663;
        }
        v663 = v523;
        v664 = v511;
        v665 = &v522[16 * v521];
        if (v510)
          operator delete(v510);
        goto LABEL_721;
      }
      if (!(v521 >> 60))
      {
        v522 = (char *)operator new(16 * v521);
        goto LABEL_716;
      }
LABEL_827:
      sub_1C4764EE4();
    }
LABEL_826:
    abort();
  }
  v225 = (char *)v703;
  v654 = (char *)v703 + 328 * v704;
  v226 = (void **)v708;
  v653 = (void **)v708;
  while (1)
  {
    v227 = v225 + 80;
    if (v225[103] < 0)
    {
      v229 = *(const char **)v227;
      v228 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * **(unsigned __int8 **)v227 + 60);
    }
    else
    {
      v228 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)v227 + 60);
      v229 = v225 + 80;
    }
    v230 = v225;
    if ((v228 & 0x400) != 0)
    {
      v231 = atoi(v229);
      v230 = (char *)v703 + 328 * v231;
    }
    v232 = (_QWORD *)v100[104];
    v233 = *v100;
    v234 = *((_DWORD *)v100 + 204);
    __src = 0;
    LODWORD(v679) = v234;
    if (v233)
    {
      v235 = (void **)(v233 + 48);
      if (v235 != &__src)
      {
        v236 = *v235;
        __src = v236;
        if (v236)
          llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v236, 2);
      }
    }
    v655 = (__int128 *)v232[7];
    v237 = v232[3];
    v238 = v232[5];
    p_src = v226;
    v707 = 0x400000000;
    v239 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v238 + 16) + 176))(*(_QWORD *)(v238 + 16));
    if ((*((_DWORD *)v225 + 26) & 0xFFFFFFFE) == 2)
    {
      v240 = 0;
      LOBYTE(v241) = 0;
      v242 = 0;
LABEL_323:
      v215 = (const llvm::InvokeInst *)v630;
      goto LABEL_367;
    }
    v243 = v239;
    v246 = (char *)*((_QWORD *)v230 + 10);
    v245 = v230 + 80;
    v244 = v246;
    v247 = v245[23];
    v248 = v247;
    if (v247 >= 0)
      v249 = v245;
    else
      v249 = v244;
    v250 = v247 & 0x7F;
    if (v248 >= 0)
      v251 = v250;
    else
      v251 = *((_QWORD *)v245 + 1);
    v252 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)v237 + 2048))(v237, v239, v249, v251, v245[40]);
    if (!v253)
    {
      v240 = 0;
      LOBYTE(v241) = 0;
      v242 = 0;
      v100 = v652;
      goto LABEL_323;
    }
    v241 = v252;
    v254 = v253;
    v255 = *(_BYTE **)(*(_QWORD *)(v243 + 264)
                     + 24
                     * (*((unsigned __int16 *)*v253 + 12)
                      + *(_DWORD *)(v243 + 272)
                      * ((*(_QWORD *)(v243 + 248) - *(_QWORD *)(v243 + 240)) >> 3))
                     + 16);
    v256 = *v255;
    LOBYTE(v674) = *v255;
    v258 = v225 + 120;
    v257 = v225[120];
    if (v257 != 1 && v256 != 174 && *(_DWORD *)v225 <= 1u)
    {
      do
      {
        v261 = *v255++;
        v260 = v261;
      }
      while (v261 != 1 && v260 != v257);
      if (v260 == 1)
      {
        v263 = sub_1C47A8C74((unsigned __int8 *)&v674);
        v644 = v264;
        if (v263 == sub_1C47A8C74((unsigned __int8 *)v225 + 120) && v644 == v265)
        {
          if (!*(_DWORD *)v225 && !v225[13])
          {
            v266 = v232[104];
            if (v266)
              v267 = *(_WORD *)(v266 + 8);
            else
              v267 = 0;
            *((_QWORD *)v225 + 16) = sub_1C5D52060((uint64_t)v232, 216, (const llvm::APInt *)&__src, (llvm *)v674, 0, *((_QWORD *)v225 + 16), *((_QWORD *)v225 + 17), v267);
            *((_DWORD *)v225 + 34) = v273;
          }
          LOBYTE(v272) = (_BYTE)v674;
LABEL_343:
          *v258 = v272;
          goto LABEL_344;
        }
        v268 = v674 - 120 >= 0x20 && v674 - 2 >= 6;
        if (!v268 || v674 - 15 <= 0x3B)
        {
          v269 = *v258;
          if ((*v258 + 104) < 0x13u
            || (v269 - 8) < 7u
            || (v269 - 75) <= 0x2Cu)
          {
            v270 = sub_1C47A8C74((unsigned __int8 *)v225 + 120);
            if ((_DWORD)v271 == 1)
            {
              v648 = v270;
              v270 = v648;
            }
            v272 = 0;
            if (v270 > 31)
            {
              switch(v270)
              {
                case 32:
                  v272 = 5;
                  break;
                case 64:
                  v272 = 6;
                  break;
                case 128:
                  v272 = 7;
                  break;
              }
            }
            else
            {
              switch(v270)
              {
                case 1:
                  v272 = 2;
                  break;
                case 8:
                  v272 = 3;
                  break;
                case 16:
                  v272 = 4;
                  break;
              }
            }
            if (!*(_DWORD *)v225)
            {
              v485 = v232[104];
              if (v485)
                v486 = *(_WORD *)(v485 + 8);
              else
                v486 = 0;
              v487 = (uint64_t)v232;
              v488 = v272;
              v489 = sub_1C5D52060(v487, 216, (const llvm::APInt *)&__src, (llvm *)v272, 0, *((_QWORD *)v225 + 16), *((_QWORD *)v225 + 17), v486);
              LOBYTE(v272) = v488;
              *((_QWORD *)v225 + 16) = v489;
              *((_DWORD *)v225 + 34) = v490;
            }
            goto LABEL_343;
          }
        }
      }
    }
LABEL_344:
    v274 = v225 + 80;
    if (v225[103] < 0)
      v274 = *(const char **)v227;
    v215 = (const llvm::InvokeInst *)v630;
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)v274 + 60) & 0x400) == 0)
    {
      v275 = *v258;
      if (v275 == 1)
        v276 = v674;
      else
        v276 = *v258;
      if (v275 == 1)
        v277 = 1;
      else
        v277 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v237 + 584))(v237, v655);
      v278 = **v254;
      v279 = *(_QWORD *)(v238 + 40);
      if (v241)
      {
        v280 = *((unsigned __int16 *)*v254 + 10);
        v281 = &v278[v280];
        if (!HIWORD(v241))
        {
          if (*((_WORD *)*v254 + 10))
          {
            v282 = 2 * v280;
            v283 = **v254;
            while (*v283 != (unsigned __int16)v241)
            {
              ++v283;
              v282 -= 2;
              if (!v282)
                goto LABEL_363;
            }
            v281 = v283;
          }
          else
          {
            v281 = **v254;
          }
        }
LABEL_363:
        if (v280 == v281 - v278)
        {
          v242 = v241 & 0xFFFFFF00;
          v240 = 1;
LABEL_365:
          v215 = (const llvm::InvokeInst *)v630;
          v226 = v653;
          goto LABEL_366;
        }
        v278 = v281;
      }
      if (v277)
      {
        v372 = (unint64_t)v254 & 0xFFFFFFFFFFFFFFFBLL;
        do
        {
          if (v241)
          {
            IncompleteVirtualRegister = *v278;
          }
          else
          {
            IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v279, "", 0);
            *(_QWORD *)(*(_QWORD *)(v279 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v372;
            v374 = *(_QWORD *)(v279 + 8);
            if (v374)
              (*(void (**)(uint64_t))(*(_QWORD *)v374 + 24))(v374);
          }
          v375 = v707;
          if (v707 >= (unint64_t)HIDWORD(v707))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_src, (uint64_t)v653, v707 + 1, 4);
            v375 = v707;
          }
          *((_DWORD *)p_src + v375) = IncompleteVirtualRegister;
          LODWORD(v707) = v707 + 1;
          ++v278;
          --v277;
        }
        while (v277);
      }
      sub_1C635BC0C((uint64_t)v683, (uint64_t)&p_src, (char)v674, v276, 0);
      sub_1C636414C((uint64_t)(v225 + 144), (uint64_t)v683);
      sub_1C63640DC((uint64_t)v683);
      v240 = 0;
      LOBYTE(v241) = 0;
      v242 = 0;
      goto LABEL_365;
    }
    v240 = 0;
    LOBYTE(v241) = 0;
    v242 = 0;
LABEL_366:
    v100 = v652;
LABEL_367:
    if (p_src != v226)
      free(p_src);
    if (__src)
      llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
    if (v240)
    {
      v498 = *(_QWORD *)(*(_QWORD *)(v100[104] + 40) + 16);
      v499 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v498 + 176))(v498);
      v500 = (_BYTE *)(*(_QWORD *)(v499 + 72)
                     + *(unsigned int *)(*(_QWORD *)(v499 + 8) + 24 * (v242 | v241)));
      v501 = *v500;
      v502 = (void **)"register '";
      if (*v500)
      {
        v674 = "register '";
        v676[0] = v500;
        v677 = 771;
        v503 = 2;
      }
      else
      {
        v674 = "register '";
        v677 = 259;
        v503 = 3;
      }
      if (v501)
        v502 = &v674;
      __src = v502;
      v680[0] = "' allocated for constraint '";
      v681 = v503;
      v682 = 3;
      p_src = &__src;
      v708[0] = v225 + 80;
      LOWORD(v709) = 1026;
      v683[0] = &p_src;
      *(_QWORD *)&v684 = "' does not match required type";
LABEL_687:
      LOWORD(v685) = 770;
      v496 = v100;
LABEL_688:
      v495 = v215;
      goto LABEL_693;
    }
    v284 = *(_DWORD *)v225;
    if (*(_DWORD *)v225)
    {
      if (v284 != 2)
      {
        if (v284 == 1)
        {
          if (*((_DWORD *)v225 + 26) == 2)
          {
            v355 = v225[103];
            v356 = v355 < 0;
            if (v355 >= 0)
              v357 = v225 + 80;
            else
              v357 = (char *)*((_QWORD *)v225 + 10);
            v358 = v355 & 0x7F;
            if (v356)
              v359 = *((_QWORD *)v225 + 11);
            else
              v359 = v358;
            v360 = (*((uint64_t (**)(void **, char *, uint64_t))*v657 + 257))(v657, v357, v359);
            v361 = v100[104];
            v362 = *v100;
            v363 = *((_DWORD *)v100 + 204);
            v683[0] = 0;
            LODWORD(v683[1]) = v363;
            if (v362)
            {
              v364 = (void **)(v362 + 48);
              if (v364 != v683)
              {
                v365 = *v364;
                v683[0] = v365;
                if (v365)
                  llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v365, 2);
              }
            }
            v366 = sub_1C6366AB4(v361, (v360 << 16) | 0xEu, (const llvm::APInt *)v683, (llvm *)5, 0, 1, 0);
            v368 = v366;
            v369 = v367;
            v370 = v664;
            if (v664 >= v665)
            {
              v389 = v663;
              v390 = (v664 - (_BYTE *)v663) >> 4;
              v391 = v390 + 1;
              if ((unint64_t)(v390 + 1) >> 60)
                goto LABEL_826;
              v392 = v665 - (_BYTE *)v663;
              if ((v665 - (_BYTE *)v663) >> 3 > v391)
                v391 = v392 >> 3;
              if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF0)
                v393 = 0xFFFFFFFFFFFFFFFLL;
              else
                v393 = v391;
              if (v393)
              {
                if (v393 >> 60)
                  goto LABEL_827;
                v394 = (char *)operator new(16 * v393);
              }
              else
              {
                v394 = 0;
              }
              v414 = &v394[16 * v390];
              *(_QWORD *)v414 = v368;
              *((_QWORD *)v414 + 1) = v369;
              v415 = v414;
              if (v370 != v389)
              {
                do
                {
                  v416 = *((_QWORD *)v370 - 2);
                  v370 -= 4;
                  v417 = v370[2];
                  *((_QWORD *)v415 - 2) = v416;
                  v415 -= 16;
                  *((_DWORD *)v415 + 2) = v417;
                }
                while (v370 != v389);
                v370 = v663;
              }
              v371 = v414 + 16;
              v663 = v415;
              v664 = v414 + 16;
              v665 = &v394[16 * v393];
              if (v370)
                operator delete(v370);
            }
            else
            {
              *(_QWORD *)v664 = v366;
              *((_QWORD *)v370 + 1) = v367;
              v371 = (char *)(v370 + 4);
            }
            v664 = v371;
            if (v683[0])
            {
              llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
              v371 = v664;
            }
            v418 = v225 + 128;
            if (v371 < v665)
              goto LABEL_597;
            v419 = (char *)v663;
            v420 = (v371 - (_BYTE *)v663) >> 4;
            v421 = v420 + 1;
            if ((unint64_t)(v420 + 1) >> 60)
              goto LABEL_826;
            v422 = v665 - (_BYTE *)v663;
            if ((v665 - (_BYTE *)v663) >> 3 > v421)
              v421 = v422 >> 3;
            if ((unint64_t)v422 >= 0x7FFFFFFFFFFFFFF0)
              v423 = 0xFFFFFFFFFFFFFFFLL;
            else
              v423 = v421;
            if (v423)
            {
              if (v423 >> 60)
                goto LABEL_827;
              v424 = (char *)operator new(16 * v423);
            }
            else
            {
              v424 = 0;
            }
            v425 = &v424[16 * v420];
            *(_OWORD *)v425 = *v418;
            v426 = v425;
            if (v371 != v419)
            {
              v215 = (const llvm::InvokeInst *)v630;
              v226 = v653;
              do
              {
                v427 = *((_QWORD *)v371 - 2);
                v371 -= 16;
                v428 = *((_DWORD *)v371 + 2);
                *((_QWORD *)v426 - 2) = v427;
                v426 -= 16;
                *((_DWORD *)v426 + 2) = v428;
              }
              while (v371 != v419);
              goto LABEL_632;
            }
            goto LABEL_633;
          }
          if (!*((_DWORD *)v225 + 66))
          {
            p_src = (void **)"couldn't allocate output register for constraint '";
            v708[0] = v225 + 80;
            LOWORD(v709) = 1027;
            v683[0] = &p_src;
            *(_QWORD *)&v684 = "'";
            goto LABEL_687;
          }
          v285 = *(_QWORD *)(v100[104] + 40);
          v286 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v285 + 16) + 176))(*(_QWORD *)(v285 + 16));
          v287 = *((unsigned int *)v225 + 66);
          if ((_DWORD)v287)
          {
            v288 = (_QWORD *)v286;
            v289 = (unsigned int *)*((_QWORD *)v225 + 32);
            v290 = 4 * v287;
            while (1)
            {
              v291 = *v289;
              if (*v289 - 1 <= 0x3FFFFFFE)
              {
                if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(*v288 + 104))(v288, v285, *v289))
                  break;
              }
              ++v289;
              v290 -= 4;
              if (!v290)
                goto LABEL_382;
            }
            v491 = (_BYTE *)(v288[9] + *(unsigned int *)(v288[1] + 24 * v291));
            v492 = *v491;
            p_p_src = "write to reserved register '";
            if (*v491)
            {
              p_src = (void **)"write to reserved register '";
              v708[0] = v491;
              LOWORD(v709) = 771;
              v494 = 2;
            }
            else
            {
              p_src = (void **)"write to reserved register '";
              LOWORD(v709) = 259;
              v494 = 3;
            }
            v495 = (const llvm::Instruction *)v630;
            if (v492)
              p_p_src = (const char *)&p_src;
            v683[0] = (void *)p_p_src;
            *(_QWORD *)&v684 = "'";
            LOBYTE(v685) = v494;
            BYTE1(v685) = 3;
            v496 = v100;
            goto LABEL_693;
          }
LABEL_382:
          if (v225[4])
            v292 = 3;
          else
            v292 = 2;
          v293 = *v100;
          v294 = *((_DWORD *)v100 + 204);
          v683[0] = 0;
          LODWORD(v683[1]) = v294;
          if (v293)
          {
            v295 = (void **)(v293 + 48);
            if (v295 != v683)
            {
              v296 = *v295;
              v683[0] = v296;
              if (v296)
                llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v296, 2);
            }
          }
          sub_1C635BF38((uint64_t)(v225 + 144), v292, 0, 0, (const llvm::APInt *)v683, (_QWORD *)v100[104], (uint64_t)&v663);
          v226 = v653;
          if (v683[0])
            llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
          v215 = (const llvm::InvokeInst *)v630;
        }
        goto LABEL_637;
      }
      if (!*((_DWORD *)v225 + 66))
        goto LABEL_637;
      v297 = *v100;
      v298 = *((_DWORD *)v100 + 204);
      v683[0] = 0;
      LODWORD(v683[1]) = v298;
      if (v297)
      {
        v299 = (void **)(v297 + 48);
        if (v299 != v683)
        {
          v300 = *v299;
          v683[0] = v300;
          if (v300)
            llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v300, 2);
        }
      }
      sub_1C635BF38((uint64_t)(v225 + 144), 4uLL, 0, 0, (const llvm::APInt *)v683, (_QWORD *)v100[104], (uint64_t)&v663);
      v301 = (unsigned __int8 *)v683[0];
      if (!v683[0])
        goto LABEL_637;
LABEL_418:
      llvm::MetadataTracking::untrack((uint64_t)v683, v301);
      goto LABEL_637;
    }
    v302 = *((_QWORD *)v225 + 16);
    v303 = *((_QWORD *)v225 + 17);
    v304 = v225[103];
    if ((v225[103] & 0x80000000) == 0)
    {
      v305 = v225 + 80;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)v227 + 60) & 0x400) == 0)
        break;
      goto LABEL_420;
    }
    v305 = *(const char **)v227;
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * **(unsigned __int8 **)v227 + 60) & 0x400) == 0)
      break;
LABEL_420:
    v320 = atoi(v305);
    for (i = 4; v320; --v320)
    {
      v322 = *(_QWORD *)(*((_QWORD *)v663 + 2 * i) + 80);
      v323 = (_QWORD *)(v322 + 24);
      if (*(_DWORD *)(v322 + 32) >= 0x41u)
        v323 = (_QWORD *)*v323;
      i += ((unsigned __int16)*(_DWORD *)v323 >> 3) + 1;
    }
    v324 = *(_QWORD *)(*((_QWORD *)v663 + 2 * i) + 80);
    v325 = (_QWORD *)(v324 + 24);
    if (*(_DWORD *)(v324 + 32) >= 0x41u)
      v325 = (_QWORD *)*v325;
    v326 = *(_DWORD *)v325;
    if ((*(_DWORD *)v325 & 6) != 2)
    {
      if ((v304 & 0x80) != 0)
        v227 = *(const char **)v227;
      v100 = v652;
      v376 = atoi(v227);
      v377 = v652[104];
      v378 = *v652;
      v379 = *((_DWORD *)v652 + 204);
      v683[0] = 0;
      LODWORD(v683[1]) = v379;
      v380 = v377;
      if (v378)
      {
        v381 = (void **)(v378 + 48);
        v380 = v377;
        if (v381 != v683)
        {
          v382 = *v381;
          v683[0] = v382;
          v380 = v377;
          if (v382)
          {
            llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v382, 2);
            v380 = v652[104];
          }
        }
      }
      v383 = (*((uint64_t (**)(void **, uint64_t, _QWORD))*v657 + 4))(v657, *(_QWORD *)(**(_QWORD **)(v380 + 40) + 40) + 272, 0);
      v384 = sub_1C6366AB4(v377, (unsigned __int16)v326 | (v376 << 16) | 0x80000000, (const llvm::APInt *)v683, (llvm *)v383, 0, 1, 0);
      v386 = v384;
      v387 = v385;
      v388 = v664;
      if (v664 >= v665)
      {
        v408 = v663;
        v409 = (v664 - (_BYTE *)v663) >> 4;
        v410 = v409 + 1;
        if ((unint64_t)(v409 + 1) >> 60)
          goto LABEL_826;
        v411 = v665 - (_BYTE *)v663;
        if ((v665 - (_BYTE *)v663) >> 3 > v410)
          v410 = v411 >> 3;
        if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFF0)
          v412 = 0xFFFFFFFFFFFFFFFLL;
        else
          v412 = v410;
        if (v412)
        {
          if (v412 >> 60)
            goto LABEL_827;
          v413 = (char *)operator new(16 * v412);
        }
        else
        {
          v413 = 0;
        }
        v455 = &v413[16 * v409];
        *(_QWORD *)v455 = v386;
        *((_QWORD *)v455 + 1) = v387;
        v456 = v455;
        if (v388 != v408)
        {
          do
          {
            v457 = *((_QWORD *)v388 - 2);
            v388 -= 4;
            v458 = v388[2];
            *((_QWORD *)v456 - 2) = v457;
            v456 -= 16;
            *((_DWORD *)v456 + 2) = v458;
          }
          while (v388 != v408);
          v388 = v663;
        }
        v371 = v455 + 16;
        v663 = v456;
        v664 = v455 + 16;
        v665 = &v413[16 * v412];
        if (v388)
          operator delete(v388);
      }
      else
      {
        *(_QWORD *)v664 = v384;
        *((_QWORD *)v388 + 1) = v385;
        v371 = (char *)(v388 + 4);
      }
      v664 = v371;
      if (v683[0])
      {
        llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
        v371 = v664;
      }
      v459 = i + 1;
      v460 = (char *)v663;
      v418 = (char *)v663 + 16 * v459;
      if (v371 < v665)
      {
LABEL_597:
        *(_OWORD *)v371 = *v418;
        v461 = v371 + 16;
        v215 = (const llvm::InvokeInst *)v630;
        goto LABEL_598;
      }
      v462 = (v371 - (_BYTE *)v663) >> 4;
      v463 = v462 + 1;
      if ((unint64_t)(v462 + 1) >> 60)
        goto LABEL_826;
      v464 = v665 - (_BYTE *)v663;
      if ((v665 - (_BYTE *)v663) >> 3 > v463)
        v463 = v464 >> 3;
      if ((unint64_t)v464 >= 0x7FFFFFFFFFFFFFF0)
        v423 = 0xFFFFFFFFFFFFFFFLL;
      else
        v423 = v463;
      if (v423)
      {
        if (v423 >> 60)
          goto LABEL_827;
        v424 = (char *)operator new(16 * v423);
      }
      else
      {
        v424 = 0;
      }
      v425 = &v424[16 * v462];
      *(_OWORD *)v425 = *v418;
      v426 = v425;
      if (v371 != v460)
      {
        v215 = (const llvm::InvokeInst *)v630;
        v226 = v653;
        do
        {
          v475 = *((_QWORD *)v371 - 2);
          v371 -= 16;
          v476 = *((_DWORD *)v371 + 2);
          *((_QWORD *)v426 - 2) = v475;
          v426 -= 16;
          *((_DWORD *)v426 + 2) = v476;
        }
        while (v371 != v460);
LABEL_632:
        v371 = (char *)v663;
LABEL_634:
        v461 = v425 + 16;
        v663 = v426;
        v664 = v425 + 16;
        v665 = &v424[16 * v423];
        if (v371)
          operator delete(v371);
LABEL_636:
        v664 = v461;
        goto LABEL_637;
      }
LABEL_633:
      v215 = (const llvm::InvokeInst *)v630;
      v226 = v653;
      goto LABEL_634;
    }
    if (v225[13])
    {
      v683[0] = "inline asm not supported yet: don't know how to handle tied indirect register inputs";
      v497 = 259;
LABEL_675:
      LOWORD(v685) = v497;
      v496 = v652;
      goto LABEL_688;
    }
    p_src = v653;
    v707 = 0x400000000;
    v327 = *(_QWORD *)(v652[104] + 40);
    v328 = *(_QWORD *)(v327 + 40);
    v329 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v327 + 16) + 176))(*(_QWORD *)(v327 + 16));
    v330 = *((_QWORD *)v663 + 2 * i + 2);
    v331 = *(unsigned int *)(v330 + 76);
    v332 = **(unsigned __int8 **)(v330 + 40);
    if ((v331 & 0x80000000) != 0)
    {
      v333 = *(_QWORD *)(*(_QWORD *)(v328 + 24) + 16 * (v331 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    }
    else if (v332 == 174)
    {
      v338 = *(unint64_t **)(v329 + 240);
      v339 = *(unint64_t **)(v329 + 248);
      if (v338 == v339)
      {
        v333 = 0;
      }
      else
      {
        v333 = 0;
        v340 = v331 - 0x40000000;
        v341 = v331 >> 3;
        v342 = 1 << (v331 & 7);
        do
        {
          if (v340 >= 0xC0000001)
          {
            v343 = *(_QWORD *)*v338;
            if (v341 < *(unsigned __int16 *)(v343 + 22)
              && (v342 & *(_BYTE *)(*(_QWORD *)(v343 + 8) + v341)) != 0
              && (!v333
               || *v338 != v333
               && ((*(_DWORD *)(*(_QWORD *)(v333 + 8) + ((*(unsigned __int16 *)(v343 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v343 + 24)) & 1) != 0))
            {
              v333 = *v338;
            }
          }
          ++v338;
        }
        while (v338 != v339);
      }
    }
    else
    {
      v333 = (*((uint64_t (**)(void **, uint64_t, _QWORD))*v657 + 53))(v657, v332, 0);
    }
    v344 = (unsigned __int16)v326 >> 3;
    if ((unsigned __int16)v326 >> 3)
    {
      v351 = v333 & 0xFFFFFFFFFFFFFFFBLL;
      do
      {
        v352 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v328, "", 0);
        *(_QWORD *)(*(_QWORD *)(v328 + 24) + 16 * (v352 & 0x7FFFFFFF)) = v351;
        v353 = *(_QWORD *)(v328 + 8);
        if (v353)
          (*(void (**)(uint64_t))(*(_QWORD *)v353 + 24))(v353);
        v354 = v707;
        if (v707 >= (unint64_t)HIDWORD(v707))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_src, (uint64_t)v653, v707 + 1, 4);
          v354 = v707;
        }
        *((_DWORD *)p_src + v354) = v352;
        LODWORD(v707) = v707 + 1;
        --v344;
      }
      while (v344);
    }
    v345 = (uint64_t *)(*(_QWORD *)(v302 + 40) + 16 * v303);
    sub_1C635BC0C((uint64_t)v683, (uint64_t)&p_src, v332, *v345, v345[1]);
    v346 = *v652;
    v347 = *((_DWORD *)v652 + 204);
    __src = 0;
    LODWORD(v679) = v347;
    if (v346)
    {
      v348 = (void **)(v346 + 48);
      if (v348 != &__src)
      {
        v349 = *v348;
        __src = v349;
        if (v349)
          llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v349, 2);
      }
    }
    v215 = (const llvm::InvokeInst *)v630;
    sub_1C5D12FF0((uint64_t)v683, v302, v303, (_QWORD *)v652[104], (const llvm::APInt *)&__src, (uint64_t *)&v667, (uint64_t *)&v668, (unsigned __int8 *)v630, 0xC8u);
    v226 = v653;
    if (v225[103] < 0)
      v227 = *(const char **)v227;
    v350 = atoi(v227);
    v100 = v652;
    sub_1C635BF38((uint64_t)v683, 1uLL, 1, v350, (const llvm::APInt *)&__src, (_QWORD *)v652[104], (uint64_t)&v663);
    if (__src)
      llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
    sub_1C63640DC((uint64_t)v683);
    if (p_src != v653)
      free(p_src);
LABEL_637:
    v225 += 328;
    if (v225 == v654)
      goto LABEL_680;
  }
  v306 = *((_DWORD *)v225 + 26);
  if (v306 == 4)
  {
LABEL_431:
    v679 = 0;
    __src = 0;
    v680[0] = 0;
    (*((void (**)(void **, uint64_t, uint64_t, char *, void **, uint64_t))*v657 + 259))(v657, v302, v303, v225 + 80, &__src, v652[104]);
    v334 = __src;
    v335 = v679;
    if (__src == (void *)v679)
    {
      if (*((_DWORD *)v225 + 26) == 4 && ((v336 = *(unsigned __int16 *)(v302 + 24), v336 == 35) || v336 == 11))
        v337 = "value out of range for constraint '";
      else
        v337 = "invalid operand for inline asm constraint '";
      p_src = (void **)v337;
      v708[0] = v225 + 80;
      LOWORD(v709) = 1027;
      v683[0] = &p_src;
      *(_QWORD *)&v684 = "'";
      LOWORD(v685) = 770;
      v100 = v652;
      sub_1C5D34A4C(v652, v215, (const llvm::Twine *)v683);
    }
    else
    {
      v100 = v652;
      v395 = v652[104];
      v396 = *v652;
      v397 = *((_DWORD *)v652 + 204);
      v683[0] = 0;
      LODWORD(v683[1]) = v397;
      v398 = v395;
      if (v396)
      {
        v399 = (void **)(v396 + 48);
        v398 = v395;
        if (v399 != v683)
        {
          v400 = *v399;
          v683[0] = v400;
          v398 = v395;
          if (v400)
          {
            llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v400, 2);
            v398 = v652[104];
          }
        }
      }
      v401 = (*((uint64_t (**)(void **, uint64_t, _QWORD))*v657 + 4))(v657, *(_QWORD *)(**(_QWORD **)(v398 + 40) + 40) + 272, 0);
      v402 = sub_1C6366AB4(v395, ((unint64_t)(v335 - (_QWORD)v334) >> 1) & 0xFFFFFFF8 | 5, (const llvm::APInt *)v683, (llvm *)v401, 0, 1, 0);
      v404 = v402;
      v405 = v403;
      v406 = v664;
      if (v664 >= v665)
      {
        v449 = v663;
        v450 = (v664 - (_BYTE *)v663) >> 4;
        v451 = v450 + 1;
        if ((unint64_t)(v450 + 1) >> 60)
          goto LABEL_826;
        v452 = v665 - (_BYTE *)v663;
        if ((v665 - (_BYTE *)v663) >> 3 > v451)
          v451 = v452 >> 3;
        if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFF0)
          v453 = 0xFFFFFFFFFFFFFFFLL;
        else
          v453 = v451;
        if (v453)
        {
          if (v453 >> 60)
            goto LABEL_827;
          v454 = (char *)operator new(16 * v453);
        }
        else
        {
          v454 = 0;
        }
        v481 = &v454[16 * v450];
        *(_QWORD *)v481 = v404;
        *((_QWORD *)v481 + 1) = v405;
        v482 = v481;
        if (v406 == v449)
        {
          v100 = v652;
          v215 = (const llvm::InvokeInst *)v630;
        }
        else
        {
          v100 = v652;
          v215 = (const llvm::InvokeInst *)v630;
          do
          {
            v483 = *((_QWORD *)v406 - 2);
            v406 -= 4;
            v484 = v406[2];
            *((_QWORD *)v482 - 2) = v483;
            v482 -= 16;
            *((_DWORD *)v482 + 2) = v484;
          }
          while (v406 != v449);
          v406 = v663;
        }
        v407 = v481 + 16;
        v663 = v482;
        v664 = v481 + 16;
        v665 = &v454[16 * v453];
        if (v406)
          operator delete(v406);
      }
      else
      {
        *(_QWORD *)v664 = v402;
        *((_QWORD *)v406 + 1) = v403;
        v407 = (char *)(v406 + 4);
        v215 = (const llvm::InvokeInst *)v630;
      }
      v664 = v407;
      if (v683[0])
      {
        llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
        v407 = v664;
      }
      sub_1C5D3AB1C((uint64_t)&v663, v407, (char *)__src, (char *)v679, (v679 - (uint64_t)__src) >> 4);
    }
    if (__src)
    {
      v679 = (uint64_t)__src;
      operator delete(__src);
    }
    v50 = v334 == (void *)v335;
    v226 = v653;
    if (v50)
      goto LABEL_694;
    goto LABEL_637;
  }
  if (v306 == 5)
  {
    if (v225[13])
    {
      *((_DWORD *)v225 + 26) = 2;
LABEL_558:
      if ((v304 & 0x80u) == 0)
        v429 = v225 + 80;
      else
        v429 = (char *)*((_QWORD *)v225 + 10);
      if ((v304 & 0x80u) == 0)
        v430 = v304;
      else
        v430 = *((_QWORD *)v225 + 11);
      v431 = (*((uint64_t (**)(void **, char *, uint64_t))*v657 + 257))(v657, v429, v430);
      v432 = v652[104];
      v433 = *v652;
      v434 = *((_DWORD *)v652 + 204);
      v683[0] = 0;
      LODWORD(v683[1]) = v434;
      if (v433)
      {
        v435 = (void **)(v433 + 48);
        if (v435 != v683)
        {
          v436 = *v435;
          v683[0] = v436;
          if (v436)
            llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v436, 2);
        }
      }
      v437 = sub_1C6366AB4(v432, (v431 << 16) | 0xEu, (const llvm::APInt *)v683, (llvm *)5, 0, 1, 0);
      v439 = v437;
      v440 = v438;
      v441 = v664;
      if (v664 >= v665)
      {
        v443 = v663;
        v444 = (v664 - (_BYTE *)v663) >> 4;
        v445 = v444 + 1;
        if ((unint64_t)(v444 + 1) >> 60)
          goto LABEL_826;
        v446 = v665 - (_BYTE *)v663;
        if ((v665 - (_BYTE *)v663) >> 3 > v445)
          v445 = v446 >> 3;
        if ((unint64_t)v446 >= 0x7FFFFFFFFFFFFFF0)
          v447 = 0xFFFFFFFFFFFFFFFLL;
        else
          v447 = v445;
        if (v447)
        {
          if (v447 >> 60)
            goto LABEL_827;
          v448 = (char *)operator new(16 * v447);
        }
        else
        {
          v448 = 0;
        }
        v465 = &v448[16 * v444];
        *(_QWORD *)v465 = v439;
        *((_QWORD *)v465 + 1) = v440;
        v466 = v465;
        if (v441 != v443)
        {
          do
          {
            v467 = *((_QWORD *)v441 - 2);
            v441 -= 4;
            v468 = v441[2];
            *((_QWORD *)v466 - 2) = v467;
            v466 -= 16;
            *((_DWORD *)v466 + 2) = v468;
          }
          while (v441 != v443);
          v441 = v663;
        }
        v442 = v465 + 16;
        v663 = v466;
        v664 = v465 + 16;
        v665 = &v448[16 * v447];
        if (v441)
          operator delete(v441);
        v226 = v653;
      }
      else
      {
        *(_QWORD *)v664 = v437;
        *((_QWORD *)v441 + 1) = v438;
        v442 = (char *)(v441 + 4);
      }
      v664 = v442;
      if (v683[0])
      {
        llvm::MetadataTracking::untrack((uint64_t)v683, (unsigned __int8 *)v683[0]);
        v442 = v664;
      }
      if (v442 >= v665)
      {
        v469 = (char *)v663;
        v470 = (v442 - (_BYTE *)v663) >> 4;
        v471 = v470 + 1;
        if ((unint64_t)(v470 + 1) >> 60)
          goto LABEL_826;
        v472 = v665 - (_BYTE *)v663;
        if ((v665 - (_BYTE *)v663) >> 3 > v471)
          v471 = v472 >> 3;
        if ((unint64_t)v472 >= 0x7FFFFFFFFFFFFFF0)
          v473 = 0xFFFFFFFFFFFFFFFLL;
        else
          v473 = v471;
        if (v473)
        {
          if (v473 >> 60)
            goto LABEL_827;
          v474 = (char *)operator new(16 * v473);
        }
        else
        {
          v474 = 0;
        }
        v477 = (uint64_t *)&v474[16 * v470];
        *v477 = v302;
        v477[1] = v303;
        v478 = v477;
        if (v442 == v469)
        {
          v100 = v652;
          v215 = (const llvm::InvokeInst *)v630;
        }
        else
        {
          v100 = v652;
          v215 = (const llvm::InvokeInst *)v630;
          do
          {
            v479 = *((_QWORD *)v442 - 2);
            v442 -= 16;
            v480 = *((_DWORD *)v442 + 2);
            *(v478 - 2) = v479;
            v478 -= 2;
            *((_DWORD *)v478 + 2) = v480;
          }
          while (v442 != v469);
          v442 = (char *)v663;
        }
        v461 = (char *)(v477 + 2);
        v663 = v478;
        v664 = (char *)(v477 + 2);
        v665 = &v474[16 * v473];
        if (v442)
          operator delete(v442);
LABEL_598:
        v226 = v653;
      }
      else
      {
        *(_QWORD *)v442 = v302;
        *((_QWORD *)v442 + 1) = v303;
        v461 = v442 + 16;
        v100 = v652;
        v215 = (const llvm::InvokeInst *)v630;
      }
      goto LABEL_636;
    }
    goto LABEL_431;
  }
  if ((v306 - 2) < 2)
    goto LABEL_558;
  if (v225[13])
  {
    v602 = "Don't know how to handle indirect register inputs yet for constraint '";
LABEL_814:
    p_src = (void **)v602;
    v708[0] = v225 + 80;
    LOWORD(v709) = 1027;
    v683[0] = &p_src;
    *(_QWORD *)&v684 = "'";
    v497 = 770;
    goto LABEL_675;
  }
  if (!*((_DWORD *)v225 + 66))
  {
    v602 = "couldn't allocate input reg for constraint '";
    goto LABEL_814;
  }
  v307 = *(_QWORD *)(v652[104] + 40);
  v308 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v307 + 16) + 176))(*(_QWORD *)(v307 + 16));
  v309 = *((unsigned int *)v225 + 66);
  if (!(_DWORD)v309)
  {
LABEL_411:
    v314 = *v652;
    v315 = *((_DWORD *)v652 + 204);
    v683[0] = 0;
    LODWORD(v683[1]) = v315;
    v50 = v314 == 0;
    v316 = (void **)(v314 + 48);
    if (!v50 && v316 != v683)
    {
      v318 = *v316;
      v683[0] = v318;
      if (v318)
        llvm::MetadataTracking::track((uint64_t)v683, (unsigned __int8 *)v318, 2);
    }
    v319 = v303;
    v100 = v652;
    v215 = (const llvm::InvokeInst *)v630;
    sub_1C5D12FF0((uint64_t)(v225 + 144), v302, v319, (_QWORD *)v652[104], (const llvm::APInt *)v683, (uint64_t *)&v667, (uint64_t *)&v668, (unsigned __int8 *)v630, 0xC8u);
    sub_1C635BF38((uint64_t)(v225 + 144), 1uLL, 0, 0, (const llvm::APInt *)v683, (_QWORD *)v652[104], (uint64_t)&v663);
    v301 = (unsigned __int8 *)v683[0];
    v226 = v653;
    if (!v683[0])
      goto LABEL_637;
    goto LABEL_418;
  }
  v310 = (_QWORD *)v308;
  v311 = (unsigned int *)*((_QWORD *)v225 + 32);
  v312 = 4 * v309;
  while (1)
  {
    v313 = *v311;
    if (*v311 - 1 <= 0x3FFFFFFE)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(*v310 + 104))(v310, v307, *v311))
        break;
    }
    ++v311;
    v312 -= 4;
    if (!v312)
      goto LABEL_411;
  }
  v504 = (_BYTE *)(v310[9] + *(unsigned int *)(v310[1] + 24 * v313));
  v505 = *v504;
  if (*v504)
  {
    p_src = (void **)"write to reserved register '";
    v708[0] = v504;
    LOWORD(v709) = 771;
    v506 = 2;
  }
  else
  {
    p_src = (void **)"write to reserved register '";
    LOWORD(v709) = 259;
    v506 = 3;
  }
  v496 = v652;
  v495 = (const llvm::Instruction *)v630;
  v50 = v505 == 0;
  v512 = (const char *)&p_src;
  if (v50)
    v512 = "write to reserved register '";
  v683[0] = (void *)v512;
  *(_QWORD *)&v684 = "'";
  LOBYTE(v685) = v506;
  BYTE1(v685) = 3;
LABEL_693:
  sub_1C5D34A4C(v496, v495, (const llvm::Twine *)v683);
LABEL_694:
  if (v663)
  {
    v664 = (char *)v663;
    operator delete(v663);
  }
LABEL_696:
  v683[0] = &v669;
  sub_1C509B1A8((void ***)v683);
  v513 = (char *)v703;
  if ((_DWORD)v704)
  {
    v514 = 0;
    v515 = 328 * v704;
    do
    {
      v516 = (void **)&v513[v515];
      sub_1C63640DC((uint64_t)&v513[v515 - 184]);
      if (v513[v515 - 225] < 0)
        operator delete(*(v516 - 31));
      v683[0] = v516 - 35;
      sub_1C50107D8((void ***)v683);
      v683[0] = v516 - 39;
      sub_1C4765410((void ***)v683);
      v513 -= 328;
      v514 += 328;
    }
    while (v515 != v514);
    v513 = (char *)v703;
  }
  if (v513 != v705)
    free(v513);
}

_QWORD *sub_1C5D25158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 **v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t **v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  int v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  BOOL v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *result;
  __int128 v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  int v108;
  _QWORD *v109;
  int v110;
  _QWORD *v111;
  int v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[128];
  unsigned __int8 *v120;
  int v121;
  uint64_t v122;
  __int16 v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD v137[194];
  _QWORD v138[66];
  _QWORD v139[194];
  _BYTE v140[96];
  uint64_t v141;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = (uint64_t)v7;
  v9 = (uint64_t *)v4;
  v141 = *MEMORY[0x1E0C80C00];
  v10 = v7[9];
  v11 = *(unsigned __int8 *)(*(_QWORD *)v7 + 8);
  v12 = *(_QWORD *)v4;
  v13 = *(_DWORD *)(v4 + 816);
  v107 = 0;
  v108 = v13;
  v15 = v12 == 0;
  v14 = (unsigned __int8 **)(v12 + 48);
  v15 = v15 || v14 == &v107;
  if (!v15)
  {
    v16 = *v14;
    v107 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v107, v16, 2);
  }
  v17 = (v10 >> 2) & 0x3FF;
  v18 = sub_1C635FDC4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 64));
  v19 = v18;
  v21 = v20;
  v22 = *((unsigned __int16 *)v18 + 12);
  if (v22 <= 0x26)
  {
    if (((1 << v22) & 0x6000006000) != 0)
    {
      v23 = v9[104];
      v24 = v18[10];
      v25 = (unsigned __int8 *)v18[8];
      v120 = v25;
      if (v25)
        llvm::MetadataTracking::track((uint64_t)&v120, v25, 2);
      v121 = *((_DWORD *)v19 + 15);
      v19 = sub_1C6366FFC(v23, v24, (uint64_t)&v120, *(llvm **)v19[5], *(_QWORD *)(v19[5] + 8), 0, 1, 0);
      v21 = v21 & 0xFFFFFFFF00000000 | v26;
      if (v120)
        llvm::MetadataTracking::untrack((uint64_t)&v120, v120);
    }
    else if (((1 << v22) & 0x800000800) != 0)
    {
      v27 = v18[10];
      v28 = (uint64_t *)(v27 + 24);
      if (*(_DWORD *)(v27 + 32) >= 0x41u)
        v28 = (uint64_t *)*v28;
      v19 = sub_1C63662D4(v9[104], *v28, (const llvm::APInt *)&v107, 1);
      v21 = v21 & 0xFFFFFFFF00000000 | v29;
    }
  }
  v30 = sub_1C635FDC4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 96))[10];
  v31 = (_QWORD *)(v30 + 24);
  if (*(_DWORD *)(v30 + 32) >= 0x41u)
    v31 = (_QWORD *)*v31;
  v32 = (_QWORD *)*v31;
  if ((_DWORD)v17 == 13)
    v33 = 0;
  else
    v33 = *v31;
  if ((_DWORD)v17 == 13)
  {
    v35 = v9[104];
    v34 = **(_QWORD **)(v35 + 56) + 1576;
  }
  else
  {
    v34 = *(_QWORD *)v8;
    v35 = v9[104];
  }
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = v123 & 0xFC00 | 0x20;
  v124 = 0;
  v125 = 0xFFFFFFFFLL;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = v35;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v135 = v137;
  v136 = 0x2000000000;
  v137[192] = v138;
  v137[193] = 0x2000000000;
  v138[64] = v139;
  v138[65] = 0x2000000000;
  v139[192] = v140;
  v139[193] = 0x400000000;
  v140[64] = 0;
  v140[88] = 0;
  sub_1C6363EB0((uint64_t)v9, (uint64_t)&v120, v8, 4u, v33, (uint64_t)v19, v21, v34, 1);
  sub_1C6363864((uint64_t)v9, (uint64_t)&v120, v6, (uint64_t)&v104);
  v36 = v106;
  if (v11 != 7 && *(_WORD *)(v106 + 24) == 50)
    v36 = **(_QWORD **)(v106 + 32);
  v37 = **(_QWORD **)(v36 + 32);
  if (*(_WORD *)(v37 + 56))
  {
    v39 = (unsigned int *)(*(_QWORD *)(v37 + 32) + 40 * (*(unsigned __int16 *)(v37 + 56) - 1));
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v39 + 40) + 16 * v39[2]) == 172)
      v38 = *(_QWORD *)v39;
    else
      v38 = 0;
  }
  else
  {
    v38 = 0;
  }
  v117 = v119;
  v118 = 0x800000000;
  v40 = sub_1C635FDC4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF)))[10];
  v41 = (uint64_t *)(v40 + 24);
  v103 = v11;
  if (*(_DWORD *)(v40 + 32) >= 0x41u)
    v41 = (uint64_t *)*v41;
  v42 = sub_1C6366AB4(v9[104], *v41, (const llvm::APInt *)&v107, (llvm *)6, 0, 1, 0);
  v44 = v43;
  v45 = v118;
  if (v118 >= HIDWORD(v118))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
    v45 = v118;
  }
  v46 = (char *)v117 + 16 * v45;
  *v46 = v42;
  v46[1] = v44;
  LODWORD(v118) = v118 + 1;
  v47 = sub_1C635FDC4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32))[10];
  v48 = (uint64_t *)(v47 + 24);
  if (*(_DWORD *)(v47 + 32) >= 0x41u)
    v48 = (uint64_t *)*v48;
  v49 = sub_1C6366AB4(v9[104], *v48, (const llvm::APInt *)&v107, (llvm *)5, 0, 1, 0);
  v51 = v50;
  v52 = v118;
  if (v118 >= HIDWORD(v118))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
    v52 = v118;
  }
  v53 = (char *)v117 + 16 * v52;
  *v53 = v49;
  v53[1] = v51;
  v54 = (v118 + 1);
  LODWORD(v118) = v54;
  if (v54 >= HIDWORD(v118))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v54 + 1, 16);
    LODWORD(v54) = v118;
  }
  v55 = (uint64_t **)((char *)v117 + 16 * v54);
  *v55 = v19;
  v55[1] = (uint64_t *)v21;
  LODWORD(v118) = v118 + 1;
  if (v38)
    v56 = -4;
  else
    v56 = -3;
  v57 = v56 + *(unsigned __int16 *)(v37 + 56);
  if ((_DWORD)v17 == 13)
    v57 = v32;
  v58 = sub_1C6366AB4(v9[104], v57, (const llvm::APInt *)&v107, (llvm *)5, 0, 1, 0);
  v60 = v59;
  v61 = v118;
  if (v118 >= HIDWORD(v118))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
    v61 = v118;
  }
  v62 = (char *)v117 + 16 * v61;
  *v62 = v58;
  v62[1] = v60;
  LODWORD(v118) = v118 + 1;
  v63 = sub_1C6366AB4(v9[104], v17, (const llvm::APInt *)&v107, (llvm *)5, 0, 1, 0);
  v65 = v64;
  v66 = v118;
  if (v118 >= HIDWORD(v118))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
    v66 = v118;
  }
  v67 = (char *)v117 + 16 * v66;
  *v67 = v63;
  v67[1] = v65;
  LODWORD(v118) = v118 + 1;
  if ((_DWORD)v17 == 13 && (_DWORD)v32)
  {
    v68 = 0;
    do
    {
      v69 = sub_1C635FDC4((uint64_t)v9, *(unsigned __int8 **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * (v68 + 4)));
      v71 = v70;
      v72 = v118;
      if (v118 >= (unint64_t)HIDWORD(v118))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
        v72 = v118;
      }
      v73 = (uint64_t **)((char *)v117 + 16 * v72);
      *v73 = v69;
      v73[1] = v71;
      LODWORD(v118) = v118 + 1;
      ++v68;
    }
    while ((_DWORD)v32 != v68);
  }
  v74 = -80;
  if (!v38)
    v74 = -40;
  sub_1C6132D88((unsigned int *)&v117, (char *)(*(_QWORD *)(v37 + 32) + 80), (char *)(*(_QWORD *)(v37 + 32) + 40 * *(unsigned __int16 *)(v37 + 56) + v74));
  sub_1C5D34FA8(v8, (_DWORD)v32 + 4, (const llvm::APInt *)&v107, (uint64_t)&v117, (uint64_t)v9);
  v75 = *(_QWORD *)(v37 + 32) + 40 * *(unsigned __int16 *)(v37 + 56);
  v76 = v118;
  if (v38)
  {
    v78 = *(_QWORD *)(v75 - 80);
    v77 = *(_QWORD *)(v75 - 72);
  }
  else
  {
    v78 = *(_QWORD *)(v75 - 40);
    v77 = *(_QWORD *)(v75 - 32);
  }
  if (v118 >= HIDWORD(v118))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 16);
    v76 = v118;
  }
  v79 = (char *)v117 + 16 * v76;
  *v79 = v78;
  v79[1] = v77;
  v80 = (v118 + 1);
  LODWORD(v118) = v80;
  v81 = *(_OWORD *)*(_QWORD *)(v37 + 32);
  if (v80 >= HIDWORD(v118))
  {
    v101 = *(_OWORD *)*(_QWORD *)(v37 + 32);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v80 + 1, 16);
    v81 = v101;
    LODWORD(v80) = v118;
  }
  *((_OWORD *)v117 + v80) = v81;
  v82 = (v118 + 1);
  LODWORD(v118) = v118 + 1;
  if (v38)
  {
    v83 = *(_OWORD *)(*(_QWORD *)(v37 + 32) + 40 * *(unsigned __int16 *)(v37 + 56) - 40);
    if (v82 >= HIDWORD(v118))
    {
      v102 = *(_OWORD *)(*(_QWORD *)(v37 + 32) + 40 * *(unsigned __int16 *)(v37 + 56) - 40);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v82 + 1, 16);
      v83 = v102;
      LODWORD(v82) = v118;
    }
    *((_OWORD *)v117 + v82) = v83;
    LODWORD(v118) = v118 + 1;
  }
  v84 = (_DWORD)v17 != 13 || v103 == 7;
  v85 = v84;
  v86 = v9[104];
  if (v84)
  {
    v87 = sub_1C636A8B4(v86, 1, 0, 172, 0);
    v89 = v88;
  }
  else
  {
    v90 = *(_QWORD *)(v86 + 24);
    v113 = &v115;
    v114 = 0x300000000;
    llvm::ComputeValueVTs(v90, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v86 + 40) + 40) + 272), *(_QWORD *)v8, (uint64_t)&v113, 0, 0, 0);
    v91 = v114;
    if (v114 >= HIDWORD(v114))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)&v115, v114 + 1, 16);
      v91 = v114;
    }
    *((_OWORD *)v113 + v91) = xmmword_1C64169E0;
    v92 = (v114 + 1);
    LODWORD(v114) = v92;
    if (v92 >= HIDWORD(v114))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)&v115, v92 + 1, 16);
      LODWORD(v92) = v114;
    }
    *((_OWORD *)v113 + v92) = xmmword_1C866D130;
    LODWORD(v114) = v114 + 1;
    v87 = sub_1C636AB20(v9[104], (uint64_t *)v113, v114);
    v89 = v93;
    if (v113 != &v115)
      free(v113);
  }
  v94 = sub_1C5D61678(v9[104], 27, (uint64_t)&v107, v87, v89, (uint64_t *)v117, v118);
  if (v103 != 7)
  {
    if ((_DWORD)v17 == 13)
    {
      v113 = (void *)v8;
      v98 = sub_1C6364290(v9 + 1, &v113);
      v98[1] = v94;
      *((_DWORD *)v98 + 4) = 0;
      if ((v85 & 1) != 0)
        goto LABEL_90;
      goto LABEL_92;
    }
    v95 = v104;
    v96 = v105;
    v113 = (void *)v8;
    v97 = sub_1C6364290(v9 + 1, &v113);
    v97[1] = v95;
    *((_DWORD *)v97 + 4) = v96;
  }
  if ((v85 & 1) != 0)
  {
LABEL_90:
    sub_1C636595C(v9[104], v37, (uint64_t)v94);
    goto LABEL_93;
  }
LABEL_92:
  v113 = (void *)v37;
  LODWORD(v114) = 0;
  v115 = v37;
  v116 = 1;
  v109 = v94;
  v110 = 1;
  v111 = v94;
  v112 = 2;
  sub_1C5D61D68(v9[104], (uint64_t *)&v113, (uint64_t *)&v109, 2);
LABEL_93:
  v99 = v9[104];
  sub_1C5D3DF28(v99, v37);
  sub_1C63655F0(v99, v37);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9[114] + 8) + 56) + 40) = 1;
  if (v117 != v119)
    free(v117);
  result = sub_1C632CB64(&v120);
  if (v107)
    return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
  return result;
}

void sub_1C5D25B4C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t ***v6;
  char *v7;
  unsigned __int8 *v8;
  const llvm::Value *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33[4];

  sub_1C5500AF4((_DWORD *)a2, "ptrauth", 7uLL, v33);
  v6 = *(uint64_t ****)(a2 - 32);
  v7 = *(char **)v33[0];
  v8 = *(unsigned __int8 **)(v33[0] + 32);
  v10 = llvm::GlobalPtrAuthInfo::analyze(v6, v9);
  v30 = v10;
  v31 = v14;
  if ((_BYTE)v14
    && (v15 = v10,
        llvm::GlobalPtrAuthInfo::isCompatibleWith((llvm::GlobalPtrAuthInfo *)&v30, (const llvm::Value *)v7, (const llvm::Value *)v8, (const llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40)+ 272), v11, v12, v13)))
  {
    v16 = sub_1C635FDC4(a1, *(unsigned __int8 **)(*((_QWORD *)v15 - 4) - 32 * (*(_DWORD *)(*((_QWORD *)v15 - 4) + 20) & 0x7FFFFFF)));
    v18 = v17;
    if (*(_BYTE *)(a2 + 16) == 84)
    {
      v19 = *(_WORD *)(a2 + 18) & 3;
      v20 = (v19 - 1) < 2;
      v21 = v19 == 2;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v27 = a1;
    v28 = a2;
    v29 = a3;
    v26 = 0;
  }
  else
  {
    v22 = v7 + 24;
    if (*((_DWORD *)v7 + 8) >= 0x41u)
      v22 = *(char **)v22;
    v30 = *(char **)v22;
    v31 = sub_1C635FDC4(a1, v8);
    v32 = v23;
    v16 = sub_1C635FDC4(a1, (unsigned __int8 *)v6);
    v18 = v24;
    if (*(_BYTE *)(a2 + 16) == 84)
    {
      v25 = *(_WORD *)(a2 + 18) & 3;
      v20 = (v25 - 1) < 2;
      v21 = v25 == 2;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v26 = (__int128 *)&v30;
    v27 = a1;
    v28 = a2;
    v29 = a3;
  }
  sub_1C5D25CEC(v27, v28, (uint64_t)v16, v18, v20, v21, v29, v26);
}

void sub_1C5D25CEC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, __int128 *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  int v33;
  uint64_t v34;
  int v35;
  llvm::Type ***v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::TargetMachine *v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  llvm::Type **v50;
  int v51;
  uint64_t v52;
  int VRegUseAt;
  unsigned __int8 v54;
  int v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  char v78;
  char v79;
  uint64_t v80;
  const llvm::Value *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int v85;
  __int128 *v86;
  unsigned __int8 **v87;
  unsigned __int8 *v88;
  int v89;
  uint64_t v90;
  int hasFnAttrOnCalledFunction;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  __int16 v95;
  int v96;
  __int16 v97;
  unsigned __int8 *v98;
  int v99;
  int v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  int VRegDefAt;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v135;
  llvm::Type **v136;
  uint64_t v138;
  unsigned __int8 *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __n128 __p;
  unint64_t v144;
  unint64_t v145;
  __int128 v146;
  _BYTE v147[32];
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  int v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD v158[194];
  _QWORD v159[66];
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char v166;
  uint64_t v167;

  v11 = a1;
  v12 = 0;
  v167 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40);
  v130 = *(_QWORD *)a2;
  v131 = *(_QWORD *)(a2 + 72);
  __p = 0uLL;
  v144 = 0;
  v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 != 84)
  {
    if (v14 == 39)
      v12 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v12 = 2;
    v11 = a1;
  }
  v15 = *(_DWORD *)(a2 + 20);
  if (v15 < 0 && (v118 = a2 - 32 * (v15 & 0x7FFFFFF), v119 = *(_QWORD *)(v118 - 8), (v119 & 0xFFFFFFFF0) != 0))
  {
    v17 = -(uint64_t)(v15 & 0x7FFFFFF);
    v16 = *(_DWORD *)(v118 - 12) - *(_DWORD *)(v118 - v119);
  }
  else
  {
    v16 = 0;
    v17 = -(uint64_t)(v15 & 0x7FFFFFF);
  }
  sub_1C5CC5540((uint64_t)&__p, ((-32 * v12 + 32 * (unint64_t)-v16 - 32 * v17 - 32) >> 5));
  v18 = 0;
  v138 = *(_QWORD *)(*(_QWORD *)(v11 + 832) + 24);
  if (!a5)
    goto LABEL_37;
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  v20 = *(_QWORD *)(v19 + 112);
  if (!v20)
    goto LABEL_32;
  if (!*(_DWORD *)(v20 + 8))
    goto LABEL_118;
  v20 = *(_QWORD *)(v20 + 40);
  if (!v20)
    goto LABEL_32;
  v21 = *(_DWORD *)(v20 + 40);
  if (!v21)
  {
LABEL_118:
    LODWORD(v20) = 0;
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(v20 + 24);
  v23 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v117 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v117 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v117;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v24 = __ROR8__(qword_1ED7EAC80 ^ 0xAE2F6180382EB467, 30);
  v25 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0x1ED4D83DFEF8CF66) ^ ((0x9DDFEA08EB382D69
                                                    * ((v24 - 0x58DDE70BBE0D1868) ^ (qword_1ED7EAC80
                                                                                     + 0x1ED4D83DFEF8CF66))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v24 - 0x58DDE70BBE0D1868) ^ (qword_1ED7EAC80 + 0x1ED4D83DFEF8CF66))));
  v26 = -348639895 * ((v25 >> 47) ^ v25);
  for (i = 1; ; ++i)
  {
    v28 = v26 & (v21 - 1);
    v29 = (uint64_t *)(v22 + 24 * v28);
    v30 = *v29;
    if (*v29 == -1)
    {
      if ("disable-tail-calls" == (char *)-1)
        goto LABEL_27;
      goto LABEL_13;
    }
    if (v30 != -2)
      break;
    if ("disable-tail-calls" == (char *)-2)
      goto LABEL_27;
LABEL_13:
    if (v30 == -1)
    {
      LODWORD(v20) = 0;
      goto LABEL_31;
    }
    v26 = i + v28;
  }
  if (v29[1] != 18)
    goto LABEL_13;
  v31 = *(_QWORD *)v30 == 0x2D656C6261736964 && *(_QWORD *)(v30 + 8) == 0x6C61632D6C696174;
  if (!v31 || *(_WORD *)(v30 + 16) != 29548)
    goto LABEL_13;
LABEL_27:
  v20 = v29[2];
  if (!v20)
  {
LABEL_31:
    v11 = a1;
    goto LABEL_32;
  }
  v11 = a1;
  if (*(_DWORD *)(v20 + 16) != 4)
    goto LABEL_118;
  LODWORD(v20) = *(_DWORD *)(v20 + *(unsigned int *)(v20 + 12) + 25) == 1702195828;
LABEL_32:
  v33 = v20 ^ 1 | a6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 1768))(v138))
  {
    v34 = *(_QWORD *)(v19 + 112);
    if (v34)
    {
      if (*(char *)(v34 + 31) < 0)
        v33 = 0;
    }
  }
  v18 = v33 != 0;
LABEL_37:
  v35 = *(_DWORD *)(a2 + 20);
  v36 = (llvm::Type ***)(a2 - 32 * (v35 & 0x7FFFFFF));
  v37 = *(unsigned __int8 *)(a2 + 16);
  if (v37 == 84)
  {
    v38 = 0;
    if ((v35 & 0x80000000) == 0)
      goto LABEL_39;
LABEL_148:
    v128 = (uint64_t)*(v36 - 1);
    if ((v128 & 0xFFFFFFFF0) != 0)
      v39 = (*((_DWORD *)v36 - 3) - *(_DWORD *)((char *)v36 - v128));
    else
      v39 = 0;
    v11 = a1;
  }
  else
  {
    if (v37 == 39)
      v38 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v38 = 2;
    v11 = a1;
    if (v35 < 0)
      goto LABEL_148;
LABEL_39:
    v39 = 0;
  }
  v40 = a2 - 32 * v38 - 32 * v39 - 32;
  if (v36 != (llvm::Type ***)v40)
  {
    v135 = v13 + 272;
    v136 = 0;
    while (1)
    {
      v146 = 0u;
      *(_OWORD *)v147 = 0u;
      *(_DWORD *)&v147[16] = *(_WORD *)&v147[16] & 0xC000;
      *(_QWORD *)&v147[24] = 0;
      v50 = *v36;
      if ((llvm::Type::isEmptyTy(**v36) & 1) == 0)
      {
        *((_QWORD *)&v146 + 1) = sub_1C635FDC4(v11, (unsigned __int8 *)v50);
        *(_DWORD *)v147 = v51;
        *(_QWORD *)&v147[8] = *v50;
        sub_1C6374D70((uint64_t)&v146, a2, ((unint64_t)&v36[4 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)] - a2) >> 5);
        if ((*(_WORD *)&v147[16] & 0x1000) != 0
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 1768))(v138))
        {
          v52 = *(_QWORD *)(v11 + 832);
          VRegUseAt = llvm::SwiftErrorValueTracking::getOrCreateVRegUseAt(*(llvm::SwiftErrorValueTracking **)(v11 + 920), a2, *(const llvm::MachineBasicBlock **)(*(_QWORD *)(v11 + 912) + 640), (const llvm::Value *)v50);
          v54 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v138 + 32))(v138, v135, 0);
          *((_QWORD *)&v146 + 1) = sub_1C5D428B0(v52, VRegUseAt, (llvm *)v54, 0);
          *(_DWORD *)v147 = v55;
          v136 = v50;
        }
        v56 = (_OWORD *)__p.n128_u64[1];
        if (__p.n128_u64[1] >= v144)
        {
          v60 = __p.n128_u64[0];
          v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4);
          v62 = v61 + 1;
          if (v61 + 1 > 0x555555555555555)
            goto LABEL_124;
          if (0x5555555555555556 * ((uint64_t)(v144 - __p.n128_u64[0]) >> 4) > v62)
            v62 = 0x5555555555555556 * ((uint64_t)(v144 - __p.n128_u64[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - __p.n128_u64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v63 = 0x555555555555555;
          else
            v63 = v62;
          if (v63)
          {
            if (v63 > 0x555555555555555)
              goto LABEL_126;
            v64 = (char *)operator new(48 * v63);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[48 * v61];
          v66 = *(_OWORD *)v147;
          *(_OWORD *)v65 = v146;
          *((_OWORD *)v65 + 1) = v66;
          *((_OWORD *)v65 + 2) = *(_OWORD *)&v147[16];
          v67 = (unint64_t)v65;
          if (v56 != (_OWORD *)v60)
          {
            do
            {
              v68 = *(v56 - 3);
              v69 = *(v56 - 1);
              *(_OWORD *)(v67 - 32) = *(v56 - 2);
              *(_OWORD *)(v67 - 16) = v69;
              *(_OWORD *)(v67 - 48) = v68;
              v67 -= 48;
              v56 -= 3;
            }
            while (v56 != (_OWORD *)v60);
            v56 = (_OWORD *)v60;
          }
          v59 = (unint64_t)(v65 + 48);
          __p.n128_u64[0] = v67;
          __p.n128_u64[1] = (unint64_t)(v65 + 48);
          v144 = (unint64_t)&v64[48 * v63];
          if (v56)
            operator delete(v56);
          v11 = a1;
        }
        else
        {
          v57 = v146;
          v58 = *(_OWORD *)&v147[16];
          *(_OWORD *)(__p.n128_u64[1] + 16) = *(_OWORD *)v147;
          v56[2] = v58;
          *v56 = v57;
          v59 = (unint64_t)(v56 + 3);
        }
        __p.n128_u64[1] = v59;
        if ((v147[16] & 8) != 0)
          v18 &= *((unsigned __int8 *)v50 + 16) < 0x1Cu;
      }
      v36 += 4;
      if (v36 == (llvm::Type ***)v40)
        goto LABEL_42;
    }
  }
  v136 = 0;
LABEL_42:
  sub_1C5062CEC(a2, 3, (uint64_t)&v146);
  if (v147[8])
  {
    v42 = *(uint64_t **)v146;
    v43 = sub_1C635FDC4(v11, *(unsigned __int8 **)v146);
    v45 = v43;
    v46 = v44;
    v47 = *v42;
    v48 = __p.n128_u64[1];
    if (__p.n128_u64[1] >= v144)
    {
      v70 = __p.n128_u64[0];
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 4);
      v72 = v71 + 1;
      if (v71 + 1 > 0x555555555555555)
LABEL_124:
        abort();
      if (0x5555555555555556 * ((uint64_t)(v144 - __p.n128_u64[0]) >> 4) > v72)
        v72 = 0x5555555555555556 * ((uint64_t)(v144 - __p.n128_u64[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - __p.n128_u64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v73 = 0x555555555555555;
      else
        v73 = v72;
      if (v73)
      {
        if (v73 > 0x555555555555555)
LABEL_126:
          sub_1C4764EE4();
        v74 = operator new(48 * v73);
      }
      else
      {
        v74 = 0;
      }
      v75 = (unint64_t)v74 + 48 * v71;
      *(_QWORD *)v75 = 0;
      *(_QWORD *)(v75 + 8) = v45;
      *(_DWORD *)(v75 + 16) = v46;
      *(_DWORD *)(v75 + 20) = 0;
      *(_QWORD *)(v75 + 24) = v47;
      *(_DWORD *)(v75 + 32) = 0x2000;
      *(_QWORD *)(v75 + 40) = 0;
      v49 = v75 + 48;
      if (v48 != v70)
      {
        do
        {
          v76 = *(_OWORD *)(v48 - 48);
          v77 = *(_OWORD *)(v48 - 16);
          *(_OWORD *)(v75 - 32) = *(_OWORD *)(v48 - 32);
          *(_OWORD *)(v75 - 16) = v77;
          *(_OWORD *)(v75 - 48) = v76;
          v75 -= 48;
          v48 -= 48;
        }
        while (v48 != v70);
        v48 = v70;
      }
      __p.n128_u64[0] = v75;
      __p.n128_u64[1] = v49;
      v144 = (unint64_t)v74 + 48 * v73;
      if (v48)
        operator delete((void *)v48);
    }
    else
    {
      *(_QWORD *)__p.n128_u64[1] = 0;
      *(_QWORD *)(v48 + 8) = v43;
      *(_QWORD *)(v48 + 16) = v44;
      *(_QWORD *)(v48 + 24) = v47;
      *(_DWORD *)(v48 + 32) = 0x2000;
      v49 = v48 + 48;
      *(_QWORD *)(v48 + 40) = 0;
    }
    __p.n128_u64[1] = v49;
    v11 = a1;
  }
  if ((v18 & 1) != 0)
    v78 = llvm::isInTailCallPosition((llvm *)a2, **(const llvm::CallBase ***)(v11 + 832), v41);
  else
    v78 = 0;
  v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 1768))(v138);
  v80 = *(_QWORD *)(v11 + 832);
  v81 = (const llvm::Value *)v136;
  *(_QWORD *)&v146 = 0;
  v82 = v11;
  v83 = ((v136 == 0) | ~v79) & v78;
  DWORD2(v146) = 0;
  *(_QWORD *)v147 = 0;
  *(_DWORD *)&v147[8] = *(_WORD *)&v147[8] & 0xFC00 | 0x20;
  *(_QWORD *)&v147[12] = 0xFFFFFFFFLL;
  *(_QWORD *)&v147[24] = 0;
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = v80;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v156 = v158;
  v157 = 0x2000000000;
  v158[192] = v159;
  v158[193] = 0x2000000000;
  v159[64] = &v160;
  v159[65] = 0x2000000000;
  v161 = &v163;
  v162 = 0x400000000;
  LOBYTE(v164) = 0;
  v166 = 0;
  v84 = *(_QWORD *)v82;
  v85 = *(_DWORD *)(v82 + 816);
  v139 = 0;
  LODWORD(v140) = v85;
  v86 = a8;
  if (v84)
  {
    v87 = (unsigned __int8 **)(v84 + 48);
    if (v87 != &v139)
    {
      v88 = *v87;
      v139 = v88;
      if (!v88)
        goto LABEL_94;
      llvm::MetadataTracking::track((uint64_t)&v139, v88, 2);
      if (v153)
        llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
    }
    v153 = v139;
    if (v139)
      llvm::MetadataTracking::track((uint64_t)&v153, v139, 2);
  }
  else
  {
LABEL_94:
    v153 = 0;
  }
  v154 = v140;
  *(_QWORD *)&v146 = sub_1C635C370(a1);
  DWORD2(v146) = v89;
  sub_1C6363998((uint64_t)&v146, v130, v131, a3, a4, &__p, a2);
  v147[10] = v83;
  v90 = *(_QWORD *)(a2 + 64);
  if (v90 && (*(_BYTE *)(v90 + 12) & 0x40) != 0)
  {
    v92 = *(_WORD *)&v147[8];
LABEL_98:
    v93 = a1;
    v94 = 64;
  }
  else
  {
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6);
    v92 = *(_WORD *)&v147[8];
    if (hasFnAttrOnCalledFunction)
      goto LABEL_98;
    v94 = 0;
    v93 = a1;
  }
  v95 = v94 | v92 & 0xFFBF;
  *(_WORD *)&v147[8] = v95;
  v96 = *(_DWORD *)(a2 + 20);
  if ((v96 & 0x80000000) == 0)
    goto LABEL_101;
  v120 = a2 - 32 * (v96 & 0x7FFFFFF);
  v123 = *(_QWORD *)(v120 - 8);
  v121 = v120 - 8;
  v122 = v123;
  if ((v123 & 0xFFFFFFFF0) == 0)
    goto LABEL_101;
  v124 = 0;
  v125 = (v122 >> 4);
  v126 = (uint64_t *)(v121 - v122);
  do
  {
    v127 = *v126;
    v126 += 2;
    if (*(_DWORD *)(v127 + 8) == 4)
      ++v124;
    --v125;
  }
  while (v125);
  v81 = (const llvm::Value *)v136;
  v93 = a1;
  v86 = a8;
  if (v124)
    v97 = 256;
  else
LABEL_101:
    v97 = 0;
  *(_WORD *)&v147[8] = v97 | v95 & 0xFEFF;
  if (v139)
    llvm::MetadataTracking::untrack((uint64_t)&v139, v139);
  if (v86)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 1784))(v138) & 1) == 0)
      llvm::report_fatal_error((llvm *)"This target doesn't support calls with ptrauth operand bundles.", (const char *)1);
    v164 = *v86;
    v165 = *((_QWORD *)v86 + 2);
    if (!v166)
      v166 = 1;
  }
  sub_1C6363864(v93, (uint64_t)&v146, a7, (uint64_t)&v139);
  if (v139)
  {
    v98 = (unsigned __int8 *)sub_1C5D281E4((uint64_t *)v93, *(_QWORD *)(v93 + 832), (_BYTE *)a2, (uint64_t)v139, v140);
    v139 = v98;
    LODWORD(v140) = v99;
    v100 = v99;
    v145 = a2;
    v101 = sub_1C6364290((uint64_t *)(v93 + 8), &v145);
    v101[1] = v98;
    *((_DWORD *)v101 + 4) = v100;
  }
  if (v81 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 1768))(v138))
  {
    v102 = &v161[2 * v162];
    v103 = *(v102 - 2);
    v104 = *(v102 - 1);
    VRegDefAt = llvm::SwiftErrorValueTracking::getOrCreateVRegDefAt(*(llvm::SwiftErrorValueTracking **)(v93 + 920), a2, *(const llvm::MachineBasicBlock **)(*(_QWORD *)(v93 + 912) + 640), v81);
    v106 = v152;
    v107 = v141;
    v108 = v142;
    v109 = *(_QWORD *)(v103 + 40) + 16 * v104;
    v110 = sub_1C5D428B0(v152, VRegDefAt, *(llvm **)v109, *(_QWORD *)(v109 + 8));
    v113 = *(_QWORD *)(v106 + 832);
    if (v113)
      LOWORD(v113) = *(_WORD *)(v113 + 8);
    v114 = sub_1C5D58E08(v106, (const char *)0x31, (const llvm::APInt *)&v153, (llvm *)1, 0, v107, v108, v112, v110, v111, v103, v104, SHIDWORD(v104), v113);
    v115 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(v115 + 192) = v114;
    *(_DWORD *)(v115 + 200) = v116;
  }
  sub_1C632CB64(&v146);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

_QWORD *sub_1C5D2680C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v18;
  unsigned __int8 **v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  int v37;
  _QWORD *result;
  unsigned __int8 *v39;
  int v40;
  __int16 v41;

  v41 = 0;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 >= 0x1C)
  {
    HIDWORD(v8) = v6 - 41;
    LODWORD(v8) = v6 - 41;
    v7 = v8 >> 1;
    v9 = v7 > 6;
    v10 = (1 << v7) & 0x47;
    if (v9 || v10 == 0)
    {
      v12 = 0;
    }
    else
    {
      v12 = *(_BYTE *)(a2 + 17) & 6 | 1;
      v41 = v12;
    }
    if (v6 > 0x37 || ((1 << v6) & 0xC1800000000000) == 0)
      goto LABEL_19;
LABEL_18:
    v41 = v12 & 0xFFF7 | (8 * ((*(_BYTE *)(a2 + 17) & 2) != 0)) | 1;
    goto LABEL_19;
  }
  if (v6 == 5)
  {
    v13 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v15) = v13 - 13;
    LODWORD(v15) = v13 - 13;
    v14 = v15 >> 1;
    v9 = v14 > 6;
    v16 = (1 << v14) & 0x47;
    if (v9 || v16 == 0)
    {
      v12 = 0;
    }
    else
    {
      v12 = *(_BYTE *)(a2 + 17) & 6 | 1;
      v41 = v12;
    }
    if (v13 <= 0x1B && ((1 << v13) & 0xC180000) != 0)
      goto LABEL_18;
  }
LABEL_19:
  if (sub_1C4774A9C(a2))
    sub_1C6361CFC(&v41, a2);
  v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(unsigned __int8 ***)(a2 - 8);
  else
    v19 = (unsigned __int8 **)(a2 - 32 * (v18 & 0x7FFFFFF));
  v20 = sub_1C635FDC4(a1, *v19);
  v22 = v21;
  v23 = *(_DWORD *)(a2 + 20);
  if ((v23 & 0x40000000) != 0)
    v24 = *(_QWORD *)(a2 - 8);
  else
    v24 = a2 - 32 * (v23 & 0x7FFFFFF);
  v26 = sub_1C635FDC4(a1, *(unsigned __int8 **)(v24 + 32));
  v28 = v27;
  v29 = *(_QWORD *)(a1 + 832);
  v30 = *(_QWORD *)a1;
  v31 = *(_DWORD *)(a1 + 816);
  v39 = 0;
  v40 = v31;
  if (v30)
  {
    v32 = (unsigned __int8 **)(v30 + 48);
    if (v32 != &v39)
    {
      v33 = *v32;
      v39 = v33;
      if (v33)
        llvm::MetadataTracking::track((uint64_t)&v39, v33, 2);
    }
  }
  v34 = v20[5] + 16 * v22;
  v35 = sub_1C5D56C70(v29, a3, (const llvm::APInt *)&v39, *(llvm **)v34, *(_QWORD *)(v34 + 8), (uint64_t)v20, v22, v25, (uint64_t)v26, v28, v41);
  v37 = v36;
  if (v39)
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
  v39 = (unsigned __int8 *)a2;
  result = sub_1C6364290((uint64_t *)(a1 + 8), &v39);
  result[1] = v35;
  *((_DWORD *)result + 4) = v37;
  return result;
}

_QWORD *sub_1C5D26A4C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6;
  unsigned __int8 **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t ShiftAmountTy;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 **v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  int v55;
  _QWORD *result;
  unsigned __int8 *v57;
  int v58;

  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
    v7 = (unsigned __int8 **)*((_QWORD *)a2 - 1);
  else
    v7 = (unsigned __int8 **)&a2[-32 * (v6 & 0x7FFFFFF)];
  v8 = sub_1C635FDC4(a1, *v7);
  v10 = v9;
  v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0)
    v12 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
  else
    v12 = &a2[-32 * (v11 & 0x7FFFFFF)];
  v13 = (uint64_t)sub_1C635FDC4(a1, *((unsigned __int8 **)v12 + 4));
  v15 = v14;
  v16 = (uint64_t *)(v8[5] + 16 * v10);
  ShiftAmountTy = llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(*(_QWORD *)(a1 + 832) + 24), *v16, v16[1], *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, 1);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    v20 = ShiftAmountTy;
    v21 = v18;
    v22 = (unsigned __int8 *)(*(_QWORD *)(v13 + 40) + 16 * v15);
    v23 = *v22;
    if (v23 != ShiftAmountTy
      || ((v24 = *((_QWORD *)v22 + 1), !v23) ? (v25 = v24 == v18) : (v25 = 1), !v25))
    {
      v26 = *(_QWORD *)(a1 + 832);
      v27 = *(_QWORD *)a1;
      v28 = *(_DWORD *)(a1 + 816);
      v57 = 0;
      v58 = v28;
      if (v27)
      {
        v29 = (unsigned __int8 **)(v27 + 48);
        if (v29 != &v57)
        {
          v30 = *v29;
          v57 = v30;
          if (v30)
            llvm::MetadataTracking::track((uint64_t)&v57, v30, 2);
        }
      }
      v13 = sub_1C6366544(v26, v13, v15, (uint64_t)&v57, v20, v21);
      v15 = v15 & 0xFFFFFFFF00000000 | v31;
      if (v57)
        llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
    }
  }
  v32 = a2[16];
  if (v32 >= 0x1C)
  {
    v33 = 0;
    HIDWORD(v35) = v32 - 41;
    LODWORD(v35) = v32 - 41;
    v34 = v35 >> 1;
    if (v34 > 6)
    {
      v37 = 0;
    }
    else
    {
      v36 = 1 << v34;
      v37 = 0;
      if ((v36 & 0x47) != 0)
      {
        v38 = a2[17];
        v33 = (v38 >> 1) & 1;
        v37 = (v38 >> 2) & 1;
      }
    }
    if (v32 > 0x37 || ((1 << v32) & 0xC1800000000000) == 0)
      goto LABEL_36;
LABEL_32:
    v44 = (4 * a2[17]) & 8;
    if ((v37 & 1) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  if (v32 != 5)
  {
    v44 = 0;
    goto LABEL_39;
  }
  v37 = 0;
  v39 = *((unsigned __int16 *)a2 + 9);
  HIDWORD(v41) = v39 - 13;
  LODWORD(v41) = v39 - 13;
  v40 = v41 >> 1;
  if (v40 > 6)
  {
    v33 = 0;
  }
  else
  {
    v42 = 1 << v40;
    v33 = 0;
    if ((v42 & 0x47) != 0)
    {
      v43 = a2[17];
      v33 = (v43 >> 1) & 1;
      v37 = (v43 >> 2) & 1;
    }
  }
  if (v39 <= 0x1B && ((1 << v39) & 0xC180000) != 0)
    goto LABEL_32;
LABEL_36:
  v44 = 0;
  if (!v37)
  {
LABEL_37:
    if (v33)
      goto LABEL_38;
LABEL_39:
    v45 = 0;
    goto LABEL_40;
  }
LABEL_33:
  v44 |= 4u;
  if ((v33 & 1) == 0)
    goto LABEL_39;
LABEL_38:
  v45 = 2;
LABEL_40:
  v46 = v44 | v45 | 1;
  v47 = *(_QWORD *)(a1 + 832);
  v48 = *(_QWORD *)a1;
  v49 = *(_DWORD *)(a1 + 816);
  v57 = 0;
  v58 = v49;
  if (v48)
  {
    v50 = (unsigned __int8 **)(v48 + 48);
    if (v50 != &v57)
    {
      v51 = *v50;
      v57 = v51;
      if (v51)
        llvm::MetadataTracking::track((uint64_t)&v57, v51, 2);
    }
  }
  v52 = v8[5] + 16 * v10;
  v53 = sub_1C5D56C70(v47, a3, (const llvm::APInt *)&v57, *(llvm **)v52, *(_QWORD *)(v52 + 8), (uint64_t)v8, v10, v19, v13, v15, v46);
  v55 = v54;
  if (v57)
    llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  v57 = a2;
  result = sub_1C6364290((uint64_t *)(a1 + 8), &v57);
  result[1] = v53;
  *((_DWORD *)result + 4) = v55;
  return result;
}

_QWORD *sub_1C5D26D94(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  int v7;
  unsigned __int8 **v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  _BOOL4 v14;
  unsigned __int8 *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  _QWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  _QWORD *result;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  _OWORD v58[2];
  unsigned __int8 *v59;
  int v60;

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 816);
  v59 = 0;
  v60 = v7;
  v9 = v6 == 0;
  v8 = (unsigned __int8 **)(v6 + 48);
  v9 = v9 || v8 == &v59;
  if (!v9)
  {
    v59 = *v8;
    if (v59)
      llvm::MetadataTracking::track((uint64_t)&v59, v59, 2);
  }
  v10 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v11 = *(unsigned __int8 **)v10;
  v12 = *(unsigned __int8 **)(v10 + 32);
  v13 = (unsigned __int8 **)(v10 + 64);
  if ((a3 & 1) != 0)
  {
    v57 = 0;
    v14 = 1;
  }
  else
  {
    v15 = *v13;
    v16 = (unint64_t *)(*v13 + 24);
    if (*((_DWORD *)v15 + 8) >= 0x41u)
      v16 = (unint64_t *)*v16;
    v17 = *v16;
    v9 = v17 == 0;
    v14 = v17 == 0;
    v18 = __clz(v17) ^ 0x3F;
    if (v9)
      v18 = 0;
    v57 = v18;
    v13 = (unsigned __int8 **)(v10 + 96);
  }
  v19 = *v13;
  v20 = sub_1C635FDC4(a1, v12);
  v22 = v21;
  v23 = sub_1C635FDC4(a1, v11);
  v25 = v24;
  v26 = sub_1C635FDC4(a1, v19);
  v52 = v27;
  v53 = (uint64_t)v26;
  v55 = v22;
  v28 = v20[5] + 16 * v22;
  v29 = sub_1C61312D0(*(_QWORD *)(a1 + 832), *(llvm **)v28, *(_QWORD *)(v28 + 8));
  v50 = v30;
  v51 = (uint64_t)v29;
  v54 = (uint64_t)v23;
  v31 = (uint64_t *)(v23[5] + 16 * v25);
  v32 = *v31;
  v33 = v31[1];
  if (v14)
  {
    sub_1C6365BD8(*(_QWORD *)(a1 + 832), *v31, v31[1]);
    v57 = v34;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 40);
  v36 = (unint64_t)v12 & 0xFFFFFFFFFFFFFFFBLL;
  v56 = (uint64_t)v20;
  v37 = a3;
  if (v12)
  {
    v39 = *(_DWORD *)(*(_QWORD *)v12 + 8);
    if ((v39 & 0xFE) == 0x12)
      v39 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v12 + 16) + 8);
    v38 = v39 >> 8;
  }
  else
  {
    v38 = 0;
  }
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v58);
  v40 = sub_1C484358C(v35 + 128, 80, 3);
  *(_QWORD *)v40 = v36;
  *(_QWORD *)(v40 + 8) = 0;
  *(_DWORD *)(v40 + 16) = v38;
  *(_BYTE *)(v40 + 20) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  v41 = v58[1];
  *(_OWORD *)(v40 + 40) = v58[0];
  *(_WORD *)(v40 + 32) = 2;
  *(_BYTE *)(v40 + 34) = v57;
  *(_OWORD *)(v40 + 56) = v41;
  *(_QWORD *)(v40 + 72) = 0;
  *(_WORD *)(v40 + 36) = 1;
  v42 = *(_QWORD *)(a1 + 832);
  v43 = sub_1C5D14AF0((uint64_t *)a1, a1 + 104);
  v45 = sub_1C5D60180(v42, (uint64_t)v43, v44, (uint64_t)&v59, v54, v25, v56, v55, v51, v50, v53, v52, v32, v33, v40, 0, 0, v37);
  v47 = v46;
  v48 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(v48 + 192) = v45;
  *(_DWORD *)(v48 + 200) = v46;
  *(_QWORD *)&v58[0] = a2;
  result = sub_1C6364290((uint64_t *)(a1 + 8), v58);
  result[1] = v45;
  *((_DWORD *)result + 4) = v47;
  if (v59)
    return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
  return result;
}

uint64_t sub_1C5D2703C(llvm::Constant *this, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *SplatValue;
  uint64_t result;
  int v19;
  llvm::Type *v20;
  llvm::LLVMContext *v21;
  unsigned __int8 v22;
  llvm *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  llvm *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  const char *v43;
  uint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;

  v13 = *(_QWORD *)(a6 + 832);
  v14 = *(_QWORD *)(v13 + 24);
  v15 = *(_QWORD *)(**(_QWORD **)(v13 + 40) + 40) + 272;
  v16 = *((unsigned __int8 *)this + 16);
  if (this && v16 <= 0x14)
  {
    SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue(this, 0);
    result = 0;
    if (!SplatValue)
      return result;
    *(_QWORD *)a2 = sub_1C635FDC4(a6, SplatValue);
    *(_DWORD *)(a2 + 8) = v19;
    v20 = (llvm::Type *)(*(unsigned int *)(*(_QWORD *)this + 32) | ((unint64_t)(*(_BYTE *)(*(_QWORD *)this + 8) == 19) << 32));
    v21 = *(llvm::LLVMContext **)(v13 + 56);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, v15, 0);
    v23 = (llvm *)sub_1C47AC578(v21, v22, 0, v20);
    v25 = v24;
    v26 = *(_QWORD *)a6;
    v27 = *(_DWORD *)(a6 + 816);
    v50 = 0;
    v51 = v27;
    if (v26)
    {
      v28 = (unsigned __int8 **)(v26 + 48);
      if (v28 != &v50)
      {
        v29 = *v28;
        v50 = v29;
        if (v29)
          llvm::MetadataTracking::track((uint64_t)&v50, v29, 2);
      }
    }
    *(_QWORD *)a3 = sub_1C6366AB4(v13, 0, (const llvm::APInt *)&v50, v23, v25, 0, 0);
    *(_DWORD *)(a3 + 8) = v30;
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
    *a4 = 0;
    v31 = *(_QWORD *)a6;
    v32 = *(_DWORD *)(a6 + 816);
    v50 = 0;
    v51 = v32;
    if (v31)
    {
      v33 = (unsigned __int8 **)(v31 + 48);
      if (v33 != &v50)
      {
        v34 = *v33;
        v50 = v34;
        if (v34)
          llvm::MetadataTracking::track((uint64_t)&v50, v34, 2);
      }
    }
    v35 = (llvm *)(*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, v15, 0);
    v36 = v13;
    v37 = 1;
  }
  else
  {
    result = 0;
    if (!this || v16 != 62)
      return result;
    if (*((_QWORD *)this + 5) != a7)
      return 0;
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 2)
      return 0;
    v39 = (unsigned __int8 *)*((_QWORD *)this - 8);
    if ((*(_DWORD *)(*(_QWORD *)v39 + 8) & 0xFE) == 0x12)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this - 4);
    if ((*(_DWORD *)(*(_QWORD *)v40 + 8) & 0xFE) != 0x12)
      return 0;
    *(_QWORD *)a2 = sub_1C635FDC4(a6, v39);
    *(_DWORD *)(a2 + 8) = v41;
    *(_QWORD *)a3 = sub_1C635FDC4(a6, v40);
    *(_DWORD *)(a3 + 8) = v42;
    *a4 = 0;
    v44 = sub_1C4E3D148(v15, *((_QWORD *)this + 9));
    if ((_DWORD)v43 == 1)
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.u32[0] != 1)
      return 0;
    v46 = *(_QWORD *)a6;
    v47 = *(_DWORD *)(a6 + 816);
    v50 = 0;
    v51 = v47;
    if (v46)
    {
      v48 = (unsigned __int8 **)(v46 + 48);
      if (v48 != &v50)
      {
        v49 = *v48;
        v50 = v49;
        if (v49)
          llvm::MetadataTracking::track((uint64_t)&v50, v49, 2);
      }
    }
    v35 = (llvm *)(*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, v15, 0);
    v36 = v13;
    v37 = v44;
  }
  *(_QWORD *)a5 = sub_1C6366AB4(v36, v37, (const llvm::APInt *)&v50, v35, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v38;
  if (v50)
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  return 1;
}

_QWORD *sub_1C5D2737C(uint64_t a1, uint64_t ***a2, unsigned __int8 a3)
{
  uint64_t v6;
  int v7;
  unsigned __int8 **v8;
  BOOL v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  unint64_t v12;
  char v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t ****v42;
  uint64_t ***v43;
  uint64_t ****v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  __int128 v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *result;
  uint64_t ****v68;
  uint64_t v69;
  char v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t ***v87;

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 816);
  v85 = 0;
  v86 = v7;
  v9 = v6 == 0;
  v8 = (unsigned __int8 **)(v6 + 48);
  v9 = v9 || v8 == &v85;
  if (!v9)
  {
    v85 = *v8;
    if (v85)
      llvm::MetadataTracking::track((uint64_t)&v85, v85, 2);
  }
  v10 = (unsigned __int8 **)&a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  v11 = v10 + 4;
  v12 = (unint64_t)*v10;
  v79 = a3;
  if ((a3 & 1) != 0)
  {
    v13 = 0;
    v14 = 1;
    v15 = 2;
  }
  else
  {
    v16 = *v11;
    v17 = (unint64_t *)(*v11 + 24);
    if (*((_DWORD *)v16 + 8) >= 0x41u)
      v17 = (unint64_t *)*v17;
    v18 = *v17;
    v9 = v18 == 0;
    v14 = v18 == 0;
    v19 = __clz(v18) ^ 0x3F;
    if (v9)
      v13 = 0;
    else
      v13 = v19;
    v11 = v10 + 8;
    v15 = 3;
  }
  v20 = *v11;
  v21 = v10[4 * v15];
  v22 = sub_1C635FDC4(a1, (unsigned __int8 *)v12);
  v24 = v23;
  v25 = sub_1C635FDC4(a1, v21);
  v27 = v26;
  v28 = sub_1C635FDC4(a1, v20);
  v75 = v29;
  v76 = (uint64_t)v28;
  v77 = v24;
  v78 = (uint64_t)v22;
  v30 = v22[5] + 16 * v24;
  v31 = sub_1C61312D0(*(_QWORD *)(a1 + 832), *(llvm **)v30, *(_QWORD *)(v30 + 8));
  v71 = v32;
  v72 = (uint64_t)v31;
  v73 = v27;
  v74 = (uint64_t)v25;
  v33 = (uint64_t *)(v25[5] + 16 * v27);
  v35 = *v33;
  v34 = v33[1];
  if (v14)
  {
    sub_1C6365BD8(*(_QWORD *)(a1 + 832), *v33, v33[1]);
    v13 = v36;
  }
  llvm::Instruction::getAAMetadata(a2, &v83);
  v70 = v13;
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_33;
  v37 = ***a2;
  v80[0] = (uint64_t)a2;
  v38 = *(_DWORD *)(v37 + 2496);
  if (v38)
  {
    v39 = *(_QWORD *)(v37 + 2480);
    v40 = v38 - 1;
    v41 = v40 & ((a2 >> 4) ^ (a2 >> 9));
    v42 = (uint64_t ****)(v39 + 40 * v41);
    v43 = *v42;
    if (*v42 == a2)
      goto LABEL_28;
    v44 = 0;
    v45 = 1;
    while (v43 != (uint64_t ***)-4096)
    {
      if (v44)
        v46 = 0;
      else
        v46 = v43 == (uint64_t ***)-8192;
      if (v46)
        v44 = v42;
      v47 = v41 + v45++;
      v41 = v47 & v40;
      v42 = (uint64_t ****)(v39 + 40 * v41);
      v43 = *v42;
      if (*v42 == a2)
        goto LABEL_28;
    }
    if (v44)
      v68 = v44;
    else
      v68 = v42;
  }
  else
  {
    v68 = 0;
  }
  v42 = (uint64_t ****)sub_1C541AB24(v37 + 2480, (uint64_t)v80, v80, v68);
  v69 = v80[0];
  v42[3] = 0;
  v42[4] = 0;
  *v42 = (uint64_t ***)v69;
  v42[1] = (uint64_t ***)(v42 + 3);
  v42[2] = (uint64_t ***)0x100000000;
LABEL_28:
  v48 = *((unsigned int *)v42 + 4);
  if (!(_DWORD)v48)
  {
LABEL_33:
    v51 = 0;
    goto LABEL_34;
  }
  v49 = v42[1] + 1;
  v50 = 16 * v48;
  while (*((_DWORD *)v49 - 2) != 4)
  {
    v51 = 0;
    v49 += 2;
    v50 -= 16;
    if (!v50)
      goto LABEL_34;
  }
  v51 = *v49;
LABEL_34:
  v80[0] = v12;
  v80[1] = -2;
  v81 = v83;
  v82 = v84;
  v52 = *(_QWORD *)(a1 + 840);
  if (v52 && (llvm::AAResults::pointsToConstantMemory(v52, (uint64_t)v80, 0) & 1) != 0)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    v55 = *(_QWORD **)(a1 + 832);
    v56 = (uint64_t)(v55 + 14);
  }
  else
  {
    v55 = *(_QWORD **)(a1 + 832);
    v56 = v55[24];
    v54 = v55[25];
    v53 = 1;
  }
  v57 = v55[5];
  v58 = v12 & 0xFFFFFFFFFFFFFFFBLL;
  if (v12)
  {
    v59 = *(_DWORD *)(*(_QWORD *)v12 + 8);
    if ((v59 & 0xFE) == 0x12)
      v59 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v12 + 16) + 8);
    LODWORD(v12) = v59 >> 8;
  }
  v60 = sub_1C484358C(v57 + 128, 80, 3);
  *(_QWORD *)v60 = v58;
  *(_QWORD *)(v60 + 8) = 0;
  *(_DWORD *)(v60 + 16) = v12;
  *(_BYTE *)(v60 + 20) = 0;
  *(_QWORD *)(v60 + 24) = 0;
  v61 = v84;
  *(_OWORD *)(v60 + 40) = v83;
  *(_WORD *)(v60 + 32) = 1;
  *(_BYTE *)(v60 + 34) = v70;
  *(_OWORD *)(v60 + 56) = v61;
  *(_QWORD *)(v60 + 72) = v51;
  *(_WORD *)(v60 + 36) = 1;
  v62 = sub_1C5D5FD20(*(_QWORD *)(a1 + 832), v35, v34, (uint64_t)&v85, v56, v54, v78, v77, v72, v71, v76, v75, v74, v73, v35, v34, v60, 0, v79);
  v64 = v63;
  if (v53)
  {
    v65 = *(unsigned int *)(a1 + 112);
    if (v65 >= *(_DWORD *)(a1 + 116))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v65 + 1, 16);
      LODWORD(v65) = *(_DWORD *)(a1 + 112);
    }
    v66 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 16 * v65);
    *v66 = v62;
    v66[1] = 1;
    ++*(_DWORD *)(a1 + 112);
  }
  v87 = a2;
  result = sub_1C6364290((uint64_t *)(a1 + 8), &v87);
  result[1] = v62;
  *((_DWORD *)result + 4) = v64;
  if (v85)
    return (_QWORD *)llvm::MetadataTracking::untrack((uint64_t)&v85, v85);
  return result;
}

void sub_1C5D27790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void **v20;
  void *v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BOOL4 v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  __int16 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t v69;
  int v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned __int8 **v93;
  unsigned __int8 *v94;
  unint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 RetAlignment;
  char v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned __int8 **v108;
  unsigned __int8 *v109;
  int v110;
  _QWORD *v111;
  unsigned int v112;
  char v113;
  uint64_t v114;
  char v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  int v126;
  uint64_t v127;
  int v128;
  unsigned __int8 *v129;
  int v130;
  unsigned __int8 *v131;
  int v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  int v143;
  __int128 v144;
  unsigned int v145;
  char v146;
  void *v147;
  uint64_t v148;
  _BYTE v149[64];
  uint64_t *v150;
  uint64_t v151;
  _OWORD v152[8];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v127 = *(_QWORD *)(a2 - 32);
  v6 = *(_QWORD *)(v127 + 112);
  if (!v6)
  {
    v150 = (uint64_t *)v152;
    v151 = 0x800000000;
LABEL_6:
    v9 = sub_1C635C370(a1);
    v8 = 0;
    v128 = 0;
    v10 = (uint64_t **)&v150[2 * v151];
    *v10 = v9;
    v10[1] = v11;
    LODWORD(v151) = v151 + 1;
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(v6 + 17);
  if ((v7 & 0x10) == 0)
  {
    v150 = (uint64_t *)v152;
    v151 = 0x800000000;
    if ((v7 & 0x20) != 0)
    {
      v8 = 0;
      v152[0] = *(_OWORD *)(*(_QWORD *)(a1 + 832) + 192);
      v128 = 1;
      LODWORD(v151) = 1;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v128 = 0;
  v150 = (uint64_t *)v152;
  v151 = 0x800000000;
  v8 = 1;
LABEL_8:
  v137 = 0;
  LOBYTE(v138) = 0;
  v142 = 0;
  v143 = 256;
  v141 = 0;
  v139 = 0;
  v140 = 0;
  v12 = *(_QWORD *)(a1 + 832);
  v13 = *(_QWORD *)(v12 + 24);
  v14 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 472))(v13, &v137, a2, *(_QWORD *)(v12 + 40), a3);
  if (v14)
    v15 = (v137 - 49) >= 0xFFFFFFFE;
  else
    v15 = 1;
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 832);
    v17 = *(_QWORD *)a1;
    v18 = *(_DWORD *)(a1 + 816);
    v147 = 0;
    LODWORD(v148) = v18;
    v19 = v16;
    if (v17)
    {
      v20 = (void **)(v17 + 48);
      v19 = v16;
      if (v20 != &v147)
      {
        v21 = *v20;
        v147 = v21;
        v19 = v16;
        if (v21)
        {
          llvm::MetadataTracking::track((uint64_t)&v147, (unsigned __int8 *)v21, 2);
          v19 = *(_QWORD *)(a1 + 832);
        }
      }
    }
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, *(_QWORD *)(**(_QWORD **)(v19 + 40) + 40) + 272, 0);
    v23 = sub_1C6366AB4(v16, a3, (const llvm::APInt *)&v147, (llvm *)v22, 0, 1, 0);
    v25 = v24;
    v26 = v151;
    if (v151 >= HIDWORD(v151))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 16);
      v26 = v151;
    }
    v27 = (char *)&v150[2 * v26];
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v25;
    LODWORD(v151) = v151 + 1;
    if (v147)
      llvm::MetadataTracking::untrack((uint64_t)&v147, (unsigned __int8 *)v147);
  }
  v28 = *(unsigned __int8 *)(a2 + 16);
  if (v28 == 84)
  {
    v29 = 0;
  }
  else if (v28 == 39)
  {
    v29 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v29 = 2;
  }
  v30 = *(_DWORD *)(a2 + 20);
  if (v30 < 0 && (v117 = a2 - 32 * (v30 & 0x7FFFFFF), v118 = *(_QWORD *)(v117 - 8), (v118 & 0xFFFFFFFF0) != 0))
  {
    v32 = -(uint64_t)(v30 & 0x7FFFFFF);
    v31 = (*(_DWORD *)(v117 - 12) - *(_DWORD *)(v117 - v118));
  }
  else
  {
    v31 = 0;
    v32 = -(uint64_t)(v30 & 0x7FFFFFF);
  }
  v33 = -32 * v29 - 32 * v31 - 32 * v32 - 32;
  if ((v33 & 0x1FFFFFFFE0) != 0)
  {
    v51 = 0;
    v52 = (v33 >> 5);
    v53 = a2;
    do
    {
      v54 = *(_QWORD *)(v53 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if ((llvm::CallBase::paramHasAttr(a2, v51, 9) & 1) != 0)
      {
        v56 = (llvm *)sub_1C47A7FD0(v13, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(_QWORD *)v54, (llvm::Type *)1);
        v57 = *(_QWORD *)(a1 + 832);
        if (*(_BYTE *)(v54 + 16) == 16)
        {
          v147 = 0;
          v148 = 0;
          v58 = sub_1C5D3FAF8(v57, v54, (const llvm::APInt *)&v147, v56, v55, 1, 0);
        }
        else
        {
          v147 = 0;
          v148 = 0;
          v58 = sub_1C6366D64(v57, v54, (const llvm::APInt *)&v147, v56, v55, 1);
        }
        v60 = v58;
        v61 = v59;
        v62 = v151;
        if (v151 >= (unint64_t)HIDWORD(v151))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 16);
          v62 = v151;
        }
        v63 = (char *)&v150[2 * v62];
        *(_QWORD *)v63 = v60;
        *((_QWORD *)v63 + 1) = v61;
        LODWORD(v151) = v151 + 1;
        if (v147)
          llvm::MetadataTracking::untrack((uint64_t)&v147, (unsigned __int8 *)v147);
      }
      else
      {
        v64 = sub_1C635FDC4(a1, (unsigned __int8 *)v54);
        v66 = v65;
        v67 = v151;
        if (v151 >= (unint64_t)HIDWORD(v151))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 16);
          v67 = v151;
        }
        v68 = (uint64_t **)&v150[2 * v67];
        *v68 = v64;
        v68[1] = v66;
        LODWORD(v151) = v151 + 1;
      }
      ++v51;
      v53 += 32;
    }
    while (v52 != v51);
  }
  v147 = v149;
  v148 = 0x400000000;
  llvm::ComputeValueVTs(v13, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272), *(_QWORD *)a2, (uint64_t)&v147, 0, 0, 0);
  v34 = v148;
  if ((v8 & 1) == 0)
  {
    if (v148 >= HIDWORD(v148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 16);
      v34 = v148;
    }
    *((_OWORD *)v147 + v34) = xmmword_1C64169E0;
    v34 = v148 + 1;
    LODWORD(v148) = v148 + 1;
  }
  v35 = sub_1C636AB20(*(_QWORD *)(a1 + 832), (uint64_t *)v147, v34);
  v37 = v36;
  v136 = 0;
  v38 = sub_1C4774A9C(a2);
  v39 = 0;
  if (v38)
  {
    sub_1C6361CFC(&v136, a2);
    v39 = v136;
  }
  v40 = *(_QWORD *)(a1 + 832);
  v133 = v40;
  v134 = v39;
  v135 = *(_QWORD *)(v40 + 832);
  *(_QWORD *)(v40 + 832) = &v133;
  if (!v14)
  {
    if (v8)
    {
      v41 = *(_QWORD *)a1;
      v42 = *(_DWORD *)(a1 + 816);
      v129 = 0;
      v130 = v42;
      if (v41 && (v43 = (unsigned __int8 **)(v41 + 48), v43 != &v129) && (v44 = *v43, (v129 = v44) != 0))
      {
        llvm::MetadataTracking::track((uint64_t)&v129, v44, 2);
        v47 = *(uint64_t **)(v40 + 832);
        v45 = v150;
        v46 = v151;
        if (!v47)
        {
          v48 = 0;
          goto LABEL_39;
        }
      }
      else
      {
        v45 = v150;
        v46 = v151;
        v47 = &v133;
      }
      v48 = *((_WORD *)v47 + 4);
LABEL_39:
      v49 = (uint64_t)sub_1C636D410(v40, (const char *)0x2E, (const llvm::APInt *)&v129, v35, v37, v45, v46, v48);
      LODWORD(v37) = v50;
      if (v129)
        llvm::MetadataTracking::untrack((uint64_t)&v129, v129);
      v37 = v37;
      goto LABEL_77;
    }
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
    {
      v69 = *(_QWORD *)a1;
      v70 = *(_DWORD *)(a1 + 816);
      v129 = 0;
      v130 = v70;
      if (v69 && (v71 = (unsigned __int8 **)(v69 + 48), v71 != &v129) && (v72 = *v71, (v129 = v72) != 0))
      {
        llvm::MetadataTracking::track((uint64_t)&v129, v72, 2);
        v75 = *(uint64_t **)(v40 + 832);
        v73 = v150;
        v74 = v151;
        if (!v75)
        {
          v76 = 0;
          goto LABEL_62;
        }
      }
      else
      {
        v73 = v150;
        v74 = v151;
        v75 = &v133;
      }
      v76 = *((_WORD *)v75 + 4);
LABEL_62:
      v77 = v40;
      v78 = 48;
LABEL_69:
      v49 = (uint64_t)sub_1C636D410(v77, (const char *)v78, (const llvm::APInt *)&v129, v35, v37, v73, v74, v76);
      LODWORD(v37) = v84;
      if (v129)
        llvm::MetadataTracking::untrack((uint64_t)&v129, v129);
      v37 = v37;
LABEL_72:
      v85 = *(unsigned __int16 *)(v49 + 58) - 1;
      if (v128)
      {
        v86 = *(unsigned int *)(a1 + 112);
        if (v86 >= *(_DWORD *)(a1 + 116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v86 + 1, 16);
          LODWORD(v86) = *(_DWORD *)(a1 + 112);
        }
        v87 = (uint64_t *)(*(_QWORD *)(a1 + 104) + 16 * v86);
        *v87 = v49;
        v87[1] = v85;
        ++*(_DWORD *)(a1 + 112);
      }
      else
      {
        v88 = *(_QWORD *)(a1 + 832);
        *(_QWORD *)(v88 + 192) = v49;
        *(_DWORD *)(v88 + 200) = v85;
      }
      goto LABEL_77;
    }
    v79 = *(_QWORD *)a1;
    v80 = *(_DWORD *)(a1 + 816);
    v129 = 0;
    v130 = v80;
    if (v79 && (v81 = (unsigned __int8 **)(v79 + 48), v81 != &v129) && (v82 = *v81, (v129 = v82) != 0))
    {
      llvm::MetadataTracking::track((uint64_t)&v129, v82, 2);
      v83 = *(uint64_t **)(v40 + 832);
      v73 = v150;
      v74 = v151;
      if (!v83)
      {
        v76 = 0;
        goto LABEL_68;
      }
    }
    else
    {
      v73 = v150;
      v74 = v151;
      v83 = &v133;
    }
    v76 = *((_WORD *)v83 + 4);
LABEL_68:
    v77 = v40;
    v78 = 47;
    goto LABEL_69;
  }
  v90 = v137;
  v91 = *(_QWORD *)a1;
  v92 = *(_DWORD *)(a1 + 816);
  v131 = 0;
  v132 = v92;
  if (v91)
  {
    v93 = (unsigned __int8 **)(v91 + 48);
    if (v93 != &v131)
    {
      v94 = *v93;
      v131 = v94;
      if (v94)
        llvm::MetadataTracking::track((uint64_t)&v131, v94, 2);
    }
  }
  v95 = v140;
  v126 = v90;
  v124 = v151;
  v125 = v150;
  v122 = v139;
  v123 = v138;
  v121 = v141;
  if (v140 < 8)
  {
    v99 = 0;
  }
  else
  {
    v96 = (_DWORD *)(v140 & 0xFFFFFFFFFFFFFFF8);
    if ((v140 & 4) != 0 || !v96)
    {
      v99 = v96[3];
    }
    else
    {
      v97 = *(_QWORD *)v96;
      v98 = *(_DWORD *)(*(_QWORD *)v96 + 8);
      if ((v98 & 0xFE) == 0x12)
        v98 = *(_DWORD *)(**(_QWORD **)(v97 + 16) + 8);
      v99 = v98 >> 8;
    }
  }
  v112 = (unsigned __int16)v143;
  v120 = HIWORD(v143);
  v119 = v142;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, &v129);
  *(_QWORD *)&v144 = v95;
  *((_QWORD *)&v144 + 1) = v121;
  v145 = v99;
  v146 = 0;
  sub_1C6365BD8(v40, v123, v122);
  if (v112 >= 0x100)
    v115 = v112;
  else
    v115 = v113;
  v49 = (uint64_t)sub_1C636ACA4(v40, v126, (uint64_t)&v131, v35, v37, v125, v124, v114, v123, v122, &v144, v115, 0, v120, v119, (uint64_t)&v129);
  LODWORD(v37) = v116;
  if (v131)
    llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
  v37 = v37;
  if ((v8 & 1) == 0)
    goto LABEL_72;
LABEL_77:
  v89 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (v89 != 7)
  {
    if ((v89 & 0xFE) != 0x12)
    {
      v49 = sub_1C5D281E4((uint64_t *)a1, *(_QWORD *)(a1 + 832), (_BYTE *)a2, v49, v37);
      LODWORD(v37) = v100;
    }
    v101 = sub_1C543FD8C(a2);
    v102 = HIBYTE(v101);
    if (HIBYTE(v101))
    {
      v104 = v101;
    }
    else
    {
      v129 = *(unsigned __int8 **)(v127 + 112);
      RetAlignment = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v129);
      v104 = RetAlignment;
      v102 = HIBYTE(RetAlignment);
    }
    if (byte_1ED824E90 && v102)
    {
      v105 = *(_QWORD *)(a1 + 832);
      v106 = *(_QWORD *)a1;
      v107 = *(_DWORD *)(a1 + 816);
      v129 = 0;
      v130 = v107;
      if (v106)
      {
        v108 = (unsigned __int8 **)(v106 + 48);
        if (v108 != &v129)
        {
          v109 = *v108;
          v129 = v109;
          if (v109)
            llvm::MetadataTracking::track((uint64_t)&v129, v109, 2);
        }
      }
      v49 = (uint64_t)sub_1C5D569A0(v105, (uint64_t)&v129, v49, v37, v104);
      LODWORD(v37) = v110;
      if (v129)
        llvm::MetadataTracking::untrack((uint64_t)&v129, v129);
    }
    v129 = (unsigned __int8 *)a2;
    v111 = sub_1C6364290((uint64_t *)(a1 + 8), &v129);
    v111[1] = v49;
    *((_DWORD *)v111 + 4) = v37;
  }
  *(_QWORD *)(v133 + 832) = v135;
  if (v147 != v149)
    free(v147);
  if (v150 != (uint64_t *)v152)
    free(v150);
}

uint64_t sub_1C5D281E4(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  _QWORD *v25;
  void *v26;
  int v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v33;
  int v34;
  int64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  uint64_t v54;
  llvm *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t ExtendedIntegerVT;
  uint64_t v73;
  unsigned int v74;
  unsigned __int8 *v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  void *__s1;
  unsigned int v82;
  void *__s2;
  unsigned int v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[9];

  v87[8] = *MEMORY[0x1E0C80C00];
  if ((a3[23] & 0x20) == 0)
    return a4;
  v9 = ***(_QWORD ***)a3;
  v85 = a3;
  v10 = *(_DWORD *)(v9 + 2496);
  if (!v10)
  {
    v25 = 0;
LABEL_29:
    v14 = sub_1C541AB24(v9 + 2480, (uint64_t)&v85, (uint64_t *)&v85, v25);
    v26 = v85;
    v14[3] = 0;
    v14[4] = 0;
    *v14 = v26;
    v14[1] = v14 + 3;
    v14[2] = 0x100000000;
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(v9 + 2480);
  v12 = v10 - 1;
  v13 = v12 & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (_QWORD *)(v11 + 40 * v13);
  v15 = (void *)*v14;
  if ((_BYTE *)*v14 != a3)
  {
    v16 = 0;
    v17 = 1;
    while (v15 != (void *)-4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == (void *)-8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (_QWORD *)(v11 + 40 * v13);
      v15 = (void *)*v14;
      if ((_BYTE *)*v14 == a3)
        goto LABEL_12;
    }
    if (v16)
      v25 = v16;
    else
      v25 = v14;
    goto LABEL_29;
  }
LABEL_12:
  v20 = *((unsigned int *)v14 + 4);
  if ((_DWORD)v20)
  {
    v21 = (uint64_t *)(v14[1] + 8);
    v22 = 16 * v20;
    while (*((_DWORD *)v21 - 2) != 4)
    {
      v21 += 2;
      v22 -= 16;
      if (!v22)
        return a4;
    }
    if (*v21)
    {
      llvm::getConstantRangeFromMetadata(*v21, (uint64_t)&__s1);
      if (v82 > 0x40)
      {
        v74 = v82;
        v42 = v82 + 63;
        v43 = __s1;
        v44 = (char *)__s2;
        if (!memcmp(__s1, __s2, (v42 >> 3) & 0x3FFFFFF8))
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v74)
            goto LABEL_39;
          v68 = 0;
          v45 = v42 >> 6;
          v69 = v42 >> 6;
          do
          {
            v23 = v69-- < 1;
            if (v23)
              break;
            v70 = v43[v69];
            v68 += __clz(v70);
          }
          while (!v70);
          v71 = v74 | 0xFFFFFFC0;
          if ((v74 & 0x3F) == 0)
            v71 = 0;
          if (v68 + v71 == v74)
            goto LABEL_39;
        }
        else
        {
          v45 = v42 >> 6;
        }
        v46 = v45;
        while (v46 * 8)
        {
          v47 = v43[v46 - 1];
          v48 = *(_QWORD *)&v44[v46 * 8 - 8];
          --v46;
          v23 = v47 > v48;
          if (v47 != v48)
            goto LABEL_22;
        }
      }
      else
      {
        if (__s1 == __s2 && (!v82 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v82))
          || !((unint64_t)__s2 | (unint64_t)__s1))
        {
          goto LABEL_39;
        }
        v23 = __s1 > __s2;
LABEL_22:
        if (v23)
          goto LABEL_39;
      }
      llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&__s1, (llvm::APInt *)&v79);
      if (v80 > 0x40)
      {
        v27 = 0;
        v28 = ((unint64_t)v80 + 63) >> 6;
        v29 = v79;
        do
        {
          v23 = v28-- < 1;
          if (v23)
            break;
          v30 = *(_QWORD *)(v79 + 8 * v28);
          v27 += __clz(v30);
        }
        while (!v30);
        v31 = v80 | 0xFFFFFFC0;
        if ((v80 & 0x3F) == 0)
          v31 = 0;
        if (v27 + v31 != v80)
        {
          v24 = (uint64_t *)a4;
          if (!v79)
            goto LABEL_38;
LABEL_37:
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
          goto LABEL_38;
        }
      }
      else if (v79)
      {
        v24 = (uint64_t *)a4;
LABEL_38:
        a4 = (uint64_t)v24;
LABEL_39:
        if (v84 >= 0x41 && __s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        if (v82 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        return a4;
      }
      llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&__s1, (llvm::APInt *)&v77);
      if (v78 > 0x40)
      {
        v34 = 0;
        v35 = ((unint64_t)v78 + 63) >> 6;
        do
        {
          v23 = v35-- < 1;
          if (v23)
            break;
          v36 = *(_QWORD *)(v77 + 8 * v35);
          v34 += __clz(v36);
        }
        while (!v36);
        v37 = v78 | 0xFFFFFFC0;
        if ((v78 & 0x3F) == 0)
          v37 = 0;
        v33 = v34 + v37;
      }
      else
      {
        v33 = v78 + __clz(v77) - 64;
      }
      if (v78 == v33)
        v38 = 1;
      else
        v38 = v78 - v33;
      if ((int)v38 <= 31)
      {
        switch((_DWORD)v38)
        {
          case 1:
            v39 = 0;
            v40 = 0;
            v41 = 2;
            goto LABEL_78;
          case 0x10:
            v39 = 0;
            v40 = 0;
            v41 = 4;
            goto LABEL_78;
          case 8:
            v39 = 0;
            v40 = 0;
            v41 = 3;
            goto LABEL_78;
        }
      }
      else
      {
        switch((_DWORD)v38)
        {
          case 0x20:
            v39 = 0;
            v40 = 0;
            v41 = 5;
LABEL_78:
            v49 = v41 | v39;
            v50 = *a1;
            v51 = *((_DWORD *)a1 + 204);
            v75 = 0;
            v76 = v51;
            if (v50)
            {
              v52 = (unsigned __int8 **)(v50 + 48);
              if (v52 != &v75)
              {
                v53 = *v52;
                v75 = v53;
                if (v53)
                {
                  v67 = v40;
                  llvm::MetadataTracking::track((uint64_t)&v75, v53, 2);
                  v40 = v67;
                }
              }
            }
            v54 = *(_QWORD *)(a4 + 40) + 16 * a5;
            v55 = *(llvm **)v54;
            v56 = *(_QWORD *)(v54 + 8);
            v57 = sub_1C6367494(a2, v49, v40);
            v60 = *(_QWORD *)(a2 + 832);
            if (v60)
              LOWORD(v60) = *(_WORD *)(v60 + 8);
            v61 = sub_1C5D56C70(a2, 4, (const llvm::APInt *)&v75, v55, v56, a4, a5, v59, v57, v58, v60);
            v24 = v61;
            v63 = *(unsigned __int16 *)(a4 + 58);
            if (v63 != 1)
            {
              v85 = v87;
              v87[0] = v61;
              v87[1] = v62;
              v86 = 0x400000001;
              v64 = 1;
              LODWORD(v65) = 1;
              do
              {
                if (v65 >= HIDWORD(v86))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v65 + 1, 16);
                  LODWORD(v65) = v86;
                }
                v66 = (uint64_t *)((char *)v85 + 16 * v65);
                *v66 = a4;
                v66[1] = v64;
                v65 = (v86 + 1);
                LODWORD(v86) = v86 + 1;
                ++v64;
              }
              while ((_DWORD)v63 != (_DWORD)v64);
              v24 = sub_1C5D5C56C(a2, (uint64_t *)v85, v65, (const llvm::APInt *)&v75);
              if (v85 != v87)
                free(v85);
            }
            if (v75)
              llvm::MetadataTracking::untrack((uint64_t)&v75, v75);
            if (v78 >= 0x41 && v77)
              MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
            if (v80 < 0x41)
              goto LABEL_38;
            v29 = v79;
            if (!v79)
              goto LABEL_38;
            goto LABEL_37;
          case 0x40:
            v39 = 0;
            v40 = 0;
            v41 = 6;
            goto LABEL_78;
          case 0x80:
            v39 = 0;
            v40 = 0;
            v41 = 7;
            goto LABEL_78;
        }
      }
      ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(*(llvm::EVT **)(a2 + 56), (llvm::LLVMContext *)v38);
      v40 = v73;
      v39 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
      v41 = ExtendedIntegerVT;
      goto LABEL_78;
    }
  }
  return a4;
}

unint64_t sub_1C5D287F0(unint64_t result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t ExtendedSizeInBits;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = result;
  while (1)
  {
    v3 = *a2;
    v4 = *(unsigned __int16 *)(*a2 + 24);
    if (v4 <= 0x91)
      break;
    if (*(unsigned __int16 *)(*a2 + 24) > 0xD7u)
    {
      if (v4 != 216)
        return result;
    }
    else if (v4 != 201)
    {
      if (v4 != 146 && v4 != 149)
        return result;
      goto LABEL_14;
    }
LABEL_9:
    a2 = *(uint64_t **)(v3 + 32);
  }
  if (v4 - 3 < 2)
    goto LABEL_9;
  if (v4 == 54)
  {
LABEL_14:
    if (*(_WORD *)(v3 + 56))
    {
      v5 = *(__int128 **)(v3 + 32);
      v6 = 40 * *(unsigned __int16 *)(v3 + 56);
      do
      {
        v7 = *v5;
        v5 = (__int128 *)((char *)v5 + 40);
        v14 = v7;
        result = sub_1C5D287F0(v2, &v14);
        v6 -= 40;
      }
      while (v6);
    }
    return result;
  }
  if (v4 == 50)
  {
    v8 = *(_QWORD *)(v3 + 32);
    v9 = *(_QWORD *)(v8 + 40);
    v10 = *(_DWORD *)(v9 + 76);
    v13 = *(_OWORD *)(*(_QWORD *)(v9 + 40) + 16 * *(unsigned int *)(v8 + 48));
    if ((_BYTE)v13)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v13);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v13);
    *(_QWORD *)&v14 = ExtendedSizeInBits;
    *((_QWORD *)&v14 + 1) = v12;
    return sub_1C6329A4C(v2, v10, &v14);
  }
  return result;
}

void sub_1C5D28908(uint64_t a1, const char *a2, uint64_t a3)
{
  const llvm::DIExpression *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t **v9;
  char *v11;
  llvm::MDNode *FragmentExpression;
  char v13;
  int v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::UndefValue *v21;
  unsigned __int8 *v22;
  _QWORD *v23;
  int8x16_t v24;
  char v25;

  if (a3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = a2 + 16;
    v7 = 24 * a3;
    do
    {
      if (*v6 == 1)
      v8 = *(v6 - 2);
      v9 = **(uint64_t ****)a1;
      llvm::DIExpression::getFragmentInfo(v9[3], v9[4], &v24);
      if (v25)
      {
        if (v24.i64[0] < (unint64_t)(v4 + v8) && v24.i64[0] > (unint64_t)v4)
          v8 = v24.i32[0] - (_DWORD)v4;
        if (v24.i64[0] <= (unint64_t)v4)
          break;
      }
      FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)v9, v4, v8);
      v13 = (char)v11;
      if (*v6 == 1)
      v14 = *(v6 - 2);
      if (v13)
      {
        sub_1C5D28AFC(*(_QWORD *)(a1 + 40), *(v6 - 4), FragmentExpression, **(_DWORD **)(a1 + 48) != 0);
        v15 = a2;
        v16 = *(_QWORD *)(v5 + 912);
        v17 = *(unsigned int *)(v16 + 232);
        if (v17 >= *(unsigned int *)(v16 + 236))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v16 + 224, v16 + 240, v17 + 1, 8);
          v17 = *(unsigned int *)(v16 + 232);
        }
        *(_QWORD *)(*(_QWORD *)(v16 + 224) + 8 * v17) = v15;
        ++*(_DWORD *)(v16 + 232);
      }
      else
      {
        v18 = *(_QWORD *)(v5 + 832);
        v19 = **(_QWORD **)(a1 + 16);
        v20 = **(_QWORD **)a1;
        v21 = llvm::UndefValue::get(***(llvm::UndefValue ****)(a1 + 24), (llvm::Type *)v11);
        v22 = **(unsigned __int8 ***)(a1 + 32);
        v24.i64[0] = (uint64_t)v22;
        if (v22)
          llvm::MetadataTracking::track((uint64_t)&v24, v22, 2);
        v23 = (_QWORD *)sub_1C636E9B0(v18, v19, v20, (uint64_t)v21, (unsigned __int8 **)&v24, *(_DWORD *)(v5 + 816));
        if (v24.i64[0])
          llvm::MetadataTracking::untrack((uint64_t)&v24, (unsigned __int8 *)v24.i64[0]);
        sub_1C636ED38(*(_QWORD *)(v5 + 832), v23, 0);
      }
      v4 = (const llvm::DIExpression *)((_DWORD)v4 + v14);
      v6 += 6;
      v7 -= 24;
    }
    while (v7);
  }
}

llvm::MachineFunction *sub_1C5D28AFC(uint64_t a1, int a2, llvm::MDNode *a3, int a4)
{
  llvm::MachineFunction *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::MachineInstr *v12;
  llvm::MachineFunction *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  llvm::MDNode *v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  llvm::MDNode *v21;
  uint64_t v22;
  unsigned __int8 *v23;

  if (a2 < 0 && llvm::MachineFunction::useDebugInstrRef(*(llvm::MachineFunction **)a1))
  {
    v8 = *(llvm::MachineFunction **)a1;
    v9 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
    v10 = **(unsigned __int8 ***)(a1 + 16);
    v18 = v10;
    if (v10)
    {
      llvm::MetadataTracking::track((uint64_t)&v18, v10, 2);
      v23 = v18;
      if (v18)
        llvm::MetadataTracking::track((uint64_t)&v23, v18, 2);
    }
    else
    {
      v23 = 0;
    }
    v11 = v9 + 720;
    v12 = (llvm::MachineInstr *)*((_QWORD *)v8 + 28);
    if (v12)
      *((_QWORD *)v8 + 28) = *(_QWORD *)v12;
    else
      v12 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v8 + 128, 72, 3);
    v19 = v23;
    if (v23)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v23, v23, (uint64_t)&v19);
      v23 = 0;
    }
    llvm::MachineInstr::MachineInstr(v12, v8, v11, &v19, 0);
    if (v19)
      llvm::MetadataTracking::untrack((uint64_t)&v19, v19);
    if (v23)
      llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
    if (v18)
      llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
    v20 = 0;
    v21 = 0;
    LODWORD(v19) = 0;
    HIDWORD(v19) = a2;
    v22 = 0;
    llvm::MachineInstr::addOperand(v12, v8, (const llvm::MachineOperand *)&v19);
    LODWORD(v19) = 1;
    v20 = 0;
    v21 = 0;
    llvm::MachineInstr::addOperand(v12, v8, (const llvm::MachineOperand *)&v19);
    v16 = **(llvm::MDNode ***)(a1 + 24);
    LODWORD(v19) = 14;
    v20 = 0;
    v21 = v16;
    llvm::MachineInstr::addOperand(v12, v8, (const llvm::MachineOperand *)&v19);
    if (a4)
      a3 = llvm::DIExpression::prepend(a3, (const llvm::DIExpression *)1, 0);
    LODWORD(v19) = 14;
    v20 = 0;
    v21 = a3;
    llvm::MachineInstr::addOperand(v12, v8, (const llvm::MachineOperand *)&v19);
  }
  else
  {
    v13 = *(llvm::MachineFunction **)a1;
    v14 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 624;
    v15 = **(unsigned __int8 ***)(a1 + 16);
    v19 = v15;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v19, v15, 2);
    v8 = llvm::BuildMI(v13, &v19, v14, a4, a2, **(_QWORD **)(a1 + 24), (uint64_t)a3);
    if (v19)
      llvm::MetadataTracking::untrack((uint64_t)&v19, v19);
  }
  return v8;
}

void sub_1C5D28D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t ***v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned __int8 **v22;
  unsigned __int8 *v23;
  uint64_t ***v24;
  llvm::VPIntrinsic *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned __int32 v29;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t ***v36;
  uint64_t v37;
  llvm::DIExpression *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  _BOOL4 v45;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t ***v52;
  uint64_t **v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t ***v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Value *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t ***v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ****v90;
  uint64_t ***v91;
  int v92;
  int v93;
  uint64_t ***v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t FrameAllocSymbol;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  llvm::MachineFunction *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  unsigned int v132;
  uint64_t **v133;
  uint64_t v134;
  uint64_t **v135;
  uint64_t v136;
  uint64_t **v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t ***v142;
  unsigned __int8 v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 v152;
  uint64_t **v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t **v171;
  uint64_t v172;
  uint64_t **v173;
  uint64_t v174;
  uint64_t **v175;
  uint64_t v176;
  uint64_t **v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  void *v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t ***v189;
  uint64_t v190;
  uint64_t *v191;
  _BYTE *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  llvm::DataLayout *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  int v204;
  _QWORD *v205;
  uint64_t v206;
  int v207;
  uint64_t **v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  unsigned int v212;
  uint64_t **v213;
  __int16 v214;
  uint64_t v215;
  int v216;
  void **v217;
  void *v218;
  uint64_t v219;
  uint64_t *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  int v236;
  int v238;
  unsigned __int8 *v239;
  uint64_t v240;
  uint64_t *v241;
  void *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  llvm::EVT *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  llvm *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  int v287;
  int v288;
  BOOL v289;
  uint64_t **v290;
  uint64_t *v291;
  int v292;
  uint64_t v293;
  unsigned __int8 v294;
  unint64_t v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t **v307;
  uint64_t *v308;
  _QWORD *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  int v314;
  int v315;
  llvm::EVT *v316;
  unsigned __int8 v317;
  uint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  llvm *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v333;
  uint64_t *v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  llvm *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  int v365;
  _QWORD *v366;
  uint64_t **v367;
  uint64_t *v368;
  int v369;
  int v370;
  unint64_t v371;
  int v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  int v381;
  int v382;
  uint64_t v383;
  _QWORD *v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  void **v390;
  void *v391;
  uint64_t *v392;
  unsigned int v393;
  unsigned int v394;
  uint64_t *v395;
  int v396;
  int v397;
  uint64_t *v398;
  int v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  unsigned __int32 v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t *v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  llvm *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  BOOL v430;
  __int16 v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t *v440;
  unint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t *v448;
  int v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int ParamAlignment;
  unsigned __int8 v457;
  const llvm::TargetMachine *v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t **v461;
  llvm::APInt *v462;
  unsigned int v463;
  BOOL v464;
  unint64_t v465;
  uint64_t *v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  llvm *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  unsigned __int8 v480;
  uint64_t v481;
  unsigned __int8 *v482;
  uint64_t v483;
  BOOL v484;
  uint64_t v485;
  uint64_t *v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t *v489;
  int v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  __int16 v497;
  uint64_t v498;
  __int16 v499;
  const llvm::TargetMachine *v500;
  uint64_t v501;
  uint64_t ***v502;
  uint64_t *v503;
  uint64_t **v504;
  _QWORD *v505;
  uint64_t v506;
  int v507;
  char v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  uint64_t v513;
  void *v514;
  void *v515;
  uint64_t *v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  unsigned int v523;
  uint64_t v524;
  llvm *v525;
  uint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t *v533;
  int v534;
  int v535;
  uint64_t v536;
  int v537;
  uint64_t *v538;
  char v539;
  llvm *v540;
  uint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t *v544;
  uint64_t v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unsigned __int8 v550;
  _QWORD *v551;
  unint64_t v552;
  uint64_t v553;
  __int16 v554;
  uint64_t v555;
  uint64_t *v556;
  int v557;
  int v558;
  _QWORD *v559;
  unint64_t v560;
  uint64_t *v561;
  uint64_t *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t *v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  _QWORD *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t TempSymbol;
  uint64_t v581;
  uint64_t *v582;
  unint64_t *v583;
  unint64_t v584;
  _QWORD *v585;
  uint64_t *v586;
  int v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t v593;
  __int16 v594;
  uint64_t v595;
  __int16 v596;
  const llvm::TargetMachine *v597;
  uint64_t v598;
  uint64_t ***v599;
  uint64_t *v600;
  uint64_t **v601;
  _QWORD *v602;
  uint64_t v603;
  int v604;
  char v605;
  uint64_t *v606;
  unint64_t v607;
  unint64_t v608;
  uint64_t *v609;
  uint64_t v610;
  uint64_t v611;
  unint64_t v612;
  unint64_t v613;
  uint64_t v614;
  int v615;
  BOOL v616;
  uint64_t v617;
  unsigned int v618;
  uint64_t v619;
  void *v620;
  void *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t v628;
  BOOL v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t *v636;
  int v637;
  unint64_t v638;
  uint64_t *v639;
  uint64_t *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unsigned int v647;
  unsigned __int8 v648;
  const llvm::TargetMachine *v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t **v652;
  llvm::APInt *v653;
  unsigned int v654;
  BOOL v655;
  uint64_t v656;
  uint64_t *v657;
  unint64_t v658;
  unint64_t v659;
  _QWORD *v660;
  unint64_t v661;
  uint64_t v662;
  __int16 v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unsigned __int8 v677;
  unsigned __int8 *v678;
  uint64_t v679;
  BOOL v680;
  uint64_t v681;
  uint64_t *v682;
  unsigned int v683;
  uint64_t v684;
  llvm *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  int v690;
  int v691;
  uint64_t i;
  void **v693;
  int v694;
  int v695;
  uint64_t v696;
  unsigned __int8 v697;
  uint64_t v698;
  uint64_t v699;
  __int16 v700;
  uint64_t v701;
  uint64_t *v702;
  int v703;
  int v704;
  uint64_t *v705;
  void **v706;
  uint64_t v707;
  uint64_t *v708;
  unsigned int v709;
  llvm **v710;
  llvm *v711;
  uint64_t v712;
  uint64_t *v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t *v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  unint64_t v725;
  uint64_t *v726;
  uint64_t *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t *v735;
  uint64_t v736;
  const llvm::TargetMachine *v737;
  unsigned int v738;
  unsigned __int8 v739;
  uint64_t **v740;
  llvm::APInt *v741;
  unsigned int v742;
  BOOL v743;
  _QWORD *v744;
  void *v745;
  void *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  BOOL v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t v762;
  unsigned __int8 v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t *v767;
  unsigned int v768;
  uint64_t *v769;
  uint64_t v770;
  unint64_t v771;
  uint64_t *v772;
  unint64_t v773;
  unint64_t v774;
  uint64_t *v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  __int16 v781;
  uint64_t v782;
  llvm *v783;
  BOOL v784;
  int v786;
  char v788;
  uint64_t *v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t *v793;
  unint64_t v794;
  int v795;
  uint64_t ***v796;
  uint64_t *v797;
  uint64_t v798;
  uint64_t **v799;
  uint64_t *v800;
  uint64_t v801;
  uint64_t **v802;
  _QWORD *v803;
  int v804;
  uint64_t v805;
  uint64_t *v806;
  int v807;
  unint64_t v808;
  int v809;
  unint64_t v810;
  uint64_t *v811;
  unint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t *v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t *v821;
  unsigned int v822;
  llvm **v823;
  unint64_t v824;
  uint64_t *v825;
  unint64_t v826;
  uint64_t v827;
  llvm::Value *v828;
  uint64_t **v829;
  unint64_t **v830;
  unsigned int v831;
  unint64_t v832;
  uint64_t *v833;
  unint64_t v834;
  unint64_t v835;
  uint64_t *v836;
  unint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t *v841;
  unsigned int v842;
  uint64_t *v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t *v847;
  int v848;
  int v849;
  uint64_t v850;
  unsigned __int8 v851;
  int v852;
  void *v853;
  char v854;
  void *v855;
  uint64_t ExtendedSizeInBits;
  uint64_t *v857;
  int v858;
  int v859;
  uint64_t *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t *v863;
  uint64_t v864;
  __int16 v865;
  const llvm::TargetMachine *v866;
  int v867;
  uint64_t ***v868;
  uint64_t *v869;
  uint64_t **v870;
  _QWORD *v871;
  int v872;
  uint64_t v873;
  int v874;
  char v875;
  uint64_t *v876;
  int v877;
  int v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t *v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t *v888;
  uint64_t v891;
  unsigned __int8 v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t *v896;
  unsigned int v897;
  uint64_t *v898;
  unint64_t v899;
  uint64_t v900;
  llvm::Value *v901;
  uint64_t k;
  void **v903;
  int v904;
  int v905;
  int v906;
  int v907;
  int v908;
  int v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  uint64_t *v914;
  uint64_t v915;
  uint64_t v916;
  llvm *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  uint64_t v922;
  uint64_t *v923;
  unsigned int v924;
  llvm **v925;
  unint64_t v926;
  uint64_t *v927;
  unint64_t v928;
  uint64_t v929;
  unsigned __int8 v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t *v933;
  unint64_t v934;
  unint64_t v935;
  uint64_t v936;
  __int16 v937;
  uint64_t *v938;
  uint64_t v939;
  unsigned __int8 *v940;
  uint64_t *v941;
  uint64_t v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  int v955;
  void **v956;
  void *v957;
  llvm::Constant **v958;
  llvm::Constant *v959;
  int v960;
  uint64_t *v961;
  int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  BOOL v966;
  uint64_t **v967;
  unint64_t *v968;
  unint64_t v969;
  char v970;
  uint64_t v971;
  unint64_t v972;
  uint64_t v973;
  char v974;
  uint64_t ***v975;
  uint64_t v976;
  int v977;
  uint64_t v978;
  int v979;
  unsigned int v980;
  uint64_t ****v981;
  uint64_t ***v982;
  uint64_t ****v983;
  int v984;
  BOOL v985;
  unsigned int v986;
  uint64_t v987;
  _QWORD *v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t *v991;
  unint64_t v992;
  unint64_t v993;
  uint64_t **v994;
  uint64_t *v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  llvm::APInt *v999;
  unsigned int v1000;
  BOOL v1001;
  unint64_t v1002;
  uint64_t **v1003;
  uint64_t *v1004;
  llvm::APInt *v1005;
  unsigned int v1006;
  BOOL v1007;
  uint64_t *v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t *v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unsigned int v1015;
  unsigned __int8 v1016;
  const llvm::TargetMachine *v1017;
  unsigned int v1018;
  uint64_t v1019;
  uint64_t **v1020;
  llvm::APInt *v1021;
  unsigned int v1022;
  BOOL v1023;
  uint64_t v1024;
  unint64_t v1025;
  unint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t *v1033;
  int v1034;
  int v1035;
  _QWORD *v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t *v1039;
  unint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t *v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t *v1047;
  uint64_t v1050;
  uint64_t *v1051;
  unsigned int v1052;
  uint64_t *v1053;
  unint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t *v1060;
  uint64_t v1061;
  __int16 v1062;
  uint64_t v1063;
  int v1064;
  void **v1065;
  void *v1066;
  _QWORD *v1067;
  unsigned int v1068;
  unsigned int v1069;
  uint64_t v1070;
  uint64_t *v1071;
  int v1072;
  uint64_t *v1073;
  unsigned int v1074;
  unsigned int v1075;
  uint64_t v1076;
  uint64_t *v1077;
  uint64_t v1078;
  _QWORD *v1079;
  uint64_t v1080;
  uint64_t v1081;
  unsigned int v1082;
  _QWORD *v1083;
  uint64_t *v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t *v1087;
  uint64_t v1088;
  uint64_t *v1089;
  _QWORD *v1090;
  uint64_t v1091;
  uint64_t v1092;
  unsigned int v1093;
  _QWORD *v1094;
  unsigned int v1095;
  uint64_t **v1096;
  uint64_t v1097;
  uint64_t **v1098;
  uint64_t v1099;
  uint64_t v1100;
  _QWORD *v1101;
  uint64_t v1102;
  uint64_t *v1103;
  uint64_t v1104;
  int v1105;
  llvm::Value *TypeInfo;
  unsigned int TypeIDFor;
  uint64_t ***v1108;
  llvm::DIVariable *v1109;
  uint64_t **v1110;
  uint64_t v1111;
  uint64_t *v1112;
  uint64_t v1113;
  char *v1114;
  int v1115;
  unsigned __int8 *v1116;
  char v1117;
  uint64_t v1118;
  uint64_t *v1119;
  unsigned int v1120;
  llvm **v1121;
  unint64_t v1122;
  uint64_t *v1123;
  unint64_t v1124;
  uint64_t v1125;
  void *v1126;
  uint64_t *v1127;
  int v1128;
  uint64_t j;
  void **v1130;
  int v1131;
  int v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  __int16 v1136;
  uint64_t v1137;
  _QWORD *v1138;
  unint64_t v1139;
  uint64_t *v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  unint64_t v1144;
  uint64_t *v1145;
  uint64_t *v1146;
  uint64_t *v1147;
  unsigned int v1148;
  uint64_t **v1149;
  uint64_t *v1150;
  llvm::DataLayout *v1151;
  uint64_t v1152;
  uint64_t v1153;
  int v1154;
  uint64_t *v1156;
  uint64_t *v1157;
  uint64_t *v1158;
  unsigned int v1159;
  uint64_t **v1160;
  int v1161;
  uint64_t v1162;
  uint64_t *v1163;
  int v1164;
  uint64_t v1165;
  int v1166;
  uint64_t v1167;
  unint64_t v1168;
  char *v1169;
  __int128 *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t *v1173;
  unsigned int v1174;
  unsigned int v1175;
  uint64_t *v1176;
  int v1177;
  int v1178;
  uint64_t v1179;
  void *v1180;
  _DWORD *v1181;
  uint64_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  llvm::LLVMContext *v1185;
  llvm::Type *v1186;
  llvm::LLVMContext *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  int v1192;
  void **v1193;
  uint64_t m;
  void **v1195;
  unsigned __int8 **v1196;
  unsigned __int8 *v1197;
  _QWORD *v1198;
  __int16 v1199;
  uint64_t v1200;
  int v1201;
  int v1202;
  int v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  _DWORD *v1209;
  unsigned int v1210;
  char v1211;
  uint64_t v1212;
  unsigned __int8 **v1213;
  unsigned __int8 **v1214;
  unsigned __int8 **v1215;
  uint64_t v1216;
  unsigned __int8 ***v1217;
  uint64_t v1218;
  llvm *v1219;
  uint64_t v1220;
  uint64_t *v1221;
  int v1222;
  int v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  _QWORD *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t *v1230;
  unsigned int v1231;
  llvm **v1232;
  unint64_t v1233;
  uint64_t *v1234;
  unint64_t v1235;
  uint64_t v1236;
  unint64_t v1237;
  unint64_t v1238;
  uint64_t *v1239;
  unint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unsigned __int8 *v1243;
  uint64_t **v1244;
  uint64_t *v1245;
  _QWORD *v1246;
  int v1247;
  unint64_t v1248;
  char *v1249;
  _DWORD *v1250;
  uint64_t v1251;
  uint64_t *v1252;
  uint64_t v1253;
  unsigned int v1254;
  BOOL v1255;
  unsigned int v1256;
  int v1257;
  uint64_t *v1258;
  uint64_t *v1259;
  unsigned int v1260;
  unint64_t v1261;
  unint64_t v1262;
  uint64_t *v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  int v1267;
  void **v1268;
  void *v1269;
  unsigned __int8 **v1270;
  llvm::Constant *v1271;
  uint64_t *v1272;
  unsigned int v1273;
  unsigned int v1274;
  uint64_t *v1275;
  uint64_t v1276;
  BOOL v1277;
  uint64_t **v1278;
  unint64_t *v1279;
  int v1280;
  uint64_t *v1281;
  unint64_t v1282;
  char v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  char v1287;
  char v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t *v1291;
  int v1292;
  uint64_t v1293;
  unsigned int v1294;
  unsigned int v1295;
  uint64_t v1296;
  BOOL v1297;
  unint64_t v1298;
  __int128 v1299;
  uint64_t *v1300;
  unsigned int v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t *v1304;
  void *v1305;
  int v1306;
  int v1307;
  uint64_t v1308;
  uint64_t v1309;
  unsigned int v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t *v1313;
  unint64_t v1314;
  int v1315;
  unsigned int v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  unint64_t v1321;
  uint64_t v1322;
  unint64_t v1323;
  uint64_t *v1324;
  unint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unint64_t v1328;
  uint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t VectorLengthParamPos;
  unsigned __int8 v1337;
  unsigned int v1338;
  unint64_t v1339;
  uint64_t v1340;
  llvm *v1341;
  uint64_t v1342;
  uint64_t ***v1343;
  int v1344;
  uint64_t v1345;
  uint64_t v1346;
  int v1347;
  int v1348;
  uint64_t v1349;
  unint64_t v1350;
  uint64_t *v1351;
  unint64_t v1352;
  uint64_t v1353;
  __int16 v1354;
  unsigned int v1355;
  uint64_t v1356;
  uint64_t **v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  unsigned __int8 **v1363;
  unsigned __int8 *v1364;
  uint64_t v1365;
  unsigned __int8 *v1366;
  uint64_t ***v1367;
  unsigned __int16 v1368;
  uint64_t v1369;
  BOOL v1370;
  uint64_t v1371;
  int v1372;
  uint64_t v1373;
  int v1374;
  unsigned int v1375;
  uint64_t ****v1376;
  uint64_t ***v1377;
  uint64_t ****v1378;
  int v1379;
  BOOL v1380;
  unsigned int v1381;
  uint64_t v1382;
  _QWORD *v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  unint64_t v1387;
  uint64_t v1388;
  char v1389;
  uint64_t v1390;
  unsigned int v1391;
  uint64_t v1392;
  unsigned int v1393;
  unint64_t v1394;
  __int128 v1395;
  uint64_t ***v1396;
  BOOL v1397;
  uint64_t *v1398;
  unsigned int v1399;
  uint64_t v1400;
  char v1401;
  uint64_t v1402;
  char v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  int v1408;
  __int128 *v1409;
  unsigned __int8 *v1410;
  unint64_t v1411;
  unsigned __int16 PointerAlignment;
  uint64_t v1413;
  BOOL v1414;
  char v1415;
  uint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  char v1419;
  unint64_t v1420;
  unsigned int v1421;
  unint64_t v1422;
  __int128 v1423;
  uint64_t v1424;
  uint64_t *v1425;
  int v1426;
  int v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  _QWORD *v1434;
  int v1435;
  _QWORD *v1436;
  int v1437;
  uint64_t v1438;
  _QWORD *v1439;
  unsigned __int8 *v1440;
  unsigned __int8 **v1441;
  uint64_t v1442;
  int v1443;
  unsigned __int8 **v1444;
  unsigned __int8 *v1445;
  unint64_t v1446;
  unsigned __int16 v1447;
  uint64_t v1448;
  BOOL v1449;
  char v1450;
  uint64_t v1451;
  unint64_t v1452;
  uint64_t v1453;
  char v1454;
  uint64_t v1455;
  int v1456;
  uint64_t v1457;
  int v1458;
  unsigned int v1459;
  uint64_t ****v1460;
  uint64_t ***v1461;
  uint64_t ****v1462;
  int v1463;
  BOOL v1464;
  unsigned int v1465;
  uint64_t v1466;
  _QWORD *v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  __int16 v1471;
  uint64_t v1472;
  unint64_t v1473;
  unsigned int v1474;
  unint64_t v1475;
  __int128 v1476;
  _QWORD *v1477;
  int v1478;
  int v1479;
  uint64_t v1480;
  int v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  unint64_t v1486;
  unsigned int v1487;
  unint64_t v1488;
  __int128 v1489;
  _QWORD *v1490;
  int v1491;
  int v1492;
  uint64_t v1493;
  _QWORD *v1494;
  _QWORD *v1495;
  uint64_t v1496;
  unsigned __int8 v1497;
  int v1498;
  unsigned int v1499;
  uint64_t v1500;
  llvm *v1501;
  uint64_t v1502;
  int v1503;
  uint64_t ****v1504;
  uint64_t ***v1505;
  uint64_t ***v1506;
  unint64_t EVT;
  uint64_t v1508;
  unint64_t v1509;
  uint64_t v1510;
  llvm *v1511;
  uint64_t v1512;
  __int16 v1513;
  uint64_t *v1514;
  int v1515;
  int v1516;
  _QWORD *v1517;
  uint64_t v1518;
  uint64_t *v1519;
  unsigned int v1520;
  uint64_t v1521;
  llvm *v1522;
  uint64_t v1523;
  uint64_t *v1524;
  unint64_t v1525;
  unint64_t v1526;
  uint64_t *v1527;
  __int16 v1528;
  unint64_t v1529;
  uint64_t v1530;
  unint64_t v1531;
  uint64_t v1532;
  uint64_t *v1533;
  unsigned int v1534;
  llvm **v1535;
  llvm *v1536;
  uint64_t v1537;
  uint64_t *v1538;
  unint64_t v1539;
  int v1540;
  uint64_t *v1541;
  int v1542;
  uint64_t v1543;
  unsigned int v1544;
  unsigned int v1545;
  uint64_t v1546;
  BOOL v1547;
  unint64_t v1548;
  __int128 v1549;
  uint64_t *v1550;
  unsigned int v1551;
  int v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  int v1559;
  uint64_t v1560;
  _QWORD *v1561;
  _QWORD *v1562;
  unsigned __int8 *v1563;
  void **v1564;
  void *v1565;
  uint64_t v1566;
  llvm *v1567;
  uint64_t v1568;
  llvm *v1569;
  uint64_t v1570;
  __n128 *v1571;
  uint64_t v1572;
  uint64_t *v1573;
  int v1574;
  int v1575;
  uint64_t *v1576;
  int v1577;
  uint64_t v1578;
  uint64_t *v1579;
  int v1580;
  int v1581;
  _QWORD *v1582;
  uint64_t *v1583;
  int v1584;
  int v1585;
  _QWORD *v1586;
  uint64_t v1587;
  uint64_t v1588;
  __int16 v1589;
  char v1590;
  char v1591;
  uint64_t *v1592;
  uint64_t *v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  char v1597;
  uint64_t v1598;
  _QWORD *v1599;
  uint64_t *v1600;
  uint64_t v1601;
  unsigned int v1602;
  uint64_t v1603;
  uint64_t v1604;
  unsigned int v1605;
  uint64_t v1606;
  int v1607;
  uint64_t *v1608;
  int v1609;
  _QWORD *v1610;
  uint64_t *v1611;
  uint64_t v1612;
  unsigned int v1613;
  int v1614;
  int v1615;
  unint64_t *v1616;
  uint64_t v1617;
  unint64_t v1618;
  uint64_t v1619;
  unint64_t v1620;
  char *v1621;
  uint64_t v1622;
  int v1623;
  uint64_t *v1624;
  int v1625;
  _QWORD *v1626;
  uint64_t *v1627;
  uint64_t v1628;
  unsigned int v1629;
  int v1630;
  int v1631;
  uint64_t v1632;
  __int16 v1633;
  char v1634;
  char v1635;
  uint64_t *v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  unsigned __int8 v1640;
  uint64_t v1641;
  _QWORD *v1642;
  uint64_t *v1643;
  uint64_t v1644;
  unsigned int v1645;
  uint64_t v1646;
  uint64_t v1647;
  unsigned int v1648;
  uint64_t v1649;
  char v1650;
  char v1651;
  unsigned __int8 v1652;
  uint64_t v1653;
  uint64_t *v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t **v1659;
  uint64_t *v1660;
  unsigned int v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  llvm::Value **v1671;
  llvm::Value *v1672;
  int v1673;
  int v1674;
  unint64_t v1675;
  unint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t *v1679;
  int v1680;
  int v1681;
  uint64_t v1682;
  _QWORD *v1683;
  uint64_t v1684;
  int v1685;
  uint64_t *v1686;
  int v1687;
  uint64_t **v1688;
  uint64_t *v1689;
  unsigned int v1690;
  uint64_t v1691;
  int v1692;
  uint64_t v1693;
  uint64_t v1694;
  __int16 v1695;
  uint64_t v1696;
  unsigned __int8 v1697;
  int v1698;
  unsigned int v1699;
  uint64_t v1700;
  unsigned __int8 v1701;
  int v1702;
  uint64_t **v1703;
  unint64_t v1704;
  uint64_t *v1705;
  unint64_t v1706;
  uint64_t v1707;
  unint64_t v1708;
  uint64_t v1709;
  llvm *v1710;
  uint64_t v1711;
  __int16 v1712;
  int v1713;
  BOOL v1714;
  unsigned int v1715;
  unsigned int v1716;
  int v1717;
  uint64_t v1718;
  char v1719;
  uint64_t v1720;
  char v1721;
  char v1722;
  uint64_t v1723;
  uint64_t *v1724;
  uint64_t v1725;
  uint64_t v1726;
  _QWORD *v1727;
  uint64_t *v1728;
  uint64_t v1729;
  unsigned int v1730;
  uint64_t v1731;
  uint64_t v1732;
  unsigned int v1733;
  uint64_t *v1734;
  unint64_t v1735;
  uint64_t v1736;
  __int16 v1737;
  uint64_t v1738;
  _QWORD *v1739;
  unint64_t v1740;
  uint64_t v1741;
  char *v1742;
  uint64_t v1743;
  unint64_t v1744;
  uint64_t v1745;
  unint64_t v1746;
  char *v1747;
  uint64_t v1748;
  unsigned __int8 v1749;
  int v1750;
  unsigned int v1751;
  uint64_t v1752;
  unsigned __int8 v1753;
  int v1754;
  unsigned __int8 **v1755;
  unsigned __int8 *v1756;
  unsigned __int8 *v1757;
  unint64_t v1758;
  unint64_t v1759;
  unint64_t v1760;
  uint64_t v1761;
  llvm *v1762;
  uint64_t v1763;
  __int16 v1764;
  uint64_t *v1765;
  uint64_t v1766;
  uint64_t v1767;
  unint64_t v1768;
  unsigned __int8 v1769;
  unsigned __int8 v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t *v1773;
  unsigned int v1774;
  uint64_t v1775;
  int v1776;
  uint64_t v1777;
  _QWORD *v1778;
  uint64_t v1779;
  int v1780;
  uint64_t v1781;
  unsigned __int8 v1782;
  uint64_t v1783;
  uint64_t v1784;
  unsigned int v1785;
  unsigned int v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t *FixedStack;
  int v1790;
  char v1791;
  int v1792;
  _QWORD *v1793;
  unsigned int v1794;
  uint64_t *v1795;
  llvm::DataLayout *v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t v1799;
  unsigned int v1800;
  BOOL v1801;
  uint64_t v1802;
  uint64_t *v1803;
  unsigned int v1804;
  unsigned int v1805;
  uint64_t v1806;
  uint64_t v1808;
  uint64_t v1809;
  char *v1810;
  __n128 *v1811;
  char *v1812;
  __n128 v1813;
  unint64_t v1814;
  unint64_t v1815;
  int64_t v1816;
  uint64_t v1817;
  _QWORD *v1818;
  int v1819;
  BOOL v1820;
  unsigned int v1821;
  uint64_t v1822;
  uint64_t v1823;
  unsigned int v1824;
  uint64_t v1825;
  uint64_t v1826;
  unsigned int v1827;
  uint64_t v1828;
  uint64_t v1829;
  unsigned int v1830;
  uint64_t v1831;
  uint64_t *v1832;
  int v1833;
  int8x8_t v1834;
  uint8x8_t v1835;
  unint64_t v1836;
  uint64_t *v1837;
  uint64_t *v1838;
  unint64_t v1839;
  uint64_t v1840;
  unsigned int v1841;
  uint64_t v1842;
  llvm *v1843;
  uint64_t v1844;
  uint64_t v1845;
  unsigned int v1846;
  uint64_t v1847;
  unsigned int v1848;
  uint64_t v1849;
  uint64_t v1850;
  llvm *v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t *v1854;
  unint64_t v1855;
  unint64_t v1856;
  uint64_t *v1857;
  unint64_t v1858;
  unint64_t v1859;
  uint64_t *v1860;
  unint64_t v1861;
  unint64_t v1862;
  uint64_t *v1863;
  unint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t *v1868;
  unint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t *v1872;
  unint64_t v1873;
  unint64_t v1874;
  uint64_t *v1875;
  unint64_t v1876;
  unint64_t v1877;
  uint64_t *v1878;
  unint64_t v1879;
  uint64_t v1880;
  __int16 v1881;
  uint64_t v1882;
  unint64_t v1883;
  unint64_t v1884;
  uint64_t *v1885;
  unint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t *v1889;
  unint64_t v1890;
  uint64_t v1891;
  uint64_t v1892;
  uint64_t *v1893;
  unint64_t v1894;
  unint64_t v1895;
  uint64_t *v1896;
  unint64_t v1897;
  unint64_t v1898;
  uint64_t *v1899;
  unint64_t v1900;
  uint64_t v1901;
  __int16 v1902;
  uint64_t v1903;
  unint64_t v1904;
  unint64_t v1905;
  uint64_t *v1906;
  unint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t *v1910;
  unint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  int v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  _QWORD *v1918;
  int v1919;
  int v1920;
  uint64_t v1921;
  _QWORD *v1922;
  _QWORD *v1923;
  int v1924;
  void *v1925;
  uint64_t v1926;
  uint64_t v1927;
  _QWORD *v1928;
  int v1929;
  int v1930;
  uint64_t v1931;
  _QWORD *v1932;
  uint64_t *v1933;
  uint64_t v1934;
  uint64_t *v1935;
  int v1936;
  unsigned int v1937;
  __int128 v1938;
  _QWORD *v1939;
  uint64_t v1940;
  _QWORD *v1941;
  char *v1942;
  char *v1943;
  _QWORD *v1944;
  uint64_t v1945;
  uint64_t v1946;
  uint64_t v1947;
  _QWORD *v1948;
  uint64_t v1949;
  __int128 v1950;
  uint64_t v1951;
  int v1952;
  uint64_t v1953;
  int v1954;
  uint64_t v1955;
  llvm::Constant **v1956;
  llvm::Value *v1957;
  BOOL v1958;
  _QWORD *v1959;
  uint64_t v1960;
  uint64_t *v1961;
  uint64_t v1962;
  int v1963;
  unint64_t v1964;
  int v1965;
  char *v1966;
  llvm::Value *v1967;
  char *v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  int v1972;
  unint64_t v1973;
  uint64_t *v1974;
  unint64_t v1975;
  unint64_t v1976;
  uint64_t v1977;
  uint64_t *v1978;
  llvm *v1979;
  uint64_t v1980;
  unint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  __int16 v1985;
  uint64_t *v1986;
  unint64_t v1987;
  uint64_t v1988;
  _QWORD *v1989;
  void *v1990;
  uint64_t ****v1991;
  uint64_t ***v1992;
  uint64_t *v1993;
  unint64_t v1994;
  unint64_t v1995;
  unsigned int v1996;
  unsigned int v1997;
  uint64_t *v1998;
  unint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  _BOOL8 *v2002;
  llvm *v2003;
  uint64_t v2004;
  unint64_t v2005;
  uint64_t *v2006;
  uint64_t v2007;
  uint64_t v2008;
  _QWORD *v2009;
  unint64_t v2010;
  uint64_t *v2011;
  unint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  unint64_t v2015;
  uint64_t *v2016;
  unint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  int v2020;
  llvm::EVT *v2021;
  int v2022;
  llvm::EVT *v2023;
  unsigned int v2024;
  const char *v2025;
  int v2026;
  unint64_t v2027;
  void *v2028;
  uint64_t v2029;
  unint64_t v2030;
  void *v2031;
  unint64_t v2032;
  unsigned int v2033;
  const char *v2034;
  int v2035;
  unint64_t v2036;
  void *v2037;
  uint64_t v2038;
  int v2039;
  uint64_t ****v2040;
  uint64_t ***v2041;
  uint64_t *v2042;
  unint64_t v2043;
  unint64_t v2044;
  uint64_t *v2045;
  unint64_t v2046;
  uint64_t v2047;
  __int16 v2048;
  uint64_t v2049;
  unint64_t v2050;
  uint64_t *v2051;
  uint64_t v2052;
  __int16 v2053;
  uint64_t v2054;
  uint64_t *v2055;
  unint64_t v2056;
  unint64_t v2057;
  uint64_t *v2058;
  unint64_t v2059;
  uint64_t v2060;
  __int16 v2061;
  uint64_t v2062;
  unint64_t v2063;
  uint64_t *v2064;
  uint64_t v2065;
  __int16 v2066;
  uint64_t v2067;
  unint64_t v2068;
  uint64_t *v2069;
  unint64_t v2070;
  unint64_t v2071;
  uint64_t *v2072;
  unint64_t v2073;
  uint64_t v2074;
  __int16 v2075;
  uint64_t v2076;
  unint64_t v2077;
  uint64_t *v2078;
  uint64_t v2079;
  __int16 v2080;
  uint64_t v2081;
  uint64_t *v2082;
  unint64_t v2083;
  unint64_t v2084;
  uint64_t *v2085;
  unint64_t v2086;
  uint64_t v2087;
  __int16 v2088;
  uint64_t v2089;
  unint64_t v2090;
  uint64_t *v2091;
  uint64_t v2092;
  __int16 v2093;
  uint64_t v2094;
  uint64_t *v2095;
  unint64_t v2096;
  unint64_t v2097;
  uint64_t *v2098;
  unint64_t v2099;
  uint64_t v2100;
  __int16 v2101;
  uint64_t v2102;
  unint64_t v2103;
  uint64_t *v2104;
  uint64_t v2105;
  __int16 v2106;
  uint64_t v2107;
  uint64_t *v2108;
  unint64_t v2109;
  unint64_t v2110;
  uint64_t *v2111;
  unint64_t v2112;
  uint64_t v2113;
  __int16 v2114;
  uint64_t v2115;
  unint64_t v2116;
  uint64_t *v2117;
  uint64_t v2118;
  __int16 v2119;
  uint64_t v2120;
  unint64_t v2121;
  uint64_t *v2122;
  unint64_t v2123;
  unint64_t v2124;
  uint64_t *v2125;
  unint64_t v2126;
  uint64_t v2127;
  __int16 v2128;
  uint64_t v2129;
  unint64_t v2130;
  uint64_t *v2131;
  uint64_t v2132;
  __int16 v2133;
  uint64_t v2134;
  uint64_t *v2135;
  unint64_t v2136;
  unint64_t v2137;
  uint64_t *v2138;
  unint64_t v2139;
  uint64_t v2140;
  __int16 v2141;
  uint64_t v2142;
  unint64_t v2143;
  uint64_t *v2144;
  uint64_t v2145;
  __int16 v2146;
  uint64_t v2147;
  unint64_t v2148;
  uint64_t *v2149;
  unint64_t v2150;
  unint64_t v2151;
  uint64_t *v2152;
  unint64_t v2153;
  uint64_t v2154;
  __int16 v2155;
  uint64_t v2156;
  unint64_t v2157;
  uint64_t *v2158;
  uint64_t v2159;
  __int16 v2160;
  uint64_t v2161;
  uint64_t *v2162;
  unint64_t v2163;
  unint64_t v2164;
  uint64_t *v2165;
  unint64_t v2166;
  uint64_t v2167;
  __int16 v2168;
  uint64_t v2169;
  unint64_t v2170;
  uint64_t *v2171;
  uint64_t v2172;
  __int16 v2173;
  uint64_t v2174;
  uint64_t *v2175;
  unint64_t v2176;
  unint64_t v2177;
  uint64_t *v2178;
  unint64_t v2179;
  uint64_t v2180;
  __int16 v2181;
  uint64_t v2182;
  unint64_t v2183;
  uint64_t *v2184;
  uint64_t v2185;
  __int16 v2186;
  uint64_t v2187;
  uint64_t *v2188;
  unint64_t v2189;
  unint64_t v2190;
  uint64_t *v2191;
  unint64_t v2192;
  uint64_t v2193;
  __int16 v2194;
  uint64_t v2195;
  unint64_t v2196;
  uint64_t *v2197;
  uint64_t v2198;
  __int16 v2199;
  uint64_t v2200;
  unint64_t v2201;
  uint64_t *v2202;
  unint64_t v2203;
  unint64_t v2204;
  uint64_t *v2205;
  unint64_t v2206;
  uint64_t v2207;
  __int16 v2208;
  uint64_t v2209;
  unint64_t v2210;
  uint64_t *v2211;
  uint64_t v2212;
  __int16 v2213;
  uint64_t v2214;
  unint64_t v2215;
  uint64_t *v2216;
  unint64_t v2217;
  unint64_t v2218;
  uint64_t *v2219;
  unint64_t v2220;
  uint64_t v2221;
  __int16 v2222;
  uint64_t v2223;
  unint64_t v2224;
  uint64_t *v2225;
  uint64_t v2226;
  __int16 v2227;
  uint64_t v2228;
  uint64_t *v2229;
  unint64_t v2230;
  unint64_t v2231;
  uint64_t *v2232;
  unint64_t v2233;
  uint64_t v2234;
  __int16 v2235;
  uint64_t v2236;
  unint64_t v2237;
  uint64_t *v2238;
  uint64_t v2239;
  __int16 v2240;
  uint64_t v2241;
  uint64_t *v2242;
  unint64_t v2243;
  unint64_t v2244;
  uint64_t *v2245;
  unint64_t v2246;
  uint64_t v2247;
  __int16 v2248;
  uint64_t v2249;
  unint64_t v2250;
  uint64_t *v2251;
  uint64_t v2252;
  __int16 v2253;
  uint64_t v2254;
  unint64_t v2255;
  uint64_t *v2256;
  unint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  unint64_t v2260;
  uint64_t *v2261;
  uint64_t v2262;
  __int16 v2263;
  uint64_t v2264;
  uint64_t *v2265;
  unint64_t v2266;
  unint64_t v2267;
  uint64_t *v2268;
  unint64_t v2269;
  uint64_t v2270;
  __int16 v2271;
  uint64_t v2272;
  uint64_t *v2273;
  unsigned int v2274;
  uint64_t v2275;
  __int16 v2276;
  uint64_t v2277;
  uint64_t *v2278;
  unint64_t v2279;
  unint64_t v2280;
  uint64_t v2281;
  llvm *v2282;
  uint64_t v2283;
  uint64_t *v2284;
  _QWORD *v2285;
  unsigned int v2286;
  unsigned int v2287;
  _QWORD *v2288;
  unsigned int v2289;
  char *v2290;
  _QWORD *v2291;
  unsigned __int8 **v2292;
  unsigned __int8 *v2293;
  int v2294;
  uint64_t v2295;
  int v2296;
  uint64_t v2297;
  uint64_t v2298;
  unsigned __int8 v2299;
  size_t v2300;
  int v2301;
  uint64_t v2302;
  int v2303;
  uint64_t v2304;
  unsigned int v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  unint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t *v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  llvm *v2316;
  void *v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  int v2322;
  uint64_t ****v2323;
  uint64_t ***v2324;
  llvm::Constant *v2325;
  unsigned int v2326;
  BOOL v2327;
  int v2328;
  uint64_t v2329;
  _QWORD *v2330;
  int v2331;
  uint64_t v2332;
  void *v2333;
  uint64_t v2334;
  llvm::Type *v2335;
  void *v2336;
  unsigned int v2337;
  unsigned int v2338;
  uint64_t v2339;
  unsigned int v2340;
  unsigned int v2341;
  uint64_t v2342;
  llvm *ShiftAmountTy;
  uint64_t v2344;
  uint64_t v2345;
  unint64_t v2346;
  unint64_t v2347;
  _QWORD *v2348;
  unint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  int v2353;
  uint64_t *v2354;
  unsigned int v2355;
  uint64_t v2356;
  uint64_t *v2357;
  unint64_t v2358;
  unint64_t v2359;
  uint64_t v2360;
  llvm *v2361;
  void *v2362;
  _QWORD *v2363;
  unint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  unsigned int v2367;
  int v2368;
  void *v2369;
  void *v2370;
  uint64_t v2371;
  uint64_t v2372;
  unsigned int v2373;
  const char *v2374;
  unsigned int v2375;
  unint64_t v2376;
  uint64_t v2377;
  int v2378;
  int v2379;
  _QWORD *v2380;
  uint64_t ExtendedIntegerVT;
  void *v2382;
  uint64_t v2383;
  void *v2384;
  char *v2385;
  unint64_t v2386;
  uint64_t ***v2387;
  uint64_t v2388;
  uint64_t ***v2389;
  uint64_t v2390;
  unint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  unint64_t v2394;
  uint64_t v2395;
  __int16 v2396;
  llvm::RTLIB *v2397;
  llvm::RTLIB *v2398;
  void *v2399;
  llvm *v2400;
  uint64_t *v2401;
  uint64_t v2402;
  llvm *v2403;
  uint64_t *v2404;
  uint64_t *v2405;
  uint64_t v2406;
  unsigned int v2407;
  uint64_t v2408;
  uint64_t v2409;
  unsigned __int8 v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t *v2420;
  int v2421;
  int v2422;
  uint64_t *v2423;
  uint64_t v2424;
  int v2425;
  uint64_t *v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  int v2430;
  uint64_t v2431;
  int v2432;
  int v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t *v2436;
  uint64_t v2437;
  uint64_t v2438;
  unsigned int v2439;
  uint64_t v2440;
  int v2441;
  int v2442;
  uint64_t v2443;
  int v2444;
  uint64_t v2445;
  uint64_t v2446;
  int v2447;
  int v2448;
  uint64_t v2449;
  int v2450;
  int v2451;
  uint64_t v2452;
  unsigned int v2453;
  uint64_t v2454;
  unint64_t v2455;
  uint64_t ***v2456;
  uint64_t v2457;
  llvm *v2458[2];
  llvm *v2459[2];
  __int128 v2460;
  unsigned int v2461;
  char v2462;
  unsigned __int8 *v2463;
  unsigned __int8 *v2464;
  unsigned __int8 *v2465[3];
  int v2466;
  char v2467;
  unint64_t v2468;
  uint64_t v2469;
  int v2470;
  char v2471;
  unint64_t v2472;
  uint64_t v2473;
  int v2474;
  char v2475;
  unint64_t v2476;
  uint64_t v2477;
  int v2478;
  char v2479;
  unint64_t v2480;
  uint64_t v2481;
  int v2482;
  char v2483;
  __int128 v2484;
  int v2485;
  char v2486;
  __int128 v2487;
  int v2488;
  char v2489;
  __int128 v2490;
  int v2491;
  char v2492;
  __int128 v2493;
  int v2494;
  char v2495;
  __int128 v2496;
  int v2497;
  char v2498;
  __int128 v2499;
  int v2500;
  char v2501;
  __int128 v2502;
  int v2503;
  char v2504;
  void *v2505;
  unsigned int v2506;
  __int16 v2507;
  unsigned __int8 *v2508;
  unsigned __int8 *v2509;
  int v2510;
  unsigned __int8 *v2511;
  int v2512;
  unint64_t v2513;
  uint64_t v2514;
  uint64_t ***v2515;
  uint64_t ***v2516;
  int v2517;
  _QWORD *v2518;
  uint64_t v2519;
  uint64_t *v2520;
  unint64_t v2521;
  unsigned __int8 *v2522;
  unsigned __int8 *v2523;
  __int128 v2524;
  __int128 v2525;
  unsigned __int8 *v2526;
  unint64_t v2527;
  __int128 v2528;
  void *v2529[2];
  __int128 v2530;
  __int128 v2531;
  _QWORD *v2532;
  int v2533;
  uint64_t v2534;
  int v2535;
  uint64_t v2536;
  int v2537;
  void *v2538[2];
  _BYTE v2539[24];
  uint64_t v2540;
  uint64_t *v2541;
  uint64_t v2542;
  unsigned __int8 *v2543;
  uint64_t v2544;
  unsigned __int8 *v2545;
  unsigned __int8 *v2546;
  int v2547;
  uint64_t v2548;
  _QWORD *v2549;
  uint64_t v2550;
  _QWORD v2551[194];
  _QWORD v2552[66];
  _QWORD v2553[194];
  _BYTE v2554[96];
  __n128 v2555;
  _QWORD v2556[12];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v2556[9] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 832) + 24);
  v11 = *(_QWORD *)v4;
  v12 = *(_DWORD *)(v4 + 816);
  v2509 = 0;
  v2510 = v12;
  if (v11
    && ((unsigned __int8 **)(v11 + 48) == &v2509
     || (v13 = *(unsigned __int8 **)(v11 + 48), (v2509 = v13) == 0)
     || (llvm::MetadataTracking::track((uint64_t)&v2509, v13, 2), (v11 = *(_QWORD *)v9) != 0)))
  {
    v14 = *(unsigned __int8 **)(v11 + 48);
    v2508 = v14;
    if (v14)
      llvm::MetadataTracking::track((uint64_t)&v2508, v14, 2);
  }
  else
  {
    v2508 = 0;
  }
  v2507 = 0;
  if (sub_1C4774A9C((uint64_t)v8))
    sub_1C6361CFC(&v2507, (uint64_t)v8);
  v2456 = v8;
  v18 = (uint64_t *)(v9 + 832);
  switch((int)v6)
  {
    case 1:
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v884;
      v433 = *(_QWORD *)(v9 + 832);
      v885 = (uint64_t *)(v424[5] + 16 * v884);
      v428 = *v885;
      v432 = v885[1];
      v886 = *(_QWORD *)(v433 + 832);
      if (v886)
        v431 = *(_WORD *)(v886 + 8);
      else
        v431 = 0;
      v434 = 174;
      goto LABEL_1228;
    case 2:
      v916 = *(_QWORD *)(v9 + 832);
      v917 = (llvm *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(v916 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v919 = v918;
      v920 = v916;
      v921 = 24;
      goto LABEL_746;
    case 3:
      v891 = *(_QWORD *)(v9 + 832);
      v892 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)(**(_QWORD **)(v891 + 40) + 40) + 272, 0);
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v893;
      v428 = v892;
      v894 = *(_QWORD *)(v891 + 832);
      if (v894)
        v431 = *(_WORD *)(v894 + 8);
      else
        v431 = 0;
      v433 = v891;
      v434 = 283;
      goto LABEL_1177;
    case 4:
    case 77:
    case 166:
    case 245:
    case 290:
      v220 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      goto LABEL_1229;
    case 5:
      v766 = *(_QWORD *)(v9 + 832);
      v767 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v769 = (uint64_t *)(v767[5] + 16 * v768);
      v770 = *v769;
      v720 = v769[1];
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v771;
      v431 = v2507;
      v433 = v766;
      v434 = 288;
      goto LABEL_1226;
    case 6:
    case 12:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 64:
    case 70:
    case 78:
    case 120:
    case 121:
    case 125:
    case 138:
    case 150:
    case 152:
    case 155:
    case 156:
    case 159:
    case 160:
    case 161:
    case 162:
    case 165:
    case 171:
    case 172:
    case 178:
    case 179:
    case 188:
    case 189:
    case 190:
    case 191:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 241:
    case 242:
    case 243:
    case 246:
    case 247:
    case 248:
    case 250:
    case 251:
    case 253:
    case 261:
    case 270:
    case 281:
    case 289:
    case 291:
    case 292:
    case 293:
    case 294:
    case 297:
    case 298:
    case 299:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 442:
    case 443:
    case 444:
    case 445:
    case 446:
    case 447:
    case 448:
    case 449:
    case 450:
    case 451:
    case 452:
    case 453:
    case 454:
    case 455:
    case 456:
    case 457:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
      goto LABEL_56;
    case 7:
    case 60:
    case 126:
    case 163:
    case 266:
    case 267:
    case 268:
    case 269:
    case 272:
    case 316:
      goto LABEL_1323;
    case 8:
      v895 = *(_QWORD *)(v9 + 832);
      v896 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v898 = (uint64_t *)(v896[5] + 16 * v897);
      v770 = *v898;
      v720 = v898[1];
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v899;
      v900 = *(_QWORD *)(v895 + 832);
      if (v900)
        v431 = *(_WORD *)(v900 + 8);
      else
        v431 = 0;
      v433 = v895;
      v434 = 186;
      goto LABEL_1226;
    case 9:
      v1050 = *(_QWORD *)(v9 + 832);
      v1051 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1053 = (uint64_t *)(v1051[5] + 16 * v1052);
      v770 = *v1053;
      v720 = v1053[1];
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v1054;
      v1055 = *(_QWORD *)(v1050 + 832);
      if (v1055)
        v431 = *(_WORD *)(v1055 + 8);
      else
        v431 = 0;
      v433 = v1050;
      v434 = 182;
LABEL_1226:
      v428 = v770;
      goto LABEL_1227;
    case 10:
      v688 = sub_1C5D33D1C((uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)][1]);
      v689 = sub_1C5D435A0(*v18, v688);
      v691 = v690;
      for (i = 0; i != 6; i += 2)
      {
        v693 = &v2538[i];
        *v693 = 0;
        *((_DWORD *)v693 + 2) = 0;
      }
      v2538[0] = sub_1C635C370(v9);
      LODWORD(v2538[1]) = v694;
      *(_QWORD *)v2539 = v689;
      *(_DWORD *)&v2539[8] = v691;
      *(_QWORD *)&v2539[16] = sub_1C5D3FAF8(*(_QWORD *)(v9 + 832), (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4], (const llvm::APInt *)&v2509, (llvm *)5, 0, 1, 0);
      LODWORD(v2540) = v695;
      v696 = *(_QWORD *)(v9 + 832);
      v697 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)(**(_QWORD **)(v696 + 40) + 40) + 272, 0);
      v699 = sub_1C636A8B4(v696, v697, 0, 1, 0);
      v700 = 0;
      v701 = *(_QWORD *)(v696 + 832);
      if (v701)
        v700 = *(_WORD *)(v701 + 8);
      v702 = sub_1C636D410(v696, (const char *)0x114, (const llvm::APInt *)&v2509, v699, v698, (uint64_t *)v2538, 3, v700);
      v704 = v703;
      v2529[0] = v8;
      v705 = (uint64_t *)(v9 + 8);
      v706 = v2529;
      goto LABEL_776;
    case 11:
      v1024 = sub_1C5D33D1C((uint64_t)v8[1]);
      v1025 = sub_1C5D435A0(*(_QWORD *)(v9 + 832), v1024);
      v1027 = v1026;
      v1028 = *(_QWORD *)(v9 + 832);
      v1030 = sub_1C635C370(v9);
      v1032 = *(_QWORD *)(v1028 + 832);
      if (v1032)
        LOWORD(v1032) = *(_WORD *)(v1032 + 8);
      v1033 = sub_1C5D56C70(v1028, 275, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v1030, v1029, v1031, v1025, v1027, v1032);
      v1035 = v1034;
      v2538[0] = v8;
      v1036 = sub_1C6364290((uint64_t *)(v9 + 8), v2538);
      v1036[1] = v1033;
      *((_DWORD *)v1036 + 4) = v1035;
      v1037 = *(_QWORD *)(v9 + 832);
      goto LABEL_1263;
    case 13:
    case 14:
    case 51:
    case 139:
    case 140:
    case 203:
    case 258:
    case 259:
    case 260:
    case 273:
    case 280:
    case 296:
      if ((int)v6 > 257)
      {
        if ((int)v6 > 272)
        {
          if ((_DWORD)v6 == 273)
          {
            v190 = 226;
          }
          else if ((_DWORD)v6 == 280)
          {
            v190 = 224;
          }
          else
          {
            v190 = 236;
          }
        }
        else if ((_DWORD)v6 == 258)
        {
          v190 = 237;
        }
        else if ((_DWORD)v6 == 259)
        {
          v190 = 239;
        }
        else
        {
          v190 = 240;
        }
      }
      else if ((int)v6 > 138)
      {
        if ((_DWORD)v6 == 139)
        {
          v190 = 223;
        }
        else if ((_DWORD)v6 == 140)
        {
          v190 = 241;
        }
        else
        {
          v190 = 238;
        }
      }
      else if ((_DWORD)v6 == 13)
      {
        v190 = 145;
      }
      else if ((_DWORD)v6 == 14)
      {
        v190 = 235;
      }
      else
      {
        v190 = 227;
      }
      v840 = *(_QWORD *)(v9 + 832);
      v841 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v843 = (uint64_t *)(v841[5] + 16 * v842);
      v844 = *v843;
      v845 = v843[1];
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v846;
      v431 = v2507;
      v433 = v840;
      v434 = v190;
      v428 = v844;
      v432 = v845;
      goto LABEL_1228;
    case 15:
      v149 = (char *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 1888))(v10);
      if (v149)
        sub_1C63623DC(v9, (unint64_t)v8, v149);
      goto LABEL_1323;
    case 16:
      v575 = *(_QWORD **)(*v18 + 40);
      v576 = v575[4];
      v577 = *(_QWORD *)(v576 + 2056);
      v578 = v576 + 8;
      if (v577)
        v579 = v577;
      else
        v579 = v578;
      v2538[0] = "annotation";
      *(_WORD *)&v2539[16] = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v579, (uint64_t)v2538, 1);
      v581 = TempSymbol;
      v582 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)][3];
      v583 = (unint64_t *)v575[77];
      v584 = v575[78];
      if ((unint64_t)v583 < v584)
      {
        *v583 = TempSymbol;
        v583[1] = (unint64_t)v582;
        v585 = v583 + 2;
LABEL_1404:
        v575[77] = v585;
        v1934 = *(_QWORD *)(v9 + 832);
        v1935 = sub_1C635C370(v9);
        v808 = sub_1C5D42EA0(v1934, 0x108u, (uint64_t)&v2509, (uint64_t)v1935, v1936, v581);
LABEL_1405:
        v1662 = *(_QWORD *)(v9 + 832);
LABEL_1406:
        *(_QWORD *)(v1662 + 192) = v808;
        *(_DWORD *)(v1662 + 200) = v809;
        goto LABEL_1323;
      }
      v1616 = (unint64_t *)v575[76];
      v1617 = ((char *)v583 - (char *)v1616) >> 4;
      v1618 = v1617 + 1;
      if ((unint64_t)(v1617 + 1) >> 60)
        goto LABEL_1734;
      v1619 = v584 - (_QWORD)v1616;
      if (v1619 >> 3 > v1618)
        v1618 = v1619 >> 3;
      if ((unint64_t)v1619 >= 0x7FFFFFFFFFFFFFF0)
        v1620 = 0xFFFFFFFFFFFFFFFLL;
      else
        v1620 = v1618;
      if (!v1620)
      {
        v1621 = 0;
LABEL_1399:
        v1933 = (uint64_t *)&v1621[16 * v1617];
        *v1933 = v581;
        v1933[1] = (uint64_t)v582;
        v585 = v1933 + 2;
        if (v583 != v1616)
        {
          do
          {
            *((_OWORD *)v1933 - 1) = *((_OWORD *)v583 - 1);
            v1933 -= 2;
            v583 -= 2;
          }
          while (v583 != v1616);
          v583 = (unint64_t *)v575[76];
        }
        v575[76] = v1933;
        v575[77] = v585;
        v575[78] = &v1621[16 * v1620];
        if (v583)
          operator delete(v583);
        goto LABEL_1404;
      }
      if (!(v1620 >> 60))
      {
        v1621 = (char *)operator new(16 * v1620);
        goto LABEL_1399;
      }
      goto LABEL_1735;
    case 17:
      v1056 = *(_QWORD *)(v9 + 832);
      v718 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(v1056 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v720 = v1057;
      v1058 = *(_QWORD *)(v9 + 832);
      v1060 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1061 = *(_QWORD *)(v1058 + 832);
      if (v1061)
        v1062 = *(_WORD *)(v1061 + 8);
      else
        v1062 = 0;
      v424 = sub_1C5D52060(v1058, 216, (const llvm::APInt *)&v2509, (llvm *)9, 0, (uint64_t)v1060, v1059, v1062);
      v425 = v1740;
      v431 = 0;
      v1741 = *(_QWORD *)(v1056 + 832);
      if (v1741)
        v431 = *(_WORD *)(v1741 + 8);
      v433 = v1056;
      v434 = 215;
      goto LABEL_505;
    case 18:
      v656 = *(_QWORD *)(v9 + 832);
      v657 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v659 = v658;
      v660 = sub_1C6366AB4(*(_QWORD *)(v9 + 832), 0, (const llvm::APInt *)&v2509, (llvm *)5, 0, 1, 0);
      v663 = 0;
      v664 = *(_QWORD *)(v656 + 832);
      if (v664)
        v663 = *(_WORD *)(v664 + 8);
      v424 = sub_1C5D56C70(v656, 212, (const llvm::APInt *)&v2509, (llvm *)9, 0, (uint64_t)v657, v659, v662, (uint64_t)v660, v661, v663);
      v425 = v665;
      v431 = 0;
      v666 = *(_QWORD *)(v656 + 832);
      if (v666)
        v431 = *(_WORD *)(v666 + 8);
      v433 = v656;
      v434 = 216;
      v428 = 4;
      goto LABEL_1177;
    case 19:
      v707 = *(_QWORD *)(v9 + 832);
      v708 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v710 = (llvm **)(v708[5] + 16 * v709);
      v711 = *v710;
      v712 = (uint64_t)v710[1];
      v713 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v715 = v714;
      v716 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2394 = v717;
      v2396 = v2507;
      v2393 = (uint64_t)v716;
      v416 = v707;
      v417 = 143;
      goto LABEL_779;
    case 52:
      v991 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v993 = v992;
      v994 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
      v995 = (uint64_t *)(v991[5] + 16 * v992);
      v996 = *v995;
      v997 = v995[1];
      v998 = *(_QWORD *)(v9 + 832);
      v999 = (llvm::APInt *)(v994 + 3);
      v1000 = *((_DWORD *)v994 + 8);
      if (v1000 > 0x40)
        v1001 = llvm::APInt::countLeadingZerosSlowCase(v999) == v1000;
      else
        v1001 = *(_QWORD *)v999 == 0;
      v1713 = v1001;
      v1714 = v1713 == 0;
      v1715 = 189;
      v1716 = 184;
      goto LABEL_1195;
    case 53:
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v913;
      v914 = (uint64_t *)(v424[5] + 16 * v913);
      v428 = *v914;
      v432 = v914[1];
      v433 = *(_QWORD *)(v9 + 832);
      v915 = *(_QWORD *)(v433 + 832);
      if (v915)
        v431 = *(_WORD *)(v915 + 8);
      else
        v431 = 0;
      v434 = 185;
      goto LABEL_1228;
    case 54:
      v991 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v993 = v1002;
      v1003 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
      v1004 = (uint64_t *)(v991[5] + 16 * v1002);
      v996 = *v1004;
      v997 = v1004[1];
      v998 = *(_QWORD *)(v9 + 832);
      v1005 = (llvm::APInt *)(v1003 + 3);
      v1006 = *((_DWORD *)v1003 + 8);
      if (v1006 > 0x40)
        v1007 = llvm::APInt::countLeadingZerosSlowCase(v1005) == v1006;
      else
        v1007 = *(_QWORD *)v1005 == 0;
      v1717 = v1007;
      v1714 = v1717 == 0;
      v1715 = 188;
      v1716 = 183;
LABEL_1195:
      if (v1714)
        v434 = v1715;
      else
        v434 = v1716;
      v1718 = *(_QWORD *)(v998 + 832);
      if (v1718)
        v431 = *(_WORD *)(v1718 + 8);
      else
        v431 = 0;
      v433 = v998;
      v428 = v996;
      v432 = v997;
      v424 = v991;
      goto LABEL_1202;
    case 55:
    case 56:
      v36 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v37 = (uint64_t)v36[4][3];
      v38 = (llvm::DIExpression *)v36[8][3];
      sub_1C5D1C8F0(v9, v37, (uint64_t)v38);
      v39 = (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)][3];
      v40 = *v39;
      if (v40 > 0x22)
        goto LABEL_29;
      if (v40 == 32)
      {
        v39 = (unsigned __int8 *)**((_QWORD **)v39 + 3);
      }
      else if (((1 << v40) & 0x6FFFFFFF0) != 0)
      {
        goto LABEL_1323;
      }
LABEL_29:
      v41 = *((_QWORD *)v39 + 16);
      v2555.n128_u64[0] = v41;
      if (!v41)
        goto LABEL_1323;
      v42 = *(unsigned __int8 *)(v41 + 16);
      if ((v42 - 11) < 2)
        goto LABEL_1323;
      if (v42 != 21 && *(_QWORD *)(v41 + 8) == 0)
        goto LABEL_1323;
      v45 = v42 == 21 || *(_WORD *)(v37 + 32) != 0;
      v46 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v41);
      if (v46 && *((_BYTE *)v46 + 16) == 59)
      {
        if (*(_BYTE *)(*((_QWORD *)v46 - 4) + 16) != 16)
          goto LABEL_1438;
        v47 = *((_QWORD *)v46 + 5);
        v48 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 80);
        v49 = v48 ? v48 - 24 : 0;
        if (v47 != v49 || (*((_WORD *)v46 + 9) & 0x40) != 0)
          goto LABEL_1438;
        v50 = *(_QWORD *)(v9 + 912);
        v2529[0] = v46;
        v2538[0] = 0;
        v51 = (sub_1C47A82D8(v50 + 176, v2529, v2538) & 1) != 0
            ? v2538[0]
            : (_DWORD *)(*(_QWORD *)(v50 + 176) + 16 * *(unsigned int *)(v50 + 192));
        if (v51 == (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 912) + 176)
                             + 16 * *(unsigned int *)(*(_QWORD *)(v9 + 912) + 192)))
          goto LABEL_1438;
        v382 = v51[2];
      }
      else
      {
        v1957 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v41);
        if (v1957)
          v1958 = *((_BYTE *)v1957 + 16) == 21;
        else
          v1958 = 0;
        if (!v1958)
          goto LABEL_1438;
        v382 = sub_1C632BB28(*(_QWORD *)(v9 + 912), (uint64_t)v1957);
      }
      if (v382 != 0x7FFFFFFF)
      {
        if ((_DWORD)v6 != 55)
          goto LABEL_1323;
        v383 = *(_QWORD *)(v9 + 832);
        v2538[0] = sub_1C635C370(v9);
        v384 = (_QWORD *)sub_1C636EA88(v383, v37, (uint64_t)v38, v382, v2538, 1, 1, &v2508, *(_DWORD *)(v9 + 816));
        v385 = *(_QWORD *)(v9 + 832);
        v386 = 0;
        goto LABEL_348;
      }
LABEL_1438:
      v1959 = sub_1C6364290((uint64_t *)(v9 + 8), &v2555);
      v1961 = v1959 + 1;
      v1960 = v1959[1];
      v1962 = v2555.n128_u64[0];
      if (!v1960)
      {
        if (*(_BYTE *)(v2555.n128_u64[0] + 16) != 21
          || (v2330 = sub_1C6364290((uint64_t *)(v9 + 32), &v2555),
              v2331 = *((_DWORD *)v2330 + 4),
              v2332 = v2330[1],
              *v1961 = v2332,
              *((_DWORD *)v1959 + 4) = v2331,
              v1960 = v2332,
              v1962 = v2555.n128_u64[0],
              !v2332))
        {
LABEL_1448:
          if ((_DWORD)v6 == 55)
            v1965 = 1;
          else
            v1965 = 2;
          sub_1C5D1CF80(v9, v1962, v37, v38, (uint64_t)v2508, v1965, v1961);
          goto LABEL_1323;
        }
      }
      if (v1962 && *(_BYTE *)(v1962 + 16) == 77)
      {
        v1962 = *(_QWORD *)(v1962 - 32);
        v2555.n128_u64[0] = v1962;
      }
      v1963 = *(unsigned __int16 *)(v1960 + 24);
      if ((v1963 == 39 || v1963 == 15) && v45)
      {
        v1964 = sub_1C636EA88(*(_QWORD *)(v9 + 832), v37, (uint64_t)v38, *(_DWORD *)(v1960 + 76), 0, 0, 1, &v2508, *(_DWORD *)(v9 + 816));
      }
      else
      {
        if (*(_BYTE *)(v1962 + 16) == 21)
          goto LABEL_1448;
        v1964 = sub_1C636E8C8(*(_QWORD *)(v9 + 832), v37, (uint64_t)v38, v1960, *((_DWORD *)v1959 + 4), 1, &v2508, *(_DWORD *)(v9 + 816));
      }
      v384 = (_QWORD *)v1964;
      v385 = *v18;
      v386 = v45;
LABEL_348:
      sub_1C636ED38(v385, v384, v386);
      goto LABEL_1323;
    case 57:
      v744 = sub_1C636EDFC(*(_QWORD *)(v9 + 832), (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)][3], &v2508, *(_DWORD *)(v9 + 816));
      sub_1C636F21C(*(_QWORD **)(v9 + 832), (uint64_t)v744);
      goto LABEL_1323;
    case 58:
      v1108 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v1109 = (llvm::DIVariable *)v1108[4][3];
      v1110 = (uint64_t **)v1108[8][3];
      sub_1C5D1C8F0(v9, (uint64_t)v1109, (uint64_t)v1110);
      llvm::DbgVariableIntrinsic::location_ops((uint64_t)v8, v2529);
      v2538[0] = v2539;
      v2538[1] = (void *)0x400000000;
      v2555.n128_u64[0] = (unint64_t)v2529[0];
      *(void **)&v2524 = v2529[1];
      sub_1C6364964((uint64_t)v2538, v2555.n128_u64, (uint64_t *)&v2524);
      v1111 = LODWORD(v2538[1]);
      if (!LODWORD(v2538[1]))
        goto LABEL_713;
      v1112 = (uint64_t *)v2538[0];
      v1113 = 8 * LODWORD(v2538[1]);
      v1114 = (char *)v2538[0];
      while (*(_QWORD *)v1114)
      {
        v1114 += 8;
        v1113 -= 8;
        if (!v1113)
        {
          v1114 = (char *)v2538[0] + 8 * LODWORD(v2538[1]);
          break;
        }
      }
      if (LODWORD(v2538[1]) == (v1114 - (char *)v2538[0]) >> 3)
      {
        v1115 = *(unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)][3];
        v2465[0] = v2508;
        if (v2508)
          llvm::MetadataTracking::track((uint64_t)v2465, v2508, 2);
        v1116 = (unsigned __int8 *)v8[6];
        v2464 = v1116;
        if (v1116)
          llvm::MetadataTracking::track((uint64_t)&v2464, v1116, 2);
        v1117 = sub_1C5D1D678(v9, v1112, v1111, v1109, v1110, v2465, (uint64_t)&v2464, v1115 == 32);
        if (v2464)
          llvm::MetadataTracking::untrack((uint64_t)&v2464, v2464);
        if (v2465[0])
          llvm::MetadataTracking::untrack((uint64_t)v2465, v2465[0]);
        if ((v1117 & 1) == 0)
        {
          v2463 = v2508;
          if (v2508)
            llvm::MetadataTracking::track((uint64_t)&v2463, v2508, 2);
          sub_1C635F704(v9, (llvm::DbgVariableIntrinsic *)v8, &v2463, *(_DWORD *)(v9 + 816));
          if (v2463)
            llvm::MetadataTracking::untrack((uint64_t)&v2463, v2463);
        }
      }
LABEL_713:
      v181 = v2538[0];
      if (v2538[0] == v2539)
        goto LABEL_1323;
      goto LABEL_194;
    case 59:
    case 295:
    case 302:
      v290 = v8[8];
      if (!v290)
        goto LABEL_307;
      if (!*((_DWORD *)v290 + 2))
        goto LABEL_307;
      v291 = v290[5];
      if (!v291)
        goto LABEL_307;
      v292 = *((_DWORD *)v291 + 10);
      if (!v292)
        goto LABEL_307;
      v293 = v291[3];
      v294 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v294 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v2386 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v2386 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v2386;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v295 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD478F398F5D9C7F9)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (qword_1ED7EAC80 ^ 0xD478F398F5D9C7F9)) >> 47) ^ 0xBA0D95B585B8B58DLL);
      v296 = (-348639895 * ((v295 >> 47) ^ v295)) ^ 0x2D636E75;
      v297 = 1;
      while (2)
      {
        v298 = v296 & (v292 - 1);
        v299 = v293 + 24 * v298;
        v300 = *(_QWORD **)v299;
        if (*(_QWORD *)v299 != -1)
        {
          if (v300 == (_QWORD *)-2)
          {
            if ("trap-func-name" == (char *)-2)
              goto LABEL_305;
          }
          else if (*(_QWORD *)(v299 + 8) == 14
                 && *v300 == 0x6E75662D70617274
                 && *(_QWORD *)((char *)v300 + 6) == 0x656D616E2D636E75)
          {
            goto LABEL_305;
          }
LABEL_294:
          if (v300 != (_QWORD *)-1)
          {
            v296 = v297 + v298;
            ++v297;
            continue;
          }
          goto LABEL_307;
        }
        break;
      }
      if ("trap-func-name" != (char *)-1)
        goto LABEL_294;
LABEL_305:
      v302 = *(_QWORD *)(v299 + 16);
      if (v302 && *(_DWORD *)(v302 + 16))
      {
        v2290 = (char *)(v302 + *(unsigned int *)(v302 + 12) + 25);
        v2555 = 0uLL;
        v2556[0] = 0;
        if ((_DWORD)v6 == 302)
        {
          v2291 = operator new(0x30uLL);
          v2291[5] = 0;
          v2291[2] = 0;
          v2291[3] = 0;
          *((_DWORD *)v2291 + 8) = 0;
          v2555.n128_u64[1] = (unint64_t)(v2291 + 6);
          v2556[0] = v2291 + 6;
          v2555.n128_u64[0] = (unint64_t)v2291;
          v2292 = (unsigned __int8 **)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
          v2293 = *v2292;
          *v2291 = *v2292;
          v2291[1] = 0;
          v2291[1] = sub_1C635FDC4(v9, v2293);
          *((_DWORD *)v2291 + 4) = v2294;
          v2291[3] = *(_QWORD *)*v2291;
        }
        v2295 = *v18;
        v2538[0] = 0;
        LODWORD(v2538[1]) = 0;
        *(_QWORD *)v2539 = 0;
        *(_DWORD *)&v2539[8] = 32;
        *(_QWORD *)&v2539[12] = 0xFFFFFFFFLL;
        v2540 = 0;
        LODWORD(v2541) = 0;
        v2542 = 0;
        v2543 = 0;
        v2544 = 0;
        v2545 = (unsigned __int8 *)v2295;
        v2547 = 0;
        v2548 = 0;
        v2549 = v2551;
        v2550 = 0x2000000000;
        v2551[192] = v2552;
        v2551[193] = 0x2000000000;
        v2552[64] = v2553;
        v2552[65] = 0x2000000000;
        v2553[192] = v2554;
        v2553[193] = 0x400000000;
        v2554[64] = 0;
        v2554[88] = 0;
        v2546 = v2509;
        if (v2509)
          llvm::MetadataTracking::track((uint64_t)&v2546, v2509, 2);
        v2547 = v2510;
        v2538[0] = sub_1C635C370(v9);
        LODWORD(v2538[1]) = v2296;
        v2297 = (uint64_t)*v8;
        v2298 = *(_QWORD *)(v9 + 832);
        v2299 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)(**(_QWORD **)(v2298 + 40) + 40) + 272, 0);
        v2300 = sub_1C63675D8(v2298, v2290, v2299, 0);
        sub_1C5CDFD60((uint64_t)v2538, 0, v2297, v2300, v2301, &v2555);
        sub_1C5D1FE10(v10, (uint64_t)v2538, (uint64_t)v2529);
        v2302 = *(_QWORD *)(v9 + 832);
        v2303 = DWORD2(v2530);
        *(_QWORD *)(v2302 + 192) = v2530;
        *(_DWORD *)(v2302 + 200) = v2303;
        sub_1C632CB64(v2538);
        if (v2555.n128_u64[0])
        {
          v2555.n128_u64[1] = v2555.n128_u64[0];
          operator delete((void *)v2555.n128_u64[0]);
        }
        goto LABEL_1323;
      }
LABEL_307:
      if ((_DWORD)v6 == 59)
      {
        v443 = *(_QWORD *)(v9 + 832);
        v933 = sub_1C635C370(v9);
        v935 = v1328;
        v1329 = *(_QWORD *)(v443 + 832);
        if (v1329)
          v937 = *(_WORD *)(v1329 + 8);
        else
          v937 = 0;
        v1828 = v443;
        v1829 = 285;
      }
      else
      {
        if ((_DWORD)v6 == 302)
        {
          v303 = *(_QWORD *)(v9 + 832);
          v304 = sub_1C635C370(v9);
          v306 = v305;
          v307 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
          v308 = (uint64_t *)(v307 + 3);
          if (*((_DWORD *)v307 + 8) >= 0x41u)
            v308 = (uint64_t *)*v308;
          v309 = sub_1C6366AB4(*(_QWORD *)(v9 + 832), *v308, (const llvm::APInt *)&v2509, (llvm *)5, 0, 1, 0);
          v312 = *(_QWORD *)(v303 + 832);
          if (v312)
            LOWORD(v312) = *(_WORD *)(v312 + 8);
          v313 = sub_1C5D56C70(v303, 286, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v304, v306, v311, (uint64_t)v309, v310, v312);
LABEL_571:
          *(_QWORD *)(v303 + 192) = v313;
          *(_DWORD *)(v303 + 200) = v314;
          goto LABEL_1323;
        }
        v443 = *(_QWORD *)(v9 + 832);
        v933 = sub_1C635C370(v9);
        v935 = v1330;
        v1331 = *(_QWORD *)(v443 + 832);
        if (v1331)
          v937 = *(_WORD *)(v1331 + 8);
        else
          v937 = 0;
        v1828 = v443;
        v1829 = 284;
      }
LABEL_1336:
      v448 = sub_1C5D52060(v1828, v1829, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v933, v935, v937);
LABEL_1337:
      *(_QWORD *)(v443 + 192) = v448;
      *(_DWORD *)(v443 + 200) = v449;
LABEL_1323:
      if (v2508)
        llvm::MetadataTracking::untrack((uint64_t)&v2508, v2508);
      if (v2509)
        llvm::MetadataTracking::untrack((uint64_t)&v2509, v2509);
      return;
    case 61:
      v929 = *(_QWORD *)(v9 + 832);
      v930 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)(**(_QWORD **)(v929 + 40) + 40) + 272, 0);
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v931;
      v428 = v930;
      v932 = *(_QWORD *)(v929 + 832);
      if (v932)
        v431 = *(_WORD *)(v932 + 8);
      else
        v431 = 0;
      v433 = v929;
      v434 = 30;
      goto LABEL_1177;
    case 62:
    case 63:
      v358 = (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v359 = (llvm *)(*(unsigned __int8 (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, 0);
      v360 = (*(uint64_t (**)(unsigned __int8 *, llvm *, _QWORD))(*(_QWORD *)v10 + 424))(v10, v359, 0);
      v361 = sub_1C632BB88(*(_QWORD *)(v9 + 912), v358, v360);
      v363 = (uint64_t)sub_1C612E4E4(*(_QWORD *)(v9 + 832), *(_QWORD *)(v9 + 832) + 112, 0, (const llvm::APInt *)&v2509, v361, v359, 0);
      v364 = v362;
      if ((_DWORD)v6 == 62)
      {
        v363 = sub_1C6366544(*v18, v363, v362, (uint64_t)&v2509, 5, 0);
        v364 = v365;
      }
      v2538[0] = v8;
      v366 = sub_1C6364290((uint64_t *)(v9 + 8), v2538);
      v366[1] = v363;
      *((_DWORD *)v366 + 4) = v364;
      goto LABEL_1323;
    case 65:
    case 66:
      v303 = *(_QWORD *)(v9 + 832);
      *(_BYTE *)(*(_QWORD *)(v303 + 40) + 632) = 1;
      sub_1C612E234((unsigned int *)(v9 + 384), *(_BYTE **)(v9 + 672), (_BYTE *)(*(_QWORD *)(v9 + 672) + 16 * *(unsigned int *)(v9 + 680)));
      *(_DWORD *)(v9 + 680) = 0;
      v348 = sub_1C5D14AF0((uint64_t *)v9, v9 + 384);
      v350 = v349;
      v351 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v353 = v352;
      v354 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v357 = *(_QWORD *)(v303 + 832);
      if (v357)
        LOWORD(v357) = *(_WORD *)(v357 + 8);
      v313 = sub_1C5D58E08(v303, (const char *)0x1F, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v348, v350, v356, (uint64_t)v351, v353, (uint64_t)v354, v355, SHIDWORD(v355), v357);
      goto LABEL_571;
    case 67:
      v153 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v154 = v153 + 3;
      if (*((_DWORD *)v153 + 8) >= 0x41u)
        v154 = (_QWORD *)*v154;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v18 + 40) + 32) + 2104) = *v154;
      goto LABEL_1323;
    case 68:
      v1043 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 832) + 40) + 56);
      v2538[0] = llvm::Value::stripPointerCasts((llvm::Value *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      *(_DWORD *)(v1043 + 68) = *((_DWORD *)sub_1C632C0A0((_DWORD *)(*(_QWORD *)(v9 + 912) + 176), v2538) + 2);
      goto LABEL_1323;
    case 69:
      v303 = *(_QWORD *)(v9 + 832);
      v833 = sub_1C635C370(v9);
      v835 = v834;
      v836 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v839 = *(_QWORD *)(v303 + 832);
      if (v839)
        LOWORD(v839) = *(_WORD *)(v839 + 8);
      v313 = sub_1C5D56C70(v303, 33, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v833, v835, v838, (uint64_t)v836, v837, v839);
      goto LABEL_571;
    case 71:
      for (j = 0; j != 4; j += 2)
      {
        v1130 = &v2538[j];
        *v1130 = 0;
        *((_DWORD *)v1130 + 2) = 0;
      }
      v2538[0] = sub_1C635C370(v9);
      LODWORD(v2538[1]) = v1131;
      *(_QWORD *)v2539 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      *(_DWORD *)&v2539[8] = v1132;
      v1133 = *(_QWORD *)(v9 + 832);
      v1135 = sub_1C636A8B4(v1133, 5, 0, 1, 0);
      v1136 = 0;
      v1137 = *(_QWORD *)(v1133 + 832);
      if (v1137)
        v1136 = *(_WORD *)(v1137 + 8);
      v702 = sub_1C636D410(v1133, (const char *)0x20, (const llvm::APInt *)&v2509, v1135, v1134, (uint64_t *)v2538, 2, v1136);
      v2529[0] = v8;
      v1138 = sub_1C6364290((uint64_t *)(v9 + 8), v2529);
      v1138[1] = v702;
      *((_DWORD *)v1138 + 4) = 0;
      goto LABEL_777;
    case 72:
      v443 = *(_QWORD *)(v9 + 832);
      v933 = sub_1C635C370(v9);
      v935 = v934;
      v936 = *(_QWORD *)(v443 + 832);
      if (v936)
        v937 = *(_WORD *)(v936 + 8);
      else
        v937 = 0;
      v1828 = v443;
      v1829 = 34;
      goto LABEL_1336;
    case 73:
      TypeInfo = llvm::ExtractTypeInfo((llvm *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)], v15);
      TypeIDFor = llvm::MachineFunction::getTypeIDFor(*(llvm::MachineFunction **)(*(_QWORD *)(v9 + 832) + 40), TypeInfo);
      v220 = sub_1C6366AB4(*(_QWORD *)(v9 + 832), TypeIDFor, (const llvm::APInt *)&v2509, (llvm *)5, 0, 0, 0);
      goto LABEL_1229;
    case 74:
      *(_BYTE *)(*(_QWORD *)(*v18 + 40) + 633) = 1;
      goto LABEL_1323;
    case 75:
      v1044 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v993 = v1045;
      v1046 = *(_QWORD *)(v9 + 832);
      v1047 = (uint64_t *)(v1044[5] + 16 * v1045);
      v428 = *v1047;
      if (*v1047 == 10 && dword_1ED824E08 != 0 && dword_1ED824E08 <= 0x12)
      {
        v1734 = sub_1C5D404C4(*(_QWORD *)(v9 + 832), (const llvm::APInt *)&v2509, 10, 0, 0, 1.44269502);
        v1737 = 0;
        v1738 = *(_QWORD *)(v1046 + 832);
        if (v1738)
          v1737 = *(_WORD *)(v1738 + 8);
        v724 = sub_1C5D56C70(v1046, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1044, v993, v1736, (uint64_t)v1734, v1735, v1737);
        v1649 = v1046;
        goto LABEL_1223;
      }
      v431 = v2507;
      v432 = v1047[1];
      v433 = *(_QWORD *)(v9 + 832);
      v434 = 233;
      v424 = v1044;
LABEL_1202:
      v425 = v993;
      goto LABEL_1228;
    case 76:
      v724 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v424 = v724;
      v425 = v725;
      v726 = (uint64_t *)(v724[5] + 16 * v725);
      v428 = *v726;
      if (*v726 != 10 || dword_1ED824E08 == 0 || dword_1ED824E08 > 0x12)
      {
        v431 = v2507;
        v432 = v726[1];
        v433 = *(_QWORD *)(v9 + 832);
        v434 = 234;
        goto LABEL_1228;
      }
      v1649 = *(_QWORD *)(v9 + 832);
LABEL_1223:
      v220 = sub_1C5D38D88((uint64_t)v724, v725, (const llvm::APInt *)&v2509, v1649);
      goto LABEL_1229;
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
      v28 = *(_QWORD *)v9;
      v29 = *(_DWORD *)(v9 + 816);
      v2555.n128_u64[0] = 0;
      v2555.n128_u32[2] = v29;
      if (v28)
      {
        v30 = (__n128 *)(v28 + 48);
        if (v30 != &v2555)
        {
          v2555.n128_u64[0] = v30->n128_u64[0];
          if (v2555.n128_u64[0])
            llvm::MetadataTracking::track((uint64_t)&v2555, (unsigned __int8 *)v2555.n128_u64[0], 2);
        }
      }
      v31 = *v18;
      v32 = *(_QWORD *)(*v18 + 24);
      v2538[0] = v2539;
      v2538[1] = (void *)0x400000000;
      llvm::ComputeValueVTs(v32, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v31 + 40) + 40) + 272), (uint64_t)*v8, (uint64_t)v2538, 0, 0, 0);
      v33 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v33 = v2538[1];
      }
      *((_OWORD *)v2538[0] + v33) = xmmword_1C64169E0;
      ++LODWORD(v2538[1]);
      v34 = *v18;
      v2529[0] = &v2530;
      v2530 = *(_OWORD *)(v34 + 192);
      v2529[1] = (void *)0x400000001;
      if (llvm::ConstrainedFPIntrinsic::isUnaryOp((llvm::ConstrainedFPIntrinsic *)v8))
      {
        v35 = (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      }
      else
      {
        v59 = *((_DWORD *)*(v8 - 4) + 9) & 0xFFFFFFFD;
        v60 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
        v62 = v61;
        v63 = v2529[1];
        if (v59 == 88)
        {
          if (LODWORD(v2529[1]) >= HIDWORD(v2529[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2529, (uint64_t)&v2530, LODWORD(v2529[1]) + 1, 16);
            v63 = v2529[1];
          }
          v64 = (uint64_t **)((char *)v2529[0] + 16 * v63);
          *v64 = v60;
          v64[1] = v62;
          ++LODWORD(v2529[1]);
          v65 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
          v67 = v66;
          v68 = v2529[1];
          if (LODWORD(v2529[1]) >= HIDWORD(v2529[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2529, (uint64_t)&v2530, LODWORD(v2529[1]) + 1, 16);
            v68 = v2529[1];
          }
          v69 = (uint64_t **)((char *)v2529[0] + 16 * v68);
          *v69 = v65;
          v69[1] = v67;
          ++LODWORD(v2529[1]);
          v35 = (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8];
        }
        else
        {
          if (LODWORD(v2529[1]) >= HIDWORD(v2529[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2529, (uint64_t)&v2530, LODWORD(v2529[1]) + 1, 16);
            v63 = v2529[1];
          }
          v208 = (uint64_t **)((char *)v2529[0] + 16 * v63);
          *v208 = v60;
          v208[1] = v62;
          ++LODWORD(v2529[1]);
          v35 = (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
        }
      }
      v209 = sub_1C635FDC4(v9, v35);
      v211 = v210;
      v212 = v2529[1];
      if (LODWORD(v2529[1]) >= HIDWORD(v2529[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2529, (uint64_t)&v2530, LODWORD(v2529[1]) + 1, 16);
        v212 = v2529[1];
      }
      v213 = (uint64_t **)((char *)v2529[0] + 16 * v212);
      *v213 = v209;
      v213[1] = v211;
      ++LODWORD(v2529[1]);
      sub_1C636AB20(*v18, (uint64_t *)v2538[0], LODWORD(v2538[1]));
      if (llvm::ConstrainedFPIntrinsic::getExceptionBehavior((llvm::ConstrainedFPIntrinsic *)v8))
        v214 = 0;
      else
        v214 = 2049;
      LOWORD(v2528) = v214;
      if (sub_1C4774A9C((uint64_t)v8))
        sub_1C6361CFC(&v2528, (uint64_t)v8);
      __asm { BR              X10 }
      return;
    case 119:
      sub_1C63742E4(v9, (uint64_t)v8);
      goto LABEL_1323;
    case 122:
      sub_1C5D79914(v9, (llvm::GCRelocateInst *)v8);
      goto LABEL_1323;
    case 123:
      sub_1C6374260(v9, (llvm::GCProjectionInst *)v8);
      goto LABEL_1323;
    case 124:
      sub_1C5D78F30(v9, (uint64_t)v8, 0, v16);
      goto LABEL_1323;
    case 127:
    case 128:
      sub_1C5D25158(v9, (uint64_t)v8, 0, v16);
      goto LABEL_1323;
    case 129:
      v2538[0] = v2539;
      v2538[1] = (void *)0x2000000000;
      v1063 = *(_QWORD *)v9;
      v1064 = *(_DWORD *)(v9 + 816);
      v2529[0] = 0;
      LODWORD(v2529[1]) = v1064;
      if (v1063)
      {
        v1065 = (void **)(v1063 + 48);
        if (v1065 != v2529)
        {
          v1066 = *v1065;
          v2529[0] = v1066;
          if (v1066)
            llvm::MetadataTracking::track((uint64_t)v2529, (unsigned __int8 *)v1066, 2);
        }
      }
      sub_1C635FDC4(v9, (unsigned __int8 *)*(v8 - 4));
      v1067 = sub_1C63662D4(*(_QWORD *)(v9 + 832), 0, (const llvm::APInt *)v2529, 1);
      v1069 = v1068;
      v1070 = *(_QWORD *)(v9 + 832);
      v1071 = sub_1C635C370(v9);
      v1073 = sub_1C61420D8(v1070, (uint64_t)v1071, v1072, 0, 0, (const llvm::APInt *)v2529);
      v1075 = v1074;
      v1076 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)])[10];
      v1077 = (uint64_t *)(v1076 + 24);
      v1078 = v9;
      if (*(_DWORD *)(v1076 + 32) >= 0x41u)
        v1077 = (uint64_t *)*v1077;
      v1079 = sub_1C6366AB4(*(_QWORD *)(v9 + 832), *v1077, (const llvm::APInt *)v2529, (llvm *)6, 0, 1, 0);
      v1081 = v1080;
      v1082 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v1082 = v2538[1];
      }
      v1083 = (char *)v2538[0] + 16 * v1082;
      *v1083 = v1079;
      v1083[1] = v1081;
      ++LODWORD(v2538[1]);
      v1084 = sub_1C635FDC4(v1078, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1085 = *(_QWORD *)(v1078 + 832);
      v1086 = v1084[10];
      v1087 = (uint64_t *)(v1086 + 24);
      v1088 = v1078;
      if (*(_DWORD *)(v1086 + 32) >= 0x41u)
        v1087 = (uint64_t *)*v1087;
      v1089 = (uint64_t *)v1075;
      v1090 = sub_1C6366AB4(v1085, *v1087, (const llvm::APInt *)v2529, (llvm *)5, 0, 1, 0);
      v1092 = v1091;
      v1093 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v1093 = v2538[1];
      }
      v1094 = (char *)v2538[0] + 16 * v1093;
      *v1094 = v1090;
      v1094[1] = v1092;
      ++LODWORD(v2538[1]);
      sub_1C5D34FA8((uint64_t)v8, 2u, (const llvm::APInt *)v2529, (uint64_t)v2538, v1088);
      v1095 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v1095 = v2538[1];
      }
      v1096 = (uint64_t **)((char *)v2538[0] + 16 * v1095);
      *v1096 = v1073;
      v1096[1] = v1089;
      v1097 = (LODWORD(v2538[1]) + 1);
      LODWORD(v2538[1]) = v1097;
      if (v1097 >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v1097 + 1, 16);
        LODWORD(v1097) = v2538[1];
      }
      v1098 = (uint64_t **)((char *)v2538[0] + 16 * v1097);
      *v1098 = v1073;
      v1098[1] = (uint64_t *)1;
      ++LODWORD(v2538[1]);
      v1099 = sub_1C636A8B4(*(_QWORD *)(v1088 + 832), 1, 0, 172, 0);
      v1101 = sub_1C5D61678(*(_QWORD *)(v1088 + 832), 25, (uint64_t)v2529, v1099, v1100, (uint64_t *)v2538[0], LODWORD(v2538[1]));
      v1103 = sub_1C490D7F0(*(_QWORD *)(v1088 + 832), (uint64_t)v1101, 0, (uint64_t)v1067, v1069, (uint64_t)v1067, v1069, v1102, (uint64_t)v1101, 1, (const llvm::APInt *)v2529);
      v1104 = *(_QWORD *)(v1088 + 832);
      *(_QWORD *)(v1104 + 192) = v1103;
      *(_DWORD *)(v1104 + 200) = v1105;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1088 + 912) + 8) + 56) + 39) = 1;
      if (v2529[0])
        llvm::MetadataTracking::untrack((uint64_t)v2529, (unsigned __int8 *)v2529[0]);
      goto LABEL_695;
    case 130:
      sub_1C63627AC((uint64_t *)v9, (uint64_t *)v8);
      goto LABEL_1323;
    case 131:
      v470 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v472 = v471;
      v473 = (uint64_t)sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v475 = v474;
      v476 = (llvm *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v477 = v9;
      v479 = v478;
      v267 = v477;
      v480 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v10 + 72))(v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v477 + 832) + 40) + 40) + 272);
      v482 = (unsigned __int8 *)(*(_QWORD *)(v473 + 40) + 16 * v475);
      if (*v482 != v480 || ((v483 = *((_QWORD *)v482 + 1), !v480) ? (v484 = v483 == 0) : (v484 = 1), !v484))
      {
        v485 = *(_QWORD *)(v473 + 80);
        v486 = (uint64_t *)(v485 + 24);
        if (*(_DWORD *)(v485 + 32) >= 0x41u)
          v486 = (uint64_t *)*v486;
        v473 = sub_1C6366C9C(*v18, *v486, (uint64_t)&v2509, 0);
        v475 = v475 & 0xFFFFFFFF00000000 | v487;
      }
      v488 = *(_QWORD *)(*v18 + 832);
      if (v488)
        LOWORD(v488) = *(_WORD *)(v488 + 8);
      v286 = sub_1C5D56C70(*v18, 151, (const llvm::APInt *)&v2509, v476, v479, (uint64_t)v470, v472, v481, v473, v475, v488);
      goto LABEL_490;
    case 132:
      v667 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v669 = v668;
      v670 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v672 = v671;
      v673 = (uint64_t)sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v674 = v9;
      v676 = v675;
      v267 = v674;
      v677 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v10 + 72))(v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v674 + 832) + 40) + 40) + 272);
      v678 = (unsigned __int8 *)(*(_QWORD *)(v673 + 40) + 16 * v676);
      if (*v678 != v677 || ((v679 = *((_QWORD *)v678 + 1), !v677) ? (v680 = v679 == 0) : (v680 = 1), !v680))
      {
        v681 = *(_QWORD *)(v673 + 80);
        v682 = (uint64_t *)(v681 + 24);
        if (*(_DWORD *)(v681 + 32) >= 0x41u)
          v682 = (uint64_t *)*v682;
        v673 = sub_1C6366C9C(*v18, *v682, (uint64_t)&v2509, 0);
        v676 = v676 & 0xFFFFFFFF00000000 | v683;
      }
      v685 = (llvm *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*v18 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v687 = *(_QWORD *)(*v18 + 832);
      if (v687)
        LOWORD(v687) = *(_WORD *)(v687 + 8);
      v286 = sub_1C5D58E08(*v18, (const char *)0x96, (const llvm::APInt *)&v2509, v685, v684, (uint64_t)v667, v669, v686, (uint64_t)v670, v672, v673, v676, SHIDWORD(v676), v687);
      goto LABEL_490;
    case 133:
      sub_1C636286C(v9, (uint64_t)v8);
      goto LABEL_1323;
    case 134:
      sub_1C6362AC4(v9, (uint64_t)v8);
      goto LABEL_1323;
    case 135:
    case 136:
    case 137:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
      v19 = (uint64_t *)(v9 + 832);
      v20 = *(_QWORD *)v9;
      v21 = *(_DWORD *)(v9 + 816);
      v2511 = 0;
      v2512 = v21;
      if (v20)
      {
        v22 = (unsigned __int8 **)(v20 + 48);
        if (v22 != &v2511)
        {
          v23 = *v22;
          v2511 = v23;
          if (v23)
            llvm::MetadataTracking::track((uint64_t)&v2511, v23, 2);
        }
      }
      v24 = v2456;
      v25 = (llvm::VPIntrinsic *)*((unsigned int *)*(v2456 - 4) + 9);
      if ((int)v25 > 329)
      {
        v26 = 384;
        v27 = 383;
        switch((int)v25)
        {
          case 330:
            v26 = 334;
            goto LABEL_883;
          case 331:
            v26 = 335;
            goto LABEL_883;
          case 332:
            v26 = 336;
            goto LABEL_883;
          case 333:
            v26 = 347;
            goto LABEL_883;
          case 334:
          case 346:
            v26 = 365;
            goto LABEL_883;
          case 335:
            v26 = 350;
            goto LABEL_883;
          case 336:
            v26 = 353;
            goto LABEL_883;
          case 337:
            v26 = 349;
            goto LABEL_883;
          case 338:
            v26 = 352;
            goto LABEL_883;
          case 339:
            v26 = 359;
            goto LABEL_883;
          case 340:
            v26 = 355;
            goto LABEL_883;
          case 341:
            v26 = 354;
            goto LABEL_883;
          case 342:
            v26 = 358;
            goto LABEL_883;
          case 343:
            v26 = 351;
            goto LABEL_883;
          case 344:
            v26 = 348;
            goto LABEL_883;
          case 345:
            v26 = 371;
            goto LABEL_883;
          case 347:
            v26 = 364;
            goto LABEL_883;
          case 348:
            v26 = 369;
            goto LABEL_883;
          case 349:
            v26 = 337;
            goto LABEL_883;
          case 350:
            v26 = 388;
            goto LABEL_883;
          case 351:
            v26 = 338;
            goto LABEL_883;
          case 352:
            v26 = 339;
            goto LABEL_883;
          case 353:
            v26 = 363;
            goto LABEL_883;
          case 354:
            v26 = 372;
            goto LABEL_883;
          case 355:
            v26 = 374;
            goto LABEL_883;
          case 356:
            goto LABEL_880;
          case 357:
            v26 = 381;
            goto LABEL_883;
          case 358:
            v26 = 382;
            goto LABEL_883;
          case 359:
            v26 = 386;
            v27 = 385;
LABEL_880:
            v289 = (*((_BYTE *)v2456 + 17) & 2) == 0;
            goto LABEL_881;
          case 360:
            v26 = 373;
            goto LABEL_883;
          case 361:
            v26 = 375;
            goto LABEL_883;
          case 362:
            v26 = 377;
            goto LABEL_883;
          case 363:
            v26 = 378;
            goto LABEL_883;
          case 364:
            v26 = 379;
            goto LABEL_883;
          case 365:
            v26 = 380;
            goto LABEL_883;
          case 366:
            v26 = 376;
            goto LABEL_883;
          case 367:
            v26 = 368;
            goto LABEL_883;
          case 368:
            v26 = 340;
            goto LABEL_883;
          case 369:
            v26 = 387;
            goto LABEL_883;
          case 370:
            v26 = 362;
            goto LABEL_883;
          case 371:
            v26 = 341;
            goto LABEL_883;
          case 372:
            v26 = 357;
            goto LABEL_883;
          case 373:
            v26 = 342;
            goto LABEL_883;
          case 374:
            v26 = 366;
            goto LABEL_883;
          case 375:
            v26 = 343;
            goto LABEL_883;
          case 376:
            v26 = 360;
            goto LABEL_883;
          case 377:
            v26 = 344;
            goto LABEL_883;
          case 378:
            v26 = 356;
            goto LABEL_883;
          case 379:
            v26 = 345;
            goto LABEL_883;
          case 380:
            v26 = 346;
            goto LABEL_883;
          case 381:
            v26 = 361;
            goto LABEL_883;
          default:
            v26 = 0;
            goto LABEL_883;
        }
      }
      v26 = 389;
      if ((_DWORD)v25 == 137)
        v288 = 367;
      else
        v288 = 0;
      if ((_DWORD)v25 == 136)
        v27 = 370;
      else
        v27 = v288;
      v289 = (_DWORD)v25 == 135;
LABEL_881:
      if (!v289)
        v26 = v27;
LABEL_883:
      if ((_DWORD)v25 == 346 || (_DWORD)v25 == 334)
      {
        sub_1C6363364(v9, (llvm::VPCmpIntrinsic *)v2456);
        goto LABEL_1044;
      }
      v2439 = v26;
      v1332 = v9;
      v2555.n128_u64[0] = (unint64_t)v2556;
      v2555.n128_u64[1] = 0x400000000;
      v1333 = *(_QWORD *)(*v19 + 24);
      llvm::ComputeValueVTs(v1333, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*v19 + 40) + 40) + 272), (uint64_t)*v2456, (uint64_t)&v2555, 0, 0, 0);
      v1334 = sub_1C636AB20(*v19, (uint64_t *)v2555.n128_u64[0], v2555.n128_u32[2]);
      v2406 = v1335;
      v2412 = v1334;
      VectorLengthParamPos = llvm::VPIntrinsic::getVectorLengthParamPos(v25);
      v1337 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1333 + 80))(v1333);
      v1338 = 0;
      v1339 = 0;
      v2538[0] = v2539;
      v2538[1] = (void *)0x700000000;
      v1340 = VectorLengthParamPos & 0xFF00000000;
      v1341 = (llvm *)v1337;
      v1342 = VectorLengthParamPos;
      v1343 = v2456;
      while (2)
      {
        v1344 = *((unsigned __int8 *)v24 + 16);
        if (v1344 == 84)
        {
          v1345 = 0;
LABEL_889:
          v1346 = v1332;
          goto LABEL_890;
        }
        if (v1344 == 39)
        {
          v24 = v2456;
          v1345 = (*((_DWORD *)v2456 + 20) + 1);
          goto LABEL_889;
        }
        v1345 = 2;
        v1346 = v1332;
        v24 = v2456;
LABEL_890:
        v1347 = *((_DWORD *)v24 + 5);
        if (v1347 < 0 && (v1358 = v1347 & 0x7FFFFFF, ((unint64_t)v2456[-4 * v1358 - 1] & 0xFFFFFFFF0) != 0))
        {
          v1349 = -v1358;
          v1348 = *((_DWORD *)&v24[-4 * v1358 - 1] - 1)
                - *(_DWORD *)((char *)&v24[-4 * v1358] - (char *)v24[-4 * v1358 - 1]);
        }
        else
        {
          v1348 = 0;
          v1349 = -(uint64_t)(v1347 & 0x7FFFFFF);
        }
        if (v1339 < ((unint64_t)((char *)&(&v2456[4 * -v1348 - 4])[-4 * v1345]
                                                     - (char *)&v24[4 * v1349]) >> 5))
        {
          v1351 = sub_1C635FDC4(v1346, (unsigned __int8 *)v1343[4 * v1349]);
          v1352 = v1350;
          if (v1340 && v1342 == v1339)
          {
            v1353 = *(_QWORD *)(*v19 + 832);
            if (v1353)
              v1354 = *(_WORD *)(v1353 + 8);
            else
              v1354 = 0;
            v1351 = sub_1C5D52060(*v19, 199, (const llvm::APInt *)&v2511, v1341, 0, (uint64_t)v1351, v1350, v1354);
            v1352 = v1352 & 0xFFFFFFFF00000000 | v1355;
          }
          v1356 = LODWORD(v2538[1]);
          if (LODWORD(v2538[1]) >= (unint64_t)HIDWORD(v2538[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
            v1356 = LODWORD(v2538[1]);
          }
          v1357 = (uint64_t **)((char *)v2538[0] + 16 * v1356);
          *v1357 = v1351;
          v1357[1] = (uint64_t *)v1352;
          v1338 = ++LODWORD(v2538[1]);
          ++v1339;
          v1343 += 4;
          v24 = v2456;
          continue;
        }
        break;
      }
      switch(v2439)
      {
        case 0x16Eu:
        case 0x170u:
          sub_1C6362DCC(v1346, (llvm::VPIntrinsic *)v24, (uint64_t **)v2538, v2439 == 368);
          goto LABEL_1040;
        case 0x16Fu:
          v1407 = *(_QWORD *)v1346;
          v1408 = *(_DWORD *)(v1346 + 816);
          *(_QWORD *)&v2524 = 0;
          DWORD2(v2524) = v1408;
          if (v1407)
          {
            v1409 = (__int128 *)(v1407 + 48);
            if (v1409 != &v2524)
            {
              v1410 = *(unsigned __int8 **)v1409;
              *(_QWORD *)&v2524 = v1410;
              if (v1410)
              {
                llvm::MetadataTracking::track((uint64_t)&v2524, v1410, 2);
                v1349 = -(uint64_t)(*((_DWORD *)v24 + 5) & 0x7FFFFFF);
              }
            }
          }
          v1411 = (unint64_t)v24[4 * v1349 + 4];
          v2528 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v2538[0] + 40) + 16 * *((unsigned int *)v2538[0] + 2));
          PointerAlignment = llvm::VPIntrinsic::getPointerAlignment((llvm::VPIntrinsic *)v24);
          v1415 = PointerAlignment;
          if (PointerAlignment <= 0xFFu)
          {
            v1416 = *v19;
            v1417 = sub_1C6131264((unsigned __int8 *)&v2528, v1413, v1414);
            sub_1C6365BD8(v1416, v1417, v1418);
            v1415 = v1419;
          }
          llvm::Instruction::getAAMetadata(v24, v2529);
          v1420 = v1411 & 0xFFFFFFFFFFFFFFFBLL;
          if (v1411)
          {
            v1421 = *(_DWORD *)(*(_QWORD *)v1411 + 8);
            if ((v1421 & 0xFE) == 0x12)
              v1421 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v1411 + 16) + 8);
            LODWORD(v1411) = v1421 >> 8;
          }
          v1422 = sub_1C484358C(*(_QWORD *)(*v19 + 40) + 128, 80, 3);
          *(_QWORD *)v1422 = v1420;
          *(_QWORD *)(v1422 + 8) = 0;
          *(_DWORD *)(v1422 + 16) = v1411;
          *(_BYTE *)(v1422 + 20) = 0;
          *(_QWORD *)(v1422 + 24) = 0;
          v1423 = v2530;
          *(_OWORD *)(v1422 + 40) = *(_OWORD *)v2529;
          *(_WORD *)(v1422 + 32) = 2;
          *(_BYTE *)(v1422 + 34) = v1415;
          *(_OWORD *)(v1422 + 56) = v1423;
          *(_QWORD *)(v1422 + 72) = 0;
          *(_WORD *)(v1422 + 36) = 1;
          v1424 = *(_QWORD *)(v1346 + 832);
          v1425 = sub_1C5D14AF0((uint64_t *)v1346, v1346 + 104);
          v1427 = v1426;
          v1428 = v1346;
          v1429 = *(_QWORD *)v2538[0];
          v1430 = *((_QWORD *)v2538[0] + 1);
          v1432 = *((_QWORD *)v2538[0] + 2);
          v1431 = *((_QWORD *)v2538[0] + 3);
          v1433 = *(_QWORD *)(v1432 + 40) + 16 * v1431;
          v1434 = sub_1C61312D0(*(_QWORD *)(v1428 + 832), *(llvm **)v1433, *(_QWORD *)(v1433 + 8));
          v1436 = sub_1C5D5F13C(v1424, (uint64_t)v1425, v1427, (uint64_t)&v2524, v1429, v1430, v1432, v1431, (uint64_t)v1434, v1435, *((_QWORD *)v2538[0] + 4), *((_QWORD *)v2538[0] + 5), *((_QWORD *)v2538[0] + 6), *(_OWORD *)((char *)v2538[0] + 56), *((_QWORD *)v2538[0] + 8), *((_QWORD *)v2538[0] + 9), v2528, *((uint64_t *)&v2528 + 1), v1422,
                    0,
                    0,
                    0);
          LODWORD(v1424) = v1437;
          v1438 = *(_QWORD *)(v1428 + 832);
          *(_QWORD *)(v1438 + 192) = v1436;
          *(_DWORD *)(v1438 + 200) = v1437;
          v2526 = (unsigned __int8 *)v2456;
          v1439 = sub_1C6364290((uint64_t *)(v1428 + 8), &v2526);
          v1439[1] = v1436;
          *((_DWORD *)v1439 + 4) = v1424;
          v1440 = (unsigned __int8 *)v2524;
          if ((_QWORD)v2524)
          {
            v1441 = (unsigned __int8 **)&v2524;
            goto LABEL_1039;
          }
          goto LABEL_1040;
        case 0x171u:
        case 0x173u:
          v1359 = v1346;
          v1360 = *(_QWORD *)v2555.n128_u64[0];
          v1361 = *(_QWORD *)(v2555.n128_u64[0] + 8);
          *(_QWORD *)&v2528 = *(_QWORD *)v2555.n128_u64[0];
          *((_QWORD *)&v2528 + 1) = v1361;
          v1362 = *(_QWORD *)v1359;
          LODWORD(v1359) = *(_DWORD *)(v1359 + 816);
          v2526 = 0;
          LODWORD(v2527) = v1359;
          if (v1362)
          {
            v1363 = (unsigned __int8 **)(v1362 + 48);
            if (v1363 != &v2526)
            {
              v1364 = *v1363;
              v2526 = v1364;
              if (v1364)
              {
                llvm::MetadataTracking::track((uint64_t)&v2526, v1364, 2);
                v1349 = -(uint64_t)(*((_DWORD *)v24 + 5) & 0x7FFFFFF);
              }
            }
          }
          v1365 = *(_QWORD *)(*v19 + 24);
          v1366 = (unsigned __int8 *)v24[4 * v1349];
          v1367 = v24;
          v1368 = llvm::VPIntrinsic::getPointerAlignment((llvm::VPIntrinsic *)v24);
          llvm::Instruction::getAAMetadata(v1367, &v2524);
          if ((*((_BYTE *)v1367 + 23) & 0x20) == 0)
            goto LABEL_929;
          v1371 = ***v1367;
          v2529[0] = v1367;
          v1372 = *(_DWORD *)(v1371 + 2496);
          if (v1372)
          {
            v1373 = *(_QWORD *)(v1371 + 2480);
            v1374 = v1372 - 1;
            v1375 = v1374 & ((v1367 >> 4) ^ (v1367 >> 9));
            v1376 = (uint64_t ****)(v1373 + 40 * v1375);
            v1377 = *v1376;
            if (*v1376 == v1367)
              goto LABEL_924;
            v1378 = 0;
            v1379 = 1;
            while (v1377 != (uint64_t ***)-4096)
            {
              if (v1378)
                v1380 = 0;
              else
                v1380 = v1377 == (uint64_t ***)-8192;
              if (v1380)
                v1378 = v1376;
              v1381 = v1375 + v1379++;
              v1375 = v1381 & v1374;
              v1376 = (uint64_t ****)(v1373 + 40 * v1375);
              v1377 = *v1376;
              if (*v1376 == v2456)
                goto LABEL_924;
            }
            if (v1378)
              v1991 = v1378;
            else
              v1991 = v1376;
          }
          else
          {
            v1991 = 0;
          }
          v1376 = (uint64_t ****)sub_1C541AB24(v1371 + 2480, (uint64_t)v2529, (uint64_t *)v2529, v1991);
          v1992 = (uint64_t ***)v2529[0];
          v1376[3] = 0;
          v1376[4] = 0;
          *v1376 = v1992;
          v1376[1] = (uint64_t ***)(v1376 + 3);
          v1376[2] = (uint64_t ***)0x100000000;
LABEL_924:
          v1382 = *((unsigned int *)v1376 + 4);
          if ((_DWORD)v1382)
          {
            v1383 = v1376[1] + 1;
            v1384 = 16 * v1382;
            while (*((_DWORD *)v1383 - 2) != 4)
            {
              v1385 = 0;
              v1383 += 2;
              v1384 -= 16;
              if (!v1384)
                goto LABEL_930;
            }
            v1385 = *v1383;
          }
          else
          {
LABEL_929:
            v1385 = 0;
          }
LABEL_930:
          if (v2439 == 371)
          {
            if (v1368 <= 0xFFu)
            {
              v1386 = *v19;
              v1387 = sub_1C6131264((unsigned __int8 *)&v2528, v1369, v1370);
              sub_1C6365BD8(v1386, v1387, v1388);
              LOBYTE(v1368) = v1389;
            }
            v1390 = *(_QWORD *)v1366;
            v1391 = *(_DWORD *)(*(_QWORD *)v1366 + 8);
            v1392 = v1332;
            if ((v1391 & 0xFE) == 0x12)
            {
              v1390 = **(_QWORD **)(v1390 + 16);
              v1391 = *(_DWORD *)(v1390 + 8);
            }
            if ((v1391 & 0xFE) == 0x12)
              v1391 = *(_DWORD *)(**(_QWORD **)(v1390 + 16) + 8);
            v1393 = v1391 >> 8;
            v1394 = sub_1C484358C(*(_QWORD *)(*(_QWORD *)(v1332 + 832) + 40) + 128, 80, 3);
            *(_QWORD *)v1394 = 0;
            *(_QWORD *)(v1394 + 8) = 0;
            *(_DWORD *)(v1394 + 16) = v1393;
            *(_BYTE *)(v1394 + 20) = 0;
            *(_QWORD *)(v1394 + 24) = 0;
            v1395 = v2525;
            *(_OWORD *)(v1394 + 40) = v2524;
            *(_WORD *)(v1394 + 32) = 1;
            *(_BYTE *)(v1394 + 34) = v1368;
            *(_OWORD *)(v1394 + 56) = v1395;
            *(_QWORD *)(v1394 + 72) = v1385;
            *(_WORD *)(v1394 + 36) = 1;
            v2522 = 0;
            LODWORD(v2523) = 0;
            v2520 = 0;
            LODWORD(v2521) = 0;
            v2518 = 0;
            LODWORD(v2519) = 0;
            v2517 = 0;
            v1396 = v2456;
            if (sub_1C5D2703C((llvm::Constant *)v1366, (uint64_t)&v2522, (uint64_t)&v2520, &v2517, (uint64_t)&v2518, v1332, (uint64_t)v2456[5]))
            {
              v1398 = v2520;
              v1399 = v2521;
            }
            else
            {
              v1496 = *(_QWORD *)(v1332 + 832);
              v1497 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1365 + 32))(v1365, *(_QWORD *)(**(_QWORD **)(v1496 + 40) + 40) + 272, 0);
              v2522 = (unsigned __int8 *)sub_1C6366AB4(v1496, 0, (const llvm::APInt *)&v2526, (llvm *)v1497, 0, 0, 0);
              LODWORD(v2523) = v1498;
              v1398 = sub_1C635FDC4(v1332, v1366);
              v1399 = v1499;
              v2520 = v1398;
              LODWORD(v2521) = v1499;
              v2517 = 1;
              v1500 = *(_QWORD *)(v1332 + 832);
              v1501 = (llvm *)(*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1365 + 32))(v1365, *(_QWORD *)(**(_QWORD **)(v1500 + 40) + 40) + 272, 0);
              v1502 = v1500;
              v1392 = v1332;
              v2518 = sub_1C6366AB4(v1502, 1, (const llvm::APInt *)&v2526, v1501, 0, 1, 0);
              LODWORD(v2519) = v1503;
            }
            v1504 = (uint64_t ****)(v1398[5] + 16 * v1399);
            v1506 = *v1504;
            v1505 = v1504[1];
            v2515 = v1506;
            v2516 = v1505;
            if ((_BYTE)v1506)
            {
              LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v2515);
              v1509 = 0;
              v1508 = 0;
            }
            else
            {
              EVT = llvm::EVT::getEVT((llvm::EVT *)v1505[3], 0, v1397);
              v1509 = EVT & 0xFFFFFFFFFFFFFF00;
            }
            v2513 = v1509 | EVT;
            v2514 = v1508;
            if ((*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t ***, unint64_t *))(*(_QWORD *)v1365 + 552))(v1365, v2515, v2516, &v2513))
            {
              v1511 = (llvm *)sub_1C6347100((unsigned __int8 *)&v2515, v2513, v2514);
              v1512 = *(_QWORD *)(*v19 + 832);
              if (v1512)
                v1513 = *(_WORD *)(v1512 + 8);
              else
                v1513 = 0;
              v2520 = sub_1C5D52060(*v19, 198, (const llvm::APInt *)&v2526, v1511, v1510, (uint64_t)v1398, v2521, v1513);
              LODWORD(v2521) = v1552;
            }
            v1553 = *v19;
            v1554 = sub_1C636A8B4(*v19, v2528, *((uint64_t *)&v2528 + 1), 1, 0);
            v1555 = *v19;
            v2529[0] = *(void **)(*v19 + 192);
            LODWORD(v2529[1]) = *(_DWORD *)(v1555 + 200);
            *(_QWORD *)&v2530 = v2522;
            DWORD2(v2530) = (_DWORD)v2523;
            *(_QWORD *)&v2531 = v2520;
            DWORD2(v2531) = v2521;
            v2533 = v2519;
            v2532 = v2518;
            v1556 = *((_QWORD *)v2538[0] + 2);
            v2535 = *((_DWORD *)v2538[0] + 6);
            v2534 = v1556;
            v1557 = *((_QWORD *)v2538[0] + 4);
            v2537 = *((_DWORD *)v2538[0] + 10);
            v2536 = v1557;
            v1477 = sub_1C5D5F5B8(v1553, v1554, v1558, v2528, *((uint64_t *)&v2528 + 1), (uint64_t)&v2526, (uint64_t *)v2529, 6, v1394, v2517);
            v1479 = v1559;
          }
          else
          {
            v2440 = v1361;
            v1400 = v1360;
            if (v1368 <= 0xFFu)
            {
              sub_1C6365BD8(*v19, v1360, v2440);
              LOBYTE(v1368) = v1401;
            }
            v2529[0] = v1366;
            v2529[1] = (void *)-2;
            v2530 = v2524;
            v2531 = v2525;
            v1402 = *(_QWORD *)(v1332 + 840);
            if (v1402 && (llvm::AAResults::pointsToConstantMemory(v1402, (uint64_t)v2529, 0) & 1) != 0)
            {
              v1403 = 0;
              LODWORD(v1404) = 0;
              v1405 = *v19;
              v1406 = *v19 + 112;
            }
            else
            {
              v1405 = *v19;
              v1406 = *(_QWORD *)(*v19 + 192);
              v1404 = *(_QWORD *)(*v19 + 200);
              v1403 = 1;
            }
            v1472 = *(_QWORD *)(v1405 + 40);
            v1473 = (unint64_t)v1366 & 0xFFFFFFFFFFFFFFFBLL;
            if (v1366)
            {
              v1474 = *(_DWORD *)(*(_QWORD *)v1366 + 8);
              if ((v1474 & 0xFE) == 0x12)
                v1474 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v1366 + 16) + 8);
              LODWORD(v1366) = v1474 >> 8;
            }
            v1475 = sub_1C484358C(v1472 + 128, 80, 3);
            *(_QWORD *)v1475 = v1473;
            *(_QWORD *)(v1475 + 8) = 0;
            *(_DWORD *)(v1475 + 16) = (_DWORD)v1366;
            *(_BYTE *)(v1475 + 20) = 0;
            *(_QWORD *)(v1475 + 24) = 0;
            v1476 = v2524;
            *(_OWORD *)(v1475 + 56) = v2525;
            *(_WORD *)(v1475 + 32) = 1;
            *(_BYTE *)(v1475 + 34) = v1368;
            *(_OWORD *)(v1475 + 40) = v1476;
            *(_QWORD *)(v1475 + 72) = v1385;
            *(_WORD *)(v1475 + 36) = 1;
            v1477 = sub_1C636BECC(*v19, v1400, v2440, (uint64_t)&v2526, v1406, v1404, *(_QWORD *)v2538[0], *((_QWORD *)v2538[0] + 1), *((_QWORD *)v2538[0] + 2), *(_OWORD *)((char *)v2538[0] + 24), *((_QWORD *)v2538[0] + 4), *((_QWORD *)v2538[0] + 5), v1475, 0);
            v1479 = v1478;
            v1392 = v1332;
            v1396 = v2456;
            if ((v1403 & 1) == 0)
            {
LABEL_1037:
              v2529[0] = v1396;
              v1562 = sub_1C6364290((uint64_t *)(v1392 + 8), v2529);
              v1562[1] = v1477;
              *((_DWORD *)v1562 + 4) = v1479;
              v1440 = v2526;
              if (v2526)
              {
                v1441 = &v2526;
LABEL_1039:
                llvm::MetadataTracking::untrack((uint64_t)v1441, v1440);
              }
LABEL_1040:
              if (v2538[0] != v2539)
                free(v2538[0]);
              if ((_QWORD *)v2555.n128_u64[0] != v2556)
                free((void *)v2555.n128_u64[0]);
LABEL_1044:
              v1563 = v2511;
              if (!v2511)
                goto LABEL_1323;
              v1564 = (void **)&v2511;
              goto LABEL_1322;
            }
          }
          v1560 = *(unsigned int *)(v1392 + 112);
          if (v1560 >= *(_DWORD *)(v1392 + 116))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v1392 + 104, v1392 + 120, v1560 + 1, 16);
            LODWORD(v1560) = *(_DWORD *)(v1392 + 112);
          }
          v1561 = (_QWORD *)(*(_QWORD *)(v1392 + 104) + 16 * v1560);
          *v1561 = v1477;
          v1561[1] = 1;
          ++*(_DWORD *)(v1392 + 112);
          goto LABEL_1037;
        case 0x172u:
          v2528 = *(_OWORD *)v2555.n128_u64[0];
          v1442 = *(_QWORD *)v1346;
          v1443 = *(_DWORD *)(v1346 + 816);
          v2526 = 0;
          LODWORD(v2527) = v1443;
          if (v1442)
          {
            v1444 = (unsigned __int8 **)(v1442 + 48);
            if (v1444 != &v2526)
            {
              v1445 = *v1444;
              v2526 = v1445;
              if (v1445)
              {
                llvm::MetadataTracking::track((uint64_t)&v2526, v1445, 2);
                v1349 = -(uint64_t)(*((_DWORD *)v24 + 5) & 0x7FFFFFF);
              }
            }
          }
          v1446 = (unint64_t)v24[4 * v1349];
          v1447 = llvm::VPIntrinsic::getPointerAlignment((llvm::VPIntrinsic *)v24);
          v1450 = v1447;
          if (v1447 <= 0xFFu)
          {
            v1451 = *v19;
            v1452 = sub_1C6131264((unsigned __int8 *)&v2528, v1448, v1449);
            sub_1C6365BD8(v1451, v1452, v1453);
            v1450 = v1454;
          }
          llvm::Instruction::getAAMetadata(v24, &v2524);
          if ((*((_BYTE *)v24 + 23) & 0x20) == 0)
            goto LABEL_987;
          v1455 = ***v24;
          v2529[0] = v24;
          v1456 = *(_DWORD *)(v1455 + 2496);
          if (v1456)
          {
            v1457 = *(_QWORD *)(v1455 + 2480);
            v1458 = v1456 - 1;
            v1459 = v1458 & ((v24 >> 4) ^ (v24 >> 9));
            v1460 = (uint64_t ****)(v1457 + 40 * v1459);
            v1461 = *v1460;
            if (*v1460 == v24)
            {
LABEL_973:
              v1466 = *((unsigned int *)v1460 + 4);
              if ((_DWORD)v1466)
              {
                v1467 = v1460[1] + 1;
                v1468 = 16 * v1466;
                while (*((_DWORD *)v1467 - 2) != 4)
                {
                  v1469 = 0;
                  v1467 += 2;
                  v1468 -= 16;
                  if (!v1468)
                    goto LABEL_988;
                }
                v1469 = *v1467;
              }
              else
              {
LABEL_987:
                v1469 = 0;
              }
LABEL_988:
              v2529[0] = (void *)v1446;
              v2529[1] = (void *)-2;
              v2530 = v2524;
              v2531 = v2525;
              v1480 = *(_QWORD *)(v1346 + 840);
              if (v1480 && (llvm::AAResults::pointsToConstantMemory(v1480, (uint64_t)v2529, 0) & 1) != 0)
              {
                v1481 = 0;
                LODWORD(v1482) = 0;
                v1483 = *v19;
                v1484 = *v19 + 112;
              }
              else
              {
                v1483 = *v19;
                v1484 = *(_QWORD *)(*v19 + 192);
                v1482 = *(_QWORD *)(*v19 + 200);
                v1481 = 1;
              }
              v1485 = *(_QWORD *)(v1483 + 40);
              v1486 = v1446 & 0xFFFFFFFFFFFFFFFBLL;
              if (v1446)
              {
                v1487 = *(_DWORD *)(*(_QWORD *)v1446 + 8);
                if ((v1487 & 0xFE) == 0x12)
                  v1487 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v1446 + 16) + 8);
                LODWORD(v1446) = v1487 >> 8;
              }
              v1488 = sub_1C484358C(v1485 + 128, 80, 3);
              *(_QWORD *)v1488 = v1486;
              *(_QWORD *)(v1488 + 8) = 0;
              *(_DWORD *)(v1488 + 16) = v1446;
              *(_BYTE *)(v1488 + 20) = 0;
              *(_QWORD *)(v1488 + 24) = 0;
              *(_WORD *)(v1488 + 32) = 1;
              *(_BYTE *)(v1488 + 34) = v1450;
              v1489 = v2524;
              *(_OWORD *)(v1488 + 56) = v2525;
              *(_OWORD *)(v1488 + 40) = v1489;
              *(_QWORD *)(v1488 + 72) = v1469;
              *(_WORD *)(v1488 + 36) = 1;
              v1490 = sub_1C636C254(*v19, v2528, *((uint64_t *)&v2528 + 1), (uint64_t)&v2526, v1484, v1482, *(_QWORD *)v2538[0], *((_QWORD *)v2538[0] + 1), *((_QWORD *)v2538[0] + 2), *((_QWORD *)v2538[0] + 3), *((_QWORD *)v2538[0] + 4), *(_OWORD *)((char *)v2538[0] + 40), *((_QWORD *)v2538[0] + 6), *((_QWORD *)v2538[0] + 7), v1488, 0);
              v1492 = v1491;
              if (v1481)
              {
                v1493 = *(unsigned int *)(v1332 + 112);
                if (v1493 >= *(_DWORD *)(v1332 + 116))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v1332 + 104, v1332 + 120, v1493 + 1, 16);
                  LODWORD(v1493) = *(_DWORD *)(v1332 + 112);
                }
                v1494 = (_QWORD *)(*(_QWORD *)(v1332 + 104) + 16 * v1493);
                *v1494 = v1490;
                v1494[1] = 1;
                ++*(_DWORD *)(v1332 + 112);
              }
              v2522 = (unsigned __int8 *)v2456;
              v1495 = sub_1C6364290((uint64_t *)(v1332 + 8), &v2522);
              v1495[1] = v1490;
              *((_DWORD *)v1495 + 4) = v1492;
              if (v2526)
                llvm::MetadataTracking::untrack((uint64_t)&v2526, v2526);
              goto LABEL_1040;
            }
            v1462 = 0;
            v1463 = 1;
            while (v1461 != (uint64_t ***)-4096)
            {
              if (v1462)
                v1464 = 0;
              else
                v1464 = v1461 == (uint64_t ***)-8192;
              if (v1464)
                v1462 = v1460;
              v1465 = v1459 + v1463++;
              v1459 = v1465 & v1458;
              v1460 = (uint64_t ****)(v1457 + 40 * v1459);
              v1461 = *v1460;
              if (*v1460 == v24)
                goto LABEL_973;
            }
            if (v1462)
              v2040 = v1462;
            else
              v2040 = v1460;
          }
          else
          {
            v2040 = 0;
          }
          v1460 = (uint64_t ****)sub_1C541AB24(v1455 + 2480, (uint64_t)v2529, (uint64_t *)v2529, v2040);
          v2041 = (uint64_t ***)v2529[0];
          v1460[3] = 0;
          v1460[4] = 0;
          *v1460 = v2041;
          v1460[1] = (uint64_t ***)(v1460 + 3);
          v1460[2] = (uint64_t ***)0x100000000;
          goto LABEL_973;
        default:
          v1470 = *(_QWORD *)(*v19 + 832);
          if (v1470)
            v1471 = *(_WORD *)(v1470 + 8);
          else
            v1471 = 0;
          v1514 = sub_1C636D410(*v19, (const char *)v2439, (const llvm::APInt *)&v2511, v2412, v2406, (uint64_t *)v2538[0], v1338, v1471);
          v1516 = v1515;
          v2529[0] = v24;
          v1517 = sub_1C6364290((uint64_t *)(v1346 + 8), v2529);
          v1517[1] = v1514;
          *((_DWORD *)v1517 + 4) = v1516;
          goto LABEL_1040;
      }
    case 141:
      v1125 = *(_QWORD *)(v9 + 832);
      *(_OWORD *)v2538 = xmmword_1C866D860;
      *(_OWORD *)v2539 = unk_1C866D870;
      v2529[0] = sub_1C635C370(v9);
      v2529[1] = v1126;
      v1127 = sub_1C6366344(v1125, (const char *)0xD5, (const llvm::APInt *)&v2509, (uint64_t *)v2538, 2, (uint64_t *)v2529, 1);
      goto LABEL_774;
    case 142:
      v511 = *(_QWORD *)(v9 + 832);
      goto LABEL_422;
    case 143:
      v509 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      if (*(_DWORD *)(*(_QWORD *)(v9 + 824) + 1104) != 2
        && (*(unsigned int (**)(unsigned __int8 *, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v10 + 1336))(v10, *(_QWORD *)(*v18 + 40), v509, v510))
      {
        v511 = *(_QWORD *)(v9 + 832);
LABEL_422:
        v522 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
        v524 = v522[5] + 16 * v523;
        v525 = *(llvm **)v524;
        v526 = *(_QWORD *)(v524 + 8);
        v527 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
        v529 = v528;
        v267 = v9;
        v530 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
        v532 = v531;
        v533 = sub_1C635FDC4(v267, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
        v264 = (uint64_t)sub_1C5D58E08(v511, (const char *)0x8D, (const llvm::APInt *)&v2509, v525, v526, (uint64_t)v527, v529, v536, (uint64_t)v530, v532, (uint64_t)v533, v534, v535, v2507);
        v266 = v537;
        goto LABEL_1697;
      }
      v1518 = *(_QWORD *)(v9 + 832);
      v1519 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1521 = v1519[5] + 16 * v1520;
      v1522 = *(llvm **)v1521;
      v1523 = *(_QWORD *)(v1521 + 8);
      v1524 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1526 = v1525;
      v1527 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1528 = v2507;
      v406 = sub_1C5D56C70(v1518, 98, (const llvm::APInt *)&v2509, v1522, v1523, (uint64_t)v1524, v1526, v1530, (uint64_t)v1527, v1529, v2507);
      v408 = v1531;
      v1532 = *(_QWORD *)(v9 + 832);
      v1533 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1535 = (llvm **)(v1533[5] + 16 * v1534);
      v1536 = *v1535;
      v1537 = (uint64_t)v1535[1];
      v1538 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v2394 = v1539;
      v2396 = v1528;
      v2393 = (uint64_t)v1538;
      v416 = v1532;
      v417 = 96;
      v413 = v1536;
      v414 = v1537;
LABEL_1016:
      v1236 = (uint64_t)v406;
      v1237 = v408;
LABEL_1017:
      v220 = sub_1C5D56C70(v416, v417, (const llvm::APInt *)&v2509, v413, v414, v1236, v1237, v411, v2393, v2394, v2396);
      goto LABEL_1229;
    case 144:
      v620 = (void *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v622 = (uint64_t)v621;
      v2538[0] = v620;
      v2538[1] = v621;
      v623 = *(_QWORD *)(v9 + 832);
      v624 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v626 = v625;
      v627 = v9;
      v628 = *(_QWORD *)(v9 + 832);
      v630 = sub_1C6131264((unsigned __int8 *)v2538, v625, v629);
      v632 = sub_1C6367494(v628, v630, v631);
      v635 = *(_QWORD *)(v623 + 832);
      if (v635)
        LOWORD(v635) = *(_WORD *)(v635 + 8);
      v636 = sub_1C5D56C70(v623, 210, (const llvm::APInt *)&v2509, (llvm *)v620, v622, (uint64_t)v624, v626, v634, v632, v633, v635);
      goto LABEL_525;
    case 145:
      v745 = (void *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v747 = (uint64_t)v746;
      v2538[0] = v745;
      v2538[1] = v746;
      v748 = *(_QWORD *)(v9 + 832);
      v749 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v751 = v750;
      v627 = v9;
      v752 = *(_QWORD *)(v9 + 832);
      v754 = sub_1C6131264((unsigned __int8 *)v2538, v750, v753);
      v756 = sub_1C6367494(v752, v754, v755);
      v759 = *(_QWORD *)(v748 + 832);
      if (v759)
        LOWORD(v759) = *(_WORD *)(v759 + 8);
      v636 = sub_1C5D56C70(v748, 211, (const llvm::APInt *)&v2509, (llvm *)v745, v747, (uint64_t)v749, v751, v758, v756, v757, v759);
LABEL_525:
      v264 = (uint64_t)v636;
      v266 = v637;
      v2529[0] = v8;
      v760 = (uint64_t *)(v627 + 8);
      goto LABEL_757;
    case 146:
      v538 = (uint64_t *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4][3][1];
      v539 = llvm::convertStrToRoundingMode(v538 + 3, *v538);
      v540 = (llvm *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v542 = v541;
      v2555.n128_u16[0] = 0;
      sub_1C6361CFC(&v2555, (uint64_t)v8);
      v543 = *(_QWORD **)(v9 + 832);
      v2538[0] = v543;
      LOWORD(v2538[1]) = v2555.n128_u16[0];
      *(_QWORD *)v2539 = v543[104];
      v543[104] = v2538;
      v544 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v545 = v9;
      v547 = v546;
      v548 = v545;
      v549 = *(_QWORD *)(v545 + 832);
      v550 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, *(_QWORD *)(**(_QWORD **)(v549 + 40) + 40) + 272, 0);
      v551 = sub_1C6366AB4(v549, v539, (const llvm::APInt *)&v2509, (llvm *)v550, 0, 1, 0);
      v554 = 0;
      v555 = v543[104];
      if (v555)
        v554 = *(_WORD *)(v555 + 8);
      v556 = sub_1C5D56C70((uint64_t)v543, 140, (const llvm::APInt *)&v2509, v540, v542, (uint64_t)v544, v547, v553, (uint64_t)v551, v552, v554);
      v558 = v557;
      v2529[0] = v8;
      v559 = sub_1C6364290((uint64_t *)(v548 + 8), v2529);
      v559[1] = v556;
      *((_DWORD *)v559 + 4) = v558;
      *((_QWORD *)v2538[0] + 104) = *(_QWORD *)v2539;
      goto LABEL_1323;
    case 147:
      v761 = *(_QWORD *)(v9 + 832);
      v762 = *(_QWORD *)(**(_QWORD **)(v761 + 40) + 40);
      v763 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v762 + 272, *(unsigned int *)(v762 + 276));
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v764;
      v428 = v763;
      v765 = *(_QWORD *)(v761 + 832);
      if (v765)
        v431 = *(_WORD *)(v765 + 8);
      else
        v431 = 0;
      v433 = v761;
      v434 = 22;
LABEL_1177:
      v432 = 0;
      goto LABEL_1228;
    case 148:
    case 149:
      v318 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v320 = v319;
      v321 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v323 = v322;
      v324 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v327 = v318[5] + 16 * v320;
      v328 = *(llvm **)v327;
      v329 = *(_QWORD *)(v327 + 8);
      v330 = *(_QWORD *)(v9 + 832);
      v331 = *(_QWORD *)(v330 + 832);
      if (v318 == v321 && (_DWORD)v320 == (_DWORD)v323)
      {
        if ((_DWORD)v6 == 148)
          v1318 = 178;
        else
          v1318 = 179;
        if (v331)
          LOWORD(v331) = *(_WORD *)(v331 + 8);
        v334 = sub_1C5D56C70(v330, v1318, (const llvm::APInt *)&v2509, v328, v329, (uint64_t)v318, v320, v326, (uint64_t)v324, v325, v331);
      }
      else
      {
        if ((_DWORD)v6 == 148)
          v333 = 180;
        else
          v333 = 181;
        if (v331)
          LOWORD(v331) = *(_WORD *)(v331 + 8);
        v334 = sub_1C5D58E08(v330, (const char *)v333, (const llvm::APInt *)&v2509, v328, v329, (uint64_t)v318, v320, v326, (uint64_t)v321, v323, (uint64_t)v324, v325, SHIDWORD(v325), v331);
      }
      v264 = (uint64_t)v334;
      v266 = v335;
      v2538[0] = v8;
      v1193 = v2538;
      v760 = (uint64_t *)(v9 + 8);
      goto LABEL_1232;
    case 151:
      v1243 = (unsigned __int8 *)llvm::Value::stripPointerCasts((llvm::Value *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1244 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
      v1245 = sub_1C635FDC4(v9, v1243);
      v1246 = *(_QWORD **)(v9 + 928);
      v1247 = *((_DWORD *)v1245 + 19);
      v1249 = (char *)v1246[4];
      v1248 = v1246[5];
      if ((unint64_t)v1249 >= v1248)
      {
        v1742 = (char *)v1246[3];
        v1743 = (v1249 - v1742) >> 4;
        v1744 = v1743 + 1;
        if ((unint64_t)(v1743 + 1) >> 60)
LABEL_1734:
          abort();
        v1745 = v1248 - (_QWORD)v1742;
        if (v1745 >> 3 > v1744)
          v1744 = v1745 >> 3;
        if ((unint64_t)v1745 >= 0x7FFFFFFFFFFFFFF0)
          v1746 = 0xFFFFFFFFFFFFFFFLL;
        else
          v1746 = v1744;
        if (v1746)
        {
          if (v1746 >> 60)
LABEL_1735:
            sub_1C4764EE4();
          v1747 = (char *)operator new(16 * v1746);
        }
        else
        {
          v1747 = 0;
        }
        v1966 = &v1747[16 * v1743];
        *(_DWORD *)v1966 = v1247;
        *((_DWORD *)v1966 + 1) = -1;
        *((_QWORD *)v1966 + 1) = v1244;
        v1250 = v1966 + 16;
        if (v1249 != v1742)
        {
          do
          {
            *((_OWORD *)v1966 - 1) = *((_OWORD *)v1249 - 1);
            v1966 -= 16;
            v1249 -= 16;
          }
          while (v1249 != v1742);
          v1249 = (char *)v1246[3];
        }
        v1246[3] = v1966;
        v1246[4] = v1250;
        v1246[5] = &v1747[16 * v1746];
        if (v1249)
          operator delete(v1249);
      }
      else
      {
        *(_DWORD *)v1249 = v1247;
        *((_DWORD *)v1249 + 1) = -1;
        *((_QWORD *)v1249 + 1) = v1244;
        v1250 = v1249 + 16;
      }
      v1246[4] = v1250;
      goto LABEL_1323;
    case 153:
      v512 = (void *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v513 = v9;
      v515 = v514;
      v2538[0] = v512;
      v2538[1] = v514;
      v516 = sub_1C635FDC4(v513, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v518 = v517;
      v519 = (uint64_t *)(v516[5] + 16 * v517);
      v520 = *v519;
      v521 = v519[1];
      if (((*(uint64_t (**)(unsigned __int8 *, void *, void *, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, v512, v515, *v519, v521) & 1) == 0)
      {
        v56 = v513;
        v57 = (uint64_t)v8;
        v58 = 153;
LABEL_57:
        sub_1C5D27790(v56, v57, v58);
        goto LABEL_1323;
      }
      v2418 = v513;
      v2278 = sub_1C635FDC4(v513, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2280 = v2279;
      v2282 = (llvm *)sub_1C6347100((unsigned __int8 *)v2538, v520, v521);
      v2283 = v2281;
      if ((_BYTE)v2282)
      {
        if (v2282 - 120 >= 0x33)
          goto LABEL_1621;
      }
      else if (*(_BYTE *)(v2281 + 8) != 19)
      {
LABEL_1621:
        v2284 = v18;
        v2285 = sub_1C5CA0FB8(*v18, v2282, v2281, (const llvm::APInt *)&v2509, (uint64_t)v516, v518);
        v2287 = v2286;
        v2288 = sub_1C5CA0FB8(*v18, v2282, v2283, (const llvm::APInt *)&v2509, (uint64_t)v2278, v2280);
LABEL_1640:
        v2306 = (uint64_t)v2288;
        v2307 = v2289;
        v2308 = sub_1C6367924(*v2284, (const char *)&v2509, (_BOOL8)v2282, v2283);
        v2311 = *(_QWORD *)(*v2284 + 832);
        if (v2311)
          LOWORD(v2311) = *(_WORD *)(v2311 + 8);
        v2312 = sub_1C5D56C70(*v2284, 83, (const llvm::APInt *)&v2509, v2282, v2283, (uint64_t)v2285, v2287, v2310, v2308, v2309, v2311);
        v2314 = v2313;
        v2315 = *v18;
        v2316 = (llvm *)v2538[0];
        v2317 = v2538[1];
        v2318 = sub_1C6367818((_QWORD *)*v18, 0xCu);
        v2321 = *(_QWORD *)(v2315 + 832);
        if (v2321)
          LOWORD(v2321) = *(_WORD *)(v2321 + 8);
        v264 = (uint64_t)sub_1C5D58E08(v2315, (const char *)0xC1, (const llvm::APInt *)&v2509, v2316, (uint64_t)v2317, (uint64_t)v2312, v2314, v2320, v2306, v2307, v2318, v2319, SHIDWORD(v2319), v2321);
        v266 = v2322;
        v2529[0] = v2456;
        v760 = (uint64_t *)(v2418 + 8);
        goto LABEL_757;
      }
      v2284 = v18;
      v2285 = sub_1C5CA0F18(*v18, v2282, v2281, (const llvm::APInt *)&v2509, (uint64_t)v516, v518);
      v2287 = v2305;
      v2288 = sub_1C5CA0F18(*v18, v2282, v2283, (const llvm::APInt *)&v2509, (uint64_t)v2278, v2280);
      goto LABEL_1640;
    case 154:
      v847 = sub_1C635C370(v9);
      v849 = v848;
      v850 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40);
      v851 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v850 + 272, *(unsigned int *)(v850 + 276));
      v852 = v851;
      LOBYTE(v2538[0]) = v851;
      v2538[1] = 0;
      v853 = (void *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v854 = (char)v853;
      v2529[0] = v853;
      v2529[1] = v855;
      if (v852)
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v2538);
      else
        ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2538);
      v1675 = ExtendedSizeInBits;
      if (v854)
        v1676 = sub_1C47A8C74((unsigned __int8 *)v2529);
      else
        v1676 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2529);
      if (v1675 >= v1676)
      {
        v1677 = *(_QWORD *)(v9 + 832);
        v1678 = sub_1C636D7B0((llvm *)v2529[0], (uint64_t)v2529[1]);
        v1679 = sub_1C636D648(v1677, (const char *)0x13C, (const llvm::APInt *)&v2509, v1678, 1, (uint64_t)v847, v849);
        v1681 = v1680;
        v1682 = *(_QWORD *)(v9 + 832);
        *(_QWORD *)(v1682 + 192) = v847;
        *(_DWORD *)(v1682 + 200) = v849;
        v2555.n128_u64[0] = (unint64_t)v8;
        v1683 = sub_1C6364290((uint64_t *)(v9 + 8), &v2555);
        v1683[1] = v1679;
        *((_DWORD *)v1683 + 4) = v1681;
        goto LABEL_1323;
      }
      v2385 = "Wrong result type for @llvm.get.dynamic.area.offset intrinsic!";
      goto LABEL_1732;
    case 157:
      v2538[0] = v2539;
      v2538[1] = (void *)0x1000000000;
      v1144 = (unint64_t)v8;
      v1145 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1147 = v1146;
      v1148 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v1148 = v2538[1];
      }
      v1149 = (uint64_t **)((char *)v2538[0] + 16 * v1148);
      *v1149 = v1145;
      v1149[1] = v1147;
      ++LODWORD(v2538[1]);
      v1150 = (uint64_t *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
      v1151 = (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*v18 + 40) + 40) + 272);
      LODWORD(v2529[1]) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v1151, *v1150);
      if (LODWORD(v2529[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)v2529, 0, 0);
      else
        v2529[0] = 0;
      v1153 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v1150, v1151, (const void **)v2529, 1, 0, 0, v1152);
      if (LODWORD(v2529[1]) >= 0x41)
        MEMORY[0x1CAA32F9C](v2529[0], 0x1000C8000313F17);
      v1154 = *(unsigned __int8 *)(v1153 + 16);
      if ((v1154 - 2) >= 2 && v1154 != 0)
        goto LABEL_1731;
      v1156 = sub_1C6366FFC(*v18, v1153, (uint64_t)&v2509, (llvm *)6, 0, 0, 1, 0);
      v1158 = v1157;
      v1159 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v1159 = v2538[1];
      }
      v1160 = (uint64_t **)((char *)v2538[0] + 16 * v1159);
      *v1160 = v1156;
      v1160[1] = v1158;
      ++LODWORD(v2538[1]);
      v2529[0] = &v2530;
      v2529[1] = (void *)0x800000000;
      v1161 = *((unsigned __int8 *)v8 + 16);
      if (v1161 == 84)
      {
        v1162 = 0;
      }
      else if (v1161 == 39)
      {
        v1144 = (unint64_t)v8;
        v1162 = (*((_DWORD *)v8 + 20) + 1);
      }
      else
      {
        v1162 = 2;
        v1144 = (unint64_t)v8;
      }
      v1163 = (uint64_t *)(v9 + 832);
      v1164 = *(_DWORD *)(v1144 + 20);
      if (v1164 < 0
        && (v2391 = v1144 - 32 * (v1164 & 0x7FFFFFF), v2392 = *(_QWORD *)(v2391 - 8), (v2392 & 0xFFFFFFFF0) != 0))
      {
        v1165 = v9;
        v1167 = -(uint64_t)(v1164 & 0x7FFFFFF);
        v1166 = *(_DWORD *)(v2391 - 12) - *(_DWORD *)(v2391 - v2392);
      }
      else
      {
        v1165 = v9;
        v1166 = 0;
        v1167 = -(uint64_t)(v1164 & 0x7FFFFFF);
      }
      v1168 = (-32 * v1162 + 32 * (unint64_t)-v1166 - 32 * v1167 - 32) >> 5;
      if ((_DWORD)v1168 == 1)
      {
        v1169 = (char *)&v2530;
        v1170 = &v2530;
        goto LABEL_1294;
      }
      v1794 = 1;
      while (1)
      {
        v1795 = (uint64_t *)(&v2456[4 * v1794])[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
        v1796 = (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*v1163 + 40) + 40) + 272);
        v2555.n128_u32[2] = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v1796, *v1795);
        if (v2555.n128_u32[2] > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v2555, 0, 0);
        else
          v2555.n128_u64[0] = 0;
        v1798 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v1795, v1796, (const void **)&v2555, 1, 0, 0, v1797);
        if (v2555.n128_u32[2] > 0x40)
        {
          v1799 = *(_QWORD *)v2555.n128_u64[0];
          MEMORY[0x1CAA32F9C]();
        }
        else
        {
          v1799 = (uint64_t)(v2555.n128_u64[0] << -v2555.n128_u8[8]) >> -v2555.n128_u8[8];
        }
        v1800 = *(unsigned __int8 *)(v1798 + 16);
        v1801 = v1800 > 3 || v1800 == 1;
        v1802 = v1801 ? 0 : v1798;
        if (v1802 != v1153)
          break;
        v1803 = sub_1C635FDC4(v1165, (unsigned __int8 *)(&v2456[4 * v1794 + 4])[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)]);
        v1805 = *((unsigned __int16 *)v1803 + 12);
        v430 = v1805 > 0x26;
        v1806 = (1 << v1805) & 0x6000006000;
        if (v430 || v1806 == 0)
        {
LABEL_1731:
          v2385 = "llvm.icall.branch.funnel operand must be a GlobalValue";
LABEL_1732:
          llvm::report_fatal_error((llvm *)v2385, (const char *)1);
        }
        v2555.n128_u64[0] = v1799;
        v1808 = v1803[5] + 16 * v1804;
        v2555.n128_u64[1] = (unint64_t)sub_1C6366FFC(*v1163, v1803[10], (uint64_t)&v2509, *(llvm **)v1808, *(_QWORD *)(v1808 + 8), v1803[11], 1, 0);
        v2556[0] = v1809;
        v1810 = (char *)v2529[0];
        if (LODWORD(v2529[1]) >= HIDWORD(v2529[1]))
        {
          v1815 = LODWORD(v2529[1]) + 1;
          if (v2529[0] <= &v2555 && (char *)v2529[0] + 24 * LODWORD(v2529[1]) > (char *)&v2555)
          {
            v1816 = (char *)&v2555 - (char *)v2529[0];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2529, (uint64_t)&v2530, v1815, 24);
            v1810 = (char *)v2529[0];
            v1811 = (__n128 *)((char *)v2529[0] + v1816);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2529, (uint64_t)&v2530, v1815, 24);
            v1811 = &v2555;
            v1810 = (char *)v2529[0];
          }
        }
        else
        {
          v1811 = &v2555;
        }
        v1812 = &v1810[24 * LODWORD(v2529[1])];
        v1813 = *v1811;
        *((_QWORD *)v1812 + 2) = v1811[1].n128_u64[0];
        *(__n128 *)v1812 = v1813;
        v1814 = ++LODWORD(v2529[1]);
        v1794 += 2;
        if ((_DWORD)v1168 == v1794)
        {
          v1170 = (__int128 *)v2529[0];
          v1169 = (char *)v2529[0] + 24 * v1814;
          if ((_DWORD)v1814)
          {
            v1817 = 126 - 2 * __clz(v1814);
            v1144 = (unint64_t)v2456;
          }
          else
          {
            v1144 = (unint64_t)v2456;
LABEL_1294:
            v1817 = 0;
          }
          sub_1C5D39E70((uint64_t)v1170, (unint64_t)v1169, v1817, 1);
          if (LODWORD(v2529[1]))
          {
            v1942 = (char *)v2529[0];
            v1943 = (char *)v2529[0] + 24 * LODWORD(v2529[1]);
            do
            {
              v1944 = sub_1C6366AB4(*v1163, *(_QWORD *)v1942, (const llvm::APInt *)&v2509, (llvm *)5, 0, 1, 0);
              v1946 = v1945;
              v1947 = LODWORD(v2538[1]);
              if (LODWORD(v2538[1]) >= (unint64_t)HIDWORD(v2538[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
                v1947 = LODWORD(v2538[1]);
              }
              v1948 = (char *)v2538[0] + 16 * v1947;
              *v1948 = v1944;
              v1948[1] = v1946;
              v1949 = (LODWORD(v2538[1]) + 1);
              LODWORD(v2538[1]) = v1949;
              v1950 = *(_OWORD *)(v1942 + 8);
              if (v1949 >= HIDWORD(v2538[1]))
              {
                *(_OWORD *)v2458 = *(_OWORD *)(v1942 + 8);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v1949 + 1, 16);
                v1950 = *(_OWORD *)v2458;
                LODWORD(v1949) = v2538[1];
              }
              *((_OWORD *)v2538[0] + v1949) = v1950;
              v1937 = ++LODWORD(v2538[1]);
              v1942 += 24;
            }
            while (v1942 != v1943);
          }
          else
          {
            v1937 = v2538[1];
          }
          v1938 = *(_OWORD *)(*v1163 + 192);
          if (v1937 >= HIDWORD(v2538[1]))
          {
            *(_OWORD *)v2459 = *(_OWORD *)(*v1163 + 192);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v1937 + 1, 16);
            v1938 = *(_OWORD *)v2459;
            v1937 = v2538[1];
          }
          *((_OWORD *)v2538[0] + v1937) = v1938;
          ++LODWORD(v2538[1]);
          v1939 = sub_1C636E56C(*(_QWORD *)(v1165 + 832), 41, (uint64_t)&v2509, (llvm *)1, 0, (uint64_t *)v2538[0], LODWORD(v2538[1]));
          v1940 = *(_QWORD *)(v1165 + 832);
          *(_QWORD *)(v1940 + 192) = v1939;
          *(_DWORD *)(v1940 + 200) = 0;
          v2555.n128_u64[0] = v1144;
          v1941 = sub_1C6364290((uint64_t *)(v1165 + 8), &v2555);
          v1941[1] = v1939;
          *((_DWORD *)v1941 + 4) = 0;
          *(_BYTE *)(v1165 + 960) = 1;
          if (v2529[0] != &v2530)
            free(v2529[0]);
          v181 = v2538[0];
          if (v2538[0] == v2539)
            goto LABEL_1323;
LABEL_194:
          free(v181);
          goto LABEL_1323;
        }
      }
      v2385 = "all llvm.icall.branch.funnel operands must refer to the same GlobalValue";
      goto LABEL_1732;
    case 158:
      v901 = llvm::Value::stripPointerCasts((llvm::Value *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      for (k = 0; k != 12; k += 2)
      {
        v903 = &v2538[k];
        *v903 = 0;
        *((_DWORD *)v903 + 2) = 0;
      }
      v2538[0] = sub_1C635C370(v9);
      LODWORD(v2538[1]) = v904;
      *(_QWORD *)v2539 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      *(_DWORD *)&v2539[8] = v905;
      *(_QWORD *)&v2539[16] = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      LODWORD(v2540) = v906;
      v2541 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      LODWORD(v2542) = v907;
      v2543 = (unsigned __int8 *)sub_1C5D435A0(*(_QWORD *)(v9 + 832), (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      LODWORD(v2544) = v908;
      v2545 = (unsigned __int8 *)sub_1C5D435A0(*(_QWORD *)(v9 + 832), (uint64_t)v901);
      LODWORD(v2546) = v909;
      v910 = *(_QWORD *)(v9 + 832);
      v911 = *(_QWORD *)(v910 + 832);
      if (v911)
        v912 = *(unsigned __int16 *)(v911 + 8);
      else
        v912 = 0;
      v808 = (unint64_t)sub_1C636D0C8(v910, (const char *)0x11A, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t *)v2538, 6, v912);
      v1662 = *v18;
      goto LABEL_1406;
    case 164:
      v1218 = *(_QWORD *)(v9 + 832);
      v1219 = (llvm *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(v1218 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v220 = sub_1C61312D0(v1218, v1219, v1220);
      goto LABEL_1229;
    case 167:
    case 168:
      if (!*(_DWORD *)(*(_QWORD *)(v9 + 824) + 552))
        goto LABEL_1323;
      v52 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v53 = *v52;
      v54 = *((_DWORD *)*v52 + 8);
      if (v54 > 0x40)
        v55 = *v53[3];
      else
        v55 = (uint64_t)((_QWORD)v53[3] << -(char)v54) >> -(char)v54;
      v2457 = v55;
      v191 = (uint64_t *)v52[4];
      v2538[0] = v2539;
      v2538[1] = (void *)0x400000000;
      llvm::getUnderlyingObjects((uint64_t)v191, (uint64_t)v2538, 0, (llvm::Value *)6);
      v192 = v2538[0];
      if (!LODWORD(v2538[1]))
        goto LABEL_192;
      v193 = 8 * LODWORD(v2538[1]);
      while (1)
      {
        v194 = *(_QWORD *)v192;
        if (*(_QWORD *)v192 && *(_BYTE *)(v194 + 16) == 59)
        {
          v195 = *(_QWORD *)(v9 + 912);
          v2555.n128_u64[0] = *(_QWORD *)v192;
          v2529[0] = 0;
          if ((sub_1C47A82D8(v195 + 176, &v2555, v2529) & 1) != 0)
            v196 = v2529[0];
          else
            v196 = (_DWORD *)(*(_QWORD *)(v195 + 176) + 16 * *(unsigned int *)(v195 + 192));
          if (v196 == (_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 912) + 176)
                                + 16 * *(unsigned int *)(*(_QWORD *)(v9 + 912) + 192)))
          {
LABEL_191:
            v192 = v2538[0];
LABEL_192:
            if (v192 == v2539)
              goto LABEL_1323;
            v181 = v192;
            goto LABEL_194;
          }
          v2444 = v196[2];
          v197 = (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*v18 + 40) + 40) + 272);
          LODWORD(v2529[1]) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v197, *v191);
          if (LODWORD(v2529[1]) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)v2529, 0, 0);
          else
            v2529[0] = 0;
          v199 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v191, v197, (const void **)v2529, 1, 0, 0, v198);
          if (LODWORD(v2529[1]) > 0x40)
          {
            v200 = *(_QWORD *)v2529[0];
            MEMORY[0x1CAA32F9C]();
          }
          else
          {
            v200 = (uint64_t)v2529[0] << -(uint64_t)LODWORD(v2529[1]) >> -(uint64_t)LODWORD(v2529[1]);
          }
          if (v199 == v194)
            v201 = v200;
          else
            v201 = -1;
          v202 = *(_QWORD *)(v9 + 832);
          v203 = sub_1C635C370(v9);
          v205 = sub_1C5D5CAB4(v202, v6 == 168, (uint64_t)&v2509, (uint64_t)v203, v204, v2444, v2457, v201);
          v206 = *(_QWORD *)(v9 + 832);
          *(_QWORD *)(v206 + 192) = v205;
          *(_DWORD *)(v206 + 200) = v207;
        }
        v192 += 8;
        v193 -= 8;
        if (!v193)
          goto LABEL_191;
      }
    case 169:
    case 170:
    case 180:
    case 181:
      if ((int)v6 > 179)
      {
        if ((_DWORD)v6 == 180)
          v243 = 244;
        else
          v243 = 242;
      }
      else if ((_DWORD)v6 == 169)
      {
        v243 = 245;
      }
      else
      {
        v243 = 243;
      }
      v718 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v720 = v719;
      v721 = *(_QWORD *)(v9 + 832);
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v722;
      v723 = *(_QWORD *)(v721 + 832);
      if (v723)
        v431 = *(_WORD *)(v723 + 8);
      else
        v431 = 0;
      v433 = v721;
      v434 = v243;
      goto LABEL_505;
    case 173:
      v70 = *(_QWORD *)(*v18 + 40);
      v2428 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v70 + 16) + 104))(*(_QWORD *)(v70 + 16));
      v71 = v2456;
      v72 = *((unsigned __int8 *)v2456 + 16);
      if (v72 == 84)
      {
        v73 = 0;
      }
      else if (v72 == 39)
      {
        v71 = v2456;
        v73 = (*((_DWORD *)v2456 + 20) + 1);
      }
      else
      {
        v73 = 2;
        v71 = v2456;
      }
      v74 = *((_DWORD *)v71 + 5);
      if (v74 < 0
        && (v2387 = &v71[-4 * (v74 & 0x7FFFFFF)], v2388 = (uint64_t)*(v2387 - 1), (v2388 & 0xFFFFFFFF0) != 0))
      {
        v76 = -(uint64_t)(v74 & 0x7FFFFFF);
        v75 = (*((_DWORD *)v2387 - 3) - *(_DWORD *)((char *)v2387 - v2388));
      }
      else
      {
        v75 = 0;
        v76 = -(uint64_t)(v74 & 0x7FFFFFF);
      }
      v77 = -32 * v73 - 32 * v75 - 32 * v76 - 32;
      if ((v77 & 0x1FFFFFFFE0) == 0)
        goto LABEL_1323;
      v78 = 0;
      v79 = (v77 >> 5);
      while (1)
      {
        v80 = llvm::Value::stripPointerCasts((llvm::Value *)(&v2456[4 * v78])[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)]);
        if (*((_BYTE *)v80 + 16) != 19)
        {
          v2555.n128_u64[0] = (unint64_t)v80;
          v81 = sub_1C632C0A0((_DWORD *)(*(_QWORD *)(v9 + 912) + 176), &v2555);
          v82 = *(_QWORD *)(v70 + 32);
          v83 = *(_QWORD *)(v82 + 2056);
          v84 = v82 + 8;
          if (v83)
            v84 = v83;
          v85 = *(uint64_t ****)v70;
          if ((*(_BYTE *)(*(_QWORD *)v70 + 23) & 0x10) != 0)
          {
            v86 = ***v85;
            v87 = *(_QWORD *)(v86 + 152);
            v88 = *(unsigned int *)(v86 + 168);
            if ((_DWORD)v88)
            {
              LODWORD(v89) = (v88 - 1) & ((v85 >> 4) ^ (v85 >> 9));
              v90 = (uint64_t ****)(v87 + 16 * v89);
              v91 = *v90;
              if (*v90 != v85)
              {
                v92 = 1;
                do
                {
                  if (v91 == (uint64_t ***)-4096)
                    goto LABEL_82;
                  v93 = v89 + v92++;
                  v89 = v93 & (v88 - 1);
                  v91 = *(uint64_t ****)(v87 + 16 * v89);
                }
                while (v91 != v85);
                v90 = (uint64_t ****)(v87 + 16 * v89);
              }
            }
            else
            {
LABEL_82:
              v90 = (uint64_t ****)(v87 + 16 * v88);
            }
            v94 = v90[1];
            v97 = (uint64_t)*v94;
            v95 = (char *)(v94 + 2);
            v96 = v97;
            if (v97)
            {
              v99 = *v95;
              if (v99 == 1)
                v98 = v96 - 1;
              else
                v98 = v96;
              if (v99 == 1)
                v95 = (char *)v90[1] + 17;
            }
            else
            {
              v98 = 0;
            }
          }
          else
          {
            v98 = 0;
            v95 = &byte_1C871356D;
          }
          v2442 = *((_DWORD *)v81 + 2);
          FrameAllocSymbol = llvm::MCContext::getOrCreateFrameAllocSymbol(v84, (uint64_t)v95, v98, v78);
          v101 = v9;
          v102 = *(_QWORD *)(v9 + 912);
          v103 = *(_QWORD *)(v102 + 640);
          v104 = *(unint64_t **)(v102 + 648);
          v105 = *(_QWORD *)(v2428 + 8);
          v106 = *(llvm::MachineFunction **)(v103 + 32);
          v2529[0] = v2508;
          if (v2508)
            llvm::MetadataTracking::track((uint64_t)v2529, v2508, 2);
          v107 = *((_QWORD *)v106 + 28);
          if (v107)
            *((_QWORD *)v106 + 28) = *(_QWORD *)v107;
          else
            v107 = sub_1C484358C((uint64_t)v106 + 128, 72, 3);
          v2538[0] = v2529[0];
          if (v2529[0])
          {
            llvm::MetadataTracking::retrack((uint64_t)v2529, (unsigned __int8 *)v2529[0], (uint64_t)v2538);
            v2529[0] = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v107, v106, v105 + 1536, (unsigned __int8 **)v2538, 0);
          if (v2538[0])
            llvm::MetadataTracking::untrack((uint64_t)v2538, (unsigned __int8 *)v2538[0]);
          v9 = v101;
          if (v2529[0])
            llvm::MetadataTracking::untrack((uint64_t)v2529, (unsigned __int8 *)v2529[0]);
          v108 = *(_QWORD *)(v103 + 40);
          *(_QWORD *)(v107 + 24) = v108;
          v109 = *(_QWORD *)(v108 + 32);
          v110 = *(unsigned int *)(v107 + 40);
          if ((_DWORD)v110)
          {
            v113 = *(_QWORD *)(v107 + 32);
            v114 = *(_QWORD *)(v109 + 40);
            v115 = 32 * v110;
            do
            {
              if (!*(_BYTE *)v113)
              {
                v116 = *(unsigned int *)(v113 + 4);
                if ((int)v116 >= 0)
                  v117 = (uint64_t *)(*(_QWORD *)(v114 + 272) + 8 * v116);
                else
                  v117 = (uint64_t *)(*(_QWORD *)(v114 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
                v118 = *v117;
                if (*v117)
                {
                  v119 = *(_QWORD *)(v118 + 16);
                  *(_QWORD *)(v118 + 16) = v113;
                  *(_QWORD *)(v113 + 16) = v119;
                  if ((*(_BYTE *)(v113 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v113 + 24) = v118;
                  }
                  else
                  {
                    *(_QWORD *)(v113 + 24) = 0;
                    v117 = (uint64_t *)(v119 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v113 + 16) = v113;
                  *(_QWORD *)(v113 + 24) = 0;
                }
                *v117 = v113;
              }
              v113 += 32;
              v115 -= 32;
            }
            while (v115);
          }
          v111 = *(_QWORD *)(v109 + 728);
          if (v111)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v111 + 24))(v111, v107);
          v112 = *v104 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v107 = v112 | *(_QWORD *)v107 & 7;
          *(_QWORD *)(v107 + 8) = v104;
          *(_QWORD *)(v112 + 8) = v107;
          *v104 = *v104 & 7 | v107;
          v2538[1] = 0;
          *(_QWORD *)v2539 = FrameAllocSymbol;
          *(_DWORD *)&v2539[8] = 0;
          v2538[0] = (void *)15;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)v2538);
          LODWORD(v2538[0]) = 5;
          v2538[1] = 0;
          *(_DWORD *)v2539 = v2442;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v107, v106, (const llvm::MachineOperand *)v2538);
        }
        if (++v78 == v79)
          goto LABEL_1323;
      }
    case 174:
      v827 = *(_QWORD *)(*v18 + 40);
      v828 = llvm::Value::stripPointerCasts((llvm::Value *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v829 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8];
      v830 = (unint64_t **)(v829 + 3);
      v831 = *((_DWORD *)v829 + 8);
      if (v831 >= 0x41)
      {
        if (v831 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v829 + 3)) > 0x40)
          goto LABEL_1143;
        v832 = **v830;
      }
      else
      {
        v832 = (unint64_t)*v830;
      }
      if (!(v832 >> 31))
        goto LABEL_1144;
LABEL_1143:
      LODWORD(v832) = 0x7FFFFFFF;
LABEL_1144:
      v1663 = *(_QWORD *)(v827 + 32);
      v1664 = *(_QWORD *)(v1663 + 2056);
      v1665 = v1663 + 8;
      if (v1664)
        v1666 = v1664;
      else
        v1666 = v1665;
      if ((*((_BYTE *)v828 + 23) & 0x10) == 0)
      {
        v1971 = 0;
        v1968 = &byte_1C871356D;
        goto LABEL_1467;
      }
      v1667 = ***(_QWORD ***)v828;
      v1668 = *(_QWORD *)(v1667 + 152);
      v1669 = *(unsigned int *)(v1667 + 168);
      if (!(_DWORD)v1669)
        goto LABEL_1459;
      LODWORD(v1670) = (v1669 - 1) & ((v828 >> 4) ^ (v828 >> 9));
      v1671 = (llvm::Value **)(v1668 + 16 * v1670);
      v1672 = *v1671;
      if (*v1671 == v828)
        goto LABEL_1460;
      v1673 = 1;
      do
      {
        if (v1672 == (llvm::Value *)-4096)
        {
LABEL_1459:
          v1671 = (llvm::Value **)(v1668 + 16 * v1669);
          goto LABEL_1460;
        }
        v1674 = v1670 + v1673++;
        v1670 = v1674 & (v1669 - 1);
        v1672 = *(llvm::Value **)(v1668 + 16 * v1670);
      }
      while (v1672 != v828);
      v1671 = (llvm::Value **)(v1668 + 16 * v1670);
LABEL_1460:
      v1967 = v1671[1];
      v1970 = *(_QWORD *)v1967;
      v1968 = (char *)v1967 + 16;
      v1969 = v1970;
      if (v1970)
      {
        v1972 = *v1968;
        if (v1972 == 1)
          v1971 = v1969 - 1;
        else
          v1971 = v1969;
        if (v1972 == 1)
          v1968 = (char *)v1671[1] + 17;
      }
      else
      {
        v1971 = 0;
      }
LABEL_1467:
      v1973 = llvm::MCContext::getOrCreateFrameAllocSymbol(v1666, (uint64_t)v1968, v1971, v832);
      v1974 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1976 = v1975;
      v1977 = v1975;
      v1978 = (uint64_t *)(v1974[5] + 16 * v1975);
      v1979 = (llvm *)*v1978;
      v1980 = v1978[1];
      v1982 = sub_1C636771C(*(_QWORD *)(v9 + 832), v1973, *v1978, v1980);
      v1983 = *(_QWORD *)(v9 + 832);
      v1984 = *(_QWORD *)(v1983 + 832);
      if (v1984)
        v1985 = *(_WORD *)(v1984 + 8);
      else
        v1985 = 0;
      v1986 = sub_1C5D52060(v1983, 26, (const llvm::APInt *)&v2509, v1979, v1980, v1982, v1981, v1985);
      v220 = sub_1C5D56C70(*(_QWORD *)(v9 + 832), 56, (const llvm::APInt *)&v2509, *(llvm **)(v1974[5] + 16 * v1977), *(_QWORD *)(v1974[5] + 16 * v1977 + 8), (uint64_t)v1974, v1976, v1988, (uint64_t)v1986, v1987, 0);
LABEL_1229:
      v264 = (uint64_t)v220;
      v266 = v221;
      v2538[0] = v8;
LABEL_1230:
      v760 = (uint64_t *)(v9 + 8);
      goto LABEL_1231;
    case 175:
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v638;
      v426 = *(_QWORD *)(v9 + 832);
      v639 = (uint64_t *)(v424[5] + 16 * v638);
      v428 = *v639;
      if (*v639 != 10 || dword_1ED824E08 == 0 || dword_1ED824E08 > 0x12)
      {
        v431 = v2507;
        v432 = v639[1];
        v433 = *(_QWORD *)(v9 + 832);
        v434 = 230;
        goto LABEL_1228;
      }
      v1632 = *(_QWORD *)(v426 + 832);
      if (v1632)
        v1633 = *(_WORD *)(v1632 + 8);
      else
        v1633 = 0;
      v1872 = sub_1C5D52060(*(_QWORD *)(v9 + 832), 216, (const llvm::APInt *)&v2509, (llvm *)5, 0, (uint64_t)v424, v638, v1633);
      v1874 = v1873;
      v1875 = sub_1C5D389BC(v426, (uint64_t)v1872, v1873, (uint64_t *)v10, (const llvm::APInt *)&v2509);
      v1877 = v1876;
      v1878 = sub_1C5D404C4(v426, (const llvm::APInt *)&v2509, 10, 0, 0, 0.693147182);
      v1881 = 0;
      v1882 = *(_QWORD *)(v426 + 832);
      if (v1882)
        v1881 = *(_WORD *)(v1882 + 8);
      v1857 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1875, v1877, v1880, (uint64_t)v1878, v1879, v1881);
      v1859 = v1883;
      v1860 = sub_1C5D38B64(v426, (uint64_t)v1872, v1874, (const llvm::APInt *)&v2509);
      v1862 = v1884;
      if (dword_1ED824E08 > 6)
      {
        if (dword_1ED824E08 > 0xC)
        {
          v2011 = sub_1C5D38C7C(v426, 0xBC91E5AC, (const llvm::APFloat *)&v2509);
          v2014 = *(_QWORD *)(v426 + 832);
          v1867 = v9;
          if (v2014)
            LOWORD(v2014) = *(_WORD *)(v2014 + 8);
          v2149 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v2013, (uint64_t)v2011, v2012, v2014);
          v2151 = v2150;
          v2152 = sub_1C5D38C7C(v426, 0x3E4350AAu, (const llvm::APFloat *)&v2509);
          v2155 = 0;
          v2156 = *(_QWORD *)(v426 + 832);
          if (v2156)
            v2155 = *(_WORD *)(v2156 + 8);
          v2158 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2149, v2151, v2154, (uint64_t)v2152, v2153, v2155);
          v2160 = 0;
          v2161 = *(_QWORD *)(v426 + 832);
          if (v2161)
            v2160 = *(_WORD *)(v2161 + 8);
          v2162 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2158, v2157, v2159, (uint64_t)v1860, v1862, v2160);
          v2164 = v2163;
          v2165 = sub_1C5D38C7C(v426, 0x3F60D3E3u, (const llvm::APFloat *)&v2509);
          v2168 = 0;
          v2169 = *(_QWORD *)(v426 + 832);
          if (v2169)
            v2168 = *(_WORD *)(v2169 + 8);
          v2171 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2162, v2164, v2167, (uint64_t)v2165, v2166, v2168);
          v2173 = 0;
          v2174 = *(_QWORD *)(v426 + 832);
          if (v2174)
            v2173 = *(_WORD *)(v2174 + 8);
          v2175 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2171, v2170, v2172, (uint64_t)v1860, v1862, v2173);
          v2177 = v2176;
          v2178 = sub_1C5D38C7C(v426, 0x4011CDF0u, (const llvm::APFloat *)&v2509);
          v2181 = 0;
          v2182 = *(_QWORD *)(v426 + 832);
          if (v2182)
            v2181 = *(_WORD *)(v2182 + 8);
          v2184 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2175, v2177, v2180, (uint64_t)v2178, v2179, v2181);
          v2186 = 0;
          v2187 = *(_QWORD *)(v426 + 832);
          if (v2187)
            v2186 = *(_WORD *)(v2187 + 8);
          v2188 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2184, v2183, v2185, (uint64_t)v1860, v1862, v2186);
          v2190 = v2189;
          v2191 = sub_1C5D38C7C(v426, 0x406CFD1Cu, (const llvm::APFloat *)&v2509);
          v2194 = 0;
          v2195 = *(_QWORD *)(v426 + 832);
          if (v2195)
            v2194 = *(_WORD *)(v2195 + 8);
          v2197 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2188, v2190, v2193, (uint64_t)v2191, v2192, v2194);
          v2199 = 0;
          v2200 = *(_QWORD *)(v426 + 832);
          if (v2200)
            v2199 = *(_WORD *)(v2200 + 8);
          v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2197, v2196, v2198, (uint64_t)v1860, v1862, v2199);
          v1995 = v2201;
          v1996 = 1074191531;
          v1997 = 1082628043;
        }
        else
        {
          v1889 = sub_1C5D38C7C(v426, 0xBD67B6D6, (const llvm::APFloat *)&v2509);
          v1892 = *(_QWORD *)(v426 + 832);
          v1867 = v9;
          if (v1892)
            LOWORD(v1892) = *(_WORD *)(v1892 + 8);
          v2122 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v1891, (uint64_t)v1889, v1890, v1892);
          v2124 = v2123;
          v2125 = sub_1C5D38C7C(v426, 0x3EE4F4B8u, (const llvm::APFloat *)&v2509);
          v2128 = 0;
          v2129 = *(_QWORD *)(v426 + 832);
          if (v2129)
            v2128 = *(_WORD *)(v2129 + 8);
          v2131 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2122, v2124, v2127, (uint64_t)v2125, v2126, v2128);
          v2133 = 0;
          v2134 = *(_QWORD *)(v426 + 832);
          if (v2134)
            v2133 = *(_WORD *)(v2134 + 8);
          v2135 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2131, v2130, v2132, (uint64_t)v1860, v1862, v2133);
          v2137 = v2136;
          v2138 = sub_1C5D38C7C(v426, 0x3FBC278Bu, (const llvm::APFloat *)&v2509);
          v2141 = 0;
          v2142 = *(_QWORD *)(v426 + 832);
          if (v2142)
            v2141 = *(_WORD *)(v2142 + 8);
          v2144 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2135, v2137, v2140, (uint64_t)v2138, v2139, v2141);
          v2146 = 0;
          v2147 = *(_QWORD *)(v426 + 832);
          if (v2147)
            v2146 = *(_WORD *)(v2147 + 8);
          v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2144, v2143, v2145, (uint64_t)v1860, v1862, v2146);
          v1995 = v2148;
          v1996 = 1071575834;
          v1997 = 1077186197;
        }
      }
      else
      {
        v1885 = sub_1C5D38C7C(v426, 0xBE74C456, (const llvm::APFloat *)&v2509);
        v1888 = *(_QWORD *)(v426 + 832);
        v1867 = v9;
        if (v1888)
          LOWORD(v1888) = *(_WORD *)(v1888 + 8);
        v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v1887, (uint64_t)v1885, v1886, v1888);
        v1995 = v2010;
        v1996 = 1066703401;
        v1997 = 1068737201;
      }
      goto LABEL_1609;
    case 176:
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v887;
      v426 = *(_QWORD *)(v9 + 832);
      v888 = (uint64_t *)(v424[5] + 16 * v887);
      v428 = *v888;
      if (*v888 != 10 || dword_1ED824E08 == 0 || dword_1ED824E08 > 0x12)
      {
        v431 = v2507;
        v432 = v888[1];
        v433 = *(_QWORD *)(v9 + 832);
        v434 = 232;
        goto LABEL_1228;
      }
      v1694 = *(_QWORD *)(v426 + 832);
      if (v1694)
        v1695 = *(_WORD *)(v1694 + 8);
      else
        v1695 = 0;
      v1893 = sub_1C5D52060(*(_QWORD *)(v9 + 832), 216, (const llvm::APInt *)&v2509, (llvm *)5, 0, (uint64_t)v424, v887, v1695);
      v1895 = v1894;
      v1896 = sub_1C5D389BC(v426, (uint64_t)v1893, v1894, (uint64_t *)v10, (const llvm::APInt *)&v2509);
      v1898 = v1897;
      v1899 = sub_1C5D38C7C(v426, 0x3E9A209Au, (const llvm::APFloat *)&v2509);
      v1902 = 0;
      v1903 = *(_QWORD *)(v426 + 832);
      if (v1903)
        v1902 = *(_WORD *)(v1903 + 8);
      v1857 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1896, v1898, v1901, (uint64_t)v1899, v1900, v1902);
      v1859 = v1904;
      v1860 = sub_1C5D38B64(v426, (uint64_t)v1893, v1895, (const llvm::APInt *)&v2509);
      v1862 = v1905;
      if (dword_1ED824E08 > 6)
      {
        if (dword_1ED824E08 > 0xC)
        {
          v2016 = sub_1C5D38C7C(v426, 0x3C5D51CEu, (const llvm::APFloat *)&v2509);
          v2019 = *(_QWORD *)(v426 + 832);
          v1867 = v9;
          if (v2019)
            LOWORD(v2019) = *(_WORD *)(v2019 + 8);
          v2216 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v2018, (uint64_t)v2016, v2017, v2019);
          v2218 = v2217;
          v2219 = sub_1C5D38C7C(v426, 0x3E00685Au, (const llvm::APFloat *)&v2509);
          v2222 = 0;
          v2223 = *(_QWORD *)(v426 + 832);
          if (v2223)
            v2222 = *(_WORD *)(v2223 + 8);
          v2225 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2216, v2218, v2221, (uint64_t)v2219, v2220, v2222);
          v2227 = 0;
          v2228 = *(_QWORD *)(v426 + 832);
          if (v2228)
            v2227 = *(_WORD *)(v2228 + 8);
          v2229 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2225, v2224, v2226, (uint64_t)v1860, v1862, v2227);
          v2231 = v2230;
          v2232 = sub_1C5D38C7C(v426, 0x3EFB6798u, (const llvm::APFloat *)&v2509);
          v2235 = 0;
          v2236 = *(_QWORD *)(v426 + 832);
          if (v2236)
            v2235 = *(_WORD *)(v2236 + 8);
          v2238 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2229, v2231, v2234, (uint64_t)v2232, v2233, v2235);
          v2240 = 0;
          v2241 = *(_QWORD *)(v426 + 832);
          if (v2241)
            v2240 = *(_WORD *)(v2241 + 8);
          v2242 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2238, v2237, v2239, (uint64_t)v1860, v1862, v2240);
          v2244 = v2243;
          v2245 = sub_1C5D38C7C(v426, 0x3F88D192u, (const llvm::APFloat *)&v2509);
          v2248 = 0;
          v2249 = *(_QWORD *)(v426 + 832);
          if (v2249)
            v2248 = *(_WORD *)(v2249 + 8);
          v2251 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2242, v2244, v2247, (uint64_t)v2245, v2246, v2248);
          v2253 = 0;
          v2254 = *(_QWORD *)(v426 + 832);
          if (v2254)
            v2253 = *(_WORD *)(v2254 + 8);
          v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2251, v2250, v2252, (uint64_t)v1860, v1862, v2253);
          v1995 = v2255;
          v1996 = 1062719088;
          v1997 = 1069822316;
        }
        else
        {
          v1910 = sub_1C5D38C7C(v426, 0x3D431F31u, (const llvm::APFloat *)&v2509);
          v1913 = *(_QWORD *)(v426 + 832);
          v1867 = v9;
          if (v1913)
            LOWORD(v1913) = *(_WORD *)(v1913 + 8);
          v2202 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v1912, (uint64_t)v1910, v1911, v1913);
          v2204 = v2203;
          v2205 = sub_1C5D38C7C(v426, 0x3EA21FB2u, (const llvm::APFloat *)&v2509);
          v2208 = 0;
          v2209 = *(_QWORD *)(v426 + 832);
          if (v2209)
            v2208 = *(_WORD *)(v2209 + 8);
          v2211 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2202, v2204, v2207, (uint64_t)v2205, v2206, v2208);
          v2213 = 0;
          v2214 = *(_QWORD *)(v426 + 832);
          if (v2214)
            v2213 = *(_WORD *)(v2214 + 8);
          v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2211, v2210, v2212, (uint64_t)v1860, v1862, v2213);
          v1995 = v2215;
          v1996 = 1059452867;
          v1997 = 1063969330;
        }
      }
      else
      {
        v1906 = sub_1C5D38C7C(v426, 0xBDD49A13, (const llvm::APFloat *)&v2509);
        v1909 = *(_QWORD *)(v426 + 832);
        v1867 = v9;
        if (v1909)
          LOWORD(v1909) = *(_WORD *)(v1909 + 8);
        v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v1908, (uint64_t)v1906, v1907, v1909);
        v1995 = v2015;
        v1996 = 1057035008;
        v1997 = 1058801545;
      }
      goto LABEL_1609;
    case 177:
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v423;
      v426 = *(_QWORD *)(v9 + 832);
      v427 = (uint64_t *)(v424[5] + 16 * v423);
      v428 = *v427;
      v430 = *v427 != 10 || dword_1ED824E08 == 0 || dword_1ED824E08 > 0x12;
      if (v430)
      {
        v431 = v2507;
        v432 = v427[1];
        v433 = *(_QWORD *)(v9 + 832);
        v434 = 231;
LABEL_1228:
        v220 = sub_1C5D52060(v433, v434, (const llvm::APInt *)&v2509, (llvm *)v428, v432, (uint64_t)v424, v425, v431);
      }
      else
      {
        v1588 = *(_QWORD *)(v426 + 832);
        if (v1588)
          v1589 = *(_WORD *)(v1588 + 8);
        else
          v1589 = 0;
        v1854 = sub_1C5D52060(*(_QWORD *)(v9 + 832), 216, (const llvm::APInt *)&v2509, (llvm *)5, 0, (uint64_t)v424, v423, v1589);
        v1856 = v1855;
        v1857 = sub_1C5D389BC(v426, (uint64_t)v1854, v1855, (uint64_t *)v10, (const llvm::APInt *)&v2509);
        v1859 = v1858;
        v1860 = sub_1C5D38B64(v426, (uint64_t)v1854, v1856, (const llvm::APInt *)&v2509);
        v1862 = v1861;
        if (dword_1ED824E08 > 6)
        {
          if (dword_1ED824E08 > 0xC)
          {
            v1998 = sub_1C5D38C7C(v426, 0xBCD2769E, (const llvm::APFloat *)&v2509);
            v2001 = *(_QWORD *)(v426 + 832);
            v1867 = v9;
            if (v2001)
              LOWORD(v2001) = *(_WORD *)(v2001 + 8);
            v2069 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v2000, (uint64_t)v1998, v1999, v2001);
            v2071 = v2070;
            v2072 = sub_1C5D38C7C(v426, 0x3E8CE0B9u, (const llvm::APFloat *)&v2509);
            v2075 = 0;
            v2076 = *(_QWORD *)(v426 + 832);
            if (v2076)
              v2075 = *(_WORD *)(v2076 + 8);
            v2078 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2069, v2071, v2074, (uint64_t)v2072, v2073, v2075);
            v2080 = 0;
            v2081 = *(_QWORD *)(v426 + 832);
            if (v2081)
              v2080 = *(_WORD *)(v2081 + 8);
            v2082 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2078, v2077, v2079, (uint64_t)v1860, v1862, v2080);
            v2084 = v2083;
            v2085 = sub_1C5D38C7C(v426, 0x3FA22AE7u, (const llvm::APFloat *)&v2509);
            v2088 = 0;
            v2089 = *(_QWORD *)(v426 + 832);
            if (v2089)
              v2088 = *(_WORD *)(v2089 + 8);
            v2091 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2082, v2084, v2087, (uint64_t)v2085, v2086, v2088);
            v2093 = 0;
            v2094 = *(_QWORD *)(v426 + 832);
            if (v2094)
              v2093 = *(_WORD *)(v2094 + 8);
            v2095 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2091, v2090, v2092, (uint64_t)v1860, v1862, v2093);
            v2097 = v2096;
            v2098 = sub_1C5D38C7C(v426, 0x40525723u, (const llvm::APFloat *)&v2509);
            v2101 = 0;
            v2102 = *(_QWORD *)(v426 + 832);
            if (v2102)
              v2101 = *(_WORD *)(v2102 + 8);
            v2104 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2095, v2097, v2100, (uint64_t)v2098, v2099, v2101);
            v2106 = 0;
            v2107 = *(_QWORD *)(v426 + 832);
            if (v2107)
              v2106 = *(_WORD *)(v2107 + 8);
            v2108 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2104, v2103, v2105, (uint64_t)v1860, v1862, v2106);
            v2110 = v2109;
            v2111 = sub_1C5D38C7C(v426, 0x40AAF200u, (const llvm::APFloat *)&v2509);
            v2114 = 0;
            v2115 = *(_QWORD *)(v426 + 832);
            if (v2115)
              v2114 = *(_WORD *)(v2115 + 8);
            v2117 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2108, v2110, v2113, (uint64_t)v2111, v2112, v2114);
            v2119 = 0;
            v2120 = *(_QWORD *)(v426 + 832);
            if (v2120)
              v2119 = *(_WORD *)(v2120 + 8);
            v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2117, v2116, v2118, (uint64_t)v1860, v1862, v2119);
            v1995 = v2121;
            v1996 = 1078104108;
            v1997 = 1086561709;
          }
          else
          {
            v1868 = sub_1C5D38C7C(v426, 0xBDA7262E, (const llvm::APFloat *)&v2509);
            v1871 = *(_QWORD *)(v426 + 832);
            v1867 = v9;
            if (v1871)
              LOWORD(v1871) = *(_WORD *)(v1871 + 8);
            v2042 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v1870, (uint64_t)v1868, v1869, v1871);
            v2044 = v2043;
            v2045 = sub_1C5D38C7C(v426, 0x3F25280Bu, (const llvm::APFloat *)&v2509);
            v2048 = 0;
            v2049 = *(_QWORD *)(v426 + 832);
            if (v2049)
              v2048 = *(_WORD *)(v2049 + 8);
            v2051 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2042, v2044, v2047, (uint64_t)v2045, v2046, v2048);
            v2053 = 0;
            v2054 = *(_QWORD *)(v426 + 832);
            if (v2054)
              v2053 = *(_WORD *)(v2054 + 8);
            v2055 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2051, v2050, v2052, (uint64_t)v1860, v1862, v2053);
            v2057 = v2056;
            v2058 = sub_1C5D38C7C(v426, 0x4007B923u, (const llvm::APFloat *)&v2509);
            v2061 = 0;
            v2062 = *(_QWORD *)(v426 + 832);
            if (v2062)
              v2061 = *(_WORD *)(v2062 + 8);
            v2064 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2055, v2057, v2060, (uint64_t)v2058, v2059, v2061);
            v2066 = 0;
            v2067 = *(_QWORD *)(v426 + 832);
            if (v2067)
              v2066 = *(_WORD *)(v2067 + 8);
            v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2064, v2063, v2065, (uint64_t)v1860, v1862, v2066);
            v1995 = v2068;
            v1996 = 1075892892;
            v1997 = 1082277423;
          }
        }
        else
        {
          v1863 = sub_1C5D38C7C(v426, 0xBEB08FE0, (const llvm::APFloat *)&v2509);
          v1866 = *(_QWORD *)(v426 + 832);
          v1867 = v9;
          if (v1866)
            LOWORD(v1866) = *(_WORD *)(v1866 + 8);
          v1993 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1860, v1862, v1865, (uint64_t)v1863, v1864, v1866);
          v1995 = v1994;
          v1996 = 1071014717;
          v1997 = 1073845347;
        }
LABEL_1609:
        v2256 = sub_1C5D38C7C(v426, v1997, (const llvm::APFloat *)&v2509);
        v2259 = *(_QWORD *)(v426 + 832);
        if (v2259)
          LOWORD(v2259) = *(_WORD *)(v2259 + 8);
        v2261 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1993, v1995, v2258, (uint64_t)v2256, v2257, v2259);
        v2263 = 0;
        v2264 = *(_QWORD *)(v426 + 832);
        if (v2264)
          v2263 = *(_WORD *)(v2264 + 8);
        v2265 = sub_1C5D56C70(v426, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2261, v2260, v2262, (uint64_t)v1860, v1862, v2263);
        v2267 = v2266;
        v2268 = sub_1C5D38C7C(v426, v1996, (const llvm::APFloat *)&v2509);
        v2271 = 0;
        v2272 = *(_QWORD *)(v426 + 832);
        if (v2272)
          v2271 = *(_WORD *)(v2272 + 8);
        v2273 = sub_1C5D56C70(v426, 97, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v2265, v2267, v2270, (uint64_t)v2268, v2269, v2271);
        v2276 = 0;
        v2277 = *(_QWORD *)(v426 + 832);
        v9 = v1867;
        if (v2277)
          v2276 = *(_WORD *)(v2277 + 8);
        v220 = sub_1C5D56C70(v426, 96, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, (uint64_t)v1857, v1859, v2275, (uint64_t)v2273, v2274, v2276);
      }
      goto LABEL_1229;
    case 182:
      v150 = v9;
      v151 = (uint64_t)v8;
      v152 = 1;
      goto LABEL_140;
    case 183:
      v141 = v9;
      v142 = v8;
      v143 = 1;
      goto LABEL_145;
    case 184:
      v953 = *(_QWORD *)v9;
      v954 = v9;
      v955 = *(_DWORD *)(v9 + 816);
      v2529[0] = 0;
      LODWORD(v2529[1]) = v955;
      if (v953)
      {
        v956 = (void **)(v953 + 48);
        if (v956 != v2529)
        {
          v957 = *v956;
          v2529[0] = v957;
          if (v957)
            llvm::MetadataTracking::track((uint64_t)v2529, (unsigned __int8 *)v957, 2);
        }
      }
      v958 = (llvm::Constant **)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v959 = *v958;
      v2436 = sub_1C635FDC4(v954, (unsigned __int8 *)v958[12]);
      v2451 = v960;
      v961 = sub_1C635FDC4(v954, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v2425 = v962;
      v963 = *(_QWORD *)(v954 + 832);
      v964 = *(_QWORD *)(v963 + 24);
      v2555.n128_u64[0] = sub_1C47A7FD0(v964, *(_QWORD *)(**(_QWORD **)(v963 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v2555.n128_u64[1] = v965;
      v967 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
      v968 = (unint64_t *)(v967 + 3);
      if (*((_DWORD *)v967 + 8) >= 0x41u)
        v968 = (unint64_t *)*v968;
      v969 = *v968;
      v970 = __clz(*v968) ^ 0x3F;
      v971 = *v18;
      v972 = sub_1C6131264((unsigned __int8 *)&v2555, v965, v966);
      sub_1C6365BD8(v971, v972, v973);
      if (!v969)
        v970 = v974;
      v975 = v8;
      if ((*((_BYTE *)v8 + 23) & 0x20) == 0)
        goto LABEL_1024;
      v976 = ***v8;
      v2538[0] = v8;
      v977 = *(_DWORD *)(v976 + 2496);
      if (v977)
      {
        v978 = *(_QWORD *)(v976 + 2480);
        v979 = v977 - 1;
        v980 = v979 & ((v8 >> 4) ^ (v8 >> 9));
        v981 = (uint64_t ****)(v978 + 40 * v980);
        v982 = *v981;
        if (*v981 == v8)
          goto LABEL_638;
        v983 = 0;
        v984 = 1;
        while (v982 != (uint64_t ***)-4096)
        {
          if (v983)
            v985 = 0;
          else
            v985 = v982 == (uint64_t ***)-8192;
          if (v985)
            v983 = v981;
          v986 = v980 + v984++;
          v980 = v986 & v979;
          v981 = (uint64_t ****)(v978 + 40 * v980);
          v982 = *v981;
          if (*v981 == v8)
          {
LABEL_638:
            v987 = *((unsigned int *)v981 + 4);
            if ((_DWORD)v987)
            {
              v988 = v981[1] + 1;
              v989 = 16 * v987;
              while (*((_DWORD *)v988 - 2) != 4)
              {
                v990 = 0;
                v988 += 2;
                v989 -= 16;
                if (!v989)
                  goto LABEL_1025;
              }
              v990 = *v988;
            }
            else
            {
LABEL_1024:
              v990 = 0;
            }
LABEL_1025:
            v1541 = v18;
            v2524 = *(_OWORD *)(*(_QWORD *)(v954 + 832) + 192);
            *(_QWORD *)&v2528 = 0;
            DWORD2(v2528) = 0;
            v2526 = 0;
            LODWORD(v2527) = 0;
            LODWORD(v2513) = 0;
            v2522 = 0;
            LODWORD(v2523) = 0;
            v1542 = sub_1C5D2703C(v959, (uint64_t)&v2528, (uint64_t)&v2526, &v2513, (uint64_t)&v2522, v954, (uint64_t)v975[5]);
            v1543 = *(_QWORD *)v959;
            v1544 = *(_DWORD *)(*(_QWORD *)v959 + 8);
            if ((v1544 & 0xFE) == 0x12)
            {
              v1543 = **(_QWORD **)(v1543 + 16);
              v1544 = *(_DWORD *)(v1543 + 8);
            }
            if ((v1544 & 0xFE) == 0x12)
              v1544 = *(_DWORD *)(**(_QWORD **)(v1543 + 16) + 8);
            v1545 = v1544 >> 8;
            v1546 = *(_QWORD *)(*v1541 + 40);
            llvm::Instruction::getAAMetadata(v2456, v2538);
            v1548 = sub_1C484358C(v1546 + 128, 80, 3);
            *(_QWORD *)v1548 = 0;
            *(_QWORD *)(v1548 + 8) = 0;
            *(_DWORD *)(v1548 + 16) = v1545;
            *(_BYTE *)(v1548 + 20) = 0;
            *(_QWORD *)(v1548 + 24) = 0;
            v1549 = *(_OWORD *)v2539;
            *(_OWORD *)(v1548 + 40) = *(_OWORD *)v2538;
            *(_WORD *)(v1548 + 32) = 1;
            *(_BYTE *)(v1548 + 34) = v970;
            *(_OWORD *)(v1548 + 56) = v1549;
            *(_QWORD *)(v1548 + 72) = v990;
            *(_WORD *)(v1548 + 36) = 1;
            if (v1542)
            {
              v1550 = (uint64_t *)v2526;
              v1551 = v2527;
            }
            else
            {
              v1696 = *(_QWORD *)(v954 + 832);
              v1697 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v964 + 32))(v964, *(_QWORD *)(**(_QWORD **)(v1696 + 40) + 40) + 272, 0);
              *(_QWORD *)&v2528 = sub_1C6366AB4(v1696, 0, (const llvm::APInt *)v2529, (llvm *)v1697, 0, 0, 0);
              DWORD2(v2528) = v1698;
              v1550 = sub_1C635FDC4(v954, (unsigned __int8 *)v959);
              v1551 = v1699;
              v2526 = (unsigned __int8 *)v1550;
              LODWORD(v2527) = v1699;
              LODWORD(v2513) = 1;
              v1700 = *(_QWORD *)(v954 + 832);
              v1701 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v964 + 32))(v964, *(_QWORD *)(**(_QWORD **)(v1700 + 40) + 40) + 272, 0);
              v2522 = (unsigned __int8 *)sub_1C6366AB4(v1700, 1, (const llvm::APInt *)v2529, (llvm *)v1701, 0, 1, 0);
              LODWORD(v2523) = v1702;
            }
            v1703 = (uint64_t **)(v1550[5] + 16 * v1551);
            v1705 = *v1703;
            v1704 = (unint64_t)v1703[1];
            v2520 = v1705;
            v2521 = v1704;
            if ((_BYTE)v1705)
            {
              LOBYTE(v1706) = sub_1C47F37A0((unsigned __int8 *)&v2520);
              v1708 = 0;
              v1707 = 0;
            }
            else
            {
              v1706 = llvm::EVT::getEVT(*(llvm::EVT **)(v1704 + 24), 0, v1547);
              v1708 = v1706 & 0xFFFFFFFFFFFFFF00;
            }
            v2518 = (_QWORD *)(v1708 | v1706);
            v2519 = v1707;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, unint64_t, _QWORD **))(*(_QWORD *)v964
                                                                                                 + 552))(v964, v2520, v2521, &v2518))
            {
              v1710 = (llvm *)sub_1C6347100((unsigned __int8 *)&v2520, (uint64_t)v2518, v2519);
              v1711 = *(_QWORD *)(*v1541 + 832);
              if (v1711)
                v1712 = *(_WORD *)(v1711 + 8);
              else
                v1712 = 0;
              v2526 = (unsigned __int8 *)sub_1C5D52060(*v1541, 198, (const llvm::APInt *)v2529, v1710, v1709, (uint64_t)v1550, v2527, v1712);
              LODWORD(v2527) = v1914;
            }
            v2538[0] = (void *)v2524;
            LODWORD(v2538[1]) = DWORD2(v2524);
            *(_QWORD *)v2539 = v2436;
            *(_DWORD *)&v2539[8] = v2451;
            *(_QWORD *)&v2539[16] = v961;
            LODWORD(v2540) = v2425;
            v2541 = (uint64_t *)v2528;
            LODWORD(v2542) = DWORD2(v2528);
            v2543 = v2526;
            LODWORD(v2544) = v2527;
            LODWORD(v2546) = (_DWORD)v2523;
            v2545 = v2522;
            v1915 = *(_QWORD *)(v954 + 832);
            v1916 = sub_1C636A8B4(v1915, v2555.n128_i64[0], v2555.n128_i64[1], 1, 0);
            v1918 = sub_1C5D605F8(v1915, v1916, v1917, (void *)v2555.n128_u64[0], v2555.n128_i64[1], (uint64_t)v2529, (uint64_t *)v2538, 6, v1548, v2513, 0);
            v1920 = v1919;
            v1921 = *(unsigned int *)(v954 + 112);
            if (v1921 >= *(_DWORD *)(v954 + 116))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v954 + 104, v954 + 120, v1921 + 1, 16);
              LODWORD(v1921) = *(_DWORD *)(v954 + 112);
            }
            v1922 = (_QWORD *)(*(_QWORD *)(v954 + 104) + 16 * v1921);
            *v1922 = v1918;
            v1922[1] = 1;
            ++*(_DWORD *)(v954 + 112);
            v2515 = v2456;
            v1923 = sub_1C6364290((uint64_t *)(v954 + 8), &v2515);
            v1923[1] = v1918;
            *((_DWORD *)v1923 + 4) = v1920;
LABEL_1395:
            v1563 = (unsigned __int8 *)v2529[0];
            if (!v2529[0])
              goto LABEL_1323;
            v1564 = v2529;
LABEL_1322:
            llvm::MetadataTracking::untrack((uint64_t)v1564, v1563);
            goto LABEL_1323;
          }
        }
        if (v983)
          v2323 = v983;
        else
          v2323 = v981;
      }
      else
      {
        v2323 = 0;
      }
      v981 = (uint64_t ****)sub_1C541AB24(v976 + 2480, (uint64_t)v2538, (uint64_t *)v2538, v2323);
      v2324 = (uint64_t ***)v2538[0];
      v981[3] = 0;
      v981[4] = 0;
      *v981 = v2324;
      v981[1] = (uint64_t ***)(v981 + 3);
      v981[2] = (uint64_t ***)0x100000000;
      v975 = v8;
      goto LABEL_638;
    case 185:
      v141 = v9;
      v142 = v8;
      v143 = 0;
LABEL_145:
      sub_1C5D2737C(v141, v142, v143);
      goto LABEL_1323;
    case 186:
      v1266 = *(_QWORD *)v9;
      v1267 = *(_DWORD *)(v9 + 816);
      v2529[0] = 0;
      LODWORD(v2529[1]) = v1267;
      if (v1266)
      {
        v1268 = (void **)(v1266 + 48);
        if (v1268 != v2529)
        {
          v1269 = *v1268;
          v2529[0] = v1269;
          if (v1269)
            llvm::MetadataTracking::track((uint64_t)v2529, (unsigned __int8 *)v1269, 2);
        }
      }
      v1270 = (unsigned __int8 **)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v1271 = (llvm::Constant *)v1270[4];
      v1272 = sub_1C635FDC4(v9, *v1270);
      v1274 = v1273;
      v1275 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 12]);
      v2555 = *(__n128 *)(v1272[5] + 16 * v1274);
      v1278 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8];
      v1279 = (unint64_t *)(v1278 + 3);
      v2438 = (uint64_t)v1275;
      v2453 = v1274;
      v1280 = v1276;
      v1281 = (uint64_t *)(v9 + 832);
      if (*((_DWORD *)v1278 + 8) >= 0x41u)
        v1279 = (unint64_t *)*v1279;
      v1282 = *v1279;
      v1283 = __clz(*v1279) ^ 0x3F;
      v1284 = *(_QWORD *)(v9 + 832);
      v1285 = sub_1C6131264((unsigned __int8 *)&v2555, v1276, v1277);
      sub_1C6365BD8(v1284, v1285, v1286);
      if (v1282)
        v1288 = v1283;
      else
        v1288 = v1287;
      v1289 = v9;
      v1290 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 24);
      *(_QWORD *)&v2524 = 0;
      DWORD2(v2524) = 0;
      *(_QWORD *)&v2528 = 0;
      DWORD2(v2528) = 0;
      LODWORD(v2515) = 0;
      v2526 = 0;
      LODWORD(v2527) = 0;
      v1291 = (uint64_t *)v1289;
      v1292 = sub_1C5D2703C(v1271, (uint64_t)&v2524, (uint64_t)&v2528, &v2515, (uint64_t)&v2526, v1289, (uint64_t)v2456[5]);
      v1293 = *(_QWORD *)v1271;
      v1294 = *(_DWORD *)(*(_QWORD *)v1271 + 8);
      if ((v1294 & 0xFE) == 0x12)
      {
        v1293 = **(_QWORD **)(v1293 + 16);
        v1294 = *(_DWORD *)(v1293 + 8);
      }
      if ((v1294 & 0xFE) == 0x12)
        v1294 = *(_DWORD *)(**(_QWORD **)(v1293 + 16) + 8);
      v1295 = v1294 >> 8;
      v1296 = *(_QWORD *)(*v1281 + 40);
      llvm::Instruction::getAAMetadata(v2456, v2538);
      v1298 = sub_1C484358C(v1296 + 128, 80, 3);
      *(_QWORD *)v1298 = 0;
      *(_QWORD *)(v1298 + 8) = 0;
      *(_DWORD *)(v1298 + 16) = v1295;
      *(_BYTE *)(v1298 + 20) = 0;
      *(_QWORD *)(v1298 + 24) = 0;
      v1299 = *(_OWORD *)v2539;
      *(_OWORD *)(v1298 + 40) = *(_OWORD *)v2538;
      *(_WORD *)(v1298 + 32) = 2;
      *(_BYTE *)(v1298 + 34) = v1288;
      *(_OWORD *)(v1298 + 56) = v1299;
      *(_QWORD *)(v1298 + 72) = 0;
      *(_WORD *)(v1298 + 36) = 1;
      if (v1292)
      {
        v1300 = (uint64_t *)v2528;
        v1301 = DWORD2(v2528);
      }
      else
      {
        v1748 = v1291[104];
        v1749 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1290 + 32))(v1290, *(_QWORD *)(**(_QWORD **)(v1748 + 40) + 40) + 272, 0);
        *(_QWORD *)&v2524 = sub_1C6366AB4(v1748, 0, (const llvm::APInt *)v2529, (llvm *)v1749, 0, 0, 0);
        DWORD2(v2524) = v1750;
        v1300 = sub_1C635FDC4((uint64_t)v1291, (unsigned __int8 *)v1271);
        v1301 = v1751;
        *(_QWORD *)&v2528 = v1300;
        DWORD2(v2528) = v1751;
        LODWORD(v2515) = 1;
        v1752 = v1291[104];
        v1753 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1290 + 32))(v1290, *(_QWORD *)(**(_QWORD **)(v1752 + 40) + 40) + 272, 0);
        v2526 = (unsigned __int8 *)sub_1C6366AB4(v1752, 1, (const llvm::APInt *)v2529, (llvm *)v1753, 0, 1, 0);
        LODWORD(v2527) = v1754;
      }
      v1755 = (unsigned __int8 **)(v1300[5] + 16 * v1301);
      v1757 = *v1755;
      v1756 = v1755[1];
      v2522 = v1757;
      v2523 = v1756;
      if ((_BYTE)v1757)
      {
        LOBYTE(v1758) = sub_1C47F37A0((unsigned __int8 *)&v2522);
        v1760 = 0;
        v1759 = 0;
      }
      else
      {
        v1758 = llvm::EVT::getEVT(*((llvm::EVT **)v1756 + 3), 0, v1297);
        v1760 = v1758 & 0xFFFFFFFFFFFFFF00;
      }
      v2520 = (uint64_t *)(v1760 | v1758);
      v2521 = v1759;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, uint64_t **))(*(_QWORD *)v1290 + 552))(v1290, v2522, v2523, &v2520))
      {
        v1762 = (llvm *)sub_1C6347100((unsigned __int8 *)&v2522, (uint64_t)v2520, v2521);
        v1763 = *(_QWORD *)(*v1281 + 832);
        if (v1763)
          v1764 = *(_WORD *)(v1763 + 8);
        else
          v1764 = 0;
        *(_QWORD *)&v2528 = sub_1C5D52060(*v1281, 198, (const llvm::APInt *)v2529, v1762, v1761, (uint64_t)v1300, *((unint64_t *)&v2528 + 1), v1764);
        DWORD2(v2528) = v1924;
      }
      v2538[0] = sub_1C5D14AF0(v1291, (uint64_t)(v1291 + 13));
      v2538[1] = v1925;
      *(_QWORD *)v2539 = v1272;
      *(_DWORD *)&v2539[8] = v2453;
      *(_QWORD *)&v2539[16] = v2438;
      LODWORD(v2540) = v1280;
      v2541 = (uint64_t *)v2524;
      LODWORD(v2542) = DWORD2(v2524);
      v2543 = (unsigned __int8 *)v2528;
      LODWORD(v2544) = DWORD2(v2528);
      LODWORD(v2546) = v2527;
      v2545 = v2526;
      v1926 = v1291[104];
      v1927 = sub_1C636D7B0((llvm *)1, 0);
      v1928 = sub_1C5D609EC(v1926, v1927, 1, (void *)v2555.n128_u64[0], v2555.n128_i64[1], (uint64_t)v2529, (uint64_t *)v2538, 6, v1298, v2515, 0);
      v1930 = v1929;
      v1931 = v1291[104];
      *(_QWORD *)(v1931 + 192) = v1928;
      *(_DWORD *)(v1931 + 200) = v1929;
      v2518 = v2456;
      v1932 = sub_1C6364290(v1291 + 1, &v2518);
      v1932[1] = v1928;
      *((_DWORD *)v1932 + 4) = v1930;
      goto LABEL_1395;
    case 187:
      v150 = v9;
      v151 = (uint64_t)v8;
      v152 = 0;
LABEL_140:
      sub_1C5D26D94(v150, v151, v152);
      goto LABEL_1323;
    case 192:
      v1229 = *(_QWORD *)(v9 + 832);
      v1230 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1232 = (llvm **)(v1230[5] + 16 * v1231);
      v711 = *v1232;
      v712 = (uint64_t)v1232[1];
      v713 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v715 = v1233;
      v1234 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2394 = v1235;
      v2396 = v2507;
      v2393 = (uint64_t)v1234;
      v416 = v1229;
      v417 = 251;
      goto LABEL_779;
    case 193:
      v1118 = *(_QWORD *)(v9 + 832);
      v1119 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1121 = (llvm **)(v1119[5] + 16 * v1120);
      v711 = *v1121;
      v712 = (uint64_t)v1121[1];
      v713 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v715 = v1122;
      v1123 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2394 = v1124;
      v2396 = v2507;
      v2393 = (uint64_t)v1123;
      v416 = v1118;
      v417 = 247;
      goto LABEL_779;
    case 194:
      v450 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v2431 = v451;
      v2446 = (uint64_t)v450;
      v2420 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2408 = v452;
      v453 = v9;
      v2404 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v455 = v454;
      ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      if (ParamAlignment <= 0x100)
        v457 = 0;
      else
        v457 = ParamAlignment;
      v459 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 1);
      if (v459 <= 0x100)
        LOBYTE(v459) = 0;
      if (v459 >= v457)
        v460 = v457;
      else
        v460 = v459;
      v461 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 12];
      v462 = (llvm::APInt *)(v461 + 3);
      v463 = *((_DWORD *)v461 + 8);
      if (v463 > 0x40)
        v464 = llvm::APInt::countLeadingZerosSlowCase(v462) == v463;
      else
        v464 = *(_QWORD *)v462 == 0;
      v1590 = v464;
      if ((*((_WORD *)v8 + 9) & 3u) - 1 > 1)
        v1591 = 0;
      else
        v1591 = llvm::isInTailCallPosition((llvm *)v8, *(const llvm::CallBase **)*v18, v458);
      v1592 = v18;
      if ((v1590 & 1) != 0)
        v1593 = sub_1C5D14AF0((uint64_t *)v453, v453 + 104);
      else
        v1593 = sub_1C635C370(v453);
      v1595 = (uint64_t)v1593;
      v1596 = v1594;
      v1597 = v1590 ^ 1;
      v1598 = *v1592;
      v1599 = &v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
      v1600 = (uint64_t *)*v1599;
      *(_QWORD *)&v2502 = *v1599 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2502 + 1) = 0;
      v2504 = 0;
      if (v1600)
      {
        v1601 = *v1600;
        v1602 = *(_DWORD *)(*v1600 + 8);
        if ((v1602 & 0xFE) == 0x12)
          v1602 = *(_DWORD *)(**(_QWORD **)(v1601 + 16) + 8);
        LODWORD(v1600) = v1602 >> 8;
      }
      v2503 = (int)v1600;
      v1603 = v1599[4];
      *(_QWORD *)&v2499 = v1603 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2499 + 1) = 0;
      v2501 = 0;
      if (v1603)
      {
        v1604 = *(_QWORD *)v1603;
        v1605 = *(_DWORD *)(*(_QWORD *)v1603 + 8);
        if ((v1605 & 0xFE) == 0x12)
          v1605 = *(_DWORD *)(**(_QWORD **)(v1604 + 16) + 8);
        LODWORD(v1603) = v1605 >> 8;
      }
      v2500 = v1603;
      llvm::Instruction::getAAMetadata(v2456, v2538);
      v808 = (unint64_t)sub_1C5D59738(v1598, v1595, v1596, (uint64_t)&v2509, v2446, v2431, (uint64_t)v2420, v2408, (uint64_t)v2404, v455, SHIDWORD(v455), v460, SHIDWORD(v460), v1597, 0, v1591, &v2502, &v2499, (uint64_t)v2538);
      if (!v808)
        goto LABEL_1122;
      goto LABEL_1137;
    case 195:
      v489 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v2447 = v490;
      v491 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v493 = v492;
      v2415 = v9;
      v494 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v496 = v495;
      v497 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      v498 = 1 << v497;
      if ((v497 & 0xFF00) == 0)
        LODWORD(v498) = 0;
      v2432 = v498;
      v499 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 1);
      v501 = 1 << v499;
      if ((v499 & 0xFF00) == 0)
        LODWORD(v501) = 0;
      v2421 = v501;
      v502 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v503 = (uint64_t *)v502[8];
      v504 = v502[12];
      v505 = v504 + 3;
      if (*((_DWORD *)v504 + 8) >= 0x41u)
        v505 = (_QWORD *)*v505;
      v506 = *v503;
      v507 = *(_DWORD *)v505;
      v2401 = v18;
      if ((*((_WORD *)v2456 + 9) & 3u) - 1 > 1)
        v508 = 0;
      else
        v508 = llvm::isInTailCallPosition((llvm *)v2456, *(const llvm::CallBase **)*v18, v500);
      v1606 = *(_QWORD *)(v2415 + 832);
      v1608 = sub_1C635C370(v2415);
      v1610 = &v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
      v1611 = (uint64_t *)*v1610;
      v2480 = *v1610 & 0xFFFFFFFFFFFFFFFBLL;
      v2481 = 0;
      v2483 = 0;
      if (v1611)
      {
        v1612 = *v1611;
        v1613 = *(_DWORD *)(*v1611 + 8);
        v1614 = v2447;
        v1615 = v2432;
        if ((v1613 & 0xFE) == 0x12)
          v1613 = *(_DWORD *)(**(_QWORD **)(v1612 + 16) + 8);
        LODWORD(v1611) = v1613 >> 8;
      }
      else
      {
        v1614 = v2447;
        v1615 = v2432;
      }
      v2482 = (int)v1611;
      v1822 = v1610[4];
      v2476 = v1822 & 0xFFFFFFFFFFFFFFFBLL;
      v2477 = 0;
      v2479 = 0;
      if (v1822)
      {
        v1823 = *(_QWORD *)v1822;
        v1824 = *(_DWORD *)(*(_QWORD *)v1822 + 8);
        if ((v1824 & 0xFE) == 0x12)
          v1824 = *(_DWORD *)(**(_QWORD **)(v1823 + 16) + 8);
        LODWORD(v1822) = v1824 >> 8;
      }
      v2478 = v1822;
      BYTE4(v2398) = v508;
      LODWORD(v2398) = v507;
      LODWORD(v2395) = v2421;
      v808 = sub_1C6369A6C(v1606, (uint64_t)v1608, v1607, (uint64_t)&v2509, (uint64_t)v489, v1614, v1615, v1609, (uint64_t)v491, v493, v2395, (uint64_t)v494, v496, v506, v2398);
      if (v808)
        goto LABEL_1311;
      goto LABEL_1318;
    case 196:
      v1008 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1010 = v1009;
      v1011 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2437 = v1012;
      v2452 = (uint64_t)v1011;
      v1013 = v9;
      v2426 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v2411 = v1014;
      v1015 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      if (v1015 <= 0x100)
        v1016 = 0;
      else
        v1016 = v1015;
      v1018 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 1);
      if (v1018 <= 0x100)
        LOBYTE(v1018) = 0;
      if (v1018 >= v1016)
        v1019 = v1016;
      else
        v1019 = v1018;
      v1020 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 12];
      v1021 = (llvm::APInt *)(v1020 + 3);
      v1022 = *((_DWORD *)v1020 + 8);
      if (v1022 > 0x40)
        v1023 = llvm::APInt::countLeadingZerosSlowCase(v1021) == v1022;
      else
        v1023 = *(_QWORD *)v1021 == 0;
      v1719 = v1023;
      v2401 = (uint64_t *)(v9 + 832);
      v1720 = v1010;
      if ((*((_WORD *)v8 + 9) & 3u) - 1 > 1)
        v1721 = 0;
      else
        v1721 = llvm::isInTailCallPosition((llvm *)v8, *(const llvm::CallBase **)*v18, v1017);
      v1722 = v1719 ^ 1;
      v1723 = *(_QWORD *)(v1013 + 832);
      v1724 = sub_1C635C370(v1013);
      v1726 = v1725;
      v1727 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v1728 = (uint64_t *)*v1727;
      *(_QWORD *)&v2496 = *v1727 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2496 + 1) = 0;
      v2498 = 0;
      if (v1728)
      {
        v1729 = *v1728;
        v1730 = *(_DWORD *)(*v1728 + 8);
        if ((v1730 & 0xFE) == 0x12)
          v1730 = *(_DWORD *)(**(_QWORD **)(v1729 + 16) + 8);
        LODWORD(v1728) = v1730 >> 8;
      }
      v2497 = (int)v1728;
      v1731 = v1727[4];
      *(_QWORD *)&v2493 = v1731 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2493 + 1) = 0;
      v2495 = 0;
      if (v1731)
      {
        v1732 = *(_QWORD *)v1731;
        v1733 = *(_DWORD *)(*(_QWORD *)v1731 + 8);
        if ((v1733 & 0xFE) == 0x12)
          v1733 = *(_DWORD *)(**(_QWORD **)(v1732 + 16) + 8);
        LODWORD(v1731) = v1733 >> 8;
      }
      v2494 = v1731;
      llvm::Instruction::getAAMetadata(v8, v2538);
      v808 = (unint64_t)sub_1C5D59738(v1723, (uint64_t)v1724, v1726, (uint64_t)&v2509, (uint64_t)v1008, v1720, v2452, v2437, (uint64_t)v2426, v2411, SHIDWORD(v2411), v1019, SHIDWORD(v1019), v1722, 1u, v1721, &v2496, &v2493, (uint64_t)v2538);
      if (v808)
        goto LABEL_1311;
      *(_BYTE *)(v1013 + 960) = 1;
      goto LABEL_1323;
    case 197:
      v642 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v2434 = v643;
      v2449 = (uint64_t)v642;
      v2423 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2409 = v644;
      v453 = v9;
      v2405 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v646 = v645;
      v647 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      if (v647 <= 0x100)
        v648 = 0;
      else
        v648 = v647;
      v650 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 1);
      if (v650 <= 0x100)
        LOBYTE(v650) = 0;
      if (v650 >= v648)
        v651 = v648;
      else
        v651 = v650;
      v652 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 12];
      v653 = (llvm::APInt *)(v652 + 3);
      v654 = *((_DWORD *)v652 + 8);
      if (v654 > 0x40)
        v655 = llvm::APInt::countLeadingZerosSlowCase(v653) == v654;
      else
        v655 = *(_QWORD *)v653 == 0;
      v1634 = v655;
      if ((*((_WORD *)v8 + 9) & 3u) - 1 > 1)
        v1635 = 0;
      else
        v1635 = llvm::isInTailCallPosition((llvm *)v8, *(const llvm::CallBase **)*v18, v649);
      v1592 = v18;
      if ((v1634 & 1) != 0)
        v1636 = sub_1C5D14AF0((uint64_t *)v453, v453 + 104);
      else
        v1636 = sub_1C635C370(v453);
      v1638 = (uint64_t)v1636;
      v1639 = v1637;
      v1640 = v1634 ^ 1;
      v1641 = *v1592;
      v1642 = &v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
      v1643 = (uint64_t *)*v1642;
      *(_QWORD *)&v2487 = *v1642 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2487 + 1) = 0;
      v2489 = 0;
      if (v1643)
      {
        v1644 = *v1643;
        v1645 = *(_DWORD *)(*v1643 + 8);
        if ((v1645 & 0xFE) == 0x12)
          v1645 = *(_DWORD *)(**(_QWORD **)(v1644 + 16) + 8);
        LODWORD(v1643) = v1645 >> 8;
      }
      v2488 = (int)v1643;
      v1646 = v1642[4];
      *(_QWORD *)&v2484 = v1646 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2484 + 1) = 0;
      v2486 = 0;
      if (v1646)
      {
        v1647 = *(_QWORD *)v1646;
        v1648 = *(_DWORD *)(*(_QWORD *)v1646 + 8);
        if ((v1648 & 0xFE) == 0x12)
          v1648 = *(_DWORD *)(**(_QWORD **)(v1647 + 16) + 8);
        LODWORD(v1646) = v1648 >> 8;
      }
      v2485 = v1646;
      llvm::Instruction::getAAMetadata(v2456, v2538);
      v808 = (unint64_t)sub_1C5D5AD54(v1641, v1638, v1639, (uint64_t)&v2509, v2449, v2434, (uint64_t)v2423, v2409, (uint64_t)v2405, v646, SHIDWORD(v646), v651, SHIDWORD(v651), v1640, v1635, &v2487, &v2484, (uint64_t)v2538);
      if (v808)
        goto LABEL_1137;
LABEL_1122:
      *(_BYTE *)(v453 + 960) = 1;
      goto LABEL_1323;
    case 198:
      v586 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v2448 = v587;
      v588 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v590 = v589;
      v2415 = v9;
      v591 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v593 = v592;
      v594 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      v595 = 1 << v594;
      if ((v594 & 0xFF00) == 0)
        LODWORD(v595) = 0;
      v2433 = v595;
      v596 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 1);
      v598 = 1 << v596;
      if ((v596 & 0xFF00) == 0)
        LODWORD(v598) = 0;
      v2422 = v598;
      v599 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v600 = (uint64_t *)v599[8];
      v601 = v599[12];
      v602 = v601 + 3;
      if (*((_DWORD *)v601 + 8) >= 0x41u)
        v602 = (_QWORD *)*v602;
      v603 = *v600;
      v604 = *(_DWORD *)v602;
      v2401 = v18;
      if ((*((_WORD *)v2456 + 9) & 3u) - 1 > 1)
        v605 = 0;
      else
        v605 = llvm::isInTailCallPosition((llvm *)v2456, *(const llvm::CallBase **)*v18, v597);
      v1622 = *(_QWORD *)(v2415 + 832);
      v1624 = sub_1C635C370(v2415);
      v1626 = &v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
      v1627 = (uint64_t *)*v1626;
      v2472 = *v1626 & 0xFFFFFFFFFFFFFFFBLL;
      v2473 = 0;
      v2475 = 0;
      if (v1627)
      {
        v1628 = *v1627;
        v1629 = *(_DWORD *)(*v1627 + 8);
        v1630 = v2448;
        v1631 = v2433;
        if ((v1629 & 0xFE) == 0x12)
          v1629 = *(_DWORD *)(**(_QWORD **)(v1628 + 16) + 8);
        LODWORD(v1627) = v1629 >> 8;
      }
      else
      {
        v1630 = v2448;
        v1631 = v2433;
      }
      v2474 = (int)v1627;
      v1825 = v1626[4];
      v2468 = v1825 & 0xFFFFFFFFFFFFFFFBLL;
      v2469 = 0;
      v2471 = 0;
      if (v1825)
      {
        v1826 = *(_QWORD *)v1825;
        v1827 = *(_DWORD *)(*(_QWORD *)v1825 + 8);
        if ((v1827 & 0xFE) == 0x12)
          v1827 = *(_DWORD *)(**(_QWORD **)(v1826 + 16) + 8);
        LODWORD(v1825) = v1827 >> 8;
      }
      v2470 = v1825;
      BYTE4(v2398) = v605;
      LODWORD(v2398) = v604;
      LODWORD(v2395) = v2422;
      v808 = sub_1C6369DAC(v1622, (uint64_t)v1624, v1623, (uint64_t)&v2509, (uint64_t)v586, v1630, v1631, v1625, (uint64_t)v588, v590, v2395, (uint64_t)v591, v593, v603, v2398);
      if (!v808)
        goto LABEL_1318;
      goto LABEL_1311;
    case 199:
      v729 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v731 = v730;
      v732 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v734 = v733;
      v2415 = v9;
      v735 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v2424 = v736;
      v738 = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      if (v738 <= 0x100)
        v739 = 0;
      else
        v739 = v738;
      v740 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 12];
      v741 = (llvm::APInt *)(v740 + 3);
      v742 = *((_DWORD *)v740 + 8);
      v2410 = v739;
      if (v742 > 0x40)
        v743 = llvm::APInt::countLeadingZerosSlowCase(v741) == v742;
      else
        v743 = *(_QWORD *)v741 == 0;
      v1650 = v743;
      v2454 = v734;
      if ((*((_WORD *)v8 + 9) & 3u) - 1 > 1)
        v1651 = 0;
      else
        v1651 = llvm::isInTailCallPosition((llvm *)v8, *(const llvm::CallBase **)*v18, v737);
      v1592 = (uint64_t *)(v9 + 832);
      v1652 = v1650 ^ 1;
      v1653 = (uint64_t)v729;
      if ((v1650 & 1) != 0)
        v1654 = sub_1C5D14AF0((uint64_t *)v2415, v2415 + 104);
      else
        v1654 = sub_1C635C370(v2415);
      v1656 = (uint64_t)v1654;
      v1657 = v1655;
      v1658 = *v1592;
      v1659 = v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
      *(_QWORD *)&v2490 = (unint64_t)v1659 & 0xFFFFFFFFFFFFFFFBLL;
      *((_QWORD *)&v2490 + 1) = 0;
      v2492 = 0;
      if (v1659)
      {
        v1660 = *v1659;
        v1661 = *((_DWORD *)*v1659 + 2);
        if ((v1661 & 0xFE) == 0x12)
          v1661 = *(_DWORD *)(*(_QWORD *)v1660[2] + 8);
        LODWORD(v1659) = v1661 >> 8;
      }
      v2491 = (int)v1659;
      llvm::Instruction::getAAMetadata(v2456, v2538);
      v808 = (unint64_t)sub_1C5D5B948(v1658, v1656, v1657, (uint64_t)&v2509, v1653, v731, (uint64_t)v732, v2454, (uint64_t)v735, v2424, SHIDWORD(v2424), v2410, 0, v1652, v1651, &v2490, (uint64_t)v2538);
      if (!v808)
        goto LABEL_1318;
LABEL_1137:
      v1662 = *v1592;
      goto LABEL_1406;
    case 200:
      v857 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v859 = v858;
      v860 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v862 = v861;
      v2415 = v9;
      v863 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v2435 = v864;
      v865 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v8 + 8), 0);
      if ((v865 & 0xFF00) != 0)
        v867 = 1 << v865;
      else
        v867 = 0;
      v868 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v869 = (uint64_t *)v868[8];
      v870 = v868[12];
      v871 = v870 + 3;
      v872 = v859;
      if (*((_DWORD *)v870 + 8) >= 0x41u)
        v871 = (_QWORD *)*v871;
      v873 = *v869;
      v874 = *(_DWORD *)v871;
      v2401 = v18;
      v2450 = v867;
      if ((*((_WORD *)v2456 + 9) & 3u) - 1 > 1)
        v875 = 0;
      else
        v875 = llvm::isInTailCallPosition((llvm *)v2456, *(const llvm::CallBase **)*v18, v866);
      v1684 = *(_QWORD *)(v2415 + 832);
      v1686 = sub_1C635C370(v2415);
      v1688 = v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF)];
      v2465[1] = (unsigned __int8 *)((unint64_t)v1688 & 0xFFFFFFFFFFFFFFFBLL);
      v2465[2] = 0;
      v2467 = 0;
      if (v1688)
      {
        v1689 = *v1688;
        v1690 = *((_DWORD *)*v1688 + 2);
        v1691 = (uint64_t)v857;
        v1692 = v872;
        v1693 = v2435;
        if ((v1690 & 0xFE) == 0x12)
          v1690 = *(_DWORD *)(*(_QWORD *)v1689[2] + 8);
        LODWORD(v1688) = v1690 >> 8;
      }
      else
      {
        v1691 = (uint64_t)v857;
        v1692 = v872;
        v1693 = v2435;
      }
      v2466 = (int)v1688;
      BYTE4(v2397) = v875;
      LODWORD(v2397) = v874;
      v808 = sub_1C636A0EC(v1684, (uint64_t)v1686, v1685, (uint64_t)&v2509, v1691, v1692, v2450, v1687, (uint64_t)v860, v862, (uint64_t)v863, v1693, v873, v2397);
      if (v808)
      {
LABEL_1311:
        v1662 = *v2401;
        goto LABEL_1406;
      }
LABEL_1318:
      *(_BYTE *)(v2415 + 960) = 1;
      goto LABEL_1323;
    case 201:
      v922 = *(_QWORD *)(v9 + 832);
      v923 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v925 = (llvm **)(v923[5] + 16 * v924);
      v711 = *v925;
      v712 = (uint64_t)v925[1];
      v713 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v715 = v926;
      v927 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2394 = v928;
      v2396 = v2507;
      v2393 = (uint64_t)v927;
      v416 = v922;
      v417 = 250;
      goto LABEL_779;
    case 202:
      v820 = *(_QWORD *)(v9 + 832);
      v821 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v823 = (llvm **)(v821[5] + 16 * v822);
      v711 = *v823;
      v712 = (uint64_t)v823[1];
      v713 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v715 = v824;
      v825 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2394 = v826;
      v2396 = v2507;
      v2393 = (uint64_t)v825;
      v416 = v820;
      v417 = 246;
LABEL_779:
      v413 = v711;
      v414 = v712;
      v1236 = (uint64_t)v713;
      v1237 = v715;
      goto LABEL_1017;
    case 237:
      v440 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v442 = v441;
      v443 = *(_QWORD *)(v9 + 832);
      v445 = sub_1C635C370(v9);
      v447 = *(_QWORD *)(v443 + 832);
      if (v447)
        LOWORD(v447) = *(_WORD *)(v447 + 8);
      v448 = sub_1C5D56C70(v443, 279, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v445, v444, v446, (uint64_t)v440, v442, v447);
      goto LABEL_1337;
    case 238:
      v772 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v774 = v773;
      v775 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v778 = (uint64_t)v775;
      v779 = v776;
      v780 = *(_QWORD *)(v9 + 832);
      v781 = v2507;
      v782 = v772[5];
      v783 = *(llvm **)(v782 + 16 * v774);
      if (v783 != 10)
        goto LABEL_1527;
      v784 = *(_BYTE *)(v775[5] + 16 * v776) != 10 || dword_1ED824E08 == 0;
      if (v784 || dword_1ED824E08 > 0x12)
        goto LABEL_1527;
      v786 = *((unsigned __int16 *)v772 + 12);
      if (v786 != 36 && v786 != 12)
        goto LABEL_1527;
      v2417 = v9;
      LODWORD(v2538[1]) = 32;
      v2538[0] = (void *)1092616192;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v2529, (const llvm::APInt **)v2538);
      v2538[1] = v2529[0];
      *(void **)v2539 = v2529[1];
      *(_DWORD *)&v2539[8] = v2530;
      v2539[12] = v2539[12] & 0xF0 | BYTE4(v2530) & 0xF;
      v788 = sub_1C47ECB98(v772[10] + 24, (uint64_t)v2538);
      if (v2538[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)v2539);
      }
      else if ((*((_DWORD *)v2538[1] + 2) - 64) <= 0xFFFFFF7F && *(_QWORD *)v2539)
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)v2539, 0x1000C8000313F17);
      }
      if ((v788 & 1) != 0)
      {
        v789 = sub_1C5D38C7C(v780, 0x40549A78u, (const llvm::APFloat *)&v2509);
        v792 = *(_QWORD *)(v780 + 832);
        if (v792)
          LOWORD(v792) = *(_WORD *)(v792 + 8);
        v793 = sub_1C5D56C70(v780, 98, (const llvm::APInt *)&v2509, (llvm *)0xA, 0, v778, v779, v791, (uint64_t)v789, v790, v792);
        v264 = (uint64_t)sub_1C5D38D88((uint64_t)v793, v794, (const llvm::APInt *)&v2509, v780);
        v266 = v795;
        v9 = v2417;
      }
      else
      {
        v782 = v772[5];
        v783 = *(llvm **)(v782 + 16 * v774);
        v9 = v2417;
LABEL_1527:
        v264 = (uint64_t)sub_1C5D56C70(v780, 229, (const llvm::APInt *)&v2509, v783, *(_QWORD *)(v782 + 16 * v774 + 8), (uint64_t)v772, v774, v777, v778, v779, v781);
        v266 = v2039;
      }
      v2538[0] = v8;
      goto LABEL_1230;
    case 239:
      v606 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v608 = v607;
      v609 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v611 = (uint64_t)v609;
      v613 = v612;
      v614 = *(_QWORD *)(v9 + 832);
      v615 = *((unsigned __int16 *)v609 + 12);
      v616 = v615 == 35 || v615 == 11;
      v2416 = v9;
      if (!v616)
        goto LABEL_1358;
      v617 = v609[10];
      v618 = *(_DWORD *)(v617 + 32);
      if (v618 > 0x40)
        v619 = **(_QWORD **)(v617 + 24);
      else
        v619 = (uint64_t)(*(_QWORD *)(v617 + 24) << -(char)v618) >> -(char)v618;
      if ((int)v619 >= 0)
        v1830 = v619;
      else
        v1830 = -(int)v619;
      if ((_DWORD)v619)
      {
        if (sub_1C636604C(v614)
          && (v1834.i32[0] = v1830,
              v1835 = (uint8x8_t)vcnt_s8(v1834),
              v1835.i16[0] = vaddlv_u8(v1835),
              (__clz(v1830) ^ 0x1F) + v1835.i32[0] > 6))
        {
LABEL_1358:
          v1850 = v606[5] + 16 * v608;
          v1851 = *(llvm **)v1850;
          v1852 = *(_QWORD *)(v1850 + 8);
          v1853 = *(_QWORD *)(v614 + 832);
          if (v1853)
            LOWORD(v1853) = *(_WORD *)(v1853 + 8);
          v1832 = sub_1C5D56C70(v614, 228, (const llvm::APInt *)&v2509, v1851, v1852, (uint64_t)v606, v608, v610, v611, v613, v1853);
        }
        else
        {
          v1836 = 0;
          v1837 = 0;
          v1838 = v606;
          v1839 = v608;
          do
          {
            if ((v1830 & 1) != 0)
            {
              if (v1837)
              {
                v1840 = *(_QWORD *)(v614 + 832);
                if (v1840)
                  LOWORD(v1840) = *(_WORD *)(v1840 + 8);
                v1837 = sub_1C5D56C70(v614, 98, (const llvm::APInt *)&v2509, *(llvm **)(v1837[5] + 16 * v1836), *(_QWORD *)(v1837[5] + 16 * v1836 + 8), (uint64_t)v1837, v1836, v610, (uint64_t)v1838, v1839, v1840);
                v1836 = v1841;
              }
              else
              {
                v1836 = v1839;
                v1837 = v1838;
              }
            }
            v1842 = v1838[5] + 16 * v1839;
            v1843 = *(llvm **)v1842;
            v1844 = *(_QWORD *)(v1842 + 8);
            v1845 = *(_QWORD *)(v614 + 832);
            if (v1845)
              LOWORD(v1845) = *(_WORD *)(v1845 + 8);
            v1838 = sub_1C5D56C70(v614, 98, (const llvm::APInt *)&v2509, v1843, v1844, (uint64_t)v1838, v1839, v610, (uint64_t)v1838, v1839, v1845);
            v1839 = v1839 & 0xFFFFFFFF00000000 | v1846;
            v430 = v1830 > 1;
            v1830 >>= 1;
          }
          while (v430);
          v1847 = *(_QWORD *)(v611 + 80);
          v1848 = *(_DWORD *)(v1847 + 32);
          if (v1848 > 0x40)
            v1849 = **(_QWORD **)(v1847 + 24);
          else
            v1849 = (uint64_t)(*(_QWORD *)(v1847 + 24) << -(char)v1848) >> -(char)v1848;
          if ((v1849 & 0x8000000000000000) == 0)
          {
LABEL_1489:
            v2538[0] = v8;
            v2009 = sub_1C6364290((uint64_t *)(v2416 + 8), v2538);
            v2009[1] = v1837;
            *((_DWORD *)v2009 + 4) = v1836;
            goto LABEL_1323;
          }
          v2002 = (_BOOL8 *)(v606[5] + 16 * v608);
          v2003 = (llvm *)*v2002;
          v2004 = v2002[1];
          v2006 = sub_1C5D404C4(v614, (const llvm::APInt *)&v2509, *v2002, v2004, 0, 1.0);
          v2008 = *(_QWORD *)(v614 + 832);
          if (v2008)
            LOWORD(v2008) = *(_WORD *)(v2008 + 8);
          v1832 = sub_1C5D56C70(v614, 99, (const llvm::APInt *)&v2509, v2003, v2004, (uint64_t)v2006, v2005, v2007, (uint64_t)v1837, v1836, v2008);
        }
      }
      else
      {
        v1831 = v606[5] + 16 * v608;
        v1832 = sub_1C5D404C4(v614, (const llvm::APInt *)&v2509, *(_QWORD *)v1831, *(_QWORD *)(v1831 + 8), 0, 1.0);
      }
      v1837 = v1832;
      LODWORD(v1836) = v1833;
      goto LABEL_1489;
    case 240:
      for (m = 0; m != 10; m += 2)
      {
        v1195 = &v2538[m];
        *v1195 = 0;
        *((_DWORD *)v1195 + 2) = 0;
      }
      v1196 = (unsigned __int8 **)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v1197 = v1196[4];
      v1198 = v1197 + 24;
      if (*((_DWORD *)v1197 + 8) >= 0x41u)
        v1198 = (_QWORD *)*v1198;
      if (*(_DWORD *)v1198)
        v1199 = 2;
      else
        v1199 = 1;
      v1200 = *(_QWORD *)(v9 + 832);
      v2538[0] = *(void **)(v1200 + 192);
      LODWORD(v2538[1]) = *(_DWORD *)(v1200 + 200);
      *(_QWORD *)v2539 = sub_1C635FDC4(v9, *v1196);
      *(_DWORD *)&v2539[8] = v1201;
      *(_QWORD *)&v2539[16] = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      LODWORD(v2540) = v1202;
      v2541 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      LODWORD(v2542) = v1203;
      v2543 = (unsigned __int8 *)sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 12]);
      LODWORD(v2544) = v1204;
      v1205 = *(_QWORD *)(v9 + 832);
      v1206 = sub_1C636D7B0((llvm *)1, 0);
      v1207 = (unint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v1208 = v1207 & 0xFFFFFFFFFFFFFFFBLL;
      if (v1207)
      {
        v1209 = *(_DWORD **)v1207;
        v1210 = *(_DWORD *)(*(_QWORD *)v1207 + 8);
        if ((v1210 & 0xFE) == 0x12)
          v1210 = *(_DWORD *)(**((_QWORD **)v1209 + 2) + 8);
        LODWORD(v1207) = v1210 >> 8;
      }
      *(_OWORD *)v2529 = 0u;
      v2530 = 0u;
      v2555 = (__n128)v1208;
      LODWORD(v2556[0]) = v1207;
      BYTE4(v2556[0]) = 0;
      sub_1C6365BD8(v1205, 3, 0);
      v1213 = sub_1C636ACA4(v1205, 287, (uint64_t)&v2509, v1206, 1, (uint64_t *)v2538, 5, v1212, 3, 0, (__int128 *)&v2555, v1211, 0, v1199, 0, (uint64_t)v2529);
      v1215 = v1214;
      v1216 = *(unsigned int *)(v9 + 112);
      if (v1216 >= *(_DWORD *)(v9 + 116))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 104, v9 + 120, v1216 + 1, 16);
        LODWORD(v1216) = *(_DWORD *)(v9 + 112);
      }
      v1217 = (unsigned __int8 ***)(*(_QWORD *)(v9 + 104) + 16 * v1216);
      *v1217 = v1213;
      v1217[1] = v1215;
      ++*(_DWORD *)(v9 + 112);
      v808 = (unint64_t)sub_1C635C370(v9);
      goto LABEL_1405;
    case 244:
      v796 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v797 = (uint64_t *)(*v796 + 3);
      if (*((_DWORD *)*v796 + 8) >= 0x41u)
        v797 = (uint64_t *)*v797;
      v798 = *v797;
      v799 = v796[4];
      v800 = (uint64_t *)(v799 + 3);
      if (*((_DWORD *)v799 + 8) >= 0x41u)
        v800 = (uint64_t *)*v800;
      v801 = *v800;
      v802 = v796[8];
      v803 = v802 + 3;
      if (*((_DWORD *)v802 + 8) >= 0x41u)
        v803 = (_QWORD *)*v803;
      v804 = *(_DWORD *)v803;
      v805 = *(_QWORD *)(v9 + 832);
      v806 = sub_1C635C370(v9);
      v808 = (unint64_t)sub_1C5D5CE64(v805, (uint64_t)&v2509, (uint64_t)v806, v807, v798, v801, v804);
      goto LABEL_1405;
    case 249:
      v144 = (uint64_t *)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v145 = *v144;
      v146 = *(unsigned __int8 *)(*v144 + 16);
      if (v146 == 75 || v146 == 5 && *(_WORD *)(v145 + 18) == 47)
      {
        v147 = *(_DWORD *)(v145 + 20);
        if ((v147 & 0x40000000) != 0)
          v148 = *(uint64_t **)(v145 - 8);
        else
          v148 = (uint64_t *)(v145 - 32 * (v147 & 0x7FFFFFF));
        v145 = *v148;
      }
      v222 = v144[8];
      v223 = *(_QWORD *)(*v18 + 40);
      LODWORD(v2538[1]) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v223 + 40) + 504) + 4);
      if (LODWORD(v2538[1]) > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v2538, 0, 0);
        v223 = *(_QWORD *)(*v18 + 40);
      }
      else
      {
        v2538[0] = 0;
      }
      v224 = (_BYTE *)llvm::Value::stripAndAccumulateConstantOffsets(v145, (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v223 + 40) + 272), (const void **)v2538, 1, 0, 0, v17);
      v225 = v224[16];
      if (v225 >= 4)
        goto LABEL_256;
      v226 = (uint64_t)v224;
      if (v225 != 3 || (v224[34] & 0x40) == 0)
        goto LABEL_237;
      v227 = ***(_QWORD ***)v224;
      v2529[0] = v224;
      v228 = *(_DWORD *)(v227 + 2520);
      if (v228)
      {
        v229 = *(_QWORD *)(v227 + 2504);
        v230 = v228 - 1;
        v231 = v230 & ((v224 >> 4) ^ (v224 >> 9));
        v232 = (_QWORD *)(v229 + 24 * v231);
        v233 = *v232;
        if (*v232 == v226)
          goto LABEL_232;
        v1818 = 0;
        v1819 = 1;
        while (v233 != -4096)
        {
          if (v1818)
            v1820 = 0;
          else
            v1820 = v233 == -8192;
          if (v1820)
            v1818 = v232;
          v1821 = v231 + v1819++;
          v231 = v1821 & v230;
          v232 = (_QWORD *)(v229 + 24 * v231);
          v233 = *v232;
          if (*v232 == v226)
          {
LABEL_232:
            if (v232[2] == 12)
            {
              v234 = (uint64_t *)v232[1];
              v235 = *v234;
              v236 = *((_DWORD *)v234 + 2);
              if (v235 == 0x7274702E6D766C6CLL && v236 == 1752462689)
                goto LABEL_256;
            }
LABEL_237:
            v238 = *(unsigned __int8 *)(v222 + 16);
            if (v238 == 16)
              v239 = (unsigned __int8 *)v222;
            else
              v239 = 0;
            if (v238 != 84)
              goto LABEL_250;
            v240 = *(_QWORD *)(v222 - 32);
            if (!v240)
              goto LABEL_251;
            if (!*(_BYTE *)(v240 + 16)
              && *(_QWORD *)(v240 + 24) == *(_QWORD *)(v222 + 72)
              && (*(_BYTE *)(v240 + 33) & 0x20) != 0
              && *(_DWORD *)(v240 + 36) == 247)
            {
              v241 = (uint64_t *)(v222 - 32 * (*(_DWORD *)(v222 + 20) & 0x7FFFFFF));
              if (*(_BYTE *)(v241[4] + 16) == 16)
                v239 = (unsigned __int8 *)v241[4];
              else
                v239 = 0;
              v240 = *v241;
            }
            else
            {
LABEL_250:
              v240 = 0;
            }
LABEL_251:
            if (v239)
              v222 = v240;
            if (v222 && *(unsigned __int8 *)(v222 + 16) >= 0x1Cu && *(uint64_t ***)(v222 + 40) != v8[5])
            {
LABEL_256:
              sub_1C5D27790(v9, (uint64_t)v8, 249);
              goto LABEL_257;
            }
            v387 = *(_QWORD *)(v9 + 832);
            v388 = *(_QWORD *)v9;
            v389 = *(_DWORD *)(v9 + 816);
            v2529[0] = 0;
            LODWORD(v2529[1]) = v389;
            if (v388)
            {
              v390 = (void **)(v388 + 48);
              if (v390 != v2529)
              {
                v391 = *v390;
                v2529[0] = v391;
                if (v391)
                  llvm::MetadataTracking::track((uint64_t)v2529, (unsigned __int8 *)v391, 2);
              }
            }
            v392 = sub_1C63662D4(v387, 0, (const llvm::APInt *)v2529, 0);
            v394 = v393;
            if (v2529[0])
              llvm::MetadataTracking::untrack((uint64_t)v2529, (unsigned __int8 *)v2529[0]);
            v395 = v392;
            v396 = v394;
            if (v239)
            {
              v395 = sub_1C635FDC4(v9, v239);
              v396 = v397;
            }
            v398 = v392;
            v399 = v394;
            if (v222)
            {
              v398 = sub_1C635FDC4(v9, (unsigned __int8 *)v222);
              v399 = v400;
            }
            v401 = *(_QWORD *)(v9 + 832);
            v402 = *(_QWORD *)v9;
            v403 = *(_DWORD *)(v9 + 816);
            v2529[0] = 0;
            LODWORD(v2529[1]) = v403;
            v2430 = v396;
            v2419 = (uint64_t)v398;
            if (!v402)
            {
              v404 = v9;
              goto LABEL_361;
            }
            v404 = v9;
            if ((void **)(v402 + 48) == v2529)
            {
LABEL_361:
              v405 = v401;
            }
            else
            {
              v1565 = *(void **)(v402 + 48);
              v2529[0] = v1565;
              v405 = v401;
              if (v1565)
              {
                llvm::MetadataTracking::track((uint64_t)v2529, (unsigned __int8 *)v1565, 2);
                v405 = *(_QWORD *)(v404 + 832);
                v402 = *(_QWORD *)v404;
                v403 = *(_DWORD *)(v404 + 816);
              }
            }
            v1566 = v392[5] + 16 * v394;
            v1567 = *(llvm **)v1566;
            v1568 = *(_QWORD *)(v1566 + 8);
            v2555.n128_u64[0] = 0;
            v2555.n128_u32[2] = v403;
            v1569 = v1567;
            v1570 = v1568;
            if (v402)
            {
              v1571 = (__n128 *)(v402 + 48);
              v1569 = v1567;
              v1570 = v1568;
              if (v1571 != &v2555)
              {
                v2555.n128_u64[0] = v1571->n128_u64[0];
                v1569 = v1567;
                v1570 = v1568;
                if (v2555.n128_u64[0])
                {
                  llvm::MetadataTracking::track((uint64_t)&v2555, (unsigned __int8 *)v2555.n128_u64[0], 2);
                  v2304 = v392[5] + 16 * v394;
                  v1569 = *(llvm **)v2304;
                  v1570 = *(_QWORD *)(v2304 + 8);
                }
              }
            }
            if (LODWORD(v2538[1]) > 0x40)
              v1572 = *(_QWORD *)v2538[0];
            else
              v1572 = (uint64_t)v2538[0] << -(uint64_t)LODWORD(v2538[1]) >> -(uint64_t)LODWORD(v2538[1]);
            v1573 = sub_1C6366FFC(v405, v226, (uint64_t)&v2555, v1569, v1570, v1572, 0, 0);
            v1575 = v1574;
            v1576 = sub_1C635FDC4(v404, (unsigned __int8 *)v2456[-4 * (*((_DWORD *)v2456 + 5) & 0x7FFFFFF) + 4]);
            v1579 = sub_1C6366A24(v401, (const char *)0x14, (const llvm::APInt *)v2529, v1567, v1568, (uint64_t)v1573, v1575, v1578, (uint64_t)v1576, v1577, v2419, v399, (uint64_t)v395, v2430);
            v1581 = v1580;
            *(_QWORD *)&v2524 = v2456;
            v1582 = sub_1C6364290((uint64_t *)(v404 + 8), &v2524);
            v1582[1] = v1579;
            *((_DWORD *)v1582 + 4) = v1581;
            if (v2555.n128_u64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v2555, (unsigned __int8 *)v2555.n128_u64[0]);
            if (v2529[0])
              llvm::MetadataTracking::untrack((uint64_t)v2529, (unsigned __int8 *)v2529[0]);
LABEL_257:
            if (LODWORD(v2538[1]) >= 0x41)
            {
              v242 = v2538[0];
              if (v2538[0])
LABEL_259:
                MEMORY[0x1CAA32F9C](v242, 0x1000C8000313F17);
            }
            goto LABEL_1323;
          }
        }
        if (v1818)
          v1989 = v1818;
        else
          v1989 = v232;
      }
      else
      {
        v1989 = 0;
      }
      v232 = sub_1C53D65B8(v227 + 2504, (uint64_t)v2529, (uint64_t *)v2529, v1989);
      v1990 = v2529[0];
      v232[1] = 0;
      v232[2] = 0;
      *v232 = v1990;
      goto LABEL_232;
    case 252:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v560;
      v561 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v562 = (uint64_t *)(v406[5] + 16 * v408);
      v563 = *v562;
      v564 = v562[1];
      v565 = *(_QWORD *)(v9 + 832);
      v567 = sub_1C6366544(v565, (uint64_t)v561, v566, (uint64_t)&v2509, *v562, v564);
      v569 = *(_QWORD *)(v565 + 832);
      if (v569)
        LOWORD(v569) = *(_WORD *)(v569 + 8);
      v2394 = v568;
      v2396 = v569;
      v2393 = v567;
      v416 = v565;
      v417 = 171;
      v413 = (llvm *)v563;
      v414 = v564;
      goto LABEL_1016;
    case 254:
    case 255:
      v367 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v368 = sub_1C635C370(v9);
      v370 = v369;
      v371 = sub_1C5D438A8(*(_QWORD *)(v9 + 832), (uint64_t)v367[3]);
      v373 = v372;
      v374 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v375 = *(_QWORD *)(v9 + 832);
      v377 = sub_1C636A8B4(v375, v374, v376, 1, 0);
      v380 = sub_1C636D6B4(v375, (const char *)0x1B, (const llvm::APInt *)&v2509, v377, v378, (uint64_t)v368, v370, v379, v371, v373);
      goto LABEL_587;
    case 256:
      v1221 = sub_1C635C370(v9);
      v1223 = v1222;
      v1224 = *(_QWORD *)(v9 + 832);
      v1225 = sub_1C636A8B4(v1224, 6, 0, 1, 0);
      v1127 = sub_1C636D648(v1224, (const char *)0x118, (const llvm::APInt *)&v2509, v1225, v1226, (uint64_t)v1221, v1223);
LABEL_774:
      v702 = v1127;
      v704 = v1128;
      v2538[0] = v8;
      goto LABEL_775;
    case 257:
      v1319 = *(_QWORD *)(v9 + 832);
      v718 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(v1319 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v720 = v1320;
      v424 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v425 = v1321;
      v1322 = *(_QWORD *)(v1319 + 832);
      if (v1322)
        v431 = *(_WORD *)(v1322 + 8);
      else
        v431 = 0;
      v433 = v1319;
      v434 = 23;
LABEL_505:
      v428 = v718;
LABEL_1227:
      v432 = v720;
      goto LABEL_1228;
    case 262:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v1038;
      v1039 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1041 = v406[5] + 16 * v408;
      v413 = *(llvm **)v1041;
      v414 = *(_QWORD *)(v1041 + 8);
      v1042 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v1042)
        LOWORD(v1042) = *(_WORD *)(v1042 + 8);
      v2394 = v1040;
      v2396 = v1042;
      v2393 = (uint64_t)v1039;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 82;
      goto LABEL_1016;
    case 263:
    case 278:
    case 284:
    case 301:
    case 309:
    case 312:
      if ((int)v6 > 300)
      {
        if ((_DWORD)v6 == 301)
        {
          v219 = 77;
        }
        else if ((_DWORD)v6 == 309)
        {
          v219 = 81;
        }
        else
        {
          v219 = 79;
        }
      }
      else if ((_DWORD)v6 == 263)
      {
        v219 = 76;
      }
      else if ((_DWORD)v6 == 278)
      {
        v219 = 80;
      }
      else
      {
        v219 = 78;
      }
      v1173 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1175 = v1174;
      v1176 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1178 = v1177;
      v1179 = v1173[5] + 16 * v1175;
      v1180 = *(void **)v1179;
      v1181 = *(_DWORD **)(v1179 + 8);
      v2538[0] = v1180;
      v2538[1] = v1181;
      if ((_BYTE)v1180)
      {
        if (v1180 - 15 >= 0x9C)
          goto LABEL_753;
      }
      else if ((v1181[2] & 0xFE) != 0x12)
      {
LABEL_753:
        v1182 = 0;
        v1183 = 2;
        goto LABEL_756;
      }
      v1184 = v9;
      v1185 = *(llvm::LLVMContext **)(v9 + 968);
      v1186 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)v2538);
      v1187 = v1185;
      v9 = v1184;
      v1183 = sub_1C47AC578(v1187, 2, 0, v1186);
      v1182 = v1188;
      v1180 = v2538[0];
      v1181 = v2538[1];
LABEL_756:
      v1189 = sub_1C636A8B4(*(_QWORD *)(v9 + 832), (uint64_t)v1180, (uint64_t)v1181, v1183, v1182);
      v264 = (uint64_t)sub_1C636D6B4(*(_QWORD *)(v9 + 832), (const char *)v219, (const llvm::APInt *)&v2509, v1189, v1190, (uint64_t)v1173, v1175, v1191, (uint64_t)v1176, v1178);
      v266 = v1192;
      v2529[0] = v8;
      v760 = (uint64_t *)(v9 + 8);
LABEL_757:
      v1193 = v2529;
      goto LABEL_1232;
    case 264:
    case 265:
    case 303:
    case 304:
      v244 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v246 = v245;
      v247 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v2445 = v248;
      v249 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v251 = v250;
      v252 = sub_1C5D33D64(v6);
      v254 = v9;
      v255 = (const char *)v252;
      v2414 = v254;
      v256 = *(_QWORD *)(v254 + 832);
      v257 = v244[5] + 16 * v246;
      v258 = *(void **)v257;
      v259 = *(_QWORD *)(v257 + 8);
      v2538[0] = *(void **)v257;
      v2538[1] = (void *)v259;
      v260 = v249[10];
      v261 = (_QWORD *)(v260 + 24);
      if (*(_DWORD *)(v260 + 32) >= 0x41u)
        v261 = (_QWORD *)*v261;
      v262 = *(llvm::EVT **)(v256 + 56);
      if ((_DWORD)v252 != 94 && !*(_DWORD *)v261)
        goto LABEL_267;
      v315 = v258;
      if ((_BYTE)v258 && *(_QWORD *)&v10[8 * v258 + 96])
        goto LABEL_1500;
      if ((_BYTE)v258)
      {
        if (v258 - 15 >= 0x9C)
          goto LABEL_267;
        v316 = *(llvm::EVT **)(v256 + 56);
        v317 = sub_1C47F37A0((unsigned __int8 *)v2538);
      }
      else
      {
        if ((*(_DWORD *)(v259 + 8) & 0xFE) != 0x12)
          goto LABEL_267;
        v316 = *(llvm::EVT **)(v256 + 56);
        v317 = llvm::EVT::getEVT(*(llvm::EVT **)(v259 + 24), 0, (BOOL)v258);
      }
      if (v317 && *(_QWORD *)&v10[8 * v317 + 96])
      {
        v262 = v316;
        LOBYTE(v258) = v2538[0];
        v315 = LOBYTE(v2538[0]);
        if (!LOBYTE(v2538[0]))
        {
          v1540 = LOBYTE(v2538[0]);
          goto LABEL_1506;
        }
LABEL_1500:
        v2020 = v10[390 * v315 + 3862 + v255];
        if (!v2020)
        {
          v2021 = v262;
          v2022 = (*(uint64_t (**)(unsigned __int8 *, const char *))(*(_QWORD *)v10 + 520))(v10, v255);
          v262 = v2021;
          if (v2022)
            v2020 = 0;
          else
            v2020 = 2;
        }
        if ((v2020 & 0xFFFFFFFB) != 0)
        {
          v1540 = LOBYTE(v2538[0]);
LABEL_1506:
          v2441 = v255 & 0x5D;
          v2427 = v251;
          v2023 = v262;
          if (v1540)
          {
            if ((v1540 - 2) < 6)
            {
              v2024 = sub_1C47A8C74((unsigned __int8 *)v2538);
LABEL_1511:
              v2026 = v2024;
              if ((_DWORD)v2025 == 1)
              v2027 = v2026;
              if (v2026 <= 30)
              {
                switch(v2026)
                {
                  case 0:
                    v2029 = 2;
                    v2028 = 0;
                    goto LABEL_1674;
                  case 15:
                    v2027 = 0;
                    v2028 = 0;
                    v2029 = 4;
                    goto LABEL_1674;
                  case 7:
                    v2027 = 0;
                    v2028 = 0;
                    v2029 = 3;
                    goto LABEL_1674;
                }
              }
              else
              {
                switch(v2026)
                {
                  case 31:
                    v2027 = 0;
                    v2028 = 0;
                    v2029 = 5;
LABEL_1674:
                    v2333 = (void *)(v2029 | v2027);
LABEL_1678:
                    v2529[0] = v2333;
                    v2529[1] = v2028;
                    if (v2441 == 92)
                    {
                      v2413 = sub_1C6366480(v256, (uint64_t)v244, v246, (uint64_t)&v2509, (uint64_t)v2333, (uint64_t)v2028);
                      v2338 = v2337;
                      v2339 = sub_1C6366480(v256, (uint64_t)v247, v2445, (uint64_t)&v2509, (uint64_t)v2529[0], (uint64_t)v2529[1]);
                    }
                    else
                    {
                      v2413 = sub_1C6366544(v256, (uint64_t)v244, v246, (uint64_t)&v2509, (uint64_t)v2333, (uint64_t)v2028);
                      v2338 = v2341;
                      v2339 = sub_1C6366544(v256, (uint64_t)v247, v2445, (uint64_t)&v2509, (uint64_t)v2529[0], (uint64_t)v2529[1]);
                    }
                    v2342 = v2339;
                    v2407 = v2340;
                    ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy((uint64_t *)v10, (uint64_t)v2529[0], (uint64_t)v2529[1], *(_QWORD *)(**(_QWORD **)(v256 + 40) + 40) + 272, 1);
                    v2402 = v2344;
                    v2403 = ShiftAmountTy;
                    if ((v255 & 0x5E) == 0x5E)
                    {
                      v2399 = v2529[1];
                      v2400 = (llvm *)v2529[0];
                      v2346 = v246 & 0xFFFFFFFF00000000;
                      v2347 = v246 & 0xFFFFFFFF00000000 | v2338;
                      v2348 = sub_1C6366AB4(v256, 1, (const llvm::APInt *)&v2509, ShiftAmountTy, v2344, 0, 0);
                      v2351 = *(_QWORD *)(v256 + 832);
                      v2352 = v2342;
                      if (v2351)
                        LOWORD(v2351) = *(_WORD *)(v2351 + 8);
                      v2353 = v255 & 0x5E;
                      v2354 = sub_1C5D56C70(v256, 175, (const llvm::APInt *)&v2509, v2400, (uint64_t)v2399, v2413, v2347, v2350, (uint64_t)v2348, v2349, v2351);
                      v2338 = v2355;
                    }
                    else
                    {
                      v2352 = v2342;
                      v2353 = v255 & 0x5E;
                      v2346 = v246 & 0xFFFFFFFF00000000;
                      v2354 = (uint64_t *)v2413;
                    }
                    v8 = v2456;
                    v2356 = *(_QWORD *)(v256 + 832);
                    if (v2356)
                      LOWORD(v2356) = *(_WORD *)(v2356 + 8);
                    v2357 = sub_1C5D58E08(v256, v255, (const llvm::APInt *)&v2509, (llvm *)v2529[0], (uint64_t)v2529[1], (uint64_t)v2354, v2338 | v2346, v2345, v2352, v2445 & 0xFFFFFFFF00000000 | v2407, (uint64_t)v249, v2427, SHIDWORD(v2427), v2356);
                    v2359 = v2358;
                    if (v2353 == 94)
                    {
                      if (v2441 == 92)
                        v2360 = 176;
                      else
                        v2360 = 177;
                      v2361 = (llvm *)v2529[0];
                      v2362 = v2529[1];
                      v2363 = sub_1C6366AB4(v256, 1, (const llvm::APInt *)&v2509, v2403, v2402, 0, 0);
                      v2366 = *(_QWORD *)(v256 + 832);
                      if (v2366)
                        LOWORD(v2366) = *(_WORD *)(v2366 + 8);
                      v2357 = sub_1C5D56C70(v256, v2360, (const llvm::APInt *)&v2509, v2361, (uint64_t)v2362, (uint64_t)v2357, v2359, v2365, (uint64_t)v2363, v2364, v2366);
                      v2359 = v2359 & 0xFFFFFFFF00000000 | v2367;
                    }
                    v264 = sub_1C6366544(v256, (uint64_t)v2357, v2359, (uint64_t)&v2509, (uint64_t)v2538[0], (uint64_t)v2538[1]);
                    v266 = v2368;
                    v267 = v2414;
LABEL_1697:
                    v2538[0] = v8;
LABEL_1698:
                    v760 = (uint64_t *)(v267 + 8);
LABEL_1231:
                    v1193 = v2538;
LABEL_1232:
                    v1739 = sub_1C6364290(v760, v1193);
                    v1739[1] = v264;
                    *((_DWORD *)v1739 + 4) = v266;
                    goto LABEL_1323;
                  case 63:
                    v2027 = 0;
                    v2028 = 0;
                    v2029 = 6;
                    goto LABEL_1674;
                  case 127:
                    v2027 = 0;
                    v2028 = 0;
                    v2029 = 7;
                    goto LABEL_1674;
                }
              }
              ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(v2023, (llvm::LLVMContext *)(v2026 + 1));
              v2028 = v2382;
              v2027 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
              v2029 = ExtendedIntegerVT;
              goto LABEL_1674;
            }
            LOBYTE(v2030) = sub_1C47F37A0((unsigned __int8 *)v2538);
            v2032 = 0;
            v2031 = 0;
          }
          else
          {
            if (*((_BYTE *)v2538[1] + 8) == 13)
            {
              v2024 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2538);
              goto LABEL_1511;
            }
            v2030 = llvm::EVT::getEVT(*((llvm::EVT **)v2538[1] + 3), 0, (BOOL)v258);
            v2032 = v2030 & 0xFFFFFFFFFFFFFF00;
          }
          v2529[0] = (void *)(v2032 | v2030);
          v2529[1] = v2031;
          if ((_BYTE)v2030)
            v2033 = sub_1C47A8C74((unsigned __int8 *)v2529);
          else
            v2033 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2529);
          v2035 = v2033;
          if ((_DWORD)v2034 == 1)
          v2036 = v2035;
          if (v2035 <= 30)
          {
            switch(v2035)
            {
              case 0:
                v2038 = 2;
                v2037 = 0;
                goto LABEL_1677;
              case 15:
                v2036 = 0;
                v2037 = 0;
                v2038 = 4;
                goto LABEL_1677;
              case 7:
                v2036 = 0;
                v2037 = 0;
                v2038 = 3;
                goto LABEL_1677;
            }
          }
          else
          {
            switch(v2035)
            {
              case 31:
                v2036 = 0;
                v2037 = 0;
                v2038 = 5;
LABEL_1677:
                v2334 = v2038 | v2036;
                v2529[0] = (void *)(v2038 | v2036);
                v2529[1] = v2037;
                v2335 = (llvm::Type *)sub_1C52B71D4((unsigned __int8 *)v2538);
                v2333 = (void *)sub_1C47AC578(v2023, v2334, (uint64_t)v2037, v2335);
                v2028 = v2336;
                goto LABEL_1678;
              case 63:
                v2036 = 0;
                v2037 = 0;
                v2038 = 6;
                goto LABEL_1677;
              case 127:
                v2036 = 0;
                v2037 = 0;
                v2038 = 7;
                goto LABEL_1677;
            }
          }
          v2383 = llvm::EVT::getExtendedIntegerVT(v2023, (llvm::LLVMContext *)(v2035 + 1));
          v2037 = v2384;
          v2036 = v2383 & 0xFFFFFFFFFFFFFF00;
          v2038 = v2383;
          goto LABEL_1677;
        }
      }
LABEL_267:
      v263 = *(_QWORD *)(v256 + 832);
      if (v263)
        LOWORD(v263) = *(_WORD *)(v263 + 8);
      v264 = (uint64_t)sub_1C5D58E08(v256, v255, (const llvm::APInt *)&v2509, (llvm *)v2538[0], (uint64_t)v2538[1], (uint64_t)v244, v246, v253, (uint64_t)v247, v2445, (uint64_t)v249, v251, SHIDWORD(v251), v263);
      v266 = v265;
      v267 = v2414;
      v8 = v2456;
      goto LABEL_1697;
    case 271:
      v418 = *(_QWORD *)(v9 + 832);
      v2538[0] = sub_1C635C370(v9);
      v2538[1] = v419;
      *(_QWORD *)v2539 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      *(_QWORD *)&v2539[8] = v420;
      v421 = *(_QWORD *)(v418 + 832);
      if (v421)
        v422 = *(unsigned __int16 *)(v421 + 8);
      else
        v422 = 0;
      v1583 = sub_1C636D0C8(v418, (const char *)0xD6, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t *)v2538, 2, v422);
      v1585 = v1584;
      v2538[0] = v8;
      v1586 = sub_1C6364290((uint64_t *)(v9 + 8), v2538);
      v1586[1] = v1583;
      *((_DWORD *)v1586 + 4) = v1585;
      v1587 = *(_QWORD *)(v9 + 832);
      *(_QWORD *)(v1587 + 192) = v1583;
      *(_DWORD *)(v1587 + 200) = 0;
      goto LABEL_1323;
    case 274:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v815;
      v816 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v818 = v406[5] + 16 * v408;
      v413 = *(llvm **)v818;
      v414 = *(_QWORD *)(v818 + 8);
      v819 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v819)
        LOWORD(v819) = *(_WORD *)(v819 + 8);
      v2394 = v817;
      v2396 = v819;
      v2393 = (uint64_t)v816;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 168;
      goto LABEL_1016;
    case 275:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v810;
      v811 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v813 = v406[5] + 16 * v408;
      v413 = *(llvm **)v813;
      v414 = *(_QWORD *)(v813 + 8);
      v814 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v814)
        LOWORD(v814) = *(_WORD *)(v814 + 8);
      v2394 = v812;
      v2396 = v814;
      v2393 = (uint64_t)v811;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 167;
      goto LABEL_1016;
    case 276:
    case 277:
    case 307:
    case 308:
      v268 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v270 = v269;
      v271 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v273 = v272;
      v274 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v275 = v9;
      v276 = (uint64_t)v274;
      v278 = v277;
      v267 = v275;
      v279 = *(_QWORD *)(v275 + 832);
      v280 = (const char *)sub_1C5D33D64(v6);
      v282 = v268[5] + 16 * v270;
      v283 = *(llvm **)v282;
      v284 = *(_QWORD *)(v282 + 8);
      v285 = *(_QWORD *)(v279 + 832);
      if (v285)
        LOWORD(v285) = *(_WORD *)(v285 + 8);
      v286 = sub_1C5D58E08(v279, v280, (const llvm::APInt *)&v2509, v283, v284, (uint64_t)v268, v270, v281, (uint64_t)v271, v273, v276, v278, SHIDWORD(v278), v285);
LABEL_490:
      v264 = (uint64_t)v286;
      v266 = v287;
      goto LABEL_491;
    case 279:
      v1171 = *(_QWORD *)(v9 + 832);
      v917 = (llvm *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(v1171 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v919 = v1172;
      v920 = v1171;
      v921 = 25;
LABEL_746:
      v220 = sub_1C5D51E4C(v920, v921, (uint64_t)&v2509, v917, v919);
      goto LABEL_1229;
    case 282:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v1139;
      v1140 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1142 = v406[5] + 16 * v408;
      v413 = *(llvm **)v1142;
      v414 = *(_QWORD *)(v1142 + 8);
      v1143 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v1143)
        LOWORD(v1143) = *(_WORD *)(v1143 + 8);
      v2394 = v1141;
      v2396 = v1143;
      v2393 = (uint64_t)v1140;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 86;
      goto LABEL_1016;
    case 283:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v1238;
      v1239 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1241 = v406[5] + 16 * v408;
      v413 = *(llvm **)v1241;
      v414 = *(_QWORD *)(v1241 + 8);
      v1242 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v1242)
        LOWORD(v1242) = *(_WORD *)(v1242 + 8);
      v2394 = v1240;
      v2396 = v1242;
      v2393 = (uint64_t)v1239;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 84;
      goto LABEL_1016;
    case 285:
      v1302 = v9;
      v1303 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40);
      v1304 = sub_1C635C370(v1302);
      v1306 = (int)v1305;
      v2529[0] = v1304;
      v2529[1] = v1305;
      v1307 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 2160))(v10);
      v1308 = *(_QWORD *)(v1302 + 832);
      if (v1307)
      {
        v1309 = v1302;
        v1311 = sub_1C5D21564(v1308, (uint64_t)&v2509, (uint64_t *)v2529);
      }
      else
      {
        v1765 = v18;
        v2455 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(v1308 + 40) + 40) + 272, (uint64_t)*v2456, 0);
        v1767 = v1766;
        v1768 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)v10 + 776))(v10, v1303);
        llvm::DataLayout::getAlignment(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v1302 + 832) + 40) + 40) + 272, *(_QWORD *)v1768);
        v1770 = v1769;
        v1771 = *(_QWORD *)(v1302 + 832);
        v1309 = v1302;
        v1773 = sub_1C635FDC4(v1302, (unsigned __int8 *)v1768);
        *(_QWORD *)&v2460 = v1768 & 0xFFFFFFFFFFFFFFFBLL;
        *((_QWORD *)&v2460 + 1) = 0;
        v2462 = 0;
        v1774 = *(_DWORD *)(*(_QWORD *)v1768 + 8);
        if ((v1774 & 0xFE) == 0x12)
          v1774 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v1768 + 16) + 8);
        v2461 = v1774 >> 8;
        *(_OWORD *)v2538 = 0u;
        *(_OWORD *)v2539 = 0u;
        v1311 = (uint64_t)sub_1C63681B0(v1771, v2455, v1767, (uint64_t)&v2509, (uint64_t)v1304, v1306, (uint64_t)v1773, v1772, &v2460, v1770 | 0x100u, (v1770 | 0x100uLL) >> 32, 4, (uint64_t)v2538, 0);
        v18 = v1765;
      }
      v1775 = v1310;
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 784))(v10))
      {
        v1311 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, unsigned __int8 **))(*(_QWORD *)v10 + 2168))(v10, *v18, v1311, v1775, &v2509);
        LODWORD(v1775) = v1776;
      }
      v1777 = *(_QWORD *)(v1309 + 832);
      *(_QWORD *)(v1777 + 192) = v1304;
      *(_DWORD *)(v1777 + 200) = v1306;
      v2538[0] = v2456;
      v1778 = sub_1C6364290((uint64_t *)(v1309 + 8), v2538);
      v1778[1] = v1311;
      *((_DWORD *)v1778 + 4) = v1775;
      goto LABEL_1323;
    case 286:
      v1312 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 832) + 40) + 56);
      v1313 = sub_1C635C370(v9);
      v1315 = v1314;
      v2555.n128_u64[0] = (unint64_t)v1313;
      v2555.n128_u64[1] = v1314;
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v10 + 2160))(v10))
        v1317 = sub_1C5D21564(*v18, (uint64_t)&v2509, (uint64_t *)&v2555);
      else
        v1317 = (uint64_t)sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1779 = v1316;
      *(_QWORD *)&v2524 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
      v1780 = *((_DWORD *)sub_1C632C0A0((_DWORD *)(*(_QWORD *)(v9 + 912) + 176), &v2524) + 2);
      *(_DWORD *)(v1312 + 64) = v1780;
      v1781 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40);
      v1782 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v1781 + 272, *(unsigned int *)(v1781 + 276));
      v1783 = sub_1C5D406AC(*(_QWORD *)(v9 + 832), v1780, (llvm *)v1782, 0, 0);
      v1784 = v9;
      v1786 = v1785;
      v1787 = v1784;
      v1788 = *(_QWORD *)(v1784 + 832);
      FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(*(_QWORD *)(v1788 + 40) + 432), v1780);
      if (FixedStack)
        v1790 = *((_DWORD *)FixedStack + 3);
      else
        v1790 = 0;
      *(_OWORD *)v2538 = 0u;
      *(_OWORD *)v2539 = 0u;
      v2529[0] = (void *)((unint64_t)FixedStack | 4);
      v2529[1] = 0;
      LODWORD(v2530) = v1790;
      BYTE4(v2530) = 0;
      sub_1C6365BD8(v1788, *(_QWORD *)(*(_QWORD *)(v1317 + 40) + 16 * v1779), *(_QWORD *)(*(_QWORD *)(v1317 + 40) + 16 * v1779 + 8));
      v1033 = sub_1C636B75C(v1788, (uint64_t)v1313, v1315, (uint64_t)&v2509, v1317, v1779, v1783, v1786, (uint64_t)v2529, v1791, 0, 4, (uint64_t)v2538);
      v1035 = v1792;
      v2538[0] = v8;
      v1793 = sub_1C6364290((uint64_t *)(v1787 + 8), v2538);
      v1793[1] = v1033;
      *((_DWORD *)v1793 + 4) = v1035;
      v1037 = *(_QWORD *)(v1787 + 832);
LABEL_1263:
      *(_QWORD *)(v1037 + 192) = v1033;
      *(_DWORD *)(v1037 + 200) = v1035;
      goto LABEL_1323;
    case 287:
      v1259 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v1261 = v1260;
      v443 = *(_QWORD *)(v9 + 832);
      v1263 = sub_1C635C370(v9);
      v1265 = *(_QWORD *)(v443 + 832);
      if (v1265)
        LOWORD(v1265) = *(_WORD *)(v1265 + 8);
      v448 = sub_1C5D56C70(v443, 268, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v1263, v1262, v1264, (uint64_t)v1259, v1261, v1265);
      goto LABEL_1337;
    case 288:
      v876 = sub_1C635C370(v9);
      v878 = v877;
      v879 = sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 832) + 40) + 40) + 272, (uint64_t)*v8, 0);
      v880 = *(_QWORD *)(v9 + 832);
      v882 = sub_1C636A8B4(v880, v879, v881, 1, 0);
      v380 = sub_1C636D648(v880, (const char *)0x10B, (const llvm::APInt *)&v2509, v882, v883, (uint64_t)v876, v878);
LABEL_587:
      v702 = v380;
      v704 = v381;
      v2538[0] = v8;
LABEL_775:
      v705 = (uint64_t *)(v9 + 8);
      v706 = v2538;
LABEL_776:
      v1227 = sub_1C6364290(v705, v706);
      v1227[1] = v702;
      *((_DWORD *)v1227 + 4) = v704;
LABEL_777:
      v1228 = *(_QWORD *)(v9 + 832);
      *(_QWORD *)(v1228 + 192) = v702;
      *(_DWORD *)(v1228 + 200) = 1;
      goto LABEL_1323;
    case 300:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v407;
      v409 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v412 = v406[5] + 16 * v408;
      v413 = *(llvm **)v412;
      v414 = *(_QWORD *)(v412 + 8);
      v415 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v415)
        LOWORD(v415) = *(_WORD *)(v415 + 8);
      v2394 = v410;
      v2396 = v415;
      v2393 = (uint64_t)v409;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 83;
      goto LABEL_1016;
    case 305:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v465;
      v466 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v468 = v406[5] + 16 * v408;
      v413 = *(llvm **)v468;
      v414 = *(_QWORD *)(v468 + 8);
      v469 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v469)
        LOWORD(v469) = *(_WORD *)(v469 + 8);
      v2394 = v467;
      v2396 = v469;
      v2393 = (uint64_t)v466;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 170;
      goto LABEL_1016;
    case 306:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v1323;
      v1324 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v1326 = v406[5] + 16 * v408;
      v413 = *(llvm **)v1326;
      v414 = *(_QWORD *)(v1326 + 8);
      v1327 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v1327)
        LOWORD(v1327) = *(_WORD *)(v1327 + 8);
      v2394 = v1325;
      v2396 = v1327;
      v2393 = (uint64_t)v1324;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 169;
      goto LABEL_1016;
    case 310:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v570;
      v571 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v573 = v406[5] + 16 * v408;
      v413 = *(llvm **)v573;
      v414 = *(_QWORD *)(v573 + 8);
      v574 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v574)
        LOWORD(v574) = *(_WORD *)(v574 + 8);
      v2394 = v572;
      v2396 = v574;
      v2393 = (uint64_t)v571;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 87;
      goto LABEL_1016;
    case 311:
      v406 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v408 = v435;
      v436 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v438 = v406[5] + 16 * v408;
      v413 = *(llvm **)v438;
      v414 = *(_QWORD *)(v438 + 8);
      v439 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 832);
      if (v439)
        LOWORD(v439) = *(_WORD *)(v439 + 8);
      v2394 = v437;
      v2396 = v439;
      v2393 = (uint64_t)v436;
      v416 = *(_QWORD *)(v9 + 832);
      v417 = 85;
      goto LABEL_1016;
    case 313:
      sub_1C6362670(v9, (uint64_t)v8);
      goto LABEL_1323;
    case 314:
      sub_1C6362574(v9, (uint64_t)v8);
      goto LABEL_1323;
    case 315:
      sub_1C6362478(v9, (uint64_t)v8);
      goto LABEL_1323;
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
      v182 = *(_QWORD *)(*(_QWORD *)(v9 + 832) + 24);
      sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v183 = *((unsigned __int8 *)v8 + 16);
      if (v183 == 84)
      {
        v184 = 0;
      }
      else if (v183 == 39)
      {
        v184 = (*((_DWORD *)v8 + 20) + 1);
      }
      else
      {
        v184 = 2;
      }
      v185 = *((_DWORD *)v8 + 5);
      if (v185 < 0
        && (v2389 = &v8[-4 * (v185 & 0x7FFFFFF)], v2390 = (uint64_t)*(v2389 - 1), (v2390 & 0xFFFFFFFF0) != 0))
      {
        v187 = -(uint64_t)(v185 & 0x7FFFFFF);
        v186 = *((_DWORD *)v2389 - 3) - *(_DWORD *)((char *)v2389 - v2390);
      }
      else
      {
        v186 = 0;
        v187 = -(uint64_t)(v185 & 0x7FFFFFF);
      }
      v188 = (uint64_t)&(&v8[4 * -v186])[-4 * v184];
      v189 = &v8[4 * v187];
      if (((v188 - (_QWORD)v189 - 32) & 0x1FFFFFFFC0) != 0)
        sub_1C635FDC4(v9, (unsigned __int8 *)v189[4]);
      v215 = *(_QWORD *)v9;
      v216 = *(_DWORD *)(v9 + 816);
      v2538[0] = 0;
      LODWORD(v2538[1]) = v216;
      if (v215)
      {
        v217 = (void **)(v215 + 48);
        if (v217 != v2538)
        {
          v218 = *v217;
          v2538[0] = v218;
          if (v218)
            llvm::MetadataTracking::track((uint64_t)v2538, (unsigned __int8 *)v218, 2);
        }
      }
      sub_1C47A7FD0(v182, *(_QWORD *)(**(_QWORD **)(*v18 + 40) + 40) + 272, (uint64_t)*v8, 0);
      v2555.n128_u16[0] = 0;
      if (sub_1C4774A9C((uint64_t)v8))
        sub_1C6361CFC(&v2555, (uint64_t)v8);
      __asm { BR              X10 }
      return;
    case 382:
      v1251 = *(_QWORD *)(**(_QWORD **)(*v18 + 40) + 40);
      v1252 = (uint64_t *)v8;
      v1253 = (uint64_t)*(v8 - 4);
      if (v1253 && !*(_BYTE *)(v1253 + 16) && *(uint64_t ***)(v1253 + 24) == v8[9] && *(_DWORD *)(v1253 + 36) == 382)
        goto LABEL_1706;
      v1254 = *((unsigned __int8 *)v8 + 16);
      v1255 = v1254 >= 0x1C;
      v1256 = v1254 - 28;
      if (!v1255)
        v1256 = *((unsigned __int16 *)v8 + 9);
      if (v1256 != 47)
        goto LABEL_1706;
      v1257 = *((_DWORD *)v8 + 5);
      v1258 = (v1257 & 0x40000000) != 0 ? (uint64_t *)*(v8 - 1) : (uint64_t *)&v8[-4 * (v1257 & 0x7FFFFFF)];
      v1951 = *v1258;
      if (!*v1258)
        goto LABEL_1706;
      v1952 = *(unsigned __int8 *)(v1951 + 16);
      if (v1952 != 62 && (v1952 != 5 || *(_WORD *)(v1951 + 18) != 34))
        goto LABEL_1706;
      v1953 = 64;
      if (v1952 != 62)
        v1953 = 24;
      v1954 = *(_DWORD *)(v1951 + 20);
      if ((v1954 & 0x7FFFFFF) != 2)
        goto LABEL_1706;
      v1955 = *(_QWORD *)(v1951 + v1953);
      if (*(_BYTE *)(v1955 + 8) != 19)
        goto LABEL_1706;
      if ((v1954 & 0x40000000) != 0)
        v1956 = *(llvm::Constant ***)(v1951 - 8);
      else
        v1956 = (llvm::Constant **)(v1951 - 64);
      v2325 = *v1956;
      v2326 = *((unsigned __int8 *)*v1956 + 16);
      if (v2325)
        v2327 = v2326 > 0x14;
      else
        v2327 = 1;
      if (v2327)
        goto LABEL_1705;
      if ((llvm::Constant::isNullValue(v2325) & 1) != 0
        || (v1252 = (uint64_t *)v8, (sub_1C4E71060((uint64_t)v2538, v2325) & 1) != 0))
      {
        LODWORD(v2538[1]) = 64;
        v2538[0] = (void *)1;
        v2328 = *(_DWORD *)(v1951 + 20);
        if ((v2328 & 0x40000000) != 0)
          v2329 = *(_QWORD *)(v1951 - 8);
        else
          v2329 = v1951 - 32 * (v2328 & 0x7FFFFFF);
        if (sub_1C4D8A7F0((llvm::APInt *)v2538, *(unsigned __int8 **)(v2329 + 32)))
          sub_1C53E2F94(v1251 + 272, v1955);
        if (LODWORD(v2538[1]) >= 0x41 && v2538[0])
          MEMORY[0x1CAA32F9C](v2538[0], 0x1000C8000313F17);
LABEL_1705:
        v18 = (uint64_t *)(v9 + 832);
        v1252 = (uint64_t *)v8;
      }
LABEL_1706:
      v2369 = (void *)sub_1C47A7FD0((uint64_t)v10, *(_QWORD *)(**(_QWORD **)(*v18 + 40) + 40) + 272, *v1252, 0);
      v2371 = (uint64_t)v2370;
      v2538[0] = v2369;
      v2538[1] = v2370;
      v2372 = *v18;
      if ((_BYTE)v2369)
        v2373 = sub_1C47A8C74((unsigned __int8 *)v2538);
      else
        v2373 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v2538);
      v2375 = v2373;
      if ((_DWORD)v2374 == 1)
      v2506 = v2375;
      if (v2375 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v2505, 1, 0);
      }
      else
      {
        v2376 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2375;
        if (!v2375)
          LOBYTE(v2376) = 0;
        v2505 = (void *)(v2376 & 1);
      }
      v2377 = sub_1C5C9E150(v2372, (const llvm::APInt *)&v2509, (uint64_t)v2369, v2371, (llvm::APInt *)&v2505);
      v2379 = v2378;
      v2529[0] = v1252;
      v2380 = sub_1C6364290((uint64_t *)(v9 + 8), v2529);
      v2380[1] = v2377;
      *((_DWORD *)v2380 + 4) = v2379;
      if (v2506 < 0x41)
        goto LABEL_1323;
      v242 = v2505;
      if (!v2505)
        goto LABEL_1323;
      goto LABEL_259;
    case 383:
      v938 = (uint64_t *)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
      v939 = *v938;
      v940 = (unsigned __int8 *)v938[4];
      v941 = sub_1C635C370(v9);
      v943 = v942;
      v944 = sub_1C5D438A8(*(_QWORD *)(v9 + 832), *(_QWORD *)(v939 + 24));
      v946 = v945;
      v947 = *(_QWORD *)(v9 + 832);
      v948 = sub_1C635FDC4(v9, v940);
      v951 = *(_QWORD *)(v947 + 832);
      if (v951)
        LOWORD(v951) = *(_WORD *)(v951 + 8);
      *(_QWORD *)(v947 + 192) = sub_1C5D58E08(v947, (const char *)0x1C, (const llvm::APInt *)&v2509, (llvm *)1, 0, (uint64_t)v941, v943, v950, v944, v946, (uint64_t)v948, v949, SHIDWORD(v949), v951);
      *(_DWORD *)(v947 + 200) = v952;
      goto LABEL_1323;
    case 384:
      if (*(_DWORD *)(*(_QWORD *)*v18 + 472) != 42)
        goto LABEL_1323;
      v2538[0] = v2539;
      v2538[1] = (void *)0x800000000;
      v120 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v122 = v121;
      v123 = v9;
      v124 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v126 = v125;
      v127 = sub_1C636A8B4(*(_QWORD *)(v123 + 832), 1, 0, 172, 0);
      v2443 = v128;
      v129 = sub_1C635C370(v123);
      v131 = v130;
      v132 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v132 = v2538[1];
      }
      v133 = (uint64_t **)((char *)v2538[0] + 16 * v132);
      *v133 = v120;
      v133[1] = v122;
      v134 = (LODWORD(v2538[1]) + 1);
      LODWORD(v2538[1]) = v134;
      if (v134 >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v134 + 1, 16);
        LODWORD(v134) = v2538[1];
      }
      v135 = (uint64_t **)((char *)v2538[0] + 16 * v134);
      *v135 = v124;
      v135[1] = v126;
      v136 = (LODWORD(v2538[1]) + 1);
      LODWORD(v2538[1]) = v136;
      if (v136 >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v136 + 1, 16);
        LODWORD(v136) = v2538[1];
      }
      v137 = (uint64_t **)((char *)v2538[0] + 16 * v136);
      *v137 = v129;
      v137[1] = v131;
      ++LODWORD(v2538[1]);
      v138 = sub_1C5D61678(*(_QWORD *)(v123 + 832), 39, (uint64_t)&v2509, v127, v2443, (uint64_t *)v2538[0], LODWORD(v2538[1]));
      v139 = *(_QWORD *)(v123 + 832);
      *(_QWORD *)(v139 + 192) = v138;
      *(_DWORD *)(v139 + 200) = 0;
      v2529[0] = v2456;
      v140 = sub_1C6364290((uint64_t *)(v123 + 8), v2529);
      v140[1] = v138;
      *((_DWORD *)v140 + 4) = 0;
LABEL_695:
      v181 = v2538[0];
      if (v2538[0] == v2539)
        goto LABEL_1323;
      goto LABEL_194;
    case 385:
      if (*(_DWORD *)(*(_QWORD *)*v18 + 472) != 42)
        goto LABEL_1323;
      v2538[0] = v2539;
      v2538[1] = (void *)0x800000000;
      v155 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v157 = v156;
      v158 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v160 = v159;
      v161 = v9;
      v162 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 8]);
      v164 = v163;
      v165 = sub_1C636A8B4(*(_QWORD *)(v161 + 832), 1, 0, 172, 0);
      v2429 = v166;
      v167 = sub_1C635C370(v161);
      v169 = v168;
      v170 = v2538[1];
      if (LODWORD(v2538[1]) >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, LODWORD(v2538[1]) + 1, 16);
        v170 = v2538[1];
      }
      v171 = (uint64_t **)((char *)v2538[0] + 16 * v170);
      *v171 = v155;
      v171[1] = v157;
      v172 = (LODWORD(v2538[1]) + 1);
      LODWORD(v2538[1]) = v172;
      if (v172 >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v172 + 1, 16);
        LODWORD(v172) = v2538[1];
      }
      v173 = (uint64_t **)((char *)v2538[0] + 16 * v172);
      *v173 = v158;
      v173[1] = v160;
      v174 = (LODWORD(v2538[1]) + 1);
      LODWORD(v2538[1]) = v174;
      if (v174 >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v174 + 1, 16);
        LODWORD(v174) = v2538[1];
      }
      v175 = (uint64_t **)((char *)v2538[0] + 16 * v174);
      *v175 = v162;
      v175[1] = v164;
      v176 = (LODWORD(v2538[1]) + 1);
      LODWORD(v2538[1]) = v176;
      if (v176 >= HIDWORD(v2538[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2538, (uint64_t)v2539, v176 + 1, 16);
        LODWORD(v176) = v2538[1];
      }
      v177 = (uint64_t **)((char *)v2538[0] + 16 * v176);
      *v177 = v167;
      v177[1] = v169;
      ++LODWORD(v2538[1]);
      v178 = sub_1C5D61678(*(_QWORD *)(v161 + 832), 40, (uint64_t)&v2509, v165, v2429, (uint64_t *)v2538[0], LODWORD(v2538[1]));
      v179 = *(_QWORD *)(v161 + 832);
      *(_QWORD *)(v179 + 192) = v178;
      *(_DWORD *)(v179 + 200) = 0;
      v2529[0] = v2456;
      v180 = sub_1C6364290((uint64_t *)(v161 + 8), v2529);
      v180[1] = v178;
      *((_DWORD *)v180 + 4) = 0;
      v181 = v2538[0];
      if (v2538[0] == v2539)
        goto LABEL_1323;
      goto LABEL_194;
    case 638:
    case 639:
      v336 = *(_QWORD *)(v9 + 832);
      v337 = *(_QWORD *)(v336 + 8);
      v338 = sub_1C635C370(v9);
      v340 = v339;
      v341 = sub_1C635FDC4(v9, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)]);
      v342 = v9;
      v343 = v341;
      v345 = v344;
      v267 = v342;
      sub_1C635FDC4(v342, (unsigned __int8 *)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]);
      v264 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v337 + 88))(v337, v336, &v2509, v338, v340, v343, v345);
      v266 = v346;
      v347 = *(_QWORD *)(v267 + 832);
      *(_QWORD *)(v347 + 192) = v264;
      *(_DWORD *)(v347 + 200) = v346;
LABEL_491:
      v2538[0] = v8;
      goto LABEL_1698;
    default:
      if ((_DWORD)v6 == 11060)
        goto LABEL_1323;
LABEL_56:
      v56 = v9;
      v57 = (uint64_t)v8;
      v58 = v6;
      goto LABEL_57;
  }
}

uint64_t sub_1C5D33D1C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    do
    {
      result = *(_QWORD *)(v1 + 24);
      v2 = *(_QWORD *)(result - 32);
      if (!v2)
        break;
      if (*(_BYTE *)(v2 + 16))
        break;
      if (*(_QWORD *)(v2 + 24) != *(_QWORD *)(result + 72))
        break;
      if (*(_DWORD *)(v2 + 36) != 10)
        break;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

uint64_t sub_1C5D33D64(uint64_t result)
{
  unsigned int v1;

  if ((int)result > 276)
  {
    switch((int)result)
    {
      case 303:
        result = 93;
        break;
      case 304:
        result = 95;
        break;
      case 305:
      case 306:
        __break(1u);
        break;
      case 307:
        result = 89;
        break;
      case 308:
        result = 91;
        break;
      default:
        result = 90;
        break;
    }
  }
  else
  {
    if ((_DWORD)result == 265)
      v1 = 94;
    else
      v1 = 88;
    if ((_DWORD)result == 264)
      return 92;
    else
      return v1;
  }
  return result;
}

uint64_t sub_1C5D33DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  _QWORD *v9;
  llvm *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  const llvm::Instruction *v40;
  uint64_t v41;
  uint64_t result;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  llvm::EVT *v61;
  const char *v62;
  llvm::LLVMContext *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  unsigned __int8 **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ExtendedIntegerVT;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  unsigned __int8 v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  uint64_t v100;
  __int128 v101;

  v4 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v5 = *(unsigned __int8 **)v4;
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(unsigned __int8 **)(v4 + 64);
  if (v7[16] == 16)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = 0;
  if (v8)
  {
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    if (!*v9)
    {
      v10 = (llvm *)sub_1C47A7FD0(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 24), *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 832) + 40) + 40) + 272, *(_QWORD *)a2, (llvm::Type *)1);
      v12 = v11;
      v13 = *(_QWORD *)(a1 + 832);
      v14 = *(_QWORD *)a1;
      v15 = *(_DWORD *)(a1 + 816);
      v99 = 0;
      LODWORD(v100) = v15;
      if (v14)
      {
        v16 = (unsigned __int8 **)(v14 + 48);
        if (v16 != &v99)
        {
          v99 = *v16;
          if (v99)
            llvm::MetadataTracking::track((uint64_t)&v99, v99, 2);
        }
      }
      v17 = sub_1C6366AB4(v13, 0, (const llvm::APInt *)&v99, v10, v12, 0, 0);
      v19 = v18;
      v97 = (unsigned __int8 *)a2;
      v20 = sub_1C6364290((uint64_t *)(a1 + 8), &v97);
      v20[1] = v17;
      *((_DWORD *)v20 + 4) = v19;
      if (v99)
        llvm::MetadataTracking::untrack((uint64_t)&v99, v99);
      return 1;
    }
  }
  v21 = *(_QWORD *)(a1 + 832);
  v84 = *(_QWORD *)(v21 + 8);
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)(a1 + 816);
  v97 = 0;
  v98 = v23;
  v24 = v21;
  v86 = (uint64_t)v5;
  if (v22)
  {
    v25 = (unsigned __int8 **)(v22 + 48);
    v24 = v21;
    if (v25 != &v97)
    {
      v97 = *v25;
      v24 = v21;
      if (v97)
      {
        llvm::MetadataTracking::track((uint64_t)&v97, v97, 2);
        v5 = (unsigned __int8 *)v86;
        v24 = *(_QWORD *)(a1 + 832);
      }
    }
  }
  v27 = *(_QWORD *)(v24 + 192);
  v26 = *(_QWORD *)(v24 + 200);
  v28 = sub_1C635FDC4(a1, v5);
  v30 = v29;
  v85 = v6;
  sub_1C635FDC4(a1, (unsigned __int8 *)v6);
  sub_1C635FDC4(a1, v7);
  v93 = v86 & 0xFFFFFFFFFFFFFFFBLL;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  if (v86)
  {
    v31 = *(_DWORD *)(*(_QWORD *)v86 + 8);
    v32 = v84;
    if ((v31 & 0xFE) == 0x12)
      v31 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v86 + 16) + 8);
    v33 = v31 >> 8;
    v34 = v27;
    v35 = v26;
    v36 = v28;
    v37 = v30;
  }
  else
  {
    v33 = 0;
    v34 = v27;
    v35 = v26;
    v36 = v28;
    v37 = v30;
    v32 = v84;
  }
  v95 = v33;
  v89 = v6 & 0xFFFFFFFFFFFFFFFBLL;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  if (v6)
  {
    v38 = *(_DWORD *)(*(_QWORD *)v6 + 8);
    if ((v38 & 0xFE) == 0x12)
      v38 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
    v39 = v38 >> 8;
  }
  else
  {
    v39 = 0;
  }
  v91 = v39;
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v32 + 40))(&v99, v32, v21, &v97, v34, v35, v36, v37);
  v40 = (const llvm::Instruction *)v97;
  if (v97)
    llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
  v41 = a1;
  if (v99)
  {
    sub_1C6363B30((uint64_t *)a1, (uint64_t *)a2, (uint64_t)v99, v100, 1);
    v43 = v101;
    v44 = *(unsigned int *)(a1 + 112);
    if (v44 >= *(_DWORD *)(a1 + 116))
    {
      v87 = v101;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 104, a1 + 120, v44 + 1, 16);
      v43 = v87;
      LODWORD(v44) = *(_DWORD *)(a1 + 112);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 104) + 16 * v44) = v43;
    ++*(_DWORD *)(a1 + 112);
    return 1;
  }
  if (!v8)
    return 0;
  result = llvm::isOnlyUsedInZeroEqualityComparison((llvm *)a2, v40);
  if ((_DWORD)result)
  {
    v45 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v45 = (_QWORD *)*v45;
    result = 0;
    v46 = 8 * *(_DWORD *)v45;
    if (v46 <= 127)
    {
      if (v46 != 64)
      {
        if (v46 == 16)
        {
          v52 = 4;
        }
        else
        {
          if (v46 != 32)
            return result;
          v52 = 5;
        }
        v88 = v52;
        v49 = v52;
LABEL_60:
        v55 = (uint64_t)sub_1C5D344C8(v86, v52, a1);
        v57 = v56;
        v58 = (uint64_t)sub_1C5D344C8(v85, v49, a1);
        v60 = v59;
        if ((v49 - 15) > 0x9Bu)
          goto LABEL_76;
        v61 = **(llvm::EVT ***)v86;
        v63 = (llvm::LLVMContext *)sub_1C47A8C74(&v88);
        if ((_DWORD)v62 == 1)
        if ((int)v63 > 31)
        {
          switch((_DWORD)v63)
          {
            case 0x20:
              v64 = 0;
              v65 = 0;
              v66 = 5;
LABEL_75:
              v67 = v66 | v64;
              v55 = sub_1C6367DA8(*(_QWORD *)(v41 + 832), v66 | v64, v65, v55, v57);
              v57 = v57 & 0xFFFFFFFF00000000 | v68;
              v58 = sub_1C6367DA8(*(_QWORD *)(v41 + 832), v67, v65, v58, v60);
              v60 = v60 & 0xFFFFFFFF00000000 | v69;
LABEL_76:
              v70 = *(_QWORD **)(v41 + 832);
              v71 = *(_QWORD *)v41;
              v72 = *(_DWORD *)(v41 + 816);
              v97 = 0;
              v98 = v72;
              if (v71)
              {
                v73 = (unsigned __int8 **)(v71 + 48);
                if (v73 != &v97)
                {
                  v97 = *v73;
                  if (v97)
                    llvm::MetadataTracking::track((uint64_t)&v97, v97, 2);
                }
              }
              v74 = sub_1C6367818(v70, 0x16u);
              v77 = v70[104];
              if (v77)
                LOWORD(v77) = *(_WORD *)(v77 + 8);
              v78 = sub_1C5D58E08((uint64_t)v70, (const char *)0xC1, (const llvm::APInt *)&v97, (llvm *)2, 0, v55, v57, v76, v58, v60, v74, v75, SHIDWORD(v75), v77);
              v80 = v79;
              if (v97)
                llvm::MetadataTracking::untrack((uint64_t)&v97, v97);
              sub_1C6363B30((uint64_t *)v41, (uint64_t *)a2, (uint64_t)v78, v80, 0);
              return 1;
            case 0x40:
              v64 = 0;
              v65 = 0;
              v66 = 6;
              goto LABEL_75;
            case 0x80:
              v64 = 0;
              v65 = 0;
              v66 = 7;
              goto LABEL_74;
          }
LABEL_87:
          ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(v61, v63);
          v65 = v82;
          v64 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
          v66 = ExtendedIntegerVT;
          goto LABEL_74;
        }
        switch((_DWORD)v63)
        {
          case 1:
            v64 = 0;
            v65 = 0;
            v66 = 2;
            goto LABEL_75;
          case 0x10:
            v64 = 0;
            v65 = 0;
            v66 = 4;
            break;
          case 8:
            v64 = 0;
            v65 = 0;
            v66 = 3;
            break;
          default:
            goto LABEL_87;
        }
LABEL_74:
        v41 = a1;
        goto LABEL_75;
      }
    }
    else if (v46 != 128 && v46 != 256)
    {
      return result;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 832) + 24);
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 296))(v47);
    if (!v48)
      return 0;
    v49 = v48;
    v50 = *(_DWORD *)(*(_QWORD *)v86 + 8);
    if ((v50 & 0xFE) == 0x12)
      v50 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v86 + 16) + 8);
    v51 = *(_QWORD *)v85;
    if ((*(_DWORD *)(*(_QWORD *)v85 + 8) & 0xFE) == 0x12)
      v51 = **(_QWORD **)(v51 + 16);
    if (!*(_QWORD *)(v47 + 8 * v48 + 96))
      return 0;
    v52 = v48;
    v53 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v47 + 648))(v47, v48, 0, *(_DWORD *)(v51 + 8) >> 8, 0, 0, 0);
    result = 0;
    if (v53)
    {
      v54 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v47 + 648))(v47, v49, 0, v50 >> 8, 0, 0, 0);
      result = 0;
      if (v54)
      {
        v88 = v49;
        goto LABEL_60;
      }
    }
  }
  return result;
}

uint64_t *sub_1C5D344C8(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  const char *v7;
  llvm::FixedVectorType *v8;
  llvm::Type *v9;
  llvm::FixedVectorType *v10;
  llvm::Constant *v11;
  const llvm::DataLayout *v12;
  llvm *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  __int128 v37;
  unsigned int v38;
  char v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v42 = a2;
  if (!a1 || *(unsigned __int8 *)(a1 + 16) > 0x14u)
    goto LABEL_20;
  v5 = **(_QWORD ***)a1;
  if ((a2 - 15) <= 0x9Bu)
    a2 = sub_1C47F37A0(&v42);
  LOBYTE(v43) = a2;
  v6 = sub_1C47A8C74((unsigned __int8 *)&v43);
  LODWORD(v43) = v6;
  if (v6 <= 63)
  {
    if (v6 <= 31)
    {
      switch(v6)
      {
        case 16:
          v8 = (llvm::FixedVectorType *)(*v5 + 1936);
          goto LABEL_13;
        case 8:
          v8 = (llvm::FixedVectorType *)(*v5 + 1912);
          goto LABEL_13;
        case 1:
          v8 = (llvm::FixedVectorType *)(*v5 + 1888);
          goto LABEL_13;
      }
    }
    else if (v6 == 32)
    {
      v8 = (llvm::FixedVectorType *)(*v5 + 1960);
      goto LABEL_13;
    }
  }
  else
  {
    if (v6 == 64)
    {
      v8 = (llvm::FixedVectorType *)(*v5 + 1984);
      goto LABEL_13;
    }
    if (v6 == 128)
    {
      v8 = (llvm::FixedVectorType *)(*v5 + 2008);
      goto LABEL_13;
    }
  }
  v34 = sub_1C5270984(*v5 + 2168, &v43);
  v8 = (llvm::FixedVectorType *)*((_QWORD *)v34 + 1);
  if (!v8)
  {
    v35 = v34;
    v8 = (llvm::FixedVectorType *)sub_1C484358C(*v5 + 2040, 24, 3);
    v36 = v43;
    *(_QWORD *)v8 = v5;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 1) = (v36 << 8) | 0xDu;
    *((_QWORD *)v35 + 1) = v8;
  }
LABEL_13:
  if (v42 - 15 <= 0x9B)
  {
    if (v42 - 120 <= 0x32)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v7);
    v9 = (llvm::Type *)sub_1C47F381C(&v42);
    llvm::FixedVectorType::get(v8, v9);
    v8 = v10;
  }
  v11 = (llvm::Constant *)llvm::PointerType::get(v8, 0);
  v13 = (llvm *)a1;
  if (*(llvm::Constant **)a1 != v11)
    v13 = sub_1C537D3B8((llvm *)0x31, a1, v11, 0);
  v14 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr(v13, v8, (llvm::Type *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a3 + 832) + 40) + 40) + 272), v12);
  if (v14)
    return sub_1C635FDC4(a3, v14);
LABEL_20:
  v15 = *(_QWORD *)(a3 + 840);
  if (v15
    && (*(_QWORD *)&v43 = a1,
        *((_QWORD *)&v43 + 1) = -1,
        v44 = 0u,
        v45 = 0u,
        llvm::AAResults::pointsToConstantMemory(v15, (uint64_t)&v43, 0)))
  {
    v16 = 0;
    v17 = *(_QWORD *)(a3 + 832) + 112;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    v19 = *(_QWORD *)(a3 + 832);
    v17 = *(_QWORD *)(v19 + 192);
    v16 = *(_DWORD *)(v19 + 200);
  }
  v20 = sub_1C635FDC4(a3, (unsigned __int8 *)a1);
  v22 = v21;
  v23 = *(_QWORD *)(a3 + 832);
  v24 = v42;
  v25 = *(_QWORD *)a3;
  v26 = *(_DWORD *)(a3 + 816);
  v40 = 0;
  v41 = v26;
  if (v25)
  {
    v27 = (unsigned __int8 **)(v25 + 48);
    if (v27 != &v40)
    {
      v28 = *v27;
      v40 = v28;
      if (v28)
        llvm::MetadataTracking::track((uint64_t)&v40, v28, 2);
    }
  }
  *(_QWORD *)&v37 = a1 & 0xFFFFFFFFFFFFFFFBLL;
  *((_QWORD *)&v37 + 1) = 0;
  v39 = 0;
  v29 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v29 & 0xFE) == 0x12)
    v29 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
  v38 = v29 >> 8;
  v43 = 0u;
  v44 = 0u;
  v30 = sub_1C63681B0(v23, v24, 0, (uint64_t)&v40, v17, v16, (uint64_t)v20, v22, &v37, 256, 0, 0, (uint64_t)&v43, 0);
  if (v40)
    llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
  if ((v18 & 1) == 0)
  {
    v31 = *(unsigned int *)(a3 + 112);
    if (v31 >= *(_DWORD *)(a3 + 116))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 104, a3 + 120, v31 + 1, 16);
      LODWORD(v31) = *(_DWORD *)(a3 + 112);
    }
    v32 = (_QWORD *)(*(_QWORD *)(a3 + 104) + 16 * v31);
    *v32 = v30;
    v32[1] = 1;
    ++*(_DWORD *)(a3 + 112);
  }
  return v30;
}

BOOL sub_1C5D34860(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = (unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v4 = *v3;
  v5 = v3[4];
  v6 = *(_QWORD *)(a1 + 832);
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(a1 + 816);
  v25 = 0;
  v26 = v9;
  if (v8)
  {
    v10 = (unsigned __int8 **)(v8 + 48);
    if (v10 != &v25)
    {
      v11 = *v10;
      v25 = v11;
      if (v11)
        llvm::MetadataTracking::track((uint64_t)&v25, v11, 2);
    }
  }
  v12 = sub_1C635C370(a1);
  v14 = v13;
  v15 = sub_1C635FDC4(a1, v4);
  v17 = v16;
  sub_1C635FDC4(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned __int8 **, uint64_t *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v7 + 56))(&v27, v7, v6, &v25, v12, v14, v15, v17);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  v18 = v27;
  if (v27)
  {
    v20 = v28;
    v25 = (unsigned __int8 *)a2;
    v21 = sub_1C6364290((uint64_t *)(a1 + 8), &v25);
    v21[1] = v18;
    *((_DWORD *)v21 + 4) = v20;
    v22 = *(_QWORD *)(a1 + 832);
    v23 = v30;
    *(_QWORD *)(v22 + 192) = v29;
    *(_DWORD *)(v22 + 200) = v23;
  }
  return v18 != 0;
}

void sub_1C5D34A4C(uint64_t *a1, const llvm::Instruction *a2, const llvm::Twine *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  int v22;
  int v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  int v26;
  const llvm::Instruction *v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[16];
  void *v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  llvm::LLVMContext::emitError(*(llvm::LLVMContext **)(a1[104] + 56), a2, a3);
  v5 = a1[104];
  v6 = *(_QWORD *)(v5 + 24);
  v31 = v33;
  v32 = 0x100000000;
  llvm::ComputeValueVTs(v6, (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v5 + 40) + 40) + 272), *(_QWORD *)a2, (uint64_t)&v31, 0, 0, 0);
  if ((_DWORD)v32)
  {
    v7 = 0;
    v28 = v30;
    v29 = 0x100000000;
    v8 = 16 * v32;
    do
    {
      v9 = sub_1C61312D0(a1[104], *(llvm **)((char *)v31 + v7), *(_QWORD *)((char *)v31 + v7 + 8));
      v11 = v10;
      v12 = v29;
      if (v29 >= (unint64_t)HIDWORD(v29))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v29 + 1, 16);
        v12 = v29;
      }
      v13 = (char *)v28 + 16 * v12;
      *v13 = v9;
      v13[1] = v11;
      v14 = (v29 + 1);
      LODWORD(v29) = v29 + 1;
      v7 += 16;
    }
    while (v8 != v7);
    v15 = a1[104];
    v16 = (uint64_t *)v28;
    v17 = *a1;
    v18 = *((_DWORD *)a1 + 204);
    v25 = 0;
    v26 = v18;
    if (v17)
    {
      v19 = (unsigned __int8 **)(v17 + 48);
      if (v19 != &v25)
      {
        v20 = *v19;
        v25 = v20;
        if (v20)
          llvm::MetadataTracking::track((uint64_t)&v25, v20, 2);
      }
    }
    v21 = sub_1C5D5C56C(v15, v16, v14, (const llvm::APInt *)&v25);
    v23 = v22;
    v27 = a2;
    v24 = sub_1C6364290(a1 + 1, &v27);
    v24[1] = v21;
    *((_DWORD *)v24 + 4) = v23;
    if (v25)
      llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
    if (v28 != v30)
      free(v28);
  }
  if (v31 != v33)
    free(v31);
}

unint64_t sub_1C5D34C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *v6;
  unint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  llvm *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ExtendedSizeInBits;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  unsigned __int8 *v54;
  int v55;
  __int128 v56;
  __int128 v57;

  v3 = a3;
  v4 = a2;
  *(_QWORD *)&v57 = a2;
  *((_QWORD *)&v57 + 1) = a3;
  v6 = *(uint64_t **)(a1 + 8);
  result = sub_1C47A7FD0(*(_QWORD *)a1, *(_QWORD *)(**(_QWORD **)(v6[104] + 40) + 40) + 272, ***(_QWORD ***)(a1 + 16), 0);
  *(_QWORD *)&v56 = result;
  *((_QWORD *)&v56 + 1) = v8;
  **(_QWORD **)(a1 + 16) += 8;
  v9 = (uint64_t *)(*(_QWORD *)(v4 + 40) + 16 * v3);
  v10 = *v9;
  v11 = result;
  if (result == *v9)
  {
    v12 = v9[1];
    if ((_BYTE)result)
      v13 = 1;
    else
      v13 = v8 == v12;
    if (v13)
    {
LABEL_7:
      if (v11 == v10)
      {
        v14 = *((_QWORD *)&v56 + 1);
        if (v11)
          v15 = 1;
        else
          v15 = *((_QWORD *)&v56 + 1) == v12;
        if (v15)
          goto LABEL_61;
      }
      else
      {
        if (v11)
        {
          v16 = (v11 - 120) >= 0x20 && (v11 - 2) >= 6;
          if (v16 && (v11 - 15) >= 0x3C)
            goto LABEL_61;
          goto LABEL_26;
        }
        v14 = *((_QWORD *)&v56 + 1);
      }
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        v17 = *(unsigned __int8 *)(**(_QWORD **)(v14 + 16) + 8);
      else
        v17 = *(_DWORD *)(v14 + 8);
      if (v17 != 13)
        goto LABEL_61;
LABEL_26:
      if ((_BYTE)v10)
      {
        v18 = v10 - 120 >= 0x20 && v10 - 2 >= 6;
        if (v18 && v10 - 15 >= 0x3C)
          goto LABEL_61;
      }
      else
      {
        if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12)
          v19 = *(unsigned __int8 *)(**(_QWORD **)(v12 + 16) + 8);
        else
          v19 = *(_DWORD *)(v12 + 8);
        if (v19 != 13)
          goto LABEL_61;
      }
      v20 = v6[104];
      v21 = *v6;
      v22 = *((_DWORD *)v6 + 204);
      v54 = 0;
      v55 = v22;
      if (v21)
      {
        v23 = (unsigned __int8 **)(v21 + 48);
        if (v23 != &v54)
        {
          v24 = *v23;
          v54 = v24;
          if (v24)
          {
            llvm::MetadataTracking::track((uint64_t)&v54, v24, 2);
            v4 = v57;
          }
        }
      }
      v26 = *((_QWORD *)&v56 + 1);
      v25 = (llvm *)v56;
      v27 = *((_QWORD *)&v57 + 1);
      v28 = *(_QWORD *)(v20 + 832);
      if (v28)
        v29 = *(_WORD *)(v28 + 8);
      else
        v29 = 0;
      v30 = v20;
      v31 = 201;
      v32 = v4;
      goto LABEL_59;
    }
  }
  else if ((_BYTE)result)
  {
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v56);
    goto LABEL_48;
  }
  ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
LABEL_48:
  v35 = ExtendedSizeInBits;
  v36 = v34;
  result = (unint64_t)sub_1C6131A64((unsigned int *)&v57);
  if (v35 != result || v36 != v37)
  {
    v4 = v57;
    v11 = v56;
    v44 = (uint64_t *)(*(_QWORD *)(v57 + 40) + 16 * DWORD2(v57));
    v10 = *v44;
    v12 = v44[1];
    goto LABEL_7;
  }
  v38 = v6[104];
  v39 = *v6;
  v40 = *((_DWORD *)v6 + 204);
  v54 = 0;
  v55 = v40;
  if (v39)
  {
    v41 = (unsigned __int8 **)(v39 + 48);
    if (v41 != &v54)
    {
      v42 = *v41;
      v54 = v42;
      if (v42)
        llvm::MetadataTracking::track((uint64_t)&v54, v42, 2);
    }
  }
  v26 = *((_QWORD *)&v56 + 1);
  v25 = (llvm *)v56;
  v27 = *((_QWORD *)&v57 + 1);
  v32 = v57;
  v43 = *(_QWORD *)(v38 + 832);
  if (v43)
    v29 = *(_WORD *)(v43 + 8);
  else
    v29 = 0;
  v30 = v38;
  v31 = 216;
LABEL_59:
  result = (unint64_t)sub_1C5D52060(v30, v31, (const llvm::APInt *)&v54, v25, v26, v32, v27, v29);
  *(_QWORD *)&v57 = result;
  DWORD2(v57) = v45;
  if (v54)
    result = llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
LABEL_61:
  v46 = *(_QWORD *)(a1 + 24);
  v47 = v56;
  v48 = *(unsigned int *)(v46 + 8);
  if (v48 >= *(_DWORD *)(v46 + 12))
  {
    v52 = v56;
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 24), v46 + 16, v48 + 1, 16);
    v47 = v52;
    LODWORD(v48) = *(_DWORD *)(v46 + 8);
  }
  *(_OWORD *)(*(_QWORD *)v46 + 16 * v48) = v47;
  ++*(_DWORD *)(v46 + 8);
  v49 = *(_QWORD *)(a1 + 32);
  v50 = v57;
  v51 = *(unsigned int *)(v49 + 8);
  if (v51 >= *(_DWORD *)(v49 + 12))
  {
    v53 = v57;
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v49, v49 + 16, v51 + 1, 16);
    v50 = v53;
    LODWORD(v51) = *(_DWORD *)(v49 + 8);
  }
  *(_OWORD *)(*(_QWORD *)v49 + 16 * v51) = v50;
  ++*(_DWORD *)(v49 + 8);
  return result;
}

uint64_t sub_1C5D34FA8(uint64_t result, unsigned int a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = a2;
  v9 = result;
  v10 = *(unsigned __int8 *)(result + 16);
  if (v10 == 84)
  {
    v11 = 0;
  }
  else if (v10 == 39)
  {
    v11 = (*(_DWORD *)(result + 80) + 1);
  }
  else
  {
    v11 = 2;
  }
  v12 = 0;
  v13 = *(_DWORD *)(result + 20);
  v14 = -(uint64_t)(v13 & 0x7FFFFFF);
  if (v13 < 0)
  {
    v33 = result - 32 * (v13 & 0x7FFFFFF);
    v34 = *(_QWORD *)(v33 - 8);
    if ((v34 & 0xFFFFFFFF0) != 0)
      v12 = *(_DWORD *)(v33 - 12) - *(_DWORD *)(v33 - v34);
    else
      v12 = 0;
  }
  v15 = (-32 * v11 + 32 * (unint64_t)-v12 - 32 * v14 - 32) >> 5;
  if ((_DWORD)v15 != a2)
  {
    do
    {
      result = (uint64_t)sub_1C635FDC4(a5, *(unsigned __int8 **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32 * v8));
      v16 = result;
      v18 = v17;
      switch(((unsigned __int16)(*(_WORD *)(result + 24) - 11) >> 2) | (unsigned __int16)((*(_WORD *)(result + 24) - 11) << 14))
      {
        case 0:
        case 6:
          v27 = sub_1C6366AB4(*(_QWORD *)(a5 + 832), 2, a3, (llvm *)6, 0, 1, 0);
          v28 = *(unsigned int *)(a4 + 8);
          if (v28 >= *(unsigned int *)(a4 + 12))
          {
            v35 = v26;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v28 + 1, 16);
            v26 = v35;
            v28 = *(unsigned int *)(a4 + 8);
          }
          v29 = (_QWORD *)(*(_QWORD *)a4 + 16 * v28);
          *v29 = v27;
          v29[1] = v26;
          ++*(_DWORD *)(a4 + 8);
          v30 = *(_QWORD *)(v16 + 80);
          v31 = *(_DWORD *)(v30 + 32);
          if (v31 > 0x40)
            v32 = **(_QWORD **)(v30 + 24);
          else
            v32 = (uint64_t)(*(_QWORD *)(v30 + 24) << -(char)v31) >> -(char)v31;
          result = (uint64_t)sub_1C6366AB4(*(_QWORD *)(a5 + 832), v32, a3, (llvm *)6, 0, 1, 0);
          goto LABEL_7;
        case 1:
        case 7:
          v19 = *(_QWORD *)(a5 + 832);
          v20 = *(_DWORD *)(result + 76);
          v21 = *(_QWORD *)(**(_QWORD **)(v19 + 40) + 40);
          v22 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v19 + 24) + 32))(*(_QWORD *)(v19 + 24), v21 + 272, *(unsigned int *)(v21 + 276));
          result = sub_1C5D406AC(v19, v20, (llvm *)v22, 0, 1);
LABEL_7:
          v16 = result;
          v18 = v23;
          break;
        default:
          break;
      }
      v24 = *(unsigned int *)(a4 + 8);
      if (v24 >= *(unsigned int *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v24 + 1, 16);
        v24 = *(unsigned int *)(a4 + 8);
      }
      v25 = (uint64_t *)(*(_QWORD *)a4 + 16 * v24);
      *v25 = v16;
      v25[1] = v18;
      ++*(_DWORD *)(a4 + 8);
      ++v8;
    }
    while ((_DWORD)v15 != v8);
  }
  return result;
}

void *sub_1C5D35240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;

  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1968))(a1, a2, 0);
  if (result)
  {
    v7 = *(unsigned __int16 *)(a2 + 58);
    if ((_DWORD)v7)
    {
      v8 = result;
      if ((_DWORD)v7 == 1)
      {
        v9 = v6;
        v10 = *(unsigned int *)(a3 + 8);
        if (v10 >= *(_DWORD *)(a3 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v10 + 1, 16);
          LODWORD(v10) = *(_DWORD *)(a3 + 8);
        }
        v11 = (_QWORD *)(*(_QWORD *)a3 + 16 * v10);
        *v11 = v8;
        v11[1] = v9;
        ++*(_DWORD *)(a3 + 8);
      }
      else
      {
        v12 = 0;
        v13 = *(_DWORD *)(a3 + 8);
        do
        {
          if (v13 >= *(_DWORD *)(a3 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v13 + 1, 16);
            v13 = *(_DWORD *)(a3 + 8);
          }
          v14 = (_QWORD *)(*(_QWORD *)a3 + 16 * v13);
          *v14 = v8;
          v14[1] = v12;
          v13 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v13;
          ++v12;
        }
        while (v7 != v12);
      }
    }
  }
  return result;
}

void sub_1C5D3533C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  BOOL v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t i;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  llvm::Value *v35;
  _DWORD *v36;
  _DWORD *v37;
  llvm::Value *v38;
  BOOL v39;
  llvm::Type **v40;
  llvm::Type *v41;
  int v42;
  uint64_t v43;
  llvm::Value **v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  char v53;
  llvm::Type *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned int v61;
  llvm::Type **v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ParamByValType;
  uint64_t v73;
  uint64_t v74;
  llvm::AttributeList *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t PointeeInMemoryValueType;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  const char *v94;
  char v95;
  char v96;
  int ParamStackAlignment;
  int v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  _OWORD *v112;
  _OWORD *v113;
  __int128 v114;
  __int128 v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  llvm::DataLayout *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int IncompleteVirtualRegister;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 *v163;
  unsigned __int8 *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  _BOOL4 v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  int v186;
  llvm *v187;
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t **v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  int v207;
  uint64_t v209;
  int v210;
  uint64_t *v211;
  int v212;
  BOOL v213;
  uint64_t v214;
  int v215;
  uint64_t *v216;
  uint64_t v217;
  unsigned __int8 **v218;
  unsigned __int8 *v219;
  uint64_t *v220;
  int v221;
  int v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned __int8 *v242;
  int v243;
  _QWORD *v244;
  int v245;
  uint64_t v246;
  int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  uint64_t *v262;
  uint64_t **v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _DWORD *v272;
  int *v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  int v279;
  llvm::SmallPtrSetImplBase *v280;
  llvm::DataLayout *v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BOOL4 v287;
  uint64_t v288;
  _QWORD *v289;
  _BOOL4 v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  int v294;
  BOOL v295;
  int v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  unsigned __int8 *v307;
  int v308;
  unsigned __int8 *v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  _BYTE v316[64];
  __int128 v317;
  _BYTE v318[72];
  void *v319;
  uint64_t v320;
  __int128 v321;
  BOOL v322;
  int v323;
  int v324;
  void *v325;
  uint64_t v326;
  __int128 v327;
  char v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  _QWORD v332[99];

  v332[96] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)a1[38];
  v5 = v4[104];
  v6 = *v4;
  LODWORD(v4) = *((_DWORD *)v4 + 204);
  v307 = 0;
  v308 = (int)v4;
  v7 = (unsigned __int8 **)(v6 + 48);
  if (v6)
    v8 = v7 == &v307;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *v7;
    v307 = v9;
    if (v9)
      llvm::MetadataTracking::track((uint64_t)&v307, v9, 2);
  }
  v10 = *(_QWORD *)(**(_QWORD **)(v5 + 40) + 40);
  v330 = v332;
  v331 = 0x1000000000;
  v11 = *(_QWORD *)(a2 + 112);
  if (!v11 || (*(_BYTE *)(v11 + 14) & 2) == 0)
  {
    v281 = (llvm::DataLayout *)(v10 + 272);
    v12 = (unsigned __int8 *)a1[33];
    v286 = v5;
    if (!v12[48])
    {
      v319 = &v321;
      v320 = 0x100000000;
      v13 = a1[43];
      v14 = llvm::PointerType::get(**(llvm::PointerType ***)(*(_QWORD *)(a2 + 24) + 16), (llvm::Type *)*(unsigned int *)(v10 + 276));
      llvm::ComputeValueVTs(v13, v281, v14, (uint64_t)&v319, 0, 0, 0);
      v15 = sub_1C47A8BD8(a1[43], *(llvm::EVT **)(v5 + 56), *(_QWORD *)v319, *((_QWORD *)v319 + 1));
      v16 = *(_OWORD *)v319;
      v325 = (void *)8;
      LODWORD(v326) = 0;
      v328 = 1;
      v329 = 0xFFFFFFFFLL;
      BYTE4(v326) = v15;
      v327 = v16;
      v17 = (__int128 *)sub_1C52B9D4C((uint64_t)&v330, (unint64_t)&v325, 1);
      v18 = (char *)v330 + 48 * v331;
      v19 = *v17;
      v20 = v17[2];
      v18[1] = v17[1];
      v18[2] = v20;
      *v18 = v19;
      LODWORD(v331) = v331 + 1;
      if (v319 != &v321)
        free(v319);
      v12 = (unsigned __int8 *)a1[33];
    }
    v304 = 0;
    v305 = 0;
    v306 = 0;
    v309 = v12;
    v325 = (void *)1;
    for (i = 8; i != 136; i += 16)
      *(void **)((char *)&v325 + i) = (void *)-4096;
    v22 = *(_DWORD *)(*(_QWORD *)v12 + 96);
    v289 = a1;
    v292 = a2;
    if ((v22 & 0x7FFFFFFF) != 0)
    {
      v23 = (8 * v22 / 3u + 1) | ((unint64_t)(8 * v22 / 3u + 1) >> 1);
      v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
      v25 = ((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8);
      v26 = v327;
      if ((v325 & 1) != 0)
        v26 = 8;
      if (v26 <= v25)
      {
        sub_1C5D395A8((uint64_t)&v325, v25 + 1);
        v12 = v309;
      }
    }
    v314 = &v309;
    v315 = (uint64_t)&v325;
    v27 = *(_QWORD *)(*(_QWORD *)v12 + 80);
    if (v27)
      v28 = v27 - 24;
    else
      v28 = 0;
    v29 = v28 + 40;
    v30 = *(_QWORD *)(v28 + 48);
    if (v30 != v28 + 40)
    {
      do
      {
        if (v30)
          v31 = v30 - 24;
        else
          v31 = 0;
        v32 = *(unsigned __int8 *)(v31 + 16);
        if (v32 == 61)
          v33 = v31;
        else
          v33 = 0;
        if (v30 && v32 == 61)
        {
          v34 = (_DWORD *)sub_1C5D39428((uint64_t)&v314, *(llvm::Value **)(v33 - 64));
          if (v34)
            *v34 = 1;
          v35 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v33 - 32));
          v36 = (_DWORD *)sub_1C5D39428((uint64_t)&v314, v35);
          if (!v36)
            goto LABEL_55;
          v37 = v36;
          if (*v36)
            goto LABEL_55;
          v38 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v33 - 64));
          if (v38)
            v39 = *((_BYTE *)v38 + 16) == 21;
          else
            v39 = 0;
          if (!v39)
            goto LABEL_43;
          v40 = (llvm::Type **)v38;
          if ((llvm::Argument::hasPassPointeeByValueCopyAttr(v38) & 1) != 0)
            goto LABEL_43;
          v41 = *v40;
          if ((llvm::Type::isEmptyTy(*v40) & 1) != 0)
            goto LABEL_43;
          v298 = v22;
          sub_1C4768AD0((uint64_t)v281, (uint64_t)v41);
          v293 = v47 + 7;
          v290 = v48 == 1;
          v49 = *((_QWORD *)v35 + 8);
          sub_1C4768AD0((uint64_t)v281, v49);
          v51 = (unint64_t)(v50 + 7) >> 3;
          v287 = v52 == 1;
          llvm::DataLayout::getAlignment((uint64_t)v281, v49);
          if ((((1 << v53) + v51 - 1) & -(1 << v53)) != v293 >> 3 || ((v290 ^ v287) & 1) != 0)
            goto LABEL_43;
          v54 = *v40;
          sub_1C4768AD0((uint64_t)v281, (uint64_t)*v40);
          v56 = v55;
          v294 = v57;
          sub_1C4768AD0((uint64_t)v281, (uint64_t)v54);
          v8 = v56 == ((v59 + 7) & 0xFFFFFFFFFFFFFFF8);
          v22 = v298;
          if (!v8 || v294 != (v58 == 1))
          {
LABEL_43:
            *v37 = 1;
            goto LABEL_55;
          }
          if (v306)
          {
            v61 = (v306 - 1) & ((v40 >> 4) ^ (v40 >> 9));
            v62 = *(llvm::Type ***)(v304 + 24 * v61);
            if (v40 == v62)
              goto LABEL_43;
            v63 = 1;
            while (v62 != (llvm::Type **)-4096)
            {
              v64 = v61 + v63++;
              v61 = v64 & (v306 - 1);
              v62 = *(llvm::Type ***)(v304 + 24 * v61);
              if (v40 == v62)
                goto LABEL_43;
            }
          }
          *v37 = 2;
          v319 = v40;
          v320 = (uint64_t)v35;
          *(_QWORD *)&v321 = v33;
          sub_1C6225784((uint64_t)&v317, (uint64_t)&v304, (uint64_t *)&v319, &v320);
          if ((_DWORD)v305 == v298)
            break;
        }
        else if ((v32 - 66) >= 0xD && !sub_1C4D99D08(v31) && !sub_1C509DDB0(v31))
        {
          v42 = *(_DWORD *)(v31 + 20);
          if ((v42 & 0x40000000) != 0)
          {
            v44 = *(llvm::Value ***)(v31 - 8);
            v43 = v42 & 0x7FFFFFF;
            if (v43)
            {
LABEL_51:
              v45 = 32 * v43;
              do
              {
                v46 = (_DWORD *)sub_1C5D39428((uint64_t)&v314, *v44);
                if (v46)
                  *v46 = 1;
                v44 += 4;
                v45 -= 32;
              }
              while (v45);
            }
          }
          else
          {
            v43 = v42 & 0x7FFFFFF;
            v44 = (llvm::Value **)(v31 - 32 * v43);
            if (v43)
              goto LABEL_51;
          }
        }
LABEL_55:
        v30 = *(_QWORD *)(v30 + 8);
      }
      while (v30 != v29);
    }
    if ((v325 & 1) == 0)
      MEMORY[0x1CAA32FB4](v326, 8);
    v65 = a2;
    v66 = sub_1C485F330(a2);
    v277 = v67;
    v68 = v289;
    v69 = v286;
    v70 = (uint64_t)v281;
    if (v66 != v67)
    {
      v71 = v66;
      v276 = v304;
      v279 = v306;
      v275 = v306 - 1;
      do
      {
        v297 = *(_DWORD *)(v71 + 32);
        v325 = &v327;
        v326 = 0x400000000;
        llvm::ComputeValueVTs(v68[43], (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v69 + 40) + 40) + 272), *(_QWORD *)v71, (uint64_t)&v325, 0, 0, 0);
        ParamByValType = *(_QWORD *)v71;
        v73 = *(_QWORD *)(v71 + 8);
        v74 = *(_QWORD *)(v71 + 24);
        v77 = *(_QWORD *)(v74 + 112);
        v75 = (llvm::AttributeList *)(v74 + 112);
        v76 = v77;
        if (v77)
        {
          v78 = *(_DWORD *)(v71 + 32) + 2;
          if (v78 < *(_DWORD *)(v76 + 8))
          {
            v137 = *(_QWORD *)(v76 + 8 * v78 + 40);
            if (v137)
            {
              if ((*(_BYTE *)(v137 + 20) & 0x20) != 0)
                ParamByValType = llvm::AttributeList::getParamByValType(v75, *(_DWORD *)(v71 + 32));
            }
          }
        }
        v291 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, BOOL, uint64_t))(*(_QWORD *)v68[43] + 1912))(v68[43], ParamByValType, (*(unsigned __int16 *)(v65 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(_QWORD *)(v65 + 24) + 8) > 0xFFu, v70);
        v285 = v326;
        if ((_DWORD)v326)
        {
          v79 = 0;
          v80 = 0;
          v295 = v73 != 0;
          v284 = v71;
          v274 = v275 & ((v71 >> 4) ^ (v71 >> 9));
          v278 = (uint64_t *)(v276 + 24 * v274);
          do
          {
            v317 = *((_OWORD *)v325 + v79);
            llvm::EVT::getTypeForEVT((llvm::EVT *)&v317, *(llvm::LLVMContext **)(v69 + 56));
            v82 = *(_DWORD *)(*(_QWORD *)v71 + 8);
            v83 = *(_DWORD *)(*(_QWORD *)v71 + 8) >> 8;
            v84 = (unint64_t)(v82 == 15) << 31;
            if (v82 != 15)
              v83 = 0;
            v299 = v83;
            v85 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 112);
            if (v85)
            {
              v86 = (*(_DWORD *)(v71 + 32) + 2);
              if (v86 < *(_DWORD *)(v85 + 8))
              {
                v117 = v85 + 40;
                v118 = *(_QWORD *)(v117 + 8 * v86);
                if (v118)
                  LODWORD(v118) = (*(unsigned __int8 *)(v118 + 20) >> 3) & 1;
                v84 |= v118;
                v119 = *(_QWORD *)(v117 + 8 * v86);
                if (v119)
                  v84 |= 2 * (*(_BYTE *)(v119 + 18) & 1u);
                v120 = *(_QWORD *)(v117 + 8 * v86);
                if (v120 && (*(_BYTE *)(v120 + 13) & 4) != 0)
                {
                  v121 = v84 | 0x20000;
                  if (v79)
                    v121 = v84;
                  v122 = v82 == 16 && (*(_WORD *)(v65 + 18) & 0x3FF0) == 1280;
                  v123 = v121 | 0x10000;
                  if (!v122)
                    v123 = v84;
                  v84 = v123 | 4;
                }
                v124 = *(_QWORD *)(v117 + 8 * v86);
                if (v124)
                  v84 |= (4 * *(unsigned __int8 *)(v124 + 21)) & 8;
                v125 = *(_QWORD *)(v117 + 8 * v86);
                if (v125)
                  v84 |= (unint64_t)(*(_BYTE *)(v125 + 20) & 1) << 12;
                v126 = *(_QWORD *)(v117 + 8 * v86);
                if (v126)
                  v84 |= (unint64_t)(*(_BYTE *)(v126 + 19) & 0x40) << 7;
                v127 = *(_QWORD *)(v117 + 8 * v86);
                if (v127 && *(char *)(v127 + 19) < 0)
                  v84 |= 0x4000uLL;
                v128 = *(_QWORD *)(v117 + 8 * v86);
                if (v128)
                  v84 |= (*(unsigned __int8 *)(v128 + 20) >> 1) & 0x10;
                v129 = *(_QWORD *)(v117 + 8 * v86);
                if (v129)
                  v84 |= (2 * *(unsigned __int8 *)(v129 + 20)) & 0x20;
                v130 = *(_QWORD *)(v117 + 8 * v86);
                if (v130 && *(char *)(v130 + 20) < 0)
                  v84 |= 0x210uLL;
                v131 = *(_QWORD *)(v117 + 8 * v86);
                if (v131 && (*(_BYTE *)(v131 + 21) & 1) != 0)
                  v84 |= 0x410uLL;
              }
            }
            v288 = v79;
            v87 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v68[43] + 608))(v68[43], v81, v70);
            v88 = ((v87 << 23) + 0x800000) & 0xF800000 | v84 & 0xFFFFFFFFF07FFFFFLL;
            if ((v84 & 0x630) != 0)
            {
              PointeeInMemoryValueType = llvm::Argument::getPointeeInMemoryValueType((llvm::Argument *)v71);
              sub_1C4768AD0(v70, PointeeInMemoryValueType);
              v91 = v90;
              v93 = v92 == 1;
              llvm::DataLayout::getAlignment(v70, PointeeInMemoryValueType);
              v96 = v95;
              if (v93)
              ParamStackAlignment = llvm::AttributeList::getParamStackAlignment((llvm::AttributeList *)(*(_QWORD *)(v71 + 24) + 112), *(_DWORD *)(v71 + 32));
              if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
              {
                ParamStackAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*(_QWORD *)(v71 + 24) + 112), *(_DWORD *)(v71 + 32));
                if ((unsigned __int16)ParamStackAlignment <= 0xFFu)
                  ParamStackAlignment = 63
                                      - __clz((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v68[43]+ 576))(v68[43], PointeeInMemoryValueType, v70));
              }
              v88 |= (((1 << v96) + 0xFFFFFFFFLL + ((unint64_t)(v91 + 7) >> 3)) & -(1 << v96)) << 32;
            }
            else
            {
              v98 = v87;
              ParamStackAlignment = llvm::AttributeList::getParamStackAlignment((llvm::AttributeList *)(*(_QWORD *)(v71 + 24) + 112), *(_DWORD *)(v71 + 32));
              if ((ParamStackAlignment & 0xFF00) == 0)
                ParamStackAlignment = v98;
            }
            v99 = v88 & 0xFFFFFFFFFF87FFFFLL | ((((unint64_t)((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19);
            v100 = *(_DWORD *)(v71 + 32) + 2;
            v101 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 112);
            if (v101)
            {
              if (v100 < *(_DWORD *)(v101 + 8))
              {
                v132 = *(_QWORD *)(v101 + 8 * v100 + 40);
                if (v132)
                {
                  if ((*(_BYTE *)(v132 + 14) & 4) != 0)
                    v99 = v88 & 0xFFFFFFFF00000000 | v88 & 0xFF87FFBF | ((((unint64_t)((ParamStackAlignment << 19) + 0x80000) >> 19) & 0xF) << 19) & 0xFFFFFFBF | 0x40;
                }
              }
            }
            if (v291)
              v102 = v99 | 0x20000000;
            else
              v102 = v99;
            if (v279)
            {
              v103 = *v278;
              if (v71 == *v278)
              {
LABEL_99:
                v102 |= 0x40000000uLL;
              }
              else
              {
                v134 = 1;
                v135 = v274;
                while (v103 != -4096)
                {
                  v136 = v135 + v134++;
                  v135 = v136 & v275;
                  v103 = *(_QWORD *)(v276 + 24 * (v136 & v275));
                  if (v71 == v103)
                    goto LABEL_99;
                }
              }
            }
            if (v101)
            {
              if (v100 < *(_DWORD *)(v101 + 8))
              {
                v133 = *(_QWORD *)(v101 + 8 * v100 + 40);
                if (v133)
                  v102 |= (2 * *(unsigned __int8 *)(v133 + 17)) & 0x80;
              }
            }
            LOBYTE(v314) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v68[43] + 592))(v68[43], *(_QWORD *)(v68[37] + 56), (*(unsigned __int16 *)(v65 + 18) >> 4) & 0x3FF, v317, *((_QWORD *)&v317 + 1));
            v104 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v68[43] + 600))(v68[43], *(_QWORD *)(v68[37] + 56), (*(unsigned __int16 *)(v65 + 18) >> 4) & 0x3FF, v317, *((_QWORD *)&v317 + 1));
            if (v104)
            {
              v105 = v104;
              v106 = 0;
              v107 = -v104;
              do
              {
                v108 = (char)v314;
                v109 = v317;
                v110 = sub_1C47A8C74((unsigned __int8 *)&v314);
                v319 = (void *)v102;
                LODWORD(v320) = v299;
                v322 = v295;
                v323 = v297;
                v324 = v80 + v106 * ((unint64_t)(v110 + 7) >> 3);
                BYTE4(v320) = v108;
                v321 = v109;
                if (v105 == 1 || v106)
                {
                  if (v106)
                  {
                    if (v107 + v106 == -1)
                      v111 = 8390656;
                    else
                      v111 = 0x800000;
                    LODWORD(v319) = v111 | v102 & 0xF07FFFFF;
                  }
                }
                else
                {
                  LODWORD(v319) = v102 | 0x100;
                }
                v112 = (_OWORD *)sub_1C52B9D4C((uint64_t)&v330, (unint64_t)&v319, 1);
                v113 = (char *)v330 + 48 * v331;
                v115 = v112[1];
                v114 = v112[2];
                *v113 = *v112;
                v113[1] = v115;
                v113[2] = v114;
                LODWORD(v331) = v331 + 1;
                ++v106;
              }
              while (v107 + v106);
            }
            v116 = v291;
            if (v288 != (_DWORD)v285 - 1)
              v116 = 0;
            if ((v116 & 1) != 0)
              *((_DWORD *)v330 + 12 * v331 - 12) |= 0x10000000u;
            v80 += sub_1C47C1C70((unsigned __int8 *)&v317);
            v79 = v288 + 1;
            v69 = v286;
            v68 = v289;
            v65 = v292;
            v70 = (uint64_t)v281;
            v71 = v284;
          }
          while (v288 + 1 != v285);
        }
        if (v325 != &v327)
          free(v325);
        v71 += 40;
      }
      while (v71 != v277);
    }
    v325 = &v327;
    v326 = 0x800000000;
    v138 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, BOOL, void **, unsigned __int8 **, uint64_t, void **))(*(_QWORD *)v68[43] + 1832))(v68[43], *(_QWORD *)(v69 + 192), *(_QWORD *)(v69 + 200), (*(unsigned __int16 *)(v65 + 18) >> 4) & 0x3FF, *(_DWORD *)(*(_QWORD *)(v65 + 24) + 8) > 0xFFu, &v330, &v307, v69, &v325);
    v140 = v139;
    *(_QWORD *)(v69 + 192) = v138;
    *(_DWORD *)(v69 + 200) = v139;
    if (*(_BYTE *)(v68[33] + 48))
    {
      v282 = (uint64_t *)v138;
      v283 = v139;
      v141 = 0;
    }
    else
    {
      v142 = v138;
      v319 = &v321;
      v320 = 0x100000000;
      v143 = v68[43];
      v144 = *(_QWORD *)(**(_QWORD **)(v69 + 40) + 40);
      v145 = v69;
      v146 = (llvm::DataLayout *)(v144 + 272);
      v147 = llvm::PointerType::get(**(llvm::PointerType ***)(*(_QWORD *)(v65 + 24) + 16), (llvm::Type *)*(unsigned int *)(v144 + 276));
      llvm::ComputeValueVTs(v143, v146, v147, (uint64_t)&v319, 0, 0, 0);
      v148 = *(unsigned __int8 *)v319;
      v149 = sub_1C47A8BD8(v68[43], *(llvm::EVT **)(v68[37] + 56), v148, 0);
      v150 = v149;
      v151 = sub_1C5D11328(v145, (const llvm::APInt *)&v307, (__int128 *)v325, 1, v149, (llvm *)v148, 0, 0, ((unint64_t)*(unsigned __int16 *)(v65 + 18) >> 4) & 0x3FF | 0x100000000, 0);
      v152 = v68;
      v153 = (uint64_t)v151;
      v155 = v154;
      v156 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v152[38] + 832) + 40) + 40);
      v157 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v152[43] + 424))(v152[43], v150, 0);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v156, "", 0);
      *(_QWORD *)(*(_QWORD *)(v156 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v157 & 0xFFFFFFFFFFFFFFFBLL;
      v159 = *(_QWORD *)(v156 + 8);
      if (v159)
        (*(void (**)(uint64_t))(*(_QWORD *)v159 + 24))(v159);
      *(_DWORD *)(v152[33] + 52) = IncompleteVirtualRegister;
      v160 = (uint64_t *)v152[38];
      v161 = v160[104];
      v162 = *v160;
      LODWORD(v160) = *((_DWORD *)v160 + 204);
      *(_QWORD *)&v317 = 0;
      DWORD2(v317) = (_DWORD)v160;
      if (v162)
      {
        v163 = (__int128 *)(v162 + 48);
        if (v163 != &v317)
        {
          v164 = *(unsigned __int8 **)v163;
          *(_QWORD *)&v317 = v164;
          if (v164)
            llvm::MetadataTracking::track((uint64_t)&v317, v164, 2);
        }
      }
      v165 = *(_QWORD *)(v153 + 40) + 16 * v155;
      v166 = sub_1C5D428B0(v161, IncompleteVirtualRegister, *(llvm **)v165, *(_QWORD *)(v165 + 8));
      v169 = *(_QWORD *)(v161 + 832);
      if (v169)
        LOWORD(v169) = *(_WORD *)(v169 + 8);
      v69 = v286;
      v170 = sub_1C5D58E08(v161, (const char *)0x31, (const llvm::APInt *)&v317, (llvm *)1, 0, v142, v140, v168, v166, v167, v153, v155, SHIDWORD(v155), v169);
      v172 = v171;
      if ((_QWORD)v317)
        llvm::MetadataTracking::untrack((uint64_t)&v317, (unsigned __int8 *)v317);
      v283 = v140 & 0xFFFFFFFF00000000 | v172;
      *(_QWORD *)(v286 + 192) = v170;
      *(_DWORD *)(v286 + 200) = v172;
      v68 = v289;
      if (v319 != &v321)
        free(v319);
      v282 = v170;
      v141 = 1;
      v65 = v292;
    }
    v319 = &v321;
    v320 = 0x400000000;
    v301 = 0;
    v302 = 0;
    v303 = 0;
    v173 = sub_1C485F330(v65);
    v300 = v174;
    if (v173 != v174)
    {
      v175 = v173;
      v280 = (llvm::SmallPtrSetImplBase *)(v68 + 45);
      do
      {
        *(_QWORD *)&v317 = v318;
        *((_QWORD *)&v317 + 1) = 0x400000000;
        v314 = v316;
        v315 = 0x400000000;
        llvm::ComputeValueVTs(v68[43], (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v69 + 40) + 40) + 272), *(_QWORD *)v175, (uint64_t)&v314, 0, 0, 0);
        v176 = v315;
        if (!(_DWORD)v315)
          goto LABEL_223;
        v177 = *(_QWORD *)(v175 + 8) != 0;
        if ((*((_BYTE *)v330 + 48 * v141 + 3) & 0x40) != 0)
        {
          v178 = *((_QWORD *)v325 + 2 * v141);
          if (v178)
          {
            if (*(_WORD *)(v178 + 24) == 253)
            {
              v179 = *(_QWORD *)(*(_QWORD *)(v178 + 32) + 40);
              v180 = *(unsigned __int16 *)(v179 + 24);
              if (v180 != 39 && v180 != 15)
                goto LABEL_195;
              v239 = v289[33];
              v309 = 0;
              v240 = v304;
              v241 = v306;
              v242 = sub_1C617A1AC(v304, v306, v175, &v309)
                   ? v309
                   : (unsigned __int8 *)(v240 + 24 * v241);
              v313 = *((_QWORD *)v242 + 1);
              v243 = *(_DWORD *)(v179 + 76);
              v244 = sub_1C632C0A0((_DWORD *)(v239 + 176), &v313);
              v245 = *((_DWORD *)v244 + 2);
              v246 = *(_QWORD *)(*(_QWORD *)(v239 + 8) + 56);
              v247 = *(_DWORD *)(v246 + 32);
              v248 = v247 + v243;
              v249 = *(_QWORD *)(v246 + 8);
              v250 = *(_QWORD *)(v249 + 40 * (v247 + v243) + 8);
              v251 = v249 + 40 * (v247 + v245);
              v253 = *(_QWORD *)(v251 + 8);
              v252 = (_QWORD *)(v251 + 8);
              if (v250 != v253)
                goto LABEL_195;
              if ((__clz(1 << *(_WORD *)(v313 + 18)) ^ 0x3F) <= *(unsigned __int8 *)(v249 + 40 * v248 + 16))
              {
                *v252 = -1;
                *(_BYTE *)(v249 + 40 * v248 + 17) = 0;
                *((_DWORD *)v244 + 2) = v243;
                v311 = v245;
                v312 = v243;
                sub_1C63641A0((uint64_t)&v309, (uint64_t)&v301, &v311, &v312);
                v254 = v320;
                v68 = v289;
                if (v320 >= (unint64_t)HIDWORD(v320))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, (uint64_t)&v321, v320 + 1, 16);
                  v254 = v320;
                }
                v255 = (char *)v319 + 16 * v254;
                *v255 = v178;
                v255[1] = 1;
                LODWORD(v320) = v320 + 1;
                v256 = *((_QWORD *)v242 + 2);
                sub_1C4774094(v280, v256);
                v257 = *(_QWORD *)(v175 + 8);
                if (v257)
                {
                  while (*(_QWORD *)(v257 + 24) == v256)
                  {
                    v257 = *(_QWORD *)(v257 + 8);
                    if (!v257)
                      goto LABEL_196;
                  }
                  v177 = 1;
                }
              }
              else
              {
LABEL_195:
                v68 = v289;
              }
            }
          }
        }
        if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v68[43] + 1768))(v68[43]))
          goto LABEL_199;
LABEL_196:
        v182 = *(_QWORD *)(*(_QWORD *)(v175 + 24) + 112);
        if (!v182)
          goto LABEL_200;
        v183 = *(_DWORD *)(v175 + 32) + 2;
        if (v183 < *(_DWORD *)(v182 + 8))
        {
          v182 = *(_QWORD *)(v182 + 8 * v183 + 40);
          if (v182)
            LODWORD(v182) = *(char *)(v182 + 19) < 0;
        }
        else
        {
LABEL_199:
          LODWORD(v182) = 0;
        }
LABEL_200:
        v296 = v182;
        if (v177)
          v184 = 1;
        else
          v184 = v182;
        if ((v184 & 1) == 0)
        {
          v201 = v68[38];
          v202 = (uint64_t *)((char *)v325 + 16 * v141);
          v203 = *v202;
          v204 = v202[1];
          v309 = (unsigned __int8 *)v175;
          v205 = sub_1C6364290((uint64_t *)(v201 + 32), &v309);
          v205[1] = v203;
          *((_DWORD *)v205 + 4) = v204;
          v206 = *((_QWORD *)v325 + 2 * v141);
          v207 = *(unsigned __int16 *)(v206 + 24);
          if (v207 == 39 || v207 == 15)
          {
            v209 = v68[33];
            v210 = *(_DWORD *)(v206 + 76);
            v309 = (unsigned __int8 *)v175;
            *((_DWORD *)sub_1C61AC530((uint64_t *)(v209 + 200), &v309) + 2) = v210;
          }
        }
        v185 = 0;
        v186 = v176;
        do
        {
          v187 = *(llvm **)((char *)v314 + v185);
          v188 = *(_QWORD *)((char *)v314 + v185 + 8);
          v189 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, llvm *, uint64_t))(*(_QWORD *)v68[43] + 592))(v68[43], *(_QWORD *)(v68[37] + 56), (*(unsigned __int16 *)(v292 + 18) >> 4) & 0x3FF, v187, v188);
          v190 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, llvm *, uint64_t))(*(_QWORD *)v68[43] + 600))(v68[43], *(_QWORD *)(v68[37] + 56), (*(unsigned __int16 *)(v292 + 18) >> 4) & 0x3FF, v187, v188);
          if (v184)
          {
            v191 = *(_QWORD *)(*(_QWORD *)(v175 + 24) + 112);
            if (v191 && (v192 = (*(_DWORD *)(v175 + 32) + 2), v192 < *(_DWORD *)(v191 + 8)))
            {
              v199 = v191 + 40;
              v200 = *(_QWORD *)(v199 + 8 * v192);
              if (v200 && (*(_BYTE *)(v200 + 18) & 1) != 0)
              {
                v193 = 3;
              }
              else
              {
                v193 = *(_QWORD *)(v199 + 8 * v192);
                if (v193)
                {
                  if ((*(_BYTE *)(v193 + 20) & 8) != 0)
                    v193 = 4;
                  else
                    v193 = 0;
                }
              }
            }
            else
            {
              v193 = 0;
            }
            v194 = sub_1C5D11328(v286, (const llvm::APInt *)&v307, (__int128 *)v325 + v141, v190, v189, v187, v188, 0, ((unint64_t)*(unsigned __int16 *)(v292 + 18) >> 4) & 0x3FF | 0x100000000, v193);
            v196 = v195;
            v197 = DWORD2(v317);
            if (DWORD2(v317) >= (unint64_t)HIDWORD(v317))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, (uint64_t)v318, DWORD2(v317) + 1, 16);
              v197 = DWORD2(v317);
            }
            v198 = (uint64_t **)(v317 + 16 * v197);
            *v198 = v194;
            v198[1] = v196;
            ++DWORD2(v317);
          }
          v141 += v190;
          v185 += 16;
          --v186;
          v68 = v289;
        }
        while (v186);
        if (!DWORD2(v317))
        {
          v69 = v286;
          goto LABEL_223;
        }
        v211 = (uint64_t *)v317;
        v212 = *(unsigned __int16 *)(*(_QWORD *)v317 + 24);
        v213 = v212 == 39 || v212 == 15;
        v69 = v286;
        if (v213)
        {
          v214 = v289[33];
          v215 = *(_DWORD *)(*(_QWORD *)v317 + 76);
          v309 = (unsigned __int8 *)v175;
          *((_DWORD *)sub_1C61AC530((uint64_t *)(v214 + 200), &v309) + 2) = v215;
          v211 = (uint64_t *)v317;
        }
        v216 = (uint64_t *)v289[38];
        v217 = *v216;
        LODWORD(v216) = *((_DWORD *)v216 + 204);
        v309 = 0;
        LODWORD(v310) = (_DWORD)v216;
        if (v217)
        {
          v218 = (unsigned __int8 **)(v217 + 48);
          if (v218 != &v309)
          {
            v219 = *v218;
            v309 = v219;
            if (v219)
              llvm::MetadataTracking::track((uint64_t)&v309, v219, 2);
          }
        }
        v220 = sub_1C5D5C56C(v286, v211, v176, (const llvm::APInt *)&v309);
        v222 = v221;
        if (v309)
          llvm::MetadataTracking::untrack((uint64_t)&v309, v309);
        v223 = v289[38];
        v309 = (unsigned __int8 *)v175;
        v224 = sub_1C6364290((uint64_t *)(v223 + 8), &v309);
        v224[1] = v220;
        *((_DWORD *)v224 + 4) = v222;
        if ((*(_WORD *)(v289[31] + 1020) & 0x800) == 0 && *((_WORD *)v220 + 12) == 54)
        {
          v225 = *(_QWORD *)(v220[4] + 40 * *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(v286 + 40) + 40) + 272));
          if (v225)
          {
            if (*(_WORD *)(v225 + 24) == 253)
            {
              v226 = *(_QWORD *)(*(_QWORD *)(v225 + 32) + 40);
              v227 = *(unsigned __int16 *)(v226 + 24);
              if (v227 == 39 || v227 == 15)
              {
                v259 = v289[33];
                v260 = *(_DWORD *)(v226 + 76);
                v309 = (unsigned __int8 *)v175;
                *((_DWORD *)sub_1C61AC530((uint64_t *)(v259 + 200), &v309) + 2) = v260;
              }
            }
          }
        }
        v229 = *((unsigned __int16 *)v220 + 12);
        if (v229 == 4)
        {
          v220 = *(uint64_t **)v220[4];
          v229 = *((unsigned __int16 *)v220 + 12);
        }
        v230 = v296;
        if (v229 != 50)
          v230 = 0;
        if (v230 != 1)
          goto LABEL_263;
        v231 = *(_DWORD *)(*(_QWORD *)(v220[4] + 40) + 76);
        if (v231 < 0)
        {
          v232 = v289[34];
          v233 = *(_QWORD *)(v232 + 104);
          v309 = *(unsigned __int8 **)(v289[33] + 640);
          v310 = v233;
          *((_DWORD *)sub_1C62151E0((uint64_t *)(v232 + 32), &v309) + 4) = v231;
          v229 = *((unsigned __int16 *)v220 + 12);
LABEL_263:
          if (v229 == 50)
          {
            v234 = *(_DWORD *)(*(_QWORD *)(v220[4] + 40) + 76);
            if (v234 < 0)
            {
              v258 = (uint64_t *)(v289[33] + 80);
              v309 = (unsigned __int8 *)v175;
              *((_DWORD *)sub_1C6128C08(v258, &v309) + 2) = v234;
              goto LABEL_223;
            }
          }
        }
        if ((*(_WORD *)(v289[31] + 1020) & 0x800) == 0)
        {
          v235 = *(_QWORD *)(*(_QWORD *)(v175 + 24) + 80);
          if (v235)
            v236 = v235 - 24;
          else
            v236 = 0;
          v237 = *(_QWORD *)(v175 + 8);
          if (!v237)
            goto LABEL_223;
          while (1)
          {
            v238 = *(_QWORD *)(v237 + 24);
            if (*(_QWORD *)(v238 + 40) != v236 || *(_BYTE *)(v238 + 16) == 31)
              break;
            v237 = *(_QWORD *)(v237 + 8);
            if (!v237)
              goto LABEL_223;
          }
LABEL_275:
          sub_1C6128BA8(v289[33], (const llvm::Value *)v175);
          sub_1C5D152D8(v289[38], (llvm::Type **)v175);
          goto LABEL_223;
        }
        if (*(_QWORD *)(v175 + 8))
          goto LABEL_275;
LABEL_223:
        if (v314 != v316)
          free(v314);
        if ((_BYTE *)v317 != v318)
          free((void *)v317);
        v175 += 40;
      }
      while (v175 != v300);
    }
    v261 = v320;
    v262 = v282;
    if ((_DWORD)v320)
    {
      if (v320 >= HIDWORD(v320))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, (uint64_t)&v321, v320 + 1, 16);
        v261 = v320;
      }
      v263 = (uint64_t **)((char *)v319 + 16 * v261);
      *v263 = v282;
      v263[1] = (uint64_t *)v283;
      v264 = (v320 + 1);
      LODWORD(v320) = v320 + 1;
      v265 = *(_QWORD *)(v69 + 832);
      if (v265)
        v266 = *(unsigned __int16 *)(v265 + 8);
      else
        v266 = 0;
      v262 = sub_1C636D0C8(v69, (const char *)2, (const llvm::APInt *)&v307, (llvm *)1, 0, (uint64_t *)v319, v264, v266);
      v267 = v268;
    }
    else
    {
      v267 = v283;
    }
    *(_QWORD *)(v69 + 192) = v262;
    *(_DWORD *)(v69 + 200) = v267;
    v269 = v68[35];
    v270 = *(unsigned int *)(v269 + 776);
    if ((_DWORD)v270 && (_DWORD)v302)
    {
      v271 = 32 * v270;
      v272 = (_DWORD *)(*(_QWORD *)(v269 + 768) + 16);
      do
      {
        v273 = sub_1C61F5F34(&v301, v272);
        if ((int *)(v301 + 8 * v303) != v273)
          *v272 = v273[1];
        v272 += 8;
        v271 -= 32;
      }
      while (v271);
    }
    (*(void (**)(_QWORD *))(*v68 + 176))(v68);
    MEMORY[0x1CAA32FB4](v301, 4);
    if (v319 != &v321)
      free(v319);
    if (v325 != &v327)
      free(v325);
    MEMORY[0x1CAA32FB4](v304, 8);
    if (v330 != v332)
      free(v330);
  }
  if (v307)
    llvm::MetadataTracking::untrack((uint64_t)&v307, v307);
}

void sub_1C5D36ADC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, llvm::MachineBasicBlock *a5)
{
  llvm::MachineBasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::MachineBasicBlock **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int *v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  llvm::MachineBasicBlock *v45;
  unsigned int **v46;
  _BOOL4 v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  llvm::MachineBasicBlock *v52;
  llvm::MachineBasicBlock *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::MachineBasicBlock ***v78;
  llvm::MachineBasicBlock **v79;
  llvm::MachineBasicBlock *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  int v87;
  llvm::MachineBasicBlock *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int **v92;
  llvm::BasicBlock *v93;
  unint64_t v94;
  llvm::MachineBasicBlock *v95;
  unint64_t IrrLoopHeaderWeight;
  uint64_t v97;
  llvm::MachineBasicBlock *v98;
  unsigned int *v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned __int8 **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  llvm::MachineBasicBlock *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  void *v120;
  uint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  int EdgeProbability;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  _BOOL4 v170;
  llvm::MachineBasicBlock *v171;
  llvm::MachineBasicBlock *v172;
  llvm::MachineBasicBlock *v173;
  llvm::MachineBasicBlock *v174;
  uint64_t v176;
  unint64_t v177;
  uint64_t *v180;
  unsigned __int8 *v181;
  int v182;
  __int128 v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t v186;
  llvm::MachineBasicBlock *v187;
  uint64_t *v188;
  unsigned __int8 *v189;
  int v190;
  unsigned __int8 *v191;
  unsigned int v192;
  unsigned int v193;
  void *v194;
  unsigned int v195;
  unsigned __int8 *v196;
  int v197;

  v5 = a5;
  v6 = *(_QWORD *)(a1 + 912);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(llvm::MachineBasicBlock ***)(*(_QWORD *)a2 + 8);
  v163 = *(_QWORD *)(v6 + 8);
  v166 = v163 + 320;
  if (v8 == (llvm::MachineBasicBlock **)(v163 + 320))
    v9 = 0;
  else
    v9 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(uint64_t **)a2 == a4 && -858993459 * ((unint64_t)(v10 - v7) >> 3) == 1;
  v12 = a1;
  if (v11)
  {
    v13 = *(_QWORD *)(v7 + 8);
    if (v13 == *(_QWORD *)(v7 + 16))
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (v14 == *(_QWORD *)(v10 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(v10 + 24))
      {
        v176 = *(_QWORD *)(v6 + 32);
        v15 = *(unsigned int *)(v14 + 32);
        if (v15 >= 0x41)
        {
          v18 = (char *)operator new[]();
          memcpy(v18, *(const void **)(v14 + 24), ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
          v19 = 0;
          v20 = *(_QWORD *)(v13 + 24);
          v21 = 8 * ((unint64_t)(v15 + 63) >> 6);
          do
          {
            *(_QWORD *)&v18[v19] ^= *(_QWORD *)(v20 + v19);
            v19 += 8;
          }
          while (v21 != v19);
          v22 = 0;
          v23 = 0;
          DWORD2(v183) = v15;
          *(_QWORD *)&v183 = v18;
          v12 = a1;
          do
          {
            v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v18[v22]);
            v24.i16[0] = vaddlv_u8(v24);
            v23 += v24.i32[0];
            v22 += 8;
          }
          while (v21 != v22);
          if (v23 == 1)
            goto LABEL_122;
          MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
        }
        else
        {
          v16 = (int8x8_t)(*(_QWORD *)(v13 + 24) ^ *(_QWORD *)(v14 + 24));
          DWORD2(v183) = *(_DWORD *)(v14 + 32);
          *(int8x8_t *)&v183 = v16;
          v17 = (uint8x8_t)vcnt_s8(v16);
          v17.i16[0] = vaddlv_u8(v17);
          if (v17.u32[0] == 1)
          {
LABEL_122:
            v101 = v12;
            v102 = sub_1C635FDC4(v12, a3);
            v104 = v103;
            v105 = v102[5] + 16 * v103;
            v106 = *(llvm **)v105;
            v107 = *(_QWORD *)(v105 + 8);
            v108 = *(_QWORD *)v101;
            v109 = *(_DWORD *)(v101 + 816);
            v196 = 0;
            v197 = v109;
            if (v108)
            {
              v110 = (unsigned __int8 **)(v108 + 48);
              if (v110 != &v196)
              {
                v196 = *v110;
                if (v196)
                  llvm::MetadataTracking::track((uint64_t)&v196, v196, 2);
              }
            }
            v111 = *(_QWORD *)(a1 + 832);
            v112 = sub_1C63666FC(v111, (llvm::LLVMContext *)&v183, (const llvm::APInt *)&v196, (uint64_t)v106, v107, 0, 0);
            v115 = *(_QWORD *)(v111 + 832);
            if (v115)
              LOWORD(v115) = *(_WORD *)(v115 + 8);
            v180 = sub_1C5D56C70(v111, 172, (const llvm::APInt *)&v196, v106, v107, (uint64_t)v102, v104, v114, v112, v113, v115);
            v174 = v116;
            v117 = a1;
            v118 = *(_QWORD **)(a1 + 832);
            v119 = *(unsigned int *)(v14 + 32);
            if (v119 > 0x40)
            {
              v120 = (void *)operator new[]();
              memcpy(v120, *(const void **)(v14 + 24), ((unint64_t)(v119 + 63) >> 3) & 0x3FFFFFF8);
              v121 = *(uint64_t **)(v13 + 24);
              v122 = (unint64_t)(v119 + 63) >> 6;
              v123 = v120;
              do
              {
                v124 = *v121++;
                *v123++ |= v124;
                --v122;
              }
              while (v122);
              v117 = a1;
            }
            else
            {
              v120 = (void *)(*(_QWORD *)(v13 + 24) | *(_QWORD *)(v14 + 24));
            }
            v195 = v119;
            v194 = v120;
            v125 = sub_1C63666FC((uint64_t)v118, (llvm::LLVMContext *)&v194, (const llvm::APInt *)&v196, (uint64_t)v106, v107, 0, 0);
            v127 = v126;
            v128 = sub_1C6367818(v118, 0x11u);
            v131 = v118[104];
            if (v131)
              LOWORD(v131) = *(_WORD *)(v131 + 8);
            v132 = sub_1C5D58E08((uint64_t)v118, (const char *)0xC1, (const llvm::APInt *)&v196, (llvm *)2, 0, (uint64_t)v180, (uint64_t)v174, v130, v125, v127, v128, v129, SHIDWORD(v129), v131);
            v134 = v133;
            if (v195 >= 0x41 && v194)
              MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
            v135 = *(unsigned int *)(v10 + 32);
            v136 = *(unsigned int *)(v7 + 32);
            v137 = v136 + v135;
            v138 = v136 + v135;
            if (v137 <= 0x80000000)
              v139 = v138;
            else
              v139 = 0x80000000;
            sub_1C635FF50(v117, (llvm::MachineBasicBlock *)a4, *(llvm::MachineBasicBlock **)(v7 + 24), v139);
            if (v176)
              EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v176, a4[2], 0);
            else
              EdgeProbability = -1;
            sub_1C635FF50(v117, (llvm::MachineBasicBlock *)a4, a5, EdgeProbability);
            v141 = *(_QWORD *)(v117 + 832);
            v142 = v117;
            v143 = (unsigned int *)(v117 + 384);
            sub_1C612E234(v143, *(_BYTE **)(v142 + 672), (_BYTE *)(*(_QWORD *)(v142 + 672) + 16 * *(unsigned int *)(v142 + 680)));
            *(_DWORD *)(v142 + 680) = 0;
            v144 = sub_1C5D14AF0((uint64_t *)v142, (uint64_t)v143);
            v146 = v145;
            v147 = sub_1C5D4145C(*(_QWORD *)(v142 + 832), *(_QWORD *)(v7 + 24));
            v150 = *(_QWORD *)(v141 + 832);
            if (v150)
              LOWORD(v150) = *(_WORD *)(v150 + 8);
            v151 = sub_1C5D58E08(v141, (const char *)0x103, (const llvm::APInt *)&v196, (llvm *)1, 0, (uint64_t)v144, v146, v149, (uint64_t)v132, v134, v147, v148, SHIDWORD(v148), v150);
            v153 = v152;
            v154 = *(_QWORD *)(a1 + 832);
            v155 = sub_1C5D4145C(v154, (uint64_t)a5);
            v158 = *(_QWORD *)(v154 + 832);
            if (v158)
              LOWORD(v158) = *(_WORD *)(v158 + 8);
            v159 = sub_1C5D56C70(v154, 256, (const llvm::APInt *)&v196, (llvm *)1, 0, (uint64_t)v151, v153, v157, v155, v156, v158);
            v160 = *(_QWORD *)(a1 + 832);
            *(_QWORD *)(v160 + 192) = v159;
            *(_DWORD *)(v160 + 200) = v161;
            if (v196)
              llvm::MetadataTracking::untrack((uint64_t)&v196, v196);
            if (DWORD2(v183) >= 0x41 && (_QWORD)v183)
              MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
            return;
          }
        }
        v5 = a5;
      }
    }
  }
  v25 = v12;
  if (*(_DWORD *)(*(_QWORD *)(v12 + 824) + 552))
  {
    v26 = *(_QWORD *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 16) + 40;
    v28 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - v26) >> 3));
    v29 = v27 == v26 ? 0 : v28;
    sub_1C5D3AD1C(v26, v27, v29, 1);
    v31 = *(_QWORD *)(a2 + 8);
    v30 = *(_QWORD *)(a2 + 16);
    if (v31 < v30)
    {
      v32 = *(_QWORD *)(a2 + 16);
      while (*(_DWORD *)(v32 - 8) <= *(_DWORD *)(v30 + 32))
      {
        if (!*(_DWORD *)(v32 - 40) && *(_QWORD *)(v32 - 16) == v9)
        {
          v33 = *(_QWORD *)(v32 - 8);
          v34 = *(_OWORD *)(v32 - 40);
          v35 = *(_OWORD *)(v32 - 24);
          v36 = *(_DWORD *)(v30 + 32);
          v37 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)(v32 - 40) = *(_OWORD *)v30;
          *(_OWORD *)(v32 - 24) = v37;
          *(_DWORD *)(v32 - 8) = v36;
          *(_OWORD *)v30 = v34;
          *(_OWORD *)(v30 + 16) = v35;
          *(_DWORD *)(v30 + 32) = v33;
          break;
        }
        v32 -= 40;
        if (v31 >= v32)
          break;
      }
    }
  }
  v38 = *(int **)(a2 + 8);
  v39 = *(_QWORD *)(a2 + 16);
  if (v39 >= (unint64_t)v38)
  {
    v40 = *(_QWORD *)(a2 + 8);
    v41 = *(_DWORD *)(a2 + 40);
    do
    {
      v42 = *(unsigned int *)(v40 + 32);
      v43 = v42 + v41;
      v44 = v42 + v41;
      if (v43 <= 0x80000000)
        v41 = v44;
      else
        v41 = 0x80000000;
      v40 += 40;
    }
    while (v39 >= v40);
    v45 = *(llvm::MachineBasicBlock **)a2;
    v162 = (unint64_t)*(unsigned int *)(a2 + 40) >> 1;
    v177 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v46 = (unsigned int **)v45;
      if (v38 == *(int **)(a2 + 16))
      {
        v47 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v5 + 2), 1)[16] == 35;
        v45 = v5;
      }
      else
      {
        v92 = (unsigned int **)v45;
        v93 = (llvm::BasicBlock *)*((_QWORD *)v45 + 2);
        v94 = *(_QWORD *)(v163 + 312);
        if (v94)
          *(_QWORD *)(v163 + 312) = *(_QWORD *)v94;
        else
          v94 = sub_1C484358C(v163 + 128, 232, 3);
        *(_QWORD *)v94 = 0;
        *(_QWORD *)(v94 + 8) = 0;
        *(_QWORD *)(v94 + 16) = v93;
        *(_DWORD *)(v94 + 24) = -1;
        *(_QWORD *)(v94 + 48) = (v94 + 48) | 4;
        *(_QWORD *)(v94 + 56) = v94 + 48;
        *(_BYTE *)(v94 + 144) = 0;
        *(_OWORD *)(v94 + 64) = 0u;
        *(_OWORD *)(v94 + 80) = 0u;
        *(_OWORD *)(v94 + 96) = 0u;
        *(_OWORD *)(v94 + 112) = 0u;
        *(_OWORD *)(v94 + 121) = 0u;
        *(_QWORD *)(v94 + 160) = 0;
        *(_QWORD *)(v94 + 168) = 0;
        *(_QWORD *)(v94 + 152) = 0;
        *(_BYTE *)(v94 + 176) = 0;
        *(_DWORD *)(v94 + 187) = 0;
        *(_QWORD *)(v94 + 180) = 0;
        *(_QWORD *)(v94 + 192) = 0;
        *(_DWORD *)(v94 + 199) = 0;
        *(_QWORD *)(v94 + 216) = 0;
        *(_QWORD *)(v94 + 224) = 0;
        *(_QWORD *)(v94 + 208) = 0;
        *(_QWORD *)(v94 + 32) = v163;
        *(_QWORD *)(v94 + 40) = v94;
        v95 = (llvm::MachineBasicBlock *)v94;
        if (v93)
        {
          IrrLoopHeaderWeight = llvm::BasicBlock::getIrrLoopHeaderWeight(v93);
          v94 = (unint64_t)v95;
          *((_QWORD *)v95 + 17) = IrrLoopHeaderWeight;
          *((_QWORD *)v95 + 18) = v97;
        }
        llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v166, v94);
        v98 = *v8;
        *(_QWORD *)v95 = *v8;
        *((_QWORD *)v95 + 1) = v8;
        *((_QWORD *)v98 + 1) = v95;
        *v8 = v95;
        sub_1C635FFB4(v25, a3);
        v45 = v95;
        v47 = 0;
        v39 = v177;
        v46 = v92;
      }
      v48 = v38[8];
      if (v41 >= v48)
        v41 -= v48;
      else
        v41 = 0;
      v49 = *v38;
      if (!*v38)
      {
        v59 = (uint64_t *)v46;
        v60 = *((_QWORD *)v38 + 1);
        v61 = *((_QWORD *)v38 + 2);
        if (v60 == v61)
          v62 = a3;
        else
          v62 = (unsigned __int8 *)*((_QWORD *)v38 + 1);
        if (v60 == v61)
          v63 = 0;
        else
          v63 = a3;
        if (v60 == v61)
          v64 = 17;
        else
          v64 = 21;
        if (v47)
          v65 = 15;
        else
          v65 = v64;
        v66 = *((_QWORD *)v38 + 3);
        v67 = *(_QWORD *)v25;
        v68 = *(_DWORD *)(v25 + 816);
        v181 = 0;
        v182 = v68;
        if (!v67 || (v69 = (unsigned __int8 **)(v67 + 48), v69 == &v181))
        {
          v70 = 0;
        }
        else
        {
          v70 = *v69;
          v181 = v70;
          if (v70)
          {
            v172 = v45;
            v71 = v62;
            llvm::MetadataTracking::track((uint64_t)&v181, v70, 2);
            v62 = v71;
            v45 = v172;
            v48 = v38[8];
            v70 = v181;
          }
        }
        LODWORD(v183) = v65;
        *((_QWORD *)&v183 + 1) = v62;
        v184 = v63;
        v185 = v61;
        v186 = v66;
        v88 = v45;
        v187 = v45;
        v188 = v59;
        v189 = v70;
        if (v70)
        {
          llvm::MetadataTracking::track((uint64_t)&v189, v70, 2);
          v190 = v182;
          v191 = 0;
          v192 = v48;
          v193 = v41;
          v39 = v177;
          if (v181)
            llvm::MetadataTracking::untrack((uint64_t)&v181, v181);
        }
        else
        {
          v190 = v182;
          v191 = 0;
          v192 = v48;
          v193 = v41;
          v39 = v177;
        }
        if (v59 == a4)
        {
          sub_1C63600E8(v25, (uint64_t)&v183, (uint64_t)a4);
        }
        else
        {
          v89 = *(_QWORD *)(v25 + 856);
          v90 = *(_QWORD *)(v89 + 16);
          if (v90 < *(_QWORD *)(v89 + 24))
            v91 = sub_1C6270B40(v90, &v183) + 88;
          else
            v91 = sub_1C5509B18((__int128 **)(v89 + 8), &v183);
          *(_QWORD *)(v89 + 16) = v91;
        }
        v45 = v88;
        if (v191)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v191, v191);
          v45 = v88;
        }
        if (v189)
        {
          llvm::MetadataTracking::untrack((uint64_t)&v189, v189);
          v45 = v88;
        }
        goto LABEL_99;
      }
      if (v49 == 2)
      {
        v170 = v47;
        v173 = v45;
        v72 = v25;
        v73 = (uint64_t *)v46;
        v74 = v38[6];
        v75 = *(_QWORD *)(*(_QWORD *)(v72 + 856) + 56);
        v168 = v75 + 192 * v74;
        v76 = *(unsigned int *)(v168 + 72);
        if ((_DWORD)v76)
        {
          v77 = 32 * v76;
          v78 = (llvm::MachineBasicBlock ***)(*(_QWORD *)(v168 + 64) + 8);
          do
          {
            v79 = *v78;
            v78 += 4;
            llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v166, (uint64_t)v79);
            v80 = *v8;
            *v79 = *v8;
            v79[1] = (llvm::MachineBasicBlock *)v8;
            *((_QWORD *)v80 + 1) = v79;
            *v8 = (llvm::MachineBasicBlock *)v79;
            v77 -= 32;
          }
          while (v77);
        }
        v81 = v75 + 192 * v74;
        *(_DWORD *)(v81 + 180) = v41;
        v82 = (_DWORD *)(v81 + 180);
        *(_QWORD *)(v82 - 33) = v73;
        v45 = v173;
        *(_QWORD *)(v82 - 31) = v173;
        if (!*((_BYTE *)v82 - 134))
        {
          v83 = v75 + 192 * v74;
          v84 = *(unsigned int *)(v83 + 176);
          v85 = v84 + v162;
          v86 = v84 + v162;
          if (v85 > 0x80000000)
            v86 = 0x80000000;
          *(_DWORD *)(v83 + 176) = v86;
          v87 = v41 - v162;
          if (v41 < v162)
            v87 = 0;
          *v82 = v87;
        }
        v39 = v177;
        if (v170)
          *(_BYTE *)(v75 + 192 * v74 + 184) = 1;
        v11 = v73 == a4;
        v25 = a1;
        if (v11)
        {
          sub_1C636172C(a1, v168, (uint64_t)a4);
          v45 = v173;
          *(_BYTE *)(v75 + 192 * v74 + 45) = 1;
        }
        goto LABEL_99;
      }
      if (v49 == 1)
        break;
LABEL_99:
      v38 += 10;
      v5 = a5;
      if ((unint64_t)v38 > v39)
        return;
    }
    v171 = v45;
    v50 = v38[6];
    v167 = *(_QWORD *)(*(_QWORD *)(v25 + 856) + 32);
    v51 = v167 + 80 * v50;
    v52 = *(llvm::MachineBasicBlock **)(v51 + 64);
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(v166, (uint64_t)v52);
    v53 = *v8;
    *(_QWORD *)v52 = *v8;
    *((_QWORD *)v52 + 1) = v8;
    *((_QWORD *)v53 + 1) = v52;
    *v8 = v52;
    v54 = v38[8];
    v55 = *((_QWORD *)v52 + 11);
    v56 = *((_QWORD *)v52 + 12);
    v169 = v50;
    if (v55 == v56)
    {
LABEL_54:
      v58 = v41;
      if (!v47)
      {
LABEL_117:
        if (!*(_BYTE *)(v51 + 49))
          sub_1C635FF50(v25, (llvm::MachineBasicBlock *)v46, v171, v58);
        goto LABEL_119;
      }
    }
    else
    {
      v57 = 0;
      while (*(llvm::MachineBasicBlock **)(v55 + v57) != a5)
      {
        v57 += 8;
        if (v55 + v57 == v56)
          goto LABEL_54;
      }
      if (v54 + v162 <= 0x80000000)
        LODWORD(v54) = v54 + v162;
      else
        LODWORD(v54) = 0x80000000;
      if (v41 >= v162)
        v58 = v41 - v162;
      else
        v58 = 0;
      v99 = (unsigned int *)*((_QWORD *)v52 + 14);
      v100 = (unsigned int *)*((_QWORD *)v52 + 15);
      if (v99 != v100)
        *(unsigned int *)((char *)v99 + (v57 >> 1)) = v162;
      sub_1C50D6C6C(v99, v100);
      if (!v47)
        goto LABEL_117;
    }
    *(_BYTE *)(v51 + 49) = 1;
LABEL_119:
    sub_1C635FF50(v25, (llvm::MachineBasicBlock *)v46, v52, v54);
    sub_1C50D6C6C(v46[14], v46[15]);
    *(_QWORD *)(v51 + 40) = v46;
    v45 = v171;
    *(_QWORD *)(v167 + 80 * v169 + 72) = v171;
    v39 = v177;
    if (v46 == (unsigned int **)a4)
    {
      sub_1C63609DC(v25, v51 + 56, v51, (uint64_t)a4);
      v45 = v171;
      *(_BYTE *)(v51 + 48) = 1;
    }
    goto LABEL_99;
  }
}

uint64_t sub_1C5D37658(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  size_t v136;
  uint64_t v137;
  const void *v138;
  unint64_t v139;
  uint64_t v140;
  llvm::BasicBlock *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _OWORD *v146;
  _OWORD *v147;
  __int128 v148;
  __int128 v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  llvm::BasicBlock *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  _OWORD *v161;
  _OWORD *v162;
  __int128 v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned __int8 **v169;
  unsigned __int8 *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t result;
  unint64_t *v174;
  unsigned __int8 *v180;
  int v181;
  __int128 v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  int v189;
  unsigned __int8 *v190;
  unsigned int v191;
  unsigned int v192;
  void *v193;
  unsigned int v194;
  const void *v195;
  unsigned int v196;

  v6 = a3[1];
  v5 = a3[2];
  v7 = *((unsigned int *)a3 + 10);
  v8 = *(unsigned int *)(v6 + 32);
  if (v8 + (v7 >> 1) <= 0x80000000)
    v9 = v8 + (*((_DWORD *)a3 + 10) >> 1);
  else
    v9 = 0x80000000;
  v10 = *(unsigned int *)(v5 + 32);
  if (v10 + (v7 >> 1) <= 0x80000000)
    v11 = v10 + (*((_DWORD *)a3 + 10) >> 1);
  else
    v11 = 0x80000000;
  v12 = v6 + 40;
  if (v6 + 40 >= v5)
  {
    v14 = 0;
    v15 = a3[1];
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = a3[1];
    do
    {
      if (v9 < v11 || v9 == v11 && (v13 & 1) != 0)
      {
        v16 = *(unsigned int *)(v15 + 72);
        v17 = v16 + v9;
        v18 = v16 + v9;
        if (v17 <= 0x80000000)
          v9 = v18;
        else
          v9 = 0x80000000;
        v15 = v12;
      }
      else
      {
        v19 = *(unsigned int *)(v5 - 8 + 40 * v14--);
        v20 = v19 + v11;
        v21 = v19 + v11;
        if (v20 <= 0x80000000)
          v11 = v21;
        else
          v11 = 0x80000000;
      }
      ++v13;
      v12 = v15 + 40;
    }
    while (v15 + 40 < v5 + 40 * v14);
  }
  while (1)
  {
    v22 = v15;
    v23 = v5 + 40 * v14;
    v24 = -858993459 * ((v15 - v6) >> 3);
    v25 = v24 + 1;
    v26 = 1 - v14;
    v27 = 1 - (int)v14 >= (v24 + 1) ? v24 + 1 : 1 - v14;
    v28 = v25 <= v26 ? 1 - v14 : v25;
    if (v27 > 2 || v28 < 4)
      break;
    if (v25 >= v26)
    {
      if (v15 + 40 == v6)
      {
        v58 = 0;
      }
      else
      {
        v58 = 0;
        v59 = *(_DWORD *)(v15 + 32);
        v60 = v6;
        do
        {
          v61 = *(_DWORD *)(v60 + 32);
          if (v61 == v59)
          {
            v62 = *(_QWORD *)(v60 + 8);
            v63 = *(_QWORD *)(v15 + 8);
            v64 = (_QWORD *)(v63 + 24);
            v65 = *(unsigned int *)(v62 + 32);
            if (v65 > 0x40)
            {
              v71 = *(_QWORD *)(v62 + 24);
              v72 = *(_QWORD *)(v71 + 8 * ((v65 - 1) >> 6)) & (1 << (v65 - 1));
              v73 = *(_DWORD *)(v63 + 32);
              v74 = v73 - 1;
              v75 = *(_QWORD *)(v63 + 24);
              if (v73 >= 0x41)
                v64 = (_QWORD *)(v75 + 8 * (v74 >> 6));
              if ((v72 != 0) == ((*v64 >> v74) & 1))
              {
                v76 = v65 + 63;
                v77 = v75 - 8;
                v78 = (v76 >> 3) & 0x3FFFFFF8;
                v79 = v71 - 8;
                do
                {
                  if (!v78)
                  {
                    v69 = 0;
                    goto LABEL_68;
                  }
                  v80 = *(_QWORD *)(v79 + v78);
                  v81 = *(_QWORD *)(v77 + v78);
                  v78 -= 8;
                }
                while (v80 == v81);
                if (v80 > v81)
                  v69 = 1;
                else
                  v69 = -1;
              }
              else if (v72)
              {
                v69 = -1;
              }
              else
              {
                v69 = 1;
              }
            }
            else
            {
              v66 = -v65;
              v67 = (uint64_t)(*(_QWORD *)(v62 + 24) << v66) >> v66;
              v68 = (uint64_t)(*v64 << v66) >> v66;
              v129 = v67 < v68;
              v69 = v67 > v68;
              if (v129)
                v69 = -1;
            }
LABEL_68:
            v70 = v69 >> 31;
          }
          else
          {
            v70 = v61 > v59;
          }
          v58 += v70;
          v46 = v60 == v15;
          v60 += 40;
        }
        while (!v46);
      }
      if (v14 == 1)
      {
        v14 = 0;
        v15 -= 40;
      }
      else
      {
        v106 = 0;
        v107 = *(_DWORD *)(v15 + 32);
        do
        {
          v108 = *(_DWORD *)(v23 + 32);
          if (v108 == v107)
          {
            v109 = *(_QWORD *)(v23 + 8);
            v110 = *(_QWORD *)(v15 + 8);
            v111 = (_QWORD *)(v110 + 24);
            v112 = *(unsigned int *)(v109 + 32);
            if (v112 > 0x40)
            {
              v118 = *(_QWORD *)(v109 + 24);
              v119 = *(_QWORD *)(v118 + 8 * ((v112 - 1) >> 6)) & (1 << (v112 - 1));
              v120 = *(_DWORD *)(v110 + 32);
              v121 = v120 - 1;
              v122 = *(_QWORD *)(v110 + 24);
              if (v120 >= 0x41)
                v111 = (_QWORD *)(v122 + 8 * (v121 >> 6));
              if ((v119 != 0) == ((*v111 >> v121) & 1))
              {
                v123 = v112 + 63;
                v124 = v122 - 8;
                v125 = (v123 >> 3) & 0x3FFFFFF8;
                v126 = v118 - 8;
                do
                {
                  if (!v125)
                  {
                    v116 = 0;
                    goto LABEL_122;
                  }
                  v127 = *(_QWORD *)(v126 + v125);
                  v128 = *(_QWORD *)(v124 + v125);
                  v125 -= 8;
                }
                while (v127 == v128);
                if (v127 > v128)
                  v116 = 1;
                else
                  v116 = -1;
              }
              else if (v119)
              {
                v116 = -1;
              }
              else
              {
                v116 = 1;
              }
            }
            else
            {
              v113 = -v112;
              v114 = (uint64_t)(*(_QWORD *)(v109 + 24) << v113) >> v113;
              v115 = (uint64_t)(*v111 << v113) >> v113;
              v129 = v114 < v115;
              v116 = v114 > v115;
              if (v129)
                v116 = -1;
            }
LABEL_122:
            v117 = v116 >> 31;
          }
          else
          {
            v117 = v108 > v107;
          }
          v106 += v117;
          v46 = v23 == v5;
          v23 += 40;
        }
        while (!v46);
        v14 -= v106 <= v58;
        v129 = v106 > v58;
        if (v106 > v58)
          v130 = 0;
        else
          v130 = -1;
        v15 += 40 * v130;
        if (v129)
        {
          v23 = v5 + 40 * v14;
          goto LABEL_148;
        }
      }
    }
    else
    {
      if (v14 == 1)
      {
        v30 = 0;
      }
      else
      {
        v30 = 0;
        v82 = v5 + 40 * v14;
        v83 = *(_DWORD *)(v82 + 32);
        v84 = (_QWORD *)(v82 + 8);
        do
        {
          v85 = *(_DWORD *)(v23 + 32);
          if (v85 == v83)
          {
            v86 = *(_QWORD *)(v23 + 8);
            v87 = *v84;
            v88 = (_QWORD *)(*v84 + 24);
            v89 = *(unsigned int *)(v86 + 32);
            if (v89 > 0x40)
            {
              v95 = *(_QWORD *)(v86 + 24);
              v96 = *(_QWORD *)(v95 + 8 * ((v89 - 1) >> 6)) & (1 << (v89 - 1));
              v97 = *(_DWORD *)(v87 + 32);
              v98 = v97 - 1;
              v99 = *(_QWORD *)(v87 + 24);
              if (v97 >= 0x41)
                v88 = (_QWORD *)(v99 + 8 * (v98 >> 6));
              if ((v96 != 0) == ((*v88 >> v98) & 1))
              {
                v100 = v89 + 63;
                v101 = v99 - 8;
                v102 = (v100 >> 3) & 0x3FFFFFF8;
                v103 = v95 - 8;
                do
                {
                  if (!v102)
                  {
                    v93 = 0;
                    goto LABEL_95;
                  }
                  v104 = *(_QWORD *)(v103 + v102);
                  v105 = *(_QWORD *)(v101 + v102);
                  v102 -= 8;
                }
                while (v104 == v105);
                if (v104 > v105)
                  v93 = 1;
                else
                  v93 = -1;
              }
              else if (v96)
              {
                v93 = -1;
              }
              else
              {
                v93 = 1;
              }
            }
            else
            {
              v90 = -v89;
              v91 = (uint64_t)(*(_QWORD *)(v86 + 24) << v90) >> v90;
              v92 = (uint64_t)(*v88 << v90) >> v90;
              v129 = v91 < v92;
              v93 = v91 > v92;
              if (v129)
                v93 = -1;
            }
LABEL_95:
            v94 = v93 >> 31;
          }
          else
          {
            v94 = v85 > v83;
          }
          v30 += v94;
          v46 = v23 == v5;
          v23 += 40;
        }
        while (!v46);
      }
      v15 += 40;
      if (v22 + 40 == v6)
      {
        ++v14;
        v15 = v6;
      }
      else
      {
        v31 = 0;
        v32 = v5 + 40 * v14;
        v33 = *(_DWORD *)(v32 + 32);
        v34 = (_QWORD *)(v32 + 8);
        v35 = v6;
        do
        {
          v36 = *(_DWORD *)(v35 + 32);
          if (v36 == v33)
          {
            v37 = *(_QWORD *)(v35 + 8);
            v38 = *v34;
            v39 = (_QWORD *)(*v34 + 24);
            v40 = *(unsigned int *)(v37 + 32);
            if (v40 > 0x40)
            {
              v47 = *(_QWORD *)(v37 + 24);
              v48 = *(_QWORD *)(v47 + 8 * ((v40 - 1) >> 6)) & (1 << (v40 - 1));
              v49 = *(_DWORD *)(v38 + 32);
              v50 = v49 - 1;
              v51 = *(_QWORD *)(v38 + 24);
              if (v49 >= 0x41)
                v39 = (_QWORD *)(v51 + 8 * (v50 >> 6));
              if ((v48 != 0) == ((*v39 >> v50) & 1))
              {
                v52 = v40 + 63;
                v53 = v51 - 8;
                v54 = (v52 >> 3) & 0x3FFFFFF8;
                v55 = v47 - 8;
                do
                {
                  if (!v54)
                  {
                    v44 = 0;
                    goto LABEL_43;
                  }
                  v56 = *(_QWORD *)(v55 + v54);
                  v57 = *(_QWORD *)(v53 + v54);
                  v54 -= 8;
                }
                while (v56 == v57);
                if (v56 > v57)
                  v44 = 1;
                else
                  v44 = -1;
              }
              else if (v48)
              {
                v44 = -1;
              }
              else
              {
                v44 = 1;
              }
            }
            else
            {
              v41 = -v40;
              v42 = (uint64_t)(*(_QWORD *)(v37 + 24) << v41) >> v41;
              v43 = (uint64_t)(*v39 << v41) >> v41;
              v129 = v42 < v43;
              v44 = v42 > v43;
              if (v129)
                v44 = -1;
            }
LABEL_43:
            v45 = v44 >> 31;
          }
          else
          {
            v45 = v36 > v33;
          }
          v31 += v45;
          v46 = v35 == v22;
          v35 += 40;
        }
        while (!v46);
        if (v31 > v30)
        {
          v23 = v5 + 40 * v14;
          break;
        }
        ++v14;
      }
    }
  }
  v15 = v22;
LABEL_148:
  v131 = *(_QWORD *)(v23 + 8);
  v132 = *a3;
  v174 = *(unint64_t **)(*a3 + 8);
  if (v15 != v6 || *(_DWORD *)v6 || *(_QWORD *)(v6 + 8) != a3[3])
    goto LABEL_157;
  v133 = *(_QWORD *)(v6 + 16);
  v134 = *(unsigned int *)(v133 + 32);
  v196 = v134;
  if (v134 > 0x40)
  {
    v136 = ((unint64_t)(v134 + 63) >> 3) & 0x3FFFFFF8;
    v135 = (void *)operator new[]();
    memcpy(v135, *(const void **)(v133 + 24), v136);
  }
  else
  {
    v135 = *(void **)(v133 + 24);
  }
  v195 = v135;
  llvm::APInt::operator+=((uint64_t)&v195, 1uLL);
  v137 = v196;
  v138 = v195;
  v196 = 0;
  v139 = v131;
  if (v137 > 0x40)
  {
    v150 = memcmp(v195, *(const void **)(v131 + 24), ((unint64_t)(v137 + 63) >> 3) & 0x3FFFFFF8);
    if (v138)
    {
      MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
      if (v196 >= 0x41)
      {
        if (v195)
          MEMORY[0x1CAA32F9C](v195, 0x1000C8000313F17);
      }
    }
    if (v150)
      goto LABEL_156;
LABEL_167:
    v142 = *(_QWORD *)(v6 + 24);
    goto LABEL_168;
  }
  if (v195 == *(const void **)(v131 + 24))
    goto LABEL_167;
LABEL_156:
  v132 = *a3;
LABEL_157:
  v140 = *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8);
  v141 = *(llvm::BasicBlock **)(v132 + 16);
  v142 = *(_QWORD *)(v140 + 312);
  if (v142)
    *(_QWORD *)(v140 + 312) = *(_QWORD *)v142;
  else
    v142 = sub_1C484358C(v140 + 128, 232, 3);
  *(_QWORD *)v142 = 0;
  *(_QWORD *)(v142 + 8) = 0;
  *(_QWORD *)(v142 + 16) = v141;
  *(_DWORD *)(v142 + 24) = -1;
  *(_QWORD *)(v142 + 48) = (v142 + 48) | 4;
  *(_QWORD *)(v142 + 56) = v142 + 48;
  *(_BYTE *)(v142 + 144) = 0;
  *(_OWORD *)(v142 + 64) = 0u;
  *(_OWORD *)(v142 + 80) = 0u;
  *(_OWORD *)(v142 + 96) = 0u;
  *(_OWORD *)(v142 + 112) = 0u;
  *(_OWORD *)(v142 + 121) = 0u;
  *(_QWORD *)(v142 + 160) = 0;
  *(_QWORD *)(v142 + 168) = 0;
  *(_QWORD *)(v142 + 152) = 0;
  *(_BYTE *)(v142 + 176) = 0;
  *(_DWORD *)(v142 + 187) = 0;
  *(_QWORD *)(v142 + 180) = 0;
  *(_QWORD *)(v142 + 192) = 0;
  *(_DWORD *)(v142 + 199) = 0;
  *(_QWORD *)(v142 + 216) = 0;
  *(_QWORD *)(v142 + 224) = 0;
  *(_QWORD *)(v142 + 208) = 0;
  *(_QWORD *)(v142 + 32) = v140;
  *(_QWORD *)(v142 + 40) = v142;
  if (v141)
  {
    *(_QWORD *)(v142 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v141);
    *(_QWORD *)(v142 + 144) = v143;
  }
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 8) + 320, v142);
  v144 = *v174;
  *(_QWORD *)v142 = *v174;
  *(_QWORD *)(v142 + 8) = v174;
  *(_QWORD *)(v144 + 8) = v142;
  *v174 = v142;
  *(_QWORD *)&v182 = v142;
  *((_QWORD *)&v182 + 1) = v6;
  v145 = a3[3];
  v183 = v15;
  v184 = v145;
  v185 = v131;
  LODWORD(v186) = *((_DWORD *)a3 + 10) >> 1;
  v146 = (_OWORD *)sub_1C52B9D4C(a2, (unint64_t)&v182, 1);
  v147 = (_OWORD *)(*(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8));
  v149 = v146[1];
  v148 = v146[2];
  *v147 = *v146;
  v147[1] = v149;
  v147[2] = v148;
  ++*(_DWORD *)(a2 + 8);
  v139 = v131;
  sub_1C635FFB4(a1, a4);
LABEL_168:
  if (v23 == v5 && !*(_DWORD *)v5 && a3[4])
  {
    v151 = *(_QWORD *)(v5 + 16);
    v194 = *(_DWORD *)(v151 + 32);
    if (v194 > 0x40)
    {
      v193 = (void *)operator new[]();
      memcpy(v193, *(const void **)(v151 + 24), (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v193 = *(void **)(v151 + 24);
    }
    llvm::APInt::operator+=((uint64_t)&v193, 1uLL);
    v152 = v194;
    v153 = v193;
    v194 = 0;
    v154 = a3[4];
    if (v152 > 0x40)
    {
      v165 = memcmp(v193, *(const void **)(v154 + 24), ((unint64_t)(v152 + 63) >> 3) & 0x3FFFFFF8);
      if (v153)
      {
        MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
        if (v194 >= 0x41)
        {
          if (v193)
            MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
        }
      }
      if (v165)
        goto LABEL_176;
    }
    else if (v193 != *(void **)(v154 + 24))
    {
      goto LABEL_176;
    }
    v157 = *(_QWORD *)(v5 + 24);
    v159 = a1;
    goto LABEL_187;
  }
LABEL_176:
  v155 = *(_QWORD *)(*(_QWORD *)(a1 + 912) + 8);
  v156 = *(llvm::BasicBlock **)(*a3 + 16);
  v157 = *(_QWORD *)(v155 + 312);
  if (v157)
    *(_QWORD *)(v155 + 312) = *(_QWORD *)v157;
  else
    v157 = sub_1C484358C(v155 + 128, 232, 3);
  *(_QWORD *)v157 = 0;
  *(_QWORD *)(v157 + 8) = 0;
  *(_QWORD *)(v157 + 16) = v156;
  *(_DWORD *)(v157 + 24) = -1;
  *(_QWORD *)(v157 + 48) = (v157 + 48) | 4;
  *(_QWORD *)(v157 + 56) = v157 + 48;
  *(_BYTE *)(v157 + 144) = 0;
  *(_OWORD *)(v157 + 64) = 0u;
  *(_OWORD *)(v157 + 80) = 0u;
  *(_OWORD *)(v157 + 96) = 0u;
  *(_OWORD *)(v157 + 112) = 0u;
  *(_OWORD *)(v157 + 121) = 0u;
  *(_QWORD *)(v157 + 160) = 0;
  *(_QWORD *)(v157 + 168) = 0;
  *(_QWORD *)(v157 + 152) = 0;
  *(_BYTE *)(v157 + 176) = 0;
  *(_DWORD *)(v157 + 187) = 0;
  *(_QWORD *)(v157 + 180) = 0;
  *(_QWORD *)(v157 + 192) = 0;
  *(_DWORD *)(v157 + 199) = 0;
  *(_QWORD *)(v157 + 216) = 0;
  *(_QWORD *)(v157 + 224) = 0;
  *(_QWORD *)(v157 + 208) = 0;
  *(_QWORD *)(v157 + 32) = v155;
  *(_QWORD *)(v157 + 40) = v157;
  if (v156)
  {
    *(_QWORD *)(v157 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v156);
    *(_QWORD *)(v157 + 144) = v158;
  }
  v159 = a1;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 8) + 320, v157);
  v160 = *v174;
  *(_QWORD *)v157 = *v174;
  *(_QWORD *)(v157 + 8) = v174;
  *(_QWORD *)(v160 + 8) = v157;
  *v174 = v157;
  *(_QWORD *)&v182 = v157;
  *((_QWORD *)&v182 + 1) = v23;
  v183 = v5;
  v184 = v139;
  v185 = a3[4];
  LODWORD(v186) = *((_DWORD *)a3 + 10) >> 1;
  v161 = (_OWORD *)sub_1C52B9D4C(a2, (unint64_t)&v182, 1);
  v162 = (_OWORD *)(*(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 8));
  v164 = v161[1];
  v163 = v161[2];
  *v162 = *v161;
  v162[1] = v164;
  v162[2] = v163;
  ++*(_DWORD *)(a2 + 8);
  sub_1C635FFB4(a1, a4);
LABEL_187:
  v166 = *a3;
  v167 = *(_QWORD *)v159;
  v168 = *(_DWORD *)(v159 + 816);
  v180 = 0;
  v181 = v168;
  if (!v167 || (v169 = (unsigned __int8 **)(v167 + 48), v169 == &v180))
  {
    v170 = 0;
  }
  else
  {
    v170 = *v169;
    v180 = v170;
    if (v170)
    {
      llvm::MetadataTracking::track((uint64_t)&v180, v170, 2);
      v170 = v180;
    }
  }
  LODWORD(v182) = 20;
  *((_QWORD *)&v182 + 1) = a4;
  v183 = 0;
  v184 = v139;
  v185 = v142;
  v186 = v157;
  v187 = v166;
  v188 = v170;
  if (v170)
  {
    llvm::MetadataTracking::track((uint64_t)&v188, v170, 2);
    v189 = v181;
    v190 = 0;
    v191 = v9;
    v192 = v11;
    if (v180)
      llvm::MetadataTracking::untrack((uint64_t)&v180, v180);
  }
  else
  {
    v189 = v181;
    v190 = 0;
    v191 = v9;
    v192 = v11;
  }
  if (*a3 == a5)
  {
    result = (uint64_t)sub_1C63600E8(v159, (uint64_t)&v182, a5);
  }
  else
  {
    v171 = *(_QWORD *)(v159 + 856);
    v172 = *(_QWORD *)(v171 + 16);
    if (v172 < *(_QWORD *)(v171 + 24))
      result = sub_1C6270B40(v172, &v182) + 88;
    else
      result = sub_1C5509B18((__int128 **)(v171 + 8), &v182);
    *(_QWORD *)(v171 + 16) = result;
  }
  if (v190)
    result = llvm::MetadataTracking::untrack((uint64_t)&v190, v190);
  if (v188)
    return llvm::MetadataTracking::untrack((uint64_t)&v188, v188);
  return result;
}

unint64_t sub_1C5D38294(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  llvm::BasicBlock *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned __int8 **v30;
  uint64_t v31;
  int v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  _QWORD v39[5];
  unsigned int v40;

  v4 = *(_QWORD **)(a1 + 912);
  v5 = v4[80];
  if (dword_1ED825010 > 0x64)
    return v4[80];
  if (!v4[4])
    return v4[80];
  v8 = *a3;
  v7 = a3[1];
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a3) >> 3);
  if (v9 < 2)
    return v4[80];
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 824) + 552))
    return v4[80];
  v13 = *(_QWORD *)(**(_QWORD **)(v5 + 32) + 112);
  if (v13)
  {
    if (*(char *)(v13 + 13) < 0)
      return v4[80];
  }
  if (v7 == v8)
    return v4[80];
  v14 = 0;
  LODWORD(v15) = 0;
  v16 = 0;
  v17 = (unint64_t)(((((unint64_t)dword_1ED825010 << 31) | 0x30)
                          * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
LABEL_9:
  v18 = v15;
  v19 = (unsigned int *)(v8 + 32 + 40 * v14);
  v15 = v14;
  do
  {
    v21 = *v19;
    v19 += 10;
    v20 = v21;
    v14 = v15 + 1;
    v22 = (v15 + 1);
    if (v21 >= v17)
    {
      v16 = 1;
      LODWORD(v17) = v20;
      if (v9 > v22)
        goto LABEL_9;
      goto LABEL_18;
    }
    ++v15;
  }
  while (v9 > v22);
  v20 = v17;
  LODWORD(v15) = v18;
  if ((v16 & 1) == 0)
    return v4[80];
LABEL_18:
  v25 = v4[1];
  v26 = *(llvm::BasicBlock **)(v5 + 16);
  v38 = *(unint64_t **)(v5 + 8);
  v23 = *(_QWORD *)(v25 + 312);
  if (v23)
    *(_QWORD *)(v25 + 312) = *(_QWORD *)v23;
  else
    v23 = sub_1C484358C(v25 + 128, 232, 3);
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = v26;
  *(_DWORD *)(v23 + 24) = -1;
  *(_QWORD *)(v23 + 48) = (v23 + 48) | 4;
  *(_QWORD *)(v23 + 56) = v23 + 48;
  *(_BYTE *)(v23 + 144) = 0;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 112) = 0u;
  *(_OWORD *)(v23 + 121) = 0u;
  *(_QWORD *)(v23 + 160) = 0;
  *(_QWORD *)(v23 + 168) = 0;
  *(_QWORD *)(v23 + 152) = 0;
  *(_BYTE *)(v23 + 176) = 0;
  *(_DWORD *)(v23 + 187) = 0;
  *(_QWORD *)(v23 + 180) = 0;
  *(_QWORD *)(v23 + 192) = 0;
  *(_DWORD *)(v23 + 199) = 0;
  *(_QWORD *)(v23 + 216) = 0;
  *(_QWORD *)(v23 + 224) = 0;
  *(_QWORD *)(v23 + 208) = 0;
  *(_QWORD *)(v23 + 32) = v25;
  *(_QWORD *)(v23 + 40) = v23;
  if (v26)
  {
    *(_QWORD *)(v23 + 136) = llvm::BasicBlock::getIrrLoopHeaderWeight(v26);
    *(_QWORD *)(v23 + 144) = v27;
  }
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(*(_QWORD *)(*(_QWORD *)(a1 + 912) + 8) + 320, v23);
  v28 = *v38;
  *(_QWORD *)v23 = *v38;
  *(_QWORD *)(v23 + 8) = v38;
  *(_QWORD *)(v28 + 8) = v23;
  *v38 = v23;
  v29 = *(_DWORD *)(a2 + 20);
  if ((v29 & 0x40000000) != 0)
    v30 = *(unsigned __int8 ***)(a2 - 8);
  else
    v30 = (unsigned __int8 **)(a2 - 32 * (v29 & 0x7FFFFFF));
  sub_1C635FFB4(a1, *v30);
  v31 = *a3 + 40 * v15;
  v39[0] = v5;
  v39[1] = v31;
  v39[3] = 0;
  v39[4] = 0;
  v39[2] = v31;
  v40 = 0x80000000 - v20;
  v32 = *(_DWORD *)(a2 + 20);
  if ((v32 & 0x40000000) != 0)
    v33 = *(unsigned __int8 ***)(a2 - 8);
  else
    v33 = (unsigned __int8 **)(a2 - 32 * (v32 & 0x7FFFFFF));
  sub_1C5D36ADC(a1, (uint64_t)v39, *v33, (uint64_t *)v5, (llvm::MachineBasicBlock *)v23);
  v34 = a3[1];
  v35 = v34 - (v31 + 40);
  if (v34 != v31 + 40)
    memmove((void *)v31, (const void *)(v31 + 40), v35 - 4);
  v36 = *a3;
  v37 = v31 + v35;
  for (a3[1] = v37; v36 != v37; v36 += 40)
    *(_DWORD *)(v36 + 32) = sub_1C5D38574(*(unsigned int *)(v36 + 32), v20);
  *a4 = v20;
  return v23;
}

unint64_t sub_1C5D38574(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v6;

  if (a2 == 0x80000000)
    return 0;
  v2 = a1;
  v6 = 0x80000000 - a2;
  v3 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v6, 0x80000000);
  if (v2 <= v3)
    v4 = v3;
  else
    v4 = v2;
  if ((_DWORD)v4 != 0x80000000)
    return ((v4 >> 1) | ((unint64_t)v2 << 31)) / v4;
  return v2;
}

uint64_t sub_1C5D385E0(llvm::LLVMContext *a1, unsigned __int8 *a2, uint64_t a3)
{
  BOOL v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
  {
    LODWORD(v10) = 0;
    BYTE4(v10) = 0;
    v9 = (const char *)&off_1E814E960;
    v11 = 0;
    v12 = a3;
    v13 = 0;
    return llvm::LLVMContext::diagnose((uint64_t)a1, (const llvm::DiagnosticInfo *)&v9);
  }
  if (a2[16] <= 0x1Bu)
    a2 = 0;
  v4 = a2[16] != 84 || a2 == 0;
  if (v4 || *(_BYTE *)(*((_QWORD *)a2 - 4) + 16) != 24)
    return llvm::LLVMContext::emitError(a1, (const llvm::Instruction *)a2, (const llvm::Twine *)a3);
  v5 = *(unsigned __int8 *)(a3 + 32);
  if (v5 == 1)
  {
    v9 = ", possible invalid constraint for vector type";
    v6 = 259;
  }
  else
  {
    if (*(_BYTE *)(a3 + 32))
    {
      v7 = *(_QWORD *)(a3 + 8);
      if (*(_BYTE *)(a3 + 33) == 1)
      {
        v8 = *(const char **)a3;
      }
      else
      {
        LOBYTE(v5) = 2;
        v8 = (const char *)a3;
      }
      v9 = v8;
      v10 = v7;
      v11 = ", possible invalid constraint for vector type";
      LOBYTE(v13) = v5;
      BYTE1(v13) = 3;
      return llvm::LLVMContext::emitError(a1, (const llvm::Instruction *)a2, (const llvm::Twine *)&v9);
    }
    v6 = 256;
  }
  LOWORD(v13) = v6;
  return llvm::LLVMContext::emitError(a1, (const llvm::Instruction *)a2, (const llvm::Twine *)&v9);
}

uint64_t *sub_1C5D386CC(uint64_t a1, uint64_t a2, unint64_t a3, const llvm::APInt *a4, llvm *a5, uint64_t a6)
{
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  char EVT;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  llvm *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  llvm *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  llvm *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[33];

  v49[32] = *MEMORY[0x1E0C80C00];
  v45 = a5;
  v46 = a6;
  if ((_BYTE)a5)
  {
    if (a5 - 15 >= 0x9C)
      return 0;
  }
  else if ((*(_DWORD *)(a6 + 8) & 0xFE) != 0x12)
  {
    return 0;
  }
  v44 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v10 = sub_1C52B71D4((unsigned __int8 *)&v45);
  v11 = v10;
  v12 = HIDWORD(v10);
  v13 = sub_1C52B71D4((unsigned __int8 *)&v44);
  v15 = v13;
  v16 = (v13 & 0xFFFFFFFF00000000) != 0x100000000 && (_DWORD)v12 == 1;
  if (!v16 && v11 <= v13)
    return 0;
  if (((_DWORD)v12 == 1) != ((v13 & 0xFFFFFFFF00000000) == 0x100000000))
    return 0;
  if ((_BYTE)v45)
  {
    EVT = sub_1C47F37A0((unsigned __int8 *)&v45);
    v19 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v46 + 24), 0, v14);
    v19 = v20;
  }
  if ((_BYTE)v44)
  {
    v21 = sub_1C47F37A0((unsigned __int8 *)&v44);
    v23 = 0;
  }
  else
  {
    v21 = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v44 + 1) + 24), 0, v17);
  }
  if (EVT != v21 || !EVT && v19 != v23)
    return 0;
  if ((_DWORD)v12 == 1)
  {
    v26 = v45;
    v27 = v46;
    v28 = sub_1C61312D0(a1, v45, v46);
    v30 = v29;
    v31 = sub_1C6366C9C(a1, 0, (uint64_t)a4, 0);
    v34 = *(_QWORD *)(a1 + 832);
    if (v34)
      LOWORD(v34) = *(_WORD *)(v34 + 8);
    return sub_1C5D58E08(a1, (const char *)0x96, a4, v26, v27, (uint64_t)v28, v30, v33, a2, a3, v31, v32, SHIDWORD(v32), v34);
  }
  else
  {
    if ((_BYTE)v45)
    {
      LOBYTE(v35) = sub_1C47F37A0((unsigned __int8 *)&v45);
      v38 = 0;
      v37 = 0;
    }
    else
    {
      v35 = llvm::EVT::getEVT(*(llvm::EVT **)(v46 + 24), 0, v22);
      v37 = v36;
      v38 = v35 & 0xFFFFFFFFFFFFFF00;
    }
    v39 = (llvm *)(v38 | v35);
    v47 = v49;
    v48 = 0x1000000000;
    sub_1C5D63080(a1, a2, a3, (uint64_t)&v47, 0, 0, 0, 0);
    v40 = sub_1C61312D0(a1, v39, v37);
    sub_1C63299CC((unsigned int *)&v47, v11 - v15, (uint64_t)v40, v41);
    v42 = *(_QWORD *)(a1 + 832);
    if (v42)
      v43 = *(unsigned __int16 *)(v42 + 8);
    else
      v43 = 0;
    v24 = sub_1C636D0C8(a1, (const char *)0x92, a4, v45, v46, (uint64_t *)v47, v48, v43);
    if (v47 != v49)
      free(v47);
  }
  return v24;
}

uint64_t *sub_1C5D389BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, const llvm::APInt *a5)
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  llvm *ShiftAmountTy;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int16 v35;

  v10 = sub_1C6366AB4(a1, 2139095040, a5, (llvm *)5, 0, 0, 0);
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 832);
  if (v14)
    v13 = *(_WORD *)(v14 + 8);
  v15 = sub_1C5D56C70(a1, 171, a5, (llvm *)5, 0, a2, a3, v12, (uint64_t)v10, v11, v13);
  v17 = v16;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(a4, 5, 0, *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 1);
  v20 = sub_1C6366AB4(a1, 23, a5, ShiftAmountTy, v19, 0, 0);
  v23 = 0;
  v24 = *(_QWORD *)(a1 + 832);
  if (v24)
    v23 = *(_WORD *)(v24 + 8);
  v25 = sub_1C5D56C70(a1, 177, a5, (llvm *)5, 0, (uint64_t)v15, v17, v22, (uint64_t)v20, v21, v23);
  v27 = v26;
  v28 = sub_1C6366AB4(a1, 127, a5, (llvm *)5, 0, 0, 0);
  v31 = *(_QWORD *)(a1 + 832);
  if (v31)
    LOWORD(v31) = *(_WORD *)(v31 + 8);
  v33 = sub_1C5D56C70(a1, 57, a5, (llvm *)5, 0, (uint64_t)v25, v27, v30, (uint64_t)v28, v29, v31);
  v34 = *(_QWORD *)(a1 + 832);
  if (v34)
    v35 = *(_WORD *)(v34 + 8);
  else
    v35 = 0;
  return sub_1C5D52060(a1, 202, a5, (llvm *)0xA, 0, (uint64_t)v33, v32, v35);
}

uint64_t *sub_1C5D38B64(uint64_t a1, uint64_t a2, unint64_t a3, const llvm::APInt *a4)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int16 v23;

  v8 = sub_1C6366AB4(a1, 0x7FFFFFLL, a4, (llvm *)5, 0, 0, 0);
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 832);
  if (v12)
    v11 = *(_WORD *)(v12 + 8);
  v13 = sub_1C5D56C70(a1, 171, a4, (llvm *)5, 0, a2, a3, v10, (uint64_t)v8, v9, v11);
  v15 = v14;
  v16 = sub_1C6366AB4(a1, 1065353216, a4, (llvm *)5, 0, 0, 0);
  v19 = *(_QWORD *)(a1 + 832);
  if (v19)
    LOWORD(v19) = *(_WORD *)(v19 + 8);
  v21 = sub_1C5D56C70(a1, 172, a4, (llvm *)5, 0, (uint64_t)v13, v15, v18, (uint64_t)v16, v17, v19);
  v22 = *(_QWORD *)(a1 + 832);
  if (v22)
    v23 = *(_WORD *)(v22 + 8);
  else
    v23 = 0;
  return sub_1C5D52060(a1, 216, a4, (llvm *)0xA, 0, (uint64_t)v21, v20, v23);
}

uint64_t *sub_1C5D38C7C(uint64_t a1, unsigned int a2, const llvm::APFloat *a3)
{
  uint64_t *result;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v8 = 32;
  v7 = a2;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v10, (const llvm::APInt **)&v7);
  result = sub_1C6366D08(a1, (llvm::LLVMContext *)v9, a3, (llvm *)0xA, 0, 0);
  if ((_UNKNOWN *)v10 == &unk_1C866F1C0)
  {
    v6 = result;
    sub_1C4773C74(v11);
    return v6;
  }
  if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F && v11[0])
  {
    v6 = result;
    MEMORY[0x1CAA32F9C](v11[0], 0x1000C8000313F17);
    return v6;
  }
  return result;
}

uint64_t *sub_1C5D38D88(uint64_t a1, unint64_t a2, const llvm::APInt *a3, uint64_t a4)
{
  uint64_t v8;
  __int16 v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  llvm *ShiftAmountTy;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  __int16 v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  __int16 v133;

  v8 = *(_QWORD *)(a4 + 832);
  if (v8)
    v9 = *(_WORD *)(v8 + 8);
  else
    v9 = 0;
  v11 = sub_1C5D52060(a4, 208, a3, (llvm *)5, 0, a1, a2, v9);
  v12 = v10;
  v13 = 0;
  v14 = *(_QWORD *)(a4 + 832);
  if (v14)
    v13 = *(_WORD *)(v14 + 8);
  v15 = sub_1C5D52060(a4, 202, a3, (llvm *)0xA, 0, (uint64_t)v11, v10, v13);
  v18 = 0;
  v19 = *(_QWORD *)(a4 + 832);
  if (v19)
    v18 = *(_WORD *)(v19 + 8);
  v20 = sub_1C5D56C70(a4, 97, a3, (llvm *)0xA, 0, a1, a2, v17, (uint64_t)v15, v16, v18);
  v22 = v21;
  ShiftAmountTy = (llvm *)llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a4 + 24), 5, 0, *(_QWORD *)(**(_QWORD **)(a4 + 40) + 40) + 272, 1);
  v25 = sub_1C6366AB4(a4, 23, a3, ShiftAmountTy, v24, 0, 0);
  v28 = *(_QWORD *)(a4 + 832);
  if (v28)
    LOWORD(v28) = *(_WORD *)(v28 + 8);
  v29 = sub_1C5D56C70(a4, 175, a3, (llvm *)5, 0, (uint64_t)v11, v12, v27, (uint64_t)v25, v26, v28);
  v31 = v30;
  if (dword_1ED824E08 > 6)
  {
    if (dword_1ED824E08 > 0xC)
    {
      v57 = sub_1C5D38C7C(a4, 0x3924B03Eu, a3);
      v60 = *(_QWORD *)(a4 + 832);
      if (v60)
        LOWORD(v60) = *(_WORD *)(v60 + 8);
      v61 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v20, v22, v59, (uint64_t)v57, v58, v60);
      v63 = v62;
      v64 = sub_1C5D38C7C(a4, 0x3AB24B87u, a3);
      v67 = *(_QWORD *)(a4 + 832);
      if (v67)
        LOWORD(v67) = *(_WORD *)(v67 + 8);
      v69 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v61, v63, v66, (uint64_t)v64, v65, v67);
      v71 = *(_QWORD *)(a4 + 832);
      if (v71)
        LOWORD(v71) = *(_WORD *)(v71 + 8);
      v72 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v69, v68, v70, (uint64_t)v20, v22, v71);
      v74 = v73;
      v75 = sub_1C5D38C7C(a4, 0x3C1D8C17u, a3);
      v78 = *(_QWORD *)(a4 + 832);
      if (v78)
        LOWORD(v78) = *(_WORD *)(v78 + 8);
      v80 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v72, v74, v77, (uint64_t)v75, v76, v78);
      v82 = *(_QWORD *)(a4 + 832);
      if (v82)
        LOWORD(v82) = *(_WORD *)(v82 + 8);
      v83 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v80, v79, v81, (uint64_t)v20, v22, v82);
      v85 = v84;
      v86 = sub_1C5D38C7C(a4, 0x3D634A1Du, a3);
      v89 = *(_QWORD *)(a4 + 832);
      if (v89)
        LOWORD(v89) = *(_WORD *)(v89 + 8);
      v91 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v83, v85, v88, (uint64_t)v86, v87, v89);
      v93 = *(_QWORD *)(a4 + 832);
      if (v93)
        LOWORD(v93) = *(_WORD *)(v93 + 8);
      v94 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v91, v90, v92, (uint64_t)v20, v22, v93);
      v96 = v95;
      v97 = sub_1C5D38C7C(a4, 0x3E75FE14u, a3);
      v100 = *(_QWORD *)(a4 + 832);
      if (v100)
        LOWORD(v100) = *(_WORD *)(v100 + 8);
      v102 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v94, v96, v99, (uint64_t)v97, v98, v100);
      v104 = *(_QWORD *)(a4 + 832);
      if (v104)
        LOWORD(v104) = *(_WORD *)(v104 + 8);
      v36 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v102, v101, v103, (uint64_t)v20, v22, v104);
      v38 = v105;
      v39 = 1065353216;
      v40 = 1060205108;
    }
    else
    {
      v41 = sub_1C5D38C7C(a4, 0x3DA235E3u, a3);
      v44 = *(_QWORD *)(a4 + 832);
      if (v44)
        LOWORD(v44) = *(_WORD *)(v44 + 8);
      v45 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v20, v22, v43, (uint64_t)v41, v42, v44);
      v47 = v46;
      v48 = sub_1C5D38C7C(a4, 0x3E65B8F3u, a3);
      v51 = *(_QWORD *)(a4 + 832);
      if (v51)
        LOWORD(v51) = *(_WORD *)(v51 + 8);
      v53 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v45, v47, v50, (uint64_t)v48, v49, v51);
      v55 = *(_QWORD *)(a4 + 832);
      if (v55)
        LOWORD(v55) = *(_WORD *)(v55 + 8);
      v36 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v53, v52, v54, (uint64_t)v20, v22, v55);
      v38 = v56;
      v39 = 1065351421;
      v40 = 1060260615;
    }
  }
  else
  {
    v32 = sub_1C5D38C7C(a4, 0x3E814304u, a3);
    v35 = *(_QWORD *)(a4 + 832);
    if (v35)
      LOWORD(v35) = *(_WORD *)(v35 + 8);
    v36 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v20, v22, v34, (uint64_t)v32, v33, v35);
    v38 = v37;
    v39 = 1065311870;
    v40 = 1060917448;
  }
  v106 = sub_1C5D38C7C(a4, v40, a3);
  v109 = *(_QWORD *)(a4 + 832);
  if (v109)
    LOWORD(v109) = *(_WORD *)(v109 + 8);
  v111 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v36, v38, v108, (uint64_t)v106, v107, v109);
  v113 = *(_QWORD *)(a4 + 832);
  if (v113)
    LOWORD(v113) = *(_WORD *)(v113 + 8);
  v114 = sub_1C5D56C70(a4, 98, a3, (llvm *)0xA, 0, (uint64_t)v111, v110, v112, (uint64_t)v20, v22, v113);
  v116 = v115;
  v117 = sub_1C5D38C7C(a4, v39, a3);
  v120 = *(_QWORD *)(a4 + 832);
  if (v120)
    LOWORD(v120) = *(_WORD *)(v120 + 8);
  v122 = sub_1C5D56C70(a4, 96, a3, (llvm *)0xA, 0, (uint64_t)v114, v116, v119, (uint64_t)v117, v118, v120);
  v123 = v12 & 0xFFFFFFFF00000000 | v31;
  v124 = *(_QWORD *)(a4 + 832);
  if (v124)
    v125 = *(_WORD *)(v124 + 8);
  else
    v125 = 0;
  v127 = sub_1C5D52060(a4, 216, a3, (llvm *)5, 0, (uint64_t)v122, v121, v125);
  v129 = *(_QWORD *)(a4 + 832);
  if (v129)
    LOWORD(v129) = *(_WORD *)(v129 + 8);
  v131 = sub_1C5D56C70(a4, 56, a3, (llvm *)5, 0, (uint64_t)v127, v126, v128, (uint64_t)v29, v123, v129);
  v132 = *(_QWORD *)(a4 + 832);
  if (v132)
    v133 = *(_WORD *)(v132 + 8);
  else
    v133 = 0;
  return sub_1C5D52060(a4, 216, a3, (llvm *)0xA, 0, (uint64_t)v131, v130, v133);
}

uint64_t sub_1C5D39428(uint64_t a1, llvm::Value *this)
{
  llvm::Value *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  char v11;
  llvm::Value *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  llvm::Value *v16;
  llvm::Value *v17;

  if (!this)
    return 0;
  v3 = llvm::Value::stripPointerCasts(this);
  result = 0;
  if (v3 && *((_BYTE *)v3 + 16) == 59)
  {
    if (*(_BYTE *)(*((_QWORD *)v3 - 4) + 16) != 16)
      return 0;
    v5 = *((_QWORD *)v3 + 5);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 80);
    v7 = v6 ? v6 - 24 : 0;
    if (v5 != v7 || (*((_WORD *)v3 + 9) & 0x40) != 0)
      return 0;
    v8 = **(_QWORD **)a1 + 176;
    v16 = 0;
    v17 = v3;
    v9 = sub_1C47A82D8(v8, &v17, &v16);
    result = 0;
    if (v9)
    {
      v10 = *(int **)(a1 + 8);
      v16 = 0;
      v11 = sub_1C5D397E0((uint64_t)v10, (uint64_t)v3, &v16);
      v12 = v16;
      if ((v11 & 1) != 0)
        return (uint64_t)v12 + 8;
      v17 = v16;
      v13 = *v10;
      v14 = *v10 >> 1;
      if ((*v10 & 1) != 0)
        v15 = 8;
      else
        v15 = v10[4];
      if (4 * v14 + 4 >= 3 * v15)
      {
        v15 *= 2;
      }
      else if (v15 + ~v14 - v10[1] > v15 >> 3)
      {
LABEL_19:
        *v10 = v13 + 2;
        if (*(_QWORD *)v12 != -4096)
          --v10[1];
        *(_QWORD *)v12 = v3;
        *((_DWORD *)v12 + 2) = 0;
        return (uint64_t)v12 + 8;
      }
      sub_1C5D395A8((uint64_t)v10, v15);
      sub_1C5D397E0((uint64_t)v10, (uint64_t)v3, &v17);
      v13 = *v10;
      v12 = v17;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_1C5D395A8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5D39720(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5D39720(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5D39720(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C5D397E0((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C5D397E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5D3988C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6364444(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C5D39950(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED824E10, "insert-assert-align", 0x13uLL);
  v6 = *a1;
  byte_1ED824E90 = **a1;
  byte_1ED824EA1 = 1;
  byte_1ED824EA0 = *v6;
  result = *a2;
  xmmword_1ED824E30 = (__int128)*a2;
  word_1ED824E1A = (32 * (*a3 & 3)) | word_1ED824E1A & 0xFF9F;
  return result;
}

_DWORD *sub_1C5D399D4(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v5 = result;
  if (!result[3])
  {
    result[2] = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), 1uLL, 16);
LABEL_6:
    v7 = *(_QWORD **)v5;
    *v7 = a2;
    v7[1] = a3;
    goto LABEL_7;
  }
  if (!result[2])
    goto LABEL_6;
  v6 = *(_QWORD **)result;
  *v6 = a2;
  v6[1] = a3;
  if (!result[2])
    goto LABEL_6;
LABEL_7:
  v5[2] = 1;
  return result;
}

char *sub_1C5D39A4C(char **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_1C4764EE4();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 2);
      v2 -= 16;
      v14 = *((_DWORD *)v2 + 2);
      *((_QWORD *)v11 - 2) = v13;
      v11 -= 16;
      *((_DWORD *)v11 + 2) = v14;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_1C5D39B2C(void ***a1)
{
  void **v1;
  unsigned __int8 **v2;
  unsigned __int8 **v4;
  void *v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;

  v1 = *a1;
  v2 = (unsigned __int8 **)**a1;
  if (v2)
  {
    v4 = (unsigned __int8 **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 2;
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
        v7 = v6 - 1;
        v6 -= 3;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5D39BAC(uint64_t *a1, __int128 *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  void **v23;

  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - *a1) >> 5;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59)
      abort();
    v9 = v4 - *a1;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v22 = a1 + 2;
    if (v10 >> 59)
      sub_1C4764EE4();
    v11 = (char *)operator new(32 * v10);
    v12 = *a2;
    v13 = a2[1];
    v14 = &v11[32 * v7];
    __p = v11;
    v19 = v14;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *(_OWORD *)v14 = v12;
    *((_OWORD *)v14 + 1) = v13;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = v14 + 32;
    v21 = &v11[32 * v10];
    sub_1C621E810(a1, &__p);
    v6 = (_QWORD *)a1[1];
    v16 = v19;
    v15 = v20;
    if (v20 != v19)
    {
      do
      {
        v17 = v15 - 32;
        v23 = (void **)(v15 - 24);
        sub_1C5D39B2C(&v23);
        v15 = v17;
      }
      while (v17 != v16);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *(_OWORD *)(v5 + 1) = *(__int128 *)((char *)a2 + 8);
    v5[3] = *((_QWORD *)a2 + 3);
    v6 = v5 + 4;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
  }
  a1[1] = (uint64_t)v6;
}

uint64_t sub_1C5D39CE0(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, int *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v5;
  v18 = a1 + 2;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v14 = v11;
  v15 = &v11[24 * v4];
  v17 = &v11[24 * v10];
  sub_1C5D39DF4(v15, a2, a3, a4);
  v16 = v15 + 24;
  sub_1C636476C(a1, &v14);
  v12 = a1[1];
  sub_1C6364840((uint64_t)&v14);
  return v12;
}

_QWORD *sub_1C5D39DF4(_QWORD *result, uint64_t a2, unsigned __int8 *a3, int *a4)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;

  v6 = result;
  v9 = a3;
  if (a3)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)&v9, a3, 2);
    v7 = v9;
    v8 = *a4;
    *v6 = a2;
    v6[1] = v7;
    if (v7)
      result = (_QWORD *)llvm::MetadataTracking::retrack((uint64_t)&v9, v7, (uint64_t)(v6 + 1));
  }
  else
  {
    v8 = *a4;
    *result = a2;
    result[1] = 0;
  }
  *((_DWORD *)v6 + 4) = v8;
  return result;
}

void sub_1C5D39E70(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  BOOL v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

__int128 *sub_1C5D3A6E8(__int128 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v10 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v10;
      *(_OWORD *)a3 = v9;
      a3[2] = v8;
      if (*a2 < *(_QWORD *)result)
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = a2[2];
        *result = *(_OWORD *)a2;
        *((_QWORD *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        a2[2] = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = a2[2];
      *result = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      if (*a3 >= *a2)
        return result;
      v5 = a2[2];
      v6 = *(_OWORD *)a2;
      v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = a3[2];
      *result = *(_OWORD *)a3;
      *((_QWORD *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    a3[2] = v5;
  }
  return result;
}

BOOL sub_1C5D3A7D8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1C5D3A6E8((__int128 *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C5D3AA50(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      v18 = (__int128 *)(a1 + 24);
      v19 = (__int128 *)(a1 + 48);
      v20 = (__int128 *)(a1 + 72);
      sub_1C5D3AA50(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a1 + 72);
      v22 = *(_QWORD *)(a2 - 24);
      v21 = a2 - 24;
      if (v22 < *(_QWORD *)(a1 + 72))
      {
        v23 = *(_QWORD *)(a1 + 88);
        v24 = *v20;
        v25 = *(_QWORD *)(v21 + 16);
        *v20 = *(_OWORD *)v21;
        *(_QWORD *)(a1 + 88) = v25;
        *(_OWORD *)v21 = v24;
        *(_QWORD *)(v21 + 16) = v23;
        if (*(_QWORD *)v20 < *(_QWORD *)v19)
        {
          v26 = *(_QWORD *)(a1 + 64);
          v27 = *v19;
          *v19 = *v20;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v20 = v27;
          *(_QWORD *)(a1 + 88) = v26;
          if (*(_QWORD *)v19 < *(_QWORD *)v18)
          {
            v28 = *(_QWORD *)(a1 + 40);
            v29 = *v18;
            *v18 = *v19;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v19 = v29;
            *(_QWORD *)(a1 + 64) = v28;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
            {
              v30 = *(_QWORD *)(a1 + 16);
              v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v18 = v31;
              *(_QWORD *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      sub_1C5D3A6E8((__int128 *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v32 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v32;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_1C5D3AA50(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1C5D3A6E8((__int128 *)a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    v9 = a3[2];
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*a3 < *a2)
    {
      v11 = a2[2];
      result = *(__n128 *)a2;
      v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*a2 < *(_QWORD *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

char *sub_1C5D3AB1C(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  char *v37;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v10 = *(__int128 **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (a5 > (v9 - (uint64_t)v10) >> 4)
  {
    v11 = *(char **)a1;
    v12 = a5 + (((uint64_t)v10 - *(_QWORD *)a1) >> 4);
    if (v12 >> 60)
      abort();
    v13 = v9 - (_QWORD)v11;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        sub_1C4764EE4();
      v15 = (char *)operator new(16 * v14);
    }
    else
    {
      v15 = 0;
    }
    v25 = &v15[16 * ((v5 - v11) >> 4)];
    v26 = &v25[16 * a5];
    v27 = 16 * a5;
    v28 = v25;
    do
    {
      v29 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)v28 = v29;
      v28 += 16;
      v27 -= 16;
    }
    while (v27);
    v30 = *(char **)a1;
    if (v5 == *(char **)a1)
    {
      v32 = v25;
    }
    else
    {
      v31 = v5;
      v32 = v25;
      do
      {
        v33 = *((_QWORD *)v31 - 2);
        v31 -= 16;
        v34 = *((_DWORD *)v31 + 2);
        *((_QWORD *)v32 - 2) = v33;
        v32 -= 16;
        *((_DWORD *)v32 + 2) = v34;
      }
      while (v31 != v30);
      v10 = *(__int128 **)(a1 + 8);
    }
    v35 = &v15[16 * v14];
    v36 = (char *)v10 - v5;
    if (v10 != (__int128 *)v5)
      memmove(v26, v5, v36 - 4);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v26[v36];
    *(_QWORD *)(a1 + 16) = v35;
    if (v37)
      operator delete(v37);
    return v25;
  }
  v16 = (char *)v10 - __dst;
  v17 = ((char *)v10 - __dst) >> 4;
  if (v17 >= a5)
  {
    v18 = &__src[16 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v5[16 * a5];
    v22 = (__int128 *)&v20[-16 * a5];
    v23 = v20;
    if (v22 < v10)
    {
      v23 = v20;
      do
      {
        v24 = *v22++;
        *(_OWORD *)v23 = v24;
        v23 += 16;
      }
      while (v22 < v10);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v20[-16 * ((v20 - v21) >> 4)], v5, v20 - v21 - 4);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7 - 4);
    return v5;
  }
  v18 = &__src[16 * v17];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[16 * v17], v19 - 4);
  v20 = (char *)v10 + v19;
  *(_QWORD *)(a1 + 8) = (char *)v10 + v19;
  if (v16 >= 1)
    goto LABEL_18;
  return v5;
}

unint64_t sub_1C5D3AD1C(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  int v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  BOOL v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  __int128 v204;
  __int128 v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  __int128 v242;
  __int128 v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  unsigned int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  unint64_t v269;
  unsigned int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __int128 *v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  int64_t v295;
  int64_t v296;
  int64_t v297;
  uint64_t v298;
  unint64_t v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  BOOL v306;
  unint64_t v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  _BOOL4 v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unsigned int v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unsigned int v414;
  unsigned int v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unsigned int v422;
  int v423;
  __int128 v424;
  unint64_t v425;
  unint64_t v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  unsigned int v435;
  uint64_t v436;
  _QWORD *v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unint64_t v452;
  __int128 v453;
  __int128 v454;
  uint64_t v455;
  unsigned int v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  __int128 v465;
  unsigned int v466;
  uint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  __int128 *v478;
  uint64_t v479;
  uint64_t v480;
  unsigned int v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  unsigned int v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;

  v7 = result;
LABEL_2:
  v8 = (__int128 *)(a2 - 40);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v250 = *(_DWORD *)(v9 + 32);
        v251 = *(_DWORD *)(a2 - 8);
        if (v251 == v250)
        {
          v252 = *(_QWORD *)(a2 - 32);
          v253 = *(_QWORD *)(v9 + 8);
          v254 = (_QWORD *)(v253 + 24);
          v255 = *(unsigned int *)(v252 + 32);
          if (v255 > 0x40)
          {
            v489 = *(_QWORD *)(v252 + 24);
            v490 = *(_QWORD *)(v489 + 8 * ((v255 - 1) >> 6)) & (1 << (v255 - 1));
            v491 = *(_DWORD *)(v253 + 32);
            v492 = v491 - 1;
            v493 = *(_QWORD *)(v253 + 24);
            if (v491 >= 0x41)
              v254 = (_QWORD *)(v493 + 8 * (v492 >> 6));
            if ((v490 != 0) == ((*v254 >> v492) & 1))
            {
              v494 = v255 + 63;
              v495 = v493 - 8;
              v496 = (v494 >> 3) & 0x3FFFFFF8;
              v497 = v489 - 8;
              do
              {
                if (!v496)
                  return result;
                v498 = *(_QWORD *)(v497 + v496);
                v499 = *(_QWORD *)(v495 + v496);
                v496 -= 8;
              }
              while (v498 == v499);
              if (v498 > v499)
                return result;
            }
            else if (!v490)
            {
              return result;
            }
          }
          else if ((uint64_t)(*(_QWORD *)(v252 + 24) << -(char)v255) >> -(char)v255 >= (uint64_t)(*v254 << -(char)v255) >> -(char)v255)
          {
            return result;
          }
        }
        else if (v251 <= v250)
        {
          return result;
        }
        v518 = *(_QWORD *)(v9 + 32);
        v508 = *(_OWORD *)v9;
        v514 = *(_OWORD *)(v9 + 16);
        v453 = *v8;
        v454 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(v9 + 32) = *(_DWORD *)(a2 - 8);
        *(_OWORD *)v9 = v453;
        *(_OWORD *)(v9 + 16) = v454;
        *(_DWORD *)(a2 - 8) = v518;
        *v8 = v508;
        *(_OWORD *)(a2 - 24) = v514;
        return result;
      case 3:
        return (unint64_t)sub_1C550BFAC((__int128 *)v9, (__int128 *)(v9 + 40), (__int128 *)(a2 - 40));
      case 4:
        return (unint64_t)sub_1C550C8D4(v9, v9 + 40, v9 + 80, a2 - 40);
      case 5:
        return (unint64_t)sub_1C550BB64(v9, v9 + 40, v9 + 80, v9 + 120, a2 - 40);
      default:
        if (v10 <= 959)
        {
          v256 = v9 + 40;
          v258 = v9 == a2 || v256 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v258)
            {
              v259 = v9;
              while (1)
              {
                v260 = v259;
                v259 = v256;
                v261 = *(_DWORD *)(v260 + 32);
                v262 = *(_DWORD *)(v260 + 72);
                if (v262 != v261)
                  break;
                v263 = *(_QWORD *)(v260 + 48);
                v264 = *(_QWORD *)(v260 + 8);
                v265 = (_QWORD *)(v264 + 24);
                v266 = *(unsigned int *)(v263 + 32);
                if (v266 <= 0x40)
                {
                  if ((uint64_t)(*(_QWORD *)(v263 + 24) << -(char)v266) >> -(char)v266 >= (uint64_t)(*v265 << -(char)v266) >> -(char)v266)
                    goto LABEL_284;
                  goto LABEL_265;
                }
                v284 = *(_QWORD *)(v263 + 24);
                v285 = *(_QWORD *)(v284 + 8 * ((v266 - 1) >> 6)) & (1 << (v266 - 1));
                result = v285 != 0;
                v286 = *(_DWORD *)(v264 + 32);
                v287 = v286 - 1;
                v288 = *(_QWORD *)(v264 + 24);
                if (v286 >= 0x41)
                  v265 = (_QWORD *)(v288 + 8 * (v287 >> 6));
                if ((_DWORD)result != ((*v265 >> v287) & 1))
                {
                  if (!v285)
                    goto LABEL_284;
                  goto LABEL_265;
                }
                v289 = v266 + 63;
                v290 = v288 - 8;
                v291 = (v289 >> 3) & 0x3FFFFFF8;
                v292 = v284 - 8;
                do
                {
                  if (!v291)
                    goto LABEL_284;
                  v293 = *(_QWORD *)(v292 + v291);
                  v294 = *(_QWORD *)(v290 + v291);
                  v291 -= 8;
                }
                while (v293 == v294);
                if (v293 <= v294)
                  goto LABEL_265;
LABEL_284:
                v256 = v259 + 40;
                if (v259 + 40 == a2)
                  return result;
              }
              if (v262 <= v261)
                goto LABEL_284;
              v263 = *(_QWORD *)(v260 + 48);
LABEL_265:
              v267 = *(_QWORD *)(v260 + 40);
              v505 = *(_OWORD *)(v260 + 56);
              *(_DWORD *)(v259 + 32) = *(_DWORD *)(v260 + 32);
              v268 = *(_OWORD *)(v260 + 16);
              *(_OWORD *)v259 = *(_OWORD *)v260;
              *(_OWORD *)(v259 + 16) = v268;
              v269 = v9;
              if (v260 == v9)
                goto LABEL_283;
              while (1)
              {
                v270 = *(_DWORD *)(v260 - 8);
                if (v262 == v270)
                {
                  v271 = *(_QWORD *)(v260 - 32);
                  v272 = (_QWORD *)(v271 + 24);
                  v273 = *(unsigned int *)(v263 + 32);
                  if (v273 > 0x40)
                  {
                    v275 = *(_QWORD *)(v263 + 24);
                    result = *(_QWORD *)(v275 + 8 * ((v273 - 1) >> 6)) & (1 << (v273
                                                                                                - 1));
                    v276 = *(_DWORD *)(v271 + 32);
                    v277 = v276 - 1;
                    v278 = *(_QWORD *)(v271 + 24);
                    if (v276 >= 0x41)
                      v272 = (_QWORD *)(v278 + 8 * (v277 >> 6));
                    if ((result != 0) == ((*v272 >> v277) & 1))
                    {
                      v279 = v273 + 63;
                      v280 = v278 - 8;
                      v281 = (v279 >> 3) & 0x3FFFFFF8;
                      v282 = v275 - 8;
                      while (v281)
                      {
                        v283 = *(__int128 **)(v282 + v281);
                        result = *(_QWORD *)(v280 + v281);
                        v281 -= 8;
                        if (v283 != (__int128 *)result)
                        {
                          if ((unint64_t)v283 <= result)
                            goto LABEL_271;
                          break;
                        }
                      }
LABEL_282:
                      v269 = v260;
LABEL_283:
                      *(_QWORD *)v269 = v267;
                      *(_QWORD *)(v269 + 8) = v263;
                      *(_OWORD *)(v269 + 16) = v505;
                      *(_DWORD *)(v269 + 32) = v262;
                      goto LABEL_284;
                    }
                    if (!result)
                      goto LABEL_282;
                  }
                  else if ((uint64_t)(*(_QWORD *)(v263 + 24) << -(char)v273) >> -(char)v273 >= (uint64_t)(*v272 << -(char)v273) >> -(char)v273)
                  {
                    goto LABEL_282;
                  }
                }
                else if (v262 <= v270)
                {
                  goto LABEL_282;
                }
LABEL_271:
                v274 = *(_OWORD *)(v260 - 24);
                *(_OWORD *)v260 = *(_OWORD *)(v260 - 40);
                *(_OWORD *)(v260 + 16) = v274;
                *(_DWORD *)(v260 + 32) = *(_DWORD *)(v260 - 8);
                v260 -= 40;
                if (v260 == v9)
                {
                  v269 = v9;
                  goto LABEL_283;
                }
              }
            }
            return result;
          }
          if (v258)
            return result;
          while (1)
          {
            v455 = v7;
            v7 = v256;
            v456 = *(_DWORD *)(v455 + 32);
            v457 = *(_DWORD *)(v455 + 72);
            if (v457 == v456)
            {
              v458 = *(_QWORD *)(v455 + 48);
              v459 = *(_QWORD *)(v455 + 8);
              v460 = (_QWORD *)(v459 + 24);
              v461 = *(unsigned int *)(v458 + 32);
              if (v461 > 0x40)
              {
                v479 = *(_QWORD *)(v458 + 24);
                v480 = *(_QWORD *)(v479 + 8 * ((v461 - 1) >> 6)) & (1 << (v461 - 1));
                result = *(unsigned int *)(v459 + 32);
                v481 = result - 1;
                v482 = *(_QWORD *)(v459 + 24);
                if (result >= 0x41)
                  v460 = (_QWORD *)(v482 + 8 * (v481 >> 6));
                if ((v480 != 0) == ((*v460 >> v481) & 1))
                {
                  v483 = v461 + 63;
                  v484 = v482 - 8;
                  v485 = (v483 >> 3) & 0x3FFFFFF8;
                  v486 = v479 - 8;
                  while (v485)
                  {
                    v487 = *(_QWORD *)(v486 + v485);
                    v488 = *(_QWORD *)(v484 + v485);
                    v485 -= 8;
                    if (v487 != v488)
                    {
                      if (v487 <= v488)
                        goto LABEL_456;
                      goto LABEL_473;
                    }
                  }
                  goto LABEL_473;
                }
                if (v480)
                  goto LABEL_456;
              }
              else if ((uint64_t)(*(_QWORD *)(v458 + 24) << -(char)v461) >> -(char)v461 < (uint64_t)(*v460 << -(char)v461) >> -(char)v461)
              {
                goto LABEL_456;
              }
            }
            else if (v457 > v456)
            {
              v458 = *(_QWORD *)(v455 + 48);
LABEL_456:
              v462 = *(_QWORD *)v7;
              v509 = *(_OWORD *)(v455 + 56);
              v463 = v7;
              while (1)
              {
                while (1)
                {
LABEL_457:
                  while (1)
                  {
                    v464 = v463;
                    v463 = v455;
                    v465 = *(_OWORD *)(v455 + 16);
                    *(_OWORD *)v464 = *(_OWORD *)v455;
                    *(_OWORD *)(v464 + 16) = v465;
                    *(_DWORD *)(v464 + 32) = *(_DWORD *)(v455 + 32);
                    v455 -= 40;
                    v466 = *(_DWORD *)(v463 - 8);
                    if (v457 == v466)
                      break;
                    if (v457 <= v466)
                      goto LABEL_472;
                  }
                  v467 = *(_QWORD *)(v463 - 32);
                  v468 = (_QWORD *)(v467 + 24);
                  v469 = *(unsigned int *)(v458 + 32);
                  if (v469 > 0x40)
                    break;
                  if ((uint64_t)(*(_QWORD *)(v458 + 24) << -(char)v469) >> -(char)v469 >= (uint64_t)(*v468 << -(char)v469) >> -(char)v469)
                    goto LABEL_472;
                }
                v470 = *(_QWORD *)(v458 + 24);
                result = *(_QWORD *)(v470 + 8 * ((v469 - 1) >> 6)) & (1 << (v469 - 1));
                v471 = *(_DWORD *)(v467 + 32);
                v472 = v471 - 1;
                v473 = *(_QWORD *)(v467 + 24);
                if (v471 >= 0x41)
                  v468 = (_QWORD *)(v473 + 8 * (v472 >> 6));
                if ((result != 0) == ((*v468 >> v472) & 1))
                  break;
                if (!result)
                  goto LABEL_472;
              }
              v474 = v469 + 63;
              v475 = v473 - 8;
              v476 = (v474 >> 3) & 0x3FFFFFF8;
              v477 = v470 - 8;
              while (v476)
              {
                v478 = *(__int128 **)(v477 + v476);
                result = *(_QWORD *)(v475 + v476);
                v476 -= 8;
                if (v478 != (__int128 *)result)
                {
                  if ((unint64_t)v478 <= result)
                    goto LABEL_457;
                  break;
                }
              }
LABEL_472:
              *(_QWORD *)v463 = v462;
              *(_QWORD *)(v463 + 8) = v458;
              *(_OWORD *)(v463 + 16) = v509;
              *(_DWORD *)(v463 + 32) = v457;
            }
LABEL_473:
            v256 = v7 + 40;
            if (v7 + 40 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v295 = (unint64_t)(v11 - 2) >> 1;
          v296 = v295;
LABEL_298:
          v297 = v296;
          if (v295 < v296)
            goto LABEL_356;
          v298 = (2 * v296) | 1;
          v299 = v9 + 40 * v298;
          if (2 * v297 + 2 >= v11)
            goto LABEL_306;
          v300 = *(_DWORD *)(v299 + 72);
          v301 = *(_DWORD *)(v9 + 40 * v298 + 32);
          if (v301 == v300)
          {
            v302 = *(_QWORD *)(v9 + 40 * v298 + 8);
            v303 = *(_QWORD *)(v299 + 48);
            v304 = (_QWORD *)(v303 + 24);
            v305 = *(unsigned int *)(v302 + 32);
            if (v305 > 0x40)
            {
              v364 = *(_QWORD *)(v302 + 24);
              v365 = *(_QWORD *)(v364 + 8 * ((v305 - 1) >> 6)) & (1 << (v305 - 1));
              v366 = *(_DWORD *)(v303 + 32);
              v367 = v366 - 1;
              v368 = *(_QWORD *)(v303 + 24);
              if (v366 >= 0x41)
                v304 = (_QWORD *)(v368 + 8 * (v367 >> 6));
              if ((((v365 != 0) ^ (*v304 >> v367)) & 1) != 0)
              {
                v299 += 40 * (v365 != 0);
                if (!v365)
                  goto LABEL_306;
                goto LABEL_305;
              }
              v375 = v305 + 63;
              v376 = v368 - 8;
              v377 = (v375 >> 3) & 0x3FFFFFF8;
              v378 = v364 - 8;
              do
              {
                if (!v377)
                  goto LABEL_306;
                v379 = *(_QWORD *)(v378 + v377);
                v380 = *(_QWORD *)(v376 + v377);
                v377 -= 8;
              }
              while (v379 == v380);
              v306 = v379 <= v380;
            }
            else
            {
              v306 = (uint64_t)(*(_QWORD *)(v302 + 24) << -(char)v305) >> -(char)v305 < (uint64_t)(*v304 << -(char)v305) >> -(char)v305;
            }
          }
          else
          {
            v306 = v301 > v300;
          }
          v299 += 40 * v306;
          if (!v306)
          {
LABEL_306:
            v307 = v9 + 40 * v297;
            v308 = *(_DWORD *)(v307 + 32);
            v309 = *(_DWORD *)(v299 + 32);
            if (v309 == v308)
            {
              v310 = *(_QWORD *)(v299 + 8);
              v311 = *(_QWORD *)(v9 + 40 * v297 + 8);
              v312 = (_QWORD *)(v311 + 24);
              v313 = *(unsigned int *)(v310 + 32);
              if (v313 > 0x40)
              {
                v359 = *(_QWORD *)(v310 + 24);
                v360 = *(_QWORD *)(v359 + 8 * ((v313 - 1) >> 6)) & (1 << (v313 - 1));
                v361 = *(_DWORD *)(v311 + 32);
                v362 = v361 - 1;
                v363 = *(_QWORD *)(v311 + 24);
                if (v361 >= 0x41)
                  v312 = (_QWORD *)(v363 + 8 * (v362 >> 6));
                if ((v360 != 0) == ((*v312 >> v362) & 1))
                {
                  v369 = v313 + 63;
                  v370 = v363 - 8;
                  v371 = (v369 >> 3) & 0x3FFFFFF8;
                  v372 = v359 - 8;
                  do
                  {
                    if (!v371)
                      goto LABEL_312;
                    v373 = *(_QWORD *)(v372 + v371);
                    v374 = *(_QWORD *)(v370 + v371);
                    v371 -= 8;
                  }
                  while (v373 == v374);
                  if (v373 <= v374)
                    goto LABEL_356;
                }
                else if (v360)
                {
                  goto LABEL_356;
                }
              }
              else if ((uint64_t)(*(_QWORD *)(v310 + 24) << -(char)v313) >> -(char)v313 < (uint64_t)(*v312 << -(char)v313) >> -(char)v313)
              {
                goto LABEL_356;
              }
            }
            else
            {
              if (v309 > v308)
                goto LABEL_356;
              v311 = *(_QWORD *)(v307 + 8);
            }
LABEL_312:
            v314 = *(_QWORD *)v307;
            v506 = *(_OWORD *)(v307 + 16);
            v315 = *(_OWORD *)v299;
            v316 = *(_OWORD *)(v299 + 16);
            *(_DWORD *)(v307 + 32) = *(_DWORD *)(v299 + 32);
            *(_OWORD *)v307 = v315;
            *(_OWORD *)(v307 + 16) = v316;
            if (v295 < v298)
              goto LABEL_355;
            while (1)
            {
              v317 = v299;
              v318 = 2 * v298;
              v298 = (2 * v298) | 1;
              v299 = v9 + 40 * v298;
              v319 = v318 + 2;
              if (v319 < v11)
              {
                v320 = *(_DWORD *)(v299 + 72);
                v321 = *(_DWORD *)(v9 + 40 * v298 + 32);
                if (v321 == v320)
                {
                  v322 = *(_QWORD *)(v9 + 40 * v298 + 8);
                  v323 = *(_QWORD *)(v299 + 48);
                  v324 = (_QWORD *)(v323 + 24);
                  v325 = *(unsigned int *)(v322 + 32);
                  if (v325 > 0x40)
                  {
                    v342 = *(_QWORD *)(v322 + 24);
                    v343 = *(_QWORD *)(v342 + 8 * ((v325 - 1) >> 6)) & (1 << (v325 - 1));
                    v344 = *(_DWORD *)(v323 + 32);
                    v345 = v344 - 1;
                    v346 = *(_QWORD *)(v323 + 24);
                    if (v344 >= 0x41)
                      v324 = (_QWORD *)(v346 + 8 * (v345 >> 6));
                    if ((v343 != 0) == ((*v324 >> v345) & 1))
                    {
                      v353 = v325 + 63;
                      v354 = v346 - 8;
                      v355 = (v353 >> 3) & 0x3FFFFFF8;
                      v356 = v342 - 8;
                      do
                      {
                        if (!v355)
                        {
                          v329 = 0;
                          goto LABEL_319;
                        }
                        v357 = *(_QWORD *)(v356 + v355);
                        v358 = *(_QWORD *)(v354 + v355);
                        v355 -= 8;
                      }
                      while (v357 == v358);
                      if (v357 > v358)
                        v329 = 1;
                      else
                        v329 = -1;
                    }
                    else if (v343)
                    {
                      v329 = -1;
                    }
                    else
                    {
                      v329 = 1;
                    }
                  }
                  else
                  {
                    v326 = -v325;
                    v327 = (uint64_t)(*(_QWORD *)(v322 + 24) << v326) >> v326;
                    v328 = (uint64_t)(*v324 << v326) >> v326;
                    v77 = v327 < v328;
                    v329 = v327 > v328;
                    if (v77)
                      v329 = -1;
                  }
LABEL_319:
                  v330 = v329 >> 31;
                }
                else
                {
                  v330 = v321 > v320;
                }
                v299 += 40 * v330;
                if (v330)
                  v298 = v319;
              }
              v331 = *(_DWORD *)(v299 + 32);
              if (v331 == v308)
              {
                v332 = *(_QWORD *)(v299 + 8);
                v333 = *(unsigned int *)(v332 + 32);
                if (v333 > 0x40)
                {
                  v336 = *(_QWORD *)(v332 + 24);
                  v337 = *(_QWORD *)(v336 + 8 * ((v333 - 1) >> 6)) & (1 << (v333 - 1));
                  v338 = *(_DWORD *)(v311 + 32);
                  v339 = v338 - 1;
                  v340 = *(_QWORD *)(v311 + 24);
                  if (v338 >= 0x41)
                    v341 = (_QWORD *)(v340 + 8 * (v339 >> 6));
                  else
                    v341 = (_QWORD *)(v311 + 24);
                  if ((v337 != 0) == ((*v341 >> v339) & 1))
                  {
                    v347 = v333 + 63;
                    v348 = v340 - 8;
                    v349 = (v347 >> 3) & 0x3FFFFFF8;
                    v350 = v336 - 8;
                    do
                    {
                      if (!v349)
                        goto LABEL_328;
                      v351 = *(_QWORD *)(v350 + v349);
                      v352 = *(_QWORD *)(v348 + v349);
                      v349 -= 8;
                    }
                    while (v351 == v352);
                    if (v351 <= v352)
                    {
LABEL_354:
                      v299 = v317;
LABEL_355:
                      *(_QWORD *)v299 = v314;
                      *(_QWORD *)(v299 + 8) = v311;
                      *(_OWORD *)(v299 + 16) = v506;
                      *(_DWORD *)(v299 + 32) = v308;
LABEL_356:
                      v296 = v297 - 1;
                      if (!v297)
                      {
                        while (2)
                        {
                          v381 = 0;
                          v517 = *(_QWORD *)(v9 + 32);
                          v507 = *(_OWORD *)v9;
                          v513 = *(_OWORD *)(v9 + 16);
                          v382 = v9;
                          do
                          {
                            result = v381 + 1;
                            v383 = v382 + 40 * (v381 + 1);
                            v384 = (2 * v381) | 1;
                            v385 = 2 * v381 + 2;
                            if (v385 < v11)
                            {
                              v386 = *(_DWORD *)(v383 + 72);
                              v387 = *(_DWORD *)(v382 + 40 * result + 32);
                              if (v387 == v386)
                              {
                                v388 = *(_QWORD *)(v382 + 40 * result + 8);
                                v389 = *(_QWORD *)(v383 + 48);
                                v390 = (_QWORD *)(v389 + 24);
                                v391 = *(unsigned int *)(v388 + 32);
                                if (v391 > 0x40)
                                {
                                  v398 = *(_QWORD *)(v388 + 24);
                                  v399 = *(_QWORD *)(v398 + 8 * ((v391 - 1) >> 6)) & (1 << (v391 - 1));
                                  v400 = *(_DWORD *)(v389 + 32);
                                  v401 = v400 - 1;
                                  v402 = *(_QWORD *)(v389 + 24);
                                  if (v400 >= 0x41)
                                    v390 = (_QWORD *)(v402 + 8 * (v401 >> 6));
                                  if ((v399 != 0) == ((*v390 >> v401) & 1))
                                  {
                                    v403 = v391 + 63;
                                    v404 = v402 - 8;
                                    v405 = (v403 >> 3) & 0x3FFFFFF8;
                                    v406 = v398 - 8;
                                    do
                                    {
                                      if (!v405)
                                      {
                                        v395 = 0;
                                        goto LABEL_384;
                                      }
                                      v407 = *(_QWORD *)(v406 + v405);
                                      v408 = *(_QWORD *)(v404 + v405);
                                      v405 -= 8;
                                    }
                                    while (v407 == v408);
                                    if (v407 > v408)
                                      v395 = 1;
                                    else
                                      v395 = -1;
                                  }
                                  else if (v399)
                                  {
                                    v395 = -1;
                                  }
                                  else
                                  {
                                    v395 = 1;
                                  }
                                }
                                else
                                {
                                  v392 = -v391;
                                  v393 = (uint64_t)(*(_QWORD *)(v388 + 24) << v392) >> v392;
                                  v394 = (uint64_t)(*v390 << v392) >> v392;
                                  v77 = v393 < v394;
                                  v395 = v393 > v394;
                                  if (v77)
                                    v395 = -1;
                                }
LABEL_384:
                                result = v395 >> 31;
                              }
                              else
                              {
                                result = v387 > v386;
                              }
                              v383 += 40 * result;
                              if ((_DWORD)result)
                                v384 = v385;
                            }
                            v396 = *(_OWORD *)v383;
                            v397 = *(_OWORD *)(v383 + 16);
                            *(_DWORD *)(v382 + 32) = *(_DWORD *)(v383 + 32);
                            *(_OWORD *)v382 = v396;
                            *(_OWORD *)(v382 + 16) = v397;
                            v382 = v383;
                            v381 = v384;
                          }
                          while (v384 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
                          a2 -= 40;
                          if (v383 == a2)
                          {
                            *(_DWORD *)(v383 + 32) = v517;
                            *(_OWORD *)v383 = v507;
                            *(_OWORD *)(v383 + 16) = v513;
                            goto LABEL_415;
                          }
                          v409 = *(_OWORD *)a2;
                          v410 = *(_OWORD *)(a2 + 16);
                          *(_DWORD *)(v383 + 32) = *(_DWORD *)(a2 + 32);
                          *(_OWORD *)v383 = v409;
                          *(_OWORD *)(v383 + 16) = v410;
                          *(_DWORD *)(a2 + 32) = v517;
                          *(_OWORD *)a2 = v507;
                          *(_OWORD *)(a2 + 16) = v513;
                          v411 = v383 - v9 + 40;
                          if (v411 < 41)
                            goto LABEL_415;
                          v412 = v411 / 0x28uLL - 2;
                          v413 = v412 >> 1;
                          v414 = *(_DWORD *)(v383 + 32);
                          v415 = *(_DWORD *)(v9 + 40 * (v412 >> 1) + 32);
                          if (v415 != v414)
                          {
                            if (v415 <= v414)
                              goto LABEL_415;
                            v417 = *(_QWORD *)(v383 + 8);
                            goto LABEL_412;
                          }
                          v416 = *(_QWORD *)(v9 + 40 * v413 + 8);
                          v417 = *(_QWORD *)(v383 + 8);
                          v418 = (_QWORD *)(v417 + 24);
                          v419 = *(unsigned int *)(v416 + 32);
                          if (v419 > 0x40)
                          {
                            result = *(_QWORD *)(v416 + 24);
                            v444 = *(_QWORD *)(result + 8 * ((v419 - 1) >> 6)) & (1 << (v419 - 1));
                            v445 = *(_DWORD *)(v417 + 32);
                            v446 = v445 - 1;
                            v447 = *(_QWORD *)(v417 + 24);
                            if (v445 >= 0x41)
                              v418 = (_QWORD *)(v447 + 8 * (v446 >> 6));
                            if ((v444 != 0) != ((*v418 >> v446) & 1))
                            {
                              if (!v444)
                                goto LABEL_415;
                              goto LABEL_412;
                            }
                            v448 = v419 + 63;
                            v449 = v447 - 8;
                            v450 = (v448 >> 3) & 0x3FFFFFF8;
                            result -= 8;
                            while (v450)
                            {
                              v451 = *(_QWORD *)(result + v450);
                              v452 = *(_QWORD *)(v449 + v450);
                              v450 -= 8;
                              if (v451 != v452)
                              {
                                if (v451 <= v452)
                                  goto LABEL_412;
                                break;
                              }
                            }
                          }
                          else
                          {
                            v420 = -v419;
                            result = (uint64_t)(*(_QWORD *)(v416 + 24) << v420) >> v420;
                            if ((uint64_t)result >= (uint64_t)(*v418 << v420) >> v420)
                              goto LABEL_415;
LABEL_412:
                            v421 = *(_QWORD *)v383;
                            v502 = *(_OWORD *)(v383 + 16);
                            v422 = *(_DWORD *)(v383 + 32);
                            result = v9 + 40 * v413;
                            v423 = *(_DWORD *)(result + 32);
                            v424 = *(_OWORD *)(result + 16);
                            *(_OWORD *)v383 = *(_OWORD *)result;
                            *(_OWORD *)(v383 + 16) = v424;
                            *(_DWORD *)(v383 + 32) = v423;
                            if (v412 >= 2)
                            {
                              while (1)
                              {
                                v426 = v413 - 1;
                                v413 = (v413 - 1) >> 1;
                                v427 = *(_DWORD *)(v9 + 40 * v413 + 32);
                                if (v427 == v422)
                                {
                                  v428 = *(_QWORD *)(v9 + 40 * v413 + 8);
                                  v429 = *(unsigned int *)(v428 + 32);
                                  if (v429 > 0x40)
                                  {
                                    v432 = *(_QWORD *)(v428 + 24);
                                    v433 = *(_QWORD *)(v432 + 8 * ((v429 - 1) >> 6)) & (1 << (v429 - 1));
                                    v434 = *(_DWORD *)(v417 + 32);
                                    v435 = v434 - 1;
                                    v436 = *(_QWORD *)(v417 + 24);
                                    if (v434 >= 0x41)
                                      v437 = (_QWORD *)(v436 + 8 * (v435 >> 6));
                                    else
                                      v437 = (_QWORD *)(v417 + 24);
                                    if ((v433 != 0) == ((*v437 >> v435) & 1))
                                    {
                                      v438 = v429 + 63;
                                      v439 = v436 - 8;
                                      v440 = (v438 >> 3) & 0x3FFFFFF8;
                                      v441 = v432 - 8;
                                      while (v440)
                                      {
                                        v442 = *(_QWORD *)(v441 + v440);
                                        v443 = *(_QWORD *)(v439 + v440);
                                        v440 -= 8;
                                        if (v442 != v443)
                                        {
                                          if (v442 <= v443)
                                            goto LABEL_423;
                                          goto LABEL_413;
                                        }
                                      }
                                      break;
                                    }
                                    if (!v433)
                                      break;
                                  }
                                  else if ((uint64_t)(*(_QWORD *)(v428 + 24) << -(char)v429) >> -(char)v429 >= (uint64_t)(*(_QWORD *)(v417 + 24) << -(char)v429) >> -(char)v429)
                                  {
                                    break;
                                  }
                                }
                                else if (v427 <= v422)
                                {
                                  break;
                                }
LABEL_423:
                                v425 = v9 + 40 * v413;
                                v430 = *(_OWORD *)v425;
                                v431 = *(_OWORD *)(v425 + 16);
                                *(_DWORD *)(result + 32) = *(_DWORD *)(v425 + 32);
                                *(_OWORD *)result = v430;
                                *(_OWORD *)(result + 16) = v431;
                                result = v425;
                                if (v426 <= 1)
                                  goto LABEL_414;
                              }
                            }
LABEL_413:
                            v425 = result;
LABEL_414:
                            *(_QWORD *)v425 = v421;
                            *(_QWORD *)(v425 + 8) = v417;
                            *(_OWORD *)(v425 + 16) = v502;
                            *(_DWORD *)(v425 + 32) = v422;
                          }
LABEL_415:
                          v77 = v11-- <= 2;
                          if (v77)
                            return result;
                          continue;
                        }
                      }
                      goto LABEL_298;
                    }
                  }
                  else if (v337)
                  {
                    goto LABEL_354;
                  }
                }
                else if ((uint64_t)(*(_QWORD *)(v332 + 24) << -(char)v333) >> -(char)v333 < (uint64_t)(*(_QWORD *)(v311 + 24) << -(char)v333) >> -(char)v333)
                {
                  goto LABEL_354;
                }
              }
              else if (v331 > v308)
              {
                goto LABEL_354;
              }
LABEL_328:
              v334 = *(_OWORD *)v299;
              v335 = *(_OWORD *)(v299 + 16);
              *(_DWORD *)(v317 + 32) = *(_DWORD *)(v299 + 32);
              *(_OWORD *)v317 = v334;
              *(_OWORD *)(v317 + 16) = v335;
              if (v295 < v298)
                goto LABEL_355;
            }
          }
LABEL_305:
          v298 = 2 * v297 + 2;
          goto LABEL_306;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 40 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1401)
        {
          result = (unint64_t)sub_1C550BFAC((__int128 *)v13, (__int128 *)v7, (__int128 *)(a2 - 40));
        }
        else
        {
          sub_1C550BFAC((__int128 *)v7, (__int128 *)v13, (__int128 *)(a2 - 40));
          v14 = 5 * v12;
          v15 = (__int128 *)(v7 + 40 * v12 - 40);
          sub_1C550BFAC((__int128 *)(v7 + 40), v15, (__int128 *)(a2 - 80));
          v16 = (__int128 *)(v7 + 40 + 8 * v14);
          sub_1C550BFAC((__int128 *)(v7 + 80), v16, (__int128 *)(a2 - 120));
          result = (unint64_t)sub_1C550BFAC(v15, (__int128 *)v13, v16);
          v515 = *(_QWORD *)(v7 + 32);
          v503 = *(_OWORD *)v7;
          v510 = *(_OWORD *)(v7 + 16);
          v17 = *(_OWORD *)v13;
          v18 = *(_OWORD *)(v13 + 16);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v13 + 32);
          *(_OWORD *)v7 = v17;
          *(_OWORD *)(v7 + 16) = v18;
          *(_DWORD *)(v13 + 32) = v515;
          *(_OWORD *)v13 = v503;
          *(_OWORD *)(v13 + 16) = v510;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(_DWORD *)(v7 + 32);
          v20 = *(_DWORD *)(v7 - 8);
          if (v20 == v19)
          {
            v21 = *(_QWORD *)(v7 - 32);
            v22 = *(_QWORD *)(v7 + 8);
            v23 = (_QWORD *)(v22 + 24);
            v24 = *(unsigned int *)(v21 + 32);
            if (v24 > 0x40)
            {
              v156 = *(_QWORD *)(v21 + 24);
              v157 = *(_QWORD *)(v156 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
              v158 = *(_DWORD *)(v22 + 32);
              v159 = v158 - 1;
              v160 = *(_QWORD *)(v22 + 24);
              result = v160 + 8 * ((v158 - 1) >> 6);
              if (v158 >= 0x41)
                v23 = (_QWORD *)(v160 + 8 * (v159 >> 6));
              if ((v157 != 0) == ((*v23 >> v159) & 1))
              {
                v161 = v24 + 63;
                v162 = v160 - 8;
                v163 = (v161 >> 3) & 0x3FFFFFF8;
                v164 = v156 - 8;
                do
                {
                  if (!v163)
                    goto LABEL_14;
                  v165 = *(_QWORD *)(v164 + v163);
                  v166 = *(_QWORD *)(v162 + v163);
                  v163 -= 8;
                }
                while (v165 == v166);
                if (v165 <= v166)
                  goto LABEL_20;
              }
              else if (v157)
              {
                goto LABEL_20;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v21 + 24) << -(char)v24) >> -(char)v24 < (uint64_t)(*v23 << -(char)v24) >> -(char)v24)
            {
              goto LABEL_20;
            }
          }
          else
          {
            if (v20 > v19)
              goto LABEL_20;
            v22 = *(_QWORD *)(v7 + 8);
          }
LABEL_14:
          v25 = *(_QWORD *)v7;
          v500 = *(_OWORD *)(v7 + 16);
          v26 = *(_DWORD *)(a2 - 8);
          if (v19 == v26)
          {
            v27 = *(_QWORD *)(a2 - 32);
            v28 = (_QWORD *)(v27 + 24);
            v29 = *(unsigned int *)(v22 + 32);
            if (v29 > 0x40)
            {
              v167 = *(_QWORD *)(v22 + 24);
              v168 = *(_QWORD *)(v167 + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
              result = *(unsigned int *)(v27 + 32);
              v169 = result - 1;
              v170 = *(_QWORD *)(v27 + 24);
              if (result >= 0x41)
                v28 = (_QWORD *)(v170 + 8 * (v169 >> 6));
              if ((v168 != 0) == ((*v28 >> v169) & 1))
              {
                v244 = v29 + 63;
                v245 = v170 - 8;
                v246 = (v244 >> 3) & 0x3FFFFFF8;
                v247 = v167 - 8;
                while (v246)
                {
                  v248 = *(_QWORD *)(v247 + v246);
                  v249 = *(_QWORD *)(v245 + v246);
                  v246 -= 8;
                  if (v248 != v249)
                  {
                    if (v248 <= v249)
                      goto LABEL_131;
                    break;
                  }
                }
              }
              else if (v168)
              {
LABEL_131:
                v138 = v7;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
LABEL_132:
                      while (1)
                      {
                        v9 = v138 + 40;
                        v139 = *(_DWORD *)(v138 + 72);
                        if (v19 == v139)
                          break;
                        v138 += 40;
                        if (v19 > v139)
                          goto LABEL_180;
                      }
                      v140 = *(_QWORD *)(v138 + 48);
                      v141 = (_QWORD *)(v140 + 24);
                      v142 = *(unsigned int *)(v22 + 32);
                      if (v142 > 0x40)
                        break;
                      v143 = -v142;
                      v144 = (uint64_t)(*(_QWORD *)(v22 + 24) << v143) >> v143;
                      v145 = (uint64_t)(*v141 << v143) >> v143;
                      v138 = v9;
                      if (v144 < v145)
                        goto LABEL_180;
                    }
                    v146 = *(_QWORD *)(v22 + 24);
                    v147 = *(_QWORD *)(v146 + 8 * ((v142 - 1) >> 6)) & (1 << (v142 - 1));
                    result = *(unsigned int *)(v140 + 32);
                    v148 = result - 1;
                    v149 = *(_QWORD *)(v140 + 24);
                    if (result >= 0x41)
                      v141 = (_QWORD *)(v149 + 8 * (v148 >> 6));
                    if ((v147 != 0) != ((*v141 >> v148) & 1))
                      break;
                    v150 = v142 + 63;
                    v151 = v149 - 8;
                    v152 = (v150 >> 3) & 0x3FFFFFF8;
                    v153 = v146 - 8;
                    do
                    {
                      if (!v152)
                      {
                        v138 = v9;
                        goto LABEL_132;
                      }
                      v154 = *(_QWORD *)(v153 + v152);
                      v155 = *(_QWORD *)(v151 + v152);
                      v152 -= 8;
                    }
                    while (v154 == v155);
                    v138 = v9;
                    if (v154 <= v155)
                      goto LABEL_180;
                  }
                  v138 = v9;
                }
                while (!v147);
                goto LABEL_180;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v29) >> -(char)v29 < (uint64_t)(*v28 << -(char)v29) >> -(char)v29)
            {
              goto LABEL_131;
            }
          }
          else if (v19 > v26)
          {
            goto LABEL_131;
          }
          v9 = v7 + 40;
          v171 = v7;
          while (v9 < a2)
          {
            v172 = v171;
            v171 = v9;
            v173 = *(_DWORD *)(v172 + 72);
            if (v19 == v173)
            {
              v174 = *(_QWORD *)(v172 + 48);
              v175 = (_QWORD *)(v174 + 24);
              v176 = *(unsigned int *)(v22 + 32);
              if (v176 > 0x40)
              {
                v177 = *(_QWORD *)(v22 + 24);
                v178 = *(_QWORD *)(v177 + 8 * ((v176 - 1) >> 6)) & (1 << (v176 - 1));
                result = v178 != 0;
                v179 = *(_DWORD *)(v174 + 32);
                v180 = v179 - 1;
                v181 = *(_QWORD *)(v174 + 24);
                if (v179 >= 0x41)
                  v175 = (_QWORD *)(v181 + 8 * (v180 >> 6));
                if ((_DWORD)result == ((*v175 >> v180) & 1))
                {
                  v182 = v176 + 63;
                  v183 = v181 - 8;
                  v184 = (v182 >> 3) & 0x3FFFFFF8;
                  v185 = v177 - 8;
                  while (v184)
                  {
                    v186 = *(_QWORD *)(v185 + v184);
                    v187 = *(_QWORD *)(v183 + v184);
                    v184 -= 8;
                    if (v186 != v187)
                    {
                      if (v186 > v187)
                        break;
                      goto LABEL_180;
                    }
                  }
                }
                else if (v178)
                {
                  break;
                }
              }
              else if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v176) >> -(char)v176 < (uint64_t)(*v175 << -(char)v176) >> -(char)v176)
              {
                break;
              }
            }
            else if (v19 > v173)
            {
              break;
            }
            v9 += 40;
          }
LABEL_180:
          v188 = a2;
          if (v9 >= a2)
            goto LABEL_231;
          v188 = a2;
          while (1)
          {
            v189 = v188;
            v188 -= 40;
            if (v19 != v26)
            {
              if (v19 <= v26)
                goto LABEL_231;
              goto LABEL_187;
            }
            v190 = *(_QWORD *)(v189 - 32);
            v191 = (_QWORD *)(v190 + 24);
            v192 = *(unsigned int *)(v22 + 32);
            if (v192 <= 0x40)
            {
              if ((uint64_t)(*(_QWORD *)(v22 + 24) << -(char)v192) >> -(char)v192 >= (uint64_t)(*v191 << -(char)v192) >> -(char)v192)
                goto LABEL_231;
              goto LABEL_187;
            }
            v193 = *(_QWORD *)(v22 + 24);
            v194 = *(_QWORD *)(v193 + 8 * ((v192 - 1) >> 6)) & (1 << (v192 - 1));
            result = v194 != 0;
            v195 = *(_DWORD *)(v190 + 32);
            v196 = v195 - 1;
            v197 = *(_QWORD *)(v190 + 24);
            if (v195 >= 0x41)
              v191 = (_QWORD *)(v197 + 8 * (v196 >> 6));
            if ((_DWORD)result == ((*v191 >> v196) & 1))
              break;
            if (!v194)
              goto LABEL_231;
LABEL_187:
            v26 = *(_DWORD *)(v189 - 48);
          }
          v198 = v192 + 63;
          v199 = v197 - 8;
          v200 = (v198 >> 3) & 0x3FFFFFF8;
          v201 = v193 - 8;
          while (v200)
          {
            v202 = *(_QWORD *)(v201 + v200);
            v203 = *(_QWORD *)(v199 + v200);
            v200 -= 8;
            if (v202 != v203)
            {
              if (v202 <= v203)
                goto LABEL_187;
              break;
            }
          }
LABEL_231:
          while (v9 < v188)
          {
            v516 = *(_QWORD *)(v9 + 32);
            v504 = *(_OWORD *)v9;
            v512 = *(_OWORD *)(v9 + 16);
            v204 = *(_OWORD *)v188;
            v205 = *(_OWORD *)(v188 + 16);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v188 + 32);
            *(_OWORD *)v9 = v204;
            *(_OWORD *)(v9 + 16) = v205;
            *(_DWORD *)(v188 + 32) = v516;
            *(_OWORD *)v188 = v504;
            *(_OWORD *)(v188 + 16) = v512;
LABEL_199:
            v206 = v9;
            do
            {
              while (1)
              {
LABEL_200:
                while (1)
                {
                  v9 = v206 + 40;
                  v207 = *(_DWORD *)(v206 + 72);
                  if (v19 == v207)
                    break;
                  v206 += 40;
                  if (v19 > v207)
                    goto LABEL_215;
                }
                v208 = *(_QWORD *)(v206 + 48);
                v209 = (_QWORD *)(v208 + 24);
                v210 = *(unsigned int *)(v22 + 32);
                if (v210 > 0x40)
                  break;
                v211 = -v210;
                v212 = (uint64_t)(*(_QWORD *)(v22 + 24) << v211) >> v211;
                v213 = (uint64_t)(*v209 << v211) >> v211;
                v206 = v9;
                if (v212 < v213)
                  goto LABEL_215;
              }
              v214 = *(_QWORD *)(v22 + 24);
              v215 = *(_QWORD *)(v214 + 8 * ((v210 - 1) >> 6)) & (1 << (v210 - 1));
              result = *(unsigned int *)(v208 + 32);
              v216 = result - 1;
              v217 = *(_QWORD *)(v208 + 24);
              if (result >= 0x41)
                v209 = (_QWORD *)(v217 + 8 * (v216 >> 6));
              if ((v215 != 0) == ((*v209 >> v216) & 1))
              {
                v218 = v210 + 63;
                v219 = v217 - 8;
                v220 = (v218 >> 3) & 0x3FFFFFF8;
                v221 = v214 - 8;
                while (v220)
                {
                  v222 = *(_QWORD *)(v221 + v220);
                  v223 = *(_QWORD *)(v219 + v220);
                  v220 -= 8;
                  if (v222 != v223)
                  {
                    v206 = v9;
                    if (v222 > v223)
                      goto LABEL_200;
                    goto LABEL_215;
                  }
                }
                goto LABEL_199;
              }
              v206 = v9;
            }
            while (!v215);
LABEL_215:
            v224 = v188;
            while (1)
            {
              while (1)
              {
LABEL_216:
                while (1)
                {
                  v188 = v224 - 40;
                  v225 = *(_DWORD *)(v224 - 8);
                  if (v19 == v225)
                    break;
                  v224 -= 40;
                  if (v19 <= v225)
                    goto LABEL_231;
                }
                v226 = *(_QWORD *)(v224 - 32);
                v227 = (_QWORD *)(v226 + 24);
                v228 = *(unsigned int *)(v22 + 32);
                if (v228 > 0x40)
                  break;
                v229 = -v228;
                v230 = (uint64_t)(*(_QWORD *)(v22 + 24) << v229) >> v229;
                v231 = (uint64_t)(*v227 << v229) >> v229;
                v224 = v188;
                if (v230 >= v231)
                  goto LABEL_231;
              }
              v232 = *(_QWORD *)(v22 + 24);
              v233 = *(_QWORD *)(v232 + 8 * ((v228 - 1) >> 6)) & (1 << (v228 - 1));
              result = *(unsigned int *)(v226 + 32);
              v234 = result - 1;
              v235 = *(_QWORD *)(v226 + 24);
              if (result >= 0x41)
                v227 = (_QWORD *)(v235 + 8 * (v234 >> 6));
              if ((v233 != 0) == ((*v227 >> v234) & 1))
                break;
              v224 = v188;
              if (!v233)
                goto LABEL_231;
            }
            v236 = v228 + 63;
            v237 = v235 - 8;
            v238 = (v236 >> 3) & 0x3FFFFFF8;
            v239 = v232 - 8;
            while (v238)
            {
              v240 = *(_QWORD *)(v239 + v238);
              v241 = *(_QWORD *)(v237 + v238);
              v238 -= 8;
              if (v240 != v241)
              {
                v224 = v188;
                if (v240 <= v241)
                  goto LABEL_216;
                goto LABEL_231;
              }
            }
          }
          if (v9 - 40 != v7)
          {
            v242 = *(_OWORD *)(v9 - 40);
            v243 = *(_OWORD *)(v9 - 24);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v9 - 8);
            *(_OWORD *)v7 = v242;
            *(_OWORD *)(v7 + 16) = v243;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 40) = v25;
          *(_QWORD *)(v9 - 32) = v22;
          *(_OWORD *)(v9 - 24) = v500;
          *(_DWORD *)(v9 - 8) = v19;
          continue;
        }
        v19 = *(_DWORD *)(v7 + 32);
LABEL_20:
        v30 = *(_QWORD *)v7;
        v31 = *(_QWORD *)(v7 + 8);
        v501 = *(_OWORD *)(v7 + 16);
        v32 = (_QWORD *)(v31 + 24);
        v33 = v7;
        while (1)
        {
          while (1)
          {
LABEL_21:
            while (1)
            {
              v34 = v33;
              v33 += 40;
              v35 = *(_DWORD *)(v34 + 72);
              if (v35 == v19)
                break;
              if (v35 <= v19)
                goto LABEL_37;
            }
            v36 = *(_QWORD *)(v34 + 48);
            v37 = *(unsigned int *)(v36 + 32);
            if (v37 > 0x40)
              break;
            if ((uint64_t)(*(_QWORD *)(v36 + 24) << -(char)v37) >> -(char)v37 >= (uint64_t)(*v32 << -(char)v37) >> -(char)v37)
              goto LABEL_37;
          }
          v38 = *(_QWORD *)(v36 + 24);
          v39 = *(_QWORD *)(v38 + 8 * ((v37 - 1) >> 6)) & (1 << (v37 - 1));
          v40 = *(_DWORD *)(v31 + 32);
          v41 = v40 - 1;
          v42 = *(_QWORD *)(v31 + 24);
          v43 = (_QWORD *)(v40 >= 0x41 ? v42 + 8 * (v41 >> 6) : v31 + 24);
          if ((v39 != 0) == ((*v43 >> v41) & 1))
            break;
          if (!v39)
            goto LABEL_37;
        }
        v44 = v37 + 63;
        v45 = v42 - 8;
        v46 = (v44 >> 3) & 0x3FFFFFF8;
        v47 = v38 - 8;
        while (v46)
        {
          v48 = *(_QWORD *)(v47 + v46);
          v49 = *(_QWORD *)(v45 + v46);
          v46 -= 8;
          if (v48 != v49)
          {
            if (v48 <= v49)
              goto LABEL_21;
            break;
          }
        }
LABEL_37:
        v50 = a2;
        if (v34 == v7)
        {
          v51 = a2;
          if (v33 < a2)
          {
            v70 = a2;
            do
            {
              while (1)
              {
                v51 = v70 - 40;
                v71 = *(_DWORD *)(v70 - 8);
                if (v71 == v19)
                  break;
                v79 = v71 > v19 || v33 >= v51;
                v70 -= 40;
                if (v79)
                  goto LABEL_86;
              }
              v72 = *(_QWORD *)(v70 - 32);
              v73 = *(unsigned int *)(v72 + 32);
              if (v73 > 0x40)
              {
                v80 = *(_QWORD *)(v72 + 24);
                v81 = *(_QWORD *)(v80 + 8 * ((v73 - 1) >> 6)) & (1 << (v73 - 1));
                v82 = *(_DWORD *)(v31 + 32);
                v83 = v82 - 1;
                v84 = *(_QWORD *)(v31 + 24);
                if (v82 >= 0x41)
                  v85 = (_QWORD *)(v84 + 8 * (v83 >> 6));
                else
                  v85 = (_QWORD *)(v31 + 24);
                if ((v81 != 0) == ((*v85 >> v83) & 1))
                {
                  v86 = v73 + 63;
                  v87 = v84 - 8;
                  v88 = (v86 >> 3) & 0x3FFFFFF8;
                  v89 = v80 - 8;
                  do
                  {
                    if (!v88)
                    {
                      v78 = 0;
                      goto LABEL_63;
                    }
                    v90 = *(_QWORD *)(v89 + v88);
                    v91 = *(_QWORD *)(v87 + v88);
                    v88 -= 8;
                  }
                  while (v90 == v91);
                  if (v90 > v91)
                    v78 = 1;
                  else
                    v78 = -1;
                }
                else if (v81)
                {
                  v78 = -1;
                }
                else
                {
                  v78 = 1;
                }
              }
              else
              {
                v74 = -v73;
                v75 = (uint64_t)(*(_QWORD *)(v72 + 24) << v74) >> v74;
                v76 = (uint64_t)(*v32 << v74) >> v74;
                v77 = v75 < v76;
                v78 = v75 > v76;
                if (v77)
                  v78 = -1;
              }
LABEL_63:
              if (v78 < 0)
                break;
              v70 = v51;
            }
            while (v33 < v51);
          }
        }
        else
        {
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_38:
                while (1)
                {
                  v51 = v50 - 40;
                  v52 = *(_DWORD *)(v50 - 8);
                  if (v52 == v19)
                    break;
                  v50 -= 40;
                  if (v52 > v19)
                    goto LABEL_86;
                }
                v53 = *(_QWORD *)(v50 - 32);
                v54 = *(unsigned int *)(v53 + 32);
                if (v54 > 0x40)
                  break;
                v55 = -v54;
                v56 = (uint64_t)(*(_QWORD *)(v53 + 24) << v55) >> v55;
                v57 = (uint64_t)(*v32 << v55) >> v55;
                v50 = v51;
                if (v56 < v57)
                  goto LABEL_86;
              }
              v58 = *(_QWORD *)(v53 + 24);
              v59 = *(_QWORD *)(v58 + 8 * ((v54 - 1) >> 6)) & (1 << (v54 - 1));
              v60 = *(_DWORD *)(v31 + 32);
              v61 = v60 - 1;
              v62 = *(_QWORD *)(v31 + 24);
              v63 = (_QWORD *)(v60 >= 0x41 ? v62 + 8 * (v61 >> 6) : v31 + 24);
              if ((v59 != 0) != ((*v63 >> v61) & 1))
                break;
              v64 = v54 + 63;
              v65 = v62 - 8;
              v66 = (v64 >> 3) & 0x3FFFFFF8;
              v67 = v58 - 8;
              do
              {
                if (!v66)
                {
                  v50 = v51;
                  goto LABEL_38;
                }
                v68 = *(_QWORD *)(v67 + v66);
                v69 = *(_QWORD *)(v65 + v66);
                v66 -= 8;
              }
              while (v68 == v69);
              v50 = v51;
              if (v68 <= v69)
                goto LABEL_86;
            }
            v50 = v51;
          }
          while (!v59);
        }
LABEL_86:
        v9 = v33;
        if (v33 < v51)
        {
          v92 = v51;
          do
          {
            v93 = v92;
            v94 = *(_OWORD *)v9;
            v511 = *(_OWORD *)(v9 + 16);
            v95 = *(_QWORD *)(v9 + 32);
            v97 = *(_OWORD *)v93;
            v96 = *(_OWORD *)(v93 + 16);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v93 + 32);
            *(_OWORD *)v9 = v97;
            *(_OWORD *)(v9 + 16) = v96;
            *(_DWORD *)(v93 + 32) = v95;
            *(_OWORD *)v93 = v94;
            *(_OWORD *)(v93 + 16) = v511;
            v98 = v9;
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    v9 = v98 + 40;
                    v99 = *(_DWORD *)(v98 + 72);
                    if (v99 == v19)
                      break;
                    v98 += 40;
                    if (v99 <= v19)
                      goto LABEL_120;
                  }
                  v100 = *(_QWORD *)(v98 + 48);
                  v101 = *(unsigned int *)(v100 + 32);
                  if (v101 > 0x40)
                    break;
                  v102 = -v101;
                  v103 = (uint64_t)(*(_QWORD *)(v100 + 24) << v102) >> v102;
                  v104 = (uint64_t)(*v32 << v102) >> v102;
                  v98 = v9;
                  if (v103 >= v104)
                    goto LABEL_120;
                }
                v105 = *(_QWORD *)(v100 + 24);
                v106 = *(_QWORD *)(v105 + 8 * ((v101 - 1) >> 6)) & (1 << (v101 - 1));
                v107 = *(_DWORD *)(v31 + 32);
                v108 = v107 - 1;
                v109 = *(_QWORD *)(v31 + 24);
                v110 = (_QWORD *)(v107 >= 0x41 ? v109 + 8 * (v108 >> 6) : v31 + 24);
                if ((v106 != 0) == ((*v110 >> v108) & 1))
                  break;
                v98 = v9;
                if (!v106)
                  goto LABEL_120;
              }
              v111 = v101 + 63;
              v112 = v109 - 8;
              v113 = (v111 >> 3) & 0x3FFFFFF8;
              v114 = v105 - 8;
              do
              {
                if (!v113)
                  goto LABEL_120;
                v115 = *(_QWORD *)(v114 + v113);
                v116 = *(_QWORD *)(v112 + v113);
                v113 -= 8;
              }
              while (v115 == v116);
              v98 = v9;
            }
            while (v115 <= v116);
            do
            {
              while (1)
              {
LABEL_120:
                while (1)
                {
                  v92 = v93 - 40;
                  v129 = *(_DWORD *)(v93 - 8);
                  if (v129 == v19)
                    break;
                  v93 -= 40;
                  if (v129 > v19)
                    goto LABEL_123;
                }
                v130 = *(_QWORD *)(v93 - 32);
                v131 = *(unsigned int *)(v130 + 32);
                if (v131 <= 0x40)
                  break;
                v117 = *(_QWORD *)(v130 + 24);
                v118 = *(_QWORD *)(v117 + 8 * ((v131 - 1) >> 6)) & (1 << (v131 - 1));
                v119 = *(_DWORD *)(v31 + 32);
                v120 = v119 - 1;
                v121 = *(_QWORD *)(v31 + 24);
                if (v119 >= 0x41)
                  v122 = (_QWORD *)(v121 + 8 * (v120 >> 6));
                else
                  v122 = (_QWORD *)(v31 + 24);
                if ((v118 != 0) == ((*v122 >> v120) & 1))
                {
                  v123 = v131 + 63;
                  v124 = v121 - 8;
                  v125 = (v123 >> 3) & 0x3FFFFFF8;
                  v126 = v117 - 8;
                  do
                  {
                    if (!v125)
                    {
                      v93 = v92;
                      goto LABEL_120;
                    }
                    v127 = *(_QWORD *)(v126 + v125);
                    v128 = *(_QWORD *)(v124 + v125);
                    v125 -= 8;
                  }
                  while (v127 == v128);
                  v93 = v92;
                  if (v127 <= v128)
                    goto LABEL_123;
                }
                else
                {
                  v93 = v92;
                  if (v118)
                    goto LABEL_123;
                }
              }
              v132 = -v131;
              v133 = (uint64_t)(*(_QWORD *)(v130 + 24) << v132) >> v132;
              v134 = (uint64_t)(*v32 << v132) >> v132;
              v93 = v92;
            }
            while (v133 >= v134);
LABEL_123:
            ;
          }
          while (v9 < v92);
        }
        if (v9 - 40 != v7)
        {
          v135 = *(_OWORD *)(v9 - 40);
          v136 = *(_OWORD *)(v9 - 24);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v9 - 8);
          *(_OWORD *)v7 = v135;
          *(_OWORD *)(v7 + 16) = v136;
        }
        *(_QWORD *)(v9 - 40) = v30;
        *(_QWORD *)(v9 - 32) = v31;
        *(_OWORD *)(v9 - 24) = v501;
        *(_DWORD *)(v9 - 8) = v19;
        if (v33 < v51)
        {
LABEL_129:
          result = sub_1C5D3AD1C(v7, v9 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v137 = sub_1C5D3C9B4(v7, v9 - 40);
        result = sub_1C5D3C9B4(v9, a2);
        if (!(_DWORD)result)
        {
          if (v137)
            continue;
          goto LABEL_129;
        }
        a2 = v9 - 40;
        if (!v137)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5D3C9B4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a1 + 32);
      v7 = *(_DWORD *)(a2 - 8);
      if (v7 == v6)
      {
        v8 = *(_QWORD *)(a2 - 32);
        v9 = *(_QWORD *)(a1 + 8);
        v10 = (_QWORD *)(v9 + 24);
        v11 = *(unsigned int *)(v8 + 32);
        if (v11 > 0x40)
        {
          v57 = *(_QWORD *)(v8 + 24);
          v58 = *(_QWORD *)(v57 + 8 * ((v11 - 1) >> 6)) & (1 << (v11 - 1));
          v59 = *(_DWORD *)(v9 + 32);
          v60 = v59 - 1;
          v61 = *(_QWORD *)(v9 + 24);
          if (v59 >= 0x41)
            v10 = (_QWORD *)(v61 + 8 * (v60 >> 6));
          if ((v58 != 0) == ((*v10 >> v60) & 1))
          {
            v62 = v11 + 63;
            v63 = v61 - 8;
            v64 = (v62 >> 3) & 0x3FFFFFF8;
            v65 = v57 - 8;
            do
            {
              if (!v64)
                return 1;
              v66 = *(_QWORD *)(v65 + v64);
              v67 = *(_QWORD *)(v63 + v64);
              v64 -= 8;
            }
            while (v66 == v67);
            if (v66 > v67)
              return 1;
          }
          else if (!v58)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v11) >> -(char)v11 >= (uint64_t)(*v10 << -(char)v11) >> -(char)v11)
        {
          return result;
        }
      }
      else if (v7 <= v6)
      {
        return result;
      }
      v51 = a2 - 40;
      v52 = *(_QWORD *)(a1 + 32);
      v53 = *(_OWORD *)a1;
      v54 = *(_OWORD *)(a1 + 16);
      v55 = *(_DWORD *)(a2 - 8);
      v56 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v56;
      *(_DWORD *)(a1 + 32) = v55;
      *(_OWORD *)v51 = v53;
      *(_OWORD *)(v51 + 16) = v54;
      *(_DWORD *)(v51 + 32) = v52;
      return 1;
    case 3uLL:
      sub_1C550BFAC((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1C550C8D4(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1C550BB64(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v12 = a1 + 80;
      sub_1C550BFAC((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(_DWORD *)(v12 + 32);
    v16 = *(_DWORD *)(v13 + 32);
    if (v16 != v15)
    {
      if (v16 <= v15)
        goto LABEL_33;
      v17 = *(_QWORD *)(v13 + 8);
      goto LABEL_14;
    }
    v17 = *(_QWORD *)(v13 + 8);
    v18 = *(_QWORD *)(v12 + 8);
    v19 = (_QWORD *)(v18 + 24);
    v20 = *(unsigned int *)(v17 + 32);
    if (v20 <= 0x40)
      break;
    v40 = *(_QWORD *)(v17 + 24);
    v41 = *(_QWORD *)(v40 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
    v42 = *(_DWORD *)(v18 + 32);
    v43 = v42 - 1;
    v44 = *(_QWORD *)(v18 + 24);
    if (v42 >= 0x41)
      v19 = (_QWORD *)(v44 + 8 * (v43 >> 6));
    if ((v41 != 0) != ((*v19 >> v43) & 1))
    {
      if (!v41)
        goto LABEL_33;
      goto LABEL_14;
    }
    v45 = v20 + 63;
    v46 = v44 - 8;
    v47 = (v45 >> 3) & 0x3FFFFFF8;
    v48 = v40 - 8;
    do
    {
      if (!v47)
        goto LABEL_33;
      v49 = *(_QWORD *)(v48 + v47);
      v50 = *(_QWORD *)(v46 + v47);
      v47 -= 8;
    }
    while (v49 == v50);
    if (v49 <= v50)
      goto LABEL_14;
LABEL_33:
    v12 = v13;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
  if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
    goto LABEL_33;
LABEL_14:
  v21 = *(_QWORD *)v13;
  v68 = *(_OWORD *)(v13 + 16);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
  v22 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v22;
  v23 = a1;
  if (v12 == a1)
    goto LABEL_32;
  while (1)
  {
    v24 = *(_DWORD *)(v12 - 8);
    if (v16 != v24)
    {
      if (v16 <= v24)
        goto LABEL_31;
      goto LABEL_20;
    }
    v25 = *(_QWORD *)(v12 - 32);
    v26 = (_QWORD *)(v25 + 24);
    v27 = *(unsigned int *)(v17 + 32);
    if (v27 <= 0x40)
    {
      if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v27) >> -(char)v27 >= (uint64_t)(*v26 << -(char)v27) >> -(char)v27)
        goto LABEL_31;
      goto LABEL_20;
    }
    v29 = *(_QWORD *)(v17 + 24);
    v30 = *(_QWORD *)(v29 + 8 * ((v27 - 1) >> 6)) & (1 << (v27 - 1));
    v31 = *(_DWORD *)(v25 + 32);
    v32 = v31 - 1;
    v33 = *(_QWORD *)(v25 + 24);
    if (v31 >= 0x41)
      v26 = (_QWORD *)(v33 + 8 * (v32 >> 6));
    if ((v30 != 0) == ((*v26 >> v32) & 1))
      break;
    if (!v30)
      goto LABEL_31;
LABEL_20:
    v28 = *(_OWORD *)(v12 - 24);
    *(_OWORD *)v12 = *(_OWORD *)(v12 - 40);
    *(_OWORD *)(v12 + 16) = v28;
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 - 8);
    v12 -= 40;
    if (v12 == a1)
    {
      v23 = a1;
      goto LABEL_32;
    }
  }
  v34 = v27 + 63;
  v35 = v33 - 8;
  v36 = (v34 >> 3) & 0x3FFFFFF8;
  v37 = v29 - 8;
  while (v36)
  {
    v38 = *(_QWORD *)(v37 + v36);
    v39 = *(_QWORD *)(v35 + v36);
    v36 -= 8;
    if (v38 != v39)
    {
      if (v38 <= v39)
        goto LABEL_20;
      break;
    }
  }
LABEL_31:
  v23 = v12;
LABEL_32:
  *(_QWORD *)v23 = v21;
  *(_QWORD *)(v23 + 8) = v17;
  *(_OWORD *)(v23 + 16) = v68;
  *(_DWORD *)(v23 + 32) = v16;
  if (++v14 != 8)
    goto LABEL_33;
  return v13 + 40 == a2;
}

uint64_t sub_1C5D3CDE0()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;
  int *v5;

  LOBYTE(v4) = 1;
  v5 = &v4;
  v3.n128_u64[1] = 43;
  LODWORD(v2) = 2;
  sub_1C63644FC((char **)&v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED824E10, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Generate low-precision inline sequences for some float libcalls";
  v3.n128_u64[1] = 63;
  v5 = &dword_1ED824E08;
  v4 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C63645A0((__int128 *)&v3, &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4E9AEF0, &qword_1ED824ED0, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4 = 66;
  v5 = &v4;
  v3.n128_u64[0] = (unint64_t)"Set the case probability threshold for peeling the case from a switch statement. A "
                                     "value greater than 100 will void this optimization";
  v3.n128_u64[1] = 133;
  sub_1C61798D0((uint64_t)&unk_1ED824F90, "switch-peel-threshold", &v2, &v5, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED824F90, &dword_1C475E000);
}

uint64_t sub_1C5D3CF08(uint64_t a1, void **a2, BOOL a3)
{
  int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t EVT;
  unint64_t v10;
  uint64_t v11;
  unsigned int ExtendedSizeInBits;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::detail::DoubleAPFloat *v25;
  void *v26;
  unsigned int v27;
  const char *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v32[2];
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;

  v5 = *(unsigned __int16 *)(a1 + 24);
  if (v5 == 156)
  {
    v6 = *(unint64_t **)(a1 + 40);
    v8 = *v6;
    v7 = v6[1];
    v34 = v8;
    v35 = v7;
    if ((_BYTE)v8)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v34);
      v10 = 0;
      v11 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v7 + 24), 0, a3);
      v10 = EVT & 0xFFFFFFFFFFFFFF00;
    }
    v36 = (void *)(v10 | EVT);
    v37 = v11;
    if ((_BYTE)EVT)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v36);
    else
      ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v36);
    v14 = ExtendedSizeInBits;
    if ((_DWORD)v13 == 1)
    v15 = **(_QWORD **)(a1 + 32);
    v16 = *(unsigned __int16 *)(v15 + 24);
    if (v16 > 0x22)
    {
      if (v16 != 35)
      {
        if (v16 != 36)
          goto LABEL_13;
LABEL_20:
        v24 = *(_QWORD *)(v15 + 80);
        v26 = *(void **)(v24 + 32);
        v25 = (llvm::detail::DoubleAPFloat *)(v24 + 32);
        if (v26 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v25, (unsigned int *)&v34);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v25, (unsigned int *)&v34);
        llvm::APInt::truncOrSelf((llvm::APInt *)&v34, v14, (llvm::APInt *)&v36);
        if (*((_DWORD *)a2 + 2) >= 0x41u && *a2)
          MEMORY[0x1CAA32F9C](*a2, 0x1000C8000313F17);
        *a2 = v36;
        *((_DWORD *)a2 + 2) = v37;
        LODWORD(v37) = 0;
        if (v35 >= 0x41 && v34)
          MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
        return 1;
      }
    }
    else if (v16 != 11)
    {
      if (v16 != 12)
      {
LABEL_13:
        v5 = *(unsigned __int16 *)(a1 + 24);
        goto LABEL_14;
      }
      goto LABEL_20;
    }
    llvm::APInt::truncOrSelf((llvm::APInt *)(*(_QWORD *)(v15 + 80) + 24), v14, (llvm::APInt *)&v36);
    if (*((_DWORD *)a2 + 2) >= 0x41u && *a2)
      MEMORY[0x1CAA32F9C](*a2, 0x1000C8000313F17);
    *a2 = v36;
    *((_DWORD *)a2 + 2) = v37;
    return 1;
  }
LABEL_14:
  if (v5 != 146)
    return 0;
  LODWORD(v37) = 1;
  v36 = 0;
  v33 = 0;
  v17 = *(uint64_t **)(a1 + 40);
  v19 = *v17;
  v18 = v17[1];
  v32[0] = v19;
  v32[1] = v18;
  if ((_BYTE)v19)
  {
    LOBYTE(v20) = sub_1C47F37A0((unsigned __int8 *)v32);
    v21 = 0;
    v22 = 0;
  }
  else
  {
    v20 = llvm::EVT::getEVT(*(llvm::EVT **)(v18 + 24), 0, a3);
    v21 = v20 & 0xFFFFFFFFFFFFFF00;
  }
  v34 = v21 | v20;
  v35 = v22;
  if ((_BYTE)v20)
    v27 = sub_1C47A8C74((unsigned __int8 *)&v34);
  else
    v27 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v34);
  v29 = v27;
  if ((_DWORD)v28 == 1)
  v30 = sub_1C5D3D1E4(a1, a2, &v36, &v33, (BOOL *)&v34, v29, 0);
  if (v33 == v29)
    v23 = v30;
  else
    v23 = 0;
  if (v37 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  return v23;
}

uint64_t sub_1C5D3D1E4(uint64_t a1, void **a2, void **a3, unsigned int *a4, BOOL *a5, unsigned int a6, int a7)
{
  unsigned int ExtendedSizeInBits;
  const char *v15;
  BOOL v16;
  unsigned int v17;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int i;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  llvm::detail::DoubleAPFloat *v29;
  void *v30;
  uint64_t v31;
  llvm::APInt *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  BOOL v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  int v55;
  int v56;
  uint64_t v57;
  void *v58;
  size_t v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  size_t v66;
  uint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  BOOL *v71;
  unsigned int *v72;
  void *v73;
  unsigned int v74;
  void *v75;
  unsigned int v76;
  void *__src;
  unsigned int v78;
  void *v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  __int128 v85;

  v85 = *(_OWORD *)*(_QWORD *)(a1 + 40);
  if ((_BYTE)v85)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v85);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v85);
  v17 = ExtendedSizeInBits;
  if ((_DWORD)v15 == 1)
  if (v17 < a6)
    return 0;
  v84 = v17;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v83, 0, 0);
  else
    v83 = 0;
  if (*((_DWORD *)a2 + 2) >= 0x41u && *a2)
    MEMORY[0x1CAA32F9C](*a2, 0x1000C8000313F17);
  *a2 = v83;
  *((_DWORD *)a2 + 2) = v84;
  v84 = v17;
  v71 = a5;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v83, 0, 0);
  else
    v83 = 0;
  v72 = a4;
  if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
    MEMORY[0x1CAA32F9C](*a3, 0x1000C8000313F17);
  *a3 = v83;
  *((_DWORD *)a3 + 2) = v84;
  v19 = *(unsigned __int16 *)(a1 + 56);
  v20 = sub_1C6131328((unsigned __int8 *)&v85, (uint64_t)v15, v16);
  if (v19)
  {
    v21 = v20;
    v22 = 0;
    v23 = 0;
    for (i = v19 - 1; i != -1; --i)
    {
      if (a7)
        v25 = i;
      else
        v25 = v23;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40 * v25);
      v27 = *(unsigned __int16 *)(v26 + 24);
      if (v27 <= 0x22)
      {
        if (v27 != 11)
        {
          if (v27 != 12)
            return 0;
LABEL_30:
          v28 = *(_QWORD *)(v26 + 80);
          v30 = *(void **)(v28 + 32);
          v29 = (llvm::detail::DoubleAPFloat *)(v28 + 32);
          if (v30 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v29, (unsigned int *)&v83);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v29, (unsigned int *)&v83);
          goto LABEL_36;
        }
      }
      else if (v27 != 35)
      {
        if (v27 != 36)
        {
          if (v27 != 51)
            return 0;
          sub_1C4912E54(a3, v22, v21 + v22);
          goto LABEL_39;
        }
        goto LABEL_30;
      }
      v31 = *(_QWORD *)(v26 + 80);
      v32 = (llvm::APInt *)(v31 + 24);
      v33 = *(_DWORD *)(v31 + 32);
      if (v33 >= v21)
      {
        if (v33 > v21)
          llvm::APInt::trunc(v32, v21, (llvm::APInt *)&v83);
        else
          sub_1C5DD14E0((uint64_t)&v83, (uint64_t)v32);
      }
      else
      {
        llvm::APInt::zext(v32, v21, (uint64_t)&v83);
      }
LABEL_36:
      llvm::APInt::insertBits(a2, (const llvm::APInt *)&v83, v22);
      if (v84 >= 0x41 && v83)
        MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
LABEL_39:
      ++v23;
      v22 += v21;
    }
  }
  v34 = *((_DWORD *)a3 + 2);
  if (v34 >= 0x41 && v34 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) > 0x40)
  {
    v36 = 1;
  }
  else
  {
    v35 = *a3;
    if (v34 < 0x41)
      v35 = a3;
    v36 = *v35 != 0;
  }
  *v71 = v36;
  while (v17 >= 9)
  {
    v37 = v17 >> 1;
    llvm::APInt::extractBits((llvm::APInt *)a2, v17 >> 1, v17 >> 1, (unsigned int *)&v83);
    llvm::APInt::extractBits((llvm::APInt *)a2, v17 >> 1, 0, (unsigned int *)&v81);
    llvm::APInt::extractBits((llvm::APInt *)a3, v17 >> 1, v17 >> 1, (unsigned int *)&v79);
    llvm::APInt::extractBits((llvm::APInt *)a3, v17 >> 1, 0, (unsigned int *)&__src);
    v38 = v78;
    v76 = v78;
    if (v78 <= 0x40)
    {
      v39 = ~(unint64_t)__src;
      v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v78;
      if (!v78)
        v40 = 0;
      v41 = v40 & v39;
      v75 = (void *)(v40 & v39);
      v76 = 0;
LABEL_56:
      v41 &= (unint64_t)v83;
      goto LABEL_59;
    }
    v42 = (((unint64_t)v78 + 63) >> 3) & 0x3FFFFFF8;
    v75 = (void *)operator new[]();
    memcpy(v75, __src, v42);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v75);
    v38 = v76;
    v41 = (unint64_t)v75;
    v76 = 0;
    if (v38 <= 0x40)
      goto LABEL_56;
    v43 = (uint64_t *)v83;
    v44 = (v38 + 63) >> 6;
    v45 = v75;
    do
    {
      v46 = *v43++;
      *v45++ &= v46;
      --v44;
    }
    while (v44);
LABEL_59:
    LODWORD(v47) = v80;
    v74 = v80;
    if (v80 <= 0x40)
    {
      v48 = ~(unint64_t)v79;
      v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v80;
      if (!v80)
        v49 = 0;
      v50 = v49 & v48;
      v73 = (void *)(v49 & v48);
      v74 = 0;
LABEL_64:
      v50 &= v81;
      goto LABEL_67;
    }
    v51 = (((unint64_t)v80 + 63) >> 3) & 0x3FFFFFF8;
    v73 = (void *)operator new[]();
    memcpy(v73, v79, v51);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v73);
    v47 = v74;
    v50 = (unint64_t)v73;
    v74 = 0;
    if (v47 <= 0x40)
      goto LABEL_64;
    v52 = 0;
    v53 = v81;
    do
    {
      *(_QWORD *)(v50 + v52) &= *(_QWORD *)(v53 + v52);
      v52 += 8;
    }
    while ((((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8) != v52);
LABEL_67:
    if (v38 > 0x40)
      v54 = memcmp((const void *)v41, (const void *)v50, ((v38 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v54 = v41 == v50;
    v55 = v54;
    if (v37 >= a6)
      v56 = v55;
    else
      v56 = 0;
    if (v47 >= 0x41 && v50)
      MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
    if (v38 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    if (v56)
    {
      v57 = v84;
      if (v84 > 0x40)
      {
        v59 = (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8;
        v58 = (void *)operator new[]();
        memcpy(v58, v83, v59);
        v60 = (uint64_t *)v81;
        v61 = (unint64_t)(v57 + 63) >> 6;
        v62 = v58;
        do
        {
          v63 = *v60++;
          *v62++ |= v63;
          --v61;
        }
        while (v61);
      }
      else
      {
        v58 = (void *)(v81 | (unint64_t)v83);
      }
      if (*((_DWORD *)a2 + 2) >= 0x41u && *a2)
        MEMORY[0x1CAA32F9C](*a2, 0x1000C8000313F17);
      *a2 = v58;
      *((_DWORD *)a2 + 2) = v57;
      v64 = v80;
      if (v80 > 0x40)
      {
        v66 = (((unint64_t)v80 + 63) >> 3) & 0x3FFFFFF8;
        v65 = (void *)operator new[]();
        memcpy(v65, v79, v66);
        v67 = (uint64_t *)__src;
        v68 = (unint64_t)(v64 + 63) >> 6;
        v69 = v65;
        do
        {
          v70 = *v67++;
          *v69++ &= v70;
          --v68;
        }
        while (v68);
      }
      else
      {
        v65 = (void *)((unint64_t)__src & (unint64_t)v79);
      }
      if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
        MEMORY[0x1CAA32F9C](*a3, 0x1000C8000313F17);
      *a3 = v65;
      *((_DWORD *)a3 + 2) = v64;
      v17 = v37;
    }
    if (v78 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (v80 >= 0x41 && v79)
      MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
    if (v82 >= 0x41 && v81)
      MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
    if (v84 >= 0x41)
    {
      if (v83)
        MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
    }
    if ((v56 & 1) == 0)
      break;
  }
  *v72 = v17;
  return 1;
}

BOOL sub_1C5D3D948(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3;
  int i;
  int v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *j;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  llvm::APInt *v16;
  unsigned int v17;
  uint64_t v18;
  llvm::detail::DoubleAPFloat *v19;
  void *v20;
  unsigned int v21;
  unsigned int v23;
  _DWORD *v24;
  __int128 v25;

  v3 = a1;
  for (i = *(unsigned __int16 *)(a1 + 24); i == 216; i = *(unsigned __int16 *)(v3 + 24))
    v3 = **(_QWORD **)(v3 + 32);
  if (i != 156 || (a2 & 1) != 0)
  {
    if (i != 146)
      return 0;
    v8 = *(unsigned __int16 *)(v3 + 56);
    if (!*(_WORD *)(v3 + 56))
      return 0;
    v9 = 0;
    for (j = (_DWORD *)(*(_QWORD *)(v3 + 32) + 8); ; j += 10)
    {
      v11 = *((_QWORD *)j - 1);
      if (*(_WORD *)(v11 + 24) != 51)
        break;
      if (v8 == ++v9)
        return 0;
    }
    v12 = *j;
    v25 = *(_OWORD *)*(_QWORD *)(v3 + 40);
    v13 = sub_1C6131328((unsigned __int8 *)&v25, a2, a3);
    v7 = 0;
    v14 = *(unsigned __int16 *)(v11 + 24);
    if (v14 > 0x22)
    {
      if (v14 == 36)
        goto LABEL_29;
      if (v14 != 35)
        return v7;
    }
    else if (v14 != 11)
    {
      if (v14 != 12)
        return v7;
LABEL_29:
      v18 = *(_QWORD *)(v11 + 80);
      v20 = *(void **)(v18 + 32);
      v19 = (llvm::detail::DoubleAPFloat *)(v18 + 32);
      if (v20 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v19, (unsigned int *)&v25);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v19, (unsigned int *)&v25);
      if (DWORD2(v25) > 0x40)
      {
        v21 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v25);
        if ((_QWORD)v25)
          MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
        if (v21 < v13)
          return 0;
      }
      else if (__clz(__rbit64(~(_QWORD)v25)) < v13)
      {
        return 0;
      }
LABEL_40:
      if ((_DWORD)v8 - 1 == (_DWORD)v9)
        return 1;
      v23 = v9 + 1;
      v7 = 1;
      while (1)
      {
        v24 = (_DWORD *)(*(_QWORD *)(v3 + 32) + 40 * v23);
        if ((*(_QWORD *)v24 != v11 || v24[2] != v12) && *(_WORD *)(*(_QWORD *)v24 + 24) != 51)
          break;
        if ((_DWORD)v8 == ++v23)
          return v7;
      }
      return 0;
    }
    v15 = *(_QWORD *)(v11 + 80);
    v16 = (llvm::APInt *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) > 0x40u)
      v17 = llvm::APInt::countTrailingOnesSlowCase(v16);
    else
      v17 = __clz(__rbit64(~*(_QWORD *)v16));
    if (v17 < v13)
      return 0;
    goto LABEL_40;
  }
  DWORD2(v25) = 1;
  *(_QWORD *)&v25 = 0;
  v5 = sub_1C5D3CF08(v3, (void **)&v25, a3);
  v6 = DWORD2(v25);
  if (!v5)
  {
    v7 = 0;
    if (DWORD2(v25) < 0x41)
      return v7;
    goto LABEL_19;
  }
  if (!DWORD2(v25))
    return 1;
  if (DWORD2(v25) <= 0x40)
    return (_QWORD)v25 == 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v25);
  v7 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v25) == v6;
LABEL_19:
  if ((_QWORD)v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  return v7;
}

uint64_t sub_1C5D3DBE0(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3;
  int i;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t **v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  llvm::detail::DoubleAPFloat *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int64_t v24;
  unint64_t v26;
  unsigned int v27;
  __int128 v29;

  v3 = a1;
  for (i = *(unsigned __int16 *)(a1 + 24); i == 216; i = *(unsigned __int16 *)(v3 + 24))
    v3 = **(_QWORD **)(v3 + 32);
  if (i != 156 || (a2 & 1) != 0)
  {
    if (i != 146)
      goto LABEL_43;
    if (!*(_WORD *)(v3 + 56))
    {
      v8 = 1;
LABEL_52:
      v5 = v8 ^ 1;
      return v5 & 1;
    }
    v6 = *(uint64_t **)(v3 + 32);
    v7 = 40 * *(unsigned __int16 *)(v3 + 56);
    v8 = 1;
    while (1)
    {
      if (*(_WORD *)(*v6 + 24) == 51)
        goto LABEL_13;
      v29 = *(_OWORD *)*(_QWORD *)(v3 + 40);
      v9 = sub_1C6131328((unsigned __int8 *)&v29, a2, a3);
      v5 = 0;
      v10 = *v6;
      v11 = *(unsigned __int16 *)(*v6 + 24);
      if (v11 > 0x22)
      {
        if (v11 != 36)
        {
          if (v11 != 35)
            return v5 & 1;
LABEL_21:
          v12 = *(_QWORD *)(v10 + 80);
          v13 = (unint64_t **)(v12 + 24);
          v14 = *(_DWORD *)(v12 + 32);
          if (v14 > 0x40)
          {
            v16 = llvm::APInt::countTrailingZerosSlowCase(v13);
          }
          else
          {
            v15 = __clz(__rbit64((unint64_t)*v13));
            if (v14 >= v15)
              v16 = v15;
            else
              v16 = v14;
          }
          v8 = 0;
          v5 = 0;
          if (v16 < v9)
            return v5 & 1;
          goto LABEL_13;
        }
      }
      else
      {
        if (v11 == 11)
          goto LABEL_21;
        if (v11 != 12)
          return v5 & 1;
      }
      v17 = *(_QWORD *)(v10 + 80);
      v19 = *(void **)(v17 + 32);
      v18 = (llvm::detail::DoubleAPFloat *)(v17 + 32);
      if (v19 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v18, (unsigned int *)&v29);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v18, (unsigned int *)&v29);
      v20 = DWORD2(v29);
      if (DWORD2(v29) > 0x40)
      {
        v22 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v29);
        if ((_QWORD)v29)
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
        v8 = 0;
        v5 = 0;
        if (v22 < v9)
          return v5 & 1;
      }
      else
      {
        v8 = 0;
        v5 = 0;
        v21 = __clz(__rbit64(v29));
        if (DWORD2(v29) >= v21)
          v20 = v21;
        if (v20 < v9)
          return v5 & 1;
      }
LABEL_13:
      v6 += 5;
      v7 -= 40;
      if (!v7)
        goto LABEL_52;
    }
  }
  DWORD2(v29) = 1;
  *(_QWORD *)&v29 = 0;
  if (!sub_1C5D3CF08(v3, (void **)&v29, a3))
  {
    if (DWORD2(v29) >= 0x41)
    {
      v5 = 0;
      if (!(_QWORD)v29)
        return v5 & 1;
      goto LABEL_50;
    }
LABEL_43:
    v5 = 0;
    return v5 & 1;
  }
  if (DWORD2(v29) <= 0x40)
  {
    v5 = (_QWORD)v29 == 0;
    return v5 & 1;
  }
  v23 = 0;
  v24 = ((unint64_t)DWORD2(v29) + 63) >> 6;
  do
  {
    if (v24-- < 1)
      break;
    v26 = *(_QWORD *)(v29 + 8 * v24);
    v23 += __clz(v26);
  }
  while (!v26);
  v27 = DWORD2(v29) | 0xFFFFFFC0;
  if ((BYTE8(v29) & 0x3F) == 0)
    v27 = 0;
  v5 = v23 + v27 == DWORD2(v29);
  if ((_QWORD)v29)
LABEL_50:
    MEMORY[0x1CAA32F9C]();
  return v5 & 1;
}

uint64_t sub_1C5D3DE74(unsigned int a1, int a2, unsigned __int8 a3, uint64_t a4)
{
  BOOL v4;
  char v5;
  int v6;
  unsigned int v8;

  if (a3)
  {
    v4 = a3 - 120 >= 0x20 && a3 - 2 >= 6;
    if (v4 && a3 - 15 >= 0x3C)
    {
LABEL_8:
      v5 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
      v6 = *(unsigned __int8 *)(**(_QWORD **)(a4 + 16) + 8);
    else
      v6 = *(_DWORD *)(a4 + 8);
    if (v6 != 13)
      goto LABEL_8;
  }
  if ((dword_1C866E45C[a2 - 10] | dword_1C866E45C[a1 - 10]) == 3)
    return 24;
  v5 = 1;
LABEL_15:
  v8 = a2 | a1;
  if ((a2 | a1) > 0x17)
    v8 = (a2 | a1) & 0xFFFFFFEF;
  if (((v8 == 14) & v5) != 0)
    return 22;
  else
    return v8;
}

BOOL sub_1C5D3DF28(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned __int8 *v4;
  size_t v5;
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  size_t v27;
  const void *v28;
  uint64_t **v29;
  const void **v30;
  size_t *v31;
  size_t v32;
  int v33;
  size_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  const void *__dst[2];
  unint64_t v53;
  int v54;

  v3 = *(unsigned __int16 *)(a2 + 24);
  if (v3 <= 0x11)
  {
    if (v3 == 7)
    {
      v14 = *(_QWORD *)(a2 + 80);
      if (!*(_QWORD *)(a2 + 80))
        return sub_1C6370658((uint64_t **)(a1 + 728), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88)) != 0;
      v15 = *(_QWORD *)(a1 + 704);
      v13 = *(_QWORD *)(v15 + 8 * v14) != 0;
      *(_QWORD *)(v15 + 8 * v14) = 0;
      return v13;
    }
    if (v3 == 8)
    {
      v11 = *(unsigned int *)(a2 + 76);
      v12 = *(_QWORD *)(a1 + 680);
      v13 = *(_QWORD *)(v12 + 8 * v11) != 0;
      *(_QWORD *)(v12 + 8 * v11) = 0;
      return v13;
    }
  }
  else if (*(unsigned __int16 *)(a2 + 24) > 0x2Bu)
  {
    if (v3 == 281)
      return 0;
    if (v3 == 44)
    {
      v41 = *(_QWORD *)(a2 + 80);
      __dst[0] = 0;
      if (sub_1C6144BDC(*(_QWORD *)(a1 + 808), *(_DWORD *)(a1 + 824), v41, __dst))
      {
        *(_QWORD *)__dst[0] = -8192;
        *(int32x2_t *)(a1 + 816) = vadd_s32(*(int32x2_t *)(a1 + 816), (int32x2_t)0x1FFFFFFFFLL);
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v3 == 18)
    {
      v4 = *(unsigned __int8 **)(a2 + 80);
      if (v4)
      {
        v5 = strlen(*(const char **)(a2 + 80));
        v6 = *(_DWORD *)(a1 + 760);
        if (v6)
        {
          v7 = v5;
          if (v5)
          {
            v8 = 0;
            v9 = 0;
            do
              v9 = 33 * v9 + v4[v8++];
            while (v5 != v8);
            v10 = 0;
            goto LABEL_21;
          }
LABEL_20:
          v9 = 0;
          v10 = 1;
LABEL_21:
          v17 = v6 - 1;
          v18 = *(_QWORD *)(a1 + 752);
          v50 = v6;
          v51 = a1;
          v19 = v18 + 8 * v6 + 8;
          v20 = 1;
          v21 = v9;
          while (1)
          {
            v22 = v21 & v17;
            v23 = *(_QWORD **)(v18 + 8 * v22);
            if (v23 != (_QWORD *)-8)
            {
              if (!v23)
                return 0;
              if (*(_DWORD *)(v19 + 4 * v22) == v9 && v7 == *v23)
              {
                v24 = *(unsigned int *)(v51 + 772);
                if ((v10 & 1) != 0 || !memcmp(v4, (char *)v23 + v24, v7))
                  break;
              }
            }
            v21 = v20 + v22;
            ++v20;
          }
          if ((_DWORD)v22 != -1 && (int)v22 != v50)
          {
            v31 = *(size_t **)(v18 + 8 * (int)v22);
            v32 = *v31;
            if (*v31)
            {
              v33 = 0;
              v34 = *v31;
              v35 = (unsigned __int8 *)v31 + v24;
              do
              {
                v36 = *v35++;
                v33 = 33 * v33 + v36;
                --v34;
              }
              while (v34);
            }
            else
            {
              v33 = 0;
            }
            v37 = 1;
            v38 = v33;
            while (1)
            {
              v39 = v38 & v17;
              v40 = *(_QWORD **)(v18 + 8 * v39);
              if (v40 != (_QWORD *)-8)
              {
                if (!v40)
                  goto LABEL_71;
                if (*(_DWORD *)(v19 + 4 * v39) == v33
                  && v32 == *v40
                  && (!v32 || !memcmp((char *)v31 + v24, (char *)v40 + v24, v32)))
                {
                  break;
                }
              }
              v38 = v37 + v39;
              ++v37;
            }
            *(_QWORD *)(v18 + 8 * (int)v39) = -8;
            *(int32x2_t *)(v51 + 764) = vadd_s32(*(int32x2_t *)(v51 + 764), (int32x2_t)0x1FFFFFFFFLL);
LABEL_71:
            MEMORY[0x1CAA32FB4](v31, 8);
            return 1;
          }
        }
      }
      else
      {
        v6 = *(_DWORD *)(a1 + 760);
        if (v6)
        {
          v7 = 0;
          goto LABEL_20;
        }
      }
      return 0;
    }
    if (v3 == 42)
    {
      v25 = *(const char **)(a2 + 80);
      v26 = *(_DWORD *)(a2 + 88);
      v27 = strlen(v25);
      if (v27 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v28 = (const void *)v27;
      v29 = (uint64_t **)(a1 + 784);
      if (v27 >= 0x17)
      {
        v42 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17)
          v42 = v27 | 7;
        v43 = v42 + 1;
        v30 = (const void **)operator new(v42 + 1);
        __dst[1] = v28;
        v53 = v43 | 0x8000000000000000;
        __dst[0] = v30;
      }
      else
      {
        HIBYTE(v53) = v27;
        v30 = __dst;
        if (!v27)
          goto LABEL_56;
      }
      memmove(v30, v25, (size_t)v28);
LABEL_56:
      *((_BYTE *)v28 + (_QWORD)v30) = 0;
      v54 = v26;
      v44 = (uint64_t *)sub_1C63705E0(a1 + 784, __dst);
      v13 = a1 + 792 != (_QWORD)v44;
      if ((uint64_t *)(a1 + 792) != v44)
      {
        v45 = v44;
        v46 = (uint64_t *)v44[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
        else
        {
          v48 = v44;
          do
          {
            v47 = (uint64_t *)v48[2];
            v49 = *v47 == (_QWORD)v48;
            v48 = v47;
          }
          while (!v49);
        }
        if (*v29 == v44)
          *v29 = v47;
        --*(_QWORD *)(a1 + 800);
        sub_1C485B6E0(*(uint64_t **)(a1 + 792), v44);
        if (*((char *)v45 + 55) < 0)
          operator delete((void *)v45[4]);
        operator delete(v45);
      }
      if (SHIBYTE(v53) < 0)
        operator delete((void *)__dst[0]);
      return v13;
    }
  }
  return llvm::FoldingSetBase::RemoveNode(a1 + 328, (_QWORD *)a2);
}

int32x2_t sub_1C5D3E358(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a2;
  v11 = 0;
  if (sub_1C635A4E4((uint64_t *)(a1 + 688), &v10, &v11))
  {
    v4 = (_QWORD *)v11;
    if (v11 != *(_QWORD *)(a1 + 688) + 40 * *(unsigned int *)(a1 + 704))
    {
      v5 = *(_QWORD **)(v11 + 8);
      v6 = *(unsigned int *)(v11 + 16);
      if ((_DWORD)v6)
      {
        v7 = 8 * v6;
        v8 = *(uint64_t **)(v11 + 8);
        do
        {
          v9 = *v8++;
          *(_BYTE *)(v9 + 62) = 1;
          v7 -= 8;
        }
        while (v7);
      }
      if (v5 != v4 + 3)
        free(v5);
      *v4 = -8192;
      result = vadd_s32(*(int32x2_t *)(a1 + 696), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(a1 + 696) = result;
    }
  }
  return result;
}

void sub_1C5D3E404(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)(a2 + 32);
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 440);
    v5 = 64 - __clz(*(unsigned __int16 *)(a2 + 56) - 1);
    if (*(_WORD *)(a2 + 56))
      v6 = v5;
    else
      v6 = 0;
    if (*(_DWORD *)(a1 + 448) <= v6)
      sub_1C6154790(a1 + 440, v6 + 1);
    v7 = *v4;
    *v2 = *(_QWORD *)(*v4 + 8 * v6);
    *(_QWORD *)(v7 + 8 * v6) = v2;
    *(_WORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
}

int32x2_t sub_1C5D3E484(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *inserted;
  int32x2_t result;
  _QWORD *i;
  _QWORD *v11;
  _QWORD *j;

  v4 = *(unsigned __int8 **)(a2 + 40);
  if (*v4 == 172)
    goto LABEL_9;
  v5 = *(unsigned __int16 *)(a2 + 24);
  if (v5 == 263 || v5 == 281)
    goto LABEL_9;
  v6 = *(unsigned __int16 *)(a2 + 58);
  if (v6 != 1)
  {
    v7 = 1;
    while (v4[16 * v7] != 172)
    {
      if (v6 == ++v7)
        goto LABEL_8;
    }
    goto LABEL_9;
  }
LABEL_8:
  inserted = llvm::FoldingSetBase::GetOrInsertNode(a1 + 328, (uint64_t *)a2, (uint64_t)off_1E8198CA0);
  if (inserted == (_QWORD *)a2)
  {
LABEL_9:
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, uint64_t))(*i + 24))(i, a2);
    return result;
  }
  v11 = inserted;
  sub_1C636595C(a1, a2, (uint64_t)inserted);
  for (j = *(_QWORD **)(a1 + 656); j; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*j + 16))(j, a2, v11);
  return sub_1C63655F0(a1, a2);
}

unsigned __int8 **sub_1C5D3E590(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  int v9;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  void *v18[2];
  _BYTE v19[128];
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a2 + 40);
  if (*v6 == 172)
    return 0;
  v7 = 0;
  v9 = *(unsigned __int16 *)(a2 + 24);
  if (v9 != 263 && v9 != 281)
  {
    v13 = *(unsigned __int16 *)(a2 + 58);
    if ((_DWORD)v13 != 1)
    {
      v14 = 1;
      while (v6[16 * v14] != 172)
      {
        if ((_DWORD)v13 == ++v14)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v20 = a3;
    v21 = a4;
    v18[0] = v19;
    v18[1] = (void *)0x2000000000;
    sub_1C5D3E710(v18, v9, (uint64_t)v6, v13, &v20, 1);
    sub_1C5D3E8D4((unsigned int *)v18, a2);
    v15 = *(unsigned __int8 **)(a2 + 64);
    v16 = v15;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v16, v15, 2);
    v17 = *(_DWORD *)(a2 + 60);
    v7 = sub_1C6365B08(a1, (uint64_t)v18, (uint64_t)&v16, a5);
    if (v16)
      llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
    if (v7)
      *((_WORD *)v7 + 36) &= *(_WORD *)(a2 + 72) | 0xF001;
    if (v18[0] != v19)
      free(v18[0]);
  }
  return v7;
}

_DWORD *sub_1C5D3E710(_DWORD *result, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  v10 = (uint64_t)result;
  v11 = result[2];
  if (v11 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11 + 1, 4);
    LODWORD(v11) = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v10 + 4 * v11) = a2;
  v12 = *(_DWORD *)(v10 + 12);
  v13 = (*(_DWORD *)(v10 + 8) + 1);
  *(_DWORD *)(v10 + 8) = v13;
  if (v13 >= v12)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v13 + 1, 4);
    LODWORD(v13) = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v10 + 4 * v13) = a3;
  v14 = *(_DWORD *)(v10 + 12);
  v15 = (*(_DWORD *)(v10 + 8) + 1);
  *(_DWORD *)(v10 + 8) = v15;
  if (v15 >= v14)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v15 + 1, 4);
    LODWORD(v15) = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v10 + 4 * v15) = HIDWORD(a3);
  v16 = *(_DWORD *)(v10 + 8) + 1;
  *(_DWORD *)(v10 + 8) = v16;
  if (a6)
  {
    v17 = &a5[2 * a6];
    do
    {
      v18 = *a5;
      if (v16 >= *(_DWORD *)(v10 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v16 + 1, 4);
        v16 = *(_DWORD *)(v10 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v10 + 4 * v16) = v18;
      v19 = *(_DWORD *)(v10 + 12);
      v20 = (*(_DWORD *)(v10 + 8) + 1);
      *(_DWORD *)(v10 + 8) = v20;
      if (v20 >= v19)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v20 + 1, 4);
        LODWORD(v20) = *(_DWORD *)(v10 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v10 + 4 * v20) = HIDWORD(v18);
      v21 = *(_DWORD *)(v10 + 12);
      v22 = (*(_DWORD *)(v10 + 8) + 1);
      *(_DWORD *)(v10 + 8) = v22;
      v23 = *((_DWORD *)a5 + 2);
      if (v22 >= v21)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v22 + 1, 4);
        LODWORD(v22) = *(_DWORD *)(v10 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v10 + 4 * v22) = v23;
      v16 = *(_DWORD *)(v10 + 8) + 1;
      *(_DWORD *)(v10 + 8) = v16;
      a5 += 2;
    }
    while (a5 != v17);
  }
  return result;
}

unsigned int *sub_1C5D3E8D4(unsigned int *result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  unsigned int *v80;
  unsigned int *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;

  v3 = (uint64_t)result;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 > 0xFC)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xFD:
      case 0xFE:
      case 0x122:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
LABEL_3:
        if (*(_BYTE *)(a2 + 80))
          v5 = *(unsigned __int8 *)(a2 + 80);
        else
          v5 = *(_QWORD *)(a2 + 88);
        v6 = result[2];
        if (v6 >= result[3])
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 4);
          LODWORD(v6) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v6) = v5;
        v7 = *(_DWORD *)(v3 + 12);
        v8 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v8;
        if (v8 >= v7)
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v8 + 1, 4);
          LODWORD(v8) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v8) = HIDWORD(v5);
        v9 = *(_DWORD *)(v3 + 12);
        v10 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v10;
        v11 = *(_BYTE *)(a2 + 26) & 0xFA | (*(unsigned __int8 *)(a2 + 27) << 8);
        if (v10 >= v9)
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v10 + 1, 4);
          LODWORD(v10) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v10) = v11;
        v12 = *(_DWORD *)(v3 + 12);
        v13 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v13;
        v14 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
        if (v13 >= v12)
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v13 + 1, 4);
          LODWORD(v13) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v13) = v14;
        v15 = *(_DWORD *)(v3 + 12);
        v16 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v16;
        LODWORD(v17) = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 32);
        goto LABEL_85;
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x120:
      case 0x121:
      case 0x132:
      case 0x133:
      case 0x13A:
      case 0x13B:
      case 0x13C:
        goto LABEL_88;
      case 0x115:
        goto LABEL_37;
      case 0x11F:
        v72 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
        v73 = result[2];
        if (v73 >= result[3])
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v73 + 1, 4);
          LODWORD(v73) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v73) = v72;
        v74 = *(_DWORD *)(v3 + 12);
        v16 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v16;
        LODWORD(v17) = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 32);
        if (v16 >= v74)
          goto LABEL_102;
        goto LABEL_86;
      case 0x138:
      case 0x139:
        if ((*(_QWORD *)(a2 + 88) & 0x8000000000000000) != 0)
          goto LABEL_87;
        v54 = *(_QWORD *)(a2 + 80);
        v55 = result[2];
        if (v55 >= result[3])
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v55 + 1, 4);
          LODWORD(v55) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v55) = v54;
        v56 = *(_DWORD *)(v3 + 12);
        v57 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v57;
        if (v57 >= v56)
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v57 + 1, 4);
          LODWORD(v57) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v57) = HIDWORD(v54);
        v58 = *(_DWORD *)(v3 + 12);
        v59 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v59;
        v33 = *(_QWORD *)(a2 + 88);
        goto LABEL_73;
      case 0x13D:
        goto LABEL_16;
      default:
        switch(*(_WORD *)(a2 + 24))
        {
          case 0x16E:
          case 0x170:
          case 0x171:
          case 0x173:
            goto LABEL_3;
          case 0x16F:
          case 0x172:
            if (*(_BYTE *)(a2 + 80))
              v26 = *(unsigned __int8 *)(a2 + 80);
            else
              v26 = *(_QWORD *)(a2 + 88);
            v27 = result[2];
            if (v27 >= result[3])
            {
              result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v27 + 1, 4);
              LODWORD(v27) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v3 + 4 * v27) = v26;
            v28 = *(_DWORD *)(v3 + 12);
            v29 = (*(_DWORD *)(v3 + 8) + 1);
            *(_DWORD *)(v3 + 8) = v29;
            if (v29 >= v28)
            {
              result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v29 + 1, 4);
              LODWORD(v29) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v3 + 4 * v29) = HIDWORD(v26);
            v30 = *(_DWORD *)(v3 + 12);
            v31 = (*(_DWORD *)(v3 + 8) + 1);
            *(_DWORD *)(v3 + 8) = v31;
            v32 = *(_BYTE *)(a2 + 26) & 0xFA | (*(unsigned __int8 *)(a2 + 27) << 8);
            if (v31 >= v30)
            {
              result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v31 + 1, 4);
              LODWORD(v31) = *(_DWORD *)(v3 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v3 + 4 * v31) = v32;
            v15 = *(_DWORD *)(v3 + 12);
            v16 = (*(_DWORD *)(v3 + 8) + 1);
            *(_DWORD *)(v3 + 8) = v16;
            LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
            goto LABEL_85;
          default:
            goto LABEL_88;
        }
        goto LABEL_88;
    }
  }
  switch(*(_WORD *)(a2 + 24))
  {
    case 5:
      v33 = 1 << *(_BYTE *)(a2 + 76);
      goto LABEL_72;
    case 6:
    case 0xA:
LABEL_37:
      v33 = *(_QWORD *)(a2 + 80);
LABEL_72:
      v59 = result[2];
      v58 = result[3];
LABEL_73:
      if (v59 >= v58)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v59 + 1, 4);
        LODWORD(v59) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v59) = v33;
      v60 = *(_DWORD *)(v3 + 12);
      v16 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v16;
      if (v16 >= v60)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v16 + 1, 4);
        LODWORD(v16) = *(_DWORD *)(v3 + 8);
      }
      v17 = HIDWORD(v33);
      goto LABEL_86;
    case 7:
    case 8:
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x2A:
    case 0x2C:
      goto LABEL_88;
    case 9:
    case 0xF:
    case 0x27:
      LODWORD(v17) = *(_DWORD *)(a2 + 76);
      v16 = result[2];
      v15 = result[3];
      goto LABEL_85;
    case 0xB:
    case 0x23:
      v34 = *(_QWORD *)(a2 + 80);
      v35 = result[2];
      if (v35 >= result[3])
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v35 + 1, 4);
        LODWORD(v35) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v35) = v34;
      v36 = *(_DWORD *)(v3 + 12);
      v37 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v37;
      if (v37 >= v36)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v37 + 1, 4);
        LODWORD(v37) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v37) = HIDWORD(v34);
      v38 = *(_DWORD *)(v3 + 12);
      v16 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v16;
      v39 = *(unsigned __int8 *)(a2 + 26);
      if (v16 >= v38)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v16 + 1, 4);
        LODWORD(v16) = *(_DWORD *)(v3 + 8);
      }
      LODWORD(v17) = (v39 >> 3) & 1;
      goto LABEL_86;
    case 0xC:
    case 0x24:
      v40 = *(_QWORD *)(a2 + 80);
      v41 = result[2];
      if (v41 >= result[3])
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v41 + 1, 4);
        LODWORD(v41) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v41) = v40;
      v42 = *(_DWORD *)(v3 + 12);
      v16 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v16;
      if (v16 >= v42)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v16 + 1, 4);
        LODWORD(v16) = *(_DWORD *)(v3 + 8);
      }
      v17 = HIDWORD(v40);
      goto LABEL_86;
    case 0xD:
    case 0xE:
    case 0x13:
    case 0x25:
    case 0x26:
    case 0x2B:
LABEL_16:
      v18 = *(_QWORD *)(a2 + 80);
      v19 = result[2];
      if (v19 >= result[3])
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v19 + 1, 4);
        LODWORD(v19) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v19) = v18;
      v20 = *(_DWORD *)(v3 + 12);
      v21 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v21;
      if (v21 >= v20)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v21 + 1, 4);
        LODWORD(v21) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v21) = HIDWORD(v18);
      v22 = *(_DWORD *)(v3 + 12);
      v23 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v23;
      v17 = *(_QWORD *)(a2 + 88);
      if (v23 >= v22)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v23 + 1, 4);
        LODWORD(v23) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v23) = v17;
      v24 = *(_DWORD *)(v3 + 12);
      v25 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v25;
      if (v25 >= v24)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v25 + 1, 4);
        LODWORD(v25) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v25) = HIDWORD(v17);
      v15 = *(_DWORD *)(v3 + 12);
      v16 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v16;
      LODWORD(v17) = *(_DWORD *)(a2 + 96);
      goto LABEL_85;
    case 0x10:
    case 0x28:
      v43 = *(_DWORD *)(a2 + 76);
      v44 = result[2];
      if (v44 >= result[3])
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v44 + 1, 4);
        LODWORD(v44) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v44) = v43;
      v15 = *(_DWORD *)(v3 + 12);
      v16 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v16;
      LODWORD(v17) = *(_DWORD *)(a2 + 80);
      goto LABEL_85;
    case 0x11:
    case 0x29:
      v45 = 1 << *(_BYTE *)(a2 + 92);
      v46 = result[2];
      if (v46 >= result[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v46 + 1, 4);
        LODWORD(v46) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v46) = v45;
      v47 = *(_DWORD *)(v3 + 12);
      v48 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v48;
      if (v48 >= v47)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v48 + 1, 4);
        LODWORD(v48) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v48) = HIDWORD(v45);
      v49 = *(_DWORD *)(v3 + 12);
      v50 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v50;
      v51 = *(_DWORD *)(a2 + 88) & 0x7FFFFFFF;
      if (v50 >= v49)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v50 + 1, 4);
        LODWORD(v50) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v50) = v51;
      v52 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v52;
      result = *(unsigned int **)(a2 + 80);
      if ((*(_DWORD *)(a2 + 88) & 0x80000000) != 0)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 40))(result, v3);
        LODWORD(v16) = *(_DWORD *)(v3 + 8);
      }
      else
      {
        if (v52 >= *(_DWORD *)(v3 + 12))
        {
          v80 = *(unsigned int **)(a2 + 80);
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v52 + 1, 4);
          result = v80;
          LODWORD(v52) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v52) = (_DWORD)result;
        v53 = *(_DWORD *)(v3 + 12);
        v16 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v16;
        if (v16 >= v53)
        {
          v81 = result;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v16 + 1, 4);
          result = v81;
          LODWORD(v16) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v16) = HIDWORD(result);
        LODWORD(v16) = *(_DWORD *)(v3 + 8) + 1;
        *(_DWORD *)(v3 + 8) = v16;
      }
      LODWORD(v17) = *(_DWORD *)(a2 + 96);
      if (v16 < *(_DWORD *)(v3 + 12))
        goto LABEL_86;
      v16 = v16;
      goto LABEL_102;
    case 0x2D:
      v61 = *(_DWORD *)(a2 + 80);
      v62 = result[2];
      if (v62 >= result[3])
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v62 + 1, 4);
        LODWORD(v62) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v62) = v61;
      v63 = *(_DWORD *)(v3 + 12);
      v64 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v64;
      v17 = *(_QWORD *)(a2 + 88);
      if (v64 >= v63)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v64 + 1, 4);
        LODWORD(v64) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v64) = v17;
      v65 = *(_DWORD *)(v3 + 12);
      v66 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v66;
      if (v66 >= v65)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v66 + 1, 4);
        LODWORD(v66) = *(_DWORD *)(v3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v66) = HIDWORD(v17);
      v15 = *(_DWORD *)(v3 + 12);
      v16 = (*(_DWORD *)(v3 + 8) + 1);
      *(_DWORD *)(v3 + 8) = v16;
      LODWORD(v17) = *(_DWORD *)(a2 + 76);
LABEL_85:
      if (v16 < v15)
        goto LABEL_86;
LABEL_102:
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v16 + 1, 4);
      LODWORD(v16) = *(_DWORD *)(v3 + 8);
LABEL_86:
      *(_DWORD *)(*(_QWORD *)v3 + 4 * v16) = v17;
      ++*(_DWORD *)(v3 + 8);
      goto LABEL_87;
    default:
      if (v4 != 153)
        goto LABEL_88;
      v85 = *(_OWORD *)*(_QWORD *)(a2 + 40);
      result = (unsigned int *)sub_1C612FE00((llvm::EVT *)&v85, (const char *)a2);
      if ((_DWORD)result)
      {
        v75 = 0;
        v76 = v3 + 16;
        v77 = *(_DWORD *)(v3 + 8);
        v78 = 4 * result;
        do
        {
          v79 = *(_DWORD *)(*(_QWORD *)(a2 + 80) + v75);
          if (v77 >= *(_DWORD *)(v3 + 12))
          {
            v83 = v78;
            v84 = v76;
            v82 = *(_DWORD *)(*(_QWORD *)(a2 + 80) + v75);
            result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v76, v77 + 1, 4);
            v79 = v82;
            v78 = v83;
            v76 = v84;
            v77 = *(_DWORD *)(v3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)v3 + 4 * v77) = v79;
          v77 = *(_DWORD *)(v3 + 8) + 1;
          *(_DWORD *)(v3 + 8) = v77;
          v75 += 4;
        }
        while (v78 != v75);
      }
LABEL_87:
      LOWORD(v4) = *(_WORD *)(a2 + 24);
LABEL_88:
      if ((__int16)v4 >= 890)
      {
        v67 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
        v68 = *(unsigned int *)(v3 + 8);
        if (v68 >= *(_DWORD *)(v3 + 12))
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v68 + 1, 4);
          LODWORD(v68) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v68) = v67;
        v69 = *(_DWORD *)(v3 + 12);
        v70 = (*(_DWORD *)(v3 + 8) + 1);
        *(_DWORD *)(v3 + 8) = v70;
        v71 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 32);
        if (v70 >= v69)
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v70 + 1, 4);
          LODWORD(v70) = *(_DWORD *)(v3 + 8);
        }
        *(_DWORD *)(*(_QWORD *)v3 + 4 * v70) = v71;
        ++*(_DWORD *)(v3 + 8);
      }
      return result;
  }
}

unsigned __int8 **sub_1C5D3F2E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, _QWORD *a7)
{
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  int v11;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  void *v20[2];
  _BYTE v21[128];
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 **)(a2 + 40);
  if (*v8 == 172)
    return 0;
  v9 = 0;
  v11 = *(unsigned __int16 *)(a2 + 24);
  if (v11 != 263 && v11 != 281)
  {
    v15 = *(unsigned __int16 *)(a2 + 58);
    if ((_DWORD)v15 != 1)
    {
      v16 = 1;
      while (v8[16 * v16] != 172)
      {
        if ((_DWORD)v15 == ++v16)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = a6;
    v20[0] = v21;
    v20[1] = (void *)0x2000000000;
    sub_1C5D3E710(v20, v11, (uint64_t)v8, v15, &v22, 2);
    sub_1C5D3E8D4((unsigned int *)v20, a2);
    v17 = *(unsigned __int8 **)(a2 + 64);
    v18 = v17;
    if (v17)
      llvm::MetadataTracking::track((uint64_t)&v18, v17, 2);
    v19 = *(_DWORD *)(a2 + 60);
    v9 = sub_1C6365B08(a1, (uint64_t)v20, (uint64_t)&v18, a7);
    if (v18)
      llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
    if (v9)
      *((_WORD *)v9 + 36) &= *(_WORD *)(a2 + 72) | 0xF001;
    if (v20[0] != v21)
      free(v20[0]);
  }
  return v9;
}

unsigned __int8 **sub_1C5D3F470(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  int v10;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  void *v19[2];
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 **)(a2 + 40);
  if (*v7 == 172)
    return 0;
  v8 = 0;
  v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 != 263 && v10 != 281)
  {
    v14 = *(unsigned __int16 *)(a2 + 58);
    if ((_DWORD)v14 != 1)
    {
      v15 = 1;
      while (v7[16 * v15] != 172)
      {
        if ((_DWORD)v14 == ++v15)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v19[0] = v20;
    v19[1] = (void *)0x2000000000;
    sub_1C5D3E710(v19, v10, (uint64_t)v7, v14, a3, a4);
    sub_1C5D3E8D4((unsigned int *)v19, a2);
    v16 = *(unsigned __int8 **)(a2 + 64);
    v17 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v17, v16, 2);
    v18 = *(_DWORD *)(a2 + 60);
    v8 = sub_1C6365B08(a1, (uint64_t)v19, (uint64_t)&v17, a5);
    if (v17)
      llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
    if (v8)
      *((_WORD *)v8 + 36) &= *(_WORD *)(a2 + 72) | 0xF001;
    if (v19[0] != v20)
      free(v19[0]);
  }
  return v8;
}

int32x2_t sub_1C5D3F5E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int32x2_t result;

  v1 = a1[27];
  if (v1)
    v2 = v1 - 8;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD **)(v2 + 16);
  *v4 = v3;
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  for (i = a1 + 26; (_QWORD *)a1[26] != i; result = sub_1C5D3E358(a1[77], v8))
  {
    v7 = a1[27];
    if (v7)
      v8 = v7 - 8;
    else
      v8 = 0;
    v9 = v8 + 8;
    if (!v7)
      v9 = 0;
    v10 = (_QWORD *)(v9 - 8);
    if (v7)
      v11 = v10;
    else
      v11 = 0;
    sub_1C5D3E404((uint64_t)a1, v8);
    v12 = v11[1];
    v13 = (_QWORD *)v11[2];
    *v13 = v12;
    *(_QWORD *)(v12 + 8) = v13;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = a1[28];
    a1[28] = v11;
    *(_WORD *)(v8 + 24) = 0;
  }
  return result;
}

uint64_t sub_1C5D3F69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a5;
  v19 = a5;
  v20 = a6;
  v11 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v12 = v11[1];
  if (a5 == *v11 && ((v13 = a6, (_BYTE)a5) || a6 == v12)
    || (v14 = sub_1C50989E0((unsigned __int8 *)&v19, *v11, v12), v6 = v19, v13 = v20, !v14))
  {
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 0);
    sub_1C6366AB4(a1, 0, a4, v18, 0, 0, 0);
    return sub_1C5D56C70(a1, 212, a4, v6, v13, a2, a3);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 832);
    if (v15)
      v16 = *(unsigned __int16 *)(v15 + 8);
    else
      v16 = 0;
    return sub_1C5D52060(a1, 215, a4, v19, v20, a2, a3, v16);
  }
}

uint64_t *sub_1C5D3F7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, const llvm::APInt *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::APInt *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *result;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v34 = a7;
  *((_QWORD *)&v34 + 1) = a8;
  v16 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v17 = v16[1];
  if (a7 == *v16 && ((_BYTE)a7 || a8 == v17)
    || !sub_1C50989E0((unsigned __int8 *)&v34, *v16, v17))
  {
    v41 = v34;
    v42 = 1;
    v43 = 0;
    v35 = a4;
    v36 = a5;
    v37 = a2;
    v38 = a3;
    v28 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 0);
    v39 = sub_1C6366AB4(a1, 0, a6, (llvm *)v28, 0, 0, 0);
    v40 = v29;
    v18 = sub_1C636AB20(a1, (uint64_t *)&v41, 2);
    v20 = v30;
    v21 = 0;
    v31 = *(_QWORD *)(a1 + 832);
    if (v31)
      v21 = *(_WORD *)(v31 + 8);
    v23 = &v35;
    v24 = a1;
    v25 = 136;
    v26 = a6;
    v27 = 3;
  }
  else
  {
    v48 = v34;
    v49 = 1;
    v50 = 0;
    v44 = a4;
    v45 = a5;
    v46 = a2;
    v47 = a3;
    v18 = sub_1C636AB20(a1, (uint64_t *)&v48, 2);
    v20 = v19;
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 832);
    if (v22)
      v21 = *(_WORD *)(v22 + 8);
    v23 = &v44;
    v24 = a1;
    v25 = 137;
    v26 = a6;
    v27 = 2;
  }
  result = sub_1C636D410(v24, (const char *)v25, v26, v18, v20, v23, v27, v21);
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = v33;
  *(_QWORD *)(a9 + 16) = result;
  *(_DWORD *)(a9 + 24) = 1;
  return result;
}

uint64_t *sub_1C5D3F9A0(uint64_t a1, uint64_t a2, unint64_t a3, const llvm::APInt *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v8;
  llvm **v10;
  uint64_t v11;
  llvm *v12;
  BOOL v13;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  const llvm::APInt *v21;
  llvm::ValueHandleBase *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  llvm *v29;
  uint64_t v30;
  _QWORD v31[2];

  v8 = (uint64_t *)a2;
  v31[0] = a5;
  v31[1] = a6;
  v10 = (llvm **)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v12 = *v10;
  v11 = (uint64_t)v10[1];
  v29 = v12;
  v30 = v11;
  if (v12 != a5 || (!(_BYTE)v12 ? (v13 = v11 == a6) : (v13 = 1), !v13))
  {
    v15 = sub_1C6131328((unsigned __int8 *)&v29, a2, a3);
    v18 = sub_1C6131328((unsigned __int8 *)v31, v16, v17);
    v28 = v15;
    if (v15 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
    else
      v27 = 0;
    sub_1C4912E54(&v27, 0, v18);
    v19 = v29;
    v20 = v30;
    v22 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v27, v21);
    v23 = sub_1C5D3FAF8(a1, (uint64_t)v22, a4, v19, v20, 0, 0);
    v26 = *(_QWORD *)(a1 + 832);
    if (v26)
      LOWORD(v26) = *(_WORD *)(v26 + 8);
    v8 = sub_1C5D56C70(a1, 171, a4, v19, v20, (uint64_t)v8, a3, v25, (uint64_t)v23, v24, v26);
    if (v28 >= 0x41 && v27)
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  }
  return v8;
}

_QWORD *sub_1C5D3FAF8(uint64_t a1, uint64_t a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::ValueHandleBase *v10;
  uint64_t v12;
  unint64_t v13;
  unsigned int ExtendedSizeInBits;
  const char *v15;
  unsigned int v16;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  const llvm::APInt *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *i;
  unsigned int v38;
  llvm::APInt *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  const char *v49;
  char *v50;
  char *v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  llvm *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  unsigned int v65;
  __int128 v66;
  const llvm::APInt *v67;
  llvm::ValueHandleBase *v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  __int16 v77;
  unsigned int v78;
  __int128 v79;
  const llvm::APInt *v80;
  llvm::ValueHandleBase *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  llvm *v91;
  unsigned int v92;
  __int128 v93;
  llvm::ValueHandleBase *v94;
  __int128 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  llvm *v98;
  uint64_t v99;
  void *__src;
  uint64_t v101;
  _BYTE v102[128];
  _BYTE v103[144];
  uint64_t v104;

  v10 = (llvm::ValueHandleBase *)a2;
  v104 = *MEMORY[0x1E0C80C00];
  v98 = a4;
  v99 = a5;
  v97 = a6;
  v96 = a7;
  v13 = sub_1C6131264((unsigned __int8 *)&v98, a2, (BOOL)a3);
  *(_QWORD *)&v95 = v13;
  *((_QWORD *)&v95 + 1) = v12;
  v94 = v10;
  if ((_BYTE)v98)
  {
    if (v98 - 15 >= 0x9C)
      goto LABEL_8;
  }
  else if ((*(_DWORD *)(v99 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_8;
  }
  llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), v13, v12, (uint64_t)v103);
  if (v103[0] == 1)
  {
    llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), v95, *((uint64_t *)&v95 + 1), (uint64_t)v103);
    v95 = *(_OWORD *)&v103[8];
    if (v103[8])
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v95);
    else
      ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v95);
    v18 = ExtendedSizeInBits;
    if ((_DWORD)v15 == 1)
    v19 = *((_DWORD *)v10 + 8);
    if (v19 >= v18)
    {
      if (v19 > v18)
        llvm::APInt::trunc((llvm::ValueHandleBase *)((char *)v10 + 24), v18, (llvm::APInt *)v103);
      else
        sub_1C5DD14E0((uint64_t)v103, (uint64_t)v10 + 24);
    }
    else
    {
      llvm::APInt::zext((llvm::ValueHandleBase *)((char *)v10 + 24), v18, (uint64_t)v103);
    }
    v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)v103, v20);
    v94 = v10;
    if (*(_DWORD *)&v103[8] >= 0x41u && *(_QWORD *)v103)
      MEMORY[0x1CAA32F9C](*(_QWORD *)v103, 0x1000C8000313F17);
LABEL_26:
    __src = v102;
    v101 = 0x2000000000;
    v21 = sub_1C636D7B0((llvm *)v95, *((uint64_t *)&v95 + 1));
    if ((_DWORD)a6)
      v22 = 35;
    else
      v22 = 11;
    sub_1C5D3E710(&__src, v22, v21, 1, 0, 0);
    v23 = v101;
    if (v101 >= HIDWORD(v101))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v102, v101 + 1, 4);
      v23 = v101;
    }
    *((_DWORD *)__src + v23) = (_DWORD)v10;
    v24 = (v101 + 1);
    LODWORD(v101) = v24;
    if (v24 >= HIDWORD(v101))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v102, v24 + 1, 4);
      LODWORD(v24) = v101;
    }
    *((_DWORD *)__src + v24) = HIDWORD(v10);
    v25 = (v101 + 1);
    LODWORD(v101) = v25;
    if (v25 >= HIDWORD(v101))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v102, v25 + 1, 4);
      LODWORD(v25) = v101;
    }
    *((_DWORD *)__src + v25) = a7;
    LODWORD(v101) = v101 + 1;
    *(_QWORD *)&v93 = 0;
    v26 = sub_1C6365B08(a1, (uint64_t)&__src, (uint64_t)a3, &v93);
    if (v26)
    {
      v27 = v26;
      v28 = v98;
      if ((_BYTE)v98)
      {
        if (v98 - 15 >= 0x9C)
          goto LABEL_45;
        goto LABEL_38;
      }
      v29 = v99;
      if ((*(_DWORD *)(v99 + 8) & 0xFE) != 0x12)
        goto LABEL_45;
      v30 = *(_DWORD *)(v99 + 8);
    }
    else
    {
      v27 = (_QWORD *)sub_1C6366BC4(a1, &v97, &v96, (uint64_t *)&v94, (uint64_t)&v95);
      v32 = *(_DWORD *)(a1 + 340) + 1;
      v33 = *(_DWORD *)(a1 + 336);
      if (v32 > 2 * v33)
      {
        llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v33, (uint64_t)off_1E8198CA0);
        *(_QWORD *)v103 = &v103[16];
        *(_QWORD *)&v103[8] = 0x2000000000;
        v34 = *(_QWORD *)(a1 + 328)
            + 8
            * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v27, (unsigned int *)v103));
        if (*(_BYTE **)v103 != &v103[16])
          free(*(void **)v103);
        v32 = *(_DWORD *)(a1 + 340) + 1;
      }
      else
      {
        v34 = v93;
      }
      v35 = *(_QWORD *)v34;
      if (!*(_QWORD *)v34)
        v35 = v34 | 1;
      *v27 = v35;
      *(_QWORD *)v34 = v27;
      v36 = *(_QWORD *)(a1 + 208);
      *(_DWORD *)(a1 + 340) = v32;
      v27[1] = v36;
      v27[2] = a1 + 208;
      *(_QWORD *)(v36 + 8) = v27 + 1;
      *(_QWORD *)(a1 + 208) = v27 + 1;
      for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
        (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v27);
      v28 = v98;
      if ((_BYTE)v98)
      {
LABEL_38:
        if ((v28 - 120) > 0x32)
        {
          if ((v28 - 15) > 0x9B)
            goto LABEL_45;
          v29 = v99;
LABEL_65:
          v44 = sub_1C5CA0FB8(a1, v98, v29, a3, (uint64_t)v27, 0);
LABEL_112:
          v27 = v44;
LABEL_45:
          if (__src != v102)
            free(__src);
          return v27;
        }
        v29 = v99;
        goto LABEL_111;
      }
      v29 = v99;
      v30 = *(unsigned __int8 *)(v99 + 8);
    }
    if (v30 != 19)
    {
      if ((v30 & 0xFE) != 0x12)
        goto LABEL_45;
      goto LABEL_65;
    }
LABEL_111:
    v44 = sub_1C5CA0F18(a1, v98, v29, a3, (uint64_t)v27, 0);
    goto LABEL_112;
  }
LABEL_8:
  if (!*(_BYTE *)(a1 + 651))
    goto LABEL_26;
  if ((_BYTE)v98)
  {
    if (v98 - 15 >= 0x9C)
      goto LABEL_26;
  }
  else if ((*(_DWORD *)(v99 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_26;
  }
  llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), v95, *((uint64_t *)&v95 + 1), (uint64_t)v103);
  if (v103[0] != 2)
    goto LABEL_26;
  llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), v95, *((uint64_t *)&v95 + 1), (uint64_t)v103);
  v93 = *(_OWORD *)&v103[8];
  if (v103[8])
    v16 = sub_1C47A8C74((unsigned __int8 *)&v93);
  else
    v16 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v93);
  v38 = v16;
  v39 = (llvm::ValueHandleBase *)((char *)v10 + 24);
  if ((_DWORD)v17 == 1)
  if (!(_BYTE)v98)
  {
    if (*(_BYTE *)(v99 + 8) != 19)
    {
      v40 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v98);
      goto LABEL_67;
    }
LABEL_63:
    if ((_BYTE)v95)
      v42 = sub_1C47A8C74((unsigned __int8 *)&v95);
    else
      v42 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v95);
    v60 = v42;
    if ((_DWORD)v43 == 1)
    *(_QWORD *)v103 = &v103[16];
    *(_QWORD *)&v103[8] = 0x200000000;
    v61 = v60 / v38;
    if ((_DWORD)v61)
    {
      v78 = 0;
      do
      {
        llvm::APInt::extractBits(v39, v38, v78, (unsigned int *)&__src);
        v79 = v93;
        v81 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&__src, v80);
        v82 = sub_1C5D3FAF8(a1, v81, a3, v79, *((_QWORD *)&v79 + 1), a6, a7);
        v84 = v83;
        v85 = *(unsigned int *)&v103[8];
        if (*(unsigned int *)&v103[8] >= (unint64_t)*(unsigned int *)&v103[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v103, (uint64_t)&v103[16], *(unsigned int *)&v103[8] + 1, 16);
          v85 = *(unsigned int *)&v103[8];
        }
        v86 = (uint64_t *)(*(_QWORD *)v103 + 16 * v85);
        *v86 = v82;
        v86[1] = v84;
        ++*(_DWORD *)&v103[8];
        if (v101 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v78 += v38;
        LODWORD(v61) = v61 - 1;
      }
      while ((_DWORD)v61);
      v63 = *(uint64_t **)v103;
      v62 = *(unsigned int *)&v103[8];
    }
    else
    {
      v62 = 0;
      v63 = (uint64_t *)&v103[16];
    }
    v87 = *(_QWORD *)(a1 + 832);
    if (v87)
      v88 = *(unsigned __int16 *)(v87 + 8);
    else
      v88 = 0;
    v27 = sub_1C636D0C8(a1, (const char *)0x9D, a3, v98, v99, v63, v62, v88);
    v89 = *(void **)v103;
    if (*(_BYTE **)v103 != &v103[16])
      goto LABEL_117;
    return v27;
  }
  if (v98 - 120 < 0x33)
    goto LABEL_63;
  v40 = sub_1C47A8C74((unsigned __int8 *)&v98);
LABEL_67:
  v45 = v40;
  if ((_DWORD)v41 == 1)
  v46 = v45 / v38;
  v47 = sub_1C4816F98(*(llvm::LLVMContext **)(a1 + 56), v93, *((uint64_t *)&v93 + 1), v46, 0);
  v90 = (uint64_t)v48;
  v91 = (llvm *)v47;
  __src = v102;
  v101 = 0x200000000;
  v92 = v46;
  if (sub_1C612FE00((llvm::EVT *)&v98, v48) <= v46)
  {
    v64 = 0;
    v65 = 0;
    do
    {
      llvm::APInt::extractBits(v39, v38, v64, (unsigned int *)v103);
      v66 = v93;
      v68 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)v103, v67);
      v70 = sub_1C5D3FAF8(a1, v68, a3, v66, *((_QWORD *)&v66 + 1), a6, a7);
      v71 = v69;
      v72 = v101;
      if (v101 >= (unint64_t)HIDWORD(v101))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v102, v101 + 1, 16);
        v72 = v101;
      }
      v73 = (uint64_t *)((char *)__src + 16 * v72);
      *v73 = v70;
      v73[1] = (uint64_t)v71;
      LODWORD(v101) = v101 + 1;
      if (*(_DWORD *)&v103[8] >= 0x41u && *(_QWORD *)v103)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v103, 0x1000C8000313F17);
      ++v65;
      v64 += v38;
    }
    while (v65 < v92 / sub_1C612FE00((llvm::EVT *)&v98, v69));
  }
  if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272))
  {
    if ((_DWORD)v101)
    {
      v50 = (char *)__src + 16 * v101 - 16;
      if (__src < v50)
      {
        v51 = (char *)__src + 16;
        do
        {
          *(_OWORD *)v103 = *((_OWORD *)v51 - 1);
          v52 = *((_DWORD *)v50 + 2);
          *((_QWORD *)v51 - 2) = *(_QWORD *)v50;
          *((_DWORD *)v51 - 2) = v52;
          *(_QWORD *)v50 = *(_QWORD *)v103;
          *((_DWORD *)v50 + 2) = *(_DWORD *)&v103[8];
          v50 -= 16;
          v53 = v51 >= v50;
          v51 += 16;
        }
        while (!v53);
      }
    }
  }
  *(_QWORD *)v103 = &v103[16];
  *(_QWORD *)&v103[8] = 0x800000000;
  v54 = sub_1C612FE00((llvm::EVT *)&v98, v49);
  if (v54)
  {
    v55 = v54;
    do
    {
      sub_1C6370800((unsigned int *)v103, *(_QWORD *)v103 + 16 * *(unsigned int *)&v103[8], __src, (_BYTE *)__src + 16 * v101);
      --v55;
    }
    while (v55);
  }
  v56 = v98;
  v57 = v99;
  v58 = *(_QWORD *)(a1 + 832);
  if (v58)
    v59 = *(unsigned __int16 *)(v58 + 8);
  else
    v59 = 0;
  v75 = sub_1C636D0C8(a1, (const char *)0x92, a3, v91, v90, *(uint64_t **)v103, *(unsigned int *)&v103[8], v59);
  v76 = *(_QWORD *)(a1 + 832);
  if (v76)
    v77 = *(_WORD *)(v76 + 8);
  else
    v77 = 0;
  v27 = sub_1C5D52060(a1, 216, a3, v56, v57, (uint64_t)v75, v74, v77);
  if (*(_BYTE **)v103 != &v103[16])
    free(*(void **)v103);
  v89 = __src;
  if (__src != v102)
LABEL_117:
    free(v89);
  return v27;
}

uint64_t *sub_1C5D404C4(uint64_t a1, const llvm::APInt *a2, _BOOL8 a3, uint64_t a4, int a5, double a6)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  const llvm::APFloat *v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  llvm *v17;
  uint64_t v18;
  llvm::APFloatBase *v19;
  uint64_t *v20;
  llvm *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v22 = (llvm *)a3;
  v23 = a4;
  v11 = sub_1C6131264((unsigned __int8 *)&v22, (uint64_t)a2, a3);
  if (v11 == 11)
  {
    LODWORD(v29) = 64;
    v28 = *(_QWORD *)&a6;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v24, (const llvm::APInt **)&v28);
    goto LABEL_5;
  }
  if (v11 == 10)
  {
    *(float *)&v12 = a6;
    LODWORD(v29) = 32;
    v28 = v12;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v24, (const llvm::APInt **)&v28);
LABEL_5:
    v29 = v24;
    v30 = v25;
    v31 = v26;
    v32 = v27 & 0xF;
    goto LABEL_7;
  }
  v14 = v10;
  LODWORD(v29) = 64;
  v28 = *(_QWORD *)&a6;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v24, (const llvm::APInt **)&v28);
  v29 = v24;
  v30 = v25;
  v31 = v26;
  v32 = v27 & 0xF;
  sub_1C632993C(v11, v14, v15);
  llvm::APFloat::convert((uint64_t)&v28, v16, 1, &v24);
LABEL_7:
  v17 = v22;
  v18 = v23;
  v19 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a1 + 56), (llvm::LLVMContext *)&v28, v13);
  v20 = sub_1C6366D64(a1, (uint64_t)v19, a2, v17, v18, a5);
  if ((_UNKNOWN *)v29 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v30);
  }
  else if ((*(_DWORD *)(v29 + 8) - 64) <= 0xFFFFFF7F && v30)
  {
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  }
  return v20;
}

uint64_t sub_1C5D406AC(uint64_t a1, int a2, llvm *a3, uint64_t a4, int a5)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *i;
  unsigned __int8 v23;
  int v24;
  _QWORD v25[2];
  void *__s2;
  uint64_t v27;
  _BYTE v28[128];
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x1E0C80C00];
  v25[0] = a3;
  v25[1] = a4;
  v24 = a2;
  v23 = a5;
  __s2 = v28;
  v27 = 0x2000000000;
  v8 = sub_1C636D7B0(a3, a4);
  if (a5)
    v9 = 39;
  else
    v9 = 15;
  sub_1C5D3E710(&__s2, v9, v8, 1, 0, 0);
  v10 = v27;
  if (v27 >= HIDWORD(v27))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v28, v27 + 1, 4);
    v10 = v27;
  }
  *((_DWORD *)__s2 + v10) = a2;
  LODWORD(v27) = v27 + 1;
  v11 = *(_QWORD *)(a1 + 328)
      + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v27));
  v12 = *(_QWORD *)v11;
  v29 = v31;
  v30 = 0x2000000000;
  if (v12)
    v13 = (v12 & 1) == 0;
  else
    v13 = 0;
  if (v13)
  {
    while (1)
    {
      sub_1C636F81C(v12, (unsigned int *)&v29);
      if ((_DWORD)v27 == (_DWORD)v30)
      {
        v14 = v29;
        if (!memcmp(v29, __s2, 4 * v27))
          break;
      }
      LODWORD(v30) = 0;
      v12 = *(_QWORD *)v12;
      if (v12)
        v15 = (v12 & 1) == 0;
      else
        v15 = 0;
      if (!v15)
      {
        v12 = 0;
        v14 = v29;
        goto LABEL_19;
      }
    }
    v11 = 0;
LABEL_19:
    if (v14 == v31)
    {
      if (v12)
        goto LABEL_26;
    }
    else
    {
      free(v14);
      if (v12)
        goto LABEL_26;
    }
  }
  v12 = sub_1C63672E4(a1, &v24, (uint64_t)v25, &v23);
  v16 = *(_DWORD *)(a1 + 340) + 1;
  v17 = *(_DWORD *)(a1 + 336);
  if (v16 > 2 * v17)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v17, (uint64_t)off_1E8198CA0);
    v29 = v31;
    v30 = 0x2000000000;
    v11 = *(_QWORD *)(a1 + 328)
        + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v12, (unsigned int *)&v29));
    if (v29 != v31)
      free(v29);
    v16 = *(_DWORD *)(a1 + 340) + 1;
  }
  v18 = *(_QWORD *)v11;
  if (!*(_QWORD *)v11)
    v18 = v11 | 1;
  *(_QWORD *)v12 = v18;
  *(_QWORD *)v11 = v12;
  v20 = *(_QWORD *)(a1 + 208);
  v19 = a1 + 208;
  *(_DWORD *)(v19 + 132) = v16;
  *(_QWORD *)(v12 + 8) = v20;
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v20 + 8) = v12 + 8;
  *(_QWORD *)v19 = v12 + 8;
  for (i = *(_QWORD **)(v19 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t))(*i + 32))(i, v12);
LABEL_26:
  if (__s2 != v28)
    free(__s2);
  return v12;
}

uint64_t sub_1C5D40978(uint64_t a1, int a2, llvm *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *i;
  int v26;
  unsigned __int8 v27;
  int v28;
  _QWORD v29[2];
  void *__s2;
  uint64_t v31;
  _BYTE v32[128];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[17];

  v35[16] = *MEMORY[0x1E0C80C00];
  v29[0] = a3;
  v29[1] = a4;
  v28 = a2;
  v27 = a5;
  v26 = a6;
  __s2 = v32;
  v31 = 0x2000000000;
  v10 = sub_1C636D7B0(a3, a4);
  if (a5)
    v11 = 40;
  else
    v11 = 16;
  sub_1C5D3E710(&__s2, v11, v10, 1, 0, 0);
  v12 = v31;
  if (v31 >= HIDWORD(v31))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v32, v31 + 1, 4);
    v12 = v31;
  }
  *((_DWORD *)__s2 + v12) = a2;
  v13 = (v31 + 1);
  LODWORD(v31) = v13;
  if (v13 >= HIDWORD(v31))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v32, v13 + 1, 4);
    LODWORD(v13) = v31;
  }
  *((_DWORD *)__s2 + v13) = a6;
  LODWORD(v31) = v31 + 1;
  v14 = *(_QWORD *)(a1 + 328)
      + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v31));
  v15 = *(_QWORD *)v14;
  v33 = v35;
  v34 = 0x2000000000;
  if (v15)
    v16 = (v15 & 1) == 0;
  else
    v16 = 0;
  if (v16)
  {
    while (1)
    {
      sub_1C636F81C(v15, (unsigned int *)&v33);
      if ((_DWORD)v31 == (_DWORD)v34)
      {
        v17 = v33;
        if (!memcmp(v33, __s2, 4 * v31))
          break;
      }
      LODWORD(v34) = 0;
      v15 = *(_QWORD *)v15;
      if (v15)
        v18 = (v15 & 1) == 0;
      else
        v18 = 0;
      if (!v18)
      {
        v15 = 0;
        v17 = v33;
        goto LABEL_21;
      }
    }
    v14 = 0;
LABEL_21:
    if (v17 == v35)
    {
      if (v15)
        goto LABEL_28;
    }
    else
    {
      free(v17);
      if (v15)
        goto LABEL_28;
    }
  }
  v15 = sub_1C6367344(a1, &v28, (uint64_t)v29, &v27, &v26);
  v19 = *(_DWORD *)(a1 + 340) + 1;
  v20 = *(_DWORD *)(a1 + 336);
  if (v19 > 2 * v20)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v20, (uint64_t)off_1E8198CA0);
    v33 = v35;
    v34 = 0x2000000000;
    v14 = *(_QWORD *)(a1 + 328)
        + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v15, (unsigned int *)&v33));
    if (v33 != v35)
      free(v33);
    v19 = *(_DWORD *)(a1 + 340) + 1;
  }
  v21 = *(_QWORD *)v14;
  if (!*(_QWORD *)v14)
    v21 = v14 | 1;
  *(_QWORD *)v15 = v21;
  *(_QWORD *)v14 = v15;
  v23 = *(_QWORD *)(a1 + 208);
  v22 = a1 + 208;
  *(_DWORD *)(v22 + 132) = v19;
  *(_QWORD *)(v15 + 8) = v23;
  *(_QWORD *)(v15 + 16) = v22;
  *(_QWORD *)(v23 + 8) = v15 + 8;
  *(_QWORD *)v22 = v15 + 8;
  for (i = *(_QWORD **)(v22 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t))(*i + 32))(i, v15);
LABEL_28:
  if (__s2 != v32)
    free(__s2);
  return v15;
}

uint64_t sub_1C5D40C8C(uint64_t a1, uint64_t *a2, llvm *a3, uint64_t a4, __int16 a5, int a6, int a7, int a8)
{
  unsigned __int8 v11;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *i;
  int v37;
  unsigned __int8 v38;
  int v39;
  uint64_t *v40;
  __int16 v41;
  _QWORD v42[2];
  void *__s2;
  uint64_t v44;
  _BYTE v45[128];
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[17];

  v11 = a5;
  v48[16] = *MEMORY[0x1E0C80C00];
  v42[0] = a3;
  v42[1] = a4;
  v41 = a5;
  v40 = a2;
  v39 = a6;
  v38 = a7;
  v37 = a8;
  if ((a5 & 0xFF00) == 0)
  {
    sub_1C636604C(a1);
    llvm::DataLayout::getAlignment(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, *a2);
    v11 = v16;
    v41 = v16 | 0x100;
  }
  __s2 = v45;
  v44 = 0x2000000000;
  v17 = sub_1C636D7B0(a3, a4);
  if (a7)
    v18 = 41;
  else
    v18 = 17;
  sub_1C5D3E710(&__s2, v18, v17, 1, 0, 0);
  v19 = 1 << v11;
  v20 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v45, v44 + 1, 4);
    v20 = v44;
  }
  *((_DWORD *)__s2 + v20) = v19;
  v21 = (v44 + 1);
  LODWORD(v44) = v21;
  if (v21 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v45, v21 + 1, 4);
    LODWORD(v21) = v44;
  }
  *((_DWORD *)__s2 + v21) = HIDWORD(v19);
  v22 = (v44 + 1);
  LODWORD(v44) = v22;
  if (v22 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v45, v22 + 1, 4);
    LODWORD(v22) = v44;
  }
  *((_DWORD *)__s2 + v22) = a6;
  v23 = (v44 + 1);
  LODWORD(v44) = v23;
  if (v23 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v45, v23 + 1, 4);
    LODWORD(v23) = v44;
  }
  *((_DWORD *)__s2 + v23) = (_DWORD)a2;
  v24 = (v44 + 1);
  LODWORD(v44) = v24;
  if (v24 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v45, v24 + 1, 4);
    LODWORD(v24) = v44;
  }
  *((_DWORD *)__s2 + v24) = HIDWORD(a2);
  v25 = (v44 + 1);
  LODWORD(v44) = v25;
  if (v25 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v45, v25 + 1, 4);
    LODWORD(v25) = v44;
  }
  *((_DWORD *)__s2 + v25) = a8;
  LODWORD(v44) = v44 + 1;
  v26 = *(_QWORD *)(a1 + 328)
      + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v44));
  v27 = *(_QWORD *)v26;
  v46 = v48;
  v47 = 0x2000000000;
  if (v27 && (v27 & 1) == 0)
  {
    while (1)
    {
      sub_1C636F81C(v27, (unsigned int *)&v46);
      if ((_DWORD)v44 == (_DWORD)v47)
      {
        v28 = v46;
        if (!memcmp(v46, __s2, 4 * v44))
          break;
      }
      LODWORD(v47) = 0;
      v27 = *(_QWORD *)v27;
      if (v27)
        v29 = (v27 & 1) == 0;
      else
        v29 = 0;
      if (!v29)
      {
        v27 = 0;
        v28 = v46;
        goto LABEL_28;
      }
    }
    v26 = 0;
LABEL_28:
    if (v28 == v48)
    {
      if (v27)
        goto LABEL_35;
    }
    else
    {
      free(v28);
      if (v27)
        goto LABEL_35;
    }
  }
  v27 = sub_1C63673AC(a1, &v38, (uint64_t *)&v40, (uint64_t)v42, &v39, (char *)&v41, &v37);
  v30 = *(_DWORD *)(a1 + 340) + 1;
  v31 = *(_DWORD *)(a1 + 336);
  if (v30 > 2 * v31)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v31, (uint64_t)off_1E8198CA0);
    v46 = v48;
    v47 = 0x2000000000;
    v26 = *(_QWORD *)(a1 + 328)
        + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v27, (unsigned int *)&v46));
    if (v46 != v48)
      free(v46);
    v30 = *(_DWORD *)(a1 + 340) + 1;
  }
  v32 = *(_QWORD *)v26;
  if (!*(_QWORD *)v26)
    v32 = v26 | 1;
  *(_QWORD *)v27 = v32;
  *(_QWORD *)v26 = v27;
  v34 = *(_QWORD *)(a1 + 208);
  v33 = a1 + 208;
  *(_DWORD *)(v33 + 132) = v30;
  *(_QWORD *)(v27 + 8) = v34;
  *(_QWORD *)(v27 + 16) = v33;
  *(_QWORD *)(v34 + 8) = v27 + 8;
  *(_QWORD *)v33 = v27 + 8;
  for (i = *(_QWORD **)(v33 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t))(*i + 32))(i, v27);
LABEL_35:
  if (__s2 != v45)
    free(__s2);
  return v27;
}

uint64_t sub_1C5D410E8(uint64_t a1, int a2, llvm *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *i;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  void *__s2;
  uint64_t v31;
  _BYTE v32[128];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[17];

  v35[16] = *MEMORY[0x1E0C80C00];
  v29[0] = a3;
  v29[1] = a4;
  v28 = a2;
  v27 = a5;
  v26 = a6;
  __s2 = v32;
  v31 = 0x2000000000;
  v10 = sub_1C636D7B0(a3, a4);
  sub_1C5D3E710(&__s2, 45, v10, 1, 0, 0);
  v11 = v31;
  if (v31 >= HIDWORD(v31))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v32, v31 + 1, 4);
    v11 = v31;
  }
  *((_DWORD *)__s2 + v11) = a2;
  v12 = (v31 + 1);
  LODWORD(v31) = v12;
  if (v12 >= HIDWORD(v31))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v32, v12 + 1, 4);
    LODWORD(v12) = v31;
  }
  *((_DWORD *)__s2 + v12) = a5;
  v13 = (v31 + 1);
  LODWORD(v31) = v13;
  if (v13 >= HIDWORD(v31))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v32, v13 + 1, 4);
    LODWORD(v13) = v31;
  }
  *((_DWORD *)__s2 + v13) = HIDWORD(a5);
  v14 = (v31 + 1);
  LODWORD(v31) = v14;
  if (v14 >= HIDWORD(v31))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v32, v14 + 1, 4);
    LODWORD(v14) = v31;
  }
  *((_DWORD *)__s2 + v14) = a6;
  LODWORD(v31) = v31 + 1;
  v15 = *(_QWORD *)(a1 + 328)
      + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v31));
  v16 = *(_QWORD *)v15;
  v33 = v35;
  v34 = 0x2000000000;
  if (v16 && (v16 & 1) == 0)
  {
    while (1)
    {
      sub_1C636F81C(v16, (unsigned int *)&v33);
      if ((_DWORD)v31 == (_DWORD)v34)
      {
        v17 = v33;
        if (!memcmp(v33, __s2, 4 * v31))
          break;
      }
      LODWORD(v34) = 0;
      v16 = *(_QWORD *)v16;
      if (v16)
        v18 = (v16 & 1) == 0;
      else
        v18 = 0;
      if (!v18)
      {
        v16 = 0;
        v17 = v33;
        goto LABEL_19;
      }
    }
    v15 = 0;
LABEL_19:
    if (v17 == v35)
    {
      if (v16)
        goto LABEL_26;
    }
    else
    {
      free(v17);
      if (v16)
        goto LABEL_26;
    }
  }
  v16 = sub_1C636742C(a1, &v28, (uint64_t)v29, &v27, &v26);
  v19 = *(_DWORD *)(a1 + 340) + 1;
  v20 = *(_DWORD *)(a1 + 336);
  if (v19 > 2 * v20)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v20, (uint64_t)off_1E8198CA0);
    v33 = v35;
    v34 = 0x2000000000;
    v15 = *(_QWORD *)(a1 + 328)
        + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v16, (unsigned int *)&v33));
    if (v33 != v35)
      free(v33);
    v19 = *(_DWORD *)(a1 + 340) + 1;
  }
  v21 = *(_QWORD *)v15;
  if (!*(_QWORD *)v15)
    v21 = v15 | 1;
  *(_QWORD *)v16 = v21;
  *(_QWORD *)v15 = v16;
  v23 = *(_QWORD *)(a1 + 208);
  v22 = a1 + 208;
  *(_DWORD *)(v22 + 132) = v19;
  *(_QWORD *)(v16 + 8) = v23;
  *(_QWORD *)(v16 + 16) = v22;
  *(_QWORD *)(v23 + 8) = v16 + 8;
  *(_QWORD *)v22 = v16 + 8;
  for (i = *(_QWORD **)(v22 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t))(*i + 32))(i, v16);
LABEL_26:
  if (__s2 != v32)
    free(__s2);
  return v16;
}

unint64_t sub_1C5D4145C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  void *__s2;
  uint64_t v20;
  _BYTE v21[128];
  void *__s1;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  __s2 = v21;
  v20 = 0x2000000000;
  v4 = sub_1C636D7B0((llvm *)1, 0);
  sub_1C5D3E710(&__s2, 6, v4, 1, 0, 0);
  v5 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v20 + 1, 4);
    v5 = v20;
  }
  *((_DWORD *)__s2 + v5) = a2;
  v6 = (v20 + 1);
  LODWORD(v20) = v6;
  if (v6 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v6 + 1, 4);
    LODWORD(v6) = v20;
  }
  *((_DWORD *)__s2 + v6) = HIDWORD(a2);
  LODWORD(v20) = v20 + 1;
  v7 = *(_QWORD *)(a1 + 328)
     + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v20));
  v8 = *(_QWORD *)v7;
  __s1 = v24;
  v23 = 0x2000000000;
  if (v8)
    v9 = (v8 & 1) == 0;
  else
    v9 = 0;
  if (v9)
  {
    while (1)
    {
      sub_1C636F81C(v8, (unsigned int *)&__s1);
      if ((_DWORD)v20 == (_DWORD)v23)
      {
        v10 = __s1;
        if (!memcmp(__s1, __s2, 4 * v20))
          break;
      }
      LODWORD(v23) = 0;
      v8 = *(_QWORD *)v8;
      if (v8)
        v11 = (v8 & 1) == 0;
      else
        v11 = 0;
      if (!v11)
      {
        v8 = 0;
        v10 = __s1;
        goto LABEL_18;
      }
    }
    v7 = 0;
LABEL_18:
    if (v10 == v24)
    {
      if (v8)
        goto LABEL_28;
    }
    else
    {
      free(v10);
      if (v8)
        goto LABEL_28;
    }
  }
  v8 = *(_QWORD *)(a1 + 224);
  if (v8)
    *(_QWORD *)(a1 + 224) = *(_QWORD *)v8;
  else
    v8 = sub_1C484358C(a1 + 232, 104, 3);
  sub_1C6370CC4(v8, a2);
  v12 = *(_DWORD *)(a1 + 340) + 1;
  v13 = *(_DWORD *)(a1 + 336);
  if (v12 > 2 * v13)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v13, (uint64_t)off_1E8198CA0);
    __s1 = v24;
    v23 = 0x2000000000;
    v7 = *(_QWORD *)(a1 + 328)
       + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v8, (unsigned int *)&__s1));
    if (__s1 != v24)
      free(__s1);
    v12 = *(_DWORD *)(a1 + 340) + 1;
  }
  v14 = *(_QWORD *)v7;
  if (!*(_QWORD *)v7)
    v14 = v7 | 1;
  *(_QWORD *)v8 = v14;
  *(_QWORD *)v7 = v8;
  v16 = *(_QWORD *)(a1 + 208);
  v15 = a1 + 208;
  *(_DWORD *)(v15 + 132) = v12;
  *(_QWORD *)(v8 + 8) = v16;
  *(_QWORD *)(v8 + 16) = v15;
  *(_QWORD *)(v16 + 8) = v8 + 8;
  *(_QWORD *)v15 = v8 + 8;
  for (i = *(_QWORD **)(v15 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, unint64_t))(*i + 32))(i, v8);
LABEL_28:
  if (__s2 != v21)
    free(__s2);
  return v8;
}

uint64_t sub_1C5D41764(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  size_t v14;
  __int128 *v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  int v26;
  BOOL v27;
  size_t v28;
  int v29;
  BOOL v30;
  uint64_t **v31;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t result;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  __int128 __dst;
  int64_t v48;
  int v49;
  int v50;
  char *v51;
  _QWORD v52[2];

  v52[0] = a3;
  v52[1] = a4;
  v51 = __s;
  v50 = a5;
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v48 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v48) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, __s, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = v50;
  v49 = v50;
  v13 = *(_QWORD **)(a1 + 792);
  if (v13)
  {
    v46 = HIBYTE(v48);
    if (v48 >= 0)
      v14 = HIBYTE(v48);
    else
      v14 = *((_QWORD *)&__dst + 1);
    if (v48 >= 0)
      v15 = &__dst;
    else
      v15 = (__int128 *)__dst;
    if (v48 >= 0)
      v16 = HIBYTE(v48) & 0x7F;
    else
      v16 = *((_QWORD *)&__dst + 1);
    while (1)
    {
      while (1)
      {
        v17 = (char *)v13;
        v20 = (const void *)v13[4];
        v18 = v13 + 4;
        v19 = v20;
        v21 = *((unsigned __int8 *)v18 + 23);
        if ((v21 & 0x80u) == 0)
          v22 = v18;
        else
          v22 = v19;
        v23 = v18[1];
        if ((v21 & 0x80u) == 0)
          v24 = v21 & 0x7F;
        else
          v24 = v18[1];
        if (v24 >= v14)
          v25 = v14;
        else
          v25 = v24;
        v26 = memcmp(v15, v22, v25);
        v27 = v14 < v24;
        if (v26)
          v27 = v26 < 0;
        if (!v27)
        {
          if ((v21 & 0x80u) == 0)
            v23 = v21;
          if (v14 >= v23)
            v28 = v23;
          else
            v28 = v14;
          v29 = memcmp(v22, v15, v28);
          v30 = v23 < v14;
          if (v29)
            v30 = v29 < 0;
          if (v30 || v12 >= *((_DWORD *)v17 + 14))
            break;
        }
        v13 = *(_QWORD **)v17;
        v31 = (uint64_t **)v17;
        if (!*(_QWORD *)v17)
          goto LABEL_55;
      }
      if (v16 >= v23)
        v32 = v23;
      else
        v32 = v16;
      v33 = memcmp(v22, v15, v32);
      v34 = v23 < v16;
      if (v33)
        v34 = v33 < 0;
      if (!v34)
      {
        v35 = memcmp(v15, v22, v28);
        v36 = v14 < v23;
        if (v35)
          v36 = v35 < 0;
        if (v36 || *((_DWORD *)v17 + 14) >= v12)
          break;
      }
      v13 = (_QWORD *)*((_QWORD *)v17 + 1);
      if (!v13)
      {
        v31 = (uint64_t **)(v17 + 8);
        goto LABEL_55;
      }
    }
    if (v46 < 0)
LABEL_58:
      operator delete((void *)__dst);
  }
  else
  {
    v31 = (uint64_t **)(a1 + 792);
    v17 = (char *)(a1 + 792);
LABEL_55:
    v37 = v17;
    v17 = (char *)operator new(0x48uLL);
    *((_OWORD *)v17 + 2) = __dst;
    *((_QWORD *)v17 + 6) = v48;
    __dst = 0uLL;
    v48 = 0;
    *((_DWORD *)v17 + 14) = v12;
    *((_QWORD *)v17 + 8) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = v37;
    *v31 = (uint64_t *)v17;
    v38 = **(_QWORD **)(a1 + 784);
    v39 = (uint64_t *)v17;
    if (v38)
    {
      *(_QWORD *)(a1 + 784) = v38;
      v39 = *v31;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 792), v39);
    ++*(_QWORD *)(a1 + 800);
    if (v48 < 0)
      goto LABEL_58;
  }
  result = *((_QWORD *)v17 + 8);
  if (!result)
  {
    LOBYTE(__dst) = 1;
    v41 = sub_1C63676B4(a1, (unsigned __int8 *)&__dst, (uint64_t *)&v51, &v50, (uint64_t)v52);
    *((_QWORD *)v17 + 8) = v41;
    v43 = *(_QWORD *)(a1 + 208);
    v42 = (_QWORD *)(a1 + 208);
    *(_QWORD *)(v41 + 16) = v42;
    *(_QWORD *)(v41 + 8) = v43;
    *(_QWORD *)(v43 + 8) = v41 + 8;
    *v42 = v41 + 8;
    v44 = (_QWORD *)v42[56];
    if (v44)
    {
      v45 = v41;
      do
      {
        (*(void (**)(_QWORD *, uint64_t))(*v44 + 32))(v44, v45);
        v44 = (_QWORD *)v44[1];
      }
      while (v44);
    }
    return *((_QWORD *)v17 + 8);
  }
  return result;
}

uint64_t sub_1C5D41A84(uint64_t a1, const char *a2, _BOOL8 a3, uint64_t a4, unsigned int *a5)
{
  unint64_t EVT;
  const llvm::APInt *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  llvm::ValueHandleBase *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  const unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  const llvm::APInt *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  llvm::ValueHandleBase *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  unsigned int v47;
  _BOOL8 v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[34];

  v52[32] = *MEMORY[0x1E0C80C00];
  v48 = a3;
  v49 = a4;
  if (a3)
  {
    if (a3 - 120 < 0x33)
    {
      LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v48);
      v12 = 0;
      v13 = 0;
LABEL_6:
      v15 = v12 | EVT;
      v16 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)a5, v11);
      v18 = sub_1C5D3FAF8(a1, v16, a2, v15, v13, 1, 0);
      v19 = *(_QWORD *)(a1 + 832);
      if (v19)
        v20 = *(unsigned __int16 *)(v19 + 8);
      else
        v20 = 0;
      return sub_1C5D52060(a1, 158, a2, a3, a4, v18, v17, v20);
    }
  }
  else if (*(_BYTE *)(a4 + 8) == 19)
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a4 + 24), 0, a3);
    v13 = v14;
    v12 = EVT & 0xFFFFFFFFFFFFFF00;
    goto LABEL_6;
  }
  v50 = v52;
  v51 = 0x1000000000;
  if (sub_1C612FE00((llvm::EVT *)&v48, a2))
  {
    v26 = 0;
    do
    {
      v27 = a5[2];
      if (v27 > 0x40)
      {
        v31 = (char *)operator new[]();
        v45 = v31;
        memcpy(v31, *(const void **)a5, ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8);
        v32 = (unint64_t)(v27 + 63) >> 6;
        llvm::APInt::tcMultiplyPart((llvm::APInt *)v31, (unint64_t *)v31, v26, 0, v32, v32, 0);
        v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
        v30 = (unint64_t *)&v31[8 * (v32 - 1)];
        v28 = *v30;
      }
      else
      {
        v28 = *(_QWORD *)a5 * (_QWORD)v26;
        v45 = (char *)v28;
        v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
        if (!(_DWORD)v27)
          v29 = 0;
        v30 = (unint64_t *)&v45;
      }
      *v30 = v28 & v29;
      v47 = v27;
      v46 = v45;
      if (v48)
      {
        LOBYTE(v33) = sub_1C47F37A0((unsigned __int8 *)&v48);
        v37 = 0;
        v36 = 0;
      }
      else
      {
        v33 = llvm::EVT::getEVT(*(llvm::EVT **)(v49 + 24), 0, v23);
        v36 = v35;
        v37 = v33 & 0xFFFFFFFFFFFFFF00;
      }
      v38 = v37 | v33;
      v39 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v46, v34);
      v41 = sub_1C5D3FAF8(a1, v39, a2, v38, v36, 0, 0);
      v42 = v40;
      v43 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 16);
        v43 = v51;
      }
      v44 = (uint64_t *)((char *)v50 + 16 * v43);
      *v44 = v41;
      v44[1] = (uint64_t)v42;
      LODWORD(v51) = v51 + 1;
      if (v47 >= 0x41 && v46)
        MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
      v26 = (const unint64_t *)((char *)v26 + 1);
    }
    while ((unint64_t)v26 < sub_1C612FE00((llvm::EVT *)&v48, v40));
  }
  v24 = *(_QWORD *)(a1 + 832);
  if (v24)
    v25 = *(unsigned __int16 *)(v24 + 8);
  else
    v25 = 0;
  v21 = sub_1C636D0C8(a1, 146, a2, v48, v49, v50, v51, v25);
  if (v50 != v52)
    free(v50);
  return v21;
}

_QWORD *sub_1C5D41DE4(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, void *__src, uint64_t a10)
{
  _QWORD *v11;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  int v26;
  int *v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  const char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  const char *v74;
  int v75;
  char *v76;
  uint64_t v77;
  int v78;
  void *v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *i;
  int v87;
  uint64_t v89;
  llvm::APInt *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  BOOL v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  int v100;
  llvm *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  llvm *v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned int v109;
  _QWORD *v110;
  unsigned int v111;
  void *v112[2];
  _BYTE v113[128];
  void *v114;
  uint64_t v115;
  _BYTE v116[32];
  char *v117;
  uint64_t v118;
  _BYTE v119[48];
  int v120;
  uint64_t v121;

  v11 = (_QWORD *)a7;
  v121 = *MEMORY[0x1E0C80C00];
  v106 = a2;
  v107 = a3;
  if (*(_WORD *)(a5 + 24) == 51 && *(_WORD *)(a7 + 24) == 51)
    return sub_1C61312D0(a1, a2, a3);
  v114 = v116;
  v115 = 0x800000000;
  if ((unint64_t)(4 * a10) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, (4 * a10) >> 2, 4);
    v16 = v115;
    if (!a10)
      goto LABEL_6;
    goto LABEL_5;
  }
  v16 = 0;
  if (a10)
  {
LABEL_5:
    memcpy((char *)v114 + 4 * v16, __src, 4 * a10);
    v16 = v115;
  }
LABEL_6:
  LODWORD(v115) = v16 + ((unint64_t)(4 * a10) >> 2);
  if ((_QWORD *)a5 == v11 && a6 == a8)
  {
    v11 = sub_1C61312D0(a1, v106, v107);
    a8 = v40;
    if ((_DWORD)a10)
    {
      v41 = v114;
      v42 = a10;
      do
      {
        if (*v41 >= (int)a10)
          *v41 -= a10;
        ++v41;
        --v42;
      }
      while (v42);
    }
  }
  if (*(_WORD *)(a5 + 24) == 51)
  {
    v17 = v115;
    v18 = a6;
    a6 = a8;
    a8 = v18;
    if ((_DWORD)v115)
    {
      v19 = (int *)v114;
      v20 = -(int)v115;
      v21 = v115;
      do
      {
        v22 = *v19;
        if ((*v19 & 0x80000000) == 0)
        {
          if (v22 >= v17)
            v23 = v20;
          else
            v23 = v17;
          *v19 = v23 + v22;
        }
        ++v19;
        --v21;
      }
      while (v21);
    }
    v24 = (_QWORD *)a5;
  }
  else
  {
    v24 = v11;
    v11 = (_QWORD *)a5;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 1248))(*(_QWORD *)(a1 + 24)))
    goto LABEL_27;
  if (*((_WORD *)v11 + 12) == 146 && v11)
  {
    v117 = v119;
    v118 = 0x600000000;
    v120 = 0;
    v56 = sub_1C6367A48((uint64_t)v11, (uint64_t)&v117);
    v57 = v117;
    if (!v56 || (int)a10 < 1)
    {
LABEL_93:
      if (v57 != v119)
        free(v57);
      goto LABEL_22;
    }
    v58 = 0;
    v59 = v114;
    while (1)
    {
      v60 = v59[v58];
      if ((v60 & 0x80000000) != 0 || (int)v60 >= (int)a10)
        goto LABEL_90;
      if (((*(_QWORD *)&v57[(v60 >> 3) & 0x1FFFFFF8] >> v60) & 1) != 0)
      {
        v61 = -1;
      }
      else
      {
        if (((*(_QWORD *)&v57[8 * (v58 >> 6)] >> v58) & 1) != 0)
          goto LABEL_90;
        v61 = v58;
      }
      v59[v58] = v61;
LABEL_90:
      if ((int)a10 == ++v58)
        goto LABEL_93;
    }
  }
LABEL_22:
  if (*((_WORD *)v24 + 12) == 146 && v24 != 0)
  {
    v117 = v119;
    v118 = 0x600000000;
    v120 = 0;
    v62 = sub_1C6367A48((uint64_t)v24, (uint64_t)&v117);
    v63 = v117;
    if (v62 && (int)a10 >= 1)
    {
      v64 = 0;
      v65 = v114;
      do
      {
        v66 = v65[v64];
        if (v66 < (int)a10 || v66 >= 2 * (int)a10)
          goto LABEL_107;
        if (((*(_QWORD *)&v63[8 * ((v66 - a10) >> 6)] >> (v66 - a10)) & 1) != 0)
        {
          v68 = -1;
        }
        else
        {
          if (((*(_QWORD *)&v63[8 * (v64 >> 6)] >> v64) & 1) != 0)
            goto LABEL_107;
          v68 = a10 + v64;
        }
        v65[v64] = v68;
LABEL_107:
        ++v64;
      }
      while ((int)a10 != v64);
    }
    if (v63 != v119)
      free(v63);
  }
LABEL_27:
  v26 = *((unsigned __int16 *)v24 + 12);
  if ((_DWORD)a10)
  {
    v27 = (int *)v114;
    v28 = a10;
    v29 = 1;
    v30 = 1;
    do
    {
      if (*v27 >= (int)a10)
      {
        if (v26 == 51)
          *v27 = -1;
        else
          v29 = 0;
      }
      else
      {
        v30 &= *v27 < 0;
      }
      ++v27;
      --v28;
    }
    while (v28);
    if ((v29 & 1) == 0)
      goto LABEL_39;
  }
  else
  {
    v30 = 1;
    v29 = 1;
  }
  if ((v30 & 1) != 0)
    goto LABEL_54;
LABEL_39:
  if ((v29 & (v26 != 51)) == 1)
  {
    v24 = sub_1C61312D0(a1, v106, v107);
    a8 = v43;
    if ((v30 & 1) == 0)
      goto LABEL_41;
  }
  else if ((v30 & 1) == 0)
  {
LABEL_41:
    v31 = v24;
    v24 = v11;
    goto LABEL_42;
  }
  v31 = sub_1C61312D0(a1, v106, v107);
  v44 = v115;
  a6 = a8;
  a8 = v45;
  if ((_DWORD)v115)
  {
    v46 = (int *)v114;
    v47 = -(int)v115;
    v48 = v115;
    do
    {
      v49 = *v46;
      if ((*v46 & 0x80000000) == 0)
      {
        if (v49 >= v44)
          v50 = v47;
        else
          v50 = v44;
        *v46 = v50 + v49;
      }
      ++v46;
      --v48;
    }
    while (v48);
  }
LABEL_42:
  v32 = *((unsigned __int16 *)v31 + 12);
  v33 = *((unsigned __int16 *)v24 + 12);
  if (v33 != 51 || v32 != 51)
  {
    v103 = a4;
    if ((_DWORD)a10)
    {
      v34 = 0;
      v35 = 1;
      LOBYTE(v36) = 1;
      do
      {
        v37 = *((unsigned int *)v114 + v34);
        if ((int)v37 >= 0)
          v35 &= v34 == v37;
        v36 = ((_DWORD)v37 == *(_DWORD *)v114) & v36;
        ++v34;
      }
      while (a10 != v34);
      if ((v35 & 1) != 0)
      {
        v38 = v24;
        goto LABEL_51;
      }
    }
    else
    {
      v36 = 1;
    }
    if (v32 != 51)
      goto LABEL_112;
    v38 = v24;
    v51 = a6;
    while (v33 == 216)
    {
      v52 = (_DWORD *)v38[4];
      v38 = *(_QWORD **)v52;
      v51 = v52[2];
      v33 = *(unsigned __int16 *)(*(_QWORD *)v52 + 24);
    }
    if (v33 != 146)
    {
LABEL_112:
      v112[0] = v113;
      v112[1] = (void *)0x2000000000;
      v108 = v24;
      v109 = a6;
      v110 = v31;
      v111 = a8;
      v69 = sub_1C636D7B0(v106, v107);
      sub_1C5D3E710(v112, 153, v69, 1, (uint64_t *)&v108, 2);
      if ((_DWORD)a10)
      {
        v70 = 0;
        v71 = v112[1];
        do
        {
          v72 = *(_DWORD *)((char *)v114 + v70);
          if (v71 >= HIDWORD(v112[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v112, (uint64_t)v113, v71 + 1, 4);
            v71 = v112[1];
          }
          *((_DWORD *)v112[0] + v71) = v72;
          v71 = ++LODWORD(v112[1]);
          v70 += 4;
        }
        while (4 * a10 != v70);
      }
      v105 = 0;
      v38 = sub_1C6365B08(a1, (uint64_t)v112, v103, &v105);
      if (!v38)
      {
        v79 = (void *)sub_1C484358C(a1 + 344, 4 * (int)a10, 2);
        v104 = v79;
        if ((_DWORD)v115)
          memmove(v79, v114, 4 * v115);
        LODWORD(v117) = *(_DWORD *)(v103 + 8);
        v38 = (_QWORD *)sub_1C6367ACC(a1, (uint64_t)&v106, (int *)&v117, (unsigned __int8 **)v103, (uint64_t *)&v104);
        sub_1C5D42768(a1, (uint64_t)v38, (uint64_t)&v108, 2);
        v80 = *(_DWORD *)(a1 + 340) + 1;
        v81 = *(_DWORD *)(a1 + 336);
        if (v80 > 2 * v81)
        {
          llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v81, (uint64_t)off_1E8198CA0);
          v117 = v119;
          v118 = 0x2000000000;
          v82 = *(_QWORD *)(a1 + 328)
              + 8
              * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v38, (unsigned int *)&v117));
          if (v117 != v119)
            free(v117);
          v80 = *(_DWORD *)(a1 + 340) + 1;
        }
        else
        {
          v82 = v105;
        }
        v83 = *(_QWORD *)v82;
        if (!*(_QWORD *)v82)
          v83 = v82 | 1;
        *v38 = v83;
        *(_QWORD *)v82 = v38;
        v85 = *(_QWORD *)(a1 + 208);
        v84 = a1 + 208;
        *(_DWORD *)(v84 + 132) = v80;
        v38[1] = v85;
        v38[2] = v84;
        *(_QWORD *)(v85 + 8) = v38 + 1;
        *(_QWORD *)v84 = v38 + 1;
        for (i = *(_QWORD **)(v84 + 448); i; i = (_QWORD *)i[1])
          (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v38);
      }
      if (v112[0] != v113)
        free(v112[0]);
      goto LABEL_51;
    }
    v117 = v119;
    v118 = 0x600000000;
    v120 = 0;
    v53 = sub_1C6367A48((uint64_t)v38, (uint64_t)&v117);
    if (v53 && *(_WORD *)(v53 + 24) == 51)
    {
      v38 = sub_1C61312D0(a1, v106, v107);
      v55 = 0;
      goto LABEL_134;
    }
    *(_OWORD *)v112 = *(_OWORD *)(v38[5] + 16 * v51);
    v73 = v53;
    v100 = sub_1C612FE00((llvm::EVT *)v112, v54);
    v75 = sub_1C612FE00((llvm::EVT *)&v106, v74);
    if (!v73)
      goto LABEL_129;
    if ((_DWORD)v118)
    {
      v76 = v117;
      v77 = 8 * v118;
      while (!*(_QWORD *)v76)
      {
        v76 += 8;
        v77 -= 8;
        if (!v77)
          goto LABEL_127;
      }
LABEL_129:
      if (v100 == v75)
        v78 = v36;
      else
        v78 = 0;
      if (v78 != 1)
        goto LABEL_133;
      v92 = v38[5];
      v93 = *(_QWORD *)(v92 + 8);
      v99 = v93;
      v101 = *(llvm **)v92;
      v94 = (uint64_t *)(v38[4] + 40 * *(unsigned int *)v114);
      v38 = sub_1C5CA0FB8(a1, v101, v93, (const llvm::APInt *)v103, *v94, v94[1]);
      if (v101 != v106 || (!(_BYTE)v101 ? (v96 = v99 == v107) : (v96 = 1), !v96))
      {
        v97 = *(_QWORD *)(a1 + 832);
        if (v97)
          v98 = *(_WORD *)(v97 + 8);
        else
          v98 = 0;
        v38 = sub_1C5D52060(a1, 216, (const llvm::APInt *)v103, v106, v107, (uint64_t)v38, v95, v98);
      }
      v55 = 0;
LABEL_134:
      if (v117 != v119)
      {
        v102 = v55;
        free(v117);
        v55 = v102;
      }
      if ((v55 & 1) == 0)
        goto LABEL_51;
      goto LABEL_112;
    }
LABEL_127:
    if (v100 == v75)
    {
      v55 = 0;
      v38 = v24;
      goto LABEL_134;
    }
    v87 = *(unsigned __int16 *)(v73 + 24);
    if (v87 != 35 && v87 != 11)
      goto LABEL_133;
    v89 = *(_QWORD *)(v73 + 80);
    v90 = (llvm::APInt *)(v89 + 24);
    v91 = *(_DWORD *)(v89 + 32);
    if (v91 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v90) == v91)
      {
LABEL_156:
        v55 = 0;
        v38 = v24;
        goto LABEL_134;
      }
    }
    else if (!*(_QWORD *)v90)
    {
      goto LABEL_156;
    }
LABEL_133:
    v55 = 1;
    goto LABEL_134;
  }
LABEL_54:
  v38 = sub_1C61312D0(a1, v106, v107);
LABEL_51:
  if (v114 != v116)
    free(v114);
  return v38;
}

uint64_t sub_1C5D42768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v24;

  v8 = (uint64_t *)(a1 + 440);
  v9 = 64 - __clz(a4 - 1);
  if (a4)
    v10 = v9;
  else
    v10 = 0;
  v11 = sub_1C636FD84(v8, v10, a1 + 344);
  if (a4)
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = &v11[5 * v12];
      v15[2] = a2;
      v16 = (uint64_t *)(a3 + 16 * v12);
      v17 = *v16;
      *((_DWORD *)v15 + 2) = *((_DWORD *)v16 + 2);
      *v15 = v17;
      v18 = *v16;
      v21 = *(_QWORD *)(v18 + 48);
      v19 = (_QWORD *)(v18 + 48);
      v20 = v21;
      v15[4] = v21;
      if (v21)
        *(_QWORD *)(v20 + 24) = v15 + 4;
      v11[5 * v12 + 3] = v19;
      *v19 = v15;
      if (*(_BYTE *)(*(_QWORD *)(*v15 + 40) + 16 * *((unsigned int *)v15 + 2)) != 1)
        v13 |= (*(_BYTE *)(*v15 + 26) & 4) >> 2;
      v12 = v14;
    }
    while (a4 != v14++);
  }
  else
  {
    LOBYTE(v13) = 0;
  }
  *(_WORD *)(a2 + 56) = a4;
  *(_QWORD *)(a2 + 32) = v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 1520))(*(_QWORD *)(a1 + 24), a2);
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 1504))(*(_QWORD *)(a1 + 24), a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72));
    if (((v13 | result) & 1) != 0)
      v24 = 4;
    else
      v24 = 0;
    *(_BYTE *)(a2 + 26) = *(_BYTE *)(a2 + 26) & 0xFB | v24;
  }
  return result;
}

uint64_t sub_1C5D428B0(uint64_t a1, int a2, llvm *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *i;
  int v21;
  _QWORD v22[2];
  void *__s2;
  uint64_t v24;
  _BYTE v25[128];
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x1E0C80C00];
  v22[0] = a3;
  v22[1] = a4;
  v21 = a2;
  __s2 = v25;
  v24 = 0x2000000000;
  v6 = sub_1C636D7B0(a3, a4);
  sub_1C5D3E710(&__s2, 9, v6, 1, 0, 0);
  v7 = v24;
  if (v24 >= HIDWORD(v24))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v25, v24 + 1, 4);
    v7 = v24;
  }
  *((_DWORD *)__s2 + v7) = a2;
  LODWORD(v24) = v24 + 1;
  v8 = *(_QWORD *)(a1 + 328)
     + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v24));
  v9 = *(_QWORD *)v8;
  v26 = v28;
  v27 = 0x2000000000;
  if (v9)
    v10 = (v9 & 1) == 0;
  else
    v10 = 0;
  if (v10)
  {
    while (1)
    {
      sub_1C636F81C(v9, (unsigned int *)&v26);
      if ((_DWORD)v24 == (_DWORD)v27)
      {
        v11 = v26;
        if (!memcmp(v26, __s2, 4 * v24))
          break;
      }
      LODWORD(v27) = 0;
      v9 = *(_QWORD *)v9;
      if (v9)
        v12 = (v9 & 1) == 0;
      else
        v12 = 0;
      if (!v12)
      {
        v9 = 0;
        v11 = v26;
        goto LABEL_16;
      }
    }
    v8 = 0;
LABEL_16:
    if (v11 == v28)
    {
      if (v9)
        goto LABEL_26;
    }
    else
    {
      free(v11);
      if (v9)
        goto LABEL_26;
    }
  }
  v9 = sub_1C6367CC8(a1, &v21, (uint64_t)v22);
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 1504))(*(_QWORD *)(a1 + 24), v9, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72)))
  {
    v13 = 4;
  }
  else
  {
    v13 = 0;
  }
  *(_BYTE *)(v9 + 26) = *(_BYTE *)(v9 + 26) & 0xFB | v13;
  v14 = *(_DWORD *)(a1 + 340) + 1;
  v15 = *(_DWORD *)(a1 + 336);
  if (v14 > 2 * v15)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v15, (uint64_t)off_1E8198CA0);
    v26 = v28;
    v27 = 0x2000000000;
    v8 = *(_QWORD *)(a1 + 328)
       + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v9, (unsigned int *)&v26));
    if (v26 != v28)
      free(v26);
    v14 = *(_DWORD *)(a1 + 340) + 1;
  }
  v16 = *(_QWORD *)v8;
  if (!*(_QWORD *)v8)
    v16 = v8 | 1;
  *(_QWORD *)v9 = v16;
  *(_QWORD *)v8 = v9;
  v18 = *(_QWORD *)(a1 + 208);
  v17 = a1 + 208;
  *(_DWORD *)(v17 + 132) = v14;
  *(_QWORD *)(v9 + 8) = v18;
  *(_QWORD *)(v9 + 16) = v17;
  *(_QWORD *)(v18 + 8) = v9 + 8;
  *(_QWORD *)v17 = v9 + 8;
  for (i = *(_QWORD **)(v17 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t))(*i + 32))(i, v9);
LABEL_26:
  if (__s2 != v25)
    free(__s2);
  return v9;
}

unint64_t sub_1C5D42B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  void *__s2;
  uint64_t v20;
  _BYTE v21[128];
  void *__s1;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  __s2 = v21;
  v20 = 0x2000000000;
  v4 = sub_1C636D7B0((llvm *)0xAE, 0);
  sub_1C5D3E710(&__s2, 10, v4, 1, 0, 0);
  v5 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v20 + 1, 4);
    v5 = v20;
  }
  *((_DWORD *)__s2 + v5) = a2;
  v6 = (v20 + 1);
  LODWORD(v20) = v6;
  if (v6 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v6 + 1, 4);
    LODWORD(v6) = v20;
  }
  *((_DWORD *)__s2 + v6) = HIDWORD(a2);
  LODWORD(v20) = v20 + 1;
  v7 = *(_QWORD *)(a1 + 328)
     + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v20));
  v8 = *(_QWORD *)v7;
  __s1 = v24;
  v23 = 0x2000000000;
  if (v8)
    v9 = (v8 & 1) == 0;
  else
    v9 = 0;
  if (v9)
  {
    while (1)
    {
      sub_1C636F81C(v8, (unsigned int *)&__s1);
      if ((_DWORD)v20 == (_DWORD)v23)
      {
        v10 = __s1;
        if (!memcmp(__s1, __s2, 4 * v20))
          break;
      }
      LODWORD(v23) = 0;
      v8 = *(_QWORD *)v8;
      if (v8)
        v11 = (v8 & 1) == 0;
      else
        v11 = 0;
      if (!v11)
      {
        v8 = 0;
        v10 = __s1;
        goto LABEL_18;
      }
    }
    v7 = 0;
LABEL_18:
    if (v10 == v24)
    {
      if (v8)
        goto LABEL_28;
    }
    else
    {
      free(v10);
      if (v8)
        goto LABEL_28;
    }
  }
  v8 = *(_QWORD *)(a1 + 224);
  if (v8)
    *(_QWORD *)(a1 + 224) = *(_QWORD *)v8;
  else
    v8 = sub_1C484358C(a1 + 232, 104, 3);
  sub_1C6371014(v8, a2);
  v12 = *(_DWORD *)(a1 + 340) + 1;
  v13 = *(_DWORD *)(a1 + 336);
  if (v12 > 2 * v13)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v13, (uint64_t)off_1E8198CA0);
    __s1 = v24;
    v23 = 0x2000000000;
    v7 = *(_QWORD *)(a1 + 328)
       + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v8, (unsigned int *)&__s1));
    if (__s1 != v24)
      free(__s1);
    v12 = *(_DWORD *)(a1 + 340) + 1;
  }
  v14 = *(_QWORD *)v7;
  if (!*(_QWORD *)v7)
    v14 = v7 | 1;
  *(_QWORD *)v8 = v14;
  *(_QWORD *)v7 = v8;
  v16 = *(_QWORD *)(a1 + 208);
  v15 = a1 + 208;
  *(_DWORD *)(v15 + 132) = v12;
  *(_QWORD *)(v8 + 8) = v16;
  *(_QWORD *)(v8 + 16) = v15;
  *(_QWORD *)(v16 + 8) = v8 + 8;
  *(_QWORD *)v15 = v8 + 8;
  for (i = *(_QWORD **)(v15 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, unint64_t))(*i + 32))(i, v8);
LABEL_28:
  if (__s2 != v21)
    free(__s2);
  return v8;
}

unint64_t sub_1C5D42EA0(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *i;
  uint64_t v26;
  int v27;
  void *__s2;
  uint64_t v29;
  _BYTE v30[128];
  void *__s1;
  uint64_t v32;
  _QWORD v33[17];

  v33[16] = *MEMORY[0x1E0C80C00];
  __s2 = v30;
  v29 = 0x2000000000;
  v26 = a4;
  v27 = a5;
  v10 = sub_1C636D7B0((llvm *)1, 0);
  sub_1C5D3E710(&__s2, a2, v10, 1, &v26, 1);
  v11 = v29;
  if (v29 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v30, v29 + 1, 4);
    v11 = v29;
  }
  *((_DWORD *)__s2 + v11) = a6;
  v12 = (v29 + 1);
  LODWORD(v29) = v12;
  if (v12 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v30, v12 + 1, 4);
    LODWORD(v12) = v29;
  }
  *((_DWORD *)__s2 + v12) = HIDWORD(a6);
  LODWORD(v29) = v29 + 1;
  v13 = *(_QWORD *)(a1 + 328)
      + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v29));
  v14 = *(_QWORD *)v13;
  __s1 = v33;
  v32 = 0x2000000000;
  if (v14)
    v15 = (v14 & 1) == 0;
  else
    v15 = 0;
  if (v15)
  {
    while (1)
    {
      sub_1C636F81C(v14, (unsigned int *)&__s1);
      if ((_DWORD)v29 == (_DWORD)v32)
      {
        v16 = __s1;
        if (!memcmp(__s1, __s2, 4 * v29))
          break;
      }
      LODWORD(v32) = 0;
      v14 = *(_QWORD *)v14;
      if (v14)
        v17 = (v14 & 1) == 0;
      else
        v17 = 0;
      if (!v17)
      {
        v14 = 0;
        v16 = __s1;
        goto LABEL_18;
      }
    }
    v13 = 0;
LABEL_18:
    if (v16 == v33)
    {
      if (v14)
        goto LABEL_28;
    }
    else
    {
      free(v16);
      if (v14)
        goto LABEL_28;
    }
  }
  v18 = *(_DWORD *)(a3 + 8);
  v14 = *(_QWORD *)(a1 + 224);
  if (v14)
    *(_QWORD *)(a1 + 224) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C(a1 + 232, 104, 3);
  sub_1C6371080(v14, a2, v18, *(unsigned __int8 **)a3, a6);
  sub_1C5D42768(a1, v14, (uint64_t)&v26, 1);
  v19 = *(_DWORD *)(a1 + 340) + 1;
  v20 = *(_DWORD *)(a1 + 336);
  if (v19 > 2 * v20)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v20, (uint64_t)off_1E8198CA0);
    __s1 = v33;
    v32 = 0x2000000000;
    v13 = *(_QWORD *)(a1 + 328)
        + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v14, (unsigned int *)&__s1));
    if (__s1 != v33)
      free(__s1);
    v19 = *(_DWORD *)(a1 + 340) + 1;
  }
  v21 = *(_QWORD *)v13;
  if (!*(_QWORD *)v13)
    v21 = v13 | 1;
  *(_QWORD *)v14 = v21;
  *(_QWORD *)v13 = v14;
  v23 = *(_QWORD *)(a1 + 208);
  v22 = a1 + 208;
  *(_DWORD *)(v22 + 132) = v19;
  *(_QWORD *)(v14 + 8) = v23;
  *(_QWORD *)(v14 + 16) = v22;
  *(_QWORD *)(v23 + 8) = v14 + 8;
  *(_QWORD *)v22 = v14 + 8;
  for (i = *(_QWORD **)(v22 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, unint64_t))(*i + 32))(i, v14);
LABEL_28:
  if (__s2 != v30)
    free(__s2);
  return v14;
}

uint64_t sub_1C5D431E4(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *i;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  void *__s2;
  uint64_t v35;
  _BYTE v36[128];
  void *__s1;
  uint64_t v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x1E0C80C00];
  v33[0] = a3;
  v33[1] = a4;
  v31 = a5;
  v32 = a2;
  if (a6)
    v11 = 43;
  else
    v11 = 19;
  v29 = v11;
  v30 = a7;
  __s2 = v36;
  v35 = 0x2000000000;
  v12 = sub_1C636D7B0(a3, a4);
  sub_1C5D3E710(&__s2, v11, v12, 1, 0, 0);
  v13 = v35;
  if (v35 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v36, v35 + 1, 4);
    v13 = v35;
  }
  *((_DWORD *)__s2 + v13) = a2;
  v14 = (v35 + 1);
  LODWORD(v35) = v14;
  if (v14 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v36, v14 + 1, 4);
    LODWORD(v14) = v35;
  }
  *((_DWORD *)__s2 + v14) = HIDWORD(a2);
  v15 = (v35 + 1);
  LODWORD(v35) = v15;
  if (v15 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v36, v15 + 1, 4);
    LODWORD(v15) = v35;
  }
  *((_DWORD *)__s2 + v15) = a5;
  v16 = (v35 + 1);
  LODWORD(v35) = v16;
  if (v16 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v36, v16 + 1, 4);
    LODWORD(v16) = v35;
  }
  *((_DWORD *)__s2 + v16) = HIDWORD(a5);
  v17 = (v35 + 1);
  LODWORD(v35) = v17;
  if (v17 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v36, v17 + 1, 4);
    LODWORD(v17) = v35;
  }
  *((_DWORD *)__s2 + v17) = a7;
  LODWORD(v35) = v35 + 1;
  v18 = *(_QWORD *)(a1 + 328)
      + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v35));
  v19 = *(_QWORD *)v18;
  __s1 = v39;
  v38 = 0x2000000000;
  if (v19 && (v19 & 1) == 0)
  {
    while (1)
    {
      sub_1C636F81C(v19, (unsigned int *)&__s1);
      if ((_DWORD)v35 == (_DWORD)v38)
      {
        v20 = __s1;
        if (!memcmp(__s1, __s2, 4 * v35))
          break;
      }
      LODWORD(v38) = 0;
      v19 = *(_QWORD *)v19;
      if (v19)
        v21 = (v19 & 1) == 0;
      else
        v21 = 0;
      if (!v21)
      {
        v19 = 0;
        v20 = __s1;
        goto LABEL_24;
      }
    }
    v18 = 0;
LABEL_24:
    if (v20 == v39)
    {
      if (v19)
        goto LABEL_31;
    }
    else
    {
      free(v20);
      if (v19)
        goto LABEL_31;
    }
  }
  v19 = sub_1C6367D30(a1, &v29, (uint64_t)v33, &v32, &v31, &v30);
  v22 = *(_DWORD *)(a1 + 340) + 1;
  v23 = *(_DWORD *)(a1 + 336);
  if (v22 > 2 * v23)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v23, (uint64_t)off_1E8198CA0);
    __s1 = v39;
    v38 = 0x2000000000;
    v18 = *(_QWORD *)(a1 + 328)
        + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v19, (unsigned int *)&__s1));
    if (__s1 != v39)
      free(__s1);
    v22 = *(_DWORD *)(a1 + 340) + 1;
  }
  v24 = *(_QWORD *)v18;
  if (!*(_QWORD *)v18)
    v24 = v18 | 1;
  *(_QWORD *)v19 = v24;
  *(_QWORD *)v18 = v19;
  v26 = *(_QWORD *)(a1 + 208);
  v25 = a1 + 208;
  *(_DWORD *)(v25 + 132) = v22;
  *(_QWORD *)(v19 + 8) = v26;
  *(_QWORD *)(v19 + 16) = v25;
  *(_QWORD *)(v26 + 8) = v19 + 8;
  *(_QWORD *)v25 = v19 + 8;
  for (i = *(_QWORD **)(v25 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, uint64_t))(*i + 32))(i, v19);
LABEL_31:
  if (__s2 != v36)
    free(__s2);
  return v19;
}

unint64_t sub_1C5D435A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  void *__s2;
  uint64_t v20;
  _BYTE v21[128];
  void *__s1;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  __s2 = v21;
  v20 = 0x2000000000;
  v4 = sub_1C636D7B0((llvm *)1, 0);
  sub_1C5D3E710(&__s2, 277, v4, 1, 0, 0);
  v5 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v20 + 1, 4);
    v5 = v20;
  }
  *((_DWORD *)__s2 + v5) = a2;
  v6 = (v20 + 1);
  LODWORD(v20) = v6;
  if (v6 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v6 + 1, 4);
    LODWORD(v6) = v20;
  }
  *((_DWORD *)__s2 + v6) = HIDWORD(a2);
  LODWORD(v20) = v20 + 1;
  v7 = *(_QWORD *)(a1 + 328)
     + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v20));
  v8 = *(_QWORD *)v7;
  __s1 = v24;
  v23 = 0x2000000000;
  if (v8)
    v9 = (v8 & 1) == 0;
  else
    v9 = 0;
  if (v9)
  {
    while (1)
    {
      sub_1C636F81C(v8, (unsigned int *)&__s1);
      if ((_DWORD)v20 == (_DWORD)v23)
      {
        v10 = __s1;
        if (!memcmp(__s1, __s2, 4 * v20))
          break;
      }
      LODWORD(v23) = 0;
      v8 = *(_QWORD *)v8;
      if (v8)
        v11 = (v8 & 1) == 0;
      else
        v11 = 0;
      if (!v11)
      {
        v8 = 0;
        v10 = __s1;
        goto LABEL_18;
      }
    }
    v7 = 0;
LABEL_18:
    if (v10 == v24)
    {
      if (v8)
        goto LABEL_28;
    }
    else
    {
      free(v10);
      if (v8)
        goto LABEL_28;
    }
  }
  v8 = *(_QWORD *)(a1 + 224);
  if (v8)
    *(_QWORD *)(a1 + 224) = *(_QWORD *)v8;
  else
    v8 = sub_1C484358C(a1 + 232, 104, 3);
  sub_1C637119C(v8, a2);
  v12 = *(_DWORD *)(a1 + 340) + 1;
  v13 = *(_DWORD *)(a1 + 336);
  if (v12 > 2 * v13)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v13, (uint64_t)off_1E8198CA0);
    __s1 = v24;
    v23 = 0x2000000000;
    v7 = *(_QWORD *)(a1 + 328)
       + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v8, (unsigned int *)&__s1));
    if (__s1 != v24)
      free(__s1);
    v12 = *(_DWORD *)(a1 + 340) + 1;
  }
  v14 = *(_QWORD *)v7;
  if (!*(_QWORD *)v7)
    v14 = v7 | 1;
  *(_QWORD *)v8 = v14;
  *(_QWORD *)v7 = v8;
  v16 = *(_QWORD *)(a1 + 208);
  v15 = a1 + 208;
  *(_DWORD *)(v15 + 132) = v12;
  *(_QWORD *)(v8 + 8) = v16;
  *(_QWORD *)(v8 + 16) = v15;
  *(_QWORD *)(v16 + 8) = v8 + 8;
  *(_QWORD *)v15 = v8 + 8;
  for (i = *(_QWORD **)(v15 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, unint64_t))(*i + 32))(i, v8);
LABEL_28:
  if (__s2 != v21)
    free(__s2);
  return v8;
}

unint64_t sub_1C5D438A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *i;
  void *__s2;
  uint64_t v20;
  _BYTE v21[128];
  void *__s1;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  __s2 = v21;
  v20 = 0x2000000000;
  v4 = sub_1C636D7B0((llvm *)1, 0);
  sub_1C5D3E710(&__s2, 278, v4, 1, 0, 0);
  v5 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v20 + 1, 4);
    v5 = v20;
  }
  *((_DWORD *)__s2 + v5) = a2;
  v6 = (v20 + 1);
  LODWORD(v20) = v6;
  if (v6 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v21, v6 + 1, 4);
    LODWORD(v6) = v20;
  }
  *((_DWORD *)__s2 + v6) = HIDWORD(a2);
  LODWORD(v20) = v20 + 1;
  v7 = *(_QWORD *)(a1 + 328)
     + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v20));
  v8 = *(_QWORD *)v7;
  __s1 = v24;
  v23 = 0x2000000000;
  if (v8)
    v9 = (v8 & 1) == 0;
  else
    v9 = 0;
  if (v9)
  {
    while (1)
    {
      sub_1C636F81C(v8, (unsigned int *)&__s1);
      if ((_DWORD)v20 == (_DWORD)v23)
      {
        v10 = __s1;
        if (!memcmp(__s1, __s2, 4 * v20))
          break;
      }
      LODWORD(v23) = 0;
      v8 = *(_QWORD *)v8;
      if (v8)
        v11 = (v8 & 1) == 0;
      else
        v11 = 0;
      if (!v11)
      {
        v8 = 0;
        v10 = __s1;
        goto LABEL_18;
      }
    }
    v7 = 0;
LABEL_18:
    if (v10 == v24)
    {
      if (v8)
        goto LABEL_28;
    }
    else
    {
      free(v10);
      if (v8)
        goto LABEL_28;
    }
  }
  v8 = *(_QWORD *)(a1 + 224);
  if (v8)
    *(_QWORD *)(a1 + 224) = *(_QWORD *)v8;
  else
    v8 = sub_1C484358C(a1 + 232, 104, 3);
  sub_1C6371208(v8, a2);
  v12 = *(_DWORD *)(a1 + 340) + 1;
  v13 = *(_DWORD *)(a1 + 336);
  if (v12 > 2 * v13)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v13, (uint64_t)off_1E8198CA0);
    __s1 = v24;
    v23 = 0x2000000000;
    v7 = *(_QWORD *)(a1 + 328)
       + 8 * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, v8, (unsigned int *)&__s1));
    if (__s1 != v24)
      free(__s1);
    v12 = *(_DWORD *)(a1 + 340) + 1;
  }
  v14 = *(_QWORD *)v7;
  if (!*(_QWORD *)v7)
    v14 = v7 | 1;
  *(_QWORD *)v8 = v14;
  *(_QWORD *)v7 = v8;
  v16 = *(_QWORD *)(a1 + 208);
  v15 = a1 + 208;
  *(_DWORD *)(v15 + 132) = v12;
  *(_QWORD *)(v8 + 8) = v16;
  *(_QWORD *)(v8 + 16) = v15;
  *(_QWORD *)(v16 + 8) = v8 + 8;
  *(_QWORD *)v15 = v8 + 8;
  for (i = *(_QWORD **)(v15 + 448); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, unint64_t))(*i + 32))(i, v8);
LABEL_28:
  if (__s2 != v21)
    free(__s2);
  return v8;
}

uint64_t sub_1C5D43BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t ShiftAmountTy;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;

  v6 = a4;
  v8 = (unsigned __int8 *)(*(_QWORD *)(a4 + 40) + 16 * a5);
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  ShiftAmountTy = llvm::TargetLoweringBase::getShiftAmountTy(*(uint64_t **)(a1 + 24), a2, a3, *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 1);
  v13 = v11;
  if (v9 == ShiftAmountTy)
  {
    if (v9)
      v14 = 1;
    else
      v14 = v10 == v11;
    if (v14)
      return v6;
  }
  else if (v9)
  {
    if ((v9 - 15) < 0x9C)
      return v6;
    goto LABEL_13;
  }
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
    return v6;
LABEL_13:
  v16 = *(unsigned __int8 **)(v6 + 64);
  v17 = v16;
  if (v16)
    llvm::MetadataTracking::track((uint64_t)&v17, v16, 2);
  v18 = *(_DWORD *)(v6 + 60);
  v6 = sub_1C6366544(a1, v6, a5, (uint64_t)&v17, ShiftAmountTy, v13);
  if (v17)
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
  return v6;
}

_QWORD *sub_1C5D43CC4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  llvm *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  llvm *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  char v70;
  _QWORD *v71;
  int v72;
  _QWORD *v73;
  const char *v75;
  llvm *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unsigned int v86;
  char v87;
  __int128 v88;
  unsigned __int8 *v89;
  int v90;
  _QWORD v91[2];
  unsigned int v92;
  char v93;

  v4 = *(unsigned __int8 **)(a2 + 64);
  v89 = v4;
  if (v4)
    llvm::MetadataTracking::track((uint64_t)&v89, v4, 2);
  v90 = *(_DWORD *)(a2 + 60);
  v5 = *(unsigned __int8 **)(a1 + 24);
  v6 = *(uint64_t **)(a2 + 32);
  v7 = *(_QWORD *)(v6[10] + 80);
  v88 = *(_OWORD *)*(_QWORD *)(a2 + 40);
  v9 = *v6;
  v8 = v6[1];
  v10 = v6[5];
  v11 = v6[6];
  v12 = *(_QWORD *)(v6[15] + 80);
  v13 = (unint64_t *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (unint64_t *)*v13;
  v14 = *v13;
  v15 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, 0);
  v16 = 0;
  v78 = v7 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)&v85 = v7 & 0xFFFFFFFFFFFFFFFBLL;
  *((_QWORD *)&v85 + 1) = 0;
  v87 = 0;
  if (v7)
  {
    v17 = *(_DWORD *)(*(_QWORD *)v7 + 8);
    if ((v17 & 0xFE) == 0x12)
      v17 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 16) + 8);
    v16 = v17 >> 8;
  }
  v86 = v16;
  v83 = 0u;
  v84 = 0u;
  v18 = sub_1C63681B0(a1, v15, 0, (uint64_t)&v89, v9, v8, v10, v11, &v85, 0, 0, 0, (uint64_t)&v83, 0);
  v20 = (uint64_t)v18;
  v21 = v19;
  v80 = v10;
  v79 = v7;
  v77 = (uint64_t)v18;
  if (v14 && (v22 = __clz(v14) ^ 0x3F, v22 > v5[68]))
  {
    v23 = v18[5] + 16 * v19;
    v24 = *(llvm **)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = 1 << v22;
    v27 = sub_1C6366AB4(a1, (1 << v22) - 1, (const llvm::APInt *)&v89, *(llvm **)v23, v25, 0, 0);
    v30 = *(_QWORD *)(a1 + 832);
    if (v30)
      LOWORD(v30) = *(_WORD *)(v30 + 8);
    v31 = sub_1C5D56C70(a1, 56, (const llvm::APInt *)&v89, v24, v25, v20, v21, v29, (uint64_t)v27, v28, v30);
    v32 = v21 & 0xFFFFFFFF00000000;
    v34 = v21 & 0xFFFFFFFF00000000 | v33;
    v35 = v31[5] + 16 * v33;
    v36 = *(llvm **)v35;
    v37 = *(_QWORD *)(v35 + 8);
    v38 = sub_1C6366AB4(a1, -v26, (const llvm::APInt *)&v89, *(llvm **)v35, v37, 0, 0);
    v41 = 0;
    v42 = *(_QWORD *)(a1 + 832);
    if (v42)
      v41 = *(_WORD *)(v42 + 8);
    v43 = sub_1C5D56C70(a1, 171, (const llvm::APInt *)&v89, v36, v37, (uint64_t)v31, v34, v40, (uint64_t)v38, v39, v41);
    v21 = v44 | v32;
  }
  else
  {
    v43 = v18;
  }
  v45 = v43[5] + 16 * v21;
  v46 = *(_QWORD *)(v45 + 8);
  v76 = *(llvm **)v45;
  v47 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v88, *(llvm::LLVMContext **)(a1 + 56));
  v49 = v48;
  sub_1C4768AD0(v47, v48);
  v51 = (unint64_t)(v50 + 7) >> 3;
  v53 = v52 == 1;
  llvm::DataLayout::getAlignment(v47, v49);
  v55 = (1 << v54) + v51 - 1;
  v56 = -(1 << v54);
  v57 = (const char *)(v55 & v56);
  if (v53)
  {
    v75 = (const char *)(v55 & v56);
    v57 = v75;
  }
  v58 = v43[5] + 16 * v21;
  v59 = sub_1C6366AB4(a1, (uint64_t)v57, (const llvm::APInt *)&v89, *(llvm **)v58, *(_QWORD *)(v58 + 8), 0, 0);
  v62 = *(_QWORD *)(a1 + 832);
  if (v62)
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  v63 = sub_1C5D56C70(a1, 56, (const llvm::APInt *)&v89, v76, v46, (uint64_t)v43, v21, v61, (uint64_t)v59, v60, v62);
  v65 = (uint64_t)v63;
  v66 = v64;
  v67 = v79;
  if (v79)
  {
    v68 = *(_DWORD *)(*(_QWORD *)v79 + 8);
    if ((v68 & 0xFE) == 0x12)
      v68 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v79 + 16) + 8);
    v67 = v68 >> 8;
  }
  v83 = 0u;
  v84 = 0u;
  v91[0] = v78;
  v91[1] = 0;
  v92 = v67;
  v93 = 0;
  v69 = (uint64_t *)(v63[5] + 16 * v64);
  sub_1C6365BD8(a1, *v69, v69[1]);
  v71 = sub_1C636B75C(a1, v77, 1, (uint64_t)&v89, v65, v66, v80, v11, (uint64_t)v91, v70, 0, 0, (uint64_t)&v83);
  v81 = 0;
  v82[0] = 0;
  *(_QWORD *)((char *)v82 + 5) = 0;
  v83 = 0u;
  v84 = 0u;
  v73 = sub_1C63681B0(a1, v88, *((uint64_t *)&v88 + 1), (uint64_t)&v89, (uint64_t)v71, v72, (uint64_t)v43, v21, (__int128 *)&v81, 0, 0, 0, (uint64_t)&v83, 0);
  if (v89)
    llvm::MetadataTracking::untrack((uint64_t)&v89, v89);
  return v73;
}

uint64_t sub_1C5D44120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned int v11;
  unsigned __int8 v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v14 = a2;
  v15 = a3;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272;
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v14, *(llvm::LLVMContext **)(a1 + 56));
  llvm::DataLayout::getAlignment(v4, v5);
  v7 = v6;
  if (!(_BYTE)v14 || !*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v14 + 96))
  {
    if ((_BYTE)v14)
    {
      if (v14 - 15 >= 0x9C)
        return v7;
    }
    else if ((*(_DWORD *)(v15 + 8) & 0xFE) != 0x12)
    {
      return v7;
    }
    if (*(unsigned __int8 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 16) + 112))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16))
                            + 12) < v6)
    {
      LOBYTE(v13[0]) = 0;
      v13[1] = 0;
      v12 = 0;
      v11 = 0;
      llvm::TargetLoweringBase::getVectorTypeBreakdown(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), v14, v15, v13, &v11, &v12);
      llvm::EVT::getTypeForEVT((llvm::EVT *)v13, *(llvm::LLVMContext **)(a1 + 56));
      llvm::DataLayout::getAlignment(v4, v8);
      if (v9 >= v7)
        return v7;
      else
        return v9;
    }
  }
  return v7;
}

uint64_t sub_1C5D44240(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unint64_t v10;
  int v11;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  llvm::EVT::getTypeForEVT((llvm::EVT *)v13, *(llvm::LLVMContext **)(a1 + 56));
  llvm::DataLayout::getAlignment(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272, v6);
  v8 = 63 - __clz(a4);
  if (v7 <= v8)
    v9 = v8;
  else
    v9 = v7;
  v10 = sub_1C47C1C70((unsigned __int8 *)v13);
  return sub_1C636847C(a1, v10, v11, v9);
}

uint64_t sub_1C5D442D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  _QWORD v21[2];
  _QWORD v22[2];

  v22[0] = a2;
  v22[1] = a3;
  v21[0] = a4;
  v21[1] = a5;
  v6 = sub_1C47C1C70((unsigned __int8 *)v22);
  v8 = v7;
  v9 = sub_1C47C1C70((unsigned __int8 *)v21);
  if (v6 <= v9)
  {
    v6 = v9;
    v8 = v10;
  }
  llvm::EVT::getTypeForEVT((llvm::EVT *)v22, *(llvm::LLVMContext **)(a1 + 56));
  v12 = v11;
  llvm::EVT::getTypeForEVT((llvm::EVT *)v21, *(llvm::LLVMContext **)(a1 + 56));
  v14 = v13;
  v15 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272;
  llvm::DataLayout::getAlignment(v15, v12);
  v17 = v16;
  llvm::DataLayout::getAlignment(v15, v14);
  if (v17 <= v18)
    v19 = v18;
  else
    v19 = v17;
  return sub_1C636847C(a1, v6, v8, v19);
}

_QWORD *sub_1C5D443A8(_QWORD *a1, llvm *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned int a8, const llvm::APInt *a9)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int ICmpCondCode;
  char v28;
  char v29;
  const llvm::APInt *v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v34;
  llvm::detail::DoubleAPFloat *v35;
  void *v36;
  const llvm::detail::DoubleAPFloat *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *result;
  BOOL v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  BOOL v48;

  v13 = a3;
  v15 = (uint64_t)a1;
  v16 = (uint64_t *)(*(_QWORD *)(a4 + 40) + 16 * a5);
  v18 = *v16;
  v17 = v16[1];
  if ((int)a8 > 15)
  {
    if (a8 == 23)
    {
LABEL_68:
      v29 = 1;
LABEL_101:
      v30 = a9;
      v31 = (_BOOL8)a2;
      return (_QWORD *)sub_1C6366888((uint64_t)a1, v29, v30, v31, v13, v18, v17);
    }
    if (a8 == 16)
      return (_QWORD *)sub_1C6366AB4(a1, 0, a9, a2, a3, 0, 0);
  }
  else
  {
    if (!a8)
      return (_QWORD *)sub_1C6366AB4(a1, 0, a9, a2, a3, 0, 0);
    if (a8 == 15)
      goto LABEL_68;
  }
  if (*v16)
  {
    v19 = (v18 - 120) >= 0x20u && (v18 - 2) >= 6u;
    if (v19 && (v18 - 15) >= 0x3Cu)
      goto LABEL_26;
  }
  else
  {
    if ((*(_DWORD *)(v17 + 8) & 0xFE) == 0x12)
      v20 = *(unsigned __int8 *)(**(_QWORD **)(v17 + 16) + 8);
    else
      v20 = *(_DWORD *)(v17 + 8);
    if (v20 != 13)
      goto LABEL_26;
  }
  v21 = *(unsigned __int16 *)(a4 + 24);
  if ((v21 == 51 || *(_WORD *)(a6 + 24) == 51) && (a8 == 22 || a8 == 17 || v21 == 51 && *(_WORD *)(a6 + 24) == 51))
    return sub_1C61312D0(v15, a2, v13);
  if (a4 == a6 && a5 == (_DWORD)a7)
  {
    v29 = a8 & 1;
LABEL_100:
    a1 = (_QWORD *)v15;
    goto LABEL_101;
  }
LABEL_26:
  v22 = *(unsigned __int16 *)(a6 + 24);
  if (v22 != 11 && v22 != 35)
  {
    v23 = *(unsigned __int16 *)(a4 + 24);
    goto LABEL_32;
  }
  v23 = *(unsigned __int16 *)(a4 + 24);
  if (v23 != 35 && v23 != 11)
  {
LABEL_32:
    if (v23 == 36 || v23 == 12)
      v32 = a4;
    else
      v32 = 0;
    if (v22 == 12 || v22 == 36)
    {
      if (v32)
      {
        v34 = *(_QWORD *)(v32 + 80);
        v36 = *(void **)(v34 + 32);
        v35 = (llvm::detail::DoubleAPFloat *)(v34 + 32);
        v37 = (const llvm::detail::DoubleAPFloat *)(*(_QWORD *)(a6 + 80) + 32);
        if (v36 == &unk_1C866F1C0)
          v38 = llvm::detail::DoubleAPFloat::compare(v35, v37);
        else
          llvm::detail::IEEEFloat::compare(v35, v37);
        v39 = v38;
        v13 = a3;
        result = 0;
        switch(a8)
        {
          case 1u:
            goto LABEL_79;
          case 2u:
            goto LABEL_93;
          case 3u:
            goto LABEL_75;
          case 4u:
            goto LABEL_96;
          case 5u:
            goto LABEL_91;
          case 6u:
            goto LABEL_84;
          case 7u:
            v41 = v39 == 3;
            goto LABEL_87;
          case 8u:
            v48 = v39 == 3;
            goto LABEL_97;
          case 9u:
            v39 &= ~2u;
            goto LABEL_79;
          case 0xAu:
            v39 &= ~1u;
            goto LABEL_93;
          case 0xBu:
            v41 = v39 == 0;
            goto LABEL_87;
          case 0xCu:
            v48 = v39 == 3 || v39 == 0;
            goto LABEL_97;
          case 0xDu:
            v41 = v39 == 2;
            goto LABEL_87;
          case 0xEu:
            v41 = v39 == 1;
LABEL_87:
            v29 = !v41;
            goto LABEL_100;
          case 0xFu:
          case 0x10u:
            return result;
          case 0x11u:
            if (v39 == 3)
              return sub_1C61312D0(v15, a2, v13);
LABEL_79:
            v48 = v39 == 1;
            goto LABEL_97;
          case 0x12u:
            if (v39 == 3)
              return sub_1C61312D0(v15, a2, v13);
LABEL_93:
            v48 = v39 == 2;
            goto LABEL_97;
          case 0x13u:
            if (v39 == 3)
              return sub_1C61312D0(v15, a2, v13);
LABEL_75:
            --v39;
            goto LABEL_91;
          case 0x14u:
            if (v39 == 3)
              return sub_1C61312D0(v15, a2, v13);
LABEL_96:
            v48 = v39 == 0;
            goto LABEL_97;
          case 0x15u:
            if (v39 == 3)
              return sub_1C61312D0(v15, a2, v13);
LABEL_91:
            v29 = v39 < 2;
            goto LABEL_100;
          case 0x16u:
            if (v39 == 3)
              return sub_1C61312D0(v15, a2, v13);
LABEL_84:
            v48 = (v39 & 0xFFFFFFFD) == 0;
LABEL_97:
            v29 = v48;
            goto LABEL_100;
          default:
            return 0;
        }
      }
      v44 = *(_QWORD *)(a6 + 80);
      if (*(_UNKNOWN **)(v44 + 32) == &unk_1C866F1C0)
        v45 = *(_QWORD *)(v44 + 40);
      else
        v45 = v44 + 24;
      if ((*(_BYTE *)(v45 + 28) & 7) == 1)
        goto LABEL_66;
    }
    else if ((_BYTE)v18 && v22 != 51 && v32)
    {
      v42 = (a8 >> 1) & 2 | a8 & 0xFFFFFFF9 | (4 * ((a8 >> 1) & 1));
      if (((*(_DWORD *)(a1[3] + 92 * v42 + 4 * (v18 >> 3) + 171588) >> (4 * (v18 & 7))) & 0xF) == 0)
      {
        sub_1C6367818(a1, v42);
        return (_QWORD *)sub_1C5D58E08(v15, 193, a9, a2, a3, a6, a7);
      }
      return 0;
    }
    if ((_BYTE)v18)
    {
      if ((v18 + 104) >= 0x13u
        && (v18 - 8) >= 7u
        && (v18 - 75) >= 0x2Du)
      {
        return 0;
      }
    }
    else
    {
      if ((*(_DWORD *)(v17 + 8) & 0xFE) == 0x12)
        v46 = *(unsigned __int8 *)(**(_QWORD **)(v17 + 16) + 8);
      else
        v46 = *(_DWORD *)(v17 + 8);
      if (v46 > 6)
        return 0;
    }
    if (v22 != 51 && v23 != 51)
      return 0;
LABEL_66:
    v47 = (a8 >> 3) & 3;
    if (v47)
    {
      if (v47 == 1)
        goto LABEL_68;
      return sub_1C61312D0(v15, a2, v13);
    }
    return (_QWORD *)sub_1C6366AB4(a1, 0, a9, a2, a3, 0, 0);
  }
  v24 = *(_QWORD *)(a6 + 80) + 24;
  v25 = *(_QWORD *)(a4 + 80) + 24;
  ICmpCondCode = llvm::getICmpCondCode(a8);
  llvm::ICmpInst::compare(v25, v24, ICmpCondCode);
  v29 = v28;
  a1 = (_QWORD *)v15;
  v30 = a9;
  v31 = (_BOOL8)a2;
  v13 = a3;
  return (_QWORD *)sub_1C6366888((uint64_t)a1, v29, v30, v31, v13, v18, v17);
}

_QWORD *sub_1C5D44870(uint64_t a1, uint64_t a2, const llvm::APInt *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v6;
  _QWORD *v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  char *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  llvm *v30;
  uint64_t v31;
  llvm::ValueHandleBase *v32;
  size_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  llvm *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  char *v49;
  unsigned int v50;

  v6 = a3;
  v7 = (_QWORD *)a2;
  v9 = *(unsigned __int16 *)(a2 + 24);
  if (v9 == 11)
  {
    v19 = *(_QWORD *)(a2 + 80);
    v20 = *(unsigned int *)(v19 + 32);
    if (v20 >= 0x41)
    {
      v23 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
      v24 = (char *)operator new[]();
      v25 = *(const void **)(v19 + 24);
      memcpy(v24, v25, v23);
      v26 = 0;
      v27 = *(char **)a4;
      do
      {
        *(_QWORD *)&v24[v26] &= *(_QWORD *)&v27[v26];
        v26 += 8;
      }
      while (v23 != v26);
      v50 = v20;
      v49 = v24;
      if (!memcmp(v24, v25, v23))
      {
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
        return 0;
      }
    }
    else
    {
      v21 = *(char **)(v19 + 24);
      v22 = (char *)(*(_QWORD *)a4 & (unint64_t)v21);
      v50 = *(_DWORD *)(v19 + 32);
      v49 = v22;
      if (v22 == v21)
        return 0;
    }
    v28 = (unsigned __int8 *)v7[8];
    v47 = v28;
    if (v28)
      llvm::MetadataTracking::track((uint64_t)&v47, v28, 2);
    v48 = *((_DWORD *)v7 + 15);
    v29 = v7[5] + 16 * v6;
    v30 = *(llvm **)v29;
    v31 = *(_QWORD *)(v29 + 8);
    v32 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v49, a3);
    v7 = sub_1C5D3FAF8(a1, (uint64_t)v32, (const llvm::APInt *)&v47, v30, v31, 0, 0);
    if (v47)
      llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
    if (v50 > 0x40 && v49)
      MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
    return v7;
  }
  if (v9 != 177)
    return sub_1C5D86770(*(unsigned int **)(a1 + 24), a2, (_BOOL8)a3, a4, a5, a1, 0);
  v10 = *(_QWORD *)(a2 + 48);
  if (!v10 || *(_QWORD *)(v10 + 32))
    return 0;
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
  v12 = *(unsigned __int16 *)(v11 + 24);
  if (v12 != 35 && v12 != 11)
    return 0;
  v14 = *(_QWORD *)(v11 + 80);
  v15 = (_QWORD *)(v14 + 24);
  if (*(_DWORD *)(v14 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  v16 = *(_DWORD *)v15;
  v17 = a4[2];
  if (v17 <= v16)
    return 0;
  v50 = a4[2];
  if (v17 > 0x40)
  {
    v34 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
    v18 = (char *)operator new[]();
    memcpy(v18, *(const void **)a4, v34);
  }
  else
  {
    v18 = *(char **)a4;
  }
  v49 = v18;
  sub_1C4888094((uint64_t)&v49, v16);
  v37 = sub_1C6368540(a1, *(_QWORD *)v7[4], *(_QWORD *)(v7[4] + 8), &v49);
  if (v37)
  {
    v38 = v35;
    v39 = (unsigned __int8 *)v7[8];
    v47 = v39;
    if (v39)
      llvm::MetadataTracking::track((uint64_t)&v47, v39, 2);
    v48 = *((_DWORD *)v7 + 15);
    v40 = v7[4];
    v41 = v7[5] + 16 * v6;
    v42 = *(llvm **)v41;
    v43 = *(_QWORD *)(v41 + 8);
    v44 = *(_QWORD *)(v40 + 40);
    v45 = *(_QWORD *)(v40 + 48);
    v46 = *(_QWORD *)(a1 + 832);
    if (v46)
      LOWORD(v46) = *(_WORD *)(v46 + 8);
    v7 = sub_1C5D56C70(a1, 177, (const llvm::APInt *)&v47, v42, v43, v37, v38, v36, v44, v45, v46);
    if (v47)
      llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
  }
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  if (!v37)
    return 0;
  return v7;
}

void sub_1C5D44BD8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BOOL8 a3@<X2>, llvm::APInt *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v10;
  const char *v11;
  BOOL v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  _BOOL4 v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::detail::DoubleAPFloat *v26;
  void *v27;
  unsigned int v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  unsigned int v39;
  unsigned int ExtendedSizeInBits;
  const char *v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t *v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  size_t v71;
  void *v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  _QWORD *v101;
  unsigned int v102;
  unsigned int v103;
  _QWORD *v104;
  _QWORD *v105;
  const char *v106;
  llvm::Type *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  int v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t *v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  llvm::APInt *v122;
  const char *v123;
  llvm::Type *v124;
  unsigned int v125;
  int8x8_t *v126;
  unsigned int v127;
  unint64_t *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  int v133;
  int64_t v134;
  BOOL v135;
  unint64_t v136;
  int v137;
  size_t v138;
  int8x8_t *v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  int v147;
  int64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  const llvm::KnownBits *v155;
  uint64_t v156;
  llvm::APInt *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t *v164;
  unsigned int v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  llvm::APInt *v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unint64_t v185;
  unsigned int v186;
  llvm::APInt *v187;
  unint64_t v188;
  const llvm::KnownBits *v189;
  int v190;
  int64_t v191;
  unint64_t v192;
  unsigned int v193;
  uint8x8_t v194;
  __int32 v195;
  unsigned int v196;
  void *v197;
  unsigned int v198;
  void *v199;
  unsigned int v200;
  unsigned int v201;
  void *v202;
  unsigned int v203;
  void *v204;
  unsigned int v205;
  llvm::Type **v206;
  uint64_t v207;
  llvm::KnownBits *v208;
  const void **v209;
  llvm::Type *v210;
  const char *v211;
  unint64_t PrimitiveSizeInBits;
  llvm::APFloatBase *SplatValue;
  unsigned int v214;
  unint64_t v215;
  unsigned int v216;
  unint64_t v217;
  unint64_t *v218;
  llvm::Type *v219;
  llvm::APInt *v220;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v222;
  int v223;
  _QWORD *v224;
  uint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  size_t v232;
  _QWORD *v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  uint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  size_t v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  _BOOL4 v250;
  size_t v251;
  size_t v252;
  void *v253;
  void *v254;
  unsigned int v255;
  int8x8_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  _QWORD **v261;
  unsigned int v262;
  _QWORD *v263;
  unint64_t v264;
  int8x8_t *v265;
  int8x8_t v266;
  uint8x8_t v267;
  uint64_t v268;
  llvm::APInt *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  size_t *v273;
  size_t v274;
  size_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unint64_t v279;
  unsigned int v280;
  unint64_t v281;
  unint64_t *v282;
  int v283;
  int64_t v284;
  unint64_t v285;
  unsigned int v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  void *v294;
  unsigned int v295;
  unsigned int v296;
  const char *v297;
  unsigned int v298;
  void *v299;
  void *v300;
  int v301;
  uint64_t v302;
  unint64_t **v303;
  unsigned int v304;
  unint64_t v305;
  unsigned int v306;
  unsigned int v307;
  _BOOL4 v308;
  unsigned int *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int *v313;
  uint64_t *v314;
  int v315;
  int v316;
  int64_t v317;
  unint64_t v318;
  unsigned int v319;
  uint64_t v320;
  void *v321;
  uint64_t v322;
  void *v323;
  int v324;
  int64_t v325;
  uint64_t v326;
  unint64_t v327;
  unsigned int v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  void *v332;
  unsigned int v333;
  unint64_t v334;
  unsigned int v335;
  unint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  int8x8_t v341;
  llvm::APInt *v342;
  unint64_t *v343;
  unsigned int v344;
  _QWORD *v345;
  uint64_t *v346;
  unint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  int8x8_t *v350;
  unint64_t v351;
  uint64_t v352;
  const char *v353;
  unint64_t v354;
  int v355;
  unint64_t v356;
  void *v357;
  unsigned int v358;
  uint64_t v359;
  BOOL v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  void *v364;
  unsigned int v365;
  void *v366;
  uint64_t v367;
  _QWORD *v368;
  int v369;
  const char *v370;
  unsigned int v371;
  int v372;
  size_t *v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unint64_t v384;
  unint64_t *v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  int64_t v394;
  unint64_t v395;
  unsigned int v396;
  uint64_t v397;
  void *v398;
  unsigned int v399;
  void *v400;
  BOOL v401;
  int v402;
  int v403;
  int v404;
  int64_t v405;
  unint64_t v406;
  unsigned int v407;
  int v408;
  int64_t v409;
  unint64_t v410;
  unsigned int v411;
  size_t v412;
  int8x8_t *v413;
  unint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t *v417;
  unint64_t v418;
  _QWORD *v419;
  uint64_t v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  void *v424;
  unsigned int v425;
  void *v426;
  uint64_t v427;
  unsigned int v428;
  unsigned int v429;
  void *v430;
  unsigned int v431;
  void *v432;
  unsigned int v433;
  unsigned int v434;
  int8x8_t *v435;
  unsigned int v436;
  unint64_t *v437;
  unsigned int v438;
  void *v439;
  unsigned int v440;
  unint64_t v441;
  unsigned int v442;
  unsigned int v443;
  uint64_t v444;
  void *v445;
  uint64_t v446;
  void *v447;
  unsigned int v448;
  unint64_t v449;
  unsigned int v450;
  unint64_t v451;
  unint64_t *v452;
  int v453;
  int64_t v454;
  unint64_t v455;
  unsigned int v456;
  unsigned int v457;
  unint64_t v458;
  unsigned int v459;
  _QWORD *v460;
  uint64_t *v461;
  unint64_t v462;
  uint64_t v463;
  size_t v464;
  int v465;
  int64_t v466;
  unint64_t v467;
  unsigned int v468;
  size_t v469;
  uint64_t *v470;
  unint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  llvm::APInt *v479;
  uint64_t v480;
  unsigned int v481;
  unint64_t v482;
  unint64_t *v483;
  unsigned int v484;
  unint64_t v485;
  unsigned int v486;
  llvm::APInt *v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  unint64_t v491;
  uint64_t v492;
  void *v493;
  unsigned int v494;
  void *v495;
  int v496;
  int64_t v497;
  unint64_t v498;
  unsigned int v499;
  size_t v500;
  unint64_t v501;
  uint64_t *v502;
  _QWORD *v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t *v506;
  _QWORD *v507;
  uint64_t v508;
  int v509;
  int64_t v510;
  unint64_t v511;
  unsigned int v512;
  unint64_t v513;
  uint64_t v514;
  void *v515;
  unsigned int v516;
  void *v517;
  unsigned int v518;
  void *v519;
  llvm::detail::DoubleAPFloat *v520;
  void *v521;
  unsigned int v522;
  unint64_t v523;
  void *v524;
  unsigned int v525;
  void *v526;
  uint64_t v527;
  unsigned int v528;
  unsigned int v529;
  uint64_t v530;
  _QWORD *v531;
  unsigned int v532;
  unsigned int v533;
  unsigned int v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  size_t v540;
  _QWORD *v541;
  int8x8_t *v542;
  unint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  uint64_t *v546;
  unint64_t v547;
  uint64_t v548;
  size_t v549;
  size_t v550;
  size_t v551;
  size_t v552;
  size_t v553;
  size_t v554;
  size_t v555;
  size_t v556;
  int v557;
  int64_t v558;
  unint64_t v559;
  unsigned int v560;
  size_t v561;
  size_t v562;
  int v563;
  int64_t v564;
  unint64_t v565;
  unsigned int v566;
  int v567;
  int64_t v568;
  unint64_t v569;
  unsigned int v570;
  _QWORD *v571;
  uint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  int v575;
  int64_t v576;
  unint64_t v577;
  unsigned int v578;
  size_t v579;
  int8x8_t *v580;
  unint64_t v581;
  _QWORD *v582;
  uint64_t v583;
  int v584;
  int64_t v585;
  unint64_t v586;
  unsigned int v587;
  _QWORD *v588;
  int8x8_t *v589;
  unint64_t v590;
  uint64_t v591;
  _QWORD *v592;
  uint64_t *v593;
  unint64_t v594;
  uint64_t v595;
  size_t v596;
  int8x8_t *v597;
  unint64_t v598;
  _QWORD *v599;
  uint64_t v600;
  size_t v601;
  uint64_t *v602;
  unint64_t v603;
  _QWORD *v604;
  uint64_t v605;
  int v606;
  int64_t v607;
  unint64_t v608;
  unsigned int v609;
  int v610;
  int64_t v611;
  unint64_t v612;
  unsigned int v613;
  size_t v614;
  int8x8_t *v615;
  unint64_t v616;
  _QWORD *v617;
  uint64_t v618;
  size_t v619;
  uint64_t *v620;
  unint64_t v621;
  _QWORD *v622;
  uint64_t v623;
  size_t v624;
  int8x8_t *v625;
  unint64_t v626;
  _QWORD *v627;
  uint64_t v628;
  size_t v629;
  uint64_t *v630;
  unint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  size_t v634;
  int8x8_t *v635;
  unint64_t v636;
  _QWORD *v637;
  uint64_t v638;
  size_t v639;
  uint64_t *v640;
  unint64_t v641;
  _QWORD *v642;
  uint64_t v643;
  size_t v644;
  unint64_t v645;
  uint64_t *v646;
  _QWORD *v647;
  uint64_t v648;
  unint64_t v649;
  uint64_t *v650;
  _QWORD *v651;
  uint64_t v652;
  size_t v653;
  int8x8_t *v654;
  unint64_t v655;
  _QWORD *v656;
  uint64_t v657;
  int v658;
  int64_t v659;
  unint64_t v660;
  unsigned int v661;
  void *v662;
  uint64_t v663;
  unsigned int v664;
  size_t v665;
  size_t v666;
  uint64_t v667;
  size_t v668;
  unint64_t v669;
  size_t __n;
  int __na;
  unint64_t v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;
  void *v677;
  unint64_t v678;
  unint64_t v679;
  unsigned int v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t *v684;
  void *v685;
  unsigned int v686;
  void *v687;
  unsigned int v688;
  void *v689;
  unsigned int v690;
  void *v691;
  unsigned int v692;
  void *v693;
  unsigned int v694;
  void *v695;
  int v696;
  void *v697[2];
  unint64_t v698;
  unsigned int v699;
  void *v700;
  unsigned int v701;
  void *__src[2];
  unint64_t v703;
  unsigned int v704;
  int8x8_t *v705;
  unsigned int v706;
  unint64_t v707;
  unsigned int v708;
  unint64_t v709;
  unsigned int v710;
  unint64_t v711;
  unsigned int v712;
  uint64_t v713;
  _BOOL8 v714;
  _OWORD v715[2];

  v713 = a2;
  v714 = a3;
  v10 = sub_1C6329368((unsigned int *)&v713, a2, a3);
  v13 = v10;
  v710 = v10;
  v14 = &v711;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v709, 0, 0);
    v712 = v13;
    llvm::APInt::initSlowCase((llvm::APInt *)&v711, 0, 0);
  }
  else
  {
    v712 = v10;
    v709 = 0;
    v711 = 0;
  }
  v15 = v713;
  v16 = v714;
  v17 = (unsigned __int8 *)(*(_QWORD *)(v713 + 40) + 16 * v714);
  if (*v17)
  {
    if (*v17 - 120 < 0x33)
      goto LABEL_26;
  }
  else if (*(_BYTE *)(*((_QWORD *)v17 + 1) + 8) == 19)
  {
LABEL_26:
    *(_DWORD *)(a6 + 8) = v710;
    *(_QWORD *)a6 = v709;
    *(_DWORD *)(a6 + 24) = v712;
    *(_QWORD *)(a6 + 16) = v711;
    v710 = 0;
    v712 = 0;
    goto LABEL_49;
  }
  v18 = *(unsigned __int16 *)(v713 + 24);
  if (v18 > 0x22)
  {
    if (v18 == 36)
      goto LABEL_18;
    if (v18 != 35)
    {
LABEL_25:
      if (a5 >= 6)
        goto LABEL_26;
      v683 = a1;
      v706 = 1;
      v705 = 0;
      v708 = 1;
      v707 = 0;
      v33 = *((_DWORD *)a4 + 2);
      v679 = v33;
      if (v33 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(a4) == v33)
          goto LABEL_46;
      }
      else if (!*(_QWORD *)a4)
      {
        goto LABEL_46;
      }
      if (v18 <= 38)
      {
        switch(v18)
        {
          case 5:
            v34 = *(unsigned __int8 *)(v15 + 76);
            sub_1C4912E54(&v709, 0, v34);
            v35 = v712;
            v36 = v34 - v712;
            LODWORD(__src[1]) = v712;
            if (v712 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
              v35 = __src[1];
            }
            else
            {
              __src[0] = 0;
            }
            sub_1C4912E54(__src, v36 + v35, v35);
            if (v712 > 0x40)
            {
              v571 = (_QWORD *)v711;
              v572 = (uint64_t *)__src[0];
              v573 = ((unint64_t)v712 + 63) >> 6;
              do
              {
                v574 = *v572++;
                *v571++ &= v574;
                --v573;
              }
              while (v573);
            }
            else
            {
              v711 &= (unint64_t)__src[0];
            }
LABEL_39:
            v37 = __src[1];
LABEL_40:
            if (v37 < 0x41)
              goto LABEL_46;
            v38 = __src[0];
            if (!__src[0])
              goto LABEL_46;
            break;
          case 15:
LABEL_34:
            (*(void (**)(_QWORD, _QWORD, unint64_t *, _QWORD))(**(_QWORD **)(v683 + 24) + 1632))(*(_QWORD *)(v683 + 24), *(unsigned int *)(v15 + 76), &v709, *(_QWORD *)(v683 + 40));
            goto LABEL_46;
          case 4:
            *(_OWORD *)v697 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 40) + 80);
            if (LOBYTE(v697[0]))
              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v697);
            else
              ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v697);
            v42 = ExtendedSizeInBits;
            if ((_DWORD)v41 == 1)
            DWORD2(v715[0]) = v13;
            if (v13 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)v715, 0, 0);
            else
              *(_QWORD *)&v715[0] = 0;
            sub_1C4912E54(v715, 0, v42);
            sub_1C6368768(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), (a5 + 1));
            if (v710 >= 0x41 && v709)
              MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
            v709 = (unint64_t)__src[0];
            v710 = __src[1];
            LODWORD(__src[1]) = 0;
            if (v712 >= 0x41 && v711)
            {
              MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
              v711 = v703;
              v712 = v704;
              v704 = 0;
              if (LODWORD(__src[1]) >= 0x41 && __src[0])
                MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            }
            else
            {
              v711 = v703;
              v712 = v704;
            }
            v43 = DWORD2(v715[0]);
            v692 = DWORD2(v715[0]);
            if (DWORD2(v715[0]) > 0x40)
            {
              v46 = (((unint64_t)DWORD2(v715[0]) + 63) >> 3) & 0x3FFFFFF8;
              v691 = (void *)operator new[]();
              memcpy(v691, *(const void **)&v715[0], v46);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v691);
              v43 = v692;
              v45 = (unint64_t)v691;
            }
            else
            {
              v44 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v715[0]);
              if (!DWORD2(v715[0]))
                v44 = 0;
              v45 = v44 & ~*(_QWORD *)&v715[0];
            }
            if (v710 > 0x40)
            {
              v47 = (_QWORD *)v709;
              v48 = ((unint64_t)v710 + 63) >> 6;
              v49 = (uint64_t *)v45;
              do
              {
                v50 = *v49++;
                *v47++ |= v50;
                --v48;
              }
              while (v48);
            }
            else
            {
              v709 |= v45;
            }
            if (v43 >= 0x41 && v45)
              MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
            v51 = v710;
            v690 = v710;
            if (v710 > 0x40)
            {
              v54 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
              v689 = (void *)operator new[]();
              memcpy(v689, (const void *)v709, v54);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v689);
              v51 = v690;
              v53 = (unint64_t)v689;
            }
            else
            {
              v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v710;
              if (!v710)
                v52 = 0;
              v53 = v52 & ~v709;
            }
            if (v712 > 0x40)
            {
              v55 = (_QWORD *)v711;
              v56 = ((unint64_t)v712 + 63) >> 6;
              v57 = (uint64_t *)v53;
              do
              {
                v58 = *v57++;
                *v55++ &= v58;
                --v56;
              }
              while (v56);
            }
            else
            {
              v711 &= v53;
            }
            if (v51 >= 0x41 && v53)
              MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
            if (DWORD2(v715[0]) < 0x41)
              goto LABEL_46;
            v38 = *(void **)&v715[0];
            if (!*(_QWORD *)&v715[0])
              goto LABEL_46;
            break;
          default:
LABEL_44:
            if (v18 >= 0x186)
LABEL_45:
              (*(void (**)(_QWORD, uint64_t, _BOOL8, unint64_t *, llvm::APInt *, uint64_t, uint64_t))(**(_QWORD **)(v683 + 24) + 1608))(*(_QWORD *)(v683 + 24), v15, v714, &v709, a4, v683, a5);
            goto LABEL_46;
        }
        goto LABEL_104;
      }
      switch(v18)
      {
        case 39:
          goto LABEL_34;
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 49:
        case 50:
        case 51:
        case 52:
        case 54:
        case 55:
        case 59:
        case 65:
        case 66:
        case 67:
        case 71:
        case 73:
        case 74:
        case 75:
        case 82:
        case 83:
        case 84:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 140:
        case 141:
        case 142:
        case 143:
        case 145:
        case 152:
        case 154:
        case 156:
        case 157:
        case 158:
        case 161:
        case 162:
        case 163:
        case 165:
        case 166:
        case 178:
        case 179:
        case 194:
        case 195:
        case 196:
        case 197:
        case 202:
        case 203:
        case 208:
        case 209:
        case 210:
        case 212:
        case 213:
        case 214:
        case 215:
          goto LABEL_44;
        case 46:
        case 47:
        case 48:
          goto LABEL_45;
        case 53:
          sub_1C6368768(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 >= 0x41 && v711)
          {
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v711 = v703;
            v712 = v704;
            v704 = 0;
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          }
          else
          {
            v711 = v703;
            v712 = v704;
          }
          v367 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v713 + 32) + 40) + 80);
          v368 = (_QWORD *)(v367 + 24);
          if (*(_DWORD *)(v367 + 32) >= 0x41u)
            v368 = (_QWORD *)*v368;
          v369 = *(_DWORD *)v368;
          v371 = sub_1C6131A64((unsigned int *)&v713);
          if ((_DWORD)v370 == 1)
          v372 = v371 * v369;
          llvm::APInt::getHiBits((llvm::APInt *)&v709, v710 - v372, (uint64_t)__src);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          llvm::APInt::getHiBits((llvm::APInt *)&v711, LODWORD(__src[1]) - v372, (uint64_t)__src);
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = (unint64_t)__src[0];
          v712 = __src[1];
          llvm::APInt::trunc((llvm::APInt *)&v709, v371, (llvm::APInt *)__src);
          v154 = v371;
          goto LABEL_309;
        case 56:
        case 68:
        case 70:
          goto LABEL_657;
        case 57:
        case 69:
          goto LABEL_53;
        case 58:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v151 = *(_QWORD *)(v713 + 32);
          if (*(_QWORD *)v151 == *(_QWORD *)(v151 + 40) && *(_DWORD *)(v151 + 8) == *(_DWORD *)(v151 + 48))
            v152 = sub_1C5D4EA4C(v683, *(_QWORD *)v151, *(_QWORD *)(v151 + 8), (uint64_t)a4, 0, (a5 + 1));
          else
            v152 = 0;
          goto LABEL_613;
        case 60:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::udiv((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (unsigned int *)__src);
          goto LABEL_614;
        case 61:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::srem((llvm::KnownBits *)&v709, (int8x8_t *)&v705, (unsigned int *)__src);
          goto LABEL_614;
        case 62:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::urem((llvm::KnownBits *)&v709, (int8x8_t *)&v705, (unsigned int *)__src);
          goto LABEL_614;
        case 63:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v156 = *(_QWORD *)(v713 + 32);
          v152 = *(_QWORD *)v156 == *(_QWORD *)(v156 + 40) && *(_DWORD *)(v156 + 8) == *(_DWORD *)(v156 + 48);
          if (!v714)
            goto LABEL_613;
          goto LABEL_791;
        case 64:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v153 = *(_QWORD *)(v713 + 32);
          v152 = *(_QWORD *)v153 == *(_QWORD *)(v153 + 40) && *(_DWORD *)(v153 + 8) == *(_DWORD *)(v153 + 48);
          if (v714)
            goto LABEL_808;
LABEL_613:
          llvm::KnownBits::mul((const void **)&v709, (const void **)&v705, (const llvm::KnownBits *)v152, (uint64_t *)__src);
          goto LABEL_614;
        case 72:
        case 76:
        case 77:
          if (v16)
            goto LABEL_653;
LABEL_657:
          LODWORD(__src[1]) = 1;
          v704 = 1;
          __src[0] = (void *)(v18 != 72 && v18 != 70);
          v703 = 0;
          sub_1C5D44BD8(v697, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v697[0];
          v710 = v697[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v698;
          v712 = v699;
          sub_1C5D44BD8(v697, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)v697[0];
          v706 = v697[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v698;
          v708 = v699;
          llvm::KnownBits::computeForAddCarry((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (const llvm::KnownBits *)__src, (uint64_t)v697);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v697[0];
          v710 = v697[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v698;
          v712 = v699;
          goto LABEL_765;
        case 78:
        case 79:
          if (v16)
          {
LABEL_653:
            v313 = *(unsigned int **)(v683 + 24);
            v314 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)(v15 + 32) + 40)
                             + 16 * *(unsigned int *)(*(_QWORD *)(v15 + 32) + 8));
            v311 = *v314;
            v312 = v314[1];
LABEL_654:
            v315 = sub_1C6329468(v313, v311, v312);
            if (v13 >= 2 && v315 == 1)
              goto LABEL_535;
          }
          else
          {
LABEL_53:
            sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
            if (v710 >= 0x41 && v709)
              MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
            v709 = (unint64_t)__src[0];
            v710 = __src[1];
            LODWORD(__src[1]) = 0;
            if (v712 >= 0x41 && v711)
              MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v711 = v703;
            v712 = v704;
            sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
            if (v706 >= 0x41 && v705)
              MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
            v705 = (int8x8_t *)__src[0];
            v706 = __src[1];
            if (v708 >= 0x41 && v707)
              MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
            v707 = v703;
            v39 = v704;
            v708 = v704;
            v686 = v706;
            if (v706 > 0x40)
            {
              v549 = (((unint64_t)v706 + 63) >> 3) & 0x3FFFFFF8;
              v685 = (void *)operator new[]();
              memcpy(v685, v705, v549);
              v39 = v708;
            }
            else
            {
              v685 = v705;
            }
            v688 = v39;
            if (v39 > 0x40)
            {
              v550 = (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8;
              v687 = (void *)operator new[]();
              memcpy(v687, (const void *)v707, v550);
            }
            else
            {
              v687 = (void *)v707;
            }
            llvm::KnownBits::computeForAddSub(0, 0, (uint64_t)&v709, (uint64_t)&v685, (uint64_t)__src);
            if (v710 >= 0x41 && v709)
              MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
            v709 = (unint64_t)__src[0];
            v710 = __src[1];
            LODWORD(__src[1]) = 0;
            if (v712 >= 0x41 && v711)
            {
              MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
              v711 = v703;
              v712 = v704;
              v704 = 0;
              if (LODWORD(__src[1]) >= 0x41 && __src[0])
                MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            }
            else
            {
              v711 = v703;
              v712 = v704;
              v704 = 0;
            }
            if (v688 >= 0x41 && v687)
              MEMORY[0x1CAA32F9C](v687, 0x1000C8000313F17);
            if (v686 >= 0x41)
            {
              v38 = v685;
              if (v685)
                goto LABEL_104;
            }
          }
          goto LABEL_46;
        case 80:
        case 81:
          if (v16)
            goto LABEL_520;
          goto LABEL_46;
        case 85:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v706 > 0x40)
          {
            v113 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v705);
          }
          else if (v706)
          {
            v113 = __clz(~((_QWORD)v705 << -(char)v706));
          }
          else
          {
            v113 = 0;
          }
          v62 = v710;
          v64 = v710 - v113;
          goto LABEL_554;
        case 138:
        case 139:
        case 193:
          v308 = sub_1C6141934(v15);
          v309 = (unsigned int *)(*(_QWORD *)(v713 + 32) + 40 * v308);
          v310 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v309 + 40) + 16 * v309[2]);
          v311 = *v310;
          v312 = v310[1];
          v313 = *(unsigned int **)(v683 + 24);
          goto LABEL_654;
        case 144:
        case 187:
          goto LABEL_535;
        case 146:
          v114 = v710;
          if (v710 > 0x40)
          {
            memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
            v114 = v710;
            if (v710)
            {
LABEL_201:
              v115 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v114;
              if (v114 < 0x41)
              {
LABEL_202:
                v116 = &v709;
                goto LABEL_203;
              }
              v116 = (unint64_t *)(v709 + 8 * ((((unint64_t)v114 + 63) >> 6) - 1));
LABEL_203:
              *v116 &= v115;
              v117 = v712;
              if (v712 > 0x40)
              {
                memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
                v117 = v712;
                if (v712)
                {
LABEL_205:
                  v118 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v117;
                  if (v117 >= 0x41)
                    v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v117 + 63) >> 6) - 1));
                  goto LABEL_207;
                }
              }
              else
              {
                v711 = -1;
                if (v712)
                  goto LABEL_205;
              }
              v118 = 0;
LABEL_207:
              *v14 &= v118;
              v119 = *(unsigned __int16 *)(v713 + 56);
              if (!*(_WORD *)(v713 + 56))
                goto LABEL_46;
              v120 = 0;
              v121 = (a5 + 1);
              while (1)
              {
                if (*((_DWORD *)a4 + 2) >= 0x41u)
                  v122 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v120 >> 6));
                else
                  v122 = a4;
                if (((*(_QWORD *)v122 >> v120) & 1) == 0)
                  goto LABEL_213;
                v715[0] = *(_OWORD *)(*(_QWORD *)(v713 + 32) + 40 * v120);
                sub_1C6368768(__src, v683, *(_QWORD *)&v715[0], *((_QWORD *)&v715[0] + 1), v121);
                if (v706 >= 0x41 && v705)
                  MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                v705 = (int8x8_t *)__src[0];
                v706 = __src[1];
                LODWORD(__src[1]) = 0;
                if (v708 >= 0x41 && v707)
                {
                  MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                  v707 = v703;
                  v708 = v704;
                  v704 = 0;
                  if (LODWORD(__src[1]) >= 0x41 && __src[0])
                    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                }
                else
                {
                  v707 = v703;
                  v708 = v704;
                }
                v124 = sub_1C6131A64((unsigned int *)v715);
                if ((_DWORD)v123 == 1)
                if (v124 != (llvm::Type *)v13)
                {
                  llvm::APInt::trunc((llvm::APInt *)&v705, v13, (llvm::APInt *)__src);
                  llvm::APInt::trunc((llvm::APInt *)&v707, v13, (llvm::APInt *)v697);
                  v125 = __src[1];
                  v126 = (int8x8_t *)__src[0];
                  v127 = v697[1];
                  v128 = (unint64_t *)v697[0];
                  if (v706 >= 0x41 && v705)
                    MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                  v705 = v126;
                  v706 = v125;
                  if (v708 >= 0x41 && v707)
                    MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                  v707 = (unint64_t)v128;
                  v708 = v127;
                }
                v129 = v710;
                if (v710 > 0x40)
                {
                  v138 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                  v130 = (void *)operator new[]();
                  memcpy(v130, (const void *)v709, v138);
                  v139 = v705;
                  v140 = (unint64_t)(v129 + 63) >> 6;
                  v141 = v130;
                  do
                  {
                    v142 = (uint64_t)*v139++;
                    *v141++ &= v142;
                    --v140;
                  }
                  while (v140);
                }
                else
                {
                  v130 = (void *)((unint64_t)v705 & v709);
                }
                v131 = v712;
                if (v712 > 0x40)
                {
                  v672 = v712 + 63;
                  v132 = (void *)operator new[]();
                  memcpy(v132, (const void *)v711, (v672 >> 3) & 0x3FFFFFF8);
                  v143 = (uint64_t *)v707;
                  v144 = v672 >> 6;
                  v145 = v132;
                  do
                  {
                    v146 = *v143++;
                    *v145++ &= v146;
                    --v144;
                  }
                  while (v144);
                }
                else
                {
                  v132 = (void *)(v707 & v711);
                }
                if (v710 >= 0x41 && v709)
                  MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                v709 = (unint64_t)v130;
                v710 = v129;
                if (v712 >= 0x41 && v711)
                {
                  MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                  LODWORD(v129) = v710;
                }
                v711 = (unint64_t)v132;
                v712 = v131;
                if (v129 > 0x40)
                {
                  v133 = 0;
                  v134 = ((unint64_t)v129 + 63) >> 6;
                  do
                  {
                    v135 = v134-- < 1;
                    if (v135)
                      break;
                    v136 = *(_QWORD *)(v709 + 8 * v134);
                    v133 += __clz(v136);
                  }
                  while (!v136);
                  v137 = v129 | 0xFFFFFFC0;
                  if ((v129 & 0x3F) == 0)
                    v137 = 0;
                  if (v133 + v137 != (_DWORD)v129)
                    goto LABEL_213;
                }
                else if (v709)
                {
                  goto LABEL_213;
                }
                if (v131 > 0x40)
                {
                  v147 = 0;
                  v148 = (unint64_t)(v131 + 63) >> 6;
                  do
                  {
                    v135 = v148-- < 1;
                    if (v135)
                      break;
                    v149 = *((_QWORD *)v132 + v148);
                    v147 += __clz(v149);
                  }
                  while (!v149);
                  v150 = v131 | 0xFFFFFFC0;
                  if ((v131 & 0x3F) == 0)
                    v150 = 0;
                  if (v147 + v150 == (_DWORD)v131)
                    goto LABEL_46;
                }
                else if (!v132)
                {
                  goto LABEL_46;
                }
LABEL_213:
                if (++v120 == v119)
                  goto LABEL_46;
              }
            }
          }
          else
          {
            v709 = -1;
            if (v710)
              goto LABEL_201;
          }
          v115 = 0;
          goto LABEL_202;
        case 147:
          v158 = *(uint64_t **)(v15 + 32);
          v667 = *v158;
          __n = v158[1];
          v663 = v158[6];
          v665 = v158[5];
          v159 = v158[10];
          DWORD2(v715[0]) = v33;
          if (v33 > 0x40)
          {
            v160 = operator new[]();
            *(_QWORD *)&v715[0] = v160;
            v673 = DWORD2(v715[0]);
            v161 = *(char **)a4;
            memcpy((void *)v160, *(const void **)a4, (((unint64_t)DWORD2(v715[0]) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)&v715[0] = *(_QWORD *)a4;
            v160 = *(_QWORD *)&v715[0];
            v673 = v33;
            v161 = *(char **)&v715[0];
          }
          v259 = *(unsigned __int16 *)(v159 + 24);
          if (v259 != 35 && v259 != 11)
            goto LABEL_717;
          v260 = *(_QWORD *)(v159 + 80);
          v261 = (_QWORD **)(v260 + 24);
          v262 = *(_DWORD *)(v260 + 32);
          if (v262 >= 0x41)
          {
            if (v262 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v260 + 24)) >= 0x41)
              goto LABEL_717;
            v263 = (_QWORD *)**v261;
          }
          else
          {
            v263 = *v261;
          }
          if ((unint64_t)v263 < v679)
          {
            v268 = v263 >> 6;
            if (*((_DWORD *)a4 + 2) >= 0x41u)
              v269 = (llvm::APInt *)&v161[8 * v268];
            else
              v269 = a4;
            v270 = 1 << (char)v263;
            v271 = *(_QWORD *)v269;
            v272 = ~(1 << (char)v263);
            if (v673 > 0x40)
              *(_QWORD *)(v160 + 8 * v268) &= v272;
            else
              *(_QWORD *)&v715[0] = v160 & v272;
            v278 = v712;
            if (v712 > 0x40)
            {
              memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
              v278 = v712;
              if (v712)
              {
LABEL_569:
                v279 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v278;
                if (v278 >= 0x41)
                  v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v278 + 63) >> 6) - 1));
LABEL_571:
                *v14 &= v279;
                v280 = v710;
                if (v710 > 0x40)
                {
                  memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
                  v280 = v710;
                }
                else
                {
                  v709 = -1;
                }
                if (v280)
                {
                  v281 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v280;
                  if (v280 >= 0x41)
                  {
                    v282 = (unint64_t *)(v709 + 8 * ((((unint64_t)v280 + 63) >> 6) - 1));
LABEL_576:
                    *v282 &= v281;
                    if ((v271 & v270) == 0)
                      goto LABEL_577;
LABEL_726:
                    sub_1C6368768(__src, v683, v665, v663, (a5 + 1));
                    if (v706 >= 0x41 && v705)
                      MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                    v705 = (int8x8_t *)__src[0];
                    v706 = __src[1];
                    LODWORD(__src[1]) = 0;
                    if (v708 >= 0x41 && v707)
                    {
                      MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                      v707 = v703;
                      v708 = v704;
                      v704 = 0;
                      if (LODWORD(__src[1]) >= 0x41 && __src[0])
                        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                    }
                    else
                    {
                      v707 = v703;
                      v708 = v704;
                    }
                    v338 = v706;
                    if (v706 < v13)
                    {
                      llvm::APInt::zext((llvm::APInt *)&v705, v13, (uint64_t)__src);
                      sub_1C4912E54(__src, v338, __src[1]);
                      v443 = __src[1];
                      if (LODWORD(__src[1]) > 0x40)
                      {
                        v554 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                        v681 = operator new[]();
                        memcpy((void *)v681, __src[0], v554);
                      }
                      else
                      {
                        v681 = (uint64_t)__src[0];
                      }
                      llvm::APInt::zext((llvm::APInt *)&v707, v13, (uint64_t)v697);
                      v339 = v697[1];
                      v340 = (uint64_t)v697[0];
                      LODWORD(v697[1]) = 0;
                      if (LODWORD(__src[1]) >= 0x41 && __src[0])
                        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                      v338 = v443;
                    }
                    else if (v706 > v13)
                    {
                      llvm::APInt::trunc((llvm::APInt *)&v705, v13, (llvm::APInt *)__src);
                      llvm::APInt::trunc((llvm::APInt *)&v707, v13, (llvm::APInt *)v697);
                      v338 = __src[1];
                      v681 = (uint64_t)__src[0];
                      v339 = v697[1];
                      v340 = (uint64_t)v697[0];
                    }
                    else
                    {
                      if (v706 > 0x40)
                      {
                        v561 = (((unint64_t)v706 + 63) >> 3) & 0x3FFFFFF8;
                        v681 = operator new[]();
                        memcpy((void *)v681, v705, v561);
                      }
                      else
                      {
                        v681 = (uint64_t)v705;
                      }
                      v339 = v708;
                      if (v708 > 0x40)
                      {
                        v562 = (((unint64_t)v708 + 63) >> 3) & 0x3FFFFFF8;
                        v340 = operator new[]();
                        memcpy((void *)v340, (const void *)v707, v562);
                      }
                      else
                      {
                        v340 = v707;
                      }
                    }
                    v444 = v710;
                    if (v710 > 0x40)
                    {
                      v644 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                      v445 = (void *)operator new[]();
                      memcpy(v445, (const void *)v709, v644);
                      v645 = (unint64_t)(v444 + 63) >> 6;
                      v646 = (uint64_t *)v681;
                      v647 = v445;
                      do
                      {
                        v648 = *v646++;
                        *v647++ &= v648;
                        --v645;
                      }
                      while (v645);
                    }
                    else
                    {
                      v445 = (void *)(v709 & v681);
                    }
                    v446 = v712;
                    if (v712 > 0x40)
                    {
                      v678 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
                      v447 = (void *)operator new[]();
                      memcpy(v447, (const void *)v711, v678);
                      v649 = (unint64_t)(v446 + 63) >> 6;
                      v650 = (uint64_t *)v340;
                      v651 = v447;
                      do
                      {
                        v652 = *v650++;
                        *v651++ &= v652;
                        --v649;
                      }
                      while (v649);
                    }
                    else
                    {
                      v447 = (void *)(v711 & v340);
                    }
                    if (v710 >= 0x41 && v709)
                      MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                    v709 = (unint64_t)v445;
                    v710 = v444;
                    if (v712 >= 0x41 && v711)
                      MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                    v711 = (unint64_t)v447;
                    v712 = v446;
                    if (v339 >= 0x41 && v340)
                      MEMORY[0x1CAA32F9C](v340, 0x1000C8000313F17);
                    if (v338 >= 0x41 && v681)
                      MEMORY[0x1CAA32F9C](v681, 0x1000C8000313F17);
LABEL_577:
                    if (DWORD2(v715[0]) > 0x40)
                    {
                      v283 = 0;
                      v284 = ((unint64_t)DWORD2(v715[0]) + 63) >> 6;
                      v38 = *(void **)&v715[0];
                      do
                      {
                        v135 = v284-- < 1;
                        if (v135)
                          break;
                        v285 = *(_QWORD *)(*(_QWORD *)&v715[0] + 8 * v284);
                        v283 += __clz(v285);
                      }
                      while (!v285);
                      v286 = DWORD2(v715[0]) | 0xFFFFFFC0;
                      if ((BYTE8(v715[0]) & 0x3F) == 0)
                        v286 = 0;
                      if (v283 + v286 == DWORD2(v715[0]))
                      {
LABEL_596:
                        if (!v38)
                          goto LABEL_46;
                        goto LABEL_104;
                      }
                    }
                    else if (!*(_QWORD *)&v715[0])
                    {
                      goto LABEL_46;
                    }
                    sub_1C5D44BD8(__src, v683, v667, __n, v715, (a5 + 1));
                    if (v706 >= 0x41 && v705)
                      MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                    v705 = (int8x8_t *)__src[0];
                    v706 = __src[1];
                    if (v708 >= 0x41 && v707)
                      MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                    v707 = v703;
                    v708 = v704;
                    v287 = v710;
                    if (v710 > 0x40)
                    {
                      v614 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                      v288 = (void *)operator new[]();
                      memcpy(v288, (const void *)v709, v614);
                      v615 = v705;
                      v616 = (unint64_t)(v287 + 63) >> 6;
                      v617 = v288;
                      do
                      {
                        v618 = (uint64_t)*v615++;
                        *v617++ &= v618;
                        --v616;
                      }
                      while (v616);
                    }
                    else
                    {
                      v288 = (void *)((unint64_t)v705 & v709);
                    }
                    v289 = v712;
                    if (v712 > 0x40)
                    {
                      v619 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
                      v290 = (void *)operator new[]();
                      memcpy(v290, (const void *)v711, v619);
                      v620 = (uint64_t *)v707;
                      v621 = (unint64_t)(v289 + 63) >> 6;
                      v622 = v290;
                      do
                      {
                        v623 = *v620++;
                        *v622++ &= v623;
                        --v621;
                      }
                      while (v621);
                    }
                    else
                    {
                      v290 = (void *)(v707 & v711);
                    }
                    if (v710 >= 0x41 && v709)
                      MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                    v709 = (unint64_t)v288;
                    v710 = v287;
                    if (v712 >= 0x41 && v711)
                      MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                    v711 = (unint64_t)v290;
                    v712 = v289;
                    if (DWORD2(v715[0]) < 0x41)
                      goto LABEL_46;
                    v38 = *(void **)&v715[0];
                    goto LABEL_596;
                  }
                }
                else
                {
                  v281 = 0;
                }
                v282 = &v709;
                goto LABEL_576;
              }
            }
            else
            {
              v711 = -1;
              if (v712)
                goto LABEL_569;
            }
            v279 = 0;
            goto LABEL_571;
          }
LABEL_717:
          v333 = v712;
          if (v712 > 0x40)
          {
            memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
            v333 = v712;
            if (v712)
            {
LABEL_719:
              v334 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v333;
              if (v333 >= 0x41)
                v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v333 + 63) >> 6) - 1));
LABEL_721:
              *v14 &= v334;
              v335 = v710;
              if (v710 > 0x40)
              {
                memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
                v335 = v710;
                if (v710)
                {
LABEL_723:
                  v336 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v335;
                  if (v335 >= 0x41)
                  {
                    v337 = (unint64_t *)(v709 + 8 * ((((unint64_t)v335 + 63) >> 6) - 1));
                    goto LABEL_725;
                  }
LABEL_724:
                  v337 = &v709;
LABEL_725:
                  *v337 &= v336;
                  goto LABEL_726;
                }
              }
              else
              {
                v709 = -1;
                if (v710)
                  goto LABEL_723;
              }
              v336 = 0;
              goto LABEL_724;
            }
          }
          else
          {
            v711 = -1;
            if (v712)
              goto LABEL_719;
          }
          v334 = 0;
          goto LABEL_721;
        case 148:
          v177 = *(_QWORD **)(v15 + 32);
          v178 = *v177;
          v179 = v177[1];
          v180 = v177[5];
          v181 = (uint64_t *)(*(_QWORD *)(*v177 + 40) + 16 * v179);
          v183 = *v181;
          v182 = v181[1];
          *(_QWORD *)&v715[0] = v183;
          *((_QWORD *)&v715[0] + 1) = v182;
          if ((_BYTE)v183)
          {
            if (v183 - 120 < 0x33)
              goto LABEL_46;
          }
          else if (*(_BYTE *)(v182 + 8) == 19)
          {
            goto LABEL_46;
          }
          v296 = sub_1C6131328((unsigned __int8 *)v715, (uint64_t)v11, v12);
          v298 = sub_1C612FE00((llvm::EVT *)v715, v297);
          if (v13 > v296)
          {
            llvm::APInt::trunc((llvm::APInt *)&v709, v296, (llvm::APInt *)__src);
            llvm::APInt::trunc((llvm::APInt *)&v711, v296, (llvm::APInt *)v697);
            v674 = __src[1];
            v299 = __src[0];
            v680 = v697[1];
            v677 = v697[0];
            if (v710 >= 0x41 && v709)
              MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
            v709 = (unint64_t)v299;
            v710 = v674;
            if (v712 >= 0x41 && v711)
              MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v711 = (unint64_t)v677;
            v712 = v680;
          }
          v701 = v298;
          if (v298 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v700, -1, 1);
          }
          else
          {
            if (v298)
              v300 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v298);
            else
              v300 = 0;
            v700 = v300;
          }
          v301 = *(unsigned __int16 *)(v180 + 24);
          if (v301 != 35 && v301 != 11)
            goto LABEL_1120;
          v302 = *(_QWORD *)(v180 + 80);
          v303 = (unint64_t **)(v302 + 24);
          v304 = *(_DWORD *)(v302 + 32);
          if (v304 >= 0x41)
          {
            if (v304 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v302 + 24)) >= 0x41)
              goto LABEL_1120;
            v305 = **v303;
          }
          else
          {
            v305 = (unint64_t)*v303;
          }
          if (v305 >= v298)
            goto LABEL_1120;
          LODWORD(__src[1]) = v298;
          if (v298 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
            v298 = __src[1];
            v514 = 1 << v305;
            if (LODWORD(__src[1]) > 0x40)
            {
              v515 = __src[0];
              *((_QWORD *)__src[0] + (v305 >> 6)) |= v514;
LABEL_1116:
              if (v701 >= 0x41 && v700)
                MEMORY[0x1CAA32F9C](v700, 0x1000C8000313F17);
              v700 = v515;
              v701 = v298;
LABEL_1120:
              sub_1C5D44BD8(__src, v683, v178, v179, &v700, (a5 + 1));
              if (v710 >= 0x41 && v709)
                MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
              v709 = (unint64_t)__src[0];
              v710 = __src[1];
              if (v712 >= 0x41 && v711)
                MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
              v711 = v703;
              v712 = v704;
              if (v13 > v296)
              {
                llvm::APInt::zext((llvm::APInt *)&v709, v13, (uint64_t)__src);
                llvm::APInt::zext((llvm::APInt *)&v711, v13, (uint64_t)v697);
                v516 = __src[1];
                v517 = __src[0];
                v518 = v697[1];
                v519 = v697[0];
                if (v710 >= 0x41 && v709)
                  MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                v709 = (unint64_t)v517;
                v710 = v516;
                if (v712 >= 0x41 && v711)
                  MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                v711 = (unint64_t)v519;
                v712 = v518;
              }
              if (v701 < 0x41)
                goto LABEL_46;
              v38 = v700;
              goto LABEL_596;
            }
            v513 = (unint64_t)__src[0];
          }
          else
          {
            v513 = 0;
            v514 = 1 << v305;
          }
          v515 = (void *)(v513 | v514);
          goto LABEL_1116;
        case 149:
          v383 = v710;
          if (v710 > 0x40)
          {
            memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
            v383 = v710;
            if (v710)
            {
LABEL_837:
              v384 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v383;
              if (v383 < 0x41)
              {
LABEL_838:
                v385 = &v709;
                goto LABEL_839;
              }
              v385 = (unint64_t *)(v709 + 8 * ((((unint64_t)v383 + 63) >> 6) - 1));
LABEL_839:
              *v385 &= v384;
              v386 = v712;
              if (v712 > 0x40)
              {
                memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
                v386 = v712;
                if (v712)
                {
LABEL_841:
                  v387 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v386;
                  if (v386 >= 0x41)
                    v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v386 + 63) >> 6) - 1));
                  goto LABEL_843;
                }
              }
              else
              {
                v711 = -1;
                if (v712)
                  goto LABEL_841;
              }
              v387 = 0;
LABEL_843:
              *v14 &= v387;
              *(_OWORD *)v697 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v713 + 32) + 40)
                                          + 16 * *(unsigned int *)(*(_QWORD *)(v713 + 32) + 8));
              v388 = sub_1C612FE00((llvm::EVT *)v697, v11);
              v389 = *(unsigned __int16 *)(v713 + 56);
              if (!*(_WORD *)(v713 + 56))
                goto LABEL_46;
              v390 = v388;
              v391 = 0;
              v392 = (a5 + 1);
              while (1)
              {
                llvm::APInt::extractBits(a4, v390, v390 * v391, (unsigned int *)v715);
                if (DWORD2(v715[0]) <= 0x40)
                  break;
                v393 = 0;
                v394 = ((unint64_t)DWORD2(v715[0]) + 63) >> 6;
                do
                {
                  v135 = v394-- < 1;
                  if (v135)
                    break;
                  v395 = *(_QWORD *)(*(_QWORD *)&v715[0] + 8 * v394);
                  v393 += __clz(v395);
                }
                while (!v395);
                v396 = DWORD2(v715[0]) | 0xFFFFFFC0;
                if ((BYTE8(v715[0]) & 0x3F) == 0)
                  v396 = 0;
                if (v393 + v396 != DWORD2(v715[0]))
                  goto LABEL_854;
LABEL_863:
                if (v710 > 0x40)
                {
                  v404 = 0;
                  v405 = ((unint64_t)v710 + 63) >> 6;
                  do
                  {
                    v135 = v405-- < 1;
                    if (v135)
                      break;
                    v406 = *(_QWORD *)(v709 + 8 * v405);
                    v404 += __clz(v406);
                  }
                  while (!v406);
                  v402 = 0;
                  v407 = v710 | 0xFFFFFFC0;
                  if ((v710 & 0x3F) == 0)
                    v407 = 0;
                  if (v404 + v407 != v710)
                    goto LABEL_871;
LABEL_865:
                  if (v712 > 0x40)
                  {
                    v408 = 0;
                    v409 = ((unint64_t)v712 + 63) >> 6;
                    do
                    {
                      v135 = v409-- < 1;
                      if (v135)
                        break;
                      v410 = *(_QWORD *)(v711 + 8 * v409);
                      v408 += __clz(v410);
                    }
                    while (!v410);
                    v411 = v712 | 0xFFFFFFC0;
                    if ((v712 & 0x3F) == 0)
                      v411 = 0;
                    v401 = v408 + v411 == v712;
                  }
                  else
                  {
                    v401 = v711 == 0;
                  }
                  v402 = v401;
                  goto LABEL_871;
                }
                if (!v709)
                  goto LABEL_865;
                v402 = 0;
LABEL_871:
                if (DWORD2(v715[0]) >= 0x41 && *(_QWORD *)&v715[0])
                  MEMORY[0x1CAA32F9C](*(_QWORD *)&v715[0], 0x1000C8000313F17);
                if (++v391 == v389)
                  v403 = 1;
                else
                  v403 = v402;
                if (v403 == 1)
                  goto LABEL_46;
              }
              if (!*(_QWORD *)&v715[0])
                goto LABEL_863;
LABEL_854:
              sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40 * v391), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40 * v391 + 8), v715, v392);
              if (v706 >= 0x41 && v705)
                MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
              v705 = (int8x8_t *)__src[0];
              v706 = __src[1];
              LODWORD(__src[1]) = 0;
              if (v708 >= 0x41 && v707)
                MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
              v707 = v703;
              v708 = v704;
              v397 = v710;
              if (v710 > 0x40)
              {
                v412 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                v398 = (void *)operator new[]();
                memcpy(v398, (const void *)v709, v412);
                v413 = v705;
                v414 = (unint64_t)(v397 + 63) >> 6;
                v415 = v398;
                do
                {
                  v416 = (uint64_t)*v413++;
                  *v415++ &= v416;
                  --v414;
                }
                while (v414);
              }
              else
              {
                v398 = (void *)((unint64_t)v705 & v709);
              }
              v399 = v712;
              if (v712 > 0x40)
              {
                v682 = v712 + 63;
                v400 = (void *)operator new[]();
                memcpy(v400, (const void *)v711, (v682 >> 3) & 0x3FFFFFF8);
                v417 = (uint64_t *)v707;
                v418 = v682 >> 6;
                v419 = v400;
                do
                {
                  v420 = *v417++;
                  *v419++ &= v420;
                  --v418;
                }
                while (v418);
              }
              else
              {
                v400 = (void *)(v707 & v711);
              }
              if (v710 >= 0x41 && v709)
                MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
              v709 = (unint64_t)v398;
              v710 = v397;
              if (v712 >= 0x41 && v711)
                MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
              v711 = (unint64_t)v400;
              v712 = v399;
              goto LABEL_863;
            }
          }
          else
          {
            v709 = -1;
            if (v710)
              goto LABEL_837;
          }
          v384 = 0;
          goto LABEL_838;
        case 150:
          v374 = *(uint64_t **)(v15 + 32);
          v375 = v374[5];
          v376 = v374[6];
          v377 = *(_QWORD *)(v374[10] + 80);
          v378 = (_QWORD *)(v377 + 24);
          if (*(_DWORD *)(v377 + 32) >= 0x41u)
            v378 = (_QWORD *)*v378;
          v379 = *v374;
          v380 = v374[1];
          v381 = *(_DWORD *)v378;
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(v375 + 40) + 16 * v376);
          v382 = sub_1C612FE00((llvm::EVT *)__src, v11);
          llvm::APInt::extractBits(a4, v382, v381, (unsigned int *)v697);
          DWORD2(v715[0]) = *((_DWORD *)a4 + 2);
          if (DWORD2(v715[0]) > 0x40)
          {
            *(_QWORD *)&v715[0] = operator new[]();
            memcpy(*(void **)&v715[0], *(const void **)a4, (((unint64_t)DWORD2(v715[0]) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)&v715[0] = *(_QWORD *)a4;
          }
          LODWORD(__src[1]) = v382;
          if (v382 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
          else
            __src[0] = 0;
          llvm::APInt::insertBits((void **)v715, (const llvm::APInt *)__src, v381);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          v448 = v712;
          if (v712 > 0x40)
          {
            memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
            v448 = v712;
            if (v712)
            {
LABEL_976:
              v449 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v448;
              if (v448 >= 0x41)
                v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v448 + 63) >> 6) - 1));
LABEL_978:
              *v14 &= v449;
              v450 = v710;
              if (v710 > 0x40)
              {
                memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
                v450 = v710;
                if (v710)
                {
LABEL_980:
                  v451 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v450;
                  if (v450 >= 0x41)
                  {
                    v452 = (unint64_t *)(v709 + 8 * ((((unint64_t)v450 + 63) >> 6) - 1));
LABEL_982:
                    *v452 &= v451;
                    if (LODWORD(v697[1]) > 0x40)
                    {
                      v453 = 0;
                      v454 = ((unint64_t)LODWORD(v697[1]) + 63) >> 6;
                      do
                      {
                        v135 = v454-- < 1;
                        if (v135)
                          break;
                        v455 = *((_QWORD *)v697[0] + v454);
                        v453 += __clz(v455);
                      }
                      while (!v455);
                      v456 = LODWORD(v697[1]) | 0xFFFFFFC0;
                      if (((uint64_t)v697[1] & 0x3F) == 0)
                        v456 = 0;
                      if (v453 + v456 == LODWORD(v697[1]))
                        goto LABEL_998;
                    }
                    else if (!v697[0])
                    {
                      goto LABEL_998;
                    }
                    sub_1C5D44BD8(__src, v683, v375, v376, v697, (a5 + 1));
                    if (v710 >= 0x41 && v709)
                      MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                    v709 = (unint64_t)__src[0];
                    v457 = __src[1];
                    v710 = __src[1];
                    LODWORD(__src[1]) = 0;
                    if (v712 >= 0x41 && v711)
                    {
                      MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                      v458 = v703;
                      v711 = v703;
                      v459 = v704;
                      v712 = v704;
                      v457 = v710;
                    }
                    else
                    {
                      v458 = v703;
                      v711 = v703;
                      v459 = v704;
                      v712 = v704;
                    }
                    if (v457 > 0x40)
                    {
                      v575 = 0;
                      v576 = ((unint64_t)v457 + 63) >> 6;
                      do
                      {
                        v135 = v576-- < 1;
                        if (v135)
                          break;
                        v577 = *(_QWORD *)(v709 + 8 * v576);
                        v575 += __clz(v577);
                      }
                      while (!v577);
                      v578 = v457 | 0xFFFFFFC0;
                      if ((v457 & 0x3F) == 0)
                        v578 = 0;
                      if (v575 + v578 != v457)
                        goto LABEL_998;
                    }
                    else if (v709)
                    {
                      goto LABEL_998;
                    }
                    if (v459 > 0x40)
                    {
                      v658 = 0;
                      v659 = ((unint64_t)v459 + 63) >> 6;
                      do
                      {
                        v135 = v659-- < 1;
                        if (v135)
                          break;
                        v660 = *(_QWORD *)(v458 + 8 * v659);
                        v658 += __clz(v660);
                      }
                      while (!v660);
                      v661 = v459 | 0xFFFFFFC0;
                      if ((v459 & 0x3F) == 0)
                        v661 = 0;
                      if (v658 + v661 == v459)
                        goto LABEL_710;
                    }
                    else if (!v458)
                    {
                      goto LABEL_710;
                    }
LABEL_998:
                    if (DWORD2(v715[0]) > 0x40)
                    {
                      v465 = 0;
                      v466 = ((unint64_t)DWORD2(v715[0]) + 63) >> 6;
                      v326 = *(_QWORD *)&v715[0];
                      do
                      {
                        v135 = v466-- < 1;
                        if (v135)
                          break;
                        v467 = *(_QWORD *)(*(_QWORD *)&v715[0] + 8 * v466);
                        v465 += __clz(v467);
                      }
                      while (!v467);
                      v468 = DWORD2(v715[0]) | 0xFFFFFFC0;
                      if ((BYTE8(v715[0]) & 0x3F) == 0)
                        v468 = 0;
                      if (v465 + v468 == DWORD2(v715[0]))
                        goto LABEL_712;
                    }
                    else if (!*(_QWORD *)&v715[0])
                    {
                      goto LABEL_714;
                    }
                    sub_1C5D44BD8(__src, v683, v379, v380, v715, (a5 + 1));
                    if (v706 >= 0x41 && v705)
                      MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                    v705 = (int8x8_t *)__src[0];
                    v706 = __src[1];
                    if (v708 >= 0x41 && v707)
                      MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                    v707 = v703;
                    v708 = v704;
                    v329 = v710;
                    if (v710 > 0x40)
                    {
                      v653 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                      v330 = (void *)operator new[]();
                      memcpy(v330, (const void *)v709, v653);
                      v654 = v705;
                      v655 = (unint64_t)(v329 + 63) >> 6;
                      v656 = v330;
                      do
                      {
                        v657 = (uint64_t)*v654++;
                        *v656++ &= v657;
                        --v655;
                      }
                      while (v655);
                    }
                    else
                    {
                      v330 = (void *)((unint64_t)v705 & v709);
                    }
                    v331 = v712;
                    if (v712 <= 0x40)
                      goto LABEL_706;
                    v469 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
                    v332 = (void *)operator new[]();
                    memcpy(v332, (const void *)v711, v469);
                    v470 = (uint64_t *)v707;
                    v471 = (unint64_t)(v331 + 63) >> 6;
                    v472 = v332;
                    do
                    {
                      v473 = *v470++;
                      *v472++ &= v473;
                      --v471;
                    }
                    while (v471);
                    goto LABEL_707;
                  }
LABEL_981:
                  v452 = &v709;
                  goto LABEL_982;
                }
              }
              else
              {
                v709 = -1;
                if (v710)
                  goto LABEL_980;
              }
              v451 = 0;
              goto LABEL_981;
            }
          }
          else
          {
            v711 = -1;
            if (v712)
              goto LABEL_976;
          }
          v449 = 0;
          goto LABEL_978;
        case 151:
          v108 = *(_QWORD **)(v15 + 32);
          v109 = *v108;
          v110 = v108[1];
          v111 = *(_QWORD *)(*v108 + 40) + 16 * v110;
          v112 = *(void **)v111;
          if (*(_QWORD *)v111)
          {
            if (*(_QWORD *)v111 - 120 < 0x33)
              goto LABEL_46;
          }
          else if (*(_BYTE *)(*(_QWORD *)(v111 + 8) + 8) == 19)
          {
            goto LABEL_46;
          }
          v291 = *(_QWORD *)(v108[5] + 80);
          v292 = (_QWORD *)(v291 + 24);
          if (*(_DWORD *)(v291 + 32) >= 0x41u)
            v292 = (_QWORD *)*v292;
          v293 = (_QWORD *)*v292;
          v294 = *(void **)(v111 + 8);
          __src[0] = v112;
          __src[1] = v294;
          v295 = sub_1C612FE00((llvm::EVT *)__src, v11);
          if (*((_DWORD *)a4 + 2) < v295)
            llvm::APInt::zext(a4, v295, (uint64_t)__src);
          else
            sub_1C5DD14E0((uint64_t)__src, (uint64_t)a4);
          LODWORD(v697[1]) = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v464 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
            v697[0] = (void *)operator new[]();
            memcpy(v697[0], __src[0], v464);
          }
          else
          {
            v697[0] = __src[0];
          }
          sub_1C4888094((uint64_t)v697, v293);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          sub_1C5D44BD8(__src, v683, v109, v110, v697, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          goto LABEL_714;
        case 153:
          LODWORD(v697[1]) = v33;
          if (v33 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v697, 0, 0);
            DWORD2(v715[0]) = v33;
            llvm::APInt::initSlowCase((llvm::APInt *)v715, 0, 0);
          }
          else
          {
            v697[0] = 0;
            DWORD2(v715[0]) = v33;
            *(_QWORD *)&v715[0] = 0;
          }
          v162 = v710;
          if (v710 > 0x40)
          {
            memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
            v162 = v710;
            if (v710)
            {
LABEL_338:
              v163 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v162;
              if (v162 < 0x41)
              {
LABEL_339:
                v164 = &v709;
                goto LABEL_340;
              }
              v164 = (unint64_t *)(v709 + 8 * ((((unint64_t)v162 + 63) >> 6) - 1));
LABEL_340:
              *v164 &= v163;
              v165 = v712;
              if (v712 > 0x40)
              {
                memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
                v165 = v712;
                if (v712)
                {
LABEL_342:
                  v166 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v165;
                  if (v165 >= 0x41)
                    v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v165 + 63) >> 6) - 1));
                  goto LABEL_344;
                }
              }
              else
              {
                v711 = -1;
                if (v712)
                  goto LABEL_342;
              }
              v166 = 0;
LABEL_344:
              *v14 &= v166;
              if (!v33)
                goto LABEL_670;
              v167 = 0;
              v168 = v713;
              v169 = *((_DWORD *)a4 + 2);
              v170 = v697[1];
              v171 = DWORD2(v715[0]);
              while (1)
              {
                v172 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v167 >> 6));
                if (v169 < 0x41)
                  v172 = a4;
                if (((*(_QWORD *)v172 >> v167) & 1) != 0)
                {
                  v173 = *(unsigned int *)(*(_QWORD *)(v168 + 80) + 4 * v167);
                  if ((v173 & 0x80000000) != 0)
                  {
                    if (v710 > 0x40)
                      bzero((void *)v709, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
                    else
                      v709 = 0;
                    if (v712 > 0x40)
                      bzero((void *)v711, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
                    else
                      v711 = 0;
                    if (LODWORD(v697[1]) > 0x40)
                      bzero(v697[0], (((unint64_t)LODWORD(v697[1]) + 63) >> 3) & 0x3FFFFFF8);
                    else
                      v697[0] = 0;
                    if (DWORD2(v715[0]) > 0x40)
                      bzero(*(void **)&v715[0], (((unint64_t)DWORD2(v715[0]) + 63) >> 3) & 0x3FFFFFF8);
                    else
                      *(_QWORD *)&v715[0] = 0;
LABEL_670:
                    if (LODWORD(v697[1]) > 0x40)
                    {
                      v316 = 0;
                      v317 = ((unint64_t)LODWORD(v697[1]) + 63) >> 6;
                      do
                      {
                        v135 = v317-- < 1;
                        if (v135)
                          break;
                        v318 = *((_QWORD *)v697[0] + v317);
                        v316 += __clz(v318);
                      }
                      while (!v318);
                      v319 = LODWORD(v697[1]) | 0xFFFFFFC0;
                      if (((uint64_t)v697[1] & 0x3F) == 0)
                        v319 = 0;
                      if (v316 + v319 != LODWORD(v697[1]))
                        goto LABEL_679;
                    }
                    else
                    {
                      if (!v697[0])
                        goto LABEL_688;
LABEL_679:
                      sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), v697, (a5 + 1));
                      if (v706 >= 0x41 && v705)
                        MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                      v705 = (int8x8_t *)__src[0];
                      v706 = __src[1];
                      LODWORD(__src[1]) = 0;
                      if (v708 >= 0x41 && v707)
                        MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                      v707 = v703;
                      v708 = v704;
                      v320 = v710;
                      if (v710 > 0x40)
                      {
                        v624 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                        v321 = (void *)operator new[]();
                        memcpy(v321, (const void *)v709, v624);
                        v625 = v705;
                        v626 = (unint64_t)(v320 + 63) >> 6;
                        v627 = v321;
                        do
                        {
                          v628 = (uint64_t)*v625++;
                          *v627++ &= v628;
                          --v626;
                        }
                        while (v626);
                      }
                      else
                      {
                        v321 = (void *)((unint64_t)v705 & v709);
                      }
                      v322 = v712;
                      if (v712 > 0x40)
                      {
                        v629 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
                        v323 = (void *)operator new[]();
                        memcpy(v323, (const void *)v711, v629);
                        v630 = (uint64_t *)v707;
                        v631 = (unint64_t)(v322 + 63) >> 6;
                        v632 = v323;
                        do
                        {
                          v633 = *v630++;
                          *v632++ &= v633;
                          --v631;
                        }
                        while (v631);
                      }
                      else
                      {
                        v323 = (void *)(v707 & v711);
                      }
                      if (v710 >= 0x41 && v709)
                        MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                      v709 = (unint64_t)v321;
                      v710 = v320;
                      if (v712 >= 0x41 && v711)
                        MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                      v711 = (unint64_t)v323;
                      v712 = v322;
                    }
LABEL_688:
                    if (v710 > 0x40)
                    {
                      v567 = 0;
                      v568 = ((unint64_t)v710 + 63) >> 6;
                      do
                      {
                        v135 = v568-- < 1;
                        if (v135)
                          break;
                        v569 = *(_QWORD *)(v709 + 8 * v568);
                        v567 += __clz(v569);
                      }
                      while (!v569);
                      v570 = v710 | 0xFFFFFFC0;
                      if ((v710 & 0x3F) == 0)
                        v570 = 0;
                      if (v567 + v570 != v710)
                        goto LABEL_692;
LABEL_690:
                      if (v712 > 0x40)
                      {
                        v610 = 0;
                        v611 = ((unint64_t)v712 + 63) >> 6;
                        do
                        {
                          v135 = v611-- < 1;
                          if (v135)
                            break;
                          v612 = *(_QWORD *)(v711 + 8 * v611);
                          v610 += __clz(v612);
                        }
                        while (!v612);
                        v613 = v712 | 0xFFFFFFC0;
                        if ((v712 & 0x3F) == 0)
                          v613 = 0;
                        if (v610 + v613 != v712)
                          goto LABEL_692;
                      }
                      else if (v711)
                      {
                        goto LABEL_692;
                      }
                      goto LABEL_710;
                    }
                    if (!v709)
                      goto LABEL_690;
LABEL_692:
                    if (DWORD2(v715[0]) <= 0x40)
                    {
                      if (!*(_QWORD *)&v715[0])
                        goto LABEL_714;
LABEL_701:
                      sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), v715, (a5 + 1));
                      if (v706 >= 0x41 && v705)
                        MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                      v705 = (int8x8_t *)__src[0];
                      v706 = __src[1];
                      if (v708 >= 0x41 && v707)
                        MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                      v707 = v703;
                      v708 = v704;
                      v329 = v710;
                      if (v710 > 0x40)
                      {
                        v634 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                        v330 = (void *)operator new[]();
                        memcpy(v330, (const void *)v709, v634);
                        v635 = v705;
                        v636 = (unint64_t)(v329 + 63) >> 6;
                        v637 = v330;
                        do
                        {
                          v638 = (uint64_t)*v635++;
                          *v637++ &= v638;
                          --v636;
                        }
                        while (v636);
                      }
                      else
                      {
                        v330 = (void *)((unint64_t)v705 & v709);
                      }
                      v331 = v712;
                      if (v712 > 0x40)
                      {
                        v639 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
                        v332 = (void *)operator new[]();
                        memcpy(v332, (const void *)v711, v639);
                        v640 = (uint64_t *)v707;
                        v641 = (unint64_t)(v331 + 63) >> 6;
                        v642 = v332;
                        do
                        {
                          v643 = *v640++;
                          *v642++ &= v643;
                          --v641;
                        }
                        while (v641);
                      }
                      else
                      {
LABEL_706:
                        v332 = (void *)(v707 & v711);
                      }
LABEL_707:
                      if (v710 >= 0x41 && v709)
                        MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                      v709 = (unint64_t)v330;
                      v710 = v329;
                      if (v712 >= 0x41 && v711)
                        MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                      v711 = (unint64_t)v332;
                      v712 = v331;
LABEL_710:
                      if (DWORD2(v715[0]) >= 0x41)
                      {
                        v326 = *(_QWORD *)&v715[0];
                        goto LABEL_712;
                      }
LABEL_714:
                      if (LODWORD(v697[1]) < 0x41)
                        goto LABEL_46;
                      v38 = v697[0];
                      if (!v697[0])
                        goto LABEL_46;
LABEL_104:
                      MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
                      goto LABEL_46;
                    }
                    v324 = 0;
                    v325 = ((unint64_t)DWORD2(v715[0]) + 63) >> 6;
                    v326 = *(_QWORD *)&v715[0];
                    do
                    {
                      v135 = v325-- < 1;
                      if (v135)
                        break;
                      v327 = *(_QWORD *)(*(_QWORD *)&v715[0] + 8 * v325);
                      v324 += __clz(v327);
                    }
                    while (!v327);
                    v328 = DWORD2(v715[0]) | 0xFFFFFFC0;
                    if ((BYTE8(v715[0]) & 0x3F) == 0)
                      v328 = 0;
                    if (v324 + v328 != DWORD2(v715[0]))
                      goto LABEL_701;
LABEL_712:
                    if (v326)
                      MEMORY[0x1CAA32F9C](v326, 0x1000C8000313F17);
                    goto LABEL_714;
                  }
                  if (v173 >= v33)
                  {
                    v175 = v173 % v33;
                    v176 = 1 << (v173 % v33);
                    if (v171 > 0x40)
                      *(_QWORD *)(*(_QWORD *)&v715[0] + 8 * (v175 >> 6)) |= v176;
                    else
                      *(_QWORD *)&v715[0] |= v176;
                  }
                  else
                  {
                    v174 = 1 << v173;
                    if (v170 > 0x40)
                      *(_QWORD *)((char *)v697[0] + ((v173 >> 3) & 0x1FFFFFF8)) |= v174;
                    else
                      v697[0] = (void *)((unint64_t)v697[0] | v174);
                  }
                }
                if (v33 == ++v167)
                  goto LABEL_670;
              }
            }
          }
          else
          {
            v709 = -1;
            if (v710)
              goto LABEL_338;
          }
          v163 = 0;
          goto LABEL_339;
        case 155:
          if (v33 < 0x41 || v33 - llvm::APInt::countLeadingZerosSlowCase(a4) <= 0x40)
          {
            v105 = *(_QWORD **)a4;
            if (v33 < 0x41)
              v105 = a4;
            if (*v105 == 1)
            {
              v715[0] = *(_OWORD *)*(_QWORD *)(v15 + 32);
              sub_1C6368768(__src, v683, *(_QWORD *)&v715[0], *((_QWORD *)&v715[0] + 1), (a5 + 1));
              if (v710 >= 0x41 && v709)
                MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
              v709 = (unint64_t)__src[0];
              v710 = __src[1];
              LODWORD(__src[1]) = 0;
              if (v712 >= 0x41 && v711)
              {
                MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                v711 = v703;
                v712 = v704;
                v704 = 0;
                if (LODWORD(__src[1]) >= 0x41 && __src[0])
                  MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
              }
              else
              {
                v711 = v703;
                v712 = v704;
              }
              v107 = sub_1C6131A64((unsigned int *)v715);
              if ((_DWORD)v106 == 1)
              if (v107 != (llvm::Type *)v13)
                goto LABEL_308;
            }
          }
          goto LABEL_46;
        case 159:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
LABEL_808:
          llvm::KnownBits::mulhu((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (uint64_t)__src);
          goto LABEL_614;
        case 160:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
LABEL_791:
          llvm::KnownBits::mulhs((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (uint64_t)__src);
          goto LABEL_614;
        case 164:
          v427 = (a5 + 1);
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, v427);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, v427);
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v428 = v710;
          llvm::APInt::zext((llvm::APInt *)&v709, v13 + 1, (uint64_t)__src);
          sub_1C4912E54(__src, v428, __src[1]);
          v429 = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v552 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
            v430 = (void *)operator new[]();
            memcpy(v430, __src[0], v552);
          }
          else
          {
            v430 = __src[0];
          }
          llvm::APInt::zext((llvm::APInt *)&v711, v13 + 1, (uint64_t)v697);
          v431 = v697[1];
          v432 = v697[0];
          LODWORD(v697[1]) = 0;
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v430;
          v710 = v429;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = (unint64_t)v432;
          v712 = v431;
          v433 = v706;
          llvm::APInt::zext((llvm::APInt *)&v705, v13 + 1, (uint64_t)__src);
          sub_1C4912E54(__src, v433, __src[1]);
          v434 = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v553 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
            v435 = (int8x8_t *)operator new[]();
            memcpy(v435, __src[0], v553);
          }
          else
          {
            v435 = (int8x8_t *)__src[0];
          }
          llvm::APInt::zext((llvm::APInt *)&v707, v13 + 1, (uint64_t)v697);
          v436 = v697[1];
          v437 = (unint64_t *)v697[0];
          LODWORD(v697[1]) = 0;
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = v435;
          v706 = v434;
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = (unint64_t)v437;
          v708 = v436;
          LODWORD(__src[1]) = 1;
          __src[0] = 0;
          v704 = 1;
          v703 = 1;
          llvm::KnownBits::computeForAddCarry((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (const llvm::KnownBits *)__src, (uint64_t)v697);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v697[0];
          v710 = v697[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v698;
          v712 = v699;
          llvm::APInt::extractBits((llvm::APInt *)&v709, v13, 1u, (unsigned int *)v697);
          llvm::APInt::extractBits((llvm::APInt *)&v711, v13, 1u, (unsigned int *)v715);
          v438 = v697[1];
          v439 = v697[0];
          v440 = DWORD2(v715[0]);
          v441 = *(_QWORD *)&v715[0];
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v439;
          v710 = v438;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v441;
          v712 = v440;
LABEL_765:
          if (v704 >= 0x41 && v703)
            MEMORY[0x1CAA32F9C](v703, 0x1000C8000313F17);
          goto LABEL_39;
        case 167:
        case 168:
          v84 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, 0, 0);
          if (!v84)
            goto LABEL_639;
          v85 = **(_QWORD **)(v713 + 32);
          v86 = v18 == 168 ? 167 : 168;
          if (v86 != *(unsigned __int16 *)(v85 + 24))
            goto LABEL_639;
          v87 = v84;
          v88 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v85 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v85 + 32) + 48), a4, 0, 0);
          if (!v88)
            goto LABEL_639;
          if (v18 == 168)
            v89 = v88;
          else
            v89 = v87;
          if (v18 == 168)
            v90 = v87;
          else
            v90 = v88;
          v91 = *(_QWORD *)(v90 + 80);
          v92 = (_QWORD *)(v91 + 24);
          v93 = *(_QWORD *)(v89 + 80);
          v94 = (_QWORD *)(v93 + 24);
          v95 = *(unsigned int *)(v91 + 32);
          if (v95 > 0x40)
          {
            v527 = *(_QWORD *)(*v92 + 8 * ((v95 - 1) >> 6)) & (1 << (v95 - 1));
            v528 = *(_DWORD *)(v93 + 32);
            v529 = v528 - 1;
            v530 = *(_QWORD *)(v93 + 24);
            if (v528 >= 0x41)
              v531 = (_QWORD *)(v530 + 8 * (v529 >> 6));
            else
              v531 = (_QWORD *)(v93 + 24);
            if ((v527 != 0) == ((*v531 >> v529) & 1))
            {
              v535 = v95 + 63;
              v536 = v530 - 8;
              v537 = (v535 >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v537)
                  goto LABEL_164;
                v538 = *(_QWORD *)(*v92 - 8 + v537);
                v539 = *(_QWORD *)(v536 + v537);
                v537 -= 8;
              }
              while (v538 == v539);
              if (v538 > v539)
              {
LABEL_639:
                sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
                if (v710 >= 0x41 && v709)
                  MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                v709 = (unint64_t)__src[0];
                v710 = __src[1];
                if (v712 >= 0x41 && v711)
                  MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                v711 = v703;
                v712 = v704;
                sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
                if (v706 >= 0x41 && v705)
                  MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                v705 = (int8x8_t *)__src[0];
                v706 = __src[1];
                if (v708 >= 0x41 && v707)
                  MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                v707 = v703;
                v708 = v704;
                if (v18 == 168)
                  llvm::KnownBits::smax((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (uint64_t)__src);
                else
                  llvm::KnownBits::smin((llvm::KnownBits *)&v709, (const llvm::KnownBits *)&v705, (uint64_t)__src);
                goto LABEL_646;
              }
            }
            else if (!v527)
            {
              goto LABEL_639;
            }
          }
          else if ((uint64_t)(*v92 << -(char)v95) >> -(char)v95 > (uint64_t)(*v94 << -(char)v95) >> -(char)v95)
          {
            goto LABEL_639;
          }
LABEL_164:
          v96 = sub_1C4959174((llvm::APInt *)(v91 + 24));
          v97 = sub_1C4959174((llvm::APInt *)(v93 + 24));
          if (v97 >= v96)
            v98 = v96;
          else
            v98 = v97;
          v99 = *(_DWORD *)(v91 + 32);
          v100 = v99 - 1;
          v101 = (_QWORD *)(v91 + 24);
          if (v99 >= 0x41)
            v101 = (_QWORD *)(*v92 + 8 * (v100 >> 6));
          if ((*v101 & (1 << v100)) != 0)
          {
            v102 = *(_DWORD *)(v93 + 32);
            v103 = v102 - 1;
            v104 = (_QWORD *)(v93 + 24);
            if (v102 >= 0x41)
              v104 = (_QWORD *)(*v94 + 8 * (v103 >> 6));
            if (((*v104 >> v103) & 1) != 0)
            {
              v62 = v712;
              v64 = v712 - v98;
              v63 = &v711;
              goto LABEL_555;
            }
          }
          if (v99 >= 0x41)
            v92 = (_QWORD *)(*v92 + 8 * (v100 >> 6));
          if ((*v92 & (1 << v100)) == 0)
          {
            v306 = *(_DWORD *)(v93 + 32);
            v307 = v306 - 1;
            if (v306 >= 0x41)
              v94 = (_QWORD *)(*v94 + 8 * (v307 >> 6));
            if (((*v94 >> v307) & 1) == 0)
            {
LABEL_390:
              v62 = v710;
              v64 = v710 - v98;
LABEL_554:
              v63 = &v709;
LABEL_555:
              sub_1C4912E54(v63, v64, v62);
              goto LABEL_46;
            }
          }
          goto LABEL_639;
        case 169:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::umin((const void **)&v709, (const void **)&v705, v155, (uint64_t)__src);
          goto LABEL_404;
        case 170:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::umax((const void **)&v709, (const void **)&v705, v189, (uint64_t)__src);
          goto LABEL_404;
        case 171:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v710 > 0x40)
          {
            v541 = (_QWORD *)v709;
            v542 = v705;
            v543 = ((unint64_t)v710 + 63) >> 6;
            do
            {
              v544 = (uint64_t)*v542++;
              *v541++ |= v544;
              --v543;
            }
            while (v543);
          }
          else
          {
            v709 |= (unint64_t)v705;
          }
          if (v712 <= 0x40)
          {
            v188 = v711 & v707;
            goto LABEL_420;
          }
          v545 = (_QWORD *)v711;
          v546 = (uint64_t *)v707;
          v547 = ((unint64_t)v712 + 63) >> 6;
          do
          {
            v548 = *v546++;
            *v545++ &= v548;
            --v547;
          }
          while (v547);
          goto LABEL_46;
        case 172:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v710 > 0x40)
          {
            v588 = (_QWORD *)v709;
            v589 = v705;
            v590 = ((unint64_t)v710 + 63) >> 6;
            do
            {
              v591 = (uint64_t)*v589++;
              *v588++ &= v591;
              --v590;
            }
            while (v590);
          }
          else
          {
            v709 &= (unint64_t)v705;
          }
          if (v712 > 0x40)
          {
            v592 = (_QWORD *)v711;
            v593 = (uint64_t *)v707;
            v594 = ((unint64_t)v712 + 63) >> 6;
            do
            {
              v595 = *v593++;
              *v592++ |= v595;
              --v594;
            }
            while (v594);
          }
          else
          {
            v188 = v711 | v707;
LABEL_420:
            v711 = v188;
          }
          goto LABEL_46;
        case 173:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::operator^=((const void **)&v709, &v705);
          goto LABEL_46;
        case 174:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::abs((llvm::KnownBits *)&v705, 0, __src);
          goto LABEL_404;
        case 175:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::shl((llvm::KnownBits *)&v709, (int8x8_t *)&v705, (llvm::KnownBits *)__src);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 >= 0x41 && v711)
          {
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v711 = v703;
            v712 = v704;
            v704 = 0;
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          }
          else
          {
            v711 = v703;
            v712 = v704;
          }
          v157 = sub_1C5D4E728(v713, v714, a4);
          if (!v157)
            goto LABEL_46;
          if (*((_DWORD *)v157 + 2) >= 0x41u)
            v157 = *(llvm::APInt **)v157;
          v62 = *(_DWORD *)v157;
          v63 = &v709;
          v64 = 0;
          goto LABEL_555;
        case 176:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::ashr((llvm::KnownBits *)&v709, (int8x8_t *)&v705, (unint64_t *)__src);
          goto LABEL_614;
        case 177:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          llvm::KnownBits::lshr((llvm::KnownBits *)&v709, (int8x8_t *)&v705, (llvm::KnownBits *)__src);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 >= 0x41 && v711)
          {
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v711 = v703;
            v712 = v704;
            v704 = 0;
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          }
          else
          {
            v711 = v703;
            v712 = v704;
          }
          v187 = sub_1C5D4E728(v713, v714, a4);
          if (!v187)
            goto LABEL_46;
          if (*((_DWORD *)v187 + 2) >= 0x41u)
            v187 = *(llvm::APInt **)v187;
          v98 = *(_DWORD *)v187;
          goto LABEL_390;
        case 180:
        case 181:
          v78 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 88), a4, 0, 0);
          if (!v78)
            goto LABEL_46;
          v79 = llvm::APInt::urem((uint64_t **)(*(_QWORD *)(v78 + 80) + 24), v13);
          if (!v79)
          {
            v273 = (size_t *)(*(_QWORD *)(v713 + 32) + 40 * (v18 != 180));
            v274 = *v273;
            v275 = v273[1];
            v276 = (a5 + 1);
            v277 = v683;
            goto LABEL_565;
          }
          v80 = (a5 + 1);
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), a4, v80);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, v80);
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v18 == 180)
          {
            sub_1C4888094((uint64_t)&v711, v79);
            sub_1C4888094((uint64_t)&v709, v79);
            v81 = v13 - v79;
            if (v708 > 0x40)
            {
              llvm::APInt::tcShiftRight((llvm::APInt *)v707, (unint64_t *)(((unint64_t)v708 + 63) >> 6), v13 - v79);
            }
            else if (v708 == v81)
            {
              v707 = 0;
            }
            else
            {
              v707 >>= v81;
            }
            if (v706 <= 0x40)
            {
              if (v706 != v81)
              {
                v341 = (int8x8_t)((unint64_t)v705 >> v81);
LABEL_747:
                v705 = (int8x8_t *)v341;
                goto LABEL_748;
              }
              goto LABEL_743;
            }
            v342 = (llvm::APInt *)v705;
            v343 = (unint64_t *)(((unint64_t)v706 + 63) >> 6);
            v344 = v13 - v79;
          }
          else
          {
            sub_1C4888094((uint64_t)&v711, v13 - v79);
            sub_1C4888094((uint64_t)&v709, v13 - v79);
            if (v708 > 0x40)
            {
              llvm::APInt::tcShiftRight((llvm::APInt *)v707, (unint64_t *)(((unint64_t)v708 + 63) >> 6), v79);
            }
            else if (v708 == v79)
            {
              v707 = 0;
            }
            else
            {
              v707 >>= v79;
            }
            if (v706 <= 0x40)
            {
              if (v706 != v79)
              {
                v341 = (int8x8_t)((unint64_t)v705 >> v79);
                goto LABEL_747;
              }
LABEL_743:
              v705 = 0;
              goto LABEL_748;
            }
            v342 = (llvm::APInt *)v705;
            v343 = (unint64_t *)(((unint64_t)v706 + 63) >> 6);
            v344 = v79;
          }
          llvm::APInt::tcShiftRight(v342, v343, v344);
LABEL_748:
          if (v712 > 0x40)
          {
            v345 = (_QWORD *)v711;
            v346 = (uint64_t *)v707;
            v347 = ((unint64_t)v712 + 63) >> 6;
            do
            {
              v348 = *v346++;
              *v345++ |= v348;
              --v347;
            }
            while (v347);
          }
          else
          {
            v711 |= v707;
          }
          if (v710 > 0x40)
          {
            v349 = (_QWORD *)v709;
            v350 = v705;
            v351 = ((unint64_t)v710 + 63) >> 6;
            do
            {
              v352 = (uint64_t)*v350++;
              *v349++ |= v352;
              --v351;
            }
            while (v351);
          }
          else
          {
            v709 |= (unint64_t)v705;
          }
          goto LABEL_46;
        case 182:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          sub_1C626E35C((uint64_t)&v705, (uint64_t)__src);
          goto LABEL_404;
        case 183:
        case 188:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v704 > 0x40)
          {
            v83 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v707);
          }
          else
          {
            v82 = __clz(__rbit64(v703));
            if (v704 >= v82)
              v83 = v82;
            else
              v83 = v704;
          }
          v205 = __clz(v83);
          goto LABEL_553;
        case 184:
        case 189:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v704 > 0x40)
          {
            v190 = 0;
            v191 = ((unint64_t)v704 + 63) >> 6;
            do
            {
              v135 = v191-- < 1;
              if (v135)
                break;
              v192 = *(_QWORD *)(v703 + 8 * v191);
              v190 += __clz(v192);
            }
            while (!v192);
            if ((v704 & 0x3F) != 0)
              v193 = v704 | 0xFFFFFFC0;
            else
              v193 = 0;
            v77 = v190 + v193;
          }
          else
          {
            v77 = v704 + __clz(v703) - 64;
          }
          goto LABEL_552;
        case 185:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          if (v706 > 0x40)
          {
            v195 = 0;
            v264 = ((unint64_t)v706 + 63) >> 6;
            v265 = v705;
            do
            {
              v266 = *v265++;
              v267 = (uint8x8_t)vcnt_s8(v266);
              v267.i16[0] = vaddlv_u8(v267);
              v195 += v267.i32[0];
              --v264;
            }
            while (v264);
          }
          else
          {
            v194 = (uint8x8_t)vcnt_s8((int8x8_t)v705);
            v194.i16[0] = vaddlv_u8(v194);
            v195 = v194.i32[0];
          }
          v77 = v706 - v195;
LABEL_552:
          v205 = __clz(v77);
LABEL_553:
          v64 = 32 - v205;
          v62 = v710;
          goto LABEL_554;
        case 186:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          sub_1C626E3B8((uint64_t)&v705, (uint64_t)__src);
LABEL_404:
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 < 0x41 || !v711)
            goto LABEL_648;
          MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          v704 = 0;
          if (LODWORD(__src[1]) < 0x41)
            goto LABEL_46;
          v38 = __src[0];
          goto LABEL_596;
        case 190:
        case 191:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 88), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v65 = __src[1];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
          {
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v66 = v703;
            v711 = v703;
            v67 = v704;
            v712 = v704;
            v65 = v710;
          }
          else
          {
            v66 = v703;
            v711 = v703;
            v67 = v704;
            v712 = v704;
          }
          if (v65 > 0x40)
          {
            v557 = 0;
            v558 = ((unint64_t)v65 + 63) >> 6;
            do
            {
              v135 = v558-- < 1;
              if (v135)
                break;
              v559 = *(_QWORD *)(v709 + 8 * v558);
              v557 += __clz(v559);
            }
            while (!v559);
            v560 = v65 | 0xFFFFFFC0;
            if ((v65 & 0x3F) == 0)
              v560 = 0;
            if (v557 + v560 != v65)
              goto LABEL_120;
          }
          else if (v709)
          {
            goto LABEL_120;
          }
          if (v67 > 0x40)
          {
            v584 = 0;
            v585 = ((unint64_t)v67 + 63) >> 6;
            do
            {
              v135 = v585-- < 1;
              if (v135)
                break;
              v586 = *(_QWORD *)(v66 + 8 * v585);
              v584 += __clz(v586);
            }
            while (!v586);
            v587 = v67 | 0xFFFFFFC0;
            if ((v67 & 0x3F) == 0)
              v587 = 0;
            if (v584 + v587 == v67)
              goto LABEL_46;
          }
          else if (!v66)
          {
            goto LABEL_46;
          }
LABEL_120:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 48), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v68 = v710;
          if (v710 > 0x40)
          {
            v579 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
            v69 = (void *)operator new[]();
            memcpy(v69, (const void *)v709, v579);
            v580 = v705;
            v581 = (unint64_t)(v68 + 63) >> 6;
            v582 = v69;
            do
            {
              v583 = (uint64_t)*v580++;
              *v582++ &= v583;
              --v581;
            }
            while (v581);
          }
          else
          {
            v69 = (void *)((unint64_t)v705 & v709);
          }
          v70 = v712;
          if (v712 > 0x40)
          {
            v71 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
            v72 = (void *)operator new[]();
            memcpy(v72, (const void *)v711, v71);
            v73 = (uint64_t *)v707;
            v74 = (unint64_t)(v70 + 63) >> 6;
            v75 = v72;
            do
            {
              v76 = *v73++;
              *v75++ &= v76;
              --v74;
            }
            while (v74);
            goto LABEL_375;
          }
          goto LABEL_374;
        case 192:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 120), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 128), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v184 = __src[1];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
          {
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
            v185 = v703;
            v711 = v703;
            v186 = v704;
            v712 = v704;
            v184 = v710;
          }
          else
          {
            v185 = v703;
            v711 = v703;
            v186 = v704;
            v712 = v704;
          }
          if (v184 > 0x40)
          {
            v563 = 0;
            v564 = ((unint64_t)v184 + 63) >> 6;
            do
            {
              v135 = v564-- < 1;
              if (v135)
                break;
              v565 = *(_QWORD *)(v709 + 8 * v564);
              v563 += __clz(v565);
            }
            while (!v565);
            v566 = v184 | 0xFFFFFFC0;
            if ((v184 & 0x3F) == 0)
              v566 = 0;
            if (v563 + v566 != v184)
              goto LABEL_369;
          }
          else if (v709)
          {
            goto LABEL_369;
          }
          if (v186 > 0x40)
          {
            v606 = 0;
            v607 = ((unint64_t)v186 + 63) >> 6;
            do
            {
              v135 = v607-- < 1;
              if (v135)
                break;
              v608 = *(_QWORD *)(v185 + 8 * v607);
              v606 += __clz(v608);
            }
            while (!v608);
            v609 = v186 | 0xFFFFFFC0;
            if ((v186 & 0x3F) == 0)
              v609 = 0;
            if (v606 + v609 == v186)
              goto LABEL_46;
          }
          else if (!v185)
          {
            goto LABEL_46;
          }
LABEL_369:
          sub_1C5D44BD8(__src, v683, *(_QWORD *)(*(_QWORD *)(v713 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 88), a4, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v68 = v710;
          if (v710 > 0x40)
          {
            v596 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
            v69 = (void *)operator new[]();
            memcpy(v69, (const void *)v709, v596);
            v597 = v705;
            v598 = (unint64_t)(v68 + 63) >> 6;
            v599 = v69;
            do
            {
              v600 = (uint64_t)*v597++;
              *v599++ &= v600;
              --v598;
            }
            while (v598);
          }
          else
          {
            v69 = (void *)((unint64_t)v705 & v709);
          }
          v70 = v712;
          if (v712 > 0x40)
          {
            v601 = (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8;
            v72 = (void *)operator new[]();
            memcpy(v72, (const void *)v711, v601);
            v602 = (uint64_t *)v707;
            v603 = (unint64_t)(v70 + 63) >> 6;
            v604 = v72;
            do
            {
              v605 = *v602++;
              *v604++ &= v605;
              --v603;
            }
            while (v603);
          }
          else
          {
LABEL_374:
            v72 = (void *)(v707 & v711);
          }
LABEL_375:
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v69;
          goto LABEL_377;
        case 198:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          llvm::APInt::sext((llvm::APInt *)&v709, v13, (llvm::APInt *)__src);
          llvm::APInt::sext((llvm::APInt *)&v711, v13, (llvm::APInt *)v697);
          goto LABEL_435;
        case 199:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          v200 = v710;
          llvm::APInt::zext((llvm::APInt *)&v709, v13, (uint64_t)__src);
          sub_1C4912E54(__src, v200, __src[1]);
          v201 = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v540 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
            v202 = (void *)operator new[]();
            memcpy(v202, __src[0], v540);
          }
          else
          {
            v202 = __src[0];
          }
          llvm::APInt::zext((llvm::APInt *)&v711, v13, (uint64_t)v697);
          v203 = v697[1];
          v204 = v697[0];
          LODWORD(v697[1]) = 0;
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v202;
          v710 = v201;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = (unint64_t)v204;
          v712 = v203;
          goto LABEL_46;
        case 200:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          llvm::APInt::zext((llvm::APInt *)&v709, v13, (uint64_t)__src);
          llvm::APInt::zext((llvm::APInt *)&v711, v13, (uint64_t)v697);
          goto LABEL_435;
        case 201:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
LABEL_308:
          llvm::APInt::trunc((llvm::APInt *)&v709, v13, (llvm::APInt *)__src);
          v154 = v13;
LABEL_309:
          llvm::APInt::trunc((llvm::APInt *)&v711, v154, (llvm::APInt *)v697);
LABEL_435:
          v196 = __src[1];
          v197 = __src[0];
          v198 = v697[1];
          v199 = v697[0];
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v197;
          v710 = v196;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = (unint64_t)v199;
          v712 = v198;
          goto LABEL_46;
        case 204:
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v15 + 32), *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8), a4, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          *(_OWORD *)v697 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v713 + 32) + 40) + 80);
          v361 = sub_1C6131328((unsigned __int8 *)v697, v359, v360);
          llvm::KnownBits::sextInReg((llvm::KnownBits *)&v709, v361, (unsigned int *)__src);
LABEL_614:
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v712 < 0x41 || !v711)
            goto LABEL_648;
          MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v37 = __src[1];
          v711 = v703;
          v712 = v704;
          v704 = 0;
          goto LABEL_40;
        case 205:
          v715[0] = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v15 + 32) + 40)
                              + 16 * *(unsigned int *)(*(_QWORD *)(v15 + 32) + 8));
          v362 = sub_1C612FE00((llvm::EVT *)v715, v11);
          if (*((_DWORD *)a4 + 2) < v362)
            llvm::APInt::zext(a4, v362, (uint64_t)&v700);
          else
            sub_1C5DD14E0((uint64_t)&v700, (uint64_t)a4);
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), &v700, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          llvm::APInt::zext((llvm::APInt *)&v709, v13, (uint64_t)__src);
          llvm::APInt::zext((llvm::APInt *)&v711, v13, (uint64_t)v697);
          goto LABEL_800;
        case 206:
          v715[0] = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v15 + 32) + 40)
                              + 16 * *(unsigned int *)(*(_QWORD *)(v15 + 32) + 8));
          v358 = sub_1C612FE00((llvm::EVT *)v715, v11);
          if (*((_DWORD *)a4 + 2) < v358)
            llvm::APInt::zext(a4, v358, (uint64_t)&v700);
          else
            sub_1C5DD14E0((uint64_t)&v700, (uint64_t)a4);
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), &v700, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          llvm::APInt::sext((llvm::APInt *)&v709, v13, (llvm::APInt *)__src);
          llvm::APInt::sext((llvm::APInt *)&v711, v13, (llvm::APInt *)v697);
LABEL_800:
          v363 = __src[1];
          v364 = __src[0];
          v365 = v697[1];
          v366 = v697[0];
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v364;
          v710 = v363;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = (unint64_t)v366;
          v712 = v365;
          goto LABEL_916;
        case 207:
          v715[0] = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v15 + 32) + 40)
                              + 16 * *(unsigned int *)(*(_QWORD *)(v15 + 32) + 8));
          v421 = sub_1C612FE00((llvm::EVT *)v715, v11);
          if (*((_DWORD *)a4 + 2) < v421)
            llvm::APInt::zext(a4, v421, (uint64_t)&v700);
          else
            sub_1C5DD14E0((uint64_t)&v700, (uint64_t)a4);
          sub_1C5D44BD8(__src, v683, **(_QWORD **)(v713 + 32), *(_QWORD *)(*(_QWORD *)(v713 + 32) + 8), &v700, (a5 + 1));
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)__src[0];
          v710 = __src[1];
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = v703;
          v712 = v704;
          v422 = v710;
          llvm::APInt::zext((llvm::APInt *)&v709, v13, (uint64_t)__src);
          sub_1C4912E54(__src, v422, __src[1]);
          v423 = __src[1];
          if (LODWORD(__src[1]) > 0x40)
          {
            v551 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
            v424 = (void *)operator new[]();
            memcpy(v424, __src[0], v551);
          }
          else
          {
            v424 = __src[0];
          }
          llvm::APInt::zext((llvm::APInt *)&v711, v13, (uint64_t)v697);
          v425 = v697[1];
          v426 = v697[0];
          LODWORD(v697[1]) = 0;
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (v710 >= 0x41 && v709)
            MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
          v709 = (unint64_t)v424;
          v710 = v423;
          if (v712 >= 0x41 && v711)
            MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
          v711 = (unint64_t)v426;
          v712 = v425;
          goto LABEL_916;
        case 211:
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 40) + 80);
          v442 = sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v11, v12);
          LODWORD(v697[1]) = v13;
          if (v13 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v697, 0, 0);
            v13 = v697[1];
          }
          else
          {
            v697[0] = 0;
          }
          sub_1C4912E54(v697, v442, v13);
          if (v710 > 0x40)
          {
            v460 = (_QWORD *)v709;
            v461 = (uint64_t *)v697[0];
            v462 = ((unint64_t)v710 + 63) >> 6;
            do
            {
              v463 = *v461++;
              *v460++ |= v463;
              --v462;
            }
            while (v462);
          }
          else
          {
            v709 |= (unint64_t)v697[0];
          }
          if (LODWORD(v697[1]) < 0x41)
            goto LABEL_46;
          v38 = v697[0];
          goto LABEL_596;
        case 216:
          v373 = *(size_t **)(v15 + 32);
          v666 = *v373;
          v668 = v373[1];
          v715[0] = *(_OWORD *)(*(_QWORD *)(*v373 + 40) + 16 * v668);
          v675 = sub_1C6131328((unsigned __int8 *)v715, (uint64_t)v11, v12);
          if (LOBYTE(v715[0]))
          {
            if ((LOBYTE(v715[0]) - 120) >= 0x20u
              && (LOBYTE(v715[0]) - 2) >= 6u
              && (LOBYTE(v715[0]) - 15) >= 0x3Cu
              && (LOBYTE(v715[0]) + 104) >= 0x13u
              && (LOBYTE(v715[0]) - 8) >= 7u
              && (LOBYTE(v715[0]) - 75) >= 0x2Du)
            {
              goto LABEL_46;
            }
          }
          else
          {
            if ((*(_DWORD *)(*((_QWORD *)&v715[0] + 1) + 8) & 0xFE) == 0x12)
              v474 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)&v715[0] + 1) + 16) + 8);
            else
              v474 = *(_DWORD *)(*((_QWORD *)&v715[0] + 1) + 8);
            if (v474 != 13 && v474 > 6)
              goto LABEL_46;
          }
          if (v13 == v675)
          {
            v276 = (a5 + 1);
            v277 = v683;
            v274 = v666;
            v275 = v668;
LABEL_565:
            sub_1C5D44BD8(__src, v277, v274, v275, a4, v276);
LABEL_646:
            if (v710 >= 0x41 && v709)
              MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
            v709 = (unint64_t)__src[0];
            v710 = __src[1];
            if (v712 >= 0x41 && v711)
              MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
LABEL_648:
            v711 = v703;
            v712 = v704;
            goto LABEL_46;
          }
          __na = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(v683 + 40) + 40) + 272);
          if (!(v13 % v675))
          {
            v475 = v13 / v675;
            v476 = v13 / v675 * v679;
            LODWORD(v697[1]) = v476;
            if (v476 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v697, 0, 0);
              v476 = v697[1];
            }
            else
            {
              v697[0] = 0;
            }
            if ((_DWORD)v679)
            {
              v477 = 0;
              v478 = *((_DWORD *)a4 + 2);
              do
              {
                v479 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v477 >> 6));
                if (v478 < 0x41)
                  v479 = a4;
                if (((*(_QWORD *)v479 >> v477) & 1) != 0)
                {
                  v480 = 1 << (v477 * v475);
                  if (v476 > 0x40)
                    *((_QWORD *)v697[0] + ((v477 * v475) >> 6)) |= v480;
                  else
                    v697[0] = (void *)((unint64_t)v697[0] | v480);
                }
                ++v477;
              }
              while ((_DWORD)v679 != v477);
            }
            if (v675 <= v13)
            {
              v532 = 0;
              v662 = v697[0];
              do
              {
                v701 = v476;
                if (v476 > 0x40)
                {
                  v700 = (void *)operator new[]();
                  memcpy(v700, v662, (((unint64_t)v701 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v700 = v662;
                }
                sub_1C4888094((uint64_t)&v700, v532);
                sub_1C5D44BD8(__src, v683, v666, v668, &v700, (a5 + 1));
                if (v706 >= 0x41 && v705)
                  MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
                v705 = (int8x8_t *)__src[0];
                v706 = __src[1];
                LODWORD(__src[1]) = 0;
                if (v708 >= 0x41 && v707)
                  MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
                v707 = v703;
                v708 = v704;
                if (v701 >= 0x41 && v700)
                  MEMORY[0x1CAA32F9C](v700, 0x1000C8000313F17);
                v533 = v475 + ~v532;
                if (!__na)
                  v533 = v532;
                v534 = v533 * v675;
                llvm::APInt::insertBits((void **)&v709, (const llvm::APInt *)&v705, v533 * v675);
                llvm::APInt::insertBits((void **)&v711, (const llvm::APInt *)&v707, v534);
                ++v532;
              }
              while (v475 != v532);
            }
            if (v476 >= 0x41 && v697[0])
              MEMORY[0x1CAA32F9C](v697[0], 0x1000C8000313F17);
          }
          v664 = v675 / v13;
          if (v675 % v13)
            goto LABEL_46;
          llvm::APIntOps::ScaleBitMask(a4, (const llvm::APInt *)(v679 / v664), (llvm::APInt *)&v700);
          sub_1C5D44BD8(__src, v683, v666, v668, &v700, (a5 + 1));
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          v705 = (int8x8_t *)__src[0];
          v706 = __src[1];
          LODWORD(__src[1]) = 0;
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          v707 = v703;
          v708 = v704;
          v481 = v710;
          if (v710 > 0x40)
          {
            memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
            v481 = v710;
            if (v710)
            {
LABEL_1053:
              v482 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v481;
              if (v481 < 0x41)
              {
LABEL_1054:
                v483 = &v709;
                goto LABEL_1055;
              }
              v483 = (unint64_t *)(v709 + 8 * ((((unint64_t)v481 + 63) >> 6) - 1));
LABEL_1055:
              *v483 &= v482;
              v484 = v712;
              if (v712 > 0x40)
              {
                memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
                v484 = v712;
                if (v712)
                {
LABEL_1057:
                  v485 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v484;
                  if (v484 >= 0x41)
                    v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v484 + 63) >> 6) - 1));
                  goto LABEL_1059;
                }
              }
              else
              {
                v711 = -1;
                if (v712)
                  goto LABEL_1057;
              }
              v485 = 0;
LABEL_1059:
              *v14 &= v485;
              if (!(_DWORD)v679)
              {
LABEL_916:
                if (v701 >= 0x41)
                {
                  v38 = v700;
                  if (v700)
                    goto LABEL_104;
                }
                goto LABEL_46;
              }
              v486 = 0;
              while (1)
              {
                if (*((_DWORD *)a4 + 2) >= 0x41u)
                  v487 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v486 >> 6));
                else
                  v487 = a4;
                if (((*(_QWORD *)v487 >> v486) & 1) == 0)
                  goto LABEL_1079;
                v488 = v679 + ~v486;
                if (!__na)
                  v488 = v486;
                v489 = v488 % v664 * v13;
                llvm::APInt::extractBits((llvm::APInt *)&v705, v13, v489, (unsigned int *)__src);
                llvm::APInt::extractBits((llvm::APInt *)&v707, v13, v489, (unsigned int *)v697);
                v676 = __src[1];
                v684 = (uint64_t *)__src[0];
                v490 = v697[1];
                v491 = (unint64_t)v697[0];
                v492 = v710;
                if (v710 > 0x40)
                {
                  v500 = (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8;
                  v493 = (void *)operator new[]();
                  memcpy(v493, (const void *)v709, v500);
                  v501 = (unint64_t)(v492 + 63) >> 6;
                  v502 = v684;
                  v503 = v493;
                  do
                  {
                    v504 = *v502++;
                    *v503++ &= v504;
                    --v501;
                  }
                  while (v501);
                }
                else
                {
                  v493 = (void *)(v709 & (unint64_t)__src[0]);
                }
                v494 = v712;
                if (v712 > 0x40)
                {
                  v669 = v712 + 63;
                  v495 = (void *)operator new[]();
                  memcpy(v495, (const void *)v711, (v669 >> 3) & 0x3FFFFFF8);
                  v505 = v669 >> 6;
                  v506 = (uint64_t *)v491;
                  v507 = v495;
                  do
                  {
                    v508 = *v506++;
                    *v507++ &= v508;
                    --v505;
                  }
                  while (v505);
                }
                else
                {
                  v495 = (void *)(v711 & v491);
                }
                if (v710 >= 0x41 && v709)
                  MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
                v709 = (unint64_t)v493;
                v710 = v492;
                if (v712 >= 0x41 && v711)
                  MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
                v711 = (unint64_t)v495;
                v712 = v494;
                if (v490 >= 0x41 && v491)
                  MEMORY[0x1CAA32F9C](v491, 0x1000C8000313F17);
                if (v676 >= 0x41 && v684)
                  MEMORY[0x1CAA32F9C](v684, 0x1000C8000313F17);
                if (v710 > 0x40)
                {
                  v496 = 0;
                  v497 = ((unint64_t)v710 + 63) >> 6;
                  do
                  {
                    v135 = v497-- < 1;
                    if (v135)
                      break;
                    v498 = *(_QWORD *)(v709 + 8 * v497);
                    v496 += __clz(v498);
                  }
                  while (!v498);
                  v499 = v710 | 0xFFFFFFC0;
                  if ((v710 & 0x3F) == 0)
                    v499 = 0;
                  if (v496 + v499 != v710)
                    goto LABEL_1079;
                }
                else if (v709)
                {
                  goto LABEL_1079;
                }
                if (v712 > 0x40)
                {
                  v509 = 0;
                  v510 = ((unint64_t)v712 + 63) >> 6;
                  do
                  {
                    v135 = v510-- < 1;
                    if (v135)
                      break;
                    v511 = *(_QWORD *)(v711 + 8 * v510);
                    v509 += __clz(v511);
                  }
                  while (!v511);
                  v512 = v712 | 0xFFFFFFC0;
                  if ((v712 & 0x3F) == 0)
                    v512 = 0;
                  if (v509 + v512 == v712)
                    goto LABEL_916;
                }
                else if (!v711)
                {
                  goto LABEL_916;
                }
LABEL_1079:
                if (++v486 == (_DWORD)v679)
                  goto LABEL_916;
              }
            }
          }
          else
          {
            v709 = -1;
            if (v710)
              goto LABEL_1053;
          }
          v482 = 0;
          goto LABEL_1054;
        default:
          v59 = (v18 - 253);
          if (v59 > 0x34)
            goto LABEL_44;
          if (v18 != 253)
          {
            if (v59 == 40)
            {
              if (v16)
              {
LABEL_520:
                if (*v17)
                  v250 = *v17 - 15 < 0x9C;
                else
                  v250 = (*(_DWORD *)(*((_QWORD *)v17 + 1) + 8) & 0xFE) == 18;
                v401 = !v250;
                v257 = 52;
                if (!v401)
                  v257 = 60;
                if (v13 >= 2 && *(_DWORD *)(*(_QWORD *)(v683 + 24) + v257) == 1)
                {
LABEL_535:
                  v62 = v710;
                  v63 = &v709;
                  v64 = 1;
                  goto LABEL_555;
                }
                goto LABEL_46;
              }
            }
            else if (((1 << (v18 + 3)) & 0x1FFEA000000000) == 0)
            {
              goto LABEL_44;
            }
            *(_OWORD *)__src = *(_OWORD *)(v15 + 80);
            v60 = sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v11, v12);
            if (!v714)
            {
              v61 = v60;
              if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v683 + 24) + 984))(*(_QWORD *)(v683 + 24)) == 199)
              {
                v62 = v710;
                v63 = &v709;
                v64 = v61;
                goto LABEL_555;
              }
            }
            goto LABEL_46;
          }
          v206 = (llvm::Type **)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v683 + 24) + 1688))(*(_QWORD *)(v683 + 24), v15);
          if (*(_WORD *)(v15 + 24) != 253 || (*(_WORD *)(v15 + 26) & 0xC00) != 0 || (v209 = (const void **)v206) == 0)
          {
            if (*(_WORD *)(v713 + 24) == 253 && (~*(unsigned __int16 *)(v713 + 26) & 0xC00) == 0 && !v714)
            {
              *(_OWORD *)__src = *(_OWORD *)(v15 + 80);
              v64 = sub_1C6131328((unsigned __int8 *)__src, v207, (BOOL)v208);
              v62 = v710;
              v63 = &v709;
              goto LABEL_555;
            }
            v258 = *(_QWORD *)(*(_QWORD *)(v15 + 96) + 72);
            if (v258 && (*(_WORD *)(v15 + 26) & 0xC00) == 0)
              llvm::computeKnownBitsFromRangeMetadata(v258, (void **)&v709, v208);
            goto LABEL_46;
          }
          v210 = *v206;
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v206);
          if ((_DWORD)v211 == 1)
          if (PrimitiveSizeInBits != (_DWORD)v679 * v13)
            goto LABEL_46;
          if ((*((_DWORD *)v210 + 2) & 0xFE) == 0x12)
          {
            SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v209, 0);
            if (SplatValue)
            {
              v210 = *(llvm::Type **)SplatValue;
              v209 = (const void **)SplatValue;
            }
          }
          if ((*((_DWORD *)v210 + 2) & 0xFE) == 0x12
            && llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v210 + 2)) == v13)
          {
            v214 = v712;
            if (v712 > 0x40)
            {
              memset((void *)v711, 255, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
              v214 = v712;
              if (v712)
              {
LABEL_465:
                v215 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v214;
                if (v214 >= 0x41)
                  v14 = (unint64_t *)(v711 + 8 * ((((unint64_t)v214 + 63) >> 6) - 1));
LABEL_467:
                *v14 &= v215;
                v216 = v710;
                if (v710 > 0x40)
                {
                  memset((void *)v709, 255, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
                  v216 = v710;
                  if (v710)
                  {
LABEL_469:
                    v217 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v216;
                    if (v216 >= 0x41)
                    {
                      v218 = (unint64_t *)(v709 + 8 * ((((unint64_t)v216 + 63) >> 6) - 1));
                      goto LABEL_471;
                    }
LABEL_470:
                    v218 = &v709;
LABEL_471:
                    *v218 &= v217;
                    if (!(_DWORD)v679)
                      goto LABEL_46;
                    v219 = 0;
                    while (1)
                    {
                      if (*((_DWORD *)a4 + 2) >= 0x41u)
                        v220 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v219 >> 6));
                      else
                        v220 = a4;
                      if (((*(_QWORD *)v220 >> (char)v219) & 1) != 0)
                      {
                        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v209, v219);
                        if (!AggregateElement)
                          goto LABEL_1145;
                        v222 = AggregateElement;
                        v223 = *((unsigned __int8 *)AggregateElement + 16);
                        if (v223 == 17)
                        {
                          if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                            llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::UndefValue *)((char *)AggregateElement + 32), (unsigned int *)__src);
                          else
                            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)AggregateElement + 32, (unsigned int *)__src);
                          if (v712 > 0x40)
                          {
                            v224 = (_QWORD *)v711;
                            v225 = (uint64_t *)__src[0];
                            v226 = ((unint64_t)v712 + 63) >> 6;
                            do
                            {
                              v227 = *v225++;
                              *v224++ &= v227;
                              --v226;
                            }
                            while (v226);
                          }
                          else
                          {
                            v711 &= (unint64_t)__src[0];
                          }
                          v228 = __src[1];
                          v694 = __src[1];
                          if (LODWORD(__src[1]) > 0x40)
                          {
                            v232 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                            v693 = (void *)operator new[]();
                            memcpy(v693, __src[0], v232);
                            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v693);
                            v228 = v694;
                            v231 = (unint64_t)v693;
                          }
                          else
                          {
                            v229 = ~(uint64_t)__src[0];
                            v230 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
                            if (!LODWORD(__src[1]))
                              v230 = 0;
                            v231 = v230 & v229;
                            v693 = (void *)(v230 & v229);
                          }
                          v694 = 0;
                          if (v710 > 0x40)
                          {
                            v233 = (_QWORD *)v709;
                            v234 = ((unint64_t)v710 + 63) >> 6;
                            v235 = (uint64_t *)v231;
                            do
                            {
                              v236 = *v235++;
                              *v233++ &= v236;
                              --v234;
                            }
                            while (v234);
                          }
                          else
                          {
                            v709 &= v231;
                          }
                          if (v228 >= 0x41 && v231)
                            MEMORY[0x1CAA32F9C](v231, 0x1000C8000313F17);
                          if (LODWORD(__src[1]) < 0x41)
                            goto LABEL_516;
                          v237 = (unint64_t)__src[0];
LABEL_514:
                          if (v237)
                            MEMORY[0x1CAA32F9C](v237, 0x1000C8000313F17);
                          goto LABEL_516;
                        }
                        if (v223 != 16)
                        {
LABEL_1145:
                          if (v712 > 0x40)
                            bzero((void *)v711, (((unint64_t)v712 + 63) >> 3) & 0x3FFFFFF8);
                          else
                            v711 = 0;
                          if (v710 > 0x40)
                            bzero((void *)v709, (((unint64_t)v710 + 63) >> 3) & 0x3FFFFFF8);
                          else
                            v709 = 0;
                          goto LABEL_46;
                        }
                        if (v712 > 0x40)
                        {
                          v238 = (_QWORD *)v711;
                          v239 = (uint64_t *)*((_QWORD *)AggregateElement + 3);
                          v240 = ((unint64_t)v712 + 63) >> 6;
                          do
                          {
                            v241 = *v239++;
                            *v238++ &= v241;
                            --v240;
                          }
                          while (v240);
                        }
                        else
                        {
                          v711 &= *((_QWORD *)AggregateElement + 3);
                        }
                        v242 = *((unsigned int *)AggregateElement + 8);
                        v696 = v242;
                        if (v242 > 0x40)
                        {
                          v245 = ((unint64_t)(v242 + 63) >> 3) & 0x3FFFFFF8;
                          v695 = (void *)operator new[]();
                          memcpy(v695, *((const void **)v222 + 3), v245);
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v695);
                          LODWORD(v242) = v696;
                          v237 = (unint64_t)v695;
                        }
                        else
                        {
                          v243 = ~*((_QWORD *)AggregateElement + 3);
                          v244 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v242;
                          if (!(_DWORD)v242)
                            v244 = 0;
                          v237 = v244 & v243;
                          v695 = (void *)(v244 & v243);
                        }
                        v696 = 0;
                        if (v710 > 0x40)
                        {
                          v246 = (_QWORD *)v709;
                          v247 = ((unint64_t)v710 + 63) >> 6;
                          v248 = (uint64_t *)v237;
                          do
                          {
                            v249 = *v248++;
                            *v246++ &= v249;
                            --v247;
                          }
                          while (v247);
                        }
                        else
                        {
                          v709 &= v237;
                        }
                        if (v242 >= 0x41)
                          goto LABEL_514;
                      }
LABEL_516:
                      v219 = (llvm::Type *)((_DWORD)v219 + 1);
                      if ((_DWORD)v219 == (_DWORD)v679)
                        goto LABEL_46;
                    }
                  }
                }
                else
                {
                  v709 = -1;
                  if (v710)
                    goto LABEL_469;
                }
                v217 = 0;
                goto LABEL_470;
              }
            }
            else
            {
              v711 = -1;
              if (v712)
                goto LABEL_465;
            }
            v215 = 0;
            goto LABEL_467;
          }
          v354 = llvm::Type::getPrimitiveSizeInBits(v210);
          if ((_DWORD)v353 == 1)
          if (v13 == v354)
          {
            v355 = *((unsigned __int8 *)v209 + 16);
            if (v355 == 17)
            {
              v521 = (void *)v209[4];
              v520 = (llvm::detail::DoubleAPFloat *)(v209 + 4);
              if (v521 == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::bitcastToAPInt(v520, (unsigned int *)v697);
              else
                llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v520, (unsigned int *)v697);
              v522 = v697[1];
              LODWORD(__src[1]) = v697[1];
              if (LODWORD(v697[1]) > 0x40)
              {
                v555 = (((unint64_t)LODWORD(v697[1]) + 63) >> 3) & 0x3FFFFFF8;
                __src[0] = (void *)operator new[]();
                memcpy(__src[0], v697[0], v555);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)__src);
                v522 = __src[1];
                v524 = __src[0];
              }
              else
              {
                if (LODWORD(v697[1]))
                  v523 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v697[1]);
                else
                  v523 = 0;
                v524 = (void *)(v523 & ~(uint64_t)v697[0]);
              }
              v525 = v697[1];
              if (LODWORD(v697[1]) > 0x40)
              {
                v556 = (((unint64_t)LODWORD(v697[1]) + 63) >> 3) & 0x3FFFFFF8;
                v526 = (void *)operator new[]();
                memcpy(v526, v697[0], v556);
              }
              else
              {
                v526 = v697[0];
              }
              if (v710 >= 0x41 && v709)
                MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
              v709 = (unint64_t)v524;
              v710 = v522;
              if (v712 >= 0x41 && v711)
                MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
              v711 = (unint64_t)v526;
              v712 = v525;
              goto LABEL_714;
            }
            if (v355 == 16)
            {
              v68 = *((unsigned int *)v209 + 8);
              LODWORD(__src[1]) = v68;
              if (v68 > 0x40)
              {
                __src[0] = (void *)operator new[]();
                memcpy(__src[0], v209[3], ((unint64_t)(v68 + 63) >> 3) & 0x3FFFFFF8);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)__src);
                LODWORD(v68) = __src[1];
                v357 = __src[0];
              }
              else
              {
                if ((_DWORD)v68)
                  v356 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v68;
                else
                  v356 = 0;
                v357 = (void *)(v356 & ~(unint64_t)v209[3]);
              }
              v70 = *((unsigned int *)v209 + 8);
              if (v70 > 0x40)
              {
                v72 = (void *)operator new[]();
                memcpy(v72, v209[3], ((unint64_t)(v70 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v72 = (void *)v209[3];
              }
              if (v710 >= 0x41 && v709)
                MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
              v709 = (unint64_t)v357;
LABEL_377:
              v710 = v68;
              if (v712 >= 0x41 && v711)
                MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
              v711 = (unint64_t)v72;
              v712 = v70;
            }
          }
LABEL_46:
          *(_DWORD *)(a6 + 8) = v710;
          *(_QWORD *)a6 = v709;
          *(_DWORD *)(a6 + 24) = v712;
          *(_QWORD *)(a6 + 16) = v711;
          v710 = 0;
          v712 = 0;
          if (v708 >= 0x41 && v707)
            MEMORY[0x1CAA32F9C](v707, 0x1000C8000313F17);
          if (v706 < 0x41)
            goto LABEL_48;
          v256 = (int8x8_t)v705;
          if (!v705)
            goto LABEL_48;
          goto LABEL_529;
      }
    }
LABEL_13:
    v19 = *(_QWORD *)(v713 + 80);
    v20 = *(unsigned int *)(v19 + 32);
    v706 = v20;
    if (v20 > 0x40)
    {
      v705 = (int8x8_t *)operator new[]();
      memcpy(v705, *(const void **)(v19 + 24), ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v705);
      LODWORD(v20) = v706;
      v23 = (int8x8_t)v705;
      v24 = *(unsigned int *)(v19 + 32);
      if (v24 <= 0x40)
      {
        v21 = *(_QWORD *)(v19 + 24);
      }
      else
      {
        v21 = operator new[]();
        memcpy((void *)v21, *(const void **)(v19 + 24), ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      v21 = *(_QWORD *)(v19 + 24);
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      if (!(_DWORD)v20)
        v22 = 0;
      v23 = (int8x8_t)(v22 & ~v21);
      LODWORD(v24) = v20;
    }
    *(_DWORD *)(a6 + 8) = v20;
    *(int8x8_t *)a6 = v23;
    *(_DWORD *)(a6 + 24) = v24;
    *(_QWORD *)(a6 + 16) = v21;
    goto LABEL_48;
  }
  if (v18 == 11)
    goto LABEL_13;
  if (v18 != 12)
    goto LABEL_25;
LABEL_18:
  v25 = *(_QWORD *)(v713 + 80);
  v27 = *(void **)(v25 + 32);
  v26 = (llvm::detail::DoubleAPFloat *)(v25 + 32);
  if (v27 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v26, (unsigned int *)__src);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v26, (unsigned int *)__src);
  v28 = __src[1];
  v706 = __src[1];
  if (LODWORD(__src[1]) <= 0x40)
  {
    v29 = __src[0];
    if (LODWORD(__src[1]))
      v30 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
    else
      v30 = 0;
    v31 = v30 & ~(uint64_t)__src[0];
    v32 = (int)__src[1];
    goto LABEL_24;
  }
  v251 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
  v705 = (int8x8_t *)operator new[]();
  memcpy(v705, __src[0], v251);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v705);
  v28 = v706;
  v31 = (uint64_t)v705;
  v32 = (int)__src[1];
  if (LODWORD(__src[1]) <= 0x40)
  {
    v29 = __src[0];
LABEL_24:
    *(_DWORD *)(a6 + 8) = v28;
    *(_QWORD *)a6 = v31;
    *(_DWORD *)(a6 + 24) = v32;
    *(_QWORD *)(a6 + 16) = v29;
    goto LABEL_48;
  }
  v252 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
  v253 = (void *)operator new[]();
  v254 = __src[0];
  memcpy(v253, __src[0], v252);
  v255 = __src[1];
  *(_DWORD *)(a6 + 8) = v28;
  *(_QWORD *)a6 = v31;
  *(_DWORD *)(a6 + 24) = v32;
  *(_QWORD *)(a6 + 16) = v253;
  if (v255 >= 0x41 && v254)
  {
    v256 = (int8x8_t)v254;
LABEL_529:
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v256, 0x1000C8000313F17);
  }
LABEL_48:
  if (v712 >= 0x41 && v711)
    MEMORY[0x1CAA32F9C](v711, 0x1000C8000313F17);
LABEL_49:
  if (v710 >= 0x41)
  {
    if (v709)
      MEMORY[0x1CAA32F9C](v709, 0x1000C8000313F17);
  }
}

uint64_t sub_1C5D4CF2C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5, unsigned int a6)
{
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  void *v55;
  unsigned int v56;
  int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  BOOL v90;
  unsigned int v91;
  const char *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unsigned int v98;
  int v99;
  int64_t v100;
  uint64_t v101;
  BOOL v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  size_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int64_t v111;
  void *v112;
  unint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  int v119;
  int64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t *v123;
  uint64_t *v124;
  int8x8_t *v125;
  int v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint8x8_t v131;
  __int32 v132;
  uint64_t v133;
  unint64_t v134;
  int8x8_t *v135;
  int8x8_t v136;
  uint8x8_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  const llvm::APInt *v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  _BOOL4 v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  char v154;
  char *v155;
  uint64_t v156;
  char *v157;
  int64_t v158;
  int v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  void *v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  void *__src[2];

  while (1)
  {
    v6 = a5;
    v7 = a4;
    v8 = a3;
    v9 = (_QWORD *)a2;
    v10 = *(unsigned __int16 *)(a2 + 24);
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
    v12 = v11[1];
    v170 = *v11;
    v171 = v12;
    if ((_BYTE)v170)
    {
      if (v170 - 120 >= 0x33)
        goto LABEL_6;
    }
    else if (*(_BYTE *)(v12 + 8) != 19)
    {
LABEL_6:
      v14 = a4[2];
      if (v14 > 0x40)
      {
        v15 = a5;
        v16 = a1;
        v17 = a6;
        v18 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
        a6 = v17;
        v13 = 0;
        if (a6 > 5)
          return v13;
        v70 = v18 == v14;
        a1 = v16;
        v6 = v15;
        if (v70)
          return v13;
      }
      else
      {
        v13 = 0;
        if (a6 > 5 || !*(_QWORD *)a4)
          return v13;
      }
      goto LABEL_12;
    }
    if (a6 > 5)
      return 0;
LABEL_12:
    v19 = v10 + 100;
    if ((v10 - 156) > 0x2D)
      goto LABEL_23;
    if (((1 << v19) & 0x2C0000040000) == 0)
      break;
    v23 = (uint64_t *)v9[4];
    a2 = *v23;
    a3 = v23[1];
    ++a6;
    a4 = v7;
    a5 = v6;
  }
  if (((1 << v19) & 0x38000) != 0)
    goto LABEL_24;
  if (v10 == 156)
  {
    v20 = *(unsigned __int16 *)(*(_QWORD *)v9[4] + 24);
    v21 = v7[2];
    LODWORD(__src[1]) = v21;
    if (v20 == 51)
    {
      if (v21 <= 0x40)
      {
        if (v21)
          v22 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v21);
        else
          v22 = 0;
        __src[0] = v22;
        goto LABEL_48;
      }
      v108 = -1;
      v109 = 1;
LABEL_161:
      llvm::APInt::initSlowCase((llvm::APInt *)__src, v108, v109);
    }
    else
    {
      if (v21 > 0x40)
      {
        v108 = 0;
        v109 = 0;
        goto LABEL_161;
      }
      __src[0] = 0;
    }
LABEL_48:
    if (*((_DWORD *)v6 + 2) >= 0x41u)
    {
      if (*v6)
        MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
    }
    *v6 = __src[0];
    *((_DWORD *)v6 + 2) = __src[1];
    return 1;
  }
LABEL_23:
  if ((v10 - 56) < 2)
  {
LABEL_24:
    LODWORD(__src[1]) = 1;
    __src[0] = 0;
    v169 = 1;
    v168 = 0;
    v24 = (_QWORD *)v9[4];
    v25 = v24[5];
    v26 = v24[6];
    v27 = a6 + 1;
    v28 = a1;
    if (sub_1C5D4CF2C(a1, *v24, v24[1], v7, __src, v27)
      && sub_1C5D4CF2C(v28, v25, v26, v7, &v168, v27))
    {
      v29 = LODWORD(__src[1]);
      if (LODWORD(__src[1]) > 0x40)
      {
        v31 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
        v30 = (void *)operator new[]();
        memcpy(v30, __src[0], v31);
        v32 = (uint64_t *)v168;
        v33 = (unint64_t)(v29 + 63) >> 6;
        v34 = v30;
        do
        {
          v35 = *v32++;
          *v34++ |= v35;
          --v33;
        }
        while (v33);
      }
      else
      {
        v30 = (void *)(v168 | (unint64_t)__src[0]);
      }
      if (*((_DWORD *)v6 + 2) >= 0x41u && *v6)
        MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
      *v6 = v30;
      *((_DWORD *)v6 + 2) = v29;
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
    if (v169 >= 0x41 && v168)
      MEMORY[0x1CAA32F9C](v168, 0x1000C8000313F17);
    if (LODWORD(__src[1]) < 0x41)
      return v13;
    v36 = __src[0];
    if (!__src[0])
      return v13;
    goto LABEL_45;
  }
  if (v10 <= 0x185 && (v10 - 46) > 2)
  {
    if (!(_BYTE)v170)
    {
      if (*(_BYTE *)(v12 + 8) != 19)
        goto LABEL_56;
      return 0;
    }
    if (v170 - 120 < 0x33)
      return 0;
LABEL_56:
    v38 = a6;
    v39 = a1;
    v42 = sub_1C612FE00((llvm::EVT *)&v170, (const char *)a2);
    LODWORD(__src[1]) = v42;
    if (v42 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
    else
      __src[0] = 0;
    if (*((_DWORD *)v6 + 2) >= 0x41u && *v6)
      MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
    *v6 = __src[0];
    v43 = __src[1];
    *((_DWORD *)v6 + 2) = __src[1];
    if (v10 > 204)
    {
      if ((v10 - 205) < 3)
      {
        v44 = (_QWORD *)v9[4];
        v45 = *v44;
        v46 = v44[1];
        v47 = *(_QWORD *)(*v44 + 40) + 16 * v46;
        v49 = *(void **)v47;
        v48 = *(_BYTE **)(v47 + 8);
        if ((_BYTE)v49)
        {
          if (v49 - 120 < 0x33)
            return 0;
LABEL_72:
          __src[0] = v49;
          __src[1] = v48;
          v56 = sub_1C612FE00((llvm::EVT *)__src, v40);
          LODWORD(__src[1]) = 1;
          __src[0] = 0;
          if (v7[2] < v56)
            llvm::APInt::zext((llvm::APInt *)v7, v56, (uint64_t)&v168);
          else
            sub_1C5DD14E0((uint64_t)&v168, (uint64_t)v7);
          v57 = sub_1C5D4CF2C(v39, v45, v46, &v168, __src, v38 + 1);
          v58 = v57;
          if (!v57)
          {
LABEL_75:
            if (v169 >= 0x41 && v168)
              MEMORY[0x1CAA32F9C](v168, 0x1000C8000313F17);
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            return (v58 & 1) != 0;
          }
          llvm::APInt::truncOrSelf((llvm::APInt *)__src, v42, (llvm::APInt *)&v166);
LABEL_176:
          if (*((_DWORD *)v6 + 2) >= 0x41u && *v6)
            MEMORY[0x1CAA32F9C](*v6, 0x1000C8000313F17);
          *v6 = v166;
          *((_DWORD *)v6 + 2) = v167;
          goto LABEL_75;
        }
        if (v48[8] != 19)
          goto LABEL_72;
        return 0;
      }
      if (v10 != 216)
        return 0;
      v85 = (_QWORD *)v9[4];
      v86 = *v85;
      v87 = v85[1];
      *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*v85 + 40) + 16 * v87);
      v88 = sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v40, v41);
      v91 = sub_1C6131328((unsigned __int8 *)&v170, v89, v90);
      v93 = v91;
      if (LOBYTE(__src[0]))
      {
        v94 = (LOBYTE(__src[0]) - 15);
        if (v94 >= 0x9C || v94 >= 0x3C && (LOBYTE(__src[0]) - 120) >= 0x20u)
          return 0;
      }
      else if ((*((_DWORD *)__src[1] + 2) & 0xFE) != 0x12 || *(_BYTE *)(**((_QWORD **)__src[1] + 2) + 8) != 13)
      {
        return 0;
      }
      if ((_BYTE)v170)
      {
        if (v170 - 120 >= 0x20
          && v170 - 2 >= 6
          && v170 - 15 >= 0x3C)
        {
          return 0;
        }
      }
      else
      {
        if ((*(_DWORD *)(v171 + 8) & 0xFE) == 0x12)
          v139 = *(unsigned __int8 *)(**(_QWORD **)(v171 + 16) + 8);
        else
          v139 = *(_DWORD *)(v171 + 8);
        if (v139 != 13)
          return 0;
      }
      v140 = v91 / v88;
      if (v91 % v88)
        return 0;
      v141 = (const llvm::APInt *)sub_1C612FE00((llvm::EVT *)__src, v92);
      llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)v7, v141, (llvm::APInt *)&v168);
      v13 = 1;
      if (v88 > v93)
        goto LABEL_271;
      v142 = 0;
      v143 = v38 + 1;
      while (2)
      {
        v167 = 1;
        v166 = 0;
        v165 = v140;
        if (v140 <= 0x40)
        {
          v144 = 0;
          v145 = 1 << v142;
          goto LABEL_227;
        }
        llvm::APInt::initSlowCase((llvm::APInt *)&v164, 0, 0);
        v145 = 1 << v142;
        if (v165 > 0x40)
        {
          *(_QWORD *)(v164 + 8 * (v142 >> 6)) |= v145;
        }
        else
        {
          v144 = v164;
LABEL_227:
          v164 = v144 | v145;
        }
        llvm::APInt::getSplat(v141, (llvm::APInt *)&v164, (uint64_t)&v162);
        if (v163 > 0x40)
        {
          v146 = (_QWORD *)v162;
          v147 = (uint64_t *)v168;
          v148 = ((unint64_t)v163 + 63) >> 6;
          do
          {
            v149 = *v147++;
            *v146++ &= v149;
            --v148;
          }
          while (v148);
        }
        else
        {
          v162 &= v168;
        }
        if (!sub_1C5D4CF2C(v39, v86, v87, &v162, &v166, v143))
        {
          if (v163 >= 0x41 && v162)
            MEMORY[0x1CAA32F9C](v162, 0x1000C8000313F17);
          if (v165 >= 0x41 && v164)
            MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
          if (v167 >= 0x41 && v166)
            MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
LABEL_189:
          v13 = 0;
LABEL_271:
          if (v169 < 0x41)
            return v13;
          v36 = (void *)v168;
          if (!v168)
            return v13;
LABEL_45:
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
          return v13;
        }
        if (v163 > 0x40)
        {
          v151 = 0;
          do
          {
            v152 = *(_QWORD *)(v162 + v151) & ~*(_QWORD *)((char *)v166 + v151);
            v150 = v152 == 0;
            if (v152)
              v153 = 1;
            else
              v153 = ((((unint64_t)v163 + 63) >> 3) & 0x3FFFFFF8) - 8 == v151;
            v151 += 8;
          }
          while (!v153);
          MEMORY[0x1CAA32F9C](v162, 0x1000C8000313F17);
        }
        else
        {
          v150 = (v162 & ~(unint64_t)v166) == 0;
        }
        if (v165 >= 0x41 && v164)
          MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
        if (v167 >= 0x41 && v166)
          MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
        v154 = ++v142 == v140 || v150;
        if ((v154 & 1) != 0)
        {
          v13 = !v150;
          goto LABEL_271;
        }
        continue;
      }
    }
    if (v10 == 146)
    {
      if (v42)
      {
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v63 = v42;
        while (1)
        {
          v64 = (_DWORD *)(v9[4] + v59);
          v65 = *(_QWORD *)v64;
          v66 = v60 >> 6;
          if (*(_WORD *)(*(_QWORD *)v64 + 24) == 51)
          {
            v67 = (_QWORD *)(*v6 + 8 * v66);
            if (v43 < 0x41)
              v67 = v6;
            *v67 |= 1 << v60;
          }
          else
          {
            v68 = (_QWORD *)(*(_QWORD *)v7 + 8 * v66);
            if (v7[2] < 0x41u)
              v68 = v7;
            if (((*v68 >> v60) & 1) != 0)
            {
              v69 = v64[2];
              if (v62)
              {
                v70 = v62 == v65 && v61 == v69;
                if (!v70)
                  return 0;
              }
              else
              {
                v62 = v65;
                v61 = v69;
              }
            }
          }
          ++v60;
          v59 += 40;
          v13 = 1;
          if (v63 == v60)
            return v13;
        }
      }
      return 1;
    }
    if (v10 == 151)
    {
      v50 = (_QWORD *)v9[4];
      v51 = *v50;
      v52 = v50[1];
      v53 = *(_QWORD *)(*v50 + 40) + 16 * v52;
      v55 = *(void **)v53;
      v54 = *(_BYTE **)(v53 + 8);
      if ((_BYTE)v55)
      {
        if (v55 - 120 < 0x33)
          return 0;
      }
      else if (v54[8] == 19)
      {
        return 0;
      }
      v95 = *(_QWORD *)(v50[5] + 80);
      v96 = (_QWORD *)(v95 + 24);
      if (*(_DWORD *)(v95 + 32) >= 0x41u)
        v96 = (_QWORD *)*v96;
      v97 = (_QWORD *)*v96;
      __src[0] = v55;
      __src[1] = v54;
      v98 = sub_1C612FE00((llvm::EVT *)__src, v40);
      LODWORD(__src[1]) = 1;
      __src[0] = 0;
      if (v7[2] < v98)
        llvm::APInt::zext((llvm::APInt *)v7, v98, (uint64_t)&v166);
      else
        sub_1C5DD14E0((uint64_t)&v166, (uint64_t)v7);
      v169 = v167;
      if (v167 > 0x40)
      {
        v106 = (((unint64_t)v167 + 63) >> 3) & 0x3FFFFFF8;
        v168 = operator new[]();
        memcpy((void *)v168, v166, v106);
      }
      else
      {
        v168 = (unint64_t)v166;
      }
      sub_1C4888094((uint64_t)&v168, v97);
      if (v167 >= 0x41 && v166)
        MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
      v107 = sub_1C5D4CF2C(v39, v51, v52, &v168, __src, v38 + 1);
      v58 = v107;
      if (!v107)
        goto LABEL_75;
      llvm::APInt::extractBits((llvm::APInt *)__src, v42, v97, (unsigned int *)&v166);
      goto LABEL_176;
    }
    if (v10 != 153)
      return 0;
    v169 = v42;
    if (v42 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v168, 0, 0);
      v167 = v42;
      llvm::APInt::initSlowCase((llvm::APInt *)&v166, 0, 0);
      v71 = v169;
    }
    else
    {
      v168 = 0;
      v167 = v42;
      v71 = v42;
      v166 = 0;
    }
    *(_OWORD *)__src = *(_OWORD *)v9[5];
    v72 = v9[10];
    sub_1C612FE00((llvm::EVT *)__src, v40);
    if (v42)
    {
      v74 = 0;
      v75 = *((_DWORD *)v6 + 2);
      v76 = v167;
      do
      {
        v77 = *(unsigned int *)(v72 + 4 * v74);
        if ((v77 & 0x80000000) != 0)
        {
          v80 = 1 << v74;
          if (v75 > 0x40)
            *(_QWORD *)(*v6 + 8 * (v74 >> 6)) |= v80;
          else
            *v6 |= v80;
        }
        else
        {
          if (v7[2] >= 0x41u)
            v78 = (_QWORD *)(*(_QWORD *)v7 + 8 * (v74 >> 6));
          else
            v78 = v7;
          if (((*v78 >> v74) & 1) != 0)
          {
            if ((int)v77 >= (int)v42)
            {
              v81 = v77 - v42;
              v82 = 1 << (v77 - v42);
              if (v76 > 0x40)
                *((_QWORD *)v166 + (v81 >> 6)) |= v82;
              else
                v166 = (void *)((unint64_t)v166 | v82);
            }
            else
            {
              v79 = 1 << v77;
              if (v71 > 0x40)
                *(_QWORD *)(v168 + ((v77 >> 3) & 0x1FFFFFF8)) |= v79;
              else
                v168 |= v79;
            }
          }
        }
        ++v74;
      }
      while (v42 != v74);
    }
    if (v71 > 0x40)
    {
      v99 = 0;
      v100 = ((unint64_t)v71 + 63) >> 6;
      v83 = v168;
      v101 = v100;
      do
      {
        v102 = v101-- < 1;
        if (v102)
          break;
        v103 = *(_QWORD *)(v168 + 8 * v101);
        v99 += __clz(v103);
      }
      while (!v103);
      v104 = v71 | 0xFFFFFFC0;
      if ((v71 & 0x3F) == 0)
        v104 = 0;
      v105 = v99 + v104;
      v84 = v168;
      if (v105 == v71)
        goto LABEL_163;
    }
    else
    {
      v83 = v168;
      if (v168)
      {
        v84 = v168;
        goto LABEL_187;
      }
      v84 = 0;
LABEL_163:
      if (v167 > 0x40)
      {
        v110 = 0;
        v111 = ((unint64_t)v167 + 63) >> 6;
        v112 = v166;
        do
        {
          v102 = v111-- < 1;
          if (v102)
            break;
          v113 = *((_QWORD *)v166 + v111);
          v110 += __clz(v113);
        }
        while (!v113);
        v13 = 0;
        v114 = v167 | 0xFFFFFFC0;
        if ((v167 & 0x3F) == 0)
          v114 = 0;
        if (v110 + v114 != v167)
          goto LABEL_172;
        goto LABEL_269;
      }
      if (!v166)
        goto LABEL_189;
LABEL_172:
      if (v71 < 0x41)
      {
        if (!v84)
          goto LABEL_206;
LABEL_187:
        if (v167 > 0x40)
        {
          v119 = 0;
          v120 = ((unint64_t)v167 + 63) >> 6;
          v112 = v166;
          do
          {
            v102 = v120-- < 1;
            if (v102)
              break;
            v121 = *((_QWORD *)v166 + v120);
            v119 += __clz(v121);
          }
          while (!v121);
          v13 = 0;
          v122 = v167 | 0xFFFFFFC0;
          if ((v167 & 0x3F) == 0)
            v122 = 0;
          if (v119 + v122 == v167)
            goto LABEL_196;
        }
        else
        {
          if (v166)
            goto LABEL_189;
LABEL_196:
          if (v71 < 0x41)
          {
            if (!v84)
              goto LABEL_206;
LABEL_198:
            v123 = (uint64_t *)v9[4];
            v124 = v123 + 1;
            v125 = (int8x8_t *)&v168;
            goto LABEL_207;
          }
          v100 = ((unint64_t)v71 + 63) >> 6;
LABEL_200:
          v126 = 0;
          do
          {
            v102 = v100-- < 1;
            if (v102)
              break;
            v127 = *(_QWORD *)(v83 + 8 * v100);
            v126 += __clz(v127);
          }
          while (!v127);
          v128 = v71 | 0xFFFFFFC0;
          if ((v71 & 0x3F) == 0)
            v128 = 0;
          if (v126 + v128 != v71)
            goto LABEL_198;
LABEL_206:
          v129 = v9[4];
          v123 = (uint64_t *)(v129 + 40);
          v124 = (uint64_t *)(v129 + 48);
          v125 = (int8x8_t *)&v166;
LABEL_207:
          v130 = *v123;
          v73 = *v124;
          LODWORD(__src[1]) = 1;
          __src[0] = 0;
          if (v125[1].i32[0] <= 0x40u)
          {
            v131 = (uint8x8_t)vcnt_s8(*v125);
            v131.i16[0] = vaddlv_u8(v131);
            v132 = v131.i32[0];
            goto LABEL_212;
          }
          v133 = v125[1].u32[0];
          if (!(_DWORD)v133)
            goto LABEL_288;
          v132 = 0;
          v134 = (unint64_t)(v133 + 63) >> 6;
          v135 = (int8x8_t *)*v125;
          do
          {
            v136 = *v135++;
            v137 = (uint8x8_t)vcnt_s8(v136);
            v137.i16[0] = vaddlv_u8(v137);
            v132 += v137.i32[0];
            --v134;
          }
          while (v134);
LABEL_212:
          if (v132 == 1)
          {
            v13 = 1;
          }
          else
          {
LABEL_288:
            if (sub_1C5D4CF2C(v39, v130, v73, v125, __src, v38 + 1))
            {
              v138 = v125[1].u32[0];
              if (v138 >= 0x41)
              {
                v155 = (char *)operator new[]();
                memcpy(v155, *(const void **)v125, ((unint64_t)(v138 + 63) >> 3) & 0x3FFFFFF8);
                v156 = 0;
                v157 = (char *)__src[0];
                v158 = (unint64_t)(v138 + 63) >> 6;
                do
                {
                  *(_QWORD *)&v155[v156] &= *(_QWORD *)&v157[v156];
                  v156 += 8;
                }
                while (8 * v158 != v156);
                v159 = 0;
                do
                {
                  v102 = v158-- < 1;
                  if (v102)
                    break;
                  v160 = *(_QWORD *)&v155[8 * v158];
                  v159 += __clz(v160);
                }
                while (!v160);
                v161 = v138 | 0xFFFFFFC0;
                if ((v138 & 0x3F) == 0)
                  v161 = 0;
                v13 = v159 + v161 == (_DWORD)v138;
                MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
              }
              else
              {
                v13 = ((uint64_t)__src[0] & *(_QWORD *)v125) == 0;
              }
            }
            else
            {
              v13 = 0;
            }
          }
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17, v73);
          if (v167 < 0x41)
            goto LABEL_271;
          v112 = v166;
        }
LABEL_269:
        if (v112)
          MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17, v73);
        goto LABEL_271;
      }
      v100 = ((unint64_t)v71 + 63) >> 6;
    }
    v115 = 0;
    v116 = v100;
    do
    {
      v102 = v116-- < 1;
      if (v102)
        break;
      v117 = *(_QWORD *)(v83 + 8 * v116);
      v115 += __clz(v117);
    }
    while (!v117);
    v118 = v71 | 0xFFFFFFC0;
    if ((v71 & 0x3F) == 0)
      v118 = 0;
    if (v115 + v118 != v71)
      goto LABEL_187;
    goto LABEL_200;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _DWORD *, _QWORD *))(**(_QWORD **)(a1 + 24) + 1704))(*(_QWORD *)(a1 + 24), v9, v8, v7, v6);
}

uint64_t sub_1C5D4DF6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int64_t v14;
  unint64_t v16;
  unsigned int v17;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD v27[2];

  v8 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v10 = *v8;
  v9 = v8[1];
  v27[0] = v10;
  v27[1] = v9;
  v26 = 1;
  v25 = 0;
  v24 = 1;
  v23 = 0;
  if ((_BYTE)v10)
  {
    if (v10 - 120 < 0x33)
      goto LABEL_5;
  }
  else if (*(_BYTE *)(v9 + 8) == 19)
  {
    goto LABEL_5;
  }
  v19 = sub_1C612FE00((llvm::EVT *)v27, (const char *)a2);
  v22 = v19;
  if (v19 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, -1, 1);
    v20 = v21;
    v19 = v22;
  }
  else
  {
    v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
    if (!v19)
      v20 = 0;
  }
  v23 = v20;
  v24 = v19;
LABEL_5:
  v11 = sub_1C5D4CF2C(a1, a2, a3, &v23, &v25, 0);
  if ((_DWORD)v11 && (a4 & 1) == 0)
  {
    if (v26 > 0x40)
    {
      v13 = 0;
      v14 = ((unint64_t)v26 + 63) >> 6;
      do
      {
        if (v14-- < 1)
          break;
        v16 = *(_QWORD *)(v25 + 8 * v14);
        v13 += __clz(v16);
      }
      while (!v16);
      v17 = v26 | 0xFFFFFFC0;
      if ((v26 & 0x3F) == 0)
        v17 = 0;
      v12 = v13 + v17 == v26;
    }
    else
    {
      v12 = v25 == 0;
    }
    v11 = v12;
  }
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v26 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  return v11;
}

_QWORD *sub_1C5D4E110(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  _QWORD *v5;
  int v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  unint64_t v14;
  const char *v15;
  unsigned int v16;
  const char *v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  llvm *v43;
  uint64_t v44;
  void *__src[2];

  v5 = (_QWORD *)a2;
  v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 == 151)
  {
    do
    {
      v8 = (_DWORD *)v5[4];
      v5 = *(_QWORD **)v8;
      v7 = *(unsigned __int16 *)(*(_QWORD *)v8 + 24);
    }
    while (v7 == 151);
    v9 = v8[2];
  }
  else
  {
    v9 = a3;
  }
  v10 = v5[5];
  v11 = v10 + 16 * v9;
  v13 = *(llvm **)v11;
  v12 = *(_QWORD *)(v11 + 8);
  v43 = v13;
  v44 = v12;
  if (v7 != 153)
  {
    v14 = a3 & 0xFFFFFFFF00000000 | v9;
    if (v7 == 156)
    {
      *a4 = 0;
      return v5;
    }
    LODWORD(__src[1]) = 1;
    __src[0] = 0;
    v42 = 1;
    v41 = 0;
    if ((_BYTE)v13)
    {
      if (v13 - 120 >= 0x33)
        goto LABEL_53;
    }
    else if (*(_BYTE *)(v12 + 8) != 19)
    {
LABEL_53:
      v37 = sub_1C612FE00((llvm::EVT *)&v43, (const char *)a2);
      v40 = v37;
      if (v37 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v39, -1, 1);
      }
      else
      {
        if (v37)
          v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v37;
        else
          v38 = 0;
        v39 = (char *)v38;
      }
      if (v42 >= 0x41 && v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
      v41 = (unint64_t)v39;
      v42 = v40;
    }
    if (sub_1C5D4CF2C(a1, (uint64_t)v5, v14, &v41, __src, 0))
    {
      if ((_BYTE)v43)
      {
        if (v43 - 120 < 0x33)
        {
LABEL_26:
          *a4 = 0;
          goto LABEL_47;
        }
      }
      else if (*(_BYTE *)(v44 + 8) == 19)
      {
        goto LABEL_26;
      }
      if (v42 > 0x40)
      {
        v27 = ((unint64_t)v42 + 63) >> 6;
        v24 = v41;
        v25 = (unint64_t)__src[0];
        v28 = (uint64_t *)v41;
        v29 = (uint64_t *)__src[0];
        while (1)
        {
          v31 = *v28++;
          v30 = v31;
          v32 = *v29++;
          if ((v30 & ~v32) != 0)
            break;
          if (!--v27)
            goto LABEL_43;
        }
      }
      else
      {
        v24 = v41;
        v25 = (unint64_t)__src[0];
        if ((v41 & ~(uint64_t)__src[0]) == 0)
        {
LABEL_43:
          *a4 = 0;
          v5 = sub_1C61312D0(a1, v43, v44);
LABEL_47:
          if (v42 >= 0x41 && v41)
            MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          return v5;
        }
      }
      v26 = __src[1];
      if (LODWORD(__src[1]) >= 0x41)
      {
        v33 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
        v34 = (char *)operator new[]();
        memcpy(v34, __src[0], v33);
        v35 = 0;
        v36 = v41;
        do
        {
          *(_QWORD *)&v34[v35] &= *(_QWORD *)(v36 + v35);
          v35 += 8;
        }
        while (v33 != v35);
        v40 = v26;
        v39 = v34;
        *a4 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v39);
        MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      }
      else
      {
        *a4 = __clz(__rbit64(~(v24 & v25)));
      }
      goto LABEL_47;
    }
    if (v42 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    if (LODWORD(__src[1]) >= 0x41 && __src[0])
      MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
    return 0;
  }
  if ((_BYTE)v13)
  {
    if (v13 - 120 < 0x33)
      return 0;
  }
  else if (*(_BYTE *)(v12 + 8) == 19)
  {
    return 0;
  }
  if (!sub_1C636FD00(v5[10], *(const char **)v10, *(_QWORD *)(v10 + 8)))
    return 0;
  *(_OWORD *)__src = *(_OWORD *)v5[5];
  v16 = sub_1C612FE00((llvm::EVT *)__src, v15);
  if (v16)
  {
    v18 = (int *)v5[10];
    v19 = v16;
    while (1)
    {
      v21 = *v18++;
      v20 = v21;
      if ((v21 & 0x80000000) == 0)
        break;
      if (!--v19)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    v20 = 0;
  }
  *(_OWORD *)__src = *(_OWORD *)(v5[5] + 16 * v9);
  v22 = sub_1C612FE00((llvm::EVT *)__src, v17);
  *a4 = v20 % v22;
  return *(_QWORD **)(v5[4] + 40 * (v20 / v22));
}

llvm::APInt *sub_1C5D4E50C(uint64_t a1, uint64_t a2, _BOOL8 a3, llvm::APInt *a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v5 = sub_1C6329368((unsigned int *)v12, a2, a3);
  v6 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v12[0] + 32) + 40), *(_QWORD *)(*(_QWORD *)(v12[0] + 32) + 48), a4, 0, 0);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 80);
  v8 = (llvm::APInt *)(v7 + 24);
  v9 = *(_DWORD *)(v7 + 32);
  v10 = (_QWORD *)(v7 + 24);
  if (v9 >= 0x41)
  {
    if (v9 - llvm::APInt::countLeadingZerosSlowCase(v8) > 0x40)
      return 0;
    v10 = *(_QWORD **)v8;
  }
  if (*v10 >= (unint64_t)v5)
    return 0;
  return v8;
}

uint64_t sub_1C5D4E5B0(uint64_t a1, unsigned int a2, llvm::APInt *a3, int a4, char a5)
{
  uint64_t v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  BOOL v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  _DWORD v28[14];
  uint64_t v29;

  v5 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)(a1 + 24);
  if (v6 == 11 || v6 == 35)
    return v5;
  if (!a1 || v6 != 146)
    return 0;
  v26 = v28;
  v27 = 0x600000000;
  v28[12] = 0;
  v10 = sub_1C5D639D4(a1, a3, (uint64_t)&v26);
  if (!v10)
    goto LABEL_14;
  v13 = v10;
  v14 = *(unsigned __int16 *)(v10 + 24);
  if (v14 != 35 && v14 != 11)
    goto LABEL_14;
  if ((_DWORD)v27)
  {
    v15 = v26;
    v16 = 8 * v27;
    while (!*v15)
    {
      ++v15;
      v16 -= 8;
      if (!v16)
        goto LABEL_20;
    }
    if (!a4)
      goto LABEL_14;
  }
LABEL_20:
  v19 = *(uint64_t **)(v10 + 40);
  v21 = *v19;
  v20 = v19[1];
  v25 = *(_OWORD *)(*(_QWORD *)(v5 + 40) + 16 * a2);
  v22 = sub_1C6131264((unsigned __int8 *)&v25, v11, v12);
  if ((a5 & 1) == 0)
  {
    if (v21 != v22 || (v20 != v23 ? (v24 = v21 == 0) : (v24 = 0), v24))
    {
LABEL_14:
      v5 = 0;
      v17 = 1;
      goto LABEL_15;
    }
  }
  v17 = 0;
  v5 = v13;
LABEL_15:
  if (v26 != v28)
    free(v26);
  if (v17)
    return 0;
  return v5;
}

llvm::APInt *sub_1C5D4E728(uint64_t a1, _BOOL8 a2, llvm::APInt *a3)
{
  uint64_t v4;
  BOOL v5;
  llvm::APInt *v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  llvm::APInt *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  llvm::APInt *v20;
  unsigned int v21;
  unint64_t *v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v28[0] = a1;
  v28[1] = a2;
  v6 = sub_1C5D4E50C(a1, a1, a2, a3);
  if (!v6)
  {
    v8 = sub_1C6329368((unsigned int *)v28, v4, v5);
    v9 = *(_QWORD *)(*(_QWORD *)(v28[0] + 32) + 40);
    if (v9)
    {
      if (*(_WORD *)(v9 + 24) == 146)
      {
        v10 = *(unsigned __int16 *)(v9 + 56);
        if (*(_WORD *)(v9 + 56))
        {
          v11 = 0;
          v6 = 0;
          v12 = *((_DWORD *)a3 + 2);
          v13 = *(_QWORD *)a3;
          v14 = v8;
          while (1)
          {
            v15 = (llvm::APInt *)(v13 + 8 * (v11 >> 6));
            if (v12 < 0x41)
              v15 = a3;
            if (((*(_QWORD *)v15 >> v11) & 1) != 0)
            {
              v16 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 40 * v11);
              v17 = *(unsigned __int16 *)(v16 + 24);
              if (v17 != 35 && v17 != 11)
                return 0;
              v19 = *(_QWORD *)(v16 + 80);
              v20 = (llvm::APInt *)(v19 + 24);
              v21 = *(_DWORD *)(v19 + 32);
              v22 = (unint64_t *)(v19 + 24);
              if (v21 >= 0x41)
              {
                if (v21 - llvm::APInt::countLeadingZerosSlowCase(v20) > 0x40)
                  return 0;
                v22 = *(unint64_t **)v20;
              }
              if (*v22 >= v14)
                return 0;
              if (!v6)
                goto LABEL_24;
              v23 = *((unsigned int *)v6 + 2);
              if (v23 > 0x40)
              {
                v25 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
                while (v25)
                {
                  v26 = *(_QWORD *)(*(_QWORD *)v6 - 8 + v25);
                  v27 = *(_QWORD *)(*(_QWORD *)v20 - 8 + v25);
                  v25 -= 8;
                  v24 = v26 > v27;
                  if (v26 != v27)
                    goto LABEL_22;
                }
                goto LABEL_25;
              }
              v24 = *(_QWORD *)v6 > *(_QWORD *)v20;
LABEL_22:
              if (v24)
LABEL_24:
                v6 = v20;
            }
LABEL_25:
            if (++v11 == v10)
              return v6;
          }
        }
        return 0;
      }
    }
  }
  return v6;
}

llvm::APInt *sub_1C5D4E8BC(uint64_t a1, uint64_t a2, _BOOL8 a3, llvm::APInt *a4)
{
  uint64_t v5;
  BOOL v6;
  llvm::APInt *v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  llvm::APInt *v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v28[0] = a2;
  v28[1] = a3;
  v7 = sub_1C5D4E50C(a1, a2, a3, a4);
  if (!v7)
  {
    v9 = sub_1C6329368((unsigned int *)v28, v5, v6);
    v10 = *(_QWORD *)(*(_QWORD *)(v28[0] + 32) + 40);
    if (v10)
    {
      if (*(_WORD *)(v10 + 24) == 146)
      {
        v11 = *(unsigned __int16 *)(v10 + 56);
        if (*(_WORD *)(v10 + 56))
        {
          v12 = 0;
          v13 = 0;
          v14 = *((_DWORD *)a4 + 2);
          v15 = *(_QWORD *)a4;
          v16 = v9;
          while (1)
          {
            v17 = (llvm::APInt *)(v15 + 8 * (v12 >> 6));
            if (v14 < 0x41)
              v17 = a4;
            if (((*(_QWORD *)v17 >> v12) & 1) == 0)
              goto LABEL_22;
            v18 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 40 * v12);
            v19 = *(unsigned __int16 *)(v18 + 24);
            if (v19 != 35 && v19 != 11)
              return 0;
            v21 = *(_QWORD *)(v18 + 80);
            v7 = (llvm::APInt *)(v21 + 24);
            v22 = *(_DWORD *)(v21 + 32);
            v23 = (unint64_t *)(v21 + 24);
            if (v22 >= 0x41)
            {
              if (v22 - llvm::APInt::countLeadingZerosSlowCase(v7) > 0x40)
                return 0;
              v23 = *(unint64_t **)v7;
            }
            if (*v23 >= v16)
              return 0;
            if (v13)
            {
              v24 = v13[2];
              if (v24 > 0x40)
              {
                v25 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
                while (v25)
                {
                  v26 = *(_QWORD *)(*(_QWORD *)v13 - 8 + v25);
                  v27 = *(_QWORD *)(*(_QWORD *)v7 - 8 + v25);
                  v25 -= 8;
                  if (v26 != v27)
                  {
                    if (v26 <= v27)
                      goto LABEL_23;
                    break;
                  }
                }
LABEL_22:
                v7 = (llvm::APInt *)v13;
                goto LABEL_23;
              }
              if (*(_QWORD *)v13 >= *(_QWORD *)v7)
                goto LABEL_22;
            }
LABEL_23:
            ++v12;
            v13 = (unsigned int *)v7;
            if (v12 == v11)
              return v7;
          }
        }
        return 0;
      }
    }
  }
  return v7;
}

uint64_t sub_1C5D4EA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v6 = *(unsigned __int16 *)(a2 + 24);
  if ((_DWORD)v6 == 52)
    return 1;
  if (a6 > 5)
    return 0;
  if (v6 > 0x33)
    goto LABEL_9;
  if (((1 << v6) & 0x1800001800) != 0)
    return 1;
  if (v6 == 51)
    return a5;
LABEL_9:
  if ((_DWORD)v6 == 146)
  {
    v12 = *(unsigned __int16 *)(a2 + 56);
    if (!*(_WORD *)(a2 + 56))
      return 1;
    v13 = 0;
    v14 = 0;
    v15 = (a6 + 1);
    do
    {
      if (*(_DWORD *)(a4 + 8) >= 0x41u)
        v16 = (_QWORD *)(*(_QWORD *)a4 + 8 * (v14 >> 6));
      else
        v16 = (_QWORD *)a4;
      if (((*v16 >> v14) & 1) != 0)
      {
        result = sub_1C6368CA4(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + v13), *(_QWORD *)(*(_QWORD *)(a2 + 32) + v13 + 8), a5, v15);
        if (!(_DWORD)result)
          break;
      }
      ++v14;
      v13 += 40;
      result = 1;
    }
    while (v12 != v14);
  }
  else
  {
    if (v6 <= 0x185 && (v6 - 46) > 2)
      return 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 1680))(*(_QWORD *)(a1 + 24), a2, a3, a4, a1, a5, a6);
  }
  return result;
}

uint64_t sub_1C5D4EBA4(uint64_t a1, uint64_t a2, _BOOL8 a3, uint64_t a4, _BOOL8 a5)
{
  uint64_t v10;
  int v12;
  int64_t v13;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unsigned int v21;
  unint64_t v22;
  char *v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t *v31;
  _BOOL4 v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unint64_t v36;
  _QWORD *v37;
  BOOL v38;
  char v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  uint64_t *v45;
  unsigned int v46;
  const void *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  void *__src;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  unsigned int v61;

  if (sub_1C6368AD4(a4))
    return 0;
  sub_1C6368768(a1, a4, a5, 0, (uint64_t)&__src);
  if (v57 > 0x40)
  {
    v12 = 0;
    v13 = ((unint64_t)v57 + 63) >> 6;
    do
    {
      if (v13-- < 1)
        break;
      v15 = *((_QWORD *)__src + v13);
      v12 += __clz(v15);
    }
    while (!v15);
    v16 = v57 | 0xFFFFFFC0;
    if ((v57 & 0x3F) == 0)
      v16 = 0;
    if (v12 + v16 == v57)
      goto LABEL_13;
  }
  else if (!__src)
  {
    goto LABEL_13;
  }
  sub_1C6368768(a1, a2, a3, 0, (uint64_t)&v52);
  v51 = 0;
  v26 = v53;
  v61 = v53;
  if (v53 > 0x40)
  {
    v60 = (_QWORD *)operator new[]();
    memcpy(v60, v52, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v60);
    LODWORD(v26) = v61;
    v28 = v60;
  }
  else
  {
    if (v53)
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
    else
      v27 = 0;
    v28 = (_QWORD *)(v27 & ~(unint64_t)v52);
  }
  v48 = v26;
  v47 = v28;
  v29 = v57;
  v61 = v57;
  if (v57 > 0x40)
  {
    v42 = (((unint64_t)v57 + 63) >> 3) & 0x3FFFFFF8;
    v60 = (_QWORD *)operator new[]();
    memcpy(v60, __src, v42);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v60);
    v29 = v61;
    v31 = v60;
  }
  else
  {
    if (v57)
      v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
    else
      v30 = 0;
    v31 = (uint64_t *)(v30 & ~(unint64_t)__src);
  }
  v46 = v29;
  v45 = v31;
  llvm::APInt::uadd_ov(&v47, &v45, &v51, (uint64_t)&v49);
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  if (v29 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  if (v26 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  v32 = v51;
  if (v55 >= 0x41 && v54)
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  if (v53 >= 0x41 && v52)
    MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  if (!v32)
    goto LABEL_40;
LABEL_13:
  if (*(_WORD *)(a2 + 24) != 64 || !a3)
    goto LABEL_41;
  LODWORD(v18) = v57;
  v53 = v57;
  if (v57 <= 0x40)
  {
    v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
    if (!v57)
      LOBYTE(v19) = 0;
    LOBYTE(v20) = v19 & ~(_BYTE)__src;
    goto LABEL_22;
  }
  v40 = (((unint64_t)v57 + 63) >> 3) & 0x3FFFFFF8;
  v52 = (void *)operator new[]();
  memcpy(v52, __src, v40);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v52);
  v18 = v53;
  v20 = (char *)v52;
  if (v53 <= 0x40)
  {
LABEL_22:
    v20 = (char *)(v20 & 1);
    goto LABEL_23;
  }
  *(_QWORD *)v52 &= 1uLL;
  bzero(v20 + 8, (((unint64_t)(v18 + 63) >> 3) - 8) & 0xFFFFFFF8);
LABEL_23:
  v21 = v57;
  v53 = v57;
  if (v57 > 0x40)
  {
    v41 = (((unint64_t)v57 + 63) >> 3) & 0x3FFFFFF8;
    v52 = (void *)operator new[]();
    memcpy(v52, __src, v41);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v52);
    v21 = v53;
    v23 = (char *)v52;
  }
  else
  {
    if (v57)
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
    else
      v22 = 0;
    v23 = (char *)(v22 & ~(unint64_t)__src);
  }
  if (v18 > 0x40)
    v24 = memcmp(v20, v23, (((unint64_t)v18 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v24 = v20 == v23;
  v25 = v24;
  if (v21 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v18 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  if ((v25 & 1) != 0)
    goto LABEL_40;
LABEL_41:
  if (*(_WORD *)(a4 + 24) == 64 && a5)
  {
    sub_1C6368768(a1, a2, a3, 0, (uint64_t)&v52);
    LODWORD(a1) = v53;
    v61 = v53;
    if (v53 > 0x40)
    {
      v43 = (((unint64_t)v53 + 63) >> 3) & 0x3FFFFFF8;
      v60 = (_QWORD *)operator new[]();
      memcpy(v60, v52, v43);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v60);
      a1 = v61;
      v34 = v60;
      if (v61 > 0x40)
      {
        *v60 &= 1uLL;
        bzero(v34 + 1, (((unint64_t)(a1 + 63) >> 3) - 8) & 0xFFFFFFF8);
LABEL_74:
        v35 = v53;
        v61 = v53;
        if (v53 > 0x40)
        {
          v44 = (((unint64_t)v53 + 63) >> 3) & 0x3FFFFFF8;
          v60 = (_QWORD *)operator new[]();
          memcpy(v60, v52, v44);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v60);
          v35 = v61;
          v37 = v60;
        }
        else
        {
          if (v53)
            v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
          else
            v36 = 0;
          v37 = (_QWORD *)(v36 & ~(unint64_t)v52);
        }
        if (a1 > 0x40)
          v38 = memcmp(v34, v37, (((unint64_t)a1 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v38 = v34 == v37;
        v39 = v38;
        if (v35 >= 0x41 && v37)
          MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
        if (a1 >= 0x41 && v34)
          MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
        if (v55 >= 0x41 && v54)
          MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
        if (v53 >= 0x41 && v52)
          MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
        if ((v39 & 1) == 0)
          goto LABEL_43;
LABEL_40:
        v10 = 0;
        goto LABEL_44;
      }
    }
    else
    {
      if (v53)
        v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      else
        LOBYTE(v33) = 0;
      LOBYTE(v34) = v33 & ~(_BYTE)v52;
    }
    v34 = (_QWORD *)(v34 & 1);
    goto LABEL_74;
  }
LABEL_43:
  v10 = 1;
LABEL_44:
  if (v59 >= 0x41 && v58)
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
  if (v57 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v10;
}

BOOL sub_1C5D4F2E0(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t **v18;
  unsigned int v19;
  _BOOL8 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  llvm::APInt *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint8x8_t v31;
  uint64_t v32;
  int v33;
  int8x8_t v34;
  uint8x8_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  llvm::APInt *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint8x8_t v44;
  unsigned int v46;
  uint8x8_t v47;
  __int32 v48;
  unint64_t v49;
  int8x8_t *v50;
  int8x8_t v51;
  uint8x8_t v52;
  unsigned int v53;
  uint8x8_t v54;
  __int32 v55;
  unint64_t v56;
  int8x8_t *v57;
  int8x8_t v58;
  uint8x8_t v59;
  int8x8_t v60;
  unsigned int v61;
  int8x8_t *v62;
  unsigned int v63;
  __int128 v64;

  v64 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v6 = sub_1C6131328((unsigned __int8 *)&v64, a2, a3);
  v7 = v6;
  v8 = *(unsigned __int16 *)(a2 + 24);
  switch(v8)
  {
    case 11:
LABEL_4:
      v9 = *(_QWORD *)(a2 + 80);
      v10 = (llvm::APInt *)(v9 + 24);
      v11 = *(_DWORD *)(v9 + 32);
      if (v11 >= v6)
      {
        if (v11 > v6)
          llvm::APInt::trunc(v10, v6, (llvm::APInt *)&v60);
        else
          sub_1C5DD14E0((uint64_t)&v60, (uint64_t)v10);
      }
      else
      {
        llvm::APInt::zext(v10, v6, (uint64_t)&v60);
      }
      if (v61 <= 0x40)
      {
        if (v60)
          return (*(_QWORD *)&v60 & (*(_QWORD *)&v60 - 1)) == 0;
        else
          return 0;
      }
      v32 = 0;
      v33 = 0;
      v34 = v60;
      do
      {
        v35 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(_QWORD *)&v60 + v32));
        v35.i16[0] = vaddlv_u8(v35);
        v33 += v35.i32[0];
        v32 += 8;
      }
      while (((((unint64_t)v61 + 63) >> 3) & 0x3FFFFFF8) != v32);
      v20 = v33 == 1;
LABEL_47:
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v34, 0x1000C8000313F17);
      return v20;
    case 175:
      v12 = sub_1C5D4F7E8(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, 0);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 80);
        v14 = (_QWORD *)(v13 + 24);
        v15 = *(_DWORD *)(v13 + 32);
        if (v15 < 0x41)
          goto LABEL_10;
        if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v13 + 24)) <= 0x40)
        {
          v14 = (_QWORD *)*v14;
LABEL_10:
          if (*v14 == 1)
            return 1;
        }
      }
      v8 = *(unsigned __int16 *)(a2 + 24);
      break;
    case 35:
      goto LABEL_4;
  }
  if (v8 == 177)
  {
    v16 = sub_1C5D4F7E8(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, 0);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 80);
      v18 = (unint64_t **)(v17 + 24);
      v19 = *(_DWORD *)(v17 + 32);
      if (v19 > 0x40)
      {
        if ((((*v18)[(v19 - 1) >> 6] >> (v19 - 1)) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase(v18) == v19 - 1)
        {
          return 1;
        }
      }
      else
      {
        v20 = 1;
        if (*v18 == (unint64_t *)(1 << (v19 - 1)))
          return v20;
      }
    }
  }
  v21 = *(unsigned __int16 *)(a2 + 24);
  if (v21 == 146)
  {
    if (!*(_WORD *)(a2 + 56))
      return 1;
    v22 = *(_QWORD *)(a2 + 32);
    v23 = v22 + 40 * *(unsigned __int16 *)(a2 + 56);
    while (1)
    {
      v24 = *(unsigned __int16 *)(*(_QWORD *)v22 + 24);
      if (v24 != 35 && v24 != 11)
        break;
      v26 = *(_QWORD *)(*(_QWORD *)v22 + 80);
      v27 = (llvm::APInt *)(v26 + 24);
      v28 = *(_DWORD *)(v26 + 32);
      if (v28 >= v7)
      {
        if (v28 > v7)
          llvm::APInt::trunc(v27, v7, (llvm::APInt *)&v60);
        else
          sub_1C5DD14E0((uint64_t)&v60, (uint64_t)v27);
      }
      else
      {
        llvm::APInt::zext(v27, v7, (uint64_t)&v60);
      }
      if (v61 > 0x40)
      {
        v29 = 0;
        v30 = 0;
        do
        {
          v31 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(_QWORD *)&v60 + v29));
          v31.i16[0] = vaddlv_u8(v31);
          v30 += v31.i32[0];
          v29 += 8;
        }
        while (((((unint64_t)v61 + 63) >> 3) & 0x3FFFFFF8) != v29);
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v60, 0x1000C8000313F17);
        if (v30 != 1)
          break;
      }
      else if (!*(_QWORD *)&v60 || (*(_QWORD *)&v60 & (*(_QWORD *)&v60 - 1)) != 0)
      {
        break;
      }
      v22 += 40;
      if (v22 == v23)
        return 1;
    }
    v21 = *(unsigned __int16 *)(a2 + 24);
  }
  if (v21 == 156)
  {
    v36 = **(_QWORD **)(a2 + 32);
    v37 = *(unsigned __int16 *)(v36 + 24);
    if (v37 == 35 || v37 == 11)
    {
      v39 = *(_QWORD *)(v36 + 80);
      v40 = (llvm::APInt *)(v39 + 24);
      v41 = *(_DWORD *)(v39 + 32);
      if (v41 >= v7)
      {
        if (v41 > v7)
          llvm::APInt::trunc(v40, v7, (llvm::APInt *)&v60);
        else
          sub_1C5DD14E0((uint64_t)&v60, (uint64_t)v40);
      }
      else
      {
        llvm::APInt::zext(v40, v7, (uint64_t)&v60);
      }
      if (v61 > 0x40)
      {
        v42 = 0;
        v43 = 0;
        do
        {
          v44 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(_QWORD *)&v60 + v42));
          v44.i16[0] = vaddlv_u8(v44);
          v43 += v44.i32[0];
          v42 += 8;
        }
        while (((((unint64_t)v61 + 63) >> 3) & 0x3FFFFFF8) != v42);
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v60, 0x1000C8000313F17);
        if (v43 != 1)
          goto LABEL_68;
      }
      else if (!*(_QWORD *)&v60 || (*(_QWORD *)&v60 & (*(_QWORD *)&v60 - 1)) != 0)
      {
        goto LABEL_68;
      }
      return 1;
    }
  }
LABEL_68:
  sub_1C6368768(a1, a2, a3, 0, (uint64_t)&v60);
  v46 = v61;
  if (v61 > 0x40)
  {
    v48 = 0;
    v49 = ((unint64_t)v61 + 63) >> 6;
    v50 = (int8x8_t *)v60;
    do
    {
      v51 = *v50++;
      v52 = (uint8x8_t)vcnt_s8(v51);
      v52.i16[0] = vaddlv_u8(v52);
      v48 += v52.i32[0];
      --v49;
    }
    while (v49);
  }
  else
  {
    v47 = (uint8x8_t)vcnt_s8(v60);
    v47.i16[0] = vaddlv_u8(v47);
    v48 = v47.i32[0];
  }
  if (v61 - v48 == 1)
  {
    v53 = v63;
    if (v63 > 0x40)
    {
      v55 = 0;
      v56 = ((unint64_t)v63 + 63) >> 6;
      v57 = v62;
      do
      {
        v58 = *v57++;
        v59 = (uint8x8_t)vcnt_s8(v58);
        v59.i16[0] = vaddlv_u8(v59);
        v55 += v59.i32[0];
        --v56;
      }
      while (v56);
    }
    else
    {
      v54 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
      v54.i16[0] = vaddlv_u8(v54);
      v55 = v54.i32[0];
    }
    v20 = v55 == 1;
  }
  else
  {
    v20 = 0;
    v53 = v63;
  }
  if (v53 >= 0x41 && v62)
  {
    MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
    v46 = v61;
  }
  if (v46 >= 0x41)
  {
    v34 = v60;
    if (v60)
      goto LABEL_47;
  }
  return v20;
}

uint64_t sub_1C5D4F7E8(uint64_t a1, unsigned int a2, _BOOL4 a3, char a4)
{
  uint64_t v4;
  int v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 EVT;
  uint64_t v14;
  int v15;
  unsigned __int8 *v17;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  BOOL v32;
  __int128 v33;
  void *v34;
  uint64_t v35;
  _DWORD v36[14];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = *(unsigned __int16 *)(a1 + 24);
  if (v5 == 11 || v5 == 35)
    return v4;
  if (v5 == 156)
  {
    v10 = *(_QWORD *)(a1 + 40);
    v12 = *(void **)v10;
    v11 = *(_QWORD *)(v10 + 8);
    v34 = v12;
    v35 = v11;
    if ((_BYTE)v12)
    {
      EVT = sub_1C47F37A0((unsigned __int8 *)&v34);
      v14 = 0;
    }
    else
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v11 + 24), 0, a3);
    }
    v4 = **(_QWORD **)(a1 + 32);
    v15 = *(unsigned __int16 *)(v4 + 24);
    if (v15 == 35 || v15 == 11)
    {
      if ((a4 & 1) != 0)
        return v4;
      v17 = *(unsigned __int8 **)(v4 + 40);
      if (*v17 == EVT && (v14 == *((_QWORD *)v17 + 1) || EVT != 0))
        return v4;
    }
  }
  if (!a1 || *(_WORD *)(a1 + 24) != 146)
    return 0;
  v34 = v36;
  v35 = 0x600000000;
  v36[12] = 0;
  v20 = sub_1C6367A48(a1, (uint64_t)&v34);
  if (!v20)
    goto LABEL_32;
  v4 = v20;
  v23 = *(unsigned __int16 *)(v20 + 24);
  if (v23 != 35 && v23 != 11)
    goto LABEL_32;
  if ((_DWORD)v35)
  {
    v24 = v34;
    v25 = 8 * v35;
    while (!*v24)
    {
      ++v24;
      v25 -= 8;
      if (!v25)
        goto LABEL_37;
    }
    if (!a3)
      goto LABEL_32;
  }
LABEL_37:
  v27 = *(uint64_t **)(v20 + 40);
  v29 = *v27;
  v28 = v27[1];
  v33 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * a2);
  v30 = sub_1C6131264((unsigned __int8 *)&v33, v21, v22);
  if ((a4 & 1) == 0)
  {
    if (v29 != v30 || (v28 != v31 ? (v32 = v29 == 0) : (v32 = 0), v32))
    {
LABEL_32:
      v4 = 0;
      v26 = 1;
      goto LABEL_33;
    }
  }
  v26 = 0;
LABEL_33:
  if (v34 != v36)
    free(v34);
  if (v26)
    return 0;
  return v4;
}

unint64_t sub_1C5D4F9D8(uint64_t a1, uint64_t a2, _BOOL8 a3, unsigned int *a4, uint64_t a5)
{
  _BOOL8 v7;
  uint64_t v8;
  llvm::Type *v10;
  const char *v11;
  BOOL v12;
  int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  const char *v30;
  llvm::Type *v31;
  const char *v32;
  unsigned int v33;
  unsigned int v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  llvm::APInt *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::APInt *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::APInt *v76;
  unsigned int v77;
  unsigned int ExtendedSizeInBits;
  const char *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  llvm::APInt *v83;
  llvm::APInt *v84;
  unint64_t v85;
  unsigned int v86;
  _QWORD *v87;
  llvm::APInt *v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  void *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  uint64_t v123;
  _QWORD **v124;
  unsigned int v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int64_t v133;
  void *v134;
  BOOL v135;
  unint64_t v136;
  unsigned int v137;
  unsigned int v138;
  BOOL v139;
  const char *v140;
  BOOL v141;
  unsigned int v142;
  unsigned int v143;
  const char *v144;
  void *v145;
  int v146;
  uint64_t v147;
  unint64_t **v148;
  unsigned int v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  void *v154;
  unsigned int v155;
  unsigned int v156;
  _BOOL4 v157;
  char *v158;
  size_t v159;
  _QWORD *v160;
  void **v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  _BOOL4 v165;
  char *v166;
  int v167;
  int64_t v168;
  unint64_t v169;
  unsigned int v170;
  unsigned int v171;
  void *v172;
  int v173;
  int64_t v174;
  unint64_t v175;
  unsigned int v176;
  _BOOL4 v177;
  unsigned int *v178;
  _QWORD *v179;
  uint64_t v180;
  _BOOL8 v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  __int128 v186;
  uint64_t v187;
  llvm::Constant *v188;
  uint64_t v189;
  const char *v190;
  unint64_t PrimitiveSizeInBits;
  llvm::Type *v192;
  unsigned int *v193;
  llvm::UndefValue *AggregateElement;
  int v195;
  unsigned int v196;
  llvm::detail::DoubleAPFloat *v197;
  void *v198;
  unsigned int v199;
  size_t v200;
  _QWORD *v201;
  void **v202;
  unsigned int v203;
  int v204;
  const char *v205;
  signed int v206;
  const char *v207;
  llvm::Type *v208;
  uint64_t v209;
  _QWORD *v210;
  int v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  BOOL v216;
  int v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  BOOL v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  unint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int64_t v242;
  void *v243;
  unint64_t v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  size_t v257;
  int v258;
  int64_t v259;
  unint64_t v260;
  unsigned int v261;
  size_t v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int *v268;
  int v269;
  unsigned int v270;
  int v271;
  int64_t v272;
  void *v273;
  unint64_t v274;
  unsigned int v275;
  unsigned int v276;
  unint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  void *v298;
  unsigned int v299;
  void *__src[2];
  void *v301;
  unsigned int v302;
  void *v303;
  unsigned int v304;
  __int128 v305;
  uint64_t v306;
  _BOOL8 v307;

  v7 = a3;
  v8 = a2;
  v306 = a2;
  v307 = a3;
  v305 = *(_OWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  v10 = sub_1C6131328((unsigned __int8 *)&v305, a2, a3);
  v13 = *(unsigned __int16 *)(v8 + 24);
  v14 = v13 == 35 || v13 == 11;
  if (v14)
    return sub_1C4959174((llvm::APInt *)(*(_QWORD *)(v8 + 80) + 24));
  if (a5 > 5)
    return 1;
  v18 = (uint64_t)v10;
  v19 = a4[2];
  if (v19 > 0x40)
  {
    v10 = (llvm::Type *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
    if ((_DWORD)v10 == (_DWORD)v19)
      return 1;
  }
  else if (!*(_QWORD *)a4)
  {
    return 1;
  }
  if ((_BYTE)v305)
  {
    if (v305 - 120 < 0x33)
      return 1;
  }
  else if (*(_BYTE *)(*((_QWORD *)&v305 + 1) + 8) == 19)
  {
    return 1;
  }
  v20 = 1;
  if (v13 <= 137)
  {
    switch(v13)
    {
      case '5':
        v204 = sub_1C6368B30(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), (a5 + 1));
        v206 = sub_1C6131A64((unsigned int *)&v306);
        if ((_DWORD)v205 == 1)
        v208 = sub_1C6131A64(*(unsigned int **)(v306 + 32));
        if ((_DWORD)v207 == 1)
        v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v306 + 32) + 40) + 80);
        v210 = (_QWORD *)(v209 + 24);
        if (*(_DWORD *)(v209 + 32) >= 0x41u)
          v210 = (_QWORD *)*v210;
        v211 = v206 + v206 * (*(_DWORD *)v210 - (unint64_t)v208 / v206) + v204;
        if (v211 >= v206)
          v211 = v206;
        return v211 & ~(v211 >> 31);
      case '6':
      case '7':
      case ';':
      case '<':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
        goto LABEL_267;
      case '8':
      case 'D':
        v36 = (a5 + 1);
        v37 = sub_1C5D4F9D8(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), a4, v36);
        if ((_DWORD)v37 == 1)
          return 1;
        v38 = v37;
        v39 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), (llvm::APInt *)a4, 0, 0);
        if (!v39)
          goto LABEL_217;
        v40 = *(_QWORD *)(v39 + 80);
        v41 = *(_DWORD *)(v40 + 32);
        if (!v41)
          goto LABEL_205;
        v42 = (llvm::APInt *)(v40 + 24);
        if (v41 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v42) != v41)
            goto LABEL_217;
        }
        else if (*(_QWORD *)v42 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v41)
        {
          goto LABEL_217;
        }
LABEL_205:
        sub_1C5D44BD8(a1, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), (llvm::APInt *)a4, v36, (uint64_t)__src);
        v156 = __src[1];
        if (LODWORD(__src[1]) > 0x40)
        {
          v159 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v160 = (_QWORD *)operator new[]();
          v158 = (char *)__src[0];
          memcpy(v160, __src[0], v159);
          *v160 |= 1uLL;
          v304 = v156;
          v303 = v160;
          LODWORD(v159) = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v303);
          MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
          if ((_DWORD)v159 != v156)
            goto LABEL_211;
        }
        else if (LODWORD(__src[1]))
        {
          v157 = 0;
          v158 = (char *)__src[0];
          v16 = v18;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) == 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
            goto LABEL_214;
LABEL_211:
          v161 = (void **)&v158[8 * ((v156 - 1) >> 6)];
          if (v156 < 0x41)
            v161 = __src;
          v157 = (((unint64_t)*v161 >> (v156 - 1)) & 1) == 0;
          v16 = v38;
LABEL_214:
          if (v302 >= 0x41 && v301)
            MEMORY[0x1CAA32F9C](v301, 0x1000C8000313F17);
          if (v156 >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (!v157)
            return v16;
LABEL_217:
          v162 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), a4, v36);
          if (v162 == 1)
            return 1;
          if (v162 >= v38)
            v163 = v38;
          else
            v163 = v162;
          return v163 - 1;
        }
        v157 = 0;
        v16 = v18;
        goto LABEL_214;
      case '9':
        v71 = (a5 + 1);
        v72 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 48), a4, v71);
        if ((_DWORD)v72 == 1)
          return 1;
        v73 = v72;
        v74 = sub_1C5D4E5B0(**(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), (llvm::APInt *)a4, 0, 0);
        if (!v74)
          goto LABEL_328;
        v75 = *(_QWORD *)(v74 + 80);
        v76 = (llvm::APInt *)(v75 + 24);
        v77 = *(_DWORD *)(v75 + 32);
        if (v77 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v76) != v77)
            goto LABEL_328;
        }
        else if (*(_QWORD *)v76)
        {
          goto LABEL_328;
        }
        sub_1C5D44BD8(a1, *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), (llvm::APInt *)a4, v71, (uint64_t)__src);
        v164 = __src[1];
        if (LODWORD(__src[1]) > 0x40)
        {
          v200 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v201 = (_QWORD *)operator new[]();
          v166 = (char *)__src[0];
          memcpy(v201, __src[0], v200);
          *v201 |= 1uLL;
          v304 = v164;
          v303 = v201;
          LODWORD(v200) = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v303);
          MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
          if ((_DWORD)v200 != v164)
            goto LABEL_322;
        }
        else if (LODWORD(__src[1]))
        {
          v165 = 0;
          v166 = (char *)__src[0];
          v16 = v18;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) == 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
            goto LABEL_325;
LABEL_322:
          v202 = (void **)&v166[8 * ((v164 - 1) >> 6)];
          if (v164 < 0x41)
            v202 = __src;
          v165 = (((unint64_t)*v202 >> (v164 - 1)) & 1) == 0;
          v16 = v73;
LABEL_325:
          if (v302 >= 0x41 && v301)
            MEMORY[0x1CAA32F9C](v301, 0x1000C8000313F17);
          if (v164 >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          if (!v165)
            return v16;
LABEL_328:
          v203 = sub_1C5D4F9D8(a1, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), a4, v71);
          if (v203 == 1)
            return 1;
          if (v73 >= v203)
            v163 = v203;
          else
            v163 = v73;
          return v163 - 1;
        }
        v165 = 0;
        v16 = v18;
        goto LABEL_325;
      case ':':
        v212 = sub_1C6368B30(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), (a5 + 1));
        if (v212 == 1)
          goto LABEL_267;
        v213 = v212;
        v214 = sub_1C6368B30(a1, *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), (a5 + 1));
        if (v214 == 1)
          goto LABEL_267;
        v215 = 2 * v18 - (v213 + v214) + 2;
        v216 = v18 >= v215;
        v217 = v18 - v215;
        if (v216)
          return (v217 + 1);
        else
          return 1;
      case '=':
        v66 = *(uint64_t **)(v8 + 32);
        v67 = *v66;
        v68 = v66[1];
        v69 = (a5 + 1);
        v70 = a1;
        return sub_1C5D4F9D8(v70, v67, v68, a4, v69);
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
        if (!v7)
          goto LABEL_268;
        if ((_BYTE)v305)
          v21 = v305 - 15 < 0x9C;
        else
          v21 = (*(_DWORD *)(*((_QWORD *)&v305 + 1) + 8) & 0xFE) == 18;
        v14 = !v21;
        v43 = 52;
        if (!v14)
          v43 = 60;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + v43) != 2)
          goto LABEL_267;
        return v18;
      default:
        if (v13 == 3)
        {
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40) + 80);
          if (LOBYTE(__src[0]))
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)__src);
          else
            ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          v120 = ExtendedSizeInBits;
          if ((_DWORD)v79 == 1)
          v121 = v18 - v120;
          return (v121 + 1);
        }
        if (v13 != 4)
          goto LABEL_267;
        *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40) + 80);
        if (LOBYTE(__src[0]))
          v34 = sub_1C47A8C74((unsigned __int8 *)__src);
        else
          v34 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
        v119 = v34;
        if ((_DWORD)v35 == 1)
        return v18 - v119;
    }
  }
  switch(v13)
  {
    case 167:
    case 168:
      v50 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v50)
        goto LABEL_474;
      v51 = **(_QWORD **)(v306 + 32);
      v52 = v13 == 168 ? 167 : 168;
      if (v52 != *(unsigned __int16 *)(v51 + 24))
        goto LABEL_474;
      v53 = v50;
      v54 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v51 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v54)
        goto LABEL_474;
      if (v13 == 168)
        v55 = v54;
      else
        v55 = v53;
      if (v13 == 168)
        v56 = v53;
      else
        v56 = v54;
      v57 = *(_QWORD *)(v56 + 80);
      v58 = (llvm::APInt *)(v57 + 24);
      v59 = *(_QWORD *)(v55 + 80);
      v60 = (_QWORD *)(v59 + 24);
      v61 = *(unsigned int *)(v57 + 32);
      if (v61 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)v58 << -(char)v61) >> -(char)v61 <= (uint64_t)(*v60 << -(char)v61) >> -(char)v61)
          goto LABEL_82;
        goto LABEL_474;
      }
      v280 = *(_QWORD *)(*(_QWORD *)v58 + 8 * ((v61 - 1) >> 6)) & (1 << (v61 - 1));
      v281 = *(_DWORD *)(v59 + 32);
      v282 = v281 - 1;
      v283 = *(_QWORD *)(v59 + 24);
      if (v281 >= 0x41)
        v60 = (_QWORD *)(v283 + 8 * (v282 >> 6));
      if ((v280 != 0) == ((*v60 >> v282) & 1))
      {
        v287 = v61 + 63;
        v288 = v283 - 8;
        v289 = (v287 >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v289)
            goto LABEL_82;
          v290 = *(_QWORD *)(*(_QWORD *)v58 - 8 + v289);
          v291 = *(_QWORD *)(v288 + v289);
          v289 -= 8;
        }
        while (v290 == v291);
        if (v290 > v291)
          goto LABEL_474;
LABEL_82:
        v62 = sub_1C4959174(v58);
        v63 = sub_1C4959174((llvm::APInt *)(*(_QWORD *)(v55 + 80) + 24));
        if (v63 >= v62)
          return v62;
        else
          return v63;
      }
      if (v280)
        goto LABEL_82;
LABEL_474:
      v64 = *(_QWORD **)(v306 + 32);
LABEL_475:
      v44 = (a5 + 1);
      v284 = sub_1C5D4F9D8(a1, *v64, v64[1], a4, v44);
      if (v284 == 1)
        return 1;
      v46 = v284;
      v285 = *(_QWORD *)(v306 + 32);
      v48 = *(_QWORD *)(v285 + 40);
      v49 = *(_QWORD *)(v285 + 48);
LABEL_477:
      v286 = sub_1C5D4F9D8(a1, v48, v49, a4, v44);
      if (v286 >= v46)
        return v46;
      else
        return v286;
    case 169:
    case 170:
      v64 = *(_QWORD **)(v8 + 32);
      goto LABEL_475;
    case 171:
    case 172:
    case 173:
      v22 = sub_1C5D4F9D8(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), a4, (a5 + 1));
      if (v22 != 1)
      {
        v23 = v22;
        v24 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), a4, (a5 + 1));
        if (v24 >= v23)
          v20 = v23;
        else
          v20 = v24;
      }
      goto LABEL_267;
    case 174:
    case 177:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 194:
    case 195:
    case 196:
    case 197:
    case 199:
    case 200:
    case 202:
    case 203:
    case 205:
    case 207:
    case 208:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
      goto LABEL_267;
    case 175:
      v83 = sub_1C5D4E8BC((uint64_t)v10, v8, v7, (llvm::APInt *)a4);
      if (!v83)
        goto LABEL_267;
      v84 = v83;
      v85 = sub_1C5D4F9D8(a1, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), a4, (a5 + 1));
      v86 = *((_DWORD *)v84 + 2);
      if (v86 >= 0x41)
      {
        if (v86 - llvm::APInt::countLeadingZerosSlowCase(v84) >= 0x41)
          goto LABEL_267;
        v87 = **(_QWORD ***)v84;
      }
      else
      {
        v87 = *(_QWORD **)v84;
      }
      if ((unint64_t)v87 >= v85)
        goto LABEL_267;
      return (v85 - (_DWORD)v87);
    case 176:
      v16 = sub_1C5D4F9D8(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), a4, (a5 + 1));
      v88 = sub_1C5D4E728(v306, v307, (llvm::APInt *)a4);
      if (v88)
      {
        if (*((_DWORD *)v88 + 2) >= 0x41u)
          v88 = *(llvm::APInt **)v88;
        if (v18 >= *(_QWORD *)v88 + (unint64_t)v16)
          return *(_QWORD *)v88 + v16;
        else
          return v18;
      }
      return v16;
    case 178:
    case 179:
      v65 = sub_1C5D4F9D8(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), a4, (a5 + 1));
      if (v65 == (_DWORD)v18)
        return v18;
      v89 = v65;
      v90 = sub_1C5D4E5B0(*(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), (llvm::APInt *)a4, 0, 0);
      if (!v90)
        goto LABEL_267;
      v91 = llvm::APInt::urem((uint64_t **)(*(_QWORD *)(v90 + 80) + 24), v18);
      if (v13 == 179)
        v91 = ((int)v18 - v91) % v18;
      if (v89 <= v91 + 1)
        goto LABEL_267;
      return v89 - v91;
    case 190:
    case 191:
      v44 = (a5 + 1);
      v45 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 48), a4, v44);
      if (v45 == 1)
        return 1;
      v46 = v45;
      v47 = *(_QWORD *)(v306 + 32);
      v48 = *(_QWORD *)(v47 + 80);
      v49 = *(_QWORD *)(v47 + 88);
      goto LABEL_477;
    case 192:
      v44 = (a5 + 1);
      v81 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 88), a4, v44);
      if (v81 == 1)
        return 1;
      v46 = v81;
      v82 = *(_QWORD *)(v306 + 32);
      v48 = *(_QWORD *)(v82 + 120);
      v49 = *(_QWORD *)(v82 + 128);
      goto LABEL_477;
    case 193:
LABEL_258:
      v177 = sub_1C6141934(v8);
      v178 = (unsigned int *)(*(_QWORD *)(v306 + 32) + 40 * v177);
      v179 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v178 + 40) + 16 * v178[2]);
      if (sub_1C6329468(*(unsigned int **)(a1 + 24), *v179, v179[1]) != 2)
        goto LABEL_267;
      return v18;
    case 198:
      v235 = v18 - sub_1C6329368(*(unsigned int **)(v8 + 32), (uint64_t)v11, v12);
      return sub_1C5D4F9D8(a1, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), a4, (a5 + 1))+ v235;
    case 201:
      v223 = sub_1C6329368(*(unsigned int **)(v8 + 32), (uint64_t)v11, v12);
      v224 = sub_1C6368B30(a1, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), (a5 + 1));
      v225 = v223 - v18;
      v16 = v224 - (v223 - (_DWORD)v18);
      if (v224 <= v225)
        goto LABEL_267;
      return v16;
    case 204:
      *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40) + 80);
      v233 = v18 - sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v11, v12);
      v234 = sub_1C5D4F9D8(a1, **(_QWORD **)(v306 + 32), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 8), a4, (a5 + 1));
      if (v233 + 1 > v234)
        return (v233 + 1);
      else
        return v234;
    case 206:
      v226 = *(_QWORD **)(v8 + 32);
      v227 = *v226;
      v228 = v226[1];
      *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*v226 + 40) + 16 * v228);
      v229 = sub_1C612FE00((llvm::EVT *)__src, v11);
      if (a4[2] < v229)
        llvm::APInt::zext((llvm::APInt *)a4, v229, (uint64_t)&v303);
      else
        sub_1C5DD14E0((uint64_t)&v303, (uint64_t)a4);
      v232 = v18 - sub_1C6131328((unsigned __int8 *)__src, v230, v231);
      v16 = sub_1C5D4F9D8(a1, v227, v228, &v303, (a5 + 1)) + v232;
      goto LABEL_465;
    case 210:
      v186 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 32) + 40) + 80);
      goto LABEL_364;
    case 216:
      v218 = *(_QWORD **)(v8 + 32);
      v220 = *v218;
      v219 = v218[1];
      *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(*v218 + 40) + 16 * v219);
      v221 = sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v11, v12);
      v222 = v221;
      if (LOBYTE(__src[0]))
      {
        if ((LOBYTE(__src[0]) - 120) >= 0x20u
          && (LOBYTE(__src[0]) - 2) >= 6u
          && (LOBYTE(__src[0]) - 15) >= 0x3Cu
          && (LOBYTE(__src[0]) + 104) >= 0x13u
          && (LOBYTE(__src[0]) - 8) >= 7u
          && (LOBYTE(__src[0]) - 75) >= 0x2Du)
        {
          goto LABEL_266;
        }
      }
      else
      {
        if ((*((_DWORD *)__src[1] + 2) & 0xFE) == 0x12)
          v263 = *(unsigned __int8 *)(**((_QWORD **)__src[1] + 2) + 8);
        else
          v263 = *((_DWORD *)__src[1] + 2);
        if (v263 != 13 && v263 > 6)
          goto LABEL_266;
      }
      if ((_DWORD)v18 == v221)
      {
        v69 = (a5 + 1);
        v70 = a1;
        v67 = v220;
        v68 = v219;
        return sub_1C5D4F9D8(v70, v67, v68, a4, v69);
      }
      v264 = v221 / v18;
      if (v221 % v18)
        goto LABEL_266;
      v265 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 40) + 272);
      llvm::APIntOps::ScaleBitMask((llvm::APIntOps *)a4, (const llvm::APInt *)(v19 / v264), (llvm::APInt *)&v303);
      v266 = sub_1C5D4F9D8(a1, v220, v219, &v303, (a5 + 1));
      if (v266 == v222 || !(_DWORD)v19)
      {
        v16 = v18;
      }
      else
      {
        v267 = 0;
        v16 = v18;
        while (1)
        {
          v268 = (unsigned int *)(*(_QWORD *)a4 + 8 * (v267 >> 6));
          if (a4[2] < 0x41)
            v268 = a4;
          if (((*(_QWORD *)v268 >> v267) & 1) != 0)
          {
            v269 = v267 % v264;
            if (!v265)
              v269 = v264 + ~(v267 % v264);
            v270 = v269 * v18;
            v16 = v266 - v270 >= v16 ? v16 : v266 - v270;
            if (v266 <= v270)
              break;
          }
          if ((_DWORD)v19 == ++v267)
            goto LABEL_465;
        }
        v16 = 1;
      }
      goto LABEL_465;
    default:
      switch(v13)
      {
        case 138:
        case 139:
          goto LABEL_258;
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 145:
        case 152:
          goto LABEL_267;
        case 146:
          v25 = *(unsigned __int16 *)(v8 + 56);
          if (!*(_WORD *)(v8 + 56) || v18 < 2)
            return v18;
          v26 = 0;
          v295 = a5 + 1;
          v27 = 1;
          v16 = v18;
          do
          {
            if (a4[2] >= 0x41)
              v28 = (unsigned int *)(*(_QWORD *)a4 + 8 * ((v27 - 1) >> 6));
            else
              v28 = a4;
            if (((*(_QWORD *)v28 >> (v27 - 1)) & 1) != 0)
            {
              *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(v306 + 32) + v26);
              v29 = sub_1C6368B30(a1, __src[0], __src[1], v295);
              v31 = sub_1C6131A64((unsigned int *)__src);
              if ((_DWORD)v30 == 1)
              if (v31 != (llvm::Type *)v18)
              {
                v33 = sub_1C6131A64((unsigned int *)__src);
                if ((_DWORD)v32 == 1)
                if (v29 <= v33 - v18)
                  v29 = 1;
                else
                  v29 -= v33 - v18;
              }
              if (v29 >= v16)
                v16 = v16;
              else
                v16 = v29;
            }
            if (v27 >= v25)
              break;
            ++v27;
            v26 += 40;
          }
          while (v16 > 1);
          return v16;
        case 147:
          v109 = *(uint64_t **)(v8 + 32);
          v110 = *v109;
          v111 = v109[1];
          *(_OWORD *)__src = *(_OWORD *)(v109 + 5);
          v112 = v109[10];
          v304 = v19;
          v292 = v111;
          v293 = v110;
          if (v19 > 0x40)
          {
            v16 = operator new[]();
            v303 = (void *)v16;
            v113 = v304;
            v296 = *(_QWORD *)a4;
            memcpy((void *)v16, *(const void **)a4, (((unint64_t)v304 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v16 = *(_QWORD *)a4;
            v303 = (void *)v16;
            v113 = v19;
            v296 = v16;
          }
          v122 = *(unsigned __int16 *)(v112 + 24);
          if (v122 != 35 && v122 != 11)
            goto LABEL_260;
          v123 = *(_QWORD *)(v112 + 80);
          v124 = (_QWORD **)(v123 + 24);
          v125 = *(_DWORD *)(v123 + 32);
          if (v125 >= 0x41)
          {
            if (v125 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v123 + 24)) >= 0x41)
              goto LABEL_260;
            v126 = (_QWORD *)**v124;
          }
          else
          {
            v126 = *v124;
          }
          if ((unint64_t)v126 < v19)
          {
            v127 = v126 >> 6;
            v128 = a4[2] >= 0x41 ? (unsigned int *)(v296 + 8 * v127) : a4;
            v129 = 1 << (char)v126;
            v130 = *(_QWORD *)v128 & (1 << (char)v126);
            v131 = ~v129;
            if (v113 > 0x40)
              *(_QWORD *)(v16 + 8 * v127) &= v131;
            else
              v303 = (void *)(v16 & v131);
            if (!v130)
            {
              v16 = 0xFFFFFFFFLL;
              goto LABEL_172;
            }
          }
LABEL_260:
          if (sub_1C6329368((unsigned int *)__src, (uint64_t)v11, v12) != (llvm::Type *)v18)
          {
            v139 = 1;
            goto LABEL_262;
          }
          v16 = sub_1C6368B30(a1, __src[0], __src[1], (a5 + 1));
          v113 = v304;
LABEL_172:
          if (v113 > 0x40)
          {
            v132 = 0;
            v133 = ((unint64_t)v113 + 63) >> 6;
            v134 = v303;
            do
            {
              v135 = v133-- < 1;
              if (v135)
                break;
              v136 = *((_QWORD *)v303 + v133);
              v132 += __clz(v136);
            }
            while (!v136);
            v137 = v113 | 0xFFFFFFC0;
            if ((v113 & 0x3F) == 0)
              v137 = 0;
            if (v132 + v137 == v113)
              goto LABEL_467;
          }
          else if (!v303)
          {
            return v16;
          }
          v138 = sub_1C5D4F9D8(a1, v293, v292, &v303, (a5 + 1));
          v139 = 0;
          if (v138 >= v16)
            v16 = v16;
          else
            v16 = v138;
LABEL_262:
          if (v304 < 0x41)
            goto LABEL_265;
          v172 = v303;
          if (!v303)
            goto LABEL_265;
          goto LABEL_264;
        case 148:
          v102 = *(_QWORD **)(v8 + 32);
          v104 = *v102;
          v103 = v102[1];
          v105 = v102[5];
          v106 = *(_QWORD *)(*v102 + 40) + 16 * v103;
          v108 = *(void **)v106;
          v107 = *(_BYTE **)(v106 + 8);
          __src[0] = v108;
          __src[1] = v107;
          if ((_BYTE)v108)
          {
            if (v108 - 120 < 0x33)
              goto LABEL_266;
          }
          else if (v107[8] == 19)
          {
            goto LABEL_266;
          }
          v294 = v103;
          v142 = sub_1C6131A64((unsigned int *)&v306);
          if ((_DWORD)v140 == 1)
          v143 = sub_1C6329368(*(unsigned int **)(v306 + 32), (uint64_t)v140, v141);
          v297 = sub_1C612FE00((llvm::EVT *)__src, v144);
          if (v142 != v143)
            goto LABEL_266;
          v304 = v297;
          if (v297 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v303, -1, 1);
          }
          else
          {
            if (v297)
              v145 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v297);
            else
              v145 = 0;
            v303 = v145;
          }
          v146 = *(unsigned __int16 *)(v105 + 24);
          if (v146 != 35 && v146 != 11)
            goto LABEL_464;
          v147 = *(_QWORD *)(v105 + 80);
          v148 = (unint64_t **)(v147 + 24);
          v149 = *(_DWORD *)(v147 + 32);
          if (v149 >= 0x41)
          {
            if (v149 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v147 + 24)) >= 0x41)
              goto LABEL_464;
            v150 = **v148;
          }
          else
          {
            v150 = (unint64_t)*v148;
          }
          if (v150 >= v297)
            goto LABEL_464;
          v299 = v297;
          if (v297 <= 0x40)
          {
            v277 = 0;
            v278 = 1 << v150;
LABEL_459:
            v279 = (void *)(v277 | v278);
            goto LABEL_460;
          }
          llvm::APInt::initSlowCase((llvm::APInt *)&v298, 0, 0);
          v278 = 1 << v150;
          v297 = v299;
          if (v299 <= 0x40)
          {
            v277 = (unint64_t)v298;
            goto LABEL_459;
          }
          v279 = v298;
          *((_QWORD *)v298 + (v150 >> 6)) |= v278;
LABEL_460:
          if (v304 >= 0x41 && v303)
            MEMORY[0x1CAA32F9C](v303, 0x1000C8000313F17);
          v303 = v279;
          v304 = v297;
LABEL_464:
          v16 = sub_1C5D4F9D8(a1, v104, v294, &v303, (a5 + 1));
LABEL_465:
          if (v304 < 0x41)
            return v16;
          v134 = v303;
          goto LABEL_467;
        case 149:
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 32) + 40)
                                       + 16 * *(unsigned int *)(*(_QWORD *)(v8 + 32) + 8));
          v236 = sub_1C612FE00((llvm::EVT *)__src, v11);
          v237 = *(unsigned __int16 *)(v306 + 56);
          if (!*(_WORD *)(v306 + 56))
            return 0xFFFFFFFFLL;
          v238 = v236;
          v239 = 0;
          v240 = (a5 + 1);
          v16 = 0xFFFFFFFFLL;
          while (1)
          {
            llvm::APInt::extractBits((llvm::APInt *)a4, v238, v238 * v239, (unsigned int *)&v303);
            if (v304 > 0x40)
            {
              v241 = 0;
              v242 = ((unint64_t)v304 + 63) >> 6;
              v243 = v303;
              do
              {
                v135 = v242-- < 1;
                if (v135)
                  break;
                v244 = *((_QWORD *)v303 + v242);
                v241 += __clz(v244);
              }
              while (!v244);
              v245 = v304 | 0xFFFFFFC0;
              if ((v304 & 0x3F) == 0)
                v245 = 0;
              if (v241 + v245 == v304)
                goto LABEL_385;
            }
            else if (!v303)
            {
              goto LABEL_387;
            }
            v246 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40 * v239), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40 * v239 + 8), &v303, v240);
            if (v246 >= v16)
              v16 = v16;
            else
              v16 = v246;
            if (v304 >= 0x41)
            {
              v243 = v303;
LABEL_385:
              if (v243)
                MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
            }
LABEL_387:
            if (++v239 >= v237 || v16 <= 1)
              return v16;
          }
        case 150:
          v247 = *(uint64_t **)(v8 + 32);
          v248 = v247[5];
          v249 = v247[6];
          v250 = *(_QWORD *)(v247[10] + 80);
          v251 = (_QWORD *)(v250 + 24);
          if (*(_DWORD *)(v250 + 32) >= 0x41u)
            v251 = (_QWORD *)*v251;
          v252 = *v247;
          v253 = v247[1];
          v254 = *(_DWORD *)v251;
          *(_OWORD *)__src = *(_OWORD *)(*(_QWORD *)(v248 + 40) + 16 * v249);
          v255 = sub_1C612FE00((llvm::EVT *)__src, v11);
          llvm::APInt::extractBits((llvm::APInt *)a4, v255, v254, (unsigned int *)__src);
          v256 = a4[2];
          v304 = v256;
          if (v256 > 0x40)
          {
            v257 = ((unint64_t)(v256 + 63) >> 3) & 0x3FFFFFF8;
            v303 = (void *)operator new[]();
            memcpy(v303, *(const void **)a4, v257);
          }
          else
          {
            v303 = *(void **)a4;
          }
          v299 = v255;
          if (v255 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v298, 0, 0);
          else
            v298 = 0;
          llvm::APInt::insertBits(&v303, (const llvm::APInt *)&v298, v254);
          if (v299 >= 0x41 && v298)
            MEMORY[0x1CAA32F9C](v298, 0x1000C8000313F17);
          if (LODWORD(__src[1]) > 0x40)
          {
            v258 = 0;
            v259 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
            do
            {
              v135 = v259-- < 1;
              if (v135)
                break;
              v260 = *((_QWORD *)__src[0] + v259);
              v258 += __clz(v260);
            }
            while (!v260);
            v261 = LODWORD(__src[1]) | 0xFFFFFFC0;
            if (((uint64_t)__src[1] & 0x3F) == 0)
              v261 = 0;
            if (v258 + v261 != LODWORD(__src[1]))
            {
LABEL_402:
              v16 = sub_1C5D4F9D8(a1, v248, v249, __src, (a5 + 1));
              if ((_DWORD)v16 == 1)
              {
                v16 = 1;
                goto LABEL_450;
              }
LABEL_411:
              if (v304 > 0x40)
              {
                v271 = 0;
                v272 = ((unint64_t)v304 + 63) >> 6;
                v273 = v303;
                do
                {
                  v135 = v272-- < 1;
                  if (v135)
                    break;
                  v274 = *((_QWORD *)v303 + v272);
                  v271 += __clz(v274);
                }
                while (!v274);
                v275 = v304 | 0xFFFFFFC0;
                if ((v304 & 0x3F) == 0)
                  v275 = 0;
                if (v271 + v275 == v304)
                  goto LABEL_452;
              }
              else if (!v303)
              {
                goto LABEL_281;
              }
              v276 = sub_1C5D4F9D8(a1, v252, v253, &v303, (a5 + 1));
              if (v276 >= v16)
                v16 = v16;
              else
                v16 = v276;
LABEL_450:
              if (v304 < 0x41)
                goto LABEL_281;
              v273 = v303;
LABEL_452:
              if (!v273)
                goto LABEL_281;
              goto LABEL_453;
            }
          }
          else if (__src[0])
          {
            goto LABEL_402;
          }
          v16 = 0xFFFFFFFFLL;
          goto LABEL_411;
        case 151:
          v114 = *(_QWORD **)(v8 + 32);
          v115 = *v114;
          v116 = v114[1];
          v117 = *(_QWORD *)(*v114 + 40) + 16 * v116;
          v118 = *(void **)v117;
          if (*(_QWORD *)v117)
          {
            if (*(_QWORD *)v117 - 120 < 0x33)
              goto LABEL_267;
          }
          else if (*(_BYTE *)(*(_QWORD *)(v117 + 8) + 8) == 19)
          {
            goto LABEL_267;
          }
          v151 = *(_QWORD *)(v114[5] + 80);
          v152 = (_QWORD *)(v151 + 24);
          if (*(_DWORD *)(v151 + 32) >= 0x41u)
            v152 = (_QWORD *)*v152;
          v153 = (_QWORD *)*v152;
          v154 = *(void **)(v117 + 8);
          __src[0] = v118;
          __src[1] = v154;
          v155 = sub_1C612FE00((llvm::EVT *)__src, v11);
          if (a4[2] < v155)
            llvm::APInt::zext((llvm::APInt *)a4, v155, (uint64_t)&v303);
          else
            sub_1C5DD14E0((uint64_t)&v303, (uint64_t)a4);
          LODWORD(__src[1]) = v304;
          if (v304 > 0x40)
          {
            v262 = (((unint64_t)v304 + 63) >> 3) & 0x3FFFFFF8;
            __src[0] = (void *)operator new[]();
            memcpy(__src[0], v303, v262);
          }
          else
          {
            __src[0] = v303;
          }
          sub_1C4888094((uint64_t)__src, v153);
          if (v304 >= 0x41 && v303)
            MEMORY[0x1CAA32F9C](v303, 0x1000C8000313F17);
          v16 = sub_1C5D4F9D8(a1, v115, v116, __src, (a5 + 1));
          goto LABEL_281;
        case 153:
          LODWORD(__src[1]) = v19;
          if (v19 >= 0x41)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
            v304 = v19;
            llvm::APInt::initSlowCase((llvm::APInt *)&v303, 0, 0);
            v8 = v306;
            v94 = __src[1];
            v93 = a4[2];
            v92 = v304;
          }
          else
          {
            __src[0] = 0;
            v304 = v19;
            v92 = v19;
            v93 = v19;
            v94 = v19;
            v303 = 0;
            if (!(_DWORD)v19)
            {
              v16 = 0xFFFFFFFFLL;
              goto LABEL_244;
            }
          }
          v95 = 0;
          v96 = *(_QWORD *)(v8 + 80);
          do
          {
            while (2)
            {
              v97 = (unsigned int *)(*(_QWORD *)a4 + 8 * (v95 >> 6));
              if (v93 < 0x41)
                v97 = a4;
              if (((*(_QWORD *)v97 >> v95) & 1) != 0)
              {
                v98 = *(unsigned int *)(v96 + 4 * v95);
                if ((v98 & 0x80000000) != 0)
                {
                  v139 = 0;
                  v16 = 1;
                  goto LABEL_245;
                }
                if (v98 < v19)
                {
                  v99 = 1 << v98;
                  if (v94 < 0x41)
                  {
                    __src[0] = (void *)((unint64_t)__src[0] | v99);
                    if (++v95 == v19)
                      goto LABEL_138;
                    continue;
                  }
                  *(_QWORD *)((char *)__src[0] + ((v98 >> 3) & 0x1FFFFFF8)) |= v99;
                  if (++v95 == v19)
                    goto LABEL_231;
                  continue;
                }
                v100 = v98 % v19;
                v101 = 1 << (v98 % v19);
                if (v92 > 0x40)
                  *((_QWORD *)v303 + (v100 >> 6)) |= v101;
                else
                  v303 = (void *)((unint64_t)v303 | v101);
              }
              break;
            }
            ++v95;
          }
          while (v95 != v19);
          if (v94 > 0x40)
          {
LABEL_231:
            v167 = 0;
            v168 = ((unint64_t)v94 + 63) >> 6;
            do
            {
              v135 = v168-- < 1;
              if (v135)
                break;
              v169 = *((_QWORD *)__src[0] + v168);
              v167 += __clz(v169);
            }
            while (!v169);
            v170 = v94 | 0xFFFFFFC0;
            if ((v94 & 0x3F) == 0)
              v170 = 0;
            if (v167 + v170 != v94)
              goto LABEL_138;
          }
          else if (__src[0])
          {
LABEL_138:
            v16 = sub_1C5D4F9D8(a1, **(_QWORD **)(v8 + 32), *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8), __src, (a5 + 1));
            v92 = v304;
            goto LABEL_238;
          }
          v16 = 0xFFFFFFFFLL;
LABEL_238:
          if (v92 > 0x40)
          {
            v173 = 0;
            v174 = ((unint64_t)v92 + 63) >> 6;
            do
            {
              v135 = v174-- < 1;
              if (v135)
                break;
              v175 = *((_QWORD *)v303 + v174);
              v173 += __clz(v175);
            }
            while (!v175);
            v176 = v92 | 0xFFFFFFC0;
            if ((v92 & 0x3F) == 0)
              v176 = 0;
            if (v173 + v176 == v92)
              goto LABEL_244;
          }
          else if (!v303)
          {
LABEL_244:
            v139 = (_DWORD)v16 == 1;
LABEL_245:
            if (v92 >= 0x41 && v303)
              MEMORY[0x1CAA32F9C](v303, 0x1000C8000313F17);
            if (LODWORD(__src[1]) >= 0x41)
            {
              v172 = __src[0];
              if (__src[0])
LABEL_264:
                MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
            }
LABEL_265:
            if (!v139)
              return v16;
LABEL_266:
            v20 = 1;
LABEL_267:
            LODWORD(v7) = v307;
LABEL_268:
            if (!v7)
            {
              v11 = (const char *)v306;
              if (v306)
              {
                if (*(_WORD *)(v306 + 24) == 253)
                {
                  v185 = (*(unsigned __int16 *)(v306 + 26) >> 10) & 3;
                  if (v185)
                  {
                    if (v185 == 3)
                    {
                      *(_OWORD *)__src = *(_OWORD *)(v306 + 80);
                      return v18 - sub_1C6131328((unsigned __int8 *)__src, v306, v12);
                    }
                    if (v185 == 2)
                    {
                      v186 = *(_OWORD *)(v306 + 80);
LABEL_364:
                      *(_OWORD *)__src = v186;
                      v121 = v18 - sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v11, v12);
                      return (v121 + 1);
                    }
                  }
                  else
                  {
                    v187 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 1688))(*(_QWORD *)(a1 + 24));
                    if (v187)
                    {
                      v188 = (llvm::Constant *)v187;
                      v189 = *(_QWORD *)v187;
                      if ((*(_DWORD *)(*(_QWORD *)v187 + 8) & 0xFE) == 0x12)
                      {
                        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v189);
                        if ((_DWORD)v190 == 1)
                        if (PrimitiveSizeInBits == (_DWORD)v19 * (_DWORD)v18)
                        {
                          if ((*(_DWORD *)(v189 + 8) & 0xFE) == 0x12)
                            v189 = **(_QWORD **)(v189 + 16);
                          if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v189) == (_DWORD)v18)
                          {
                            if (!(_DWORD)v19)
                              return v18;
                            v192 = 0;
                            v16 = v18;
                            do
                            {
                              if (a4[2] >= 0x41)
                                v193 = (unsigned int *)(*(_QWORD *)a4 + 8 * (v192 >> 6));
                              else
                                v193 = a4;
                              if (((*(_QWORD *)v193 >> (char)v192) & 1) != 0)
                              {
                                AggregateElement = llvm::Constant::getAggregateElement(v188, v192);
                                if (!AggregateElement)
                                  return 1;
                                v195 = *((unsigned __int8 *)AggregateElement + 16);
                                if (v195 == 17)
                                {
                                  v198 = (void *)*((_QWORD *)AggregateElement + 4);
                                  v197 = (llvm::UndefValue *)((char *)AggregateElement + 32);
                                  if (v198 == &unk_1C866F1C0)
                                    llvm::detail::DoubleAPFloat::bitcastToAPInt(v197, (unsigned int *)__src);
                                  else
                                    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v197, (unsigned int *)__src);
                                  v199 = sub_1C4959174((llvm::APInt *)__src);
                                  if (v199 >= v16)
                                    v16 = v16;
                                  else
                                    v16 = v199;
                                  if (LODWORD(__src[1]) >= 0x41 && __src[0])
                                    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                                }
                                else
                                {
                                  if (v195 != 16)
                                    return 1;
                                  v196 = sub_1C4959174((llvm::UndefValue *)((char *)AggregateElement + 24));
                                  if (v196 >= v16)
                                    v16 = v16;
                                  else
                                    v16 = v196;
                                }
                              }
                              v192 = (llvm::Type *)((_DWORD)v192 + 1);
                            }
                            while ((_DWORD)v19 != (_DWORD)v192);
                            return v16;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_269:
            v180 = v306;
            v181 = v307;
            if (v13 > 0x185 || (v13 - 46) <= 2)
            {
              v182 = (*(uint64_t (**)(_QWORD, uint64_t, _BOOL8, unsigned int *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 1640))(*(_QWORD *)(a1 + 24), v306, v307, a4, a1, a5);
              if (v20 <= v182)
                v183 = v182;
              else
                v183 = v20;
              if (v182 > 1)
                v20 = v183;
              v180 = v306;
              v181 = v307;
            }
            sub_1C5D44BD8(a1, v180, v181, (llvm::APInt *)a4, a5, (uint64_t)__src);
            v184 = sub_1C4F95D4C((unint64_t *)__src);
            if (v20 <= v184)
              v16 = v184;
            else
              v16 = v20;
            if (v302 < 0x41)
              goto LABEL_281;
            v273 = v301;
            if (!v301)
              goto LABEL_281;
LABEL_453:
            MEMORY[0x1CAA32F9C](v273, 0x1000C8000313F17);
LABEL_281:
            if (LODWORD(__src[1]) < 0x41)
              return v16;
            v134 = __src[0];
LABEL_467:
            if (v134)
              MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
            return v16;
          }
          v171 = sub_1C5D4F9D8(a1, *(_QWORD *)(*(_QWORD *)(v306 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v306 + 32) + 48), &v303, (a5 + 1));
          if (v171 >= v16)
            v16 = v16;
          else
            v16 = v171;
          v92 = v304;
          goto LABEL_244;
        default:
          if ((v13 - 290) > 0xF || v13 == 291)
            goto LABEL_267;
          *(_OWORD *)__src = *(_OWORD *)(v8 + 80);
          v80 = sub_1C6131328((unsigned __int8 *)__src, (uint64_t)v11, v12);
          if (v307)
            goto LABEL_269;
          v16 = v18 - v80;
          if ((_DWORD)v18 == v80)
            return 1;
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 984))(*(_QWORD *)(a1 + 24)) == 198)
            return (v16 + 1);
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 984))(*(_QWORD *)(a1 + 24)) != 199)
            goto LABEL_267;
          return v16;
      }
  }
}

uint64_t sub_1C5D51784(_QWORD **a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v21;
  _QWORD *v22;

  if ((*((_WORD *)*a1 + 510) & 4) == 0)
  {
    while ((*(_WORD *)(a2 + 72) & 0x10) == 0)
    {
      if (a5 > 5)
        goto LABEL_40;
      v9 = *(unsigned __int16 *)(a2 + 24);
      if (v9 <= 0xBD)
      {
        if (*(unsigned __int16 *)(a2 + 24) <= 0x8Cu)
        {
          if (v9 - 96 < 5)
          {
LABEL_31:
            LOBYTE(v10) = a4;
            return v10 & 1;
          }
          if (v9 != 12 && v9 != 36)
          {
LABEL_38:
            if (v9 <= 0x185 && v9 - 46 > 2)
            {
LABEL_40:
              LOBYTE(v10) = 0;
              return v10 & 1;
            }
            return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, _QWORD, uint64_t))(*a1[3] + 1696))(a1[3], a2, a3, a1, a4 & 1, a5);
          }
          v15 = *(_QWORD *)(a2 + 80);
          v16 = (_BYTE *)(v15 + 32);
          if (*(_UNKNOWN **)(v15 + 32) == &unk_1C866F1C0)
          {
            v18 = *(_QWORD *)(v15 + 40);
            v19 = *(_BYTE *)(v18 + 28) & 7;
            LOBYTE(v10) = v19 != 1;
            if (v19 != 1 || ((a4 ^ 1) & 1) != 0)
              return v10 & 1;
            v16 = (_BYTE *)(v18 + 8);
          }
          else
          {
            v17 = *(_BYTE *)(v15 + 52) & 7;
            LOBYTE(v10) = v17 != 1;
            if (v17 != 1 || ((a4 ^ 1) & 1) != 0)
              return v10 & 1;
          }
          if ((v16[20] & 7) != 1 || *(_DWORD *)(*(_QWORD *)v16 + 16) == 1)
            break;
          v21 = *(_DWORD *)(*(_QWORD *)v16 + 8);
          v22 = v16 + 8;
          if ((v21 - 64) <= 0xFFFFFF7F)
            v22 = (_QWORD *)*v22;
          v10 = (v22[(v21 - 2) >> 6] >> (v21 - 2)) & 1;
          return v10 & 1;
        }
        switch(*(_WORD *)(a2 + 24))
        {
          case 0x8D:
          case 0x8E:
            if ((a4 & 1) != 0)
              goto LABEL_45;
            a5 = (a5 + 1);
            if (!sub_1C5D51784(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, a5)|| !sub_1C5D51784(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0, a5))
            {
              goto LABEL_40;
            }
            a4 = 0;
LABEL_29:
            v14 = *(_QWORD *)(a2 + 32);
            v11 = (uint64_t *)(v14 + 80);
            v12 = (uint64_t *)(v14 + 88);
            break;
          case 0x8F:
          case 0x94:
            goto LABEL_8;
          case 0x91:
LABEL_6:
            if ((a4 & 1) != 0)
              goto LABEL_45;
LABEL_7:
            a4 = 0;
LABEL_8:
            v11 = *(uint64_t **)(a2 + 32);
            v12 = v11 + 1;
            a5 = (a5 + 1);
            break;
          default:
            goto LABEL_38;
        }
      }
      else
      {
        LOBYTE(v10) = 1;
        switch(*(_WORD *)(a2 + 24))
        {
          case 0xBE:
            a5 = (a5 + 1);
            if (sub_1C5D51784(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), a4 & 1, a5))goto LABEL_29;
            goto LABEL_40;
          case 0xCA:
          case 0xCB:
            return v10 & 1;
          case 0xD4:
          case 0xD7:
            if ((a4 & 1) != 0)
              return v10 & 1;
            goto LABEL_7;
          case 0xDE:
          case 0xDF:
            goto LABEL_8;
          case 0xE0:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
            goto LABEL_31;
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
            goto LABEL_6;
          case 0xF6:
          case 0xF7:
            a5 = (a5 + 1);
            if ((sub_1C5D51784(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a4 & 1, a5) & 1) != 0)
              return v10 & 1;
            goto LABEL_27;
          case 0xF8:
          case 0xF9:
            if ((a4 & 1) != 0)
              return v10 & 1;
            a5 = (a5 + 1);
            if (sub_1C5D51784(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0, a5))
            {
              if ((sub_1C5D51784(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 1, a5) & 1) != 0)return v10 & 1;
            }
            if (!sub_1C5D51784(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48), 0, a5))goto LABEL_40;
            v11 = *(uint64_t **)(a2 + 32);
            v12 = v11 + 1;
            a4 = 1;
            break;
          case 0xFA:
          case 0xFB:
            a5 = (a5 + 1);
            if (!sub_1C5D51784(a1, **(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a4 & 1, a5))goto LABEL_40;
LABEL_27:
            v13 = *(_QWORD *)(a2 + 32);
            v11 = (uint64_t *)(v13 + 40);
            v12 = (uint64_t *)(v13 + 48);
            break;
          default:
            goto LABEL_38;
        }
      }
      a3 = *v12;
      a2 = *v11;
      if ((*((_WORD *)*a1 + 510) & 4) != 0)
        break;
    }
  }
LABEL_45:
  LOBYTE(v10) = 1;
  return v10 & 1;
}

uint64_t sub_1C5D51ADC(uint64_t a1, uint64_t a2, _BOOL8 a3, uint64_t a4, _BOOL8 a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BOOL8 v33;
  unsigned int v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  void *__src;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;

  if (*(_WORD *)(a2 + 24) == 171 && *(_WORD *)(a4 + 24) == 171)
  {
    v10 = *(uint64_t **)(a2 + 32);
    v11 = *v10;
    if (sub_1C5D621EC(*v10, v10[1], 1))
    {
      v12 = *(uint64_t **)(v11 + 32);
      v13 = *v12;
      v14 = *((_DWORD *)v12 + 2);
      v15 = *(_QWORD *)(a4 + 32);
      if (v13 == *(_QWORD *)v15 && v14 == *(_DWORD *)(v15 + 8))
        return 1;
      if (v13 == *(_QWORD *)(v15 + 40) && v14 == *(_DWORD *)(v15 + 48))
        return 1;
    }
    v16 = *(_QWORD *)(a2 + 32);
    v17 = *(_QWORD *)(v16 + 40);
    if ((sub_1C5D621EC(v17, *(_QWORD *)(v16 + 48), 1) & 1) != 0)
    {
      v18 = *(uint64_t **)(v17 + 32);
      v19 = *v18;
      v20 = *((_DWORD *)v18 + 2);
      v21 = *(_QWORD *)(a4 + 32);
      v22 = *(_QWORD *)v21;
      if (v19 == *(_QWORD *)v21 && v20 == *(_DWORD *)(v21 + 8)
        || v19 == *(_QWORD *)(v21 + 40) && v20 == *(_DWORD *)(v21 + 48))
      {
        return 1;
      }
    }
    else
    {
      v21 = *(_QWORD *)(a4 + 32);
      v22 = *(_QWORD *)v21;
    }
    if (sub_1C5D621EC(v22, *(_QWORD *)(v21 + 8), 1))
    {
      v23 = *(uint64_t **)(v22 + 32);
      v24 = *v23;
      v25 = *((_DWORD *)v23 + 2);
      v26 = *(_QWORD *)(a2 + 32);
      if (v24 == *(_QWORD *)v26 && v25 == *(_DWORD *)(v26 + 8))
        return 1;
      if (v24 == *(_QWORD *)(v26 + 40) && v25 == *(_DWORD *)(v26 + 48))
        return 1;
    }
    v27 = *(_QWORD *)(a4 + 32);
    v28 = *(_QWORD *)(v27 + 40);
    if (sub_1C5D621EC(v28, *(_QWORD *)(v27 + 48), 1))
    {
      v29 = *(uint64_t **)(v28 + 32);
      v30 = *v29;
      v31 = *((_DWORD *)v29 + 2);
      v32 = *(_QWORD *)(a2 + 32);
      if (v30 == *(_QWORD *)v32 && v31 == *(_DWORD *)(v32 + 8))
        return 1;
      if (v30 == *(_QWORD *)(v32 + 40) && v31 == *(_DWORD *)(v32 + 48))
        return 1;
    }
  }
  sub_1C6368768(a1, a2, a3, 0, (uint64_t)&__src);
  sub_1C6368768(a1, a4, a5, 0, (uint64_t)&v40);
  v35 = v45;
  if (v45 >= 0x41)
  {
    v36 = (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8;
    v37 = (char *)operator new[]();
    memcpy(v37, __src, v36);
    v38 = 0;
    v39 = v40;
    do
    {
      *(_QWORD *)&v37[v38] |= *(_QWORD *)(v39 + v38);
      v38 += 8;
    }
    while (v36 != v38);
    v49 = v35;
    v48 = v37;
    v33 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v48) == v35;
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  else if (v45)
  {
    v33 = ((unint64_t)__src | v40) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
  }
  else
  {
    v33 = 1;
  }
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  if (v41 >= 0x41 && v40)
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  if (v47 >= 0x41 && v46)
    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  if (v45 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v33;
}

_QWORD *sub_1C5D51E4C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  unsigned __int16 v8;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *i;
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _BYTE v24[128];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[17];

  v8 = a2;
  v27[16] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v23[0] = v24;
  v23[1] = (void *)0x2000000000;
  v10 = sub_1C636D7B0(a4, a5);
  sub_1C5D3E710(v23, v8, v10, 1, 0, 0);
  v21 = 0;
  v11 = sub_1C6365B08(a1, (uint64_t)v23, a3, &v21);
  if (!v11)
  {
    v20 = *(_DWORD *)(a3 + 8);
    v25 = (_QWORD *)sub_1C636D7B0(a4, a5);
    v26 = 1;
    v11 = sub_1C6368F3C(a1, &v22, &v20, (unsigned __int8 **)a3, (uint64_t *)&v25);
    v13 = *(_DWORD *)(a1 + 340) + 1;
    v14 = *(_DWORD *)(a1 + 336);
    if (v13 > 2 * v14)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v14, (uint64_t)off_1E8198CA0);
      v25 = v27;
      v26 = 0x2000000000;
      v15 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v11, (unsigned int *)&v25));
      if (v25 != v27)
        free(v25);
      v13 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v15 = v21;
    }
    v16 = *(_QWORD *)v15;
    if (!*(_QWORD *)v15)
      v16 = v15 | 1;
    *v11 = v16;
    *(_QWORD *)v15 = v11;
    v18 = *(_QWORD *)(a1 + 208);
    v17 = a1 + 208;
    *(_DWORD *)(v17 + 132) = v13;
    v11[1] = v18;
    v11[2] = v17;
    *(_QWORD *)(v18 + 8) = v11 + 1;
    *(_QWORD *)v17 = v11 + 1;
    for (i = *(_QWORD **)(v17 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v11);
  }
  if (v23[0] != v24)
    free(v23[0]);
  return v11;
}

uint64_t *sub_1C5D52060(uint64_t a1, uint64_t a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t a6, unint64_t a7, __int16 a8)
{
  int v11;
  uint64_t v15;
  unint64_t *v16;
  int v17;
  const llvm::APInt *v18;
  _QWORD *v19;
  unsigned int ExtendedSizeInBits;
  const char *v21;
  unsigned int v22;
  const char *v23;
  llvm *v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::APFloat *v29;
  BOOL v30;
  uint64_t v31;
  const llvm::detail::DoubleAPFloat *v32;
  void *v33;
  unsigned int v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  unsigned int v47;
  int v48;
  llvm *v49;
  uint64_t v50;
  llvm::ValueHandleBase *v51;
  int v52;
  unsigned int v53;
  llvm::ValueHandleBase *v54;
  void *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  unsigned int *v60;
  llvm::APFloatBase *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  void *v67;
  void *v68;
  unsigned int v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  llvm *v73;
  uint64_t v74;
  unsigned int v76;
  llvm *v77;
  uint64_t v78;
  const llvm::APFloat *v79;
  llvm::APFloatBase *v80;
  uint64_t v81;
  uint8x8_t v82;
  unsigned __int32 v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  void *v88;
  void *v89;
  __int128 *v90;
  llvm::APFloatBase *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v97;
  _QWORD *v98;
  unsigned __int8 *v99;
  int v100;
  uint64_t v101;
  unsigned __int8 *v103;
  llvm *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  llvm *v120;
  uint64_t *v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  int8x8_t *v134;
  int8x8_t v135;
  uint8x8_t v136;
  BOOL v137;
  void *v138;
  const llvm::APFloat *v139;
  llvm::APFloatBase *v140;
  void *v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  unint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  int v150;
  _BOOL8 *v151;
  llvm *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v165;
  int v166;
  unint64_t v167;
  int v168;
  unsigned int *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unsigned __int8 **v178;
  unsigned __int8 **v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *i;
  unsigned int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  size_t v187;
  __int16 v188;
  uint64_t v189;
  const llvm::APInt *v190;
  uint64_t v191;
  void *v192;
  unsigned int v193;
  __int128 v194;
  int v195;
  llvm *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  _BYTE v200[128];
  uint64_t v201;
  int v202;
  __int128 v203;
  void *v204;
  char v205;
  uint64_t v206;

  v189 = a1;
  v190 = a3;
  v206 = *MEMORY[0x1E0C80C00];
  v196 = a4;
  v197 = a5;
  v195 = a2;
  v11 = *(unsigned __int16 *)(a6 + 24);
  if (v11 == 35 || v11 == 11)
  {
    v15 = *(_QWORD *)(a6 + 80);
    v16 = (unint64_t *)(v15 + 24);
    v17 = a4;
    switch((int)a2)
    {
      case 182:
        llvm::APInt::byteSwap((llvm::APInt *)(v15 + 24), (llvm::APInt *)&v203);
        goto LABEL_19;
      case 183:
      case 188:
        v63 = *(_DWORD *)(v15 + 32);
        if (v63 > 0x40)
        {
          v65 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(v15 + 24));
        }
        else
        {
          v64 = __clz(__rbit64(*v16));
          if (v63 >= v64)
            v65 = v64;
          else
            v65 = *(_DWORD *)(v15 + 32);
        }
        goto LABEL_114;
      case 184:
      case 189:
        v66 = *(_DWORD *)(v15 + 32);
        if (v66 > 0x40)
          v65 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 24));
        else
          v65 = v66 + __clz(*v16) - 64;
LABEL_114:
        a3 = v190;
        v71 = v65;
        v72 = (*(unsigned __int8 *)(a6 + 26) >> 3) & 1;
        a1 = v189;
        goto LABEL_115;
      case 185:
        v81 = *(unsigned int *)(v15 + 32);
        if (v81 > 0x40)
        {
          v83 = 0;
          v133 = (unint64_t)(v81 + 63) >> 6;
          v134 = (int8x8_t *)*v16;
          do
          {
            v135 = *v134++;
            v136 = (uint8x8_t)vcnt_s8(v135);
            v136.i16[0] = vaddlv_u8(v136);
            v83 += v136.i32[0];
            --v133;
          }
          while (v133);
        }
        else
        {
          v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v16);
          v82.i16[0] = vaddlv_u8(v82);
          v83 = v82.i32[0];
        }
        v71 = v83;
        v72 = (*(unsigned __int8 *)(a6 + 26) >> 3) & 1;
LABEL_115:
        v73 = a4;
        v74 = a5;
        return (uint64_t *)sub_1C6366AB4(a1, v71, a3, v73, v74, 0, v72);
      case 186:
        llvm::APInt::reverseBits((llvm::APInt *)(v15 + 24), (llvm::APInt *)&v203);
        goto LABEL_19;
      case 187:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 217:
        break;
      case 198:
        goto LABEL_14;
      case 199:
        goto LABEL_16;
      case 200:
        v19 = (_QWORD *)(*(_QWORD *)(a6 + 40) + 16 * a7);
        if (!(*(unsigned int (**)(_QWORD, _QWORD, _QWORD, llvm *, uint64_t))(**(_QWORD **)(a1 + 24) + 1208))(*(_QWORD *)(a1 + 24), *v19, v19[1], a4, a5))goto LABEL_16;
LABEL_14:
        if (v17)
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v196);
        else
          ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v196);
        v44 = ExtendedSizeInBits;
        if ((_DWORD)v21 == 1)
        v53 = *(_DWORD *)(v15 + 32);
        v46 = v53 > v44;
        if (v53 >= v44)
          goto LABEL_78;
        llvm::APInt::sext((llvm::APInt *)(v15 + 24), v44, (llvm::APInt *)&v203);
        goto LABEL_60;
      case 201:
        if ((*(_BYTE *)(a6 + 26) & 8) != 0)
          break;
LABEL_16:
        if (v17)
          v22 = sub_1C47A8C74((unsigned __int8 *)&v196);
        else
          v22 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v196);
        v44 = v22;
        if ((_DWORD)v23 == 1)
        v45 = *(_DWORD *)(v15 + 32);
        v46 = v45 > v44;
        if (v45 >= v44)
        {
LABEL_78:
          v28 = v189;
          if (v46)
            llvm::APInt::trunc((llvm::APInt *)(v15 + 24), v44, (llvm::APInt *)&v203);
          else
            sub_1C5DD14E0((uint64_t)&v203, v15 + 24);
        }
        else
        {
          llvm::APInt::zext((llvm::APInt *)(v15 + 24), v44, (uint64_t)&v203);
LABEL_60:
          v28 = v189;
        }
        v24 = v196;
        v25 = v197;
        v26 = *(__int16 *)(a6 + 24) > 389;
        v27 = (*(unsigned __int8 *)(a6 + 26) >> 3) & 1;
        goto LABEL_81;
      case 202:
      case 203:
        sub_1C632993C((uint64_t)a4, a5, (BOOL)a3);
        v68 = v67;
        if (v17)
          v69 = sub_1C47A8C74((unsigned __int8 *)&v196);
        else
          v69 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v196);
        v76 = v69;
        if ((_DWORD)v70 == 1)
        LODWORD(v199) = v76;
        if (v76 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v198, 0, 0);
        else
          v198 = 0;
        if (v68 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v203 + 1, (uint64_t)&unk_1C866F1C0, (uint64_t)&v198);
        else
          llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)((char *)&v203 + 8), v68, (const llvm::APInt **)&v198);
        if (v199 >= 0x41 && v198)
          MEMORY[0x1CAA32F9C](v198, 0x1000C8000313F17);
        sub_1C4959BCC((uint64_t)&v203, v15 + 24, (_DWORD)a2 == 202, 1);
        v77 = v196;
        v78 = v197;
        v80 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(v189 + 56), (llvm::LLVMContext *)&v203, v79);
        v36 = (uint64_t)sub_1C6366D64(v189, (uint64_t)v80, v190, v77, v78, 0);
        v62 = *((_QWORD *)&v203 + 1);
        if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
          goto LABEL_358;
        goto LABEL_265;
      case 216:
        switch((char)a4)
        {
          case 9:
            if (**(_BYTE **)(a6 + 40) != 4)
              goto LABEL_23;
            llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)((char *)&v203 + 8), (const llvm::APInt **)(v15 + 24));
            break;
          case 10:
            if (**(_BYTE **)(a6 + 40) != 5)
              goto LABEL_23;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)((char *)&v203 + 8), (const llvm::APInt **)(v15 + 24));
            break;
          case 11:
            if (**(_BYTE **)(a6 + 40) != 6)
              goto LABEL_23;
            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)((char *)&v203 + 8), (const llvm::APInt **)(v15 + 24));
            break;
          case 13:
            if (**(_BYTE **)(a6 + 40) != 7)
              goto LABEL_23;
            llvm::detail::IEEEFloat::initFromQuadrupleAPInt((int **)&v203 + 1, (const llvm::APInt **)(v15 + 24));
            break;
          default:
            goto LABEL_23;
        }
        v61 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(v189 + 56), (llvm::LLVMContext *)&v203, v29);
        v36 = (uint64_t)sub_1C6366D64(v189, (uint64_t)v61, v190, v196, v197, 0);
        v62 = *((_QWORD *)&v203 + 1);
        if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
          goto LABEL_358;
        goto LABEL_265;
      case 218:
        v84 = *(_DWORD *)(v15 + 32);
        if (v84 == 16)
        {
          LODWORD(v199) = 16;
          v85 = *v16;
          v86 = a1;
        }
        else
        {
          if (v84 >= 0x41)
            v16 = (unint64_t *)*v16;
          v86 = a1;
          v85 = *(unsigned __int16 *)v16;
          LODWORD(v199) = 16;
        }
        v198 = (void *)v85;
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)((char *)&v203 + 8), (const llvm::APInt **)&v198);
        sub_1C632993C((uint64_t)v196, v197, v137);
        llvm::APFloat::convert((uint64_t)&v203, v138, 1, &v198);
        v140 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(v86 + 56), (llvm::LLVMContext *)&v203, v139);
        v36 = (uint64_t)sub_1C6366D64(v86, (uint64_t)v140, v190, v196, v197, 0);
        v62 = *((_QWORD *)&v203 + 1);
        if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
        {
LABEL_358:
          sub_1C4773C74((uint64_t *)&v204);
          return (uint64_t *)v36;
        }
LABEL_265:
        if ((*(_DWORD *)(v62 + 8) - 64) > 0xFFFFFF7F)
          return (uint64_t *)v36;
        v55 = v204;
        if (!v204)
          return (uint64_t *)v36;
        goto LABEL_83;
      default:
        if ((_DWORD)a2 == 158)
        {
          v40 = *(_DWORD *)(v15 + 32);
          if (v40 > 0x40)
          {
            v56 = a8;
            v57 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 24));
            a8 = v56;
            if (v57 != v40)
              break;
          }
          else if (*v16)
          {
            break;
          }
          v58 = a8;
          v59 = sub_1C6366AB4(v189, 0, v190, a4, a5, 0, 0);
          if (v59)
            return (uint64_t *)v59;
          v11 = *(unsigned __int16 *)(a6 + 24);
          a8 = v58;
        }
        else if ((_DWORD)a2 == 174)
        {
          sub_1C4DA6CE8((const void **)(v15 + 24), (uint64_t)&v203);
LABEL_19:
          v24 = v196;
          v25 = v197;
          v26 = *(__int16 *)(a6 + 24) > 389;
          v27 = (*(unsigned __int8 *)(a6 + 26) >> 3) & 1;
          v28 = v189;
LABEL_81:
          v54 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v28 + 56), (llvm::LLVMContext *)&v203, v18);
          v36 = sub_1C5D3FAF8(v28, v54, v190, v24, v25, v26, v27);
          if (DWORD2(v203) < 0x41)
            return (uint64_t *)v36;
          v55 = (void *)v203;
          if (!(_QWORD)v203)
            return (uint64_t *)v36;
LABEL_83:
          MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
          return (uint64_t *)v36;
        }
        break;
    }
  }
LABEL_23:
  v30 = v11 == 36 || v11 == 12;
  v188 = a8;
  if (!v30)
  {
    v36 = 0;
    v38 = v189;
    v37 = (char *)v190;
    goto LABEL_155;
  }
  v31 = *(_QWORD *)(a6 + 80);
  v33 = *(void **)(v31 + 32);
  v32 = (const llvm::detail::DoubleAPFloat *)(v31 + 32);
  v38 = v189;
  v37 = (char *)v190;
  if (v33 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v203 + 8), v32);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v203 + 8, (uint64_t **)v32);
  v36 = 0;
  if ((int)a2 <= 234)
  {
    switch((int)a2)
    {
      case 208:
      case 209:
        LOBYTE(v194) = 0;
        if ((_BYTE)v196)
          v34 = sub_1C47A8C74((unsigned __int8 *)&v196);
        else
          v34 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v196);
        v47 = v34;
        if ((_DWORD)v35 == 1)
        LODWORD(v199) = v47;
        if (v47 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v198, 0, 0);
        else
          v198 = 0;
        BYTE4(v199) = (_DWORD)a2 == 209;
        v48 = llvm::APFloat::convertToInteger((uint64_t)&v203, (uint64_t)&v198, 0, &v194);
        if (v48 == 1)
        {
          v36 = 0;
          v37 = (char *)v190;
        }
        else
        {
          v49 = v196;
          v50 = v197;
          v51 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v189 + 56), (llvm::LLVMContext *)&v198, a3);
          v37 = (char *)v190;
          v36 = sub_1C5D3FAF8(v189, v51, v190, v49, v50, 0, 0);
        }
        if (v199 >= 0x41 && v198)
          MEMORY[0x1CAA32F9C](v198, 0x1000C8000313F17);
        if (v48 == 1)
          goto LABEL_73;
        goto LABEL_151;
      case 215:
        sub_1C632993C((uint64_t)v196, v197, (BOOL)a3);
        llvm::APFloat::convert((uint64_t)&v203, v88, 1, &v198);
        goto LABEL_150;
      case 216:
        switch(v196)
        {
          case 6u:
            if (**(_BYTE **)(a6 + 40) != 11)
              goto LABEL_54;
LABEL_134:
            if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v203 + 8), (unsigned int *)&v198);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v203 + 8, (unsigned int *)&v198);
            v87 = (uint64_t *)&v198;
            if (v199 >= 0x41)
              v87 = (uint64_t *)v198;
            v43 = *v87;
            break;
          case 5u:
            if (**(_BYTE **)(a6 + 40) != 10)
              goto LABEL_54;
            if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v203 + 8), (unsigned int *)&v198);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v203 + 8, (unsigned int *)&v198);
            v60 = (unsigned int *)&v198;
            if (v199 >= 0x41)
              v60 = (unsigned int *)v198;
            v43 = *v60;
            break;
          case 4u:
            v41 = **(unsigned __int8 **)(a6 + 40);
            if (v41 != 8 && v41 != 9)
              goto LABEL_54;
            if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)((char *)&v203 + 8), (unsigned int *)&v198);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v203 + 8, (unsigned int *)&v198);
            v42 = (unsigned __int16 *)&v198;
            if (v199 >= 0x41)
              v42 = (unsigned __int16 *)v198;
            v43 = *v42;
            break;
          default:
            goto LABEL_54;
        }
        v36 = sub_1C6366AB4(v189, v43, v190, v196, v197, 0, 0);
        if (v199 >= 0x41 && v198)
          MEMORY[0x1CAA32F9C](v198, 0x1000C8000313F17);
        break;
      case 219:
        llvm::APFloat::convert((uint64_t)&v203, &unk_1C866F15C, 1, &v194);
        goto LABEL_134;
      case 222:
        v89 = (void *)*((_QWORD *)&v203 + 1);
        goto LABEL_148;
      case 223:
        v89 = (void *)*((_QWORD *)&v203 + 1);
        v90 = (__int128 *)v204;
        if (*((_UNKNOWN **)&v203 + 1) != &unk_1C866F1C0)
          v90 = &v203;
        if ((*((_BYTE *)v90 + 28) & 8) == 0)
          goto LABEL_150;
LABEL_148:
        if (v89 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)&v203 + 8));
        else
          v205 ^= 8u;
        goto LABEL_150;
      default:
        goto LABEL_73;
    }
    goto LABEL_151;
  }
  switch((_DWORD)a2)
  {
    case 0xEB:
      v39 = 2;
      break;
    case 0xEC:
      v39 = 0;
      break;
    case 0xF1:
      v39 = 3;
      break;
    default:
LABEL_73:
      v52 = 1;
      goto LABEL_152;
  }
  if ((sub_1C4DF8890((uint64_t)&v203, v39) & 0xFFFFFFEF) != 0)
  {
LABEL_54:
    v36 = 0;
    goto LABEL_73;
  }
LABEL_150:
  v91 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(v189 + 56), (llvm::LLVMContext *)&v203, a3);
  v36 = (uint64_t)sub_1C6366D64(v189, (uint64_t)v91, v190, v196, v197, 0);
LABEL_151:
  v52 = 0;
LABEL_152:
  if (*((_UNKNOWN **)&v203 + 1) == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v204);
  }
  else if ((*(_DWORD *)(*((_QWORD *)&v203 + 1) + 8) - 64) <= 0xFFFFFF7F && v204)
  {
    MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
  }
  if (!v52)
    return (uint64_t *)v36;
LABEL_155:
  if ((a2 - 182) <= 0x3B && ((1 << (a2 + 74)) & 0x86003020C3F00DFLL) != 0
    || (_DWORD)a2 == 174)
  {
    *(_QWORD *)&v203 = a6;
    *((_QWORD *)&v203 + 1) = a7;
    v36 = (uint64_t)sub_1C5D53628(v38, a2, v37, v196, v197, (uint64_t)&v203, 1);
    if (v36)
      return (uint64_t *)v36;
  }
  v92 = *(unsigned __int16 *)(a6 + 24);
  if ((int)a2 <= 181)
  {
    if ((int)a2 <= 145)
    {
      if ((_DWORD)a2 != 2 && (_DWORD)a2 != 55 && ((_DWORD)a2 != 52 || (sub_1C6368CA4(v38, a6, a7, 0, 0) & 1) == 0))
        goto LABEL_324;
    }
    else
    {
      if ((int)a2 > 154)
      {
        if ((_DWORD)a2 == 155)
        {
          if ((_DWORD)v92 == 148)
          {
            v93 = *(_QWORD *)(a6 + 32);
            v94 = *(_QWORD *)(v93 + 40);
            v95 = *(unsigned __int16 *)(v94 + 24);
            if (v95 == 35 || v95 == 11)
            {
              v97 = *(_QWORD *)(v94 + 80);
              v98 = (_QWORD *)(v97 + 24);
              if (*(_DWORD *)(v97 + 32) >= 0x41u)
                v98 = (_QWORD *)*v98;
              if (!*v98)
              {
                v99 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v93 + 40) + 16 * *(unsigned int *)(v93 + 8));
                v100 = *v99;
                if (v100 == v196)
                {
                  v101 = *((_QWORD *)v99 + 1);
                  if (v100 || v101 == v197)
                    return *(uint64_t **)v93;
                }
              }
            }
            goto LABEL_324;
          }
        }
        else if ((_DWORD)a2 != 174)
        {
          goto LABEL_324;
        }
LABEL_293:
        if ((_DWORD)v92 != 51)
          goto LABEL_324;
        v104 = v196;
LABEL_295:
        v162 = v197;
        v163 = v38;
        return sub_1C61312D0(v163, v104, v162);
      }
      if ((_DWORD)a2 == 146)
      {
        *(_QWORD *)&v203 = a6;
        DWORD2(v203) = a7;
        v36 = (uint64_t)sub_1C5D55334(v196, v197, (uint64_t)&v203, 1, v38);
        if (v36)
          return (uint64_t *)v36;
        goto LABEL_324;
      }
      if ((_DWORD)a2 != 149)
        goto LABEL_324;
    }
    return (uint64_t *)a6;
  }
  if ((int)a2 > 329)
  {
    if ((a2 - 331) < 2)
    {
      v203 = *(_OWORD *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      if (sub_1C6131264((unsigned __int8 *)&v203, a2, (BOOL)a3) != 2)
        goto LABEL_324;
      v73 = v196;
      v106 = v197;
      v158 = *(_QWORD *)(v38 + 832);
      if (v158)
        v111 = *(unsigned __int16 *)(v158 + 8);
      else
        v111 = 0;
      v129 = v38;
      v130 = 328;
    }
    else
    {
      if ((_DWORD)a2 != 330 && (_DWORD)a2 != 333)
        goto LABEL_324;
      v203 = *(_OWORD *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      if (sub_1C6131264((unsigned __int8 *)&v203, a2, (BOOL)a3) != 2)
        goto LABEL_324;
      v73 = v196;
      v106 = v197;
      v131 = *(_QWORD *)(v38 + 832);
      if (v131)
        v111 = *(unsigned __int16 *)(v131 + 8);
      else
        v111 = 0;
      v129 = v38;
      v130 = 327;
    }
    v132 = v37;
    v108 = a6;
    v109 = a7;
    return (uint64_t *)sub_1C5D52060(v129, v130, v132, v73, v106, v108, v109, v111);
  }
  switch((int)a2)
  {
    case 182:
      if ((_DWORD)v92 != 182)
        goto LABEL_293;
      goto LABEL_236;
    case 183:
    case 184:
      v203 = *(_OWORD *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      if (sub_1C6131264((unsigned __int8 *)&v203, a2, (BOOL)a3) != 2)
        goto LABEL_324;
      v151 = (_BOOL8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      v152 = (llvm *)*v151;
      v153 = v151[1];
      v154 = sub_1C63293BC(v38, (const llvm::APInt *)v37, *v151, v153, 0, 0);
      v157 = *(_QWORD *)(v38 + 832);
      if (v157)
        LOWORD(v157) = *(_WORD *)(v157 + 8);
      return sub_1C5D56C70(v38, 173, (const llvm::APInt *)v37, v152, v153, a6, a7, v156, v154, v155, v157);
    case 185:
      v203 = *(_OWORD *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      if (sub_1C6131264((unsigned __int8 *)&v203, a2, (BOOL)a3) == 2)
        return (uint64_t *)a6;
      goto LABEL_324;
    case 186:
    case 208:
    case 209:
      goto LABEL_293;
    case 198:
      v123 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      v73 = v196;
      if (*v123 == v196 && (*v123 || *((_QWORD *)v123 + 1) == v197))
        return (uint64_t *)a6;
      if ((v92 & 0xFFFE) == 0xC6)
        goto LABEL_230;
      goto LABEL_278;
    case 199:
      v116 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      v73 = v196;
      if (*v116 == v196 && (*v116 || *((_QWORD *)v116 + 1) == v197))
        return (uint64_t *)a6;
      if ((_DWORD)v92 == 199)
      {
        v106 = v197;
        v117 = *(uint64_t **)(a6 + 32);
        v108 = *v117;
        v109 = v117[1];
        v118 = *(_QWORD *)(v38 + 832);
        if (v118)
          v111 = *(unsigned __int16 *)(v118 + 8);
        else
          v111 = 0;
        v129 = v38;
        v130 = 199;
        goto LABEL_255;
      }
LABEL_278:
      if ((_DWORD)v92 != 51)
        goto LABEL_324;
      v74 = v197;
      a1 = v38;
      v71 = 0;
      a3 = (const llvm::APInt *)v37;
      v72 = 0;
      return (uint64_t *)sub_1C6366AB4(a1, v71, a3, v73, v74, 0, v72);
    case 200:
      v112 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      v73 = v196;
      if (*v112 == v196 && (*v112 || *((_QWORD *)v112 + 1) == v197))
        return (uint64_t *)a6;
      if ((v92 - 198) < 3)
        goto LABEL_230;
      if ((_DWORD)v92 == 201)
      {
        v113 = *(uint64_t **)(a6 + 32);
        v36 = *v113;
        v114 = v113[1];
        v115 = (unsigned __int8 *)(*(_QWORD *)(*v113 + 40) + 16 * v114);
        if (*v115 == v196 && ((_BYTE)v196 || *((_QWORD *)v115 + 1) == v197))
        {
          sub_1C5D55498(v38, a6, a7, v36, v114, 0, 0, 1);
          return (uint64_t *)v36;
        }
        goto LABEL_324;
      }
      if ((_DWORD)v92 != 51)
        goto LABEL_324;
      v162 = v197;
      v163 = v38;
      v104 = v196;
      return sub_1C61312D0(v163, v104, v162);
    case 201:
      v119 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      v120 = v196;
      if (*v119 == v196 && (*v119 || *((_QWORD *)v119 + 1) == v197))
        return (uint64_t *)a6;
      if ((_DWORD)v92 == 201)
      {
        v106 = v197;
        v121 = *(uint64_t **)(a6 + 32);
        v108 = *v121;
        v109 = v121[1];
        v122 = *(_QWORD *)(v38 + 832);
        if (v122)
          v111 = *(unsigned __int16 *)(v122 + 8);
        else
          v111 = 0;
        v129 = v38;
        v130 = 201;
        v132 = v37;
        v73 = v196;
        return (uint64_t *)sub_1C5D52060(v129, v130, v132, v73, v106, v108, v109, v111);
      }
      if ((v92 - 198) >= 3)
      {
        if ((_DWORD)v92 != 51)
        {
          if ((_DWORD)v92 == 318 && !*(_BYTE *)(v38 + 651))
          {
            v159 = v197;
            v160 = *(_QWORD *)(**(_QWORD **)(a6 + 32) + 80);
            v161 = *(unsigned int *)(v160 + 32);
            v193 = v161;
            if (v161 > 0x40)
            {
              v187 = ((unint64_t)(v161 + 63) >> 3) & 0x3FFFFFF8;
              v192 = (void *)operator new[]();
              memcpy(v192, *(const void **)(v160 + 24), v187);
            }
            else
            {
              v192 = *(void **)(v160 + 24);
            }
            v36 = sub_1C5C9E150(v38, v190, (uint64_t)v120, v159, (llvm::APInt *)&v192);
            if (v193 < 0x41)
              return (uint64_t *)v36;
            v55 = v192;
            if (!v192)
              return (uint64_t *)v36;
            goto LABEL_83;
          }
LABEL_324:
          v176 = sub_1C636D7B0(v196, v197);
          *(_QWORD *)&v194 = v176;
          *((_QWORD *)&v194 + 1) = 1;
          v201 = a6;
          v202 = a7;
          if (v196 == 172)
          {
            LODWORD(v203) = *((_DWORD *)v37 + 2);
            v177 = sub_1C6368F3C(v38, &v195, (int *)&v203, (unsigned __int8 **)v37, (uint64_t *)&v194);
            sub_1C5D42768(v38, (uint64_t)v177, (uint64_t)&v201, 1);
          }
          else
          {
            v198 = v200;
            v199 = 0x2000000000;
            sub_1C5D3E710(&v198, (unsigned __int16)a2, v176, 1, &v201, 1);
            v191 = 0;
            v178 = sub_1C6365B08(v38, (uint64_t)&v198, (uint64_t)v190, &v191);
            v179 = v178;
            if (v178)
            {
              v177 = 0;
              *((_WORD *)v178 + 36) &= v188 | 0xF001;
              v36 = (uint64_t)v178;
            }
            else
            {
              LODWORD(v203) = *((_DWORD *)v190 + 2);
              v177 = sub_1C6368F3C(v189, &v195, (int *)&v203, (unsigned __int8 **)v190, (uint64_t *)&v194);
              *((_WORD *)v177 + 36) = v188;
              sub_1C5D42768(v189, (uint64_t)v177, (uint64_t)&v201, 1);
              v183 = *(_DWORD *)(v189 + 340) + 1;
              v184 = *(_DWORD *)(v189 + 336);
              if (v183 > 2 * v184)
              {
                llvm::FoldingSetBase::GrowBucketCount(v189 + 328, 2 * v184, (uint64_t)off_1E8198CA0);
                *(_QWORD *)&v203 = &v204;
                *((_QWORD *)&v203 + 1) = 0x2000000000;
                v185 = *(_QWORD *)(v189 + 328)
                     + 8
                     * ((*(_DWORD *)(v189 + 336) - 1) & sub_1C6370764(v189 + 328, (uint64_t)v177, (unsigned int *)&v203));
                if ((void **)v203 != &v204)
                  free((void *)v203);
                v183 = *(_DWORD *)(v189 + 340) + 1;
              }
              else
              {
                v185 = v191;
              }
              *(_DWORD *)(v189 + 340) = v183;
              v186 = *(_QWORD *)v185;
              if (!*(_QWORD *)v185)
                v186 = v185 | 1;
              *v177 = v186;
              *(_QWORD *)v185 = v177;
            }
            if (v198 != v200)
              free(v198);
            v38 = v189;
            if (v179)
              return (uint64_t *)v36;
          }
          v181 = *(_QWORD *)(v38 + 208);
          v180 = (_QWORD *)(v38 + 208);
          v177[1] = v181;
          v177[2] = v180;
          *(_QWORD *)(v181 + 8) = v177 + 1;
          *v180 = v177 + 1;
          for (i = (_QWORD *)v180[56]; i; i = (_QWORD *)i[1])
            (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v177);
          return v177;
        }
        v162 = v197;
        v163 = v38;
        v104 = v196;
        return sub_1C61312D0(v163, v104, v162);
      }
      v194 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(a6 + 32) + 40)
                       + 16 * *(unsigned int *)(*(_QWORD *)(a6 + 32) + 8));
      v141 = (void *)sub_1C6131264((unsigned __int8 *)&v194, a2, (BOOL)a3);
      v142 = v141;
      v144 = v143;
      v198 = v141;
      v199 = v143;
      v146 = sub_1C6131264((unsigned __int8 *)&v196, v143, v145);
      v148 = v146;
      if (v142 != v146)
      {
        *(_QWORD *)&v203 = v146;
        *((_QWORD *)&v203 + 1) = v147;
        if (v142)
        {
          v149 = sub_1C47A8C74((unsigned __int8 *)&v198);
LABEL_302:
          v165 = v149;
          v166 = v150;
          if (v148)
            v167 = sub_1C47A8C74((unsigned __int8 *)&v203);
          else
            v167 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v203);
          if ((v166 != 1 || v168 == 1) && v165 < v167)
          {
            v73 = v196;
LABEL_230:
            v106 = v197;
            v124 = *(uint64_t **)(a6 + 32);
            v108 = *v124;
            v109 = v124[1];
            v125 = *(_QWORD *)(v38 + 832);
            if (v125)
              v111 = *(unsigned __int16 *)(v125 + 8);
            else
              v111 = 0;
            v129 = v38;
            v130 = v92;
LABEL_255:
            v132 = v37;
            return (uint64_t *)sub_1C5D52060(v129, v130, v132, v73, v106, v108, v109, v111);
          }
          goto LABEL_308;
        }
LABEL_275:
        v149 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v198);
        goto LABEL_302;
      }
      if (!v142 && v144 != v147)
      {
        *(_QWORD *)&v203 = v146;
        *((_QWORD *)&v203 + 1) = v147;
        goto LABEL_275;
      }
LABEL_308:
      v169 = *(unsigned int **)(a6 + 32);
      v36 = *(_QWORD *)v169;
      v170 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v169 + 40) + 16 * v169[2]);
      v172 = *v170;
      v171 = v170[1];
      *(_QWORD *)&v203 = v172;
      *((_QWORD *)&v203 + 1) = v171;
      if (v172 != v196 || (!(_BYTE)v172 ? (v173 = v171 == v197) : (v173 = 1), !v173))
      {
        v174 = sub_1C50989E0((unsigned __int8 *)&v203, (uint64_t)v196, v197);
        v128 = *(uint64_t **)(a6 + 32);
        if (!v174)
          return (uint64_t *)*v128;
        v73 = v196;
        v106 = v197;
        v108 = *v128;
        v109 = v128[1];
        v175 = *(_QWORD *)(v38 + 832);
        if (v175)
          v111 = *(unsigned __int16 *)(v175 + 8);
        else
          v111 = 0;
        v129 = v38;
        v130 = 201;
        goto LABEL_255;
      }
      return (uint64_t *)v36;
    case 202:
    case 203:
      if ((_DWORD)v92 != 51)
        goto LABEL_324;
      return sub_1C5D404C4(v38, (const llvm::APInt *)v37, (_BOOL8)v196, v197, 0, 0.0);
    case 215:
      v103 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      v104 = v196;
      if (*v103 == v196 && (*v103 || *((_QWORD *)v103 + 1) == v197))
        return (uint64_t *)a6;
      if ((_DWORD)v92 != 51)
        goto LABEL_324;
      goto LABEL_295;
    case 216:
      v105 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
      if (v196 == *v105 && ((_BYTE)v196 || v197 == *((_QWORD *)v105 + 1)))
        return (uint64_t *)a6;
      if ((_DWORD)v92 != 216)
        goto LABEL_293;
      v73 = v196;
      v106 = v197;
      v107 = *(uint64_t **)(a6 + 32);
      v108 = *v107;
      v109 = v107[1];
      v110 = *(_QWORD *)(v38 + 832);
      if (v110)
        v111 = *(unsigned __int16 *)(v110 + 8);
      else
        v111 = 0;
      v129 = v38;
      v130 = 216;
      goto LABEL_255;
    case 222:
      if ((_DWORD)v92 != 222)
        goto LABEL_293;
LABEL_236:
      v128 = *(uint64_t **)(a6 + 32);
      return (uint64_t *)*v128;
    case 223:
      if ((_DWORD)v92 != 222)
        goto LABEL_324;
      v73 = v196;
      v106 = v197;
      v126 = *(uint64_t **)(a6 + 32);
      v108 = *v126;
      v109 = v126[1];
      v127 = *(_QWORD *)(v38 + 832);
      if (v127)
        v111 = *(unsigned __int16 *)(v127 + 8);
      else
        v111 = 0;
      v129 = v38;
      v130 = 223;
      goto LABEL_255;
    default:
      goto LABEL_324;
  }
}

uint64_t *sub_1C5D53628(uint64_t a1, uint64_t a2, const char *a3, llvm *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const llvm::APFloat *v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::detail::DoubleAPFloat *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void **v30;
  void *v31;
  _QWORD *v32;
  llvm::detail::DoubleAPFloat *v33;
  int v34;
  const llvm::detail::DoubleAPFloat *v35;
  llvm::APFloatBase *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int *v49;
  int v50;
  uint64_t v51;
  unsigned int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  const char *v64;
  uint64_t v65;
  const void **v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned int v70;
  unsigned int *i;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  const llvm::APFloat *v75;
  unint64_t v76;
  uint64_t v77;
  const llvm::detail::DoubleAPFloat *v78;
  void *v79;
  BOOL v80;
  void *v81;
  const llvm::APFloat *v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  const llvm::APInt *v88;
  llvm::ValueHandleBase *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  llvm::APFloatBase *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  BOOL v99;
  unsigned int v100;
  _BOOL8 v101;
  uint64_t v102;
  size_t v103;
  const llvm::APFloat *v104;
  llvm::APFloatBase *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  llvm *v113;
  _BOOL8 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t *v118;
  char **v119;
  uint64_t v120;
  char *v121;
  BOOL v122;
  int v123;
  BOOL v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  BOOL v146;
  uint64_t v147;
  uint64_t *v148;
  llvm::APFloatBase *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  void *v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  int v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v168;
  int v169;
  _BOOL8 v170;
  unsigned int v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  const llvm::detail::DoubleAPFloat *v175;
  uint64_t v176;
  char v177;
  int v178;
  _BOOL4 v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  _BOOL4 v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  _BOOL4 v207;
  unsigned int v208;
  void *v209;
  unsigned int v210;
  unsigned int ExtendedSizeInBits;
  const char *v212;
  unsigned int v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  const llvm::APInt *v220;
  __int128 v221;
  llvm::ValueHandleBase *v222;
  uint64_t v223;
  char *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unsigned int v247;
  unsigned __int16 v248;
  unint64_t v249;
  void *v250;
  unsigned __int16 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  const char *v260;
  void *v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  llvm *v268;
  uint64_t v269;
  void *__src;
  uint64_t v271;
  uint64_t *v272;
  int v273;
  char v274;
  int v275;
  void *v276;
  __int128 v277;
  int v278;
  char v279;
  int v280;
  void *v281[2];
  _DWORD v282[16];
  void *v283[2];
  _BYTE v284[48];
  int v285;
  void *v286;
  uint64_t v287;
  _BYTE v288[48];
  void *v289;
  uint64_t v290;
  _BYTE v291[48];
  char *v292;
  uint64_t v293;
  _BYTE v294[48];
  char *v295;
  uint64_t v296;
  _QWORD v297[8];

  v297[6] = *MEMORY[0x1E0C80C00];
  v268 = a4;
  v269 = a5;
  if (a2 > 0x185)
    return 0;
  v7 = a2;
  result = 0;
  if ((_DWORD)a2 == 149)
    return result;
  v10 = a7;
  if (!(_DWORD)a7)
    return 0;
  v11 = (uint64_t *)a6;
  if (sub_1C5D557A4(0, a2, a6))
    return sub_1C61312D0(a1, a4, a5);
  if ((_DWORD)v10 != 2)
  {
LABEL_29:
    if ((_BYTE)a4)
    {
      if (a4 - 15 >= 0x9C)
        return 0;
LABEL_33:
      v41 = sub_1C52B71D4((unsigned __int8 *)&v268);
      if ((_DWORD)v10 != 2)
        goto LABEL_78;
      if ((_BYTE)v268)
      {
        if (v268 - 15 >= 0x3C)
          goto LABEL_78;
      }
      else if (*(_BYTE *)(v269 + 8) != 18 || *(_BYTE *)(**(_QWORD **)(v269 + 16) + 8) != 13)
      {
        goto LABEL_78;
      }
      v42 = *v11;
      v43 = (unsigned __int8 *)(*(_QWORD *)(*v11 + 40) + 16 * *((unsigned int *)v11 + 2));
      v44 = *v43;
      if (v44 == v268)
      {
        v45 = *((_QWORD *)v43 + 1);
        if (v44 || v45 == v269)
        {
          v47 = v11[2];
          v48 = (unsigned __int8 *)(*(_QWORD *)(v47 + 40) + 16 * *((unsigned int *)v11 + 6));
          if (*v48 == v44
            && (v44 || *((_QWORD *)v48 + 1) == v269)
            && *(_WORD *)(v42 + 24) == 216
            && *(_WORD *)(v47 + 24) == 216)
          {
            do
            {
              v49 = *(unsigned int **)(v42 + 32);
              v42 = *(_QWORD *)v49;
              v50 = *(unsigned __int16 *)(*(_QWORD *)v49 + 24);
            }
            while (v50 == 216);
            v51 = v49[2];
            do
            {
              v52 = *(unsigned int **)(v47 + 32);
              v47 = *(_QWORD *)v52;
              v53 = *(unsigned __int16 *)(*(_QWORD *)v52 + 24);
            }
            while (v53 == 216);
            v54 = v52[2];
            v55 = v50 == 146 ? v42 : 0;
            v56 = v53 == 146 ? v47 : 0;
            v57 = (uint64_t *)(*(_QWORD *)(v42 + 40) + 16 * v51);
            v59 = *v57;
            v58 = v57[1];
            v266 = v59;
            v267 = v58;
            if (v55)
            {
              if (v56)
              {
                if ((_BYTE)v59)
                {
                  v60 = v59 - 120 >= 0x20 && v59 - 2 >= 6;
                  if (v60 && v59 - 15 >= 0x3C)
                    goto LABEL_78;
                }
                else
                {
                  if ((*(_DWORD *)(v58 + 8) & 0xFE) == 0x12)
                    v164 = *(unsigned __int8 *)(**(_QWORD **)(v58 + 16) + 8);
                  else
                    v164 = *(_DWORD *)(v58 + 8);
                  if (v164 != 13)
                    goto LABEL_78;
                }
                v165 = (unsigned __int8 *)(*(_QWORD *)(v47 + 40) + 16 * v54);
                if (v59 == *v165)
                {
                  v166 = *((_QWORD *)v165 + 1);
                  if ((_BYTE)v59 || v58 == v166)
                  {
                    v258 = v10;
                    v260 = a3;
                    v168 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40);
                    v169 = *(unsigned __int8 *)(v168 + 272);
                    v170 = *(_BYTE *)(v168 + 272) == 0;
                    v171 = sub_1C6131328((unsigned __int8 *)&v268, v39, v40);
                    v295 = (char *)v297;
                    v296 = 0x300000000;
                    v292 = v294;
                    v293 = 0x300000000;
                    v276 = (char *)&v277 + 8;
                    *(_QWORD *)&v277 = 0x600000000;
                    v280 = 0;
                    __src = &v272;
                    v271 = 0x600000000;
                    v275 = 0;
                    if (sub_1C636912C(v55, v170, v171, (uint64_t)&v295, (uint64_t *)&v276)
                      && sub_1C636912C(v56, v169 == 0, v171, (uint64_t)&v292, (uint64_t *)&__src))
                    {
                      if ((_DWORD)v277)
                      {
                        v199 = v276;
                        v200 = 8 * v277;
                        while (!*v199)
                        {
                          ++v199;
                          v200 -= 8;
                          if (!v200)
                            goto LABEL_375;
                        }
                      }
                      else
                      {
LABEL_375:
                        if ((_DWORD)v271)
                        {
                          v201 = __src;
                          v202 = 8 * v271;
                          while (!*v201)
                          {
                            ++v201;
                            v202 -= 8;
                            if (!v202)
                              goto LABEL_379;
                          }
                        }
                        else
                        {
LABEL_379:
                          v289 = v291;
                          v290 = 0x300000000;
                          if (!(_DWORD)v41)
                            goto LABEL_397;
                          v203 = 0;
                          do
                          {
                            sub_1C5D55894((uint64_t)v283, v7, (llvm::APInt *)&v295[v203], (llvm::APInt *)&v292[v203]);
                            if (!v284[0])
                              break;
                            sub_1C5398B48((uint64_t)&v289, (unint64_t)v283);
                            if (v284[0] && LODWORD(v283[1]) >= 0x41 && v283[0])
                              MEMORY[0x1CAA32F9C](v283[0], 0x1000C8000313F17);
                            v203 += 16;
                          }
                          while (16 * v41 != v203);
                          if ((_DWORD)v290 == (_DWORD)v41)
                          {
LABEL_397:
                            v286 = v288;
                            v287 = 0x300000000;
                            v283[0] = v284;
                            v207 = v169 == 0;
                            v283[1] = (void *)0x600000000;
                            v285 = 0;
                            v208 = sub_1C6131328((unsigned __int8 *)&v266, v39, v40);
                            v209 = v289;
                            v210 = v290;
                            v281[0] = v282;
                            v281[1] = (void *)0x600000000;
                            sub_1C4765AA4((char *)v281, (v290 + 63) >> 6, 0);
                            v282[12] = v210;
                            sub_1C63693DC(v207, v208, (uint64_t)&v286, (uint64_t)v209, v210, (uint64_t *)v283, v281);
                            if (v281[0] != v282)
                              free(v281[0]);
                            v265 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(v55 + 32) + 40)
                                             + 16 * *(unsigned int *)(*(_QWORD *)(v55 + 32) + 8));
                            if ((_BYTE)v265)
                              ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v265);
                            else
                              ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v265);
                            v213 = ExtendedSizeInBits;
                            if ((_DWORD)v212 == 1)
                            v214 = v287;
                            v215 = sub_1C61312D0(a1, (llvm *)v265, *((uint64_t *)&v265 + 1));
                            v281[0] = v282;
                            v281[1] = (void *)0x300000000;
                            sub_1C4825C80((unsigned int *)v281, v214, (uint64_t)v215, v216);
                            if ((_DWORD)v287)
                            {
                              v217 = 0;
                              v218 = 0;
                              v219 = 16 * v287;
                              do
                              {
                                if (((*((_QWORD *)v283[0] + (v218 >> 6)) >> v218) & 1) == 0)
                                {
                                  if (*(_DWORD *)((char *)v286 + v217 + 8) < v213)
                                    llvm::APInt::sext((llvm::APInt *)((char *)v286 + v217), v213, (llvm::APInt *)&v263);
                                  else
                                    sub_1C5DD14E0((uint64_t)&v263, (uint64_t)v286 + v217);
                                  v221 = v265;
                                  v222 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v263, v220);
                                  v223 = sub_1C5D3FAF8(a1, v222, v260, v221, *((_QWORD *)&v221 + 1), 0, 0);
                                  v224 = (char *)v281[0] + v217;
                                  *(_QWORD *)v224 = v223;
                                  *((_DWORD *)v224 + 2) = v225;
                                  if (v264 >= 0x41)
                                  {
                                    if (v263)
                                      MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
                                  }
                                }
                                ++v218;
                                v217 += 16;
                              }
                              while (v219 != v217);
                            }
                            v226 = (uint64_t)v268;
                            v227 = v269;
                            v228 = *(_QWORD *)(a1 + 832);
                            if (v228)
                              v229 = *(unsigned __int16 *)(v228 + 8);
                            else
                              v229 = 0;
                            v230 = sub_1C636D0C8(a1, 146, v260, v266, v267, v281[0], LODWORD(v281[1]), v229);
                            v232 = sub_1C6367DA8(a1, v226, v227, v230, v231);
                            if (v281[0] != v282)
                              free(v281[0]);
                            if (v283[0] != v284)
                              free(v283[0]);
                            v233 = (char *)v286;
                            if ((_DWORD)v287)
                            {
                              v234 = 16 * v287;
                              do
                              {
                                if (*(_DWORD *)&v233[v234 - 8] >= 0x41u)
                                {
                                  v235 = *(_QWORD *)&v233[v234 - 16];
                                  if (v235)
                                    MEMORY[0x1CAA32F9C](v235, 0x1000C8000313F17);
                                }
                                v234 -= 16;
                              }
                              while (v234);
                              v233 = (char *)v286;
                            }
                            if (v233 != v288)
                              free(v233);
                            v236 = (char *)v289;
                            if ((_DWORD)v290)
                            {
                              v237 = 16 * v290;
                              do
                              {
                                if (*(_DWORD *)&v236[v237 - 8] >= 0x41u)
                                {
                                  v238 = *(_QWORD *)&v236[v237 - 16];
                                  if (v238)
                                    MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
                                }
                                v237 -= 16;
                              }
                              while (v237);
                              v236 = (char *)v289;
                            }
                            if (v236 != v291)
                              free(v236);
                            if (__src != &v272)
                              free(__src);
                            if (v276 != (char *)&v277 + 8)
                              free(v276);
                            v239 = v292;
                            if ((_DWORD)v293)
                            {
                              v240 = 16 * v293;
                              do
                              {
                                if (*(_DWORD *)&v239[v240 - 8] >= 0x41u)
                                {
                                  v241 = *(_QWORD *)&v239[v240 - 16];
                                  if (v241)
                                    MEMORY[0x1CAA32F9C](v241, 0x1000C8000313F17);
                                }
                                v240 -= 16;
                              }
                              while (v240);
                              v239 = v292;
                            }
                            if (v239 != v294)
                              free(v239);
                            v242 = v295;
                            if ((_DWORD)v296)
                            {
                              v243 = 16 * v296;
                              do
                              {
                                if (*(_DWORD *)&v242[v243 - 8] >= 0x41u)
                                {
                                  v244 = *(_QWORD *)&v242[v243 - 16];
                                  if (v244)
                                    MEMORY[0x1CAA32F9C](v244, 0x1000C8000313F17);
                                }
                                v243 -= 16;
                              }
                              while (v243);
                              v242 = v295;
                            }
                            if (v242 != (char *)v297)
                              free(v242);
                            return (uint64_t *)v232;
                          }
                          v204 = (char *)v289;
                          if ((_DWORD)v290)
                          {
                            v205 = 16 * v290;
                            do
                            {
                              if (*(_DWORD *)&v204[v205 - 8] >= 0x41u)
                              {
                                v206 = *(_QWORD *)&v204[v205 - 16];
                                if (v206)
                                  MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
                              }
                              v205 -= 16;
                            }
                            while (v205);
                            v204 = (char *)v289;
                          }
                          if (v204 != v291)
                            free(v204);
                        }
                      }
                    }
                    if (__src != &v272)
                      free(__src);
                    if (v276 != (char *)&v277 + 8)
                      free(v276);
                    v172 = v292;
                    if ((_DWORD)v293)
                    {
                      v173 = 16 * v293;
                      do
                      {
                        if (*(_DWORD *)&v172[v173 - 8] >= 0x41u)
                        {
                          v174 = *(_QWORD *)&v172[v173 - 16];
                          if (v174)
                            MEMORY[0x1CAA32F9C](v174, 0x1000C8000313F17);
                        }
                        v173 -= 16;
                      }
                      while (v173);
                      v172 = v292;
                    }
                    if (v172 != v294)
                      free(v172);
                    v188 = v295;
                    if ((_DWORD)v296)
                    {
                      v189 = 16 * v296;
                      do
                      {
                        if (*(_DWORD *)&v188[v189 - 8] >= 0x41u)
                        {
                          v190 = *(_QWORD *)&v188[v189 - 16];
                          if (v190)
                            MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
                        }
                        v189 -= 16;
                      }
                      while (v189);
                      v188 = v295;
                    }
                    if (v188 != (char *)v297)
                      free(v188);
                    v10 = v258;
                    a3 = v260;
                  }
                }
              }
            }
          }
        }
      }
LABEL_78:
      if (((_DWORD)v7 == 175 || (_DWORD)v7 == 58) && *(_WORD *)(*v11 + 24) == 158)
      {
        LODWORD(v277) = 1;
        v276 = 0;
        if (sub_1C5D3CF08(v11[2], &v276, v40))
        {
          v64 = a3;
          v65 = *(_QWORD *)(**(_QWORD **)(*v11 + 32) + 80);
          v66 = (const void **)(v65 + 24);
          if ((_DWORD)v7 == 58)
          {
            llvm::APInt::operator*((uint64_t)v66, &v276, (uint64_t)&__src);
          }
          else
          {
            v76 = *(unsigned int *)(v65 + 32);
            LODWORD(v271) = v76;
            if (v76 > 0x40)
            {
              __src = (void *)operator new[]();
              memcpy(__src, *v66, ((v76 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              __src = (void *)*v66;
            }
            v100 = sub_1C47EE5B8((uint64_t ***)&v276, v76);
            sub_1C4888094((uint64_t)&__src, v100);
          }
          v101 = (_BOOL8)v268;
          v102 = v269;
          v262 = v271;
          if (v271 > 0x40)
          {
            v103 = (((unint64_t)v271 + 63) >> 3) & 0x3FFFFFF8;
            v261 = (void *)operator new[]();
            memcpy(v261, __src, v103);
          }
          else
          {
            v261 = __src;
          }
          v90 = sub_1C5D41A84(a1, v64, v101, v102, (unsigned int *)&v261);
          if (v262 >= 0x41 && v261)
            MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
          if (v271 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (v277 < 0x41)
            return (uint64_t *)v90;
          goto LABEL_171;
        }
        if (v277 >= 0x41 && v276)
          MEMORY[0x1CAA32F9C](v276, 0x1000C8000313F17);
      }
      v259 = a3;
      v67 = (unsigned int *)&v11[2 * v10];
      if (v10)
      {
        v68 = 16 * v10;
        v69 = v11;
        do
        {
          v70 = *(unsigned __int16 *)(*v69 + 24);
          if (v70 > 0x91)
          {
            if (v70 != 156 && v70 != 146)
              return 0;
          }
          else if (v70 != 8 && v70 != 51)
          {
            return 0;
          }
          v69 += 2;
          v68 -= 16;
        }
        while (v68);
        for (i = (unsigned int *)v11; i != v67; i += 4)
        {
          v72 = *(_QWORD *)(*(_QWORD *)i + 40) + 16 * i[2];
          v73 = *(void **)v72;
          if (*(_QWORD *)v72)
          {
            if (*(_QWORD *)v72 - 15 <= 0x9B)
            {
              v74 = *(_QWORD *)(v72 + 8);
LABEL_103:
              v276 = v73;
              *(_QWORD *)&v277 = v74;
              if (v41 != sub_1C52B71D4((unsigned __int8 *)&v276))
                return 0;
            }
          }
          else
          {
            v74 = *(_QWORD *)(v72 + 8);
            if ((*(_DWORD *)(v74 + 8) & 0xFE) == 0x12)
              goto LABEL_103;
          }
        }
      }
      if ((_DWORD)v7 == 193)
      {
        v249 = 2;
        v250 = 0;
      }
      else
      {
        v249 = sub_1C6131264((unsigned __int8 *)&v268, v39, v40);
        v250 = (void *)v39;
      }
      v97 = (void *)sub_1C6131264((unsigned __int8 *)&v268, v39, v40);
      v281[0] = v97;
      v281[1] = (void *)v98;
      if (!*(_BYTE *)(a1 + 651))
        goto LABEL_188;
      v99 = (char)v97;
      if ((_BYTE)v97)
      {
        if (v97 - 120 >= 0x20
          && v97 - 2 >= 6
          && v97 - 15 >= 0x3C)
        {
          goto LABEL_188;
        }
      }
      else
      {
        if ((*(_DWORD *)(v98 + 8) & 0xFE) == 0x12)
          v106 = *(unsigned __int8 *)(**(_QWORD **)(v98 + 16) + 8);
        else
          v106 = *(_DWORD *)(v98 + 8);
        if (v106 != 13)
          goto LABEL_188;
      }
      llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), (_BOOL8)v97, v98, (uint64_t)&v276);
      *(_OWORD *)v281 = v277;
      v156 = (void *)sub_1C6131264((unsigned __int8 *)&v268, v154, v155);
      v157 = (char)v156;
      if (LOBYTE(v281[0]) != v156)
      {
        v158 = v10;
        v276 = v156;
        *(_QWORD *)&v277 = v98;
        if (LOBYTE(v281[0]))
        {
          v159 = sub_1C47A8C74((unsigned __int8 *)v281);
LABEL_291:
          v161 = v159;
          v162 = v160;
          if (v157)
            v163 = sub_1C47A8C74((unsigned __int8 *)&v276);
          else
            v163 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v276);
          if (v162 == 1 && v98 != 1)
          {
            v10 = v158;
          }
          else
          {
            v10 = v158;
            if (v161 < v163)
              return 0;
          }
          goto LABEL_188;
        }
LABEL_283:
        v159 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v281);
        goto LABEL_291;
      }
      if (!LOBYTE(v281[0]) && v281[1] != (void *)v98)
      {
        v158 = v10;
        v276 = v156;
        *(_QWORD *)&v277 = v98;
        goto LABEL_283;
      }
LABEL_188:
      v107 = v41 & 0xFFFFFFFF00000000;
      if ((v41 & 0xFFFFFFFF00000000) == 0x100000000)
        v108 = 1;
      else
        v108 = v41;
      v276 = (char *)&v277 + 8;
      *(_QWORD *)&v277 = 0x400000000;
      v252 = v108;
      if (!(_DWORD)v108)
      {
        v150 = (_QWORD *)&v277 + 1;
        goto LABEL_275;
      }
      v246 = v41 & 0xFFFFFFFF00000000;
      v255 = v11;
      v257 = v10;
      v247 = v7;
      v109 = 0;
      v248 = 0;
      LOWORD(v7) = 0;
      v251 = 0;
      while (1)
      {
        __src = &v272;
        v271 = 0x400000000;
        if (v10)
        {
          v110 = v255;
          while (1)
          {
            v111 = *v110;
            v112 = v110[1];
            *(_OWORD *)v283 = *(_OWORD *)(*(_QWORD *)(*v110 + 40) + 16 * v112);
            v113 = (llvm *)sub_1C6131264((unsigned __int8 *)v283, v98, v99);
            v114 = (_BOOL8)v113;
            v115 = v98;
            v116 = *(unsigned __int16 *)(v111 + 24);
            if (v116 == 146 || v116 == 156)
            {
              if (v116 == 156)
                v117 = 0;
              else
                v117 = v109;
              v118 = (uint64_t *)(*(_QWORD *)(v111 + 32) + 40 * v117);
              v111 = *v118;
              v112 = v118[1];
              v119 = (char **)(*(_QWORD *)(*v118 + 40) + 16 * v112);
              v121 = *v119;
              v120 = (uint64_t)v119[1];
              v295 = v121;
              v296 = v120;
              if ((_BYTE)v121)
              {
                v122 = v121 - 120 >= 0x20 && v121 - 2 >= 6;
                if (!v122 || v121 - 15 < 0x3C)
                  goto LABEL_211;
              }
              else
              {
                if ((*(_DWORD *)(v120 + 8) & 0xFE) == 0x12)
                  v123 = *(unsigned __int8 *)(**(_QWORD **)(v120 + 16) + 8);
                else
                  v123 = *(_DWORD *)(v120 + 8);
                if (v123 == 13)
                {
LABEL_211:
                  if (v121 != v113
                    || (!(_BYTE)v121 ? (v124 = v120 == v98) : (v124 = 1), !v124))
                  {
                    if (sub_1C50989E0((unsigned __int8 *)&v295, (uint64_t)v113, v98))
                    {
                      if (*(_BYTE *)(a1 + 651))
                      {
                        v125 = *(unsigned __int16 *)(v111 + 24);
                        v146 = v125 > 0x33;
                        v126 = (1 << v125) & 0x8000800000800;
                        if (v146 || v126 == 0)
                        {
                          llvm::TargetLoweringBase::getTypeConversion(*(_QWORD *)(a1 + 24), *(llvm::EVT **)(a1 + 56), v114, v115, (uint64_t)v283);
                          if (LOBYTE(v283[0]))
                          {
                            v253 = 0;
                            v136 = 0;
                            goto LABEL_239;
                          }
                        }
                      }
                      v128 = *(_QWORD *)(a1 + 832);
                      if (v128)
                        v7 = *(unsigned __int16 *)(v128 + 8);
                      else
                        v7 = (unsigned __int16)v7 & 0xF000;
                      v111 = sub_1C5D52060(a1, 201, v259, v114, v115, v111, v112, v7);
                      v112 = v112 & 0xFFFFFFFF00000000 | v98;
                    }
                  }
                }
              }
            }
            else if (v116 == 51)
            {
              v132 = sub_1C61312D0(a1, v113, v98);
              v133 = v98;
              v134 = v271;
              if (v271 >= (unint64_t)HIDWORD(v271))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v272, v271 + 1, 16);
                v134 = v271;
              }
              v135 = (char *)__src + 16 * v134;
              *v135 = v132;
              v135[1] = v133;
              goto LABEL_231;
            }
            v129 = v271;
            if (v271 >= (unint64_t)HIDWORD(v271))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v272, v271 + 1, 16);
              v129 = v271;
            }
            v130 = (uint64_t *)((char *)__src + 16 * v129);
            *v130 = v111;
            v130[1] = v112;
LABEL_231:
            v131 = v271 + 1;
            LODWORD(v271) = v271 + 1;
            v110 += 2;
            if (v110 == (uint64_t *)v67)
            {
              v137 = (uint64_t *)__src;
              goto LABEL_245;
            }
          }
        }
        v131 = 0;
        v137 = (uint64_t *)&v272;
LABEL_245:
        v138 = *(_QWORD *)(a1 + 832);
        v139 = v138 ? *(unsigned __int16 *)(v138 + 8) : v251 & 0xF000u;
        v251 = v139;
        v140 = sub_1C636D0C8(a1, v247, v259, v249, v250, v137, v131, v139);
        v141 = v98;
        if (LOBYTE(v281[0]) != v249)
          break;
        if (!(_BYTE)v249)
        {
          v142 = v281[1];
          if (v281[1] != v250)
            goto LABEL_253;
        }
LABEL_257:
        v145 = *(unsigned __int16 *)(v140 + 24);
        v146 = v145 != 51 && (v145 - 11) > 1;
        if (v146)
        {
          v253 = 0;
          v136 = 0;
        }
        else
        {
          v147 = v277;
          if (v277 >= (unint64_t)DWORD1(v277))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, (uint64_t)&v277 + 8, v277 + 1, 16);
            v147 = v277;
          }
          v148 = (uint64_t *)((char *)v276 + 16 * v147);
          *v148 = v140;
          v148[1] = v141;
          LODWORD(v277) = v277 + 1;
          v136 = 1;
        }
LABEL_239:
        v10 = v257;
        if (__src != &v272)
          free(__src);
        if ((v136 & 1) == 0)
          goto LABEL_265;
        if (++v109 == v252)
        {
          v150 = v276;
          v107 = v246;
LABEL_275:
          if (v107 == 0x100000000)
          {
            v151 = sub_1C5CA0F18(a1, v268, v269, v259, *v150, v150[1]);
          }
          else
          {
            v152 = *(_QWORD *)(a1 + 832);
            if (v152)
              v153 = *(unsigned __int16 *)(v152 + 8);
            else
              v153 = 0;
            v151 = sub_1C636D0C8(a1, 146, v259, v268, v269, v150, v277, v153);
          }
          v253 = v151;
LABEL_265:
          if (v276 != (char *)&v277 + 8)
            free(v276);
          return (uint64_t *)v253;
        }
      }
      v142 = v281[1];
LABEL_253:
      v143 = *(_QWORD *)(a1 + 832);
      if (v143)
        v144 = *(unsigned __int16 *)(v143 + 8);
      else
        v144 = v248 & 0xF000;
      v248 = v144;
      v140 = sub_1C5D52060(a1, 198, v259, v281[0], v142, v140, v98, v144);
      v141 = v141 & 0xFFFFFFFF00000000 | v98;
      goto LABEL_257;
    }
    if ((*(_DWORD *)(v269 + 8) & 0xFE) == 0x12)
      goto LABEL_33;
    return 0;
  }
  v256 = v10;
  v15 = v7;
  v17 = *v11;
  v16 = v11[1];
  v18 = v11;
  v19 = v11[2];
  v254 = v18;
  v20 = v18[3];
  v21 = sub_1C5D56858(v17, v16, 0);
  v22 = sub_1C5D56858(v19, v20, 0);
  if (v21)
  {
    v24 = v22;
    if (v22)
    {
      v25 = *(_QWORD *)(v21 + 80);
      v27 = *(void **)(v25 + 32);
      v26 = (const llvm::detail::DoubleAPFloat *)(v25 + 32);
      if (v27 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v277, v26);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v277, (uint64_t **)v26);
      v28 = *(_QWORD *)(v24 + 80);
      v29 = (_QWORD *)(v28 + 24);
      switch((int)v15)
      {
          sub_1C47B4138((uint64_t)&v276, (uint64_t)v29, 1);
          goto LABEL_269;
        case 'a':
          sub_1C48DB604((uint64_t)&v276, (uint64_t)v29, 1);
          goto LABEL_269;
        case 'b':
          sub_1C48DB628((uint64_t)&v276, (uint64_t)v29, 1);
          goto LABEL_269;
        case 'c':
          sub_1C47B1140((uint64_t)&v276, (uint64_t)v29, 1);
          goto LABEL_269;
        case 'd':
          sub_1C6187438((uint64_t)&v276, (uint64_t)v29);
LABEL_269:
          v149 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a1 + 56), (llvm::LLVMContext *)&v276, v75);
          v38 = sub_1C6366D64(a1, v149, a3, a4, a5, 0);
          v7 = v15;
          v11 = v254;
          v10 = v256;
LABEL_270:
          if ((_UNKNOWN *)v277 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v277 + 1);
          }
          else if ((*(_DWORD *)(v277 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v277 + 1))
          {
            MEMORY[0x1CAA32F9C](*((_QWORD *)&v277 + 1), 0x1000C8000313F17);
          }
          result = (uint64_t *)v38;
          if (!v38)
            goto LABEL_120;
          return result;
        default:
          switch((int)v15)
          {
            case 246:
              v30 = (void **)*((_QWORD *)&v277 + 1);
              if ((_UNKNOWN *)v277 != &unk_1C866F1C0)
                v30 = &v276;
              if ((*((_BYTE *)v30 + 28) & 7) == 1)
              {
                v175 = (const llvm::detail::DoubleAPFloat *)(v28 + 32);
                v176 = *(_QWORD *)(v28 + 32);
                if ((_UNKNOWN *)v176 != &unk_1C866F1C0)
                {
                  v271 = *(_QWORD *)(v28 + 32);
                  if ((*(_DWORD *)(v176 + 8) + 64) >= 0x80)
                    v272 = (uint64_t *)operator new[]();
                  v177 = *(_BYTE *)(v28 + 52);
                  v178 = v177 & 7;
                  v274 = v274 & 0xF0 | v177 & 0xF;
                  v273 = *(_DWORD *)(v28 + 48);
                  v180 = (v177 & 6) != 0 && v178 != 3;
                  v11 = v254;
                  if (v178 == 1 || (v7 = v15, v180))
                  {
                    v181 = *(unsigned int *)(v271 + 8);
                    if ((v181 - 64) <= 0xFFFFFF7F)
                      v182 = v272;
                    else
                      v182 = (uint64_t *)&v272;
                    v185 = *(uint64_t **)(v28 + 40);
                    v184 = (uint64_t *)(v28 + 40);
                    v183 = v185;
                    if ((*(_DWORD *)(*(v184 - 1) + 8) - 64) >= 0xFFFFFF80)
                      v183 = v184;
                    v7 = v15;
                    v11 = v254;
                    if (v181 <= 0xFFFFFFBF)
                    {
                      v186 = (unint64_t)(v181 + 64) >> 6;
                      do
                      {
                        v187 = *v183++;
                        *v182++ = v187;
                        --v186;
                      }
                      while (v186);
                    }
                  }
                  goto LABEL_25;
                }
              }
              else
              {
                v31 = *(void **)(v28 + 32);
                v32 = *(_QWORD **)(v28 + 40);
                v33 = (llvm::detail::DoubleAPFloat *)(v28 + 32);
                if (v31 != &unk_1C866F1C0)
                  v32 = v29;
                if ((*((_BYTE *)v32 + 28) & 7) != 1)
                {
                  v7 = v15;
                  if (v31 == &unk_1C866F1C0)
                    v34 = llvm::detail::DoubleAPFloat::compare(v33, (const llvm::detail::DoubleAPFloat *)&v277);
                  else
                    llvm::detail::IEEEFloat::compare(v33, (const llvm::detail::IEEEFloat *)&v277);
                  v11 = v254;
                  if (v34)
                    v35 = (const llvm::detail::DoubleAPFloat *)&v277;
                  else
                    v35 = v33;
                  if (*(_UNKNOWN **)v35 == &unk_1C866F1C0)
                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v271, v35);
                  else
                    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v271, (uint64_t **)v35);
                  goto LABEL_25;
                }
                if ((_UNKNOWN *)v277 != &unk_1C866F1C0)
                {
                  v271 = v277;
                  if ((*(_DWORD *)(v277 + 8) + 64) >= 0x80)
                    v272 = (uint64_t *)operator new[]();
                  v191 = v279 & 7;
                  v274 = v274 & 0xF0 | v279 & 0xF;
                  v273 = v278;
                  v193 = (v279 & 6) != 0 && v191 != 3;
                  v11 = v254;
                  if (v191 == 1 || (v7 = v15, v193))
                  {
                    v194 = (uint64_t *)&v277 + 1;
                    v195 = *(unsigned int *)(v271 + 8);
                    if ((v195 - 64) <= 0xFFFFFF7F)
                      v196 = v272;
                    else
                      v196 = (uint64_t *)&v272;
                    if ((*(_DWORD *)(v277 + 8) - 64) < 0xFFFFFF80)
                      v194 = (uint64_t *)*((_QWORD *)&v277 + 1);
                    v7 = v15;
                    v11 = v254;
                    if (v195 <= 0xFFFFFFBF)
                    {
                      v197 = (unint64_t)(v195 + 64) >> 6;
                      do
                      {
                        v198 = *v194++;
                        *v196++ = v198;
                        --v197;
                      }
                      while (v197);
                    }
                  }
                  goto LABEL_25;
                }
                v175 = (const llvm::detail::DoubleAPFloat *)&v277;
              }
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v271, v175);
              v7 = v15;
              v11 = v254;
LABEL_25:
              v36 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a1 + 56), (llvm::LLVMContext *)&__src, v23);
              v37 = sub_1C6366D64(a1, v36, a3, a4, a5, 0);
              if ((_UNKNOWN *)v271 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v272);
                v10 = v256;
              }
              else
              {
                v10 = v256;
                if ((*(_DWORD *)(v271 + 8) - 64) <= 0xFFFFFF7F && v272)
                  MEMORY[0x1CAA32F9C](v272, 0x1000C8000313F17);
              }
              v38 = v37;
              goto LABEL_270;
            case 247:
              sub_1C4DF8DC8((llvm::detail::IEEEFloat *)&v276, v29, (uint64_t)&__src);
              goto LABEL_177;
            case 248:
            case 249:
              goto LABEL_67;
            case 250:
              sub_1C618737C((uint64_t)&v276, (uint64_t)v29, (uint64_t)&__src);
              goto LABEL_177;
            case 251:
              sub_1C6187458((uint64_t)&v276, (uint64_t)v29, (uint64_t)&__src);
LABEL_177:
              v105 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a1 + 56), (llvm::LLVMContext *)&__src, v104);
              v38 = sub_1C6366D64(a1, v105, a3, a4, a5, 0);
              if ((_UNKNOWN *)v271 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v272);
                v7 = v15;
                v11 = v254;
                v10 = v256;
              }
              else
              {
                v7 = v15;
                v11 = v254;
                v10 = v256;
                if ((*(_DWORD *)(v271 + 8) - 64) <= 0xFFFFFF7F && v272)
                  MEMORY[0x1CAA32F9C](v272, 0x1000C8000313F17);
              }
              goto LABEL_270;
            default:
              if ((_DWORD)v15 == 143)
              {
                sub_1C61875D4((uint64_t)&v276, (uint64_t)v29);
                goto LABEL_269;
              }
LABEL_67:
              if ((_UNKNOWN *)v277 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v277 + 1);
              }
              else if ((*(_DWORD *)(v277 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v277 + 1))
              {
                MEMORY[0x1CAA32F9C](*((_QWORD *)&v277 + 1), 0x1000C8000313F17);
              }
              goto LABEL_69;
          }
      }
    }
  }
LABEL_69:
  if ((_DWORD)v15 == 212 && v21)
  {
    v77 = *(_QWORD *)(v21 + 80);
    v79 = *(void **)(v77 + 32);
    v78 = (const llvm::detail::DoubleAPFloat *)(v77 + 32);
    if (v79 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v277, v78);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v277, (uint64_t **)v78);
    v7 = v15;
    v11 = v254;
    v10 = v256;
    sub_1C632993C((uint64_t)a4, a5, v80);
    llvm::APFloat::convert((uint64_t)&v276, v81, 1, &__src);
  }
  else
  {
    v7 = v15;
    if ((v15 - 98) >= 3 && (_DWORD)v15 != 96)
    {
      if ((_DWORD)v15 != 97)
      {
        v11 = v254;
        v10 = v256;
        goto LABEL_120;
      }
      v61 = sub_1C5D56858(v17, v16, 1);
      if (v61)
      {
        v62 = *(_QWORD *)(v61 + 80);
        v63 = *(_UNKNOWN **)(v62 + 32) == &unk_1C866F1C0
            ? *(_BYTE *)(*(_QWORD *)(v62 + 40) + 28)
            : *(_BYTE *)(v62 + 52);
        if ((v63 & 7) == 3 && (v63 & 8) != 0 && *(_WORD *)(v19 + 24) == 51)
        {
          result = sub_1C61312D0(a1, a4, a5);
          v11 = v254;
          v10 = v256;
          if (result)
            return result;
          goto LABEL_120;
        }
      }
    }
    v83 = *(unsigned __int16 *)(v19 + 24);
    if (*(_WORD *)(v17 + 24) == 51)
    {
      v11 = v254;
      v10 = v256;
      if (v83 == 51)
      {
        result = sub_1C61312D0(a1, a4, a5);
        if (result)
          return result;
        goto LABEL_120;
      }
    }
    else
    {
      v11 = v254;
      v10 = v256;
      if (v83 != 51)
        goto LABEL_120;
    }
    sub_1C632993C((uint64_t)a4, a5, (BOOL)v23);
    if ((_UNKNOWN *)v93 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(&v277, (uint64_t)&unk_1C866F1C0);
    }
    else
    {
      *(_QWORD *)&v277 = v93;
      if ((*(_DWORD *)(v93 + 8) + 64) >= 0x80)
      {
        *((_QWORD *)&v277 + 1) = operator new[]();
        v93 = v277;
      }
      v279 = v279 & 0xF0 | 3;
      v278 = *(_DWORD *)(v93 + 4) - 1;
      v94 = *(_DWORD *)(v93 + 8);
      if ((v94 - 64) < 0xFFFFFF80)
      {
        v245 = *((_QWORD *)&v277 + 1);
        **((_QWORD **)&v277 + 1) = 0;
        bzero((void *)(v245 + 8), 8 * (((v94 + 64) >> 6) - 2) + 8);
      }
      else
      {
        *((_QWORD *)&v277 + 1) = 0;
      }
    }
    sub_1C4DF8C5C((uint64_t)&v276, 0, 0, 0);
  }
  v95 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a1 + 56), (llvm::LLVMContext *)&v276, v82);
  v96 = sub_1C6366D64(a1, v95, a3, a4, a5, 0);
  if ((_UNKNOWN *)v277 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v277 + 1);
  }
  else if ((*(_DWORD *)(v277 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v277 + 1))
  {
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v277 + 1), 0x1000C8000313F17);
  }
  result = (uint64_t *)v96;
  if (v96)
    return result;
LABEL_120:
  v84 = *v11;
  v85 = *(unsigned __int16 *)(*v11 + 24);
  if (v85 > 0x26)
    goto LABEL_133;
  if (((1 << v85) & 0x800000800) == 0)
  {
    if (((1 << v85) & 0x6000006000) != 0)
      goto LABEL_131;
LABEL_133:
    v253 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 1128))(*(_QWORD *)(a1 + 24), v7))
    {
      v84 = v11[2];
      v92 = *(unsigned __int16 *)(v84 + 24);
      if (v92 <= 0x26 && ((1 << v92) & 0x6000006000) != 0)
      {
        v91 = *v11;
        return sub_1C6368FF0(a1, v7, a4, a5, v84, v91);
      }
    }
    goto LABEL_29;
  }
  v86 = v11[2];
  v87 = *(unsigned __int16 *)(v86 + 24);
  if (v87 != 35 && v87 != 11)
  {
    if (v85 - 13 > 1)
      goto LABEL_133;
LABEL_131:
    v91 = v11[2];
    return sub_1C6368FF0(a1, v7, a4, a5, v84, v91);
  }
  if ((*(_BYTE *)(v84 + 26) & 8) != 0 || (*(_BYTE *)(v86 + 26) & 8) != 0)
    return 0;
  sub_1C5D55894((uint64_t)&v276, v7, (llvm::APInt *)(*(_QWORD *)(v84 + 80) + 24), (llvm::APInt *)(*(_QWORD *)(v86 + 80) + 24));
  if (!BYTE8(v277))
    return 0;
  v89 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 56), (llvm::LLVMContext *)&v276, v88);
  result = (uint64_t *)sub_1C5D3FAF8(a1, v89, a3, v268, v269, 0, 0);
  if (BYTE8(v277) && v277 >= 0x41)
  {
    v90 = (uint64_t)result;
LABEL_171:
    if (v276)
      MEMORY[0x1CAA32F9C](v276, 0x1000C8000313F17);
    return (uint64_t *)v90;
  }
  return result;
}

_QWORD *sub_1C5D55334(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v19;
  int v20;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;

  if (!a4)
    return sub_1C61312D0(a5, a1, a2);
  v6 = a3;
  v7 = 16 * a4;
  for (i = a3; *(_WORD *)(*(_QWORD *)i + 24) == 51; i += 16)
  {
    v7 -= 16;
    if (!v7)
      return sub_1C61312D0(a5, a1, a2);
  }
  v10 = a4;
  if ((_DWORD)a4)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a1;
    while (*(_WORD *)(*(_QWORD *)v6 + 24) == 148)
    {
      v15 = *(uint64_t **)(*(_QWORD *)v6 + 32);
      v9 = *v15;
      v16 = *((_DWORD *)v15 + 2);
      v17 = (unsigned __int8 *)(*(_QWORD *)(*v15 + 40) + 16 * v16);
      if (*v17 != v14 || !v14 && *((_QWORD *)v17 + 1) != a2)
        break;
      if (v12)
      {
        if (v9 != v12 || v16 != v13)
          break;
      }
      v19 = v15[5];
      v20 = *(unsigned __int16 *)(v19 + 24);
      if (v20 != 35 && v20 != 11)
        break;
      v22 = *(_QWORD *)(v19 + 80);
      v23 = (_QWORD *)(v22 + 24);
      v24 = *(_DWORD *)(v22 + 32);
      if (v24 >= 0x41)
      {
        if (v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v22 + 24)) > 0x40)
          return 0;
        v23 = (_QWORD *)*v23;
      }
      if (v11 != *v23)
        break;
      ++v11;
      v6 += 16;
      v12 = v9;
      v13 = v16;
      if (v10 == v11)
        return (_QWORD *)v9;
    }
  }
  return 0;
}

void sub_1C5D55498(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t **v29;
  llvm::MDNode *FragmentExpression;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  unsigned int v42;
  unsigned int v43;
  int8x16_t v46;
  char v47;
  char *v48;
  int v49;
  uint64_t v50;
  int v51;
  char v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[48];
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[4];

  v58[2] = *MEMORY[0x1E0C80C00];
  if (a2 != a4 && (*(_BYTE *)(a2 + 26) & 1) != 0)
  {
    v13 = v58;
    v56 = v58;
    v57 = 0x200000000;
    v14 = *(_QWORD *)(a1 + 616);
    v15 = sub_1C5D05F58(v14 + 688, a2);
    if (*(_QWORD *)(v14 + 688) + 40 * *(unsigned int *)(v14 + 704) != v15)
    {
      v16 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v16)
      {
        v17 = *(uint64_t **)(v15 + 8);
        v18 = &v17[v16];
        v39 = a7 + a6;
        v42 = a6;
        v43 = a7;
        while (1)
        {
          v19 = *v17;
          if (!*(_BYTE *)(*v17 + 62))
            break;
LABEL_7:
          if (++v17 == v18)
            goto LABEL_28;
        }
        v20 = (uint64_t)v13;
        v52 = 0;
        v21 = *(_BYTE **)(v19 + 8);
        v22 = &v21[24 * *(_QWORD *)v19];
        v53 = v55;
        v54 = 0x200000000;
        sub_1C5ADC700((unsigned int *)&v53, v21, v22);
        v23 = v53;
        v48 = &v52;
        v49 = 0;
        v50 = a2;
        v51 = a3;
        v24 = v52;
        v40 = v53;
        if ((_DWORD)v54)
        {
          v25 = 24 * v54;
          do
          {
            v26 = sub_1C6371548((uint64_t)v23, (uint64_t)&v49);
            v24 |= v26;
            v52 = v24;
            if (v26)
            {
              *(_DWORD *)v23 = 0;
              v23[1] = a4;
              *((_DWORD *)v23 + 4) = a5;
            }
            v23 += 3;
            v25 -= 24;
          }
          while (v25);
        }
        v27 = v24 == 0;
        v13 = (_QWORD *)v20;
        if (!v27)
        {
          v28 = *(_QWORD *)(v19 + 32);
          v29 = *(uint64_t ***)(v19 + 40);
          if (v43)
          {
            v38 = *(_QWORD *)(v19 + 32);
            llvm::DIExpression::getFragmentInfo(v29[3], v29[4], &v46);
            if (v47 && v46.i64[0] < v39)
              goto LABEL_19;
            FragmentExpression = llvm::DIExpression::createFragmentExpression((llvm::DIExpression *)v29, (const llvm::DIExpression *)v42, v43);
            if (!v31)
              goto LABEL_19;
            v29 = (uint64_t **)FragmentExpression;
            v40 = v53;
            v28 = v38;
          }
          v32 = *(_DWORD *)(a4 + 60);
          if (v32 <= *(_DWORD *)(v19 + 56))
            v32 = *(_DWORD *)(v19 + 56);
          v33 = sub_1C636EC58(a1, v28, (uint64_t)v29, v40, v54, *(const void **)(v19 + 24), *(_QWORD *)(v19 + 16), *(_BYTE *)(v19 + 60), (unsigned __int8 **)(v19 + 48), v32, *(_BYTE *)(v19 + 61));
          v34 = v57;
          if (v57 >= (unint64_t)HIDWORD(v57))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v20, v57 + 1, 8);
            v34 = v57;
          }
          v56[v34] = v33;
          LODWORD(v57) = v57 + 1;
          if (a8)
            *(_WORD *)(v19 + 62) = 257;
        }
LABEL_19:
        if (v53 != v55)
          free(v53);
        goto LABEL_7;
      }
    }
LABEL_28:
    v35 = v56;
    if ((_DWORD)v57)
    {
      v36 = 8 * v57;
      do
      {
        v37 = (_QWORD *)*v35++;
        sub_1C636ED38(a1, v37, 0);
        v36 -= 8;
      }
      while (v36);
      v35 = v56;
    }
    if (v35 != v13)
      free(v35);
  }
}

uint64_t sub_1C5D557A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *i;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;

  if ((a2 - 59) > 3)
    return 0;
  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(unsigned __int16 *)(v3 + 24);
  if (v4 == 51 || sub_1C6368AD4(*(_QWORD *)(a3 + 16)))
    return 1;
  if (v4 == 146)
  {
    v6 = *(unsigned __int16 *)(v3 + 56);
    if (*(_WORD *)(v3 + 56))
    {
      v7 = *(uint64_t **)(v3 + 32);
      v8 = &v7[5 * v6];
      v9 = 40 * v6;
      for (i = v7; ; i += 5)
      {
        v11 = *(unsigned __int16 *)(*i + 24);
        v12 = v11 == 11 || v11 == 35;
        v13 = !v12;
        v14 = v11 == 51 ? 3 : v13;
        if (v14 != 3 && v14 != 0)
          break;
        v9 -= 40;
        if (!v9)
        {
          while (*(_WORD *)(*v7 + 24) != 51 && !sub_1C6368AD4(*v7))
          {
            result = 0;
            v7 += 5;
            if (v7 == v8)
              return result;
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

void sub_1C5D55894(uint64_t a1, int a2, llvm::APInt *this, llvm::APInt *a4)
{
  llvm::APInt *v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  void *v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  void *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BOOL4 v71;
  void *v72;
  uint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BOOL4 v92;
  size_t v93;
  unsigned int v94;
  uint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BOOL4 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _BOOL4 v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  llvm::APInt *v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  llvm::APInt *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  unsigned int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  void *v138;
  unsigned int v139;
  void *v140;
  unsigned int v141;
  void *v142;
  unsigned int v143;
  BOOL v144[8];
  int v145;
  uint64_t *v146;
  unsigned int v147;
  void *__src;
  unsigned int v149;

  v4 = a4;
  switch(a2)
  {
    case 159:
      v7 = 2 * *((_DWORD *)this + 2);
      llvm::APInt::zext(this, v7, (uint64_t)&__src);
      llvm::APInt::zext(v4, v7, (uint64_t)&v146);
      goto LABEL_42;
    case 160:
      v40 = 2 * *((_DWORD *)this + 2);
      llvm::APInt::sext(this, v40, (llvm::APInt *)&__src);
      llvm::APInt::sext(v4, v40, (llvm::APInt *)&v146);
LABEL_42:
      llvm::APInt::operator*((uint64_t)&__src, &v146, (uint64_t)&v142);
      llvm::APInt::extractBits((llvm::APInt *)&v142, *((_DWORD *)this + 2), *((_DWORD *)this + 2), (unsigned int *)v144);
      *(_DWORD *)(a1 + 8) = v145;
      *(_QWORD *)a1 = *(_QWORD *)v144;
      v145 = 0;
      *(_BYTE *)(a1 + 16) = 1;
      goto LABEL_127;
    case 161:
      v17 = *((_DWORD *)this + 2) + 1;
      llvm::APInt::sext(this, v17, (llvm::APInt *)&__src);
      llvm::APInt::sext(v4, v17, (llvm::APInt *)&v146);
      v18 = v149;
      if (v149 < 0x41)
        goto LABEL_54;
      v19 = v149 + 63;
      v20 = (void *)operator new[]();
      memcpy(v20, __src, (v19 >> 3) & 0x3FFFFFF8);
      v21 = 0;
      v22 = v146;
      v23 = v19 >> 6;
      v24 = (unint64_t *)v20;
      v25 = v19 >> 6;
      do
      {
        v26 = *v22++;
        v27 = v26 + *v24;
        v28 = v27 + 1 <= *v24;
        if (v21)
        {
          ++v27;
          v21 = v28;
        }
        else
        {
          v21 = v27 < *v24;
        }
        *v24++ = v27;
        --v25;
      }
      while (v25);
      goto LABEL_125;
    case 162:
      v49 = *((_DWORD *)this + 2) + 1;
      llvm::APInt::zext(this, v49, (uint64_t)&__src);
      llvm::APInt::zext(v4, v49, (uint64_t)&v146);
      v18 = v149;
      if (v149 >= 0x41)
      {
        v85 = v149 + 63;
        v20 = (void *)operator new[]();
        memcpy(v20, __src, (v85 >> 3) & 0x3FFFFFF8);
        v86 = 0;
        v87 = v146;
        v23 = v85 >> 6;
        v88 = (unint64_t *)v20;
        v89 = v85 >> 6;
        do
        {
          v90 = *v87++;
          v91 = v90 + *v88;
          v92 = v91 + 1 <= *v88;
          if (v86)
          {
            ++v91;
            v86 = v92;
          }
          else
          {
            v86 = v91 < *v88;
          }
          *v88++ = v91;
          --v89;
        }
        while (v89);
LABEL_125:
        *((_QWORD *)v20 + (v23 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      }
      else
      {
LABEL_54:
        v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
        if (!v18)
          v50 = 0;
        v20 = (void *)(v50 & ((unint64_t)__src + (_QWORD)v146));
      }
      v143 = v18;
      v142 = v20;
      llvm::APInt::extractBits((llvm::APInt *)&v142, *((_DWORD *)this + 2), 1u, (unsigned int *)v144);
      *(_DWORD *)(a1 + 8) = v145;
      *(_QWORD *)a1 = *(_QWORD *)v144;
      v145 = 0;
      *(_BYTE *)(a1 + 16) = 1;
LABEL_127:
      if (v143 >= 0x41)
      {
        v72 = v142;
        if (v142)
LABEL_129:
          MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
      }
LABEL_130:
      if (v147 >= 0x41 && v146)
        MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
      if (v149 >= 0x41)
      {
        if (__src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      }
      return;
    case 163:
      v45 = *((_DWORD *)this + 2) + 1;
      llvm::APInt::sext(this, v45, (llvm::APInt *)&__src);
      llvm::APInt::sext(v4, v45, (llvm::APInt *)&v146);
      v46 = v149;
      if (v149 >= 0x41)
      {
        v77 = v149 + 63;
        v48 = (void *)operator new[]();
        memcpy(v48, __src, (v77 >> 3) & 0x3FFFFFF8);
        v78 = 0;
        v79 = v146;
        v80 = (unint64_t *)v48;
        v81 = v77 >> 6;
        do
        {
          v82 = *v79++;
          v83 = v82 + *v80;
          v84 = v83 + 1 <= *v80;
          if (v78)
          {
            ++v83;
            v78 = v84;
          }
          else
          {
            v78 = v83 < *v80;
          }
          *v80++ = v83;
          --v81;
        }
        while (v81);
        *((_QWORD *)v48 + (v77 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
      }
      else
      {
        v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v149;
        if (!v149)
          v47 = 0;
        v48 = (void *)(v47 & ((unint64_t)__src + (_QWORD)v146));
      }
      v141 = v46;
      v140 = v48;
      llvm::APInt::operator+=((uint64_t)&v140, 1uLL);
      v143 = v141;
      v142 = v140;
      v141 = 0;
      llvm::APInt::extractBits((llvm::APInt *)&v142, *((_DWORD *)this + 2), 1u, (unsigned int *)v144);
      *(_DWORD *)(a1 + 8) = v145;
      *(_QWORD *)a1 = *(_QWORD *)v144;
      v145 = 0;
      *(_BYTE *)(a1 + 16) = 1;
      if (v143 >= 0x41 && v142)
        MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
      if (v141 < 0x41)
        goto LABEL_130;
      v72 = v140;
      if (!v140)
        goto LABEL_130;
      goto LABEL_129;
    case 164:
      v34 = *((_DWORD *)this + 2) + 1;
      llvm::APInt::zext(this, v34, (uint64_t)&__src);
      llvm::APInt::zext(v4, v34, (uint64_t)&v146);
      v35 = v149;
      if (v149 >= 0x41)
      {
        v64 = v149 + 63;
        v37 = (void *)operator new[]();
        memcpy(v37, __src, (v64 >> 3) & 0x3FFFFFF8);
        v65 = 0;
        v66 = v146;
        v67 = (unint64_t *)v37;
        v68 = v64 >> 6;
        do
        {
          v69 = *v66++;
          v70 = v69 + *v67;
          v71 = v70 + 1 <= *v67;
          if (v65)
          {
            ++v70;
            v65 = v71;
          }
          else
          {
            v65 = v70 < *v67;
          }
          *v67++ = v70;
          --v68;
        }
        while (v68);
        *((_QWORD *)v37 + (v64 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v35;
      }
      else
      {
        v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v149;
        if (!v149)
          v36 = 0;
        v37 = (void *)(v36 & ((unint64_t)__src + (_QWORD)v146));
      }
      v139 = v35;
      v138 = v37;
      llvm::APInt::operator+=((uint64_t)&v138, 1uLL);
      v143 = v139;
      v142 = v138;
      v139 = 0;
      llvm::APInt::extractBits((llvm::APInt *)&v142, *((_DWORD *)this + 2), 1u, (unsigned int *)v144);
      *(_DWORD *)(a1 + 8) = v145;
      *(_QWORD *)a1 = *(_QWORD *)v144;
      v145 = 0;
      *(_BYTE *)(a1 + 16) = 1;
      if (v143 >= 0x41 && v142)
        MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
      if (v139 < 0x41)
        goto LABEL_130;
      v72 = v138;
      if (!v138)
        goto LABEL_130;
      goto LABEL_129;
    case 165:
    case 166:
    case 174:
LABEL_163:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      return;
    case 167:
      v29 = *((unsigned int *)this + 2);
      if (v29 <= 0x40)
      {
        v30 = -v29;
        v31 = (uint64_t)(*(_QWORD *)this << v30) >> v30;
        v32 = (uint64_t)(*(_QWORD *)a4 << v30) >> v30;
        if (v31 < v32 || v31 <= v32)
          goto LABEL_45;
        goto LABEL_46;
      }
      v115 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v29 - 1) >> 6)) & (1 << (v29 - 1));
      v116 = *((_DWORD *)a4 + 2);
      v117 = v116 - 1;
      if (v116 >= 0x41)
        v118 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v117 >> 6));
      else
        v118 = a4;
      if ((v115 != 0) != ((*(_QWORD *)v118 >> v117) & 1))
      {
        if (!v115)
          goto LABEL_46;
        goto LABEL_45;
      }
      v123 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v123)
          goto LABEL_45;
        v124 = *(_QWORD *)(*(_QWORD *)this - 8 + v123);
        v125 = *(_QWORD *)(*(_QWORD *)a4 - 8 + v123);
        v123 -= 8;
        v15 = v124 > v125;
      }
      while (v124 == v125);
      goto LABEL_14;
    case 168:
      v38 = *((unsigned int *)this + 2);
      if (v38 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)this << -(char)v38) >> -(char)v38 < (uint64_t)(*(_QWORD *)a4 << -(char)v38) >> -(char)v38)
          goto LABEL_46;
        goto LABEL_45;
      }
      v119 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v38 - 1) >> 6)) & (1 << (v38 - 1));
      v120 = *((_DWORD *)a4 + 2);
      v121 = v120 - 1;
      if (v120 >= 0x41)
        v122 = (llvm::APInt *)(*(_QWORD *)a4 + 8 * (v121 >> 6));
      else
        v122 = a4;
      if ((v119 != 0) != ((*(_QWORD *)v122 >> v121) & 1))
      {
        if (!v119)
          goto LABEL_45;
        goto LABEL_46;
      }
      v126 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v126)
          goto LABEL_45;
        v127 = *(_QWORD *)(*(_QWORD *)this - 8 + v126);
        v128 = *(_QWORD *)(*(_QWORD *)a4 - 8 + v126);
        v126 -= 8;
        v129 = v127 > v128;
      }
      while (v127 == v128);
      goto LABEL_206;
    case 169:
      v14 = *((unsigned int *)this + 2);
      if (v14 > 0x40)
      {
        v132 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v132)
            goto LABEL_45;
          v133 = *(_QWORD *)(*(_QWORD *)this - 8 + v132);
          v134 = *(_QWORD *)(*(_QWORD *)a4 - 8 + v132);
          v132 -= 8;
          v15 = v133 > v134;
        }
        while (v133 == v134);
      }
      else
      {
        v15 = *(_QWORD *)this >= *(_QWORD *)a4 && *(_QWORD *)this > *(_QWORD *)a4;
      }
LABEL_14:
      if (v15)
        goto LABEL_46;
      goto LABEL_45;
    case 170:
      v41 = *((unsigned int *)this + 2);
      if (v41 <= 0x40)
      {
        if (*(_QWORD *)this < *(_QWORD *)a4)
          goto LABEL_46;
        goto LABEL_45;
      }
      v135 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v135)
          goto LABEL_45;
        v136 = *(_QWORD *)(*(_QWORD *)this - 8 + v135);
        v137 = *(_QWORD *)(*(_QWORD *)a4 - 8 + v135);
        v135 -= 8;
        v129 = v136 > v137;
      }
      while (v136 == v137);
LABEL_206:
      if (v129)
LABEL_45:
        v4 = this;
LABEL_46:
      v42 = *((_DWORD *)v4 + 2);
      *(_DWORD *)(a1 + 8) = v42;
      if (v42 > 0x40)
      {
        v44 = (void *)operator new[]();
        *(_QWORD *)a1 = v44;
        memcpy(v44, *(const void **)v4, (((unint64_t)*(unsigned int *)(a1 + 8) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v43 = *(void **)v4;
LABEL_166:
        *(_QWORD *)a1 = v43;
      }
LABEL_167:
      *(_BYTE *)(a1 + 16) = 1;
      return;
    case 171:
      v8 = *((unsigned int *)this + 2);
      if (v8 > 0x40)
      {
        v39 = (void *)operator new[]();
        memcpy(v39, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
        v60 = *(uint64_t **)v4;
        v61 = (unint64_t)(v8 + 63) >> 6;
        v62 = v39;
        do
        {
          v63 = *v60++;
          *v62++ &= v63;
          --v61;
        }
        while (v61);
      }
      else
      {
        v9 = *(_QWORD *)this;
        v16 = *(_QWORD *)a4;
LABEL_77:
        v39 = (void *)(v16 & v9);
      }
      goto LABEL_161;
    case 172:
      v8 = *((unsigned int *)this + 2);
      if (v8 > 0x40)
      {
        v39 = (void *)operator new[]();
        memcpy(v39, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
        v73 = *(uint64_t **)v4;
        v74 = (unint64_t)(v8 + 63) >> 6;
        v75 = v39;
        do
        {
          v76 = *v73++;
          *v75++ |= v76;
          --v74;
        }
        while (v74);
      }
      else
      {
        v39 = (void *)(*(_QWORD *)a4 | *(_QWORD *)this);
      }
      goto LABEL_161;
    case 173:
      v8 = *((unsigned int *)this + 2);
      if (v8 > 0x40)
      {
        v39 = (void *)operator new[]();
        memcpy(v39, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
        v95 = *(uint64_t **)v4;
        v96 = (unint64_t)(v8 + 63) >> 6;
        v97 = v39;
        do
        {
          v98 = *v95++;
          *v97++ ^= v98;
          --v96;
        }
        while (v96);
      }
      else
      {
        v39 = (void *)(*(_QWORD *)a4 ^ *(_QWORD *)this);
      }
LABEL_161:
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v39;
      goto LABEL_167;
    case 175:
      v53 = *((unsigned int *)this + 2);
      v149 = v53;
      if (v53 > 0x40)
      {
        v54 = (void *)operator new[]();
        memcpy(v54, *(const void **)this, ((v53 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v54 = *(void **)this;
      }
      __src = v54;
      v94 = sub_1C47EE5B8((uint64_t ***)v4, v53);
      sub_1C4888094((uint64_t)&__src, v94);
      goto LABEL_165;
    case 176:
      v51 = *((unsigned int *)this + 2);
      v149 = v51;
      if (v51 > 0x40)
      {
        v93 = ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8;
        v52 = (void *)operator new[]();
        memcpy(v52, *(const void **)this, v93);
      }
      else
      {
        v52 = *(void **)this;
      }
      __src = v52;
      llvm::APInt::ashrInPlace((llvm::APInt *)&__src, (uint64_t ***)v4);
      goto LABEL_165;
    case 177:
      v10 = *((unsigned int *)this + 2);
      if (v10 > 0x40)
      {
        v13 = operator new[]();
        memcpy((void *)v13, *(const void **)this, ((v10 + 63) >> 3) & 0x3FFFFFF8);
        v59 = sub_1C47EE5B8((uint64_t ***)v4, v10);
        llvm::APInt::tcShiftRight((llvm::APInt *)v13, (unint64_t *)((v10 + 63) >> 6), v59);
      }
      else
      {
        v11 = *(_QWORD *)this;
        v12 = sub_1C47EE5B8((uint64_t ***)a4, *((unsigned int *)this + 2));
        if ((_DWORD)v10 == v12)
          v13 = 0;
        else
          v13 = v11 >> v12;
      }
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v13;
      goto LABEL_167;
    case 178:
      llvm::APInt::rotl(this, (const void **)a4, (uint64_t)&__src);
      goto LABEL_165;
    case 179:
      llvm::APInt::rotr(this, (const void **)a4, (uint64_t)&__src);
      goto LABEL_165;
    default:
      switch(a2)
      {
        case '8':
          v8 = *((unsigned int *)this + 2);
          if (v8 < 0x41)
          {
            v9 = *(_QWORD *)a4 + *(_QWORD *)this;
            goto LABEL_75;
          }
          v39 = (void *)operator new[]();
          memcpy(v39, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
          v108 = 0;
          v109 = *(uint64_t **)v4;
          v101 = (unint64_t)(v8 + 63) >> 6;
          v110 = (unint64_t *)v39;
          v111 = v101;
          do
          {
            v112 = *v109++;
            v113 = v112 + *v110;
            v114 = v113 + 1 <= *v110;
            if (v108)
            {
              ++v113;
              v108 = v114;
            }
            else
            {
              v108 = v113 < *v110;
            }
            *v110++ = v113;
            --v111;
          }
          while (v111);
          goto LABEL_160;
        case '9':
          v8 = *((unsigned int *)this + 2);
          if (v8 < 0x41)
          {
            v9 = *(_QWORD *)this - *(_QWORD *)a4;
LABEL_75:
            v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
            if (!(_DWORD)v8)
              v16 = 0;
            goto LABEL_77;
          }
          v39 = (void *)operator new[]();
          memcpy(v39, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
          v99 = 0;
          v100 = *(unint64_t **)v4;
          v101 = (unint64_t)(v8 + 63) >> 6;
          v102 = (unint64_t *)v39;
          v103 = v101;
          do
          {
            v104 = *v100++;
            v105 = *v102 - v104;
            v106 = *v102 < v104;
            v107 = *v102 + ~v104;
            if (v99)
            {
              v99 = v107 >= *v102;
            }
            else
            {
              v107 = v105;
              v99 = v106;
            }
            *v102++ = v107;
            --v103;
          }
          while (v103);
LABEL_160:
          *((_QWORD *)v39 + (v101 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
          goto LABEL_161;
        case ':':
          llvm::APInt::operator*((uint64_t)this, a4, (uint64_t)&__src);
          break;
        case ';':
          v57 = *((_DWORD *)a4 + 2);
          if (v57 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(a4) == v57)
              goto LABEL_163;
          }
          else if (!*(_QWORD *)a4)
          {
            goto LABEL_163;
          }
          llvm::APInt::sdiv(this, (const void **)v4, (llvm::APInt *)&__src);
          break;
        case '<':
          v58 = *((_DWORD *)a4 + 2);
          if (v58 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(a4) == v58)
              goto LABEL_163;
          }
          else if (!*(_QWORD *)a4)
          {
            goto LABEL_163;
          }
          llvm::APInt::udiv(this, v4, (llvm::APInt *)&__src);
          break;
        case '=':
          v56 = *((_DWORD *)a4 + 2);
          if (v56 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(a4) == v56)
              goto LABEL_163;
          }
          else if (!*(_QWORD *)a4)
          {
            goto LABEL_163;
          }
          llvm::APInt::srem(this, (const void **)v4, (llvm::APInt *)&__src);
          break;
        case '>':
          v55 = *((_DWORD *)a4 + 2);
          if (v55 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(a4) == v55)
              goto LABEL_163;
          }
          else if (!*(_QWORD *)a4)
          {
            goto LABEL_163;
          }
          llvm::APInt::urem(this, v4, (llvm::APInt *)&__src);
          break;
        case 'R':
          llvm::APInt::sadd_sat((const void **)this, a4, (llvm::APInt *)&__src);
          break;
        case 'S':
          v144[0] = 0;
          llvm::APInt::uadd_ov((const void **)this, (uint64_t **)a4, v144, (uint64_t)&__src);
          if (v144[0])
          {
            v130 = *((_DWORD *)this + 2);
            v147 = v130;
            if (v130 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v146, -1, 1);
            }
            else
            {
              if (v130)
                v131 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v130;
              else
                v131 = 0;
              v146 = (uint64_t *)v131;
            }
            if (v149 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          }
          else
          {
            v147 = v149;
            v146 = (uint64_t *)__src;
          }
          *(_DWORD *)(a1 + 8) = v147;
          v43 = v146;
          goto LABEL_166;
        case 'T':
          llvm::APInt::ssub_sat((const void **)this, a4, (llvm::APInt *)&__src);
          break;
        case 'U':
          llvm::APInt::usub_sat(this, (unint64_t **)a4, (llvm::APInt *)&__src);
          break;
        case 'V':
          llvm::APInt::sshl_sat(this, a4, (llvm::APInt *)&__src);
          break;
        case 'W':
          llvm::APInt::ushl_sat(this, a4, (llvm::APInt *)&__src);
          break;
        default:
          goto LABEL_163;
      }
LABEL_165:
      *(_DWORD *)(a1 + 8) = v149;
      v43 = __src;
      goto LABEL_166;
  }
}

uint64_t sub_1C5D56858(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  int v6;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  _DWORD v17[14];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = *(unsigned __int16 *)(a1 + 24);
  if (v4 == 12 || v4 == 36)
    return v3;
  if (!a1 || v4 != 146)
    goto LABEL_5;
  v15 = v17;
  v16 = 0x600000000;
  v17[12] = 0;
  v10 = sub_1C6367A48(a1, (uint64_t)&v15);
  if (!v10)
    goto LABEL_22;
  v3 = v10;
  v11 = *(unsigned __int16 *)(v10 + 24);
  if (v11 != 36 && v11 != 12)
    goto LABEL_22;
  v12 = v15;
  if (!(_DWORD)v16)
    goto LABEL_21;
  v13 = 0;
  while (!*(_QWORD *)((char *)v15 + v13))
  {
    v13 += 8;
    if (8 * v16 == v13)
      goto LABEL_21;
  }
  if ((a3 & 1) != 0)
  {
LABEL_21:
    v14 = 0;
  }
  else
  {
LABEL_22:
    v3 = 0;
    v14 = 1;
    v12 = v15;
  }
  if (v12 != v17)
    free(v12);
  if (v14)
  {
    v4 = *(unsigned __int16 *)(a1 + 24);
LABEL_5:
    if (v4 != 156)
      return 0;
    v3 = **(_QWORD **)(a1 + 32);
    v6 = *(unsigned __int16 *)(v3 + 24);
    if (v6 != 36 && v6 != 12)
      return 0;
  }
  return v3;
}

_QWORD *sub_1C5D569A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *i;
  int v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  __int128 v30;
  _QWORD v31[18];

  v31[17] = *MEMORY[0x1E0C80C00];
  v26 = a5;
  if (!a5)
    return (_QWORD *)a3;
  v27 = v29;
  v28 = 0x2000000000;
  v12 = *(_QWORD *)(a3 + 40) + 16 * a4;
  v13 = sub_1C636D7B0(*(llvm **)v12, *(_QWORD *)(v12 + 8));
  *(_QWORD *)&v30 = a3;
  DWORD2(v30) = a4;
  sub_1C5D3E710(&v27, 5, v13, 1, (uint64_t *)&v30, 1);
  v14 = 1 << a5;
  v15 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 4);
    v15 = v28;
  }
  *((_DWORD *)v27 + v15) = v14;
  v16 = (v28 + 1);
  LODWORD(v28) = v16;
  if (v16 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v16 + 1, 4);
    LODWORD(v16) = v28;
  }
  *((_DWORD *)v27 + v16) = HIDWORD(v14);
  LODWORD(v28) = v28 + 1;
  v25 = 0;
  v8 = sub_1C6365B08(a1, (uint64_t)&v27, a2, &v25);
  if (!v8)
  {
    v24 = *(_DWORD *)(a2 + 8);
    v30 = *(_OWORD *)(*(_QWORD *)(a3 + 40) + 16 * a4);
    v8 = (_QWORD *)sub_1C636965C(a1, &v24, (unsigned __int8 **)a2, (uint64_t)&v30, &v26);
    *(_QWORD *)&v30 = a3;
    DWORD2(v30) = a4;
    sub_1C5D42768(a1, (uint64_t)v8, (uint64_t)&v30, 1);
    v17 = *(_DWORD *)(a1 + 340) + 1;
    v18 = *(_DWORD *)(a1 + 336);
    if (v17 > 2 * v18)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v18, (uint64_t)off_1E8198CA0);
      *(_QWORD *)&v30 = v31;
      *((_QWORD *)&v30 + 1) = 0x2000000000;
      v19 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v8, (unsigned int *)&v30));
      if ((_QWORD *)v30 != v31)
        free((void *)v30);
      v17 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v19 = v25;
    }
    v20 = *(_QWORD *)v19;
    if (!*(_QWORD *)v19)
      v20 = v19 | 1;
    *v8 = v20;
    *(_QWORD *)v19 = v8;
    v22 = *(_QWORD *)(a1 + 208);
    v21 = a1 + 208;
    *(_DWORD *)(v21 + 132) = v17;
    v8[1] = v22;
    v8[2] = v21;
    *(_QWORD *)(v22 + 8) = v8 + 1;
    *(_QWORD *)v21 = v8 + 1;
    for (i = *(_QWORD **)(v21 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v8);
  }
  if (v27 != v29)
    free(v27);
  return v8;
}

uint64_t *sub_1C5D56C70(uint64_t a1, uint64_t a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, __int16 a11)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  char v42;
  uint64_t v43;
  llvm::APInt *v44;
  unsigned int v45;
  uint64_t v46;
  llvm *v47;
  uint64_t v48;
  uint64_t v49;
  const llvm::APInt *v50;
  llvm *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char v54;
  char v55;
  uint64_t v56;
  char EVT;
  int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::APInt *v65;
  unsigned int v66;
  BOOL v67;
  unsigned __int8 *v68;
  int v69;
  llvm *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _BOOL4 v78;
  int v79;
  uint64_t v81;
  llvm *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  BOOL v86;
  const llvm::APInt *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int ExtendedSizeInBits;
  const char *v94;
  _QWORD *v95;
  llvm *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned __int8 *v103;
  unsigned int v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  _QWORD **v115;
  unsigned int v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  int v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  _QWORD *v142;
  llvm *v143;
  uint64_t v144;
  const llvm::APInt *v145;
  llvm::ValueHandleBase *v146;
  uint64_t v147;
  llvm::APInt *v148;
  unsigned int v149;
  uint64_t *v150;
  int v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned __int8 **v158;
  unsigned __int8 **v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *i;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  llvm::APInt *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t ***v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  unsigned int v185;
  const llvm::APInt *v186;
  char v187;
  unint64_t v188;
  llvm::ValueHandleBase *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  BOOL v194;
  unsigned int v195;
  const llvm::APInt *v196;
  char v197;
  unint64_t v198;
  uint64_t v199;
  llvm::ValueHandleBase *v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t *v207;
  uint64_t v210;
  uint64_t v212;
  uint64_t v213[2];
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  int v222;
  llvm *v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  _BYTE v227[128];
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;

  v16 = a9;
  v15 = a10;
  v236 = *MEMORY[0x1E0C80C00];
  v223 = a4;
  v224 = a5;
  v222 = a2;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 1128))(*(_QWORD *)(a1 + 24)))
  {
    v17 = sub_1C5D583CC(a1, a6);
    v18 = sub_1C5D583CC(a1, a9);
    v19 = sub_1C5D584EC(v18, a6);
    v20 = sub_1C5D584EC(v19, a9);
    if (v19)
      v21 = v20 == 0;
    else
      v21 = 0;
    v22 = !v21;
    if (v18)
      v23 = 1;
    else
      v23 = v17 == 0;
    if (!v23 || (v22 & 1) == 0)
    {
      v15 = a10 & 0xFFFFFFFF00000000 | a7;
      a7 = a7 & 0xFFFFFFFF00000000 | a10;
      goto LABEL_24;
    }
    if (*(_WORD *)(a6 + 24) == 156)
    {
      v24 = a7;
      if (*(_WORD *)(a9 + 24) == 158)
        v25 = a6;
      else
        v25 = a9;
      if (*(_WORD *)(a9 + 24) == 158)
      {
        v15 = a10 & 0xFFFFFFFF00000000 | a7;
        v24 = a7 & 0xFFFFFFFF00000000 | a10;
      }
      else
      {
        v16 = a6;
      }
      a7 = v24;
      a6 = v25;
      goto LABEL_24;
    }
  }
  v26 = a6;
  a6 = a9;
  v16 = v26;
LABEL_24:
  v210 = a1;
  v27 = *(unsigned __int16 *)(v16 + 24);
  if (v27 == 35 || v27 == 11)
    v28 = v16;
  else
    v28 = 0;
  v29 = *(unsigned __int16 *)(a6 + 24);
  if (v29 == 35 || v29 == 11)
    v31 = a6;
  else
    v31 = 0;
  v32 = sub_1C5D4F7E8(a6, v15, 0, 1);
  v35 = v32;
  if ((int)a2 <= 145)
  {
    if ((int)a2 <= 81)
    {
      switch((int)a2)
      {
        case '5':
          if (*(_WORD *)(v16 + 24) == 54)
          {
            v36 = *(_QWORD *)(v31 + 80);
            v37 = (_QWORD *)(v36 + 24);
            if (*(_DWORD *)(v36 + 32) >= 0x41u)
              v37 = (_QWORD *)*v37;
            v38 = *(_DWORD *)v37;
            v39 = *(_QWORD *)(v16 + 32);
            return *(uint64_t **)(v39 + 40 * v38);
          }
          if (!v28)
            goto LABEL_247;
          if ((_BYTE)a4)
            ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v223);
          else
            ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v223);
          v140 = ExtendedSizeInBits;
          if ((_DWORD)v94 == 1)
          v141 = *(_QWORD *)(v31 + 80);
          v142 = (_QWORD *)(v141 + 24);
          if (*(_DWORD *)(v141 + 32) >= 0x41u)
            v142 = (_QWORD *)*v142;
          llvm::APInt::extractBits((llvm::APInt *)(*(_QWORD *)(v28 + 80) + 24), v140, *(_DWORD *)v142 * v140, (unsigned int *)&v232);
          v143 = v223;
          v144 = v224;
          v146 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v210 + 56), (llvm::LLVMContext *)&v232, v145);
          v16 = sub_1C5D3FAF8(v210, v146, a3, v143, v144, 0, 0);
          if (v233 >= 0x41)
          {
            v98 = (uint64_t)v232;
            if (v232)
              goto LABEL_234;
          }
          return (uint64_t *)v16;
        case '6':
        case '7':
          goto LABEL_247;
        case '8':
        case '9':
          goto LABEL_53;
        case ':':
          if ((_BYTE)a4)
          {
            v56 = v210;
            if (a4 - 15 >= 0x9C)
              goto LABEL_159;
            EVT = sub_1C47F37A0((unsigned __int8 *)&v223);
          }
          else
          {
            v56 = v210;
            if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
              goto LABEL_159;
            EVT = llvm::EVT::getEVT(*(llvm::EVT **)(a5 + 24), 0, v34);
          }
          if (EVT == 2)
          {
            v51 = v223;
            v52 = v224;
            v48 = v56;
            v49 = 171;
            v50 = a3;
            goto LABEL_158;
          }
LABEL_159:
          if (!v31 || *(_WORD *)(v16 + 24) != 318 || (a11 & 4) == 0)
            goto LABEL_247;
          v95 = (_QWORD *)(*(_QWORD *)(v31 + 80) + 24);
          v96 = v223;
          v97 = v224;
          llvm::APInt::operator*(*(_QWORD *)(**(_QWORD **)(v16 + 32) + 80) + 24, v95, (uint64_t)&v220);
          v16 = sub_1C5C9E150(v210, a3, (uint64_t)v96, v97, (llvm::APInt *)&v220);
          if (v221 < 0x41)
            return (uint64_t *)v16;
          v98 = v220;
          if (!v220)
            return (uint64_t *)v16;
          goto LABEL_234;
        case ';':
        case '<':
        case '=':
        case '>':
          goto LABEL_50;
        default:
          if ((_DWORD)a2 != 2)
          {
            if ((a2 - 3) >= 2)
              goto LABEL_247;
            v99 = *(unsigned __int8 *)(a6 + 80);
            v100 = *(_QWORD *)(a6 + 88);
            v102 = sub_1C6131264((unsigned __int8 *)&v223, (uint64_t)v33, v34);
            if (v102 != v99 || !v102 && v101 != v100)
              goto LABEL_247;
            return (uint64_t *)v16;
          }
          if (*(_WORD *)(v16 + 24) == 1)
            return (uint64_t *)a6;
          if (*(_WORD *)(a6 + 24) == 1)
            return (uint64_t *)v16;
          if (v16 == a6 && (_DWORD)a7 == (_DWORD)v15)
            return (uint64_t *)a6;
          break;
      }
      goto LABEL_247;
    }
    if ((a2 - 96) < 5)
    {
      v41 = sub_1C5D58A14(v210, a2, v16, a7, a6, v15, a11);
      if (!v41)
        goto LABEL_247;
      return v41;
    }
    if ((a2 - 82) >= 4)
      goto LABEL_247;
LABEL_50:
    if ((_BYTE)a4)
    {
      if (a4 - 15 >= 0x9C)
        goto LABEL_247;
      v42 = sub_1C47F37A0((unsigned __int8 *)&v223);
    }
    else
    {
      if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
        goto LABEL_247;
      v42 = llvm::EVT::getEVT(*(llvm::EVT **)(a5 + 24), 0, v34);
    }
    if (v42 == 2)
    {
      if ((a2 & 0xFFFFFFFE) == 0x52)
      {
LABEL_143:
        v51 = v223;
        v52 = v224;
        v48 = v210;
        v50 = a3;
        v91 = a7;
        v49 = 172;
LABEL_144:
        v92 = v16;
      }
      else
      {
        if ((a2 & 0xFFFFFFFE) != 0x54)
          goto LABEL_247;
        v47 = v223;
        v46 = v224;
        sub_1C63293BC(v210, a3, (_BOOL8)v223, v224, 0, 0);
        sub_1C5D56C70(v210, 173, a3, v47, v46, a6, v15);
        v48 = v210;
        v49 = 171;
        v50 = a3;
        v51 = v47;
        v52 = v46;
LABEL_158:
        v92 = v16;
        v91 = a7;
      }
      return (uint64_t *)sub_1C5D56C70(v48, v49, v50, v51, v52, v92, v91);
    }
LABEL_247:
    v232 = (uint64_t *)v16;
    LODWORD(v233) = a7;
    v234 = a6;
    v235 = v15;
    v150 = sub_1C5D53628(v210, a2, (const char *)a3, v223, v224, (uint64_t)&v232, 2);
    if (v150)
      return v150;
    if (*(_WORD *)(v16 + 24) == 51)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v210 + 24) + 1128))(*(_QWORD *)(v210 + 24), a2))
      {
        v152 = v15;
        LODWORD(v15) = a7;
        v153 = v16;
        v16 = a6;
        LODWORD(a7) = v152;
      }
      else
      {
        if ((a2 - 57) <= 0x1C)
        {
          if (((1 << (a2 - 57)) & 0x1800003C) != 0)
            return (uint64_t *)sub_1C6366AB4(v210, 0, a3, v223, v224, 0, 0);
          if ((_DWORD)a2 == 57)
            goto LABEL_258;
        }
        v153 = a6;
        if ((_DWORD)a2 == 204)
          goto LABEL_258;
      }
    }
    else
    {
      v153 = a6;
    }
    if (*(_WORD *)(v153 + 24) == 51)
    {
      if ((int)a2 > 170)
      {
        switch((_DWORD)a2)
        {
          case 0xAB:
            return (uint64_t *)sub_1C6366AB4(v210, 0, a3, v223, v224, 0, 0);
          case 0xAC:
            return (uint64_t *)sub_1C63293BC(v210, a3, (_BOOL8)v223, v224, 0, 0);
          case 0xAD:
            if (*(_WORD *)(v16 + 24) != 51)
              goto LABEL_258;
            return (uint64_t *)sub_1C6366AB4(v210, 0, a3, v223, v224, 0, 0);
        }
      }
      else
      {
        v154 = a2 - 56;
        if ((a2 - 56) <= 0x1D)
        {
          if (((1 << v154) & 0x7B) != 0)
          {
LABEL_258:
            v70 = v223;
            v71 = v224;
            v48 = v210;
            return sub_1C61312D0(v48, v70, v71);
          }
          if (((1 << v154) & 0x30000004) == 0)
          {
            if (((1 << v154) & 0xC000000) == 0)
              goto LABEL_273;
            return (uint64_t *)sub_1C63293BC(v210, a3, (_BOOL8)v223, v224, 0, 0);
          }
          return (uint64_t *)sub_1C6366AB4(v210, 0, a3, v223, v224, 0, 0);
        }
      }
    }
LABEL_273:
    v155 = sub_1C636D7B0(v223, v224);
    v213[0] = v155;
    v213[1] = 1;
    v228 = v16;
    v229 = a7;
    v230 = v153;
    v231 = v15;
    if (v223 == 172)
    {
      LODWORD(v232) = *((_DWORD *)a3 + 2);
      v156 = sub_1C6368F3C(v210, &v222, (int *)&v232, (unsigned __int8 **)a3, v213);
      sub_1C5D42768(v210, (uint64_t)v156, (uint64_t)&v228, 2);
      v157 = v210;
    }
    else
    {
      v225 = v227;
      v226 = 0x2000000000;
      sub_1C5D3E710(&v225, (unsigned __int16)a2, v155, 1, &v228, 2);
      v212 = 0;
      v158 = sub_1C6365B08(v210, (uint64_t)&v225, (uint64_t)a3, &v212);
      v159 = v158;
      if (v158)
      {
        v156 = 0;
        *((_WORD *)v158 + 36) &= a11 | 0xF001;
        v150 = (uint64_t *)v158;
      }
      else
      {
        LODWORD(v232) = *((_DWORD *)a3 + 2);
        v156 = sub_1C6368F3C(v210, &v222, (int *)&v232, (unsigned __int8 **)a3, v213);
        *((_WORD *)v156 + 36) = a11;
        sub_1C5D42768(v210, (uint64_t)v156, (uint64_t)&v228, 2);
        v201 = *(_DWORD *)(v210 + 340) + 1;
        v202 = *(_DWORD *)(v210 + 336);
        if (v201 > 2 * v202)
        {
          llvm::FoldingSetBase::GrowBucketCount(v210 + 328, 2 * v202, (uint64_t)off_1E8198CA0);
          v232 = &v234;
          v233 = 0x2000000000;
          v203 = *(_QWORD *)(v210 + 328)
               + 8
               * ((*(_DWORD *)(v210 + 336) - 1) & sub_1C6370764(v210 + 328, (uint64_t)v156, (unsigned int *)&v232));
          if (v232 != &v234)
            free(v232);
          v201 = *(_DWORD *)(v210 + 340) + 1;
        }
        else
        {
          v203 = v212;
        }
        *(_DWORD *)(v210 + 340) = v201;
        v204 = *(_QWORD *)v203;
        if (!*(_QWORD *)v203)
          v204 = v203 | 1;
        *v156 = v204;
        *(_QWORD *)v203 = v156;
      }
      if (v225 != v227)
        free(v225);
      v157 = v210;
      if (v159)
        return v150;
    }
    v161 = *(_QWORD *)(v157 + 208);
    v160 = (_QWORD *)(v157 + 208);
    v156[1] = v161;
    v156[2] = v160;
    *(_QWORD *)(v161 + 8) = v156 + 1;
    *v160 = v156 + 1;
    for (i = (_QWORD *)v160[56]; i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v156);
    return v156;
  }
  switch((int)a2)
  {
    case 146:
      v232 = (uint64_t *)v16;
      LODWORD(v233) = a7;
      v234 = a6;
      v235 = v15;
      v41 = sub_1C5D55334(a4, a5, (uint64_t)&v232, 2, v210);
      if (!v41)
        goto LABEL_247;
      return v41;
    case 147:
    case 150:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 174:
      goto LABEL_247;
    case 148:
      v58 = *(unsigned __int16 *)(v16 + 24);
      if (v58 == 51 || *(_WORD *)(a6 + 24) == 51)
        goto LABEL_110;
      v48 = v210;
      if (!v31)
      {
        v63 = (uint64_t)a3;
        v59 = a7;
        goto LABEL_203;
      }
      v59 = a7;
      v60 = *(_QWORD *)(v16 + 40) + 16 * a7;
      v61 = *(char **)v60;
      v62 = *(_QWORD *)(v60 + 8);
      if ((_BYTE)v61)
      {
        v63 = (uint64_t)a3;
        if (v61 - 15 >= 0x69)
          goto LABEL_187;
      }
      else
      {
        v63 = (uint64_t)a3;
        if (*(_BYTE *)(v62 + 8) != 18)
          goto LABEL_187;
      }
      v166 = *(_QWORD *)(v31 + 80);
      v167 = (llvm::APInt *)(v166 + 24);
      v232 = (uint64_t *)v61;
      v233 = v62;
      v168 = sub_1C612FE00((llvm::EVT *)&v232, v33);
      v169 = *(_DWORD *)(v166 + 32);
      if (v169 >= 0x41)
      {
        if (v169 - llvm::APInt::countLeadingZerosSlowCase(v167) > 0x40)
        {
          v48 = v210;
LABEL_363:
          v70 = v223;
          v71 = v224;
          return sub_1C61312D0(v48, v70, v71);
        }
        v167 = *(llvm::APInt **)v167;
      }
      v63 = (uint64_t)a3;
      v48 = v210;
      v59 = a7;
      if (*(_QWORD *)v167 >= (unint64_t)v168)
        goto LABEL_363;
LABEL_187:
      v109 = *(unsigned int **)(v16 + 32);
      v110 = *(_QWORD *)(*(_QWORD *)v109 + 40);
      v111 = (uint64_t **)(v110 + 16 * v109[2]);
      if (*v111)
      {
        if (*v111 - 15 < 0x69)
          goto LABEL_189;
LABEL_197:
        v58 = *(unsigned __int16 *)(v16 + 24);
        goto LABEL_198;
      }
      if (*((_BYTE *)v111[1] + 8) != 18)
        goto LABEL_197;
LABEL_189:
      v58 = *(unsigned __int16 *)(v16 + 24);
      if (v58 == 149)
      {
        if (!*(_WORD *)(v16 + 56))
          goto LABEL_247;
        v112 = (uint64_t)v111[1];
        v232 = *v111;
        v233 = v112;
        v113 = sub_1C612FE00((llvm::EVT *)&v232, v33);
        v114 = *(_QWORD *)(v31 + 80);
        v115 = (_QWORD **)(v114 + 24);
        v116 = *(_DWORD *)(v114 + 32);
        v117 = v115;
        if (v116 >= 0x41)
          v117 = *v115;
        v118 = (uint64_t *)(*(_QWORD *)(v16 + 32) + 40 * (*v117 / (unint64_t)v113));
        v119 = *v118;
        v120 = v118[1];
        if (v116 >= 0x41)
          v115 = (_QWORD **)*v115;
        sub_1C6366C9C(v210, (unint64_t)*v115 % v113, (uint64_t)a3, 0);
        v50 = a3;
        v48 = v210;
        v49 = 148;
        v51 = v223;
        v52 = v224;
        v92 = v119;
        v91 = v120;
        return (uint64_t *)sub_1C5D56C70(v48, v49, v50, v51, v52, v92, v91);
      }
LABEL_198:
      if (v58 != 156)
      {
        if (v58 == 146)
        {
          v121 = *(_QWORD *)(v31 + 80);
          v122 = (unsigned int *)(v121 + 24);
          if (*(_DWORD *)(v121 + 32) >= 0x41u)
            v122 = *(unsigned int **)v122;
          v123 = *v122;
          v16 = *(_QWORD *)&v109[10 * *v122];
          v110 = *(_QWORD *)(v16 + 40);
          goto LABEL_223;
        }
LABEL_203:
        if (v58 != 147)
        {
          if (v58 != 151)
            goto LABEL_247;
          v134 = *(_QWORD *)(v16 + 40) + 16 * v59;
          v135 = *(char **)v134;
          v136 = *(_QWORD *)(v134 + 8);
          if ((_BYTE)v135)
          {
            if (v135 - 15 >= 0x69)
              goto LABEL_247;
          }
          else if (*(_BYTE *)(v136 + 8) != 18)
          {
            goto LABEL_247;
          }
          v232 = (uint64_t *)v135;
          v233 = v136;
          if (sub_1C612FE00((llvm::EVT *)&v232, v33) != 1)
            goto LABEL_247;
          v51 = v223;
          v52 = v224;
          v207 = *(uint64_t **)(v16 + 32);
          v92 = *v207;
          v91 = v207[1];
          v50 = a3;
          v48 = v210;
          v49 = 148;
          return (uint64_t *)sub_1C5D56C70(v48, v49, v50, v51, v52, v92, v91);
        }
        v124 = *(uint64_t **)(v16 + 32);
        v125 = v124[10];
        v126 = *(unsigned __int16 *)(v125 + 24);
        if (v126 != 35 && v126 != 11 || !v31)
          goto LABEL_247;
        v127 = *(_QWORD *)(v125 + 80);
        v128 = (_QWORD *)(v127 + 24);
        if (*(_DWORD *)(v127 + 32) >= 0x41u)
          v128 = (_QWORD *)*v128;
        v129 = (_QWORD *)*v128;
        v130 = *(_QWORD *)(v31 + 80);
        v131 = (_QWORD *)(v130 + 24);
        if (*(_DWORD *)(v130 + 32) >= 0x41u)
          v131 = (_QWORD *)*v131;
        if (v129 != (_QWORD *)*v131)
        {
          v51 = v223;
          v52 = v224;
          v92 = *v124;
          v91 = v124[1];
          v49 = 148;
          v50 = (const llvm::APInt *)v63;
          return (uint64_t *)sub_1C5D56C70(v48, v49, v50, v51, v52, v92, v91);
        }
        v16 = v124[5];
        v132 = (unsigned __int8 *)(*(_QWORD *)(v16 + 40) + 16 * *((unsigned int *)v124 + 12));
        if (v223 == *v132)
        {
          if ((_BYTE)v223)
            return (uint64_t *)v16;
          v133 = v224;
          if (v224 == *((_QWORD *)v132 + 1))
            return (uint64_t *)v16;
        }
        else
        {
          if ((_BYTE)v223)
          {
            v133 = v224;
            if (((_BYTE)v223 + 104) < 0x13u
              || ((_BYTE)v223 - 8) < 7u
              || ((_BYTE)v223 - 75) < 0x2Du)
            {
              return (uint64_t *)sub_1C5D3F69C(v48, v124[5], v124[6], v63, (uint64_t)v223, v133);
            }
            return (uint64_t *)sub_1C6366480(v48, v124[5], v124[6], v63, (uint64_t)v223, v133);
          }
          v133 = v224;
        }
        if ((*(_DWORD *)(v133 + 8) & 0xFE) == 0x12)
          v205 = *(unsigned __int8 *)(**(_QWORD **)(v133 + 16) + 8);
        else
          v205 = *(_DWORD *)(v133 + 8);
        if (v205 <= 6)
          return (uint64_t *)sub_1C5D3F69C(v48, v124[5], v124[6], v63, (uint64_t)v223, v133);
        return (uint64_t *)sub_1C6366480(v48, v124[5], v124[6], v63, (uint64_t)v223, v133);
      }
      v123 = 0;
      v16 = *(_QWORD *)v109;
LABEL_223:
      v137 = *(_QWORD *)&v109[10 * v123 + 2];
      v138 = (unsigned __int8 *)(v110 + 16 * v137);
      if (v223 != *v138)
      {
        v139 = v224;
        return (uint64_t *)sub_1C63663BC(v48, v16, v137, v63, (uint64_t)v223, v139);
      }
      if (!(_BYTE)v223)
      {
        v139 = v224;
        if (v224 != *((_QWORD *)v138 + 1))
          return (uint64_t *)sub_1C63663BC(v48, v16, v137, v63, (uint64_t)v223, v139);
      }
      return (uint64_t *)v16;
    case 149:
      v232 = (uint64_t *)v16;
      LODWORD(v233) = a7;
      v234 = a6;
      v235 = v15;
      v41 = sub_1C5D58594((uint64_t)a3, a4, a5, (unsigned int *)&v232, 2, v210);
      if (!v41)
        goto LABEL_247;
      return v41;
    case 151:
      v68 = (unsigned __int8 *)(*(_QWORD *)(v16 + 40) + 16 * a7);
      if (a4 == *v68 && ((_BYTE)a4 || a5 == *((_QWORD *)v68 + 1)))
        return (uint64_t *)v16;
      v69 = *(unsigned __int16 *)(v16 + 24);
      if (v69 == 149)
      {
        if (!*(_WORD *)(v16 + 56))
          goto LABEL_247;
        v103 = (unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(v16 + 32) + 40)
                                 + 16 * *(unsigned int *)(*(_QWORD *)(v16 + 32) + 8));
        if (a4 != *v103 || !(_BYTE)a4 && a5 != *((_QWORD *)v103 + 1))
          goto LABEL_247;
        v104 = sub_1C52B71D4((unsigned __int8 *)&v223);
        v105 = *(_QWORD *)(v31 + 80);
        v106 = (_QWORD *)(v105 + 24);
        if (*(_DWORD *)(v105 + 32) >= 0x41u)
          v106 = (_QWORD *)*v106;
        v39 = *(_QWORD *)(v16 + 32);
        v38 = *v106 / (unint64_t)v104;
        return *(uint64_t **)(v39 + 40 * v38);
      }
      if (v69 != 150)
      {
        if (v69 != 51)
          goto LABEL_247;
LABEL_110:
        v48 = v210;
        v70 = a4;
        v71 = a5;
        return sub_1C61312D0(v48, v70, v71);
      }
      v107 = *(_QWORD *)(v16 + 32);
      if (a6 == *(_QWORD *)(v107 + 80) && *(_DWORD *)(v107 + 88) == (_DWORD)v15)
      {
        v108 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v107 + 40) + 40) + 16 * *(unsigned int *)(v107 + 48));
        if (a4 == *v108 && ((_BYTE)a4 || a5 == *((_QWORD *)v108 + 1)))
          return *(uint64_t **)(v107 + 40);
      }
      goto LABEL_247;
    case 159:
    case 160:
      goto LABEL_50;
    case 167:
    case 170:
      if ((_BYTE)a4)
      {
        if (a4 - 15 >= 0x9C)
          goto LABEL_247;
        v40 = sub_1C47F37A0((unsigned __int8 *)&v223);
      }
      else
      {
        if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
          goto LABEL_247;
        v40 = llvm::EVT::getEVT(*(llvm::EVT **)(a5 + 24), 0, v34);
      }
      if (v40 == 2)
        goto LABEL_143;
      goto LABEL_247;
    case 168:
    case 169:
      if ((_BYTE)a4)
      {
        if (a4 - 15 >= 0x9C)
          goto LABEL_247;
        v54 = sub_1C47F37A0((unsigned __int8 *)&v223);
      }
      else
      {
        if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
          goto LABEL_247;
        v54 = llvm::EVT::getEVT(*(llvm::EVT **)(a5 + 24), 0, v34);
      }
      if (v54 != 2)
        goto LABEL_247;
      v51 = v223;
      v52 = v224;
      v48 = v210;
      v50 = a3;
      v91 = a7;
      v49 = 171;
      goto LABEL_144;
    case 171:
      if (!v32)
        goto LABEL_247;
      v64 = *(_QWORD *)(v32 + 80);
      v65 = (llvm::APInt *)(v64 + 24);
      v66 = *(_DWORD *)(v64 + 32);
      if (v66 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v64 + 24)) != v66)
        {
          if (llvm::APInt::countTrailingOnesSlowCase(v65) == v66)
            return (uint64_t *)v16;
          goto LABEL_247;
        }
      }
      else if (*(_QWORD *)v65)
      {
        if (v66)
          v67 = *(_QWORD *)v65 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
        else
          v67 = 1;
        if (!v67)
          goto LABEL_247;
        return (uint64_t *)v16;
      }
      return (uint64_t *)a6;
    case 172:
    case 173:
LABEL_53:
      if (!v32)
        goto LABEL_73;
      v43 = *(_QWORD *)(v32 + 80);
      v44 = (llvm::APInt *)(v43 + 24);
      v45 = *(_DWORD *)(v43 + 32);
      if (v45 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v44) == v45)
          return (uint64_t *)v16;
      }
      else if (!*(_QWORD *)v44)
      {
        return (uint64_t *)v16;
      }
LABEL_73:
      if ((a2 & 0xFFFFFFFE) != 0x38)
        goto LABEL_247;
      if ((_BYTE)a4)
      {
        if (a4 - 15 >= 0x9C)
          goto LABEL_247;
        v55 = sub_1C47F37A0((unsigned __int8 *)&v223);
      }
      else
      {
        if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
          goto LABEL_247;
        v55 = llvm::EVT::getEVT(*(llvm::EVT **)(a5 + 24), 0, v34);
      }
      if (v55 != 2)
        goto LABEL_247;
      v51 = v223;
      v52 = v224;
      v48 = v210;
      v50 = a3;
      v91 = a7;
      v49 = 173;
      goto LABEL_144;
    case 175:
      if (!v31 || *(_WORD *)(v16 + 24) != 318 || (a11 & 4) == 0)
        goto LABEL_236;
      v170 = *(_QWORD *)(**(_QWORD **)(v16 + 32) + 80);
      v171 = (uint64_t ***)(*(_QWORD *)(v31 + 80) + 24);
      v172 = *(unsigned int *)(v170 + 32);
      v219 = v172;
      if (v172 > 0x40)
      {
        v173 = (void *)operator new[]();
        memcpy(v173, *(const void **)(v170 + 24), ((v172 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v173 = *(void **)(v170 + 24);
      }
      v218 = (uint64_t)v173;
      v206 = sub_1C47EE5B8(v171, v172);
      sub_1C4888094((uint64_t)&v218, v206);
      v16 = sub_1C5C9E150(v210, a3, (uint64_t)a4, a5, (llvm::APInt *)&v218);
      if (v219 < 0x41)
        return (uint64_t *)v16;
      v98 = v218;
      if (!v218)
        return (uint64_t *)v16;
      goto LABEL_234;
    case 176:
    case 177:
LABEL_236:
      v41 = sub_1C63696C4(v210, v16, a7, a6, v15);
      if (!v41)
        goto LABEL_237;
      return v41;
    case 178:
    case 179:
LABEL_237:
      if (a4 == 2)
        return (uint64_t *)v16;
      if (!v35)
        goto LABEL_247;
      v147 = *(_QWORD *)(v35 + 80);
      v148 = (llvm::APInt *)(v147 + 24);
      v149 = *(_DWORD *)(v147 + 32);
      if (v149 <= 0x40)
      {
        if (*(_QWORD *)v148)
          goto LABEL_247;
        return (uint64_t *)v16;
      }
      if (llvm::APInt::countLeadingZerosSlowCase(v148) == v149)
        return (uint64_t *)v16;
      goto LABEL_247;
    default:
      if ((_DWORD)a2 == 204)
      {
        v72 = *(_QWORD *)(a6 + 88);
        v225 = *(void **)(a6 + 80);
        v226 = v72;
        if (a4 == v225 && ((_BYTE)a4 || v72 == a5))
          return (uint64_t *)v16;
        if (v28)
        {
          v163 = *(_QWORD *)(v28 + 80);
          v164 = *(unsigned int *)(v163 + 32);
          v217 = v164;
          if (v164 > 0x40)
          {
            v165 = (void *)operator new[]();
            memcpy(v165, *(const void **)(v163 + 24), ((unint64_t)(v164 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v165 = *(void **)(v163 + 24);
          }
          v216 = (uint64_t)v165;
          v195 = sub_1C6131328((unsigned __int8 *)&v225, (uint64_t)v33, v34);
          sub_1C4888094((uint64_t)&v216, v164 - v195);
          if (v217 > 0x40)
          {
            llvm::APInt::ashrSlowCase((unsigned int *)&v216, v217 - v195);
            v199 = v210;
          }
          else
          {
            if (v195)
              v197 = v217 - v195;
            else
              v197 = 63;
            if (v217)
              v198 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v217;
            else
              v198 = 0;
            v199 = v210;
            v216 = v198 & (v216 << -(char)v217 >> -(char)v217 >> v197);
          }
          v200 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v199 + 56), (llvm::LLVMContext *)&v216, v196);
          v16 = sub_1C5D3FAF8(v199, v200, a3, a4, a5, 0, 0);
          if (v217 >= 0x41)
          {
            v98 = v216;
            if (v216)
LABEL_234:
              MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
          }
        }
        else
        {
          if (*(_WORD *)(v16 + 24) != 146)
            goto LABEL_247;
          v73 = *(unsigned int **)(v16 + 32);
          if (*(_WORD *)(v16 + 56))
          {
            v74 = 40 * *(unsigned __int16 *)(v16 + 56);
            v75 = *(_QWORD *)(v16 + 32);
            do
            {
              v76 = *(unsigned __int16 *)(*(_QWORD *)v75 + 24);
              v78 = v76 != 11 && v76 != 35;
              if (v76 == 51)
                v79 = 3;
              else
                v79 = v78;
              if (v79 != 3 && v79 != 0)
                goto LABEL_247;
              v75 += 40;
              v74 -= 40;
            }
            while (v74);
          }
          v232 = &v234;
          v233 = 0x800000000;
          v81 = *(_QWORD *)(*(_QWORD *)v73 + 40) + 16 * v73[2];
          v82 = *(llvm **)v81;
          v83 = *(_QWORD *)(v81 + 8);
          v84 = sub_1C612FE00((llvm::EVT *)&v223, v33);
          v87 = a3;
          v88 = v210;
          if (v84)
          {
            v174 = 0;
            v175 = 40 * v84;
            do
            {
              v176 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + v174);
              if (*(_WORD *)(v176 + 24) == 51)
              {
                v177 = sub_1C61312D0(v88, v82, v83);
                v178 = v85;
                v179 = v233;
                if (v233 >= (unint64_t)HIDWORD(v233))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)&v234, v233 + 1, 16);
                  v179 = v233;
                }
                v180 = (char *)&v232[2 * v179];
                *(_QWORD *)v180 = v177;
                *((_QWORD *)v180 + 1) = v178;
                LODWORD(v233) = v233 + 1;
                v87 = a3;
              }
              else
              {
                v181 = *(_QWORD *)(v176 + 80);
                v182 = *(unsigned int *)(v181 + 32);
                if (v182 > 0x40)
                {
                  v184 = (void *)operator new[]();
                  memcpy(v184, *(const void **)(v181 + 24), ((unint64_t)(v182 + 63) >> 3) & 0x3FFFFFF8);
                  v215 = v182;
                  v183 = (void *)operator new[]();
                  memcpy(v183, v184, (((unint64_t)v215 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v183 = *(void **)(v181 + 24);
                  v215 = *(_DWORD *)(v181 + 32);
                  v184 = v183;
                }
                v214 = (uint64_t)v183;
                v185 = sub_1C6131328((unsigned __int8 *)&v225, v85, v86);
                sub_1C4888094((uint64_t)&v214, v215 - v185);
                v88 = v210;
                if (v215 > 0x40)
                {
                  llvm::APInt::ashrSlowCase((unsigned int *)&v214, v215 - v185);
                }
                else
                {
                  if (v185)
                    v187 = v215 - v185;
                  else
                    v187 = 63;
                  if (v215)
                    v188 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v215;
                  else
                    v188 = 0;
                  v214 = v188 & (v214 << -(char)v215 >> -(char)v215 >> v187);
                }
                v189 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v210 + 56), (llvm::LLVMContext *)&v214, v186);
                v190 = sub_1C5D3FAF8(v210, v189, a3, v82, v83, 0, 0);
                v191 = v85;
                v192 = v233;
                if (v233 >= (unint64_t)HIDWORD(v233))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v232, (uint64_t)&v234, v233 + 1, 16);
                  v192 = v233;
                }
                v193 = &v232[2 * v192];
                *v193 = v190;
                v193[1] = v191;
                LODWORD(v233) = v233 + 1;
                if (v215 >= 0x41 && v214)
                  MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
                v194 = v182 < 0x41 || v184 == 0;
                v87 = a3;
                if (!v194)
                  MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
              }
              v174 += 40;
            }
            while (v175 != v174);
          }
          v89 = *(_QWORD *)(v88 + 832);
          if (v89)
            v90 = *(unsigned __int16 *)(v89 + 8);
          else
            v90 = 0;
          v16 = sub_1C636D0C8(v88, 146, v87, v223, v224, v232, v233, v90);
          if (v232 != &v234)
            free(v232);
        }
      }
      else
      {
        if ((_DWORD)a2 != 212)
          goto LABEL_247;
        v53 = (unsigned __int8 *)(*(_QWORD *)(v16 + 40) + 16 * a7);
        if (*v53 != a4 || !(_BYTE)a4 && *((_QWORD *)v53 + 1) != a5)
          goto LABEL_247;
      }
      return (uint64_t *)v16;
  }
}

uint64_t sub_1C5D583CC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  int v14;

  v3 = *(unsigned __int16 *)(a2 + 24);
  if (v3 > 0x26)
    goto LABEL_8;
  if (((1 << v3) & 0x6000006000) == 0)
  {
    result = a2;
    if (((1 << v3) & 0x800000800) != 0)
      return result;
LABEL_8:
    if (v3 == 146)
    {
      if (*(_WORD *)(a2 + 56))
      {
        v7 = *(_QWORD *)(a2 + 32);
        v8 = 40 * *(unsigned __int16 *)(a2 + 56);
        while (1)
        {
          v9 = *(unsigned __int16 *)(*(_QWORD *)v7 + 24);
          v10 = v9 == 11 || v9 == 35;
          v11 = !v10;
          v12 = v9 == 51 ? 3 : v11;
          if (v12 != 3 && v12 != 0)
            break;
          v7 += 40;
          v8 -= 40;
          if (!v8)
            return a2;
        }
        return 0;
      }
      return a2;
    }
LABEL_27:
    if (v3 != 156)
      return 0;
    v14 = *(unsigned __int16 *)(**(_QWORD **)(a2 + 32) + 24);
    if (v14 != 35 && v14 != 11)
      return 0;
    return a2;
  }
  result = 0;
  if (a2)
  {
    if (v3 == 13)
    {
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 1584))(*(_QWORD *)(a1 + 24), a2);
      result = a2;
      if ((v6 & 1) == 0)
      {
        v3 = *(unsigned __int16 *)(a2 + 24);
        goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t sub_1C5D584EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _BOOL4 v8;
  int v9;
  int v11;

  result = a2;
  v3 = *(unsigned __int16 *)(a2 + 24);
  if (v3 <= 0x91)
  {
    if (v3 == 12 || v3 == 36)
      return result;
    return 0;
  }
  if (v3 != 156)
  {
    if (v3 == 146)
    {
      if (!*(_WORD *)(a2 + 56))
        return result;
      v4 = *(_QWORD *)(a2 + 32);
      v5 = 40 * *(unsigned __int16 *)(a2 + 56);
      while (1)
      {
        v6 = *(unsigned __int16 *)(*(_QWORD *)v4 + 24);
        v7 = v6 == 12 || v6 == 36;
        v8 = !v7;
        v9 = v6 == 51 ? 3 : v8;
        if (v9 != 3 && v9 != 0)
          break;
        v4 += 40;
        v5 -= 40;
        if (!v5)
          return result;
      }
    }
    return 0;
  }
  v11 = *(unsigned __int16 *)(**(_QWORD **)(a2 + 32) + 24);
  if (v11 != 36 && v11 != 12)
    return 0;
  return result;
}

_QWORD *sub_1C5D58594(uint64_t a1, llvm *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v53;
  unsigned int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  llvm **v61;
  uint64_t ExtendedSizeInBits;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  llvm *v69;
  uint64_t v70;
  llvm *v71;
  uint64_t v72;
  __int128 v73;
  void *v74[2];
  _QWORD v75[34];

  v6 = a4;
  v75[32] = *MEMORY[0x1E0C80C00];
  v71 = a2;
  v72 = a3;
  if (a5 == 1)
    return *(_QWORD **)a4;
  if (!a5)
    return sub_1C61312D0(a6, a2, a3);
  v9 = 16 * a5;
  v10 = a4;
  v11 = &a4[4 * a5];
  while (*(_WORD *)(*(_QWORD *)v10 + 24) == 51)
  {
    v10 += 4;
    v9 -= 16;
    if (!v9)
      return sub_1C61312D0(a6, a2, a3);
  }
  v12 = a5;
  if (!(_DWORD)a5)
    return 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = a4 + 2;
  while (1)
  {
    v17 = *((_QWORD *)v16 - 1);
    *(_OWORD *)v74 = *(_OWORD *)(*(_QWORD *)(v17 + 40) + 16 * *v16);
    v18 = sub_1C52B71D4((unsigned __int8 *)v74);
    if (*(_WORD *)(v17 + 24) != 151)
    {
      v24 = v71;
LABEL_29:
      if (v24)
        goto LABEL_30;
LABEL_54:
      if (*(_BYTE *)(v72 + 8) == 19)
        return 0;
LABEL_31:
      v69 = (llvm *)sub_1C6131264((unsigned __int8 *)&v71, v19, v20);
      v70 = (uint64_t)v30;
      v74[0] = v75;
      v74[1] = (void *)0x1000000000;
      do
      {
        v31 = *(_QWORD *)v6;
        v73 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 40) + 16 * v6[2]);
        v32 = *(unsigned __int16 *)(v31 + 24);
        if (v32 == 146)
        {
          sub_1C6132D88((unsigned int *)v74, *(char **)(v31 + 32), (char *)(*(_QWORD *)(v31 + 32) + 40 * *(unsigned __int16 *)(v31 + 56)));
        }
        else
        {
          if (v32 != 51)
          {
            v7 = 0;
            goto LABEL_58;
          }
          v33 = sub_1C612FE00((llvm::EVT *)&v73, v30);
          v34 = sub_1C61312D0(a6, v69, v70);
          sub_1C63299CC((unsigned int *)v74, v33, (uint64_t)v34, v35);
        }
        v6 += 4;
      }
      while (v6 != v11);
      if (!LODWORD(v74[1]))
      {
LABEL_38:
        v38 = sub_1C6131264((unsigned __int8 *)&v71, (uint64_t)v30, v36);
        if ((v69 != v38 || !(_BYTE)v69 && v70 != v37)
          && sub_1C50989E0((unsigned __int8 *)&v69, v38, v37)
          && LODWORD(v74[1]))
        {
          v39 = (char *)v74[0];
          v40 = 16 * LODWORD(v74[1]);
          v41 = (uint64_t *)((char *)v74[0] + 8);
          do
          {
            v42 = *(v41 - 1);
            if (*(_WORD *)(v42 + 24) == 51)
            {
              *(v41 - 1) = (uint64_t)sub_1C61312D0(a6, v69, v70);
              v44 = (uint64_t *)(v39 + 8);
            }
            else
            {
              v45 = (_QWORD *)(*(_QWORD *)(v42 + 40) + 16 * *(unsigned int *)v41);
              v46 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, llvm *, uint64_t))(**(_QWORD **)(a6 + 24) + 1192))(*(_QWORD *)(a6 + 24), *v45, v45[1], v69, v70);
              v47 = *(v41 - 1);
              v48 = *v41;
              if (v46)
                v49 = sub_1C6366544(a6, v47, v48, a1, (uint64_t)v69, v70);
              else
                v49 = sub_1C6366480(a6, v47, v48, a1, (uint64_t)v69, v70);
              *(v41 - 1) = v49;
              v44 = v41;
            }
            *(_DWORD *)v44 = v43;
            v39 += 16;
            v41 += 2;
            v40 -= 16;
          }
          while (v40);
        }
        v50 = *(_QWORD *)(a6 + 832);
        if (v50)
          v51 = *(unsigned __int16 *)(v50 + 8);
        else
          v51 = 0;
        v7 = sub_1C636D0C8(a6, 146, a1, v71, v72, v74[0], LODWORD(v74[1]), v51);
LABEL_58:
        if (v74[0] != v75)
          free(v74[0]);
        return (_QWORD *)v7;
      }
      v53 = (unsigned int *)v74[0];
      v54 = (unsigned int *)((char *)v74[0] + 16 * LODWORD(v74[1]));
      v55 = v69;
      while (1)
      {
        v56 = *(_QWORD *)v53;
        v57 = v53[2];
        v58 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v53 + 40) + 16 * v57);
        v60 = *v58;
        v59 = v58[1];
        if (v55 != *v58)
          break;
        v61 = &v69;
        if (!v55 && v70 != v59)
        {
          *(_QWORD *)&v73 = v60;
          *((_QWORD *)&v73 + 1) = v59;
          goto LABEL_65;
        }
LABEL_75:
        v67 = (uint64_t)v61[1];
        v69 = *v61;
        v70 = v67;
        v55 = v69;
        v53 += 4;
        if (v53 == v54)
          goto LABEL_38;
      }
      *(_QWORD *)&v73 = *v58;
      *((_QWORD *)&v73 + 1) = v59;
      if (v55)
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v69);
      else
LABEL_65:
        ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v69);
      v64 = ExtendedSizeInBits;
      v65 = v63;
      if ((_BYTE)v60)
        v66 = sub_1C47A8C74((unsigned __int8 *)&v73);
      else
        v66 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v73);
      if (v65 == 1 && v30 != 1 || v64 >= v66)
        v61 = &v69;
      else
        v61 = (llvm **)(*(_QWORD *)(v56 + 40) + 16 * v57);
      goto LABEL_75;
    }
    v21 = *(_QWORD *)(v17 + 32);
    v7 = *(_QWORD *)v21;
    v22 = *(_DWORD *)(v21 + 8);
    v23 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 16 * v22);
    v24 = *v23;
    if (v24 != v71)
      break;
    v25 = *((_QWORD *)v23 + 1);
    if (v24)
      v26 = 1;
    else
      v26 = v25 == v72;
    if (!v26)
      goto LABEL_54;
    if (v15)
    {
      if (v7 != v15 || v22 != v14)
        goto LABEL_29;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v21 + 40) + 80);
    v29 = (_QWORD *)(v28 + 24);
    if (*(_DWORD *)(v28 + 32) >= 0x41u)
      v29 = (_QWORD *)*v29;
    if (*v29 != (_DWORD)v13 * v18)
      goto LABEL_29;
    v16 += 4;
    ++v13;
    v14 = v22;
    v15 = v7;
    if (v12 == v13)
      return (_QWORD *)v7;
  }
  v24 = v71;
  if (!(_BYTE)v71)
    goto LABEL_54;
LABEL_30:
  if ((v24 - 120) >= 0x33)
    goto LABEL_31;
  return 0;
}

_QWORD *sub_1C5D58A14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::APInt *v34;
  _QWORD *v35;
  _QWORD v37[2];
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;

  v9 = a4;
  v10 = a3;
  v45 = *MEMORY[0x1E0C80C00];
  v14 = sub_1C5D56858(a3, a4, 1);
  v15 = sub_1C5D56858(a5, a6, 1);
  v16 = v15;
  if (!v14
    || ((v17 = *(_QWORD *)(v14 + 80), v18 = *(void **)(v17 + 32), v18 == &unk_1C866F1C0)
      ? (v19 = *(_QWORD *)(v17 + 40))
      : (v19 = v17 + 24),
        LODWORD(v19) = *(_BYTE *)(v19 + 28) & 7,
        (_DWORD)v19 != 1))
  {
    if (v15)
    {
      v20 = *(_QWORD *)(v15 + 80);
      if (*(_UNKNOWN **)(v20 + 32) == &unk_1C866F1C0)
        v19 = *(_QWORD *)(v20 + 40);
      else
        v19 = v20 + 24;
      LOBYTE(v19) = (*(_BYTE *)(v19 + 28) & 7) == 1;
      if (!v14)
        goto LABEL_18;
    }
    else
    {
      LOBYTE(v19) = 0;
      if (!v14)
        goto LABEL_18;
    }
    v17 = *(_QWORD *)(v14 + 80);
    v18 = *(void **)(v17 + 32);
  }
  if (v18 == &unk_1C866F1C0)
    v21 = *(_QWORD *)(v17 + 40);
  else
    v21 = v17 + 24;
  if ((*(_BYTE *)(v21 + 28) & 7) == 0)
  {
    v24 = 1;
    if ((a7 & 0x10) == 0)
      goto LABEL_30;
    goto LABEL_27;
  }
LABEL_18:
  if (v15)
  {
    v22 = *(_QWORD *)(v15 + 80);
    if (*(_UNKNOWN **)(v22 + 32) == &unk_1C866F1C0)
      v23 = *(_QWORD *)(v22 + 40);
    else
      v23 = v22 + 24;
    v24 = (*(_BYTE *)(v23 + 28) & 7) == 0;
    if ((a7 & 0x10) == 0)
      goto LABEL_30;
  }
  else
  {
    v24 = 0;
    if ((a7 & 0x10) == 0)
      goto LABEL_30;
  }
LABEL_27:
  if ((v19 & 1) != 0 || *(_WORD *)(v10 + 24) == 51 || *(_WORD *)(a5 + 24) == 51)
    goto LABEL_50;
LABEL_30:
  if ((a7 & 0x20) != 0 && (v24 || *(_WORD *)(v10 + 24) == 51 || *(_WORD *)(a5 + 24) == 51))
  {
LABEL_50:
    v33 = *(_QWORD *)(v10 + 40) + 16 * v9;
    return sub_1C61312D0(a1, *(llvm **)v33, *(_QWORD *)(v33 + 8));
  }
  if (!v15)
    return 0;
  if (a2 == 97)
  {
    v27 = *(_QWORD *)(v15 + 80);
    if (*(_UNKNOWN **)(v27 + 32) == &unk_1C866F1C0)
      v28 = *(_BYTE *)(*(_QWORD *)(v27 + 40) + 28);
    else
      v28 = *(_BYTE *)(v27 + 52);
    if ((v28 & 7) != 3 || (v28 & 8) != 0)
      return 0;
  }
  else
  {
    if (a2 == 96)
    {
      v25 = *(_QWORD *)(v15 + 80);
      if (*(_UNKNOWN **)(v25 + 32) == &unk_1C866F1C0)
        v26 = *(_BYTE *)(*(_QWORD *)(v25 + 40) + 28);
      else
        v26 = *(_BYTE *)(v25 + 52);
      if ((v26 & 7) == 3 && (v26 & 8) != 0)
        return (_QWORD *)v10;
      return 0;
    }
    if ((a2 & 0xFFFFFFFE) != 0x62)
      goto LABEL_73;
    v29 = *(_QWORD *)(v15 + 80);
    LODWORD(v41) = 64;
    v40 = 0x3FF0000000000000;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v37, (const llvm::APInt **)&v40);
    v41 = v37[0];
    v42 = v37[1];
    v43 = v38;
    v44 = v39 & 0xF;
    llvm::APFloat::convert((uint64_t)&v40, *(void **)(v29 + 32), 1, v37);
    v30 = sub_1C47ECB98(v29 + 24, (uint64_t)&v40);
    if ((_UNKNOWN *)v41 == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v42);
    }
    else if ((*(_DWORD *)(v41 + 8) - 64) <= 0xFFFFFF7F && v42)
    {
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    }
    if ((v30 & 1) == 0)
    {
LABEL_73:
      if (a2 != 98 || (a7 & 0x10) == 0)
        return 0;
      v10 = 0;
      if ((a7 & 0x40) != 0)
      {
        v31 = *(_QWORD *)(v16 + 80);
        if (*(_UNKNOWN **)(v31 + 32) == &unk_1C866F1C0)
          v32 = *(_QWORD *)(v31 + 40);
        else
          v32 = v31 + 24;
        if ((*(_BYTE *)(v32 + 28) & 7) != 3)
          return 0;
        v34 = *(const llvm::APInt **)(a5 + 64);
        v40 = (uint64_t)v34;
        if (v34)
          llvm::MetadataTracking::track((uint64_t)&v40, (unsigned __int8 *)v34, 2);
        LODWORD(v41) = *(_DWORD *)(a5 + 60);
        v35 = (_QWORD *)(*(_QWORD *)(a5 + 40) + 16 * a6);
        v10 = sub_1C5D404C4(a1, &v40, *v35, v35[1], 0, 0.0);
        if (v40)
          llvm::MetadataTracking::untrack((uint64_t)&v40, (unsigned __int8 *)v40);
      }
    }
  }
  return (_QWORD *)v10;
}

uint64_t *sub_1C5D58E08(uint64_t a1, const char *a2, const llvm::APInt *a3, llvm *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14)
{
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  llvm *v17;
  const llvm::APInt *v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::APInt *v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  llvm::APInt *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  uint64_t v51;
  llvm *v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v69;
  const llvm::detail::DoubleAPFloat *v70;
  void *v71;
  const llvm::APFloat *v72;
  llvm::APFloatBase *v73;
  llvm *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned __int8 **v79;
  unsigned __int8 **v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *i;
  unsigned int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v97;
  llvm *v98;
  unsigned __int16 v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v105;
  uint64_t v106[2];
  int v107;
  void *v108[2];
  _BYTE v109[128];
  uint64_t *v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;

  v15 = a7;
  v16 = (uint64_t *)a6;
  v17 = a4;
  v18 = a3;
  v19 = (unsigned __int16)a2;
  v20 = a1;
  v21 = a11;
  v22 = a9;
  v23 = a10;
  v122 = *MEMORY[0x1E0C80C00];
  v24 = a4;
  v107 = (int)a2;
  if ((int)a2 <= 189)
  {
    switch((int)a2)
    {
      case 141:
        v54 = *(unsigned __int16 *)(a6 + 24);
        if (v54 == 36 || v54 == 12)
          v59 = a6;
        else
          v59 = 0;
        v60 = *(unsigned __int16 *)(a9 + 24);
        if (v60 == 36 || v60 == 12)
          v62 = a9;
        else
          v62 = 0;
        v63 = *(unsigned __int16 *)(a11 + 24);
        v64 = v63 == 36 || v63 == 12;
        if (!v64 || !v59 || !v62)
          goto LABEL_80;
        v65 = v62;
        v66 = a5;
        v69 = *(_QWORD *)(v59 + 80);
        v71 = *(void **)(v69 + 32);
        v70 = (const llvm::detail::DoubleAPFloat *)(v69 + 32);
        if (v71 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v117, v70);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v117, (uint64_t **)v70);
        sub_1C480BA3C((uint64_t)&v116, *(_QWORD *)(v65 + 80) + 24, *(_QWORD *)(a11 + 80) + 24, 1);
        v73 = llvm::ConstantFP::get(*(llvm::ConstantFP **)(a1 + 56), (llvm::LLVMContext *)&v116, v72);
        v14 = (uint64_t *)sub_1C6366D64(a1, v73, a3, v17, v66, 0);
        if ((_UNKNOWN *)v117 == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v118);
        }
        else if ((*(_DWORD *)(v117 + 8) - 64) <= 0xFFFFFF7F && v118)
        {
          MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
        }
        return v14;
      case 146:
        v116 = (uint64_t *)a6;
        LODWORD(v117) = a7;
        v118 = a9;
        v119 = a10;
        v120 = a11;
        v121 = a12;
        v103 = (uint64_t *)a6;
        v98 = a4;
        v25 = a9;
        v26 = a7;
        v27 = a11;
        v28 = a10;
        v29 = a5;
        v30 = a1;
        v31 = a3;
        v32 = a4;
        v33 = (uint64_t)sub_1C5D55334(a4, a5, (uint64_t)&v116, 3, a1);
        goto LABEL_34;
      case 147:
        v41 = *(unsigned __int16 *)(a11 + 24);
        if (v41 != 11 && v41 != 35)
          goto LABEL_44;
        v42 = *(_QWORD *)(a6 + 40) + 16 * a7;
        v43 = *(uint64_t **)v42;
        v44 = *(_QWORD *)(v42 + 8);
        if ((_BYTE)v43)
        {
          if (v43 - 15 >= 0x69)
            goto LABEL_44;
        }
        else if (*(_BYTE *)(v44 + 8) != 18)
        {
          goto LABEL_44;
        }
        v56 = *(_QWORD *)(a11 + 80);
        v57 = (unint64_t *)(v56 + 24);
        v93 = a5;
        v90 = a4;
        v14 = (uint64_t *)a1;
        if (*(_DWORD *)(v56 + 32) >= 0x41u)
          v57 = (unint64_t *)*v57;
        v58 = *v57;
        v116 = v43;
        v117 = v44;
        if (v58 >= sub_1C612FE00((llvm::EVT *)&v116, a2))
        {
          v51 = (uint64_t)v14;
          v52 = v17;
          v53 = v93;
          return sub_1C61312D0(v51, v52, v53);
        }
        v41 = *(unsigned __int16 *)(a11 + 24);
        v20 = (uint64_t)v14;
        a5 = v93;
        v18 = a3;
        v24 = v90;
LABEL_44:
        if (v41 != 51)
        {
          if (*(_WORD *)(a9 + 24) != 51)
            goto LABEL_80;
          return v16;
        }
LABEL_49:
        v51 = v20;
        v52 = v17;
        v53 = a5;
        return sub_1C61312D0(v51, v52, v53);
      case 149:
        v116 = (uint64_t *)a6;
        LODWORD(v117) = a7;
        v118 = a9;
        v119 = a10;
        v120 = a11;
        v121 = a12;
        v103 = (uint64_t *)a6;
        v98 = a4;
        v25 = a9;
        v26 = a7;
        v27 = a11;
        v28 = a10;
        v29 = a5;
        v30 = a1;
        v31 = a3;
        v32 = a4;
        v33 = (uint64_t)sub_1C5D58594((uint64_t)a3, a4, a5, (unsigned int *)&v116, 3, a1);
LABEL_34:
        v24 = v32;
        a5 = v29;
        v23 = v28;
        v21 = v27;
        v15 = v26;
        v22 = v25;
        v17 = v98;
        v16 = v103;
        goto LABEL_35;
      case 150:
        v45 = *(unsigned __int16 *)(a6 + 24);
        if (v45 == 51 && *(_WORD *)(a9 + 24) == 51)
          goto LABEL_49;
        v46 = (unsigned __int8 *)(*(_QWORD *)(a9 + 40) + 16 * a10);
        if (a4 == *v46 && ((_BYTE)a4 || a5 == *((_QWORD *)v46 + 1)))
          return (uint64_t *)a9;
        if (v45 == 51 && *(_WORD *)(a9 + 24) == 151)
        {
          v47 = *(_QWORD *)(a9 + 32);
          if (*(_QWORD *)(v47 + 40) == a11 && *(_DWORD *)(v47 + 48) == a12)
          {
            v14 = *(uint64_t **)v47;
            v48 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v47 + 40) + 16 * *(unsigned int *)(v47 + 8));
            if (*v48 == a4 && ((_BYTE)a4 || *((_QWORD *)v48 + 1) == a5))
              return v14;
          }
        }
        goto LABEL_80;
      case 154:
        v38 = *(_QWORD *)(a11 + 80);
        v39 = (llvm::APInt *)(v38 + 24);
        v40 = *(_DWORD *)(v38 + 32);
        if (v40 > 0x40)
        {
          v89 = a4;
          v92 = a5;
          v101 = v20;
          if (llvm::APInt::countLeadingZerosSlowCase(v39) == v40)
            return v16;
          v20 = v101;
          a5 = v92;
          v18 = a3;
          v24 = v89;
        }
        else if (!*(_QWORD *)v39)
        {
          return v16;
        }
        goto LABEL_80;
      default:
        goto LABEL_80;
    }
  }
  if (((_DWORD)a2 - 190) < 2)
  {
    v99 = (unsigned __int16)a2;
    v35 = a7;
    v36 = a5;
    v30 = a1;
    v31 = a3;
    v37 = a4;
    v33 = sub_1C5D59630(a1, a6, a7, a9, a10, a11, a12);
    v24 = v37;
    a5 = v36;
    v21 = a11;
    v15 = v35;
    v22 = a9;
    v16 = (uint64_t *)a6;
    v19 = v99;
LABEL_35:
    v18 = v31;
    v20 = v30;
    v14 = (uint64_t *)v33;
    if (v33)
      return v14;
  }
  else if ((_DWORD)a2 == 193)
  {
    v88 = a4;
    v91 = a5;
    v49 = sub_1C5D443A8((_QWORD *)a1, a4, a5, a6, a7, a9, a10, *(_DWORD *)(a11 + 76), a3);
    if (v49)
      return v49;
    v116 = v16;
    LODWORD(v117) = v15;
    v118 = a9;
    v119 = a10;
    v120 = a11;
    v121 = a12;
    v14 = sub_1C5D53628(a1, 193, (const char *)a3, v17, v91, (uint64_t)&v116, 3);
    v20 = a1;
    a5 = v91;
    v18 = a3;
    v24 = v88;
    if (v14)
      return v14;
  }
  else if ((_DWORD)a2 == 216)
  {
    v34 = (unsigned __int8 *)(*(_QWORD *)(a6 + 40) + 16 * a7);
    if (*v34 == a4 && ((_BYTE)a4 || *((_QWORD *)v34 + 1) == a5))
      return v16;
  }
LABEL_80:
  v97 = (uint64_t)v18;
  v102 = v20;
  v74 = v17;
  v75 = v24;
  v76 = sub_1C636D7B0(v74, a5);
  v106[0] = v76;
  v106[1] = 1;
  v110 = v16;
  v111 = v15;
  v112 = v22;
  v113 = v23;
  v114 = v21;
  v115 = a12;
  if (v75 == 172)
  {
    LODWORD(v116) = *(_DWORD *)(v97 + 8);
    v77 = v102;
    v78 = sub_1C6368F3C(v102, &v107, (int *)&v116, (unsigned __int8 **)v97, v106);
    sub_1C5D42768(v102, (uint64_t)v78, (uint64_t)&v110, 3);
LABEL_87:
    v82 = *(_QWORD *)(v77 + 208);
    v81 = (_QWORD *)(v77 + 208);
    v78[1] = v82;
    v78[2] = v81;
    *(_QWORD *)(v82 + 8) = v78 + 1;
    *v81 = v78 + 1;
    for (i = (_QWORD *)v81[56]; i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v78);
    return v78;
  }
  v108[0] = v109;
  v108[1] = (void *)0x2000000000;
  sub_1C5D3E710(v108, v19, v76, 1, (uint64_t *)&v110, 3);
  v105 = 0;
  v79 = sub_1C6365B08(v102, (uint64_t)v108, v97, &v105);
  v80 = v79;
  if (v79)
  {
    v78 = 0;
    *((_WORD *)v79 + 36) &= a14 | 0xF001;
    v14 = (uint64_t *)v79;
    v77 = v102;
  }
  else
  {
    LODWORD(v116) = *(_DWORD *)(v97 + 8);
    v77 = v102;
    v78 = sub_1C6368F3C(v102, &v107, (int *)&v116, (unsigned __int8 **)v97, v106);
    *((_WORD *)v78 + 36) = a14;
    sub_1C5D42768(v102, (uint64_t)v78, (uint64_t)&v110, 3);
    v84 = *(_DWORD *)(v102 + 340) + 1;
    v85 = *(_DWORD *)(v102 + 336);
    if (v84 > 2 * v85)
    {
      llvm::FoldingSetBase::GrowBucketCount(v102 + 328, 2 * v85, (uint64_t)off_1E8198CA0);
      v116 = &v118;
      v117 = 0x2000000000;
      v86 = *(_QWORD *)(v102 + 328)
          + 8
          * ((*(_DWORD *)(v102 + 336) - 1) & sub_1C6370764(v102 + 328, (uint64_t)v78, (unsigned int *)&v116));
      if (v116 != &v118)
        free(v116);
      v77 = v102;
      v84 = *(_DWORD *)(v102 + 340) + 1;
    }
    else
    {
      v86 = v105;
    }
    *(_DWORD *)(v77 + 340) = v84;
    v87 = *(_QWORD *)v86;
    if (!*(_QWORD *)v86)
      v87 = v86 | 1;
    *v78 = v87;
    *(_QWORD *)v86 = v78;
  }
  if (v108[0] != v109)
  {
    free(v108[0]);
    v77 = v102;
  }
  if (!v80)
    goto LABEL_87;
  return v14;
}

uint64_t sub_1C5D59630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  int v9;
  uint64_t result;
  uint64_t v12;
  llvm::APInt *v13;
  unsigned int v14;
  BOOL v15;

  v9 = *(unsigned __int16 *)(a2 + 24);
  if (v9 == 51)
  {
    if (sub_1C5D583CC(a1, a4) || sub_1C5D584EC(0, a4))
      return a4;
    else
      return a6;
  }
  else
  {
    result = a6;
    if (*(_WORD *)(a4 + 24) != 51)
    {
      result = a4;
      if (*(_WORD *)(a6 + 24) != 51)
      {
        if (v9 == 35 || v9 == 11)
        {
          v12 = *(_QWORD *)(a2 + 80);
          v13 = (llvm::APInt *)(v12 + 24);
          v14 = *(_DWORD *)(v12 + 32);
          if (v14 > 0x40)
            v15 = llvm::APInt::countLeadingZerosSlowCase(v13) == v14;
          else
            v15 = *(_QWORD *)v13 == 0;
          if (v15)
            return a6;
          else
            return a4;
        }
        else if (a4 == a6 && a5 == a7)
        {
          return a4;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C5D59738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, unsigned __int8 a12, int a13, char a14, unsigned __int8 a15, char a16, __int128 *a17, __int128 *a18, uint64_t a19)
{
  uint64_t v19;
  const llvm::APInt *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const llvm::APInt *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  char v38;
  unsigned __int8 v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD ***v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  const llvm::APInt *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  char v58;
  uint64_t *v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  char v70;
  const llvm::APInt *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v76;
  _QWORD *v77;
  const llvm::APInt *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  __int128 v84;
  _OWORD *v85;
  _QWORD *IntPtrType;
  _QWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unsigned __int8 *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  unsigned __int8 v99;
  size_t v100;
  int v101;
  uint64_t v102;
  const llvm::APInt *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  size_t v129;
  int v130;
  void *__p;
  void *v132;
  char *v133;
  _QWORD *v134;
  unsigned __int8 *v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD v140[194];
  _QWORD v141[66];
  _QWORD v142[194];
  _BYTE v143[96];
  uint64_t v144;

  v19 = MEMORY[0x1E0C80A78]();
  v109 = v23;
  v24 = v22;
  v25 = v21;
  v27 = v26;
  v28 = v20;
  v30 = v29;
  v32 = v31;
  v33 = (_QWORD *)v19;
  v34 = a9;
  v36 = a18;
  v35 = a19;
  v37 = a17;
  v38 = a14;
  v39 = a12;
  v144 = *MEMORY[0x1E0C80C00];
  v40 = *(unsigned __int16 *)(a9 + 24);
  if (v40 == 35 || v40 == 11)
  {
    v42 = v22;
    v43 = *(_QWORD *)(a9 + 80);
    v44 = (_QWORD ***)(v43 + 24);
    v45 = *(_DWORD *)(v43 + 32);
    if (v45 > 0x40)
    {
      v103 = v20;
      v48 = v21;
      v49 = (_QWORD *)v19;
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v43 + 24)) == v45)
        return (uint64_t *)v32;
      v46 = **v44;
      v33 = v49;
      v25 = v48;
      v28 = v103;
      v38 = a14;
      v35 = a19;
      v39 = a12;
    }
    else
    {
      v46 = *v44;
      if (!*v44)
        return (uint64_t *)v32;
    }
    v122 = *a17;
    v123 = *((_QWORD *)a17 + 2);
    v120 = *a18;
    v121 = *((_QWORD *)a18 + 2);
    v50 = v32;
    v51 = (int)v30;
    v52 = v28;
    v53 = v25;
    v24 = v42;
    v54 = v42;
    v55 = v32;
    v56 = v30;
    v57 = v33;
    v58 = v38;
    v59 = sub_1C5D59D84(v33, v28, v50, v51, v27, v25, v54, v109, (unint64_t)v46, v39, v38, 0, (uint64_t)&v122, (uint64_t)&v120, v35);
    if (v59)
      return v59;
    v34 = a9;
    v47 = a9;
    v33 = v57;
    v30 = v56;
    v32 = v55;
    v25 = v53;
    v28 = v52;
    v38 = v58;
    v39 = a12;
  }
  else
  {
    v47 = 0;
  }
  v60 = a10;
  v61 = a15;
  v62 = v33[1];
  if (v62)
  {
    v118 = *a17;
    v102 = v47;
    v119 = *((_QWORD *)a17 + 2);
    v117 = *((_QWORD *)a18 + 2);
    v116 = *a18;
    v63 = v32;
    v64 = v30;
    v65 = v27;
    v104 = v24;
    v105 = v27;
    v66 = v25;
    v67 = v32;
    v68 = (int)v30;
    v30 = v33;
    v69 = v34;
    v70 = v38;
    v71 = v28;
    v59 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, const llvm::APInt *, uint64_t, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)v62 + 16))(v62, v33, v28, v63, v64, v65, v25);
    v61 = a15;
    v60 = a10;
    v39 = a12;
    v28 = v71;
    v37 = a17;
    v38 = v70;
    v27 = v105;
    v34 = v69;
    v36 = a18;
    v25 = v66;
    v47 = v102;
    v24 = v104;
    v33 = v30;
    LODWORD(v30) = v68;
    v32 = v67;
    if (v59)
      return v59;
  }
  if (v61)
  {
    v72 = *(_QWORD *)(v47 + 80);
    v73 = (unint64_t *)(v72 + 24);
    if (*(_DWORD *)(v72 + 32) >= 0x41u)
      v73 = (unint64_t *)*v73;
    v74 = *v73;
    v114 = *v37;
    v115 = *((_QWORD *)v37 + 2);
    v112 = *v36;
    v113 = *((_QWORD *)v36 + 2);
    return sub_1C5D59D84(v33, v28, v32, (int)v30, v27, v25, v24, v109, v74, v39, v38, 1, (uint64_t)&v114, (uint64_t)&v112, a19);
  }
  v76 = v27;
  v77 = v33;
  v78 = v28;
  v79 = v25;
  v80 = v34;
  v107 = v60;
  sub_1C5D5ACD8(v33[3], *((unsigned int *)v37 + 4));
  sub_1C5D5ACD8(v77[3], *((unsigned int *)v36 + 4));
  v81 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v77[7] + 1912), 0);
  v82 = operator new(0x30uLL);
  *v82 = 0;
  v82[1] = v76;
  v106 = v76;
  v108 = v79;
  v82[2] = v79;
  v82[3] = v81;
  *((_DWORD *)v82 + 8) = 0;
  v82[5] = 0;
  v83 = operator new(0x60uLL);
  v83[6] = 0;
  v83[7] = v24;
  v83[8] = v109;
  v83[9] = v81;
  *((_DWORD *)v83 + 20) = 0;
  v83[11] = 0;
  v84 = *((_OWORD *)v82 + 1);
  *(_OWORD *)v83 = *(_OWORD *)v82;
  *((_OWORD *)v83 + 1) = v84;
  *((_OWORD *)v83 + 2) = *((_OWORD *)v82 + 2);
  v85 = v83;
  operator delete(v82);
  IntPtrType = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v77[5] + 40) + 272), (llvm::LLVMContext *)v77[7], 0);
  v87 = operator new(0xC0uLL);
  v87[12] = 0;
  v87[13] = v80;
  v87[14] = v107;
  v87[15] = IntPtrType;
  *((_DWORD *)v87 + 32) = 0;
  v87[17] = 0;
  v88 = v85[3];
  *((_OWORD *)v87 + 2) = v85[2];
  *((_OWORD *)v87 + 3) = v88;
  v89 = v85[5];
  *((_OWORD *)v87 + 4) = v85[4];
  *((_OWORD *)v87 + 5) = v89;
  v90 = v85[1];
  *(_OWORD *)v87 = *v85;
  *((_OWORD *)v87 + 1) = v90;
  operator delete(v85);
  v91 = (uint64_t)v77;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 32;
  v128 = 0xFFFFFFFFLL;
  v129 = 0;
  v130 = 0;
  __p = 0;
  v132 = 0;
  v133 = 0;
  v134 = v77;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = v140;
  v139 = 0x2000000000;
  v140[192] = v141;
  v140[193] = 0x2000000000;
  v141[64] = v142;
  v141[65] = 0x2000000000;
  v142[192] = v143;
  v142[193] = 0x400000000;
  v143[64] = 0;
  v143[88] = 0;
  if (&v135 != (unsigned __int8 **)v78)
  {
    v92 = *(unsigned __int8 **)v78;
    v135 = v92;
    if (v92)
    {
      llvm::MetadataTracking::track((uint64_t)&v135, v92, 2);
      v91 = (uint64_t)v77;
    }
  }
  v93 = *((_DWORD *)v78 + 2);
  v124 = v32;
  v94 = *(unsigned int *)(*(_QWORD *)(v91 + 24) + 183216);
  v136 = v93;
  v125 = (int)v30;
  v110 = *(_OWORD *)(*(_QWORD *)(v106 + 40) + 16 * v108);
  llvm::EVT::getTypeForEVT((llvm::EVT *)&v110, *(llvm::LLVMContext **)(v91 + 56));
  v96 = v95;
  v97 = *(_QWORD **)(v91 + 24);
  v98 = (char *)v97[22135];
  v99 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v97 + 32))(v97, *(_QWORD *)(**(_QWORD **)(v91 + 40) + 40) + 272, 0);
  v100 = sub_1C63675D8(v91, v98, v99, 0);
  v126 = v96;
  v129 = v100;
  v130 = v101;
  HIDWORD(v128) = v94;
  LODWORD(v128) = 3;
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  __p = v87;
  v132 = v87 + 18;
  v133 = (char *)(v87 + 24);
  (**(void (***)(_QWORD, _QWORD, uint64_t, void **))v134[3])(v134[3], v134[5], v94, &__p);
  LOWORD(v127) = v127 & 0xFFDF;
  BYTE2(v127) = a16;
  sub_1C5D1FE10((unsigned __int8 *)v77[3], (uint64_t)&v124, (uint64_t)&v110);
  v32 = v111;
  sub_1C632CB64(&v124);
  return (uint64_t *)v32;
}

uint64_t *sub_1C5D59D84(_QWORD *a1, const llvm::APInt *a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  unsigned __int16 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int ConstantDataArrayInfo;
  int v42;
  unsigned int v43;
  unsigned int *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  __int16 v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t ExtendedSizeInBits;
  const char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  llvm::ConstantDataSequential *v81;
  llvm *v82;
  uint64_t v83;
  unsigned int v84;
  const char *v85;
  int v87;
  BOOL v88;
  unsigned int v89;
  char EVT;
  uint64_t *v91;
  unsigned int v92;
  BOOL v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unsigned __int8 v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  const llvm::APInt *v109;
  llvm *v110;
  uint64_t v111;
  llvm::ValueHandleBase *v112;
  _QWORD *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  llvm *v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned int v127;
  unsigned int v128;
  _QWORD *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  _QWORD *v148;
  uint64_t *v149;
  unsigned int v150;
  unsigned int v151;
  _QWORD *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  _BOOL4 v166;
  __int16 v167;
  int v168;
  __int16 v169;
  unint64_t v170;
  __int16 v171;
  llvm::DataLayout *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  llvm::LLVMContext *v179;
  uint64_t v180;
  unint64_t v181;
  int v182;
  __int16 v183;
  const llvm::APInt *v184;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v193;
  unint64_t v194;
  unint64_t v195;
  __int128 v197;
  __int128 v198;
  _BYTE v199[24];
  __int128 v200;
  _BYTE v201[24];
  __int128 v202;
  _QWORD v203[2];
  __int128 v204;
  _QWORD v205[2];
  llvm::ConstantDataSequential *v206;
  uint64_t v207;
  unint64_t v208;
  void *__p;
  _BYTE *v210;
  uint64_t v211;
  unint64_t v212;
  unsigned int v213;
  __int128 v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  _BYTE v218[512];
  void *v219;
  uint64_t v220;
  _BYTE v221[256];
  void *v222;
  uint64_t v223;
  _QWORD v224[34];

  v15 = (uint64_t *)a3;
  v224[32] = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a7 + 24) == 51)
    return v15;
  v18 = (uint64_t)a1;
  v19 = a1[5];
  v193 = *(unsigned __int8 **)(*(_QWORD *)v19 + 40);
  v195 = a1[3];
  v179 = (llvm::LLVMContext *)a1[7];
  v211 = 0;
  v210 = 0;
  __p = 0;
  v20 = *(_QWORD *)(v19 + 56);
  v21 = *(_DWORD *)(*(_QWORD *)(v19 + 8) + 484);
  if (v21 - 28 >= 6 && ((v22 = v21 > 0xB, v23 = (1 << v21) & 0x888, !v22) ? (v24 = v23 == 0) : (v24 = 1), v24))
  {
    v164 = *(_QWORD *)(v19 + 56);
    v165 = a5;
    v166 = sub_1C636604C((uint64_t)a1);
    a5 = v165;
    v20 = v164;
    v26 = v166;
  }
  else
  {
    v25 = *(_QWORD *)(*(_QWORD *)v19 + 112);
    if (v25)
      v26 = *(char *)(v25 + 13) < 0;
    else
      v26 = 0;
  }
  v27 = a10;
  v28 = *(unsigned __int16 *)(a5 + 24);
  v186 = a5;
  v190 = v20;
  if (v28 == 39 || v28 == 15)
  {
    v29 = *(_DWORD *)(a5 + 76);
    v30 = v29 < 0 && v29 >= -*(_DWORD *)(v20 + 32);
    v32 = !v30;
    v31 = a5;
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v178 = a8;
  v33 = sub_1C5D633A0(v18, a7);
  v34 = v33;
  if (v33 < 0x100u
    || (v35 = v33, v34 = a10, a10 > v33))
  {
    v35 = a10;
  }
  if ((a11 & 1) != 0)
    goto LABEL_28;
  v34 = *(unsigned __int16 *)(a7 + 24);
  if ((_DWORD)v34 != 13)
  {
    if ((_DWORD)v34 == 56)
    {
      v36 = *(uint64_t **)(a7 + 32);
      v34 = *v36;
      if (*(_WORD *)(*v36 + 24) == 13)
      {
        v37 = v36[5];
        if (*(_WORD *)(v37 + 24) == 11)
        {
          v38 = *(_QWORD *)(v37 + 80);
          v39 = (_QWORD *)(v38 + 24);
          if (*(_DWORD *)(v38 + 32) >= 0x41u)
            v39 = (_QWORD *)*v39;
          v40 = (_QWORD *)*v39;
          goto LABEL_30;
        }
      }
    }
LABEL_28:
    ConstantDataArrayInfo = 0;
    goto LABEL_31;
  }
  v40 = 0;
  v34 = a7;
LABEL_30:
  ConstantDataArrayInfo = llvm::getConstantDataArrayInfo(*(llvm::Value **)(v34 + 80), &v206, (const llvm::GEPOperator *)8, (unint64_t)v40 + *(_QWORD *)(v34 + 88));
  v34 = (uint64_t)v206;
LABEL_31:
  v175 = v34;
  if (v34)
    v42 = 0;
  else
    v42 = ConstantDataArrayInfo;
  if ((a12 & 1) != 0)
  {
    v43 = -1;
  }
  else
  {
    v44 = (unsigned int *)(v195 + 184260);
    if (v26)
      v44 = (unsigned int *)(v195 + 184264);
    v43 = *v44;
  }
  v45 = a9;
  v182 = ConstantDataArrayInfo;
  v184 = a2;
  if (v42)
  {
    v46 = 0x101000000;
    if (!a11)
      v46 = 0x101010000;
  }
  else
  {
    v47 = 0x10000000000;
    if (!ConstantDataArrayInfo)
      v47 = 0;
    v48 = v47 | ((unint64_t)v35 << 48);
    v49 = 0x10000;
    if (a11)
      v49 = 0;
    v46 = v48 | v49;
  }
  v205[0] = a9;
  v205[1] = v32 & 0xFFFF00FF | ((unint64_t)a10 << 8) | v46;
  v50 = *(unsigned int *)(a13 + 16);
  v51 = *(unsigned int *)(a14 + 16);
  v216 = *(void **)(*(_QWORD *)v19 + 112);
  if (sub_1C5D7B8E8(v195, &__p, v43, (uint64_t)v205, v50, v51, (uint64_t)&v216))
  {
    v53 = a15;
    v172 = (llvm::DataLayout *)(v193 + 272);
    if (v32)
    {
      llvm::EVT::getTypeForEVT((llvm::EVT *)__p, v179);
      llvm::DataLayout::getAlignment((uint64_t)(v193 + 272), v54);
      v56 = v55;
      v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 16) + 176))(*(_QWORD *)(v19 + 16));
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 440))(v57, v19)
        && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 432))(v57, v19))
      {
        v58 = a10;
        v59 = a4;
        v53 = a15;
      }
      else
      {
        v58 = a10;
        v53 = a15;
        if (a10 >= v56)
        {
          v59 = a4;
        }
        else
        {
          v59 = a4;
          do
          {
            if (!v193[281])
              break;
            if (v193[280] >= v56)
              break;
            v60 = __clz((unint64_t)(1 << v56) >> 1);
            v56 = (63 - v60);
          }
          while ((63 - v60) > a10);
        }
      }
      if (v58 < v56)
      {
        v61 = *(_DWORD *)(v31 + 76);
        v62 = *(_QWORD *)(v190 + 8) + 40 * (*(_DWORD *)(v190 + 32) + v61);
        v64 = *(unsigned __int8 *)(v62 + 16);
        v63 = (_BYTE *)(v62 + 16);
        if (v64 < v56)
        {
          *v63 = v56;
          if (!*(_BYTE *)(*(_QWORD *)(v190 + 8) + 40 * (*(_DWORD *)(v190 + 32) + v61) + 20)
            && *(unsigned __int8 *)(v190 + 60) < v56)
          {
            *(_BYTE *)(v190 + 60) = v56;
          }
        }
        v27 = v56;
      }
    }
    else
    {
      v59 = a4;
    }
    v204 = *(_OWORD *)(v53 + 16);
    if (a11)
      v65 = 4;
    else
      v65 = 0;
    v183 = v65;
    v203[0] = 0;
    v203[1] = 0;
    v222 = v224;
    v223 = 0x1000000000;
    v219 = v221;
    v220 = 0x1000000000;
    v216 = v218;
    v217 = 0x2000000000;
    if (((v210 - (_BYTE *)__p) & 0xFFFFFFFF0) == 0)
    {
LABEL_75:
      v66 = dword_1ED825190;
      if (!dword_1ED825190)
        v66 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v195 + 640))(v195);
      v67 = v220;
      if ((_DWORD)v220)
      {
        if (v66 >= 2 && byte_1ED8250D0)
        {
          if (v66 >= v220)
            goto LABEL_87;
          v68 = v220 / v66;
          v69 = v220 / v66 <= 1 ? 1 : v220 / v66;
          v70 = v220;
          do
          {
            sub_1C5D63F3C(v18, a2, (uint64_t)&v216, v70 - v66, v70, &v222, &v219);
            v70 -= v66;
            --v69;
          }
          while (v69);
          v67 -= v68 * v66;
          if (v67)
LABEL_87:
            sub_1C5D63F3C(v18, a2, (uint64_t)&v216, 0, v67, &v222, &v219);
        }
        else
        {
          v158 = 0;
          v159 = v217;
          v160 = 16 * v220;
          do
          {
            v161 = *(_OWORD *)((char *)v222 + v158);
            if (v159 >= HIDWORD(v217))
            {
              v197 = *(_OWORD *)((char *)v222 + v158);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v159 + 1, 16);
              v161 = v197;
              v159 = v217;
            }
            *((_OWORD *)v216 + v159) = v161;
            v162 = (v217 + 1);
            LODWORD(v217) = v162;
            v163 = *(_OWORD *)((char *)v219 + v158);
            if (v162 >= HIDWORD(v217))
            {
              v198 = *(_OWORD *)((char *)v219 + v158);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v162 + 1, 16);
              v163 = v198;
              LODWORD(v162) = v217;
            }
            *((_OWORD *)v216 + v162) = v163;
            v159 = v217 + 1;
            LODWORD(v217) = v217 + 1;
            v158 += 16;
          }
          while (v160 != v158);
        }
      }
      v71 = *(_QWORD *)(v18 + 832);
      if (v71)
        v72 = *(unsigned __int16 *)(v71 + 8);
      else
        v72 = 0;
      v15 = sub_1C636D0C8(v18, (const char *)2, a2, (llvm *)1, 0, (uint64_t *)v216, v217, v72);
      if (v216 != v218)
        free(v216);
      if (v219 != v221)
        free(v219);
      if (v222 != v224)
        free(v222);
      goto LABEL_50;
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v171 = v65 | 0x10;
    v173 = ((unint64_t)(v210 - (_BYTE *)__p) >> 4);
    v174 = v27;
    v187 = (unint64_t)(v210 - (_BYTE *)__p) >> 4;
    v188 = v18;
    v169 = v187;
    while (1)
    {
      v202 = *((_OWORD *)__p + v73);
      if ((_BYTE)v202)
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v202);
      else
        ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v202);
      if ((_DWORD)v77 == 1)
      {
        v157 = ExtendedSizeInBits;
        ExtendedSizeInBits = v157;
      }
      v78 = (ExtendedSizeInBits >> 3);
      v79 = v78 - v45;
      if (v78 < v45)
        v79 = 0;
      v191 = v75 - v79;
      v194 = v74 - v79;
      v180 = (ExtendedSizeInBits >> 3);
      v181 = v45;
      if (!v182)
        goto LABEL_178;
      if (v175)
      {
        if ((_BYTE)v202)
        {
          v93 = v202 - 75 >= 0xFFFFFFC4
             || v202 - 8 >= 0xFFFFFFFA;
          if (!v93 || v202 - 15 < 0x9C)
            goto LABEL_178;
        }
        else if ((*(_DWORD *)(*((_QWORD *)&v202 + 1) + 8) & 0xFE) == 0x12
               || *(_DWORD *)(*((_QWORD *)&v202 + 1) + 8) != 13)
        {
          goto LABEL_178;
        }
      }
      LODWORD(v80) = v208 - v194;
      v170 = ExtendedSizeInBits;
      if (v208 <= v194)
        break;
      v81 = v206;
      v83 = *((_QWORD *)&v202 + 1);
      v82 = (llvm *)v202;
      v214 = v202;
      if (!v206)
        goto LABEL_111;
      v168 = v207;
      if ((_BYTE)v202)
        v84 = sub_1C47A8C74((unsigned __int8 *)&v214);
      else
        v84 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v214);
      v94 = v84;
      v176 = v27;
      if ((_DWORD)v85 == 1)
      v95 = v94 >> 3;
      if (v94 >> 3 >= v80)
        v80 = v80;
      else
        v80 = v95;
      v213 = v94;
      if (v94 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v212, 0, 0);
      else
        v212 = 0;
      v96 = v168 + v194;
      if (*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(v18 + 40) + 40) + 272))
      {
        if ((_DWORD)v80)
        {
          v103 = 8 * v95 - 8;
          do
          {
            llvm::ConstantDataSequential::getElementAsInteger(v81);
            v105 = (unint64_t)v104 << v103;
            if (v213 > 0x40)
            {
              *(_QWORD *)v212 |= v105;
            }
            else
            {
              v106 = v212 | v105;
              if (v213)
                v107 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
              else
                v107 = 0;
              v212 = v107 & v106;
            }
            v103 -= 8;
            ++v96;
            --v80;
          }
          while (v80);
        }
      }
      else if ((_DWORD)v80)
      {
        v97 = 0;
        v98 = 8 * v80;
        do
        {
          llvm::ConstantDataSequential::getElementAsInteger(v81);
          v100 = (unint64_t)v99 << v97;
          if (v213 > 0x40)
          {
            *(_QWORD *)v212 |= v100;
          }
          else
          {
            v101 = v212 | v100;
            if (v213)
              v102 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v213;
            else
              v102 = 0;
            v212 = v102 & v101;
          }
          v97 += 8;
          ++v96;
        }
        while (v98 != v97);
      }
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v214, *(llvm::LLVMContext **)(v18 + 56));
      if ((*(unsigned int (**)(unint64_t, unint64_t *, uint64_t))(*(_QWORD *)v195 + 1400))(v195, &v212, v108))
      {
        v111 = *((_QWORD *)&v214 + 1);
        v110 = (llvm *)v214;
        v112 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v18 + 56), (llvm::LLVMContext *)&v212, v109);
        v113 = sub_1C5D3FAF8(v18, (uint64_t)v112, a2, v110, v111, 0, 0);
        v115 = v114;
      }
      else
      {
        v115 = 0;
        v113 = 0;
      }
      v116 = v186;
      v27 = v176;
      if (v213 >= 0x41 && v212)
      {
        MEMORY[0x1CAA32F9C](v212, 0x1000C8000313F17);
        v116 = v186;
      }
LABEL_173:
      if (!v113)
      {
        ExtendedSizeInBits = v170;
LABEL_178:
        v134 = ExtendedSizeInBits >> 3;
        llvm::TargetLoweringBase::getTypeConversion(v195, v179, v202, *((uint64_t *)&v202 + 1), (uint64_t)&v214);
        v135 = *((_QWORD *)&v214 + 1);
        v136 = v215;
        sub_1C4824250((uint64_t *)a14, v194, (uint64_t)&v214);
        if (llvm::MachinePointerInfo::isDereferenceable((llvm::MachinePointerInfo *)&v214, v134, v179, v172))v137 = v171;
        else
          v137 = v183;
        v138 = v27;
        a2 = v184;
        v139 = sub_1C6369954(v188, a7, v178, v194, 0, v184, v27 & 0xF000);
        v141 = v140;
        sub_1C4824250((uint64_t *)a14, v194, (uint64_t)&v200);
        v167 = v137;
        v177 = v177 & 0xFFFFFFFFFFFF0000 | (63
                                                             - __clz((v194 | (1 << v35)) & -(uint64_t)(v194 | (1 << v35)))) | 0x100;
        v59 = a4;
        v143 = sub_1C636B4C8(v188, 1, (uint64_t)v184, v135, v136, a3, a4, v142, (uint64_t)v139, v141, &v200, v202, *((uint64_t *)&v202 + 1), v177, SHIDWORD(v177), v167, (uint64_t)v203);
        v145 = v144;
        v146 = v223;
        if (v223 >= (unint64_t)HIDWORD(v223))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, (uint64_t)v224, v223 + 1, 16);
          v146 = v223;
        }
        v147 = v145;
        v148 = (char *)v222 + 16 * v146;
        *v148 = v143;
        v148[1] = 1;
        LODWORD(v223) = v223 + 1;
        v149 = sub_1C6369954(v188, v186, a6, v191, 0, v184, v187 & 0xF000);
        v151 = v150;
        sub_1C4824250((uint64_t *)a13, v191, (uint64_t)v199);
        v152 = sub_1C636B9CC(v188, a3, a4, (uint64_t)v184, (uint64_t)v143, v147, (uint64_t)v149, v151, (uint64_t)v199, v202, *((uint64_t *)&v202 + 1), v174, SHIDWORD(v174), v183, (uint64_t)v203);
        v154 = v153;
        v155 = v220;
        if (v220 >= (unint64_t)HIDWORD(v220))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, (uint64_t)v221, v220 + 1, 16);
          v155 = v220;
        }
        v27 = v138 & 0xFFFFF000;
        LOWORD(v187) = v187 & 0xF000;
        v156 = (char *)v219 + 16 * v155;
        *v156 = v152;
        v156[1] = v154;
        LODWORD(v220) = v220 + 1;
        goto LABEL_186;
      }
      v125 = v27;
      v126 = sub_1C6369954(v18, v116, a6, v191, 0, a2, v169 & 0xF000);
      v128 = v127;
      sub_1C4824250((uint64_t *)a13, v191, (uint64_t)v201);
      v129 = sub_1C636B75C(v18, a3, v59, (uint64_t)a2, (uint64_t)v113, v115, (uint64_t)v126, v128, (uint64_t)v201, v174, SHIDWORD(v174), v183, (uint64_t)v203);
      v131 = v130;
      v132 = v217;
      if (v217 >= (unint64_t)HIDWORD(v217))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v217 + 1, 16);
        v132 = v217;
      }
      v27 = v125;
      ExtendedSizeInBits = v170;
      v169 &= 0xF000u;
      v133 = (char *)v216 + 16 * v132;
      *v133 = v129;
      v133[1] = v131;
      LODWORD(v217) = v217 + 1;
      if (!v129)
        goto LABEL_178;
      a2 = v184;
      v59 = a4;
LABEL_186:
      v18 = v188;
      v74 = v194 + v180;
      v75 = v191 + v180;
      v45 = v181 - v180;
      if (++v73 == v173)
        goto LABEL_75;
    }
    v83 = *((_QWORD *)&v202 + 1);
    v82 = (llvm *)v202;
    v214 = v202;
LABEL_111:
    if ((_BYTE)v82)
    {
      if (((_BYTE)v82 - 120) >= 0x20u
        && ((_BYTE)v82 - 2) >= 6u
        && ((_BYTE)v82 - 15) >= 0x3Cu)
      {
        if (v82 > 0xDu || ((1 << (char)v82) & 0x2C00) == 0)
        {
LABEL_115:
          v89 = sub_1C612FE00((llvm::EVT *)&v214, v77);
          if ((_BYTE)v214)
            EVT = sub_1C47F37A0((unsigned __int8 *)&v214);
          else
            EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v214 + 1) + 24), 0, v88);
          if (EVT == 10)
            v117 = 5;
          else
            v117 = 6;
          v118 = v214;
          v119 = (llvm *)sub_1C4816F98(*(llvm::LLVMContext **)(v18 + 56), v117, 0, v89, 0);
          v122 = sub_1C6366AB4(v18, 0, a2, v119, v120, 0, 0);
          v123 = 0;
          v124 = *(_QWORD *)(v18 + 832);
          if (v124)
            v123 = *(_WORD *)(v124 + 8);
          v91 = sub_1C5D52060(v18, 216, a2, (llvm *)v118, *((uint64_t *)&v118 + 1), (uint64_t)v122, v121, v123);
          goto LABEL_172;
        }
        v91 = sub_1C5D404C4(v18, a2, (_BOOL8)v82, v83, 0, 0.0);
LABEL_172:
        v113 = v91;
        v115 = v92;
        v116 = v186;
        goto LABEL_173;
      }
    }
    else
    {
      if ((*(_DWORD *)(v83 + 8) & 0xFE) == 0x12)
        v87 = *(unsigned __int8 *)(**(_QWORD **)(v83 + 16) + 8);
      else
        v87 = *(_DWORD *)(v83 + 8);
      if (v87 != 13)
        goto LABEL_115;
    }
    v91 = sub_1C6366AB4(v18, 0, a2, v82, v83, 0, 0);
    goto LABEL_172;
  }
  v15 = 0;
LABEL_50:
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  return v15;
}

uint64_t sub_1C5D5ACD8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3[4];
  __int16 v4;
  const char *v5;
  __int16 v6;
  _BYTE v7[40];

  if ((_DWORD)a2)
  {
    v2 = a2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(result + 8) + 64))(*(_QWORD *)(result + 8), a2, 0);
    if ((result & 1) == 0)
    {
      v5 = "cannot lower memory intrinsic in address space ";
      v6 = 259;
      v4 = 264;
      LODWORD(v3[0]) = v2;
      sub_1C6131AAC((uint64_t *)&v5, v3, (uint64_t)v7);
      llvm::report_fatal_error((uint64_t)v7, 1);
    }
  }
  return result;
}

uint64_t *sub_1C5D5AD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, unsigned __int8 a12, int a13, unsigned __int8 a14, char a15, __int128 *a16, __int128 *a17, uint64_t a18)
{
  uint64_t v18;
  const llvm::APInt *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::APInt *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  _QWORD ***v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _BOOL4 v48;
  int v49;
  int v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned __int16 v53;
  unsigned __int8 v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  __int128 v64;
  _QWORD *IntPtrType;
  _QWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  unsigned __int8 v77;
  size_t v78;
  int v79;
  const llvm::DataLayout *v80;
  uint64_t v81;
  unsigned __int8 v82;
  char v83;
  int v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  __int16 v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ExtendedSizeInBits;
  const char *v96;
  unint64_t v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  unsigned int v123;
  unsigned int v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  __int16 v138;
  const llvm::DataLayout *v139;
  int v140;
  unint64_t v141;
  uint64_t *v142;
  __int16 v143;
  uint64_t v144;
  llvm::LLVMContext *v145;
  unint64_t v146;
  int v147;
  unsigned __int8 v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  const llvm::APInt *v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  _BYTE v162[24];
  __int128 v163;
  _QWORD v164[2];
  __int128 v165;
  void *__p;
  _BYTE *v167;
  uint64_t v168;
  void *v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  size_t v174;
  int v175;
  void *v176;
  void *v177;
  char *v178;
  uint64_t v179;
  unsigned __int8 *v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD v185[194];
  _QWORD v186[66];
  _QWORD v187[194];
  _BYTE v188[96];
  void *v189;
  uint64_t v190;
  _BYTE v191[128];
  __int128 v192;
  _QWORD v193[20];

  v18 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v153 = v20;
  v154 = v21;
  v156 = v22;
  v24 = v23;
  v25 = v19;
  v27 = v26;
  v29 = v28;
  v30 = v18;
  v31 = a9;
  v32 = a17;
  v33 = a14;
  v34 = a12;
  v193[17] = *MEMORY[0x1E0C80C00];
  v35 = *(unsigned __int16 *)(a9 + 24);
  v36 = v35 == 35 || v35 == 11;
  v155 = v19;
  if (!v36)
    goto LABEL_39;
  v37 = *(_QWORD *)(a9 + 80);
  v38 = (_QWORD ***)(v37 + 24);
  v39 = *(_DWORD *)(v37 + 32);
  if (v39 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v37 + 24)) == v39)
      return v29;
    v34 = a12;
    v33 = a14;
    v40 = **v38;
  }
  else
  {
    v40 = *v38;
    if (!*v38)
      return v29;
  }
  v159 = *a16;
  v160 = *((_QWORD *)a16 + 2);
  v32 = a17;
  v157 = *a17;
  v158 = *((_QWORD *)a17 + 2);
  if (*(_WORD *)(v156 + 24) == 51)
  {
    v41 = v29;
    v25 = v155;
    if (v29)
      return v41;
    goto LABEL_39;
  }
  v148 = v34;
  v149 = v27;
  v151 = (uint64_t)v29;
  v42 = *(_QWORD *)(v30 + 24);
  v43 = *(_QWORD **)(v30 + 40);
  v44 = *(_QWORD *)(*v43 + 40);
  v145 = *(llvm::LLVMContext **)(v30 + 56);
  v167 = 0;
  v168 = 0;
  __p = 0;
  v45 = v43[7];
  v46 = *(_DWORD *)(v43[1] + 484);
  if (v46 - 28 < 6 || v46 <= 0xB && ((1 << v46) & 0x888) != 0)
  {
    v47 = *(_QWORD *)(*v43 + 112);
    if (v47)
      v48 = *(char *)(v47 + 13) < 0;
    else
      v48 = 0;
  }
  else
  {
    v132 = v33;
    v133 = sub_1C636604C(v30);
    v33 = v132;
    v48 = v133;
  }
  v49 = *(unsigned __int16 *)(v24 + 24);
  v147 = v33;
  if (v49 == 39 || v49 == 15)
  {
    v50 = *(_DWORD *)(v24 + 76);
    v51 = v50 < 0 && v50 >= -*(_DWORD *)(v45 + 32);
    v52 = !v51;
    v144 = v24;
  }
  else
  {
    v144 = 0;
    v52 = 0;
  }
  v152 = v24;
  v53 = sub_1C5D633A0(v30, v156);
  if (v53 >= 0x100u && v148 <= v53)
    v54 = v53;
  else
    v54 = v148;
  v55 = (unsigned int *)(v42 + 184284);
  if (!v48)
    v55 = (unsigned int *)(v42 + 184280);
  v56 = *v55;
  v169 = v40;
  v170 = (unsigned __int16)(v148 << 8) | ((unint64_t)v54 << 48) | v52;
  *(_QWORD *)&v192 = *(_QWORD *)(*v43 + 112);
  if (sub_1C5D7B8E8(v42, &__p, v56, (uint64_t)&v169, v160, v158, (uint64_t)&v192))
  {
    v80 = (const llvm::DataLayout *)(v44 + 272);
    v29 = (uint64_t *)v151;
    if (v52)
    {
      llvm::EVT::getTypeForEVT((llvm::EVT *)__p, v145);
      llvm::DataLayout::getAlignment(v44 + 272, v81);
      v83 = v148;
      v32 = a17;
      if (v148 < v82)
      {
        v84 = *(_DWORD *)(v144 + 76);
        v85 = *(_QWORD *)(v45 + 8) + 40 * (*(_DWORD *)(v45 + 32) + v84);
        v87 = *(unsigned __int8 *)(v85 + 16);
        v86 = (unsigned __int8 *)(v85 + 16);
        if (v87 < v82)
        {
          *v86 = v82;
          if (!*(_BYTE *)(*(_QWORD *)(v45 + 8) + 40 * (*(_DWORD *)(v45 + 32) + v84) + 20)
            && *(unsigned __int8 *)(v45 + 60) < v82)
          {
            *(_BYTE *)(v45 + 60) = v82;
          }
        }
        v83 = v82;
      }
    }
    else
    {
      v83 = v148;
      v32 = a17;
    }
    v136 = v83;
    v165 = *(_OWORD *)(a18 + 16);
    if (v147)
      v88 = 4;
    else
      v88 = 0;
    v164[0] = 0;
    v164[1] = 0;
    v169 = &v171;
    v170 = 0x800000000;
    v89 = v193;
    *(_QWORD *)&v192 = v193;
    *((_QWORD *)&v192 + 1) = 0x800000000;
    v189 = v191;
    v90 = ((unint64_t)(v167 - (_BYTE *)__p) >> 4);
    v190 = 0x800000000;
    v91 = (v167 - (_BYTE *)__p) & 0xFFFFFFFF0;
    v143 = v88;
    if (v91)
    {
      v134 = (v167 - (_BYTE *)__p) & 0xFFFFFFFF0;
      v135 = ((unint64_t)(v167 - (_BYTE *)__p) >> 4);
      v93 = 0;
      v94 = 0;
      v138 = v88 | 0x10;
      v137 = v54 | 0x100;
      v25 = v155;
      v139 = v80;
      do
      {
        v163 = *(_OWORD *)((char *)__p + v93);
        if ((_BYTE)v163)
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v163);
        else
          ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v163);
        v97 = ExtendedSizeInBits;
        if ((_DWORD)v96 == 1)
        sub_1C4824250((uint64_t *)&v157, v94, (uint64_t)v162);
        v141 = v97 >> 3;
        if (llvm::MachinePointerInfo::isDereferenceable((llvm::MachinePointerInfo *)v162, v97 >> 3, v145, v80))v98 = v138;
        else
          v98 = v88;
        v100 = *((_QWORD *)&v163 + 1);
        v99 = v163;
        v101 = sub_1C6369954(v30, v156, v154, v94, 0, v25, 0);
        v103 = v102;
        sub_1C4824250((uint64_t *)&v157, v94, (uint64_t)&v161);
        v104 = sub_1C63681B0(v30, v99, v100, (uint64_t)v25, v151, v149, (uint64_t)v101, v103, &v161, v137, SHIDWORD(v137), v98, (uint64_t)v164, 0);
        v106 = v105;
        v107 = v170;
        if (v170 >= (unint64_t)HIDWORD(v170))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, (uint64_t)&v171, v170 + 1, 16);
          v107 = v170;
        }
        v108 = (char *)v169 + 16 * v107;
        *v108 = v104;
        v108[1] = v106;
        LODWORD(v170) = v170 + 1;
        v109 = DWORD2(v192);
        v25 = v155;
        v88 = v143;
        v80 = v139;
        if (DWORD2(v192) >= (unint64_t)HIDWORD(v192))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v192, (uint64_t)v193, DWORD2(v192) + 1, 16);
          v109 = DWORD2(v192);
        }
        v24 = v152;
        v31 = a9;
        v110 = (_QWORD *)(v192 + 16 * v109);
        *v110 = v104;
        v110[1] = 1;
        v92 = ++DWORD2(v192);
        v94 += v141;
        v93 += 16;
        --v90;
      }
      while (v90);
      v89 = (uint64_t *)v192;
      v29 = (uint64_t *)v151;
      v32 = a17;
      v91 = v134;
      v90 = v135;
    }
    else
    {
      v92 = 0;
      v24 = v152;
      v25 = v155;
    }
    v111 = *(_QWORD *)(v30 + 832);
    if (v111)
      v112 = *(unsigned __int16 *)(v111 + 8);
    else
      v112 = 0;
    v142 = sub_1C636D0C8(v30, (const char *)2, v25, (llvm *)1, 0, v89, v92, v112);
    v114 = 0;
    LODWORD(v190) = 0;
    if (v91)
    {
      v115 = 0;
      v116 = 0;
      v140 = v113;
      do
      {
        v163 = *(_OWORD *)((char *)__p + v115);
        if ((_BYTE)v163)
          v117 = sub_1C47A8C74((unsigned __int8 *)&v163);
        else
          v117 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v163);
        v146 = v117;
        v119 = v90;
        if ((_DWORD)v118 == 1)
        v120 = *(_QWORD *)((char *)v169 + v115);
        v121 = *(_QWORD *)((char *)v169 + v115 + 8);
        v122 = sub_1C6369954(v30, v24, v153, v116, 0, v155, 0);
        v124 = v123;
        sub_1C4824250((uint64_t *)&v159, v116, (uint64_t)v162);
        v125 = sub_1C636B75C(v30, (uint64_t)v142, v140, (uint64_t)v155, v120, v121, (uint64_t)v122, v124, (uint64_t)v162, v136, 0, v143, (uint64_t)v164);
        v127 = v126;
        v128 = v190;
        if (v190 >= (unint64_t)HIDWORD(v190))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, (uint64_t)v191, v190 + 1, 16);
          v128 = v190;
        }
        v129 = (char *)v189 + 16 * v128;
        *v129 = v125;
        v129[1] = v127;
        v114 = (v190 + 1);
        LODWORD(v190) = v190 + 1;
        v116 += (v146 >> 3);
        v115 += 16;
        --v90;
        v24 = v152;
        v32 = a17;
        v25 = v155;
        v31 = a9;
      }
      while (v119 != 1);
      v29 = (uint64_t *)v151;
    }
    v130 = *(_QWORD *)(v30 + 832);
    if (v130)
      v131 = *(unsigned __int16 *)(v130 + 8);
    else
      v131 = 0;
    v27 = v149;
    v41 = sub_1C636D0C8(v30, (const char *)2, v25, (llvm *)1, 0, (uint64_t *)v189, v114, v131);
    if (v189 != v191)
      free(v189);
    if ((_QWORD *)v192 != v193)
      free((void *)v192);
    if (v169 != &v171)
      free(v169);
  }
  else
  {
    v41 = 0;
    v29 = (uint64_t *)v151;
    v24 = v152;
    v27 = v149;
    v25 = v155;
    v32 = a17;
  }
  if (__p)
  {
    v167 = __p;
    operator delete(__p);
  }
  if (!v41)
  {
LABEL_39:
    v57 = *(_QWORD *)(v30 + 8);
    if (v57
      && (v58 = (*(uint64_t (**)(uint64_t, uint64_t, const llvm::APInt *, uint64_t *, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v57 + 24))(v57, v30, v25, v29, v27, v24, v153)) != 0)
    {
      return (uint64_t *)v58;
    }
    else
    {
      v150 = v27;
      sub_1C5D5ACD8(*(_QWORD *)(v30 + 24), *((unsigned int *)a16 + 4));
      sub_1C5D5ACD8(*(_QWORD *)(v30 + 24), *((unsigned int *)v32 + 4));
      v60 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(v30 + 56) + 1912), 0);
      v61 = operator new(0x30uLL);
      *v61 = 0;
      v61[1] = v24;
      v62 = v24;
      v61[2] = v153;
      v61[3] = v60;
      *((_DWORD *)v61 + 8) = 0;
      v61[5] = 0;
      v63 = operator new(0x60uLL);
      v63[6] = 0;
      v63[7] = v156;
      v63[8] = v154;
      v63[9] = v60;
      *((_DWORD *)v63 + 20) = 0;
      v63[11] = 0;
      v64 = *((_OWORD *)v61 + 1);
      *(_OWORD *)v63 = *(_OWORD *)v61;
      *((_OWORD *)v63 + 1) = v64;
      *((_OWORD *)v63 + 2) = *((_OWORD *)v61 + 2);
      operator delete(v61);
      IntPtrType = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v30 + 40) + 40) + 272), *(llvm::LLVMContext **)(v30 + 56), 0);
      v66 = operator new(0xC0uLL);
      v66[12] = 0;
      v66[13] = v31;
      v66[14] = a10;
      v66[15] = IntPtrType;
      *((_DWORD *)v66 + 32) = 0;
      v66[17] = 0;
      v67 = *((_OWORD *)v63 + 3);
      *((_OWORD *)v66 + 2) = *((_OWORD *)v63 + 2);
      *((_OWORD *)v66 + 3) = v67;
      v68 = *((_OWORD *)v63 + 5);
      *((_OWORD *)v66 + 4) = *((_OWORD *)v63 + 4);
      *((_OWORD *)v66 + 5) = v68;
      v69 = *((_OWORD *)v63 + 1);
      *(_OWORD *)v66 = *(_OWORD *)v63;
      *((_OWORD *)v66 + 1) = v69;
      operator delete(v63);
      v169 = 0;
      LODWORD(v170) = 0;
      v171 = 0;
      v172 = 32;
      v173 = 0xFFFFFFFFLL;
      v174 = 0;
      v175 = 0;
      v176 = 0;
      v177 = 0;
      v178 = 0;
      v179 = v30;
      v180 = 0;
      v181 = 0;
      v182 = 0;
      v183 = v185;
      v184 = 0x2000000000;
      v185[192] = v186;
      v185[193] = 0x2000000000;
      v186[64] = v187;
      v186[65] = 0x2000000000;
      v187[192] = v188;
      v187[193] = 0x400000000;
      v188[64] = 0;
      v188[88] = 0;
      if (&v180 != (unsigned __int8 **)v155)
      {
        v70 = *(unsigned __int8 **)v155;
        v180 = v70;
        if (v70)
          llvm::MetadataTracking::track((uint64_t)&v180, v70, 2);
      }
      v71 = *((_DWORD *)v155 + 2);
      v169 = v29;
      v72 = *(unsigned int *)(*(_QWORD *)(v30 + 24) + 183220);
      v181 = v71;
      LODWORD(v170) = v150;
      v192 = *(_OWORD *)(*(_QWORD *)(v62 + 40) + 16 * v153);
      llvm::EVT::getTypeForEVT((llvm::EVT *)&v192, *(llvm::LLVMContext **)(v30 + 56));
      v74 = v73;
      v75 = *(_QWORD **)(v30 + 24);
      v76 = (char *)v75[22136];
      v77 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v75 + 32))(v75, *(_QWORD *)(**(_QWORD **)(v30 + 40) + 40) + 272, 0);
      v78 = sub_1C63675D8(v30, v76, v77, 0);
      v171 = v74;
      v174 = v78;
      v175 = v79;
      HIDWORD(v173) = v72;
      LODWORD(v173) = 3;
      if (v176)
      {
        v177 = v176;
        operator delete(v176);
      }
      v176 = v66;
      v177 = v66 + 18;
      v178 = (char *)(v66 + 24);
      (***(void (****)(_QWORD, _QWORD, uint64_t, void **))(v179 + 24))(*(_QWORD *)(v179 + 24), *(_QWORD *)(v179 + 40), v72, &v176);
      LOWORD(v172) = v172 & 0xFFDF;
      BYTE2(v172) = a15;
      sub_1C5D1FE10(*(unsigned __int8 **)(v30 + 24), (uint64_t)&v169, (uint64_t)&v192);
      v41 = (uint64_t *)v193[0];
      sub_1C632CB64(&v169);
    }
  }
  return v41;
}

uint64_t *sub_1C5D5B948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, unsigned __int8 a12, int a13, unsigned __int8 a14, char a15, __int128 *a16, uint64_t a17)
{
  uint64_t v17;
  const llvm::APInt *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::APInt *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 *v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v37;
  _QWORD ***v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  int v53;
  _BOOL4 v54;
  __int128 *v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::APInt *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  const llvm::APInt *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  _QWORD *IntPtrType;
  _QWORD *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  unsigned __int8 v94;
  size_t v95;
  int v96;
  uint64_t v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  int v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  uint64_t ExtendedSizeInBits;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  BOOL v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  _QWORD *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unsigned int v143;
  unsigned int v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  const char *v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _BOOL4 v155;
  __int128 *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int16 v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned __int8 v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const llvm::APInt *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  _BYTE v182[24];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  void *__p;
  _BYTE *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  void *v191[2];
  uint64_t v192;
  __int16 v193;
  __int16 v194;
  uint64_t v195;
  size_t v196;
  int v197;
  void *v198;
  void *v199;
  char *v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD v207[194];
  _QWORD v208[66];
  _QWORD v209[194];
  _BYTE v210[104];
  uint64_t v211;

  v17 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v178 = v21;
  v179 = v20;
  v22 = v19;
  v24 = v23;
  v25 = v18;
  v27 = v26;
  v29 = v28;
  v30 = (_QWORD *)v17;
  v31 = a9;
  v32 = a16;
  v33 = a14;
  v34 = a12;
  v211 = *MEMORY[0x1E0C80C00];
  v35 = *(unsigned __int16 *)(a9 + 24);
  if (v35 != 35 && v35 != 11)
  {
LABEL_51:
    v70 = v30[1];
    if (v70)
    {
      v71 = v30;
      v72 = (*(uint64_t (**)(uint64_t, _QWORD *, const llvm::APInt *, void *, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v70 + 32))(v70, v30, v25, v29, v27, v24, v22);
      v30 = v71;
      if (v72)
        return (uint64_t *)v72;
    }
    v170 = v29;
    v172 = v27;
    v74 = (uint64_t)v30;
    sub_1C5D5ACD8(v30[3], *((unsigned int *)v32 + 4));
    v75 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(v74 + 56) + 1912), 0);
    v76 = v25;
    v77 = operator new(0x30uLL);
    *v77 = 0;
    v77[1] = v24;
    v174 = v24;
    *((_DWORD *)v77 + 4) = v22;
    *((_DWORD *)v77 + 5) = 0;
    v77[3] = v75;
    *((_DWORD *)v77 + 8) = 0;
    v77[5] = 0;
    *(_OWORD *)v191 = *(_OWORD *)(*(_QWORD *)(v179 + 40) + 16 * v178);
    llvm::EVT::getTypeForEVT((llvm::EVT *)v191, *(llvm::LLVMContext **)(v74 + 56));
    v79 = v78;
    v80 = operator new(0x60uLL);
    v80[6] = 0;
    v80[7] = v179;
    *((_DWORD *)v80 + 16) = v178;
    *((_DWORD *)v80 + 17) = 0;
    v80[9] = v79;
    *((_DWORD *)v80 + 20) = 0;
    v80[11] = 0;
    v81 = *((_OWORD *)v77 + 1);
    *(_OWORD *)v80 = *(_OWORD *)v77;
    *((_OWORD *)v80 + 1) = v81;
    *((_OWORD *)v80 + 2) = *((_OWORD *)v77 + 2);
    operator delete(v77);
    IntPtrType = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(v74 + 40) + 40) + 272), *(llvm::LLVMContext **)(v74 + 56), 0);
    v83 = operator new(0xC0uLL);
    v83[12] = 0;
    v83[13] = v31;
    v83[14] = a10;
    v83[15] = IntPtrType;
    *((_DWORD *)v83 + 32) = 0;
    v83[17] = 0;
    v84 = *((_OWORD *)v80 + 3);
    *((_OWORD *)v83 + 2) = *((_OWORD *)v80 + 2);
    *((_OWORD *)v83 + 3) = v84;
    v85 = *((_OWORD *)v80 + 5);
    *((_OWORD *)v83 + 4) = *((_OWORD *)v80 + 4);
    *((_OWORD *)v83 + 5) = v85;
    v86 = *((_OWORD *)v80 + 1);
    *(_OWORD *)v83 = *(_OWORD *)v80;
    *((_OWORD *)v83 + 1) = v86;
    operator delete(v80);
    v191[0] = 0;
    LODWORD(v191[1]) = 0;
    v192 = 0;
    v193 = v193 & 0xFC00 | 0x20;
    v194 = 0;
    v195 = 0xFFFFFFFFLL;
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v200 = 0;
    v201 = v74;
    v202 = 0;
    v203 = 0;
    v204 = 0;
    v205 = v207;
    v206 = 0x2000000000;
    v207[192] = v208;
    v207[193] = 0x2000000000;
    v208[64] = v209;
    v208[65] = 0x2000000000;
    v209[192] = v210;
    v209[193] = 0x400000000;
    v210[64] = 0;
    v210[88] = 0;
    if (&v202 != (unsigned __int8 **)v76)
    {
      v87 = *(unsigned __int8 **)v76;
      v202 = v87;
      if (v87)
        llvm::MetadataTracking::track((uint64_t)&v202, v87, 2);
    }
    v88 = *((_DWORD *)v76 + 2);
    v191[0] = v170;
    v89 = *(unsigned int *)(*(_QWORD *)(v74 + 24) + 183224);
    v203 = v88;
    LODWORD(v191[1]) = v172;
    v184 = *(_OWORD *)(*(_QWORD *)(v174 + 40) + 16 * v22);
    llvm::EVT::getTypeForEVT((llvm::EVT *)&v184, *(llvm::LLVMContext **)(v74 + 56));
    v91 = v90;
    v92 = *(_QWORD **)(v74 + 24);
    v93 = (char *)v92[22137];
    v94 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v92 + 32))(v92, *(_QWORD *)(**(_QWORD **)(v74 + 40) + 40) + 272, 0);
    v95 = sub_1C63675D8(v74, v93, v94, 0);
    v192 = v91;
    v196 = v95;
    v197 = v96;
    HIDWORD(v195) = v89;
    LODWORD(v195) = 3;
    if (v198)
    {
      v199 = v198;
      operator delete(v198);
    }
    v198 = v83;
    v199 = v83 + 18;
    v200 = (char *)(v83 + 24);
    (***(void (****)(_QWORD, _QWORD, uint64_t, void **))(v201 + 24))(*(_QWORD *)(v201 + 24), *(_QWORD *)(v201 + 40), v89, &v198);
    v193 &= ~0x20u;
    LOBYTE(v194) = a15;
    sub_1C5D1FE10(*(unsigned __int8 **)(v74 + 24), (uint64_t)v191, (uint64_t)&v184);
    v42 = (uint64_t *)v185;
    sub_1C632CB64(v191);
    return v42;
  }
  v176 = v18;
  v177 = v19;
  v37 = *(_QWORD *)(a9 + 80);
  v38 = (_QWORD ***)(v37 + 24);
  v39 = *(_DWORD *)(v37 + 32);
  if (v39 > 0x40)
  {
    v41 = (_QWORD *)v17;
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v37 + 24)) == v39)
      return (uint64_t *)v29;
    v34 = a12;
    v33 = a14;
    v30 = v41;
    v40 = **v38;
  }
  else
  {
    v40 = *v38;
    if (!*v38)
      return (uint64_t *)v29;
  }
  v180 = *a16;
  v181 = *((_QWORD *)a16 + 2);
  if (*(_WORD *)(v179 + 24) == 51)
  {
    v42 = (uint64_t *)v29;
    v25 = v176;
    v22 = v177;
    if (v29)
      return v42;
    goto LABEL_51;
  }
  v168 = v34;
  v169 = (uint64_t)v29;
  v43 = v30[3];
  v187 = 0;
  v188 = 0;
  __p = 0;
  v44 = (_QWORD *)v30[5];
  v45 = v44[7];
  v46 = *(_DWORD *)(v44[1] + 484);
  if (v46 - 28 >= 6 && ((v47 = v46 > 0xB, v48 = (1 << v46) & 0x888, !v47) ? (v49 = v48 == 0) : (v49 = 1), v49))
  {
    v153 = v30;
    v154 = v44[7];
    v155 = sub_1C636604C((uint64_t)v30);
    v45 = v154;
    v30 = v153;
    v51 = v155;
  }
  else
  {
    v50 = *(_QWORD *)(*v44 + 112);
    if (v50)
      v51 = *(char *)(v50 + 13) < 0;
    else
      v51 = 0;
  }
  v52 = *(unsigned __int16 *)(v24 + 24);
  v171 = v27;
  v173 = v24;
  if (v52 == 39 || v52 == 15)
  {
    v53 = *(_DWORD *)(v24 + 76);
    v54 = v53 < 0 && v53 >= -*(_DWORD *)(v45 + 32);
    v55 = a16;
    v56 = !v54;
    v164 = v24;
  }
  else
  {
    v55 = a16;
    v164 = 0;
    v56 = 0;
  }
  v57 = (unsigned int *)(v43 + 184252);
  v58 = *(unsigned __int16 *)(v179 + 24);
  v175 = (uint64_t)v30;
  v166 = v45;
  if (v58 == 11 || v58 == 35)
  {
    v59 = v43;
    v60 = *(_QWORD *)(v179 + 80);
    v61 = (llvm::APInt *)(v60 + 24);
    v62 = *(_DWORD *)(v60 + 32);
    if (v62 > 0x40)
    {
      v66 = llvm::APInt::countLeadingZerosSlowCase(v61);
      v67 = v57 + 1;
      if (!v51)
        v67 = v57;
      v64 = *v67;
      if (v66 != v62)
        goto LABEL_36;
    }
    else
    {
      v63 = v57 + 1;
      if (!v51)
        v63 = v57;
      v64 = *v63;
      if (*(_QWORD *)v61)
      {
LABEL_36:
        v65 = 0x1000000;
        v32 = v55;
        v43 = v59;
        goto LABEL_44;
      }
    }
    v32 = v55;
    v43 = v59;
    v65 = 0x101000000;
  }
  else
  {
    v68 = (unsigned int *)(v43 + 184256);
    if (!v51)
      v68 = (unsigned int *)(v43 + 184252);
    v64 = *v68;
    v65 = 0x1000000;
    v32 = v55;
  }
LABEL_44:
  v69 = 0x10000;
  if (v33)
    v69 = 0;
  v191[0] = v40;
  v191[1] = (void *)(v69 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v168 << 8) | v56 | (unint64_t)v65);
  *(_QWORD *)&v184 = *(_QWORD *)(*v44 + 112);
  if (!sub_1C5D7B8E8(v43, &__p, v64, (uint64_t)v191, v181, 0xFFFFFFFFLL, (uint64_t)&v184))
  {
    v42 = 0;
    v27 = v171;
    v24 = v173;
    v29 = (void *)v169;
    v25 = v176;
    v22 = v177;
    goto LABEL_48;
  }
  if (v56)
  {
    llvm::EVT::getTypeForEVT((llvm::EVT *)__p, *(llvm::LLVMContext **)(v175 + 56));
    llvm::DataLayout::getAlignment(*(_QWORD *)(**(_QWORD **)(v175 + 40) + 40) + 272, v97);
    v99 = v168;
    if (v168 < v98)
    {
      v100 = *(_DWORD *)(v164 + 76);
      v101 = *(_QWORD *)(v166 + 8) + 40 * (*(_DWORD *)(v166 + 32) + v100);
      v103 = *(unsigned __int8 *)(v101 + 16);
      v102 = (unsigned __int8 *)(v101 + 16);
      if (v103 < v98)
      {
        *v102 = v98;
        if (!*(_BYTE *)(*(_QWORD *)(v166 + 8) + 40 * (*(_DWORD *)(v166 + 32) + v100) + 20)
          && *(unsigned __int8 *)(v166 + 60) < v98)
        {
          *(_BYTE *)(v166 + 60) = v98;
        }
      }
      v99 = v98;
    }
  }
  else
  {
    v99 = v168;
  }
  v157 = v43;
  v167 = v40;
  v156 = v32;
  v191[0] = &v192;
  v191[1] = (void *)0x800000000;
  v104 = v187 - (_BYTE *)__p;
  v105 = (unint64_t)(v187 - (_BYTE *)__p) >> 4;
  v106 = *((_QWORD *)__p + 1);
  v107 = *(_QWORD *)__p;
  v108 = *(_QWORD *)__p >> 8;
  if (v105 >= 2)
  {
    v109 = 0;
    v110 = (v104 >> 4) - 1;
    while (1)
    {
      v111 = (unsigned __int8 *)__p + v109 + 16;
      if (*v111 != v107)
        break;
      if (!v107)
      {
        if (*(_QWORD *)((char *)__p + v109 + 24) != v106)
          break;
        v107 = 0;
      }
LABEL_76:
      v109 += 16;
      if (!--v110)
        goto LABEL_79;
    }
    if (sub_1C50989E0(v111, v107 | (unint64_t)(v108 << 8), v106))
    {
      v106 = *(_QWORD *)((char *)__p + v109 + 24);
      v107 = *(_QWORD *)((char *)__p + v109 + 16);
      v108 = *(_QWORD *)((char *)__p + v109 + 16) >> 8;
    }
    goto LABEL_76;
  }
LABEL_79:
  v161 = sub_1C5D641AC(v179, v178, (llvm *)(v107 | (unint64_t)(v108 << 8)), v106, v175, v176);
  v162 = v112;
  v185 = *(_OWORD *)(a17 + 16);
  v184 = 0uLL;
  if ((_DWORD)v105)
  {
    v115 = 0;
    v116 = 0;
    if (v33)
      v117 = 4;
    else
      v117 = 0;
    v160 = v117;
    v158 = v104 & 0xFFFFFFFF0;
    v159 = v99;
    while (1)
    {
      v165 = v115;
      v183 = *(_OWORD *)((char *)__p + v115);
      if ((_BYTE)v183)
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v183);
      else
        ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v183);
      v120 = ExtendedSizeInBits;
      v121 = v175;
      if ((_DWORD)v119 == 1)
      {
        v121 = v175;
      }
      v163 = v120;
      v122 = (v120 >> 3);
      v123 = v122 >= (unint64_t)v167;
      v124 = v122 - (_QWORD)v167;
      v125 = v123 ? v124 : 0;
      if (v183 == v107)
        break;
      v189 = v107 | (unint64_t)(v108 << 8);
      v190 = v106;
      if (!(_BYTE)v183)
        goto LABEL_98;
      v128 = sub_1C47A8C74((unsigned __int8 *)&v183);
LABEL_101:
      v130 = v128;
      v131 = v129;
      if (v107)
        v132 = sub_1C47A8C74((unsigned __int8 *)&v189);
      else
        v132 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v189);
      v121 = v175;
      if (v131 == 1 && v133 != 1)
      {
        v127 = (uint64_t)v161;
        v126 = v162;
        goto LABEL_120;
      }
      v127 = (uint64_t)v161;
      v126 = v162;
      if (v130 < v132)
      {
        if (v107)
        {
          v134 = v157;
          if (v107 - 15 < 0x9C)
            goto LABEL_118;
        }
        else
        {
          v134 = v157;
          if ((*(_DWORD *)(v106 + 8) & 0xFE) == 0x12)
            goto LABEL_118;
        }
        if ((_BYTE)v183)
        {
          if (v183 - 15 < 0x9C)
            goto LABEL_118;
          v135 = *((_QWORD *)&v183 + 1);
        }
        else
        {
          v135 = *((_QWORD *)&v183 + 1);
          if ((*(_DWORD *)(*((_QWORD *)&v183 + 1) + 8) & 0xFE) == 0x12)
          {
LABEL_118:
            v138 = sub_1C5D641AC(v179, v178, (llvm *)v183, *((uint64_t *)&v183 + 1), v175, v176);
            goto LABEL_119;
          }
        }
        if (!(*(unsigned int (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134
                                                                                                  + 1160))(v134, v107 | (unint64_t)(v108 << 8), v106, v183, v135))goto LABEL_118;
        v136 = *(_QWORD *)(v175 + 832);
        if (v136)
          v137 = *(_WORD *)(v136 + 8);
        else
          v137 = 0;
        v138 = sub_1C5D52060(v175, 201, v176, (llvm *)v183, *((uint64_t *)&v183 + 1), (uint64_t)v161, v162, v137);
LABEL_119:
        v121 = v175;
        v127 = (uint64_t)v138;
        v126 = v139;
      }
LABEL_120:
      v140 = v116 - v125;
      v141 = v121;
      v142 = sub_1C6369954(v121, v173, v177, v116 - v125, 0, v176, 0);
      v144 = v143;
      sub_1C4824250((uint64_t *)&v180, v140, (uint64_t)v182);
      v145 = sub_1C636B75C(v141, v169, v171, (uint64_t)v176, v127, v126, (uint64_t)v142, v144, (uint64_t)v182, v159, SHIDWORD(v159), v160, (uint64_t)&v184);
      v147 = v146;
      v148 = LODWORD(v191[1]);
      if (LODWORD(v191[1]) >= (unint64_t)HIDWORD(v191[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v191, (uint64_t)&v192, LODWORD(v191[1]) + 1, 16);
        v148 = LODWORD(v191[1]);
      }
      v31 = a9;
      v149 = (char *)v191[0] + 16 * v148;
      *v149 = v145;
      v149[1] = v147;
      ++LODWORD(v191[1]);
      if ((_BYTE)v183)
        v150 = sub_1C47A8C74((unsigned __int8 *)&v183);
      else
        v150 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v183);
      v152 = v150;
      if ((_DWORD)v151 == 1)
      v167 = (_QWORD *)((char *)v167 - (v163 >> 3));
      v115 = v165 + 16;
      v116 = v140 + (v152 >> 3);
      if (v158 == v165 + 16)
        goto LABEL_80;
    }
    v127 = (uint64_t)v161;
    v126 = v162;
    if (v107)
      goto LABEL_120;
    v127 = (uint64_t)v161;
    v126 = v162;
    if (*((_QWORD *)&v183 + 1) == v106)
      goto LABEL_120;
    v189 = v107 | (unint64_t)(v108 << 8);
    v190 = v106;
LABEL_98:
    v128 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v183);
    goto LABEL_101;
  }
LABEL_80:
  v113 = *(_QWORD *)(v175 + 832);
  if (v113)
    v114 = *(unsigned __int16 *)(v113 + 8);
  else
    v114 = 0;
  v25 = v176;
  v22 = v177;
  v27 = v171;
  v24 = v173;
  v29 = (void *)v169;
  v32 = v156;
  v42 = sub_1C636D0C8(v175, (const char *)2, v176, (llvm *)1, 0, (uint64_t *)v191[0], LODWORD(v191[1]), v114);
  if (v191[0] != &v192)
    free(v191[0]);
LABEL_48:
  if (__p)
  {
    v187 = __p;
    operator delete(__p);
  }
  v30 = (_QWORD *)v175;
  if (!v42)
    goto LABEL_51;
  return v42;
}

uint64_t *sub_1C5D5C56C(uint64_t a1, uint64_t *a2, unint64_t a3, const llvm::APInt *a4)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
    return (uint64_t *)*a2;
  v19 = v21;
  v20 = 0x400000000;
  if (a3 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, a3, 16);
    LODWORD(v10) = v20;
    goto LABEL_9;
  }
  if (a3)
  {
    LODWORD(v10) = 0;
LABEL_9:
    v12 = (unsigned int *)a2;
    do
    {
      v13 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 40) + 16 * v12[2]);
      if (v10 >= HIDWORD(v20))
      {
        v18 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 40) + 16 * v12[2]);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v10 + 1, 16);
        v13 = v18;
        LODWORD(v10) = v20;
      }
      *((_OWORD *)v19 + v10) = v13;
      v10 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      v12 += 4;
    }
    while (v12 != (unsigned int *)&a2[2 * a3]);
    v11 = (uint64_t *)v19;
    goto LABEL_14;
  }
  v10 = 0;
  v11 = v21;
LABEL_14:
  v15 = sub_1C636AB20(a1, v11, v10);
  v16 = *(_QWORD *)(a1 + 832);
  if (v16)
    v17 = *(_WORD *)(v16 + 8);
  else
    v17 = 0;
  v5 = sub_1C636D410(a1, (const char *)0x37, a4, v15, v14, a2, a3, v17);
  if (v19 != v21)
    free(v19);
  return v5;
}

unsigned __int8 **sub_1C5D5C710(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int16 v12;
  uint64_t v15;
  _QWORD *v17;
  __int16 v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned int v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *i;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t v42[2];
  uint64_t v43[2];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  void *v47[2];
  _QWORD v48[18];

  v12 = a5;
  v15 = a11;
  v48[16] = *MEMORY[0x1E0C80C00];
  v43[0] = a4;
  v43[1] = a5;
  v42[0] = a9;
  v42[1] = a10;
  v41 = a2;
  if (*(unsigned __int8 *)(a4 + 16 * (a5 - 1)) == 172)
  {
    LODWORD(v47[0]) = *(_DWORD *)(a3 + 8);
    v17 = (_QWORD *)sub_1C636AE58(a1, &v41, (int *)v47, (unsigned __int8 **)a3, v43, v42, &a11);
    sub_1C5D42768(a1, (uint64_t)v17, (uint64_t)a6, a7);
LABEL_15:
    v32 = *(_QWORD *)(a1 + 208);
    v31 = (_QWORD *)(a1 + 208);
    v17[1] = v32;
    v17[2] = v31;
    *(_QWORD *)(v32 + 8) = v17 + 1;
    *v31 = v17 + 1;
    for (i = (_QWORD *)v31[56]; i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v17);
    return (unsigned __int8 **)v17;
  }
  v19 = a2;
  v44 = v46;
  v45 = 0x2000000000;
  sub_1C5D3E710(&v44, (unsigned __int16)a2, a4, a5, a6, a7);
  v20 = sub_1C636ADD4(v19, *(_DWORD *)(a3 + 8), a4, v12, a9, a10, v15);
  v21 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 4);
    v21 = v45;
  }
  *((_DWORD *)v44 + v21) = v20;
  v22 = (v45 + 1);
  LODWORD(v45) = v22;
  v23 = *(_DWORD *)(v15 + 16);
  if (v22 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v22 + 1, 4);
    LODWORD(v22) = v45;
  }
  *((_DWORD *)v44 + v22) = v23;
  v24 = (v45 + 1);
  LODWORD(v45) = v24;
  v25 = *(unsigned __int16 *)(v15 + 32);
  if (v24 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v24 + 1, 4);
    LODWORD(v24) = v45;
  }
  *((_DWORD *)v44 + v24) = v25;
  LODWORD(v45) = v45 + 1;
  v40 = 0;
  v26 = sub_1C6365B08(a1, (uint64_t)&v44, a3, &v40);
  v27 = v26;
  if (v26)
  {
    v28 = v26[12];
    v29 = *(unsigned __int8 *)(v15 + 34);
    v17 = 0;
    if (v29 >= v28[34])
    {
      v28[34] = v29;
      v30 = *(_OWORD *)v15;
      *(_QWORD *)(v28 + 13) = *(_QWORD *)(v15 + 13);
      *(_OWORD *)v28 = v30;
    }
  }
  else
  {
    LODWORD(v47[0]) = *(_DWORD *)(a3 + 8);
    v17 = (_QWORD *)sub_1C636AE58(a1, &v41, (int *)v47, (unsigned __int8 **)a3, v43, v42, &a11);
    sub_1C5D42768(a1, (uint64_t)v17, (uint64_t)a6, a7);
    v35 = *(_DWORD *)(a1 + 340) + 1;
    v36 = *(_DWORD *)(a1 + 336);
    if (v35 > 2 * v36)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v36, (uint64_t)off_1E8198CA0);
      v47[0] = v48;
      v47[1] = (void *)0x2000000000;
      v37 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v17, (unsigned int *)v47));
      if (v47[0] != v48)
        free(v47[0]);
      v35 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v37 = v40;
    }
    *(_DWORD *)(a1 + 340) = v35;
    v38 = *(_QWORD *)v37;
    if (!*(_QWORD *)v37)
      v38 = v37 | 1;
    *v17 = v38;
    *(_QWORD *)v37 = v17;
  }
  if (v44 != v46)
    free(v44);
  if (!v27)
    goto LABEL_15;
  return v27;
}

_QWORD *sub_1C5D5CAB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *i;
  uint64_t v33;
  uint64_t v34[2];
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[128];
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  _QWORD v46[18];

  v46[16] = *MEMORY[0x1E0C80C00];
  v36 = a8;
  v37 = a7;
  if (a2)
    v15 = 312;
  else
    v15 = 313;
  v35 = v15;
  v34[0] = sub_1C636D7B0((llvm *)1, 0);
  v34[1] = 1;
  v41 = a4;
  v42 = a5;
  v16 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 40);
  v17 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v16 + 272, *(unsigned int *)(v16 + 276));
  v43 = sub_1C5D406AC(a1, a6, (llvm *)v17, 0, 1);
  v44 = v18;
  v38 = v40;
  v39 = 0x2000000000;
  sub_1C5D3E710(&v38, v15, v34[0], 1, &v41, 2);
  v19 = v39;
  if (v39 >= HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 4);
    v19 = v39;
  }
  *((_DWORD *)v38 + v19) = a6;
  v20 = (v39 + 1);
  LODWORD(v39) = v20;
  if (v20 >= HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v20 + 1, 4);
    LODWORD(v20) = v39;
  }
  *((_DWORD *)v38 + v20) = a7;
  v21 = (v39 + 1);
  LODWORD(v39) = v21;
  if (v21 >= HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v21 + 1, 4);
    LODWORD(v21) = v39;
  }
  *((_DWORD *)v38 + v21) = HIDWORD(a7);
  v22 = (v39 + 1);
  LODWORD(v39) = v22;
  if (v22 >= HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v22 + 1, 4);
    LODWORD(v22) = v39;
  }
  *((_DWORD *)v38 + v22) = a8;
  v23 = (v39 + 1);
  LODWORD(v39) = v23;
  if (v23 >= HIDWORD(v39))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v23 + 1, 4);
    LODWORD(v23) = v39;
  }
  *((_DWORD *)v38 + v23) = HIDWORD(a8);
  LODWORD(v39) = v39 + 1;
  v33 = 0;
  v24 = sub_1C6365B08(a1, (uint64_t)&v38, a3, &v33);
  if (!v24)
  {
    LODWORD(v45[0]) = *(_DWORD *)(a3 + 8);
    v24 = (_QWORD *)sub_1C636AEF4(a1, &v35, (int *)v45, (unsigned __int8 **)a3, v34, &v37, &v36);
    sub_1C5D42768(a1, (uint64_t)v24, (uint64_t)&v41, 2);
    v26 = *(_DWORD *)(a1 + 340) + 1;
    v27 = *(_DWORD *)(a1 + 336);
    if (v26 > 2 * v27)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v27, (uint64_t)off_1E8198CA0);
      v45[0] = v46;
      v45[1] = (void *)0x2000000000;
      v28 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v24, (unsigned int *)v45));
      if (v45[0] != v46)
        free(v45[0]);
      v26 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v28 = v33;
    }
    v29 = *(_QWORD *)v28;
    if (!*(_QWORD *)v28)
      v29 = v28 | 1;
    *v24 = v29;
    *(_QWORD *)v28 = v24;
    v31 = *(_QWORD *)(a1 + 208);
    v30 = a1 + 208;
    *(_DWORD *)(v30 + 132) = v26;
    v24[1] = v31;
    v24[2] = v30;
    *(_QWORD *)(v31 + 8) = v24 + 1;
    *(_QWORD *)v30 = v24 + 1;
    for (i = *(_QWORD **)(v30 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v24);
  }
  if (v38 != v40)
    free(v38);
  return v24;
}

_QWORD *sub_1C5D5CE64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *i;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  uint64_t v35;
  int v36;
  void *v37[2];
  _QWORD v38[17];

  v38[16] = *MEMORY[0x1E0C80C00];
  v30 = a6;
  v31 = a5;
  v28 = 317;
  v29 = a7;
  v27[0] = sub_1C636D7B0((llvm *)1, 0);
  v27[1] = 1;
  v35 = a3;
  v36 = a4;
  v32 = v34;
  v33 = 0x2000000000;
  sub_1C5D3E710(&v32, 317, v27[0], 1, &v35, 1);
  v13 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 4);
    v13 = v33;
  }
  *((_DWORD *)v32 + v13) = a5;
  v14 = (v33 + 1);
  LODWORD(v33) = v14;
  if (v14 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v14 + 1, 4);
    LODWORD(v14) = v33;
  }
  *((_DWORD *)v32 + v14) = HIDWORD(a5);
  v15 = (v33 + 1);
  LODWORD(v33) = v15;
  if (v15 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v15 + 1, 4);
    LODWORD(v15) = v33;
  }
  *((_DWORD *)v32 + v15) = a6;
  v16 = (v33 + 1);
  LODWORD(v33) = v16;
  if (v16 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v16 + 1, 4);
    LODWORD(v16) = v33;
  }
  *((_DWORD *)v32 + v16) = HIDWORD(a6);
  LODWORD(v33) = v33 + 1;
  v26 = 0;
  v17 = sub_1C6365B08(a1, (uint64_t)&v32, a2, &v26);
  if (!v17)
  {
    LODWORD(v37[0]) = *(_DWORD *)(a2 + 8);
    v17 = (_QWORD *)sub_1C636AF74(a1, &v28, (int *)v37, (unsigned __int8 **)a2, v27, &v31, &v30, &v29);
    sub_1C5D42768(a1, (uint64_t)v17, (uint64_t)&v35, 1);
    v19 = *(_DWORD *)(a1 + 340) + 1;
    v20 = *(_DWORD *)(a1 + 336);
    if (v19 > 2 * v20)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v20, (uint64_t)off_1E8198CA0);
      v37[0] = v38;
      v37[1] = (void *)0x2000000000;
      v21 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v17, (unsigned int *)v37));
      if (v37[0] != v38)
        free(v37[0]);
      v19 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v21 = v26;
    }
    v22 = *(_QWORD *)v21;
    if (!*(_QWORD *)v21)
      v22 = v21 | 1;
    *v17 = v22;
    *(_QWORD *)v21 = v17;
    v24 = *(_QWORD *)(a1 + 208);
    v23 = a1 + 208;
    *(_DWORD *)(v23 + 132) = v19;
    v17[1] = v24;
    v17[2] = v23;
    *(_QWORD *)(v24 + 8) = v17 + 1;
    *(_QWORD *)v23 = v17 + 1;
    for (i = *(_QWORD **)(v23 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v17);
  }
  if (v32 != v34)
    free(v32);
  return v17;
}

__n128 sub_1C5D5D188(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  __n128 result;

  v6 = *(unsigned __int16 *)(a6 + 24);
  switch(v6)
  {
    case 11:
      goto LABEL_4;
    case 51:
      result.n128_u64[0] = sub_1C5D5D680(a2, a3, a4, 0, a1).n128_u64[0];
      return result;
    case 35:
LABEL_4:
      v7 = *(_QWORD *)(a6 + 80);
      v8 = *(_DWORD *)(v7 + 32);
      if (v8 > 0x40)
        v9 = **(_QWORD **)(v7 + 24);
      else
        v9 = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v8) >> -(char)v8;
      result.n128_u64[0] = sub_1C5D5D680(a2, a3, a4, v9, a1).n128_u64[0];
      break;
    default:
      result = *a2;
      *a1 = *a2;
      a1[1].n128_u64[0] = a2[1].n128_u64[0];
      break;
  }
  return result;
}

_QWORD *sub_1C5D5D21C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 **v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  __int128 v35;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *i;
  char v45;
  uint64_t v48;
  uint64_t v49[2];
  int v50;
  int v51;
  uint64_t v52[2];
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  void *v62[2];
  _QWORD v63[18];

  v15 = a2;
  v16 = a15;
  v63[16] = *MEMORY[0x1E0C80C00];
  v52[0] = a13;
  v52[1] = a14;
  v50 = a3;
  v51 = a2;
  if (a4 == a13 && ((_BYTE)a4 || a5 == a14))
  {
    LOBYTE(a3) = 0;
    v50 = 0;
  }
  v45 = a3;
  if (a2)
  {
    v19 = (uint64_t *)(*(_QWORD *)(a9 + 40) + 16 * a10);
    v17 = sub_1C636B134(a1, a4, a5, *v19, v19[1], 1, 0);
  }
  else
  {
    v17 = sub_1C636A8B4(a1, a4, a5, 1, 0);
  }
  v20 = v17;
  v21 = v18;
  v49[0] = v17;
  v49[1] = v18;
  v56 = a7;
  v57 = a8;
  v58 = a9;
  v59 = a10;
  v60 = a11;
  v61 = a12;
  v53 = v55;
  v54 = 0x2000000000;
  sub_1C5D3E710(&v53, 253, v17, v18, &v56, 3);
  if ((_BYTE)a13)
    v22 = a13;
  else
    v22 = a14;
  v23 = v54;
  if (v54 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 4);
    v23 = v54;
  }
  *((_DWORD *)v53 + v23) = v22;
  v24 = (v54 + 1);
  LODWORD(v54) = v24;
  if (v24 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v24 + 1, 4);
    LODWORD(v24) = v54;
  }
  *((_DWORD *)v53 + v24) = HIDWORD(v22);
  LODWORD(v54) = v54 + 1;
  v25 = sub_1C636B2D4(*(_DWORD *)(a6 + 8), v20, v21, v15, v45, a13, a14, v16);
  v26 = v54;
  if (v54 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 4);
    v26 = v54;
  }
  *((_DWORD *)v53 + v26) = v25;
  v27 = (v54 + 1);
  LODWORD(v54) = v27;
  v28 = *(_DWORD *)(v16 + 16);
  if (v27 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v27 + 1, 4);
    LODWORD(v27) = v54;
  }
  *((_DWORD *)v53 + v27) = v28;
  v29 = (v54 + 1);
  LODWORD(v54) = v29;
  v30 = *(unsigned __int16 *)(v16 + 32);
  if (v29 >= HIDWORD(v54))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v29 + 1, 4);
    LODWORD(v29) = v54;
  }
  *((_DWORD *)v53 + v29) = v30;
  LODWORD(v54) = v54 + 1;
  v48 = 0;
  v31 = sub_1C6365B08(a1, (uint64_t)&v53, a6, &v48);
  if (v31)
  {
    v32 = v31;
    v33 = v31[12];
    v34 = *(unsigned __int8 *)(v16 + 34);
    if (v34 >= v33[34])
    {
      v33[34] = v34;
      v35 = *(_OWORD *)v16;
      *(_QWORD *)(v33 + 13) = *(_QWORD *)(v16 + 13);
      *(_OWORD *)v33 = v35;
    }
  }
  else
  {
    LODWORD(v62[0]) = *(_DWORD *)(a6 + 8);
    v32 = (_QWORD *)sub_1C636B364(a1, (int *)v62, (unsigned __int8 **)a6, v49, (__int16 *)&v51, (__int16 *)&v50, v52, &a15);
    sub_1C5D42768(a1, (uint64_t)v32, (uint64_t)&v56, 3);
    v37 = *(_DWORD *)(a1 + 340) + 1;
    v38 = *(_DWORD *)(a1 + 336);
    if (v37 > 2 * v38)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v38, (uint64_t)off_1E8198CA0);
      v62[0] = v63;
      v62[1] = (void *)0x2000000000;
      v39 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v32, (unsigned int *)v62));
      if (v62[0] != v63)
        free(v62[0]);
      v37 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v39 = v48;
    }
    v40 = *(_QWORD *)v39;
    if (!*(_QWORD *)v39)
      v40 = v39 | 1;
    *v32 = v40;
    *(_QWORD *)v39 = v32;
    v41 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v37;
    v32[1] = v41;
    v32[2] = a1 + 208;
    *(_QWORD *)(v41 + 8) = v32 + 1;
    *(_QWORD *)(a1 + 208) = v32 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v32);
  }
  if (v53 != v55)
    free(v53);
  return v32;
}

__n128 sub_1C5D5D680@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X4>, __n128 *a5@<X8>)
{
  unint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t *FixedStack;
  __n128 result;
  unsigned __int32 v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v5 = a4;
  v7 = *(unsigned __int16 *)(a3 + 24);
  if (v7 == 15)
    goto LABEL_4;
  if (v7 == 56)
  {
    v14 = *(uint64_t **)(a3 + 32);
    v15 = v14[5];
    v16 = *(unsigned __int16 *)(v15 + 24);
    if (v16 == 35 || v16 == 11)
    {
      v18 = *v14;
      v19 = *(unsigned __int16 *)(v18 + 24);
      if (v19 == 15 || v19 == 39)
      {
        v20 = *(_DWORD *)(v18 + 76);
        v21 = *(_QWORD *)(v15 + 80);
        v22 = *(_DWORD *)(v21 + 32);
        if (v22 > 0x40)
          v23 = **(_QWORD **)(v21 + 24);
        else
          v23 = (uint64_t)(*(_QWORD *)(v21 + 24) << -(char)v22) >> -(char)v22;
        v5 = v23 + a4;
        v10 = *(uint64_t ***)(*(_QWORD *)(a2 + 40) + 432);
        v9 = v20;
        goto LABEL_5;
      }
    }
LABEL_17:
    result = *a1;
    *a5 = *a1;
    a5[1].n128_u64[0] = a1[1].n128_u64[0];
    return result;
  }
  if (v7 != 39)
    goto LABEL_17;
LABEL_4:
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_DWORD *)(a3 + 76);
  v10 = *(uint64_t ***)(v8 + 432);
LABEL_5:
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(v10, v9);
  a5->n128_u64[0] = (unint64_t)FixedStack | 4;
  a5->n128_u64[1] = v5;
  a5[1].n128_u8[4] = 0;
  if (FixedStack)
    v13 = *((_DWORD *)FixedStack + 3);
  else
    v13 = 0;
  a5[1].n128_u32[0] = v13;
  return result;
}

_QWORD *sub_1C5D5D774(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 **v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  __int128 v35;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *i;
  uint64_t v45;
  unsigned __int8 v47;
  int v48;
  uint64_t v49;
  uint64_t v50[2];
  uint64_t v51[2];
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  int v62;
  void *v63[2];
  _QWORD v64[18];

  v45 = a9;
  v64[16] = *MEMORY[0x1E0C80C00];
  v15 = (uint64_t *)(*(_QWORD *)(a5 + 40) + 16 * a6);
  v17 = v15[1];
  v51[0] = *v15;
  v16 = v51[0];
  v51[1] = v17;
  v18 = sub_1C636D7B0((llvm *)1, 0);
  v50[0] = v18;
  v50[1] = 1;
  v19 = *(_QWORD *)(a7 + 40) + 16 * a8;
  v20 = sub_1C61312D0(a1, *(llvm **)v19, *(_QWORD *)(v19 + 8));
  v55 = a2;
  v56 = a3;
  v57 = a5;
  v58 = a6;
  v59 = a7;
  v60 = a8;
  v61 = v20;
  v62 = v21;
  v52 = v54;
  v53 = 0x2000000000;
  sub_1C5D3E710(&v52, 254, v18, 1, &v55, 4);
  if (LOBYTE(v51[0]))
    v22 = LOBYTE(v51[0]);
  else
    v22 = v17;
  v23 = v53;
  if (v53 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 4);
    v23 = v53;
  }
  *((_DWORD *)v52 + v23) = v22;
  v24 = (v53 + 1);
  LODWORD(v53) = v24;
  if (v24 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v24 + 1, 4);
    LODWORD(v24) = v53;
  }
  *((_DWORD *)v52 + v24) = HIDWORD(v22);
  LODWORD(v53) = v53 + 1;
  v25 = sub_1C636B878(*(_DWORD *)(a4 + 8), v18, 1, 0, 0, v16, v17, v45);
  v26 = v53;
  if (v53 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 4);
    v26 = v53;
  }
  *((_DWORD *)v52 + v26) = v25;
  v27 = (v53 + 1);
  LODWORD(v53) = v27;
  v28 = *(_DWORD *)(v45 + 16);
  if (v27 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v27 + 1, 4);
    LODWORD(v27) = v53;
  }
  *((_DWORD *)v52 + v27) = v28;
  v29 = (v53 + 1);
  LODWORD(v53) = v29;
  v30 = *(unsigned __int16 *)(v45 + 32);
  if (v29 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v29 + 1, 4);
    LODWORD(v29) = v53;
  }
  *((_DWORD *)v52 + v29) = v30;
  LODWORD(v53) = v53 + 1;
  v49 = 0;
  v31 = sub_1C6365B08(a1, (uint64_t)&v52, a4, &v49);
  if (v31)
  {
    v32 = v31;
    v33 = v31[12];
    v34 = *(unsigned __int8 *)(v45 + 34);
    if (v34 >= v33[34])
    {
      v33[34] = v34;
      v35 = *(_OWORD *)v45;
      *(_QWORD *)(v33 + 13) = *(_QWORD *)(v45 + 13);
      *(_OWORD *)v33 = v35;
    }
  }
  else
  {
    LODWORD(v63[0]) = *(_DWORD *)(a4 + 8);
    v48 = 0;
    v47 = 0;
    v32 = (_QWORD *)sub_1C636B910(a1, (int *)v63, (unsigned __int8 **)a4, v50, (__int16 *)&v48, &v47, v51, &a9);
    sub_1C5D42768(a1, (uint64_t)v32, (uint64_t)&v55, 4);
    v37 = *(_DWORD *)(a1 + 340) + 1;
    v38 = *(_DWORD *)(a1 + 336);
    if (v37 > 2 * v38)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v38, (uint64_t)off_1E8198CA0);
      v63[0] = v64;
      v63[1] = (void *)0x2000000000;
      v39 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v32, (unsigned int *)v63));
      if (v63[0] != v64)
        free(v63[0]);
      v37 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v39 = v49;
    }
    v40 = *(_QWORD *)v39;
    if (!*(_QWORD *)v39)
      v40 = v39 | 1;
    *v32 = v40;
    *(_QWORD *)v39 = v32;
    v42 = *(_QWORD *)(a1 + 208);
    v41 = a1 + 208;
    *(_DWORD *)(v41 + 132) = v37;
    v32[1] = v42;
    v32[2] = v41;
    *(_QWORD *)(v42 + 8) = v32 + 1;
    *(_QWORD *)v41 = v32 + 1;
    for (i = *(_QWORD **)(v41 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v32);
  }
  if (v52 != v54)
    free(v52);
  return v32;
}

_QWORD *sub_1C5D5DBA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  unsigned int v40;
  __int128 v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *i;
  unsigned __int8 v51;
  int v52;
  uint64_t v53;
  uint64_t v54[2];
  uint64_t v55[2];
  void *v56;
  uint64_t v57;
  _BYTE v58[128];
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  int v66;
  void *v67[2];
  _QWORD v68[18];

  v18 = a11;
  v68[16] = *MEMORY[0x1E0C80C00];
  v55[0] = a9;
  v55[1] = a10;
  v19 = (unsigned __int8 *)(*(_QWORD *)(a5 + 40) + 16 * a6);
  v20 = *v19;
  if (v20 == a9)
  {
    v21 = *((_QWORD *)v19 + 1);
    if (v20 || v21 == a10)
      return sub_1C5D5D774(a1, a2, a3, a4, a5, a6, a7, a8, a11);
  }
  v54[0] = sub_1C636D7B0((llvm *)1, 0);
  v54[1] = 1;
  v25 = *(_QWORD *)(a7 + 40) + 16 * a8;
  v26 = sub_1C61312D0(a1, *(llvm **)v25, *(_QWORD *)(v25 + 8));
  v59 = a2;
  v60 = a3;
  v61 = a5;
  v62 = a6;
  v63 = a7;
  v27 = v54[0];
  v64 = a8;
  v65 = v26;
  v66 = v28;
  v56 = v58;
  v57 = 0x2000000000;
  sub_1C5D3E710(&v56, 254, v54[0], 1, &v59, 4);
  if ((_BYTE)a9)
    v29 = a9;
  else
    v29 = a10;
  v30 = v57;
  if (v57 >= HIDWORD(v57))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 4);
    v30 = v57;
  }
  *((_DWORD *)v56 + v30) = v29;
  v31 = (v57 + 1);
  LODWORD(v57) = v31;
  if (v31 >= HIDWORD(v57))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v31 + 1, 4);
    LODWORD(v31) = v57;
  }
  *((_DWORD *)v56 + v31) = HIDWORD(v29);
  LODWORD(v57) = v57 + 1;
  v32 = sub_1C636B878(*(_DWORD *)(a4 + 8), v27, 1, 0, 1, a9, a10, v18);
  v33 = v57;
  if (v57 >= HIDWORD(v57))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 4);
    v33 = v57;
  }
  *((_DWORD *)v56 + v33) = v32;
  v34 = (v57 + 1);
  LODWORD(v57) = v34;
  v35 = *(_DWORD *)(v18 + 16);
  if (v34 >= HIDWORD(v57))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v34 + 1, 4);
    LODWORD(v34) = v57;
  }
  *((_DWORD *)v56 + v34) = v35;
  v36 = (v57 + 1);
  LODWORD(v57) = v36;
  v37 = *(unsigned __int16 *)(v18 + 32);
  if (v36 >= HIDWORD(v57))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v36 + 1, 4);
    LODWORD(v36) = v57;
  }
  *((_DWORD *)v56 + v36) = v37;
  LODWORD(v57) = v57 + 1;
  v53 = 0;
  v38 = sub_1C6365B08(a1, (uint64_t)&v56, a4, &v53);
  if (v38)
  {
    v23 = v38;
    v39 = v38[12];
    v40 = *(unsigned __int8 *)(v18 + 34);
    if (v40 >= v39[34])
    {
      v39[34] = v40;
      v41 = *(_OWORD *)v18;
      *(_QWORD *)(v39 + 13) = *(_QWORD *)(v18 + 13);
      *(_OWORD *)v39 = v41;
    }
  }
  else
  {
    LODWORD(v67[0]) = *(_DWORD *)(a4 + 8);
    v52 = 0;
    v51 = 1;
    v23 = (_QWORD *)sub_1C636B910(a1, (int *)v67, (unsigned __int8 **)a4, v54, (__int16 *)&v52, &v51, v55, &a11);
    sub_1C5D42768(a1, (uint64_t)v23, (uint64_t)&v59, 4);
    v42 = *(_DWORD *)(a1 + 340) + 1;
    v43 = *(_DWORD *)(a1 + 336);
    v44 = a1;
    if (v42 > 2 * v43)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v43, (uint64_t)off_1E8198CA0);
      v67[0] = v68;
      v67[1] = (void *)0x2000000000;
      v45 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v23, (unsigned int *)v67));
      if (v67[0] != v68)
        free(v67[0]);
      v44 = a1;
      v42 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v45 = v53;
    }
    v46 = *(_QWORD *)v45;
    if (!*(_QWORD *)v45)
      v46 = v45 | 1;
    *v23 = v46;
    *(_QWORD *)v45 = v23;
    v48 = *(_QWORD *)(v44 + 208);
    v47 = v44 + 208;
    *(_DWORD *)(v47 + 132) = v42;
    v23[1] = v48;
    v23[2] = v47;
    *(_QWORD *)(v48 + 8) = v23 + 1;
    *(_QWORD *)v47 = v23 + 1;
    for (i = *(_QWORD **)(v47 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v23);
  }
  if (v56 != v58)
    free(v56);
  return v23;
}

_QWORD *sub_1C5D5E02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, int a8, __int16 a9)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *i;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42[2];
  void *v43;
  uint64_t v44;
  _BYTE v45[128];
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  _QWORD v55[18];

  v55[17] = *MEMORY[0x1E0C80C00];
  v16 = (uint64_t *)(*(_QWORD *)(a5 + 40) + 16 * a6);
  v42[0] = sub_1C636A8B4(a1, *v16, v16[1], 1, 0);
  v42[1] = v17;
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)v18;
  v47 = *(_DWORD *)(v18 + 8);
  v46 = v19;
  v48 = *(_QWORD *)(v18 + 40);
  v49 = *(_DWORD *)(v18 + 48);
  v50 = a5;
  v51 = a6;
  v52 = a7;
  v53 = a8;
  v43 = v45;
  v44 = 0x2000000000;
  sub_1C5D3E710(&v43, 254, v42[0], v17, &v46, 4);
  if (*(_BYTE *)(a2 + 80))
    v20 = *(unsigned __int8 *)(a2 + 80);
  else
    v20 = *(_QWORD *)(a2 + 88);
  v21 = v44;
  if (v44 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 4);
    v21 = v44;
  }
  *((_DWORD *)v43 + v21) = v20;
  v22 = (v44 + 1);
  LODWORD(v44) = v22;
  if (v22 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v22 + 1, 4);
    LODWORD(v22) = v44;
  }
  *((_DWORD *)v43 + v22) = HIDWORD(v20);
  v23 = (v44 + 1);
  LODWORD(v44) = v23;
  v24 = *(_BYTE *)(a2 + 26) & 0xFA | (*(unsigned __int8 *)(a2 + 27) << 8);
  if (v23 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v23 + 1, 4);
    LODWORD(v23) = v44;
  }
  *((_DWORD *)v43 + v23) = v24;
  v25 = (v44 + 1);
  LODWORD(v44) = v25;
  v26 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
  if (v25 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v25 + 1, 4);
    LODWORD(v25) = v44;
  }
  *((_DWORD *)v43 + v25) = v26;
  v27 = (v44 + 1);
  LODWORD(v44) = v27;
  v28 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 96) + 32);
  if (v27 >= HIDWORD(v44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v27 + 1, 4);
    LODWORD(v27) = v44;
  }
  *((_DWORD *)v43 + v27) = v28;
  LODWORD(v44) = v44 + 1;
  v41 = 0;
  v29 = sub_1C6365B08(a1, (uint64_t)&v43, a4, &v41);
  if (!v29)
  {
    v40 = *(_DWORD *)(a4 + 8);
    v39 = (*(_WORD *)(a2 + 26) & 0x400) != 0;
    v54 = *(_OWORD *)(a2 + 80);
    v38 = *(_QWORD *)(a2 + 96);
    v29 = (_QWORD *)sub_1C636B910(a1, &v40, (unsigned __int8 **)a4, v42, &a9, (unsigned __int8 *)&v39, (uint64_t *)&v54, &v38);
    sub_1C5D42768(a1, (uint64_t)v29, (uint64_t)&v46, 4);
    v31 = *(_DWORD *)(a1 + 340) + 1;
    v32 = *(_DWORD *)(a1 + 336);
    if (v31 > 2 * v32)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v32, (uint64_t)off_1E8198CA0);
      *(_QWORD *)&v54 = v55;
      *((_QWORD *)&v54 + 1) = 0x2000000000;
      v33 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v29, (unsigned int *)&v54));
      if ((_QWORD *)v54 != v55)
        free((void *)v54);
      v31 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v33 = v41;
    }
    v34 = *(_QWORD *)v33;
    if (!*(_QWORD *)v33)
      v34 = v33 | 1;
    *v29 = v34;
    *(_QWORD *)v33 = v29;
    v36 = *(_QWORD *)(a1 + 208);
    v35 = a1 + 208;
    *(_DWORD *)(v35 + 132) = v31;
    v29[1] = v36;
    v29[2] = v35;
    *(_QWORD *)(v36 + 8) = v29 + 1;
    *(_QWORD *)v35 = v29 + 1;
    for (i = *(_QWORD **)(v35 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v29);
  }
  if (v43 != v45)
    free(v43);
  return v29;
}

_QWORD *sub_1C5D5E400(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int8 **v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  __int128 v39;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *i;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v55;
  uint64_t v56[2];
  unsigned __int8 v57;
  int v58;
  int v59;
  uint64_t v60[2];
  void *v61;
  uint64_t v62;
  _BYTE v63[128];
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  void *v74[2];
  _QWORD v75[18];

  LOBYTE(v21) = a4;
  v52 = a19;
  v75[16] = *MEMORY[0x1E0C80C00];
  v60[0] = a17;
  v60[1] = a18;
  v58 = a3;
  v59 = a2;
  v50 = a2;
  v51 = a3;
  v49 = a20;
  v57 = a20;
  if (a2)
  {
    v24 = (uint64_t *)(*(_QWORD *)(a9 + 40) + 16 * a10);
    v22 = sub_1C636B134(a1, a4, a5, *v24, v24[1], 1, 0);
  }
  else
  {
    v22 = sub_1C636A8B4(a1, a4, a5, 1, 0);
  }
  v25 = v22;
  v26 = v23;
  v56[0] = v22;
  v56[1] = v23;
  v64 = a7;
  v65 = a8;
  v66 = a9;
  v67 = a10;
  v68 = a11;
  v69 = a12;
  v70 = a13;
  v71 = a14;
  v72 = a15;
  v73 = a16;
  v61 = v63;
  v62 = 0x2000000000;
  sub_1C5D3E710(&v61, 369, v22, v23, &v64, 5);
  if ((_BYTE)v21)
    v21 = v21;
  else
    v21 = a5;
  v27 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 4);
    v27 = v62;
  }
  *((_DWORD *)v61 + v27) = v21;
  v28 = (v62 + 1);
  LODWORD(v62) = v28;
  if (v28 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v28 + 1, 4);
    LODWORD(v28) = v62;
  }
  *((_DWORD *)v61 + v28) = HIDWORD(v21);
  LODWORD(v62) = v62 + 1;
  v29 = sub_1C636BC48(*(_DWORD *)(a6 + 8), v25, v26, v50, v51, v49, a17, a18, v52);
  v30 = v62;
  if (v62 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 4);
    v30 = v62;
  }
  *((_DWORD *)v61 + v30) = v29;
  v31 = (v62 + 1);
  LODWORD(v62) = v31;
  v32 = *(_DWORD *)(v52 + 16);
  if (v31 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v31 + 1, 4);
    LODWORD(v31) = v62;
  }
  *((_DWORD *)v61 + v31) = v32;
  v33 = (v62 + 1);
  LODWORD(v62) = v33;
  v34 = *(unsigned __int16 *)(v52 + 32);
  if (v33 >= HIDWORD(v62))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v33 + 1, 4);
    LODWORD(v33) = v62;
  }
  *((_DWORD *)v61 + v33) = v34;
  LODWORD(v62) = v62 + 1;
  v55 = 0;
  v35 = sub_1C6365B08(a1, (uint64_t)&v61, a6, &v55);
  if (v35)
  {
    v36 = v35;
    v37 = v35[12];
    v38 = *(unsigned __int8 *)(v52 + 34);
    if (v38 >= v37[34])
    {
      v37[34] = v38;
      v39 = *(_OWORD *)v52;
      *(_QWORD *)(v37 + 13) = *(_QWORD *)(v52 + 13);
      *(_OWORD *)v37 = v39;
    }
  }
  else
  {
    LODWORD(v74[0]) = *(_DWORD *)(a6 + 8);
    v36 = (_QWORD *)sub_1C636BCE0(a1, (int *)v74, (unsigned __int8 **)a6, v56, (__int16 *)&v59, (__int16 *)&v58, &v57, v60, &a19);
    sub_1C5D42768(a1, (uint64_t)v36, (uint64_t)&v64, 5);
    v41 = *(_DWORD *)(a1 + 340) + 1;
    v42 = *(_DWORD *)(a1 + 336);
    if (v41 > 2 * v42)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v42, (uint64_t)off_1E8198CA0);
      v74[0] = v75;
      v74[1] = (void *)0x2000000000;
      v43 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v36, (unsigned int *)v74));
      if (v74[0] != v75)
        free(v74[0]);
      v41 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v43 = v55;
    }
    v44 = *(_QWORD *)v43;
    if (!*(_QWORD *)v43)
      v44 = v43 | 1;
    *v36 = v44;
    *(_QWORD *)v43 = v36;
    v45 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v41;
    v36[1] = v45;
    v36[2] = a1 + 208;
    *(_QWORD *)(v45 + 8) = v36 + 1;
    *(_QWORD *)(a1 + 208) = v36 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v36);
  }
  if (v61 != v63)
    free(v61);
  return v36;
}

_QWORD *sub_1C5D5E878(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, unsigned __int8 a19, unsigned __int8 a20)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned __int8 **v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  __int128 v42;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *i;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58[2];
  unsigned __int8 v59;
  unsigned __int8 v60;
  uint64_t v61[2];
  void *v62;
  uint64_t v63;
  _BYTE v64[128];
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  void *v77[2];
  _QWORD v78[18];

  v54 = a17;
  v78[16] = *MEMORY[0x1E0C80C00];
  v61[0] = a15;
  v61[1] = a16;
  v51 = a19;
  v52 = a20;
  v60 = a19;
  v59 = a20;
  v53 = a18;
  if (a18)
  {
    v27 = (uint64_t *)(*(_QWORD *)(a7 + 40) + 16 * a8);
    v26 = sub_1C636A8B4(a1, *v27, v27[1], 1, 0);
    v25 = v28;
  }
  else
  {
    v25 = 1;
    v26 = sub_1C636D7B0((llvm *)1, 0);
  }
  v58[0] = v26;
  v58[1] = v25;
  v65 = a2;
  v66 = a3;
  v67 = a5;
  v68 = a6;
  v69 = a7;
  v70 = a8;
  v71 = a9;
  v72 = a10;
  v73 = a11;
  v74 = a12;
  v75 = a13;
  v76 = a14;
  v62 = v64;
  v63 = 0x2000000000;
  sub_1C5D3E710(&v62, 366, v26, v25, &v65, 6);
  if ((_BYTE)a15)
    v29 = a15;
  else
    v29 = a16;
  v30 = v63;
  if (v63 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 4);
    v30 = v63;
  }
  *((_DWORD *)v62 + v30) = v29;
  v31 = (v63 + 1);
  LODWORD(v63) = v31;
  if (v31 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v31 + 1, 4);
    LODWORD(v31) = v63;
  }
  *((_DWORD *)v62 + v31) = HIDWORD(v29);
  LODWORD(v63) = v63 + 1;
  v32 = sub_1C636BF8C(*(_DWORD *)(a4 + 8), v26, v25, v53, v51, v52, a15, a16, v54);
  v33 = v63;
  if (v63 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 4);
    v33 = v63;
  }
  *((_DWORD *)v62 + v33) = v32;
  v34 = (v63 + 1);
  LODWORD(v63) = v34;
  v35 = *(_DWORD *)(v54 + 16);
  if (v34 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v34 + 1, 4);
    LODWORD(v34) = v63;
  }
  *((_DWORD *)v62 + v34) = v35;
  v36 = (v63 + 1);
  LODWORD(v63) = v36;
  v37 = *(unsigned __int16 *)(v54 + 32);
  if (v36 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v36 + 1, 4);
    LODWORD(v36) = v63;
  }
  *((_DWORD *)v62 + v36) = v37;
  LODWORD(v63) = v63 + 1;
  v57 = 0;
  v38 = sub_1C6365B08(a1, (uint64_t)&v62, a4, &v57);
  if (v38)
  {
    v39 = v38;
    v40 = v38[12];
    v41 = *(unsigned __int8 *)(v54 + 34);
    if (v41 >= v40[34])
    {
      v40[34] = v41;
      v42 = *(_OWORD *)v54;
      *(_QWORD *)(v40 + 13) = *(_QWORD *)(v54 + 13);
      *(_OWORD *)v40 = v42;
    }
  }
  else
  {
    LODWORD(v77[0]) = *(_DWORD *)(a4 + 8);
    v39 = (_QWORD *)sub_1C636C02C(a1, (int *)v77, (unsigned __int8 **)a4, v58, (__int16 *)&a18, &v60, &v59, v61, &a17);
    sub_1C5D42768(a1, (uint64_t)v39, (uint64_t)&v65, 6);
    v44 = *(_DWORD *)(a1 + 340) + 1;
    v45 = *(_DWORD *)(a1 + 336);
    if (v44 > 2 * v45)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v45, (uint64_t)off_1E8198CA0);
      v77[0] = v78;
      v77[1] = (void *)0x2000000000;
      v46 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v39, (unsigned int *)v77));
      if (v77[0] != v78)
        free(v77[0]);
      v44 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v46 = v57;
    }
    v47 = *(_QWORD *)v46;
    if (!*(_QWORD *)v46)
      v47 = v46 | 1;
    *v39 = v47;
    *(_QWORD *)v46 = v39;
    v48 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v44;
    v39[1] = v48;
    v39[2] = a1 + 208;
    *(_QWORD *)(v48 + 8) = v39 + 1;
    *(_QWORD *)(a1 + 208) = v39 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v39);
  }
  if (v62 != v64)
    free(v62);
  return v39;
}

_QWORD *sub_1C5D5ED10(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unsigned int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22)
{
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 **v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  __int128 v43;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *i;
  uint64_t v53;
  uint64_t v54[2];
  unsigned __int8 v55;
  int v56;
  int v57;
  uint64_t v58[2];
  void *v59;
  uint64_t v60;
  _BYTE v61[128];
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  void *v74[2];
  _QWORD v75[18];

  v22 = a5;
  v23 = a4;
  v24 = a3;
  v25 = a2;
  v26 = a21;
  v27 = a22;
  v75[16] = *MEMORY[0x1E0C80C00];
  v58[0] = a19;
  v58[1] = a20;
  v56 = a3;
  v57 = a2;
  v55 = a22;
  v62 = a7;
  v63 = a8;
  v64 = a9;
  v65 = a10;
  v66 = a11;
  v67 = a12;
  v68 = a13;
  v69 = a14;
  v70 = a15;
  v71 = a16;
  v72 = a17;
  v73 = a18;
  if (a2)
  {
    v30 = (uint64_t *)(*(_QWORD *)(a9 + 40) + 16 * a10);
    v28 = sub_1C636B134(a1, a4, a5, *v30, v30[1], 1, 0);
  }
  else
  {
    v28 = sub_1C636A8B4(a1, a4, a5, 1, 0);
  }
  v31 = v28;
  v32 = v29;
  v54[0] = v28;
  v54[1] = v29;
  v59 = v61;
  v60 = 0x2000000000;
  sub_1C5D3E710(&v59, 370, v28, v29, &v62, 6);
  if (v23)
    v22 = v23;
  v33 = v60;
  if (v60 >= HIDWORD(v60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 4);
    v33 = v60;
  }
  *((_DWORD *)v59 + v33) = v22;
  v34 = (v60 + 1);
  LODWORD(v60) = v34;
  if (v34 >= HIDWORD(v60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v34 + 1, 4);
    LODWORD(v34) = v60;
  }
  *((_DWORD *)v59 + v34) = HIDWORD(v22);
  LODWORD(v60) = v60 + 1;
  v35 = sub_1C636C0F4(*(_DWORD *)(a6 + 8), v31, v32, v25, v24, v27, a19, a20, v26);
  v36 = v60;
  if (v60 >= HIDWORD(v60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 4);
    v36 = v60;
  }
  *((_DWORD *)v59 + v36) = v35;
  v37 = (v60 + 1);
  LODWORD(v60) = v37;
  v38 = *(_DWORD *)(v26 + 16);
  if (v37 >= HIDWORD(v60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v37 + 1, 4);
    LODWORD(v37) = v60;
  }
  *((_DWORD *)v59 + v37) = v38;
  LODWORD(v60) = v60 + 1;
  v53 = 0;
  v39 = sub_1C6365B08(a1, (uint64_t)&v59, a6, &v53);
  if (v39)
  {
    v40 = v39;
    v41 = v39[12];
    v42 = *(unsigned __int8 *)(v26 + 34);
    if (v42 >= v41[34])
    {
      v41[34] = v42;
      v43 = *(_OWORD *)v26;
      *(_QWORD *)(v41 + 13) = *(_QWORD *)(v26 + 13);
      *(_OWORD *)v41 = v43;
    }
  }
  else
  {
    LODWORD(v74[0]) = *(_DWORD *)(a6 + 8);
    v40 = (_QWORD *)sub_1C636C18C(a1, (int *)v74, (unsigned __int8 **)a6, v54, (__int16 *)&v57, (__int16 *)&v56, &v55, v58, &a21);
    sub_1C5D42768(a1, (uint64_t)v40, (uint64_t)&v62, 6);
    v45 = *(_DWORD *)(a1 + 340) + 1;
    v46 = *(_DWORD *)(a1 + 336);
    if (v45 > 2 * v46)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v46, (uint64_t)off_1E8198CA0);
      v74[0] = v75;
      v74[1] = (void *)0x2000000000;
      v47 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v40, (unsigned int *)v74));
      if (v74[0] != v75)
        free(v74[0]);
      v45 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v47 = v53;
    }
    v48 = *(_QWORD *)v47;
    if (!*(_QWORD *)v47)
      v48 = v47 | 1;
    *v40 = v48;
    *(_QWORD *)v47 = v40;
    v49 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v45;
    v40[1] = v49;
    v40[2] = a1 + 208;
    *(_QWORD *)(v49 + 8) = v40 + 1;
    *(_QWORD *)(a1 + 208) = v40 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v40);
  }
  if (v59 != v61)
    free(v59);
  return v40;
}

_QWORD *sub_1C5D5F13C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,unsigned __int8 a21,unsigned __int8 a22)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned __int8 **v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  __int128 v42;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *i;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58[2];
  unsigned __int8 v59;
  unsigned __int8 v60;
  uint64_t v61[2];
  void *v62;
  uint64_t v63;
  _BYTE v64[128];
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  void *v79[2];
  _QWORD v80[18];

  v54 = a19;
  v80[16] = *MEMORY[0x1E0C80C00];
  v61[0] = a17;
  v61[1] = a18;
  v51 = a21;
  v52 = a22;
  v60 = a21;
  v59 = a22;
  v53 = a20;
  if (a20)
  {
    v29 = (uint64_t *)(*(_QWORD *)(a7 + 40) + 16 * a8);
    v28 = sub_1C636A8B4(a1, *v29, v29[1], 1, 0);
    v27 = v30;
  }
  else
  {
    v27 = 1;
    v28 = sub_1C636D7B0((llvm *)1, 0);
  }
  v58[0] = v28;
  v58[1] = v27;
  v65 = a2;
  v66 = a3;
  v67 = a5;
  v68 = a6;
  v69 = a7;
  v70 = a8;
  v71 = a9;
  v72 = a10;
  v73 = a11;
  v74 = a12;
  v75 = a13;
  v76 = a14;
  v77 = a15;
  v78 = a16;
  v62 = v64;
  v63 = 0x2000000000;
  sub_1C5D3E710(&v62, 367, v28, v27, &v65, 7);
  if ((_BYTE)a17)
    v31 = a17;
  else
    v31 = a18;
  v32 = v63;
  if (v63 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 4);
    v32 = v63;
  }
  *((_DWORD *)v62 + v32) = v31;
  v33 = (v63 + 1);
  LODWORD(v63) = v33;
  if (v33 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v33 + 1, 4);
    LODWORD(v33) = v63;
  }
  *((_DWORD *)v62 + v33) = HIDWORD(v31);
  LODWORD(v63) = v63 + 1;
  v34 = sub_1C636C324(*(_DWORD *)(a4 + 8), v28, v27, v53, v51, v52, a17, a18, v54);
  v35 = v63;
  if (v63 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 4);
    v35 = v63;
  }
  *((_DWORD *)v62 + v35) = v34;
  v36 = (v63 + 1);
  LODWORD(v63) = v36;
  v37 = *(_DWORD *)(v54 + 16);
  if (v36 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v36 + 1, 4);
    LODWORD(v36) = v63;
  }
  *((_DWORD *)v62 + v36) = v37;
  LODWORD(v63) = v63 + 1;
  v57 = 0;
  v38 = sub_1C6365B08(a1, (uint64_t)&v62, a4, &v57);
  if (v38)
  {
    v39 = v38;
    v40 = v38[12];
    v41 = *(unsigned __int8 *)(v54 + 34);
    if (v41 >= v40[34])
    {
      v40[34] = v41;
      v42 = *(_OWORD *)v54;
      *(_QWORD *)(v40 + 13) = *(_QWORD *)(v54 + 13);
      *(_OWORD *)v40 = v42;
    }
  }
  else
  {
    LODWORD(v79[0]) = *(_DWORD *)(a4 + 8);
    v39 = (_QWORD *)sub_1C636C3C4(a1, (int *)v79, (unsigned __int8 **)a4, v58, (__int16 *)&a20, &v60, &v59, v61, &a19);
    sub_1C5D42768(a1, (uint64_t)v39, (uint64_t)&v65, 7);
    v44 = *(_DWORD *)(a1 + 340) + 1;
    v45 = *(_DWORD *)(a1 + 336);
    if (v44 > 2 * v45)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v45, (uint64_t)off_1E8198CA0);
      v79[0] = v80;
      v79[1] = (void *)0x2000000000;
      v46 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v39, (unsigned int *)v79));
      if (v79[0] != v80)
        free(v79[0]);
      v44 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v46 = v57;
    }
    v47 = *(_QWORD *)v46;
    if (!*(_QWORD *)v46)
      v47 = v46 | 1;
    *v39 = v47;
    *(_QWORD *)v46 = v39;
    v48 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v44;
    v39[1] = v48;
    v39[2] = a1 + 208;
    *(_QWORD *)(v48 + 8) = v39 + 1;
    *(_QWORD *)(a1 + 208) = v39 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v39);
  }
  if (v62 != v64)
    free(v62);
  return v39;
}

_QWORD *sub_1C5D5F5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, char a10)
{
  __int16 v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 **v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *i;
  uint64_t v43;
  uint64_t v44[2];
  uint64_t v45[2];
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49[2];
  _QWORD v50[18];

  v14 = a3;
  v16 = a10;
  v17 = a9;
  v50[16] = *MEMORY[0x1E0C80C00];
  v45[0] = a2;
  v45[1] = a3;
  v44[0] = a4;
  v44[1] = a5;
  v46 = v48;
  v47 = 0x2000000000;
  sub_1C5D3E710(&v46, 371, a2, a3, a7, a8);
  if ((_BYTE)a4)
    v18 = a4;
  else
    v18 = a5;
  v19 = v47;
  if (v47 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 4);
    v19 = v47;
  }
  *((_DWORD *)v46 + v19) = v18;
  v20 = (v47 + 1);
  LODWORD(v47) = v20;
  if (v20 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v20 + 1, 4);
    LODWORD(v20) = v47;
  }
  *((_DWORD *)v46 + v20) = HIDWORD(v18);
  LODWORD(v47) = v47 + 1;
  v21 = sub_1C636C48C(*(_DWORD *)(a6 + 8), a2, v14, a4, a5, v17, v16);
  v22 = v47;
  if (v47 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 4);
    v22 = v47;
  }
  *((_DWORD *)v46 + v22) = v21;
  v23 = (v47 + 1);
  LODWORD(v47) = v23;
  v24 = *(_DWORD *)(v17 + 16);
  v25 = a1;
  if (v23 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v23 + 1, 4);
    LODWORD(v23) = v47;
  }
  *((_DWORD *)v46 + v23) = v24;
  v26 = (v47 + 1);
  LODWORD(v47) = v26;
  v27 = *(unsigned __int16 *)(v17 + 32);
  if (v26 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v26 + 1, 4);
    LODWORD(v26) = v47;
  }
  *((_DWORD *)v46 + v26) = v27;
  LODWORD(v47) = v47 + 1;
  v43 = 0;
  v28 = sub_1C6365B08(a1, (uint64_t)&v46, a6, &v43);
  if (v28)
  {
    v29 = v28;
    v30 = v28[12];
    v31 = *(unsigned __int8 *)(v17 + 34);
    if (v31 >= v30[34])
    {
      v30[34] = v31;
      v32 = *(_OWORD *)v17;
      *(_QWORD *)(v30 + 13) = *(_QWORD *)(v17 + 13);
      *(_OWORD *)v30 = v32;
    }
  }
  else
  {
    LODWORD(v49[0]) = *(_DWORD *)(a6 + 8);
    v29 = (_QWORD *)sub_1C636C50C(a1, (int *)v49, (unsigned __int8 **)a6, v45, v44, &a9, (__int16 *)&a10);
    sub_1C5D42768(a1, (uint64_t)v29, (uint64_t)a7, a8);
    v34 = *(_DWORD *)(a1 + 340) + 1;
    v35 = *(_DWORD *)(a1 + 336);
    if (v34 > 2 * v35)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v35, (uint64_t)off_1E8198CA0);
      v49[0] = v50;
      v49[1] = (void *)0x2000000000;
      v36 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v29, (unsigned int *)v49));
      if (v49[0] != v50)
        free(v49[0]);
      v25 = a1;
      v34 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v36 = v43;
    }
    v37 = *(_QWORD *)v36;
    if (!*(_QWORD *)v36)
      v37 = v36 | 1;
    *v29 = v37;
    *(_QWORD *)v36 = v29;
    v39 = *(_QWORD *)(v25 + 208);
    v38 = v25 + 208;
    *(_DWORD *)(v38 + 132) = v34;
    v29[1] = v39;
    v29[2] = v38;
    *(_QWORD *)(v39 + 8) = v29 + 1;
    *(_QWORD *)v38 = v29 + 1;
    for (i = *(_QWORD **)(v38 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v29);
  }
  if (v46 != v48)
    free(v46);
  return v29;
}

_QWORD *sub_1C5D5F96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, char a10)
{
  __int16 v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 **v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  __int128 v32;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *i;
  uint64_t v43;
  uint64_t v44[2];
  uint64_t v45[2];
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49[2];
  _QWORD v50[18];

  v14 = a3;
  v16 = a10;
  v17 = a9;
  v50[16] = *MEMORY[0x1E0C80C00];
  v45[0] = a2;
  v45[1] = a3;
  v44[0] = a4;
  v44[1] = a5;
  v46 = v48;
  v47 = 0x2000000000;
  sub_1C5D3E710(&v46, 368, a2, a3, a7, a8);
  if ((_BYTE)a4)
    v18 = a4;
  else
    v18 = a5;
  v19 = v47;
  if (v47 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 4);
    v19 = v47;
  }
  *((_DWORD *)v46 + v19) = v18;
  v20 = (v47 + 1);
  LODWORD(v47) = v20;
  if (v20 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v20 + 1, 4);
    LODWORD(v20) = v47;
  }
  *((_DWORD *)v46 + v20) = HIDWORD(v18);
  LODWORD(v47) = v47 + 1;
  v21 = sub_1C636C5B4(*(_DWORD *)(a6 + 8), a2, v14, a4, a5, v17, v16);
  v22 = v47;
  if (v47 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 4);
    v22 = v47;
  }
  *((_DWORD *)v46 + v22) = v21;
  v23 = (v47 + 1);
  LODWORD(v47) = v23;
  v24 = *(_DWORD *)(v17 + 16);
  v25 = a1;
  if (v23 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v23 + 1, 4);
    LODWORD(v23) = v47;
  }
  *((_DWORD *)v46 + v23) = v24;
  v26 = (v47 + 1);
  LODWORD(v47) = v26;
  v27 = *(unsigned __int16 *)(v17 + 32);
  if (v26 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v26 + 1, 4);
    LODWORD(v26) = v47;
  }
  *((_DWORD *)v46 + v26) = v27;
  LODWORD(v47) = v47 + 1;
  v43 = 0;
  v28 = sub_1C6365B08(a1, (uint64_t)&v46, a6, &v43);
  if (v28)
  {
    v29 = v28;
    v30 = v28[12];
    v31 = *(unsigned __int8 *)(v17 + 34);
    if (v31 >= v30[34])
    {
      v30[34] = v31;
      v32 = *(_OWORD *)v17;
      *(_QWORD *)(v30 + 13) = *(_QWORD *)(v17 + 13);
      *(_OWORD *)v30 = v32;
    }
  }
  else
  {
    LODWORD(v49[0]) = *(_DWORD *)(a6 + 8);
    v29 = (_QWORD *)sub_1C636C634(a1, (int *)v49, (unsigned __int8 **)a6, v45, v44, &a9, (__int16 *)&a10);
    sub_1C5D42768(a1, (uint64_t)v29, (uint64_t)a7, a8);
    v34 = *(_DWORD *)(a1 + 340) + 1;
    v35 = *(_DWORD *)(a1 + 336);
    if (v34 > 2 * v35)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v35, (uint64_t)off_1E8198CA0);
      v49[0] = v50;
      v49[1] = (void *)0x2000000000;
      v36 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v29, (unsigned int *)v49));
      if (v49[0] != v50)
        free(v49[0]);
      v25 = a1;
      v34 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v36 = v43;
    }
    v37 = *(_QWORD *)v36;
    if (!*(_QWORD *)v36)
      v37 = v36 | 1;
    *v29 = v37;
    *(_QWORD *)v36 = v29;
    v39 = *(_QWORD *)(v25 + 208);
    v38 = v25 + 208;
    *(_DWORD *)(v38 + 132) = v34;
    v29[1] = v39;
    v29[2] = v38;
    *(_QWORD *)(v39 + 8) = v29 + 1;
    *(_QWORD *)v38 = v29 + 1;
    for (i = *(_QWORD **)(v38 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v29);
  }
  if (v46 != v48)
    free(v46);
  return v29;
}

_QWORD *sub_1C5D5FD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int8 **v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  __int128 v39;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *i;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55[2];
  unsigned __int8 v56;
  uint64_t v57[2];
  void *v58;
  uint64_t v59;
  _BYTE v60[128];
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  void *v71[2];
  _QWORD v72[18];

  v51 = a17;
  v72[16] = *MEMORY[0x1E0C80C00];
  v57[0] = a15;
  v57[1] = a16;
  v49 = a19;
  v50 = a18;
  v56 = a19;
  if ((_DWORD)a18)
  {
    v23 = (uint64_t *)(*(_QWORD *)(a7 + 40) + 16 * a8);
    v21 = sub_1C636B134(a1, a2, a3, *v23, v23[1], 1, 0);
  }
  else
  {
    v21 = sub_1C636A8B4(a1, a2, a3, 1, 0);
  }
  v24 = v21;
  v25 = v22;
  v55[0] = v21;
  v55[1] = v22;
  v61 = a5;
  v62 = a6;
  v63 = a7;
  v64 = a8;
  v65 = a9;
  v66 = a10;
  v67 = a11;
  v68 = a12;
  v69 = a13;
  v70 = a14;
  v58 = v60;
  v59 = 0x2000000000;
  sub_1C5D3E710(&v58, 308, v21, v22, &v61, 5);
  if ((_BYTE)a15)
    v26 = a15;
  else
    v26 = a16;
  v27 = v59;
  if (v59 >= HIDWORD(v59))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 4);
    v27 = v59;
  }
  *((_DWORD *)v58 + v27) = v26;
  v28 = (v59 + 1);
  LODWORD(v59) = v28;
  if (v28 >= HIDWORD(v59))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v28 + 1, 4);
    LODWORD(v28) = v59;
  }
  *((_DWORD *)v58 + v28) = HIDWORD(v26);
  LODWORD(v59) = v59 + 1;
  v29 = sub_1C636C6DC(*(_DWORD *)(a4 + 8), v24, v25, v50, SBYTE4(v50), v49, a15, a16, v51);
  v30 = v59;
  if (v59 >= HIDWORD(v59))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 4);
    v30 = v59;
  }
  *((_DWORD *)v58 + v30) = v29;
  v31 = (v59 + 1);
  LODWORD(v59) = v31;
  v32 = *(_DWORD *)(v51 + 16);
  if (v31 >= HIDWORD(v59))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v31 + 1, 4);
    LODWORD(v31) = v59;
  }
  *((_DWORD *)v58 + v31) = v32;
  v33 = (v59 + 1);
  LODWORD(v59) = v33;
  v34 = *(unsigned __int16 *)(v51 + 32);
  if (v33 >= HIDWORD(v59))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v33 + 1, 4);
    LODWORD(v33) = v59;
  }
  *((_DWORD *)v58 + v33) = v34;
  LODWORD(v59) = v59 + 1;
  v54 = 0;
  v35 = sub_1C6365B08(a1, (uint64_t)&v58, a4, &v54);
  if (v35)
  {
    v36 = v35;
    v37 = v35[12];
    v38 = *(unsigned __int8 *)(v51 + 34);
    if (v38 >= v37[34])
    {
      v37[34] = v38;
      v39 = *(_OWORD *)v51;
      *(_QWORD *)(v37 + 13) = *(_QWORD *)(v51 + 13);
      *(_OWORD *)v37 = v39;
    }
  }
  else
  {
    LODWORD(v71[0]) = *(_DWORD *)(a4 + 8);
    v36 = (_QWORD *)sub_1C636C774(a1, (int *)v71, (unsigned __int8 **)a4, v55, (__int16 *)&a18, (__int16 *)&a18 + 2, &v56, v57, &a17);
    sub_1C5D42768(a1, (uint64_t)v36, (uint64_t)&v61, 5);
    v41 = *(_DWORD *)(a1 + 340) + 1;
    v42 = *(_DWORD *)(a1 + 336);
    if (v41 > 2 * v42)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v42, (uint64_t)off_1E8198CA0);
      v71[0] = v72;
      v71[1] = (void *)0x2000000000;
      v43 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v36, (unsigned int *)v71));
      if (v71[0] != v72)
        free(v71[0]);
      v41 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v43 = v54;
    }
    v44 = *(_QWORD *)v43;
    if (!*(_QWORD *)v43)
      v44 = v43 | 1;
    *v36 = v44;
    *(_QWORD *)v43 = v36;
    v45 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v41;
    v36[1] = v45;
    v36[2] = a1 + 208;
    *(_QWORD *)(v45 + 8) = v36 + 1;
    *(_QWORD *)(a1 + 208) = v36 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v36);
  }
  if (v58 != v60)
    free(v58);
  return v36;
}

_QWORD *sub_1C5D60180(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned __int8 a17, unsigned __int8 a18)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned __int8 **v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  __int128 v40;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *i;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v55;
  uint64_t v56[2];
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59[2];
  void *v60;
  uint64_t v61;
  _BYTE v62[128];
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  void *v73[2];
  _QWORD v74[18];

  v52 = a15;
  v74[16] = *MEMORY[0x1E0C80C00];
  v59[0] = a13;
  v59[1] = a14;
  v49 = a17;
  v50 = a18;
  v58 = a17;
  v57 = a18;
  v51 = a16;
  if (a16)
  {
    v25 = (uint64_t *)(*(_QWORD *)(a7 + 40) + 16 * a8);
    v24 = sub_1C636A8B4(a1, *v25, v25[1], 1, 0);
    v23 = v26;
  }
  else
  {
    v23 = 1;
    v24 = sub_1C636D7B0((llvm *)1, 0);
  }
  v56[0] = v24;
  v56[1] = v23;
  v63 = a2;
  v64 = a3;
  v65 = a5;
  v66 = a6;
  v67 = a7;
  v68 = a8;
  v69 = a9;
  v70 = a10;
  v71 = a11;
  v72 = a12;
  v60 = v62;
  v61 = 0x2000000000;
  sub_1C5D3E710(&v60, 309, v24, v23, &v63, 5);
  if ((_BYTE)a13)
    v27 = a13;
  else
    v27 = a14;
  v28 = v61;
  if (v61 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 4);
    v28 = v61;
  }
  *((_DWORD *)v60 + v28) = v27;
  v29 = (v61 + 1);
  LODWORD(v61) = v29;
  if (v29 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v29 + 1, 4);
    LODWORD(v29) = v61;
  }
  *((_DWORD *)v60 + v29) = HIDWORD(v27);
  LODWORD(v61) = v61 + 1;
  v30 = sub_1C636C8B8(*(_DWORD *)(a4 + 8), v24, v23, v51, v49, v50, a13, a14, v52);
  v31 = v61;
  if (v61 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 4);
    v31 = v61;
  }
  *((_DWORD *)v60 + v31) = v30;
  v32 = (v61 + 1);
  LODWORD(v61) = v32;
  v33 = *(_DWORD *)(v52 + 16);
  if (v32 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v32 + 1, 4);
    LODWORD(v32) = v61;
  }
  *((_DWORD *)v60 + v32) = v33;
  v34 = (v61 + 1);
  LODWORD(v61) = v34;
  v35 = *(unsigned __int16 *)(v52 + 32);
  if (v34 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v34 + 1, 4);
    LODWORD(v34) = v61;
  }
  *((_DWORD *)v60 + v34) = v35;
  LODWORD(v61) = v61 + 1;
  v55 = 0;
  v36 = sub_1C6365B08(a1, (uint64_t)&v60, a4, &v55);
  if (v36)
  {
    v37 = v36;
    v38 = v36[12];
    v39 = *(unsigned __int8 *)(v52 + 34);
    if (v39 >= v38[34])
    {
      v38[34] = v39;
      v40 = *(_OWORD *)v52;
      *(_QWORD *)(v38 + 13) = *(_QWORD *)(v52 + 13);
      *(_OWORD *)v38 = v40;
    }
  }
  else
  {
    LODWORD(v73[0]) = *(_DWORD *)(a4 + 8);
    v37 = (_QWORD *)sub_1C636C958(a1, (int *)v73, (unsigned __int8 **)a4, v56, (__int16 *)&a16, &v58, &v57, v59, &a15);
    sub_1C5D42768(a1, (uint64_t)v37, (uint64_t)&v63, 5);
    v42 = *(_DWORD *)(a1 + 340) + 1;
    v43 = *(_DWORD *)(a1 + 336);
    if (v42 > 2 * v43)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v43, (uint64_t)off_1E8198CA0);
      v73[0] = v74;
      v73[1] = (void *)0x2000000000;
      v44 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v37, (unsigned int *)v73));
      if (v73[0] != v74)
        free(v73[0]);
      v42 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v44 = v55;
    }
    v45 = *(_QWORD *)v44;
    if (!*(_QWORD *)v44)
      v45 = v44 | 1;
    *v37 = v45;
    *(_QWORD *)v44 = v37;
    v46 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 340) = v42;
    v37[1] = v46;
    v37[2] = a1 + 208;
    *(_QWORD *)(v46 + 8) = v37 + 1;
    *(_QWORD *)(a1 + 208) = v37 + 1;
    for (i = *(_QWORD **)(a1 + 656); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v37);
  }
  if (v60 != v62)
    free(v60);
  return v37;
}

_QWORD *sub_1C5D605F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, unsigned int a10, char a11)
{
  __int16 v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 **v29;
  uint64_t v30;
  BOOL v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *i;
  uint64_t v49;
  uint64_t v50[2];
  uint64_t v51[2];
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  void *v55;
  uint64_t v56;
  _QWORD v57[18];

  v14 = a3;
  v16 = a10;
  v17 = a11;
  v18 = a9;
  v57[16] = *MEMORY[0x1E0C80C00];
  v51[0] = a2;
  v51[1] = a3;
  v50[0] = (uint64_t)a4;
  v50[1] = a5;
  v52 = v54;
  v53 = 0x2000000000;
  sub_1C5D3E710(&v52, 310, a2, a3, a7, a8);
  if ((_BYTE)a4)
    v19 = a4;
  else
    v19 = a5;
  v20 = v53;
  if (v53 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 4);
    v20 = v53;
  }
  *((_DWORD *)v52 + v20) = v19;
  v21 = (v53 + 1);
  LODWORD(v53) = v21;
  if (v21 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v21 + 1, 4);
    LODWORD(v21) = v53;
  }
  *((_DWORD *)v52 + v21) = HIDWORD(v19);
  LODWORD(v53) = v53 + 1;
  v22 = sub_1C636CA94(*(_DWORD *)(a6 + 8), a2, v14, (uint64_t)a4, a5, v18, v16, v17);
  v23 = v53;
  if (v53 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 4);
    v23 = v53;
  }
  *((_DWORD *)v52 + v23) = v22;
  v24 = (v53 + 1);
  LODWORD(v53) = v24;
  v25 = *(_DWORD *)(v18 + 16);
  v26 = a1;
  if (v24 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v24 + 1, 4);
    LODWORD(v24) = v53;
  }
  *((_DWORD *)v52 + v24) = v25;
  v27 = (v53 + 1);
  LODWORD(v53) = v27;
  v28 = *(unsigned __int16 *)(v18 + 32);
  if (v27 >= HIDWORD(v53))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v27 + 1, 4);
    LODWORD(v27) = v53;
  }
  *((_DWORD *)v52 + v27) = v28;
  LODWORD(v53) = v53 + 1;
  v49 = 0;
  v29 = sub_1C6365B08(a1, (uint64_t)&v52, a6, &v49);
  if (v29)
  {
    v32 = v29;
    v33 = v29[12];
    v34 = *(unsigned __int8 *)(v18 + 34);
    if (v34 >= v33[34])
    {
      v33[34] = v34;
      v35 = *(_OWORD *)v18;
      *(_QWORD *)(v33 + 13) = *(_QWORD *)(v18 + 13);
      *(_OWORD *)v33 = v35;
    }
  }
  else
  {
    v55 = a4;
    v56 = a5;
    if ((v16 & 0xFFFFFFFD) != 0)
    {
      v38 = (uint64_t)a7;
      v37 = a8;
    }
    else
    {
      v38 = (uint64_t)a7;
      v37 = a8;
      if (sub_1C6131264((unsigned __int8 *)&v55, v30, v31) == 3)
      {
        if (v16 <= 1)
          v16 = 1;
        else
          v16 = 3;
      }
    }
    a10 = v16;
    LODWORD(v55) = *(_DWORD *)(a6 + 8);
    v32 = (_QWORD *)sub_1C636CB24(a1, (int *)&v55, (unsigned __int8 **)a6, v51, v50, &a9, (__int16 *)&a10, (__int16 *)&a11);
    sub_1C5D42768(a1, (uint64_t)v32, v38, v37);
    v39 = *(_DWORD *)(a1 + 340) + 1;
    v40 = *(_DWORD *)(a1 + 336);
    if (v39 > 2 * v40)
    {
      llvm::FoldingSetBase::GrowBucketCount(a1 + 328, 2 * v40, (uint64_t)off_1E8198CA0);
      v55 = v57;
      v56 = 0x2000000000;
      v41 = *(_QWORD *)(a1 + 328)
          + 8
          * ((*(_DWORD *)(a1 + 336) - 1) & sub_1C6370764(a1 + 328, (uint64_t)v32, (unsigned int *)&v55));
      if (v55 != v57)
        free(v55);
      v26 = a1;
      v39 = *(_DWORD *)(a1 + 340) + 1;
    }
    else
    {
      v41 = v49;
    }
    v42 = *(_QWORD *)v41;
    if (!*(_QWORD *)v41)
      v42 = v41 | 1;
    *v32 = v42;
    *(_QWORD *)v41 = v32;
    v44 = *(_QWORD *)(v26 + 208);
    v43 = v26 + 208;
    *(_DWORD *)(v43 + 132) = v39;
    v32[1] = v44;
    v32[2] = v43;
    *(_QWORD *)(v44 + 8) = v32 + 1;
    *(_QWORD *)v43 = v32 + 1;
    for (i = *(_QWORD **)(v43 + 448); i; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, _QWORD *))(*i + 32))(i, v32);
  }
  if (v52 != v54)
    free(v52);
  return v32;
}

