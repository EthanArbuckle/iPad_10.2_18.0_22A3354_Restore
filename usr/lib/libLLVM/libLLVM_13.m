uint64_t llvm::CallGraphWrapperPass::runOnModule(llvm::CallGraphWrapperPass *this, llvm::Module *a2)
{
  llvm::CallGraph *v4;
  llvm::CallGraph *v5;

  v4 = (llvm::CallGraph *)operator new();
  llvm::CallGraph::CallGraph(v4, a2);
  v5 = (llvm::CallGraph *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v5)
  {
    llvm::CallGraph::~CallGraph(v5);
    MEMORY[0x1CAA32FC0]();
  }
  return 0;
}

uint64_t sub_1C4DDD7D4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "CallGraph Construction";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "basiccg";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &llvm::CallGraphWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::CallGraphWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::CallGraph *llvm::CallGraphWrapperPass::releaseMemory(llvm::CallGraphWrapperPass *this)
{
  llvm::CallGraph *result;

  result = (llvm::CallGraph *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    llvm::CallGraph::~CallGraph(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void llvm::initializeCallGraphPrinterLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D028);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DDD904;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D028, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DDD904(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a1;
  v2 = atomic_load(&qword_1ED82D020);
  if (v2 != -1)
  {
    v7[0] = sub_1C4DDD7D4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D020, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v3 = operator new();
  *(_QWORD *)v3 = "Print a call graph";
  *(_QWORD *)(v3 + 8) = 18;
  *(_QWORD *)(v3 + 16) = "print-callgraph";
  *(_QWORD *)(v3 + 24) = 15;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EFBC8;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4DDDDB0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v3, 1);
  return v3;
}

void sub_1C4DDD9E8(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
          sub_1C4DDE2A8((uint64_t)v6, v7);
        v8 = v6 - 1;
        v6 -= 2;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C4DDDA6C(char **a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0x666666666666666)
      sub_1C4764EE4();
    v11 = operator new(40 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (char *)&v11[5 * v5];
  *v12 = 0;
  v12[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_1C4DDDCF8((llvm::ValueHandleBase *)&v11[5 * v5], (_QWORD *)a2);
    v3 = *a1;
    v4 = a1[1];
  }
  v13 = (char *)&v11[5 * v10];
  v11[5 * v5 + 4] = *a3;
  v14 = v12 + 40;
  if (v4 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = 0;
    do
    {
      v12[v15 - 40] = 0;
      v16 = &v4[v15];
      v12[v15 - 16] = 0;
      if (v4[v15 - 16])
        sub_1C4DDDCF8((llvm::ValueHandleBase *)&v12[v15 - 40], (_QWORD *)v16 - 5);
      *(_QWORD *)&v12[v15 - 8] = *((_QWORD *)v16 - 1);
      v15 -= 40;
    }
    while (&v4[v15] != v3);
    v3 = *a1;
    v17 = a1[1];
    *a1 = &v12[v15];
    a1[1] = v14;
    for (a1[2] = v13; v17 != v3; v17 -= 40)
    {
      if (*(v17 - 16))
      {
        v18 = *((_QWORD *)v17 - 3);
        if (v18 != -8192 && v18 != -4096 && v18 != 0)
        {
          v20 = *((_QWORD *)v17 - 5) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v20 = *((_QWORD *)v17 - 4);
          v21 = (unint64_t *)*((_QWORD *)v17 - 4);
          if (v21)
          {
            *v21 = *v21 & 7 | v20;
          }
          else
          {
            v22 = *((_QWORD *)v17 - 3);
            v23 = ***(int32x2_t ****)v22;
            v24 = (unint64_t)v23[303];
            if (v24 <= v20)
            {
              v25 = v23[305].u32[0];
              if (v24 + 16 * v25 > v20)
              {
                v26 = v25 - 1;
                LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
                v28 = (uint64_t *)(v24 + 16 * v27);
                v29 = *v28;
                if (v22 == *v28)
                {
LABEL_37:
                  *v28 = -8192;
                  v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                  v22 = *((_QWORD *)v17 - 3);
                }
                else
                {
                  v30 = 1;
                  while (v29 != -4096)
                  {
                    v31 = v27 + v30++;
                    v27 = v31 & v26;
                    v29 = *(_QWORD *)(v24 + 16 * v27);
                    if (v22 == v29)
                    {
                      v28 = (uint64_t *)(v24 + 16 * v27);
                      goto LABEL_37;
                    }
                  }
                }
                *(_BYTE *)(v22 + 17) &= ~1u;
              }
            }
          }
        }
        *(v17 - 16) = 0;
      }
    }
  }
  if (v3)
    operator delete(v3);
  return v12 + 40;
}

llvm::ValueHandleBase *sub_1C4DDDCF8(llvm::ValueHandleBase *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v8;
  llvm::ValueHandleBase *v9;

  if (*((_BYTE *)result + 24))
  {
    v8 = a2;
    v9 = result;
    v6 = *((_QWORD *)result + 2);
    if (v6 != -8192 && v6 != -4096 && v6 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(result);
    a2 = v8;
    result = v9;
    *((_BYTE *)v9 + 24) = 0;
  }
  *(_QWORD *)result = 6;
  *((_QWORD *)result + 1) = 0;
  v2 = a2[2];
  *((_QWORD *)result + 2) = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)result + 1) = *(_QWORD *)v4;
    *(_QWORD *)v4 = result;
    *(_QWORD *)result = v4 | 6;
    v5 = (uint64_t *)*((_QWORD *)result + 1);
    if (v5)
      *v5 = *v5 & 7 | ((unint64_t)result + 8);
  }
  *((_BYTE *)result + 24) = 1;
  return result;
}

uint64_t sub_1C4DDDDB0()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8EFBC8;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = &off_1E81354B8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82D028);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DDD904;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82D028, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C4DDDE94(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DDDEB8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::CallGraphWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 80, (uint64_t)&llvm::CallGraphWrapperPass::ID);
}

uint64_t sub_1C4DDDEFC(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  llvm *v5;
  void *v6;

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::CallGraphWrapperPass::ID);
  v5 = (llvm *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::CallGraphWrapperPass::ID);
  v6 = llvm::errs(v5);
  (*(void (**)(llvm *, void *, uint64_t))(*(_QWORD *)v5 + 40))(v5, v6, a2);
  return 0;
}

uint64_t sub_1C4DDDF70(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;

  for (i = *(_QWORD *)(result + 8); i != a2; i -= 40)
  {
    if (*(_BYTE *)(i - 16))
    {
      v3 = *(_QWORD *)(i - 24);
      if (v3 != -8192 && v3 != -4096 && v3 != 0)
      {
        v5 = *(_QWORD *)(i - 40) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v5 = *(_QWORD *)(i - 32);
        v6 = *(unint64_t **)(i - 32);
        if (v6)
        {
          *v6 = *v6 & 7 | v5;
        }
        else
        {
          v7 = *(_QWORD *)(i - 24);
          v8 = ***(int32x2_t ****)v7;
          v9 = (unint64_t)v8[303];
          if (v9 <= v5)
          {
            v10 = v8[305].u32[0];
            if (v9 + 16 * v10 > v5)
            {
              v11 = v10 - 1;
              LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
              v13 = (uint64_t *)(v9 + 16 * v12);
              v14 = *v13;
              if (v7 == *v13)
              {
LABEL_20:
                *v13 = -8192;
                v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
                v7 = *(_QWORD *)(i - 24);
              }
              else
              {
                v15 = 1;
                while (v14 != -4096)
                {
                  v16 = v12 + v15++;
                  v12 = v16 & v11;
                  v14 = *(_QWORD *)(v9 + 16 * v12);
                  if (v7 == v14)
                  {
                    v13 = (uint64_t *)(v9 + 16 * v12);
                    goto LABEL_20;
                  }
                }
              }
              *(_BYTE *)(v7 + 17) &= ~1u;
            }
          }
        }
      }
      *(_BYTE *)(i - 16) = 0;
    }
  }
  *(_QWORD *)(result + 8) = a2;
  return result;
}

llvm::ValueHandleBase *sub_1C4DDE088(llvm::ValueHandleBase *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v25;
  uint64_t *v26;
  llvm::ValueHandleBase *v27;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((_BYTE *)result + 24))
    {
      v2 = *((_QWORD *)result + 2);
      v3 = a2[2];
      if (v2 != v3)
      {
        v4 = v2 == -4096 || v2 == 0;
        if (!v4 && v2 != -8192)
        {
          v9 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v9 = *((_QWORD *)result + 1);
          v10 = (unint64_t *)*((_QWORD *)result + 1);
          if (v10)
          {
            *v10 = *v10 & 7 | v9;
          }
          else
          {
            v11 = *((_QWORD *)result + 2);
            v12 = ***(int32x2_t ****)v11;
            v13 = (unint64_t)v12[303];
            if (v13 <= v9)
            {
              v14 = v12[305].u32[0];
              if (v13 + 16 * v14 > v9)
              {
                v15 = v14 - 1;
                LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
                v17 = (uint64_t *)(v13 + 16 * v16);
                v18 = *v17;
                if (v11 == *v17)
                {
LABEL_26:
                  *v17 = -8192;
                  v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
                  v11 = *((_QWORD *)result + 2);
                }
                else
                {
                  v19 = 1;
                  while (v18 != -4096)
                  {
                    v20 = v16 + v19++;
                    v16 = v20 & v15;
                    v18 = *(_QWORD *)(v13 + 16 * v16);
                    if (v11 == v18)
                    {
                      v17 = (uint64_t *)(v13 + 16 * v16);
                      goto LABEL_26;
                    }
                  }
                }
                *(_BYTE *)(v11 + 17) &= ~1u;
              }
            }
          }
          v3 = a2[2];
        }
        *((_QWORD *)result + 2) = v3;
        if (v3 != -4096 && v3 != -8192 && v3 != 0)
        {
          v6 = *a2;
          v7 = (_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8);
          *((_QWORD *)result + 1) = *v7;
          *v7 = result;
          *(_QWORD *)result = v6 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)result & 7;
          v8 = (uint64_t *)*((_QWORD *)result + 1);
          if (v8)
            *v8 = *v8 & 7 | ((unint64_t)result + 8);
        }
      }
    }
    else
    {
      *(_QWORD *)result = 6;
      *((_QWORD *)result + 1) = 0;
      v23 = a2[2];
      *((_QWORD *)result + 2) = v23;
      if (v23 != -8192 && v23 != -4096 && v23 != 0)
      {
        v25 = *a2 & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)result + 1) = *(_QWORD *)v25;
        *(_QWORD *)v25 = result;
        *(_QWORD *)result = v25 | 6;
        v26 = (uint64_t *)*((_QWORD *)result + 1);
        if (v26)
          *v26 = *v26 & 7 | ((unint64_t)result + 8);
      }
      *((_BYTE *)result + 24) = 1;
    }
  }
  else if (*((_BYTE *)result + 24))
  {
    v27 = result;
    v21 = *((_QWORD *)result + 2);
    if (v21 != -8192 && v21 != -4096 && v21 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(result);
    result = v27;
    *((_BYTE *)v27 + 24) = 0;
  }
  return result;
}

void sub_1C4DDE2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  if (a2)
  {
    v3 = (void **)(a2 + 16);
    v2 = *(_QWORD *)(a2 + 16);
    if (v2)
    {
      sub_1C4DDDF70((uint64_t)v3, v2);
      operator delete(*v3);
    }
    JUMPOUT(0x1CAA32FC0);
  }
}

void sub_1C4DDE2FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_1C4DDE2FC(a1, *a2);
    sub_1C4DDE2FC(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      sub_1C4DDE2A8((uint64_t)(a2 + 5), v4);
    operator delete(a2);
  }
}

char *sub_1C4DDE350(char *result, char *a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  char *v5;
  uint64_t *i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t ***v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t ****v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  int v34;
  int v35;
  uint64_t ***v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ****v43;
  uint64_t ***v44;
  int v45;
  int v46;
  uint64_t ***v47;
  char *v48;
  size_t v49;
  size_t v50;
  size_t v51;
  BOOL v52;
  uint64_t ***v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ****v61;
  uint64_t ***v62;
  int v63;
  int v64;
  uint64_t ***v65;
  char *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  uint64_t ***v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t ****v89;
  uint64_t ***v90;
  int v91;
  int v92;
  uint64_t ***v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t ****v101;
  uint64_t ***v102;
  int v103;
  int v104;
  uint64_t ***v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  size_t v109;
  int v110;
  uint64_t ***v111;
  char *v112;
  uint64_t ***v113;
  uint64_t v114;
  uint64_t ***v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t ****v120;
  uint64_t ***v121;
  int v122;
  int v123;
  uint64_t ***v124;
  char *v125;
  size_t v126;
  size_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t ****v132;
  uint64_t ***v133;
  int v134;
  int v135;
  uint64_t ***v136;
  char *v137;
  size_t v138;
  size_t v139;
  size_t v140;
  int v141;
  uint64_t v142;
  uint64_t ***v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t ****v148;
  uint64_t ***v149;
  int v150;
  int v151;
  uint64_t ***v152;
  char *v153;
  size_t v154;
  size_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t ****v160;
  uint64_t ***v161;
  int v162;
  int v163;
  uint64_t ***v164;
  char *v165;
  size_t v166;
  size_t v167;
  size_t v168;
  int v169;
  BOOL v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t ***v173;
  uint64_t v174;
  uint64_t ***v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t ****v180;
  uint64_t ***v181;
  int v182;
  int v183;
  uint64_t ***v184;
  char *v185;
  size_t v186;
  size_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t ****v192;
  uint64_t ***v193;
  int v194;
  int v195;
  uint64_t ***v196;
  char *v197;
  size_t v198;
  size_t v199;
  size_t v200;
  int v201;
  uint64_t ***v202;
  uint64_t ***v203;
  uint64_t v204;
  uint64_t ***v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t ****v210;
  uint64_t ***v211;
  int v212;
  int v213;
  uint64_t ***v214;
  char *v215;
  size_t v216;
  size_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t ****v222;
  uint64_t ***v223;
  int v224;
  int v225;
  uint64_t ***v226;
  char *v227;
  size_t v228;
  size_t v229;
  size_t v230;
  int v231;
  uint64_t *v232;
  BOOL v233;
  uint64_t ***v234;
  size_t v235;
  size_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t ****v241;
  uint64_t ***v242;
  int v243;
  int v244;
  uint64_t ***v245;
  char *v246;
  size_t v247;
  size_t v248;
  size_t v249;
  uint64_t ***v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t ****v255;
  uint64_t ***v256;
  int v257;
  int v258;
  uint64_t ***v259;
  size_t v260;
  size_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t ****v266;
  uint64_t ***v267;
  int v268;
  int v269;
  uint64_t ***v270;
  char *v271;
  size_t v272;
  size_t v273;
  size_t v274;
  char *j;
  uint64_t ***v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t ****v281;
  uint64_t ***v282;
  int v283;
  int v284;
  uint64_t ***v285;
  size_t v286;
  size_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t ****v292;
  uint64_t ***v293;
  int v294;
  int v295;
  uint64_t ***v296;
  char *v297;
  size_t v298;
  size_t v299;
  size_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t ***v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t ***v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t ****v311;
  uint64_t ***v312;
  int v313;
  int v314;
  uint64_t ***v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t ****v322;
  uint64_t ***v323;
  int v324;
  int v325;
  uint64_t ***v326;
  char *v327;
  unint64_t v328;
  unint64_t v329;
  size_t v330;
  uint64_t ****v331;
  uint64_t ***v332;
  size_t v333;
  size_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t ****v339;
  uint64_t ***v340;
  int v341;
  int v342;
  uint64_t ***v343;
  char *v344;
  size_t v345;
  size_t v346;
  size_t v347;
  uint64_t v348;
  uint64_t ***v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t ***v354;
  int v355;
  int v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t ***v360;
  uint64_t ***v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t ****v366;
  uint64_t ***v367;
  int v368;
  int v369;
  uint64_t *v370;
  uint64_t *v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t ***v375;
  uint64_t ***v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t ****v381;
  uint64_t ***v382;
  int v383;
  int v384;
  char *v385;
  BOOL v386;
  char v387;
  char *v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t ***v392;
  uint64_t ***v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t ****v398;
  uint64_t ***v399;
  int v400;
  int v401;
  uint64_t ***v402;
  size_t v403;
  size_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t ****v409;
  uint64_t ***v410;
  int v411;
  int v412;
  uint64_t ***v413;
  char *v414;
  size_t v415;
  size_t v416;
  size_t v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t ***v422;
  uint64_t ***v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t ****v428;
  uint64_t ***v429;
  int v430;
  int v431;
  uint64_t ***v432;
  size_t v433;
  size_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t ****v439;
  uint64_t ***v440;
  int v441;
  int v442;
  uint64_t ***v443;
  char *v444;
  size_t v445;
  size_t v446;
  size_t v447;
  int64_t v448;
  int64_t v449;
  int64_t v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t ***v453;
  uint64_t ***v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t ****v459;
  uint64_t ***v460;
  int v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t ***v465;
  uint64_t ***v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t ****v471;
  uint64_t ***v472;
  int v473;
  int v474;
  uint64_t ***v475;
  size_t v476;
  size_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t ****v482;
  uint64_t ***v483;
  int v484;
  int v485;
  uint64_t ***v486;
  char *v487;
  size_t v488;
  size_t v489;
  size_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t ***v494;
  uint64_t ***v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t ****v500;
  uint64_t ***v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t ***v505;
  uint64_t ***v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t ****v511;
  uint64_t ***v512;
  int v513;
  int v514;
  uint64_t ***v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t ****v522;
  uint64_t ***v523;
  int v524;
  int v525;
  uint64_t ***v526;
  char *v527;
  unint64_t v528;
  unint64_t v529;
  size_t v530;
  uint64_t ***v531;
  size_t v532;
  size_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t ****v538;
  uint64_t ***v539;
  int v540;
  int v541;
  uint64_t ***v542;
  char *v543;
  size_t v544;
  size_t v545;
  size_t v546;
  uint64_t ***v547;
  size_t v548;
  size_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t ****v554;
  uint64_t ***v555;
  int v556;
  int v557;
  uint64_t ***v558;
  char *v559;
  size_t v560;
  size_t v561;
  size_t v562;
  unint64_t v563;
  unint64_t v564;
  char *v565;
  uint64_t v566;
  uint64_t ***v567;
  uint64_t ***v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t ****v573;
  uint64_t ***v574;
  int v575;
  int v576;
  uint64_t ***v577;
  size_t v578;
  size_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t ****v584;
  uint64_t ***v585;
  int v586;
  int v587;
  uint64_t ***v588;
  char *v589;
  size_t v590;
  size_t v591;
  size_t v592;
  uint64_t *v593;
  size_t v594;
  size_t v595;
  char *v596;
  uint64_t v597;
  uint64_t v598;
  char *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t ***v602;
  uint64_t ***v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t ****v608;
  uint64_t ***v609;
  int v610;
  int v611;
  uint64_t ***v612;
  size_t v613;
  size_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t ****v619;
  uint64_t ***v620;
  int v621;
  int v622;
  uint64_t ***v623;
  char *v624;
  size_t v625;
  size_t v626;
  size_t v627;
  char *v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t ***v632;
  uint64_t ***v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t ****v638;
  uint64_t ***v639;
  int v640;
  int v641;
  uint64_t ***v642;
  size_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t ****v648;
  uint64_t ***v649;
  int v650;
  int v651;
  uint64_t ***v652;
  size_t v653;
  size_t v654;
  BOOL v655;
  uint64_t *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t ***v659;
  uint64_t ***v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t ****v665;
  uint64_t ***v666;
  int v667;
  int v668;
  uint64_t ***v669;
  size_t v670;
  size_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t ****v676;
  uint64_t ***v677;
  int v678;
  int v679;
  uint64_t ***v680;
  char *v681;
  size_t v682;
  size_t v683;
  size_t v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t ***v687;
  uint64_t ***v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t ****v693;
  uint64_t ***v694;
  int v695;
  int v696;
  uint64_t ***v697;
  unint64_t v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t ****v704;
  uint64_t ***v705;
  int v706;
  int v707;
  uint64_t ***v708;
  char *v709;
  unint64_t v710;
  unint64_t v711;
  size_t v712;
  uint64_t ***v713;
  size_t v714;
  size_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t ****v720;
  uint64_t ***v721;
  int v722;
  int v723;
  uint64_t ***v724;
  size_t v725;
  size_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t ****v731;
  uint64_t ***v732;
  int v733;
  int v734;
  uint64_t ***v735;
  char *v736;
  size_t v737;
  size_t v738;
  size_t v739;
  uint64_t ***v740;
  char *v741;
  size_t v742;
  size_t v743;
  size_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t ***v747;
  uint64_t ***v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t ****v753;
  uint64_t ***v754;
  int v755;
  int v756;
  uint64_t ***v757;
  size_t v758;
  size_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t ****v764;
  uint64_t ***v765;
  int v766;
  int v767;
  uint64_t ***v768;
  char *v769;
  size_t v770;
  size_t v771;
  size_t v772;
  uint64_t v773;
  uint64_t ***v774;
  uint64_t ***v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t ****v780;
  uint64_t ***v781;
  int v782;
  int v783;
  uint64_t ***v784;
  size_t v785;
  size_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t ****v791;
  uint64_t ***v792;
  int v793;
  int v794;
  uint64_t ***v795;
  char *v796;
  size_t v797;
  size_t v798;
  size_t v799;
  uint64_t v800;
  uint64_t ***v801;
  uint64_t ***v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t ****v807;
  uint64_t ***v808;
  int v809;
  int v810;
  uint64_t ***v811;
  size_t v812;
  size_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t ****v818;
  uint64_t ***v819;
  int v820;
  int v821;
  uint64_t ***v822;
  char *v823;
  size_t v824;
  size_t v825;
  size_t v826;
  char *v827;
  uint64_t *v831;

  v4 = (uint64_t *)result;
LABEL_2:
  v5 = a2;
  v827 = a2 - 8;
  i = v4;
  while (2)
  {
    v7 = i;
    v8 = v5 - (char *)i;
    v9 = (v5 - (char *)i) >> 3;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v358 = *((_QWORD *)a2 - 1);
        v359 = *v7;
        v360 = *(uint64_t ****)(v358 + 8);
        v361 = *(uint64_t ****)(*v7 + 8);
        if (!v360)
        {
          if (!v361)
            return result;
          goto LABEL_896;
        }
        if (!v361)
          return result;
        if ((*((_BYTE *)v360 + 23) & 0x10) != 0)
        {
          v362 = ***v360;
          v363 = *(_QWORD *)(v362 + 152);
          v364 = *(unsigned int *)(v362 + 168);
          if ((_DWORD)v364)
          {
            LODWORD(v365) = (v364 - 1) & ((v360 >> 4) ^ (v360 >> 9));
            v366 = (uint64_t ****)(v363 + 16 * v365);
            v367 = *v366;
            if (*v366 != v360)
            {
              v368 = 1;
              do
              {
                if (v367 == (uint64_t ***)-4096)
                  goto LABEL_868;
                v369 = v365 + v368++;
                v365 = v369 & (v364 - 1);
                v367 = *(uint64_t ****)(v363 + 16 * v365);
              }
              while (v367 != v360);
              v366 = (uint64_t ****)(v363 + 16 * v365);
            }
          }
          else
          {
LABEL_868:
            v366 = (uint64_t ****)(v363 + 16 * v364);
          }
          v713 = v366[1];
          v715 = (size_t)*v713;
          result = (char *)(v713 + 2);
          v714 = v715;
          goto LABEL_870;
        }
        v714 = 0;
        result = &byte_1C871356D;
LABEL_870:
        if ((*((_BYTE *)v361 + 23) & 0x10) != 0)
        {
          v716 = ***v361;
          v717 = *(_QWORD *)(v716 + 152);
          v718 = *(unsigned int *)(v716 + 168);
          if ((_DWORD)v718)
          {
            LODWORD(v719) = (v718 - 1) & ((v361 >> 4) ^ (v361 >> 9));
            v720 = (uint64_t ****)(v717 + 16 * v719);
            v721 = *v720;
            if (*v720 != v361)
            {
              v722 = 1;
              do
              {
                if (v721 == (uint64_t ***)-4096)
                  goto LABEL_886;
                v723 = v719 + v722++;
                v719 = v723 & (v718 - 1);
                v721 = *(uint64_t ****)(v717 + 16 * v719);
              }
              while (v721 != v361);
              v720 = (uint64_t ****)(v717 + 16 * v719);
            }
          }
          else
          {
LABEL_886:
            v720 = (uint64_t ****)(v717 + 16 * v718);
          }
          v735 = v720[1];
          v738 = (size_t)*v735;
          v736 = (char *)(v735 + 2);
          v737 = v738;
          goto LABEL_888;
        }
        v737 = 0;
        v736 = &byte_1C871356D;
LABEL_888:
        if (v737 >= v714)
          v739 = v714;
        else
          v739 = v737;
        if (v739 && (result = (char *)memcmp(result, v736, v739), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v714 >= v737)
        {
          return result;
        }
LABEL_896:
        *v7 = v358;
        *((_QWORD *)a2 - 1) = v359;
        return result;
      case 3:
        return sub_1C4DE0F00((char *)v7, (char *)v7 + 8, v827);
      case 4:
        return sub_1C4DE20EC((char *)v7, (char *)v7 + 8, (char *)v7 + 16, (uint64_t *)v827);
      case 5:
        v370 = v7 + 1;
        v371 = v7 + 2;
        v372 = v7 + 3;
        result = sub_1C4DE20EC((char *)v7, (char *)v7 + 8, (char *)v7 + 16, v7 + 3);
        v373 = *((_QWORD *)a2 - 1);
        v374 = v7[3];
        v375 = *(uint64_t ****)(v373 + 8);
        v376 = *(uint64_t ****)(v374 + 8);
        if (!v375)
        {
          if (!v376)
            return result;
          goto LABEL_907;
        }
        if (!v376)
          return result;
        if ((*((_BYTE *)v375 + 23) & 0x10) != 0)
        {
          v377 = ***v375;
          v378 = *(_QWORD *)(v377 + 152);
          v379 = *(unsigned int *)(v377 + 168);
          if ((_DWORD)v379)
          {
            LODWORD(v380) = (v379 - 1) & ((v375 >> 4) ^ (v375 >> 9));
            v381 = (uint64_t ****)(v378 + 16 * v380);
            v382 = *v381;
            if (*v381 != v375)
            {
              v383 = 1;
              do
              {
                if (v382 == (uint64_t ***)-4096)
                  goto LABEL_877;
                v384 = v380 + v383++;
                v380 = v384 & (v379 - 1);
                v382 = *(uint64_t ****)(v378 + 16 * v380);
              }
              while (v382 != v375);
              v381 = (uint64_t ****)(v378 + 16 * v380);
            }
          }
          else
          {
LABEL_877:
            v381 = (uint64_t ****)(v378 + 16 * v379);
          }
          v724 = v381[1];
          v726 = (size_t)*v724;
          result = (char *)(v724 + 2);
          v725 = v726;
          goto LABEL_879;
        }
        v725 = 0;
        result = &byte_1C871356D;
LABEL_879:
        if ((*((_BYTE *)v376 + 23) & 0x10) != 0)
        {
          v727 = ***v376;
          v728 = *(_QWORD *)(v727 + 152);
          v729 = *(unsigned int *)(v727 + 168);
          if ((_DWORD)v729)
          {
            LODWORD(v730) = (v729 - 1) & ((v376 >> 4) ^ (v376 >> 9));
            v731 = (uint64_t ****)(v728 + 16 * v730);
            v732 = *v731;
            if (*v731 != v376)
            {
              v733 = 1;
              do
              {
                if (v732 == (uint64_t ***)-4096)
                  goto LABEL_897;
                v734 = v730 + v733++;
                v730 = v734 & (v729 - 1);
                v732 = *(uint64_t ****)(v728 + 16 * v730);
              }
              while (v732 != v376);
              v731 = (uint64_t ****)(v728 + 16 * v730);
            }
          }
          else
          {
LABEL_897:
            v731 = (uint64_t ****)(v728 + 16 * v729);
          }
          v740 = v731[1];
          v743 = (size_t)*v740;
          v741 = (char *)(v740 + 2);
          v742 = v743;
          goto LABEL_899;
        }
        v742 = 0;
        v741 = &byte_1C871356D;
LABEL_899:
        if (v742 >= v725)
          v744 = v725;
        else
          v744 = v742;
        if (v744 && (result = (char *)memcmp(result, v741, v744), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v725 >= v742)
        {
          return result;
        }
LABEL_907:
        *v372 = v373;
        *((_QWORD *)a2 - 1) = v374;
        v745 = *v372;
        v746 = *v371;
        v747 = *(uint64_t ****)(*v372 + 8);
        v748 = *(uint64_t ****)(*v371 + 8);
        if (!v747)
        {
          if (!v748)
            return result;
          goto LABEL_937;
        }
        if (!v748)
          return result;
        if ((*((_BYTE *)v747 + 23) & 0x10) != 0)
        {
          v749 = ***v747;
          v750 = *(_QWORD *)(v749 + 152);
          v751 = *(unsigned int *)(v749 + 168);
          if ((_DWORD)v751)
          {
            LODWORD(v752) = (v751 - 1) & ((v747 >> 4) ^ (v747 >> 9));
            v753 = (uint64_t ****)(v750 + 16 * v752);
            v754 = *v753;
            if (*v753 != v747)
            {
              v755 = 1;
              do
              {
                if (v754 == (uint64_t ***)-4096)
                  goto LABEL_918;
                v756 = v752 + v755++;
                v752 = v756 & (v751 - 1);
                v754 = *(uint64_t ****)(v750 + 16 * v752);
              }
              while (v754 != v747);
              v753 = (uint64_t ****)(v750 + 16 * v752);
            }
          }
          else
          {
LABEL_918:
            v753 = (uint64_t ****)(v750 + 16 * v751);
          }
          v757 = v753[1];
          v759 = (size_t)*v757;
          result = (char *)(v757 + 2);
          v758 = v759;
          goto LABEL_920;
        }
        v758 = 0;
        result = &byte_1C871356D;
LABEL_920:
        if ((*((_BYTE *)v748 + 23) & 0x10) != 0)
        {
          v760 = ***v748;
          v761 = *(_QWORD *)(v760 + 152);
          v762 = *(unsigned int *)(v760 + 168);
          if ((_DWORD)v762)
          {
            LODWORD(v763) = (v762 - 1) & ((v748 >> 4) ^ (v748 >> 9));
            v764 = (uint64_t ****)(v761 + 16 * v763);
            v765 = *v764;
            if (*v764 != v748)
            {
              v766 = 1;
              do
              {
                if (v765 == (uint64_t ***)-4096)
                  goto LABEL_927;
                v767 = v763 + v766++;
                v763 = v767 & (v762 - 1);
                v765 = *(uint64_t ****)(v761 + 16 * v763);
              }
              while (v765 != v748);
              v764 = (uint64_t ****)(v761 + 16 * v763);
            }
          }
          else
          {
LABEL_927:
            v764 = (uint64_t ****)(v761 + 16 * v762);
          }
          v768 = v764[1];
          v771 = (size_t)*v768;
          v769 = (char *)(v768 + 2);
          v770 = v771;
          goto LABEL_929;
        }
        v770 = 0;
        v769 = &byte_1C871356D;
LABEL_929:
        if (v770 >= v758)
          v772 = v758;
        else
          v772 = v770;
        if (v772 && (result = (char *)memcmp(result, v769, v772), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v758 >= v770)
        {
          return result;
        }
LABEL_937:
        *v371 = v745;
        *v372 = v746;
        v773 = *v370;
        v774 = *(uint64_t ****)(v745 + 8);
        v775 = *(uint64_t ****)(*v370 + 8);
        if (!v774)
        {
          if (!v775)
            return result;
          goto LABEL_967;
        }
        if (!v775)
          return result;
        if ((*((_BYTE *)v774 + 23) & 0x10) != 0)
        {
          v776 = ***v774;
          v777 = *(_QWORD *)(v776 + 152);
          v778 = *(unsigned int *)(v776 + 168);
          if ((_DWORD)v778)
          {
            LODWORD(v779) = (v778 - 1) & ((v774 >> 4) ^ (v774 >> 9));
            v780 = (uint64_t ****)(v777 + 16 * v779);
            v781 = *v780;
            if (*v780 != v774)
            {
              v782 = 1;
              do
              {
                if (v781 == (uint64_t ***)-4096)
                  goto LABEL_948;
                v783 = v779 + v782++;
                v779 = v783 & (v778 - 1);
                v781 = *(uint64_t ****)(v777 + 16 * v779);
              }
              while (v781 != v774);
              v780 = (uint64_t ****)(v777 + 16 * v779);
            }
          }
          else
          {
LABEL_948:
            v780 = (uint64_t ****)(v777 + 16 * v778);
          }
          v784 = v780[1];
          v786 = (size_t)*v784;
          result = (char *)(v784 + 2);
          v785 = v786;
          goto LABEL_950;
        }
        v785 = 0;
        result = &byte_1C871356D;
LABEL_950:
        if ((*((_BYTE *)v775 + 23) & 0x10) != 0)
        {
          v787 = ***v775;
          v788 = *(_QWORD *)(v787 + 152);
          v789 = *(unsigned int *)(v787 + 168);
          if ((_DWORD)v789)
          {
            LODWORD(v790) = (v789 - 1) & ((v775 >> 4) ^ (v775 >> 9));
            v791 = (uint64_t ****)(v788 + 16 * v790);
            v792 = *v791;
            if (*v791 != v775)
            {
              v793 = 1;
              do
              {
                if (v792 == (uint64_t ***)-4096)
                  goto LABEL_957;
                v794 = v790 + v793++;
                v790 = v794 & (v789 - 1);
                v792 = *(uint64_t ****)(v788 + 16 * v790);
              }
              while (v792 != v775);
              v791 = (uint64_t ****)(v788 + 16 * v790);
            }
          }
          else
          {
LABEL_957:
            v791 = (uint64_t ****)(v788 + 16 * v789);
          }
          v795 = v791[1];
          v798 = (size_t)*v795;
          v796 = (char *)(v795 + 2);
          v797 = v798;
          goto LABEL_959;
        }
        v797 = 0;
        v796 = &byte_1C871356D;
LABEL_959:
        if (v797 >= v785)
          v799 = v785;
        else
          v799 = v797;
        if (v799 && (result = (char *)memcmp(result, v796, v799), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v785 >= v797)
        {
          return result;
        }
LABEL_967:
        v7[1] = v745;
        v7[2] = v773;
        v800 = *v7;
        v801 = *(uint64_t ****)(v745 + 8);
        v802 = *(uint64_t ****)(*v7 + 8);
        if (!v801)
        {
          if (!v802)
            return result;
          goto LABEL_977;
        }
        if (!v802)
          return result;
        if ((*((_BYTE *)v801 + 23) & 0x10) == 0)
        {
          v812 = 0;
          result = &byte_1C871356D;
LABEL_985:
          if ((*((_BYTE *)v802 + 23) & 0x10) == 0)
          {
            v824 = 0;
            v823 = &byte_1C871356D;
LABEL_994:
            if (v824 >= v812)
              v826 = v812;
            else
              v826 = v824;
            if (v826 && (result = (char *)memcmp(result, v823, v826), (_DWORD)result))
            {
              if ((result & 0x80000000) == 0)
                return result;
            }
            else if (v812 >= v824)
            {
              return result;
            }
LABEL_977:
            *v7 = v745;
            v7[1] = v800;
            return result;
          }
          v814 = ***v802;
          v815 = *(_QWORD *)(v814 + 152);
          v816 = *(unsigned int *)(v814 + 168);
          if ((_DWORD)v816)
          {
            LODWORD(v817) = (v816 - 1) & ((v802 >> 4) ^ (v802 >> 9));
            v818 = (uint64_t ****)(v815 + 16 * v817);
            v819 = *v818;
            if (*v818 == v802)
            {
LABEL_993:
              v822 = v818[1];
              v825 = (size_t)*v822;
              v823 = (char *)(v822 + 2);
              v824 = v825;
              goto LABEL_994;
            }
            v820 = 1;
            while (v819 != (uint64_t ***)-4096)
            {
              v821 = v817 + v820++;
              v817 = v821 & (v816 - 1);
              v819 = *(uint64_t ****)(v815 + 16 * v817);
              if (v819 == v802)
              {
                v818 = (uint64_t ****)(v815 + 16 * v817);
                goto LABEL_993;
              }
            }
          }
          v818 = (uint64_t ****)(v815 + 16 * v816);
          goto LABEL_993;
        }
        v803 = ***v801;
        v804 = *(_QWORD *)(v803 + 152);
        v805 = *(unsigned int *)(v803 + 168);
        if (!(_DWORD)v805)
          goto LABEL_983;
        LODWORD(v806) = (v805 - 1) & ((v801 >> 4) ^ (v801 >> 9));
        v807 = (uint64_t ****)(v804 + 16 * v806);
        v808 = *v807;
        if (*v807 != v801)
        {
          v809 = 1;
          while (v808 != (uint64_t ***)-4096)
          {
            v810 = v806 + v809++;
            v806 = v810 & (v805 - 1);
            v808 = *(uint64_t ****)(v804 + 16 * v806);
            if (v808 == v801)
            {
              v807 = (uint64_t ****)(v804 + 16 * v806);
              goto LABEL_984;
            }
          }
LABEL_983:
          v807 = (uint64_t ****)(v804 + 16 * v805);
        }
LABEL_984:
        v811 = v807[1];
        v813 = (size_t)*v811;
        result = (char *)(v811 + 2);
        v812 = v813;
        goto LABEL_985;
      default:
        v831 = v7;
        if (v8 <= 191)
        {
          v385 = (char *)(v7 + 1);
          v386 = v7 == (uint64_t *)v5 || v385 == v5;
          v387 = v386;
          if ((a4 & 1) != 0)
          {
            if ((v387 & 1) != 0)
              return result;
            v388 = (char *)v7;
            while (1)
            {
              v389 = (uint64_t *)v388;
              v388 = v385;
              v391 = *v389;
              v390 = v389[1];
              v392 = *(uint64_t ****)(v390 + 8);
              v393 = *(uint64_t ****)(*v389 + 8);
              if (v392)
              {
                if (!v393)
                  goto LABEL_535;
                if ((*((_BYTE *)v392 + 23) & 0x10) != 0)
                {
                  v394 = ***v392;
                  v395 = *(_QWORD *)(v394 + 152);
                  v396 = *(unsigned int *)(v394 + 168);
                  if ((_DWORD)v396)
                  {
                    LODWORD(v397) = (v396 - 1) & ((v392 >> 4) ^ (v392 >> 9));
                    v398 = (uint64_t ****)(v395 + 16 * v397);
                    v399 = *v398;
                    if (*v398 != v392)
                    {
                      v400 = 1;
                      do
                      {
                        if (v399 == (uint64_t ***)-4096)
                          goto LABEL_478;
                        v401 = v397 + v400++;
                        v397 = v401 & (v396 - 1);
                        v399 = *(uint64_t ****)(v395 + 16 * v397);
                      }
                      while (v399 != v392);
                      v398 = (uint64_t ****)(v395 + 16 * v397);
                    }
                  }
                  else
                  {
LABEL_478:
                    v398 = (uint64_t ****)(v395 + 16 * v396);
                  }
                  v402 = v398[1];
                  v404 = (size_t)*v402;
                  result = (char *)(v402 + 2);
                  v403 = v404;
                }
                else
                {
                  v403 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v393 + 23) & 0x10) != 0)
                {
                  v405 = ***v393;
                  v406 = *(_QWORD *)(v405 + 152);
                  v407 = *(unsigned int *)(v405 + 168);
                  if ((_DWORD)v407)
                  {
                    LODWORD(v408) = (v407 - 1) & ((v393 >> 4) ^ (v393 >> 9));
                    v409 = (uint64_t ****)(v406 + 16 * v408);
                    v410 = *v409;
                    if (*v409 != v393)
                    {
                      v411 = 1;
                      do
                      {
                        if (v410 == (uint64_t ***)-4096)
                          goto LABEL_487;
                        v412 = v408 + v411++;
                        v408 = v412 & (v407 - 1);
                        v410 = *(uint64_t ****)(v406 + 16 * v408);
                      }
                      while (v410 != v393);
                      v409 = (uint64_t ****)(v406 + 16 * v408);
                    }
                  }
                  else
                  {
LABEL_487:
                    v409 = (uint64_t ****)(v406 + 16 * v407);
                  }
                  v413 = v409[1];
                  v416 = (size_t)*v413;
                  v414 = (char *)(v413 + 2);
                  v415 = v416;
                }
                else
                {
                  v415 = 0;
                  v414 = &byte_1C871356D;
                }
                if (v415 >= v403)
                  v417 = v403;
                else
                  v417 = v415;
                if (v417 && (result = (char *)memcmp(result, v414, v417), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_535;
                }
                else if (v403 >= v415)
                {
                  goto LABEL_535;
                }
              }
              else if (!v393)
              {
                goto LABEL_535;
              }
              v389[1] = v391;
              v418 = v7;
              if (v389 == v7)
                goto LABEL_534;
              v419 = v389;
              while (1)
              {
                v421 = *--v419;
                v420 = v421;
                v422 = *(uint64_t ****)(v390 + 8);
                v423 = *(uint64_t ****)(v421 + 8);
                if (!v422)
                {
                  if (!v423)
                    break;
                  goto LABEL_529;
                }
                if (!v423)
                  break;
                if ((*((_BYTE *)v422 + 23) & 0x10) != 0)
                {
                  v424 = ***v422;
                  v425 = *(_QWORD *)(v424 + 152);
                  v426 = *(unsigned int *)(v424 + 168);
                  if ((_DWORD)v426)
                  {
                    LODWORD(v427) = (v426 - 1) & ((v422 >> 4) ^ (v422 >> 9));
                    v428 = (uint64_t ****)(v425 + 16 * v427);
                    v429 = *v428;
                    if (*v428 != v422)
                    {
                      v430 = 1;
                      do
                      {
                        if (v429 == (uint64_t ***)-4096)
                          goto LABEL_510;
                        v431 = v427 + v430++;
                        v427 = v431 & (v426 - 1);
                        v429 = *(uint64_t ****)(v425 + 16 * v427);
                      }
                      while (v429 != v422);
                      v428 = (uint64_t ****)(v425 + 16 * v427);
                    }
                  }
                  else
                  {
LABEL_510:
                    v428 = (uint64_t ****)(v425 + 16 * v426);
                  }
                  v432 = v428[1];
                  v434 = (size_t)*v432;
                  result = (char *)(v432 + 2);
                  v433 = v434;
                }
                else
                {
                  v433 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v423 + 23) & 0x10) != 0)
                {
                  v435 = ***v423;
                  v436 = *(_QWORD *)(v435 + 152);
                  v437 = *(unsigned int *)(v435 + 168);
                  if ((_DWORD)v437)
                  {
                    LODWORD(v438) = (v437 - 1) & ((v423 >> 4) ^ (v423 >> 9));
                    v439 = (uint64_t ****)(v436 + 16 * v438);
                    v440 = *v439;
                    if (*v439 != v423)
                    {
                      v441 = 1;
                      do
                      {
                        if (v440 == (uint64_t ***)-4096)
                          goto LABEL_519;
                        v442 = v438 + v441++;
                        v438 = v442 & (v437 - 1);
                        v440 = *(uint64_t ****)(v436 + 16 * v438);
                      }
                      while (v440 != v423);
                      v439 = (uint64_t ****)(v436 + 16 * v438);
                    }
                  }
                  else
                  {
LABEL_519:
                    v439 = (uint64_t ****)(v436 + 16 * v437);
                  }
                  v443 = v439[1];
                  v446 = (size_t)*v443;
                  v444 = (char *)(v443 + 2);
                  v445 = v446;
                }
                else
                {
                  v445 = 0;
                  v444 = &byte_1C871356D;
                }
                if (v445 >= v433)
                  v447 = v433;
                else
                  v447 = v445;
                if (v447)
                {
                  result = (char *)memcmp(result, v444, v447);
                  if ((_DWORD)result)
                  {
                    v7 = v831;
                    if ((result & 0x80000000) == 0)
                      break;
                    goto LABEL_529;
                  }
                }
                v52 = v433 >= v445;
                v7 = v831;
                if (v52)
                  break;
LABEL_529:
                *v389 = v420;
                v389 = v419;
                if (v419 == v7)
                {
                  v418 = v7;
                  goto LABEL_534;
                }
              }
              v418 = v389;
LABEL_534:
              *v418 = v390;
LABEL_535:
              v385 = v388 + 8;
              if (v388 + 8 == a2)
                return result;
            }
          }
          if ((v387 & 1) != 0)
            return result;
          while (1)
          {
            v656 = v7;
            v7 = (uint64_t *)v385;
            v658 = *v656;
            v657 = v656[1];
            v659 = *(uint64_t ****)(v657 + 8);
            v660 = *(uint64_t ****)(*v656 + 8);
            if (v659)
            {
              if (!v660)
                goto LABEL_860;
              if ((*((_BYTE *)v659 + 23) & 0x10) != 0)
              {
                v661 = ***v659;
                v662 = *(_QWORD *)(v661 + 152);
                v663 = *(unsigned int *)(v661 + 168);
                if ((_DWORD)v663)
                {
                  LODWORD(v664) = (v663 - 1) & ((v659 >> 4) ^ (v659 >> 9));
                  v665 = (uint64_t ****)(v662 + 16 * v664);
                  v666 = *v665;
                  if (*v665 != v659)
                  {
                    v667 = 1;
                    do
                    {
                      if (v666 == (uint64_t ***)-4096)
                        goto LABEL_806;
                      v668 = v664 + v667++;
                      v664 = v668 & (v663 - 1);
                      v666 = *(uint64_t ****)(v662 + 16 * v664);
                    }
                    while (v666 != v659);
                    v665 = (uint64_t ****)(v662 + 16 * v664);
                  }
                }
                else
                {
LABEL_806:
                  v665 = (uint64_t ****)(v662 + 16 * v663);
                }
                v669 = v665[1];
                v671 = (size_t)*v669;
                result = (char *)(v669 + 2);
                v670 = v671;
              }
              else
              {
                v670 = 0;
                result = &byte_1C871356D;
              }
              if ((*((_BYTE *)v660 + 23) & 0x10) != 0)
              {
                v672 = ***v660;
                v673 = *(_QWORD *)(v672 + 152);
                v674 = *(unsigned int *)(v672 + 168);
                if ((_DWORD)v674)
                {
                  LODWORD(v675) = (v674 - 1) & ((v660 >> 4) ^ (v660 >> 9));
                  v676 = (uint64_t ****)(v673 + 16 * v675);
                  v677 = *v676;
                  if (*v676 != v660)
                  {
                    v678 = 1;
                    do
                    {
                      if (v677 == (uint64_t ***)-4096)
                        goto LABEL_815;
                      v679 = v675 + v678++;
                      v675 = v679 & (v674 - 1);
                      v677 = *(uint64_t ****)(v673 + 16 * v675);
                    }
                    while (v677 != v660);
                    v676 = (uint64_t ****)(v673 + 16 * v675);
                  }
                }
                else
                {
LABEL_815:
                  v676 = (uint64_t ****)(v673 + 16 * v674);
                }
                v680 = v676[1];
                v683 = (size_t)*v680;
                v681 = (char *)(v680 + 2);
                v682 = v683;
              }
              else
              {
                v682 = 0;
                v681 = &byte_1C871356D;
              }
              if (v682 >= v670)
                v684 = v670;
              else
                v684 = v682;
              if (v684 && (result = (char *)memcmp(result, v681, v684), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_860;
              }
              else if (v670 >= v682)
              {
                goto LABEL_860;
              }
            }
            else if (!v660)
            {
              goto LABEL_860;
            }
            v685 = v7;
            do
            {
              while (1)
              {
                while (1)
                {
                  *v685 = v658;
                  v685 = v656;
                  v686 = *--v656;
                  v658 = v686;
                  v687 = *(uint64_t ****)(v657 + 8);
                  v688 = *(uint64_t ****)(v686 + 8);
                  if (v687)
                    break;
                  if (!v688)
                    goto LABEL_859;
                }
                if (!v688)
                  goto LABEL_859;
                if ((*((_BYTE *)v687 + 23) & 0x10) != 0)
                {
                  v689 = ***v687;
                  v690 = *(_QWORD *)(v689 + 152);
                  v691 = *(unsigned int *)(v689 + 168);
                  if ((_DWORD)v691)
                  {
                    LODWORD(v692) = (v691 - 1) & ((v687 >> 4) ^ (v687 >> 9));
                    v693 = (uint64_t ****)(v690 + 16 * v692);
                    v694 = *v693;
                    if (*v693 != v687)
                    {
                      v695 = 1;
                      do
                      {
                        if (v694 == (uint64_t ***)-4096)
                          goto LABEL_837;
                        v696 = v692 + v695++;
                        v692 = v696 & (v691 - 1);
                        v694 = *(uint64_t ****)(v690 + 16 * v692);
                      }
                      while (v694 != v687);
                      v693 = (uint64_t ****)(v690 + 16 * v692);
                    }
                  }
                  else
                  {
LABEL_837:
                    v693 = (uint64_t ****)(v690 + 16 * v691);
                  }
                  v697 = v693[1];
                  v699 = (unint64_t)*v697;
                  result = (char *)(v697 + 2);
                  v698 = v699;
                }
                else
                {
                  v698 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v688 + 23) & 0x10) != 0)
                {
                  v700 = ***v688;
                  v701 = *(_QWORD *)(v700 + 152);
                  v702 = *(unsigned int *)(v700 + 168);
                  if ((_DWORD)v702)
                  {
                    LODWORD(v703) = (v702 - 1) & ((v688 >> 4) ^ (v688 >> 9));
                    v704 = (uint64_t ****)(v701 + 16 * v703);
                    v705 = *v704;
                    if (*v704 != v688)
                    {
                      v706 = 1;
                      do
                      {
                        if (v705 == (uint64_t ***)-4096)
                          goto LABEL_846;
                        v707 = v703 + v706++;
                        v703 = v707 & (v702 - 1);
                        v705 = *(uint64_t ****)(v701 + 16 * v703);
                      }
                      while (v705 != v688);
                      v704 = (uint64_t ****)(v701 + 16 * v703);
                    }
                  }
                  else
                  {
LABEL_846:
                    v704 = (uint64_t ****)(v701 + 16 * v702);
                  }
                  v708 = v704[1];
                  v711 = (unint64_t)*v708;
                  v709 = (char *)(v708 + 2);
                  v710 = v711;
                }
                else
                {
                  v710 = 0;
                  v709 = &byte_1C871356D;
                }
                v712 = v710 >= v698 ? v698 : v710;
                if (!v712)
                  break;
                result = (char *)memcmp(result, v709, v712);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) == 0)
                  goto LABEL_859;
              }
            }
            while (v698 < v710);
LABEL_859:
            *v685 = v657;
LABEL_860:
            v385 = (char *)(v7 + 1);
            if (v7 + 1 == (uint64_t *)a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v7 == (uint64_t *)v5)
            return result;
          v448 = (unint64_t)(v9 - 2) >> 1;
          v449 = v448;
          while (1)
          {
            v450 = v449;
            if (v448 < v449)
              goto LABEL_657;
            v451 = (2 * v449) | 1;
            v452 = &v7[v451];
            if (2 * v449 + 2 >= v9)
              goto LABEL_554;
            v453 = *(uint64_t ****)(*v452 + 8);
            v454 = *(uint64_t ****)(v452[1] + 8);
            if (v453)
            {
              if (v454)
              {
                if ((*((_BYTE *)v453 + 23) & 0x10) != 0)
                {
                  v455 = ***v453;
                  v456 = *(_QWORD *)(v455 + 152);
                  v457 = *(unsigned int *)(v455 + 168);
                  if ((_DWORD)v457)
                  {
                    LODWORD(v458) = (v457 - 1) & ((v453 >> 4) ^ (v453 >> 9));
                    v459 = (uint64_t ****)(v456 + 16 * v458);
                    v460 = *v459;
                    if (*v459 != v453)
                    {
                      v461 = 1;
                      do
                      {
                        if (v460 == (uint64_t ***)-4096)
                          goto LABEL_659;
                        v462 = v458 + v461++;
                        v458 = v462 & (v457 - 1);
                        v460 = *(uint64_t ****)(v456 + 16 * v458);
                      }
                      while (v460 != v453);
                      v459 = (uint64_t ****)(v456 + 16 * v458);
                    }
                  }
                  else
                  {
LABEL_659:
                    v459 = (uint64_t ****)(v456 + 16 * v457);
                  }
                  v547 = v459[1];
                  v549 = (size_t)*v547;
                  result = (char *)(v547 + 2);
                  v548 = v549;
                }
                else
                {
                  v548 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v454 + 23) & 0x10) != 0)
                {
                  v550 = ***v454;
                  v551 = *(_QWORD *)(v550 + 152);
                  v552 = *(unsigned int *)(v550 + 168);
                  if ((_DWORD)v552)
                  {
                    LODWORD(v553) = (v552 - 1) & ((v454 >> 4) ^ (v454 >> 9));
                    v554 = (uint64_t ****)(v551 + 16 * v553);
                    v555 = *v554;
                    if (*v554 != v454)
                    {
                      v556 = 1;
                      do
                      {
                        if (v555 == (uint64_t ***)-4096)
                          goto LABEL_668;
                        v557 = v553 + v556++;
                        v553 = v557 & (v552 - 1);
                        v555 = *(uint64_t ****)(v551 + 16 * v553);
                      }
                      while (v555 != v454);
                      v554 = (uint64_t ****)(v551 + 16 * v553);
                    }
                  }
                  else
                  {
LABEL_668:
                    v554 = (uint64_t ****)(v551 + 16 * v552);
                  }
                  v558 = v554[1];
                  v561 = (size_t)*v558;
                  v559 = (char *)(v558 + 2);
                  v560 = v561;
                }
                else
                {
                  v560 = 0;
                  v559 = &byte_1C871356D;
                }
                if (v560 >= v548)
                  v562 = v548;
                else
                  v562 = v560;
                if (v562 && (result = (char *)memcmp(result, v559, v562), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_554;
                }
                else if (v548 >= v560)
                {
                  goto LABEL_554;
                }
LABEL_553:
                ++v452;
                v451 = 2 * v450 + 2;
              }
            }
            else if (v454)
            {
              goto LABEL_553;
            }
LABEL_554:
            v463 = *v452;
            v7 = v831;
            v464 = v831[v450];
            v465 = *(uint64_t ****)(*v452 + 8);
            v466 = *(uint64_t ****)(v464 + 8);
            if (v465)
            {
              if (v466)
              {
                if ((*((_BYTE *)v465 + 23) & 0x10) != 0)
                {
                  v467 = ***v465;
                  v468 = *(_QWORD *)(v467 + 152);
                  v469 = *(unsigned int *)(v467 + 168);
                  if ((_DWORD)v469)
                  {
                    LODWORD(v470) = (v469 - 1) & ((v465 >> 4) ^ (v465 >> 9));
                    v471 = (uint64_t ****)(v468 + 16 * v470);
                    v472 = *v471;
                    if (*v471 != v465)
                    {
                      v473 = 1;
                      do
                      {
                        if (v472 == (uint64_t ***)-4096)
                          goto LABEL_565;
                        v474 = v470 + v473++;
                        v470 = v474 & (v469 - 1);
                        v472 = *(uint64_t ****)(v468 + 16 * v470);
                      }
                      while (v472 != v465);
                      v471 = (uint64_t ****)(v468 + 16 * v470);
                    }
                  }
                  else
                  {
LABEL_565:
                    v471 = (uint64_t ****)(v468 + 16 * v469);
                  }
                  v475 = v471[1];
                  v477 = (size_t)*v475;
                  result = (char *)(v475 + 2);
                  v476 = v477;
                }
                else
                {
                  v476 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v466 + 23) & 0x10) != 0)
                {
                  v478 = ***v466;
                  v479 = *(_QWORD *)(v478 + 152);
                  v480 = *(unsigned int *)(v478 + 168);
                  if ((_DWORD)v480)
                  {
                    LODWORD(v481) = (v480 - 1) & ((v466 >> 4) ^ (v466 >> 9));
                    v482 = (uint64_t ****)(v479 + 16 * v481);
                    v483 = *v482;
                    if (*v482 != v466)
                    {
                      v484 = 1;
                      do
                      {
                        if (v483 == (uint64_t ***)-4096)
                          goto LABEL_574;
                        v485 = v481 + v484++;
                        v481 = v485 & (v480 - 1);
                        v483 = *(uint64_t ****)(v479 + 16 * v481);
                      }
                      while (v483 != v466);
                      v482 = (uint64_t ****)(v479 + 16 * v481);
                    }
                  }
                  else
                  {
LABEL_574:
                    v482 = (uint64_t ****)(v479 + 16 * v480);
                  }
                  v486 = v482[1];
                  v489 = (size_t)*v486;
                  v487 = (char *)(v486 + 2);
                  v488 = v489;
                }
                else
                {
                  v488 = 0;
                  v487 = &byte_1C871356D;
                }
                if (v488 >= v476)
                  v490 = v476;
                else
                  v490 = v488;
                if (v490 && (result = (char *)memcmp(result, v487, v490), (_DWORD)result))
                {
                  if ((result & 0x80000000) != 0)
                    goto LABEL_657;
                }
                else if (v476 < v488)
                {
                  goto LABEL_657;
                }
              }
            }
            else if (v466)
            {
              goto LABEL_657;
            }
            v831[v450] = v463;
            while (1)
            {
              if (v448 < v451)
                goto LABEL_656;
              v491 = v452;
              v492 = 2 * v451;
              v451 = (2 * v451) | 1;
              v452 = &v7[v451];
              v493 = v492 + 2;
              if (v492 + 2 < v9)
              {
                v494 = *(uint64_t ****)(*v452 + 8);
                v495 = *(uint64_t ****)(v452[1] + 8);
                if (!v494)
                {
                  if (!v495)
                    goto LABEL_598;
LABEL_597:
                  ++v452;
                  v451 = v493;
                  goto LABEL_598;
                }
                if (!v495)
                  goto LABEL_598;
                if ((*((_BYTE *)v494 + 23) & 0x10) != 0)
                {
                  v496 = ***v494;
                  v497 = *(_QWORD *)(v496 + 152);
                  v498 = *(unsigned int *)(v496 + 168);
                  if ((_DWORD)v498)
                  {
                    LODWORD(v499) = (v498 - 1) & ((v494 >> 4) ^ (v494 >> 9));
                    v500 = (uint64_t ****)(v497 + 16 * v499);
                    v501 = *v500;
                    if (*v500 != v494)
                    {
                      v502 = 1;
                      do
                      {
                        if (v501 == (uint64_t ***)-4096)
                          goto LABEL_630;
                        v503 = v499 + v502++;
                        v499 = v503 & (v498 - 1);
                        v501 = *(uint64_t ****)(v497 + 16 * v499);
                      }
                      while (v501 != v494);
                      v500 = (uint64_t ****)(v497 + 16 * v499);
                    }
                  }
                  else
                  {
LABEL_630:
                    v500 = (uint64_t ****)(v497 + 16 * v498);
                  }
                  v531 = v500[1];
                  v533 = (size_t)*v531;
                  result = (char *)(v531 + 2);
                  v532 = v533;
                }
                else
                {
                  v532 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v495 + 23) & 0x10) != 0)
                {
                  v534 = ***v495;
                  v535 = *(_QWORD *)(v534 + 152);
                  v536 = *(unsigned int *)(v534 + 168);
                  if ((_DWORD)v536)
                  {
                    LODWORD(v537) = (v536 - 1) & ((v495 >> 4) ^ (v495 >> 9));
                    v538 = (uint64_t ****)(v535 + 16 * v537);
                    v539 = *v538;
                    if (*v538 != v495)
                    {
                      v540 = 1;
                      do
                      {
                        if (v539 == (uint64_t ***)-4096)
                          goto LABEL_639;
                        v541 = v537 + v540++;
                        v537 = v541 & (v536 - 1);
                        v539 = *(uint64_t ****)(v535 + 16 * v537);
                      }
                      while (v539 != v495);
                      v538 = (uint64_t ****)(v535 + 16 * v537);
                    }
                  }
                  else
                  {
LABEL_639:
                    v538 = (uint64_t ****)(v535 + 16 * v536);
                  }
                  v542 = v538[1];
                  v545 = (size_t)*v542;
                  v543 = (char *)(v542 + 2);
                  v544 = v545;
                }
                else
                {
                  v544 = 0;
                  v543 = &byte_1C871356D;
                }
                if (v544 >= v532)
                  v546 = v532;
                else
                  v546 = v544;
                if (v546 && (result = (char *)memcmp(result, v543, v546), (_DWORD)result))
                {
                  v448 = (unint64_t)(v9 - 2) >> 1;
                  if ((result & 0x80000000) != 0)
                    goto LABEL_597;
                }
                else
                {
                  v52 = v532 >= v544;
                  v448 = (unint64_t)(v9 - 2) >> 1;
                  if (!v52)
                    goto LABEL_597;
                }
              }
LABEL_598:
              v504 = *v452;
              v505 = *(uint64_t ****)(*v452 + 8);
              v506 = *(uint64_t ****)(v464 + 8);
              if (!v505)
              {
                v7 = v831;
                if (v506)
                  goto LABEL_655;
                goto LABEL_629;
              }
              v7 = v831;
              if (!v506)
                goto LABEL_629;
              if ((*((_BYTE *)v505 + 23) & 0x10) != 0)
              {
                v507 = ***v505;
                v508 = *(_QWORD *)(v507 + 152);
                v509 = *(unsigned int *)(v507 + 168);
                if ((_DWORD)v509)
                {
                  LODWORD(v510) = (v509 - 1) & ((v505 >> 4) ^ (v505 >> 9));
                  v511 = (uint64_t ****)(v508 + 16 * v510);
                  v512 = *v511;
                  if (*v511 != v505)
                  {
                    v513 = 1;
                    do
                    {
                      if (v512 == (uint64_t ***)-4096)
                        goto LABEL_609;
                      v514 = v510 + v513++;
                      v510 = v514 & (v509 - 1);
                      v512 = *(uint64_t ****)(v508 + 16 * v510);
                    }
                    while (v512 != v505);
                    v511 = (uint64_t ****)(v508 + 16 * v510);
                  }
                }
                else
                {
LABEL_609:
                  v511 = (uint64_t ****)(v508 + 16 * v509);
                }
                v515 = v511[1];
                v517 = (unint64_t)*v515;
                result = (char *)(v515 + 2);
                v516 = v517;
              }
              else
              {
                v516 = 0;
                result = &byte_1C871356D;
              }
              if ((*((_BYTE *)v506 + 23) & 0x10) != 0)
              {
                v518 = ***v506;
                v519 = *(_QWORD *)(v518 + 152);
                v520 = *(unsigned int *)(v518 + 168);
                if ((_DWORD)v520)
                {
                  LODWORD(v521) = (v520 - 1) & ((v506 >> 4) ^ (v506 >> 9));
                  v522 = (uint64_t ****)(v519 + 16 * v521);
                  v523 = *v522;
                  if (*v522 != v506)
                  {
                    v524 = 1;
                    do
                    {
                      if (v523 == (uint64_t ***)-4096)
                        goto LABEL_618;
                      v525 = v521 + v524++;
                      v521 = v525 & (v520 - 1);
                      v523 = *(uint64_t ****)(v519 + 16 * v521);
                    }
                    while (v523 != v506);
                    v522 = (uint64_t ****)(v519 + 16 * v521);
                  }
                }
                else
                {
LABEL_618:
                  v522 = (uint64_t ****)(v519 + 16 * v520);
                }
                v526 = v522[1];
                v529 = (unint64_t)*v526;
                v527 = (char *)(v526 + 2);
                v528 = v529;
              }
              else
              {
                v528 = 0;
                v527 = &byte_1C871356D;
              }
              v530 = v528 >= v516 ? v516 : v528;
              if (!v530)
                break;
              result = (char *)memcmp(result, v527, v530);
              if (!(_DWORD)result)
                break;
              v448 = (unint64_t)(v9 - 2) >> 1;
              if ((result & 0x80000000) != 0)
                goto LABEL_655;
LABEL_629:
              *v491 = v504;
            }
            v52 = v516 >= v528;
            v448 = (unint64_t)(v9 - 2) >> 1;
            if (v52)
              goto LABEL_629;
LABEL_655:
            v452 = v491;
LABEL_656:
            *v452 = v464;
LABEL_657:
            v449 = v450 - 1;
            if (!v450)
            {
LABEL_719:
              v597 = 0;
              v598 = *v7;
              v565 = (char *)v7;
              while (1)
              {
                v599 = v565;
                v565 += 8 * v597 + 8;
                v600 = 2 * v597;
                v597 = (2 * v597) | 1;
                v601 = v600 + 2;
                if (v600 + 2 < v9)
                {
                  v602 = *(uint64_t ****)(*(_QWORD *)v565 + 8);
                  v603 = *(uint64_t ****)(*((_QWORD *)v565 + 1) + 8);
                  if (v602)
                  {
                    if (v603)
                    {
                      if ((*((_BYTE *)v602 + 23) & 0x10) != 0)
                      {
                        v604 = ***v602;
                        v605 = *(_QWORD *)(v604 + 152);
                        v606 = *(unsigned int *)(v604 + 168);
                        if ((_DWORD)v606)
                        {
                          LODWORD(v607) = (v606 - 1) & ((v602 >> 4) ^ (v602 >> 9));
                          v608 = (uint64_t ****)(v605 + 16 * v607);
                          v609 = *v608;
                          if (*v608 != v602)
                          {
                            v610 = 1;
                            do
                            {
                              if (v609 == (uint64_t ***)-4096)
                                goto LABEL_734;
                              v611 = v607 + v610++;
                              v607 = v611 & (v606 - 1);
                              v609 = *(uint64_t ****)(v605 + 16 * v607);
                            }
                            while (v609 != v602);
                            v608 = (uint64_t ****)(v605 + 16 * v607);
                          }
                        }
                        else
                        {
LABEL_734:
                          v608 = (uint64_t ****)(v605 + 16 * v606);
                        }
                        v612 = v608[1];
                        v614 = (size_t)*v612;
                        result = (char *)(v612 + 2);
                        v613 = v614;
                      }
                      else
                      {
                        v613 = 0;
                        result = &byte_1C871356D;
                      }
                      if ((*((_BYTE *)v603 + 23) & 0x10) != 0)
                      {
                        v615 = ***v603;
                        v616 = *(_QWORD *)(v615 + 152);
                        v617 = *(unsigned int *)(v615 + 168);
                        if ((_DWORD)v617)
                        {
                          LODWORD(v618) = (v617 - 1) & ((v603 >> 4) ^ (v603 >> 9));
                          v619 = (uint64_t ****)(v616 + 16 * v618);
                          v620 = *v619;
                          if (*v619 != v603)
                          {
                            v621 = 1;
                            do
                            {
                              if (v620 == (uint64_t ***)-4096)
                                goto LABEL_743;
                              v622 = v618 + v621++;
                              v618 = v622 & (v617 - 1);
                              v620 = *(uint64_t ****)(v616 + 16 * v618);
                            }
                            while (v620 != v603);
                            v619 = (uint64_t ****)(v616 + 16 * v618);
                          }
                        }
                        else
                        {
LABEL_743:
                          v619 = (uint64_t ****)(v616 + 16 * v617);
                        }
                        v623 = v619[1];
                        v626 = (size_t)*v623;
                        v624 = (char *)(v623 + 2);
                        v625 = v626;
                      }
                      else
                      {
                        v625 = 0;
                        v624 = &byte_1C871356D;
                      }
                      if (v625 >= v613)
                        v627 = v613;
                      else
                        v627 = v625;
                      if (v627 && (result = (char *)memcmp(result, v624, v627), (_DWORD)result))
                      {
                        if ((result & 0x80000000) == 0)
                          goto LABEL_732;
                      }
                      else if (v613 >= v625)
                      {
                        goto LABEL_732;
                      }
LABEL_731:
                      v565 += 8;
                      v597 = v601;
                    }
                  }
                  else if (v603)
                  {
                    goto LABEL_731;
                  }
                }
LABEL_732:
                *(_QWORD *)v599 = *(_QWORD *)v565;
                if (v597 > (uint64_t)((unint64_t)(v9 - 2) >> 1))
                {
                  v628 = a2 - 8;
                  v386 = v565 == a2 - 8;
                  a2 -= 8;
                  if (v386)
                    goto LABEL_790;
                  *(_QWORD *)v565 = *(_QWORD *)v628;
                  *(_QWORD *)v628 = v598;
                  v629 = v565 - (char *)v831 + 8;
                  if (v629 < 9)
                    goto LABEL_791;
                  v630 = ((unint64_t)v629 >> 3) - 2;
                  v564 = v630 >> 1;
                  v593 = &v831[v630 >> 1];
                  v631 = *v593;
                  v598 = *(_QWORD *)v565;
                  v632 = *(uint64_t ****)(*v593 + 8);
                  v633 = *(uint64_t ****)(*(_QWORD *)v565 + 8);
                  if (!v632)
                  {
                    if (!v633)
                      goto LABEL_791;
LABEL_788:
                    *(_QWORD *)v565 = v631;
                    if (v630 >= 2)
                    {
                      do
                      {
                        v563 = v564 - 1;
                        v564 = (v564 - 1) >> 1;
                        v565 = (char *)&v831[v564];
                        v566 = *(_QWORD *)v565;
                        v567 = *(uint64_t ****)(*(_QWORD *)v565 + 8);
                        v568 = *(uint64_t ****)(v598 + 8);
                        if (v567)
                        {
                          if (!v568)
                            goto LABEL_789;
                          if ((*((_BYTE *)v567 + 23) & 0x10) != 0)
                          {
                            v569 = ***v567;
                            v570 = *(_QWORD *)(v569 + 152);
                            v571 = *(unsigned int *)(v569 + 168);
                            if ((_DWORD)v571)
                            {
                              LODWORD(v572) = (v571 - 1) & ((v567 >> 4) ^ (v567 >> 9));
                              v573 = (uint64_t ****)(v570 + 16 * v572);
                              v574 = *v573;
                              if (*v573 != v567)
                              {
                                v575 = 1;
                                do
                                {
                                  if (v574 == (uint64_t ***)-4096)
                                    goto LABEL_694;
                                  v576 = v572 + v575++;
                                  v572 = v576 & (v571 - 1);
                                  v574 = *(uint64_t ****)(v570 + 16 * v572);
                                }
                                while (v574 != v567);
                                v573 = (uint64_t ****)(v570 + 16 * v572);
                              }
                            }
                            else
                            {
LABEL_694:
                              v573 = (uint64_t ****)(v570 + 16 * v571);
                            }
                            v577 = v573[1];
                            v579 = (size_t)*v577;
                            result = (char *)(v577 + 2);
                            v578 = v579;
                          }
                          else
                          {
                            v578 = 0;
                            result = &byte_1C871356D;
                          }
                          if ((*((_BYTE *)v568 + 23) & 0x10) != 0)
                          {
                            v580 = ***v568;
                            v581 = *(_QWORD *)(v580 + 152);
                            v582 = *(unsigned int *)(v580 + 168);
                            if ((_DWORD)v582)
                            {
                              LODWORD(v583) = (v582 - 1) & ((v568 >> 4) ^ (v568 >> 9));
                              v584 = (uint64_t ****)(v581 + 16 * v583);
                              v585 = *v584;
                              if (*v584 != v568)
                              {
                                v586 = 1;
                                do
                                {
                                  if (v585 == (uint64_t ***)-4096)
                                    goto LABEL_703;
                                  v587 = v583 + v586++;
                                  v583 = v587 & (v582 - 1);
                                  v585 = *(uint64_t ****)(v581 + 16 * v583);
                                }
                                while (v585 != v568);
                                v584 = (uint64_t ****)(v581 + 16 * v583);
                              }
                            }
                            else
                            {
LABEL_703:
                              v584 = (uint64_t ****)(v581 + 16 * v582);
                            }
                            v588 = v584[1];
                            v591 = (size_t)*v588;
                            v589 = (char *)(v588 + 2);
                            v590 = v591;
                          }
                          else
                          {
                            v590 = 0;
                            v589 = &byte_1C871356D;
                          }
                          if (v590 >= v578)
                            v592 = v578;
                          else
                            v592 = v590;
                          if (v592 && (result = (char *)memcmp(result, v589, v592), (_DWORD)result))
                          {
                            if ((result & 0x80000000) == 0)
                              goto LABEL_789;
                          }
                          else if (v578 >= v590)
                          {
                            goto LABEL_789;
                          }
                        }
                        else if (!v568)
                        {
                          goto LABEL_789;
                        }
                        *v593 = v566;
                        v593 = &v831[v564];
                      }
                      while (v563 > 1);
                    }
                    else
                    {
LABEL_789:
                      v565 = (char *)v593;
                    }
LABEL_790:
                    *(_QWORD *)v565 = v598;
                    goto LABEL_791;
                  }
                  if (!v633)
                    goto LABEL_791;
                  if ((*((_BYTE *)v632 + 23) & 0x10) != 0)
                  {
                    v634 = ***v632;
                    v635 = *(_QWORD *)(v634 + 152);
                    v636 = *(unsigned int *)(v634 + 168);
                    if ((_DWORD)v636)
                    {
                      LODWORD(v637) = (v636 - 1) & ((v632 >> 4) ^ (v632 >> 9));
                      v638 = (uint64_t ****)(v635 + 16 * v637);
                      v639 = *v638;
                      if (*v638 != v632)
                      {
                        v640 = 1;
                        do
                        {
                          if (v639 == (uint64_t ***)-4096)
                            goto LABEL_769;
                          v641 = v637 + v640++;
                          v637 = v641 & (v636 - 1);
                          v639 = *(uint64_t ****)(v635 + 16 * v637);
                        }
                        while (v639 != v632);
                        v638 = (uint64_t ****)(v635 + 16 * v637);
                      }
                    }
                    else
                    {
LABEL_769:
                      v638 = (uint64_t ****)(v635 + 16 * v636);
                    }
                    v642 = v638[1];
                    v643 = (size_t)*v642;
                    result = (char *)(v642 + 2);
                    v594 = v643;
                  }
                  else
                  {
                    v594 = 0;
                    result = &byte_1C871356D;
                  }
                  if ((*((_BYTE *)v633 + 23) & 0x10) != 0)
                  {
                    v644 = ***v633;
                    v645 = *(_QWORD *)(v644 + 152);
                    v646 = *(unsigned int *)(v644 + 168);
                    if ((_DWORD)v646)
                    {
                      LODWORD(v647) = (v646 - 1) & ((v633 >> 4) ^ (v633 >> 9));
                      v648 = (uint64_t ****)(v645 + 16 * v647);
                      v649 = *v648;
                      if (*v648 != v633)
                      {
                        v650 = 1;
                        do
                        {
                          if (v649 == (uint64_t ***)-4096)
                            goto LABEL_778;
                          v651 = v647 + v650++;
                          v647 = v651 & (v646 - 1);
                          v649 = *(uint64_t ****)(v645 + 16 * v647);
                        }
                        while (v649 != v633);
                        v648 = (uint64_t ****)(v645 + 16 * v647);
                      }
                    }
                    else
                    {
LABEL_778:
                      v648 = (uint64_t ****)(v645 + 16 * v646);
                    }
                    v652 = v648[1];
                    v653 = (size_t)*v652;
                    v596 = (char *)(v652 + 2);
                    v595 = v653;
                  }
                  else
                  {
                    v595 = 0;
                    v596 = &byte_1C871356D;
                  }
                  if (v595 >= v594)
                    v654 = v594;
                  else
                    v654 = v595;
                  if (!v654 || (result = (char *)memcmp(result, v596, v654), !(_DWORD)result))
                  {
                    if (v594 >= v595)
                      goto LABEL_791;
                    goto LABEL_788;
                  }
                  if ((result & 0x80000000) != 0)
                    goto LABEL_788;
LABEL_791:
                  v655 = v9-- <= 2;
                  v7 = v831;
                  if (v655)
                    return result;
                  goto LABEL_719;
                }
              }
            }
          }
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (char *)&v7[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          result = sub_1C4DE0F00(v11, (char *)v7, v827);
        }
        else
        {
          sub_1C4DE0F00((char *)v7, v11, v827);
          sub_1C4DE0F00((char *)v7 + 8, v11 - 8, a2 - 16);
          sub_1C4DE0F00((char *)v7 + 16, (char *)&v7[v10 + 1], a2 - 24);
          result = sub_1C4DE0F00(v11 - 8, v11, (char *)&v7[v10 + 1]);
          v12 = *v7;
          *v7 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v12;
        }
        v13 = *v7;
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(uint64_t ****)(*(v7 - 1) + 8);
          v14 = *(uint64_t ****)(v13 + 8);
          if (!v15)
          {
            if (v14)
              goto LABEL_82;
LABEL_21:
            v24 = (uint64_t ****)(v13 + 8);
            v25 = *(_QWORD *)v827;
            if (*(_QWORD *)(*(_QWORD *)v827 + 8))
              goto LABEL_22;
            goto LABEL_290;
          }
          if (!v14)
            goto LABEL_21;
          if ((*((_BYTE *)v15 + 23) & 0x10) != 0)
          {
            v16 = ***v15;
            v17 = *(_QWORD *)(v16 + 152);
            v18 = *(unsigned int *)(v16 + 168);
            if (!(_DWORD)v18)
              goto LABEL_56;
            LODWORD(v19) = (v18 - 1) & ((v15 >> 4) ^ (v15 >> 9));
            v20 = (uint64_t ****)(v17 + 16 * v19);
            v21 = *v20;
            if (*v20 != v15)
            {
              v22 = 1;
              while (v21 != (uint64_t ***)-4096)
              {
                v23 = v19 + v22++;
                v19 = v23 & (v18 - 1);
                v21 = *(uint64_t ****)(v17 + 16 * v19);
                if (v21 == v15)
                {
                  v20 = (uint64_t ****)(v17 + 16 * v19);
                  goto LABEL_57;
                }
              }
LABEL_56:
              v20 = (uint64_t ****)(v17 + 16 * v18);
            }
LABEL_57:
            v53 = v20[1];
            v55 = (size_t)*v53;
            result = (char *)(v53 + 2);
            v54 = v55;
            goto LABEL_58;
          }
          v54 = 0;
          result = &byte_1C871356D;
LABEL_58:
          v56 = *((_DWORD *)v14 + 5);
          if ((v56 & 0x10000000) != 0)
          {
            v57 = ***v14;
            v58 = *(_QWORD *)(v57 + 152);
            v59 = *(unsigned int *)(v57 + 168);
            if ((_DWORD)v59)
            {
              LODWORD(v60) = (v59 - 1) & ((v14 >> 4) ^ (v14 >> 9));
              v61 = (uint64_t ****)(v58 + 16 * v60);
              v62 = *v61;
              if (*v61 == v14)
              {
LABEL_66:
                v65 = v61[1];
                v68 = (size_t)*v65;
                v66 = (char *)(v65 + 2);
                v67 = v68;
                goto LABEL_67;
              }
              v63 = 1;
              while (v62 != (uint64_t ***)-4096)
              {
                v64 = v60 + v63++;
                v60 = v64 & (v59 - 1);
                v62 = *(uint64_t ****)(v58 + 16 * v60);
                if (v62 == v14)
                {
                  v61 = (uint64_t ****)(v58 + 16 * v60);
                  goto LABEL_66;
                }
              }
            }
            v61 = (uint64_t ****)(v58 + 16 * v59);
            goto LABEL_66;
          }
          v67 = 0;
          v66 = &byte_1C871356D;
LABEL_67:
          if (v67 >= v54)
            v69 = v54;
          else
            v69 = v67;
          if (v69 && (result = (char *)memcmp(result, v66, v69), (_DWORD)result))
          {
            if ((result & 0x80000000) != 0)
              goto LABEL_82;
          }
          else if (v54 < v67)
          {
            goto LABEL_82;
          }
          v24 = (uint64_t ****)(v13 + 8);
          v25 = *(_QWORD *)v827;
          v70 = *(uint64_t ****)(*(_QWORD *)v827 + 8);
          if (!v70)
            goto LABEL_290;
          if ((v56 & 0x10000000) != 0)
          {
            v71 = ***v14;
            v72 = *(_QWORD *)(v71 + 152);
            v73 = *(unsigned int *)(v71 + 168);
            if (!(_DWORD)v73)
              goto LABEL_270;
            LODWORD(v74) = (v73 - 1) & ((v14 >> 4) ^ (v14 >> 9));
            v75 = (uint64_t ****)(v72 + 16 * v74);
            v76 = *v75;
            if (*v75 != v14)
            {
              v77 = 1;
              while (v76 != (uint64_t ***)-4096)
              {
                v78 = v74 + v77++;
                v74 = v78 & (v73 - 1);
                v76 = *(uint64_t ****)(v72 + 16 * v74);
                if (v76 == v14)
                {
                  v75 = (uint64_t ****)(v72 + 16 * v74);
                  goto LABEL_271;
                }
              }
LABEL_270:
              v75 = (uint64_t ****)(v72 + 16 * v73);
            }
LABEL_271:
            v234 = v75[1];
            v236 = (size_t)*v234;
            result = (char *)(v234 + 2);
            v235 = v236;
            goto LABEL_272;
          }
          v235 = 0;
          result = &byte_1C871356D;
LABEL_272:
          if ((*((_BYTE *)v70 + 23) & 0x10) != 0)
          {
            v237 = ***v70;
            v238 = *(_QWORD *)(v237 + 152);
            v239 = *(unsigned int *)(v237 + 168);
            if ((_DWORD)v239)
            {
              LODWORD(v240) = (v239 - 1) & ((v70 >> 4) ^ (v70 >> 9));
              v241 = (uint64_t ****)(v238 + 16 * v240);
              v242 = *v241;
              if (*v241 == v70)
              {
LABEL_280:
                v245 = v241[1];
                v248 = (size_t)*v245;
                v246 = (char *)(v245 + 2);
                v247 = v248;
                goto LABEL_281;
              }
              v243 = 1;
              while (v242 != (uint64_t ***)-4096)
              {
                v244 = v240 + v243++;
                v240 = v244 & (v239 - 1);
                v242 = *(uint64_t ****)(v238 + 16 * v240);
                if (v242 == v70)
                {
                  v241 = (uint64_t ****)(v238 + 16 * v240);
                  goto LABEL_280;
                }
              }
            }
            v241 = (uint64_t ****)(v238 + 16 * v239);
            goto LABEL_280;
          }
          v247 = 0;
          v246 = &byte_1C871356D;
LABEL_281:
          if (v247 >= v235)
            v249 = v235;
          else
            v249 = v247;
          if (v249)
          {
            result = (char *)memcmp(result, v246, v249);
            if ((_DWORD)result)
            {
              v5 = a2;
              if ((result & 0x80000000) != 0)
                goto LABEL_22;
              goto LABEL_290;
            }
          }
          v52 = v235 >= v247;
          v5 = a2;
          if (!v52)
          {
LABEL_22:
            i = v7;
            while (1)
            {
              do
              {
                while (1)
                {
                  v26 = i[1];
                  ++i;
                  v27 = *(uint64_t ****)(v26 + 8);
                  if (v14)
                    break;
                  if (v27)
                    goto LABEL_326;
                }
              }
              while (!v27);
              if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
                break;
              v37 = 0;
              result = &byte_1C871356D;
LABEL_36:
              if ((*((_BYTE *)v27 + 23) & 0x10) == 0)
              {
                v49 = 0;
                v48 = &byte_1C871356D;
                goto LABEL_45;
              }
              v39 = ***v27;
              v40 = *(_QWORD *)(v39 + 152);
              v41 = *(unsigned int *)(v39 + 168);
              if (!(_DWORD)v41)
                goto LABEL_43;
              LODWORD(v42) = (v41 - 1) & ((v27 >> 4) ^ (v27 >> 9));
              v43 = (uint64_t ****)(v40 + 16 * v42);
              v44 = *v43;
              if (*v43 != v27)
              {
                v45 = 1;
                while (v44 != (uint64_t ***)-4096)
                {
                  v46 = v42 + v45++;
                  v42 = v46 & (v41 - 1);
                  v44 = *(uint64_t ****)(v40 + 16 * v42);
                  if (v44 == v27)
                  {
                    v43 = (uint64_t ****)(v40 + 16 * v42);
                    goto LABEL_44;
                  }
                }
LABEL_43:
                v43 = (uint64_t ****)(v40 + 16 * v41);
              }
LABEL_44:
              v47 = v43[1];
              v50 = (size_t)*v47;
              v48 = (char *)(v47 + 2);
              v49 = v50;
LABEL_45:
              if (v49 >= v37)
                v51 = v37;
              else
                v51 = v49;
              if (v51 && (result = (char *)memcmp(result, v48, v51), (_DWORD)result))
              {
                v5 = a2;
                if ((result & 0x80000000) != 0)
                  goto LABEL_326;
              }
              else
              {
                v52 = v37 >= v49;
                v5 = a2;
                if (!v52)
                  goto LABEL_326;
              }
            }
            v28 = ***v14;
            v29 = *(_QWORD *)(v28 + 152);
            v30 = *(unsigned int *)(v28 + 168);
            if ((_DWORD)v30)
            {
              LODWORD(v31) = (v30 - 1) & ((v14 >> 4) ^ (v14 >> 9));
              v32 = (uint64_t ****)(v29 + 16 * v31);
              v33 = *v32;
              if (*v32 != v14)
              {
                v34 = 1;
                while (v33 != (uint64_t ***)-4096)
                {
                  v35 = v31 + v34++;
                  v31 = v35 & (v30 - 1);
                  v33 = *(uint64_t ****)(v29 + 16 * v31);
                  if (v33 == v14)
                  {
                    v32 = (uint64_t ****)(v29 + 16 * v31);
                    goto LABEL_35;
                  }
                }
                goto LABEL_34;
              }
            }
            else
            {
LABEL_34:
              v32 = (uint64_t ****)(v29 + 16 * v30);
            }
LABEL_35:
            v36 = v32[1];
            v38 = (size_t)*v36;
            result = (char *)(v36 + 2);
            v37 = v38;
            goto LABEL_36;
          }
LABEL_290:
          for (i = v7 + 1; i < (uint64_t *)v5; ++i)
          {
            v250 = *(uint64_t ****)(*i + 8);
            if (v14)
            {
              if (v250)
              {
                if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
                {
                  v251 = ***v14;
                  v252 = *(_QWORD *)(v251 + 152);
                  v253 = *(unsigned int *)(v251 + 168);
                  if (!(_DWORD)v253)
                    goto LABEL_302;
                  LODWORD(v254) = (v253 - 1) & ((v14 >> 4) ^ (v14 >> 9));
                  v255 = (uint64_t ****)(v252 + 16 * v254);
                  v256 = *v255;
                  if (*v255 != v14)
                  {
                    v257 = 1;
                    while (v256 != (uint64_t ***)-4096)
                    {
                      v258 = v254 + v257++;
                      v254 = v258 & (v253 - 1);
                      v256 = *(uint64_t ****)(v252 + 16 * v254);
                      if (v256 == v14)
                      {
                        v255 = (uint64_t ****)(v252 + 16 * v254);
                        goto LABEL_303;
                      }
                    }
LABEL_302:
                    v255 = (uint64_t ****)(v252 + 16 * v253);
                  }
LABEL_303:
                  v259 = v255[1];
                  v261 = (size_t)*v259;
                  result = (char *)(v259 + 2);
                  v260 = v261;
                }
                else
                {
                  v260 = 0;
                  result = &byte_1C871356D;
                }
                if ((*((_BYTE *)v250 + 23) & 0x10) != 0)
                {
                  v262 = ***v250;
                  v263 = *(_QWORD *)(v262 + 152);
                  v264 = *(unsigned int *)(v262 + 168);
                  if (!(_DWORD)v264)
                    goto LABEL_311;
                  LODWORD(v265) = (v264 - 1) & ((v250 >> 4) ^ (v250 >> 9));
                  v266 = (uint64_t ****)(v263 + 16 * v265);
                  v267 = *v266;
                  if (*v266 != v250)
                  {
                    v268 = 1;
                    while (v267 != (uint64_t ***)-4096)
                    {
                      v269 = v265 + v268++;
                      v265 = v269 & (v264 - 1);
                      v267 = *(uint64_t ****)(v263 + 16 * v265);
                      if (v267 == v250)
                      {
                        v266 = (uint64_t ****)(v263 + 16 * v265);
                        goto LABEL_312;
                      }
                    }
LABEL_311:
                    v266 = (uint64_t ****)(v263 + 16 * v264);
                  }
LABEL_312:
                  v270 = v266[1];
                  v273 = (size_t)*v270;
                  v271 = (char *)(v270 + 2);
                  v272 = v273;
                }
                else
                {
                  v272 = 0;
                  v271 = &byte_1C871356D;
                }
                if (v272 >= v260)
                  v274 = v260;
                else
                  v274 = v272;
                if (v274 && (result = (char *)memcmp(result, v271, v274), (_DWORD)result))
                {
                  v5 = a2;
                  if ((result & 0x80000000) != 0)
                    break;
                }
                else
                {
                  v52 = v260 >= v272;
                  v5 = a2;
                  if (!v52)
                    break;
                }
              }
            }
            else if (v250)
            {
              break;
            }
          }
LABEL_326:
          if (i < (uint64_t *)v5)
          {
            for (j = a2; ; j -= 8)
            {
              v5 = j - 8;
              v276 = *(uint64_t ****)(v25 + 8);
              if (!v14)
              {
                if (!v276)
                  goto LABEL_361;
                goto LABEL_358;
              }
              if (!v276)
                goto LABEL_361;
              if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
                break;
              v286 = 0;
              result = &byte_1C871356D;
LABEL_341:
              if ((*((_BYTE *)v276 + 23) & 0x10) != 0)
              {
                v288 = ***v276;
                v289 = *(_QWORD *)(v288 + 152);
                v290 = *(unsigned int *)(v288 + 168);
                if (!(_DWORD)v290)
                  goto LABEL_348;
                LODWORD(v291) = (v290 - 1) & ((v276 >> 4) ^ (v276 >> 9));
                v292 = (uint64_t ****)(v289 + 16 * v291);
                v293 = *v292;
                if (*v292 != v276)
                {
                  v294 = 1;
                  while (v293 != (uint64_t ***)-4096)
                  {
                    v295 = v291 + v294++;
                    v291 = v295 & (v290 - 1);
                    v293 = *(uint64_t ****)(v289 + 16 * v291);
                    if (v293 == v276)
                    {
                      v292 = (uint64_t ****)(v289 + 16 * v291);
                      goto LABEL_349;
                    }
                  }
LABEL_348:
                  v292 = (uint64_t ****)(v289 + 16 * v290);
                }
LABEL_349:
                v296 = v292[1];
                v299 = (size_t)*v296;
                v297 = (char *)(v296 + 2);
                v298 = v299;
                goto LABEL_350;
              }
              v298 = 0;
              v297 = &byte_1C871356D;
LABEL_350:
              if (v298 >= v286)
                v300 = v286;
              else
                v300 = v298;
              if (v300 && (result = (char *)memcmp(result, v297, v300), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_361;
              }
              else if (v286 >= v298)
              {
                goto LABEL_361;
              }
LABEL_358:
              v25 = *((_QWORD *)j - 2);
            }
            v277 = ***v14;
            v278 = *(_QWORD *)(v277 + 152);
            v279 = *(unsigned int *)(v277 + 168);
            if ((_DWORD)v279)
            {
              LODWORD(v280) = (v279 - 1) & ((v14 >> 4) ^ (v14 >> 9));
              v281 = (uint64_t ****)(v278 + 16 * v280);
              v282 = *v281;
              if (*v281 != v14)
              {
                v283 = 1;
                while (v282 != (uint64_t ***)-4096)
                {
                  v284 = v280 + v283++;
                  v280 = v284 & (v279 - 1);
                  v282 = *(uint64_t ****)(v278 + 16 * v280);
                  if (v282 == v14)
                  {
                    v281 = (uint64_t ****)(v278 + 16 * v280);
                    goto LABEL_340;
                  }
                }
                goto LABEL_339;
              }
            }
            else
            {
LABEL_339:
              v281 = (uint64_t ****)(v278 + 16 * v279);
            }
LABEL_340:
            v285 = v281[1];
            v287 = (size_t)*v285;
            result = (char *)(v285 + 2);
            v286 = v287;
            goto LABEL_341;
          }
LABEL_361:
          if (i >= (uint64_t *)v5)
            goto LABEL_430;
          v301 = *i;
          v302 = *(_QWORD *)v5;
          do
          {
            *i = v302;
            *(_QWORD *)v5 = v301;
            v303 = *v24;
            v304 = (*v24 >> 4) ^ (*v24 >> 9);
            do
            {
              while (1)
              {
                do
                {
                  while (1)
                  {
                    v305 = i[1];
                    ++i;
                    v301 = v305;
                    v306 = *(uint64_t ****)(v305 + 8);
                    if (v303)
                      break;
                    if (v306)
                      goto LABEL_419;
                  }
                }
                while (!v306);
                if ((*((_BYTE *)v303 + 23) & 0x10) != 0)
                {
                  v307 = ***v303;
                  v308 = *(_QWORD *)(v307 + 152);
                  v309 = *(unsigned int *)(v307 + 168);
                  if (!(_DWORD)v309)
                    goto LABEL_375;
                  LODWORD(v310) = (v309 - 1) & v304;
                  v311 = (uint64_t ****)(v308 + 16 * v310);
                  v312 = *v311;
                  if (*v311 != v303)
                  {
                    v313 = 1;
                    while (v312 != (uint64_t ***)-4096)
                    {
                      v314 = v310 + v313++;
                      v310 = v314 & (v309 - 1);
                      v312 = *(uint64_t ****)(v308 + 16 * v310);
                      if (v312 == v303)
                      {
                        v311 = (uint64_t ****)(v308 + 16 * v310);
                        goto LABEL_376;
                      }
                    }
LABEL_375:
                    v311 = (uint64_t ****)(v308 + 16 * v309);
                  }
LABEL_376:
                  v315 = v311[1];
                  v317 = (unint64_t)*v315;
                  result = (char *)(v315 + 2);
                  v316 = v317;
                  goto LABEL_377;
                }
                v316 = 0;
                result = &byte_1C871356D;
LABEL_377:
                if ((*((_BYTE *)v306 + 23) & 0x10) != 0)
                {
                  v318 = ***v306;
                  v319 = *(_QWORD *)(v318 + 152);
                  v320 = *(unsigned int *)(v318 + 168);
                  if ((_DWORD)v320)
                  {
                    LODWORD(v321) = (v320 - 1) & ((v306 >> 4) ^ (v306 >> 9));
                    v322 = (uint64_t ****)(v319 + 16 * v321);
                    v323 = *v322;
                    if (*v322 == v306)
                    {
LABEL_385:
                      v326 = v322[1];
                      v329 = (unint64_t)*v326;
                      v327 = (char *)(v326 + 2);
                      v328 = v329;
                      goto LABEL_386;
                    }
                    v324 = 1;
                    while (v323 != (uint64_t ***)-4096)
                    {
                      v325 = v321 + v324++;
                      v321 = v325 & (v320 - 1);
                      v323 = *(uint64_t ****)(v319 + 16 * v321);
                      if (v323 == v306)
                      {
                        v322 = (uint64_t ****)(v319 + 16 * v321);
                        goto LABEL_385;
                      }
                    }
                  }
                  v322 = (uint64_t ****)(v319 + 16 * v320);
                  goto LABEL_385;
                }
                v328 = 0;
                v327 = &byte_1C871356D;
LABEL_386:
                v330 = v328 >= v316 ? v316 : v328;
                if (!v330)
                  break;
                result = (char *)memcmp(result, v327, v330);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) != 0)
                  goto LABEL_419;
              }
            }
            while (v316 >= v328);
            do
            {
LABEL_419:
              while (1)
              {
                v348 = *((_QWORD *)v5 - 1);
                v5 -= 8;
                v302 = v348;
                v349 = *(uint64_t ****)(v348 + 8);
                if (!v303)
                  break;
                if (!v349)
                  goto LABEL_429;
                if ((*((_BYTE *)v303 + 23) & 0x10) != 0)
                {
                  v350 = ***v303;
                  v351 = *(_QWORD *)(v350 + 152);
                  v352 = *(unsigned int *)(v350 + 168);
                  if (!(_DWORD)v352)
                    goto LABEL_397;
                  LODWORD(v353) = (v352 - 1) & v304;
                  v331 = (uint64_t ****)(v351 + 16 * v353);
                  v354 = *v331;
                  if (*v331 != v303)
                  {
                    v355 = 1;
                    while (v354 != (uint64_t ***)-4096)
                    {
                      v356 = v353 + v355++;
                      v353 = v356 & (v352 - 1);
                      v354 = *(uint64_t ****)(v351 + 16 * v353);
                      if (v354 == v303)
                      {
                        v331 = (uint64_t ****)(v351 + 16 * v353);
                        goto LABEL_398;
                      }
                    }
LABEL_397:
                    v331 = (uint64_t ****)(v351 + 16 * v352);
                  }
LABEL_398:
                  v332 = v331[1];
                  v334 = (size_t)*v332;
                  result = (char *)(v332 + 2);
                  v333 = v334;
                  goto LABEL_399;
                }
                v333 = 0;
                result = &byte_1C871356D;
LABEL_399:
                if ((*((_BYTE *)v349 + 23) & 0x10) == 0)
                {
                  v345 = 0;
                  v344 = &byte_1C871356D;
                  goto LABEL_408;
                }
                v335 = ***v349;
                v336 = *(_QWORD *)(v335 + 152);
                v337 = *(unsigned int *)(v335 + 168);
                if (!(_DWORD)v337)
                  goto LABEL_406;
                LODWORD(v338) = (v337 - 1) & ((v349 >> 4) ^ (v349 >> 9));
                v339 = (uint64_t ****)(v336 + 16 * v338);
                v340 = *v339;
                if (*v339 != v349)
                {
                  v341 = 1;
                  while (v340 != (uint64_t ***)-4096)
                  {
                    v342 = v338 + v341++;
                    v338 = v342 & (v337 - 1);
                    v340 = *(uint64_t ****)(v336 + 16 * v338);
                    if (v340 == v349)
                    {
                      v339 = (uint64_t ****)(v336 + 16 * v338);
                      goto LABEL_407;
                    }
                  }
LABEL_406:
                  v339 = (uint64_t ****)(v336 + 16 * v337);
                }
LABEL_407:
                v343 = v339[1];
                v346 = (size_t)*v343;
                v344 = (char *)(v343 + 2);
                v345 = v346;
LABEL_408:
                if (v345 >= v333)
                  v347 = v333;
                else
                  v347 = v345;
                if (v347 && (result = (char *)memcmp(result, v344, v347), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    goto LABEL_429;
                }
                else if (v333 >= v345)
                {
                  goto LABEL_429;
                }
              }
            }
            while (v349);
LABEL_429:
            ;
          }
          while (i < (uint64_t *)v5);
LABEL_430:
          v357 = i - 1;
          if (i - 1 != v831)
            *v831 = *v357;
          a4 = 0;
          *v357 = v13;
          v5 = a2;
          continue;
        }
        v14 = *(uint64_t ****)(v13 + 8);
LABEL_82:
        v79 = (v14 >> 4) ^ (v14 >> 9);
        v80 = v7;
        do
        {
          while (1)
          {
            while (1)
            {
              v81 = v80;
              v83 = v80[1];
              ++v80;
              v82 = v83;
              v84 = *(uint64_t ****)(v83 + 8);
              if (v84)
                break;
              if (!v14)
                goto LABEL_116;
            }
            if (!v14)
              goto LABEL_116;
            if ((*((_BYTE *)v84 + 23) & 0x10) != 0)
            {
              v85 = ***v84;
              v86 = *(_QWORD *)(v85 + 152);
              v87 = *(unsigned int *)(v85 + 168);
              if ((_DWORD)v87)
              {
                LODWORD(v88) = (v87 - 1) & ((v84 >> 4) ^ (v84 >> 9));
                v89 = (uint64_t ****)(v86 + 16 * v88);
                v90 = *v89;
                if (*v89 == v84)
                {
LABEL_95:
                  v93 = v89[1];
                  v96 = (unint64_t)*v93;
                  v94 = (char *)(v93 + 2);
                  v95 = v96;
                  goto LABEL_96;
                }
                v91 = 1;
                while (v90 != (uint64_t ***)-4096)
                {
                  v92 = v88 + v91++;
                  v88 = v92 & (v87 - 1);
                  v90 = *(uint64_t ****)(v86 + 16 * v88);
                  if (v90 == v84)
                  {
                    v89 = (uint64_t ****)(v86 + 16 * v88);
                    goto LABEL_95;
                  }
                }
              }
              v89 = (uint64_t ****)(v86 + 16 * v87);
              goto LABEL_95;
            }
            v95 = 0;
            v94 = &byte_1C871356D;
LABEL_96:
            if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
            {
              v97 = ***v14;
              v98 = *(_QWORD *)(v97 + 152);
              v99 = *(unsigned int *)(v97 + 168);
              if ((_DWORD)v99)
              {
                LODWORD(v100) = (v99 - 1) & v79;
                v101 = (uint64_t ****)(v98 + 16 * v100);
                v102 = *v101;
                if (*v101 == v14)
                {
LABEL_104:
                  v105 = v101[1];
                  v108 = (unint64_t)*v105;
                  v106 = (char *)(v105 + 2);
                  v107 = v108;
                  goto LABEL_105;
                }
                v103 = 1;
                while (v102 != (uint64_t ***)-4096)
                {
                  v104 = v100 + v103++;
                  v100 = v104 & (v99 - 1);
                  v102 = *(uint64_t ****)(v98 + 16 * v100);
                  if (v102 == v14)
                  {
                    v101 = (uint64_t ****)(v98 + 16 * v100);
                    goto LABEL_104;
                  }
                }
              }
              v101 = (uint64_t ****)(v98 + 16 * v99);
              goto LABEL_104;
            }
            v107 = 0;
            v106 = &byte_1C871356D;
LABEL_105:
            v109 = v107 >= v95 ? v95 : v107;
            if (!v109)
              break;
            v110 = memcmp(v94, v106, v109);
            if (!v110)
              break;
            if ((v110 & 0x80000000) == 0)
              goto LABEL_116;
          }
        }
        while (v95 < v107);
LABEL_116:
        v111 = v14;
        v112 = a2;
        if (v81 != v7)
        {
          while (1)
          {
            do
            {
              while (1)
              {
                v113 = v111;
                v114 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                v115 = *(uint64_t ****)(v114 + 8);
                if (v115)
                  break;
                v111 = 0;
                if (v113)
                  goto LABEL_188;
              }
              v111 = 0;
            }
            while (!v113);
            if ((*((_BYTE *)v115 + 23) & 0x10) != 0)
              break;
            v126 = 0;
            v125 = &byte_1C871356D;
LABEL_130:
            if ((*((_BYTE *)v113 + 23) & 0x10) == 0)
            {
              v138 = 0;
              v137 = &byte_1C871356D;
              goto LABEL_139;
            }
            v128 = ***v113;
            v129 = *(_QWORD *)(v128 + 152);
            v130 = *(unsigned int *)(v128 + 168);
            if (!(_DWORD)v130)
              goto LABEL_137;
            LODWORD(v131) = (v130 - 1) & ((v113 >> 4) ^ (v113 >> 9));
            v132 = (uint64_t ****)(v129 + 16 * v131);
            v133 = *v132;
            if (*v132 != v113)
            {
              v134 = 1;
              while (v133 != (uint64_t ***)-4096)
              {
                v135 = v131 + v134++;
                v131 = v135 & (v130 - 1);
                v133 = *(uint64_t ****)(v129 + 16 * v131);
                if (v133 == v113)
                {
                  v132 = (uint64_t ****)(v129 + 16 * v131);
                  goto LABEL_138;
                }
              }
LABEL_137:
              v132 = (uint64_t ****)(v129 + 16 * v130);
            }
LABEL_138:
            v136 = v132[1];
            v139 = (size_t)*v136;
            v137 = (char *)(v136 + 2);
            v138 = v139;
LABEL_139:
            if (v138 >= v126)
              v140 = v126;
            else
              v140 = v138;
            if (v140 && (v141 = memcmp(v125, v137, v140)) != 0)
            {
              v111 = v14;
              if (v141 < 0)
                goto LABEL_188;
            }
            else
            {
              v111 = v14;
              if (v126 < v138)
                goto LABEL_188;
            }
          }
          v116 = ***v115;
          v117 = *(_QWORD *)(v116 + 152);
          v118 = *(unsigned int *)(v116 + 168);
          if ((_DWORD)v118)
          {
            LODWORD(v119) = (v118 - 1) & ((v115 >> 4) ^ (v115 >> 9));
            v120 = (uint64_t ****)(v117 + 16 * v119);
            v121 = *v120;
            if (*v120 != v115)
            {
              v122 = 1;
              while (v121 != (uint64_t ***)-4096)
              {
                v123 = v119 + v122++;
                v119 = v123 & (v118 - 1);
                v121 = *(uint64_t ****)(v117 + 16 * v119);
                if (v121 == v115)
                {
                  v120 = (uint64_t ****)(v117 + 16 * v119);
                  goto LABEL_129;
                }
              }
              goto LABEL_128;
            }
          }
          else
          {
LABEL_128:
            v120 = (uint64_t ****)(v117 + 16 * v118);
          }
LABEL_129:
          v124 = v120[1];
          v127 = (size_t)*v124;
          v125 = (char *)(v124 + 2);
          v126 = v127;
          goto LABEL_130;
        }
        v112 = a2;
        if (v80 < (uint64_t *)a2)
        {
          v112 = a2;
          while (1)
          {
            v142 = *((_QWORD *)v112 - 1);
            v112 -= 8;
            v143 = *(uint64_t ****)(v142 + 8);
            if (!v143)
              break;
            if (v14)
            {
              if ((*((_BYTE *)v143 + 23) & 0x10) != 0)
              {
                v144 = ***v143;
                v145 = *(_QWORD *)(v144 + 152);
                v146 = *(unsigned int *)(v144 + 168);
                if (!(_DWORD)v146)
                  goto LABEL_164;
                LODWORD(v147) = (v146 - 1) & ((v143 >> 4) ^ (v143 >> 9));
                v148 = (uint64_t ****)(v145 + 16 * v147);
                v149 = *v148;
                if (*v148 != v143)
                {
                  v150 = 1;
                  while (v149 != (uint64_t ***)-4096)
                  {
                    v151 = v147 + v150++;
                    v147 = v151 & (v146 - 1);
                    v149 = *(uint64_t ****)(v145 + 16 * v147);
                    if (v149 == v143)
                    {
                      v148 = (uint64_t ****)(v145 + 16 * v147);
                      goto LABEL_165;
                    }
                  }
LABEL_164:
                  v148 = (uint64_t ****)(v145 + 16 * v146);
                }
LABEL_165:
                v152 = v148[1];
                v155 = (size_t)*v152;
                v153 = (char *)(v152 + 2);
                v154 = v155;
                goto LABEL_166;
              }
              v154 = 0;
              v153 = &byte_1C871356D;
LABEL_166:
              if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
              {
                v166 = 0;
                v165 = &byte_1C871356D;
                goto LABEL_175;
              }
              v156 = ***v14;
              v157 = *(_QWORD *)(v156 + 152);
              v158 = *(unsigned int *)(v156 + 168);
              if (!(_DWORD)v158)
                goto LABEL_173;
              LODWORD(v159) = (v158 - 1) & v79;
              v160 = (uint64_t ****)(v157 + 16 * v159);
              v161 = *v160;
              if (*v160 != v14)
              {
                v162 = 1;
                while (v161 != (uint64_t ***)-4096)
                {
                  v163 = v159 + v162++;
                  v159 = v163 & (v158 - 1);
                  v161 = *(uint64_t ****)(v157 + 16 * v159);
                  if (v161 == v14)
                  {
                    v160 = (uint64_t ****)(v157 + 16 * v159);
                    goto LABEL_174;
                  }
                }
LABEL_173:
                v160 = (uint64_t ****)(v157 + 16 * v158);
              }
LABEL_174:
              v164 = v160[1];
              v167 = (size_t)*v164;
              v165 = (char *)(v164 + 2);
              v166 = v167;
LABEL_175:
              if (v166 >= v154)
                v168 = v154;
              else
                v168 = v166;
              if (v168 && (v169 = memcmp(v153, v165, v168)) != 0)
              {
                v170 = v169 >= 0;
              }
              else
              {
                if (v154 < v166)
                  goto LABEL_188;
                v170 = 1;
              }
              if (v80 >= (uint64_t *)v112 || !v170)
                goto LABEL_188;
            }
            else
            {
LABEL_162:
              if (v80 >= (uint64_t *)v112)
                goto LABEL_188;
            }
          }
          if (v14)
            goto LABEL_188;
          goto LABEL_162;
        }
LABEL_188:
        if (v80 >= (uint64_t *)v112)
        {
          i = v80;
          goto LABEL_262;
        }
        v171 = *(_QWORD *)v112;
        i = v80;
        v172 = (uint64_t *)v112;
        while (2)
        {
          *i = v171;
          *v172 = v82;
          v173 = *(uint64_t ****)(v13 + 8);
          while (2)
          {
            while (2)
            {
              while (1)
              {
                v174 = i[1];
                ++i;
                v82 = v174;
                v175 = *(uint64_t ****)(v174 + 8);
                if (v175)
                  break;
                if (!v173)
                {
LABEL_224:
                  v202 = 0;
                  goto LABEL_226;
                }
              }
              if (!v173)
                goto LABEL_224;
              if ((*((_BYTE *)v175 + 23) & 0x10) != 0)
              {
                v176 = ***v175;
                v177 = *(_QWORD *)(v176 + 152);
                v178 = *(unsigned int *)(v176 + 168);
                if (!(_DWORD)v178)
                  goto LABEL_202;
                LODWORD(v179) = (v178 - 1) & ((v175 >> 4) ^ (v175 >> 9));
                v180 = (uint64_t ****)(v177 + 16 * v179);
                v181 = *v180;
                if (*v180 != v175)
                {
                  v182 = 1;
                  while (v181 != (uint64_t ***)-4096)
                  {
                    v183 = v179 + v182++;
                    v179 = v183 & (v178 - 1);
                    v181 = *(uint64_t ****)(v177 + 16 * v179);
                    if (v181 == v175)
                    {
                      v180 = (uint64_t ****)(v177 + 16 * v179);
                      goto LABEL_203;
                    }
                  }
LABEL_202:
                  v180 = (uint64_t ****)(v177 + 16 * v178);
                }
LABEL_203:
                v184 = v180[1];
                v187 = (size_t)*v184;
                v185 = (char *)(v184 + 2);
                v186 = v187;
              }
              else
              {
                v186 = 0;
                v185 = &byte_1C871356D;
              }
              if ((*((_BYTE *)v173 + 23) & 0x10) != 0)
              {
                v188 = ***v173;
                v189 = *(_QWORD *)(v188 + 152);
                v190 = *(unsigned int *)(v188 + 168);
                if (!(_DWORD)v190)
                  goto LABEL_211;
                LODWORD(v191) = (v190 - 1) & ((v173 >> 4) ^ (v173 >> 9));
                v192 = (uint64_t ****)(v189 + 16 * v191);
                v193 = *v192;
                if (*v192 != v173)
                {
                  v194 = 1;
                  while (v193 != (uint64_t ***)-4096)
                  {
                    v195 = v191 + v194++;
                    v191 = v195 & (v190 - 1);
                    v193 = *(uint64_t ****)(v189 + 16 * v191);
                    if (v193 == v173)
                    {
                      v192 = (uint64_t ****)(v189 + 16 * v191);
                      goto LABEL_212;
                    }
                  }
LABEL_211:
                  v192 = (uint64_t ****)(v189 + 16 * v190);
                }
LABEL_212:
                v196 = v192[1];
                v199 = (size_t)*v196;
                v197 = (char *)(v196 + 2);
                v198 = v199;
              }
              else
              {
                v198 = 0;
                v197 = &byte_1C871356D;
              }
              if (v198 >= v186)
                v200 = v186;
              else
                v200 = v198;
              if (v200)
              {
                v201 = memcmp(v185, v197, v200);
                if (v201)
                {
                  if ((v201 & 0x80000000) == 0)
                    goto LABEL_225;
                  continue;
                }
              }
              break;
            }
            if (v186 < v198)
              continue;
            break;
          }
LABEL_225:
          v202 = v173;
          do
          {
LABEL_226:
            while (1)
            {
              v203 = v202;
              v204 = *--v172;
              v171 = v204;
              v205 = *(uint64_t ****)(v204 + 8);
              if (v205)
                break;
              v202 = v173;
              if (v203)
                goto LABEL_259;
            }
            v202 = v173;
          }
          while (!v203);
          if ((*((_BYTE *)v205 + 23) & 0x10) != 0)
          {
            v206 = ***v205;
            v207 = *(_QWORD *)(v206 + 152);
            v208 = *(unsigned int *)(v206 + 168);
            if (!(_DWORD)v208)
              goto LABEL_237;
            LODWORD(v209) = (v208 - 1) & ((v205 >> 4) ^ (v205 >> 9));
            v210 = (uint64_t ****)(v207 + 16 * v209);
            v211 = *v210;
            if (*v210 != v205)
            {
              v212 = 1;
              while (v211 != (uint64_t ***)-4096)
              {
                v213 = v209 + v212++;
                v209 = v213 & (v208 - 1);
                v211 = *(uint64_t ****)(v207 + 16 * v209);
                if (v211 == v205)
                {
                  v210 = (uint64_t ****)(v207 + 16 * v209);
                  goto LABEL_238;
                }
              }
LABEL_237:
              v210 = (uint64_t ****)(v207 + 16 * v208);
            }
LABEL_238:
            v214 = v210[1];
            v217 = (size_t)*v214;
            v215 = (char *)(v214 + 2);
            v216 = v217;
          }
          else
          {
            v216 = 0;
            v215 = &byte_1C871356D;
          }
          if ((*((_BYTE *)v203 + 23) & 0x10) != 0)
          {
            v218 = ***v203;
            v219 = *(_QWORD *)(v218 + 152);
            v220 = *(unsigned int *)(v218 + 168);
            if (!(_DWORD)v220)
              goto LABEL_246;
            LODWORD(v221) = (v220 - 1) & ((v203 >> 4) ^ (v203 >> 9));
            v222 = (uint64_t ****)(v219 + 16 * v221);
            v223 = *v222;
            if (*v222 != v203)
            {
              v224 = 1;
              while (v223 != (uint64_t ***)-4096)
              {
                v225 = v221 + v224++;
                v221 = v225 & (v220 - 1);
                v223 = *(uint64_t ****)(v219 + 16 * v221);
                if (v223 == v203)
                {
                  v222 = (uint64_t ****)(v219 + 16 * v221);
                  goto LABEL_247;
                }
              }
LABEL_246:
              v222 = (uint64_t ****)(v219 + 16 * v220);
            }
LABEL_247:
            v226 = v222[1];
            v229 = (size_t)*v226;
            v227 = (char *)(v226 + 2);
            v228 = v229;
          }
          else
          {
            v228 = 0;
            v227 = &byte_1C871356D;
          }
          if (v228 >= v216)
            v230 = v216;
          else
            v230 = v228;
          if (v230)
          {
            v231 = memcmp(v215, v227, v230);
            if (v231)
            {
              v202 = v173;
              if (v231 < 0)
                goto LABEL_259;
              goto LABEL_226;
            }
          }
          v202 = v173;
          if (v216 >= v228)
            goto LABEL_226;
LABEL_259:
          if (i < v172)
            continue;
          break;
        }
LABEL_262:
        v232 = i - 1;
        v4 = v831;
        if (i - 1 != v831)
          *v831 = *v232;
        *v232 = v13;
        v5 = a2;
        if (v80 < (uint64_t *)v112)
        {
LABEL_267:
          result = (char *)sub_1C4DDE350(v831, i - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v233 = sub_1C4DE1604(v831, (char *)i - 8);
        result = (char *)sub_1C4DE1604(i, a2);
        if (!(_DWORD)result)
        {
          if (v233)
            continue;
          goto LABEL_267;
        }
        a2 = (char *)(i - 1);
        if (!v233)
          goto LABEL_2;
        return result;
    }
  }
}

char *sub_1C4DE0F00(char *result, char *a2, char *a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t ***v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t ***v21;
  uint64_t ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ****v38;
  uint64_t ***v39;
  int v40;
  int v41;
  uint64_t ***v42;
  char *v43;
  size_t v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t ***v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  uint64_t ***v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ****v62;
  uint64_t ***v63;
  int v64;
  int v65;
  uint64_t ***v66;
  size_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ****v73;
  uint64_t ***v74;
  int v75;
  int v76;
  uint64_t ***v77;
  char *v78;
  size_t v79;
  size_t v80;
  size_t v81;
  uint64_t ***v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t ****v87;
  uint64_t ***v88;
  int v89;
  int v90;
  uint64_t ***v91;
  size_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t ****v98;
  uint64_t ***v99;
  int v100;
  int v101;
  uint64_t ***v102;
  size_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t ****v109;
  uint64_t ***v110;
  int v111;
  int v112;
  uint64_t ***v113;
  char *v114;
  size_t v115;
  size_t v116;
  size_t v117;
  uint64_t ***v118;
  char *v119;
  size_t v120;
  size_t v121;
  size_t v122;
  uint64_t ***v123;
  size_t v124;
  size_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t ****v130;
  uint64_t ***v131;
  int v132;
  int v133;
  uint64_t ***v134;
  char *v135;
  size_t v136;
  size_t v137;
  size_t v138;

  v4 = a2;
  v5 = result;
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)result;
  v8 = *(uint64_t ****)(*(_QWORD *)a2 + 8);
  v9 = *(uint64_t ****)(*(_QWORD *)result + 8);
  if (!v8)
  {
    if (!v9)
      return result;
    goto LABEL_11;
  }
  v10 = v8 >> 4;
  if (!v9)
    goto LABEL_38;
  v11 = *((_DWORD *)v8 + 5);
  if ((v11 & 0x10000000) != 0)
  {
    v12 = ***v8;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & (v10 ^ (v8 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v8)
      {
LABEL_22:
        v31 = v16[1];
        v33 = (size_t)*v31;
        result = (char *)(v31 + 2);
        v32 = v33;
        goto LABEL_23;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v8)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_22;
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_22;
  }
  v32 = 0;
  result = &byte_1C871356D;
LABEL_23:
  if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
  {
    v34 = ***v9;
    v35 = *(_QWORD *)(v34 + 152);
    v36 = *(unsigned int *)(v34 + 168);
    if ((_DWORD)v36)
    {
      LODWORD(v37) = (v36 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v38 = (uint64_t ****)(v35 + 16 * v37);
      v39 = *v38;
      if (*v38 == v9)
      {
LABEL_31:
        v42 = v38[1];
        v45 = (size_t)*v42;
        v43 = (char *)(v42 + 2);
        v44 = v45;
        goto LABEL_32;
      }
      v40 = 1;
      while (v39 != (uint64_t ***)-4096)
      {
        v41 = v37 + v40++;
        v37 = v41 & (v36 - 1);
        v39 = *(uint64_t ****)(v35 + 16 * v37);
        if (v39 == v9)
        {
          v38 = (uint64_t ****)(v35 + 16 * v37);
          goto LABEL_31;
        }
      }
    }
    v38 = (uint64_t ****)(v35 + 16 * v36);
    goto LABEL_31;
  }
  v44 = 0;
  v43 = &byte_1C871356D;
LABEL_32:
  if (v44 >= v32)
    v46 = v32;
  else
    v46 = v44;
  if (v46 && (result = (char *)memcmp(result, v43, v46), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if (v32 >= v44)
  {
LABEL_38:
    v47 = *(_QWORD *)a3;
    v48 = *(uint64_t ****)(*(_QWORD *)a3 + 8);
    if (!v48)
      goto LABEL_74;
    if ((*((_BYTE *)v48 + 23) & 0x10) == 0)
    {
      v67 = 0;
      result = &byte_1C871356D;
LABEL_57:
      if ((*((_BYTE *)v8 + 23) & 0x10) == 0)
      {
        v79 = 0;
        v78 = &byte_1C871356D;
LABEL_66:
        if (v79 >= v67)
          v81 = v67;
        else
          v81 = v79;
        if (v81 && (result = (char *)memcmp(result, v78, v81), (_DWORD)result))
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v67 >= v79)
        {
          return result;
        }
LABEL_74:
        *(_QWORD *)v4 = v47;
        *(_QWORD *)a3 = v6;
        v20 = *(_QWORD *)v4;
        v7 = *(_QWORD *)v5;
        v82 = *(uint64_t ****)(*(_QWORD *)v4 + 8);
        v22 = *(uint64_t ****)(*(_QWORD *)v5 + 8);
        if (v82)
        {
          if (!v22)
            return result;
          if ((*((_BYTE *)v82 + 23) & 0x10) == 0)
          {
            v103 = 0;
            result = &byte_1C871356D;
LABEL_96:
            if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
            {
              v120 = 0;
              v119 = &byte_1C871356D;
              goto LABEL_115;
            }
            v105 = ***v22;
            v106 = *(_QWORD *)(v105 + 152);
            v107 = *(unsigned int *)(v105 + 168);
            if ((_DWORD)v107)
            {
              LODWORD(v108) = (v107 - 1) & ((v22 >> 4) ^ (v22 >> 9));
              v109 = (uint64_t ****)(v106 + 16 * v108);
              v110 = *v109;
              if (*v109 == v22)
              {
LABEL_114:
                v118 = v109[1];
                v121 = (size_t)*v118;
                v119 = (char *)(v118 + 2);
                v120 = v121;
LABEL_115:
                if (v120 >= v103)
                  v122 = v103;
                else
                  v122 = v120;
                if (v122)
                {
                  result = (char *)memcmp(result, v119, v122);
                  if ((_DWORD)result)
                  {
LABEL_120:
                    if ((result & 0x80000000) == 0)
                      return result;
                    goto LABEL_143;
                  }
                }
                if (v103 >= v120)
                  return result;
                goto LABEL_143;
              }
              v111 = 1;
              while (v110 != (uint64_t ***)-4096)
              {
                v112 = v108 + v111++;
                v108 = v112 & (v107 - 1);
                v110 = *(uint64_t ****)(v106 + 16 * v108);
                if (v110 == v22)
                {
                  v109 = (uint64_t ****)(v106 + 16 * v108);
                  goto LABEL_114;
                }
              }
            }
            v109 = (uint64_t ****)(v106 + 16 * v107);
            goto LABEL_114;
          }
          v83 = ***v82;
          v84 = *(_QWORD *)(v83 + 152);
          v85 = *(unsigned int *)(v83 + 168);
          if ((_DWORD)v85)
          {
            LODWORD(v86) = (v85 - 1) & ((v82 >> 4) ^ (v82 >> 9));
            v87 = (uint64_t ****)(v84 + 16 * v86);
            v88 = *v87;
            if (*v87 == v82)
            {
LABEL_95:
              v102 = v87[1];
              v104 = (size_t)*v102;
              result = (char *)(v102 + 2);
              v103 = v104;
              goto LABEL_96;
            }
            v89 = 1;
            while (v88 != (uint64_t ***)-4096)
            {
              v90 = v86 + v89++;
              v86 = v90 & (v85 - 1);
              v88 = *(uint64_t ****)(v84 + 16 * v86);
              if (v88 == v82)
              {
                v87 = (uint64_t ****)(v84 + 16 * v86);
                goto LABEL_95;
              }
            }
          }
          v87 = (uint64_t ****)(v84 + 16 * v85);
          goto LABEL_95;
        }
LABEL_83:
        if (!v22)
          return result;
        goto LABEL_143;
      }
      v69 = ***v8;
      v70 = *(_QWORD *)(v69 + 152);
      v71 = *(unsigned int *)(v69 + 168);
      if ((_DWORD)v71)
      {
        LODWORD(v72) = (v71 - 1) & (v10 ^ (v8 >> 9));
        v73 = (uint64_t ****)(v70 + 16 * v72);
        v74 = *v73;
        if (*v73 == v8)
        {
LABEL_65:
          v77 = v73[1];
          v80 = (size_t)*v77;
          v78 = (char *)(v77 + 2);
          v79 = v80;
          goto LABEL_66;
        }
        v75 = 1;
        while (v74 != (uint64_t ***)-4096)
        {
          v76 = v72 + v75++;
          v72 = v76 & (v71 - 1);
          v74 = *(uint64_t ****)(v70 + 16 * v72);
          if (v74 == v8)
          {
            v73 = (uint64_t ****)(v70 + 16 * v72);
            goto LABEL_65;
          }
        }
      }
      v73 = (uint64_t ****)(v70 + 16 * v71);
      goto LABEL_65;
    }
    v49 = ***v48;
    v50 = *(_QWORD *)(v49 + 152);
    v51 = *(unsigned int *)(v49 + 168);
    if ((_DWORD)v51)
    {
      LODWORD(v52) = (v51 - 1) & ((v48 >> 4) ^ (v48 >> 9));
      v53 = (uint64_t ****)(v50 + 16 * v52);
      v54 = *v53;
      if (*v53 == v48)
      {
LABEL_56:
        v66 = v53[1];
        v68 = (size_t)*v66;
        result = (char *)(v66 + 2);
        v67 = v68;
        goto LABEL_57;
      }
      v55 = 1;
      while (v54 != (uint64_t ***)-4096)
      {
        v56 = v52 + v55++;
        v52 = v56 & (v51 - 1);
        v54 = *(uint64_t ****)(v50 + 16 * v52);
        if (v54 == v48)
        {
          v53 = (uint64_t ****)(v50 + 16 * v52);
          goto LABEL_56;
        }
      }
    }
    v53 = (uint64_t ****)(v50 + 16 * v51);
    goto LABEL_56;
  }
  v20 = *(_QWORD *)a3;
  v57 = *(uint64_t ****)(*(_QWORD *)a3 + 8);
  if (!v57)
    goto LABEL_142;
  if ((*((_BYTE *)v57 + 23) & 0x10) != 0)
  {
    v58 = ***v57;
    v59 = *(_QWORD *)(v58 + 152);
    v60 = *(unsigned int *)(v58 + 168);
    if ((_DWORD)v60)
    {
      LODWORD(v61) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      v62 = (uint64_t ****)(v59 + 16 * v61);
      v63 = *v62;
      if (*v62 == v57)
        goto LABEL_125;
      v64 = 1;
      while (v63 != (uint64_t ***)-4096)
      {
        v65 = v61 + v64++;
        v61 = v65 & (v60 - 1);
        v63 = *(uint64_t ****)(v59 + 16 * v61);
        if (v63 == v57)
        {
          v62 = (uint64_t ****)(v59 + 16 * v61);
          goto LABEL_125;
        }
      }
    }
    v62 = (uint64_t ****)(v59 + 16 * v60);
LABEL_125:
    v123 = v62[1];
    v125 = (size_t)*v123;
    result = (char *)(v123 + 2);
    v124 = v125;
    if ((v11 & 0x10000000) != 0)
      goto LABEL_126;
    goto LABEL_151;
  }
  v124 = 0;
  result = &byte_1C871356D;
  if ((v11 & 0x10000000) != 0)
  {
LABEL_126:
    v126 = ***v8;
    v127 = *(_QWORD *)(v126 + 152);
    v128 = *(unsigned int *)(v126 + 168);
    if ((_DWORD)v128)
    {
      LODWORD(v129) = (v128 - 1) & (v10 ^ (v8 >> 9));
      v130 = (uint64_t ****)(v127 + 16 * v129);
      v131 = *v130;
      if (*v130 == v8)
      {
LABEL_133:
        v134 = v130[1];
        v137 = (size_t)*v134;
        v135 = (char *)(v134 + 2);
        v136 = v137;
        goto LABEL_134;
      }
      v132 = 1;
      while (v131 != (uint64_t ***)-4096)
      {
        v133 = v129 + v132++;
        v129 = v133 & (v128 - 1);
        v131 = *(uint64_t ****)(v127 + 16 * v129);
        if (v131 == v8)
        {
          v130 = (uint64_t ****)(v127 + 16 * v129);
          goto LABEL_133;
        }
      }
    }
    v130 = (uint64_t ****)(v127 + 16 * v128);
    goto LABEL_133;
  }
LABEL_151:
  v136 = 0;
  v135 = &byte_1C871356D;
LABEL_134:
  if (v136 >= v124)
    v138 = v124;
  else
    v138 = v136;
  if (!v138 || (result = (char *)memcmp(result, v135, v138), !(_DWORD)result))
  {
    if (v124 >= v136)
      goto LABEL_11;
LABEL_142:
    v4 = a3;
    goto LABEL_143;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_142;
LABEL_11:
  *(_QWORD *)v5 = v6;
  *(_QWORD *)v4 = v7;
  v20 = *(_QWORD *)a3;
  v21 = *(uint64_t ****)(*(_QWORD *)a3 + 8);
  v22 = *(uint64_t ****)(v7 + 8);
  if (!v21)
  {
    v5 = v4;
    v4 = a3;
    goto LABEL_83;
  }
  if (!v22)
    return result;
  if ((*((_BYTE *)v21 + 23) & 0x10) != 0)
  {
    v23 = ***v21;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(unsigned int *)(v23 + 168);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v21 >> 4) ^ (v21 >> 9));
      v27 = (uint64_t ****)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == v21)
      {
LABEL_86:
        v91 = v27[1];
        v93 = (size_t)*v91;
        result = (char *)(v91 + 2);
        v92 = v93;
        goto LABEL_87;
      }
      v29 = 1;
      while (v28 != (uint64_t ***)-4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(uint64_t ****)(v24 + 16 * v26);
        if (v28 == v21)
        {
          v27 = (uint64_t ****)(v24 + 16 * v26);
          goto LABEL_86;
        }
      }
    }
    v27 = (uint64_t ****)(v24 + 16 * v25);
    goto LABEL_86;
  }
  v92 = 0;
  result = &byte_1C871356D;
LABEL_87:
  if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
  {
    v115 = 0;
    v114 = &byte_1C871356D;
    goto LABEL_105;
  }
  v94 = ***v22;
  v95 = *(_QWORD *)(v94 + 152);
  v96 = *(unsigned int *)(v94 + 168);
  if (!(_DWORD)v96)
    goto LABEL_103;
  LODWORD(v97) = (v96 - 1) & ((v22 >> 4) ^ (v22 >> 9));
  v98 = (uint64_t ****)(v95 + 16 * v97);
  v99 = *v98;
  if (*v98 != v22)
  {
    v100 = 1;
    while (v99 != (uint64_t ***)-4096)
    {
      v101 = v97 + v100++;
      v97 = v101 & (v96 - 1);
      v99 = *(uint64_t ****)(v95 + 16 * v97);
      if (v99 == v22)
      {
        v98 = (uint64_t ****)(v95 + 16 * v97);
        goto LABEL_104;
      }
    }
LABEL_103:
    v98 = (uint64_t ****)(v95 + 16 * v96);
  }
LABEL_104:
  v113 = v98[1];
  v116 = (size_t)*v113;
  v114 = (char *)(v113 + 2);
  v115 = v116;
LABEL_105:
  if (v115 >= v92)
    v117 = v92;
  else
    v117 = v115;
  if (v117)
  {
    result = (char *)memcmp(result, v114, v117);
    if ((_DWORD)result)
    {
      v5 = v4;
      v4 = a3;
      goto LABEL_120;
    }
  }
  v5 = v4;
  v4 = a3;
  if (v92 >= v115)
    return result;
LABEL_143:
  *(_QWORD *)v5 = v20;
  *(_QWORD *)v4 = v7;
  return result;
}

BOOL sub_1C4DE1604(uint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ***v23;
  uint64_t ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  char *v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ****v41;
  uint64_t ***v42;
  int v43;
  int v44;
  uint64_t ***v45;
  char *v46;
  size_t v47;
  size_t v48;
  size_t v49;
  int v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ***v55;
  uint64_t ***v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ****v61;
  uint64_t ***v62;
  int v63;
  int v64;
  uint64_t ***v65;
  char *v66;
  size_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ****v73;
  uint64_t ***v74;
  int v75;
  int v76;
  uint64_t ***v77;
  char *v78;
  size_t v79;
  size_t v80;
  size_t v81;
  int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t ***v87;
  uint64_t ***v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t ****v93;
  uint64_t ***v94;
  int v95;
  int v96;
  uint64_t ***v97;
  char *v98;
  size_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t ***v109;
  char *v110;
  size_t v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t ****v117;
  uint64_t ***v118;
  int v119;
  int v120;
  uint64_t ***v121;
  char *v122;
  size_t v123;
  size_t v124;
  size_t v125;
  int v126;
  uint64_t ***v127;
  char *v128;
  size_t v129;
  size_t v130;
  size_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t ***v135;
  uint64_t ***v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t ****v141;
  uint64_t ***v142;
  int v143;
  int v144;
  uint64_t ***v145;
  char *v146;
  size_t v147;
  size_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t ****v153;
  uint64_t ***v154;
  int v155;
  int v156;
  uint64_t ***v157;
  char *v158;
  size_t v159;
  size_t v160;
  size_t v161;
  int v162;
  uint64_t v163;
  uint64_t ***v164;
  uint64_t ***v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t ****v170;
  uint64_t ***v171;
  int v172;
  int v173;
  uint64_t ***v174;
  char *v175;
  size_t v176;
  size_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t ****v182;
  uint64_t ***v183;
  int v184;
  int v185;
  uint64_t ***v186;
  char *v187;
  size_t v188;
  size_t v189;
  size_t v190;
  int v191;
  uint64_t v192;
  uint64_t ***v193;
  uint64_t ***v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t ****v199;
  uint64_t ***v200;
  int v201;
  int v202;
  uint64_t ***v203;
  char *v204;
  size_t v205;
  size_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t ****v211;
  uint64_t ***v212;
  int v213;
  int v214;
  uint64_t ***v215;
  char *v216;
  size_t v217;
  size_t v218;
  size_t v219;
  int v220;

  v4 = (a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 1);
      v7 = *a1;
      v8 = *(uint64_t ****)(v6 + 8);
      v9 = *(uint64_t ****)(*a1 + 8);
      if (v8)
      {
        if (v9)
        {
          if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
          {
            v10 = ***v8;
            v11 = *(_QWORD *)(v10 + 152);
            v12 = *(unsigned int *)(v10 + 168);
            if ((_DWORD)v12)
            {
              LODWORD(v13) = (v12 - 1) & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t ****)(v11 + 16 * v13);
              v15 = *v14;
              if (*v14 != v8)
              {
                v16 = 1;
                do
                {
                  if (v15 == (uint64_t ***)-4096)
                    goto LABEL_101;
                  v17 = v13 + v16++;
                  v13 = v17 & (v12 - 1);
                  v15 = *(uint64_t ****)(v11 + 16 * v13);
                }
                while (v15 != v8);
                v14 = (uint64_t ****)(v11 + 16 * v13);
              }
            }
            else
            {
LABEL_101:
              v14 = (uint64_t ****)(v11 + 16 * v12);
            }
            v97 = v14[1];
            v100 = (size_t)*v97;
            v98 = (char *)(v97 + 2);
            v99 = v100;
          }
          else
          {
            v99 = 0;
            v98 = &byte_1C871356D;
          }
          if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
          {
            v101 = ***v9;
            v102 = *(_QWORD *)(v101 + 152);
            v103 = *(unsigned int *)(v101 + 168);
            if ((_DWORD)v103)
            {
              LODWORD(v104) = (v103 - 1) & ((v9 >> 4) ^ (v9 >> 9));
              v105 = (uint64_t ****)(v102 + 16 * v104);
              v106 = *v105;
              if (*v105 != v9)
              {
                v107 = 1;
                do
                {
                  if (v106 == (uint64_t ***)-4096)
                    goto LABEL_119;
                  v108 = v104 + v107++;
                  v104 = v108 & (v103 - 1);
                  v106 = *(uint64_t ****)(v102 + 16 * v104);
                }
                while (v106 != v9);
                v105 = (uint64_t ****)(v102 + 16 * v104);
              }
            }
            else
            {
LABEL_119:
              v105 = (uint64_t ****)(v102 + 16 * v103);
            }
            v121 = v105[1];
            v124 = (size_t)*v121;
            v122 = (char *)(v121 + 2);
            v123 = v124;
          }
          else
          {
            v123 = 0;
            v122 = &byte_1C871356D;
          }
          if (v123 >= v99)
            v125 = v99;
          else
            v125 = v123;
          if (v125 && (v126 = memcmp(v98, v122, v125)) != 0)
          {
            if ((v126 & 0x80000000) == 0)
              return 1;
          }
          else if (v99 >= v123)
          {
            return 1;
          }
LABEL_129:
          *a1 = v6;
          *((_QWORD *)a2 - 1) = v7;
          return 1;
        }
      }
      else if (v9)
      {
        goto LABEL_129;
      }
      return result;
    case 3:
      sub_1C4DE0F00((char *)a1, (char *)a1 + 8, a2 - 8);
      return 1;
    case 4:
      sub_1C4DE20EC((char *)a1, (char *)a1 + 8, (char *)a1 + 16, (uint64_t *)a2 - 1);
      return 1;
    case 5:
      v83 = a1 + 2;
      v84 = a1 + 3;
      sub_1C4DE20EC((char *)a1, (char *)a1 + 8, (char *)a1 + 16, a1 + 3);
      v85 = *((_QWORD *)a2 - 1);
      v86 = a1[3];
      v87 = *(uint64_t ****)(v85 + 8);
      v88 = *(uint64_t ****)(v86 + 8);
      if (!v87)
      {
        if (!v88)
          return 1;
        goto LABEL_140;
      }
      if (!v88)
        return 1;
      if ((*((_BYTE *)v87 + 23) & 0x10) != 0)
      {
        v89 = ***v87;
        v90 = *(_QWORD *)(v89 + 152);
        v91 = *(unsigned int *)(v89 + 168);
        if ((_DWORD)v91)
        {
          LODWORD(v92) = (v91 - 1) & ((v87 >> 4) ^ (v87 >> 9));
          v93 = (uint64_t ****)(v90 + 16 * v92);
          v94 = *v93;
          if (*v93 != v87)
          {
            v95 = 1;
            do
            {
              if (v94 == (uint64_t ***)-4096)
                goto LABEL_110;
              v96 = v92 + v95++;
              v92 = v96 & (v91 - 1);
              v94 = *(uint64_t ****)(v90 + 16 * v92);
            }
            while (v94 != v87);
            v93 = (uint64_t ****)(v90 + 16 * v92);
          }
        }
        else
        {
LABEL_110:
          v93 = (uint64_t ****)(v90 + 16 * v91);
        }
        v109 = v93[1];
        v112 = (size_t)*v109;
        v110 = (char *)(v109 + 2);
        v111 = v112;
        goto LABEL_112;
      }
      v111 = 0;
      v110 = &byte_1C871356D;
LABEL_112:
      if ((*((_BYTE *)v88 + 23) & 0x10) != 0)
      {
        v113 = ***v88;
        v114 = *(_QWORD *)(v113 + 152);
        v115 = *(unsigned int *)(v113 + 168);
        if ((_DWORD)v115)
        {
          LODWORD(v116) = (v115 - 1) & ((v88 >> 4) ^ (v88 >> 9));
          v117 = (uint64_t ****)(v114 + 16 * v116);
          v118 = *v117;
          if (*v117 != v88)
          {
            v119 = 1;
            do
            {
              if (v118 == (uint64_t ***)-4096)
                goto LABEL_130;
              v120 = v116 + v119++;
              v116 = v120 & (v115 - 1);
              v118 = *(uint64_t ****)(v114 + 16 * v116);
            }
            while (v118 != v88);
            v117 = (uint64_t ****)(v114 + 16 * v116);
          }
        }
        else
        {
LABEL_130:
          v117 = (uint64_t ****)(v114 + 16 * v115);
        }
        v127 = v117[1];
        v130 = (size_t)*v127;
        v128 = (char *)(v127 + 2);
        v129 = v130;
        goto LABEL_132;
      }
      v129 = 0;
      v128 = &byte_1C871356D;
LABEL_132:
      if (v129 >= v111)
        v131 = v111;
      else
        v131 = v129;
      if (v131 && (v132 = memcmp(v110, v128, v131)) != 0)
      {
        if ((v132 & 0x80000000) == 0)
          return 1;
      }
      else if (v111 >= v129)
      {
        return 1;
      }
LABEL_140:
      *v84 = v85;
      *((_QWORD *)a2 - 1) = v86;
      v133 = *v84;
      v134 = *v83;
      v135 = *(uint64_t ****)(*v84 + 8);
      v136 = *(uint64_t ****)(*v83 + 8);
      if (!v135)
      {
        if (!v136)
          return 1;
        goto LABEL_170;
      }
      if (!v136)
        return 1;
      if ((*((_BYTE *)v135 + 23) & 0x10) != 0)
      {
        v137 = ***v135;
        v138 = *(_QWORD *)(v137 + 152);
        v139 = *(unsigned int *)(v137 + 168);
        if ((_DWORD)v139)
        {
          LODWORD(v140) = (v139 - 1) & ((v135 >> 4) ^ (v135 >> 9));
          v141 = (uint64_t ****)(v138 + 16 * v140);
          v142 = *v141;
          if (*v141 != v135)
          {
            v143 = 1;
            do
            {
              if (v142 == (uint64_t ***)-4096)
                goto LABEL_151;
              v144 = v140 + v143++;
              v140 = v144 & (v139 - 1);
              v142 = *(uint64_t ****)(v138 + 16 * v140);
            }
            while (v142 != v135);
            v141 = (uint64_t ****)(v138 + 16 * v140);
          }
        }
        else
        {
LABEL_151:
          v141 = (uint64_t ****)(v138 + 16 * v139);
        }
        v145 = v141[1];
        v148 = (size_t)*v145;
        v146 = (char *)(v145 + 2);
        v147 = v148;
        goto LABEL_153;
      }
      v147 = 0;
      v146 = &byte_1C871356D;
LABEL_153:
      if ((*((_BYTE *)v136 + 23) & 0x10) != 0)
      {
        v149 = ***v136;
        v150 = *(_QWORD *)(v149 + 152);
        v151 = *(unsigned int *)(v149 + 168);
        if ((_DWORD)v151)
        {
          LODWORD(v152) = (v151 - 1) & ((v136 >> 4) ^ (v136 >> 9));
          v153 = (uint64_t ****)(v150 + 16 * v152);
          v154 = *v153;
          if (*v153 != v136)
          {
            v155 = 1;
            do
            {
              if (v154 == (uint64_t ***)-4096)
                goto LABEL_160;
              v156 = v152 + v155++;
              v152 = v156 & (v151 - 1);
              v154 = *(uint64_t ****)(v150 + 16 * v152);
            }
            while (v154 != v136);
            v153 = (uint64_t ****)(v150 + 16 * v152);
          }
        }
        else
        {
LABEL_160:
          v153 = (uint64_t ****)(v150 + 16 * v151);
        }
        v157 = v153[1];
        v160 = (size_t)*v157;
        v158 = (char *)(v157 + 2);
        v159 = v160;
        goto LABEL_162;
      }
      v159 = 0;
      v158 = &byte_1C871356D;
LABEL_162:
      if (v159 >= v147)
        v161 = v147;
      else
        v161 = v159;
      if (v161 && (v162 = memcmp(v146, v158, v161)) != 0)
      {
        if ((v162 & 0x80000000) == 0)
          return 1;
      }
      else if (v147 >= v159)
      {
        return 1;
      }
LABEL_170:
      *v83 = v133;
      *v84 = v134;
      v163 = a1[1];
      v164 = *(uint64_t ****)(v133 + 8);
      v165 = *(uint64_t ****)(v163 + 8);
      if (!v164)
      {
        if (!v165)
          return 1;
        goto LABEL_200;
      }
      if (!v165)
        return 1;
      if ((*((_BYTE *)v164 + 23) & 0x10) != 0)
      {
        v166 = ***v164;
        v167 = *(_QWORD *)(v166 + 152);
        v168 = *(unsigned int *)(v166 + 168);
        if ((_DWORD)v168)
        {
          LODWORD(v169) = (v168 - 1) & ((v164 >> 4) ^ (v164 >> 9));
          v170 = (uint64_t ****)(v167 + 16 * v169);
          v171 = *v170;
          if (*v170 != v164)
          {
            v172 = 1;
            do
            {
              if (v171 == (uint64_t ***)-4096)
                goto LABEL_181;
              v173 = v169 + v172++;
              v169 = v173 & (v168 - 1);
              v171 = *(uint64_t ****)(v167 + 16 * v169);
            }
            while (v171 != v164);
            v170 = (uint64_t ****)(v167 + 16 * v169);
          }
        }
        else
        {
LABEL_181:
          v170 = (uint64_t ****)(v167 + 16 * v168);
        }
        v174 = v170[1];
        v177 = (size_t)*v174;
        v175 = (char *)(v174 + 2);
        v176 = v177;
        goto LABEL_183;
      }
      v176 = 0;
      v175 = &byte_1C871356D;
LABEL_183:
      if ((*((_BYTE *)v165 + 23) & 0x10) != 0)
      {
        v178 = ***v165;
        v179 = *(_QWORD *)(v178 + 152);
        v180 = *(unsigned int *)(v178 + 168);
        if ((_DWORD)v180)
        {
          LODWORD(v181) = (v180 - 1) & ((v165 >> 4) ^ (v165 >> 9));
          v182 = (uint64_t ****)(v179 + 16 * v181);
          v183 = *v182;
          if (*v182 != v165)
          {
            v184 = 1;
            do
            {
              if (v183 == (uint64_t ***)-4096)
                goto LABEL_190;
              v185 = v181 + v184++;
              v181 = v185 & (v180 - 1);
              v183 = *(uint64_t ****)(v179 + 16 * v181);
            }
            while (v183 != v165);
            v182 = (uint64_t ****)(v179 + 16 * v181);
          }
        }
        else
        {
LABEL_190:
          v182 = (uint64_t ****)(v179 + 16 * v180);
        }
        v186 = v182[1];
        v189 = (size_t)*v186;
        v187 = (char *)(v186 + 2);
        v188 = v189;
        goto LABEL_192;
      }
      v188 = 0;
      v187 = &byte_1C871356D;
LABEL_192:
      if (v188 >= v176)
        v190 = v176;
      else
        v190 = v188;
      if (v190 && (v191 = memcmp(v175, v187, v190)) != 0)
      {
        if ((v191 & 0x80000000) == 0)
          return 1;
      }
      else if (v176 >= v188)
      {
        return 1;
      }
LABEL_200:
      a1[1] = v133;
      a1[2] = v163;
      v192 = *a1;
      v193 = *(uint64_t ****)(v133 + 8);
      v194 = *(uint64_t ****)(*a1 + 8);
      if (!v193)
      {
        if (!v194)
          return 1;
        goto LABEL_210;
      }
      if (!v194)
        return 1;
      if ((*((_BYTE *)v193 + 23) & 0x10) != 0)
      {
        v195 = ***v193;
        v196 = *(_QWORD *)(v195 + 152);
        v197 = *(unsigned int *)(v195 + 168);
        if ((_DWORD)v197)
        {
          LODWORD(v198) = (v197 - 1) & ((v193 >> 4) ^ (v193 >> 9));
          v199 = (uint64_t ****)(v196 + 16 * v198);
          v200 = *v199;
          if (*v199 == v193)
          {
LABEL_218:
            v203 = v199[1];
            v206 = (size_t)*v203;
            v204 = (char *)(v203 + 2);
            v205 = v206;
            goto LABEL_219;
          }
          v201 = 1;
          while (v200 != (uint64_t ***)-4096)
          {
            v202 = v198 + v201++;
            v198 = v202 & (v197 - 1);
            v200 = *(uint64_t ****)(v196 + 16 * v198);
            if (v200 == v193)
            {
              v199 = (uint64_t ****)(v196 + 16 * v198);
              goto LABEL_218;
            }
          }
        }
        v199 = (uint64_t ****)(v196 + 16 * v197);
        goto LABEL_218;
      }
      v205 = 0;
      v204 = &byte_1C871356D;
LABEL_219:
      if ((*((_BYTE *)v194 + 23) & 0x10) != 0)
      {
        v207 = ***v194;
        v208 = *(_QWORD *)(v207 + 152);
        v209 = *(unsigned int *)(v207 + 168);
        if ((_DWORD)v209)
        {
          LODWORD(v210) = (v209 - 1) & ((v194 >> 4) ^ (v194 >> 9));
          v211 = (uint64_t ****)(v208 + 16 * v210);
          v212 = *v211;
          if (*v211 == v194)
          {
LABEL_227:
            v215 = v211[1];
            v218 = (size_t)*v215;
            v216 = (char *)(v215 + 2);
            v217 = v218;
            goto LABEL_228;
          }
          v213 = 1;
          while (v212 != (uint64_t ***)-4096)
          {
            v214 = v210 + v213++;
            v210 = v214 & (v209 - 1);
            v212 = *(uint64_t ****)(v208 + 16 * v210);
            if (v212 == v194)
            {
              v211 = (uint64_t ****)(v208 + 16 * v210);
              goto LABEL_227;
            }
          }
        }
        v211 = (uint64_t ****)(v208 + 16 * v209);
        goto LABEL_227;
      }
      v217 = 0;
      v216 = &byte_1C871356D;
LABEL_228:
      if (v217 >= v205)
        v219 = v205;
      else
        v219 = v217;
      if (v219)
      {
        v220 = memcmp(v204, v216, v219);
        if (v220)
        {
          if ((v220 & 0x80000000) == 0)
            return 1;
LABEL_210:
          *a1 = v133;
          a1[1] = v192;
          return 1;
        }
      }
      if (v205 < v217)
        goto LABEL_210;
      return 1;
    default:
      v18 = (char *)(a1 + 2);
      sub_1C4DE0F00((char *)a1, (char *)a1 + 8, (char *)a1 + 16);
      v19 = (char *)(a1 + 3);
      if (a1 + 3 == (uint64_t *)a2)
        return 1;
      v20 = 0;
      while (2)
      {
        v21 = *(_QWORD *)v19;
        v22 = *(_QWORD *)v18;
        v23 = *(uint64_t ****)(*(_QWORD *)v19 + 8);
        v24 = *(uint64_t ****)(*(_QWORD *)v18 + 8);
        if (v23)
        {
          if (!v24)
            goto LABEL_81;
          if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
          {
            v25 = ***v23;
            v26 = *(_QWORD *)(v25 + 152);
            v27 = *(unsigned int *)(v25 + 168);
            if ((_DWORD)v27)
            {
              LODWORD(v28) = (v27 - 1) & ((v23 >> 4) ^ (v23 >> 9));
              v29 = (uint64_t ****)(v26 + 16 * v28);
              v30 = *v29;
              if (*v29 != v23)
              {
                v31 = 1;
                do
                {
                  if (v30 == (uint64_t ***)-4096)
                    goto LABEL_24;
                  v32 = v28 + v31++;
                  v28 = v32 & (v27 - 1);
                  v30 = *(uint64_t ****)(v26 + 16 * v28);
                }
                while (v30 != v23);
                v29 = (uint64_t ****)(v26 + 16 * v28);
              }
            }
            else
            {
LABEL_24:
              v29 = (uint64_t ****)(v26 + 16 * v27);
            }
            v33 = v29[1];
            v36 = (size_t)*v33;
            v34 = (char *)(v33 + 2);
            v35 = v36;
          }
          else
          {
            v35 = 0;
            v34 = &byte_1C871356D;
          }
          if ((*((_BYTE *)v24 + 23) & 0x10) != 0)
          {
            v37 = ***v24;
            v38 = *(_QWORD *)(v37 + 152);
            v39 = *(unsigned int *)(v37 + 168);
            if ((_DWORD)v39)
            {
              LODWORD(v40) = (v39 - 1) & ((v24 >> 4) ^ (v24 >> 9));
              v41 = (uint64_t ****)(v38 + 16 * v40);
              v42 = *v41;
              if (*v41 != v24)
              {
                v43 = 1;
                do
                {
                  if (v42 == (uint64_t ***)-4096)
                    goto LABEL_33;
                  v44 = v40 + v43++;
                  v40 = v44 & (v39 - 1);
                  v42 = *(uint64_t ****)(v38 + 16 * v40);
                }
                while (v42 != v24);
                v41 = (uint64_t ****)(v38 + 16 * v40);
              }
            }
            else
            {
LABEL_33:
              v41 = (uint64_t ****)(v38 + 16 * v39);
            }
            v45 = v41[1];
            v48 = (size_t)*v45;
            v46 = (char *)(v45 + 2);
            v47 = v48;
          }
          else
          {
            v47 = 0;
            v46 = &byte_1C871356D;
          }
          if (v47 >= v35)
            v49 = v35;
          else
            v49 = v47;
          if (v49 && (v50 = memcmp(v34, v46, v49)) != 0)
          {
            if ((v50 & 0x80000000) == 0)
              goto LABEL_81;
          }
          else if (v35 >= v47)
          {
            goto LABEL_81;
          }
          goto LABEL_43;
        }
        if (!v24)
          goto LABEL_81;
LABEL_43:
        *(_QWORD *)v19 = v22;
        v51 = (char *)a1;
        if (v18 == (char *)a1)
          goto LABEL_80;
        v52 = (uint64_t *)v18;
        while (2)
        {
          v54 = *--v52;
          v53 = v54;
          v55 = *(uint64_t ****)(v21 + 8);
          v56 = *(uint64_t ****)(v54 + 8);
          if (!v55)
          {
            if (!v56)
              break;
            goto LABEL_75;
          }
          if (!v56)
            break;
          if ((*((_BYTE *)v55 + 23) & 0x10) != 0)
          {
            v57 = ***v55;
            v58 = *(_QWORD *)(v57 + 152);
            v59 = *(unsigned int *)(v57 + 168);
            if ((_DWORD)v59)
            {
              LODWORD(v60) = (v59 - 1) & ((v55 >> 4) ^ (v55 >> 9));
              v61 = (uint64_t ****)(v58 + 16 * v60);
              v62 = *v61;
              if (*v61 == v55)
              {
LABEL_57:
                v65 = v61[1];
                v68 = (size_t)*v65;
                v66 = (char *)(v65 + 2);
                v67 = v68;
                goto LABEL_58;
              }
              v63 = 1;
              while (v62 != (uint64_t ***)-4096)
              {
                v64 = v60 + v63++;
                v60 = v64 & (v59 - 1);
                v62 = *(uint64_t ****)(v58 + 16 * v60);
                if (v62 == v55)
                {
                  v61 = (uint64_t ****)(v58 + 16 * v60);
                  goto LABEL_57;
                }
              }
            }
            v61 = (uint64_t ****)(v58 + 16 * v59);
            goto LABEL_57;
          }
          v67 = 0;
          v66 = &byte_1C871356D;
LABEL_58:
          if ((*((_BYTE *)v56 + 23) & 0x10) != 0)
          {
            v69 = ***v56;
            v70 = *(_QWORD *)(v69 + 152);
            v71 = *(unsigned int *)(v69 + 168);
            if ((_DWORD)v71)
            {
              LODWORD(v72) = (v71 - 1) & ((v56 >> 4) ^ (v56 >> 9));
              v73 = (uint64_t ****)(v70 + 16 * v72);
              v74 = *v73;
              if (*v73 == v56)
              {
LABEL_66:
                v77 = v73[1];
                v80 = (size_t)*v77;
                v78 = (char *)(v77 + 2);
                v79 = v80;
                goto LABEL_67;
              }
              v75 = 1;
              while (v74 != (uint64_t ***)-4096)
              {
                v76 = v72 + v75++;
                v72 = v76 & (v71 - 1);
                v74 = *(uint64_t ****)(v70 + 16 * v72);
                if (v74 == v56)
                {
                  v73 = (uint64_t ****)(v70 + 16 * v72);
                  goto LABEL_66;
                }
              }
            }
            v73 = (uint64_t ****)(v70 + 16 * v71);
            goto LABEL_66;
          }
          v79 = 0;
          v78 = &byte_1C871356D;
LABEL_67:
          if (v79 >= v67)
            v81 = v67;
          else
            v81 = v79;
          if (v81)
          {
            v82 = memcmp(v66, v78, v81);
            if (v82)
            {
              if ((v82 & 0x80000000) == 0)
                break;
              goto LABEL_75;
            }
          }
          if (v67 < v79)
          {
LABEL_75:
            *(_QWORD *)v18 = v53;
            v18 = (char *)v52;
            if (v52 == a1)
            {
              v51 = (char *)a1;
              goto LABEL_80;
            }
            continue;
          }
          break;
        }
        v51 = v18;
LABEL_80:
        *(_QWORD *)v51 = v21;
        if (++v20 != 8)
        {
LABEL_81:
          v18 = v19;
          v19 += 8;
          if (v19 == a2)
            return 1;
          continue;
        }
        return v19 + 8 == a2;
      }
  }
}

char *sub_1C4DE20EC(char *a1, char *a2, char *a3, uint64_t *a4)
{
  char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t ***v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t ***v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ****v28;
  uint64_t ***v29;
  int v30;
  int v31;
  uint64_t ***v32;
  char *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ***v39;
  uint64_t ***v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t ***v49;
  size_t v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  uint64_t ***v60;
  char *v61;
  size_t v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t ***v67;
  uint64_t ***v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ****v73;
  uint64_t ***v74;
  int v75;
  int v76;
  uint64_t ***v77;
  size_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ****v84;
  uint64_t ***v85;
  int v86;
  int v87;
  uint64_t ***v88;
  char *v89;
  size_t v90;
  size_t v91;
  size_t v92;

  result = sub_1C4DE0F00(a1, a2, a3);
  v9 = *a4;
  v10 = *(_QWORD *)a3;
  v11 = *(uint64_t ****)(*a4 + 8);
  v12 = *(uint64_t ****)(*(_QWORD *)a3 + 8);
  if (!v11)
  {
    if (!v12)
      return result;
    goto LABEL_31;
  }
  if (!v12)
    return result;
  if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
  {
    v13 = ***v11;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v17 = (uint64_t ****)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == v11)
      {
LABEL_13:
        v21 = v17[1];
        v23 = (size_t)*v21;
        result = (char *)(v21 + 2);
        v22 = v23;
        goto LABEL_14;
      }
      v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == v11)
        {
          v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_13;
        }
      }
    }
    v17 = (uint64_t ****)(v14 + 16 * v15);
    goto LABEL_13;
  }
  v22 = 0;
  result = &byte_1C871356D;
LABEL_14:
  if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
  {
    v24 = ***v12;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v28 = (uint64_t ****)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v12)
      {
LABEL_22:
        v32 = v28[1];
        v35 = (size_t)*v32;
        v33 = (char *)(v32 + 2);
        v34 = v35;
        goto LABEL_23;
      }
      v30 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(uint64_t ****)(v25 + 16 * v27);
        if (v29 == v12)
        {
          v28 = (uint64_t ****)(v25 + 16 * v27);
          goto LABEL_22;
        }
      }
    }
    v28 = (uint64_t ****)(v25 + 16 * v26);
    goto LABEL_22;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_23:
  if (v34 >= v22)
    v36 = v22;
  else
    v36 = v34;
  if (v36 && (result = (char *)memcmp(result, v33, v36), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v34)
  {
    return result;
  }
LABEL_31:
  *(_QWORD *)a3 = v9;
  *a4 = v10;
  v37 = *(_QWORD *)a3;
  v38 = *(_QWORD *)a2;
  v39 = *(uint64_t ****)(*(_QWORD *)a3 + 8);
  v40 = *(uint64_t ****)(*(_QWORD *)a2 + 8);
  if (!v39)
  {
    if (!v40)
      return result;
    goto LABEL_61;
  }
  if (!v40)
    return result;
  if ((*((_BYTE *)v39 + 23) & 0x10) != 0)
  {
    v41 = ***v39;
    v42 = *(_QWORD *)(v41 + 152);
    v43 = *(unsigned int *)(v41 + 168);
    if ((_DWORD)v43)
    {
      LODWORD(v44) = (v43 - 1) & ((v39 >> 4) ^ (v39 >> 9));
      v45 = (uint64_t ****)(v42 + 16 * v44);
      v46 = *v45;
      if (*v45 == v39)
      {
LABEL_43:
        v49 = v45[1];
        v51 = (size_t)*v49;
        result = (char *)(v49 + 2);
        v50 = v51;
        goto LABEL_44;
      }
      v47 = 1;
      while (v46 != (uint64_t ***)-4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(uint64_t ****)(v42 + 16 * v44);
        if (v46 == v39)
        {
          v45 = (uint64_t ****)(v42 + 16 * v44);
          goto LABEL_43;
        }
      }
    }
    v45 = (uint64_t ****)(v42 + 16 * v43);
    goto LABEL_43;
  }
  v50 = 0;
  result = &byte_1C871356D;
LABEL_44:
  if ((*((_BYTE *)v40 + 23) & 0x10) != 0)
  {
    v52 = ***v40;
    v53 = *(_QWORD *)(v52 + 152);
    v54 = *(unsigned int *)(v52 + 168);
    if ((_DWORD)v54)
    {
      LODWORD(v55) = (v54 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v56 = (uint64_t ****)(v53 + 16 * v55);
      v57 = *v56;
      if (*v56 == v40)
      {
LABEL_52:
        v60 = v56[1];
        v63 = (size_t)*v60;
        v61 = (char *)(v60 + 2);
        v62 = v63;
        goto LABEL_53;
      }
      v58 = 1;
      while (v57 != (uint64_t ***)-4096)
      {
        v59 = v55 + v58++;
        v55 = v59 & (v54 - 1);
        v57 = *(uint64_t ****)(v53 + 16 * v55);
        if (v57 == v40)
        {
          v56 = (uint64_t ****)(v53 + 16 * v55);
          goto LABEL_52;
        }
      }
    }
    v56 = (uint64_t ****)(v53 + 16 * v54);
    goto LABEL_52;
  }
  v62 = 0;
  v61 = &byte_1C871356D;
LABEL_53:
  if (v62 >= v50)
    v64 = v50;
  else
    v64 = v62;
  if (v64 && (result = (char *)memcmp(result, v61, v64), (_DWORD)result))
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v50 >= v62)
  {
    return result;
  }
LABEL_61:
  *(_QWORD *)a2 = v37;
  *(_QWORD *)a3 = v38;
  v65 = *(_QWORD *)a2;
  v66 = *(_QWORD *)a1;
  v67 = *(uint64_t ****)(*(_QWORD *)a2 + 8);
  v68 = *(uint64_t ****)(*(_QWORD *)a1 + 8);
  if (!v67)
  {
    if (!v68)
      return result;
    goto LABEL_71;
  }
  if (!v68)
    return result;
  if ((*((_BYTE *)v67 + 23) & 0x10) != 0)
  {
    v69 = ***v67;
    v70 = *(_QWORD *)(v69 + 152);
    v71 = *(unsigned int *)(v69 + 168);
    if ((_DWORD)v71)
    {
      LODWORD(v72) = (v71 - 1) & ((v67 >> 4) ^ (v67 >> 9));
      v73 = (uint64_t ****)(v70 + 16 * v72);
      v74 = *v73;
      if (*v73 == v67)
      {
LABEL_74:
        v77 = v73[1];
        v79 = (size_t)*v77;
        result = (char *)(v77 + 2);
        v78 = v79;
        goto LABEL_75;
      }
      v75 = 1;
      while (v74 != (uint64_t ***)-4096)
      {
        v76 = v72 + v75++;
        v72 = v76 & (v71 - 1);
        v74 = *(uint64_t ****)(v70 + 16 * v72);
        if (v74 == v67)
        {
          v73 = (uint64_t ****)(v70 + 16 * v72);
          goto LABEL_74;
        }
      }
    }
    v73 = (uint64_t ****)(v70 + 16 * v71);
    goto LABEL_74;
  }
  v78 = 0;
  result = &byte_1C871356D;
LABEL_75:
  if ((*((_BYTE *)v68 + 23) & 0x10) != 0)
  {
    v80 = ***v68;
    v81 = *(_QWORD *)(v80 + 152);
    v82 = *(unsigned int *)(v80 + 168);
    if ((_DWORD)v82)
    {
      LODWORD(v83) = (v82 - 1) & ((v68 >> 4) ^ (v68 >> 9));
      v84 = (uint64_t ****)(v81 + 16 * v83);
      v85 = *v84;
      if (*v84 == v68)
      {
LABEL_83:
        v88 = v84[1];
        v91 = (size_t)*v88;
        v89 = (char *)(v88 + 2);
        v90 = v91;
        goto LABEL_84;
      }
      v86 = 1;
      while (v85 != (uint64_t ***)-4096)
      {
        v87 = v83 + v86++;
        v83 = v87 & (v82 - 1);
        v85 = *(uint64_t ****)(v81 + 16 * v83);
        if (v85 == v68)
        {
          v84 = (uint64_t ****)(v81 + 16 * v83);
          goto LABEL_83;
        }
      }
    }
    v84 = (uint64_t ****)(v81 + 16 * v82);
    goto LABEL_83;
  }
  v90 = 0;
  v89 = &byte_1C871356D;
LABEL_84:
  if (v90 >= v78)
    v92 = v78;
  else
    v92 = v90;
  if (v92 && (result = (char *)memcmp(result, v89, v92), (_DWORD)result))
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_71;
  }
  else if (v78 < v90)
  {
LABEL_71:
    *(_QWORD *)a1 = v65;
    *(_QWORD *)a2 = v66;
  }
  return result;
}

uint64_t *sub_1C4DE255C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = sub_1C485B670(a1, a2);
  v4 = a2[5];
  a2[5] = 0;
  if (v4)
    sub_1C4DDE2A8((uint64_t)(a2 + 5), v4);
  operator delete(a2);
  return v3;
}

uint64_t **sub_1C4DE25A0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x30uLL);
    v16[0] = v12;
    v16[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v17 = 1;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v9;
    *v8 = v12;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    else
    {
      v14 = v12;
    }
    sub_1C4768E74(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v9 = (uint64_t **)v16[0];
    v16[0] = 0;
    sub_1C4DE26A4((uint64_t)v16, 0);
  }
  return v9;
}

void sub_1C4DE26A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[5];
      v2[5] = 0;
      if (v3)
        sub_1C4DDE2A8((uint64_t)(v2 + 5), v3);
    }
    operator delete(v2);
  }
}

_QWORD *sub_1C4DE26F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  _QWORD *v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_16:
    result = sub_1C4DE27E0(a1, (uint64_t)a2, a2, v18);
    *result = *a2;
    *((_DWORD *)result + 2) = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v17 = 1;
    goto LABEL_12;
  }
  v9 = *(_QWORD *)a1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = result;
      v16 = v10 + v14++;
      v10 = v16 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_11;
    }
    if (v13)
      v18 = v13;
    else
      v18 = result;
    goto LABEL_16;
  }
LABEL_11:
  v17 = 0;
LABEL_12:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

_QWORD *sub_1C4DE27E0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C49D7AB8(a1, v7);
      v17 = 0;
      sub_1C47AD1C0(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C49D7AB8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C4DE2910(int64x2_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v8;
  char *v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  int64x2_t *v23;

  v2 = (a1->i64[1] - a1->i64[0]) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    abort();
  v5 = a1[1].i64[0] - a1->i64[0];
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  else
    v6 = v3;
  v23 = a1 + 1;
  if (v6 >> 60)
    sub_1C4764EE4();
  v8 = (char *)operator new(16 * v6);
  v9 = &v8[16 * v2];
  v10 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v9 = v10;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v13 = vdupq_n_s64(v11);
    v14 = &v8[16 * v2];
  }
  else
  {
    v14 = &v8[16 * v2];
    do
    {
      v15 = *(_QWORD *)(v11 - 16);
      v11 -= 16;
      *((_QWORD *)v14 - 2) = v15;
      v14 -= 16;
      v16 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      *((_QWORD *)v14 + 1) = v16;
    }
    while (v11 != v12);
    v13 = *a1;
  }
  v17 = v9 + 16;
  a1->i64[0] = (uint64_t)v14;
  a1->i64[1] = (uint64_t)(v9 + 16);
  v21 = v13;
  v18 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[16 * v6];
  v22 = v18;
  v20 = v13.i64[0];
  sub_1C6185EF0((uint64_t)&v20);
  return v17;
}

_QWORD *llvm::CallGraphSCC::ReplaceNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *__dst;

  v3 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  do
  {
    v5 = v3;
    v6 = *(_QWORD *)(v4 + 8 * v3++);
  }
  while (v6 != a2);
  v7 = (uint64_t *)(v4 + 8 * v5);
  if (a3)
  {
    *v7 = a3;
  }
  else
  {
    v13 = a2;
    __dst = v7;
    v9 = v7 + 1;
    v12 = a1;
    v10 = *(_BYTE **)(a1 + 24);
    v11 = v10 - v9;
    if (v10 != v9)
      memmove(__dst, v9, v10 - v9);
    a2 = v13;
    a1 = v12;
    a3 = 0;
    *(_QWORD *)(v12 + 24) = (char *)__dst + v11;
  }
  return sub_1C4DE2AA0(*(int32x2_t **)(a1 + 8), a2, a3);
}

_QWORD *sub_1C4DE2AA0(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v5;
  int32x2_t *v6;
  __int32 v7;
  __int32 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *result;
  uint64_t v15;
  __int32 v16;
  __int32 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a3;
  v35 = a2;
  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1[3].i32[0];
  if (v7)
  {
    v8 = v7 - 1;
    v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = *(_QWORD *)&v5 + 16 * v9;
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 == a2)
    {
      v12 = *(_DWORD *)(v10 + 8);
      goto LABEL_4;
    }
    v21 = 0;
    v22 = 1;
    while (v11 != -4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v11 == -8192;
      if (v23)
        v21 = (_QWORD *)v10;
      v24 = v9 + v22++;
      v9 = v24 & v8;
      v10 = *(_QWORD *)&v5 + 16 * v9;
      v11 = *(_QWORD *)v10;
      if (*(_QWORD *)v10 == a2)
      {
        v12 = *(_DWORD *)(v10 + 8);
        goto LABEL_35;
      }
    }
    if (v21)
      v31 = v21;
    else
      v31 = (_QWORD *)v10;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_1C4DE3FA0((uint64_t)&a1[1], (uint64_t)&v35, &v35, v31);
  v12 = 0;
  *v32 = v35;
  *((_DWORD *)v32 + 2) = 0;
  v5 = a1[1];
  v7 = a1[3].i32[0];
LABEL_35:
  if (!v7)
  {
    v33 = 0;
    goto LABEL_40;
  }
  v8 = v7 - 1;
LABEL_4:
  v13 = v8 & ((a3 >> 4) ^ (a3 >> 9));
  result = (_QWORD *)(*(_QWORD *)&v5 + 16 * v13);
  v15 = *result;
  if (*result == a3)
    goto LABEL_5;
  v25 = 0;
  v26 = 1;
  while (v15 != -4096)
  {
    if (v25)
      v27 = 0;
    else
      v27 = v15 == -8192;
    if (v27)
      v25 = result;
    v28 = v13 + v26++;
    v13 = v28 & v8;
    result = (_QWORD *)(*(_QWORD *)&v5 + 16 * v13);
    v15 = *result;
    if (*result == a3)
      goto LABEL_5;
  }
  if (v25)
    v33 = v25;
  else
    v33 = result;
LABEL_40:
  result = sub_1C4DE3FA0((uint64_t)v6, (uint64_t)&v34, &v34, v33);
  *result = v34;
  *((_DWORD *)result + 2) = 0;
  v5 = *v6;
LABEL_5:
  *((_DWORD *)result + 2) = v12;
  v16 = a1[3].i32[0];
  if (v16)
  {
    v17 = v16 - 1;
    LODWORD(v18) = ((v35 >> 4) ^ (v35 >> 9)) & (v16 - 1);
    v19 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v18);
    v20 = *v19;
    if (v35 == *v19)
    {
LABEL_7:
      *v19 = -8192;
      a1[2] = vadd_s32(a1[2], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v29 = 1;
      while (v20 != -4096)
      {
        v30 = v18 + v29++;
        v18 = v30 & v17;
        v20 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v18);
        if (v35 == v20)
        {
          v19 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v18);
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::CallGraphSCCPass::createPrinterPass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;

  v5 = operator new();
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = &unk_1EF8EFBCA;
  *(_DWORD *)(v5 + 24) = 3;
  *(_QWORD *)v5 = off_1E81356F8;
  v6 = (_BYTE *)(v5 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1C47EBC30(v6, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a3;
    *(_QWORD *)(v5 + 48) = *(_QWORD *)(a3 + 16);
  }
  *(_QWORD *)(v5 + 56) = a2;
  return v5;
}

uint64_t llvm::CallGraphSCCPass::skipSCC(uint64_t a1, uint64_t ****a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  char v9;
  uint64_t v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t ***v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type size;
  std::string v31;

  v4 = ***a2;
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 2672);
  if (!v6)
  {
    if (!atomic_load((unint64_t *)&llvm::OptBisector))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1C6240904, (void (*)(void *))sub_1C6240948);
    v6 = llvm::OptBisector;
    *(_QWORD *)(v5 + 2672) = llvm::OptBisector;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
    return 0;
  *((_BYTE *)&v31.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v31, "SCC (");
  v7 = (uint64_t *)a2[2];
  v8 = (uint64_t **)a2[3];
  if (v7 != (uint64_t *)v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *v7;
      v11 = (v9 & 1) != 0 ? 2 : 0;
      v12 = (v9 & 1) != 0 ? ", " : 0;
      std::string::append(&v31, v12, v11);
      v13 = *(uint64_t ****)(v10 + 8);
      if (v13)
        break;
      std::string::append(&v31, "<<null function>>");
LABEL_23:
      ++v7;
      v9 = 1;
      if (v7 == (uint64_t *)v8)
        goto LABEL_27;
    }
    if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
    {
      v24 = 0;
      v23 = &byte_1C871356D;
      goto LABEL_22;
    }
    v14 = ***v13;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
      v18 = (uint64_t ****)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == v13)
      {
LABEL_21:
        v22 = v18[1];
        v25 = (std::string::size_type)*v22;
        v23 = (const std::string::value_type *)(v22 + 2);
        v24 = v25;
LABEL_22:
        std::string::append(&v31, v23, v24);
        goto LABEL_23;
      }
      v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == v13)
        {
          v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_21;
        }
      }
    }
    v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_21;
  }
LABEL_27:
  std::string::append(&v31, ")");
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v31;
  else
    v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v31.__r_.__value_.__l.__size_;
  v26 = (*(unsigned int (**)(uint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v6 + 16))(v6, a1, v27, size) ^ 1;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return v26;
}

uint64_t sub_1C4DE2F5C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "DummyCGSCCPass";
  *(_QWORD *)(v2 + 8) = 14;
  *(_QWORD *)(v2 + 16) = "DummyCGSCCPass";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &llvm::DummyCGSCCPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::DummyCGSCCPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4DE2FE8(uint64_t a1)
{
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C4DE3010(uint64_t a1)
{
  llvm::PMDataManager::~PMDataManager((llvm::PMDataManager *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4DE304C()
{
  return "CallGraph Pass Manager";
}

void *sub_1C4DE305C(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::CallGraphWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DE3090(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C4DE3098(uint64_t a1, int a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::Pass *v9;

  v4 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v5 = llvm::raw_ostream::indent(v4, 2 * a2);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0x1BuLL)
  {
    qmemcpy(v6, "Call Graph SCC Pass Manager\n", 28);
    *((_QWORD *)v5 + 4) += 28;
  }
  else
  {
    llvm::raw_ostream::write(v5, "Call Graph SCC Pass Manager\n", 0x1CuLL);
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v7 = 0;
    v8 = (a2 + 1);
    do
    {
      v9 = *(llvm::Pass **)(*(_QWORD *)(a1 + 48) + 8 * v7);
      (*(void (**)(llvm::Pass *, uint64_t))(*(_QWORD *)v9 + 128))(v9, v8);
      llvm::PMDataManager::dumpLastUses((llvm::PMDataManager *)(a1 + 32), v9, v8);
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 56));
  }
}

uint64_t sub_1C4DE316C(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  llvm *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const void ****v17;
  uint64_t v18;
  char ***v19;
  char ***v20;
  char v21;
  llvm::Function *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Function **v27;
  llvm::Function *v28;
  int v29;
  int v30;
  llvm::Function *v31;
  char *v32;
  size_t v33;
  size_t v34;
  llvm::Pass *v35;
  llvm::Timer *v36;
  char v37;
  void (*v38)(void);
  llvm::Timer *v39;
  llvm::Module *v40;
  char v41;
  llvm::Pass *v42;
  llvm::Timer *PassTimer;
  llvm::Timer *v44;
  char v45;
  unsigned int inited;
  unsigned int InstructionCount;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v62;
  int v63;
  int v64;
  llvm::Module **v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  void *v70;
  char ***v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  void *v77[2];
  void *v78[2];
  __int128 v79;
  void *v80[2];
  uint64_t v81;
  void *__p;
  uint64_t v83;
  _QWORD v84[8];
  _BYTE *v85;
  uint64_t v86;
  _BYTE v87[16];
  _BYTE *v88;
  uint64_t v89;
  _BYTE v90[16];
  char *v91;
  uint64_t v92;
  char v93;
  uint64_t v94;

  v1 = a1;
  v94 = *MEMORY[0x1E0C80C00];
  v2 = **(void ****)(a1 + 8);
  do
  {
    v3 = *v2;
    v2 += 2;
  }
  while (v3 != &llvm::CallGraphWrapperPass::ID);
  v65 = *(llvm::Module ***)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v2 - 1) + 96))(*(v2 - 1), &llvm::CallGraphWrapperPass::ID)+ 32);
  v4 = *(unsigned int *)(v1 + 56);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 8 * v4;
    do
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 48) + v5) + 112))(*(_QWORD *)(*(_QWORD *)(v1 + 48) + v5));
      if (v8)
        v9 = (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)(v8 - 32) + 24))(v8 - 32, *v65);
      else
        v9 = (*(uint64_t (**)(_QWORD, llvm::Module **))(**(_QWORD **)(*(_QWORD *)(v1 + 48) + v5) + 136))(*(_QWORD *)(*(_QWORD *)(v1 + 48) + v5), v65);
      v6 |= v9;
      v5 += 8;
    }
    while (v7 != v5);
  }
  else
  {
    v6 = 0;
  }
  v10 = (uint64_t)v65[10];
  LODWORD(v73) = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  *(_OWORD *)v77 = 0u;
  *(_OWORD *)v78 = 0u;
  v79 = 0u;
  *(_OWORD *)v80 = 0u;
  v81 = 0;
  sub_1C4DE3A20((int *)&v73, v10);
  sub_1C4DE3CBC(&v73);
  v69[0] = v65;
  v69[1] = &v73;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v11 = (char *)v78[1];
  v12 = (char *)v79;
  if (v78[1] != (void *)v79)
  {
    v13 = (llvm *)(v1 + 32);
    v67 = v1;
    do
    {
      sub_1C4DE4490(&v70, v11, v12, (v12 - v11) >> 3);
      sub_1C4DE3CBC(&v73);
      v14 = 0;
      do
      {
        v68 = *(unsigned int *)(v1 + 56);
        if (!(_DWORD)v68)
          break;
        v62 = v14;
        v63 = v6;
        v15 = 0;
        v66 = 0;
        v64 = 0;
        v16 = 1;
        do
        {
          v17 = *(const void *****)(*(_QWORD *)(v1 + 48) + 8 * v15);
          if (dword_1ED830898 >= 3)
          {
            __p = 0;
            v83 = 0;
            v84[0] = 0;
            llvm::PMDataManager::dumpPassInfo(v13, (uint64_t)v17, 0, 7, &__p, 0);
            if (SHIBYTE(v84[0]) < 0)
              operator delete(__p);
            if (dword_1ED830898 >= 4)
            {
              __p = v84;
              v83 = 0x800000000;
              v85 = v87;
              v86 = 0x200000000;
              v88 = v90;
              v89 = 0x200000000;
              v91 = &v93;
              v92 = 0;
              v93 = 0;
              ((void (*)(const void ****, void **))(*v17)[10])(v17, &__p);
              llvm::PMDataManager::dumpAnalysisUsage(v13, "Required", 8uLL, (unint64_t)v17, (uint64_t)&__p);
              sub_1C5408458((uint64_t)&__p);
            }
          }
          llvm::PMDataManager::initializeAnalysisImpl((llvm::PMTopLevelManager **)v13, v17);
          if (!((uint64_t (*)(const void ****))(*v17)[14])(v17))
          {
            v40 = *v65;
            if (!(_BYTE)v16)
              v64 |= sub_1C4DE45CC((char ***)v70, v71, (uint64_t)v65);
            __p = 0;
            v83 = 0;
            v84[0] = 0x1000000000;
            v41 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(**(_QWORD **)v40 + 72)
                                                                           + 24))(*(_QWORD *)(**(_QWORD **)v40 + 72), "size-info", 9);
            PassTimer = (llvm::Timer *)llvm::getPassTimer((llvm *)v17, v42);
            v44 = PassTimer;
            if (PassTimer)
            {
              llvm::Timer::startTimer(PassTimer);
              if ((v41 & 1) != 0)
                goto LABEL_65;
LABEL_51:
              v45 = ((uint64_t (*)(const void ****, _QWORD *))(*v17)[18])(v17, v69);
            }
            else
            {
              if ((v41 & 1) == 0)
                goto LABEL_51;
LABEL_65:
              inited = llvm::PMDataManager::initSizeRemarkInfo((uint64_t)v13, (uint64_t)v40, (uint64_t)&__p);
              v45 = ((uint64_t (*)(const void ****, _QWORD *))(*v17)[18])(v17, v69);
              InstructionCount = llvm::Module::getInstructionCount(v40);
              if (InstructionCount != inited)
                llvm::PMDataManager::emitInstrCountChangedRemark((uint64_t)v13, (uint64_t)v17, (uint64_t)v40, InstructionCount - (unint64_t)inited, inited, (uint64_t)&__p, 0);
            }
            if (v44)
              llvm::Timer::stopTimer(v44);
            if (HIDWORD(v83) && (_DWORD)v83)
            {
              v48 = 0;
              v49 = 8 * v83;
              do
              {
                v50 = *(_QWORD *)((char *)__p + v48);
                if (v50 != -8 && v50 != 0)
                  MEMORY[0x1CAA32FB4]();
                v48 += 8;
              }
              while (v49 != v48);
            }
            free(__p);
            v16 = 1;
            if ((v45 & 1) != 0)
              goto LABEL_56;
LABEL_60:
            if (dword_1ED830898 >= 4)
            {
              __p = v84;
              v83 = 0x800000000;
              v85 = v87;
              v86 = 0x200000000;
              v88 = v90;
              v89 = 0x200000000;
              v91 = &v93;
              v92 = 0;
              v93 = 0;
              ((void (*)(const void ****, void **))(*v17)[10])(v17, &__p);
              llvm::PMDataManager::dumpAnalysisUsage(v13, "Preserved", 9uLL, (unint64_t)v17, (uint64_t)&v88);
              sub_1C5408458((uint64_t)&__p);
            }
            goto LABEL_62;
          }
          v18 = v16;
          v20 = (char ***)v70;
          v19 = v71;
          if (v70 == v71)
          {
            v1 = v67;
            v16 = v18;
            goto LABEL_60;
          }
          v21 = 0;
          do
          {
            v22 = (llvm::Function *)(*v20)[1];
            if (!v22)
              goto LABEL_38;
            if ((*((_BYTE *)v22 + 23) & 0x10) != 0)
            {
              v23 = ***(_QWORD ***)v22;
              v24 = *(_QWORD *)(v23 + 152);
              v25 = *(unsigned int *)(v23 + 168);
              if (!(_DWORD)v25)
                goto LABEL_32;
              LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
              v27 = (llvm::Function **)(v24 + 16 * v26);
              v28 = *v27;
              if (*v27 != v22)
              {
                v29 = 1;
                while (v28 != (llvm::Function *)-4096)
                {
                  v30 = v26 + v29++;
                  v26 = v30 & (v25 - 1);
                  v28 = *(llvm::Function **)(v24 + 16 * v26);
                  if (v28 == v22)
                  {
                    v27 = (llvm::Function **)(v24 + 16 * v26);
                    goto LABEL_33;
                  }
                }
LABEL_32:
                v27 = (llvm::Function **)(v24 + 16 * v25);
              }
LABEL_33:
              v31 = v27[1];
              v34 = *(_QWORD *)v31;
              v32 = (char *)v31 + 16;
              v33 = v34;
              goto LABEL_34;
            }
            v33 = 0;
            v32 = &byte_1C871356D;
LABEL_34:
            llvm::PMDataManager::dumpPassInfo(v13, (uint64_t)v17, 0, 3, v32, v33);
            v36 = (llvm::Timer *)llvm::getPassTimer((llvm *)v17, v35);
            if (v36)
            {
              v39 = v36;
              llvm::Timer::startTimer(v36);
              v37 = llvm::FPPassManager::runOnFunction((llvm::FPPassManager *)v17, v22);
              llvm::Timer::stopTimer(v39);
            }
            else
            {
              v37 = llvm::FPPassManager::runOnFunction((llvm::FPPassManager *)v17, v22);
            }
            v21 |= v37;
            v38 = *(void (**)(void))(***(_QWORD ***)v22 + 136);
            if (v38)
              v38();
LABEL_38:
            ++v20;
          }
          while (v20 != v19);
          if ((v21 & 1 & (v18 != 0)) != 0)
            v16 = 0;
          else
            v16 = v18;
          v1 = v67;
          if ((v21 & 1) == 0)
            goto LABEL_60;
LABEL_56:
          llvm::PMDataManager::dumpPassInfo(v13, (uint64_t)v17, 1, 7, "", 0);
          if (dword_1ED830898 >= 4)
          {
            __p = v84;
            v83 = 0x800000000;
            v85 = v87;
            v86 = 0x200000000;
            v88 = v90;
            v89 = 0x200000000;
            v91 = &v93;
            v92 = 0;
            v93 = 0;
            ((void (*)(const void ****, void **))(*v17)[10])(v17, &__p);
            llvm::PMDataManager::dumpAnalysisUsage(v13, "Preserved", 9uLL, (unint64_t)v17, (uint64_t)&v88);
            sub_1C5408458((uint64_t)&__p);
          }
          llvm::PMDataManager::removeNotPreservedAnalysis(v13, (llvm::Pass *)v17);
          v66 = 1;
LABEL_62:
          llvm::PMDataManager::recordAvailableAnalysis(v13, (llvm::Pass *)v17);
          llvm::PMDataManager::removeDeadPasses((uint64_t)v13, (uint64_t)v17, "", 0, 7);
          ++v15;
        }
        while (v15 != v68);
        if ((_BYTE)v16)
        {
          v52 = v62;
          v53 = v63;
          v54 = v64;
        }
        else
        {
          v53 = v63;
          v54 = v64 | sub_1C4DE45CC((char ***)v70, v71, (uint64_t)v65);
          v52 = v62;
        }
        v6 = v53 | v66;
        if (v52 >= dword_1ED82D0B0)
          break;
        v14 = v52 + 1;
      }
      while (v54);
      v11 = (char *)v78[1];
      v12 = (char *)v79;
    }
    while (v78[1] != (void *)v79);
  }
  v55 = *(unsigned int *)(v1 + 56);
  if ((_DWORD)v55)
  {
    v56 = 0;
    v57 = 0;
    v58 = 8 * v55;
    do
    {
      v59 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 48) + v56) + 112))(*(_QWORD *)(*(_QWORD *)(v1 + 48) + v56));
      if (v59)
        v60 = (*(uint64_t (**)(uint64_t, llvm::Module *))(*(_QWORD *)(v59 - 32) + 32))(v59 - 32, *v65);
      else
        v60 = (*(uint64_t (**)(_QWORD, llvm::Module **))(**(_QWORD **)(*(_QWORD *)(v1 + 48) + v56) + 152))(*(_QWORD *)(*(_QWORD *)(v1 + 48) + v56), v65);
      v57 |= v60;
      v56 += 8;
    }
    while (v58 != v56);
  }
  else
  {
    v57 = 0;
  }
  if (v70)
  {
    v71 = (char ***)v70;
    operator delete(v70);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (v78[1])
  {
    *(void **)&v79 = v78[1];
    operator delete(v78[1]);
  }
  if (v77[0])
  {
    v77[1] = v77[0];
    operator delete(v77[0]);
  }
  MEMORY[0x1CAA32FB4](v74, 8);
  return (v6 | v57) & 1;
}

uint64_t sub_1C4DE39AC()
{
  return 2;
}

void sub_1C4DE39B4(llvm::PMDataManager *a1)
{
  llvm::Pass *v1;

  v1 = (llvm::PMDataManager *)((char *)a1 - 32);
  llvm::PMDataManager::~PMDataManager(a1);
  llvm::Pass::~Pass(v1);
}

void sub_1C4DE39D8(llvm::PMDataManager *a1)
{
  llvm::Pass *v1;

  v1 = (llvm::PMDataManager *)((char *)a1 - 32);
  llvm::PMDataManager::~PMDataManager(a1);
  llvm::Pass::~Pass(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4DE3A10(uint64_t a1)
{
  return a1 - 32;
}

uint64_t sub_1C4DE3A18()
{
  return 2;
}

void sub_1C4DE3A20(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;

  v42 = a2;
  v3 = *a1 + 1;
  *a1 = v3;
  v6 = *((_QWORD *)a1 + 1);
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = a1[6];
  if (v7)
  {
    v8 = v7 - 1;
    v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = (_QWORD *)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_3;
    v37 = 0;
    v38 = 1;
    while (v11 != -4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v11 == -8192;
      if (v39)
        v37 = v10;
      v40 = v9 + v38++;
      v9 = v40 & v8;
      v10 = (_QWORD *)(v5 + 16 * (v40 & v8));
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_3;
    }
    if (v37)
      v41 = v37;
    else
      v41 = v10;
  }
  else
  {
    v41 = 0;
  }
  v10 = sub_1C4DE3FA0(v4, (uint64_t)&v42, &v42, v41);
  *v10 = v42;
  *((_DWORD *)v10 + 2) = 0;
LABEL_3:
  *((_DWORD *)v10 + 2) = v3;
  v13 = (_QWORD *)*((_QWORD *)a1 + 5);
  v12 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v13 < v12)
  {
    *v13 = v42;
    v21 = v13 + 1;
  }
  else
  {
    v14 = (_QWORD *)*((_QWORD *)a1 + 4);
    v15 = v13 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_51;
    v17 = v12 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        goto LABEL_52;
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[8 * v15];
    *(_QWORD *)v20 = v42;
    v21 = v20 + 8;
    if (v13 != v14)
    {
      do
      {
        v22 = *--v13;
        *((_QWORD *)v20 - 1) = v22;
        v20 -= 8;
      }
      while (v13 != v14);
      v13 = (_QWORD *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v20;
    *((_QWORD *)a1 + 5) = v21;
    *((_QWORD *)a1 + 6) = &v19[8 * v18];
    if (v13)
      operator delete(v13);
  }
  *((_QWORD *)a1 + 5) = v21;
  v23 = v42;
  v24 = *(_QWORD *)(v42 + 16);
  v25 = *a1;
  v27 = (char *)*((_QWORD *)a1 + 11);
  v26 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v27 < v26)
  {
    *(_QWORD *)v27 = v42;
    *((_QWORD *)v27 + 1) = v24;
    *((_QWORD *)v27 + 2) = sub_1C4DE4264;
    *((_DWORD *)v27 + 6) = v25;
    v28 = v27 + 32;
    goto LABEL_20;
  }
  v29 = (_BYTE *)*((_QWORD *)a1 + 10);
  v30 = (v27 - v29) >> 5;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 59)
LABEL_51:
    abort();
  v32 = v26 - (_QWORD)v29;
  if (v32 >> 4 > v31)
    v31 = v32 >> 4;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0)
    v33 = 0x7FFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (!v33)
  {
    v34 = 0;
    goto LABEL_30;
  }
  if (v33 >> 59)
LABEL_52:
    sub_1C4764EE4();
  v34 = (char *)operator new(32 * v33);
LABEL_30:
  v35 = &v34[32 * v30];
  *(_QWORD *)v35 = v23;
  *((_QWORD *)v35 + 1) = v24;
  *((_QWORD *)v35 + 2) = sub_1C4DE4264;
  *((_DWORD *)v35 + 6) = v25;
  v28 = v35 + 32;
  if (v27 != v29)
  {
    do
    {
      v36 = *((_OWORD *)v27 - 2);
      *(_OWORD *)(v35 - 20) = *(_OWORD *)(v27 - 20);
      *((_OWORD *)v35 - 2) = v36;
      v35 -= 32;
      v27 -= 32;
    }
    while (v27 != v29);
    v27 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v35;
  *((_QWORD *)a1 + 11) = v28;
  *((_QWORD *)a1 + 12) = &v34[32 * v33];
  if (v27)
    operator delete(v27);
LABEL_20:
  *((_QWORD *)a1 + 11) = v28;
}

_QWORD *sub_1C4DE3CBC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;

  result[8] = result[7];
  if (result[10] != result[11])
  {
    v1 = (uint64_t)result;
    v2 = (uint64_t)(result + 1);
    do
    {
      sub_1C4DE426C(v1);
      v41 = 0;
      v4 = *(_QWORD *)(v1 + 80);
      v3 = *(_QWORD *)(v1 + 88);
      v5 = *(_QWORD *)(v3 - 32);
      v41 = v5;
      v6 = *(_DWORD *)(v3 - 8);
      *(_QWORD *)(v1 + 88) = v3 - 32;
      if (v4 != v3 - 32 && *(_DWORD *)(v3 - 40) > v6)
        *(_DWORD *)(v3 - 40) = v6;
      v7 = *(_DWORD *)(v1 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 8);
        v9 = v7 - 1;
        v10 = v9 & ((v5 >> 4) ^ (v5 >> 9));
        result = (_QWORD *)(v8 + 16 * v10);
        v11 = *result;
        if (v5 == *result)
          goto LABEL_21;
        v12 = 0;
        v13 = 1;
        while (v11 != -4096)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -8192;
          if (v14)
            v12 = result;
          v15 = v10 + v13++;
          v10 = v15 & v9;
          result = (_QWORD *)(v8 + 16 * v10);
          v11 = *result;
          if (v5 == *result)
            goto LABEL_21;
        }
        if (v12)
          v16 = v12;
        else
          v16 = result;
      }
      else
      {
        v16 = 0;
      }
      result = sub_1C4DE3FA0(v2, (uint64_t)&v41, &v41, v16);
      *result = v41;
      *((_DWORD *)result + 2) = 0;
LABEL_21:
      if (v6 == *((_DWORD *)result + 2))
      {
        v17 = *(_QWORD **)(v1 + 64);
        while (1)
        {
          v18 = *(_QWORD *)(v1 + 40);
          v19 = *(_QWORD *)(v1 + 72);
          if ((unint64_t)v17 >= v19)
          {
            v21 = *(_QWORD **)(v1 + 56);
            v22 = v17 - v21;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              abort();
            v24 = v19 - (_QWORD)v21;
            if (v24 >> 2 > v23)
              v23 = v24 >> 2;
            v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
            if (v25)
            {
              if (v25 >> 61)
                sub_1C4764EE4();
              v26 = (char *)operator new(8 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[8 * v22];
            *(_QWORD *)v27 = *(_QWORD *)(v18 - 8);
            v20 = v27 + 8;
            if (v17 != v21)
            {
              do
              {
                v28 = *--v17;
                *((_QWORD *)v27 - 1) = v28;
                v27 -= 8;
              }
              while (v17 != v21);
              v17 = *(_QWORD **)(v1 + 56);
            }
            *(_QWORD *)(v1 + 56) = v27;
            *(_QWORD *)(v1 + 64) = v20;
            *(_QWORD *)(v1 + 72) = &v26[8 * v25];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *v17 = *(_QWORD *)(v18 - 8);
            v20 = v17 + 1;
          }
          *(_QWORD *)(v1 + 64) = v20;
          *(_QWORD *)(v1 + 40) -= 8;
          v29 = v20 - 1;
          v30 = *(_DWORD *)(v1 + 24);
          if (!v30)
            break;
          v31 = *(_QWORD *)(v1 + 8);
          v32 = *v29;
          v33 = v30 - 1;
          v34 = ((*v29 >> 4) ^ (*v29 >> 9)) & v33;
          result = (_QWORD *)(v31 + 16 * v34);
          v35 = *result;
          if (*v29 != *result)
          {
            v36 = 0;
            v37 = 1;
            while (v35 != -4096)
            {
              if (v36)
                v38 = 0;
              else
                v38 = v35 == -8192;
              if (v38)
                v36 = result;
              v39 = v34 + v37++;
              v34 = v39 & v33;
              result = (_QWORD *)(v31 + 16 * v34);
              v35 = *result;
              if (v32 == *result)
                goto LABEL_58;
            }
            if (v36)
              v40 = v36;
            else
              v40 = result;
            goto LABEL_57;
          }
LABEL_58:
          *((_DWORD *)result + 2) = -1;
          v17 = v20;
          if (v32 == v41)
            return result;
        }
        v40 = 0;
LABEL_57:
        result = sub_1C4DE3FA0(v2, (uint64_t)(v20 - 1), v20 - 1, v40);
        *result = *v29;
        *((_DWORD *)result + 2) = 0;
        v20 = *(_QWORD **)(v1 + 64);
        v32 = *(v20 - 1);
        goto LABEL_58;
      }
    }
    while (*(_QWORD *)(v1 + 80) != *(_QWORD *)(v1 + 88));
  }
  return result;
}

_QWORD *sub_1C4DE3FA0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4DE40D0(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4DE40D0(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4DE40D0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DE4188(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DE4188(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_7;
        }
        if (v11)
          v9 = v11;
      }
LABEL_7:
      *(_QWORD *)v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C4DE4264(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_1C4DE426C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int32x2_t ****v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *****v20;
  int32x2_t ****v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  int32x2_t ****v27;
  char v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(v1 - 24);
  if (v2 != *(_QWORD *)(*(_QWORD *)(v1 - 32) + 24))
  {
    while (1)
    {
      v4 = *(uint64_t (**)(uint64_t *))(v1 - 16);
      *(_QWORD *)(v1 - 24) = v2 + 40;
      LOBYTE(v25) = 0;
      v28 = 0;
      if (*(_BYTE *)(v2 + 24))
        sub_1C4DDDCF8((llvm::ValueHandleBase *)&v25, (_QWORD *)v2);
      v29 = *(_QWORD *)(v2 + 32);
      v5 = v4(&v25);
      if (v28 && v27 != (int32x2_t ****)-8192 && v27 != (int32x2_t ****)-4096 && v27)
      {
        v13 = v25 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8) = v26;
        if (v26)
        {
          *v26 = *v26 & 7 | v13;
        }
        else
        {
          v14 = v27;
          v15 = ***v27;
          v16 = (unint64_t)v15[303];
          if (v16 <= v13)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v13)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v27 >> 4) ^ (v27 >> 9));
              v20 = (int32x2_t *****)(v16 + 16 * v19);
              v21 = *v20;
              if (v27 == *v20)
              {
LABEL_28:
                *v20 = (int32x2_t ****)-8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = v27;
              }
              else
              {
                v22 = 1;
                while (v21 != (int32x2_t ****)-4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(int32x2_t *****)(v16 + 16 * v19);
                  if (v27 == v21)
                  {
                    v20 = (int32x2_t *****)(v16 + 16 * v19);
                    goto LABEL_28;
                  }
                }
              }
              *((_BYTE *)v14 + 17) &= ~1u;
            }
          }
        }
      }
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v7)
        goto LABEL_12;
      LODWORD(v8) = (v7 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      v9 = (uint64_t *)(v6 + 16 * v8);
      v10 = *v9;
      if (v5 != *v9)
        break;
LABEL_13:
      if (v9 == (uint64_t *)(v6 + 16 * v7))
      {
        sub_1C4DE3A20((int *)a1, v5);
        v1 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        v24 = *((_DWORD *)v9 + 2);
        v1 = *(_QWORD *)(a1 + 88);
        if (*(_DWORD *)(v1 - 8) > v24)
          *(_DWORD *)(v1 - 8) = v24;
      }
      v2 = *(_QWORD *)(v1 - 24);
      if (v2 == *(_QWORD *)(*(_QWORD *)(v1 - 32) + 24))
        return;
    }
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (v5 == v10)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_13;
      }
    }
LABEL_12:
    v9 = (uint64_t *)(v6 + 16 * v7);
    goto LABEL_13;
  }
}

_QWORD *sub_1C4DE4490(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      goto LABEL_23;
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61)
LABEL_23:
      abort();
    result = operator new(8 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

uint64_t sub_1C4DE45CC(char ***a1, char ***a2, uint64_t a3)
{
  int v4;
  int v5;
  char **v6;
  char *v7;
  char *v8;
  char *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unsigned int v31;
  int v32;
  char *v34;
  char *v35;
  char *v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  const llvm::Use **v44;
  uint64_t *v45;
  llvm::Value *v46;
  uint64_t **v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  int32x2_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  _BOOL4 v82;
  uint64_t v83;
  char ***v85;
  unsigned int v86;
  int v87;
  char ***v88;
  unsigned int v89;
  int v90;
  char *v91;
  unsigned int v92;
  char *v93;
  char **v94;
  uint64_t **v95;
  unsigned int v96;
  uint64_t v97;
  int32x2_t v98;
  unsigned int v99;
  llvm::CallBase *v100;
  void *v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  _QWORD v107[6];

  v107[4] = *MEMORY[0x1E0C80C00];
  v97 = 0;
  v98 = 0;
  v99 = 0;
  if (a1 == a2)
  {
    v83 = 0;
    LOBYTE(v4) = 0;
    goto LABEL_150;
  }
  v4 = 0;
  v5 = 0;
  v95 = (uint64_t **)(a3 + 8);
  v85 = a2;
  do
  {
    v6 = *a1;
    v7 = (*a1)[1];
    if (!v7)
      goto LABEL_147;
    if (v7[16])
    {
      if (v7[16] == 3 && (*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_147;
    }
    else if (*((char **)v7 + 9) == v7 + 72 && (v7[34] & 0x80) == 0)
    {
      goto LABEL_147;
    }
    v88 = a1;
    v8 = v6[2];
    v94 = v6 + 2;
    v9 = v6[3];
    v90 = v4;
    v87 = v5;
    if (v8 != v9)
    {
      v10 = 0;
      v89 = 0;
      while (1)
      {
        v11 = v8 + 40;
        while (!v8[24])
        {
          --*(_DWORD *)(*((_QWORD *)v8 + 4) + 40);
          v12 = v6[3];
          sub_1C4DDE088((llvm::ValueHandleBase *)v8, (uint64_t *)v12 - 5);
          *((_QWORD *)v8 + 4) = *((_QWORD *)v12 - 1);
          sub_1C4DDDF70((uint64_t)v94, (uint64_t)(v6[3] - 40));
          if (v11 != v9)
          {
            v9 = v6[3];
            if (v8 != v9)
              continue;
          }
          goto LABEL_58;
        }
        v13 = *((_QWORD *)v8 + 2);
        if (!v13)
          break;
        v14 = *(unsigned __int8 *)(v13 + 16);
        if (v14 < 0x1C)
          break;
        v15 = v14 - 33;
        v16 = v15 > 0x33;
        v17 = (1 << v15) & 0x8000000000041;
        if (v16 || v17 == 0)
          break;
        v19 = v99;
        if (v99)
        {
          v20 = (v99 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          v21 = *(_QWORD *)(v97 + 16 * v20);
          if (v13 == v21)
            break;
          v25 = 1;
          while (v21 != -4096)
          {
            v26 = v20 + v25++;
            v20 = v26 & (v99 - 1);
            v21 = *(_QWORD *)(v97 + 16 * v20);
            if (v13 == v21)
              goto LABEL_25;
          }
        }
        v27 = *(_QWORD *)(v13 - 32);
        if (v27 && !*(_BYTE *)(v27 + 16) && *(_QWORD *)(v27 + 24) == *(_QWORD *)(v13 + 72))
        {
          if ((*(_BYTE *)(v27 + 33) & 0x20) != 0)
          {
            v31 = *(_DWORD *)(v27 + 36) - 124;
            v16 = v31 > 4;
            v32 = (1 << v31) & 0x19;
            if (v16 || v32 == 0)
              break;
          }
          if ((*(_BYTE *)(v27 + 33) & 0x20) != 0)
            goto LABEL_31;
        }
        v28 = *((_QWORD *)v8 + 4);
        v105 = 0;
        if ((sub_1C4A5C500(v97, v99, v13, &v105) & 1) == 0)
        {
          if (4 * v98.i32[0] + 4 >= 3 * v19)
          {
            v29 = 2 * v19;
LABEL_45:
            sub_1C4DE4F18((uint64_t)&v97, v29);
            v105 = 0;
            sub_1C4A5C500(v97, v99, v13, &v105);
          }
          else if (v19 + ~v98.i32[0] - v98.i32[1] <= v19 >> 3)
          {
            v29 = v19;
            goto LABEL_45;
          }
          v30 = v105;
          ++v98.i32[0];
          if (*v105 != -4096)
            --v98.i32[1];
          *v105 = v13;
          v30[1] = v28;
        }
LABEL_31:
        v8 = v11;
        if (v11 == v9)
          goto LABEL_58;
      }
LABEL_25:
      v22 = *((_QWORD *)v8 + 4);
      v23 = v89;
      if (!*(_QWORD *)(v22 + 8))
        v23 = v89 + 1;
      v89 = v23;
      if (*(_QWORD *)(v22 + 8))
        ++v10;
      --*(_DWORD *)(v22 + 40);
      v24 = v6[3];
      sub_1C4DDE088((llvm::ValueHandleBase *)v8, (uint64_t *)v24 - 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v24 - 1);
      sub_1C4DDDF70((uint64_t)v94, (uint64_t)(v6[3] - 40));
      if (v11 == v9)
        goto LABEL_58;
      v9 = v6[3];
      v11 = v8;
      goto LABEL_31;
    }
    v89 = 0;
    v10 = 0;
LABEL_58:
    v86 = v10;
    v34 = (char *)*((_QWORD *)v7 + 10);
    v91 = v7 + 72;
    if (v34 == v7 + 72)
    {
      v92 = 0;
      v96 = 0;
      goto LABEL_138;
    }
    v96 = 0;
    v92 = 0;
    do
    {
      v35 = v34 - 24;
      v93 = v34;
      if (!v34)
        v35 = 0;
      v36 = v35 + 40;
      for (i = *((_QWORD *)v35 + 6); (char *)i != v36; i = *(_QWORD *)(i + 8))
      {
        v38 = i - 24;
        if (i)
          v39 = i - 24;
        else
          v39 = 0;
        v40 = *(unsigned __int8 *)(v39 + 16) - 33;
        v16 = v40 > 0x33;
        v41 = (1 << v40) & 0x8000000000041;
        if (v16 || v41 == 0)
          continue;
        v43 = *(_QWORD *)(i - 56);
        if (v43)
        {
          if (!*(_BYTE *)(v43 + 16)
            && *(_QWORD *)(v43 + 24) == *(_QWORD *)(i + 48)
            && (*(_BYTE *)(v43 + 33) & 0x20) != 0)
          {
            continue;
          }
        }
        v105 = v107;
        v106 = 0x400000000;
        llvm::AbstractCallSite::getCallbackUses((_QWORD *)(i - 24), (uint64_t)&v105);
        v44 = (const llvm::Use **)v105;
        v45 = &v105[v106];
        if ((_DWORD)v106)
        {
          do
          {
            llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v100, *v44);
            v46 = sub_1C6185E84(&v100);
            if (v46)
            {
              v104 = (unint64_t)v46;
              *(_QWORD *)&v102 = &v104;
              v47 = sub_1C4DE25A0(v95, &v104, (uint64_t)&std::piecewise_construct, (uint64_t **)&v102) + 5;
              v48 = (uint64_t)*v47;
              if (!*v47)
              {
                v49 = v104;
                v48 = operator new();
                *(_QWORD *)v48 = a3;
                *(_QWORD *)(v48 + 8) = v49;
                *(_QWORD *)(v48 + 24) = 0;
                *(_QWORD *)(v48 + 32) = 0;
                *(_QWORD *)(v48 + 16) = 0;
                *(_DWORD *)(v48 + 40) = 0;
                v50 = (uint64_t)*v47;
                *v47 = (uint64_t *)v48;
                if (v50)
                {
                  sub_1C4DDE2A8((uint64_t)v47, v50);
                  v48 = (uint64_t)*v47;
                }
              }
              v104 = v48;
              v102 = 0u;
              v103 = 0u;
              v51 = v6[3];
              if (v51 >= v6[4])
              {
                v52 = sub_1C4DDDA6C(v94, (uint64_t)&v102, &v104);
              }
              else
              {
                *v51 = 0;
                v51[24] = 0;
                if (BYTE8(v103))
                  sub_1C4DDDCF8((llvm::ValueHandleBase *)v51, &v102);
                *((_QWORD *)v51 + 4) = v48;
                v52 = v51 + 40;
              }
              v6[3] = v52;
              if (BYTE8(v103) && (_QWORD)v103 != -8192 && (_QWORD)v103 != -4096 && (_QWORD)v103)
              {
                v53 = v102 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v102 + 1);
                if (*((_QWORD *)&v102 + 1))
                {
                  **((_QWORD **)&v102 + 1) = **((_QWORD **)&v102 + 1) & 7 | v53;
                }
                else
                {
                  v54 = v103;
                  v55 = ***(int32x2_t ****)v103;
                  v56 = (unint64_t)v55[303];
                  if (v56 <= v53)
                  {
                    v57 = v55[305].u32[0];
                    if (v56 + 16 * v57 > v53)
                    {
                      v58 = v57 - 1;
                      LODWORD(v59) = v58 & ((v103 >> 4) ^ (v103 >> 9));
                      v60 = (uint64_t *)(v56 + 16 * v59);
                      v61 = *v60;
                      if ((_QWORD)v103 == *v60)
                      {
LABEL_102:
                        *v60 = -8192;
                        v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
                        v54 = v103;
                      }
                      else
                      {
                        v62 = 1;
                        while (v61 != -4096)
                        {
                          v63 = v59 + v62++;
                          v59 = v63 & v58;
                          v61 = *(_QWORD *)(v56 + 16 * v59);
                          if ((_QWORD)v103 == v61)
                          {
                            v60 = (uint64_t *)(v56 + 16 * v59);
                            goto LABEL_102;
                          }
                        }
                      }
                      *(_BYTE *)(v54 + 17) &= ~1u;
                    }
                  }
                }
              }
              ++*(_DWORD *)(v104 + 40);
            }
            if (v101 != &v102)
              free(v101);
            ++v44;
          }
          while (v44 != (const llvm::Use **)v45);
          v44 = (const llvm::Use **)v105;
        }
        if (v44 != v107)
          free(v44);
        if (!v99)
          goto LABEL_110;
        LODWORD(v64) = (v99 - 1) & ((v38 >> 4) ^ (v38 >> 9));
        v65 = (uint64_t *)(v97 + 16 * v64);
        v66 = *v65;
        if (v38 != *v65)
        {
          v79 = 1;
          while (v66 != -4096)
          {
            v80 = v64 + v79++;
            v64 = v80 & (v99 - 1);
            v66 = *(_QWORD *)(v97 + 16 * v64);
            if (v38 == v66)
            {
              v65 = (uint64_t *)(v97 + 16 * v64);
              goto LABEL_109;
            }
          }
LABEL_110:
          v67 = *(_QWORD *)(i - 56);
          if (v67 && !*(_BYTE *)(v67 + 16) && *(_QWORD *)(v67 + 24) == *(_QWORD *)(i + 48))
          {
            *(_QWORD *)&v102 = *(_QWORD *)(i - 56);
            v105 = (uint64_t *)&v102;
            v73 = sub_1C4DE25A0(v95, (unint64_t *)&v102, (uint64_t)&std::piecewise_construct, &v105) + 5;
            v68 = (uint64_t)*v73;
            if (!*v73)
            {
              v74 = v102;
              v68 = operator new();
              *(_QWORD *)v68 = a3;
              *(_QWORD *)(v68 + 8) = v74;
              *(_QWORD *)(v68 + 24) = 0;
              *(_QWORD *)(v68 + 32) = 0;
              *(_QWORD *)(v68 + 16) = 0;
              *(_DWORD *)(v68 + 40) = 0;
              v75 = (uint64_t)*v73;
              *v73 = (uint64_t *)v68;
              if (v75)
              {
                sub_1C4DDE2A8((uint64_t)v73, v75);
                v68 = (uint64_t)*v73;
              }
            }
            ++v92;
          }
          else
          {
            v68 = *(_QWORD *)(a3 + 88);
            ++v96;
          }
          sub_1C4DDC318((uint64_t)v6, i - 24, v68);
          continue;
        }
LABEL_109:
        if ((_DWORD)v64 == v99)
          goto LABEL_110;
        v69 = v65[1];
        *v65 = -8192;
        v98 = vadd_s32(v98, (int32x2_t)0x1FFFFFFFFLL);
        v70 = *(_QWORD *)(v69 + 8);
        v71 = *(_QWORD *)(i - 56);
        if (!v71 || *(_BYTE *)(v71 + 16) || *(_QWORD *)(v71 + 24) != *(_QWORD *)(i + 48))
        {
          if (!v70)
            continue;
          v72 = *(_QWORD *)(a3 + 88);
          goto LABEL_120;
        }
        if (v70 != v71)
        {
          *(_QWORD *)&v102 = *(_QWORD *)(i - 56);
          v105 = (uint64_t *)&v102;
          v76 = sub_1C4DE25A0(v95, (unint64_t *)&v102, (uint64_t)&std::piecewise_construct, &v105) + 5;
          v72 = (uint64_t)*v76;
          if (!*v76)
          {
            v77 = v102;
            v72 = operator new();
            *(_QWORD *)v72 = a3;
            *(_QWORD *)(v72 + 8) = v77;
            *(_QWORD *)(v72 + 24) = 0;
            *(_QWORD *)(v72 + 32) = 0;
            *(_QWORD *)(v72 + 16) = 0;
            *(_DWORD *)(v72 + 40) = 0;
            v78 = (uint64_t)*v76;
            *v76 = (uint64_t *)v72;
            if (v78)
            {
              sub_1C4DDE2A8((uint64_t)v76, v78);
              v72 = (uint64_t)*v76;
            }
          }
          v90 |= *(_QWORD *)(v69 + 8) == 0;
LABEL_120:
          llvm::CallGraphNode::replaceCallEdge((llvm::CallGraphNode *)v6, (llvm::CallBase *)(i - 24), (llvm::CallBase *)(i - 24), (llvm::CallGraphNode *)v72);
          continue;
        }
      }
      v34 = (char *)*((_QWORD *)v93 + 1);
    }
    while (v34 != v91);
LABEL_138:
    v5 = v87;
    v82 = v89 > v96 && v86 < v92;
    v4 = v82 | v90;
    if ((~v87 & 0xF) == 0)
      sub_1C61446F0((unsigned int *)&v97);
    a2 = v85;
    a1 = v88;
LABEL_147:
    ++a1;
    ++v5;
  }
  while (a1 != a2);
  v83 = v97;
LABEL_150:
  MEMORY[0x1CAA32FB4](v83, 8);
  return v4 & 1;
}

_QWORD *sub_1C4DE4F18(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DE4FD0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DE4FD0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4A5C500(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C4DE507C(void **this)
{
  *this = off_1E81356F8;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4DE50B8(void **this)
{
  *this = off_1E81356F8;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4DE5108()
{
  return "Print CallGraph IR";
}

void sub_1C4DE5118(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4DE5124(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  llvm::raw_ostream **v10;
  uint64_t ***v11;
  char v12;
  BOOL v13;
  const char *v14;
  size_t v15;
  size_t v16;
  llvm::raw_ostream *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  char *v28;
  size_t v29;
  size_t v30;
  int isFunctionInPrintList;
  char v32;
  BOOL v33;
  const char *v34;
  size_t v35;
  size_t v36;
  llvm::raw_ostream *v37;
  llvm::raw_ostream **v38;
  llvm::raw_ostream *v39;
  char v40;
  int v41;
  const char *v42;
  size_t v43;
  size_t v44;
  llvm::raw_ostream *v45;
  char v46;
  BOOL v47;
  const char *v48;
  size_t v49;
  size_t v50;
  _BYTE *v51;

  v4 = byte_1ED830FC8;
  if (llvm::isFunctionInPrintList("*", 1uLL))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v39 = *(llvm::raw_ostream **)(a1 + 56);
    v38 = (llvm::raw_ostream **)(a1 + 56);
    v37 = v39;
    v10 = v38;
    v40 = *((_BYTE *)v38 - 1);
    v41 = v40;
    if (v40 >= 0)
      v42 = (const char *)(v38 - 3);
    else
      v42 = (const char *)*(v38 - 3);
    v43 = v40 & 0x7F;
    if (v41 >= 0)
      v44 = v43;
    else
      v44 = (size_t)*(v38 - 2);
    llvm::raw_ostream::write(v37, v42, v44);
    v45 = *v38;
    goto LABEL_68;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (v6 != v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = (llvm::raw_ostream **)(a1 + 56);
    while (1)
    {
      v11 = *(uint64_t ****)(*(_QWORD *)v6 + 8);
      if (!v11)
      {
        if (llvm::isFunctionInPrintList("*", 1uLL))
        {
          if (!v9)
          {
            v12 = *(_BYTE *)(a1 + 55);
            v13 = v12 < 0;
            if (v12 >= 0)
              v14 = (const char *)(a1 + 32);
            else
              v14 = *(const char **)(a1 + 32);
            v15 = v12 & 0x7F;
            if (v13)
              v16 = *(_QWORD *)(a1 + 40);
            else
              v16 = v15;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 56), v14, v16);
          }
          v17 = *v10;
          v18 = (void *)*((_QWORD *)*v10 + 4);
          if (*((_QWORD *)*v10 + 3) - (_QWORD)v18 > 0x19uLL)
          {
            qmemcpy(v18, "\nPrinting <null> Function\n", 26);
            *((_QWORD *)v17 + 4) += 26;
          }
          else
          {
            llvm::raw_ostream::write(v17, "\nPrinting <null> Function\n", 0x1AuLL);
          }
          v9 = 1;
        }
        goto LABEL_38;
      }
      if (*((_BYTE *)v11 + 16))
      {
        if (*((_BYTE *)v11 + 16) != 3 || (*((_DWORD *)v11 + 5) & 0x7FFFFFF) != 0)
          goto LABEL_27;
      }
      else if (v11[9] != (uint64_t **)(v11 + 9) || (*((_BYTE *)v11 + 34) & 0x80) != 0)
      {
LABEL_27:
        if ((*((_BYTE *)v11 + 23) & 0x10) != 0)
        {
          v19 = ***v11;
          v20 = *(_QWORD *)(v19 + 152);
          v21 = *(unsigned int *)(v19 + 168);
          if (!(_DWORD)v21)
            goto LABEL_34;
          LODWORD(v22) = (v21 - 1) & ((v11 >> 4) ^ (v11 >> 9));
          v23 = (uint64_t ****)(v20 + 16 * v22);
          v24 = *v23;
          if (*v23 != v11)
          {
            v25 = 1;
            while (v24 != (uint64_t ***)-4096)
            {
              v26 = v22 + v25++;
              v22 = v26 & (v21 - 1);
              v24 = *(uint64_t ****)(v20 + 16 * v22);
              if (v24 == v11)
              {
                v23 = (uint64_t ****)(v20 + 16 * v22);
                goto LABEL_35;
              }
            }
LABEL_34:
            v23 = (uint64_t ****)(v20 + 16 * v21);
          }
LABEL_35:
          v27 = v23[1];
          v30 = (size_t)*v27;
          v28 = (char *)(v27 + 2);
          v29 = v30;
        }
        else
        {
          v29 = 0;
          v28 = &byte_1C871356D;
        }
        isFunctionInPrintList = llvm::isFunctionInPrintList(v28, v29);
        v8 |= isFunctionInPrintList;
        if (!v4 && isFunctionInPrintList)
        {
          if (!v9)
          {
            v32 = *(_BYTE *)(a1 + 55);
            v33 = v32 < 0;
            if (v32 >= 0)
              v34 = (const char *)(a1 + 32);
            else
              v34 = *(const char **)(a1 + 32);
            v35 = v32 & 0x7F;
            if (v33)
              v36 = *(_QWORD *)(a1 + 40);
            else
              v36 = v35;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 56), v34, v36);
          }
          llvm::Function::print((llvm::Function *)v11, *v10, 0, 0, 0);
          v9 = 1;
          v8 = 1;
        }
      }
LABEL_38:
      v6 += 8;
      if (v6 == v7)
      {
        if (((v4 != 0) & v8) != 0)
        {
          if (!v9)
          {
            v46 = *(_BYTE *)(a1 + 55);
            v47 = v46 < 0;
            if (v46 >= 0)
              v48 = (const char *)(a1 + 32);
            else
              v48 = *(const char **)(a1 + 32);
            v49 = v46 & 0x7F;
            if (v47)
              v50 = *(_QWORD *)(a1 + 40);
            else
              v50 = v49;
            llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 56), v48, v50);
          }
          v45 = *v10;
LABEL_68:
          v51 = (_BYTE *)*((_QWORD *)v45 + 4);
          if (*((_BYTE **)v45 + 3) == v51)
          {
            llvm::raw_ostream::write(v45, "\n", 1uLL);
          }
          else
          {
            *v51 = 10;
            ++*((_QWORD *)v45 + 4);
          }
          llvm::Module::print(**(const std::string ***)a2, *v10, 0, 0, 0);
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1C4DE5454()
{
  int v1;
  int *v2;
  int v3;

  v3 = 2;
  v1 = 4;
  v2 = &v1;
  sub_1C6186240((uint64_t)&llvm::MaxDevirtIterations, "max-devirt-iterations", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::MaxDevirtIterations, &dword_1C475E000);
}

void sub_1C4DE54C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  std::string *p_dst;
  uint64_t *v8;
  std::string::size_type *v9;
  std::string::size_type v10;
  char v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  std::string *v18;
  uint64_t v19;
  llvm *v20;
  llvm::raw_ostream *v21;
  void *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  _WORD v25[20];
  uint64_t *v26;
  std::string __dst;
  _DWORD v28[4];
  std::string __p;
  _QWORD v30[10];
  _BYTE v31[90];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (byte_1ED7F0E9F >= 0)
    v6 = byte_1ED7F0E9F & 0x7F;
  else
    v6 = qword_1ED7F0E90;
  if (v6)
  {
    p_dst = &__dst;
    sub_1C484371C((uint64_t)&__dst, v6 + 14);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (byte_1ED7F0E9F >= 0)
      v8 = &qword_1ED7F0E88;
    else
      v8 = (uint64_t *)qword_1ED7F0E88;
    v9 = (std::string::size_type *)memmove(p_dst, v8, v6);
    strcpy((char *)p_dst + v6, ".callgraph.dot");
    __p = __dst;
  }
  else
  {
    if (*(char *)(a1 + 191) < 0)
      sub_1C47EBC30(&__dst, *(void **)(a1 + 168), *(_QWORD *)(a1 + 176));
    else
      __dst = *(std::string *)(a1 + 168);
    v9 = (std::string::size_type *)std::string::append(&__dst, ".callgraph.dot");
    v10 = *v9;
    *(_QWORD *)v31 = v9[1];
    *(_QWORD *)&v31[7] = *(std::string::size_type *)((char *)v9 + 15);
    v11 = *((_BYTE *)v9 + 23);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    __p.__r_.__value_.__r.__words[0] = v10;
    __p.__r_.__value_.__l.__size_ = *(_QWORD *)v31;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v31[7];
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v11;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v12 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 8)
  {
    *(_BYTE *)(v13 + 8) = 39;
    *(_QWORD *)v13 = *(_QWORD *)"Writing '";
    *((_QWORD *)v12 + 4) += 9;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, "Writing '", 9uLL);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v16 = llvm::raw_ostream::write(v12, (const char *)p_p, size);
  v17 = (_DWORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 3uLL)
  {
    *v17 = 774778407;
    *((_QWORD *)v16 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v16, "'...", 4uLL);
  }
  v28[0] = 0;
  std::system_category();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &__p;
  else
    v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v19 = __p.__r_.__value_.__l.__size_;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&__dst, v18, v19, (uint64_t)v28, 1);
  llvm::CallGraph::CallGraph((llvm::CallGraph *)v31, (llvm::Module *)a1);
  v20 = (llvm *)sub_1C4DE69F0((uint64_t)v30, a1, (uint64_t)v31, a2, a3);
  if (v28[0])
  {
    v21 = (llvm::raw_ostream *)llvm::errs(v20);
    v22 = (void *)*((_QWORD *)v21 + 4);
    if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 0x20uLL)
    {
      qmemcpy(v22, "  error opening file for writing!", 33);
      *((_QWORD *)v21 + 4) += 33;
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v26 = v30;
    v25[16] = 257;
    v21 = sub_1C4DE5D08((llvm::raw_ostream *)&__dst, &v26, 0, (llvm::Twine *)v25);
  }
  v23 = (llvm::raw_ostream *)llvm::errs(v21);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if (*((_BYTE **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, "\n", 1uLL);
  }
  else
  {
    *v24 = 10;
    ++*((_QWORD *)v23 + 4);
  }
  sub_1C61864E4(v30);
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)v31);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C4DE5830(llvm::Module *a1, uint64_t a2, uint64_t a3)
{
  llvm *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  void **v9;
  size_t v10;
  llvm::raw_ostream *v11;
  void *v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  __int128 *v18;
  std::string *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t *v23;
  std::string v24;
  _BYTE v25[96];
  void *__p[2];
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  void *v30[2];
  char v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v35[11];

  v35[10] = *MEMORY[0x1E0C80C00];
  llvm::CallGraph::CallGraph((llvm::CallGraph *)v25, a1);
  sub_1C4DE69F0((uint64_t)v35, (uint64_t)a1, (uint64_t)v25, a2, a3);
  sub_1C4DE6F78(&v24, v35[0]);
  v23 = v35;
  v21 = "callgraph";
  v22 = 259;
  v20 = 260;
  v19 = &v24;
  v34 = 0;
  llvm::Twine::str((llvm::Twine *)&v21, v30);
  v29 = 260;
  v28[0] = v30;
  llvm::createGraphFilename((llvm::Twine *)v28, &v34, &v32);
  *(_OWORD *)__p = v32;
  v27 = v33;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  if (v31 < 0)
    operator delete(v30[0]);
  v6 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v28, v34, 1, 0, 0);
  if (v34 == -1)
  {
    v7 = (llvm::raw_ostream *)llvm::errs(v6);
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 0x13)
    {
      *(_DWORD *)(v8 + 16) = 656434540;
      *(_OWORD *)v8 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v7 + 4) += 20;
    }
    else
    {
      v7 = llvm::raw_ostream::write(v7, "error opening file '", 0x14uLL);
    }
    if (v27 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if (v27 >= 0)
      v10 = HIBYTE(v27) & 0x7F;
    else
      v10 = (size_t)__p[1];
    v11 = llvm::raw_ostream::write(v7, (const char *)v9, v10);
    v12 = (void *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 0xEuLL)
    {
      qmemcpy(v12, "' for writing!\n", 15);
      *((_QWORD *)v11 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v11, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v33) = 0;
    LOBYTE(v32) = 0;
  }
  else
  {
    v13 = sub_1C4DE5D08((llvm::raw_ostream *)v28, &v23, 1, (llvm::Twine *)&v19);
    v14 = (llvm::raw_ostream *)llvm::errs(v13);
    v15 = (_QWORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 7uLL)
    {
      *v15 = 0xA202E656E6F6420;
      *((_QWORD *)v14 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v14, " done. \n", 8uLL);
    }
    v32 = *(_OWORD *)__p;
    v33 = v27;
    __p[1] = 0;
    v27 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v28);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  v16 = HIBYTE(v33);
  if (v33 >= 0)
    v17 = HIBYTE(v33) & 0x7F;
  else
    v17 = *((_QWORD *)&v32 + 1);
  if (v17)
  {
    if (v33 >= 0)
      v18 = &v32;
    else
      v18 = (__int128 *)v32;
    llvm::DisplayGraph(v18, v17, 0, 0);
    v16 = HIBYTE(v33);
  }
  if (v16 < 0)
    operator delete((void *)v32);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  sub_1C61864E4(v35);
  llvm::CallGraph::~CallGraph((llvm::CallGraph *)v25);
}

void llvm::initializeCallGraphViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D0F8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DE5B88;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D0F8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DE5B88(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View call graph";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "view-callgraph";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBD0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DE751C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeCallGraphDOTPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D100);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DE5C78;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D100, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DE5C78(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print call graph to 'dot' file";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "dot-callgraph";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBD1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DE7564;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::raw_ostream *sub_1C4DE5D08(llvm::raw_ostream *a1, uint64_t **a2, char a3, llvm::Twine *a4)
{
  uint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v10;
  unint64_t v11;
  std::string *p_dst;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  std::string *v20;
  size_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  llvm::raw_ostream *v27;
  std::string::size_type v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  llvm::raw_ostream *v36;
  const char *v37;
  size_t v38;
  size_t v39;
  const char *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL4 v48;
  BOOL v49;
  int v50;
  void *v51;
  void *v52;
  _WORD *v53;
  std::string *v54;
  size_t v55;
  uint64_t v56;
  void *v57;
  llvm *v58;
  double v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  void *v67;
  std::string::size_type v68;
  _WORD *v69;
  std::string *v70;
  size_t v71;
  void *v72;
  llvm::raw_ostream *v73;
  const char *v74;
  size_t v75;
  _WORD *v76;
  uint64_t v77;
  std::string::size_type v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  BOOL v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _WORD *v89;
  void *v91;
  uint64_t v92;
  char v93;
  llvm::raw_ostream *v94;
  uint64_t **v95;
  unsigned __int8 v96;
  char v97;
  std::string __p;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  int v103;
  std::string *v104;
  void *v105;
  __int128 v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string __dst;

  v4 = a2;
  v94 = a1;
  v95 = a2;
  v97 = a3;
  v96 = 0;
  llvm::Twine::str(a4, &v91);
  sub_1C4DE6F78(&__p, **v4);
  v6 = v93 & 0x7F;
  if (v93 < 0)
    v6 = v92;
  if (v6)
  {
    v7 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v7) > 8)
    {
      *(_BYTE *)(v7 + 8) = 34;
      *(_QWORD *)v7 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    p_p = (std::string *)&v91;
  }
  else
  {
    size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    v10 = *((_QWORD *)a1 + 4);
    v11 = *((_QWORD *)a1 + 3) - v10;
    if (!size)
    {
      if (v11 > 0x11)
      {
        *(_WORD *)(v10 + 16) = 2683;
        *(_OWORD *)v10 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)a1 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(a1, "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_25;
    }
    if (v11 > 8)
    {
      *(_BYTE *)(v10 + 8) = 34;
      *(_QWORD *)v10 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    p_p = &__p;
  }
  llvm::DOT::EscapeString((char *)p_p, &__dst);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v13 = __dst.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a1, (const char *)p_dst, v13);
  v14 = (_DWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v14 > 3uLL)
  {
    *v14 = 175841314;
    *((_QWORD *)a1 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a1, "\" {\n", 4uLL);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_25:
  v15 = v93 & 0x7F;
  if (v93 < 0)
    v15 = v92;
  if (v15)
  {
    v16 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v16 > 7uLL)
    {
      *v16 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    v17 = (std::string *)&v91;
    goto LABEL_37;
  }
  v18 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = __p.__r_.__value_.__l.__size_;
  if (v18)
  {
    v19 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v19 > 7uLL)
    {
      *v19 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    v17 = &__p;
LABEL_37:
    llvm::DOT::EscapeString((char *)v17, &__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__dst;
    else
      v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v20, v21);
    v22 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v22) > 2)
    {
      *(_BYTE *)(v22 + 2) = 10;
      *(_WORD *)v22 = 15138;
      *((_QWORD *)a1 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\";\n", 3uLL);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(a1, (const char *)&__dst, 0);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v23 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v23)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v23 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = (*v4)[1];
  v25 = *(_QWORD **)(v24 + 8);
  v26 = (_QWORD *)(v24 + 16);
  v27 = a1;
  if (v25 != (_QWORD *)(v24 + 16))
  {
    LODWORD(v28) = byte_1ED7F0DC8;
    v27 = a1;
    while (1)
    {
      v29 = (_QWORD *)v25[5];
      if ((_DWORD)v28)
        break;
      v28 = v29[1];
      if (v28)
        goto LABEL_59;
LABEL_172:
      v85 = (_QWORD *)v25[1];
      if (v85)
      {
        do
        {
          v86 = v85;
          v85 = (_QWORD *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (_QWORD *)v25[2];
          v49 = *v86 == (_QWORD)v25;
          v25 = v86;
        }
        while (!v49);
      }
      v25 = v86;
      if (v86 == v26)
        goto LABEL_194;
    }
    v28 = v29[1];
    if (v28)
    {
LABEL_59:
      v30 = *v4;
      v105 = 0;
      v106 = 0uLL;
      if (byte_1ED7F0C48)
      {
        __p.__r_.__value_.__r.__words[0] = v28;
        v58 = (llvm *)sub_1C4DE6D10(v30 + 2, &__p)[1];
        llvm::getHeatColor(v58, v30[5], &__p);
        if ((unint64_t)v58 <= (unint64_t)v30[5] >> 1)
          v59 = 0.0;
        else
          v59 = 1.0;
        llvm::getHeatColor(v59, &__dst);
        std::operator+<char>();
        v60 = std::string::append(&v107, "ff\", style=filled, fillcolor=\"");
        v61 = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v108.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v108.__r_.__value_.__r.__words[2] = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &__p;
        else
          v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v63 = __p.__r_.__value_.__l.__size_;
        v64 = std::string::append(&v108, (const std::string::value_type *)v62, v63);
        v65 = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v109.__r_.__value_.__r.__words[2] = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = std::string::append(&v109, "80\"");
        v67 = (void *)v66->__r_.__value_.__r.__words[0];
        v68 = v66->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v106 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
        *(_QWORD *)&v106 = v68;
        LOBYTE(v68) = *((_BYTE *)&v66->__r_.__value_.__s + 23);
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v105 = v67;
        HIBYTE(v106) = v68;
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      HIBYTE(v106) = 0;
      LOBYTE(v105) = 0;
    }
    v31 = *((_QWORD *)v27 + 4);
    if ((unint64_t)(*((_QWORD *)v27 + 3) - v31) > 4)
    {
      *(_BYTE *)(v31 + 4) = 101;
      *(_DWORD *)v31 = 1685016073;
      *((_QWORD *)v27 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v27, "\tNode", 5uLL);
    }
    llvm::write_hex(v27, (unint64_t)v29, 3, 0, 0);
    v32 = (_QWORD *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v32 > 7uLL)
    {
      *v32 = 0x3D65706168735B20;
      v33 = *((_QWORD *)v27 + 4) + 8;
      *((_QWORD *)v27 + 4) = v33;
    }
    else
    {
      llvm::raw_ostream::write(v27, " [shape=", 8uLL);
      v33 = *((_QWORD *)v27 + 4);
    }
    v34 = v96;
    v35 = *((_QWORD *)v27 + 3) - v33;
    if (v96)
    {
      if (v35 <= 4)
      {
        v36 = v27;
        v37 = "none,";
        v38 = 5;
LABEL_69:
        llvm::raw_ostream::write(v36, v37, v38);
        goto LABEL_70;
      }
      *(_BYTE *)(v33 + 4) = 44;
      *(_DWORD *)v33 = 1701736302;
      v87 = *((_QWORD *)v27 + 4) + 5;
    }
    else
    {
      if (v35 <= 6)
      {
        v36 = v27;
        v37 = "record,";
        v38 = 7;
        goto LABEL_69;
      }
      *(_DWORD *)(v33 + 3) = 744780399;
      *(_DWORD *)v33 = 1868785010;
      v87 = *((_QWORD *)v27 + 4) + 7;
    }
    *((_QWORD *)v27 + 4) = v87;
LABEL_70:
    if (v106 >= 0)
      v39 = HIBYTE(v106) & 0x7F;
    else
      v39 = v106;
    if (v39)
    {
      if (v106 >= 0)
        v40 = (const char *)&v105;
      else
        v40 = (const char *)v105;
      llvm::raw_ostream::write(v27, v40, v39);
      v41 = (_BYTE *)*((_QWORD *)v27 + 4);
      if (*((_BYTE **)v27 + 3) == v41)
      {
        llvm::raw_ostream::write(v27, ",", 1uLL);
      }
      else
      {
        *v41 = 44;
        ++*((_QWORD *)v27 + 4);
      }
    }
    v42 = *((_QWORD *)v27 + 4);
    if ((unint64_t)(*((_QWORD *)v27 + 3) - v42) > 5)
    {
      *(_WORD *)(v42 + 4) = 15724;
      *(_DWORD *)v42 = 1700946284;
      *((_QWORD *)v27 + 4) += 6;
      if (v34)
      {
LABEL_81:
        v44 = v29[2];
        v43 = v29[3];
        if (v44 == v43)
        {
          v47 = 0;
          v48 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v44 + 40;
          do
          {
            v47 = v45 + 1;
            v48 = v46 != v43;
            if (v46 == v43)
              break;
            v46 += 40;
            v49 = v45++ == 63;
          }
          while (!v49);
        }
        if (v47 <= 1)
          v50 = 1;
        else
          v50 = v47;
        v51 = (void *)*((_QWORD *)v27 + 4);
        if (*((_QWORD *)v27 + 3) - (_QWORD)v51 > 0x30uLL)
        {
          qmemcpy(v51, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
          v52 = (void *)(*((_QWORD *)v27 + 4) + 49);
          *((_QWORD *)v27 + 4) = v52;
        }
        else
        {
          llvm::raw_ostream::write(v27, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
          v52 = (void *)*((_QWORD *)v27 + 4);
        }
        if (*((_QWORD *)v27 + 3) - (_QWORD)v52 > 0x2EuLL)
        {
          qmemcpy(v52, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
          *((_QWORD *)v27 + 4) += 47;
        }
        else
        {
          llvm::raw_ostream::write(v27, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
        }
        sub_1C5E21910(v27, (v50 + v48), 0, 0, 0);
        v53 = (_WORD *)*((_QWORD *)v27 + 4);
        if (*((_QWORD *)v27 + 3) - (_QWORD)v53 > 1uLL)
        {
          *v53 = 15906;
          *((_QWORD *)v27 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v27, "\">", 2uLL);
        }
        v4 = v95;
        sub_1C4DE7008((char *)&__p, (uint64_t)v29, (*v95)[1]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &__p;
        else
          v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v55 = __p.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v27, (const char *)v54, v55);
        v56 = *((_QWORD *)v27 + 4);
        if ((unint64_t)(*((_QWORD *)v27 + 3) - v56) > 4)
        {
          *(_BYTE *)(v56 + 4) = 62;
          *(_DWORD *)v56 = 1685335868;
          *((_QWORD *)v27 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v27, "</td>", 5uLL);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v57 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_141:
          operator delete(v57);
          goto LABEL_142;
        }
        goto LABEL_142;
      }
    }
    else
    {
      llvm::raw_ostream::write(v27, "label=", 6uLL);
      if (v34)
        goto LABEL_81;
    }
    v69 = (_WORD *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v69 > 1uLL)
    {
      *v69 = 31522;
      *((_QWORD *)v27 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v27, "\"{", 2uLL);
    }
    v4 = v95;
    sub_1C4DE7008((char *)&__dst, (uint64_t)v29, (*v95)[1]);
    llvm::DOT::EscapeString((char *)&__dst, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &__p;
    else
      v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v71 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v27, (const char *)v70, v71);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      v57 = (void *)__dst.__r_.__value_.__r.__words[0];
      goto LABEL_141;
    }
LABEL_142:
    memset(&__dst, 0, sizeof(__dst));
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    v101 = 0;
    v102 = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
    v104 = &__dst;
    v103 = 0;
    v99 = 0;
    v100 = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    if (v34)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
      v72 = (void *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v72 <= 0xDuLL)
      {
        v73 = v27;
        v74 = "</tr></table>>";
        v75 = 14;
LABEL_147:
        llvm::raw_ostream::write(v73, v74, v75);
LABEL_148:
        v27 = v94;
        v77 = *((_QWORD *)v94 + 4);
        if ((unint64_t)(*((_QWORD *)v94 + 3) - v77) > 2)
        {
          *(_BYTE *)(v77 + 2) = 10;
          *(_WORD *)v77 = 15197;
          *((_QWORD *)v27 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v94, "];\n", 3uLL);
        }
        v78 = v29[2];
        v79 = v29[3];
        v109.__r_.__value_.__r.__words[0] = v78;
        v109.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1C4DE7514;
        if (v78 != v79)
        {
          v80 = 63;
          do
          {
            v81 = sub_1C4DE71A0((uint64_t *)&v109);
            if (byte_1ED7F0DC8 || *(_QWORD *)(v81 + 8))
              sub_1C4DE72DC((uint64_t)&v94, (unint64_t)v29, (uint64_t)v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
            v78 = v109.__r_.__value_.__r.__words[0] + 40;
            v109.__r_.__value_.__r.__words[0] += 40;
            v83 = v80-- != 0;
          }
          while (v78 != v79 && v83);
        }
        while (v78 != v79)
        {
          v84 = sub_1C4DE71A0((uint64_t *)&v109);
          if (byte_1ED7F0DC8 || *(_QWORD *)(v84 + 8))
            sub_1C4DE72DC((uint64_t)&v94, (unint64_t)v29, (uint64_t)v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
          v78 = v109.__r_.__value_.__r.__words[0] + 40;
          v109.__r_.__value_.__r.__words[0] += 40;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
        if (v103 == 1 && __p.__r_.__value_.__r.__words[2])
          MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106) < 0)
          operator delete(v105);
        LODWORD(v28) = byte_1ED7F0DC8;
        goto LABEL_172;
      }
      qmemcpy(v72, "</tr></table>>", 14);
      v88 = *((_QWORD *)v27 + 4) + 14;
    }
    else
    {
      v76 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v76 <= 1uLL)
      {
        v73 = v27;
        v74 = "}\"";
        v75 = 2;
        goto LABEL_147;
      }
      *v76 = 8829;
      v88 = *((_QWORD *)v27 + 4) + 2;
    }
    *((_QWORD *)v27 + 4) = v88;
    goto LABEL_148;
  }
LABEL_194:
  v89 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v89 > 1uLL)
  {
    *v89 = 2685;
    *((_QWORD *)v27 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v27, "}\n", 2uLL);
  }
  if (v93 < 0)
    operator delete(v91);
  return a1;
}

uint64_t sub_1C4DE69F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::ValueHandleBase *v30;
  llvm::ValueHandleBase *v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[128];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E81357A8;
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = a2 + 24;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 != a2 + 24)
  {
    do
    {
      if (v8)
        v9 = v8 - 56;
      else
        v9 = 0;
      v39 = (unint64_t *)v43;
      v40 = (unint64_t *)v43;
      v41 = 16;
      v42 = 0;
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = 0;
        LODWORD(v12) = 16;
        v13 = (unint64_t *)v43;
        v14 = (unint64_t *)v43;
        do
        {
          v15 = *(_QWORD *)(v10 + 24);
          if (*(_BYTE *)(v15 + 16) == 84)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, *(_QWORD *)(*(_QWORD *)(v15 + 40) + 56));
            v13 = v39;
            v14 = v40;
            LODWORD(v12) = v41;
            v11 = HIDWORD(v41);
          }
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        v11 = 0;
        LODWORD(v12) = 16;
        v13 = (unint64_t *)v43;
        v14 = (unint64_t *)v43;
      }
      if (v14 == v13)
        v12 = v11;
      else
        v12 = v12;
      v16 = v14;
      if ((_DWORD)v12)
      {
        v17 = 8 * v12;
        v16 = v14;
        while (*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v16;
          v17 -= 8;
          if (!v17)
            goto LABEL_33;
        }
      }
      v18 = &v14[v12];
      if (v16 == v18)
      {
LABEL_33:
        v19 = 0;
      }
      else
      {
        v19 = 0;
        v20 = *v16;
LABEL_22:
        v21 = 0;
        if (*(_QWORD *)(v9 + 8))
        {
          v22 = *(_QWORD *)(v9 + 8);
          do
          {
            v23 = *(_QWORD *)(v22 + 24);
            if (v23 && *(_BYTE *)(v23 + 16) == 84 && *(_QWORD *)(*(_QWORD *)(v23 + 40) + 56) == v20)
              ++v21;
            v22 = *(_QWORD *)(v22 + 8);
          }
          while (v22);
        }
        v19 += v21;
        v24 = v16 + 1;
        while (v24 != v18)
        {
          v25 = *v24++;
          v20 = v25;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v16 = v24 - 1;
            goto LABEL_22;
          }
        }
      }
      if (v19 >= *(_QWORD *)(a1 + 40))
        *(_QWORD *)(a1 + 40) = v19;
      v38 = v9;
      sub_1C4DE6D10(v6, &v38)[1] = v19;
      if (v40 != v39)
        free(v40);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v7);
  }
  if (!byte_1ED7F0DC8)
  {
    v26 = *(_QWORD *)(a1 + 8);
    v27 = *(_QWORD **)(v26 + 8);
    v28 = (_QWORD *)(v26 + 16);
    if (v27 != (_QWORD *)(v26 + 16))
    {
      do
      {
        v29 = v27[5];
        v30 = *(llvm::ValueHandleBase **)(v29 + 16);
        v39 = (unint64_t *)v43;
        v40 = (unint64_t *)v43;
        v41 = 16;
        v42 = 0;
        while (1)
        {
          v31 = *(llvm::ValueHandleBase **)(v29 + 24);
          if (v30 == v31)
            break;
          while (1)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v39, *(_QWORD *)(*((_QWORD *)v30 + 4) + 8));
            if (!v32)
              break;
            v30 = (llvm::ValueHandleBase *)((char *)v30 + 40);
            if (v30 == v31)
            {
              if (v40 != v39)
                free(v40);
              goto LABEL_51;
            }
          }
          --*(_DWORD *)(*((_QWORD *)v30 + 4) + 40);
          v33 = *(_QWORD *)(v29 + 24);
          sub_1C4DDE088(v30, (uint64_t *)(v33 - 40));
          *((_QWORD *)v30 + 4) = *(_QWORD *)(v33 - 8);
          sub_1C4DDDF70(v29 + 16, *(_QWORD *)(v29 + 24) - 40);
          if (v40 != v39)
            free(v40);
          v39 = (unint64_t *)v43;
          v40 = (unint64_t *)v43;
          v41 = 16;
          v42 = 0;
          v30 = *(llvm::ValueHandleBase **)(v29 + 16);
        }
LABEL_51:
        v34 = (_QWORD *)v27[1];
        if (v34)
        {
          do
          {
            v35 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (_QWORD *)v27[2];
            v36 = *v35 == (_QWORD)v27;
            v27 = v35;
          }
          while (!v36);
        }
        v27 = v35;
      }
      while (v35 != v28);
    }
  }
  return a1;
}

_QWORD *sub_1C4DE6D10(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C48BF0C0(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4DE6D6C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4DE6D6C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DE6E1C(a1, v7);
  v9 = 0;
  sub_1C48BF0C0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4DE6E1C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DE6ED4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DE6ED4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C48BF0C0((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C4DE6F78(std::string *a1, uint64_t a2)
{
  std::string *v3;
  std::string __p;

  if (*(char *)(a2 + 191) < 0)
    sub_1C47EBC30(&__p, *(void **)(a2 + 168), *(_QWORD *)(a2 + 176));
  else
    __p = *(std::string *)(a2 + 168);
  v3 = std::string::insert(&__p, 0, "Call graph: ");
  *a1 = *v3;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

char *sub_1C4DE7008(char *__dst, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  const char *v13;
  _BYTE *v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v3 = __dst;
  if (*(_QWORD *)(a3 + 80) == a2)
  {
    v13 = "external caller";
LABEL_13:
    __dst[23] = 15;
    *(_QWORD *)__dst = *(_QWORD *)v13;
    *(_QWORD *)(__dst + 7) = *(_QWORD *)(v13 + 7);
    v14 = __dst + 15;
    goto LABEL_25;
  }
  if (*(_QWORD *)(a3 + 88) == a2)
  {
    v13 = "external callee";
    goto LABEL_13;
  }
  v4 = *(uint64_t ****)(a2 + 8);
  if (v4)
  {
    if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
    {
      v16 = 0;
      __dst[23] = 0;
      goto LABEL_24;
    }
    v5 = ***v4;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == v4)
      {
LABEL_16:
        v15 = (unint64_t *)v9[1];
        v18 = *v15;
        v17 = v15 + 2;
        v16 = v18;
        if (v18 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v21 = operator new(v19 + 1);
          v3[1] = v16;
          v3[2] = v20 | 0x8000000000000000;
          *v3 = v21;
          v3 = v21;
        }
        else
        {
          __dst[23] = v16;
          if (!v16)
            goto LABEL_24;
        }
        __dst = (char *)memmove(v3, v17, v16);
LABEL_24:
        v14 = (char *)v3 + v16;
        goto LABEL_25;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == v4)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_16;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_16;
  }
  __dst[23] = 13;
  qmemcpy(__dst, "external node", 13);
  v14 = __dst + 13;
LABEL_25:
  *v14 = 0;
  return __dst;
}

uint64_t sub_1C4DE71A0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t result;
  unint64_t v4;
  int32x2_t ****v5;
  int32x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int32x2_t *****v11;
  int32x2_t ****v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  int32x2_t ****v17;
  char v18;
  uint64_t v19;

  v1 = *a1;
  v2 = (uint64_t (*)(uint64_t *))a1[1];
  LOBYTE(v15) = 0;
  v18 = 0;
  if (*(_BYTE *)(v1 + 24))
    sub_1C4DDDCF8((llvm::ValueHandleBase *)&v15, (_QWORD *)v1);
  v19 = *(_QWORD *)(v1 + 32);
  result = v2(&v15);
  if (v18 && v17 != (int32x2_t ****)-8192 && v17 != (int32x2_t ****)-4096 && v17)
  {
    v4 = v15 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) = v16;
    if (v16)
    {
      *v16 = *v16 & 7 | v4;
    }
    else
    {
      v5 = v17;
      v6 = ***v17;
      v7 = (unint64_t)v6[303];
      if (v7 <= v4)
      {
        v8 = v6[305].u32[0];
        if (v7 + 16 * v8 > v4)
        {
          v9 = v8 - 1;
          LODWORD(v10) = v9 & ((v17 >> 4) ^ (v17 >> 9));
          v11 = (int32x2_t *****)(v7 + 16 * v10);
          v12 = *v11;
          if (v17 == *v11)
          {
LABEL_15:
            *v11 = (int32x2_t ****)-8192;
            v6[304] = vadd_s32(v6[304], (int32x2_t)0x1FFFFFFFFLL);
            v5 = v17;
          }
          else
          {
            v13 = 1;
            while (v12 != (int32x2_t ****)-4096)
            {
              v14 = v10 + v13++;
              v10 = v14 & v9;
              v12 = *(int32x2_t *****)(v7 + 16 * v10);
              if (v17 == v12)
              {
                v11 = (int32x2_t *****)(v7 + 16 * v10);
                goto LABEL_15;
              }
            }
          }
          *((_BYTE *)v5 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

void sub_1C4DE72DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  std::string::size_type v22;
  void *__p[2];
  std::string::size_type v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;

  *(_QWORD *)&v25 = a3;
  *((_QWORD *)&v25 + 1) = a4;
  v6 = sub_1C4DE71A0((uint64_t *)&v25);
  if (v6)
  {
    v7 = v6;
    v8 = **(_QWORD **)(a1 + 8);
    v30 = v25;
    if (!byte_1ED7F0D08)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 8);
    if (!v9)
      goto LABEL_12;
    if (*(_BYTE *)(v9 + 16))
    {
      if (*(_BYTE *)(v9 + 16) == 3 && (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_12;
    }
    else if (*(_QWORD *)(v9 + 72) == v9 + 72 && (*(_BYTE *)(v9 + 34) & 0x80) == 0)
    {
      goto LABEL_12;
    }
    v10 = *(_QWORD *)(sub_1C4DE71A0((uint64_t *)&v30) + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = 0;
        do
        {
          v13 = *(_QWORD *)(v11 + 24);
          if (v13 && *(_BYTE *)(v13 + 16) == 84 && *(_QWORD *)(*(_QWORD *)(v13 + 40) + 56) == v9)
            ++v12;
          v11 = *(_QWORD *)(v11 + 8);
        }
        while (v11);
      }
      else
      {
        v12 = 0;
      }
      v14 = (double)v12 / (double)*(unint64_t *)(v8 + 40) * 2.0 + 1.0;
      std::to_string(&v27, v12);
      v15 = std::string::insert(&v27, 0, "label=\"");
      v16 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v28, "\" penwidth=");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, v14);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v26;
      else
        v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v26.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v29, (const std::string::value_type *)v19, size);
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v24 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      goto LABEL_13;
    }
LABEL_12:
    HIBYTE(v24) = 0;
    LOBYTE(__p[0]) = 0;
LABEL_13:
    sub_1C617C7A0((llvm::raw_ostream **)a1, a2, v7, (uint64_t)__p);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_1C4DE7514(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1C4DE751C()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EFBD0;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81357F0;
  return result;
}

uint64_t sub_1C4DE7564()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EFBD1;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8135890;
  return result;
}

void sub_1C4DE75B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DE75D4(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DE7608(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3;

  v3 = a1;
  sub_1C4DE5830(a2, (uint64_t)sub_1C4DE7640, (uint64_t)&v3);
  return 0;
}

uint64_t sub_1C4DE7640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

void sub_1C4DE7698(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DE76BC(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DE76F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  sub_1C4DE54C4(a2, (uint64_t)sub_1C4DE7728, (uint64_t)&v3);
  return 0;
}

uint64_t sub_1C4DE7728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t sub_1C4DE777C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C4DE77A4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C4DE77CC()
{
  uint64_t v0;
  __n128 v2;
  int v3;
  char v4;
  char *v5;

  v4 = 0;
  v5 = &v4;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Show heat colors in call-graph";
  v2.n128_u64[1] = 30;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F0BC8, "callgraph-heat-colors", &v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F0BC8, &dword_1C475E000);
  v4 = 0;
  v5 = &v4;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Show edges labeled with weights";
  v2.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F0C88, "callgraph-show-weights", &v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F0C88, &dword_1C475E000);
  v4 = 0;
  v5 = &v4;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Show call-multigraph (do not remove parallel edges)";
  v2.n128_u64[1] = 51;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F0D48, "callgraph-multigraph", &v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F0D48, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1ED7F0E08, 0, 0);
  qword_1ED7F0E90 = 0;
  qword_1ED7F0E88 = 0;
  unk_1ED7F0E98 = 0;
  qword_1ED7F0EA8 = 0;
  qword_1ED7F0EB8 = 0;
  qword_1ED7F0EB0 = 0;
  qword_1ED7F0EA0 = (uint64_t)&unk_1E819E950;
  byte_1ED7F0EC0 = 0;
  qword_1ED7F0E08 = (uint64_t)&unk_1E819E480;
  qword_1ED7F0EC8 = (uint64_t)&unk_1E819E970;
  qword_1ED7F0ED0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7F0EE8 = (uint64_t)&qword_1ED7F0ED0;
  llvm::cl::Option::setArgStr(v0, "callgraph-dot-filename-prefix", 0x1DuLL);
  word_1ED7F0E12 = word_1ED7F0E12 & 0xFF9F | 0x20;
  qword_1ED7F0E28 = (uint64_t)"The prefix used for the CallGraph dot file names.";
  qword_1ED7F0E30 = 49;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F0E08);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7F0E08, &dword_1C475E000);
}

uint64_t llvm::getDefaultMaxUsesToExploreForCaptureTracking(llvm *this)
{
  return dword_1ED7F0F70;
}

uint64_t llvm::CaptureTracker::shouldExplore()
{
  return 1;
}

BOOL llvm::CaptureTracker::isDereferenceableOrNull(llvm::CaptureTracker *this, llvm::Value *a2, const llvm::DataLayout *a3)
{
  BOOL v4[2];

  if (a2 && *((_BYTE *)a2 + 16) == 62 && (*((_BYTE *)a2 + 17) & 2) != 0)
    return 1;
  *(_WORD *)v4 = 0;
  return llvm::Value::getPointerDereferenceableBytes((uint64_t ***)a2, a3, &v4[1], v4) != 0;
}

BOOL llvm::PointerMayBeCaptured(llvm *this, const llvm::Value *a2, BOOL a3, llvm::CaptureTracker *a4)
{
  int v4;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  unsigned __int8 v14;

  v7 = &v11;
  v8 = &v11;
  v9 = 1;
  v10 = 0;
  v12[0] = &off_1E8135970;
  v12[1] = &v7;
  v13 = (char)a2;
  v14 = 0;
  llvm::PointerMayBeCaptured(this, (const llvm::Value *)v12, a4);
  v4 = v14;
  if (v8 != v7)
  {
    v6 = v14;
    free(v8);
    v4 = v6;
  }
  return v4 != 0;
}

void llvm::PointerMayBeCaptured(llvm *this, const llvm::Value *a2, llvm::CaptureTracker *a3)
{
  unsigned int v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  const llvm::Value *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[256];
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[21];

  v23[20] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a3)
    v5 = a3;
  else
    v5 = dword_1ED7F0F70;
  v21 = v23;
  v22 = 0x1400000000;
  if (dword_1ED7F0F70 >= 0x15)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, dword_1ED7F0F70, 8);
  v16 = v20;
  v17 = v20;
  v18 = 32;
  v19 = 0;
  while (1)
  {
    this = (llvm *)*((_QWORD *)this + 1);
    if (!this)
    {
      v15 = a2;
      v8 = v22;
      if (!(_DWORD)v22)
        goto LABEL_35;
      while (1)
      {
        v9 = v21[v8 - 1];
        LODWORD(v22) = v8 - 1;
        v10 = llvm::DetermineUseCaptureKind(v9, (uint64_t (*)(uint64_t, llvm::Value *, uint64_t))sub_1C4DE862C, (uint64_t)&v15);
        if (!v10)
          goto LABEL_16;
        if (v10 == 2)
          break;
        if (v10 == 1)
        {
          if (((*(uint64_t (**)(const llvm::Value *, unint64_t))(*(_QWORD *)a2 + 32))(a2, v9) & 1) != 0)
            goto LABEL_35;
LABEL_16:
          v11 = 2;
LABEL_17:
          if (v11 != 2)
            goto LABEL_35;
        }
        v8 = v22;
        if (!(_DWORD)v22)
          goto LABEL_35;
      }
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
      if (!v12)
        goto LABEL_16;
      while (HIDWORD(v18) - v19 < v5)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v12);
        if (v13 && (*(unsigned int (**)(const llvm::Value *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v12))
        {
          v14 = v22;
          if (v22 >= (unint64_t)HIDWORD(v22))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 8);
            v14 = v22;
          }
          v21[v14] = v12;
          LODWORD(v22) = v22 + 1;
        }
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          goto LABEL_16;
      }
      (*(void (**)(const llvm::Value *))(*(_QWORD *)a2 + 16))(a2);
      v11 = 1;
      goto LABEL_17;
    }
    if (HIDWORD(v18) - v19 >= v5)
      break;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, (uint64_t)this);
    if (v6 && (*(unsigned int (**)(const llvm::Value *, llvm *))(*(_QWORD *)a2 + 24))(a2, this))
    {
      v7 = v22;
      if (v22 >= (unint64_t)HIDWORD(v22))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 8);
        v7 = v22;
      }
      v21[v7] = this;
      LODWORD(v22) = v22 + 1;
    }
  }
  (*(void (**)(const llvm::Value *))(*(_QWORD *)a2 + 16))(a2);
LABEL_35:
  if (v17 != v16)
    free(v17);
  if (v21 != v23)
    free(v21);
}

uint64_t llvm::PointerMayBeCapturedBefore(llvm *a1, const llvm::Value *a2, int a3, uint64_t a4, uint64_t a5, char a6, llvm::CaptureTracker *a7, uint64_t a8)
{
  _QWORD v9[3];
  char v10;
  char v11;
  _WORD v12[7];

  if (!a5)
    return llvm::PointerMayBeCaptured(a1, a2, 0, a7);
  v9[0] = &off_1E81359B0;
  v9[1] = a4;
  v9[2] = a5;
  v10 = (char)a2;
  v11 = a6;
  LOBYTE(v12[0]) = 0;
  *(_QWORD *)&v12[3] = a8;
  llvm::PointerMayBeCaptured(a1, (const llvm::Value *)v9, a7);
  return LOBYTE(v12[0]);
}

uint64_t llvm::FindEarliestCapture(llvm *a1, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, llvm::CaptureTracker *a7)
{
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  v8[0] = &off_1E81359F0;
  v8[1] = a6;
  v9 = 0;
  v10 = a5;
  v11 = a3;
  v12 = 0;
  v13 = a2;
  llvm::PointerMayBeCaptured(a1, (const llvm::Value *)v8, a7);
  return v9;
}

uint64_t llvm::DetermineUseCaptureKind(unint64_t a1, uint64_t (*a2)(uint64_t, llvm::Value *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::APInt *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  BOOL v22;
  llvm::Value *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  llvm::Value *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;

  v4 = *(_QWORD *)(a1 + 24);
  result = 0;
  switch(*(_BYTE *)(v4 + 16))
  {
    case '<':
      return *(_WORD *)(v4 + 18) & 1;
    case '=':
      v32 = *(_DWORD *)(v4 + 20);
      if ((v32 & 0x40000000) != 0)
        v33 = *(_QWORD *)(v4 - 8);
      else
        v33 = v4 - 32 * (v32 & 0x7FFFFFF);
      if (((a1 - v33) & 0x1FFFFFFFE0) == 0)
        return 1;
      return *(_WORD *)(v4 + 18) & 1;
    case '>':
    case 'M':
    case 'N':
    case 'S':
    case 'U':
      return 2;
    case '?':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'O':
    case 'P':
    case 'R':
    case 'V':
    case 'W':
      return 1;
    case '@':
      v12 = *(_DWORD *)(v4 + 20);
      if ((v12 & 0x40000000) != 0)
        v13 = *(_QWORD *)(v4 - 8);
      else
        v13 = v4 + 32 * -(v12 & 0x7FFFFFF);
      v14 = (a1 - v13) & 0x1FFFFFFFE0;
      if (v14 == 32 || v14 == 64)
        return 1;
      return *(_WORD *)(v4 + 18) & 1;
    case 'A':
      v34 = *(_DWORD *)(v4 + 20);
      if ((v34 & 0x40000000) != 0)
        v35 = *(_QWORD *)(v4 - 8);
      else
        v35 = v4 - 32 * (v34 & 0x7FFFFFF);
      if (((a1 - v35) & 0x1FFFFFFFE0) == 0x20)
        return 1;
      return *(_WORD *)(v4 + 18) & 1;
    case 'Q':
      v17 = *(_DWORD *)(v4 + 20);
      if ((v17 & 0x40000000) != 0)
        v18 = *(_QWORD *)(v4 - 8);
      else
        v18 = v4 - 32 * (v17 & 0x7FFFFFF);
      v19 = a1 - v18;
      v20 = 1 - ((a1 - v18) >> 5);
      v21 = *(_BYTE **)(v18 + 32 * v20);
      if (v21)
        v22 = v21[16] == 19;
      else
        v22 = 0;
      if (!v22)
        goto LABEL_63;
      if (*(_DWORD *)(*(_QWORD *)v21 + 8) > 0xFFu
        || (v23 = llvm::Value::stripPointerCasts(*(llvm::Value **)a1), v24 = *((unsigned __int8 *)v23 + 16), v24 < 0x1C)
        || ((v25 = v24 - 33, v26 = v25 > 0x33, v27 = (1 << v25) & 0x8000000000041, !v26)
          ? (v28 = v27 == 0)
          : (v28 = 1),
            v28 || (sub_1C4D91DD8((uint64_t)v23, 19) & 1) == 0))
      {
        if ((v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 56) + 112)) != 0
          && (*(_BYTE *)(v29 + 17) & 1) != 0
          || ((v30 = *(_DWORD *)(v4 + 20), (v30 & 0x40000000) != 0)
            ? (v31 = *(_QWORD *)(v4 - 8))
            : (v31 = v4 - 32 * (v30 & 0x7FFFFFF)),
              (v39 = llvm::Value::stripPointerCastsSameRepresentation(*(llvm::Value **)(v31 + (v19 & 0x1FFFFFFFE0))),
               !a2)
           || (a2(a3, v39, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 56) + 40) + 272) & 1) == 0))
        {
LABEL_63:
          v40 = *(_DWORD *)(v4 + 20);
          v41 = (v40 & 0x40000000) != 0 ? *(_QWORD *)(v4 - 8) : v4 - 32 * (v40 & 0x7FFFFFF);
          v42 = *(_QWORD *)(v41 + 32 * v20);
          if (!v42 || *(_BYTE *)(v42 + 16) != 60 || *(_BYTE *)(*(_QWORD *)(v42 - 32) + 16) != 3)
            return 1;
        }
      }
      return 0;
    case 'T':
      goto LABEL_4;
    case 'X':
      return result;
    default:
      if (*(_BYTE *)(v4 + 16) != 33)
        return 1;
LABEL_4:
      v6 = *(_QWORD *)(v4 + 64);
      if (v6 && (*(_BYTE *)(v6 + 17) & 0x30) != 0)
        goto LABEL_9;
      v7 = *(_DWORD *)(v4 + 20);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
      v43 = v4 - 32 * (v7 & 0x7FFFFFF);
      v46 = *(_QWORD *)(v43 - 8);
      v44 = v43 - 8;
      v45 = v46;
      if (!v46)
        goto LABEL_7;
      v47 = -v45;
      break;
  }
  do
  {
    v48 = *(_DWORD *)(*(_QWORD *)(v44 + v47) + 8);
    v26 = v48 > 7;
    v49 = (1 << v48) & 0x83;
    if (v26 || v49 == 0)
      goto LABEL_13;
    v47 += 16;
  }
  while (v47);
LABEL_7:
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v4, 45) & 1) != 0
    || llvm::CallBase::hasFnAttrOnCalledFunction(v4, 44))
  {
LABEL_9:
    v8 = *(_QWORD *)(v4 + 64);
    if ((v8 && (*(_BYTE *)(v8 + 16) & 0x20) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v4, 37))
      && *(_BYTE *)(*(_QWORD *)v4 + 8) == 7)
    {
      return 0;
    }
  }
LABEL_13:
  if ((llvm::isIntrinsicReturningPointerAliasingArgumentWithoutCapturing(v4, 1) & 1) != 0)
    return 2;
  if (sub_1C4DE85D0(v4))
  {
    v9 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 96);
    v10 = (llvm::APInt *)(v9 + 24);
    v11 = *(_DWORD *)(v9 + 32);
    if (v11 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v10) == v11)
        goto LABEL_50;
    }
    else if (!*(_QWORD *)v10)
    {
      goto LABEL_50;
    }
    return 1;
  }
LABEL_50:
  if (v4 - 32 != a1)
  {
    v36 = v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF);
    if (v36 <= a1)
    {
      v37 = *(unsigned __int8 *)(v4 + 16);
      if (v37 == 84)
        v38 = 0;
      else
        v38 = v37 == 39 ? (*(_DWORD *)(v4 + 80) + 1) : 2;
      if (v4 - 32 * v38 - 32 > a1 && !sub_1C4D91D40(v4, (a1 - v36) >> 5, 22))
        return 1;
    }
  }
  return 0;
}

uint64_t llvm::isNonEscapingLocalObject(llvm *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  llvm **v8;
  llvm *v9;
  llvm **v10;
  int v11;
  llvm **v12;
  _QWORD *v13;
  uint64_t result;
  BOOL v15;
  int v16;
  llvm *v17;
  char v18;

  if (a2)
  {
    v17 = a1;
    v18 = 0;
    v4 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v5 = 8;
    }
    else
    {
      v5 = *(_DWORD *)(a2 + 16);
      if (!v5)
      {
        v12 = 0;
LABEL_10:
        v13 = sub_1C4DE86EC(a2, (uint64_t)&v17, &v17, v12);
        *v13 = v17;
        *((_BYTE *)v13 + 8) = v18;
        goto LABEL_11;
      }
      v4 = *(_QWORD *)(a2 + 8);
    }
    v6 = v5 - 1;
    v7 = (v5 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v8 = (llvm **)(v4 + 16 * v7);
    v9 = *v8;
    if (*v8 == a1)
      return *(unsigned __int8 *)(v4 + 16 * v7 + 8) != 0;
    v10 = 0;
    v11 = 1;
    while (v9 != (llvm *)-4096)
    {
      if (v10)
        v15 = 0;
      else
        v15 = v9 == (llvm *)-8192;
      if (v15)
        v10 = v8;
      v16 = v7 + v11++;
      v7 = v16 & v6;
      v8 = (llvm **)(v4 + 16 * v7);
      v9 = *v8;
      if (*v8 == a1)
        return *(unsigned __int8 *)(v4 + 16 * v7 + 8) != 0;
    }
    if (v10)
      v12 = v10;
    else
      v12 = v8;
    goto LABEL_10;
  }
  v13 = 0;
LABEL_11:
  result = llvm::isIdentifiedFunctionLocal(a1, (const llvm::Value *)a2);
  if ((_DWORD)result)
  {
    result = !llvm::PointerMayBeCaptured(a1, 0, 0, 0);
    if (a2)
      *((_BYTE *)v13 + 8) = result;
  }
  return result;
}

void sub_1C4DE82F4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4DE8308(uint64_t result)
{
  *(_BYTE *)(result + 17) = 1;
  return result;
}

uint64_t sub_1C4DE8314(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v3 + 16) == 29 && !*(_BYTE *)(a1 + 16))
    return 0;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = sub_1C477672C((uint64_t)v4, v3);
  v6 = v4[1];
  v7 = 16;
  if (v6 == *v4)
    v7 = 20;
  if (v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
    return 0;
  result = 1;
  *(_BYTE *)(a1 + 17) = 1;
  return result;
}

void sub_1C4DE8388()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4DE839C(uint64_t result)
{
  *(_BYTE *)(result + 26) = 1;
  return result;
}

uint64_t sub_1C4DE83A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v3 + 16) == 29 && !*(_BYTE *)(a1 + 24))
    return 0;
  if (*(_QWORD *)(a1 + 8) == v3)
  {
    if (*(_BYTE *)(a1 + 25))
    {
LABEL_8:
      result = 1;
      *(_BYTE *)(a1 + 26) = 1;
      return result;
    }
    return 0;
  }
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(a1 + 16), *(_QWORD *)(v3 + 40));
  if ((_DWORD)result)
  {
    result = llvm::isPotentiallyReachable(v3, *(_QWORD *)(a1 + 8), 0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
    if ((_DWORD)result)
      goto LABEL_8;
  }
  return result;
}

void sub_1C4DE842C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4DE8440(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(result + 33) = 1;
  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 80);
  if (v1)
    v2 = v1 - 24;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 48);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  *(_QWORD *)(result + 16) = v4;
  return result;
}

uint64_t sub_1C4DE8474(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NearestCommonDominator;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v3 + 16) != 29 || *(_BYTE *)(a1 + 32))
  {
    v4 = *(_QWORD **)(a1 + 8);
    v5 = sub_1C477672C((uint64_t)v4, *(_QWORD *)(a2 + 24));
    v6 = v4[1];
    v7 = 16;
    if (v6 == *v4)
      v7 = 20;
    if (v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
    {
      v8 = *(_QWORD *)(a1 + 16);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 40);
        v10 = *(_QWORD *)(v3 + 40);
        if (v9 == v10)
        {
          v14 = *(__int16 *)(v9 + 18);
          if ((v14 & 0x80000000) == 0)
          {
            v16 = *(_QWORD *)(v9 + 48);
            if (v16 != v9 + 40)
            {
              v17 = 0;
              do
              {
                v18 = v16 - 24;
                if (!v16)
                  v18 = 0;
                *(_DWORD *)(v18 + 56) = v17++;
                v16 = *(_QWORD *)(v16 + 8);
              }
              while (v16 != v9 + 40);
            }
            *(_WORD *)(v9 + 18) = v14 | 0x8000;
          }
          if (*(_DWORD *)(v3 + 56) >= *(_DWORD *)(v8 + 56))
            goto LABEL_22;
        }
        else
        {
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 24), *(_QWORD *)(v8 + 40), *(_QWORD *)(v3 + 40)))
          {
LABEL_22:
            *(_BYTE *)(a1 + 33) = 1;
            return 0;
          }
          if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 24), v10, v9))
          {
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(a1 + 24), v10, v9);
            v12 = *(_QWORD *)(NearestCommonDominator + 40);
            if (v12 == NearestCommonDominator + 40)
            {
              v3 = 0;
            }
            else
            {
              if (v12)
                v13 = v12 - 24;
              else
                v13 = 0;
              if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB)
                v3 = 0;
              else
                v3 = v13;
            }
          }
        }
      }
      *(_QWORD *)(a1 + 16) = v3;
      goto LABEL_22;
    }
  }
  return 0;
}

uint64_t sub_1C4DE85D0(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36) - 194, v2 <= 5))
  {
    return (0x2Du >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C4DE862C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
}

uint64_t sub_1C4DE863C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4DE86EC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int *v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int *v22;
  _QWORD *v23;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 8;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v9 = (int *)a1;
    sub_1C4DE8864(a1, 2 * v6);
    a1 = (uint64_t)v9;
    v11 = *v9;
    v10 = v9 + 2;
    v4 = v11;
    if ((v11 & 1) != 0)
    {
      v12 = 8;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v7 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v10 = *(_DWORD **)(a1 + 8);
    }
    v7 = v4 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = &v10[4 * v14];
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = &v10[4 * v14];
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
    {
      v22 = (int *)a1;
      sub_1C4DE8864(a1, v6);
      v23 = 0;
      sub_1C4DE863C((uint64_t)v22, a3, &v23);
      a1 = (uint64_t)v22;
      a4 = v23;
      v4 = *v22;
    }
    v7 = v4 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v4 & 0xFFFFFFFE | v7) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4DE8864(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4DE89DC((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4DE89DC((int *)a1, v14, v9);
}

int *sub_1C4DE89DC(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 34;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 8;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v9[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *v12 = v7;
      *((_BYTE *)v12 + 8) = *((_BYTE *)a2 + 8);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4DE8AE4()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Maximal number of uses to explore.";
  *((_QWORD *)&v3 + 1) = 34;
  v1 = 100;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7F0EF0, "capture-tracking-max-uses-to-explore", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F0EF0, &dword_1C475E000);
}

uint64_t llvm::getICmpCode(int a1)
{
  return dword_1C85F2744[a1 - 32];
}

uint64_t llvm::getPredForICmpCode(int a1, int a2, uint64_t a3, int *a4)
{
  int v4;

  if (a1 != 6)
    __asm { BR              X10 }
  if (a2)
    v4 = 41;
  else
    v4 = 37;
  *a4 = v4;
  return 0;
}

void sub_1C4DE8BC8()
{
  JUMPOUT(0x1C4DE8B98);
}

void sub_1C4DE8BD8()
{
  JUMPOUT(0x1C4DE8B98);
}

void sub_1C4DE8BE8()
{
  JUMPOUT(0x1C4DE8B9CLL);
}

llvm::Value **sub_1C4DE8BF4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  llvm::ConstantInt *v3;

  sub_1C4774CC4(a3);
  return llvm::ConstantInt::get(v3, 1, 0);
}

void sub_1C4DE8C1C()
{
  JUMPOUT(0x1C4DE8B98);
}

void sub_1C4DE8C2C()
{
  JUMPOUT(0x1C4DE8B9CLL);
}

uint64_t llvm::predicatesFoldable(int a1, int a2)
{
  _BOOL4 v3;
  _BOOL4 v4;

  v3 = (a1 - 38) < 4 && (a2 & 0xFFFFFFFE) == 32;
  if ((a2 - 38) <= 3)
    v4 = (a1 & 0xFFFFFFFE) == 32;
  else
    v4 = v3;
  if (!v3)
    v3 = v4;
  return (a1 - 38) < 4 == (a2 - 38) < 4 || v3;
}

llvm::Value **llvm::getPredForFCmpCode(int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  llvm::ConstantInt *v5;

  *a3 = a1;
  if (a1)
  {
    if (a1 != 15)
      return 0;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  sub_1C4774CC4(a2);
  return llvm::ConstantInt::get(v5, v4, 0);
}

llvm::APFloatBase *llvm::decomposeBitTestICmp(uint64_t a1, unsigned __int8 *a2, int *a3, uint64_t *a4, int8x8_t ***a5, int a6)
{
  llvm::APFloatBase *result;
  unsigned int v12;
  unsigned int v13;
  int8x8_t ***v14;
  int v15;
  int8x8_t *v16;
  uint64_t v17;
  unsigned int v18;
  int8x8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t *v23;
  uint64_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int8x8_t **v30;
  uint64_t v31;
  unsigned int v32;
  int8x8_t ***v33;
  int8x8_t *v34;
  uint64_t v35;
  unsigned int v36;
  int8x8_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int PrimitiveSizeInBits;
  unsigned int v42;
  int8x8_t ***v43;
  int8x8_t *v44;
  uint64_t v45;
  void *v46;
  uint8x8_t v47;
  int8x8_t **v48;
  unsigned int v49;
  size_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  size_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  void *v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  void *v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  void *v68;
  unsigned int v69;
  int8x8_t **v70;
  uint64_t v71;
  int8x8_t *v72;

  v71 = 0;
  v72 = 0;
  v70 = &v72;
  result = sub_1C4D89F84((uint64_t)&v70, a2);
  if ((_DWORD)result)
  {
    switch(*a3)
    {
      case '"':
        v16 = v72;
        v17 = v72[1].u32[0];
        v63 = v17;
        if (v17 > 0x40)
        {
          v50 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
          v62 = operator new[]();
          memcpy((void *)v62, *(const void **)v16, v50);
        }
        else
        {
          v62 = (uint64_t)*v72;
        }
        llvm::APInt::operator+=((uint64_t)&v62, 1uLL);
        v18 = v63;
        LODWORD(v71) = v63;
        v70 = (int8x8_t **)v62;
        v63 = 0;
        if (v18 <= 0x40)
        {
          if (!v62 || (v62 & (v62 - 1)) != 0)
            goto LABEL_3;
          goto LABEL_22;
        }
        v51 = v62;
        v52 = llvm::APInt::countPopulationSlowCase((uint64_t)&v70);
        if (v51)
        {
          MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
          if (v63 >= 0x41)
          {
            if (v62)
              MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
          }
        }
        if (v52 == 1)
        {
LABEL_22:
          v19 = v72;
          v20 = v72[1].u32[0];
          v61 = v20;
          if (v20 > 0x40)
          {
            v60 = (void *)operator new[]();
            memcpy(v60, *(const void **)v19, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v60);
            LODWORD(v20) = v61;
            v22 = (unint64_t)v60;
          }
          else
          {
            v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
            if (!(_DWORD)v20)
              v21 = 0;
            v22 = v21 & ~*(_QWORD *)v72;
          }
          if (*((_DWORD *)a5 + 2) > 0x40u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = (int8x8_t **)v22;
          *((_DWORD *)a5 + 2) = v20;
          goto LABEL_12;
        }
        goto LABEL_3;
      case '#':
        v44 = v72;
        v45 = v72[1].u32[0];
        if (v45 > 0x40)
        {
          if (llvm::APInt::countPopulationSlowCase((uint64_t)v72) != 1)
            goto LABEL_3;
          v59 = v45;
          v58 = (void *)operator new[]();
          memcpy(v58, *(const void **)v44, ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v46 = (void *)*v72;
          v47 = (uint8x8_t)vcnt_s8(*v72);
          v47.i16[0] = vaddlv_u8(v47);
          if (v47.u32[0] != 1)
            goto LABEL_3;
          v59 = v72[1].u32[0];
          v58 = v46;
        }
        sub_1C4DE96E0((uint64_t)&v58);
        llvm::APInt::operator++((uint64_t)&v58);
        v12 = v59;
        v48 = (int8x8_t **)v58;
        v59 = 0;
        if (*((_DWORD *)a5 + 2) <= 0x40u || !*a5)
        {
          *a5 = (int8x8_t **)v58;
          goto LABEL_11;
        }
        MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
        v57 = v59;
        *a5 = v48;
        *((_DWORD *)a5 + 2) = v12;
        if (v57 >= 0x41 && v58)
          MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
        goto LABEL_12;
      case '$':
        v23 = v72;
        v24 = v72[1].u32[0];
        if (v24 > 0x40)
        {
          if (llvm::APInt::countPopulationSlowCase((uint64_t)v72) != 1)
            goto LABEL_3;
          v69 = v24;
          v68 = (void *)operator new[]();
          memcpy(v68, *(const void **)v23, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v68);
        }
        else
        {
          v25 = *v72;
          v26 = (uint8x8_t)vcnt_s8(*v72);
          v26.i16[0] = vaddlv_u8(v26);
          if (v26.u32[0] != 1)
            goto LABEL_3;
          v69 = v72[1].u32[0];
          v27 = ~*(_QWORD *)&v25;
          v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
          if (!(_DWORD)v24)
            v28 = 0;
          v68 = (void *)(v28 & v27);
        }
        llvm::APInt::operator++((uint64_t)&v68);
        v29 = v69;
        v30 = (int8x8_t **)v68;
        v69 = 0;
        if (*((_DWORD *)a5 + 2) <= 0x40u)
        {
          *a5 = (int8x8_t **)v68;
          goto LABEL_35;
        }
        if (*a5)
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
        v53 = v69;
        *a5 = v30;
        *((_DWORD *)a5 + 2) = v29;
        if (v53 >= 0x41 && v68)
          MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
        goto LABEL_43;
      case '%':
        v34 = v72;
        v35 = v72[1].u32[0];
        v67 = v35;
        if (v35 > 0x40)
        {
          v54 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
          v66 = operator new[]();
          memcpy((void *)v66, *(const void **)v34, v54);
        }
        else
        {
          v66 = (uint64_t)*v72;
        }
        llvm::APInt::operator+=((uint64_t)&v66, 1uLL);
        v36 = v67;
        LODWORD(v71) = v67;
        v70 = (int8x8_t **)v66;
        v67 = 0;
        if (v36 <= 0x40)
        {
          if (!v66 || (v66 & (v66 - 1)) != 0)
            goto LABEL_3;
          goto LABEL_49;
        }
        v55 = v66;
        v56 = llvm::APInt::countPopulationSlowCase((uint64_t)&v70);
        if (v55)
        {
          MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
          if (v67 >= 0x41)
          {
            if (v66)
              MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
          }
        }
        if (v56 == 1)
        {
LABEL_49:
          v37 = v72;
          v31 = v72[1].u32[0];
          v65 = v31;
          if (v31 > 0x40)
          {
            v64 = (void *)operator new[]();
            memcpy(v64, *(const void **)v37, ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v64);
            LODWORD(v31) = v65;
            v39 = (unint64_t)v64;
          }
          else
          {
            v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
            if (!(_DWORD)v31)
              v38 = 0;
            v39 = v38 & ~*(_QWORD *)v72;
          }
          if (*((_DWORD *)a5 + 2) > 0x40u && *a5)
            MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          *a5 = (int8x8_t **)v39;
          goto LABEL_42;
        }
LABEL_3:
        result = 0;
        break;
      case '&':
        LODWORD(v31) = v72[1].i32[0];
        if (!(_DWORD)v31)
          goto LABEL_39;
        if (v31 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v72) != (_DWORD)v31)
            goto LABEL_3;
          LODWORD(v71) = v31;
          v33 = &v70;
          llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
          v32 = v31 - 1;
          if (v71 >= 0x41)
            v33 = (int8x8_t ***)&v70[v32 >> 6];
          LODWORD(v31) = v71;
        }
        else
        {
          if (*v72 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v31)
            goto LABEL_3;
LABEL_39:
          LODWORD(v71) = v72[1].i32[0];
          v70 = 0;
          LOBYTE(v32) = v31 - 1;
          v33 = &v70;
        }
        *v33 = (int8x8_t **)((1 << v32) | (unint64_t)*v33);
        if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        {
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          LODWORD(v31) = v71;
        }
        *a5 = v70;
LABEL_42:
        *((_DWORD *)a5 + 2) = v31;
        goto LABEL_43;
      case '\'':
        v29 = v72[1].u32[0];
        if (v29 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v72) != v29)
            goto LABEL_3;
          LODWORD(v71) = v29;
          v43 = &v70;
          llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
          v42 = v29 - 1;
          if (v71 >= 0x41)
            v43 = (int8x8_t ***)&v70[v42 >> 6];
          v29 = v71;
        }
        else
        {
          if (*v72)
            goto LABEL_3;
          LODWORD(v71) = v72[1].i32[0];
          v70 = 0;
          LOBYTE(v42) = v29 - 1;
          v43 = &v70;
        }
        *v43 = (int8x8_t **)((1 << v42) | (unint64_t)*v43);
        if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        {
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          v29 = v71;
        }
        *a5 = v70;
LABEL_35:
        *((_DWORD *)a5 + 2) = v29;
LABEL_43:
        v15 = 32;
        goto LABEL_13;
      case '(':
        v12 = v72[1].u32[0];
        if (v12 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v72) != v12)
            goto LABEL_3;
          LODWORD(v71) = v12;
          v14 = &v70;
          llvm::APInt::initSlowCase((llvm::APInt *)&v70, 0, 0);
          v13 = v12 - 1;
          if (v71 >= 0x41)
            v14 = (int8x8_t ***)&v70[v13 >> 6];
          v12 = v71;
        }
        else
        {
          if (*v72)
            goto LABEL_3;
          LODWORD(v71) = v72[1].i32[0];
          v70 = 0;
          LOBYTE(v13) = v12 - 1;
          v14 = &v70;
        }
        *v14 = (int8x8_t **)((1 << v13) | (unint64_t)*v14);
        if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
        {
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          v12 = v71;
        }
        *a5 = v70;
LABEL_11:
        *((_DWORD *)a5 + 2) = v12;
        goto LABEL_12;
      case ')':
        v49 = v72[1].u32[0];
        if (!v49)
          goto LABEL_72;
        if (v49 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v72) != v49)
            goto LABEL_3;
        }
        else if (*v72 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v49)
        {
          goto LABEL_3;
        }
LABEL_72:
        sub_1C4DE965C(v49, (llvm::APInt *)&v70);
        if (*((_DWORD *)a5 + 2) >= 0x41u && *a5)
          MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
        *a5 = v70;
        *((_DWORD *)a5 + 2) = v71;
LABEL_12:
        v15 = 33;
LABEL_13:
        *a3 = v15;
        if (a6 && (v70 = (int8x8_t **)a4, sub_1C4B03864(&v70, a1)))
        {
          v40 = *(_QWORD *)*a4;
          if ((*(_DWORD *)(v40 + 8) & 0xFE) == 0x12)
            v40 = **(_QWORD **)(v40 + 16);
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v40);
          llvm::APInt::zext((llvm::APInt *)a5, PrimitiveSizeInBits, (uint64_t)&v70);
          if (*((_DWORD *)a5 + 2) >= 0x41u)
          {
            if (*a5)
              MEMORY[0x1CAA32F9C](*a5, 0x1000C8000313F17);
          }
          *a5 = v70;
          *((_DWORD *)a5 + 2) = v71;
        }
        else
        {
          *a4 = a1;
        }
        return (llvm::APFloatBase *)1;
      default:
        goto LABEL_3;
    }
  }
  return result;
}

void sub_1C4DE965C(unsigned int a1@<W0>, llvm::APInt *a2@<X8>)
{
  unsigned int v2;
  llvm::APInt *v4;

  *((_DWORD *)a2 + 2) = a1;
  if (a1 > 0x40)
  {
    v4 = a2;
    llvm::APInt::initSlowCase(a2, 0, 0);
    a2 = v4;
    v2 = a1 - 1;
    if (*((_DWORD *)v4 + 2) >= 0x41u)
      a2 = (llvm::APInt *)(*(_QWORD *)v4 + 8 * (v2 >> 6));
  }
  else
  {
    *(_QWORD *)a2 = 0;
    LOBYTE(v2) = a1 - 1;
  }
  *(_QWORD *)a2 |= 1 << v2;
}

uint64_t sub_1C4DE96E0(uint64_t this)
{
  unsigned int v1;
  unint64_t v2;

  v1 = *(_DWORD *)(this + 8);
  if (v1 > 0x40)
    return llvm::APInt::flipAllBitsSlowCase(this);
  if (v1)
    v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  else
    v2 = 0;
  *(_QWORD *)this = v2 & ~*(_QWORD *)this;
  return this;
}

void llvm::initializeCostModelAnalysisPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D108);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DE9778;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D108, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DE9778(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Cost Model Analysis";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "cost-model";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBD8;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DE996C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4DE980C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBD8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8135B28;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D108);
  if (v3 != -1)
  {
    v7[0] = sub_1C4DE9778;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D108, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *sub_1C4DE98D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8135A30;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E8135A98;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C4DE9958(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C4DE996C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4DE980C(v0);
}

void sub_1C4DE9998(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4DE99BC(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const llvm::Instruction *v10;
  uint64_t v11;
  int v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = v2 + 72;
    v4 = *(_QWORD *)(v2 + 80);
    if (v4 != v2 + 72)
    {
      do
      {
        v7 = v4 - 24;
        if (!v4)
          v7 = 0;
        v8 = v7 + 40;
        for (i = *(_QWORD *)(v7 + 48); i != v8; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v10 = (const llvm::Instruction *)(i - 24);
          else
            v10 = 0;
          v11 = sub_1C618675C(*(llvm::TargetTransformInfo **)(a1 + 40), v10, dword_1ED7F1030);
          if (v12)
          {
            v13 = (void *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 0x17uLL)
            {
              qmemcpy(v13, "Cost Model: Invalid cost", 24);
              *((_QWORD *)a2 + 4) += 24;
            }
            else
            {
              llvm::raw_ostream::write(a2, "Cost Model: Invalid cost", 0x18uLL);
            }
          }
          else
          {
            v14 = v11;
            v15 = (void *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 0x26uLL)
            {
              qmemcpy(v15, "Cost Model: Found an estimated cost of ", 39);
              *((_QWORD *)a2 + 4) += 39;
            }
            else
            {
              llvm::raw_ostream::write(a2, "Cost Model: Found an estimated cost of ", 0x27uLL);
            }
            llvm::raw_ostream::operator<<(a2, v14);
          }
          v16 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) > 0x11)
          {
            *(_WORD *)(v16 + 16) = 8250;
            *(_OWORD *)v16 = *(_OWORD *)" for instruction: ";
            *((_QWORD *)a2 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(a2, " for instruction: ", 0x12uLL);
          }
          llvm::Value::print(v10, a2, 0);
          v17 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v17)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v17 = 10;
            ++*((_QWORD *)a2 + 4);
          }
        }
        v4 = *(_QWORD *)(v4 + 8);
      }
      while (v4 != v3);
    }
  }
}

void sub_1C4DE9BA8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4DE9BB4(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t AnalysisPass;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v3 = a2;
  a1[4] = a2;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(a1[1] + 24), &llvm::TargetTransformInfoWrapperPass::ID, 1);
  if (!AnalysisPass
    || (v6 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetTransformInfoWrapperPass::ID)) == 0)
  {
    v3 = 0;
    goto LABEL_9;
  }
  v7 = v6;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v8 = *(_QWORD *)(v6 + 56);
  if (!v8)
  {
    sub_1C485C2F0();
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_7;
  }
  v2 = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(&v13, v8, v3);
  v3 = (uint64_t *)(v7 + 64);
  v9 = v13;
  if (*(_BYTE *)(v7 + 72))
  {
    v13 = 0;
    v10 = *v3;
    *v3 = v9;
    if (!v10)
      goto LABEL_7;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v13;
    v13 = 0;
    if (!v11)
      goto LABEL_7;
    goto LABEL_12;
  }
  *(_QWORD *)(v7 + 64) = v13;
  *(_BYTE *)(v7 + 72) = 1;
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v14);
LABEL_9:
  a1[5] = v3;
  return 0;
}

uint64_t sub_1C4DE9CE4(_QWORD *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a2 - 32 * v5);
  }
  v16 = v18;
  v17 = 0x400000000;
  if (v5 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v5, 8);
    v7 = v17;
    v9 = v16;
    v8 = v17;
  }
  else
  {
    v7 = 0;
    if (!v5)
    {
      v13 = v18;
      goto LABEL_9;
    }
    v8 = 0;
    v9 = v18;
  }
  v10 = 32 * v5;
  v11 = &v9[v8];
  do
  {
    v12 = *v6;
    v6 += 4;
    *v11++ = v12;
    v10 -= 32;
  }
  while (v10);
  v13 = v16;
LABEL_9:
  LODWORD(v17) = v7 + v5;
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a1 + 72))(*a1, a2, v13);
  if (v16 != v18)
    free(v16);
  return v14;
}

void sub_1C4DE9E24(__int128 *a1, int **a2, uint64_t *a3)
{
  int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F0FB0, "cost-kind", 9uLL);
  xmmword_1ED7F0FD0 = *a1;
  v6 = *a2;
  dword_1ED7F1030 = **a2;
  byte_1ED7F1044 = 1;
  dword_1ED7F1040 = *v6;
  v7 = *((_DWORD *)a3 + 2);
  if (v7)
  {
    v8 = *a3;
    v9 = v8 + 40 * v7;
    do
    {
      sub_1C6186AEC(*(unsigned __int8 **)v8, *(_QWORD *)(v8 + 8), *(_DWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
      v8 += 40;
    }
    while (v8 != v9);
  }
}

unint64_t sub_1C4DE9EC0(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED7F1060 >= HIDWORD(qword_1ED7F1060))
  {
    v3 = qword_1ED7F1060 + 1;
    if (qword_1ED7F1058 <= a1 && qword_1ED7F1058 + 48 * (unint64_t)qword_1ED7F1060 > a1)
    {
      v5 = a1 - qword_1ED7F1058;
      sub_1C6186BA0(v3);
      return qword_1ED7F1058 + v5;
    }
    else
    {
      sub_1C6186BA0(v3);
    }
  }
  return a1;
}

uint64_t sub_1C4DE9F34()
{
  int v1;
  int *v2;
  __int128 v3;
  void *v4[2];
  _QWORD v5[2];
  int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = "Target cost kind";
  *((_QWORD *)&v3 + 1) = 16;
  v1 = 0;
  v2 = &v1;
  v4[0] = v5;
  v5[0] = "throughput";
  v5[1] = 10;
  v6 = 0;
  v7 = "Reciprocal throughput";
  v8 = 21;
  v9 = "latency";
  v10 = 7;
  v11 = 1;
  v12 = "Instruction latency";
  v13 = 19;
  v14 = "code-size";
  v15 = 9;
  v17 = "Code size";
  v18 = 9;
  v19 = "size-latency";
  v20 = 12;
  v16 = 2;
  v21 = 3;
  v22 = "Code size and latency";
  v23 = 21;
  v4[1] = (void *)0x400000004;
  sub_1C61869EC(&v3, &v2, (uint64_t *)v4);
  if (v4[0] != v5)
    free(v4[0]);
  return __cxa_atexit((void (*)(void *))sub_1C618657C, qword_1ED7F0FB0, &dword_1C475E000);
}

void llvm::CodeMetrics::collectEphemeralValues(uint64_t a1, llvm::AssumptionCache *this, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[256];
  void *v19[2];
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v14 = v18;
  v15 = v18;
  v16 = 32;
  v17 = 0;
  v19[0] = v20;
  v19[1] = (void *)0x1000000000;
  if (!*((_BYTE *)this + 184))
    llvm::AssumptionCache::scanFunction(this);
  v6 = *((unsigned int *)this + 6);
  if ((_DWORD)v6)
  {
    v7 = 32 * v6;
    v8 = (uint64_t *)(*((_QWORD *)this + 2) + 16);
    do
    {
      v9 = *v8;
      if (*v8)
      {
        v10 = sub_1C477672C(a1 + 56, *(_QWORD *)(v9 + 40));
        v11 = *(_QWORD *)(a1 + 64);
        v12 = v11 == *(_QWORD *)(a1 + 56) ? 76 : 72;
        if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(a1 + v12)))
        {
          sub_1C4774094(a3, v9);
          if (v13)
            sub_1C4DEA204(v9, (llvm::SmallPtrSetImplBase *)&v14, (uint64_t)v19);
        }
      }
      v8 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  sub_1C4DEA3FC((llvm::SmallPtrSetImplBase *)&v14, (uint64_t)v19, a3);
  if (v19[0] != v20)
    free(v19[0]);
  if (v15 != v14)
    free(v15);
}

uint64_t sub_1C4DEA204(uint64_t result, llvm::SmallPtrSetImplBase *this, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;

  if (result && *(unsigned __int8 *)(result + 16) - 21 >= 7)
  {
    v5 = *(_DWORD *)(result + 20);
    if ((v5 & 0x40000000) != 0)
    {
      v7 = *(uint64_t **)(result - 8);
      v6 = v5 & 0x7FFFFFF;
      if (!v6)
        return result;
    }
    else
    {
      v6 = v5 & 0x7FFFFFF;
      v7 = (uint64_t *)(result - 32 * v6);
      if (!v6)
        return result;
    }
    v8 = &v7[4 * v6];
    do
    {
      v9 = *v7;
      result = (uint64_t)sub_1C4774094(this, *v7);
      if (v10)
      {
        v11 = *(unsigned __int8 *)(v9 + 16);
        if (v9 && v11 >= 0x1C)
        {
          v13 = v11 - 33;
          if (v13 > 0x37)
            goto LABEL_18;
          if (((1 << v13) & 0x808001D0000010) == 0)
          {
            if (((1 << v13) & 0x8000000000041) != 0)
            {
              v15 = *(_QWORD *)(v9 + 64);
              if (v15 && (*(_BYTE *)(v15 + 17) & 0x30) != 0)
                goto LABEL_18;
              v16 = *(_DWORD *)(v9 + 20);
              if (v16 < 0)
              {
                v17 = v9 - 32 * (v16 & 0x7FFFFFF);
                v20 = *(_QWORD *)(v17 - 8);
                v18 = v17 - 8;
                v19 = v20;
                if (v20)
                {
                  v21 = -v19;
                  do
                  {
                    v22 = *(_DWORD *)(*(_QWORD *)(v18 + v21) + 8);
                    v23 = v22 > 7;
                    v24 = (1 << v22) & 0x83;
                    if (v23 || v24 == 0)
                      goto LABEL_24;
                    v21 += 16;
                  }
                  while (v21);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v9, 45) & 1) != 0
                || (result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44), (_DWORD)result))
              {
LABEL_18:
                result = llvm::Instruction::mayThrow((llvm::Instruction *)v9);
                if ((result & 1) == 0)
                {
                  result = llvm::Instruction::willReturn((llvm::Instruction *)v9);
                  if ((_DWORD)result)
                  {
                    if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
                    {
                      v14 = *(unsigned int *)(a3 + 8);
                      if (v14 >= *(unsigned int *)(a3 + 12))
                      {
                        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
                        v14 = *(unsigned int *)(a3 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v9;
                      ++*(_DWORD *)(a3 + 8);
                    }
                  }
                }
              }
            }
            else if (v13 != 27 || (*(_WORD *)(v9 + 18) & 0x301) == 0)
            {
              goto LABEL_18;
            }
          }
        }
      }
LABEL_24:
      v7 += 4;
    }
    while (v7 != v8);
  }
  return result;
}

llvm::SmallPtrSetImplBase *sub_1C4DEA3FC(llvm::SmallPtrSetImplBase *result, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  llvm::SmallPtrSetImplBase *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::SmallPtrSetImplBase *v10;

  if (*(int *)(a2 + 8) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v6);
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        while (1)
        {
          result = (llvm::SmallPtrSetImplBase *)sub_1C477672C((uint64_t)this, *(_QWORD *)(v8 + 24));
          v9 = *((_QWORD *)this + 1);
          v10 = v9 == *(_QWORD *)this
              ? (llvm::SmallPtrSetImplBase *)((char *)this + 20)
              : (llvm::SmallPtrSetImplBase *)((char *)this + 16);
          if (result == (llvm::SmallPtrSetImplBase *)(v9 + 8 * *(unsigned int *)v10))
            break;
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        sub_1C4774094(this, v7);
        result = (llvm::SmallPtrSetImplBase *)sub_1C4DEA204(v7, v5, a2);
      }
      ++v6;
    }
    while (v6 < *(int *)(a2 + 8));
  }
  return result;
}

void llvm::CodeMetrics::collectEphemeralValues(int a1, llvm::AssumptionCache *this, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _BYTE v14[256];
  void *v15[2];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v10 = v14;
  v11 = v14;
  v12 = 32;
  v13 = 0;
  v15[0] = v16;
  v15[1] = (void *)0x1000000000;
  if (!*((_BYTE *)this + 184))
    llvm::AssumptionCache::scanFunction(this);
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    v7 = (uint64_t *)(*((_QWORD *)this + 2) + 16);
    do
    {
      v8 = *v7;
      if (*v7)
      {
        sub_1C4774094(a3, *v7);
        if (v9)
          sub_1C4DEA204(v8, (llvm::SmallPtrSetImplBase *)&v10, (uint64_t)v15);
      }
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  sub_1C4DEA3FC((llvm::SmallPtrSetImplBase *)&v10, (uint64_t)v15, a3);
  if (v15[0] != v16)
    free(v15[0]);
  if (v11 != v10)
    free(v11);
}

llvm::BasicBlock **llvm::CodeMetrics::analyzeBasicBlock(uint64_t a1, llvm::BasicBlock *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  llvm::BasicBlock **result;
  llvm::BasicBlock *v58;
  llvm::BasicBlock **v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  llvm::BasicBlock **v63;
  int v64;
  unint64_t v66;
  uint64_t v68;
  llvm::BasicBlock *v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[5];

  v72[4] = *MEMORY[0x1E0C80C00];
  v69 = a2;
  v6 = *(unsigned int *)(a1 + 8);
  ++*(_DWORD *)(a1 + 12);
  v7 = (_QWORD *)((char *)a2 + 40);
  v8 = (_QWORD *)*((_QWORD *)a2 + 6);
  if (v8 != (_QWORD *)((char *)a2 + 40))
  {
    v68 = 0;
    v66 = v6;
    v10 = v6;
    while (1)
    {
      v11 = v8 ? (uint64_t)(v8 - 3) : 0;
      v12 = sub_1C477672C((uint64_t)a4, v11);
      v13 = a4[1];
      v14 = v13 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
      if (v12 == (_QWORD *)(v13 + 8 * *v14))
        break;
LABEL_87:
      v8 = (_QWORD *)v8[1];
      if (v8 == v7)
      {
        v46 = v68;
        a2 = v69;
        v6 = v66;
        goto LABEL_99;
      }
    }
    v15 = *(unsigned __int8 *)(v11 + 16);
    if ((v15 - 33) > 0x33 || ((1 << (v15 - 33)) & 0x8000000000041) == 0)
    {
LABEL_31:
      if (v8 && v15 == 59)
      {
        if (*(_BYTE *)(*(_QWORD *)(v11 - 32) + 16) != 16
          || ((v22 = *(_QWORD *)(v11 + 40), (v23 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 80)) != 0)
            ? (v24 = v23 - 24)
            : (v24 = 0),
              v22 != v24 || (*(_WORD *)(v11 + 18) & 0x40) != 0))
        {
          *(_BYTE *)(a1 + 4) = 1;
        }
        v25 = *(_QWORD *)v11;
      }
      else
      {
        v25 = *(_QWORD *)v11;
        if (v15 == 89)
          goto LABEL_43;
      }
      if ((*(_DWORD *)(v25 + 8) & 0xFE) != 0x12)
      {
        v26 = *(_DWORD *)(v25 + 8);
        goto LABEL_45;
      }
LABEL_43:
      ++*(_DWORD *)(a1 + 48);
      v26 = *(unsigned __int8 *)(v25 + 8);
LABEL_45:
      if (v26 == 12 && llvm::Instruction::isUsedOutsideOfBlock((llvm::Instruction *)v11, v69))
        *(_BYTE *)(a1 + 2) = 1;
      if (v15 == 84)
        v27 = v11;
      else
        v27 = 0;
      if (v8 && v15 == 84)
      {
        v28 = *(_QWORD *)(v27 + 64);
        if (v28 && (*(_BYTE *)(v28 + 15) & 1) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(v27, 24))
          *(_BYTE *)(a1 + 2) = 1;
        v29 = *(_QWORD *)(v27 + 64);
        if (v29 && (*(_BYTE *)(v29 + 12) & 0x40) != 0
          || llvm::CallBase::hasFnAttrOnCalledFunction(v27, 6))
        {
          *(_BYTE *)(a1 + 3) = 1;
        }
      }
      if (v8
        && *(_BYTE *)(v11 + 16) == 33
        && ((v30 = *(_QWORD *)(v11 + 64)) != 0 && (*(_BYTE *)(v30 + 15) & 1) != 0
         || llvm::CallBase::hasFnAttrOnCalledFunction(v11, 24)))
      {
        *(_BYTE *)(a1 + 2) = 1;
      }
      v31 = *(_DWORD *)(v11 + 20);
      if ((v31 & 0x40000000) != 0)
      {
        v33 = *(uint64_t **)(v11 - 8);
        v32 = v31 & 0x7FFFFFF;
      }
      else
      {
        v32 = v31 & 0x7FFFFFF;
        v33 = (uint64_t *)(v11 - 32 * v32);
      }
      v70 = v72;
      v71 = 0x400000000;
      if (v32 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v32, 8);
        v34 = v71;
        v36 = v70;
        v35 = v71;
      }
      else
      {
        v34 = 0;
        if (!v32)
        {
          v40 = v72;
LABEL_76:
          LODWORD(v71) = v34 + v32;
          v41 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a3 + 72))(*a3, v11, v40);
          v43 = v42;
          if (v70 != v72)
            free(v70);
          v44 = v68;
          if (v43 == 1)
            v44 = 1;
          if (__OFADD__(v10, v41))
            v10 = ((uint64_t)(v10 + v41) >> 63) ^ 0x8000000000000000;
          else
            v10 += v41;
          v68 = v44;
          if ((_DWORD)v44)
            v45 = 0;
          else
            v45 = v10;
          *(_DWORD *)(a1 + 8) = v45;
          goto LABEL_87;
        }
        v35 = 0;
        v36 = v72;
      }
      v37 = 32 * v32;
      v38 = &v36[v35];
      do
      {
        v39 = *v33;
        v33 += 4;
        *v38++ = v39;
        v37 -= 32;
      }
      while (v37);
      v40 = v70;
      goto LABEL_76;
    }
    v17 = *(v8 - 7);
    if (v17)
    {
      v18 = *(unsigned __int8 *)(v17 + 16);
      if (!*(_BYTE *)(v17 + 16))
      {
        if (*(_QWORD *)(v17 + 24) == v8[6])
        {
          v19 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 176))(*a3, *(v8 - 7));
          v20 = v8[5];
          if ((!v20 || (*(_BYTE *)(v20 + 15) & 8) == 0)
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v8 - 3), 27) & 1) == 0
            && ((v19 ^ 1) & 1) == 0)
          {
            if ((*(_DWORD *)(v17 + 32) & 0xF) != 7)
            {
              if (!a5)
                goto LABEL_92;
              goto LABEL_91;
            }
            v21 = *(_QWORD *)(v17 + 8);
            if (v21)
              LOBYTE(v21) = *(_QWORD *)(v21 + 8) == 0;
            if ((v21 & 1) != 0 || (a5 & 1) != 0)
LABEL_91:
              ++*(_DWORD *)(a1 + 44);
          }
LABEL_92:
          if (v17 == *((_QWORD *)v69 + 7))
          {
            *(_BYTE *)(a1 + 1) = 1;
            if ((v19 & 1) == 0)
              goto LABEL_30;
          }
          else if ((v19 & 1) == 0)
          {
            goto LABEL_30;
          }
        }
LABEL_29:
        ++*(_DWORD *)(a1 + 40);
        goto LABEL_30;
      }
    }
    else
    {
      v18 = MEMORY[0x10];
    }
    if (v18 == 24)
    {
LABEL_30:
      v15 = *(unsigned __int8 *)(v11 + 16);
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  v46 = 0;
  v10 = v6;
LABEL_99:
  v47 = *((_QWORD *)a2 + 5);
  if (v47)
    v48 = v47 - 24;
  else
    v48 = 0;
  if (*(unsigned __int8 *)(v48 + 16) - 29 >= 0xB)
    v48 = 0;
  v49 = *(unsigned __int8 *)(v48 + 16);
  if (v49 == 29)
    ++*(_DWORD *)(a1 + 52);
  v50 = v49 == 32;
  v53 = *(_QWORD *)(a1 + 16);
  v52 = a1 + 16;
  v51 = v53;
  *(_BYTE *)(v52 - 14) |= v50;
  v54 = *(_DWORD *)(v52 + 16);
  if (v54)
  {
    v55 = v54 - 1;
    v56 = v55 & ((a2 >> 4) ^ (a2 >> 9));
    result = (llvm::BasicBlock **)(v51 + 16 * v56);
    v58 = *result;
    if (a2 == *result)
      goto LABEL_121;
    v59 = 0;
    v60 = 1;
    while (v58 != (llvm::BasicBlock *)-4096)
    {
      if (v59)
        v61 = 0;
      else
        v61 = v58 == (llvm::BasicBlock *)-8192;
      if (v61)
        v59 = result;
      v62 = v56 + v60++;
      v56 = v62 & v55;
      result = (llvm::BasicBlock **)(v51 + 16 * v56);
      v58 = *result;
      if (a2 == *result)
        goto LABEL_121;
    }
    if (v59)
      v63 = v59;
    else
      v63 = result;
  }
  else
  {
    v63 = 0;
  }
  result = (llvm::BasicBlock **)sub_1C4DC1798(v52, (uint64_t)&v69, (uint64_t *)&v69, v63);
  *result = v69;
  *((_DWORD *)result + 2) = 0;
LABEL_121:
  v64 = v10 - v6;
  if (__OFSUB__(v10, v6))
    v64 = 0;
  if (v46)
    v64 = 0;
  *((_DWORD *)result + 2) = v64;
  return result;
}

uint64_t llvm::IsConstantOffsetFromGlobal(llvm *this, uint64_t **a2, llvm::GlobalValue **a3, llvm::APInt *a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned int v11;
  llvm::GlobalValue *v12;
  int v13;
  uint64_t *v14;
  llvm::GlobalValue *Section;
  uint64_t v16;
  uint64_t v18;
  llvm::DSOLocalEquivalent **v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  void *__src;
  unsigned int IndexTypeSizeInBits;

  if (!a5)
    goto LABEL_3;
LABEL_2:
  *(_QWORD *)a5 = 0;
  while (1)
  {
LABEL_3:
    v11 = *((unsigned __int8 *)this + 16);
    if (v11 >= 4)
      v12 = 0;
    else
      v12 = this;
    *a2 = (uint64_t *)v12;
    if (v12)
    {
      Section = llvm::GlobalValue::getSection(v12);
      if (v16 == 12 && *(_QWORD *)Section == 0x7274702E6D766C6CLL && *((_DWORD *)Section + 2) == 1752462689)
        return 0;
      v14 = *a2;
      goto LABEL_22;
    }
    if (v11 != 5)
      break;
    v13 = *((unsigned __int16 *)this + 9);
    if (v13 != 47 && v13 != 49)
    {
      if (v13 == 34)
      {
        IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *(_QWORD *)this);
        if (IndexTypeSizeInBits > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
        else
          __src = 0;
        if (llvm::IsConstantOffsetFromGlobal(*((llvm **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), (llvm::Constant *)a2, (llvm::GlobalValue **)&__src, a4, a5, v19)&& llvm::GEPOperator::accumulateConstantOffset((uint64_t)this, a4, (uint64_t)&__src, 0, v20))
        {
          if (*((_DWORD *)a3 + 2) > 0x40u || (v21 = IndexTypeSizeInBits, IndexTypeSizeInBits > 0x40))
          {
            if (&__src != (void **)a3)
            {
              llvm::APInt::reallocate((uint64_t)a3, IndexTypeSizeInBits);
              v23 = *((unsigned int *)a3 + 2);
              if (v23 <= 0x40)
                *a3 = (llvm::GlobalValue *)__src;
              else
                memcpy(*a3, __src, ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            *a3 = (llvm::GlobalValue *)__src;
            *((_DWORD *)a3 + 2) = v21;
          }
          v18 = 1;
        }
        else
        {
          v18 = 0;
        }
        if (IndexTypeSizeInBits >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        return v18;
      }
      return 0;
    }
    this = (llvm *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (a5)
      goto LABEL_2;
  }
  if (v11 != 6)
    return 0;
  if (a5)
    *(_QWORD *)a5 = this;
  v14 = (uint64_t *)*((_QWORD *)this - 4);
  *a2 = v14;
LABEL_22:
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *v14);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
  else
    __src = 0;
  if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
    MEMORY[0x1CAA32F9C](*a3, 0x1000C8000313F17);
  *a3 = (llvm::GlobalValue *)__src;
  *((_DWORD *)a3 + 2) = IndexTypeSizeInBits;
  return 1;
}

llvm::UndefValue *llvm::ConstantFoldLoadThroughBitcast(llvm::Constant **this, llvm::Constant ***a2, llvm::Type *a3, const llvm::DataLayout *a4)
{
  llvm::Constant *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  llvm::Type *v13;
  int v14;
  unint64_t v17;
  int v18;
  llvm::Type *v19;
  llvm::Type *v20;
  uint64_t v21;
  _BOOL4 v22;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL4 v28;
  char v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  llvm::Type *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  llvm::Type *v41;
  llvm *AggregateElement;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  llvm *v53;
  llvm::UndefValue *result;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v7 = *this;
    if (*this == (llvm::Constant *)a2)
      return (llvm::UndefValue *)this;
    sub_1C4768AD0((uint64_t)a3, (uint64_t)a2);
    v9 = v8;
    v11 = v10;
    sub_1C4768AD0((uint64_t)a3, (uint64_t)v7);
    v14 = (int)v13;
    if (v11 == 1 && (_DWORD)v13 != 1 || v12 < v9)
      return 0;
    v17 = v12;
    v18 = *((unsigned __int8 *)this + 16);
    if (v18 == 12)
    {
      result = (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)a2, v13);
    }
    else if ((v18 - 11) <= 1)
    {
      result = llvm::UndefValue::get((llvm::UndefValue *)a2, v13);
    }
    else if (!llvm::Constant::isNullValue((llvm::Constant *)this) || ((_DWORD)a2[1] & 0xFE) == 0xA)
    {
      if (!llvm::Constant::isAllOnesValue((llvm::Constant *)this))
        goto LABEL_15;
      v52 = ((_DWORD)a2[1] & 0xFE) == 0x12 ? *((unsigned __int8 *)*a2[2] + 8) : *((_DWORD *)a2 + 2);
      if (v52 != 13 && v52 > 6)
        goto LABEL_15;
      result = llvm::Constant::getAllOnesValue((llvm::Constant *)a2, v20);
    }
    else
    {
      result = (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)a2, v19);
    }
    if (result)
      return result;
LABEL_15:
    if (v17 != v9 || v14 != v11)
      goto LABEL_22;
    v21 = (uint64_t)v7;
    if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12)
      v21 = **((_QWORD **)v7 + 2);
    v22 = sub_1C4DEB33C((uint64_t)a3, v21);
    v23 = (llvm::Constant *)a2;
    if (((_DWORD)a2[1] & 0xFE) == 0x12)
      v23 = *a2[2];
    if (v22 != sub_1C4DEB33C((uint64_t)a3, (uint64_t)v23))
    {
LABEL_22:
      v24 = (uint64_t)*this;
      sub_1C4768AD0((uint64_t)a3, (uint64_t)a2);
      v26 = (unint64_t)(v25 + 7) >> 3;
      v28 = v27 == 1;
      llvm::DataLayout::getAlignment((uint64_t)a3, (uint64_t)a2);
      v30 = ((1 << v29) + v26 - 1) & -(1 << v29);
      sub_1C4768AD0((uint64_t)a3, v24);
      v32 = v31 == 1;
      v34 = (unint64_t)(v33 + 7) >> 3;
      llvm::DataLayout::getAlignment((uint64_t)a3, v24);
      if (v30 == (((1 << v35) + v34 - 1) & -(1 << v35))
        && ((v28 ^ v32 ^ 1) & 1) != 0
        && *((_BYTE *)a2 + 8) == 18
        && *(_BYTE *)(v24 + 8) == 18
        && *((_DWORD *)a2 + 8) == 3
        && *(_DWORD *)(v24 + 32) == 4
        && *a2[2] == **(llvm::Constant ***)(v24 + 16)
        && *((unsigned __int8 *)llvm::Constant::getAggregateElement((llvm::Constant *)this, (llvm::Type *)3)+ 16)- 11 <= 1)
      {
        v53 = llvm::UndefValue::get(v7, v36);
        v55 = 0x100000000;
        v56 = 2;
        return llvm::ConstantExpr::getShuffleVector((llvm *)this, v53, (int *)&v55, 3, 0);
      }
      goto LABEL_40;
    }
    v37 = *((unsigned __int8 *)v7 + 8);
    if (v37 == 13)
    {
      v38 = 48;
      v39 = 15;
    }
    else
    {
      if (v37 != 15)
      {
        v40 = 49;
        goto LABEL_39;
      }
      v38 = 47;
      v39 = 13;
    }
    v40 = *((unsigned __int8 *)a2 + 8) == v39 ? v38 : 49;
LABEL_39:
    if (llvm::CastInst::castIsValid(v40, *this, (uint64_t)a2))
      return (llvm::UndefValue *)llvm::ConstantExpr::getCast(v40);
LABEL_40:
    if ((*((_DWORD *)v7 + 2) & 0xFC | 2) != 0x12)
      return 0;
    if (*((_DWORD *)v7 + 2) == 16)
      break;
    if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12)
    {
      v44 = *((_QWORD *)v7 + 3);
      sub_1C4768AD0((uint64_t)a3, v44);
      v46 = v45;
      v48 = v47;
      sub_1C4768AD0((uint64_t)a3, v44);
      v51 = v50;
      result = 0;
      if (v46 != ((v51 + 7) & 0xFFFFFFFFFFFFFFF8) || v48 != (v49 == 1))
        return result;
    }
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)this, 0);
LABEL_50:
    this = (llvm::Constant **)AggregateElement;
    if (!AggregateElement)
      return 0;
  }
  v41 = 0;
  while (1)
  {
    result = llvm::Constant::getAggregateElement((llvm::Constant *)this, v41);
    if (!result)
      return result;
    AggregateElement = result;
    v41 = (llvm::Type *)((_DWORD)v41 + 1);
    sub_1C4768AD0((uint64_t)a3, *(_QWORD *)result);
    if (v43)
      goto LABEL_50;
  }
}

llvm::UndefValue *llvm::ConstantFoldLoadFromUniformValue(llvm *this, llvm::Constant *a2, llvm::Type *a3)
{
  int v4;
  llvm::Type *v6;
  llvm::Type *v7;
  unsigned int v9;

  v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get(a2, a2);
  if ((v4 - 11) <= 1)
    return llvm::UndefValue::get(a2, a2);
  if (llvm::Constant::isNullValue(this) && (*((_DWORD *)a2 + 2) & 0xFE) != 0xA)
    return (llvm::UndefValue *)llvm::Constant::getNullValue(a2, v6);
  if (llvm::Constant::isAllOnesValue(this))
  {
    v9 = (*((_DWORD *)a2 + 2) & 0xFE) == 0x12
       ? *(unsigned __int8 *)(**((_QWORD **)a2 + 2) + 8)
       : *((_DWORD *)a2 + 2);
    if (v9 == 13 || v9 <= 6)
      return llvm::Constant::getAllOnesValue(a2, v7);
  }
  return 0;
}

BOOL sub_1C4DEB33C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  __int32 *v4;
  size_t v5;
  __int32 *v6;
  __int32 *v7;

  result = 0;
  if (a2 && *(_DWORD *)(a2 + 8) == 15)
  {
    v4 = *(__int32 **)(a1 + 384);
    v5 = *(unsigned int *)(a1 + 392);
    v6 = wmemchr(v4, *(_DWORD *)(a2 + 8) >> 8, v5);
    if (v6)
      v7 = v6;
    else
      v7 = &v4[v5];
    return v5 != v7 - v4;
  }
  return result;
}

llvm::UndefValue *llvm::ConstantFoldLoadFromConst(llvm::Type **this, llvm::Constant ***a2, const void **a3, const llvm::APInt *a4, const llvm::DataLayout *a5)
{
  uint64_t v9;
  llvm::UndefValue *AggregateElement;
  _QWORD *v11;
  int v12;
  int64_t v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v20;
  int64_t v21;
  unint64_t v22;
  unsigned int v23;
  llvm::APInt *v24;
  unsigned int v25;
  llvm::APInt *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  llvm::Type *v30;
  llvm::Type **v31;
  llvm::APInt *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::UndefValue *result;
  llvm::Type *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  char v41;
  llvm::Type *v42;
  int v43;
  llvm::Type *v44;
  llvm::Type *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  unsigned int v51;
  llvm::Type *v52;
  llvm::APInt *v53;
  unsigned int v54;
  _QWORD v55[7];

  v55[6] = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned int *)a3 + 2);
  v51 = v9;
  if (v9 > 0x40)
  {
    v11 = (_QWORD *)operator new[]();
    v50 = v11;
    memcpy(v11, *a3, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    v12 = 0;
    v13 = (unint64_t)(v9 + 63) >> 6;
    do
    {
      v14 = v13-- < 1;
      if (v14)
        break;
      v15 = v11[v13];
      v12 += __clz(v15);
    }
    while (!v15);
    v16 = v9 | 0xFFFFFFC0;
    if ((v9 & 0x3F) == 0)
      v16 = 0;
    AggregateElement = (llvm::UndefValue *)this;
    if (v12 + v16 == (_DWORD)v9)
      goto LABEL_50;
  }
  else
  {
    v50 = *a3;
    AggregateElement = (llvm::UndefValue *)this;
    if (!v50)
      goto LABEL_51;
  }
  v17 = *((unsigned __int8 *)this + 16);
  v14 = v17 > 0xF;
  v18 = (1 << v17) & 0xC700;
  if (v14 || v18 == 0)
  {
    AggregateElement = 0;
    goto LABEL_48;
  }
  v52 = *this;
  llvm::DataLayout::getGEPIndicesForOffset(a4, &v52, (llvm::APInt *)&v50, &v53);
  if (v51 > 0x40)
  {
    v20 = 0;
    v21 = ((unint64_t)v51 + 63) >> 6;
    do
    {
      v14 = v21-- < 1;
      if (v14)
        break;
      v22 = v50[v21];
      v20 += __clz(v22);
    }
    while (!v22);
    v23 = v51 | 0xFFFFFFC0;
    if ((v51 & 0x3F) == 0)
      v23 = 0;
    if (v20 + v23 != v51)
      goto LABEL_37;
  }
  else if (v50)
  {
    goto LABEL_37;
  }
  v24 = v53;
  v25 = *((_DWORD *)v53 + 2);
  if (v25 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v53) == v25)
      goto LABEL_27;
  }
  else if (!*(_QWORD *)v53)
  {
LABEL_27:
    v26 = (llvm::APInt *)((char *)v24 + 16);
    v27 = 16 * v54 - 16;
    AggregateElement = (llvm::UndefValue *)this;
    while (v27)
    {
      v28 = *((_DWORD *)v26 + 2);
      v29 = v28 - 1;
      if (v28 > 0x40)
      {
        v31 = *(llvm::Type ***)v26;
        if (((*(_QWORD *)(*(_QWORD *)v26 + 8 * (v29 >> 6)) >> v29) & 1) != 0
          || v28 - llvm::APInt::countLeadingZerosSlowCase(v26) > 0x1F)
        {
          goto LABEL_37;
        }
        v30 = *v31;
      }
      else
      {
        v30 = *(llvm::Type **)v26;
        if ((*(_QWORD *)v26 & ((1 << v29) | 0xFFFFFFFF80000000)) != 0)
          goto LABEL_37;
      }
      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, v30);
      v26 = (llvm::APInt *)((char *)v26 + 16);
      v27 -= 16;
      if (!AggregateElement)
        goto LABEL_38;
    }
    goto LABEL_38;
  }
LABEL_37:
  AggregateElement = 0;
LABEL_38:
  v32 = v53;
  if (v54)
  {
    v33 = 16 * v54;
    do
    {
      if (*(_DWORD *)((char *)v32 + v33 - 8) >= 0x41u)
      {
        v34 = *(_QWORD *)((char *)v32 + v33 - 16);
        if (v34)
          MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      }
      v33 -= 16;
    }
    while (v33);
    v32 = v53;
  }
  if (v32 != (llvm::APInt *)v55)
    free(v32);
  LODWORD(v9) = v51;
LABEL_48:
  if (v9 >= 0x41)
  {
    v11 = v50;
    if (v50)
LABEL_50:
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  }
LABEL_51:
  if (AggregateElement)
  {
    result = llvm::ConstantFoldLoadThroughBitcast((llvm::Constant **)AggregateElement, a2, a4, a4);
    if (result)
      return result;
  }
  v36 = *this;
  sub_1C4768AD0((uint64_t)a4, (uint64_t)*this);
  v38 = v37;
  v40 = v39 == 1;
  llvm::DataLayout::getAlignment((uint64_t)a4, (uint64_t)v36);
  if (!v40
    && (sub_1C4DA9220((llvm::APInt *)a3, ((1 << v41) + ((unint64_t)(v38 + 7) >> 3) - 1) & -(1 << v41)) & 1) == 0)
  {
    return llvm::UndefValue::get((llvm::UndefValue *)a2, v42);
  }
  v43 = *((unsigned __int8 *)this + 16);
  if (v43 == 12)
  {
    result = (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)a2, v42);
LABEL_70:
    if (result)
      return result;
    goto LABEL_59;
  }
  if ((v43 - 11) <= 1)
  {
    result = llvm::UndefValue::get((llvm::UndefValue *)a2, v42);
    goto LABEL_70;
  }
  if (llvm::Constant::isNullValue((llvm::Constant *)this) && ((_DWORD)a2[1] & 0xFE) != 0xA)
  {
    result = (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)a2, v44);
    goto LABEL_70;
  }
  if (llvm::Constant::isAllOnesValue((llvm::Constant *)this))
  {
    v49 = ((_DWORD)a2[1] & 0xFE) == 0x12 ? *((unsigned __int8 *)*a2[2] + 8) : *((_DWORD *)a2 + 2);
    if (v49 == 13 || v49 <= 6)
    {
      result = llvm::Constant::getAllOnesValue((llvm::Constant *)a2, v45);
      goto LABEL_70;
    }
  }
LABEL_59:
  v46 = *((_DWORD *)a3 + 2);
  if (v46 - sub_1C4959174((llvm::APInt *)a3) + 1 > 0x40)
    return 0;
  v47 = *((_DWORD *)a3 + 2);
  v48 = v47 > 0x40 ? *(_QWORD *)*a3 : (uint64_t)((_QWORD)*a3 << -(char)v47) >> -(char)v47;
  result = (llvm::UndefValue *)sub_1C4DEB830((uint64_t *)this, (uint64_t)a2, v48, a4);
  if (!result)
    return 0;
  return result;
}

llvm::Value **sub_1C4DEB830(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::DataLayout *a4)
{
  unsigned int v8;
  BOOL v9;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  char v23;
  int v24;
  const llvm::APInt *v25;
  uint64_t v26;
  unint64_t v27;
  llvm::Constant *v28;
  int isNullValue;
  llvm::Type *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  llvm::UndefValue *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _OWORD v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 8);
  if (v8 == 13)
  {
    v14 = v8 >> 8;
    if (v14 - 257 >= 0xFFFFFF00)
    {
      v17 = (v14 + 7) >> 3;
      if (-(uint64_t)v17 < a3)
      {
        v18 = *a1;
        sub_1C4768AD0((uint64_t)a4, *a1);
        v20 = v19;
        v22 = v21 == 1;
        llvm::DataLayout::getAlignment((uint64_t)a4, v18);
        if (v22)
          return 0;
        if ((uint64_t)(((1 << v23) + ((unint64_t)(v20 + 7) >> 3) - 1) & -(1 << v23)) > a3)
        {
          memset(v57, 0, sizeof(v57));
          v24 = sub_1C4DF57F0((unsigned __int8 *)a1, a3 & ~(a3 >> 63), (_BYTE *)v57 + (-a3 & (a3 >> 63)), v17 + (a3 & (a3 >> 63)), a4);
          v15 = 0;
          if (v24)
          {
            v56 = *(_DWORD *)(a2 + 8) >> 8;
            if (v56 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
            else
              v55 = 0;
            if (*(_BYTE *)a4)
            {
              v26 = v56;
              if (v56 > 0x40)
              {
                *(_QWORD *)v55 = LOBYTE(v57[0]);
                bzero((void *)(v55 + 8), (((unint64_t)(v26 + 63) >> 3) - 8) & 0xFFFFFFF8);
              }
              else
              {
                if (v56)
                  v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
                else
                  LOBYTE(v27) = 0;
                v55 = v27 & LOBYTE(v57[0]);
              }
              v42 = v17 - 1;
              if (v17 != 1)
              {
                v43 = (unsigned __int8 *)v57 + 1;
                do
                {
                  sub_1C4888094((uint64_t)&v55, 8u);
                  v45 = *v43++;
                  v44 = v45;
                  if (v56 > 0x40)
                  {
                    *(_QWORD *)v55 |= v44;
                  }
                  else
                  {
                    v46 = v55 | v44;
                    if (v56)
                      v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
                    else
                      v47 = 0;
                    v55 = v47 & v46;
                  }
                  --v42;
                }
                while (v42);
              }
            }
            else
            {
              v39 = *((unsigned __int8 *)v57 + v17 - 1);
              v40 = v56;
              if (v56 > 0x40)
              {
                *(_QWORD *)v55 = v39;
                bzero((void *)(v55 + 8), (((unint64_t)(v40 + 63) >> 3) - 8) & 0xFFFFFFF8);
              }
              else
              {
                if (v56)
                  v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
                else
                  v41 = 0;
                v55 = v41 & v39;
              }
              if (v17 != 1)
              {
                v51 = v17 - 2;
                do
                {
                  sub_1C4888094((uint64_t)&v55, 8u);
                  v52 = *((unsigned __int8 *)v57 + v51);
                  if (v56 > 0x40)
                  {
                    *(_QWORD *)v55 |= v52;
                  }
                  else
                  {
                    v53 = v55 | v52;
                    if (v56)
                      v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
                    else
                      v54 = 0;
                    v55 = v54 & v53;
                  }
                  --v51;
                }
                while (v51 != -1);
              }
            }
            v15 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, (llvm::LLVMContext *)&v55, v25);
            if (v56 >= 0x41 && v55)
              MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
          }
          return (llvm::Value **)v15;
        }
      }
      return (llvm::Value **)llvm::UndefValue::get((llvm::UndefValue *)a2, (llvm::Type *)a2);
    }
    return 0;
  }
  if (v8 == 19)
    return 0;
  v9 = (v8 & 0xFE) != 0x12 && v8 >= 7u;
  if (v9 && v8 != 15)
    return 0;
  v11 = *(_QWORD **)*a1;
  sub_1C4768AD0((uint64_t)a4, a2);
  LODWORD(v57[0]) = v12;
  if (v12 <= 63)
  {
    if (v12 <= 31)
    {
      switch(v12)
      {
        case 16:
          v13 = (_QWORD *)(*v11 + 1936);
          goto LABEL_34;
        case 8:
          v13 = (_QWORD *)(*v11 + 1912);
          goto LABEL_34;
        case 1:
          v13 = (_QWORD *)(*v11 + 1888);
          goto LABEL_34;
      }
    }
    else if (v12 == 32)
    {
      v13 = (_QWORD *)(*v11 + 1960);
      goto LABEL_34;
    }
  }
  else
  {
    if (v12 == 64)
    {
      v13 = (_QWORD *)(*v11 + 1984);
      goto LABEL_34;
    }
    if (v12 == 128)
    {
      v13 = (_QWORD *)(*v11 + 2008);
      goto LABEL_34;
    }
  }
  v48 = sub_1C5270984(*v11 + 2168, v57);
  v13 = (_QWORD *)*((_QWORD *)v48 + 1);
  if (!v13)
  {
    v49 = v48;
    v13 = (_QWORD *)sub_1C484358C(*v11 + 2040, 24, 3);
    v50 = v57[0];
    *v13 = v11;
    v13[2] = 0;
    v13[1] = (v50 << 8) | 0xDu;
    *((_QWORD *)v49 + 1) = v13;
  }
LABEL_34:
  v28 = (llvm::Constant *)sub_1C4DEB830(a1, v13, a3, a4);
  v15 = (unsigned __int8 *)v28;
  if (!v28)
    return (llvm::Value **)v15;
  isNullValue = llvm::Constant::isNullValue(v28);
  v31 = *(_DWORD *)(a2 + 8);
  v32 = *(_DWORD *)(a2 + 8) & 0xFE;
  if (isNullValue)
  {
    if (v32 != 10)
      return llvm::Constant::getNullValue((llvm::Constant *)a2, v30);
  }
  else if (v32 == 18)
  {
    v31 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  }
  v33 = a2;
  if (v31 == 15)
  {
    llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)a2);
    v33 = v34;
  }
  v35 = sub_1C4DEEB60(v15, v33, a4);
  v15 = (unsigned __int8 *)v35;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v36 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8);
  else
    v36 = *(_DWORD *)(a2 + 8);
  if (v36 != 15)
    return (llvm::Value **)v15;
  v37 = llvm::Constant::isNullValue(v35);
  v38 = *(_DWORD *)(a2 + 8) & 0xFE;
  v30 = (llvm::Type *)a2;
  if (v37)
  {
    if (v38 != 10)
      return llvm::Constant::getNullValue((llvm::Constant *)a2, v30);
  }
  else if (v38 == 18)
  {
    v30 = **(llvm::Type ***)(a2 + 16);
  }
  if (sub_1C4DEB33C((uint64_t)a4, (uint64_t)v30))
    return 0;
  return (llvm::Value **)sub_1C537D3B8((llvm *)0x30, (uint64_t)v15, (llvm::Constant *)a2, 0);
}

void *llvm::ConstantFoldLoadFromConstPtr(uint64_t a1, uint64_t a2, const void **a3, llvm::DataLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  llvm::GlobalValue *v12;
  const llvm::DataLayout *v13;
  uint64_t v14;
  llvm::Module *v15;
  void *result;
  llvm *UnderlyingObject;
  llvm *v18;
  llvm::GlobalValue *Section;
  llvm::Type *v20;
  llvm::Module *v21;
  unsigned __int8 *v22;
  int v23;
  llvm::Type *v24;
  llvm::Type *v25;
  unsigned int v26;
  BOOL v27;

  v10 = llvm::Value::stripAndAccumulateConstantOffsets(a1, a4, a3, 1, 0, 0, a7);
  v11 = v10;
  if (!v10
    || *(_BYTE *)(v10 + 16) != 3
    || (*(_BYTE *)(v10 + 80) & 1) == 0
    || (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 0
    || (v12 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v10), v14 == 12)
    && (*(_QWORD *)v12 == *(_QWORD *)"llvm.ptrauth"
      ? (v27 = *((unsigned int *)v12 + 2) == (unint64_t)*(unsigned int *)"auth")
      : (v27 = 0),
        v27)
    || (*(_DWORD *)(v11 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v11 + 32) & 0xF)) & 0x614) != 0
    || (v15 = *(llvm::Module **)(v11 + 40)) != 0
    && llvm::Module::getSemanticInterposition(v15)
    && (*(_BYTE *)(v11 + 33) & 0x40) == 0
    || (*(_BYTE *)(v11 + 80) & 2) != 0
    || (result = llvm::ConstantFoldLoadFromConst(*(llvm::Type ***)(v11 - 32), (llvm::Constant ***)a2, a3, a4, v13)) == 0)
  {
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)v11, (const llvm::Value *)6);
    if (!UnderlyingObject)
      return 0;
    v18 = UnderlyingObject;
    if (*((_BYTE *)UnderlyingObject + 16) != 3
      || (*((_BYTE *)UnderlyingObject + 80) & 1) == 0
      || (*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF) == 0)
    {
      return 0;
    }
    Section = llvm::GlobalValue::getSection(UnderlyingObject);
    if (v20 == (llvm::Type *)12
      && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
      && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
    {
      return 0;
    }
    if ((*((_DWORD *)v18 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)v18 + 8) & 0xF)) & 0x614) != 0)
      return 0;
    v21 = (llvm::Module *)*((_QWORD *)v18 + 5);
    if (v21)
    {
      if (llvm::Module::getSemanticInterposition(v21) && (*((_BYTE *)v18 + 33) & 0x40) == 0)
        return 0;
    }
    if ((*((_BYTE *)v18 + 80) & 2) != 0)
      return 0;
    v22 = (unsigned __int8 *)*((_QWORD *)v18 - 4);
    v23 = v22[16];
    if (v23 == 12)
    {
      result = llvm::PoisonValue::get((llvm::PoisonValue *)a2, v20);
    }
    else if ((v23 - 11) <= 1)
    {
      result = llvm::UndefValue::get((llvm::UndefValue *)a2, v20);
    }
    else if (!llvm::Constant::isNullValue((llvm::Constant *)v22) || (*(_DWORD *)(a2 + 8) & 0xFE) == 0xA)
    {
      if (!llvm::Constant::isAllOnesValue((llvm::Constant *)v22))
        return 0;
      v26 = (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12
          ? *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8)
          : *(_DWORD *)(a2 + 8);
      if (v26 != 13 && v26 > 6)
        return 0;
      result = llvm::Constant::getAllOnesValue((llvm::Constant *)a2, v25);
    }
    else
    {
      result = llvm::Constant::getNullValue((llvm::Constant *)a2, v24);
    }
    if (!result)
      return 0;
  }
  return result;
}

void *llvm::ConstantFoldLoadFromConstPtr(llvm *this, llvm::Constant *a2, llvm::Type *a3, const llvm::DataLayout *a4)
{
  unsigned int IndexTypeSizeInBits;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  void *v13;
  size_t v16;
  void *v17;
  unsigned int v18;
  void *__src;
  unsigned int v20;

  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a3, *(_QWORD *)this);
  v20 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v11 = v20;
    v18 = v20;
    if (v20 > 0x40)
    {
      v16 = (((unint64_t)v20 + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      v12 = __src;
      memcpy(v17, __src, v16);
      goto LABEL_4;
    }
    v12 = __src;
  }
  else
  {
    v11 = IndexTypeSizeInBits;
    v12 = 0;
    __src = 0;
    v18 = IndexTypeSizeInBits;
  }
  v17 = v12;
LABEL_4:
  v13 = llvm::ConstantFoldLoadFromConstPtr((uint64_t)this, (uint64_t)a2, (const void **)&v17, a3, v8, v9, v10);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v11 >= 0x41 && v12 != 0)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  return v13;
}

llvm::UndefValue *llvm::ConstantFoldInstruction(uint64_t a1, llvm::Type *a2, llvm::DSOLocalEquivalent **a3)
{
  int v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t *v17;
  llvm::UndefValue *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::UndefValue *v21;
  uint64_t v22;
  unsigned int v23;
  llvm::UndefValue *v24;
  BOOL v25;
  llvm::UndefValue *InsertValue;
  uint64_t v27;
  void *v29;
  uint64_t v30;
  _BYTE v31[64];
  _QWORD v32[10];

  v32[9] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v6 == 83)
  {
    v29 = (void *)1;
    for (i = 8; i != 72; i += 16)
      *(void **)((char *)&v29 + i) = (void *)-4096;
    v8 = *(_DWORD *)(a1 + 20);
    if ((v8 & 0x40000000) != 0)
    {
      v10 = *(uint64_t **)(a1 - 8);
      v9 = v8 & 0x7FFFFFF;
      if (!v9)
        goto LABEL_33;
    }
    else
    {
      v9 = v8 & 0x7FFFFFF;
      v10 = (uint64_t *)(a1 - 32 * v9);
      if (!v9)
        goto LABEL_33;
    }
    v21 = 0;
    v22 = 32 * v9;
    do
    {
      v23 = *(unsigned __int8 *)(*v10 + 16);
      if (v23 - 11 >= 2)
      {
        if (v23 > 0x14)
          goto LABEL_45;
        v24 = sub_1C4DEC528(*v10, a2, (uint64_t)a3, (uint64_t)&v29);
        if (v21)
        {
          v25 = v24 == v21;
          v21 = v24;
          if (!v25)
          {
LABEL_45:
            v21 = 0;
            goto LABEL_46;
          }
        }
        else
        {
          v21 = v24;
        }
      }
      v10 += 4;
      v22 -= 32;
    }
    while (v22);
    if (v21)
      goto LABEL_46;
LABEL_33:
    v21 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, a2);
LABEL_46:
    if ((v29 & 1) == 0)
    {
      v27 = v30;
LABEL_61:
      MEMORY[0x1CAA32FB4](v27, 8);
      return v21;
    }
    return v21;
  }
  v11 = *(_DWORD *)(a1 + 20);
  if ((v11 & 0x40000000) != 0)
  {
    v13 = *(_QWORD *)(a1 - 8);
    v12 = v11 & 0x7FFFFFF;
  }
  else
  {
    v12 = v11 & 0x7FFFFFF;
    v13 = a1 - 32 * v12;
  }
  v14 = 32 * v12;
  if (v12)
  {
    v15 = 32 * v12;
    while (*(unsigned __int8 *)(*(_QWORD *)v13 + 16) < 0x15u)
    {
      v13 += 32;
      v15 -= 32;
      if (!v15)
        goto LABEL_15;
    }
    return 0;
  }
LABEL_15:
  v32[0] = 1;
  for (j = 1; j != 9; j += 2)
    v32[j] = -4096;
  v29 = v31;
  v30 = 0x800000000;
  if ((v11 & 0x40000000) != 0)
  {
    v17 = *(uint64_t **)(a1 - 8);
    if (v12)
    {
      do
      {
LABEL_19:
        v18 = sub_1C4DEC528(*v17, a2, (uint64_t)a3, (uint64_t)v32);
        v19 = v30;
        if (v30 >= (unint64_t)HIDWORD(v30))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
          v19 = v30;
        }
        *((_QWORD *)v29 + v19) = v18;
        v20 = (v30 + 1);
        LODWORD(v30) = v30 + 1;
        v17 += 4;
        v14 -= 32;
      }
      while (v14);
      v6 = *(unsigned __int8 *)(a1 + 16);
      if (!a1)
        goto LABEL_40;
      goto LABEL_38;
    }
  }
  else
  {
    v17 = (uint64_t *)(a1 - 32 * v12);
    if (v12)
      goto LABEL_19;
  }
  v20 = 0;
  if (!a1)
    goto LABEL_40;
LABEL_38:
  if ((v6 - 83) >= 0xFFFFFFFE)
  {
    InsertValue = llvm::ConstantFoldCompareInstOperands(*(_WORD *)(a1 + 18) & 0x3F, *(_QWORD *)v29, *((_QWORD *)v29 + 1), a2, (uint64_t)a3);
    goto LABEL_56;
  }
LABEL_40:
  if (a1 && v6 == 60)
  {
    if ((*(_WORD *)(a1 + 18) & 1) != 0)
    {
      v21 = 0;
      goto LABEL_57;
    }
    InsertValue = (llvm::UndefValue *)llvm::ConstantFoldLoadFromConstPtr(*(llvm **)v29, *(llvm::Constant **)a1, a2, (const llvm::DataLayout *)v20);
  }
  else if (a1 && v6 == 93)
  {
    InsertValue = (llvm::UndefValue *)llvm::ConstantExpr::getInsertValue(*(llvm::Constant **)v29, *((uint64_t **)v29 + 1), *(_DWORD **)(a1 + 64), *(unsigned int *)(a1 + 72), 0);
  }
  else if (a1 && v6 == 92)
  {
    InsertValue = llvm::ConstantExpr::getExtractValue(*(llvm::UndefValue **)v29, *(unsigned int **)(a1 + 64), *(unsigned int *)(a1 + 72), 0);
  }
  else
  {
    InsertValue = sub_1C4DECDA4((int **)a1, (llvm *)(v6 - 28), (llvm::Type **)v29, v20, (__int32 **)a2, a3);
  }
LABEL_56:
  v21 = InsertValue;
LABEL_57:
  if (v29 != v31)
    free(v29);
  if ((v32[0] & 1) == 0)
  {
    v27 = v32[1];
    goto LABEL_61;
  }
  return v21;
}

llvm::UndefValue *sub_1C4DEC528(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  llvm::UndefValue *Impl;
  int v5;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  llvm *v34;
  uint64_t v35;
  llvm::FixedVectorType ***v36;
  _QWORD **v37;
  uint64_t *v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[9];

  Impl = (llvm::UndefValue *)a1;
  v42[8] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 10 && v5 != 5)
    return Impl;
  v40 = v42;
  v41 = 0x800000000;
  v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(uint64_t **)(a1 - 8);
    v11 = v10 & 0x7FFFFFF;
    if (v11)
      goto LABEL_8;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (uint64_t *)(a1 - 32 * v11);
    if (v11)
    {
LABEL_8:
      v13 = &v12[4 * v11];
      while (1)
      {
        v14 = *v12;
        v15 = *(unsigned __int8 *)(*v12 + 16);
        if (v15 != 10 && v15 != 5)
        {
          v28 = *v12;
          goto LABEL_39;
        }
        v17 = *(_DWORD *)a4;
        if ((*(_DWORD *)a4 & 1) != 0)
        {
          v18 = 4;
          v19 = a4 + 8;
        }
        else
        {
          v19 = *(_QWORD *)(a4 + 8);
          v18 = *(_DWORD *)(a4 + 16);
          if (!v18)
          {
            v21 = 0;
            goto LABEL_23;
          }
        }
        v20 = v18 - 1;
        LODWORD(v21) = (v18 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v22 = (uint64_t *)(v19 + 16 * v21);
        v23 = *v22;
        if (*v22 == v14)
          goto LABEL_24;
        v24 = 1;
        while (v23 != -4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & v20;
          v23 = *(_QWORD *)(v19 + 16 * v21);
          if (v23 == v14)
            goto LABEL_23;
        }
        if ((v17 & 1) != 0)
        {
          v19 = a4 + 8;
          v21 = 4;
        }
        else
        {
          v19 = *(_QWORD *)(a4 + 8);
          v21 = *(unsigned int *)(a4 + 16);
        }
LABEL_23:
        v22 = (uint64_t *)(v19 + 16 * v21);
LABEL_24:
        if ((v17 & 1) != 0)
          v26 = a4 + 8;
        else
          v26 = *(_QWORD *)(a4 + 8);
        v27 = *(_DWORD *)(a4 + 16);
        if ((*(_DWORD *)a4 & 1) != 0)
          v27 = 4;
        if ((uint64_t *)(v26 + 16 * v27) == v22)
        {
          v28 = sub_1C4DEC528(*v12, a2, a3, a4);
          v39 = 0;
          if ((sub_1C4DF5C10(a4, v14, &v39) & 1) == 0)
          {
            if ((*(_DWORD *)a4 & 1) != 0)
              v29 = 4;
            else
              v29 = *(_DWORD *)(a4 + 16);
            v30 = *(_DWORD *)a4 >> 1;
            if (4 * v30 + 4 >= 3 * v29)
            {
              v29 *= 2;
            }
            else if (v29 + ~v30 - *(_DWORD *)(a4 + 4) > v29 >> 3)
            {
LABEL_36:
              v31 = v39;
              *(_DWORD *)a4 += 2;
              if (*v31 != -4096)
                --*(_DWORD *)(a4 + 4);
              *v31 = v14;
              v31[1] = v28;
              goto LABEL_39;
            }
            sub_1C4DF5CB4(a4, v29);
            v39 = 0;
            sub_1C4DF5C10(a4, v14, &v39);
            goto LABEL_36;
          }
        }
        else
        {
          v28 = v22[1];
        }
LABEL_39:
        v32 = v41;
        if (v41 >= (unint64_t)HIDWORD(v41))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 8);
          v32 = v41;
        }
        *((_QWORD *)v40 + v32) = v28;
        v33 = (v41 + 1);
        LODWORD(v41) = v41 + 1;
        v12 += 4;
        if (v12 == v13)
        {
          v5 = *((unsigned __int8 *)Impl + 16);
          goto LABEL_51;
        }
      }
    }
  }
  v33 = 0;
LABEL_51:
  if (v5 == 5)
  {
    v34 = (llvm *)*((unsigned __int16 *)Impl + 9);
    if (((_DWORD)v34 - 53) > 1)
      v35 = sub_1C4DECDA4(Impl, v34, (int)v40, v33, a2);
    else
      v35 = (uint64_t)llvm::ConstantFoldCompareInstOperands(*((unsigned __int16 *)Impl + 12), *(_QWORD *)v40, *((_QWORD *)v40 + 1), a2, a3);
  }
  else
  {
    v36 = (llvm::FixedVectorType ***)v40;
    Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v40, (llvm::Type *)v33);
    if (Impl)
      goto LABEL_58;
    llvm::FixedVectorType::get(**v36, (llvm::Type *)v33);
    v35 = sub_1C537B3A4(**v37 + 1288, (uint64_t)v37, v36, v33);
  }
  Impl = (llvm::UndefValue *)v35;
LABEL_58:
  if (v40 != v42)
    free(v40);
  return Impl;
}

llvm::UndefValue *llvm::ConstantFoldCompareInstOperands(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5)
{
  BOOL v9;
  _QWORD *IntegerCast;
  int v11;
  llvm::Type ***v12;
  llvm::Type *v13;
  llvm::Constant *v14;
  uint64_t v15;
  int v16;
  llvm::Type ***v17;
  llvm::Type ***v18;
  uint64_t NullValue;
  uint64_t v20;
  llvm::Constant ***v21;
  BOOL v22;
  llvm *v23;
  llvm::Constant *v24;
  const llvm::DataLayout *v25;
  llvm::DSOLocalEquivalent **v26;
  uint64_t v27;
  uint64_t v30;
  uint64_t IndexTypeSizeInBits;
  uint64_t v32;
  uint64_t v33;
  const llvm::APInt *v34;
  uint64_t v35;
  llvm::ConstantExpr *v36;
  unsigned __int8 *v37;
  const llvm::APInt *v38;
  llvm::Constant *v39;
  uint64_t v41;
  const void *v42;
  unsigned int v43;
  const void *v44;
  unsigned int v45;

  v9 = *(_BYTE *)(a2 + 16) != 5;
  while (1)
  {
    IntegerCast = (_QWORD *)a2;
    if (!v9)
      break;
LABEL_24:
    if (*(_BYTE *)(a3 + 16) != 5)
      goto LABEL_49;
    v9 = 0;
    a1 = dword_1C85F29B8[(int)a1];
    a2 = a3;
    a3 = (uint64_t)IntegerCast;
  }
  while (1)
  {
    if (llvm::Constant::isNullValue((llvm::Constant *)a3))
    {
      v11 = *((unsigned __int16 *)IntegerCast + 9);
      if (v11 == 47)
      {
        llvm::DataLayout::getIntPtrType(a4, *(llvm::Type **)IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)]);
        if (*IntegerCast == v15)
        {
          v21 = (llvm::Constant ***)&IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)];
          IntegerCast = *v21;
          v14 = **v21;
          goto LABEL_18;
        }
      }
      else if (v11 == 48)
      {
        llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)*IntegerCast);
        IntegerCast = (_QWORD *)llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)], v12, 0);
        v14 = (llvm::Constant *)*IntegerCast;
LABEL_18:
        NullValue = (uint64_t)llvm::Constant::getNullValue(v14, v13);
LABEL_19:
        a3 = NullValue;
        goto LABEL_20;
      }
    }
    if (!a3)
      break;
    if (*(_BYTE *)(a3 + 16) != 5)
      break;
    v16 = *((unsigned __int16 *)IntegerCast + 9);
    if (v16 != *(unsigned __int16 *)(a3 + 18))
      break;
    if (v16 != 47)
    {
      if (v16 != 48)
        break;
      llvm::DataLayout::getIntPtrType(a4, (llvm::Type *)*IntegerCast);
      v18 = v17;
      IntegerCast = (_QWORD *)llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)], v17, 0);
      NullValue = llvm::ConstantExpr::getIntegerCast(*(llvm::ConstantExpr **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)), v18, 0);
      goto LABEL_19;
    }
    llvm::DataLayout::getIntPtrType(a4, *(llvm::Type **)IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)]);
    if (*IntegerCast != v20
      || *(_QWORD *)IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)] != **(_QWORD **)(a3
                                                                                                - 32
                                                                                                * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)))
    {
      break;
    }
    IntegerCast = (_QWORD *)IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)];
    a3 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
LABEL_20:
    if (IntegerCast)
      v22 = *((_BYTE *)IntegerCast + 16) == 5;
    else
      v22 = 0;
    if (!v22)
      goto LABEL_24;
  }
  if ((a1 & 0xFFFFFFFE) != 0x20
    || *((_WORD *)IntegerCast + 9) != 29
    || (llvm::Constant::isNullValue((llvm::Constant *)a3) & 1) == 0)
  {
    if (*(_BYTE *)(*IntegerCast + 8) != 15 || (a1 - 38) < 4)
      goto LABEL_49;
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *IntegerCast);
    v45 = IndexTypeSizeInBits;
    if (IndexTypeSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v44, 0, 0);
      v33 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)IntegerCast, a4, &v44, 0, 0, 0, v41);
      v43 = IndexTypeSizeInBits;
      llvm::APInt::initSlowCase((llvm::APInt *)&v42, 0, 0);
    }
    else
    {
      v44 = 0;
      v33 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)IntegerCast, a4, &v44, 0, 0, 0, v30);
      v43 = IndexTypeSizeInBits;
      v42 = 0;
    }
    v35 = llvm::Value::stripAndAccumulateConstantOffsets(a3, a4, &v42, 0, 0, 0, v32);
    if (v33 == v35)
    {
      v36 = (llvm::ConstantExpr *)word_1C85F29A0[2 * (int)a1 - 64];
      v37 = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)*IntegerCast, (llvm::LLVMContext *)&v44, v34);
      v39 = llvm::ConstantInt::get(*(llvm::ConstantInt **)*IntegerCast, (llvm::LLVMContext *)&v42, v38);
      IndexTypeSizeInBits = (uint64_t)llvm::ConstantExpr::getICmp(v36, v37, v39, 0);
    }
    if (v43 >= 0x41 && v42)
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    if (v45 >= 0x41 && v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    if (v33 != v35)
    {
LABEL_49:
      if ((unsigned __int16)a1 <= 0xFu)
        return (llvm::UndefValue *)llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)(unsigned __int16)a1, (uint64_t ***)IntegerCast, (llvm::Constant *)a3, 0);
      else
        return llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(unsigned __int16)a1, (unsigned __int8 *)IntegerCast, (llvm::Constant *)a3, 0);
    }
    return (llvm::UndefValue *)IndexTypeSizeInBits;
  }
  v23 = (llvm *)llvm::ConstantFoldCompareInstOperands(a1, IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF)], a3, a4, a5);
  v24 = (llvm::Constant *)llvm::ConstantFoldCompareInstOperands(a1, IntegerCast[-4 * (*((_DWORD *)IntegerCast + 5) & 0x7FFFFFF) + 4], a3, a4, a5);
  if ((_DWORD)a1 == 32)
    v27 = 28;
  else
    v27 = 29;
  return llvm::ConstantFoldBinaryOpOperands((llvm *)v27, v23, v24, a4, v25, v26);
}

llvm *llvm::ConstantFoldInstOperands(uint64_t a1, llvm::Type **a2, uint64_t a3, __int32 **a4, llvm::DSOLocalEquivalent **a5)
{
  return sub_1C4DECDA4((int **)a1, (llvm *)(*(unsigned __int8 *)(a1 + 16) - 28), a2, a3, a4, a5);
}

llvm::UndefValue *llvm::ConstantFoldConstant(uint64_t a1, llvm::Type *a2, uint64_t a3)
{
  uint64_t i;
  llvm::UndefValue *v4;
  _QWORD v6[10];

  v6[9] = *MEMORY[0x1E0C80C00];
  v6[0] = 1;
  for (i = 1; i != 9; i += 2)
    v6[i] = -4096;
  v4 = sub_1C4DEC528(a1, a2, a3, (uint64_t)v6);
  if ((v6[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v6[1], 8);
  return v4;
}

llvm *sub_1C4DECDA4(int **this, llvm *a2, llvm::Type **a3, uint64_t a4, __int32 **a5, llvm::DSOLocalEquivalent **a6)
{
  llvm::Constant *v9;
  int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  llvm::UndefValue *ElementInstruction;
  unint64_t v24;
  llvm::Type *v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *TypeAtIndex;
  uint64_t v32;
  llvm::Type **v33;
  llvm::Type *v34;
  llvm::Type *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int CastOpcode;
  uint64_t Cast;
  uint64_t v42;
  uint64_t ElementPtr;
  uint64_t i;
  int isSizedDerivedType;
  unsigned __int8 *v46;
  llvm::Type *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Type *v50;
  int isNullValue;
  llvm::UndefValue *v52;
  llvm::ValueHandleBase *Sub;
  llvm::UndefValue *v54;
  uint64_t j;
  llvm::Constant *v56;
  unsigned __int8 *v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v62;
  const char *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t IndexedOffsetInType;
  unint64_t v68;
  llvm::ConstantExpr *v69;
  int **v70;
  llvm::ConstantExpr *v71;
  int v72;
  int v73;
  uint64_t v74;
  char *v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  llvm::UndefValue **v80;
  llvm::UndefValue **v81;
  llvm::UndefValue **v82;
  uint64_t v83;
  llvm::UndefValue *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  llvm::Value **v88;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  _BOOL8 v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _BOOL4 v103;
  _BOOL4 v104;
  llvm::Type *v106;
  uint64_t v107;
  llvm::APInt *v109;
  unsigned int v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  int64_t v114;
  BOOL v115;
  unint64_t v116;
  unsigned int v117;
  __int32 *v118;
  size_t v119;
  __int32 *v120;
  const llvm::APInt *v121;
  __int32 *v122;
  llvm::ConstantInt *v123;
  unsigned int v124;
  unint64_t v125;
  void *v126;
  unsigned __int8 *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _BOOL4 v135;
  llvm::ValueHandleBase *v136;
  unsigned int v137;
  const llvm::APInt *v138;
  void *v139;
  uint64_t *v140;
  int v141;
  int64_t v142;
  unint64_t v143;
  unsigned int v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  llvm::GetElementPtrInst *v149;
  uint64_t *v150;
  llvm::Value *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  llvm::Type *v156;
  uint64_t v157;
  llvm::Type *v158;
  unsigned int v159;
  int v160;
  llvm::Value *v161;
  llvm::Type *v162;
  uint64_t v163;
  llvm::ConstantInt *v164;
  int v165;
  unint64_t v166;
  llvm::Value **v167;
  uint64_t v168;
  unint64_t v169;
  _DWORD *v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::Value *v178;
  uint64_t v179;
  unsigned int v182;
  int v183;
  int **v184;
  int *v185;
  unsigned __int8 *v186;
  uint64_t v187;
  uint64_t v188;
  llvm::Constant *v189;
  llvm::Constant *v190;
  char v191;
  unsigned int v192;
  unint64_t v193;
  llvm::ConstantInt ***v194;
  llvm::Type *v195;
  uint64_t v197;
  llvm::Type *v198;
  _QWORD *v199;
  unsigned int v200;
  void *__src;
  unsigned int v202;
  int v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  llvm::Constant *v211;
  _QWORD v212[9];

  v212[7] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 12)
    return (llvm *)llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)*a3, 0, 0, (llvm::Type *)a5);
  if (((_DWORD)a2 - 13) <= 0x11)
    return llvm::ConstantFoldBinaryOpOperands(a2, *a3, a3[1], (llvm::Constant *)a5, (const llvm::DataLayout *)a5, a6);
  v9 = (llvm::Constant *)*this;
  if (((_DWORD)a2 - 38) <= 0xC)
    return (llvm *)llvm::ConstantFoldCastOperand((int)a2, *a3, v9, (llvm::Type *)a5, (const llvm::DataLayout *)a5);
  v11 = *((unsigned __int8 *)this + 16);
  if (v11 != 62)
  {
    if (v11 != 5)
    {
      ElementInstruction = 0;
      switch((int)a2)
      {
        case '8':
          ElementInstruction = 0;
          v24 = a4 - 1;
          v25 = a3[a4 - 1];
          if (!v25 || *((_BYTE *)v25 + 16))
            return ElementInstruction;
          if (!llvm::canConstantFoldCallTo((llvm *)this, a3[a4 - 1], (const llvm::Function *)a3))
            goto LABEL_161;
          return (llvm *)llvm::ConstantFoldCall((uint64_t)this, (uint64_t ***)v25, (uint64_t)a3, v24, (uint64_t *)a6);
        case '9':
          return llvm::ConstantExpr::getSelect(*a3, (llvm::PoisonValue **)a3[1], (llvm::PoisonValue **)a3[2], 0, (llvm::Type *)a5);
        case '=':
          v57 = (unsigned __int8 *)*a3;
          v56 = a3[1];
          ElementInstruction = llvm::ConstantFoldExtractElementInstruction(*a3, v56, (llvm::Constant *)a3);
          if (ElementInstruction)
            return ElementInstruction;
          v58 = *(_QWORD ***)v57;
          v59 = *(_QWORD *)(*(_QWORD *)v57 + 24);
          if (v59)
          {
            v210 = (uint64_t)v57;
            v211 = v56;
            v60 = **v58 + 1512;
            LODWORD(v204) = 61;
            v205 = (uint64_t)&v210;
            v206 = 2;
            v207 = 0u;
            v208 = 0u;
            v209 = 0;
            return (llvm *)sub_1C537D4FC(v60, v59, (unsigned __int8 *)&v204);
          }
LABEL_161:
          ElementInstruction = 0;
          break;
        case '>':
          return llvm::ConstantExpr::getInsertElement(*a3, a3[1], a3[2], 0, (llvm::Type *)a5);
        case '?':
          return llvm::ConstantExpr::getShuffleVector(*a3, a3[1], this[8], *((unsigned int *)this + 18), 0);
        case '@':
          return llvm::ConstantExpr::getExtractValue(*a3, (unsigned int *)this[8], *((unsigned int *)this + 18), 0);
        case 'C':
          ElementInstruction = 0;
          if (sub_1C4F8BE80((uint64_t ***)*a3, 0, 0, 0, 0, 0))
            return *a3;
          return ElementInstruction;
        default:
          return ElementInstruction;
      }
      return ElementInstruction;
    }
    if (*((_WORD *)this + 9) != 34)
      return (llvm *)llvm::ConstantExpr::getWithOperands((uint64_t)this, (uint64_t)a3, (llvm::Constant *)a4, (llvm::Constant *)*this, 0, 0);
  }
  v12 = *((unsigned __int8 *)this + 17);
  v13 = v11 == 62;
  v14 = 3;
  if (v13)
    v14 = 8;
  v15 = (unsigned __int8 *)this[v14];
  v16 = 4;
  if (v13)
    v16 = 9;
  v195 = (llvm::Type *)this[v16];
  v17 = v15[8];
  v197 = a4;
  if (v17 > 0x11)
    goto LABEL_144;
  if (((1 << v17) & 0xAC7F) == 0)
  {
    if (((1 << v17) & 0x30000) != 0)
    {
LABEL_60:
      isSizedDerivedType = llvm::Type::isSizedDerivedType((uint64_t)v15, 0);
      a4 = v197;
      if (!isSizedDerivedType)
        goto LABEL_231;
      v17 = v15[8];
      goto LABEL_16;
    }
LABEL_144:
    if ((v17 & 0xFE) != 0x12 && v17 != 21)
    {
LABEL_231:
      v148 = 3;
      if (*((_BYTE *)this + 16) == 62)
        v148 = 8;
      v149 = (llvm::GetElementPtrInst *)this[v148];
      v152 = (unsigned __int8 *)*a3;
      v151 = (llvm::Value *)(a3 + 1);
      v150 = (uint64_t *)v152;
      v153 = a4 - 1;
      v154 = *((unsigned __int8 *)this + 17);
      if (v154 <= 3)
        v155 = 0;
      else
        v155 = ((v154 >> 2) + 0xFFFFFFFF) | 0x100000000;
      return (llvm *)llvm::ConstantExpr::getGetElementPtr(v149, v150, v151, v153, (v154 & 2) != 0, v155, 0);
    }
    goto LABEL_60;
  }
LABEL_16:
  if (v17 == 19)
    goto LABEL_231;
  v192 = v12;
  v18 = *((unsigned __int8 *)this + 17);
  v19 = v18 <= 3 ? 0 : ((v18 >> 2) + 0xFFFFFFFF) | 0x100000000;
  llvm::DataLayout::getIndexType((llvm::DataLayout *)a5, v9);
  v22 = (*(_DWORD *)(v20 + 8) & 0xFE) == 0x12 ? **(_QWORD **)(v20 + 16) : v20;
  a4 = v197;
  v204 = &v206;
  v205 = 0x2000000000;
  if ((_DWORD)v197 == 1)
  {
    v26 = v192;
  }
  else
  {
    v187 = v19;
    v188 = v20;
    v189 = v9;
    v27 = 0;
    v28 = 1;
    v29 = 1;
LABEL_32:
    v191 = v27;
    v30 = 8 * v28 - 16;
    do
    {
      if (v28 == 1)
        goto LABEL_39;
      TypeAtIndex = v15;
      if (v28 != 2)
      {
        v32 = v30;
        v33 = a3 + 2;
        TypeAtIndex = v15;
        do
        {
          v34 = *v33++;
          TypeAtIndex = (unsigned __int8 *)llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)TypeAtIndex, v34, v21);
          LODWORD(a4) = v197;
          v32 -= 8;
        }
        while (v32);
      }
      if (TypeAtIndex[8] != 16)
      {
LABEL_39:
        v35 = a3[v28];
        v36 = *(_QWORD *)v35;
        if ((*(_DWORD *)(*(_QWORD *)v35 + 8) & 0xFE) == 0x12)
          v36 = **(_QWORD **)(v36 + 16);
        if (v36 != v22)
        {
          if ((*(_DWORD *)(*(_QWORD *)v35 + 8) & 0xFE) == 0x12)
            v39 = v188;
          else
            v39 = v22;
          CastOpcode = llvm::CastInst::getCastOpcode(a3[v28], (const llvm::Value *)1, v39, (llvm::Type *)1);
          Cast = llvm::ConstantExpr::getCast(CastOpcode);
          v42 = v205;
          if (v205 >= (unint64_t)HIDWORD(v205))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)&v206, v205 + 1, 8);
            v42 = v205;
          }
          LODWORD(a4) = v197;
          *((_QWORD *)v204 + v42) = Cast;
          v38 = v205 + 1;
          LODWORD(v205) = v205 + 1;
          ++v29;
          ++v28;
          v27 = 1;
          if (v29 == (_DWORD)v197)
          {
            v161 = (llvm::Value *)v204;
            goto LABEL_54;
          }
          goto LABEL_32;
        }
      }
      else
      {
        v35 = a3[v28];
      }
      v37 = v205;
      if (v205 >= (unint64_t)HIDWORD(v205))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)&v206, v205 + 1, 8);
        LODWORD(a4) = v197;
        v37 = v205;
      }
      *((_QWORD *)v204 + v37) = v35;
      v38 = v205 + 1;
      LODWORD(v205) = v205 + 1;
      ++v29;
      ++v28;
      v30 += 8;
    }
    while (v29 != (_DWORD)a4);
    v161 = (llvm::Value *)v204;
    if ((v191 & 1) == 0)
    {
      ElementInstruction = 0;
      v9 = v189;
      v26 = v192;
      goto LABEL_63;
    }
LABEL_54:
    v9 = v189;
    v26 = v192;
    ElementPtr = llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)v15, (uint64_t *)*a3, v161, v38, 0, v187, 0);
    v210 = 1;
    for (i = 8; i != 72; i += 16)
      *(uint64_t *)((char *)&v210 + i) = -4096;
    ElementInstruction = sub_1C4DEC528(ElementPtr, (llvm::Type *)a5, (uint64_t)a6, (uint64_t)&v210);
    if ((v210 & 1) == 0)
      MEMORY[0x1CAA32FB4](v211, 8);
    v161 = (llvm::Value *)v204;
LABEL_63:
    if (v161 != (llvm::Value *)&v206)
      free(v161);
    a4 = v197;
    if (ElementInstruction)
      return ElementInstruction;
  }
  v46 = (unsigned __int8 *)*a3;
  v47 = *(llvm::Type **)*a3;
  if (*((_BYTE *)v47 + 8) != 15)
    goto LABEL_231;
  llvm::DataLayout::getIndexType((llvm::DataLayout *)a5, v47);
  a4 = v197;
  v49 = v48;
  if (v197 == 2)
  {
    if (*((_DWORD *)v195 + 2) == 2061)
    {
      v50 = a3[1];
      if (v50)
      {
        if (*((_BYTE *)v50 + 16) == 5 && *((_WORD *)v50 + 9) == 15)
        {
          isNullValue = llvm::Constant::isNullValue(*((llvm::Constant **)v50 - 4 * (*((_DWORD *)v50 + 5) & 0x7FFFFFF)));
          a4 = 2;
          if (isNullValue)
          {
            v52 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v46, *(llvm::Constant **)v50, 0);
            Sub = llvm::ConstantExpr::getSub(v52, ((llvm::Constant **)v50 - 4 * (*((_DWORD *)v50 + 5) & 0x7FFFFFF))[4], 0, 0);
            v54 = sub_1C537D3B8((llvm *)0x30, (uint64_t)Sub, v9, 0);
            v204 = (void *)1;
            for (j = 8; j != 72; j += 16)
              *(void **)((char *)&v204 + j) = (void *)-4096;
            ElementInstruction = sub_1C4DEC528((uint64_t)v54, (llvm::Type *)a5, (uint64_t)a6, (uint64_t)&v204);
            if ((v204 & 1) == 0)
              MEMORY[0x1CAA32FB4](v205, 8);
            goto LABEL_229;
          }
        }
      }
    }
LABEL_87:
    v62 = 1;
    while (*((_BYTE *)a3[v62] + 16) == 16)
    {
      if ((_DWORD)a4 == ++v62)
        goto LABEL_90;
    }
    goto LABEL_231;
  }
  if ((_DWORD)v197 != 1)
    goto LABEL_87;
LABEL_90:
  v190 = v9;
  sub_1C4768AD0((uint64_t)a5, v49);
  v65 = v64;
  if ((_DWORD)v63 == 1)
  v66 = (v26 >> 1) & 1;
  IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType((llvm::DataLayout *)a5, (uint64_t)v15, a3 + 1, v197 - 1);
  v202 = v65;
  if (v65 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, IndexedOffsetInType, 0);
    v193 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
  }
  else
  {
    v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
    v193 = v68;
    if (!v65)
      v68 = 0;
    __src = (void *)(v68 & IndexedOffsetInType);
  }
  v69 = sub_1C4DF5EEC((llvm::Value *)v46);
  v70 = this;
  do
  {
    v71 = v69;
    v72 = *((unsigned __int8 *)v69 + 16);
    if (v72 != 62 && (v72 != 5 || *((_WORD *)v69 + 9) != 34))
      break;
    v73 = *((_DWORD *)v69 + 5);
    if ((v73 & 0x40000000) != 0)
    {
      v75 = (char *)*((_QWORD *)v69 - 1);
      v74 = v73 & 0x7FFFFFF;
    }
    else
    {
      v74 = v73 & 0x7FFFFFF;
      v75 = (char *)v71 - 32 * v74;
    }
    v76 = *((_BYTE *)v71 + 17);
    v204 = &v206;
    v205 = 0x400000000;
    v77 = 32 * v74 - 32;
    if (v77 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)&v206, (uint64_t)v77 >> 5, 8);
      v78 = v205;
      v80 = (llvm::UndefValue **)v204;
      v79 = v205;
    }
    else
    {
      v78 = 0;
      v79 = 0;
      v80 = (llvm::UndefValue **)&v206;
    }
    if (v74 != 1)
    {
      v81 = (llvm::UndefValue **)(v75 + 32);
      v82 = &v80[v78];
      v83 = 32 * v74 - 32;
      do
      {
        v84 = *v81;
        v81 += 4;
        *v82++ = v84;
        v83 -= 32;
      }
      while (v83);
      v80 = (llvm::UndefValue **)v204;
    }
    v85 = v79 + (v77 >> 5);
    LODWORD(v205) = v79 + (v77 >> 5);
    if ((_DWORD)v205)
    {
      v86 = 0;
      while (*((_BYTE *)v80[v86] + 16) == 16)
      {
        if (v85 == ++v86)
          goto LABEL_113;
      }
      v96 = 0;
      v69 = v71;
    }
    else
    {
LABEL_113:
      v87 = *((_DWORD *)v71 + 5);
      if ((v87 & 0x40000000) != 0)
        v88 = (llvm::Value **)*((_QWORD *)v71 - 1);
      else
        v88 = (llvm::Value **)((char *)v71 - 32 * (v87 & 0x7FFFFFF));
      v89 = *v88;
      v90 = 24;
      if (*((_BYTE *)v71 + 16) == 62)
        v90 = 64;
      v91 = llvm::DataLayout::getIndexedOffsetInType((llvm::DataLayout *)a5, *(_QWORD *)((char *)v71 + v90), v80, v85);
      LODWORD(v211) = v65;
      if (v65 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v210, v91, 0);
      }
      else
      {
        v92 = v193;
        if (!v65)
          v92 = 0;
        v210 = v92 & v91;
      }
      v93 = v202;
      if (v202 >= 0x41)
      {
        v97 = 0;
        v98 = 0;
        v99 = (char *)__src;
        v94 = v210;
        v100 = ((unint64_t)v202 + 63) >> 6;
        do
        {
          v101 = *(_QWORD *)&v99[v97];
          v102 = *(_QWORD *)(v94 + v97) + v101;
          v103 = v102 < v101;
          v104 = v102 + 1 <= v101;
          if (v98)
          {
            ++v102;
            v98 = v104;
          }
          else
          {
            v98 = v103;
          }
          *(_QWORD *)&v99[v97] = v102;
          v97 += 8;
        }
        while (8 * v100 != v97);
        *((_QWORD *)__src + (v100 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v93;
      }
      else
      {
        v94 = v210;
        if (v202)
          v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v202;
        else
          v95 = 0;
        __src = (void *)(v95 & ((unint64_t)__src + v210));
      }
      if (v211 >= 0x41 && v94)
        MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
      v69 = sub_1C4DF5EEC(v89);
      v96 = 1;
      v80 = (llvm::UndefValue **)v204;
    }
    if (v80 != (llvm::UndefValue **)&v206)
      free(v80);
    v66 &= (v76 & 2) >> 1;
    v70 = (int **)v71;
  }
  while ((v96 & 1) != 0);
  v200 = v65;
  if (v65 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v199, 0, 0);
  else
    v199 = 0;
  v106 = (llvm::Type *)a5;
  if (*((_BYTE *)v69 + 16) == 5 && v69 && *((_WORD *)v69 + 9) == 48)
  {
    v107 = *((_QWORD *)v69 - 4 * (*((_DWORD *)v69 + 5) & 0x7FFFFFF));
    if (v107 && *(_BYTE *)(v107 + 16) == 16)
    {
      v109 = (llvm::APInt *)(v107 + 24);
      v110 = *(_DWORD *)(v107 + 32);
      if (v110 >= v65)
      {
        if (v110 > v65)
          llvm::APInt::trunc(v109, v65, (llvm::APInt *)&v204);
        else
          sub_1C5DD14E0((uint64_t)&v204, (uint64_t)v109);
      }
      else
      {
        llvm::APInt::zext(v109, v65, (uint64_t)&v204);
      }
      if (v200 >= 0x41 && v199)
        MEMORY[0x1CAA32F9C](v199, 0x1000C8000313F17);
      v199 = v204;
      v200 = v205;
    }
  }
  v111 = *(_QWORD *)v69;
  v194 = (llvm::ConstantInt ***)v69;
  if ((llvm::Constant::isNullValue(v69) & 1) != 0)
    goto LABEL_178;
  v112 = v199;
  if (v200 < 0x41)
    goto LABEL_177;
  v113 = 0;
  v114 = ((unint64_t)v200 + 63) >> 6;
  do
  {
    v115 = v114-- < 1;
    if (v115)
      break;
    v116 = v199[v114];
    v113 += __clz(v116);
  }
  while (!v116);
  v117 = v200 | 0xFFFFFFC0;
  if ((v200 & 0x3F) == 0)
    v117 = 0;
  if (v200 - v113 - v117 > 0x40)
  {
LABEL_178:
    v118 = a5[48];
    v119 = *((unsigned int *)a5 + 98);
    v120 = wmemchr(v118, *(_DWORD *)(v111 + 8) >> 8, v119);
    if (v120)
      v122 = v120;
    else
      v122 = &v118[v119];
    v13 = v119 == v122 - v118;
    v69 = (llvm::ConstantExpr *)v194;
    if (v13)
    {
      v123 = **v194;
      v124 = v202;
      if (v202 >= 0x41)
      {
        v128 = v202 + 63;
        v126 = (void *)operator new[]();
        memcpy(v126, __src, (v128 >> 3) & 0x3FFFFFF8);
        v129 = 0;
        v130 = v199;
        v131 = (unint64_t *)v126;
        v132 = v128 >> 6;
        do
        {
          v133 = *v130++;
          v134 = v133 + *v131;
          v135 = v134 + 1 <= *v131;
          if (v129)
          {
            ++v134;
            v129 = v135;
          }
          else
          {
            v129 = v134 < *v131;
          }
          *v131++ = v134;
          --v132;
        }
        while (v132);
        *((_QWORD *)v126 + (v128 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v124;
      }
      else
      {
        v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v202;
        if (!v202)
          v125 = 0;
        v126 = (void *)(v125 & ((unint64_t)__src + (_QWORD)v199));
      }
      LODWORD(v205) = v124;
      v204 = v126;
      v136 = llvm::ConstantInt::get(v123, (llvm::LLVMContext *)&v204, v121);
      if (v205 >= 0x41 && v204)
        MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
      ElementInstruction = sub_1C537D3B8((llvm *)0x30, (uint64_t)v136, v190, 0);
      goto LABEL_201;
    }
    goto LABEL_187;
  }
  v112 = (_QWORD *)*v199;
LABEL_177:
  if (v112)
    goto LABEL_178;
LABEL_187:
  if (*((unsigned __int8 *)v69 + 16) <= 3u)
  {
    v127 = (unsigned __int8 *)*((_QWORD *)v69 + 3);
    a4 = v197;
  }
  else
  {
    a4 = v197;
    if (*(_QWORD *)(v111 + 24))
      v127 = **(unsigned __int8 ***)(v111 + 16);
    else
      v127 = (unsigned __int8 *)(***(_QWORD ***)v69 + 1912);
  }
  v137 = v127[8];
  if (v137 > 0x11)
    goto LABEL_291;
  if (((1 << v137) & 0xAC7F) != 0)
    goto LABEL_205;
  if (((1 << v137) & 0x30000) == 0)
  {
LABEL_291:
    if ((v137 & 0xFE) != 0x12 && v137 != 21)
    {
      ElementInstruction = 0;
      goto LABEL_223;
    }
  }
  v160 = llvm::Type::isSizedDerivedType((uint64_t)v127, 0);
  a4 = v197;
  ElementInstruction = 0;
  if (!v160)
    goto LABEL_223;
LABEL_205:
  v198 = (llvm::Type *)v127;
  llvm::DataLayout::getGEPIndicesForOffset((llvm::DataLayout *)a5, &v198, (llvm::APInt *)&__src, &v210);
  v139 = __src;
  v140 = (uint64_t *)v194;
  if (v202 >= 0x41)
  {
    v141 = 0;
    v142 = ((unint64_t)v202 + 63) >> 6;
    do
    {
      v115 = v142-- < 1;
      if (v115)
        break;
      v143 = *((_QWORD *)__src + v142);
      v141 += __clz(v143);
    }
    while (!v143);
    v144 = v202 | 0xFFFFFFC0;
    if ((v202 & 0x3F) == 0)
      v144 = 0;
    if (v202 - v141 - v144 > 0x40)
      goto LABEL_214;
    v139 = *(void **)__src;
  }
  if (v139)
  {
LABEL_214:
    ElementInstruction = 0;
    goto LABEL_215;
  }
  v156 = v198;
  if (v198 != v195)
  {
    while (1)
    {
      v157 = llvm::GetElementPtrInst::getTypeAtIndex((uint64_t)v156, 0);
      if (!v157)
        break;
      v158 = (llvm::Type *)v157;
      if (*((_BYTE *)v156 + 8) == 16)
        v159 = 32;
      else
        v159 = v65;
      LODWORD(v205) = v159;
      if (v159 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v204, 0, 0);
      else
        v204 = 0;
      sub_1C4DF5F58((uint64_t)&v210, (unint64_t)&v204);
      if (v205 >= 0x41 && v204)
        MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
      v156 = v158;
      if (v158 == v195)
      {
        v156 = v195;
        break;
      }
    }
    v198 = v156;
    v140 = (uint64_t *)v194;
  }
  v204 = &v206;
  v205 = 0x2000000000;
  if ((_DWORD)v211)
  {
    v162 = (llvm::Type *)v210;
    v163 = 16 * v211;
    while (1)
    {
      v164 = **v194;
      v165 = *((_DWORD *)v162 + 2);
      v203 = v165;
      if (v165 <= 63)
      {
        if (v165 <= 31)
        {
          switch(v165)
          {
            case 16:
              v166 = *(_QWORD *)v164 + 1936;
              break;
            case 8:
              v166 = *(_QWORD *)v164 + 1912;
              break;
            case 1:
              v166 = *(_QWORD *)v164 + 1888;
              break;
            default:
LABEL_276:
              v170 = sub_1C5270984(*(_QWORD *)v164 + 2168, &v203);
              v166 = *((_QWORD *)v170 + 1);
              if (!v166)
              {
                v166 = sub_1C484358C(*(_QWORD *)v164 + 2040, 24, 3);
                v171 = v203;
                *(_QWORD *)v166 = v164;
                *(_QWORD *)(v166 + 16) = 0;
                *(_QWORD *)(v166 + 8) = (v171 << 8) | 0xDu;
                *((_QWORD *)v170 + 1) = v166;
              }
              break;
          }
        }
        else
        {
          if (v165 != 32)
            goto LABEL_276;
          v166 = *(_QWORD *)v164 + 1960;
        }
      }
      else if (v165 == 64)
      {
        v166 = *(_QWORD *)v164 + 1984;
      }
      else
      {
        if (v165 != 128)
          goto LABEL_276;
        v166 = *(_QWORD *)v164 + 2008;
      }
      v167 = llvm::ConstantInt::get((llvm::ConstantInt **)v166, v162, v138);
      v168 = v205;
      if (v205 >= (unint64_t)HIDWORD(v205))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)&v206, v205 + 1, 8);
        v168 = v205;
      }
      *((_QWORD *)v204 + v168) = v167;
      v169 = (v205 + 1);
      LODWORD(v205) = v205 + 1;
      v162 = (llvm::Type *)((char *)v162 + 16);
      v163 -= 16;
      if (!v163)
      {
        v106 = (llvm::Type *)a5;
        v140 = (uint64_t *)v194;
        goto LABEL_279;
      }
    }
  }
  v169 = 0;
LABEL_279:
  v172 = *((unsigned __int8 *)v70 + 17);
  v173 = (v172 >> 2) + 0xFFFFFFFF;
  v174 = (v172 >> 2) - 1;
  if (v172 < 4)
    v174 = 0;
  if (v172 > 3)
  {
    v179 = 3;
    if (*((_BYTE *)v70 + 16) == 62)
      v179 = 8;
    v178 = (llvm::Value *)v204;
    if (v127 != (unsigned __int8 *)v70[v179] || v173 >= v169)
    {
      v175 = 0;
      v176 = 0;
      v177 = 0;
    }
    else
    {
      v182 = 0;
      v183 = *((_DWORD *)v70 + 5);
      while (v182 <= v174)
      {
        v184 = &v70[-4 * (v183 & 0x7FFFFFF)];
        if ((v183 & 0x40000000) != 0)
          v184 = (int **)*(v70 - 1);
        v185 = (int *)*((_QWORD *)v204 + v182++);
        if (v185 != v184[4 * v182])
        {
          ElementInstruction = 0;
          goto LABEL_304;
        }
      }
      v177 = v173 & 0xFFFFFF00;
      v175 = v174;
      v176 = 0x100000000;
    }
  }
  else
  {
    v175 = 0;
    v176 = 0;
    v177 = 0;
    v178 = (llvm::Value *)v204;
  }
  v186 = (unsigned __int8 *)llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)v127, v140, v178, v169, v66 & 1, v176 | v175 | v177, 0);
  ElementInstruction = (llvm::UndefValue *)v186;
  if (*(llvm::Constant **)v186 != v190)
    ElementInstruction = sub_1C4DEEB60(v186, (uint64_t)v190, v106);
LABEL_304:
  if (v204 != &v206)
    free(v204);
LABEL_215:
  a4 = v197;
  v145 = (char *)v210;
  if ((_DWORD)v211)
  {
    v146 = 16 * v211;
    do
    {
      if (*(_DWORD *)&v145[v146 - 8] >= 0x41u)
      {
        v147 = *(_QWORD *)&v145[v146 - 16];
        if (v147)
        {
          MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
          a4 = v197;
        }
      }
      v146 -= 16;
    }
    while (v146);
    v145 = (char *)v210;
  }
  if (v145 != (char *)v212)
  {
    free(v145);
LABEL_201:
    a4 = v197;
  }
LABEL_223:
  if (v200 >= 0x41 && v199)
  {
    MEMORY[0x1CAA32F9C](v199, 0x1000C8000313F17);
    a4 = v197;
  }
  if (v202 >= 0x41 && __src)
  {
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_229:
    a4 = v197;
  }
  if (!ElementInstruction)
    goto LABEL_231;
  return ElementInstruction;
}

llvm::ValueHandleBase *llvm::ConstantFoldBinaryOpOperands(llvm *this, llvm *a2, llvm::Constant *a3, llvm::Constant *a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned int v9;
  llvm::ValueHandleBase *result;
  llvm *v11;
  llvm::Constant *v12;
  const llvm::APInt *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  __int32 v19;
  uint8x8_t v20;
  __int32 v21;
  char v22;
  _QWORD **v23;
  uint64_t v24;
  llvm::DSOLocalEquivalent **v25;
  llvm::GlobalValue *v26;
  unint64_t v27;
  llvm::GlobalValue *v28;
  int8x8_t v29;
  uint8x8_t v30;
  unint64_t v31;
  int8x8_t *v32;
  int8x8_t v33;
  uint8x8_t v34;
  llvm::GlobalValue *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  llvm::GlobalValue *v46;
  int v47;
  size_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  const char *v53;
  unsigned int v54;
  unsigned int v55;
  llvm::ConstantInt **v56;
  const llvm::APInt *v57;
  llvm *v58;
  _QWORD *v59;
  unsigned int v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  void *__src;
  unsigned int v68;
  llvm::GlobalValue *v69;
  llvm::GlobalValue **v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  llvm::GlobalValue *v75;
  llvm::Constant *v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned __int8 *)a2 + 16);
  if (v9 == 5 || *((_BYTE *)a3 + 16) == 5)
  {
    v58 = a4;
    if ((_DWORD)this != 28)
    {
      if ((_DWORD)this != 15)
        goto LABEL_3;
      v63 = 0;
      v64 = 0;
      v22 = 1;
      LODWORD(v70) = 1;
      v69 = 0;
      LODWORD(v76) = 1;
      v75 = 0;
      if (llvm::IsConstantOffsetFromGlobal(a2, &v64, &v69, a4, 0, a6)
        && llvm::IsConstantOffsetFromGlobal(a3, &v63, &v75, v58, 0, v25)
        && v64 == v63)
      {
        sub_1C4768AD0((uint64_t)v58, *(_QWORD *)a2);
        v55 = v54;
        if ((_DWORD)v53 == 1)
        v56 = *(llvm::ConstantInt ***)a2;
        llvm::APInt::zextOrTrunc((llvm::APInt *)&v69, v55, (llvm::APInt *)&v61);
        llvm::APInt::zextOrTrunc((llvm::APInt *)&v75, v55, (llvm::APInt *)&v59);
        sub_1C4DE96E0((uint64_t)&v59);
        llvm::APInt::operator++((uint64_t)&v59);
        llvm::APInt::operator+=((uint64_t)&v59, &v61);
        v66 = v60;
        v65 = (unint64_t)v59;
        v60 = 0;
        v58 = (llvm *)llvm::ConstantInt::get(v56, (llvm::Type *)&v65, v57);
        if (v66 >= 0x41 && v65)
          MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
        if (v60 >= 0x41 && v59)
          MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
        if (v62 >= 0x41 && v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        v22 = 0;
      }
      if (v76 >= 0x41 && v75)
        MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
      if (v70 >= 0x41)
      {
        v26 = v69;
        if (v69)
          goto LABEL_68;
      }
      goto LABEL_31;
    }
    if (v9 < 0x1C || (v11 = a2, !*((_QWORD *)a2 + 5)))
      v11 = 0;
    v69 = a4;
    v70 = 0;
    v72 = 0uLL;
    v71 = (uint64_t)v11;
    LOBYTE(v73) = 1;
    sub_1C4F83784((uint64_t)a2, 0, (uint64_t *)&v69, &v75);
    if (!a3 || *((unsigned __int8 *)a3 + 16) < 0x1Cu || (v12 = a3, !*((_QWORD *)a3 + 5)))
      v12 = 0;
    v69 = v58;
    v70 = 0;
    v72 = 0uLL;
    v71 = (uint64_t)v12;
    LOBYTE(v73) = 1;
    sub_1C4F83784((uint64_t)a3, 0, (uint64_t *)&v69, &v65);
    v14 = v68;
    if (v68 >= 0x41)
    {
      v43 = (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8;
      v44 = (char *)operator new[]();
      memcpy(v44, __src, v43);
      v45 = 0;
      v46 = v75;
      do
      {
        *(_QWORD *)&v44[v45] |= *(_QWORD *)((char *)v46 + v45);
        v45 += 8;
      }
      while (v43 != v45);
      LODWORD(v70) = v14;
      v69 = (llvm::GlobalValue *)v44;
      v47 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v69);
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
      if (v47 != v14)
      {
LABEL_14:
        v15 = v78;
        if (v78 >= 0x41)
        {
          v48 = (((unint64_t)v78 + 63) >> 3) & 0x3FFFFFF8;
          v49 = (char *)operator new[]();
          memcpy(v49, (const void *)v77, v48);
          v50 = 0;
          v51 = v65;
          do
          {
            *(_QWORD *)&v49[v50] |= *(_QWORD *)(v51 + v50);
            v50 += 8;
          }
          while (v48 != v50);
          LODWORD(v70) = v15;
          v69 = (llvm::GlobalValue *)v49;
          v52 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v69);
          MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
          if (v52 != v15)
          {
LABEL_17:
            v16 = v76;
            if (v76 > 0x40)
            {
              v35 = v75;
              v36 = (uint64_t *)v65;
              v37 = ((unint64_t)v76 + 63) >> 6;
              do
              {
                v38 = *v36++;
                *(_QWORD *)v35 |= v38;
                v35 = (llvm::GlobalValue *)((char *)v35 + 8);
                --v37;
              }
              while (v37);
            }
            else
            {
              v75 = (llvm::GlobalValue *)((unint64_t)v75 | v65);
            }
            v17 = v78;
            if (v78 > 0x40)
            {
              v39 = (_QWORD *)v77;
              v40 = (uint64_t *)__src;
              v41 = ((unint64_t)v78 + 63) >> 6;
              do
              {
                v42 = *v40++;
                *v39++ &= v42;
                --v41;
              }
              while (v41);
            }
            else
            {
              v77 &= (unint64_t)__src;
            }
            if (v16 > 0x40)
            {
              v19 = 0;
              v27 = (unint64_t)(v16 + 63) >> 6;
              v28 = v75;
              do
              {
                v29 = *(int8x8_t *)v28;
                v28 = (llvm::GlobalValue *)((char *)v28 + 8);
                v30 = (uint8x8_t)vcnt_s8(v29);
                v30.i16[0] = vaddlv_u8(v30);
                v19 += v30.i32[0];
                --v27;
              }
              while (v27);
            }
            else
            {
              v18 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
              v18.i16[0] = vaddlv_u8(v18);
              v19 = v18.i32[0];
            }
            if (v17 > 0x40)
            {
              v21 = 0;
              v31 = (unint64_t)(v17 + 63) >> 6;
              v32 = (int8x8_t *)v77;
              do
              {
                v33 = *v32++;
                v34 = (uint8x8_t)vcnt_s8(v33);
                v34.i16[0] = vaddlv_u8(v34);
                v21 += v34.i32[0];
                --v31;
              }
              while (v31);
            }
            else
            {
              v20 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
              v20.i16[0] = vaddlv_u8(v20);
              v21 = v20.i32[0];
            }
            if (v21 + v19 == (_DWORD)v16)
            {
              v58 = (llvm *)llvm::ConstantInt::get(*(llvm::ConstantInt ***)a2, (llvm::Type *)&v77, v13);
              v22 = 0;
            }
            else
            {
              v22 = 1;
            }
LABEL_27:
            if (v68 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            if (v66 >= 0x41 && v65)
              MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
            if (v78 >= 0x41 && v77)
              MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
            if (v76 >= 0x41)
            {
              v26 = v75;
              if (v75)
LABEL_68:
                MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
            }
LABEL_31:
            result = v58;
            if ((v22 & 1) == 0 && v58)
              return result;
            goto LABEL_3;
          }
        }
        else if (v78 && (v65 | v77) != 0xFFFFFFFFFFFFFFFFLL >> -(char)v78)
        {
          goto LABEL_17;
        }
        v22 = 0;
        v58 = a3;
        goto LABEL_27;
      }
    }
    else if (v68 && ((unint64_t)v75 | (unint64_t)__src) != 0xFFFFFFFFFFFFFFFFLL >> -(char)v68)
    {
      goto LABEL_14;
    }
    v22 = 0;
    v58 = a2;
    goto LABEL_27;
  }
LABEL_3:
  result = llvm::ConstantFoldBinaryInstruction(this, a2, a3, a4);
  if (!result)
  {
    v23 = *(_QWORD ***)a2;
    if (*(_QWORD *)a2)
    {
      v75 = a2;
      v76 = a3;
      v24 = **v23 + 1512;
      LODWORD(v69) = this;
      v70 = &v75;
      v71 = 2;
      v72 = 0u;
      v73 = 0u;
      v74 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v24, (uint64_t)v23, (unsigned __int8 *)&v69);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantFoldUnaryOpOperand(llvm *this, unsigned __int8 *a2, llvm::Constant *a3, const llvm::DataLayout *a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::get(this, a2, 0, 0, a5);
}

uint64_t llvm::ConstantFoldCastOperand(int this, unsigned int a2, llvm::Constant *a3, llvm::Type *a4, const llvm::DataLayout *a5)
{
  if ((this - 38) >= 9)
    __asm { BR              X10 }
  return llvm::ConstantExpr::getCast(this);
}

llvm::UndefValue *sub_1C4DEE92C()
{
  llvm::Constant *v0;
  uint64_t v1;
  llvm::DataLayout *v2;
  int v3;
  llvm::ConstantExpr *v4;
  llvm::Type ***v5;
  llvm::ConstantExpr *IntegerCast;
  uint64_t v7;
  llvm::Constant *v8;
  const llvm::APInt *v9;
  const void *v11;
  unsigned int IndexTypeSizeInBits;

  if (!v1 || *(_BYTE *)(v1 + 16) != 5)
    return sub_1C537D3B8((llvm *)0x2F, v1, v0, 0);
  v3 = *(unsigned __int16 *)(v1 + 18);
  if (v3 == 34)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v2, *(_QWORD *)v1);
    if (IndexTypeSizeInBits > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v11, 0, 0);
    else
      v11 = 0;
    v8 = (llvm::Constant *)llvm::Value::stripAndAccumulateConstantOffsets(v1, v2, &v11, 1, 0, 0, v7);
    IntegerCast = 0;
    if (llvm::Constant::isNullValue(v8))
      IntegerCast = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v1, (llvm::LLVMContext *)&v11, v9);
    if (IndexTypeSizeInBits >= 0x41)
    {
      if (v11)
        MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
    }
  }
  else
  {
    if (v3 != 48)
      return sub_1C537D3B8((llvm *)0x2F, v1, v0, 0);
    v4 = *(llvm::ConstantExpr **)(v1 - 32 * (*(_DWORD *)(v1 + 20) & 0x7FFFFFF));
    llvm::DataLayout::getIntPtrType(v2, *(llvm::Type **)v1);
    IntegerCast = (llvm::ConstantExpr *)llvm::ConstantExpr::getIntegerCast(v4, v5, 0);
  }
  if (IntegerCast)
    return (llvm::UndefValue *)llvm::ConstantExpr::getIntegerCast(IntegerCast, (llvm::Type ***)v0, 0);
  return sub_1C537D3B8((llvm *)0x2F, v1, v0, 0);
}

llvm::UndefValue *sub_1C4DEEB60(unsigned __int8 *a1, uint64_t a2, _BYTE *a3)
{
  unsigned __int8 *v5;
  int v6;
  llvm::Type *v7;
  llvm::Type *v8;
  _QWORD **v9;
  llvm::Type *v10;
  uint64_t v11;
  const char *v12;
  int PrimitiveSizeInBits;
  _QWORD *v14;
  llvm::FixedVectorType *v15;
  int v16;
  llvm::Type *v17;
  llvm::Type *v18;
  uint64_t Impl;
  _QWORD **v21;
  _QWORD *v23;
  unsigned __int8 *v24;
  const char *v25;
  int v26;
  _QWORD *v27;
  llvm::FixedVectorType *v28;
  unsigned __int8 *v29;
  const char *v30;
  int v31;
  _QWORD *v32;
  llvm::FixedVectorType *v33;
  _QWORD *AllOnesValue;
  llvm::Constant *v35;
  const char *v36;
  unsigned int v37;
  unsigned int v38;
  const char *v39;
  const llvm::APInt *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  llvm::Type *v44;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v46;
  int v47;
  const llvm::APInt *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  const llvm::APFloat *v53;
  uint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  int v57;
  llvm::Constant *v58;
  int v59;
  int v61;
  const char *v62;
  int v63;
  int v64;
  llvm::Type *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  llvm::Constant **v69;
  unsigned __int8 *v70;
  llvm::Value **v71;
  int v72;
  llvm::ConstantInt **v73;
  llvm::Value **v74;
  llvm::Constant *Shl;
  llvm::Constant *v76;
  llvm::Constant *v77;
  uint64_t v78;
  unint64_t v79;
  const char *v80;
  int v81;
  int v82;
  llvm::Type *v83;
  unsigned int v84;
  int v85;
  llvm::UndefValue *v86;
  llvm::Type *v87;
  const llvm::APInt *v88;
  llvm::ConstantExpr *v89;
  int v90;
  llvm::UndefValue *v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  llvm::ConstantInt *v95;
  unsigned int v96;
  unint64_t v97;
  llvm::Constant *v98;
  llvm::Constant *v99;
  uint64_t LShr;
  _QWORD *v101;
  unint64_t v102;
  llvm::UndefValue *v103;
  uint64_t v104;
  llvm::UndefValue *v105;
  _DWORD *v106;
  int v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  _DWORD *v111;
  int v112;
  llvm::FixedVectorType ***v113;
  uint64_t v114;
  llvm::FixedVectorType *v115;
  llvm::Type *v116;
  _QWORD **v117;
  _DWORD *v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  llvm::Value **NullValue;
  int v125;
  unint64_t v126;
  unsigned int v127;
  void *v128;
  uint64_t v129;
  uint64_t v130[34];

  v5 = a1;
  v130[32] = *MEMORY[0x1E0C80C00];
  v6 = a1[16];
  if (v6 == 12)
  {
    AllOnesValue = llvm::PoisonValue::get((llvm::PoisonValue *)a2, (llvm::Type *)a2);
  }
  else if ((v6 - 11) <= 1)
  {
    AllOnesValue = llvm::UndefValue::get((llvm::UndefValue *)a2, (llvm::Type *)a2);
  }
  else if (!llvm::Constant::isNullValue((llvm::Constant *)a1) || (*(_DWORD *)(a2 + 8) & 0xFE) == 0xA)
  {
    if (!llvm::Constant::isAllOnesValue((llvm::Constant *)v5))
      goto LABEL_5;
    v55 = (*(_DWORD *)(a2 + 8) & 0xFE) == 0x12
        ? *(unsigned __int8 *)(**(_QWORD **)(a2 + 16) + 8)
        : *(_DWORD *)(a2 + 8);
    if (v55 != 13 && v55 > 6)
      goto LABEL_5;
    AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)a2, v8);
  }
  else
  {
    AllOnesValue = llvm::Constant::getNullValue((llvm::Constant *)a2, v7);
  }
  v23 = AllOnesValue;
  if (AllOnesValue)
    return (llvm::UndefValue *)v23;
LABEL_5:
  v9 = *(_QWORD ***)v5;
  if (*(_QWORD *)v5
    && ((_DWORD)v9[1] & 0xFE) == 0x12
    && (*(_DWORD *)(a2 + 8) < 7u || *(_DWORD *)(a2 + 8) == 13))
  {
    v10 = (llvm::Type *)*((unsigned int *)v9 + 8);
    v11 = (uint64_t)v9[3];
    if (*(unsigned __int8 *)(v11 + 8) > 6u)
      goto LABEL_50;
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9[3]);
    if ((_DWORD)v12 == 1)
    {
      v9 = *(_QWORD ***)v5;
    }
    v14 = *v9;
    LODWORD(v128) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits <= 63)
    {
      if (PrimitiveSizeInBits <= 31)
      {
        switch(PrimitiveSizeInBits)
        {
          case 16:
            v15 = (llvm::FixedVectorType *)(*v14 + 1936);
            break;
          case 8:
            v15 = (llvm::FixedVectorType *)(*v14 + 1912);
            break;
          case 1:
            v15 = (llvm::FixedVectorType *)(*v14 + 1888);
            break;
          default:
            goto LABEL_111;
        }
LABEL_48:
        llvm::FixedVectorType::get(v15, v10);
        if (*(llvm::Constant **)v5 != v35)
          v5 = (unsigned __int8 *)sub_1C537D3B8((llvm *)0x31, (uint64_t)v5, v35, 0);
LABEL_50:
        sub_1C4768AD0((uint64_t)a3, a2);
        v38 = v37;
        if ((_DWORD)v36 == 1)
        v127 = v38;
        if (v38 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v126, 0, 0);
        else
          v126 = 0;
        sub_1C4768AD0((uint64_t)a3, v11);
        v42 = v41;
        if ((_DWORD)v39 == 1)
        {
          if (!(_DWORD)v10)
          {
LABEL_78:
            v52 = *(unsigned __int8 *)(a2 + 8);
            if (v52 == 13)
            {
              v23 = llvm::ConstantInt::get((llvm::ConstantInt **)a2, (llvm::Type *)&v126, v40);
            }
            else
            {
              if (v52 != 2)
                __asm { BR              X10 }
              llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)&v129, &unk_1C866F184, (const llvm::APInt **)&v126);
              v23 = llvm::ConstantFP::get(*(llvm::ConstantFP **)a2, (llvm::LLVMContext *)&v128, v53);
              if ((_UNKNOWN *)v129 == &unk_1C866F1C0)
              {
                sub_1C4773C74(v130);
              }
              else if ((*(_DWORD *)(v129 + 8) - 64) <= 0xFFFFFF7F && v130[0])
              {
                MEMORY[0x1CAA32F9C](v130[0], 0x1000C8000313F17);
              }
            }
            goto LABEL_83;
          }
        }
        else if (!(_DWORD)v10)
        {
          goto LABEL_78;
        }
        v43 = 0;
        while (1)
        {
          v44 = *a3 ? (llvm::Type *)v43 : (llvm::Type *)((_DWORD)v10 + ~v43);
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v5, v44);
          if (!AggregateElement)
            break;
          v46 = AggregateElement;
          v47 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v47 - 11) > 1)
          {
            if (v47 != 16)
              break;
            sub_1C4888094((uint64_t)&v126, v42);
            if (*((_DWORD *)v46 + 8) < v127)
              llvm::APInt::zext((llvm::UndefValue *)((char *)v46 + 24), v127, (uint64_t)&v128);
            else
              sub_1C5DD14E0((uint64_t)&v128, (uint64_t)v46 + 24);
            if (v127 > 0x40)
            {
              v48 = (const llvm::APInt *)v126;
              v49 = (uint64_t *)v128;
              v50 = ((unint64_t)v127 + 63) >> 6;
              do
              {
                v51 = *v49++;
                *(_QWORD *)v48 |= v51;
                v48 = (const llvm::APInt *)((char *)v48 + 8);
                --v50;
              }
              while (v50);
            }
            else
            {
              v126 |= (unint64_t)v128;
            }
            if (v129 >= 0x41 && v128)
              MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
          }
          else
          {
            sub_1C4888094((uint64_t)&v126, v42);
          }
          if (++v43 == (_DWORD)v10)
            goto LABEL_78;
        }
        if (*(_QWORD *)v5 == a2)
        {
          v23 = v5;
        }
        else
        {
          v23 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v5, (llvm::Constant *)a2, 0);
          if (!v23)
            goto LABEL_78;
        }
LABEL_83:
        if (v127 >= 0x41)
        {
          if (v126)
            MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
        }
        return (llvm::UndefValue *)v23;
      }
      if (PrimitiveSizeInBits == 32)
      {
        v15 = (llvm::FixedVectorType *)(*v14 + 1960);
        goto LABEL_48;
      }
    }
    else
    {
      if (PrimitiveSizeInBits == 64)
      {
        v15 = (llvm::FixedVectorType *)(*v14 + 1984);
        goto LABEL_48;
      }
      if (PrimitiveSizeInBits == 128)
      {
        v15 = (llvm::FixedVectorType *)(*v14 + 2008);
        goto LABEL_48;
      }
    }
LABEL_111:
    v56 = sub_1C5270984(*v14 + 2168, &v128);
    v15 = (llvm::FixedVectorType *)*((_QWORD *)v56 + 1);
    if (!v15)
    {
      v15 = (llvm::FixedVectorType *)sub_1C484358C(*v14 + 2040, 24, 3);
      v57 = (int)v128;
      *(_QWORD *)v15 = v14;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 1) = (v57 << 8) | 0xDu;
      *((_QWORD *)v56 + 1) = v15;
    }
    goto LABEL_48;
  }
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    v16 = v5[16];
    if ((v16 - 16) < 2)
    {
      v128 = v5;
      Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)&v128, (llvm::Type *)1);
      if (!Impl)
      {
        llvm::FixedVectorType::get(*(llvm::FixedVectorType **)v128, (llvm::Type *)1);
        Impl = sub_1C537B3A4(**v21 + 1288, (uint64_t)v21, &v128, 1);
      }
      return (llvm::UndefValue *)sub_1C4DEEB60(Impl, a2, a3);
    }
    if (v16 != 10 && v16 != 15)
      goto LABEL_20;
    v17 = (llvm::Type *)*(unsigned int *)(a2 + 32);
    v18 = (llvm::Type *)*((unsigned int *)v9 + 8);
    if ((_DWORD)v17 == (_DWORD)v18)
      goto LABEL_20;
    v24 = *(unsigned __int8 **)(a2 + 24);
    if (v24[8] <= 6u)
    {
      v26 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(a2 + 24));
      if ((_DWORD)v25 == 1)
      {
        v9 = *(_QWORD ***)v5;
      }
      v27 = *v9;
      LODWORD(v128) = v26;
      if (v26 <= 63)
      {
        if (v26 <= 31)
        {
          switch(v26)
          {
            case 16:
              v28 = (llvm::FixedVectorType *)(*v27 + 1936);
              goto LABEL_102;
            case 8:
              v28 = (llvm::FixedVectorType *)(*v27 + 1912);
              goto LABEL_102;
            case 1:
              v28 = (llvm::FixedVectorType *)(*v27 + 1888);
              goto LABEL_102;
          }
        }
        else if (v26 == 32)
        {
          v28 = (llvm::FixedVectorType *)(*v27 + 1960);
          goto LABEL_102;
        }
      }
      else
      {
        if (v26 == 64)
        {
          v28 = (llvm::FixedVectorType *)(*v27 + 1984);
LABEL_102:
          llvm::FixedVectorType::get(v28, v17);
          v23 = (_QWORD *)sub_1C4DEEB60(v5, v54, a3);
          if (*v23 == a2)
            return (llvm::UndefValue *)v23;
          return sub_1C537D3B8((llvm *)0x31, (uint64_t)v23, (llvm::Constant *)a2, 0);
        }
        if (v26 == 128)
        {
          v28 = (llvm::FixedVectorType *)(*v27 + 2008);
          goto LABEL_102;
        }
      }
      v109 = sub_1C5270984(*v27 + 2168, &v128);
      v28 = (llvm::FixedVectorType *)*((_QWORD *)v109 + 1);
      if (!v28)
      {
        v28 = (llvm::FixedVectorType *)sub_1C484358C(*v27 + 2040, 24, 3);
        v110 = (int)v128;
        *(_QWORD *)v28 = v27;
        *((_QWORD *)v28 + 2) = 0;
        *((_QWORD *)v28 + 1) = (v110 << 8) | 0xDu;
        *((_QWORD *)v109 + 1) = v28;
      }
      goto LABEL_102;
    }
    v29 = (unsigned __int8 *)v9[3];
    if (v29[8] > 6u)
    {
LABEL_125:
      v61 = *a3;
      v128 = v130;
      v129 = 0x2000000000;
      if (v17 < v18)
      {
        NullValue = llvm::Constant::getNullValue((llvm::Constant *)v24, v8);
        v63 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v29);
        if ((_DWORD)v62 == 1)
        {
          if ((_DWORD)v17)
            goto LABEL_128;
        }
        else if ((_DWORD)v17)
        {
LABEL_128:
          v64 = 0;
          v65 = 0;
          v66 = v18 / v17;
          if (v61)
            v67 = (v18 / v17 - 1) * v63;
          else
            v67 = 0;
          if (v61)
            v68 = -v63;
          else
            v68 = v63;
          v120 = v67;
          v122 = v66;
LABEL_135:
          v69 = NullValue;
          while (1)
          {
            v70 = (unsigned __int8 *)llvm::Constant::getAggregateElement((llvm::Constant *)v5, v65);
            if (!v70)
              break;
            v71 = (llvm::Value **)v70;
            v72 = v70[16];
            if ((v72 - 11) >= 2)
            {
              if (v72 != 16)
                break;
            }
            else
            {
              v71 = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)v5 + 24), (llvm::Type *)v70);
              if (!v71)
                break;
            }
            v73 = (llvm::ConstantInt **)sub_1C537D3B8((llvm *)0x27, (uint64_t)v71, *v69, 0);
            v74 = llvm::ConstantInt::get(*v73, v67, 0);
            Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v73, (llvm::Constant *)v74, 0, 0);
            v69 = (llvm::Constant **)llvm::ConstantExpr::getOr((llvm::ConstantExpr *)v69, Shl, v76, v77);
            v67 += v68;
            v65 = (llvm::Type *)((_DWORD)v65 + 1);
            if (!--v66)
            {
              v78 = v129;
              if (v129 >= (unint64_t)HIDWORD(v129))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v130, v129 + 1, 8);
                v78 = v129;
              }
              v67 = v120;
              v66 = v122;
              *((_QWORD *)v128 + v78) = v69;
              v79 = (v129 + 1);
              LODWORD(v129) = v129 + 1;
              if (++v64 != (_DWORD)v17)
                goto LABEL_135;
              goto LABEL_219;
            }
          }
LABEL_190:
          if (*(_QWORD *)v5 == a2)
          {
            v23 = v5;
            goto LABEL_226;
          }
          v108 = (uint64_t)sub_1C537D3B8((llvm *)0x31, (uint64_t)v5, (llvm::Constant *)a2, 0);
          goto LABEL_225;
        }
        v79 = v129;
LABEL_219:
        v113 = (llvm::FixedVectorType ***)v128;
        v114 = v79;
        v23 = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v128, (llvm::Type *)v79);
        if (v23)
          goto LABEL_226;
        v115 = **v113;
        v116 = (llvm::Type *)v79;
LABEL_224:
        llvm::FixedVectorType::get(v115, v116);
        v108 = sub_1C537B3A4(**v117 + 1288, (uint64_t)v117, v113, v114);
LABEL_225:
        v23 = (_QWORD *)v108;
LABEL_226:
        if (v128 != v130)
          free(v128);
        return (llvm::UndefValue *)v23;
      }
      sub_1C4768AD0((uint64_t)a3, (uint64_t)v24);
      v82 = v81;
      if ((_DWORD)v80 == 1)
      {
        if ((_DWORD)v18)
          goto LABEL_148;
      }
      else if ((_DWORD)v18)
      {
LABEL_148:
        v83 = 0;
        v123 = v17 / v18;
        v84 = (v123 - 1) * v82;
        if (!v61)
          v84 = 0;
        v119 = v84;
        v121 = (int)v18;
        if (v61)
          v85 = -v82;
        else
          v85 = v82;
        while (1)
        {
          v86 = llvm::Constant::getAggregateElement((llvm::Constant *)v5, v83);
          if (!v86)
            goto LABEL_190;
          v89 = v86;
          v125 = (int)v83;
          v90 = *((unsigned __int8 *)v86 + 16);
          if ((v90 - 11) > 1)
            break;
          v91 = llvm::UndefValue::get((llvm::UndefValue *)v24, v87);
          sub_1C4DF60FC((unsigned int *)&v128, v123, (uint64_t)v91);
LABEL_156:
          v83 = (llvm::Type *)(v125 + 1);
          if ((_DWORD)v83 == v121)
            goto LABEL_222;
        }
        v92 = v123;
        v93 = v119;
        if (v90 != 16)
          goto LABEL_190;
        while (1)
        {
          v94 = v93;
          v95 = **(llvm::ConstantInt ***)v89;
          v96 = *(_DWORD *)(*(_QWORD *)v89 + 8);
          v127 = v96 >> 8;
          if (v96 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v126, v93, 0);
          }
          else
          {
            if (v96 <= 0xFF)
              LODWORD(v97) = 0;
            else
              v97 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v96);
            v126 = v97 & v93;
          }
          v99 = llvm::ConstantInt::get(v95, (llvm::LLVMContext *)&v126, v88);
          if (v127 >= 0x41 && v126)
            MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
          LShr = llvm::ConstantExpr::getLShr(v89, v99, 0, v98);
          if (v24[8] != 15)
          {
            v103 = sub_1C537D3B8((llvm *)0x26, LShr, (llvm::Constant *)v24, 0);
            v104 = v129;
            if (v129 >= (unint64_t)HIDWORD(v129))
              goto LABEL_178;
            goto LABEL_170;
          }
          v101 = **(_QWORD ***)v5;
          LODWORD(v126) = v82;
          if (v82 <= 63)
          {
            if (v82 <= 31)
            {
              switch(v82)
              {
                case 16:
                  v102 = *v101 + 1936;
                  goto LABEL_177;
                case 8:
                  v102 = *v101 + 1912;
                  goto LABEL_177;
                case 1:
                  v102 = *v101 + 1888;
                  goto LABEL_177;
              }
            }
            else if (v82 == 32)
            {
              v102 = *v101 + 1960;
              goto LABEL_177;
            }
          }
          else
          {
            if (v82 == 64)
            {
              v102 = *v101 + 1984;
              goto LABEL_177;
            }
            if (v82 == 128)
            {
              v102 = *v101 + 2008;
              goto LABEL_177;
            }
          }
          v106 = sub_1C5270984(*v101 + 2168, &v126);
          v102 = *((_QWORD *)v106 + 1);
          if (!v102)
          {
            v118 = v106;
            v102 = sub_1C484358C(*v101 + 2040, 24, 3);
            v107 = v126;
            *(_QWORD *)v102 = v101;
            *(_QWORD *)(v102 + 16) = 0;
            *(_DWORD *)(v102 + 8) = (v107 << 8) | 0xD;
            *(_DWORD *)(v102 + 12) = 0;
            *((_QWORD *)v118 + 1) = v102;
          }
LABEL_177:
          v105 = sub_1C537D3B8((llvm *)0x26, LShr, (llvm::Constant *)v102, 0);
          v103 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v105, (llvm::Constant *)v24, 0);
          v104 = v129;
          if (v129 >= (unint64_t)HIDWORD(v129))
          {
LABEL_178:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v130, v104 + 1, 8);
            v104 = v129;
          }
LABEL_170:
          v93 = v94 + v85;
          *((_QWORD *)v128 + v104) = v103;
          LODWORD(v129) = v129 + 1;
          if (!--v92)
            goto LABEL_156;
        }
      }
LABEL_222:
      v113 = (llvm::FixedVectorType ***)v128;
      v114 = v129;
      v23 = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v128, (llvm::Type *)v129);
      if (v23)
        goto LABEL_226;
      v115 = **v113;
      v116 = (llvm::Type *)v114;
      goto LABEL_224;
    }
    v31 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v9[3]);
    if ((_DWORD)v30 == 1)
    {
      v9 = *(_QWORD ***)v5;
    }
    v32 = *v9;
    LODWORD(v128) = v31;
    if (v31 <= 63)
    {
      if (v31 <= 31)
      {
        switch(v31)
        {
          case 16:
            v33 = (llvm::FixedVectorType *)(*v32 + 1936);
            goto LABEL_115;
          case 8:
            v33 = (llvm::FixedVectorType *)(*v32 + 1912);
            goto LABEL_115;
          case 1:
            v33 = (llvm::FixedVectorType *)(*v32 + 1888);
            goto LABEL_115;
        }
      }
      else if (v31 == 32)
      {
        v33 = (llvm::FixedVectorType *)(*v32 + 1960);
        goto LABEL_115;
      }
    }
    else
    {
      if (v31 == 64)
      {
        v33 = (llvm::FixedVectorType *)(*v32 + 1984);
        goto LABEL_115;
      }
      if (v31 == 128)
      {
        v33 = (llvm::FixedVectorType *)(*v32 + 2008);
        goto LABEL_115;
      }
    }
    v111 = sub_1C5270984(*v32 + 2168, &v128);
    v33 = (llvm::FixedVectorType *)*((_QWORD *)v111 + 1);
    if (!v33)
    {
      v33 = (llvm::FixedVectorType *)sub_1C484358C(*v32 + 2040, 24, 3);
      v112 = (int)v128;
      *(_QWORD *)v33 = v32;
      *((_QWORD *)v33 + 2) = 0;
      *((_QWORD *)v33 + 1) = (v112 << 8) | 0xDu;
      *((_QWORD *)v111 + 1) = v33;
    }
LABEL_115:
    llvm::FixedVectorType::get(v33, v18);
    if (*(llvm::Constant **)v5 != v58)
      v5 = (unsigned __int8 *)sub_1C537D3B8((llvm *)0x31, (uint64_t)v5, v58, 0);
    v59 = v5[16];
    if (v59 == 15 || v59 == 10)
      v23 = 0;
    else
      v23 = v5;
    if (v59 != 15 && v59 != 10)
      return (llvm::UndefValue *)v23;
    goto LABEL_125;
  }
LABEL_20:
  if (v9 != (_QWORD **)a2)
    return sub_1C537D3B8((llvm *)0x31, (uint64_t)v5, (llvm::Constant *)a2, 0);
  return (llvm::UndefValue *)v5;
}

uint64_t llvm::canConstantFoldCallTo(llvm *this, const llvm::CallBase *a2, const llvm::Function *a3)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::CallBase *v17;
  int v18;
  int v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v57;
  int v58;
  int v59;
  int v63;
  int v64;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  int v82;
  int v85;
  int v86;
  int v90;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v5 = *((_QWORD *)this + 8);
  if (!v5 || (*(_BYTE *)(v5 + 14) & 0x10) == 0)
  {
    if (!llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 20))
      goto LABEL_4;
    v5 = *((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_144;
  }
  if ((*(_BYTE *)(v5 + 12) & 0x10) == 0)
  {
LABEL_144:
    result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 4);
    if (!(_DWORD)result)
      return result;
  }
LABEL_4:
  if (*((_QWORD *)this + 9) != *((_QWORD *)a2 + 3))
    return 0;
  v6 = *((_DWORD *)a2 + 9);
  result = 1;
  if (v6 > 202)
  {
    if (v6 <= 2130)
    {
      if (v6 <= 731)
      {
        switch(v6)
        {
          case 253:
          case 258:
          case 259:
          case 260:
          case 261:
          case 262:
          case 263:
          case 274:
          case 275:
          case 276:
          case 277:
          case 278:
          case 283:
          case 284:
          case 290:
          case 296:
          case 300:
          case 301:
          case 305:
          case 306:
          case 309:
          case 311:
          case 312:
          case 317:
          case 318:
          case 323:
          case 324:
          case 325:
          case 326:
          case 327:
          case 328:
          case 329:
            return result;
          case 254:
          case 255:
          case 256:
          case 257:
          case 264:
          case 265:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 272:
          case 279:
          case 281:
          case 282:
          case 285:
          case 286:
          case 287:
          case 288:
          case 289:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 297:
          case 298:
          case 299:
          case 302:
          case 303:
          case 304:
          case 307:
          case 308:
          case 310:
          case 313:
          case 314:
          case 315:
          case 316:
          case 319:
          case 320:
          case 321:
          case 322:
            return 0;
          case 273:
          case 280:
            goto LABEL_8;
          default:
            if (v6 == 203)
              return result;
            if ((v6 - 238) < 2)
              goto LABEL_8;
            return 0;
        }
      }
      if (v6 != 732
        && ((v6 - 1827) > 0x18 || ((1 << (v6 - 35)) & 0x1000009) == 0)
        && (v6 - 2015) >= 2)
      {
        return 0;
      }
    }
    else if (v6 > 2622)
    {
      if (v6 > 2876)
      {
        if (v6 > 3744)
        {
          if (v6 > 11301)
          {
            if ((v6 - 11302) >= 8
              && ((v6 - 12196) > 0x2B || ((1 << (v6 + 92)) & 0xC6000000033) == 0)
              && (v6 - 11802) >= 8)
            {
              return 0;
            }
            goto LABEL_8;
          }
          if ((v6 - 3745) >= 4 && (v6 - 11097) >= 4)
            return 0;
        }
        else
        {
          if (v6 <= 3474)
          {
            if (((v6 - 2877) > 0x31 || ((1 << (v6 - 61)) & 0x320000000001FLL) == 0)
              && v6 != 3428)
            {
              return 0;
            }
            goto LABEL_8;
          }
          if (v6 != 3475)
          {
            if (v6 != 3540)
              return 0;
            goto LABEL_8;
          }
        }
      }
      else if (v6 != 2623)
      {
        return 0;
      }
    }
    else if (v6 != 2131)
    {
      return 0;
    }
    return result;
  }
  v8 = v6 + 117;
  if ((v6 - 139) > 0x3F)
    goto LABEL_21;
  if (((1 << v8) & 0xC060007000000078) != 0)
  {
LABEL_8:
    v9 = *((_QWORD *)this + 8);
    if (!v9 || (*(_BYTE *)(v9 + 19) & 0x20) == 0)
      return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 61) ^ 1;
    return 0;
  }
  if (((1 << v8) & 0x40000C004603) == 0)
  {
LABEL_21:
    v10 = v6 - 75;
    if ((v6 - 75) > 0x2A)
      goto LABEL_284;
    if (((1 << v10) & 3) != 0)
      goto LABEL_8;
    if (((1 << v10) & 0x4720030FF10) == 0)
    {
LABEL_284:
      if (v6 > 0x36)
        return 0;
      if (((1 << v6) & 0x70000000084302) == 0)
      {
        if (*((_DWORD *)a2 + 9))
        {
          if (((1 << v6) & 0x8000000060000) == 0)
            return 0;
          goto LABEL_8;
        }
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          return 0;
        v11 = *((_QWORD *)this + 8);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 19) & 0x20) != 0)
            return 0;
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 61) & 1) != 0)
          return 0;
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v22 = 0;
          v21 = &byte_1C871356D;
          goto LABEL_68;
        }
        v12 = ***(_QWORD ***)a2;
        v13 = *(_QWORD *)(v12 + 152);
        v14 = *(unsigned int *)(v12 + 168);
        if ((_DWORD)v14)
        {
          LODWORD(v15) = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v16 = v13 + 16 * v15;
          v17 = *(const llvm::CallBase **)v16;
          if (*(const llvm::CallBase **)v16 == a2)
          {
LABEL_67:
            v20 = *(_QWORD **)(v16 + 8);
            v23 = *v20;
            v21 = (char *)(v20 + 2);
            v22 = v23;
LABEL_68:
            if (*v21 == 97)
            {
              if (v22 >= 0xB)
              {
                v24 = *(_QWORD *)v21 == 0x766E6F632E726961 && *(_QWORD *)(v21 + 3) == 0x747265766E6F632ELL;
                return v24 || v22 >= 0x29 && !memcmp(v21, "air.normalize_function_constant_predicate", 0x29uLL);
              }
              switch(v22)
              {
                case 6uLL:
                  v50 = *(_DWORD *)v21;
                  v47 = *((unsigned __int16 *)v21 + 2);
                  v48 = v50 == 1851880545;
                  v49 = 26162;
                  break;
                case 5uLL:
                  if (*(_DWORD *)v21 == 1936679777 && v21[4] == 102)
                    return 1;
                  if (*(_DWORD *)v21 == 1852404577 && v21[4] == 102)
                    return 1;
                  if (*(_DWORD *)v21 == 1851880545 && v21[4] == 102)
                    return 1;
                  v90 = *(_DWORD *)v21;
                  v47 = v21[4];
                  v48 = v90 == 1851880545;
                  v49 = 50;
                  break;
                case 4uLL:
                  if (*(_DWORD *)v21 == 1936679777 || *(_DWORD *)v21 == 1852404577)
                    return 1;
                  v44 = *(_DWORD *)v21;
                  v45 = 1851880545;
                  return v44 == v45;
                default:
                  return 0;
              }
              return v48 && v47 == v49;
            }
            result = 0;
            switch(*v21)
            {
              case '_':
                if (v22 < 0xC || v21[1] != 95)
                  return 0;
                result = 0;
                v25 = v21[2];
                if (v25 <= 100)
                {
                  if (v25 != 99)
                  {
                    if (v25 != 97)
                      return result;
                    if (v22 != 15)
                    {
                      if (v22 == 14)
                      {
                        if (*(_QWORD *)v21 == 0x5F66736F63615F5FLL && *(_QWORD *)(v21 + 6) == 0x6574696E69665F66)
                          return 1;
                        if (*(_QWORD *)v21 == 0x5F666E6973615F5FLL && *(_QWORD *)(v21 + 6) == 0x6574696E69665F66)
                          return 1;
                        v27 = *(_QWORD *)v21;
                        v28 = *(_QWORD *)(v21 + 6);
                        v29 = 0x6574696E69665F32;
                        v30 = 0x5F326E6174615F5FLL;
                      }
                      else
                      {
                        if (v22 != 13)
                          return 0;
                        if (*(_QWORD *)v21 == 0x665F736F63615F5FLL && *(_QWORD *)(v21 + 5) == 0x6574696E69665F73)
                          return 1;
                        v27 = *(_QWORD *)v21;
                        v28 = *(_QWORD *)(v21 + 5);
                        v29 = 0x6574696E69665F6ELL;
                        v30 = 0x665F6E6973615F5FLL;
                      }
                      v31 = v27 == v30;
                      return v31 && v28 == v29;
                    }
                    v71 = *(_QWORD *)v21;
                    v28 = *(_QWORD *)(v21 + 7);
                    v72 = 0x66326E6174615F5FLL;
LABEL_220:
                    v31 = v71 == v72;
                    v29 = 0x6574696E69665F66;
                    return v31 && v28 == v29;
                  }
                  if (v22 != 14)
                  {
                    if (v22 != 13)
                      return 0;
                    v37 = *(_QWORD *)v21;
                    v38 = *(_QWORD *)(v21 + 5);
                    v39 = 0x68736F635F5FLL;
                    return v37 == (v39 & 0xFFFFFFFFFFFFLL | 0x665F000000000000) && v38 == 0x6574696E69665F68;
                  }
                  v71 = *(_QWORD *)v21;
                  v28 = *(_QWORD *)(v21 + 6);
                  v75 = 0x68736F635F5FLL;
                  goto LABEL_219;
                }
                if (v25 > 111)
                {
                  if (v25 == 112)
                  {
                    if (v22 != 13)
                    {
                      if (v22 != 12)
                        return 0;
                      v70 = *(_QWORD *)v21;
                      v47 = *((_DWORD *)v21 + 2);
                      v48 = v70 == 0x69665F776F705F5FLL;
                      v49 = 1702127982;
                      return v48 && v47 == v49;
                    }
                    v71 = *(_QWORD *)v21;
                    v28 = *(_QWORD *)(v21 + 5);
                    v72 = 0x665F66776F705F5FLL;
                    goto LABEL_220;
                  }
                  if (v25 != 115)
                    return result;
                  if (v22 != 14)
                  {
                    if (v22 != 13)
                      return 0;
                    v37 = *(_QWORD *)v21;
                    v38 = *(_QWORD *)(v21 + 5);
                    v39 = 0x686E69735F5FLL;
                    return v37 == (v39 & 0xFFFFFFFFFFFFLL | 0x665F000000000000) && v38 == 0x6574696E69665F68;
                  }
                  v71 = *(_QWORD *)v21;
                  v28 = *(_QWORD *)(v21 + 6);
                  v75 = 0x686E69735F5FLL;
LABEL_219:
                  v72 = v75 & 0xFFFFFFFFFFFFLL | 0x5F66000000000000;
                  goto LABEL_220;
                }
                if (v25 == 108)
                {
                  switch(v22)
                  {
                    case 0xCuLL:
                      v32 = *(_QWORD *)v21;
                      v33 = *((_DWORD *)v21 + 2);
                      v34 = 0x5F676F6C5F5FLL;
                      goto LABEL_100;
                    case 0xDuLL:
                      v94 = *(_QWORD *)v21;
                      v78 = *(_QWORD *)(v21 + 5);
                      v80 = v94 == 0x665F66676F6C5F5FLL;
                      v79 = 0x6574696E69665F66;
                      goto LABEL_231;
                    case 0xEuLL:
                      v95 = *(_QWORD *)v21;
                      v96 = *(_QWORD *)(v21 + 6);
                      return v95 == 0x5F3031676F6C5F5FLL && v96 == 0x6574696E69665F30;
                    case 0xFuLL:
                      v71 = *(_QWORD *)v21;
                      v28 = *(_QWORD *)(v21 + 7);
                      v72 = 0x663031676F6C5F5FLL;
                      goto LABEL_220;
                    default:
                      return 0;
                  }
                }
                if (v25 == 101)
                {
                  if (v22 != 14)
                  {
                    if (v22 == 13)
                    {
                      if (*(_QWORD *)v21 != 0x665F667078655F5FLL || *(_QWORD *)(v21 + 5) != 0x6574696E69665F66)
                      {
                        v77 = *(_QWORD *)v21;
                        v78 = *(_QWORD *)(v21 + 5);
                        v79 = 0x6574696E69665F32;
                        v80 = v77 == 0x665F327078655F5FLL;
LABEL_231:
                        if (!v80 || v78 != v79)
                          return 0;
                      }
                    }
                    else
                    {
                      if (v22 != 12)
                        return 0;
                      v32 = *(_QWORD *)v21;
                      v33 = *((_DWORD *)v21 + 2);
                      v34 = 0x5F7078655F5FLL;
LABEL_100:
                      v35 = v32 == (v34 & 0xFFFFFFFFFFFFLL | 0x6966000000000000);
                      v36 = 1702127982;
LABEL_176:
                      if (!v35 || v33 != v36)
                        return 0;
                    }
                    return 1;
                  }
                  v71 = *(_QWORD *)v21;
                  v28 = *(_QWORD *)(v21 + 6);
                  v75 = 0x327078655F5FLL;
                  goto LABEL_219;
                }
                break;
              case 'c':
                switch(v22)
                {
                  case 3uLL:
                    v59 = *(unsigned __int16 *)v21;
                    v33 = v21[2];
                    v35 = v59 == 28515;
                    v36 = 115;
                    goto LABEL_176;
                  case 5uLL:
                    v49 = 102;
                    if (*(_DWORD *)v21 != 1818846563 || v21[4] != 102)
                    {
                      v57 = *(_DWORD *)v21;
                      v47 = v21[4];
                      v58 = 1752395619;
                      goto LABEL_187;
                    }
                    break;
                  case 4uLL:
                    if (*(_DWORD *)v21 != 1818846563 && *(_DWORD *)v21 != 1718841187)
                    {
                      v44 = *(_DWORD *)v21;
                      v45 = 1752395619;
                      return v44 == v45;
                    }
                    break;
                  default:
                    return 0;
                }
                return 1;
              case 'e':
                if (v22 == 5)
                {
                  v85 = *(_DWORD *)v21;
                  v47 = v21[4];
                  v86 = 846231653;
                  goto LABEL_248;
                }
                if (v22 != 4)
                {
                  if (v22 != 3)
                    return 0;
                  v51 = *(unsigned __int16 *)v21;
                  v33 = v21[2];
                  v35 = v51 == 30821;
                  v36 = 112;
                  goto LABEL_176;
                }
                if (*(_DWORD *)v21 == 1718646885)
                  return 1;
                v41 = *(_DWORD *)v21;
                v42 = 846231653;
                goto LABEL_148;
              case 'f':
                if (v22 == 6)
                {
                  v82 = *(_DWORD *)v21;
                  v33 = *((unsigned __int16 *)v21 + 2);
                  v35 = v82 == 1869573222;
LABEL_204:
                  v36 = 26226;
                  goto LABEL_176;
                }
                if (v22 == 5)
                {
                  if (*(_DWORD *)v21 == 1935827302 && v21[4] == 102)
                    return 1;
                  if (*(_DWORD *)v21 == 1869573222 && v21[4] == 114)
                    return 1;
                  v85 = *(_DWORD *)v21;
                  v47 = v21[4];
                  v86 = 1685024102;
LABEL_248:
                  v48 = v85 == v86;
                  v49 = 102;
                  return v48 && v47 == v49;
                }
                if (v22 != 4)
                  return 0;
                if (*(_DWORD *)v21 != 1935827302)
                {
                  v41 = *(_DWORD *)v21;
                  v42 = 1685024102;
LABEL_148:
                  if (v41 != v42)
                    return 0;
                }
                return 1;
              case 'l':
                switch(v22)
                {
                  case 3uLL:
                    v53 = *(unsigned __int16 *)v21;
                    v33 = v21[2];
                    v35 = v53 == 28524;
                    v36 = 103;
                    goto LABEL_176;
                  case 4uLL:
                    if (*(_DWORD *)v21 == 1718054764)
                      return 1;
                    v41 = *(_DWORD *)v21;
                    v42 = 845639532;
                    goto LABEL_148;
                  case 5uLL:
                    if (*(_DWORD *)v21 == 845639532 && v21[4] == 102)
                      return 1;
                    v63 = *(_DWORD *)v21;
                    v33 = v21[4];
                    v35 = v63 == 828862316;
                    v36 = 48;
                    goto LABEL_176;
                  case 6uLL:
                    v64 = *(_DWORD *)v21;
                    v47 = *((unsigned __int16 *)v21 + 2);
                    v48 = v64 == 828862316;
                    v49 = 26160;
                    return v48 && v47 == v49;
                  default:
                    return 0;
                }
              case 'n':
                if (v22 == 10)
                {
                  v55 = *(_QWORD *)v21;
                  v47 = *((unsigned __int16 *)v21 + 4);
                  v48 = v55 == 0x6E6979627261656ELL;
                  v49 = 26228;
                }
                else
                {
                  if (v22 != 9)
                    return 0;
                  v54 = *(_QWORD *)v21;
                  v47 = v21[8];
                  v48 = v54 == 0x6E6979627261656ELL;
                  v49 = 116;
                }
                return v48 && v47 == v49;
              case 'p':
                if (v22 == 4)
                {
                  v44 = *(_DWORD *)v21;
                  v45 = 1719103344;
                  return v44 == v45;
                }
                if (v22 != 3)
                  return 0;
                v46 = *(unsigned __int16 *)v21;
                v47 = v21[2];
                v48 = v46 == 28528;
                v49 = 119;
                return v48 && v47 == v49;
              case 'r':
                result = 0;
                switch(v22)
                {
                  case 4uLL:
                    v41 = *(_DWORD *)v21;
                    v42 = 1953393010;
                    goto LABEL_148;
                  case 5uLL:
                    if (*(_DWORD *)v21 == 1953393010 && v21[4] == 102)
                      return 1;
                    v66 = *(_DWORD *)v21;
                    v33 = v21[4];
                    v35 = v66 == 1853190002;
                    v36 = 100;
                    goto LABEL_176;
                  case 6uLL:
                    v67 = *(_DWORD *)v21;
                    v47 = *((unsigned __int16 *)v21 + 2);
                    v48 = v67 == 1853190002;
                    v49 = 26212;
                    return v48 && v47 == v49;
                  case 9uLL:
                    v68 = *(_QWORD *)v21;
                    v33 = v21[8];
                    v35 = v68 == 0x65646E69616D6572;
                    v36 = 114;
                    goto LABEL_176;
                  case 0xAuLL:
                    v69 = *(_QWORD *)v21;
                    v33 = *((unsigned __int16 *)v21 + 4);
                    v35 = v69 == 0x65646E69616D6572;
                    goto LABEL_204;
                  default:
                    return result;
                }
              case 's':
                if (v22 == 5)
                {
                  v49 = 102;
                  if (*(_DWORD *)v21 == 1752066419 && v21[4] == 102)
                    return 1;
                  v57 = *(_DWORD *)v21;
                  v47 = v21[4];
                  v58 = 1953657203;
LABEL_187:
                  v48 = v57 == v58;
                  return v48 && v47 == v49;
                }
                if (v22 != 4)
                {
                  if (v22 != 3)
                    return 0;
                  v52 = *(unsigned __int16 *)v21;
                  v47 = v21[2];
                  v48 = v52 == 26995;
                  v49 = 110;
                  return v48 && v47 == v49;
                }
                if (*(_DWORD *)v21 != 1718511987 && *(_DWORD *)v21 != 1752066419)
                {
                  v44 = *(_DWORD *)v21;
                  v45 = 1953657203;
                  return v44 == v45;
                }
                return 1;
              case 't':
                switch(v22)
                {
                  case 3uLL:
                    v43 = *(unsigned __int16 *)v21;
                    v33 = v21[2];
                    v35 = v43 == 24948;
                    v36 = 110;
                    goto LABEL_176;
                  case 4uLL:
                    if (*(_DWORD *)v21 == 1718509940)
                      return 1;
                    v41 = *(_DWORD *)v21;
                    v42 = 1752064372;
                    goto LABEL_148;
                  case 5uLL:
                    if (*(_DWORD *)v21 == 1752064372 && v21[4] == 102)
                      return 1;
                    v92 = *(_DWORD *)v21;
                    v33 = v21[4];
                    v35 = v92 == 1853190772;
                    v36 = 99;
                    goto LABEL_176;
                  case 6uLL:
                    v93 = *(_DWORD *)v21;
                    v47 = *((unsigned __int16 *)v21 + 2);
                    v48 = v93 == 1853190772;
                    v49 = 26211;
                    return v48 && v47 == v49;
                  default:
                    return 0;
                }
              default:
                return result;
            }
            return result;
          }
          v18 = 1;
          while (v17 != (const llvm::CallBase *)-4096)
          {
            v19 = v15 + v18++;
            v15 = v19 & (v14 - 1);
            v17 = *(const llvm::CallBase **)(v13 + 16 * v15);
            if (v17 == a2)
            {
              v16 = v13 + 16 * v15;
              goto LABEL_67;
            }
          }
        }
        v16 = v13 + 16 * v14;
        goto LABEL_67;
      }
    }
  }
  return result;
}

llvm::Value **llvm::ConstantFoldCall(uint64_t a1, uint64_t ***a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  llvm::ConstrainedFPIntrinsic *v9;
  uint64_t v10;
  uint64_t Impl;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  llvm::Type *v31;
  char *v32;
  llvm::Type *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  llvm *v39;
  uint64_t **v40;
  unint64_t v41;
  llvm::Type *v42;
  const llvm::APInt *v43;
  const llvm::DataLayout *v44;
  uint64_t **v45;
  llvm::Constant *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t i;
  llvm::Value **False;
  llvm::Value **v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Type *v55;
  const llvm::APInt *v56;
  llvm::Constant *v57;
  llvm::Constant *v58;
  llvm::Constant *v59;
  int v60;
  llvm::Constant *v61;
  llvm::Type *v62;
  llvm::UndefValue *v63;
  unsigned __int8 *v64;
  llvm::UndefValue *v65;
  llvm::UndefValue *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL4 isOneValue;
  unint64_t v72;
  uint64_t ***v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ***v77;
  int v78;
  int v79;
  uint64_t v80;
  llvm::Constant *v81;
  BOOL v82;
  llvm::Type *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL hasVectorInstrinsicScalarOpd;
  llvm::UndefValue *AggregateElement;
  llvm::ValueHandleBase *v88;
  llvm::FixedVectorType ***v89;
  uint64_t v90;
  _QWORD **v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  llvm::Value **True;
  llvm::Value **v98;
  uint64_t v99;
  llvm::FixedVectorType ***v100;
  _QWORD **v101;
  llvm::FixedVectorType ***v102;
  _QWORD **v103;
  llvm::Type *v104;
  llvm::Type *v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[256];
  _QWORD *v109;
  uint64_t v110;
  _BYTE v111[32];
  llvm::FixedVectorType ***v112;
  uint64_t v113;
  _QWORD v114[6];

  v9 = (llvm::ConstrainedFPIntrinsic *)a1;
  v114[4] = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 64);
  if (!v10 || (*(_BYTE *)(v10 + 14) & 0x10) == 0)
  {
    LODWORD(a1) = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 20);
    if (!(_DWORD)a1)
      goto LABEL_7;
    v10 = *((_QWORD *)v9 + 8);
    if (!v10)
      goto LABEL_6;
  }
  if ((*(_BYTE *)(v10 + 12) & 0x10) == 0)
  {
LABEL_6:
    LODWORD(a1) = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v9, 4);
    if (!(_DWORD)a1)
      return 0;
  }
LABEL_7:
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    return 0;
  v13 = a2 >> 4;
  if (*((_DWORD *)a2 + 9))
    goto LABEL_11;
  v22 = ***a2;
  v23 = *(_QWORD *)(v22 + 152);
  v24 = *(unsigned int *)(v22 + 168);
  if (!(_DWORD)v24)
    goto LABEL_79;
  LODWORD(v25) = (v24 - 1) & (v13 ^ (a2 >> 9));
  v26 = (uint64_t ****)(v23 + 16 * v25);
  v27 = *v26;
  if (*v26 != a2)
  {
    v28 = 1;
    while (v27 != (uint64_t ***)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(uint64_t ****)(v23 + 16 * v25);
      if (v27 == a2)
      {
        v26 = (uint64_t ****)(v23 + 16 * v25);
        goto LABEL_80;
      }
    }
LABEL_79:
    v26 = (uint64_t ****)(v23 + 16 * v24);
  }
LABEL_80:
  v73 = v26[1];
  if ((unint64_t)*v73 >= 4 && *((_DWORD *)v73 + 4) == 779250017)
    goto LABEL_11;
  if (!a5)
    return 0;
  LODWORD(v106) = 0;
  if ((*((_BYTE *)a2 + 33) & 0x20) != 0)
    return 0;
  v74 = *a5;
  if (!(_DWORD)v24)
    goto LABEL_142;
  LODWORD(v75) = (v24 - 1) & (v13 ^ (a2 >> 9));
  v76 = v23 + 16 * v75;
  v77 = *(uint64_t ****)v76;
  if (*(uint64_t ****)v76 != a2)
  {
    v78 = 1;
    while (v77 != (uint64_t ***)-4096)
    {
      v79 = v75 + v78++;
      v75 = v79 & (v24 - 1);
      v77 = *(uint64_t ****)(v23 + 16 * v75);
      if (v77 == a2)
      {
        v76 = v23 + 16 * v75;
        goto LABEL_143;
      }
    }
LABEL_142:
    v76 = v23 + 16 * v24;
  }
LABEL_143:
  if ((llvm::TargetLibraryInfoImpl::getLibFunc(a1, (_BYTE *)(*(_QWORD *)(v76 + 8) + 16), **(_QWORD **)(v76 + 8), &v106) & 1) == 0|| !llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v74, (uint64_t)a2[3], (int)v106))
  {
    return 0;
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v31 = 0;
    v32 = &byte_1C871356D;
    goto LABEL_25;
  }
LABEL_11:
  v14 = ***a2;
  v15 = *(_QWORD *)(v14 + 152);
  v16 = *(unsigned int *)(v14 + 168);
  if (!(_DWORD)v16)
  {
LABEL_23:
    v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_24;
  }
  LODWORD(v17) = (v16 - 1) & (v13 ^ (a2 >> 9));
  v18 = (uint64_t ****)(v15 + 16 * v17);
  v19 = *v18;
  if (*v18 != a2)
  {
    v20 = 1;
    while (v19 != (uint64_t ***)-4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(uint64_t ****)(v15 + 16 * v17);
      if (v19 == a2)
      {
        v18 = (uint64_t ****)(v15 + 16 * v17);
        goto LABEL_24;
      }
    }
    goto LABEL_23;
  }
LABEL_24:
  v30 = v18[1];
  v33 = (llvm::Type *)*v30;
  v32 = (char *)(v30 + 2);
  v31 = v33;
LABEL_25:
  v34 = *a2[3][2];
  v35 = *(unsigned __int8 *)(v34 + 8);
  if (v34)
    v36 = v35 == 18;
  else
    v36 = 0;
  if (!v36)
  {
    v37 = *((_DWORD *)a2 + 9);
    if (v34)
      v38 = v35 == 19;
    else
      v38 = 0;
    if (!v38)
      return (llvm::Value **)sub_1C4DF1134(v32, v31, v37, (unsigned __int8 *)v34, a3, a4, a5, v9, (uint64_t)a2);
    if (v37 == 732 && *(_QWORD *)a3 && llvm::Constant::isNullValue(*(llvm::Constant **)a3))
      return llvm::ConstantInt::getFalse((uint64_t **)v34, v55, v56);
    return 0;
  }
  v105 = v31;
  v39 = (llvm *)*((unsigned int *)a2 + 9);
  v40 = a2[5];
  v41 = *(unsigned int *)(v34 + 32);
  v112 = (llvm::FixedVectorType ***)v114;
  v113 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v112, v41, 0);
  v109 = v111;
  v110 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v109, a4, 0);
  v45 = *(uint64_t ***)(v34 + 24);
  if (((_DWORD)v39 - 3745) < 4)
  {
    v46 = *(llvm::Constant **)a3;
    if (*(_QWORD *)a3 && *((_BYTE *)v46 + 16) == 16)
    {
      v47 = *(unsigned int *)(v34 + 32);
      v48 = (_QWORD *)((char *)v46 + 24);
      if (*((_DWORD *)v46 + 8) >= 0x41u)
        v48 = (_QWORD *)*v48;
      v49 = (_QWORD *)*v48;
      v106 = v108;
      v107 = 0x1000000000;
      if ((_DWORD)v47)
      {
        for (i = 0; i != v47; ++i)
        {
          if ((unint64_t)v49 <= i)
            False = llvm::ConstantInt::getFalse(v45, v42, v43);
          else
            False = llvm::ConstantInt::getTrue(v45, v42, v43);
          v52 = False;
          v53 = v107;
          if (v107 >= (unint64_t)HIDWORD(v107))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
            v53 = v107;
          }
          *((_QWORD *)v106 + v53) = v52;
          v54 = (v107 + 1);
          LODWORD(v107) = v107 + 1;
        }
LABEL_123:
        v100 = (llvm::FixedVectorType ***)v106;
        goto LABEL_125;
      }
      goto LABEL_124;
    }
    goto LABEL_100;
  }
  if ((_DWORD)v39 == 153)
  {
    v80 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(*(_QWORD *)a3 + 16) == 16)
      v81 = *(llvm::Constant **)a3;
    else
      v81 = 0;
    if (*(_BYTE *)(v80 + 16) != 16)
      v80 = 0;
    if (v81)
      v82 = v80 == 0;
    else
      v82 = 1;
    if (!v82)
    {
      v92 = *(unsigned int *)(v34 + 32);
      v93 = (_QWORD *)((char *)v81 + 24);
      if (*((_DWORD *)v81 + 8) >= 0x41u)
        v93 = (_QWORD *)*v93;
      v94 = (_QWORD *)(v80 + 24);
      if (*(_DWORD *)(v80 + 32) >= 0x41u)
        v94 = (_QWORD *)*v94;
      v95 = (_QWORD *)*v93;
      v96 = (_QWORD *)*v94;
      v106 = v108;
      v107 = 0x1000000000;
      if ((_DWORD)v92)
      {
        do
        {
          if (v95 >= v96)
            True = llvm::ConstantInt::getFalse(v45, v42, v43);
          else
            True = llvm::ConstantInt::getTrue(v45, v42, v43);
          v98 = True;
          v99 = v107;
          if (v107 >= (unint64_t)HIDWORD(v107))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
            v99 = v107;
          }
          *((_QWORD *)v106 + v99) = v98;
          v54 = (v107 + 1);
          LODWORD(v107) = v107 + 1;
          v95 = (_QWORD *)((char *)v95 + 1);
          --v92;
        }
        while (v92);
        goto LABEL_123;
      }
LABEL_124:
      v54 = 0;
      v100 = (llvm::FixedVectorType ***)v108;
LABEL_125:
      Impl = (uint64_t)llvm::ConstantVector::getImpl(v100, (llvm::Type *)v54);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v100, (llvm::Type *)v54);
        Impl = sub_1C537B3A4(**v101 + 1288, (uint64_t)v101, v100, v54);
      }
      if (v106 != v108)
        goto LABEL_137;
      goto LABEL_138;
    }
LABEL_100:
    v104 = (llvm::Type *)*(unsigned int *)(v34 + 32);
    if ((_DWORD)v104)
    {
      v83 = 0;
      v84 = a4;
      while (!v84)
      {
LABEL_107:
        v88 = sub_1C4DF1134(v32, v105, (int)v39, (unsigned __int8 *)v45, (uint64_t)v109, v110, a5, v9, (uint64_t)a2);
        if (!v88)
          goto LABEL_111;
        v112[(_QWORD)v83] = (llvm::FixedVectorType **)v88;
        v83 = (llvm::Type *)((char *)v83 + 1);
        if (v83 == v104)
          goto LABEL_109;
      }
      v85 = 0;
      while (1)
      {
        hasVectorInstrinsicScalarOpd = llvm::hasVectorInstrinsicScalarOpd(v39, v85);
        AggregateElement = *(llvm::UndefValue **)(a3 + 8 * v85);
        if (!hasVectorInstrinsicScalarOpd)
        {
          AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, v83);
          if (!AggregateElement)
            break;
        }
        v109[v85++] = AggregateElement;
        if (v84 == v85)
          goto LABEL_107;
      }
LABEL_111:
      Impl = 0;
    }
    else
    {
LABEL_109:
      v89 = v112;
      v90 = v113;
      Impl = (uint64_t)llvm::ConstantVector::getImpl(v112, (llvm::Type *)v113);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v89, (llvm::Type *)v90);
        Impl = sub_1C537B3A4(**v91 + 1288, (uint64_t)v91, v89, v90);
      }
    }
    goto LABEL_138;
  }
  if ((_DWORD)v39 != 185)
    goto LABEL_100;
  v57 = *(llvm::Constant **)(a3 + 16);
  v58 = *(llvm::Constant **)(a3 + 24);
  v59 = (llvm::Constant *)llvm::ConstantFoldLoadFromConstPtr(*(llvm **)a3, (llvm::Constant *)v34, (llvm::Type *)(v40 + 34), v44);
  v106 = v108;
  v107 = 0x2000000000;
  v60 = *(_DWORD *)(v34 + 32);
  if (!v60)
  {
    v72 = 0;
    v102 = (llvm::FixedVectorType ***)v108;
LABEL_133:
    Impl = (uint64_t)llvm::ConstantVector::getImpl(v102, (llvm::Type *)v72);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v102, (llvm::Type *)v72);
      Impl = sub_1C537B3A4(**v103 + 1288, (uint64_t)v103, v102, v72);
    }
    goto LABEL_136;
  }
  v61 = v59;
  v62 = 0;
  while (1)
  {
    v63 = llvm::Constant::getAggregateElement(v57, v62);
    if (!v63)
      break;
    v64 = (unsigned __int8 *)v63;
    v65 = llvm::Constant::getAggregateElement(v58, v62);
    if (v61)
      v66 = llvm::Constant::getAggregateElement(v61, v62);
    else
      v66 = 0;
    if (v64[16] - 11 <= 1)
    {
      if (!v65)
      {
        if (!v66)
          goto LABEL_135;
        v70 = v107;
        if (v107 >= (unint64_t)HIDWORD(v107))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
          v70 = v107;
        }
        *((_QWORD *)v106 + v70) = v66;
        LODWORD(v107) = v107 + 1;
        if ((llvm::Constant::isNullValue((llvm::Constant *)v64) & 1) != 0)
          goto LABEL_135;
        goto LABEL_72;
      }
      v67 = v107;
      if (v107 >= (unint64_t)HIDWORD(v107))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
        v67 = v107;
      }
      *((_QWORD *)v106 + v67) = v65;
      LODWORD(v107) = v107 + 1;
    }
    if ((llvm::Constant::isNullValue((llvm::Constant *)v64) & 1) != 0)
    {
      if (!v65)
        goto LABEL_135;
      v68 = v107;
      v69 = HIDWORD(v107);
      goto LABEL_75;
    }
LABEL_72:
    isOneValue = llvm::Constant::isOneValue((llvm::Constant *)v64);
    Impl = 0;
    if (!isOneValue || !v66)
      goto LABEL_136;
    v68 = v107;
    v69 = HIDWORD(v107);
    v65 = v66;
LABEL_75:
    if (v68 >= v69)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v68 + 1, 8);
      v68 = v107;
    }
    *((_QWORD *)v106 + v68) = v65;
    v72 = (v107 + 1);
    LODWORD(v107) = v107 + 1;
    v62 = (llvm::Type *)((_DWORD)v62 + 1);
    if (v60 == (_DWORD)v62)
      goto LABEL_131;
  }
  v72 = v107;
LABEL_131:
  if ((_DWORD)v72 == *(_DWORD *)(v34 + 32))
  {
    v102 = (llvm::FixedVectorType ***)v106;
    goto LABEL_133;
  }
LABEL_135:
  Impl = 0;
LABEL_136:
  if (v106 != v108)
LABEL_137:
    free(v106);
LABEL_138:
  if (v109 != (_QWORD *)v111)
    free(v109);
  if (v112 != v114)
    free(v112);
  return (llvm::Value **)Impl;
}

llvm::ValueHandleBase *sub_1C4DF1134(char *a1, llvm::Type *a2, int a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t *a7, llvm::ConstrainedFPIntrinsic *a8, uint64_t a9)
{
  llvm::Constant *v9;
  llvm::ValueHandleBase *v11;
  uint64_t **v13;
  size_t v15;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  BOOL v21;
  llvm::Constant *v22;
  unsigned int v23;
  llvm::APFloat *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const llvm::APFloat *v28;
  unsigned __int16 RoundingMode;
  char v31;
  uint64_t v32;
  const llvm::detail::DoubleAPFloat *v33;
  int v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  llvm::Constant *v40;
  BOOL v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  int v52;
  _BOOL4 v53;
  const void **v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  const llvm::APInt *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  double v67;
  unsigned __int8 *v68;
  char *v69;
  uint64_t v70;
  unsigned int v72;
  unsigned __int8 *v73;
  llvm::APInt *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  llvm::UndefValue *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _BOOL4 v85;
  unsigned __int16 v86;
  const llvm::detail::DoubleAPFloat *v87;
  BOOL v88;
  char v89;
  int v90;
  const llvm::APFloat *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  llvm::ConstantFP *v112;
  float v113;
  _QWORD *v114;
  unsigned int v115;
  const llvm::APFloat *v116;
  llvm::Type *v117;
  uint64_t v119;
  llvm::APInt *v120;
  int v123;
  void *v124;
  void **v125;
  const llvm::detail::DoubleAPFloat *v126;
  llvm::detail::DoubleAPFloat *v127;
  uint64_t *v128;
  llvm::Value **v129;
  const llvm::detail::DoubleAPFloat *v130;
  llvm::detail::DoubleAPFloat *v131;
  uint64_t *v132;
  uint64_t v133;
  int v134;
  llvm::detail::DoubleAPFloat *v135;
  _DWORD *v136;
  uint64_t v137;
  const llvm::detail::DoubleAPFloat *v138;
  llvm::detail::DoubleAPFloat *v139;
  _DWORD *v140;
  uint64_t v141;
  int v142;
  llvm::Value **v143;
  char *v144;
  const llvm::detail::DoubleAPFloat *v145;
  uint64_t *v146;
  const llvm::APFloat *v147;
  const llvm::detail::DoubleAPFloat *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  llvm::UndefValue *AggregateElement;
  llvm::ConstantInt *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  void **v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  llvm::ConstantFP *v169;
  const llvm::APFloat *v170;
  uint64_t *v171;
  uint64_t *v172;
  const llvm::detail::DoubleAPFloat *v173;
  llvm::detail::DoubleAPFloat *v174;
  uint64_t *v175;
  llvm::Value **v176;
  const llvm::detail::DoubleAPFloat *v177;
  llvm::detail::DoubleAPFloat *v178;
  _DWORD *v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  char v184;
  const llvm::APFloat *v185;
  const llvm::APFloat *v186;
  llvm::ConstantFP *v187;
  BOOL *v188;
  llvm::UndefValue *v189;
  llvm::UndefValue *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  llvm::ConstantFP *v194;
  void *v195;
  char *v196;
  llvm::detail::DoubleAPFloat *v197;
  const llvm::detail::DoubleAPFloat *v198;
  int v199;
  char *v200;
  uint64_t **v201;
  void *v202;
  uint64_t *v203;
  char *v204;
  char v205;
  const llvm::detail::DoubleAPFloat *v206;
  uint64_t *v207;
  uint64_t *v208;
  int v209;
  uint64_t *v210;
  llvm::ConstantFP *v211;
  long double v212;
  _QWORD *v213;
  long double v214;
  uint64_t *v215;
  int v216;
  const llvm::APFloat *v217;
  void *v218;
  _BYTE *v219;
  void *v220;
  uint64_t v221;
  _BYTE *v222;
  _BYTE *v223;
  _BYTE *v224;
  unsigned int v225;
  unsigned int v226;
  llvm::ConstantInt *v227;
  const llvm::APInt *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  char v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  BOOL *v237;
  unsigned int v238;
  unsigned int v239;
  const llvm::APInt *v241;
  const llvm::APInt *v242;
  void *v243;
  llvm::Type *v244;
  BOOL *v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  _BOOL4 v252;
  uint64_t v253;
  BOOL *v254;
  unsigned int v255;
  const llvm::detail::DoubleAPFloat *v256;
  unsigned int v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  double (*v261)(double, double);
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  double v266;
  const llvm::APInt *v267;
  uint64_t v268;
  llvm::ConstantInt *v269;
  unsigned int v270;
  unint64_t v271;
  llvm::ValueHandleBase *v272;
  const llvm::APInt *v273;
  int v274;
  llvm::Type *v275;
  llvm::ConstantFP *v276;
  const llvm::detail::DoubleAPFloat *v277;
  const llvm::APFloat *v278;
  uint64_t v279;
  size_t v280;
  const llvm::APInt *v281;
  uint64_t v282;
  unint64_t v283;
  double v284;
  size_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  BOOL *v289;
  llvm::ConstantInt *v290;
  const llvm::detail::DoubleAPFloat *v291;
  unsigned int v292;
  const llvm::APFloat *v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  char v301;
  int v302;
  _BOOL4 v304;
  uint64_t v305;
  uint64_t **v306;
  uint64_t **v307;
  uint64_t **v308;
  uint64_t **v309;
  unint64_t v310;
  uint64_t *v311;
  unint64_t v312;
  size_t v313;
  const llvm::APInt *v314;
  unint64_t *v315;
  uint64_t *v316;
  double v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  int v321;
  _QWORD *v322;
  const llvm::detail::DoubleAPFloat *v323;
  unsigned int v324;
  char v325;
  int v326;
  _BOOL4 v328;
  uint64_t v329;
  uint64_t *v330;
  llvm::Constant *v331;
  unint64_t v332;
  uint64_t v333;
  unsigned int v334;
  unint64_t v335;
  llvm::Value **v336;
  llvm::Value **v337;
  llvm::Value **v338;
  uint64_t *v339;
  llvm::detail::IEEEFloat *v340;
  llvm::detail::IEEEFloat *v341;
  _DWORD *v342;
  uint64_t v343;
  int v344;
  char v345;
  _DWORD *v346;
  uint64_t v347;
  int v348;
  char v349;
  _DWORD *v350;
  uint64_t v351;
  int v352;
  char v353;
  _DWORD *v354;
  uint64_t v355;
  int v356;
  char v357;
  uint64_t *v358;
  uint64_t v359;
  int v360;
  char v361;
  uint64_t *v362;
  uint64_t v363;
  int v364;
  char v365;
  uint64_t *v366;
  uint64_t v367;
  int v368;
  char v369;
  BOOL v370[8];
  uint64_t *v371;
  llvm::Value **v372;
  int v373;
  char v374;
  BOOL v375[8];
  llvm::ValueHandleBase *v376;
  llvm::Value **v377;
  int v378;
  char v379;
  uint64_t v380;
  long double v381;
  llvm::Value **v382;
  int v383;
  char v384;
  long double v385;
  llvm::Value **NullValue;
  uint64_t *v387;
  int v388;
  char v389;
  uint64_t v390;

  v11 = (llvm::ValueHandleBase *)a5;
  LODWORD(v13) = a3;
  v390 = *MEMORY[0x1E0C80C00];
  if (a6 != 3)
  {
    v15 = (size_t)a2;
    if (a6 != 2)
    {
      if (a6 == 1)
        return (llvm::ValueHandleBase *)sub_1C4DF6170(a1, a2, a3, a4, (llvm::Constant **)a5, 1, a7, a8, a9);
      return 0;
    }
    v18 = a4[8];
    if (v18 <= 6 && (a3 - 192) <= 0xA && ((1 << (a3 + 64)) & 0x603) != 0)
    {
      v9 = *(llvm::Constant **)a5;
      v19 = *(unsigned __int8 *)(*(_QWORD *)a5 + 16) - 11;
      v20 = v19 >= 2 ? *(void **)a5 : *(void **)(a5 + 8);
      v21 = v19 >= 2 && *(unsigned __int8 *)(*(_QWORD *)(a5 + 8) + 16) - 11 >= 2;
      if (!v21)
        return (llvm::ValueHandleBase *)v20;
    }
    v22 = *(llvm::Constant **)a5;
    v23 = *(unsigned __int8 *)(*(_QWORD *)a5 + 16);
    if (*(_QWORD *)a5 && v23 == 17)
    {
      v24 = (llvm::Constant *)((char *)v22 + 24);
      v25 = *(_QWORD *)(a5 + 8);
      v26 = *(unsigned __int8 *)(v25 + 16);
      if (!v25 || v26 != 17)
      {
        v20 = 0;
        if (!v25)
          return (llvm::ValueHandleBase *)v20;
        if (v26 != 16)
          return (llvm::ValueHandleBase *)v20;
        v20 = 0;
        if (v18 > 3 || v18 == 1)
          return (llvm::ValueHandleBase *)v20;
        if (a3 == 3428)
        {
          v148 = (llvm::Constant *)((char *)v22 + 32);
          if (*((_UNKNOWN **)v22 + 4) == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v381, v148);
          else
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v381, (uint64_t **)v148);
          v149 = *(_DWORD *)(v25 + 32);
          if (v149 > 0x40)
            v150 = **(_QWORD **)(v25 + 24);
          else
            v150 = (uint64_t)(*(_QWORD *)(v25 + 24) << -(char)v149) >> -(char)v149;
          sub_1C4DF8EAC((uint64_t *)&v385, (void **)&v380, v150, 1);
          if (*(_UNKNOWN **)&v381 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v382);
          }
          else if ((*(_DWORD *)(*(_QWORD *)&v381 + 8) - 64) <= 0xFFFFFF7F && v382)
          {
            MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
          }
          v187 = *(llvm::ConstantFP **)a4;
          v188 = (BOOL *)&v385;
          v20 = llvm::ConstantFP::get(v187, (llvm::LLVMContext *)&v385, v186);
          v143 = NullValue;
          if (NullValue != (llvm::Value **)&unk_1C866F1C0)
          {
LABEL_476:
            if ((*((_DWORD *)v143 + 2) - 64) > 0xFFFFFF7F)
              return (llvm::ValueHandleBase *)v20;
            v172 = v387;
            if (!v387)
              return (llvm::ValueHandleBase *)v20;
            goto LABEL_834;
          }
LABEL_838:
          v215 = (uint64_t *)(v188 + 16);
LABEL_873:
          sub_1C4773C74(v215);
          return (llvm::ValueHandleBase *)v20;
        }
        if (a3 != 239)
          return 0;
        if (v18 == 3)
        {
          v112 = *(llvm::ConstantFP **)a4;
          v212 = llvm::APFloat::convertToDouble(v24);
          v213 = (_QWORD *)(v25 + 24);
          if (*(_DWORD *)(v25 + 32) >= 0x41u)
            v213 = (_QWORD *)*v213;
          v214 = pow(v212, (double)*(int *)v213);
          LODWORD(NullValue) = 64;
          v385 = v214;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v380, (const llvm::APInt **)&v385);
        }
        else
        {
          v112 = *(llvm::ConstantFP **)a4;
          v113 = llvm::APFloat::convertToDouble(v24);
          v114 = (_QWORD *)(v25 + 24);
          if (*(_DWORD *)(v25 + 32) >= 0x41u)
            v114 = (_QWORD *)*v114;
          *(float *)&v115 = pow(v113, (double)*(int *)v114);
          LODWORD(NullValue) = 32;
          *(_QWORD *)&v385 = v115;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v380, (const llvm::APInt **)&v385);
        }
        NullValue = (llvm::Value **)v380;
        v387 = *(uint64_t **)&v381;
        v388 = (int)v382;
        v389 = BYTE4(v382) & 0xF;
LABEL_438:
        v20 = llvm::ConstantFP::get(v112, (llvm::LLVMContext *)&v385, v116);
        v143 = NullValue;
        if (NullValue != (llvm::Value **)&unk_1C866F1C0)
          goto LABEL_476;
        v215 = (uint64_t *)&v387;
        goto LABEL_873;
      }
      if (*(_QWORD *)v25 != *(_QWORD *)v22)
        return 0;
      v340 = (llvm::Constant *)((char *)v22 + 24);
      v27 = sub_1C4DF8FCC((uint64_t)a8);
      if (a8 && (_DWORD)v27)
      {
        RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode(a8);
        if (RoundingMode != 7 && RoundingMode >= 0x100u)
          v31 = RoundingMode;
        else
          v31 = 1;
        v32 = v25 + 24;
        v33 = (llvm::Constant *)((char *)v22 + 32);
        if (*((_UNKNOWN **)v22 + 4) == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, v33);
        else
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)v33);
        v20 = 0;
        switch((int)v13)
        {
          case 'S':
            sub_1C47B4138((uint64_t)&v385, v25 + 24, v31);
            goto LABEL_458;
          case 'T':
          case 'U':
            v34 = sub_1C53F7018(((_QWORD *)a8 - 4 * (*((_DWORD *)a8 + 5) & 0x7FFFFFF))[8]);
            v35 = (void *)*((_QWORD *)v22 + 4);
            if (*(_DWORD *)(*((_QWORD *)a8 - 4) + 36) == 85)
            {
              v36 = (uint64_t)v22 + 24;
              if (v35 == &unk_1C866F1C0)
                v37 = (char *)*((_QWORD *)v22 + 5);
              else
                v37 = (char *)v22 + 24;
              if ((v37[28] & 7) == 1
                || (*(_UNKNOWN **)(v25 + 32) != &unk_1C866F1C0 ? (v38 = v25 + 24) : (v38 = *(_QWORD *)(v25 + 40)),
                    (*(_BYTE *)(v38 + 28) & 7) == 1))
              {
LABEL_41:
                v39 = 1;
                goto LABEL_469;
              }
            }
            else
            {
              if (v35 == &unk_1C866F1C0)
                v219 = (_BYTE *)(*((_QWORD *)v22 + 5) + 8);
              else
                v219 = (char *)v22 + 32;
              v36 = (uint64_t)v22 + 24;
              if ((v219[20] & 7) == 1 && *(_DWORD *)(*(_QWORD *)v219 + 16) != 1)
              {
                v319 = *(_DWORD *)(*(_QWORD *)v219 + 8);
                v320 = v219 + 8;
                if ((v319 - 64) <= 0xFFFFFF7F)
                  v320 = (_QWORD *)*v320;
                v36 = (uint64_t)v22 + 24;
                if (((v320[(v319 - 2) >> 6] >> (v319 - 2)) & 1) == 0)
                  goto LABEL_41;
              }
              v220 = *(void **)(v25 + 32);
              v221 = *(_QWORD *)(v25 + 40);
              v222 = (_BYTE *)(v25 + 32);
              v223 = (_BYTE *)(v221 + 8);
              if (v220 == &unk_1C866F1C0)
                v224 = v223;
              else
                v224 = v222;
              if ((v224[20] & 7) == 1)
              {
                if (*(_DWORD *)(*(_QWORD *)v224 + 16) == 1)
                {
                  v39 = 0;
                  v36 = (uint64_t)v22 + 24;
LABEL_469:
                  llvm::FCmpInst::compare(v36, v32, v34);
                  v226 = v225;
                  if (sub_1C4DF8C78(a8, v39))
                  {
                    v227 = *(llvm::ConstantInt **)a8;
                    if ((*(_DWORD *)(*(_QWORD *)a8 + 8) & 0xFE) == 0x12)
                      v227 = (llvm::ConstantInt *)**((_QWORD **)v227 + 2);
                    v218 = llvm::ConstantInt::get(v227, v226, 0);
LABEL_473:
                    v20 = v218;
                  }
                  else
                  {
LABEL_474:
                    v20 = 0;
                  }
LABEL_475:
                  v143 = NullValue;
                  if (NullValue != (llvm::Value **)&unk_1C866F1C0)
                    goto LABEL_476;
                  goto LABEL_836;
                }
                v321 = *(_DWORD *)(*(_QWORD *)v224 + 8);
                v322 = v224 + 8;
                if ((v321 - 64) <= 0xFFFFFF7F)
                  v322 = (_QWORD *)*v322;
                v36 = (uint64_t)v22 + 24;
                if (((v322[(v321 - 2) >> 6] >> (v321 - 2)) & 1) == 0)
                  goto LABEL_41;
              }
            }
            v39 = 0;
            goto LABEL_469;
          case 'V':
            v216 = sub_1C47B1140((uint64_t)&v385, v25 + 24, v31);
            goto LABEL_458;
          case 'Y':
            v216 = sub_1C48DB628((uint64_t)&v385, v25 + 24, v31);
            goto LABEL_458;
          case '_':
            v216 = sub_1C6187438((uint64_t)&v385, v25 + 24);
            goto LABEL_458;
            sub_1C48DB604((uint64_t)&v385, v25 + 24, v31);
LABEL_458:
            if (!sub_1C4DF8C78(a8, v216))
              goto LABEL_474;
            v218 = llvm::ConstantFP::get(*(llvm::ConstantFP **)a4, (llvm::LLVMContext *)&v385, v217);
            goto LABEL_473;
          default:
            goto LABEL_475;
        }
      }
      v144 = (char *)v22 + 24;
      if ((int)v13 > 200)
      {
        if ((_DWORD)v13 != 202)
        {
          if ((_DWORD)v13 == 238)
            return sub_1C4DF521C((double (*)(double, double))MEMORY[0x1E0C84BB8], (llvm::Constant *)((char *)v22 + 24), (llvm::APFloat *)(v25 + 24), (uint64_t)a4);
          if ((_DWORD)v13 != 201)
            goto LABEL_517;
          v112 = *(llvm::ConstantFP **)a4;
          sub_1C618737C((uint64_t)v340, v25 + 24, (uint64_t)&v385);
          goto LABEL_438;
        }
        v191 = (char *)(v25 + 24);
        v192 = *((_QWORD *)v22 + 4);
        v193 = (char *)*((_QWORD *)v22 + 5);
        v194 = *(llvm::ConstantFP **)a4;
        if ((_UNKNOWN *)v192 != &unk_1C866F1C0)
          v193 = (char *)v22 + 24;
        if ((v193[28] & 7) == 1)
        {
          v201 = (uint64_t **)(v25 + 32);
          v300 = *(_QWORD *)(v25 + 32);
          if ((_UNKNOWN *)v300 != &unk_1C866F1C0)
          {
            NullValue = *(llvm::Value ***)(v25 + 32);
            if ((*(_DWORD *)(v300 + 8) + 64) >= 0x80)
            {
              v27 = operator new[]();
              v387 = (uint64_t *)v27;
            }
            v301 = *(_BYTE *)(v25 + 52);
            v302 = v301 & 7;
            v389 = v301 & 0xF;
            v388 = *(_DWORD *)(v25 + 48);
            v304 = (v301 & 6) != 0 && v302 != 3;
            if (v302 == 1 || v304)
            {
              v305 = *(unsigned int *)(v300 + 8);
              if ((v305 - 64) <= 0xFFFFFF7F)
                v306 = (uint64_t **)v27;
              else
                v306 = &v387;
              v309 = *(uint64_t ***)(v25 + 40);
              v308 = (uint64_t **)(v25 + 40);
              v307 = v309;
              if ((*((_DWORD *)*(v308 - 1) + 2) - 64) >= 0xFFFFFF80)
                v307 = v308;
              if (v305 <= 0xFFFFFFBF)
              {
                v310 = (unint64_t)(v305 + 64) >> 6;
                do
                {
                  v311 = *v307++;
                  *v306++ = v311;
                  --v310;
                }
                while (v310);
              }
            }
            goto LABEL_389;
          }
        }
        else
        {
          v195 = *(void **)(v25 + 32);
          v196 = *(char **)(v25 + 40);
          v197 = (llvm::detail::DoubleAPFloat *)(v25 + 32);
          if (v195 != &unk_1C866F1C0)
            v196 = v191;
          if ((v196[28] & 7) == 1)
          {
            if ((_UNKNOWN *)v192 != &unk_1C866F1C0)
            {
              NullValue = (llvm::Value **)*((_QWORD *)v22 + 4);
              if ((*(_DWORD *)(v192 + 8) + 64) >= 0x80)
              {
                v27 = operator new[]();
                v387 = (uint64_t *)v27;
              }
              v325 = *((_BYTE *)v22 + 52);
              v326 = v325 & 7;
              v389 = v325 & 0xF;
              v388 = *((_DWORD *)v22 + 12);
              v328 = (v325 & 6) != 0 && v326 != 3;
              if (v326 == 1 || v328)
              {
                v329 = *(unsigned int *)(v192 + 8);
                v330 = (v329 - 64) <= 0xFFFFFF7F ? (uint64_t *)v27 : (uint64_t *)&v387;
                v331 = (*(_DWORD *)(*((_QWORD *)v22 + 4) + 8) - 64) >= 0xFFFFFF80
                     ? (llvm::Constant *)((char *)v22 + 40)
                     : (llvm::Constant *)*((_QWORD *)v22 + 5);
                if (v329 <= 0xFFFFFFBF)
                {
                  v332 = (unint64_t)(v329 + 64) >> 6;
                  do
                  {
                    v333 = *(_QWORD *)v331;
                    v331 = (llvm::Constant *)((char *)v331 + 8);
                    *v330++ = v333;
                    --v332;
                  }
                  while (v332);
                }
              }
              goto LABEL_389;
            }
            v201 = (uint64_t **)((char *)v22 + 32);
          }
          else
          {
            v198 = (llvm::Constant *)((char *)v22 + 32);
            if (v195 == &unk_1C866F1C0)
              v199 = llvm::detail::DoubleAPFloat::compare(v197, v198);
            else
              llvm::detail::IEEEFloat::compare(v197, v198);
            if (v199)
              v200 = (char *)v22 + 24;
            else
              v200 = v191;
            v202 = (void *)*((_QWORD *)v200 + 1);
            v201 = (uint64_t **)(v200 + 8);
            if (v202 != &unk_1C866F1C0)
            {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, v201);
LABEL_389:
              v203 = (uint64_t *)&v385;
LABEL_390:
              v20 = llvm::ConstantFP::get(v194, (llvm::LLVMContext *)&v385, v28);
              v143 = NullValue;
              if (NullValue != (llvm::Value **)&unk_1C866F1C0)
                goto LABEL_476;
              goto LABEL_665;
            }
          }
        }
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, (const llvm::detail::DoubleAPFloat *)v201);
        goto LABEL_389;
      }
      if ((_DWORD)v13 == 193)
      {
        v112 = *(llvm::ConstantFP **)a4;
        sub_1C4DF8DC8(v340, (_QWORD *)(v25 + 24), (uint64_t)&v385);
        goto LABEL_438;
      }
      if ((_DWORD)v13 != 19)
      {
        if ((_DWORD)v13 != 192)
        {
LABEL_517:
          v20 = 0;
          v239 = a4[8];
          if (v239 > 3 || v239 == 1)
            return (llvm::ValueHandleBase *)v20;
          if ((_DWORD)v13 != 2925)
          {
            if (!a7)
              return 0;
            LODWORD(v380) = 469;
            v260 = *a7;
            if (!llvm::TargetLibraryInfoImpl::getLibFunc(*a7, a1, v15, &v380))
              return 0;
            if ((int)v380 <= 245)
            {
              if ((v380 - 63) < 2)
              {
LABEL_604:
                if (((*(_QWORD *)(a7[1] + 8 * (v380 >> 6)) >> v380) & 1) == 0
                  && ((*(unsigned __int8 *)(v260 + ((unint64_t)v380 >> 2)) >> (2 * (v380 & 3))) & 3) != 0)
                {
                  v261 = (double (*)(double, double))MEMORY[0x1E0C81620];
                  return sub_1C4DF521C(v261, v340, (llvm::APFloat *)(v25 + 24), (uint64_t)a4);
                }
                return 0;
              }
              if ((v380 - 108) >= 2)
              {
                if ((v380 - 156) >= 2)
                  return 0;
                goto LABEL_604;
              }
LABEL_683:
              if (((*(_QWORD *)(a7[1] + (((unint64_t)v380 >> 3) & 0x1FFFFFF8)) >> v380) & 1) == 0
                && ((*(unsigned __int8 *)(v260 + ((unint64_t)v380 >> 2)) >> (2 * (v380 & 3))) & 3) != 0)
              {
                v261 = (double (*)(double, double))MEMORY[0x1E0C84BB8];
                return sub_1C4DF521C(v261, v340, (llvm::APFloat *)(v25 + 24), (uint64_t)a4);
              }
              return 0;
            }
            if ((v380 - 246) < 2)
            {
              if (((*(_QWORD *)(a7[1] + (((unint64_t)v380 >> 3) & 0x1FFFFFF8)) >> v380) & 1) != 0
                || ((*(unsigned __int8 *)(v260 + ((unint64_t)v380 >> 2)) >> (2 * (v380 & 3))) & 3) == 0)
              {
                return 0;
              }
              v323 = (llvm::Constant *)((char *)v22 + 32);
              if (*((_UNKNOWN **)v22 + 4) == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, v323);
              else
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)v323);
              v292 = sub_1C6187438((uint64_t)&v385, v25 + 24);
            }
            else
            {
              if ((v380 - 364) >= 2)
              {
                if ((v380 - 347) > 1)
                  return 0;
                goto LABEL_683;
              }
              if (((*(_QWORD *)(a7[1] + 8 * (v380 >> 6)) >> v380) & 1) != 0
                || ((*(unsigned __int8 *)(v260 + ((unint64_t)v380 >> 2)) >> (2 * (v380 & 3))) & 3) == 0)
              {
                return 0;
              }
              v291 = (llvm::Constant *)((char *)v22 + 32);
              if (*((_UNKNOWN **)v22 + 4) == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, v291);
              else
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)v291);
              v292 = sub_1C6187518((uint64_t)&v385, v25 + 24);
            }
            v324 = v292;
            if (!v292)
              v9 = llvm::ConstantFP::get(*(llvm::ConstantFP **)a4, (llvm::LLVMContext *)&v385, v293);
            if (NullValue == (llvm::Value **)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v387);
            }
            else if ((*((_DWORD *)NullValue + 2) - 64) <= 0xFFFFFF7F && v387)
            {
              MEMORY[0x1CAA32F9C](v387, 0x1000C8000313F17);
            }
            if (!v324)
              return v9;
            return 0;
          }
          a2 = (llvm::Constant *)((char *)v22 + 32);
          v258 = (void *)*((_QWORD *)v22 + 4);
          if (v258 == &unk_1C866F1C0)
            v144 = (char *)*((_QWORD *)v22 + 5);
          if ((v144[28] & 7) == 3)
            return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
          v259 = v25 + 24;
          if (*(_UNKNOWN **)(v25 + 32) == &unk_1C866F1C0)
            v259 = *(_QWORD *)(v25 + 40);
          if ((*(_BYTE *)(v259 + 28) & 7) == 3)
            return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
          v194 = *(llvm::ConstantFP **)a4;
          if (v258 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, a2);
          else
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)a2);
          v203 = (uint64_t *)&v385;
          sub_1C48DB628((uint64_t)&v385, v25 + 24, 1);
          goto LABEL_390;
        }
        v112 = *(llvm::ConstantFP **)a4;
        sub_1C6187458((uint64_t)v340, v25 + 24, (uint64_t)&v385);
        goto LABEL_438;
      }
      v276 = *(llvm::ConstantFP **)a4;
      v277 = (llvm::Constant *)((char *)v22 + 32);
      if (*((_UNKNOWN **)v22 + 4) == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v381, v277);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v381, (uint64_t **)v277);
      v203 = &v380;
      sub_1C61875D4((uint64_t)&v380, v25 + 24);
      v279 = (uint64_t)v382;
      if (*(_UNKNOWN **)&v381 == &unk_1C866F1C0)
      {
        v382 = 0;
      }
      else
      {
        v388 = v383;
        v389 = v384 & 0xF;
      }
      NullValue = *(llvm::Value ***)&v381;
      v387 = (uint64_t *)v279;
      v381 = COERCE_DOUBLE(&unk_1C866F210);
      v20 = llvm::ConstantFP::get(v276, (llvm::LLVMContext *)&v385, v278);
      if (NullValue == (llvm::Value **)&unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v387);
      }
      else if ((*((_DWORD *)NullValue + 2) - 64) <= 0xFFFFFF7F && v387)
      {
        MEMORY[0x1CAA32F9C](v387, 0x1000C8000313F17);
      }
      v171 = *(uint64_t **)&v381;
      if (*(_UNKNOWN **)&v381 == &unk_1C866F1C0)
      {
LABEL_665:
        v215 = v203 + 2;
        goto LABEL_873;
      }
      goto LABEL_327;
    }
    if (*(_BYTE *)(*(_QWORD *)v22 + 8) == 13)
    {
      v68 = *(unsigned __int8 **)(a5 + 8);
      if (*(_BYTE *)(*(_QWORD *)v68 + 8) == 13)
      {
        if (v23 == 16)
          v69 = (char *)v22 + 24;
        else
          v69 = 0;
        if (v23 - 11 < 2)
          v69 = 0;
        if (v23 == 16)
          v70 = (uint64_t)v22 + 24;
        else
          v70 = (uint64_t)v69;
        if (v23 > 0x10 || ((1 << v23) & 0x11800) == 0)
          return 0;
        v20 = 0;
        v72 = v68[16];
        v73 = v68 + 24;
        if (v72 == 16)
          v74 = (llvm::APInt *)v73;
        else
          v74 = 0;
        if (v72 > 0x10 || ((1 << v72) & 0x11800) == 0)
          return (llvm::ValueHandleBase *)v20;
        v20 = 0;
        if (a3 <= 299)
        {
          if (a3 > 261)
          {
            switch(a3)
            {
              case 274:
              case 275:
                goto LABEL_285;
              case 276:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
                return (llvm::ValueHandleBase *)v20;
              case 278:
                goto LABEL_525;
              case 283:
                goto LABEL_446;
              case 284:
                goto LABEL_443;
              default:
                if (a3 == 262)
                  goto LABEL_531;
                if (a3 == 263)
                  goto LABEL_523;
                return (llvm::ValueHandleBase *)v20;
            }
          }
          if (a3 != 1)
          {
            if (a3 != 52 && a3 != 54)
              return (llvm::ValueHandleBase *)v20;
            v75 = *((_DWORD *)v74 + 2);
            if (v75 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v74) != v75 - 1)
                goto LABEL_116;
            }
            else if (*(_QWORD *)v74 != 1)
            {
LABEL_116:
              if (!v70)
                return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
              v76 = *(_DWORD *)(v70 + 8);
LABEL_612:
              if ((_DWORD)v13 == 54)
              {
                if (v76 > 0x40)
                {
                  v264 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v70);
                }
                else
                {
                  v263 = __clz(__rbit64(*(_QWORD *)v70));
                  if (v76 >= v263)
                    v264 = v263;
                  else
                    v264 = v76;
                }
              }
              else if (v76 > 0x40)
              {
                v264 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v70);
              }
              else
              {
                v264 = v76 + __clz(*(_QWORD *)v70) - 64;
              }
              return (llvm::ValueHandleBase *)llvm::ConstantInt::get((llvm::ConstantInt *)a4, v264, 0);
            }
            if (v70)
            {
              v76 = *(_DWORD *)(v70 + 8);
              if (v76 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v70) != v76)
                  goto LABEL_612;
              }
              else if (*(_QWORD *)v70)
              {
                goto LABEL_612;
              }
            }
            return (llvm::ValueHandleBase *)llvm::PoisonValue::get((llvm::PoisonValue *)a4, a2);
          }
          v238 = *((_DWORD *)v74 + 2);
          if (v238 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v74) != v238 - 1)
            {
LABEL_509:
              if (!v70)
                return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
              goto LABEL_830;
            }
          }
          else if (*(_QWORD *)v74 != 1)
          {
            goto LABEL_509;
          }
          if (v70)
          {
            v257 = *(_DWORD *)(v70 + 8);
            if (v257 > 0x40)
            {
              if (((*(_QWORD *)(*(_QWORD *)v70 + 8 * ((v257 - 1) >> 6)) >> (v257 - 1)) & 1) != 0
                && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v70) == v257 - 1)
              {
                return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
              }
            }
            else if (*(_QWORD *)v70 == 1 << (v257 - 1))
            {
              return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
            }
LABEL_830:
            sub_1C4DA6CE8((const void **)v70, (uint64_t)&v385);
LABEL_831:
            v20 = llvm::ConstantInt::get((llvm::ConstantInt **)a4, (llvm::Type *)&v385, v62);
            goto LABEL_832;
          }
          return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
        }
        switch(a3)
        {
          case 300:
LABEL_531:
            if (v23 == 12 || v72 == 12)
              return (llvm::ValueHandleBase *)llvm::PoisonValue::get((llvm::PoisonValue *)a4, a2);
            if (!v70 && v72 != 16)
              return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
            if (!v70 || v72 != 16)
              return llvm::Constant::getAllOnesValue((llvm::Constant *)a4, a2);
            if (a3 != 300)
            {
              llvm::APInt::sadd_sat((const void **)v70, v74, (llvm::APInt *)&v385);
              goto LABEL_831;
            }
            v375[0] = 0;
            llvm::APInt::uadd_ov((const void **)v70, (uint64_t **)v74, v375, (uint64_t)&v385);
            if (v375[0])
            {
              v334 = *(_DWORD *)(v70 + 8);
              LODWORD(v381) = v334;
              if (v334 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v380, -1, 1);
              }
              else
              {
                if (v334)
                  v335 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v334;
                else
                  *(double *)&v335 = 0.0;
                v380 = v335;
              }
              if (NullValue >= 0x41 && v385 != 0.0)
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v385, 0x1000C8000313F17);
            }
            else
            {
              LODWORD(v381) = (_DWORD)NullValue;
              *(double *)&v380 = v385;
            }
            v243 = llvm::ConstantInt::get((llvm::ConstantInt **)a4, (llvm::Type *)&v380, v242);
            goto LABEL_644;
          case 301:
            goto LABEL_523;
          case 305:
          case 306:
LABEL_285:
            if (v23 == 12 || v72 == 12)
              return (llvm::ValueHandleBase *)llvm::PoisonValue::get((llvm::PoisonValue *)a4, a2);
            if (!v70 && v72 != 16)
              return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
            if (!v70 || v72 != 16)
              return (llvm::ValueHandleBase *)sub_1C6187538(a3, (llvm::Type ***)a4);
            if (a3 > 304)
            {
              if (a3 == 306)
                v160 = 36;
              else
                v160 = 34;
            }
            else if (a3 == 274)
            {
              v160 = 38;
            }
            else
            {
              v160 = 40;
            }
            llvm::ICmpInst::compare(v70, (uint64_t)v74, v160);
            if (v274)
              v275 = (llvm::Type *)v70;
            else
              v275 = v74;
            return (llvm::ValueHandleBase *)llvm::ConstantInt::get((llvm::ConstantInt **)a4, v275, v273);
          case 309:
            goto LABEL_525;
          case 311:
LABEL_446:
            if (v23 == 12 || v72 == 12)
              return (llvm::ValueHandleBase *)llvm::PoisonValue::get((llvm::PoisonValue *)a4, a2);
            if (!v70 && v72 != 16)
              return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
            if (!v70 || v72 != 16)
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
            if (a3 == 311)
              llvm::APInt::usub_sat((llvm::APInt *)v70, (unint64_t **)v74, (llvm::APInt *)&v385);
            else
              llvm::APInt::ssub_sat((const void **)v70, v74, (llvm::APInt *)&v385);
            goto LABEL_831;
          case 312:
LABEL_443:
            if (!v70 || v72 != 16)
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
LABEL_523:
            if (!v70 || v72 != 16)
            {
              v385 = COERCE_DOUBLE(llvm::Constant::getAllOnesValue(**((llvm::Constant ***)a4 + 2), a2));
              NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*((_QWORD *)a4 + 2) + 8), v244);
              return llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)a4, (llvm::Type *)&v385, 2);
            }
LABEL_525:
            if (!v70 || v72 != 16)
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
            v370[0] = 0;
            if (a3 > 300)
            {
              if (a3 == 301)
              {
                llvm::APInt::uadd_ov((const void **)v70, (uint64_t **)v74, v370, (uint64_t)&v385);
              }
              else if (a3 == 309)
              {
                llvm::APInt::umul_ov((llvm::APInt *)v70, (uint64_t **)v74, v370, (uint64_t)&v385);
              }
              else
              {
                llvm::APInt::usub_ov((const void **)v70, (unint64_t **)v74, v370, (uint64_t)&v385);
              }
            }
            else if (a3 == 263)
            {
              llvm::APInt::sadd_ov((const void **)v70, v74, v370, (uint64_t)&v385);
            }
            else if (a3 == 278)
            {
              llvm::APInt::smul_ov((const void **)v70, v74, v370, (llvm::APInt *)&v385);
            }
            else
            {
              llvm::APInt::ssub_ov((const void **)v70, v74, v370, (uint64_t)&v385);
            }
            *(double *)&v380 = v385;
            LODWORD(v381) = (_DWORD)NullValue;
            *(double *)v375 = COERCE_DOUBLE(llvm::ConstantInt::get(*(llvm::ConstantInt **)a4, (llvm::LLVMContext *)&v380, v241));
            v268 = **(_QWORD **)a4;
            v269 = *(llvm::ConstantInt **)(v268 + 1888);
            v270 = *(_DWORD *)(v268 + 1896);
            LODWORD(NullValue) = v270 >> 8;
            if (v270 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v385, v370[0], 0);
            }
            else
            {
              if (v270 <= 0xFF)
                LOBYTE(v271) = 0;
              else
                v271 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v270);
              *(_QWORD *)&v385 = v271 & v370[0];
            }
            v272 = llvm::ConstantInt::get(v269, (llvm::LLVMContext *)&v385, v267);
            if (NullValue >= 0x41 && v385 != 0.0)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v385, 0x1000C8000313F17);
            v376 = v272;
            v243 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)a4, (llvm::Type *)v375, 2);
LABEL_644:
            v20 = v243;
            break;
          default:
            return (llvm::ValueHandleBase *)v20;
        }
LABEL_645:
        if (LODWORD(v381) < 0x41)
          return (llvm::ValueHandleBase *)v20;
        v172 = (uint64_t *)v380;
        if (*(double *)&v380 == 0.0)
          return (llvm::ValueHandleBase *)v20;
LABEL_834:
        MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
        return (llvm::ValueHandleBase *)v20;
      }
    }
    if (v23 != 15 && v23 != 10)
      return 0;
    v78 = *(_QWORD *)(a5 + 8);
    if (*(_BYTE *)(v78 + 16) != 16)
      return 0;
    v79 = (_QWORD *)(v78 + 24);
    v80 = *(_DWORD *)(v78 + 32);
    if (v80 >= 0x41)
    {
      if (v80 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v78 + 24)) > 0x40)
        return 0;
      v79 = (_QWORD *)*v79;
    }
    if (*v79 != 4)
      return 0;
    if (((_DWORD)v13 - 11302) <= 7)
    {
      if (((1 << ((_BYTE)v13 - 38)) & 0x33) != 0)
      {
        AggregateElement = llvm::Constant::getAggregateElement(v22, 0);
        if (!AggregateElement || *((_BYTE *)AggregateElement + 16) != 17)
          return 0;
        v82 = (uint64_t)AggregateElement + 24;
        v83 = 1;
LABEL_283:
        v158 = (llvm::ConstantInt *)a4;
        v159 = 1;
        return (llvm::ValueHandleBase *)sub_1C4DF8BA4(v82, v83, v158, (const llvm::APInt *)v159);
      }
      v189 = llvm::Constant::getAggregateElement(v22, 0);
      if (!v189 || *((_BYTE *)v189 + 16) != 17)
        return 0;
      v82 = (uint64_t)v189 + 24;
      v83 = 1;
    }
    else
    {
      if (((_DWORD)v13 - 11802) > 7)
        return 0;
      if (((1 << ((_BYTE)v13 - 26)) & 0x33) != 0)
      {
        v81 = llvm::Constant::getAggregateElement(v22, 0);
        if (!v81 || *((_BYTE *)v81 + 16) != 17)
          return 0;
        v82 = (uint64_t)v81 + 24;
        v83 = 0;
        goto LABEL_283;
      }
      v190 = llvm::Constant::getAggregateElement(v22, 0);
      if (!v190 || *((_BYTE *)v190 + 16) != 17)
        return 0;
      v82 = (uint64_t)v190 + 24;
      v83 = 0;
    }
    v158 = (llvm::ConstantInt *)a4;
    v159 = 0;
    return (llvm::ValueHandleBase *)sub_1C4DF8BA4(v82, v83, v158, (const llvm::APInt *)v159);
  }
  v40 = *(llvm::Constant **)a5;
  if (*(_QWORD *)a5)
    v41 = *(_BYTE *)(*(_QWORD *)a5 + 16) == 17;
  else
    v41 = 0;
  if (v41)
  {
    v42 = *(_QWORD *)(a5 + 8);
    if (v42 && *(_BYTE *)(v42 + 16) == 17)
    {
      v84 = *(_QWORD *)(a5 + 16);
      if (v84)
      {
        if (*(_BYTE *)(v84 + 16) == 17)
        {
          v85 = sub_1C4DF8FCC((uint64_t)a8);
          if (a8 && v85)
          {
            v86 = llvm::ConstrainedFPIntrinsic::getRoundingMode(a8);
            v87 = (llvm::Constant *)((char *)v40 + 32);
            if (*((_UNKNOWN **)v40 + 4) == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, v87);
            else
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)v87);
            if ((v13 | 2) == 0x5A
              && (v86 != 7 ? (v88 = v86 >= 0x100u) : (v88 = 0),
                  !v88 ? (v89 = 1) : (v89 = v86),
                  sub_1C480BA3C((uint64_t)&v385, v42 + 24, v84 + 24, v89),
                  sub_1C4DF8C78(a8, v90)))
            {
              v20 = llvm::ConstantFP::get(*(llvm::ConstantFP **)a4, (llvm::LLVMContext *)&v385, v91);
            }
            else
            {
              v20 = 0;
            }
            v143 = NullValue;
            if (NullValue != (llvm::Value **)&unk_1C866F1C0)
              goto LABEL_476;
LABEL_836:
            v215 = (uint64_t *)&v387;
            goto LABEL_873;
          }
          v123 = (_DWORD)v13 - 2878;
          v125 = (void **)((char *)v40 + 32);
          v124 = (void *)*((_QWORD *)v40 + 4);
          sub_1C4DF9184(&NullValue, v124);
          sub_1C4DF9184(&v381, v124);
          v339 = (uint64_t *)v124;
          sub_1C4DF9184(&v376, v124);
          v126 = (const llvm::detail::DoubleAPFloat *)(v84 + 32);
          if (*(_UNKNOWN **)(v84 + 32) == &unk_1C866F1C0)
            v127 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v366, v126);
          else
            v127 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v366, (uint64_t **)v126);
          v128 = v366;
          v341 = (llvm::detail::IEEEFloat *)(v84 + 32);
          if (v366 == (uint64_t *)&unk_1C866F1C0)
          {
            if ((*(_BYTE *)(v367 + 28) & 8) == 0
              || (llvm::detail::DoubleAPFloat::changeSign(v127), v128 = v366, v366 == (uint64_t *)&unk_1C866F1C0))
            {
              v129 = (llvm::Value **)v367;
              v367 = 0;
              v128 = (uint64_t *)&unk_1C866F1C0;
LABEL_225:
              v11 = (llvm::ValueHandleBase *)&unk_1C866F210;
              v371 = v128;
              v372 = v129;
              v366 = (uint64_t *)&unk_1C866F210;
              v130 = (llvm::Constant *)((char *)v40 + 32);
              if (*v125 == &unk_1C866F1C0)
                v131 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v358, v130);
              else
                v131 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v358, (uint64_t **)v130);
              v132 = v358;
              if (v358 == (uint64_t *)&unk_1C866F1C0)
              {
                if ((*(_BYTE *)(v359 + 28) & 8) == 0
                  || (llvm::detail::DoubleAPFloat::changeSign(v131), v132 = v358, v358 == (uint64_t *)&unk_1C866F1C0))
                {
                  v133 = v359;
                  v359 = 0;
                  v132 = (uint64_t *)&unk_1C866F1C0;
LABEL_231:
                  v362 = v132;
                  v363 = v133;
                  v358 = (uint64_t *)&unk_1C866F210;
                  if (v371 == (uint64_t *)&unk_1C866F1C0)
                    v134 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v371, (const llvm::detail::DoubleAPFloat *)&v362);
                  else
                    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v371, (const llvm::detail::IEEEFloat *)&v362);
                  if ((v134 - 1) > 1)
                  {
                    LODWORD(v13) = 0;
                    goto LABEL_296;
                  }
                  if (*(_UNKNOWN **)v341 == &unk_1C866F1C0)
                    v135 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v350, v341);
                  else
                    v135 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v350, (uint64_t **)v341);
                  v136 = v350;
                  if (v350 == (_DWORD *)&unk_1C866F1C0)
                  {
                    if ((*(_BYTE *)(v351 + 28) & 8) == 0
                      || (llvm::detail::DoubleAPFloat::changeSign(v135), v136 = v350, v350 == (_DWORD *)&unk_1C866F1C0))
                    {
                      v137 = v351;
                      v351 = 0;
                      v136 = &unk_1C866F1C0;
LABEL_240:
                      v354 = v136;
                      v355 = v137;
                      v350 = &unk_1C866F210;
                      v138 = (const llvm::detail::DoubleAPFloat *)(v42 + 32);
                      if (*(_UNKNOWN **)(v42 + 32) == &unk_1C866F1C0)
                        v139 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v342, v138);
                      else
                        v139 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v342, (uint64_t **)v138);
                      v140 = v342;
                      if (v342 == (_DWORD *)&unk_1C866F1C0)
                      {
                        if ((*(_BYTE *)(v343 + 28) & 8) == 0
                          || (llvm::detail::DoubleAPFloat::changeSign(v139),
                              v140 = v342,
                              v342 == (_DWORD *)&unk_1C866F1C0))
                        {
                          v141 = v343;
                          v343 = 0;
                          v140 = &unk_1C866F1C0;
                          goto LABEL_246;
                        }
                      }
                      else if ((v345 & 8) != 0)
                      {
                        v345 ^= 8u;
                      }
                      v141 = v343;
                      v348 = v344;
                      v349 = v349 & 0xF0 | v345 & 0xF;
LABEL_246:
                      v346 = v140;
                      v347 = v141;
                      v342 = &unk_1C866F210;
                      if (v354 == (_DWORD *)&unk_1C866F1C0)
                        v142 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v354, (const llvm::detail::DoubleAPFloat *)&v346);
                      else
                        llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v354, (const llvm::detail::IEEEFloat *)&v346);
                      LODWORD(v13) = (v142 - 1) < 2;
                      if (v346 == (_DWORD *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v347);
                      }
                      else if ((v346[2] - 64) <= 0xFFFFFF7F && v347)
                      {
                        MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
                      }
                      if (v342 == (_DWORD *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v343);
                      }
                      else if ((v342[2] - 64) <= 0xFFFFFF7F && v343)
                      {
                        MEMORY[0x1CAA32F9C](v343, 0x1000C8000313F17);
                      }
                      if (v354 == (_DWORD *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v355);
                      }
                      else if ((v354[2] - 64) <= 0xFFFFFF7F && v355)
                      {
                        MEMORY[0x1CAA32F9C](v355, 0x1000C8000313F17);
                      }
                      if (v350 == (_DWORD *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v351);
                      }
                      else if ((v350[2] - 64) <= 0xFFFFFF7F && v351)
                      {
                        MEMORY[0x1CAA32F9C](v351, 0x1000C8000313F17);
                      }
LABEL_296:
                      if (v362 == (uint64_t *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v363);
                      }
                      else if ((*((_DWORD *)v362 + 2) - 64) <= 0xFFFFFF7F && v363)
                      {
                        MEMORY[0x1CAA32F9C](v363, 0x1000C8000313F17);
                      }
                      if (v358 == (uint64_t *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v359);
                      }
                      else if ((*((_DWORD *)v358 + 2) - 64) <= 0xFFFFFF7F && v359)
                      {
                        MEMORY[0x1CAA32F9C](v359, 0x1000C8000313F17);
                      }
                      if (v371 == (uint64_t *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74((uint64_t *)&v372);
                      }
                      else if ((*((_DWORD *)v371 + 2) - 64) <= 0xFFFFFF7F && v372)
                      {
                        MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
                      }
                      if (v366 == (uint64_t *)&unk_1C866F1C0)
                      {
                        sub_1C4773C74(&v367);
                      }
                      else if ((*((_DWORD *)v366 + 2) - 64) <= 0xFFFFFF7F && v367)
                      {
                        MEMORY[0x1CAA32F9C](v367, 0x1000C8000313F17);
                      }
                      if ((_DWORD)v13)
                      {
                        if (*(_UNKNOWN **)(v84 + 32) == &unk_1C866F1C0)
                          v161 = *(_QWORD *)(v84 + 40);
                        else
                          v161 = v84 + 24;
                        v162 = *(_BYTE *)(v161 + 28);
                        if ((v162 & 8) != 0 && (v162 & 5 | 2) != 3)
                        {
                          v164 = v84 + 32;
                          v256 = (llvm::Constant *)((char *)v40 + 32);
                          if (*v125 == &unk_1C866F1C0)
                            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v371, v256);
                          else
                            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (uint64_t **)v256);
                          if (v371 == (uint64_t *)&unk_1C866F1C0)
                            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v371);
                          else
                            v374 ^= 8u;
                          sub_1C48552C0((uint64_t)&v381, (uint64_t)&v371);
                          if (v371 == (uint64_t *)&unk_1C866F1C0)
                          {
                            sub_1C4773C74((uint64_t *)&v372);
                          }
                          else if ((*((_DWORD *)v371 + 2) - 64) <= 0xFFFFFF7F && v372)
                          {
                            MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
                          }
                          v163 = 5;
                        }
                        else
                        {
                          sub_1C4DF91B8((llvm::detail::IEEEFloat *)&v381, (uint64_t)v40 + 32);
                          v163 = 4;
                          v164 = v84 + 32;
                        }
                        sub_1C4DF91B8((llvm::detail::IEEEFloat *)&NullValue, v164);
                        v165 = (void **)&v371;
                        v166 = *(void **)(v42 + 32);
                        v42 += 32;
                        if (v166 == &unk_1C866F1C0)
                          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v371, (const llvm::detail::DoubleAPFloat *)v42);
                        else
                          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (uint64_t **)v42);
                        if (v371 != (uint64_t *)&unk_1C866F1C0)
                        {
                          v374 ^= 8u;
                          goto LABEL_407;
                        }
                        goto LABEL_897;
                      }
                      v165 = (void **)(v42 + 32);
                      v173 = (const llvm::detail::DoubleAPFloat *)(v42 + 32);
                      if (*(_UNKNOWN **)(v42 + 32) == &unk_1C866F1C0)
                        v174 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v362, v173);
                      else
                        v174 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v362, (uint64_t **)v173);
                      v175 = v362;
                      if (v362 == (uint64_t *)&unk_1C866F1C0)
                      {
                        if ((*(_BYTE *)(v363 + 28) & 8) == 0
                          || (llvm::detail::DoubleAPFloat::changeSign(v174),
                              v175 = v362,
                              v362 == (uint64_t *)&unk_1C866F1C0))
                        {
                          v176 = (llvm::Value **)v363;
                          v363 = 0;
                          v175 = (uint64_t *)&unk_1C866F1C0;
LABEL_336:
                          v371 = v175;
                          v372 = v176;
                          v362 = (uint64_t *)&unk_1C866F210;
                          v177 = (llvm::Constant *)((char *)v40 + 32);
                          if (*v125 == &unk_1C866F1C0)
                            v178 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v346, v177);
                          else
                            v178 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v346, (uint64_t **)v177);
                          v179 = v346;
                          if (v346 == (_DWORD *)&unk_1C866F1C0)
                          {
                            if ((*(_BYTE *)(v347 + 28) & 8) == 0
                              || (llvm::detail::DoubleAPFloat::changeSign(v178),
                                  v179 = v346,
                                  v346 == (_DWORD *)&unk_1C866F1C0))
                            {
                              v180 = v347;
                              v347 = 0;
                              v179 = &unk_1C866F1C0;
LABEL_342:
                              v354 = v179;
                              v355 = v180;
                              v346 = &unk_1C866F210;
                              if (v371 == (uint64_t *)&unk_1C866F1C0)
                                v181 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v371, (const llvm::detail::DoubleAPFloat *)&v354);
                              else
                                llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v371, (const llvm::detail::IEEEFloat *)&v354);
                              v182 = v181;
                              if (v354 == (_DWORD *)&unk_1C866F1C0)
                              {
                                sub_1C4773C74(&v355);
                              }
                              else if ((v354[2] - 64) <= 0xFFFFFF7F && v355)
                              {
                                MEMORY[0x1CAA32F9C](v355, 0x1000C8000313F17);
                              }
                              if (v346 == (_DWORD *)&unk_1C866F1C0)
                              {
                                sub_1C4773C74(&v347);
                              }
                              else if ((v346[2] - 64) <= 0xFFFFFF7F && v347)
                              {
                                MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
                              }
                              if (v371 == (uint64_t *)&unk_1C866F1C0)
                              {
                                sub_1C4773C74((uint64_t *)&v372);
                              }
                              else if ((*((_DWORD *)v371 + 2) - 64) <= 0xFFFFFF7F && v372)
                              {
                                MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
                              }
                              LODWORD(v13) = v182 - 1;
                              if (v362 == (uint64_t *)&unk_1C866F1C0)
                              {
                                sub_1C4773C74(&v363);
                              }
                              else if ((*((_DWORD *)v362 + 2) - 64) <= 0xFFFFFF7F && v363)
                              {
                                MEMORY[0x1CAA32F9C](v363, 0x1000C8000313F17);
                              }
                              if (v13 <= 1)
                              {
                                if (*(_UNKNOWN **)(v42 + 32) == &unk_1C866F1C0)
                                  v183 = *(_QWORD *)(v42 + 40);
                                else
                                  v183 = v42 + 24;
                                v184 = *(_BYTE *)(v183 + 28);
                                if ((v184 & 8) != 0 && (v184 & 5 | 2) != 3)
                                {
                                  if (*(_UNKNOWN **)v341 == &unk_1C866F1C0)
                                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v371, v341);
                                  else
                                    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (uint64_t **)v341);
                                  if (v371 == (uint64_t *)&unk_1C866F1C0)
                                    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v371);
                                  else
                                    v374 ^= 8u;
                                  sub_1C48552C0((uint64_t)&v376, (uint64_t)&v371);
                                  if (v371 == (uint64_t *)&unk_1C866F1C0)
                                  {
                                    sub_1C4773C74((uint64_t *)&v372);
                                  }
                                  else if ((*((_DWORD *)v371 + 2) - 64) <= 0xFFFFFF7F && v372)
                                  {
                                    MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
                                  }
                                  v163 = 3;
                                }
                                else
                                {
                                  sub_1C4DF91B8((llvm::detail::IEEEFloat *)&v376, (uint64_t)v341);
                                  v163 = 2;
                                }
                                sub_1C4DF91B8((llvm::detail::IEEEFloat *)&NullValue, v42 + 32);
                                sub_1C4DF91B8((llvm::detail::IEEEFloat *)&v381, (uint64_t)v40 + 32);
                                goto LABEL_409;
                              }
                              v204 = (char *)v40 + 24;
                              if (*((_UNKNOWN **)v40 + 4) == &unk_1C866F1C0)
                                v204 = (char *)*((_QWORD *)v40 + 5);
                              v205 = v204[28];
                              if ((v205 & 8) != 0 && (v205 & 5 | 2) != 3)
                              {
                                sub_1C4DF91B8((llvm::detail::IEEEFloat *)&v381, (uint64_t)v341);
                                v163 = 1;
                              }
                              else
                              {
                                if (*(_UNKNOWN **)v341 == &unk_1C866F1C0)
                                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v371, v341);
                                else
                                  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (uint64_t **)v341);
                                if (v371 == (uint64_t *)&unk_1C866F1C0)
                                  llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v371);
                                else
                                  v374 ^= 8u;
                                sub_1C48552C0((uint64_t)&v381, (uint64_t)&v371);
                                if (v371 == (uint64_t *)&unk_1C866F1C0)
                                {
                                  sub_1C4773C74((uint64_t *)&v372);
                                }
                                else if ((*((_DWORD *)v371 + 2) - 64) <= 0xFFFFFF7F && v372)
                                {
                                  MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
                                }
                                v163 = 0;
                              }
                              sub_1C4DF91B8((llvm::detail::IEEEFloat *)&NullValue, (uint64_t)v40 + 32);
                              v13 = &v371;
                              v206 = (const llvm::detail::DoubleAPFloat *)(v42 + 32);
                              if (*v165 == &unk_1C866F1C0)
                                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v371, v206);
                              else
                                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (uint64_t **)v206);
                              if (v371 != (uint64_t *)&unk_1C866F1C0)
                              {
                                v374 ^= 8u;
                                goto LABEL_407;
                              }
LABEL_897:
                              llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v371);
LABEL_407:
                              sub_1C48552C0((uint64_t)&v376, (uint64_t)&v371);
                              if (v371 == (uint64_t *)&unk_1C866F1C0)
                              {
                                sub_1C4773C74((uint64_t *)&v372);
                              }
                              else if ((*((_DWORD *)v371 + 2) - 64) <= 0xFFFFFF7F && v372)
                              {
                                MEMORY[0x1CAA32F9C](v372, 0x1000C8000313F17);
                              }
LABEL_409:
                              switch(v123)
                              {
                                case 0:
                                  v207 = v339;
                                  if (v339 == (uint64_t *)&unk_1C866F1C0)
                                  {
                                    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v371, (uint64_t)&unk_1C866F1C0, v163);
                                  }
                                  else
                                  {
                                    v371 = v339;
                                    v208 = v339;
                                    if ((*((_DWORD *)v339 + 2) + 64) >= 0x80)
                                    {
                                      v336 = (llvm::Value **)operator new[]();
                                      v207 = v339;
                                      v372 = v336;
                                      v208 = v371;
                                    }
                                    v374 = v374 & 0xF0 | 2;
                                    v209 = *((_DWORD *)v208 + 2);
                                    if ((v209 - 64) < 0xFFFFFF80)
                                    {
                                      v337 = v372;
                                      *v372 = 0;
                                      bzero(v337 + 1, 8 * (((v209 + 64) >> 6) - 2) + 8);
                                      v207 = v339;
                                      v210 = (uint64_t *)v372;
                                    }
                                    else
                                    {
                                      v210 = (uint64_t *)&v372;
                                      v372 = 0;
                                    }
                                    v373 = *((_DWORD *)v207 + 2) - 1;
                                    *v210 = v163;
                                    llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v371, 1, 0);
                                  }
                                  goto LABEL_424;
                                case 1:
                                  if (NullValue == (llvm::Value **)&unk_1C866F1C0)
                                    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v371, (const llvm::detail::DoubleAPFloat *)&NullValue);
                                  else
                                    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v371, (uint64_t **)&NullValue);
                                  sub_1C47B4138((uint64_t)v370, (uint64_t)&v385, 1);
                                  goto LABEL_424;
                                case 2:
                                  if (*(_UNKNOWN **)&v381 == &unk_1C866F1C0)
                                  {
                                    v371 = (uint64_t *)&unk_1C866F1C0;
                                    v372 = v382;
                                    v381 = COERCE_DOUBLE(&unk_1C866F210);
                                    v382 = 0;
                                  }
                                  else
                                  {
                                    v371 = *(uint64_t **)&v381;
                                    v372 = v382;
                                    v373 = v383;
                                    v374 = v374 & 0xF0 | v384 & 0xF;
                                    v381 = COERCE_DOUBLE(&unk_1C866F210);
                                  }
LABEL_424:
                                  v11 = v376;
                                  if (v376 != (llvm::ValueHandleBase *)&unk_1C866F1C0)
                                    goto LABEL_425;
                                  sub_1C4773C74((uint64_t *)&v377);
                                  goto LABEL_426;
                                case 3:
                                  if (v376 == (llvm::ValueHandleBase *)&unk_1C866F1C0)
                                  {
                                    v338 = v377;
                                    v377 = 0;
                                    v371 = (uint64_t *)&unk_1C866F1C0;
                                    v372 = v338;
                                  }
                                  else
                                  {
                                    v371 = (uint64_t *)v376;
                                    v372 = v377;
                                    v373 = v378;
                                    v374 = v374 & 0xF0 | v379 & 0xF;
                                  }
                                  v376 = (llvm::ValueHandleBase *)&unk_1C866F210;
LABEL_425:
                                  if ((*((_DWORD *)v11 + 2) - 64) <= 0xFFFFFF7F && v377)
                                    MEMORY[0x1CAA32F9C](v377, 0x1000C8000313F17);
LABEL_426:
                                  if (*(_UNKNOWN **)&v381 == &unk_1C866F1C0)
                                  {
                                    sub_1C4773C74((uint64_t *)&v382);
                                  }
                                  else if ((*(_DWORD *)(*(_QWORD *)&v381 + 8) - 64) <= 0xFFFFFF7F
                                         && v382)
                                  {
                                    MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
                                  }
                                  if (NullValue == (llvm::Value **)&unk_1C866F1C0)
                                  {
                                    sub_1C4773C74((uint64_t *)&v387);
                                  }
                                  else if ((*((_DWORD *)NullValue + 2) - 64) <= 0xFFFFFF7F && v387)
                                  {
                                    MEMORY[0x1CAA32F9C](v387, 0x1000C8000313F17);
                                  }
                                  v211 = *(llvm::ConstantFP **)a4;
                                  v188 = v370;
                                  v20 = llvm::ConstantFP::get(v211, (llvm::LLVMContext *)v370, v185);
                                  if (v371 == (uint64_t *)&unk_1C866F1C0)
                                    goto LABEL_838;
                                  if ((*((_DWORD *)v371 + 2) - 64) > 0xFFFFFF7F)
                                    return (llvm::ValueHandleBase *)v20;
                                  v172 = (uint64_t *)v372;
                                  if (!v372)
                                    return (llvm::ValueHandleBase *)v20;
                                  goto LABEL_834;
                                default:
                                  if (((_DWORD)v13 - 142) < 2)
                                    goto LABEL_266;
                                  if ((_DWORD)v13 != 2922)
                                    goto LABEL_51;
                                  if (*((_UNKNOWN **)v40 + 4) == &unk_1C866F1C0)
                                    v167 = *((_QWORD *)v40 + 5);
                                  if ((*(_BYTE *)(v167 + 28) & 7) == 3)
                                    goto LABEL_322;
                                  v168 = v163;
                                  if (*(_UNKNOWN **)(v42 + 32) == &unk_1C866F1C0)
                                    v168 = *(_QWORD *)(v42 + 40);
                                  if ((*(_BYTE *)(v168 + 28) & 7) == 3)
                                  {
LABEL_322:
                                    v169 = *(llvm::ConstantFP **)a4;
                                    v146 = &v380;
                                    LODWORD(v376) = 32;
                                    *(double *)v375 = 0.0;
                                    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v385, (const llvm::APInt **)v375);
                                    v381 = v385;
                                    v382 = NullValue;
                                    v383 = (int)v387;
                                    v384 = BYTE4(v387) & 0xF;
                                    if (*(_UNKNOWN **)&v385 == &unk_1C866F1C0)
                                      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, (const llvm::detail::DoubleAPFloat *)&v381);
                                    else
                                      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)&v381);
                                    sub_1C47B4138((uint64_t)&v385, (uint64_t)v165, 1);
                                    v20 = llvm::ConstantFP::get(v169, (llvm::LLVMContext *)&v385, v170);
                                    if (NullValue == (llvm::Value **)&unk_1C866F1C0)
                                    {
                                      sub_1C4773C74((uint64_t *)&v387);
                                    }
                                    else if ((*((_DWORD *)NullValue + 2) - 64) <= 0xFFFFFF7F && v387)
                                    {
                                      MEMORY[0x1CAA32F9C](v387, 0x1000C8000313F17);
                                    }
                                    v171 = *(uint64_t **)&v381;
                                    if (*(_UNKNOWN **)&v381 != &unk_1C866F1C0)
                                    {
LABEL_327:
                                      if ((*((_DWORD *)v171 + 2) - 64) > 0xFFFFFF7F)
                                        return (llvm::ValueHandleBase *)v20;
                                      v172 = (uint64_t *)v382;
                                      if (!v382)
                                        return (llvm::ValueHandleBase *)v20;
                                      goto LABEL_834;
                                    }
                                  }
                                  else
                                  {
LABEL_266:
                                    v145 = (llvm::Constant *)((char *)v40 + 32);
                                    if (*((_UNKNOWN **)v40 + 4) == &unk_1C866F1C0)
                                      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&NullValue, v145);
                                    else
                                      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&NullValue, (uint64_t **)v145);
                                    v146 = (uint64_t *)&v385;
                                    sub_1C480BA3C((uint64_t)&v385, v163, (uint64_t)v165, 1);
                                    v20 = llvm::ConstantFP::get(*(llvm::ConstantFP **)a4, (llvm::LLVMContext *)&v385, v147);
                                    v143 = NullValue;
                                    if (NullValue != (llvm::Value **)&unk_1C866F1C0)
                                      goto LABEL_476;
                                  }
                                  v215 = v146 + 2;
                                  goto LABEL_873;
                              }
                            }
                          }
                          else if ((v349 & 8) != 0)
                          {
                            v349 ^= 8u;
                          }
                          v180 = v347;
                          v356 = v348;
                          v357 = v357 & 0xF0 | v349 & 0xF;
                          goto LABEL_342;
                        }
                      }
                      else if ((v365 & 8) != 0)
                      {
                        v365 ^= 8u;
                      }
                      v176 = (llvm::Value **)v363;
                      v373 = v364;
                      v374 = v374 & 0xF0 | v365 & 0xF;
                      goto LABEL_336;
                    }
                  }
                  else if ((v353 & 8) != 0)
                  {
                    v353 ^= 8u;
                  }
                  v137 = v351;
                  v356 = v352;
                  v357 = v357 & 0xF0 | v353 & 0xF;
                  goto LABEL_240;
                }
              }
              else if ((v361 & 8) != 0)
              {
                v361 ^= 8u;
              }
              v133 = v359;
              v364 = v360;
              v365 = v365 & 0xF0 | v361 & 0xF;
              goto LABEL_231;
            }
          }
          else if ((v369 & 8) != 0)
          {
            v369 ^= 8u;
          }
          v129 = (llvm::Value **)v367;
          v373 = v368;
          v374 = v374 & 0xF0 | v369 & 0xF;
          goto LABEL_225;
        }
      }
    }
  }
LABEL_51:
  if ((v13 & 0xFFFFFFFE) == 0x114)
  {
    v44 = *(unsigned __int8 *)(*(_QWORD *)v11 + 16);
    if (v44 == 12)
      return (llvm::ValueHandleBase *)llvm::PoisonValue::get((llvm::PoisonValue *)a4, a2);
    v45 = *((_QWORD *)v11 + 1);
    v46 = *(unsigned __int8 *)(v45 + 16);
    if (v46 == 12)
      return (llvm::ValueHandleBase *)llvm::PoisonValue::get((llvm::PoisonValue *)a4, a2);
    if (v44 == 16)
      v117 = (llvm::Type *)(*(_QWORD *)v11 + 24);
    else
      v117 = 0;
    if (v44 != 16 && v44 != 11)
      return 0;
    v119 = v45 + 24;
    v120 = v46 == 16 ? (llvm::APInt *)v119 : 0;
    if (v46 != 16 && v46 != 11)
      return 0;
    if (v44 != 16 || v46 != 16)
      return (llvm::ValueHandleBase *)llvm::Constant::getNullValue((llvm::Constant *)a4, v117);
    v151 = *((_QWORD *)v11 + 2);
    v152 = (_QWORD *)(v151 + 24);
    if (*(_DWORD *)(v151 + 32) >= 0x41u)
      v152 = (_QWORD *)*v152;
    v153 = (_QWORD *)*v152;
    v154 = *((_DWORD *)v117 + 2);
    v155 = 2 * v154;
    v156 = v154 - 1;
    if ((int)v154 >= 1)
      llvm::APInt::sext(v117, 2 * v154, (llvm::APInt *)v375);
    else
      sub_1C5DD14E0((uint64_t)v375, (uint64_t)v117);
    if (*((_DWORD *)v120 + 2) < v155)
      llvm::APInt::sext(v120, 2 * v154, (llvm::APInt *)v370);
    else
      sub_1C5DD14E0((uint64_t)v370, (uint64_t)v120);
    llvm::APInt::operator*((uint64_t)v375, v370, (uint64_t)&v380);
    v229 = LODWORD(v381);
    LODWORD(NullValue) = LODWORD(v381);
    if (LODWORD(v381) > 0x40)
    {
      *(double *)&v231 = COERCE_DOUBLE(operator new[]());
      v385 = *(double *)&v231;
      v230 = v380;
      v232 = NullValue;
      memcpy((void *)v231, (const void *)v380, (((unint64_t)NullValue + 63) >> 3) & 0x3FFFFFF8);
      if (v232 > 0x40)
      {
        llvm::APInt::ashrSlowCase((unsigned int *)&v385, v153);
        if (!v230)
          goto LABEL_493;
        goto LABEL_492;
      }
    }
    else
    {
      v230 = v380;
      v231 = v380;
      v232 = LODWORD(v381);
    }
    v233 = (char)v153;
    if (v232 == (_DWORD)v153)
      v233 = 63;
    v234 = v231 << -(char)v232 >> -(char)v232 >> v233;
    if (v232)
      v235 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v232;
    else
      v235 = 0;
    *(_QWORD *)&v385 = v235 & v234;
    if (v229 < 0x41 || !v230)
    {
LABEL_493:
      if (v371 >= 0x41 && *(_QWORD *)v370)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v370, 0x1000C8000313F17);
      if (v376 >= 0x41 && *(double *)v375 != 0.0)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v375, 0x1000C8000313F17);
      if ((_DWORD)v13 != 277)
        goto LABEL_708;
      LODWORD(v376) = v154;
      if (v154 > 0x40)
      {
        v237 = v375;
        llvm::APInt::initSlowCase((llvm::APInt *)v375, -1, 1);
        if (v376 >= 0x41)
          v237 = (BOOL *)(*(_QWORD *)v375 + 8 * (v156 >> 6));
      }
      else
      {
        if (v154)
          v236 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v154;
        else
          v236 = 0;
        *(double *)v375 = *(double *)&v236;
        v237 = v375;
      }
      *(_QWORD *)v237 &= ~(1 << v156);
      if (v376 < v155)
      {
        llvm::APInt::sext((llvm::APInt *)v375, 2 * v154, (llvm::APInt *)&v380);
      }
      else
      {
        LODWORD(v381) = (_DWORD)v376;
        if (v376 > 0x40)
        {
          *(double *)&v380 = COERCE_DOUBLE(operator new[]());
          memcpy((void *)v380, *(const void **)v375, (((unint64_t)LODWORD(v381) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v380 = *(uint64_t *)v375;
        }
      }
      if (v376 >= 0x41 && *(double *)v375 != 0.0)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v375, 0x1000C8000313F17);
      LODWORD(v371) = v154;
      if (v154 > 0x40)
      {
        v245 = v370;
        llvm::APInt::initSlowCase((llvm::APInt *)v370, 0, 0);
        if (v371 >= 0x41)
          v245 = (BOOL *)(*(_QWORD *)v370 + 8 * (v156 >> 6));
      }
      else
      {
        *(_QWORD *)v370 = 0;
        v245 = v370;
      }
      *(_QWORD *)v245 |= 1 << v156;
      if (v371 < v155)
      {
        llvm::APInt::sext((llvm::APInt *)v370, 2 * v154, (llvm::APInt *)v375);
      }
      else
      {
        LODWORD(v376) = (_DWORD)v371;
        if (v371 > 0x40)
        {
          *(double *)v375 = COERCE_DOUBLE(operator new[]());
          memcpy(*(void **)v375, *(const void **)v370, (((unint64_t)v376 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(double *)v375 = *(double *)v370;
        }
      }
      if (v371 >= 0x41 && *(_QWORD *)v370)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v370, 0x1000C8000313F17);
      v246 = NullValue;
      if (NullValue > 0x40)
      {
        v286 = *(_QWORD *)(*(_QWORD *)&v385 + 8 * (((_DWORD)NullValue - 1) >> 6)) & (1 << (NullValue - 1));
        v249 = LODWORD(v381);
        v287 = (uint64_t *)(v380 + 8 * ((LODWORD(v381) - 1) >> 6));
        if (LODWORD(v381) < 0x41)
          v287 = &v380;
        if ((v286 != 0) == (((unint64_t)*v287 >> (LOBYTE(v381) - 1)) & 1))
        {
          v294 = (((unint64_t)NullValue + 63) >> 3) & 0x3FFFFFF8;
          while (v294)
          {
            v295 = *(_QWORD *)(*(_QWORD *)&v385 - 8 + v294);
            v296 = *(_QWORD *)(v380 - 8 + v294);
            v294 -= 8;
            if (v295 != v296)
            {
              if (v295 <= v296)
                goto LABEL_734;
              break;
            }
          }
        }
        else if (v286)
        {
          goto LABEL_694;
        }
      }
      else
      {
        v247 = (uint64_t)(*(_QWORD *)&v385 << -(char)NullValue) >> -(char)NullValue;
        v248 = v380 << -(char)NullValue >> -(char)NullValue;
        v249 = LODWORD(v381);
        if (v247 >= v248)
          v250 = LODWORD(v381);
        else
          v250 = NullValue;
        if (v250 < 0x41)
        {
          if (v247 >= v248)
            v251 = v380;
          else
            *(double *)&v251 = v385;
          v385 = *(double *)&v251;
          LODWORD(NullValue) = v250;
          v252 = v251 << -(char)v250 >> -(char)v250 > (uint64_t)(*(_QWORD *)v375 << -(char)v250) >> -(char)v250;
          v246 = v250;
LABEL_569:
          if (v252)
            v254 = (BOOL *)&v385;
          else
            v254 = v375;
          v255 = v376;
          if (!v252)
            v246 = v376;
          if (v246 <= 0x40)
          {
            v385 = *(double *)v254;
            LODWORD(NullValue) = v246;
LABEL_702:
            if (v255 >= 0x41 && *(double *)v375 != 0.0)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v375, 0x1000C8000313F17);
            if (LODWORD(v381) >= 0x41 && *(double *)&v380 != 0.0)
              MEMORY[0x1CAA32F9C](v380, 0x1000C8000313F17);
LABEL_708:
            v290 = *(llvm::ConstantInt **)a4;
            if (NullValue < v154)
            {
              llvm::APInt::sext((llvm::APInt *)&v385, v154, (llvm::APInt *)&v380);
            }
            else if (NullValue > v154)
            {
              llvm::APInt::trunc((llvm::APInt *)&v385, v154, (llvm::APInt *)&v380);
            }
            else
            {
              LODWORD(v381) = (_DWORD)NullValue;
              if (NullValue > 0x40)
              {
                *(double *)&v380 = COERCE_DOUBLE(operator new[]());
                memcpy((void *)v380, *(const void **)&v385, (((unint64_t)LODWORD(v381) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                *(double *)&v380 = v385;
              }
            }
            v20 = llvm::ConstantInt::get(v290, (llvm::LLVMContext *)&v380, v228);
            if (LODWORD(v381) >= 0x41 && *(double *)&v380 != 0.0)
              MEMORY[0x1CAA32F9C](v380, 0x1000C8000313F17);
LABEL_832:
            if (NullValue < 0x41)
              return (llvm::ValueHandleBase *)v20;
            v172 = *(uint64_t **)&v385;
            if (v385 == 0.0)
              return (llvm::ValueHandleBase *)v20;
            goto LABEL_834;
          }
LABEL_700:
          if (&v385 != (long double *)v254)
          {
LABEL_743:
            llvm::APInt::reallocate((uint64_t)&v385, *((_DWORD *)v254 + 2));
            if (NullValue <= 0x40)
              v385 = *(double *)v254;
            else
              memcpy(*(void **)&v385, *(const void **)v254, (((unint64_t)NullValue + 63) >> 3) & 0x3FFFFFF8);
          }
          v255 = v376;
          goto LABEL_702;
        }
        if (v247 < v248)
          goto LABEL_567;
      }
      llvm::APInt::reallocate((uint64_t)&v385, v249);
      v246 = NullValue;
      if (NullValue <= 0x40)
      {
        v253 = v380;
        v385 = *(double *)&v380;
        goto LABEL_568;
      }
      memcpy(*(void **)&v385, (const void *)v380, (((unint64_t)NullValue + 63) >> 3) & 0x3FFFFFF8);
      v246 = NullValue;
LABEL_734:
      if (v246 <= 0x40)
      {
LABEL_567:
        v253 = *(_QWORD *)&v385;
LABEL_568:
        v252 = v253 << -(char)v246 >> -(char)v246 > (uint64_t)(*(_QWORD *)v375 << -(char)v246) >> -(char)v246;
        goto LABEL_569;
      }
LABEL_694:
      v288 = *(_QWORD *)(*(_QWORD *)&v385 + 8 * ((v246 - 1) >> 6)) & (1 << (v246 - 1));
      v289 = (BOOL *)(*(_QWORD *)v375 + 8 * (((_DWORD)v376 - 1) >> 6));
      if (v376 < 0x41)
        v289 = v375;
      if ((v288 != 0) == ((*(_QWORD *)v289 >> (v376 - 1)) & 1))
      {
        v297 = (((unint64_t)v246 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v297)
          {
            v254 = v375;
            goto LABEL_743;
          }
          v298 = *(_QWORD *)(*(_QWORD *)&v385 - 8 + v297);
          v299 = *(_QWORD *)(*(_QWORD *)v375 - 8 + v297);
          v297 -= 8;
        }
        while (v298 == v299);
        if (v298 <= v299)
          v254 = v375;
        else
          v254 = (BOOL *)&v385;
      }
      else if (v288)
      {
        v254 = v375;
      }
      else
      {
        v254 = (BOOL *)&v385;
      }
      goto LABEL_700;
    }
LABEL_492:
    MEMORY[0x1CAA32F9C](v230, 0x1000C8000313F17);
    goto LABEL_493;
  }
  if ((v13 & 0xFFFFFFFE) != 0x94)
  {
    if ((_DWORD)v13 != 3475)
      return 0;
    v92 = *(unsigned __int8 *)(*(_QWORD *)v11 + 16);
    v93 = *(_QWORD *)v11 + 24;
    if (*(_QWORD *)v11 == 0 || v92 != 16)
    {
      v93 = 0;
      v20 = 0;
      if ((v92 - 11) > 1)
        return (llvm::ValueHandleBase *)v20;
    }
    v94 = *((_QWORD *)v11 + 1);
    v95 = *(unsigned __int8 *)(v94 + 16);
    v96 = v94 != 0;
    v97 = v94 + 24;
    if (!v96 || v95 != 16)
    {
      v97 = 0;
      v20 = 0;
      if ((v95 - 11) > 1)
        return (llvm::ValueHandleBase *)v20;
    }
    v98 = *((_QWORD *)v11 + 2);
    v99 = *(unsigned __int8 *)(v98 + 16);
    v100 = (_QWORD *)(v98 + 24);
    if (v98 == 0 || v99 != 16)
    {
      v100 = 0;
      v20 = 0;
      if ((v99 - 11) > 1)
        return (llvm::ValueHandleBase *)v20;
    }
    if (v98 != 0 && v99 == 16)
    {
      v101 = 0;
      *(double *)&v102 = 0.0;
      v103 = 0;
      LODWORD(NullValue) = 32;
      v104 = *(_DWORD *)(v98 + 32);
      do
      {
        v105 = v100;
        if (v104 >= 0x41)
          v105 = (_QWORD *)(*v100 + 8 * (v101 >> 6));
        v106 = *v105 >> v101;
        if (v106 <= 0xCu)
        {
          if (v106 == 12)
          {
            v107 = 0;
          }
          else
          {
            if ((v106 & 0xC) == 4 || (~(_DWORD)v106 & 0xA) == 0)
              v107 = v93;
            else
              v107 = v97;
            if (v107)
            {
              v109 = *(_DWORD *)(v107 + 8);
              if (v106 > 7u)
              {
                if (v109 >= 0x41)
                  v107 = *(_QWORD *)v107;
                v110 = *(_QWORD *)v107;
                if ((v106 & 1) != 0)
                  v111 = 0x80000000;
                else
                  v111 = 0x8000;
                if ((v110 & v111) != 0)
                  v107 = 255;
                else
                  v107 = 0;
              }
              else
              {
                if (v109 >= 0x41)
                  v107 = *(_QWORD *)v107;
                v107 = (*(_QWORD *)v107 >> (8 * (v106 & 3u)));
              }
            }
            else
            {
              ++v103;
            }
          }
        }
        else
        {
          v107 = 255;
        }
        v62 = (const llvm::APInt *)(255 << v101);
        v102 = v102 & ~(255 << v101) | (v107 << v101);
        v385 = *(double *)&v102;
        a2 = (llvm::Type *)(v101 + 8);
        v21 = v101 >= 0x18;
        v101 += 8;
      }
      while (!v21);
      if (v103 != 4)
        goto LABEL_831;
      return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
    }
    return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
  }
  v47 = *(_QWORD *)v11;
  v48 = *(unsigned __int8 *)(*(_QWORD *)v11 + 16);
  if (*(_QWORD *)v11)
    v49 = v48 == 16;
  else
    v49 = 0;
  v50 = v49;
  if (!v49 && (v48 - 11) > 1)
    return 0;
  v51 = *((_QWORD *)v11 + 1);
  v52 = *(unsigned __int8 *)(v51 + 16);
  v53 = v51 != 0 && v52 == 16;
  v54 = (const void **)(v51 + 24);
  if (v51 != 0 && v52 == 16)
    v55 = v51 + 24;
  else
    v55 = 0;
  if (v51 == 0 || v52 != 16)
  {
    v20 = 0;
    if ((v52 - 11) > 1)
      return (llvm::ValueHandleBase *)v20;
  }
  v56 = *((_QWORD *)v11 + 2);
  v57 = *(unsigned __int8 *)(v56 + 16);
  v58 = v56 && v57 == 16;
  v59 = v58;
  if (!v58 && (v57 - 11) > 1)
    return 0;
  if (!v59)
    return (llvm::ValueHandleBase *)*((_QWORD *)v11 + ((_DWORD)v13 == 149));
  if (((v50 | v53) & 1) == 0)
    return llvm::UndefValue::get((llvm::UndefValue *)a4, a2);
  v60 = *(_DWORD *)(v56 + 32);
  v61 = llvm::APInt::urem((uint64_t **)(v56 + 24), v60);
  if (v61)
  {
    v63 = v60 - v61;
    if ((_DWORD)v13 == 149)
      v64 = v61;
    else
      v64 = v60 - v61;
    if ((_DWORD)v13 == 149)
      v65 = v63;
    else
      v65 = v61;
    if ((v50 & 1) == 0)
    {
      v262 = *(unsigned int *)(v55 + 8);
      LODWORD(NullValue) = v262;
      if (v262 > 0x40)
      {
        v312 = v262 + 63;
        v313 = ((unint64_t)(v262 + 63) >> 3) & 0x3FFFFFF8;
        *(double *)&v314 = COERCE_DOUBLE(operator new[]());
        v385 = *(double *)&v314;
        memcpy(v314, *(const void **)v55, v313);
        llvm::APInt::tcShiftRight(v314, (unint64_t *)(v312 >> 6), v64);
      }
      else if ((_DWORD)v262 == v64)
      {
        v385 = 0.0;
      }
      else
      {
        *(_QWORD *)&v385 = *(_QWORD *)v55 >> v64;
      }
      goto LABEL_831;
    }
    if (!v53)
    {
      v265 = *(unsigned int *)(v47 + 32);
      LODWORD(NullValue) = v265;
      if (v265 > 0x40)
      {
        v285 = ((unint64_t)(v265 + 63) >> 3) & 0x3FFFFFF8;
        v266 = COERCE_DOUBLE(operator new[]());
        memcpy(*(void **)&v266, *(const void **)(v47 + 24), v285);
      }
      else
      {
        v266 = *(double *)(v47 + 24);
      }
      v385 = v266;
      sub_1C4888094((uint64_t)&v385, v65);
      goto LABEL_831;
    }
    v66 = *(unsigned int *)(v47 + 32);
    LODWORD(v381) = v66;
    if (v66 > 0x40)
    {
      v280 = ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8;
      v67 = COERCE_DOUBLE(operator new[]());
      memcpy(*(void **)&v67, *(const void **)(v47 + 24), v280);
    }
    else
    {
      v67 = *(double *)(v47 + 24);
    }
    *(double *)&v380 = v67;
    sub_1C4888094((uint64_t)&v380, v65);
    v282 = *(unsigned int *)(v51 + 32);
    if (v282 > 0x40)
    {
      v284 = COERCE_DOUBLE(operator new[]());
      memcpy(*(void **)&v284, *v54, ((unint64_t)(v282 + 63) >> 3) & 0x3FFFFFF8);
      v315 = (unint64_t *)((unint64_t)(v282 + 63) >> 6);
      llvm::APInt::tcShiftRight(*(llvm::APInt **)&v284, v315, v64);
      v316 = (uint64_t *)v380;
      v317 = v284;
      do
      {
        v318 = *v316++;
        **(_QWORD **)&v317 |= v318;
        *(_QWORD *)&v317 += 8;
        v315 = (unint64_t *)((char *)v315 - 1);
      }
      while (v315);
    }
    else
    {
      if ((_DWORD)v282 == v64)
      {
        v283 = 0;
        LODWORD(v282) = v64;
      }
      else
      {
        v283 = (unint64_t)*v54 >> v64;
      }
      *(_QWORD *)&v284 = v380 | v283;
    }
    LODWORD(NullValue) = v282;
    v385 = v284;
    v20 = llvm::ConstantInt::get((llvm::ConstantInt **)a4, (llvm::Type *)&v385, v281);
    if (NullValue >= 0x41 && v385 != 0.0)
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v385, 0x1000C8000313F17);
    goto LABEL_645;
  }
  return (llvm::ValueHandleBase *)*((_QWORD *)v11 + ((_DWORD)v13 == 149));
}

uint64_t llvm::isMathLibCallNoop(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  int hasFnAttrOnCalledFunction;
  int v6;
  uint64_t ***v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t ***v20;
  char *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  BOOL v39;
  llvm::APFloat *v40;
  llvm::APFloat *v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  llvm::APFloatBase *v45;
  BOOL v46;
  llvm::APFloat *v47;
  char v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  uint64_t *v52;
  int v53;
  llvm::detail::DoubleAPFloat *v54;
  void *v55;
  int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  double v62;
  double v63;
  void **v64;
  void *v65;
  int v66;
  int v67;
  int v68;
  void *v69;
  int v70;
  uint64_t v71;
  int v72;
  void *v73;
  int v74;
  void *v75;
  int v76;
  uint64_t v77;
  void *v78;
  int v79;
  void *v80;
  int v81;
  int v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  const llvm::APInt *v92;
  int v93;
  _DWORD *v94;
  const llvm::APInt *v95;
  uint64_t v96;
  int v97;
  char v98;
  char v99[8];
  _DWORD *v100;
  const llvm::APInt *v101;
  int v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)(a1 + 64);
  if (!v4 || (v4[14] & 0x10) == 0)
  {
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 20);
    v4 = *(_BYTE **)(a1 + 64);
    if (!hasFnAttrOnCalledFunction)
      goto LABEL_8;
    if (!v4)
      goto LABEL_6;
  }
  if ((v4[12] & 0x10) == 0)
  {
LABEL_6:
    if (!llvm::CallBase::hasFnAttrOnCalledFunction(a1, 4))
      return 0;
    v4 = *(_BYTE **)(a1 + 64);
LABEL_8:
    if (!v4)
      goto LABEL_10;
  }
  if ((v4[19] & 0x20) != 0)
    return 0;
LABEL_10:
  v6 = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 61);
  if ((v6 & 1) != 0)
    return 0;
  v7 = *(uint64_t ****)(a1 - 32);
  if (!v7)
    return 0;
  if (*((_BYTE *)v7 + 16))
    return 0;
  v8 = (uint64_t)v7[3];
  if (v8 != *(_QWORD *)(a1 + 72))
    return 0;
  v87 = 0;
  if (!a2 || (*((_BYTE *)v7 + 33) & 0x20) != 0)
    return 0;
  v11 = *a2;
  if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
  {
    v22 = 0;
    v21 = &byte_1C871356D;
    goto LABEL_27;
  }
  v12 = ***v7;
  v13 = *(_QWORD *)(v12 + 152);
  v14 = *(unsigned int *)(v12 + 168);
  if (!(_DWORD)v14)
    goto LABEL_25;
  LODWORD(v15) = (v14 - 1) & ((v7 >> 4) ^ (v7 >> 9));
  v16 = (uint64_t ****)(v13 + 16 * v15);
  v17 = *v16;
  if (*v16 != v7)
  {
    v18 = 1;
    while (v17 != (uint64_t ***)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(uint64_t ****)(v13 + 16 * v15);
      if (v17 == v7)
      {
        v16 = (uint64_t ****)(v13 + 16 * v15);
        goto LABEL_26;
      }
    }
LABEL_25:
    v16 = (uint64_t ****)(v13 + 16 * v14);
  }
LABEL_26:
  v20 = v16[1];
  v23 = (size_t)*v20;
  v21 = (char *)(v20 + 2);
  v22 = v23;
LABEL_27:
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(v6, v21, v22, &v87))
    return 0;
  v24 = v11;
  v25 = v87;
  if (!llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v24, v8, v87))
    return 0;
  v26 = *(unsigned __int8 *)(a1 + 16);
  if (v26 == 84)
  {
    v27 = 0;
  }
  else if (v26 == 39)
  {
    v27 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v27 = 2;
  }
  v28 = *(_DWORD *)(a1 + 20);
  if (v28 < 0 && (v84 = a1 - 32 * (v28 & 0x7FFFFFF), v85 = *(_QWORD *)(v84 - 8), (v85 & 0xFFFFFFFF0) != 0))
  {
    v30 = -(uint64_t)(v28 & 0x7FFFFFF);
    v29 = *(_DWORD *)(v84 - 12) - *(_DWORD *)(v84 - v85);
  }
  else
  {
    v29 = 0;
    v30 = -(uint64_t)(v28 & 0x7FFFFFF);
  }
  v31 = a1 - 32 * v27 + 32 * -v29;
  v32 = (uint64_t **)(a1 + 32 * v30);
  if (((v31 - (_QWORD)v32 - 32) & 0x1FFFFFFFE0) != 0x20)
    goto LABEL_38;
  v33 = *v32;
  if (!*v32 || *((_BYTE *)*v32 + 16) != 17)
    goto LABEL_38;
  v47 = (llvm::APFloat *)(v33 + 3);
  if (v25 <= 299)
  {
    switch(v25)
    {
      case 188:
      case 189:
      case 193:
        goto LABEL_125;
      case 190:
      case 191:
      case 192:
        goto LABEL_132;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 204:
      case 205:
      case 206:
        goto LABEL_38;
      case 203:
      case 210:
      case 211:
        v53 = *(unsigned __int8 *)(*v33 + 8);
        if (v53 != 2)
        {
          if (v53 != 3)
            goto LABEL_38;
          LODWORD(v89) = 64;
          v88 = 0xC087480000000000;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v94, (const llvm::APInt **)&v88);
          v100 = v94;
          v101 = v95;
          v102 = v96;
          v103 = BYTE4(v96) & 0xF;
          v55 = (void *)v33[4];
          v54 = (llvm::detail::DoubleAPFloat *)(v33 + 4);
          if (v55 == &unk_1C866F1C0)
          {
            if (!llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v100))
              goto LABEL_173;
          }
          else
          {
            llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v100);
            if (!v56)
              goto LABEL_173;
          }
          v93 = 64;
          v57 = 0x280000000000;
          goto LABEL_137;
        }
        LODWORD(v89) = 32;
        v88 = 3268280320;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v94, (const llvm::APInt **)&v88);
        v100 = v94;
        v101 = v95;
        v102 = v96;
        v103 = BYTE4(v96) & 0xF;
        v78 = (void *)v33[4];
        v54 = (llvm::detail::DoubleAPFloat *)(v33 + 4);
        if (v78 == &unk_1C866F1C0)
        {
          if (!llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v100))
            goto LABEL_173;
        }
        else
        {
          llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v100);
          if (!v79)
            goto LABEL_173;
        }
        v93 = 32;
        v77 = 1118830592;
        goto LABEL_148;
      case 207:
      case 208:
      case 209:
        v68 = *(unsigned __int8 *)(*v33 + 8);
        if (v68 != 2)
        {
          if (v68 != 3)
            goto LABEL_38;
          LODWORD(v89) = 64;
          v88 = 0xC090C80000000000;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v94, (const llvm::APInt **)&v88);
          v100 = v94;
          v101 = v95;
          v102 = v96;
          v103 = BYTE4(v96) & 0xF;
          v69 = (void *)v33[4];
          v54 = (llvm::detail::DoubleAPFloat *)(v33 + 4);
          if (v69 == &unk_1C866F1C0)
          {
            if (!llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v100))
              goto LABEL_173;
          }
          else
          {
            llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v100);
            if (!v70)
              goto LABEL_173;
          }
          v93 = 64;
          v71 = 0x408FF80000000000;
          goto LABEL_138;
        }
        LODWORD(v89) = 32;
        v88 = 3272933376;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v94, (const llvm::APInt **)&v88);
        v100 = v94;
        v101 = v95;
        v102 = v96;
        v103 = BYTE4(v96) & 0xF;
        v80 = (void *)v33[4];
        v54 = (llvm::detail::DoubleAPFloat *)(v33 + 4);
        if (v80 == &unk_1C866F1C0)
        {
          if (!llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v100))
            goto LABEL_173;
        }
        else
        {
          llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v100);
          if (!v81)
            goto LABEL_173;
        }
        v93 = 32;
        v77 = 1123942400;
        goto LABEL_148;
      default:
        if ((v25 - 142) > 0xC || ((1 << (v25 + 114)) & 0x11A3) == 0)
          goto LABEL_38;
        v65 = (void *)v33[4];
        v64 = (void **)(v33 + 4);
        llvm::APFloat::APFloat((uint64_t)v99, v65, "-1", 2uLL);
        if (*v64 == &unk_1C866F1C0)
        {
          if (llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v64, (const llvm::detail::DoubleAPFloat *)&v100))
          {
LABEL_101:
            llvm::APFloat::APFloat((uint64_t)&v94, *v64, "1", 1uLL);
            if (*v64 == &unk_1C866F1C0)
              v67 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v64, (const llvm::detail::DoubleAPFloat *)&v95);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v64, (const llvm::detail::IEEEFloat *)&v95);
            v9 = v67 != 2;
            if (v95 == (const llvm::APInt *)&unk_1C866F1C0)
            {
              sub_1C4773C74(&v96);
            }
            else if ((*((_DWORD *)v95 + 2) - 64) <= 0xFFFFFF7F && v96)
            {
              MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
            }
LABEL_160:
            v83 = v100;
            if (v100 != (_DWORD *)&unk_1C866F1C0)
              goto LABEL_175;
            goto LABEL_188;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v64, (const llvm::detail::IEEEFloat *)&v100);
          if (v66)
            goto LABEL_101;
        }
        v9 = 0;
        goto LABEL_160;
    }
  }
  if (v25 <= 385)
  {
    if ((v25 - 300) <= 0xE && ((1 << (v25 - 44)) & 0x638F) != 0)
    {
      if ((_UNKNOWN *)v33[4] == &unk_1C866F1C0)
        v48 = *(_BYTE *)(v33[5] + 28);
      else
        v48 = *((_BYTE *)v33 + 52);
      if ((v48 & 7) == 1)
        return 1;
      if ((v48 & 7) != 3)
        return (v48 & 8) == 0;
      return 0;
    }
    if ((v25 - 384) >= 2)
      goto LABEL_38;
LABEL_125:
    if ((_UNKNOWN *)v33[4] == &unk_1C866F1C0)
      v47 = (llvm::APFloat *)v33[5];
    v46 = (*((_BYTE *)v47 + 28) & 7) == 0;
    return !v46;
  }
  v58 = v25 + 123;
  if ((v25 - 389) > 0x33)
  {
LABEL_131:
    if ((v25 - 386) >= 3)
      goto LABEL_38;
LABEL_132:
    v72 = *(unsigned __int8 *)(*v33 + 8);
    if (v72 != 2)
    {
      if (v72 != 3)
        goto LABEL_38;
      LODWORD(v89) = 64;
      v88 = 0xC086300000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v94, (const llvm::APInt **)&v88);
      v100 = v94;
      v101 = v95;
      v102 = v96;
      v103 = BYTE4(v96) & 0xF;
      v73 = (void *)v33[4];
      v54 = (llvm::detail::DoubleAPFloat *)(v33 + 4);
      if (v73 == &unk_1C866F1C0)
      {
        if (llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v100))
          goto LABEL_136;
      }
      else
      {
        llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v100);
        if (v74)
        {
LABEL_136:
          v93 = 64;
          v57 = 0x300000000000;
LABEL_137:
          v71 = v57 & 0xFFFFFFFFFFFFLL | 0x4086000000000000;
LABEL_138:
          v92 = (const llvm::APInt *)v71;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v88, &v92);
          goto LABEL_149;
        }
      }
LABEL_173:
      v9 = 0;
      goto LABEL_174;
    }
    LODWORD(v89) = 32;
    v88 = 3266445312;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v94, (const llvm::APInt **)&v88);
    v100 = v94;
    v101 = v95;
    v102 = v96;
    v103 = BYTE4(v96) & 0xF;
    v75 = (void *)v33[4];
    v54 = (llvm::detail::DoubleAPFloat *)(v33 + 4);
    if (v75 == &unk_1C866F1C0)
    {
      if (!llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v100))
        goto LABEL_173;
    }
    else
    {
      llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v100);
      if (!v76)
        goto LABEL_173;
    }
    v93 = 32;
    v77 = 1118961664;
LABEL_148:
    v92 = (const llvm::APInt *)v77;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v88, &v92);
LABEL_149:
    v95 = (const llvm::APInt *)v88;
    v96 = v89;
    v97 = v90;
    v98 = v91 & 0xF;
    if (*(_UNKNOWN **)v54 == &unk_1C866F1C0)
      v82 = llvm::detail::DoubleAPFloat::compare(v54, (const llvm::detail::DoubleAPFloat *)&v95);
    else
      llvm::detail::IEEEFloat::compare(v54, (const llvm::detail::IEEEFloat *)&v95);
    v9 = v82 != 2;
    if (v95 == (const llvm::APInt *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v96);
    }
    else if ((*((_DWORD *)v95 + 2) - 64) <= 0xFFFFFF7F && v96)
    {
      MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
    }
LABEL_174:
    v83 = v100;
    if (v100 != (_DWORD *)&unk_1C866F1C0)
    {
LABEL_175:
      if ((v83[2] - 64) <= 0xFFFFFF7F && v101)
        MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
      return v9;
    }
LABEL_188:
    sub_1C4773C74((uint64_t *)&v101);
    return v9;
  }
  if (((1 << v58) & 0x70) != 0)
  {
    if ((_UNKNOWN *)v33[4] == &unk_1C866F1C0)
      v48 = *(_BYTE *)(v33[5] + 28);
    else
      v48 = *((_BYTE *)v33 + 52);
    if ((v48 & 5 | 2) == 3)
      return 1;
    return (v48 & 8) == 0;
  }
  if (((1 << v58) & 0x8C00000000000) == 0)
  {
    if (v25 == 389)
      goto LABEL_125;
    goto LABEL_131;
  }
  v59 = *v33;
  v60 = *(unsigned __int8 *)(v59 + 8);
  if (v60 <= 3 && v60 != 1)
  {
    feclearexcept(159);
    *__error() = 0;
    v62 = llvm::APFloat::convertToDouble(v47);
    v63 = tan(v62);
    if ((*__error() - 33) < 2 || fetestexcept(143))
    {
      feclearexcept(159);
      v9 = 0;
      *__error() = 0;
      return v9;
    }
    v45 = sub_1C4DF89DC(v59, v63);
LABEL_61:
    v46 = v45 == 0;
    return !v46;
  }
LABEL_38:
  if (v26 == 84)
  {
    v35 = 0;
  }
  else if (v26 == 39)
  {
    v35 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v35 = 2;
  }
  if (v28 < 0 && (v86 = (uint64_t)*(v32 - 1), (v86 & 0xFFFFFFFF0) != 0))
    v36 = *((_DWORD *)v32 - 3) - *(_DWORD *)((char *)v32 - v86);
  else
    v36 = 0;
  v9 = 0;
  if (((a1 - 32 * v35 + 32 * -v36 - (_QWORD)v32 - 32) & 0x1FFFFFFFE0) == 0x40)
  {
    if (*((_BYTE *)*v32 + 16) == 17)
      v37 = *v32;
    else
      v37 = 0;
    v38 = v32[4];
    if (*((_BYTE *)v38 + 16) != 17)
      v38 = 0;
    if (v37)
      v39 = v38 == 0;
    else
      v39 = 1;
    if (v39)
      return 0;
    v40 = (llvm::APFloat *)(v37 + 3);
    v41 = (llvm::APFloat *)(v38 + 3);
    if ((v25 - 246) >= 3 && (v25 - 364) >= 3)
    {
      if ((v25 - 347) > 2)
        return 0;
      v42 = *v37;
      v43 = *(unsigned __int8 *)(*v37 + 8);
      v44 = v43 > 3 || v43 == 1;
      if (v44 || v42 != *v38)
        return 0;
      v45 = sub_1C4DF521C((double (*)(double, double))MEMORY[0x1E0C84BB8], v40, v41, v42);
      goto LABEL_61;
    }
    v49 = (void *)v37[4];
    v50 = v37 + 3;
    if (v49 == &unk_1C866F1C0)
      v50 = (_QWORD *)v37[5];
    if ((*((_BYTE *)v50 + 28) & 7) != 1)
    {
      v51 = (void *)v38[4];
      v52 = v38 + 3;
      if (v51 == &unk_1C866F1C0)
        v52 = (uint64_t *)v38[5];
      if ((*((_BYTE *)v52 + 28) & 7) != 1)
      {
        if (v49 == &unk_1C866F1C0)
          v40 = (llvm::APFloat *)v37[5];
        if ((*((_BYTE *)v40 + 28) & 7) == 0)
          return 0;
        if (v51 == &unk_1C866F1C0)
          v41 = (llvm::APFloat *)v38[5];
        v46 = (*((_BYTE *)v41 + 28) & 7) == 3;
        return !v46;
      }
    }
    return 1;
  }
  return v9;
}

llvm::APFloatBase *sub_1C4DF5178(double (*a1)(double), llvm::APFloat *a2, uint64_t a3)
{
  double v6;
  double v7;

  feclearexcept(159);
  *__error() = 0;
  v6 = llvm::APFloat::convertToDouble(a2);
  v7 = a1(v6);
  if ((*__error() - 33) >= 2 && !fetestexcept(143))
    return sub_1C4DF89DC(a3, v7);
  feclearexcept(159);
  *__error() = 0;
  return 0;
}

llvm::APFloatBase *sub_1C4DF521C(double (*a1)(double, double), llvm::APFloat *a2, llvm::APFloat *a3, uint64_t a4)
{
  double v8;
  double v9;
  double v10;

  feclearexcept(159);
  *__error() = 0;
  v8 = llvm::APFloat::convertToDouble(a2);
  v9 = llvm::APFloat::convertToDouble(a3);
  v10 = a1(v8, v9);
  if ((*__error() - 33) >= 2 && !fetestexcept(143))
    return sub_1C4DF89DC(a4, v10);
  feclearexcept(159);
  *__error() = 0;
  return 0;
}

llvm::UndefValue *sub_1C4DF52D8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ConstantExpr *v6;
  llvm::Constant *v7;
  BOOL v8;
  llvm::ValueHandleBase *Add;

  if (a2[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::Constant *)a3;
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  Add = llvm::ConstantExpr::getAdd(v6, v7, a4, a5);
  return sub_1C4DF9348(a1, (uint64_t)Add);
}

llvm::UndefValue *sub_1C4DF533C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::ConstantExpr *v4;
  llvm::Constant *v5;
  BOOL v6;
  uint64_t v8;

  if (a2[16] >= 0x15u)
    v4 = 0;
  else
    v4 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a3;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  v8 = llvm::ConstantExpr::getAnd(v4, v5, (llvm::Constant *)a3, a4);
  return sub_1C4DF9348(a1, v8);
}

llvm::UndefValue *sub_1C4DF539C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::ConstantExpr *v5;
  llvm::Constant *v6;
  BOOL v7;
  llvm::ValueHandleBase *v8;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v8 = llvm::ConstantExpr::getOr(v5, v6, (llvm::Constant *)a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)v8);
}

llvm::UndefValue *sub_1C4DF53F8(uint64_t a1, unsigned __int16 a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  llvm::Constant *v5;
  BOOL v6;

  if (a3[16] >= 0x15u)
    v4 = 0;
  else
    v4 = a3;
  if (a4[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a4;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, v4, v5, 0);
}

llvm::UndefValue *sub_1C4DF5434(uint64_t a1, llvm::GetElementPtrInst *a2, uint64_t a3, llvm::Value *a4, uint64_t a5, int a6)
{
  uint64_t v7;
  llvm::Value *v8;
  uint64_t ElementPtr;

  if (a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    if (!a5)
    {
LABEL_7:
      ElementPtr = llvm::ConstantExpr::getGetElementPtr(a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
      return sub_1C4DF9348(a1, ElementPtr);
    }
    v7 = 8 * a5;
    v8 = a4;
    while (*(unsigned __int8 *)(*(_QWORD *)v8 + 16) <= 0x14u)
    {
      v8 = (llvm::Value *)((char *)v8 + 8);
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
  }
  return 0;
}

llvm::UndefValue *sub_1C4DF54CC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  llvm::ConstantExpr *v5;
  llvm::PoisonValue **v6;
  llvm::PoisonValue **v7;
  BOOL v8;
  llvm::Constant *Select;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::ConstantExpr *)a2;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::PoisonValue **)a3;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::PoisonValue **)a4;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8 || v7 == 0)
    return 0;
  Select = llvm::ConstantExpr::getSelect(v5, v6, v7, 0, a5);
  return sub_1C4DF9348(a1, (uint64_t)Select);
}

llvm::UndefValue *sub_1C4DF5540(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ValueHandleBase *Mul;

  Mul = llvm::ConstantExpr::getMul(a2, a3, a4, a5);
  return sub_1C4DF9348(a1, (uint64_t)Mul);
}

llvm::UndefValue *sub_1C4DF5578(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ValueHandleBase *Shl;

  Shl = llvm::ConstantExpr::getShl(a2, a3, a4, a5);
  return sub_1C4DF9348(a1, (uint64_t)Shl);
}

llvm::UndefValue *sub_1C4DF55B0(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t LShr;

  LShr = llvm::ConstantExpr::getLShr(a2, a3, a4, a4);
  return sub_1C4DF9348(a1, LShr);
}

llvm::UndefValue *sub_1C4DF55E4(uint64_t a1, llvm *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v6;
  _QWORD **v8;
  uint64_t v10;
  unsigned __int8 v11[2];
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v6 = a2;
  v18[2] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD **)llvm::ConstantFoldBinaryInstruction(a2, a3, a4, a4);
  if (!v8)
  {
    v8 = *(_QWORD ***)a3;
    if (*(_QWORD *)a3)
    {
      v18[0] = a3;
      v18[1] = a4;
      v10 = **v8 + 1512;
      v11[0] = v6;
      v11[1] = 0;
      v12 = 0;
      v13 = v18;
      v14 = 2;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      v8 = (_QWORD **)sub_1C537D4FC(v10, (uint64_t)v8, v11);
    }
  }
  return sub_1C4DF9348(a1, (uint64_t)v8);
}

llvm::UndefValue *sub_1C4DF56B0(uint64_t a1, llvm::Constant **a2)
{
  uint64_t Not;

  Not = llvm::ConstantExpr::getNot(a2, (llvm::Constant *)a2);
  return sub_1C4DF9348(a1, Not);
}

llvm::UndefValue *sub_1C4DF56DC(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Cast;

  if (*a3 == a4)
    return (llvm::UndefValue *)a3;
  Cast = llvm::ConstantExpr::getCast(a2);
  return sub_1C4DF9348(a1, Cast);
}

llvm::UndefValue *sub_1C4DF5730(uint64_t a1, llvm::ConstantExpr *this, llvm::Type ***a3, llvm::Type *a4)
{
  uint64_t IntegerCast;

  if (*(llvm::Type ****)this == a3)
    return this;
  IntegerCast = llvm::ConstantExpr::getIntegerCast(this, a3, a4);
  return sub_1C4DF9348(a1, IntegerCast);
}

llvm::UndefValue *sub_1C4DF5780(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  llvm *InsertElement;

  InsertElement = llvm::ConstantExpr::getInsertElement(a2, a3, a4, 0, a5);
  return sub_1C4DF9348(a1, (uint64_t)InsertElement);
}

llvm::UndefValue *sub_1C4DF57B8(uint64_t a1, llvm::UndefValue *a2, unsigned int *a3, uint64_t a4)
{
  llvm::UndefValue *Value;

  Value = llvm::ConstantExpr::getExtractValue(a2, a3, a4, 0);
  return sub_1C4DF9348(a1, (uint64_t)Value);
}

uint64_t sub_1C4DF57F0(unsigned __int8 *a1, unint64_t a2, _BYTE *a3, uint64_t a4, llvm::DataLayout *a5)
{
  int v5;
  uint64_t result;
  llvm::UndefValue *v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  uint64_t v18;
  llvm::StructType *v19;
  llvm::Type *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  const char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  llvm::UndefValue *AggregateElement;
  unint64_t v32;
  unint64_t v33;
  llvm::StructLayout *StructLayout;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  char v51;
  const char *v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  char v60;
  char *v62;

  v5 = a1[16];
  if ((v5 - 11) >= 3)
  {
    v11 = (llvm::UndefValue *)a1;
    while (1)
    {
      while (v5 == 17)
      {
        v16 = *(_QWORD ***)v11;
        v17 = *(unsigned __int8 *)(*(_QWORD *)v11 + 8);
        if (*(_BYTE *)(*(_QWORD *)v11 + 8))
        {
          if (v17 == 2)
          {
            v18 = **v16 + 1960;
          }
          else
          {
            if (v17 != 3)
              return 0;
            v18 = **v16 + 1984;
          }
        }
        else
        {
          v18 = **v16 + 1936;
        }
        v11 = sub_1C4DEEB60((unsigned __int8 *)v11, v18, a5);
        v5 = *((unsigned __int8 *)v11 + 16);
        if ((v5 - 11) < 3)
          return 1;
      }
      if (v5 == 16)
      {
        v33 = *((unsigned int *)v11 + 8);
        if (v33 > 0x40 || (*((_DWORD *)v11 + 8) & 7) != 0)
          return 0;
        result = 1;
        if ((_DWORD)a4)
        {
          v55 = v33 >> 3;
          if (v33 >> 3 != a2)
          {
            v56 = *((_QWORD *)v11 + 3);
            v57 = a4 - 1;
            v58 = v55 - 1;
            v59 = -(int)a2;
            do
            {
              if (*(_BYTE *)a5)
                v60 = v58 + v59;
              else
                v60 = a2;
              *a3++ = v56 >> (8 * v60);
              if (v57-- == 0)
                break;
              LOBYTE(v59) = v59 - 1;
              v13 = v58 == a2++;
            }
            while (!v13);
          }
        }
        return result;
      }
      v12 = *((unsigned __int8 *)v11 + 16);
      v13 = v12 == 8 || v12 == 10;
      if (v13)
        break;
      if (v12 == 9)
      {
        StructLayout = llvm::DataLayout::getStructLayout(a5, *(llvm::StructType **)v11);
        v36 = (char *)StructLayout + 16;
        v62 = (char *)StructLayout + 16;
        v37 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
        if ((_DWORD)v37)
        {
          v36 = (char *)StructLayout + 16;
          do
          {
            v38 = v37 >> 1;
            v39 = &v36[8 * (v37 >> 1)];
            v41 = *(_QWORD *)v39;
            v40 = v39 + 8;
            v37 += ~(v37 >> 1);
            if (v41 > a2)
              v37 = v38;
            else
              v36 = v40;
          }
          while (v37);
        }
        v42 = v36 - v62 - 8;
        v43 = *(_QWORD *)&v62[v42 & 0x7FFFFFFF8];
        v44 = a2 - v43;
        for (i = v42 >> 3; ; v43 = *(_QWORD *)&v62[8 * i])
        {
          v46 = **((_QWORD **)v11 + 4 * i + -4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
          sub_1C4768AD0((uint64_t)a5, v46);
          v48 = v47;
          v50 = v49 == 1;
          llvm::DataLayout::getAlignment((uint64_t)a5, v46);
          if (v50)
          {
            v54 = v51;
            v51 = v54;
          }
          if (v44 < (((1 << v51) + ((unint64_t)(v48 + 7) >> 3) - 1) & -(1 << v51)))
          {
            result = sub_1C4DF57F0(*((_QWORD *)v11 + 4 * i + -4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)), v44, a3, a4, a5);
            if (!(_DWORD)result)
              break;
          }
          LODWORD(i) = i + 1;
          if ((_DWORD)i == *(_DWORD *)(*(_QWORD *)v11 + 12))
            return 1;
          v53 = *(_QWORD *)&v62[8 * i] - (v43 + v44);
          if (v53 >= a4)
            return 1;
          v44 = 0;
          a3 += v53;
          a4 = (a4 - v53);
        }
        return result;
      }
      if ((v12 & 0xFE) == 0xE)
        break;
      if (v12 != 5)
        return 0;
      if (*((_WORD *)v11 + 9) != 48)
        return 0;
      v14 = **((_QWORD **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      llvm::DataLayout::getIntPtrType(a5, *(llvm::Type **)v11);
      if (v14 != v15)
        return 0;
      v11 = (llvm::UndefValue *)*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      v5 = *((unsigned __int8 *)v11 + 16);
      if ((v5 - 11) <= 2)
        return 1;
    }
    v19 = *(llvm::StructType **)v11;
    if (*(_QWORD *)v11 && *((_BYTE *)v19 + 8) == 17)
      v20 = (llvm::Type *)*((_QWORD *)v19 + 4);
    else
      v20 = (llvm::Type *)*((unsigned int *)v19 + 8);
    v21 = *((_QWORD *)v19 + 3);
    sub_1C4768AD0((uint64_t)a5, v21);
    v23 = (unint64_t)(v22 + 7) >> 3;
    v25 = v24 == 1;
    llvm::DataLayout::getAlignment((uint64_t)a5, v21);
    v28 = ((1 << v27) + v23 - 1) & -(1 << v27);
    if (v25)
    v29 = a2 / v28;
    if ((llvm::Type *)(a2 / v28) != v20)
    {
      v30 = a2 % v28;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement(v11, (llvm::Type *)v29);
        result = sub_1C4DF57F0(AggregateElement, v30, a3, a4, a5);
        if (!(_DWORD)result)
          break;
        v32 = v28 - v30;
        if (v28 - v30 >= a4)
          break;
        v30 = 0;
        a4 = (a4 - v32);
        a3 += v32;
        ++v29;
      }
      while ((llvm::Type *)v29 != v20);
      return result;
    }
  }
  return 1;
}

uint64_t sub_1C4DF5C10(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4DF5CB4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4DF5E2C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4DF5E2C(a1, v14, v9);
}

uint64_t sub_1C4DF5E2C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4DF5C10((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

llvm::ConstantExpr *sub_1C4DF5EEC(llvm::Value *a1)
{
  uint64_t v1;
  llvm::ConstantExpr *result;
  llvm::ConstantExpr *v3;
  llvm::PointerType **v4;
  llvm::Type *v5;
  llvm::PointerType *v6;
  llvm::Constant *v7;
  llvm::Type *v8;

  v1 = *(_QWORD *)a1;
  result = llvm::Value::stripPointerCasts(a1);
  v3 = result;
  v4 = *(llvm::PointerType ***)result;
  v5 = (llvm::Type *)(*(_DWORD *)(v1 + 8) >> 8);
  if ((_DWORD)v5 != *(_DWORD *)(*(_QWORD *)result + 8) >> 8)
  {
    v6 = v4[3];
    if (v6)
      v7 = (llvm::Constant *)llvm::PointerType::get(v6, v5);
    else
      v7 = (llvm::Constant *)llvm::PointerType::get(*v4, v5);
    return llvm::ConstantExpr::getPointerCast(v3, v7, v8);
  }
  return result;
}

void sub_1C4DF5F58(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 16 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C4DF5FEC(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C4DF5FEC(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 16 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  ++*(_DWORD *)(a1 + 8);
}

void sub_1C4DF5FEC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 16, &v6);
  sub_1C4DF605C(a1, (uint64_t)v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C4DF605C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = (_DWORD *)(a2 + 8);
    v4 = 16 * v2;
    v5 = (_DWORD *)(*(_QWORD *)result + 8);
    do
    {
      *v3 = *v5;
      *((_QWORD *)v3 - 1) = *((_QWORD *)v5 - 1);
      *v5 = 0;
      v5 += 4;
      v3 += 4;
      v4 -= 16;
    }
    while (v4);
    v6 = *(unsigned int *)(result + 8);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)result;
      v8 = 16 * v6;
      do
      {
        if (*(_DWORD *)(v7 + v8 - 8) >= 0x41u)
        {
          result = *(_QWORD *)(v7 + v8 - 16);
          if (result)
          {
            v9 = v8;
            v10 = v7;
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
            v8 = v9;
            v7 = v10;
          }
        }
        v8 -= 16;
      }
      while (v8);
    }
  }
  return result;
}

unsigned int *sub_1C4DF60FC(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + a2, 8);
    v6 = v5[2];
  }
  if (a2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  v5[2] = v6 + a2;
  return result;
}

llvm::Value **sub_1C4DF6170(char *__s1, llvm::Type *a2, int a3, unsigned __int8 *a4, llvm::Constant **a5, int a6, uint64_t *a7, llvm::ConstrainedFPIntrinsic *a8, uint64_t a9)
{
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  llvm::Constant *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _BOOL4 v24;
  const llvm::detail::DoubleAPFloat *v25;
  llvm::ConstantInt *v26;
  const llvm::APInt *v27;
  uint64_t v28;
  llvm::ConstantInt *v29;
  const llvm::APInt *v30;
  uint64_t v31;
  BOOL v32;
  llvm::Constant *v33;
  llvm::Constant *v35;
  int v36;
  char v38;
  llvm::UndefValue *v39;
  uint64_t v40;
  int v41;
  llvm::UndefValue *AggregateElement;
  void **v43;
  const llvm::detail::DoubleAPFloat *v44;
  const llvm::APFloat *v45;
  void **v46;
  uint64_t v47;
  uint8x8_t v48;
  unsigned __int32 v49;
  const llvm::APInt *v50;
  uint64_t v51;
  llvm::ConstantInt *v52;
  unsigned int v53;
  char v54;
  int v55;
  llvm::UndefValue *v56;
  const llvm::APInt *v57;
  llvm::UndefValue *v58;
  int v59;
  llvm::ConstantInt **v60;
  const llvm::APInt *v61;
  void **v62;
  uint64_t v63;
  const llvm::APFloat *v64;
  unsigned int v65;
  int v66;
  char *v67;
  unint64_t v68;
  llvm::Value **v69;
  uint64_t ICmp;
  const char *v71;
  unsigned int PrimitiveSizeInBits;
  char *v73;
  unsigned int v74;
  llvm::Value **NullValue;
  const char *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  int8x8_t *v82;
  int8x8_t v83;
  uint8x8_t v84;
  unsigned __int16 RoundingMode;
  int v86;
  uint64_t v87;
  llvm::UndefValue *v88;
  void **p_src;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  void **v96;
  uint64_t *v97;
  unsigned int v98;
  void *v99;
  void *v100;
  unint64_t v101;
  BOOL v102;
  uint64_t *v103;
  unsigned int v104;
  void *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BOOL4 v119;
  size_t v120;
  uint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  size_t v125;
  uint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  size_t v130;
  uint64_t *v131;
  unint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  BOOL v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  BOOL v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  unint64_t v162;
  unint64_t v163;
  unsigned int *v164;
  void *v165;
  int v166;
  void **v167;
  llvm::ConstantFP **v168;
  void **v169;
  char v170;
  int v171;
  unsigned __int16 ExceptionBehavior;
  llvm::ConstantFP *v173;
  unsigned __int8 v174;
  uint64_t v175;
  int v176;
  double v177;
  double v178;
  long double v179;
  double v180;
  double v181;
  double (*v182)(double);
  double v183;
  int v184;
  double v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  _QWORD *v189;
  llvm::ConstantFP *v190;
  const llvm::APFloat *v191;
  uint64_t v192;
  llvm::Type *v193;
  double v194;
  double v195;
  int8x16_t v196;
  int8x16_t v197;
  double v198;
  llvm::APFloatBase *v199;
  float64x2_t v200;
  uint64_t v201;
  double v202;
  void **v203;
  _DWORD *v204;
  int v205;
  void **v206;
  void ***v207;
  _QWORD *v208;
  uint64_t v209;
  char v210;
  int v211;
  double v212;
  char v213;
  unsigned __int8 v214;
  double v215;
  double v216;
  unsigned __int8 v217;
  double v218;
  void **v219;
  unsigned __int8 *v220;
  double v221;
  double v222;
  double v223;
  unsigned __int8 v224;
  double v225;
  double v226;
  double v227;
  double v228;
  _QWORD *v229;
  void *v230;
  int v231;
  double v232;
  uint64_t v233;
  unsigned __int8 *v234;
  std::string __dst;
  char v236[8];
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t *v240;
  _QWORD *v241;
  int v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  _QWORD *v248;
  int v249;
  char v250;
  void *__src;
  uint64_t v252;
  void **v253;
  char v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a2 < 0xB)
    goto LABEL_8;
  v16 = *(_QWORD *)__s1 == 0x766E6F632E726961 && *(_QWORD *)(__s1 + 3) == 0x747265766E6F632ELL;
  if (v16)
  {
    v19 = *a5;
    *(_QWORD *)&v247 = __s1;
    *((_QWORD *)&v247 + 1) = a2;
    if ((*((_BYTE *)v19 + 16) & 0xFE) != 0x10)
      return 0;
    __src = &v253;
    v252 = 0x800000000;
    llvm::StringRef::split(&v247, (uint64_t)&__src, ".", 1uLL, 8, 1);
    if ((_DWORD)v252 != 6)
    {
      v19 = 0;
      goto LABEL_336;
    }
    v24 = *((_QWORD *)__src + 9) != 1 || **((unsigned __int8 **)__src + 8) != 117;
    if (*((_QWORD *)__src + 5) == 1)
    {
      if (**((_BYTE **)__src + 4) == 117)
        v59 = 41;
      else
        v59 = 42;
    }
    else
    {
      v59 = 42;
    }
    if (*(_BYTE *)(*(_QWORD *)v19 + 8))
    {
      if (*(_BYTE *)(*(_QWORD *)v19 + 8) != 1 || a4[8])
      {
LABEL_137:
        v65 = a4[8];
        if (*((_BYTE *)v19 + 16) == 16)
        {
          if (v65 <= 6)
          {
            if (v24)
              v66 = 44;
            else
              v66 = 43;
            goto LABEL_334;
          }
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a4);
          if ((_DWORD)v71 == 1)
          v74 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v19);
          if ((_DWORD)v73 == 1)
          if (PrimitiveSizeInBits == v74)
            goto LABEL_336;
          if (PrimitiveSizeInBits != 1)
          {
            if (v24)
              v166 = 40;
            else
              v166 = 39;
            if (PrimitiveSizeInBits <= v74)
              v66 = 38;
            else
              v66 = v166;
            goto LABEL_334;
          }
          NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v19, (llvm::Type *)v73);
          ICmp = (uint64_t)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x21, (unsigned __int8 *)v19, (llvm::Constant *)NullValue, 0);
        }
        else
        {
          v68 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a4);
          if (v65 != 13)
          {
            if (v67 == 1)
            v77 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v19);
            if ((_DWORD)v76 == 1)
            if ((_DWORD)v68 == v77)
              goto LABEL_336;
            if (v68 <= v77)
              v66 = 45;
            else
              v66 = 46;
            goto LABEL_334;
          }
          if (v67 == 1)
          if (v68 != 1)
          {
            v66 = v59;
LABEL_334:
            ICmp = llvm::ConstantExpr::getCast(v66);
            goto LABEL_335;
          }
          v69 = llvm::Constant::getNullValue(*(llvm::Constant **)v19, (llvm::Type *)v67);
          ICmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)0xE, (uint64_t ***)v19, (llvm::Constant *)v69, 0);
        }
LABEL_335:
        v19 = (llvm::Constant *)ICmp;
LABEL_336:
        if (__src != &v253)
          free(__src);
        return (llvm::Value **)v19;
      }
    }
    else if (a4[8] != 1)
    {
      goto LABEL_137;
    }
    v19 = sub_1C537D3B8((llvm *)0x2E, (uint64_t)v19, (llvm::Constant *)(**(_QWORD **)a4 + 1672), 0);
    goto LABEL_137;
  }
  if ((unint64_t)a2 >= 0x29 && !memcmp(__s1, "air.normalize_function_constant_predicate", 0x29uLL))
  {
    v19 = *a5;
    if (*((unsigned __int8 *)*a5 + 16) - 11 > 1)
      return (llvm::Value **)v19;
    return llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
  }
LABEL_8:
  v17 = (unsigned __int8 *)*a5;
  if (a3 == 165)
  {
    if (llvm::Constant::isManifestConstant(*a5))
    {
      v51 = **(_QWORD **)a4;
      v19 = *(llvm::Constant **)(v51 + 1560);
      if (!v19)
      {
        v52 = *(llvm::ConstantInt **)(v51 + 1888);
        v53 = *(_DWORD *)(v51 + 1896);
        LODWORD(v252) = v53 >> 8;
        if (v53 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
        }
        else
        {
          if (v53 <= 0xFF)
            v54 = 0;
          else
            v54 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v53);
          __src = (void *)(v54 & 1);
        }
        v19 = llvm::ConstantInt::get(v52, (llvm::LLVMContext *)&__src, v50);
        if (v252 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        *(_QWORD *)(v51 + 1560) = v19;
      }
      return (llvm::Value **)v19;
    }
    return 0;
  }
  v18 = v17[16];
  if ((v18 - 11) <= 1)
  {
    if (a3 > 143)
    {
      if ((a3 - 290) > 0x27)
      {
LABEL_64:
        if ((a3 - 144) < 2)
          return llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
        v19 = *a5;
        if (a3 == 166)
          return (llvm::Value **)v19;
LABEL_70:
        v35 = *a5;
        v36 = *((unsigned __int8 *)*a5 + 16);
        if (v36 != 15 && v36 != 10)
          return 0;
        v19 = 0;
        v38 = a3 + 92;
        if ((a3 - 12196) > 0x2B)
          return (llvm::Value **)v19;
        if (((1 << v38) & 0x6000000003) != 0)
        {
          AggregateElement = llvm::Constant::getAggregateElement(v35, 0);
          if (AggregateElement && *((_BYTE *)AggregateElement + 16) == 17)
          {
            v40 = (uint64_t)AggregateElement + 24;
            v41 = 0;
            return sub_1C4DF8BA4(v40, v41, (llvm::ConstantInt *)a4, (const llvm::APInt *)1);
          }
        }
        else
        {
          if (((1 << v38) & 0xC0000000030) == 0)
            return (llvm::Value **)v19;
          v39 = llvm::Constant::getAggregateElement(v35, 0);
          if (v39 && *((_BYTE *)v39 + 16) == 17)
          {
            v40 = (uint64_t)v39 + 24;
            v41 = 1;
            return sub_1C4DF8BA4(v40, v41, (llvm::ConstantInt *)a4, (const llvm::APInt *)1);
          }
        }
        return 0;
      }
      if (((1 << (a3 - 34)) & 0xFE18000000) == 0)
      {
        if (a3 == 290)
          return (llvm::Value **)*a5;
        goto LABEL_64;
      }
      goto LABEL_54;
    }
    v19 = *a5;
    if ((a3 - 8) < 2)
      return (llvm::Value **)v19;
    if (a3 != 51 && a3 != 53)
      goto LABEL_70;
    return llvm::Constant::getNullValue((llvm::Constant *)a4, a2);
  }
  if (v18 != 16)
  {
    if (v18 != 17)
    {
      if (v18 == 19)
      {
        if ((a3 - 290) > 0x27)
          goto LABEL_21;
        if (((1 << (a3 - 34)) & 0xFE18000000) != 0)
          goto LABEL_54;
        if (a3 != 290)
        {
LABEL_21:
          if (a3 != 166)
            goto LABEL_70;
        }
        v20 = *((_QWORD *)a8 + 5);
        if (v20)
        {
          v21 = *(_QWORD *)(v20 + 56);
          if (v21)
          {
            v22 = *(_DWORD *)(*(_QWORD *)v17 + 8);
            if ((v22 & 0xFE) == 0x12)
              v22 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v17 + 16) + 8);
            v23 = *(_QWORD *)(v21 + 112);
            if (v23)
            {
              v19 = 0;
              if ((*(_BYTE *)(v23 + 17) & 1) != 0 || v22 > 0xFF)
                return (llvm::Value **)v19;
              return (llvm::Value **)*a5;
            }
            if (v22 <= 0xFF)
              return (llvm::Value **)*a5;
          }
        }
        return 0;
      }
      if ((a3 - 323) >= 7 && (a3 - 317) > 1)
        goto LABEL_70;
LABEL_54:
      v31 = *(_QWORD *)v17;
      if (*(_QWORD *)v17)
        v32 = *(_BYTE *)(*(_QWORD *)v17 + 8) == 18;
      else
        v32 = 0;
      if (!v32)
        goto LABEL_70;
      if (v18 != 12)
      {
        if (v18 == 13)
        {
          v33 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v31 + 24), 0, 0);
LABEL_68:
          v19 = v33;
LABEL_69:
          if (v19)
            return (llvm::Value **)v19;
          goto LABEL_70;
        }
        if (!sub_1C5375B0C(*a5, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FF8, (uint64_t)&__src))
        {
          v55 = v17[16];
          if (v55 != 15 && v55 != 10)
            goto LABEL_70;
          v56 = llvm::Constant::getAggregateElement((llvm::Constant *)v17, 0);
          if (!v56)
            goto LABEL_70;
          v58 = v56;
          if (*((_BYTE *)v56 + 16) != 16)
            goto LABEL_70;
          LODWORD(v252) = *((_DWORD *)v56 + 8);
          if (v252 > 0x40)
          {
            __src = (void *)operator new[]();
            memcpy(__src, *((const void **)v58 + 3), (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __src = (void *)*((_QWORD *)v56 + 3);
          }
          v86 = *(_DWORD *)(v31 + 32);
          if (v86 == 1)
          {
LABEL_189:
            v19 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v17, (llvm::LLVMContext *)&__src, v57);
          }
          else
          {
            v87 = 1;
            v231 = *(_DWORD *)(v31 + 32);
            v234 = a4;
            while (2)
            {
              v88 = llvm::Constant::getAggregateElement((llvm::Constant *)v17, (llvm::Type *)v87);
              v19 = 0;
              if (v88 && *((_BYTE *)v88 + 16) == 16)
              {
                p_src = (void **)((char *)v88 + 24);
                switch(a3)
                {
                  case 317:
                    LODWORD(v90) = v252;
                    if (v252 >= 0x41)
                    {
                      v112 = v252 + 63;
                      v100 = (void *)operator new[]();
                      v230 = __src;
                      memcpy(v100, __src, (v112 >> 3) & 0x3FFFFFF8);
                      v113 = 0;
                      v114 = (uint64_t *)*p_src;
                      v115 = (unint64_t *)v100;
                      v116 = v112 >> 6;
                      do
                      {
                        v117 = *v114++;
                        v118 = v117 + *v115;
                        v119 = v118 + 1 <= *v115;
                        if (v113)
                        {
                          ++v118;
                          v113 = v119;
                        }
                        else
                        {
                          v113 = v118 < *v115;
                        }
                        *v115++ = v118;
                        --v116;
                      }
                      while (v116);
                      *((_QWORD *)v100 + (v112 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v90;
                      goto LABEL_266;
                    }
                    v91 = (unint64_t)__src + (_QWORD)*p_src;
                    v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v252;
                    if (!(_DWORD)v252)
                      v92 = 0;
                    goto LABEL_217;
                  case 318:
                    v90 = v252;
                    if (v252 > 0x40)
                    {
                      v120 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                      v100 = (void *)operator new[]();
                      v230 = __src;
                      memcpy(v100, __src, v120);
                      v121 = (uint64_t *)*p_src;
                      v122 = (unint64_t)(v90 + 63) >> 6;
                      v123 = v100;
                      do
                      {
                        v124 = *v121++;
                        *v123++ &= v124;
                        --v122;
                      }
                      while (v122);
                      goto LABEL_266;
                    }
                    v91 = (unint64_t)__src;
                    v92 = (unint64_t)*p_src;
LABEL_217:
                    v100 = (void *)(v92 & v91);
                    goto LABEL_269;
                  case 323:
                    llvm::APInt::operator*((uint64_t)&__src, p_src, (uint64_t)&v247);
                    if (v252 >= 0x41 && __src)
                      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                    __src = (void *)v247;
                    LODWORD(v252) = DWORD2(v247);
                    goto LABEL_270;
                  case 324:
                    v90 = v252;
                    if (v252 <= 0x40)
                    {
                      v100 = (void *)((unint64_t)*p_src | (unint64_t)__src);
                      goto LABEL_269;
                    }
                    v125 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                    v100 = (void *)operator new[]();
                    v230 = __src;
                    memcpy(v100, __src, v125);
                    v126 = (uint64_t *)*p_src;
                    v127 = (unint64_t)(v90 + 63) >> 6;
                    v128 = v100;
                    do
                    {
                      v129 = *v126++;
                      *v128++ |= v129;
                      --v127;
                    }
                    while (v127);
                    goto LABEL_266;
                  case 325:
                    if (v252 <= 0x40)
                    {
                      v108 = -(uint64_t)v252;
                      v109 = (uint64_t)((_QWORD)__src << v108) >> v108;
                      v110 = (uint64_t)(*((_QWORD *)v88 + 3) << v108) >> v108;
                      v102 = v109 > v110;
                      if (v109 > v110)
                        p_src = &__src;
                      v111 = (uint64_t *)((char *)v88 + 32);
                      if (v109 > v110)
                        v111 = &v252;
                      v98 = *(_DWORD *)v111;
                      if (v98 < 0x41)
                      {
                        if (v109 <= v110)
                          v99 = (void *)*((_QWORD *)v88 + 3);
                        else
                          v99 = __src;
                        goto LABEL_249;
                      }
                      goto LABEL_302;
                    }
                    v140 = *((_QWORD *)__src + ((v252 - 1) >> 6)) & (1 << (v252 - 1));
                    v141 = *((_DWORD *)v88 + 8);
                    v142 = v141 - 1;
                    v143 = *((_QWORD *)v88 + 3);
                    if (v141 >= 0x41)
                      v144 = (_QWORD *)(v143 + 8 * (v142 >> 6));
                    else
                      v144 = (_QWORD *)((char *)v88 + 24);
                    if ((v140 != 0) != ((*v144 >> v142) & 1))
                    {
                      v102 = v140 == 0;
                      if (!v140)
                        p_src = &__src;
                      goto LABEL_302;
                    }
                    v150 = v143 - 8;
                    v151 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v151)
                        goto LABEL_301;
                      v152 = *(_QWORD *)((char *)__src + v151 - 8);
                      v153 = *(_QWORD *)(v150 + v151);
                      v151 -= 8;
                      v154 = v152 > v153;
                    }
                    while (v152 == v153);
                    goto LABEL_296;
                  case 326:
                    if (v252 > 0x40)
                    {
                      v135 = *((_QWORD *)__src + ((v252 - 1) >> 6)) & (1 << (v252 - 1));
                      v95 = v135 != 0;
                      v136 = *((_DWORD *)v88 + 8);
                      v137 = v136 - 1;
                      v138 = *((_QWORD *)v88 + 3);
                      if (v136 >= 0x41)
                        v139 = (_QWORD *)(v138 + 8 * (v137 >> 6));
                      else
                        v139 = (_QWORD *)((char *)v88 + 24);
                      if (v95 != ((*v139 >> v137) & 1))
                      {
                        if (v135)
                          v96 = &__src;
                        else
                          v96 = (void **)((char *)v88 + 24);
                        goto LABEL_318;
                      }
                      v145 = v138 - 8;
                      v146 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v146)
                          goto LABEL_314;
                        v147 = *(_QWORD *)((char *)__src + v146 - 8);
                        v148 = *(_QWORD *)(v145 + v146);
                        v146 -= 8;
                        v149 = v147 > v148;
                      }
                      while (v147 == v148);
                      goto LABEL_311;
                    }
                    v93 = (uint64_t)((_QWORD)__src << -(char)v252) >> -(char)v252;
                    v94 = (uint64_t)(*((_QWORD *)v88 + 3) << -(uint64_t)v252) >> -(uint64_t)v252;
                    v95 = v93 < v94;
                    if (v93 >= v94)
                      v96 = (void **)((char *)v88 + 24);
                    else
                      v96 = &__src;
                    v97 = (uint64_t *)((char *)v88 + 32);
                    if (v93 < v94)
                      v97 = &v252;
                    v98 = *(_DWORD *)v97;
                    if (v98 >= 0x41)
                      goto LABEL_318;
                    if (v93 >= v94)
                      v99 = (void *)*((_QWORD *)v88 + 3);
                    else
                      v99 = __src;
LABEL_249:
                    __src = v99;
                    LODWORD(v252) = v98;
                    goto LABEL_270;
                  case 327:
                    if (v252 > 0x40)
                    {
                      v155 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v155)
                        {
LABEL_301:
                          v102 = 0;
                          v86 = v231;
                          goto LABEL_302;
                        }
                        v156 = *(_QWORD *)((char *)__src + v155 - 8);
                        v157 = *(_QWORD *)((char *)*p_src + v155 - 8);
                        v155 -= 8;
                        v154 = v156 > v157;
                      }
                      while (v156 == v157);
LABEL_296:
                      v102 = v154;
                      v86 = v231;
                      if (v154)
                        goto LABEL_270;
                    }
                    else
                    {
                      v101 = *((_QWORD *)v88 + 3);
                      v102 = (unint64_t)__src > v101;
                      if ((unint64_t)__src > v101)
                        p_src = &__src;
                      v103 = (uint64_t *)((char *)v88 + 32);
                      if ((unint64_t)__src > v101)
                        v103 = &v252;
                      v104 = *(_DWORD *)v103;
                      if (v104 < 0x41)
                      {
                        if ((unint64_t)__src <= v101)
                          v105 = (void *)*((_QWORD *)v88 + 3);
                        else
                          v105 = __src;
                        goto LABEL_237;
                      }
                    }
LABEL_302:
                    if (&__src == p_src)
                      goto LABEL_270;
                    v16 = !v102;
                    v158 = (unsigned int *)&v252;
                    if (v16)
                      v158 = (unsigned int *)((char *)v88 + 32);
                    llvm::APInt::reallocate((uint64_t)&__src, *v158);
                    v159 = v252;
                    if (v252 > 0x40)
                    {
                      v160 = __src;
                      v161 = *p_src;
                      goto LABEL_324;
                    }
                    v165 = *p_src;
                    goto LABEL_327;
                  case 328:
                    if (v252 > 0x40)
                    {
                      v146 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                      do
                      {
                        if (!v146)
                          goto LABEL_314;
                        v162 = *(_QWORD *)((char *)__src + v146 - 8);
                        v163 = *(_QWORD *)((char *)*p_src + v146 - 8);
                        v146 -= 8;
                        v149 = v162 > v163;
                      }
                      while (v162 == v163);
LABEL_311:
                      if (v149)
                        LODWORD(v146) = 1;
                      else
                        LODWORD(v146) = -1;
LABEL_314:
                      v95 = v146 >> 31;
                      if ((v146 & 0x80000000) == 0)
                        v96 = (void **)((char *)v88 + 24);
                      else
                        v96 = &__src;
                      v86 = v231;
                      goto LABEL_318;
                    }
                    v106 = *((_QWORD *)v88 + 3);
                    v95 = (unint64_t)__src < v106;
                    if ((unint64_t)__src >= v106)
                      v96 = (void **)((char *)v88 + 24);
                    else
                      v96 = &__src;
                    v107 = (uint64_t *)((char *)v88 + 32);
                    if ((unint64_t)__src < v106)
                      v107 = &v252;
                    v104 = *(_DWORD *)v107;
                    if (v104 < 0x41)
                    {
                      if ((unint64_t)__src >= v106)
                        v105 = (void *)*((_QWORD *)v88 + 3);
                      else
                        v105 = __src;
LABEL_237:
                      __src = v105;
                      LODWORD(v252) = v104;
                      goto LABEL_270;
                    }
LABEL_318:
                    if (&__src != v96)
                    {
                      v16 = v95 == 0;
                      v164 = (unsigned int *)&v252;
                      if (v16)
                        v164 = (unsigned int *)((char *)v88 + 32);
                      llvm::APInt::reallocate((uint64_t)&__src, *v164);
                      v159 = v252;
                      if (v252 <= 0x40)
                      {
                        v165 = *v96;
LABEL_327:
                        __src = v165;
                      }
                      else
                      {
                        v160 = __src;
                        v161 = *v96;
LABEL_324:
                        memcpy(v160, v161, ((unint64_t)(v159 + 63) >> 3) & 0x3FFFFFF8);
                      }
                    }
LABEL_270:
                    v87 = (v87 + 1);
                    if ((_DWORD)v87 == v86)
                      goto LABEL_189;
                    continue;
                  case 329:
                    v90 = v252;
                    if (v252 > 0x40)
                    {
                      v130 = (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8;
                      v100 = (void *)operator new[]();
                      v230 = __src;
                      memcpy(v100, __src, v130);
                      v131 = (uint64_t *)*p_src;
                      v132 = (unint64_t)(v90 + 63) >> 6;
                      v133 = v100;
                      do
                      {
                        v134 = *v131++;
                        *v133++ ^= v134;
                        --v132;
                      }
                      while (v132);
LABEL_266:
                      a4 = v234;
                      v86 = v231;
                      if (v252 > 0x40 && v230)
                        MEMORY[0x1CAA32F9C](v230, 0x1000C8000313F17);
                    }
                    else
                    {
                      v100 = (void *)((unint64_t)*p_src ^ (unint64_t)__src);
                    }
LABEL_269:
                    __src = v100;
                    LODWORD(v252) = v90;
                    goto LABEL_270;
                  default:
                    goto LABEL_270;
                }
              }
              break;
            }
          }
          if (v252 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          goto LABEL_69;
        }
      }
      v33 = (llvm::Constant *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v31 + 24), a2);
      goto LABEL_68;
    }
    if (a3 == 18)
    {
      v25 = (const llvm::detail::DoubleAPFloat *)(v17 + 32);
      if (*((_UNKNOWN **)v17 + 4) == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v252, v25);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v252, (uint64_t **)v25);
      llvm::APFloat::convert((uint64_t)&__src, &unk_1C866F15C, 1, &v244);
      v26 = *(llvm::ConstantInt **)a4;
      if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v252, (unsigned int *)&v247);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v252, (unsigned int *)&v247);
      v19 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v247, v27);
      if (DWORD2(v247) >= 0x41 && (_QWORD)v247)
        MEMORY[0x1CAA32F9C](v247, 0x1000C8000313F17);
      v28 = v252;
      if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
        goto LABEL_637;
      goto LABEL_562;
    }
    v233 = (uint64_t)a4;
    v43 = (void **)(v17 + 32);
    v44 = (const llvm::detail::DoubleAPFloat *)(v17 + 32);
    if (*((_UNKNOWN **)v17 + 4) == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v252, v44);
    else
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v252, (uint64_t **)v44);
    if ((a3 - 11099) <= 1)
    {
      v46 = &__src;
      if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
        v46 = v253;
      if ((*((_BYTE *)v46 + 28) & 7) == 1)
        goto LABEL_92;
      v60 = (llvm::ConstantInt **)v233;
      DWORD2(v247) = *(_DWORD *)(v233 + 8) >> 8;
      if (DWORD2(v247) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v247, 0, 0);
      else
        *(_QWORD *)&v247 = 0;
      BYTE12(v247) = a3 != 11099;
      LOBYTE(v244) = 0;
      if ((llvm::APFloat::convertToInteger((uint64_t)&__src, (uint64_t)&v247, 0, &v244) & 0xFFFFFFEF) != 0)
      {
        v19 = 0;
LABEL_167:
        if (DWORD2(v247) >= 0x41)
        {
          v78 = v247;
          if ((_QWORD)v247)
LABEL_169:
            MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
        }
LABEL_561:
        v28 = v252;
        if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
        {
LABEL_637:
          sub_1C4773C74((uint64_t *)&v253);
          return (llvm::Value **)v19;
        }
        goto LABEL_562;
      }
LABEL_166:
      v19 = (llvm::Constant *)llvm::ConstantInt::get(v60, (llvm::Type *)&v247, v61);
      goto LABEL_167;
    }
    if ((a3 & 0xFFFFFFFE) == 0x90)
    {
      v60 = (llvm::ConstantInt **)v233;
      DWORD2(v247) = *(_DWORD *)(v233 + 8) >> 8;
      if (DWORD2(v247) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v247, 0, 0);
      else
        *(_QWORD *)&v247 = 0;
      BYTE12(v247) = a3 == 145;
      LOBYTE(v244) = 0;
      llvm::APFloat::convertToInteger((uint64_t)&__src, (uint64_t)&v247, 0, &v244);
      goto LABEL_166;
    }
    v19 = 0;
    v79 = *(unsigned __int8 *)(v233 + 8);
    if (v79 > 3 || v79 == 1)
      goto LABEL_561;
    if (a3 > 138)
    {
      if (a3 > 258)
      {
        if (a3 > 295)
        {
          if (a3 == 296)
          {
LABEL_353:
            v80 = 0;
            goto LABEL_557;
          }
          if (a3 == 2926)
          {
            if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v247 + 8), (const llvm::detail::DoubleAPFloat *)&v252);
            else
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v247 + 8, (uint64_t **)&v252);
            sub_1C4DF8890((uint64_t)&v247, 3);
            if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v245, (const llvm::detail::DoubleAPFloat *)&v252);
            else
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v245, (uint64_t **)&v252);
            sub_1C48DB604((uint64_t)&v244, (uint64_t)&v247, 1);
            v186 = v252;
            if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v240, (uint64_t)&unk_1C866F1C0, 1);
            }
            else
            {
              v240 = (uint64_t *)v252;
              v187 = v252;
              if ((*(_DWORD *)(v252 + 8) + 64) >= 0x80)
              {
                v241 = (_QWORD *)operator new[]();
                v187 = (uint64_t)v240;
              }
              v243 = v243 & 0xF0 | 2;
              v188 = *(_DWORD *)(v187 + 8);
              if ((v188 - 64) < 0xFFFFFF80)
              {
                v229 = v241;
                *v241 = 0;
                bzero(v229 + 1, 8 * (((v188 + 64) >> 6) - 2) + 8);
                v189 = v241;
              }
              else
              {
                v189 = &v241;
                v241 = 0;
              }
              v242 = *(_DWORD *)(v186 + 8) - 1;
              *v189 = 1;
              llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v240, 1, 0);
            }
            sub_1C612A0E4((uint64_t)&v239, 1);
            v190 = *(llvm::ConstantFP **)v233;
            sub_1C618737C((uint64_t)&v244, (uint64_t)&v239, (uint64_t)v236);
            v19 = llvm::ConstantFP::get(v190, (llvm::LLVMContext *)v236, v191);
            if ((_UNKNOWN *)v237 == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v238);
            }
            else if ((*(_DWORD *)(v237 + 8) - 64) <= 0xFFFFFF7F && v238)
            {
              MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
            }
            if (v240 == (uint64_t *)&unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v241);
            }
            else if ((*((_DWORD *)v240 + 2) - 64) <= 0xFFFFFF7F && v241)
            {
              MEMORY[0x1CAA32F9C](v241, 0x1000C8000313F17);
            }
            if ((_UNKNOWN *)v245 == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v246);
            }
            else if ((*(_DWORD *)(v245 + 8) - 64) <= 0xFFFFFF7F && v246)
            {
              MEMORY[0x1CAA32F9C](v246, 0x1000C8000313F17);
            }
            v192 = *((_QWORD *)&v247 + 1);
            if (*((_UNKNOWN **)&v247 + 1) != &unk_1C866F1C0)
            {
LABEL_542:
              if ((*(_DWORD *)(v192 + 8) - 64) <= 0xFFFFFF7F)
              {
                v78 = (uint64_t)v248;
                if (v248)
                  goto LABEL_169;
              }
              goto LABEL_561;
            }
LABEL_656:
            sub_1C4773C74((uint64_t *)&v248);
            goto LABEL_561;
          }
LABEL_373:
          if (*v43 == &unk_1C866F1C0)
            v174 = *(_BYTE *)(*((_QWORD *)v17 + 5) + 28);
          else
            v174 = v17[52];
          if ((v174 & 7u) <= 1)
          {
            v175 = *(_QWORD *)(a9 + 40);
            if (*(char *)(v175 + 239) < 0)
              sub_1C47EBC30(&__dst, *(void **)(v175 + 216), *(_QWORD *)(v175 + 224));
            else
              __dst = *(std::string *)(v175 + 216);
            if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
            {
              v176 = 27;
            }
            else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
            {
              v176 = 28;
            }
            else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
            {
              v176 = 29;
            }
            else
            {
              v176 = 0;
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if ((v176 - 27) > 2)
              goto LABEL_92;
          }
          if (a3 <= 279)
          {
            if (a3 <= 174)
            {
              if (a3 <= 74)
              {
                if (a3 == 51)
                {
LABEL_448:
                  v182 = (double (*)(double))MEMORY[0x1E0C82B40];
                  goto LABEL_587;
                }
              }
              else
              {
                if (a3 == 75)
                {
LABEL_620:
                  feclearexcept(159);
                  *__error() = 0;
                  v226 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                  v178 = exp(v226);
                  goto LABEL_621;
                }
                if (a3 == 76)
                  goto LABEL_541;
              }
              goto LABEL_457;
            }
            if (a3 <= 252)
            {
              switch(a3)
              {
                case 175:
                  goto LABEL_616;
                case 176:
LABEL_598:
                  feclearexcept(159);
                  *__error() = 0;
                  v223 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                  v178 = log10(v223);
                  goto LABEL_621;
                case 177:
LABEL_395:
                  feclearexcept(159);
                  *__error() = 0;
                  v177 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                  v178 = log2(v177);
                  goto LABEL_621;
              }
LABEL_457:
              if (!a7)
                goto LABEL_92;
              v239 = 469;
              v201 = *a7;
              if (!llvm::TargetLibraryInfoImpl::getLibFunc(*a7, __s1, (size_t)a2, &v239))
                goto LABEL_92;
              v19 = 0;
              if ((int)v239 <= 206)
              {
                if ((int)v239 <= 112)
                {
                  switch(v239)
                  {
                    case 'G':
                    case 'H':
                      goto LABEL_503;
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'U':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '[':
                    case '\\':
                    case '_':
                    case 'b':
                      goto LABEL_561;
                    case 'S':
                    case 'T':
                      goto LABEL_539;
                    case 'V':
                    case 'W':
                      goto LABEL_618;
                    case ']':
                    case '^':
                      goto LABEL_526;
                    case 'a':
                      goto LABEL_546;
                    case 'c':
                    case 'd':
                      goto LABEL_609;
                    default:
                      if (v239 - 54 < 2)
                        goto LABEL_532;
                      if (v239 - 60 >= 2)
                        goto LABEL_561;
                      goto LABEL_550;
                  }
                }
                if ((int)v239 > 158)
                {
                  if ((int)v239 > 187)
                  {
                    if (v239 - 188 >= 2)
                    {
                      if (v239 - 190 < 2)
                      {
LABEL_503:
                        if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) == 0
                          && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                        {
                          feclearexcept(159);
                          *__error() = 0;
                          v212 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                          v178 = cosh(v212);
                          goto LABEL_621;
                        }
                        goto LABEL_92;
                      }
                      if (v239 != 203)
                        goto LABEL_561;
                      goto LABEL_618;
                    }
                    if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                      || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                    {
                      goto LABEL_92;
                    }
                    goto LABEL_448;
                  }
                  if (v239 - 178 < 2)
                  {
                    if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                      || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                    {
                      goto LABEL_92;
                    }
LABEL_556:
                    v80 = 2;
                    goto LABEL_557;
                  }
                  if (v239 != 159)
                    goto LABEL_561;
                  goto LABEL_629;
                }
                if ((int)v239 > 148)
                {
                  if (v239 - 149 >= 2)
                  {
                    if (v239 != 155)
                      goto LABEL_561;
LABEL_629:
                    if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                      || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                    {
                      goto LABEL_92;
                    }
                    feclearexcept(159);
                    *__error() = 0;
                    v228 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                    v178 = atan(v228);
                    goto LABEL_621;
                  }
LABEL_550:
                  if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                    || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                  {
                    goto LABEL_92;
                  }
                  feclearexcept(159);
                  *__error() = 0;
                  v218 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                  v178 = asin(v218);
                }
                else if (v239 - 113 < 2)
                {
LABEL_535:
                  if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) != 0
                    || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                  {
                    goto LABEL_92;
                  }
                  feclearexcept(159);
                  *__error() = 0;
                  v216 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                  v178 = sinh(v216);
                }
                else
                {
                  if (v239 - 142 >= 2)
                    goto LABEL_561;
LABEL_532:
                  if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                    || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                  {
                    goto LABEL_92;
                  }
                  feclearexcept(159);
                  *__error() = 0;
                  v215 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                  v178 = acos(v215);
                }
LABEL_621:
                v227 = v178;
                if ((*__error() - 33) < 2 || fetestexcept(143))
                {
LABEL_623:
                  feclearexcept(159);
                  v19 = 0;
                  *__error() = 0;
                  goto LABEL_561;
                }
                v181 = v227;
LABEL_625:
                v199 = sub_1C4DF89DC(v233, v181);
                goto LABEL_560;
              }
              if ((int)v239 > 334)
              {
                switch(v239)
                {
                  case 0x172u:
                  case 0x173u:
                    goto LABEL_575;
                  case 0x174u:
                  case 0x175u:
                  case 0x177u:
                  case 0x178u:
                  case 0x179u:
                  case 0x17Bu:
                  case 0x17Cu:
                  case 0x17Du:
                  case 0x17Eu:
                  case 0x17Fu:
                  case 0x184u:
                  case 0x185u:
                  case 0x186u:
                  case 0x187u:
                  case 0x188u:
                    goto LABEL_561;
                  case 0x176u:
                  case 0x17Au:
                    if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) == 0
                      && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                    {
                      goto LABEL_473;
                    }
                    goto LABEL_92;
                  case 0x180u:
                  case 0x181u:
                    if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) != 0
                      || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                    {
                      goto LABEL_92;
                    }
                    goto LABEL_414;
                  case 0x182u:
                  case 0x183u:
                    goto LABEL_535;
                  case 0x189u:
                  case 0x18Au:
                    v220 = v17 + 24;
                    if (*v43 == &unk_1C866F1C0)
                      v220 = (unsigned __int8 *)*((_QWORD *)v17 + 5);
                    if ((v220[28] & 8) == 0
                      && ((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) == 0
                      && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                    {
                      goto LABEL_586;
                    }
                    goto LABEL_92;
                  default:
                    v213 = v239 + 77;
                    if (v239 - 435 > 0xB)
                      goto LABEL_574;
                    if (((1 << v213) & 3) != 0)
                    {
                      if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) == 0
                        && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                      {
                        feclearexcept(159);
                        *__error() = 0;
                        v222 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                        v178 = tan(v222);
                        goto LABEL_621;
                      }
                    }
                    else if (((1 << v213) & 0xC) != 0)
                    {
                      if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) == 0
                        && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                      {
                        feclearexcept(159);
                        *__error() = 0;
                        v221 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                        v178 = tanh(v221);
                        goto LABEL_621;
                      }
                    }
                    else if (((1 << v213) & 0xC00) != 0)
                    {
                      if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) == 0
                        && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                      {
                        goto LABEL_353;
                      }
                    }
                    else
                    {
LABEL_574:
                      if (v239 - 335 >= 2)
                        goto LABEL_561;
LABEL_575:
                      if (((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) == 0
                        && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                      {
                        goto LABEL_351;
                      }
                    }
                    break;
                }
                goto LABEL_92;
              }
              if ((int)v239 <= 299)
              {
                if ((int)v239 > 214)
                {
                  if (v239 - 215 < 2)
                  {
                    if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) == 0
                      && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                    {
                      v219 = v253;
                      if ((_UNKNOWN *)v252 != &unk_1C866F1C0)
                        v219 = &__src;
                      if ((*((_BYTE *)v219 + 28) & 8) != 0)
                      {
                        if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
                          llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v252);
                        else
                          v254 ^= 8u;
                      }
                      goto LABEL_558;
                    }
                  }
                  else
                  {
                    if (v239 - 234 >= 2)
                      goto LABEL_561;
                    if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) == 0
                      && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                    {
                      goto LABEL_177;
                    }
                  }
                  goto LABEL_92;
                }
                if (v239 - 207 >= 2)
                {
                  if (v239 != 210)
                    goto LABEL_561;
LABEL_618:
                  if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                    || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                  {
                    goto LABEL_92;
                  }
                  goto LABEL_620;
                }
LABEL_539:
                if (((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                  || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                {
                  goto LABEL_92;
                }
LABEL_541:
                DWORD2(v247) = 64;
                *(_QWORD *)&v247 = 0x4000000000000000;
                llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v244, (const llvm::APInt **)&v247);
                *((_QWORD *)&v247 + 1) = v244;
                v248 = (_QWORD *)v245;
                v249 = v246;
                v250 = BYTE4(v246) & 0xF;
                v19 = sub_1C4DF521C((double (*)(double, double))MEMORY[0x1E0C84BB8], (llvm::APFloat *)&v247, (llvm::APFloat *)(v17 + 24), v233);
                v192 = *((_QWORD *)&v247 + 1);
                if (*((_UNKNOWN **)&v247 + 1) != &unk_1C866F1C0)
                  goto LABEL_542;
                goto LABEL_656;
              }
              if ((int)v239 > 306)
              {
                if (v239 - 307 < 2)
                {
LABEL_546:
                  if (*v43 == &unk_1C866F1C0)
                  {
                    v217 = *(_BYTE *)(*((_QWORD *)v17 + 5) + 28);
                    if ((v217 & 8) != 0)
                      goto LABEL_92;
                  }
                  else
                  {
                    v217 = v17[52];
                    if ((v217 & 8) != 0)
                      goto LABEL_92;
                  }
                  if ((v217 & 7) != 3
                    && ((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) == 0
                    && ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) != 0)
                  {
                    goto LABEL_395;
                  }
LABEL_92:
                  v19 = 0;
                  goto LABEL_561;
                }
                if (v239 != 313)
                  goto LABEL_561;
              }
              else
              {
                if (v239 - 301 < 2)
                {
LABEL_526:
                  if (*v43 == &unk_1C866F1C0)
                  {
                    v214 = *(_BYTE *)(*((_QWORD *)v17 + 5) + 28);
                    if ((v214 & 8) != 0)
                      goto LABEL_92;
                  }
                  else
                  {
                    v214 = v17[52];
                    if ((v214 & 8) != 0)
                      goto LABEL_92;
                  }
                  if ((v214 & 7) == 3
                    || ((*(_QWORD *)(a7[1] + 8 * (v239 >> 6)) >> v239) & 1) != 0
                    || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
                  {
                    goto LABEL_92;
                  }
                  goto LABEL_598;
                }
                if (v239 != 300)
                  goto LABEL_561;
              }
LABEL_609:
              if (*v43 == &unk_1C866F1C0)
              {
                v224 = *(_BYTE *)(*((_QWORD *)v17 + 5) + 28);
                if ((v224 & 8) != 0)
                  goto LABEL_92;
              }
              else
              {
                v224 = v17[52];
                if ((v224 & 8) != 0)
                  goto LABEL_92;
              }
              if ((v224 & 7) == 3
                || ((*(_QWORD *)(a7[1] + (((unint64_t)v239 >> 3) & 0x1FFFFFF8)) >> v239) & 1) != 0
                || ((*(unsigned __int8 *)(v201 + ((unint64_t)v239 >> 2)) >> (2 * (v239 & 3))) & 3) == 0)
              {
                goto LABEL_92;
              }
LABEL_616:
              feclearexcept(159);
              *__error() = 0;
              v225 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
              v178 = log(v225);
              goto LABEL_621;
            }
            switch(a3)
            {
              case 253:
                feclearexcept(159);
                *__error() = 0;
                *(double *)v196.i64 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                if (*(double *)v196.i64 != 0.0)
                {
                  v198 = 1.0 / *(double *)v196.i64;
                  goto LABEL_463;
                }
                break;
              case 261:
                feclearexcept(159);
                *__error() = 0;
                *(double *)v196.i64 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
                if (*(double *)v196.i64 != 0.0)
                {
                  v198 = 1.0 / sqrt(*(double *)v196.i64);
LABEL_463:
                  v232 = v198;
                  if ((*__error() - 33) < 2 || fetestexcept(143))
                    goto LABEL_623;
                  v181 = v232;
                  goto LABEL_625;
                }
                break;
              case 273:
LABEL_414:
                v182 = (double (*)(double))MEMORY[0x1E0C85418];
LABEL_587:
                v199 = sub_1C4DF5178(v182, (llvm::APFloat *)(v17 + 24), v233);
                goto LABEL_560;
              default:
                goto LABEL_457;
            }
            v197.i64[0] = 0x7FF0000000000000;
            v200.f64[0] = NAN;
            v200.f64[1] = NAN;
            *(_QWORD *)&v198 = vbslq_s8((int8x16_t)vnegq_f64(v200), v197, v196).u64[0];
            goto LABEL_463;
          }
          if (a3 > 2014)
          {
            if (a3 > 2622)
            {
              if (a3 != 2623)
              {
                if (a3 == 2877 || a3 == 3540)
                {
                  v183 = sub_1C4DF88AC((void **)v17);
                  v19 = 0;
                  if (v183 < -256.0 || v183 > 256.0)
                    goto LABEL_561;
                  if (v183 * 4.0 == floor(v183 * 4.0))
                  {
                    v184 = (int)(v183 * 4.0);
                    if (a3 == 2877)
                      LOBYTE(v184) = v184 + 1;
                    v181 = dbl_1C85F2980[v184 & 3];
                  }
                  else
                  {
                    v202 = (v183 + v183) * 3.14159265;
                    if (a3 == 2877)
                      v181 = cos(v202);
                    else
                      v181 = sin(v202);
                  }
                  goto LABEL_625;
                }
                goto LABEL_457;
              }
            }
            else if ((a3 - 2015) >= 2)
            {
              if (a3 != 2131)
                goto LABEL_457;
              goto LABEL_445;
            }
            feclearexcept(159);
            *__error() = 0;
            v185 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
            v178 = sin(v185 * 1.57079633);
            goto LABEL_621;
          }
          if (a3 <= 1829)
          {
            if (a3 == 280)
            {
LABEL_586:
              v182 = (double (*)(double))MEMORY[0x1E0C85470];
              goto LABEL_587;
            }
            if (a3 == 1827)
            {
              feclearexcept(159);
              *__error() = 0;
              v179 = llvm::APFloat::convertToDouble((llvm::APFloat *)(v17 + 24));
              v180 = atan(v179);
              if ((*__error() - 33) < 2 || fetestexcept(143))
                goto LABEL_623;
              v181 = v179 * v180;
              goto LABEL_625;
            }
            goto LABEL_457;
          }
          if (a3 == 1830)
          {
            v194 = sub_1C4DF88AC((void **)v17);
            v195 = 0.0;
            if (v194 <= 0.0)
            {
LABEL_454:
              v199 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v17, v193, v195);
LABEL_560:
              v19 = v199;
              goto LABEL_561;
            }
LABEL_452:
            v195 = v194;
            if (v194 > 1.0)
              v195 = 1.0;
            goto LABEL_454;
          }
          if (a3 != 1851)
            goto LABEL_457;
LABEL_445:
          v194 = sub_1C4DF88AC((void **)v17);
          v195 = 0.0;
          if (v194 <= 0.0)
            goto LABEL_454;
          goto LABEL_452;
        }
        if (a3 == 259)
        {
LABEL_473:
          v80 = 4;
          goto LABEL_557;
        }
        if (a3 != 260)
          goto LABEL_373;
      }
      else
      {
        if (a3 <= 202)
        {
          if (a3 != 139)
          {
            if (a3 == 140)
            {
LABEL_177:
              v80 = 3;
LABEL_557:
              sub_1C4DF8890((uint64_t)&__src, v80);
LABEL_558:
              v173 = *(llvm::ConstantFP **)v233;
              goto LABEL_559;
            }
            goto LABEL_373;
          }
          v167 = v253;
          if ((_UNKNOWN *)v252 != &unk_1C866F1C0)
            v167 = &__src;
          v168 = (llvm::ConstantFP **)v233;
          if ((*((_BYTE *)v167 + 28) & 8) != 0)
          {
            if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v252);
            else
              v254 ^= 8u;
          }
LABEL_371:
          v173 = *v168;
LABEL_559:
          v199 = llvm::ConstantFP::get(v173, (llvm::LLVMContext *)&__src, v45);
          goto LABEL_560;
        }
        if (a3 != 203 && a3 != 258)
          goto LABEL_373;
      }
LABEL_351:
      v80 = 1;
      goto LABEL_557;
    }
    if (a3 > 107)
    {
      LOBYTE(RoundingMode) = 4;
      switch(a3)
      {
        case 'l':
        case 'o':
          RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode(a8);
          v19 = 0;
          if (RoundingMode >= 0x100u && RoundingMode != 7)
            goto LABEL_361;
          break;
        case 'p':
          goto LABEL_361;
        case 'u':
          LOBYTE(RoundingMode) = 0;
          goto LABEL_361;
        default:
          goto LABEL_373;
      }
      goto LABEL_561;
    }
    switch(a3)
    {
      case 14:
        goto LABEL_556;
      case 79:
        LOBYTE(RoundingMode) = 2;
        break;
      case 87:
        LOBYTE(RoundingMode) = 3;
        break;
      default:
        goto LABEL_373;
    }
LABEL_361:
    if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
      v169 = v253;
    else
      v169 = &__src;
    v170 = *((_BYTE *)v169 + 28);
    if ((v170 & 6) != 0)
    {
      v171 = sub_1C4DF8890((uint64_t)&__src, (char)RoundingMode);
      v168 = (llvm::ConstantFP **)v233;
      if (a3 == 111 && v171 == 16)
      {
        ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(a8);
        if (ExceptionBehavior >= 0x100u && ExceptionBehavior == 2)
          goto LABEL_92;
      }
    }
    else
    {
      v168 = (llvm::ConstantFP **)v233;
      if ((v170 & 7) == 1)
      {
        v203 = (_UNKNOWN *)v252 == &unk_1C866F1C0 ? v253 : &__src;
        v204 = v203[1];
        if (v204[4] != 1)
        {
          v205 = v204[2];
          if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
            v206 = v253;
          else
            v206 = &__src;
          if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
            v207 = (void ***)(v253 + 2);
          else
            v207 = &v253;
          if ((v205 - 64) <= 0xFFFFFF7F)
            v207 = (void ***)v206[2];
          v168 = (llvm::ConstantFP **)v233;
          if ((((unint64_t)v207[(v205 - 2) >> 6] >> (v205 - 2)) & 1) == 0)
          {
            v208 = (_QWORD *)llvm::ConstrainedFPIntrinsic::getExceptionBehavior(a8);
            if ((unsigned __int16)v208 >= 0x100u && (_BYTE)v208)
              goto LABEL_92;
            v209 = v252;
            if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v247 + 1, (uint64_t)&unk_1C866F1C0);
            }
            else
            {
              *((_QWORD *)&v247 + 1) = v252;
              if ((*(_DWORD *)(v252 + 8) + 64) >= 0x80)
              {
                v208 = (_QWORD *)operator new[]();
                v248 = v208;
                v209 = *((_QWORD *)&v247 + 1);
                v210 = v250 & 0xF0 | 3;
              }
              else
              {
                v210 = 3;
              }
              v250 = v210;
              v249 = *(_DWORD *)(v209 + 4) - 1;
              v211 = *(_DWORD *)(v209 + 8);
              if ((v211 - 64) < 0xFFFFFF80)
              {
                *v208 = 0;
                bzero(v208 + 1, 8 * (((v211 + 64) >> 6) - 2) + 8);
              }
              else
              {
                v248 = 0;
              }
            }
            sub_1C4DF8C5C((uint64_t)&v247, 0, 0, 0);
            sub_1C48552C0((uint64_t)&v252, (uint64_t)&v247 + 8);
            if (*((_UNKNOWN **)&v247 + 1) == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v248);
            }
            else if ((*(_DWORD *)(*((_QWORD *)&v247 + 1) + 8) - 64) <= 0xFFFFFF7F && v248)
            {
              MEMORY[0x1CAA32F9C](v248, 0x1000C8000313F17);
            }
            v168 = (llvm::ConstantFP **)v233;
          }
        }
      }
    }
    goto LABEL_371;
  }
  v19 = 0;
  if (a3 <= 16)
  {
    if (a3 == 8)
    {
      v29 = *(llvm::ConstantInt **)a4;
      llvm::APInt::reverseBits((llvm::APInt *)(v17 + 24), (llvm::APInt *)&__src);
    }
    else
    {
      if (a3 != 9)
        return (llvm::Value **)v19;
      v29 = *(llvm::ConstantInt **)a4;
      llvm::APInt::byteSwap((llvm::APInt *)(v17 + 24), (llvm::APInt *)&__src);
    }
    v19 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&__src, v30);
    if (v252 < 0x41)
      return (llvm::Value **)v19;
    v62 = (void **)__src;
    if (!__src)
      return (llvm::Value **)v19;
LABEL_131:
    MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
    return (llvm::Value **)v19;
  }
  if (a3 == 17)
  {
    llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v252, (const llvm::APInt **)v17 + 3);
    v63 = a4[8];
    if ((_DWORD)v63 != 2)
      __asm { BR              X10 }
    llvm::APFloat::convert((uint64_t)&__src, &unk_1C866F184, 1, &v247);
    v19 = llvm::ConstantFP::get(*(llvm::ConstantFP **)a4, (llvm::LLVMContext *)&__src, v64);
    v28 = v252;
    if ((_UNKNOWN *)v252 == &unk_1C866F1C0)
      goto LABEL_637;
LABEL_562:
    if ((*(_DWORD *)(v28 + 8) - 64) > 0xFFFFFF7F)
      return (llvm::Value **)v19;
    v62 = v253;
    if (!v253)
      return (llvm::Value **)v19;
    goto LABEL_131;
  }
  if (a3 != 53)
    return (llvm::Value **)v19;
  v47 = *((unsigned int *)v17 + 8);
  if (v47 > 0x40)
  {
    v49 = 0;
    v81 = (unint64_t)(v47 + 63) >> 6;
    v82 = (int8x8_t *)*((_QWORD *)v17 + 3);
    do
    {
      v83 = *v82++;
      v84 = (uint8x8_t)vcnt_s8(v83);
      v84.i16[0] = vaddlv_u8(v84);
      v49 += v84.i32[0];
      --v81;
    }
    while (v81);
  }
  else
  {
    v48 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v17 + 24));
    v48.i16[0] = vaddlv_u8(v48);
    v49 = v48.i32[0];
  }
  return llvm::ConstantInt::get((llvm::ConstantInt *)a4, v49, 0);
}

uint64_t sub_1C4DF8890(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::roundToIntegral(v2, a2);
  else
    return llvm::detail::IEEEFloat::roundToIntegral(v2, a2);
}

double sub_1C4DF88AC(void **a1)
{
  const llvm::detail::DoubleAPFloat *v1;
  double result;
  double v3;
  char v4;
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)*a1 + 8) & 0xFC) == 0)
    return llvm::APFloat::convertToDouble((llvm::APFloat *)(a1 + 3));
  v1 = (const llvm::detail::DoubleAPFloat *)(a1 + 4);
  if (a1[4] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v6, v1);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v6, (uint64_t **)v1);
  llvm::APFloat::convert((uint64_t)v5, &unk_1C866F198, 1, &v4);
  result = llvm::APFloat::convertToDouble((llvm::APFloat *)v5);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    v3 = result;
    sub_1C4773C74(v7);
    return v3;
  }
  if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && v7[0])
  {
    v3 = result;
    MEMORY[0x1CAA32F9C](v7[0], 0x1000C8000313F17);
    return v3;
  }
  return result;
}

llvm::APFloatBase *sub_1C4DF89DC(uint64_t a1, double a2)
{
  uint64_t v3;
  const llvm::APFloat *v4;
  llvm::ConstantFP *v5;
  llvm::ConstantFP *v6;
  llvm::APFloatBase *v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  const llvm::APInt *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned __int8 *)(a1 + 8) | 2) == 2)
  {
    LODWORD(v14) = 64;
    v13 = *(const llvm::APInt **)&a2;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v9, &v13);
    v14 = v9;
    v15 = v10;
    v16 = v11;
    v17 = v12 & 0xF;
    v3 = *(unsigned __int8 *)(a1 + 8);
    if ((_DWORD)v3 != 2)
      __asm { BR              X10 }
    llvm::APFloat::convert((uint64_t)&v13, &unk_1C866F184, 1, &v9);
    v5 = *(llvm::ConstantFP **)a1;
  }
  else
  {
    v6 = *(llvm::ConstantFP **)a1;
    LODWORD(v14) = 64;
    v13 = *(const llvm::APInt **)&a2;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v9, &v13);
    v14 = v9;
    v15 = v10;
    v16 = v11;
    v17 = v12 & 0xF;
    v5 = v6;
  }
  v7 = llvm::ConstantFP::get(v5, (llvm::LLVMContext *)&v13, v4);
  if ((_UNKNOWN *)v14 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v15);
  }
  else if ((*(_DWORD *)(v14 + 8) - 64) <= 0xFFFFFF7F && v15)
  {
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  return v7;
}

void sub_1C4DF8B78()
{
  JUMPOUT(0x1C4DF8A5CLL);
}

void sub_1C4DF8B84(llvm::APFloatBase *a1)
{
  llvm::APFloatBase::x87DoubleExtended(a1);
  JUMPOUT(0x1C4DF8A5CLL);
}

void sub_1C4DF8B98()
{
  JUMPOUT(0x1C4DF8A5CLL);
}

llvm::Value **sub_1C4DF8BA4(uint64_t a1, int a2, llvm::ConstantInt *a3, const llvm::APInt *a4)
{
  uint64_t v7;
  int v8;
  llvm::Value **result;
  int v10;
  BOOL v11;
  char v12;
  llvm::Type *v13;

  v7 = *((_DWORD *)a3 + 2) >> 8;
  v13 = 0;
  v12 = 0;
  v8 = sub_1C47A8BBC(a1, (llvm::APInt *)&v13, 1, v7, (uint64_t)a4, a2 ^ 1u, &v12);
  result = 0;
  if (v8 == 16)
    v10 = a2;
  else
    v10 = 0;
  if (v8)
    v11 = v10 == 0;
  else
    v11 = 0;
  if (!v11)
    return llvm::ConstantInt::get(a3, (uint64_t)v13, a4);
  return result;
}

uint64_t sub_1C4DF8C2C(uint64_t result)
{
  if (*(_UNKNOWN **)(result + 8) == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)(result + 8));
  *(_BYTE *)(result + 28) ^= 8u;
  return result;
}

unint64_t sub_1C4DF8C5C(uint64_t a1, char a2, char a3, const llvm::APInt *a4)
{
  llvm::detail::DoubleAPFloat *v4;
  void *v5;

  v5 = *(void **)(a1 + 8);
  v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v5 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::makeNaN(v4, a2, a3, a4);
  else
    return llvm::detail::IEEEFloat::makeNaN((int **)v4, a2, a3, a4);
}

BOOL sub_1C4DF8C78(llvm::ConstrainedFPIntrinsic *a1, int a2)
{
  unsigned __int16 RoundingMode;
  unsigned __int16 ExceptionBehavior;

  RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode(a1);
  ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(a1);
  if (!a2)
    return 1;
  if (RoundingMode >= 0x100u && RoundingMode == 7)
    return 0;
  return ExceptionBehavior > 0xFFu && ExceptionBehavior != 2;
}

llvm::detail::DoubleAPFloat *sub_1C4DF8CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  llvm::detail::DoubleAPFloat *v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  llvm::detail::DoubleAPFloat *v13;
  const llvm::detail::DoubleAPFloat *v14;
  void *v15;
  llvm::detail::DoubleAPFloat *v17;

  v5 = (uint64_t *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1C866F1C0)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = a1;
  if ((*(_BYTE *)(v6 + 28) & 7) == 1)
  {
    v17 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    v5 = (uint64_t *)(a2 + 8);
    return sub_1C47A813C(v17, v5);
  }
  v8 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v9 = *(void **)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  if (v9 != &unk_1C866F1C0)
    v10 = a2;
  if ((*(_BYTE *)(v10 + 28) & 7) == 1)
  {
    v17 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    return sub_1C47A813C(v17, v5);
  }
  if (v9 == &unk_1C866F1C0)
    v11 = llvm::detail::DoubleAPFloat::compare(v8, (const llvm::detail::DoubleAPFloat *)v5);
  else
    llvm::detail::IEEEFloat::compare(v8, (const llvm::detail::IEEEFloat *)v5);
  if (v11)
    v12 = a1;
  else
    v12 = a2;
  v13 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  v15 = *(void **)(v12 + 8);
  v14 = (const llvm::detail::DoubleAPFloat *)(v12 + 8);
  if (v15 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v14);
  else
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t **)v14);
}

llvm::detail::DoubleAPFloat *sub_1C4DF8DC8@<X0>(llvm::detail::IEEEFloat *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  llvm::detail::IEEEFloat *v6;
  const llvm::detail::DoubleAPFloat *v7;
  _QWORD *v8;
  llvm::detail::DoubleAPFloat *v10;
  int v11;
  llvm::detail::IEEEFloat *v12;
  llvm::detail::DoubleAPFloat *v13;
  const llvm::detail::DoubleAPFloat *v14;
  void *v15;
  void *v16;

  v5 = (void *)*((_QWORD *)this + 1);
  v6 = (llvm::detail::IEEEFloat *)*((_QWORD *)this + 2);
  if (v5 != &unk_1C866F1C0)
    v6 = this;
  if ((*((_BYTE *)v6 + 28) & 7) == 1)
  {
    v13 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    v15 = (void *)a2[1];
    v14 = (const llvm::detail::DoubleAPFloat *)(a2 + 1);
  }
  else
  {
    v7 = (const llvm::detail::DoubleAPFloat *)(a2 + 1);
    if ((_UNKNOWN *)a2[1] == &unk_1C866F1C0)
      v8 = (_QWORD *)a2[2];
    else
      v8 = a2;
    if ((*((_BYTE *)v8 + 28) & 7) == 1)
      return sub_1C47A813C((llvm::detail::DoubleAPFloat *)(a3 + 8), (uint64_t *)this + 1);
    v10 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if (v5 == &unk_1C866F1C0)
      v11 = llvm::detail::DoubleAPFloat::compare(v10, v7);
    else
      llvm::detail::IEEEFloat::compare(v10, v7);
    if (v11)
      v12 = this;
    else
      v12 = (llvm::detail::IEEEFloat *)a2;
    v13 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    v16 = (void *)*((_QWORD *)v12 + 1);
    v14 = (llvm::detail::IEEEFloat *)((char *)v12 + 8);
    v15 = v16;
  }
  if (v15 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(v13, v14);
  else
    return (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v13, (uint64_t **)v14);
}

uint64_t *sub_1C4DF8EAC@<X0>(uint64_t *__return_ptr a1@<X8>, void **a2@<X0>, int a3@<W1>, int a4@<W2>)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *result;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  char v19;

  v7 = (uint64_t **)(a2 + 1);
  if (a2[1] == &unk_1C866F1C0)
  {
    result = llvm::detail::scalbn((uint64_t)(a2 + 1), &v10);
    *(_OWORD *)(a1 + 1) = v10;
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v11, v7);
    llvm::detail::scalbn(&v11, a3, a4, (uint64_t)v13);
    v8 = *v7;
    v16 = v13[0];
    v17 = (uint64_t *)v13[1];
    v18 = v14;
    v19 = v15 & 0xF;
    result = (uint64_t *)llvm::APFloat::Storage::Storage((uint64_t)(a1 + 1), &v16, v8);
    if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F)
    {
      result = v17;
      if (v17)
        result = (uint64_t *)MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
    if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F)
    {
      result = v12;
      if (v12)
        return (uint64_t *)MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    }
  }
  return result;
}

BOOL sub_1C4DF8FCC(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 79) < 0x28;
}

void sub_1C4DF901C(int a1@<W0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  llvm::APInt *v6;
  uint64_t v7;
  int v8;
  llvm::APInt *v10;
  llvm::APInt *v12;

  if (a1 > 305)
  {
    *((_DWORD *)a3 + 2) = a2;
    if (a2 <= 0x40)
    {
      *(_QWORD *)a3 = 0;
      return;
    }
    v6 = a3;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    if (a1 != 305)
    {
      if (a1 == 274)
      {
        *((_DWORD *)a3 + 2) = a2;
        if (a2 > 0x40)
        {
          v10 = a3;
          llvm::APInt::initSlowCase(a3, -1, 1);
          a3 = v10;
          LODWORD(v4) = a2 - 1;
          if (*((_DWORD *)v10 + 2) >= 0x41u)
            a3 = (llvm::APInt *)(*(_QWORD *)v10 + 8 * (v4 >> 6));
        }
        else
        {
          v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
          if (!a2)
            v4 = 0;
          *(_QWORD *)a3 = v4;
          LOBYTE(v4) = a2 - 1;
        }
        v3 = *(_QWORD *)a3 & ~(1 << v4);
      }
      else
      {
        *((_DWORD *)a3 + 2) = a2;
        if (a2 > 0x40)
        {
          v12 = a3;
          llvm::APInt::initSlowCase(a3, 0, 0);
          a3 = v12;
          v5 = a2 - 1;
          if (*((_DWORD *)v12 + 2) >= 0x41u)
            a3 = (llvm::APInt *)(*(_QWORD *)v12 + 8 * (v5 >> 6));
        }
        else
        {
          *(_QWORD *)a3 = 0;
          LOBYTE(v5) = a2 - 1;
        }
        v3 = (1 << v5) | *(_QWORD *)a3;
      }
      goto LABEL_6;
    }
    *((_DWORD *)a3 + 2) = a2;
    if (a2 <= 0x40)
    {
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2)
        v3 = 0;
LABEL_6:
      *(_QWORD *)a3 = v3;
      return;
    }
    v6 = a3;
    v7 = -1;
    v8 = 1;
  }
  llvm::APInt::initSlowCase(v6, v7, v8);
}

_QWORD *sub_1C4DF9184(_QWORD *a1, void *a2)
{
  if (a2 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&unk_1C866F1C0);
  else
    return llvm::detail::IEEEFloat::IEEEFloat(a1, (uint64_t)a2);
}

llvm::detail::IEEEFloat *sub_1C4DF91B8(llvm::detail::IEEEFloat *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  _BOOL4 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *(void **)this;
  v5 = *(void **)a2;
  if (*(_UNKNOWN **)this == &unk_1C866F1C0 || v5 == &unk_1C866F1C0)
  {
    if (v4 == &unk_1C866F1C0 && v5 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::operator=((uint64_t *)this, (uint64_t *)a2);
    }
    else if (this != (llvm::detail::IEEEFloat *)a2)
    {
      if (v4 == &unk_1C866F1C0)
        sub_1C4773C74((uint64_t *)this + 1);
      else
        llvm::detail::IEEEFloat::~IEEEFloat(this);
      v8 = *(_QWORD *)a2;
      if (*(_UNKNOWN **)a2 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(this, (const llvm::detail::DoubleAPFloat *)a2);
      }
      else
      {
        *(_QWORD *)this = v8;
        if ((*(_DWORD *)(v8 + 8) + 64) >= 0x80)
          *((_QWORD *)this + 1) = operator new[]();
        v9 = *((_BYTE *)this + 20) & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
        *((_BYTE *)this + 20) = v9;
        v10 = *(_BYTE *)(a2 + 20);
        v11 = v10 & 7;
        *((_BYTE *)this + 20) = v9 & 0xF8 | v10 & 7;
        *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 16);
        v13 = (v10 & 6) != 0 && v11 != 3;
        if (v11 == 1 || v13)
        {
          v14 = (_QWORD *)((char *)this + 8);
          v15 = *(unsigned int *)(*(_QWORD *)this + 8);
          if ((v15 - 64) <= 0xFFFFFF7F)
            v14 = (_QWORD *)*v14;
          v16 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
          v19 = *(uint64_t **)(a2 + 8);
          v18 = (uint64_t *)(a2 + 8);
          v17 = v19;
          if (v16 >= 0xFFFFFF80)
            v20 = v18;
          else
            v20 = v17;
          if (v15 <= 0xFFFFFFBF)
          {
            v21 = (unint64_t)(v15 + 64) >> 6;
            do
            {
              v22 = *v20++;
              *v14++ = v22;
              --v21;
            }
            while (v21);
          }
        }
      }
    }
  }
  else
  {
    llvm::detail::IEEEFloat::operator=(this, (_QWORD *)a2);
  }
  return this;
}

llvm::UndefValue *sub_1C4DF9348(uint64_t a1, uint64_t a2)
{
  llvm::Type *v3;
  uint64_t i;
  llvm::UndefValue *v5;
  _QWORD v7[10];

  v7[9] = *MEMORY[0x1E0C80C00];
  v3 = *(llvm::Type **)(a1 + 8);
  v7[0] = 1;
  for (i = 1; i != 9; i += 2)
    v7[i] = -4096;
  v5 = sub_1C4DEC528(a2, v3, 0, (uint64_t)v7);
  if ((v7[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v7[1], 8);
  return v5;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::moveTopLevelCycleToNewParent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void **v58;

  if (*a3)
    v6 = (uint64_t **)(*a3 + 32);
  else
    v6 = (uint64_t **)(a1 + 56);
  v8 = *v6;
  v7 = v6[1];
  if (*v6 != v7)
  {
    while ((_QWORD *)*v8 != a3)
    {
      if (++v8 == v7)
      {
        v8 = v6[1];
        break;
      }
    }
  }
  v9 = *(uint64_t **)(a2 + 40);
  if ((unint64_t)v9 >= *(_QWORD *)(a2 + 48))
  {
    v11 = sub_1C4DFBB74((char **)(a2 + 32), v8);
  }
  else
  {
    v10 = *v8;
    *v8 = 0;
    *v9 = v10;
    v11 = (char *)(v9 + 1);
  }
  *(_QWORD *)(a2 + 40) = v11;
  v12 = v6[1];
  v13 = *(v12 - 1);
  *(v12 - 1) = 0;
  v14 = *v8;
  *v8 = v13;
  if (v14)
  {
    v15 = *(void **)(v14 + 56);
    if (v15)
    {
      *(_QWORD *)(v14 + 64) = v15;
      operator delete(v15);
    }
    v58 = (void **)(v14 + 32);
    sub_1C4DFB9EC(&v58);
    v16 = *(void **)(v14 + 8);
    if (v16 != (void *)(v14 + 24))
      free(v16);
    MEMORY[0x1CAA32FC0](v14, 0x10A0C40B2354FA7);
  }
  sub_1C4DFBAAC((uint64_t)v6, v6[1] - 1);
  *a3 = a2;
  v18 = (char *)a3[7];
  v17 = (char *)a3[8];
  if (v17 - v18 >= 1)
  {
    v19 = (v17 - v18) >> 3;
    v21 = *(_QWORD *)(a2 + 56);
    v20 = *(uint64_t **)(a2 + 64);
    v22 = (uint64_t)v20 - v21;
    v23 = (char *)(v21 + (((unint64_t)v20 - v21) & 0xFFFFFFFFFFFFFFF8));
    v24 = *(_QWORD *)(a2 + 72);
    if (v19 > (v24 - (uint64_t)v20) >> 3)
    {
      v25 = v22 >> 3;
      v26 = (v22 >> 3) + v19;
      if (v26 >> 61)
        abort();
      v27 = v24 - v21;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          sub_1C4764EE4();
        v29 = (char *)operator new(8 * v28);
        v23 = (char *)(v21 + (((unint64_t)v20 - v21) & 0xFFFFFFFFFFFFFFF8));
        v25 = v22 >> 3;
      }
      else
      {
        v29 = 0;
      }
      v40 = &v29[8 * v25];
      v41 = &v40[8 * v19];
      v42 = 8 * v19;
      v43 = v40;
      do
      {
        v44 = *(_QWORD *)v18;
        v18 += 8;
        *(_QWORD *)v43 = v44;
        v43 += 8;
        v42 -= 8;
      }
      while (v42);
      if ((unint64_t)v22 >= 8)
      {
        v45 = 8 * v25;
        do
        {
          *(_QWORD *)&v29[v45 - 8] = *(_QWORD *)(v21 - 8 + v45);
          v45 -= 8;
        }
        while (v45);
        v20 = *(uint64_t **)(a2 + 64);
        v40 = v29;
      }
      v46 = &v29[8 * v28];
      v47 = (char *)v20 - v23;
      if (v20 != (uint64_t *)v23)
      {
        v48 = (char *)v20 - v23;
        v49 = v41;
        memmove(v41, v23, v48);
        v41 = v49;
      }
      v50 = *(void **)(a2 + 56);
      *(_QWORD *)(a2 + 56) = v40;
      *(_QWORD *)(a2 + 64) = &v41[v47];
      *(_QWORD *)(a2 + 72) = v46;
      if (v50)
        operator delete(v50);
      goto LABEL_52;
    }
    v30 = (char *)v20 - v23;
    v31 = ((char *)v20 - v23) >> 3;
    if (v31 >= v19)
    {
      v32 = &v18[8 * v19];
      v34 = *(char **)(a2 + 64);
    }
    else
    {
      v32 = &v18[8 * v31];
      v33 = v17 - v32;
      if (v17 != v32)
      {
        memmove(*(void **)(a2 + 64), &v18[8 * v31], v17 - v32);
        v23 = (char *)(v21 + (((unint64_t)v20 - v21) & 0xFFFFFFFFFFFFFFF8));
      }
      v34 = (char *)v20 + v33;
      *(_QWORD *)(a2 + 64) = (char *)v20 + v33;
      if (v30 < 1)
        goto LABEL_52;
    }
    v35 = &v23[8 * v19];
    v36 = (uint64_t *)&v34[-8 * v19];
    v37 = v34;
    if (v36 < v20)
    {
      v37 = v34;
      do
      {
        v38 = *v36++;
        *(_QWORD *)v37 = v38;
        v37 += 8;
      }
      while (v36 < v20);
    }
    *(_QWORD *)(a2 + 64) = v37;
    if (v34 != v35)
    {
      v39 = v23;
      memmove(&v34[-8 * ((v34 - v35) >> 3)], v23, v34 - v35);
      v23 = v39;
    }
    if (v32 != v18)
      memmove(v23, v18, v32 - v18);
  }
LABEL_52:
  v51 = *(_QWORD *)(a1 + 32);
  v52 = *(unsigned int *)(a1 + 48);
  v53 = (_QWORD *)(v51 + 16 * v52);
  if (*(_DWORD *)(a1 + 40))
  {
    if ((_DWORD)v52)
    {
      v54 = 16 * v52;
      v55 = *(_QWORD **)(a1 + 32);
      while ((*v55 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v55 += 2;
        v54 -= 16;
        if (!v54)
          goto LABEL_57;
      }
    }
    else
    {
      v55 = *(_QWORD **)(a1 + 32);
    }
  }
  else
  {
LABEL_57:
    v55 = (_QWORD *)(v51 + 16 * v52);
  }
  v56 = (_QWORD *)(v51 + 16 * v52);
LABEL_60:
  while (v55 != v56)
  {
    if ((_QWORD *)v55[1] == a3)
      v55[1] = a2;
    v57 = v55 + 2;
    v55 = v53;
    if (v57 != v53)
    {
      v55 = v57;
      while ((*v55 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v55 += 2;
        if (v55 == v53)
        {
          v55 = v53;
          goto LABEL_60;
        }
      }
    }
  }
}

{
  __ZN4llvm16GenericCycleInfoINS_17GenericSSAContextINS_8FunctionEEEE28moveTopLevelCycleToNewParentEPNS_12GenericCycleIS3_EES7_(a1, a2, a3);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::block_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::block_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_DWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::clear(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  sub_1C4DFBAAC(a1 + 56, *(_QWORD **)(a1 + 56));
  sub_1C4DF97D0((_DWORD *)(v1 - 48));
  return sub_1C4DF97D0((_DWORD *)(v1 - 24));
}

_DWORD *sub_1C4DF97D0(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_10:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = 16 * v3;
        v7 = *(_QWORD **)result;
        do
        {
          *v7 = -4096;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
        if (v5)
        {
          v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          result = operator new(16 * v11, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v12 = v1[4];
          if ((_DWORD)v12)
          {
            v13 = 16 * v12;
            do
            {
              *(_QWORD *)result = -4096;
              result += 4;
              v13 -= 16;
            }
            while (v13);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_10;
    }
  }
  if (v3)
  {
    v8 = *(_QWORD **)result;
    v9 = 16 * v3;
    do
    {
      *v8 = -4096;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute(char **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *TopLevelParentCycle;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  void **v58;
  _BYTE *v59;
  void **v60;
  int v61;
  unsigned int v62;
  const void *v63;
  _BYTE *v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  BOOL v72;
  _DWORD *v73;
  int v74;
  int v75;
  unsigned int v76;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  _BYTE v89[64];
  char *v90;
  char *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  int v95;
  int v96;
  int v97;
  _BYTE v98[64];
  void *__p;
  char *v100;
  uint64_t v101;
  void **v102;
  void **v103;
  void **v104;
  _QWORD **v105;
  void *v106;
  _BYTE *v107;
  void *v108;
  void *v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  void *v113;
  _BYTE *v114;
  char **v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  void *v119;
  uint64_t v120;
  _BYTE v121[64];
  _QWORD *v122;
  uint64_t v123;
  _QWORD v124[10];

  v124[8] = *MEMORY[0x1E0C80C00];
  v117 = 0;
  v115 = a1;
  v116 = 0;
  v118 = 0;
  v119 = v121;
  v120 = 0x800000000;
  *a1 = (char *)a2;
  v2 = *(_QWORD *)(a2 + 80);
  if (v2)
    v3 = v2 - 24;
  else
    v3 = 0;
  sub_1C61879A8((uint64_t)&v115, v3);
  v122 = v124;
  v123 = 0x800000000;
  if ((_DWORD)v120)
  {
    v4 = (char *)v119;
    v5 = (char *)v119 + 8 * v120;
    do
    {
      v7 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      v6 = v7;
      v84 = (_BYTE *)v7;
      v102 = 0;
      v8 = sub_1C6144BDC(v116, v118, v7, &v102);
      v9 = 0;
      if (v8)
        v9 = v102[1];
      v83 = v9;
      v10 = *(_QWORD *)(v6 + 8);
      if (v10)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 24);
          v12 = *(unsigned __int8 *)(v11 + 16);
          v13 = v11 && v12 >= 0x1C;
          if (v13 && v12 - 29 <= 0xA)
            break;
          v10 = *(_QWORD *)(v10 + 8);
          if (!v10)
            goto LABEL_18;
        }
LABEL_21:
        v15 = *(_QWORD *)(v11 + 40);
        v102 = 0;
        v16 = sub_1C6144BDC(v116, v118, v15, &v102);
        v17 = 0;
        if (v16)
          v17 = v102[1];
        if (v83 <= v17 && HIDWORD(v83) >= HIDWORD(v17))
        {
          v19 = v123;
          if (v123 >= (unint64_t)HIDWORD(v123))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v124, v123 + 1, 8);
            v19 = v123;
          }
          v122[v19] = v15;
          LODWORD(v123) = v123 + 1;
        }
        while (1)
        {
          v10 = *(_QWORD *)(v10 + 8);
          if (!v10)
            break;
          v11 = *(_QWORD *)(v10 + 24);
          v20 = *(unsigned __int8 *)(v11 + 16);
          if (v11)
            v21 = v20 >= 0x1C;
          else
            v21 = 0;
          if (v21 && v20 - 29 < 0xB)
            goto LABEL_21;
        }
      }
LABEL_18:
      if ((_DWORD)v123)
      {
        v23 = (_QWORD *)operator new();
        *(_OWORD *)v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        v23[10] = 0;
        *((_OWORD *)v23 + 2) = 0u;
        *((_OWORD *)v23 + 3) = 0u;
        *((_OWORD *)v23 + 4) = 0u;
        v23[3] = v6;
        v23[1] = v23 + 3;
        *((_DWORD *)v23 + 20) = 0;
        v82 = v23;
        v23[2] = 0x100000001;
        v24 = operator new(8uLL);
        *v24 = v6;
        v23[7] = v24;
        v23[8] = v24 + 1;
        v23[9] = v24 + 1;
        v93 = v23;
        sub_1C6187718((uint64_t)&v102, (uint64_t)(v115 + 1), (uint64_t *)&v84, &v93);
        v102 = (void **)&v115;
        v103 = &v83;
        v104 = (void **)&v122;
        v105 = &v82;
        v25 = v123;
        do
        {
          while (1)
          {
            v26 = v122[--v25];
            LODWORD(v123) = v25;
            v81 = v26;
            if ((_BYTE *)v26 != v84)
              break;
            if (!v25)
              goto LABEL_69;
          }
          TopLevelParentCycle = llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getTopLevelParentCycle((uint64_t)v115, v26);
          if (TopLevelParentCycle)
          {
            v28 = TopLevelParentCycle;
            if (TopLevelParentCycle != v82)
            {
              llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::moveTopLevelCycleToNewParent((uint64_t)v115, (uint64_t)v82, TopLevelParentCycle);
              v29 = *((unsigned int *)v28 + 4);
              if ((_DWORD)v29)
              {
                v30 = (uint64_t *)v28[1];
                v31 = 8 * v29;
                do
                {
                  v32 = *v30++;
                  sub_1C4DFBCC4(&v102, v32);
                  v31 -= 8;
                }
                while (v31);
              }
            }
          }
          else
          {
            v80 = v82;
            sub_1C6187718((uint64_t)&v93, (uint64_t)(v115 + 1), &v81, &v80);
            v33 = v82;
            v35 = (uint64_t *)v82[8];
            v34 = v82[9];
            if ((unint64_t)v35 >= v34)
            {
              v37 = (_QWORD *)v82[7];
              v38 = v35 - v37;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 61)
                abort();
              v40 = v34 - (_QWORD)v37;
              if (v40 >> 2 > v39)
                v39 = v40 >> 2;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v79 = v82;
                if (v41 >> 61)
                  sub_1C4764EE4();
                v78 = v41;
                v42 = (char *)operator new(8 * v41);
                v41 = v78;
                v38 = v35 - v37;
                v33 = v79;
              }
              else
              {
                v42 = 0;
              }
              v43 = (uint64_t *)&v42[8 * v38];
              *v43 = v26;
              v36 = v43 + 1;
              if (v35 != v37)
              {
                do
                {
                  v44 = *--v35;
                  *--v43 = v44;
                }
                while (v35 != v37);
                v35 = (uint64_t *)v33[7];
              }
              v33[7] = v43;
              v33[8] = v36;
              v33[9] = &v42[8 * v41];
              if (v35)
              {
                v45 = v35;
                v46 = v33;
                v47 = v36;
                operator delete(v45);
                v36 = v47;
                v33 = v46;
              }
            }
            else
            {
              *v35 = v26;
              v36 = v35 + 1;
            }
            v33[8] = v36;
            sub_1C4DFBCC4(&v102, v81);
            v80 = v82;
            sub_1C6187718((uint64_t)&v93, (uint64_t)(v115 + 4), &v81, &v80);
          }
          v25 = v123;
        }
        while ((_DWORD)v123);
LABEL_69:
        v48 = (uint64_t)v115;
        v49 = v115[8];
        if (v49 >= v115[9])
        {
          v51 = sub_1C4DFBB74(v115 + 7, (uint64_t *)&v82);
        }
        else
        {
          v50 = v82;
          v82 = 0;
          *(_QWORD *)v49 = v50;
          v51 = v49 + 8;
        }
        *(_QWORD *)(v48 + 64) = v51;
        v52 = v82;
        v82 = 0;
        if (v52)
        {
          v53 = (void *)v52[7];
          if (v53)
          {
            v52[8] = v53;
            operator delete(v53);
          }
          v102 = (void **)(v52 + 4);
          sub_1C4DFB9EC(&v102);
          v54 = (_QWORD *)v52[1];
          if (v54 != v52 + 3)
            free(v54);
          MEMORY[0x1CAA32FC0](v52, 0x10A0C40B2354FA7);
        }
      }
    }
    while (v5 != v4);
  }
  v55 = v115[7];
  v56 = v115[8];
  if (v55 == v56)
    goto LABEL_140;
  do
  {
    v57 = *(_QWORD **)v55;
    *v57 = 0;
    sub_1C61877B0(&v102, (uint64_t)v57);
    v93 = v98;
    v58 = v103;
    if (v103 == v102)
    {
      v94 = v98;
      v59 = v98;
      v60 = v103;
    }
    else
    {
      v75 = (int)v104;
      v59 = malloc_type_malloc(8 * v104, 0x4065EBACuLL);
      if (!v59 && (v75 || (v59 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_139:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v94 = v59;
      v60 = v102;
      v58 = v103;
    }
    v61 = HIDWORD(v104);
    v95 = (int)v104;
    if (v58 == v60)
      v62 = HIDWORD(v104);
    else
      v62 = v104;
    if (v62)
    {
      memmove(v59, v58, 8 * v62);
      v61 = HIDWORD(v104);
    }
    v96 = v61;
    v97 = (int)v105;
    v100 = 0;
    v101 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v106, v107, 0xAAAAAAAAAAAAAAABLL * ((v107 - (_BYTE *)v106) >> 3));
    v84 = v89;
    v63 = v109;
    if (v109 == v108)
    {
      v85 = v89;
      v64 = v89;
      v65 = v109;
    }
    else
    {
      v76 = v110;
      v64 = malloc_type_malloc(8 * v110, 0x4065EBACuLL);
      if (!v64)
      {
        if (v76)
          goto LABEL_139;
        v64 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v64)
          goto LABEL_139;
      }
      v85 = v64;
      v65 = v108;
      v63 = v109;
    }
    v66 = v111;
    v86 = v110;
    if (v63 == v65)
      v67 = v111;
    else
      v67 = v110;
    if (v67)
    {
      memmove(v64, v63, 8 * v67);
      v66 = v111;
    }
    v87 = v66;
    v88 = v112;
    v91 = 0;
    v92 = 0;
    v90 = 0;
    sub_1C4D6CDA0(&v90, v113, v114, 0xAAAAAAAAAAAAAAABLL * ((v114 - (_BYTE *)v113) >> 3));
    while (1)
    {
      if (v100 - (_BYTE *)__p != v91 - v90)
        goto LABEL_108;
      if (__p == v100)
        break;
      v68 = v90 + 8;
      v69 = (char *)__p + 8;
      while (1)
      {
        v70 = v69 - 8;
        if (*((_QWORD *)v69 - 1) != *((_QWORD *)v68 - 1))
          break;
        v71 = v68[8];
        if (v69[8])
          v72 = v71 == 0;
        else
          v72 = 1;
        if (v72)
        {
          if ((v69[8] == 0) == (v71 != 0))
            break;
        }
        else if (*(_QWORD *)v69 != *(_QWORD *)v68)
        {
          break;
        }
        v68 += 24;
        v69 += 24;
        if (v70 + 24 == v100)
          goto LABEL_112;
      }
LABEL_108:
      v73 = (_DWORD *)*((_QWORD *)v100 - 3);
      if (*(_QWORD *)v73)
        v74 = *(_DWORD *)(*(_QWORD *)v73 + 80) + 1;
      else
        v74 = 1;
      v73[20] = v74;
      sub_1C6187ED4((char *)&v93);
    }
LABEL_112:
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    if (v85 != v84)
      free(v85);
    if (__p)
    {
      v100 = (char *)__p;
      operator delete(__p);
    }
    if (v94 != v93)
      free(v94);
    if (v113)
    {
      v114 = v113;
      operator delete(v113);
    }
    if (v109 != v108)
      free(v109);
    if (v106)
    {
      v107 = v106;
      operator delete(v106);
    }
    if (v103 != v102)
      free(v103);
    v55 += 8;
  }
  while (v55 != v56);
LABEL_140:
  if (v122 != v124)
    free(v122);
  if (v119 != v121)
    free(v119);
  return MEMORY[0x1CAA32FB4](v116, 8);
}

{
  return __ZN4llvm16GenericCycleInfoINS_17GenericSSAContextINS_8FunctionEEEE7computeERS2_(a1, a2);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getFunction(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getCycle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 24);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getCycleDepth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, &v8))
  {
    v3 = v8;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 24);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  v6 = *(_QWORD *)(v3 + 8);
  if (!v6)
    return 0;
  else
    return *(unsigned int *)(v6 + 80);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getDepth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::validateTree(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  const void *v4;
  _BYTE *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  _BYTE *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  _BYTE v63[64];
  void *__p;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  _BYTE v72[64];
  void *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  void *v81;
  _BYTE *v82;
  void *v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  void *v88;
  _BYTE *v89;
  _QWORD v90[2];
  int v91;
  _QWORD v92[2];
  int v93;
  _QWORD v94[2];
  char v95;

  v92[0] = 0;
  v92[1] = 0;
  v93 = 0;
  v90[0] = 0;
  v90[1] = 0;
  v91 = 0;
  v3 = *(uint64_t **)(a1 + 56);
  v2 = *(uint64_t **)(a1 + 64);
  while (v3 != v2)
  {
    sub_1C61877B0(&v76, *v3);
    v67 = v72;
    v4 = v77;
    if (v77 == v76)
    {
      v68 = v72;
      v5 = v72;
      v6 = v77;
    }
    else
    {
      v43 = v78;
      v5 = malloc_type_malloc(8 * v78, 0x4065EBACuLL);
      if (!v5 && (v43 || (v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_105:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v68 = v5;
      v6 = v76;
      v4 = v77;
    }
    v7 = v79;
    v69 = v78;
    if (v4 == v6)
      v8 = v79;
    else
      v8 = v78;
    if (v8)
    {
      memmove(v5, v4, 8 * v8);
      v7 = v79;
    }
    v70 = v7;
    v71 = v80;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    sub_1C4D6CDA0(&v73, v81, v82, 0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)v81) >> 3));
    v58 = v63;
    v9 = v84;
    if (v84 == v83)
    {
      v59 = v63;
      v10 = v63;
      v11 = v84;
    }
    else
    {
      v44 = v85;
      v10 = malloc_type_malloc(8 * v85, 0x4065EBACuLL);
      if (!v10)
      {
        if (v44)
          goto LABEL_105;
        v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v10)
          goto LABEL_105;
      }
      v59 = v10;
      v11 = v83;
      v9 = v84;
    }
    v12 = v86;
    v60 = v85;
    if (v9 == v11)
      v13 = v86;
    else
      v13 = v85;
    if (v13)
    {
      memmove(v10, v9, 8 * v13);
      v12 = v86;
    }
    v61 = v12;
    v62 = v87;
    v65 = 0;
    v66 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v88, v89, 0xAAAAAAAAAAAAAAABLL * ((v89 - (_BYTE *)v88) >> 3));
    while (2)
    {
      if (v74 - (_BYTE *)v73 == v65 - (_BYTE *)__p)
      {
        if (v73 == v74)
        {
LABEL_69:
          v40 = 1;
          goto LABEL_72;
        }
        v14 = (char *)__p + 8;
        v15 = (char *)v73 + 8;
        while (1)
        {
          v16 = v15 - 8;
          if (*((_QWORD *)v15 - 1) != *((_QWORD *)v14 - 1))
            break;
          v17 = v14[8];
          if (v15[8])
            v18 = v17 == 0;
          else
            v18 = 1;
          if (v18)
          {
            if ((v15[8] == 0) == (v17 != 0))
              break;
          }
          else if (*(_QWORD *)v15 != *(_QWORD *)v14)
          {
            break;
          }
          v14 += 24;
          v15 += 24;
          if (v16 + 24 == v74)
            goto LABEL_69;
        }
      }
      v19 = (uint64_t *)*((_QWORD *)v74 - 3);
      v20 = *v19;
      if (*v19)
      {
        v21 = *(uint64_t ***)(v20 + 32);
        v22 = *(uint64_t ***)(v20 + 40);
        while (v21 != v22)
        {
          if (*v21 == v19)
            goto LABEL_36;
          ++v21;
        }
        v41 = 416;
        v42 = "is_contained(Cycle->ParentCycle->children(), Cycle)";
      }
      else
      {
LABEL_36:
        v23 = (uint64_t *)v19[7];
        v24 = (uint64_t *)v19[8];
        while (v23 != v24)
        {
          v57 = 0;
          v57 = *v23;
          v94[0] = 0;
          if (sub_1C6144BDC(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), v57, v94))
          {
            v25 = v94[0];
            v26 = *(_QWORD *)(a1 + 8);
            v27 = *(unsigned int *)(a1 + 24);
          }
          else
          {
            v26 = *(_QWORD *)(a1 + 8);
            v27 = *(unsigned int *)(a1 + 24);
            v25 = v26 + 16 * v27;
          }
          if (v25 == v26 + 16 * v27)
          {
            v41 = 420;
            v42 = "MapIt != BlockMap.end()";
            goto LABEL_71;
          }
          v28 = *(uint64_t **)(v25 + 8);
          if (!v28)
            goto LABEL_68;
          v29 = *((_DWORD *)v19 + 20);
          v30 = *((_DWORD *)v28 + 20);
          if (v29 > v30)
            goto LABEL_68;
          if (v29 < v30)
          {
            do
              v28 = (uint64_t *)*v28;
            while (v29 < *((_DWORD *)v28 + 20));
          }
          if (v28 != v19)
          {
LABEL_68:
            v41 = 421;
            v42 = "Cycle->contains(MapIt->second)";
            goto LABEL_71;
          }
          sub_1C6187FB8(v92, &v57, (uint64_t)v94);
          if (!v95)
          {
            v41 = 422;
            v42 = "Blocks.insert(Block).second";
            goto LABEL_71;
          }
          ++v23;
        }
        sub_1C4DFC0E4(v92);
        v31 = *((unsigned int *)v19 + 4);
        if ((_DWORD)v31)
        {
          v32 = (uint64_t *)v19[1];
          v33 = &v32[v31];
          do
          {
            v57 = 0;
            v57 = *v32;
            sub_1C6187FB8(v90, &v57, (uint64_t)v94);
            if (!v95)
            {
              v41 = 428;
              v42 = "Entries.insert(Entry).second";
              goto LABEL_71;
            }
            v34 = (_QWORD *)v19[7];
            v35 = (_QWORD *)v19[8];
            if (v34 != v35)
            {
              while (*v34 != v57)
              {
                if (++v34 == v35)
                {
                  v34 = (_QWORD *)v19[8];
                  break;
                }
              }
            }
            if (v34 == v35)
            {
              v41 = 429;
              v42 = "is_contained(Cycle->Blocks, Entry)";
              goto LABEL_71;
            }
            ++v32;
          }
          while (v32 != v33);
          sub_1C4DFC0E4(v90);
          v36 = v19[4];
          v37 = v19[5];
          if (v36 == v37)
          {
LABEL_66:
            sub_1C6187ED4((char *)&v67);
            continue;
          }
          v38 = 0;
          while (1)
          {
            v39 = *(_DWORD *)(*(_QWORD *)v36 + 80);
            if (v39 <= *((_DWORD *)v19 + 20))
              break;
            if (v38)
            {
              if (v38 != v39)
              {
                v41 = 439;
                v42 = "ChildDepth == Child->Depth";
                goto LABEL_71;
              }
            }
            else
            {
              v38 = *(_DWORD *)(*(_QWORD *)v36 + 80);
            }
            v36 += 8;
            if (v36 == v37)
              goto LABEL_66;
          }
          v41 = 435;
          v42 = "Child->Depth > Cycle->Depth";
        }
        else
        {
          v41 = 426;
          v42 = "!Cycle->Entries.empty()";
        }
      }
      break;
    }
LABEL_71:
    sub_1C4DFA8B0((llvm *)v41, v42);
    v40 = 0;
LABEL_72:
    if (__p)
    {
      v65 = __p;
      operator delete(__p);
    }
    if (v59 != v58)
      free(v59);
    if (v73)
    {
      v74 = (char *)v73;
      operator delete(v73);
    }
    if (v68 != v67)
      free(v68);
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v84 != v83)
      free(v84);
    if (v81)
    {
      v82 = v81;
      operator delete(v81);
    }
    if (v77 != v76)
      free(v77);
    if ((v40 & 1) == 0)
    {
LABEL_128:
      v55 = 0;
      goto LABEL_130;
    }
    ++v3;
  }
  v45 = *(_QWORD *)(a1 + 8);
  v46 = *(unsigned int *)(a1 + 24);
  v47 = (_QWORD *)(v45 + 16 * v46);
  if (*(_DWORD *)(a1 + 16))
  {
    if ((_DWORD)v46)
    {
      v48 = 16 * v46;
      v49 = *(_QWORD **)(a1 + 8);
      while ((*v49 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v49 += 2;
        v48 -= 16;
        if (!v48)
          goto LABEL_111;
      }
    }
    else
    {
      v49 = *(_QWORD **)(a1 + 8);
    }
  }
  else
  {
LABEL_111:
    v49 = (_QWORD *)(v45 + 16 * v46);
  }
  v50 = (_QWORD *)(v45 + 16 * v46);
LABEL_114:
  while (v49 != v50)
  {
    v51 = v49 + 1;
    while (1)
    {
      v51 = (_QWORD *)*v51;
      if (!v51)
        break;
      v52 = (_QWORD *)v51[7];
      v53 = (_QWORD *)v51[8];
      if (v52 != v53)
      {
        while (*v52 != *v49)
        {
          if (++v52 == v53)
          {
            v52 = (_QWORD *)v51[8];
            break;
          }
        }
      }
      if (v52 == v53)
      {
        sub_1C4DFA8B0((llvm *)0x1C1, "is_contained(Cycle->Blocks, Block)");
        goto LABEL_128;
      }
    }
    v54 = v49 + 2;
    v49 = v47;
    if (v54 != v47)
    {
      while ((*v54 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v54 += 2;
        if (v54 == v47)
        {
          v49 = v47;
          goto LABEL_114;
        }
      }
      v49 = v54;
    }
  }
  v55 = 1;
LABEL_130:
  MEMORY[0x1CAA32FB4](v90[0], 8);
  MEMORY[0x1CAA32FB4](v92[0], 8);
  return v55;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::toplevel_cycles(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::const_toplevel_iterator::operator*(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::children(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

llvm::raw_ostream *sub_1C4DFA8B0(llvm *a1, const char *a2)
{
  unsigned int v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  void *v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;

  v3 = a1;
  v4 = (llvm::raw_ostream *)llvm::errs(a1);
  v5 = v4;
  v6 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 0x5DuLL)
  {
    qmemcpy(v6, "/Library/Caches/com.apple.xbs/Sources/llvmCore_Device/llvm/include/llvm/ADT/GenericCycleImpl.h", 94);
    v7 = (_BYTE *)(*((_QWORD *)v4 + 4) + 94);
    *((_QWORD *)v4 + 4) = v7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "/Library/Caches/com.apple.xbs/Sources/llvmCore_Device/llvm/include/llvm/ADT/GenericCycleImpl.h", 0x5EuLL);
    v7 = (_BYTE *)*((_QWORD *)v5 + 4);
  }
  if ((unint64_t)v7 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 58);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v7 + 1;
    *v7 = 58;
  }
  result = sub_1C5E21910(v5, v3, 0, 0, 0);
  v9 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v9 > 0x21uLL)
  {
    qmemcpy(v9, ": GenericCycleInfo::validateTree: ", 34);
    v10 = (_BYTE *)(*((_QWORD *)v5 + 4) + 34);
    *((_QWORD *)v5 + 4) = v10;
    if (!a2)
      goto LABEL_10;
  }
  else
  {
    result = llvm::raw_ostream::write(v5, ": GenericCycleInfo::validateTree: ", 0x22uLL);
    v10 = (_BYTE *)*((_QWORD *)v5 + 4);
    if (!a2)
      goto LABEL_10;
  }
  result = (llvm::raw_ostream *)strlen(a2);
  v11 = result;
  if ((unint64_t)result <= *((_QWORD *)v5 + 3) - (_QWORD)v10)
  {
    if (result)
    {
      result = (llvm::raw_ostream *)memcpy(v10, a2, (size_t)result);
      v10 = (char *)v11 + *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = v10;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(v5, a2, (size_t)result);
    v10 = (_BYTE *)*((_QWORD *)v5 + 4);
  }
LABEL_10:
  if ((unint64_t)v10 >= *((_QWORD *)v5 + 3))
    return llvm::raw_ostream::write(v5, 10);
  *((_QWORD *)v5 + 4) = v10 + 1;
  *v10 = 10;
  return result;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::contains(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  unsigned int v3;

  if (!a2)
    return 0;
  v2 = *(_DWORD *)(a1 + 80);
  v3 = *((_DWORD *)a2 + 20);
  if (v2 > v3)
    return 0;
  if (v2 < v3)
  {
    do
      a2 = (uint64_t *)*a2;
    while (v2 < *((_DWORD *)a2 + 20));
  }
  return a2 == (uint64_t *)a1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::const_child_iterator::operator*(uint64_t a1)
{
  return **(_QWORD **)a1;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  const void *v6;
  _BYTE *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  const void *v11;
  _BYTE *v12;
  void *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t (***v25)();
  void (**v26)(uint64_t (***)());
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  _BYTE *v30;
  _BYTE v31[64];
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  _BYTE v40[64];
  void *__p;
  char *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  void *v49;
  _BYTE *v50;
  void *v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  void *v55;
  _BYTE *v56;
  uint64_t (**v57)();
  uint64_t v58[2];
  uint64_t (***v59)();
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 56);
  v3 = *(uint64_t **)(a1 + 64);
  if (v2 == v3)
    return;
  v5 = a1;
  do
  {
    sub_1C61877B0(&v44, *v2);
    v35 = v40;
    v6 = v45;
    if (v45 == v44)
    {
      v36 = v40;
      v7 = v40;
      v8 = v45;
    }
    else
    {
      v27 = v46;
      v7 = malloc_type_malloc(8 * v46, 0x4065EBACuLL);
      if (!v7 && (v27 || (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_75:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v36 = v7;
      v8 = v44;
      v6 = v45;
    }
    v9 = v47;
    v37 = v46;
    if (v6 == v8)
      v10 = v47;
    else
      v10 = v46;
    if (v10)
    {
      memmove(v7, v6, 8 * v10);
      v9 = v47;
    }
    v38 = v9;
    v39 = v48;
    v42 = 0;
    v43 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v49, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - (_BYTE *)v49) >> 3));
    v11 = v52;
    if (v52 == v51)
    {
      v30 = v31;
      v12 = v31;
      v13 = v52;
    }
    else
    {
      v28 = v53;
      v12 = malloc_type_malloc(8 * v53, 0x4065EBACuLL);
      if (!v12)
      {
        if (v28)
          goto LABEL_75;
        v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v12)
          goto LABEL_75;
      }
      v30 = v12;
      v13 = v51;
      v11 = v52;
    }
    if (v11 == v13)
      v14 = v54;
    else
      v14 = v53;
    if (v14)
      memmove(v12, v11, 8 * v14);
    v33 = 0;
    v34 = 0;
    v32 = 0;
    sub_1C4D6CDA0(&v32, v55, v56, 0xAAAAAAAAAAAAAAABLL * ((v56 - (_BYTE *)v55) >> 3));
    while (1)
    {
      if (v42 - (_BYTE *)__p != v33 - v32)
        goto LABEL_32;
      if (__p == v42)
        break;
      v15 = v32 + 8;
      v16 = (char *)__p + 8;
      while (1)
      {
        v17 = v16 - 8;
        if (*((_QWORD *)v16 - 1) != *((_QWORD *)v15 - 1))
          break;
        v18 = v15[8];
        if (v16[8])
          v19 = v18 == 0;
        else
          v19 = 1;
        if (v19)
        {
          if ((v16[8] == 0) == (v18 != 0))
            break;
        }
        else if (*(_QWORD *)v16 != *(_QWORD *)v15)
        {
          break;
        }
        v15 += 24;
        v16 += 24;
        if (v17 + 24 == v42)
          goto LABEL_48;
      }
LABEL_32:
      v29 = v3;
      v20 = v5;
      v21 = *((_QWORD *)v42 - 3);
      if (*(_DWORD *)(v21 + 80))
      {
        v23 = 0;
        do
        {
          v24 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 3uLL)
          {
            *v24 = 538976288;
            *((_QWORD *)a2 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a2, "    ", 4uLL);
          }
          ++v23;
        }
        while (v23 < *(_DWORD *)(v21 + 80));
      }
      v57 = &off_1E8135E78;
      v58[0] = v21;
      v58[1] = v20;
      v59 = &v57;
      v5 = v20;
      sub_1C618830C(v58, a2);
      v22 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v22 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v22 + 1;
        *v22 = 10;
      }
      v3 = v29;
      v25 = v59;
      if (v59 == &v57)
      {
        v26 = (void (**)(uint64_t (***)()))(v57 + 4);
        v25 = &v57;
      }
      else
      {
        if (!v59)
          goto LABEL_47;
        v26 = (void (**)(uint64_t (***)()))(*v59 + 5);
      }
      (*v26)(v25);
LABEL_47:
      sub_1C6187ED4((char *)&v35);
    }
LABEL_48:
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    if (v30 != v31)
      free(v30);
    if (__p)
    {
      v42 = (char *)__p;
      operator delete(__p);
    }
    if (v36 != v35)
      free(v36);
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    if (v52 != v51)
      free(v52);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v45 != v44)
      free(v45);
    ++v2;
  }
  while (v2 != v3);
}

{
  __ZNK4llvm16GenericCycleInfoINS_17GenericSSAContextINS_8FunctionEEEE5printERNS_11raw_ostreamE(a1, a2);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::print@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E8135E78;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::print((uint64_t)a1, v2);
}

_QWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::const_toplevel_iterator::const_toplevel_iterator(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::toplevel_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::toplevel_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::clear(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 16) = 0;
  result = sub_1C4DFBAAC(a1 + 32, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = 0;
  return result;
}

_DWORD *llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::appendEntry(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[4];
  if (v4 >= result[5])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), v4 + 1, 8);
    LODWORD(v4) = v3[4];
  }
  *(_QWORD *)(*((_QWORD *)v3 + 1) + 8 * v4) = a2;
  ++v3[4];
  return result;
}

void llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::appendBlock(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[8];
  v4 = a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[7];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[7];
    }
    a1[7] = v13;
    a1[8] = v6;
    a1[9] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[8] = v6;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::isReducible(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getHeader(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getEntries(uint64_t a1)
{
  return a1 + 8;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::isEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = *(_QWORD **)(a1 + 8);
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        return v3 != ((uint64_t)v5 - v2) >> 3;
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 8);
  }
  return v3 != ((uint64_t)v5 - v2) >> 3;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::contains(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 64);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 64);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getParentCycle(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getExitBlocks(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  a2[2] = 0;
  v2 = *(_QWORD *)(result + 56);
  v3 = *(_QWORD *)(result + 64);
  if (v2 == v3)
    return result;
  v5 = result;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v2 + 40);
    if (v7 != *(_QWORD *)v2 + 40)
      break;
LABEL_31:
    v8 = 0;
    v9 = 0;
    v13 = 0;
LABEL_12:
    sub_1C4DFBE40(a2, *(_QWORD *)a2 + 8 * a2[2], (llvm::Instruction *)v9, 0, v8, v13);
    v14 = a2[2];
    v15 = v6;
    if (v6 < v14)
    {
      do
      {
        v16 = *(_QWORD **)a2;
        v17 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v15);
        v18 = *(_QWORD **)(v5 + 56);
        v19 = *(_QWORD **)(v5 + 64);
        if (v18 != v19)
        {
          while (*v18 != v17)
          {
            if (++v18 == v19)
            {
              v18 = *(_QWORD **)(v5 + 64);
              break;
            }
          }
        }
        if (v18 == v19)
        {
          v20 = &v16[v6];
          if (v6)
          {
            v21 = 8 * v6;
            v22 = *(_QWORD **)a2;
            while (*v22 != v17)
            {
              ++v22;
              v21 -= 8;
              if (!v21)
              {
                v22 = &v16[v6];
                break;
              }
            }
          }
          else
          {
            v22 = *(_QWORD **)a2;
          }
          if (v6 == v22 - v16)
          {
            ++v6;
            *v20 = v17;
          }
        }
        ++v15;
      }
      while (v15 != v14);
    }
    result = sub_1C4DFC134((uint64_t)a2, v6);
    v2 += 8;
    if (v2 == v3)
      return result;
  }
  v8 = v7 - 24;
  if (v7)
    v9 = v7 - 24;
  else
    v9 = 0;
  v10 = *(unsigned __int8 *)(v9 + 16);
  v11 = v10 - 29;
  if (v10 == 30)
  {
    if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3)
      v12 = 2;
    else
      v12 = 1;
LABEL_11:
    v13 = v12;
    goto LABEL_12;
  }
  v12 = 0;
  switch(v11)
  {
    case 0:
    case 5:
    case 6:
      goto LABEL_11;
    case 1:
      __break(1u);
      break;
    case 2:
      v12 = (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_11;
    case 3:
    case 9:
      v12 = (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) - 1;
      goto LABEL_11;
    case 4:
      v12 = 2;
      goto LABEL_11;
    case 7:
      v12 = *(_WORD *)(v9 + 18) & 1;
      goto LABEL_11;
    case 8:
      v12 = 1;
      goto LABEL_11;
    case 10:
      v12 = *(_DWORD *)(v9 + 80) + 1;
      goto LABEL_11;
    default:
      goto LABEL_31;
  }
  return result;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::blocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getCyclePreheader(uint64_t a1)
{
  uint64_t CyclePredecessor;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v7;
  unsigned int v8;

  CyclePredecessor = llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getCyclePredecessor(a1);
  if (!CyclePredecessor)
    return 0;
  v2 = *(_QWORD *)(CyclePredecessor + 40);
  if (v2 == CyclePredecessor + 40)
    return 0;
  v3 = v2 - 24;
  if (!v2)
    v3 = 0;
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 != 30)
  {
    v5 = 0;
    switch(*(_BYTE *)(v3 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_16;
      case 0x1F:
        v7 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_11;
      case 0x20:
      case 0x26:
LABEL_16:
        v7 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_11;
      case 0x24:
        v7 = *(_WORD *)(v3 + 18) & 1;
        goto LABEL_11;
      case 0x27:
        v7 = *(_DWORD *)(v3 + 80) + 1;
LABEL_11:
        if (v7 == 1)
        {
          v8 = v4 - 33;
          if (v8 >= 6 || ((0x3Bu >> v8) & 1) == 0)
            return CyclePredecessor;
        }
        return 0;
      default:
        return v5;
    }
  }
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3)
    return 0;
  else
    return CyclePredecessor;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getCyclePredecessor(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;

  if (*(_DWORD *)(a1 + 16) == 1)
  {
    v1 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      v1 = *(_QWORD *)(v1 + 8);
      if (!v1)
        break;
      v2 = *(_QWORD *)(v1 + 24);
      v3 = *(unsigned __int8 *)(v2 + 16);
      if (v2)
        v4 = v3 >= 0x1C;
      else
        v4 = 0;
      if (v4 && v3 - 29 < 0xB)
      {
        v6 = 0;
        v7 = *(_QWORD **)(a1 + 56);
        v8 = *(_QWORD **)(a1 + 64);
LABEL_12:
        result = *(_QWORD *)(v2 + 40);
        v10 = v7;
        if (v7 != v8)
        {
          while (*v10 != result)
          {
            if (++v10 == v8)
            {
              v10 = v8;
              break;
            }
          }
        }
        if (v10 != v8)
        {
          result = v6;
          goto LABEL_20;
        }
        if (!v6 || v6 == result)
        {
LABEL_20:
          while (1)
          {
            v1 = *(_QWORD *)(v1 + 8);
            if (!v1)
              return result;
            v2 = *(_QWORD *)(v1 + 24);
            v11 = *(unsigned __int8 *)(v2 + 16);
            if (v2)
              v12 = v11 >= 0x1C;
            else
              v12 = 0;
            if (v12 && v11 - 29 < 0xB)
            {
              v6 = result;
              goto LABEL_12;
            }
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

{
  return __ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_8FunctionEEEE19getCyclePredecessorEv(a1);
}

_QWORD *llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::const_child_iterator::const_child_iterator(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::child_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::child_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getNumChildren(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getNumBlocks(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::getNumEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::entries(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::Function>>::printEntries@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E8135E30;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

_QWORD *llvm::CycleInfoPrinterPass::CycleInfoPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

llvm::CycleInfoWrapperPass *llvm::CycleInfoWrapperPass::CycleInfoWrapperPass(llvm::CycleInfoWrapperPass *this)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::CycleInfoWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8135D90;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D110);
  if (v3 != -1)
  {
    v7[0] = sub_1C4DFB6D0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D110, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::initializeCycleInfoWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D110);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DFB6D0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D110, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DFB6D0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Cycle Info Analysis";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "cycles";
  *(_QWORD *)(v2 + 24) = 6;
  *(_QWORD *)(v2 + 32) = &llvm::CycleInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::CycleInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::CycleInfoWrapperPass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t llvm::CycleInfoWrapperPass::runOnFunction(llvm::CycleInfoWrapperPass *this, llvm::Function *a2)
{
  char *v3;
  char **v4;

  v3 = (char *)this + 96;
  v4 = (char **)((char *)this + 40);
  sub_1C4DFBAAC((uint64_t)this + 96, *((_QWORD **)this + 12));
  sub_1C4DF97D0((_DWORD *)v3 - 12);
  sub_1C4DF97D0((_DWORD *)v3 - 6);
  *((_QWORD *)v3 - 8) = a2;
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute(v4, (uint64_t)a2);
  return 0;
}

void llvm::CycleInfoWrapperPass::print(llvm::CycleInfoWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  void *v5;
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  const char *v16;
  size_t v17;
  size_t v18;
  _BYTE *v19;

  v5 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 0x17uLL)
  {
    qmemcpy(v5, "CycleInfo for function: ", 24);
    *((_QWORD *)a2 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(a2, "CycleInfo for function: ", 0x18uLL);
  }
  v6 = (uint64_t ***)*((_QWORD *)this + 4);
  if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
    goto LABEL_13;
  v7 = ***v6;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    v11 = (uint64_t ****)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == v6)
      goto LABEL_11;
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v6)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
  }
  v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_11:
  v15 = v11[1];
  v18 = (size_t)*v15;
  v16 = (const char *)(v15 + 2);
  v17 = v18;
  v19 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v18 > *((_QWORD *)a2 + 3) - (_QWORD)v19)
  {
    llvm::raw_ostream::write(a2, v16, v17);
LABEL_13:
    v19 = (_BYTE *)*((_QWORD *)a2 + 4);
    goto LABEL_16;
  }
  if (v17)
  {
    memcpy(v19, v16, v17);
    v19 = (_BYTE *)(*((_QWORD *)a2 + 4) + v17);
    *((_QWORD *)a2 + 4) = v19;
  }
LABEL_16:
  if (*((_BYTE **)a2 + 3) == v19)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *v19 = 10;
    ++*((_QWORD *)a2 + 4);
  }
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::print((uint64_t)this + 40, a2);
}

_DWORD *llvm::CycleInfoWrapperPass::releaseMemory(llvm::CycleInfoWrapperPass *this)
{
  char *v1;
  _DWORD *result;

  v1 = (char *)this + 96;
  sub_1C4DFBAAC((uint64_t)this + 96, *((_QWORD **)this + 12));
  sub_1C4DF97D0((_DWORD *)v1 - 12);
  result = sub_1C4DF97D0((_DWORD *)v1 - 6);
  *((_QWORD *)v1 - 8) = 0;
  return result;
}

void sub_1C4DFB978(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8135D90;
  sub_1C6187958((uint64_t)a1 + 40);
  llvm::Pass::~Pass(a1);
}

void sub_1C4DFB9A8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8135D90;
  sub_1C6187958((uint64_t)a1 + 40);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4DFB9EC(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          v8 = (void *)v6[7];
          if (v8)
          {
            v6[8] = v8;
            operator delete(v8);
          }
          v10 = v6 + 4;
          sub_1C4DFB9EC(&v10);
          v9 = (_QWORD *)v6[1];
          if (v9 != v6 + 3)
            free(v9);
          MEMORY[0x1CAA32FC0](v6, 0x10A0C40B2354FA7);
        }
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4DFBAAC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void **v9;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = *(void **)(v5 + 56);
      if (v7)
      {
        *(_QWORD *)(v5 + 64) = v7;
        operator delete(v7);
      }
      v9 = (void **)(v5 + 32);
      sub_1C4DFB9EC(&v9);
      v8 = *(void **)(v5 + 8);
      if (v8 != (void *)(v5 + 24))
        free(v8);
      result = MEMORY[0x1CAA32FC0](v5, 0x10A0C40B2354FA7);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

llvm::CycleInfoWrapperPass *llvm::callDefaultCtor<llvm::CycleInfoWrapperPass>()
{
  llvm::CycleInfoWrapperPass *v0;

  v0 = (llvm::CycleInfoWrapperPass *)operator new();
  return llvm::CycleInfoWrapperPass::CycleInfoWrapperPass(v0);
}

char *sub_1C4DFBB74(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void **v22;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        v19 = *(void **)(v17 + 56);
        if (v19)
        {
          *(_QWORD *)(v17 + 64) = v19;
          operator delete(v19);
        }
        v22 = (void **)(v17 + 32);
        sub_1C4DFB9EC(&v22);
        v20 = *(void **)(v17 + 8);
        if (v20 != (void *)(v17 + 24))
          free(v20);
        MEMORY[0x1CAA32FC0](v17, 0x10A0C40B2354FA7);
      }
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

_QWORD *sub_1C4DFBCC4(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v4 = result;
    v5 = *result;
    while (1)
    {
      v6 = *(_QWORD *)(v2 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      v8 = v6 && v7 >= 0x1C;
      if (v8 && v7 - 29 < 0xB)
        break;
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return result;
    }
    v10 = 0;
LABEL_13:
    v11 = *(_QWORD *)(v6 + 40);
    v22 = 0;
    result = (_QWORD *)sub_1C6144BDC(*(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 24), v11, &v22);
    v12 = 0;
    if ((_DWORD)result)
      v12 = *(_QWORD *)(v22 + 8);
    v13 = (_DWORD *)v4[1];
    if (*v13 <= v12 && v13[1] >= HIDWORD(v12))
    {
      v14 = v4[2];
      v15 = *(unsigned int *)(v14 + 8);
      if (v15 >= *(unsigned int *)(v14 + 12))
      {
        v21 = v4[2];
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v14, v14 + 16, v15 + 1, 8);
        v14 = v21;
        v15 = *(unsigned int *)(v21 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v11;
      ++*(_DWORD *)(v14 + 8);
    }
    else
    {
      v10 = 1;
    }
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      v6 = *(_QWORD *)(v2 + 24);
      v16 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v17 = v16 >= 0x1C;
      else
        v17 = 0;
      if (v17 && v16 - 29 < 0xB)
        goto LABEL_13;
    }
    if ((v10 & 1) != 0)
    {
      v19 = *(_QWORD *)v4[3];
      v20 = *(unsigned int *)(v19 + 16);
      if (v20 >= *(_DWORD *)(v19 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 8, v19 + 24, v20 + 1, 8);
        LODWORD(v20) = *(_DWORD *)(v19 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v20) = a2;
      ++*(_DWORD *)(v19 + 16);
    }
  }
  return result;
}

_BYTE *sub_1C4DFBE40(unsigned int *a1, uint64_t a2, llvm::Instruction *this, unsigned int a4, uint64_t a5, int a6)
{
  unsigned int v7;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;

  v7 = a4;
  v10 = a4;
  v11 = *(_QWORD *)a1;
  v12 = (a2 - *(_QWORD *)a1) >> 3;
  v13 = a1[2];
  v14 = a1[3];
  v15 = a6 - a4;
  v16 = v13 + (int)(a6 - a4);
  if (*(_QWORD *)a1 + 8 * v13 == a2)
  {
    if (v16 > v14)
    {
      v27 = (a2 - *(_QWORD *)a1) >> 3;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v16, 8);
      v12 = v27;
      v13 = a1[2];
      v11 = *(_QWORD *)a1;
    }
    if (v10 != a6)
    {
      v22 = v12;
      v23 = (_QWORD *)(v11 + 8 * v13);
      do
      {
        *v23++ = llvm::Instruction::getSuccessor(this, v10);
        v10 = ++v7;
      }
      while (v7 != a6);
      LODWORD(v13) = a1[2];
      v11 = *(_QWORD *)a1;
      v12 = v22;
    }
    a1[2] = v13 + v15;
    return (_BYTE *)(v11 + 8 * v12);
  }
  else
  {
    if (v16 > v14)
    {
      v17 = (a2 - *(_QWORD *)a1) >> 3;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v16, 8);
      v12 = v17;
      v11 = *(_QWORD *)a1;
      v13 = a1[2];
    }
    v18 = (_BYTE *)(v11 + 8 * v12);
    v19 = (char *)(v11 + 8 * v13);
    v20 = (v19 - v18) >> 3;
    if (v20 >= v15)
    {
      sub_1C6177054(a1, &v19[-8 * v15], (char *)(v11 + 8 * v13));
      if (&v19[-8 * v15] != v18)
        memmove(&v18[8 * v15], v18, &v19[-8 * v15] - v18);
      if (v10 != a6)
      {
        v25 = v10;
        v26 = v18;
        do
        {
          *v26++ = llvm::Instruction::getSuccessor(this, v25);
          v25 = ++v7;
        }
        while (v7 != a6);
      }
    }
    else
    {
      a1[2] = v13 + v15;
      if (v12 != v13)
      {
        memcpy((void *)(v11 + 8 * (v13 + v15) - 8 * v20), v18, v19 - v18);
        v21 = v18;
        do
        {
          *v21++ = llvm::Instruction::getSuccessor(this, v10++);
          --v20;
        }
        while (v20);
      }
      for (; a6 != v10; ++v10)
      {
        *(_QWORD *)v19 = llvm::Instruction::getSuccessor(this, v10);
        v19 += 8;
      }
    }
  }
  return v18;
}

_QWORD *sub_1C4DFC02C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4A070D4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_DWORD *sub_1C4DFC0E4(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C4A06814(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1C4DFC134(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      v3 = result;
      v4 = a2;
      if (*(unsigned int *)(result + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, a2, 8);
        v2 = *(unsigned int *)(v3 + 8);
      }
      result = v3;
      LODWORD(a2) = v4;
      if (v4 != v2)
      {
        bzero((void *)(*(_QWORD *)v3 + 8 * v2), 8 * (v4 - v2));
        result = v3;
        LODWORD(a2) = v4;
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::DGEdge(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::DGEdge(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

{
  *result = *a2;
  return result;
}

uint64_t *llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  if (*a2 != *a1)
  {
    sub_1C4DFE328(v4 + 8, v3 + 8);
    sub_1C4DE4490((_QWORD *)(v4 + 32), *(char **)(v3 + 32), *(char **)(v3 + 40), (uint64_t)(*(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32)) >> 3);
  }
  *(_DWORD *)(v4 + 56) = *(_DWORD *)(v3 + 56);
  return a1;
}

BOOL llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::operator==(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::isEqualTo(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::operator!=(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

uint64_t llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::getTargetNode(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t *llvm::DGEdge<llvm::DDGNode,llvm::DDGEdge>::setTargetNode(uint64_t *result, uint64_t a2)
{
  uint64_t v3;

  v3 = *result;
  if (*result != a2)
  {
    sub_1C4DFE328(v3 + 8, a2 + 8);
    result = sub_1C4DE4490((_QWORD *)(v3 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::DGNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2;
  sub_1C4DFC308((_QWORD *)a1, &v4);
  return a1;
}

{
  uint64_t v4;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2;
  sub_1C4DFC308((_QWORD *)a1, &v4);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1C4DFE328(a1, a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1C4DFE328(a1, a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  return a1;
}

BOOL sub_1C4DFC308(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v17[16];
  unsigned __int8 v18;

  sub_1C6189414((uint64_t)v17, (uint64_t)a1, a2);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

__n128 llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::DGNode(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  int v2;
  int v3;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1C4DFE328(a1, a2);
    sub_1C4DE4490((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  }
  return a1;
}

{
  if (a2 != a1)
  {
    sub_1C4DFE328(a1, a2);
    sub_1C4DE4490((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  }
  return a1;
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::front(uint64_t a1)
{
  return **(_QWORD **)(a1 + 24);
}

{
  return **(_QWORD **)(a1 + 24);
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::back(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
}

{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
}

BOOL llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::addEdge(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_1C4DFC308(a1, &v3);
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::removeEdge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_1C61885C4(a1, &v3);
}

BOOL llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::hasEdgeTo(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  v2 = *(_QWORD ***)(a1 + 24);
  v3 = *(_QWORD ***)(a1 + 32);
  if (v2 != v3)
  {
    while (**v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD ***)(a1 + 32);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

_QWORD **llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::findEdgeTo(uint64_t a1, uint64_t a2)
{
  _QWORD **result;
  _QWORD **v4;

  result = *(_QWORD ***)(a1 + 24);
  v4 = *(_QWORD ***)(a1 + 32);
  if (result != v4)
  {
    while (**result != a2)
    {
      if (++result == v4)
        return v4;
    }
  }
  return result;
}

unsigned int *llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::clear(uint64_t a1)
{
  unsigned int *result;

  result = sub_1C6189548((unsigned int *)a1);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  return result;
}

BOOL llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::isEqualTo(uint64_t a1, uint64_t a2)
{
  return a2 + 8 == a1;
}

uint64_t llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::getDerived(uint64_t a1)
{
  return a1 - 8;
}

{
  return a1 - 8;
}

_QWORD *llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::DirectedGraph(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0xA00000000;
  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::addNode((uint64_t)a1, a2);
  return a1;
}

{
  *a1 = a1 + 2;
  a1[1] = 0xA00000000;
  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::addNode((uint64_t)a1, a2);
  return a1;
}

{
  *a1 = a1 + 2;
  a1[1] = 0xA00000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C614D378((uint64_t)a1, a2);
  return a1;
}

{
  *a1 = a1 + 2;
  a1[1] = 0xA00000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C614D378((uint64_t)a1, a2);
  return a1;
}

_QWORD *llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::DirectedGraph(_QWORD *result, uint64_t a2)
{
  *result = result + 2;
  result[1] = 0xA00000000;
  if (*(_DWORD *)(a2 + 8))
    return (_QWORD *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)result, a2);
  return result;
}

{
  *result = result + 2;
  result[1] = 0xA00000000;
  if (*(_DWORD *)(a2 + 8))
    return (_QWORD *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)result, a2);
  return result;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::end(uint64_t a1)
{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::front(uint64_t a1)
{
  return **(_QWORD **)a1;
}

{
  return **(_QWORD **)a1;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::back(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8) - 8);
}

{
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8) - 8);
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

_QWORD *llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::findNode(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = &result[v4];
    while (*result != a2)
    {
      ++result;
      v5 -= 8;
      if (!v5)
        return v6;
    }
  }
  return result;
}

{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = &result[v4];
    while (*result != a2)
    {
      ++result;
      v5 -= 8;
      if (!v5)
        return v6;
    }
  }
  return result;
}

BOOL llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::findIncomingEdgesToNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  void *__src;
  uint64_t v15;
  _QWORD v16[11];

  v16[10] = *MEMORY[0x1E0C80C00];
  __src = v16;
  v15 = 0xA00000000;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD **)a1;
    v7 = 8 * v4;
    do
    {
      if (*v6 != a2)
      {
        llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::findEdgesTo(*v6 + 8, a2, (uint64_t)&__src);
        v8 = __src;
        v9 = v15;
        v10 = *(unsigned int *)(a3 + 8);
        v11 = v15 + v10;
        if (v11 > *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v11, 8);
          LODWORD(v10) = *(_DWORD *)(a3 + 8);
        }
        if ((_DWORD)v9)
        {
          memcpy((void *)(*(_QWORD *)a3 + 8 * v10), v8, 8 * v9);
          LODWORD(v10) = *(_DWORD *)(a3 + 8);
        }
        *(_DWORD *)(a3 + 8) = v10 + v9;
        LODWORD(v15) = 0;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v12 = *(_DWORD *)(a3 + 8);
    if (__src != v16)
      free(__src);
  }
  else
  {
    v12 = *(_DWORD *)(a3 + 8);
  }
  return v12 != 0;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::removeNode(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x1E0C80C00];
  v2 = a1[2];
  if (!(_DWORD)v2)
    return 0;
  v5 = *(uint64_t **)a1;
  v6 = *(_QWORD *)a1 + 8 * v2;
  v7 = (_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = 8 * v2;
  v9 = v7;
  while (*(v7 - 1) != a2)
  {
    ++v9;
    ++v7;
    v8 -= 8;
    if (!v8)
      return 0;
  }
  if (!v8)
    return 0;
  v19 = v21;
  v20 = 0xA00000000;
  do
  {
    v11 = *v5;
    if (*v5 != a2)
    {
      v12 = v11 + 8;
      llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::findEdgesTo(v11 + 8, a2, (uint64_t)&v19);
      if ((_DWORD)v20)
      {
        v13 = (uint64_t *)v19;
        v14 = 8 * v20;
        do
        {
          v15 = *v13++;
          v18 = v15;
          sub_1C61885C4(v12, &v18);
          v14 -= 8;
        }
        while (v14);
      }
      LODWORD(v20) = 0;
    }
    ++v5;
  }
  while (v5 != (uint64_t *)v6);
  sub_1C6189548((unsigned int *)(a2 + 8));
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 32);
  v16 = a1[2];
  v17 = *(_QWORD *)a1 + 8 * v16;
  if (v7 != (_QWORD *)v17)
  {
    memmove(v7 - 1, v7, v17 - (_QWORD)v9);
    LODWORD(v16) = a1[2];
  }
  a1[2] = v16 - 1;
  if (v19 != v21)
    free(v19);
  return 1;
}

{
  return __ZN4llvm13DirectedGraphINS_7DDGNodeENS_7DDGEdgeEE10removeNodeERS1_(a1, a2);
}

BOOL llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::connect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a4;
  return sub_1C4DFC308((_QWORD *)(a2 + 8), &v5);
}

void llvm::DDGNode::~DDGNode(llvm::DDGNode *this)
{
  sub_1C6176BF8((_QWORD *)this + 1);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, unsigned int a2)
{
  const char *v3;
  size_t v4;
  void *v5;

  if (a2 <= 4)
  {
    v3 = off_1E8136080[a2];
    v4 = strlen(v3);
    v5 = (void *)*((_QWORD *)a1 + 4);
    if (v4 <= *((_QWORD *)a1 + 3) - (_QWORD)v5)
    {
      if (v4)
      {
        memcpy(v5, v3, v4);
        *((_QWORD *)a1 + 4) += v4;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, v3, v4);
    }
  }
  return a1;
}

{
  const char *v3;
  size_t v4;
  void *v5;

  if (a2 <= 3)
  {
    v3 = off_1E81360A8[a2];
    v4 = strlen(v3);
    v5 = (void *)*((_QWORD *)a1 + 4);
    if (v4 <= *((_QWORD *)a1 + 3) - (_QWORD)v5)
    {
      if (v4)
      {
        memcpy(v5, v3, v4);
        *((_QWORD *)a1 + 4) += v4;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, v3, v4);
    }
  }
  return a1;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, unint64_t a2)
{
  void *v4;
  _BYTE *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  void *v9;
  _BYTE *v10;
  int v11;
  void *v12;
  uint64_t v13;
  llvm::Value **v14;
  uint64_t v15;
  llvm::Value *v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  llvm::raw_ostream *v36;
  uint64_t v37;

  v4 = (void *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v4 > 0xCuLL)
  {
    qmemcpy(v4, "Node Address:", 13);
    *((_QWORD *)a1 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a1, "Node Address:", 0xDuLL);
  }
  llvm::write_hex(a1, a2, 3, 0, 0);
  v5 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v5)
  {
    llvm::raw_ostream::write(a1, ":", 1uLL);
  }
  else
  {
    *v5 = 58;
    ++*((_QWORD *)a1 + 4);
  }
  v6 = *(int *)(a2 + 56);
  if (v6 <= 4)
  {
    v7 = off_1E8136080[v6];
    v8 = strlen(v7);
    v9 = (void *)*((_QWORD *)a1 + 4);
    if (v8 <= *((_QWORD *)a1 + 3) - (_QWORD)v9)
    {
      if (v8)
      {
        memcpy(v9, v7, v8);
        *((_QWORD *)a1 + 4) += v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, v7, v8);
    }
  }
  v10 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v10)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v10 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  v11 = *(_DWORD *)(a2 + 56);
  if ((v11 - 1) > 1)
  {
    if (v11 == 3)
    {
      v18 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v18 > 0x22uLL)
      {
        qmemcpy(v18, "--- start of nodes in pi-block ---\n", 35);
        *((_QWORD *)a1 + 4) += 35;
      }
      else
      {
        llvm::raw_ostream::write(a1, "--- start of nodes in pi-block ---\n", 0x23uLL);
      }
      v19 = *(unsigned int *)(a2 + 72);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = *(_QWORD *)(a2 + 64);
        v22 = 8 * v19;
        do
        {
          llvm::operator<<(a1, *(_QWORD *)(v21 + 8 * v20));
          v23 = v20 + 1;
          v24 = *(_DWORD *)(a2 + 72);
          v25 = (_DWORD)v20 + 1 != v24;
          v26 = (void *)*((_QWORD *)a1 + 4);
          if (*((_QWORD *)a1 + 3) - (_QWORD)v26 >= v25)
          {
            if (v23 != v24)
            {
              memcpy(v26, "\n", v23 != v24);
              *((_QWORD *)a1 + 4) += v25;
            }
          }
          else
          {
            if (v23 == v24)
              v27 = "";
            else
              v27 = "\n";
            llvm::raw_ostream::write(a1, v27, v23 != v24);
          }
          ++v20;
          v22 -= 8;
        }
        while (v22);
      }
      v28 = (void *)*((_QWORD *)a1 + 4);
      if (*((_QWORD *)a1 + 3) - (_QWORD)v28 > 0x20uLL)
      {
        qmemcpy(v28, "--- end of nodes in pi-block ---\n", 33);
        *((_QWORD *)a1 + 4) += 33;
      }
      else
      {
        llvm::raw_ostream::write(a1, "--- end of nodes in pi-block ---\n", 0x21uLL);
      }
    }
  }
  else
  {
    v12 = (void *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v12 > 0xEuLL)
    {
      qmemcpy(v12, " Instructions:\n", 15);
      *((_QWORD *)a1 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(a1, " Instructions:\n", 0xFuLL);
    }
    v13 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v13)
    {
      v14 = *(llvm::Value ***)(a2 + 64);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        llvm::raw_ostream::write(a1, "                                                                                ", 2uLL);
        llvm::Value::print(v16, a1, 0);
        v17 = (_BYTE *)*((_QWORD *)a1 + 4);
        if (*((_BYTE **)a1 + 3) == v17)
        {
          llvm::raw_ostream::write(a1, "\n", 1uLL);
        }
        else
        {
          *v17 = 10;
          ++*((_QWORD *)a1 + 4);
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  v29 = *(_QWORD *)(a2 + 32);
  v30 = *(_QWORD *)(a2 + 40);
  if (v29 == v30)
    v31 = " Edges:none!\n";
  else
    v31 = " Edges:\n";
  if (v29 == v30)
    v32 = 13;
  else
    v32 = 8;
  v33 = (void *)*((_QWORD *)a1 + 4);
  if (v32 <= *((_QWORD *)a1 + 3) - (_QWORD)v33)
  {
    memcpy(v33, v31, v32);
    *((_QWORD *)a1 + 4) += v32;
  }
  else
  {
    llvm::raw_ostream::write(a1, v31, v32);
  }
  v34 = *(uint64_t **)(a2 + 32);
  v35 = *(uint64_t **)(a2 + 40);
  while (v34 != v35)
  {
    v36 = llvm::raw_ostream::write(a1, "                                                                                ", 2uLL);
    v37 = *v34++;
    llvm::operator<<(v36, v37);
  }
  return a1;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  _BYTE *v10;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *v4 = 91;
    ++*((_QWORD *)this + 4);
  }
  v5 = *(int *)(a2 + 8);
  if (v5 <= 3)
  {
    v6 = off_1E81360A8[v5];
    v7 = strlen(v6);
    v8 = (void *)*((_QWORD *)this + 4);
    if (v7 <= *((_QWORD *)this + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v6, v7);
        *((_QWORD *)this + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, v6, v7);
    }
  }
  v9 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 4)
  {
    *(_BYTE *)(v9 + 4) = 32;
    *(_DWORD *)v9 = 1869881437;
    *((_QWORD *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, "] to ", 5uLL);
  }
  llvm::write_hex(this, *(_QWORD *)a2, 3, 0, 0);
  v10 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v10)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v10 = 10;
    ++*((_QWORD *)this + 4);
  }
  return this;
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t ***v9;
  size_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t ***v20;
  size_t v21;
  void *v22;
  _BYTE *v23;

  v3 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a2 + 144);
    v5 = &v4[2 * v3];
    while (1)
    {
      v6 = *v4;
      v7 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 5)
      {
        *(_WORD *)(v7 + 4) = 10016;
        *(_DWORD *)v7 = 1886351180;
        *((_QWORD *)this + 4) += 6;
        v8 = this;
      }
      else
      {
        v8 = llvm::raw_ostream::write(this, "Loop '", 6uLL);
      }
      v9 = **(uint64_t *****)(v6 + 32);
      if (v9)
      {
        if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
          break;
      }
      v10 = 14;
      v11 = "<unnamed loop>";
LABEL_16:
      v22 = (void *)*((_QWORD *)v8 + 4);
      if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v22)
      {
        if (v10)
        {
          memcpy(v22, v11, v10);
          v22 = (void *)(*((_QWORD *)v8 + 4) + v10);
          *((_QWORD *)v8 + 4) = v22;
        }
      }
      else
      {
        v8 = llvm::raw_ostream::write(v8, v11, v10);
        v22 = (void *)*((_QWORD *)v8 + 4);
      }
      if (*((_QWORD *)v8 + 3) - (_QWORD)v22 > 0xCuLL)
      {
        qmemcpy(v22, "' has cost = ", 13);
        *((_QWORD *)v8 + 4) += 13;
      }
      else
      {
        v8 = llvm::raw_ostream::write(v8, "' has cost = ", 0xDuLL);
      }
      llvm::raw_ostream::operator<<(v8, v4[1]);
      v23 = (_BYTE *)*((_QWORD *)v8 + 4);
      if (*((_BYTE **)v8 + 3) == v23)
      {
        llvm::raw_ostream::write(v8, "\n", 1uLL);
      }
      else
      {
        *v23 = 10;
        ++*((_QWORD *)v8 + 4);
      }
      v4 += 2;
      if (v4 == v5)
        return this;
    }
    v12 = ***v9;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == v9)
      {
LABEL_15:
        v20 = v16[1];
        v21 = (size_t)*v20;
        v11 = (const char *)(v20 + 2);
        v10 = v21;
        goto LABEL_16;
      }
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == v9)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          goto LABEL_15;
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    goto LABEL_15;
  }
  return this;
}

{
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  const char *v14;
  size_t v15;
  void *v16;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  void *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0xB)
  {
    *(_DWORD *)(v4 + 8) = 677737569;
    *(_QWORD *)v4 = *(_QWORD *)"range-state(";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "range-state(", 0xCuLL);
  }
  sub_1C5E21910(this, *(unsigned int *)(a2 + 8), 0, 0, 0);
  v5 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 15401;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ")<", 2uLL);
  }
  v6 = *(unsigned int *)(a2 + 56);
  v23 = v6;
  if (v6 > 0x40)
  {
    v18 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)(a2 + 48), v18);
  }
  else
  {
    v7 = *(void **)(a2 + 48);
  }
  v22 = v7;
  v8 = *(unsigned int *)(a2 + 72);
  v25 = v8;
  if (v8 > 0x40)
  {
    v19 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v9 = (void *)operator new[]();
    memcpy(v9, *(const void **)(a2 + 64), v19);
  }
  else
  {
    v9 = *(void **)(a2 + 64);
  }
  v24 = v9;
  llvm::ConstantRange::print((llvm::ConstantRange *)&v22, this);
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  v10 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 2)
  {
    *(_BYTE *)(v10 + 2) = 32;
    *(_WORD *)v10 = 12064;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, " / ", 3uLL);
  }
  v11 = *(unsigned int *)(a2 + 24);
  v23 = v11;
  if (v11 > 0x40)
  {
    v20 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
    v22 = (void *)operator new[]();
    memcpy(v22, *(const void **)(a2 + 16), v20);
  }
  else
  {
    v22 = *(void **)(a2 + 16);
  }
  v12 = *(unsigned int *)(a2 + 40);
  v25 = v12;
  if (v12 > 0x40)
  {
    v21 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    v24 = (void *)operator new[]();
    memcpy(v24, *(const void **)(a2 + 32), v21);
  }
  else
  {
    v24 = *(void **)(a2 + 32);
  }
  llvm::ConstantRange::print((llvm::ConstantRange *)&v22, this);
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v13)
  {
    llvm::raw_ostream::write(this, ">", 1uLL);
  }
  else
  {
    *v13 = 62;
    ++*((_QWORD *)this + 4);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
      v14 = "fix";
    else
      v14 = (const char *)&unk_1C872ACEA;
  }
  else
  {
    v14 = "top";
  }
  v15 = strlen(v14);
  v16 = (void *)*((_QWORD *)this + 4);
  if (v15 <= *((_QWORD *)this + 3) - (_QWORD)v16)
  {
    if (v15)
    {
      memcpy(v16, v14, v15);
      *((_QWORD *)this + 4) += v15;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v14, v15);
  }
  return this;
}

{
  _WORD *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  int v7;
  _WORD *v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  _BYTE *v12;
  const char *v13;
  llvm::raw_ostream *v14;
  size_t v15;
  uint64_t v17;

  v4 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 23328;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " [", 2uLL);
  }
  v5 = *(int *)(a2 + 32);
  if ((v5 & 0x80000000) != 0)
  {
    v5 = -(uint64_t)v5;
    v6 = this;
    v7 = 1;
  }
  else
  {
    v6 = this;
    v7 = 0;
  }
  sub_1C5E21910(v6, v5, 0, 0, v7);
  v8 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8285;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "] ", 2uLL);
  }
  llvm::Value::print(*(llvm::Value **)(a2 + 8), this, 0);
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 4)
    {
      *(_BYTE *)(v9 + 4) = 32;
      *(_DWORD *)v9 = 1634301472;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, " via ", 5uLL);
    }
    llvm::Value::print(*(llvm::Value **)a2, this, 0);
  }
  if (*(_BYTE *)(a2 + 24))
  {
    v10 = (_WORD *)*((_QWORD *)this + 4);
    v11 = *((_QWORD *)this + 3) - (_QWORD)v10;
    if (*(_QWORD *)(a2 + 16))
    {
      if (v11 > 1)
      {
        *v10 = 23328;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, " [", 2uLL);
      }
      llvm::Value::print(*(llvm::Value **)(a2 + 16), this, 0);
      v12 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v12)
      {
        v13 = "]";
        v14 = this;
        v15 = 1;
LABEL_19:
        llvm::raw_ostream::write(v14, v13, v15);
        return this;
      }
      *v12 = 93;
      v17 = *((_QWORD *)this + 4) + 1;
    }
    else
    {
      if (v11 <= 0xD)
      {
        v13 = " [ <unknown> ]";
        v14 = this;
        v15 = 14;
        goto LABEL_19;
      }
      qmemcpy(v10, " [ <unknown> ]", 14);
      v17 = *((_QWORD *)this + 4) + 14;
    }
    *((_QWORD *)this + 4) = v17;
  }
  return this;
}

{
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  char v18;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 32;
    *(_OWORD *)v4 = *(_OWORD *)"FunctionAddress: ";
    *((_QWORD *)this + 4) += 17;
    v5 = this;
  }
  else
  {
    v5 = llvm::raw_ostream::write(this, "FunctionAddress: ", 0x11uLL);
  }
  v14 = **(unsigned int ***)a2;
  v15 = 0;
  v16 = 8;
  v17 = 1;
  v18 = 1;
  llvm::raw_ostream::operator<<(v5, (uint64_t)&v14);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 0x11)
  {
    *(_WORD *)(v6 + 16) = 8250;
    *(_OWORD *)v6 = *(_OWORD *)", NumFaultingPCs: ";
    *((_QWORD *)v5 + 4) += 18;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, ", NumFaultingPCs: ", 0x12uLL);
  }
  sub_1C5E21910(v5, *(unsigned int *)(*(_QWORD *)a2 + 8), 0, 0, 0);
  v7 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v7)
  {
    llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *v7 = 10;
    ++*((_QWORD *)v5 + 4);
  }
  v8 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 12 * v8;
    do
    {
      v11 = *(_QWORD *)(a2 + 8);
      v14 = (unsigned int *)(v9 + *(_QWORD *)a2 + 16);
      v15 = v11;
      llvm::operator<<(this, &v14);
      v12 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v12)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v12 = 10;
        ++*((_QWORD *)this + 4);
      }
      v9 += 12;
    }
    while (v10 != v9);
  }
  return this;
}

double llvm::SimpleDDGNode::SimpleDDGNode(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)a1 = &off_1E8135EC0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(a1 + 72) = 0x200000001;
  return result;
}

{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)a1 = &off_1E8135EC0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(a1 + 72) = 0x200000001;
  return result;
}

llvm::SimpleDDGNode *llvm::SimpleDDGNode::SimpleDDGNode(llvm::SimpleDDGNode *this, const llvm::SimpleDDGNode *a2)
{
  const llvm::SimpleDDGNode *v4;
  void *v5;
  void **v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  v4 = (const llvm::SimpleDDGNode *)sub_1C4DFD468((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)v4 = &off_1E8135EC0;
  v5 = (char *)v4 + 80;
  *((_QWORD *)v4 + 8) = (char *)v4 + 80;
  v6 = (void **)((char *)v4 + 64);
  *((_QWORD *)v4 + 9) = 0x200000000;
  v7 = *((_DWORD *)a2 + 18);
  if (v7)
    v8 = v4 == a2;
  else
    v8 = 1;
  if (!v8)
  {
    if (v7 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4 + 64, (uint64_t)v5, *((unsigned int *)a2 + 18), 8);
      v9 = *((unsigned int *)a2 + 18);
      if (!(_DWORD)v9)
        goto LABEL_8;
      v5 = *v6;
    }
    else
    {
      v9 = *((unsigned int *)a2 + 18);
    }
    memcpy(v5, *((const void **)a2 + 8), 8 * v9);
LABEL_8:
    *((_DWORD *)this + 18) = v7;
  }
  return this;
}

uint64_t sub_1C4DFD468(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C4DFE328(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)a1 = &unk_1E8135FA8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t llvm::SimpleDDGNode::SimpleDDGNode(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  void *v5;
  unint64_t v6;
  const void *v8;
  unint64_t v9;
  int v11;
  void **v12;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  v3 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v3;
  v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)a1 = &off_1E8135EC0;
  v5 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x200000000;
  v6 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v6 && a1 != a2)
  {
    v8 = *(const void **)(a2 + 64);
    if (v8 != (const void *)(a2 + 80))
    {
      *(_QWORD *)(a1 + 64) = v8;
      v11 = *(_DWORD *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = v6;
      *(_DWORD *)(a1 + 76) = v11;
      *(_QWORD *)(a2 + 64) = a2 + 80;
      *(_DWORD *)(a2 + 76) = 0;
      goto LABEL_8;
    }
    if (v6 >= 3)
    {
      v12 = (void **)(a1 + 64);
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (uint64_t)v5, v6, 8);
      v9 = *(unsigned int *)(a2 + 72);
      if (!(_DWORD)v9)
        goto LABEL_7;
      v8 = *(const void **)(a2 + 64);
      v5 = *v12;
    }
    else
    {
      v9 = v6;
    }
    memcpy(v5, v8, 8 * v9);
LABEL_7:
    *(_DWORD *)(a1 + 72) = v6;
LABEL_8:
    *(_DWORD *)(a2 + 72) = 0;
  }
  return a1;
}

void llvm::SimpleDDGNode::~SimpleDDGNode(llvm::SimpleDDGNode *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E8135EC0;
  *((_DWORD *)this + 18) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != (char *)this + 80)
    free(v2);
  sub_1C6176BF8((_QWORD *)this + 1);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E8135EC0;
  *((_DWORD *)this + 18) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != (char *)this + 80)
    free(v2);
  sub_1C6176BF8((_QWORD *)this + 1);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E8135EC0;
  *((_DWORD *)this + 18) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != (char *)this + 80)
    free(v2);
  sub_1C6176BF8((_QWORD *)this + 1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::PiBlockDDGNode *llvm::PiBlockDDGNode::PiBlockDDGNode(llvm::PiBlockDDGNode *this, const llvm::PiBlockDDGNode *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)sub_1C4DFD468((uint64_t)this, (uint64_t)a2);
  *v4 = &off_1E8135EE0;
  v4[8] = v4 + 10;
  v5 = (uint64_t)(v4 + 8);
  *((_QWORD *)this + 9) = 0x400000000;
  if (*((_DWORD *)a2 + 18))
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v5, (uint64_t)a2 + 64);
  return this;
}

uint64_t llvm::PiBlockDDGNode::PiBlockDDGNode(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  v3 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v3;
  v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)a1 = &off_1E8135EE0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v5 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  if (*(_DWORD *)(a2 + 72))
    sub_1C614D378(v5, a2 + 64);
  return a1;
}

{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 3;
  *(_QWORD *)a1 = &off_1E8135EE0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v3 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v3, a2);
  return a1;
}

void llvm::PiBlockDDGNode::~PiBlockDDGNode(llvm::PiBlockDDGNode *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E8135EE0;
  *((_DWORD *)this + 18) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != (char *)this + 80)
    free(v2);
  sub_1C6176BF8((_QWORD *)this + 1);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E8135EE0;
  *((_DWORD *)this + 18) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != (char *)this + 80)
    free(v2);
  sub_1C6176BF8((_QWORD *)this + 1);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E8135EE0;
  *((_DWORD *)this + 18) = 0;
  v2 = (char *)*((_QWORD *)this + 8);
  if (v2 != (char *)this + 80)
    free(v2);
  sub_1C6176BF8((_QWORD *)this + 1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::DataDependenceGraph *llvm::DataDependenceGraph::DataDependenceGraph(llvm::DataDependenceGraph *this, llvm::Function *a2, llvm::DependenceInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Function *v11;
  int v12;
  int v13;
  unint64_t *v14;
  size_t v15;
  const void *v16;
  unint64_t v17;
  __int128 *p_dst;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  const void *v34;
  const void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  llvm::DependenceInfo *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::DependenceInfo *v67;
  int v68;
  _OWORD v69[2];
  __int128 v70;
  _BYTE v71[24];
  __int128 __dst;
  llvm::DependenceInfo *v73;
  void **v74;
  const void *v75;
  __int128 v76;
  const void *v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _QWORD v82[2];
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *__s2;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *__s1;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  _QWORD v121[11];

  v121[8] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 11) = (char *)this + 104;
  *((_QWORD *)this + 12) = 0xA00000000;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v15 = 0;
    HIBYTE(v73) = 0;
    p_dst = &__dst;
    goto LABEL_17;
  }
  v6 = ***(_QWORD ***)a2;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_8;
  LODWORD(v9) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v10 = v7 + 16 * v9;
  v11 = *(llvm::Function **)v10;
  if (*(llvm::Function **)v10 != a2)
  {
    v12 = 1;
    while (v11 != (llvm::Function *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(llvm::Function **)(v7 + 16 * v9);
      if (v11 == a2)
      {
        v10 = v7 + 16 * v9;
        goto LABEL_9;
      }
    }
LABEL_8:
    v10 = v7 + 16 * v8;
  }
LABEL_9:
  v14 = *(unint64_t **)(v10 + 8);
  v17 = *v14;
  v16 = v14 + 2;
  v15 = v17;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = v15;
    v73 = (llvm::DependenceInfo *)(v20 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v73) = v15;
    p_dst = &__dst;
    if (!v15)
      goto LABEL_17;
  }
  memmove(p_dst, v16, v15);
LABEL_17:
  *((_BYTE *)p_dst + v15) = 0;
  v21 = SHIBYTE(v73);
  *(_QWORD *)this = &unk_1E8136050;
  v22 = (char *)this + 8;
  if (v21 < 0)
  {
    v23 = (void *)__dst;
    sub_1C47EBC30(v22, (void *)__dst, *((unint64_t *)&__dst + 1));
    v24 = *(_OWORD *)a3;
    v25 = *((_OWORD *)a3 + 2);
    *((_OWORD *)this + 3) = *((_OWORD *)a3 + 1);
    *((_OWORD *)this + 4) = v25;
    *((_OWORD *)this + 2) = v24;
    *((_QWORD *)this + 10) = 0;
    operator delete(v23);
  }
  else
  {
    *(_OWORD *)v22 = __dst;
    *((_QWORD *)this + 3) = v73;
    v27 = *((_OWORD *)a3 + 1);
    v26 = *((_OWORD *)a3 + 2);
    *((_OWORD *)this + 2) = *(_OWORD *)a3;
    *((_OWORD *)this + 3) = v27;
    *((_OWORD *)this + 4) = v26;
    *((_QWORD *)this + 10) = 0;
  }
  *(_QWORD *)this = &off_1E8135F00;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 50) = 0;
  v119 = (char *)v121;
  v120 = 0x800000000;
  v28 = *((_QWORD *)a2 + 10);
  if (v28)
    v29 = v28 - 24;
  else
    v29 = 0;
  LODWORD(v65) = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  memset(v69, 0, sizeof(v69));
  v70 = 0u;
  memset(v71, 0, sizeof(v71));
  sub_1C61896F4((int *)&v65, v29);
  sub_1C4DFE698(&v65);
  v58 = 0uLL;
  v59 = 0u;
  v30 = v65;
  LODWORD(v106) = v65;
  v31 = v66;
  v66 = 0;
  v32 = v68;
  v68 = 0;
  v33 = *(_OWORD *)((char *)v69 + 8);
  v34 = *(const void **)&v69[0];
  v35 = (const void *)*((_QWORD *)&v69[1] + 1);
  memset(v69, 0, sizeof(v69));
  v36 = v70;
  v56 = v33;
  v57 = v70;
  v70 = 0uLL;
  v38 = *(_OWORD *)v71;
  v37 = *(_OWORD *)&v71[8];
  memset(v71, 0, sizeof(v71));
  LODWORD(v93) = 0;
  *(_QWORD *)&v59 = 0;
  DWORD2(v59) = 0;
  v64 = 0;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  LODWORD(__dst) = v65;
  *((_QWORD *)&__dst + 1) = v31;
  v107 = 0;
  v39 = v67;
  v67 = 0;
  v73 = v39;
  v108 = 0;
  LODWORD(v74) = v32;
  v109 = 0;
  v76 = v33;
  v111 = 0;
  v110 = 0;
  v75 = v34;
  v77 = v35;
  v78 = v36;
  v112 = 0;
  __s1 = 0;
  v114 = 0;
  v115 = 0;
  v79 = v38;
  v80 = v37;
  v117 = 0;
  v116 = 0;
  v118 = 0;
  LODWORD(v81) = 0;
  v82[0] = 0;
  v94 = 0;
  v82[1] = 0;
  v95 = 0;
  v83 = 0;
  v96 = 0;
  v84 = 0;
  v85 = 0;
  v98 = 0;
  v97 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v99 = 0;
  __s2 = 0;
  v101 = 0;
  v102 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v104 = 0;
  v103 = 0;
  v105 = 0;
  sub_1C617D7D4(&v93);
  sub_1C617D7D4(&v106);
  sub_1C617D7D4(&v58);
  sub_1C617D7D4(&v65);
  LODWORD(v106) = v30;
  v108 = 0;
  v107 = 0;
  v109 = 0;
  sub_1C4DFEB14((uint64_t)&v107, (uint64_t)&__dst + 8);
  v111 = 0;
  v110 = 0;
  v112 = 0;
  sub_1C4DFE394(&v110, v34, v56, (v56 - (uint64_t)v34) >> 3);
  v114 = 0;
  __s1 = 0;
  v115 = 0;
  sub_1C4DFE394(&__s1, v35, v57, (v57 - (uint64_t)v35) >> 3);
  v117 = 0;
  v116 = 0;
  v118 = 0;
  sub_1C4DFEB80(&v116, (const void *)v38, *((uint64_t *)&v38 + 1), (uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 5);
  LODWORD(v93) = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  sub_1C4DFEB14((uint64_t)&v94, (uint64_t)v82);
  v98 = 0;
  v97 = 0;
  v99 = 0;
  sub_1C4DFE394(&v97, 0, 0, 0);
  v101 = 0;
  __s2 = 0;
  v102 = 0;
  sub_1C4DFE394(&__s2, 0, 0, 0);
  v104 = 0;
  v103 = 0;
  v105 = 0;
  sub_1C4DFEB80(&v103, 0, 0, 0);
  v40 = v103;
  v41 = v104 - v103;
  while (1)
  {
    v42 = v116;
    if (v117 - v116 != v41)
      goto LABEL_33;
    if (v116 == v117)
      break;
    v43 = v40;
    while (*(_QWORD *)v42 == *(_QWORD *)v43
         && *(_DWORD *)(v42 + 16) == *(_DWORD *)(v43 + 16)
         && *(_DWORD *)(v42 + 24) == *(_DWORD *)(v43 + 24))
    {
      v42 += 32;
      v43 += 32;
      if (v42 == v117)
        goto LABEL_31;
    }
LABEL_33:
    v44 = (uint64_t *)__s1;
    v45 = v114;
    v46 = (char *)v114 - (_BYTE *)__s1;
    v47 = v120;
    v48 = v120 + (((char *)v114 - (_BYTE *)__s1) >> 3);
    if (v48 > HIDWORD(v120))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v48, 8);
      v47 = v120;
    }
    if (v44 != v45)
    {
      v49 = &v119[8 * v47];
      do
      {
        v50 = *v44++;
        *(_QWORD *)v49 = v50;
        v49 += 8;
      }
      while (v44 != v45);
    }
    LODWORD(v120) = v47 + (v46 >> 3);
    sub_1C4DFE698(&v106);
  }
LABEL_31:
  if ((char *)v114 - (_BYTE *)__s1 != v101 - (_QWORD)__s2 || memcmp(__s1, __s2, (char *)v114 - (_BYTE *)__s1))
    goto LABEL_33;
  sub_1C617D7D4(&v93);
  sub_1C617D7D4(&v106);
  sub_1C617D7D4(&v81);
  sub_1C617D7D4(&__dst);
  if ((_DWORD)v120)
  {
    v51 = &v119[8 * v120 - 8];
    if (v119 < v51)
    {
      v52 = v119 + 8;
      do
      {
        v53 = *((_QWORD *)v52 - 1);
        *((_QWORD *)v52 - 1) = *(_QWORD *)v51;
        *(_QWORD *)v51 = v53;
        v51 -= 8;
        v54 = v52 >= v51;
        v52 += 8;
      }
      while (!v54);
    }
  }
  v73 = a3;
  v74 = (void **)&v119;
  v75 = 0;
  *(_QWORD *)&v76 = 0;
  DWORD2(v76) = 0;
  v77 = 0;
  *(_QWORD *)&v78 = 0;
  DWORD2(v78) = 0;
  v79 = 0;
  *(_QWORD *)&v80 = 0;
  DWORD2(v80) = 0;
  *(_QWORD *)&__dst = &off_1E8135F20;
  *((_QWORD *)&__dst + 1) = this;
  sub_1C6188A30((unsigned int *)&__dst);
  sub_1C6189218(&__dst);
  if (v119 != (char *)v121)
    free(v119);
  return this;
}

uint64_t llvm::DataDependenceGraph::DataDependenceGraph(uint64_t a1, uint64_t a2, llvm::LoopInfo *a3, char *a4)
{
  uint64_t ***v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t ***v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  char *v31;
  void **v32;
  void **v33;
  _BYTE *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v41[2];
  char *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p[2];
  uint64_t v54;
  void *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  _QWORD v59[2];
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0xA00000000;
  v8 = **(uint64_t *****)(a2 + 32);
  v9 = (uint64_t ***)v8[7];
  if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
  {
    v10 = ***v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_9:
        v18 = v14[1];
        v21 = (uint64_t)*v18;
        v19 = (char *)(v18 + 2);
        v20 = v21;
        goto LABEL_10;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_9;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_9;
  }
  v20 = 0;
  v19 = &byte_1C871356D;
LABEL_10:
  v60 = 773;
  v57 = v19;
  v58 = v20;
  v59[0] = ".";
  if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
  {
    v22 = ***v8;
    v23 = *(_QWORD *)(v22 + 152);
    v24 = *(unsigned int *)(v22 + 168);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v26 = (uint64_t ****)(v23 + 16 * v25);
      v27 = *v26;
      if (*v26 == v8)
      {
LABEL_18:
        v30 = v26[1];
        v33 = (void **)*v30;
        v31 = (char *)(v30 + 2);
        v32 = v33;
        goto LABEL_19;
      }
      v28 = 1;
      while (v27 != (uint64_t ***)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(uint64_t ****)(v23 + 16 * v25);
        if (v27 == v8)
        {
          v26 = (uint64_t ****)(v23 + 16 * v25);
          goto LABEL_18;
        }
      }
    }
    v26 = (uint64_t ****)(v23 + 16 * v24);
    goto LABEL_18;
  }
  v32 = 0;
  v31 = &byte_1C871356D;
LABEL_19:
  v41[0] = &v57;
  v42 = v31;
  v43 = v32;
  LOWORD(v44) = 1282;
  llvm::Twine::str((llvm::Twine *)v41, __p);
  *(_QWORD *)a1 = &unk_1E8136050;
  v34 = (_BYTE *)(a1 + 8);
  if (SHIBYTE(v54) < 0)
  {
    sub_1C47EBC30(v34, __p[0], (unint64_t)__p[1]);
    v35 = SHIBYTE(v54);
    v37 = *((_OWORD *)a4 + 1);
    v36 = *((_OWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 48) = v37;
    *(_OWORD *)(a1 + 64) = v36;
    *(_QWORD *)(a1 + 80) = 0;
    if (v35 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v34 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v54;
    v39 = *((_OWORD *)a4 + 1);
    v38 = *((_OWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 48) = v39;
    *(_OWORD *)(a1 + 64) = v38;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)a1 = &off_1E8135F00;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  sub_1C4DFE414((uint64_t)__p, a2);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)__p, a3);
  v57 = (char *)v59;
  v58 = 0x800000000;
  sub_1C61898C0((unsigned int *)&v57, (uint64_t)v56, (uint64_t)v56, (uint64_t)v55, (uint64_t)v55);
  v42 = a4;
  v43 = (void **)&v57;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v41[0] = &off_1E8135F20;
  v41[1] = a1;
  sub_1C6188A30((unsigned int *)v41);
  sub_1C6189218(v41);
  if (v57 != (char *)v59)
    free(v57);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  MEMORY[0x1CAA32FB4](__p[1], 8);
  return a1;
}

void llvm::DataDependenceGraph::~DataDependenceGraph(llvm::DataDependenceGraph *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  *(_QWORD *)this = &off_1E8135F00;
  v2 = *((unsigned int *)this + 24);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 11);
    v4 = &v3[v2];
    do
    {
      v5 = *v3;
      v6 = *(_QWORD **)(*v3 + 32);
      v7 = *(_QWORD **)(*v3 + 40);
      if (v6 == v7)
        goto LABEL_8;
      do
      {
        if (*v6)
          MEMORY[0x1CAA32FC0](*v6, 0x1020C403A5D3213);
        ++v6;
      }
      while (v6 != v7);
      if (v5)
LABEL_8:
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      ++v3;
    }
    while (v3 != v4);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 23), 8);
  *(_QWORD *)this = &unk_1E8136050;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  v8 = (char *)*((_QWORD *)this + 11);
  if (v8 != (char *)this + 104)
    free(v8);
}

{
  llvm::DataDependenceGraph::~DataDependenceGraph(this);
  JUMPOUT(0x1CAA32FC0);
}

BOOL llvm::DDGBuilder::areNodesMergeable(llvm::DDGBuilder *this, const llvm::DDGNode *a2, const llvm::DDGNode *a3)
{
  return (*((_DWORD *)a2 + 14) - 1) <= 1
      && (*((_DWORD *)a3 + 14) - 1) <= 1
      && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * *((unsigned int *)a2 + 18) - 8) + 40) == *(_QWORD *)(**((_QWORD **)a3 + 8) + 40);
}

void *sub_1C4DFE328(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(8 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 8 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_1C4DFE394(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

uint64_t sub_1C4DFE414(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = a2;
  v4 = ((*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  v5 = v4 | (v4 >> 1) | ((v4 | (v4 >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  sub_1C476B10C((_DWORD *)(a1 + 8), ((v6 >> 16) | v6) + 1);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1C4DB1D18(a1 + 32, ((*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  return a1;
}

uint64_t sub_1C4DFE484(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8136050;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C4DFE4C4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8136050;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

unsigned int *sub_1C4DFE514(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 8 * v2;
      do
      {
        *v6++ = -4096;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(8 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 2;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

unsigned int *sub_1C4DFE610(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = v5 + ((a3 - a2) >> 3);
  if (v6 > result[3])
  {
    v7 = a3;
    v8 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 8);
    a3 = v7;
    a2 = v8;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 8 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

_QWORD *sub_1C4DFE698(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;

  result[8] = result[7];
  if (result[10] != result[11])
  {
    v1 = (uint64_t)result;
    v2 = (uint64_t)(result + 1);
    do
    {
      sub_1C61897D4(v1);
      v41 = 0;
      v4 = *(_QWORD *)(v1 + 80);
      v3 = *(_QWORD *)(v1 + 88);
      v5 = *(_QWORD *)(v3 - 32);
      v41 = v5;
      v6 = *(_DWORD *)(v3 - 8);
      *(_QWORD *)(v1 + 88) = v3 - 32;
      if (v4 != v3 - 32 && *(_DWORD *)(v3 - 40) > v6)
        *(_DWORD *)(v3 - 40) = v6;
      v7 = *(_DWORD *)(v1 + 24);
      if (v7)
      {
        v8 = *(_QWORD *)(v1 + 8);
        v9 = v7 - 1;
        v10 = v9 & ((v5 >> 4) ^ (v5 >> 9));
        result = (_QWORD *)(v8 + 16 * v10);
        v11 = *result;
        if (v5 == *result)
          goto LABEL_21;
        v12 = 0;
        v13 = 1;
        while (v11 != -4096)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -8192;
          if (v14)
            v12 = result;
          v15 = v10 + v13++;
          v10 = v15 & v9;
          result = (_QWORD *)(v8 + 16 * v10);
          v11 = *result;
          if (v5 == *result)
            goto LABEL_21;
        }
        if (v12)
          v16 = v12;
        else
          v16 = result;
      }
      else
      {
        v16 = 0;
      }
      result = sub_1C4DE3FA0(v2, (uint64_t)&v41, &v41, v16);
      *result = v41;
      *((_DWORD *)result + 2) = 0;
LABEL_21:
      if (v6 == *((_DWORD *)result + 2))
      {
        v17 = *(_QWORD **)(v1 + 64);
        while (1)
        {
          v18 = *(_QWORD *)(v1 + 40);
          v19 = *(_QWORD *)(v1 + 72);
          if ((unint64_t)v17 >= v19)
          {
            v21 = *(_QWORD **)(v1 + 56);
            v22 = v17 - v21;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              abort();
            v24 = v19 - (_QWORD)v21;
            if (v24 >> 2 > v23)
              v23 = v24 >> 2;
            v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
            if (v25)
            {
              if (v25 >> 61)
                sub_1C4764EE4();
              v26 = (char *)operator new(8 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[8 * v22];
            *(_QWORD *)v27 = *(_QWORD *)(v18 - 8);
            v20 = v27 + 8;
            if (v17 != v21)
            {
              do
              {
                v28 = *--v17;
                *((_QWORD *)v27 - 1) = v28;
                v27 -= 8;
              }
              while (v17 != v21);
              v17 = *(_QWORD **)(v1 + 56);
            }
            *(_QWORD *)(v1 + 56) = v27;
            *(_QWORD *)(v1 + 64) = v20;
            *(_QWORD *)(v1 + 72) = &v26[8 * v25];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *v17 = *(_QWORD *)(v18 - 8);
            v20 = v17 + 1;
          }
          *(_QWORD *)(v1 + 64) = v20;
          *(_QWORD *)(v1 + 40) -= 8;
          v29 = v20 - 1;
          v30 = *(_DWORD *)(v1 + 24);
          if (!v30)
            break;
          v31 = *(_QWORD *)(v1 + 8);
          v32 = *v29;
          v33 = v30 - 1;
          v34 = ((*v29 >> 4) ^ (*v29 >> 9)) & v33;
          result = (_QWORD *)(v31 + 16 * v34);
          v35 = *result;
          if (*v29 != *result)
          {
            v36 = 0;
            v37 = 1;
            while (v35 != -4096)
            {
              if (v36)
                v38 = 0;
              else
                v38 = v35 == -8192;
              if (v38)
                v36 = result;
              v39 = v34 + v37++;
              v34 = v39 & v33;
              result = (_QWORD *)(v31 + 16 * v34);
              v35 = *result;
              if (v32 == *result)
                goto LABEL_58;
            }
            if (v36)
              v40 = v36;
            else
              v40 = result;
            goto LABEL_57;
          }
LABEL_58:
          *((_DWORD *)result + 2) = -1;
          v17 = v20;
          if (v32 == v41)
            return result;
        }
        v40 = 0;
LABEL_57:
        result = sub_1C4DE3FA0(v2, (uint64_t)(v20 - 1), v20 - 1, v40);
        *result = *v29;
        *((_DWORD *)result + 2) = 0;
        v20 = *(_QWORD **)(v1 + 64);
        v32 = *(v20 - 1);
        goto LABEL_58;
      }
    }
    while (*(_QWORD *)(v1 + 80) != *(_QWORD *)(v1 + 88));
  }
  return result;
}

_QWORD *sub_1C4DFE97C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_16:
    v6 = sub_1C4DE3FA0(a1, (uint64_t)a2, a2, v13);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v12 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_16;
  }
  return v6;
}

_QWORD *sub_1C4DFEA3C(void **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_1C4764EE4();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  *(_QWORD *)v11 = *a2;
  v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      v13 = *((_QWORD *)v2 - 1);
      v2 -= 8;
      *((_QWORD *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

void *sub_1C4DFEB14(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(16 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 16 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_1C4DFEB80(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9 - 4);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

_QWORD *sub_1C4DFEC00(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6189A80(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DFECB8()
{
  __n128 v1;
  int v2;
  int v3;
  char v4;
  char *v5;

  v4 = 1;
  v5 = &v4;
  v2 = 1;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Simplify DDG by merging nodes that have less interesting edges.";
  v1.n128_u64[1] = 63;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED7F1208, "ddg-simplify", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F1208, &dword_1C475E000);
  v4 = 1;
  v5 = &v4;
  v2 = 1;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Create pi-block nodes.";
  v1.n128_u64[1] = 22;
  sub_1C61892CC(&v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F12C8, &dword_1C475E000);
}

_QWORD *llvm::DDGDotPrinterPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char v6;
  size_t v7;
  std::string *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  const char *p_p;
  size_t v19;
  llvm::raw_ostream *v20;
  _DWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  void *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  char v30;
  const void *v31;
  std::string::size_type v32;
  std::string *p_dst;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  llvm::raw_ostream *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  std::string *v47;
  size_t size;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  std::string *v55;
  size_t v56;
  uint64_t v57;
  _BYTE *v58;
  _WORD *v59;
  uint64_t v60;
  _QWORD v61[4];
  __int16 v62;
  int v63;
  const std::error_category *v64;
  _QWORD v65[4];
  __int16 v66;
  void *__p;
  size_t v68;
  char v69;
  void *v70;
  uint64_t v71;
  char v72;
  llvm::raw_ostream *v73[2];
  char v74;
  char v75;
  __int128 v76;
  uint64_t v77;
  std::string __dst;
  std::string v79;

  v5 = *(_QWORD *)(llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a2, &llvm::DDGAnalysis::Key, a1, a3)+ 8);
  v6 = byte_1ED7F1408;
  if (byte_1ED7F14DF >= 0)
    v7 = byte_1ED7F14DF & 0x7F;
  else
    v7 = qword_1ED7F14D0;
  sub_1C484371C((uint64_t)&v79, v7 + 1);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v79;
  else
    v8 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (byte_1ED7F14DF >= 0)
      v9 = &qword_1ED7F14C8;
    else
      v9 = (uint64_t *)qword_1ED7F14C8;
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
  v10 = *(_QWORD *)(v5 + 8);
  v11 = *(_BYTE *)(v5 + 31);
  v12 = v11;
  if (v11 >= 0)
    v10 = v5 + 8;
  v13 = *(_QWORD *)(v5 + 16);
  v14 = v11 & 0x7F;
  if (v12 >= 0)
    v13 = v14;
  v65[0] = &v79;
  v65[2] = v10;
  v65[3] = v13;
  v66 = 1284;
  v61[0] = v65;
  v61[2] = ".dot";
  v62 = 770;
  llvm::Twine::str((llvm::Twine *)v61, &__p);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v16 = (llvm::raw_ostream *)llvm::errs(v15);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 8)
  {
    *(_BYTE *)(v17 + 8) = 39;
    *(_QWORD *)v17 = *(_QWORD *)"Writing '";
    *((_QWORD *)v16 + 4) += 9;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, "Writing '", 9uLL);
  }
  if (v69 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (v69 >= 0)
    v19 = v69 & 0x7F;
  else
    v19 = v68;
  v20 = llvm::raw_ostream::write(v16, p_p, v19);
  v21 = (_DWORD *)*((_QWORD *)v20 + 4);
  if (*((_QWORD *)v20 + 3) - (_QWORD)v21 > 3uLL)
  {
    *v21 = 774778407;
    *((_QWORD *)v20 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v20, "'...", 4uLL);
  }
  v63 = 0;
  v64 = std::system_category();
  if (v69 >= 0)
    v22 = &__p;
  else
    v22 = __p;
  if (v69 >= 0)
    v23 = v69 & 0x7F;
  else
    v23 = v68;
  v24 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v61, v22, v23, (uint64_t)&v63, 1);
  if (v63)
  {
    v25 = (llvm::raw_ostream *)llvm::errs(v24);
    v26 = (void *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0x20uLL)
    {
      qmemcpy(v26, "  error opening file for writing!", 33);
      *((_QWORD *)v25 + 4) += 33;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v25, "  error opening file for writing!", 0x21uLL);
    }
    goto LABEL_37;
  }
  v60 = v5;
  v66 = 257;
  v73[0] = (llvm::raw_ostream *)v61;
  v73[1] = (llvm::raw_ostream *)&v60;
  v75 = v6;
  v74 = 0;
  llvm::Twine::str((llvm::Twine *)v65, &v70);
  v30 = *(_BYTE *)(v60 + 31);
  if (v30 >= 0)
    v31 = (const void *)(v60 + 8);
  else
    v31 = *(const void **)(v60 + 8);
  if (v30 >= 0)
    v32 = v30 & 0x7F;
  else
    v32 = *(_QWORD *)(v60 + 16);
  if (v32 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v32 >= 0x17)
  {
    v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v34 = v32 | 7;
    v35 = v34 + 1;
    p_dst = (std::string *)operator new(v34 + 1);
    __dst.__r_.__value_.__l.__size_ = v32;
    __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_55;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32;
  p_dst = &__dst;
  if (v32)
LABEL_55:
    memmove(p_dst, v31, v32);
  p_dst->__r_.__value_.__s.__data_[v32] = 0;
  v36 = std::string::insert(&__dst, 0, "DDG for '");
  v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v79, "'");
  v39 = v38->__r_.__value_.__r.__words[2];
  v76 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v77 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v40 = v72 & 0x7F;
  if (v72 < 0)
    v40 = v71;
  if (v40)
  {
    v42 = v73[0];
    v45 = *((_QWORD *)v73[0] + 4);
    if ((unint64_t)(*((_QWORD *)v73[0] + 3) - v45) > 8)
    {
      *(_BYTE *)(v45 + 8) = 34;
      *(_QWORD *)v45 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v42 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v73[0], "digraph \"", 9uLL);
    }
    v46 = (char *)&v70;
  }
  else
  {
    v41 = *((_QWORD *)&v76 + 1);
    if (v77 >= 0)
      v41 = HIBYTE(v77) & 0x7F;
    v42 = v73[0];
    v43 = *((_QWORD *)v73[0] + 4);
    v44 = *((_QWORD *)v73[0] + 3) - v43;
    if (!v41)
    {
      if (v44 > 0x11)
      {
        *(_WORD *)(v43 + 16) = 2683;
        *(_OWORD *)v43 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)v42 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v73[0], "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_88;
    }
    if (v44 > 8)
    {
      *(_BYTE *)(v43 + 8) = 34;
      *(_QWORD *)v43 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v42 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v73[0], "digraph \"", 9uLL);
    }
    v46 = (char *)&v76;
  }
  llvm::DOT::EscapeString(v46, &v79);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v79;
  else
    v47 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v79.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v42, (const char *)v47, size);
  v49 = (_DWORD *)*((_QWORD *)v42 + 4);
  if (*((_QWORD *)v42 + 3) - (_QWORD)v49 > 3uLL)
  {
    *v49 = 175841314;
    *((_QWORD *)v42 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v42, "\" {\n", 4uLL);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
LABEL_88:
  v50 = v72 & 0x7F;
  if (v72 < 0)
    v50 = v71;
  if (v50)
  {
    v54 = (_QWORD *)*((_QWORD *)v42 + 4);
    if (*((_QWORD *)v42 + 3) - (_QWORD)v54 > 7uLL)
    {
      *v54 = 0x223D6C6562616C09;
      *((_QWORD *)v42 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v42, "\tlabel=\"", 8uLL);
    }
    v53 = (char *)&v70;
  }
  else
  {
    v51 = HIBYTE(v77) & 0x7F;
    if (v77 < 0)
      v51 = *((_QWORD *)&v76 + 1);
    if (!v51)
      goto LABEL_110;
    v52 = (_QWORD *)*((_QWORD *)v42 + 4);
    if (*((_QWORD *)v42 + 3) - (_QWORD)v52 > 7uLL)
    {
      *v52 = 0x223D6C6562616C09;
      *((_QWORD *)v42 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v42, "\tlabel=\"", 8uLL);
    }
    v53 = (char *)&v76;
  }
  llvm::DOT::EscapeString(v53, &v79);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v79;
  else
    v55 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = *((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x7F;
  else
    v56 = v79.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v42, (const char *)v55, v56);
  v57 = *((_QWORD *)v42 + 4);
  if ((unint64_t)(*((_QWORD *)v42 + 3) - v57) > 2)
  {
    *(_BYTE *)(v57 + 2) = 10;
    *(_WORD *)v57 = 15138;
    *((_QWORD *)v42 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v42, "\";\n", 3uLL);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
LABEL_110:
  *((_BYTE *)&v79.__r_.__value_.__s + 23) = 0;
  v79.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(v42, (const char *)&v79, 0);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  v58 = (_BYTE *)*((_QWORD *)v42 + 4);
  if (*((_BYTE **)v42 + 3) == v58)
  {
    llvm::raw_ostream::write(v42, "\n", 1uLL);
  }
  else
  {
    *v58 = 10;
    ++*((_QWORD *)v42 + 4);
  }
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
  sub_1C6189B34((uint64_t)v73);
  v59 = (_WORD *)*((_QWORD *)v42 + 4);
  if (*((_QWORD *)v42 + 3) - (_QWORD)v59 > 1uLL)
  {
    *v59 = 2685;
    *((_QWORD *)v42 + 4) += 2;
  }
  else
  {
    v25 = llvm::raw_ostream::write(v42, "}\n", 2uLL);
  }
  if (v72 < 0)
    operator delete(v70);
LABEL_37:
  v27 = (llvm::raw_ostream *)llvm::errs(v25);
  v28 = (_BYTE *)*((_QWORD *)v27 + 4);
  if (*((_BYTE **)v27 + 3) == v28)
  {
    llvm::raw_ostream::write(v27, "\n", 1uLL);
  }
  else
  {
    *v28 = 10;
    ++*((_QWORD *)v27 + 4);
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v61);
  if (v69 < 0)
    operator delete(__p);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getNodeLabel(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1)
    llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleNodeLabel(a2, a4);
  else
    llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(a2, a3, a4);
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleNodeLabel(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  llvm::Value **v6;
  uint64_t v7;
  _DWORD *v8;
  const char *v9;
  size_t v10;
  __int128 v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;

  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = __p;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v4 = *(_DWORD *)(a1 + 56);
  if ((v4 - 1) > 1)
  {
    if (v4 == 3)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v12, "pi-block\nwith\n", 0xEuLL);
      sub_1C5E21910((llvm::raw_ostream *)&v12, *(unsigned int *)(a1 + 72), 0, 0, 0);
      v8 = v16;
      if ((unint64_t)(v15 - v16) > 6)
      {
        *(_DWORD *)(v16 + 3) = 175334756;
        *v8 = 1685024288;
        v16 += 7;
        goto LABEL_14;
      }
      v9 = " nodes\n";
      v10 = 7;
    }
    else
    {
      v9 = "root\n";
      v10 = 5;
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&v12, v9, v10);
    goto LABEL_14;
  }
  v5 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v5)
  {
    v6 = *(llvm::Value ***)(a1 + 64);
    v7 = 8 * v5;
    do
    {
      llvm::Value::print(*v6, (llvm::raw_ostream *)&v12, 0);
      if (v15 == v16)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v12, "\n", 1uLL);
      else
        *v16++ = 10;
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
LABEL_14:
  if (*((char *)v20 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v20, (unint64_t)v20[1]);
  }
  else
  {
    v11 = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 16) = v20[2];
    *(_OWORD *)a2 = v11;
  }
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  size_t v16;
  _DWORD *v17;
  const char *v18;
  size_t v19;
  void *v20;
  __int128 v21;
  _BYTE *v22;
  void *__p[2];
  char v24;
  void (**v25)(llvm::raw_ostream *__hidden);
  int v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  char v30;
  uint64_t v31;
  int v32;
  void **v33;
  void *v34[2];
  uint64_t v35;

  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v26 = 0;
  v30 = 0;
  v31 = 0;
  v25 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v33 = v34;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "<kind:", 6uLL);
  llvm::operator<<((llvm::raw_ostream *)&v25, *(_DWORD *)(a1 + 56));
  if ((unint64_t)(v28 - v29) > 1)
  {
    *(_WORD *)v29 = 2622;
    v29 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v25, ">\n", 2uLL);
  }
  v6 = *(_DWORD *)(a1 + 56);
  if ((v6 - 1) > 1)
  {
    if (v6 == 3)
    {
      v10 = v29;
      if ((unint64_t)(v28 - v29) > 0x22)
      {
        *(_DWORD *)(v29 + 31) = 170732845;
        qmemcpy(v10, "--- start of nodes in pi-block -", 32);
        v29 += 35;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "--- start of nodes in pi-block ---\n", 0x23uLL);
      }
      v11 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *(_QWORD *)(a1 + 64);
        v14 = 8 * v11;
        do
        {
          llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(__p, *(_QWORD *)(v13 + 8 * v12), a2);
          if (v24 >= 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          if (v24 >= 0)
            v16 = v24 & 0x7F;
          else
            v16 = (size_t)__p[1];
          llvm::raw_ostream::write((llvm::raw_ostream *)&v25, (const char *)v15, v16);
          if (v24 < 0)
            operator delete(__p[0]);
          if ((_DWORD)v12 + 1 != *(_DWORD *)(a1 + 72))
          {
            if (v28 == v29)
              llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "\n", 1uLL);
            else
              *v29++ = 10;
          }
          ++v12;
          v14 -= 8;
        }
        while (v14);
      }
      v20 = v29;
      if ((unint64_t)(v28 - v29) <= 0x20)
      {
        v18 = "--- end of nodes in pi-block ---\n";
        v19 = 33;
        goto LABEL_34;
      }
      v29[32] = 10;
      qmemcpy(v20, "--- end of nodes in pi-block ---", 32);
      v22 = v29 + 33;
    }
    else
    {
      v17 = v29;
      if ((unint64_t)(v28 - v29) <= 4)
      {
        v18 = "root\n";
        v19 = 5;
LABEL_34:
        llvm::raw_ostream::write((llvm::raw_ostream *)&v25, v18, v19);
        goto LABEL_35;
      }
      v29[4] = 10;
      *v17 = 1953460082;
      v22 = v29 + 5;
    }
    v29 = v22;
    goto LABEL_35;
  }
  v7 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v7)
  {
    v8 = *(llvm::Value ***)(a1 + 64);
    v9 = 8 * v7;
    do
    {
      llvm::Value::print(*v8, (llvm::raw_ostream *)&v25, 0);
      if (v28 == v29)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "\n", 1uLL);
      else
        *v29++ = 10;
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
LABEL_35:
  if (*((char *)v33 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a3, *v33, (unint64_t)v33[1]);
  }
  else
  {
    v21 = *(_OWORD *)v33;
    *(_QWORD *)(a3 + 16) = v33[2];
    *(_OWORD *)a3 = v21;
  }
  v25 = off_1E81A6E70;
  if (v32 == 1 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8077774924);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getEdgeAttributes(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;

  v6 = *a3;
  if (*a1)
    llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleEdgeAttributes(v6, a5);
  else
    llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseEdgeAttributes(a2, v6, a4, a5);
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleEdgeAttributes(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v3;
  __int128 v4;
  void (**v5)(llvm::raw_ostream *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v5 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v13 = v14;
  v12 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v3 = *(_DWORD *)(a1 + 8);
  llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "label=\"[", 8uLL);
  llvm::operator<<((llvm::raw_ostream *)&v5, v3);
  if ((unint64_t)(v8 - (_QWORD)v9) > 1)
    *v9++ = 8797;
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "]\"", 2uLL);
  if (*((char *)v13 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v13, (unint64_t)v13[1]);
  }
  else
  {
    v4 = *(_OWORD *)v13;
    *(_QWORD *)(a2 + 16) = v13[2];
    *(_OWORD *)a2 = v4;
  }
  v5 = off_1E81A6E70;
  if (v12 == 1 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseEdgeAttributes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  void **v9;
  size_t v10;
  __int128 v11;
  void *__p[2];
  char v13;
  void (**v14)(llvm::raw_ostream *__hidden);
  int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *v23[2];
  uint64_t v24;

  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v14 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v22 = v23;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "label=\"[", 8uLL);
  if (v8 == 2)
  {
    llvm::DependenceGraphInfo<llvm::DDGNode>::getDependenceString(a3, a1, *(_QWORD *)a2, (uint64_t)__p);
    if (v13 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if (v13 >= 0)
      v10 = v13 & 0x7F;
    else
      v10 = (size_t)__p[1];
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, (const char *)v9, v10);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    llvm::operator<<((llvm::raw_ostream *)&v14, v8);
  }
  if ((unint64_t)(v17 - (_QWORD)v18) > 1)
    *v18++ = 8797;
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "]\"", 2uLL);
  if (*((char *)v22 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a4, *v22, (unint64_t)v22[1]);
  }
  else
  {
    v11 = *(_OWORD *)v22;
    *(_QWORD *)(a4 + 16) = v22[2];
    *(_OWORD *)a4 = v11;
  }
  v14 = off_1E81A6E70;
  if (v21 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
}

BOOL llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::isNodeHidden(_BYTE *a1, const llvm::DDGNode *a2, llvm::DataDependenceGraph *this)
{
  return *a1 && *((_DWORD *)a2 + 14) == 4 || llvm::DataDependenceGraph::getPiBlock(this, a2) != 0;
}

void llvm::DependenceGraphInfo<llvm::DDGNode>::getDependenceString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[2];
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = __p;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v24 = v26;
  v25 = 0x100000000;
  if (!llvm::DependenceGraphInfo<llvm::DDGNode>::getDependencies(a1, a2, a3, (uint64_t)&v24))
  {
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 16) = v22;
      goto LABEL_6;
    }
    v5 = __p[0];
    v6 = __p[1];
    goto LABEL_5;
  }
  v23[0] = ", ";
  v23[1] = 2;
  sub_1C6189EB0((uint64_t)v24, (llvm::Dependence **)&v24[v25], (llvm::raw_ostream *)&v12, (llvm::raw_ostream *)&v12, (uint64_t)v23);
  if (*((char *)v20 + 23) < 0)
  {
    v5 = *v20;
    v6 = v20[1];
LABEL_5:
    sub_1C47EBC30((_BYTE *)a4, v5, (unint64_t)v6);
    goto LABEL_6;
  }
  v11 = *(_OWORD *)v20;
  *(_QWORD *)(a4 + 16) = v20[2];
  *(_OWORD *)a4 = v11;
LABEL_6:
  v7 = v24;
  if ((_DWORD)v25)
  {
    v8 = v25;
    v9 = v24 - 1;
    do
    {
      v10 = v9[v8];
      v9[v8] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      --v8;
    }
    while (v8 * 8);
    v7 = v24;
  }
  if (v7 != v26)
    free(v7);
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_1C4E00020(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  BOOL v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  const char *v27;
  int v28;
  llvm::raw_ostream *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  std::string *p_p;
  size_t size;
  uint64_t v37;
  void *v38;
  std::string *v39;
  size_t v40;
  llvm::raw_ostream *v41;
  uint64_t *v42;
  _WORD *v43;
  unint64_t v44;
  const char *v45;
  size_t v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  const llvm::DDGNode *v52;
  uint64_t v53;
  uint64_t *v54;
  const llvm::DDGNode *v55;
  uint64_t v56;
  uint64_t v57;
  std::string __p;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  void **v64;
  void *v65[2];
  uint64_t v66;
  void *v67[2];
  char v68;

  v68 = 0;
  LOBYTE(v67[0]) = 0;
  v4 = *(llvm::raw_ostream **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1685016073;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x3D65706168735B20;
    *((_QWORD *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  v7 = *(llvm::raw_ostream **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24) - v8;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v9 <= 4)
    {
      v10 = "none,";
      v11 = 5;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_BYTE *)(v8 + 4) = 44;
    *(_DWORD *)v8 = 1701736302;
    v56 = *((_QWORD *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = "record,";
      v11 = 7;
      goto LABEL_10;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)v8 = 1868785010;
    v56 = *((_QWORD *)v7 + 4) + 7;
  }
  *((_QWORD *)v7 + 4) = v56;
LABEL_11:
  if (v68 >= 0)
    v12 = v68 & 0x7F;
  else
    v12 = (size_t)v67[1];
  if (v12)
  {
    if (v68 >= 0)
      v13 = (const char *)v67;
    else
      v13 = (const char *)v67[0];
    v14 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v13, v12);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *v15 = 44;
      ++*((_QWORD *)v14 + 4);
    }
  }
  v16 = *(llvm::raw_ostream **)a1;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)v17 = 1700946284;
    *((_QWORD *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v19 = *(_QWORD *)(a2 + 32);
    v18 = *(_QWORD *)(a2 + 40);
    if (v19 == v18)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v20 = 0;
      v21 = v19 + 8;
      do
      {
        v22 = v20 + 1;
        v23 = v21 != v18;
        if (v21 == v18)
          break;
        v21 += 8;
        v24 = v20++ == 63;
      }
      while (!v24);
    }
    if (v22 <= 1)
      v28 = 1;
    else
      v28 = v22;
    v29 = *(llvm::raw_ostream **)a1;
    v30 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v30 > 0x30uLL)
    {
      qmemcpy(v30, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v31 = (void *)(*((_QWORD *)v29 + 4) + 49);
      *((_QWORD *)v29 + 4) = v31;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v31 = (void *)*((_QWORD *)v29 + 4);
    }
    v32 = (v28 + v23);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v31 > 0x2EuLL)
    {
      qmemcpy(v31, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v29 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v29, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1C5E21910(v29, v32, 0, 0, 0);
    v33 = (_WORD *)*((_QWORD *)v29 + 4);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v33 <= 1uLL)
    {
      v27 = "\">";
      v25 = v29;
      goto LABEL_41;
    }
    *v33 = 15906;
    *((_QWORD *)v29 + 4) += 2;
  }
  else
  {
    v25 = *(llvm::raw_ostream **)a1;
    v26 = *(_WORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v26 <= 1uLL)
    {
      v27 = "\"{";
LABEL_41:
      llvm::raw_ostream::write(v25, v27, 2uLL);
      goto LABEL_42;
    }
    *v26 = 31522;
    *((_QWORD *)v25 + 4) += 2;
  }
LABEL_42:
  v34 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 17))
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleNodeLabel(a2, (uint64_t)&__p);
    else
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(a2, **(_QWORD **)(a1 + 8), (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v34, (const char *)p_p, size);
    v37 = *((_QWORD *)v34 + 4);
    if ((unint64_t)(*((_QWORD *)v34 + 3) - v37) > 4)
    {
      *(_BYTE *)(v37 + 4) = 62;
      *(_DWORD *)v37 = 1685335868;
      *((_QWORD *)v34 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v34, "</td>", 5uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_69:
      operator delete(v38);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 17))
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleNodeLabel(a2, (uint64_t)v65);
    else
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseNodeLabel(a2, **(_QWORD **)(a1 + 8), (uint64_t)v65);
    llvm::DOT::EscapeString((char *)v65, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v40 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v34, (const char *)v39, v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66) < 0)
    {
      v38 = v65[0];
      goto LABEL_69;
    }
  }
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v61 = 0;
  v62 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v64 = v65;
  v63 = 0;
  v59 = 0;
  v60 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
    v41 = *(llvm::raw_ostream **)a1;
    v42 = (uint64_t *)(*(_QWORD *)a1 + 32);
    v43 = (_WORD *)*v42;
    v44 = *(_QWORD *)(*(_QWORD *)a1 + 24) - *v42;
    if (*(_BYTE *)(a1 + 16))
    {
      if (v44 <= 0xD)
      {
        v45 = "</tr></table>>";
        v46 = 14;
LABEL_77:
        llvm::raw_ostream::write(v41, v45, v46);
        goto LABEL_78;
      }
      qmemcpy(v43, "</tr></table>>", 14);
      v57 = *v42 + 14;
      goto LABEL_117;
    }
  }
  else
  {
    v41 = *(llvm::raw_ostream **)a1;
    v42 = (uint64_t *)(*(_QWORD *)a1 + 32);
    v43 = (_WORD *)*v42;
    v44 = *(_QWORD *)(*(_QWORD *)a1 + 24) - *v42;
  }
  if (v44 <= 1)
  {
    v45 = "}\"";
    v46 = 2;
    goto LABEL_77;
  }
  *v43 = 8829;
  v57 = *v42 + 2;
LABEL_117:
  *v42 = v57;
LABEL_78:
  v47 = *(llvm::raw_ostream **)a1;
  v48 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v48) > 2)
  {
    *(_BYTE *)(v48 + 2) = 10;
    *(_WORD *)v48 = 15197;
    *((_QWORD *)v47 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v47, "];\n", 3uLL);
  }
  v49 = *(uint64_t **)(a2 + 32);
  v50 = *(uint64_t **)(a2 + 40);
  if (v49 != v50)
  {
    v51 = 0;
    do
    {
      v52 = *(const llvm::DDGNode **)v49[v51];
      if ((!*(_BYTE *)(a1 + 17) || *((_DWORD *)v52 + 14) != 4)
        && !llvm::DataDependenceGraph::getPiBlock(**(llvm::DataDependenceGraph ***)(a1 + 8), v52))
      {
        sub_1C4E00784(a1, a2, &v49[v51], sub_1C6189BBC);
      }
      v53 = v51 * 8 + 8;
      if (&v49[v51 + 1] == v50)
        break;
      v24 = (_DWORD)(v51 * 8) == 504;
      ++v51;
    }
    while (!v24);
    v49 = (uint64_t *)((char *)v49 + v53);
  }
  if (v49 != v50)
  {
    v54 = v49;
    do
    {
      v55 = *(const llvm::DDGNode **)*v49;
      if ((!*(_BYTE *)(a1 + 17) || *((_DWORD *)v55 + 14) != 4)
        && !llvm::DataDependenceGraph::getPiBlock(**(llvm::DataDependenceGraph ***)(a1 + 8), v55))
      {
        sub_1C4E00784(a1, a2, v54, sub_1C6189BBC);
      }
      ++v49;
      ++v54;
    }
    while (v49 != v50);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v63 == 1 && __p.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
}

void sub_1C4E00784(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  v7 = a4(*a3);
  if (v7)
  {
    v8 = v7;
    v9 = *a3;
    if (*(_BYTE *)(a1 + 17))
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getSimpleEdgeAttributes(v9, (uint64_t)__p);
    else
      llvm::DOTGraphTraits<llvm::DataDependenceGraph const*>::getVerboseEdgeAttributes(a2, v9, **(_QWORD **)(a1 + 8), (uint64_t)__p);
    sub_1C617C7A0((llvm::raw_ostream **)a1, a2, v8, (uint64_t)__p);
    if (v11 < 0)
      operator delete(__p[0]);
  }
}

void sub_1C4E0081C(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      sub_1C6189DFC(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      sub_1C6189DFC(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v5 + 8 * v6) = v7;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_1C4E008A0(llvm::raw_ostream **a1, llvm::Dependence **a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  result = llvm::Dependence::dump(*a2, *a1);
  v4 = (uint64_t *)*((_QWORD *)*a1 + 8);
  if (*((char *)v4 + 23) < 0)
  {
    v8 = (uint64_t *)*v4;
    v7 = v4[1];
    if (*(_BYTE *)(*v4 + v7 - 1) != 10)
      return result;
    v6 = v7 - 1;
    v4[1] = v6;
    v4 = v8;
  }
  else
  {
    v5 = *((unsigned __int8 *)v4 + 23);
    if (*((_BYTE *)v4 + v5 - 1) != 10)
      return result;
    v6 = v5 - 1;
    *((_BYTE *)v4 + 23) = v6 & 0x7F;
  }
  *((_BYTE *)v4 + v6) = 0;
  return result;
}

uint64_t sub_1C4E00920()
{
  int v1;
  char v2;
  __n128 v3;
  int v4;
  const char *v5;

  v2 = 0;
  v5 = &v2;
  v4 = 1;
  v1 = 1;
  v3.n128_u64[0] = (unint64_t)"simple ddg dot graph";
  v3.n128_u64[1] = 20;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED7F1388, "dot-ddg-only", (_BYTE **)&v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F1388, &dword_1C475E000);
  v5 = "ddg";
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"The prefix used for the DDG dot file names.";
  v3.n128_u64[1] = 43;
  sub_1C47AD050((uint64_t)&qword_1ED7F1448, 0, 0);
  qword_1ED7F14C8 = 0;
  qword_1ED7F14D0 = 0;
  qword_1ED7F14F0 = 0;
  unk_1ED7F14F8 = 0;
  qword_1ED7F14E8 = 0;
  byte_1ED7F1500 = 0;
  unk_1ED7F14D8 = 0;
  unk_1ED7F14E0 = &unk_1E819E950;
  qword_1ED7F1448 = (uint64_t)&unk_1E819E480;
  qword_1ED7F1508 = (uint64_t)&unk_1E819E970;
  qword_1ED7F1510[0] = &off_1E7FA8CB8;
  qword_1ED7F1528 = (uint64_t)qword_1ED7F1510;
  sub_1C6189BC4(&v5, &v4, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F1448);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7F1448, &dword_1C475E000);
}

BOOL llvm::ConstraintSystem::eliminateUsingFM(llvm::ConstraintSystem *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int **v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int **v58;
  unsigned int v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[8];
  char *v63;
  uint64_t v64;
  _QWORD v65[42];

  v65[40] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(*(_QWORD *)this + 8);
  v63 = (char *)v65;
  v64 = 0x400000000;
  v3 = *((unsigned int *)this + 2);
  if (!(_DWORD)v3)
  {
    LODWORD(v4) = 1;
LABEL_3:
    sub_1C4E015E0((uint64_t)this, (uint64_t)&v63);
    *((_DWORD *)this + 84) = v4;
    LOBYTE(v5) = 1;
    goto LABEL_88;
  }
  v6 = 0;
  v5 = 0;
  v7 = 8 * v2;
  v8 = 1;
  v4 = 1;
  v51 = v2;
  v50 = *((unsigned int *)this + 2);
  while (1)
  {
    v9 = (_QWORD **)(*(_QWORD *)this + 80 * v6);
    if (!(*v9)[1])
    {
      v45 = v8;
      v60 = v62;
      v62[0] = **v9;
      v61 = 0x800000001;
      if (v2 >= 3)
      {
        v46 = 1;
        v47 = 16;
        do
        {
          v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80 * v6) + v47);
          if (v46 >= HIDWORD(v61))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v46 + 1, 8);
            v46 = v61;
          }
          *((_QWORD *)v60 + v46) = v48;
          v46 = v61 + 1;
          LODWORD(v61) = v61 + 1;
          v47 += 8;
        }
        while (v7 != v47);
      }
      sub_1C6189F54((uint64_t)&v63, (unint64_t)&v60);
      if (v60 != v62)
        free(v60);
      v44 = v6 + 1;
      v8 = v45;
      goto LABEL_75;
    }
    v10 = v8;
    v11 = __OFSUB__(v6 + 1, v3);
    if (v6 + 1 < v3)
      break;
LABEL_74:
    v44 = v6 + 1;
LABEL_75:
    ++v8;
    v6 = v44;
    v5 = v44 >= v3;
    if (v44 == v3)
      goto LABEL_3;
  }
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80 * v10) + 8);
    if (!v12)
      goto LABEL_13;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 80 * v6) + 8);
    if ((v13 & v12) < 0 != v11)
      goto LABEL_13;
    v14 = v12 < 1 || v13 <= 0;
    if (!v14)
      goto LABEL_13;
    v53 = v5;
    v52 = v8;
    v60 = v62;
    v61 = 0x800000000;
    if ((_DWORD)v2)
      break;
LABEL_16:
    sub_1C6189F54((uint64_t)&v63, (unint64_t)&v60);
    v15 = v64;
    if (v60 != v62)
      free(v60);
    v14 = v15 > 0x1F4;
    v3 = v50;
    LODWORD(v2) = v51;
    v8 = v52;
    v5 = v53;
    if (v14)
      goto LABEL_88;
LABEL_13:
    v11 = __OFSUB__((_DWORD)v3, (_DWORD)++v10);
    if ((_DWORD)v3 == (_DWORD)v10)
      goto LABEL_74;
  }
  v16 = 0;
  v17 = v12 < 0;
  if (v12 >= 0)
    v18 = v10;
  else
    v18 = v6;
  if (v17)
    v19 = v10;
  else
    v19 = v6;
  v20 = v18;
  v21 = v19;
  while (2)
  {
    if (v16 == 8)
    {
LABEL_72:
      v16 += 8;
      if (v7 == v16)
        goto LABEL_16;
      continue;
    }
    break;
  }
  v22 = *(_QWORD *)(*(_QWORD *)this + 80 * v20);
  v23 = *(_QWORD *)(v22 + v16);
  v24 = *(_QWORD *)(*(_QWORD *)this + 80 * v21);
  v25 = *((unsigned int *)this + 84);
  v26 = *(_QWORD *)(v24 + 8) / v25;
  v27 = -v26;
  if (v23 >= 0)
    v28 = *(_QWORD *)(v22 + v16);
  else
    v28 = -v23;
  if (v26 >= 0)
    v29 = *(_QWORD *)(v24 + 8) / v25;
  else
    v29 = -v26;
  v30 = v23 ^ v27;
  if ((v23 ^ v27) >= 0)
    v31 = v29 * v28;
  else
    v31 = -(uint64_t)(v29 * v28);
  if (!v23 || !v26 || (v30 < 0 ? (v32 = 0x8000000000000000) : (v32 = 0x7FFFFFFFFFFFFFFFLL), v28 <= v32 / v29))
  {
    v33 = *(_QWORD *)(v24 + v16);
    v34 = *(_QWORD *)(v22 + 8);
    v35 = v34 / v25;
    if (v33 >= 0)
      v36 = *(_QWORD *)(v24 + v16);
    else
      v36 = -v33;
    if (v35 >= 0)
      v37 = v34 / v25;
    else
      v37 = -v35;
    v38 = v37 * v36;
    if ((v35 ^ v33) < 0)
      v38 = -(uint64_t)v38;
    if (!v33
      || !v35
      || ((v35 ^ v33) < 0 ? (v39 = 0x8000000000000000) : (v39 = 0x7FFFFFFFFFFFFFFFLL), v36 <= v39 / v37))
    {
      v40 = v31 + v38;
      if (!__OFADD__(v31, v38))
      {
        v41 = v61;
        if (v61 >= (unint64_t)HIDWORD(v61))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 8);
          v41 = v61;
        }
        *((_QWORD *)v60 + v41) = v40;
        LODWORD(v61) = v61 + 1;
        v42 = *((unsigned int *)v60 + 2 * v61 - 2);
        v57 = 32;
        v56 = v42;
        v55 = 32;
        v54 = v4;
        llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v56, (uint64_t)&v54, (uint64_t)&v58);
        v43 = (unsigned int **)&v58;
        if (v59 >= 0x41)
          v43 = v58;
        v4 = *(unsigned int *)v43;
        if (v59 >= 0x41 && v58)
          MEMORY[0x1CAA32F9C]();
        if (v55 >= 0x41 && v54)
          MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
        if (v57 >= 0x41 && v56)
          MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
        goto LABEL_72;
      }
    }
  }
  if (v60 != v62)
    free(v60);
  LOBYTE(v5) = v53;
LABEL_88:
  sub_1C618A4D0(&v63);
  return v5;
}

char **llvm::ConstraintSystem::dump(char **result, const void **a2)
{
  int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  void *v11;
  char v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v17;
  std::string v18;
  void *__p;
  __int128 v20;
  _QWORD v21[2];
  char *v22;
  uint64_t v23;
  _QWORD v24[50];

  v24[48] = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v3 = *result;
    v17 = (uint64_t)&(*result)[80 * v2];
    do
    {
      v22 = (char *)v24;
      v23 = 0x1000000000;
      v4 = *((unsigned int *)v3 + 2);
      if (v4 >= 2)
      {
        v5 = 8 * v4;
        v6 = a2;
        v7 = 8;
        do
        {
          v8 = *(_QWORD *)v3;
          if (*(_QWORD *)(*(_QWORD *)v3 + v7))
          {
            __p = 0;
            v20 = 0uLL;
            v9 = *(_QWORD *)(v8 + v7);
            if (v9 != 1)
            {
              std::to_string(&v18, v9);
              v10 = std::string::append(&v18, " * ");
              v11 = (void *)v10->__r_.__value_.__r.__words[0];
              v21[0] = v10->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
              v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
              v10->__r_.__value_.__l.__size_ = 0;
              v10->__r_.__value_.__r.__words[2] = 0;
              v10->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v20) < 0)
                operator delete(__p);
              __p = v11;
              *(_QWORD *)&v20 = v21[0];
              *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)((char *)v21 + 7);
              HIBYTE(v20) = v12;
              if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v18.__r_.__value_.__l.__data_);
            }
            sub_1C4842EB8((const void **)&__p, v6, (uint64_t)&v18);
            v13 = sub_1C4E01890((uint64_t)&v22, (unint64_t)&v18, 1);
            v14 = &v22[24 * v23];
            v15 = *(_OWORD *)v13;
            *((_QWORD *)v14 + 2) = *(_QWORD *)(v13 + 16);
            *(_OWORD *)v14 = v15;
            *(_QWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)v13 = 0;
            LODWORD(v23) = v23 + 1;
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v18.__r_.__value_.__l.__data_);
            if (SHIBYTE(v20) < 0)
              operator delete(__p);
          }
          v7 += 8;
          v6 += 3;
        }
        while (v5 != v7);
      }
      result = sub_1C4E01820(&v22);
      v3 += 80;
    }
    while (v3 != (char *)v17);
  }
  return result;
}

char **llvm::ConstraintSystem::dump(char **this)
{
  const void **v2;
  unsigned int v3;
  std::string *v4;
  std::string::size_type v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  const void **v13;
  uint64_t v14;
  _QWORD v15[49];

  v15[48] = *MEMORY[0x1E0C80C00];
  v2 = (const void **)v15;
  v13 = (const void **)v15;
  v14 = 0x1000000000;
  if (*(_DWORD *)&(*this)[80 * *((unsigned int *)this + 2) - 72] >= 2u)
  {
    v3 = 1;
    do
    {
      std::to_string(&v10, v3);
      v4 = std::string::insert(&v10, 0, "x");
      v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v12 = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      v6 = sub_1C4E01890((uint64_t)&v13, (unint64_t)__p, 1);
      v7 = (char *)&v13[3 * v14];
      v8 = *(_OWORD *)v6;
      *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)v6 = 0;
      LODWORD(v14) = v14 + 1;
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      ++v3;
    }
    while (*(_DWORD *)&(*this)[80 * *((unsigned int *)this + 2) - 72] > v3);
    v2 = v13;
  }
  llvm::ConstraintSystem::dump(this, v2);
  return sub_1C4E01820((char **)&v13);
}

BOOL sub_1C4E0125C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;

  v5 = &a2[a3];
  v6 = 8 * a3;
  for (i = 8; ; i += 8)
  {
    v8 = i;
    if (v6 == i)
      break;
    if (a2[(unint64_t)i / 8])
    {
      if (a3)
      {
        v10 = 8 * a3;
        v11 = a2;
        do
        {
          v12 = *v11;
          if (*v11 < 0)
            v12 = -v12;
          v23 = 32;
          v22 = v12;
          v13 = *(unsigned int *)(a1 + 336);
          v21 = 32;
          v20 = v13;
          llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v22, (uint64_t)&v20, (uint64_t)&v24);
          v14 = v24;
          v15 = v25 >= 0x41;
          if (v25 >= 0x41)
            v16 = v24;
          else
            v16 = &v24;
          *(_DWORD *)(a1 + 336) = *v16;
          if (v15 && v14 != 0)
            MEMORY[0x1CAA32F9C]();
          if (v21 >= 0x41 && v20)
            MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
          if (v23 >= 0x41 && v22)
            MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
          ++v11;
          v10 -= 8;
        }
        while (v10);
      }
      v24 = a2;
      v19 = v5;
      sub_1C618A318(a1, (_BYTE **)&v24, (_BYTE **)&v19);
      return v6 != v8;
    }
  }
  return v6 != v8;
}

uint64_t sub_1C4E013C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)a1;
        v11 = 80 * v4;
        do
        {
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v10, v9);
          v9 += 80;
          v10 += 80;
          v11 -= 80;
        }
        while (v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        v12 = *(_QWORD *)a1;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v10 = *(_QWORD *)a1;
      }
      v13 = v12 + 80 * v5;
      while (v13 != v10)
      {
        v15 = *(void **)(v13 - 80);
        v13 -= 80;
        v14 = v15;
        if ((void *)(v13 + 16) != v15)
          free(v14);
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v16 = *(_QWORD *)a1;
        v17 = 80 * v5;
        do
        {
          v18 = *(void **)(v16 + v17 - 80);
          if ((void *)(v16 + v17 - 64) != v18)
            free(v18);
          v17 -= 80;
        }
        while (v17);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C618A1F4(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = 80 * v5;
      do
      {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v7, v6);
        v6 += 80;
        v7 += 80;
        v8 -= 80;
      }
      while (v8);
LABEL_24:
      v19 = *(unsigned int *)(a2 + 8);
      if (v5 != v19)
      {
        v21 = *(_QWORD *)a2;
        v22 = *(_QWORD *)a1;
        v23 = 80 * v5;
        v24 = 80 * v19;
        do
        {
          v25 = (_QWORD *)(v22 + v23);
          *v25 = v22 + v23 + 16;
          v25[1] = 0x800000000;
          if (*(_DWORD *)(v21 + v23 + 8))
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v25, v21 + v23);
          v22 += 80;
          v24 -= 80;
          v21 += 80;
        }
        while (v23 != v24);
      }
LABEL_25:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

unint64_t sub_1C4E01578(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 80 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C618A1F4(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C618A1F4(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C4E015E0(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v9 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v10 = 80 * v5;
          do
          {
            sub_1C614D378((uint64_t)v9, (uint64_t)v4);
            v4 += 80;
            v9 += 80;
            v10 -= 80;
          }
          while (v10);
          LODWORD(v6) = *(_DWORD *)(a1 + 8);
          v11 = *(char **)a1;
        }
        else
        {
          v11 = *(char **)a1;
        }
        v12 = &v11[80 * v6];
        while (v12 != v9)
        {
          v14 = (char *)*((_QWORD *)v12 - 10);
          v12 -= 80;
          v13 = v14;
          if (v12 + 16 != v14)
            free(v13);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v15 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v15)
        {
          v16 = *(char **)a2;
          v17 = 80 * v15;
          do
          {
            v18 = *(char **)&v16[v17 - 80];
            if (&v16[v17 - 64] != v18)
              free(v18);
            v17 -= 80;
          }
          while (v17);
        }
        goto LABEL_43;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v19 = *(char **)a1;
          v20 = 80 * v6;
          do
          {
            v21 = *(char **)&v19[v20 - 80];
            if (&v19[v20 - 64] != v21)
              free(v21);
            v20 -= 80;
          }
          while (v20);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C618A1F4(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)a1;
        v8 = 80 * v6;
        do
        {
          sub_1C614D378(v7, (uint64_t)v4);
          v4 += 80;
          v7 += 80;
          v8 -= 80;
        }
        while (v8);
        goto LABEL_32;
      }
      v6 = 0;
LABEL_32:
      v22 = *(char **)a2;
      v23 = *(unsigned int *)(a2 + 8);
      if (v6 != v23)
      {
        v24 = *(char **)a1;
        v25 = 80 * v6;
        v26 = 80 * v23;
        do
        {
          v27 = &v24[v25];
          *(_QWORD *)v27 = &v24[v25 + 16];
          *((_QWORD *)v27 + 1) = 0x800000000;
          if (*(_DWORD *)&v22[v25 + 8])
            sub_1C614D378((uint64_t)v27, (uint64_t)&v22[v25]);
          v24 += 80;
          v26 -= 80;
          v22 += 80;
        }
        while (v25 != v26);
        v22 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v28 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v28)
      {
        v29 = 80 * v28;
        do
        {
          v30 = *(char **)&v22[v29 - 80];
          if (&v22[v29 - 64] != v30)
            free(v30);
          v29 -= 80;
        }
        while (v29);
      }
LABEL_43:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C618A544((char **)a1, (char **)a2);
  }
  return a1;
}

char **sub_1C4E01820(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_1C4E01890(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C618A5D0(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C618A5D0(a1, v5);
    }
  }
  return a2;
}

void sub_1C4E018F8(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 24 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      a2 += 24;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v3 = (__int128 *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 24 * v6;
      do
      {
        if (*((char *)v7 + v8 - 1) < 0)
          operator delete(*(void **)((char *)v7 + v8 - 24));
        v8 -= 24;
      }
      while (v8);
    }
  }
}

void llvm::findArrayDimensions(llvm::SCEVDivision *a1, uint64_t a2, uint64_t a3, const llvm::SCEV ***a4)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const llvm::SCEV **v24;
  uint64_t v25;
  llvm::ScalarEvolution **v26;
  uint64_t v27;
  llvm::SCEV *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t MulExpr;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::SCEV *v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[64];
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[64];
  llvm::SCEV *v54;
  uint64_t v55;
  _QWORD v56[4];

  v56[2] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      v7 = *(uint64_t **)a2;
      v8 = *(_QWORD *)a2 + 8 * v5;
      while (1)
      {
        v9 = *v7;
        LOBYTE(v54) = 0;
        v45 = (llvm::SCEV *)&v54;
        v46 = v48;
        v47 = 0x800000000;
        v49 = v53;
        v50 = v53;
        v51 = 8;
        v52 = 0;
        sub_1C4E03128((uint64_t)&v45, v9);
        if ((_DWORD)v47 && !*(_BYTE *)v45)
        {
          v10 = *((_QWORD *)v46 + v47 - 1);
          LODWORD(v47) = v47 - 1;
          __asm { BR              X10 }
        }
        if (v50 != v49)
          free(v50);
        if (v46 != v48)
          free(v46);
        if ((_BYTE)v54)
          break;
        if (++v7 == (uint64_t *)v8)
          return;
      }
      v11 = *(unsigned int *)(a2 + 8);
      if (v11 >= 2)
      {
        qsort(*(void **)a2, v11, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C618ABDC);
        LODWORD(v11) = *(_DWORD *)(a2 + 8);
      }
      v12 = *(uint64_t **)a2;
      v13 = *(_QWORD *)a2 + 8 * v11;
      v14 = *(uint64_t **)a2;
      if ((_DWORD)v11)
      {
        v15 = 0;
        while (8 * v11 - 8 != v15)
        {
          v17 = v12[v15 / 8];
          v16 = v12[v15 / 8 + 1];
          v15 += 8;
          if (v17 == v16)
          {
            v14 = &v12[v15 / 8 - 1];
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        if (v14 != (uint64_t *)v13)
        {
          v18 = v14 + 2;
          if (v14 + 2 != (uint64_t *)v13)
          {
            v19 = *v14;
            do
            {
              v20 = v19;
              v19 = *v18;
              if (v20 != *v18)
              {
                v14[1] = v19;
                ++v14;
              }
              ++v18;
            }
            while (v18 != (uint64_t *)v13);
            v12 = *(uint64_t **)a2;
          }
          v13 = (uint64_t)(v14 + 1);
        }
      }
      v21 = (unint64_t)(v13 - (_QWORD)v12) >> 3;
      *(_DWORD *)(a2 + 8) = v21;
      v22 = 126 - 2 * __clz(v21);
      if ((_DWORD)v21)
        v23 = v22;
      else
        v23 = 0;
      sub_1C4E03B38((uint64_t)v12, &v12[v21], v23, 1);
      v25 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v25)
      {
        v26 = *(llvm::ScalarEvolution ***)a2;
        v27 = 8 * v25;
        do
        {
          v45 = 0;
          llvm::SCEVDivision::divide(a1, *v26, a4, (const llvm::SCEV *)&v45, &v54, v24);
          v28 = v45;
          if (!llvm::SCEV::isZero(v45))
            *v26 = v28;
          ++v26;
          v27 -= 8;
        }
        while (v27);
        v31 = *(uint64_t **)a2;
        v32 = *(unsigned int *)(a2 + 8);
        v45 = (llvm::SCEV *)&v47;
        v46 = (void *)0x400000000;
        if ((_DWORD)v32)
        {
          v33 = &v31[v32];
          do
          {
            MulExpr = *v31;
            if (*(_WORD *)(*v31 + 24))
            {
              if (*(_WORD *)(*v31 + 24) != 5)
                goto LABEL_51;
              v54 = (llvm::SCEV *)v56;
              v55 = 0x200000000;
              v35 = *(_QWORD *)(MulExpr + 40);
              if (v35)
              {
                v36 = 0;
                v37 = *(uint64_t **)(MulExpr + 32);
                v38 = 8 * v35;
                do
                {
                  v39 = *v37;
                  if (*(_WORD *)(*v37 + 24))
                  {
                    if (v36 >= HIDWORD(v55))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v36 + 1, 8);
                      v36 = v55;
                    }
                    *((_QWORD *)v54 + v36) = v39;
                    v36 = v55 + 1;
                    LODWORD(v55) = v55 + 1;
                  }
                  ++v37;
                  v38 -= 8;
                }
                while (v38);
              }
              MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)a1, (uint64_t)&v54, 0, 0);
              if (v54 != (llvm::SCEV *)v56)
                free(v54);
              if (MulExpr)
              {
LABEL_51:
                v40 = v46;
                if (v46 >= (unint64_t)HIDWORD(v46))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)&v47, v46 + 1, 8);
                  v40 = v46;
                }
                *((_QWORD *)v45 + v40) = MulExpr;
                LODWORD(v46) = (_DWORD)v46 + 1;
              }
            }
            ++v31;
          }
          while (v31 != v33);
          if ((_DWORD)v46)
          {
            v41 = a3;
            if ((sub_1C4E01E30(a1, (uint64_t)&v45, a3, v29, v30, v24) & 1) != 0)
            {
              v42 = *(unsigned int *)(a3 + 8);
              if (v42 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v42 + 1, 8);
                LODWORD(v42) = *(_DWORD *)(a3 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v42) = a4;
              ++*(_DWORD *)(a3 + 8);
              goto LABEL_63;
            }
LABEL_62:
            *(_DWORD *)(v41 + 8) = 0;
LABEL_63:
            if (v45 != (llvm::SCEV *)&v47)
              free(v45);
            return;
          }
        }
      }
      else
      {
        v45 = (llvm::SCEV *)&v47;
        v46 = (void *)0x400000000;
      }
      v41 = a3;
      goto LABEL_62;
    }
  }
}

uint64_t sub_1C4E01E30(llvm::SCEVDivision *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::SCEV **a6)
{
  uint64_t v8;
  llvm::ScalarEvolution **v9;
  uint64_t MulExpr;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  llvm::ScalarEvolution **v15;
  uint64_t v16;
  llvm::ScalarEvolution **v17;
  llvm::ScalarEvolution **v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ScalarEvolution *v29;
  llvm::SCEV *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a2 + 8);
  v9 = *(llvm::ScalarEvolution ***)a2;
  MulExpr = *(_QWORD *)(*(_QWORD *)a2 + 8 * ((int)v8 - 1));
  if ((_DWORD)v8 == 1)
  {
    if (*(_WORD *)(MulExpr + 24) == 5 && MulExpr != 0)
    {
      v31 = v33;
      v32 = 0x200000000;
      v21 = *(_QWORD *)(MulExpr + 40);
      if (v21)
      {
        v22 = 0;
        v23 = *(uint64_t **)(MulExpr + 32);
        v24 = 8 * v21;
        do
        {
          v25 = *v23;
          if (*(_WORD *)(*v23 + 24))
          {
            if (v22 >= HIDWORD(v32))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v22 + 1, 8);
              v22 = v32;
            }
            *((_QWORD *)v31 + v22) = v25;
            v22 = v32 + 1;
            LODWORD(v32) = v32 + 1;
          }
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      MulExpr = llvm::ScalarEvolution::getMulExpr((uint64_t)a1, (uint64_t)&v31, 0, 0);
      if (v31 != v33)
        free(v31);
    }
    goto LABEL_29;
  }
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    while (1)
    {
      v30 = 0;
      v31 = 0;
      llvm::SCEVDivision::divide(a1, *v9, (const llvm::SCEV ***)MulExpr, (const llvm::SCEV *)&v31, &v30, a6);
      result = llvm::SCEV::isZero(v30);
      if (!(_DWORD)result)
        return result;
      *v9++ = (llvm::ScalarEvolution *)v31;
      v12 -= 8;
      if (!v12)
      {
        v9 = *(llvm::ScalarEvolution ***)a2;
        v14 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v14)
          break;
        v15 = &v9[v14];
        v16 = 8 * v14 - 8;
        v17 = *(llvm::ScalarEvolution ***)a2;
        v18 = *(llvm::ScalarEvolution ***)a2;
        while (1)
        {
          v19 = (uint64_t)*v18++;
          if (!*(_WORD *)(v19 + 24))
            break;
          v16 -= 8;
          v17 = v18;
          if (v18 == v15)
            goto LABEL_24;
        }
        if (v18 == v15)
        {
          v15 = v17;
        }
        else
        {
          v28 = 1;
          v15 = v17;
          do
          {
            v29 = v17[v28];
            if (*((_WORD *)v29 + 12))
              *v15++ = v29;
            ++v28;
            v16 -= 8;
          }
          while (v16);
          v9 = *(llvm::ScalarEvolution ***)a2;
        }
        goto LABEL_24;
      }
    }
  }
  v15 = v9;
LABEL_24:
  v26 = (char *)v15 - (char *)v9;
  *(_DWORD *)(a2 + 8) = v26 >> 3;
  if ((v26 & 0x7FFFFFFF8) == 0 || (result = sub_1C4E01E30(a1, a2, a3), (_DWORD)result))
  {
LABEL_29:
    v27 = *(unsigned int *)(a3 + 8);
    if (v27 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
      LODWORD(v27) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = MulExpr;
    ++*(_DWORD *)(a3 + 8);
    return 1;
  }
  return result;
}

uint64_t llvm::computeAccessFunctions(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::SCEV **a6)
{
  int v6;
  llvm::ScalarEvolution *v9;
  llvm::SCEVDivision *v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::SCEV *v13;
  unint64_t v14;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  const llvm::SCEV *v22;
  llvm::ScalarEvolution *v23;

  v6 = *(_DWORD *)(a4 + 8);
  if (v6)
  {
    v9 = (llvm::ScalarEvolution *)a2;
    v10 = (llvm::SCEVDivision *)result;
    if (!a2 || *(_WORD *)(a2 + 24) != 7 || *(_QWORD *)(a2 + 40) == 2)
    {
      v11 = (v6 - 1);
      if (v6 - 1 >= 0)
      {
        v12 = 0;
        do
        {
          v22 = 0;
          v23 = 0;
          result = llvm::SCEVDivision::divide(v10, v9, *(const llvm::SCEV ****)(*(_QWORD *)a4 + 8 * v11), (const llvm::SCEV *)&v23, &v22, a6);
          v13 = v22;
          v9 = v23;
          if (v12)
          {
            v14 = *(unsigned int *)(a3 + 8);
            if (v14 >= *(unsigned int *)(a3 + 12))
            {
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v14 + 1, 8);
              v14 = *(unsigned int *)(a3 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v13;
            ++*(_DWORD *)(a3 + 8);
          }
          else
          {
            result = llvm::SCEV::isZero(v22);
            if ((result & 1) == 0)
            {
              *(_DWORD *)(a3 + 8) = 0;
              *(_DWORD *)(a4 + 8) = 0;
              return result;
            }
          }
          ++v12;
        }
        while (v11-- >= 1);
      }
      v16 = *(unsigned int *)(a3 + 8);
      if (v16 >= *(_DWORD *)(a3 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v16 + 1, 8);
        LODWORD(v16) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v16) = v9;
      v17 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v17;
      if (v17)
      {
        v18 = (_QWORD *)(*(_QWORD *)a3 + 8 * v17 - 8);
        if (*(_QWORD *)a3 < (unint64_t)v18)
        {
          v19 = *(_QWORD *)a3 + 8;
          do
          {
            v20 = *(_QWORD *)(v19 - 8);
            *(_QWORD *)(v19 - 8) = *v18;
            *v18-- = v20;
            v21 = v19 >= (unint64_t)v18;
            v19 += 8;
          }
          while (!v21);
        }
      }
    }
  }
  return result;
}

BOOL llvm::getIndexExpressionsFromGEP(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t SCEVIter;
  BOOL v21;
  uint64_t v22;
  llvm::APInt *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  _BOOL8 result;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v5 < 2)
    return *(_DWORD *)(a3 + 8) != 0;
  v9 = 0;
  v10 = 0;
  v30 = a4 + 16;
  v31 = a3 + 16;
  v11 = 1;
  while (1)
  {
    v12 = *(_QWORD *)(a2 - 32 * v5 + 32 * v11);
    v13 = *(_QWORD *)(a1 + 104);
    v14 = *(_DWORD *)(a1 + 120);
    if (!v14)
      goto LABEL_9;
    v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v14 - 1);
    v16 = v13 + 48 * v15;
    v17 = *(_QWORD *)(v16 + 24);
    if (v17 != v12)
    {
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v16 = v13 + 48 * v15;
        v17 = *(_QWORD *)(v16 + 24);
        if (v17 == v12)
          goto LABEL_10;
      }
LABEL_9:
      v16 = v13 + 48 * v14;
    }
LABEL_10:
    if (v16 == v13 + 48 * v14 || (SCEVIter = *(_QWORD *)(v16 + 40)) == 0)
      SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1, v12);
    if (v11 != 1)
      break;
    v10 = *(_QWORD *)(a2 + 64);
    if (*(_WORD *)(SCEVIter + 24))
      v21 = 1;
    else
      v21 = SCEVIter == 0;
    if (v21)
    {
LABEL_20:
      v25 = *(unsigned int *)(a3 + 8);
      if (v25 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v31, v25 + 1, 8);
        v25 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v25) = SCEVIter;
      ++*(_DWORD *)(a3 + 8);
      goto LABEL_32;
    }
    v22 = *(_QWORD *)(SCEVIter + 32);
    v23 = (llvm::APInt *)(v22 + 24);
    v24 = *(_DWORD *)(v22 + 32);
    if (v24 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v23) != v24)
        goto LABEL_20;
    }
    else if (*(_QWORD *)v23)
    {
      goto LABEL_20;
    }
    v9 = 1;
LABEL_32:
    ++v11;
    v5 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    if (v11 >= v5)
      return *(_DWORD *)(a3 + 8) != 0;
  }
  if (*(_BYTE *)(v10 + 8) == 17 && v10)
  {
    v26 = *(unsigned int *)(a3 + 8);
    if (v26 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v31, v26 + 1, 8);
      v26 = *(unsigned int *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v26) = SCEVIter;
    ++*(_DWORD *)(a3 + 8);
    if (((v11 == 2) & v9) == 0)
    {
      v27 = *(_DWORD *)(v10 + 32);
      v28 = *(unsigned int *)(a4 + 8);
      if (v28 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v30, v28 + 1, 4);
        v28 = *(unsigned int *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v28) = v27;
      ++*(_DWORD *)(a4 + 8);
    }
    v10 = *(_QWORD *)(v10 + 24);
    goto LABEL_32;
  }
  result = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  return result;
}

void llvm::initializeDelinearizationPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D118);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E024E0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D118, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E024E0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Delinearization";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "delinearize";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBD9;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E031B0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createDelinearizationPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E025A0(v1);
}

uint64_t sub_1C4E025A0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBD9;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81360D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D118);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E024E0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D118, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::DelinearizationPrinterPass::DelinearizationPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void sub_1C4E02670(llvm::raw_ostream *this, uint64_t ***a2, uint64_t *a3, llvm::ScalarEvolution *a4)
{
  void *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t *v17;
  size_t *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _WORD *v22;
  uint64_t ***v23;
  uint64_t **i;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  const llvm::Loop *v36;
  int v37;
  uint64_t v38;
  llvm::Value *v39;
  const llvm::SCEV *SCEVAtScope;
  uint64_t PointerBase;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  void *v49;
  llvm::raw_ostream *v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ****v56;
  uint64_t ***v57;
  int v58;
  int v59;
  size_t *v60;
  const void *v61;
  size_t v62;
  size_t v63;
  _BYTE *v64;
  _OWORD *v65;
  llvm::raw_ostream *v66;
  _BYTE *v67;
  const llvm::SCEV ***ElementSize;
  void *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  llvm::raw_ostream *v76;
  _BYTE *v77;
  void *v78;
  uint64_t v79;
  llvm::raw_ostream *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  llvm::raw_ostream *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t **v89;
  uint64_t **v90;
  unsigned int v91;
  uint64_t *v92;
  void *v94;
  uint64_t v95;
  _BYTE v96[24];
  void *v97;
  uint64_t v98;
  _QWORD v99[4];

  v99[3] = *MEMORY[0x1E0C80C00];
  v7 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v7 > 0x1BuLL)
  {
    qmemcpy(v7, "Delinearization on function ", 28);
    *((_QWORD *)this + 4) += 28;
    v8 = this;
  }
  else
  {
    v8 = llvm::raw_ostream::write(this, "Delinearization on function ", 0x1CuLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v22 = (_WORD *)*((_QWORD *)v8 + 4);
    goto LABEL_16;
  }
  v9 = ***a2;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_10;
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t ****)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != a2)
  {
    v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_11;
      }
    }
LABEL_10:
    v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_11:
  v17 = a3;
  v18 = (size_t *)v13[1];
  v21 = *v18;
  v19 = v18 + 2;
  v20 = v21;
  v22 = (_WORD *)*((_QWORD *)v8 + 4);
  if (v21 <= *((_QWORD *)v8 + 3) - (_QWORD)v22)
  {
    if (v20)
    {
      memcpy(v22, v19, v20);
      v22 = (_WORD *)(*((_QWORD *)v8 + 4) + v20);
      *((_QWORD *)v8 + 4) = v22;
    }
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, (const char *)v19, v20);
    v22 = (_WORD *)*((_QWORD *)v8 + 4);
  }
  a3 = v17;
LABEL_16:
  if (*((_QWORD *)v8 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2618;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ":\n", 2uLL);
  }
  v23 = a2 + 9;
  for (i = a2[10]; ; i = (uint64_t **)i[1])
  {
    if (i == (uint64_t **)v23)
      return;
    v25 = i - 3;
    if (!i)
      v25 = 0;
    v26 = v25[6];
    if (v26 != (uint64_t *)(v25 + 5))
      break;
  }
  while (1)
  {
    if (v26)
      v27 = v26 - 3;
    else
      v27 = 0;
    if (*((unsigned __int8 *)v27 + 16) - 60 > 2)
      goto LABEL_132;
    v28 = *((_DWORD *)a3 + 4);
    if (!v28)
      goto LABEL_132;
    v29 = v27[5];
    v30 = *a3;
    v31 = v28 - 1;
    v32 = ((v29 >> 4) ^ (v29 >> 9)) & (v28 - 1);
    v33 = *(_QWORD *)(*a3 + 16 * v32);
    if (v29 == v33)
    {
LABEL_33:
      v36 = *(const llvm::Loop **)(v30 + 16 * v32 + 8);
      if (!v36)
        goto LABEL_132;
      v92 = a3;
      while (1)
      {
        v37 = *((unsigned __int8 *)v27 + 16);
        if (v26)
        {
          if ((v37 - 62) > 0xFFFFFFFD)
            break;
        }
        v39 = 0;
        if (v26 && v37 == 62)
        {
          v38 = -(uint64_t)(*((_DWORD *)v27 + 5) & 0x7FFFFFF);
          goto LABEL_41;
        }
LABEL_42:
        SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(a4, v39, v36);
        PointerBase = llvm::ScalarEvolution::getPointerBase(a4, SCEVAtScope);
        if (!PointerBase)
          goto LABEL_132;
        v42 = PointerBase;
        if (*(_WORD *)(PointerBase + 24) != 14)
          goto LABEL_132;
        llvm::ScalarEvolution::getMinusSCEV((uint64_t)a4, (uint64_t)SCEVAtScope, PointerBase);
        v44 = v43;
        v45 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v45)
        {
          llvm::raw_ostream::write(this, "\n", 1uLL);
          v46 = *((_QWORD *)this + 4);
        }
        else
        {
          *v45 = 10;
          v46 = *((_QWORD *)this + 4) + 1;
          *((_QWORD *)this + 4) = v46;
        }
        if ((unint64_t)(*((_QWORD *)this + 3) - v46) > 4)
        {
          *(_BYTE *)(v46 + 4) = 58;
          *(_DWORD *)v46 = 1953721929;
          *((_QWORD *)this + 4) += 5;
          v47 = this;
        }
        else
        {
          v47 = llvm::raw_ostream::write(this, "Inst:", 5uLL);
        }
        llvm::Value::print((llvm::Value *)v27, v47, 0);
        v48 = (_BYTE *)*((_QWORD *)v47 + 4);
        if (*((_BYTE **)v47 + 3) == v48)
        {
          llvm::raw_ostream::write(v47, "\n", 1uLL);
        }
        else
        {
          *v48 = 10;
          ++*((_QWORD *)v47 + 4);
        }
        v49 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v49 > 0x14uLL)
        {
          qmemcpy(v49, "In Loop with Header: ", 21);
          *((_QWORD *)this + 4) += 21;
          v50 = this;
        }
        else
        {
          v50 = llvm::raw_ostream::write(this, "In Loop with Header: ", 0x15uLL);
        }
        v51 = (uint64_t ***)**((_QWORD **)v36 + 4);
        if ((*((_BYTE *)v51 + 23) & 0x10) != 0)
        {
          v52 = ***v51;
          v53 = *(_QWORD *)(v52 + 152);
          v54 = *(unsigned int *)(v52 + 168);
          if (!(_DWORD)v54)
            goto LABEL_59;
          LODWORD(v55) = (v54 - 1) & ((v51 >> 4) ^ (v51 >> 9));
          v56 = (uint64_t ****)(v53 + 16 * v55);
          v57 = *v56;
          if (*v56 != v51)
          {
            v58 = 1;
            while (v57 != (uint64_t ***)-4096)
            {
              v59 = v55 + v58++;
              v55 = v59 & (v54 - 1);
              v57 = *(uint64_t ****)(v53 + 16 * v55);
              if (v57 == v51)
              {
                v56 = (uint64_t ****)(v53 + 16 * v55);
                goto LABEL_60;
              }
            }
LABEL_59:
            v56 = (uint64_t ****)(v53 + 16 * v54);
          }
LABEL_60:
          v60 = (size_t *)v56[1];
          v63 = *v60;
          v61 = v60 + 2;
          v62 = v63;
          v64 = (_BYTE *)*((_QWORD *)v50 + 4);
          if (v63 <= *((_QWORD *)v50 + 3) - (_QWORD)v64)
          {
            if (v62)
            {
              memcpy(v64, v61, v62);
              v64 = (_BYTE *)(*((_QWORD *)v50 + 4) + v62);
              *((_QWORD *)v50 + 4) = v64;
            }
          }
          else
          {
            v50 = llvm::raw_ostream::write(v50, (const char *)v61, v62);
            v64 = (_BYTE *)*((_QWORD *)v50 + 4);
          }
          goto LABEL_64;
        }
        v64 = (_BYTE *)*((_QWORD *)v50 + 4);
LABEL_64:
        if (*((_BYTE **)v50 + 3) == v64)
        {
          llvm::raw_ostream::write(v50, "\n", 1uLL);
        }
        else
        {
          *v64 = 10;
          ++*((_QWORD *)v50 + 4);
        }
        v65 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v65 > 0xFuLL)
        {
          *v65 = *(_OWORD *)"AccessFunction: ";
          *((_QWORD *)this + 4) += 16;
          v66 = this;
        }
        else
        {
          v66 = llvm::raw_ostream::write(this, "AccessFunction: ", 0x10uLL);
        }
        llvm::SCEV::print(v44);
        v67 = (_BYTE *)*((_QWORD *)v66 + 4);
        if (*((_BYTE **)v66 + 3) == v67)
        {
          llvm::raw_ostream::write(v66, "\n", 1uLL);
        }
        else
        {
          *v67 = 10;
          ++*((_QWORD *)v66 + 4);
        }
        v97 = v99;
        v98 = 0x300000000;
        v94 = v96;
        v95 = 0x300000000;
        ElementSize = (const llvm::SCEV ***)llvm::ScalarEvolution::getElementSize(a4, (llvm::Instruction *)v27);
        llvm::delinearize(a4, v44, (uint64_t)&v97, (uint64_t)&v94, ElementSize);
        if ((_DWORD)v98 && (_DWORD)v95 && (_DWORD)v98 == (_DWORD)v95)
        {
          v69 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v69 > 0xCuLL)
          {
            qmemcpy(v69, "Base offset: ", 13);
            *((_QWORD *)this + 4) += 13;
            v70 = this;
          }
          else
          {
            v70 = llvm::raw_ostream::write(this, "Base offset: ", 0xDuLL);
          }
          llvm::SCEV::print(v42);
          v71 = (_BYTE *)*((_QWORD *)v70 + 4);
          if (*((_BYTE **)v70 + 3) == v71)
          {
            llvm::raw_ostream::write(v70, "\n", 1uLL);
          }
          else
          {
            *v71 = 10;
            ++*((_QWORD *)v70 + 4);
          }
          v72 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v72 > 0x15uLL)
          {
            qmemcpy(v72, "ArrayDecl[UnknownSize]", 22);
            *((_QWORD *)this + 4) += 22;
          }
          else
          {
            llvm::raw_ostream::write(this, "ArrayDecl[UnknownSize]", 0x16uLL);
          }
          v73 = v98;
          v91 = v98 - 1;
          if ((int)v98 >= 2)
          {
            v74 = 0;
            do
            {
              v75 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v75)
              {
                v76 = llvm::raw_ostream::write(this, "[", 1uLL);
              }
              else
              {
                *v75 = 91;
                ++*((_QWORD *)this + 4);
                v76 = this;
              }
              llvm::SCEV::print(*(_QWORD *)((char *)v94 + v74));
              v77 = (_BYTE *)*((_QWORD *)v76 + 4);
              if (*((_BYTE **)v76 + 3) == v77)
              {
                llvm::raw_ostream::write(v76, "]", 1uLL);
              }
              else
              {
                *v77 = 93;
                ++*((_QWORD *)v76 + 4);
              }
              v74 += 8;
            }
            while (8 * v91 != v74);
          }
          v79 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v79) > 0x11)
          {
            *(_WORD *)(v79 + 16) = 8294;
            *(_OWORD *)v79 = *(_OWORD *)" with elements of ";
            *((_QWORD *)this + 4) += 18;
            v80 = this;
          }
          else
          {
            v80 = llvm::raw_ostream::write(this, " with elements of ", 0x12uLL);
          }
          llvm::SCEV::print(*((_QWORD *)v94 + (int)v91));
          v81 = (_QWORD *)*((_QWORD *)v80 + 4);
          if (*((_QWORD *)v80 + 3) - (_QWORD)v81 > 7uLL)
          {
            *v81 = 0xA2E736574796220;
            *((_QWORD *)v80 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v80, " bytes.\n", 8uLL);
          }
          v82 = (_QWORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v82 > 7uLL)
          {
            *v82 = 0x6665527961727241;
            *((_QWORD *)this + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(this, "ArrayRef", 8uLL);
          }
          if ((int)v73 >= 1)
          {
            v83 = 0;
            v84 = 8 * v73;
            do
            {
              v85 = (_BYTE *)*((_QWORD *)this + 4);
              if (*((_BYTE **)this + 3) == v85)
              {
                v86 = llvm::raw_ostream::write(this, "[", 1uLL);
              }
              else
              {
                *v85 = 91;
                ++*((_QWORD *)this + 4);
                v86 = this;
              }
              llvm::SCEV::print(*(_QWORD *)((char *)v97 + v83));
              v87 = (_BYTE *)*((_QWORD *)v86 + 4);
              if (*((_BYTE **)v86 + 3) == v87)
              {
                llvm::raw_ostream::write(v86, "]", 1uLL);
              }
              else
              {
                *v87 = 93;
                ++*((_QWORD *)v86 + 4);
              }
              v83 += 8;
            }
            while (v84 != v83);
          }
          v88 = (_BYTE *)*((_QWORD *)this + 4);
          if (*((_BYTE **)this + 3) == v88)
          {
            llvm::raw_ostream::write(this, "\n", 1uLL);
          }
          else
          {
            *v88 = 10;
            ++*((_QWORD *)this + 4);
          }
          a3 = v92;
        }
        else
        {
          v78 = (void *)*((_QWORD *)this + 4);
          a3 = v92;
          if (*((_QWORD *)this + 3) - (_QWORD)v78 > 0x15uLL)
          {
            qmemcpy(v78, "failed to delinearize\n", 22);
            *((_QWORD *)this + 4) += 22;
          }
          else
          {
            llvm::raw_ostream::write(this, "failed to delinearize\n", 0x16uLL);
          }
        }
        if (v94 != v96)
          free(v94);
        if (v97 != v99)
          free(v97);
        v36 = *(const llvm::Loop **)v36;
        if (!v36)
          goto LABEL_132;
      }
      v38 = -1;
LABEL_41:
      v39 = (llvm::Value *)v27[4 * v38];
      goto LABEL_42;
    }
    v34 = 1;
    while (v33 != -4096)
    {
      v35 = v32 + v34++;
      v32 = v35 & v31;
      v33 = *(_QWORD *)(v30 + 16 * v32);
      if (v29 == v33)
        goto LABEL_33;
    }
LABEL_132:
    v26 = (uint64_t *)v26[1];
    v89 = i - 3;
    if (!i)
      v89 = 0;
    if (v26 == (uint64_t *)(v89 + 5))
      break;
LABEL_139:
    if (i == (uint64_t **)v23)
      return;
  }
  while (1)
  {
    i = (uint64_t **)i[1];
    if (i == (uint64_t **)v23)
      break;
    v90 = i - 3;
    if (!i)
      v90 = 0;
    v26 = v90[6];
    if (v26 != (uint64_t *)(v90 + 5))
      goto LABEL_139;
  }
}

void *sub_1C4E03128(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (*(_WORD *)(a2 + 24) == 14)
    {
      **(_BYTE **)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t sub_1C4E031B0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E025A0(v0);
}

void sub_1C4E031DC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E03200(uint64_t a1, llvm::raw_ostream *this)
{
  sub_1C4E02670(this, *(uint64_t ****)(a1 + 32), *(uint64_t **)(a1 + 40), *(llvm::ScalarEvolution **)(a1 + 48));
}

void *sub_1C4E03214(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1C4E03258(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void **v5;
  void *v6;

  *(_QWORD *)(a1 + 32) = a2;
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::ScalarEvolutionWrapperPass::ID);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LoopInfoWrapperPass::ID)+ 32;
  return 0;
}

void sub_1C4E032F4(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v4)
  {
    if (a2 && *(_WORD *)(a2 + 24) == 7)
    {
      v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
      v6 = *(_QWORD *)(a2 + 40);
      if (v6 == 2)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      }
      else
      {
        v10 = **(uint64_t ***)a1;
        v11 = *(_QWORD *)(a2 + 32);
        v15 = v17;
        v16 = 0x300000000;
        v12 = v6;
        v13 = 8 * v6 - 8;
        if (v13 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, (uint64_t)v13 >> 3, 8);
          v14 = v16;
        }
        else
        {
          v14 = 0;
        }
        if (v12 != 1)
        {
          memcpy((char *)v15 + 8 * v14, (const void *)(v11 + 8), v13);
          v14 = v16;
        }
        LODWORD(v16) = v14 + (v13 >> 3);
        v7 = sub_1C618AB20(v10, (uint64_t)&v15, *(uint64_t ***)(a2 + 48));
        if (v15 != v17)
          free(v15);
      }
      v8 = *(unsigned int *)(v5 + 8);
      if (v8 >= *(_DWORD *)(v5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v8 + 1, 8);
        LODWORD(v8) = *(_DWORD *)(v5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v8) = v7;
      ++*(_DWORD *)(v5 + 8);
    }
    v9 = *(unsigned int *)(a1 + 16);
    if (v9 >= *(_DWORD *)(a1 + 20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v9) = a2;
    ++*(_DWORD *)(a1 + 16);
  }
}

void sub_1C4E034C0(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v4)
  {
    v5 = *(unsigned __int16 *)(a2 + 24);
    v6 = v5 > 0xE;
    v7 = (1 << v5) & 0x4028;
    if (v6 || v7 == 0)
    {
      v13 = (_DWORD *)(a1 + 16);
      v12 = *(unsigned int *)(a1 + 16);
      v11 = a1 + 8;
      if (v12 >= *(_DWORD *)(a1 + 20))
      {
        v14 = v12 + 1;
        v15 = a1 + 24;
        goto LABEL_20;
      }
LABEL_17:
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = a2;
      ++*v13;
      return;
    }
    v9 = *(uint64_t **)a1;
    v16 = 0;
    v17 = &v16;
    v18 = v20;
    v19 = 0x800000000;
    v21 = v25;
    v22 = v25;
    v23 = 8;
    v24 = 0;
    sub_1C4E036E4((uint64_t)&v17, a2);
    if ((_DWORD)v19 && !*v17)
    {
      v10 = *((_QWORD *)v18 + v19 - 1);
      LODWORD(v19) = v19 - 1;
      __asm { BR              X10 }
    }
    if (v22 != v21)
      free(v22);
    if (v18 != v20)
      free(v18);
    if (!v16)
    {
      v11 = *v9;
      v13 = (_DWORD *)(v11 + 8);
      v12 = *(unsigned int *)(v11 + 8);
      if (v12 >= *(_DWORD *)(v11 + 12))
      {
        v14 = v12 + 1;
        v15 = v11 + 16;
LABEL_20:
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v15, v14, 8);
        LODWORD(v12) = *v13;
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
}

void *sub_1C4E036E4(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (a2 && *(_WORD *)(a2 + 24) == 14 && *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 16) - 11 <= 1)
    {
      **(_BYTE **)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

void sub_1C4E03784(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t MulExpr;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 **v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD v33[10];

  v33[8] = *MEMORY[0x1E0C80C00];
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v4)
  {
    if (!a2 || *(_WORD *)(a2 + 24) != 5)
      goto LABEL_32;
    v5 = *(uint64_t **)a1;
    v23 = &v25;
    v24 = 0;
    v6 = *(_QWORD *)(a2 + 40);
    if (v6)
    {
      v20 = v5;
      v7 = 0;
      v8 = *(uint64_t **)(a2 + 32);
      v9 = &v8[v6];
      do
      {
        v10 = *v8;
        if (*v8)
          v11 = *(unsigned __int16 *)(*v8 + 24) == 14;
        else
          v11 = 0;
        if (v11)
        {
          if (*(_BYTE *)(*(_QWORD *)(v10 - 8) + 16) == 84)
          {
            v7 = 1;
          }
          else
          {
            v13 = v24;
            if (v24 >= (unint64_t)HIDWORD(v24))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)&v25, v24 + 1, 8);
              v13 = v24;
            }
            *((_QWORD *)v23 + v13) = v10;
            LODWORD(v24) = v24 + 1;
          }
        }
        else
        {
          v21 = &v22;
          v22 = 0;
          v25 = &v21;
          v26 = v28;
          v27 = 0x800000000;
          v29 = v33;
          v30 = v33;
          v31 = 8;
          v32 = 0;
          sub_1C4E03AAC((uint64_t)&v25, v10);
          if ((_DWORD)v27)
          {
            v12 = *((_QWORD *)v26 + v27 - 1);
            LODWORD(v27) = v27 - 1;
            __asm { BR              X10 }
          }
          if (v30 != v29)
            free(v30);
          if (v26 != v28)
            free(v26);
          v7 = (v22 | v7) != 0;
        }
        ++v8;
      }
      while (v8 != v9);
      v14 = v24 == 0;
      if ((_DWORD)v24 && v7)
      {
        v15 = *v20;
        MulExpr = llvm::ScalarEvolution::getMulExpr(v20[1], (uint64_t)&v23, 0, 0);
        v17 = *(unsigned int *)(v15 + 8);
        if (v17 >= *(_DWORD *)(v15 + 12))
        {
          v19 = MulExpr;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v15 + 16, v17 + 1, 8);
          MulExpr = v19;
          LODWORD(v17) = *(_DWORD *)(v15 + 8);
        }
        v14 = 0;
        *(_QWORD *)(*(_QWORD *)v15 + 8 * v17) = MulExpr;
        ++*(_DWORD *)(v15 + 8);
      }
    }
    else
    {
      v14 = 1;
    }
    if (v23 != &v25)
      free(v23);
    if (v14)
    {
LABEL_32:
      v18 = *(unsigned int *)(a1 + 16);
      if (v18 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v18 + 1, 8);
        LODWORD(v18) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
}

void *sub_1C4E03AAC(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (v5)
  {
    if (*(_WORD *)(a2 + 24) == 7)
    {
      ***(_BYTE ***)a1 = 1;
    }
    else
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (v6 >= *(_DWORD *)(a1 + 20))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v6 + 1, 8);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t sub_1C4E03B38(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  int v50;
  uint64_t *v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  int v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  int v86;
  uint64_t *v87;
  BOOL v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  BOOL v94;
  char v95;
  int v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t *v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t *v110;
  BOOL v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  BOOL v116;
  int v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  BOOL v123;
  BOOL v124;
  uint64_t *v125;
  uint64_t v126;
  BOOL v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  BOOL v132;
  int v133;
  BOOL v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  int v143;
  uint64_t v144;
  BOOL v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  BOOL v151;
  int v152;
  uint64_t v153;
  BOOL v154;
  BOOL v155;
  int v156;
  uint64_t *v157;
  BOOL v158;
  int v159;
  int v160;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  BOOL v165;
  char v166;
  int v167;
  uint64_t v168;
  BOOL v169;
  int v170;
  uint64_t *v171;
  int v172;
  BOOL v173;
  int v174;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v83 = *(a2 - 1);
        v84 = *v9;
        if (v83)
          v85 = *(unsigned __int16 *)(v83 + 24) == 5;
        else
          v85 = 0;
        if (v85)
          v86 = *(_DWORD *)(v83 + 40);
        else
          v86 = 1;
        v162 = 1;
        if (v84 && *(_WORD *)(v84 + 24) == 5)
          v162 = *(_DWORD *)(v84 + 40);
        if (v86 > v162)
        {
          *v9 = v83;
          *(a2 - 1) = v84;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C4E04784(v9, v9 + 1, a2 - 1);
      case 4:
        return (uint64_t)sub_1C4E04AD4(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5:
        return (uint64_t)sub_1C4E0461C(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v87 = v9 + 1;
          v89 = v9 == a2 || v87 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v89)
            {
              v90 = 8;
              v91 = v9;
              do
              {
                v92 = v87;
                v93 = v91[1];
                if (v93)
                  v94 = *(unsigned __int16 *)(v93 + 24) == 5;
                else
                  v94 = 0;
                v95 = !v94;
                if (v94)
                  v96 = *(_DWORD *)(v93 + 40);
                else
                  v96 = 1;
                v97 = *v91;
                if (v97)
                  v98 = *(unsigned __int16 *)(v97 + 24) == 5;
                else
                  v98 = 0;
                if (v98)
                  v99 = *(_DWORD *)(v97 + 40);
                else
                  v99 = 1;
                if (v96 > v99)
                {
                  v100 = v90;
                  while (1)
                  {
                    *(uint64_t *)((char *)v9 + v100) = v97;
                    v101 = v100 - 8;
                    if (v100 == 8)
                      break;
                    if ((v95 & 1) != 0)
                      v102 = 1;
                    else
                      v102 = *(_DWORD *)(v93 + 40);
                    v97 = *(uint64_t *)((char *)v9 + v100 - 16);
                    if (v97)
                      v103 = *(unsigned __int16 *)(v97 + 24) == 5;
                    else
                      v103 = 0;
                    if (v103)
                      v104 = *(_DWORD *)(v97 + 40);
                    else
                      v104 = 1;
                    v100 -= 8;
                    if (v102 <= v104)
                    {
                      v105 = (uint64_t *)((char *)v9 + v101);
                      goto LABEL_207;
                    }
                  }
                  v105 = v9;
LABEL_207:
                  *v105 = v93;
                }
                v87 = v92 + 1;
                v90 += 8;
                v91 = v92;
              }
              while (v92 + 1 != a2);
            }
          }
          else if (!v89)
          {
            do
            {
              v163 = v87;
              v164 = v7[1];
              if (v164)
                v165 = *(unsigned __int16 *)(v164 + 24) == 5;
              else
                v165 = 0;
              v166 = !v165;
              if (v165)
                v167 = *(_DWORD *)(v164 + 40);
              else
                v167 = 1;
              v168 = *v7;
              if (*v7)
                v169 = *(unsigned __int16 *)(*v7 + 24) == 5;
              else
                v169 = 0;
              if (v169)
                v170 = *(_DWORD *)(v168 + 40);
              else
                v170 = 1;
              if (v167 > v170)
              {
                v171 = v163;
                do
                {
                  *v171 = v168;
                  if ((v166 & 1) != 0)
                    v172 = 1;
                  else
                    v172 = *(_DWORD *)(v164 + 40);
                  v168 = *(v171 - 2);
                  if (v168)
                    v173 = *(unsigned __int16 *)(v168 + 24) == 5;
                  else
                    v173 = 0;
                  if (v173)
                    v174 = *(_DWORD *)(v168 + 40);
                  else
                    v174 = 1;
                  --v171;
                }
                while (v172 > v174);
                *v171 = v164;
              }
              v87 = v163 + 1;
              v7 = v163;
            }
            while (v163 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v106 = (unint64_t)(v11 - 2) >> 1;
          v107 = v106;
          while (2)
          {
            v108 = v107;
            if (v106 >= v107)
            {
              v109 = (2 * v107) | 1;
              v110 = &v9[v109];
              if (2 * v108 + 2 < v11)
              {
                if (*v110)
                  v111 = *(unsigned __int16 *)(*v110 + 24) == 5;
                else
                  v111 = 0;
                if (v111)
                  v112 = *(_DWORD *)(*v110 + 40);
                else
                  v112 = 1;
                v114 = v110[1];
                ++v110;
                v113 = v114;
                v115 = *(unsigned __int16 *)(v114 + 24);
                if (v114)
                  v116 = v115 == 5;
                else
                  v116 = 0;
                if (v116)
                  v117 = *(_DWORD *)(v113 + 40);
                else
                  v117 = 1;
                if (v112 > v117)
                  v109 = 2 * v108 + 2;
                else
                  v110 = &v9[v109];
              }
              v118 = *v110;
              v119 = *v110 && *(_WORD *)(*v110 + 24) == 5;
              v120 = v119 ? *(_DWORD *)(v118 + 40) : 1;
              v121 = &v9[v108];
              v122 = *v121;
              v123 = *v121 && *(_WORD *)(*v121 + 24) == 5;
              v124 = !v123;
              result = v123 ? *(unsigned int *)(v122 + 40) : 1;
              if (v120 <= (int)result)
              {
                while (2)
                {
                  v125 = v110;
                  *v121 = v118;
                  if (v106 < v109)
                  {
LABEL_272:
                    *v125 = v122;
                    break;
                  }
                  v126 = (2 * v109) | 1;
                  v110 = &v9[v126];
                  if (2 * v109 + 2 >= v11)
                  {
                    v109 = (2 * v109) | 1;
                  }
                  else
                  {
                    if (*v110)
                      v127 = *(unsigned __int16 *)(*v110 + 24) == 5;
                    else
                      v127 = 0;
                    if (v127)
                      v128 = *(_DWORD *)(*v110 + 40);
                    else
                      v128 = 1;
                    v130 = v110[1];
                    ++v110;
                    v129 = v130;
                    v131 = *(unsigned __int16 *)(v130 + 24);
                    if (v130)
                      v132 = v131 == 5;
                    else
                      v132 = 0;
                    if (v132)
                      v133 = *(_DWORD *)(v129 + 40);
                    else
                      v133 = 1;
                    if (v128 > v133)
                    {
                      v109 = 2 * v109 + 2;
                    }
                    else
                    {
                      v110 = &v9[v126];
                      v109 = (2 * v109) | 1;
                    }
                  }
                  v118 = *v110;
                  if (*v110)
                    v134 = *(unsigned __int16 *)(*v110 + 24) == 5;
                  else
                    v134 = 0;
                  if (v134)
                  {
                    result = *(unsigned int *)(v118 + 40);
                    if (v124)
                      goto LABEL_270;
LABEL_268:
                    v135 = *(_DWORD *)(v122 + 40);
                  }
                  else
                  {
                    result = 1;
                    if (!v124)
                      goto LABEL_268;
LABEL_270:
                    v135 = 1;
                  }
                  v121 = v125;
                  if ((int)result > v135)
                    goto LABEL_272;
                  continue;
                }
              }
            }
            v107 = v108 - 1;
            if (v108)
              continue;
            break;
          }
          while (1)
          {
            v136 = 0;
            v137 = *v9;
            v138 = v9;
            do
            {
              v139 = &v138[v136 + 1];
              v140 = (2 * v136) | 1;
              v141 = 2 * v136 + 2;
              if (v141 < v11)
              {
                v142 = *v139 && *(_WORD *)(*v139 + 24) == 5;
                v143 = v142 ? *(_DWORD *)(*v139 + 40) : 1;
                v144 = v139[1];
                result = *(unsigned __int16 *)(v144 + 24);
                v145 = v144 && (_DWORD)result == 5;
                v146 = v145 ? *(_DWORD *)(v144 + 40) : 1;
                if (v143 > v146)
                {
                  ++v139;
                  v140 = v141;
                }
              }
              *v138 = *v139;
              v138 = v139;
              v136 = v140;
            }
            while (v140 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
            if (v139 == --a2)
            {
              *v139 = v137;
              goto LABEL_321;
            }
            *v139 = *a2;
            *a2 = v137;
            v147 = (char *)v139 - (char *)v9 + 8;
            if (v147 >= 9)
            {
              v148 = (((unint64_t)v147 >> 3) - 2) >> 1;
              v149 = &v9[v148];
              v150 = *v149;
              v151 = *v149 && *(_WORD *)(*v149 + 24) == 5;
              v152 = v151 ? *(_DWORD *)(v150 + 40) : 1;
              v153 = *v139;
              v154 = *v139 && *(_WORD *)(*v139 + 24) == 5;
              v155 = !v154;
              v156 = v154 ? *(_DWORD *)(v153 + 40) : 1;
              if (v152 > v156)
                break;
            }
LABEL_321:
            if (v11-- <= 2)
              return result;
          }
          while (2)
          {
            v157 = v149;
            *v139 = v150;
            if (!v148)
            {
LABEL_320:
              *v157 = v153;
              goto LABEL_321;
            }
            v148 = (v148 - 1) >> 1;
            v149 = &v9[v148];
            v150 = *v149;
            if (*v149)
              v158 = *(unsigned __int16 *)(*v149 + 24) == 5;
            else
              v158 = 0;
            if (v158)
            {
              v159 = *(_DWORD *)(v150 + 40);
              if (v155)
                goto LABEL_318;
LABEL_316:
              v160 = *(_DWORD *)(v153 + 40);
            }
            else
            {
              v159 = 1;
              if (!v155)
                goto LABEL_316;
LABEL_318:
              v160 = 1;
            }
            v139 = v157;
            if (v159 <= v160)
              goto LABEL_320;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = (uint64_t)sub_1C4E04784(&v7[(unint64_t)v11 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C4E04784(v7, &v7[(unint64_t)v11 >> 1], a2 - 1);
          sub_1C4E04784(v7 + 1, v13 - 1, a2 - 2);
          sub_1C4E04784(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = (uint64_t)sub_1C4E04784(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v17 = *(v7 - 1);
          if (v17 && *(_WORD *)(v17 + 24) == 5)
          {
            v18 = *(_DWORD *)(v17 + 40);
            v16 = *(unsigned __int16 *)(v15 + 24);
            if (!v15 || v16 != 5)
            {
              if (v18 > 1)
                goto LABEL_21;
              LOBYTE(v18) = 1;
LABEL_89:
              v19 = 1;
              goto LABEL_90;
            }
LABEL_19:
            v19 = *(_DWORD *)(v15 + 40);
            if (v18 > v19)
            {
              v16 = 5;
              goto LABEL_21;
            }
            LOBYTE(v18) = 0;
            goto LABEL_90;
          }
          v18 = 1;
          if (!v15)
            goto LABEL_89;
          v19 = 1;
          if (*(_WORD *)(v15 + 24) == 5)
            goto LABEL_19;
LABEL_90:
          v53 = *v8;
          v54 = 1;
          if (*v8 && *(_WORD *)(v53 + 24) == 5)
            v54 = *(_DWORD *)(v53 + 40);
          if (v19 <= v54)
          {
            v61 = v7 + 1;
            do
            {
              v9 = v61;
              if (v61 >= a2)
                break;
              v62 = (v18 & 1) != 0 ? 1 : *(_DWORD *)(v15 + 40);
              v63 = *v61 && *(_WORD *)(*v61 + 24) == 5;
              v64 = v63 ? *(_DWORD *)(*v61++ + 40) : 1;
            }
            while (v62 <= v64);
          }
          else
          {
            v9 = v7;
            do
            {
              if ((v18 & 1) != 0)
                v55 = 1;
              else
                v55 = *(_DWORD *)(v15 + 40);
              v57 = v9[1];
              ++v9;
              v56 = v57;
              v58 = *(unsigned __int16 *)(v57 + 24);
              if (v57)
                v59 = v58 == 5;
              else
                v59 = 0;
              if (v59)
                v60 = *(_DWORD *)(v56 + 40);
              else
                v60 = 1;
            }
            while (v55 <= v60);
          }
          v65 = a2;
          if (v9 < a2)
          {
            v65 = a2;
            do
            {
              if ((v18 & 1) != 0)
                v66 = 1;
              else
                v66 = *(_DWORD *)(v15 + 40);
              v68 = *--v65;
              v67 = v68;
              v69 = *(unsigned __int16 *)(v68 + 24);
              if (v68)
                v70 = v69 == 5;
              else
                v70 = 0;
              if (v70)
                v71 = *(_DWORD *)(v67 + 40);
              else
                v71 = 1;
            }
            while (v66 > v71);
          }
          if (v9 < v65)
          {
            v72 = *v9;
            v73 = *v65;
            do
            {
              *v9 = v73;
              *v65 = v72;
              do
              {
                v74 = v9[1];
                ++v9;
                v72 = v74;
                if ((v18 & 1) != 0)
                  v75 = 1;
                else
                  v75 = *(_DWORD *)(v15 + 40);
                if (v72)
                  v76 = *(unsigned __int16 *)(v72 + 24) == 5;
                else
                  v76 = 0;
                if (v76)
                  v77 = *(_DWORD *)(v72 + 40);
                else
                  v77 = 1;
              }
              while (v75 <= v77);
              do
              {
                v78 = *--v65;
                v73 = v78;
                if ((v18 & 1) != 0)
                  v79 = 1;
                else
                  v79 = *(_DWORD *)(v15 + 40);
                if (v73)
                  v80 = *(unsigned __int16 *)(v73 + 24) == 5;
                else
                  v80 = 0;
                if (v80)
                  v81 = *(_DWORD *)(v73 + 40);
                else
                  v81 = 1;
              }
              while (v79 > v81);
            }
            while (v9 < v65);
          }
          v82 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v82;
          a4 = 0;
          *v82 = v15;
          continue;
        }
        v16 = *(unsigned __int16 *)(v15 + 24);
LABEL_21:
        v20 = 0;
        do
        {
          v21 = v7[v20 + 1];
          if (v21)
            v22 = *(unsigned __int16 *)(v21 + 24) == 5;
          else
            v22 = 0;
          if (v22)
            v23 = *(_DWORD *)(v21 + 40);
          else
            v23 = 1;
          if (v16 == 5)
            v24 = *(_DWORD *)(v15 + 40);
          else
            v24 = 1;
          ++v20;
        }
        while (v23 > v24);
        v25 = &v7[v20];
        v26 = a2;
        if (v20 == 1)
        {
          v26 = a2;
          do
          {
            if (v25 >= v26)
              break;
            v34 = *--v26;
            v33 = v34;
            v35 = *(unsigned __int16 *)(v34 + 24);
            v36 = v34 && v35 == 5;
            v37 = v36 ? *(_DWORD *)(v33 + 40) : 1;
            v38 = v16 == 5 ? *(_DWORD *)(v15 + 40) : 1;
          }
          while (v37 <= v38);
        }
        else
        {
          do
          {
            v28 = *--v26;
            v27 = v28;
            v29 = *(unsigned __int16 *)(v28 + 24);
            if (v28)
              v30 = v29 == 5;
            else
              v30 = 0;
            if (v30)
              v31 = *(_DWORD *)(v27 + 40);
            else
              v31 = 1;
            if (v16 == 5)
              v32 = *(_DWORD *)(v15 + 40);
            else
              v32 = 1;
          }
          while (v31 <= v32);
        }
        if (v25 >= v26)
        {
          v9 = v25;
        }
        else
        {
          v39 = *v26;
          v9 = v25;
          v40 = v26;
          do
          {
            *v9 = v39;
            *v40 = v21;
            do
            {
              v41 = v9[1];
              ++v9;
              v21 = v41;
              v42 = *(unsigned __int16 *)(v41 + 24);
              if (v41)
                v43 = v42 == 5;
              else
                v43 = 0;
              if (v43)
                v44 = *(_DWORD *)(v21 + 40);
              else
                v44 = 1;
              if (v16 == 5)
                v45 = *(_DWORD *)(v15 + 40);
              else
                v45 = 1;
            }
            while (v44 > v45);
            do
            {
              v46 = *--v40;
              v39 = v46;
              v47 = *(unsigned __int16 *)(v46 + 24);
              if (v46)
                v48 = v47 == 5;
              else
                v48 = 0;
              if (v48)
                v49 = *(_DWORD *)(v39 + 40);
              else
                v49 = 1;
              if (v16 == 5)
                v50 = *(_DWORD *)(v15 + 40);
              else
                v50 = 1;
            }
            while (v49 <= v50);
          }
          while (v9 < v40);
        }
        v51 = v9 - 1;
        if (v9 - 1 != v7)
          *v7 = *v51;
        *v51 = v15;
        if (v25 < v26)
        {
LABEL_87:
          result = sub_1C4E03B38(v7, v9 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v52 = sub_1C4E048DC(v7, v9 - 1);
        result = sub_1C4E048DC(v9, a2);
        if (!(_DWORD)result)
        {
          if (v52)
            continue;
          goto LABEL_87;
        }
        a2 = v9 - 1;
        if (!v52)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C4E0461C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  result = sub_1C4E04AD4(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5)
    v13 = *(unsigned __int16 *)(*a5 + 24) == 5;
  else
    v13 = 0;
  if (v13)
    v14 = *(_DWORD *)(v11 + 40);
  else
    v14 = 1;
  if (v12)
    v15 = *(unsigned __int16 *)(v12 + 24) == 5;
  else
    v15 = 0;
  if (v15)
    v16 = *(_DWORD *)(v12 + 40);
  else
    v16 = 1;
  if (v14 > v16)
  {
    *a4 = v11;
    *a5 = v12;
    v17 = *a4;
    v18 = *a3;
    v19 = 1;
    if (*a4 && *(_WORD *)(v17 + 24) == 5)
      v19 = *(_DWORD *)(v17 + 40);
    v20 = 1;
    if (v18 && *(_WORD *)(v18 + 24) == 5)
      v20 = *(_DWORD *)(v18 + 40);
    if (v19 > v20)
    {
      *a3 = v17;
      *a4 = v18;
      v21 = *a3;
      v22 = *a2;
      v23 = 1;
      if (*a3 && *(_WORD *)(v21 + 24) == 5)
        v23 = *(_DWORD *)(v21 + 40);
      v24 = 1;
      if (v22 && *(_WORD *)(v22 + 24) == 5)
        v24 = *(_DWORD *)(v22 + 40);
      if (v23 > v24)
      {
        *a2 = v21;
        *a3 = v22;
        v25 = *a2;
        v26 = *a1;
        v27 = 1;
        if (*a2 && *(_WORD *)(v25 + 24) == 5)
          v27 = *(_DWORD *)(v25 + 40);
        v28 = 1;
        if (v26 && *(_WORD *)(v26 + 24) == 5)
          v28 = *(_DWORD *)(v26 + 40);
        if (v27 > v28)
        {
          *a1 = v25;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C4E04784(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  int v7;
  BOOL v8;
  char v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;

  v3 = *a2;
  v4 = *result;
  if (*a2)
    v5 = *(unsigned __int16 *)(*a2 + 24) == 5;
  else
    v5 = 0;
  v6 = !v5;
  if (v5)
    v7 = *(_DWORD *)(v3 + 40);
  else
    v7 = 1;
  if (v4)
    v8 = *(unsigned __int16 *)(v4 + 24) == 5;
  else
    v8 = 0;
  v9 = !v8;
  if (v8)
    v10 = *(_DWORD *)(v4 + 40);
  else
    v10 = 1;
  v11 = *a3;
  if (*a3)
    v12 = *(unsigned __int16 *)(*a3 + 24) == 5;
  else
    v12 = 0;
  v13 = !v12;
  if (v7 <= v10)
  {
    if ((v13 & 1) != 0)
    {
      v16 = 1;
      if ((v6 & 1) == 0)
      {
LABEL_31:
        v17 = *(_DWORD *)(v3 + 40);
        goto LABEL_38;
      }
    }
    else
    {
      v16 = *(_DWORD *)(v11 + 40);
      if ((v6 & 1) == 0)
        goto LABEL_31;
    }
    v17 = 1;
LABEL_38:
    if (v16 > v17)
    {
      *a2 = v11;
      *a3 = v3;
      v18 = *a2;
      v19 = *result;
      v20 = 1;
      if (*a2 && *(_WORD *)(v18 + 24) == 5)
        v20 = *(_DWORD *)(v18 + 40);
      v21 = 1;
      if (v19 && *(_WORD *)(v19 + 24) == 5)
        v21 = *(_DWORD *)(v19 + 40);
      if (v20 > v21)
      {
        *result = v18;
        *a2 = v19;
      }
    }
    return result;
  }
  if ((v13 & 1) == 0)
  {
    v14 = *(_DWORD *)(v11 + 40);
    if ((v6 & 1) == 0)
      goto LABEL_28;
LABEL_33:
    v15 = 1;
    goto LABEL_34;
  }
  v14 = 1;
  if ((v6 & 1) != 0)
    goto LABEL_33;
LABEL_28:
  v15 = *(_DWORD *)(v3 + 40);
LABEL_34:
  if (v14 > v15)
  {
    *result = v11;
LABEL_55:
    *a3 = v4;
    return result;
  }
  *result = v3;
  *a2 = v4;
  v22 = *a3;
  v23 = 1;
  if (*a3 && *(_WORD *)(v22 + 24) == 5)
    v23 = *(_DWORD *)(v22 + 40);
  if ((v9 & 1) != 0)
    v24 = 1;
  else
    v24 = *(_DWORD *)(v4 + 40);
  if (v23 > v24)
  {
    *a2 = v22;
    goto LABEL_55;
  }
  return result;
}

BOOL sub_1C4E048DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t *v26;
  int v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6)
        v8 = *(unsigned __int16 *)(v6 + 24) == 5;
      else
        v8 = 0;
      if (v8)
        v9 = *(_DWORD *)(v6 + 40);
      else
        v9 = 1;
      v27 = 1;
      if (v7 && *(_WORD *)(v7 + 24) == 5)
        v27 = *(_DWORD *)(v7 + 40);
      if (v9 > v27)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C4E04784(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C4E04AD4(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C4E0461C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C4E04784(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 24;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v11 && *(_WORD *)(*v11 + 24) == 5;
    v16 = !v15;
    v17 = v15 ? *(_DWORD *)(v14 + 40) : 1;
    v18 = *v10;
    v19 = *v10 && *(_WORD *)(*v10 + 24) == 5;
    v20 = v19 ? *(_DWORD *)(v18 + 40) : 1;
    if (v17 > v20)
    {
      v21 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v21) = v18;
        v22 = v21 - 8;
        if (v21 == 8)
          break;
        if (v16)
          v23 = 1;
        else
          v23 = *(_DWORD *)(v14 + 40);
        v18 = *(uint64_t *)((char *)a1 + v21 - 16);
        if (v18)
          v24 = *(unsigned __int16 *)(v18 + 24) == 5;
        else
          v24 = 0;
        if (v24)
          v25 = *(_DWORD *)(v18 + 40);
        else
          v25 = 1;
        v21 -= 8;
        if (v23 <= v25)
        {
          v26 = (uint64_t *)((char *)a1 + v22);
          goto LABEL_39;
        }
      }
      v26 = a1;
LABEL_39:
      *v26 = v14;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v13 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *sub_1C4E04AD4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  result = sub_1C4E04784(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4)
    v11 = *(unsigned __int16 *)(*a4 + 24) == 5;
  else
    v11 = 0;
  if (v11)
    v12 = *(_DWORD *)(v9 + 40);
  else
    v12 = 1;
  if (v10)
    v13 = *(unsigned __int16 *)(v10 + 24) == 5;
  else
    v13 = 0;
  if (v13)
    v14 = *(_DWORD *)(v10 + 40);
  else
    v14 = 1;
  if (v12 > v14)
  {
    *a3 = v9;
    *a4 = v10;
    v15 = *a3;
    v16 = *a2;
    v17 = 1;
    if (*a3 && *(_WORD *)(v15 + 24) == 5)
      v17 = *(_DWORD *)(v15 + 40);
    v18 = 1;
    if (v16 && *(_WORD *)(v16 + 24) == 5)
      v18 = *(_DWORD *)(v16 + 40);
    if (v17 > v18)
    {
      *a2 = v15;
      *a3 = v16;
      v19 = *a2;
      v20 = *a1;
      v21 = 1;
      if (*a2 && *(_WORD *)(v19 + 24) == 5)
        v21 = *(_DWORD *)(v19 + 40);
      v22 = 1;
      if (v20 && *(_WORD *)(v20 + 24) == 5)
        v22 = *(_DWORD *)(v20 + 40);
      if (v21 > v22)
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  return result;
}

uint64_t sub_1C4E04BE8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Demanded bits analysis";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "demanded-bits";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &llvm::DemandedBitsWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::DemandedBitsWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::DemandedBits::print(llvm::DemandedBits *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  llvm::raw_ostream *v17;

  v17 = a2;
  llvm::DemandedBits::performAnalysis(this);
  v3 = *((_QWORD *)this + 40);
  v4 = *((unsigned int *)this + 84);
  v5 = v3 + 24 * v4;
  if (*((_DWORD *)this + 82))
  {
    if ((_DWORD)v4)
    {
      v6 = 24 * v4;
      v7 = *((_QWORD *)this + 40);
      while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 24;
        v6 -= 24;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *((_QWORD *)this + 40);
    }
  }
  else
  {
LABEL_6:
    v7 = v3 + 24 * v4;
  }
  v8 = v3 + 24 * v4;
LABEL_9:
  while (v7 != v8)
  {
    v9 = *(_DWORD **)v7;
    sub_1C4E07C14(&v17, *(llvm::Value **)v7, (uint64_t *)(v7 + 8), 0);
    v10 = v9[5];
    if ((v10 & 0x40000000) != 0)
    {
      v12 = (uint64_t **)*((_QWORD *)v9 - 1);
      v11 = v10 & 0x7FFFFFF;
      if (v11)
      {
LABEL_14:
        v13 = 32 * v11;
        do
        {
          llvm::DemandedBits::getDemandedBits(this, v12, (llvm::APInt *)&v15);
          sub_1C4E07C14(&v17, (llvm::Value *)v9, &v15, (llvm::Value *)*v12);
          if (v16 >= 0x41)
          {
            if (v15)
              MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
          }
          v12 += 4;
          v13 -= 32;
        }
        while (v13);
      }
    }
    else
    {
      v11 = v10 & 0x7FFFFFF;
      v12 = (uint64_t **)&v9[-8 * v11];
      if (v11)
        goto LABEL_14;
    }
    v14 = v7 + 24;
    v7 = v5;
    if (v14 != v5)
    {
      v7 = v14;
      while ((*(_QWORD *)v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 24;
        if (v7 == v5)
        {
          v7 = v5;
          goto LABEL_9;
        }
      }
    }
  }
}

void llvm::DemandedBits::determineLiveOperandBits(llvm::DemandedBits *this, const llvm::Instruction *a2, const llvm::Value *a3, llvm::DemandedBits *a4, const llvm::APInt *a5, llvm::APInt *a6, llvm::KnownBits *a7, const void **a8, int8x8_t a9, BOOL *a10)
{
  const llvm::Instruction *v14;
  unint64_t v15;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  int v20;
  int v21;
  const llvm::Instruction *v22;
  int v23;
  const llvm::Instruction *v24;
  int v25;
  const llvm::Instruction *v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  llvm::APInt *v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t *v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  size_t v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  llvm::APInt *v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  unsigned __int8 *v78;
  llvm::APInt *v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unsigned __int8 *v83;
  llvm::APInt *v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  size_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  size_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  llvm::APInt *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  int64_t v146;
  int64_t v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  unsigned int v151;
  int v152;
  int v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  uint8x8_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t **v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  size_t v180;
  void *v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  void *v185;
  int v186;
  void *v187;
  unsigned int v188;
  unint64_t v189;
  unsigned int v190;
  void *v191;
  int v192;
  llvm::APInt *v193;
  unint64_t v194;
  uint64_t v195;
  _QWORD v196[5];
  const llvm::Instruction *v197;

  v14 = a2;
  v197 = a2;
  v15 = *((unsigned int *)a6 + 2);
  v196[0] = a10;
  v196[1] = &v197;
  v196[2] = a7;
  v196[3] = this;
  v196[4] = a8;
  switch(*((_BYTE *)a2 + 16))
  {
    case ')':
      if (sub_1C49AB31C(a5))
        goto LABEL_9;
      v17 = *((_DWORD *)v197 + 5);
      if ((v17 & 0x40000000) != 0)
        v18 = (uint64_t *)*((_QWORD *)v197 - 1);
      else
        v18 = (uint64_t *)((char *)v197 - 32 * (v17 & 0x7FFFFFF));
      sub_1C4E06210((uint64_t)v196, v15, *v18, v18[4]);
      sub_1C4E07DDC((uint64_t)&v194, (int)a4, a5, (uint64_t)a7, (uint64_t)a8, 1, 0);
      goto LABEL_123;
    case '*':
    case ',':
    case '.':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
      return;
    case '+':
      if (!sub_1C49AB31C(a5))
      {
        v153 = *((_DWORD *)v197 + 5);
        if ((v153 & 0x40000000) != 0)
          v154 = (uint64_t *)*((_QWORD *)v197 - 1);
        else
          v154 = (uint64_t *)((char *)v197 - 32 * (v153 & 0x7FFFFFF));
        sub_1C4E06210((uint64_t)v196, v15, *v154, v154[4]);
        llvm::DemandedBits::determineLiveOperandBitsSub(a4, a7, (const llvm::KnownBits *)a8, a5, (uint64_t)&v194);
        goto LABEL_123;
      }
LABEL_9:
      if (*((_DWORD *)a6 + 2) <= 0x40u)
      {
LABEL_54:
        if (*((_DWORD *)a5 + 2) <= 0x40u)
        {
          *(_QWORD *)a6 = *(_QWORD *)a5;
          v35 = *((_DWORD *)a5 + 2);
          goto LABEL_127;
        }
      }
LABEL_56:
      if (a6 == a5)
        return;
      llvm::APInt::reallocate((uint64_t)a6, *((_DWORD *)a5 + 2));
      v36 = *((unsigned int *)a6 + 2);
      if (v36 > 0x40)
      {
        memcpy(*(void **)a6, *(const void **)a5, ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8);
        return;
      }
      v56 = *(_QWORD *)a5;
      goto LABEL_87;
    case '-':
      v19 = *((_DWORD *)a5 + 2);
      if (v19 > 0x40)
        v20 = llvm::APInt::countLeadingZerosSlowCase(a5);
      else
        v20 = v19 + __clz(*(_QWORD *)a5) - 64;
      v41 = v19 - v20;
      goto LABEL_69;
    case '5':
      if ((_DWORD)a4)
        return;
      v193 = 0;
      v21 = *((_DWORD *)a2 + 5);
      v22 = (v21 & 0x40000000) != 0
          ? (const llvm::Instruction *)*((_QWORD *)a2 - 1)
          : (const llvm::Instruction *)((char *)a2 - 32 * (v21 & 0x7FFFFFF));
      v73 = (unsigned __int8 *)*((_QWORD *)v22 + 4);
      v194 = (unint64_t)&v193;
      v195 = 0;
      if (!sub_1C4D89F84((uint64_t)&v194, v73))
        return;
      v74 = v193;
      v75 = v15 - 1;
      v76 = *((_DWORD *)v193 + 2);
      if (v76 >= 0x41)
      {
        if (v76 - llvm::APInt::countLeadingZerosSlowCase(v193) > 0x40)
          goto LABEL_180;
        v77 = **(_QWORD **)v74;
      }
      else
      {
        v77 = *(_QWORD *)v193;
      }
      if (v77 <= (v15 - 1))
        v75 = v77;
LABEL_180:
      v119 = *((unsigned int *)a5 + 2);
      if (v119 > 0x40)
      {
        v120 = operator new[]();
        memcpy((void *)v120, *(const void **)a5, ((unint64_t)(v119 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::tcShiftRight((llvm::APInt *)v120, (unint64_t *)((unint64_t)(v119 + 63) >> 6), v75);
      }
      else if ((_DWORD)v119 == v75)
      {
        v120 = 0;
      }
      else
      {
        v120 = *(_QWORD *)a5 >> v75;
      }
      if (*((_DWORD *)a6 + 2) >= 0x41u && *(_QWORD *)a6)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
      *(_QWORD *)a6 = v120;
      *((_DWORD *)a6 + 2) = v119;
      if ((*((_BYTE *)v197 + 17) & 4) != 0)
      {
        LODWORD(v195) = v15;
        if (v15 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
          LODWORD(v15) = v195;
        }
        else
        {
          v194 = 0;
        }
        sub_1C4912E54(&v194, v15 + ~v75, v15);
        v127 = *((unsigned int *)a6 + 2);
        if (v127 > 0x40)
        {
          v128 = *(_QWORD **)a6;
          v129 = (uint64_t *)v194;
          v130 = (unint64_t)(v127 + 63) >> 6;
          do
          {
            v131 = *v129++;
            *v128++ |= v131;
            --v130;
          }
          while (v130);
          goto LABEL_257;
        }
      }
      else
      {
        if ((*((_BYTE *)v197 + 17) & 2) == 0)
          return;
        LODWORD(v195) = v15;
        if (v15 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
          LODWORD(v15) = v195;
        }
        else
        {
          v194 = 0;
        }
        sub_1C4912E54(&v194, v15 - v75, v15);
        v121 = *((unsigned int *)a6 + 2);
        if (v121 > 0x40)
        {
          v122 = *(_QWORD **)a6;
          v123 = (uint64_t *)v194;
          v124 = (unint64_t)(v121 + 63) >> 6;
          do
          {
            v125 = *v123++;
            *v122++ |= v125;
            --v124;
          }
          while (v124);
          goto LABEL_257;
        }
      }
      goto LABEL_239;
    case '6':
      if ((_DWORD)a4)
        return;
      v193 = 0;
      v23 = *((_DWORD *)a2 + 5);
      v24 = (v23 & 0x40000000) != 0
          ? (const llvm::Instruction *)*((_QWORD *)a2 - 1)
          : (const llvm::Instruction *)((char *)a2 - 32 * (v23 & 0x7FFFFFF));
      v78 = (unsigned __int8 *)*((_QWORD *)v24 + 4);
      v194 = (unint64_t)&v193;
      v195 = 0;
      if (!sub_1C4D89F84((uint64_t)&v194, v78))
        return;
      v79 = v193;
      v80 = (v15 - 1);
      v81 = *((_DWORD *)v193 + 2);
      if (v81 >= 0x41)
      {
        if (v81 - llvm::APInt::countLeadingZerosSlowCase(v193) > 0x40)
          goto LABEL_198;
        v82 = **(_QWORD **)v79;
      }
      else
      {
        v82 = *(_QWORD *)v193;
      }
      if (v82 <= v80)
        LODWORD(v80) = v82;
LABEL_198:
      v126 = *((unsigned int *)a5 + 2);
      LODWORD(v195) = v126;
      if (v126 > 0x40)
      {
        v132 = ((unint64_t)(v126 + 63) >> 3) & 0x3FFFFFF8;
        v194 = operator new[]();
        memcpy((void *)v194, *(const void **)a5, v132);
      }
      else
      {
        v194 = *(_QWORD *)a5;
      }
      sub_1C4888094((uint64_t)&v194, v80);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *(_QWORD *)a6)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
      *(_QWORD *)a6 = v194;
      *((_DWORD *)a6 + 2) = v195;
      if ((*((_BYTE *)v197 + 17) & 2) == 0)
        return;
      LODWORD(v195) = v15;
      if (v15 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
      else
        v194 = 0;
      sub_1C4912E54(&v194, 0, v80);
      v133 = *((unsigned int *)a6 + 2);
      if (v133 <= 0x40)
        goto LABEL_239;
      v134 = *(_QWORD **)a6;
      v135 = (uint64_t *)v194;
      v136 = (unint64_t)(v133 + 63) >> 6;
      do
      {
        v137 = *v135++;
        *v134++ |= v137;
        --v136;
      }
      while (v136);
      goto LABEL_257;
    case '7':
      if ((_DWORD)a4)
        return;
      v193 = 0;
      v25 = *((_DWORD *)a2 + 5);
      v26 = (v25 & 0x40000000) != 0
          ? (const llvm::Instruction *)*((_QWORD *)a2 - 1)
          : (const llvm::Instruction *)((char *)a2 - 32 * (v25 & 0x7FFFFFF));
      v83 = (unsigned __int8 *)*((_QWORD *)v26 + 4);
      v194 = (unint64_t)&v193;
      v195 = 0;
      if (!sub_1C4D89F84((uint64_t)&v194, v83))
        return;
      v84 = v193;
      v85 = (v15 - 1);
      v86 = *((_DWORD *)v193 + 2);
      if (v86 >= 0x41)
      {
        if (v86 - llvm::APInt::countLeadingZerosSlowCase(v193) > 0x40)
          goto LABEL_204;
        v87 = **(_QWORD **)v84;
      }
      else
      {
        v87 = *(_QWORD *)v193;
      }
      if (v87 <= v85)
        LODWORD(v85) = v87;
LABEL_204:
      LODWORD(v195) = *((_DWORD *)a5 + 2);
      if (v195 > 0x40)
      {
        v194 = operator new[]();
        memcpy((void *)v194, *(const void **)a5, (((unint64_t)v195 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v194 = *(_QWORD *)a5;
      }
      sub_1C4888094((uint64_t)&v194, v85);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *(_QWORD *)a6)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
      *(_QWORD *)a6 = v194;
      *((_DWORD *)a6 + 2) = v195;
      LODWORD(v195) = v15;
      if (v15 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
        v138 = v195;
      }
      else
      {
        v194 = 0;
        v138 = v15;
      }
      sub_1C4912E54(&v194, v138 - v85, v138);
      v139 = v195;
      if (v195 < 0x41)
      {
        if ((v194 & *(_QWORD *)a5) == 0)
          goto LABEL_235;
        goto LABEL_231;
      }
      v144 = (_QWORD *)v194;
      v145 = *(uint64_t **)a5;
      v146 = ((unint64_t)v195 + 63) >> 6;
      v147 = v146;
      do
      {
        v148 = *v145++;
        *v144++ &= v148;
        --v147;
      }
      while (v147);
      v149 = 0;
      LODWORD(v195) = 0;
      do
      {
        v50 = v146-- < 1;
        if (v50)
          break;
        v150 = *(_QWORD *)(v194 + 8 * v146);
        v149 += __clz(v150);
      }
      while (!v150);
      v151 = v139 | 0xFFFFFFC0;
      if ((v139 & 0x3F) == 0)
        v151 = 0;
      v152 = v149 + v151;
      if (v194)
      {
        MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
        if (v195 >= 0x41)
        {
          if (v194)
            MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
        }
      }
      if (v152 != v139)
      {
LABEL_231:
        v140 = *((_DWORD *)a6 + 2);
        v141 = 1 << (v140 - 1);
        if (v140 >= 0x41)
          v142 = (llvm::APInt *)(*(_QWORD *)a6 + 8 * ((v140 - 1) >> 6));
        else
          v142 = a6;
        *(_QWORD *)v142 |= v141;
      }
LABEL_235:
      if ((*((_BYTE *)v197 + 17) & 2) != 0)
      {
        LODWORD(v195) = v15;
        if (v15 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
        else
          v194 = 0;
        sub_1C4912E54(&v194, 0, v85);
        v143 = *((unsigned int *)a6 + 2);
        if (v143 > 0x40)
        {
          v155 = *(_QWORD **)a6;
          v156 = (uint64_t *)v194;
          v157 = (unint64_t)(v143 + 63) >> 6;
          do
          {
            v158 = *v156++;
            *v155++ |= v158;
            --v157;
          }
          while (v157);
        }
        else
        {
LABEL_239:
          *(_QWORD *)a6 |= v194;
        }
LABEL_257:
        if (v195 >= 0x41)
        {
          v66 = v194;
          if (v194)
            goto LABEL_259;
        }
      }
      return;
    case '8':
      if (v15 > 0x40 || *((_DWORD *)a5 + 2) > 0x40u)
      {
        if (a6 != a5)
        {
          llvm::APInt::reallocate((uint64_t)a6, *((_DWORD *)a5 + 2));
          v159 = *((unsigned int *)a6 + 2);
          if (v159 <= 0x40)
            *(_QWORD *)a6 = *(_QWORD *)a5;
          else
            memcpy(*(void **)a6, *(const void **)a5, ((unint64_t)(v159 + 63) >> 3) & 0x3FFFFFF8);
        }
        v14 = v197;
      }
      else
      {
        *(_QWORD *)a6 = *(_QWORD *)a5;
        *((_DWORD *)a6 + 2) = *((_DWORD *)a5 + 2);
      }
      v37 = *((_DWORD *)v14 + 5);
      if ((v37 & 0x40000000) != 0)
        v38 = (uint64_t *)*((_QWORD *)v14 - 1);
      else
        v38 = (uint64_t *)((char *)v14 - 32 * (v37 & 0x7FFFFFF));
      sub_1C4E06210((uint64_t)v196, v15, *v38, v38[4]);
      v57 = *((unsigned int *)a8 + 2);
      if ((_DWORD)a4)
      {
        v188 = *((_DWORD *)a8 + 2);
        if (v57 > 0x40)
        {
          v68 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
          v187 = (void *)operator new[]();
          memcpy(v187, *a8, v68);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v187);
          LODWORD(v57) = v188;
          v60 = (unint64_t)v187;
          if (v188 > 0x40)
          {
            v100 = *(uint64_t **)a7;
            v101 = ((unint64_t)v188 + 63) >> 6;
            v102 = v187;
            do
            {
              v103 = *v100++;
              *v102++ &= v103;
              --v101;
            }
            while (v101);
            v190 = v57;
            v189 = v60;
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v189);
            LODWORD(v57) = v190;
            v70 = v189;
            goto LABEL_157;
          }
          v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v188;
        }
        else
        {
          v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
          if ((_DWORD)v57)
            v59 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
          else
            v59 = 0;
          v60 = v59 & ~(unint64_t)*a8;
        }
        v69 = ~(*(_QWORD *)a7 & v60);
        if (!(_DWORD)v57)
          v58 = 0;
        v70 = v58 & v69;
LABEL_157:
        v190 = 0;
        v104 = *((unsigned int *)a6 + 2);
        if (v104 > 0x40)
        {
          v105 = *(_QWORD **)a6;
          v106 = (unint64_t)(v104 + 63) >> 6;
          v107 = (uint64_t *)v70;
          do
          {
            v108 = *v107++;
            *v105++ &= v108;
            --v106;
          }
          while (v106);
        }
        else
        {
          *(_QWORD *)a6 &= v70;
        }
        if (v57 >= 0x41 && v70)
        {
          MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
          v109 = v190;
          goto LABEL_174;
        }
        return;
      }
      v192 = *((_DWORD *)a8 + 2);
      if (v57 > 0x40)
      {
        v88 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
        v191 = (void *)operator new[]();
        memcpy(v191, *a8, v88);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v191);
        LODWORD(v57) = v192;
        v66 = (unint64_t)v191;
      }
      else
      {
        v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
        if (!(_DWORD)v57)
          v65 = 0;
        v66 = v65 & ~(unint64_t)*a8;
      }
      v89 = *((unsigned int *)a6 + 2);
      if (v89 > 0x40)
      {
        v90 = *(_QWORD **)a6;
        v91 = (unint64_t)(v89 + 63) >> 6;
        v92 = (uint64_t *)v66;
        do
        {
          v93 = *v92++;
          *v90++ &= v93;
          --v91;
        }
        while (v91);
        goto LABEL_151;
      }
      goto LABEL_148;
    case '9':
      if (v15 > 0x40 || *((_DWORD *)a5 + 2) > 0x40u)
      {
        if (a6 != a5)
        {
          llvm::APInt::reallocate((uint64_t)a6, *((_DWORD *)a5 + 2));
          v160 = *((unsigned int *)a6 + 2);
          if (v160 <= 0x40)
            *(_QWORD *)a6 = *(_QWORD *)a5;
          else
            memcpy(*(void **)a6, *(const void **)a5, ((unint64_t)(v160 + 63) >> 3) & 0x3FFFFFF8);
        }
        v14 = v197;
      }
      else
      {
        *(_QWORD *)a6 = *(_QWORD *)a5;
        *((_DWORD *)a6 + 2) = *((_DWORD *)a5 + 2);
      }
      v39 = *((_DWORD *)v14 + 5);
      if ((v39 & 0x40000000) != 0)
        v40 = (uint64_t *)*((_QWORD *)v14 - 1);
      else
        v40 = (uint64_t *)((char *)v14 - 32 * (v39 & 0x7FFFFFF));
      sub_1C4E06210((uint64_t)v196, v15, *v40, v40[4]);
      if ((_DWORD)a4)
      {
        v61 = *((unsigned int *)a8 + 6);
        v182 = v61;
        if (v61 > 0x40)
        {
          v71 = ((unint64_t)(v61 + 63) >> 3) & 0x3FFFFFF8;
          v181 = (void *)operator new[]();
          memcpy(v181, a8[2], v71);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v181);
          LODWORD(v61) = v182;
          v64 = (unint64_t)v181;
          if (v182 > 0x40)
          {
            v110 = (uint64_t *)*((_QWORD *)a7 + 2);
            v111 = ((unint64_t)v182 + 63) >> 6;
            v112 = v181;
            do
            {
              v113 = *v110++;
              *v112++ &= v113;
              --v111;
            }
            while (v111);
            v184 = v61;
            v183 = v64;
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v183);
            LODWORD(v61) = v184;
            v70 = v183;
LABEL_167:
            v184 = 0;
            v114 = *((unsigned int *)a6 + 2);
            if (v114 > 0x40)
            {
              v115 = *(_QWORD **)a6;
              v116 = (unint64_t)(v114 + 63) >> 6;
              v117 = (uint64_t *)v70;
              do
              {
                v118 = *v117++;
                *v115++ &= v118;
                --v116;
              }
              while (v116);
            }
            else
            {
              *(_QWORD *)a6 &= v70;
            }
            if (v61 >= 0x41 && v70)
            {
              MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
              v109 = v184;
LABEL_174:
              if (v109 >= 0x41)
              {
                v66 = v70;
                goto LABEL_259;
              }
            }
            return;
          }
          v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v182;
        }
        else
        {
          v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
          if ((_DWORD)v61)
            v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
          else
            v63 = 0;
          v64 = v63 & ~(unint64_t)a8[2];
        }
        v72 = ~(*((_QWORD *)a7 + 2) & v64);
        if (!(_DWORD)v61)
          v62 = 0;
        v70 = v62 & v72;
        goto LABEL_167;
      }
      v57 = *((unsigned int *)a8 + 6);
      v186 = v57;
      if (v57 > 0x40)
      {
        v94 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
        v185 = (void *)operator new[]();
        memcpy(v185, a8[2], v94);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v185);
        LODWORD(v57) = v186;
        v66 = (unint64_t)v185;
      }
      else
      {
        v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
        if (!(_DWORD)v57)
          v67 = 0;
        v66 = v67 & ~(unint64_t)a8[2];
      }
      v95 = *((unsigned int *)a6 + 2);
      if (v95 > 0x40)
      {
        v96 = *(_QWORD **)a6;
        v97 = (unint64_t)(v95 + 63) >> 6;
        v98 = (uint64_t *)v66;
        do
        {
          v99 = *v98++;
          *v96++ &= v99;
          --v97;
        }
        while (v97);
        goto LABEL_151;
      }
LABEL_148:
      *(_QWORD *)a6 &= v66;
LABEL_151:
      if (v57 >= 0x41 && v66)
LABEL_259:
        MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      return;
    case ':':
LABEL_53:
      if (v15 <= 0x40)
        goto LABEL_54;
      goto LABEL_56;
    case 'B':
      llvm::APInt::zext(a5, v15, (uint64_t)&v194);
      goto LABEL_123;
    case 'C':
      llvm::APInt::trunc(a5, v15, (llvm::APInt *)&v194);
      goto LABEL_123;
    case 'D':
      llvm::APInt::trunc(a5, v15, (llvm::APInt *)&v194);
      if (*((_DWORD *)a6 + 2) >= 0x41u && *(_QWORD *)a6)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
      *(_QWORD *)a6 = v194;
      *((_DWORD *)a6 + 2) = v195;
      v27 = *((_DWORD *)a5 + 2);
      v28 = v15 - v27;
      LODWORD(v195) = v27;
      if (v27 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
        v27 = v195;
      }
      else
      {
        v194 = 0;
      }
      sub_1C4912E54(&v194, v28 + v27, v27);
      v29 = v195;
      if (v195 >= 0x41)
      {
        v44 = (_QWORD *)v194;
        v45 = *(uint64_t **)a5;
        v46 = ((unint64_t)v195 + 63) >> 6;
        v47 = v46;
        do
        {
          v48 = *v45++;
          *v44++ &= v48;
          --v47;
        }
        while (v47);
        v49 = 0;
        LODWORD(v195) = 0;
        do
        {
          v50 = v46-- < 1;
          if (v50)
            break;
          v51 = *(_QWORD *)(v194 + 8 * v46);
          v49 += __clz(v51);
        }
        while (!v51);
        v52 = v29 | 0xFFFFFFC0;
        if ((v29 & 0x3F) == 0)
          v52 = 0;
        v53 = v49 + v52;
        if (v194)
        {
          MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
          if (v195 >= 0x41)
          {
            if (v194)
              MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
          }
        }
        if (v53 == v29)
          return;
      }
      else if ((v194 & *(_QWORD *)a5) == 0)
      {
        return;
      }
      v54 = *((_DWORD *)a6 + 2);
      v55 = 1 << (v54 - 1);
      if (v54 <= 0x40)
      {
        v56 = *(_QWORD *)a6 | v55;
        goto LABEL_87;
      }
      *(_QWORD *)(*(_QWORD *)a6 + 8 * ((v54 - 1) >> 6)) |= v55;
      return;
    default:
      switch(*((_BYTE *)a2 + 16))
      {
        case 'S':
          goto LABEL_53;
        case 'T':
          v30 = *((_QWORD *)a2 - 4);
          if (!v30
            || *(_BYTE *)(v30 + 16)
            || *(_QWORD *)(v30 + 24) != *((_QWORD *)a2 + 9)
            || (*(_BYTE *)(v30 + 33) & 0x20) == 0)
          {
            return;
          }
          v31 = *(_DWORD *)(v30 + 36);
          if (v31 <= 273)
          {
            if (v31 > 53)
            {
              if ((v31 - 148) >= 2)
              {
                if (v31 != 54 || (_DWORD)a4)
                  return;
                sub_1C4E06210((uint64_t)v196, v15, (uint64_t)a3, 0);
                v168 = (unint64_t **)((char *)a7 + 16);
                v169 = *((_DWORD *)a7 + 6);
                if (v169 > 0x40)
                {
                  v171 = llvm::APInt::countTrailingZerosSlowCase(v168);
                }
                else
                {
                  v170 = __clz(__rbit64((unint64_t)*v168));
                  if (v169 >= v170)
                    v171 = v170;
                  else
                    v171 = *((_DWORD *)a7 + 6);
                }
                if (v171 + 1 < v15)
                  v41 = v171 + 1;
                else
                  v41 = v15;
LABEL_69:
                LODWORD(v195) = v15;
                if (v15 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
                else
                  v194 = 0;
                v42 = 0;
                v43 = v41;
LABEL_72:
                sub_1C4912E54(&v194, v42, v43);
              }
              else
              {
                v193 = 0;
                if ((_DWORD)a4 == 2)
                {
                  a9.i32[0] = v15;
                  v165 = (uint8x8_t)vcnt_s8(a9);
                  v165.i16[0] = vaddlv_u8(v165);
                  if (v165.i32[0] != 1)
                    return;
                  v166 = (v15 - 1);
                  if (v15 > 0x40)
                  {
                    **(_QWORD **)a6 = v166;
                    bzero((void *)(*(_QWORD *)a6 + 8), (((v15 + 63) >> 3) - 8) & 0xFFFFFFF8);
                  }
                  else
                  {
                    v167 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
                    if (!(_DWORD)v15)
                      v167 = 0;
                    v56 = v167 & v166;
LABEL_87:
                    *(_QWORD *)a6 = v56;
                  }
                  return;
                }
                v172 = (unsigned __int8 *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[8];
                v194 = (unint64_t)&v193;
                v195 = 0;
                if (!sub_1C4D89F84((uint64_t)&v194, v172))
                  return;
                v173 = llvm::APInt::urem((uint64_t **)v193, v15);
                if (*(_DWORD *)(*((_QWORD *)v14 - 4) + 36) == 149)
                  v174 = v15 - v173;
                else
                  v174 = v173;
                if ((_DWORD)a4 != 1)
                {
                  if (!(_DWORD)a4)
                  {
                    v175 = *((unsigned int *)a5 + 2);
                    if (v175 > 0x40)
                    {
                      v176 = operator new[]();
                      memcpy((void *)v176, *(const void **)a5, ((unint64_t)(v175 + 63) >> 3) & 0x3FFFFFF8);
                      llvm::APInt::tcShiftRight((llvm::APInt *)v176, (unint64_t *)((unint64_t)(v175 + 63) >> 6), v174);
                    }
                    else if ((_DWORD)v175 == v174)
                    {
                      v176 = 0;
                    }
                    else
                    {
                      v176 = *(_QWORD *)a5 >> v174;
                    }
                    if (*((_DWORD *)a6 + 2) >= 0x41u && *(_QWORD *)a6)
                      MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
                    *(_QWORD *)a6 = v176;
                    *((_DWORD *)a6 + 2) = v175;
                  }
                  return;
                }
                v178 = v15 - v174;
                v179 = *((unsigned int *)a5 + 2);
                LODWORD(v195) = v179;
                if (v179 > 0x40)
                {
                  v180 = ((unint64_t)(v179 + 63) >> 3) & 0x3FFFFFF8;
                  v194 = operator new[]();
                  memcpy((void *)v194, *(const void **)a5, v180);
                }
                else
                {
                  v194 = *(_QWORD *)a5;
                }
                sub_1C4888094((uint64_t)&v194, v178);
              }
            }
            else if (v31 == 8)
            {
              llvm::APInt::reverseBits(a5, (llvm::APInt *)&v194);
            }
            else
            {
              if (v31 != 9)
              {
                if (v31 == 52 && !(_DWORD)a4)
                {
                  sub_1C4E06210((uint64_t)v196, v15, (uint64_t)a3, 0);
                  v32 = (llvm::KnownBits *)((char *)a7 + 16);
                  v33 = *((_DWORD *)a7 + 6);
                  if (v33 > 0x40)
                    v34 = llvm::APInt::countLeadingZerosSlowCase(v32);
                  else
                    v34 = v33 + __clz(*(_QWORD *)v32) - 64;
                  if (v34 + 1 < v15)
                    v177 = v34 + 1;
                  else
                    v177 = v15;
                  LODWORD(v195) = v15;
                  if (v15 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
                    LODWORD(v15) = v195;
                  }
                  else
                  {
                    v194 = 0;
                  }
                  v42 = v15 - v177;
LABEL_283:
                  v43 = v15;
                  goto LABEL_72;
                }
                return;
              }
              llvm::APInt::byteSwap(a5, (llvm::APInt *)&v194);
            }
LABEL_123:
            if (*((_DWORD *)a6 + 2) >= 0x41u)
            {
              if (*(_QWORD *)a6)
                MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
            }
            *(_QWORD *)a6 = v194;
            v35 = v195;
LABEL_127:
            *((_DWORD *)a6 + 2) = v35;
            return;
          }
          v161 = v31 - 274;
          if (v161 <= 0x20 && ((1 << v161) & 0x180000003) != 0)
          {
            v162 = *((_DWORD *)a5 + 2);
            if (v162 > 0x40)
            {
              v164 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a5);
            }
            else
            {
              v163 = __clz(__rbit64(*(_QWORD *)a5));
              if (v162 >= v163)
                v164 = v163;
              else
                v164 = *((_DWORD *)a5 + 2);
            }
            LODWORD(v195) = v15;
            if (v15 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
              LODWORD(v15) = v195;
            }
            else
            {
              v194 = 0;
            }
            v42 = v164;
            goto LABEL_283;
          }
          return;
        case 'U':
          if ((_DWORD)a4)
            goto LABEL_53;
          return;
        case 'Y':
          if (!(_DWORD)a4)
            goto LABEL_53;
          return;
        case 'Z':
        case '[':
          if (a4 <= 1)
            goto LABEL_53;
          return;
        default:
          return;
      }
  }
}

void sub_1C4E06210(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const llvm::DataLayout *v10;
  int8x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::DataLayout *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  if (!**(_BYTE **)a1)
  {
    v7 = *(_QWORD *)(a1 + 24);
    **(_BYTE **)a1 = 1;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 40) + 56) + 40);
    LODWORD(v26) = a2;
    if (a2 > 0x40)
    {
      v20 = a3;
      llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
      LODWORD(v28) = a2;
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
      a3 = v20;
    }
    else
    {
      LODWORD(v28) = a2;
      v25 = 0;
      v27 = 0;
    }
    v9 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(v9 + 8) >= 0x41u && *(_QWORD *)v9)
    {
      v23 = a3;
      MEMORY[0x1CAA32F9C](*(_QWORD *)v9, 0x1000C8000313F17);
      a3 = v23;
    }
    v10 = (const llvm::DataLayout *)(v8 + 272);
    *(_QWORD *)v9 = v25;
    *(_DWORD *)(v9 + 8) = v26;
    if (*(_DWORD *)(v9 + 24) >= 0x41u)
    {
      v21 = *(_QWORD *)(v9 + 16);
      if (v21)
      {
        v24 = a3;
        MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
        a3 = v24;
      }
    }
    *(_QWORD *)(v9 + 16) = v27;
    *(_DWORD *)(v9 + 24) = v28;
    v11 = *(int8x8_t **)(a1 + 16);
    v12 = **(_QWORD **)(a1 + 8);
    v14 = *(_QWORD *)(v7 + 8);
    v13 = *(_QWORD *)(v7 + 16);
    if (!v12 || !*(_QWORD *)(v12 + 40))
    {
      if (!a3 || *(unsigned __int8 *)(a3 + 16) < 0x1Cu || (v12 = a3, !*(_QWORD *)(a3 + 40)))
        v12 = 0;
    }
    v25 = v10;
    v26 = v14;
    v27 = v12;
    v28 = v13;
    v29 = 0;
    v30 = 1;
    sub_1C4F82B7C(a3, v11, 0, &v25);
    if (a4)
    {
      LODWORD(v26) = a2;
      if (a2 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
        LODWORD(v28) = a2;
        llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
      }
      else
      {
        LODWORD(v28) = a2;
        v25 = 0;
        v27 = 0;
      }
      v15 = *(_QWORD *)(a1 + 32);
      if (*(_DWORD *)(v15 + 8) >= 0x41u && *(_QWORD *)v15)
        MEMORY[0x1CAA32F9C](*(_QWORD *)v15, 0x1000C8000313F17);
      *(_QWORD *)v15 = v25;
      *(_DWORD *)(v15 + 8) = v26;
      if (*(_DWORD *)(v15 + 24) >= 0x41u)
      {
        v22 = *(_QWORD *)(v15 + 16);
        if (v22)
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      }
      *(_QWORD *)(v15 + 16) = v27;
      *(_DWORD *)(v15 + 24) = v28;
      v16 = *(int8x8_t **)(a1 + 32);
      v17 = **(_QWORD **)(a1 + 8);
      v19 = *(_QWORD *)(v7 + 8);
      v18 = *(_QWORD *)(v7 + 16);
      if (!v17 || !*(_QWORD *)(v17 + 40))
      {
        if (*(unsigned __int8 *)(a4 + 16) < 0x1Cu || (v17 = a4, !*(_QWORD *)(a4 + 40)))
          v17 = 0;
      }
      v25 = v10;
      v26 = v19;
      v27 = v17;
      v28 = v18;
      v29 = 0;
      v30 = 1;
      sub_1C4F82B7C(a4, v16, 0, &v25);
    }
  }
}

uint64_t llvm::DemandedBits::determineLiveOperandBitsAdd@<X0>(llvm::DemandedBits *this@<X0>, const llvm::APInt *a2@<X2>, const llvm::KnownBits *a3@<X3>, llvm::APInt *a4@<X1>, uint64_t a5@<X8>)
{
  return sub_1C4E07DDC(a5, (int)this, a4, (uint64_t)a2, (uint64_t)a3, 1, 0);
}

void llvm::DemandedBits::performAnalysis(llvm::DemandedBits *this)
{
  void *v2;
  llvm::SmallPtrSetImplBase *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int PrimitiveSizeInBits;
  _QWORD *v17;
  llvm::APInt *v18;
  int v19;
  _QWORD *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  _DWORD *v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  int v47;
  unsigned int v48;
  _QWORD *v49;
  const void *v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  _QWORD *v55;
  _QWORD *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  llvm::Instruction *v63;
  int v64;
  _QWORD *v65;
  void **v66;
  unsigned int v67;
  unsigned int v68;
  void *v69;
  char v70;
  int v71;
  int64_t v72;
  BOOL v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  const llvm::Value **v78;
  const llvm::Value **v79;
  uint64_t v80;
  const llvm::Value *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  int8x8_t v85;
  unsigned int v86;
  void *v87;
  char v88;
  int v89;
  _QWORD *v90;
  int v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  BOOL v97;
  unsigned int v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  const llvm::Value *v103;
  int v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int64_t v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  int v118;
  unsigned int v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  int v123;
  BOOL v124;
  unsigned int v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v139;
  unsigned int v141;
  int v142;
  unsigned int v143;
  void *v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  void *v148;
  uint64_t v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  llvm::SmallPtrSetImplBase *v161;
  _QWORD *v162;
  _QWORD *v163;
  unsigned int v164;
  void *__s1;
  unsigned int v166;
  uint64_t v167;
  BOOL v168;
  const void *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  _QWORD *v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  void *__dst;
  unsigned int v178;
  llvm::Instruction *v179;
  uint64_t v180;
  _QWORD *v181;
  int v182;
  void *v183;
  uint64_t v184;
  _QWORD v185[18];

  v185[16] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 24))
    return;
  v3 = (llvm::DemandedBits *)((char *)this + 32);
  v2 = (void *)*((_QWORD *)this + 4);
  *((_BYTE *)this + 24) = 1;
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4 == v2)
    goto LABEL_3;
  v137 = *((unsigned int *)this + 12);
  if (v137 < 0x21 || 4 * (*((_DWORD *)this + 13) - *((_DWORD *)this + 14)) >= v137)
  {
    memset(v4, 255, 8 * v137);
LABEL_3:
    *((_DWORD *)this + 13) = 0;
    *((_DWORD *)this + 14) = 0;
    goto LABEL_4;
  }
  free(v4);
  v141 = *((_DWORD *)this + 13) - *((_DWORD *)this + 14);
  v142 = 1 << (33 - __clz(v141 - 1));
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
  if (v141 <= 0x10)
    v143 = 32;
  else
    v143 = v142;
  *((_DWORD *)this + 12) = v143;
  v144 = malloc_type_malloc(8 * v143, 0x4065EBACuLL);
  if (!v144)
    goto LABEL_301;
  *((_QWORD *)this + 5) = v144;
  memset(v144, 255, 8 * *((unsigned int *)this + 12));
LABEL_4:
  v162 = (_QWORD *)((char *)this + 320);
  v5 = *((_DWORD *)this + 82);
  if (!v5 && !*((_DWORD *)this + 83))
    goto LABEL_6;
  v149 = *((unsigned int *)this + 84);
  if (v149 <= 4 * v5 || v149 < 0x41)
  {
    if (!(_DWORD)v149)
    {
LABEL_294:
      *((_QWORD *)this + 41) = 0;
      goto LABEL_6;
    }
    v153 = *v162;
    v154 = 24 * v149;
    while (1)
    {
      if (*(_QWORD *)v153 == -8192)
        goto LABEL_292;
      if (*(_QWORD *)v153 != -4096)
        break;
LABEL_293:
      v153 += 24;
      v154 -= 24;
      if (!v154)
        goto LABEL_294;
    }
    if (*(_DWORD *)(v153 + 16) >= 0x41u)
    {
      v155 = *(_QWORD *)(v153 + 8);
      if (v155)
        MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
    }
LABEL_292:
    *(_QWORD *)v153 = -4096;
    goto LABEL_293;
  }
  sub_1C4E08CF4((uint64_t)v162);
  if (v5)
  {
    v150 = 1 << (33 - __clz(v5 - 1));
    if (v150 <= 64)
      v5 = 64;
    else
      v5 = v150;
  }
  if (v5 == *((_DWORD *)this + 84))
  {
    *((_QWORD *)this + 41) = 0;
    if (v5)
    {
      v151 = (_QWORD *)*((_QWORD *)this + 40);
      v152 = 24 * v5;
      do
      {
        *v151 = -4096;
        v151 += 3;
        v152 -= 24;
      }
      while (v152);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v162, 8);
    if (v5)
    {
      v156 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v157 = v156 | (v156 >> 2) | ((v156 | (v156 >> 2)) >> 4);
      LODWORD(v157) = (((v157 | (v157 >> 8)) >> 16) | v157 | (v157 >> 8)) + 1;
      *((_DWORD *)this + 84) = v157;
      v158 = operator new(24 * v157, (std::align_val_t)8uLL);
      *((_QWORD *)this + 40) = v158;
      *((_QWORD *)this + 41) = 0;
      v159 = *((unsigned int *)this + 84);
      if ((_DWORD)v159)
      {
        v160 = 24 * v159;
        do
        {
          *v158 = -4096;
          v158 += 3;
          v160 -= 24;
        }
        while (v160);
      }
    }
    else
    {
      *v162 = 0;
      *((_QWORD *)this + 41) = 0;
      *((_DWORD *)this + 84) = 0;
    }
  }
LABEL_6:
  v6 = (void *)*((_QWORD *)this + 44);
  if (v6 != *((void **)this + 43))
  {
    v139 = *((unsigned int *)this + 90);
    if (v139 < 0x21 || 4 * (*((_DWORD *)this + 91) - *((_DWORD *)this + 92)) >= v139)
    {
      memset(v6, 255, 8 * v139);
      goto LABEL_7;
    }
    free(v6);
    v145 = *((_DWORD *)this + 91) - *((_DWORD *)this + 92);
    v146 = 1 << (33 - __clz(v145 - 1));
    if (v145 <= 0x10)
      v147 = 32;
    else
      v147 = v146;
    *((_DWORD *)this + 90) = v147;
    *(_QWORD *)((char *)this + 364) = 0;
    v148 = malloc_type_malloc(8 * v147, 0x4065EBACuLL);
    if (v148)
    {
      *((_QWORD *)this + 44) = v148;
      memset(v148, 255, 8 * *((unsigned int *)this + 90));
      goto LABEL_8;
    }
LABEL_301:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_7:
  *(_QWORD *)((char *)this + 364) = 0;
LABEL_8:
  v161 = (llvm::DemandedBits *)((char *)this + 344);
  v180 = 1;
  v7 = 8;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v180 + v7) = v8;
    v7 += 16;
  }
  while (v7 != 136);
  v183 = v185;
  v184 = 0x1000000000;
  v9 = *(_QWORD *)this + 72;
  for (i = *(_QWORD *)(*(_QWORD *)this + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v9)
      goto LABEL_247;
    v11 = i - 24;
    if (!i)
      v11 = 0;
    v12 = *(_QWORD *)(v11 + 48);
    if (v12 != v11 + 40)
      break;
  }
  while (1)
  {
    if (v12)
      v13 = (_DWORD *)(v12 - 24);
    else
      v13 = 0;
    if (!sub_1C4E074C8((uint64_t)v13))
      goto LABEL_93;
    v14 = *(_QWORD *)v13;
    if ((*(_DWORD *)(*(_QWORD *)v13 + 8) & 0xFE) == 0x12)
    {
      v14 = **(_QWORD **)(v14 + 16);
      v15 = *(unsigned __int8 *)(v14 + 8);
    }
    else
    {
      v15 = *(_DWORD *)(*(_QWORD *)v13 + 8);
    }
    if (v15 == 13)
    {
      v169 = v13;
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
      v173 = 0;
      if ((sub_1C4E08D70(*((_QWORD *)this + 40), *((_DWORD *)this + 84), (uint64_t)v13, &v173) & 1) != 0)
        goto LABEL_93;
      v17 = sub_1C4E08DFC((uint64_t)v162, (uint64_t *)&v169, v173);
      *v17 = v169;
      v18 = (llvm::APInt *)(v17 + 1);
      *((_DWORD *)v17 + 4) = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
        llvm::APInt::initSlowCase(v18, 0, 0);
      else
        *(_QWORD *)v18 = 0;
      v173 = v13;
      if ((v180 & 1) != 0)
      {
        v19 = 16;
        v20 = &v181;
      }
      else
      {
        v19 = v182;
        if (!v182)
        {
          v32 = 0;
LABEL_46:
          v33 = sub_1C4E08FFC((uint64_t)&v180, (uint64_t)&v173, &v173, v32);
          *v33 = v173;
          v34 = v173;
          v35 = v184;
          if (v184 >= (unint64_t)HIDWORD(v184))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, (uint64_t)v185, v184 + 1, 8);
            v35 = v184;
          }
          *((_QWORD *)v183 + v35) = v34;
          LODWORD(v184) = v184 + 1;
          goto LABEL_93;
        }
        v20 = v181;
      }
      v21 = v19 - 1;
      v22 = v21 & ((v13 >> 4) ^ (v13 >> 9));
      v23 = &v20[v22];
      v24 = (_DWORD *)*v23;
      if (v13 == (_DWORD *)*v23)
        goto LABEL_93;
      v25 = 0;
      v26 = 1;
      while (v24 != (_DWORD *)-4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v24 == (_DWORD *)-8192;
        if (v27)
          v25 = v23;
        v28 = v22 + v26++;
        v22 = v28 & v21;
        v23 = &v20[v22];
        v24 = (_DWORD *)*v23;
        if (v13 == (_DWORD *)*v23)
          goto LABEL_93;
      }
      if (v25)
        v32 = v25;
      else
        v32 = v23;
      goto LABEL_46;
    }
    v29 = v13[5];
    if ((v29 & 0x40000000) != 0)
    {
      v31 = (_DWORD *)*((_QWORD *)v13 - 1);
      v30 = v29 & 0x7FFFFFF;
      if (!v30)
        goto LABEL_93;
LABEL_50:
      v36 = &v31[8 * v30];
      while (1)
      {
        v169 = 0;
        if (*(unsigned __int8 *)(*(_QWORD *)v31 + 16) <= 0x1Bu)
          v37 = 0;
        else
          v37 = *(uint64_t **)v31;
        v169 = v37;
        if (v37)
        {
          v38 = *v37;
          if ((*(_DWORD *)(*v37 + 8) & 0xFE) == 0x12)
          {
            v38 = **(_QWORD **)(v38 + 16);
            v39 = *(unsigned __int8 *)(v38 + 8);
          }
          else
          {
            v39 = *(_DWORD *)(*v37 + 8);
          }
          if (v39 == 13)
          {
            v40 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v38);
            v174 = v40;
            if (v40 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v173, -1, 1);
            }
            else
            {
              if (v40)
                v41 = (_QWORD *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v40);
              else
                v41 = 0;
              v173 = v41;
            }
            v42 = sub_1C4E09438((uint64_t)v162, (uint64_t *)&v169);
            v43 = v42;
            if (*((_DWORD *)v42 + 4) >= 0x41u)
            {
              v44 = v42[1];
              if (v44)
                MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
            }
            v43[1] = v173;
            *((_DWORD *)v43 + 4) = v174;
          }
          else
          {
            sub_1C4774094(v3, (uint64_t)v37);
          }
          if ((v180 & 1) != 0)
          {
            v45 = 16;
            v46 = &v181;
          }
          else
          {
            v45 = v182;
            if (!v182)
            {
              v55 = 0;
LABEL_84:
              v56 = sub_1C4E08FFC((uint64_t)&v180, (uint64_t)&v169, &v169, v55);
              *v56 = v169;
              v57 = v169;
              v58 = v184;
              if (v184 >= (unint64_t)HIDWORD(v184))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, (uint64_t)v185, v184 + 1, 8);
                v58 = v184;
              }
              *((_QWORD *)v183 + v58) = v57;
              LODWORD(v184) = v184 + 1;
              goto LABEL_87;
            }
            v46 = v181;
          }
          v47 = v45 - 1;
          v48 = ((v169 >> 4) ^ (v169 >> 9)) & v47;
          v49 = &v46[v48];
          v50 = (const void *)*v49;
          if (v169 != (const void *)*v49)
          {
            v51 = 0;
            v52 = 1;
            while (v50 != (const void *)-4096)
            {
              if (v51)
                v53 = 0;
              else
                v53 = v50 == (const void *)-8192;
              if (v53)
                v51 = v49;
              v54 = v48 + v52++;
              v48 = v54 & v47;
              v49 = &v46[v48];
              v50 = (const void *)*v49;
              if (v169 == (const void *)*v49)
                goto LABEL_87;
            }
            if (v51)
              v55 = v51;
            else
              v55 = v49;
            goto LABEL_84;
          }
        }
LABEL_87:
        v31 += 8;
        if (v31 == v36)
          goto LABEL_93;
      }
    }
    v30 = v29 & 0x7FFFFFF;
    v31 = &v13[-8 * v30];
    if (v30)
      goto LABEL_50;
LABEL_93:
    v12 = *(_QWORD *)(v12 + 8);
    v59 = i - 24;
    if (!i)
      v59 = 0;
    if (v12 == v59 + 40)
      break;
LABEL_100:
    if (i == v9)
      goto LABEL_105;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v9)
      break;
    v60 = i - 24;
    if (!i)
      v60 = 0;
    v12 = *(_QWORD *)(v60 + 48);
    if (v12 != v60 + 40)
      goto LABEL_100;
  }
LABEL_105:
  v61 = v184;
  if (!(_DWORD)v184)
    goto LABEL_247;
  while (2)
  {
    v62 = (char *)v183 + 8 * v61;
    v63 = (llvm::Instruction *)*((_QWORD *)v62 - 1);
    sub_1C4E094A8((uint64_t)&v180, (_QWORD *)v62 - 1);
    LODWORD(v184) = v184 - 1;
    v179 = v63;
    v178 = 1;
    __dst = 0;
    if ((*(_DWORD *)(*(_QWORD *)v63 + 8) & 0xFE) == 0x12)
      v64 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v63 + 16) + 8);
    else
      v64 = *(_DWORD *)(*(_QWORD *)v63 + 8);
    if (v64 != 13)
    {
LABEL_117:
      v70 = 0;
      goto LABEL_125;
    }
    v65 = sub_1C4E09438((uint64_t)v162, (uint64_t *)&v179);
    v66 = (void **)(v65 + 1);
    v67 = v178;
    if (v178 <= 0x40)
    {
      v68 = *((_DWORD *)v65 + 4);
      if (v68 <= 0x40)
      {
        v69 = *v66;
        __dst = *v66;
        v178 = v68;
        goto LABEL_116;
      }
    }
    if (&__dst != v66)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)v65 + 4));
      if (v178 > 0x40)
      {
        memcpy(__dst, *v66, (((unint64_t)v178 + 63) >> 3) & 0x3FFFFFF8);
        v67 = v178;
        goto LABEL_114;
      }
      v69 = *v66;
      __dst = *v66;
LABEL_116:
      if (!v69)
        goto LABEL_124;
      goto LABEL_117;
    }
LABEL_114:
    if (v67 <= 0x40)
    {
      v69 = __dst;
      goto LABEL_116;
    }
    v71 = 0;
    v72 = ((unint64_t)v67 + 63) >> 6;
    do
    {
      v73 = v72-- < 1;
      if (v73)
        break;
      v74 = *((_QWORD *)__dst + v72);
      v71 += __clz(v74);
    }
    while (!v74);
    v70 = 0;
    v75 = v67 | 0xFFFFFFC0;
    if ((v67 & 0x3F) == 0)
      v75 = 0;
    if (v71 + v75 == v67)
LABEL_124:
      v70 = sub_1C4E074C8((uint64_t)v63) ^ 1;
LABEL_125:
    v174 = 1;
    v173 = 0;
    v176 = 1;
    v175 = 0;
    v170 = 1;
    v169 = 0;
    v172 = 1;
    v171 = 0;
    v168 = 0;
    v76 = *((_DWORD *)v63 + 5);
    if ((v76 & 0x40000000) != 0)
    {
      v78 = (const llvm::Value **)*((_QWORD *)v63 - 1);
      v77 = v76 & 0x7FFFFFF;
    }
    else
    {
      v77 = v76 & 0x7FFFFFF;
      v78 = (const llvm::Value **)((char *)v63 - 32 * v77);
    }
    v79 = &v78[4 * v77];
    if (!v77)
      goto LABEL_228;
    while (2)
    {
      v167 = 0;
      if (*((unsigned __int8 *)*v78 + 16) <= 0x1Bu)
        v80 = 0;
      else
        v80 = (uint64_t)*v78;
      v167 = v80;
      v81 = *v78;
      if (!v80 && *((_BYTE *)v81 + 16) != 21)
        goto LABEL_210;
      v82 = *(_QWORD *)v81;
      v83 = *(_DWORD *)(*(_QWORD *)v81 + 8);
      if ((v83 & 0xFE) == 0x12)
      {
        v82 = **(_QWORD **)(v82 + 16);
        v83 = *(unsigned __int8 *)(v82 + 8);
      }
      else
      {
        v83 = v83;
      }
      if (v83 != 13)
      {
        if (!v80)
          goto LABEL_210;
        sub_1C4774094(v3, v80);
        if (!v88)
          goto LABEL_210;
        if ((v180 & 1) != 0)
        {
          v89 = 16;
          v90 = &v181;
        }
        else
        {
          v89 = v182;
          if (!v182)
          {
            v99 = 0;
LABEL_162:
            v100 = sub_1C4E08FFC((uint64_t)&v180, (uint64_t)&v167, &v167, v99);
            *v100 = v167;
            v101 = v167;
            v102 = v184;
            if (v184 >= (unint64_t)HIDWORD(v184))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, (uint64_t)v185, v184 + 1, 8);
              v102 = v184;
            }
            *((_QWORD *)v183 + v102) = v101;
            LODWORD(v184) = v184 + 1;
            goto LABEL_210;
          }
          v90 = v181;
        }
        v91 = v89 - 1;
        v92 = ((v167 >> 4) ^ (v167 >> 9)) & v91;
        v93 = &v90[v92];
        v94 = *v93;
        if (v167 == *v93)
          goto LABEL_210;
        v95 = 0;
        v96 = 1;
        while (v94 != -4096)
        {
          if (v95)
            v97 = 0;
          else
            v97 = v94 == -8192;
          if (v97)
            v95 = v93;
          v98 = v92 + v96++;
          v92 = v98 & v91;
          v93 = &v90[v92];
          v94 = *v93;
          if (v167 == *v93)
            goto LABEL_210;
        }
        if (v95)
          v99 = v95;
        else
          v99 = v93;
        goto LABEL_162;
      }
      v84 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v82);
      v86 = v84;
      v166 = v84;
      if (v84 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__s1, -1, 1);
        if ((v70 & 1) == 0)
          goto LABEL_170;
        v164 = v86;
        llvm::APInt::initSlowCase((llvm::APInt *)&v163, 0, 0);
        if (v166 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
LABEL_143:
        __s1 = v163;
        v166 = v164;
      }
      else
      {
        v87 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v84);
        if (!v84)
          v87 = 0;
        __s1 = v87;
        if ((v70 & 1) != 0)
        {
          v164 = v84;
          v163 = 0;
          goto LABEL_143;
        }
LABEL_170:
        v103 = v78[3];
        v104 = *((_DWORD *)v103 + 5);
        if ((v104 & 0x40000000) != 0)
          v105 = (char *)*((_QWORD *)v103 - 1);
        else
          v105 = (char *)v103 - 32 * (v104 & 0x7FFFFFF);
        llvm::DemandedBits::determineLiveOperandBits(this, v179, *v78, (llvm::DemandedBits *)((unint64_t)((char *)v78 - v105) >> 5), (const llvm::APInt *)&__dst, (llvm::APInt *)&__s1, (llvm::KnownBits *)&v173, &v169, v85, &v168);
        if (v166 > 0x40)
        {
          v109 = 0;
          v110 = ((unint64_t)v166 + 63) >> 6;
          do
          {
            v73 = v110-- < 1;
            if (v73)
              break;
            v111 = *((_QWORD *)__s1 + v110);
            v109 += __clz(v111);
          }
          while (!v111);
          v112 = v166 | 0xFFFFFFC0;
          if ((v166 & 0x3F) == 0)
            v112 = 0;
          if (v109 + v112 == v166)
            goto LABEL_184;
LABEL_174:
          v106 = sub_1C477672C((uint64_t)v161, (uint64_t)v78);
          v107 = *((_QWORD *)this + 44);
          v108 = 360;
          if (v107 == *((_QWORD *)this + 43))
            v108 = 364;
          if (v106 != (_QWORD *)(v107 + 8 * *(unsigned int *)((char *)this + v108)))
          {
            *v106 = -2;
            ++*((_DWORD *)this + 92);
          }
        }
        else
        {
          if (__s1)
            goto LABEL_174;
LABEL_184:
          sub_1C4774094(v161, (uint64_t)v78);
        }
      }
      if (v167)
      {
        v163 = 0;
        v113 = sub_1C4E08D70(*((_QWORD *)this + 40), *((_DWORD *)this + 84), v167, &v163);
        v114 = v163;
        if (!v113)
        {
          v114 = sub_1C4E08DFC((uint64_t)v162, &v167, v163);
          v115 = v167;
          *((_DWORD *)v114 + 4) = 1;
          *v114 = v115;
          v114[1] = 0;
          goto LABEL_188;
        }
        if (v166 >= 0x41)
        {
          v131 = __s1;
          v132 = (uint64_t *)v163[1];
          v133 = v166 + 63;
          v134 = v133 >> 6;
          do
          {
            v135 = *v132++;
            *v131++ |= v135;
            --v134;
          }
          while (v134);
          v130 = v114[1];
          if (memcmp(__s1, (const void *)v130, (v133 >> 3) & 0x3FFFFFF8))
            goto LABEL_218;
        }
        else
        {
          v130 = v163[1];
          __s1 = (void *)((unint64_t)__s1 | v130);
          if (__s1 != (void *)v130)
          {
LABEL_218:
            if (*((_DWORD *)v114 + 4) >= 0x41u && v130 != 0)
              MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
LABEL_188:
            v114[1] = __s1;
            *((_DWORD *)v114 + 4) = v166;
            v166 = 0;
            if ((v180 & 1) != 0)
            {
              v116 = 16;
              v117 = &v181;
LABEL_191:
              v118 = v116 - 1;
              v119 = ((v167 >> 4) ^ (v167 >> 9)) & v118;
              v120 = &v117[v119];
              v121 = *v120;
              if (v167 != *v120)
              {
                v122 = 0;
                v123 = 1;
                while (v121 != -4096)
                {
                  if (v122)
                    v124 = 0;
                  else
                    v124 = v121 == -8192;
                  if (v124)
                    v122 = v120;
                  v125 = v119 + v123++;
                  v119 = v125 & v118;
                  v120 = &v117[v119];
                  v121 = *v120;
                  if (v167 == *v120)
                    goto LABEL_207;
                }
                if (v122)
                  v126 = v122;
                else
                  v126 = v120;
                goto LABEL_204;
              }
            }
            else
            {
              v116 = v182;
              if (v182)
              {
                v117 = v181;
                goto LABEL_191;
              }
              v126 = 0;
LABEL_204:
              v127 = sub_1C4E08FFC((uint64_t)&v180, (uint64_t)&v167, &v167, v126);
              *v127 = v167;
              v128 = v167;
              v129 = v184;
              if (v184 >= (unint64_t)HIDWORD(v184))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v183, (uint64_t)v185, v184 + 1, 8);
                v129 = v184;
              }
              *((_QWORD *)v183 + v129) = v128;
              LODWORD(v184) = v184 + 1;
            }
          }
        }
      }
LABEL_207:
      if (v166 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
LABEL_210:
      v78 += 4;
      if (v78 != v79)
        continue;
      break;
    }
    if (v172 >= 0x41 && v171)
      MEMORY[0x1CAA32F9C](v171, 0x1000C8000313F17);
LABEL_228:
    if (v170 >= 0x41 && v169)
      MEMORY[0x1CAA32F9C](v169, 0x1000C8000313F17);
    if (v176 >= 0x41 && v175)
      MEMORY[0x1CAA32F9C](v175, 0x1000C8000313F17);
    if (v174 >= 0x41 && v173)
      MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
    if (v178 >= 0x41 && __dst)
      MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
    v61 = v184;
    if ((_DWORD)v184)
      continue;
    break;
  }
LABEL_247:
  if (v183 != v185)
    free(v183);
  if ((v180 & 1) == 0)
    MEMORY[0x1CAA32FB4](v181, 8);
}

uint64_t sub_1C4E074C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;

  if (*(unsigned __int8 *)(a1 + 16) - 29 < 0xB || sub_1C4D99D08(a1))
    return 1;
  v2 = *(unsigned __int8 *)(a1 + 16) - 33;
  if (v2 <= 0x3D)
  {
    if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x2080C001D0000030) != 0)
      return 1;
    if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x8000000000041) != 0)
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (!v4 || (*(_BYTE *)(v4 + 17) & 0x30) == 0)
      {
        v5 = *(_DWORD *)(a1 + 20);
        if (v5 < 0)
        {
          v6 = a1 - 32 * (v5 & 0x7FFFFFF);
          v9 = *(_QWORD *)(v6 - 8);
          v7 = v6 - 8;
          v8 = v9;
          if (v9)
          {
            v10 = -v8;
            do
            {
              v11 = *(_DWORD *)(*(_QWORD *)(v7 + v10) + 8);
              v12 = v11 > 7;
              v13 = (1 << v11) & 0x83;
              if (v12 || v13 == 0)
                return 1;
              v10 += 16;
            }
            while (v10);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
        {
          return 1;
        }
      }
    }
    else if (v2 == 27 && (*(_WORD *)(a1 + 18) & 0x301) != 0)
    {
      return 1;
    }
  }
  if ((llvm::Instruction::mayThrow((llvm::Instruction *)a1) & 1) != 0)
    return 1;
  return llvm::Instruction::willReturn((llvm::Instruction *)a1) ^ 1;
}

void llvm::DemandedBits::getDemandedBits(llvm::DemandedBits *this@<X0>, llvm::Instruction *a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  void *v14;
  llvm::Instruction *v15;
  uint64_t v16;

  llvm::DemandedBits::performAnalysis(this);
  v15 = a2;
  v16 = 0;
  if (!sub_1C4E0953C((uint64_t *)this + 40, &v15, &v16)
    || (v6 = v16, v16 == *((_QWORD *)this + 40) + 24 * *((unsigned int *)this + 84)))
  {
    v9 = *(_QWORD *)a2;
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v9 = **(_QWORD **)(v9 + 16);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272, v9);
    v12 = v11;
    if ((_DWORD)v10 == 1)
    *((_DWORD *)a3 + 2) = v12;
    if (v12 <= 0x40)
    {
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
      if (!v12)
        v8 = 0;
      goto LABEL_12;
    }
    llvm::APInt::initSlowCase(a3, -1, 1);
  }
  else
  {
    v7 = *(unsigned int *)(v16 + 16);
    *((_DWORD *)a3 + 2) = v7;
    if (v7 <= 0x40)
    {
      v8 = *(_QWORD *)(v6 + 8);
LABEL_12:
      *(_QWORD *)a3 = v8;
      return;
    }
    v13 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
    v14 = (void *)operator new[]();
    *(_QWORD *)a3 = v14;
    memcpy(v14, *(const void **)(v6 + 8), v13);
  }
}

void llvm::DemandedBits::getDemandedBits(llvm::DemandedBits *this@<X0>, uint64_t **a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  BOOL v19;
  const void *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;

  v7 = (llvm::Instruction *)a2[3];
  v8 = **a2;
  v6 = v8;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 5) + 56) + 40) + 272, v8);
  v11 = v10;
  if ((_DWORD)v9 == 1)
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v12 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  else
    v12 = *(_DWORD *)(v6 + 8);
  if (v12 == 13)
  {
    if (llvm::DemandedBits::isUseDead(this, (llvm::Use *)a2))
    {
      *((_DWORD *)a3 + 2) = v11;
      if (v11 > 0x40)
        llvm::APInt::initSlowCase(a3, 0, 0);
      else
        *(_QWORD *)a3 = 0;
    }
    else
    {
      llvm::DemandedBits::performAnalysis(this);
      llvm::DemandedBits::getDemandedBits(this, v7, (llvm::APInt *)&v28);
      *((_DWORD *)a3 + 2) = v11;
      if (v11 > 0x40)
      {
        llvm::APInt::initSlowCase(a3, -1, 1);
      }
      else
      {
        v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
        if (!v11)
          v15 = 0;
        *(_QWORD *)a3 = v15;
      }
      v25 = 1;
      v24 = 0;
      v27 = 1;
      v26 = 0;
      v21 = 1;
      v20 = 0;
      v23 = 1;
      v22 = 0;
      v19 = 0;
      v16 = a2[3];
      v17 = *((_DWORD *)v16 + 5);
      if ((v17 & 0x40000000) != 0)
        v18 = (uint64_t *)*(v16 - 1);
      else
        v18 = &v16[-4 * (v17 & 0x7FFFFFF)];
      llvm::DemandedBits::determineLiveOperandBits(this, v7, (const llvm::Value *)*a2, (llvm::DemandedBits *)((unint64_t)((char *)a2 - (char *)v18) >> 5), (const llvm::APInt *)&v28, a3, (llvm::KnownBits *)&v24, &v20, v14, &v19);
      if (v23 >= 0x41 && v22)
        MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      if (v21 >= 0x41 && v20)
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
      if (v27 >= 0x41 && v26)
        MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
      if (v25 >= 0x41 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
      if (v29 >= 0x41 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
  }
  else
  {
    *((_DWORD *)a3 + 2) = v11;
    if (v11 > 0x40)
    {
      llvm::APInt::initSlowCase(a3, -1, 1);
    }
    else
    {
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (!v11)
        v13 = 0;
      *(_QWORD *)a3 = v13;
    }
  }
}

BOOL llvm::DemandedBits::isUseDead(llvm::DemandedBits *this, llvm::Use *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BOOL8 result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  llvm::APInt *v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;

  v4 = **(_QWORD **)a2;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v5 = *(unsigned __int8 *)(**(_QWORD **)(v4 + 16) + 8);
  else
    v5 = *(_DWORD *)(v4 + 8);
  if (v5 != 13)
    return 0;
  v6 = *((_QWORD *)a2 + 3);
  if ((sub_1C4E074C8(v6) & 1) != 0)
    return 0;
  llvm::DemandedBits::performAnalysis(this);
  v8 = sub_1C477672C((uint64_t)this + 344, (uint64_t)a2);
  v9 = *((_QWORD *)this + 44);
  v10 = 360;
  if (v9 == *((_QWORD *)this + 43))
    v10 = 364;
  if (v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)this + v10)))
    return 1;
  v11 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12
      ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8)
      : *(_DWORD *)(*(_QWORD *)v6 + 8);
  if (v11 != 13)
    return 0;
  v16 = v6;
  v17 = 0;
  v12 = sub_1C4E0953C((uint64_t *)this + 40, &v16, &v17);
  result = 0;
  if (v12 && v17 != *((_QWORD *)this + 40) + 24 * *((unsigned int *)this + 84))
  {
    v13 = (llvm::APInt *)(v17 + 8);
    v14 = *(_DWORD *)(v17 + 16);
    if (v14 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v13) == v14;
    else
      return *(_QWORD *)v13 == 0;
  }
  return result;
}

uint64_t llvm::DemandedBits::isInstructionDead(llvm::DemandedBits *this, llvm::Instruction *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Instruction *v8;
  uint64_t v9;

  llvm::DemandedBits::performAnalysis(this);
  v4 = sub_1C477672C((uint64_t)this + 32, (uint64_t)a2);
  v5 = *((_QWORD *)this + 5);
  v6 = 48;
  if (v5 == *((_QWORD *)this + 4))
    v6 = 52;
  if (v4 == (_QWORD *)(v5 + 8 * *(unsigned int *)((char *)this + v6))
    && ((v8 = a2, v9 = 0, !sub_1C4E0953C((uint64_t *)this + 40, &v8, &v9))
     || v9 == *((_QWORD *)this + 40) + 24 * *((unsigned int *)this + 84)))
  {
    return sub_1C4E074C8((uint64_t)a2) ^ 1;
  }
  else
  {
    return 0;
  }
}

void sub_1C4E07C14(llvm::raw_ostream **a1, llvm::Value *a2, uint64_t *a3, llvm::Value *a4)
{
  llvm::raw_ostream **v7;
  llvm::raw_ostream *v8;
  _OWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _DWORD *v19;
  uint64_t v20;

  v7 = a1;
  v8 = *a1;
  v9 = (_OWORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 > 0xFuLL)
  {
    *v9 = *(_OWORD *)"DemandedBits: 0x";
    *((_QWORD *)v8 + 4) += 16;
  }
  else
  {
    a1 = (llvm::raw_ostream **)llvm::raw_ostream::write(*a1, "DemandedBits: 0x", 0x10uLL);
  }
  v10 = *((_DWORD *)a3 + 2);
  if (v10 < 0x41
    || (a1 = (llvm::raw_ostream **)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3),
        v10 - a1 <= 0x40))
  {
    v12 = (uint64_t *)*a3;
    if (v10 < 0x41)
      v12 = a3;
    v11 = *v12;
  }
  else
  {
    v11 = -1;
  }
  v20 = v11;
  llvm::Twine::printOneChild((uint64_t)a1, v8, (uint64_t)&v20, (size_t)a4, 14);
  llvm::Twine::printOneChild(v13, v8, 0, v14, 1);
  v15 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v15) <= 4)
  {
    llvm::raw_ostream::write(v8, " for ", 5uLL);
    if (!a4)
      goto LABEL_11;
LABEL_17:
    llvm::Value::printAsOperand(a4, *v7, 0, 0);
    v18 = *v7;
    v19 = (_DWORD *)*((_QWORD *)*v7 + 4);
    if (*((_QWORD *)*v7 + 3) - (_QWORD)v19 > 3uLL)
    {
      *v19 = 544106784;
      *((_QWORD *)v18 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v18, " in ", 4uLL);
    }
    goto LABEL_11;
  }
  *(_BYTE *)(v15 + 4) = 32;
  *(_DWORD *)v15 = 1919903264;
  *((_QWORD *)v8 + 4) += 5;
  if (a4)
    goto LABEL_17;
LABEL_11:
  v16 = *v7;
  llvm::Value::print(a2, v16, 0);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 10);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 10;
  }
}

uint64_t sub_1C4E07DDC(uint64_t a1, int a2, llvm::APInt *a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const void **v17;
  uint64_t v18;
  const void **v19;
  void *v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  size_t v64;
  unsigned int v65;
  size_t v66;
  uint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  size_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  size_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _BOOL4 v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  _QWORD *v128;
  uint64_t v129;
  unsigned int v130;
  void *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t result;
  size_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _BOOL4 v151;
  uint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unint64_t v159;
  const void **v161;
  uint64_t v163;
  void *v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  void *v169;
  unsigned int v170;
  void *v171;
  int v172;
  _QWORD *v173;
  unsigned int v174;
  void *v175;
  unsigned int v176;
  void *v177;
  unsigned int v178;
  void *v179;
  unsigned int v180;
  void *v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  void *v185;
  unsigned int v186;
  unint64_t v187;
  unsigned int v188;
  void *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;

  v11 = *(unsigned int *)(a4 + 8);
  if (v11 > 0x40)
  {
    v12 = operator new[]();
    memcpy((void *)v12, *(const void **)a4, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    v13 = *(uint64_t **)a5;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = (_QWORD *)v12;
    do
    {
      v16 = *v13++;
      *v15++ &= v16;
      --v14;
    }
    while (v14);
  }
  else
  {
    v12 = *(_QWORD *)a5 & *(_QWORD *)a4;
  }
  v17 = (const void **)(a4 + 16);
  v18 = *(unsigned int *)(a4 + 24);
  v161 = (const void **)(a4 + 16);
  if (v18 >= 0x41)
  {
    v20 = (void *)operator new[]();
    memcpy(v20, *(const void **)(a4 + 16), ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
    v19 = (const void **)(a5 + 16);
    v21 = *(uint64_t **)(a5 + 16);
    v22 = (unint64_t)(v18 + 63) >> 6;
    v23 = v20;
    v24 = v22;
    do
    {
      v25 = *v21++;
      *v23++ &= v25;
      --v24;
    }
    while (v24);
    v26 = (uint64_t *)v12;
    v27 = v20;
    do
    {
      v28 = *v26++;
      *v27++ |= v28;
      --v22;
    }
    while (v22);
    v17 = (const void **)(a4 + 16);
  }
  else
  {
    v19 = (const void **)(a5 + 16);
    v20 = (void *)(*(_QWORD *)(a5 + 16) & (unint64_t)*v17 | v12);
  }
  v196 = v18;
  v195 = (uint64_t)v20;
  if (v11 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  llvm::APInt::reverseBits((llvm::APInt *)&v195, (llvm::APInt *)&v193);
  llvm::APInt::reverseBits(a3, (llvm::APInt *)&v191);
  v190 = v194;
  if (v194 > 0x40)
  {
    v34 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
    v189 = (void *)operator new[]();
    memcpy(v189, (const void *)v193, v34);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v189);
    v33 = v190;
    v32 = (unint64_t)v189;
    v190 = 0;
    if (v33 > 0x40)
    {
      v35 = (uint64_t *)v191;
      v36 = (unint64_t)(v33 + 63) >> 6;
      v37 = v189;
      v38 = v36;
      do
      {
        v39 = *v35++;
        *v37++ |= v39;
        --v38;
      }
      while (v38);
      v40 = 0;
      v41 = (uint64_t *)v191;
      v42 = (unint64_t *)v32;
      v43 = (unint64_t)(v33 + 63) >> 6;
      do
      {
        v44 = *v41++;
        v45 = v44 + *v42;
        v46 = v45 + 1 <= *v42;
        if (v40)
        {
          ++v45;
          v40 = v46;
        }
        else
        {
          v40 = v45 < *v42;
        }
        *v42++ = v45;
        --v43;
      }
      while (v43);
      *(_QWORD *)(v32 + 8 * (v36 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
      goto LABEL_33;
    }
    v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
  }
  else
  {
    v29 = ~v193;
    v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v194;
    if (v194)
      v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v194;
    else
      v31 = 0;
    v32 = v31 & v29;
    v189 = (void *)(v31 & v29);
    v190 = 0;
    LODWORD(v33) = v194;
  }
  if (!(_DWORD)v33)
    v30 = 0;
  v32 = v30 & ((v191 | v32) + v191);
LABEL_33:
  LODWORD(v47) = v194;
  v186 = v194;
  if (v194 <= 0x40)
  {
    if (v194)
      v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v194;
    else
      v48 = 0;
    v49 = v48 & ~v193;
    v185 = (void *)v49;
    v186 = 0;
    goto LABEL_38;
  }
  v50 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
  v185 = (void *)operator new[]();
  memcpy(v185, (const void *)v193, v50);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v185);
  v47 = v186;
  v49 = (unint64_t)v185;
  v186 = 0;
  if (v47 <= 0x40)
  {
LABEL_38:
    v49 ^= v32;
    goto LABEL_41;
  }
  v51 = (unint64_t)(v47 + 63) >> 6;
  v52 = (uint64_t *)v32;
  v53 = v185;
  do
  {
    v54 = *v52++;
    *v53++ ^= v54;
    --v51;
  }
  while (v51);
LABEL_41:
  v188 = v47;
  v187 = v49;
  llvm::APInt::reverseBits((llvm::APInt *)&v187, (llvm::APInt *)&v183);
  v158 = v33;
  v159 = v32;
  if (a2)
  {
    v55 = *(unsigned int *)(a4 + 8);
    v178 = v55;
    if (v55 > 0x40)
    {
      v64 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
      v177 = (void *)operator new[]();
      memcpy(v177, *(const void **)a4, v64);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v177);
      v55 = v178;
      v58 = (unint64_t)v177;
      v178 = 0;
      if (v55 > 0x40)
      {
        v67 = *(uint64_t **)a5;
        v68 = (unint64_t)(v55 + 63) >> 6;
        v69 = v177;
        v65 = a7;
        do
        {
          v70 = *v67++;
          *v69++ |= v70;
          --v68;
        }
        while (v68);
        goto LABEL_56;
      }
    }
    else
    {
      v56 = ~*(_QWORD *)a4;
      v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
      if (!(_DWORD)v55)
        v57 = 0;
      v58 = v57 & v56;
      v177 = (void *)(v57 & v56);
      v178 = 0;
    }
    v65 = a7;
    v58 |= *(_QWORD *)a5;
LABEL_56:
    v71 = *(unsigned int *)(a4 + 24);
    v176 = v71;
    v163 = v58;
    v157 = v55;
    if (v71 <= 0x40)
    {
      v72 = &v176;
      v73 = ~(unint64_t)*v17;
      if ((_DWORD)v71)
        v74 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
      else
        v74 = 0;
      v75 = v74 & v73;
      v175 = (void *)(v74 & v73);
      v76 = v19;
LABEL_71:
      *v72 = 0;
      v156 = v71;
      goto LABEL_72;
    }
    v77 = ((unint64_t)(v71 + 63) >> 3) & 0x3FFFFFF8;
    v175 = (void *)operator new[]();
    memcpy(v175, *v17, v77);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v175);
    v78 = v176;
    v75 = (unint64_t)v175;
    v176 = 0;
    v156 = v78;
    if (v78 < 0x41)
    {
      v76 = v19;
LABEL_72:
      v75 |= *v76;
      goto LABEL_73;
    }
    v79 = (uint64_t *)*v19;
    v80 = (unint64_t)(v78 + 63) >> 6;
    v81 = v175;
    do
    {
      v82 = *v79++;
      *v81++ |= v82;
      --v80;
    }
    while (v80);
    goto LABEL_73;
  }
  v59 = *(unsigned int *)(a5 + 8);
  v182 = v59;
  if (v59 > 0x40)
  {
    v66 = ((unint64_t)(v59 + 63) >> 3) & 0x3FFFFFF8;
    v181 = (void *)operator new[]();
    memcpy(v181, *(const void **)a5, v66);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v181);
    v63 = v182;
    v62 = (unint64_t)v181;
    v182 = 0;
    if (v63 > 0x40)
    {
      v83 = *(uint64_t **)a4;
      v84 = (unint64_t)(v63 + 63) >> 6;
      v85 = v181;
      v65 = a7;
      do
      {
        v86 = *v83++;
        *v85++ |= v86;
        --v84;
      }
      while (v84);
      goto LABEL_67;
    }
  }
  else
  {
    v60 = ~*(_QWORD *)a5;
    v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
    if (!(_DWORD)v59)
      v61 = 0;
    v62 = v61 & v60;
    v181 = (void *)(v61 & v60);
    v182 = 0;
    LODWORD(v63) = v59;
  }
  v65 = a7;
  v62 |= *(_QWORD *)a4;
LABEL_67:
  v71 = *(unsigned int *)(a5 + 24);
  v180 = v71;
  v163 = v62;
  v157 = v63;
  if (v71 <= 0x40)
  {
    v72 = &v180;
    v87 = ~(unint64_t)*v19;
    if ((_DWORD)v71)
      v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
    else
      v88 = 0;
    v75 = v88 & v87;
    v179 = (void *)(v88 & v87);
    v76 = v17;
    goto LABEL_71;
  }
  v142 = ((unint64_t)(v71 + 63) >> 3) & 0x3FFFFFF8;
  v179 = (void *)operator new[]();
  memcpy(v179, *v19, v142);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v179);
  v143 = v180;
  v75 = (unint64_t)v179;
  v180 = 0;
  if (v143 < 0x41)
  {
    v76 = v17;
    v156 = v143;
    goto LABEL_72;
  }
  v152 = (uint64_t *)*v17;
  v153 = (unint64_t)(v143 + 63) >> 6;
  v154 = v179;
  do
  {
    v155 = *v152++;
    *v154++ |= v155;
    --v153;
  }
  while (v153);
  v156 = v143;
LABEL_73:
  v89 = *(unsigned int *)(a4 + 8);
  v172 = v89;
  if (v89 > 0x40)
  {
    v171 = (void *)operator new[]();
    memcpy(v171, *(const void **)a4, ((unint64_t)(v89 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v171);
    LODWORD(v89) = v172;
    v92 = (uint64_t *)v171;
  }
  else
  {
    v90 = ~*(_QWORD *)a4;
    v91 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
    if (!(_DWORD)v89)
      v91 = 0;
    v92 = (uint64_t *)(v91 & v90);
    v171 = (void *)(v91 & v90);
  }
  v172 = 0;
  v93 = *(unsigned int *)(a5 + 8);
  v170 = v93;
  if (v93 > 0x40)
  {
    v97 = ((unint64_t)(v93 + 63) >> 3) & 0x3FFFFFF8;
    v169 = (void *)operator new[]();
    memcpy(v169, *(const void **)a5, v97);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v169);
    v93 = v170;
    v96 = v169;
    v170 = 0;
    if (v93 > 0x40)
    {
      v144 = 0;
      v145 = (unint64_t)(v93 + 63) >> 6;
      v146 = (unint64_t *)v169;
      v147 = v92;
      v148 = v145;
      do
      {
        v149 = *v147++;
        v150 = v149 + *v146;
        v151 = v150 + 1 <= *v146;
        if (v144)
        {
          ++v150;
          v144 = v151;
        }
        else
        {
          v144 = v150 < *v146;
        }
        *v146++ = v150;
        --v148;
      }
      while (v148);
      v96[(v145 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
      goto LABEL_87;
    }
    v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
  }
  else
  {
    v94 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
    v95 = v94;
    if (!(_DWORD)v93)
      v95 = 0;
    v96 = (_QWORD *)(v95 & ~*(_QWORD *)a5);
  }
  v98 = (unint64_t)v92 + (_QWORD)v96;
  if (!(_DWORD)v93)
    v94 = 0;
  v96 = (_QWORD *)(v94 & v98);
LABEL_87:
  v174 = v93;
  v173 = v96;
  llvm::APInt::operator+=((uint64_t)&v173, a6 ^ 1u);
  v99 = v174;
  v100 = (unint64_t)v173;
  v174 = 0;
  if (v89 >= 0x41 && v92)
    MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
  v101 = *(unsigned int *)(a4 + 24);
  if (v101 >= 0x41)
  {
    v103 = (void *)operator new[]();
    memcpy(v103, *v161, ((unint64_t)(v101 + 63) >> 3) & 0x3FFFFFF8);
    v104 = 0;
    v105 = (uint64_t *)*v19;
    v106 = (unint64_t)(v101 + 63) >> 6;
    v107 = (unint64_t *)v103;
    v108 = v106;
    do
    {
      v109 = *v105++;
      v110 = v109 + *v107;
      v111 = v110 + 1 <= *v107;
      if (v104)
      {
        ++v110;
        v104 = v111;
      }
      else
      {
        v104 = v110 < *v107;
      }
      *v107++ = v110;
      --v108;
    }
    while (v108);
    *((_QWORD *)v103 + (v106 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v101;
  }
  else
  {
    v102 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v101;
    if (!(_DWORD)v101)
      v102 = 0;
    v103 = (void *)(v102 & ((unint64_t)*v161 + (_QWORD)*v19));
  }
  v168 = v101;
  v167 = (unint64_t)v103;
  llvm::APInt::operator+=((uint64_t)&v167, v65);
  v112 = v168;
  v113 = v167;
  v168 = 0;
  v166 = v99;
  if (v99 > 0x40)
  {
    v165 = (void *)operator new[]();
    memcpy(v165, (const void *)v100, ((unint64_t)(v99 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v165);
    v116 = v166;
    v115 = (unint64_t)v165;
    if (v166 > 0x40)
    {
      v117 = ((unint64_t)v166 + 63) >> 6;
      v118 = (uint64_t *)v163;
      v119 = v165;
      do
      {
        v120 = *v118++;
        *v119++ |= v120;
        --v117;
      }
      while (v117);
      goto LABEL_108;
    }
  }
  else
  {
    v114 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v99;
    if (!(_DWORD)v99)
      v114 = 0;
    v115 = v114 & ~v100;
    v116 = v99;
  }
  v115 |= v163;
LABEL_108:
  if (v112 >= 0x41)
  {
    v121 = operator new[]();
    memcpy((void *)v121, (const void *)v113, ((unint64_t)(v112 + 63) >> 3) & 0x3FFFFFF8);
    v122 = (unint64_t)(v112 + 63) >> 6;
    v123 = (uint64_t *)v75;
    v124 = (_QWORD *)v121;
    v125 = v122;
    do
    {
      v126 = *v123++;
      *v124++ |= v126;
      --v125;
    }
    while (v125);
    v127 = (uint64_t *)v115;
    v128 = (_QWORD *)v121;
    do
    {
      v129 = *v127++;
      *v128++ &= v129;
      --v122;
    }
    while (v122);
  }
  else
  {
    v121 = v115 & (v113 | v75);
  }
  if (v116 >= 0x41 && v115)
    MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
  v130 = v184;
  if (v184 >= 0x41)
  {
    v132 = v184 + 63;
    v131 = (void *)operator new[]();
    memcpy(v131, (const void *)v183, (v132 >> 3) & 0x3FFFFFF8);
    v133 = v132 >> 6;
    v134 = (uint64_t *)v121;
    v135 = v131;
    v136 = v132 >> 6;
    do
    {
      v137 = *v134++;
      *v135++ &= v137;
      --v136;
    }
    while (v136);
    v138 = *(uint64_t **)a3;
    v139 = v131;
    do
    {
      v140 = *v138++;
      *v139++ |= v140;
      --v133;
    }
    while (v133);
  }
  else
  {
    v131 = (void *)(*(_QWORD *)a3 | v183 & v121);
  }
  *(_DWORD *)(a1 + 8) = v130;
  *(_QWORD *)a1 = v131;
  if (v112 >= 0x41)
  {
    if (v121)
      MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
    if (v113)
      MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
  }
  if (v99 >= 0x41 && v100)
    MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
  if (v156 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  result = v163;
  if (v157 >= 0x41 && v163)
    result = MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
  if (v184 >= 0x41)
  {
    result = v183;
    if (v183)
      result = MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
  }
  if (v188 >= 0x41)
  {
    result = v187;
    if (v187)
      result = MEMORY[0x1CAA32F9C](v187, 0x1000C8000313F17);
  }
  if (v158 >= 0x41 && v159)
    result = MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
  if (v192 >= 0x41)
  {
    result = v191;
    if (v191)
      result = MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
  }
  if (v194 >= 0x41)
  {
    result = v193;
    if (v193)
      result = MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
  }
  if (v196 >= 0x41)
  {
    result = v195;
    if (v195)
      return MEMORY[0x1CAA32F9C](v195, 0x1000C8000313F17);
  }
  return result;
}

llvm::DemandedBitsWrapperPass *llvm::createDemandedBitsWrapperPass(llvm *this)
{
  llvm::DemandedBitsWrapperPass *v1;

  v1 = (llvm::DemandedBitsWrapperPass *)operator new();
  return llvm::DemandedBitsWrapperPass::DemandedBitsWrapperPass(v1);
}

double llvm::DemandedBitsAnalysis::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  double result;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = ResultImpl + 8;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = a3 + 64;
  *(_QWORD *)(a3 + 40) = a3 + 64;
  *(_QWORD *)(a3 + 48) = 32;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 320) = 0;
  *(_QWORD *)(a3 + 328) = 0;
  *(_DWORD *)(a3 + 336) = 0;
  *(_QWORD *)(a3 + 344) = a3 + 376;
  *(_QWORD *)(a3 + 352) = a3 + 376;
  *(_QWORD *)&result = 16;
  *(_QWORD *)(a3 + 360) = 16;
  *(_DWORD *)(a3 + 368) = 0;
  return result;
}

_QWORD *sub_1C4E08C94(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[44];
  if (v2 != (void *)a1[43])
    free(v2);
  sub_1C4E08CF4((uint64_t)(a1 + 40));
  MEMORY[0x1CAA32FB4](a1[40], 8);
  v3 = (void *)a1[5];
  if (v3 != (void *)a1[4])
    free(v3);
  return a1;
}

uint64_t sub_1C4E08CF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    v3 = *(_QWORD *)result + 8;
    do
    {
      if ((*(_QWORD *)(v3 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000 && *(_DWORD *)(v3 + 8) >= 0x41u)
      {
        result = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      v3 += 24;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C4E08D70(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4E08DFC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E08EB0(a1, v6);
  v8 = 0;
  sub_1C4E08D70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4E08EB0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (_DWORD *)(v4 + 16);
      v13 = 24 * v3;
      do
      {
        v14 = *((_QWORD *)v12 - 2);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C4E08D70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *((_QWORD *)v12 - 2);
          *((_DWORD *)v15 + 4) = *v12;
          v15[1] = *((_QWORD *)v12 - 1);
          *v12 = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -4096;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

_QWORD *sub_1C4E08FFC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4E091CC(a1, 2 * v8);
    v20 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v21 = 16;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 16);
      if (!v21)
        goto LABEL_41;
      v20 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v22 = v21 - 1;
    v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
    a4 = (_QWORD *)(v20 + 8 * v23);
    v24 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
    v16 = 0;
    v25 = 1;
    while (v24 != -4096)
    {
      if (v16)
        v26 = 0;
      else
        v26 = v24 == -8192;
      if (v26)
        v16 = a4;
      v27 = v23 + v25++;
      v23 = v27 & v22;
      a4 = (_QWORD *)(v20 + 8 * v23);
      v24 = *a4;
      if (*a3 == *a4)
        goto LABEL_6;
    }
    goto LABEL_36;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    v9 = *(_DWORD *)a1 & 1;
    goto LABEL_6;
  }
  sub_1C4E091CC(a1, v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 16;
    goto LABEL_13;
  }
  v12 = *(_DWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_41:
    v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 8);
LABEL_13:
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (_QWORD *)(v11 + 8 * v14);
  v15 = *a4;
  if (*a3 == *a4)
    goto LABEL_6;
  v16 = 0;
  v17 = 1;
  while (v15 != -4096)
  {
    if (v16)
      v18 = 0;
    else
      v18 = v15 == -8192;
    if (v18)
      v16 = a4;
    v19 = v14 + v17++;
    v14 = v19 & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
  }
LABEL_36:
  if (v16)
    a4 = v16;
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4E091CC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E09334((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E09334((int *)a1, v14, v8);
}

int *sub_1C4E09334(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 34;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_6;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_6:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 16;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v8[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v8[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_24;
        }
        if (v14)
          v12 = v14;
      }
LABEL_24:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C4E09438(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C4E08D70(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E08DFC(a1, a2, v8);
    v7 = *a2;
    *((_DWORD *)v5 + 4) = 1;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C4E094A8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 16;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(v2 + 8 * v5);
  v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_9:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (*a2 == v7)
    {
      v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_9;
    }
  }
  return 0;
}

uint64_t sub_1C4E0953C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4E095DC(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  llvm::initializeAAResultsWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Dependence Analysis";
  *(_QWORD *)(v4 + 8) = 19;
  *(_QWORD *)(v4 + 16) = "da";
  *(_QWORD *)(v4 + 24) = 2;
  *(_QWORD *)(v4 + 32) = &llvm::DependenceAnalysisWrapperPass::ID;
  *(_WORD *)(v4 + 40) = 257;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = llvm::callDefaultCtor<llvm::DependenceAnalysisWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C4E09688(uint64_t result, llvm::DependenceInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  llvm::Dependence *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  llvm::SCEV *SplitIteration;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  llvm::Dependence *v60;

  v2 = *((_QWORD *)a2 + 3);
  v3 = v2 + 72;
  v4 = *(_QWORD *)(v2 + 80);
  if (v4 == v2 + 72)
    return result;
  v6 = (llvm::raw_ostream *)result;
  while (1)
  {
    v7 = v4 - 24;
    if (!v4)
      v7 = 0;
    v8 = *(_QWORD *)(v7 + 48);
    if (v8 != v7 + 40)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return result;
  }
  while (2)
  {
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    v10 = *(unsigned __int8 *)(v9 + 16);
    v11 = (v10 - 33);
    if (v11 > 0x37)
      goto LABEL_15;
    if (((1 << (v10 - 33)) & 0x8000000000041) != 0)
    {
      v15 = *(_QWORD *)(v9 + 64);
      if (!v15 || (*(_BYTE *)(v15 + 20) & 4) == 0 && (*(_BYTE *)(v15 + 17) & 0x10) == 0)
      {
        LODWORD(v60) = 7;
        result = sub_1C53E4BBC(v9, (__int32 *)&v60, 1uLL);
        if ((result & 1) != 0)
        {
          v51 = *(_QWORD *)(v9 - 32);
          if (!v51
            || *(_BYTE *)(v51 + 16)
            || *(_QWORD *)(v51 + 24) != *(_QWORD *)(v9 + 72)
            || *(_DWORD *)(v51 + 36) != 7)
          {
            goto LABEL_46;
          }
        }
        result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 66);
        if ((result & 1) == 0)
        {
          result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44);
          if (!(_DWORD)result)
            goto LABEL_46;
        }
      }
LABEL_34:
      v10 = *(unsigned __int8 *)(v9 + 16);
      goto LABEL_15;
    }
    if (((1 << (v10 - 33)) & 0x808001C8000010) == 0)
    {
      if (v11 != 28)
      {
LABEL_15:
        v12 = (v10 - 33);
        if (v12 > 0x37)
          goto LABEL_19;
        if (((1 << v12) & 0x8000000000041) != 0)
        {
          v16 = *(_QWORD *)(v9 + 64);
          if (v16 && (*(_BYTE *)(v16 + 17) & 0x30) != 0)
            goto LABEL_19;
          v17 = *(_DWORD *)(v9 + 20);
          if (v17 < 0
            && (v52 = v9 - 32 * (v17 & 0x7FFFFFF), v55 = *(_QWORD *)(v52 - 8), v53 = v52 - 8, (v54 = v55) != 0))
          {
            v56 = -v54;
            while (1)
            {
              v57 = *(_DWORD *)(*(_QWORD *)(v53 + v56) + 8);
              v48 = v57 > 7;
              v58 = (1 << v57) & 0x83;
              if (v48 || v58 == 0)
                break;
              v56 += 16;
              if (!v56)
                goto LABEL_38;
            }
            v18 = 1;
          }
          else
          {
LABEL_38:
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 45);
            if ((result & 1) != 0)
              goto LABEL_19;
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v9, 44);
            v18 = result ^ 1;
          }
        }
        else if (v12 == 27)
        {
          v18 = (*(_WORD *)(v9 + 18) & 0x301) != 0;
        }
        else
        {
          if (((1 << v12) & 0x808001D0000010) == 0)
            goto LABEL_19;
          v18 = 1;
        }
        if (v4 == v3 || (v18 & 1) == 0)
          goto LABEL_19;
        goto LABEL_47;
      }
      if ((*(_WORD *)(v9 + 18) & 0x301) == 0)
        goto LABEL_34;
    }
LABEL_46:
    if (v4 == v3)
      goto LABEL_19;
LABEL_47:
    v19 = v8;
    v20 = v4;
    while (1)
    {
      if (v19)
        v21 = v19 - 24;
      else
        v21 = 0;
      v22 = *(unsigned __int8 *)(v21 + 16);
      v23 = (v22 - 33);
      if (v23 <= 0x37)
      {
        if (((1 << (v22 - 33)) & 0x8000000000041) != 0)
        {
          v25 = *(_QWORD *)(v21 + 64);
          if (!v25 || (*(_BYTE *)(v25 + 20) & 4) == 0 && (*(_BYTE *)(v25 + 17) & 0x10) == 0)
          {
            LODWORD(v60) = 7;
            if (sub_1C53E4BBC(v21, (__int32 *)&v60, 1uLL))
            {
              v41 = *(_QWORD *)(v21 - 32);
              if (!v41
                || *(_BYTE *)(v41 + 16)
                || *(_QWORD *)(v41 + 24) != *(_QWORD *)(v21 + 72)
                || *(_DWORD *)(v41 + 36) != 7)
              {
                goto LABEL_76;
              }
            }
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v21, 66);
            if ((result & 1) == 0)
            {
              result = llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44);
              if (!(_DWORD)result)
                goto LABEL_76;
            }
          }
        }
        else
        {
          if (((1 << (v22 - 33)) & 0x808001C8000010) != 0)
            goto LABEL_76;
          if (v23 != 28)
            goto LABEL_55;
          if ((*(_WORD *)(v21 + 18) & 0x301) != 0)
            goto LABEL_76;
        }
        v22 = *(unsigned __int8 *)(v21 + 16);
      }
LABEL_55:
      v24 = (v22 - 33);
      if (v24 > 0x37)
        goto LABEL_102;
      if (((1 << v24) & 0x8000000000041) != 0)
      {
        v26 = *(_QWORD *)(v21 + 64);
        if (v26 && (*(_BYTE *)(v26 + 17) & 0x30) != 0)
          goto LABEL_102;
        v27 = *(_DWORD *)(v21 + 20);
        if (v27 < 0
          && (v42 = v21 - 32 * (v27 & 0x7FFFFFF), v45 = *(_QWORD *)(v42 - 8), v43 = v42 - 8, (v44 = v45) != 0))
        {
          v46 = -v44;
          while (1)
          {
            v47 = *(_DWORD *)(*(_QWORD *)(v43 + v46) + 8);
            v48 = v47 > 7;
            v49 = (1 << v47) & 0x83;
            if (v48 || v49 == 0)
              break;
            v46 += 16;
            if (!v46)
              goto LABEL_70;
          }
        }
        else
        {
LABEL_70:
          result = llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45);
          if ((result & 1) != 0)
            goto LABEL_102;
          result = llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44);
          if ((result & 1) != 0)
            goto LABEL_102;
        }
      }
      else if (v24 == 27)
      {
        if ((*(_WORD *)(v21 + 18) & 0x301) == 0)
          goto LABEL_102;
      }
      else if (((1 << v24) & 0x808001D0000010) == 0)
      {
        goto LABEL_102;
      }
LABEL_76:
      v28 = (_DWORD *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v28 > 3uLL)
      {
        *v28 = 979595859;
        *((_QWORD *)v6 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v6, "Src:", 4uLL);
      }
      llvm::Value::print((llvm::Value *)v9, v6, 0);
      v29 = *((_QWORD *)v6 + 4);
      if ((unint64_t)(*((_QWORD *)v6 + 3) - v29) > 8)
      {
        *(_BYTE *)(v29 + 8) = 58;
        *(_QWORD *)v29 = *(_QWORD *)" --> Dst:";
        *((_QWORD *)v6 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v6, " --> Dst:", 9uLL);
      }
      llvm::Value::print((llvm::Value *)v21, v6, 0);
      v30 = (_BYTE *)*((_QWORD *)v6 + 4);
      if (*((_BYTE **)v6 + 3) == v30)
      {
        llvm::raw_ostream::write(v6, "\n", 1uLL);
        v31 = (void *)*((_QWORD *)v6 + 4);
      }
      else
      {
        *v30 = 10;
        v31 = (void *)(*((_QWORD *)v6 + 4) + 1);
        *((_QWORD *)v6 + 4) = v31;
      }
      if (*((_QWORD *)v6 + 3) - (_QWORD)v31 > 0xEuLL)
      {
        qmemcpy(v31, "  da analyze - ", 15);
        *((_QWORD *)v6 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v6, "  da analyze - ", 0xFuLL);
      }
      result = llvm::DependenceInfo::depends((uint64_t)a2, (llvm::Instruction *)v9, (llvm::Instruction *)v21, 1, (uint64_t *)&v60);
      v32 = v60;
      if (v60)
      {
        llvm::Dependence::dump(v60, v6);
        if ((*(unsigned int (**)(llvm::Dependence *))(*(_QWORD *)v32 + 40))(v32))
        {
          v33 = 1;
          do
          {
            if ((*(unsigned int (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)v32 + 80))(v32, v33))
            {
              v34 = (void *)*((_QWORD *)v6 + 4);
              if (*((_QWORD *)v6 + 3) - (_QWORD)v34 > 0x1CuLL)
              {
                qmemcpy(v34, "  da analyze - split level = ", 29);
                *((_QWORD *)v6 + 4) += 29;
              }
              else
              {
                llvm::raw_ostream::write(v6, "  da analyze - split level = ", 0x1DuLL);
              }
              sub_1C5E21910(v6, v33, 0, 0, 0);
              v35 = (void *)*((_QWORD *)v6 + 4);
              if (*((_QWORD *)v6 + 3) - (_QWORD)v35 > 0xDuLL)
              {
                qmemcpy(v35, ", iteration = ", 14);
                *((_QWORD *)v6 + 4) += 14;
              }
              else
              {
                llvm::raw_ostream::write(v6, ", iteration = ", 0xEuLL);
              }
              SplitIteration = llvm::DependenceInfo::getSplitIteration(a2, v32, v33);
              llvm::SCEV::print((uint64_t)SplitIteration);
              v37 = (_WORD *)*((_QWORD *)v6 + 4);
              if (*((_QWORD *)v6 + 3) - (_QWORD)v37 > 1uLL)
              {
                *v37 = 2593;
                *((_QWORD *)v6 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v6, "!\n", 2uLL);
              }
            }
            v33 = (v33 + 1);
          }
          while (v33 <= (*(unsigned int (**)(llvm::Dependence *))(*(_QWORD *)v32 + 40))(v32));
        }
        result = (*(uint64_t (**)(llvm::Dependence *))(*(_QWORD *)v32 + 8))(v32);
      }
      else
      {
        v38 = *((_QWORD *)v6 + 4);
        if ((unint64_t)(*((_QWORD *)v6 + 3) - v38) > 5)
        {
          *(_WORD *)(v38 + 4) = 2593;
          *(_DWORD *)v38 = 1701736302;
          *((_QWORD *)v6 + 4) += 6;
        }
        else
        {
          result = (uint64_t)llvm::raw_ostream::write(v6, "none!\n", 6uLL);
        }
      }
LABEL_102:
      v19 = *(_QWORD *)(v19 + 8);
      v39 = v20 - 24;
      if (!v20)
        v39 = 0;
      if (v19 == v39 + 40)
        break;
LABEL_109:
      if (v20 == v3)
        goto LABEL_19;
    }
    while (1)
    {
      v20 = *(_QWORD *)(v20 + 8);
      if (v20 == v3)
        break;
      v40 = v20 - 24;
      if (!v20)
        v40 = 0;
      v19 = *(_QWORD *)(v40 + 48);
      if (v19 != v40 + 40)
        goto LABEL_109;
    }
LABEL_19:
    v8 = *(_QWORD *)(v8 + 8);
    v13 = v4 - 24;
    if (!v4)
      v13 = 0;
    if (v8 != v13 + 40)
    {
LABEL_26:
      if (v4 == v3)
        return result;
      continue;
    }
    break;
  }
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
      return result;
    v14 = v4 - 24;
    if (!v4)
      v14 = 0;
    v8 = *(_QWORD *)(v14 + 48);
    if (v8 != v14 + 40)
      goto LABEL_26;
  }
}

uint64_t llvm::Dependence::isInput(llvm::Dependence *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int32 v11;
  __int32 v12;

  result = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *(unsigned __int8 *)(v3 + 16) - 33;
  if (v4 <= 0x37)
  {
    if (((1 << (*(_BYTE *)(v3 + 16) - 33)) & 0x8000000000041) != 0)
    {
      v5 = *(_QWORD *)(v3 + 64);
      if (v5 && ((*(_BYTE *)(v5 + 20) & 4) != 0 || (*(_BYTE *)(v5 + 17) & 0x10) != 0))
        return 0;
      v11 = 7;
      if ((!sub_1C53E4BBC(v3, &v11, 1uLL)
         || (v9 = *(_QWORD *)(v3 - 32)) != 0
         && !*(_BYTE *)(v9 + 16)
         && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v3 + 72)
         && *(_DWORD *)(v9 + 36) == 7)
        && ((llvm::CallBase::hasFnAttrOnCalledFunction(v3, 66) & 1) != 0
         || (llvm::CallBase::hasFnAttrOnCalledFunction(v3, 44) & 1) != 0))
      {
        return 0;
      }
    }
    else if (((1 << (*(_BYTE *)(v3 + 16) - 33)) & 0x808001C8000010) == 0)
    {
      if (v4 != 28)
        return result;
      if ((*(_WORD *)(v3 + 18) & 0x301) == 0)
        return 0;
    }
    result = 0;
    v6 = *((_QWORD *)this + 2);
    v7 = *(unsigned __int8 *)(v6 + 16) - 33;
    if (v7 > 0x37)
      return result;
    if (((1 << (*(_BYTE *)(v6 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (*(_BYTE *)(v6 + 16) - 33)) & 0x808001C8000010) == 0)
      {
        if (v7 == 28)
          return (*(_WORD *)(v6 + 18) & 0x301) != 0;
        return result;
      }
      return 1;
    }
    v8 = *(_QWORD *)(v6 + 64);
    if (!v8 || (*(_BYTE *)(v8 + 20) & 4) == 0 && (*(_BYTE *)(v8 + 17) & 0x10) == 0)
    {
      v12 = 7;
      if (sub_1C53E4BBC(v6, &v12, 1uLL))
      {
        v10 = *(_QWORD *)(v6 - 32);
        if (!v10 || *(_BYTE *)(v10 + 16) || *(_QWORD *)(v10 + 24) != *(_QWORD *)(v6 + 72) || *(_DWORD *)(v10 + 36) != 7)
          return 1;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v6, 66) & 1) == 0)
        return llvm::CallBase::hasFnAttrOnCalledFunction(v6, 44) ^ 1;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::DependenceInfo::Constraint::getX(llvm::DependenceInfo::Constraint *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::DependenceInfo::Constraint::getY(llvm::DependenceInfo::Constraint *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::DependenceInfo::Constraint::getA(llvm::DependenceInfo::Constraint *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t llvm::DependenceInfo::Constraint::getB(llvm::DependenceInfo::Constraint *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::DependenceInfo::Constraint::getC(llvm::DependenceInfo::Constraint *this)
{
  return *((_QWORD *)this + 4);
}

unint64_t llvm::DependenceInfo::Constraint::getD(llvm::DependenceInfo::Constraint *this)
{
  return llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), *((_QWORD *)this + 4));
}

uint64_t llvm::DependenceInfo::Constraint::getAssociatedLoop(llvm::DependenceInfo::Constraint *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t llvm::DependenceInfo::Constraint::setPoint(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 40) = a4;
  return result;
}

uint64_t llvm::DependenceInfo::Constraint::setLine(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)result = 3;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a5;
  return result;
}

_DWORD *llvm::DependenceInfo::Constraint::setEmpty(_DWORD *this)
{
  *this = 0;
  return this;
}

uint64_t llvm::DependenceInfo::Constraint::setAny(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)result = 4;
  return result;
}

uint64_t llvm::DependenceInfo::intersectConstraints(llvm::DependenceInfo *this, llvm::DependenceInfo::Constraint *a2, const llvm::DependenceInfo::Constraint *a3)
{
  int v3;
  uint64_t result;
  int v7;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AddExpr;
  uint64_t v22;
  llvm::DependenceInfo *v23;
  uint64_t v24;
  unint64_t NegativeSCEV;
  unint64_t v26;
  char isKnownPredicate;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t MulExpr;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::APInt *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  llvm::APInt *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  int64_t v92;
  BOOL v93;
  unint64_t v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  int64_t v98;
  unint64_t v99;
  unsigned int v100;
  _QWORD *v101;
  unsigned int v102;
  void *v103;
  unsigned int v104;
  _QWORD *v105;
  unsigned int v106;
  void *v107;
  unsigned int v108;
  void *v109;
  unsigned int v110;
  void *v111;
  unsigned int v112;
  void *v113;
  unsigned int v114;
  void *__src;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
    return 0;
  if (v3 == 4)
  {
    if (*(_DWORD *)a3 == 4)
      return 0;
LABEL_26:
    v31 = *(_OWORD *)a3;
    v32 = *((_OWORD *)a3 + 2);
    *((_OWORD *)a2 + 1) = *((_OWORD *)a3 + 1);
    *((_OWORD *)a2 + 2) = v32;
    *(_OWORD *)a2 = v31;
    return 1;
  }
  v7 = *(_DWORD *)a3;
  if (!*(_DWORD *)a3)
  {
LABEL_6:
    *(_DWORD *)a2 = 0;
    return 1;
  }
  if (v3 == 2 && v7 == 2)
  {
    NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 4));
    v26 = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 4));
    isKnownPredicate = llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, NegativeSCEV, v26);
    result = 0;
    if ((isKnownPredicate & 1) != 0)
      return result;
    v28 = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 4));
    v29 = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 4));
    if (!llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x21u, v28, v29))
    {
      v30 = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 4));
      result = 0;
      if (*(_WORD *)(v30 + 24))
        return result;
      goto LABEL_26;
    }
    goto LABEL_6;
  }
  v10 = v7 & 0xFFFFFFFE;
  if ((v3 & 0xFFFFFFFE) == 2 && v10 == 2)
  {
    v33 = *((_QWORD *)this + 1);
    v34 = *((_QWORD *)a2 + 2);
    v35 = *((_QWORD *)a3 + 3);
    __src = &v117;
    v117 = v34;
    v118 = v35;
    v116 = 0x200000002;
    MulExpr = llvm::ScalarEvolution::getMulExpr(v33, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    v37 = *((_QWORD *)this + 1);
    v38 = *((_QWORD *)a2 + 3);
    v39 = *((_QWORD *)a3 + 2);
    __src = &v117;
    v117 = v38;
    v118 = v39;
    v116 = 0x200000002;
    v40 = llvm::ScalarEvolution::getMulExpr(v37, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    if (llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, MulExpr, v40))
    {
      v41 = *((_QWORD *)this + 1);
      v42 = *((_QWORD *)a2 + 4);
      v43 = *((_QWORD *)a3 + 3);
      __src = &v117;
      v117 = v42;
      v118 = v43;
      v116 = 0x200000002;
      v44 = llvm::ScalarEvolution::getMulExpr(v41, (uint64_t)&__src, 0, 0);
      if (__src != &v117)
        free(__src);
      v45 = *((_QWORD *)this + 1);
      v46 = *((_QWORD *)a2 + 3);
      v47 = *((_QWORD *)a3 + 4);
      __src = &v117;
      v117 = v46;
      v118 = v47;
      v116 = 0x200000002;
      v48 = llvm::ScalarEvolution::getMulExpr(v45, (uint64_t)&__src, 0, 0);
      if (__src != &v117)
        free(__src);
      if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, v44, v48) & 1) != 0)
        return 0;
      v23 = this;
      v24 = v44;
      v22 = v48;
      goto LABEL_40;
    }
    result = llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x21u, MulExpr, v40);
    if (!(_DWORD)result)
      return result;
    v49 = *((_QWORD *)this + 1);
    v50 = *((_QWORD *)a2 + 4);
    v51 = *((_QWORD *)a3 + 3);
    __src = &v117;
    v117 = v50;
    v118 = v51;
    v116 = 0x200000002;
    v52 = llvm::ScalarEvolution::getMulExpr(v49, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    v53 = *((_QWORD *)this + 1);
    v54 = *((_QWORD *)a2 + 4);
    v55 = *((_QWORD *)a3 + 2);
    __src = &v117;
    v117 = v54;
    v118 = v55;
    v116 = 0x200000002;
    v56 = llvm::ScalarEvolution::getMulExpr(v53, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    v57 = *((_QWORD *)this + 1);
    v58 = *((_QWORD *)a3 + 4);
    v59 = *((_QWORD *)a2 + 3);
    __src = &v117;
    v117 = v58;
    v118 = v59;
    v116 = 0x200000002;
    v60 = llvm::ScalarEvolution::getMulExpr(v57, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    v61 = *((_QWORD *)this + 1);
    v62 = *((_QWORD *)a3 + 4);
    v63 = *((_QWORD *)a2 + 2);
    __src = &v117;
    v117 = v62;
    v118 = v63;
    v116 = 0x200000002;
    v64 = llvm::ScalarEvolution::getMulExpr(v61, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    v65 = *((_QWORD *)this + 1);
    v66 = *((_QWORD *)a2 + 2);
    v67 = *((_QWORD *)a3 + 3);
    __src = &v117;
    v117 = v66;
    v118 = v67;
    v116 = 0x200000002;
    v68 = llvm::ScalarEvolution::getMulExpr(v65, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    v69 = *((_QWORD *)this + 1);
    v70 = *((_QWORD *)a3 + 2);
    v71 = *((_QWORD *)a2 + 3);
    __src = &v117;
    v117 = v70;
    v118 = v71;
    v116 = 0x200000002;
    v72 = llvm::ScalarEvolution::getMulExpr(v69, (uint64_t)&__src, 0, 0);
    if (__src != &v117)
      free(__src);
    llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), v56, v64);
    v74 = *(_WORD *)(v73 + 24) ? 0 : v73;
    llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), v52, v60);
    v76 = *(_WORD *)(v75 + 24) ? 0 : v75;
    llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), v68, v72);
    v78 = *(_WORD *)(v77 + 24) ? 0 : v77;
    llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), v72, v68);
    v81 = v80;
    result = 0;
    v82 = *(_WORD *)(v81 + 24) ? 0 : v81;
    if (!v76 || !v74 || !v78 || !v82)
      return result;
    v83 = *(_QWORD *)(v76 + 32);
    LODWORD(v116) = *(_DWORD *)(v83 + 32);
    if (v116 > 0x40)
    {
      __src = (void *)operator new[]();
      memcpy(__src, *(const void **)(v83 + 24), (((unint64_t)v116 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __src = *(void **)(v83 + 24);
    }
    v84 = *(_QWORD *)(v78 + 32);
    v114 = *(_DWORD *)(v84 + 32);
    if (v114 > 0x40)
    {
      v113 = (void *)operator new[]();
      memcpy(v113, *(const void **)(v84 + 24), (((unint64_t)v114 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v113 = *(void **)(v84 + 24);
    }
    v85 = *(_QWORD *)(v74 + 32);
    v112 = *(_DWORD *)(v85 + 32);
    if (v112 > 0x40)
    {
      v111 = (void *)operator new[]();
      memcpy(v111, *(const void **)(v85 + 24), (((unint64_t)v112 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v111 = *(void **)(v85 + 24);
    }
    v86 = *(_QWORD *)(v82 + 32);
    v110 = *(_DWORD *)(v86 + 32);
    if (v110 > 0x40)
    {
      v109 = (void *)operator new[]();
      memcpy(v109, *(const void **)(v86 + 24), (((unint64_t)v110 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v109 = *(void **)(v86 + 24);
    }
    v108 = v116;
    if (v116 > 0x40)
    {
      v107 = (void *)operator new[]();
      v87 = __src;
      memcpy(v107, __src, (((unint64_t)v108 + 63) >> 3) & 0x3FFFFFF8);
      v106 = v116;
      if (v116 > 0x40)
      {
        v105 = (_QWORD *)operator new[]();
        memcpy(v105, __src, (((unint64_t)v106 + 63) >> 3) & 0x3FFFFFF8);
LABEL_88:
        llvm::APInt::sdivrem((llvm::APInt *)&__src, (const void **)&v113, (const llvm::APInt *)&v107, (llvm::APInt *)&v105, v79);
        v104 = v112;
        if (v112 > 0x40)
        {
          v103 = (void *)operator new[]();
          v89 = v111;
          memcpy(v103, v111, (((unint64_t)v104 + 63) >> 3) & 0x3FFFFFF8);
          v102 = v112;
          if (v112 > 0x40)
          {
            v101 = (_QWORD *)operator new[]();
            memcpy(v101, v111, (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8);
LABEL_93:
            llvm::APInt::sdivrem((llvm::APInt *)&v111, (const void **)&v109, (const llvm::APInt *)&v103, (llvm::APInt *)&v101, v88);
            v90 = v105;
            if (v106 >= 0x41)
            {
              v91 = 0;
              v92 = ((unint64_t)v106 + 63) >> 6;
              do
              {
                v93 = v92-- < 1;
                if (v93)
                  break;
                v94 = v105[v92];
                v91 += __clz(v94);
              }
              while (!v94);
              v95 = v106 | 0xFFFFFFC0;
              if ((v106 & 0x3F) == 0)
                v95 = 0;
              if (v106 - v91 - v95 > 0x40)
                goto LABEL_113;
              v90 = (_QWORD *)*v105;
            }
            if (!v90)
            {
              v96 = v101;
              if (v102 >= 0x41)
              {
                v97 = 0;
                v98 = ((unint64_t)v102 + 63) >> 6;
                do
                {
                  v93 = v98-- < 1;
                  if (v93)
                    break;
                  v99 = v101[v98];
                  v97 += __clz(v99);
                }
                while (!v99);
                v100 = v102 | 0xFFFFFFC0;
                if ((v102 & 0x3F) == 0)
                  v100 = 0;
                if (v102 - v97 - v100 > 0x40)
                  goto LABEL_113;
                v96 = (_QWORD *)*v101;
              }
              if (!v96
                && (sub_1C4DA9220((llvm::APInt *)&v107, 0) & 1) == 0
                && !sub_1C4DA9220((llvm::APInt *)&v103, 0))
              {
                __asm { BR              X10 }
              }
            }
LABEL_113:
            *(_DWORD *)a2 = 0;
            if (v102 >= 0x41 && v101)
              MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
            if (v104 >= 0x41 && v103)
              MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
            if (v106 >= 0x41 && v105)
              MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
            if (v108 >= 0x41 && v107)
              MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
            if (v110 >= 0x41 && v109)
              MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
            if (v112 >= 0x41 && v111)
              MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
            if (v114 >= 0x41 && v113)
              MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
            if (v116 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            return 1;
          }
        }
        else
        {
          v89 = v111;
          v103 = v111;
          v102 = v112;
        }
        v101 = v89;
        goto LABEL_93;
      }
    }
    else
    {
      v87 = __src;
      v107 = __src;
      v106 = v116;
    }
    v105 = v87;
    goto LABEL_88;
  }
  v12 = *((_QWORD *)this + 1);
  v13 = *((_QWORD *)a3 + 2);
  v14 = *((_QWORD *)a2 + 2);
  __src = &v117;
  v117 = v13;
  v118 = v14;
  v116 = 0x200000002;
  v15 = llvm::ScalarEvolution::getMulExpr(v12, (uint64_t)&__src, 0, 0);
  if (__src != &v117)
    free(__src);
  v16 = *((_QWORD *)this + 1);
  v17 = *((_QWORD *)a3 + 3);
  v18 = *((_QWORD *)a2 + 3);
  __src = &v117;
  v117 = v17;
  v118 = v18;
  v116 = 0x200000002;
  v19 = llvm::ScalarEvolution::getMulExpr(v16, (uint64_t)&__src, 0, 0);
  if (__src != &v117)
    free(__src);
  v20 = *((_QWORD *)this + 1);
  __src = &v117;
  v117 = v15;
  v118 = v19;
  v116 = 0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr(v20, (uint64_t)&__src, 0, 0);
  if (__src != &v117)
    free(__src);
  if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, AddExpr, *((_QWORD *)a3 + 4)) & 1) != 0)
    return 0;
  v22 = *((_QWORD *)a3 + 4);
  v23 = this;
  v24 = AddExpr;
LABEL_40:
  result = llvm::DependenceInfo::isKnownPredicate((uint64_t)v23, 0x21u, v24, v22);
  if ((_DWORD)result)
    goto LABEL_6;
  return result;
}

void sub_1C4E0AC88(uint64_t a1, const llvm::Loop *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::APInt *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t Constant;
  const llvm::APInt *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  llvm::DependenceInfo::collectUpperBound((llvm::ScalarEvolution **)v17, a2, **(llvm::Type ***)(v18 + 32));
  if (v19 && !*(_WORD *)(v19 + 24))
  {
    v21 = *(_QWORD *)(v19 + 32);
    v22 = (uint64_t *)(v21 + 24);
    if (a16 > 0x40)
    {
      v27 = *(_QWORD *)(a15 + 8 * ((a16 - 1) >> 6)) & (1 << (a16 - 1));
      v28 = *(_DWORD *)(v21 + 32);
      v29 = v28 - 1;
      v23 = *(_QWORD *)(v21 + 24);
      if (v28 >= 0x41)
        v30 = (_QWORD *)(v23 + 8 * (v29 >> 6));
      else
        v30 = (_QWORD *)(v21 + 24);
      if ((v27 != 0) == ((*v30 >> v29) & 1))
      {
        v34 = (((unint64_t)a16 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v34)
            goto LABEL_5;
          v35 = *(_QWORD *)(a15 - 8 + v34);
          v36 = *(_QWORD *)(v23 + v34 - 8);
          v34 -= 8;
        }
        while (v35 == v36);
        if (v35 > v36)
          goto LABEL_28;
      }
      else if (!v27)
      {
        goto LABEL_28;
      }
    }
    else
    {
      v23 = *v22;
      if (a15 << -(uint64_t)a16 >> -(uint64_t)a16 > *v22 << -(uint64_t)a16 >> -(uint64_t)a16)
        goto LABEL_28;
    }
LABEL_5:
    if (a12 <= 0x40)
    {
      if (a11 << -(char)a12 >> -(char)a12 <= v23 << -(char)a12 >> -(char)a12)
        goto LABEL_7;
LABEL_28:
      JUMPOUT(0x1C4E0AB08);
    }
    v31 = *(_QWORD *)(a11 + 8 * ((a12 - 1) >> 6)) & (1 << (a12 - 1));
    v32 = *(_DWORD *)(v21 + 32);
    v33 = v32 - 1;
    if (v32 >= 0x41)
      v22 = (uint64_t *)(v23 + 8 * (v33 >> 6));
    if ((v31 != 0) != (((unint64_t)*v22 >> v33) & 1))
    {
      if (v31)
        goto LABEL_7;
      goto LABEL_28;
    }
    v37 = (((unint64_t)a12 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v37)
        goto LABEL_7;
      v38 = *(_QWORD *)(a11 - 8 + v37);
      v39 = *(_QWORD *)(v23 - 8 + v37);
      v37 -= 8;
    }
    while (v38 == v39);
    if (v38 > v39)
      goto LABEL_28;
  }
LABEL_7:
  Constant = llvm::ScalarEvolution::getConstant(*(llvm::ConstantInt *****)(v17 + 8), (const llvm::APInt *)&a15, v20);
  v26 = llvm::ScalarEvolution::getConstant(*(llvm::ConstantInt *****)(v17 + 8), (const llvm::APInt *)&a11, v25);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 16) = Constant;
  *(_QWORD *)(v16 + 24) = v26;
  JUMPOUT(0x1C4E0AB0CLL);
}

uint64_t sub_1C4E0AE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t MulExpr;
  void *v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v7[0] = v8;
  v8[0] = a2;
  v8[1] = a3;
  v7[1] = (void *)0x200000002;
  MulExpr = llvm::ScalarEvolution::getMulExpr(a1, (uint64_t)v7, a4, a5);
  if (v7[0] != v8)
    free(v7[0]);
  return MulExpr;
}

void llvm::DependenceInfo::collectConstantUpperBound(llvm::ScalarEvolution **this, const llvm::Loop *a2, llvm::Type *a3)
{
  llvm::DependenceInfo::collectUpperBound(this, a2, a3);
}

uint64_t sub_1C4E0AF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t AddExpr;
  void *v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v7[0] = v8;
  v8[0] = a2;
  v8[1] = a3;
  v7[1] = (void *)0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr(a1, (uint64_t)v7, a4, a5);
  if (v7[0] != v8)
    free(v7[0]);
  return AddExpr;
}

uint64_t llvm::Dependence::dump(llvm::Dependence *this, llvm::raw_ostream *a2)
{
  uint64_t result;
  _QWORD *v5;
  const char *v6;
  llvm::raw_ostream *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _WORD *v19;
  char v20;
  uint64_t v21;
  char v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  llvm::raw_ostream *v26;
  const char *v27;
  int v28;
  char v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  _WORD *v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  llvm::raw_ostream *v56;
  size_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  __int32 v104;

  result = (*(uint64_t (**)(llvm::Dependence *))(*(_QWORD *)this + 24))(this);
  if ((_DWORD)result)
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v5 <= 7uLL)
    {
      v6 = "confused";
      v7 = a2;
      v8 = 8;
LABEL_75:
      result = (uint64_t)llvm::raw_ostream::write(v7, v6, v8);
      goto LABEL_76;
    }
    *v5 = 0x64657375666E6F63;
    v52 = *((_QWORD *)a2 + 4) + 8;
LABEL_170:
    *((_QWORD *)a2 + 4) = v52;
    goto LABEL_76;
  }
  if ((*(unsigned int (**)(llvm::Dependence *))(*(_QWORD *)this + 32))(this))
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 0xA)
    {
      *(_DWORD *)(v9 + 7) = 544501349;
      *(_QWORD *)v9 = *(_QWORD *)"consistent ";
      *((_QWORD *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, "consistent ", 0xBuLL);
    }
  }
  v10 = *((_QWORD *)this + 1);
  v11 = *(unsigned __int8 *)(v10 + 16) - 33;
  if (v11 <= 0x37)
  {
    if (((1 << (*(_BYTE *)(v10 + 16) - 33)) & 0x8000000000041) != 0)
    {
      v44 = *(_QWORD *)(v10 + 64);
      if (v44 && (*(_BYTE *)(v44 + 17) & 0x30) != 0)
        goto LABEL_11;
      v45 = *(_DWORD *)(v10 + 20);
      if (v45 < 0
        && (v69 = v10 - 32 * (v45 & 0x7FFFFFF), v72 = *(_QWORD *)(v69 - 8), v70 = v69 - 8, (v71 = v72) != 0))
      {
        v73 = -v71;
        while (1)
        {
          v74 = *(_DWORD *)(*(_QWORD *)(v70 + v73) + 8);
          v75 = v74 > 7;
          v76 = (1 << v74) & 0x83;
          if (v75 || v76 == 0)
            break;
          v73 += 16;
          if (!v73)
            goto LABEL_104;
        }
      }
      else
      {
LABEL_104:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(*((_QWORD *)this + 1), 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44) & 1) != 0)
        {
          goto LABEL_11;
        }
      }
    }
    else if (v11 == 27)
    {
      if ((*(_WORD *)(v10 + 18) & 0x301) == 0)
        goto LABEL_11;
    }
    else if (((1 << (*(_BYTE *)(v10 + 16) - 33)) & 0x808001D0000010) == 0)
    {
      goto LABEL_11;
    }
    v48 = *((_QWORD *)this + 2);
    v49 = *(unsigned __int8 *)(v48 + 16) - 33;
    if (v49 > 0x37)
      goto LABEL_11;
    if (((1 << (*(_BYTE *)(v48 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (*(_BYTE *)(v48 + 16) - 33)) & 0x808001C8000010) == 0
        && (v49 != 28 || (*(_WORD *)(v48 + 18) & 0x301) == 0))
      {
        goto LABEL_11;
      }
LABEL_149:
      v59 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v59 <= 3uLL)
      {
        v55 = "flow";
LABEL_166:
        v56 = a2;
        v57 = 4;
        goto LABEL_174;
      }
      v66 = 2003790950;
      goto LABEL_178;
    }
    v58 = *(_QWORD *)(v48 + 64);
    if (!v58 || (*(_BYTE *)(v58 + 20) & 4) == 0 && (*(_BYTE *)(v58 + 17) & 0x10) == 0)
    {
      v104 = 7;
      if (sub_1C53E4BBC(v48, &v104, 1uLL))
      {
        v87 = *(_QWORD *)(v48 - 32);
        if (!v87
          || *(_BYTE *)(v87 + 16)
          || *(_QWORD *)(v87 + 24) != *(_QWORD *)(v48 + 72)
          || *(_DWORD *)(v87 + 36) != 7)
        {
          goto LABEL_149;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v48, 66) & 1) == 0
        && (llvm::CallBase::hasFnAttrOnCalledFunction(v48, 44) & 1) == 0)
      {
        goto LABEL_149;
      }
    }
  }
LABEL_11:
  v12 = *((_QWORD *)this + 1);
  v13 = *(unsigned __int8 *)(v12 + 16) - 33;
  if (v13 > 0x37)
    goto LABEL_15;
  if (((1 << (*(_BYTE *)(v12 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v46 = *(_QWORD *)(v12 + 64);
    if (v46 && (*(_BYTE *)(v46 + 17) & 0x30) != 0)
      goto LABEL_15;
    v47 = *(_DWORD *)(v12 + 20);
    if (v47 < 0 && (v78 = v12 - 32 * (v47 & 0x7FFFFFF), v81 = *(_QWORD *)(v78 - 8), v79 = v78 - 8, (v80 = v81) != 0))
    {
      v82 = -v80;
      while (1)
      {
        v83 = *(_DWORD *)(*(_QWORD *)(v79 + v82) + 8);
        v75 = v83 > 7;
        v84 = (1 << v83) & 0x83;
        if (v75 || v84 == 0)
          break;
        v82 += 16;
        if (!v82)
          goto LABEL_110;
      }
    }
    else
    {
LABEL_110:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(*((_QWORD *)this + 1), 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44) & 1) != 0)
      {
        goto LABEL_15;
      }
    }
  }
  else if (v13 == 27)
  {
    if ((*(_WORD *)(v12 + 18) & 0x301) == 0)
      goto LABEL_15;
  }
  else if (((1 << (*(_BYTE *)(v12 + 16) - 33)) & 0x808001D0000010) == 0)
  {
    goto LABEL_15;
  }
  v50 = *((_QWORD *)this + 2);
  v51 = *(unsigned __int8 *)(v50 + 16) - 33;
  if (v51 > 0x37)
    goto LABEL_15;
  if (((1 << (*(_BYTE *)(v50 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v62 = *(_QWORD *)(v50 + 64);
    if (v62 && (*(_BYTE *)(v62 + 17) & 0x30) != 0)
      goto LABEL_15;
    v63 = *(_DWORD *)(v50 + 20);
    if (v63 < 0)
    {
      v96 = v50 - 32 * (v63 & 0x7FFFFFF);
      v99 = *(_QWORD *)(v96 - 8);
      v97 = v96 - 8;
      v98 = v99;
      if (v99)
      {
        v100 = -v98;
        do
        {
          v101 = *(_DWORD *)(*(_QWORD *)(v97 + v100) + 8);
          v75 = v101 > 7;
          v102 = (1 << v101) & 0x83;
          if (v75 || v102 == 0)
            goto LABEL_172;
          v100 += 16;
        }
        while (v100);
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(*((_QWORD *)this + 2), 45) & 1) != 0
      || (llvm::CallBase::hasFnAttrOnCalledFunction(v50, 44) & 1) != 0)
    {
      goto LABEL_15;
    }
LABEL_172:
    v64 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v64) <= 5)
    {
      v55 = "output";
      v56 = a2;
      v57 = 6;
      goto LABEL_174;
    }
    *(_WORD *)(v64 + 4) = 29813;
    *(_DWORD *)v64 = 1886680431;
    v65 = *((_QWORD *)a2 + 4) + 6;
    goto LABEL_180;
  }
  if (v51 == 27)
  {
    if ((*(_WORD *)(v50 + 18) & 0x301) == 0)
      goto LABEL_15;
    goto LABEL_172;
  }
  if (((1 << (*(_BYTE *)(v50 + 16) - 33)) & 0x808001D0000010) != 0)
    goto LABEL_172;
LABEL_15:
  v14 = *((_QWORD *)this + 1);
  v15 = *(unsigned __int8 *)(v14 + 16) - 33;
  if (v15 > 0x37)
    goto LABEL_19;
  if (((1 << (*(_BYTE *)(v14 + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (((1 << (*(_BYTE *)(v14 + 16) - 33)) & 0x808001C8000010) == 0
      && (v15 != 28 || (*(_WORD *)(v14 + 18) & 0x301) == 0))
    {
      goto LABEL_19;
    }
    goto LABEL_84;
  }
  v38 = *(_QWORD *)(v14 + 64);
  if (!v38 || (*(_BYTE *)(v38 + 20) & 4) == 0 && (*(_BYTE *)(v38 + 17) & 0x10) == 0)
  {
    if ((v104 = 7, sub_1C53E4BBC(v14, &v104, 1uLL))
      && ((v67 = *(_QWORD *)(v14 - 32)) == 0
       || *(_BYTE *)(v67 + 16)
       || *(_QWORD *)(v67 + 24) != *(_QWORD *)(v14 + 72)
       || *(_DWORD *)(v67 + 36) != 7)
      || (llvm::CallBase::hasFnAttrOnCalledFunction(v14, 66) & 1) == 0
      && (llvm::CallBase::hasFnAttrOnCalledFunction(v14, 44) & 1) == 0)
    {
LABEL_84:
      v39 = *((_QWORD *)this + 2);
      v40 = *(unsigned __int8 *)(v39 + 16) - 33;
      if (v40 > 0x37)
        goto LABEL_19;
      if (((1 << (*(_BYTE *)(v39 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v60 = *(_QWORD *)(v39 + 64);
        if (v60 && (*(_BYTE *)(v60 + 17) & 0x30) != 0)
          goto LABEL_19;
        v61 = *(_DWORD *)(v39 + 20);
        if (v61 < 0
          && (v88 = v39 - 32 * (v61 & 0x7FFFFFF), v91 = *(_QWORD *)(v88 - 8), v89 = v88 - 8, (v90 = v91) != 0))
        {
          v92 = -v90;
          while (1)
          {
            v93 = *(_DWORD *)(*(_QWORD *)(v89 + v92) + 8);
            v75 = v93 > 7;
            v94 = (1 << v93) & 0x83;
            if (v75 || v94 == 0)
              break;
            v92 += 16;
            if (!v92)
              goto LABEL_154;
          }
        }
        else
        {
LABEL_154:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(*((_QWORD *)this + 2), 45) & 1) != 0
            || (llvm::CallBase::hasFnAttrOnCalledFunction(v39, 44) & 1) != 0)
          {
            goto LABEL_19;
          }
        }
      }
      else if (v40 == 27)
      {
        if ((*(_WORD *)(v39 + 18) & 0x301) == 0)
          goto LABEL_19;
      }
      else if (((1 << (*(_BYTE *)(v39 + 16) - 33)) & 0x808001D0000010) == 0)
      {
        goto LABEL_19;
      }
      v59 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v59 <= 3uLL)
      {
        v55 = "anti";
        goto LABEL_166;
      }
      v66 = 1769238113;
LABEL_178:
      *v59 = v66;
      v65 = *((_QWORD *)a2 + 4) + 4;
LABEL_180:
      *((_QWORD *)a2 + 4) = v65;
      goto LABEL_23;
    }
  }
LABEL_19:
  v16 = *((_QWORD *)this + 1);
  v17 = *(unsigned __int8 *)(v16 + 16) - 33;
  if (v17 > 0x37)
    goto LABEL_23;
  if (((1 << (*(_BYTE *)(v16 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v41 = *(_QWORD *)(v16 + 64);
    if (v41 && ((*(_BYTE *)(v41 + 20) & 4) != 0 || (*(_BYTE *)(v41 + 17) & 0x10) != 0))
      goto LABEL_23;
    v104 = 7;
    if ((!sub_1C53E4BBC(v16, &v104, 1uLL)
       || (v68 = *(_QWORD *)(v16 - 32)) != 0
       && !*(_BYTE *)(v68 + 16)
       && *(_QWORD *)(v68 + 24) == *(_QWORD *)(v16 + 72)
       && *(_DWORD *)(v68 + 36) == 7)
      && ((llvm::CallBase::hasFnAttrOnCalledFunction(v16, 66) & 1) != 0
       || (llvm::CallBase::hasFnAttrOnCalledFunction(v16, 44) & 1) != 0))
    {
      goto LABEL_23;
    }
  }
  else if (((1 << (*(_BYTE *)(v16 + 16) - 33)) & 0x808001C8000010) == 0
         && (v17 != 28 || (*(_WORD *)(v16 + 18) & 0x301) == 0))
  {
    goto LABEL_23;
  }
  v42 = *((_QWORD *)this + 2);
  v43 = *(unsigned __int8 *)(v42 + 16) - 33;
  if (v43 > 0x37)
    goto LABEL_23;
  if (((1 << (*(_BYTE *)(v42 + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (((1 << (*(_BYTE *)(v42 + 16) - 33)) & 0x808001C8000010) == 0
      && (v43 != 28 || (*(_WORD *)(v42 + 18) & 0x301) == 0))
    {
      goto LABEL_23;
    }
    goto LABEL_141;
  }
  v53 = *(_QWORD *)(v42 + 64);
  if (!v53 || (*(_BYTE *)(v53 + 20) & 4) == 0 && (*(_BYTE *)(v53 + 17) & 0x10) == 0)
  {
    if ((v104 = 7, sub_1C53E4BBC(v42, &v104, 1uLL))
      && ((v86 = *(_QWORD *)(v42 - 32)) == 0
       || *(_BYTE *)(v86 + 16)
       || *(_QWORD *)(v86 + 24) != *(_QWORD *)(v42 + 72)
       || *(_DWORD *)(v86 + 36) != 7)
      || (llvm::CallBase::hasFnAttrOnCalledFunction(v42, 66) & 1) == 0
      && (llvm::CallBase::hasFnAttrOnCalledFunction(v42, 44) & 1) == 0)
    {
LABEL_141:
      v54 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v54) <= 4)
      {
        v55 = "input";
        v56 = a2;
        v57 = 5;
LABEL_174:
        llvm::raw_ostream::write(v56, v55, v57);
        goto LABEL_23;
      }
      *(_BYTE *)(v54 + 4) = 116;
      *(_DWORD *)v54 = 1970302569;
      v65 = *((_QWORD *)a2 + 4) + 5;
      goto LABEL_180;
    }
  }
LABEL_23:
  v18 = (*(uint64_t (**)(llvm::Dependence *))(*(_QWORD *)this + 40))(this);
  v19 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 1uLL)
  {
    *v19 = 23328;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, " [", 2uLL);
  }
  v20 = 0;
  if (v18)
  {
    v21 = 1;
    do
    {
      v22 = (*(uint64_t (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)this + 80))(this, v21);
      if ((*(unsigned int (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)this + 64))(this, v21))
      {
        v23 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 112);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v23 + 1;
          *v23 = 112;
        }
      }
      v24 = (*(uint64_t (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)this + 56))(this, v21);
      if (v24)
      {
        llvm::SCEV::print(v24);
      }
      else
      {
        if ((*(unsigned int (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)this + 88))(this, v21))
        {
          v25 = (char *)*((_QWORD *)a2 + 4);
          if (*((char **)a2 + 3) != v25)
          {
            v34 = 83;
LABEL_67:
            *v25 = v34;
            ++*((_QWORD *)a2 + 4);
            goto LABEL_50;
          }
          v26 = a2;
          v27 = "S";
          goto LABEL_49;
        }
        v28 = (*(uint64_t (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)this + 48))(this, v21);
        if (v28 == 7)
        {
          v25 = (char *)*((_QWORD *)a2 + 4);
          if (*((char **)a2 + 3) != v25)
          {
            v34 = 42;
            goto LABEL_67;
          }
          v26 = a2;
          v27 = "*";
          goto LABEL_49;
        }
        v29 = v28;
        if ((v28 & 1) != 0)
        {
          v30 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v30)
          {
            llvm::raw_ostream::write(a2, "<", 1uLL);
            if ((v29 & 2) == 0)
              goto LABEL_41;
          }
          else
          {
            *v30 = 60;
            ++*((_QWORD *)a2 + 4);
            if ((v28 & 2) == 0)
            {
LABEL_41:
              if ((v29 & 4) == 0)
                goto LABEL_50;
LABEL_47:
              v25 = (char *)*((_QWORD *)a2 + 4);
              if (*((char **)a2 + 3) != v25)
              {
                v34 = 62;
                goto LABEL_67;
              }
              v26 = a2;
              v27 = ">";
LABEL_49:
              llvm::raw_ostream::write(v26, v27, 1uLL);
              goto LABEL_50;
            }
          }
        }
        else if ((v28 & 2) == 0)
        {
          goto LABEL_41;
        }
        v31 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) != v31)
        {
          *v31 = 61;
          ++*((_QWORD *)a2 + 4);
          if ((v29 & 4) == 0)
            goto LABEL_50;
          goto LABEL_47;
        }
        llvm::raw_ostream::write(a2, "=", 1uLL);
        if ((v29 & 4) != 0)
          goto LABEL_47;
      }
LABEL_50:
      if ((*(unsigned int (**)(llvm::Dependence *, uint64_t))(*(_QWORD *)this + 72))(this, v21))
      {
        v32 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, 112);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v32 + 1;
          *v32 = 112;
        }
      }
      if (v21 < v18)
      {
        v33 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v33)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
        }
        else
        {
          *v33 = 32;
          ++*((_QWORD *)a2 + 4);
        }
      }
      v20 |= v22;
      v21 = (v21 + 1);
    }
    while (v21 <= v18);
  }
  result = (*(uint64_t (**)(llvm::Dependence *))(*(_QWORD *)this + 16))(this);
  v35 = (_WORD *)*((_QWORD *)a2 + 4);
  if ((result & 1) != 0)
  {
    if (*((_QWORD *)a2 + 3) - (_QWORD)v35 > 1uLL)
    {
      *v35 = 15484;
      v35 = (_WORD *)(*((_QWORD *)a2 + 4) + 2);
      *((_QWORD *)a2 + 4) = v35;
    }
    else
    {
      result = (uint64_t)llvm::raw_ostream::write(a2, "|<", 2uLL);
      v35 = (_WORD *)*((_QWORD *)a2 + 4);
    }
  }
  if (*((_WORD **)a2 + 3) == v35)
  {
    result = (uint64_t)llvm::raw_ostream::write(a2, "]", 1uLL);
    if ((v20 & 1) == 0)
      goto LABEL_76;
    goto LABEL_73;
  }
  *(_BYTE *)v35 = 93;
  ++*((_QWORD *)a2 + 4);
  if ((v20 & 1) != 0)
  {
LABEL_73:
    v36 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v36) <= 9)
    {
      v6 = " splitable";
      v7 = a2;
      v8 = 10;
      goto LABEL_75;
    }
    *(_WORD *)(v36 + 8) = 25964;
    *(_QWORD *)v36 = *(_QWORD *)" splitable";
    v52 = *((_QWORD *)a2 + 4) + 10;
    goto LABEL_170;
  }
LABEL_76:
  v37 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v37 <= 1uLL)
    return (uint64_t)llvm::raw_ostream::write(a2, "!\n", 2uLL);
  *v37 = 2593;
  *((_QWORD *)a2 + 4) += 2;
  return result;
}

uint64_t llvm::DependenceInfo::mapSrcLoop(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  LODWORD(result) = 0;
  do
  {
    a2 = (_QWORD *)*a2;
    result = (result + 1);
  }
  while (a2);
  return result;
}

uint64_t llvm::DependenceInfo::mapDstLoop(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = result;
  LODWORD(result) = 0;
  do
  {
    a2 = (_QWORD *)*a2;
    result = (result + 1);
  }
  while (a2);
  v3 = *(_DWORD *)(v2 + 32);
  if (result > v3)
    return *(_DWORD *)(v2 + 36) - v3 + result;
  return result;
}

unint64_t *llvm::DependenceInfo::collectCommonLoops(unint64_t *result, const llvm::SCEV *a2, const llvm::Loop *a3, unint64_t *a4)
{
  const llvm::Loop *v5;
  unint64_t *v7;
  unsigned int v8;
  const llvm::Loop *v9;

  if (a3)
  {
    v5 = a3;
    v7 = result;
    do
    {
      v8 = 0;
      v9 = v5;
      do
      {
        v9 = *(const llvm::Loop **)v9;
        ++v8;
      }
      while (v9);
      if (v8 <= *((_DWORD *)v7 + 8))
      {
        result = (unint64_t *)llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v7[1], a2, v5);
        if ((_DWORD)result != 1)
          result = sub_1C496F8DC(a4, v8);
      }
      v5 = *(const llvm::Loop **)v5;
    }
    while (v5);
  }
  return result;
}

void llvm::DependenceInfo::unifySubscriptType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    __asm { BR              X14 }
}

uint64_t llvm::DependenceInfo::checkSubscript(uint64_t a1, uint64_t a2, const llvm::Loop *a3, unint64_t *a4, uint64_t a5)
{
  const llvm::Loop *v5;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const llvm::SCEV *v14;
  const llvm::Loop *v15;
  const llvm::Loop **BackedgeTakenInfo;
  BOOL v17;
  uint64_t result;
  const llvm::Loop *v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[4];

  v5 = a3;
  v29[3] = *MEMORY[0x1E0C80C00];
  if (a2 && *(_WORD *)(a2 + 24) == 7)
  {
    v11 = *(uint64_t **)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v12 = *v11;
    v13 = *(uint64_t **)(a1 + 8);
    if (v10 == 2)
    {
      v14 = (const llvm::SCEV *)v11[1];
    }
    else
    {
      v26 = *(_QWORD *)(a2 + 32);
      v27 = v29;
      v28 = 0x300000000;
      v23 = v10;
      v24 = 8 * v10 - 8;
      if (v24 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, (uint64_t)v24 >> 3, 8);
        v25 = v28;
      }
      else
      {
        v25 = 0;
      }
      if (v23 != 1)
      {
        memcpy((char *)v27 + 8 * v25, (const void *)(v26 + 8), v24);
        v25 = v28;
      }
      LODWORD(v28) = v25 + (v24 >> 3);
      v14 = (const llvm::SCEV *)sub_1C618AB20(v13, (uint64_t)&v27, *(uint64_t ***)(a2 + 48));
      if (v27 != v29)
        free(v27);
      v13 = *(uint64_t **)(a1 + 8);
    }
    v15 = *(const llvm::Loop **)(a2 + 48);
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo((llvm::ScalarEvolution *)v13, v15);
    if (*(_WORD *)(llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)v15, (uint64_t)v13, 0)+ 24) != 15)
      __asm { BR              X12 }
    if (v5)
    {
      v19 = v5;
      while (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 8), v14, v19) == 1)
      {
        v19 = *(const llvm::Loop **)v19;
        if (!v19)
          goto LABEL_17;
      }
      return 0;
    }
    else
    {
LABEL_17:
      v20 = *(_QWORD **)(a2 + 48);
      v21 = 0;
      if ((a5 & 1) != 0)
      {
        do
        {
          v20 = (_QWORD *)*v20;
          ++v21;
        }
        while (v20);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)*v20;
          ++v21;
        }
        while (v20);
        v22 = *(_DWORD *)(a1 + 32);
        if (v21 > v22)
          v21 += *(_DWORD *)(a1 + 36) - v22;
      }
      sub_1C496F8DC(a4, v21);
      return llvm::DependenceInfo::checkSubscript(a1, v12, v5, a4, a5);
    }
  }
  else if (a3)
  {
    do
    {
      v17 = llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 8), (const llvm::SCEV *)a2, v5) == 1;
      result = v17;
      if (!v17)
        break;
      v5 = *(const llvm::Loop **)v5;
    }
    while (v5);
  }
  else
  {
    return 1;
  }
  return result;
}

unint64_t sub_1C4E0C3BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v7;
  void *v8[2];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == 2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 32);
  v8[0] = v9;
  v8[1] = (void *)0x300000000;
  sub_1C618A450((unsigned int *)v8, (_BYTE *)(v4 + 8), (_BYTE *)(v4 + 8 * v2));
  v7 = sub_1C618AB20(a2, (uint64_t)v8, *(uint64_t ***)(a1 + 48));
  if (v8[0] != v9)
    free(v8[0]);
  return v7;
}

uint64_t llvm::DependenceInfo::checkSrcSubscript(uint64_t a1, uint64_t a2, const llvm::Loop *a3, unint64_t *a4)
{
  return llvm::DependenceInfo::checkSubscript(a1, a2, a3, a4, 1);
}

uint64_t llvm::DependenceInfo::checkDstSubscript(uint64_t a1, uint64_t a2, const llvm::Loop *a3, unint64_t *a4)
{
  return llvm::DependenceInfo::checkSubscript(a1, a2, a3, a4, 0);
}

void llvm::DependenceInfo::isKnownLessThan(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1C4E0C4D8()
{
  JUMPOUT(0x1C4E0C4C4);
}

void sub_1C4E0C4E4()
{
  JUMPOUT(0x1C4E0C4DCLL);
}

uint64_t sub_1C4E0C4EC()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_1C4E0C530 + 4 * byte_1C85F2BC3[*(unsigned __int16 *)(v0 + 24)]))();
}

void sub_1C4E0C530()
{
  JUMPOUT(0x1C4E0C51CLL);
}

void sub_1C4E0C53C()
{
  JUMPOUT(0x1C4E0C534);
}

uint64_t sub_1C4E0C544@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  llvm::ScalarEvolution *v14;
  const llvm::Loop *v15;
  const llvm::Loop **BackedgeTakenInfo;
  const llvm::SCEV *v17;

  result = 0;
  v6 = **(_QWORD **)(v2 + 32);
  if (*(_BYTE *)(v6 + 8) != 13)
    v6 = 0;
  if (a2 && v6)
  {
    llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(v3 + 8), a1);
    v8 = v7;
    llvm::ScalarEvolution::getTruncateOrZeroExtend(*(_QWORD *)(v3 + 8), v4);
    v10 = v9;
    llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(v3 + 8), v8, v9);
    if (v11)
      v12 = *(unsigned __int16 *)(v11 + 24) == 7;
    else
      v12 = 0;
    if (!v12
      || (v13 = v11, *(_QWORD *)(v11 + 40) != 2)
      || (v14 = *(llvm::ScalarEvolution **)(v3 + 8),
          v15 = *(const llvm::Loop **)(v11 + 48),
          BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v14, v15),
          *(_WORD *)(llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, (uint64_t)v15, (uint64_t)v14, 0)+ 24) == 15)|| (v17 = (const llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40)), (llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v3 + 8), v17) & 1) == 0))
    {
      __asm { BR              X11 }
    }
    return 1;
  }
  return result;
}

void sub_1C4E0C678()
{
  JUMPOUT(0x1C4E0C664);
}

void sub_1C4E0C684()
{
  JUMPOUT(0x1C4E0C67CLL);
}

unint64_t sub_1C4E0C68C()
{
  uint64_t v0;
  uint64_t v1;
  const llvm::SCEV *v2;
  uint64_t v3;
  llvm::ScalarEvolution *v4;
  const llvm::SCEV *Constant;
  uint64_t SMaxExpr;
  const llvm::SCEV *v7;

  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v4, **(llvm::Type ***)(v0 + 32), 1, 0);
  SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v4, v2, Constant);
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)v4, v3, SMaxExpr);
  return llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v1 + 8), v7);
}

void sub_1C4E0C6F8()
{
  JUMPOUT(0x1C4E0C500);
}

void sub_1C4E0C700()
{
  JUMPOUT(0x1C4E0C558);
}

void sub_1C4E0C708()
{
  JUMPOUT(0x1C4E0C6A0);
}

BOOL llvm::DependenceInfo::isKnownNonNegative(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Value *a3)
{
  return a3
      && *((_BYTE *)a3 + 16) == 62
      && (*((_BYTE *)a3 + 17) & 2) != 0
      && a2
      && *((_WORD *)a2 + 12) == 7
      && *((_QWORD *)a2 + 5) == 2
      && llvm::ScalarEvolution::isKnownNonNegative(this[1], **((const llvm::SCEV ***)a2 + 4))
      && llvm::ScalarEvolution::isKnownNonNegative(this[1], *(const llvm::SCEV **)(*((_QWORD *)a2 + 4) + 8))
      || llvm::ScalarEvolution::isKnownNonNegative(this[1], a2);
}

uint64_t llvm::DependenceInfo::testZIV(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::SCEV *a3, llvm::FullDependence *a4)
{
  uint64_t result;

  if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)a2, (uint64_t)a3) & 1) != 0)
    return 0;
  if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x21u, (uint64_t)a2, (uint64_t)a3) & 1) != 0)
    return 1;
  result = 0;
  *((_BYTE *)a4 + 43) = 0;
  return result;
}

void llvm::DependenceInfo::strongSIVtest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), a3, a4);
  __asm { BR              X11 }
}

void sub_1C4E0C89C()
{
  JUMPOUT(0x1C4E0C888);
}

void sub_1C4E0C8A8()
{
  JUMPOUT(0x1C4E0C8A0);
}

BOOL sub_1C4E0C8B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, int a13, uint64_t a14, int a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const llvm::Loop *v35;
  llvm::DependenceInfo::Constraint *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::APInt *v41;
  unint64_t v42;
  unint64_t v43;
  int isKnownNonZero;
  int isKnownNonPositive;
  _BOOL4 v46;
  int v47;
  _BOOL4 v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  size_t v57;
  const llvm::APInt *v58;
  _QWORD *v59;
  int v60;
  int64_t v61;
  unint64_t v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  unint64_t NegativeSCEV;
  BOOL isKnownNonNegative;
  unint64_t v69;
  uint64_t v70;
  uint64_t MulExpr;
  const llvm::APInt *v72;
  const llvm::SCEV *Constant;
  int v74;
  char *v75;
  char v76;
  char v77;
  _QWORD *v78;
  unsigned int v79;
  void *v80;
  unsigned int v81;
  void *v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[15];

  llvm::DependenceInfo::collectUpperBound((llvm::ScalarEvolution **)v34, v35, **(llvm::Type ***)(v32 + 32));
  if (v40)
  {
    v66 = v40;
    NegativeSCEV = v38;
    if (!llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v38))
      NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v34 + 8), v38);
    isKnownNonNegative = llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v37);
    v69 = v37;
    if (!isKnownNonNegative)
      v69 = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v34 + 8), v37);
    v70 = *(_QWORD *)(v34 + 8);
    v84 = v86;
    v86[0] = v66;
    v86[1] = v69;
    v85 = 0x200000002;
    MulExpr = llvm::ScalarEvolution::getMulExpr(v70, (uint64_t)&v84, 0, 0);
    if (v84 != v86)
      free(v84);
    if ((llvm::DependenceInfo::isKnownPredicate(v34, 0x26u, NegativeSCEV, MulExpr) & 1) != 0)
      return 1;
  }
  if (*(_WORD *)(v38 + 24) || *(_WORD *)(v37 + 24))
  {
    if (llvm::SCEV::isZero((llvm::SCEV *)v38))
    {
      *(_QWORD *)(*(_QWORD *)(v33 + 48) + 16 * v39 + 8) = v38;
      llvm::DependenceInfo::Constraint::setDistance(v36, (const llvm::SCEV *)v38, v35);
      *(_BYTE *)(*(_QWORD *)(v33 + 48) + 16 * v39) &= 0xFAu;
    }
    else
    {
      if (llvm::SCEV::isOne((llvm::SCEV *)v37))
      {
        *(_QWORD *)(*(_QWORD *)(v33 + 48) + 16 * v39 + 8) = v38;
        llvm::DependenceInfo::Constraint::setDistance(v36, (const llvm::SCEV *)v38, v35);
      }
      else
      {
        *(_BYTE *)(v33 + 43) = 0;
        v42 = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v34 + 8), v37);
        v43 = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v34 + 8), v38);
        *(_DWORD *)v36 = 3;
        *((_QWORD *)v36 + 2) = v37;
        *((_QWORD *)v36 + 3) = v42;
        *((_QWORD *)v36 + 4) = v43;
        *((_QWORD *)v36 + 5) = v35;
      }
      isKnownNonZero = llvm::ScalarEvolution::isKnownNonZero(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v38);
      isKnownNonPositive = llvm::ScalarEvolution::isKnownNonPositive(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v38);
      v46 = llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v38);
      v47 = llvm::ScalarEvolution::isKnownNonPositive(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v37);
      v48 = llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v34 + 8), (const llvm::SCEV *)v37);
      v49 = (isKnownNonPositive | v47) & (v46 || v48) ^ 1;
      if (!isKnownNonZero)
        v49 |= 2u;
      if (((v46 | v47) & (isKnownNonPositive | v48)) == 0)
        v49 |= 4u;
      *(_BYTE *)(*(_QWORD *)(v33 + 48) + 16 * v39) &= v49 | 0xF8;
    }
    return 0;
  }
  v51 = *(_QWORD *)(v38 + 32);
  v52 = *(unsigned int *)(v51 + 32);
  LODWORD(v85) = v52;
  if (v52 > 0x40)
  {
    v53 = (_QWORD *)operator new[]();
    v84 = v53;
    memcpy(v53, *(const void **)(v51 + 24), ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v53 = *(_QWORD **)(v51 + 24);
    v84 = v53;
  }
  v54 = *(_QWORD *)(v37 + 32);
  v55 = *(unsigned int *)(v54 + 32);
  v83 = v55;
  if (v55 > 0x40)
  {
    v56 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
    v82 = (void *)operator new[]();
    memcpy(v82, *(const void **)(v54 + 24), v56);
  }
  else
  {
    v82 = *(void **)(v54 + 24);
  }
  v81 = v52;
  if (v52 > 0x40)
  {
    v57 = ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8;
    v80 = (void *)operator new[]();
    memcpy(v80, v53, v57);
    v79 = v52;
    v78 = (_QWORD *)operator new[]();
    memcpy(v78, v53, v57);
  }
  else
  {
    v80 = v53;
    v79 = v52;
    v78 = v53;
  }
  llvm::APInt::sdivrem((llvm::APInt *)&v84, (const void **)&v82, (const llvm::APInt *)&v80, (llvm::APInt *)&v78, v41);
  v59 = v78;
  if (v79 >= 0x41)
  {
    v60 = 0;
    v61 = ((unint64_t)v79 + 63) >> 6;
    do
    {
      if (v61-- < 1)
        break;
      v63 = v78[v61];
      v60 += __clz(v63);
    }
    while (!v63);
    v64 = v79 | 0xFFFFFFC0;
    if ((v79 & 0x3F) == 0)
      v64 = 0;
    if (v79 - v60 - v64 > 0x40)
      goto LABEL_31;
    v59 = (_QWORD *)*v78;
  }
  if (v59)
  {
LABEL_31:
    v65 = 1;
    goto LABEL_32;
  }
  *(_QWORD *)(*(_QWORD *)(v33 + 48) + 16 * v39 + 8) = llvm::ScalarEvolution::getConstant(*(llvm::ConstantInt *****)(v34 + 8), (const llvm::APInt *)&v80, v58);
  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(*(llvm::ConstantInt *****)(v34 + 8), (const llvm::APInt *)&v80, v72);
  llvm::DependenceInfo::Constraint::setDistance(v36, Constant, v35);
  if (sub_1C4DA92C4((llvm::APInt *)&v80, 0))
  {
    v65 = 0;
    *(_BYTE *)(*(_QWORD *)(v33 + 48) + 16 * v39) &= 0xF9u;
  }
  else
  {
    v74 = sub_1C4DA9220((llvm::APInt *)&v80, 0);
    v75 = (char *)(*(_QWORD *)(v33 + 48) + 16 * v39);
    v76 = *v75;
    v65 = 0;
    if (v74)
      v77 = v76 & 0xFC;
    else
      v77 = v76 & 0xFA;
    *v75 = v77;
  }
LABEL_32:
  if (v79 >= 0x41 && v78)
    MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
  if (v81 >= 0x41 && v80)
    MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
  if (v83 >= 0x41 && v82)
    MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
  if (v85 >= 0x41 && v84)
    MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
  return (v65 & 1) != 0;
}

uint64_t llvm::DependenceInfo::weakCrossingSIVtest(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::Loop *a5, int a6, llvm::FullDependence *a7, llvm::DependenceInfo::Constraint *a8, const llvm::SCEV **a9)
{
  uint64_t v14;
  llvm::SCEV *v15;
  unint64_t NegativeSCEV;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = (a6 - 1);
  *((_BYTE *)a7 + 43) = 0;
  llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), (uint64_t)a4, (uint64_t)a3);
  NegativeSCEV = (unint64_t)v15;
  *(_DWORD *)a8 = 3;
  *((_QWORD *)a8 + 2) = a2;
  *((_QWORD *)a8 + 3) = a2;
  *((_QWORD *)a8 + 4) = v15;
  *((_QWORD *)a8 + 5) = a5;
  if (llvm::SCEV::isZero(v15))
  {
    v17 = 16 * v14;
    *(_BYTE *)(*((_QWORD *)a7 + 6) + v17) &= ~1u;
    *(_BYTE *)(*((_QWORD *)a7 + 6) + v17) &= ~4u;
    v18 = *((_QWORD *)a7 + 6);
    if ((*(_BYTE *)(v18 + v17) & 7) != 0)
    {
      v19 = 0;
      *(_QWORD *)(v18 + 16 * v14 + 8) = NegativeSCEV;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v19 = 0;
    if (a2 && !*((_WORD *)a2 + 12))
    {
      *(_BYTE *)(*((_QWORD *)a7 + 6) + 16 * v14) |= 0x40u;
      if (llvm::ScalarEvolution::isKnownNegative(*((llvm::ScalarEvolution **)this + 1), a2))
      {
        llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), (uint64_t)a2);
        NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), NegativeSCEV);
      }
      __asm { BR              X11 }
    }
  }
  return v19;
}

void sub_1C4E0D6A0()
{
  JUMPOUT(0x1C4E0D660);
}

uint64_t llvm::DependenceInfo::exactSIVtest(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::SCEV *a5, const llvm::Loop *a6, unsigned int a7, llvm::FullDependence *a8, llvm::DependenceInfo::Constraint *a9)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t NegativeSCEV;
  uint64_t v16;
  uint64_t v17;
  const llvm::SCEV *v18;
  const llvm::SCEV *v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  unint64_t v34;
  void *__dst;
  int v36;
  void *v37;
  unsigned int v38;
  const void *v39;
  unsigned int v40;
  const void *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a8 + 43) = 0;
  llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), (uint64_t)a5, (uint64_t)a4);
  v14 = v13;
  NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), (uint64_t)a3);
  v16 = 0;
  *(_DWORD *)a9 = 3;
  *((_QWORD *)a9 + 2) = a2;
  *((_QWORD *)a9 + 3) = NegativeSCEV;
  *((_QWORD *)a9 + 4) = v14;
  *((_QWORD *)a9 + 5) = a6;
  if (*(_WORD *)(v14 + 24))
    v17 = 0;
  else
    v17 = v14;
  if (*((_WORD *)a2 + 12))
    v18 = 0;
  else
    v18 = a2;
  if (*((_WORD *)a3 + 12))
    v19 = 0;
  else
    v19 = a3;
  if (v17)
    v20 = v18 == 0;
  else
    v20 = 1;
  if (!v20 && v19 != 0)
  {
    v48 = 1;
    v47 = 0;
    v46 = 1;
    v45 = 0;
    v44 = 1;
    v43 = 0;
    v22 = *((_QWORD *)v18 + 4);
    v23 = *(unsigned int *)(v22 + 32);
    v42 = v23;
    if (v23 > 0x40)
    {
      v24 = (void *)operator new[]();
      memcpy(v24, *(const void **)(v22 + 24), ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v24 = *(void **)(v22 + 24);
    }
    v41 = v24;
    v25 = *((_QWORD *)v19 + 4);
    v26 = *(unsigned int *)(v25 + 32);
    v40 = v26;
    if (v26 > 0x40)
    {
      v28 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
      v27 = (void *)operator new[]();
      memcpy(v27, *(const void **)(v25 + 24), v28);
    }
    else
    {
      v27 = *(void **)(v25 + 24);
    }
    v39 = v27;
    v29 = *(_QWORD *)(v17 + 32);
    v30 = *(unsigned int *)(v29 + 32);
    v38 = v30;
    if (v30 > 0x40)
    {
      v32 = ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8;
      v31 = (void *)operator new[]();
      memcpy(v31, *(const void **)(v29 + 24), v32);
    }
    else
    {
      v31 = *(void **)(v29 + 24);
    }
    v37 = v31;
    if (!sub_1C4E0F8CC(v23, &v41, &v39, (llvm::APInt *)&v37, (uint64_t)&v47, (uint64_t)&v45, (uint64_t)&v43))
    {
      v36 = v23;
      if (v23 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 1, 1);
      }
      else
      {
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
        if (!(_DWORD)v23)
          LOBYTE(v34) = 0;
        __dst = (void *)(v34 & 1);
      }
      __asm { BR              X10 }
    }
    v16 = 1;
    if (v38 >= 0x41 && v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    if (v42 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    if (v44 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    if (v46 >= 0x41 && v45)
      MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
    if (v48 >= 0x41 && v47)
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  }
  return v16;
}

BOOL sub_1C4E0F8CC(unsigned int a1, const void **a2, const void **a3, llvm::APInt *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v14;
  unint64_t v15;
  llvm::APInt *v16;
  void *v17;
  void *v18;
  int v19;
  int64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  unsigned int v28;
  unint64_t v29;
  llvm::APInt *v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BOOL4 v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  llvm::APInt *v55;
  void *v56;
  unint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  void *v61;
  void *v62;
  size_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  int64_t v69;
  unint64_t v70;
  unsigned int v71;
  _BOOL8 v72;
  uint64_t v74;
  llvm::APInt *v75;
  void *v76;
  unsigned int v77;
  void *v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int v81;
  void *v82;
  unsigned int v83;
  void *v84;
  unsigned int v85;
  void *v86;
  unsigned int v87;
  void *__src;
  unsigned int v89;
  void *v90;
  unsigned int v91;
  void *__dst;
  unsigned int v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t *v96;
  unsigned int v97;

  v97 = a1;
  if (a1 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v96, 1, 1);
    v95 = a1;
    llvm::APInt::initSlowCase((llvm::APInt *)&v94, 0, 1);
    v93 = a1;
    llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 1);
    v91 = a1;
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, 1, 1);
  }
  else
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a1;
    if (a1)
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a1;
    else
      LOBYTE(v15) = 0;
    v96 = (uint64_t *)(v15 & 1);
    v95 = a1;
    v94 = 0;
    v93 = a1;
    __dst = 0;
    v91 = a1;
    if (!a1)
      LOBYTE(v14) = 0;
    v90 = (void *)(v14 & 1);
  }
  sub_1C4DA6CE8(a2, (uint64_t)&__src);
  sub_1C4DA6CE8(a3, (uint64_t)&v86);
  v85 = v89;
  v75 = a4;
  if (v89 > 0x40)
  {
    v84 = (void *)operator new[]();
    v17 = __src;
    memcpy(v84, __src, (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8);
    v83 = v89;
    if (v89 > 0x40)
    {
      v82 = (void *)operator new[]();
      memcpy(v82, __src, (((unint64_t)v83 + 63) >> 3) & 0x3FFFFFF8);
      goto LABEL_13;
    }
  }
  else
  {
    v17 = __src;
    v84 = __src;
    v83 = v89;
  }
  v82 = v17;
LABEL_13:
  llvm::APInt::sdivrem((llvm::APInt *)&__src, (const void **)&v86, (const llvm::APInt *)&v84, (llvm::APInt *)&v82, v16);
  while (1)
  {
    v18 = v82;
    if (v83 < 0x41)
      break;
    v19 = 0;
    v20 = ((unint64_t)v83 + 63) >> 6;
    do
    {
      v21 = v20-- < 1;
      if (v21)
        break;
      v22 = *((_QWORD *)v82 + v20);
      v19 += __clz(v22);
    }
    while (!v22);
    v23 = v83 | 0xFFFFFFC0;
    if ((v83 & 0x3F) == 0)
      v23 = 0;
    if (v83 - v19 - v23 <= 0x40)
    {
      v18 = *(void **)v82;
      break;
    }
LABEL_23:
    llvm::APInt::operator*((uint64_t)&v84, &v94, (uint64_t)&v80);
    if (v81 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v80);
    }
    else
    {
      if (v81)
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      else
        v24 = 0;
      v80 = v24 & ~v80;
    }
    llvm::APInt::operator++((uint64_t)&v80);
    v25 = v81;
    if (v81 >= 0x41)
    {
      v36 = 0;
      v37 = (unint64_t *)v80;
      v38 = v96;
      v39 = ((unint64_t)v81 + 63) >> 6;
      v40 = v39;
      do
      {
        v41 = *v38++;
        v42 = v41 + *v37;
        v43 = v42 + 1 <= *v37;
        if (v36)
        {
          ++v42;
          v36 = v43;
        }
        else
        {
          v36 = v42 < *v37;
        }
        *v37++ = v42;
        --v40;
      }
      while (v40);
      *(_QWORD *)(v80 + 8 * (v39 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
      v25 = v81;
      v27 = (void *)v80;
    }
    else
    {
      if (v81)
        v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      else
        v26 = 0;
      v27 = (void *)(v26 & ((unint64_t)v96 + v80));
    }
    if (v97 >= 0x41)
    {
      v28 = v95;
LABEL_36:
      llvm::APInt::reallocate((uint64_t)&v96, v28);
      if (v97 <= 0x40)
        v96 = (uint64_t *)v94;
      else
        memcpy(v96, (const void *)v94, (((unint64_t)v97 + 63) >> 3) & 0x3FFFFFF8);
      v28 = v95;
      goto LABEL_39;
    }
    v28 = v95;
    if (v95 > 0x40)
      goto LABEL_36;
    v96 = (uint64_t *)v94;
    v97 = v95;
LABEL_39:
    if (v28 > 0x40 || v25 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v94, v25);
      if (v95 <= 0x40)
        v94 = (unint64_t)v27;
      else
        memcpy((void *)v94, v27, (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v94 = (unint64_t)v27;
      v95 = v25;
    }
    llvm::APInt::operator*((uint64_t)&v84, &v90, (uint64_t)&v80);
    if (v81 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v80);
    }
    else
    {
      if (v81)
        v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      else
        v29 = 0;
      v80 = v29 & ~v80;
    }
    llvm::APInt::operator++((uint64_t)&v80);
    v31 = v81;
    if (v81 >= 0x41)
    {
      v44 = 0;
      v45 = (unint64_t *)v80;
      v46 = (uint64_t *)__dst;
      v47 = ((unint64_t)v81 + 63) >> 6;
      v48 = v47;
      do
      {
        v49 = *v46++;
        v50 = v49 + *v45;
        v51 = v50 + 1 <= *v45;
        if (v44)
        {
          ++v50;
          v44 = v51;
        }
        else
        {
          v44 = v50 < *v45;
        }
        *v45++ = v50;
        --v48;
      }
      while (v48);
      *(_QWORD *)(v80 + 8 * (v47 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
      v31 = v81;
      v33 = (void *)v80;
    }
    else
    {
      if (v81)
        v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v81;
      else
        v32 = 0;
      v33 = (void *)(v32 & ((unint64_t)__dst + v80));
    }
    if (v93 >= 0x41)
    {
      v34 = v91;
LABEL_56:
      llvm::APInt::reallocate((uint64_t)&__dst, v34);
      if (v93 <= 0x40)
        __dst = v90;
      else
        memcpy(__dst, v90, (((unint64_t)v93 + 63) >> 3) & 0x3FFFFFF8);
      v34 = v91;
      goto LABEL_59;
    }
    v34 = v91;
    if (v91 > 0x40)
      goto LABEL_56;
    __dst = v90;
    v93 = v91;
LABEL_59:
    if (v34 > 0x40 || v31 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v90, v31);
      if (v91 <= 0x40)
        v90 = v33;
      else
        memcpy(v90, v33, (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v90 = v33;
      v91 = v31;
    }
    v35 = v87;
    if (v89 > 0x40 || v87 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__src, v87);
      if (v89 <= 0x40)
        __src = v86;
      else
        memcpy(__src, v86, (((unint64_t)v89 + 63) >> 3) & 0x3FFFFFF8);
      v35 = v87;
    }
    else
    {
      __src = v86;
      v89 = v87;
    }
    if (v35 > 0x40 || v83 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v86, v83);
      if (v87 <= 0x40)
        v86 = v82;
      else
        memcpy(v86, v82, (((unint64_t)v87 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v86 = v82;
      v87 = v83;
    }
    llvm::APInt::sdivrem((llvm::APInt *)&__src, (const void **)&v86, (const llvm::APInt *)&v84, (llvm::APInt *)&v82, v30);
    if (v31 >= 0x41 && v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    if (v25 >= 0x41)
    {
      if (v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    }
  }
  if (v18)
    goto LABEL_23;
  if (*(_DWORD *)(a5 + 8) > 0x40u || (v52 = v87, v87 > 0x40))
  {
    if (&v86 != (void **)a5)
    {
      llvm::APInt::reallocate(a5, v87);
      v74 = *(unsigned int *)(a5 + 8);
      if (v74 <= 0x40)
        *(_QWORD *)a5 = v86;
      else
        memcpy(*(void **)a5, v86, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(_QWORD *)a5 = v86;
    *(_DWORD *)(a5 + 8) = v52;
  }
  v53 = sub_1C4DA9220((llvm::APInt *)a2, 0);
  v54 = v95;
  if (v53)
  {
    v79 = v95;
    if (v95 > 0x40)
    {
      v78 = (void *)operator new[]();
      memcpy(v78, (const void *)v94, (((unint64_t)v79 + 63) >> 3) & 0x3FFFFFF8);
      v55 = v75;
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v78);
    }
    else
    {
      v55 = v75;
      if (v95)
        v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v95;
      else
        v57 = 0;
      v78 = (void *)(v57 & ~v94);
    }
    llvm::APInt::operator++((uint64_t)&v78);
    LODWORD(v54) = v79;
    v56 = v78;
    v79 = 0;
  }
  else
  {
    if (v95 > 0x40)
    {
      v56 = (void *)operator new[]();
      memcpy(v56, (const void *)v94, ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v56 = (void *)v94;
    }
    v55 = v75;
  }
  if (*(_DWORD *)(a6 + 8) >= 0x41u && *(_QWORD *)a6)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a6, 0x1000C8000313F17);
  *(_QWORD *)a6 = v56;
  *(_DWORD *)(a6 + 8) = v54;
  if (v79 > 0x40)
    v58 = v53;
  else
    v58 = 0;
  if (v58 == 1 && v78)
    MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
  v59 = sub_1C4DA9220((llvm::APInt *)a3, 0);
  v60 = v91;
  if (v59)
  {
    if (v91 > 0x40)
    {
      v63 = (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8;
      v62 = (void *)operator new[]();
      v61 = v90;
      memcpy(v62, v90, v63);
    }
    else
    {
      v61 = v90;
      v62 = v90;
    }
  }
  else
  {
    v77 = v91;
    if (v91 > 0x40)
    {
      v76 = (void *)operator new[]();
      v61 = v90;
      memcpy(v76, v90, (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v76);
    }
    else
    {
      v61 = v90;
      if (v91)
        v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v91;
      else
        v64 = 0;
      v76 = (void *)(v64 & ~(unint64_t)v90);
    }
    llvm::APInt::operator++((uint64_t)&v76);
    v60 = v77;
    v62 = v76;
    v77 = 0;
  }
  if (*(_DWORD *)(a7 + 8) >= 0x41u && *(_QWORD *)a7)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a7, 0x1000C8000313F17);
  *(_QWORD *)a7 = v62;
  *(_DWORD *)(a7 + 8) = v60;
  if (v77 < 0x41)
    v65 = 1;
  else
    v65 = v59;
  if ((v65 & 1) == 0 && v76)
    MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
  llvm::APInt::srem(v55, (const void **)a5, (llvm::APInt *)&v80);
  if (v83 >= 0x41 && v82)
    MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
  v66 = v80;
  v82 = (void *)v80;
  v67 = v81;
  v83 = v81;
  if (v81 < 0x41)
  {
LABEL_160:
    v72 = v66 != 0;
    if (!v66)
    {
      llvm::APInt::sdiv(v55, (const void **)a5, (llvm::APInt *)&v80);
      if (v85 >= 0x41 && v84)
        MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
      v84 = (void *)v80;
      v85 = v81;
      v67 = v83;
    }
    if (v67 < 0x41 || !v82)
      goto LABEL_168;
LABEL_167:
    MEMORY[0x1CAA32F9C]();
    goto LABEL_168;
  }
  v68 = 0;
  v69 = ((unint64_t)v81 + 63) >> 6;
  do
  {
    v21 = v69-- < 1;
    if (v21)
      break;
    v70 = *(_QWORD *)(v80 + 8 * v69);
    v68 += __clz(v70);
  }
  while (!v70);
  v71 = v81 | 0xFFFFFFC0;
  if ((v81 & 0x3F) == 0)
    v71 = 0;
  if (v81 - v68 - v71 <= 0x40)
  {
    v66 = *(_QWORD *)v80;
    goto LABEL_160;
  }
  v72 = 1;
  if (v80)
    goto LABEL_167;
LABEL_168:
  if (v85 >= 0x41 && v84)
    MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  if (v89 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v91 >= 0x41 && v61)
    MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
  if (v93 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  if (v95 >= 0x41 && v94)
    MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
  if (v97 >= 0x41 && v96)
    MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
  return v72;
}

void sub_1C4E1051C(uint64_t a1, void **this, const void **a3, uint64_t a4, llvm::APInt *a5)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  int v14;
  int64_t v15;
  unint64_t v17;
  unsigned int v18;
  void **p_src;
  size_t v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  void *__src;
  unsigned int v26;

  v8 = *((unsigned int *)this + 2);
  v26 = v8;
  if (v8 <= 0x40)
  {
    v9 = *this;
    __src = *this;
    v24 = v8;
LABEL_4:
    v23 = v9;
    goto LABEL_6;
  }
  v10 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
  __src = (void *)operator new[]();
  v9 = *this;
  memcpy(__src, *this, v10);
  v11 = *((unsigned int *)this + 2);
  v24 = v11;
  if (v11 <= 0x40)
    goto LABEL_4;
  v12 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
  v23 = (_QWORD *)operator new[]();
  memcpy(v23, *this, v12);
LABEL_6:
  llvm::APInt::sdivrem((llvm::APInt *)this, a3, (const llvm::APInt *)&__src, (llvm::APInt *)&v23, a5);
  v13 = v23;
  if (v24 >= 0x41)
  {
    v14 = 0;
    v15 = ((unint64_t)v24 + 63) >> 6;
    do
    {
      if (v15-- < 1)
        break;
      v17 = v23[v15];
      v14 += __clz(v17);
    }
    while (!v17);
    v18 = v24 | 0xFFFFFFC0;
    if ((v24 & 0x3F) == 0)
      v18 = 0;
    if (v24 - v14 - v18 > 0x40)
      goto LABEL_15;
    v13 = (_QWORD *)*v23;
  }
  if (!v13)
  {
LABEL_21:
    p_src = &__src;
    goto LABEL_24;
  }
LABEL_15:
  if ((!sub_1C4DA92C4((llvm::APInt *)this, 0) || !sub_1C4DA92C4((llvm::APInt *)a3, 0))
    && (!sub_1C4DA9220((llvm::APInt *)this, 0) || !sub_1C4DA9220((llvm::APInt *)a3, 0)))
  {
    goto LABEL_21;
  }
  v22 = v26;
  if (v26 > 0x40)
  {
    v20 = (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8;
    v21 = (void *)operator new[]();
    memcpy(v21, __src, v20);
  }
  else
  {
    v21 = __src;
  }
  p_src = &v21;
  llvm::APInt::operator+=((uint64_t)&v21, 1uLL);
LABEL_24:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)p_src + 2);
  *(_QWORD *)a1 = *p_src;
  *((_DWORD *)p_src + 2) = 0;
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v26 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

void sub_1C4E10774(uint64_t a1, void **this, const void **a3, uint64_t a4, llvm::APInt *a5)
{
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  int v14;
  int64_t v15;
  unint64_t v17;
  unsigned int v18;
  void **p_src;
  size_t v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  void *__src;
  unsigned int v26;

  v8 = *((unsigned int *)this + 2);
  v26 = v8;
  if (v8 <= 0x40)
  {
    v9 = *this;
    __src = *this;
    v24 = v8;
LABEL_4:
    v23 = v9;
    goto LABEL_6;
  }
  v10 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
  __src = (void *)operator new[]();
  v9 = *this;
  memcpy(__src, *this, v10);
  v11 = *((unsigned int *)this + 2);
  v24 = v11;
  if (v11 <= 0x40)
    goto LABEL_4;
  v12 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
  v23 = (_QWORD *)operator new[]();
  memcpy(v23, *this, v12);
LABEL_6:
  llvm::APInt::sdivrem((llvm::APInt *)this, a3, (const llvm::APInt *)&__src, (llvm::APInt *)&v23, a5);
  v13 = v23;
  if (v24 >= 0x41)
  {
    v14 = 0;
    v15 = ((unint64_t)v24 + 63) >> 6;
    do
    {
      if (v15-- < 1)
        break;
      v17 = v23[v15];
      v14 += __clz(v17);
    }
    while (!v17);
    v18 = v24 | 0xFFFFFFC0;
    if ((v24 & 0x3F) == 0)
      v18 = 0;
    if (v24 - v14 - v18 > 0x40)
      goto LABEL_15;
    v13 = (_QWORD *)*v23;
  }
  if (!v13)
  {
LABEL_19:
    p_src = &__src;
    goto LABEL_24;
  }
LABEL_15:
  if (sub_1C4DA92C4((llvm::APInt *)this, 0) && sub_1C4DA92C4((llvm::APInt *)a3, 0)
    || sub_1C4DA9220((llvm::APInt *)this, 0) && (sub_1C4DA9220((llvm::APInt *)a3, 0) & 1) != 0)
  {
    goto LABEL_19;
  }
  v22 = v26;
  if (v26 > 0x40)
  {
    v20 = (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8;
    v21 = (void *)operator new[]();
    memcpy(v21, __src, v20);
  }
  else
  {
    v21 = __src;
  }
  p_src = &v21;
  llvm::APInt::operator-=((uint64_t)&v21, 1uLL);
LABEL_24:
  *(_DWORD *)(a1 + 8) = *((_DWORD *)p_src + 2);
  *(_QWORD *)a1 = *p_src;
  *((_DWORD *)p_src + 2) = 0;
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v26 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

void llvm::DependenceInfo::weakZeroSrcSIVtest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_BYTE *)(a7 + 43) = 0;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), a3, a4);
  __asm { BR              X11 }
}

void sub_1C4E10A60()
{
  JUMPOUT(0x1C4E10A4CLL);
}

void sub_1C4E10A6C()
{
  JUMPOUT(0x1C4E10A64);
}

uint64_t sub_1C4E10A74(llvm::ScalarEvolution *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  const llvm::SCEV *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t Constant;
  uint64_t result;
  uint64_t v38;

  Constant = llvm::ScalarEvolution::getConstant(a1, **(llvm::Type ***)(v26 + 32), 0, 0);
  *(_DWORD *)v34 = 3;
  *(_QWORD *)(v34 + 16) = Constant;
  *(_QWORD *)(v34 + 24) = v28;
  *(_QWORD *)(v34 + 32) = v30;
  *(_QWORD *)(v34 + 40) = v31;
  result = llvm::DependenceInfo::isKnownPredicate(v29, 0x20u, v33, v32);
  if ((_DWORD)result)
  {
    result = 0;
    if (v35 < *(_DWORD *)(v29 + 32))
    {
      v38 = 16 * v35;
      *(_BYTE *)(*(_QWORD *)(v27 + 48) + v38) &= ~1u;
      *(_BYTE *)(*(_QWORD *)(v27 + 48) + v38) |= 0x10u;
    }
  }
  else if (v28 && !*((_WORD *)v28 + 12))
  {
    if (llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v29 + 8), v28))
      llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v29 + 8), (uint64_t)v28);
    if (llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v29 + 8), v28))
      llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v29 + 8), v30);
    __asm { BR              X11 }
  }
  return result;
}

BOOL sub_1C4E10CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int64_t v4;
  unint64_t v6;
  unsigned int v7;
  _BOOL8 v8;
  _QWORD *v10;
  unsigned int v11;

  llvm::APInt::srem((llvm::APInt *)(a1 + 24), (const void **)(a2 + 24), (llvm::APInt *)&v10);
  if (v11 >= 0x41)
  {
    v3 = 0;
    v4 = ((unint64_t)v11 + 63) >> 6;
    do
    {
      if (v4-- < 1)
        break;
      v6 = v10[v4];
      v3 += __clz(v6);
    }
    while (!v6);
    v7 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0)
      v7 = 0;
    if (v11 - v3 - v7 > 0x40)
    {
      v8 = 0;
      v2 = 0;
      if (!v10)
        return v2;
    }
    else
    {
      v8 = *v10 == 0;
    }
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    return v8;
  }
  return v10 == 0;
}

void llvm::DependenceInfo::weakZeroDstSIVtest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_BYTE *)(a7 + 43) = 0;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), a4, a3);
  __asm { BR              X11 }
}

void sub_1C4E10E34()
{
  JUMPOUT(0x1C4E10E20);
}

void sub_1C4E10E40()
{
  JUMPOUT(0x1C4E10E38);
}

uint64_t sub_1C4E10E48(llvm::ScalarEvolution *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  const llvm::SCEV *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t Constant;
  uint64_t result;
  uint64_t v38;

  Constant = llvm::ScalarEvolution::getConstant(a1, **(llvm::Type ***)(v26 + 32), 0, 0);
  *(_DWORD *)v34 = 3;
  *(_QWORD *)(v34 + 16) = v28;
  *(_QWORD *)(v34 + 24) = Constant;
  *(_QWORD *)(v34 + 32) = v30;
  *(_QWORD *)(v34 + 40) = v31;
  result = llvm::DependenceInfo::isKnownPredicate(v29, 0x20u, v33, v32);
  if ((_DWORD)result)
  {
    result = 0;
    if (v35 < *(_DWORD *)(v29 + 32))
    {
      v38 = 16 * v35;
      *(_BYTE *)(*(_QWORD *)(v27 + 48) + v38) &= ~4u;
      *(_BYTE *)(*(_QWORD *)(v27 + 48) + v38) |= 0x10u;
    }
  }
  else if (v28 && !*((_WORD *)v28 + 12))
  {
    if (llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v29 + 8), v28))
      llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v29 + 8), (uint64_t)v28);
    if (llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v29 + 8), v28))
      llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(v29 + 8), v30);
    __asm { BR              X11 }
  }
  return result;
}

uint64_t llvm::DependenceInfo::exactRDIVtest(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::SCEV *a5, const llvm::Loop *a6, const llvm::Loop *a7, llvm::FullDependence *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::SCEV *v13;
  const llvm::SCEV *v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  size_t v28;
  unint64_t v30;
  void *__dst;
  int v32;
  void *v33;
  unsigned int v34;
  const void *v35;
  unsigned int v36;
  const void *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)a8 + 43) = 0;
  llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), (uint64_t)a5, (uint64_t)a4);
  v11 = 0;
  if (*(_WORD *)(v10 + 24))
    v12 = 0;
  else
    v12 = v10;
  if (*((_WORD *)a2 + 12))
    v13 = 0;
  else
    v13 = a2;
  if (*((_WORD *)a3 + 12))
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = v13 == 0;
  else
    v15 = 1;
  if (!v15 && v14 != 0)
  {
    v17 = v10;
    v44 = 1;
    v43 = 0;
    v42 = 1;
    v41 = 0;
    v40 = 1;
    v39 = 0;
    v18 = *((_QWORD *)v13 + 4);
    v19 = *(unsigned int *)(v18 + 32);
    v38 = v19;
    if (v19 > 0x40)
    {
      v20 = (void *)operator new[]();
      memcpy(v20, *(const void **)(v18 + 24), ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v20 = *(void **)(v18 + 24);
    }
    v37 = v20;
    v21 = *((_QWORD *)v14 + 4);
    v22 = *(unsigned int *)(v21 + 32);
    v36 = v22;
    if (v22 > 0x40)
    {
      v24 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      v23 = (void *)operator new[]();
      memcpy(v23, *(const void **)(v21 + 24), v24);
    }
    else
    {
      v23 = *(void **)(v21 + 24);
    }
    v35 = v23;
    v25 = *(_QWORD *)(v12 + 32);
    v26 = *(unsigned int *)(v25 + 32);
    v34 = v26;
    if (v26 > 0x40)
    {
      v28 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
      v27 = (void *)operator new[]();
      memcpy(v27, *(const void **)(v25 + 24), v28);
    }
    else
    {
      v27 = *(void **)(v25 + 24);
    }
    v33 = v27;
    if (!sub_1C4E0F8CC(v19, &v37, &v35, (llvm::APInt *)&v33, (uint64_t)&v43, (uint64_t)&v41, (uint64_t)&v39))
    {
      v32 = v19;
      if (v19 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 1, 1);
      }
      else
      {
        v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
        if (!(_DWORD)v19)
          LOBYTE(v30) = 0;
        __dst = (void *)(v30 & 1);
      }
      __asm { BR              X11 }
    }
    v11 = 1;
    if (v34 >= 0x41 && v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    if (v36 >= 0x41 && v35)
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    if (v38 >= 0x41 && v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    if (v42 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    if (v44 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  }
  return v11;
}

void llvm::DependenceInfo::gcdMIVtest(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_1C4E12638()
{
  JUMPOUT(0x1C4E12624);
}

void sub_1C4E12644()
{
  JUMPOUT(0x1C4E1263CLL);
}

uint64_t sub_1C4E1264C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned int v11;
  unsigned int IndexTypeSizeInBits;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  unsigned int v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  const void *v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  int64_t v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  _QWORD *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t i;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  int64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  BOOL v104;
  BOOL v105;
  uint64_t v106;
  unsigned int v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  unsigned int v113;
  void *v114;
  uint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  int v118;
  int64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v126;
  unsigned int v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  int64_t v144;
  unint64_t v145;
  int v146;
  _QWORD *v147;
  int v148;
  int64_t v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  size_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  void *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  void *v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  void *v177;
  unsigned int v178;
  _QWORD *v179;
  unsigned int v180;
  _QWORD *v181;
  unsigned int v182;
  void *v183;
  unsigned int v184;
  void *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  void *v189;
  unsigned int v190;
  _QWORD *v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;

  v7 = *(uint64_t **)(v1 + 32);
  v8 = *v7;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 40) + 272;
  if (*(_BYTE *)(*v7 + 8) == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v9, v8);
  }
  else
  {
    sub_1C4768AD0(v9, v8);
    IndexTypeSizeInBits = v11;
    if ((_DWORD)v10 == 1)
  }
  *(_DWORD *)(v6 - 160) = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)(v6 - 168), 0, 0);
  else
    *(_QWORD *)(v6 - 168) = 0;
  v13 = v3;
  if (v3)
  {
    v13 = v3;
    if (*(_WORD *)(v3 + 24) == 7)
    {
      v14 = (void *)(v6 - 136);
      v13 = v3;
      while (1)
      {
        v15 = *(_QWORD *)(v13 + 40);
        if (v15 == 2)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8);
        }
        else
        {
          v164 = *(uint64_t **)(v4 + 8);
          v29 = *(_QWORD *)(v13 + 32);
          *(_QWORD *)(v6 - 152) = v14;
          *(_QWORD *)(v6 - 144) = 0x300000000;
          v30 = 8 * v15 - 8;
          if ((unint64_t)v30 >= 0x19)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v6 - 152, v6 - 136, v30 >> 3, 8);
            v31 = *(_DWORD *)(v6 - 144);
          }
          else
          {
            v31 = 0;
          }
          if (v15 != 1)
          {
            memcpy((void *)(*(_QWORD *)(v6 - 152) + 8 * v31), (const void *)(v29 + 8), 8 * v15 - 8);
            v31 = *(_DWORD *)(v6 - 144);
          }
          *(_DWORD *)(v6 - 144) = v31 + ((unint64_t)v30 >> 3);
          v16 = sub_1C618AB20(v164, v6 - 152, *(uint64_t ***)(v13 + 48));
          v32 = *(void **)(v6 - 152);
          if (v32 != v14)
            free(v32);
        }
        v17 = *(unsigned __int16 *)(v16 + 24);
        if (!v16 || v17 != 0)
        {
          if (v17 != 5)
            break;
          v16 = **(_QWORD **)(v16 + 32);
          if (!v16 || *(_WORD *)(v16 + 24) != 0)
            break;
        }
        v20 = *(_QWORD *)(v16 + 32);
        v21 = *(_DWORD *)(v20 + 32);
        *(_DWORD *)(v6 - 144) = v21;
        if (v21 > 0x40)
        {
          v22 = (void *)operator new[]();
          *(_QWORD *)(v6 - 152) = v22;
          memcpy(v22, *(const void **)(v20 + 24), (((unint64_t)*(unsigned int *)(v6 - 144) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v6 - 152) = *(_QWORD *)(v20 + 24);
        }
        v23 = *(_DWORD *)(v6 - 160);
        *(_DWORD *)(v6 - 192) = v23;
        if (v23 > 0x40)
        {
          v24 = (void *)operator new[]();
          *(_QWORD *)(v6 - 200) = v24;
          memcpy(v24, *(const void **)(v6 - 168), (((unint64_t)*(unsigned int *)(v6 - 192) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v6 - 200) = *(_QWORD *)(v6 - 168);
        }
        sub_1C4DA6CE8((const void **)(v6 - 152), v6 - 216);
        llvm::APIntOps::GreatestCommonDivisor(v6 - 200, v6 - 216, v6 - 184);
        if (*(_DWORD *)(v6 - 160) >= 0x41u)
        {
          v25 = *(_QWORD *)(v6 - 168);
          if (v25)
            MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
        }
        *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 184);
        *(_DWORD *)(v6 - 160) = *(_DWORD *)(v6 - 176);
        *(_DWORD *)(v6 - 176) = 0;
        if (*(_DWORD *)(v6 - 208) >= 0x41u)
        {
          v26 = *(_QWORD *)(v6 - 216);
          if (v26)
            MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
        }
        if (*(_DWORD *)(v6 - 192) >= 0x41u)
        {
          v27 = *(_QWORD *)(v6 - 200);
          if (v27)
            MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
        }
        v13 = **(_QWORD **)(v13 + 32);
        if (*(_DWORD *)(v6 - 144) >= 0x41u)
        {
          v28 = *(_QWORD *)(v6 - 152);
          if (v28)
            MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
        }
        if (!v13 || *(_WORD *)(v13 + 24) != 7)
          goto LABEL_49;
      }
LABEL_133:
      v68 = 0;
      goto LABEL_179;
    }
  }
LABEL_49:
  v33 = v5;
  if (v5)
  {
    v33 = v5;
    if (*(_WORD *)(v5 + 24) == 7)
    {
      v34 = (void *)(v6 - 136);
      v33 = v5;
      do
      {
        v35 = *(_QWORD *)(v33 + 40);
        if (v35 == 2)
        {
          v36 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 8);
        }
        else
        {
          v162 = *(_QWORD *)(v33 + 32);
          v165 = *(uint64_t **)(v4 + 8);
          *(_QWORD *)(v6 - 152) = v34;
          *(_QWORD *)(v6 - 144) = 0x300000000;
          v48 = 8 * v35 - 8;
          if ((unint64_t)v48 >= 0x19)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v6 - 152, v6 - 136, v48 >> 3, 8);
            v49 = *(_DWORD *)(v6 - 144);
          }
          else
          {
            v49 = 0;
          }
          if (v35 != 1)
          {
            memcpy((void *)(*(_QWORD *)(v6 - 152) + 8 * v49), (const void *)(v162 + 8), 8 * v35 - 8);
            v49 = *(_DWORD *)(v6 - 144);
          }
          *(_DWORD *)(v6 - 144) = v49 + ((unint64_t)v48 >> 3);
          v36 = sub_1C618AB20(v165, v6 - 152, *(uint64_t ***)(v33 + 48));
          v50 = *(void **)(v6 - 152);
          if (v50 != v34)
            free(v50);
        }
        v37 = *(unsigned __int16 *)(v36 + 24);
        if (!v36 || v37 != 0)
        {
          if (v37 != 5)
            goto LABEL_133;
          v36 = **(_QWORD **)(v36 + 32);
          if (!v36 || *(_WORD *)(v36 + 24) != 0)
            goto LABEL_133;
        }
        v40 = *(_QWORD *)(v36 + 32);
        v41 = *(_DWORD *)(v40 + 32);
        *(_DWORD *)(v6 - 144) = v41;
        if (v41 > 0x40)
        {
          v42 = (void *)operator new[]();
          *(_QWORD *)(v6 - 152) = v42;
          memcpy(v42, *(const void **)(v40 + 24), (((unint64_t)*(unsigned int *)(v6 - 144) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v6 - 152) = *(_QWORD *)(v40 + 24);
        }
        v43 = *(_DWORD *)(v6 - 160);
        *(_DWORD *)(v6 - 224) = v43;
        if (v43 > 0x40)
        {
          v44 = (void *)operator new[]();
          *(_QWORD *)(v6 - 232) = v44;
          memcpy(v44, *(const void **)(v6 - 168), (((unint64_t)*(unsigned int *)(v6 - 224) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v6 - 232) = *(_QWORD *)(v6 - 168);
        }
        sub_1C4DA6CE8((const void **)(v6 - 152), (uint64_t)&v193);
        llvm::APIntOps::GreatestCommonDivisor(v6 - 232, (uint64_t)&v193, v6 - 184);
        if (*(_DWORD *)(v6 - 160) >= 0x41u)
        {
          v45 = *(_QWORD *)(v6 - 168);
          if (v45)
            MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
        }
        *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 184);
        *(_DWORD *)(v6 - 160) = *(_DWORD *)(v6 - 176);
        *(_DWORD *)(v6 - 176) = 0;
        if (v194 >= 0x41 && v193)
          MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
        if (*(_DWORD *)(v6 - 224) >= 0x41u)
        {
          v46 = *(_QWORD *)(v6 - 232);
          if (v46)
            MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
        }
        v33 = **(_QWORD **)(v33 + 32);
        if (*(_DWORD *)(v6 - 144) >= 0x41u)
        {
          v47 = *(_QWORD *)(v6 - 152);
          if (v47)
            MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
        }
      }
      while (v33 && *(_WORD *)(v33 + 24) == 7);
    }
  }
  *(_DWORD *)(v6 - 176) = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)(v6 - 184), 0, 0);
  else
    *(_QWORD *)(v6 - 184) = 0;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(v4 + 8), v33, v13);
  if (*(_WORD *)(v51 + 24))
    v52 = 0;
  else
    v52 = v51;
  if (!v51)
    goto LABEL_129;
  if (*(_WORD *)(v51 + 24) != 4)
    goto LABEL_129;
  v53 = v51;
  if (!*(_DWORD *)(v51 + 40))
    goto LABEL_129;
  v54 = 0;
  v55 = *(unsigned int *)(v6 - 176);
  v56 = 8 * *(unsigned int *)(v51 + 40);
  while (1)
  {
    v57 = *(_QWORD *)(*(_QWORD *)(v53 + 32) + v54);
    if (*(_WORD *)(v57 + 24))
      break;
    v52 = *(_QWORD *)(*(_QWORD *)(v53 + 32) + v54);
LABEL_127:
    v54 += 8;
    if (v56 == v54)
    {
      *(_DWORD *)(v6 - 176) = v55;
LABEL_129:
      if (!v52)
      {
        v68 = 0;
LABEL_175:
        v55 = *(unsigned int *)(v6 - 176);
        goto LABEL_176;
      }
      v65 = *(_QWORD *)(v52 + 32);
      v66 = *(_DWORD *)(v65 + 32);
      v192 = v66;
      if (v66 > 0x40)
      {
        v69 = (_QWORD *)operator new[]();
        v191 = v69;
        v70 = *(const void **)(v65 + 24);
        v67 = v192;
        v71 = v192 + 63;
        memcpy(v69, v70, (v71 >> 3) & 0x3FFFFFF8);
        if (v67 >= 0x41)
        {
          v72 = 0;
          v73 = v71 >> 6;
          do
          {
            v74 = v73-- < 1;
            if (v74)
              break;
            v75 = v69[v73];
            v72 += __clz(v75);
          }
          while (!v75);
          v76 = v67 | 0xFFFFFFC0;
          if ((v67 & 0x3F) == 0)
            v76 = 0;
          if (v67 - v72 - v76 <= 0x40 && !*v69)
            goto LABEL_132;
        }
      }
      else
      {
        v191 = *(_QWORD **)(v65 + 24);
        v67 = v66;
        if (!v191)
        {
LABEL_132:
          v68 = 0;
LABEL_172:
          if (v67 >= 0x41 && v191)
            MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
          goto LABEL_175;
        }
      }
      v186 = *(_DWORD *)(v6 - 160);
      if (v186 > 0x40)
      {
        v185 = (void *)operator new[]();
        memcpy(v185, *(const void **)(v6 - 168), (((unint64_t)v186 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v185 = *(void **)(v6 - 168);
      }
      v184 = *(_DWORD *)(v6 - 176);
      if (v184 > 0x40)
      {
        v183 = (void *)operator new[]();
        memcpy(v183, *(const void **)(v6 - 184), (((unint64_t)v184 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v183 = *(void **)(v6 - 184);
      }
      llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v185, (uint64_t)&v183, v6 - 152);
      if (*(_DWORD *)(v6 - 160) >= 0x41u)
      {
        v77 = *(_QWORD *)(v6 - 168);
        if (v77)
          MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
      }
      *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 152);
      *(_DWORD *)(v6 - 160) = *(_DWORD *)(v6 - 144);
      *(_DWORD *)(v6 - 144) = 0;
      if (v184 >= 0x41 && v183)
        MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
      if (v186 >= 0x41 && v185)
        MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
      llvm::APInt::srem((llvm::APInt *)&v191, (const void **)(v6 - 168), (llvm::APInt *)&v181);
      v78 = v181;
      if (v182 >= 0x41)
      {
        v79 = 0;
        v80 = ((unint64_t)v182 + 63) >> 6;
        do
        {
          v74 = v80-- < 1;
          if (v74)
            break;
          v81 = v181[v80];
          v79 += __clz(v81);
        }
        while (!v81);
        v82 = v182 | 0xFFFFFFC0;
        if ((v182 & 0x3F) == 0)
          v82 = 0;
        if (v182 - v79 - v82 > 0x40)
          goto LABEL_167;
        v78 = (_QWORD *)*v181;
      }
      if (v78)
      {
LABEL_167:
        v68 = 1;
        goto LABEL_168;
      }
      v68 = 0;
      if (!v3 || *(_WORD *)(v3 + 24) != 7)
      {
LABEL_168:
        if (v182 >= 0x41 && v181)
          MEMORY[0x1CAA32F9C](v181, 0x1000C8000313F17);
        v67 = v192;
        goto LABEL_172;
      }
      v163 = v6 - 136;
      v86 = v3;
LABEL_187:
      v87 = *(_QWORD **)(v86 + 48);
      v88 = *(_DWORD *)(v6 - 176);
      v166 = **(_QWORD **)(v86 + 32);
      if (*(_DWORD *)(v6 - 160) > 0x40u || v88 > 0x40)
      {
        llvm::APInt::reallocate(v6 - 168, v88);
        v89 = *(unsigned int *)(v6 - 160);
        if (v89 <= 0x40)
          *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 184);
        else
          memcpy(*(void **)(v6 - 168), *(const void **)(v6 - 184), ((unint64_t)(v89 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 184);
        *(_DWORD *)(v6 - 160) = v88;
      }
      v90 = *(uint64_t **)(v4 + 8);
      v91 = *(_QWORD *)(v86 + 40);
      if (v91 == 2)
      {
        v92 = *(_QWORD *)(*(_QWORD *)(v86 + 32) + 8);
      }
      else
      {
        v154 = *(_QWORD *)(v86 + 32);
        *(_QWORD *)(v6 - 152) = v163;
        *(_QWORD *)(v6 - 144) = 0x300000000;
        v155 = 8 * v91 - 8;
        if ((unint64_t)v155 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6 - 152, v163, v155 >> 3, 8);
          v156 = *(_DWORD *)(v6 - 144);
        }
        else
        {
          v156 = 0;
        }
        if (v91 != 1)
        {
          memcpy((void *)(*(_QWORD *)(v6 - 152) + 8 * v156), (const void *)(v154 + 8), 8 * v91 - 8);
          v156 = *(_DWORD *)(v6 - 144);
        }
        *(_DWORD *)(v6 - 144) = v156 + ((unint64_t)v155 >> 3);
        v92 = sub_1C618AB20(v90, v6 - 152, *(uint64_t ***)(v86 + 48));
        v157 = *(void **)(v6 - 152);
        if (v157 != (void *)v163)
          free(v157);
        v90 = *(uint64_t **)(v4 + 8);
      }
      llvm::ScalarEvolution::getMinusSCEV((uint64_t)v90, v92, v92);
      v94 = v93;
      for (i = v3; ; i = **(_QWORD **)(i + 32))
      {
        v96 = *(unsigned int *)(v6 - 160);
        v97 = *(_QWORD **)(v6 - 168);
        if (v96 >= 0x41)
        {
          v98 = 0;
          v99 = (unint64_t)(v96 + 63) >> 6;
          do
          {
            v74 = v99-- < 1;
            if (v74)
              break;
            v100 = v97[v99];
            v98 += __clz(v100);
          }
          while (!v100);
          v101 = v96 | 0xFFFFFFC0;
          if ((v96 & 0x3F) == 0)
            v101 = 0;
          if ((v96 - v98 - v101) > 0x40)
            goto LABEL_204;
          v97 = (_QWORD *)*v97;
        }
        if (v97 == (_QWORD *)1)
          goto LABEL_245;
LABEL_204:
        if (*(_WORD *)(i + 24) != 7)
        {
LABEL_245:
          v115 = v5;
          while (1)
          {
            if (v96 > 0x40)
            {
              v118 = 0;
              v119 = ((unint64_t)v96 + 63) >> 6;
              v117 = *(_QWORD **)(v6 - 168);
              do
              {
                v74 = v119-- < 1;
                if (v74)
                  break;
                v120 = v117[v119];
                v118 += __clz(v120);
              }
              while (!v120);
              v121 = v96 | 0xFFFFFFC0;
              if ((v96 & 0x3F) == 0)
                v121 = 0;
              v116 = *(uint64_t **)(v4 + 8);
              if ((v96 - v118 - v121) > 0x40)
                goto LABEL_255;
            }
            else
            {
              v116 = *(uint64_t **)(v4 + 8);
              v117 = (_QWORD *)(v6 - 168);
            }
            if (*v117 == 1)
              goto LABEL_297;
LABEL_255:
            if (*(_WORD *)(v115 + 24) != 7)
            {
LABEL_297:
              llvm::ScalarEvolution::getMinusSCEV((uint64_t)v116, v92, v94);
              if (v134 && !*(_WORD *)(v134 + 24))
              {
                v135 = v166;
                goto LABEL_300;
              }
              v135 = v166;
              if (*(_WORD *)(v134 + 24) == 5)
              {
                v134 = **(_QWORD **)(v134 + 32);
                if (v134 && *(_WORD *)(v134 + 24) == 0)
                {
LABEL_300:
                  v136 = *(_QWORD *)(v134 + 32);
                  v137 = *(_DWORD *)(v136 + 32);
                  *(_DWORD *)(v6 - 144) = v137;
                  if (v137 > 0x40)
                  {
                    v139 = (void *)operator new[]();
                    *(_QWORD *)(v6 - 152) = v139;
                    memcpy(v139, *(const void **)(v136 + 24), (((unint64_t)*(unsigned int *)(v6 - 144) + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    *(_QWORD *)(v6 - 152) = *(_QWORD *)(v136 + 24);
                  }
                  v170 = *(_DWORD *)(v6 - 160);
                  if (v170 > 0x40)
                  {
                    v169 = (void *)operator new[]();
                    memcpy(v169, *(const void **)(v6 - 168), (((unint64_t)v170 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v169 = *(void **)(v6 - 168);
                  }
                  sub_1C4DA6CE8((const void **)(v6 - 152), (uint64_t)&v167);
                  llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v169, (uint64_t)&v167, (uint64_t)&v179);
                  if (*(_DWORD *)(v6 - 160) >= 0x41u)
                  {
                    v140 = *(_QWORD *)(v6 - 168);
                    if (v140)
                      MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
                  }
                  *(_QWORD *)(v6 - 168) = v179;
                  *(_DWORD *)(v6 - 160) = v180;
                  v180 = 0;
                  if (v168 >= 0x41 && v167)
                    MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
                  if (v170 >= 0x41 && v169)
                    MEMORY[0x1CAA32F9C](v169, 0x1000C8000313F17);
                  v141 = *(unsigned int *)(v6 - 160);
                  v142 = *(_QWORD **)(v6 - 168);
                  if (v141 < 0x41)
                  {
LABEL_329:
                    if (v142)
                      goto LABEL_330;
                  }
                  else
                  {
                    v143 = 0;
                    v144 = (unint64_t)(v141 + 63) >> 6;
                    do
                    {
                      v74 = v144-- < 1;
                      if (v74)
                        break;
                      v145 = v142[v144];
                      v143 += __clz(v145);
                    }
                    while (!v145);
                    v146 = v141 | 0xFFFFFFC0;
                    if ((v141 & 0x3F) == 0)
                      v146 = 0;
                    if ((v141 - v143 - v146) <= 0x40)
                    {
                      v142 = (_QWORD *)*v142;
                      goto LABEL_329;
                    }
LABEL_330:
                    llvm::APInt::srem((llvm::APInt *)&v191, (const void **)(v6 - 168), (llvm::APInt *)&v179);
                    if (v182 >= 0x41 && v181)
                      MEMORY[0x1CAA32F9C](v181, 0x1000C8000313F17);
                    v147 = v179;
                    v181 = v179;
                    v182 = v180;
                    if (v180 < 0x41)
                    {
LABEL_341:
                      if (v147)
                        goto LABEL_342;
                    }
                    else
                    {
                      v148 = 0;
                      v149 = ((unint64_t)v180 + 63) >> 6;
                      do
                      {
                        v74 = v149-- < 1;
                        if (v74)
                          break;
                        v150 = v179[v149];
                        v148 += __clz(v150);
                      }
                      while (!v150);
                      v151 = v180 | 0xFFFFFFC0;
                      if ((v180 & 0x3F) == 0)
                        v151 = 0;
                      if (v180 - v148 - v151 <= 0x40)
                      {
                        v147 = (_QWORD *)*v179;
                        goto LABEL_341;
                      }
LABEL_342:
                      v152 = -1;
                      do
                      {
                        v87 = (_QWORD *)*v87;
                        ++v152;
                      }
                      while (v87);
                      *(_BYTE *)(*(_QWORD *)(v2 + 48) + 16 * v152) &= ~2u;
                    }
                  }
                  if (*(_DWORD *)(v6 - 144) >= 0x41u)
                  {
                    v153 = *(_QWORD *)(v6 - 152);
                    if (v153)
                      MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
                  }
                }
              }
              v68 = 0;
              if (!v135)
                goto LABEL_168;
              v86 = v135;
              if (*(_WORD *)(v135 + 24) != 7)
                goto LABEL_168;
              goto LABEL_187;
            }
            v122 = *(_QWORD *)(v115 + 40);
            if (v122 == 2)
            {
              v123 = *(_QWORD *)(*(_QWORD *)(v115 + 32) + 8);
            }
            else
            {
              v131 = *(_QWORD *)(v115 + 32);
              *(_QWORD *)(v6 - 152) = v163;
              *(_QWORD *)(v6 - 144) = 0x300000000;
              v159 = v131;
              v161 = 8 * v122 - 8;
              if (v161 >= 0x19)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v6 - 152, v163, (uint64_t)v161 >> 3, 8);
                v132 = *(_DWORD *)(v6 - 144);
              }
              else
              {
                v132 = 0;
              }
              if (v122 != 1)
              {
                memcpy((void *)(*(_QWORD *)(v6 - 152) + 8 * v132), (const void *)(v159 + 8), v161);
                v132 = *(_DWORD *)(v6 - 144);
              }
              *(_DWORD *)(v6 - 144) = v132 + (v161 >> 3);
              v123 = sub_1C618AB20(v116, v6 - 152, *(uint64_t ***)(v115 + 48));
              v133 = *(void **)(v6 - 152);
              if (v133 != (void *)v163)
                free(v133);
            }
            if (v87 == *(_QWORD **)(v115 + 48))
            {
              v94 = v123;
            }
            else
            {
              if (*(_WORD *)(v123 + 24))
                v124 = 1;
              else
                v124 = v123 == 0;
              if (v124)
              {
                if (*(_WORD *)(v123 + 24) != 5)
                  goto LABEL_360;
                v123 = **(_QWORD **)(v123 + 32);
                if (!v123 || *(_WORD *)(v123 + 24) != 0)
                  goto LABEL_360;
              }
              v126 = *(_QWORD *)(v123 + 32);
              v127 = *(_DWORD *)(v126 + 32);
              *(_DWORD *)(v6 - 144) = v127;
              if (v127 > 0x40)
              {
                v128 = (void *)operator new[]();
                *(_QWORD *)(v6 - 152) = v128;
                memcpy(v128, *(const void **)(v126 + 24), (((unint64_t)*(unsigned int *)(v6 - 144) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                *(_QWORD *)(v6 - 152) = *(_QWORD *)(v126 + 24);
              }
              v174 = *(_DWORD *)(v6 - 160);
              if (v174 > 0x40)
              {
                v173 = (void *)operator new[]();
                memcpy(v173, *(const void **)(v6 - 168), (((unint64_t)v174 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v173 = *(void **)(v6 - 168);
              }
              sub_1C4DA6CE8((const void **)(v6 - 152), (uint64_t)&v171);
              llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v173, (uint64_t)&v171, (uint64_t)&v179);
              if (*(_DWORD *)(v6 - 160) >= 0x41u)
              {
                v129 = *(_QWORD *)(v6 - 168);
                if (v129)
                  MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
              }
              *(_QWORD *)(v6 - 168) = v179;
              *(_DWORD *)(v6 - 160) = v180;
              v180 = 0;
              if (v172 >= 0x41 && v171)
                MEMORY[0x1CAA32F9C](v171, 0x1000C8000313F17);
              if (v174 >= 0x41 && v173)
                MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
              if (*(_DWORD *)(v6 - 144) >= 0x41u)
              {
                v130 = *(_QWORD *)(v6 - 152);
                if (v130)
                  MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
              }
            }
            v115 = **(_QWORD **)(v115 + 32);
            LODWORD(v96) = *(_DWORD *)(v6 - 160);
          }
        }
        v102 = *(_QWORD *)(i + 40);
        if (v102 == 2)
        {
          v103 = *(_QWORD *)(*(_QWORD *)(i + 32) + 8);
        }
        else
        {
          v158 = *(_QWORD *)(i + 32);
          v160 = *(uint64_t **)(v4 + 8);
          *(_QWORD *)(v6 - 152) = v163;
          *(_QWORD *)(v6 - 144) = 0x300000000;
          v111 = 8 * v102 - 8;
          v112 = v111;
          if ((unint64_t)v111 >= 0x19)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v6 - 152, v163, v111 >> 3, 8);
            v113 = *(_DWORD *)(v6 - 144);
          }
          else
          {
            v113 = 0;
          }
          if (v102 != 1)
          {
            memcpy((void *)(*(_QWORD *)(v6 - 152) + 8 * v113), (const void *)(v158 + 8), v112);
            v113 = *(_DWORD *)(v6 - 144);
          }
          *(_DWORD *)(v6 - 144) = v113 + (v112 >> 3);
          v103 = sub_1C618AB20(v160, v6 - 152, *(uint64_t ***)(i + 48));
          v114 = *(void **)(v6 - 152);
          if (v114 != (void *)v163)
            free(v114);
        }
        if (v87 != *(_QWORD **)(i + 48))
        {
          if (*(_WORD *)(v103 + 24))
            v104 = 1;
          else
            v104 = v103 == 0;
          if (v104)
          {
            if (*(_WORD *)(v103 + 24) != 5
              || ((v103 = **(_QWORD **)(v103 + 32)) != 0 ? (v105 = *(unsigned __int16 *)(v103 + 24) == 0) : (v105 = 0),
                  !v105))
            {
LABEL_360:
              v68 = 0;
              goto LABEL_168;
            }
          }
          v106 = *(_QWORD *)(v103 + 32);
          v107 = *(_DWORD *)(v106 + 32);
          *(_DWORD *)(v6 - 144) = v107;
          if (v107 > 0x40)
          {
            v108 = (void *)operator new[]();
            *(_QWORD *)(v6 - 152) = v108;
            memcpy(v108, *(const void **)(v106 + 24), (((unint64_t)*(unsigned int *)(v6 - 144) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)(v6 - 152) = *(_QWORD *)(v106 + 24);
          }
          v178 = *(_DWORD *)(v6 - 160);
          if (v178 > 0x40)
          {
            v177 = (void *)operator new[]();
            memcpy(v177, *(const void **)(v6 - 168), (((unint64_t)v178 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v177 = *(void **)(v6 - 168);
          }
          sub_1C4DA6CE8((const void **)(v6 - 152), (uint64_t)&v175);
          llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v177, (uint64_t)&v175, (uint64_t)&v179);
          if (*(_DWORD *)(v6 - 160) >= 0x41u)
          {
            v109 = *(_QWORD *)(v6 - 168);
            if (v109)
              MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
          }
          *(_QWORD *)(v6 - 168) = v179;
          *(_DWORD *)(v6 - 160) = v180;
          v180 = 0;
          if (v176 >= 0x41 && v175)
            MEMORY[0x1CAA32F9C](v175, 0x1000C8000313F17);
          if (v178 >= 0x41 && v177)
            MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
          if (*(_DWORD *)(v6 - 144) >= 0x41u)
          {
            v110 = *(_QWORD *)(v6 - 152);
            if (v110)
              MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
          }
        }
      }
    }
  }
  if (*(_WORD *)(v57 + 24) == 5)
  {
    v58 = **(_QWORD **)(v57 + 32);
    if (v58 && *(_WORD *)(v58 + 24) == 0)
    {
      v60 = *(_QWORD *)(v58 + 32);
      v61 = *(_DWORD *)(v60 + 32);
      *(_DWORD *)(v6 - 144) = v61;
      if (v61 > 0x40)
      {
        v62 = (void *)operator new[]();
        *(_QWORD *)(v6 - 152) = v62;
        memcpy(v62, *(const void **)(v60 + 24), (((unint64_t)*(unsigned int *)(v6 - 144) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(v6 - 152) = *(_QWORD *)(v60 + 24);
      }
      v190 = v55;
      if (v55 > 0x40)
      {
        v189 = (void *)operator new[]();
        v63 = *(const void **)(v6 - 184);
        memcpy(v189, v63, (((unint64_t)v190 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v63 = *(const void **)(v6 - 184);
        v189 = (void *)v63;
      }
      sub_1C4DA6CE8((const void **)(v6 - 152), (uint64_t)&v187);
      llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v189, (uint64_t)&v187, (uint64_t)&v191);
      if (v55 >= 0x41 && v63)
        MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
      *(_QWORD *)(v6 - 184) = v191;
      v55 = v192;
      v192 = 0;
      if (v188 >= 0x41 && v187)
        MEMORY[0x1CAA32F9C](v187, 0x1000C8000313F17);
      if (v190 >= 0x41 && v189)
        MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
      if (*(_DWORD *)(v6 - 144) >= 0x41u)
      {
        v64 = *(_QWORD *)(v6 - 152);
        if (v64)
          MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
      }
      goto LABEL_127;
    }
  }
  v68 = 0;
LABEL_176:
  if (v55 >= 0x41)
  {
    v83 = *(_QWORD *)(v6 - 184);
    if (v83)
      MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  }
LABEL_179:
  if (*(_DWORD *)(v6 - 160) >= 0x41u)
  {
    v84 = *(_QWORD *)(v6 - 168);
    if (v84)
      MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
  }
  return v68;
}

uint64_t llvm::DependenceInfo::testMIV(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  char v10;

  *(_BYTE *)(a5 + 43) = 0;
  llvm::DependenceInfo::gcdMIVtest(a1, a2);
  if ((v10 & 1) != 0)
    return 1;
  else
    return llvm::DependenceInfo::banerjeeMIVtest(a1, a2, a3, a4, a5);
}

uint64_t llvm::DependenceInfo::banerjeeMIVtest(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  llvm::DependenceInfo::collectCoeffInfo(a1, a2);
  v10 = v9;
  v27 = 0;
  llvm::DependenceInfo::collectCoeffInfo(a1, a3);
  v12 = v11;
  v13 = operator new[]();
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), 0, 0);
  v15 = v14;
  if (*(_DWORD *)(a1 + 40))
  {
    v16 = 1;
    do
    {
      v17 = v16;
      v18 = *(_QWORD *)(v10 + 32 * v16 + 24);
      if (!v18)
        v18 = *(_QWORD *)(v12 + 32 * v17 + 24);
      v19 = v13 + 144 * v17;
      *(_QWORD *)v19 = v18;
      *(_WORD *)(v19 + 136) = 7;
      llvm::DependenceInfo::findBoundsALL(a1, v10, v12, v13, v17);
      v16 = v17 + 1;
    }
    while ((v17 + 1) <= *(_DWORD *)(a1 + 40));
  }
  if (llvm::DependenceInfo::testBounds(a1, 7, 0, v13, v15))
  {
    v26 = 0;
    v20 = 1;
    if (!llvm::DependenceInfo::exploreDirections(a1, 1u, v10, v12, v13, (_QWORD **)a4, &v26, v15))
      goto LABEL_8;
    v22 = *(_DWORD *)(a1 + 32);
    if (!v22)
    {
LABEL_19:
      v20 = 0;
      goto LABEL_8;
    }
    v23 = 1;
    while (1)
    {
      v24 = *a4;
      if ((*a4 & 1) != 0)
      {
        if (((1 << v23) & (v24 >> 1) & ~(-1 << (v24 >> 58))) != 0)
        {
LABEL_16:
          v25 = 16 * (v23 - 1);
          *(_BYTE *)(*(_QWORD *)(a5 + 48) + v25) = *(_BYTE *)(*(_QWORD *)(a5 + 48) + v25) & 0xF8 | *(_BYTE *)(*(_QWORD *)(a5 + 48) + v25) & *(_BYTE *)(v13 + 144 * v23 + 137) & 7;
          if ((*(_BYTE *)(*(_QWORD *)(a5 + 48) + v25) & 7) == 0)
            break;
          v22 = *(_DWORD *)(a1 + 32);
        }
      }
      else if ((*(_QWORD *)(*(_QWORD *)v24 + 8 * (v23 >> 6)) & (1 << v23)) != 0)
      {
        goto LABEL_16;
      }
      if (++v23 > v22)
        goto LABEL_19;
    }
  }
  v20 = 1;
LABEL_8:
  MEMORY[0x1CAA32F9C](v13, 0x1060C80B91147A2);
  MEMORY[0x1CAA32F9C](v10, 0x60C80902580DDLL);
  MEMORY[0x1CAA32F9C](v12, 0x60C80902580DDLL);
  return v20;
}

void llvm::DependenceInfo::collectCoeffInfo(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1C4E13F90()
{
  JUMPOUT(0x1C4E13F7CLL);
}

void sub_1C4E13F9C()
{
  JUMPOUT(0x1C4E13F94);
}

uint64_t sub_1C4E13FA4(llvm::ScalarEvolution *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t Constant;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE v25[144];

  Constant = llvm::ScalarEvolution::getConstant(a1, **(llvm::Type ***)(v1 + 32), 0, 0);
  result = operator new[]();
  v8 = result;
  v9 = *(_DWORD *)(v5 + 40);
  if (v9)
  {
    if ((v9 + 1) > 2)
      v10 = (v9 + 1);
    else
      v10 = 2;
    v11 = vdupq_n_s64(Constant);
    v12 = v10 - 1;
    v13 = (_QWORD *)(result + 56);
    do
    {
      *(int64x2_t *)(v13 - 3) = v11;
      *(v13 - 1) = Constant;
      *v13 = 0;
      v13 += 4;
      --v12;
    }
    while (v12);
  }
  if (v3 && *(_WORD *)(v3 + 24) == 7)
  {
    v14 = 0;
    v15 = *(_QWORD **)(v3 + 48);
    if ((v4 & 1) != 0)
    {
      do
      {
        v15 = (_QWORD *)*v15;
        ++v14;
      }
      while (v15);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)*v15;
        ++v14;
      }
      while (v15);
      v16 = *(_DWORD *)(v5 + 32);
      if (v14 > v16)
        v14 += *(_DWORD *)(v5 + 36) - v16;
    }
    v17 = *(uint64_t **)(v5 + 8);
    v18 = *(_QWORD *)(v3 + 40);
    if (v18 == 2)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
    }
    else
    {
      v22 = *(_QWORD *)(v3 + 32);
      v23 = v25;
      v24 = 0x300000000;
      v20 = 8 * v18 - 8;
      if ((unint64_t)v20 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v20 >> 3, 8);
        v21 = v24;
      }
      else
      {
        v21 = 0;
      }
      if (v18 != 1)
      {
        memcpy(&v23[8 * v21], (const void *)(v22 + 8), 8 * v18 - 8);
        v21 = v24;
      }
      LODWORD(v24) = v21 + ((unint64_t)v20 >> 3);
      v19 = sub_1C618AB20(v17, (uint64_t)&v23, *(uint64_t ***)(v3 + 48));
      if (v23 != v25)
        free(v23);
    }
    *(_QWORD *)(v8 + 32 * v14) = v19;
    __asm { BR              X10 }
  }
  *v2 = v3;
  return result;
}

BOOL llvm::DependenceInfo::testBounds(uint64_t a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t LowerBound;
  uint64_t UpperBound;
  _BOOL8 result;

  *(_BYTE *)(a4 + 144 * a3 + 136) = a2;
  LowerBound = llvm::DependenceInfo::getLowerBound(a1, a4);
  result = 0;
  if (!LowerBound || (llvm::DependenceInfo::isKnownPredicate(a1, 0x26u, LowerBound, a5) & 1) == 0)
  {
    UpperBound = llvm::DependenceInfo::getUpperBound(a1, a4);
    if (!UpperBound || (llvm::DependenceInfo::isKnownPredicate(a1, 0x26u, a5, UpperBound) & 1) == 0)
      return 1;
  }
  return result;
}

void llvm::DependenceInfo::getNegativePart(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1C4E143F0()
{
  JUMPOUT(0x1C4E143DCLL);
}

void sub_1C4E143FC()
{
  JUMPOUT(0x1C4E143F4);
}

uint64_t sub_1C4E14404()
{
  uint64_t v0;
  const llvm::SCEV *v1;
  llvm::ScalarEvolution *v2;
  const llvm::SCEV *Constant;

  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v2, **(llvm::Type ***)(v0 + 32), 0, 0);
  return llvm::ScalarEvolution::getSMinExpr(v2, v1, Constant);
}

void sub_1C4E14444()
{
  JUMPOUT(0x1C4E14418);
}

void llvm::DependenceInfo::getPositivePart(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1C4E14480()
{
  JUMPOUT(0x1C4E1446CLL);
}

void sub_1C4E1448C()
{
  JUMPOUT(0x1C4E14484);
}

uint64_t sub_1C4E14494()
{
  uint64_t v0;
  const llvm::SCEV *v1;
  llvm::ScalarEvolution *v2;
  const llvm::SCEV *Constant;

  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v2, **(llvm::Type ***)(v0 + 32), 0, 0);
  return llvm::ScalarEvolution::getSMaxExpr(v2, v1, Constant);
}

void sub_1C4E144D4()
{
  JUMPOUT(0x1C4E144A8);
}

unint64_t llvm::DependenceInfo::findCoefficient(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  const llvm::SCEV *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[12];

  v15[3] = *MEMORY[0x1E0C80C00];
  if (!a2 || *((_WORD *)a2 + 12) != 7)
LABEL_8:
    __asm { BR              X10 }
  while (*((const llvm::Loop **)a2 + 6) != a3)
  {
    a2 = (const llvm::SCEV *)**((_QWORD **)a2 + 4);
    if (a2)
      v3 = *((unsigned __int16 *)a2 + 12) == 7;
    else
      v3 = 0;
    if (!v3)
      goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 5);
  if (v4 == 2)
    return *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v7 = (uint64_t *)*((_QWORD *)this + 1);
  v8 = a2;
  v9 = *((_QWORD *)a2 + 4);
  v13 = (char *)v15;
  v14 = 0x300000000;
  v10 = v4;
  v11 = 8 * v4 - 8;
  if (v11 >= 0x19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, (uint64_t)v11 >> 3, 8);
    v12 = v14;
  }
  else
  {
    v12 = 0;
  }
  if (v10 != 1)
  {
    memcpy(&v13[8 * v12], (const void *)(v9 + 8), v11);
    v12 = v14;
  }
  LODWORD(v14) = v12 + (v11 >> 3);
  v5 = sub_1C618AB20(v7, (uint64_t)&v13, *((uint64_t ***)v8 + 6));
  if (v13 != (char *)v15)
    free(v13);
  return v5;
}

unint64_t llvm::DependenceInfo::zeroCoefficient(llvm::DependenceInfo *this, const llvm::SCEV ***a2, const llvm::Loop *a3)
{
  const llvm::SCEV *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[4];

  v3 = (const llvm::SCEV *)a2;
  v19[3] = *MEMORY[0x1E0C80C00];
  if (a2 && *((_WORD *)a2 + 12) == 7)
  {
    if (a2[6] == (const llvm::SCEV **)a3)
    {
      return (unint64_t)*a2[4];
    }
    else
    {
      v5 = (uint64_t *)*((_QWORD *)this + 1);
      v6 = llvm::DependenceInfo::zeroCoefficient(this, *a2[4], a3);
      v7 = v6;
      v8 = *((_QWORD *)v3 + 5);
      if (v8 == 2)
      {
        v9 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 8);
      }
      else
      {
        v11 = (uint64_t *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)v3 + 4);
        v16 = v6;
        v17 = v19;
        v18 = 0x300000000;
        v13 = v8;
        v14 = 8 * v8 - 8;
        if (v14 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, (uint64_t)v14 >> 3, 8);
          v15 = v18;
        }
        else
        {
          v15 = 0;
        }
        if (v13 != 1)
        {
          memcpy((char *)v17 + 8 * v15, (const void *)(v12 + 8), v14);
          v15 = v18;
        }
        LODWORD(v18) = v15 + (v14 >> 3);
        v9 = sub_1C618AB20(v11, (uint64_t)&v17, *((uint64_t ***)v3 + 6));
        if (v17 != v19)
          free(v17);
        v7 = v16;
      }
      return llvm::ScalarEvolution::getAddRecExpr(v5, v7, v9, *((uint64_t ***)v3 + 6));
    }
  }
  return (unint64_t)v3;
}

unint64_t llvm::DependenceInfo::addToCoefficient(llvm::DependenceInfo *this, const llvm::SCEV *a2, uint64_t **a3, const llvm::SCEV *a4)
{
  uint64_t *v8;
  int LoopDisposition;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v13;
  unint64_t v14;
  llvm::SCEV *AddExpr;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  if (!a2 || *((_WORD *)a2 + 12) != 7)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    return llvm::ScalarEvolution::getAddRecExpr(v11, (uint64_t)a2, (uint64_t)a4, a3);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  if (*((uint64_t ***)a2 + 6) == a3)
  {
    v13 = *((_QWORD *)a2 + 5);
    if (v13 == 2)
    {
      v14 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    }
    else
    {
      v23 = *((_QWORD *)a2 + 4);
      v32 = v34;
      v33 = 0x300000000;
      v24 = v13;
      v25 = 8 * v13 - 8;
      if (v25 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, (uint64_t)v25 >> 3, 8);
        v26 = v33;
      }
      else
      {
        v26 = 0;
      }
      if (v24 != 1)
      {
        memcpy((char *)v32 + 8 * v26, (const void *)(v23 + 8), v25);
        v26 = v33;
      }
      LODWORD(v33) = v26 + (v25 >> 3);
      v14 = sub_1C618AB20(v8, (uint64_t)&v32, *((uint64_t ***)a2 + 6));
      if (v32 != v34)
        free(v32);
    }
    v32 = v34;
    v34[0] = v14;
    v34[1] = a4;
    v33 = 0x200000002;
    AddExpr = (llvm::SCEV *)llvm::ScalarEvolution::getAddExpr((uint64_t)v8, (uint64_t)&v32, 0, 0);
    if (v32 != v34)
      free(v32);
    if (llvm::SCEV::isZero(AddExpr))
      return **((_QWORD **)a2 + 4);
    v20 = (uint64_t *)*((_QWORD *)this + 1);
    v21 = **((_QWORD **)a2 + 4);
    v19 = (uint64_t **)*((_QWORD *)a2 + 6);
    v22 = (uint64_t)AddExpr;
  }
  else
  {
    LoopDisposition = llvm::ScalarEvolution::getLoopDisposition(*((llvm::ScalarEvolution **)this + 1), a2, (const llvm::Loop *)a3);
    v10 = (uint64_t *)*((_QWORD *)this + 1);
    if (LoopDisposition == 1)
    {
      v11 = (uint64_t *)*((_QWORD *)this + 1);
      return llvm::ScalarEvolution::getAddRecExpr(v11, (uint64_t)a2, (uint64_t)a4, a3);
    }
    v16 = llvm::DependenceInfo::addToCoefficient(this, **((const llvm::SCEV ***)a2 + 4), (const llvm::Loop *)a3, a4);
    v17 = *((_QWORD *)a2 + 5);
    if (v17 == 2)
    {
      v18 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
    }
    else
    {
      v27 = (uint64_t *)*((_QWORD *)this + 1);
      v28 = *((_QWORD *)a2 + 4);
      v32 = v34;
      v33 = 0x300000000;
      v29 = v17;
      v30 = 8 * v17 - 8;
      if (v30 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, (uint64_t)v30 >> 3, 8);
        v31 = v33;
      }
      else
      {
        v31 = 0;
      }
      if (v29 != 1)
      {
        memcpy((char *)v32 + 8 * v31, (const void *)(v28 + 8), v30);
        v31 = v33;
      }
      LODWORD(v33) = v31 + (v30 >> 3);
      v18 = sub_1C618AB20(v27, (uint64_t)&v32, *((uint64_t ***)a2 + 6));
      if (v32 != v34)
        free(v32);
    }
    v19 = (uint64_t **)*((_QWORD *)a2 + 6);
    v20 = v10;
    v21 = v16;
    v22 = v18;
  }
  return llvm::ScalarEvolution::getAddRecExpr(v20, v21, v22, v19);
}

uint64_t llvm::DependenceInfo::tryDelinearize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  llvm::Value *v8;
  llvm::Value *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  const llvm::Loop *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  const llvm::Loop *v25;
  const llvm::SCEV *SCEVAtScope;
  const llvm::SCEV *v27;
  uint64_t PointerBase;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44[2];
  _BYTE v45[32];
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v8 = 0;
  v48[4] = *MEMORY[0x1E0C80C00];
  if (a2 && *(unsigned __int8 *)(a2 + 16) - 62 >= 0xFFFFFFFE)
    v8 = *(llvm::Value **)(a2 - 32);
  v9 = 0;
  if (a3 && *(unsigned __int8 *)(a3 + 16) - 62 >= 0xFFFFFFFE)
    v9 = *(llvm::Value **)(a3 - 32);
  v10 = *(uint64_t **)(a1 + 16);
  v11 = *((_DWORD *)v10 + 4);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *v10;
    v14 = v11 - 1;
    v15 = ((v12 >> 4) ^ (v12 >> 9)) & v14;
    v16 = *(_QWORD *)(v13 + 16 * v15);
    if (v12 == v16)
    {
LABEL_12:
      v19 = *(const llvm::Loop **)(v13 + 16 * v15 + 8);
    }
    else
    {
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v15 + v17++;
        v15 = v18 & v14;
        v16 = *(_QWORD *)(v13 + 16 * v15);
        if (v12 == v16)
          goto LABEL_12;
      }
      v19 = 0;
    }
    v20 = *(_QWORD *)(a3 + 40);
    v21 = ((v20 >> 4) ^ (v20 >> 9)) & v14;
    v22 = *(_QWORD *)(v13 + 16 * v21);
    if (v20 == v22)
    {
LABEL_18:
      v25 = *(const llvm::Loop **)(v13 + 16 * v21 + 8);
      goto LABEL_21;
    }
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v21 + v23++;
      v21 = v24 & v14;
      v22 = *(_QWORD *)(v13 + 16 * v21);
      if (v20 == v22)
        goto LABEL_18;
    }
  }
  else
  {
    v19 = 0;
  }
  v25 = 0;
LABEL_21:
  SCEVAtScope = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 8), v8, v19);
  v27 = llvm::ScalarEvolution::getSCEVAtScope(*(llvm::ScalarEvolution **)(a1 + 8), v9, v25);
  PointerBase = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 8), SCEVAtScope);
  v29 = PointerBase - 32;
  if (!PointerBase)
    v29 = 0;
  if (*(_WORD *)(PointerBase + 24) == 14)
    v30 = v29;
  else
    v30 = 0;
  v31 = llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(a1 + 8), v27);
  v32 = v31 - 32;
  if (!v31)
    v32 = 0;
  if (*(_WORD *)(v31 + 24) == 14)
    v33 = v32;
  else
    v33 = 0;
  if (v30)
    v34 = v33 == 0;
  else
    v34 = 1;
  if (v34 || v30 != v33)
    return 0;
  v46 = v48;
  v47 = 0x400000000;
  v44[0] = v45;
  v44[1] = (void *)0x400000000;
  if ((llvm::DependenceInfo::tryDelinearizeFixedSize((llvm::ScalarEvolution **)a1, a2, a3, SCEVAtScope, v27, &v46, (uint64_t)v44) & 1) != 0|| llvm::DependenceInfo::tryDelinearizeParametricSize((llvm::ScalarEvolution **)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3, SCEVAtScope, v27, (uint64_t)&v46, (uint64_t)v44))
  {
    v38 = v47;
    sub_1C618E414((uint64_t)a4, (int)v47);
    if (v38 >= 1)
    {
      v39 = 0;
      v40 = 0;
      v41 = 8 * v38;
      do
      {
        v42 = (_QWORD *)(*a4 + v39);
        *v42 = *(_QWORD *)((char *)v46 + v40);
        v42[1] = *(_QWORD *)((char *)v44[0] + v40);
        v43 = v42;
        llvm::DependenceInfo::unifySubscriptType(a1, (uint64_t)&v43, 1);
        v40 += 8;
        v39 += 48;
      }
      while (v41 != v40);
    }
    v36 = 1;
  }
  else
  {
    v36 = 0;
  }
  if (v44[0] != v45)
    free(v44[0]);
  if (v46 != v48)
    free(v46);
  return v36;
}

uint64_t llvm::DependenceInfo::tryDelinearizeFixedSize(llvm::ScalarEvolution **a1, uint64_t a2, uint64_t a3, llvm::SCEV *a4, const llvm::SCEV *a5, _DWORD *a6, uint64_t a7)
{
  const llvm::Value *v11;
  const llvm::Value *v12;
  uint64_t PointerBase;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  llvm::Value *v24;
  llvm::Value *v25;
  const llvm::SCEV *v26;
  const llvm::SCEV *v27;
  _DWORD *v28;
  void *__s2;
  uint64_t v30;
  _BYTE v31[16];
  void *__s1;
  uint64_t v33;
  _QWORD v34[3];

  v11 = 0;
  v34[2] = *MEMORY[0x1E0C80C00];
  if (a2 && *(unsigned __int8 *)(a2 + 16) - 62 >= 0xFFFFFFFE)
    v11 = *(const llvm::Value **)(a2 - 32);
  v12 = 0;
  if (a3 && *(unsigned __int8 *)(a3 + 16) - 62 >= 0xFFFFFFFE)
    v12 = *(const llvm::Value **)(a3 - 32);
  PointerBase = llvm::ScalarEvolution::getPointerBase(a1[1], a4);
  v14 = PointerBase - 32;
  if (!PointerBase)
    v14 = 0;
  if (*(_WORD *)(PointerBase + 24) == 14)
    v15 = v14;
  else
    v15 = 0;
  v16 = llvm::ScalarEvolution::getPointerBase(a1[1], a5);
  v17 = 0;
  v18 = v16 - 32;
  if (!v16)
    v18 = 0;
  if (*(_WORD *)(v16 + 24) == 14)
    v19 = v18;
  else
    v19 = 0;
  if (*((_BYTE *)v11 + 16) == 62)
    v20 = (uint64_t)v11;
  else
    v20 = 0;
  if (*((_BYTE *)v12 + 16) == 62)
    v21 = (uint64_t)v12;
  else
    v21 = 0;
  if (v20 && v21)
  {
    __s1 = v34;
    v33 = 0x400000000;
    __s2 = v31;
    v30 = 0x400000000;
    llvm::getIndexExpressionsFromGEP((uint64_t)a1[1], v20, (uint64_t)a6, (uint64_t)&__s1);
    v28 = (_DWORD *)a7;
    llvm::getIndexExpressionsFromGEP((uint64_t)a1[1], v21, a7, (uint64_t)&__s2);
    if ((_DWORD)v33
      && (v22 = a6 + 2, a6[2] >= 2u)
      && (_DWORD)v33 == (_DWORD)v30
      && !memcmp(__s1, __s2, 4 * v33))
    {
      v24 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)));
      v25 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF)));
      if (v24 == *(llvm::Value **)(v15 + 24) && v25 == *(llvm::Value **)(v19 + 24))
      {
        if (!byte_1ED7F1670)
        {
          if (*v22 >= 2u)
          {
            v26 = *(const llvm::SCEV **)(*(_QWORD *)a6 + 8);
            if (llvm::DependenceInfo::isKnownNonNegative(a1, v26, v11))
              __asm { BR              X10 }
            goto LABEL_30;
          }
          if (v28[2] >= 2u)
          {
            v27 = *(const llvm::SCEV **)(*(_QWORD *)v28 + 8);
            if (llvm::DependenceInfo::isKnownNonNegative(a1, v27, v12))
              __asm { BR              X10 }
            goto LABEL_30;
          }
        }
        v17 = 1;
        goto LABEL_31;
      }
    }
    else
    {
      v22 = a6 + 2;
    }
LABEL_30:
    v17 = 0;
    *v22 = 0;
    v28[2] = 0;
LABEL_31:
    if (__s2 != v31)
      free(__s2);
    if (__s1 != v34)
      free(__s1);
  }
  return v17;
}

uint64_t llvm::DependenceInfo::tryDelinearizeParametricSize(llvm::ScalarEvolution **a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::SCEV *a4, const llvm::SCEV *a5, uint64_t a6, uint64_t a7)
{
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t PointerBase;
  int v16;
  uint64_t v17;
  int v18;
  const llvm::SCEV ***ElementSize;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  const llvm::SCEV **v36;
  uint64_t v37;
  const llvm::SCEV **v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  llvm::Value *v45;
  llvm::Value *v46;
  void *v48[2];
  _BYTE v49[32];
  void *v50[2];
  _QWORD v51[5];

  v13 = 0;
  v51[4] = *MEMORY[0x1E0C80C00];
  if (a2 && a2[16] - 62 >= 0xFFFFFFFE)
    v13 = (llvm::Value *)*((_QWORD *)a2 - 4);
  v45 = v13;
  v14 = 0;
  if (a3 && a3[16] - 62 >= 0xFFFFFFFE)
    v14 = (llvm::Value *)*((_QWORD *)a3 - 4);
  v46 = v14;
  PointerBase = llvm::ScalarEvolution::getPointerBase(a1[1], a4);
  v16 = *(unsigned __int16 *)(PointerBase + 24);
  v17 = llvm::ScalarEvolution::getPointerBase(a1[1], a5);
  v18 = *(unsigned __int16 *)(v17 + 24);
  ElementSize = (const llvm::SCEV ***)llvm::ScalarEvolution::getElementSize(a1[1], (llvm::Instruction *)a2);
  if (ElementSize != (const llvm::SCEV ***)llvm::ScalarEvolution::getElementSize(a1[1], (llvm::Instruction *)a3))
    return 0;
  v22 = v17 - 32;
  v23 = PointerBase - 32;
  if (v16 != 14)
    v23 = 0;
  v24 = v23 + 32;
  if (v16 == 14)
    v25 = v24;
  else
    v25 = 0;
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)a1[1], (uint64_t)a4, v25);
  v27 = v26;
  if (v18 == 14)
    v28 = v22;
  else
    v28 = 0;
  v29 = v28 + 32;
  if (v18 == 14)
    v30 = v29;
  else
    v30 = 0;
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)a1[1], (uint64_t)a5, v30);
  v20 = 0;
  if (*(_WORD *)(v27 + 24) == 7)
    v32 = v27;
  else
    v32 = 0;
  if (*(_WORD *)(v31 + 24) == 7)
    v33 = v31;
  else
    v33 = 0;
  if (v32)
    v34 = v33 == 0;
  else
    v34 = 1;
  if (!v34)
  {
    if (*(_QWORD *)(v32 + 40) != 2 || *(_QWORD *)(v33 + 40) != 2)
      return 0;
    v50[0] = v51;
    v50[1] = (void *)0x400000000;
    llvm::collectParametricTerms((uint64_t)a1[1], v32, (uint64_t)v50);
    llvm::collectParametricTerms((uint64_t)a1[1], v33, (uint64_t)v50);
    v48[0] = v49;
    v48[1] = (void *)0x400000000;
    llvm::findArrayDimensions(a1[1], (uint64_t)v50, (uint64_t)v48, ElementSize);
    llvm::computeAccessFunctions((uint64_t)a1[1], v32, a6, (uint64_t)v48, v35, v36);
    llvm::computeAccessFunctions((uint64_t)a1[1], v33, a7, (uint64_t)v48, v37, v38);
    v39 = *(unsigned int *)(a6 + 8);
    if (v39 >= 2)
    {
      v20 = 0;
      v40 = *(_DWORD *)(a7 + 8);
      if (v40 < 2 || (_DWORD)v39 != v40)
        goto LABEL_39;
      if (byte_1ED7F1670)
      {
        v20 = 1;
        goto LABEL_39;
      }
      v41 = 0;
      v42 = 8 * v39 - 8;
      v20 = 1;
      while (llvm::DependenceInfo::isKnownNonNegative(a1, *(const llvm::SCEV **)(*(_QWORD *)a6 + v41 + 8), v45))
      {
        llvm::DependenceInfo::isKnownLessThan((uint64_t)a1, *(_QWORD *)(*(_QWORD *)a6 + v41 + 8));
        if (!v43)
          break;
        if (!llvm::DependenceInfo::isKnownNonNegative(a1, *(const llvm::SCEV **)(*(_QWORD *)a7 + v41 + 8), v46))
          break;
        llvm::DependenceInfo::isKnownLessThan((uint64_t)a1, *(_QWORD *)(*(_QWORD *)a7 + v41 + 8));
        if ((v44 & 1) == 0)
          break;
        v41 += 8;
        if (v42 == v41)
          goto LABEL_39;
      }
    }
    v20 = 0;
LABEL_39:
    if (v48[0] != v49)
      free(v48[0]);
    if (v50[0] != v51)
      free(v50[0]);
  }
  return v20;
}

uint64_t llvm::DependenceInfo::depends@<X0>(uint64_t this@<X0>, llvm::Instruction *a2@<X1>, llvm::Instruction *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  char v24;
  int v25;
  BOOL v26;
  BOOL v27;
  char v28;
  uint64_t v30;
  llvm::SCEV *v31;
  llvm::SCEV *v32;
  llvm *UnderlyingObject;
  llvm *v34;
  const llvm::Value *v35;
  llvm *v36;
  const llvm::Value *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  llvm::Value *v44;
  int v45;
  unsigned int v46;
  const llvm::SCEV *SCEVIter;
  unsigned int v48;
  uint64_t v49;
  llvm::Value *v50;
  int v51;
  unsigned int v52;
  const llvm::SCEV *v53;
  uint64_t PointerBase;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  const llvm::Loop *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  const llvm::Loop *v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t *v83;
  int v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  const llvm::Loop *v94;
  char v95;
  unint64_t *v96;
  unint64_t *v97;
  uint64_t *v98;
  llvm::SCEV *v99;
  llvm::SCEV *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void *v106;
  unint64_t v107;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  const llvm::Loop *v119;
  unint64_t v120;
  uint64_t v121;
  __int32 v122;
  int8x8_t *v123;
  uint64_t v124;
  int8x8_t v125;
  uint8x8_t v126;
  uint8x8_t v127;
  void **v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  __int32 v132;
  int8x8_t *v133;
  uint64_t v134;
  int8x8_t v135;
  uint8x8_t v136;
  uint8x8_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unsigned int v143;
  unsigned int v144;
  unint64_t *v145;
  unint64_t *v146;
  int v147;
  const llvm::SCEV *v148;
  uint64_t v149;
  char v150;
  int v151;
  const llvm::SCEV *v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  unsigned int v156;
  unint64_t *v157;
  uint64_t *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unsigned int v167;
  _QWORD *v168;
  uint64_t v169;
  void *v170;
  unint64_t v171;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unsigned int v183;
  char v184;
  char v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  uint64_t *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  const llvm::Loop *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  const llvm::Loop *v205;
  int v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v219;
  unint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int j;
  unint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  int v250;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  unint64_t v261;
  char i;
  _BOOL4 v263;
  uint64_t v264;
  char v265;
  llvm::Value *v266;
  int v267;
  llvm::Value *v268;
  llvm::Value *v269;
  llvm::SCEV *v270;
  unsigned int v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _BYTE v276[40];
  unint64_t v277;
  unint64_t v278;
  _BYTE v279[40];
  int v280;
  uint64_t v281;
  void *v282[2];
  _OWORD v283[2];
  llvm::SCEV *v284;
  _BYTE v285[200];
  unint64_t *v286;
  uint64_t v287;
  _OWORD v288[6];
  uint64_t v289;

  v7 = this;
  v289 = *MEMORY[0x1E0C80C00];
  if (a2 == a3)
    v9 = 0;
  else
    v9 = a4;
  v10 = *((unsigned __int8 *)a2 + 16);
  v11 = (v10 - 33);
  if (v11 <= 0x37)
  {
    if (((1 << (v10 - 33)) & 0x8000000000041) != 0)
    {
      v13 = *((_QWORD *)a2 + 8);
      if (!v13 || (*(_BYTE *)(v13 + 20) & 4) == 0 && (*(_BYTE *)(v13 + 17) & 0x10) == 0)
      {
        LODWORD(v284) = 7;
        this = sub_1C53E4BBC((uint64_t)a2, (__int32 *)&v284, 1uLL);
        if ((this & 1) != 0)
        {
          v242 = *((_QWORD *)a2 - 4);
          if (!v242
            || *(_BYTE *)(v242 + 16)
            || *(_QWORD *)(v242 + 24) != *((_QWORD *)a2 + 9)
            || *(_DWORD *)(v242 + 36) != 7)
          {
            goto LABEL_30;
          }
        }
        this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 66);
        if ((this & 1) == 0)
        {
          this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
          if (!(_DWORD)this)
            goto LABEL_30;
        }
      }
    }
    else
    {
      if (((1 << (v10 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_30;
      if (v11 != 28)
        goto LABEL_8;
      if ((*((_WORD *)a2 + 9) & 0x301) != 0)
        goto LABEL_30;
    }
    v10 = *((unsigned __int8 *)a2 + 16);
  }
LABEL_8:
  v12 = (v10 - 33);
  if (v12 > 0x37)
  {
LABEL_12:
    *a5 = 0;
    return this;
  }
  if (((1 << v12) & 0x8000000000041) != 0)
  {
    v14 = *((_QWORD *)a2 + 8);
    if (v14 && (*(_BYTE *)(v14 + 17) & 0x30) != 0)
      goto LABEL_12;
    v15 = *((_DWORD *)a2 + 5);
    if (v15 < 0
      && (v243 = (char *)a2 - 32 * (v15 & 0x7FFFFFF), v246 = *((_QWORD *)v243 - 1), v244 = v243 - 8, (v245 = v246) != 0))
    {
      v247 = -v245;
      while (1)
      {
        v248 = *(_DWORD *)(*(_QWORD *)&v244[v247] + 8);
        v249 = v248 > 7;
        v250 = (1 << v248) & 0x83;
        if (v249 || v250 == 0)
          break;
        v247 += 16;
        if (!v247)
          goto LABEL_24;
      }
    }
    else
    {
LABEL_24:
      this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45);
      if ((this & 1) != 0)
        goto LABEL_12;
      this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
      if ((this & 1) != 0)
        goto LABEL_12;
    }
  }
  else if (v12 == 27)
  {
    if ((*((_WORD *)a2 + 9) & 0x301) == 0)
      goto LABEL_12;
  }
  else if (((1 << v12) & 0x808001D0000010) == 0)
  {
    goto LABEL_12;
  }
LABEL_30:
  v16 = *((unsigned __int8 *)a3 + 16);
  v17 = (v16 - 33);
  if (v17 <= 0x37)
  {
    if (((1 << (v16 - 33)) & 0x8000000000041) != 0)
    {
      v19 = *((_QWORD *)a3 + 8);
      if (!v19 || (*(_BYTE *)(v19 + 20) & 4) == 0 && (*(_BYTE *)(v19 + 17) & 0x10) == 0)
      {
        LODWORD(v284) = 7;
        if (sub_1C53E4BBC((uint64_t)a3, (__int32 *)&v284, 1uLL))
        {
          v252 = *((_QWORD *)a3 - 4);
          if (!v252
            || *(_BYTE *)(v252 + 16)
            || *(_QWORD *)(v252 + 24) != *((_QWORD *)a3 + 9)
            || *(_DWORD *)(v252 + 36) != 7)
          {
            goto LABEL_55;
          }
        }
        this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 66);
        if ((this & 1) == 0)
        {
          this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 44);
          if (!(_DWORD)this)
            goto LABEL_55;
        }
      }
    }
    else
    {
      if (((1 << (v16 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_55;
      if (v17 != 28)
        goto LABEL_34;
      if ((*((_WORD *)a3 + 9) & 0x301) != 0)
        goto LABEL_55;
    }
    v16 = *((unsigned __int8 *)a3 + 16);
  }
LABEL_34:
  v18 = (v16 - 33);
  if (v18 > 0x37)
    goto LABEL_12;
  if (((1 << v18) & 0x8000000000041) != 0)
  {
    v20 = *((_QWORD *)a3 + 8);
    if (v20 && (*(_BYTE *)(v20 + 17) & 0x30) != 0)
      goto LABEL_12;
    v21 = *((_DWORD *)a3 + 5);
    if (v21 < 0
      && (v253 = (char *)a3 - 32 * (v21 & 0x7FFFFFF), v256 = *((_QWORD *)v253 - 1), v254 = v253 - 8, (v255 = v256) != 0))
    {
      v257 = -v255;
      while (1)
      {
        v258 = *(_DWORD *)(*(_QWORD *)&v254[v257] + 8);
        v249 = v258 > 7;
        v259 = (1 << v258) & 0x83;
        if (v249 || v259 == 0)
          break;
        v257 += 16;
        if (!v257)
          goto LABEL_49;
      }
    }
    else
    {
LABEL_49:
      this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 45);
      if ((this & 1) != 0)
        goto LABEL_12;
      this = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 44);
      if ((_DWORD)this)
        goto LABEL_12;
    }
  }
  else if (v18 == 27)
  {
    if ((*((_WORD *)a3 + 9) & 0x301) == 0)
      goto LABEL_12;
  }
  else if (((1 << v18) & 0x808001D0000010) == 0)
  {
    goto LABEL_12;
  }
LABEL_55:
  v22 = *((unsigned __int8 *)a2 + 16);
  if (a2)
    v23 = v22 == 60;
  else
    v23 = 0;
  v24 = !v23;
  if (!a2 || (v22 - 62) < 0xFFFFFFFE || (*((_WORD *)a2 + 9) & 0x301) != 0)
    goto LABEL_64;
  v25 = *((unsigned __int8 *)a3 + 16);
  v26 = a3 && v25 == 60;
  v27 = !v26;
  if (!a3 || (v25 - 62) < 0xFFFFFFFE || (*((_WORD *)a3 + 9) & 0x301) != 0)
    goto LABEL_64;
  if (v22 == 61)
    v28 = 0;
  else
    v28 = v24;
  if ((v28 & 1) != 0)
    v266 = 0;
  else
    v266 = (llvm::Value *)*((_QWORD *)a2 - 4);
  if (v25 != 61 && v27)
    v268 = 0;
  else
    v268 = (llvm::Value *)*((_QWORD *)a3 - 4);
  v30 = *(_QWORD *)v7;
  llvm::MemoryLocation::getOrNone((uint64_t ***)a3, (uint64_t)&v284);
  *(_OWORD *)v279 = *(_OWORD *)v285;
  *(_OWORD *)&v279[16] = *(_OWORD *)&v285[16];
  v31 = v284;
  *(_QWORD *)&v279[32] = *(_QWORD *)&v285[32];
  llvm::MemoryLocation::getOrNone((uint64_t ***)a2, (uint64_t)&v284);
  *(_OWORD *)v276 = *(_OWORD *)v285;
  *(_OWORD *)&v276[16] = *(_OWORD *)&v285[16];
  v32 = v284;
  *(_QWORD *)&v276[32] = *(_QWORD *)&v285[32];
  v284 = v31;
  *(_QWORD *)v285 = -1;
  *(_OWORD *)&v285[8] = *(_OWORD *)&v279[8];
  *(_OWORD *)&v285[24] = *(_OWORD *)&v279[24];
  v286 = (unint64_t *)v32;
  v287 = -1;
  v288[0] = *(_OWORD *)&v276[8];
  v288[1] = *(_OWORD *)&v276[24];
  this = llvm::AAResults::alias(v30, (uint64_t)&v284, (uint64_t)&v286);
  if (!(_BYTE)this)
    goto LABEL_12;
  UnderlyingObject = llvm::getUnderlyingObject(v31, (const llvm::Value *)6);
  v34 = llvm::getUnderlyingObject(v32, (const llvm::Value *)6);
  if (UnderlyingObject != v34)
  {
    v36 = v34;
    if ((llvm::isIdentifiedObject(UnderlyingObject, v35) & 1) != 0)
    {
      this = llvm::isIdentifiedObject(v36, v37);
      if ((this & 1) != 0)
        goto LABEL_12;
    }
LABEL_64:
    this = operator new();
    *(_QWORD *)this = &off_1E8136328;
    *(_QWORD *)(this + 8) = a2;
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 16) = a3;
    *a5 = this;
    return this;
  }
  llvm::DependenceInfo::establishNestingLevels((llvm::DependenceInfo *)v7, a2, a3);
  llvm::FullDependence::FullDependence((llvm::FullDependence *)v279, a2, a3, v9, *(_DWORD *)(v7 + 32));
  v284 = 0;
  *(_QWORD *)v285 = 0;
  *(int64x2_t *)&v285[16] = vdupq_n_s64(1uLL);
  *(_QWORD *)&v285[8] = 0;
  *(_QWORD *)&v285[32] = 1;
  v286 = (unint64_t *)v288;
  v287 = 0x200000000;
  sub_1C4E18808(&v286, (uint64_t)&v284);
  sub_1C4914448((void ***)&v285[32]);
  sub_1C4914448((void ***)&v285[24]);
  sub_1C4914448((void ***)&v285[16]);
  v38 = *(_QWORD *)(v7 + 8);
  v39 = *(_QWORD *)(v38 + 104);
  v40 = *(_DWORD *)(v38 + 120);
  if (!v40)
    goto LABEL_97;
  v41 = v40 - 1;
  v42 = (v40 - 1) & ((v266 >> 4) ^ (v266 >> 9));
  v43 = v39 + 48 * v42;
  v44 = *(llvm::Value **)(v43 + 24);
  if (v44 != v266)
  {
    v45 = 1;
    while (v44 != (llvm::Value *)-4096)
    {
      v46 = v42 + v45++;
      v42 = v46 & v41;
      v43 = v39 + 48 * (v46 & v41);
      v44 = *(llvm::Value **)(v43 + 24);
      if (v44 == v266)
        goto LABEL_98;
    }
LABEL_97:
    v43 = v39 + 48 * v40;
  }
LABEL_98:
  if (v43 == v39 + 48 * v40 || (SCEVIter = *(const llvm::SCEV **)(v43 + 40)) == 0)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v38, (unint64_t)v266);
    v38 = *(_QWORD *)(v7 + 8);
    v39 = *(_QWORD *)(v38 + 104);
    v40 = *(_DWORD *)(v38 + 120);
  }
  if (v40)
  {
    v48 = (v40 - 1) & ((v268 >> 4) ^ (v268 >> 9));
    v49 = v39 + 48 * v48;
    v50 = *(llvm::Value **)(v49 + 24);
    if (v50 == v268)
      goto LABEL_108;
    v51 = 1;
    while (v50 != (llvm::Value *)-4096)
    {
      v52 = v48 + v51++;
      v48 = v52 & (v40 - 1);
      v49 = v39 + 48 * v48;
      v50 = *(llvm::Value **)(v49 + 24);
      if (v50 == v268)
        goto LABEL_108;
    }
  }
  v49 = v39 + 48 * v40;
LABEL_108:
  if (v49 == v39 + 48 * v40 || (v53 = *(const llvm::SCEV **)(v49 + 40)) == 0)
  {
    v53 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v38, (unint64_t)v268);
    v38 = *(_QWORD *)(v7 + 8);
  }
  PointerBase = llvm::ScalarEvolution::getPointerBase((llvm::ScalarEvolution *)v38, SCEVIter);
  if (PointerBase != llvm::ScalarEvolution::getPointerBase(*(llvm::ScalarEvolution **)(v7 + 8), v53))
  {
    v57 = (_QWORD *)operator new();
    *v57 = &off_1E8136328;
    v57[1] = a2;
    v57[3] = 0;
    v57[4] = 0;
    v57[2] = a3;
    *a5 = (uint64_t)v57;
    goto LABEL_398;
  }
  v55 = v286;
  *v286 = (unint64_t)SCEVIter;
  v55[1] = (unint64_t)v53;
  if (byte_1ED7F15B0 && llvm::DependenceInfo::tryDelinearize(v7, (uint64_t)a2, (uint64_t)a3, &v286))
  {
    v264 = v287;
    if (!(_DWORD)v287)
    {
      v277 = 1;
      v278 = 1;
      v263 = 1;
      v264 = 0;
      *(_QWORD *)&v276[8] = *(_QWORD *)(v7 + 8);
      *(_DWORD *)v276 = 4;
      i = 1;
      v56 = 1;
      goto LABEL_201;
    }
  }
  else
  {
    v264 = 1;
  }
  v58 = 0;
  do
  {
    sub_1C496F5AC(&v286[6 * v58 + 3], (*(_DWORD *)(v7 + 40) + 1), 0);
    sub_1C496F5AC(&v286[6 * v58 + 4], (*(_DWORD *)(v7 + 40) + 1), 0);
    v59 = sub_1C496F5AC(&v286[6 * v58 + 5], v264, 0);
    llvm::DependenceInfo::removeMatchingExtensions((uint64_t)v59, (llvm::SCEV **)&v286[6 * v58]);
    v60 = *(uint64_t **)(v7 + 16);
    v61 = *((_DWORD *)v60 + 4);
    if (v61)
    {
      v62 = *((_QWORD *)a2 + 5);
      v63 = *v60;
      v64 = v61 - 1;
      v65 = ((v62 >> 4) ^ (v62 >> 9)) & v64;
      v66 = *(_QWORD *)(v63 + 16 * v65);
      if (v62 == v66)
      {
LABEL_124:
        v69 = *(const llvm::Loop **)(v63 + 16 * v65 + 8);
      }
      else
      {
        v67 = 1;
        while (v66 != -4096)
        {
          v68 = v65 + v67++;
          v65 = v68 & v64;
          v66 = *(_QWORD *)(v63 + 16 * v65);
          if (v62 == v66)
            goto LABEL_124;
        }
        v69 = 0;
      }
      v70 = v286[6 * v58 + 1];
      v71 = *((_QWORD *)a3 + 5);
      v72 = ((v71 >> 4) ^ (v71 >> 9)) & v64;
      v73 = *(_QWORD *)(v63 + 16 * v72);
      if (v71 == v73)
      {
LABEL_130:
        v76 = *(const llvm::Loop **)(v63 + 16 * v72 + 8);
      }
      else
      {
        v74 = 1;
        while (v73 != -4096)
        {
          v75 = v72 + v74++;
          v72 = v75 & v64;
          v73 = *(_QWORD *)(v63 + 16 * v72);
          if (v71 == v73)
            goto LABEL_130;
        }
        v76 = 0;
      }
    }
    else
    {
      v69 = 0;
      v76 = 0;
      v70 = v286[6 * v58 + 1];
    }
    v77 = llvm::DependenceInfo::classifyPair(v7, v286[6 * v58], v69, v70, v76, (uint64_t *)&v286[6 * v58 + 3]);
    v78 = &v286[6 * v58];
    *((_DWORD *)v78 + 4) = v77;
    sub_1C4AFDC18((uint64_t *)v78 + 4, (uint64_t *)v78 + 3);
    sub_1C496F8DC(&v286[6 * v58 + 5], v58);
    ++v58;
  }
  while (v58 != v264);
  v278 = 1;
  v263 = v264 < 0x3A;
  if (v264 >= 0x3A)
  {
    v241 = operator new();
    *(_QWORD *)v241 = v241 + 16;
    *(_QWORD *)(v241 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v241, (v264 + 63) >> 6, 0);
    *(_DWORD *)(v241 + 64) = v264;
    v277 = 1;
    v278 = v241;
    v79 = operator new();
    *(_QWORD *)v79 = v79 + 16;
    *(_QWORD *)(v79 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v79, (v264 + 63) >> 6, 0);
    *(_DWORD *)(v79 + 64) = v264;
  }
  else
  {
    v79 = ((unint64_t)v264 << 58) | 1;
    v278 = v79;
  }
  v80 = 0;
  v277 = v79;
  v81 = 1;
  v82 = v264;
  do
  {
    v83 = v286;
    v84 = v286[6 * v80 + 2];
    v269 = (llvm::Value *)v81;
    if (!v84)
      goto LABEL_190;
    if (v84 == 4)
    {
      v85 = *(uint64_t **)(v7 + 16);
      v86 = *((_DWORD *)v85 + 4);
      if (v86)
      {
        v87 = *((_QWORD *)a2 + 5);
        v88 = *v85;
        v89 = v86 - 1;
        v90 = ((v87 >> 4) ^ (v87 >> 9)) & (v86 - 1);
        v91 = *(_QWORD *)(v88 + 16 * v90);
        if (v87 == v91)
        {
LABEL_145:
          v94 = *(const llvm::Loop **)(v88 + 16 * v90 + 8);
          goto LABEL_173;
        }
        v92 = 1;
        while (v91 != -4096)
        {
          v93 = v90 + v92++;
          v90 = v93 & v89;
          v91 = *(_QWORD *)(v88 + 16 * v90);
          if (v87 == v91)
            goto LABEL_145;
        }
      }
      v94 = 0;
LABEL_173:
      llvm::DependenceInfo::collectCommonLoops((unint64_t *)v7, (const llvm::SCEV *)v286[6 * v80], v94, &v286[6 * v80 + 3]);
      v110 = *(uint64_t **)(v7 + 16);
      v111 = *((_DWORD *)v110 + 4);
      if (v111)
      {
        v112 = *((_QWORD *)a3 + 5);
        v113 = *v110;
        v114 = v111 - 1;
        v115 = ((v112 >> 4) ^ (v112 >> 9)) & (v111 - 1);
        v116 = *(_QWORD *)(v113 + 16 * v115);
        if (v112 == v116)
        {
LABEL_178:
          v119 = *(const llvm::Loop **)(v113 + 16 * v115 + 8);
LABEL_180:
          llvm::DependenceInfo::collectCommonLoops((unint64_t *)v7, (const llvm::SCEV *)v286[6 * v80 + 1], v119, &v286[6 * v80 + 3]);
          HIBYTE(v280) = 0;
          goto LABEL_194;
        }
        v117 = 1;
        while (v116 != -4096)
        {
          v118 = v115 + v117++;
          v115 = v118 & v114;
          v116 = *(_QWORD *)(v113 + 16 * v115);
          if (v112 == v116)
            goto LABEL_178;
        }
      }
      v119 = 0;
      goto LABEL_180;
    }
    if (v80 + 1 >= (unint64_t)v264)
      goto LABEL_183;
    v95 = 1;
LABEL_148:
    v265 = v95;
    do
    {
      v96 = v286;
      v97 = &v286[6 * v80];
      v284 = (llvm::SCEV *)1;
      v100 = (llvm::SCEV *)v97[4];
      v98 = (uint64_t *)(v97 + 4);
      v99 = v100;
      if ((v100 & 1) != 0)
        goto LABEL_150;
      v104 = (_QWORD *)operator new();
      v99 = (llvm::SCEV *)v104;
      v105 = *v98;
      v106 = v104 + 2;
      *v104 = v104 + 2;
      v104[1] = 0x600000000;
      v107 = *(unsigned int *)(v105 + 8);
      if (v104 != (_QWORD *)v105 && v107 != 0)
      {
        if (v107 < 7)
        {
          v109 = *(unsigned int *)(v105 + 8);
          goto LABEL_167;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v104, (uint64_t)(v104 + 2), *(unsigned int *)(v105 + 8), 8);
        v109 = *(unsigned int *)(v105 + 8);
        if ((_DWORD)v109)
        {
          v106 = *(void **)v99;
LABEL_167:
          memcpy(v106, *(const void **)v105, 8 * v109);
        }
        *((_DWORD *)v99 + 2) = v107;
      }
      *((_DWORD *)v99 + 16) = *(_DWORD *)(v105 + 64);
      v96 = v286;
      v82 = v264;
LABEL_150:
      v284 = v99;
      sub_1C496F35C((unint64_t *)&v284, &v96[6 * v81 + 4]);
      if ((v284 & 1) != 0)
      {
        if ((((unint64_t)v284 >> 1) & ~(-1 << ((unint64_t)v284 >> 58))) != 0)
          goto LABEL_170;
      }
      else
      {
        v101 = *((unsigned int *)v284 + 2);
        if ((_DWORD)v101)
        {
          v102 = *(_QWORD **)v284;
          v103 = 8 * v101;
          while (!*v102)
          {
            ++v102;
            v103 -= 8;
            if (!v103)
              goto LABEL_157;
          }
LABEL_170:
          sub_1C4AFD980(&v286[6 * v81 + 4], &v286[6 * v80 + 4]);
          sub_1C4AFD980(&v286[6 * v81 + 5], &v286[6 * v80 + 5]);
          sub_1C4914448((void ***)&v284);
          v95 = 0;
          if (v82 != (_DWORD)++v81)
            goto LABEL_148;
          goto LABEL_194;
        }
      }
LABEL_157:
      sub_1C4914448((void ***)&v284);
      ++v81;
    }
    while (v82 != (_DWORD)v81);
    if ((v265 & 1) == 0)
      goto LABEL_194;
    v83 = v286;
LABEL_183:
    v120 = v83[6 * v80 + 5];
    if ((v120 & 1) != 0)
    {
      v127 = (uint8x8_t)vcnt_s8((int8x8_t)((v120 >> 1) & ~(-1 << (v120 >> 58))));
      v127.i16[0] = vaddlv_u8(v127);
      v122 = v127.i32[0];
      goto LABEL_189;
    }
    v121 = *(unsigned int *)(v120 + 8);
    if (!(_DWORD)v121)
      goto LABEL_192;
    v122 = 0;
    v123 = *(int8x8_t **)v120;
    v124 = 8 * v121;
    do
    {
      v125 = *v123++;
      v126 = (uint8x8_t)vcnt_s8(v125);
      v126.i16[0] = vaddlv_u8(v126);
      v122 += v126.i32[0];
      v124 -= 8;
    }
    while (v124);
LABEL_189:
    if (v122 == 1)
    {
LABEL_190:
      v128 = (void **)v278;
      if ((v278 & 1) != 0)
      {
        v278 = v278 & 0xFC00000000000000 | (2
                                            * (((v278 >> 1) & ~(-1 << (v278 >> 58)) | (1 << v80)) & ~(-1 << (v278 >> 58)))) | 1;
        goto LABEL_194;
      }
LABEL_193:
      *((_QWORD *)*v128 + (v80 >> 6)) |= 1 << v80;
    }
    else
    {
LABEL_192:
      v128 = (void **)v277;
      if ((v277 & 1) == 0)
        goto LABEL_193;
      v277 = v277 & 0xFC00000000000000 | (2
                                          * (((v277 >> 1) & ~(-1 << (v277 >> 58)) | (1 << v80)) & ~(-1 << (v277 >> 58)))) | 1;
    }
LABEL_194:
    ++v80;
    v81 = (uint64_t)v269 + 1;
  }
  while (v80 != v264);
  v56 = v278;
  *(_QWORD *)&v276[8] = *(_QWORD *)(v7 + 8);
  *(_DWORD *)v276 = 4;
  if ((v278 & 1) != 0)
  {
    i = 0;
LABEL_201:
    v130 = (v56 >> 1) & ~(-1 << (v56 >> 58));
    if (v130)
    {
      v129 = __clz(__rbit64(v130));
      goto LABEL_218;
    }
    goto LABEL_202;
  }
  v129 = sub_1C476B7EC(v278);
  for (i = 0; v129 != -1; v129 = sub_1C49143F4(&v278, v144))
  {
LABEL_218:
    v144 = v129;
    v145 = v286;
    v146 = &v286[6 * v129];
    v147 = *((_DWORD *)v146 + 4);
    switch(v147)
    {
      case 3:
        v148 = (const llvm::SCEV *)*v146;
        v149 = v286[6 * v129 + 1];
        HIBYTE(v280) = 0;
        llvm::DependenceInfo::gcdMIVtest(v7, (uint64_t)v148);
        if ((v150 & 1) != 0
          || llvm::DependenceInfo::banerjeeMIVtest(v7, (uint64_t)v148, v149, &v145[6 * v144 + 3], (uint64_t)v279))
        {
LABEL_232:
          *a5 = 0;
          goto LABEL_397;
        }
        break;
      case 2:
        if (llvm::DependenceInfo::testRDIV((uint64_t **)v7, (const llvm::SCEV *)*v146, (const llvm::SCEV *)v286[6 * v129 + 1], (llvm::FullDependence *)v279))goto LABEL_232;
        break;
      case 1:
        LODWORD(v282[0]) = 0;
        llvm::DependenceInfo::testSIV((uint64_t **)v7, (const llvm::SCEV *)*v146, (const llvm::SCEV *)v286[6 * v129 + 1], (unsigned int *)v282, (llvm::FullDependence *)v279, (llvm::DependenceInfo::Constraint *)v276, &v284);
        if (v151)
          goto LABEL_232;
        break;
      default:
        v152 = (const llvm::SCEV *)*v146;
        v153 = v286[6 * v129 + 1];
        if ((llvm::DependenceInfo::isKnownPredicate(v7, 0x20u, *v146, v153) & 1) == 0)
        {
          if ((llvm::DependenceInfo::isKnownPredicate(v7, 0x21u, (uint64_t)v152, v153) & 1) != 0)
            goto LABEL_232;
          HIBYTE(v280) = 0;
        }
        break;
    }
  }
LABEL_202:
  if ((v277 & 1) != 0)
  {
    v137 = (uint8x8_t)vcnt_s8((int8x8_t)((v277 >> 1) & ~(-1 << (v277 >> 58))));
    v137.i16[0] = vaddlv_u8(v137);
    v132 = v137.i32[0];
    goto LABEL_208;
  }
  v131 = *(unsigned int *)(v277 + 8);
  if (!(_DWORD)v131)
    goto LABEL_368;
  v132 = 0;
  v133 = *(int8x8_t **)v277;
  v134 = 8 * v131;
  do
  {
    v135 = *v133++;
    v136 = (uint8x8_t)vcnt_s8(v135);
    v136.i16[0] = vaddlv_u8(v136);
    v132 += v136.i32[0];
    v134 -= 8;
  }
  while (v134);
LABEL_208:
  if (!v132)
  {
LABEL_368:
    v227 = *(_DWORD *)(v7 + 40);
    v228 = (v227 + 1);
    if (v228 > 0x39)
    {
      v229 = operator new();
      *(_QWORD *)v229 = v229 + 16;
      *(_QWORD *)(v229 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v229, (v227 + 64) >> 6, 0);
      *(_DWORD *)(v229 + 64) = v228;
    }
    else
    {
      v229 = (v228 << 58) | 1;
    }
    v284 = (llvm::SCEV *)v229;
    if ((i & 1) == 0)
    {
      v230 = v264;
      v231 = 3;
      do
      {
        sub_1C4AFD980((unint64_t *)&v284, &v286[v231]);
        v231 += 6;
        --v230;
      }
      while (v230);
    }
    v232 = *(_DWORD *)(v7 + 32);
    if (v232)
    {
      for (j = 1; j <= v232; ++j)
      {
        if ((v284 & 1) != 0)
          v234 = (1 << j) & ((unint64_t)v284 >> 1) & ~(-1 << ((unint64_t)v284 >> 58));
        else
          v234 = *(_QWORD *)(*(_QWORD *)v284 + 8 * (j >> 6)) & (1 << j);
        if (v234)
        {
          *(_BYTE *)(v281 + 16 * (j - 1)) &= ~8u;
          v232 = *(_DWORD *)(v7 + 32);
        }
      }
      if ((v9 & 1) != 0)
      {
        if (v232)
        {
          v235 = 0;
          while ((*(_BYTE *)(v281 + 16 * v235) & 2) != 0)
          {
            v236 = v235 + 2;
            ++v235;
            if (v236 > v232)
              goto LABEL_395;
          }
          BYTE2(v280) = 0;
        }
        goto LABEL_395;
      }
      if (v232)
      {
        v237 = 0;
        while ((*(_BYTE *)(v281 + 16 * v237) & 7) == 2)
        {
          v238 = v237 + 2;
          ++v237;
          if (v238 > v232)
            goto LABEL_393;
        }
        goto LABEL_395;
      }
    }
    else if ((v9 & 1) != 0)
    {
LABEL_395:
      v239 = operator new();
      *(_OWORD *)(v239 + 8) = *(_OWORD *)&v279[8];
      *(_OWORD *)(v239 + 24) = *(_OWORD *)&v279[24];
      *(_QWORD *)v239 = &off_1E81362B8;
      *(_DWORD *)(v239 + 40) = v280;
      v240 = v281;
      v281 = 0;
      *(_QWORD *)(v239 + 48) = v240;
      goto LABEL_396;
    }
LABEL_393:
    v239 = 0;
LABEL_396:
    *a5 = v239;
    sub_1C4914448((void ***)&v284);
    goto LABEL_397;
  }
  v138 = (*(_DWORD *)(v7 + 40) + 1);
  memset(v283, 0, sizeof(v283));
  *(_OWORD *)v282 = 0u;
  v284 = (llvm::SCEV *)&v285[8];
  *(_QWORD *)v285 = 0x400000000;
  sub_1C4E18B10((char *)&v284, v138, (__int128 *)v282);
  v139 = *(_DWORD *)(v7 + 40);
  v140 = *(_QWORD *)(v7 + 8);
  if ((v139 + 1) > 1)
    v141 = (v139 + 1);
  else
    v141 = 1;
  v142 = (_QWORD *)((char *)v284 + 8);
  do
  {
    *v142 = v140;
    *((_DWORD *)v142 - 2) = 4;
    v142 += 6;
    --v141;
  }
  while (v141);
  if ((v277 & 1) != 0)
  {
    v154 = (v277 >> 1) & ~(-1 << (v277 >> 58));
    if (v154)
    {
      v143 = __clz(__rbit64(v154));
      goto LABEL_236;
    }
    goto LABEL_234;
  }
  v143 = sub_1C476B7EC(v277);
  if (v143 == -1)
  {
LABEL_234:
    v155 = 1;
    goto LABEL_365;
  }
LABEL_236:
  v261 = (v264 + 63) >> 6;
  v156 = v143;
  do
  {
    v157 = &v286[6 * v156];
    v275 = 1;
    v160 = v157[5];
    v158 = (uint64_t *)(v157 + 5);
    v159 = (_QWORD *)v160;
    if ((v160 & 1) == 0)
    {
      v167 = v156;
      v168 = (_QWORD *)operator new();
      v159 = v168;
      v169 = *v158;
      v170 = v168 + 2;
      *v168 = v168 + 2;
      v168[1] = 0x600000000;
      v171 = *(unsigned int *)(v169 + 8);
      if (v168 == (_QWORD *)v169 || v171 == 0)
        goto LABEL_256;
      if (v171 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v168, (uint64_t)(v168 + 2), *(unsigned int *)(v169 + 8), 8);
        v173 = *(unsigned int *)(v169 + 8);
        if (!(_DWORD)v173)
        {
LABEL_255:
          *((_DWORD *)v159 + 2) = v171;
LABEL_256:
          *((_DWORD *)v159 + 16) = *(_DWORD *)(v169 + 64);
          v156 = v167;
          goto LABEL_238;
        }
        v170 = (void *)*v159;
      }
      else
      {
        v173 = *(unsigned int *)(v169 + 8);
      }
      memcpy(v170, *(const void **)v169, 8 * v173);
      goto LABEL_255;
    }
LABEL_238:
    v267 = v156;
    v274 = 1;
    v275 = (unint64_t)v159;
    if (v263)
    {
      v161 = (v264 << 58) | 1;
      v274 = v161;
    }
    else
    {
      v174 = operator new();
      *(_QWORD *)v174 = v174 + 16;
      *(_QWORD *)(v174 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v174, v261, 0);
      *(_DWORD *)(v174 + 64) = v264;
      v273 = 1;
      v274 = v174;
      v161 = operator new();
      *(_QWORD *)v161 = v161 + 16;
      *(_QWORD *)(v161 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v161, v261, 0);
      *(_DWORD *)(v161 + 64) = v264;
    }
    v162 = *(_DWORD *)(v7 + 40);
    v163 = (v162 + 1);
    v272 = 1;
    v273 = v161;
    if (v163 > 0x39)
    {
      v164 = operator new();
      *(_QWORD *)v164 = v164 + 16;
      *(_QWORD *)(v164 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v164, (v162 + 64) >> 6, 0);
      *(_DWORD *)(v164 + 64) = v163;
    }
    else
    {
      v164 = (v163 << 58) | 1;
    }
    v272 = v164;
    v282[0] = v283;
    v282[1] = (void *)0x400000000;
    if ((v275 & 1) == 0)
    {
      v165 = sub_1C476B7EC(v275);
      goto LABEL_268;
    }
    v166 = (v275 >> 1) & ~(-1 << (v275 >> 58));
    if (v166)
    {
      v165 = __clz(__rbit64(v166));
      while (1)
      {
        v175 = v165;
        v176 = v286;
        if (LODWORD(v286[6 * v165 + 2]) == 1)
          break;
        v177 = (_QWORD *)v273;
        if ((v273 & 1) == 0)
          goto LABEL_263;
        v273 = v273 & 0xFC00000000000000 | (2
                                            * (((v273 >> 1) & ~(-1 << (v273 >> 58)) | (1 << v165)) & ~(-1 << (v273 >> 58)))) | 1;
LABEL_265:
        v178 = LODWORD(v282[1]);
        if (LODWORD(v282[1]) >= (unint64_t)HIDWORD(v282[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v282, (uint64_t)v283, LODWORD(v282[1]) + 1, 8);
          v178 = LODWORD(v282[1]);
        }
        *((_QWORD *)v282[0] + v178) = &v176[6 * v175];
        ++LODWORD(v282[1]);
        v165 = sub_1C49143F4(&v275, v175);
LABEL_268:
        if (v165 == -1)
          goto LABEL_269;
      }
      v177 = (_QWORD *)v274;
      if ((v274 & 1) != 0)
      {
        v274 = v274 & 0xFC00000000000000 | (2
                                            * (((v274 >> 1) & ~(-1 << (v274 >> 58)) | (1 << v165)) & ~(-1 << (v274 >> 58)))) | 1;
        goto LABEL_265;
      }
LABEL_263:
      *(_QWORD *)(*v177 + (((unint64_t)v165 >> 3) & 0x1FFFFFF8)) |= 1 << v165;
      goto LABEL_265;
    }
LABEL_269:
    llvm::DependenceInfo::unifySubscriptType(v7, (uint64_t)v282[0], LODWORD(v282[1]));
    while (1)
    {
LABEL_270:
      while ((v274 & 1) == 0)
      {
        v179 = *(unsigned int *)(v274 + 8);
        if (!(_DWORD)v179)
          goto LABEL_329;
        v180 = *(_QWORD **)v274;
        v181 = 8 * v179;
        while (!*v180)
        {
          ++v180;
          v181 -= 8;
          if (!v181)
            goto LABEL_329;
        }
        v183 = sub_1C476B7EC(v274);
        if (v183 != -1)
          goto LABEL_279;
      }
      v182 = (v274 >> 1) & ~(-1 << (v274 >> 58));
      if (!v182)
        break;
      v183 = __clz(__rbit64(v182));
LABEL_279:
      v184 = 0;
      do
      {
        v271 = 0;
        llvm::DependenceInfo::testSIV((uint64_t **)v7, (const llvm::SCEV *)v286[6 * v183], (const llvm::SCEV *)v286[6 * v183 + 1], &v271, (llvm::FullDependence *)v279, (llvm::DependenceInfo::Constraint *)v276, &v270);
        if ((v185 & 1) != 0)
        {
LABEL_333:
          v155 = 0;
          *a5 = 0;
          goto LABEL_361;
        }
        v186 = v271;
        if ((v272 & 1) != 0)
          v272 = v272 & 0xFC00000000000000 | (2
                                              * (((v272 >> 1) & ~(-1 << (v272 >> 58)) | (1 << v271)) & ~(-1 << (v272 >> 58)))) | 1;
        else
          *(_QWORD *)(*(_QWORD *)v272 + 8 * (v271 >> 6)) |= 1 << v271;
        if (llvm::DependenceInfo::intersectConstraints((llvm::DependenceInfo *)v7, (llvm::SCEV *)((char *)v284 + 48 * v186), (const llvm::DependenceInfo::Constraint *)v276))
        {
          if (!*((_DWORD *)v284 + 12 * v186))
            goto LABEL_333;
          v184 = 1;
        }
        if ((v274 & 1) != 0)
          v274 = ((2 * ~((-1 << (v274 >> 58)) | (1 << v183))) | 0xFC00000000000000) & v274 | 1;
        else
          *(_QWORD *)(*(_QWORD *)v274 + (((unint64_t)v183 >> 3) & 0x1FFFFFF8)) &= ~(1 << v183);
        v183 = sub_1C49143F4(&v274, v183);
      }
      while (v183 != -1);
      if ((v184 & 1) != 0)
      {
        if ((v273 & 1) != 0)
        {
          v188 = (v273 >> 1) & ~(-1 << (v273 >> 58));
          if (v188)
          {
            v187 = __clz(__rbit64(v188));
            goto LABEL_326;
          }
        }
        else
        {
          v187 = sub_1C476B7EC(v273);
          if (v187 != -1)
          {
            while (1)
            {
LABEL_326:
              v213 = v187;
              if (!llvm::DependenceInfo::propagate((llvm::DependenceInfo *)v7, (const llvm::SCEV **)&v286[6 * v187], (const llvm::SCEV **)&v286[6 * v187 + 1], &v286[6 * v187 + 3], &v284, (BOOL *)&v280 + 3))goto LABEL_327;
              v189 = *(uint64_t **)(v7 + 16);
              v190 = *((_DWORD *)v189 + 4);
              if (v190)
              {
                v191 = *((_QWORD *)a2 + 5);
                v192 = *v189;
                v193 = v190 - 1;
                v194 = ((v191 >> 4) ^ (v191 >> 9)) & v193;
                v195 = *(_QWORD *)(v192 + 16 * v194);
                if (v191 == v195)
                {
LABEL_302:
                  v198 = *(const llvm::Loop **)(v192 + 16 * v194 + 8);
                }
                else
                {
                  v196 = 1;
                  while (v195 != -4096)
                  {
                    v197 = v194 + v196++;
                    v194 = v197 & v193;
                    v195 = *(_QWORD *)(v192 + 16 * v194);
                    if (v191 == v195)
                      goto LABEL_302;
                  }
                  v198 = 0;
                }
                v199 = v286[6 * v213 + 1];
                v200 = *((_QWORD *)a3 + 5);
                v201 = ((v200 >> 4) ^ (v200 >> 9)) & v193;
                v202 = *(_QWORD *)(v192 + 16 * v201);
                if (v200 == v202)
                {
LABEL_308:
                  v205 = *(const llvm::Loop **)(v192 + 16 * v201 + 8);
                }
                else
                {
                  v203 = 1;
                  while (v202 != -4096)
                  {
                    v204 = v201 + v203++;
                    v201 = v204 & v193;
                    v202 = *(_QWORD *)(v192 + 16 * v201);
                    if (v200 == v202)
                      goto LABEL_308;
                  }
                  v205 = 0;
                }
              }
              else
              {
                v198 = 0;
                v205 = 0;
                v199 = v286[6 * v213 + 1];
              }
              v206 = llvm::DependenceInfo::classifyPair(v7, v286[6 * v213], v198, v199, v205, (uint64_t *)&v286[6 * v213 + 3]);
              v207 = v286;
              LODWORD(v286[6 * v213 + 2]) = v206;
              if ((v206 - 2) < 2)
                goto LABEL_327;
              if (v206 != 1)
                break;
              if ((v274 & 1) != 0)
                v274 = v274 & 0xFC00000000000000 | (2
                                                    * (((v274 >> 1) & ~(-1 << (v274 >> 58)) | (1 << v213)) & ~(-1 << (v274 >> 58)))) | 1;
              else
                *(_QWORD *)(*(_QWORD *)v274 + ((v213 >> 3) & 0x1FFFFFF8)) |= 1 << v213;
              v208 = v273;
              if ((v273 & 1) != 0)
              {
                v209 = v273 >> 58;
LABEL_318:
                v273 = ((2 * ~((-1 << v209) | (1 << v213))) | 0xFC00000000000000) & v208 | 1;
                goto LABEL_327;
              }
              *(_QWORD *)(*(_QWORD *)v273 + ((v213 >> 3) & 0x1FFFFFF8)) &= ~(1 << v213);
LABEL_327:
              v187 = sub_1C49143F4(&v273, v213);
              if (v187 == -1)
                goto LABEL_270;
            }
            v210 = (uint64_t *)&v207[6 * v213];
            v211 = *v210;
            v212 = v210[1];
            if ((llvm::DependenceInfo::isKnownPredicate(v7, 0x20u, *v210, v212) & 1) == 0)
            {
              if ((llvm::DependenceInfo::isKnownPredicate(v7, 0x21u, v211, v212) & 1) != 0)
                goto LABEL_333;
              HIBYTE(v280) = 0;
            }
            v208 = v273;
            if ((v273 & 1) == 0)
            {
              *(_QWORD *)(*(_QWORD *)v273 + ((v213 >> 3) & 0x1FFFFFF8)) &= ~(1 << v213);
              goto LABEL_327;
            }
            v209 = v273 >> 58;
            goto LABEL_318;
          }
        }
      }
    }
LABEL_329:
    if ((v273 & 1) == 0)
    {
      v214 = sub_1C476B7EC(v273);
      goto LABEL_334;
    }
    v215 = (v273 >> 1) & ~(-1 << (v273 >> 58));
    if (v215)
    {
      v214 = __clz(__rbit64(v215));
      do
      {
        v216 = v214;
        if (LODWORD(v286[6 * v214 + 2]) == 2)
        {
          if ((llvm::DependenceInfo::testRDIV((uint64_t **)v7, (const llvm::SCEV *)v286[6 * v214], (const llvm::SCEV *)v286[6 * v214 + 1], (llvm::FullDependence *)v279) & 1) != 0)
          {
LABEL_360:
            v155 = 0;
            *a5 = 0;
            goto LABEL_361;
          }
          if ((v273 & 1) != 0)
            v273 = ((2 * ~((-1 << (v273 >> 58)) | (1 << v216))) | 0xFC00000000000000) & v273 | 1;
          else
            *(_QWORD *)(*(_QWORD *)v273 + ((v216 >> 3) & 0x1FFFFFF8)) &= ~(1 << v216);
        }
        v214 = sub_1C49143F4(&v273, v216);
LABEL_334:
        ;
      }
      while (v214 != -1);
    }
    if ((v273 & 1) == 0)
    {
      v217 = sub_1C476B7EC(v273);
      goto LABEL_345;
    }
    v218 = (v273 >> 1) & ~(-1 << (v273 >> 58));
    if (!v218)
    {
LABEL_349:
      if ((v272 & 1) != 0)
      {
        v226 = (v272 >> 1) & ~(-1 << (v272 >> 58));
        if (!v226)
        {
          v155 = 1;
          goto LABEL_361;
        }
        v225 = __clz(__rbit64(v226));
LABEL_355:
        while (*(_DWORD *)(v7 + 32) >= v225)
        {
          llvm::DependenceInfo::updateDirection(v7, (char *)(v281 + 16 * (v225 - 1)), (int *)v284 + 12 * v225);
          if ((*(_BYTE *)(v281 + 16 * (v225 - 1)) & 7) == 0)
            goto LABEL_360;
          v225 = sub_1C49143F4(&v272, v225);
          v155 = 1;
          if (v225 == -1)
            goto LABEL_361;
        }
      }
      else
      {
        v225 = sub_1C476B7EC(v272);
        if (v225 != -1)
          goto LABEL_355;
      }
      v155 = 1;
      goto LABEL_361;
    }
    v219 = __clz(__rbit64(v218));
    while (1)
    {
      v220 = v286;
      v221 = (uint64_t *)&v286[6 * v219];
      v223 = *v221;
      v222 = v221[1];
      HIBYTE(v280) = 0;
      llvm::DependenceInfo::gcdMIVtest(v7, v223);
      if ((v224 & 1) != 0
        || (llvm::DependenceInfo::banerjeeMIVtest(v7, v223, v222, &v220[6 * v219 + 3], (uint64_t)v279) & 1) != 0)
      {
        break;
      }
      v217 = sub_1C49143F4(&v273, v219);
LABEL_345:
      v219 = v217;
      if (v217 == -1)
        goto LABEL_349;
    }
    v155 = 0;
    *a5 = 0;
LABEL_361:
    if (v282[0] != v283)
      free(v282[0]);
    sub_1C4914448((void ***)&v272);
    sub_1C4914448((void ***)&v273);
    sub_1C4914448((void ***)&v274);
    sub_1C4914448((void ***)&v275);
    if (!v155)
      break;
    v156 = sub_1C49143F4(&v277, v267);
  }
  while (v156 != -1);
LABEL_365:
  if (v284 != (llvm::SCEV *)&v285[8])
    free(v284);
  if (v155)
    goto LABEL_368;
LABEL_397:
  sub_1C4914448((void ***)&v277);
  sub_1C4914448((void ***)&v278);
LABEL_398:
  sub_1C618E4C0((void ***)v286, (void ***)&v286[6 * v287]);
  if (v286 != (unint64_t *)v288)
    free(v286);
  this = v281;
  v281 = 0;
  if (this)
    return MEMORY[0x1CAA32F9C](this, 0x1060C80768B1B2DLL);
  return this;
}

llvm::SCEV *llvm::DependenceInfo::getSplitIteration(llvm::DependenceInfo *this, const llvm::Dependence *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t SCEVIter;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  llvm::DependenceInfo *v31;
  unint64_t *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  const llvm::Loop *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  const llvm::Loop *v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  int v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  const llvm::Loop *v66;
  char v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  llvm::SCEV *v71;
  uint64_t *v72;
  llvm::SCEV *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  const llvm::Loop *v92;
  unint64_t v93;
  uint64_t v94;
  __int32 v95;
  int8x8_t *v96;
  uint64_t v97;
  int8x8_t v98;
  uint8x8_t v99;
  uint8x8_t v100;
  void **v101;
  unsigned int i;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int8x8_t *v106;
  uint64_t v107;
  int8x8_t v108;
  uint8x8_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  int v119;
  unint64_t *v120;
  uint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  void **v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  char v137;
  unsigned int v138;
  char v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  const llvm::Loop *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  const llvm::Loop *v160;
  int v161;
  uint64_t v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  void *v166;
  unint64_t v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  llvm::SCEV *v173;
  _BOOL4 v174;
  uint64_t v175;
  uint64_t v176;
  llvm::DependenceInfo *v178;
  llvm::SCEV *v179;
  unsigned int v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184[4];
  __int128 v185;
  __int128 v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  _BYTE v191[43];
  BOOL v192;
  uint64_t v193;
  llvm::SCEV *v194;
  uint64_t v195;
  uint64_t v196;
  int64x2_t v197;
  uint64_t v198;
  unint64_t *v199;
  uint64_t v200;
  _QWORD v201[14];

  v201[12] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  if (v4)
    v6 = *(unsigned __int8 *)(v4 + 16) - 62 >= 0xFFFFFFFE;
  else
    v6 = 0;
  if (v6)
    v7 = *(_QWORD *)(v4 - 32);
  else
    v7 = 0;
  if (v5)
    v8 = *(unsigned __int8 *)(v5 + 16) - 62 >= 0xFFFFFFFE;
  else
    v8 = 0;
  if (v8)
    v9 = *(_QWORD *)(v5 - 32);
  else
    v9 = 0;
  llvm::DependenceInfo::establishNestingLevels(this, (const llvm::Instruction *)v4, (const llvm::Instruction *)v5);
  v176 = v5;
  llvm::FullDependence::FullDependence((llvm::FullDependence *)v191, (llvm::Instruction *)v4, (llvm::Instruction *)v5, 0, *((_DWORD *)this + 8));
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v197 = vdupq_n_s64(1uLL);
  v175 = v4;
  v198 = 1;
  v199 = v201;
  v200 = 0x200000000;
  sub_1C4E18808(&v199, (uint64_t)&v194);
  sub_1C4914448((void ***)&v198);
  sub_1C4914448((void ***)&v197.i64[1]);
  sub_1C4914448((void ***)&v197);
  v178 = this;
  v10 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(v10 + 104);
  v12 = *(_DWORD *)(v10 + 120);
  v13 = a3;
  if (!v12)
  {
LABEL_19:
    v16 = v11 + 48 * v12;
    goto LABEL_20;
  }
  v14 = v12 - 1;
  v15 = (v12 - 1) & ((v7 >> 4) ^ (v7 >> 9));
  v16 = v11 + 48 * v15;
  v17 = *(_QWORD *)(v16 + 24);
  if (v17 != v7)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & v14;
      v16 = v11 + 48 * (v19 & v14);
      v17 = *(_QWORD *)(v16 + 24);
      if (v17 == v7)
        goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_20:
  if (v16 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v16 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, v7);
    v10 = *((_QWORD *)this + 1);
    v11 = *(_QWORD *)(v10 + 104);
    v12 = *(_DWORD *)(v10 + 120);
    if (!v12)
      goto LABEL_29;
  }
  else if (!v12)
  {
    goto LABEL_29;
  }
  v21 = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
  v22 = v11 + 48 * v21;
  v23 = *(_QWORD *)(v22 + 24);
  if (v23 == v9)
    goto LABEL_30;
  v24 = 1;
  while (v23 != -4096)
  {
    v25 = v21 + v24++;
    v21 = v25 & (v12 - 1);
    v22 = v11 + 48 * v21;
    v23 = *(_QWORD *)(v22 + 24);
    if (v23 == v9)
      goto LABEL_30;
  }
LABEL_29:
  v22 = v11 + 48 * v12;
LABEL_30:
  if (v22 == v11 + 48 * v12 || (v26 = *(_QWORD *)(v22 + 40)) == 0)
    v26 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v10, v9);
  v27 = v199;
  *v199 = SCEVIter;
  v27[1] = v26;
  if (byte_1ED7F15B0 && llvm::DependenceInfo::tryDelinearize((uint64_t)this, v4, v5, &v199))
  {
    v28 = v200;
    if (!(_DWORD)v200)
    {
      v189 = 1;
      v190 = 1;
      v174 = 1;
      v188 = *((_QWORD *)this + 1);
      v187 = 4;
      v29 = 1;
      goto LABEL_119;
    }
  }
  else
  {
    v28 = 1;
  }
  v30 = 0;
  v31 = this;
  do
  {
    sub_1C496F5AC(&v199[6 * v30 + 3], (*((_DWORD *)v31 + 10) + 1), 0);
    sub_1C496F5AC(&v199[6 * v30 + 4], (*((_DWORD *)v31 + 10) + 1), 0);
    v32 = sub_1C496F5AC(&v199[6 * v30 + 5], v28, 0);
    llvm::DependenceInfo::removeMatchingExtensions((uint64_t)v32, (llvm::SCEV **)&v199[6 * v30]);
    v33 = (uint64_t *)*((_QWORD *)v31 + 2);
    v34 = *((_DWORD *)v33 + 4);
    if (v34)
    {
      v35 = *(_QWORD *)(v4 + 40);
      v36 = *v33;
      v37 = v34 - 1;
      v38 = ((v35 >> 4) ^ (v35 >> 9)) & v37;
      v39 = *(_QWORD *)(v36 + 16 * v38);
      if (v35 == v39)
      {
LABEL_44:
        v42 = *(const llvm::Loop **)(v36 + 16 * v38 + 8);
      }
      else
      {
        v40 = 1;
        while (v39 != -4096)
        {
          v41 = v38 + v40++;
          v38 = v41 & v37;
          v39 = *(_QWORD *)(v36 + 16 * v38);
          if (v35 == v39)
            goto LABEL_44;
        }
        v42 = 0;
      }
      v43 = v199[6 * v30 + 1];
      v44 = *(_QWORD *)(v5 + 40);
      v45 = ((v44 >> 4) ^ (v44 >> 9)) & v37;
      v46 = *(_QWORD *)(v36 + 16 * v45);
      if (v44 == v46)
      {
LABEL_50:
        v49 = *(const llvm::Loop **)(v36 + 16 * v45 + 8);
      }
      else
      {
        v47 = 1;
        while (v46 != -4096)
        {
          v48 = v45 + v47++;
          v45 = v48 & v37;
          v46 = *(_QWORD *)(v36 + 16 * v45);
          if (v44 == v46)
            goto LABEL_50;
        }
        v49 = 0;
      }
    }
    else
    {
      v42 = 0;
      v49 = 0;
      v43 = v199[6 * v30 + 1];
    }
    v31 = this;
    v50 = llvm::DependenceInfo::classifyPair((uint64_t)this, v199[6 * v30], v42, v43, v49, (uint64_t *)&v199[6 * v30 + 3]);
    v51 = &v199[6 * v30];
    *((_DWORD *)v51 + 4) = v50;
    sub_1C4AFDC18((uint64_t *)v51 + 4, (uint64_t *)v51 + 3);
    sub_1C496F8DC(&v199[6 * v30 + 5], v30);
    ++v30;
  }
  while (v30 != v28);
  v174 = v28 < 0x3A;
  if (v28 >= 0x3A)
  {
    v171 = operator new();
    *(_QWORD *)v171 = v171 + 16;
    *(_QWORD *)(v171 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v171, (v28 + 63) >> 6, 0);
    *(_DWORD *)(v171 + 64) = v28;
    v190 = v171;
    v52 = operator new();
    *(_QWORD *)v52 = v52 + 16;
    *(_QWORD *)(v52 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v52, (v28 + 63) >> 6, 0);
    *(_DWORD *)(v52 + 64) = v28;
  }
  else
  {
    v52 = ((unint64_t)v28 << 58) | 1;
    v190 = v52;
  }
  v53 = 0;
  v189 = v52;
  v54 = 1;
  do
  {
    v55 = v199;
    v56 = v199[6 * v53 + 2];
    if (!v56)
      goto LABEL_109;
    if (v56 == 4)
    {
      v57 = (uint64_t *)*((_QWORD *)v178 + 2);
      v58 = *((_DWORD *)v57 + 4);
      if (v58)
      {
        v59 = *(_QWORD *)(v175 + 40);
        v60 = *v57;
        v61 = v58 - 1;
        v62 = ((v59 >> 4) ^ (v59 >> 9)) & (v58 - 1);
        v63 = *(_QWORD *)(v60 + 16 * v62);
        if (v59 == v63)
        {
LABEL_65:
          v66 = *(const llvm::Loop **)(v60 + 16 * v62 + 8);
          goto LABEL_92;
        }
        v64 = 1;
        while (v63 != -4096)
        {
          v65 = v62 + v64++;
          v62 = v65 & v61;
          v63 = *(_QWORD *)(v60 + 16 * v62);
          if (v59 == v63)
            goto LABEL_65;
        }
      }
      v66 = 0;
LABEL_92:
      llvm::DependenceInfo::collectCommonLoops((unint64_t *)v178, (const llvm::SCEV *)v199[6 * v53], v66, &v199[6 * v53 + 3]);
      v83 = (uint64_t *)*((_QWORD *)v178 + 2);
      v84 = *((_DWORD *)v83 + 4);
      if (v84)
      {
        v85 = *(_QWORD *)(v176 + 40);
        v86 = *v83;
        v87 = v84 - 1;
        v88 = ((v85 >> 4) ^ (v85 >> 9)) & (v84 - 1);
        v89 = *(_QWORD *)(v86 + 16 * v88);
        if (v85 == v89)
        {
LABEL_97:
          v92 = *(const llvm::Loop **)(v86 + 16 * v88 + 8);
LABEL_99:
          llvm::DependenceInfo::collectCommonLoops((unint64_t *)v178, (const llvm::SCEV *)v199[6 * v53 + 1], v92, &v199[6 * v53 + 3]);
          v192 = 0;
          goto LABEL_113;
        }
        v90 = 1;
        while (v89 != -4096)
        {
          v91 = v88 + v90++;
          v88 = v91 & v87;
          v89 = *(_QWORD *)(v86 + 16 * v88);
          if (v85 == v89)
            goto LABEL_97;
        }
      }
      v92 = 0;
      goto LABEL_99;
    }
    if (v53 + 1 >= (unint64_t)v28)
      goto LABEL_102;
    v67 = 1;
    v68 = v54;
    do
    {
      while (1)
      {
        v69 = v199;
        v70 = &v199[6 * v53];
        v194 = (llvm::SCEV *)1;
        v73 = (llvm::SCEV *)v70[4];
        v72 = (uint64_t *)(v70 + 4);
        v71 = v73;
        if ((v73 & 1) != 0)
          goto LABEL_69;
        v77 = (_QWORD *)operator new();
        v71 = (llvm::SCEV *)v77;
        v78 = *v72;
        v79 = v77 + 2;
        *v77 = v77 + 2;
        v77[1] = 0x600000000;
        v80 = *(unsigned int *)(v78 + 8);
        if (v77 != (_QWORD *)v78 && v80 != 0)
        {
          if (v80 < 7)
          {
            v82 = *(unsigned int *)(v78 + 8);
            goto LABEL_88;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v77, (uint64_t)(v77 + 2), *(unsigned int *)(v78 + 8), 8);
          v82 = *(unsigned int *)(v78 + 8);
          if ((_DWORD)v82)
          {
            v79 = *(void **)v71;
LABEL_88:
            memcpy(v79, *(const void **)v78, 8 * v82);
          }
          *((_DWORD *)v71 + 2) = v80;
        }
        *((_DWORD *)v71 + 16) = *(_DWORD *)(v78 + 64);
        v69 = v199;
        v13 = a3;
LABEL_69:
        v194 = v71;
        sub_1C496F35C((unint64_t *)&v194, &v69[6 * v68 + 4]);
        if ((v194 & 1) == 0)
          break;
        if ((((unint64_t)v194 >> 1) & ~(-1 << ((unint64_t)v194 >> 58))) == 0)
          goto LABEL_76;
LABEL_78:
        sub_1C4AFD980(&v199[6 * v68 + 4], &v199[6 * v53 + 4]);
        sub_1C4AFD980(&v199[6 * v68 + 5], &v199[6 * v53 + 5]);
        sub_1C4914448((void ***)&v194);
        v67 = 0;
        if ((_DWORD)v28 == (_DWORD)++v68)
          goto LABEL_113;
      }
      v74 = *((unsigned int *)v194 + 2);
      if ((_DWORD)v74)
      {
        v75 = *(_QWORD **)v194;
        v76 = 8 * v74;
        while (!*v75)
        {
          ++v75;
          v76 -= 8;
          if (!v76)
            goto LABEL_76;
        }
        goto LABEL_78;
      }
LABEL_76:
      sub_1C4914448((void ***)&v194);
      ++v68;
    }
    while ((_DWORD)v28 != (_DWORD)v68);
    if ((v67 & 1) == 0)
      goto LABEL_113;
    v55 = v199;
LABEL_102:
    v93 = v55[6 * v53 + 5];
    if ((v93 & 1) != 0)
    {
      v100 = (uint8x8_t)vcnt_s8((int8x8_t)((v93 >> 1) & ~(-1 << (v93 >> 58))));
      v100.i16[0] = vaddlv_u8(v100);
      v95 = v100.i32[0];
      goto LABEL_108;
    }
    v94 = *(unsigned int *)(v93 + 8);
    if (!(_DWORD)v94)
      goto LABEL_111;
    v95 = 0;
    v96 = *(int8x8_t **)v93;
    v97 = 8 * v94;
    do
    {
      v98 = *v96++;
      v99 = (uint8x8_t)vcnt_s8(v98);
      v99.i16[0] = vaddlv_u8(v99);
      v95 += v99.i32[0];
      v97 -= 8;
    }
    while (v97);
LABEL_108:
    if (v95 == 1)
    {
LABEL_109:
      v101 = (void **)v190;
      if ((v190 & 1) != 0)
      {
        v190 = v190 & 0xFC00000000000000 | (2
                                            * (((v190 >> 1) & ~(-1 << (v190 >> 58)) | (1 << v53)) & ~(-1 << (v190 >> 58)))) | 1;
        goto LABEL_113;
      }
LABEL_112:
      *((_QWORD *)*v101 + (v53 >> 6)) |= 1 << v53;
    }
    else
    {
LABEL_111:
      v101 = (void **)v189;
      if ((v189 & 1) == 0)
        goto LABEL_112;
      v189 = v189 & 0xFC00000000000000 | (2
                                          * (((v189 >> 1) & ~(-1 << (v189 >> 58)) | (1 << v53)) & ~(-1 << (v189 >> 58)))) | 1;
    }
LABEL_113:
    ++v53;
    ++v54;
  }
  while (v53 != v28);
  v29 = v190;
  v188 = *((_QWORD *)v178 + 1);
  v187 = 4;
  if ((v190 & 1) != 0)
  {
LABEL_119:
    v103 = (v29 >> 1) & ~(-1 << (v29 >> 58));
    if (v103)
    {
      i = __clz(__rbit64(v103));
      goto LABEL_141;
    }
    goto LABEL_120;
  }
  for (i = sub_1C476B7EC(v190); i != -1; i = sub_1C49143F4(&v190, v119))
  {
LABEL_141:
    v119 = i;
    if (LODWORD(v199[6 * i + 2]) == 1)
    {
      v184[0] = 0;
      v194 = 0;
      llvm::DependenceInfo::testSIV((uint64_t **)v178, (const llvm::SCEV *)v199[6 * i], (const llvm::SCEV *)v199[6 * i + 1], v184, (llvm::FullDependence *)v191, (llvm::DependenceInfo::Constraint *)&v187, &v194);
      if (v184[0] == v13)
      {
        v173 = v194;
        goto LABEL_135;
      }
    }
  }
LABEL_120:
  if ((v189 & 1) == 0)
  {
    v104 = *(unsigned int *)(v189 + 8);
    if ((_DWORD)v104)
    {
      v105 = 0;
      v106 = *(int8x8_t **)v189;
      v107 = 8 * v104;
      do
      {
        v108 = *v106++;
        v109 = (uint8x8_t)vcnt_s8(v108);
        v109.i16[0] = vaddlv_u8(v109);
        v105 += v109.i32[0];
        v107 -= 8;
      }
      while (v107);
    }
  }
  v110 = (*((_DWORD *)v178 + 10) + 1);
  v185 = 0u;
  v186 = 0u;
  *(_OWORD *)v184 = 0u;
  v194 = (llvm::SCEV *)&v196;
  v195 = 0x400000000;
  sub_1C4E18B10((char *)&v194, v110, (__int128 *)v184);
  v111 = *((_DWORD *)v178 + 10);
  v112 = *((_QWORD *)v178 + 1);
  if ((v111 + 1) > 1)
    v113 = (v111 + 1);
  else
    v113 = 1;
  v114 = (_QWORD *)((char *)v194 + 8);
  do
  {
    *v114 = v112;
    *((_DWORD *)v114 - 2) = 4;
    v114 += 6;
    --v113;
  }
  while (v113);
  if ((v189 & 1) != 0)
  {
    v116 = (v189 >> 1) & ~(-1 << (v189 >> 58));
    if (!v116)
      goto LABEL_133;
    v115 = __clz(__rbit64(v116));
  }
  else
  {
    v115 = sub_1C476B7EC(v189);
    if (v115 == -1)
      goto LABEL_133;
  }
  v172 = (v28 + 63) >> 6;
  while (2)
  {
    v120 = &v199[6 * v115];
    *(_QWORD *)v184 = 1;
    v123 = v120[5];
    v121 = (uint64_t *)(v120 + 5);
    v122 = (_QWORD *)v123;
    if ((v123 & 1) == 0)
    {
      v164 = (_QWORD *)operator new();
      v122 = v164;
      v165 = *v121;
      v166 = v164 + 2;
      *v164 = v164 + 2;
      v164[1] = 0x600000000;
      v167 = *(unsigned int *)(v165 + 8);
      if (v164 == (_QWORD *)v165 || v167 == 0)
        goto LABEL_232;
      if (v167 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v164, (uint64_t)(v164 + 2), *(unsigned int *)(v165 + 8), 8);
        v169 = *(unsigned int *)(v165 + 8);
        if (!(_DWORD)v169)
        {
LABEL_231:
          *((_DWORD *)v122 + 2) = v167;
LABEL_232:
          *((_DWORD *)v122 + 16) = *(_DWORD *)(v165 + 64);
          goto LABEL_149;
        }
        v166 = (void *)*v122;
      }
      else
      {
        v169 = *(unsigned int *)(v165 + 8);
      }
      memcpy(v166, *(const void **)v165, 8 * v169);
      goto LABEL_231;
    }
LABEL_149:
    v183 = 1;
    *(_QWORD *)v184 = v122;
    if (v174)
    {
      v183 = (v28 << 58) | 1;
      v124 = (void **)v183;
    }
    else
    {
      v170 = operator new();
      *(_QWORD *)v170 = v170 + 16;
      *(_QWORD *)(v170 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v170, v172, 0);
      *(_DWORD *)(v170 + 64) = v28;
      v182 = 1;
      v183 = v170;
      v124 = (void **)operator new();
      *v124 = v124 + 2;
      v124[1] = (void *)0x600000000;
      sub_1C4765AA4((char *)v124, v172, 0);
      *((_DWORD *)v124 + 16) = v28;
    }
    v181 = 1;
    v182 = (unint64_t)v124;
    v125 = *((_DWORD *)v178 + 10);
    v126 = (v125 + 1);
    if (v126 > 0x39)
    {
      v127 = operator new();
      *(_QWORD *)v127 = v127 + 16;
      *(_QWORD *)(v127 + 8) = 0x600000000;
      sub_1C4765AA4((char *)v127, (v125 + 64) >> 6, 0);
      *(_DWORD *)(v127 + 64) = v126;
    }
    else
    {
      v127 = (v126 << 58) | 1;
    }
    v181 = v127;
    if ((v184[0] & 1) != 0)
    {
      v131 = (*(_QWORD *)v184 >> 1) & ~(-1 << (*(_QWORD *)v184 >> 58));
      v129 = a3;
      v130 = (uint64_t)v178;
      if (!v131)
        goto LABEL_216;
      v128 = __clz(__rbit64(v131));
    }
    else
    {
      v128 = sub_1C476B7EC(*(uint64_t *)v184);
      v129 = a3;
      v130 = (uint64_t)v178;
      if (v128 == -1)
        goto LABEL_216;
    }
    while (2)
    {
      if (LODWORD(v199[6 * v128 + 2]) != 1)
      {
        v132 = (_QWORD *)v182;
        if ((v182 & 1) != 0)
        {
          v182 = v182 & 0xFC00000000000000 | (2
                                              * (((v182 >> 1) & ~(-1 << (v182 >> 58)) | (1 << v128)) & ~(-1 << (v182 >> 58)))) | 1;
          goto LABEL_164;
        }
        goto LABEL_162;
      }
      v132 = (_QWORD *)v183;
      if ((v183 & 1) == 0)
      {
LABEL_162:
        *(_QWORD *)(*v132 + (((unint64_t)v128 >> 3) & 0x1FFFFFF8)) |= 1 << v128;
        goto LABEL_164;
      }
      v183 = v183 & 0xFC00000000000000 | (2
                                          * (((v183 >> 1) & ~(-1 << (v183 >> 58)) | (1 << v128)) & ~(-1 << (v183 >> 58)))) | 1;
LABEL_164:
      v128 = sub_1C49143F4((unint64_t *)v184, v128);
      if (v128 != -1)
        continue;
      break;
    }
    while (1)
    {
LABEL_216:
      if ((v183 & 1) != 0)
      {
        v135 = (v183 >> 1) & ~(-1 << (v183 >> 58));
        if (!v135)
          break;
        v136 = __clz(__rbit64(v135));
LABEL_173:
        v137 = 0;
        do
        {
          v180 = 0;
          v179 = 0;
          llvm::DependenceInfo::testSIV((uint64_t **)v130, (const llvm::SCEV *)v199[6 * v136], (const llvm::SCEV *)v199[6 * v136 + 1], &v180, (llvm::FullDependence *)v191, (llvm::DependenceInfo::Constraint *)&v187, &v179);
          v138 = v180;
          if (v180 == v129 && v179 != 0)
          {
            v163 = 0;
            v173 = v179;
            goto LABEL_219;
          }
          if ((v181 & 1) != 0)
            v181 = v181 & 0xFC00000000000000 | (2
                                                * (((v181 >> 1) & ~(-1 << (v181 >> 58)) | (1 << v180)) & ~(-1 << (v181 >> 58)))) | 1;
          else
            *(_QWORD *)(*(_QWORD *)v181 + 8 * (v180 >> 6)) |= 1 << v180;
          v140 = llvm::DependenceInfo::intersectConstraints((llvm::DependenceInfo *)v130, (llvm::SCEV *)((char *)v194 + 48 * v138), (const llvm::DependenceInfo::Constraint *)&v187);
          if ((v183 & 1) != 0)
            v183 = ((2 * ~((-1 << (v183 >> 58)) | (1 << v136))) | 0xFC00000000000000) & v183 | 1;
          else
            *(_QWORD *)(*(_QWORD *)v183 + (((unint64_t)v136 >> 3) & 0x1FFFFFF8)) &= ~(1 << v136);
          v137 |= v140;
          v136 = sub_1C49143F4(&v183, v136);
        }
        while (v136 != -1);
        if ((v137 & 1) != 0)
        {
          if ((v182 & 1) == 0)
          {
            v141 = sub_1C476B7EC(v182);
            goto LABEL_191;
          }
          v142 = (v182 >> 1) & ~(-1 << (v182 >> 58));
          if (v142)
          {
            v141 = __clz(__rbit64(v142));
            do
            {
              v143 = v141;
              if (llvm::DependenceInfo::propagate((llvm::DependenceInfo *)v130, (const llvm::SCEV **)&v199[6 * v141], (const llvm::SCEV **)&v199[6 * v141 + 1], &v199[6 * v141 + 3], &v194, &v192))
              {
                v144 = *(uint64_t **)(v130 + 16);
                v145 = *((_DWORD *)v144 + 4);
                if (v145)
                {
                  v146 = *(_QWORD *)(v175 + 40);
                  v147 = *v144;
                  v148 = v145 - 1;
                  v149 = ((v146 >> 4) ^ (v146 >> 9)) & v148;
                  v150 = *(_QWORD *)(v147 + 16 * v149);
                  if (v146 == v150)
                  {
LABEL_199:
                    v153 = *(const llvm::Loop **)(v147 + 16 * v149 + 8);
                  }
                  else
                  {
                    v151 = 1;
                    while (v150 != -4096)
                    {
                      v152 = v149 + v151++;
                      v149 = v152 & v148;
                      v150 = *(_QWORD *)(v147 + 16 * v149);
                      if (v146 == v150)
                        goto LABEL_199;
                    }
                    v153 = 0;
                  }
                  v154 = v199[6 * v143 + 1];
                  v155 = *(_QWORD *)(v176 + 40);
                  v156 = ((v155 >> 4) ^ (v155 >> 9)) & v148;
                  v157 = *(_QWORD *)(v147 + 16 * v156);
                  if (v155 == v157)
                  {
LABEL_205:
                    v160 = *(const llvm::Loop **)(v147 + 16 * v156 + 8);
                  }
                  else
                  {
                    v158 = 1;
                    while (v157 != -4096)
                    {
                      v159 = v156 + v158++;
                      v156 = v159 & v148;
                      v157 = *(_QWORD *)(v147 + 16 * v156);
                      if (v155 == v157)
                        goto LABEL_205;
                    }
                    v160 = 0;
                  }
                }
                else
                {
                  v153 = 0;
                  v160 = 0;
                  v154 = v199[6 * v143 + 1];
                }
                v161 = llvm::DependenceInfo::classifyPair(v130, v199[6 * v143], v153, v154, v160, (uint64_t *)&v199[6 * v143 + 3]);
                LODWORD(v199[6 * v143 + 2]) = v161;
                if ((v161 - 2) >= 2)
                {
                  if (v161 == 1)
                  {
                    if ((v183 & 1) != 0)
                      v183 = v183 & 0xFC00000000000000 | (2
                                                          * (((v183 >> 1) & ~(-1 << (v183 >> 58)) | (1 << v143)) & ~(-1 << (v183 >> 58)))) | 1;
                    else
                      *(_QWORD *)(*(_QWORD *)v183 + ((v143 >> 3) & 0x1FFFFFF8)) |= 1 << v143;
                  }
                  if ((v182 & 1) != 0)
                    v182 = ((2 * ~((-1 << (v182 >> 58)) | (1 << v143))) | 0xFC00000000000000) & v182 | 1;
                  else
                    *(_QWORD *)(*(_QWORD *)v182 + ((v143 >> 3) & 0x1FFFFFF8)) &= ~(1 << v143);
                }
              }
              v141 = sub_1C49143F4(&v182, v143);
LABEL_191:
              ;
            }
            while (v141 != -1);
          }
        }
        continue;
      }
      v162 = *(unsigned int *)(v183 + 8);
      if (!(_DWORD)v162)
        break;
      v133 = *(_QWORD **)v183;
      v134 = 8 * v162;
      while (!*v133)
      {
        ++v133;
        v134 -= 8;
        if (!v134)
          goto LABEL_218;
      }
      v136 = sub_1C476B7EC(v183);
      if (v136 != -1)
        goto LABEL_173;
    }
LABEL_218:
    v163 = 1;
LABEL_219:
    sub_1C4914448((void ***)&v181);
    sub_1C4914448((void ***)&v182);
    sub_1C4914448((void ***)&v183);
    sub_1C4914448((void ***)v184);
    if (v163)
    {
      v115 = sub_1C49143F4(&v189, v115);
      if (v115 != -1)
        continue;
    }
    break;
  }
LABEL_133:
  if (v194 != (llvm::SCEV *)&v196)
    free(v194);
LABEL_135:
  sub_1C4914448((void ***)&v189);
  sub_1C4914448((void ***)&v190);
  sub_1C618E4C0((void ***)v199, (void ***)&v199[6 * v200]);
  if (v199 != v201)
    free(v199);
  v117 = v193;
  v193 = 0;
  if (v117)
    MEMORY[0x1CAA32F9C](v117, 0x1060C80768B1B2DLL);
  return v173;
}

uint64_t *sub_1C4E18778(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;

  v2 = a2;
  *a1 = 1;
  if (a2 > 0x39)
  {
    v4 = operator new();
    *(_QWORD *)v4 = v4 + 16;
    *(_QWORD *)(v4 + 8) = 0x600000000;
    sub_1C4765AA4((char *)v4, (v2 + 63) >> 6, 0);
    *(_DWORD *)(v4 + 64) = v2;
  }
  else
  {
    v4 = (a2 << 58) | 1;
  }
  *a1 = v4;
  return a1;
}

void sub_1C4E18808(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unsigned int v6;

  if (a1[3])
  {
    if (a1[2])
    {
      v4 = *(_QWORD *)a1;
      v5 = *(_OWORD *)a2;
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)v4 = v5;
      sub_1C4AFDC18((uint64_t *)(v4 + 24), (uint64_t *)(a2 + 24));
      sub_1C4AFDC18((uint64_t *)(v4 + 32), (uint64_t *)(a2 + 32));
      sub_1C4AFDC18((uint64_t *)(v4 + 40), (uint64_t *)(a2 + 40));
      v6 = a1[2];
      if (v6 == 1)
      {
LABEL_6:
        a1[2] = 1;
        return;
      }
      if (v6)
      {
        sub_1C618E4C0((void ***)(*(_QWORD *)a1 + 48), (void ***)(*(_QWORD *)a1 + 48 * v6));
        goto LABEL_6;
      }
    }
    sub_1C4E188E0(*(_QWORD *)a1, (__int128 *)a2);
    goto LABEL_6;
  }
  sub_1C618E600((uint64_t)a1, (__int128 *)a2);
}

uint64_t sub_1C4E188E0(uint64_t result, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;

  v3 = (_QWORD *)result;
  v4 = *a2;
  *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)result = v4;
  *(_QWORD *)(result + 24) = 1;
  v5 = *((_QWORD *)a2 + 3);
  if ((v5 & 1) == 0)
  {
    result = operator new();
    v5 = result;
    v8 = *((_QWORD *)a2 + 3);
    v9 = (void *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_QWORD *)(result + 8) = 0x600000000;
    if (result == v8)
      goto LABEL_21;
    v10 = *(_DWORD *)(v8 + 8);
    if (!v10)
      goto LABEL_21;
    if (v10 >= 7)
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, *(unsigned int *)(v8 + 8), 8);
      v11 = *(_DWORD *)(v8 + 8);
      if (!v11)
      {
LABEL_20:
        *(_DWORD *)(v5 + 8) = v10;
LABEL_21:
        *(_DWORD *)(v5 + 64) = *(_DWORD *)(v8 + 64);
        goto LABEL_2;
      }
      v9 = *(void **)v5;
    }
    else
    {
      v11 = *(_DWORD *)(v8 + 8);
    }
    result = (uint64_t)memcpy(v9, *(const void **)v8, 8 * v11);
    goto LABEL_20;
  }
LABEL_2:
  v3[3] = v5;
  v3[4] = 1;
  v6 = *((_QWORD *)a2 + 4);
  if ((v6 & 1) != 0)
    goto LABEL_3;
  result = operator new();
  v6 = result;
  v12 = *((_QWORD *)a2 + 4);
  v13 = (void *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x600000000;
  if (result != v12)
  {
    v14 = *(_DWORD *)(v12 + 8);
    if (v14)
    {
      if (v14 >= 7)
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, *(unsigned int *)(v12 + 8), 8);
        v15 = *(_DWORD *)(v12 + 8);
        if (!v15)
        {
LABEL_25:
          *(_DWORD *)(v6 + 8) = v14;
          goto LABEL_26;
        }
        v13 = *(void **)v6;
      }
      else
      {
        v15 = *(_DWORD *)(v12 + 8);
      }
      result = (uint64_t)memcpy(v13, *(const void **)v12, 8 * v15);
      goto LABEL_25;
    }
  }
LABEL_26:
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(v12 + 64);
LABEL_3:
  v3[4] = v6;
  v3[5] = 1;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 1) == 0)
  {
    result = operator new();
    v7 = result;
    v16 = *((_QWORD *)a2 + 5);
    v17 = (void *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_QWORD *)(result + 8) = 0x600000000;
    if (result == v16)
      goto LABEL_31;
    v18 = *(_DWORD *)(v16 + 8);
    if (!v18)
      goto LABEL_31;
    if (v18 >= 7)
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, *(unsigned int *)(v16 + 8), 8);
      v19 = *(_DWORD *)(v16 + 8);
      if (!v19)
      {
LABEL_30:
        *(_DWORD *)(v7 + 8) = v18;
LABEL_31:
        *(_DWORD *)(v7 + 64) = *(_DWORD *)(v16 + 64);
        goto LABEL_4;
      }
      v17 = *(void **)v7;
    }
    else
    {
      v19 = *(_DWORD *)(v16 + 8);
    }
    result = (uint64_t)memcpy(v17, *(const void **)v16, 8 * v19);
    goto LABEL_30;
  }
LABEL_4:
  v3[5] = v7;
  return result;
}

char *sub_1C4E18B10(char *result, unint64_t a2, __int128 *a3)
{
  _OWORD **v4;
  _DWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = (_OWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v5 = result + 8;
    v8 = *((unsigned int *)result + 2);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *((unsigned int *)result + 2);
    if (v9)
    {
      v10 = *(_OWORD **)result;
      do
      {
        v11 = *a3;
        v12 = a3[2];
        v10[1] = a3[1];
        v10[2] = v12;
        *v10 = v11;
        v10 += 3;
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v13 = v8 - a2;
    if (v8 < a2)
    {
      v14 = (_OWORD *)(*(_QWORD *)result + 48 * v8);
      do
      {
        v15 = *a3;
        v16 = a3[2];
        v14[1] = a3[1];
        v14[2] = v16;
        *v14 = v15;
        v14 += 3;
      }
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    *((_DWORD *)result + 2) = 0;
    v5 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 48);
    v6 = *v4;
    v7 = a2;
    do
    {
      *v6 = v18;
      v6[1] = v19;
      v6[2] = v20;
      v6 += 3;
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

uint64_t sub_1C4E18C0C()
{
  __n128 v1;
  int v2;
  int v3;
  int v4;
  int *v5;

  LOBYTE(v2) = 1;
  v5 = &v2;
  v3 = 1;
  v4 = 1;
  v1.n128_u64[0] = (unint64_t)"Try to delinearize array references.";
  v1.n128_u64[1] = 36;
  sub_1C618E104((char **)&v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F1530, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  v3 = 1;
  v4 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable checks that try to statically verify validity of delinearized subscripts. E"
                                     "nabling this option may result in incorrect dependence vectors for languages that a"
                                     "llow the subscript of one dimension to underflow or overflow into another dimension.";
  v1.n128_u64[1] = 250;
  sub_1C617D830((llvm::cl::Option *)&unk_1ED7F15F0, "da-disable-delinearization-checks", (_BYTE **)&v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F15F0, &dword_1C475E000);
  v3 = 1;
  v4 = 7;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Maximum depth allowed for the recursive algorithm used to explore MIV direction vectors.";
  v1.n128_u64[1] = 88;
  sub_1C618E24C(&v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F16B0, &dword_1C475E000);
}

uint64_t llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::AbstractDependenceGraphBuilder(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = &unk_1E8135FC8;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createDefUseEdges(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t i;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t *v20;
  uint64_t (*v21)();
  uint64_t *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int *)(v1 + 96);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(v1 + 88);
    v5 = &v4[v2];
    v20 = v5;
    do
    {
      v6 = *v4;
      v27 = v29;
      v28 = 0x200000000;
      v21 = sub_1C618F17C;
      v22 = &v26;
      llvm::DDGNode::collectInstructions(v6, (uint64_t)&v21, (unsigned int *)&v27);
      v21 = (uint64_t (*)())v25;
      v22 = (uint64_t *)v25;
      v23 = 4;
      v24 = 0;
      if ((_DWORD)v28)
      {
        v7 = (char *)v27;
        v8 = (char *)v27 + 8 * v28;
        do
        {
          for (i = *(_QWORD *)(*(_QWORD *)v7 + 8); i; i = *(_QWORD *)(i + 8))
          {
            v10 = *(_QWORD *)(i + 24);
            if (v10)
              v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
            else
              v11 = 0;
            if (v11)
            {
              v26 = 0;
              v12 = sub_1C6144BDC(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), v10, &v26);
              v13 = *(_QWORD *)(a1 + 32);
              v14 = *(unsigned int *)(a1 + 48);
              if (v12 && v26 != v13 + 16 * v14)
              {
                v26 = 0;
                v16 = (sub_1C6144BDC(v13, v14, v10, &v26) & 1) != 0
                    ? v26
                    : *(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48);
                v17 = *(_QWORD *)(v16 + 8);
                if (v17 && v17 != v6)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, *(_QWORD *)(v16 + 8));
                  if (v19)
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v6, v17);
                }
              }
            }
          }
          v7 += 8;
        }
        while (v7 != v8);
        v5 = v20;
        if (v22 != (uint64_t *)v21)
          free(v22);
      }
      if (v27 != v29)
        free(v27);
      ++v4;
    }
    while (v4 != v5);
  }
}

{
  __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE17createDefUseEdgesEv(a1);
}

void llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::simplify(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unsigned int i;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD **j;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD v38[2];
  int v39;
  unint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[256];
  void *v45;
  uint64_t v46;
  _QWORD v47[33];

  v47[32] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 96))(a1))
  {
    v40 = (unint64_t *)v44;
    v41 = (unint64_t *)v44;
    v42 = 32;
    v43 = 0;
    v38[0] = 0;
    v38[1] = 0;
    v39 = 0;
    v2 = a1[1];
    v3 = *(unsigned int *)(v2 + 96);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(v2 + 88);
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)(*v4 + 40);
        if (v6 - *(_QWORD *)(*v4 + 32) == 8)
        {
          v7 = *(_QWORD *)(v6 - 8);
          if (*(_DWORD *)(v7 + 8) == 1)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v40, *v4);
            v36 = *(_QWORD *)v7;
            v37 = 0;
            sub_1C6144658((uint64_t)&v45, (uint64_t)v38, &v36, &v37);
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      v8 = a1[1];
      v9 = *(unsigned int *)(v8 + 96);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v8 + 88);
        v11 = v10 + 8 * v9;
        v12 = v38[0];
        v13 = v39;
        v14 = v39 - 1;
        do
        {
          v15 = *(uint64_t ***)(*(_QWORD *)v10 + 32);
          v16 = *(uint64_t ***)(*(_QWORD *)v10 + 40);
          while (v15 != v16)
          {
            if (v13)
            {
              v17 = **v15;
              v18 = ((v17 >> 4) ^ (v17 >> 9)) & v14;
              v19 = *(_QWORD *)(v12 + 16 * v18);
              if (v17 == v19)
              {
LABEL_15:
                if ((_DWORD)v18 != v13)
                  ++*(_DWORD *)(v12 + 16 * v18 + 8);
              }
              else
              {
                v20 = 1;
                while (v19 != -4096)
                {
                  v21 = v18 + v20++;
                  v18 = v21 & v14;
                  v19 = *(_QWORD *)(v12 + 16 * v18);
                  if (v17 == v19)
                    goto LABEL_15;
                }
              }
            }
            ++v15;
          }
          v10 += 8;
        }
        while (v10 != v11);
      }
    }
    v22 = v41;
    if (v41 == v40)
      v23 = (uint64_t *)((char *)&v42 + 4);
    else
      v23 = &v42;
    v24 = *(unsigned int *)v23;
    v25 = &v41[v24];
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      while (*v22 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v22;
        v26 -= 8;
        if (!v26)
        {
          v22 = v25;
          break;
        }
      }
    }
    v45 = v47;
    v46 = 0x2000000000;
    sub_1C618F808((unsigned int *)&v45, v22, v25, v25);
    for (i = v46; (_DWORD)v46; i = v46)
    {
      v28 = *((_QWORD *)v45 + i - 1);
      LODWORD(v46) = i - 1;
      v29 = (char *)sub_1C477672C((uint64_t)&v40, v28);
      if (v41 == v40)
        v30 = (uint64_t *)((char *)&v42 + 4);
      else
        v30 = &v42;
      if (v29 != (char *)&v41[*(unsigned int *)v30])
      {
        *(_QWORD *)v29 = -2;
        ++v43;
        v31 = **(_QWORD **)(*(_QWORD *)(v28 + 40) - 8);
        v36 = v31;
        if (*((_DWORD *)sub_1C6144C70((uint64_t)v38, &v36) + 2) == 1)
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 104))(a1, v28, v31))
          {
            for (j = *(_QWORD ***)(v31 + 32); j != *(_QWORD ***)(v31 + 40); ++j)
            {
              if (**j == v28)
                goto LABEL_36;
            }
            (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, v28, v31);
            v33 = (char *)sub_1C477672C((uint64_t)&v40, v31);
            if (v41 == v40)
              v34 = (uint64_t *)((char *)&v42 + 4);
            else
              v34 = &v42;
            if (v33 != (char *)&v41[*(unsigned int *)v34])
            {
              *(_QWORD *)v33 = -2;
              ++v43;
              v35 = v46;
              if (v46 >= (unint64_t)HIDWORD(v46))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 8);
                v35 = v46;
              }
              *((_QWORD *)v45 + v35) = v28;
              LODWORD(v46) = v46 + 1;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v40, v28);
            }
          }
        }
      }
LABEL_36:
      ;
    }
    if (v45 != v47)
      free(v45);
    MEMORY[0x1CAA32FB4](v38[0], 8);
    if (v41 != v40)
      free(v41);
  }
}

{
  __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE8simplifyEv(a1);
}

void llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createAndConnectRootNode(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  __int128 v22;
  _QWORD *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[32];
  uint64_t v32;
  _BYTE *v33;
  __int128 v34;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v27 = v31;
  v28 = v31;
  v29 = 4;
  v30 = 0;
  v3 = a1[1];
  v4 = *(unsigned int *)(v3 + 96);
  if ((_DWORD)v4)
  {
    v5 = v2;
    v6 = *(uint64_t **)(v3 + 88);
    v7 = &v6[v4];
    while (1)
    {
      v8 = *v6;
      if (v5 == *v6)
        goto LABEL_4;
      sub_1C618F1C0(&v32, *v6, (llvm::SmallPtrSetImplBase *)&v27);
      v9 = v33;
      v21[0] = v32;
      v21[1] = v33;
      v22 = v34;
      v10 = (_BYTE *)v34;
      v23 = &v27;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      v34 = 0uLL;
      v33 = 0;
      sub_1C4E19D7C(&v33, v9, v10, (v10 - v9) >> 5);
      v18 = 0;
      v19 = 0;
      v20 = 0;
      sub_1C4E19D7C(&v18, v24, v25, (v25 - v24) >> 5);
      v11 = v18;
      v12 = v19 - (_QWORD)v18;
      while (1)
      {
        v13 = (void *)v34;
        if ((_QWORD)v34 - (_QWORD)v33 != v12)
          goto LABEL_21;
        if (v33 == (_BYTE *)v34)
          break;
        v14 = 0;
        while (1)
        {
          v15 = &v33[v14];
          if (*(_QWORD *)&v33[v14] != *(_QWORD *)&v11[v14])
            break;
          v16 = v11[v14 + 24];
          if (v15[24])
            v17 = v16 == 0;
          else
            v17 = 1;
          if (v17)
          {
            if ((v15[24] == 0) == (v16 != 0))
              break;
          }
          else if (*(_QWORD *)&v33[v14 + 8] != *(_QWORD *)&v11[v14 + 8])
          {
            break;
          }
          v14 += 32;
          if (v15 + 32 == (_BYTE *)v34)
          {
            v13 = v33;
            goto LABEL_24;
          }
        }
LABEL_21:
        if (*(_QWORD *)(v34 - 32) == v8)
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 56))(a1, v5, v8);
        sub_1C618F2AC((char *)&v32);
      }
LABEL_24:
      if (v11)
        operator delete(v11);
      if (v13)
        operator delete(v13);
      sub_1C618F0A8(v21);
LABEL_4:
      if (++v6 == v7)
      {
        if (v28 != v27)
          free(v28);
        return;
      }
    }
  }
}

{
  __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE24createAndConnectRootNodeEv(a1);
}

char **llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createPiBlocks(unsigned int *a1)
{
  char **result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD v27[4];
  _BYTE *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[12];
  uint64_t v33;
  _QWORD v34[3];
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unsigned int *v41;
  char *v42;
  uint64_t v43;
  _QWORD v44[13];
  _QWORD v45[7];
  void *__s2;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD v52[27];

  v52[24] = *MEMORY[0x1E0C80C00];
  result = (char **)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 88))(a1);
  if ((_DWORD)result)
  {
    v50 = (char *)v52;
    v51 = 0x400000000;
    v3 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 80);
    LODWORD(v34[0]) = 0;
    v34[1] = 0;
    v34[2] = 0;
    v35 = 0;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0;
    sub_1C618F420((int *)v34, v3);
    sub_1C4E19E04(v34);
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    sub_1C618EBFC((uint64_t)&v41, (uint64_t)v34, (uint64_t)v32);
    sub_1C617D7D4(v32);
    sub_1C617D7D4(v34);
    sub_1C618F5A0((uint64_t)v27, (uint64_t)&v41);
    sub_1C618F5A0((uint64_t)v45, (uint64_t)v44);
    while (1)
    {
      v4 = v30;
      v5 = v48;
      if (v31 - v30 == v49 - v48)
      {
        while (v4 != v31)
        {
          if (*(_QWORD *)v4 != *(_QWORD *)v5
            || *(_QWORD *)(v4 + 8) != *(_QWORD *)(v5 + 8)
            || *(_DWORD *)(v4 + 24) != *(_DWORD *)(v5 + 24))
          {
            goto LABEL_11;
          }
          v4 += 32;
          v5 += 32;
        }
        if (v29 - v28 == v47 - (_QWORD)__s2 && !memcmp(v28, __s2, v29 - v28))
          break;
      }
LABEL_11:
      if ((unint64_t)(v29 - v28) >= 9)
      {
        v25 = v29;
        v26 = v28;
        sub_1C618ED50((uint64_t)&v50, &v26, &v25);
      }
      sub_1C4E19E04(v27);
    }
    sub_1C617D7D4(v45);
    sub_1C617D7D4(v27);
    sub_1C617D7D4(v44);
    sub_1C617D7D4(&v41);
    if ((_DWORD)v51)
    {
      v6 = v50;
      v24 = &v50[48 * v51];
      do
      {
        v7 = *(uint64_t **)v6;
        v8 = *((unsigned int *)v6 + 2);
        v9 = (uint64_t *)(*(_QWORD *)v6 + 8 * v8);
        v41 = a1;
        v10 = 126 - 2 * __clz(v8);
        if ((_DWORD)v8)
          v11 = v10;
        else
          v11 = 0;
        sub_1C4E19FBC((uint64_t)v7, v9, &v41, v11, 1);
        v12 = (*(uint64_t (**)(unsigned int *, char *))(*(_QWORD *)a1 + 32))(a1, v6);
        sub_1C618F7A4((llvm::SmallPtrSetImplBase *)&v41, *(uint64_t **)v6, (uint64_t *)(*(_QWORD *)v6 + 8 * *((unsigned int *)v6 + 2)));
        v13 = *((_QWORD *)a1 + 1);
        v14 = *(unsigned int *)(v13 + 96);
        if ((_DWORD)v14)
        {
          v15 = *(uint64_t **)(v13 + 88);
          v16 = &v15[v14];
          do
          {
            v17 = *v15;
            if (v12 != *v15)
            {
              v18 = (char *)sub_1C477672C((uint64_t)&v41, *v15);
              v19 = v42 == (char *)v41 ? (unsigned int *)((char *)&v43 + 4) : (unsigned int *)&v43;
              if (v18 == &v42[8 * *v19])
              {
                v45[0] = 0;
                v26 = (char *)a1;
                v27[0] = v45;
                v27[1] = &v26;
                v27[2] = a1;
                v20 = *((unsigned int *)v6 + 2);
                if ((_DWORD)v20)
                {
                  v21 = *(uint64_t **)v6;
                  v22 = 8 * v20;
                  do
                  {
                    v23 = *v21++;
                    sub_1C618EDC0((uint64_t)v27, v17, v23, v12, 0);
                    sub_1C618EDC0((uint64_t)v27, v23, v17, v12, 1u);
                    v22 -= 8;
                  }
                  while (v22);
                }
              }
            }
            ++v15;
          }
          while (v15 != v16);
        }
        if (v42 != (char *)v41)
          free(v42);
        v6 += 48;
      }
      while (v6 != v24);
    }
    sub_1C61446F0(a1 + 14);
    sub_1C61446F0(a1 + 20);
    return sub_1C618F3AC(&v50);
  }
  return result;
}

{
  return __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE14createPiBlocksEv(a1);
}

void llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::sortNodesTopologically(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[65];

  v29[64] = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1))
    return;
  v27 = v29;
  v28 = 0x4000000000;
  sub_1C618EF88((uint64_t)&v19, *(_QWORD *)(a1[1] + 80));
  sub_1C618FBD4((const void **)&v14, (llvm::SmallPtrSetImplBase *)&v19);
  sub_1C618FBD4((const void **)&v9, (llvm::SmallPtrSetImplBase *)&v23);
  while (1)
  {
    if (v17 != v12)
      goto LABEL_14;
    if (!v17)
      break;
    v2 = v11;
    v3 = v16;
    while (*v3 == *v2 && v3[1] == v2[1])
    {
      v3 += 3;
      v2 += 3;
      if (v3 == (_QWORD *)((char *)v16 + 24 * v17))
        goto LABEL_20;
    }
LABEL_14:
    v5 = *((_QWORD *)v16 + 3 * v17 - 3);
    if (*(_DWORD *)(v5 + 56) == 3)
    {
      v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 64))(a1, v5);
      sub_1C618FC28((unsigned int *)&v27, (uint64_t)v27 + 8 * v28, *(uint64_t **)v7, (uint64_t *)(*(_QWORD *)v7 + 8 * *(unsigned int *)(v7 + 8)));
    }
    v6 = v28;
    if (v28 >= (unint64_t)HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
      v6 = v28;
    }
    *((_QWORD *)v27 + v6) = v5;
    LODWORD(v28) = v28 + 1;
    if (--v17)
      sub_1C618FAE4((unint64_t)&v14);
  }
LABEL_20:
  if (v11 != &v13)
    free(v11);
  if (v10 != v9)
    free(v10);
  if (v16 != &v18)
    free(v16);
  if (v15 != v14)
    free(v15);
  if (v25 != &v26)
    free(v25);
  if (v24 != v23)
    free(v24);
  if (v21 != &v22)
    free(v21);
  if (v20 != v19)
    free(v20);
  v8 = a1[1];
  *(_DWORD *)(v8 + 96) = 0;
  sub_1C61898C0((unsigned int *)(v8 + 88), (uint64_t)v27 + 8 * v28, (uint64_t)v27 + 8 * v28, (uint64_t)v27, (uint64_t)v27);
  if (v27 != v29)
    free(v27);
}

{
  __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE22sortNodesTopologicallyEv(a1);
}

uint64_t llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::getOrdinal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_1C617C470(a1 + 56, &v3)[1];
}

{
  uint64_t v3;

  v3 = a2;
  return sub_1C617C470(a1 + 80, &v3)[1];
}

uint64_t llvm::DependenceGraphInfo<llvm::DDGNode>::DependenceGraphInfo(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = &unk_1E8136050;
  v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  v7 = *a3;
  v8 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = &unk_1E8136050;
  v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  v7 = *a3;
  v8 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

__n128 llvm::DependenceGraphInfo<llvm::DDGNode>::DependenceGraphInfo(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  *(_QWORD *)a1 = &unk_1E8136050;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

{
  __int128 v2;
  __n128 result;
  __int128 v4;

  *(_QWORD *)a1 = &unk_1E8136050;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return result;
}

uint64_t llvm::DependenceGraphInfo<llvm::DDGNode>::getName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v1 = a1 + 8;
  v2 = v3;
  if (*(char *)(v1 + 23) >= 0)
    return v1;
  return v2;
}

uint64_t llvm::DependenceGraphInfo<llvm::DDGNode>::getRoot(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

_QWORD *sub_1C4E19D7C(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    if (a2 != a3)
    {
      v9 = (a3 - a2) & 0xFFFFFFFFFFFFFFE0;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

_QWORD *sub_1C4E19E04(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  result[8] = result[7];
  if (result[10] != result[11])
  {
    v1 = result;
    v2 = (uint64_t)(result + 1);
    while (1)
    {
      sub_1C618F4DC((uint64_t)v1);
      v4 = v1[10];
      v3 = v1[11];
      v18 = *(_QWORD *)(v3 - 32);
      v5 = *(_DWORD *)(v3 - 8);
      v1[11] = v3 - 32;
      if (v4 != v3 - 32 && *(_DWORD *)(v3 - 40) > v5)
        *(_DWORD *)(v3 - 40) = v5;
      result = sub_1C6144C70(v2, &v18);
      if (v5 == *((_DWORD *)result + 2))
        break;
      if (v1[10] == v1[11])
        return result;
    }
    v6 = (_QWORD *)v1[8];
    do
    {
      v7 = v1[5];
      v8 = v1[9];
      if ((unint64_t)v6 >= v8)
      {
        v10 = (_QWORD *)v1[7];
        v11 = v6 - v10;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = *(_QWORD *)(v7 - 8);
        v9 = v16 + 8;
        if (v6 != v10)
        {
          do
          {
            v17 = *--v6;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v6 != v10);
          v6 = (_QWORD *)v1[7];
        }
        v1[7] = v16;
        v1[8] = v9;
        v1[9] = &v15[8 * v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = *(_QWORD *)(v7 - 8);
        v9 = v6 + 1;
      }
      v1[8] = v9;
      v1[5] -= 8;
      result = sub_1C6144C70(v2, v9 - 1);
      *((_DWORD *)result + 2) = -1;
      v6 = (_QWORD *)v1[8];
    }
    while (*(v6 - 1) != v18);
  }
  return result;
}

uint64_t sub_1C4E19FBC(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v140;
  uint64_t v141;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2;
  v135 = a2 - 1;
  while (2)
  {
    v10 = v8;
    v11 = (char *)v9 - (char *)v8;
    v12 = v9 - v8;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v127 = *v8;
        v128 = *a3 + 80;
        v141 = *(a2 - 1);
        v129 = sub_1C617C470(v128, &v141)[1];
        v141 = v127;
        result = (uint64_t)sub_1C617C470(v128, &v141);
        if (v129 < *(_QWORD *)(result + 8))
        {
          v130 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v130;
        }
        return result;
      case 3:
        return (uint64_t)sub_1C4E1AB50(v8, v8 + 1, v135, a3);
      case 4:
        return (uint64_t)sub_1C4E1AF60(v8, v8 + 1, v8 + 2, v135, a3);
      case 5:
        return (uint64_t)sub_1C4E1B0A8(v8, v8 + 1, v8 + 2, v8 + 3, v135, a3);
      default:
        if (v11 <= 191)
        {
          v65 = v8 + 1;
          v66 = v8 == v9 || v65 == v9;
          v67 = v66;
          if ((a5 & 1) != 0)
          {
            if ((v67 & 1) == 0)
            {
              v68 = 0;
              v69 = v8;
              do
              {
                v71 = *v69;
                v70 = v69[1];
                v69 = v65;
                v72 = *a3 + 80;
                v141 = v70;
                v73 = sub_1C617C470(v72, &v141)[1];
                v141 = v71;
                result = (uint64_t)sub_1C617C470(v72, &v141);
                if (v73 < *(_QWORD *)(result + 8))
                {
                  v74 = *v69;
                  v75 = v68;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v75 + 8) = *(uint64_t *)((char *)v10 + v75);
                    if (!v75)
                      break;
                    v76 = *(uint64_t *)((char *)v10 + v75 - 8);
                    v77 = *a3 + 80;
                    v141 = v74;
                    v78 = sub_1C617C470(v77, &v141)[1];
                    v141 = v76;
                    result = (uint64_t)sub_1C617C470(v77, &v141);
                    v75 -= 8;
                    if (v78 >= *(_QWORD *)(result + 8))
                    {
                      v79 = (uint64_t *)((char *)v10 + v75 + 8);
                      goto LABEL_72;
                    }
                  }
                  v79 = v10;
LABEL_72:
                  *v79 = v74;
                }
                v65 = v69 + 1;
                v68 += 8;
              }
              while (v69 + 1 != a2);
            }
          }
          else if ((v67 & 1) == 0)
          {
            do
            {
              v117 = *v10;
              v116 = v10[1];
              v10 = v65;
              v118 = *a3 + 80;
              v141 = v116;
              v119 = sub_1C617C470(v118, &v141)[1];
              v141 = v117;
              result = (uint64_t)sub_1C617C470(v118, &v141);
              if (v119 < *(_QWORD *)(result + 8))
              {
                v120 = *v10;
                v121 = v10;
                do
                {
                  v122 = v121;
                  v123 = *--v121;
                  *v122 = v123;
                  v124 = *(v122 - 2);
                  v125 = *a3 + 80;
                  v141 = v120;
                  v126 = sub_1C617C470(v125, &v141)[1];
                  v141 = v124;
                  result = (uint64_t)sub_1C617C470(v125, &v141);
                }
                while (v126 < *(_QWORD *)(result + 8));
                *v121 = v120;
              }
              v65 = v10 + 1;
            }
            while (v10 + 1 != a2);
          }
          return result;
        }
        v140 = v8;
        if (!a4)
        {
          if (v8 == v9)
            return result;
          v80 = (unint64_t)(v12 - 2) >> 1;
          v81 = v80;
          do
          {
            v82 = v81;
            if (v80 >= v81)
            {
              v83 = (2 * v81) | 1;
              v84 = &v10[v83];
              if (2 * v81 + 2 < v12)
              {
                v136 = v84[1];
                v85 = *a3 + 80;
                v141 = *v84;
                v86 = sub_1C617C470(v85, &v141)[1];
                v141 = v136;
                v34 = v86 >= sub_1C617C470(v85, &v141)[1];
                v10 = v140;
                if (!v34)
                {
                  ++v84;
                  v83 = 2 * v82 + 2;
                }
              }
              v87 = &v10[v82];
              v88 = *v87;
              v89 = *a3 + 80;
              v141 = *v84;
              v90 = sub_1C617C470(v89, &v141)[1];
              v141 = v88;
              result = (uint64_t)sub_1C617C470(v89, &v141);
              v34 = v90 >= *(_QWORD *)(result + 8);
              v10 = v140;
              if (v34)
              {
                v137 = *v87;
                do
                {
                  v91 = v84;
                  *v87 = *v84;
                  if (v80 < v83)
                    break;
                  v92 = (2 * v83) | 1;
                  v84 = &v140[v92];
                  if (2 * v83 + 2 < v12)
                  {
                    v133 = v84[1];
                    v93 = *a3 + 80;
                    v141 = *v84;
                    v131 = sub_1C617C470(v93, &v141)[1];
                    v141 = v133;
                    if (v131 < sub_1C617C470(v93, &v141)[1])
                    {
                      ++v84;
                      v92 = 2 * v83 + 2;
                    }
                  }
                  v94 = *a3 + 80;
                  v141 = *v84;
                  v134 = sub_1C617C470(v94, &v141)[1];
                  v141 = v137;
                  result = (uint64_t)sub_1C617C470(v94, &v141);
                  v87 = v91;
                  v83 = v92;
                }
                while (v134 >= *(_QWORD *)(result + 8));
                *v91 = v137;
                v10 = v140;
              }
            }
            v81 = v82 - 1;
          }
          while (v82);
          while (2)
          {
            v95 = 0;
            v96 = v12 - 2;
            v132 = *v10;
            if (v12 < 2)
              v96 = v12 - 1;
            v97 = v96 >> 1;
            v98 = v10;
            do
            {
              v99 = &v98[v95 + 1];
              v100 = (2 * v95) | 1;
              v101 = 2 * v95 + 2;
              if (v101 < v12)
              {
                v138 = v98[v95 + 2];
                v102 = *a3 + 80;
                v141 = *v99;
                v103 = sub_1C617C470(v102, &v141)[1];
                v141 = v138;
                result = (uint64_t)sub_1C617C470(v102, &v141);
                if (v103 < *(_QWORD *)(result + 8))
                {
                  ++v99;
                  v100 = v101;
                }
              }
              *v98 = *v99;
              v98 = v99;
              v95 = v100;
            }
            while (v100 <= v97);
            v104 = a2 - 1;
            v66 = v99 == --a2;
            if (!v66)
            {
              *v99 = *v104;
              *v104 = v132;
              v10 = v140;
              v105 = (char *)v99 - (char *)v140 + 8;
              if (v105 >= 9)
              {
                v106 = (((unint64_t)v105 >> 3) - 2) >> 1;
                v107 = &v140[v106];
                v108 = *v99;
                v109 = *a3 + 80;
                v141 = *v107;
                v110 = sub_1C617C470(v109, &v141)[1];
                v141 = v108;
                result = (uint64_t)sub_1C617C470(v109, &v141);
                if (v110 < *(_QWORD *)(result + 8))
                {
                  v111 = *v99;
                  do
                  {
                    v112 = v107;
                    *v99 = *v107;
                    if (!v106)
                      break;
                    v106 = (v106 - 1) >> 1;
                    v107 = &v140[v106];
                    v113 = *a3 + 80;
                    v141 = *v107;
                    v114 = sub_1C617C470(v113, &v141)[1];
                    v141 = v111;
                    result = (uint64_t)sub_1C617C470(v113, &v141);
                    v99 = v112;
                  }
                  while (v114 < *(_QWORD *)(result + 8));
                  *v112 = v111;
LABEL_109:
                  v10 = v140;
                }
              }
              if (v12-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *v99 = v132;
          goto LABEL_109;
        }
        v13 = &v8[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C4E1AB50(&v10[(unint64_t)v12 >> 1], v10, v135, a3);
        }
        else
        {
          sub_1C4E1AB50(v10, &v10[(unint64_t)v12 >> 1], v135, a3);
          sub_1C4E1AB50(v10 + 1, v13 - 1, a2 - 2, a3);
          v14 = &v10[((unint64_t)v12 >> 1) + 1];
          sub_1C4E1AB50(v140 + 2, v14, a2 - 3, a3);
          v10 = v140;
          sub_1C4E1AB50(v13 - 1, v13, v14, a3);
          v15 = *v140;
          *v140 = *v13;
          *v13 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v39 = *v10;
          v40 = *a3 + 80;
          v141 = *(v10 - 1);
          v41 = sub_1C617C470(v40, &v141)[1];
          v141 = v39;
          if (v41 >= sub_1C617C470(v40, &v141)[1])
          {
            v8 = v10;
            v42 = *v10;
            v43 = *v135;
            v44 = *a3 + 80;
            v141 = v42;
            v45 = sub_1C617C470(v44, &v141)[1];
            v141 = v43;
            result = (uint64_t)sub_1C617C470(v44, &v141);
            if (v45 >= *(_QWORD *)(result + 8))
            {
              v61 = v8 + 1;
              do
              {
                v8 = v61;
                if (v61 >= v9)
                  break;
                ++v61;
                v62 = *v8;
                v63 = *a3 + 80;
                v141 = v42;
                v64 = sub_1C617C470(v63, &v141)[1];
                v141 = v62;
                result = (uint64_t)sub_1C617C470(v63, &v141);
              }
              while (v64 >= *(_QWORD *)(result + 8));
            }
            else
            {
              do
              {
                v46 = v8[1];
                ++v8;
                v47 = *a3 + 80;
                v141 = v42;
                v48 = sub_1C617C470(v47, &v141)[1];
                v141 = v46;
                result = (uint64_t)sub_1C617C470(v47, &v141);
              }
              while (v48 >= *(_QWORD *)(result + 8));
            }
            v49 = v9;
            if (v8 < v9)
            {
              v49 = v9;
              do
              {
                v50 = *--v49;
                v51 = *a3 + 80;
                v141 = v42;
                v52 = sub_1C617C470(v51, &v141)[1];
                v141 = v50;
                result = (uint64_t)sub_1C617C470(v51, &v141);
              }
              while (v52 < *(_QWORD *)(result + 8));
            }
            while (v8 < v49)
            {
              v53 = *v8;
              *v8 = *v49;
              *v49 = v53;
              do
              {
                v54 = v8[1];
                ++v8;
                v55 = *a3 + 80;
                v141 = v42;
                v56 = sub_1C617C470(v55, &v141)[1];
                v141 = v54;
              }
              while (v56 >= sub_1C617C470(v55, &v141)[1]);
              do
              {
                v57 = *--v49;
                v58 = *a3 + 80;
                v141 = v42;
                v59 = sub_1C617C470(v58, &v141)[1];
                v141 = v57;
                result = (uint64_t)sub_1C617C470(v58, &v141);
              }
              while (v59 < *(_QWORD *)(result + 8));
            }
            v60 = v8 - 1;
            if (v8 - 1 != v140)
              *v140 = *v60;
            a5 = 0;
            *v60 = v42;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
        {
          v18 = *a3 + 80;
          v141 = v10[v16 + 1];
          v19 = sub_1C617C470(v18, &v141)[1];
          v141 = v17;
          ++v16;
        }
        while (v19 < sub_1C617C470(v18, &v141)[1]);
        v20 = &v10[v16];
        if (v16 == 1)
        {
          v9 = a2;
          do
          {
            if (v20 >= v9)
              break;
            v36 = *--v9;
            v37 = *a3 + 80;
            v141 = v36;
            v38 = sub_1C617C470(v37, &v141)[1];
            v141 = v17;
          }
          while (v38 >= sub_1C617C470(v37, &v141)[1]);
        }
        else
        {
          do
          {
            v21 = *--v9;
            v22 = *a3 + 80;
            v141 = v21;
            v23 = sub_1C617C470(v22, &v141)[1];
            v141 = v17;
          }
          while (v23 >= sub_1C617C470(v22, &v141)[1]);
        }
        if (v20 >= v9)
        {
          v33 = v20 - 1;
        }
        else
        {
          v24 = v20;
          v25 = v9;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
              v28 = *a3 + 80;
              v141 = v27;
              v29 = sub_1C617C470(v28, &v141)[1];
              v141 = v17;
            }
            while (v29 < sub_1C617C470(v28, &v141)[1]);
            do
            {
              v30 = *--v25;
              v31 = *a3 + 80;
              v141 = v30;
              v32 = sub_1C617C470(v31, &v141)[1];
              v141 = v17;
            }
            while (v32 >= sub_1C617C470(v31, &v141)[1]);
          }
          while (v24 < v25);
          v33 = v24 - 1;
        }
        if (v33 != v140)
          *v140 = *v33;
        *v33 = v17;
        v34 = v20 >= v9;
        v9 = a2;
        if (!v34)
        {
LABEL_28:
          result = sub_1C4E19FBC(v140, v33, a3, a4, a5 & 1);
          a5 = 0;
          v8 = v33 + 1;
          continue;
        }
        v35 = sub_1C4E1AD1C(v140, v33, a3);
        v8 = v33 + 1;
        result = sub_1C4E1AD1C(v33 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_28;
        }
        a2 = v33;
        v8 = v140;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C4E1AB50(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *a1;
  v9 = *a4 + 80;
  v26 = *a2;
  v10 = sub_1C617C470(v9, &v26)[1];
  v26 = v8;
  v11 = sub_1C617C470(v9, &v26);
  v12 = *a2;
  v13 = *a4 + 80;
  if (v10 >= v11[1])
  {
    v26 = *a3;
    v17 = sub_1C617C470(v13, &v26)[1];
    v26 = v12;
    result = sub_1C617C470(v13, &v26);
    if (v17 < result[1])
    {
      v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      v22 = *a1;
      v23 = *a4 + 80;
      v26 = *a2;
      v24 = sub_1C617C470(v23, &v26)[1];
      v26 = v22;
      result = sub_1C617C470(v23, &v26);
      if (v24 < result[1])
      {
        v25 = *a1;
        *a1 = *a2;
        *a2 = v25;
      }
    }
  }
  else
  {
    v26 = *a3;
    v14 = sub_1C617C470(v13, &v26)[1];
    v26 = v12;
    result = sub_1C617C470(v13, &v26);
    v16 = *a1;
    if (v14 >= result[1])
    {
      *a1 = *a2;
      *a2 = v16;
      v18 = *a4 + 80;
      v26 = *a3;
      v19 = sub_1C617C470(v18, &v26)[1];
      v26 = v16;
      result = sub_1C617C470(v18, &v26);
      if (v19 < result[1])
      {
        v20 = *a2;
        *a2 = *a3;
        *a3 = v20;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v16;
    }
  }
  return result;
}

BOOL sub_1C4E1AD1C(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v20 = *a1;
      v21 = *a3 + 80;
      v25 = *(a2 - 1);
      v22 = sub_1C617C470(v21, &v25)[1];
      v25 = v20;
      if (v22 < sub_1C617C470(v21, &v25)[1])
      {
        v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1C4E1AB50(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C4E1AF60(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C4E1B0A8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C4E1AB50(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v8;
    v13 = *a3 + 80;
    v25 = *v9;
    v14 = sub_1C617C470(v13, &v25)[1];
    v25 = v12;
    if (v14 < sub_1C617C470(v13, &v25)[1])
    {
      v24 = *v9;
      v15 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15 + 24) = *(uint64_t *)((char *)a1 + v15 + 16);
        if (v15 == -16)
          break;
        v16 = *(uint64_t *)((char *)a1 + v15 + 8);
        v17 = *a3 + 80;
        v25 = v24;
        v18 = sub_1C617C470(v17, &v25)[1];
        v25 = v16;
        v15 -= 8;
        if (v18 >= sub_1C617C470(v17, &v25)[1])
        {
          v19 = (uint64_t *)((char *)a1 + v15 + 24);
          goto LABEL_11;
        }
      }
      v19 = a1;
LABEL_11:
      *v19 = v24;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

_QWORD *sub_1C4E1AF60(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_1C4E1AB50(a1, a2, a3, a5);
  v10 = *a3;
  v11 = *a5 + 80;
  v23 = *a4;
  v12 = sub_1C617C470(v11, &v23)[1];
  v23 = v10;
  result = sub_1C617C470(v11, &v23);
  if (v12 < result[1])
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a2;
    v16 = *a5 + 80;
    v23 = *a3;
    v17 = sub_1C617C470(v16, &v23)[1];
    v23 = v15;
    result = sub_1C617C470(v16, &v23);
    if (v17 < result[1])
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a1;
      v20 = *a5 + 80;
      v23 = *a2;
      v21 = sub_1C617C470(v20, &v23)[1];
      v23 = v19;
      result = sub_1C617C470(v20, &v23);
      if (v21 < result[1])
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

_QWORD *sub_1C4E1B0A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1C4E1AF60(a1, a2, a3, a4, a6);
  v12 = *a4;
  v13 = *a6 + 80;
  v29 = *a5;
  v14 = sub_1C617C470(v13, &v29)[1];
  v29 = v12;
  result = sub_1C617C470(v13, &v29);
  if (v14 < result[1])
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a3;
    v18 = *a6 + 80;
    v29 = *a4;
    v19 = sub_1C617C470(v18, &v29)[1];
    v29 = v17;
    result = sub_1C617C470(v18, &v29);
    if (v19 < result[1])
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a2;
      v22 = *a6 + 80;
      v29 = *a3;
      v23 = sub_1C617C470(v22, &v29)[1];
      v29 = v21;
      result = sub_1C617C470(v22, &v29);
      if (v23 < result[1])
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a1;
        v26 = *a6 + 80;
        v29 = *a2;
        v27 = sub_1C617C470(v26, &v29)[1];
        v29 = v25;
        result = sub_1C617C470(v26, &v29);
        if (v27 < result[1])
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4E1B24C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = v4 + 24 * v8;
        v11 = *(char **)a1;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v4;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v4 + 8);
          v4 += 24;
          v11 += 24;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = v4 + 24 * v9;
        v13 = *(char **)a1;
        do
        {
          *(_QWORD *)v13 = *(_QWORD *)v4;
          *(_OWORD *)(v13 + 8) = *(_OWORD *)(v4 + 8);
          v4 += 24;
          v13 += 24;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*a2 + 24 * v9), *a2 + 24 * v14 - (*a2 + 24 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

uint64_t sub_1C4E1B3A4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *a2;
        v7 = *a2 + 24 * v4;
        v8 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v8 = *(_QWORD *)v6;
          *(_OWORD *)(v8 + 8) = *(_OWORD *)(v6 + 8);
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v9 = *a2;
        v10 = *a2 + 24 * v5;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v9;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v9 + 8);
          v9 += 24;
          v11 += 24;
        }
        while (v9 != v10);
LABEL_14:
        v12 = *((unsigned int *)a2 + 2);
        if (v5 != v12)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*a2 + 24 * v5), *a2 + 24 * v12 - (*a2 + 24 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 24);
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t llvm::DivergenceAnalysisImpl::DivergenceAnalysisImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = a6;
  *(_BYTE *)(result + 64) = a7;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = a6;
  *(_BYTE *)(result + 64) = a7;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

BOOL llvm::DivergenceAnalysisImpl::isAlwaysUniform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned int *)(a1 + 88);
  if (!(_DWORD)v3)
  {
LABEL_7:
    v5 = (uint64_t *)(v2 + 8 * v3);
    return v5 != (uint64_t *)(v2 + 8 * v3);
  }
  LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = (uint64_t *)(v2 + 8 * v4);
  v6 = *v5;
  if (*v5 != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 8 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 8 * v4);
        return v5 != (uint64_t *)(v2 + 8 * v3);
      }
    }
    goto LABEL_7;
  }
  return v5 != (uint64_t *)(v2 + 8 * v3);
}

uint64_t llvm::DivergenceAnalysisImpl::addUniformOverride(llvm::DivergenceAnalysisImpl *this, const llvm::Value *a2)
{
  const llvm::Value *v3;
  _BYTE v4[31];

  v3 = a2;
  return sub_1C61904FC((uint64_t)this + 72, (uint64_t *)&v3, (uint64_t)v4);
}

uint64_t llvm::DivergenceAnalysisImpl::isTemporalDivergent(llvm::DivergenceAnalysisImpl *this, const llvm::BasicBlock *a2, const llvm::Value *a3)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;

  if (*((unsigned __int8 *)a3 + 16) < 0x1Cu)
    return 0;
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = *((_DWORD *)v5 + 4);
  if (v6)
  {
    v7 = *((_QWORD *)a3 + 5);
    v8 = *v5;
    v9 = v6 - 1;
    v10 = ((v7 >> 4) ^ (v7 >> 9)) & (v6 - 1);
    v11 = *(_QWORD *)(v8 + 16 * v10);
    if (v7 == v11)
    {
LABEL_7:
      v14 = *(_QWORD **)(v8 + 16 * v10 + 8);
      goto LABEL_9;
    }
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v10 + v12++;
      v10 = v13 & v9;
      v11 = *(_QWORD *)(v8 + 16 * v10);
      if (v7 == v11)
        goto LABEL_7;
    }
  }
  v14 = 0;
LABEL_9:
  if (v14 != *((_QWORD **)this + 1))
  {
    while (1)
    {
      v15 = sub_1C477672C((uint64_t)(v14 + 7), (uint64_t)a2);
      v16 = v14[8];
      v17 = v16 == v14[7] ? 76 : 72;
      if (v15 != (_QWORD *)(v16 + 8 * *(unsigned int *)((char *)v14 + v17)))
        break;
      v22 = 0;
      v23 = v14;
      if (sub_1C614F7B0((uint64_t *)this + 4, &v23, &v22))
      {
        v18 = v22;
        v19 = *((_QWORD *)this + 4);
        v20 = *((unsigned int *)this + 12);
      }
      else
      {
        v19 = *((_QWORD *)this + 4);
        v20 = *((unsigned int *)this + 12);
        v18 = v19 + 8 * v20;
      }
      if (v18 != v19 + 8 * v20)
        return 1;
      result = 0;
      v14 = (_QWORD *)*v14;
      if (v14 == *((_QWORD **)this + 1))
        return result;
    }
  }
  return 0;
}

BOOL llvm::DivergenceAnalysisImpl::inRegion(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  if (!v2)
    return *(_QWORD *)(a2 + 56) == *a1;
  v3 = sub_1C477672C(v2 + 56, a2);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = 72;
  if (v4 == *(_QWORD *)(v2 + 56))
    v5 = 76;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)(v2 + v5));
}

void llvm::DivergenceAnalysisImpl::pushUsers(llvm::DivergenceAnalysisImpl *this, const llvm::Value *a2)
{
  unsigned int v3;
  uint64_t i;
  unsigned __int8 *v6;
  BOOL v7;
  unint64_t v8;
  unsigned __int8 **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 < 0x1C || v3 - 29 > 0xA)
  {
    for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
    {
      v6 = *(unsigned __int8 **)(i + 24);
      if (v6)
        v7 = v6[16] >= 0x1Cu;
      else
        v7 = 0;
      if (v7
        && llvm::DivergenceAnalysisImpl::inRegion(this, *(const llvm::Instruction **)(i + 24))
        && llvm::DivergenceAnalysisImpl::markDivergent(this, (const llvm::Value *)v6))
      {
        v9 = (unsigned __int8 **)*((_QWORD *)this + 16);
        v8 = *((_QWORD *)this + 17);
        if ((unint64_t)v9 >= v8)
        {
          v11 = (_QWORD *)*((_QWORD *)this + 15);
          v12 = v9 - (unsigned __int8 **)v11;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v14 = v8 - (_QWORD)v11;
          if (v14 >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            if (v15 >> 61)
              sub_1C4764EE4();
            v16 = (char *)operator new(8 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = (unsigned __int8 **)&v16[8 * v12];
          *v17 = v6;
          v10 = v17 + 1;
          if (v9 != v11)
          {
            do
            {
              v18 = *--v9;
              *--v17 = v18;
            }
            while (v9 != v11);
            v9 = (unsigned __int8 **)*((_QWORD *)this + 15);
          }
          *((_QWORD *)this + 15) = v17;
          *((_QWORD *)this + 16) = v10;
          *((_QWORD *)this + 17) = &v16[8 * v15];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = v6;
          v10 = v9 + 1;
        }
        *((_QWORD *)this + 16) = v10;
      }
    }
  }
  else
  {
    llvm::DivergenceAnalysisImpl::analyzeControlDivergence(this, a2);
  }
}

void llvm::DivergenceAnalysisImpl::analyzeControlDivergence(llvm::DivergenceAnalysisImpl *this, const llvm::Instruction *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const llvm::Loop *v13;
  uint64_t *JoinBlocks;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  const llvm::BasicBlock *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *i;
  unint64_t *v30;
  const llvm::BasicBlock *v31;
  unint64_t *v32;
  unint64_t v33;

  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 2), *((_QWORD *)a2 + 5)))return;
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  v5 = *((_DWORD *)v4 + 4);
  if (!v5)
    goto LABEL_9;
  v6 = *((_QWORD *)a2 + 5);
  v7 = *v4;
  v8 = v5 - 1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
  v10 = *(_QWORD *)(v7 + 16 * v9);
  if (v6 != v10)
  {
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v9 + v11++;
      v9 = v12 & v8;
      v10 = *(_QWORD *)(v7 + 16 * v9);
      if (v6 == v10)
        goto LABEL_8;
    }
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
LABEL_8:
  v13 = *(const llvm::Loop **)(v7 + 16 * v9 + 8);
LABEL_10:
  JoinBlocks = llvm::SyncDependenceAnalysis::getJoinBlocks(*((llvm::SyncDependenceAnalysis **)this + 7), a2);
  v15 = JoinBlocks;
  v16 = JoinBlocks[1];
  if (v16 == *JoinBlocks)
    v17 = (unsigned int *)JoinBlocks + 5;
  else
    v17 = (unsigned int *)(JoinBlocks + 2);
  v18 = *v17;
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    v20 = (unint64_t *)JoinBlocks[1];
    while (*v20 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v20;
      v19 -= 8;
      if (!v19)
        goto LABEL_25;
    }
  }
  else
  {
    v20 = (unint64_t *)JoinBlocks[1];
  }
  v21 = (unint64_t *)(v16 + 8 * v18);
  if (v20 != v21)
  {
    v22 = (const llvm::BasicBlock *)*v20;
LABEL_21:
    llvm::DivergenceAnalysisImpl::taintAndPushPhiNodes(this, v22);
    v23 = v20 + 1;
    while (v23 != v21)
    {
      v24 = *v23++;
      v22 = (const llvm::BasicBlock *)v24;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = v23 - 1;
        goto LABEL_21;
      }
    }
  }
LABEL_25:
  v25 = v15[9];
  if (v25 == v15[8])
    v26 = (unsigned int *)v15 + 21;
  else
    v26 = (unsigned int *)(v15 + 10);
  v27 = *v26;
  if ((_DWORD)v27)
  {
    v28 = 8 * v27;
    for (i = (unint64_t *)v15[9]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v28 -= 8;
      if (!v28)
        return;
    }
  }
  else
  {
    i = (unint64_t *)v15[9];
  }
  v30 = (unint64_t *)(v25 + 8 * v27);
  if (i != v30)
  {
    v31 = (const llvm::BasicBlock *)*i;
LABEL_36:
    llvm::DivergenceAnalysisImpl::propagateLoopExitDivergence(this, v31, v13);
    v32 = i + 1;
    while (v32 != v30)
    {
      v33 = *v32++;
      v31 = (const llvm::BasicBlock *)v33;
      if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = v32 - 1;
        goto LABEL_36;
      }
    }
  }
}

uint64_t llvm::DivergenceAnalysisImpl::analyzeTemporalDivergence(uint64_t this, const llvm::Instruction *a2, const llvm::Loop *a3)
{
  llvm::DivergenceAnalysisImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const llvm::Instruction **v10;
  const llvm::Instruction *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::Instruction **v17;
  const llvm::Instruction *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  const llvm::Loop *v27;

  v5 = (llvm::DivergenceAnalysisImpl *)this;
  v6 = *(_QWORD *)(this + 72);
  v7 = *(unsigned int *)(this + 88);
  v8 = a2 >> 4;
  if ((_DWORD)v7)
  {
    LODWORD(v9) = (v7 - 1) & (v8 ^ (a2 >> 9));
    v10 = (const llvm::Instruction **)(v6 + 8 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_8;
    v12 = 1;
    while (v11 != (const llvm::Instruction *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v7 - 1);
      v11 = *(const llvm::Instruction **)(v6 + 8 * v9);
      if (v11 == a2)
      {
        v10 = (const llvm::Instruction **)(v6 + 8 * v9);
        goto LABEL_8;
      }
    }
  }
  v10 = (const llvm::Instruction **)(v6 + 8 * v7);
LABEL_8:
  if (v10 != (const llvm::Instruction **)(v6 + 8 * v7))
    return this;
  v14 = *(_QWORD *)(this + 96);
  v15 = *(unsigned int *)(this + 112);
  if ((_DWORD)v15)
  {
    LODWORD(v16) = (v15 - 1) & (v8 ^ (a2 >> 9));
    v17 = (const llvm::Instruction **)(v14 + 8 * v16);
    v18 = *v17;
    if (*v17 == a2)
      goto LABEL_16;
    v19 = 1;
    while (v18 != (const llvm::Instruction *)-4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(const llvm::Instruction **)(v14 + 8 * v16);
      if (v18 == a2)
      {
        v17 = (const llvm::Instruction **)(v14 + 8 * v16);
        goto LABEL_16;
      }
    }
  }
  v17 = (const llvm::Instruction **)(v14 + 8 * v15);
LABEL_16:
  if (v17 != (const llvm::Instruction **)(v14 + 8 * v15))
    return this;
  v21 = *((_DWORD *)a2 + 5);
  if ((v21 & 0x40000000) != 0)
  {
    v23 = (char *)*((_QWORD *)a2 - 1);
    v22 = v21 & 0x7FFFFFF;
    if (!v22)
      return this;
  }
  else
  {
    v22 = v21 & 0x7FFFFFF;
    v23 = (char *)a2 - 32 * v22;
    if (!v22)
      return this;
  }
  v24 = 32 * v22;
  while (1)
  {
    if (*(_QWORD *)v23 && *(unsigned __int8 *)(*(_QWORD *)v23 + 16) >= 0x1Cu)
    {
      this = (uint64_t)sub_1C477672C((uint64_t)a3 + 56, *(_QWORD *)(*(_QWORD *)v23 + 40));
      v26 = *((_QWORD *)a3 + 8);
      v27 = v26 == *((_QWORD *)a3 + 7) ? (const llvm::Loop *)((char *)a3 + 76) : (const llvm::Loop *)((char *)a3 + 72);
      if (this != v26 + 8 * *(unsigned int *)v27)
        break;
    }
    v23 += 32;
    v24 -= 32;
    if (!v24)
      return this;
  }
  this = llvm::DivergenceAnalysisImpl::markDivergent(v5, a2);
  if ((_DWORD)this)
    return llvm::DivergenceAnalysisImpl::pushUsers(v5, a2);
  return this;
}

void llvm::DivergenceAnalysisImpl::analyzeLoopExitDivergence(llvm::DivergenceAnalysisImpl *this, const llvm::BasicBlock *a2, uint64_t **a3)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *j;
  const llvm::Instruction *v16;
  uint64_t k;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  const llvm::BasicBlock *v30;
  uint64_t v31;
  uint64_t v32;
  const llvm::BasicBlock *v33;
  _QWORD v34[2];
  int v35;
  _BYTE v36[31];
  void *v37;
  uint64_t v38;
  _QWORD v39[10];

  v39[8] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 64))
  {
    if (*((const llvm::BasicBlock **)a2 + 5) != (const llvm::BasicBlock *)((char *)a2 + 40))
    {
      for (i = *((_QWORD *)a2 + 6); ; i = *(_QWORD *)(v6 + 32))
      {
        v6 = i - 24;
        v7 = i ? i - 24 : 0;
        if (!i || *(_BYTE *)(v7 + 16) != 83)
          break;
        llvm::DivergenceAnalysisImpl::analyzeTemporalDivergence((uint64_t)this, (const llvm::Instruction *)(i - 24), (const llvm::Loop *)a3);
      }
    }
    return;
  }
  v32 = *a3[4];
  v33 = a2;
  v37 = v39;
  v39[0] = a2;
  v38 = 0x800000001;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  sub_1C614F72C((uint64_t)v34, &v33, (uint64_t)v36);
  v8 = v38;
  do
  {
    v9 = (_QWORD *)*((_QWORD *)v37 + v8 - 1);
    LODWORD(v38) = v8 - 1;
    v10 = *((_QWORD *)this + 1);
    if (!v10)
    {
      if (v9[7] != *(_QWORD *)this)
        goto LABEL_17;
LABEL_19:
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*((_QWORD *)this + 2), v32, (uint64_t)v9))
      {
        v14 = v9 + 5;
        for (j = (_QWORD *)v9[6]; j != v14; j = (_QWORD *)j[1])
        {
          if (j)
            v16 = (const llvm::Instruction *)(j - 3);
          else
            v16 = 0;
          llvm::DivergenceAnalysisImpl::analyzeTemporalDivergence((uint64_t)this, v16, (const llvm::Loop *)a3);
        }
        v20 = (_QWORD *)*v14;
        if ((_QWORD *)*v14 != v14)
        {
          if (v20)
            v21 = v20 - 3;
          else
            v21 = 0;
          v22 = *((unsigned __int8 *)v21 + 16);
          v23 = v22 - 29;
          if (v22 != 30)
          {
            v24 = 2;
            switch(v23)
            {
              case 1:
                __break(1u);
                return;
              case 2:
                v24 = (*((_DWORD *)v21 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_53;
              case 3:
              case 9:
                v24 = (*((_DWORD *)v21 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_53;
              case 4:
                goto LABEL_42;
              case 7:
                v24 = *((_WORD *)v21 + 9) & 1;
                goto LABEL_53;
              case 8:
                v24 = 1;
                goto LABEL_42;
              case 10:
                v24 = *((_DWORD *)v21 + 20) + 1;
LABEL_53:
                if (!v24)
                  goto LABEL_17;
                goto LABEL_42;
              default:
                goto LABEL_17;
            }
          }
          if ((*((_DWORD *)v21 + 5) & 0x7FFFFFF) == 3)
            v24 = 2;
          else
            v24 = 1;
LABEL_42:
          v25 = 0;
          v26 = 0;
          v27 = v24;
          v28 = v21 - 8;
          do
          {
            v33 = 0;
            v29 = *((unsigned __int8 *)v21 + 16);
            if (v29 != 30)
              __asm { BR              X9 }
            v33 = (const llvm::BasicBlock *)v21[-4 * v26 - 4];
            sub_1C614F72C((uint64_t)v34, &v33, (uint64_t)v36);
            if (v36[16])
            {
              v30 = v33;
              v31 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v38 + 1, 8);
                v31 = v38;
              }
              *((_QWORD *)v37 + v31) = v30;
              LODWORD(v38) = v38 + 1;
            }
            ++v26;
            v25 += 2;
            v28 += 4;
          }
          while (v27 != v26);
        }
      }
      else if ((_QWORD *)v9[5] != v9 + 5)
      {
        for (k = v9[6]; ; k = *(_QWORD *)(v18 + 32))
        {
          v18 = k - 24;
          v19 = k ? k - 24 : 0;
          if (!k || *(_BYTE *)(v19 + 16) != 83)
            break;
          llvm::DivergenceAnalysisImpl::analyzeTemporalDivergence((uint64_t)this, (const llvm::Instruction *)(k - 24), (const llvm::Loop *)a3);
        }
      }
      goto LABEL_17;
    }
    v11 = sub_1C477672C(v10 + 56, (uint64_t)v9);
    v12 = *(_QWORD *)(v10 + 64);
    v13 = 72;
    if (v12 == *(_QWORD *)(v10 + 56))
      v13 = 76;
    if (v11 != (_QWORD *)(v12 + 8 * *(unsigned int *)(v10 + v13)))
      goto LABEL_19;
LABEL_17:
    v8 = v38;
  }
  while ((_DWORD)v38);
  MEMORY[0x1CAA32FB4](v34[0], 8);
  if (v37 != v39)
    free(v37);
}

void llvm::DivergenceAnalysisImpl::propagateLoopExitDivergence(llvm::DivergenceAnalysisImpl *this, const llvm::BasicBlock *a2, const llvm::Loop *a3)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const llvm::BasicBlock *v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  const llvm::Loop *v15;
  unsigned int v16;
  llvm::Loop *v17;
  _BYTE v18[24];

  v17 = a3;
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = *((_DWORD *)v5 + 4);
  if (v6)
  {
    v7 = *v5;
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = *(const llvm::BasicBlock **)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v13 = *(_QWORD **)(v7 + 16 * v9 + 8);
      if (v13)
      {
        v14 = 0;
        do
        {
          v13 = (_QWORD *)*v13;
          ++v14;
        }
        while (v13);
        goto LABEL_11;
      }
    }
    else
    {
      v11 = 1;
      while (v10 != (const llvm::BasicBlock *)-4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(const llvm::BasicBlock **)(v7 + 16 * v9);
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  v14 = 0;
LABEL_11:
  v15 = a3;
  do
  {
    v16 = 0;
    do
    {
      v15 = *(const llvm::Loop **)v15;
      ++v16;
    }
    while (v15);
    if (v16 <= v14)
      break;
    sub_1C6190580((uint64_t)v18, (uint64_t)this + 32, &v17);
    a3 = v17;
    v15 = *(const llvm::Loop **)v17;
    v17 = v15;
  }
  while (v15);
  llvm::DivergenceAnalysisImpl::analyzeLoopExitDivergence(this, a2, (uint64_t **)a3);
}

void llvm::DivergenceAnalysisImpl::taintAndPushPhiNodes(llvm::DivergenceAnalysisImpl *this, const llvm::BasicBlock *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::PHINode *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::PHINode **v14;
  llvm::PHINode *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  llvm::PHINode **v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  llvm::PHINode **v29;
  llvm::PHINode *v30;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    if (*((_QWORD *)a2 + 7) != *(_QWORD *)this)
      return;
LABEL_7:
    if (*((const llvm::BasicBlock **)a2 + 5) == (const llvm::BasicBlock *)((char *)a2 + 40))
      return;
    v8 = *((_QWORD *)a2 + 6);
    v9 = (llvm::PHINode *)(v8 - 24);
    v10 = v8 ? v8 - 24 : 0;
    if (!v8 || *(_BYTE *)(v10 + 16) != 83)
      return;
    while (1)
    {
      v11 = *((_QWORD *)this + 12);
      v12 = *((unsigned int *)this + 28);
      if ((_DWORD)v12)
      {
        LODWORD(v13) = ((v9 >> 4) ^ (v9 >> 9)) & (v12 - 1);
        v14 = (llvm::PHINode **)(v11 + 8 * v13);
        v15 = *v14;
        if (v9 == *v14)
          goto LABEL_20;
        v16 = 1;
        while (v15 != (llvm::PHINode *)-4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & (v12 - 1);
          v15 = *(llvm::PHINode **)(v11 + 8 * v13);
          if (v9 == v15)
          {
            v14 = (llvm::PHINode **)(v11 + 8 * v13);
            goto LABEL_20;
          }
        }
      }
      v14 = (llvm::PHINode **)(v11 + 8 * v12);
LABEL_20:
      if (v14 == (llvm::PHINode **)(v11 + 8 * v12)
        && (llvm::PHINode::hasConstantOrUndefValue(v9) & 1) == 0
        && llvm::DivergenceAnalysisImpl::markDivergent(this, v9))
      {
        v21 = (llvm::PHINode **)*((_QWORD *)this + 16);
        v20 = *((_QWORD *)this + 17);
        if ((unint64_t)v21 >= v20)
        {
          v23 = (_QWORD *)*((_QWORD *)this + 15);
          v24 = v21 - (llvm::PHINode **)v23;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            abort();
          v26 = v20 - (_QWORD)v23;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 61)
              sub_1C4764EE4();
            v28 = (char *)operator new(8 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = (llvm::PHINode **)&v28[8 * v24];
          *v29 = v9;
          v22 = v29 + 1;
          if (v21 != v23)
          {
            do
            {
              v30 = *--v21;
              *--v29 = v30;
            }
            while (v21 != v23);
            v21 = (llvm::PHINode **)*((_QWORD *)this + 15);
          }
          *((_QWORD *)this + 15) = v29;
          *((_QWORD *)this + 16) = v22;
          *((_QWORD *)this + 17) = &v28[8 * v27];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v21 = v9;
          v22 = v21 + 1;
        }
        *((_QWORD *)this + 16) = v22;
      }
      v18 = *((_QWORD *)v9 + 4);
      v9 = (llvm::PHINode *)(v18 - 24);
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
      if (!v18 || *(_BYTE *)(v19 + 16) != 83)
        return;
    }
  }
  v5 = sub_1C477672C(v4 + 56, (uint64_t)a2);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = 72;
  if (v6 == *(_QWORD *)(v4 + 56))
    v7 = 76;
  if (v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)(v4 + v7)))
    goto LABEL_7;
}

uint64_t llvm::DivergenceAnalysisImpl::compute(llvm::DivergenceAnalysisImpl *this)
{
  const llvm::Value **v2;
  uint64_t v3;
  const llvm::Value **v4;
  const llvm::Value **v5;
  const llvm::Value **v6;
  const llvm::Value *v7;
  uint64_t v8;
  const llvm::Value **v10;
  uint64_t v11;
  unsigned int v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_1C4DFE328((uint64_t)&v10, (uint64_t)this + 96);
  v2 = &v10[v12];
  if ((_DWORD)v11)
  {
    if (v12)
    {
      v3 = 8 * v12;
      v4 = v10;
      while (((unint64_t)*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v4;
        v3 -= 8;
        if (!v3)
          goto LABEL_6;
      }
    }
    else
    {
      v4 = v10;
    }
  }
  else
  {
LABEL_6:
    v4 = &v10[v12];
  }
  v5 = &v10[v12];
LABEL_9:
  while (v4 != v5)
  {
    v6 = v4 + 1;
    llvm::DivergenceAnalysisImpl::pushUsers(this, *v4);
    v4 = v2;
    if (v6 != v2)
    {
      v4 = v6;
      while (((unint64_t)*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v4 == v2)
        {
          v4 = v2;
          goto LABEL_9;
        }
      }
    }
  }
  while (1)
  {
    v8 = *((_QWORD *)this + 16);
    if (*((_QWORD *)this + 15) == v8)
      break;
    v7 = *(const llvm::Value **)(v8 - 8);
    *((_QWORD *)this + 16) = v8 - 8;
    llvm::DivergenceAnalysisImpl::pushUsers(this, v7);
  }
  return MEMORY[0x1CAA32FB4](v10, 8);
}

uint64_t llvm::DivergenceAnalysisImpl::isDivergentUse(llvm::DivergenceAnalysisImpl *this, const llvm::Value **a2)
{
  const llvm::Value *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const llvm::Value **v6;
  const llvm::Value *v7;
  int v8;
  int v9;

  v2 = *a2;
  v3 = *((_QWORD *)this + 12);
  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = ((v2 >> 4) ^ (v2 >> 9)) & (v4 - 1);
    v6 = (const llvm::Value **)(v3 + 8 * v5);
    v7 = *v6;
    if (v2 == *v6)
      goto LABEL_8;
    v8 = 1;
    while (v7 != (const llvm::Value *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(const llvm::Value **)(v3 + 8 * v5);
      if (v2 == v7)
      {
        v6 = (const llvm::Value **)(v3 + 8 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (const llvm::Value **)(v3 + 8 * v4);
LABEL_8:
  if (v6 == (const llvm::Value **)(v3 + 8 * v4))
    return llvm::DivergenceAnalysisImpl::isTemporalDivergent(this, *((const llvm::BasicBlock **)a2[3] + 5), v2);
  else
    return 1;
}

uint64_t llvm::DivergenceInfo::DivergenceInfo(uint64_t a1, uint64_t a2, const llvm::DominatorTree *a3, const llvm::PostDominatorTree *a4, uint64_t *a5, _QWORD *a6, char a7)
{
  llvm::SyncDependenceAnalysis **v13;
  unsigned int v14;
  char v15;
  llvm::SyncDependenceAnalysis *v17;
  llvm::SyncDependenceAnalysis *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::Value *v29;
  const llvm::Value *v30;
  const llvm::Value *v31;
  _QWORD *v32;
  uint64_t v33;
  void *__p;
  void *v35;
  uint64_t v36;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v13 = (llvm::SyncDependenceAnalysis **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  if ((a7 & 1) != 0)
    goto LABEL_8;
  v33 = a2;
  __p = 0;
  v35 = 0;
  v36 = 0;
  sub_1C4DC1ECC((char **)&__p, (uint64_t)&v33);
  v14 = sub_1C4E1C800((uint64_t *)&__p, a5);
  v15 = v14;
  if (v14)
    *(_BYTE *)(a1 + 8) = 1;
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  if ((v15 & 1) == 0)
  {
LABEL_8:
    v17 = (llvm::SyncDependenceAnalysis *)operator new();
    llvm::SyncDependenceAnalysis::SyncDependenceAnalysis(v17, a3, a4, (const llvm::LoopInfo *)a5);
    v18 = *v13;
    *v13 = v17;
    if (v18)
    {
      llvm::SyncDependenceAnalysis::~SyncDependenceAnalysis(v18);
      MEMORY[0x1CAA32FC0]();
      v17 = *v13;
    }
    v19 = operator new();
    *(_QWORD *)v19 = a2;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = a3;
    *(_QWORD *)(v19 + 24) = a5;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_DWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = v17;
    *(_BYTE *)(v19 + 64) = 0;
    *(_QWORD *)(v19 + 72) = 0;
    *(_QWORD *)(v19 + 80) = 0;
    *(_DWORD *)(v19 + 88) = 0;
    *(_QWORD *)(v19 + 96) = 0;
    *(_QWORD *)(v19 + 104) = 0;
    *(_DWORD *)(v19 + 112) = 0;
    *(_QWORD *)(v19 + 128) = 0;
    *(_QWORD *)(v19 + 136) = 0;
    *(_QWORD *)(v19 + 120) = 0;
    v20 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v19;
    if (v20)
    {
      v32 = sub_1C619060C(v20);
      MEMORY[0x1CAA32FC0](v32, 0x10E0C405B15C183);
    }
    v21 = a2 + 72;
    for (i = *(_QWORD *)(a2 + 80); i != v21; i = *(_QWORD *)(i + 8))
    {
      v23 = i - 24;
      if (!i)
        v23 = 0;
      v24 = *(_QWORD *)(v23 + 48);
      if (v24 != v23 + 40)
      {
        while (1)
        {
          v26 = v24 ? (const llvm::Value *)(v24 - 24) : 0;
          if ((*(unsigned int (**)(_QWORD, const llvm::Value *))(*(_QWORD *)*a6 + 104))(*a6, v26))
          {
            llvm::DivergenceAnalysisImpl::markDivergent(*(llvm::DivergenceAnalysisImpl **)(a1 + 24), v26);
          }
          else if ((*(unsigned int (**)(_QWORD, const llvm::Value *))(*(_QWORD *)*a6 + 112))(*a6, v26))
          {
            v25 = *(_QWORD *)(a1 + 24) + 72;
            v33 = (uint64_t)v26;
            sub_1C61904FC(v25, &v33, (uint64_t)&__p);
          }
          v24 = *(_QWORD *)(v24 + 8);
          v27 = i - 24;
          if (!i)
            v27 = 0;
          if (v24 == v27 + 40)
            break;
LABEL_32:
          if (i == v21)
            goto LABEL_33;
        }
        while (1)
        {
          i = *(_QWORD *)(i + 8);
          if (i == v21)
            goto LABEL_33;
          v28 = i - 24;
          if (!i)
            v28 = 0;
          v24 = *(_QWORD *)(v28 + 48);
          if (v24 != v28 + 40)
            goto LABEL_32;
        }
      }
    }
LABEL_33:
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      v29 = *(const llvm::Value **)(a2 + 88);
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
        v30 = *(const llvm::Value **)(a2 + 88);
LABEL_36:
        v31 = (const llvm::Value *)((char *)v30 + 40 * *(_QWORD *)(a2 + 96));
        while (v29 != v31)
        {
          if ((*(unsigned int (**)(_QWORD, const llvm::Value *))(*(_QWORD *)*a6 + 104))(*a6, v29))
            llvm::DivergenceAnalysisImpl::markDivergent(*(llvm::DivergenceAnalysisImpl **)(a1 + 24), v29);
          v29 = (const llvm::Value *)((char *)v29 + 40);
        }
        llvm::DivergenceAnalysisImpl::compute(*(llvm::DivergenceAnalysisImpl **)(a1 + 24));
        return a1;
      }
    }
    else
    {
      v29 = *(const llvm::Value **)(a2 + 88);
    }
    v30 = v29;
    goto LABEL_36;
  }
  return a1;
}

_QWORD *sub_1C4E1C800(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[264];

  v30 = v34;
  v31 = v34;
  v32 = 32;
  v33 = 0;
  v3 = *a1;
  v2 = a1[1];
  if (v2 == *a1)
    return 0;
  while (1)
  {
    v6 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v5 = v6;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)&v30, v6);
    v8 = *(_QWORD *)(v6 + 40);
    if (v8 != v6 + 40)
      break;
LABEL_28:
    if (v2 == v3)
    {
      v28 = 0;
      v18 = v30;
      v17 = v31;
      goto LABEL_38;
    }
  }
  if (v8)
    v9 = v8 - 24;
  else
    v9 = 0;
  v10 = *(unsigned __int8 *)(v9 + 16);
  v11 = v10 - 29;
  if (v10 != 30)
  {
    v12 = 2;
    switch(v11)
    {
      case 1:
        __break(1u);
        return result;
      case 2:
        v12 = (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_31;
      case 3:
      case 9:
        v12 = (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_31;
      case 4:
        goto LABEL_10;
      case 7:
        v12 = *(_WORD *)(v9 + 18) & 1;
        goto LABEL_31;
      case 8:
        v12 = 1;
        goto LABEL_10;
      case 10:
        v12 = *(_DWORD *)(v9 + 80) + 1;
LABEL_31:
        if (!v12)
          goto LABEL_28;
        goto LABEL_10;
      default:
        goto LABEL_28;
    }
  }
  if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3)
    v12 = 2;
  else
    v12 = 1;
LABEL_10:
  v13 = 0;
  v29 = v12;
  while (1)
  {
    v14 = *(unsigned __int8 *)(v9 + 16);
    if (v14 != 30)
      __asm { BR              X9 }
    v15 = *(_QWORD *)(v9 - 32 - 32 * v13);
    v16 = sub_1C477672C((uint64_t)&v30, v15);
    v18 = v30;
    v17 = v31;
    v19 = (uint64_t *)((char *)&v32 + 4);
    if (v31 != v30)
      v19 = &v32;
    if (v16 == (_QWORD *)&v31[8 * *(unsigned int *)v19])
      goto LABEL_24;
    v20 = *((_DWORD *)a2 + 4);
    if (!v20)
      goto LABEL_37;
    v21 = *a2;
    v22 = v20 - 1;
    v23 = (v20 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v24 = *(_QWORD *)(*a2 + 16 * v23);
    if (v5 != v24)
      break;
LABEL_20:
    v27 = *(uint64_t ***)(v21 + 16 * v23 + 8);
    if (!v27)
      goto LABEL_37;
    while (*v27[4] != v15)
    {
      v27 = (uint64_t **)*v27;
      if (!v27)
        goto LABEL_37;
    }
LABEL_24:
    if (++v13 == v29)
      goto LABEL_28;
  }
  v25 = 1;
  while (v24 != -4096)
  {
    v26 = v23 + v25++;
    v23 = v26 & v22;
    v24 = *(_QWORD *)(v21 + 16 * v23);
    if (v5 == v24)
      goto LABEL_20;
  }
LABEL_37:
  v28 = 1;
LABEL_38:
  if (v17 != v18)
    free(v17);
  return (_QWORD *)v28;
}

uint64_t sub_1C4E1CB18(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_13;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E1CBB4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4A0811C(a1, v7);
      v17 = 0;
      sub_1C4E1CB18((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4A0811C(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DomTreePrinterPass::run@<X0>(uint64_t ***a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const void *v6;
  char v7;
  uint64_t v8;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v7 = 3;
  LODWORD(v6) = 7171940;
  sub_1C4E1CD88(a1, (llvm::raw_ostream *)&v8, &v6, 0);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void sub_1C4E1CD88(uint64_t ***a1, llvm::raw_ostream *a2, const void **a3, char a4)
{
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  const void *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  unint64_t *v23;
  size_t v24;
  const void *v25;
  unint64_t v26;
  __int128 *p_dst;
  uint64_t v28;
  uint64_t v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  llvm *v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  llvm::raw_ostream *v41;
  _DWORD *v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ****v49;
  uint64_t ***v50;
  int v51;
  int v52;
  unint64_t *v53;
  size_t v54;
  const void *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  int64_t v65;
  llvm::raw_ostream *v66;
  void *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  std::string __p;
  __int16 v71;
  void *v72;
  std::string::size_type v73;
  int64_t v74;
  std::string v75;
  std::string v76;
  _DWORD v77[4];
  __int128 __dst;
  int64_t v79;
  __int128 v80;
  uint64_t v81;

  v8 = *((_BYTE *)a3 + 23);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = (size_t)a3[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*((char *)a3 + 23) >= 0)
      v13 = a3;
    else
      v13 = *a3;
    memmove(p_p, v13, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v14 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v24 = 0;
    HIBYTE(v79) = 0;
    p_dst = &__dst;
    goto LABEL_27;
  }
  v15 = ***a1;
  v16 = *(_QWORD *)(v15 + 152);
  v17 = *(unsigned int *)(v15 + 168);
  if ((_DWORD)v17)
  {
    LODWORD(v18) = (v17 - 1) & (v14 ^ (a1 >> 9));
    v19 = (uint64_t ****)(v16 + 16 * v18);
    v20 = *v19;
    if (*v19 == a1)
      goto LABEL_19;
    v21 = 1;
    while (v20 != (uint64_t ***)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v20 = *(uint64_t ****)(v16 + 16 * v18);
      if (v20 == a1)
      {
        v19 = (uint64_t ****)(v16 + 16 * v18);
        goto LABEL_19;
      }
    }
  }
  v19 = (uint64_t ****)(v16 + 16 * v17);
LABEL_19:
  v23 = (unint64_t *)v19[1];
  v26 = *v23;
  v25 = v23 + 2;
  v24 = v26;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_100;
  if (v24 >= 0x17)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v28 = v24 | 7;
    v29 = v28 + 1;
    p_dst = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&__dst + 1) = v24;
    v79 = v29 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_26;
  }
  HIBYTE(v79) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_26:
    memmove(p_dst, v25, v24);
LABEL_27:
  *((_BYTE *)p_dst + v24) = 0;
  if (v79 >= 0)
    v30 = (const std::string::value_type *)&__dst;
  else
    v30 = (const std::string::value_type *)__dst;
  if (v79 >= 0)
    v31 = HIBYTE(v79) & 0x7F;
  else
    v31 = *((_QWORD *)&__dst + 1);
  v32 = std::string::append(&__p, v30, v31);
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v76, ".dot");
  v35 = v34->__r_.__value_.__r.__words[2];
  v80 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v81 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v77[0] = 0;
  v36 = (llvm *)std::system_category();
  v37 = (llvm::raw_ostream *)llvm::errs(v36);
  v38 = *((_QWORD *)v37 + 4);
  if ((unint64_t)(*((_QWORD *)v37 + 3) - v38) > 8)
  {
    *(_BYTE *)(v38 + 8) = 39;
    *(_QWORD *)v38 = *(_QWORD *)"Writing '";
    *((_QWORD *)v37 + 4) += 9;
  }
  else
  {
    v37 = llvm::raw_ostream::write(v37, "Writing '", 9uLL);
  }
  if (v81 >= 0)
    v39 = (const char *)&v80;
  else
    v39 = (const char *)v80;
  if (v81 >= 0)
    v40 = HIBYTE(v81) & 0x7F;
  else
    v40 = *((_QWORD *)&v80 + 1);
  v41 = llvm::raw_ostream::write(v37, v39, v40);
  v42 = (_DWORD *)*((_QWORD *)v41 + 4);
  if (*((_QWORD *)v41 + 3) - (_QWORD)v42 > 3uLL)
  {
    *v42 = 774778407;
    *((_QWORD *)v41 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v41, "'...", 4uLL);
  }
  if (v81 >= 0)
    v43 = &v80;
  else
    v43 = (__int128 *)v80;
  if (v81 >= 0)
    v44 = HIBYTE(v81) & 0x7F;
  else
    v44 = *((_QWORD *)&v80 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v76, v43, v44, (uint64_t)v77, 3);
  v75.__r_.__value_.__s.__data_[21] = 0;
  HIWORD(v75.__r_.__value_.__r.__words[2]) = 5120;
  strcpy((char *)&v75, "Dominator tree for '");
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v54 = 0;
    HIBYTE(v74) = 0;
    v57 = &v72;
    goto LABEL_71;
  }
  v45 = ***a1;
  v46 = *(_QWORD *)(v45 + 152);
  v47 = *(unsigned int *)(v45 + 168);
  if ((_DWORD)v47)
  {
    LODWORD(v48) = (v47 - 1) & (v14 ^ (a1 >> 9));
    v49 = (uint64_t ****)(v46 + 16 * v48);
    v50 = *v49;
    if (*v49 == a1)
      goto LABEL_63;
    v51 = 1;
    while (v50 != (uint64_t ***)-4096)
    {
      v52 = v48 + v51++;
      v48 = v52 & (v47 - 1);
      v50 = *(uint64_t ****)(v46 + 16 * v48);
      if (v50 == a1)
      {
        v49 = (uint64_t ****)(v46 + 16 * v48);
        goto LABEL_63;
      }
    }
  }
  v49 = (uint64_t ****)(v46 + 16 * v47);
LABEL_63:
  v53 = (unint64_t *)v49[1];
  v56 = *v53;
  v55 = v53 + 2;
  v54 = v56;
  if (v56 > 0x7FFFFFFFFFFFFFF7)
LABEL_100:
    abort();
  if (v54 >= 0x17)
  {
    v58 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v58 = v54 | 7;
    v59 = v58 + 1;
    v57 = operator new(v58 + 1);
    v73 = v54;
    v74 = v59 | 0x8000000000000000;
    v72 = v57;
    goto LABEL_70;
  }
  HIBYTE(v74) = v54;
  v57 = &v72;
  if (v54)
LABEL_70:
    memmove(v57, v55, v54);
LABEL_71:
  *((_BYTE *)v57 + v54) = 0;
  if (v74 >= 0)
    v60 = (const std::string::value_type *)&v72;
  else
    v60 = (const std::string::value_type *)v72;
  if (v74 >= 0)
    v61 = HIBYTE(v74) & 0x7F;
  else
    v61 = v73;
  v62 = std::string::append(&v75, v60, v61);
  v63 = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = std::string::append(&__p, "' function");
  v65 = v64->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v79 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74) < 0)
    operator delete(v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (v77[0])
  {
    v66 = (llvm::raw_ostream *)llvm::errs((llvm *)v64);
    v67 = (void *)*((_QWORD *)v66 + 4);
    if (*((_QWORD *)v66 + 3) - (_QWORD)v67 > 0x20uLL)
    {
      qmemcpy(v67, "  error opening file for writing!", 33);
      *((_QWORD *)v66 + 4) += 33;
    }
    else
    {
      v66 = llvm::raw_ostream::write(v66, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v71 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v66 = sub_1C4E1EC30((llvm::raw_ostream *)&v76, a2, a4, (llvm::Twine *)&__p);
  }
  v68 = (llvm::raw_ostream *)llvm::errs(v66);
  v69 = (_BYTE *)*((_QWORD *)v68 + 4);
  if (*((_BYTE **)v68 + 3) == v69)
  {
    llvm::raw_ostream::write(v68, "\n", 1uLL);
  }
  else
  {
    *v69 = 10;
    ++*((_QWORD *)v68 + 4);
  }
  if (SHIBYTE(v79) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v76);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
}

_QWORD *llvm::DomTreeOnlyPrinterPass::run@<X0>(uint64_t ***a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const void *v6[2];
  char v7;
  uint64_t v8;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v7 = 7;
  strcpy((char *)v6, "domonly");
  sub_1C4E1CD88(a1, (llvm::raw_ostream *)&v8, v6, 1);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

double llvm::DominatorTree::viewGraph(llvm *a1)
{
  llvm::raw_ostream *v1;
  void *v2;
  double result;

  v1 = (llvm::raw_ostream *)llvm::errs(a1);
  v2 = (void *)*((_QWORD *)v1 + 4);
  if (*((_QWORD *)v1 + 3) - (_QWORD)v2 > 0x2CuLL)
  {
    qmemcpy(v2, "DomTree dump not available, build with DEBUG\n", 45);
    result = *(double *)"uild with DEBUG\n";
    *((_QWORD *)v1 + 4) += 45;
  }
  else
  {
    llvm::raw_ostream::write(v1, "DomTree dump not available, build with DEBUG\n", 0x2DuLL);
  }
  return result;
}

double llvm::DominatorTree::viewGraph(llvm::DominatorTree *this)
{
  llvm::raw_ostream *v1;
  void *v2;
  double result;

  v1 = (llvm::raw_ostream *)llvm::errs(this);
  v2 = (void *)*((_QWORD *)v1 + 4);
  if (*((_QWORD *)v1 + 3) - (_QWORD)v2 > 0x2CuLL)
  {
    qmemcpy(v2, "DomTree dump not available, build with DEBUG\n", 45);
    result = *(double *)"uild with DEBUG\n";
    *((_QWORD *)v1 + 4) += 45;
  }
  else
  {
    llvm::raw_ostream::write(v1, "DomTree dump not available, build with DEBUG\n", 0x2DuLL);
  }
  return result;
}

void llvm::initializeDomViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D130);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1D528;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D130, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1D528(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View dominance tree of function";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "view-dom";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBDA;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E390;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeDomOnlyViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D138);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1D618;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D138, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1D618(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View dominance tree of function (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 57;
  *(_QWORD *)(v2 + 16) = "view-dom-only";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBDB;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E3B8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializePostDomViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D140);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1D708;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D140, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1D708(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View postdominance tree of function";
  *(_QWORD *)(v2 + 8) = 35;
  *(_QWORD *)(v2 + 16) = "view-postdom";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBDC;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E3E0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializePostDomOnlyViewerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D148);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1D7F8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D148, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1D7F8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View postdominance tree of function (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 61;
  *(_QWORD *)(v2 + 16) = "view-postdom-only";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBDD;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E408;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeDomPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D150);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1D8E8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D150, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1D8E8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print dominance tree of function to 'dot' file";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "dot-dom";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBDE;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E430;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeDomOnlyPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D158);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1D9D8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D158, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1D9D8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print dominance tree of function to 'dot' file (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 72;
  *(_QWORD *)(v2 + 16) = "dot-dom-only";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBDF;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E458;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializePostDomPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D160);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1DAC8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D160, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1DAC8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print postdominance tree of function to 'dot' file";
  *(_QWORD *)(v2 + 8) = 50;
  *(_QWORD *)(v2 + 16) = "dot-postdom";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBE0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E480;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializePostDomOnlyPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D168);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E1DBB8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D168, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E1DBB8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print postdominance tree of function to 'dot' file (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 76;
  *(_QWORD *)(v2 + 16) = "dot-postdom-only";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBE1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E1E4A8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4E1DC48(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBDE;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 7171940;
  *(_QWORD *)a1 = off_1E8136398;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D150);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1D8E8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D150, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1DD24(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBDF;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "domonly");
  *(_QWORD *)a1 = off_1E81364E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D158);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1D9D8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D158, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1DE10(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBDA;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 3;
  *(_DWORD *)(a1 + 32) = 7171940;
  *(_QWORD *)a1 = off_1E8136638;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D130);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1D528;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D130, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1DEEC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBDB;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "domonly");
  *(_QWORD *)a1 = off_1E8136788;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D138);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1D618;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D138, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1DFD8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBE0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "postdom");
  *(_QWORD *)a1 = off_1E81368D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D160);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1DAC8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D160, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1E0C4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBE1;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 11;
  strcpy((char *)(a1 + 32), "postdomonly");
  *(_QWORD *)a1 = off_1E8136A28;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D168);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1DBB8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D168, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1E1B4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBDC;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "postdom");
  *(_QWORD *)a1 = off_1E8136B78;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D140);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1D708;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D140, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1E2A0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBDD;
  *(_DWORD *)(a1 + 24) = 2;
  *(_BYTE *)(a1 + 55) = 11;
  strcpy((char *)(a1 + 32), "postdomonly");
  *(_QWORD *)a1 = off_1E8136CC8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D148);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E1D7F8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D148, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E1E390()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1DE10(v0);
}

uint64_t sub_1C4E1E3B8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1DEEC(v0);
}

uint64_t sub_1C4E1E3E0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1E1B4(v0);
}

uint64_t sub_1C4E1E408()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1E2A0(v0);
}

uint64_t sub_1C4E1E430()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1DC48(v0);
}

uint64_t sub_1C4E1E458()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1DD24(v0);
}

uint64_t sub_1C4E1E480()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1DFD8(v0);
}

uint64_t sub_1C4E1E4A8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E1E0C4(v0);
}

void sub_1C4E1E4D0(void **this)
{
  *this = off_1E8136440;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E1E50C(void **this)
{
  *this = off_1E8136440;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E1E55C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E1E574(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  size_t v57;
  const void *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  int64_t v68;
  llvm::raw_ostream *v69;
  void *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  std::string __p;
  __int16 v74;
  void *v75;
  std::string::size_type v76;
  int64_t v77;
  std::string v78;
  std::string v79;
  int v80[4];
  __int128 __dst;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  if (!(*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, v6))
    return 0;
  v85 = v6 + 32;
  v8 = *(_BYTE *)(a1 + 55);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 40);
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    v15 = *(char **)(a1 + 32);
    v14 = (char *)(a1 + 32);
    v13 = v15;
    if (v14[23] >= 0)
      v16 = v14;
    else
      v16 = v13;
    memmove(p_p, v16, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v17 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v82) = 0;
    p_dst = &__dst;
    goto LABEL_31;
  }
  v18 = ***a2;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & (v17 ^ (a2 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_23;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == a2)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_23;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_23:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_103;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v82 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v82) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_30:
    memmove(p_dst, v28, v27);
LABEL_31:
  *((_BYTE *)p_dst + v27) = 0;
  if (v82 >= 0)
    v33 = (const std::string::value_type *)&__dst;
  else
    v33 = (const std::string::value_type *)__dst;
  if (v82 >= 0)
    v34 = HIBYTE(v82) & 0x7F;
  else
    v34 = *((_QWORD *)&__dst + 1);
  v35 = std::string::append(&__p, v33, v34);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v79, ".dot");
  v38 = v37->__r_.__value_.__r.__words[2];
  v83 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v84 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80[0] = 0;
  v39 = (llvm *)std::system_category();
  v40 = (llvm::raw_ostream *)llvm::errs(v39);
  v41 = *((_QWORD *)v40 + 4);
  if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 39;
    *(_QWORD *)v41 = *(_QWORD *)"Writing '";
    *((_QWORD *)v40 + 4) += 9;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, "Writing '", 9uLL);
  }
  if (v84 >= 0)
    v42 = (const char *)&v83;
  else
    v42 = (const char *)v83;
  if (v84 >= 0)
    v43 = HIBYTE(v84) & 0x7F;
  else
    v43 = *((_QWORD *)&v83 + 1);
  v44 = llvm::raw_ostream::write(v40, v42, v43);
  v45 = (_DWORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 3uLL)
  {
    *v45 = 774778407;
    *((_QWORD *)v44 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v44, "'...", 4uLL);
  }
  if (v84 >= 0)
    v46 = &v83;
  else
    v46 = (__int128 *)v83;
  if (v84 >= 0)
    v47 = HIBYTE(v84) & 0x7F;
  else
    v47 = *((_QWORD *)&v83 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v79, v46, v47, (uint64_t)v80, 3);
  v78.__r_.__value_.__s.__data_[21] = 0;
  HIWORD(v78.__r_.__value_.__r.__words[2]) = 5120;
  strcpy((char *)&v78, "Dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v57 = 0;
    HIBYTE(v77) = 0;
    v60 = &v75;
    goto LABEL_75;
  }
  v48 = ***a2;
  v49 = *(_QWORD *)(v48 + 152);
  v50 = *(unsigned int *)(v48 + 168);
  if ((_DWORD)v50)
  {
    LODWORD(v51) = (v50 - 1) & (v17 ^ (a2 >> 9));
    v52 = (uint64_t ****)(v49 + 16 * v51);
    v53 = *v52;
    if (*v52 == a2)
      goto LABEL_67;
    v54 = 1;
    while (v53 != (uint64_t ***)-4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(uint64_t ****)(v49 + 16 * v51);
      if (v53 == a2)
      {
        v52 = (uint64_t ****)(v49 + 16 * v51);
        goto LABEL_67;
      }
    }
  }
  v52 = (uint64_t ****)(v49 + 16 * v50);
LABEL_67:
  v56 = (unint64_t *)v52[1];
  v59 = *v56;
  v58 = v56 + 2;
  v57 = v59;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
    abort();
  if (v57 >= 0x17)
  {
    v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v61 = v57 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v76 = v57;
    v77 = v62 | 0x8000000000000000;
    v75 = v60;
  }
  else
  {
    HIBYTE(v77) = v57;
    v60 = &v75;
    if (!v57)
      goto LABEL_75;
  }
  memmove(v60, v58, v57);
LABEL_75:
  *((_BYTE *)v60 + v57) = 0;
  if (v77 >= 0)
    v63 = (const std::string::value_type *)&v75;
  else
    v63 = (const std::string::value_type *)v75;
  if (v77 >= 0)
    v64 = HIBYTE(v77) & 0x7F;
  else
    v64 = v76;
  v65 = std::string::append(&v78, v63, v64);
  v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&__p, "' function");
  v68 = v67->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v80[0])
  {
    v69 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v70 = (void *)*((_QWORD *)v69 + 4);
    if (*((_QWORD *)v69 + 3) - (_QWORD)v70 > 0x20uLL)
    {
      qmemcpy(v70, "  error opening file for writing!", 33);
      *((_QWORD *)v69 + 4) += 33;
    }
    else
    {
      v69 = llvm::raw_ostream::write(v69, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v74 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v69 = sub_1C4E1EC30((llvm::raw_ostream *)&v79, (llvm::raw_ostream *)&v85, 0, (llvm::Twine *)&__p);
  }
  v71 = (llvm::raw_ostream *)llvm::errs(v69);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v72 = 10;
    ++*((_QWORD *)v71 + 4);
  }
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v79);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  return 0;
}

uint64_t sub_1C4E1EB9C()
{
  return 1;
}

void sub_1C4E1EBA4(void **this)
{
  *this = off_1E8136440;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E1EBE0(void **this)
{
  *this = off_1E8136440;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4E1EC30(llvm::raw_ostream *a1, llvm::raw_ostream *a2, char a3, llvm::Twine *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  std::string *p_p;
  size_t size;
  _DWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void **v16;
  _QWORD *v17;
  std::string *v18;
  size_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  const void *v23;
  void *v24;
  int v25;
  unsigned int v26;
  _BYTE *v27;
  const void *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  llvm::raw_ostream *v44;
  const char *v45;
  size_t v46;
  size_t v47;
  const char *v48;
  _BYTE *v49;
  uint64_t v50;
  _WORD *v51;
  std::string *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  uint64_t v58;
  int v59;
  void *v60;
  void *v61;
  _WORD *v62;
  std::string *v63;
  size_t v64;
  uint64_t v65;
  void *v66;
  llvm::raw_ostream *v67;
  const char *v68;
  size_t v69;
  _WORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  _WORD *v82;
  unsigned int v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  char v88;
  llvm::raw_ostream *v89[2];
  unsigned __int8 v90;
  _BYTE v91[7];
  _BYTE *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  _BYTE v97[64];
  char *v98;
  char *v99;
  uint64_t v100;
  std::string __p;
  int v102;
  _BYTE v103[64];
  void *v104;
  char *v105;
  uint64_t v106;
  void *v107[2];
  unsigned int v108;
  int v109;
  int v110;
  void *v111;
  _BYTE *v112;
  void *v113;
  void *v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  void *v118;
  _BYTE *v119;
  std::string v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  int v125;
  void **v126;
  void *v127[2];
  uint64_t v128;
  void *v129[2];
  char v130;

  v89[0] = a1;
  v89[1] = a2;
  v91[0] = a3;
  v90 = 0;
  llvm::Twine::str(a4, &v86);
  HIBYTE(v109) = 14;
  strcpy((char *)v107, "Dominator tree");
  v6 = v87;
  if (v88 >= 0)
    v6 = v88 & 0x7F;
  v7 = *((_QWORD *)a1 + 4);
  v8 = *((_QWORD *)a1 + 3) - v7;
  if (v6)
  {
    if (v8 > 8)
    {
      *(_BYTE *)(v7 + 8) = 34;
      *(_QWORD *)v7 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    v9 = &v86;
  }
  else
  {
    if (v8 > 8)
    {
      *(_BYTE *)(v7 + 8) = 34;
      *(_QWORD *)v7 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    v9 = v107;
  }
  llvm::DOT::EscapeString((char *)v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a1, (const char *)p_p, size);
  v12 = (_DWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v12 > 3uLL)
  {
    *v12 = 175841314;
    *((_QWORD *)a1 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a1, "\" {\n", 4uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = v88 & 0x7F;
  if (v88 < 0)
    v13 = v87;
  if (v13)
  {
    v17 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v17 > 7uLL)
    {
      *v17 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    v16 = &v86;
LABEL_32:
    llvm::DOT::EscapeString((char *)v16, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &__p;
    else
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v19 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v18, v19);
    v20 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v20) > 2)
    {
      *(_BYTE *)(v20 + 2) = 10;
      *(_WORD *)v20 = 15138;
      *((_QWORD *)a1 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\";\n", 3uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
  v14 = (void *)(HIBYTE(v109) & 0x7F);
  if (v109 < 0)
    v14 = v107[1];
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v15 > 7uLL)
    {
      *v15 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    v16 = v107;
    goto LABEL_32;
  }
LABEL_42:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(a1, (const char *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v21)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v21 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  if (SHIBYTE(v109) < 0)
    operator delete(v107[0]);
  sub_1C61907A0((uint64_t)a2, (uint64_t)v107);
  v22 = v103;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
  v23 = v107[1];
  if (v107[1] == v107[0])
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
    v24 = v107[1];
  }
  else
  {
    v84 = v108;
    v22 = malloc_type_malloc(8 * v108, 0x4065EBACuLL);
    if (!v22)
    {
      if (v84)
        goto LABEL_215;
      v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v22)
        goto LABEL_215;
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
    v24 = v107[0];
    v23 = v107[1];
  }
  v25 = v109;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v108;
  if (v23 == v24)
    v26 = v109;
  else
    v26 = v108;
  if (v26)
  {
    memmove(v22, v23, 8 * v26);
    v25 = v109;
  }
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = v25;
  v102 = v110;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  sub_1C4D6CDA0(&v104, v111, v112, 0xAAAAAAAAAAAAAAABLL * ((v112 - (_BYTE *)v111) >> 3));
  v27 = v97;
  v92 = v97;
  v28 = v114;
  if (v114 != v113)
  {
    v85 = v115;
    v27 = malloc_type_malloc(8 * v115, 0x4065EBACuLL);
    if (v27 || !v85 && (v27 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v93 = v27;
      v29 = v113;
      v28 = v114;
      goto LABEL_57;
    }
LABEL_215:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v93 = v97;
  v29 = v114;
LABEL_57:
  v30 = v116;
  v94 = v115;
  if (v28 == v29)
    v31 = v116;
  else
    v31 = v115;
  if (v31)
  {
    memmove(v27, v28, 8 * v31);
    v30 = v116;
  }
  v95 = v30;
  v96 = v117;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  sub_1C4D6CDA0(&v98, v118, v119, 0xAAAAAAAAAAAAAAABLL * ((v119 - (_BYTE *)v118) >> 3));
  while (1)
  {
    if (v105 - (_BYTE *)v104 != v99 - v98)
      goto LABEL_77;
    if (v104 == v105)
      break;
    v32 = v98 + 8;
    v33 = (char *)v104 + 8;
    while (1)
    {
      v34 = v33 - 8;
      if (*((_QWORD *)v33 - 1) != *((_QWORD *)v32 - 1))
        break;
      v35 = v32[8];
      if (v33[8])
        v36 = v35 == 0;
      else
        v36 = 1;
      if (v36)
      {
        if ((v33[8] == 0) == (v35 != 0))
          break;
      }
      else if (*(_QWORD *)v33 != *(_QWORD *)v32)
      {
        break;
      }
      v32 += 24;
      v33 += 24;
      if (v34 + 24 == v105)
        goto LABEL_177;
    }
LABEL_77:
    v37 = *((_QWORD *)v105 - 3);
    v130 = 0;
    LOBYTE(v129[0]) = 0;
    v38 = v89[0];
    v39 = *((_QWORD *)v89[0] + 4);
    if ((unint64_t)(*((_QWORD *)v89[0] + 3) - v39) > 4)
    {
      *(_BYTE *)(v39 + 4) = 101;
      *(_DWORD *)v39 = 1685016073;
      *((_QWORD *)v38 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v89[0], "\tNode", 5uLL);
    }
    llvm::write_hex(v38, v37, 3, 0, 0);
    v40 = (_QWORD *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v40 > 7uLL)
    {
      *v40 = 0x3D65706168735B20;
      v41 = *((_QWORD *)v38 + 4) + 8;
      *((_QWORD *)v38 + 4) = v41;
    }
    else
    {
      llvm::raw_ostream::write(v38, " [shape=", 8uLL);
      v41 = *((_QWORD *)v38 + 4);
    }
    v42 = v90;
    v43 = *((_QWORD *)v38 + 3) - v41;
    if (v90)
    {
      if (v43 <= 4)
      {
        v44 = v38;
        v45 = "none,";
        v46 = 5;
        goto LABEL_86;
      }
      *(_BYTE *)(v41 + 4) = 44;
      *(_DWORD *)v41 = 1701736302;
      v80 = *((_QWORD *)v38 + 4) + 5;
    }
    else
    {
      if (v43 <= 6)
      {
        v44 = v38;
        v45 = "record,";
        v46 = 7;
LABEL_86:
        llvm::raw_ostream::write(v44, v45, v46);
        goto LABEL_87;
      }
      *(_DWORD *)(v41 + 3) = 744780399;
      *(_DWORD *)v41 = 1868785010;
      v80 = *((_QWORD *)v38 + 4) + 7;
    }
    *((_QWORD *)v38 + 4) = v80;
LABEL_87:
    if (v130 >= 0)
      v47 = v130 & 0x7F;
    else
      v47 = (size_t)v129[1];
    if (v47)
    {
      if (v130 >= 0)
        v48 = (const char *)v129;
      else
        v48 = (const char *)v129[0];
      llvm::raw_ostream::write(v38, v48, v47);
      v49 = (_BYTE *)*((_QWORD *)v38 + 4);
      if (*((_BYTE **)v38 + 3) == v49)
      {
        llvm::raw_ostream::write(v38, ",", 1uLL);
      }
      else
      {
        *v49 = 44;
        ++*((_QWORD *)v38 + 4);
      }
    }
    v50 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v50) > 5)
    {
      *(_WORD *)(v50 + 4) = 15724;
      *(_DWORD *)v50 = 1700946284;
      *((_QWORD *)v38 + 4) += 6;
      if (!v42)
      {
LABEL_98:
        v51 = (_WORD *)*((_QWORD *)v38 + 4);
        if (*((_QWORD *)v38 + 3) - (_QWORD)v51 > 1uLL)
        {
          *v51 = 31522;
          *((_QWORD *)v38 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v38, "\"{", 2uLL);
        }
        sub_1C6190858((uint64_t)v127, v91, *(llvm::Value **)v37);
        llvm::DOT::EscapeString((char *)v127, &v120);
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &v120;
        else
          v52 = (std::string *)v120.__r_.__value_.__r.__words[0];
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = *((_BYTE *)&v120.__r_.__value_.__s + 23) & 0x7F;
        else
          v53 = v120.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v38, (const char *)v52, v53);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v120.__r_.__value_.__l.__data_);
        if (SHIBYTE(v128) < 0)
        {
          v54 = v127[0];
LABEL_138:
          operator delete(v54);
          goto LABEL_139;
        }
        goto LABEL_139;
      }
    }
    else
    {
      llvm::raw_ostream::write(v38, "label=", 6uLL);
      if (!v42)
        goto LABEL_98;
    }
    v55 = *(unsigned int *)(v37 + 32);
    if ((_DWORD)v55)
    {
      v57 = 0;
      v58 = 8 * v55 - 8;
      do
      {
        LODWORD(v55) = v57 + 1;
        v56 = v58 != 0;
        if (!v58)
          break;
        v58 -= 8;
        v36 = v57++ == 63;
      }
      while (!v36);
    }
    else
    {
      v56 = 0;
    }
    if (v55 <= 1)
      v59 = 1;
    else
      v59 = v55;
    v60 = (void *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v60 > 0x30uLL)
    {
      qmemcpy(v60, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v61 = (void *)(*((_QWORD *)v38 + 4) + 49);
      *((_QWORD *)v38 + 4) = v61;
    }
    else
    {
      llvm::raw_ostream::write(v38, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v61 = (void *)*((_QWORD *)v38 + 4);
    }
    if (*((_QWORD *)v38 + 3) - (_QWORD)v61 > 0x2EuLL)
    {
      qmemcpy(v61, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v38 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v38, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1C5E21910(v38, (v59 + v56), 0, 0, 0);
    v62 = (_WORD *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v62 > 1uLL)
    {
      *v62 = 15906;
      *((_QWORD *)v38 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v38, "\">", 2uLL);
    }
    sub_1C6190858((uint64_t)&v120, v91, *(llvm::Value **)v37);
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v120;
    else
      v63 = (std::string *)v120.__r_.__value_.__r.__words[0];
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = *((_BYTE *)&v120.__r_.__value_.__s + 23) & 0x7F;
    else
      v64 = v120.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v38, (const char *)v63, v64);
    v65 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v65) > 4)
    {
      *(_BYTE *)(v65 + 4) = 62;
      *(_DWORD *)v65 = 1685335868;
      *((_QWORD *)v38 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v38, "</td>", 5uLL);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    {
      v54 = (void *)v120.__r_.__value_.__r.__words[0];
      goto LABEL_138;
    }
LABEL_139:
    v127[0] = 0;
    v127[1] = 0;
    v128 = 0;
    LODWORD(v120.__r_.__value_.__r.__words[1]) = 0;
    v123 = 0;
    v124 = 0;
    v120.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
    v126 = v127;
    v125 = 0;
    v121 = 0;
    v122 = 0;
    v120.__r_.__value_.__r.__words[2] = 0;
    if (v42)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v120, "</tr><tr>", 9uLL);
      v66 = (void *)*((_QWORD *)v38 + 4);
      if (*((_QWORD *)v38 + 3) - (_QWORD)v66 <= 0xDuLL)
      {
        v67 = v38;
        v68 = "</tr></table>>";
        v69 = 14;
LABEL_144:
        llvm::raw_ostream::write(v67, v68, v69);
        goto LABEL_145;
      }
      qmemcpy(v66, "</tr></table>>", 14);
      v79 = *((_QWORD *)v38 + 4) + 14;
    }
    else
    {
      v70 = (_WORD *)*((_QWORD *)v38 + 4);
      if (*((_QWORD *)v38 + 3) - (_QWORD)v70 <= 1uLL)
      {
        v67 = v38;
        v68 = "}\"";
        v69 = 2;
        goto LABEL_144;
      }
      *v70 = 8829;
      v79 = *((_QWORD *)v38 + 4) + 2;
    }
    *((_QWORD *)v38 + 4) = v79;
LABEL_145:
    v71 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v71) > 2)
    {
      *(_BYTE *)(v71 + 2) = 10;
      *(_WORD *)v71 = 15197;
      *((_QWORD *)v38 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v38, "];\n", 3uLL);
    }
    v72 = *(_QWORD *)(v37 + 24);
    v73 = *(unsigned int *)(v37 + 32);
    if ((_DWORD)v73)
    {
      v74 = 0;
      do
      {
        sub_1C4E1FD30(v89, v37, *(_QWORD *)(v72 + v74));
        v75 = v74 + 8;
        if ((_DWORD)v74 == 504)
          break;
        v36 = 8 * v73 - 8 == v74;
        v74 += 8;
      }
      while (!v36);
      v76 = (unint64_t *)(v72 + v75);
    }
    else
    {
      v76 = *(unint64_t **)(v37 + 24);
    }
    v77 = (unint64_t *)(v72 + 8 * v73);
    while (v76 != v77)
    {
      v78 = *v76++;
      sub_1C4E1FD30(v89, v37, v78);
    }
    v120.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    if (v125 == 1 && v120.__r_.__value_.__r.__words[2])
      MEMORY[0x1CAA32F9C](v120.__r_.__value_.__r.__words[2], 0x1000C8077774924);
    if (SHIBYTE(v128) < 0)
      operator delete(v127[0]);
    if (v130 < 0)
      operator delete(v129[0]);
    sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&__p);
  }
LABEL_177:
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v93 != v92)
    free(v93);
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v114 != v113)
    free(v114);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v107[1] != v107[0])
    free(v107[1]);
  v81 = v89[0];
  v82 = (_WORD *)*((_QWORD *)v89[0] + 4);
  if (*((_QWORD *)v89[0] + 3) - (_QWORD)v82 > 1uLL)
  {
    *v82 = 2685;
    *((_QWORD *)v81 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v89[0], "}\n", 2uLL);
  }
  if (v88 < 0)
    operator delete(v86);
  return a1;
}

void sub_1C4E1F928(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  _BYTE v17[64];
  void *__p[2];
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE v25[64];
  void *v26[2];
  uint64_t v27;

  v20 = v25;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v21 = v25;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v25, v6, 8 * v8);
  }
  else
  {
    v21 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v22 = *(_DWORD *)(a1 + 16);
  v23 = v8;
  v24 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)v26 = *(_OWORD *)(a1 + 96);
  v27 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v12 = v17;
  v10 = *(const void **)a2;
  v9 = *(const void **)(a2 + 8);
  if (v9 == *(const void **)a2)
  {
    v13 = v17;
    v11 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v11)
      memmove(v17, v9, 8 * v11);
  }
  else
  {
    v13 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    LODWORD(v11) = *(_DWORD *)(a2 + 20);
  }
  v14 = *(_DWORD *)(a2 + 16);
  v15 = v11;
  v16 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  sub_1C4E1FAAC(a3, (uint64_t *)&v20, (uint64_t *)&v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13 != v12)
    free(v13);
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v21 != v20)
    free(v21);
}

uint64_t sub_1C4E1FAAC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (void *)(a1 + 32);
  *(_QWORD *)a1 = v6;
  v8 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    *(_QWORD *)(a1 + 8) = v6;
    v9 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v9)
      memmove(v6, (const void *)a2[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a2[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  a2[2] = 8;
  *((_DWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_QWORD *)(a1 + 112) = a2[14];
  v10 = (void *)(a1 + 152);
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  *(_QWORD *)(a1 + 120) = a1 + 152;
  v12 = *a3;
  v11 = a3[1];
  if (v11 == *a3)
  {
    *(_QWORD *)(a1 + 128) = v10;
    v13 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v13)
      memmove(v10, (const void *)a3[1], 8 * v13);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = v11;
    a3[1] = v12;
  }
  *(_QWORD *)(a1 + 136) = a3[2];
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a3 + 6);
  a3[2] = 8;
  *((_DWORD *)a3 + 6) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *((_OWORD *)a3 + 6);
  *(_QWORD *)(a1 + 232) = a3[14];
  a3[12] = 0;
  a3[13] = 0;
  a3[14] = 0;
  return a1;
}

uint64_t sub_1C4E1FBCC(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v6 = *(char **)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v6[8] = 0;
    v14 = v6 + 24;
    v6[16] = 0;
  }
  else
  {
    v7 = (char *)*v4;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*v4) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[24 * v8];
    *(_QWORD *)v13 = a2;
    v13[8] = 0;
    v13[16] = 0;
    v14 = v13 + 24;
    if (v6 != v7)
    {
      do
      {
        v15 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v15;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      v6 = (char *)*v4;
    }
    *(_QWORD *)(a1 + 96) = v13;
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = &v12[24 * v11];
    if (v6)
      operator delete(v6);
  }
  *(_QWORD *)(a1 + 104) = v14;
  return a1;
}

void sub_1C4E1FD30(llvm::raw_ostream **a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v7 = v3;
    v8 = v4;
    v6 = 0;
    LOBYTE(__p) = 0;
    sub_1C617C7A0(a1, a2, a3, (uint64_t)&__p);
    if (v6 < 0)
      operator delete(__p);
  }
}

void sub_1C4E1FD70(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v2 = *((_QWORD *)this + 13);
  while (2)
  {
    v3 = *(_QWORD *)(v2 - 24);
    if (!*(_BYTE *)(v2 - 8))
    {
      *(_QWORD *)(v2 - 16) = *(_QWORD *)(v3 + 24);
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v4 = *(uint64_t **)(v2 - 16);
      if (v4 == (uint64_t *)(*(_QWORD *)(v3 + 24) + 8 * *(unsigned int *)(v3 + 32)))
        break;
      *(_QWORD *)(v2 - 16) = v4 + 1;
      v5 = *v4;
      sub_1C4774094(this, *v4);
      if (v6)
      {
        v9 = (_BYTE *)*((_QWORD *)this + 13);
        v8 = *((_QWORD *)this + 14);
        if ((unint64_t)v9 >= v8)
        {
          v11 = (_BYTE *)*((_QWORD *)this + 12);
          v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 3) + 1;
          if (v12 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v15 = (char *)operator new(24 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * ((v9 - v11) >> 3)];
          *(_QWORD *)v16 = v5;
          v16[8] = 0;
          v16[16] = 0;
          v10 = v16 + 24;
          if (v9 != v11)
          {
            do
            {
              v17 = *(_OWORD *)(v9 - 24);
              *((_QWORD *)v16 - 1) = *((_QWORD *)v9 - 1);
              *(_OWORD *)(v16 - 24) = v17;
              v16 -= 24;
              v9 -= 24;
            }
            while (v9 != v11);
            v9 = (_BYTE *)*((_QWORD *)this + 12);
          }
          *((_QWORD *)this + 12) = v16;
          *((_QWORD *)this + 13) = v10;
          *((_QWORD *)this + 14) = &v15[24 * v14];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_QWORD *)v9 = v5;
          v9[8] = 0;
          v10 = v9 + 24;
          v9[16] = 0;
        }
        *((_QWORD *)this + 13) = v10;
        return;
      }
    }
    v7 = *((_QWORD *)this + 12);
    v2 = *((_QWORD *)this + 13) - 24;
    *((_QWORD *)this + 13) = v2;
    if (v7 != v2)
      continue;
    break;
  }
}

void sub_1C4E1FF10(void **this)
{
  *this = off_1E8136590;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E1FF4C(void **this)
{
  *this = off_1E8136590;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E1FF9C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E1FFB4(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  size_t v57;
  const void *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  int64_t v68;
  llvm::raw_ostream *v69;
  void *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  std::string __p;
  __int16 v74;
  void *v75;
  std::string::size_type v76;
  int64_t v77;
  std::string v78;
  std::string v79;
  int v80[4];
  __int128 __dst;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  if (!(*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, v6))
    return 0;
  v85 = v6 + 32;
  v8 = *(_BYTE *)(a1 + 55);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 40);
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    v15 = *(char **)(a1 + 32);
    v14 = (char *)(a1 + 32);
    v13 = v15;
    if (v14[23] >= 0)
      v16 = v14;
    else
      v16 = v13;
    memmove(p_p, v16, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v17 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v82) = 0;
    p_dst = &__dst;
    goto LABEL_31;
  }
  v18 = ***a2;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & (v17 ^ (a2 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_23;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == a2)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_23;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_23:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_103;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v82 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v82) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_30:
    memmove(p_dst, v28, v27);
LABEL_31:
  *((_BYTE *)p_dst + v27) = 0;
  if (v82 >= 0)
    v33 = (const std::string::value_type *)&__dst;
  else
    v33 = (const std::string::value_type *)__dst;
  if (v82 >= 0)
    v34 = HIBYTE(v82) & 0x7F;
  else
    v34 = *((_QWORD *)&__dst + 1);
  v35 = std::string::append(&__p, v33, v34);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v79, ".dot");
  v38 = v37->__r_.__value_.__r.__words[2];
  v83 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v84 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80[0] = 0;
  v39 = (llvm *)std::system_category();
  v40 = (llvm::raw_ostream *)llvm::errs(v39);
  v41 = *((_QWORD *)v40 + 4);
  if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 39;
    *(_QWORD *)v41 = *(_QWORD *)"Writing '";
    *((_QWORD *)v40 + 4) += 9;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, "Writing '", 9uLL);
  }
  if (v84 >= 0)
    v42 = (const char *)&v83;
  else
    v42 = (const char *)v83;
  if (v84 >= 0)
    v43 = HIBYTE(v84) & 0x7F;
  else
    v43 = *((_QWORD *)&v83 + 1);
  v44 = llvm::raw_ostream::write(v40, v42, v43);
  v45 = (_DWORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 3uLL)
  {
    *v45 = 774778407;
    *((_QWORD *)v44 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v44, "'...", 4uLL);
  }
  if (v84 >= 0)
    v46 = &v83;
  else
    v46 = (__int128 *)v83;
  if (v84 >= 0)
    v47 = HIBYTE(v84) & 0x7F;
  else
    v47 = *((_QWORD *)&v83 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v79, v46, v47, (uint64_t)v80, 3);
  v78.__r_.__value_.__s.__data_[21] = 0;
  HIWORD(v78.__r_.__value_.__r.__words[2]) = 5120;
  strcpy((char *)&v78, "Dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v57 = 0;
    HIBYTE(v77) = 0;
    v60 = &v75;
    goto LABEL_75;
  }
  v48 = ***a2;
  v49 = *(_QWORD *)(v48 + 152);
  v50 = *(unsigned int *)(v48 + 168);
  if ((_DWORD)v50)
  {
    LODWORD(v51) = (v50 - 1) & (v17 ^ (a2 >> 9));
    v52 = (uint64_t ****)(v49 + 16 * v51);
    v53 = *v52;
    if (*v52 == a2)
      goto LABEL_67;
    v54 = 1;
    while (v53 != (uint64_t ***)-4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(uint64_t ****)(v49 + 16 * v51);
      if (v53 == a2)
      {
        v52 = (uint64_t ****)(v49 + 16 * v51);
        goto LABEL_67;
      }
    }
  }
  v52 = (uint64_t ****)(v49 + 16 * v50);
LABEL_67:
  v56 = (unint64_t *)v52[1];
  v59 = *v56;
  v58 = v56 + 2;
  v57 = v59;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
    abort();
  if (v57 >= 0x17)
  {
    v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v61 = v57 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v76 = v57;
    v77 = v62 | 0x8000000000000000;
    v75 = v60;
  }
  else
  {
    HIBYTE(v77) = v57;
    v60 = &v75;
    if (!v57)
      goto LABEL_75;
  }
  memmove(v60, v58, v57);
LABEL_75:
  *((_BYTE *)v60 + v57) = 0;
  if (v77 >= 0)
    v63 = (const std::string::value_type *)&v75;
  else
    v63 = (const std::string::value_type *)v75;
  if (v77 >= 0)
    v64 = HIBYTE(v77) & 0x7F;
  else
    v64 = v76;
  v65 = std::string::append(&v78, v63, v64);
  v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&__p, "' function");
  v68 = v67->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v80[0])
  {
    v69 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v70 = (void *)*((_QWORD *)v69 + 4);
    if (*((_QWORD *)v69 + 3) - (_QWORD)v70 > 0x20uLL)
    {
      qmemcpy(v70, "  error opening file for writing!", 33);
      *((_QWORD *)v69 + 4) += 33;
    }
    else
    {
      v69 = llvm::raw_ostream::write(v69, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v74 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v69 = sub_1C4E1EC30((llvm::raw_ostream *)&v79, (llvm::raw_ostream *)&v85, 1, (llvm::Twine *)&__p);
  }
  v71 = (llvm::raw_ostream *)llvm::errs(v69);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v72 = 10;
    ++*((_QWORD *)v71 + 4);
  }
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v79);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  return 0;
}

uint64_t sub_1C4E205DC()
{
  return 1;
}

void sub_1C4E205E4(void **this)
{
  *this = off_1E8136590;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E20620(void **this)
{
  *this = off_1E8136590;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E20670(void **this)
{
  *this = off_1E81366E0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E206AC(void **this)
{
  *this = off_1E81366E0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E206FC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E20714(_QWORD **a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v4 = (void **)*a1[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  if (!((unsigned int (*)(_QWORD **, uint64_t ***, uint64_t))(*a1)[18])(a1, a2, v6))
    return 0;
  v38 = v6 + 32;
  v29.__r_.__value_.__s.__data_[21] = 0;
  HIWORD(v29.__r_.__value_.__r.__words[2]) = 5120;
  strcpy((char *)&v29, "Dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    HIBYTE(v35) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_20;
  }
  v7 = ***a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_11;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
LABEL_11:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_12:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v16;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v16;
    p_dst = (void **)&__dst;
    if (!v16)
      goto LABEL_20;
  }
  memmove(p_dst, v17, v16);
LABEL_20:
  *((_BYTE *)p_dst + v16) = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35) & 0x7F;
  else
    v23 = v34;
  v24 = std::string::append(&v29, v22, v23);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v31, "' function");
  v27 = v26->__r_.__value_.__r.__words[2];
  v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v32 = 260;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
  v30 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  sub_1C4E20A58((llvm::raw_ostream *)&v38, (llvm::Twine *)&v31, 0, (llvm::Twine *)&v29);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  return 0;
}

uint64_t sub_1C4E209C4()
{
  return 1;
}

void sub_1C4E209CC(void **this)
{
  *this = off_1E81366E0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E20A08(void **this)
{
  *this = off_1E81366E0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E20A58(llvm::raw_ostream *a1, llvm::Twine *a2, char a3, llvm::Twine *a4)
{
  llvm *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  char v17;
  size_t v18;
  __int128 *v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  void *v24[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v28 = 0;
  llvm::Twine::str(a2, v24);
  v23 = 260;
  v22[0] = v24;
  llvm::createGraphFilename((llvm::Twine *)v22, &v28, &v26);
  *(_OWORD *)__p = v26;
  v21 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  v7 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, v28, 1, 0, 0);
  if (v28 == -1)
  {
    v11 = (llvm::raw_ostream *)llvm::errs(v7);
    v12 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 0x13)
    {
      *(_DWORD *)(v12 + 16) = 656434540;
      *(_OWORD *)v12 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v11 + 4) += 20;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "error opening file '", 0x14uLL);
    }
    if (v21 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v21 >= 0)
      v14 = HIBYTE(v21) & 0x7F;
    else
      v14 = (size_t)__p[1];
    v15 = llvm::raw_ostream::write(v11, (const char *)v13, v14);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xEuLL)
    {
      qmemcpy(v16, "' for writing!\n", 15);
      *((_QWORD *)v15 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v15, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
  }
  else
  {
    v8 = sub_1C4E1EC30((llvm::raw_ostream *)v22, a1, a3, a4);
    v9 = (llvm::raw_ostream *)llvm::errs(v8);
    v10 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0xA202E656E6F6420;
      *((_QWORD *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, " done. \n", 8uLL);
    }
    v26 = *(_OWORD *)__p;
    v27 = v21;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v22);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v17 = HIBYTE(v27);
  if (v27 >= 0)
    v18 = HIBYTE(v27) & 0x7F;
  else
    v18 = *((_QWORD *)&v26 + 1);
  if (v18)
  {
    if (v27 >= 0)
      v19 = &v26;
    else
      v19 = (__int128 *)v26;
    llvm::DisplayGraph(v19, v18, 0, 0);
    v17 = HIBYTE(v27);
  }
  if (v17 < 0)
    operator delete((void *)v26);
}

void sub_1C4E20CA4(void **this)
{
  *this = off_1E8136830;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E20CE0(void **this)
{
  *this = off_1E8136830;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E20D30(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E20D48(_QWORD **a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v4 = (void **)*a1[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  if (!((unsigned int (*)(_QWORD **, uint64_t ***, uint64_t))(*a1)[18])(a1, a2, v6))
    return 0;
  v38 = v6 + 32;
  v29.__r_.__value_.__s.__data_[21] = 0;
  HIWORD(v29.__r_.__value_.__r.__words[2]) = 5120;
  strcpy((char *)&v29, "Dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    HIBYTE(v35) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_20;
  }
  v7 = ***a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_11;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
LABEL_11:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_12:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v16;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v16;
    p_dst = (void **)&__dst;
    if (!v16)
      goto LABEL_20;
  }
  memmove(p_dst, v17, v16);
LABEL_20:
  *((_BYTE *)p_dst + v16) = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35) & 0x7F;
  else
    v23 = v34;
  v24 = std::string::append(&v29, v22, v23);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v31, "' function");
  v27 = v26->__r_.__value_.__r.__words[2];
  v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v32 = 260;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
  v30 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  sub_1C4E20A58((llvm::raw_ostream *)&v38, (llvm::Twine *)&v31, 1, (llvm::Twine *)&v29);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  return 0;
}

uint64_t sub_1C4E20FF8()
{
  return 1;
}

void sub_1C4E21000(void **this)
{
  *this = off_1E8136830;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E2103C(void **this)
{
  *this = off_1E8136830;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E2108C(void **this)
{
  *this = off_1E8136980;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E210C8(void **this)
{
  *this = off_1E8136980;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E21118(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E21130(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  size_t v57;
  const void *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  int64_t v68;
  llvm::raw_ostream *v69;
  void *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  std::string __p;
  __int16 v74;
  void *v75;
  std::string::size_type v76;
  int64_t v77;
  std::string v78;
  std::string v79;
  int v80[4];
  __int128 __dst;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::PostDominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  if (!(*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, v6))
    return 0;
  v85 = v6 + 32;
  v8 = *(_BYTE *)(a1 + 55);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 40);
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    v15 = *(char **)(a1 + 32);
    v14 = (char *)(a1 + 32);
    v13 = v15;
    if (v14[23] >= 0)
      v16 = v14;
    else
      v16 = v13;
    memmove(p_p, v16, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v17 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v82) = 0;
    p_dst = &__dst;
    goto LABEL_31;
  }
  v18 = ***a2;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & (v17 ^ (a2 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_23;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == a2)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_23;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_23:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_103;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v82 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v82) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_30:
    memmove(p_dst, v28, v27);
LABEL_31:
  *((_BYTE *)p_dst + v27) = 0;
  if (v82 >= 0)
    v33 = (const std::string::value_type *)&__dst;
  else
    v33 = (const std::string::value_type *)__dst;
  if (v82 >= 0)
    v34 = HIBYTE(v82) & 0x7F;
  else
    v34 = *((_QWORD *)&__dst + 1);
  v35 = std::string::append(&__p, v33, v34);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v79, ".dot");
  v38 = v37->__r_.__value_.__r.__words[2];
  v83 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v84 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80[0] = 0;
  v39 = (llvm *)std::system_category();
  v40 = (llvm::raw_ostream *)llvm::errs(v39);
  v41 = *((_QWORD *)v40 + 4);
  if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 39;
    *(_QWORD *)v41 = *(_QWORD *)"Writing '";
    *((_QWORD *)v40 + 4) += 9;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, "Writing '", 9uLL);
  }
  if (v84 >= 0)
    v42 = (const char *)&v83;
  else
    v42 = (const char *)v83;
  if (v84 >= 0)
    v43 = HIBYTE(v84) & 0x7F;
  else
    v43 = *((_QWORD *)&v83 + 1);
  v44 = llvm::raw_ostream::write(v40, v42, v43);
  v45 = (_DWORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 3uLL)
  {
    *v45 = 774778407;
    *((_QWORD *)v44 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v44, "'...", 4uLL);
  }
  if (v84 >= 0)
    v46 = &v83;
  else
    v46 = (__int128 *)v83;
  if (v84 >= 0)
    v47 = HIBYTE(v84) & 0x7F;
  else
    v47 = *((_QWORD *)&v83 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v79, v46, v47, (uint64_t)v80, 3);
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v78.__r_.__value_.__r.__words[1] = xmmword_1C640C680;
  strcpy(v78.__r_.__value_.__l.__data_, "Post dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v57 = 0;
    HIBYTE(v77) = 0;
    v60 = &v75;
    goto LABEL_75;
  }
  v48 = ***a2;
  v49 = *(_QWORD *)(v48 + 152);
  v50 = *(unsigned int *)(v48 + 168);
  if ((_DWORD)v50)
  {
    LODWORD(v51) = (v50 - 1) & (v17 ^ (a2 >> 9));
    v52 = (uint64_t ****)(v49 + 16 * v51);
    v53 = *v52;
    if (*v52 == a2)
      goto LABEL_67;
    v54 = 1;
    while (v53 != (uint64_t ***)-4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(uint64_t ****)(v49 + 16 * v51);
      if (v53 == a2)
      {
        v52 = (uint64_t ****)(v49 + 16 * v51);
        goto LABEL_67;
      }
    }
  }
  v52 = (uint64_t ****)(v49 + 16 * v50);
LABEL_67:
  v56 = (unint64_t *)v52[1];
  v59 = *v56;
  v58 = v56 + 2;
  v57 = v59;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
    abort();
  if (v57 >= 0x17)
  {
    v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v61 = v57 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v76 = v57;
    v77 = v62 | 0x8000000000000000;
    v75 = v60;
  }
  else
  {
    HIBYTE(v77) = v57;
    v60 = &v75;
    if (!v57)
      goto LABEL_75;
  }
  memmove(v60, v58, v57);
LABEL_75:
  *((_BYTE *)v60 + v57) = 0;
  if (v77 >= 0)
    v63 = (const std::string::value_type *)&v75;
  else
    v63 = (const std::string::value_type *)v75;
  if (v77 >= 0)
    v64 = HIBYTE(v77) & 0x7F;
  else
    v64 = v76;
  v65 = std::string::append(&v78, v63, v64);
  v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&__p, "' function");
  v68 = v67->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v80[0])
  {
    v69 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v70 = (void *)*((_QWORD *)v69 + 4);
    if (*((_QWORD *)v69 + 3) - (_QWORD)v70 > 0x20uLL)
    {
      qmemcpy(v70, "  error opening file for writing!", 33);
      *((_QWORD *)v69 + 4) += 33;
    }
    else
    {
      v69 = llvm::raw_ostream::write(v69, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v74 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v69 = sub_1C4E217FC((llvm::raw_ostream *)&v79, (llvm::raw_ostream *)&v85, 0, (llvm::Twine *)&__p);
  }
  v71 = (llvm::raw_ostream *)llvm::errs(v69);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v72 = 10;
    ++*((_QWORD *)v71 + 4);
  }
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v79);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  return 0;
}

uint64_t sub_1C4E21768()
{
  return 1;
}

void sub_1C4E21770(void **this)
{
  *this = off_1E8136980;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E217AC(void **this)
{
  *this = off_1E8136980;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C4E217FC(llvm::raw_ostream *a1, llvm::raw_ostream *a2, char a3, llvm::Twine *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  std::string *p_p;
  size_t size;
  _DWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void **v16;
  _QWORD *v17;
  std::string *v18;
  size_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  const void *v23;
  void *v24;
  int v25;
  unsigned int v26;
  _BYTE *v27;
  const void *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  llvm::raw_ostream *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  llvm::raw_ostream *v44;
  const char *v45;
  size_t v46;
  size_t v47;
  const char *v48;
  _BYTE *v49;
  uint64_t v50;
  _WORD *v51;
  std::string *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  _BOOL4 v56;
  int v57;
  uint64_t v58;
  int v59;
  void *v60;
  void *v61;
  _WORD *v62;
  std::string *v63;
  size_t v64;
  uint64_t v65;
  void *v66;
  llvm::raw_ostream *v67;
  const char *v68;
  size_t v69;
  _WORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  _WORD *v82;
  int v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  char v88;
  llvm::raw_ostream *v89[2];
  unsigned __int8 v90;
  _BYTE v91[7];
  _BYTE *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  _BYTE v97[64];
  char *v98;
  char *v99;
  uint64_t v100;
  std::string __p;
  int v102;
  _BYTE v103[64];
  void *v104;
  char *v105;
  uint64_t v106;
  void *v107[3];
  int v108;
  void *v109;
  _BYTE *v110;
  void *v111;
  void *v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  void *v116;
  _BYTE *v117;
  std::string v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  int v123;
  void **v124;
  void *v125[2];
  uint64_t v126;
  void *v127[2];
  char v128;

  v89[0] = a1;
  v89[1] = a2;
  v91[0] = a3;
  v90 = 0;
  llvm::Twine::str(a4, &v86);
  HIBYTE(v107[2]) = 19;
  strcpy((char *)v107, "Post dominator tree");
  v6 = v87;
  if (v88 >= 0)
    v6 = v88 & 0x7F;
  v7 = *((_QWORD *)a1 + 4);
  v8 = *((_QWORD *)a1 + 3) - v7;
  if (v6)
  {
    if (v8 > 8)
    {
      *(_BYTE *)(v7 + 8) = 34;
      *(_QWORD *)v7 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    v9 = &v86;
  }
  else
  {
    if (v8 > 8)
    {
      *(_BYTE *)(v7 + 8) = 34;
      *(_QWORD *)v7 = *(_QWORD *)"digraph \"";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "digraph \"", 9uLL);
    }
    v9 = v107;
  }
  llvm::DOT::EscapeString((char *)v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a1, (const char *)p_p, size);
  v12 = (_DWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v12 > 3uLL)
  {
    *v12 = 175841314;
    *((_QWORD *)a1 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a1, "\" {\n", 4uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = v88 & 0x7F;
  if (v88 < 0)
    v13 = v87;
  if (v13)
  {
    v17 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v17 > 7uLL)
    {
      *v17 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    v16 = &v86;
LABEL_32:
    llvm::DOT::EscapeString((char *)v16, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &__p;
    else
      v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v19 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a1, (const char *)v18, v19);
    v20 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v20) > 2)
    {
      *(_BYTE *)(v20 + 2) = 10;
      *(_WORD *)v20 = 15138;
      *((_QWORD *)a1 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\";\n", 3uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
  v14 = (void *)(HIBYTE(v107[2]) & 0x7F);
  if (SHIBYTE(v107[2]) < 0)
    v14 = v107[1];
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v15 > 7uLL)
    {
      *v15 = 0x223D6C6562616C09;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "\tlabel=\"", 8uLL);
    }
    v16 = v107;
    goto LABEL_32;
  }
LABEL_42:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(a1, (const char *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v21)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *v21 = 10;
    ++*((_QWORD *)a1 + 4);
  }
  if (SHIBYTE(v107[2]) < 0)
    operator delete(v107[0]);
  sub_1C619090C((uint64_t)v107, *(_QWORD *)(*(_QWORD *)a2 + 72));
  v22 = v103;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
  v23 = v107[1];
  if (v107[1] == v107[0])
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
    v24 = v107[1];
  }
  else
  {
    v84 = (int)v107[2];
    v22 = malloc_type_malloc(8 * LODWORD(v107[2]), 0x4065EBACuLL);
    if (!v22)
    {
      if (v84)
        goto LABEL_215;
      v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v22)
        goto LABEL_215;
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
    v24 = v107[0];
    v23 = v107[1];
  }
  v25 = HIDWORD(v107[2]);
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v107[2];
  if (v23 == v24)
    v26 = HIDWORD(v107[2]);
  else
    v26 = v107[2];
  if (v26)
  {
    memmove(v22, v23, 8 * v26);
    v25 = HIDWORD(v107[2]);
  }
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = v25;
  v102 = v108;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  sub_1C4D6CDA0(&v104, v109, v110, 0xAAAAAAAAAAAAAAABLL * ((v110 - (_BYTE *)v109) >> 3));
  v27 = v97;
  v92 = v97;
  v28 = v112;
  if (v112 != v111)
  {
    v85 = v113;
    v27 = malloc_type_malloc(8 * v113, 0x4065EBACuLL);
    if (v27 || !v85 && (v27 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v93 = v27;
      v29 = v111;
      v28 = v112;
      goto LABEL_57;
    }
LABEL_215:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v93 = v97;
  v29 = v112;
LABEL_57:
  v30 = v114;
  v94 = v113;
  if (v28 == v29)
    v31 = v114;
  else
    v31 = v113;
  if (v31)
  {
    memmove(v27, v28, 8 * v31);
    v30 = v114;
  }
  v95 = v30;
  v96 = v115;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  sub_1C4D6CDA0(&v98, v116, v117, 0xAAAAAAAAAAAAAAABLL * ((v117 - (_BYTE *)v116) >> 3));
  while (1)
  {
    if (v105 - (_BYTE *)v104 != v99 - v98)
      goto LABEL_77;
    if (v104 == v105)
      break;
    v32 = v98 + 8;
    v33 = (char *)v104 + 8;
    while (1)
    {
      v34 = v33 - 8;
      if (*((_QWORD *)v33 - 1) != *((_QWORD *)v32 - 1))
        break;
      v35 = v32[8];
      if (v33[8])
        v36 = v35 == 0;
      else
        v36 = 1;
      if (v36)
      {
        if ((v33[8] == 0) == (v35 != 0))
          break;
      }
      else if (*(_QWORD *)v33 != *(_QWORD *)v32)
      {
        break;
      }
      v32 += 24;
      v33 += 24;
      if (v34 + 24 == v105)
        goto LABEL_177;
    }
LABEL_77:
    v37 = *((_QWORD *)v105 - 3);
    v128 = 0;
    LOBYTE(v127[0]) = 0;
    v38 = v89[0];
    v39 = *((_QWORD *)v89[0] + 4);
    if ((unint64_t)(*((_QWORD *)v89[0] + 3) - v39) > 4)
    {
      *(_BYTE *)(v39 + 4) = 101;
      *(_DWORD *)v39 = 1685016073;
      *((_QWORD *)v38 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v89[0], "\tNode", 5uLL);
    }
    llvm::write_hex(v38, v37, 3, 0, 0);
    v40 = (_QWORD *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v40 > 7uLL)
    {
      *v40 = 0x3D65706168735B20;
      v41 = *((_QWORD *)v38 + 4) + 8;
      *((_QWORD *)v38 + 4) = v41;
    }
    else
    {
      llvm::raw_ostream::write(v38, " [shape=", 8uLL);
      v41 = *((_QWORD *)v38 + 4);
    }
    v42 = v90;
    v43 = *((_QWORD *)v38 + 3) - v41;
    if (v90)
    {
      if (v43 <= 4)
      {
        v44 = v38;
        v45 = "none,";
        v46 = 5;
        goto LABEL_86;
      }
      *(_BYTE *)(v41 + 4) = 44;
      *(_DWORD *)v41 = 1701736302;
      v80 = *((_QWORD *)v38 + 4) + 5;
    }
    else
    {
      if (v43 <= 6)
      {
        v44 = v38;
        v45 = "record,";
        v46 = 7;
LABEL_86:
        llvm::raw_ostream::write(v44, v45, v46);
        goto LABEL_87;
      }
      *(_DWORD *)(v41 + 3) = 744780399;
      *(_DWORD *)v41 = 1868785010;
      v80 = *((_QWORD *)v38 + 4) + 7;
    }
    *((_QWORD *)v38 + 4) = v80;
LABEL_87:
    if (v128 >= 0)
      v47 = v128 & 0x7F;
    else
      v47 = (size_t)v127[1];
    if (v47)
    {
      if (v128 >= 0)
        v48 = (const char *)v127;
      else
        v48 = (const char *)v127[0];
      llvm::raw_ostream::write(v38, v48, v47);
      v49 = (_BYTE *)*((_QWORD *)v38 + 4);
      if (*((_BYTE **)v38 + 3) == v49)
      {
        llvm::raw_ostream::write(v38, ",", 1uLL);
      }
      else
      {
        *v49 = 44;
        ++*((_QWORD *)v38 + 4);
      }
    }
    v50 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v50) > 5)
    {
      *(_WORD *)(v50 + 4) = 15724;
      *(_DWORD *)v50 = 1700946284;
      *((_QWORD *)v38 + 4) += 6;
      if (!v42)
      {
LABEL_98:
        v51 = (_WORD *)*((_QWORD *)v38 + 4);
        if (*((_QWORD *)v38 + 3) - (_QWORD)v51 > 1uLL)
        {
          *v51 = 31522;
          *((_QWORD *)v38 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v38, "\"{", 2uLL);
        }
        sub_1C6190858((uint64_t)v125, v91, *(llvm::Value **)v37);
        llvm::DOT::EscapeString((char *)v125, &v118);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &v118;
        else
          v52 = (std::string *)v118.__r_.__value_.__r.__words[0];
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = *((_BYTE *)&v118.__r_.__value_.__s + 23) & 0x7F;
        else
          v53 = v118.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v38, (const char *)v52, v53);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        if (SHIBYTE(v126) < 0)
        {
          v54 = v125[0];
LABEL_138:
          operator delete(v54);
          goto LABEL_139;
        }
        goto LABEL_139;
      }
    }
    else
    {
      llvm::raw_ostream::write(v38, "label=", 6uLL);
      if (!v42)
        goto LABEL_98;
    }
    v55 = *(unsigned int *)(v37 + 32);
    if ((_DWORD)v55)
    {
      v57 = 0;
      v58 = 8 * v55 - 8;
      do
      {
        LODWORD(v55) = v57 + 1;
        v56 = v58 != 0;
        if (!v58)
          break;
        v58 -= 8;
        v36 = v57++ == 63;
      }
      while (!v36);
    }
    else
    {
      v56 = 0;
    }
    if (v55 <= 1)
      v59 = 1;
    else
      v59 = v55;
    v60 = (void *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v60 > 0x30uLL)
    {
      qmemcpy(v60, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v61 = (void *)(*((_QWORD *)v38 + 4) + 49);
      *((_QWORD *)v38 + 4) = v61;
    }
    else
    {
      llvm::raw_ostream::write(v38, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v61 = (void *)*((_QWORD *)v38 + 4);
    }
    if (*((_QWORD *)v38 + 3) - (_QWORD)v61 > 0x2EuLL)
    {
      qmemcpy(v61, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v38 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v38, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1C5E21910(v38, (v59 + v56), 0, 0, 0);
    v62 = (_WORD *)*((_QWORD *)v38 + 4);
    if (*((_QWORD *)v38 + 3) - (_QWORD)v62 > 1uLL)
    {
      *v62 = 15906;
      *((_QWORD *)v38 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v38, "\">", 2uLL);
    }
    sub_1C6190858((uint64_t)&v118, v91, *(llvm::Value **)v37);
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v118;
    else
      v63 = (std::string *)v118.__r_.__value_.__r.__words[0];
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = *((_BYTE *)&v118.__r_.__value_.__s + 23) & 0x7F;
    else
      v64 = v118.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v38, (const char *)v63, v64);
    v65 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v65) > 4)
    {
      *(_BYTE *)(v65 + 4) = 62;
      *(_DWORD *)v65 = 1685335868;
      *((_QWORD *)v38 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v38, "</td>", 5uLL);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    {
      v54 = (void *)v118.__r_.__value_.__r.__words[0];
      goto LABEL_138;
    }
LABEL_139:
    v125[0] = 0;
    v125[1] = 0;
    v126 = 0;
    LODWORD(v118.__r_.__value_.__r.__words[1]) = 0;
    v121 = 0;
    v122 = 0;
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
    v124 = v125;
    v123 = 0;
    v119 = 0;
    v120 = 0;
    v118.__r_.__value_.__r.__words[2] = 0;
    if (v42)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v118, "</tr><tr>", 9uLL);
      v66 = (void *)*((_QWORD *)v38 + 4);
      if (*((_QWORD *)v38 + 3) - (_QWORD)v66 <= 0xDuLL)
      {
        v67 = v38;
        v68 = "</tr></table>>";
        v69 = 14;
LABEL_144:
        llvm::raw_ostream::write(v67, v68, v69);
        goto LABEL_145;
      }
      qmemcpy(v66, "</tr></table>>", 14);
      v79 = *((_QWORD *)v38 + 4) + 14;
    }
    else
    {
      v70 = (_WORD *)*((_QWORD *)v38 + 4);
      if (*((_QWORD *)v38 + 3) - (_QWORD)v70 <= 1uLL)
      {
        v67 = v38;
        v68 = "}\"";
        v69 = 2;
        goto LABEL_144;
      }
      *v70 = 8829;
      v79 = *((_QWORD *)v38 + 4) + 2;
    }
    *((_QWORD *)v38 + 4) = v79;
LABEL_145:
    v71 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v71) > 2)
    {
      *(_BYTE *)(v71 + 2) = 10;
      *(_WORD *)v71 = 15197;
      *((_QWORD *)v38 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v38, "];\n", 3uLL);
    }
    v72 = *(_QWORD *)(v37 + 24);
    v73 = *(unsigned int *)(v37 + 32);
    if ((_DWORD)v73)
    {
      v74 = 0;
      do
      {
        sub_1C4E1FD30(v89, v37, *(_QWORD *)(v72 + v74));
        v75 = v74 + 8;
        if ((_DWORD)v74 == 504)
          break;
        v36 = 8 * v73 - 8 == v74;
        v74 += 8;
      }
      while (!v36);
      v76 = (unint64_t *)(v72 + v75);
    }
    else
    {
      v76 = *(unint64_t **)(v37 + 24);
    }
    v77 = (unint64_t *)(v72 + 8 * v73);
    while (v76 != v77)
    {
      v78 = *v76++;
      sub_1C4E1FD30(v89, v37, v78);
    }
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    if (v123 == 1 && v118.__r_.__value_.__r.__words[2])
      MEMORY[0x1CAA32F9C](v118.__r_.__value_.__r.__words[2], 0x1000C8077774924);
    if (SHIBYTE(v126) < 0)
      operator delete(v125[0]);
    if (v128 < 0)
      operator delete(v127[0]);
    sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&__p);
  }
LABEL_177:
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v93 != v92)
    free(v93);
  if (v104)
  {
    v105 = (char *)v104;
    operator delete(v104);
  }
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    free((void *)__p.__r_.__value_.__l.__size_);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v112 != v111)
    free(v112);
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
  if (v107[1] != v107[0])
    free(v107[1]);
  v81 = v89[0];
  v82 = (_WORD *)*((_QWORD *)v89[0] + 4);
  if (*((_QWORD *)v89[0] + 3) - (_QWORD)v82 > 1uLL)
  {
    *v82 = 2685;
    *((_QWORD *)v81 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v89[0], "}\n", 2uLL);
  }
  if (v88 < 0)
    operator delete(v86);
  return a1;
}

void sub_1C4E224FC(void **this)
{
  *this = off_1E8136AD0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E22538(void **this)
{
  *this = off_1E8136AD0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E22588(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E225A0(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  char v8;
  int v9;
  size_t v10;
  size_t v11;
  std::string *p_p;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _DWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ****v52;
  uint64_t ***v53;
  int v54;
  int v55;
  unint64_t *v56;
  size_t v57;
  const void *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  int64_t v68;
  llvm::raw_ostream *v69;
  void *v70;
  llvm::raw_ostream *v71;
  _BYTE *v72;
  std::string __p;
  __int16 v74;
  void *v75;
  std::string::size_type v76;
  int64_t v77;
  std::string v78;
  std::string v79;
  int v80[4];
  __int128 __dst;
  int64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::PostDominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  if (!(*(unsigned int (**)(uint64_t, uint64_t ***, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, v6))
    return 0;
  v85 = v6 + 32;
  v8 = *(_BYTE *)(a1 + 55);
  v9 = v8;
  v10 = v8 & 0x7F;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_QWORD *)(a1 + 40);
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    v15 = *(char **)(a1 + 32);
    v14 = (char *)(a1 + 32);
    v13 = v15;
    if (v14[23] >= 0)
      v16 = v14;
    else
      v16 = v13;
    memmove(p_p, v16, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 46;
  v17 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v27 = 0;
    HIBYTE(v82) = 0;
    p_dst = &__dst;
    goto LABEL_31;
  }
  v18 = ***a2;
  v19 = *(_QWORD *)(v18 + 152);
  v20 = *(unsigned int *)(v18 + 168);
  if ((_DWORD)v20)
  {
    LODWORD(v21) = (v20 - 1) & (v17 ^ (a2 >> 9));
    v22 = (uint64_t ****)(v19 + 16 * v21);
    v23 = *v22;
    if (*v22 == a2)
      goto LABEL_23;
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == a2)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_23;
      }
    }
  }
  v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_23:
  v26 = (unint64_t *)v22[1];
  v29 = *v26;
  v28 = v26 + 2;
  v27 = v29;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_103;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v27;
    v82 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v82) = v27;
  p_dst = &__dst;
  if (v27)
LABEL_30:
    memmove(p_dst, v28, v27);
LABEL_31:
  *((_BYTE *)p_dst + v27) = 0;
  if (v82 >= 0)
    v33 = (const std::string::value_type *)&__dst;
  else
    v33 = (const std::string::value_type *)__dst;
  if (v82 >= 0)
    v34 = HIBYTE(v82) & 0x7F;
  else
    v34 = *((_QWORD *)&__dst + 1);
  v35 = std::string::append(&__p, v33, v34);
  v36 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v79, ".dot");
  v38 = v37->__r_.__value_.__r.__words[2];
  v83 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v84 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v80[0] = 0;
  v39 = (llvm *)std::system_category();
  v40 = (llvm::raw_ostream *)llvm::errs(v39);
  v41 = *((_QWORD *)v40 + 4);
  if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 8)
  {
    *(_BYTE *)(v41 + 8) = 39;
    *(_QWORD *)v41 = *(_QWORD *)"Writing '";
    *((_QWORD *)v40 + 4) += 9;
  }
  else
  {
    v40 = llvm::raw_ostream::write(v40, "Writing '", 9uLL);
  }
  if (v84 >= 0)
    v42 = (const char *)&v83;
  else
    v42 = (const char *)v83;
  if (v84 >= 0)
    v43 = HIBYTE(v84) & 0x7F;
  else
    v43 = *((_QWORD *)&v83 + 1);
  v44 = llvm::raw_ostream::write(v40, v42, v43);
  v45 = (_DWORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 3uLL)
  {
    *v45 = 774778407;
    *((_QWORD *)v44 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v44, "'...", 4uLL);
  }
  if (v84 >= 0)
    v46 = &v83;
  else
    v46 = (__int128 *)v83;
  if (v84 >= 0)
    v47 = HIBYTE(v84) & 0x7F;
  else
    v47 = *((_QWORD *)&v83 + 1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v79, v46, v47, (uint64_t)v80, 3);
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v78.__r_.__value_.__r.__words[1] = xmmword_1C640C680;
  strcpy(v78.__r_.__value_.__l.__data_, "Post dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v57 = 0;
    HIBYTE(v77) = 0;
    v60 = &v75;
    goto LABEL_75;
  }
  v48 = ***a2;
  v49 = *(_QWORD *)(v48 + 152);
  v50 = *(unsigned int *)(v48 + 168);
  if ((_DWORD)v50)
  {
    LODWORD(v51) = (v50 - 1) & (v17 ^ (a2 >> 9));
    v52 = (uint64_t ****)(v49 + 16 * v51);
    v53 = *v52;
    if (*v52 == a2)
      goto LABEL_67;
    v54 = 1;
    while (v53 != (uint64_t ***)-4096)
    {
      v55 = v51 + v54++;
      v51 = v55 & (v50 - 1);
      v53 = *(uint64_t ****)(v49 + 16 * v51);
      if (v53 == a2)
      {
        v52 = (uint64_t ****)(v49 + 16 * v51);
        goto LABEL_67;
      }
    }
  }
  v52 = (uint64_t ****)(v49 + 16 * v50);
LABEL_67:
  v56 = (unint64_t *)v52[1];
  v59 = *v56;
  v58 = v56 + 2;
  v57 = v59;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
LABEL_103:
    abort();
  if (v57 >= 0x17)
  {
    v61 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v61 = v57 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v76 = v57;
    v77 = v62 | 0x8000000000000000;
    v75 = v60;
  }
  else
  {
    HIBYTE(v77) = v57;
    v60 = &v75;
    if (!v57)
      goto LABEL_75;
  }
  memmove(v60, v58, v57);
LABEL_75:
  *((_BYTE *)v60 + v57) = 0;
  if (v77 >= 0)
    v63 = (const std::string::value_type *)&v75;
  else
    v63 = (const std::string::value_type *)v75;
  if (v77 >= 0)
    v64 = HIBYTE(v77) & 0x7F;
  else
    v64 = v76;
  v65 = std::string::append(&v78, v63, v64);
  v66 = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&__p, "' function");
  v68 = v67->__r_.__value_.__r.__words[2];
  __dst = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v82 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (v80[0])
  {
    v69 = (llvm::raw_ostream *)llvm::errs((llvm *)v67);
    v70 = (void *)*((_QWORD *)v69 + 4);
    if (*((_QWORD *)v69 + 3) - (_QWORD)v70 > 0x20uLL)
    {
      qmemcpy(v70, "  error opening file for writing!", 33);
      *((_QWORD *)v69 + 4) += 33;
    }
    else
    {
      v69 = llvm::raw_ostream::write(v69, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v74 = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v69 = sub_1C4E217FC((llvm::raw_ostream *)&v79, (llvm::raw_ostream *)&v85, 1, (llvm::Twine *)&__p);
  }
  v71 = (llvm::raw_ostream *)llvm::errs(v69);
  v72 = (_BYTE *)*((_QWORD *)v71 + 4);
  if (*((_BYTE **)v71 + 3) == v72)
  {
    llvm::raw_ostream::write(v71, "\n", 1uLL);
  }
  else
  {
    *v72 = 10;
    ++*((_QWORD *)v71 + 4);
  }
  if (SHIBYTE(v82) < 0)
    operator delete((void *)__dst);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v79);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)v83);
  return 0;
}

uint64_t sub_1C4E22BD8()
{
  return 1;
}

void sub_1C4E22BE0(void **this)
{
  *this = off_1E8136AD0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E22C1C(void **this)
{
  *this = off_1E8136AD0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E22C6C(void **this)
{
  *this = off_1E8136C20;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E22CA8(void **this)
{
  *this = off_1E8136C20;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E22CF8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E22D10(_QWORD **a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v4 = (void **)*a1[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::PostDominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  if (!((unsigned int (*)(_QWORD **, uint64_t ***, uint64_t))(*a1)[18])(a1, a2, v6))
    return 0;
  v38 = v6 + 32;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = xmmword_1C640C680;
  strcpy(v29.__r_.__value_.__l.__data_, "Post dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    HIBYTE(v35) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_20;
  }
  v7 = ***a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_11;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
LABEL_11:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_12:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v16;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v16;
    p_dst = (void **)&__dst;
    if (!v16)
      goto LABEL_20;
  }
  memmove(p_dst, v17, v16);
LABEL_20:
  *((_BYTE *)p_dst + v16) = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35) & 0x7F;
  else
    v23 = v34;
  v24 = std::string::append(&v29, v22, v23);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v31, "' function");
  v27 = v26->__r_.__value_.__r.__words[2];
  v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v32 = 260;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
  v30 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  sub_1C4E23064((llvm::raw_ostream *)&v38, (llvm::Twine *)&v31, 0, (llvm::Twine *)&v29);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  return 0;
}

uint64_t sub_1C4E22FD0()
{
  return 1;
}

void sub_1C4E22FD8(void **this)
{
  *this = off_1E8136C20;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E23014(void **this)
{
  *this = off_1E8136C20;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E23064(llvm::raw_ostream *a1, llvm::Twine *a2, char a3, llvm::Twine *a4)
{
  llvm *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  char v17;
  size_t v18;
  __int128 *v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  void *v24[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v28 = 0;
  llvm::Twine::str(a2, v24);
  v23 = 260;
  v22[0] = v24;
  llvm::createGraphFilename((llvm::Twine *)v22, &v28, &v26);
  *(_OWORD *)__p = v26;
  v21 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  v7 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, v28, 1, 0, 0);
  if (v28 == -1)
  {
    v11 = (llvm::raw_ostream *)llvm::errs(v7);
    v12 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 0x13)
    {
      *(_DWORD *)(v12 + 16) = 656434540;
      *(_OWORD *)v12 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v11 + 4) += 20;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "error opening file '", 0x14uLL);
    }
    if (v21 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v21 >= 0)
      v14 = HIBYTE(v21) & 0x7F;
    else
      v14 = (size_t)__p[1];
    v15 = llvm::raw_ostream::write(v11, (const char *)v13, v14);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xEuLL)
    {
      qmemcpy(v16, "' for writing!\n", 15);
      *((_QWORD *)v15 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v15, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
  }
  else
  {
    v8 = sub_1C4E217FC((llvm::raw_ostream *)v22, a1, a3, a4);
    v9 = (llvm::raw_ostream *)llvm::errs(v8);
    v10 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0xA202E656E6F6420;
      *((_QWORD *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, " done. \n", 8uLL);
    }
    v26 = *(_OWORD *)__p;
    v27 = v21;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v22);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v17 = HIBYTE(v27);
  if (v27 >= 0)
    v18 = HIBYTE(v27) & 0x7F;
  else
    v18 = *((_QWORD *)&v26 + 1);
  if (v18)
  {
    if (v27 >= 0)
      v19 = &v26;
    else
      v19 = (__int128 *)v26;
    llvm::DisplayGraph(v19, v18, 0, 0);
    v17 = HIBYTE(v27);
  }
  if (v17 < 0)
    operator delete((void *)v26);
}

void sub_1C4E232B0(void **this)
{
  *this = off_1E8136D70;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E232EC(void **this)
{
  *this = off_1E8136D70;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E2333C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E23354(_QWORD **a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  size_t v16;
  const void *v17;
  unint64_t v18;
  void **p_dst;
  uint64_t v20;
  uint64_t v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string v29;
  __int16 v30;
  std::string v31;
  __int16 v32;
  void **__dst;
  std::string::size_type v34;
  int64_t v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v4 = (void **)*a1[1];
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::PostDominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  if (!((unsigned int (*)(_QWORD **, uint64_t ***, uint64_t))(*a1)[18])(a1, a2, v6))
    return 0;
  v38 = v6 + 32;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = xmmword_1C640C680;
  strcpy(v29.__r_.__value_.__l.__data_, "Post dominator tree for '");
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    HIBYTE(v35) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_20;
  }
  v7 = ***a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_11;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t ****)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_12;
      }
    }
LABEL_11:
    v11 = (uint64_t ****)(v8 + 16 * v9);
  }
LABEL_12:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v34 = v16;
    v35 = v21 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v16;
    p_dst = (void **)&__dst;
    if (!v16)
      goto LABEL_20;
  }
  memmove(p_dst, v17, v16);
LABEL_20:
  *((_BYTE *)p_dst + v16) = 0;
  if (v35 >= 0)
    v22 = (const std::string::value_type *)&__dst;
  else
    v22 = (const std::string::value_type *)__dst;
  if (v35 >= 0)
    v23 = HIBYTE(v35) & 0x7F;
  else
    v23 = v34;
  v24 = std::string::append(&v29, v22, v23);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v31, "' function");
  v27 = v26->__r_.__value_.__r.__words[2];
  v36 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v37 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v32 = 260;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)(a1 + 4);
  v30 = 260;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  sub_1C4E23064((llvm::raw_ostream *)&v38, (llvm::Twine *)&v31, 1, (llvm::Twine *)&v29);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  return 0;
}

uint64_t sub_1C4E23614()
{
  return 1;
}

void sub_1C4E2361C(void **this)
{
  *this = off_1E8136D70;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C4E23658(void **this)
{
  *this = off_1E8136D70;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

BOOL llvm::DomTreeUpdater::isUpdateValid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;

  v3 = a3;
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 == a2 + 40)
    goto LABEL_26;
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  v7 = v6 - 29;
  if (v6 == 30)
  {
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
      v8 = 2;
    else
      v8 = 1;
    goto LABEL_9;
  }
  v8 = 2;
  v11 = 0;
  v9 = 0;
  switch(v7)
  {
    case 0:
    case 5:
    case 6:
      goto LABEL_14;
    case 1:
      __break(1u);
      goto LABEL_28;
    case 2:
      v8 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
      break;
    case 3:
    case 9:
LABEL_28:
      v8 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
      break;
    case 4:
      goto LABEL_9;
    case 7:
      v8 = *(_WORD *)(v5 + 18) & 1;
      break;
    case 8:
      v8 = 1;
      goto LABEL_9;
    case 10:
      v8 = *(_DWORD *)(v5 + 80) + 1;
      break;
    default:
      goto LABEL_26;
  }
  if (!v8)
  {
LABEL_26:
    v11 = 0;
    v9 = 0;
    goto LABEL_14;
  }
LABEL_9:
  v9 = 0;
  v10 = a3 & 0xFFFFFFFFFFFFFFF8;
  while (llvm::Instruction::getSuccessor((llvm::Instruction *)v5, v9) != v10)
  {
    if (v8 == ++v9)
    {
      v11 = v8;
      v9 = v8;
      goto LABEL_14;
    }
  }
  v11 = v8;
LABEL_14:
  if ((v3 & 4) == 0 && v9 == v11)
    return 0;
  return ((v3 >> 2) & 1) == 0 || v9 == v11;
}

BOOL llvm::DomTreeUpdater::isSelfDominance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 == (a3 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t llvm::DomTreeUpdater::applyDomTreeUpdates(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[296];
  uint64_t v6;
  void *v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 304) == 1)
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 288);
    if (v2)
    {
      v3 = *(unsigned int *)(this + 8);
      v4 = *(_QWORD *)(this + 272);
      if (v3 != v4)
      {
        sub_1C4E25D14((uint64_t)v5, (unint64_t *)(*(_QWORD *)this + 16 * v4), v3 - v4, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v2, (uint64_t)v5, 0);
        if (v7 != v8)
          free(v7);
        sub_1C4E28CA4((uint64_t)&v6);
        this = sub_1C4E28CA4((uint64_t)v5);
        *(_QWORD *)(v1 + 272) = *(unsigned int *)(v1 + 8);
      }
    }
  }
  return this;
}

BOOL llvm::DomTreeUpdater::hasPendingDomTreeUpdates(llvm::DomTreeUpdater *this)
{
  return *((_QWORD *)this + 36) && *((_QWORD *)this + 34) != *((unsigned int *)this + 2);
}

uint64_t llvm::DomTreeUpdater::flush(llvm::DomTreeUpdater *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[296];
  uint64_t v10;
  void *v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 304) == 1)
  {
    v3 = *((_QWORD *)this + 36);
    if (!v3)
      goto LABEL_5;
    v4 = *((unsigned int *)this + 2);
    v5 = *((_QWORD *)this + 34);
    if (v4 == v5)
      goto LABEL_5;
    sub_1C4E25D14((uint64_t)v9, (unint64_t *)(*(_QWORD *)this + 16 * v5), v4 - v5, 1u);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v3, (uint64_t)v9, 0);
    if (v11 != v12)
      free(v11);
    sub_1C4E28CA4((uint64_t)&v10);
    sub_1C4E28CA4((uint64_t)v9);
    *((_QWORD *)this + 34) = *((unsigned int *)this + 2);
    if (*((_BYTE *)this + 304) == 1)
    {
LABEL_5:
      v6 = *((_QWORD *)this + 37);
      if (v6)
      {
        v7 = *((unsigned int *)this + 2);
        v8 = *((_QWORD *)this + 35);
        if (v7 != v8)
        {
          sub_1C4E28D78((uint64_t)v9, (unint64_t *)(*(_QWORD *)this + 16 * v8), v7 - v8, 1u);
          llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v6, (uint64_t)v9, 0);
          sub_1C4E295AC((uint64_t)v9);
          *((_QWORD *)this + 35) = *((unsigned int *)this + 2);
        }
      }
    }
  }
  return llvm::DomTreeUpdater::dropOutOfDateUpdates((uint64_t)this);
}

uint64_t llvm::DomTreeUpdater::applyPostDomTreeUpdates(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[86];

  v5[85] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 304) == 1)
  {
    v1 = *(_QWORD *)(this + 296);
    if (v1)
    {
      v2 = *(unsigned int *)(this + 8);
      v3 = *(_QWORD *)(this + 280);
      if (v2 != v3)
      {
        v4 = this;
        sub_1C4E28D78((uint64_t)v5, (unint64_t *)(*(_QWORD *)this + 16 * v3), v2 - v3, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v1, (uint64_t)v5, 0);
        this = sub_1C4E295AC((uint64_t)v5);
        *(_QWORD *)(v4 + 280) = *(unsigned int *)(v4 + 8);
      }
    }
  }
  return this;
}

uint64_t llvm::DomTreeUpdater::dropOutOfDateUpdates(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  const void *v8;
  uint64_t v9;
  _BYTE *v10;

  if (*(_BYTE *)(this + 304))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 288);
    if (!v2 || *(_QWORD *)(this + 272) == *(_DWORD *)(this + 8))
    {
      if (!*(_QWORD *)(this + 296) || *(_QWORD *)(this + 280) == *(_DWORD *)(this + 8))
      {
        this = llvm::DomTreeUpdater::forceFlushDeletedBB((llvm::DomTreeUpdater *)this);
        v2 = *(_QWORD *)(v1 + 288);
      }
      if (!v2)
        *(_QWORD *)(v1 + 272) = *(unsigned int *)(v1 + 8);
    }
    if (*(_QWORD *)(v1 + 296))
    {
      v3 = *(_QWORD *)(v1 + 280);
      v4 = *(unsigned int *)(v1 + 8);
    }
    else
    {
      v4 = *(unsigned int *)(v1 + 8);
      *(_QWORD *)(v1 + 280) = v4;
      v3 = v4;
    }
    v5 = *(_QWORD *)(v1 + 272);
    if (v3 >= v5)
      v6 = *(_QWORD *)(v1 + 272);
    else
      v6 = v3;
    v7 = *(_BYTE **)v1;
    v8 = (const void *)(*(_QWORD *)v1 + 16 * v6);
    v9 = *(_QWORD *)v1 + 16 * v4 - (_QWORD)v8;
    if (v6 == v4)
    {
      v10 = *(_BYTE **)v1;
    }
    else
    {
      this = (uint64_t)memmove(*(void **)v1, v8, *(_QWORD *)v1 + 16 * v4 - (_QWORD)v8);
      v10 = *(_BYTE **)v1;
      v5 = *(_QWORD *)(v1 + 272);
      v3 = *(_QWORD *)(v1 + 280);
    }
    *(_DWORD *)(v1 + 8) = (unint64_t)(&v7[v9] - v10) >> 4;
    *(_QWORD *)(v1 + 272) = v5 - v6;
    *(_QWORD *)(v1 + 280) = v3 - v6;
  }
  return this;
}

BOOL llvm::DomTreeUpdater::hasPendingPostDomTreeUpdates(llvm::DomTreeUpdater *this)
{
  return *((_QWORD *)this + 37) && *((_QWORD *)this + 35) != *((unsigned int *)this + 2);
}

BOOL llvm::DomTreeUpdater::tryFlushDeletedBB(_BOOL8 this)
{
  if ((!*(_QWORD *)(this + 288) || *(_QWORD *)(this + 272) == *(_DWORD *)(this + 8))
    && (!*(_QWORD *)(this + 296) || *(_QWORD *)(this + 280) == *(_DWORD *)(this + 8)))
  {
    return llvm::DomTreeUpdater::forceFlushDeletedBB((llvm::DomTreeUpdater *)this);
  }
  return this;
}

BOOL llvm::DomTreeUpdater::hasPendingUpdates(llvm::DomTreeUpdater *this)
{
  if (*((_QWORD *)this + 36) && *((_QWORD *)this + 34) != *((_DWORD *)this + 2))
    return 1;
  if (*((_QWORD *)this + 37))
    return *((_QWORD *)this + 35) != *((unsigned int *)this + 2);
  return 0;
}

BOOL llvm::DomTreeUpdater::forceFlushDeletedBB(llvm::DomTreeUpdater *this)
{
  int v1;
  int v2;
  llvm::BasicBlock **v4;
  llvm::BasicBlock **v5;
  uint64_t v6;
  uint64_t v7;
  llvm::BasicBlock **v8;
  uint64_t v9;
  llvm::BasicBlock **v10;
  llvm::BasicBlock *v11;
  llvm::LLVMContext *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *i;
  _QWORD *v17;
  uint64_t v19;
  unsigned int v21;
  int v22;
  unsigned int v23;
  void *v24;

  v1 = *((_DWORD *)this + 83);
  v2 = *((_DWORD *)this + 84);
  if (v1 != v2)
  {
    v4 = (llvm::BasicBlock **)*((_QWORD *)this + 40);
    v5 = (llvm::BasicBlock **)*((_QWORD *)this + 39);
    v6 = 328;
    if (v4 == v5)
      v6 = 332;
    v7 = *(unsigned int *)((char *)this + v6);
    v8 = v4;
    if ((_DWORD)v7)
    {
      v9 = 0;
      while ((unint64_t)v4[v9] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v7 == ++v9)
          goto LABEL_19;
      }
      v8 = &v4[v9];
    }
    v10 = &v4[v7];
    if (v8 != v10)
    {
      v11 = *v8;
LABEL_12:
      llvm::BasicBlock::removeFromParent(v11);
      llvm::DomTreeUpdater::eraseDelBBNode(this, v11);
      if (v11)
      {
        llvm::BasicBlock::~BasicBlock(v11, v12);
        MEMORY[0x1CAA32FC0]();
      }
      v13 = (unint64_t *)(v8 + 1);
      while (v13 != (unint64_t *)v10)
      {
        v14 = *v13++;
        v11 = (llvm::BasicBlock *)v14;
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v8 = (llvm::BasicBlock **)(v13 - 1);
          goto LABEL_12;
        }
      }
      v5 = (llvm::BasicBlock **)*((_QWORD *)this + 39);
      v4 = (llvm::BasicBlock **)*((_QWORD *)this + 40);
    }
LABEL_19:
    v15 = (_QWORD *)((char *)this + 332);
    if (v4 != v5)
    {
      v19 = *((unsigned int *)this + 82);
      if (v19 >= 0x21 && 4 * (*((_DWORD *)this + 83) - *((_DWORD *)this + 84)) < v19)
      {
        free(v4);
        v21 = *((_DWORD *)this + 83) - *((_DWORD *)this + 84);
        v22 = 1 << (33 - __clz(v21 - 1));
        if (v21 <= 0x10)
          v23 = 32;
        else
          v23 = v22;
        *((_DWORD *)this + 82) = v23;
        *v15 = 0;
        v24 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
        if (!v24)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        *((_QWORD *)this + 40) = v24;
        memset(v24, 255, 8 * *((unsigned int *)this + 82));
        goto LABEL_21;
      }
      memset(v4, 255, 8 * v19);
    }
    *v15 = 0;
LABEL_21:
    v17 = (_QWORD *)*((_QWORD *)this + 51);
    for (i = (_QWORD *)*((_QWORD *)this + 52); i != v17; i = sub_1C6190B68(i - 9))
      ;
    *((_QWORD *)this + 52) = v17;
  }
  return v1 != v2;
}

int32x2_t *llvm::DomTreeUpdater::eraseDelBBNode(llvm::DomTreeUpdater *this, llvm::BasicBlock *a2)
{
  int32x2_t *v4;
  int32x2_t *result;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  int v11;
  int v12;
  int32x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::BasicBlock *v17;
  int v18;
  int v19;

  v4 = (int32x2_t *)*((_QWORD *)this + 36);
  if (!v4 || *((_BYTE *)this + 432))
    goto LABEL_3;
  v6 = v4[3];
  v7 = v4[5].u32[0];
  if (!(_DWORD)v7)
    goto LABEL_18;
  LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = *(_QWORD *)&v6 + 16 * v8;
  v10 = *(llvm::BasicBlock **)v9;
  if (*(llvm::BasicBlock **)v9 != a2)
  {
    v11 = 1;
    while (v10 != (llvm::BasicBlock *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(llvm::BasicBlock **)(*(_QWORD *)&v6 + 16 * v8);
      if (v10 == a2)
      {
        v9 = *(_QWORD *)&v6 + 16 * v8;
        goto LABEL_19;
      }
    }
LABEL_18:
    v9 = *(_QWORD *)&v6 + 16 * v7;
  }
LABEL_19:
  if (v9 != *(_QWORD *)&v6 + 16 * v7 && *(_QWORD *)(v9 + 8))
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode(v4, (uint64_t)a2);
LABEL_3:
  result = (int32x2_t *)*((_QWORD *)this + 37);
  if (!result || *((_BYTE *)this + 433))
    return result;
  v13 = result[6];
  v14 = result[8].u32[0];
  if ((_DWORD)v14)
  {
    LODWORD(v15) = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v16 = *(_QWORD *)&v13 + 16 * v15;
    v17 = *(llvm::BasicBlock **)v16;
    if (*(llvm::BasicBlock **)v16 == a2)
      goto LABEL_23;
    v18 = 1;
    while (v17 != (llvm::BasicBlock *)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(llvm::BasicBlock **)(*(_QWORD *)&v13 + 16 * v15);
      if (v17 == a2)
      {
        v16 = *(_QWORD *)&v13 + 16 * v15;
        goto LABEL_23;
      }
    }
  }
  v16 = *(_QWORD *)&v13 + 16 * v14;
LABEL_23:
  if (v16 != *(_QWORD *)&v13 + 16 * v14)
  {
    if (*(_QWORD *)(v16 + 8))
      return (int32x2_t *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::eraseNode(result, (uint64_t)a2);
  }
  return result;
}

int32x2_t *llvm::DomTreeUpdater::deleteBB(llvm::DomTreeUpdater *this, llvm::BasicBlock *a2)
{
  int32x2_t *result;
  llvm::LLVMContext *v5;

  llvm::DomTreeUpdater::validateDeleteBB(this, a2);
  if (*((_BYTE *)this + 304) == 1)
    return (int32x2_t *)sub_1C4774094((llvm::DomTreeUpdater *)((char *)this + 312), (uint64_t)a2);
  llvm::BasicBlock::removeFromParent(a2);
  result = llvm::DomTreeUpdater::eraseDelBBNode(this, a2);
  if (a2)
  {
    llvm::BasicBlock::~BasicBlock(a2, v5);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

char *llvm::DomTreeUpdater::validateDeleteBB(llvm::DomTreeUpdater *this, llvm::BasicBlock *a2)
{
  _QWORD *i;
  _QWORD *v4;
  llvm::ValueAsMetadata *v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t **v8;
  char *v9;
  uint64_t v10;
  char *result;
  llvm::UndefValue *v12;

  v4 = (_QWORD *)((char *)a2 + 40);
  for (i = (_QWORD *)*((_QWORD *)a2 + 5); i != v4; i = (_QWORD *)*v4)
  {
    if (i)
      v5 = (llvm::ValueAsMetadata *)(i - 3);
    else
      v5 = 0;
    if (*((_QWORD *)v5 + 1))
    {
      v12 = llvm::UndefValue::get(*(llvm::UndefValue **)v5, a2);
      llvm::Value::doRAUW(v5, v12, (llvm::Value *)1);
      i = (_QWORD *)*v4;
    }
    if (i)
      v6 = (uint64_t ***)(i - 3);
    else
      v6 = 0;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v4, v6);
    v7 = v6[3];
    v8 = v6[4];
    *v8 = (uint64_t *)v7;
    v7[1] = (uint64_t *)v8;
    v6[3] = 0;
    v6[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v6);
  }
  v9 = (char *)operator new(0x40uLL);
  *(_QWORD *)v9 = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 35;
  *(_OWORD *)(v9 + 44) = 0u;
  *(_OWORD *)(v9 + 33) = 0u;
  *(_OWORD *)(v9 + 17) = 0u;
  *((_WORD *)a2 + 9) &= ~0x8000u;
  v10 = *((_QWORD *)a2 + 5);
  *((_QWORD *)v9 + 4) = v4;
  *((_QWORD *)v9 + 5) = a2;
  *((_QWORD *)v9 + 3) = v10;
  result = v9 + 24;
  *(_QWORD *)(v10 + 8) = result;
  *((_QWORD *)a2 + 5) = result;
  return result;
}

_QWORD *llvm::DomTreeUpdater::callbackDeleteBB(uint64_t a1, llvm::BasicBlock *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *result;
  llvm::LLVMContext *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  llvm::BasicBlock *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  llvm::BasicBlock *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  char *v34;
  void (**v35)(void);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t (**v52)(llvm::CallbackVH *__hidden);
  _QWORD v53[2];
  llvm::BasicBlock *v54;
  llvm::BasicBlock *v55;
  _QWORD v56[3];
  _QWORD *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  llvm::DomTreeUpdater::validateDeleteBB((llvm::DomTreeUpdater *)a1, a2);
  if (*(_BYTE *)(a1 + 304) == 1)
  {
    v9 = (_QWORD *)a3[3];
    if (v9)
    {
      if (v9 == a3)
      {
        v51 = v50;
        (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v50);
      }
      else
      {
        v51 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
      }
    }
    else
    {
      v51 = 0;
    }
    v53[0] = 2;
    v53[1] = 0;
    v54 = a2;
    if (a2 != (llvm::BasicBlock *)-8192 && a2 != (llvm::BasicBlock *)-4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v53);
    v52 = &off_1E8136E18;
    v55 = a2;
    if (v51)
    {
      if (v51 == v50)
      {
        v57 = v56;
        (*(void (**)(_QWORD *, _QWORD *))(v50[0] + 24))(v50, v56);
      }
      else
      {
        v57 = (_QWORD *)(*(uint64_t (**)(void))(*v51 + 16))();
      }
    }
    else
    {
      v57 = 0;
    }
    v11 = *(_QWORD **)(a1 + 416);
    v10 = *(_QWORD *)(a1 + 424);
    if ((unint64_t)v11 < v10)
    {
      v12 = v53[0] & 6;
      v11[1] = v12;
      v13 = v11 + 1;
      v11[2] = 0;
      v14 = (unint64_t)(v11 + 2);
      v15 = v54;
      v11[3] = v54;
      if (v15 != (llvm::BasicBlock *)-8192 && v15 != (llvm::BasicBlock *)-4096)
      {
        if (v15)
        {
          v16 = v53[0] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v14 = *(_QWORD *)(v53[0] & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)v16 = v13;
          *v13 = v16 | v12;
          if (*(_QWORD *)v14)
            **(_QWORD **)v14 = **(_QWORD **)v14 & 7 | v14;
        }
      }
      *v11 = &off_1E8136E18;
      v11[4] = v55;
      if (v57)
      {
        if (v57 == v56)
        {
          v11[8] = v11 + 5;
          (*(void (**)(_QWORD *))(*v57 + 24))(v57);
        }
        else
        {
          v11[8] = v57;
          v57 = 0;
        }
      }
      else
      {
        v11[8] = 0;
      }
      v31 = v11 + 9;
      goto LABEL_56;
    }
    v17 = *(_QWORD *)(a1 + 408);
    v18 = 0x8E38E38E38E38E39 * (((uint64_t)v11 - v17) >> 3);
    if (v18 + 1 > 0x38E38E38E38E38ELL)
      goto LABEL_81;
    v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v17) >> 3);
    v20 = 2 * v19;
    if (2 * v19 <= v18 + 1)
      v20 = v18 + 1;
    if (v19 >= 0x1C71C71C71C71C7)
      v21 = 0x38E38E38E38E38ELL;
    else
      v21 = v20;
    if (v21)
    {
      if (v21 > 0x38E38E38E38E38ELL)
        sub_1C4764EE4();
      v22 = operator new(72 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[9 * v18];
    v24 = v53[0];
    v25 = v54;
    v23[1] = v53[0] & 6;
    v26 = v23 + 1;
    v23[2] = 0;
    v27 = (unint64_t)(v23 + 2);
    v23[3] = v25;
    if (v25 != (llvm::BasicBlock *)-8192 && v25 != (llvm::BasicBlock *)-4096)
    {
      if (v25)
      {
        *(_QWORD *)v27 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) = v26;
        *v26 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (*(_QWORD *)v27)
          **(_QWORD **)v27 = **(_QWORD **)v27 & 7 | v27;
      }
    }
    *v23 = &off_1E8136E18;
    v28 = (char *)&v22[9 * v18];
    v29 = v57;
    *((_QWORD *)v28 + 4) = v55;
    if (v29)
    {
      v30 = &v22[9 * v18 + 8];
      if (v29 == v56)
      {
        *v30 = v28 + 40;
        (*(void (**)(_QWORD *))(v56[0] + 24))(v56);
      }
      else
      {
        *v30 = v29;
        v57 = 0;
      }
    }
    else
    {
      v22[9 * v18 + 8] = 0;
    }
    v32 = (char *)&v22[9 * v21];
    v31 = v23 + 9;
    v34 = *(char **)(a1 + 408);
    v33 = *(char **)(a1 + 416);
    if (v33 == v34)
    {
      *(_QWORD *)(a1 + 408) = v23;
      *(_QWORD *)(a1 + 416) = v31;
      *(_QWORD *)(a1 + 424) = v32;
LABEL_54:
      if (v33)
        operator delete(v33);
LABEL_56:
      *(_QWORD *)(a1 + 416) = v31;
      sub_1C6190B68(&v52);
      if (v51 == v50)
      {
        v35 = (void (**)(void))(v50[0] + 32);
      }
      else
      {
        if (!v51)
          return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 312), (uint64_t)a2);
        v35 = (void (**)(void))(*v51 + 40);
      }
      (*v35)();
      return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 312), (uint64_t)a2);
    }
    v49 = v32;
    v36 = 0;
    v37 = (uint64_t)&v22[9 * v18 - 7];
    while (1)
    {
      v38 = &v23[v36];
      v39 = &v33[v36 * 8];
      v40 = *(_QWORD *)&v33[v36 * 8 - 64] & 6;
      v23[v36 - 8] = v40;
      v41 = &v23[v36 - 8];
      *(v38 - 7) = 0;
      v42 = *(_QWORD *)&v33[v36 * 8 - 48];
      *(v38 - 6) = v42;
      if (v42 != -8192 && v42 != -4096 && v42 != 0)
      {
        v44 = *((_QWORD *)v39 - 8) & 0xFFFFFFFFFFFFFFF8;
        *(v38 - 7) = *(_QWORD *)v44;
        *(_QWORD *)v44 = v41;
        *v41 = v44 | v40;
        v45 = (uint64_t *)*(v38 - 7);
        if (v45)
          *v45 = *v45 & 7 | (v37 + v36 * 8);
      }
      *(v38 - 9) = &off_1E8136E18;
      *(v38 - 5) = *((_QWORD *)v39 - 5);
      v46 = (char *)*((_QWORD *)v39 - 1);
      if (v46)
      {
        v47 = &v23[v36];
        if (&v33[v36 * 8 - 32] == v46)
        {
          *(v47 - 1) = v38 - 4;
          (*(void (**)(_QWORD))(**((_QWORD **)v39 - 1) + 24))(*((_QWORD *)v39 - 1));
          goto LABEL_76;
        }
        *(v47 - 1) = v46;
      }
      else
      {
        v39 = (char *)&v23[v36];
      }
      *((_QWORD *)v39 - 1) = 0;
LABEL_76:
      v36 -= 9;
      if (&v33[v36 * 8] == v34)
      {
        v33 = *(char **)(a1 + 408);
        v48 = *(char **)(a1 + 416);
        *(_QWORD *)(a1 + 408) = &v23[v36];
        *(_QWORD *)(a1 + 416) = v31;
        *(_QWORD *)(a1 + 424) = v49;
        while (v48 != v33)
          v48 = (char *)sub_1C6190B68((_QWORD *)v48 - 9);
        goto LABEL_54;
      }
    }
  }
  llvm::BasicBlock::removeFromParent(a2);
  llvm::DomTreeUpdater::eraseDelBBNode((llvm::DomTreeUpdater *)a1, a2);
  v52 = (uint64_t (**)(llvm::CallbackVH *__hidden))a2;
  v6 = a3[3];
  if (!v6)
  {
    sub_1C485C2F0();
LABEL_81:
    abort();
  }
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t (***)(llvm::CallbackVH *__hidden)))(*(_QWORD *)v6 + 48))(v6, &v52);
  if (a2)
  {
    llvm::BasicBlock::~BasicBlock(a2, v8);
    return (_QWORD *)MEMORY[0x1CAA32FC0]();
  }
  return result;
}

uint64_t llvm::DomTreeUpdater::applyUpdates(uint64_t result, unint64_t *a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _BYTE v15[296];
  _BYTE v16[304];
  void *v17;
  _QWORD v18[9];

  v4 = a2;
  v5 = result;
  v18[8] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(result + 288);
  if (v6)
  {
    if (*(_BYTE *)(result + 304) != 1)
    {
      sub_1C4E25D14((uint64_t)v15, a2, a3, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v6, (uint64_t)v15, 0);
      if (v17 != v18)
        free(v17);
      sub_1C4E28CA4((uint64_t)v16);
      result = sub_1C4E28CA4((uint64_t)v15);
      v7 = *(_QWORD *)(v5 + 296);
      if (!v7)
        return result;
LABEL_19:
      sub_1C4E28D78((uint64_t)v15, v4, a3, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v7, (uint64_t)v15, 0);
      if (v17 != v18)
        free(v17);
      sub_1C4E295E8((uint64_t)v16);
      return sub_1C4E295E8((uint64_t)v15);
    }
  }
  else
  {
    v7 = *(_QWORD *)(result + 296);
    if (!v7)
      return result;
    if (*(_BYTE *)(result + 304) != 1)
      goto LABEL_19;
  }
  v8 = *(unsigned int *)(result + 8);
  v9 = a3 + v8;
  if (a3 + v8 > (unint64_t)*(unsigned int *)(result + 12))
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v9, 16);
  if (a3)
  {
    v10 = &v4[2 * a3];
    do
    {
      v11 = *v4;
      v12 = v4[1];
      if (*v4 != (v12 & 0xFFFFFFFFFFFFFFF8))
      {
        v13 = *(unsigned int *)(v5 + 8);
        if (v13 >= *(unsigned int *)(v5 + 12))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v13 + 1, 16);
          v13 = *(unsigned int *)(v5 + 8);
        }
        v14 = (unint64_t *)(*(_QWORD *)v5 + 16 * v13);
        *v14 = v11;
        v14[1] = v12;
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 2;
    }
    while (v4 != v10);
  }
  return result;
}

void llvm::DomTreeUpdater::applyUpdatesPermissive(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  unint64_t *v21;
  __int128 v22;
  unint64_t v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  void *v30;
  uint64_t v31;
  _BYTE v32[128];
  _QWORD **v33;
  _QWORD *v34;
  uint64_t v35;
  _OWORD v36[18];
  _BYTE v37[304];
  void *v38;
  _QWORD v39[9];

  v3 = a2;
  v4 = (uint64_t)a1;
  v39[8] = *MEMORY[0x1E0C80C00];
  if (!a1[36] && !a1[37])
    return;
  v30 = v32;
  v31 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v33 = &v34;
  v27 = v29;
  v28 = 0x800000000;
  if (a3)
  {
    v7 = &a2[2 * a3];
    while (1)
    {
      v8 = *v3;
      v9 = v3[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v36[0] = v8;
      *((_QWORD *)&v36[0] + 1) = v9;
      if (v8 != v9)
        break;
LABEL_61:
      v3 += 2;
      if (v3 == v7)
        goto LABEL_5;
    }
    if (v35)
    {
      v10 = v34;
      if (v34)
      {
        while (1)
        {
          v11 = v10[4];
          if (v11 <= v8)
          {
            if (v11 < v8)
              goto LABEL_26;
            v12 = v10[5];
            if (v12 <= v9)
              break;
          }
LABEL_27:
          v10 = (_QWORD *)*v10;
          if (!v10)
            goto LABEL_28;
        }
        if (v12 >= v9)
          goto LABEL_61;
LABEL_26:
        ++v10;
        goto LABEL_27;
      }
      goto LABEL_57;
    }
    v14 = (char *)v30;
    v13 = v31;
    if (!(_DWORD)v31)
      goto LABEL_45;
    v18 = 16 * v31;
    v19 = (char *)v30 + 8;
    while (*(v19 - 1) != v8 || *v19 != v9)
    {
      v19 += 2;
      v18 -= 16;
      if (!v18)
        goto LABEL_28;
    }
    if (v18)
      goto LABEL_61;
LABEL_28:
    if (v35)
      goto LABEL_57;
    v13 = v31;
    v14 = (char *)v30;
    if ((_DWORD)v31)
    {
      v15 = 0;
      v16 = v31;
      while (*(_QWORD *)((char *)v30 + v15) != v8 || *(_QWORD *)((char *)v30 + v15 + 8) != v9)
      {
        v15 += 16;
        if (16 * v31 == v15)
          goto LABEL_47;
      }
      if (v15 != 16 * v31)
        goto LABEL_51;
LABEL_47:
      if (v31 >= 8)
      {
        do
        {
          sub_1C6190BD8((uint64_t)&v33, (unint64_t *)v30 + 2 * v13 - 2, (_OWORD *)v30 + v13 - 1);
          v13 = v31 - 1;
          LODWORD(v31) = v31 - 1;
        }
        while ((_DWORD)v31);
LABEL_57:
        a1 = sub_1C6190BD8((uint64_t)&v33, (unint64_t *)v36, v36);
LABEL_51:
        LODWORD(a1) = llvm::DomTreeUpdater::isUpdateValid((uint64_t)a1, *v3, v3[1]);
        if ((_DWORD)a1)
        {
          v22 = *(_OWORD *)v3;
          if (*(_BYTE *)(v4 + 304) == 1)
          {
            v23 = *(unsigned int *)(v4 + 8);
            if (v23 >= *(unsigned int *)(v4 + 12))
            {
              v25 = *(_OWORD *)v3;
              a1 = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v23 + 1, 16);
              v22 = v25;
              v23 = *(unsigned int *)(v4 + 8);
            }
            v24 = (void **)v4;
          }
          else
          {
            v23 = v28;
            v24 = &v27;
            if (v28 >= (unint64_t)HIDWORD(v28))
            {
              v26 = *(_OWORD *)v3;
              a1 = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
              v22 = v26;
              v23 = v28;
            }
          }
          *((_OWORD *)*v24 + v23) = v22;
          ++*((_DWORD *)v24 + 2);
        }
        goto LABEL_61;
      }
    }
    else
    {
LABEL_45:
      v16 = 0;
    }
    if (v13 >= HIDWORD(v31))
    {
      a1 = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v16 + 1, 16);
      v14 = (char *)v30;
      v16 = v31;
    }
    v21 = (unint64_t *)&v14[16 * v16];
    *v21 = v8;
    v21[1] = v9;
    LODWORD(v31) = v31 + 1;
    goto LABEL_51;
  }
LABEL_5:
  if (*(_BYTE *)(v4 + 304) != 1)
  {
    v5 = *(_QWORD *)(v4 + 288);
    if (v5)
    {
      sub_1C4E25D14((uint64_t)v36, (unint64_t *)v27, v28, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v5, (uint64_t)v36, 0);
      if (v38 != v39)
        free(v38);
      sub_1C4E28CA4((uint64_t)v37);
      sub_1C4E28CA4((uint64_t)v36);
    }
    v6 = *(_QWORD *)(v4 + 296);
    if (v6)
    {
      sub_1C4E28D78((uint64_t)v36, (unint64_t *)v27, v28, 1u);
      llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v6, (uint64_t)v36, 0);
      if (v38 != v39)
        free(v38);
      sub_1C4E295E8((uint64_t)v37);
      sub_1C4E295E8((uint64_t)v36);
    }
  }
  if (v27 != v29)
    free(v27);
  sub_1C61247C0((uint64_t)&v33, v34);
  if (v30 != v32)
    free(v30);
}

uint64_t llvm::DomTreeUpdater::getDomTree(llvm::DomTreeUpdater *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[296];
  uint64_t v7;
  void *v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 304) == 1)
  {
    v3 = *((_QWORD *)this + 36);
    if (v3)
    {
      v4 = *((unsigned int *)this + 2);
      v5 = *((_QWORD *)this + 34);
      if (v4 != v5)
      {
        sub_1C4E25D14((uint64_t)v6, (unint64_t *)(*(_QWORD *)this + 16 * v5), v4 - v5, 1u);
        llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v3, (uint64_t)v6, 0);
        if (v8 != v9)
          free(v8);
        sub_1C4E28CA4((uint64_t)&v7);
        sub_1C4E28CA4((uint64_t)v6);
        *((_QWORD *)this + 34) = *((unsigned int *)this + 2);
      }
    }
  }
  llvm::DomTreeUpdater::dropOutOfDateUpdates((uint64_t)this);
  return *((_QWORD *)this + 36);
}

uint64_t llvm::DomTreeUpdater::getPostDomTree(llvm::DomTreeUpdater *this)
{
  llvm::DomTreeUpdater::applyPostDomTreeUpdates((uint64_t)this);
  llvm::DomTreeUpdater::dropOutOfDateUpdates((uint64_t)this);
  return *((_QWORD *)this + 37);
}

llvm *llvm::DomTreeUpdater::dump(unint64_t **this)
{
  llvm *result;
  llvm *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t *v14;
  void *v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  unint64_t v27;
  llvm::raw_ostream *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  const char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  size_t *v43;
  const void *v44;
  size_t v45;
  size_t v46;
  _BYTE *v47;
  llvm::raw_ostream *v48;
  _WORD *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  _WORD *v55;
  llvm::raw_ostream *v56;
  unint64_t v57;
  llvm::raw_ostream *v58;
  int v59;
  uint64_t v60;
  uint64_t ***v61;
  uint64_t v62;
  llvm::raw_ostream *v63;
  const char *v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t ****v70;
  uint64_t ***v71;
  int v72;
  int v73;
  size_t *v74;
  const void *v75;
  size_t v76;
  size_t v77;
  _BYTE *v78;
  llvm::raw_ostream *v79;
  _WORD *v80;
  uint64_t v81;
  llvm::raw_ostream *v82[2];
  int v83;

  result = llvm::dbgs((llvm *)this);
  v3 = result;
  v4 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 32;
    *(_OWORD *)v4 = *(_OWORD *)"Available Trees: ";
    *((_QWORD *)result + 4) += 17;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "Available Trees: ", 0x11uLL);
  }
  if (this[36])
  {
    v5 = (_QWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v5 > 7uLL)
    {
      *v5 = 0x20656572546D6F44;
      v6 = *((_QWORD *)v3 + 4) + 8;
      *((_QWORD *)v3 + 4) = v6;
    }
    else
    {
      result = llvm::raw_ostream::write(v3, "DomTree ", 8uLL);
      v6 = *((_QWORD *)v3 + 4);
    }
    goto LABEL_7;
  }
  v6 = *((_QWORD *)v3 + 4);
  if (this[37])
  {
LABEL_7:
    if (this[37])
    {
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v6) > 0xB)
      {
        *(_DWORD *)(v6 + 8) = 543516018;
        *(_QWORD *)v6 = *(_QWORD *)"PostDomTree ";
        v6 = *((_QWORD *)v3 + 4) + 12;
        *((_QWORD *)v3 + 4) = v6;
      }
      else
      {
        result = llvm::raw_ostream::write(v3, "PostDomTree ", 0xCuLL);
        v6 = *((_QWORD *)v3 + 4);
      }
    }
    if (*((_QWORD *)v3 + 3) == v6)
    {
      v7 = "\n";
      v8 = v3;
      v9 = 1;
LABEL_12:
      result = llvm::raw_ostream::write(v8, v7, v9);
      goto LABEL_13;
    }
    *(_BYTE *)v6 = 10;
    v81 = *((_QWORD *)v3 + 4) + 1;
    goto LABEL_122;
  }
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v6) <= 4)
  {
    v7 = "None\n";
    v8 = v3;
    v9 = 5;
    goto LABEL_12;
  }
  *(_BYTE *)(v6 + 4) = 10;
  *(_DWORD *)v6 = 1701736270;
  v81 = *((_QWORD *)v3 + 4) + 5;
LABEL_122:
  *((_QWORD *)v3 + 4) = v81;
LABEL_13:
  v10 = (_OWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v10 > 0xFuLL)
  {
    *v10 = *(_OWORD *)"UpdateStrategy: ";
    v11 = *((_QWORD *)v3 + 4) + 16;
    *((_QWORD *)v3 + 4) = v11;
  }
  else
  {
    result = llvm::raw_ostream::write(v3, "UpdateStrategy: ", 0x10uLL);
    v11 = *((_QWORD *)v3 + 4);
  }
  v12 = *((_QWORD *)v3 + 3) - v11;
  if (!*((_BYTE *)this + 304))
  {
    if (v12 <= 5)
      return llvm::raw_ostream::write(v3, "Eager\n", 6uLL);
    *(_WORD *)(v11 + 4) = 2674;
    *(_DWORD *)v11 = 1701273925;
    *((_QWORD *)v3 + 4) += 6;
    return result;
  }
  if (v12 > 4)
  {
    *(_BYTE *)(v11 + 4) = 10;
    *(_DWORD *)v11 = 2038063436;
    v13 = (_DWORD *)(*((_QWORD *)v3 + 4) + 5);
    *((_QWORD *)v3 + 4) = v13;
  }
  else
  {
    result = llvm::raw_ostream::write(v3, "Lazy\n", 5uLL);
    v13 = (_DWORD *)*((_QWORD *)v3 + 4);
  }
  v83 = 0;
  v82[0] = v3;
  v82[1] = (llvm::raw_ostream *)&v83;
  if (this[36])
  {
    v14 = &(*this)[2 * (_QWORD)this[34]];
    if (*((_QWORD *)v3 + 3) - (_QWORD)v13 > 0x27uLL)
    {
      qmemcpy(v13, "Applied but not cleared DomTreeUpdates:\n", 40);
      *((_QWORD *)v3 + 4) += 40;
    }
    else
    {
      llvm::raw_ostream::write(v3, "Applied but not cleared DomTreeUpdates:\n", 0x28uLL);
    }
    sub_1C4E2577C(v82, *this, v14);
    v15 = (void *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v15 > 0x17uLL)
    {
      qmemcpy(v15, "Pending DomTreeUpdates:\n", 24);
      *((_QWORD *)v3 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v3, "Pending DomTreeUpdates:\n", 0x18uLL);
    }
    result = sub_1C4E2577C(v82, v14, &(*this)[2 * *((unsigned int *)this + 2)]);
    v13 = (_DWORD *)*((_QWORD *)v3 + 4);
  }
  if (this[37])
  {
    v16 = &(*this)[2 * (_QWORD)this[35]];
    if (*((_QWORD *)v3 + 3) - (_QWORD)v13 > 0x2BuLL)
    {
      qmemcpy(v13, "Applied but not cleared PostDomTreeUpdates:\n", 44);
      *((_QWORD *)v3 + 4) += 44;
    }
    else
    {
      llvm::raw_ostream::write(v3, "Applied but not cleared PostDomTreeUpdates:\n", 0x2CuLL);
    }
    sub_1C4E2577C(v82, *this, v16);
    v17 = (void *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v17 > 0x1BuLL)
    {
      qmemcpy(v17, "Pending PostDomTreeUpdates:\n", 28);
      *((_QWORD *)v3 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(v3, "Pending PostDomTreeUpdates:\n", 0x1CuLL);
    }
    result = sub_1C4E2577C(v82, v16, &(*this)[2 * *((unsigned int *)this + 2)]);
    v13 = (_DWORD *)*((_QWORD *)v3 + 4);
  }
  if (*((_QWORD *)v3 + 3) - (_QWORD)v13 > 0x13uLL)
  {
    v13[4] = 171602754;
    *(_OWORD *)v13 = *(_OWORD *)"Pending DeletedBBs:\n";
    *((_QWORD *)v3 + 4) += 20;
  }
  else
  {
    result = llvm::raw_ostream::write(v3, "Pending DeletedBBs:\n", 0x14uLL);
  }
  v83 = 0;
  v18 = this[40];
  v19 = 328;
  if (v18 == this[39])
    v19 = 332;
  v20 = *(unsigned int *)((char *)this + v19);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = this[40];
    while (*v22 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_80;
    }
  }
  else
  {
    v22 = this[40];
  }
  v23 = &v18[v20];
  if (v22 != v23)
  {
    v24 = *v22;
LABEL_44:
    v25 = (_WORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v25 > 1uLL)
    {
      *v25 = 8224;
      *((_QWORD *)v3 + 4) += 2;
      v26 = v3;
    }
    else
    {
      v26 = llvm::raw_ostream::write(v3, "  ", 2uLL);
    }
    v27 = v83;
    if (v83 < 0)
    {
      v27 = -(uint64_t)v83;
      v28 = v26;
      v29 = 1;
    }
    else
    {
      v28 = v26;
      v29 = 0;
    }
    sub_1C5E21910(v28, v27, 0, 0, v29);
    v30 = *((_QWORD *)v26 + 4);
    if ((unint64_t)(*((_QWORD *)v26 + 3) - v30) > 2)
    {
      *(_BYTE *)(v30 + 2) = 32;
      *(_WORD *)v30 = 14880;
      *((_QWORD *)v26 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v26, " : ", 3uLL);
    }
    ++v83;
    if ((*(_BYTE *)(v24 + 23) & 0x10) == 0)
    {
      v31 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v31) <= 9)
      {
        v32 = v3;
        v33 = "(no_name)(";
        v34 = 10;
LABEL_67:
        llvm::raw_ostream::write(v32, v33, v34);
        goto LABEL_68;
      }
      *(_WORD *)(v31 + 8) = 10281;
      *(_QWORD *)v31 = *(_QWORD *)"(no_name)(";
      *((_QWORD *)v3 + 4) += 10;
      goto LABEL_68;
    }
    v35 = ***(_QWORD ***)v24;
    v36 = *(_QWORD *)(v35 + 152);
    v37 = *(unsigned int *)(v35 + 168);
    if ((_DWORD)v37)
    {
      LODWORD(v38) = (v37 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      v39 = (uint64_t *)(v36 + 16 * v38);
      v40 = *v39;
      if (*v39 == v24)
      {
LABEL_60:
        v43 = (size_t *)v39[1];
        v46 = *v43;
        v44 = v43 + 2;
        v45 = v46;
        v47 = (_BYTE *)*((_QWORD *)v3 + 4);
        if (v46 <= *((_QWORD *)v3 + 3) - (_QWORD)v47)
        {
          if (v45)
          {
            memcpy(v47, v44, v45);
            v47 = (_BYTE *)(*((_QWORD *)v3 + 4) + v45);
            *((_QWORD *)v3 + 4) = v47;
          }
          v48 = v3;
        }
        else
        {
          v48 = llvm::raw_ostream::write(v3, (const char *)v44, v45);
          v47 = (_BYTE *)*((_QWORD *)v48 + 4);
        }
        if (*((_BYTE **)v48 + 3) == v47)
        {
          v32 = v48;
          v33 = "(";
          v34 = 1;
          goto LABEL_67;
        }
        *v47 = 40;
        ++*((_QWORD *)v48 + 4);
LABEL_68:
        result = llvm::write_hex(v3, v24, 3, 0, 0);
        v49 = (_WORD *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v49 > 1uLL)
        {
          *v49 = 2601;
          *((_QWORD *)v3 + 4) += 2;
        }
        else
        {
          result = llvm::raw_ostream::write(v3, ")\n", 2uLL);
        }
        v50 = v22 + 1;
        while (v50 != v23)
        {
          v51 = *v50++;
          v24 = v51;
          if (v51 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v22 = v50 - 1;
            goto LABEL_44;
          }
        }
        goto LABEL_80;
      }
      v41 = 1;
      while (v40 != -4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v37 - 1);
        v40 = *(_QWORD *)(v36 + 16 * v38);
        if (v40 == v24)
        {
          v39 = (uint64_t *)(v36 + 16 * v38);
          goto LABEL_60;
        }
      }
    }
    v39 = (uint64_t *)(v36 + 16 * v37);
    goto LABEL_60;
  }
LABEL_80:
  v52 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v52) > 0x12)
  {
    *(_DWORD *)(v52 + 15) = 171602795;
    *(_OWORD *)v52 = *(_OWORD *)"Pending Callbacks:\n";
    *((_QWORD *)v3 + 4) += 19;
  }
  else
  {
    result = llvm::raw_ostream::write(v3, "Pending Callbacks:\n", 0x13uLL);
  }
  v83 = 0;
  v53 = this[51];
  v54 = this[52];
  if (v53 != v54)
  {
    while (1)
    {
      v55 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v55 > 1uLL)
      {
        *v55 = 8224;
        *((_QWORD *)v3 + 4) += 2;
        v56 = v3;
      }
      else
      {
        v56 = llvm::raw_ostream::write(v3, "  ", 2uLL);
      }
      v57 = v83;
      if (v83 < 0)
      {
        v57 = -(uint64_t)v83;
        v58 = v56;
        v59 = 1;
      }
      else
      {
        v58 = v56;
        v59 = 0;
      }
      sub_1C5E21910(v58, v57, 0, 0, v59);
      v60 = *((_QWORD *)v56 + 4);
      if ((unint64_t)(*((_QWORD *)v56 + 3) - v60) > 2)
      {
        *(_BYTE *)(v60 + 2) = 32;
        *(_WORD *)v60 = 14880;
        *((_QWORD *)v56 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v56, " : ", 3uLL);
      }
      ++v83;
      v61 = (uint64_t ***)v53[3];
      if ((*((_BYTE *)v61 + 23) & 0x10) != 0)
        break;
      v62 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v62) > 9)
      {
        *(_WORD *)(v62 + 8) = 10281;
        *(_QWORD *)v62 = *(_QWORD *)"(no_name)(";
        *((_QWORD *)v3 + 4) += 10;
        goto LABEL_107;
      }
      v63 = v3;
      v64 = "(no_name)(";
      v65 = 10;
LABEL_106:
      llvm::raw_ostream::write(v63, v64, v65);
LABEL_107:
      result = llvm::write_hex(v3, v53[3], 3, 0, 0);
      v80 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v80 > 1uLL)
      {
        *v80 = 2601;
        *((_QWORD *)v3 + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(v3, ")\n", 2uLL);
      }
      v53 += 9;
      if (v53 == v54)
        return result;
    }
    v66 = ***v61;
    v67 = *(_QWORD *)(v66 + 152);
    v68 = *(unsigned int *)(v66 + 168);
    if ((_DWORD)v68)
    {
      LODWORD(v69) = (v68 - 1) & ((v61 >> 4) ^ (v61 >> 9));
      v70 = (uint64_t ****)(v67 + 16 * v69);
      v71 = *v70;
      if (*v70 == v61)
      {
LABEL_99:
        v74 = (size_t *)v70[1];
        v77 = *v74;
        v75 = v74 + 2;
        v76 = v77;
        v78 = (_BYTE *)*((_QWORD *)v3 + 4);
        if (v77 <= *((_QWORD *)v3 + 3) - (_QWORD)v78)
        {
          if (v76)
          {
            memcpy(v78, v75, v76);
            v78 = (_BYTE *)(*((_QWORD *)v3 + 4) + v76);
            *((_QWORD *)v3 + 4) = v78;
          }
          v79 = v3;
        }
        else
        {
          v79 = llvm::raw_ostream::write(v3, (const char *)v75, v76);
          v78 = (_BYTE *)*((_QWORD *)v79 + 4);
        }
        if (*((_BYTE **)v79 + 3) != v78)
        {
          *v78 = 40;
          ++*((_QWORD *)v79 + 4);
          goto LABEL_107;
        }
        v63 = v79;
        v64 = "(";
        v65 = 1;
        goto LABEL_106;
      }
      v72 = 1;
      while (v71 != (uint64_t ***)-4096)
      {
        v73 = v69 + v72++;
        v69 = v73 & (v68 - 1);
        v71 = *(uint64_t ****)(v67 + 16 * v69);
        if (v71 == v61)
        {
          v70 = (uint64_t ****)(v67 + 16 * v69);
          goto LABEL_99;
        }
      }
    }
    v70 = (uint64_t ****)(v67 + 16 * v68);
    goto LABEL_99;
  }
  return result;
}

llvm::raw_ostream *sub_1C4E2577C(llvm::raw_ostream **a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  unint64_t v10;
  llvm::raw_ostream *v11;
  int v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  uint64_t *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  size_t **v26;
  const char *v27;
  size_t v28;
  llvm::raw_ostream *v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  const char *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  int v46;
  size_t **v47;
  llvm::raw_ostream *result;
  uint64_t v49;
  const char *v50;
  size_t v51;
  const char *v52;
  size_t v53;
  llvm::raw_ostream *v54;
  void *v55;
  _BYTE *v56;
  _WORD *v57;
  _DWORD *v58;

  if (a2 != a3)
  {
    v5 = a2;
    *(_DWORD *)a1[1] = 0;
    while (1)
    {
      v6 = *v5;
      v7 = v5[1];
      v8 = *a1;
      v9 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8224;
        *((_QWORD *)v8 + 4) += 2;
      }
      else
      {
        v8 = llvm::raw_ostream::write(*a1, "  ", 2uLL);
      }
      v10 = *(int *)a1[1];
      if ((v10 & 0x80000000) != 0)
      {
        v10 = -(uint64_t)v10;
        v11 = v8;
        v12 = 1;
      }
      else
      {
        v11 = v8;
        v12 = 0;
      }
      sub_1C5E21910(v11, v10, 0, 0, v12);
      v13 = *((_QWORD *)v8 + 4);
      if ((unint64_t)(*((_QWORD *)v8 + 3) - v13) > 2)
      {
        *(_BYTE *)(v13 + 2) = 32;
        *(_WORD *)v13 = 14880;
        *((_QWORD *)v8 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v8, " : ", 3uLL);
      }
      v14 = *a1;
      ++*(_DWORD *)a1[1];
      v15 = (uint64_t *)*((_QWORD *)v14 + 4);
      v16 = *((_QWORD *)v14 + 3) - (_QWORD)v15;
      if ((v7 & 4) != 0)
      {
        if (v16 <= 7)
        {
          v17 = "Delete, ";
LABEL_14:
          llvm::raw_ostream::write(v14, v17, 8uLL);
          if (v6)
            goto LABEL_15;
          goto LABEL_41;
        }
        v36 = 0x6574656C6544;
      }
      else
      {
        if (v16 <= 7)
        {
          v17 = "Insert, ";
          goto LABEL_14;
        }
        v36 = 0x747265736E49;
      }
      *v15 = v36 & 0xFFFFFFFFFFFFLL | 0x202C000000000000;
      *((_QWORD *)v14 + 4) += 8;
      if (v6)
      {
LABEL_15:
        if ((*(_BYTE *)(v6 + 23) & 0x10) != 0)
        {
          v18 = ***(_QWORD ***)v6;
          v19 = *(_QWORD *)(v18 + 152);
          v20 = *(unsigned int *)(v18 + 168);
          if (!(_DWORD)v20)
            goto LABEL_22;
          LODWORD(v21) = (v20 - 1) & ((v6 >> 4) ^ (v6 >> 9));
          v22 = (_QWORD *)(v19 + 16 * v21);
          v23 = *v22;
          if (*v22 == v6)
          {
            v26 = (size_t **)(v22 + 1);
          }
          else
          {
            v24 = 1;
            while (v23 != -4096)
            {
              v25 = v21 + v24++;
              v21 = v25 & (v20 - 1);
              v23 = *(_QWORD *)(v19 + 16 * v21);
              if (v23 == v6)
              {
                v20 = v21;
                break;
              }
            }
LABEL_22:
            v26 = (size_t **)(v19 + 16 * v20 + 8);
          }
          v27 = (const char *)(*v26 + 2);
          v28 = **v26;
          v29 = *a1;
          v30 = (void *)*((_QWORD *)*a1 + 4);
          if (v28 > *((_QWORD *)*a1 + 3) - (_QWORD)v30)
          {
LABEL_25:
            v29 = llvm::raw_ostream::write(v29, v27, v28);
LABEL_28:
            v31 = (_BYTE *)*((_QWORD *)v29 + 4);
            if (*((_BYTE **)v29 + 3) == v31)
            {
              v29 = llvm::raw_ostream::write(v29, "(", 1uLL);
            }
            else
            {
              *v31 = 40;
              ++*((_QWORD *)v29 + 4);
            }
            llvm::write_hex(v29, v6, 3, 0, 0);
            v32 = *((_QWORD *)v29 + 4);
            if ((unint64_t)(*((_QWORD *)v29 + 3) - v32) > 2)
            {
              *(_BYTE *)(v32 + 2) = 32;
              *(_WORD *)v32 = 11305;
              *((_QWORD *)v29 + 4) += 3;
              goto LABEL_44;
            }
            v33 = v29;
            v34 = "), ";
            v35 = 3;
            goto LABEL_43;
          }
          if (!v28)
            goto LABEL_28;
        }
        else
        {
          v29 = *a1;
          v30 = (void *)*((_QWORD *)*a1 + 4);
          v27 = "(no name)";
          v28 = 9;
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v30 <= 8uLL)
            goto LABEL_25;
        }
        memcpy(v30, v27, v28);
        *((_QWORD *)v29 + 4) += v28;
        goto LABEL_28;
      }
LABEL_41:
      v33 = *a1;
      v37 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v37) <= 9)
      {
        v34 = "(badref), ";
        v35 = 10;
LABEL_43:
        llvm::raw_ostream::write(v33, v34, v35);
        goto LABEL_44;
      }
      *(_WORD *)(v37 + 8) = 8236;
      *(_QWORD *)v37 = *(_QWORD *)"(badref), ";
      *((_QWORD *)v33 + 4) += 10;
LABEL_44:
      v38 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        result = *a1;
        v49 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v49) > 8)
        {
          *(_BYTE *)(v49 + 8) = 10;
          *(_QWORD *)v49 = *(_QWORD *)"(badref)\n";
          *((_QWORD *)result + 4) += 9;
          goto LABEL_65;
        }
        v50 = "(badref)\n";
        v51 = 9;
        goto LABEL_64;
      }
      if ((*(_BYTE *)(v38 + 23) & 0x10) == 0)
      {
        v54 = *a1;
        v55 = (void *)*((_QWORD *)*a1 + 4);
        v52 = "(no_name)";
        v53 = 9;
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v55 > 8uLL)
        {
LABEL_59:
          memcpy(v55, v52, v53);
          *((_QWORD *)v54 + 4) += v53;
          goto LABEL_60;
        }
LABEL_57:
        v54 = llvm::raw_ostream::write(v54, v52, v53);
        goto LABEL_60;
      }
      v39 = ***(_QWORD ***)v38;
      v40 = *(_QWORD *)(v39 + 152);
      v41 = *(unsigned int *)(v39 + 168);
      if (!(_DWORD)v41)
        goto LABEL_52;
      LODWORD(v42) = (v41 - 1) & ((v38 >> 4) ^ (v38 >> 9));
      v43 = (_QWORD *)(v40 + 16 * v42);
      v44 = *v43;
      if (*v43 != v38)
      {
        v45 = 1;
        while (v44 != -4096)
        {
          v46 = v42 + v45++;
          v42 = v46 & (v41 - 1);
          v44 = *(_QWORD *)(v40 + 16 * v42);
          if (v44 == v38)
          {
            v41 = v42;
            break;
          }
        }
LABEL_52:
        v47 = (size_t **)(v40 + 16 * v41 + 8);
        goto LABEL_56;
      }
      v47 = (size_t **)(v43 + 1);
LABEL_56:
      v52 = (const char *)(*v47 + 2);
      v53 = **v47;
      v54 = *a1;
      v55 = (void *)*((_QWORD *)*a1 + 4);
      if (v53 > *((_QWORD *)*a1 + 3) - (_QWORD)v55)
        goto LABEL_57;
      if (v53)
        goto LABEL_59;
LABEL_60:
      v56 = (_BYTE *)*((_QWORD *)v54 + 4);
      if (*((_BYTE **)v54 + 3) == v56)
      {
        v54 = llvm::raw_ostream::write(v54, "(", 1uLL);
      }
      else
      {
        *v56 = 40;
        ++*((_QWORD *)v54 + 4);
      }
      result = llvm::write_hex(v54, v7 & 0xFFFFFFFFFFFFFFF8, 3, 0, 0);
      v57 = (_WORD *)*((_QWORD *)v54 + 4);
      if (*((_QWORD *)v54 + 3) - (_QWORD)v57 > 1uLL)
      {
        *v57 = 2601;
        *((_QWORD *)v54 + 4) += 2;
        goto LABEL_65;
      }
      result = v54;
      v50 = ")\n";
      v51 = 2;
LABEL_64:
      result = llvm::raw_ostream::write(result, v50, v51);
LABEL_65:
      v5 += 2;
      if (v5 == a3)
        return result;
    }
  }
  result = *a1;
  v58 = (_DWORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v58 > 6uLL)
  {
    *(_DWORD *)((char *)v58 + 3) = 174419567;
    *v58 = 1867391008;
    *((_QWORD *)result + 4) += 7;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "  None\n", 7uLL);
  }
  *(_DWORD *)a1[1] = 0;
  return result;
}

uint64_t sub_1C4E25D14(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _BYTE *v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  *(_QWORD *)a1 = 1;
  v48 = a1 + 8;
  v6 = (_BYTE *)(a1 + 296);
  for (i = 8; i != 296; i += 72)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 296) = 1;
  v47 = a1 + 304;
  for (j = 304; j != 592; j += 72)
    *(_QWORD *)(a1 + j) = -4096;
  *(_QWORD *)(a1 + 600) = a1 + 616;
  *(_QWORD *)(a1 + 608) = 0x400000000;
  sub_1C4E26068(a2, a3, a1 + 600, 0, 0);
  v9 = *(unsigned int *)(a1 + 608);
  if ((_DWORD)v9)
  {
    v10 = *(unint64_t **)(a1 + 600);
    v11 = &v10[2 * v9];
    do
    {
      v13 = *v10;
      v12 = v10[1];
      v49 = *v10;
      if ((*(_BYTE *)a1 & 1) != 0)
      {
        v14 = 4;
        v15 = v48;
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 16);
        if (!v14)
        {
          v42 = 0;
          goto LABEL_42;
        }
        v15 = *(_QWORD *)(a1 + 8);
      }
      v16 = v14 - 1;
      v17 = v16 & ((v13 >> 4) ^ (v13 >> 9));
      v18 = (_QWORD *)(v15 + 72 * v17);
      v19 = *v18;
      if (v13 == *v18)
        goto LABEL_11;
      v34 = 0;
      v35 = 1;
      while (v19 != -4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v19 == -8192;
        if (v36)
          v34 = v18;
        v37 = v17 + v35++;
        v17 = v37 & v16;
        v18 = (_QWORD *)(v15 + 72 * v17);
        v19 = *v18;
        if (v13 == *v18)
          goto LABEL_11;
      }
      if (v34)
        v42 = v34;
      else
        v42 = v18;
LABEL_42:
      v18 = sub_1C4E28620(a1, (uint64_t)&v49, &v49, v42);
      v43 = v49;
      *(_OWORD *)(v18 + 7) = 0u;
      *(_OWORD *)(v18 + 3) = 0u;
      *(_OWORD *)(v18 + 5) = 0u;
      *v18 = v43;
      v18[1] = v18 + 3;
      v18[2] = 0x200000000;
      v18[5] = v18 + 7;
      *((_DWORD *)v18 + 13) = 2;
LABEL_11:
      v20 = ((v12 & 4) == 0) ^ a4;
      v21 = &v18[4 * v20];
      v22 = v21 + 1;
      v23 = *((unsigned int *)v21 + 4);
      if (v23 >= *((unsigned int *)v21 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 1), (uint64_t)(v21 + 3), v23 + 1, 8);
        v23 = *((unsigned int *)v22 + 2);
      }
      v24 = v12 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(*v22 + 8 * v23) = v12 & 0xFFFFFFFFFFFFFFF8;
      ++*((_DWORD *)v22 + 2);
      v49 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((*v6 & 1) != 0)
      {
        v25 = 4;
        v26 = v47;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 312);
        if (!v25)
        {
          v44 = 0;
LABEL_46:
          v29 = sub_1C4E28620((uint64_t)v6, (uint64_t)&v49, &v49, v44);
          v45 = v49;
          *(_OWORD *)(v29 + 7) = 0u;
          *(_OWORD *)(v29 + 3) = 0u;
          *(_OWORD *)(v29 + 5) = 0u;
          *v29 = v45;
          v29[1] = v29 + 3;
          v29[2] = 0x200000000;
          v29[5] = v29 + 7;
          *((_DWORD *)v29 + 13) = 2;
          goto LABEL_17;
        }
        v26 = *(_QWORD *)(a1 + 304);
      }
      v27 = v25 - 1;
      v28 = v27 & ((v24 >> 4) ^ (v24 >> 9));
      v29 = (_QWORD *)(v26 + 72 * v28);
      v30 = *v29;
      if (*v29 != v24)
      {
        v38 = 0;
        v39 = 1;
        while (v30 != -4096)
        {
          if (v38)
            v40 = 0;
          else
            v40 = v30 == -8192;
          if (v40)
            v38 = v29;
          v41 = v28 + v39++;
          v28 = v41 & v27;
          v29 = (_QWORD *)(v26 + 72 * v28);
          v30 = *v29;
          if (*v29 == v24)
            goto LABEL_17;
        }
        if (v38)
          v44 = v38;
        else
          v44 = v29;
        goto LABEL_46;
      }
LABEL_17:
      v31 = &v29[4 * v20];
      v32 = v31 + 1;
      v33 = *((unsigned int *)v31 + 4);
      if (v33 >= *((unsigned int *)v31 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v31 + 1), (uint64_t)(v31 + 3), v33 + 1, 8);
        v33 = *((unsigned int *)v32 + 2);
      }
      *(_QWORD *)(*v32 + 8 * v33) = v13;
      ++*((_DWORD *)v32 + 2);
      v10 += 2;
    }
    while (v10 != v11);
  }
  *(_BYTE *)(a1 + 592) = a4;
  return a1;
}

void sub_1C4E26068(unint64_t *a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64x2_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v47 = a5;
  v50 = 1;
  v9 = (uint64_t *)&v51;
  v10 = &v53;
  v11 = 8;
  v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)((char *)&v50 + v11) = v12;
    v11 += 24;
  }
  while (v11 != 104);
  sub_1C4E263A4((int *)&v50, a2);
  if (a2)
  {
    v13 = a1;
    do
    {
      v14 = *v13;
      v15 = v13[1];
      v13 += 2;
      if (a4)
        v16 = v14;
      else
        v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (a4)
        v14 = v15 & 0xFFFFFFFFFFFFFFF8;
      v48 = (uint64_t *)v14;
      v49 = (char *)v16;
      v17 = sub_1C4E2683C((uint64_t)&v50, (uint64_t *)&v48);
      v18 = *((_DWORD *)v17 + 4);
      if ((v15 & 4) != 0)
        v19 = v18 - 1;
      else
        v19 = v18 + 1;
      *((_DWORD *)v17 + 4) = v19;
    }
    while (v13 != &a1[2 * a2]);
  }
  *(_DWORD *)(a3 + 8) = 0;
  v20 = v50;
  v21 = (unint64_t)v50 >> 1;
  if (*(_DWORD *)(a3 + 12) < v21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21, 16);
    v20 = v50;
  }
  if (v20 <= 1)
  {
    if (v20)
    {
      v23 = 4;
    }
    else
    {
      v9 = v51;
      v23 = v52;
    }
    v9 += 3 * v23;
    goto LABEL_31;
  }
  if ((v20 & 1) != 0)
    goto LABEL_20;
  v9 = v51;
  if (!v52)
  {
    v20 = 0;
LABEL_31:
    v10 = v9;
    goto LABEL_32;
  }
  v10 = &v51[3 * v52];
LABEL_20:
  v20 &= 1u;
  while (1)
  {
    v22 = v9[1];
    if ((*v9 != -4096 || v22 != -4096) && (*v9 != -8192 || v22 != -8192))
      break;
    v9 += 3;
    if (v9 == v10)
    {
      v9 = v10;
      break;
    }
  }
LABEL_32:
  v24 = v20 == 0;
  if (v20)
    v25 = &v51;
  else
    v25 = v51;
  v26 = v52;
  if (!v24)
    v26 = 4;
  v27 = &v25[3 * v26];
  if (v9 != v27)
  {
    v28 = a3 + 16;
    do
    {
      v29 = *((_DWORD *)v9 + 4);
      if (v29)
      {
        v30 = v29 < 1;
        v31 = *v9;
        v32 = v9[1];
        v33 = *(unsigned int *)(a3 + 8);
        if (v33 >= *(unsigned int *)(a3 + 12))
        {
          v46 = v28;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v28, v33 + 1, 16);
          v28 = v46;
          v33 = *(unsigned int *)(a3 + 8);
        }
        v34 = (_QWORD *)(*(_QWORD *)a3 + 16 * v33);
        *v34 = v31;
        v34[1] = v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * v30);
        ++*(_DWORD *)(a3 + 8);
      }
      v35 = v9 + 3;
      v9 = v10;
      if (v35 != v10)
      {
        v9 = v35;
        while (1)
        {
          v36 = v9[1];
          if ((*v9 != -4096 || v36 != -4096) && (*v9 != -8192 || v36 != -8192))
            break;
          v9 += 3;
          if (v9 == v10)
          {
            v9 = v10;
            break;
          }
        }
      }
    }
    while (v9 != v27);
  }
  if (a2)
  {
    v37 = 0;
    v38 = a1 + 1;
    do
    {
      if ((a4 & 1) != 0)
      {
        v39 = *(v38 - 1);
        v40 = *v38 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        v40 = *(v38 - 1);
        v39 = *v38 & 0xFFFFFFFFFFFFFFF8;
      }
      v48 = (uint64_t *)v40;
      v49 = (char *)v39;
      *((_DWORD *)sub_1C4E2683C((uint64_t)&v50, (uint64_t *)&v48) + 4) = v37++;
      v38 += 2;
    }
    while (a2 != v37);
  }
  v41 = *(uint64_t **)a3;
  v42 = *(unsigned int *)(a3 + 8);
  v43 = (uint64_t *)(*(_QWORD *)a3 + 16 * v42);
  v48 = &v50;
  v49 = &v47;
  v44 = 126 - 2 * __clz(v42);
  if ((_DWORD)v42)
    v45 = v44;
  else
    v45 = 0;
  sub_1C4E26B48(v41, v43, (uint64_t)&v48, v45, 1);
  if ((v50 & 1) == 0)
    MEMORY[0x1CAA32FB4](v51, 8);
}

int *sub_1C4E263A4(int *result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3 + 1) | ((unint64_t)(4 * a2 / 3 + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    a2 = (((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8)) + 1;
  }
  if ((*(_BYTE *)result & 1) != 0)
    v4 = 4;
  else
    v4 = result[4];
  if (a2 > v4)
    return sub_1C4E26400((uint64_t)result, a2);
  return result;
}

int *sub_1C4E26400(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[13];

  v15[12] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E265AC((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v15;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 3;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C4E265AC((int *)a1, v15, v9);
}

int *sub_1C4E265AC(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  unsigned int v4;
  int64x2_t *v5;
  int64x2_t *v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v26;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = (int64x2_t *)(result + 26);
    v5 = (int64x2_t *)(result + 2);
  }
  else
  {
    v4 = result[4];
    if (!v4)
      goto LABEL_6;
    v5 = (int64x2_t *)*((_QWORD *)result + 1);
    v6 = (int64x2_t *)((char *)v5 + 24 * v4);
  }
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v5 = v7;
    v5 = (int64x2_t *)((char *)v5 + 24);
  }
  while (v5 != v6);
LABEL_6:
  while (a2 != a3)
  {
    v8 = *a2;
    v9 = a2[1];
    if ((*a2 != -4096 || v9 != -4096) && (v8 != -8192 || v9 != -8192))
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v11 = 4;
        v10 = result + 2;
      }
      else
      {
        v10 = (int *)*((_QWORD *)result + 1);
        v11 = result[4];
      }
      v12 = ((v9 >> 4) ^ (v9 >> 9) | ((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32))
          + ~((unint64_t)((v9 >> 4) ^ (v9 >> 9)) << 32);
      v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
      v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
      v15 = ((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27));
      v16 = v11 - 1;
      v17 = (v11 - 1) & v15;
      v18 = (uint64_t *)&v10[6 * v17];
      v19 = *v18;
      v20 = v18[1];
      if (v8 != *v18 || v9 != v20)
      {
        v22 = 0;
        v23 = 1;
        while (v19 != -4096 || v20 != -4096)
        {
          if (v22)
            v24 = 0;
          else
            v24 = v20 == -8192;
          if (v24 && v19 == -8192)
            v22 = v18;
          v26 = v17 + v23++;
          v17 = v26 & v16;
          v18 = (uint64_t *)&v10[6 * (v26 & v16)];
          v19 = *v18;
          v20 = v18[1];
          if (v8 == *v18 && v9 == v20)
            goto LABEL_19;
        }
        if (v22)
          v18 = v22;
      }
LABEL_19:
      *v18 = v8;
      v18[1] = a2[1];
      *((_DWORD *)v18 + 4) = *((_DWORD *)a2 + 4);
      *result += 2;
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1C4E26734(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
      result = 0;
      goto LABEL_10;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
     + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
  v11 = v4 - 1;
  v12 = (v4 - 1) & v10;
  v13 = (_QWORD *)(v3 + 24 * v12);
  v15 = *v13;
  v14 = v13[1];
  if (v5 == *v13 && v6 == v14)
  {
    result = 1;
  }
  else
  {
    v17 = 0;
    v18 = 1;
    result = 1;
    while (v15 != -4096 || v14 != -4096)
    {
      if (v17)
        v20 = 0;
      else
        v20 = v14 == -8192;
      if (v20 && v15 == -8192)
        v17 = v13;
      v22 = v12 + v18++;
      v12 = v22 & v11;
      v13 = (_QWORD *)(v3 + 24 * (v22 & v11));
      v15 = *v13;
      v14 = v13[1];
      if (v5 == *v13 && v6 == v14)
        goto LABEL_10;
    }
    result = 0;
    if (v17)
      v13 = v17;
  }
LABEL_10:
  *a3 = v13;
  return result;
}

_QWORD *sub_1C4E2683C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v22;
  _QWORD *v24;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v24 = 0;
LABEL_28:
      v13 = sub_1C4E26970(a1, (uint64_t)a2, a2, v24);
      *v13 = *a2;
      v13[1] = a2[1];
      *((_DWORD *)v13 + 4) = 0;
      return v13;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
     + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
  v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
  v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
  v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
  v11 = v4 - 1;
  v12 = (v4 - 1) & v10;
  v13 = (_QWORD *)(v3 + 24 * v12);
  v15 = *v13;
  v14 = v13[1];
  if (*a2 != *v13 || v6 != v14)
  {
    v18 = 0;
    v19 = 1;
    while (v15 != -4096 || v14 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v14 == -8192;
      if (v20 && v15 == -8192)
        v18 = v13;
      v22 = v12 + v19++;
      v12 = v22 & v11;
      v13 = (_QWORD *)(v3 + 24 * (v22 & v11));
      v15 = *v13;
      v14 = v13[1];
      if (v5 == *v13 && v6 == v14)
        return v13;
    }
    if (v18)
      v24 = v18;
    else
      v24 = v13;
    goto LABEL_28;
  }
  return v13;
}

_QWORD *sub_1C4E26970(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v26;
  _QWORD *v28;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4E26400(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = a3[1];
    v14 = ((v13 >> 4) ^ (v13 >> 9) | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32))
        + ~((unint64_t)((v13 >> 4) ^ (v13 >> 9)) << 32);
    v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
    v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
    v17 = v12 - 1;
    v18 = v17 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
    a4 = (_QWORD *)(v11 + 24 * v18);
    v20 = *a4;
    v19 = a4[1];
    if (*a3 != *a4 || v13 != v19)
    {
      v22 = 0;
      v23 = 1;
      while (v20 != -4096 || v19 != -4096)
      {
        if (v22)
          v24 = 0;
        else
          v24 = v19 == -8192;
        if (v24 && v20 == -8192)
          v22 = a4;
        v26 = v18 + v23++;
        v18 = v26 & v17;
        a4 = (_QWORD *)(v11 + 24 * v18);
        v20 = *a4;
        v19 = a4[1];
        if (*a3 == *a4 && v13 == v19)
          goto LABEL_7;
      }
      if (v22)
        a4 = v22;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4E26400(a1, v8);
      v28 = 0;
      sub_1C4E26734(a1, a3, &v28);
      a4 = v28;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

void sub_1C4E26B48(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t *v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  __int128 v37;

uint64_t *sub_1C4E26E90(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (result == a2)
    return result;
  v34 = v3;
  v35 = v4;
  v5 = a2;
  v6 = result;
  v7 = result + 2;
  if (result + 2 == a2)
    return result;
  v9 = 0;
  v10 = result;
  do
  {
    v11 = v10;
    v10 = v7;
    v12 = *(_QWORD *)a3;
    v13 = v11[3] & 0xFFFFFFFFFFFFFFF8;
    v32 = v11[2];
    v33 = v13;
    v14 = sub_1C4E2683C(v12, &v32);
    v15 = *(_QWORD *)a3;
    v16 = v11[1] & 0xFFFFFFFFFFFFFFF8;
    v32 = *v11;
    v33 = v16;
    result = sub_1C4E2683C(v15, &v32);
    v17 = *((_DWORD *)v14 + 4);
    v18 = *((_DWORD *)result + 4);
    if (**(_BYTE **)(a3 + 8))
    {
      if (v17 >= v18)
        goto LABEL_17;
    }
    else if (v17 <= v18)
    {
      goto LABEL_17;
    }
    v20 = v11[2];
    v19 = v11[3];
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v21 = v6;
    if (v11 == v6)
      goto LABEL_16;
    v31 = v19;
    v22 = v19 & 0xFFFFFFFFFFFFFFF8;
    v23 = v9;
    while (1)
    {
      v24 = *(_QWORD *)a3;
      v32 = v20;
      v33 = v22;
      v25 = sub_1C4E2683C(v24, &v32);
      v26 = *(_QWORD *)a3;
      v27 = *(uint64_t *)((char *)v6 + v23 - 8) & 0xFFFFFFFFFFFFFFF8;
      v32 = *(uint64_t *)((char *)v6 + v23 - 16);
      v33 = v27;
      result = sub_1C4E2683C(v26, &v32);
      v28 = *((_DWORD *)v25 + 4);
      v29 = *((_DWORD *)result + 4);
      if (!**(_BYTE **)(a3 + 8))
        break;
      if (v28 >= v29)
      {
        v21 = (uint64_t *)((char *)v6 + v23);
        goto LABEL_15;
      }
LABEL_10:
      v11 -= 2;
      *(_OWORD *)((char *)v6 + v23) = *(_OWORD *)((char *)v6 + v23 - 16);
      v23 -= 16;
      if (!v23)
      {
        v21 = v6;
        goto LABEL_15;
      }
    }
    if (v28 > v29)
      goto LABEL_10;
    v21 = v11;
LABEL_15:
    v5 = a2;
    v19 = v31;
LABEL_16:
    *v21 = v20;
    v21[1] = v19;
LABEL_17:
    v7 = v10 + 2;
    v9 += 16;
  }
  while (v10 + 2 != v5);
  return result;
}

uint64_t *sub_1C4E27024(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (result != a2)
  {
    v29 = v3;
    v30 = v4;
    v6 = result;
    for (i = result + 2; v6 + 2 != a2; i = v6 + 2)
    {
      v9 = v6;
      v6 = i;
      v10 = *(_QWORD *)a3;
      v11 = v9[3] & 0xFFFFFFFFFFFFFFF8;
      v27 = v9[2];
      v28 = v11;
      v12 = sub_1C4E2683C(v10, &v27);
      v13 = *(_QWORD *)a3;
      v14 = v9[1] & 0xFFFFFFFFFFFFFFF8;
      v27 = *v9;
      v28 = v14;
      result = sub_1C4E2683C(v13, &v27);
      v15 = *((_DWORD *)v12 + 4);
      v16 = *((_DWORD *)result + 4);
      if (**(_BYTE **)(a3 + 8))
      {
        if (v15 < v16)
        {
LABEL_5:
          v17 = *v6;
          v18 = v9[3];
          do
          {
            while (1)
            {
              v19 = v9;
              *((_OWORD *)v9 + 1) = *(_OWORD *)v9;
              v20 = *(_QWORD *)a3;
              v27 = v17;
              v28 = v18 & 0xFFFFFFFFFFFFFFF8;
              v21 = sub_1C4E2683C(v20, &v27);
              v22 = *(_QWORD *)a3;
              v23 = *(v9 - 2);
              v24 = *(v9 - 1);
              v9 -= 2;
              v27 = v23;
              v28 = v24 & 0xFFFFFFFFFFFFFFF8;
              result = sub_1C4E2683C(v22, &v27);
              v25 = *((_DWORD *)v21 + 4);
              v26 = *((_DWORD *)result + 4);
              if (**(_BYTE **)(a3 + 8))
                break;
              if (v25 <= v26)
                goto LABEL_10;
            }
          }
          while (v25 < v26);
LABEL_10:
          *v19 = v17;
          v19[1] = v18;
        }
      }
      else if (v15 > v16)
      {
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t sub_1C4E27160(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v54;
  unint64_t v55;

  v8 = *(_QWORD *)a4;
  v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v54 = *a2;
  v55 = v9;
  v10 = sub_1C4E2683C(v8, &v54);
  v11 = *(_QWORD *)a4;
  v12 = a1[1] & 0xFFFFFFFFFFFFFFF8;
  v54 = *a1;
  v55 = v12;
  v13 = sub_1C4E2683C(v11, &v54);
  v14 = *((_DWORD *)v10 + 4);
  v15 = *((_DWORD *)v13 + 4);
  if (!**(_BYTE **)(a4 + 8))
  {
    if (v14 > v15)
      goto LABEL_3;
LABEL_7:
    v25 = *(_QWORD *)a4;
    v26 = a3[1] & 0xFFFFFFFFFFFFFFF8;
    v54 = *a3;
    v55 = v26;
    v27 = sub_1C4E2683C(v25, &v54);
    v28 = *(_QWORD *)a4;
    v29 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    v54 = *a2;
    v55 = v29;
    v30 = sub_1C4E2683C(v28, &v54);
    v31 = *((_DWORD *)v27 + 4);
    v32 = *((_DWORD *)v30 + 4);
    if (**(_BYTE **)(a4 + 8))
    {
      if (v31 < v32)
        goto LABEL_9;
    }
    else if (v31 > v32)
    {
LABEL_9:
      v33 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v33;
      v34 = *(_QWORD *)a4;
      v35 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      v54 = *a2;
      v55 = v35;
      v36 = sub_1C4E2683C(v34, &v54);
      v37 = *(_QWORD *)a4;
      v38 = a1[1] & 0xFFFFFFFFFFFFFFF8;
      v54 = *a1;
      v55 = v38;
      v39 = sub_1C4E2683C(v37, &v54);
      v40 = *((_DWORD *)v36 + 4);
      v41 = *((_DWORD *)v39 + 4);
      if (**(_BYTE **)(a4 + 8))
      {
        if (v40 >= v41)
          return 1;
      }
      else if (v40 <= v41)
      {
        return 1;
      }
      v42 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v42;
      return 2;
    }
    return 0;
  }
  if (v14 >= v15)
    goto LABEL_7;
LABEL_3:
  v16 = *(_QWORD *)a4;
  v17 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v54 = *a3;
  v55 = v17;
  v18 = sub_1C4E2683C(v16, &v54);
  v19 = *(_QWORD *)a4;
  v20 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v54 = *a2;
  v55 = v20;
  v21 = sub_1C4E2683C(v19, &v54);
  v22 = *((_DWORD *)v18 + 4);
  v23 = *((_DWORD *)v21 + 4);
  if (**(_BYTE **)(a4 + 8))
  {
    if (v22 < v23)
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v22 <= v23)
  {
LABEL_13:
    v43 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v43;
    v44 = *(_QWORD *)a4;
    v45 = a3[1] & 0xFFFFFFFFFFFFFFF8;
    v54 = *a3;
    v55 = v45;
    v46 = sub_1C4E2683C(v44, &v54);
    v47 = *(_QWORD *)a4;
    v48 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    v54 = *a2;
    v55 = v48;
    v49 = sub_1C4E2683C(v47, &v54);
    v50 = *((_DWORD *)v46 + 4);
    v51 = *((_DWORD *)v49 + 4);
    if (**(_BYTE **)(a4 + 8))
    {
      if (v50 >= v51)
        return 1;
    }
    else if (v50 <= v51)
    {
      return 1;
    }
    v52 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v52;
    return 2;
  }
LABEL_5:
  v24 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v24;
  return 1;
}

_QWORD *sub_1C4E273B4(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *i;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  __int128 v56;

  v6 = *a1;
  v7 = a1[1];
  v8 = *(_QWORD *)a3;
  *(_QWORD *)&v56 = v6;
  *((_QWORD *)&v56 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = sub_1C4E2683C(v8, (uint64_t *)&v56);
  v10 = *(_QWORD *)a3;
  v11 = *(a2 - 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v56 = *(a2 - 2);
  *((_QWORD *)&v56 + 1) = v11;
  v12 = sub_1C4E2683C(v10, (uint64_t *)&v56);
  v13 = *((_DWORD *)v9 + 4);
  v14 = *((_DWORD *)v12 + 4);
  if (**(_BYTE **)(a3 + 8))
  {
    if (v13 < v14)
    {
LABEL_3:
      v15 = a1 + 2;
      do
      {
        while (1)
        {
          i = v15;
          v17 = *(_QWORD *)a3;
          *(_QWORD *)&v56 = v6;
          *((_QWORD *)&v56 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
          v18 = sub_1C4E2683C(v17, (uint64_t *)&v56);
          v19 = *(_QWORD *)a3;
          v20 = i[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v56 = *i;
          *((_QWORD *)&v56 + 1) = v20;
          v21 = sub_1C4E2683C(v19, (uint64_t *)&v56);
          v22 = *((_DWORD *)v18 + 4);
          v23 = *((_DWORD *)v21 + 4);
          v15 = i + 2;
          if (**(_BYTE **)(a3 + 8))
            break;
          if (v22 > v23)
            goto LABEL_16;
        }
      }
      while (v22 >= v23);
      goto LABEL_16;
    }
  }
  else if (v13 > v14)
  {
    goto LABEL_3;
  }
  for (i = a1 + 2; i < a2; i += 2)
  {
    v24 = *(_QWORD *)a3;
    *(_QWORD *)&v56 = v6;
    *((_QWORD *)&v56 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
    v25 = sub_1C4E2683C(v24, (uint64_t *)&v56);
    v26 = *(_QWORD *)a3;
    v27 = i[1] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)&v56 = *i;
    *((_QWORD *)&v56 + 1) = v27;
    v28 = sub_1C4E2683C(v26, (uint64_t *)&v56);
    v29 = *((_DWORD *)v25 + 4);
    v30 = *((_DWORD *)v28 + 4);
    if (**(_BYTE **)(a3 + 8))
    {
      if (v29 < v30)
        break;
    }
    else if (v29 > v30)
    {
      break;
    }
  }
LABEL_16:
  if (i < a2)
  {
    v31 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v31;
        v32 = *(_QWORD *)a3;
        *(_QWORD *)&v56 = v6;
        *((_QWORD *)&v56 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
        v33 = sub_1C4E2683C(v32, (uint64_t *)&v56);
        v34 = *(_QWORD *)a3;
        v35 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v56 = *a2;
        *((_QWORD *)&v56 + 1) = v35;
        v36 = sub_1C4E2683C(v34, (uint64_t *)&v56);
        v37 = *((_DWORD *)v33 + 4);
        v38 = *((_DWORD *)v36 + 4);
        v31 = a2 - 2;
        if (**(_BYTE **)(a3 + 8))
          break;
        if (v37 <= v38)
          goto LABEL_33;
      }
    }
    while (v37 < v38);
  }
LABEL_33:
  while (i < a2)
  {
    v56 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v56;
    v39 = i + 2;
    do
    {
      while (1)
      {
        i = v39;
        v40 = *(_QWORD *)a3;
        *(_QWORD *)&v56 = v6;
        *((_QWORD *)&v56 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
        v41 = sub_1C4E2683C(v40, (uint64_t *)&v56);
        v42 = *(_QWORD *)a3;
        v43 = i[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v56 = *i;
        *((_QWORD *)&v56 + 1) = v43;
        v44 = sub_1C4E2683C(v42, (uint64_t *)&v56);
        v45 = *((_DWORD *)v41 + 4);
        v46 = *((_DWORD *)v44 + 4);
        v39 = i + 2;
        if (**(_BYTE **)(a3 + 8))
          break;
        if (v45 > v46)
          goto LABEL_28;
      }
    }
    while (v45 >= v46);
LABEL_28:
    v47 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v47;
        v48 = *(_QWORD *)a3;
        *(_QWORD *)&v56 = v6;
        *((_QWORD *)&v56 + 1) = v7 & 0xFFFFFFFFFFFFFFF8;
        v49 = sub_1C4E2683C(v48, (uint64_t *)&v56);
        v50 = *(_QWORD *)a3;
        v51 = a2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v56 = *a2;
        *((_QWORD *)&v56 + 1) = v51;
        v52 = sub_1C4E2683C(v50, (uint64_t *)&v56);
        v53 = *((_DWORD *)v49 + 4);
        v54 = *((_DWORD *)v52 + 4);
        v47 = a2 - 2;
        if (**(_BYTE **)(a3 + 8))
          break;
        if (v53 <= v54)
          goto LABEL_33;
      }
    }
    while (v53 < v54);
  }
  if (i - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  *(i - 2) = v6;
  *(i - 1) = v7;
  return i;
}

uint64_t *sub_1C4E27668(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  int v50;
  uint64_t *result;
  __int128 v52;

  v6 = 0;
  v7 = *a1;
  v8 = a1[1];
  while (1)
  {
    v9 = *(_QWORD *)a3;
    v10 = a1[v6 + 3] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)&v52 = a1[v6 + 2];
    *((_QWORD *)&v52 + 1) = v10;
    v11 = sub_1C4E2683C(v9, (uint64_t *)&v52);
    v12 = *(_QWORD *)a3;
    *(_QWORD *)&v52 = v7;
    *((_QWORD *)&v52 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = sub_1C4E2683C(v12, (uint64_t *)&v52);
    v14 = *((_DWORD *)v11 + 4);
    v15 = *((_DWORD *)v13 + 4);
    if (**(_BYTE **)(a3 + 8))
      break;
    if (v14 <= v15)
      goto LABEL_6;
LABEL_4:
    v6 += 2;
  }
  if (v14 < v15)
    goto LABEL_4;
LABEL_6:
  v16 = (unint64_t)&a1[v6 + 2];
  if (v6 * 8)
  {
    v17 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v17;
        v18 = *(_QWORD *)a3;
        v19 = v17[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v52 = *v17;
        *((_QWORD *)&v52 + 1) = v19;
        v20 = sub_1C4E2683C(v18, (uint64_t *)&v52);
        v21 = *(_QWORD *)a3;
        *(_QWORD *)&v52 = v7;
        *((_QWORD *)&v52 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = sub_1C4E2683C(v21, (uint64_t *)&v52);
        v23 = *((_DWORD *)v20 + 4);
        v24 = *((_DWORD *)v22 + 4);
        v17 = a2 - 2;
        if (**(_BYTE **)(a3 + 8))
          break;
        if (v23 > v24)
          goto LABEL_21;
      }
    }
    while (v23 >= v24);
  }
  else if (v16 < (unint64_t)a2)
  {
    v25 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v25;
        v26 = *(_QWORD *)a3;
        v27 = v25[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v52 = *v25;
        *((_QWORD *)&v52 + 1) = v27;
        v28 = sub_1C4E2683C(v26, (uint64_t *)&v52);
        v29 = *(_QWORD *)a3;
        *(_QWORD *)&v52 = v7;
        *((_QWORD *)&v52 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
        v30 = sub_1C4E2683C(v29, (uint64_t *)&v52);
        v31 = *((_DWORD *)v28 + 4);
        v32 = *((_DWORD *)v30 + 4);
        v25 = a2 - 2;
        if (**(_BYTE **)(a3 + 8))
          break;
        if (v16 >= (unint64_t)a2 || v31 > v32)
          goto LABEL_21;
      }
    }
    while (v16 < (unint64_t)a2 && v31 >= v32);
  }
LABEL_21:
  v33 = &a1[v6 + 2];
  if (v16 < (unint64_t)a2)
  {
    v34 = a2;
    do
    {
      v52 = *(_OWORD *)v33;
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *(_OWORD *)v34 = v52;
      v35 = v33 + 2;
      do
      {
        while (1)
        {
          v33 = v35;
          v36 = *(_QWORD *)a3;
          v37 = v35[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v52 = *v35;
          *((_QWORD *)&v52 + 1) = v37;
          v38 = sub_1C4E2683C(v36, (uint64_t *)&v52);
          v39 = *(_QWORD *)a3;
          *(_QWORD *)&v52 = v7;
          *((_QWORD *)&v52 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
          v40 = sub_1C4E2683C(v39, (uint64_t *)&v52);
          v41 = *((_DWORD *)v38 + 4);
          v42 = *((_DWORD *)v40 + 4);
          v35 = v33 + 2;
          if (**(_BYTE **)(a3 + 8))
            break;
          if (v41 <= v42)
            goto LABEL_28;
        }
      }
      while (v41 < v42);
LABEL_28:
      v43 = v34 - 2;
      do
      {
        while (1)
        {
          v34 = v43;
          v44 = *(_QWORD *)a3;
          v45 = v43[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v52 = *v43;
          *((_QWORD *)&v52 + 1) = v45;
          v46 = sub_1C4E2683C(v44, (uint64_t *)&v52);
          v47 = *(_QWORD *)a3;
          *(_QWORD *)&v52 = v7;
          *((_QWORD *)&v52 + 1) = v8 & 0xFFFFFFFFFFFFFFF8;
          v48 = sub_1C4E2683C(v47, (uint64_t *)&v52);
          v49 = *((_DWORD *)v46 + 4);
          v50 = *((_DWORD *)v48 + 4);
          v43 = v34 - 2;
          if (**(_BYTE **)(a3 + 8))
            break;
          if (v49 > v50)
            goto LABEL_33;
        }
      }
      while (v49 >= v50);
LABEL_33:
      ;
    }
    while (v33 < v34);
  }
  result = v33 - 2;
  if (v33 - 2 != a1)
    *(_OWORD *)a1 = *(_OWORD *)result;
  *(v33 - 2) = v7;
  *(v33 - 1) = v8;
  return result;
}

BOOL sub_1C4E27910(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;

  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)a3;
      v9 = *(a2 - 1);
      v10 = a2 - 2;
      v45 = *(a2 - 2);
      v46 = v9 & 0xFFFFFFFFFFFFFFF8;
      v11 = sub_1C4E2683C(v8, &v45);
      v12 = *(_QWORD *)a3;
      v13 = a1[1] & 0xFFFFFFFFFFFFFFF8;
      v45 = *a1;
      v46 = v13;
      v14 = sub_1C4E2683C(v12, &v45);
      v15 = *((_DWORD *)v11 + 4);
      v16 = *((_DWORD *)v14 + 4);
      if (!**(_BYTE **)(a3 + 8))
      {
        if (v15 <= v16)
          return 1;
        goto LABEL_4;
      }
      if (v15 < v16)
      {
LABEL_4:
        v17 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v10;
        *(_OWORD *)v10 = v17;
      }
      return 1;
    case 3:
      sub_1C4E27160(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_1C4E27BC4(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_1C4E27D48(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v18 = a1 + 4;
      sub_1C4E27160(a1, a1 + 2, a1 + 4, a3);
      v19 = a1 + 6;
      if (a1 + 6 == v4)
        return 1;
      v20 = 0;
      v21 = 0;
      v42 = v4;
      while (2)
      {
        v22 = *(_QWORD *)a3;
        v23 = v19[1] & 0xFFFFFFFFFFFFFFF8;
        v45 = *v19;
        v46 = v23;
        v24 = sub_1C4E2683C(v22, &v45);
        v25 = *(_QWORD *)a3;
        v26 = v18[1] & 0xFFFFFFFFFFFFFFF8;
        v45 = *v18;
        v46 = v26;
        v27 = sub_1C4E2683C(v25, &v45);
        v28 = *((_DWORD *)v24 + 4);
        v29 = *((_DWORD *)v27 + 4);
        if (**(_BYTE **)(a3 + 8))
        {
          if (v28 >= v29)
            goto LABEL_22;
        }
        else if (v28 <= v29)
        {
          goto LABEL_22;
        }
        v31 = *v19;
        v30 = v19[1];
        *(_OWORD *)v19 = *(_OWORD *)v18;
        v32 = a1;
        if (v18 == a1)
          goto LABEL_21;
        v44 = v21;
        v43 = v30;
        v33 = v30 & 0xFFFFFFFFFFFFFFF8;
        v34 = v20;
        while (2)
        {
          v35 = *(_QWORD *)a3;
          v45 = v31;
          v46 = v33;
          v36 = sub_1C4E2683C(v35, &v45);
          v37 = *(_QWORD *)a3;
          v38 = *(uint64_t *)((char *)a1 + v34 + 24);
          v45 = *(uint64_t *)((char *)a1 + v34 + 16);
          v46 = v38 & 0xFFFFFFFFFFFFFFF8;
          v39 = sub_1C4E2683C(v37, &v45);
          v40 = *((_DWORD *)v36 + 4);
          v41 = *((_DWORD *)v39 + 4);
          if (**(_BYTE **)(a3 + 8))
          {
            if (v40 >= v41)
            {
              v32 = (uint64_t *)((char *)a1 + v34 + 32);
              goto LABEL_20;
            }
            goto LABEL_15;
          }
          if (v40 > v41)
          {
LABEL_15:
            v18 -= 2;
            *(_OWORD *)((char *)a1 + v34 + 32) = *(_OWORD *)((char *)a1 + v34 + 16);
            v34 -= 16;
            if (v34 == -32)
            {
              v32 = a1;
              goto LABEL_20;
            }
            continue;
          }
          break;
        }
        v32 = v18;
LABEL_20:
        v4 = v42;
        v30 = v43;
        v21 = v44;
LABEL_21:
        *v32 = v31;
        v32[1] = v30;
        if (++v21 != 8)
        {
LABEL_22:
          v18 = v19;
          v20 += 16;
          v19 += 2;
          if (v19 == v4)
            return 1;
          continue;
        }
        return v19 + 2 == v4;
      }
  }
}

__n128 sub_1C4E27BC4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __n128 result;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;

  sub_1C4E27160(a1, a2, a3, a5);
  v10 = *(_QWORD *)a5;
  v11 = a4[1] & 0xFFFFFFFFFFFFFFF8;
  v37 = *a4;
  v38 = v11;
  v12 = sub_1C4E2683C(v10, &v37);
  v13 = *(_QWORD *)a5;
  v14 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v37 = *a3;
  v38 = v14;
  v15 = sub_1C4E2683C(v13, &v37);
  v17 = *((_DWORD *)v12 + 4);
  v18 = *((_DWORD *)v15 + 4);
  if (**(_BYTE **)(a5 + 8))
  {
    if (v17 >= v18)
      return result;
  }
  else if (v17 <= v18)
  {
    return result;
  }
  v19 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v19;
  v20 = *(_QWORD *)a5;
  v21 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v37 = *a3;
  v38 = v21;
  v22 = sub_1C4E2683C(v20, &v37);
  v23 = *(_QWORD *)a5;
  v24 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v37 = *a2;
  v38 = v24;
  v25 = sub_1C4E2683C(v23, &v37);
  v26 = *((_DWORD *)v22 + 4);
  v27 = *((_DWORD *)v25 + 4);
  if (**(_BYTE **)(a5 + 8))
  {
    if (v26 >= v27)
      return result;
  }
  else if (v26 <= v27)
  {
    return result;
  }
  v28 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v28;
  v29 = *(_QWORD *)a5;
  v30 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v37 = *a2;
  v38 = v30;
  v31 = sub_1C4E2683C(v29, &v37);
  v32 = *(_QWORD *)a5;
  v33 = a1[1] & 0xFFFFFFFFFFFFFFF8;
  v37 = *a1;
  v38 = v33;
  v34 = sub_1C4E2683C(v32, &v37);
  v35 = *((_DWORD *)v31 + 4);
  v36 = *((_DWORD *)v34 + 4);
  if (**(_BYTE **)(a5 + 8))
  {
    if (v35 >= v36)
      return result;
  }
  else if (v35 <= v36)
  {
    return result;
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

__n128 sub_1C4E27D48(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  __n128 result;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  sub_1C4E27BC4(a1, a2, a3, a4, a6);
  v12 = *(_QWORD *)a6;
  v13 = a5[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a5;
  v49 = v13;
  v14 = sub_1C4E2683C(v12, &v48);
  v15 = *(_QWORD *)a6;
  v16 = a4[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a4;
  v49 = v16;
  v17 = sub_1C4E2683C(v15, &v48);
  v19 = *((_DWORD *)v14 + 4);
  v20 = *((_DWORD *)v17 + 4);
  if (**(_BYTE **)(a6 + 8))
  {
    if (v19 >= v20)
      return result;
  }
  else if (v19 <= v20)
  {
    return result;
  }
  v21 = *(_OWORD *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)a5 = v21;
  v22 = *(_QWORD *)a6;
  v23 = a4[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a4;
  v49 = v23;
  v24 = sub_1C4E2683C(v22, &v48);
  v25 = *(_QWORD *)a6;
  v26 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a3;
  v49 = v26;
  v27 = sub_1C4E2683C(v25, &v48);
  v28 = *((_DWORD *)v24 + 4);
  v29 = *((_DWORD *)v27 + 4);
  if (**(_BYTE **)(a6 + 8))
  {
    if (v28 >= v29)
      return result;
  }
  else if (v28 <= v29)
  {
    return result;
  }
  v30 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v30;
  v31 = *(_QWORD *)a6;
  v32 = a3[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a3;
  v49 = v32;
  v33 = sub_1C4E2683C(v31, &v48);
  v34 = *(_QWORD *)a6;
  v35 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a2;
  v49 = v35;
  v36 = sub_1C4E2683C(v34, &v48);
  v37 = *((_DWORD *)v33 + 4);
  v38 = *((_DWORD *)v36 + 4);
  if (**(_BYTE **)(a6 + 8))
  {
    if (v37 >= v38)
      return result;
  }
  else if (v37 <= v38)
  {
    return result;
  }
  v39 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v39;
  v40 = *(_QWORD *)a6;
  v41 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a2;
  v49 = v41;
  v42 = sub_1C4E2683C(v40, &v48);
  v43 = *(_QWORD *)a6;
  v44 = a1[1] & 0xFFFFFFFFFFFFFFF8;
  v48 = *a1;
  v49 = v44;
  v45 = sub_1C4E2683C(v43, &v48);
  v46 = *((_DWORD *)v42 + 4);
  v47 = *((_DWORD *)v45 + 4);
  if (**(_BYTE **)(a6 + 8))
  {
    if (v46 >= v47)
      return result;
  }
  else if (v46 <= v47)
  {
    return result;
  }
  result = *(__n128 *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t *sub_1C4E27F40(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  BOOL v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t *v42;
  uint64_t *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1C4E281A4(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      while (1)
      {
        v15 = *(_QWORD *)a4;
        v16 = v14[1] & 0xFFFFFFFFFFFFFFF8;
        v45 = *v14;
        v46 = v16;
        v17 = sub_1C4E2683C(v15, &v45);
        v18 = *(_QWORD *)a4;
        v19 = a1[1] & 0xFFFFFFFFFFFFFFF8;
        v45 = *a1;
        v46 = v19;
        v20 = sub_1C4E2683C(v18, &v45);
        v21 = *((_DWORD *)v17 + 4);
        v22 = *((_DWORD *)v20 + 4);
        if (**(_BYTE **)(a4 + 8))
          break;
        if (v21 > v22)
          goto LABEL_9;
LABEL_10:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = a3;
          goto LABEL_14;
        }
      }
      if (v21 >= v22)
        goto LABEL_10;
LABEL_9:
      v23 = *(_OWORD *)v14;
      *(_OWORD *)v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v23;
      sub_1C4E281A4(a1, a4, v9, a1);
      goto LABEL_10;
    }
LABEL_14:
    if (v8 < 17)
    {
      return v13;
    }
    else
    {
      v42 = v13;
      do
      {
        v43 = v6;
        v24 = 0;
        v44 = *(_OWORD *)a1;
        v25 = a1;
        do
        {
          v26 = &v25[2 * v24 + 2];
          v27 = (2 * v24) | 1;
          v28 = 2 * v24 + 2;
          if (v28 < v9)
          {
            v29 = *(_QWORD *)a4;
            v30 = v26[1] & 0xFFFFFFFFFFFFFFF8;
            v45 = *v26;
            v46 = v30;
            v31 = sub_1C4E2683C(v29, &v45);
            v32 = *(_QWORD *)a4;
            v33 = v26[3] & 0xFFFFFFFFFFFFFFF8;
            v45 = v26[2];
            v46 = v33;
            v34 = sub_1C4E2683C(v32, &v45);
            v35 = *((_DWORD *)v31 + 4);
            v36 = *((_DWORD *)v34 + 4);
            v37 = v35 < v36;
            v38 = v35 > v36;
            v39 = v37;
            if (**(_BYTE **)(a4 + 8) ? v39 : v38)
            {
              v26 += 2;
              v27 = v28;
            }
          }
          *(_OWORD *)v25 = *(_OWORD *)v26;
          v25 = v26;
          v24 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        v6 -= 2;
        if (v26 == v43 - 2)
        {
          *(_OWORD *)v26 = v44;
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v44;
          sub_1C4E28420(a1, (uint64_t)(v26 + 2), a4, ((char *)(v26 + 2) - (char *)a1) >> 4);
        }
        v37 = v9-- <= 2;
      }
      while (!v37);
      return v42;
    }
  }
  return a3;
}

_QWORD *sub_1C4E281A4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  int v47;
  _BOOL4 v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v62 = v4;
    v63 = v5;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((char *)a4 - (char *)result) >> 4)
    {
      v10 = a3;
      v12 = a4 - result;
      v13 = v12 + 1;
      v14 = &result[2 * v12 + 2];
      v15 = v12 + 2;
      if (v12 + 2 < a3)
      {
        v16 = *(_QWORD *)a2;
        v17 = v14[1] & 0xFFFFFFFFFFFFFFF8;
        v60 = *v14;
        v61 = v17;
        v18 = sub_1C4E2683C(v16, &v60);
        v19 = *(_QWORD *)a2;
        v20 = v14[3] & 0xFFFFFFFFFFFFFFF8;
        v60 = v14[2];
        v61 = v20;
        v21 = sub_1C4E2683C(v19, &v60);
        v22 = *((_DWORD *)v18 + 4);
        v23 = *((_DWORD *)v21 + 4);
        v24 = v22 < v23;
        v25 = v22 > v23;
        v26 = v24;
        if (**(_BYTE **)(a2 + 8) ? v26 : v25)
        {
          v14 += 2;
          v13 = v15;
        }
      }
      v28 = *(_QWORD *)a2;
      v29 = v14[1] & 0xFFFFFFFFFFFFFFF8;
      v60 = *v14;
      v61 = v29;
      v30 = sub_1C4E2683C(v28, &v60);
      v31 = *(_QWORD *)a2;
      v32 = a4[1] & 0xFFFFFFFFFFFFFFF8;
      v60 = *a4;
      v61 = v32;
      result = sub_1C4E2683C(v31, &v60);
      v33 = *((_DWORD *)v30 + 4);
      v34 = *((_DWORD *)result + 4);
      if (**(_BYTE **)(a2 + 8))
      {
        if (v33 < v34)
          return result;
      }
      else if (v33 > v34)
      {
        return result;
      }
      v36 = *a4;
      v35 = a4[1];
      *(_OWORD *)a4 = *(_OWORD *)v14;
      v57 = v35;
      if (v9 >= v13)
      {
        v58 = v10;
        v59 = v35 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v38 = 2 * v13;
          v13 = (2 * v13) | 1;
          v37 = &v8[2 * v13];
          v39 = v38 + 2;
          if (v38 + 2 < v10)
          {
            v40 = *(_QWORD *)a2;
            v41 = v37[1] & 0xFFFFFFFFFFFFFFF8;
            v60 = *v37;
            v61 = v41;
            v42 = sub_1C4E2683C(v40, &v60);
            v43 = *(_QWORD *)a2;
            v44 = v37[3] & 0xFFFFFFFFFFFFFFF8;
            v60 = v37[2];
            v61 = v44;
            v45 = sub_1C4E2683C(v43, &v60);
            v46 = *((_DWORD *)v42 + 4);
            v47 = *((_DWORD *)v45 + 4);
            v24 = v46 < v47;
            v48 = v46 > v47;
            v49 = v24;
            if (**(_BYTE **)(a2 + 8))
              v50 = v49;
            else
              v50 = v48;
            if (v50)
              v37 += 2;
            v10 = v58;
            if (v50)
              v13 = v39;
          }
          v51 = *(_QWORD *)a2;
          v52 = v37[1] & 0xFFFFFFFFFFFFFFF8;
          v60 = *v37;
          v61 = v52;
          v53 = sub_1C4E2683C(v51, &v60);
          v54 = *(_QWORD *)a2;
          v60 = v36;
          v61 = v59;
          result = sub_1C4E2683C(v54, &v60);
          v55 = *((_DWORD *)v53 + 4);
          v56 = *((_DWORD *)result + 4);
          if (**(_BYTE **)(a2 + 8))
          {
            if (v55 < v56)
              break;
          }
          else if (v55 > v56)
          {
            break;
          }
          *(_OWORD *)v14 = *(_OWORD *)v37;
          v14 = v37;
          if (v9 < v13)
            goto LABEL_16;
        }
      }
      v37 = v14;
LABEL_16:
      *v37 = v36;
      v37[1] = v57;
    }
  }
  return result;
}

_QWORD *sub_1C4E28420(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = &result[2 * (v4 >> 1)];
    v10 = *(_QWORD *)a3;
    v11 = v9[1] & 0xFFFFFFFFFFFFFFF8;
    v27 = *v9;
    v28 = v11;
    v12 = sub_1C4E2683C(v10, &v27);
    v13 = *(_QWORD *)a3;
    v14 = *(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(a2 - 16);
    v28 = v14;
    result = sub_1C4E2683C(v13, &v27);
    v15 = *((_DWORD *)v12 + 4);
    v16 = *((_DWORD *)result + 4);
    if (**(_BYTE **)(a3 + 8))
    {
      if (v15 >= v16)
        return result;
    }
    else if (v15 <= v16)
    {
      return result;
    }
    v17 = *(_QWORD *)(a2 - 16);
    v18 = *(_QWORD *)(a2 - 8);
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v9;
    if (v4 >= 2)
    {
      while (1)
      {
        v20 = v8 - 1;
        v8 = (v8 - 1) >> 1;
        v19 = &v7[2 * v8];
        v21 = *(_QWORD *)a3;
        v22 = v19[1] & 0xFFFFFFFFFFFFFFF8;
        v27 = *v19;
        v28 = v22;
        v23 = sub_1C4E2683C(v21, &v27);
        v24 = *(_QWORD *)a3;
        v27 = v17;
        v28 = v18 & 0xFFFFFFFFFFFFFFF8;
        result = sub_1C4E2683C(v24, &v27);
        v25 = *((_DWORD *)v23 + 4);
        v26 = *((_DWORD *)result + 4);
        if (**(_BYTE **)(a3 + 8))
        {
          if (v25 >= v26)
            break;
        }
        else if (v25 <= v26)
        {
          break;
        }
        *(_OWORD *)v9 = *(_OWORD *)v19;
        v9 = &v7[2 * v8];
        if (v20 <= 1)
          goto LABEL_6;
      }
    }
    v19 = v9;
LABEL_6:
    *v19 = v17;
    v19[1] = v18;
  }
  return result;
}

uint64_t sub_1C4E2856C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 72 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 72 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E28620(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4E28798(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 72 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 72 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4E28798(a1, v8);
      v20 = 0;
      sub_1C4E2856C(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

void sub_1C4E28798(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  unint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29[38];

  v29[36] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v26 = a2;
      *(_QWORD *)(a1 + 8) = operator new(72 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v26;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E28A60((int *)a1, v6, &v6[9 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v27 = a2;
  v8 = 0;
  v9 = a1 + 8;
  v10 = v29;
  v11 = a1;
  v12 = (uint64_t *)(a1 + 8);
  do
  {
    if ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_28;
    v13 = 0;
    v14 = 0;
    *v10 = *v12;
    v15 = v10 + 1;
    v16 = v12 + 1;
    do
    {
      v17 = v13;
      v18 = &v15[4 * v14];
      v19 = v18 + 2;
      *v18 = (uint64_t)(v18 + 2);
      v18[1] = 0x200000000;
      if (v15 != v16)
      {
        v20 = &v16[4 * v14];
        v21 = *((unsigned int *)v20 + 2);
        if (*((_DWORD *)v20 + 2))
        {
          v22 = (const void *)*v20;
          if ((uint64_t *)*v20 != v20 + 2)
          {
            *v18 = (uint64_t)v22;
            *((_DWORD *)v18 + 2) = v21;
            *((_DWORD *)v18 + 3) = *((_DWORD *)v20 + 3);
            *v20 = (uint64_t)(v20 + 2);
            *((_DWORD *)v20 + 3) = 0;
            goto LABEL_18;
          }
          if (v21 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[4 * v14], (uint64_t)(v18 + 2), *((unsigned int *)v20 + 2), 8);
            v23 = *((unsigned int *)v20 + 2);
            if (!(_DWORD)v23)
              goto LABEL_17;
            v22 = (const void *)*v20;
            v19 = (void *)*v18;
          }
          else
          {
            v23 = *((unsigned int *)v20 + 2);
          }
          memcpy(v19, v22, 8 * v23);
LABEL_17:
          *((_DWORD *)v18 + 2) = v21;
LABEL_18:
          *((_DWORD *)v20 + 2) = 0;
        }
      }
      v13 = 1;
      v14 = 1;
    }
    while ((v17 & 1) == 0);
    for (i = 0; i != -64; i -= 32)
    {
      v25 = *(void **)(v11 + i + 48);
      if ((void *)(v11 + i + 64) != v25)
        free(v25);
    }
    v10 += 9;
LABEL_28:
    ++v8;
    v12 = (uint64_t *)(v9 + 72 * v8);
    v11 += 72;
  }
  while (v8 != 4);
  if (v27 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(72 * v27, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v27;
  }
  sub_1C4E28A60((int *)a1, v29, v10);
}

void sub_1C4E28A60(int *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  int *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  int *v35;

  v4 = a2;
  v6 = *a1;
  *a1 &= 1u;
  a1[1] = 0;
  v35 = a1 + 2;
  if ((v6 & 1) != 0)
  {
    v9 = a1 + 74;
    v8 = a1 + 2;
  }
  else
  {
    v7 = a1[4];
    if (!v7)
      goto LABEL_5;
    v8 = (_QWORD *)*((_QWORD *)a1 + 1);
    v9 = &v8[9 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 9;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 == a3)
    return;
  do
  {
    v10 = *v4;
    if ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_24;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v12 = 4;
      v11 = v35;
    }
    else
    {
      v11 = (int *)*((_QWORD *)a1 + 1);
      v12 = a1[4];
    }
    v13 = v12 - 1;
    v14 = v13 & ((v10 >> 4) ^ (v10 >> 9));
    v15 = &v11[18 * v14];
    v16 = *(_QWORD *)v15;
    if (v10 != *(_QWORD *)v15)
    {
      v30 = 0;
      v31 = 1;
      while (v16 != -4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v16 == -8192;
        if (v32)
          v30 = v15;
        v33 = v14 + v31++;
        v14 = v33 & v13;
        v15 = &v11[18 * v14];
        v16 = *(_QWORD *)v15;
        if (v10 == *(_QWORD *)v15)
          goto LABEL_10;
      }
      if (v30)
        v15 = v30;
    }
LABEL_10:
    v17 = 0;
    v18 = 0;
    *(_QWORD *)v15 = v10;
    v19 = v15 + 2;
    v20 = v4 + 1;
    do
    {
      v21 = v17;
      v22 = &v19[4 * v18];
      v23 = v22 + 2;
      *v22 = v22 + 2;
      v22[1] = 0x200000000;
      if (v19 != v20)
      {
        v24 = &v20[4 * v18];
        v25 = *((unsigned int *)v24 + 2);
        if (*((_DWORD *)v24 + 2))
        {
          v26 = (const void *)*v24;
          if ((_QWORD *)*v24 != v24 + 2)
          {
            *v22 = v26;
            v34 = *((_DWORD *)v24 + 3);
            *((_DWORD *)v22 + 2) = v25;
            *((_DWORD *)v22 + 3) = v34;
            *v24 = v24 + 2;
            *((_DWORD *)v24 + 3) = 0;
            goto LABEL_18;
          }
          if (v25 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19[4 * v18], (uint64_t)(v22 + 2), *((unsigned int *)v24 + 2), 8);
            v27 = *((unsigned int *)v24 + 2);
            if (!(_DWORD)v27)
              goto LABEL_17;
            v26 = (const void *)*v24;
            v23 = (void *)*v22;
          }
          else
          {
            v27 = *((unsigned int *)v24 + 2);
          }
          memcpy(v23, v26, 8 * v27);
LABEL_17:
          *((_DWORD *)v22 + 2) = v25;
LABEL_18:
          *((_DWORD *)v24 + 2) = 0;
        }
      }
      v17 = 1;
      v18 = 1;
    }
    while ((v21 & 1) == 0);
    v28 = 0;
    *a1 += 2;
    do
    {
      v29 = (uint64_t *)v4[v28 + 5];
      if (&v4[v28 + 7] != v29)
        free(v29);
      v28 -= 4;
    }
    while (v28 != -8);
LABEL_24:
    v4 += 9;
  }
  while (v4 != a3);
}

uint64_t sub_1C4E28CA4(uint64_t a1)
{
  sub_1C4E28CDC(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C4E28CDC(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = (_QWORD *)(a1 + 8);
    v1 = 4;
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 16);
    if (!v1)
      return;
    v2 = *(_QWORD **)(a1 + 8);
  }
  v3 = &v2[9 * v1];
  do
  {
    if (*v2 != -4096 && *v2 != -8192)
    {
      for (i = 0; i != -8; i -= 4)
      {
        v5 = (_QWORD *)v2[i + 5];
        if (&v2[i + 7] != v5)
          free(v5);
      }
    }
    v2 += 9;
  }
  while (v2 != v3);
}

uint64_t sub_1C4E28D78(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _DWORD *v6;
  uint64_t i;
  uint64_t j;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v22;
  unint64_t v23;

  *(_QWORD *)a1 = 1;
  v6 = (_DWORD *)(a1 + 296);
  for (i = 8; i != 296; i += 72)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 296) = 1;
  for (j = 304; j != 592; j += 72)
    *(_QWORD *)(a1 + j) = -4096;
  *(_QWORD *)(a1 + 600) = a1 + 616;
  *(_QWORD *)(a1 + 608) = 0x400000000;
  sub_1C4E26068(a2, a3, a1 + 600, 1, 0);
  v9 = *(unsigned int *)(a1 + 608);
  if ((_DWORD)v9)
  {
    v10 = *(unint64_t **)(a1 + 600);
    v11 = &v10[2 * v9];
    do
    {
      v12 = *v10;
      v13 = v10[1];
      v14 = ((v13 & 4) == 0) ^ a4;
      v23 = *v10;
      v15 = &sub_1C4E28F1C((_DWORD *)a1, (uint64_t *)&v23)[4 * v14];
      v16 = v15 + 1;
      v17 = *((unsigned int *)v15 + 4);
      if (v17 >= *((unsigned int *)v15 + 5))
      {
        v22 = v15 + 1;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v15 + 1), (uint64_t)(v15 + 3), v17 + 1, 8);
        v16 = v22;
        v14 = ((v13 & 4) == 0) ^ a4;
        v17 = *((unsigned int *)v16 + 2);
      }
      *(_QWORD *)(*v16 + 8 * v17) = v13 & 0xFFFFFFFFFFFFFFF8;
      ++*((_DWORD *)v16 + 2);
      v23 = v13 & 0xFFFFFFFFFFFFFFF8;
      v18 = &sub_1C4E28F1C(v6, (uint64_t *)&v23)[4 * v14];
      v19 = v18 + 1;
      v20 = *((unsigned int *)v18 + 4);
      if (v20 >= *((unsigned int *)v18 + 5))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 1), (uint64_t)(v18 + 3), v20 + 1, 8);
        v20 = *((unsigned int *)v19 + 2);
      }
      *(_QWORD *)(*v19 + 8 * v20) = v12;
      ++*((_DWORD *)v19 + 2);
      v10 += 2;
    }
    while (v10 != v11);
  }
  *(_BYTE *)(a1 + 592) = a4;
  return a1;
}

_QWORD *sub_1C4E28F1C(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C4E28FA8((uint64_t)a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E2905C(a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *v5 = v6;
    v5[1] = v5 + 3;
    v5[2] = 0x200000000;
    v5[5] = v5 + 7;
    *((_DWORD *)v5 + 13) = 2;
  }
  return v5;
}

uint64_t sub_1C4E28FA8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 72 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 72 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E2905C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4E2911C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4E28FA8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

void sub_1C4E2911C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  unint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD v29[38];

  v29[36] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v26 = a2;
      *(_QWORD *)(a1 + 8) = operator new(72 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v26;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E293E4(a1, v6, &v6[9 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v27 = a2;
  v8 = 0;
  v9 = a1 + 8;
  v10 = v29;
  v11 = a1;
  v12 = (_QWORD *)(a1 + 8);
  do
  {
    if ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_28;
    v13 = 0;
    v14 = 0;
    *v10 = *v12;
    v15 = v10 + 1;
    v16 = v12 + 1;
    do
    {
      v17 = v13;
      v18 = &v15[4 * v14];
      v19 = v18 + 2;
      *v18 = v18 + 2;
      v18[1] = 0x200000000;
      if (v15 != v16)
      {
        v20 = &v16[4 * v14];
        v21 = *((unsigned int *)v20 + 2);
        if (*((_DWORD *)v20 + 2))
        {
          v22 = (const void *)*v20;
          if ((_QWORD *)*v20 != v20 + 2)
          {
            *v18 = v22;
            *((_DWORD *)v18 + 2) = v21;
            *((_DWORD *)v18 + 3) = *((_DWORD *)v20 + 3);
            *v20 = v20 + 2;
            *((_DWORD *)v20 + 3) = 0;
            goto LABEL_18;
          }
          if (v21 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15[4 * v14], (uint64_t)(v18 + 2), *((unsigned int *)v20 + 2), 8);
            v23 = *((unsigned int *)v20 + 2);
            if (!(_DWORD)v23)
              goto LABEL_17;
            v22 = (const void *)*v20;
            v19 = (void *)*v18;
          }
          else
          {
            v23 = *((unsigned int *)v20 + 2);
          }
          memcpy(v19, v22, 8 * v23);
LABEL_17:
          *((_DWORD *)v18 + 2) = v21;
LABEL_18:
          *((_DWORD *)v20 + 2) = 0;
        }
      }
      v13 = 1;
      v14 = 1;
    }
    while ((v17 & 1) == 0);
    for (i = 0; i != -64; i -= 32)
    {
      v25 = *(void **)(v11 + i + 48);
      if ((void *)(v11 + i + 64) != v25)
        free(v25);
    }
    v10 += 9;
LABEL_28:
    ++v8;
    v12 = (_QWORD *)(v9 + 72 * v8);
    v11 += 72;
  }
  while (v8 != 4);
  if (v27 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(72 * v27, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v27;
  }
  sub_1C4E293E4(a1, v29, v10);
}

void sub_1C4E293E4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 296);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[9 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 9;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 == a3)
    return;
  do
  {
    if ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_21;
    v25 = 0;
    sub_1C4E28FA8(a1, v4, &v25);
    v10 = 0;
    v11 = 0;
    v12 = v25;
    v13 = v4 + 1;
    *v25 = *v4;
    v14 = v12 + 1;
    do
    {
      v15 = v10;
      v16 = &v14[4 * v11];
      v17 = v16 + 2;
      *v16 = v16 + 2;
      v16[1] = 0x200000000;
      if (v14 != v13)
      {
        v18 = &v13[4 * v11];
        v19 = *((unsigned int *)v18 + 2);
        if (*((_DWORD *)v18 + 2))
        {
          v20 = (const void *)*v18;
          if ((_QWORD *)*v18 != v18 + 2)
          {
            *v16 = v20;
            v24 = *((_DWORD *)v18 + 3);
            *((_DWORD *)v16 + 2) = v19;
            *((_DWORD *)v16 + 3) = v24;
            *v18 = v18 + 2;
            *((_DWORD *)v18 + 3) = 0;
            goto LABEL_15;
          }
          if (v19 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14[4 * v11], (uint64_t)(v16 + 2), *((unsigned int *)v18 + 2), 8);
            v21 = *((unsigned int *)v18 + 2);
            if (!(_DWORD)v21)
              goto LABEL_14;
            v20 = (const void *)*v18;
            v17 = (void *)*v16;
          }
          else
          {
            v21 = *((unsigned int *)v18 + 2);
          }
          memcpy(v17, v20, 8 * v21);
LABEL_14:
          *((_DWORD *)v16 + 2) = v19;
LABEL_15:
          *((_DWORD *)v18 + 2) = 0;
        }
      }
      v10 = 1;
      v11 = 1;
    }
    while ((v15 & 1) == 0);
    v22 = 0;
    *(_DWORD *)a1 += 2;
    do
    {
      v23 = (_QWORD *)v4[v22 + 5];
      if (&v4[v22 + 7] != v23)
        free(v23);
      v22 -= 4;
    }
    while (v22 != -8);
LABEL_21:
    v4 += 9;
  }
  while (v4 != a3);
}

uint64_t sub_1C4E295AC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 600);
  if (v2 != (void *)(a1 + 616))
    free(v2);
  sub_1C4E295E8(a1 + 296);
  return sub_1C4E295E8(a1);
}

uint64_t sub_1C4E295E8(uint64_t a1)
{
  sub_1C4E29620(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C4E29620(uint64_t a1)
{
  _QWORD *v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t i;
  _QWORD *v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = (_QWORD *)(a1 + 8);
    v2 = 4;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
      return;
    v1 = *(_QWORD **)(a1 + 8);
  }
  v3 = &v1[9 * v2];
  do
  {
    if (*v1 != -4096 && *v1 != -8192)
    {
      for (i = 0; i != -8; i -= 4)
      {
        v5 = (_QWORD *)v1[i + 5];
        if (&v1[i + 7] != v5)
          free(v5);
      }
    }
    v1 += 9;
  }
  while (v1 != v3);
}

_QWORD *sub_1C4E296BC(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (_QWORD *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = v8[5];
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (_QWORD *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,false>::getRoots(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,false>::getRoot(uint64_t a1)
{
  return **(_QWORD **)(a1 + 24);
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,false>::isPostDominator()
{
  return 0;
}

void llvm::DominanceFrontierBase<llvm::BasicBlock,false>::releaseMemory(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  sub_1C61910D0(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *v2 = 0;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,false>::begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,false>::end(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

_QWORD *llvm::DominanceFrontierBase<llvm::BasicBlock,false>::find(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

uint64_t **llvm::DominanceFrontierBase<llvm::BasicBlock,false>::addBasicBlock(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t **v4;
  unint64_t v6;
  uint64_t *v7[3];

  v6 = a2;
  sub_1C4E2ACD4(v7, a3);
  v4 = sub_1C4E2AE54(a1, v6, (uint64_t)&v6);
  sub_1C47655E8((uint64_t)v7, v7[1]);
  return v4;
}

void llvm::DominanceFrontierBase<llvm::BasicBlock,false>::removeBlock(uint64_t **a1, unint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v4 = a1 + 1;
  v5 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      sub_1C4E2AF50((uint64_t **)v5 + 5, a2);
      v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (uint64_t *)v4);
  }
  sub_1C4E2B018(a1, a2);
}

uint64_t *llvm::DominanceFrontierBase<llvm::BasicBlock,false>::addToFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

uint64_t *llvm::DominanceFrontierBase<llvm::BasicBlock,false>::removeFromFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

BOOL llvm::DominanceFrontierBase<llvm::BasicBlock,false>::compareDomSet(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _BOOL8 v16;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = (uint64_t *)&v20;
  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v18 = (uint64_t *)v5[4];
      sub_1C47BC21C(&v19, (unint64_t *)&v18, &v18);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  v11 = (_QWORD *)*a2;
  v10 = a2 + 1;
  v9 = v11;
  while (v9 != v10)
  {
    v12 = (_QWORD *)v9[1];
    v13 = v9;
    if (v12)
    {
      do
      {
        v14 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v13[2];
        v8 = *v14 == (_QWORD)v13;
        v13 = v14;
      }
      while (!v8);
    }
    v15 = sub_1C4E2AF50(&v19, v9[4]);
    v9 = v14;
    if (!v15)
    {
      v16 = 1;
      goto LABEL_18;
    }
  }
  v16 = v21 != 0;
LABEL_18:
  sub_1C47655E8((uint64_t)&v19, v20);
  return v16;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_10BasicBlockELb0EE13compareDomSetERNSt3__13setIPS1_NS3_4lessIS5_EENS3_9allocatorIS5_EEEERKSA_(a1, a2, a3);
}

BOOL llvm::DominanceFrontierBase<llvm::BasicBlock,false>::compare(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t *v8;
  _BOOL8 v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v20;
  uint64_t *v21[3];
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = (uint64_t *)&v23;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_9;
  do
  {
    v20 = v3[4];
    sub_1C4E2ACD4(v21, v3 + 5);
    sub_1C4E2AE54(&v22, v20, (uint64_t)&v20);
    sub_1C47655E8((uint64_t)v21, v21[1]);
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
  }
  while (v6 != v2);
  v8 = v22;
  if (v22 == (uint64_t *)&v23)
  {
LABEL_9:
    v9 = v24 != 0;
  }
  else
  {
    v10 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v11 = (_QWORD *)*v10;
      if (!*v10)
        break;
      v12 = v8[4];
      v13 = (_QWORD *)(a1 + 8);
      do
      {
        v14 = v11[4];
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (v15)
          v13 = v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v10
        || v13[4] > v12
        || llvm::DominanceFrontierBase<llvm::BasicBlock,false>::compareDomSet(a1, v8 + 5, v13 + 5))
      {
        break;
      }
      v17 = (uint64_t *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v8[2];
          v7 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v7);
      }
      sub_1C4E2B018(&v22, v12);
      v8 = v18;
      if (v18 == (uint64_t *)&v23)
        goto LABEL_9;
    }
    v9 = 1;
  }
  sub_1C61910D0((uint64_t)&v22, v23);
  return v9;
}

llvm::Value *llvm::DominanceFrontierBase<llvm::BasicBlock,false>::print(llvm::Value *result, llvm::raw_ostream *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::Value *v9;
  _BYTE *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = (_QWORD *)((char *)result + 8);
  v3 = *(_QWORD **)result;
  if (*(llvm::Value **)result != (llvm::Value *)((char *)result + 8))
  {
    while (1)
    {
      v5 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x14uLL)
      {
        qmemcpy(v5, "  DomFrontier for BB ", 21);
        *((_QWORD *)this + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "  DomFrontier for BB ", 0x15uLL);
      }
      result = (llvm::Value *)v3[4];
      if (result)
      {
        result = (llvm::Value *)llvm::Value::printAsOperand(result, this, 0, 0);
      }
      else
      {
        v6 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0xDuLL)
        {
          qmemcpy(v6, " <<exit node>>", 14);
          *((_QWORD *)this + 4) += 14;
        }
        else
        {
          result = llvm::raw_ostream::write(this, " <<exit node>>", 0xEuLL);
        }
      }
      v7 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 4)
      {
        *(_BYTE *)(v7 + 4) = 9;
        *(_DWORD *)v7 = 980642080;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        result = llvm::raw_ostream::write(this, " is:\t", 5uLL);
      }
      v8 = (_QWORD *)v3[5];
      if (v8 != v3 + 6)
        break;
LABEL_24:
      v15 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v15 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v15 + 1;
        *v15 = 10;
      }
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v14 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v14);
      }
      v3 = v17;
      if (v17 == v2)
        return result;
    }
    while (1)
    {
      v9 = (llvm::Value *)v8[4];
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 32);
        if (v9)
        {
LABEL_12:
          result = (llvm::Value *)llvm::Value::printAsOperand(v9, this, 0, 0);
          goto LABEL_16;
        }
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 32;
        if (v9)
          goto LABEL_12;
      }
      v11 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "<<exit node>>", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "<<exit node>>", 0xDuLL);
      }
LABEL_16:
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
      if (v13 == v3 + 6)
        goto LABEL_24;
    }
  }
  return result;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_10BasicBlockELb0EE5printERNS_11raw_ostreamE(result, this);
}

llvm::Value *llvm::DominanceFrontierBase<llvm::BasicBlock,false>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return llvm::DominanceFrontierBase<llvm::BasicBlock,false>::print(a1, v2);
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,true>::getRoots(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,true>::getRoot(uint64_t a1)
{
  return **(_QWORD **)(a1 + 24);
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,true>::isPostDominator()
{
  return 1;
}

void llvm::DominanceFrontierBase<llvm::BasicBlock,true>::releaseMemory(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  sub_1C61910D0(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *v2 = 0;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,true>::begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominanceFrontierBase<llvm::BasicBlock,true>::end(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

_QWORD *llvm::DominanceFrontierBase<llvm::BasicBlock,true>::find(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
    return v2;
  return v5;
}

uint64_t **llvm::DominanceFrontierBase<llvm::BasicBlock,true>::addBasicBlock(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t **v4;
  unint64_t v6;
  uint64_t *v7[3];

  v6 = a2;
  sub_1C4E2ACD4(v7, a3);
  v4 = sub_1C4E2AE54(a1, v6, (uint64_t)&v6);
  sub_1C47655E8((uint64_t)v7, v7[1]);
  return v4;
}

void llvm::DominanceFrontierBase<llvm::BasicBlock,true>::removeBlock(uint64_t **a1, unint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;

  v4 = a1 + 1;
  v5 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      sub_1C4E2AF50((uint64_t **)v5 + 5, a2);
      v6 = (uint64_t *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != (uint64_t *)v4);
  }
  sub_1C4E2B018(a1, a2);
}

uint64_t *llvm::DominanceFrontierBase<llvm::BasicBlock,true>::addToFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

uint64_t *llvm::DominanceFrontierBase<llvm::BasicBlock,true>::removeFromFrontier(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1C4E2AF50((uint64_t **)(a2 + 40), a3);
}

BOOL llvm::DominanceFrontierBase<llvm::BasicBlock,true>::compareDomSet(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  _BOOL8 v16;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = (uint64_t *)&v20;
  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v18 = (uint64_t *)v5[4];
      sub_1C47BC21C(&v19, (unint64_t *)&v18, &v18);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  v11 = (_QWORD *)*a2;
  v10 = a2 + 1;
  v9 = v11;
  while (v9 != v10)
  {
    v12 = (_QWORD *)v9[1];
    v13 = v9;
    if (v12)
    {
      do
      {
        v14 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v13[2];
        v8 = *v14 == (_QWORD)v13;
        v13 = v14;
      }
      while (!v8);
    }
    v15 = sub_1C4E2AF50(&v19, v9[4]);
    v9 = v14;
    if (!v15)
    {
      v16 = 1;
      goto LABEL_18;
    }
  }
  v16 = v21 != 0;
LABEL_18:
  sub_1C47655E8((uint64_t)&v19, v20);
  return v16;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_10BasicBlockELb1EE13compareDomSetERNSt3__13setIPS1_NS3_4lessIS5_EENS3_9allocatorIS5_EEEERKSA_(a1, a2, a3);
}

BOOL llvm::DominanceFrontierBase<llvm::BasicBlock,true>::compare(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t *v8;
  _BOOL8 v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v20;
  uint64_t *v21[3];
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;

  v23 = 0;
  v24 = 0;
  v22 = (uint64_t *)&v23;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_9;
  do
  {
    v20 = v3[4];
    sub_1C4E2ACD4(v21, v3 + 5);
    sub_1C4E2AE54(&v22, v20, (uint64_t)&v20);
    sub_1C47655E8((uint64_t)v21, v21[1]);
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
  }
  while (v6 != v2);
  v8 = v22;
  if (v22 == (uint64_t *)&v23)
  {
LABEL_9:
    v9 = v24 != 0;
  }
  else
  {
    v10 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v11 = (_QWORD *)*v10;
      if (!*v10)
        break;
      v12 = v8[4];
      v13 = (_QWORD *)(a1 + 8);
      do
      {
        v14 = v11[4];
        v15 = v14 >= v12;
        if (v14 >= v12)
          v16 = v11;
        else
          v16 = v11 + 1;
        if (v15)
          v13 = v11;
        v11 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v10
        || v13[4] > v12
        || llvm::DominanceFrontierBase<llvm::BasicBlock,true>::compareDomSet(a1, v8 + 5, v13 + 5))
      {
        break;
      }
      v17 = (uint64_t *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v8[2];
          v7 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v7);
      }
      sub_1C4E2B018(&v22, v12);
      v8 = v18;
      if (v18 == (uint64_t *)&v23)
        goto LABEL_9;
    }
    v9 = 1;
  }
  sub_1C61910D0((uint64_t)&v22, v23);
  return v9;
}

llvm::Value *llvm::DominanceFrontierBase<llvm::BasicBlock,true>::print(llvm::Value *result, llvm::raw_ostream *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::Value *v9;
  _BYTE *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = (_QWORD *)((char *)result + 8);
  v3 = *(_QWORD **)result;
  if (*(llvm::Value **)result != (llvm::Value *)((char *)result + 8))
  {
    while (1)
    {
      v5 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x14uLL)
      {
        qmemcpy(v5, "  DomFrontier for BB ", 21);
        *((_QWORD *)this + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(this, "  DomFrontier for BB ", 0x15uLL);
      }
      result = (llvm::Value *)v3[4];
      if (result)
      {
        result = (llvm::Value *)llvm::Value::printAsOperand(result, this, 0, 0);
      }
      else
      {
        v6 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0xDuLL)
        {
          qmemcpy(v6, " <<exit node>>", 14);
          *((_QWORD *)this + 4) += 14;
        }
        else
        {
          result = llvm::raw_ostream::write(this, " <<exit node>>", 0xEuLL);
        }
      }
      v7 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 4)
      {
        *(_BYTE *)(v7 + 4) = 9;
        *(_DWORD *)v7 = 980642080;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        result = llvm::raw_ostream::write(this, " is:\t", 5uLL);
      }
      v8 = (_QWORD *)v3[5];
      if (v8 != v3 + 6)
        break;
LABEL_24:
      v15 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v15 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v15 + 1;
        *v15 = 10;
      }
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v14 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v14);
      }
      v3 = v17;
      if (v17 == v2)
        return result;
    }
    while (1)
    {
      v9 = (llvm::Value *)v8[4];
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 32);
        if (v9)
        {
LABEL_12:
          result = (llvm::Value *)llvm::Value::printAsOperand(v9, this, 0, 0);
          goto LABEL_16;
        }
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 32;
        if (v9)
          goto LABEL_12;
      }
      v11 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v11 > 0xCuLL)
      {
        qmemcpy(v11, "<<exit node>>", 13);
        *((_QWORD *)this + 4) += 13;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "<<exit node>>", 0xDuLL);
      }
LABEL_16:
      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
      if (v13 == v3 + 6)
        goto LABEL_24;
    }
  }
  return result;
}

{
  return __ZNK4llvm21DominanceFrontierBaseINS_10BasicBlockELb1EE5printERNS_11raw_ostreamE(result, this);
}

llvm::Value *llvm::DominanceFrontierBase<llvm::BasicBlock,true>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return llvm::DominanceFrontierBase<llvm::BasicBlock,true>::print(a1, v2);
}

uint64_t **llvm::ForwardDominanceFrontierBase<llvm::BasicBlock>::analyze(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;

  v4 = **(_QWORD **)a2;
  *(_DWORD *)(a1 + 32) = 0;
  if (*(_DWORD *)(a1 + 36))
  {
    v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, a1 + 40, 1uLL, 8);
    v5 = *(unsigned int *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v5) = v4;
  ++*(_DWORD *)(a1 + 32);
  v6 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v6)
    goto LABEL_12;
  v7 = **(_QWORD **)(a1 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  LODWORD(v9) = ((v7 >> 4) ^ (v7 >> 9)) & (v6 - 1);
  v10 = (uint64_t *)(v8 + 16 * v9);
  v11 = *v10;
  if (v7 != *v10)
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v6 - 1);
      v11 = *(_QWORD *)(v8 + 16 * v9);
      if (v7 == v11)
      {
        v10 = (uint64_t *)(v8 + 16 * v9);
        goto LABEL_10;
      }
    }
    goto LABEL_12;
  }
LABEL_10:
  if (v10 == (uint64_t *)(v8 + 16 * v6))
  {
LABEL_12:
    v14 = 0;
    return llvm::ForwardDominanceFrontierBase<llvm::BasicBlock>::calculate((uint64_t **)a1, a2, v14);
  }
  v14 = (uint64_t *)v10[1];
  return llvm::ForwardDominanceFrontierBase<llvm::BasicBlock>::calculate((uint64_t **)a1, a2, v14);
}

{
  return __ZN4llvm28ForwardDominanceFrontierBaseINS_10BasicBlockEE7analyzeERNS_17DominatorTreeBaseIS1_Lb0EEE(a1, a2);
}

uint64_t **llvm::ForwardDominanceFrontierBase<llvm::BasicBlock>::calculate(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **result;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  uint64_t *Successor;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t *v54;
  int v55;
  int v56;
  uint64_t *v57;
  BOOL v58;
  unsigned int v60;
  uint64_t *v61;
  uint64_t **v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t **v65;
  uint64_t **v67;
  uint64_t **v68;
  uint64_t *__p;
  char *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int v77;
  _BYTE v78[264];

  v5 = *a3;
  v74 = v78;
  v75 = v78;
  v76 = 32;
  v77 = 0;
  v6 = (uint64_t *)operator new(0x20uLL);
  v7 = v6 + 4;
  *v6 = v5;
  v6[1] = 0;
  v6[2] = (uint64_t)a3;
  v6[3] = 0;
  v70 = (char *)(v6 + 4);
  do
  {
    __p = v6;
    v73 = 0;
    v8 = (uint64_t *)*(v7 - 4);
    v72 = 0;
    v73 = v8;
    v9 = (uint64_t *)*(v7 - 3);
    v72 = v9;
    v10 = *(v7 - 2);
    v11 = *(v7 - 1);
    v65 = sub_1C4E2B0E8(a1, (unint64_t)v8, &v73);
    v68 = v65 + 5;
    result = (uint64_t **)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v74, (uint64_t)v8);
    if (v13)
    {
      v14 = (uint64_t *)v8[5];
      if (v14 != v8 + 5)
      {
        if (v14)
          v15 = v14 - 3;
        else
          v15 = 0;
        if (*((_BYTE *)v15 + 16) != 30)
        {
          v16 = 2;
          switch(*((_BYTE *)v15 + 16))
          {
            case 0x1E:
              __break(1u);
              return result;
            case 0x1F:
              v16 = (*((_DWORD *)v15 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_95;
            case 0x20:
            case 0x26:
              v16 = (*((_DWORD *)v15 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_95;
            case 0x21:
              goto LABEL_11;
            case 0x24:
              v16 = *((_WORD *)v15 + 9) & 1;
              goto LABEL_95;
            case 0x25:
              v16 = 1;
              goto LABEL_11;
            case 0x27:
              v16 = *((_DWORD *)v15 + 20) + 1;
LABEL_95:
              if (!v16)
                goto LABEL_22;
              goto LABEL_11;
            default:
              goto LABEL_22;
          }
        }
        if ((*((_DWORD *)v15 + 5) & 0x7FFFFFF) == 3)
          v16 = 2;
        else
          v16 = 1;
LABEL_11:
        v17 = 0;
        while (1)
        {
          v71 = 0;
          Successor = (uint64_t *)llvm::Instruction::getSuccessor((llvm::Instruction *)v15, v17);
          v71 = Successor;
          v19 = *(_QWORD *)(a2 + 24);
          v20 = *(unsigned int *)(a2 + 40);
          if (!(_DWORD)v20)
            goto LABEL_18;
          LODWORD(v21) = ((Successor >> 4) ^ (Successor >> 9)) & (v20 - 1);
          v22 = (uint64_t **)(v19 + 16 * v21);
          v23 = *v22;
          if (Successor != *v22)
            break;
LABEL_19:
          if (v22[1][1] != v10)
            sub_1C47BC21C(v68, (unint64_t *)&v71, &v71);
          if (v16 == ++v17)
            goto LABEL_22;
        }
        v24 = 1;
        while (v23 != (uint64_t *)-4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v23 = *(uint64_t **)(v19 + 16 * v21);
          if (Successor == v23)
          {
            v22 = (uint64_t **)(v19 + 16 * v21);
            goto LABEL_19;
          }
        }
LABEL_18:
        v22 = (uint64_t **)(v19 + 16 * v20);
        goto LABEL_19;
      }
    }
LABEL_22:
    v26 = *(unsigned int *)(v10 + 32);
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = *(uint64_t ***)(v10 + 24);
      v29 = &v28[v26];
      v67 = v29;
      do
      {
        v30 = *v28;
        v31 = **v28;
        v32 = (char *)sub_1C477672C((uint64_t)&v74, v31);
        if (v75 == v74)
          v33 = (uint64_t *)((char *)&v76 + 4);
        else
          v33 = &v76;
        if (v32 == &v75[8 * *(unsigned int *)v33])
        {
          v34 = a2;
          v35 = v11;
          v36 = v73;
          if (v7 >= (uint64_t *)v70)
          {
            v37 = ((char *)v7 - (char *)__p) >> 5;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 59)
              abort();
            if ((v70 - (char *)__p) >> 4 > v38)
              v38 = (v70 - (char *)__p) >> 4;
            if ((unint64_t)(v70 - (char *)__p) >= 0x7FFFFFFFFFFFFFE0)
              v39 = 0x7FFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
            {
              if (v39 >> 59)
                sub_1C4764EE4();
              v40 = (char *)operator new(32 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = (uint64_t *)&v40[32 * v37];
            *v41 = v31;
            v41[1] = (uint64_t)v36;
            v41[2] = (uint64_t)v30;
            v41[3] = v10;
            if (v7 == __p)
            {
              v44 = v7;
              v42 = &v40[32 * v37];
              v11 = v35;
            }
            else
            {
              v42 = &v40[32 * v37];
              v11 = v35;
              do
              {
                v43 = *((_OWORD *)v7 - 1);
                *((_OWORD *)v42 - 2) = *((_OWORD *)v7 - 2);
                *((_OWORD *)v42 - 1) = v43;
                v42 -= 32;
                v7 -= 4;
              }
              while (v7 != __p);
              v44 = __p;
            }
            a2 = v34;
            __p = (uint64_t *)v42;
            v70 = &v40[32 * v39];
            v7 = v41 + 4;
            v29 = v67;
            if (v44)
              operator delete(v44);
            v27 = 1;
          }
          else
          {
            *v7 = v31;
            v7[1] = (uint64_t)v36;
            v7[2] = (uint64_t)v30;
            v7[3] = v10;
            v7 += 4;
            v27 = 1;
            v11 = v35;
            a2 = v34;
            v29 = v67;
          }
        }
        ++v28;
      }
      while (v28 != v29);
      if ((v27 & 1) != 0)
      {
        v6 = __p;
        continue;
      }
      v45 = v72;
      v6 = __p;
      if (!v72)
        goto LABEL_101;
    }
    else
    {
      v6 = __p;
      v45 = v9;
      if (!v9)
        goto LABEL_101;
    }
    v46 = (uint64_t **)v65[5];
    v47 = sub_1C4E2B0E8(a1, (unint64_t)v45, &v72);
    if (v46 != v65 + 6)
    {
      v48 = v47 + 5;
      while (1)
      {
        v49 = v46[4];
        v50 = *(unsigned int *)(a2 + 40);
        if (!(_DWORD)v50)
          goto LABEL_76;
        v51 = *(_QWORD *)(a2 + 24);
        LODWORD(v52) = ((v49 >> 4) ^ (v49 >> 9)) & (v50 - 1);
        v53 = (uint64_t **)(v51 + 16 * v52);
        v54 = *v53;
        if (v49 != *v53)
          break;
LABEL_62:
        if (v53 == (uint64_t **)(v51 + 16 * v50))
          goto LABEL_76;
        v57 = v53[1];
        v58 = (uint64_t *)v11 == v57 || v11 == 0;
        if (v58 || v57 == 0)
          goto LABEL_76;
        if (v57[1] != v11)
        {
          if (*(uint64_t **)(v11 + 8) == v57)
            goto LABEL_76;
          v60 = *(_DWORD *)(v11 + 16);
          if (v60 >= *((_DWORD *)v57 + 4))
            goto LABEL_76;
          if (!*(_BYTE *)(a2 + 64))
          {
            v63 = *(_DWORD *)(a2 + 68) + 1;
            *(_DWORD *)(a2 + 68) = v63;
            if (v63 <= 0x20)
            {
              do
              {
                v64 = v57;
                v57 = (uint64_t *)v57[1];
              }
              while (v57 && *((_DWORD *)v57 + 4) >= v60);
              if (v64 == (uint64_t *)v11)
                goto LABEL_77;
              goto LABEL_76;
            }
            llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a2);
          }
          if (*((_DWORD *)v57 + 18) < *(_DWORD *)(v11 + 72) || *((_DWORD *)v57 + 19) > *(_DWORD *)(v11 + 76))
            goto LABEL_76;
        }
LABEL_77:
        v61 = v46[1];
        if (v61)
        {
          do
          {
            v62 = (uint64_t **)v61;
            v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = (uint64_t **)v46[2];
            v58 = *v62 == (uint64_t *)v46;
            v46 = v62;
          }
          while (!v58);
        }
        v46 = v62;
        if (v62 == v65 + 6)
          goto LABEL_90;
      }
      v55 = 1;
      while (v54 != (uint64_t *)-4096)
      {
        v56 = v52 + v55++;
        v52 = v56 & (v50 - 1);
        v54 = *(uint64_t **)(v51 + 16 * v52);
        if (v49 == v54)
        {
          v53 = (uint64_t **)(v51 + 16 * v52);
          goto LABEL_62;
        }
      }
LABEL_76:
      sub_1C47BC21C(v48, (unint64_t *)v46 + 4, v46 + 4);
      goto LABEL_77;
    }
LABEL_90:
    v7 -= 4;
  }
  while (v6 != v7);
  v68 = 0;
LABEL_101:
  if (v75 != v74)
    free(v75);
  if (v6)
    operator delete(v6);
  return v68;
}

{
  return __ZN4llvm28ForwardDominanceFrontierBaseINS_10BasicBlockEE9calculateERKNS_17DominatorTreeBaseIS1_Lb0EEEPKNS_15DomTreeNodeBaseIS1_EE(a1, a2, a3);
}

uint64_t sub_1C4E2AC30(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Dominance Frontier Construction";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "domfrontier";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::DominanceFrontierWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::DominanceFrontierWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *llvm::DominanceFrontierPrinterPass::DominanceFrontierPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t **sub_1C4E2ACD4(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  a1[1] = 0;
  v3 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = v5[4];
      v7 = a1[1];
      v8 = v3;
      if (*a1 == v3)
        goto LABEL_8;
      v9 = a1[1];
      v10 = v3;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      if (v8[4] < v6)
      {
LABEL_8:
        if (v7)
          v12 = (uint64_t **)v8;
        else
          v12 = (uint64_t **)v3;
        if (v7)
          v13 = (uint64_t **)(v8 + 1);
        else
          v13 = (uint64_t **)v3;
        if (*v13)
          goto LABEL_27;
      }
      else
      {
        v13 = (uint64_t **)v3;
        v12 = (uint64_t **)v3;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v7;
              v14 = v7[4];
              if (v14 <= v6)
                break;
              v7 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_23;
            }
            if (v14 >= v6)
              goto LABEL_27;
            v7 = v12[1];
            if (!v7)
            {
              v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      v15 = (uint64_t *)operator new(0x28uLL);
      v15[4] = v6;
      *v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v12;
      *v13 = v15;
      v16 = (uint64_t *)**a1;
      if (v16)
      {
        *a1 = v16;
        v17 = *v13;
      }
      else
      {
        v17 = v15;
      }
      sub_1C4768E74(a1[1], v17);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v11 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v11);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

uint64_t **sub_1C4E2AE54(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x40uLL);
    v10 = v9;
    v11 = (_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 16);
    v9[2] = *(_OWORD *)a3;
    *((_QWORD *)v9 + 6) = v12;
    v13 = (char *)(v9 + 3);
    v14 = *(_QWORD *)(a3 + 24);
    *((_QWORD *)v9 + 7) = v14;
    if (v14)
    {
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(a3 + 8) = v11;
      *v11 = 0;
      *(_QWORD *)(a3 + 24) = 0;
    }
    else
    {
      *((_QWORD *)v9 + 5) = v13;
    }
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v15 = (uint64_t *)**a1;
    v16 = (uint64_t *)v9;
    if (v15)
    {
      *a1 = v15;
      v16 = *v6;
    }
    sub_1C4768E74(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

uint64_t *sub_1C4E2AF50(uint64_t **a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = result;
    v6 = v4;
    do
    {
      v7 = v5[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v5;
      else
        v9 = (uint64_t **)(v5 + 1);
      if (v8)
        v6 = v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 == v4 || v6[4] > a2)
    {
      return 0;
    }
    else
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v6;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6)
        *a1 = v11;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_1C485B6E0(result, v6);
      operator delete(v6);
      return (uint64_t *)1;
    }
  }
  return result;
}

void sub_1C4E2B018(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    v5 = v3;
    v6 = v4;
    do
    {
      v7 = v5[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v5;
      else
        v9 = (uint64_t **)(v5 + 1);
      if (v8)
        v6 = v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != v4 && v6[4] <= a2)
    {
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v12 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v11 = v6;
        do
        {
          v12 = (uint64_t *)v11[2];
          v13 = *v12 == (_QWORD)v11;
          v11 = v12;
        }
        while (!v13);
      }
      if (*a1 == v6)
        *a1 = v12;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_1C485B6E0(v3, v6);
      sub_1C47655E8((uint64_t)(v6 + 5), (_QWORD *)v6[6]);
      operator delete(v6);
    }
  }
}

uint64_t **sub_1C4E2B0E8(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    v10 = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v10;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

llvm::Value *llvm::classifyEHPersonality(llvm::Value *this, const llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value **v8;
  llvm::Value *v9;
  int v10;
  int v11;
  uint64_t v12;
  llvm::Value *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v25;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (this)
  {
    v2 = llvm::Value::stripPointerCasts(this);
    if (*((unsigned __int8 *)v2 + 16) > 3u)
      return 0;
    v3 = *((_QWORD *)v2 + 3);
    if (!v3 || *(_BYTE *)(v3 + 8) != 14)
      return 0;
    if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
    {
LABEL_94:
      v12 = 0;
LABEL_123:
      if ((v12 & 0x300000000) != 0)
        return (llvm::Value *)v12;
      else
        return 0;
    }
    v4 = ***(_QWORD ***)v2;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v8 = (llvm::Value **)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == v2)
        goto LABEL_15;
      v10 = 1;
      while (v9 != (llvm::Value *)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(llvm::Value **)(v5 + 16 * v7);
        if (v9 == v2)
        {
          v8 = (llvm::Value **)(v5 + 16 * v7);
          goto LABEL_15;
        }
      }
    }
    v8 = (llvm::Value **)(v5 + 16 * v6);
LABEL_15:
    v12 = 0;
    v13 = v8[1];
    switch(*(_QWORD *)v13)
    {
      case 0x10:
        if (*((_QWORD *)v13 + 2) == 0x5F7470656378655FLL && *((_QWORD *)v13 + 3) == 0x3372656C646E6168)
        {
          v12 = 0x100000007;
        }
        else
        {
          v16 = *((_QWORD *)v13 + 2);
          v15 = *((_QWORD *)v13 + 3);
          if (v16 != 0x5F7470656378655FLL || v15 != 0x3472656C646E6168)
            goto LABEL_94;
          v12 = 0x100000007;
        }
        break;
      case 0x12:
        v18 = *((_QWORD *)v13 + 2);
        v19 = *((_QWORD *)v13 + 3);
        v20 = *((unsigned __int16 *)v13 + 16);
        if (v18 != 0x6172467878435F5FLL || v19 != 0x656C646E6148656DLL || v20 != 13170)
          goto LABEL_94;
        v12 = 0x100000009;
        break;
      case 0x13:
        if (*((_QWORD *)v13 + 2) != 0x43737365636F7250
          || *((_QWORD *)v13 + 3) != 0x747065637845524CLL
          || *(_QWORD *)((char *)v13 + 27) != 0x6E6F697470656378)
        {
          v25 = *((_QWORD *)v13 + 2) ^ 0x5F68655F74737572 | *((_QWORD *)v13 + 3) ^ 0x6C616E6F73726570 | *(_QWORD *)((char *)v13 + 27) ^ 0x7974696C616E6F73;
          v12 = 0x10000000BLL;
          goto LABEL_110;
        }
        v12 = 0x10000000ALL;
        break;
      case 0x14:
        v12 = 0x100000002;
        if (*((_QWORD *)v13 + 2) == 0x65705F7878675F5FLL
          && *((_QWORD *)v13 + 3) == 0x74696C616E6F7372
          && *((_DWORD *)v13 + 8) == 813064057)
        {
          goto LABEL_116;
        }
        if (*((_QWORD *)v13 + 2) != 0x65705F6363675F5FLL
          || *((_QWORD *)v13 + 3) != 0x74696C616E6F7372
          || *((_DWORD *)v13 + 8) != 813064057)
        {
          v30 = *((_QWORD *)v13 + 2);
          v31 = *((_QWORD *)v13 + 3);
          v32 = *((_DWORD *)v13 + 8);
          if (v30 != 0x636570735F435F5FLL || v31 != 0x6E61685F63696669 || v32 != 1919249508)
            goto LABEL_94;
          v12 = 0x100000008;
        }
        break;
      case 0x15:
        if (*((_QWORD *)v13 + 2) == 0x655F74616E675F5FLL
          && *((_QWORD *)v13 + 3) == 0x6E6F737265705F68
          && *(_QWORD *)((char *)v13 + 29) == 0x7974696C616E6F73)
        {
          v12 = 0x100000001;
        }
        else if (*((_QWORD *)v13 + 2) == 0x65705F7878675F5FLL
               && *((_QWORD *)v13 + 3) == 0x74696C616E6F7372
               && *(_QWORD *)((char *)v13 + 29) == 0x306A735F7974696CLL)
        {
          v12 = 0x100000005;
        }
        else if (*((_QWORD *)v13 + 2) == 0x65705F6363675F5FLL
               && *((_QWORD *)v13 + 3) == 0x74696C616E6F7372
               && *(_QWORD *)((char *)v13 + 29) == 0x306A735F7974696CLL)
        {
          v12 = 0x100000003;
        }
        else
        {
          v41 = *((_QWORD *)v13 + 2);
          v42 = *((_QWORD *)v13 + 3);
          v43 = *(_QWORD *)((char *)v13 + 29);
          if (v41 != 0x705F636A626F5F5FLL || v42 != 0x696C616E6F737265 || v43 != 0x30765F7974696C61)
            goto LABEL_94;
          v12 = 0x100000006;
        }
        break;
      case 0x16:
        v12 = 0x100000002;
        if (*((_QWORD *)v13 + 2) == 0x65705F7878675F5FLL
          && *((_QWORD *)v13 + 3) == 0x74696C616E6F7372
          && *(_QWORD *)((char *)v13 + 30) == 0x306865735F797469)
        {
LABEL_116:
          v12 = 0x100000004;
        }
        else if (*((_QWORD *)v13 + 2) != 0x65705F6363675F5FLL
               || *((_QWORD *)v13 + 3) != 0x74696C616E6F7372
               || *(_QWORD *)((char *)v13 + 30) != 0x306865735F797469)
        {
          v25 = *((_QWORD *)v13 + 2) ^ 0x5F7878636C785F5FLL | *((_QWORD *)v13 + 3) ^ 0x6C616E6F73726570 | *(_QWORD *)((char *)v13 + 30) ^ 0x31765F7974696C61;
          v12 = 0x10000000DLL;
LABEL_110:
          if (v25)
            v12 = 0;
        }
        break;
      case 0x19:
        if (*((_QWORD *)v13 + 2) ^ 0x61775F7878675F5FLL | *((_QWORD *)v13 + 3) ^ 0x6F737265705F6D73 | *((_QWORD *)v13 + 4) ^ 0x765F7974696C616ELL | *((unsigned __int8 *)v13 + 40) ^ 0x30)
          v12 = 0;
        else
          v12 = 0x10000000CLL;
        break;
      default:
        goto LABEL_123;
    }
    goto LABEL_123;
  }
  return this;
}

void llvm::colorEHFunclets(llvm *this@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unsigned int j;
  uint64_t Successor;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[34];

  v41[32] = *MEMORY[0x1E0C80C00];
  v38 = v41;
  v40 = 16;
  v4 = *((_QWORD *)this + 10);
  if (v4)
    v5 = v4 - 24;
  else
    v5 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v41[0] = v5;
  v41[1] = v5;
  v6 = 1;
  do
  {
    while (1)
    {
      v37 = 0;
      v7 = (char *)v38 + 16 * v6;
      v8 = *((_QWORD *)v7 - 2);
      v9 = *((_QWORD *)v7 - 1);
      v39 = v6 - 1;
      v37 = v8;
      for (i = *(_QWORD *)(v8 + 48); ; i = *(_QWORD *)(i + 8))
      {
        v11 = i - 24;
        if (!i)
          v11 = 0;
        if (*(_BYTE *)(v11 + 16) != 83)
          break;
      }
      v12 = *(unsigned __int8 *)(i - 8) - 38;
      v13 = v12 > 0x38;
      v14 = (1 << v12) & 0x100060000000001;
      if (!v13 && v14 != 0)
        v9 = v8;
      v16 = sub_1C61912D8((uint64_t *)a3, &v37);
      v19 = v16[1];
      v17 = (uint64_t)(v16 + 1);
      v18 = v19;
      if ((v19 & 4) != 0)
      {
        v21 = *(_QWORD **)(v18 & 0xFFFFFFFFFFFFFFF8);
        v20 = &v21[*(unsigned int *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8)];
      }
      else
      {
        v20 = (_QWORD *)(v17 + 8 * (v18 > 7));
        v21 = (_QWORD *)v17;
      }
      if (v21 != v20)
      {
        while (*v21 != v9)
        {
          if (++v21 == v20)
          {
            v21 = v20;
            break;
          }
        }
      }
      if ((v18 & 4) != 0)
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
      else
        v22 = v17 + 8 * (v18 > 7);
      if (v21 != (_QWORD *)v22)
        goto LABEL_26;
      sub_1C619116C(v17, v9);
      v23 = *(_QWORD *)(v37 + 40);
      if (v23 == v37 + 40)
        goto LABEL_26;
      v24 = v23 ? v23 - 24 : 0;
      v25 = *(unsigned __int8 *)(v24 + 16);
      v26 = (v25 - 40) >= 0xFFFFFFF5 ? v24 : 0;
      if (v23)
      {
        if (*(_BYTE *)(v26 + 16) == 37 && (v25 - 40) >= 0xFFFFFFF5)
          break;
      }
      if ((v25 - 29) <= 0xA)
        goto LABEL_48;
LABEL_26:
      v6 = v39;
      if (!v39)
        goto LABEL_59;
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v26 - 64) - 32);
    v29 = *(_DWORD *)(v28 + 20);
    if ((v29 & 0x40000000) != 0)
      v30 = *(uint64_t **)(v28 - 8);
    else
      v30 = (uint64_t *)(v28 - 32 * (v29 & 0x7FFFFFF));
    v31 = *v30;
    v9 = v5;
    if (*(_BYTE *)(v31 + 16) != 20)
      v9 = *(_QWORD *)(v31 + 40);
LABEL_48:
    if (v25 != 30)
      __asm { BR              X9 }
    if ((*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 3)
      v32 = 2;
    else
      v32 = 1;
    for (j = 0; j != v32; ++j)
    {
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v24, j);
      v35 = v39;
      if (v39 >= (unint64_t)v40)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v41, v39 + 1, 16);
        v35 = v39;
      }
      v36 = (uint64_t *)((char *)v38 + 16 * v35);
      *v36 = Successor;
      v36[1] = v9;
      v6 = ++v39;
    }
  }
  while (v6);
LABEL_59:
  if (v38 != v41)
    free(v38);
}

_QWORD *sub_1C4E2BA74(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61913E4((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::FunctionPropertiesInfo::getFunctionPropertiesInfo@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t i;
  uint64_t v27;
  int v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  unsigned int v37;

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = 0;
    do
    {
      ++v4;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a3 + 16) = v4 + ((*(_DWORD *)(result + 32) & 0xFu) - 9 < 0xFFFFFFFE);
  v5 = result + 72;
  v6 = *(_QWORD *)(result + 80);
  if (v6 != result + 72)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *a2;
    result = *((unsigned int *)a2 + 4);
    v14 = result - 1;
    while (1)
    {
      v15 = v6 - 24;
      if (!v6)
        v15 = 0;
      v16 = *(_QWORD *)(v15 + 40);
      if (v16 != v15 + 40)
      {
        v17 = v16 - 24;
        if (!v16)
          v17 = 0;
        v18 = *(unsigned __int8 *)(v17 + 16) - 40;
        if (v18 < 0xFFFFFFF5)
          v17 = 0;
        v19 = *(unsigned __int8 *)(v17 + 16);
        if (!v16 || (v19 == 30 ? (v20 = v18 >= 0xFFFFFFF5) : (v20 = 0), !v20))
        {
          if (!v16)
            goto LABEL_34;
          if (v19 != 31 || v18 < 0xFFFFFFF5)
            goto LABEL_34;
          v23 = *(_DWORD *)(v17 + 20);
          if ((v23 & 0x40000000) != 0)
            v24 = *(_QWORD *)(v17 - 8);
          else
            v24 = v17 - 32 * (v23 & 0x7FFFFFF);
          v25 = ((v23 >> 1) & 0x3FFFFFF) - 1;
          if (*(_QWORD *)(v24 + 32))
            v21 = v25 + 1;
          else
            v21 = v25;
          goto LABEL_33;
        }
        if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 3)
        {
          v21 = 2;
LABEL_33:
          v8 += v21;
          *(_QWORD *)(a3 + 8) = v8;
        }
      }
LABEL_34:
      for (i = *(_QWORD *)(v15 + 48); i != v15 + 40; i = *(_QWORD *)(i + 8))
      {
        v27 = i - 24;
        if (!i)
          v27 = 0;
        v28 = *(unsigned __int8 *)(v27 + 16);
        if ((v28 - 33) <= 0x33 && ((1 << (v28 - 33)) & 0x8000000000041) != 0)
        {
          v30 = *(_QWORD *)(i - 56);
          if (v30)
          {
            if (!*(_BYTE *)(v30 + 16) && *(_QWORD *)(v30 + 24) == *(_QWORD *)(i + 48))
            {
              v31 = *(_DWORD *)(v30 + 32);
              if ((v31 & 0x2000) == 0 && ((v31 & 0x800000) != 0 || *(_QWORD *)(v30 + 72) != v30 + 72))
                *(_QWORD *)(a3 + 24) = ++v9;
            }
          }
        }
        if (v28 == 61)
        {
          *(_QWORD *)(a3 + 40) = ++v10;
        }
        else if (v28 == 60)
        {
          *(_QWORD *)(a3 + 32) = ++v11;
        }
      }
      if ((_DWORD)result)
      {
        v32 = v14 & ((v15 >> 4) ^ (v15 >> 9));
        v33 = *(_QWORD *)(v13 + 16 * v32);
        if (v15 == v33)
        {
LABEL_59:
          v36 = *(_QWORD **)(v13 + 16 * v32 + 8);
          if (v36)
          {
            v37 = 0;
            do
            {
              v36 = (_QWORD *)*v36;
              ++v37;
            }
            while (v36);
            goto LABEL_64;
          }
        }
        else
        {
          v34 = 1;
          while (v33 != -4096)
          {
            v35 = v32 + v34++;
            v32 = v35 & v14;
            v33 = *(_QWORD *)(v13 + 16 * v32);
            if (v15 == v33)
              goto LABEL_59;
          }
        }
      }
      v37 = 0;
LABEL_64:
      if (v12 < v37)
      {
        v12 = v37;
        *(_QWORD *)(a3 + 48) = v37;
      }
      ++v7;
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v5)
      {
        *(_QWORD *)a3 = v7;
        break;
      }
    }
  }
  *(_QWORD *)(a3 + 56) = (a2[4] - a2[3]) >> 3;
  return result;
}

void llvm::GlobalsAAResult::DeletionCallbackHandle::deleted(llvm::GlobalsAAResult::DeletionCallbackHandle *this)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int32x2_t *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  int32x2_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  int32x2_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  _QWORD *v65;

  v2 = *((_QWORD *)this + 3);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (*(_BYTE *)(v2 + 16))
    v4 = 0;
  else
    v4 = (_QWORD *)*((_QWORD *)this + 3);
  v65 = v4;
  if (v4)
  {
    sub_1C4E2C274((int32x2_t *)(*((_QWORD *)this + 4) + 272), &v65);
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3 <= 3)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = sub_1C477672C(v5 + 48, v2);
    v7 = *(_QWORD *)(v5 + 56);
    v8 = 64;
    if (v7 == *(_QWORD *)(v5 + 48))
      v8 = 68;
    if (v6 != (_QWORD *)(v7 + 8 * *(unsigned int *)(v5 + v8)))
    {
      *v6 = -2;
      ++*(_DWORD *)(v5 + 72);
      v9 = *((_QWORD *)this + 4);
      v10 = sub_1C477672C(v9 + 152, v2);
      v11 = *(_QWORD *)(v9 + 160);
      v12 = 168;
      if (v11 == *(_QWORD *)(v9 + 152))
        v12 = 172;
      if (v10 != (_QWORD *)(v11 + 8 * *(unsigned int *)(v9 + v12)))
      {
        *v10 = -2;
        ++*(_DWORD *)(v9 + 176);
        v13 = *((_QWORD *)this + 4);
        v14 = *(_DWORD *)(v13 + 256);
        v15 = *(_QWORD **)(v13 + 248);
        v16 = *(unsigned int *)(v13 + 264);
        v17 = &v15[2 * v16];
        if (v14)
        {
          if ((_DWORD)v16)
          {
            v18 = 16 * v16;
            v19 = v15;
            while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v19 += 2;
              v18 -= 16;
              if (!v18)
                goto LABEL_18;
            }
          }
          else
          {
            v19 = v15;
          }
        }
        else
        {
LABEL_18:
          v19 = &v15[2 * v16];
        }
        v20 = &v15[2 * v16];
        while (v19 != v20)
        {
          if (v19[1] == v2)
          {
            v21 = (int32x2_t *)*((_QWORD *)this + 4);
            *v19 = -8192;
            v21[32] = vadd_s32(v21[32], (int32x2_t)0x1FFFFFFFFLL);
          }
          v22 = v19 + 2;
          v19 = v17;
          if (v22 != v17)
          {
            v19 = v22;
            while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v19 += 2;
              if (v19 == v17)
              {
                v19 = v17;
                break;
              }
            }
          }
        }
      }
      v23 = *((_QWORD *)this + 4);
      v24 = *(_DWORD *)(v23 + 280);
      v25 = *(_QWORD **)(v23 + 272);
      v26 = *(unsigned int *)(v23 + 288);
      v27 = &v25[2 * v26];
      if (v24)
      {
        if ((_DWORD)v26)
        {
          v28 = 16 * v26;
          v29 = v25;
          while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v29 += 2;
            v28 -= 16;
            if (!v28)
              goto LABEL_34;
          }
        }
        else
        {
          v29 = v25;
        }
      }
      else
      {
LABEL_34:
        v29 = &v25[2 * v26];
      }
      v30 = &v25[2 * v26];
      while (v29 != v30)
      {
        v31 = v29[1];
        v32 = (_DWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v65 = 0;
          if (sub_1C4E2F138(v31 & 0xFFFFFFFFFFFFFFF8, v2, &v65))
          {
            *v65 = -8192;
            v33 = v32[1] + 1;
            *v32 -= 2;
            v32[1] = v33;
          }
        }
        v34 = v29 + 2;
        v29 = v27;
        if (v34 != v27)
        {
          v29 = v34;
          while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v29 += 2;
            if (v29 == v27)
            {
              v29 = v27;
              break;
            }
          }
        }
      }
    }
  }
  v35 = *((_QWORD *)this + 4);
  v65 = 0;
  if (sub_1C4E2F6FC(*(_QWORD *)(v35 + 248), *(_DWORD *)(v35 + 264), v2, &v65))
  {
    *v65 = -8192;
    *(int32x2_t *)(v35 + 256) = vadd_s32(*(int32x2_t *)(v35 + 256), (int32x2_t)0x1FFFFFFFFLL);
  }
  v36 = *((_QWORD *)this + 3);
  if (v36)
  {
    if ((v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v41 = *((_QWORD *)this + 1) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v41 = *((_QWORD *)this + 2);
      v42 = (unint64_t *)*((_QWORD *)this + 2);
      if (v42)
      {
        *v42 = *v42 & 7 | v41;
      }
      else
      {
        v43 = *((_QWORD *)this + 3);
        v44 = ***(int32x2_t ****)v43;
        v45 = (unint64_t)v44[303];
        if (v45 <= v41)
        {
          v46 = v44[305].u32[0];
          if (v45 + 16 * v46 > v41)
          {
            v47 = v46 - 1;
            LODWORD(v48) = v47 & ((v43 >> 4) ^ (v43 >> 9));
            v49 = (uint64_t *)(v45 + 16 * v48);
            v50 = *v49;
            if (v43 == *v49)
            {
LABEL_61:
              *v49 = -8192;
              v44[304] = vadd_s32(v44[304], (int32x2_t)0x1FFFFFFFFLL);
              v43 = *((_QWORD *)this + 3);
            }
            else
            {
              v51 = 1;
              while (v50 != -4096)
              {
                v52 = v48 + v51++;
                v48 = v52 & v47;
                v50 = *(_QWORD *)(v45 + 16 * v48);
                if (v43 == v50)
                {
                  v49 = (uint64_t *)(v45 + 16 * v48);
                  goto LABEL_61;
                }
              }
            }
            *(_BYTE *)(v43 + 17) &= ~1u;
          }
        }
      }
    }
    *((_QWORD *)this + 3) = 0;
  }
  v38 = *((_QWORD *)this + 4);
  v37 = (uint64_t *)*((_QWORD *)this + 5);
  v39 = *v37;
  *(_QWORD *)(v39 + 8) = v37[1];
  *(_QWORD *)v37[1] = v39;
  --*(_QWORD *)(v38 + 336);
  v40 = v37[5];
  if (v40 && v40 != -8192 && v40 != -4096)
  {
    v53 = v37[3] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v53 = v37[4];
    v54 = (unint64_t *)v37[4];
    if (v54)
    {
      *v54 = *v54 & 7 | v53;
    }
    else
    {
      v55 = v37[5];
      v56 = ***(int32x2_t ****)v55;
      v57 = (unint64_t)v56[303];
      if (v57 <= v53)
      {
        v58 = v56[305].u32[0];
        if (v57 + 16 * v58 > v53)
        {
          v59 = v58 - 1;
          LODWORD(v60) = v59 & ((v55 >> 4) ^ (v55 >> 9));
          v61 = (uint64_t *)(v57 + 16 * v60);
          v62 = *v61;
          if (v55 == *v61)
          {
LABEL_74:
            *v61 = -8192;
            v56[304] = vadd_s32(v56[304], (int32x2_t)0x1FFFFFFFFLL);
            v55 = v37[5];
          }
          else
          {
            v63 = 1;
            while (v62 != -4096)
            {
              v64 = v60 + v63++;
              v60 = v64 & v59;
              v62 = *(_QWORD *)(v57 + 16 * v60);
              if (v55 == v62)
              {
                v61 = (uint64_t *)(v57 + 16 * v60);
                goto LABEL_74;
              }
            }
          }
          *(_BYTE *)(v55 + 17) &= ~1u;
        }
      }
    }
  }
  operator delete(v37);
}

int32x2_t sub_1C4E2C274(int32x2_t *a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v6 = 0;
  if (sub_1C4926528((uint64_t)a1, a2, &v6))
  {
    v4 = v6;
    v5 = v6[1] & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      if ((*(_BYTE *)v5 & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 8), 8);
      MEMORY[0x1CAA32FC0](v5, 0x1000C400BDB4DB4);
    }
    *v4 = -8192;
    result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    a1[1] = result;
  }
  return result;
}

uint64_t llvm::GlobalsAAResult::getModRefBehavior(llvm::GlobalsAAResult *this, const Function *a2)
{
  int v3;
  uint64_t result;
  const Function *v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_1C4926528((uint64_t)this + 272, &v5, &v6);
  result = 63;
  if (v3 && v6 != *((_QWORD *)this + 34) + 16 * *((unsigned int *)this + 72))
  {
    if ((*(_BYTE *)(v6 + 8) & 3) != 0)
    {
      if ((*(_BYTE *)(v6 + 8) & 2) != 0)
        return 63;
      else
        return 61;
    }
    else
    {
      return 4;
    }
  }
  return result;
}

uint64_t llvm::GlobalsAAResult::getFunctionInfo(llvm::GlobalsAAResult *this, const Function *a2)
{
  int v3;
  uint64_t v4;
  const Function *v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  v3 = sub_1C4926528((uint64_t)this + 272, &v6, &v7);
  v4 = v7;
  if (!v3)
    v4 = *((_QWORD *)this + 34) + 16 * *((unsigned int *)this + 72);
  if (v4 == *((_QWORD *)this + 34) + 16 * *((unsigned int *)this + 72))
    return 0;
  else
    return v4 + 8;
}

uint64_t llvm::GlobalsAAResult::getModRefBehavior(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a2 + 20);
  if (v3 < 0 && (*(_QWORD *)(a2 - 32 * (v3 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
    return 63;
  v4 = *(_QWORD *)(a2 - 32);
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *(_QWORD *)(a2 + 72))
    return 63;
  v7 = *(_QWORD *)(a2 - 32);
  v8 = 0;
  v5 = sub_1C4926528(a1 + 272, &v7, &v8);
  result = 63;
  if (v5 && v8 != *(_QWORD *)(a1 + 272) + 16 * *(unsigned int *)(a1 + 288))
  {
    if ((*(_BYTE *)(v8 + 8) & 3) != 0)
    {
      if ((*(_BYTE *)(v8 + 8) & 2) != 0)
        return 63;
      else
        return 61;
    }
    else
    {
      return 4;
    }
  }
  return result;
}

void llvm::GlobalsAAResult::AnalyzeGlobals(llvm::GlobalsAAResult *this, llvm::Module *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  llvm::SmallPtrSetImplBase *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t *v40;
  unint64_t v41;
  int v43;
  BOOL v44;
  unsigned int v45;
  char *v46;
  int v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[128];
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  _BYTE v60[128];
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  _BYTE v65[264];

  v61 = v65;
  v62 = v65;
  v63 = 32;
  v64 = 0;
  v4 = (char *)a2 + 24;
  v5 = (char *)*((_QWORD *)a2 + 4);
  if (v5 != (char *)a2 + 24)
  {
    do
    {
      if (v5)
        v6 = (uint64_t)(v5 - 56);
      else
        v6 = 0;
      if ((*(_DWORD *)(v6 + 32) & 0xFu) - 7 <= 1)
      {
        if ((llvm::GlobalsAAResult::AnalyzeUsesOfPointer((uint64_t)this, (_QWORD *)v6, 0, 0, 0) & 1) != 0)
        {
          *((_BYTE *)this + 144) = 1;
        }
        else
        {
          sub_1C4774094((llvm::GlobalsAAResult *)((char *)this + 48), v6);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v61, v6);
          v7 = operator new(0x40uLL);
          v7[3] = 2;
          *v7 = 0;
          v7[1] = 0;
          v7[4] = 0;
          v7[5] = v6;
          if (v6 != -8192 && v6 != -4096 && v6)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v7 + 3));
          v7[6] = this;
          v8 = (_QWORD *)*((_QWORD *)this + 41);
          *v7 = (char *)this + 320;
          v7[1] = v8;
          v7[2] = off_1E8136FE8;
          *v8 = v7;
          v9 = *((_QWORD *)this + 42) + 1;
          *((_QWORD *)this + 41) = v7;
          *((_QWORD *)this + 42) = v9;
          v7[7] = v7;
        }
      }
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
  }
  v56 = (uint64_t *)v60;
  v57 = (uint64_t *)v60;
  v58 = 16;
  v59 = 0;
  v51 = (uint64_t *)v55;
  v52 = (uint64_t *)v55;
  v53 = 16;
  v54 = 0;
  v10 = (char *)a2 + 8;
  v11 = (char *)*((_QWORD *)a2 + 2);
  if (v11 != (char *)a2 + 8)
  {
    v12 = (char *)this + 320;
    while (1)
    {
      if (v11)
        v13 = (uint64_t)(v11 - 56);
      else
        v13 = 0;
      if ((*(_DWORD *)(v13 + 32) & 0xFu) - 7 > 1)
        goto LABEL_67;
      if ((*(_BYTE *)(v13 + 80) & 1) != 0)
        v14 = 0;
      else
        v14 = (llvm::SmallPtrSetImplBase *)&v51;
      if ((llvm::GlobalsAAResult::AnalyzeUsesOfPointer((uint64_t)this, (_QWORD *)v13, (llvm::SmallPtrSetImplBase *)&v56, v14, 0) & 1) == 0)
      {
        sub_1C4774094((llvm::GlobalsAAResult *)((char *)this + 48), v13);
        v15 = operator new(0x40uLL);
        v15[3] = 2;
        *v15 = 0;
        v15[1] = 0;
        v15[4] = 0;
        v15[5] = v13;
        if (v13 != -8192 && v13 != -4096 && v13)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v15 + 3));
        v15[6] = this;
        v16 = (_QWORD *)*((_QWORD *)this + 41);
        *v15 = v12;
        v15[1] = v16;
        v15[2] = off_1E8136FE8;
        *v16 = v15;
        v17 = *((_QWORD *)this + 42) + 1;
        *((_QWORD *)this + 41) = v15;
        *((_QWORD *)this + 42) = v17;
        v15[7] = v15;
        if (v57 == v56)
          v18 = (uint64_t *)((char *)&v58 + 4);
        else
          v18 = &v58;
        v19 = *(unsigned int *)v18;
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          v21 = v57;
          while ((unint64_t)*v21 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v21;
            v20 -= 8;
            if (!v20)
              goto LABEL_44;
          }
        }
        else
        {
          v21 = v57;
        }
        v22 = (char *)&v57[v19];
        if (v21 != (uint64_t *)v22)
        {
LABEL_38:
          v50 = 0;
          v50 = *v21;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v61, v50);
          if (v23)
          {
            v24 = sub_1C4E2F790((uint64_t)this, v50);
            *v24 = v12;
            v25 = (_QWORD *)*((_QWORD *)this + 41);
            v24[1] = v25;
            *v25 = v24;
            v26 = *((_QWORD *)this + 42) + 1;
            *((_QWORD *)this + 41) = v24;
            *((_QWORD *)this + 42) = v26;
            v24[7] = v24;
          }
          v27 = sub_1C4E2F800((_DWORD *)this + 68, &v50);
          sub_1C4E2CD04(v27 + 1, v13, 5);
          v28 = (unint64_t *)(v21 + 1);
          while (v28 != (unint64_t *)v22)
          {
            v29 = *v28++;
            if (v29 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v21 = (uint64_t *)(v28 - 1);
              goto LABEL_38;
            }
          }
        }
LABEL_44:
        if ((*(_BYTE *)(v13 + 80) & 1) == 0)
        {
          if (v52 == v51)
            v30 = (uint64_t *)((char *)&v53 + 4);
          else
            v30 = &v53;
          v31 = *(unsigned int *)v30;
          if ((_DWORD)v31)
          {
            v32 = 8 * v31;
            v33 = v52;
            while ((unint64_t)*v33 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v33;
              v32 -= 8;
              if (!v32)
                goto LABEL_61;
            }
          }
          else
          {
            v33 = v52;
          }
          v34 = (char *)&v52[v31];
          if (v33 != (uint64_t *)v34)
          {
LABEL_55:
            v50 = 0;
            v50 = *v33;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v61, v50);
            if (v35)
            {
              v36 = sub_1C4E2F790((uint64_t)this, v50);
              *v36 = v12;
              v37 = (_QWORD *)*((_QWORD *)this + 41);
              v36[1] = v37;
              *v37 = v36;
              v38 = *((_QWORD *)this + 42) + 1;
              *((_QWORD *)this + 41) = v36;
              *((_QWORD *)this + 42) = v38;
              v36[7] = v36;
            }
            v39 = sub_1C4E2F800((_DWORD *)this + 68, &v50);
            sub_1C4E2CD04(v39 + 1, v13, 6);
            v40 = (unint64_t *)(v33 + 1);
            while (v40 != (unint64_t *)v34)
            {
              v41 = *v40++;
              if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v33 = (uint64_t *)(v40 - 1);
                goto LABEL_55;
              }
            }
          }
        }
LABEL_61:
        if (*(_BYTE *)(*(_QWORD *)(v13 + 24) + 8) == 15)
          llvm::GlobalsAAResult::AnalyzeIndirectGlobalMemory(this, (llvm::GlobalVariable *)v13);
      }
      if (v57 != v56)
      {
        if (v58 >= 0x21 && 4 * (HIDWORD(v58) - v59) < v58)
        {
          free(v57);
          v43 = 1 << (33 - __clz(HIDWORD(v58) - v59 - 1));
          v44 = (HIDWORD(v58) - v59) > 0x10;
          HIDWORD(v58) = 0;
          v59 = 0;
          if (v44)
            v45 = v43;
          else
            v45 = 32;
          LODWORD(v58) = v45;
          v46 = (char *)malloc_type_malloc(8 * v45, 0x4065EBACuLL);
          if (!v46)
            goto LABEL_95;
          v57 = (uint64_t *)v46;
          memset(v46, 255, 8 * v58);
          goto LABEL_65;
        }
        memset(v57, 255, 8 * v58);
      }
      HIDWORD(v58) = 0;
      v59 = 0;
LABEL_65:
      if (v52 != v51)
      {
        if (v53 >= 0x21 && 4 * (HIDWORD(v53) - v54) < v53)
        {
          free(v52);
          v47 = 1 << (33 - __clz(HIDWORD(v53) - v54 - 1));
          v44 = (HIDWORD(v53) - v54) > 0x10;
          HIDWORD(v53) = 0;
          v54 = 0;
          if (v44)
            v48 = v47;
          else
            v48 = 32;
          LODWORD(v53) = v48;
          v49 = (char *)malloc_type_malloc(8 * v48, 0x4065EBACuLL);
          if (!v49)
LABEL_95:
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v52 = (uint64_t *)v49;
          memset(v49, 255, 8 * v53);
          goto LABEL_67;
        }
        memset(v52, 255, 8 * v53);
      }
      HIDWORD(v53) = 0;
      v54 = 0;
LABEL_67:
      v11 = (char *)*((_QWORD *)v11 + 1);
      if (v11 == v10)
      {
        if (v52 != v51)
          free(v52);
        break;
      }
    }
  }
  if (v57 != v56)
    free(v57);
  if (v62 != v61)
    free(v62);
}

uint64_t llvm::GlobalsAAResult::AnalyzeUsesOfPointer(uint64_t a1, _QWORD *a2, llvm::SmallPtrSetImplBase *a3, llvm::SmallPtrSetImplBase *a4, _QWORD *a5)
{
  unint64_t i;
  uint64_t v11;
  unsigned int v12;
  llvm::SmallPtrSetImplBase *v13;
  _QWORD *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::SmallPtrSetImplBase *v19;
  llvm::SmallPtrSetImplBase *v20;
  _QWORD *v21;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  if (*(_BYTE *)(*a2 + 8) != 15)
    return 1;
  for (i = a2[1]; i; i = *(_QWORD *)(i + 8))
  {
    v11 = *(_QWORD *)(i + 24);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v11 && v12 == 60)
    {
      v13 = a3;
      if (a3)
        goto LABEL_6;
      continue;
    }
    if (v11 && v12 == 61)
    {
      v14 = *(_QWORD **)(v11 - 32);
      if (v14 != a2)
      {
        if (v14 != a5)
          return 1;
        continue;
      }
      goto LABEL_56;
    }
    if (v11)
      v15 = v12 > 0x1B;
    else
      v15 = 0;
    if (v15)
    {
      if (v12 == 77)
        goto LABEL_26;
      if (v12 == 62)
      {
LABEL_23:
        v17 = a1;
        v18 = *(_QWORD *)(i + 24);
        v19 = a3;
        v20 = a4;
        v21 = 0;
        goto LABEL_27;
      }
      v16 = v12 - 28;
    }
    else
    {
      if (!v11 || v12 != 5)
        goto LABEL_29;
      v16 = *(unsigned __int16 *)(v11 + 18);
      if (v16 == 34)
        goto LABEL_23;
      if (v16 == 49)
      {
LABEL_26:
        v17 = a1;
        v18 = *(_QWORD *)(i + 24);
        v19 = a3;
        v20 = a4;
        v21 = a5;
LABEL_27:
        if ((llvm::GlobalsAAResult::AnalyzeUsesOfPointer(v17, v18, v19, v20, v21) & 1) != 0)
          return 1;
        continue;
      }
    }
    if (v16 == 50)
      goto LABEL_26;
LABEL_29:
    if (v12 < 0x1C)
    {
      result = 1;
      if (!v11 || v12 - 21 < 0xFFFFFFEF)
        return result;
      if ((llvm::Constant::isConstantUsed(*(llvm::Constant **)(i + 24)) & 1) != 0)
        return 1;
    }
    else
    {
      if (v12 - 33 <= 0x33 && ((1 << (v12 - 33)) & 0x8000000000041) != 0)
      {
        v23 = *(_DWORD *)(v11 + 20);
        v24 = v11 - 32 * (v23 & 0x7FFFFFF);
        if (v24 > i)
          continue;
        if (v12 == 84)
          v25 = 0;
        else
          v25 = v12 == 39 ? (*(_DWORD *)(v11 + 80) + 1) : 2;
        if (v11 - 32 * v25 - 32 <= i)
          continue;
        if (v12 == 84)
        {
          v27 = 0;
        }
        else if (v12 == 39)
        {
          v27 = (*(_DWORD *)(v11 + 80) + 1);
        }
        else
        {
          v27 = 2;
        }
        if (v23 < 0 && (v31 = *(_QWORD *)(v24 - 8), (v31 & 0xFFFFFFFF0) != 0))
          v28 = (*(_DWORD *)(v24 - 12) - *(_DWORD *)(v24 - v31));
        else
          v28 = 0;
        if (v11 - 32 * v27 - 32 * v28 - 32 <= i)
          return 1;
        v29 = *(_QWORD *)(a1 + 40);
        if (!v29)
        {
          sub_1C485C2F0();
          return sub_1C4E2CD04();
        }
        v30 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v29 + 48))(v29, *(_QWORD *)(*(_QWORD *)(v11 + 40) + 56));
        if (!llvm::isFreeCall(v11, v30))
          return 1;
LABEL_56:
        v13 = a4;
        if (!a4)
          continue;
LABEL_6:
        sub_1C4774094(v13, *(_QWORD *)(*(_QWORD *)(v11 + 40) + 56));
        continue;
      }
      result = 1;
      if (!v11 || v12 != 81 || *(_BYTE *)(*(_QWORD *)(v11 - 32) + 16) != 19)
        return result;
    }
  }
  return 0;
}

uint64_t sub_1C4E2CD04(uint64_t *a1, uint64_t a2, char a3)
{
  _DWORD *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
  {
    v12 = operator new();
    v5 = (_DWORD *)v12;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_DWORD *)v12 = 1;
    v13 = 8;
    *(_QWORD *)(v12 + 256) = 0;
    do
    {
      *(_QWORD *)(v12 + v13) = -4096;
      v13 += 16;
    }
    while (v13 != 264);
    *a1 = *a1 & 7 | v12;
  }
  v14 = 0;
  result = sub_1C4E2F138((uint64_t)v5, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v10 = *(_BYTE *)(v14 + 8);
    goto LABEL_10;
  }
  v8 = *v5 >> 1;
  if ((*v5 & 1) != 0)
    v9 = 16;
  else
    v9 = v5[4];
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_17;
  }
  if (v9 + ~v8 - v5[1] <= v9 >> 3)
  {
LABEL_17:
    sub_1C4E2F1DC((uint64_t)v5, v9);
    v14 = 0;
    result = sub_1C4E2F138((uint64_t)v5, a2, &v14);
    v7 = v14;
  }
  *v5 += 2;
  if (*(_QWORD *)v7 != -4096)
    --v5[1];
  v10 = 0;
  *(_QWORD *)v7 = a2;
  *(_BYTE *)(v7 + 8) = 0;
LABEL_10:
  *(_BYTE *)(v7 + 8) = v10 | a3;
  return result;
}

uint64_t llvm::GlobalsAAResult::AnalyzeIndirectGlobalMemory(llvm::GlobalsAAResult *this, llvm::GlobalVariable *a2)
{
  llvm::Constant *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  llvm *v11;
  llvm *UnderlyingObject;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  llvm *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  llvm **v23;
  char *v24;
  llvm *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  if (v4 && !llvm::Constant::isNullValue(v4))
    return 0;
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 24);
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v9 && v10 == 60)
      {
        if ((llvm::GlobalsAAResult::AnalyzeUsesOfPointer((uint64_t)this, (_QWORD *)v9, 0, 0, 0) & 1) != 0)
          goto LABEL_51;
      }
      else
      {
        if (!v9)
          goto LABEL_51;
        if (v10 != 61)
          goto LABEL_51;
        v11 = *(llvm **)(v9 - 64);
        if (v11 == a2)
          goto LABEL_51;
        if (*((_BYTE *)v11 + 16) != 19)
        {
          UnderlyingObject = llvm::getUnderlyingObject(v11, (const llvm::Value *)6);
          v13 = *((unsigned __int8 *)UnderlyingObject + 16);
          if (v13 < 0x1C
            || ((v14 = v13 - 33, v15 = v14 > 0x33, v16 = (1 << v14) & 0x8000000000041, !v15)
              ? (v17 = v16 == 0)
              : (v17 = 1),
                v17
             || (v18 = UnderlyingObject, !sub_1C4D91DD8((uint64_t)UnderlyingObject, 19))
             || (llvm::GlobalsAAResult::AnalyzeUsesOfPointer((uint64_t)this, v18, 0, 0, a2) & 1) != 0))
          {
LABEL_51:
            v32 = 0;
            if (v6)
              goto LABEL_59;
            return v32;
          }
          if (v7 >= v8)
          {
            v19 = (v7 - v6) >> 3;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61)
              abort();
            if ((v8 - v6) >> 2 > v20)
              v20 = (v8 - v6) >> 2;
            if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            if (v21)
            {
              if (v21 >> 61)
                sub_1C4764EE4();
              v22 = (char *)operator new(8 * v21);
            }
            else
            {
              v22 = 0;
            }
            v23 = (llvm **)&v22[8 * v19];
            *v23 = v18;
            v24 = (char *)(v23 + 1);
            while (v7 != v6)
            {
              v25 = (llvm *)*((_QWORD *)v7 - 1);
              v7 -= 8;
              *--v23 = v25;
            }
            v8 = &v22[8 * v21];
            if (v6)
              operator delete(v6);
            v6 = (char *)v23;
            v7 = v24;
          }
          else
          {
            *(_QWORD *)v7 = v18;
            v7 += 8;
          }
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
      {
        if (v6 != v7)
        {
          v26 = (uint64_t *)(v7 - 8);
          do
          {
            sub_1C6191FD0((uint64_t)this + 248, v26)[1] = a2;
            v27 = *v26;
            v28 = operator new(0x40uLL);
            v28[3] = 2;
            *v28 = 0;
            v28[1] = 0;
            v28[4] = 0;
            v28[5] = v27;
            if (v27 != -8192 && v27 != -4096 && v27 != 0)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v28 + 3));
            v30 = (_QWORD *)*((_QWORD *)this + 41);
            v31 = *((_QWORD *)this + 42);
            *v28 = (char *)this + 320;
            v28[1] = v30;
            v28[2] = off_1E8136FE8;
            *v30 = v28;
            *((_QWORD *)this + 41) = v28;
            *((_QWORD *)this + 42) = v31 + 1;
            v28[6] = this;
            v28[7] = v28;
            v17 = v26-- == (uint64_t *)v6;
          }
          while (!v17);
        }
        goto LABEL_54;
      }
    }
  }
  v6 = 0;
LABEL_54:
  sub_1C4774094((llvm::GlobalsAAResult *)((char *)this + 152), (uint64_t)a2);
  v33 = operator new(0x40uLL);
  v33[3] = 2;
  *v33 = 0;
  v33[1] = 0;
  v33[4] = 0;
  v33[5] = a2;
  if (a2 != (llvm::GlobalVariable *)-8192 && a2 != (llvm::GlobalVariable *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v33 + 3));
  v34 = (_QWORD *)*((_QWORD *)this + 41);
  v35 = *((_QWORD *)this + 42);
  *v33 = (char *)this + 320;
  v33[1] = v34;
  v33[2] = off_1E8136FE8;
  *v34 = v33;
  *((_QWORD *)this + 41) = v33;
  *((_QWORD *)this + 42) = v35 + 1;
  v33[6] = this;
  v33[7] = v33;
  v32 = 1;
  if (v6)
LABEL_59:
    operator delete(v6);
  return v32;
}

_QWORD *llvm::GlobalsAAResult::CollectSCCMembership(llvm::GlobalsAAResult *this, llvm::CallGraph *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *((_QWORD *)a2 + 10);
  LODWORD(v10[0]) = 0;
  v10[1] = 0;
  v10[2] = 0;
  v11 = 0;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  sub_1C4DE3A20((int *)v10, v3);
  sub_1C4DE3CBC(v10);
  v4 = *((_QWORD *)&v13 + 1);
  v5 = v14;
  if (*((_QWORD *)&v13 + 1) != (_QWORD)v14)
  {
    v6 = 0;
    v7 = (char *)this + 296;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v4 + 8);
      if (v9)
        *((_DWORD *)sub_1C4E2FB20((uint64_t)v7, &v9) + 2) = v6;
      v4 += 8;
      if (v4 == v5)
      {
        ++v6;
        sub_1C4DE3CBC(v10);
        v4 = *((_QWORD *)&v13 + 1);
        v5 = v14;
        if (*((_QWORD *)&v13 + 1) == (_QWORD)v14)
          break;
      }
    }
  }
  return sub_1C617D7D4(v10);
}

uint64_t llvm::GlobalsAAResult::AnalyzeCallGraph(llvm::GlobalsAAResult *this, llvm::CallGraph *a2, llvm::Module *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  int32x2_t *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::GlobalValue *Section;
  uint64_t v12;
  llvm::Module *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int *v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  int *v86;
  int *v87;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  BOOL v93;
  llvm::GlobalsAAResult *v95;
  const llvm::GlobalValue *v96;
  const llvm::Value *v97;
  char *v98;
  llvm::GlobalsAAResult *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void *v106[2];
  __int128 v107;
  __int128 v108;
  void *__p[2];
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[3];
  char v113;

  v5 = *((_QWORD *)a2 + 10);
  LODWORD(v102) = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  *(_OWORD *)v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  v110 = 0;
  sub_1C4DE3A20((int *)&v102, v5);
  sub_1C4DE3CBC(&v102);
  v7 = (char *)*((_QWORD *)&v107 + 1);
  v6 = (char *)v108;
  if (*((_QWORD *)&v107 + 1) == (_QWORD)v108)
    goto LABEL_189;
  v8 = (int32x2_t *)((char *)this + 272);
  v98 = (char *)this + 320;
  v9 = (_QWORD *)((char *)a2 + 16);
  v99 = this;
  v100 = (char *)a2 + 16;
  do
  {
    v101 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v101 = v10;
    if (!v10 || ((1 << (*(_DWORD *)(v10 + 32) & 0xF)) & 0x7D5) == 0)
      goto LABEL_104;
    if (*(_BYTE *)(v10 + 16) == 3
      && (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v10), v12 == 12)
      && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        ? (v93 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        : (v93 = 0),
          v93)
      || (*(_DWORD *)(v10 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v10 + 32) & 0xF)) & 0x614) != 0
      || (v13 = *(llvm::Module **)(v10 + 40)) != 0
      && llvm::Module::getSemanticInterposition(v13)
      && (*(_BYTE *)(v10 + 33) & 0x40) == 0)
    {
      v7 = (char *)*((_QWORD *)&v107 + 1);
      v6 = (char *)v108;
LABEL_104:
      while (v7 != v6)
      {
        v55 = *(_QWORD *)v7;
        v7 += 8;
        v112[0] = *(_QWORD *)(v55 + 8);
        sub_1C4E2C274(v8, v112);
      }
      goto LABEL_105;
    }
    v14 = sub_1C4E2F800(v8, &v101) + 1;
    v15 = sub_1C4E2F790((uint64_t)this, v101);
    *v15 = v98;
    v16 = (_QWORD *)*((_QWORD *)this + 41);
    v15[1] = v16;
    *v16 = v15;
    v17 = *((_QWORD *)this + 42) + 1;
    *((_QWORD *)this + 41) = v15;
    *((_QWORD *)this + 42) = v17;
    v15[7] = v15;
    v18 = (uint64_t *)*((_QWORD *)&v107 + 1);
    v19 = (uint64_t *)v108;
    if ((((_QWORD)v108 - *((_QWORD *)&v107 + 1)) & 0x7FFFFFFF8) == 0)
    {
      while (1)
      {
LABEL_168:
        if (v18 == v19 || (~*(_DWORD *)v14 & 3) == 0)
        {
          v83 = *v14;
          v84 = *v14 & 7;
          v112[0] = v84;
          v85 = (_DWORD *)(v83 & 0xFFFFFFFFFFFFFFF8);
          this = v99;
          v9 = v100;
          if ((v83 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v86 = (int *)operator new();
            v87 = v86;
            *(_QWORD *)v86 = 1;
            for (i = 2; i != 66; i += 4)
              *(_QWORD *)&v86[i] = -4096;
            sub_1C4E2F4A4(v86, v85);
            v84 |= (unint64_t)v87;
            v112[0] = v84;
          }
          v89 = ((_QWORD)v108 - *((_QWORD *)&v107 + 1)) >> 3;
          if ((_DWORD)v89 != 1)
          {
            v90 = 1;
            do
            {
              v111 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * v90) + 8);
              v91 = sub_1C4E2F800(v8, &v111);
              sub_1C61916E0(v91 + 1, v112);
              ++v90;
            }
            while ((_DWORD)v89 != (_DWORD)v90);
          }
          v92 = v84 & 0xFFFFFFFFFFFFFFF8;
          if ((v84 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((*(_BYTE *)v92 & 1) == 0)
              MEMORY[0x1CAA32FB4](*(_QWORD *)(v92 + 8), 8);
            MEMORY[0x1CAA32FC0](v84 & 0xFFFFFFFFFFFFFFF8, 0x1000C400BDB4DB4);
          }
          goto LABEL_105;
        }
        v56 = *v18;
        v57 = *(_QWORD *)(*v18 + 8);
        v58 = *(_QWORD *)(v57 + 112);
        if (!v58 || (*(_BYTE *)(v58 + 17) & 8) == 0)
        {
          v59 = v57 + 72;
          for (j = *(_QWORD *)(v57 + 80); j != v59; j = *(_QWORD *)(j + 8))
          {
            v61 = j - 24;
            if (!j)
              v61 = 0;
            v62 = *(_QWORD *)(v61 + 48);
            if (v62 != v61 + 40)
            {
              while (1)
              {
                if (v62)
                  v76 = v62 - 24;
                else
                  v76 = 0;
                if ((~*(_DWORD *)v14 & 3) == 0)
                  goto LABEL_167;
                v77 = *(unsigned __int8 *)(v76 + 16) - 33;
                if (v77 <= 0x37)
                {
                  if (((1 << (*(_BYTE *)(v76 + 16) - 33)) & 0x8000000000041) != 0)
                  {
                    v78 = *((_QWORD *)v99 + 5);
                    if (!v78)
                    {
                      sub_1C485C2F0();
                      return llvm::GlobalsAAResult::isNonEscapingGlobalNoAlias(v95, v96, v97);
                    }
                    v79 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 48))(v78, *(_QWORD *)(v56 + 8));
                    if (byte_1ED82E438)
                      v80 = 59;
                    else
                      v80 = 63;
                    sub_1C4EBF808(v62 - 24, v80, v79, v112);
                    if (v113
                      || llvm::isFreeCall(v62 - 24, v79)
                      || (v63 = *(_QWORD *)(v62 - 56)) != 0
                      && !*(_BYTE *)(v63 + 16)
                      && *(_QWORD *)(v63 + 24) == *(_QWORD *)(v62 + 48)
                      && (*(_BYTE *)(v63 + 33) & 0x20) != 0
                      && !sub_1C4D99D08(v62 - 24))
                    {
                      v66 = 3;
                      goto LABEL_158;
                    }
                  }
                  else
                  {
                    if (((1 << (*(_BYTE *)(v76 + 16) - 33)) & 0x808001C8000010) == 0)
                    {
                      if (v77 != 28)
                        goto LABEL_159;
                      if ((*(_WORD *)(v76 + 18) & 0x301) == 0)
                        goto LABEL_136;
                    }
                    *v14 |= 1uLL;
                    if (((1 << v77) & 0x8000000000041) != 0)
                    {
                      v64 = *(_QWORD *)(v76 + 64);
                      if (!v64 || (*(_BYTE *)(v64 + 17) & 0x30) == 0)
                      {
                        v65 = *(_DWORD *)(v76 + 20);
                        if (v65 < 0)
                        {
                          v67 = v76 - 32 * (v65 & 0x7FFFFFF);
                          v70 = *(_QWORD *)(v67 - 8);
                          v68 = v67 - 8;
                          v69 = v70;
                          if (v70)
                          {
                            v71 = -v69;
                            while (1)
                            {
                              v72 = *(_DWORD *)(*(_QWORD *)(v68 + v71) + 8);
                              v73 = v72 > 7;
                              v74 = (1 << v72) & 0x83;
                              if (v73 || v74 == 0)
                                break;
                              v71 += 16;
                              if (!v71)
                                goto LABEL_134;
                            }
LABEL_136:
                            v66 = 2;
LABEL_158:
                            *v14 |= v66;
                            goto LABEL_159;
                          }
                        }
LABEL_134:
                        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v76, 45) & 1) == 0
                          && (llvm::CallBase::hasFnAttrOnCalledFunction(v76, 44) & 1) == 0)
                        {
                          goto LABEL_136;
                        }
                      }
                    }
                    else if (((1 << v77) & 0x808001D0000010) != 0
                           || v77 == 27 && (*(_WORD *)(v76 + 18) & 0x301) != 0)
                    {
                      goto LABEL_136;
                    }
                  }
                }
LABEL_159:
                v62 = *(_QWORD *)(v62 + 8);
                v81 = j - 24;
                if (!j)
                  v81 = 0;
                if (v62 == v81 + 40)
                {
                  do
                  {
                    j = *(_QWORD *)(j + 8);
                    if (j == v59)
                      goto LABEL_167;
                    v82 = j - 24;
                    if (!j)
                      v82 = 0;
                    v62 = *(_QWORD *)(v82 + 48);
                  }
                  while (v62 == v82 + 40);
                }
                if (j == v59)
                  goto LABEL_167;
              }
            }
          }
        }
LABEL_167:
        ++v18;
      }
    }
    v20 = 0;
    v21 = (((_QWORD)v108 - *((_QWORD *)&v107 + 1)) >> 3);
    do
    {
      v22 = v101;
      if (!v101)
        goto LABEL_97;
      v23 = *(unsigned __int8 *)(v101 + 16);
      if (v23 == 3)
      {
        if ((*(_DWORD *)(v101 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_62;
      }
      else if (!*(_BYTE *)(v101 + 16) && *(_QWORD *)(v101 + 72) == v101 + 72 && (*(_BYTE *)(v101 + 34) & 0x80) == 0)
      {
        goto LABEL_62;
      }
      v24 = *(_QWORD *)(v101 + 112);
      if (!v24 || (*(_BYTE *)(v24 + 17) & 8) == 0)
      {
        v25 = *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * v20);
        v26 = *(_QWORD *)(v25 + 16);
        v27 = *(_QWORD *)(v25 + 24);
        if (v26 != v27)
        {
          while (1)
          {
            v28 = *(_QWORD *)(v26 + 32);
            v29 = *(_QWORD *)(v28 + 8);
            if (!v29)
              break;
            v111 = *(_QWORD *)(v28 + 8);
            v112[0] = 0;
            if (!sub_1C4926528((uint64_t)v8, &v111, v112)
              || (v30 = v112[0], v112[0] == *((_QWORD *)this + 34) + 16 * *((unsigned int *)this + 72)))
            {
              v35 = (_QWORD *)*v9;
              if (!*v9)
                goto LABEL_40;
              v36 = v9;
              do
              {
                v37 = v35[4];
                v38 = v37 >= v29;
                if (v37 >= v29)
                  v39 = v35;
                else
                  v39 = v35 + 1;
                if (v38)
                  v36 = v35;
                v35 = (_QWORD *)*v39;
              }
              while (*v39);
              if (v36 == v9 || v36[4] > v29)
LABEL_40:
                v36 = v9;
              v40 = (_QWORD *)*((_QWORD *)&v107 + 1);
              if (*((_QWORD *)&v107 + 1) != (_QWORD)v108)
              {
                v41 = v36[5];
                while (*v40 != v41)
                {
                  if (++v40 == (_QWORD *)v108)
                  {
                    v40 = (_QWORD *)v108;
                    break;
                  }
                }
              }
              v34 = v40 == (_QWORD *)v108;
            }
            else
            {
              v31 = *v14 | *(_QWORD *)(v112[0] + 8) & 3;
              *v14 = v31;
              v32 = *(_QWORD *)(v30 + 8);
              if ((v32 & 4) != 0)
              {
                *v14 = v31 | 4;
                v32 = *(_QWORD *)(v30 + 8);
              }
              v33 = v32 & 0xFFFFFFFFFFFFFFF8;
              if ((v32 & 0xFFFFFFFFFFFFFFF8) == 0
                || ((v42 = sub_1C4E2F420((int *)(v32 & 0xFFFFFFFFFFFFFFF8)),
                     v43 = v42,
                     v45 = v44,
                     v46 = v33 + 8,
                     (*(_BYTE *)v33 & 1) == 0)
                  ? (v46 = *(_QWORD *)(v33 + 8), v47 = *(unsigned int *)(v33 + 16))
                  : (v47 = 16),
                    v48 = (int *)(v46 + 16 * v47),
                    v48 == v42))
              {
                v34 = 0;
              }
              else
              {
                do
                {
                  sub_1C4E2CD04(v14, *(_QWORD *)v43, *((_BYTE *)v43 + 8));
                  while (1)
                  {
                    v43 += 4;
                    if (v43 == v45)
                      break;
                    if (*(_QWORD *)v43 != -4096 && *(_QWORD *)v43 != -8192)
                      goto LABEL_59;
                  }
                  v43 = v45;
LABEL_59:
                  v34 = 0;
                }
                while (v43 != v48);
              }
            }
            v26 += 40;
            if (v26 == v27)
            {
              v9 = v100;
              goto LABEL_90;
            }
            v9 = v100;
            if (v34)
              goto LABEL_90;
          }
LABEL_97:
          v18 = (uint64_t *)*((_QWORD *)&v107 + 1);
          v19 = (uint64_t *)v108;
          goto LABEL_98;
        }
        goto LABEL_89;
      }
LABEL_62:
      v49 = *(_BYTE **)(v101 + 112);
      if (!v49)
      {
        v51 = *v14 | 3;
LABEL_68:
        *v14 = v51 | 4;
LABEL_69:
        if (v23 == 3)
        {
          v52 = *(_DWORD *)(v22 + 20) & 0x7FFFFFF;
          if (v49)
            v53 = v52 == 0;
          else
            v53 = 0;
          if (!v53)
            goto LABEL_97;
        }
        else if (v23 || *(_QWORD *)(v22 + 72) != v22 + 72 || !v49 || (*(_DWORD *)(v22 + 32) & 0x800000) != 0)
        {
          goto LABEL_97;
        }
        if ((v49[16] & 8) == 0 || (v49[14] & 0x20) == 0)
          goto LABEL_97;
        goto LABEL_89;
      }
      if ((v49[17] & 0x10) == 0)
      {
        v50 = *v14;
        if ((v49[17] & 0x20) == 0)
        {
          v51 = v50 | 3;
          *v14 = v51;
          if ((v49[12] & 8) != 0)
            goto LABEL_69;
          goto LABEL_68;
        }
        *v14 = v50 | 1;
        if ((v49[12] & 8) == 0)
        {
          if (v23 == 3)
          {
            if ((*(_DWORD *)(v22 + 20) & 0x7FFFFFF) != 0)
              goto LABEL_96;
          }
          else if (v23 || *(_QWORD *)(v22 + 72) != v22 + 72 || (*(_BYTE *)(v22 + 34) & 0x80) != 0)
          {
LABEL_96:
            v34 = 0;
            *v14 = v50 | 5;
            goto LABEL_90;
          }
          if ((v49[16] & 8) == 0 || (v49[14] & 0x20) == 0)
            goto LABEL_96;
        }
      }
LABEL_89:
      v34 = 0;
LABEL_90:
      ++v20;
    }
    while (v20 != v21 && !v34);
    v18 = (uint64_t *)*((_QWORD *)&v107 + 1);
    v19 = (uint64_t *)v108;
    if (!v34)
      goto LABEL_168;
LABEL_98:
    while (v18 != v19)
    {
      v54 = *v18++;
      v112[0] = *(_QWORD *)(v54 + 8);
      sub_1C4E2C274(v8, v112);
    }
LABEL_105:
    sub_1C4DE3CBC(&v102);
    v7 = (char *)*((_QWORD *)&v107 + 1);
    v6 = (char *)v108;
  }
  while (*((_QWORD *)&v107 + 1) != (_QWORD)v108);
LABEL_189:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v7 = (char *)*((_QWORD *)&v107 + 1);
  }
  if (v7)
  {
    *(_QWORD *)&v108 = v7;
    operator delete(v7);
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  return MEMORY[0x1CAA32FB4](v103, 8);
}

uint64_t llvm::GlobalsAAResult::isNonEscapingGlobalNoAlias(llvm::GlobalsAAResult *this, const llvm::GlobalValue *a2, const llvm::Value *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  const llvm::GlobalValue *v14;
  uint64_t v15;
  int v17;
  BOOL v18;
  llvm::GlobalValue *Section;
  uint64_t v20;
  llvm::Module *v21;
  llvm::GlobalValue *v22;
  uint64_t v23;
  llvm::Module *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  const char *v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  const char *v44;
  char v45;
  char v46;
  llvm *v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  int v54;
  llvm *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  llvm **v59;
  llvm *v60;
  llvm *v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  llvm *v66;
  char v67;
  uint64_t v68;
  llvm *UnderlyingObject;
  llvm *v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  llvm **v77;
  uint64_t v78;
  llvm *v79;
  char v80;
  uint64_t v81;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  int v88;
  _BYTE v89[64];
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  _BYTE v94[64];
  void *v95;
  uint64_t v96;
  _BYTE v97[64];
  _QWORD *v98;
  uint64_t v99;
  _QWORD v100[10];

  v100[8] = *MEMORY[0x1E0C80C00];
  v85 = v89;
  v86 = v89;
  v87 = 8;
  v88 = 0;
  v95 = v97;
  v96 = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, (uint64_t)a3);
  v6 = v96;
  if (v96 >= HIDWORD(v96))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 8);
    v6 = v96;
  }
  v7 = 0;
  *((_QWORD *)v95 + v6) = a3;
  v8 = v96 + 1;
  do
  {
    v9 = *((_QWORD *)v95 + v8 - 1);
    LODWORD(v96) = v8 - 1;
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9)
      v11 = v10 > 3;
    else
      v11 = 1;
    if (!v11)
    {
      if ((const llvm::GlobalValue *)v9 == a2)
        goto LABEL_168;
      v14 = *((_BYTE *)a2 + 16) == 3 ? a2 : 0;
      v15 = v10 == 3 ? v9 : 0;
      if (v10 != 3 || v14 == 0)
        goto LABEL_168;
      v17 = *((unsigned __int8 *)v14 + 16);
      if (*((_BYTE *)v14 + 16))
      {
        if (v17 == 3 && (*((_DWORD *)v14 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_168;
      }
      else if (*((const llvm::GlobalValue **)v14 + 9) == (const llvm::GlobalValue *)((char *)v14 + 72)
             && (*((_BYTE *)v14 + 34) & 0x80) == 0)
      {
        goto LABEL_168;
      }
      if (v15)
        v18 = *(_BYTE *)(v15 + 16) == 3;
      else
        v18 = 0;
      if (v18)
      {
        if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_168;
      }
      else if (!*(_BYTE *)(v15 + 16) && *(_QWORD *)(v15 + 72) == v15 + 72 && (*(_BYTE *)(v15 + 34) & 0x80) == 0)
      {
        goto LABEL_168;
      }
      if (v17 == 3)
      {
        Section = llvm::GlobalValue::getSection(v14);
        if (v20 == 12
          && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          goto LABEL_168;
        }
      }
      if ((*((_DWORD *)v14 + 8) & 0xFu) - 5 >= 4)
      {
        v13 = 0;
        if (((1 << (*((_DWORD *)v14 + 8) & 0xF)) & 0x614) != 0)
          break;
      }
      v21 = (llvm::Module *)*((_QWORD *)v14 + 5);
      if (v21)
      {
        if (llvm::Module::getSemanticInterposition(v21) && (*((_BYTE *)v14 + 33) & 0x40) == 0)
          goto LABEL_168;
      }
      if (*(_BYTE *)(v15 + 16) == 3)
      {
        v22 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v15);
        if (v23 == 12
          && *(_QWORD *)v22 == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)v22 + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          goto LABEL_168;
        }
      }
      if ((*(_DWORD *)(v15 + 32) & 0xFu) - 5 >= 4)
      {
        v13 = 0;
        if (((1 << (*(_DWORD *)(v15 + 32) & 0xF)) & 0x614) != 0)
          break;
      }
      v24 = *(llvm::Module **)(v15 + 40);
      if (v24)
      {
        if (llvm::Module::getSemanticInterposition(v24) && (*(_BYTE *)(v15 + 33) & 0x40) == 0)
        {
LABEL_168:
          v13 = 0;
          break;
        }
      }
      v25 = **((_QWORD **)v14 - 4);
      v26 = **(_QWORD **)(v15 - 32);
      v27 = *(unsigned __int8 *)(v25 + 8);
      if (v27 > 0x11)
        goto LABEL_53;
      if (((1 << v27) & 0xAC7F) != 0)
      {
LABEL_59:
        v29 = *(unsigned __int8 *)(v26 + 8);
        if (v29 > 0x11)
          goto LABEL_62;
        if (((1 << v29) & 0xAC7F) != 0)
          goto LABEL_68;
        if (((1 << v29) & 0x30000) == 0)
        {
LABEL_62:
          if ((v29 & 0xFE) != 0x12 && v29 != 21)
            goto LABEL_168;
        }
        if (!llvm::Type::isSizedDerivedType(v26, 0))
          goto LABEL_168;
LABEL_68:
        v31 = *((_QWORD *)this + 1);
        sub_1C4768AD0(v31, v25);
        v33 = v32;
        v35 = v34 == 1;
        llvm::DataLayout::getAlignment(v31, v25);
        v38 = v37;
        if (v35)
        if ((((1 << v38) + ((unint64_t)(v33 + 7) >> 3) - 1) & -(1 << v38)) != 0)
        {
          v39 = *((_QWORD *)this + 1);
          sub_1C4768AD0(v39, v26);
          v41 = v40;
          v43 = v42 == 1;
          llvm::DataLayout::getAlignment(v39, v26);
          v46 = v45;
          if (v43)
          if ((((1 << v46) + ((unint64_t)(v41 + 7) >> 3) - 1) & -(1 << v46)) != 0)
          {
            v13 = 1;
            goto LABEL_75;
          }
        }
        goto LABEL_168;
      }
      if (((1 << v27) & 0x30000) == 0)
      {
LABEL_53:
        if ((v27 & 0xFE) != 0x12 && v27 != 21)
          goto LABEL_168;
      }
      if (!llvm::Type::isSizedDerivedType(v25, 0))
        goto LABEL_168;
      goto LABEL_59;
    }
    if (v10 - 21 <= 0x3F && ((1 << (v10 - 21)) & 0x8000000000001001) != 0)
      goto LABEL_13;
    if (v7 > 3)
      goto LABEL_168;
    ++v7;
    if (!v9 || v10 != 60)
    {
      if (v9 && v10 == 85)
      {
        UnderlyingObject = llvm::getUnderlyingObject(*(llvm **)(v9 - 64), (const llvm::Value *)6);
        v70 = llvm::getUnderlyingObject(*(llvm **)(v9 - 32), (const llvm::Value *)6);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, (uint64_t)UnderlyingObject);
        if (v71)
        {
          v72 = v96;
          if (v96 >= (unint64_t)HIDWORD(v96))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 8);
            v72 = v96;
          }
          *((_QWORD *)v95 + v72) = UnderlyingObject;
          LODWORD(v96) = v96 + 1;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, (uint64_t)v70);
        if (v73)
        {
          v74 = v96;
          if (v96 >= (unint64_t)HIDWORD(v96))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 8);
            v74 = v96;
          }
          *((_QWORD *)v95 + v74) = v70;
          LODWORD(v96) = v96 + 1;
        }
        goto LABEL_13;
      }
      v13 = 0;
      if (!v9 || v10 != 83)
        break;
      v75 = *(_DWORD *)(v9 + 20);
      if ((v75 & 0x40000000) != 0)
      {
        v77 = *(llvm ***)(v9 - 8);
        v76 = v75 & 0x7FFFFFF;
        if (!v76)
        {
LABEL_13:
          v13 = 1;
          goto LABEL_75;
        }
      }
      else
      {
        v76 = v75 & 0x7FFFFFF;
        v77 = (llvm **)(v9 - 32 * v76);
        if (!v76)
          goto LABEL_13;
      }
      v78 = 32 * v76;
      do
      {
        v79 = llvm::getUnderlyingObject(*v77, (const llvm::Value *)6);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, (uint64_t)v79);
        if (v80)
        {
          v81 = v96;
          if (v96 >= (unint64_t)HIDWORD(v96))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, (uint64_t)v97, v96 + 1, 8);
            v81 = v96;
          }
          *((_QWORD *)v95 + v81) = v79;
          LODWORD(v96) = v96 + 1;
        }
        v77 += 4;
        v13 = 1;
        v78 -= 32;
      }
      while (v78);
      goto LABEL_75;
    }
    v47 = llvm::getUnderlyingObject(*(llvm **)(v9 - 32), (const llvm::Value *)6);
    v90 = v94;
    v91 = v94;
    v92 = 8;
    v93 = 0;
    v98 = v100;
    v99 = 0x800000000;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v90, (uint64_t)v47);
    v48 = v99;
    if (v99 >= (unint64_t)HIDWORD(v99))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 8);
      v48 = v99;
    }
    v98[v48] = v47;
    v49 = v99 + 1;
    while (1)
    {
      while (1)
      {
        v50 = v98;
        v51 = v98[--v49];
        LODWORD(v99) = v49;
        v52 = *(unsigned __int8 *)(v51 + 16);
        if (v52 >= 4 && (v52 - 21 > 0x3F || ((1 << (v52 - 21)) & 0x8000000000001001) == 0))
          break;
        if (!v49)
          goto LABEL_130;
      }
      v54 = v7 + 1;
      if (v7 > 3)
        break;
      if (v52 == 85)
      {
        v60 = llvm::getUnderlyingObject(*(llvm **)(v51 - 64), (const llvm::Value *)6);
        v61 = llvm::getUnderlyingObject(*(llvm **)(v51 - 32), (const llvm::Value *)6);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v90, (uint64_t)v60);
        if (v62)
        {
          v63 = v99;
          if (v99 >= (unint64_t)HIDWORD(v99))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 8);
            v63 = v99;
          }
          v98[v63] = v60;
          LODWORD(v99) = v99 + 1;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v90, (uint64_t)v61);
        v49 = v99;
        if (!v64)
          goto LABEL_118;
        if (v99 >= HIDWORD(v99))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 8);
          v49 = v99;
        }
        v98[v49] = v61;
        goto LABEL_109;
      }
      if (v52 != 83)
      {
        if (v52 != 60)
          break;
        v55 = llvm::getUnderlyingObject(*(llvm **)(v51 - 32), (const llvm::Value *)6);
        v56 = v99;
        if (v99 >= (unint64_t)HIDWORD(v99))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 8);
          v56 = v99;
        }
        v98[v56] = v55;
LABEL_109:
        v49 = v99 + 1;
        LODWORD(v99) = v99 + 1;
        goto LABEL_118;
      }
      v57 = *(_DWORD *)(v51 + 20);
      if ((v57 & 0x40000000) != 0)
      {
        v59 = *(llvm ***)(v51 - 8);
        v58 = v57 & 0x7FFFFFF;
        if (v58)
        {
LABEL_111:
          v65 = 32 * v58;
          do
          {
            v66 = llvm::getUnderlyingObject(*v59, (const llvm::Value *)6);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v90, (uint64_t)v66);
            if (v67)
            {
              v68 = v99;
              if (v99 >= (unint64_t)HIDWORD(v99))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 8);
                v68 = v99;
              }
              v98[v68] = v66;
              LODWORD(v99) = v99 + 1;
            }
            v59 += 4;
            v65 -= 32;
          }
          while (v65);
          v49 = v99;
        }
      }
      else
      {
        v58 = v57 & 0x7FFFFFF;
        v59 = (llvm **)(v51 - 32 * v58);
        if (v58)
          goto LABEL_111;
      }
LABEL_118:
      v7 = v54;
      if (!v49)
      {
LABEL_130:
        v13 = 1;
        v50 = v98;
        goto LABEL_131;
      }
    }
    v13 = 0;
    ++v7;
LABEL_131:
    if (v50 != v100)
      free(v50);
    if (v91 != v90)
      free(v91);
LABEL_75:
    if (!(_DWORD)v13)
      break;
    v8 = v96;
  }
  while ((_DWORD)v96);
  if (v95 != v97)
    free(v95);
  if (v86 != v85)
    free(v86);
  return v13;
}

BOOL llvm::GlobalsAAResult::alias(uint64_t a1, llvm::Value **a2, llvm::Value **a3)
{
  llvm *v5;
  llvm *UnderlyingObject;
  llvm *v7;
  llvm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v23;
  const llvm::GlobalValue *v24;
  const llvm::Value *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v38;
  uint64_t v40;

  v5 = llvm::Value::stripPointerCastsForAliasAnalysis(*a2);
  UnderlyingObject = llvm::getUnderlyingObject(v5, (const llvm::Value *)6);
  v7 = llvm::Value::stripPointerCastsForAliasAnalysis(*a3);
  v8 = llvm::getUnderlyingObject(v7, (const llvm::Value *)6);
  v9 = (uint64_t)v8;
  if (*((unsigned __int8 *)UnderlyingObject + 16) >= 4u)
    v10 = 0;
  else
    v10 = (uint64_t)UnderlyingObject;
  if (*((unsigned __int8 *)v8 + 16) >= 4u)
    v11 = 0;
  else
    v11 = (uint64_t)v8;
  if (v10 | v11)
  {
    if (v10)
    {
      v12 = sub_1C477672C(a1 + 48, v10);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = 64;
      if (v13 == *(_QWORD *)(a1 + 48))
        v14 = 68;
      if (v12 == (_QWORD *)(v13 + 8 * *(unsigned int *)(a1 + v14)))
        v10 = 0;
    }
    if (v11)
    {
      v15 = sub_1C477672C(a1 + 48, v11);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = 64;
      if (v16 == *(_QWORD *)(a1 + 48))
        v17 = 68;
      if (v15 == (_QWORD *)(v16 + 8 * *(unsigned int *)(a1 + v17)))
        v18 = 0;
      else
        v18 = v11;
      v19 = v10 != 0;
      v20 = v18 != 0;
      v21 = v10 == v18;
      if (v10)
      {
        if (v18 && v10 != v18)
          return 0;
      }
    }
    else
    {
      v20 = 0;
      v18 = 0;
      v19 = v10 != 0;
      v21 = v10 == 0;
    }
    v23 = v19 || v20;
    if (byte_1ED7F17F0)
    {
      if (v23 && !v21)
        return 0;
    }
    if (((v23 ^ 1 | v21) & 1) == 0)
    {
      v24 = (const llvm::GlobalValue *)(v19 ? v10 : v18);
      v25 = v19 ? (const llvm::Value *)v9 : UnderlyingObject;
      if ((llvm::GlobalsAAResult::isNonEscapingGlobalNoAlias((llvm::GlobalsAAResult *)a1, v24, v25) & 1) != 0)
        return 0;
    }
  }
  if (*((_BYTE *)UnderlyingObject + 16) == 60
    && ((v26 = *((_QWORD *)UnderlyingObject - 4)) != 0 ? (v27 = *(_BYTE *)(v26 + 16) == 3) : (v27 = 0), v27))
  {
    v29 = sub_1C477672C(a1 + 152, *((_QWORD *)UnderlyingObject - 4));
    v30 = *(_QWORD *)(a1 + 160);
    v31 = 168;
    if (v30 == *(_QWORD *)(a1 + 152))
      v31 = 172;
    if (v29 == (_QWORD *)(v30 + 8 * *(unsigned int *)(a1 + v31)))
      v28 = 0;
    else
      v28 = v26;
  }
  else
  {
    v28 = 0;
  }
  if (*(_BYTE *)(v9 + 16) != 60
    || ((v32 = *(_QWORD *)(v9 - 32)) != 0 ? (v33 = *(_BYTE *)(v32 + 16) == 3) : (v33 = 0), !v33))
  {
    v32 = 0;
    if (v28)
      goto LABEL_63;
    goto LABEL_61;
  }
  v34 = sub_1C477672C(a1 + 152, *(_QWORD *)(v9 - 32));
  v35 = *(_QWORD *)(a1 + 160);
  v36 = 168;
  if (v35 == *(_QWORD *)(a1 + 152))
    v36 = 172;
  if (v34 == (_QWORD *)(v35 + 8 * *(unsigned int *)(a1 + v36)))
    v32 = 0;
  if (!v28)
  {
LABEL_61:
    v40 = 0;
    if (sub_1C4E2F6FC(*(_QWORD *)(a1 + 248), *(_DWORD *)(a1 + 264), (uint64_t)UnderlyingObject, &v40))
      v28 = *(_QWORD *)(v40 + 8);
  }
LABEL_63:
  if (!v32)
  {
    v40 = 0;
    if (sub_1C4E2F6FC(*(_QWORD *)(a1 + 248), *(_DWORD *)(a1 + 264), v9, &v40))
      v32 = *(_QWORD *)(v40 + 8);
  }
  if (v28 && v32 && v28 != v32)
    return 0;
  if (byte_1ED7F17F0)
    v38 = (v28 | v32) == 0;
  else
    v38 = 1;
  return v38 || v28 == v32;
}

uint64_t llvm::GlobalsAAResult::getModRefInfoForArgument(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  unsigned __int8 v3;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  const llvm::Value *v13;
  llvm **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm **v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  llvm::Value *v23[2];
  __int128 v24;
  __int128 v25;
  llvm::Value *v26[2];
  __int128 v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[6];

  v31[4] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 64);
  if (v7 && (*(_BYTE *)(v7 + 17) & 0x10) != 0)
    return 4;
  LODWORD(v26[0]) = 7;
  if ((!sub_1C53E4BBC(a2, (__int32 *)v26, 1uLL)
     || (v10 = *(_QWORD *)(a2 - 32)) != 0
     && !*(_BYTE *)(v10 + 16)
     && *(_QWORD *)(v10 + 24) == *(_QWORD *)(a2 + 72)
     && *(_DWORD *)(v10 + 36) == 7)
    && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
  {
    return 4;
  }
  v11 = sub_1C4DD007C(a2, 45) ? 5 : 7;
  v22 = v11;
  v12 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v21 = sub_1C4DD000C(a2);
  if (v12 == (uint64_t *)v21)
  {
    return 4;
  }
  else
  {
    while (1)
    {
      v29 = v31;
      v30 = 0x400000000;
      llvm::getUnderlyingObjects(*v12, (uint64_t)&v29, 0, (llvm::Value *)6);
      v14 = (llvm **)v29;
      if ((_DWORD)v30)
      {
        v15 = 8 * v30;
        do
        {
          if ((llvm::isIdentifiedObject(*v14, v13) & 1) == 0)
          {
            v14 = (llvm **)v29;
            if (!(_DWORD)v30)
              goto LABEL_28;
            v16 = 8 * v30;
            while (1)
            {
              v26[0] = *v14;
              v26[1] = (llvm::Value *)-1;
              v27 = 0u;
              v28 = 0u;
              v23[0] = a3;
              v23[1] = (llvm::Value *)-1;
              v24 = 0u;
              v25 = 0u;
              if (llvm::GlobalsAAResult::alias(a1, v26, v23))
                break;
              ++v14;
              v16 -= 8;
              if (!v16)
                goto LABEL_22;
            }
            v20 = 0;
            v14 = (llvm **)v29;
            v3 = v22;
            goto LABEL_31;
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
LABEL_22:
        v17 = v30;
        v14 = (llvm **)v29;
        if (!(_DWORD)v30)
          goto LABEL_28;
        v18 = 0;
        v19 = (llvm **)((char *)v29 + 8 * v30);
        while (*(llvm::Value **)((char *)v29 + v18) != a3)
        {
          v18 += 8;
          if (8 * v30 == v18)
            goto LABEL_29;
        }
        v19 = (llvm **)((char *)v29 + v18);
      }
      else
      {
LABEL_28:
        v17 = 0;
        v19 = v14;
      }
LABEL_29:
      v20 = v19 - v14 == v17;
      if (v19 - v14 != v17)
        v3 = v22;
LABEL_31:
      if (v14 != v31)
        free(v14);
      if (!v20)
        return v3;
      v12 += 4;
      v8 = 4;
      if (v12 == (uint64_t *)v21)
        return v8;
    }
  }
}

uint64_t llvm::GlobalsAAResult::getModRefInfo(uint64_t a1, uint64_t a2, llvm **a3)
{
  llvm *UnderlyingObject;
  BOOL v6;
  llvm::Value *v7;
  char v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  UnderlyingObject = llvm::getUnderlyingObject(*a3, (const llvm::Value *)6);
  if (UnderlyingObject)
    v6 = *((unsigned __int8 *)UnderlyingObject + 16) > 3u;
  else
    v6 = 1;
  if (v6)
    goto LABEL_7;
  v7 = UnderlyingObject;
  if ((*((_DWORD *)UnderlyingObject + 8) & 0xFu) - 7 > 1)
    goto LABEL_7;
  if (*(_BYTE *)(a1 + 144))
    goto LABEL_7;
  v10 = *(_QWORD *)(a2 - 32);
  if (!v10 || *(_BYTE *)(v10 + 16) || *(_QWORD *)(v10 + 24) != *(_QWORD *)(a2 + 72))
    goto LABEL_7;
  v11 = sub_1C477672C(a1 + 48, (uint64_t)UnderlyingObject);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = 64;
  if (v12 == *(_QWORD *)(a1 + 48))
    v13 = 68;
  if (v11 == (_QWORD *)(v12 + 8 * *(unsigned int *)(a1 + v13)))
  {
LABEL_7:
    v8 = 7;
  }
  else
  {
    v16 = v10;
    v17 = 0;
    v14 = sub_1C4926528(a1 + 272, &v16, &v17);
    v8 = 7;
    if (v14 && v17 != *(_QWORD *)(a1 + 272) + 16 * *(unsigned int *)(a1 + 288))
    {
      v15 = sub_1C4E2EAB8((uint64_t *)(v17 + 8), (uint64_t)v7);
      v8 = llvm::GlobalsAAResult::getModRefInfoForArgument(a1, a2, v7) | v15;
    }
  }
  if ((v8 & 3) != 0)
    return v8 & 7;
  else
    return 4;
}

uint64_t sub_1C4E2EAB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *a1;
  if ((*a1 & 4) != 0)
    v3 = 5;
  else
    v3 = 4;
  v4 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v6 = sub_1C6191E0C(v2 & 0xFFFFFFFFFFFFFFF8, a2);
    v7 = v4 + 8;
    if ((*(_BYTE *)v4 & 1) != 0)
    {
      v8 = 16;
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 8);
      v8 = *(unsigned int *)(v4 + 16);
    }
    if (v7 + 16 * v8 != v6)
      v3 |= *(_BYTE *)(v6 + 8);
  }
  return v3;
}

uint64_t llvm::GlobalsAAResult::GlobalsAAResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t *i;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
  {
    if (v5 == a2 + 16)
    {
      *(_QWORD *)(a1 + 40) = a1 + 16;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a1 + 48, (void *)(a1 + 80), 8, (uint64_t *)(a2 + 48));
  *(_BYTE *)(a1 + 144) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a1 + 152, (void *)(a1 + 184), 8, (uint64_t *)(a2 + 152));
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a2 + 256) = 0;
  v6 = *(_DWORD *)(a1 + 260);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a2 + 260) = v6;
  v7 = *(_DWORD *)(a1 + 264);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a2 + 264) = v7;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a2 + 280) = 0;
  v8 = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a2 + 284) = v8;
  v9 = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = v9;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  v10 = sub_1C6185480((uint64_t *)(a1 + 320), (_QWORD *)(a2 + 320));
  for (i = *(uint64_t **)(a1 + 328); i != v10; i = (uint64_t *)i[1])
    i[6] = a1;
  return a1;
}

void llvm::GlobalsAAResult::~GlobalsAAResult(llvm::GlobalsAAResult *this)
{
  void *v2;
  void *v3;
  llvm::GlobalsAAResult *v4;
  uint64_t v5;

  sub_1C4E2F5A8((_QWORD *)this + 40);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 37), 8);
  sub_1C4E2FF38((uint64_t)this + 272);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 34), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 31), 8);
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2 != *((void **)this + 19))
    free(v2);
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3 != *((void **)this + 6))
    free(v3);
  v4 = (llvm::GlobalsAAResult *)*((_QWORD *)this + 5);
  if (v4 == (llvm::GlobalsAAResult *)((char *)this + 16))
  {
    v5 = 4;
    v4 = (llvm::GlobalsAAResult *)((char *)this + 16);
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    return;
  }
  if (v4)
  {
    v5 = 5;
    goto LABEL_7;
  }
}

_QWORD *llvm::RecomputeGlobalsAAPass::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t CachedResultImpl;
  uint64_t v8;
  uint64_t ResultImpl;
  void *v10;
  void *v11;
  llvm::CallGraph *v12;
  llvm::Module *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v18;
  int v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  void *v25;

  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a2, (uint64_t)&llvm::GlobalsAA::Key, (uint64_t)a1);
  if (CachedResultImpl)
  {
    v8 = CachedResultImpl;
    ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::CallGraphAnalysis::Key, (uint64_t)a1);
    v10 = *(void **)(v8 + 64);
    if (v10 != *(void **)(v8 + 56))
    {
      v14 = *(unsigned int *)(v8 + 72);
      if (v14 >= 0x21 && 4 * (*(_DWORD *)(v8 + 76) - *(_DWORD *)(v8 + 80)) < v14)
      {
        free(v10);
        v18 = *(_DWORD *)(v8 + 76) - *(_DWORD *)(v8 + 80);
        v19 = 1 << (33 - __clz(v18 - 1));
        *(_DWORD *)(v8 + 76) = 0;
        *(_DWORD *)(v8 + 80) = 0;
        if (v18 <= 0x10)
          v20 = 32;
        else
          v20 = v19;
        *(_DWORD *)(v8 + 72) = v20;
        v21 = malloc_type_malloc(8 * v20, 0x4065EBACuLL);
        if (!v21)
          goto LABEL_30;
        *(_QWORD *)(v8 + 64) = v21;
        memset(v21, 255, 8 * *(unsigned int *)(v8 + 72));
LABEL_5:
        *(_BYTE *)(v8 + 152) = 0;
        v11 = *(void **)(v8 + 168);
        if (v11 == *(void **)(v8 + 160))
        {
LABEL_6:
          *(_DWORD *)(v8 + 180) = 0;
          *(_DWORD *)(v8 + 184) = 0;
LABEL_7:
          v12 = (llvm::CallGraph *)(ResultImpl + 8);
          sub_1C6191AC8((unsigned int *)(v8 + 256));
          sub_1C4E2EF5C((_QWORD *)(v8 + 280));
          sub_1C4E2F044((_DWORD *)(v8 + 304));
          sub_1C4E2F5A8((_QWORD *)(v8 + 328));
          llvm::GlobalsAAResult::CollectSCCMembership((llvm::GlobalsAAResult *)(v8 + 8), v12);
          llvm::GlobalsAAResult::AnalyzeGlobals((llvm::GlobalsAAResult *)(v8 + 8), a1);
          llvm::GlobalsAAResult::AnalyzeCallGraph((llvm::GlobalsAAResult *)(v8 + 8), v12, v13);
          goto LABEL_2;
        }
        v16 = *(unsigned int *)(v8 + 176);
        if (v16 < 0x21 || 4 * (*(_DWORD *)(v8 + 180) - *(_DWORD *)(v8 + 184)) >= v16)
        {
          memset(v11, 255, 8 * v16);
          goto LABEL_6;
        }
        free(v11);
        v22 = *(_DWORD *)(v8 + 180) - *(_DWORD *)(v8 + 184);
        v23 = 1 << (33 - __clz(v22 - 1));
        *(_DWORD *)(v8 + 180) = 0;
        *(_DWORD *)(v8 + 184) = 0;
        if (v22 <= 0x10)
          v24 = 32;
        else
          v24 = v23;
        *(_DWORD *)(v8 + 176) = v24;
        v25 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
        if (v25)
        {
          *(_QWORD *)(v8 + 168) = v25;
          memset(v25, 255, 8 * *(unsigned int *)(v8 + 176));
          goto LABEL_7;
        }
LABEL_30:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      memset(v10, 255, 8 * v14);
    }
    *(_DWORD *)(v8 + 76) = 0;
    *(_DWORD *)(v8 + 80) = 0;
    goto LABEL_5;
  }
LABEL_2:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

_QWORD *sub_1C4E2EF5C(_QWORD *result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
      {
        v4 = (_QWORD *)*result;
        v5 = 16 * v3;
        do
        {
          if (*v4 != -4096)
          {
            if (*v4 != -8192)
            {
              v6 = v4[1] & 0xFFFFFFFFFFFFFFF8;
              if (v6)
              {
                if ((*(_BYTE *)v6 & 1) == 0)
                  MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 + 8), 8);
                result = (_QWORD *)MEMORY[0x1CAA32FC0](v6, 0x1000C400BDB4DB4);
              }
            }
            *v4 = -4096;
          }
          v4 += 2;
          v5 -= 16;
        }
        while (v5);
      }
      v1[1] = 0;
    }
    else
    {
      return sub_1C4E30058(result);
    }
  }
  return result;
}

_DWORD *sub_1C4E2F044(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C476B2A4(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1C4E2F094(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeCallGraphWrapperPassPass(a1, a2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Globals Alias Analysis";
  *(_QWORD *)(v3 + 8) = 22;
  *(_QWORD *)(v3 + 16) = "globals-aa";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &llvm::GlobalsAAWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::GlobalsAAWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4E2F138(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4E2F1DC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E2F360(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      v9[8] = *(_BYTE *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E2F360(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C4E2F360(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E2F138((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_BYTE *)v11 + 8) = *(_BYTE *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

int *sub_1C4E2F420(int *a1)
{
  int v2;
  int *result;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      v5 = a1 + 2;
      v6 = 16;
    }
    else
    {
      v5 = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
    }
    return &v5[4 * v6];
  }
  else if ((v2 & 1) != 0)
  {
    result = a1 + 2;
    v4 = a1 + 66;
LABEL_4:
    while (*(_QWORD *)result == -4096 || *(_QWORD *)result == -8192)
    {
      result += 4;
      if (result == v4)
        return v4;
    }
  }
  else
  {
    result = (int *)*((_QWORD *)a1 + 1);
    v7 = a1[4];
    if ((_DWORD)v7)
    {
      v4 = &result[4 * v7];
      goto LABEL_4;
    }
  }
  return result;
}

void *sub_1C4E2F4A4(int *a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;
  char v10;
  size_t v11;

  v4 = *a1;
  if ((*a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
    v4 = *a1;
  }
  *a1 = v4 | 1;
  if ((*a2 & 1) != 0 || a2[4] <= 0x10u)
  {
    v8 = 0;
    *a1 = *a2 | 1;
    a1[1] = a2[1];
    v6 = a1 + 2;
  }
  else
  {
    *a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 16;
    else
      v5 = a2[4];
    *((_QWORD *)a1 + 1) = operator new(16 * v5, (std::align_val_t)8uLL);
    v6 = a1 + 2;
    *((_QWORD *)a1 + 2) = v5;
    v7 = *a1;
    *a1 = *a2 & 0xFFFFFFFE | *a1 & 1;
    a1[1] = a2[1];
    if ((v7 & 1) != 0)
    {
      v8 = 0;
    }
    else
    {
      v6 = (_QWORD *)*v6;
      v8 = 1;
    }
  }
  v10 = *(_BYTE *)a2;
  v9 = a2 + 2;
  if ((v10 & 1) == 0)
  {
    v9 = (_QWORD *)*v9;
    if (!v8)
      goto LABEL_13;
LABEL_16:
    v11 = 16 * a1[4];
    return memcpy(v6, v9, v11);
  }
  if (v8)
    goto LABEL_16;
LABEL_13:
  v11 = 256;
  return memcpy(v6, v9, v11);
}

_QWORD *sub_1C4E2F5A8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        v5 = result[5];
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          v7 = result[3] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v7 = result[4];
          v8 = (unint64_t *)result[4];
          if (v8)
          {
            *v8 = *v8 & 7 | v7;
          }
          else
          {
            v9 = result[5];
            v10 = ***(int32x2_t ****)v9;
            v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                v15 = (uint64_t *)(v11 + 16 * v14);
                v16 = *v15;
                if (v9 == *v15)
                {
LABEL_16:
                  *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = result[5];
                }
                else
                {
                  v17 = 1;
                  while (v16 != -4096)
                  {
                    v18 = v14 + v17++;
                    v14 = v18 & v13;
                    v16 = *(_QWORD *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_16;
                    }
                  }
                }
                *(_BYTE *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_1C4E2F6FC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 16 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 16 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

_QWORD *sub_1C4E2F790(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = operator new(0x40uLL);
  v4[3] = 2;
  *v4 = 0;
  v4[1] = 0;
  v4[4] = 0;
  v4[5] = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v4 + 3));
  v4[2] = off_1E8136FE8;
  v4[6] = a1;
  v4[7] = 0;
  return v4;
}

_QWORD *sub_1C4E2F800(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4926528((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E2F858(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4E2F858(_DWORD *a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = a1[2];
  v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[3] > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E2F908((uint64_t)a1, v6);
  v8 = 0;
  sub_1C4926528((uint64_t)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096)
    --a1[3];
  return a3;
}

_QWORD *sub_1C4E2F908(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E2F9C0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E2F9C0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4926528(v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      a2[1] = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C4E2FA68(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61920E8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4E2FB20(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = 0;
LABEL_8:
    v6 = sub_1C4E2FC78(a1, (uint64_t)a2, a2, v10);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v7 == -8192;
      if (v12)
        v8 = v6;
      v13 = v5 + v9++;
      v5 = v13 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v10 = v8;
    else
      v10 = v6;
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1C4E2FBDC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E2FC78(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4E2FDA8(a1, v7);
      v17 = 0;
      sub_1C4E2FBDC((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4E2FDA8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4E2FDA8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E2FE60(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E2FE60(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_11;
        }
        if (v11)
          v9 = v11;
      }
LABEL_11:
      *(_QWORD *)v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C4E2FF38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *v3 & 0xFFFFFFFFFFFFFFF8;
        if (v4)
        {
          if ((*(_BYTE *)v4 & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 8), 8);
          result = MEMORY[0x1CAA32FC0](v4, 0x1000C400BDB4DB4);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_1C4E2FFCC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E2FFE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8137010;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4E30014(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8137010;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4E30030(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetLibraryAnalysis::Key, a2)+ 8;
}

_QWORD *sub_1C4E30058(_QWORD *a1)
{
  int v2;
  _QWORD *result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  result = (_QWORD *)sub_1C4E2FF38((uint64_t)a1);
  if (v2)
  {
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == *((_DWORD *)a1 + 4))
    {
      a1[1] = 0;
      v6 = 16 * v5;
      v7 = (_QWORD *)*a1;
      do
      {
        *v7 = -4096;
        v7 += 2;
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*a1, 8);
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = operator new(16 * v9, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *result = -4096;
          result += 2;
          v11 -= 16;
        }
        while (v11);
      }
    }
  }
  else if (*((_DWORD *)a1 + 4))
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*a1, 8);
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    a1[1] = 0;
  }
  return result;
}

void sub_1C4E3016C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E30180(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8137058;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4E301B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8137058;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4E301D0(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

uint64_t sub_1C4E30420()
{
  int v1;
  char v2;
  char *v3;

  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C6191EFC(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F1770, &dword_1C475E000);
}

BOOL llvm::GPUAAResult::alias(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  v3 = **a2;
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 != 15)
    return 1;
  v5 = **a3;
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 != 15)
    return 1;
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
  return v6 < 0x100 || v4 < 0x100 || (v6 ^ v4) <= 0xFF;
}

BOOL llvm::GPUAAResult::pointsToConstantMemory(uint64_t a1, llvm **a2)
{
  llvm *UnderlyingObject;
  int v3;

  UnderlyingObject = llvm::getUnderlyingObject(*a2, (const llvm::Value *)6);
  v3 = *(_DWORD *)(*(_QWORD *)UnderlyingObject + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)UnderlyingObject + 16) + 8);
  return (v3 & 0xFFFFFF00) == 512;
}

uint64_t llvm::GPUAA::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;

  result = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1);
  v6 = *(_QWORD *)(a1 + 40) + 272;
  *a3 = 0;
  a3[1] = result + 8;
  a3[2] = v6;
  return result;
}

uint64_t llvm::GPUAAResult::getModRefBehavior(llvm::GPUAAResult *this, const llvm::CallBase *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  _QWORD *v7;
  char *Name;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;

  v2 = *((_QWORD *)a2 - 4);
  if (!v2 || *(_BYTE *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *((_QWORD *)a2 + 9))
    return 63;
  v4 = *(_QWORD *)(v2 + 112);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 17) & 0x10) != 0)
      return 4;
    if ((*(_BYTE *)(v4 + 17) & 0x20) != 0)
      v5 = 61;
    else
      v5 = 63;
    if ((*(_BYTE *)(v4 + 12) & 8) != 0)
      result = v5 & 0xF;
    else
      result = v5;
  }
  else
  {
    result = 63;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(_BYTE *)(v7[1] + 40) & 0x80) == 0 && *(unsigned __int8 *)(*v7 + 81) >= 0x40u)
  {
    v14 = result;
    v13 = *((_QWORD *)a2 - 4);
    Name = llvm::Value::getName((llvm::Value *)v2);
    if (v9 == 16
      && (*(_QWORD *)Name == 0x705F7465736D656DLL ? (v10 = *((_QWORD *)Name + 1) == 0x36316E7265747461) : (v10 = 0),
          v10
       && (v11 = *(_QWORD *)(v13 + 24), *(_DWORD *)(v11 + 8) <= 0xFFu)
       && *(_DWORD *)(v11 + 12) == 4
       && (v12 = *(_QWORD **)(v11 + 16), *(_BYTE *)(v12[1] + 8) == 15)
       && *(_BYTE *)(v12[2] + 8) == 15
       && *(_BYTE *)(v12[3] + 8) == 13))
    {
      return 15;
    }
    else
    {
      return v14;
    }
  }
  return result;
}

uint64_t llvm::GPUAAResult::getModRefBehavior(llvm::GPUAAResult *this, const llvm::Function *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  _QWORD *v6;
  char *Name;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v13;

  v3 = *((_QWORD *)a2 + 14);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 17) & 0x10) != 0)
      return 4;
    if ((*(_BYTE *)(v3 + 17) & 0x20) != 0)
      v4 = 61;
    else
      v4 = 63;
    if ((*(_BYTE *)(v3 + 12) & 8) != 0)
      result = v4 & 0xF;
    else
      result = v4;
  }
  else
  {
    result = 63;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*(_BYTE *)(v6[1] + 40) & 0x80) == 0 && *(unsigned __int8 *)(*v6 + 81) >= 0x40u)
  {
    v13 = result;
    Name = llvm::Value::getName(a2);
    if (v8 == 16
      && (*(_QWORD *)Name == 0x705F7465736D656DLL ? (v9 = *((_QWORD *)Name + 1) == 0x36316E7265747461) : (v9 = 0),
          v9
       && (v10 = *((_QWORD *)a2 + 3), *(_DWORD *)(v10 + 8) <= 0xFFu)
       && *(_DWORD *)(v10 + 12) == 4
       && (v11 = *(_QWORD **)(v10 + 16), *(_BYTE *)(v11[1] + 8) == 15)
       && *(_BYTE *)(v11[2] + 8) == 15
       && *(_BYTE *)(v11[3] + 8) == 13))
    {
      return 15;
    }
    else
    {
      return v13;
    }
  }
  return result;
}

uint64_t llvm::GPUAAWrapperPass::doInitialization(llvm::GPUAAWrapperPass *this, llvm::Module *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17[2];
  int v18;
  uint64_t v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *__src;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v7 == (_QWORD *)((char *)a2 + 24))
    return 0;
  v8 = v6;
  while (1)
  {
    v9 = v7 ? (uint64_t)(v7 - 7) : 0;
    if (!v7 || *(_BYTE *)(v9 + 16) != 3)
      break;
    if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_15;
LABEL_33:
    v7 = (_QWORD *)v7[1];
    if (v7 == (_QWORD *)((char *)a2 + 24))
      return 0;
  }
  if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 72) == v9 + 72 && (*(_BYTE *)(v9 + 34) & 0x80) == 0)
    goto LABEL_33;
LABEL_15:
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  llvm::TargetLibraryAnalysis::run(v6 + 32, v9, (uint64_t)&v24);
  *(_QWORD *)(v8 + 240) = v24;
  v10 = (uint64_t *)(v8 + 240);
  if (*(_BYTE *)(v8 + 320))
  {
    if (v10 != &v24)
    {
      v11 = (void **)(v8 + 248);
      v12 = v26;
      v13 = *(unsigned int *)(v8 + 256);
      if (v13 >= v26)
      {
        if (v26)
          memmove(*v11, __src, 8 * v26);
      }
      else
      {
        if (*(_DWORD *)(v8 + 260) < v26)
        {
          *(_DWORD *)(v8 + 256) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 248, v8 + 264, v12, 8);
LABEL_20:
          v13 = 0;
        }
        else
        {
          if (!(_DWORD)v13)
            goto LABEL_20;
          memmove(*v11, __src, 8 * v13);
        }
        if (v13 != v26)
          memcpy((char *)*v11 + 8 * v13, (char *)__src + 8 * v13, 8 * v26 - 8 * v13);
      }
      *(_DWORD *)(v8 + 256) = v12;
    }
    *(_DWORD *)(v8 + 312) = v28;
  }
  else
  {
    *(_QWORD *)(v8 + 248) = v8 + 264;
    *(_QWORD *)(v8 + 256) = 0x600000000;
    if (v26)
      sub_1C49DA960(v8 + 248, (uint64_t)&__src);
    *(_DWORD *)(v8 + 312) = v28;
    *(_BYTE *)(v8 + 320) = 1;
  }
  if (__src != &v27)
    free(__src);
  MEMORY[0x1CAA32FB4](v21, 8);
  sub_1C4D8B440(v19);
  sub_1C4D8B52C(v17);
  v14 = (_QWORD *)operator new();
  *v14 = 0;
  v14[1] = v10;
  v14[2] = (char *)a2 + 272;
  v15 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v14;
  if (v15)
    MEMORY[0x1CAA32FC0](v15, 0x60C4082687C62);
  return 0;
}

uint64_t llvm::GPUAAWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x60C4082687C62);
  return 0;
}

uint64_t sub_1C4E30B14(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "GPU Alias Analysis";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "gpu-aa";
  *(_QWORD *)(v2 + 24) = 6;
  *(_QWORD *)(v2 + 32) = &llvm::GPUAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::GPUAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

BOOL llvm::isGuard(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 84)
  {
    v3 = *(_QWORD *)(a1 - 32);
    return v3 && !*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72) && *(_DWORD *)(v3 + 36) == 125;
  }
  return result;
}

uint64_t llvm::isWidenableBranch(llvm *this, const llvm::User *a2)
{
  uint64_t result;
  const llvm::APInt *v3;
  uint64_t v4;
  llvm::ConstantInt *v5;
  unsigned int v6;
  char v7;
  llvm::ValueHandleBase *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v11 = 0;
  v13 = 0;
  result = llvm::parseWidenableBranch((uint64_t)this, &v13, &v12, &v11, &v10);
  if ((_DWORD)result)
  {
    if (!v13)
    {
      v4 = ***v11;
      if (!*(_QWORD *)(v4 + 1560))
      {
        v9 = result;
        v5 = *(llvm::ConstantInt **)(v4 + 1888);
        v6 = *(_DWORD *)(v4 + 1896);
        v15 = v6 >> 8;
        if (v6 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v14, 1, 0);
        }
        else
        {
          if (v6 <= 0xFF)
            v7 = 0;
          else
            v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v6);
          v14 = v7 & 1;
        }
        v8 = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v14, v3);
        if (v15 >= 0x41)
        {
          if (v14)
            MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
        }
        *(_QWORD *)(v4 + 1560) = v8;
        return v9;
      }
    }
  }
  return result;
}

uint64_t llvm::parseWidenableBranch(llvm *this, const llvm::User *a2, llvm::Value **a3, llvm::ConstantInt ****a4, llvm::BasicBlock **a5, llvm::BasicBlock **a6)
{
  uint64_t result;
  llvm::LLVMContext *v10;
  const llvm::APInt *v11;
  llvm::ValueHandleBase *True;
  unsigned int v13;
  llvm::Value **v14;
  llvm::ValueHandleBase **v15;

  v14 = 0;
  v15 = 0;
  result = llvm::parseWidenableBranch((uint64_t)this, &v15, &v14, a4, a5);
  if ((_DWORD)result)
  {
    v13 = result;
    if (v15)
      True = *v15;
    else
      True = llvm::ConstantInt::getTrue(***a4, v10, v11);
    *(_QWORD *)a2 = True;
    *a3 = *v14;
    return v13;
  }
  return result;
}

uint64_t llvm::isGuardAsWidenableBranch(llvm *this, const llvm::User *a2)
{
  uint64_t result;
  const llvm::APInt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  llvm::ConstantInt *v22;
  unsigned int v23;
  char v24;
  llvm::ValueHandleBase *v25;
  uint64_t v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;

  v26 = 0;
  v27 = 0;
  v29 = 0;
  result = llvm::parseWidenableBranch((uint64_t)this, &v29, &v28, &v27, &v26);
  if (!(_DWORD)result)
    return result;
  if (!v29)
  {
    v4 = ***v27;
    if (!*(_QWORD *)(v4 + 1560))
    {
      v22 = *(llvm::ConstantInt **)(v4 + 1888);
      v23 = *(_DWORD *)(v4 + 1896);
      v31 = v23 >> 8;
      if (v23 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v30, 1, 0);
      }
      else
      {
        if (v23 <= 0xFF)
          v24 = 0;
        else
          v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
        v30 = v24 & 1;
      }
      v25 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v30, v3);
      if (v31 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      *(_QWORD *)(v4 + 1560) = v25;
    }
  }
  v5 = v26 + 40;
  v6 = *(_QWORD *)(v26 + 48);
  if (v6 == v26 + 40)
    return 0;
  while (1)
  {
    v7 = v6 ? v6 - 24 : 0;
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v6 && v8 == 84)
    {
      v9 = *(_QWORD *)(v7 - 32);
      if (v9 && !*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v7 + 72) && *(_DWORD *)(v9 + 36) == 119)
        return 1;
    }
    else
    {
      v12 = (v8 - 33);
      if (v12 > 0x37)
        goto LABEL_24;
      if (((1 << v12) & 0x808001D0000010) != 0)
        return 0;
      if (v12 == 27)
      {
        if ((*(_WORD *)(v7 + 18) & 0x301) != 0)
          return 0;
        goto LABEL_24;
      }
      if (((1 << v12) & 0x8000000000041) == 0)
        goto LABEL_24;
    }
    v10 = *(_QWORD *)(v7 + 64);
    if (v10 && (*(_BYTE *)(v10 + 17) & 0x30) != 0)
      goto LABEL_24;
    v11 = *(_DWORD *)(v7 + 20);
    if (v11 < 0)
    {
      v13 = v7 - 32 * (v11 & 0x7FFFFFF);
      v16 = *(_QWORD *)(v13 - 8);
      v14 = v13 - 8;
      v15 = v16;
      if (v16)
        break;
    }
LABEL_17:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v7, 45) & 1) == 0)
    {
      result = llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44);
      if (!(_DWORD)result)
        return result;
    }
LABEL_24:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v7) & 1) != 0
      || (llvm::Instruction::willReturn((llvm::Instruction *)v7) & 1) == 0)
    {
      return 0;
    }
    result = 0;
    v6 = *(_QWORD *)(v6 + 8);
    if (v6 == v5)
      return result;
  }
  v17 = -v15;
  while (1)
  {
    v18 = *(_DWORD *)(*(_QWORD *)(v14 + v17) + 8);
    v19 = v18 > 7;
    v20 = (1 << v18) & 0x83;
    if (v19 || v20 == 0)
      return 0;
    v17 += 16;
    if (!v17)
      goto LABEL_17;
  }
}

uint64_t llvm::parseWidenableBranch(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v5 = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 30)
  {
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 3)
      return 0;
    v6 = *(_QWORD *)(a1 - 96);
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7 || *(_QWORD *)(v7 + 8))
      return 0;
    *a4 = *(_QWORD *)(a1 - 32);
    *a5 = *(_QWORD *)(a1 - 64);
    v9 = *(unsigned __int8 *)(v6 + 16);
    if (v9 == 56)
    {
      v13 = *(_QWORD *)(v6 - 64);
      if (v13)
      {
        v14 = *(_QWORD *)(v6 - 32);
        if (v14)
        {
          if (*(_BYTE *)(v13 + 16) == 84)
          {
            v15 = *(_QWORD *)(v13 - 32);
            if (v15)
            {
              if (!*(_BYTE *)(v15 + 16)
                && *(_QWORD *)(v15 + 24) == *(_QWORD *)(v13 + 72)
                && *(_DWORD *)(v15 + 36) == 138)
              {
                v16 = *(_QWORD *)(v13 + 8);
                if (v16)
                {
                  if (!*(_QWORD *)(v16 + 8))
                  {
                    v22 = *(_DWORD *)(v6 + 20);
                    if ((v22 & 0x40000000) != 0)
                      v23 = *(_QWORD *)(v6 - 8);
                    else
                      v23 = v6 - 32 * (v22 & 0x7FFFFFF);
                    *a3 = v23;
                    v25 = *(_DWORD *)(v6 + 20);
                    if ((v25 & 0x40000000) != 0)
                      v26 = *(_QWORD *)(v6 - 8);
                    else
                      v26 = v6 - 32 * (v25 & 0x7FFFFFF);
                    v21 = v26 + 32;
                    goto LABEL_36;
                  }
                }
              }
            }
          }
          if (*(_BYTE *)(v14 + 16) == 84)
          {
            v17 = *(_QWORD *)(v14 - 32);
            if (v17)
            {
              if (!*(_BYTE *)(v17 + 16)
                && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v14 + 72)
                && *(_DWORD *)(v17 + 36) == 138)
              {
                v18 = *(_QWORD *)(v14 + 8);
                if (v18)
                {
                  if (!*(_QWORD *)(v18 + 8))
                  {
                    v19 = *(_DWORD *)(v6 + 20);
                    if ((v19 & 0x40000000) != 0)
                      v20 = *(_QWORD *)(v6 - 8);
                    else
                      v20 = v6 - 32 * (v19 & 0x7FFFFFF);
                    *a3 = v20 + 32;
                    v24 = *(_DWORD *)(v6 + 20);
                    if ((v24 & 0x40000000) != 0)
                      v21 = *(_QWORD *)(v6 - 8);
                    else
                      v21 = v6 - 32 * (v24 & 0x7FFFFFF);
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
    }
    else if (v9 == 84)
    {
      v10 = *(_QWORD *)(v6 - 32);
      if (v10)
      {
        if (!*(_BYTE *)(v10 + 16) && *(_QWORD *)(v10 + 24) == *(_QWORD *)(v6 + 72) && *(_DWORD *)(v10 + 36) == 138)
        {
          v11 = *(_DWORD *)(a1 + 20);
          if ((v11 & 0x40000000) != 0)
            v12 = *(_QWORD *)(a1 - 8);
          else
            v12 = a1 - 32 * (v11 & 0x7FFFFFF);
          v21 = 0;
          *a3 = v12;
LABEL_36:
          *a2 = v21;
          return 1;
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t llvm::getNumOfCalls(llvm *this, Function *a2, Function *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    return 0;
  v4 = 0;
  do
  {
    v5 = *(_QWORD *)(v3 + 24);
    if (v5 && *(_BYTE *)(v5 + 16) == 84 && *(llvm **)(*(_QWORD *)(v5 + 40) + 56) == this)
      ++v4;
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3);
  return v4;
}

unint64_t llvm::getMaxFreq(llvm *this, Function *a2, const llvm::BlockFrequencyInfo *a3)
{
  char *v3;
  char *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t BlockFreq;

  v3 = (char *)this + 72;
  v4 = (char *)*((_QWORD *)this + 10);
  if (v4 == (char *)this + 72)
    return 0;
  v6 = 0;
  do
  {
    if (v4)
      v7 = (uint64_t)(v4 - 24);
    else
      v7 = 0;
    BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)a2, v7);
    if (BlockFreq > v6)
      v6 = BlockFreq;
    v4 = (char *)*((_QWORD *)v4 + 1);
  }
  while (v4 != v3);
  return v6;
}

unint64_t llvm::getHeatColor@<X0>(llvm *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm *v4;
  double v5;
  double v7;
  double v8;
  const char *v9;
  unint64_t result;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((unint64_t)this >= a2)
    v4 = (llvm *)a2;
  else
    v4 = this;
  v5 = 0.0;
  if (v4)
  {
    v7 = log2((double)(unint64_t)v4);
    v5 = v7 / log2((double)a2);
  }
  if (v5 > 1.0)
    v5 = 1.0;
  if (v5 >= 0.0)
    v8 = v5 * 99.0;
  else
    v8 = 0.0;
  v9 = &a3d50c3[8 * vcvtad_u64_f64(v8)];
  result = strlen(v9);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = result;
  if (result >= 0x17)
  {
    v12 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v12 = result | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    a3[1] = v11;
    a3[2] = v13 | 0x8000000000000000;
    *a3 = v14;
    a3 = v14;
  }
  else
  {
    *((_BYTE *)a3 + 23) = result;
    if (!result)
      goto LABEL_19;
  }
  result = (unint64_t)memcpy(a3, v9, v11);
LABEL_19:
  *((_BYTE *)a3 + v11) = 0;
  return result;
}

uint64_t llvm::IRSimilarity::IRInstructionData::IRInstructionData(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  *(_QWORD *)(a1 + 152) = a4;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(a1);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  *(_QWORD *)(a1 + 152) = a4;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(a1);
  return a1;
}

uint64_t llvm::IRSimilarity::IRInstructionData::initializeInstruction(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unsigned int v4;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) - 83 >= 0xFFFFFFFE;
  else
    v3 = 0;
  if (v3)
  {
    v4 = *(_WORD *)(v2 + 18) & 0x3F;
    if (v4 <= 0x27 && ((1 << v4) & 0xCC00000C0CLL) != 0)
      __asm { BR              X13 }
  }
  v6 = *(_DWORD *)(v2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(uint64_t **)(v2 - 8);
    v7 = v6 & 0x7FFFFFF;
    if (!v7)
      goto LABEL_24;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (uint64_t *)(v2 - 32 * v7);
    if (!v7)
      goto LABEL_24;
  }
  v9 = (uint64_t *)(this + 24);
  v10 = 32 * v7;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 16) - 81 <= 1 && *(_BYTE *)(v1 + 80))
    {
      v13 = *v9;
      v21 = *v8;
      this = sub_1C6193964(v1 + 24, v13, &v21);
    }
    else
    {
      v11 = *v8;
      v12 = *(unsigned int *)(v1 + 32);
      if (v12 >= *(unsigned int *)(v1 + 36))
      {
        this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v1 + 24, v1 + 40, v12 + 1, 8);
        v12 = *(unsigned int *)(v1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v12) = v11;
      ++*(_DWORD *)(v1 + 32);
    }
    v8 += 4;
    v10 -= 32;
  }
  while (v10);
  v2 = *(_QWORD *)(v1 + 16);
LABEL_24:
  if (v2 && *(_BYTE *)(v2 + 16) == 83)
  {
    v14 = *(_DWORD *)(v2 + 20);
    if ((v14 & 0x40000000) != 0)
    {
      v16 = *(_QWORD *)(v2 - 8);
      v15 = v14 & 0x7FFFFFF;
      if (!v15)
        return this;
    }
    else
    {
      v15 = v14 & 0x7FFFFFF;
      v16 = v2 - 32 * v15;
      if (!v15)
        return this;
    }
    v17 = (uint64_t *)(v16 + 32 * *(unsigned int *)(v2 + 60));
    v18 = *(_DWORD *)(v1 + 32);
    v19 = 8 * v15;
    do
    {
      v20 = *v17;
      if (v18 >= *(_DWORD *)(v1 + 36))
      {
        this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v1 + 24, v1 + 40, v18 + 1, 8);
        v18 = *(_DWORD *)(v1 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v18) = v20;
      v18 = *(_DWORD *)(v1 + 32) + 1;
      *(_DWORD *)(v1 + 32) = v18;
      ++v17;
      v19 -= 8;
    }
    while (v19);
  }
  return this;
}

uint64_t llvm::IRSimilarity::IRInstructionData::predicateForConsistency(uint64_t a1)
{
  uint64_t result;

  result = *(_WORD *)(a1 + 18) & 0x3F;
  if (result <= 0x27 && ((1 << result) & 0xCC00000C0CLL) != 0)
    return dword_1C85F321C[result - 2];
  return result;
}

double llvm::IRSimilarity::IRInstructionData::IRInstructionData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  *(_QWORD *)(a1 + 152) = a2;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  *(_QWORD *)(a1 + 152) = a2;
  return result;
}

_QWORD *llvm::IRSimilarity::IRInstructionData::setBranchSuccessors(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;

  v3 = result;
  v4 = result[2];
  v5 = *a2;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(v4 + 40);
    LODWORD(v8) = ((v7 >> 4) ^ (v7 >> 9)) & (v6 - 1);
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (v7 == *v9)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v7 == v10)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  v13 = *(_DWORD *)(v4 + 20);
  if ((v13 & 0x40000000) != 0)
  {
    v15 = *(_QWORD *)(v4 - 8);
    v14 = v13 & 0x7FFFFFF;
  }
  else
  {
    v14 = v13 & 0x7FFFFFF;
    v15 = v4 - 32 * v14;
  }
  v16 = (_DWORD)v14 == 3;
  if (v14 != v16)
  {
    v17 = *((_DWORD *)v9 + 2);
    v18 = (_QWORD *)(v15 + 32 * v14);
    v19 = (_QWORD *)(v15 + 32 * v16);
    while (1)
    {
      v20 = *a2;
      v21 = *((unsigned int *)a2 + 4);
      if (!(_DWORD)v21)
        goto LABEL_19;
      LODWORD(v22) = ((*v19 >> 4) ^ (*v19 >> 9)) & (v21 - 1);
      v23 = (uint64_t *)(v20 + 16 * v22);
      v24 = *v23;
      if (*v19 != *v23)
        break;
LABEL_20:
      v27 = *((_DWORD *)v23 + 2);
      v28 = *((unsigned int *)v3 + 32);
      if (v28 >= *((unsigned int *)v3 + 33))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 15), (uint64_t)(v3 + 17), v28 + 1, 4);
        v28 = *((unsigned int *)v3 + 32);
      }
      *(_DWORD *)(v3[15] + 4 * v28) = v27 - v17;
      ++*((_DWORD *)v3 + 32);
      v19 += 4;
      if (v19 == v18)
        return result;
    }
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(_QWORD *)(v20 + 16 * v22);
      if (*v19 == v24)
      {
        v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_20;
      }
    }
LABEL_19:
    v23 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_20;
  }
  return result;
}

double llvm::IRSimilarity::IRInstructionData::setCalleeName(llvm::IRSimilarity::IRInstructionData *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  double result;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ***v16;
  unsigned int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ****v24;
  uint64_t ***v25;
  int v26;
  int v27;
  uint64_t ***v28;
  std::string::size_type v29;
  char *v30;
  unint64_t v31;
  std::string *p_dst;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  std::string __dst;

  v10 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(v10 + 16) == 84)
    v11 = *((_QWORD *)this + 2);
  else
    v11 = 0;
  if (*((_BYTE *)this + 112))
  {
    if (*((char *)this + 111) < 0)
    {
      operator delete(*((void **)this + 11));
      v10 = *((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 11) = 0;
    *((_BYTE *)this + 111) = 0;
  }
  else
  {
    *((_QWORD *)this + 11) = 0;
    *(_WORD *)((char *)this + 111) = 256;
  }
  v13 = (void **)((char *)this + 88);
  if (*(_BYTE *)(v10 + 16) == 84)
  {
    v14 = *(_QWORD *)(v10 - 32);
    if (v14)
    {
      if (!*(_BYTE *)(v14 + 16))
      {
        v15 = *(_QWORD *)(v14 + 24);
        if (v15 == *(_QWORD *)(v10 + 72) && (*(_BYTE *)(v14 + 33) & 0x20) != 0)
        {
          v35 = *(unsigned int *)(v14 + 36);
          if (((byte_1C860FB7B[v35 >> 3] >> (v35 & 7)) & 1) != 0)
          {
            sub_1C53CF274(v35, (uint64_t *)(*(_QWORD *)(v15 + 16) + 8), (8 * *(unsigned int *)(v15 + 12) - 8) >> 3, *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 56) + 40), v15, a6, a7, a8, &__dst);
          }
          else
          {
            v30 = off_1E814EB28[v35];
            if (v30)
            {
              v36 = strlen(off_1E814EB28[v35]);
              if (v36 <= 0x7FFFFFFFFFFFFFF7)
              {
                v29 = v36;
                goto LABEL_33;
              }
LABEL_53:
              abort();
            }
            memset(&__dst, 0, sizeof(__dst));
          }
LABEL_41:
          if (*((_BYTE *)this + 112))
          {
            if (*((char *)this + 111) < 0)
              operator delete(*v13);
            result = *(double *)&__dst.__r_.__value_.__l.__data_;
            *(_OWORD *)v13 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *((_QWORD *)this + 13) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
          }
          else
          {
            result = *(double *)&__dst.__r_.__value_.__l.__data_;
            *(_OWORD *)v13 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *((_QWORD *)this + 13) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
            *((_BYTE *)this + 112) = 1;
          }
          return result;
        }
      }
    }
  }
  v16 = *(uint64_t ****)(v11 - 32);
  v17 = *((unsigned __int8 *)v16 + 16);
  if ((v17 == 24 || v17 <= 0x14) && a2 != 0)
  {
    if (*((_BYTE *)v16 + 16) || v16[3] != *(uint64_t ***)(v11 + 72))
      v16 = 0;
    if ((*((_BYTE *)v16 + 23) & 0x10) == 0)
    {
      v29 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_40;
    }
    v20 = ***v16;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v24 = (uint64_t ****)(v21 + 16 * v23);
      v25 = *v24;
      if (*v24 == v16)
        goto LABEL_32;
      v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == v16)
        {
          v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_32;
        }
      }
    }
    v24 = (uint64_t ****)(v21 + 16 * v22);
LABEL_32:
    v28 = v24[1];
    v31 = (unint64_t)*v28;
    v30 = (char *)(v28 + 2);
    v29 = v31;
    if (v31 <= 0x7FFFFFFFFFFFFFF7)
    {
LABEL_33:
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_dst = (std::string *)operator new(v33 + 1);
        __dst.__r_.__value_.__l.__size_ = v29;
        __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
        p_dst = &__dst;
        if (!v29)
          goto LABEL_40;
      }
      memmove(p_dst, v30, v29);
LABEL_40:
      p_dst->__r_.__value_.__s.__data_[v29] = 0;
      goto LABEL_41;
    }
    goto LABEL_53;
  }
  return result;
}

_QWORD *llvm::IRSimilarity::IRInstructionData::setPHIPredecessors(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;

  v3 = result;
  v4 = result[2];
  v5 = *a2;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(v4 + 40);
    LODWORD(v8) = ((v7 >> 4) ^ (v7 >> 9)) & (v6 - 1);
    v9 = (uint64_t *)(v5 + 16 * v8);
    v10 = *v9;
    if (v7 == *v9)
      goto LABEL_8;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v6 - 1);
      v10 = *(_QWORD *)(v5 + 16 * v8);
      if (v7 == v10)
      {
        v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
  }
  v9 = (uint64_t *)(v5 + 16 * v6);
LABEL_8:
  v13 = *(_DWORD *)(v4 + 20);
  v14 = v13 & 0x7FFFFFF;
  if ((v13 & 0x7FFFFFF) != 0)
  {
    v15 = 0;
    v16 = *((_DWORD *)v9 + 2);
    while (1)
    {
      if ((v13 & 0x40000000) != 0)
        v17 = *(_QWORD *)(v4 - 8);
      else
        v17 = v4 - 32 * v14;
      v18 = *a2;
      v19 = *((unsigned int *)a2 + 4);
      if (!(_DWORD)v19)
        goto LABEL_19;
      v20 = *(_QWORD *)(v17 + 32 * *(unsigned int *)(v4 + 60) + 8 * v15);
      LODWORD(v21) = ((v20 >> 4) ^ (v20 >> 9)) & (v19 - 1);
      v22 = (uint64_t *)(v18 + 16 * v21);
      v23 = *v22;
      if (v20 != *v22)
        break;
LABEL_20:
      v26 = *((_DWORD *)v22 + 2);
      v27 = *((unsigned int *)v3 + 32);
      if (v27 >= *((unsigned int *)v3 + 33))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 15), (uint64_t)(v3 + 17), v27 + 1, 4);
        v27 = *((unsigned int *)v3 + 32);
      }
      v28 = v26 - v16;
      *(_DWORD *)(v3[15] + 4 * v27) = v28;
      v29 = *((_DWORD *)v3 + 33);
      v30 = (*((_DWORD *)v3 + 32) + 1);
      *((_DWORD *)v3 + 32) = v30;
      if (v30 >= v29)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 15), (uint64_t)(v3 + 17), v30 + 1, 4);
        LODWORD(v30) = *((_DWORD *)v3 + 32);
      }
      *(_DWORD *)(v3[15] + 4 * v30) = v28;
      ++*((_DWORD *)v3 + 32);
      ++v15;
      v13 = *(_DWORD *)(v4 + 20);
      v14 = v13 & 0x7FFFFFF;
      if (v15 >= v14)
        return result;
    }
    v24 = 1;
    while (v23 != -4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v19 - 1);
      v23 = *(_QWORD *)(v18 + 16 * v21);
      if (v20 == v23)
      {
        v22 = (uint64_t *)(v18 + 16 * v21);
        goto LABEL_20;
      }
    }
LABEL_19:
    v22 = (uint64_t *)(v18 + 16 * v19);
    goto LABEL_20;
  }
  return result;
}

uint64_t llvm::IRSimilarity::IRInstructionData::getPredicate(llvm::IRSimilarity::IRInstructionData *this)
{
  if (*((_BYTE *)this + 80))
    return *((unsigned int *)this + 19);
  else
    return *(_WORD *)(*((_QWORD *)this + 2) + 18) & 0x3F;
}

char *llvm::IRSimilarity::IRInstructionData::getCalleeName(llvm::IRSimilarity::IRInstructionData *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 11);
  v1 = (char *)this + 88;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

BOOL llvm::IRSimilarity::isClose(llvm::IRSimilarity *this, const llvm::IRSimilarity::IRInstructionData *a2, const llvm::IRSimilarity::IRInstructionData *a3)
{
  BOOL v3;
  _BOOL8 result;
  char isSameOperationAs;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char *v22;
  int v23;
  size_t v24;
  size_t v25;
  void **p_dst;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  int v41;
  size_t v42;
  size_t v43;
  void *p_p;
  size_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  size_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  void **v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v59;
  _BOOL4 v60;
  void *__p;
  size_t v62;
  unint64_t v63;
  void **__dst;
  size_t __n;
  int64_t v66;

  if (*((_BYTE *)this + 72))
    v3 = *((_BYTE *)a2 + 72) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  isSameOperationAs = llvm::Instruction::isSameOperationAs(*((llvm::Instruction **)this + 2), *((const llvm::Instruction **)a2 + 2), 0);
  v8 = *((_QWORD *)this + 2);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if ((isSameOperationAs & 1) != 0)
  {
    if (v9 != 84)
    {
      if (v9 == 62)
      {
        v10 = *((_QWORD *)a2 + 2);
        if (((*(unsigned __int8 *)(v8 + 17) ^ *(unsigned __int8 *)(v10 + 17)) & 2) == 0)
        {
          v11 = 32 * *(_DWORD *)(v8 + 20);
          result = 1;
          if (v11 != 64)
          {
            v12 = 32 * *(_DWORD *)(v10 + 20);
            if (v12 != 64)
            {
              v13 = -(uint64_t)v12;
              v14 = v10 + 64;
              v15 = -(uint64_t)v11;
              v16 = v8 + 64;
              do
              {
                v17 = *(_QWORD *)(v16 + v15);
                v18 = *(_QWORD *)(v14 + v13);
                result = v17 == v18;
                if (v17 != v18)
                  break;
                if (v15 == -96)
                  break;
                v15 += 32;
                v3 = v13 == -96;
                v13 += 32;
              }
              while (!v3);
            }
          }
          return result;
        }
        return 0;
      }
      return v9 != 30 || *(_BYTE *)(*((_QWORD *)a2 + 2) + 16) != 30 || *((_DWORD *)this + 32) == *((_DWORD *)a2 + 32);
    }
    if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16) != 84)
      return 1;
    v21 = *((_BYTE *)this + 111);
    if (v21 >= 0)
      v22 = (char *)this + 88;
    else
      v22 = (char *)*((_QWORD *)this + 11);
    if (!v22)
    {
      __dst = 0;
      __n = 0;
      v66 = 0;
      goto LABEL_54;
    }
    v23 = v21;
    v24 = v21 & 0x7F;
    if (v23 >= 0)
      v25 = v24;
    else
      v25 = *((_QWORD *)this + 12);
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_103;
    if (v25 >= 0x17)
    {
      v37 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v37 = v25 | 7;
      v38 = v37 + 1;
      p_dst = (void **)operator new(v37 + 1);
      __n = v25;
      v66 = v38 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v66) = v25;
      p_dst = (void **)&__dst;
      if (!v25)
        goto LABEL_53;
    }
    memmove(p_dst, v22, v25);
LABEL_53:
    *((_BYTE *)p_dst + v25) = 0;
LABEL_54:
    v39 = *((_BYTE *)a2 + 111);
    if (v39 >= 0)
      v40 = (char *)a2 + 88;
    else
      v40 = (char *)*((_QWORD *)a2 + 11);
    if (!v40)
    {
      v45 = 0;
      v46 = 0;
      __p = 0;
      v62 = 0;
      v63 = 0;
      goto LABEL_71;
    }
    v41 = v39;
    v42 = v39 & 0x7F;
    if (v41 >= 0)
      v43 = v42;
    else
      v43 = *((_QWORD *)a2 + 12);
    if (v43 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v43 >= 0x17)
      {
        v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17)
          v47 = v43 | 7;
        v48 = v47 + 1;
        p_p = operator new(v47 + 1);
        v62 = v43;
        v63 = v48 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v63) = v43;
        p_p = &__p;
        if (!v43)
          goto LABEL_70;
      }
      memmove(p_p, v40, v43);
LABEL_70:
      *((_BYTE *)p_p + v43) = 0;
      v46 = HIBYTE(v63);
      v45 = v62;
LABEL_71:
      v49 = HIBYTE(v66);
      if (v66 >= 0)
        v50 = HIBYTE(v66) & 0x7F;
      else
        v50 = __n;
      if (v46 >= 0)
        v45 = v46 & 0x7F;
      if (v50 == v45)
      {
        if (v46 >= 0)
          v51 = (unsigned __int8 *)&__p;
        else
          v51 = (unsigned __int8 *)__p;
        if (v66 < 0)
        {
          v60 = memcmp(__dst, v51, __n) == 0;
        }
        else if ((v66 & 0x7F00000000000000) != 0)
        {
          v52 = (HIBYTE(v66) & 0x7F) - 1;
          v53 = (void **)&__dst;
          do
          {
            v55 = *(unsigned __int8 *)v53;
            v53 = (void **)((char *)v53 + 1);
            v54 = v55;
            v57 = *v51++;
            v56 = v57;
            v59 = v52-- != 0;
            v60 = v54 == v56;
          }
          while (v54 == v56 && v59);
        }
        else
        {
          v60 = 1;
        }
      }
      else
      {
        v60 = 0;
      }
      if (v46 < 0)
      {
        operator delete(__p);
        if ((v49 & 0x80) == 0)
        {
LABEL_94:
          if (!v60)
            return 0;
          goto LABEL_98;
        }
      }
      else if ((v49 & 0x80) == 0)
      {
        goto LABEL_94;
      }
      operator delete(__dst);
      if (!v60)
        return 0;
LABEL_98:
      v9 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 16);
      return v9 != 30 || *(_BYTE *)(*((_QWORD *)a2 + 2) + 16) != 30 || *((_DWORD *)this + 32) == *((_DWORD *)a2 + 32);
    }
LABEL_103:
    abort();
  }
  if ((v9 - 81) > 1)
    return 0;
  v19 = *((_QWORD *)a2 + 2);
  if (*(unsigned __int8 *)(v19 + 16) - 81 > 1)
    return 0;
  v20 = *((_BYTE *)this + 80) ? *((_DWORD *)this + 19) : *(_WORD *)(v8 + 18) & 0x3F;
  v27 = *((_BYTE *)a2 + 80) ? *((_DWORD *)a2 + 19) : *(_WORD *)(v19 + 18) & 0x3F;
  if (v20 != v27)
    return 0;
  v28 = *((unsigned int *)this + 8);
  result = 1;
  if ((_DWORD)v28)
  {
    v29 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v29)
    {
      v30 = (uint64_t **)*((_QWORD *)this + 3);
      v31 = (uint64_t **)*((_QWORD *)a2 + 3);
      v32 = 8 * v29 - 8;
      v33 = 8 * v28 - 8;
      do
      {
        v34 = **v30;
        v35 = **v31;
        result = v34 == v35;
        if (v34 != v35)
          break;
        if (!v33)
          break;
        ++v30;
        ++v31;
        v36 = v32;
        v32 -= 8;
        v33 -= 8;
      }
      while (v36);
    }
  }
  return result;
}

unint64_t llvm::IRSimilarity::IRInstructionMapper::allocateIRInstructionData(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7;

  v7 = sub_1C484358C(*(_QWORD *)(a1 + 64), 160, 3);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = v7 + 40;
  *(_QWORD *)(v7 + 32) = 0x400000000;
  *(_BYTE *)(v7 + 72) = a3;
  *(_BYTE *)(v7 + 76) = 0;
  *(_BYTE *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 0;
  *(_BYTE *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 120) = v7 + 136;
  *(_QWORD *)(v7 + 128) = 0x400000000;
  *(_QWORD *)(v7 + 152) = a4;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(v7);
  return v7;
}

double llvm::IRSimilarity::IRInstructionMapper::allocateIRInstructionData(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  double result;

  v3 = sub_1C484358C(*(_QWORD *)(a1 + 64), 160, 3);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v3 + 40;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(v3 + 32) = 0x400000000;
  *(_BYTE *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 76) = 0;
  *(_BYTE *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = v3 + 136;
  *(_QWORD *)(v3 + 128) = 0x400000000;
  *(_QWORD *)(v3 + 152) = a2;
  return result;
}

unint64_t llvm::IRSimilarity::IRInstructionMapper::allocateIRInstructionDataList(llvm::IRSimilarity::IRInstructionMapper *this)
{
  unint64_t result;

  result = sub_1C484358C(*((_QWORD *)this + 9), 16, 3);
  *(_QWORD *)result = result | 4;
  *(_QWORD *)(result + 8) = result;
  return result;
}

llvm::IRSimilarity::IRSimilarityCandidate *llvm::IRSimilarity::IRSimilarityCandidate::IRSimilarityCandidate(llvm::IRSimilarity::IRSimilarityCandidate *this, unsigned int a2, int a3, llvm::IRSimilarity::IRInstructionData *a4, llvm::IRSimilarity::IRInstructionData *a5)
{
  char *v6;
  char *v7;
  int v8;
  int v9;
  unsigned int v10;
  llvm::IRSimilarity::IRInstructionData *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  int v48;
  _DWORD *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  _DWORD *v53;
  _DWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t *v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  _DWORD *v73;
  int v74;
  _DWORD *v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  _DWORD *v79;
  _DWORD *v80;
  uint64_t v84[3];
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int v88;
  int v89;

  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = (char *)this + 24;
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_QWORD *)this + 6) = 0;
  v7 = (char *)this + 48;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  v8 = 1;
  v9 = a3 + a2;
  v89 = 1;
  if (a3 + a2 > a2)
  {
    v10 = a2;
    v11 = a4;
    do
    {
      v12 = *((unsigned int *)v11 + 8);
      if ((_DWORD)v12)
      {
        v13 = (uint64_t *)*((_QWORD *)v11 + 3);
        v14 = &v13[v12];
        do
        {
          v84[0] = 0;
          v15 = *v13;
          v84[0] = *v13;
          v16 = *((_QWORD *)this + 3);
          v17 = *((unsigned int *)this + 10);
          if ((_DWORD)v17)
          {
            LODWORD(v18) = ((v15 >> 4) ^ (v15 >> 9)) & (v17 - 1);
            v19 = (uint64_t *)(v16 + 16 * v18);
            v20 = *v19;
            if (v15 == *v19)
              goto LABEL_12;
            v21 = 1;
            while (v20 != -4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & (v17 - 1);
              v20 = *(_QWORD *)(v16 + 16 * v18);
              if (v15 == v20)
              {
                v19 = (uint64_t *)(v16 + 16 * v18);
                goto LABEL_12;
              }
            }
          }
          v19 = (uint64_t *)(v16 + 16 * v17);
LABEL_12:
          if (v19 == (uint64_t *)(v16 + 16 * v17))
          {
            sub_1C61929B4((uint64_t)&v86, (uint64_t)v6, v84, &v89);
            v23 = *((_DWORD *)this + 16);
            if (v23)
            {
              v24 = *((_QWORD *)this + 6);
              v25 = v23 - 1;
              v26 = (37 * v8) & v25;
              v27 = (_DWORD *)(v24 + 16 * v26);
              v28 = *v27;
              if (v8 != *v27)
              {
                v29 = 0;
                v30 = 1;
                while (v28 != -1)
                {
                  if (v29)
                    v31 = 0;
                  else
                    v31 = v28 == -2;
                  if (v31)
                    v29 = v27;
                  v32 = v26 + v30++;
                  v26 = v32 & v25;
                  v27 = (_DWORD *)(v24 + 16 * v26);
                  v28 = *v27;
                  if (v8 == *v27)
                    goto LABEL_28;
                }
                if (v29)
                  v33 = v29;
                else
                  v33 = v27;
LABEL_27:
                v34 = sub_1C4E382C0((uint64_t)v7, &v89, v33);
                *v34 = v8;
                *((_QWORD *)v34 + 1) = v84[0];
              }
LABEL_28:
              v89 = ++v8;
              goto LABEL_13;
            }
            v33 = 0;
            goto LABEL_27;
          }
LABEL_13:
          ++v13;
        }
        while (v13 != v14);
      }
      v35 = *((_QWORD *)v11 + 2);
      v36 = *((_QWORD *)this + 3);
      v37 = *((unsigned int *)this + 10);
      if ((_DWORD)v37)
      {
        LODWORD(v38) = ((v35 >> 4) ^ (v35 >> 9)) & (v37 - 1);
        v39 = (uint64_t *)(v36 + 16 * v38);
        v40 = *v39;
        if (v35 == *v39)
          goto LABEL_39;
        v41 = 1;
        while (v40 != -4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v37 - 1);
          v40 = *(_QWORD *)(v36 + 16 * v38);
          if (v35 == v40)
          {
            v39 = (uint64_t *)(v36 + 16 * v38);
            goto LABEL_39;
          }
        }
      }
      v39 = (uint64_t *)(v36 + 16 * v37);
LABEL_39:
      if (v39 == (uint64_t *)(v36 + 16 * v37))
      {
        v84[0] = *((_QWORD *)v11 + 2);
        sub_1C61929B4((uint64_t)&v86, (uint64_t)v6, v84, &v89);
        v43 = *((_DWORD *)this + 16);
        if (v43)
        {
          v44 = *((_QWORD *)this + 6);
          v45 = v43 - 1;
          v46 = (37 * v8) & v45;
          v47 = (_DWORD *)(v44 + 16 * v46);
          v48 = *v47;
          if (v8 != *v47)
          {
            v49 = 0;
            v50 = 1;
            while (v48 != -1)
            {
              if (v49)
                v51 = 0;
              else
                v51 = v48 == -2;
              if (v51)
                v49 = v47;
              v52 = v46 + v50++;
              v46 = v52 & v45;
              v47 = (_DWORD *)(v44 + 16 * v46);
              v48 = *v47;
              if (v8 == *v47)
                goto LABEL_55;
            }
            if (v49)
              v53 = v49;
            else
              v53 = v47;
LABEL_54:
            v54 = sub_1C4E382C0((uint64_t)v7, &v89, v53);
            *v54 = v8;
            *((_QWORD *)v54 + 1) = *((_QWORD *)v11 + 2);
          }
LABEL_55:
          v89 = ++v8;
          goto LABEL_40;
        }
        v53 = 0;
        goto LABEL_54;
      }
LABEL_40:
      ++v10;
      v11 = (llvm::IRSimilarity::IRInstructionData *)*((_QWORD *)v11 + 1);
    }
    while (v10 != v9);
  }
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = a5;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  sub_1C4E327B0((uint64_t)this, (uint64_t)&v86);
  v55 = v86;
  v56 = &v86[v88];
  if ((_DWORD)v87)
  {
    if (v88)
    {
      v57 = 8 * v88;
      v58 = v86;
      while ((*v58 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v58;
        v57 -= 8;
        if (!v57)
          goto LABEL_64;
      }
    }
    else
    {
      v58 = v86;
    }
  }
  else
  {
LABEL_64:
    v58 = &v86[v88];
  }
  v59 = &v86[v88];
  if (v58 != v59)
  {
    while (1)
    {
      v60 = *v58;
      v61 = *((_QWORD *)this + 3);
      v62 = *((unsigned int *)this + 10);
      if ((_DWORD)v62)
      {
        LODWORD(v63) = ((v60 >> 4) ^ (v60 >> 9)) & (v62 - 1);
        v64 = (uint64_t *)(v61 + 16 * v63);
        v65 = *v64;
        if (v60 == *v64)
          goto LABEL_74;
        v66 = 1;
        while (v65 != -4096)
        {
          v67 = v63 + v66++;
          v63 = v67 & (v62 - 1);
          v65 = *(_QWORD *)(v61 + 16 * v63);
          if (v60 == v65)
          {
            v64 = (uint64_t *)(v61 + 16 * v63);
            goto LABEL_74;
          }
        }
      }
      v64 = (uint64_t *)(v61 + 16 * v62);
LABEL_74:
      if (v64 == (uint64_t *)(v61 + 16 * v62))
      {
        v85 = *v58;
        sub_1C61929B4((uint64_t)v84, (uint64_t)v6, &v85, &v89);
        v69 = *((_DWORD *)this + 16);
        if (v69)
        {
          v70 = *((_QWORD *)this + 6);
          v71 = v69 - 1;
          v72 = (37 * v8) & v71;
          v73 = (_DWORD *)(v70 + 16 * v72);
          v74 = *v73;
          if (v8 != *v73)
          {
            v75 = 0;
            v76 = 1;
            while (v74 != -1)
            {
              if (v75)
                v77 = 0;
              else
                v77 = v74 == -2;
              if (v77)
                v75 = v73;
              v78 = v72 + v76++;
              v72 = v78 & v71;
              v73 = (_DWORD *)(v70 + 16 * v72);
              v74 = *v73;
              if (v8 == *v73)
                goto LABEL_95;
            }
            if (v75)
              v79 = v75;
            else
              v79 = v73;
LABEL_94:
            v80 = sub_1C4E382C0((uint64_t)v7, &v89, v79);
            *v80 = v8;
            *((_QWORD *)v80 + 1) = v60;
          }
LABEL_95:
          v89 = ++v8;
          goto LABEL_75;
        }
        v79 = 0;
        goto LABEL_94;
      }
LABEL_75:
      v68 = v58 + 1;
      v58 = v56;
      if (v68 != v56)
      {
        v58 = v68;
        while ((*v58 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v58 == v56)
          {
            v58 = v56;
            break;
          }
        }
      }
      if (v58 == v59)
      {
        v55 = v86;
        break;
      }
    }
  }
  MEMORY[0x1CAA32FB4](v55, 8);
  return this;
}

uint64_t sub_1C4E327B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(*(_QWORD *)(result + 16) + 8); v2 != i; v2 = *(_QWORD *)(v2 + 8))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40);
    v6 = 0;
    v7[0] = v5;
    result = sub_1C4E36498((uint64_t *)a2, v7, &v6);
    if (!(_DWORD)result || v6 == *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16))
      result = sub_1C6187FB8((_DWORD *)a2, &v5, (uint64_t)v7);
  }
  return result;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::isSimilar(uint64_t a1, uint64_t a2, const llvm::IRSimilarity::IRInstructionData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  _BOOL8 result;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  while (v3 != v4 && v5 != v6)
  {
    if (*(_BYTE *)(v3 + 72))
      v8 = *(_BYTE *)(v5 + 72) == 0;
    else
      v8 = 1;
    if (v8)
      return 0;
    result = llvm::IRSimilarity::isClose((llvm::IRSimilarity *)v3, (const llvm::IRSimilarity::IRInstructionData *)v5, a3);
    if (!result)
      return result;
    v3 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v5 + 8);
  }
  return 1;
}

BOOL checkNumberingAndReplace(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD v26[2];
  int v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;

  v30 = a3;
  v21 = a3;
  v5 = 1;
  sub_1C4E3578C((uint64_t)&v22, &v21, 1);
  v25 = a2;
  v26[0] = v22;
  v26[1] = v23;
  v22 = 0;
  v23 = 0;
  v27 = v24;
  v24 = 0;
  sub_1C4E38444(&v28, a1, &v25, (uint64_t)v26);
  v6 = v28;
  v7 = v29;
  MEMORY[0x1CAA32FB4](v26[0], 4);
  MEMORY[0x1CAA32FB4](v22, 4);
  if (!v7)
  {
    if (*(_DWORD *)(v6 + 16) < 2u
      || (int *)(*(_QWORD *)(v6 + 8) + 4 * *(unsigned int *)(v6 + 24)) == sub_1C61940B0((uint64_t *)(v6 + 8), &v30))
    {
      return *(_QWORD *)(v6 + 8) + 4 * *(unsigned int *)(v6 + 24) != (_QWORD)sub_1C61940B0((uint64_t *)(v6 + 8), &v30);
    }
    sub_1C4A0CC74((_QWORD *)(v6 + 8));
    v9 = *(_DWORD *)(v6 + 24);
    if (v9)
    {
      v10 = *(_QWORD *)(v6 + 8);
      v11 = v9 - 1;
      v12 = (37 * v30) & v11;
      v13 = (_DWORD *)(v10 + 4 * v12);
      v14 = *v13;
      if (v30 == *v13)
        return 1;
      v15 = 0;
      v16 = 1;
      while (v14 != -1)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -2;
        if (v17)
          v15 = v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = (_DWORD *)(v10 + 4 * v12);
        v14 = *v13;
        v5 = 1;
        if (v30 == *v13)
          return v5;
      }
      if (v15)
        v19 = v15;
      else
        v19 = v13;
    }
    else
    {
      v19 = 0;
    }
    v20 = sub_1C4A0C948(v6 + 8, (uint64_t)&v30, &v30, v19);
    *v20 = v30;
    return 1;
  }
  return v5;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::compareNonCommutativeOperandMapping(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v2 = a1[1];
  v3 = *(_DWORD *)(v2 + 8);
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = **(_QWORD ***)(a2 + 8);
    v9 = *(_QWORD **)v2;
    while (1)
    {
      v10 = *(_QWORD *)(*a1 + 24);
      v11 = *(unsigned int *)(*a1 + 40);
      if ((_DWORD)v11)
      {
        LODWORD(v12) = ((*v9 >> 4) ^ (*v9 >> 9)) & (v11 - 1);
        v13 = (uint64_t *)(v10 + 16 * v12);
        v14 = *v13;
        if (*v9 == *v13)
          goto LABEL_10;
        v15 = 1;
        while (v14 != -4096)
        {
          v16 = v12 + v15++;
          v12 = v16 & (v11 - 1);
          v14 = *(_QWORD *)(v10 + 16 * v12);
          if (*v9 == v14)
          {
            v13 = (uint64_t *)(v10 + 16 * v12);
            goto LABEL_10;
          }
        }
      }
      v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_10:
      v17 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v18 = *(unsigned int *)(*(_QWORD *)a2 + 40);
      if ((_DWORD)v18)
      {
        LODWORD(v19) = ((*v8 >> 4) ^ (*v8 >> 9)) & (v18 - 1);
        v20 = (uint64_t *)(v17 + 16 * v19);
        v21 = *v20;
        if (*v8 == *v20)
          goto LABEL_17;
        v22 = 1;
        while (v21 != -4096)
        {
          v23 = v19 + v22++;
          v19 = v23 & (v18 - 1);
          v21 = *(_QWORD *)(v17 + 16 * v19);
          if (*v8 == v21)
          {
            v20 = (uint64_t *)(v17 + 16 * v19);
            goto LABEL_17;
          }
        }
      }
      v20 = (uint64_t *)(v17 + 16 * v18);
LABEL_17:
      v24 = *((_DWORD *)v13 + 2);
      v25 = *((_DWORD *)v20 + 2);
      if (checkNumberingAndReplace(a1[2], v24, v25) && checkNumberingAndReplace(*(_QWORD *)(a2 + 16), v25, v24))
      {
        ++v7;
        ++v9;
        ++v8;
        v6 = v7 >= v3;
        if (v7 != v3)
          continue;
      }
      return v6;
    }
  }
  return 1;
}

uint64_t sub_1C4E32C10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _DWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int32x2_t *v58;
  int32x2_t *v59;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  _QWORD v67[2];
  unsigned __int8 v68;

  v4 = *(_QWORD *)(a3 + 8);
  if (!v4)
    return 1;
  v8 = *(uint64_t **)a3;
  v63 = *(_QWORD *)a3 + 8 * v4;
LABEL_3:
  v9 = *v8;
  v10 = *a1;
  v11 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = ((v9 >> 4) ^ (v9 >> 9)) & (v11 - 1);
    v13 = (uint64_t *)(v10 + 16 * v12);
    v14 = *v13;
    if (v9 == *v13)
      goto LABEL_10;
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v9 == v14)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_10;
      }
    }
  }
  v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_10:
  LODWORD(v64) = *((_DWORD *)v13 + 2);
  v65 = 0uLL;
  MEMORY[0x1CAA32FB4](0, 4);
  v17 = *(unsigned int *)(a4 + 16);
  v66 = v17;
  if ((_DWORD)v17)
  {
    v18 = 4 * v17;
    *(_QWORD *)&v65 = operator new(4 * v17, (std::align_val_t)4uLL);
    *((_QWORD *)&v65 + 1) = *(_QWORD *)(a4 + 8);
    memcpy((void *)v65, *(const void **)a4, v18);
  }
  else
  {
    v65 = 0uLL;
  }
  sub_1C4E38444(v67, a2, &v64, (uint64_t)&v65);
  v19 = v67[0];
  v20 = v68;
  MEMORY[0x1CAA32FB4](v65, 4);
  if (v20)
    goto LABEL_70;
  DWORD2(v65) = 0;
  v64 = 0;
  *(_QWORD *)&v65 = 0;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(unsigned int *)(v19 + 24);
  v23 = (unsigned int *)(v21 + 4 * v22);
  if (*(_DWORD *)(v19 + 16))
  {
    if (*(_DWORD *)(v19 + 24))
    {
      v24 = 4 * v22;
      v25 = *(unsigned int **)(v19 + 8);
      while (*v25 >= 0xFFFFFFFE)
      {
        ++v25;
        v24 -= 4;
        if (!v24)
          goto LABEL_19;
      }
    }
    else
    {
      v25 = *(unsigned int **)(v19 + 8);
    }
  }
  else
  {
LABEL_19:
    v25 = (unsigned int *)(v21 + 4 * v22);
  }
  v26 = (unsigned int *)(v21 + 4 * v22);
  if (v25 != v26)
  {
    while (1)
    {
      if ((int *)(*(_QWORD *)a4 + 4 * *(unsigned int *)(a4 + 16)) == sub_1C61940B0((uint64_t *)a4, v25))
        goto LABEL_39;
      if (DWORD2(v65))
      {
        v27 = (37 * *v25) & (DWORD2(v65) - 1);
        v28 = (_DWORD *)(v64 + 4 * v27);
        v29 = *v28;
        if (*v25 == *v28)
          goto LABEL_39;
        v30 = 0;
        v31 = 1;
        while (v29 != -1)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -2;
          if (v32)
            v30 = v28;
          v33 = v27 + v31++;
          v27 = v33 & (DWORD2(v65) - 1);
          v28 = (_DWORD *)(v64 + 4 * v27);
          v29 = *v28;
          if (*v25 == *v28)
            goto LABEL_39;
        }
        if (v30)
          v34 = v30;
        else
          v34 = v28;
      }
      else
      {
        v34 = 0;
      }
      *sub_1C4A0C948((uint64_t)&v64, (uint64_t)v25, v25, v34) = *v25;
LABEL_39:
      v35 = v25 + 1;
      while (v35 != v23)
      {
        v36 = *v35++;
        if (v36 <= 0xFFFFFFFD)
        {
          v25 = v35 - 1;
          goto LABEL_44;
        }
      }
      v25 = v23;
LABEL_44:
      if (v25 == v26)
      {
        v37 = v65;
        if (!(_DWORD)v65)
        {
LABEL_72:
          v61 = v64;
          goto LABEL_74;
        }
        v38 = *(_DWORD *)(v19 + 16);
        if ((_DWORD)v65 != v38)
        {
          v39 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)(v19 + 8) = v64;
          v64 = v39;
          *(_DWORD *)(v19 + 16) = v37;
          LODWORD(v65) = v38;
          v40 = *(_QWORD *)(v19 + 20);
          *(_QWORD *)(v19 + 20) = *(_QWORD *)((char *)&v65 + 4);
          *(_QWORD *)((char *)&v65 + 4) = v40;
          v37 = *(_DWORD *)(v19 + 16);
        }
        if (v37 == 1)
        {
          LODWORD(v67[0]) = 0;
          v41 = *(_DWORD **)(v19 + 8);
          v42 = *(unsigned int *)(v19 + 24);
          if ((_DWORD)v42)
          {
            v43 = 4 * v42;
            v44 = &v41[v42];
            while (*v41 >= 0xFFFFFFFE)
            {
              ++v41;
              v43 -= 4;
              if (!v43)
              {
                v41 = v44;
                break;
              }
            }
          }
          LODWORD(v67[0]) = *v41;
          v45 = *(_QWORD *)(a3 + 8);
          if (v45)
          {
            v46 = *(uint64_t **)a3;
            v47 = *(_QWORD *)a3 + 8 * v45;
            while (2)
            {
              v48 = *v46;
              if (v9 == *v46)
                goto LABEL_65;
              v49 = *a1;
              v50 = *((unsigned int *)a1 + 4);
              if ((_DWORD)v50)
              {
                LODWORD(v51) = (v50 - 1) & ((v48 >> 4) ^ (v48 >> 9));
                v52 = (uint64_t *)(v49 + 16 * v51);
                v53 = *v52;
                if (v48 != *v52)
                {
                  v54 = 1;
                  while (v53 != -4096)
                  {
                    v55 = v51 + v54++;
                    v51 = v55 & (v50 - 1);
                    v53 = *(_QWORD *)(v49 + 16 * v51);
                    if (v48 == v53)
                    {
                      v52 = (uint64_t *)(v49 + 16 * v51);
                      goto LABEL_64;
                    }
                  }
                  goto LABEL_63;
                }
              }
              else
              {
LABEL_63:
                v52 = (uint64_t *)(v49 + 16 * v50);
              }
LABEL_64:
              v56 = *(_QWORD *)a2;
              v57 = *(unsigned int *)(a2 + 16);
              v58 = (int32x2_t *)sub_1C4E341F8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *((_DWORD *)v52 + 2));
              if ((int32x2_t *)(v56 + 32 * v57) != v58)
              {
                v59 = v58;
                sub_1C61932D4(v58 + 1, v67);
                if (!v59[2].i32[0])
                  goto LABEL_72;
              }
LABEL_65:
              if (++v46 == (uint64_t *)v47)
                break;
              continue;
            }
          }
        }
        MEMORY[0x1CAA32FB4](v64, 4);
LABEL_70:
        if (++v8 == (uint64_t *)v63)
          return 1;
        goto LABEL_3;
      }
    }
  }
  v61 = 0;
LABEL_74:
  MEMORY[0x1CAA32FB4](v61, 4);
  return 0;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::checkRelativeLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  _QWORD v19[2];
  int v20;
  _QWORD v21[2];
  unsigned int v22;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  sub_1C4E327B0(*(_QWORD *)a1, (uint64_t)v21);
  sub_1C4E327B0(*(_QWORD *)a2, (uint64_t)v19);
  v6 = v21[0];
  if (v22)
  {
    LODWORD(v7) = (v22 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v8 = (uint64_t *)(v21[0] + 8 * v7);
    v9 = *v8;
    if (v4 == *v8)
    {
LABEL_3:
      v6 = v21[0] + 8 * v22;
      goto LABEL_10;
    }
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v22 - 1);
      v9 = *(_QWORD *)(v21[0] + 8 * v7);
      if (v4 == v9)
      {
        v8 = (uint64_t *)(v21[0] + 8 * v7);
        goto LABEL_3;
      }
    }
    v6 = v21[0] + 8 * v22;
  }
  v8 = (uint64_t *)v6;
LABEL_10:
  if (!v20)
  {
LABEL_19:
    v15 = v8 == (uint64_t *)v6;
LABEL_20:
    v14 = v15;
    goto LABEL_23;
  }
  v12 = (v20 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v13 = *(_QWORD *)(v19[0] + 8 * v12);
  if (v5 != v13)
  {
    v16 = 1;
    while (v13 != -4096)
    {
      v17 = v12 + v16++;
      v12 = v17 & (v20 - 1);
      v13 = *(_QWORD *)(v19[0] + 8 * v12);
      if (v5 == v13)
        goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_12:
  v14 = (v8 != (uint64_t *)v6) == (v12 != v20);
  if (v8 != (uint64_t *)v6 && v12 != v20)
  {
    v15 = *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
    goto LABEL_20;
  }
LABEL_23:
  MEMORY[0x1CAA32FB4](v19[0], 8);
  MEMORY[0x1CAA32FB4](v21[0], 8);
  return v14;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::compareStructure(llvm::IRSimilarity::IRSimilarityCandidate *this, const llvm::IRSimilarity::IRSimilarityCandidate *a2, const llvm::IRSimilarity::IRSimilarityCandidate *a3)
{
  _BOOL8 v3;
  _QWORD v5[2];
  int v6;
  _QWORD v7[2];
  int v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v5[0] = 0;
  v5[1] = 0;
  v6 = 0;
  v3 = llvm::IRSimilarity::IRSimilarityCandidate::compareStructure((uint64_t)this, (uint64_t)a2, (const llvm::IRSimilarity::IRInstructionData *)v7, (uint64_t)v5);
  sub_1C6193698((uint64_t)v5);
  MEMORY[0x1CAA32FB4](v5[0], 8);
  sub_1C6193698((uint64_t)v7);
  MEMORY[0x1CAA32FB4](v7[0], 8);
  return v3;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::compareStructure(uint64_t a1, uint64_t a2, const llvm::IRSimilarity::IRInstructionData *a3, uint64_t a4)
{
  int v4;
  unsigned int v7;
  uint64_t v8;
  const llvm::IRSimilarity::IRInstructionData **v9;
  llvm::IRSimilarity **v10;
  llvm::IRSimilarity *v11;
  const llvm::IRSimilarity::IRInstructionData *v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  uint64_t *v42;
  int *v43;
  uint64_t *v44;
  int *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unsigned int v56;
  int v57;
  _QWORD v60[3];
  _QWORD v61[3];
  uint64_t v62[3];
  _QWORD v63[3];
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;

  v4 = *(_DWORD *)(a1 + 4);
  if (v4 != *(_DWORD *)(a2 + 4) || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v7 = *(_DWORD *)a1;
  v57 = *(_DWORD *)a1 + v4;
  if (v7 < v7 + v4)
  {
    v8 = (uint64_t)a3;
    v9 = (const llvm::IRSimilarity::IRInstructionData **)(a2 + 8);
    v10 = (llvm::IRSimilarity **)(a1 + 8);
    while (1)
    {
      v11 = *v10;
      v12 = *v9;
      result = llvm::IRSimilarity::isClose(*v10, *v9, a3);
      if (!result)
        return result;
      if (!*((_BYTE *)v11 + 72) || !*((_BYTE *)v12 + 72))
        return 0;
      v14 = *((_QWORD *)v11 + 2);
      v15 = *((unsigned int *)v11 + 8);
      v76 = (uint64_t *)*((_QWORD *)v11 + 3);
      v77 = v15;
      v16 = *((_QWORD *)v12 + 2);
      v17 = *((unsigned int *)v12 + 8);
      v74 = (uint64_t *)*((_QWORD *)v12 + 3);
      v75 = v17;
      v18 = *(_QWORD *)(a1 + 24);
      v19 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v19)
      {
        LODWORD(v20) = (v19 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v21 = (uint64_t *)(v18 + 16 * v20);
        v22 = *v21;
        if (v14 == *v21)
          goto LABEL_15;
        v23 = 1;
        while (v22 != -4096)
        {
          v24 = v20 + v23++;
          v20 = v24 & (v19 - 1);
          v22 = *(_QWORD *)(v18 + 16 * v20);
          if (v14 == v22)
          {
            v21 = (uint64_t *)(v18 + 16 * v20);
            goto LABEL_15;
          }
        }
      }
      v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_15:
      v73 = *((_DWORD *)v21 + 2);
      v25 = *(_QWORD *)(a2 + 24);
      v26 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v26)
      {
        LODWORD(v27) = (v26 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        v28 = (uint64_t *)(v25 + 16 * v27);
        v29 = *v28;
        if (v16 == *v28)
          goto LABEL_22;
        v30 = 1;
        while (v29 != -4096)
        {
          v31 = v27 + v30++;
          v27 = v31 & (v26 - 1);
          v29 = *(_QWORD *)(v25 + 16 * v27);
          if (v16 == v29)
          {
            v28 = (uint64_t *)(v25 + 16 * v27);
            goto LABEL_22;
          }
        }
      }
      v28 = (uint64_t *)(v25 + 16 * v26);
LABEL_22:
      v72 = *((_DWORD *)v28 + 2);
      v64 = v72;
      sub_1C4E3578C((uint64_t)&v65, &v64, 1);
      LODWORD(v68) = v73;
      v69 = v65;
      v70 = v66;
      v65 = 0;
      v66 = 0;
      v71 = v67;
      v67 = 0;
      sub_1C4E38444(&v78, v8, &v68, (uint64_t)&v69);
      v32 = v78;
      v33 = v80;
      MEMORY[0x1CAA32FB4](v69, 4);
      MEMORY[0x1CAA32FB4](v65, 4);
      if (!v33
        && (int *)(*(_QWORD *)(v32 + 8) + 4 * *(unsigned int *)(v32 + 24)) == sub_1C61940B0((uint64_t *)(v32 + 8), &v72))
      {
        return 0;
      }
      v64 = v73;
      sub_1C4E3578C((uint64_t)&v65, &v64, 1);
      LODWORD(v68) = v72;
      v69 = v65;
      v70 = v66;
      v65 = 0;
      v66 = 0;
      v71 = v67;
      v67 = 0;
      sub_1C4E38444(&v78, a4, &v68, (uint64_t)&v69);
      v34 = v78;
      v35 = v80;
      MEMORY[0x1CAA32FB4](v69, 4);
      MEMORY[0x1CAA32FB4](v65, 4);
      if (!v35
        && (int *)(*(_QWORD *)(v34 + 8) + 4 * *(unsigned int *)(v34 + 24)) == sub_1C61940B0((uint64_t *)(v34 + 8), &v73))
      {
        return 0;
      }
      if (llvm::Instruction::isCommutative((llvm::Instruction *)v14))
      {
        if (!sub_1C4774A9C(v14)
          && (*(_BYTE *)(v14 + 16) != 84
           || (v36 = *(_QWORD *)(v14 - 32)) == 0
           || *(_BYTE *)(v36 + 16)
           || *(_QWORD *)(v36 + 24) != *(_QWORD *)(v14 + 72)
           || (*(_BYTE *)(v36 + 33) & 0x20) == 0))
        {
          v63[0] = a1;
          v63[1] = &v76;
          v63[2] = a3;
          v62[0] = a2;
          v62[1] = (uint64_t)&v74;
          v62[2] = a4;
          if ((llvm::IRSimilarity::IRSimilarityCandidate::compareCommutativeOperandMapping(v63, v62) & 1) == 0)
            return 0;
          goto LABEL_50;
        }
      }
      v61[0] = a1;
      v61[1] = &v76;
      v61[2] = a3;
      v60[0] = a2;
      v60[1] = &v74;
      v60[2] = a4;
      if (!llvm::IRSimilarity::IRSimilarityCandidate::compareNonCommutativeOperandMapping(v61, (uint64_t)v60))
        return 0;
      v37 = *(unsigned __int8 *)(v14 + 16);
      if (v37 == 83)
      {
        if (*(_BYTE *)(v16 + 16) != 83)
          goto LABEL_50;
      }
      else if (v37 != 30 || *(_BYTE *)(v16 + 16) != 30)
      {
        goto LABEL_50;
      }
      v38 = *((unsigned int *)v11 + 32);
      v39 = *((unsigned int *)v12 + 32);
      if ((_DWORD)v38 != (_DWORD)v39 && v77 != v75)
        return 0;
      v40 = (int *)*((_QWORD *)v11 + 15);
      v41 = (int *)*((_QWORD *)v12 + 15);
      v42 = v76;
      v43 = &v40[v38];
      v44 = v74;
      v45 = &v41[v39];
      v46 = &v76[v77];
      v47 = &v74[v75];
LABEL_40:
      v48 = 0;
      LOBYTE(v68) = v40 != v43;
      BYTE1(v68) = v41 != v45;
      BYTE2(v68) = v42 != v46;
      BYTE3(v68) = v44 != v47;
      while (*((_BYTE *)&v68 + v48))
      {
        if (++v48 == 4)
        {
          v54 = v47;
          v55 = v46;
          v56 = v7;
          v49 = v45;
          v50 = *v40;
          v51 = *v41;
          v52 = *v42;
          v53 = *v44;
          v68 = a1;
          LODWORD(v69) = v50;
          v70 = v52;
          v78 = a2;
          v79 = v51;
          v80 = v53;
          if (!llvm::IRSimilarity::IRSimilarityCandidate::checkRelativeLocations((uint64_t)&v68, (uint64_t)&v78))
            return 0;
          ++v40;
          ++v41;
          ++v42;
          ++v44;
          v45 = v49;
          v7 = v56;
          v47 = v54;
          v46 = v55;
          goto LABEL_40;
        }
      }
LABEL_50:
      v10 = (llvm::IRSimilarity **)((char *)v11 + 8);
      v9 = (const llvm::IRSimilarity::IRInstructionData **)((char *)v12 + 8);
      ++v7;
      result = 1;
      v8 = (uint64_t)a3;
      if (v7 == v57)
        return result;
    }
  }
  return 1;
}

BOOL llvm::IRSimilarity::IRSimilarityCandidate::overlap(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;

  v2 = *a1;
  v3 = *a2;
  v4 = *a2 + a2[1] - 1;
  if (*a2 >= *a1)
  {
    v5 = v2 >= v4;
    v6 = v2 == v4;
  }
  else
  {
    v5 = 1;
    v6 = 0;
  }
  if (v6 || !v5)
    return 1;
  v7 = v2 + a1[1] - 1;
  if (v2 >= v3)
  {
    v8 = v3 >= v7;
    v9 = v3 == v7;
  }
  else
  {
    v8 = 1;
    v9 = 0;
  }
  return v9 || !v8;
}

void llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v8 = *(uint64_t **)a2;
    v9 = 8 * v4;
    do
    {
      v10 = *v8++;
      llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper(a1, v10, a3, a4);
      v9 -= 8;
    }
    while (v9);
  }
}

{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *__p;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v8 = (unsigned int *)(a1 + 192);
  __p = 0;
  v23 = 0;
  v24 = 0;
  sub_1C6192D48((_QWORD *)(a1 + 192), a2);
  v9 = a2 + 24;
  v10 = *(_QWORD *)(a2 + 32);
  if (v10 == a2 + 24)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    do
    {
      if (v10)
        v13 = v10 - 56;
      else
        v13 = 0;
      v14 = v13 + 72;
      if (*(_QWORD *)(v13 + 72) != v13 + 72)
      {
        v15 = *(_QWORD *)(v13 + 80);
        if (v15 != v14)
        {
          do
          {
            if (v15)
              v16 = v15 - 24;
            else
              v16 = 0;
            llvm::IRSimilarity::IRInstructionMapper::convertToUnsignedVec((uint64_t)v8, v16, (uint64_t)&v25, (char **)&__p);
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15 != v14);
          v14 = *(_QWORD *)(v13 + 80);
        }
        v17 = v14 - 24;
        if (!v14)
          v17 = 0;
        v21 = v17 + 40;
        llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned(v8, &v21, (uint64_t)&__p, (uint64_t)&v25, 1);
        v12 = v25;
        v11 = v26;
        if (v26 != v25)
        {
          v18 = *(unint64_t **)(a1 + 272);
          v19 = (unint64_t *)*((_QWORD *)v26 - 1);
          v20 = *v18 & 0xFFFFFFFFFFFFFFF8;
          *v19 = v20 | *v19 & 7;
          v19[1] = (unint64_t)v18;
          *(_QWORD *)(v20 + 8) = v19;
          *v18 = *v18 & 7 | (unint64_t)v19;
        }
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10 != v9);
  }
  sub_1C4E36820(a3, *(_QWORD *)(a3 + 8), v12, v11, (v11 - v12) >> 3);
  sub_1C4E36A24(a4, a4[1], (char *)__p, v23, (v23 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v23 = (char *)__p;
    operator delete(__p);
  }
  if (v12)
  {
    v26 = v12;
    operator delete(v12);
  }
}

uint64_t llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalRelationFrom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int *v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  _DWORD *v52;
  _DWORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  int v59;
  _DWORD *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  _DWORD *v64;
  _DWORD *v65;
  unsigned int *v66;
  unsigned int v67;
  int v68;
  int v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  llvm::BasicBlock *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::BasicBlock *v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  int v108;
  int *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  _DWORD *v128;
  _DWORD *v129;
  int v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  _DWORD *v134;
  int v135;
  _DWORD *v136;
  int v137;
  BOOL v138;
  unsigned int v139;
  _DWORD *v140;
  _DWORD *v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int *v151;
  _QWORD *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156[2];
  unsigned int v157;
  __int128 v158;
  _QWORD v159[3];
  _QWORD *v160;
  _BYTE v161[24];
  _BYTE *v162;
  __int128 v163;
  _QWORD v164[3];
  _QWORD *v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v156[0] = 0;
  v156[1] = 0;
  v157 = 0;
  v6 = *(unsigned int *)(a3 + 16);
  v7 = *(_QWORD *)a3 + 32 * v6;
  if (*(_DWORD *)(a3 + 8))
  {
    if ((_DWORD)v6)
    {
      v8 = 32 * v6;
      v9 = *(_QWORD *)a3;
      while (*(_DWORD *)v9 >= 0xFFFFFFFE)
      {
        v9 += 32;
        v8 -= 32;
        if (!v8)
          goto LABEL_6;
      }
    }
    else
    {
      v9 = *(_QWORD *)a3;
    }
  }
  else
  {
LABEL_6:
    v9 = *(_QWORD *)a3 + 32 * v6;
  }
  v10 = *(_QWORD *)a3 + 32 * v6;
  if (v9 != v10)
  {
    while (1)
    {
      LODWORD(v163) = 0;
      LODWORD(v163) = *(_DWORD *)v9;
      LODWORD(v153) = 0;
      v11 = *(_DWORD *)(v9 + 16);
      if (v11 < 2)
        break;
      v12 = *(unsigned int *)(v9 + 24);
      if ((_DWORD)v12)
      {
        v13 = 4 * v12;
        v14 = *(unsigned int **)(v9 + 8);
        while (*v14 >= 0xFFFFFFFE)
        {
          ++v14;
          v13 -= 4;
          if (!v13)
            goto LABEL_33;
        }
      }
      else
      {
        v14 = *(unsigned int **)(v9 + 8);
      }
      v20 = *(_QWORD *)(v9 + 8) + 4 * v12;
      if (v14 != (unsigned int *)v20)
      {
LABEL_26:
        LODWORD(v158) = 0;
        LODWORD(v158) = *v14;
        v21 = sub_1C61940B0(v156, &v158);
        if ((int *)(v156[0] + 4 * v157) == v21)
        {
          v151 = sub_1C4E341F8(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v158);
          if ((int *)(*((_QWORD *)v151 + 1) + 4 * v151[6]) != sub_1C61940B0((uint64_t *)v151 + 1, &v163))
          {
            v19 = v158;
LABEL_23:
            LODWORD(v153) = v19;
            goto LABEL_33;
          }
        }
        v22 = v14 + 1;
        while (v22 != (unsigned int *)v20)
        {
          v23 = *v22++;
          if (v23 <= 0xFFFFFFFD)
          {
            v14 = v22 - 1;
            goto LABEL_26;
          }
        }
      }
LABEL_33:
      if (v157)
      {
        v24 = (int)v153;
        v25 = (37 * (_DWORD)v153) & (v157 - 1);
        v26 = (_DWORD *)(v156[0] + 4 * v25);
        v27 = *v26;
        if ((_DWORD)v153 == *v26)
          goto LABEL_49;
        v28 = 0;
        v29 = 1;
        while (v27 != -1)
        {
          if (v28)
            v30 = 0;
          else
            v30 = v27 == -2;
          if (v30)
            v28 = v26;
          v31 = v25 + v29++;
          v25 = v31 & (v157 - 1);
          v26 = (_DWORD *)(v156[0] + 4 * v25);
          v27 = *v26;
          if ((_DWORD)v153 == *v26)
            goto LABEL_49;
        }
        if (v28)
          v32 = v28;
        else
          v32 = v26;
      }
      else
      {
        v32 = 0;
      }
      v33 = sub_1C4A0C948((uint64_t)v156, (uint64_t)&v153, &v153, v32);
      *v33 = (_DWORD)v153;
      v24 = (int)v153;
LABEL_49:
      v34 = *(_QWORD *)(a2 + 72);
      v35 = *(unsigned int *)(a2 + 88);
      if ((_DWORD)v35)
      {
        LODWORD(v36) = (v35 - 1) & (37 * v24);
        v37 = (int *)(v34 + 8 * v36);
        v38 = *v37;
        if (v24 == *v37)
          goto LABEL_51;
        v68 = 1;
        while (v38 != -1)
        {
          v69 = v36 + v68++;
          v36 = v69 & (v35 - 1);
          v38 = *(_DWORD *)(v34 + 8 * v36);
          if (v24 == v38)
          {
            v37 = (int *)(v34 + 8 * v36);
            goto LABEL_51;
          }
        }
      }
      v37 = (int *)(v34 + 8 * v35);
LABEL_51:
      if ((int *)(v34 + 8 * v35) == v37)
        v39 = 0;
      else
        v39 = v37[1];
      v40 = v163;
      v41 = v39;
      *(_QWORD *)&v158 = v39 | ((unint64_t)v163 << 32);
      v42 = *(_DWORD *)(a1 + 112);
      if (v42)
      {
        v43 = *(_QWORD *)(a1 + 96);
        v44 = v42 - 1;
        v45 = v44 & (37 * v41);
        v46 = (_DWORD *)(v43 + 8 * v45);
        v47 = *v46;
        if ((_DWORD)v41 == *v46)
          goto LABEL_69;
        v48 = 0;
        v49 = 1;
        while (v47 != -1)
        {
          if (v48)
            v50 = 0;
          else
            v50 = v47 == -2;
          if (v50)
            v48 = v46;
          v51 = v45 + v49++;
          v45 = v51 & v44;
          v46 = (_DWORD *)(v43 + 8 * v45);
          v47 = *v46;
          if ((_DWORD)v41 == *v46)
            goto LABEL_69;
        }
        if (v48)
          v52 = v48;
        else
          v52 = v46;
      }
      else
      {
        v52 = 0;
      }
      v53 = sub_1C476C0AC(a1 + 96, (uint64_t)&v158, &v158, v52);
      *(_QWORD *)v53 = v158;
      v40 = v163;
LABEL_69:
      *(_QWORD *)&v158 = v40 | (v41 << 32);
      v54 = *(_DWORD *)(a1 + 88);
      if (v54)
      {
        v55 = *(_QWORD *)(a1 + 72);
        v56 = v54 - 1;
        v57 = v56 & (37 * v40);
        v58 = (_DWORD *)(v55 + 8 * v57);
        v59 = *v58;
        if (*v58 == (_DWORD)v40)
          goto LABEL_84;
        v60 = 0;
        v61 = 1;
        while (v59 != -1)
        {
          if (v60)
            v62 = 0;
          else
            v62 = v59 == -2;
          if (v62)
            v60 = v58;
          v63 = v57 + v61++;
          v57 = v63 & v56;
          v58 = (_DWORD *)(v55 + 8 * v57);
          v59 = *v58;
          if (*v58 == (_DWORD)v40)
            goto LABEL_84;
        }
        if (v60)
          v64 = v60;
        else
          v64 = v58;
      }
      else
      {
        v64 = 0;
      }
      v65 = sub_1C476C0AC(a1 + 72, (uint64_t)&v158, &v158, v64);
      *(_QWORD *)v65 = v158;
LABEL_84:
      v66 = (unsigned int *)(v9 + 32);
      while (v66 != (unsigned int *)v7)
      {
        v67 = *v66;
        v66 += 8;
        if (v67 <= 0xFFFFFFFD)
        {
          v9 = (uint64_t)(v66 - 8);
          goto LABEL_89;
        }
      }
      v9 = v7;
LABEL_89:
      if (v9 == v10)
        goto LABEL_98;
    }
    v15 = *(int **)(v9 + 8);
    v16 = *(unsigned int *)(v9 + 24);
    v17 = &v15[v16];
    if (v11)
    {
      if ((_DWORD)v16)
      {
        v18 = 4 * v16;
        while (*v15 >= 0xFFFFFFFE)
        {
          ++v15;
          v18 -= 4;
          if (!v18)
            goto LABEL_22;
        }
      }
      v17 = v15;
    }
LABEL_22:
    v19 = *v17;
    goto LABEL_23;
  }
LABEL_98:
  v153 = 0;
  v154 = 0;
  v155 = 0;
  sub_1C4E327B0(a1, (uint64_t)&v153);
  v70 = v153;
  v71 = &v153[v155];
  if ((_DWORD)v154)
  {
    if (v155)
    {
      v72 = 8 * v155;
      v73 = v153;
      while ((*v73 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v73;
        v72 -= 8;
        if (!v72)
          goto LABEL_103;
      }
    }
    else
    {
      v73 = v153;
    }
  }
  else
  {
LABEL_103:
    v73 = &v153[v155];
  }
  v74 = &v153[v155];
  if (v73 != v74)
  {
    while (1)
    {
      v75 = (llvm::BasicBlock *)*v73;
      v76 = *(_QWORD *)(a1 + 24);
      v77 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v77)
      {
        LODWORD(v78) = ((v75 >> 4) ^ (v75 >> 9)) & (v77 - 1);
        v79 = v76 + 16 * v78;
        v80 = *(llvm::BasicBlock **)v79;
        if (v75 == *(llvm::BasicBlock **)v79)
          goto LABEL_113;
        v81 = 1;
        while (v80 != (llvm::BasicBlock *)-4096)
        {
          v82 = v78 + v81++;
          v78 = v82 & (v77 - 1);
          v80 = *(llvm::BasicBlock **)(v76 + 16 * v78);
          if (v75 == v80)
          {
            v79 = v76 + 16 * v78;
            goto LABEL_113;
          }
        }
      }
      v79 = v76 + 16 * v77;
LABEL_113:
      v83 = *(unsigned int *)(v79 + 8);
      v84 = *(_QWORD *)(a1 + 72);
      v85 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v85)
      {
        LODWORD(v86) = (v85 - 1) & (37 * v83);
        v87 = (int *)(v84 + 8 * v86);
        v88 = *v87;
        if ((_DWORD)v83 == *v87)
          goto LABEL_115;
        v142 = 1;
        while (v88 != -1)
        {
          v143 = v86 + v142++;
          v86 = v143 & (v85 - 1);
          v88 = *(_DWORD *)(v84 + 8 * v86);
          if ((_DWORD)v83 == v88)
          {
            v87 = (int *)(v84 + 8 * v86);
            goto LABEL_115;
          }
        }
      }
      v87 = (int *)(v84 + 8 * v85);
LABEL_115:
      if ((int *)(v84 + 8 * v85) != v87)
        goto LABEL_116;
      v90 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      if (v75 == *(llvm::BasicBlock **)(v90 + 40))
        goto LABEL_144;
      llvm::BasicBlock::instructionsWithoutDebug(v75, 1, (uint64_t)&v158);
      v163 = v158;
      if (v160)
      {
        if (v160 == v159)
        {
          v165 = v164;
          (*(void (**)(_QWORD *, _QWORD *))(v159[0] + 24))(v159, v164);
          v91 = v165;
        }
        else
        {
          v91 = (_QWORD *)(*(uint64_t (**)(void))(*v160 + 16))();
          v165 = v91;
        }
        if ((_QWORD)v163)
          v90 = v163 - 24;
        else
          v90 = 0;
        if (v91 == v164)
        {
          (*(void (**)(_QWORD *))(v164[0] + 32))(v164);
        }
        else if (v91)
        {
          (*(void (**)(_QWORD *))(*v91 + 40))(v91);
        }
      }
      else
      {
        v165 = 0;
        if ((_QWORD)v158)
          v90 = v158 - 24;
        else
          v90 = 0;
      }
      v92 = v162;
      if (v162 == v161)
      {
        v92 = v161;
        v93 = 4;
      }
      else
      {
        if (!v162)
          goto LABEL_141;
        v93 = 5;
      }
      (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_141:
      v94 = v160;
      if (v160 == v159)
      {
        v94 = v159;
        v95 = 4;
LABEL_143:
        (*(void (**)(void))(*v94 + 8 * v95))();
        goto LABEL_144;
      }
      if (v160)
      {
        v95 = 5;
        goto LABEL_143;
      }
LABEL_144:
      v96 = sub_1C6192E10(a1, v90);
      v97 = *(_QWORD *)(a1 + 72);
      v98 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v98)
      {
        LODWORD(v99) = (v98 - 1) & (37 * v96);
        v100 = (int *)(v97 + 8 * v99);
        v101 = *v100;
        if (*v100 == v96)
          goto LABEL_146;
        v144 = 1;
        while (v101 != -1)
        {
          v145 = v99 + v144++;
          v99 = v145 & (v98 - 1);
          v101 = *(_DWORD *)(v97 + 8 * v99);
          if (v101 == v96)
          {
            v100 = (int *)(v97 + 8 * v99);
            goto LABEL_146;
          }
        }
      }
      v100 = (int *)(v97 + 8 * v98);
LABEL_146:
      if ((int *)(v97 + 8 * v98) == v100)
        v102 = 0;
      else
        v102 = v100[1];
      v103 = *(_QWORD *)(a2 + 96);
      v104 = *(unsigned int *)(a2 + 112);
      if ((_DWORD)v104)
      {
        LODWORD(v105) = (v104 - 1) & (37 * v102);
        v106 = (int *)(v103 + 8 * v105);
        v107 = *v106;
        if (v102 == *v106)
          goto LABEL_151;
        v146 = 1;
        while (v107 != -1)
        {
          v147 = v105 + v146++;
          v105 = v147 & (v104 - 1);
          v107 = *(_DWORD *)(v103 + 8 * v105);
          if (v102 == v107)
          {
            v106 = (int *)(v103 + 8 * v105);
            goto LABEL_151;
          }
        }
      }
      v106 = (int *)(v103 + 8 * v104);
LABEL_151:
      if ((int *)(v103 + 8 * v104) == v106)
        v108 = 0;
      else
        v108 = v106[1];
      LODWORD(v158) = v108;
      v109 = sub_1C4A1156C((uint64_t *)(a2 + 48), &v158);
      v110 = sub_1C6192E10(a2, *(_QWORD *)(*((_QWORD *)v109 + 1) + 40));
      v111 = *(_QWORD *)(a2 + 72);
      v112 = *(unsigned int *)(a2 + 88);
      if ((_DWORD)v112)
      {
        LODWORD(v113) = (v112 - 1) & (37 * v110);
        v114 = (int *)(v111 + 8 * v113);
        v115 = *v114;
        if (*v114 == v110)
          goto LABEL_156;
        v148 = 1;
        while (v115 != -1)
        {
          v149 = v113 + v148++;
          v113 = v149 & (v112 - 1);
          v115 = *(_DWORD *)(v111 + 8 * v113);
          if (v115 == v110)
          {
            v114 = (int *)(v111 + 8 * v113);
            goto LABEL_156;
          }
        }
      }
      v114 = (int *)(v111 + 8 * v112);
LABEL_156:
      if ((int *)(v111 + 8 * v112) == v114)
        v116 = 0;
      else
        v116 = v114[1];
      v117 = v116;
      *(_QWORD *)&v158 = v116 | (unint64_t)(v83 << 32);
      v118 = *(_DWORD *)(a1 + 112);
      if (!v118)
      {
        v128 = 0;
LABEL_173:
        v129 = sub_1C476C0AC(a1 + 96, (uint64_t)&v158, &v158, v128);
        *(_QWORD *)v129 = v158;
        goto LABEL_174;
      }
      v119 = *(_QWORD *)(a1 + 96);
      v120 = v118 - 1;
      v121 = v120 & (37 * v117);
      v122 = (_DWORD *)(v119 + 8 * v121);
      v123 = *v122;
      if ((_DWORD)v117 != *v122)
      {
        v124 = 0;
        v125 = 1;
        while (v123 != -1)
        {
          if (v124)
            v126 = 0;
          else
            v126 = v123 == -2;
          if (v126)
            v124 = v122;
          v127 = v121 + v125++;
          v121 = v127 & v120;
          v122 = (_DWORD *)(v119 + 8 * v121);
          v123 = *v122;
          if ((_DWORD)v117 == *v122)
            goto LABEL_174;
        }
        if (v124)
          v128 = v124;
        else
          v128 = v122;
        goto LABEL_173;
      }
LABEL_174:
      *(_QWORD *)&v158 = v83 | (v117 << 32);
      v130 = *(_DWORD *)(a1 + 88);
      if (!v130)
      {
        v140 = 0;
LABEL_188:
        v141 = sub_1C476C0AC(a1 + 72, (uint64_t)&v158, &v158, v140);
        *(_QWORD *)v141 = v158;
        goto LABEL_116;
      }
      v131 = *(_QWORD *)(a1 + 72);
      v132 = v130 - 1;
      v133 = v132 & (37 * v83);
      v134 = (_DWORD *)(v131 + 8 * v133);
      v135 = *v134;
      if ((_DWORD)v83 != *v134)
      {
        v136 = 0;
        v137 = 1;
        while (v135 != -1)
        {
          if (v136)
            v138 = 0;
          else
            v138 = v135 == -2;
          if (v138)
            v136 = v134;
          v139 = v133 + v137++;
          v133 = v139 & v132;
          v134 = (_DWORD *)(v131 + 8 * v133);
          v135 = *v134;
          if ((_DWORD)v83 == *v134)
            goto LABEL_116;
        }
        if (v136)
          v140 = v136;
        else
          v140 = v134;
        goto LABEL_188;
      }
LABEL_116:
      v89 = v73 + 1;
      v73 = v71;
      if (v89 != v71)
      {
        v73 = v89;
        while ((*v73 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v73 == v71)
          {
            v73 = v71;
            break;
          }
        }
      }
      if (v73 == v74)
      {
        v70 = v153;
        break;
      }
    }
  }
  MEMORY[0x1CAA32FB4](v70, 8);
  return MEMORY[0x1CAA32FB4](v156[0], 4);
}

int *sub_1C4E341F8(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2)
  {
    v3 = a2 - 1;
    v4 = (int *)(a1 + 32 * ((37 * a3) & (a2 - 1)));
    v5 = *v4;
    if (*v4 == a3)
      return v4;
    v6 = 1;
    LODWORD(v7) = (37 * a3) & v3;
    while (v5 != -1)
    {
      v8 = v7 + v6++;
      v7 = v8 & v3;
      v5 = *(_DWORD *)(a1 + 32 * v7);
      if (v5 == a3)
        return (int *)(a1 + 32 * v7);
    }
  }
  v7 = a2;
  return (int *)(a1 + 32 * v7);
}

_DWORD *llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalMappingFor(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  _DWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  unint64_t v35;

  v1 = result;
  v2 = *((_QWORD *)result + 6);
  v3 = result[16];
  v4 = (unsigned int *)(v2 + 16 * v3);
  if (result[14])
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = (unsigned int *)*((_QWORD *)result + 6);
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 4;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = (unsigned int *)*((_QWORD *)result + 6);
    }
  }
  else
  {
LABEL_6:
    v6 = (unsigned int *)(v2 + 16 * v3);
  }
  v7 = (unsigned int *)(v2 + 16 * v3);
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *v6;
      v10 = v8;
      v35 = v9 | ((unint64_t)v8 << 32);
      v11 = v1[22];
      if (v11)
      {
        v12 = *((_QWORD *)v1 + 9);
        v13 = v11 - 1;
        v14 = v13 & (37 * v9);
        v15 = (_DWORD *)(v12 + 8 * v14);
        v16 = *v15;
        if ((_DWORD)v9 == *v15)
          goto LABEL_25;
        v17 = 0;
        v18 = 1;
        while (v16 != -1)
        {
          if (v17)
            v19 = 0;
          else
            v19 = v16 == -2;
          if (v19)
            v17 = v15;
          v20 = v14 + v18++;
          v14 = v20 & v13;
          v15 = (_DWORD *)(v12 + 8 * v14);
          v16 = *v15;
          if ((_DWORD)v9 == *v15)
            goto LABEL_25;
        }
        if (v17)
          v21 = v17;
        else
          v21 = v15;
      }
      else
      {
        v21 = 0;
      }
      result = sub_1C476C0AC((uint64_t)(v1 + 18), (uint64_t)&v35, &v35, v21);
      *(_QWORD *)result = v35;
LABEL_25:
      v35 = v10 | ((unint64_t)*v6 << 32);
      v22 = v1[28];
      if (v22)
      {
        v23 = *((_QWORD *)v1 + 12);
        v24 = v22 - 1;
        v25 = v24 & (37 * v10);
        v26 = (_DWORD *)(v23 + 8 * v25);
        v27 = *v26;
        if ((_DWORD)v10 == *v26)
          goto LABEL_40;
        v28 = 0;
        v29 = 1;
        while (v27 != -1)
        {
          if (v28)
            v30 = 0;
          else
            v30 = v27 == -2;
          if (v30)
            v28 = v26;
          v31 = v25 + v29++;
          v25 = v31 & v24;
          v26 = (_DWORD *)(v23 + 8 * v25);
          v27 = *v26;
          if ((_DWORD)v10 == *v26)
            goto LABEL_40;
        }
        if (v28)
          v32 = v28;
        else
          v32 = v26;
      }
      else
      {
        v32 = 0;
      }
      result = sub_1C476C0AC((uint64_t)(v1 + 24), (uint64_t)&v35, &v35, v32);
      *(_QWORD *)result = v35;
LABEL_40:
      v8 = v10 + 1;
      v33 = v6 + 4;
      while (v33 != v4)
      {
        v34 = *v33;
        v33 += 4;
        if (v34 <= 0xFFFFFFFD)
        {
          v6 = v33 - 4;
          goto LABEL_45;
        }
      }
      v6 = v4;
LABEL_45:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t llvm::IRSimilarity::IRSimilarityIdentifier::findCandidates(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __int128 *v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  __int128 *v29;
  __int128 *v30;
  unsigned int v31;
  __int128 *v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __n128 *v46;
  __n128 *v47;
  __n128 *v48;
  char *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  __int128 v89;
  _QWORD *v90;
  unsigned int *v91;
  unsigned int v92;
  __int128 *i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  unsigned int v99;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  __int128 *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 *v122;
  __int128 v123;
  char *v124;
  _QWORD v125[2];
  int v126;
  _QWORD v127[2];
  int v128;
  _QWORD v129[2];
  int v130;
  char **v131;
  char v132[16];
  uint64_t v133[13];
  uint64_t v134;
  __int128 v135[7];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  llvm::SuffixTree::SuffixTree((uint64_t)v132, a3);
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  sub_1C619335C((uint64_t)&v106, v133[12]);
  v101 = 0;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 2;
  if (!v106)
    goto LABEL_2;
  v5 = 0;
  v6 = 0;
  v96 = a1;
  do
  {
    v7 = v107;
    if (v107 >= 2)
    {
      v8 = v108;
      v9 = v109;
      if (v108 != v109)
      {
        v10 = v107 - 1;
        do
        {
          v11 = *v8;
          v12 = v10 + v11;
          if (__CFADD__(v10, (_DWORD)v11))
          {
LABEL_11:
            sub_1C61933BC((uint64_t)&v116, v11, v7, *(llvm::IRSimilarity::IRInstructionData **)(*a2 + 8 * v11), *(llvm::IRSimilarity::IRInstructionData **)(*a2 + 8 * v12));
          }
          else
          {
            v13 = *v8;
            while (*(_DWORD *)(*a3 + 4 * v13) <= *(_DWORD *)(a1 + 192))
            {
              if (++v13 > v12)
                goto LABEL_11;
            }
          }
          ++v8;
        }
        while (v8 != v9);
        v5 = v117;
      }
    }
    v14 = v116;
    if (0xEEEEEEEEEEEEEEEFLL * (((char *)v5 - (char *)v116) >> 3) < 2)
      goto LABEL_15;
    v15 = 0;
    v129[0] = 0;
    v129[1] = 0;
    v130 = 0;
    v127[0] = 0;
    v127[1] = 0;
    v128 = 0;
    v125[0] = 0;
    v125[1] = 0;
    v126 = 0;
    if (v116 != v5)
    {
      v16 = 0;
      v97 = v5;
      while (1)
      {
        v17 = (uint64_t)v14;
        if (v130)
        {
          LODWORD(v18) = ((v14 >> 4) ^ (v14 >> 9)) & (v130 - 1);
          v19 = v129[0] + 16 * v18;
          v20 = *(__int128 **)v19;
          if (v14 == *(__int128 **)v19)
          {
LABEL_21:
            if ((_DWORD)v18 != v130)
              goto LABEL_22;
          }
          else
          {
            v52 = 1;
            while (v20 != (__int128 *)-4096)
            {
              v53 = v18 + v52++;
              v18 = v53 & (v130 - 1);
              v20 = *(__int128 **)(v129[0] + 16 * v18);
              if (v14 == v20)
              {
                v19 = v129[0] + 16 * v18;
                goto LABEL_21;
              }
            }
          }
        }
        v122 = v14;
        *(_QWORD *)&v123 = v16;
        sub_1C6144658((uint64_t)v135, (uint64_t)v129, (uint64_t *)&v122, &v123);
        v19 = *(_QWORD *)&v135[0];
        ++v16;
LABEL_22:
        v21 = *(unsigned int *)(v19 + 8);
        v22 = v110;
        v23 = v112;
        if (v112)
        {
          v24 = (v112 - 1) & (37 * (_DWORD)v21);
          v25 = v110 + 32 * v24;
          v26 = *(_DWORD *)v25;
          if (*(_DWORD *)v25 == (_DWORD)v21)
            goto LABEL_29;
          v27 = 1;
          while (v26 != -1)
          {
            v28 = v24 + v27++;
            v24 = v28 & (v112 - 1);
            v26 = *(_DWORD *)(v110 + 32 * v24);
            if (v26 == (_DWORD)v21)
            {
              v25 = v110 + 32 * v24;
              goto LABEL_29;
            }
          }
        }
        v25 = v110 + 32 * v112;
LABEL_29:
        if (v110 + 32 * v112 != v25)
          goto LABEL_30;
        llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalMappingFor(v14);
        sub_1C6193608((uint64_t)v135, v14);
        v119 = (char *)operator new(0x78uLL);
        v120 = v119;
        v49 = v119 + 120;
        v121 = v119 + 120;
        sub_1C6193608((uint64_t)v119, v135);
        v25 = 0;
        LODWORD(v122) = v21;
        *(_QWORD *)&v123 = v119;
        *((_QWORD *)&v123 + 1) = v49;
        v124 = v121;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        if (!v23)
          goto LABEL_67;
        v50 = (v23 - 1) & (37 * (_DWORD)v21);
        v25 = v22 + 32 * v50;
        v51 = *(_DWORD *)v25;
        if ((_DWORD)v21 != *(_DWORD *)v25)
        {
          v60 = 0;
          v61 = 1;
          while (v51 != -1)
          {
            if (v60)
              v62 = 0;
            else
              v62 = v51 == -2;
            if (v62)
              v60 = v25;
            v63 = v50 + v61++;
            v50 = v63 & (v23 - 1);
            v25 = v22 + 32 * v50;
            v51 = *(_DWORD *)v25;
            if ((_DWORD)v21 == *(_DWORD *)v25)
              goto LABEL_73;
          }
          if (v60)
            v25 = v60;
LABEL_67:
          if (4 * (int)v111 + 4 >= 3 * v23)
          {
            sub_1C4E35ED8(&v110, 2 * v23);
            if (!v112)
              goto LABEL_100;
            v54 = (37 * (_DWORD)v122) & (v112 - 1);
            v25 = v110 + 32 * v54;
            v55 = *(_DWORD *)v25;
            if ((_DWORD)v122 == *(_DWORD *)v25)
              goto LABEL_69;
            v56 = 0;
            v57 = 1;
            while (v55 != -1)
            {
              if (v56)
                v58 = 0;
              else
                v58 = v55 == -2;
              if (v58)
                v56 = v25;
              v59 = v54 + v57++;
              v54 = v59 & (v112 - 1);
              v25 = v110 + 32 * v54;
              v55 = *(_DWORD *)v25;
              a1 = v96;
              if ((_DWORD)v122 == *(_DWORD *)v25)
                goto LABEL_69;
            }
          }
          else
          {
            if (v23 + ~(_DWORD)v111 - HIDWORD(v111) > v23 >> 3)
            {
LABEL_69:
              LODWORD(v111) = v111 + 1;
              if (*(_DWORD *)v25 != -1)
                --HIDWORD(v111);
              *(_DWORD *)v25 = (_DWORD)v122;
              *(_QWORD *)(v25 + 16) = 0;
              *(_QWORD *)(v25 + 24) = 0;
              *(_QWORD *)(v25 + 8) = 0;
              *(_OWORD *)(v25 + 8) = v123;
              *(_QWORD *)(v25 + 24) = v124;
              v123 = 0uLL;
              v124 = 0;
              goto LABEL_73;
            }
            sub_1C4E35ED8(&v110, v23);
            if (!v112)
            {
LABEL_100:
              v25 = 0;
              goto LABEL_69;
            }
            v64 = (37 * (_DWORD)v122) & (v112 - 1);
            v25 = v110 + 32 * v64;
            v65 = *(_DWORD *)v25;
            if ((_DWORD)v122 == *(_DWORD *)v25)
              goto LABEL_69;
            v56 = 0;
            v66 = 1;
            while (v65 != -1)
            {
              if (v56)
                v67 = 0;
              else
                v67 = v65 == -2;
              if (v67)
                v56 = v25;
              v68 = v64 + v66++;
              v64 = v68 & (v112 - 1);
              v25 = v110 + 32 * v64;
              v65 = *(_DWORD *)v25;
              a1 = v96;
              if ((_DWORD)v122 == *(_DWORD *)v25)
                goto LABEL_69;
            }
          }
          if (v56)
            v25 = v56;
          a1 = v96;
          goto LABEL_69;
        }
LABEL_73:
        v131 = (char **)&v123;
        sub_1C4E38968((void ***)&v131);
        v131 = &v119;
        sub_1C4E38968((void ***)&v131);
        sub_1C6193514(v135);
LABEL_30:
        v14 = (__int128 *)(v17 + 120);
        v29 = v117;
        if ((__int128 *)(v17 + 120) != v117)
        {
          v30 = (__int128 *)(v17 + 120);
          while (1)
          {
            if (!v130)
              goto LABEL_41;
            v31 = ((v30 >> 4) ^ (v30 >> 9)) & (v130 - 1);
            v32 = *(__int128 **)(v129[0] + 16 * v31);
            if (v30 != v32)
              break;
LABEL_34:
            if (v31 == v130)
              goto LABEL_41;
LABEL_35:
            v30 = (__int128 *)((char *)v30 + 120);
            if (v30 == v29)
              goto LABEL_64;
          }
          v33 = 1;
          while (v32 != (__int128 *)-4096)
          {
            v34 = v31 + v33++;
            v31 = v34 & (v130 - 1);
            v32 = *(__int128 **)(v129[0] + 16 * v31);
            if (v30 == v32)
              goto LABEL_34;
          }
LABEL_41:
          sub_1C6193564(v127);
          sub_1C6193564(v125);
          if (llvm::IRSimilarity::IRSimilarityCandidate::compareStructure(v17, (uint64_t)v30, (const llvm::IRSimilarity::IRInstructionData *)v127, (uint64_t)v125))
          {
            llvm::IRSimilarity::IRSimilarityCandidate::createCanonicalRelationFrom((uint64_t)v30, v17, (uint64_t)v127, (uint64_t)v125);
            v122 = v30;
            *(_QWORD *)&v123 = v21;
            sub_1C6144658((uint64_t)v135, (uint64_t)v129, (uint64_t *)&v122, &v123);
            v35 = *(_QWORD *)(v25 + 16);
            v36 = *(_QWORD *)(v25 + 24);
            if (v35 >= v36)
            {
              v99 = v16;
              v38 = *(_QWORD *)(v25 + 8);
              v39 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v35 - v38) >> 3);
              v40 = v39 + 1;
              if (v39 + 1 > 0x222222222222222)
LABEL_159:
                abort();
              v41 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v36 - v38) >> 3);
              if (2 * v41 > v40)
                v40 = 2 * v41;
              if (v41 >= 0x111111111111111)
                v42 = 0x222222222222222;
              else
                v42 = v40;
              if (v42)
              {
                if (v42 > 0x222222222222222)
LABEL_160:
                  sub_1C4764EE4();
                v43 = (char *)operator new(120 * v42);
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[120 * v42];
              v45 = sub_1C6193608((uint64_t)&v43[120 * v39], v30);
              v37 = v45 + 120;
              v47 = *(__n128 **)(v25 + 8);
              v46 = *(__n128 **)(v25 + 16);
              if (v46 == v47)
              {
                *(_QWORD *)(v25 + 8) = v45;
                *(_QWORD *)(v25 + 16) = v37;
                *(_QWORD *)(v25 + 24) = v44;
                a1 = v96;
              }
              else
              {
                do
                {
                  v46 = (__n128 *)((char *)v46 - 120);
                  sub_1C6193400((__n128 *)(v45 - 120), v46);
                }
                while (v46 != v47);
                v46 = *(__n128 **)(v25 + 8);
                v48 = *(__n128 **)(v25 + 16);
                *(_QWORD *)(v25 + 8) = v45;
                *(_QWORD *)(v25 + 16) = v37;
                *(_QWORD *)(v25 + 24) = v44;
                a1 = v96;
                while (v48 != v46)
                {
                  v48 = (__n128 *)((char *)v48 - 120);
                  sub_1C6193514(v48);
                }
              }
              v5 = v97;
              if (v46)
                operator delete(v46);
              v16 = v99;
            }
            else
            {
              v37 = sub_1C6193608(v35, v30) + 120;
            }
            *(_QWORD *)(v25 + 16) = v37;
          }
          goto LABEL_35;
        }
LABEL_64:
        if (v14 == v5)
        {
          v15 = v129[0];
          break;
        }
      }
    }
    sub_1C6193698((uint64_t)v125);
    MEMORY[0x1CAA32FB4](v125[0], 8);
    sub_1C6193698((uint64_t)v127);
    MEMORY[0x1CAA32FB4](v127[0], 8);
    MEMORY[0x1CAA32FB4](v15, 8);
    v69 = (unsigned int *)(v110 + 32 * v112);
    if ((_DWORD)v111)
    {
      if (v112)
      {
        v71 = 32 * v112;
        v70 = v110;
        while (*(_DWORD *)v70 >= 0xFFFFFFFE)
        {
          v70 += 32;
          v71 -= 32;
          if (!v71)
          {
            v70 = v110 + 32 * v112;
            break;
          }
        }
      }
      else
      {
        v70 = v110;
      }
    }
    else
    {
      v70 = v110 + 32 * v112;
    }
    v72 = v110 + 32 * v112;
LABEL_126:
    while (v70 != v72)
    {
      v74 = *(__int128 **)(v70 + 8);
      v73 = *(__int128 **)(v70 + 16);
      if (0xEEEEEEEEEEEEEEEFLL * (((char *)v73 - (char *)v74) >> 3) >= 2)
      {
        v76 = *(_QWORD **)(a1 + 304);
        v75 = *(_QWORD *)(a1 + 312);
        if ((unint64_t)v76 < v75)
        {
          *v76 = 0;
          v76[1] = 0;
          v76[2] = 0;
          sub_1C4E389D8(v76, *(__int128 **)(v70 + 8), *(__int128 **)(v70 + 16), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)(v70 + 8)) >> 3));
          v77 = v76 + 3;
LABEL_143:
          *(_QWORD *)(a1 + 304) = v77;
          goto LABEL_144;
        }
        v78 = *(_QWORD *)(a1 + 296);
        v79 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v76 - v78) >> 3);
        v80 = v79 + 1;
        if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_159;
        v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - v78) >> 3);
        if (2 * v81 > v80)
          v80 = 2 * v81;
        if (v81 >= 0x555555555555555)
          v82 = 0xAAAAAAAAAAAAAAALL;
        else
          v82 = v80;
        if (v82 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_160;
        v83 = 3 * v82;
        v84 = (char *)operator new(24 * v82);
        v85 = &v84[24 * v79];
        *((_QWORD *)v85 + 1) = 0;
        *((_QWORD *)v85 + 2) = 0;
        v86 = &v84[8 * v83];
        *(_QWORD *)v85 = 0;
        sub_1C4E389D8(v85, v74, v73, 0xEEEEEEEEEEEEEEEFLL * (((char *)v73 - (char *)v74) >> 3));
        v77 = v85 + 24;
        v87 = *(_QWORD **)(a1 + 296);
        v88 = *(_QWORD **)(a1 + 304);
        if (v88 == v87)
        {
          *(_QWORD *)(a1 + 296) = v85;
          *(_QWORD *)(a1 + 304) = v77;
          *(_QWORD *)(a1 + 312) = v86;
        }
        else
        {
          do
          {
            v89 = *(_OWORD *)(v88 - 3);
            v88 -= 3;
            *(_OWORD *)(v85 - 24) = v89;
            v85 -= 24;
            *((_QWORD *)v85 + 2) = v88[2];
            *v88 = 0;
            v88[1] = 0;
            v88[2] = 0;
          }
          while (v88 != v87);
          v88 = *(_QWORD **)(a1 + 296);
          v90 = *(_QWORD **)(a1 + 304);
          *(_QWORD *)(a1 + 296) = v85;
          *(_QWORD *)(a1 + 304) = v77;
          *(_QWORD *)(a1 + 312) = v86;
          if (v90 != v88)
          {
            do
            {
              v90 -= 3;
              *(_QWORD *)&v135[0] = v90;
              sub_1C4E38968((void ***)v135);
            }
            while (v90 != v88);
            if (!v88)
              goto LABEL_143;
LABEL_142:
            operator delete(v88);
            goto LABEL_143;
          }
        }
        if (!v88)
          goto LABEL_143;
        goto LABEL_142;
      }
LABEL_144:
      v91 = (unsigned int *)(v70 + 32);
      while (v91 != v69)
      {
        v92 = *v91;
        v91 += 8;
        if (v92 <= 0xFFFFFFFD)
        {
          v70 = (uint64_t)(v91 - 8);
          goto LABEL_126;
        }
      }
      v70 = (uint64_t)v69;
    }
    v5 = v116;
    for (i = v117; i != v5; i = (__int128 *)sub_1C6193514((_QWORD *)i - 15))
      ;
    v117 = v5;
    sub_1C6192E74(&v110);
    v94 = v113;
    v95 = v114;
    while (v95 != v94)
    {
      v95 -= 24;
      *(_QWORD *)&v135[0] = v95;
      sub_1C4E38968((void ***)v135);
    }
    v114 = v94;
    v6 = v101;
LABEL_15:
    sub_1C4E35998(&v106);
  }
  while (v106 != v6);
LABEL_2:
  sub_1C61936E8(&v101);
  sub_1C61936E8(&v106);
  sub_1C6194120(&v110);
  *(_QWORD *)&v135[0] = &v113;
  sub_1C4E365D0((void ***)v135);
  *(_QWORD *)&v135[0] = &v116;
  sub_1C4E38968((void ***)v135);
  sub_1C4926AE8((uint64_t)&v134);
  sub_1C4E36210((uint64_t)v133);
  return sub_1C4926AE8((uint64_t)v133);
}

uint64_t llvm::IRSimilarity::IRSimilarityIdentifier::findSimilarity(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v10;
  uint64_t v11;
  void *v12[3];

  sub_1C6192F28(a1);
  memset(v12, 0, sizeof(v12));
  __p = 0;
  v10 = 0;
  v11 = 0;
  *(_WORD *)(a1 + 280) = *(_WORD *)(a1 + 288);
  *(_BYTE *)(a1 + 251) = *(_BYTE *)(a1 + 290);
  *(_WORD *)(a1 + 282) = *(_WORD *)(a1 + 291);
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      v7 = *a2++;
      llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper(a1, v7, (uint64_t)v12, (char **)&__p);
      v6 -= 8;
    }
    while (v6);
  }
  llvm::IRSimilarity::IRSimilarityIdentifier::findCandidates(a1, v12, &__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v12[0])
    operator delete(v12[0]);
  return a1 + 296;
}

uint64_t sub_1C4E34FC4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "ir-similarity-identifier";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "ir-similarity-identifier";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &llvm::IRSimilarityIdentifierWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::IRSimilarityIdentifierWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *llvm::IRSimilarityAnalysisPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  unint64_t *v23;
  const void *v24;
  size_t v25;
  unint64_t v26;
  void **p_dst;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  llvm::raw_ostream *v32;
  void *v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  unint64_t *v43;
  const void *v44;
  size_t v45;
  unint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  llvm::raw_ostream *v51;
  uint64_t ***v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t ****v57;
  uint64_t ***v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t *v62;
  const void *v63;
  size_t v64;
  unint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  llvm::raw_ostream *v71;
  void *v72;
  llvm::raw_ostream *v73;
  void *v74;
  llvm::raw_ostream *v75;
  _BYTE *v76;
  _QWORD *v79;
  _QWORD *v80;
  void **__dst;
  size_t v82;
  int64_t v83;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::IRSimilarityAnalysis::Key, a2);
  v6 = *(_QWORD **)(ResultImpl + 304);
  v79 = *(_QWORD **)(ResultImpl + 312);
  if (v6 != v79)
  {
    do
    {
      v7 = *a1;
      sub_1C5E21910(*a1, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6[1] - *v6) >> 3), 0, 0, 0);
      v8 = (void *)*((_QWORD *)v7 + 4);
      if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 0x15uLL)
      {
        qmemcpy(v8, " candidates of length ", 22);
        *((_QWORD *)v7 + 4) += 22;
      }
      else
      {
        v7 = llvm::raw_ostream::write(v7, " candidates of length ", 0x16uLL);
      }
      sub_1C5E21910(v7, *(unsigned int *)(*v6 + 4), 0, 0, 0);
      v9 = (void *)*((_QWORD *)v7 + 4);
      if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 0xDuLL)
      {
        qmemcpy(v9, ".  Found in: \n", 14);
        *((_QWORD *)v7 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v7, ".  Found in: \n", 0xEuLL);
      }
      v10 = *v6;
      v11 = v6[1];
      v80 = v6;
      while (v10 != v11)
      {
        v12 = *a1;
        v13 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v13) > 0xB)
        {
          *(_DWORD *)(v13 + 8) = 540700271;
          *(_QWORD *)v13 = *(_QWORD *)"  Function: ";
          *((_QWORD *)v12 + 4) += 12;
        }
        else
        {
          v12 = llvm::raw_ostream::write(*a1, "  Function: ", 0xCuLL);
        }
        v14 = *(uint64_t ****)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16) + 40) + 56);
        if ((*((_BYTE *)v14 + 23) & 0x10) == 0)
        {
          v25 = 0;
          HIBYTE(v83) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_26;
        }
        v15 = ***v14;
        v16 = *(_QWORD *)(v15 + 152);
        v17 = *(unsigned int *)(v15 + 168);
        if (!(_DWORD)v17)
          goto LABEL_17;
        LODWORD(v18) = (v17 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v19 = (uint64_t ****)(v16 + 16 * v18);
        v20 = *v19;
        if (*v19 != v14)
        {
          v21 = 1;
          while (v20 != (uint64_t ***)-4096)
          {
            v22 = v18 + v21++;
            v18 = v22 & (v17 - 1);
            v20 = *(uint64_t ****)(v16 + 16 * v18);
            if (v20 == v14)
            {
              v19 = (uint64_t ****)(v16 + 16 * v18);
              goto LABEL_18;
            }
          }
LABEL_17:
          v19 = (uint64_t ****)(v16 + 16 * v17);
        }
LABEL_18:
        v23 = (unint64_t *)v19[1];
        v26 = *v23;
        v24 = v23 + 2;
        v25 = v26;
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_105;
        if (v25 >= 0x17)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          p_dst = (void **)operator new(v28 + 1);
          v82 = v25;
          v83 = v29 | 0x8000000000000000;
          __dst = p_dst;
LABEL_25:
          memmove(p_dst, v24, v25);
          goto LABEL_26;
        }
        HIBYTE(v83) = v25;
        p_dst = (void **)&__dst;
        if (v25)
          goto LABEL_25;
LABEL_26:
        *((_BYTE *)p_dst + v25) = 0;
        if (v83 >= 0)
          v30 = (const char *)&__dst;
        else
          v30 = (const char *)__dst;
        if (v83 >= 0)
          v31 = HIBYTE(v83) & 0x7F;
        else
          v31 = v82;
        v32 = llvm::raw_ostream::write(v12, v30, v31);
        v33 = (void *)*((_QWORD *)v32 + 4);
        if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 0xEuLL)
        {
          qmemcpy(v33, ", Basic Block: ", 15);
          *((_QWORD *)v32 + 4) += 15;
        }
        else
        {
          llvm::raw_ostream::write(v32, ", Basic Block: ", 0xFuLL);
        }
        if (SHIBYTE(v83) < 0)
          operator delete(__dst);
        v34 = *(uint64_t ****)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16) + 40);
        if ((*((_BYTE *)v34 + 23) & 0x10) == 0)
        {
          v45 = 0;
          HIBYTE(v83) = 0;
          v47 = (void **)&__dst;
          goto LABEL_52;
        }
        v35 = ***v34;
        v36 = *(_QWORD *)(v35 + 152);
        v37 = *(unsigned int *)(v35 + 168);
        if (!(_DWORD)v37)
          goto LABEL_43;
        LODWORD(v38) = (v37 - 1) & ((v34 >> 4) ^ (v34 >> 9));
        v39 = (uint64_t ****)(v36 + 16 * v38);
        v40 = *v39;
        if (*v39 != v34)
        {
          v41 = 1;
          while (v40 != (uint64_t ***)-4096)
          {
            v42 = v38 + v41++;
            v38 = v42 & (v37 - 1);
            v40 = *(uint64_t ****)(v36 + 16 * v38);
            if (v40 == v34)
            {
              v39 = (uint64_t ****)(v36 + 16 * v38);
              goto LABEL_44;
            }
          }
LABEL_43:
          v39 = (uint64_t ****)(v36 + 16 * v37);
        }
LABEL_44:
        v43 = (unint64_t *)v39[1];
        v46 = *v43;
        v44 = v43 + 2;
        v45 = v46;
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_105;
        if (v45 >= 0x17)
        {
          v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17)
            v48 = v45 | 7;
          v49 = v48 + 1;
          v47 = (void **)operator new(v48 + 1);
          v82 = v45;
          v83 = v49 | 0x8000000000000000;
          __dst = v47;
LABEL_51:
          memmove(v47, v44, v45);
          goto LABEL_52;
        }
        HIBYTE(v83) = v45;
        v47 = (void **)&__dst;
        if (v45)
          goto LABEL_51;
LABEL_52:
        *((_BYTE *)v47 + v45) = 0;
        if (v83 >= 0)
          v50 = HIBYTE(v83);
        else
          v50 = v82;
        if (SHIBYTE(v83) < 0)
          operator delete(__dst);
        v51 = *a1;
        if (!v50)
        {
          v61 = *((_QWORD *)v51 + 4);
          if ((unint64_t)(*((_QWORD *)v51 + 3) - v61) > 8)
          {
            *(_BYTE *)(v61 + 8) = 41;
            *(_QWORD *)v61 = *(_QWORD *)"(unnamed)";
            *((_QWORD *)v51 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(*a1, "(unnamed)", 9uLL);
          }
          goto LABEL_84;
        }
        v52 = *(uint64_t ****)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16) + 40);
        if ((*((_BYTE *)v52 + 23) & 0x10) == 0)
        {
          v64 = 0;
          HIBYTE(v83) = 0;
          v66 = (void **)&__dst;
          goto LABEL_76;
        }
        v53 = ***v52;
        v54 = *(_QWORD *)(v53 + 152);
        v55 = *(unsigned int *)(v53 + 168);
        if (!(_DWORD)v55)
          goto LABEL_67;
        LODWORD(v56) = (v55 - 1) & ((v52 >> 4) ^ (v52 >> 9));
        v57 = (uint64_t ****)(v54 + 16 * v56);
        v58 = *v57;
        if (*v57 != v52)
        {
          v59 = 1;
          while (v58 != (uint64_t ***)-4096)
          {
            v60 = v56 + v59++;
            v56 = v60 & (v55 - 1);
            v58 = *(uint64_t ****)(v54 + 16 * v56);
            if (v58 == v52)
            {
              v57 = (uint64_t ****)(v54 + 16 * v56);
              goto LABEL_68;
            }
          }
LABEL_67:
          v57 = (uint64_t ****)(v54 + 16 * v55);
        }
LABEL_68:
        v62 = (unint64_t *)v57[1];
        v65 = *v62;
        v63 = v62 + 2;
        v64 = v65;
        if (v65 > 0x7FFFFFFFFFFFFFF7)
LABEL_105:
          abort();
        if (v64 >= 0x17)
        {
          v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v64 | 7) != 0x17)
            v67 = v64 | 7;
          v68 = v67 + 1;
          v66 = (void **)operator new(v67 + 1);
          v82 = v64;
          v83 = v68 | 0x8000000000000000;
          __dst = v66;
LABEL_75:
          memmove(v66, v63, v64);
          goto LABEL_76;
        }
        HIBYTE(v83) = v64;
        v66 = (void **)&__dst;
        if (v64)
          goto LABEL_75;
LABEL_76:
        *((_BYTE *)v66 + v64) = 0;
        if (v83 >= 0)
          v69 = (const char *)&__dst;
        else
          v69 = (const char *)__dst;
        if (v83 >= 0)
          v70 = HIBYTE(v83) & 0x7F;
        else
          v70 = v82;
        llvm::raw_ostream::write(v51, v69, v70);
        if (SHIBYTE(v83) < 0)
          operator delete(__dst);
LABEL_84:
        v71 = *a1;
        v72 = (void *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v72 > 0x17uLL)
        {
          qmemcpy(v72, "\n    Start Instruction: ", 24);
          *((_QWORD *)v71 + 4) += 24;
        }
        else
        {
          llvm::raw_ostream::write(v71, "\n    Start Instruction: ", 0x18uLL);
        }
        llvm::Value::print(*(llvm::Value **)(*(_QWORD *)(v10 + 8) + 16), *a1, 0);
        v73 = *a1;
        v74 = (void *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v74 > 0x17uLL)
        {
          qmemcpy(v74, "\n      End Instruction: ", 24);
          *((_QWORD *)v73 + 4) += 24;
        }
        else
        {
          llvm::raw_ostream::write(v73, "\n      End Instruction: ", 0x18uLL);
        }
        llvm::Value::print(*(llvm::Value **)(*(_QWORD *)(v10 + 16) + 16), *a1, 0);
        v75 = *a1;
        v76 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if (*((_BYTE **)*a1 + 3) == v76)
        {
          llvm::raw_ostream::write(v75, "\n", 1uLL);
        }
        else
        {
          *v76 = 10;
          ++*((_QWORD *)v75 + 4);
        }
        v10 += 120;
      }
      v6 = v80 + 3;
    }
    while (v80 + 3 != v79);
  }
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C4E3578C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _DWORD *v18;

  if (a3)
  {
    v6 = (a3 - 1) | ((unint64_t)(a3 - 1) >> 1) | (((a3 - 1) | ((unint64_t)(a3 - 1) >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    sub_1C4A06510((_QWORD *)a1, (((v7 | (v7 >> 16)) >> 32) | v7 | (v7 >> 16)) + 1);
    v8 = &a2[a3];
    while (1)
    {
      v9 = *(_DWORD *)(a1 + 16);
      if (!v9)
        break;
      v10 = v9 - 1;
      v11 = (37 * *a2) & v10;
      v12 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
      v13 = *v12;
      if (*a2 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -1)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -2;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
          v13 = *v12;
          if (*a2 == *v12)
            goto LABEL_19;
        }
        if (v14)
          v18 = v14;
        else
          v18 = v12;
        goto LABEL_18;
      }
LABEL_19:
      if (++a2 == v8)
        return a1;
    }
    v18 = 0;
LABEL_18:
    *sub_1C4A0C948(a1, (uint64_t)a2, a2, v18) = *a2;
    goto LABEL_19;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

_QWORD *sub_1C4E358A8(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_17:
    result = sub_1C4DE3FA0(a2, (uint64_t)a3, a3, v18);
    *result = *a3;
    *((_DWORD *)result + 2) = *a4;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_4;
  }
  v9 = *(_QWORD *)a2;
  v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v14 = 0;
    v15 = 1;
    while (v12 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v12 == -8192;
      if (v16)
        v14 = result;
      v17 = v10 + v15++;
      v10 = v17 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_3;
    }
    if (v14)
      v18 = v14;
    else
      v18 = result;
    goto LABEL_17;
  }
LABEL_3:
  v13 = 0;
LABEL_4:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

void sub_1C4E35998(_QWORD *a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  BOOL v39;
  _QWORD *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v1 = a1;
  v3 = a1 + 2;
  v2 = (void *)a1[2];
  v54 = v3;
  *((_DWORD *)v3 - 2) = 0;
  if (v2)
  {
    v1[3] = v2;
    operator delete(v2);
  }
  v4 = 0;
  v5 = 0;
  *v1 = 0;
  v54[1] = 0;
  v54[2] = 0;
  *v54 = 0;
  v57 = v1;
  do
  {
    v6 = v1[6];
    if (v1[5] == v6)
      goto LABEL_85;
    v7 = *(_QWORD *)(v6 - 8);
    v1[6] = v6 - 8;
    v8 = *(unsigned int *)(v7 + 16);
    v9 = *(_QWORD *)v7 + 16 * v8;
    if (*(_DWORD *)(v7 + 8))
    {
      if (*(_DWORD *)(v7 + 16))
      {
        v10 = 16 * v8;
        v11 = *(_QWORD *)v7;
        while (*(_DWORD *)v11 >= 0xFFFFFFFE)
        {
          v11 += 16;
          v10 -= 16;
          if (!v10)
            goto LABEL_10;
        }
      }
      else
      {
        v11 = *(_QWORD *)v7;
      }
    }
    else
    {
LABEL_10:
      v11 = *(_QWORD *)v7 + 16 * v8;
    }
    v12 = *(unsigned int *)(v7 + 56);
    v13 = *(_QWORD *)v7 + 16 * v8;
    v14 = v5;
    v55 = v7;
    v56 = v13;
    while (v11 != v13)
    {
      v15 = *(_QWORD *)(v11 + 8);
      if (*(_DWORD *)(v15 + 40) == -1)
      {
        v17 = (_QWORD *)v1[6];
        v16 = v1[7];
        if ((unint64_t)v17 >= v16)
        {
          v19 = (_QWORD *)v1[5];
          v20 = v17 - v19;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            goto LABEL_89;
          v22 = v12;
          v23 = v4;
          v24 = v16 - (_QWORD)v19;
          if (v24 >> 2 > v21)
            v21 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v21;
          if (v25)
          {
            if (v25 >> 61)
              goto LABEL_90;
            v26 = (char *)operator new(8 * v25);
            v15 = *(_QWORD *)(v11 + 8);
          }
          else
          {
            v26 = 0;
          }
          v31 = &v26[8 * v20];
          *(_QWORD *)v31 = v15;
          v18 = v31 + 8;
          if (v17 == v19)
          {
            v1 = v57;
          }
          else
          {
            do
            {
              v32 = *--v17;
              *((_QWORD *)v31 - 1) = v32;
              v31 -= 8;
            }
            while (v17 != v19);
            v1 = v57;
            v17 = (_QWORD *)v57[5];
          }
          v1[5] = v31;
          v1[6] = v18;
          v1[7] = &v26[8 * v25];
          if (v17)
            operator delete(v17);
          v4 = v23;
          v12 = v22;
          v13 = v56;
        }
        else
        {
          *v17 = v15;
          v18 = v17 + 1;
        }
        v1[6] = v18;
      }
      else if (v12 >= *((_DWORD *)v1 + 16))
      {
        if (v5 >= v4)
        {
          v27 = (v5 - v14) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
LABEL_89:
            abort();
          if ((v4 - v14) >> 2 > v28)
            v28 = (v4 - v14) >> 2;
          if ((unint64_t)(v4 - v14) >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
          {
            if (v29 >> 61)
LABEL_90:
              sub_1C4764EE4();
            v30 = (char *)operator new(8 * v29);
            v15 = *(_QWORD *)(v11 + 8);
          }
          else
          {
            v30 = 0;
          }
          v33 = &v30[8 * v27];
          *(_QWORD *)v33 = v15;
          v34 = v33 + 8;
          while (v5 != v14)
          {
            v35 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v33 - 1) = v35;
            v33 -= 8;
          }
          v4 = &v30[8 * v29];
          if (v14)
            operator delete(v14);
          v5 = v34;
          v14 = v33;
          v1 = v57;
        }
        else
        {
          *(_QWORD *)v5 = v15;
          v5 += 8;
        }
      }
      v36 = (unsigned int *)(v11 + 16);
      while (v36 != (unsigned int *)v9)
      {
        v37 = *v36;
        v36 += 4;
        if (v37 <= 0xFFFFFFFD)
        {
          v11 = (uint64_t)(v36 - 4);
          goto LABEL_58;
        }
      }
      v11 = v9;
LABEL_58:
      ;
    }
    v38 = v5;
    v39 = *(_DWORD *)(v55 + 24) != -1 && (unint64_t)(v5 - v14) > 8;
    v5 = v14;
  }
  while (!v39);
  *v1 = v55;
  *((_DWORD *)v1 + 2) = v12;
  if (v14 != v38)
  {
    v40 = v1;
    v41 = (_DWORD *)v1[3];
    v42 = v14;
    do
    {
      v43 = *(_QWORD *)v42;
      v44 = v40[4];
      if ((unint64_t)v41 >= v44)
      {
        v46 = (_DWORD *)*v54;
        v47 = ((uint64_t)v41 - *v54) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          goto LABEL_89;
        v49 = v44 - (_QWORD)v46;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 62)
            goto LABEL_90;
          v51 = (char *)operator new(4 * v50);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[4 * v47];
        *(_DWORD *)v52 = *(_DWORD *)(v43 + 40);
        v45 = v52 + 4;
        while (v41 != v46)
        {
          v53 = *--v41;
          *((_DWORD *)v52 - 1) = v53;
          v52 -= 4;
        }
        v40 = v57;
        v57[2] = v52;
        v57[3] = v45;
        v57[4] = &v51[4 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v41 = *(_DWORD *)(v43 + 40);
        v45 = v41 + 1;
        v40 = v57;
      }
      v40[3] = v45;
      v42 += 8;
      v41 = v45;
    }
    while (v42 != v38);
    v5 = v14;
LABEL_85:
    if (!v5)
      return;
LABEL_86:
    operator delete(v5);
    return;
  }
  v5 = v38;
  if (v38)
    goto LABEL_86;
}

__n128 *sub_1C4E35D8C(__n128 **a1, unsigned int a2, int a3, llvm::IRSimilarity::IRInstructionData *a4, llvm::IRSimilarity::IRInstructionData *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v12;
  char *v13;
  llvm::IRSimilarity::IRSimilarityCandidate *v14;
  __n128 *v15;
  llvm::IRSimilarity::IRSimilarityCandidate *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;

  v5 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x222222222222222)
    abort();
  if (0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 3) > v6)
    v6 = 0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x111111111111111)
    v12 = 0x222222222222222;
  else
    v12 = v6;
  if (v12)
  {
    if (v12 > 0x222222222222222)
      sub_1C4764EE4();
    v13 = (char *)operator new(120 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = (llvm::IRSimilarity::IRSimilarityCandidate *)&v13[120 * v5];
  v15 = (__n128 *)&v13[120 * v12];
  v16 = llvm::IRSimilarity::IRSimilarityCandidate::IRSimilarityCandidate(v14, a2, a3, a4, a5);
  v17 = (__n128 *)((char *)v16 + 120);
  v19 = *a1;
  v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (__n128 *)v16;
    a1[1] = v17;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v18 = (__n128 *)((char *)v18 - 120);
      sub_1C6193400((__n128 *)((char *)v16 - 120), v18);
    }
    while (v18 != v19);
    v18 = *a1;
    v20 = a1[1];
    *a1 = (__n128 *)v16;
    a1[1] = v17;
    a1[2] = v15;
    while (v20 != v18)
    {
      v20 = (__n128 *)((char *)v20 - 120);
      sub_1C6193514(v20);
    }
  }
  if (v18)
    operator delete(v18);
  return v17;
}

_DWORD *sub_1C4E35ED8(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[8 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 32 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -1)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -2;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = *a1 + 32 * v16;
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v19)
              v17 = v19;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)(v17 + 24) = 0;
          *(_QWORD *)(v17 + 8) = 0;
          *(_OWORD *)(v17 + 8) = *(_OWORD *)(v12 + 2);
          *(_QWORD *)(v17 + 24) = *((_QWORD *)v12 + 3);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = 0;
          *((_QWORD *)v12 + 3) = 0;
          ++*((_DWORD *)a1 + 2);
          v25 = (void **)(v12 + 2);
          sub_1C4E38968(&v25);
        }
        v12 += 8;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v23 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v23)
  {
    v24 = 32 * v23;
    do
    {
      *result = -1;
      result += 8;
      v24 -= 32;
    }
    while (v24);
  }
  return result;
}

void *sub_1C4E36094(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 4);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(8 * v5, (std::align_val_t)4uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 8 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_DWORD *sub_1C4E36100(_QWORD *a1)
{
  int v2;
  _DWORD *result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  result = (_DWORD *)sub_1C6193698((uint64_t)a1);
  if (v2)
  {
    v4 = 1 << (33 - __clz(v2 - 1));
    if (v4 <= 64)
      v5 = 64;
    else
      v5 = v4;
    if (v5 == *((_DWORD *)a1 + 4))
    {
      a1[1] = 0;
      v6 = 32 * v5;
      v7 = (_DWORD *)*a1;
      do
      {
        *v7 = -1;
        v7 += 8;
        v6 -= 32;
      }
      while (v6);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*a1, 8);
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = operator new(32 * v9, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *result = -1;
          result += 8;
          v11 -= 32;
        }
        while (v11);
      }
    }
  }
  else if (*((_DWORD *)a1 + 4))
  {
    result = (_DWORD *)MEMORY[0x1CAA32FB4](*a1, 8);
    *a1 = 0;
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    a1[1] = 0;
  }
  return result;
}

uint64_t sub_1C4E36210(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t j;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 64; i <= v8; i += 64)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(i - 64), 8);
      ++v3;
    }
    while (v3 != v4);
  }
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD **)(a1 + 64);
    v12 = &v11[2 * v10];
    do
    {
      v13 = *v11 + v11[1];
      for (j = ((*v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 64; j <= v13; j += 64)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(j - 64), 8);
      v11 += 2;
    }
    while (v11 != v12);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C4E3631C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t j;
  void *v17;
  void *v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 160; i <= v8; i += 160)
      {
        v10 = *(void **)(i - 40);
        if ((void *)(i - 24) != v10)
          free(v10);
        if (*(_BYTE *)(i - 48))
        {
          if (*(char *)(i - 49) < 0)
            operator delete(*(void **)(i - 72));
          *(_BYTE *)(i - 48) = 0;
        }
        v11 = *(void **)(i - 136);
        if ((void *)(i - 120) != v11)
          free(v11);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = *v13 + v13[1];
      for (j = ((*v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 160; j <= v15; j += 160)
      {
        v17 = *(void **)(j - 40);
        if ((void *)(j - 24) != v17)
          free(v17);
        if (*(_BYTE *)(j - 48))
        {
          if (*(char *)(j - 49) < 0)
            operator delete(*(void **)(j - 72));
          *(_BYTE *)(j - 48) = 0;
        }
        v18 = *(void **)(j - 136);
        if ((void *)(j - 120) != v18)
          free(v18);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C4E36498(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 8 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 8 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

uint64_t sub_1C4E36534(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_13;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

void sub_1C4E365D0(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1C4E38968(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1C4E36640(char **a1, _DWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 2;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 62)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 1 > v5)
    v5 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v9 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 62)
      sub_1C4764EE4();
    v10 = (char *)operator new(4 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[4 * v4];
  *(_DWORD *)v11 = *a2;
  v12 = v11 + 4;
  while (v3 != v2)
  {
    v13 = *((_DWORD *)v3 - 1);
    v3 -= 4;
    *((_DWORD *)v11 - 1) = v13;
    v11 -= 4;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[4 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

BOOL sub_1C4E36710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  int v6;
  BOOL v7;

  v2 = *(_QWORD *)(a2 - 32);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (!*(_BYTE *)(v2 + 16))
    {
      if (*(_QWORD *)(v2 + 24) != *(_QWORD *)(a2 + 72))
        return 1;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = MEMORY[0x10];
  }
  v4 = v3 < 0x15 || v3 == 24;
  if (v4 || !*(_BYTE *)(a1 + 1))
    return 1;
LABEL_11:
  v5 = *(unsigned __int16 *)(a2 + 18);
  v6 = (v5 >> 2) & 0x3FF;
  v7 = v6 == 20 || v6 == 18;
  return v7 && !*(_BYTE *)(a1 + 3) || (v5 & 3) == 2 && !*(_BYTE *)(a1 + 3);
}

uint64_t sub_1C4E36790(uint64_t a1)
{
  int v1;
  uint64_t result;
  BOOL v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36);
  result = 1;
  if (v1 <= 235)
  {
    if ((v1 - 126) <= 0x2A && ((1 << (v1 - 126)) & 0x66000000001) != 0)
      return result;
    v5 = v1 > 0x3A;
    v6 = (1 << v1) & 0x700000000000080;
    if (!v5 && v6 != 0)
      return result;
    return 0;
  }
  v4 = (v1 - 236) > 0x24 || ((1 << (v1 + 20)) & 0x1000000301) == 0;
  if (v4 && v1 != 316)
    return 0;
  return result;
}

void sub_1C4E36820(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = *(char **)a1;
  v9 = *(uint64_t **)(a1 + 8);
  v10 = a2 - *(_QWORD *)a1;
  v11 = (char *)(*(_QWORD *)a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v12 = *(_QWORD *)(a1 + 16);
  if (a5 > (v12 - (uint64_t)v9) >> 3)
  {
    v13 = a5 + (((char *)v9 - v8) >> 3);
    if (v13 >> 61)
      abort();
    v14 = v12 - (_QWORD)v8;
    v15 = v14 >> 2;
    if (v14 >> 2 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 61)
        sub_1C4764EE4();
      v17 = (char *)operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[8 * (v10 >> 3)];
    v27 = &v26[8 * a5];
    v28 = 8 * a5;
    v29 = v26;
    do
    {
      v30 = *(_QWORD *)v6;
      v6 += 8;
      *(_QWORD *)v29 = v30;
      v29 += 8;
      v28 -= 8;
    }
    while (v28);
    v31 = *(char **)a1;
    if (v11 != *(char **)a1)
    {
      v32 = v11;
      do
      {
        v33 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v26 - 1) = v33;
        v26 -= 8;
      }
      while (v32 != v31);
      v9 = *(uint64_t **)(a1 + 8);
    }
    v34 = &v17[8 * v16];
    if (v9 != (uint64_t *)v11)
      memmove(v27, v11, (char *)v9 - v11);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v27[(char *)v9 - v11];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return;
  }
  v18 = ((char *)v9 - v11) >> 3;
  if (v18 >= a5)
  {
    v19 = &__src[8 * a5];
    v21 = *(char **)(a1 + 8);
LABEL_18:
    v22 = &v11[8 * a5];
    v23 = (uint64_t *)&v21[-8 * a5];
    v24 = v21;
    if (v23 < v9)
    {
      v24 = v21;
      do
      {
        v25 = *v23++;
        *(_QWORD *)v24 = v25;
        v24 += 8;
      }
      while (v23 < v9);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v21[-8 * ((v21 - v22) >> 3)], v11, v21 - v22);
    if (v19 != v6)
      memmove(v11, v6, v19 - v6);
    return;
  }
  v19 = &__src[8 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[8 * v18], a4 - v19);
  v21 = (char *)v9 + v20;
  *(_QWORD *)(a1 + 8) = (char *)v9 + v20;
  if ((char *)v9 - v11 >= 1)
    goto LABEL_18;
}

char *sub_1C4E36A24(char **a1, char *a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  uint64_t v33;
  char *v34;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFFCLL];
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = a1[1];
  v11 = a1[2];
  if (a5 > (v11 - v12) >> 2)
  {
    v13 = a5 + ((v12 - v5) >> 2);
    if (v13 >> 62)
      abort();
    v15 = v11 - v5;
    if (v15 >> 1 > v13)
      v13 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    if (v16)
    {
      if (v16 >> 62)
        sub_1C4764EE4();
      v17 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = v6 >> 2;
    v27 = &v17[4 * (v6 >> 2)];
    v28 = &v27[4 * a5];
    v29 = 4 * a5;
    v30 = v27;
    do
    {
      v31 = *(_DWORD *)v9;
      v9 += 4;
      *(_DWORD *)v30 = v31;
      v30 += 4;
      v29 -= 4;
    }
    while (v29);
    v32 = v27;
    if (v5 != a2)
    {
      v33 = 4 * v26;
      do
      {
        *(_DWORD *)&v17[v33 - 4] = *(_DWORD *)&v5[v33 - 4];
        v33 -= 4;
      }
      while (v33);
      v32 = v17;
    }
    v34 = &v17[4 * v16];
    if (v12 != v7)
      memmove(v28, v7, v12 - v7);
    *a1 = v32;
    a1[1] = &v28[v12 - v7];
    a1[2] = v34;
    if (v5)
      operator delete(v5);
    return v27;
  }
  v18 = (v12 - v7) >> 2;
  if (v18 >= a5)
  {
    v19 = &__src[4 * a5];
    v21 = a1[1];
LABEL_18:
    v22 = &v7[4 * a5];
    v23 = &v21[-4 * a5];
    v24 = v21;
    if (v23 < v12)
    {
      v24 = v21;
      do
      {
        v25 = *(_DWORD *)v23;
        v23 += 4;
        *(_DWORD *)v24 = v25;
        v24 += 4;
      }
      while (v23 < v12);
    }
    a1[1] = v24;
    if (v21 != v22)
      memmove(&v21[-4 * ((v21 - v22) >> 2)], v7, v21 - v22);
    if (v19 != v9)
      memmove(v7, v9, v19 - v9);
    return v7;
  }
  v19 = &__src[4 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(a1[1], &__src[4 * v18], a4 - v19);
  v21 = &v12[v20];
  a1[1] = &v12[v20];
  if (v12 - v7 >= 1)
    goto LABEL_18;
  return v7;
}

uint64_t sub_1C4E36C1C(uint64_t a1, int a2, llvm::IRSimilarity **a3, const llvm::IRSimilarity::IRInstructionData ***a4)
{
  const llvm::IRSimilarity::IRInstructionData **v5;
  uint64_t result;
  llvm::IRSimilarity *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  int v30;
  const llvm::IRSimilarity::IRInstructionData *v31;
  unsigned __int8 v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  const llvm::IRSimilarity::IRInstructionData **v39;
  int v40;
  unsigned int v41;
  int i;
  llvm::IRSimilarity *v43;
  const llvm::IRSimilarity::IRInstructionData *v44;
  BOOL v45;
  BOOL v46;
  BOOL v48;
  unsigned int v49;
  unsigned __int8 v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;
  unint64_t v59;
  void **v60;
  void *v61;
  uint64_t v62;
  unsigned __int8 v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  _QWORD *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  _QWORD *v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *__p[2];
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  _QWORD v118[5];

  v118[4] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = *a3;
  v116 = v118;
  v117 = 0x400000000;
  v11 = *((unsigned int *)v10 + 8);
  if ((_DWORD)v11)
  {
    v21 = 0;
    v22 = (uint64_t **)*((_QWORD *)v10 + 3);
    v23 = 8 * v11;
    do
    {
      v24 = **v22;
      if (v21 >= HIDWORD(v117))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, (uint64_t)v118, v21 + 1, 8);
        v21 = v117;
      }
      *((_QWORD *)v116 + v21) = v24;
      v21 = v117 + 1;
      LODWORD(v117) = v117 + 1;
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v12 = *((_QWORD *)v10 + 2);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if ((v13 - 81) < 2)
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v14 & 1) == 0)
    {
      v79 = v13;
      v80 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v13 = v79;
      if (v80)
      {
        v81 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v81 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v81;
        __cxa_guard_release(&qword_1ED7EAC88);
        v13 = v79;
      }
    }
    v15 = &unk_1ED7EA000;
    v16 = 0x9DDFEA08EB382D69 * (qword_1ED7EAC80 + ((8 * v13 + 0x7FFFFFF20) & 0x7FFFFFFF8));
    __p[0] = (void *)(0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47))) >> 47)));
    v17 = **((_QWORD **)v10 + 2);
    v18 = HIDWORD(v17);
    LOBYTE(v16) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v16 & 1) == 0)
    {
      v82 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v15 = &unk_1ED7EA000;
      if (v82)
      {
        v83 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v83 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v83;
        __cxa_guard_release(&qword_1ED7EAC88);
        v15 = (_QWORD *)&unk_1ED7EA000;
      }
    }
    v19 = 0x9DDFEA08EB382D69 * ((v15[400] + 8 * v17) ^ v18);
    v115 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) ^ ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) >> 47));
    if (*((_BYTE *)v10 + 80))
      v20 = *((_DWORD *)v10 + 19);
    else
      v20 = *(_WORD *)(*((_QWORD *)v10 + 2) + 18) & 0x3F;
    v27 = v20;
    v28 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v28 & 1) == 0)
    {
      v84 = v15;
      v85 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v15 = v84;
      if (v85)
      {
        v86 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v86 = 0xFF51AFD7ED558CCDLL;
        v84[400] = v86;
        __cxa_guard_release(&qword_1ED7EAC88);
        v15 = v84;
      }
    }
    v29 = 0x9DDFEA08EB382D69 * (v15[400] + 8 * v27);
    v114 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47))) >> 47));
    v113 = sub_1C6193EA0(v116, (uint64_t)v116 + 8 * v117);
    v30 = sub_1C6193BD8((uint64_t *)__p, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113);
LABEL_28:
    v38 = v30;
    goto LABEL_29;
  }
  if ((_DWORD)v13 != 84)
  {
    v32 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    v33 = &unk_1ED7EA000;
    if ((v32 & 1) == 0)
    {
      v87 = v13;
      v88 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v33 = &unk_1ED7EA000;
      v13 = v87;
      if (v88)
      {
        v89 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v89 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v89;
        __cxa_guard_release(&qword_1ED7EAC88);
        v33 = (_QWORD *)&unk_1ED7EA000;
        v13 = v87;
      }
    }
    v34 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v33[400] + ((8 * v13 + 0x7FFFFFF20) & 0x7FFFFFFF8))) ^ ((0x9DDFEA08EB382D69
                                                                                               * (v33[400]
                                                                                                + ((8 * v13
                                                                                                  + 0x7FFFFFF20) & 0x7FFFFFFF8))) >> 47));
    __p[0] = (void *)(0x9DDFEA08EB382D69 * (v34 ^ (v34 >> 47)));
    v35 = **((_QWORD **)v10 + 2);
    v36 = HIDWORD(v35);
    LOBYTE(v34) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v34 & 1) == 0)
    {
      v90 = v33;
      v91 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v33 = v90;
      if (v91)
      {
        v92 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v92 = 0xFF51AFD7ED558CCDLL;
        v90[400] = v92;
        __cxa_guard_release(&qword_1ED7EAC88);
        v33 = v90;
      }
    }
    v37 = 0x9DDFEA08EB382D69 * ((v33[400] + 8 * v35) ^ v36);
    v115 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v36 ^ (v37 >> 47) ^ v37)) ^ ((0x9DDFEA08EB382D69 * (v36 ^ (v37 >> 47) ^ v37)) >> 47));
    v114 = sub_1C6193EA0(v116, (uint64_t)v116 + 8 * v117);
    v30 = sub_1C6193D54((uint64_t *)__p, (uint64_t *)&v115, (uint64_t *)&v114);
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v12 - 32);
  if (v25
    && !*(_BYTE *)(v25 + 16)
    && *(_QWORD *)(v25 + 24) == *(_QWORD *)(v12 + 72)
    && (*(_BYTE *)(v25 + 33) & 0x20) != 0)
  {
    v62 = *(unsigned int *)(v25 + 36);
    v63 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v63 & 1) == 0)
    {
      v99 = v62;
      v100 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v62 = v99;
      if (v100)
      {
        v101 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v101 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v101;
        __cxa_guard_release(&qword_1ED7EAC88);
        v62 = v99;
      }
    }
    v64 = &unk_1ED7EA000;
    v65 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * qword_1ED7EAC80 + 0x47D98F9BA24F77C0) ^ ((0x9DDFEA08EB382D69 * qword_1ED7EAC80
                                                                             + 0x47D98F9BA24F77C0) >> 47));
    __p[0] = (void *)(0x9DDFEA08EB382D69 * (v65 ^ (v65 >> 47)));
    v66 = **((_QWORD **)v10 + 2);
    v67 = HIDWORD(v66);
    LOBYTE(v65) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v65 & 1) == 0)
    {
      v108 = v62;
      v102 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v64 = &unk_1ED7EA000;
      v62 = v108;
      if (v102)
      {
        v103 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v103 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v103;
        __cxa_guard_release(&qword_1ED7EAC88);
        v64 = (_QWORD *)&unk_1ED7EA000;
        v62 = v108;
      }
    }
    v68 = 0x9DDFEA08EB382D69 * ((v64[400] + 8 * v66) ^ v67);
    v115 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v67 ^ (v68 >> 47) ^ v68)) ^ ((0x9DDFEA08EB382D69 * (v67 ^ (v68 >> 47) ^ v68)) >> 47));
    v69 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v69 & 1) == 0)
    {
      v104 = v62;
      v105 = v64;
      v106 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v64 = v105;
      v62 = v104;
      if (v106)
      {
        v107 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v107 = 0xFF51AFD7ED558CCDLL;
        v105[400] = v107;
        __cxa_guard_release(&qword_1ED7EAC88);
        v64 = v105;
        v62 = v104;
      }
    }
    v70 = 0x9DDFEA08EB382D69 * (v64[400] + 8 * v62);
    v114 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v70 ^ (v70 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v70 ^ (v70 >> 47))) >> 47));
    v73 = *((_QWORD *)v10 + 11);
    v72 = (uint64_t)v10 + 88;
    v71 = v73;
    v74 = *(_BYTE *)(v72 + 23);
    v75 = v74;
    if (v74 >= 0)
      v76 = v72;
    else
      v76 = v71;
    v77 = *(_QWORD *)(v72 + 8);
    v78 = v74 & 0x7F;
    if (v75 >= 0)
      v77 = v78;
    v113 = sub_1C4E37F24(v76, v76 + v77);
    v112 = sub_1C6193EA0(v116, (uint64_t)v116 + 8 * v117);
    v30 = sub_1C6193C8C((uint64_t *)__p, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, (uint64_t *)&v112);
    goto LABEL_28;
  }
  if (*((char *)v10 + 111) < 0)
  {
    sub_1C47EBC30(__p, *((void **)v10 + 11), *((_QWORD *)v10 + 12));
    v26 = (8 * *(unsigned __int8 *)(*((_QWORD *)v10 + 2) + 16) + 0x7FFFFFF20) & 0x7FFFFFFF8;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)v10 + 88);
    v111 = *((_QWORD *)v10 + 13);
    v26 = 448;
  }
  v50 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v93 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v93 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v93;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v51 = &unk_1ED7EA000;
  v52 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 + v26)) ^ ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 + v26)) >> 47));
  v115 = 0x9DDFEA08EB382D69 * (v52 ^ (v52 >> 47));
  v53 = **((_QWORD **)v10 + 2);
  v54 = HIDWORD(v53);
  LOBYTE(v52) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v52 & 1) == 0)
  {
    v94 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v51 = &unk_1ED7EA000;
    if (v94)
    {
      v95 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v95 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v95;
      __cxa_guard_release(&qword_1ED7EAC88);
      v51 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v55 = 0x9DDFEA08EB382D69 * ((v51[400] + 8 * v53) ^ v54);
  v114 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v54 ^ (v55 >> 47) ^ v55)) ^ ((0x9DDFEA08EB382D69 * (v54 ^ (v55 >> 47) ^ v55)) >> 47));
  v56 = **((_QWORD **)v10 + 2);
  v57 = HIDWORD(v56);
  v58 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v58 & 1) == 0)
  {
    v96 = v51;
    v97 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v51 = v96;
    if (v97)
    {
      v98 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v98 = 0xFF51AFD7ED558CCDLL;
      v96[400] = v98;
      __cxa_guard_release(&qword_1ED7EAC88);
      v51 = v96;
    }
  }
  v59 = 0x9DDFEA08EB382D69 * ((v51[400] + 8 * v56) ^ v57);
  v113 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v57 ^ (v59 >> 47) ^ v59)) ^ ((0x9DDFEA08EB382D69 * (v57 ^ (v59 >> 47) ^ v59)) >> 47));
  if (v111 >= 0)
    v60 = __p;
  else
    v60 = (void **)__p[0];
  v61 = (void *)(HIBYTE(v111) & 0x7F);
  if (v111 < 0)
    v61 = __p[1];
  v112 = sub_1C4E37F24((uint64_t)v60, (uint64_t)v61 + (_QWORD)v60);
  v109 = sub_1C6193EA0(v116, (uint64_t)v116 + 8 * v117);
  v38 = sub_1C6193C8C((uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v109);
  if (SHIBYTE(v111) < 0)
    operator delete(__p[0]);
LABEL_29:
  if (v116 != v118)
    free(v116);
  v39 = 0;
  v40 = a2 - 1;
  v41 = (a2 - 1) & v38;
  for (i = 1; ; ++i)
  {
    v5 = (const llvm::IRSimilarity::IRInstructionData **)(a1 + 16 * v41);
    v43 = *a3;
    v44 = *v5;
    v45 = *a3 == (llvm::IRSimilarity *)-1 || v43 == 0;
    v46 = v45 || v44 == 0;
    if (v46 || (const llvm::IRSimilarity::IRInstructionData *)((char *)v44 + 1) == 0)
    {
      if (v43 == v44)
      {
LABEL_52:
        result = 1;
        goto LABEL_3;
      }
    }
    else
    {
      if (llvm::IRSimilarity::isClose(v43, v44, v31))
        goto LABEL_52;
      v44 = *v5;
    }
    if (!v44)
      break;
    if (v39)
      v48 = 0;
    else
      v48 = v44 == (const llvm::IRSimilarity::IRInstructionData *)-1;
    if (v48)
      v39 = (const llvm::IRSimilarity::IRInstructionData **)(a1 + 16 * v41);
    v49 = v41 + i;
    v41 = v49 & v40;
  }
  result = 0;
  if (v39)
    v5 = v39;
LABEL_3:
  *a4 = v5;
  return result;
}

_QWORD *sub_1C4E37644(_QWORD *a1, uint64_t *a2, _QWORD *__dst, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v38 + v45 + v36 + v48, 21) + v48 + __ROR8__(v37 + v35 + v48, 44);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 8 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 8 - v8);
      return (_QWORD *)((char *)a1 + 8 - v8);
    }
  }
  return a1;
}

uint64_t sub_1C4E378E0@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  unint64_t v27;

  v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v4 = __ROR8__(a2 ^ 0xB492B66FBE98F273, 49);
  v5 = a2 ^ (a2 >> 47);
  v6 = 0x9DDFEA08EB382D69
     * (a2 ^ (((0x9DDFEA08EB382D69 * (v5 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v5 ^ (0xB492B66FBE98F273
                                                                                                * a2))));
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = v4 + a2;
  v10 = a1[6];
  v9 = a1[7];
  v11 = v4 - 0x4B6D499041670D8DLL * __ROR8__(v10 + a2 - 0x4B6D499041670D8DLL * a2, 42);
  v12 = a1[1];
  v13 = (0xB492B66FBE98F273 * __ROR8__(v8 + v12, 37)) ^ v7;
  v14 = v5 - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  v15 = *a1 - 0x6D8ED9027DD26057 * a2;
  v17 = a1[4];
  v16 = a1[5];
  v18 = v11 + v16;
  v19 = 0xB492B66FBE98F273 * __ROR8__(v14, 33);
  v20 = v15 + v5;
  v23 = a1 + 2;
  v21 = a1[2];
  v22 = v23[1];
  v24 = v15 + v12 + v21;
  v25 = v17 + v7 + v19;
  result = __ROR8__(v25 + v21 + v18 + v9, 21);
  v27 = v16 + v10 + v25;
  a3[6] = result + v25 + __ROR8__(v27, 44);
  a3[4] = __ROR8__(v20 + v22 + v13, 21) + v15 + __ROR8__(v24, 44);
  a3[5] = v27 + v9;
  a3[2] = v13;
  a3[3] = v24 + v22;
  *a3 = v19;
  a3[1] = v18;
  return result;
}

unint64_t *sub_1C4E37A08(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v2 = result[1];
  v4 = result[2];
  v3 = result[3];
  v5 = 0xB492B66FBE98F273 * __ROR8__(v2 + *result + v3 + a2[1], 37);
  *result = v5;
  v6 = result[4];
  v7 = result[5];
  v8 = __ROR8__(v6 + v2 + a2[6], 42);
  v9 = result[6];
  v10 = v9 ^ v5;
  *result = v10;
  result[1] = 0xB492B66FBE98F273 * v8;
  v11 = 0xB492B66FBE98F273 * v8 + v3 + a2[5];
  v12 = 0xB492B66FBE98F273 * __ROR8__(v7 + v4, 33);
  result[1] = v11;
  result[2] = v12;
  result[3] = 0xB492B66FBE98F273 * v6;
  result[4] = v7 + v10;
  v13 = *a2 - 0x4B6D499041670D8DLL * v6;
  result[3] = v13;
  v14 = a2[3];
  v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  result[4] = v15;
  v16 = __ROR8__(a2[1] + a2[2] + v13, 44);
  result[3] = a2[1] + a2[2] + v13 + v14;
  result[4] = v15 + v13 + v16;
  result[5] = v12 + v9;
  v17 = a2[2] + v11;
  result[6] = v17;
  v18 = a2[4] + v12 + v9;
  result[5] = v18;
  v19 = a2[7];
  v20 = __ROR8__(v18 + v19 + v17, 21);
  result[6] = v20;
  v21 = v20 + v18 + __ROR8__(a2[5] + a2[6] + v18, 44);
  result[5] = a2[5] + a2[6] + v18 + v19;
  result[6] = v21;
  result[2] = v10;
  *result = v12;
  return result;
}

unint64_t sub_1C4E37B28(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4E37644(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4E37644(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

unint64_t sub_1C4E37BA0(char *__src, uint64_t a2, char *a3, char *a4)
{
  char v8;
  int64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  if (!a2)
    return sub_1C49CE808(__src, a3 - __src, *((_QWORD *)__src + 15));
  if (__src != a3 && a3 != a4)
  {
    if (__src + 1 == a3)
    {
      v8 = *__src;
      v9 = a4 - a3;
      memmove(__src, a3, a4 - a3);
      __src[v9] = v8;
    }
    else if (a3 + 1 == a4)
    {
      v10 = *(a4 - 1);
      if (a4 - 1 != __src)
        memmove(__src + 1, __src, a4 - 1 - __src);
      *__src = v10;
    }
    else
    {
      sub_1C4E37E60(__src, a3, a4);
    }
  }
  v11 = *((_QWORD *)__src + 9);
  v12 = *((_QWORD *)__src + 11);
  v13 = *((_QWORD *)__src + 1);
  v14 = 0xB492B66FBE98F273 * __ROR8__(v11 + *((_QWORD *)__src + 8) + v12 + v13, 37);
  v15 = *((_QWORD *)__src + 12);
  v16 = *((_QWORD *)__src + 13);
  v18 = *((_QWORD *)__src + 6);
  v17 = *((_QWORD *)__src + 7);
  v19 = *((_QWORD *)__src + 5);
  v20 = v19 + v12 - 0x4B6D499041670D8DLL * __ROR8__(v15 + v11 + v18, 42);
  v21 = v16 + *((_QWORD *)__src + 10);
  v22 = *(_QWORD *)__src - 0x4B6D499041670D8DLL * v15;
  v23 = v16 + v22;
  v25 = *((_QWORD *)__src + 2);
  v24 = *((_QWORD *)__src + 3);
  v26 = v22 + v13 + v25;
  v27 = *((_QWORD *)__src + 14);
  v28 = v27 ^ v14;
  v29 = __ROR8__(v21, 33);
  v30 = __ROR8__(v23 + v24 + v28, 21) + v22 + __ROR8__(v26, 44);
  v31 = v26 + v24;
  v32 = v25 + v20;
  v33 = 0xB492B66FBE98F273 * v29 + v27 + *((_QWORD *)__src + 4);
  v34 = v19 + v18 + v33;
  v35 = __ROR8__(v34, 44) + v33 + __ROR8__(v32 + v33 + v17, 21);
  *((_QWORD *)__src + 11) = v31;
  *((_QWORD *)__src + 12) = v30;
  *((_QWORD *)__src + 13) = v34 + v17;
  *((_QWORD *)__src + 14) = v35;
  *((_QWORD *)__src + 9) = v20;
  *((_QWORD *)__src + 10) = v28;
  *((_QWORD *)__src + 8) = 0xB492B66FBE98F273 * v29;
  v36 = v28
      - 0x4B6D499041670D8DLL * (v20 ^ (v20 >> 47))
      - 0x622015F714C7D297
      * ((0x9DDFEA08EB382D69
        * ((v34 + v17) ^ ((0x9DDFEA08EB382D69 * ((v34 + v17) ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * ((v34 + v17) ^ v31)))) ^ ((0x9DDFEA08EB382D69 * ((v34 + v17) ^ ((0x9DDFEA08EB382D69 * ((v34 + v17) ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v34 + v17) ^ v31)))) >> 47));
  v37 = 0x9DDFEA08EB382D69
      * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v30)));
  v38 = 0xB492B66FBE98F273 * (v29 + ((a3 - __src + a2) ^ ((unint64_t)(a3 - __src + a2) >> 47)))
      - 0x622015F714C7D297 * (v37 ^ (v37 >> 47));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v36)))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v36)))) >> 47));
}

unint64_t sub_1C4E37DC8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x9DDFEA08EB382D69
     * (a1[5] ^ ((0x9DDFEA08EB382D69 * (a1[5] ^ a1[3])) >> 47) ^ (0x9DDFEA08EB382D69 * (a1[5] ^ a1[3])));
  v3 = 0x9DDFEA08EB382D69
     * (a1[6] ^ ((0x9DDFEA08EB382D69 * (a1[6] ^ a1[4])) >> 47) ^ (0x9DDFEA08EB382D69 * (a1[6] ^ a1[4])));
  v4 = *a1 - 0x4B6D499041670D8DLL * (a2 ^ (a2 >> 47)) - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  v5 = 0x9DDFEA08EB382D69
     * (v4 ^ (a1[2] - 0x4B6D499041670D8DLL * (a1[1] ^ (a1[1] >> 47)) - 0x622015F714C7D297 * (v2 ^ (v2 >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
}

_BYTE *sub_1C4E37E60(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;

  v3 = a2 - a1;
  if (a2 - a1 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_BYTE *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = a3 - v15;
          v19 = __OFSUB__(v3, v18);
          v21 = v3 - v18;
          v20 = (v21 < 0) ^ v19;
          v15 = &a1[v21];
          if (v20)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

unint64_t sub_1C4E37F24(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unint64_t v18[7];
  _QWORD __src[7];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C4D9B584();
  if (a1 == a2)
  {
    v6 = 0;
    return sub_1C49CE808(__src, v6, v4);
  }
  else
  {
    for (i = 0; i != 64; ++i)
    {
      v6 = i + 1;
      *((_BYTE *)__src + i) = *(_BYTE *)(a1 + i);
      v7 = a1 + i + 1;
      if (v7 == a2)
        return sub_1C49CE808(__src, v6, v4);
    }
    sub_1C4E378E0(__src, v4, v18);
    v8 = a1 + 64;
    if (a1 + 64 == a2)
    {
      v9 = 64;
    }
    else
    {
      v9 = 64;
      do
      {
        v10 = -1;
        do
        {
          v11 = v8 + v10;
          v12 = (char *)__src + v10++;
          v12[1] = *(_BYTE *)(v11 + 1);
          v13 = v11 + 2;
        }
        while (v11 + 2 != a2 && v10 < 0x3F);
        v14 = v10 + 1;
        if (((v10 + 1) & 0x7FFFFFFFFFFFFFBFLL) != 0)
        {
          if (v10 == 62)
          {
            v15 = v20;
            memmove((char *)__src + 1, __src, 0x3FuLL);
            LOBYTE(__src[0]) = v15;
          }
          else if (v10)
          {
            sub_1C4E37E60(__src, (_BYTE *)__src + v14, &v21);
          }
          else
          {
            v17 = __src[0];
            memmove(__src, (char *)__src + 1, 0x3FuLL);
            v20 = v17;
          }
        }
        v8 += v14;
        sub_1C4E37A08(v18, __src);
        v9 += v10 + 1;
      }
      while (v13 != a2);
    }
    return sub_1C4E37DC8(v18, v9);
  }
}

_QWORD *sub_1C4E380DC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6194004(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = 0;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4E38190(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4E2FDA8(a1, v7);
      v17 = 0;
      sub_1C4DA97DC((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4E2FDA8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C4E382C0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C49F41C0((uint64_t *)a1, v6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = (37 * *a2) & v17;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
      v19 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v12)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v12 = a3;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C49F41C0((uint64_t *)a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_28;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != -1)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -2;
    if (v14)
      v12 = a3;
    v15 = v10 + v13++;
    v10 = v15 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_29:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C4E38444(_DWORD *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = (37 * *a3) & (v8 - 1);
    v11 = *(_QWORD *)a2 + 32 * v10;
    v12 = *(_DWORD *)v11;
    if (*a3 == *(_DWORD *)v11)
    {
LABEL_3:
      v13 = 0;
      goto LABEL_10;
    }
    v17 = 0;
    v18 = 1;
    while (v12 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v12 == -2;
      if (v19)
        v17 = v11;
      v20 = v10 + v18++;
      v10 = v20 & (v8 - 1);
      v11 = v9 + 32 * v10;
      v12 = *(_DWORD *)v11;
      if (*a3 == *(_DWORD *)v11)
        goto LABEL_3;
    }
    if (v17)
      v11 = v17;
  }
  else
  {
    v11 = 0;
  }
  v14 = *(_DWORD *)(a2 + 8);
  if (4 * v14 + 4 >= 3 * v8)
  {
    result = sub_1C4E386BC((uint64_t *)a2, 2 * v8);
    v21 = *(_DWORD *)(a2 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a3) & (v21 - 1);
      v11 = *(_QWORD *)a2 + 32 * v23;
      v24 = *(_DWORD *)v11;
      if (*a3 == *(_DWORD *)v11)
        goto LABEL_7;
      v25 = 0;
      v26 = 1;
      while (v24 != -1)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v24 == -2;
        if (v27)
          v25 = v11;
        v28 = v23 + v26++;
        v23 = v28 & v22;
        v11 = *(_QWORD *)a2 + 32 * v23;
        v24 = *(_DWORD *)v11;
        if (*a3 == *(_DWORD *)v11)
          goto LABEL_7;
      }
LABEL_46:
      if (v25)
        v11 = v25;
      goto LABEL_7;
    }
LABEL_45:
    v11 = 0;
    goto LABEL_7;
  }
  if (v8 + ~v14 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
    result = sub_1C4E386BC((uint64_t *)a2, v8);
    v29 = *(_DWORD *)(a2 + 16);
    if (v29)
    {
      v30 = v29 - 1;
      v31 = (37 * *a3) & (v29 - 1);
      v11 = *(_QWORD *)a2 + 32 * v31;
      v32 = *(_DWORD *)v11;
      if (*a3 == *(_DWORD *)v11)
        goto LABEL_7;
      v25 = 0;
      v33 = 1;
      while (v32 != -1)
      {
        if (v25)
          v34 = 0;
        else
          v34 = v32 == -2;
        if (v34)
          v25 = v11;
        v35 = v31 + v33++;
        v31 = v35 & v30;
        v11 = *(_QWORD *)a2 + 32 * v31;
        v32 = *(_DWORD *)v11;
        if (*a3 == *(_DWORD *)v11)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v11 != -1)
    --*(_DWORD *)(a2 + 12);
  *(_DWORD *)v11 = *a3;
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(v11 + 16) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  v15 = *(_DWORD *)(v11 + 20);
  *(_DWORD *)(v11 + 20) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = v15;
  v16 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v16;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v13 = 1;
LABEL_10:
  *(_QWORD *)v7 = v11;
  *((_QWORD *)v7 + 1) = v9 + 32 * v8;
  *((_BYTE *)v7 + 16) = v13;
  return result;
}

_DWORD *sub_1C4E386BC(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[8 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 32 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 32 * v16;
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_DWORD *)(v17 + 24) = 0;
          *(_QWORD *)(v17 + 8) = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_DWORD *)(v17 + 16) = v12[4];
          v12[4] = 0;
          v19 = *(_DWORD *)(v17 + 20);
          *(_DWORD *)(v17 + 20) = v12[5];
          v12[5] = v19;
          v20 = *(_DWORD *)(v17 + 24);
          *(_DWORD *)(v17 + 24) = v12[6];
          v12[6] = v20;
          ++*((_DWORD *)a1 + 2);
          MEMORY[0x1CAA32FB4](0, 4);
        }
        v12 += 8;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 32 * v25;
    do
    {
      *result = -1;
      result += 8;
      v26 -= 32;
    }
    while (v26);
  }
  return result;
}

_DWORD *sub_1C4E38888(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *result;
  int v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  char v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = (37 * *a3) & (v6 - 1);
    result = (_DWORD *)(*(_QWORD *)a2 + 4 * v8);
    v10 = *result;
    if (*a3 == *result)
    {
LABEL_17:
      v14 = 0;
      goto LABEL_9;
    }
    v11 = 0;
    v12 = 1;
    while (v10 != -1)
    {
      if (v11)
        v15 = 0;
      else
        v15 = v10 == -2;
      if (v15)
        v11 = result;
      v16 = v8 + v12++;
      v8 = v16 & (v6 - 1);
      result = (_DWORD *)(v7 + 4 * v8);
      v10 = *result;
      if (*a3 == *result)
        goto LABEL_17;
    }
    if (v11)
      v13 = v11;
    else
      v13 = result;
  }
  else
  {
    v13 = 0;
  }
  result = sub_1C4A0C948(a2, (uint64_t)a3, a3, v13);
  *result = *a3;
  v7 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 16);
  v14 = 1;
LABEL_9:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7 + 4 * v6;
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

void sub_1C4E38968(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1C6193514(v4 - 15);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C4E389D8(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >= 0x222222222222223)
      abort();
    v6 = result;
    v7 = 15 * a4;
    result = operator new(120 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = sub_1C6193608((uint64_t)result, a2);
      a2 = (__int128 *)((char *)a2 + 120);
      result = (_QWORD *)(v8 + 120);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C4E38A5C(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void **v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v2 = a1[4];
  v3 = a1[2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (void **)(*(_QWORD *)a1 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v15 = v5;
        sub_1C4E38968(&v15);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
  {
    v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
    if (v7 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v8 = 32 * v7;
      v9 = *(_DWORD **)a1;
      do
      {
        *v9 = -1;
        v9 += 8;
        v8 -= 32;
      }
      while (v8);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v10 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      a1[4] = v11;
      v12 = operator new(32 * v11, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v12;
      *((_QWORD *)a1 + 1) = 0;
      v13 = a1[4];
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          *v12 = -1;
          v12 += 8;
          v14 -= 32;
        }
        while (v14);
      }
    }
  }
  else if (a1[4])
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

uint64_t sub_1C4E38BB0()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 2;
  v1.n128_u64[0] = (unint64_t)"disable similarity matching, and outlining, across branches for debugging purposes.";
  v1.n128_u64[1] = 83;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::DisableBranches, "no-ir-sim-branch-matching", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DisableBranches, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 2;
  v1.n128_u64[0] = (unint64_t)"disable outlining indirect calls.";
  v1.n128_u64[1] = 33;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::DisableIndirectCalls, "no-ir-sim-indirect-calls", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DisableIndirectCalls, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 2;
  v1.n128_u64[0] = (unint64_t)"only allow matching call instructions if the name and type signature match.";
  v1.n128_u64[1] = 75;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::MatchCallsByName, "ir-sim-calls-by-name", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::MatchCallsByName, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 2;
  v1.n128_u64[0] = (unint64_t)"Don't match or outline intrinsics";
  v1.n128_u64[1] = 33;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::DisableIntrinsics, "no-ir-sim-intrinsics", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DisableIntrinsics, &dword_1C475E000);
}

uint64_t llvm::RecurrenceDescriptor::isIntegerRecurrenceKind(unsigned int a1)
{
  return (a1 < 0x11) & (0x183FEu >> a1);
}

uint64_t llvm::RecurrenceDescriptor::isFloatingPointRecurrenceKind(unsigned int a1)
{
  return (a1 > 0x10) | (0x7C00u >> a1) & 1;
}

uint64_t llvm::RecurrenceDescriptor::isArithmeticRecurrenceKind(unsigned int a1)
{
  return (a1 < 0xF) & (0x4C06u >> a1);
}

uint64_t llvm::RecurrenceDescriptor::AddReductionVar(uint64_t a1, unsigned int a2, uint64_t a3, char a4, _QWORD *a5, llvm::DemandedBits *a6, void *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t LoopPredecessor;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD **v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  llvm::Instruction *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  _BOOL4 v44;
  BOOL v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  char v59;
  int v60;
  int v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  llvm::Instruction *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  char *v104;
  void *v105;
  const char *v106;
  int8x8_t v107;
  int8x8_t v108;
  int v109;
  int v110;
  int v111;
  int64_t v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::Instruction *v120;
  unsigned int v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  llvm::Instruction *v125;
  uint64_t v126;
  unsigned int v127;
  char *v128;
  uint8x8_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  unsigned int *v153;
  uint64_t v154;
  unsigned int PrimitiveSizeInBits;
  unint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v160;
  _QWORD *v161;
  uint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  int32x2_t *v166;
  unint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  int v174;
  const void **v175;
  int v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  _DWORD *v181;
  int v182;
  _DWORD *v183;
  _DWORD *v184;
  _QWORD *v185;
  int v186;
  uint64_t v187;
  unint64_t *v188;
  llvm::DemandedBits *v189;
  llvm::DemandedBits *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  llvm::Instruction *v197;
  int v198;
  int v199;
  unsigned int v200;
  char v201[32];
  char v202[32];
  _QWORD v203[4];
  _QWORD v204[2];
  int v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  int v210;
  _BYTE v211[64];
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  int v215;
  _BYTE v216[32];
  __int128 v217;
  __int128 v218;
  void *v219[2];
  _BYTE v220[24];
  __int128 v221;
  __int16 v222;
  _DWORD v223[26];
  void *v224;
  uint64_t v225;
  _BYTE v226[64];
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 2 || *(_QWORD *)(a1 + 40) != **(_QWORD **)(a3 + 32))
    return 0;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a3);
  if (!LoopPredecessor)
    goto LABEL_11;
  v19 = *(_QWORD *)(LoopPredecessor + 40);
  if (v19 == LoopPredecessor + 40)
    goto LABEL_11;
  v20 = v19 - 24;
  if (!v19)
    v20 = 0;
  v21 = *(unsigned __int8 *)(v20 + 16);
  v22 = v21 - 29;
  if (v21 == 30)
  {
    if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_11:
      v23 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v23 = 0;
    switch(v22)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_16;
      case 1:
        __break(1u);
        goto LABEL_395;
      case 2:
        v24 = (*(_DWORD *)(v20 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
LABEL_395:
        v24 = (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) - 1;
        break;
      case 10:
        v24 = *(_DWORD *)(v20 + 80) + 1;
        break;
      default:
        goto LABEL_11;
    }
    if (v24 != 1)
      goto LABEL_11;
  }
  v23 = LoopPredecessor;
LABEL_16:
  v25 = *(_DWORD *)(a1 + 20);
  v26 = v25 & 0x7FFFFFF;
  if ((v25 & 0x7FFFFFF) != 0)
  {
    v27 = 0;
    while (1)
    {
      v28 = a1 - 32 * v26;
      if ((v25 & 0x40000000) != 0)
        v28 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v28 + 32 * *(unsigned int *)(a1 + 60) + 8 * v27) == v23)
        break;
      if (v26 == ++v27)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    LODWORD(v27) = -1;
  }
  if ((v25 & 0x40000000) != 0)
    v29 = *(_QWORD *)(a1 - 8);
  else
    v29 = a1 - 32 * v26;
  v30 = *(_QWORD *)(v29 + 32 * v27);
  LOBYTE(v217) = 0;
  *((_QWORD *)&v217 + 1) = 0;
  LODWORD(v218) = 0;
  *((_QWORD *)&v218 + 1) = 0;
  v31 = *(_QWORD ***)a1;
  v212 = v216;
  v213 = v216;
  v214 = 4;
  v215 = 0;
  v207 = v211;
  v208 = v211;
  v209 = 8;
  v210 = 0;
  v224 = v226;
  v225 = 0x800000000;
  v193 = (uint64_t)v31;
  v32 = *((unsigned __int8 *)v31 + 8);
  if (v32 <= 6)
  {
    v191 = a7;
    v192 = a8;
    v200 = a2;
    if (a2 < 0x11)
    {
      v33 = a2;
      v34 = 0;
      v10 = 0;
      v35 = a1;
      if (((0x183FFu >> v33) & 1) != 0)
        goto LABEL_278;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v32 != 13 || a2 > 0x10)
    goto LABEL_277;
  v191 = a7;
  v192 = a8;
  v36 = 1 << a2;
  v200 = a2;
  if (((1 << a2) & 0x1803E) == 0)
  {
    v34 = 0;
    v10 = 0;
    v35 = a1;
    if ((v36 & 0x3C0) == 0)
      goto LABEL_278;
    goto LABEL_35;
  }
  v37 = *(_QWORD *)(a1 + 8);
  if (v37 && !*(_QWORD *)(v37 + 8))
  {
    v204[0] = 0;
    v203[0] = 0;
    v86 = *(_QWORD *)(v37 + 24);
    v219[0] = v203;
    v219[1] = v204;
    *(_QWORD *)v220 = 0;
    v87 = *(unsigned __int8 *)(v86 + 16);
    if (v87 == 5)
    {
      if (*(_WORD *)(v86 + 18) == 28)
      {
        v90 = *(_DWORD *)(v86 + 20) & 0x7FFFFFF;
        v91 = *(_QWORD *)(v86 - 32 * v90);
        if (v91)
          v92 = *(unsigned __int8 *)(v91 + 16) >= 0x1Cu;
        else
          v92 = 0;
        if (v92)
        {
          v203[0] = *(_QWORD *)(v86 - 32 * v90);
          if ((sub_1C4D8A004((uint64_t)&v219[1], *(llvm::Constant **)(v86 - 32 * (*(_DWORD *)(v86 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)goto LABEL_350;
          v90 = *(_DWORD *)(v86 + 20) & 0x7FFFFFF;
        }
        v93 = *(_QWORD *)(v86 - 32 * v90 + 32);
        v94 = v93 && *(unsigned __int8 *)(v93 + 16) > 0x1Bu;
        if (v94)
        {
          *(_QWORD *)v219[0] = v93;
          if (sub_1C4D8A004((uint64_t)&v219[1], *(llvm::Constant **)(v86 - 32 * (*(_DWORD *)(v86 + 20) & 0x7FFFFFF))))
          {
LABEL_350:
            v175 = (const void **)v204[0];
            LODWORD(v228) = *(_DWORD *)(v204[0] + 8);
            if (v228 > 0x40)
            {
              v227 = (uint64_t *)operator new[]();
              memcpy(v227, *v175, (((unint64_t)v228 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v227 = *(uint64_t **)v204[0];
            }
            llvm::APInt::operator+=((uint64_t)&v227, 1uLL);
            LODWORD(v219[1]) = v228;
            v219[0] = v227;
            LODWORD(v228) = 0;
            v176 = sub_1C614D48C((unsigned int *)v219);
            if (LODWORD(v219[1]) >= 0x41 && v219[0])
              MEMORY[0x1CAA32F9C](v219[0], 0x1000C8000313F17);
            if (v228 >= 0x41 && v227)
              MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
            v95 = a1;
            if (v176 < 1)
              goto LABEL_204;
            v190 = a6;
            v177 = v30;
            v178 = a5;
            v179 = **(_QWORD ***)a1;
            LODWORD(v219[0]) = v176;
            if (v176 <= 63)
            {
              if (v176 <= 31)
              {
                switch(v176)
                {
                  case 16:
                    v180 = *v179 + 1936;
                    goto LABEL_379;
                  case 8:
                    v180 = *v179 + 1912;
                    goto LABEL_379;
                  case 1:
                    v180 = *v179 + 1888;
                    goto LABEL_379;
                }
              }
              else if (v176 == 32)
              {
                v180 = *v179 + 1960;
                goto LABEL_379;
              }
            }
            else
            {
              if (v176 == 64)
              {
                v180 = *v179 + 1984;
LABEL_379:
                v193 = v180;
LABEL_380:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v207, a1);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v212, v86);
                v95 = v86;
                a5 = v178;
                v30 = v177;
                a6 = v190;
                goto LABEL_204;
              }
              if (v176 == 128)
              {
                v180 = *v179 + 2008;
                goto LABEL_379;
              }
            }
            v183 = sub_1C5270984(*v179 + 2168, v219);
            v193 = *((_QWORD *)v183 + 1);
            if (!v193)
            {
              v184 = v183;
              v185 = (_QWORD *)sub_1C484358C(*v179 + 2040, 24, 3);
              v186 = (int)v219[0];
              *v185 = v179;
              v185[2] = 0;
              v185[1] = (v186 << 8) | 0xDu;
              v193 = (uint64_t)v185;
              *((_QWORD *)v184 + 1) = v185;
            }
            goto LABEL_380;
          }
        }
      }
    }
    else if (v87 == 56)
    {
      v88 = *(_QWORD *)(v86 - 64);
      if (v88)
      {
        if (*(unsigned __int8 *)(v88 + 16) >= 0x1Cu)
        {
          v203[0] = *(_QWORD *)(v86 - 64);
          if ((sub_1C4D89F84((uint64_t)&v219[1], *(unsigned __int8 **)(v86 - 32)) & 1) != 0)
            goto LABEL_350;
        }
      }
      v89 = *(_QWORD *)(v86 - 32);
      if (v89)
      {
        if (*(unsigned __int8 *)(v89 + 16) >= 0x1Cu)
        {
          *(_QWORD *)v219[0] = v89;
          if ((sub_1C4D89F84((uint64_t)&v219[1], *(unsigned __int8 **)(v86 - 64)) & 1) != 0)
            goto LABEL_350;
        }
      }
    }
    v95 = a1;
LABEL_204:
    v34 = v225;
    if (v225 >= HIDWORD(v225))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v224, (uint64_t)v226, v225 + 1, 8);
      v34 = v225;
    }
    v35 = v95;
    goto LABEL_35;
  }
LABEL_34:
  v34 = 0;
  v35 = a1;
LABEL_35:
  v188 = a5;
  v189 = a6;
  v187 = v30;
  *((_QWORD *)v224 + v34) = v35;
  LODWORD(v225) = v225 + 1;
  v196 = v35;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v207, v35);
  v38 = 0;
  v198 = 0;
  v39 = 0;
  v40 = 0;
  v195 = 0;
  v194 = -1;
  while (1)
  {
    v197 = v40;
    if (!(_DWORD)v225)
      break;
    v41 = *((_QWORD *)v224 + v225 - 1);
    LODWORD(v225) = v225 - 1;
    v42 = v200;
    if (!*(_QWORD *)(v41 + 8))
      goto LABEL_187;
    v43 = *(unsigned __int8 *)(v41 + 16);
    v44 = v43 != 83;
    if (v41 == a1 || v43 != 83)
    {
      if ((llvm::Instruction::isCommutative((llvm::Instruction *)v41) & 1) == 0 && v43 != 83)
      {
        v45 = (v43 - 81) > 4 || ((1 << (v43 - 81)) & 0x13) == 0;
        if (v45)
        {
          v46 = *(_DWORD *)(v41 + 20);
          v47 = (v46 & 0x40000000) != 0 ? *(uint64_t **)(v41 - 8) : (uint64_t *)(v41 - 32 * (v46 & 0x7FFFFFF));
          v48 = *v47;
          v49 = *(unsigned __int8 *)(v48 + 16) <= 0x1Bu ? 0 : v48;
          v50 = (char *)sub_1C477672C((uint64_t)&v207, v49);
          v51 = v208 == v207 ? (uint64_t *)((char *)&v209 + 4) : &v209;
          if (v50 == &v208[8 * *(unsigned int *)v51])
            goto LABEL_187;
        }
      }
    }
    else if (*(_QWORD *)(v41 + 40) == *(_QWORD *)(a1 + 40))
    {
      goto LABEL_187;
    }
    if (v41 != v196)
    {
      llvm::RecurrenceDescriptor::isRecurrenceInstr(a3, a1, v41, v200, (uint64_t)&v217, a4, (uint64_t)v219);
      v217 = *(_OWORD *)v219;
      v218 = *(_OWORD *)v220;
      v52 = v195;
      if (!v195)
        v52 = *(_QWORD *)&v220[8];
      if (!(_BYTE)v217)
        goto LABEL_187;
      v195 = v52;
      v53 = *((_QWORD *)&v217 + 1);
      if (!sub_1C4774A9C(*((uint64_t *)&v217 + 1)) || v43 == 83)
      {
        v42 = v200;
      }
      else
      {
        v54 = *(unsigned __int8 *)(v53 + 17) >> 1;
        if (v54 == 127)
          v54 = -1;
        if (v53 && *(_BYTE *)(v53 + 16) == 85 && (v55 = *(_QWORD *)(v53 - 96)) != 0)
        {
          v42 = v200;
          if (*(_BYTE *)(v55 + 16) == 82)
          {
            v56 = *(unsigned __int8 *)(v55 + 17) >> 1;
            if (v56 == 127)
              v56 = -1;
            v54 |= v56;
          }
        }
        else
        {
          v42 = v200;
        }
        v194 &= v54;
      }
      if ((_DWORD)v218)
        v42 = v218;
    }
    v57 = *(unsigned __int8 *)(v41 + 16);
    if (v57 == 85 && (v42 & 0xFFFFFFFE) == 10)
    {
      v40 = v197;
      if (llvm::RecurrenceDescriptor::hasMultipleUsesOf(v41, &v207, 2u))
        goto LABEL_187;
    }
    else
    {
      v45 = v43 == 83;
      v40 = v197;
      if (!v45
        && v57 != 85
        && (v42 > 0xD || ((1 << v42) & 0x33C0) == 0)
        && v42 - 15 >= 2
        && llvm::RecurrenceDescriptor::hasMultipleUsesOf(v41, &v207, 1u))
      {
        goto LABEL_187;
      }
    }
    v59 = v41 == a1 || v44;
    if ((v59 & 1) == 0 && !llvm::RecurrenceDescriptor::areAllUsesIn(v41, &v207))
      goto LABEL_187;
    if (v42 - 6 < 4 || v42 == 15)
    {
      v60 = v198;
      if ((*(unsigned __int8 *)(v41 + 16) | 4) == 0x55)
        v60 = v198 + 1;
      v198 = v60;
    }
    if (v42 <= 0x10 && ((1 << v42) & 0x13000) != 0)
    {
      v61 = *(unsigned __int8 *)(v41 + 16);
      if (v61 == 85 || v61 == 82)
        ++v198;
    }
    v200 = v42;
    v62 = v41 != v196 && v44;
    v219[0] = v220;
    v219[1] = (void *)0x800000000;
    v227 = &v229;
    v228 = 0x800000000;
    v63 = *(_QWORD *)(v41 + 8);
    if (v63)
    {
      while (1)
      {
        v64 = *(_QWORD *)(v63 + 24);
        if (sub_1C4E3A59C(v64))
        {
          v65 = *(_DWORD *)(v64 + 20);
          v66 = (v65 & 0x40000000) != 0 ? *(_QWORD **)(v64 - 8) : (_QWORD *)(v64 - 32 * (v65 & 0x7FFFFFF));
          if (v41 == *v66 || v41 == v66[4])
          {
LABEL_150:
            v79 = 0;
            goto LABEL_152;
          }
        }
        v67 = sub_1C477672C(a3 + 56, *(_QWORD *)(v64 + 40));
        v68 = *(_QWORD *)(a3 + 64);
        v69 = 72;
        if (v68 == *(_QWORD *)(a3 + 56))
          v69 = 76;
        if (v67 == (_QWORD *)(v68 + 8 * *(unsigned int *)(a3 + v69)))
        {
          if (v40 != (llvm::Instruction *)v41)
          {
            if (v41 == a1 || v40)
              goto LABEL_150;
            v73 = *(_DWORD *)(a1 + 20);
            if ((v73 & 0x40000000) != 0)
            {
              v75 = *(char **)(a1 - 8);
              v74 = v73 & 0x7FFFFFF;
              if (v74)
                goto LABEL_128;
            }
            else
            {
              v74 = v73 & 0x7FFFFFF;
              v75 = (char *)(a1 - 32 * v74);
              if (v74)
              {
LABEL_128:
                v76 = 32 * v74;
                v77 = v75;
                while (*(_QWORD *)v77 != v41)
                {
                  v77 += 32;
                  v76 -= 32;
                  if (!v76)
                  {
                    v77 = &v75[32 * v74];
                    goto LABEL_145;
                  }
                }
                goto LABEL_145;
              }
            }
            v77 = v75;
LABEL_145:
            if (v74 == (v77 - v75) >> 5)
            {
              v79 = 0;
              v40 = 0;
              goto LABEL_152;
            }
          }
          v40 = (llvm::Instruction *)v41;
          goto LABEL_147;
        }
        LOBYTE(v204[0]) = 0;
        v204[1] = 0;
        v205 = 0;
        v206 = 0;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v207, v64);
        v70 = *(unsigned __int8 *)(v64 + 16);
        if (v71)
        {
          if (v70 == 83)
          {
            v72 = v228;
            if (v228 >= (unint64_t)HIDWORD(v228))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)&v229, v228 + 1, 8);
              v72 = v228;
            }
            v227[v72] = v64;
            LODWORD(v228) = v228 + 1;
          }
          else
          {
            v78 = LODWORD(v219[1]);
            if (LODWORD(v219[1]) >= (unint64_t)HIDWORD(v219[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v219, (uint64_t)v220, LODWORD(v219[1]) + 1, 8);
              v78 = LODWORD(v219[1]);
            }
            *((_QWORD *)v219[0] + v78) = v64;
            ++LODWORD(v219[1]);
          }
        }
        else
        {
          if ((v70 - 81) < 2)
            goto LABEL_135;
          if (v70 != 83)
          {
            if (v70 != 85)
              goto LABEL_150;
LABEL_135:
            llvm::RecurrenceDescriptor::isConditionalRdxPattern(v200, v64, (uint64_t)v203);
            if (!LOBYTE(v203[0]))
            {
              llvm::RecurrenceDescriptor::isSelectCmpPattern(a3, a1, v64, (uint64_t)v204, (uint64_t)v202);
              if (!v202[0])
              {
                llvm::RecurrenceDescriptor::isMinMaxPattern(v64, v200, (uint64_t)v204, (uint64_t)v201);
                if (!v201[0])
                  goto LABEL_150;
              }
            }
          }
        }
        v38 |= v64 == a1;
LABEL_147:
        v63 = *(_QWORD *)(v63 + 8);
        if (!v63)
        {
          v80 = v227;
          v81 = v228;
          goto LABEL_151;
        }
      }
    }
    v81 = 0;
    v80 = &v229;
LABEL_151:
    sub_1C4DFE610((unsigned int *)&v224, v80, &v80[v81]);
    sub_1C4DFE610((unsigned int *)&v224, (_BYTE *)v219[0], (_BYTE *)v219[0] + 8 * LODWORD(v219[1]));
    v79 = 1;
LABEL_152:
    if (v227 != &v229)
      free(v227);
    if (v219[0] != v220)
      free(v219[0]);
    v39 |= v62;
    if ((v79 & 1) == 0)
      goto LABEL_187;
  }
  if (v200 <= 0xD && ((1 << v200) & 0x33C0) != 0)
  {
    if ((v198 | 2) == 2)
      goto LABEL_164;
LABEL_187:
    v10 = 0;
    goto LABEL_278;
  }
  if (v200 - 15 <= 1 && v198 != 1)
    goto LABEL_187;
LABEL_164:
  v10 = 0;
  if ((v38 & v39 & 1) == 0 || !v40)
    goto LABEL_278;
  if ((v200 & 0xFFFFFFFB) != 0xA)
  {
    LOBYTE(v199) = 0;
    v83 = v191;
    v82 = v192;
    goto LABEL_184;
  }
  v83 = v191;
  v82 = v192;
  if (v200 == 10)
  {
    v199 = 0;
    v85 = v196;
    if (v197 != (llvm::Instruction *)v195 || *((_BYTE *)v197 + 16) != 42)
      goto LABEL_232;
    goto LABEL_211;
  }
  if (v200 != 14)
  {
    v199 = 0;
    v85 = v196;
    if (v197 != (llvm::Instruction *)v195)
      goto LABEL_232;
    goto LABEL_211;
  }
  v84 = sub_1C4E3A59C((uint64_t)v197);
  LOBYTE(v199) = 0;
  if (v197 != (llvm::Instruction *)v195)
  {
LABEL_184:
    v85 = v196;
    goto LABEL_232;
  }
  v85 = v196;
  if (!v84)
    goto LABEL_232;
  v199 = 1;
LABEL_211:
  v96 = *((_QWORD *)v197 + 1);
  if (v96)
  {
    v97 = -2;
    do
    {
      v98 = v97;
      if (!v97)
        break;
      v96 = *(_QWORD *)(v96 + 8);
      ++v97;
    }
    while (v96);
    if (!v98)
      goto LABEL_230;
  }
  v99 = *((_DWORD *)v197 + 5);
  v100 = (v99 & 0x40000000) != 0
       ? (llvm::Instruction *)*((_QWORD *)v197 - 1)
       : (llvm::Instruction *)((char *)v197 - 32 * (v99 & 0x7FFFFFF));
  if ((v200 != 10
     || ((v101 = *(_QWORD *)v100, v102 = *((_QWORD *)v100 + 4), v101 != a1) ? (v103 = v102 == a1) : (v103 = 1), v103))
    && (!v199
     || ((v99 & 0x40000000) != 0
       ? (v104 = (char *)*((_QWORD *)v197 - 1))
       : (v104 = (char *)v197 - 32 * (v99 & 0x7FFFFFF)),
         *((_QWORD *)v104 + 8) == a1)))
  {
    LOBYTE(v199) = 1;
  }
  else
  {
LABEL_230:
    LOBYTE(v199) = 0;
  }
LABEL_232:
  if (v85 != a1)
  {
    v105 = (void *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v197 + 5) + 56) + 40) + 272);
    sub_1C4768AD0((uint64_t)v105, *(_QWORD *)v197);
    v108 = v107;
    if ((_DWORD)v106 == 1)
    if (v189)
    {
      llvm::DemandedBits::getDemandedBits(v189, v197, (llvm::APInt *)v219);
      v109 = (int)v219[1];
      if (LODWORD(v219[1]) > 0x40)
      {
        v111 = 0;
        v112 = ((unint64_t)LODWORD(v219[1]) + 63) >> 6;
        while (1)
        {
          v94 = v112-- < 1;
          if (v94)
            break;
          v113 = *((_QWORD *)v219[0] + v112);
          v111 += __clz(v113);
          if (v113)
          {
            v114 = LODWORD(v219[1]) | 0xFFFFFFC0;
            if (((uint64_t)v219[1] & 0x3F) == 0)
              v114 = 0;
            v110 = v111 + v114;
LABEL_247:
            MEMORY[0x1CAA32F9C](v219[0], 0x1000C8000313F17);
            goto LABEL_248;
          }
        }
        v115 = LODWORD(v219[1]) | 0xFFFFFFC0;
        if (((uint64_t)v219[1] & 0x3F) == 0)
          v115 = 0;
        v110 = v111 + v115;
        if (v219[0])
          goto LABEL_247;
      }
      else
      {
        v110 = LODWORD(v219[1]) + __clz((unint64_t)v219[0]) - 64;
      }
LABEL_248:
      v108 = (int8x8_t)(v109 - v110);
    }
    sub_1C4768AD0((uint64_t)v105, *(_QWORD *)v197);
    v118 = v117;
    if ((_DWORD)v116 == 1)
    LOBYTE(v119) = 0;
    if (v82 && v83 && *(_QWORD *)&v108 == v118)
    {
      if (*((unsigned __int8 *)v197 + 16) < 0x1Cu || (v120 = v197, !*((_QWORD *)v197 + 5)))
        v120 = 0;
      v219[0] = v105;
      v219[1] = v83;
      *(_QWORD *)v220 = v120;
      *(_QWORD *)&v220[8] = v82;
      *(_QWORD *)&v220[16] = 0;
      LOBYTE(v221) = 1;
      v121 = sub_1C4F85990(v197, 0, (uint64_t)v219);
      sub_1C4768AD0((uint64_t)v105, *(_QWORD *)v197);
      v124 = v123;
      if ((_DWORD)v122 == 1)
      if (*((unsigned __int8 *)v197 + 16) < 0x1Cu || (v125 = v197, !*((_QWORD *)v197 + 5)))
        v125 = 0;
      v219[0] = v105;
      v219[1] = 0;
      v126 = v124 - v121;
      *(_QWORD *)&v220[16] = 0;
      *(_OWORD *)v220 = (unint64_t)v125;
      LOBYTE(v221) = 1;
      sub_1C4F83784((uint64_t)v197, 0, (uint64_t *)v219, &v227);
      v127 = v228;
      v128 = (char *)&v227[(v228 - 1) >> 6];
      if (v228 < 0x41)
        v128 = (char *)&v227;
      v119 = (~*(_QWORD *)v128 >> (v228 - 1)) & 1;
      if (v230 >= 0x41 && v229)
      {
        MEMORY[0x1CAA32F9C](v229, 0x1000C8000313F17);
        v127 = v228;
      }
      v108 = (int8x8_t)(v126 + v119);
      if (v127 >= 0x41 && v227)
        MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
    }
    v129 = (uint8x8_t)vcnt_s8(v108);
    v129.i16[0] = vaddlv_u8(v129);
    v130 = *(_QWORD *)&v108 | (*(_QWORD *)&v108 >> 1) | ((*(_QWORD *)&v108 | (*(_QWORD *)&v108 >> 1)) >> 2);
    v131 = v130 | (v130 >> 4) | ((v130 | (v130 >> 4)) >> 8);
    v132 = v131 | (v131 >> 16) | ((v131 | (v131 >> 16)) >> 32);
    if (v129.u32[0] == 1)
      v133 = v108.i32[0];
    else
      v133 = v132 + 1;
    v134 = (uint64_t)v197;
    v135 = **(_QWORD ***)v197;
    LODWORD(v219[0]) = v133;
    if (v133 <= 63)
    {
      if (v133 <= 31)
      {
        switch(v133)
        {
          case 16:
            v136 = (_QWORD *)(*v135 + 1936);
            goto LABEL_276;
          case 8:
            v136 = (_QWORD *)(*v135 + 1912);
            goto LABEL_276;
          case 1:
            v136 = (_QWORD *)(*v135 + 1888);
            goto LABEL_276;
        }
      }
      else if (v133 == 32)
      {
        v136 = (_QWORD *)(*v135 + 1960);
        goto LABEL_276;
      }
    }
    else
    {
      if (v133 == 64)
      {
        v136 = (_QWORD *)(*v135 + 1984);
        goto LABEL_276;
      }
      if (v133 == 128)
      {
        v136 = (_QWORD *)(*v135 + 2008);
        goto LABEL_276;
      }
    }
    v181 = sub_1C5270984(*v135 + 2168, v219);
    v136 = (_QWORD *)*((_QWORD *)v181 + 1);
    if (!v136)
    {
      v136 = (_QWORD *)sub_1C484358C(*v135 + 2040, 24, 3);
      v182 = (int)v219[0];
      *v136 = v135;
      v136[2] = 0;
      v136[1] = (v182 << 8) | 0xDu;
      *((_QWORD *)v181 + 1) = v136;
    }
LABEL_276:
    v137 = v193;
    if ((_QWORD *)v193 != v136)
    {
LABEL_277:
      v10 = 0;
      goto LABEL_278;
    }
    goto LABEL_285;
  }
  LOBYTE(v119) = 0;
  v137 = v193;
  v134 = (uint64_t)v197;
LABEL_285:
  v227 = &v229;
  HIDWORD(v228) = 8;
  v219[0] = &v220[16];
  v219[1] = &v220[16];
  *(_QWORD *)v220 = 8;
  *(_DWORD *)&v220[8] = 0;
  v138 = 1;
  v139 = -1;
  v229 = v134;
  do
  {
    v140 = v227[v138 - 1];
    LODWORD(v228) = v138 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v219, v140);
    if (v140)
      v141 = *(unsigned __int8 *)(v140 + 16) - 79 >= 0xFFFFFFF3;
    else
      v141 = 0;
    if (!v141)
      goto LABEL_293;
    v142 = **(_QWORD **)(v140 - 32);
    if (v142 == v137)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v212, v140);
      goto LABEL_321;
    }
    if (*(_QWORD *)v140 == v137)
    {
      if ((*(_DWORD *)(v142 + 8) & 0xFE) == 0x12)
        v142 = **(_QWORD **)(v142 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v142);
      if (PrimitiveSizeInBits < v139)
        v139 = PrimitiveSizeInBits;
    }
    else
    {
LABEL_293:
      v143 = *(_DWORD *)(v140 + 20);
      if ((v143 & 0x40000000) != 0)
      {
        v145 = *(uint64_t **)(v140 - 8);
        v144 = v143 & 0x7FFFFFF;
        if (!v144)
        {
LABEL_315:
          v137 = v193;
          goto LABEL_321;
        }
      }
      else
      {
        v144 = v143 & 0x7FFFFFF;
        v145 = (uint64_t *)(v140 - 32 * v144);
        if (!v144)
          goto LABEL_315;
      }
      v146 = 32 * v144;
      do
      {
        v147 = *v145;
        if (*v145)
          v148 = *(unsigned __int8 *)(*v145 + 16) >= 0x1Cu;
        else
          v148 = 0;
        if (v148)
        {
          v149 = sub_1C477672C(a3 + 56, *(_QWORD *)(v147 + 40));
          v150 = *(_QWORD *)(a3 + 64);
          v151 = v150 == *(_QWORD *)(a3 + 56) ? 76 : 72;
          if (v149 != (_QWORD *)(v150 + 8 * *(unsigned int *)(a3 + v151)))
          {
            v152 = sub_1C477672C((uint64_t)v219, v147);
            v153 = (unsigned int *)(v219[1] == v219[0] ? &v220[4] : v220);
            if (v152 == (_QWORD *)((char *)v219[1] + 8 * *v153))
            {
              v154 = v228;
              if (v228 >= (unint64_t)HIDWORD(v228))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, (uint64_t)&v229, v228 + 1, 8);
                v154 = v228;
              }
              v227[v154] = v147;
              LODWORD(v228) = v228 + 1;
            }
          }
        }
        v145 += 4;
        v146 -= 32;
      }
      while (v146);
      v137 = v193;
      v134 = (uint64_t)v197;
    }
LABEL_321:
    v138 = v228;
  }
  while ((_DWORD)v228);
  if (v219[1] != v219[0])
    free(v219[1]);
  v156 = v188;
  if (v227 != &v229)
    free(v227);
  sub_1C6194810((uint64_t)v219, v187, v134, v200, v194, v195, v193, v119, v199, &v212, v139);
  v157 = v188[2];
  v158 = *(_QWORD *)v220;
  if (v157 != *(_QWORD *)v220)
  {
    if (v157 != -4096 && v157 && v157 != -8192)
    {
      v163 = *v188 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v163 = v188[1];
      v164 = (unint64_t *)v188[1];
      if (v164)
      {
        *v164 = *v164 & 7 | v163;
      }
      else
      {
        v165 = v188[2];
        v166 = ***(int32x2_t ****)v165;
        v167 = (unint64_t)v166[303];
        if (v167 <= v163)
        {
          v168 = v166[305].u32[0];
          if (v167 + 16 * v168 > v163)
          {
            v169 = v168 - 1;
            LODWORD(v170) = v169 & ((v165 >> 4) ^ (v165 >> 9));
            v171 = (uint64_t *)(v167 + 16 * v170);
            v172 = *v171;
            if (v165 == *v171)
            {
LABEL_348:
              *v171 = -8192;
              v166[304] = vadd_s32(v166[304], (int32x2_t)0x1FFFFFFFFLL);
              v165 = v188[2];
            }
            else
            {
              v173 = 1;
              while (v172 != -4096)
              {
                v174 = v170 + v173++;
                v170 = v174 & v169;
                v172 = *(_QWORD *)(v167 + 16 * v170);
                if (v165 == v172)
                {
                  v171 = (uint64_t *)(v167 + 16 * v170);
                  goto LABEL_348;
                }
              }
            }
            *(_BYTE *)(v165 + 17) &= ~1u;
            v156 = v188;
          }
        }
      }
      v158 = *(_QWORD *)v220;
    }
    v156[2] = v158;
    if (v158 != -4096 && v158 != -8192 && v158 != 0)
    {
      v160 = (unint64_t)v219[0];
      v161 = (_QWORD *)((unint64_t)v219[0] & 0xFFFFFFFFFFFFFFF8);
      v156[1] = *(_QWORD *)((unint64_t)v219[0] & 0xFFFFFFFFFFFFFFF8);
      *v161 = v156;
      *v156 = v160 & 0xFFFFFFFFFFFFFFF8 | *v156 & 7;
      v162 = (uint64_t *)v156[1];
      if (v162)
        *v162 = *v162 & 7 | (unint64_t)(v156 + 1);
    }
  }
  *(_OWORD *)(v156 + 3) = *(_OWORD *)&v220[8];
  *(_OWORD *)(v156 + 5) = v221;
  *((_WORD *)v156 + 28) = v222;
  if (v219 != (void **)v156)
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v156 + 8), (const llvm::SmallPtrSetImplBase *)v223);
  *((_DWORD *)v156 + 40) = v223[24];
  sub_1C6194908((llvm::ValueHandleBase *)v219);
  v10 = 1;
LABEL_278:
  if (v224 != v226)
    free(v224);
  if (v208 != v207)
    free(v208);
  if (v213 != v212)
    free(v213);
  return v10;
}

uint64_t llvm::RecurrenceDescriptor::isRecurrenceInstr@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v7;
  BOOL v10;
  BOOL v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;

  v7 = a4;
  switch(*(_BYTE *)(a3 + 16))
  {
    case ')':
    case '+':
      v10 = (_DWORD)a4 == 1;
      goto LABEL_21;
    case '*':
    case ',':
      v12 = (_DWORD)a4 == 10;
      goto LABEL_8;
    case '-':
      v10 = (_DWORD)a4 == 2;
      goto LABEL_21;
    case '.':
    case '1':
      v12 = (_DWORD)a4 == 11;
      goto LABEL_8;
    case '/':
    case '0':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      goto LABEL_35;
    case '8':
      v10 = (_DWORD)a4 == 4;
      goto LABEL_21;
    case '9':
      v10 = (_DWORD)a4 == 3;
      goto LABEL_21;
    case ':':
      v10 = (_DWORD)a4 == 5;
LABEL_21:
      v16 = v10;
      *(_BYTE *)a7 = v16;
      goto LABEL_36;
    default:
      switch(*(_BYTE *)(a3 + 16))
      {
        case 'Q':
        case 'R':
        case 'T':
          goto LABEL_4;
        case 'S':
          v17 = *(_DWORD *)(a5 + 16);
          v18 = *(_QWORD *)(a5 + 24);
          *(_BYTE *)a7 = 1;
          *(_QWORD *)(a7 + 8) = a3;
          *(_DWORD *)(a7 + 16) = v17;
          *(_QWORD *)(a7 + 24) = v18;
          return result;
        case 'U':
          if ((a4 & 0xFFFFFFFE) == 0xA)
            return llvm::RecurrenceDescriptor::isConditionalRdxPattern(a4, a3, a7);
LABEL_4:
          if ((a4 - 15) <= 1)
            return llvm::RecurrenceDescriptor::isSelectCmpPattern(result, a2, a3, a5, a7);
          if ((a4 - 6) < 4)
            return llvm::RecurrenceDescriptor::isMinMaxPattern(a3, v7, a5, a7);
          if ((~a6 & 0xA) == 0)
          {
            if ((a4 & 0xFFFFFFFE) != 0xC)
              goto LABEL_33;
            return llvm::RecurrenceDescriptor::isMinMaxPattern(a3, v7, a5, a7);
          }
          if (sub_1C4774A9C(a3)
            && (*(_BYTE *)(a3 + 17) & 4) != 0
            && (v7 & 0xFFFFFFFE) == 0xC
            && (*(_BYTE *)(a3 + 17) & 0x10) != 0)
          {
            return llvm::RecurrenceDescriptor::isMinMaxPattern(a3, v7, a5, a7);
          }
LABEL_33:
          result = sub_1C4E3A59C(a3);
          if ((_DWORD)result)
          {
            v12 = v7 == 14;
LABEL_8:
            v13 = v12;
            v14 = *(_BYTE *)(a3 + 17);
            *(_BYTE *)a7 = v13;
            if ((v14 & 2) != 0)
              v15 = 0;
            else
              v15 = a3;
            *(_QWORD *)(a7 + 8) = a3;
            *(_DWORD *)(a7 + 16) = 0;
            *(_QWORD *)(a7 + 24) = v15;
          }
          else
          {
LABEL_35:
            *(_BYTE *)a7 = 0;
LABEL_36:
            *(_QWORD *)(a7 + 8) = a3;
            *(_DWORD *)(a7 + 16) = 0;
            *(_QWORD *)(a7 + 24) = 0;
          }
          return result;
        default:
          goto LABEL_35;
      }
  }
}

BOOL llvm::RecurrenceDescriptor::hasMultipleUsesOf(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  _BOOL8 result;
  BOOL v17;

  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x40000000) == 0)
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (uint64_t *)(a1 - 32 * v6);
    if (v6)
      goto LABEL_3;
    return 0;
  }
  v7 = *(uint64_t **)(a1 - 8);
  v6 = v5 & 0x7FFFFFF;
  if (!v6)
    return 0;
LABEL_3:
  v8 = 0;
  v9 = 32 * v6 - 32;
  do
  {
    v11 = *v7;
    v7 += 4;
    v10 = v11;
    if (*(unsigned __int8 *)(v11 + 16) <= 0x1Bu)
      v12 = 0;
    else
      v12 = v10;
    v13 = sub_1C477672C((uint64_t)a2, v12);
    v14 = a2[1];
    if (v14 == *a2)
      v15 = (unsigned int *)a2 + 5;
    else
      v15 = (unsigned int *)(a2 + 2);
    if (v13 != (_QWORD *)(v14 + 8 * *v15))
      ++v8;
    result = v8 > a3;
    v17 = v8 > a3 || v9 == 0;
    v9 -= 32;
  }
  while (!v17);
  return result;
}

BOOL sub_1C4E3A59C(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 143;
}

uint64_t llvm::RecurrenceDescriptor::isConditionalRdxPattern@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;

  LOBYTE(v3) = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 85)
  {
    v4 = *(_QWORD *)(a2 - 96);
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v4)
      v6 = v5 >= 0x1C;
    else
      v6 = 0;
    if (!v6 || v5 - 83 < 0xFFFFFFFE)
      goto LABEL_13;
    v3 = *(_QWORD *)(v4 + 8);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
      {
LABEL_13:
        LOBYTE(v3) = 0;
        goto LABEL_14;
      }
      v8 = *(_QWORD *)(a2 - 64);
      v9 = *(_QWORD *)(a2 - 32);
      v10 = *(unsigned __int8 *)(v8 + 16);
      v11 = *(unsigned __int8 *)(v9 + 16);
      if (v10 == 83)
      {
        if ((v11 == 83) == v11 > 0x1B)
          goto LABEL_13;
      }
      else
      {
        LOBYTE(v3) = 0;
        if (v10 < 0x1C || v11 != 83)
          goto LABEL_14;
        v11 = *(unsigned __int8 *)(v8 + 16);
        v9 = *(_QWORD *)(a2 - 64);
      }
      if (v11 - 41 > 0x11)
        goto LABEL_13;
      if (v11 == 44 || v11 == 42)
      {
        if (!*(_QWORD *)(v9 - 64) || !*(_QWORD *)(v9 - 32))
          goto LABEL_13;
        if (*(unsigned __int8 *)(v9 + 17) > 0xFDu)
        {
          LOBYTE(v3) = (_DWORD)result == 10;
          goto LABEL_14;
        }
        v11 = *(unsigned __int8 *)(v9 + 16);
      }
      if (v11 == 5)
      {
        if (*(_WORD *)(v9 + 18) != 18)
          goto LABEL_13;
        v12 = (_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
        if (!*v12 || !v12[4])
          goto LABEL_13;
      }
      else if (v11 != 46 || !*(_QWORD *)(v9 - 64) || !*(_QWORD *)(v9 - 32))
      {
        goto LABEL_13;
      }
      v13 = *(unsigned __int8 *)(v9 + 17);
      LOBYTE(v3) = (_DWORD)result == 11 && v13 > 0xFD;
    }
  }
LABEL_14:
  *(_BYTE *)a3 = v3;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isSelectCmpPattern@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;

  v5 = a3;
  v7 = result;
  v19 = 0;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    if (!*(_QWORD *)(v9 + 8) && *(unsigned __int8 *)(a3 + 16) - 81 <= 1)
    {
      v19 = *(_WORD *)(a3 + 18) & 0x3F;
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16) == 85)
        {
          v11 = *(_DWORD *)(a4 + 16);
          v12 = 1;
          v5 = v10;
          goto LABEL_7;
        }
      }
    }
  }
  v18 = &v19;
  result = sub_1C61949C4(&v18, a3);
  if (!(_DWORD)result)
    goto LABEL_21;
  if (*(_BYTE *)(*(_QWORD *)(v5 - 64) + 16) == 83)
    v13 = *(_QWORD *)(v5 - 64);
  else
    v13 = 0;
  v14 = *(_QWORD *)(v5 - 32);
  if (v13 != a2)
  {
    if (*(_BYTE *)(v14 + 16) == 83)
      v15 = *(_QWORD *)(v5 - 32);
    else
      v15 = 0;
    if (v15 != a2)
      goto LABEL_21;
    v14 = *(_QWORD *)(v5 - 64);
  }
  result = llvm::Loop::isLoopInvariant(v7, v14);
  if (!(_DWORD)result)
  {
LABEL_21:
    v12 = 0;
    v11 = 0;
    goto LABEL_7;
  }
  v16 = *(_DWORD *)(v5 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(_QWORD *)(v5 - 8);
  else
    v17 = v5 - 32 * (v16 & 0x7FFFFFF);
  if (*(_BYTE *)(*(_QWORD *)v17 + 16) == 81)
    v11 = 15;
  else
    v11 = 16;
  v12 = 1;
LABEL_7:
  *(_BYTE *)a5 = v12;
  *(_QWORD *)(a5 + 8) = v5;
  *(_DWORD *)(a5 + 16) = v11;
  *(_QWORD *)(a5 + 24) = 0;
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isMinMaxPattern@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BYTE v36[24];
  int v37;

  v4 = result;
  if (a2 <= 0xD && ((1 << a2) & 0x33C0) != 0)
  {
    v37 = 0;
    v7 = *(_QWORD *)(result + 8);
    if (v7)
    {
      if (!*(_QWORD *)(v7 + 8) && *(unsigned __int8 *)(result + 16) - 81 <= 1)
      {
        v37 = *(_WORD *)(result + 18) & 0x3F;
        v8 = *(_QWORD *)(v7 + 24);
        if (v8)
        {
          if (*(_BYTE *)(v8 + 16) == 85)
          {
            v9 = *(_DWORD *)(a3 + 16);
            LOBYTE(v10) = 1;
            v4 = v8;
LABEL_29:
            *(_BYTE *)a4 = v10;
            *(_QWORD *)(a4 + 8) = v4;
            *(_DWORD *)(a4 + 16) = v9;
            goto LABEL_30;
          }
        }
      }
    }
    if (*(_BYTE *)(result + 16) != 84
      || (v11 = *(_QWORD *)(result - 32)) == 0
      || *(_BYTE *)(v11 + 16)
      || *(_QWORD *)(v11 + 24) != *(_QWORD *)(result + 72)
      || (*(_DWORD *)(v11 + 32) & 0x2000) == 0)
    {
      *(_QWORD *)v36 = &v37;
      result = sub_1C61949C4((int **)v36, result);
      if ((result & 1) == 0)
        goto LABEL_19;
    }
    result = sub_1C4E3D50C((uint64_t)v36, v4);
    if ((_DWORD)result)
    {
      v9 = 0;
      v12 = a2 == 8;
      goto LABEL_26;
    }
    result = sub_1C4E3D5C8((uint64_t)v36, v4);
    if ((_DWORD)result)
    {
      v9 = 0;
      v12 = a2 == 9;
      goto LABEL_26;
    }
    result = sub_1C4E3D684((uint64_t)v36, v4);
    if ((_DWORD)result)
    {
      v9 = 0;
      v12 = a2 == 7;
      goto LABEL_26;
    }
    result = sub_1C4E3D740((uint64_t)v36, v4);
    if ((_DWORD)result)
    {
      v9 = 0;
      v12 = a2 == 6;
      goto LABEL_26;
    }
    v13 = *(unsigned __int8 *)(v4 + 16);
    if (v13 != 85)
    {
      *(_DWORD *)v36 = 202;
      *(_QWORD *)&v36[4] = 0;
      if (v13 == 84)
      {
        v10 = *(_QWORD *)(v4 - 32);
        if (!v10)
          goto LABEL_20;
        if (!*(_BYTE *)(v10 + 16) && *(_QWORD *)(v10 + 24) == *(_QWORD *)(v4 + 72))
        {
          if (*(_DWORD *)(v10 + 36) != *(_DWORD *)v36)
          {
            v9 = 0;
            v20 = *(_DWORD *)(v10 + 36);
            v12 = a2 == 13 && v20 == 193;
            goto LABEL_26;
          }
          goto LABEL_73;
        }
      }
      goto LABEL_19;
    }
    LOBYTE(v10) = 0;
    v14 = *(_QWORD *)(v4 - 96);
    if (!v14 || *(_BYTE *)(v14 + 16) != 82)
      goto LABEL_71;
    v15 = *(_QWORD *)(v4 - 64);
    v16 = *(_QWORD *)(v4 - 32);
    v17 = *(_QWORD *)(v14 - 64);
    v18 = *(_QWORD *)(v14 - 32);
    if (v15 == v17 && v16 == v18 || v15 == v18 && v16 == v17)
    {
      v19 = *(_WORD *)(v14 + 18) & 0x3E;
      if (v15 == v17)
      {
        if (v19 == 4)
          goto LABEL_73;
      }
      else if (v19 == 10)
      {
        goto LABEL_73;
      }
    }
    v21 = *(_QWORD *)(v4 - 64);
    v22 = *(_QWORD *)(v4 - 32);
    v23 = *(_QWORD *)(v14 - 64);
    v24 = *(_QWORD *)(v14 - 32);
    if (v21 == v23 && v22 == v24 || v21 == v24 && v22 == v23)
    {
      v25 = *(_WORD *)(v14 + 18) & 0x3E;
      if (v21 == v23)
      {
        if (v25 == 2)
          goto LABEL_75;
      }
      else if (v25 == 12)
      {
        goto LABEL_75;
      }
    }
    v26 = *(_QWORD *)(v4 - 64);
    v27 = *(_QWORD *)(v4 - 32);
    v28 = *(_QWORD *)(v14 - 64);
    v29 = *(_QWORD *)(v14 - 32);
    if ((v26 != v28 || v27 != v29) && (v26 != v29 || v27 != v28))
      goto LABEL_64;
    v30 = *(_WORD *)(v14 + 18) & 0x3E;
    if (v26 == v28)
    {
      if (v30 != 12)
      {
LABEL_64:
        v31 = *(_QWORD *)(v4 - 64);
        v32 = *(_QWORD *)(v4 - 32);
        v33 = *(_QWORD *)(v14 - 64);
        v34 = *(_QWORD *)(v14 - 32);
        if (v31 == v33 && v32 == v34 || (LOBYTE(v10) = 0, v31 == v34) && v32 == v33)
        {
          v35 = *(_WORD *)(v14 + 18) & 0x3E;
          if (v31 != v33)
          {
            if (v35 == 4)
              goto LABEL_75;
LABEL_19:
            LOBYTE(v10) = 0;
LABEL_20:
            v9 = 0;
            goto LABEL_29;
          }
          if (v35 != 10)
            goto LABEL_19;
LABEL_75:
          v9 = 0;
          v12 = a2 == 13;
LABEL_26:
          LOBYTE(v10) = v12;
          goto LABEL_29;
        }
LABEL_71:
        v9 = 0;
        goto LABEL_29;
      }
    }
    else if (v30 != 2)
    {
      goto LABEL_64;
    }
LABEL_73:
    v9 = 0;
    v12 = a2 == 12;
    goto LABEL_26;
  }
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_30:
  *(_QWORD *)(a4 + 24) = 0;
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isFixedOrderRecurrence(uint64_t a1, uint64_t a2, int32x2_t *a3, llvm::DominatorTree *a4)
{
  uint64_t LoopPredecessor;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t LoopLatch;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Instruction *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  llvm::Instruction *v37;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int32x2_t v43;
  uint64_t v44;
  llvm::Instruction **v45;
  llvm::Instruction *v46;
  int v47;
  int v48;
  uint64_t **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  BOOL v58;
  uint64_t **v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  llvm::Instruction *v73;
  uint64_t v74;
  llvm::Instruction *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Instruction *v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  int v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Instruction *v110;
  int32x2_t v111;
  const llvm::Value *v112;
  int32x2_t v113;
  int32x2_t v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  BOOL v123;
  int v124;
  BOOL v125;
  _QWORD *v126;
  uint64_t **v127;
  uint64_t *v128;
  uint64_t **v129;
  _QWORD *v130;
  uint64_t **v131;
  uint64_t **v132;
  uint64_t **v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  int v140;
  _BYTE v141[32];
  llvm::Value *v142;
  llvm::Instruction *v143;
  llvm::Instruction *v144;
  void *v145;
  unsigned int v146;
  unsigned int v147;
  _QWORD v148[10];

  v148[8] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40) != **(_QWORD **)(a2 + 32) || (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 2)
    return 0;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(a2);
  if (!LoopPredecessor)
    goto LABEL_10;
  v9 = *(_QWORD *)(LoopPredecessor + 40);
  if (v9 == LoopPredecessor + 40)
    goto LABEL_10;
  if (v9)
    v10 = v9 - 24;
  else
    v10 = 0;
  if (*(_BYTE *)(v10 + 16) != 30)
  {
    v11 = 0;
    switch(*(_BYTE *)(v10 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_15;
      case 0x1E:
        __break(1u);
        goto LABEL_222;
      case 0x1F:
        v12 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_222:
        v12 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v12 = *(_DWORD *)(v10 + 80) + 1;
        break;
      default:
        goto LABEL_10;
    }
    if (v12 != 1)
      goto LABEL_10;
LABEL_14:
    v11 = LoopPredecessor;
    goto LABEL_15;
  }
  if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) != 3)
    goto LABEL_14;
LABEL_10:
  v11 = 0;
LABEL_15:
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(a2);
  v14 = 0;
  if (!v11)
    return v14;
  v15 = LoopLatch;
  if (!LoopLatch)
    return v14;
  v16 = *(_DWORD *)(a1 + 20);
  v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x7FFFFFF) == 0)
    return 0;
  v18 = a1 - 32 * v17;
  v19 = v16 & 0x7FFFFFF;
  for (i = 32 * *(unsigned int *)(a1 + 60); ; i += 8)
  {
    v21 = a1 - 32 * v17;
    if ((v16 & 0x40000000) != 0)
      v21 = *(_QWORD *)(a1 - 8);
    if (*(_QWORD *)(v21 + i) == v11)
      break;
    v14 = 0;
    if (!--v19)
      return v14;
  }
  v23 = v16 & 0x7FFFFFF;
  for (j = 32 * *(unsigned int *)(a1 + 60); ; j += 8)
  {
    v25 = a1 - 32 * v17;
    if ((v16 & 0x40000000) != 0)
      v25 = *(_QWORD *)(a1 - 8);
    if (*(_QWORD *)(v25 + j) == LoopLatch)
      break;
    v14 = 0;
    if (!--v23)
      return v14;
  }
  v26 = 0;
  while (1)
  {
    v27 = a1 - 32 * v17;
    if ((v16 & 0x40000000) != 0)
      v27 = *(_QWORD *)(a1 - 8);
    if (*(_QWORD *)(v27 + 32 * *(unsigned int *)(a1 + 60) + 8 * v26) == LoopLatch)
      break;
    if (v17 == ++v26)
    {
      LODWORD(v26) = -1;
      break;
    }
  }
  if ((v16 & 0x40000000) != 0)
    v18 = *(_QWORD *)(a1 - 8);
  v14 = 0;
  v28 = *(llvm::Instruction **)(v18 + 32 * v26);
  v137 = v141;
  v138 = v141;
  v29 = *((unsigned __int8 *)v28 + 16);
  v139 = 4;
  v140 = 0;
  if (v28)
    v30 = v29 >= 0x1C;
  else
    v30 = 0;
  if (!v30)
    goto LABEL_68;
  while (1)
  {
    v31 = *((_QWORD *)v28 + 5);
    if (v29 != 83)
      break;
    if (v31 == *(_QWORD *)(a1 + 40))
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v137, (uint64_t)v28);
      if (v32)
      {
        v33 = *((_DWORD *)v28 + 5);
        v34 = v33 & 0x7FFFFFF;
        if ((v33 & 0x7FFFFFF) != 0)
        {
          v35 = 0;
          while (1)
          {
            v36 = (char *)v28 - 32 * v34;
            if ((v33 & 0x40000000) != 0)
              v36 = (char *)*((_QWORD *)v28 - 1);
            if (*(_QWORD *)&v36[32 * *((unsigned int *)v28 + 15) + 8 * v35] == v15)
              break;
            if (v34 == ++v35)
              goto LABEL_54;
          }
        }
        else
        {
LABEL_54:
          LODWORD(v35) = -1;
        }
        v37 = (v33 & 0x40000000) != 0
            ? (llvm::Instruction *)*((_QWORD *)v28 - 1)
            : (llvm::Instruction *)((char *)v28 - 32 * v34);
        v28 = (llvm::Instruction *)*((_QWORD *)v37 + 4 * v35);
        v29 = *((unsigned __int8 *)v28 + 16);
        if (v28 && v29 >= 0x1C)
          continue;
      }
    }
    goto LABEL_67;
  }
  v39 = sub_1C477672C(a2 + 56, v31);
  v40 = *(_QWORD *)(a2 + 64);
  v41 = 72;
  if (v40 == *(_QWORD *)(a2 + 56))
    v41 = 76;
  if (v39 == (_QWORD *)(v40 + 8 * *(unsigned int *)(a2 + v41)) || *((_BYTE *)v28 + 16) == 83)
    goto LABEL_67;
  v42 = a3[2].u32[0];
  if ((_DWORD)v42)
  {
    v43 = *a3;
    LODWORD(v44) = (v42 - 1) & ((v28 >> 4) ^ (v28 >> 9));
    v45 = (llvm::Instruction **)(*(_QWORD *)a3 + 16 * v44);
    v46 = *v45;
    if (v28 != *v45)
    {
      v47 = 1;
      do
      {
        if (v46 == (llvm::Instruction *)-4096)
          goto LABEL_77;
        v48 = v44 + v47++;
        v44 = v48 & (v42 - 1);
        v46 = *(llvm::Instruction **)(*(_QWORD *)&v43 + 16 * v44);
      }
      while (v28 != v46);
      v45 = (llvm::Instruction **)(*(_QWORD *)&v43 + 16 * v44);
    }
    if (v45 != (llvm::Instruction **)(*(_QWORD *)&v43 + 16 * v42))
    {
LABEL_67:
      v14 = 0;
      goto LABEL_68;
    }
  }
LABEL_77:
  v49 = &v135;
  v135 = 0;
  v136 = 0;
  v134 = &v135;
  v50 = v148;
  v51 = *(_QWORD *)(a1 + 40);
  v145 = v148;
  v52 = v51 + 40;
  v147 = 8;
  v148[0] = a1;
  v53 = 1;
  while (1)
  {
    v54 = *((_QWORD *)v145 + --v53);
    v146 = v53;
    v55 = *(_QWORD *)(v54 + 8);
    if (v55)
      break;
LABEL_206:
    if (!v53)
    {
      v126 = v50;
      v127 = v134;
      if (v134 == v49)
      {
        v14 = 1;
      }
      else
      {
        v14 = 1;
        do
        {
          v144 = (llvm::Instruction *)v127[4];
          *(_QWORD *)sub_1C6194570((uint64_t)a3, (uint64_t *)&v144) = v28;
          v128 = v127[1];
          if (v128)
          {
            do
            {
              v129 = (uint64_t **)v128;
              v128 = (uint64_t *)*v128;
            }
            while (v128);
          }
          else
          {
            do
            {
              v129 = (uint64_t **)v127[2];
              v58 = *v129 == (uint64_t *)v127;
              v127 = v129;
            }
            while (!v58);
          }
          v28 = v144;
          v127 = v129;
          v50 = v126;
        }
        while (v129 != v49);
      }
      goto LABEL_217;
    }
  }
  while (1)
  {
    v56 = *(_QWORD *)(v55 + 24);
    v144 = (llvm::Instruction *)v56;
    v57 = v135;
    v58 = *(_QWORD *)(v56 + 40) != v51 || v135 == 0;
    if (!v58)
    {
      v59 = v49;
      do
      {
        v60 = v59;
        v61 = v57;
        v62 = v57[4];
        v63 = *(_QWORD *)(v62 + 40);
        v64 = *(__int16 *)(v63 + 18);
        if ((v64 & 0x80000000) == 0)
        {
          v68 = *(_QWORD *)(v63 + 48);
          if (v68 != v63 + 40)
          {
            v69 = 0;
            do
            {
              v70 = v68 - 24;
              if (!v68)
                v70 = 0;
              *(_DWORD *)(v70 + 56) = v69++;
              v68 = *(_QWORD *)(v68 + 8);
            }
            while (v68 != v63 + 40);
          }
          *(_WORD *)(v63 + 18) = v64 | 0x8000;
        }
        v65 = *(_DWORD *)(v62 + 56);
        v66 = *(_DWORD *)(v56 + 56);
        v67 = (uint64_t **)(v61 + 1);
        if (v65 >= v66)
        {
          v67 = (uint64_t **)v61;
          v59 = (uint64_t **)v61;
        }
        v57 = *v67;
      }
      while (v57);
      if (v59 != v49)
      {
        if (v65 >= v66)
          v60 = v61;
        v71 = v60[4];
        v72 = *(__int16 *)(v51 + 18);
        if ((v72 & 0x80000000) == 0)
        {
          v96 = *(_QWORD *)(v51 + 48);
          if (v96 != v52)
          {
            v97 = 0;
            do
            {
              v98 = v96 - 24;
              if (!v96)
                v98 = 0;
              *(_DWORD *)(v98 + 56) = v97++;
              v96 = *(_QWORD *)(v96 + 8);
            }
            while (v96 != v52);
            v66 = *(_DWORD *)(v56 + 56);
          }
          *(_WORD *)(v51 + 18) = v72 | 0x8000;
        }
        if (v66 >= *(_DWORD *)(v71 + 56))
          goto LABEL_102;
      }
    }
    if (v28 == (llvm::Instruction *)v56)
      goto LABEL_216;
    if (llvm::DominatorTree::dominates(a4, v28, (const llvm::Instruction *)v56))
      goto LABEL_102;
    v73 = v144;
    if (*((_QWORD *)v144 + 5) != v51)
      goto LABEL_216;
    v74 = *((unsigned __int8 *)v144 + 16) - 33;
    if (v74 <= 0x37)
    {
      if (((1 << (*((_BYTE *)v144 + 16) - 33)) & 0x808001D0000010) != 0)
        goto LABEL_216;
      if (((1 << (*((_BYTE *)v144 + 16) - 33)) & 0x8000000000041) == 0)
      {
        if (v74 == 27 && (*((_WORD *)v144 + 9) & 0x301) != 0)
          goto LABEL_216;
        goto LABEL_109;
      }
      v99 = *((_QWORD *)v144 + 8);
      if (!v99 || (*(_BYTE *)(v99 + 17) & 0x30) == 0)
        break;
    }
LABEL_109:
    if ((llvm::Instruction::mayThrow(v73) & 1) != 0 || !llvm::Instruction::willReturn(v73))
      goto LABEL_216;
    v75 = v144;
    v76 = *((unsigned __int8 *)v144 + 16) - 33;
    if (v76 <= 0x37)
    {
      if (((1 << (*((_BYTE *)v144 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v77 = *((_QWORD *)v144 + 8);
        if (!v77 || (*(_BYTE *)(v77 + 20) & 4) == 0 && (*(_BYTE *)(v77 + 17) & 0x10) == 0)
        {
          LODWORD(v143) = 7;
          if (sub_1C53E4BBC((uint64_t)v144, (__int32 *)&v143, 1uLL))
          {
            v116 = *((_QWORD *)v75 - 4);
            if (!v116
              || *(_BYTE *)(v116 + 16)
              || *(_QWORD *)(v116 + 24) != *((_QWORD *)v75 + 9)
              || *(_DWORD *)(v116 + 36) != 7)
            {
              goto LABEL_216;
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v75, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v75, 44))
          {
            goto LABEL_216;
          }
        }
      }
      else if (((1 << (*((_BYTE *)v144 + 16) - 33)) & 0x808001C8000010) != 0
             || v76 == 28 && (*((_WORD *)v144 + 9) & 0x301) != 0)
      {
        goto LABEL_216;
      }
    }
    if (*((unsigned __int8 *)v144 + 16) - 29 < 0xB)
      goto LABEL_216;
    v78 = sub_1C619495C((uint64_t)a3, (uint64_t *)&v144);
    if (*(_QWORD *)&a3[4] == v78)
      goto LABEL_125;
    v105 = v78;
    v133 = v49;
    v106 = v52;
    v143 = *(llvm::Instruction **)(v78 + 8);
    v107 = sub_1C619495C((uint64_t)a3, (uint64_t *)&v143);
    if (*(_QWORD *)&a3[4] == v107)
    {
      v110 = v143;
    }
    else
    {
      v108 = v107;
      while (1)
      {
        v142 = *(llvm::Value **)(v108 + 8);
        v109 = sub_1C619495C((uint64_t)a3, (uint64_t *)&v142);
        v110 = v142;
        if (*(_QWORD *)&a3[4] == v109)
          break;
        v108 = v109;
        if (!llvm::DominatorTree::dominates(a4, v142, v143))
          goto LABEL_216;
        v111 = a3[4];
        v110 = v142;
        v143 = v142;
        if (*(_QWORD *)&v111 == v108)
          goto LABEL_180;
      }
      v143 = v142;
    }
LABEL_180:
    v112 = *(const llvm::Value **)(v105 + 8);
    if (v110 != v112)
    {
      if (!llvm::DominatorTree::dominates(a4, v112, v110))
        goto LABEL_216;
      v110 = v143;
    }
    if (!llvm::DominatorTree::dominates(a4, v28, v110) && v28 != v143)
    {
      v113 = a3[3];
      v114 = a3[4];
      if (*(_QWORD *)&v113 != *(_QWORD *)&v114)
      {
        while (*(llvm::Instruction **)(*(_QWORD *)&v113 + 8) != v144)
        {
          *(_QWORD *)&v113 += 16;
          if (*(_QWORD *)&v113 == *(_QWORD *)&v114)
            goto LABEL_188;
        }
        goto LABEL_216;
      }
LABEL_188:
      v115 = (_QWORD *)sub_1C619495C((uint64_t)a3, (uint64_t *)&v144);
      if (*(_QWORD **)&a3[4] != v115)
        sub_1C4E3D224(a3, v115);
      v52 = v106;
      v49 = v133;
LABEL_125:
      v79 = v144;
      if (*((_BYTE *)v144 + 16) != 83)
      {
        v130 = v50;
        v131 = v49;
        v80 = v135;
        v81 = v49;
        if (!v135)
          goto LABEL_164;
        v82 = *((_QWORD *)v144 + 5);
        v83 = v82 + 40;
        while (1)
        {
          while (1)
          {
            v81 = (uint64_t **)v80;
            v84 = v80[4];
            v85 = *(__int16 *)(v82 + 18);
            if ((v85 & 0x80000000) == 0)
            {
              v90 = *(_QWORD *)(v82 + 48);
              if (v90 != v83)
              {
                v91 = 0;
                do
                {
                  v92 = v90 - 24;
                  if (!v90)
                    v92 = 0;
                  *(_DWORD *)(v92 + 56) = v91++;
                  v90 = *(_QWORD *)(v90 + 8);
                }
                while (v90 != v83);
              }
              *(_WORD *)(v82 + 18) = v85 | 0x8000;
            }
            v86 = *((_DWORD *)v79 + 14);
            v87 = *(_DWORD *)(v84 + 56);
            if (v86 >= v87)
              break;
            v80 = *v81;
            v49 = v81;
            if (!*v81)
              goto LABEL_164;
          }
          v88 = *(_QWORD *)(v84 + 40);
          v89 = *(__int16 *)(v88 + 18);
          if ((v89 & 0x80000000) == 0)
          {
            v93 = *(_QWORD *)(v88 + 48);
            if (v93 != v88 + 40)
            {
              v94 = 0;
              do
              {
                v95 = v93 - 24;
                if (!v93)
                  v95 = 0;
                *(_DWORD *)(v95 + 56) = v94++;
                v93 = *(_QWORD *)(v93 + 8);
              }
              while (v93 != v88 + 40);
              v87 = *(_DWORD *)(v84 + 56);
              v86 = *((_DWORD *)v79 + 14);
            }
            *(_WORD *)(v88 + 18) = v89 | 0x8000;
          }
          if (v87 >= v86)
            break;
          v49 = v81 + 1;
          v80 = v81[1];
          if (!v80)
            goto LABEL_164;
        }
        if (v81)
        {
          v50 = v130;
        }
        else
        {
LABEL_164:
          v102 = (uint64_t *)operator new(0x28uLL);
          v102[4] = (uint64_t)v79;
          *v102 = 0;
          v102[1] = 0;
          v102[2] = (uint64_t)v81;
          *v49 = v102;
          if (*v134)
          {
            v134 = (uint64_t **)*v134;
            v103 = *v49;
          }
          else
          {
            v103 = v102;
          }
          v50 = v130;
          sub_1C4768E74(v135, v103);
          ++v136;
          v79 = v144;
        }
        v49 = v131;
        v104 = v146;
        if (v146 >= (unint64_t)v147)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, (uint64_t)v50, v146 + 1, 8);
          v104 = v146;
        }
        *((_QWORD *)v145 + v104) = v79;
        ++v146;
      }
      goto LABEL_102;
    }
    v52 = v106;
    v49 = v133;
LABEL_102:
    v55 = *(_QWORD *)(v55 + 8);
    if (!v55)
    {
      v53 = v146;
      goto LABEL_206;
    }
  }
  v132 = v49;
  v100 = v50;
  v101 = *((_DWORD *)v144 + 5);
  if ((v101 & 0x80000000) == 0
    || (v117 = (char *)v144 - 32 * (v101 & 0x7FFFFFF), v120 = *((_QWORD *)v117 - 1), v118 = v117 - 8, (v119 = v120) == 0))
  {
LABEL_159:
    v50 = v100;
    v49 = v132;
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v144, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v73, 44))
    {
      goto LABEL_216;
    }
    goto LABEL_109;
  }
  v121 = -v119;
  while (1)
  {
    v122 = *(_DWORD *)(*(_QWORD *)&v118[v121] + 8);
    v123 = v122 > 7;
    v124 = (1 << v122) & 0x83;
    v125 = v123 || v124 == 0;
    v50 = v100;
    if (v125)
      break;
    v121 += 16;
    if (!v121)
      goto LABEL_159;
  }
LABEL_216:
  v14 = 0;
LABEL_217:
  if (v145 != v50)
    free(v145);
  sub_1C49F3440(v135);
LABEL_68:
  if (v138 != v137)
    free(v138);
  return v14;
}

void sub_1C4E3B6CC(unsigned int a1@<W0>, llvm::APInt *a2@<X8>)
{
  unint64_t v2;
  llvm::APInt *v4;

  *((_DWORD *)a2 + 2) = a1;
  if (a1 > 0x40)
  {
    v4 = a2;
    llvm::APInt::initSlowCase(a2, -1, 1);
    a2 = v4;
    LODWORD(v2) = a1 - 1;
    if (*((_DWORD *)v4 + 2) >= 0x41u)
      a2 = (llvm::APInt *)(*(_QWORD *)v4 + 8 * (v2 >> 6));
  }
  else
  {
    v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a1;
    if (!a1)
      v2 = 0;
    *(_QWORD *)a2 = v2;
    LOBYTE(v2) = a1 - 1;
  }
  *(_QWORD *)a2 &= ~(1 << v2);
}

void llvm::RecurrenceDescriptor::getReductionOpChain(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1C4E3B7E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int matched;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unsigned int v66;
  unsigned int v67;

  v39 = 0;
  v40 = *(_QWORD *)(v36 + 24);
  if (!v40 || *(_BYTE *)(v40 + 16) != 83)
    goto LABEL_17;
  v41 = *(_DWORD *)(v40 + 20);
  if ((v41 & 0x7FFFFFF) != 2)
    goto LABEL_22;
  if ((v41 & 0x40000000) != 0)
    v42 = *(uint64_t **)(v40 - 8);
  else
    v42 = (uint64_t *)(v40 - 64);
  v43 = *v42;
  if (*(unsigned __int8 *)(*v42 + 16) <= 0x1Bu)
    v43 = 0;
  v44 = v42[4];
  if (*(unsigned __int8 *)(v44 + 16) <= 0x1Bu)
    v40 = 0;
  else
    v40 = v44;
  if (v43 == v35)
  {
    v39 = 1;
    goto LABEL_17;
  }
  if (v40 != v35)
  {
LABEL_22:
    *(_QWORD *)v33 = v33 + 16;
    *(_QWORD *)(v33 + 8) = v38;
    goto LABEL_23;
  }
  v39 = 1;
  v40 = v43;
LABEL_17:
  v63 = 0;
  v64 = 0;
  matched = llvm::matchSelectPattern(v40, (uint64_t)&v64, &v63, 0, 0);
  if (matched <= 8 && ((1 << matched) & 0x181) != 0)
    goto LABEL_22;
  v46 = *(_QWORD *)(*(_QWORD *)(v36 + 24) + 8);
  if (!v46)
    goto LABEL_22;
  v47 = *(_QWORD *)(v46 + 8);
  if (!v47 || *(_QWORD *)(v47 + 8))
    goto LABEL_22;
  v48 = v39 + 2;
  v49 = *(_QWORD *)(v35 + 8);
  v50 = v49;
  do
  {
    if (!v50)
      goto LABEL_22;
    v50 = *(_QWORD *)(v50 + 8);
    --v48;
  }
  while (v48);
  if (v50)
    goto LABEL_22;
  if (v49)
  {
    while (1)
    {
      v51 = *(_QWORD *)(v49 + 24);
      if (*(_BYTE *)(v51 + 16) == 85)
        break;
      v49 = *(_QWORD *)(v49 + 8);
      if (!v49)
        goto LABEL_33;
    }
  }
  else
  {
LABEL_33:
    v51 = 0;
  }
  if (v51 != v40)
  {
LABEL_35:
    if (v51)
    {
      v63 = 0;
      v64 = 0;
      v52 = llvm::matchSelectPattern(v51, (uint64_t)&v64, &v63, 0, 0);
      if (v52 > 8 || ((1 << v52) & 0x181) == 0)
      {
        v53 = *(_QWORD *)(v51 + 8);
        v54 = 2;
        while (v53)
        {
          v53 = *(_QWORD *)(v53 + 8);
          if (!--v54)
          {
            if (v53)
              goto LABEL_22;
            v55 = v66;
            if (v66 >= (unint64_t)v67)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v34, v66 + 1, 8);
              v55 = v66;
            }
            v65[v55] = v51;
            v56 = ++v66;
            v57 = *(_QWORD *)(v51 + 8);
            if (v57)
            {
              while (1)
              {
                v51 = *(_QWORD *)(v57 + 24);
                if (*(_BYTE *)(v51 + 16) == 85)
                  break;
                v57 = *(_QWORD *)(v57 + 8);
                if (!v57)
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              v51 = 0;
            }
            if (v51 != v40)
              goto LABEL_35;
            goto LABEL_51;
          }
        }
      }
    }
    goto LABEL_22;
  }
  v56 = v66;
LABEL_51:
  if (v56 >= v67)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v34, v56 + 1, 8);
    v56 = v66;
  }
  v65[v56] = v40;
  v58 = v66 + 1;
  v59 = v66++ == -1;
  v60 = (void *)(v33 + 16);
  *(_QWORD *)v33 = v33 + 16;
  *(_QWORD *)(v33 + 8) = v38;
  if (!v59 && &v65 != (_QWORD **)v33)
  {
    if (v65 != v37)
    {
      *(_QWORD *)v33 = v65;
      v62 = v67;
      *(_DWORD *)(v33 + 8) = v58;
      *(_DWORD *)(v33 + 12) = v62;
      v65 = v34;
      v67 = 0;
      goto LABEL_60;
    }
    if (v58 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v33, (uint64_t)v60, v58, 8);
      v61 = v66;
      if (!v66)
        goto LABEL_59;
      v34 = v65;
      v60 = *(void **)v33;
    }
    else
    {
      v61 = v58;
    }
    memcpy(v60, v34, 8 * v61);
LABEL_59:
    *(_DWORD *)(v33 + 8) = v58;
LABEL_60:
    v66 = 0;
  }
LABEL_23:
  if (v65 != v37)
    free(v65);
}

llvm::ValueHandleBase *llvm::InductionDescriptor::InductionDescriptor(llvm::ValueHandleBase *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 6;
  if (a2)
  {
    *((_QWORD *)this + 2) = a2;
    if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::AddToUseList(this);
  }
  v13 = (char *)this + 72;
  *((_QWORD *)this + 7) = (char *)this + 72;
  *((_DWORD *)this + 6) = a3;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = a5;
  *((_QWORD *)this + 6) = a6;
  *((_QWORD *)this + 8) = 0x200000000;
  if (a7)
  {
    v15 = *(unsigned int *)(a7 + 8);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *(uint64_t **)a7;
      v18 = 8 * v15;
      do
      {
        v19 = v13;
        v20 = *v17;
        if (v16 >= *((_DWORD *)this + 17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 56, (uint64_t)v13, v16 + 1, 8);
          v16 = *((_DWORD *)this + 16);
        }
        *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v16) = v20;
        v16 = *((_DWORD *)this + 16) + 1;
        *((_DWORD *)this + 16) = v16;
        ++v17;
        v18 -= 8;
        v13 = v19;
      }
      while (v18);
    }
  }
  return this;
}

uint64_t llvm::InductionDescriptor::isFPInductionPHI(llvm::InductionDescriptor *this, llvm::PHINode *a2, const llvm::Loop *a3, llvm::ScalarEvolution *a4, llvm::InductionDescriptor *a5)
{
  int v6;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  llvm::InductionDescriptor *v16;
  llvm::InductionDescriptor *v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  int32x2_t ****v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t Unknown;
  int32x2_t ****v29;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  __int128 v34;
  _QWORD *v35;
  void **v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int32x2_t ****v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int32x2_t *****v46;
  int32x2_t ****v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  int32x2_t *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t *v63;
  int32x2_t ****v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[3];

  v69[2] = *MEMORY[0x1E0C80C00];
  if (**((_QWORD **)a2 + 4) != *((_QWORD *)this + 5))
    return 0;
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) != 2)
    return 0;
  if ((v6 & 0x40000000) != 0)
    v10 = (char *)*((_QWORD *)this - 1);
  else
    v10 = (char *)this - 64;
  v11 = sub_1C477672C((uint64_t)a2 + 56, *(_QWORD *)&v10[32 * *((unsigned int *)this + 15)]);
  v12 = *((_QWORD *)a2 + 8);
  v13 = 72;
  if (v12 == *((_QWORD *)a2 + 7))
    v13 = 76;
  v14 = (_QWORD *)(v12 + 8 * *(unsigned int *)((char *)a2 + v13));
  v15 = *((_DWORD *)this + 5);
  if (v11 == v14)
  {
    v17 = (v15 & 0x40000000) != 0
        ? (llvm::InductionDescriptor *)*((_QWORD *)this - 1)
        : (llvm::InductionDescriptor *)((char *)this - 32 * (v15 & 0x7FFFFFF));
    v16 = (llvm::InductionDescriptor *)((char *)v17 + 32);
  }
  else
  {
    v16 = (v15 & 0x40000000) != 0
        ? (llvm::InductionDescriptor *)*((_QWORD *)this - 1)
        : (llvm::InductionDescriptor *)((char *)this - 32 * (v15 & 0x7FFFFFF));
    v17 = (llvm::InductionDescriptor *)((char *)v16 + 32);
  }
  v18 = *(_QWORD *)v16;
  v19 = *(unsigned __int8 *)(*(_QWORD *)v16 + 16);
  v20 = v18 && v19 >= 0x1C;
  if (!v20 || v19 - 59 < 0xFFFFFFEE)
    return 0;
  v22 = *(int32x2_t *****)v17;
  if (v19 == 44)
  {
    if (*(llvm::InductionDescriptor **)(v18 - 64) == this)
    {
      v23 = *(_QWORD *)(v18 - 32);
      goto LABEL_32;
    }
    return 0;
  }
  if (v19 != 42)
    return 0;
  v23 = *(_QWORD *)(v18 - 32);
  if (*(llvm::InductionDescriptor **)(v18 - 64) != this)
  {
    if ((llvm::InductionDescriptor *)v23 == this)
    {
      v23 = *(_QWORD *)(v18 - 64);
      goto LABEL_32;
    }
    return 0;
  }
LABEL_32:
  if (!v23)
    return 0;
  if (*(unsigned __int8 *)(v23 + 16) >= 0x1Cu)
  {
    v24 = sub_1C477672C((uint64_t)a2 + 56, *(_QWORD *)(v23 + 40));
    v25 = *((_QWORD *)a2 + 8);
    v26 = 72;
    if (v25 == *((_QWORD *)a2 + 7))
      v26 = 76;
    if (v24 != (_QWORD *)(v25 + 8 * *(unsigned int *)((char *)a2 + v26)))
      return 0;
  }
  Unknown = llvm::ScalarEvolution::getUnknown(a3, (llvm::Value *)v23);
  v63 = 0;
  v64 = 0;
  v62 = 6;
  if (v22)
  {
    v64 = v22;
    if (((unint64_t)v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v62);
      v22 = v64;
    }
  }
  LODWORD(v65) = 3;
  *((_QWORD *)&v65 + 1) = Unknown;
  v66 = v18;
  v67 = v69;
  v68 = 0x200000000;
  v29 = (int32x2_t ****)*((_QWORD *)a4 + 2);
  if (v29 != v22)
  {
    if (v29 != (int32x2_t ****)-4096 && v29 && v29 != (int32x2_t ****)-8192)
    {
      v50 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v50 = *((_QWORD *)a4 + 1);
      v51 = (unint64_t *)*((_QWORD *)a4 + 1);
      if (v51)
      {
        *v51 = *v51 & 7 | v50;
      }
      else
      {
        v52 = *((_QWORD *)a4 + 2);
        v53 = ***(int32x2_t ****)v52;
        v54 = (unint64_t)v53[303];
        if (v54 <= v50)
        {
          v55 = v53[305].u32[0];
          if (v54 + 16 * v55 > v50)
          {
            v56 = v55 - 1;
            LODWORD(v57) = v56 & ((v52 >> 4) ^ (v52 >> 9));
            v58 = (uint64_t *)(v54 + 16 * v57);
            v59 = *v58;
            if (v52 == *v58)
            {
LABEL_87:
              *v58 = -8192;
              v53[304] = vadd_s32(v53[304], (int32x2_t)0x1FFFFFFFFLL);
              v52 = *((_QWORD *)a4 + 2);
            }
            else
            {
              v60 = 1;
              while (v59 != -4096)
              {
                v61 = v57 + v60++;
                v57 = v61 & v56;
                v59 = *(_QWORD *)(v54 + 16 * v57);
                if (v52 == v59)
                {
                  v58 = (uint64_t *)(v54 + 16 * v57);
                  goto LABEL_87;
                }
              }
            }
            *(_BYTE *)(v52 + 17) &= ~1u;
          }
        }
      }
      v22 = v64;
    }
    *((_QWORD *)a4 + 2) = v22;
    if (v22 != (int32x2_t ****)-4096 && v22 != (int32x2_t ****)-8192 && v22 != 0)
    {
      v31 = v62;
      v32 = (_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8);
      *((_QWORD *)a4 + 1) = *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8);
      *v32 = a4;
      *(_QWORD *)a4 = v31 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)a4 & 7;
      v33 = (unint64_t *)*((_QWORD *)a4 + 1);
      if (v33)
        *v33 = *v33 & 7 | ((unint64_t)a4 + 8);
    }
  }
  v34 = v66;
  *(_OWORD *)((char *)a4 + 24) = v65;
  *(_OWORD *)((char *)a4 + 40) = v34;
  v35 = v67;
  if (&v62 != (uint64_t *)a4)
  {
    if (v67 != v69)
    {
      if (*((llvm::ScalarEvolution **)a4 + 7) != (llvm::ScalarEvolution *)((char *)a4 + 72))
      {
        free(*((void **)a4 + 7));
        v35 = v67;
      }
      *((_QWORD *)a4 + 7) = v35;
      *((_QWORD *)a4 + 8) = v68;
      v67 = v69;
      HIDWORD(v68) = 0;
      goto LABEL_59;
    }
    v36 = (void **)((char *)a4 + 56);
    v37 = v68;
    v38 = *((unsigned int *)a4 + 16);
    if (v38 >= v68)
    {
      if ((_DWORD)v68)
        memmove(*v36, v69, 8 * v68);
      goto LABEL_58;
    }
    if (*((_DWORD *)a4 + 17) < v68)
    {
      *((_DWORD *)a4 + 16) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4 + 56, (uint64_t)a4 + 72, v37, 8);
    }
    else if ((_DWORD)v38)
    {
      memmove(*v36, v69, 8 * v38);
LABEL_56:
      if (v38 != v68)
        memcpy((char *)*v36 + 8 * v38, (char *)v67 + 8 * v38, 8 * v68 - 8 * v38);
LABEL_58:
      *((_DWORD *)a4 + 16) = v37;
LABEL_59:
      LODWORD(v68) = 0;
      v35 = v67;
      goto LABEL_60;
    }
    v38 = 0;
    goto LABEL_56;
  }
LABEL_60:
  if (v35 != v69)
    free(v35);
  if (v64 && v64 != (int32x2_t ****)-8192 && v64 != (int32x2_t ****)-4096)
  {
    v39 = v62 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8) = v63;
    if (v63)
    {
      *v63 = *v63 & 7 | v39;
    }
    else
    {
      v40 = v64;
      v41 = ***v64;
      v42 = (unint64_t)v41[303];
      if (v42 <= v39)
      {
        v43 = v41[305].u32[0];
        if (v42 + 16 * v43 > v39)
        {
          v44 = v43 - 1;
          LODWORD(v45) = v44 & ((v64 >> 4) ^ (v64 >> 9));
          v46 = (int32x2_t *****)(v42 + 16 * v45);
          v47 = *v46;
          if (v64 == *v46)
          {
LABEL_73:
            *v46 = (int32x2_t ****)-8192;
            v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
            v40 = v64;
          }
          else
          {
            v48 = 1;
            while (v47 != (int32x2_t ****)-4096)
            {
              v49 = v45 + v48++;
              v45 = v49 & v44;
              v47 = *(int32x2_t *****)(v42 + 16 * v45);
              if (v64 == v47)
              {
                v46 = (int32x2_t *****)(v42 + 16 * v45);
                goto LABEL_73;
              }
            }
          }
          *((_BYTE *)v40 + 17) &= ~1u;
        }
      }
    }
  }
  return 1;
}

uint64_t llvm::InductionDescriptor::isInductionPHI(llvm::InductionDescriptor *this, llvm::PHINode *a2, const llvm::Loop **a3, llvm::PredicatedScalarEvolution *a4, llvm::InductionDescriptor *a5)
{
  uint64_t v5;
  unsigned int v6;
  llvm::PredicatedScalarEvolution *v8;
  int v13;
  uint64_t SCEV;
  uint64_t v15;
  const llvm::SCEVAddRecExpr *AsAddRec;
  uint64_t v18;
  uint64_t v19;
  uint64_t LoopLatch;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const llvm::SCEVAddRecExpr *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _BOOL4 isLoopInvariant;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (v6 > 0xF || ((1 << v6) & 0xA00D) == 0)
    goto LABEL_39;
  v8 = a4;
  if (v6 <= 6)
    return llvm::InductionDescriptor::isFPInductionPHI(this, a2, a3[11], a4, a5);
  v13 = (int)a5;
  SCEV = llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)a3, this);
  v15 = SCEV;
  if (*(_WORD *)(SCEV + 24) == 7)
    AsAddRec = (const llvm::SCEVAddRecExpr *)SCEV;
  else
    AsAddRec = 0;
  if (v13 && !AsAddRec)
    AsAddRec = (const llvm::SCEVAddRecExpr *)llvm::PredicatedScalarEvolution::getAsAddRec((int8x16_t *)a3, this);
  if (!AsAddRec)
  {
LABEL_39:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  if ((const llvm::SCEVAddRecExpr *)v15 != AsAddRec && *(_WORD *)(v15 + 24) == 14)
  {
    v39 = v41;
    v40 = 0x200000000;
    v18 = *(_QWORD *)(v15 - 8);
    v19 = *((_QWORD *)AsAddRec + 6);
    LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v19);
    v38 = (uint64_t)v8;
    if (!LoopLatch)
      goto LABEL_34;
    v21 = *(_DWORD *)(v18 + 20);
    v22 = v21 & 0x7FFFFFF;
    if ((v21 & 0x7FFFFFF) != 0)
    {
      v23 = 0;
      while (1)
      {
        v24 = v18 - 32 * v22;
        if ((v21 & 0x40000000) != 0)
          v24 = *(_QWORD *)(v18 - 8);
        if (*(_QWORD *)(v24 + 32 * *(unsigned int *)(v18 + 60) + 8 * v23) == LoopLatch)
          break;
        if (v22 == ++v23)
          goto LABEL_26;
      }
    }
    else
    {
LABEL_26:
      LODWORD(v23) = -1;
    }
    v25 = (v21 & 0x40000000) != 0 ? *(_QWORD *)(v18 - 8) : v18 - 32 * v22;
    v26 = *(unsigned __int8 **)(v25 + 32 * v23);
    if (!v26 || v26 == (unsigned __int8 *)v18)
    {
LABEL_34:
      v28 = 0;
LABEL_35:
      if (v39 != v41)
        free(v39);
      v8 = (llvm::PredicatedScalarEvolution *)v38;
      if ((v28 & 1) != 0)
        return v5 & 1;
      goto LABEL_38;
    }
    v29 = 0;
    if (v26[16] <= 0x1Bu)
      v5 = 0;
    else
      v5 = *(_QWORD *)(v25 + 32 * v23);
    while (1)
    {
      if (!v5)
        goto LABEL_34;
      v30 = sub_1C477672C(v19 + 56, *(_QWORD *)(v5 + 40));
      v31 = *(_QWORD *)(v19 + 64);
      v32 = 72;
      if (v31 == *(_QWORD *)(v19 + 56))
        v32 = 76;
      if (v30 == (_QWORD *)(v31 + 8 * *(unsigned int *)(v19 + v32)))
        goto LABEL_34;
      v33 = (const llvm::SCEVAddRecExpr *)llvm::PredicatedScalarEvolution::getSCEV((int8x16_t *)a3, (llvm::Value *)v26);
      if (v33 && *((_WORD *)v33 + 12) == 7)
      {
        if (((v29 | llvm::PredicatedScalarEvolution::areAddRecsEqualWithPreds((uint64_t **)a3, v33, AsAddRec)) & 1) != 0)
        {
LABEL_51:
          v34 = v40;
          if ((_DWORD)v40)
          {
            v35 = *(_QWORD *)(v5 + 8);
            if (!v35 || *(_QWORD *)(v35 + 8))
              goto LABEL_34;
          }
          if (v40 >= (unint64_t)HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
            v34 = v40;
          }
          *((_QWORD *)v39 + v34) = v5;
          LODWORD(v40) = v40 + 1;
          v29 = 1;
          goto LABEL_59;
        }
      }
      else if ((v29 & 1) != 0)
      {
        goto LABEL_51;
      }
      v29 = 0;
LABEL_59:
      v28 = 0;
      v36 = v26[16];
      if (v36 < 0x1C || v36 - 59 < 0xFFFFFFEE)
        goto LABEL_35;
      v5 = *((_QWORD *)v26 - 8);
      v26 = (unsigned __int8 *)*((_QWORD *)v26 - 4);
      if (!llvm::Loop::isLoopInvariant(v19, v5))
      {
        isLoopInvariant = llvm::Loop::isLoopInvariant(v19, (uint64_t)v26);
        v26 = (unsigned __int8 *)v5;
        if (!isLoopInvariant)
          goto LABEL_34;
      }
      if (!v26)
        goto LABEL_34;
      if (v26[16] <= 0x1Bu)
        v5 = 0;
      else
        v5 = (uint64_t)v26;
      if (v26 == (unsigned __int8 *)v18)
      {
        if (!v29)
          goto LABEL_34;
        LOBYTE(v5) = llvm::InductionDescriptor::isInductionPHI((unint64_t)this, a2, (uint64_t)a3[11], v38, (uint64_t)AsAddRec, (uint64_t)&v39);
        v28 = 1;
        goto LABEL_35;
      }
    }
  }
LABEL_38:
  LOBYTE(v5) = llvm::InductionDescriptor::isInductionPHI((unint64_t)this, a2, (uint64_t)a3[11], (uint64_t)v8, (uint64_t)AsAddRec, 0);
  return v5 & 1;
}

