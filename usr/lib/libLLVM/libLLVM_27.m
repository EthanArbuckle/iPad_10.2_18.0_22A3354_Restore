void sub_1C5311B88(char ***a1, uint64_t ***a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  char **v6;
  uint64_t **v7;
  char **v8;
  char *v9;
  int v10;
  char **v11;
  char *v12;
  char **v13;
  const char *p_p;
  size_t v15;
  int v16;
  char **v17;
  char *v18;
  const char *v19;
  size_t v20;
  char *v21;
  int v22;
  char **v23;
  char *v24;
  const char *v25;
  const char *v26;
  size_t v27;
  char **v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char **v33;
  char *v34;
  char *v35;
  char **v36;
  char *v37;
  char **v38;
  const char *v39;
  size_t v40;
  char *v41;
  char **v42;
  char *v43;
  char **v44;
  char *v45;
  llvm::raw_ostream *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD ***v54;
  char **v55;
  char *v56;
  char **v57;
  char *v58;
  llvm::raw_ostream *Partition;
  uint64_t v60;
  char **v61;
  char *v62;
  char v63;
  llvm::raw_ostream *v64;
  char *v65;
  uint64_t v66;
  char **v67;
  char *v68;
  int AttributeGroupSlot;
  unint64_t v70;
  llvm::raw_ostream *v71;
  int v72;
  _QWORD *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  const char *v80;
  _QWORD v81[4];
  void *__p;
  uint64_t v83;
  _BYTE v84[7];
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (a2 && !*((_BYTE *)a2 + 16) && (*((_BYTE *)a2 + 34) & 0x80) != 0)
  {
    v4 = (llvm::raw_ostream *)*a1;
    v5 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v5) > 0x10)
    {
      v5[16] = 10;
      *(_OWORD *)v5 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  v6 = a1[4];
  v7 = a2[5];
  v81[0] = off_1E814DD30;
  v81[1] = a1 + 5;
  v81[2] = v6;
  v81[3] = v7;
  sub_1C5319F38(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v81);
  v8 = *a1;
  v9 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v9) > 2)
  {
    v9[2] = 32;
    *(_WORD *)v9 = 15648;
    v8[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v8, " = ", 3uLL);
  }
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) != 3 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_17;
    v10 = *((_DWORD *)a2 + 8);
  }
  else
  {
    if (a2[9] != (uint64_t **)(a2 + 9))
      goto LABEL_17;
    v10 = *((_DWORD *)a2 + 8);
    if ((v10 & 0x800000) != 0)
      goto LABEL_17;
  }
  if ((v10 & 0xF) == 0)
  {
    v11 = *a1;
    v12 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v12) > 8)
    {
      v12[8] = 32;
      *(_QWORD *)v12 = *(_QWORD *)"external ";
      v11[4] += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v11, "external ", 9uLL);
    }
  }
LABEL_17:
  v13 = *a1;
  sub_1C53192E8((uint64_t)&__p, (_DWORD)a2[4] & 0xF);
  if (v85 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (v85 >= 0)
    v15 = v85 & 0x7F;
  else
    v15 = v83;
  llvm::raw_ostream::write((llvm::raw_ostream *)v13, p_p, v15);
  if (v85 < 0)
    operator delete(__p);
  sub_1C531935C((llvm::raw_ostream *)a2, (llvm::raw_ostream *)*a1);
  v16 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  v17 = *a1;
  if (v16 == 2)
  {
    v21 = v17[4];
    if ((unint64_t)(v17[3] - v21) <= 9)
    {
      v19 = "protected ";
      v20 = 10;
      goto LABEL_31;
    }
    *((_WORD *)v21 + 4) = 8292;
    *(_QWORD *)v21 = *(_QWORD *)"protected ";
    v79 = (uint64_t)(v17[4] + 10);
  }
  else
  {
    if (v16 != 1)
      goto LABEL_32;
    v18 = v17[4];
    if ((unint64_t)(v17[3] - v18) <= 6)
    {
      v19 = "hidden ";
      v20 = 7;
LABEL_31:
      llvm::raw_ostream::write((llvm::raw_ostream *)v17, v19, v20);
      goto LABEL_32;
    }
    *(_DWORD *)(v18 + 3) = 544105828;
    *(_DWORD *)v18 = 1684302184;
    v79 = (uint64_t)(v17[4] + 7);
  }
  v17[4] = (char *)v79;
LABEL_32:
  v22 = (*((_DWORD *)a2 + 8) >> 8) & 3;
  v23 = *a1;
  if (v22 == 2)
  {
    v24 = v23[4];
    if ((unint64_t)(v23[3] - v24) <= 9)
    {
      v25 = "dllexport ";
      goto LABEL_38;
    }
    v80 = "dllexport ";
  }
  else
  {
    if (v22 != 1)
      goto LABEL_39;
    v24 = v23[4];
    if ((unint64_t)(v23[3] - v24) <= 9)
    {
      v25 = "dllimport ";
LABEL_38:
      llvm::raw_ostream::write((llvm::raw_ostream *)v23, v25, 0xAuLL);
      goto LABEL_39;
    }
    v80 = "dllimport ";
  }
  *((_WORD *)v24 + 4) = 8308;
  *(_QWORD *)v24 = *(_QWORD *)v80;
  v23[4] += 10;
LABEL_39:
  sub_1C5322B30((llvm::raw_ostream *)((*((_DWORD *)a2 + 8) >> 10) & 7), (llvm::raw_ostream *)*a1);
  if (*((_DWORD *)a2 + 8) >> 6)
  {
    if (*((_DWORD *)a2 + 8) >> 6 == 1)
    {
      v26 = "local_unnamed_addr";
      v27 = 18;
    }
    else
    {
      v26 = "unnamed_addr";
      v27 = 12;
    }
    v28 = *a1;
    v29 = (*a1)[4];
    if (v27 <= (*a1)[3] - v29)
    {
      memcpy(v29, v26, v27);
      v30 = &v28[4][v27];
      v28[4] = v30;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, v26, v27);
      v30 = v28[4];
    }
    if (v30 >= v28[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v28, 32);
    }
    else
    {
      v28[4] = v30 + 1;
      *v30 = 32;
    }
  }
  v31 = *((unsigned int *)*a2 + 2);
  if (v31 >= 0x100)
  {
    v32 = v31 >> 8;
    v33 = *a1;
    v34 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v34) > 9)
    {
      *((_WORD *)v34 + 4) = 10341;
      *(_QWORD *)v34 = *(_QWORD *)"addrspace(";
      v33[4] += 10;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "addrspace(", 0xAuLL);
    }
    sub_1C5E21910((llvm::raw_ostream *)v33, v32, 0, 0, 0);
    v35 = v33[4];
    if ((unint64_t)(v33[3] - v35) > 1)
    {
      *(_WORD *)v35 = 8233;
      v33[4] += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v33, ") ", 2uLL);
    }
  }
  if (((_BYTE)a2[10] & 2) != 0)
  {
    v36 = *a1;
    v37 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v37) > 0x16)
    {
      qmemcpy(v37, "externally_initialized ", 23);
      v36[4] += 23;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v36, "externally_initialized ", 0x17uLL);
    }
  }
  v38 = *a1;
  if (((_BYTE)a2[10] & 1) != 0)
    v39 = "constant ";
  else
    v39 = "global ";
  if (((_BYTE)a2[10] & 1) != 0)
    v40 = 9;
  else
    v40 = 7;
  v41 = v38[4];
  if (v40 <= v38[3] - v41)
  {
    memcpy(v41, v39, v40);
    v38[4] += v40;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, v39, v40);
  }
  sub_1C530D7AC((uint64_t)(a1 + 5), (uint64_t)a2[3]);
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_75;
  }
  else if (a2[9] == (uint64_t **)(a2 + 9) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_75;
  }
  v42 = *a1;
  v43 = (*a1)[4];
  if (v43 >= (*a1)[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v42, 32);
  }
  else
  {
    v42[4] = v43 + 1;
    *v43 = 32;
  }
  sub_1C531AA44(a1, (llvm::detail::DoubleAPFloat *)*(a2 - 4), 0);
LABEL_75:
  if ((*((_BYTE *)a2 + 34) & 0x40) == 0)
    goto LABEL_86;
  v44 = *a1;
  v45 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v45) > 0xA)
  {
    *(_DWORD *)(v45 + 7) = 572550767;
    *(_QWORD *)v45 = *(_QWORD *)", section \"";
    v44[4] += 11;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v44, ", section \"", 0xBuLL);
  }
  if ((*((_BYTE *)a2 + 34) & 0x40) == 0)
  {
    v46 = 0;
    v47 = 0;
    goto LABEL_83;
  }
  v48 = ***a2;
  __p = a2;
  v49 = *(_DWORD *)(v48 + 2520);
  if (!v49)
  {
    v77 = 0;
LABEL_119:
    v53 = sub_1C53D65B8(v48 + 2504, (uint64_t)&__p, (uint64_t *)&__p, v77);
    v78 = __p;
    v53[1] = 0;
    v53[2] = 0;
    *v53 = v78;
    goto LABEL_82;
  }
  v50 = *(_QWORD *)(v48 + 2504);
  v51 = v49 - 1;
  v52 = v51 & ((a2 >> 4) ^ (a2 >> 9));
  v53 = (_QWORD *)(v50 + 24 * v52);
  v54 = (_QWORD ***)*v53;
  if ((uint64_t ***)*v53 != a2)
  {
    v73 = 0;
    v74 = 1;
    while (v54 != (_QWORD ***)-4096)
    {
      if (v73)
        v75 = 0;
      else
        v75 = v54 == (_QWORD ***)-8192;
      if (v75)
        v73 = v53;
      v76 = v52 + v74++;
      v52 = v76 & v51;
      v53 = (_QWORD *)(v50 + 24 * v52);
      v54 = (_QWORD ***)*v53;
      if ((uint64_t ***)*v53 == a2)
        goto LABEL_82;
    }
    if (v73)
      v77 = v73;
    else
      v77 = v53;
    goto LABEL_119;
  }
LABEL_82:
  v46 = (llvm::raw_ostream *)v53[1];
  v47 = v53[2];
LABEL_83:
  llvm::printEscapedString(v46, v47, (llvm::raw_ostream *)*a1);
  v55 = *a1;
  v56 = (*a1)[4];
  if (v56 >= (*a1)[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v55, 34);
  }
  else
  {
    v55[4] = v56 + 1;
    *v56 = 34;
  }
LABEL_86:
  if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
  {
    v57 = *a1;
    v58 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v58) > 0xC)
    {
      qmemcpy(v58, ", partition \"", 13);
      v57[4] += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v57, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v60, (llvm::raw_ostream *)*a1);
    v61 = *a1;
    v62 = (*a1)[4];
    if (v62 >= (*a1)[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v61, 34);
    }
    else
    {
      v61[4] = v62 + 1;
      *v62 = 34;
    }
  }
  sub_1C531A844((llvm::raw_ostream *)*a1, a2);
  if ((*((_WORD *)a2 + 17) & 0x3F) != 0)
  {
    v63 = (*((_WORD *)a2 + 17) & 0x3F) - 1;
    v64 = (llvm::raw_ostream *)*a1;
    v65 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v65) > 7)
    {
      *(_QWORD *)v65 = 0x206E67696C61202CLL;
      *((_QWORD *)v64 + 4) += 8;
    }
    else
    {
      v64 = llvm::raw_ostream::write(v64, ", align ", 8uLL);
    }
    sub_1C5E21910(v64, 1 << v63, 0, 0, 0);
  }
  __p = v84;
  v83 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&__p);
  sub_1C53190B8((uint64_t *)a1, &__p, ", ", 2uLL);
  v66 = (uint64_t)a2[9];
  if (v66)
  {
    v67 = *a1;
    v68 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v68) > 1)
    {
      *(_WORD *)v68 = 8992;
      v67[4] += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, " #", 2uLL);
    }
    AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v66);
    v70 = AttributeGroupSlot;
    if (AttributeGroupSlot < 0)
    {
      v70 = -(uint64_t)AttributeGroupSlot;
      v71 = (llvm::raw_ostream *)v67;
      v72 = 1;
    }
    else
    {
      v71 = (llvm::raw_ostream *)v67;
      v72 = 0;
    }
    sub_1C5E21910(v71, v70, 0, 0, v72);
  }
  sub_1C5322914(a1, (llvm::GCRelocateInst *)a2);
  if (__p != v84)
    free(__p);
}

char **sub_1C53124B8(char ***a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char **v6;
  uint64_t v7;
  char **v8;
  char *v9;
  char **v10;
  void **v11;
  size_t v12;
  int v13;
  char **v14;
  char *v15;
  const char *v16;
  size_t v17;
  char *v18;
  int v19;
  char **v20;
  char *v21;
  const char *v22;
  const char *v23;
  size_t v24;
  char **v25;
  char *v26;
  char *v27;
  char **v28;
  char *v29;
  char **v30;
  char *v31;
  unsigned __int8 *v32;
  char **v33;
  char *v34;
  char **v35;
  char *v36;
  llvm::raw_ostream *Partition;
  uint64_t v38;
  char **v39;
  char *v40;
  char **result;
  char *v42;
  uint64_t v43;
  const char *v44;
  void *__p[2];
  char v46;
  _QWORD v47[4];

  if (a2 && !*(_BYTE *)(a2 + 16) && (*(_BYTE *)(a2 + 34) & 0x80) != 0)
  {
    v4 = *a1;
    v5 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v5) > 0x10)
    {
      v5[16] = 10;
      *(_OWORD *)v5 = *(_OWORD *)"; Materializable\n";
      v4[4] += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v4, "; Materializable\n", 0x11uLL);
    }
  }
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 40);
  v47[0] = off_1E814DD30;
  v47[1] = a1 + 5;
  v47[2] = v6;
  v47[3] = v7;
  sub_1C5319F38(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v47);
  v8 = *a1;
  v9 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v9) > 2)
  {
    v9[2] = 32;
    *(_WORD *)v9 = 15648;
    v8[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v8, " = ", 3uLL);
  }
  v10 = *a1;
  sub_1C53192E8((uint64_t)__p, *(_DWORD *)(a2 + 32) & 0xF);
  if (v46 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v46 >= 0)
    v12 = v46 & 0x7F;
  else
    v12 = (size_t)__p[1];
  llvm::raw_ostream::write((llvm::raw_ostream *)v10, (const char *)v11, v12);
  if (v46 < 0)
    operator delete(__p[0]);
  sub_1C531935C((llvm::raw_ostream *)a2, (llvm::raw_ostream *)*a1);
  v13 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
  v14 = *a1;
  if (v13 == 2)
  {
    v18 = v14[4];
    if ((unint64_t)(v14[3] - v18) <= 9)
    {
      v16 = "protected ";
      v17 = 10;
      goto LABEL_22;
    }
    *((_WORD *)v18 + 4) = 8292;
    *(_QWORD *)v18 = *(_QWORD *)"protected ";
    v43 = (uint64_t)(v14[4] + 10);
  }
  else
  {
    if (v13 != 1)
      goto LABEL_23;
    v15 = v14[4];
    if ((unint64_t)(v14[3] - v15) <= 6)
    {
      v16 = "hidden ";
      v17 = 7;
LABEL_22:
      llvm::raw_ostream::write((llvm::raw_ostream *)v14, v16, v17);
      goto LABEL_23;
    }
    *(_DWORD *)(v15 + 3) = 544105828;
    *(_DWORD *)v15 = 1684302184;
    v43 = (uint64_t)(v14[4] + 7);
  }
  v14[4] = (char *)v43;
LABEL_23:
  v19 = (*(_DWORD *)(a2 + 32) >> 8) & 3;
  v20 = *a1;
  if (v19 == 2)
  {
    v21 = v20[4];
    if ((unint64_t)(v20[3] - v21) <= 9)
    {
      v22 = "dllexport ";
      goto LABEL_29;
    }
    v44 = "dllexport ";
  }
  else
  {
    if (v19 != 1)
      goto LABEL_30;
    v21 = v20[4];
    if ((unint64_t)(v20[3] - v21) <= 9)
    {
      v22 = "dllimport ";
LABEL_29:
      llvm::raw_ostream::write((llvm::raw_ostream *)v20, v22, 0xAuLL);
      goto LABEL_30;
    }
    v44 = "dllimport ";
  }
  *((_WORD *)v21 + 4) = 8308;
  *(_QWORD *)v21 = *(_QWORD *)v44;
  v20[4] += 10;
LABEL_30:
  sub_1C5322B30((llvm::raw_ostream *)((*(_DWORD *)(a2 + 32) >> 10) & 7), (llvm::raw_ostream *)*a1);
  if (*(_DWORD *)(a2 + 32) >> 6)
  {
    if (*(_DWORD *)(a2 + 32) >> 6 == 1)
    {
      v23 = "local_unnamed_addr";
      v24 = 18;
    }
    else
    {
      v23 = "unnamed_addr";
      v24 = 12;
    }
    v25 = *a1;
    v26 = (*a1)[4];
    if (v24 <= (*a1)[3] - v26)
    {
      memcpy(v26, v23, v24);
      v27 = &v25[4][v24];
      v25[4] = v27;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)*a1, v23, v24);
      v27 = v25[4];
    }
    if (v27 >= v25[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v25, 32);
    }
    else
    {
      v25[4] = v27 + 1;
      *v27 = 32;
    }
  }
  v28 = *a1;
  v29 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v29) > 5)
  {
    *((_WORD *)v29 + 2) = 8307;
    *(_DWORD *)v29 = 1634298977;
    v28[4] += 6;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v28, "alias ", 6uLL);
  }
  sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)(a2 + 24));
  v30 = *a1;
  v31 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v31) > 1)
  {
    *(_WORD *)v31 = 8236;
    v30[4] += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v30, ", ", 2uLL);
  }
  v32 = *(unsigned __int8 **)(a2 - 32);
  if (v32)
  {
    sub_1C531AA44(a1, (llvm::detail::DoubleAPFloat *)v32, v32[16] != 5);
  }
  else
  {
    sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)a2);
    v33 = *a1;
    v34 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v34) > 0x10)
    {
      v34[16] = 62;
      *(_OWORD *)v34 = *(_OWORD *)" <<NULL ALIASEE>>";
      v33[4] += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v33, " <<NULL ALIASEE>>", 0x11uLL);
    }
  }
  if ((*(_BYTE *)(a2 + 33) & 0x80) != 0)
  {
    v35 = *a1;
    v36 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v36) > 0xC)
    {
      qmemcpy(v36, ", partition \"", 13);
      v35[4] += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v35, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v38, (llvm::raw_ostream *)*a1);
    v39 = *a1;
    v40 = (*a1)[4];
    if (v40 >= (*a1)[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v39, 34);
    }
    else
    {
      v39[4] = v40 + 1;
      *v40 = 34;
    }
  }
  sub_1C5322914(a1, (llvm::GCRelocateInst *)a2);
  result = *a1;
  v42 = (*a1)[4];
  if (v42 >= (*a1)[3])
    return (char **)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
  result[4] = v42 + 1;
  *v42 = 10;
  return result;
}

char **sub_1C53129D0(char ***a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char **v6;
  uint64_t v7;
  char **v8;
  char *v9;
  char **v10;
  void **v11;
  size_t v12;
  int v13;
  char **v14;
  char *v15;
  const char *v16;
  size_t v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  unsigned __int8 *v23;
  char **v24;
  char *v25;
  char **v26;
  char *v27;
  llvm::raw_ostream *Partition;
  uint64_t v29;
  char **v30;
  char *v31;
  char **result;
  char *v33;
  uint64_t v34;
  void *__p[2];
  char v36;
  _QWORD v37[4];

  if (a2 && !*(_BYTE *)(a2 + 16) && (*(_BYTE *)(a2 + 34) & 0x80) != 0)
  {
    v4 = *a1;
    v5 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v5) > 0x10)
    {
      v5[16] = 10;
      *(_OWORD *)v5 = *(_OWORD *)"; Materializable\n";
      v4[4] += 17;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v4, "; Materializable\n", 0x11uLL);
    }
  }
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 40);
  v37[0] = off_1E814DD30;
  v37[1] = a1 + 5;
  v37[2] = v6;
  v37[3] = v7;
  sub_1C5319F38(*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v37);
  v8 = *a1;
  v9 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v9) > 2)
  {
    v9[2] = 32;
    *(_WORD *)v9 = 15648;
    v8[4] += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v8, " = ", 3uLL);
  }
  v10 = *a1;
  sub_1C53192E8((uint64_t)__p, *(_DWORD *)(a2 + 32) & 0xF);
  if (v36 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v36 >= 0)
    v12 = v36 & 0x7F;
  else
    v12 = (size_t)__p[1];
  llvm::raw_ostream::write((llvm::raw_ostream *)v10, (const char *)v11, v12);
  if (v36 < 0)
    operator delete(__p[0]);
  sub_1C531935C((llvm::raw_ostream *)a2, (llvm::raw_ostream *)*a1);
  v13 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
  v14 = *a1;
  if (v13 == 2)
  {
    v18 = v14[4];
    if ((unint64_t)(v14[3] - v18) <= 9)
    {
      v16 = "protected ";
      v17 = 10;
      goto LABEL_22;
    }
    *((_WORD *)v18 + 4) = 8292;
    *(_QWORD *)v18 = *(_QWORD *)"protected ";
    v34 = (uint64_t)(v14[4] + 10);
  }
  else
  {
    if (v13 != 1)
      goto LABEL_23;
    v15 = v14[4];
    if ((unint64_t)(v14[3] - v15) <= 6)
    {
      v16 = "hidden ";
      v17 = 7;
LABEL_22:
      llvm::raw_ostream::write((llvm::raw_ostream *)v14, v16, v17);
      goto LABEL_23;
    }
    *(_DWORD *)(v15 + 3) = 544105828;
    *(_DWORD *)v15 = 1684302184;
    v34 = (uint64_t)(v14[4] + 7);
  }
  v14[4] = (char *)v34;
LABEL_23:
  v19 = *a1;
  v20 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v20) > 5)
  {
    *((_WORD *)v20 + 2) = 8291;
    *(_DWORD *)v20 = 1853187689;
    v19[4] += 6;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v19, "ifunc ", 6uLL);
  }
  sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)(a2 + 24));
  v21 = *a1;
  v22 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v22) > 1)
  {
    *(_WORD *)v22 = 8236;
    v21[4] += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v21, ", ", 2uLL);
  }
  v23 = *(unsigned __int8 **)(a2 - 32);
  if (v23)
  {
    sub_1C531AA44(a1, (llvm::detail::DoubleAPFloat *)v23, v23[16] != 5);
  }
  else
  {
    sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)a2);
    v24 = *a1;
    v25 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v25) > 0x11)
    {
      *((_WORD *)v25 + 8) = 15934;
      *(_OWORD *)v25 = *(_OWORD *)" <<NULL RESOLVER>>";
      v24[4] += 18;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v24, " <<NULL RESOLVER>>", 0x12uLL);
    }
  }
  if ((*(_BYTE *)(a2 + 33) & 0x80) != 0)
  {
    v26 = *a1;
    v27 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v27) > 0xC)
    {
      qmemcpy(v27, ", partition \"", 13);
      v26[4] += 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v26, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v29, (llvm::raw_ostream *)*a1);
    v30 = *a1;
    v31 = (*a1)[4];
    if (v31 >= (*a1)[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v30, 34);
    }
    else
    {
      v30[4] = v31 + 1;
      *v31 = 34;
    }
  }
  sub_1C5322914(a1, (llvm::GCRelocateInst *)a2);
  result = *a1;
  v33 = (*a1)[4];
  if (v33 >= (*a1)[3])
    return (char **)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
  result[4] = v33 + 1;
  *v33 = 10;
  return result;
}

void sub_1C5312DB0(int **this, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  int v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  void *v10;
  size_t v11;
  llvm::detail::DoubleAPFloat *v12;
  void *v13;
  _BYTE *v15;
  char *v16;
  int *v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  char v23;
  int *v24;
  _WORD *v25;
  _BYTE *v26;
  int v27;
  unint64_t v28;
  double v29;
  double v30;
  _BYTE *v31;
  int *v32;
  const char *v33;
  size_t v34;
  char v35;
  int v36;
  _BOOL4 v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  char *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  char **v46;
  char **v47;
  unint64_t v48;
  _BYTE *v49;
  char **v50;
  char *v51;
  char v52;
  char **v53;
  char **v54;
  int *v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  char **v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  int *v63;
  llvm::raw_ostream *v64;
  char v65;
  char *v66;
  char v67;
  char **v68;
  char **v69;
  uint64_t v70;
  char *v71;
  llvm::raw_ostream *RawDataValues;
  uint64_t v73;
  char *v74;
  char v75;
  uint64_t v76;
  int *v77;
  _BYTE *v78;
  int v79;
  int v80;
  char *v81;
  _WORD *v82;
  _BYTE *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  _BYTE *v88;
  llvm::APFloatBase *ElementAsConstant;
  int v90;
  llvm::raw_ostream *v91;
  char v92;
  int i;
  _WORD *v94;
  _BYTE *v95;
  llvm::APFloatBase *v96;
  uint64_t v97;
  _BYTE *v98;
  int v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  char *v104;
  _WORD *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  llvm::UndefValue *AggregateElement;
  int v111;
  uint64_t v112;
  _WORD *v113;
  _BYTE *v114;
  llvm::UndefValue *v115;
  int *v116;
  int *v117;
  int *v118;
  const char *OpcodeName;
  size_t v120;
  void *v121;
  _BYTE *v122;
  char **v123;
  char *v124;
  int v125;
  char **v126;
  unint64_t *v127;
  char v128;
  unint64_t v129;
  char **v130;
  int v131;
  int *v132;
  size_t v133;
  const char *PredicateName;
  size_t v135;
  uint64_t v136;
  _WORD *v137;
  unsigned int v138;
  BOOL v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _BYTE *v144;
  _WORD *v145;
  int v146;
  uint64_t v147;
  unsigned int *v148;
  uint64_t v149;
  unint64_t v150;
  _WORD *v151;
  _DWORD *v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  unint64_t v161;
  double v162;
  char **v163;
  unsigned int v164;
  char v165;
  char *v166;
  _DWORD *v167;
  uint64_t v168;
  int v169;
  char v170;
  char *v171;
  unint64_t v172[2];
  int v173;
  char v174;
  uint64_t v175;

  v5 = (llvm::raw_ostream *)this;
  v175 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v6 == 16)
  {
    v7 = (_QWORD *)((char *)a2 + 24);
    if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
    {
      if (*((_DWORD *)a2 + 8) >= 0x41u)
        v7 = (_QWORD *)*v7;
      if (*v7)
        v8 = "true";
      else
        v8 = "false";
      if (*v7)
        v9 = 4;
      else
        v9 = 5;
      v10 = (void *)*((_QWORD *)v5 + 4);
      if (v9 > *((_QWORD *)v5 + 3) - (_QWORD)v10)
      {
        this = (int **)v5;
        v11 = v9;
LABEL_30:
        llvm::raw_ostream::write((llvm::raw_ostream *)this, v8, v11);
        return;
      }
      memcpy(v10, v8, v9);
      v76 = *((_QWORD *)v5 + 4) + v9;
      goto LABEL_171;
    }
    v171 = (char *)&v173;
    *(_OWORD *)v172 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)v7, &v171, 0xAu, 1, 0);
    llvm::raw_ostream::write(v5, v171, v172[0]);
    v19 = v171;
    if (v171 != (char *)&v173)
    {
LABEL_117:
      free(v19);
      return;
    }
    return;
  }
  if (!a2 || v6 != 17)
  {
    if (v6 == 18 || v6 == 13)
    {
      v18 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v18) <= 0xE)
      {
        v8 = "zeroinitializer";
        v11 = 15;
        goto LABEL_30;
      }
      qmemcpy(v18, "zeroinitializer", 15);
      v76 = (uint64_t)this[4] + 15;
      goto LABEL_171;
    }
    if (a2 && v6 == 4)
    {
      v24 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v24) > 0xC)
      {
        qmemcpy(v24, "blockaddress(", 13);
        this[4] = (int *)((char *)this[4] + 13);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, "blockaddress(", 0xDuLL);
      }
      sub_1C5319F38(v5, *((llvm::detail::DoubleAPFloat **)a2 - 8));
      v25 = (_WORD *)*((_QWORD *)v5 + 4);
      if (*((_QWORD *)v5 + 3) - (_QWORD)v25 > 1uLL)
      {
        *v25 = 8236;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ", ", 2uLL);
      }
      sub_1C5319F38(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4));
      v26 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) == v26)
      {
        v8 = ")";
        this = (int **)v5;
        v11 = 1;
        goto LABEL_30;
      }
      *v26 = 41;
      v76 = *((_QWORD *)v5 + 4) + 1;
LABEL_171:
      *((_QWORD *)v5 + 4) = v76;
      return;
    }
    if (a2 && v6 == 6)
    {
      v32 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v32) <= 0x14)
      {
        v33 = "dso_local_equivalent ";
        v34 = 21;
LABEL_122:
        llvm::raw_ostream::write((llvm::raw_ostream *)this, v33, v34);
LABEL_123:
        sub_1C5319F38(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4));
        return;
      }
      qmemcpy(v32, "dso_local_equivalent ", 21);
      v97 = (uint64_t)this[4] + 21;
      goto LABEL_278;
    }
    if (a2 && v6 == 7)
    {
      v55 = this[4];
      if ((unint64_t)((char *)this[3] - (char *)v55) <= 6)
      {
        v33 = "no_cfi ";
        v34 = 7;
        goto LABEL_122;
      }
      *(int *)((char *)v55 + 3) = 543778403;
      *v55 = 1667198830;
      v97 = (uint64_t)this[4] + 7;
LABEL_278:
      this[4] = (int *)v97;
      goto LABEL_123;
    }
    if (a2 && v6 == 8)
    {
      v62 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v63 = this[4];
      if (v63 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 91);
      }
      else
      {
        this[4] = (int *)((char *)v63 + 1);
        *(_BYTE *)v63 = 91;
      }
      sub_1C530D7AC(*(_QWORD *)(a3 + 8), v62);
      v78 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v78 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v78 + 1;
        *v78 = 32;
      }
      sub_1C5319F38(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      v79 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      v80 = v79 - 1;
      if (v79 != 1)
      {
        v81 = (char *)a2 + 32;
        do
        {
          v82 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v82 > 1uLL)
          {
            *v82 = 8236;
            *((_QWORD *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          sub_1C530D7AC(*(_QWORD *)(a3 + 8), v62);
          v83 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v83 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v83 + 1;
            *v83 = 32;
          }
          sub_1C5319F38(v5, *(llvm::detail::DoubleAPFloat **)&v81[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
          v81 += 32;
          --v80;
        }
        while (v80);
      }
    }
    else
    {
      if (!a2 || v6 != 14)
      {
        if (a2 && v6 == 9)
        {
          if ((*(_BYTE *)(*(_QWORD *)a2 + 9) & 2) != 0)
          {
            v77 = this[4];
            if (v77 >= this[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, 60);
            }
            else
            {
              this[4] = (int *)((char *)v77 + 1);
              *(_BYTE *)v77 = 60;
            }
          }
          v98 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v98 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 123);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v98 + 1;
            *v98 = 123;
          }
          v99 = *((_DWORD *)a2 + 5);
          v100 = v99 & 0x7FFFFFF;
          if ((v99 & 0x7FFFFFF) != 0)
          {
            v101 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v101 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v101 + 1;
              *v101 = 32;
            }
            sub_1C530D7AC(*(_QWORD *)(a3 + 8), **((_QWORD **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
            v102 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v102 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v102 + 1;
              *v102 = 32;
            }
            sub_1C5319F38(v5, *((llvm::detail::DoubleAPFloat **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
            if (v100 >= 2)
            {
              v103 = v100 - 1;
              v104 = (char *)a2 + 32;
              do
              {
                v105 = (_WORD *)*((_QWORD *)v5 + 4);
                if (*((_QWORD *)v5 + 3) - (_QWORD)v105 > 1uLL)
                {
                  *v105 = 8236;
                  *((_QWORD *)v5 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v5, ", ", 2uLL);
                }
                sub_1C530D7AC(*(_QWORD *)(a3 + 8), **(_QWORD **)&v104[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
                v106 = (_BYTE *)*((_QWORD *)v5 + 4);
                if ((unint64_t)v106 >= *((_QWORD *)v5 + 3))
                {
                  llvm::raw_ostream::write(v5, 32);
                }
                else
                {
                  *((_QWORD *)v5 + 4) = v106 + 1;
                  *v106 = 32;
                }
                sub_1C5319F38(v5, *(llvm::detail::DoubleAPFloat **)&v104[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)]);
                v104 += 32;
                --v103;
              }
              while (v103);
            }
            v107 = (_BYTE *)*((_QWORD *)v5 + 4);
            if ((unint64_t)v107 >= *((_QWORD *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((_QWORD *)v5 + 4) = v107 + 1;
              *v107 = 32;
            }
          }
          v108 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v108 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 125);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v108 + 1;
            *v108 = 125;
          }
          if ((*(_BYTE *)(*(_QWORD *)a2 + 9) & 2) == 0)
            return;
LABEL_255:
          v74 = (char *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v74 < *((_QWORD *)v5 + 3))
          {
            *((_QWORD *)v5 + 4) = v74 + 1;
            v75 = 62;
            goto LABEL_204;
          }
          v91 = v5;
          v92 = 62;
        }
        else
        {
          switch(*((_BYTE *)a2 + 16))
          {
            case 0xA:
            case 0xF:
              v85 = *(_QWORD *)a2;
              v86 = *(_QWORD *)(*(_QWORD *)a2 + 24);
              v87 = this[4];
              if (v87 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, 60);
              }
              else
              {
                this[4] = (int *)((char *)v87 + 1);
                *(_BYTE *)v87 = 60;
              }
              sub_1C530D7AC(*(_QWORD *)(a3 + 8), v86);
              v109 = (_BYTE *)*((_QWORD *)v5 + 4);
              if ((unint64_t)v109 >= *((_QWORD *)v5 + 3))
              {
                llvm::raw_ostream::write(v5, 32);
              }
              else
              {
                *((_QWORD *)v5 + 4) = v109 + 1;
                *v109 = 32;
              }
              AggregateElement = llvm::Constant::getAggregateElement(a2, 0);
              sub_1C5319F38(v5, AggregateElement);
              v111 = *(_DWORD *)(v85 + 32);
              if (v111 != 1)
              {
                v112 = 1;
                do
                {
                  v113 = (_WORD *)*((_QWORD *)v5 + 4);
                  if (*((_QWORD *)v5 + 3) - (_QWORD)v113 > 1uLL)
                  {
                    *v113 = 8236;
                    *((_QWORD *)v5 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v5, ", ", 2uLL);
                  }
                  sub_1C530D7AC(*(_QWORD *)(a3 + 8), v86);
                  v114 = (_BYTE *)*((_QWORD *)v5 + 4);
                  if ((unint64_t)v114 >= *((_QWORD *)v5 + 3))
                  {
                    llvm::raw_ostream::write(v5, 32);
                  }
                  else
                  {
                    *((_QWORD *)v5 + 4) = v114 + 1;
                    *v114 = 32;
                  }
                  v115 = llvm::Constant::getAggregateElement(a2, (llvm::Type *)v112);
                  sub_1C5319F38(v5, v115);
                  v112 = (v112 + 1);
                }
                while (v111 != (_DWORD)v112);
              }
              goto LABEL_255;
            case 0xC:
              v117 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v117) <= 5)
              {
                v8 = "poison";
                v11 = 6;
                goto LABEL_30;
              }
              *((_WORD *)v117 + 2) = 28271;
              *v117 = 1936289648;
              v76 = (uint64_t)this[4] + 6;
              goto LABEL_171;
            case 0x13:
              v118 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v118) <= 3)
              {
                v8 = "null";
                goto LABEL_276;
              }
              v157 = 1819047278;
              goto LABEL_361;
            case 0x14:
              v118 = this[4];
              if ((unint64_t)((char *)this[3] - (char *)v118) <= 3)
              {
                v8 = "none";
LABEL_276:
                v11 = 4;
                goto LABEL_30;
              }
              v157 = 1701736302;
LABEL_361:
              *v118 = v157;
              v76 = (uint64_t)(this[4] + 1);
              goto LABEL_171;
            default:
              if ((v6 - 11) <= 1)
              {
                v116 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v116) <= 4)
                {
                  v8 = "undef";
                  v11 = 5;
                  goto LABEL_30;
                }
                *((_BYTE *)v116 + 4) = 102;
                *v116 = 1701080693;
                v76 = (uint64_t)this[4] + 5;
                goto LABEL_171;
              }
              if (!a2 || v6 != 5)
              {
                v132 = this[4];
                if ((unint64_t)((char *)this[3] - (char *)v132) <= 0x22)
                {
                  v8 = "<placeholder or erroneous Constant>";
                  v11 = 35;
                  goto LABEL_30;
                }
                qmemcpy(v132, "<placeholder or erroneous Constant>", 35);
                v76 = (uint64_t)this[4] + 35;
                goto LABEL_171;
              }
              OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)a2 + 9));
              v120 = strlen(OpcodeName);
              v121 = (void *)*((_QWORD *)v5 + 4);
              if (v120 <= *((_QWORD *)v5 + 3) - (_QWORD)v121)
              {
                if (v120)
                {
                  memcpy(v121, OpcodeName, v120);
                  *((_QWORD *)v5 + 4) += v120;
                }
              }
              else
              {
                llvm::raw_ostream::write(v5, OpcodeName, v120);
              }
              sub_1C5321CBC(v5, (uint64_t)a2);
              v122 = (_BYTE *)*((_QWORD *)v5 + 4);
              if (*((unsigned __int16 *)a2 + 9) - 53 <= 1)
              {
                if ((unint64_t)v122 >= *((_QWORD *)v5 + 3))
                {
                  llvm::raw_ostream::write(v5, 32);
                }
                else
                {
                  *((_QWORD *)v5 + 4) = v122 + 1;
                  *v122 = 32;
                }
                PredicateName = llvm::CmpInst::getPredicateName(*((unsigned __int16 *)a2 + 12));
                v135 = v133;
                v122 = (_BYTE *)*((_QWORD *)v5 + 4);
                if (v133 <= *((_QWORD *)v5 + 3) - (_QWORD)v122)
                {
                  if (v133)
                  {
                    memcpy(v122, PredicateName, v133);
                    v122 = (_BYTE *)(*((_QWORD *)v5 + 4) + v135);
                    *((_QWORD *)v5 + 4) = v122;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v5, PredicateName, v133);
                  v122 = (_BYTE *)*((_QWORD *)v5 + 4);
                }
              }
              if (*((_QWORD *)v5 + 3) - (_QWORD)v122 > 1uLL)
              {
                *(_WORD *)v122 = 10272;
                *((_QWORD *)v5 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v5, " (", 2uLL);
              }
              if (*((_WORD *)a2 + 9) == 34)
              {
                v136 = 24;
                if (*((_BYTE *)a2 + 16) == 62)
                  v136 = 64;
                sub_1C530D7AC(*(_QWORD *)(a3 + 8), *(_QWORD *)((char *)a2 + v136));
                v137 = (_WORD *)*((_QWORD *)v5 + 4);
                if (*((_QWORD *)v5 + 3) - (_QWORD)v137 > 1uLL)
                {
                  *v137 = 8236;
                  *((_QWORD *)v5 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v5, ", ", 2uLL);
                }
                v138 = *((unsigned __int8 *)a2 + 17);
                v139 = v138 < 4;
                v140 = v138 >> 2;
              }
              else
              {
                v140 = 0;
                v139 = 1;
              }
              v141 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
              if (!(_DWORD)v141)
                goto LABEL_336;
              v142 = -32 * v141;
              if (!v139)
                goto LABEL_323;
              while (1)
              {
                sub_1C530D7AC(*(_QWORD *)(a3 + 8), **(_QWORD **)((char *)a2 + v142));
                v144 = (_BYTE *)*((_QWORD *)v5 + 4);
                if ((unint64_t)v144 >= *((_QWORD *)v5 + 3))
                {
                  llvm::raw_ostream::write(v5, 32);
                }
                else
                {
                  *((_QWORD *)v5 + 4) = v144 + 1;
                  *v144 = 32;
                }
                sub_1C5319F38(v5, *(llvm::detail::DoubleAPFloat **)((char *)a2 + v142));
                if (v142 == -32)
                  break;
                v145 = (_WORD *)*((_QWORD *)v5 + 4);
                if (*((_QWORD *)v5 + 3) - (_QWORD)v145 > 1uLL)
                {
                  *v145 = 8236;
                  *((_QWORD *)v5 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v5, ", ", 2uLL);
                }
                v142 += 32;
                if (!v139)
                {
LABEL_323:
                  if (v140 == ((v142 + 32 * (unint64_t)(*((_DWORD *)a2 + 5) & 0x7FFFFFF)) >> 5))
                  {
                    v143 = (_QWORD *)*((_QWORD *)v5 + 4);
                    if (*((_QWORD *)v5 + 3) - (_QWORD)v143 > 7uLL)
                    {
                      *v143 = 0x2065676E61726E69;
                      *((_QWORD *)v5 + 4) += 8;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v5, "inrange ", 8uLL);
                    }
                  }
                }
              }
LABEL_336:
              v146 = *((unsigned __int16 *)a2 + 9);
              if ((v146 & 0xFFFE) == 0x40)
              {
                v147 = *((unsigned int *)a2 + 8);
                if ((_DWORD)v147)
                {
                  v148 = (unsigned int *)*((_QWORD *)a2 + 3);
                  v149 = 4 * v147;
                  do
                  {
                    v150 = *v148;
                    v151 = (_WORD *)*((_QWORD *)v5 + 4);
                    if (*((_QWORD *)v5 + 3) - (_QWORD)v151 > 1uLL)
                    {
                      *v151 = 8236;
                      *((_QWORD *)v5 + 4) += 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v5, ", ", 2uLL);
                    }
                    sub_1C5E21910(v5, v150, 0, 0, 0);
                    ++v148;
                    v149 -= 4;
                  }
                  while (v149);
                  v146 = *((unsigned __int16 *)a2 + 9);
                }
              }
              if ((v146 - 38) <= 0xC)
              {
                v152 = (_DWORD *)*((_QWORD *)v5 + 4);
                if (*((_QWORD *)v5 + 3) - (_QWORD)v152 > 3uLL)
                {
                  *v152 = 544175136;
                  *((_QWORD *)v5 + 4) += 4;
                }
                else
                {
                  llvm::raw_ostream::write(v5, " to ", 4uLL);
                }
                sub_1C530D7AC(*(_QWORD *)(a3 + 8), *(_QWORD *)a2);
                v146 = *((unsigned __int16 *)a2 + 9);
              }
              if (v146 == 63)
                sub_1C5322540(v5, *(_QWORD *)a2, *((int **)a2 + 3), *((unsigned int *)a2 + 8));
              v74 = (char *)*((_QWORD *)v5 + 4);
              if ((unint64_t)v74 < *((_QWORD *)v5 + 3))
              {
                *((_QWORD *)v5 + 4) = v74 + 1;
                v75 = 41;
                goto LABEL_204;
              }
              v91 = v5;
              v92 = 41;
              break;
          }
        }
        goto LABEL_206;
      }
      v70 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 17 && *(_DWORD *)(v70 + 8) == 2061)
      {
        v71 = (char *)this[4];
        if ((unint64_t)((char *)this[3] - v71) > 1)
        {
          *(_WORD *)v71 = 8803;
          this[4] = (int *)((char *)this[4] + 2);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)this, "c\"", 2uLL);
        }
        RawDataValues = (llvm::raw_ostream *)llvm::ConstantDataSequential::getRawDataValues(a2);
        llvm::printEscapedString(RawDataValues, v73, v5);
        v74 = (char *)*((_QWORD *)v5 + 4);
        if ((unint64_t)v74 < *((_QWORD *)v5 + 3))
        {
          *((_QWORD *)v5 + 4) = v74 + 1;
          v75 = 34;
LABEL_204:
          *v74 = v75;
          return;
        }
        v91 = v5;
        v92 = 34;
LABEL_206:
        llvm::raw_ostream::write(v91, v92);
        return;
      }
      v84 = this[4];
      if (v84 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 91);
      }
      else
      {
        this[4] = (int *)((char *)v84 + 1);
        *(_BYTE *)v84 = 91;
      }
      sub_1C530D7AC(*(_QWORD *)(a3 + 8), v70);
      v88 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v88 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v88 + 1;
        *v88 = 32;
      }
      ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(a2);
      sub_1C5319F38(v5, ElementAsConstant);
      v90 = *(_DWORD *)(*(_QWORD *)a2 + 32);
      if (v90 != 1)
      {
        for (i = 1; i != v90; ++i)
        {
          v94 = (_WORD *)*((_QWORD *)v5 + 4);
          if (*((_QWORD *)v5 + 3) - (_QWORD)v94 > 1uLL)
          {
            *v94 = 8236;
            *((_QWORD *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          sub_1C530D7AC(*(_QWORD *)(a3 + 8), v70);
          v95 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v95 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v95 + 1;
            *v95 = 32;
          }
          v96 = llvm::ConstantDataSequential::getElementAsConstant(a2);
          sub_1C5319F38(v5, v96);
        }
      }
    }
    v74 = (char *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v74 < *((_QWORD *)v5 + 3))
    {
      *((_QWORD *)v5 + 4) = v74 + 1;
      v75 = 93;
      goto LABEL_204;
    }
    v91 = v5;
    v92 = 93;
    goto LABEL_206;
  }
  v12 = (llvm::detail::DoubleAPFloat *)((char *)a2 + 32);
  v13 = (void *)*((_QWORD *)a2 + 4);
  if (v13 != &unk_1C866F184 && v13 != &unk_1C866F198)
  {
    v20 = (char *)this[4];
    if ((unint64_t)((char *)this[3] - v20) > 1)
    {
      *(_WORD *)v20 = 30768;
      this[4] = (int *)((char *)this[4] + 2);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "0x", 2uLL);
    }
    if (*(_UNKNOWN **)v12 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v12, (unsigned int *)&v166);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v12, (unsigned int *)&v166);
    v21 = *(void **)v12;
    if (*(_UNKNOWN **)v12 == &unk_1C866F1FC)
    {
      v31 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v31 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 75);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v31 + 1;
        *v31 = 75;
      }
      llvm::APInt::getHiBits((llvm::APInt *)&v166, 16, (uint64_t)&v163);
      if (v164 >= 0x41)
        v50 = v163;
      else
        v50 = (char **)&v163;
      v171 = *v50;
      v172[0] = 0;
      LODWORD(v172[1]) = 4;
      WORD2(v172[1]) = 257;
      BYTE6(v172[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v171);
      if (v164 >= 0x41 && v163)
        MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
      v164 = v167;
      if (v167 < 0x41
        || (llvm::APInt::initSlowCase((llvm::APInt *)&v163, 0, 0), v153 = v164, v164 <= 0x40))
      {
        v51 = v166;
        v52 = 1;
        v53 = (char **)v166;
      }
      else
      {
        v154 = 0;
        v53 = v163;
        *v163 = (char *)-1;
        v155 = v166;
        v156 = ((unint64_t)(v153 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v53[v154 / 8] = (char *)((unint64_t)v53[v154 / 8] & *(_QWORD *)&v155[v154]);
          v154 += 8;
        }
        while (v156 != v154);
        v52 = 0;
        v51 = *v53;
      }
      v171 = v51;
      v172[0] = 0;
      LODWORD(v172[1]) = 16;
      WORD2(v172[1]) = 257;
      BYTE6(v172[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v171);
      if ((v52 & 1) == 0 && v53)
      {
        v54 = v53;
LABEL_151:
        MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
      }
LABEL_157:
      if (v167 < 0x41)
        return;
      v48 = (unint64_t)v166;
      if (!v166)
        return;
LABEL_159:
      MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
      return;
    }
    if (v21 == &unk_1C866F1AC)
    {
      v49 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v49 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 76);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v49 + 1;
        *v49 = 76;
      }
      v164 = v167;
      if (v167 >= 0x41)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v163, 0, 0);
        v57 = v164;
        if (v164 > 0x40)
        {
          v58 = 0;
          v59 = v163;
          *v163 = (char *)-1;
          v60 = v166;
          v61 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v59[v58 / 8] = (char *)((unint64_t)v59[v58 / 8] & *(_QWORD *)&v60[v58]);
            v58 += 8;
          }
          while (v61 != v58);
          goto LABEL_365;
        }
      }
    }
    else
    {
      if (v21 != &unk_1C866F1C0)
      {
        if (v21 == &unk_1C866F15C)
        {
          v22 = (char *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v22 < *((_QWORD *)v5 + 3))
          {
            *((_QWORD *)v5 + 4) = v22 + 1;
            v23 = 72;
            goto LABEL_134;
          }
          v64 = v5;
          v65 = 72;
        }
        else
        {
          v22 = (char *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v22 < *((_QWORD *)v5 + 3))
          {
            *((_QWORD *)v5 + 4) = v22 + 1;
            v23 = 82;
LABEL_134:
            *v22 = v23;
LABEL_154:
            v69 = &v166;
            if (v167 >= 0x41)
              v69 = (char **)v166;
            v171 = *v69;
            v172[0] = 0;
            LODWORD(v172[1]) = 4;
            WORD2(v172[1]) = 257;
            BYTE6(v172[1]) = 0;
            llvm::raw_ostream::operator<<(v5, (uint64_t)&v171);
            goto LABEL_157;
          }
          v64 = v5;
          v65 = 82;
        }
        llvm::raw_ostream::write(v64, v65);
        goto LABEL_154;
      }
      v56 = (_BYTE *)*((_QWORD *)v5 + 4);
      if ((unint64_t)v56 >= *((_QWORD *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 77);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v56 + 1;
        *v56 = 77;
      }
      v164 = v167;
      if (v167 >= 0x41)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v163, 0, 0);
        v158 = v164;
        if (v164 > 0x40)
        {
          v159 = 0;
          v59 = v163;
          *v163 = (char *)-1;
          v160 = v166;
          v161 = ((unint64_t)(v158 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v59[v159 / 8] = (char *)((unint64_t)v59[v159 / 8] & *(_QWORD *)&v160[v159]);
            v159 += 8;
          }
          while (v161 != v159);
LABEL_365:
          v67 = 0;
          v66 = *v59;
          goto LABEL_143;
        }
      }
    }
    v66 = v166;
    v67 = 1;
    v59 = (char **)v166;
LABEL_143:
    v171 = v66;
    v172[0] = 0;
    LODWORD(v172[1]) = 16;
    WORD2(v172[1]) = 257;
    BYTE6(v172[1]) = 0;
    llvm::raw_ostream::operator<<(v5, (uint64_t)&v171);
    if ((v67 & 1) == 0 && v59)
      MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    llvm::APInt::getHiBits((llvm::APInt *)&v166, 64, (uint64_t)&v163);
    if (v164 >= 0x41)
      v68 = v163;
    else
      v68 = (char **)&v163;
    v171 = *v68;
    v172[0] = 0;
    LODWORD(v172[1]) = 16;
    WORD2(v172[1]) = 257;
    BYTE6(v172[1]) = 0;
    llvm::raw_ostream::operator<<(v5, (uint64_t)&v171);
    if (v164 >= 0x41)
    {
      v54 = v163;
      if (v163)
        goto LABEL_151;
    }
    goto LABEL_157;
  }
  v165 = 0;
  if (v13 == &unk_1C866F1C0)
  {
    v16 = (char *)*((_QWORD *)a2 + 5);
    v15 = v16 + 28;
  }
  else
  {
    v15 = (char *)a2 + 52;
    v16 = (char *)a2 + 24;
  }
  if ((*v15 & 7) == 0)
  {
    v28 = (unint64_t)v13;
    goto LABEL_67;
  }
  v27 = v16[28] & 7;
  v28 = (unint64_t)v13;
  if (v27 == 1)
    goto LABEL_67;
  v29 = llvm::APFloat::convertToDouble((llvm::detail::DoubleAPFloat *)((char *)a2 + 24));
  v171 = (char *)&v173;
  *(_OWORD *)v172 = xmmword_1C85F20B0;
  sub_1C5322CA0((uint64_t)v12 - 8, (uint64_t *)&v171, 6, 0, 0);
  llvm::APFloat::APFloat((uint64_t)&v166, &unk_1C866F198, (unsigned __int8 *)v171, v172[0]);
  v30 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v166);
  if (v167 == (_DWORD *)&unk_1C866F1C0)
  {
    v162 = v30;
    sub_1C4773C74(&v168);
  }
  else
  {
    if ((v167[2] - 64) > 0xFFFFFF7F || !v168)
      goto LABEL_56;
    v162 = v30;
    MEMORY[0x1CAA32F9C](v168, 0x1000C8000313F17);
  }
  v30 = v162;
LABEL_56:
  if (v30 == v29)
  {
    llvm::raw_ostream::write(v5, v171, v172[0]);
    v19 = v171;
    if (v171 != (char *)&v173)
      goto LABEL_117;
    return;
  }
  if (v171 != (char *)&v173)
    free(v171);
  v28 = *(_QWORD *)v12;
LABEL_67:
  if ((_UNKNOWN *)v28 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v172, (llvm::detail::DoubleAPFloat *)((char *)a2 + 32));
  }
  else
  {
    v172[0] = v28;
    if ((*(_DWORD *)(v28 + 8) + 64) >= 0x80)
      v172[1] = operator new[]();
    v35 = *((_BYTE *)a2 + 52);
    v36 = v35 & 7;
    v174 = v174 & 0xF0 | v35 & 0xF;
    v173 = *((_DWORD *)a2 + 12);
    v38 = (v35 & 6) != 0 && v36 != 3;
    if (v36 == 1 || v38)
    {
      v39 = *(unsigned int *)(v172[0] + 8);
      if ((v39 - 64) <= 0xFFFFFF7F)
        v40 = (unint64_t *)v172[1];
      else
        v40 = &v172[1];
      v43 = (unint64_t *)*((_QWORD *)a2 + 5);
      v42 = (char *)a2 + 40;
      v41 = v43;
      if ((*(_DWORD *)(*((_QWORD *)v42 - 1) + 8) - 64) >= 0xFFFFFF80)
        v41 = (unint64_t *)v42;
      if (v39 <= 0xFFFFFFBF)
      {
        v44 = (unint64_t)(v39 + 64) >> 6;
        do
        {
          v45 = *v41++;
          *v40++ = v45;
          --v44;
        }
        while (v44);
      }
    }
  }
  if (v13 != &unk_1C866F198)
  {
    if ((_UNKNOWN *)v172[0] == &unk_1C866F1C0)
      v46 = (char **)v172[1];
    else
      v46 = &v171;
    if ((*((_BYTE *)v46 + 28) & 7) != 1
      || ((_UNKNOWN *)v172[0] != &unk_1C866F1C0 ? (v123 = &v171) : (v123 = (char **)v172[1]),
          v124 = v123[1],
          *((_DWORD *)v124 + 4) == 1))
    {
      llvm::APFloat::convert((uint64_t)&v171, &unk_1C866F198, 1, &v165);
    }
    else
    {
      v125 = *((_DWORD *)v124 + 2);
      v126 = &v171;
      if ((_UNKNOWN *)v172[0] == &unk_1C866F1C0)
      {
        v126 = (char **)v172[1];
        v127 = (unint64_t *)(v172[1] + 16);
      }
      else
      {
        v127 = &v172[1];
      }
      if ((v125 - 64) <= 0xFFFFFF7F)
        v127 = (unint64_t *)v126[2];
      v128 = v125 - 2;
      v129 = v127[(v125 - 2) >> 6];
      llvm::APFloat::convert((uint64_t)&v171, &unk_1C866F198, 1, &v165);
      if (((v129 >> v128) & 1) == 0)
      {
        if ((_UNKNOWN *)v172[0] == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v172, (unsigned int *)&v163);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v172, (unsigned int *)&v163);
        v130 = &v171;
        if ((_UNKNOWN *)v172[0] == &unk_1C866F1C0)
          v130 = (char **)v172[1];
        v131 = (*((unsigned __int8 *)v130 + 28) >> 3) & 1;
        v170 = 3;
        v169 = -1023;
        v167 = &unk_1C866F198;
        v168 = 0;
        sub_1C4DF8C5C((uint64_t)&v166, 1, v131, (const llvm::APInt *)&v163);
        sub_1C48552C0((uint64_t)v172, (uint64_t)&v167);
        if (v167 == (_DWORD *)&unk_1C866F1C0)
        {
          sub_1C4773C74(&v168);
        }
        else if ((v167[2] - 64) <= 0xFFFFFF7F && v168)
        {
          MEMORY[0x1CAA32F9C](v168, 0x1000C8000313F17);
        }
        if (v164 >= 0x41 && v163)
          MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
      }
    }
  }
  if ((_UNKNOWN *)v172[0] == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v172, (unsigned int *)&v163);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v172, (unsigned int *)&v163);
  v47 = (char **)&v163;
  if (v164 >= 0x41)
    v47 = v163;
  v166 = *v47;
  v167 = 0;
  LODWORD(v168) = 0;
  WORD2(v168) = 257;
  BYTE6(v168) = 1;
  llvm::raw_ostream::operator<<(v5, (uint64_t)&v166);
  if (v164 >= 0x41 && v163)
    MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
  if ((_UNKNOWN *)v172[0] == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v172[1]);
    return;
  }
  if ((*(_DWORD *)(v172[0] + 8) - 64) <= 0xFFFFFF7F)
  {
    v48 = v172[1];
    if (v172[1])
      goto LABEL_159;
  }
}

uint64_t sub_1C53148A8(unsigned __int8 *a1, char **a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  _QWORD v7[4];

  if ((a1[23] & 0x10) == 0)
  {
    v4 = a1[16];
    if (v4 >= 4 && (v4 < 0x15 || v4 == 23))
      return 0;
  }
  v7[0] = off_1E814DD30;
  v7[1] = 0;
  v7[2] = a3;
  v7[3] = a4;
  sub_1C5319F38(a2, (llvm::detail::DoubleAPFloat *)a1, (uint64_t)v7);
  return 1;
}

uint64_t sub_1C5314910(uint64_t *a1, llvm::raw_ostream *a2, int a3, llvm::ModuleSlotTracker *this)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t Machine;
  uint64_t v10;
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *__p;
  void *v34;
  uint64_t v35;

  v7 = *((_QWORD *)this + 3);
  v14 = 0;
  v15 = 0;
  v13 = v7;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v34 = 0;
  v35 = 0;
  if (a3)
  {
    sub_1C530D7AC((uint64_t)&v13, *a1);
    v8 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      *v8 = 32;
    }
  }
  Machine = llvm::ModuleSlotTracker::getMachine(this);
  v10 = *((_QWORD *)this + 3);
  v12[0] = off_1E814DD30;
  v12[1] = &v13;
  v12[2] = Machine;
  v12[3] = v10;
  sub_1C5319F38((char **)a2, (llvm::detail::DoubleAPFloat *)a1, (uint64_t)v12);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v30, 8);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  MEMORY[0x1CAA32FB4](v23, 8);
  MEMORY[0x1CAA32FB4](v20, 8);
  MEMORY[0x1CAA32FB4](v17, 8);
  return MEMORY[0x1CAA32FB4](v14, 8);
}

void llvm::Metadata::printAsOperand(uint64_t **this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  unint64_t v3;
  _QWORD v4[2];
  BOOL v5;
  char v6;
  const llvm::Module *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)this;
  v4[0] = &off_1E814DC18;
  v4[1] = 0;
  v5 = a3 != 0;
  v6 = (v3 < 0x23) & (0x7FFFFFFF0uLL >> v3);
  v11 = 0;
  v10 = 0;
  v8 = 0;
  v9 = 0;
  v7 = a3;
  sub_1C5314B04((uint64_t)a2, this, (llvm::ModuleSlotTracker *)v4, (uint64_t)a3, 1, 0);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v4);
}

llvm::raw_ostream *sub_1C5314B04(uint64_t a1, uint64_t **a2, llvm::ModuleSlotTracker *a3, uint64_t a4, char a5, int a6)
{
  uint64_t Machine;
  uint64_t v12;
  int v13;
  _WORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22[4];
  char *__s;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__p;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52[2];

  v52[1] = *MEMORY[0x1E0C80C00];
  LODWORD(v40) = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  LODWORD(v46) = 1;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v39 = (uint64_t)&off_1E81A1100;
  v47 = 0;
  v48 = 0;
  v49 = (uint64_t)&v51;
  v50 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v39, a1);
  v17 = 0;
  v18 = 0;
  v16 = a4;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  *(_DWORD *)v22 = 0;
  __s = 0;
  v24 = 0;
  LODWORD(v25) = 0;
  v26 = 0;
  v27 = 0;
  LODWORD(v28) = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  LOBYTE(v32) = 0;
  v33 = 0;
  v34 = 0;
  LODWORD(v35) = 0;
  __p = 0;
  v37 = 0;
  v38 = 0;
  Machine = llvm::ModuleSlotTracker::getMachine(a3);
  if (a6 && (a5 & 1) == 0)
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = Machine;
    *(_QWORD *)(v12 + 24) = a4;
    *(_QWORD *)v12 = &off_1E814DD58;
    *(_QWORD *)(v12 + 8) = &v16;
    *(_DWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = v12 + 56;
    *(_QWORD *)(v12 + 48) = 0x400000000;
    v52[0] = (uint64_t)a2;
    sub_1C6226FB8((llvm::SmallPtrSetImplBase *)(v12 + 184), v52, 1);
    *(_QWORD *)(v12 + 248) = &v39;
  }
  else
  {
    v12 = operator new();
    *(_QWORD *)v12 = off_1E814DD30;
    *(_QWORD *)(v12 + 8) = &v16;
    *(_QWORD *)(v12 + 16) = Machine;
    *(_QWORD *)(v12 + 24) = a4;
  }
  sub_1C531B20C((llvm::raw_ostream *)&v39, a2, v12);
  v13 = *(unsigned __int8 *)a2;
  if ((v13 - 35) >= 0xFFFFFFE1 && (a5 & 1) == 0 && v13 != 6 && v13 != 32)
  {
    v14 = (_WORD *)v43;
    if ((unint64_t)(v42 - v43) > 2)
    {
      *(_BYTE *)(v43 + 2) = 32;
      *v14 = 15648;
      v43 += 3;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v39, " = ", 3uLL);
    }
    sub_1C531D608((llvm::raw_ostream *)&v39, (uint64_t)a2);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v33, 8);
  if (v29)
  {
    v30 = (uint64_t)v29;
    operator delete(v29);
  }
  MEMORY[0x1CAA32FB4](v26, 8);
  MEMORY[0x1CAA32FB4](__s, 8);
  MEMORY[0x1CAA32FB4](v20, 8);
  MEMORY[0x1CAA32FB4](v17, 8);
  return sub_1C4D687F0((llvm::raw_ostream *)&v39);
}

void llvm::MDNode::printTree(uint64_t **this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  _QWORD v3[2];
  BOOL v4;
  char v5;
  const llvm::Module *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3[0] = &off_1E814DC18;
  v3[1] = 0;
  v4 = a3 != 0;
  v5 = 1;
  v10 = 0;
  v9 = 0;
  v7 = 0;
  v8 = 0;
  v6 = a3;
  sub_1C5314B04((uint64_t)a2, this, (llvm::ModuleSlotTracker *)v3, (uint64_t)a3, 0, 1);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v3);
}

llvm::raw_ostream *llvm::MDNode::printTree(uint64_t **this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, const llvm::Module *a4)
{
  return sub_1C5314B04((uint64_t)a2, this, a3, (uint64_t)a4, 0, 1);
}

_QWORD *llvm::ModuleSummaryIndex::print(llvm::ModuleSummaryIndex *this, llvm::raw_ostream *a2, char a3)
{
  uint64_t (***v5)(llvm::raw_ostream *);
  int v6;
  _BYTE *v7;
  llvm::ModuleSummaryIndex *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int ModulePathSlot;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  llvm::ModuleSummaryIndex *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int GUIDSlot;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  llvm::raw_ostream *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  _QWORD *v74;
  char *v75;
  size_t v76;
  size_t v77;
  _BYTE *v78;
  llvm::raw_ostream *v79;
  void *v80;
  _QWORD *v81;
  char v82;
  llvm::raw_ostream *v83;
  _WORD *v84;
  uint64_t v85;
  llvm::raw_ostream *v86;
  unint64_t v87;
  const char *v88;
  size_t v89;
  _WORD *v90;
  llvm::raw_ostream *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  llvm::raw_ostream *v95;
  int v96;
  uint64_t v97;
  llvm::raw_ostream *v98;
  uint64_t v99;
  const char *v100;
  size_t v101;
  llvm::raw_ostream *v102;
  void *v103;
  const char *v104;
  size_t v105;
  void *v106;
  llvm::raw_ostream *v107;
  void *v108;
  llvm::raw_ostream *v109;
  _QWORD *v110;
  llvm::raw_ostream *v111;
  uint64_t v112;
  llvm::raw_ostream *v113;
  void *v114;
  llvm::raw_ostream *v115;
  _BYTE *v116;
  int v117;
  llvm::raw_ostream *v118;
  uint64_t v119;
  llvm::raw_ostream *v120;
  _BYTE *v121;
  _BYTE *v122;
  llvm::raw_ostream *v123;
  const char *v124;
  size_t v125;
  llvm::raw_ostream *v126;
  uint64_t v127;
  llvm::raw_ostream *v128;
  _WORD *v129;
  unsigned int v130;
  _QWORD *v131;
  _QWORD *v132;
  _BYTE *v133;
  _BYTE *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _OWORD *v138;
  _BYTE *v139;
  __int128 v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  llvm::raw_ostream *v144;
  void *v145;
  _WORD *v146;
  uint64_t v147;
  _WORD *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  llvm::raw_ostream *v153;
  _BYTE *v154;
  llvm::raw_ostream *v155;
  _OWORD *v156;
  char v157;
  _QWORD *v158;
  llvm::raw_ostream *v159;
  _WORD *v160;
  llvm::raw_ostream *v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  llvm::raw_ostream *v165;
  int v166;
  uint64_t v167;
  llvm::raw_ostream *v168;
  _BYTE *v169;
  const char *p_p;
  size_t v171;
  llvm::raw_ostream *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  _DWORD *v179;
  llvm::raw_ostream *v180;
  _WORD *v181;
  llvm::raw_ostream *v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  llvm::raw_ostream *v186;
  int v187;
  llvm::raw_ostream *v188;
  uint64_t v189;
  const char *v190;
  size_t v191;
  void *v192;
  llvm::raw_ostream *v193;
  uint64_t v194;
  llvm::raw_ostream *v195;
  _BYTE *v196;
  llvm::raw_ostream *v197;
  _BYTE *v198;
  uint64_t v199;
  llvm::raw_ostream *v200;
  void *v201;
  llvm::raw_ostream *v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t *v205;
  char v206;
  int v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  llvm::raw_ostream *v212;
  _WORD *v213;
  char v214;
  unsigned __int8 *v215;
  size_t v216;
  int TypeIdSlot;
  llvm::raw_ostream *v218;
  _BYTE *v219;
  unint64_t v220;
  int v221;
  _QWORD *v222;
  _QWORD *v223;
  llvm::raw_ostream *v224;
  _WORD *v225;
  llvm::raw_ostream *v226;
  _BYTE *v227;
  unint64_t **v228;
  llvm::raw_ostream *v229;
  _WORD *v230;
  unint64_t **v231;
  llvm::raw_ostream *v232;
  _WORD *v233;
  _QWORD *v234;
  llvm::raw_ostream *v235;
  _WORD *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  llvm::raw_ostream *v240;
  _WORD *v241;
  llvm::raw_ostream *v242;
  _BYTE *v243;
  _QWORD *v244;
  llvm::raw_ostream *v245;
  uint64_t v246;
  unint64_t **v247;
  unint64_t *v248;
  unint64_t *v249;
  char v250;
  llvm::raw_ostream *v251;
  _WORD *v252;
  llvm::raw_ostream *v253;
  _QWORD *v254;
  llvm::raw_ostream *v255;
  uint64_t v256;
  llvm::raw_ostream *v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t *v260;
  char v261;
  llvm::raw_ostream *v262;
  _WORD *v263;
  llvm::raw_ostream *v264;
  uint64_t v265;
  int v266;
  unint64_t v267;
  llvm::raw_ostream *v268;
  int v269;
  llvm::raw_ostream *v270;
  uint64_t v271;
  llvm::raw_ostream *v272;
  uint64_t v273;
  llvm::raw_ostream *v274;
  _BYTE *v275;
  llvm::raw_ostream *v276;
  _BYTE *v277;
  llvm::raw_ostream *v278;
  _BYTE *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  llvm::raw_ostream *v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  llvm::raw_ostream *v287;
  _WORD *v288;
  llvm::raw_ostream *v289;
  uint64_t v290;
  const char *v291;
  size_t v292;
  uint64_t v293;
  llvm::raw_ostream *v294;
  _BYTE *v295;
  int v296;
  unint64_t v297;
  llvm::raw_ostream *v298;
  int v299;
  uint64_t v300;
  llvm::raw_ostream *v301;
  _BYTE *v302;
  llvm::raw_ostream *v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  llvm::SlotTracker *v307;
  _QWORD *v308;
  int v309;
  unint64_t v310;
  llvm::raw_ostream *v311;
  int v312;
  llvm::raw_ostream *v313;
  _BYTE *v314;
  llvm::raw_ostream *v315;
  _BYTE *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  int v324;
  int v325;
  _QWORD *v326;
  llvm::raw_ostream *v327;
  uint64_t v328;
  llvm::raw_ostream *v329;
  _BYTE *v330;
  char *v331;
  char *v332;
  unsigned int v334;
  uint64_t *v335;
  llvm::raw_ostream *v336;
  _BYTE *v337;
  uint64_t v338;
  llvm::raw_ostream *v339;
  _DWORD *v340;
  char v341;
  BOOL v342;
  llvm::raw_ostream *v343;
  uint64_t v344;
  uint64_t v345;
  llvm::raw_ostream *v346;
  uint64_t v347;
  char v348;
  uint64_t i;
  unint64_t v350;
  llvm::raw_ostream *v351;
  _WORD *v352;
  llvm::raw_ostream *v353;
  uint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  llvm::raw_ostream *v357;
  _BYTE *v358;
  char v359;
  int v360;
  unsigned __int8 *v361;
  size_t v362;
  size_t v363;
  int v364;
  unint64_t v365;
  llvm::raw_ostream *v366;
  int v367;
  uint64_t v368;
  char v369;
  BOOL v370;
  const char *v371;
  size_t v372;
  size_t v373;
  _BYTE *v374;
  llvm::raw_ostream *v375;
  uint64_t v376;
  llvm::raw_ostream *v377;
  uint64_t v378;
  const char *v379;
  size_t v380;
  _WORD *v381;
  llvm::raw_ostream *v382;
  void *v383;
  llvm::raw_ostream *v384;
  uint64_t v385;
  llvm::raw_ostream *v386;
  uint64_t v387;
  llvm::raw_ostream *v388;
  void *v389;
  llvm::raw_ostream *v390;
  _BYTE *v391;
  llvm::raw_ostream *v392;
  uint64_t v393;
  _QWORD *v394;
  llvm::raw_ostream *v395;
  _BYTE *v396;
  llvm::raw_ostream *v397;
  _BYTE *v398;
  llvm::raw_ostream *v399;
  uint64_t v400;
  _BYTE *v401;
  _QWORD *v402;
  _QWORD *v403;
  char v404;
  llvm::raw_ostream *v405;
  _WORD *v406;
  llvm::raw_ostream *v407;
  uint64_t v408;
  _WORD *v409;
  llvm::raw_ostream *v410;
  void *v411;
  llvm::raw_ostream *v412;
  const char *v413;
  size_t v414;
  void *v415;
  llvm::raw_ostream *v416;
  uint64_t v417;
  char v418;
  const char *v419;
  size_t v420;
  llvm::raw_ostream *v421;
  _BYTE *v422;
  llvm::raw_ostream *v423;
  void *v424;
  unint64_t **v425;
  char v426;
  llvm::raw_ostream *v427;
  _WORD *v428;
  llvm::raw_ostream *v429;
  _OWORD *v430;
  llvm::raw_ostream *v431;
  const char *v432;
  size_t v433;
  void *v434;
  llvm::raw_ostream *v435;
  _QWORD *v436;
  _QWORD *v437;
  _DWORD *v438;
  _BYTE *v439;
  unint64_t *v440;
  unint64_t **v441;
  llvm::raw_ostream *v442;
  _BYTE *v443;
  llvm::raw_ostream *v444;
  _BYTE *v445;
  llvm::raw_ostream *v446;
  _BYTE *v447;
  _QWORD *v448;
  _QWORD *v449;
  _QWORD *v450;
  _QWORD *v451;
  char v452;
  int v453;
  int *v454;
  size_t v455;
  size_t v456;
  unint64_t v457;
  llvm::raw_ostream *v458;
  _BYTE *v459;
  int v460;
  unint64_t v461;
  llvm::raw_ostream *v462;
  int v463;
  void *v464;
  char v465;
  BOOL v466;
  const char *v467;
  size_t v468;
  size_t v469;
  _BYTE *v470;
  llvm::raw_ostream *v471;
  uint64_t v472;
  unint64_t *v473;
  unint64_t *v474;
  char v475;
  llvm::raw_ostream *v476;
  _WORD *v477;
  llvm::raw_ostream *v478;
  uint64_t v479;
  _WORD *v480;
  llvm::raw_ostream *v481;
  _BYTE *v482;
  int v483;
  unint64_t v484;
  llvm::raw_ostream *v485;
  int v486;
  llvm::raw_ostream *v487;
  _BYTE *v488;
  llvm::raw_ostream *v489;
  _BYTE *v490;
  llvm::raw_ostream *v491;
  uint64_t v492;
  _BYTE *v493;
  _QWORD *v494;
  _QWORD *v495;
  uint64_t Flags;
  llvm::raw_ostream *v497;
  void **v498;
  void **v499;
  int v500;
  _BYTE *v501;
  unint64_t v502;
  llvm::raw_ostream *v503;
  int v504;
  void *v505;
  _BYTE *v506;
  _BYTE *v508;
  unint64_t v509;
  llvm::raw_ostream *v510;
  int v511;
  uint64_t v512;
  unint64_t v513;
  _BYTE *v514;
  int v515;
  char *v516;
  char *v517;
  char *v518;
  unint64_t v519;
  unint64_t *v520;
  _QWORD *v521;
  char *v522;
  _QWORD *v523;
  uint64_t (**v524)(llvm::raw_ostream *);
  int v525;
  uint64_t v526;
  __int128 v527;
  char v528;
  uint64_t v529;
  int v530;
  __int128 v531;
  uint64_t *v532;
  __int128 v533;
  uint64_t v534;
  _DWORD v535[2];
  llvm::raw_ostream *v536[2];
  llvm::ModuleSummaryIndex *v537;
  uint64_t v538;
  llvm::SlotTracker *v539;
  uint64_t v540;
  __int128 v541;
  int v542;
  __int128 v543;
  int v544;
  __int128 v545;
  int v546;
  __int128 v547;
  int v548;
  __int128 v549;
  uint64_t v550;
  char v551;
  __int128 v552;
  int v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  int v557;
  __int128 v558;
  uint64_t v559;
  char v560;
  char v561;
  __int128 v562;
  int v563;
  _QWORD *v564;
  uint64_t v565;
  _QWORD v566[18];
  uint64_t v567;
  __int128 v568;
  int v569;
  uint64_t (**v570)();
  __int128 v571;
  __int16 v572;
  uint64_t v573;
  uint64_t v574;
  llvm::ModuleSummaryIndex *v575;
  __int128 v576;
  int v577;
  int v578;
  __int128 v579;
  int v580;
  int v581;
  __int128 v582;
  int v583;
  int v584;
  __int128 v585;
  int v586;
  int v587;
  __int128 v588;
  int v589;
  int v590;
  int v591;
  __int128 v592;
  int v593;
  int v594;
  __int128 v595;
  uint64_t v596;
  int v597;
  __int128 __p;
  uint64_t v599;
  _BYTE __dst[24];
  _BYTE *v601;
  _BYTE *v602;
  char v603;
  uint64_t v604;
  int v605;
  __int128 *v606;
  __int128 v607;
  uint64_t v608;
  uint64_t v609;

  v609 = *MEMORY[0x1E0C80C00];
  v570 = &off_1E814DC38;
  v573 = 0;
  v574 = 0;
  v571 = 0u;
  v572 = 0;
  v575 = this;
  v576 = 0u;
  v578 = 0;
  v577 = 0;
  v579 = 0u;
  v581 = 0;
  v580 = 0;
  v584 = 0;
  v583 = 0;
  v582 = 0u;
  v585 = 0u;
  v587 = 0;
  v586 = 0;
  v588 = 0u;
  v589 = 0;
  v590 = 16;
  v591 = 0;
  v594 = 0;
  v593 = 0;
  v592 = 0u;
  v595 = 0u;
  v596 = 0x1000000000;
  v597 = 0;
  v525 = 0;
  v528 = 0;
  v529 = 0;
  v530 = 1;
  v526 = 0;
  v527 = 0u;
  v524 = &off_1E81A1100;
  v5 = &v524;
  v531 = 0u;
  v532 = &v534;
  v533 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v524, (uint64_t)a2);
  v536[0] = (llvm::raw_ostream *)&v524;
  v536[1] = 0;
  v537 = this;
  v538 = 0;
  v539 = (llvm::SlotTracker *)&v570;
  v540 = 0;
  v541 = 0u;
  v543 = 0u;
  v542 = 0;
  v544 = 0;
  v545 = 0u;
  v547 = 0u;
  v546 = 0;
  v548 = 0;
  v550 = 0;
  v551 = 0;
  v549 = 0u;
  v552 = 0u;
  v553 = 0;
  v557 = 0;
  v556 = 0u;
  v555 = 0u;
  v554 = 0u;
  v559 = 0;
  v558 = 0u;
  v560 = a3;
  v561 = 0;
  v562 = 0u;
  v563 = 0;
  v564 = v566;
  v565 = 0x800000000;
  v566[16] = &v567;
  v566[17] = 0x800000000;
  v568 = 0u;
  v569 = 0;
  if (v575)
  {
    v6 = llvm::SlotTracker::processIndex((llvm::SlotTracker *)&v570);
    v575 = 0;
    v5 = (uint64_t (***)(llvm::raw_ostream *))v536[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = v5[4];
  if (v5[3] == (uint64_t (**)(llvm::raw_ostream *))v7)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v5, "\n", 1uLL);
  }
  else
  {
    *v7 = 10;
    v5[4] = (uint64_t (**)(llvm::raw_ostream *))((char *)v5[4] + 1);
  }
  v8 = v537;
  v9 = *((unsigned int *)v537 + 9);
  if ((_DWORD)v9)
  {
    v12 = 3 * v9;
    v13 = 48 * v9;
    v10 = (char *)operator new(48 * v9);
    v14 = 0;
    v11 = &v10[16 * v12];
    do
    {
      v15 = &v10[v14];
      *(_OWORD *)(v15 + 28) = 0uLL;
      *(_OWORD *)v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      v14 += 48;
    }
    while (v13 != v14);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v16 = *((unsigned int *)v8 + 8);
  v518 = v11;
  v515 = v6;
  v17 = (uint64_t *)*((_QWORD *)v8 + 3);
  if ((_DWORD)v16)
  {
    while (!*v17 || *v17 == -8)
      ++v17;
  }
  v18 = *((_QWORD *)v8 + 3) + 8 * v16;
  v516 = v10;
  if (v17 != (uint64_t *)v18)
  {
    v19 = *v17;
    while (*(_QWORD *)(v19 + 8) == 0xFFFFFFFFLL)
    {
      strcpy(__dst, "[Regular LTO]");
      *(_WORD *)&__dst[14] = 0;
      *(_DWORD *)&__dst[16] = v535[0];
      *(_DWORD *)&__dst[19] = *(_DWORD *)((char *)v535 + 3);
      v20 = 13;
      v21 = 0x72616C756765525BLL;
LABEL_24:
      *(_QWORD *)&__p = *(_QWORD *)&__dst[8];
      *(_QWORD *)((char *)&__p + 7) = *(_QWORD *)&__dst[15];
      v607 = *(_OWORD *)(v19 + 16);
      LODWORD(v608) = *(_DWORD *)(v19 + 32);
      ModulePathSlot = llvm::SlotTracker::getModulePathSlot((uint64_t)v539, (unsigned __int8 *)(v19 + 40), *(_QWORD *)v19);
      v27 = &v516[48 * ModulePathSlot];
      if (v27[23] < 0)
        operator delete(*(void **)v27);
      v28 = __p;
      *(_QWORD *)v27 = v21;
      *((_QWORD *)v27 + 1) = v28;
      *(_QWORD *)(v27 + 15) = *(_QWORD *)((char *)&__p + 7);
      v27[23] = v20;
      v10 = v516;
      v29 = &v516[48 * ModulePathSlot];
      *(_OWORD *)(v29 + 24) = v607;
      *((_DWORD *)v29 + 10) = v608;
      do
      {
        v30 = v17[1];
        ++v17;
        v19 = v30;
        if (v30)
          v31 = v19 == -8;
        else
          v31 = 1;
      }
      while (v31);
      if (v17 == (uint64_t *)v18)
        goto LABEL_32;
    }
    v22 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 >= 0x7FFFFFFFFFFFFFF8uLL)
      abort();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&__dst[16] = v25 | 0x8000000000000000;
      *(_QWORD *)__dst = v23;
      *(_QWORD *)&__dst[8] = v22;
    }
    else
    {
      __dst[23] = *(_QWORD *)v19;
      v23 = __dst;
      if (!v22)
        goto LABEL_23;
    }
    memmove(v23, (const void *)(v19 + 40), v22);
LABEL_23:
    v23[v22] = 0;
    v21 = *(_QWORD *)__dst;
    v20 = __dst[23];
    goto LABEL_24;
  }
LABEL_32:
  if (v10 != v518)
  {
    v334 = 0;
    v335 = (uint64_t *)v516;
    do
    {
      v336 = v536[0];
      v337 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v337)
      {
        llvm::raw_ostream::write(v536[0], "^", 1uLL);
      }
      else
      {
        *v337 = 94;
        ++*((_QWORD *)v336 + 4);
      }
      sub_1C5E21910(v336, v334, 0, 0, 0);
      v338 = *((_QWORD *)v336 + 4);
      if ((unint64_t)(*((_QWORD *)v336 + 3) - v338) > 0xB)
      {
        *(_DWORD *)(v338 + 8) = 673200741;
        *(_QWORD *)v338 = *(_QWORD *)" = module: (";
        *((_QWORD *)v336 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v336, " = module: (", 0xCuLL);
      }
      v339 = v536[0];
      v340 = (_DWORD *)*((_QWORD *)v536[0] + 4);
      if (*((_QWORD *)v536[0] + 3) - (_QWORD)v340 > 6uLL)
      {
        *(_DWORD *)((char *)v340 + 3) = 572537448;
        *v340 = 1752457584;
        *((_QWORD *)v339 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], "path: \"", 7uLL);
      }
      v341 = *((_BYTE *)v335 + 23);
      v342 = v341 < 0;
      if (v341 >= 0)
        v343 = (llvm::raw_ostream *)v335;
      else
        v343 = (llvm::raw_ostream *)*v335;
      v344 = v341 & 0x7F;
      if (v342)
        v345 = v335[1];
      else
        v345 = v344;
      llvm::printEscapedString(v343, v345, v536[0]);
      v346 = v536[0];
      v347 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v347) > 9)
      {
        *(_WORD *)(v347 + 8) = 10272;
        *(_QWORD *)v347 = *(_QWORD *)"\", hash: (";
        *((_QWORD *)v346 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], "\", hash: (", 0xAuLL);
      }
      v348 = 0;
      ++v334;
      for (i = 24; i != 44; i += 4)
      {
        v350 = *(unsigned int *)((char *)v335 + i);
        v351 = v536[0];
        if ((v348 & 1) != 0)
        {
          v352 = (_WORD *)*((_QWORD *)v536[0] + 4);
          if (*((_QWORD *)v536[0] + 3) - (_QWORD)v352 > 1uLL)
          {
            *v352 = 8236;
            *((_QWORD *)v351 + 4) += 2;
          }
          else
          {
            v351 = llvm::raw_ostream::write(v536[0], ", ", 2uLL);
          }
        }
        sub_1C5E21910(v351, v350, 0, 0, 0);
        v348 = 1;
      }
      v353 = v536[0];
      v354 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v354) > 2)
      {
        *(_BYTE *)(v354 + 2) = 10;
        *(_WORD *)v354 = 10537;
        *((_QWORD *)v353 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], "))\n", 3uLL);
      }
      v335 += 6;
    }
    while (v335 != (uint64_t *)v518);
  }
  v32 = v537;
  v33 = (char *)v537 + 8;
  v34 = *(char **)v537;
  if (*(llvm::ModuleSummaryIndex **)v537 != (llvm::ModuleSummaryIndex *)((char *)v537 + 8))
  {
    do
    {
      v35 = (uint64_t *)*((_QWORD *)v34 + 7);
      v36 = (uint64_t *)*((_QWORD *)v34 + 8);
      if (v35 != v36)
      {
        v37 = *((_QWORD *)v34 + 4);
        do
        {
          v38 = *v35++;
          *(_QWORD *)__dst = v38;
          sub_1C617C470((uint64_t)&v568, (uint64_t *)__dst)[1] = v37;
        }
        while (v35 != v36);
      }
      v39 = (char *)*((_QWORD *)v34 + 1);
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = *(char **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (char *)*((_QWORD *)v34 + 2);
          v31 = *(_QWORD *)v40 == (_QWORD)v34;
          v34 = v40;
        }
        while (!v31);
      }
      v34 = v40;
    }
    while (v40 != v33);
    v32 = v537;
    v34 = *(char **)v537;
  }
  v41 = (char *)v32 + 8;
  if (v34 != (char *)v32 + 8)
  {
    v517 = (char *)v32 + 8;
    while (1)
    {
      v42 = (unint64_t)(v34 + 32);
      v43 = *((unsigned __int8 *)v537 + 133);
      GUIDSlot = llvm::SlotTracker::getGUIDSlot(v539, *((_QWORD *)v34 + 4));
      v45 = v536[0];
      v46 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v46)
      {
        llvm::raw_ostream::write(v536[0], "^", 1uLL);
      }
      else
      {
        *v46 = 94;
        ++*((_QWORD *)v45 + 4);
      }
      sub_1C5E21910(v45, GUIDSlot, 0, 0, 0);
      v47 = (_QWORD *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v47 > 7uLL)
      {
        *v47 = 0x28203A7667203D20;
        *((_QWORD *)v45 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v45, " = gv: (", 8uLL);
      }
      v48 = (unint64_t *)(v42 & 0xFFFFFFFFFFFFFFF8);
      v49 = v42 & 1 | v43;
      if (!v49)
      {
        v59 = (uint64_t *)(v48 + 2);
        goto LABEL_61;
      }
      v50 = v48[1];
      if ((*(_BYTE *)(v50 + 23) & 0x10) == 0)
      {
        v61 = v536[0];
        v63 = (_QWORD *)((char *)v536[0] + 32);
        v62 = *((_QWORD *)v536[0] + 4);
        v64 = *((_QWORD *)v536[0] + 3) - v62;
LABEL_76:
        if (v64 > 5)
        {
          *(_WORD *)(v62 + 4) = 8250;
          *(_DWORD *)v62 = 1684632935;
          *v63 += 6;
        }
        else
        {
          llvm::raw_ostream::write(v61, "guid: ", 6uLL);
        }
        sub_1C5E21910(v61, *v48, 0, 0, 0);
        goto LABEL_87;
      }
      v51 = ***(_QWORD ***)v50;
      v52 = *(_QWORD *)(v51 + 152);
      v53 = *(unsigned int *)(v51 + 168);
      if (!(_DWORD)v53)
        goto LABEL_59;
      LODWORD(v54) = (v53 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v55 = (uint64_t *)(v52 + 16 * v54);
      v56 = *v55;
      if (*v55 != v50)
        break;
LABEL_60:
      v59 = (uint64_t *)v55[1];
LABEL_61:
      v60 = *v59;
      v61 = v536[0];
      v63 = (_QWORD *)((char *)v536[0] + 32);
      v62 = *((_QWORD *)v536[0] + 4);
      v64 = *((_QWORD *)v536[0] + 3) - v62;
      if (!v60)
        goto LABEL_76;
      if (v64 > 6)
      {
        *(_DWORD *)(v62 + 3) = 572537445;
        *(_DWORD *)v62 = 1701667182;
        *v63 += 7;
        if (!v49)
        {
LABEL_80:
          v75 = (char *)v48[1];
          v76 = v48[2];
          goto LABEL_81;
        }
      }
      else
      {
        llvm::raw_ostream::write(v536[0], "name: \"", 7uLL);
        if (!v49)
          goto LABEL_80;
      }
      v65 = v48[1];
      if ((*(_BYTE *)(v65 + 23) & 0x10) == 0)
      {
        v76 = 0;
        v75 = &byte_1C871356D;
        goto LABEL_81;
      }
      v66 = ***(_QWORD ***)v65;
      v67 = *(_QWORD *)(v66 + 152);
      v68 = *(unsigned int *)(v66 + 168);
      if (!(_DWORD)v68)
        goto LABEL_71;
      LODWORD(v69) = (v68 - 1) & ((v65 >> 4) ^ (v65 >> 9));
      v70 = (uint64_t *)(v67 + 16 * v69);
      v71 = *v70;
      if (*v70 != v65)
      {
        v72 = 1;
        while (v71 != -4096)
        {
          v73 = v69 + v72++;
          v69 = v73 & (v68 - 1);
          v71 = *(_QWORD *)(v67 + 16 * v69);
          if (v71 == v65)
          {
            v70 = (uint64_t *)(v67 + 16 * v69);
            goto LABEL_72;
          }
        }
LABEL_71:
        v70 = (uint64_t *)(v67 + 16 * v68);
      }
LABEL_72:
      v74 = (_QWORD *)v70[1];
      v77 = *v74;
      v75 = (char *)(v74 + 2);
      v76 = v77;
LABEL_81:
      v78 = (_BYTE *)*((_QWORD *)v61 + 4);
      if (v76 <= *((_QWORD *)v61 + 3) - (_QWORD)v78)
      {
        if (v76)
        {
          memcpy(v78, v75, v76);
          v78 = (_BYTE *)(*v63 + v76);
          *v63 = v78;
        }
      }
      else
      {
        llvm::raw_ostream::write(v61, v75, v76);
        v78 = (_BYTE *)*((_QWORD *)v61 + 4);
      }
      if (*((_BYTE **)v61 + 3) == v78)
      {
        llvm::raw_ostream::write(v61, "\"", 1uLL);
      }
      else
      {
        *v78 = 34;
        ++*v63;
      }
LABEL_87:
      if (v48[4] != v48[3])
      {
        v79 = v536[0];
        v80 = (void *)*((_QWORD *)v536[0] + 4);
        if (*((_QWORD *)v536[0] + 3) - (_QWORD)v80 > 0xDuLL)
        {
          qmemcpy(v80, ", summaries: (", 14);
          *((_QWORD *)v79 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(v536[0], ", summaries: (", 0xEuLL);
        }
        v81 = (_QWORD *)v48[3];
        v521 = (_QWORD *)v48[4];
        if (v521 != v81)
        {
          v82 = 0;
          v519 = v49;
          v520 = v48;
          while (1)
          {
            if ((v82 & 1) != 0)
            {
              v83 = v536[0];
              v84 = (_WORD *)*((_QWORD *)v536[0] + 4);
              if (*((_QWORD *)v536[0] + 3) - (_QWORD)v84 > 1uLL)
              {
                *v84 = 8236;
                *((_QWORD *)v83 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], ", ", 2uLL);
              }
            }
            v523 = v81;
            v85 = *v81;
            v86 = v536[0];
            v87 = *(unsigned int *)(v85 + 12);
            v88 = off_1E814DD98[*(int *)(v85 + 8)];
            v89 = strlen(v88);
            v90 = (_WORD *)*((_QWORD *)v536[0] + 4);
            if (v89 <= *((_QWORD *)v536[0] + 3) - (_QWORD)v90)
            {
              if (v89)
              {
                memcpy(v90, v88, v89);
                v90 = (_WORD *)(*((_QWORD *)v86 + 4) + v89);
                *((_QWORD *)v86 + 4) = v90;
              }
            }
            else
            {
              llvm::raw_ostream::write(v536[0], v88, v89);
              v90 = (_WORD *)*((_QWORD *)v86 + 4);
            }
            if (*((_QWORD *)v86 + 3) - (_QWORD)v90 > 1uLL)
            {
              *v90 = 8250;
              *((_QWORD *)v86 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v86, ": ", 2uLL);
            }
            v91 = v536[0];
            v92 = *((_QWORD *)v536[0] + 4);
            if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v92) > 9)
            {
              *(_WORD *)(v92 + 8) = 24096;
              *(_QWORD *)v92 = *(_QWORD *)"(module: ^";
              *((_QWORD *)v91 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], "(module: ^", 0xAuLL);
            }
            v93 = llvm::SlotTracker::getModulePathSlot((uint64_t)v539, *(unsigned __int8 **)(v85 + 24), *(_QWORD *)(v85 + 32));
            v94 = v93;
            if (v93 < 0)
            {
              v94 = -(uint64_t)v93;
              v95 = v91;
              v96 = 1;
            }
            else
            {
              v95 = v91;
              v96 = 0;
            }
            sub_1C5E21910(v95, v94, 0, 0, v96);
            v97 = *((_QWORD *)v91 + 4);
            if ((unint64_t)(*((_QWORD *)v91 + 3) - v97) > 9)
            {
              *(_WORD *)(v97 + 8) = 10272;
              *(_QWORD *)v97 = *(_QWORD *)", flags: (";
              *((_QWORD *)v91 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(v91, ", flags: (", 0xAuLL);
            }
            v98 = v536[0];
            v99 = *((_QWORD *)v536[0] + 4);
            if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v99) > 8)
            {
              *(_BYTE *)(v99 + 8) = 32;
              *(_QWORD *)v99 = *(_QWORD *)"linkage: ";
              *((_QWORD *)v98 + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], "linkage: ", 9uLL);
            }
            sub_1C531C04C((uint64_t)__dst, v87 & 0xF);
            if (__dst[23] >= 0)
              v100 = __dst;
            else
              v100 = *(const char **)__dst;
            if (__dst[23] >= 0)
              v101 = __dst[23] & 0x7F;
            else
              v101 = *(_QWORD *)&__dst[8];
            llvm::raw_ostream::write(v98, v100, v101);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            v102 = v536[0];
            v103 = (void *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v103 > 0xDuLL)
            {
              qmemcpy(v103, ", visibility: ", 14);
              *((_QWORD *)v102 + 4) += 14;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], ", visibility: ", 0xEuLL);
            }
            v104 = off_1E814DDB0[(v87 >> 4) & 3];
            v105 = strlen(v104);
            v106 = (void *)*((_QWORD *)v102 + 4);
            if (v105 <= *((_QWORD *)v102 + 3) - (_QWORD)v106)
            {
              if (v105)
              {
                memcpy(v106, v104, v105);
                *((_QWORD *)v102 + 4) += v105;
              }
            }
            else
            {
              llvm::raw_ostream::write(v102, v104, v105);
            }
            v107 = v536[0];
            v108 = (void *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v108 > 0x16uLL)
            {
              qmemcpy(v108, ", notEligibleToImport: ", 23);
              *((_QWORD *)v107 + 4) += 23;
            }
            else
            {
              v107 = llvm::raw_ostream::write(v536[0], ", notEligibleToImport: ", 0x17uLL);
            }
            sub_1C5E21910(v107, (v87 >> 6) & 1, 0, 0, 0);
            v109 = v536[0];
            v110 = (_QWORD *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v110 > 7uLL)
            {
              *v110 = 0x203A6576696C202CLL;
              *((_QWORD *)v109 + 4) += 8;
            }
            else
            {
              v109 = llvm::raw_ostream::write(v536[0], ", live: ", 8uLL);
            }
            sub_1C5E21910(v109, (v87 >> 7) & 1, 0, 0, 0);
            v111 = v536[0];
            v112 = *((_QWORD *)v536[0] + 4);
            if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v112) > 0xB)
            {
              *(_DWORD *)(v112 + 8) = 540699745;
              *(_QWORD *)v112 = *(_QWORD *)", dsoLocal: ";
              *((_QWORD *)v111 + 4) += 12;
            }
            else
            {
              v111 = llvm::raw_ostream::write(v536[0], ", dsoLocal: ", 0xCuLL);
            }
            sub_1C5E21910(v111, (v87 >> 8) & 1, 0, 0, 0);
            v113 = v536[0];
            v114 = (void *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v114 > 0xEuLL)
            {
              qmemcpy(v114, ", canAutoHide: ", 15);
              *((_QWORD *)v113 + 4) += 15;
            }
            else
            {
              v113 = llvm::raw_ostream::write(v536[0], ", canAutoHide: ", 0xFuLL);
            }
            sub_1C5E21910(v113, (v87 >> 9) & 1, 0, 0, 0);
            v115 = v536[0];
            v116 = (_BYTE *)*((_QWORD *)v536[0] + 4);
            if (*((_BYTE **)v536[0] + 3) == v116)
            {
              llvm::raw_ostream::write(v536[0], ")", 1uLL);
            }
            else
            {
              *v116 = 41;
              ++*((_QWORD *)v115 + 4);
            }
            v117 = *(_DWORD *)(v85 + 8);
            if (v117 == 1)
              break;
            if (!v117)
            {
              v118 = v536[0];
              v119 = *((_QWORD *)v536[0] + 4);
              if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v119) > 0xA)
              {
                *(_DWORD *)(v119 + 7) = 540697957;
                *(_QWORD *)v119 = *(_QWORD *)", aliasee: ";
                *((_QWORD *)v118 + 4) += 11;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], ", aliasee: ", 0xBuLL);
              }
              v120 = v536[0];
              v122 = (_BYTE *)*((_QWORD *)v536[0] + 3);
              v121 = (_BYTE *)*((_QWORD *)v536[0] + 4);
              if (*(_QWORD *)(v85 + 72))
              {
                if (v122 == v121)
                {
                  llvm::raw_ostream::write(v536[0], "^", 1uLL);
                }
                else
                {
                  *v121 = 94;
                  ++*((_QWORD *)v120 + 4);
                }
                v307 = v539;
                *(_QWORD *)__dst = *(_QWORD *)(v85 + 72);
                v308 = sub_1C617C470((uint64_t)&v568, (uint64_t *)__dst);
                v309 = llvm::SlotTracker::getGUIDSlot(v307, v308[1]);
                v310 = v309;
                if (v309 < 0)
                {
                  v310 = -(uint64_t)v309;
                  v311 = v120;
                  v312 = 1;
                }
                else
                {
                  v311 = v120;
                  v312 = 0;
                }
                sub_1C5E21910(v311, v310, 0, 0, v312);
              }
              else
              {
                if ((unint64_t)(v122 - v121) <= 3)
                {
                  v123 = v536[0];
                  v124 = "null";
                  v125 = 4;
LABEL_369:
                  llvm::raw_ostream::write(v123, v124, v125);
                  goto LABEL_370;
                }
                *(_DWORD *)v121 = 1819047278;
                *((_QWORD *)v120 + 4) += 4;
              }
              goto LABEL_370;
            }
            v141 = *(_QWORD *)(v85 + 64);
            if (v141)
            {
              v142 = *(_QWORD **)v141;
              v143 = (uint64_t)(*(_QWORD *)(v141 + 8) - *(_QWORD *)v141) >> 4;
            }
            else
            {
              v142 = 0;
              v143 = 0;
            }
            v144 = v536[0];
            v145 = (void *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v145 > 0x16uLL)
            {
              qmemcpy(v145, ", varFlags: (readonly: ", 23);
              *((_QWORD *)v144 + 4) += 23;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], ", varFlags: (readonly: ", 0x17uLL);
            }
            sub_1C5E21910(v144, *(_BYTE *)(v85 + 72) & 1, 0, 0, 0);
            v146 = (_WORD *)*((_QWORD *)v144 + 4);
            if (*((_QWORD *)v144 + 3) - (_QWORD)v146 > 1uLL)
            {
              *v146 = 8236;
              v147 = *((_QWORD *)v144 + 4) + 2;
              *((_QWORD *)v144 + 4) = v147;
            }
            else
            {
              llvm::raw_ostream::write(v144, ", ", 2uLL);
              v147 = *((_QWORD *)v144 + 4);
            }
            if ((unint64_t)(*((_QWORD *)v144 + 3) - v147) > 0xA)
            {
              *(_DWORD *)(v147 + 7) = 540703084;
              *(_QWORD *)v147 = *(_QWORD *)"writeonly: ";
              *((_QWORD *)v144 + 4) += 11;
            }
            else
            {
              llvm::raw_ostream::write(v144, "writeonly: ", 0xBuLL);
            }
            sub_1C5E21910(v144, ((unint64_t)*(unsigned __int8 *)(v85 + 72) >> 1) & 1, 0, 0, 0);
            v148 = (_WORD *)*((_QWORD *)v144 + 4);
            if (*((_QWORD *)v144 + 3) - (_QWORD)v148 > 1uLL)
            {
              *v148 = 8236;
              v149 = *((_QWORD *)v144 + 4) + 2;
              *((_QWORD *)v144 + 4) = v149;
            }
            else
            {
              llvm::raw_ostream::write(v144, ", ", 2uLL);
              v149 = *((_QWORD *)v144 + 4);
            }
            if ((unint64_t)(*((_QWORD *)v144 + 3) - v149) > 9)
            {
              *(_WORD *)(v149 + 8) = 8250;
              *(_QWORD *)v149 = *(_QWORD *)"constant: ";
              *((_QWORD *)v144 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(v144, "constant: ", 0xAuLL);
            }
            sub_1C5E21910(v144, ((unint64_t)*(unsigned __int8 *)(v85 + 72) >> 2) & 1, 0, 0, 0);
            v123 = v536[0];
            v151 = (char *)*((_QWORD *)v536[0] + 3);
            v150 = (char *)*((_QWORD *)v536[0] + 4);
            if (v143)
            {
              if ((unint64_t)(v151 - v150) > 1)
              {
                *(_WORD *)v150 = 8236;
                v152 = *((_QWORD *)v123 + 4) + 2;
                *((_QWORD *)v123 + 4) = v152;
              }
              else
              {
                v123 = llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                v152 = *((_QWORD *)v123 + 4);
              }
              if ((unint64_t)(*((_QWORD *)v123 + 3) - v152) > 0x11)
              {
                *(_WORD *)(v152 + 16) = 8250;
                *(_OWORD *)v152 = *(_OWORD *)"vcall_visibility: ";
                *((_QWORD *)v123 + 4) += 18;
              }
              else
              {
                v123 = llvm::raw_ostream::write(v123, "vcall_visibility: ", 0x12uLL);
              }
              sub_1C5E21910(v123, ((unint64_t)*(unsigned __int8 *)(v85 + 72) >> 3) & 3, 0, 0, 0);
              v153 = v536[0];
              v154 = (_BYTE *)*((_QWORD *)v536[0] + 4);
              if (*((_BYTE **)v536[0] + 3) == v154)
              {
                llvm::raw_ostream::write(v536[0], ")", 1uLL);
              }
              else
              {
                *v154 = 41;
                ++*((_QWORD *)v153 + 4);
              }
              v155 = v536[0];
              v156 = (_OWORD *)*((_QWORD *)v536[0] + 4);
              if (*((_QWORD *)v536[0] + 3) - (_QWORD)v156 > 0xFuLL)
              {
                *v156 = *(_OWORD *)", vTableFuncs: (";
                *((_QWORD *)v155 + 4) += 16;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], ", vTableFuncs: (", 0x10uLL);
              }
              v157 = 0;
              v158 = &v142[2 * v143];
              do
              {
                if ((v157 & 1) != 0)
                {
                  v159 = v536[0];
                  v160 = (_WORD *)*((_QWORD *)v536[0] + 4);
                  if (*((_QWORD *)v536[0] + 3) - (_QWORD)v160 > 1uLL)
                  {
                    *v160 = 8236;
                    *((_QWORD *)v159 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                  }
                }
                v161 = v536[0];
                v162 = *((_QWORD *)v536[0] + 4);
                if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v162) > 0xB)
                {
                  *(_DWORD *)(v162 + 8) = 1579170403;
                  *(_QWORD *)v162 = *(_QWORD *)"(virtFunc: ^";
                  *((_QWORD *)v161 + 4) += 12;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], "(virtFunc: ^", 0xCuLL);
                }
                v163 = llvm::SlotTracker::getGUIDSlot(v539, *(_QWORD *)(*v142 & 0xFFFFFFFFFFFFFFF8));
                v164 = v163;
                if (v163 < 0)
                {
                  v164 = -(uint64_t)v163;
                  v165 = v161;
                  v166 = 1;
                }
                else
                {
                  v165 = v161;
                  v166 = 0;
                }
                sub_1C5E21910(v165, v164, 0, 0, v166);
                v167 = *((_QWORD *)v161 + 4);
                if ((unint64_t)(*((_QWORD *)v161 + 3) - v167) > 9)
                {
                  *(_WORD *)(v167 + 8) = 8250;
                  *(_QWORD *)v167 = *(_QWORD *)", offset: ";
                  *((_QWORD *)v161 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(v161, ", offset: ", 0xAuLL);
                }
                sub_1C5E21910(v161, v142[1], 0, 0, 0);
                v168 = v536[0];
                v169 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                if (*((_BYTE **)v536[0] + 3) == v169)
                {
                  llvm::raw_ostream::write(v536[0], ")", 1uLL);
                }
                else
                {
                  *v169 = 41;
                  ++*((_QWORD *)v168 + 4);
                }
                v142 += 2;
                v157 = 1;
              }
              while (v142 != v158);
LABEL_366:
              v123 = v536[0];
              v151 = (char *)*((_QWORD *)v536[0] + 3);
              v150 = (char *)*((_QWORD *)v536[0] + 4);
            }
            if (v151 == v150)
            {
              v124 = ")";
              v125 = 1;
              goto LABEL_369;
            }
            *v150 = 41;
            ++*((_QWORD *)v123 + 4);
LABEL_370:
            v281 = *(char **)(v85 + 40);
            v280 = *(char **)(v85 + 48);
            v282 = v280 - v281;
            if (v280 != v281)
            {
              v283 = v536[0];
              v284 = *((_QWORD *)v536[0] + 4);
              if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v284) > 8)
              {
                *(_BYTE *)(v284 + 8) = 40;
                *(_QWORD *)v284 = *(_QWORD *)", refs: (";
                *((_QWORD *)v283 + 4) += 9;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], ", refs: (", 9uLL);
              }
              v285 = 0;
              v286 = 8 * (v282 >> 3);
              while (1)
              {
                if ((v285 & 1) != 0)
                {
                  v287 = v536[0];
                  v288 = (_WORD *)*((_QWORD *)v536[0] + 4);
                  if (*((_QWORD *)v536[0] + 3) - (_QWORD)v288 > 1uLL)
                  {
                    *v288 = 8236;
                    *((_QWORD *)v287 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                  }
                }
                if ((*(_QWORD *)v281 & 2) != 0)
                  break;
                if ((*(_QWORD *)v281 & 4) != 0)
                {
                  v289 = v536[0];
                  v290 = *((_QWORD *)v536[0] + 4);
                  if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v290) > 9)
                  {
                    *(_WORD *)(v290 + 8) = 8313;
                    *(_QWORD *)v290 = *(_QWORD *)"writeonly ";
                    v300 = *((_QWORD *)v289 + 4) + 10;
                    goto LABEL_394;
                  }
                  v291 = "writeonly ";
                  v292 = 10;
LABEL_383:
                  llvm::raw_ostream::write(v289, v291, v292);
                }
LABEL_384:
                v294 = v536[0];
                v295 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                if (*((_BYTE **)v536[0] + 3) == v295)
                {
                  llvm::raw_ostream::write(v536[0], "^", 1uLL);
                }
                else
                {
                  *v295 = 94;
                  ++*((_QWORD *)v294 + 4);
                }
                v296 = llvm::SlotTracker::getGUIDSlot(v539, *(_QWORD *)(*(_QWORD *)v281 & 0xFFFFFFFFFFFFFFF8));
                v297 = v296;
                if (v296 < 0)
                {
                  v297 = -(uint64_t)v296;
                  v298 = v294;
                  v299 = 1;
                }
                else
                {
                  v298 = v294;
                  v299 = 0;
                }
                sub_1C5E21910(v298, v297, 0, 0, v299);
                v281 += 8;
                v285 = 1;
                v286 -= 8;
                if (!v286)
                {
                  v301 = v536[0];
                  v302 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                  if (*((_BYTE **)v536[0] + 3) == v302)
                  {
                    llvm::raw_ostream::write(v536[0], ")", 1uLL);
                  }
                  else
                  {
                    *v302 = 41;
                    ++*((_QWORD *)v301 + 4);
                  }
                  goto LABEL_398;
                }
              }
              v289 = v536[0];
              v293 = *((_QWORD *)v536[0] + 4);
              if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v293) > 8)
              {
                *(_BYTE *)(v293 + 8) = 32;
                *(_QWORD *)v293 = *(_QWORD *)"readonly ";
                v300 = *((_QWORD *)v289 + 4) + 9;
LABEL_394:
                *((_QWORD *)v289 + 4) = v300;
                goto LABEL_384;
              }
              v291 = "readonly ";
              v292 = 9;
              goto LABEL_383;
            }
LABEL_398:
            v303 = v536[0];
            v304 = (_BYTE *)*((_QWORD *)v536[0] + 4);
            if (*((_BYTE **)v536[0] + 3) == v304)
            {
              llvm::raw_ostream::write(v536[0], ")", 1uLL);
            }
            else
            {
              *v304 = 41;
              ++*((_QWORD *)v303 + 4);
            }
            v49 = v519;
            v48 = v520;
            v81 = v523 + 1;
            v82 = 1;
            if (v523 + 1 == v521)
              goto LABEL_470;
          }
          v126 = v536[0];
          v127 = *((_QWORD *)v536[0] + 4);
          if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v127) > 8)
          {
            *(_BYTE *)(v127 + 8) = 32;
            *(_QWORD *)v127 = *(_QWORD *)", insts: ";
            *((_QWORD *)v126 + 4) += 9;
          }
          else
          {
            v126 = llvm::raw_ostream::write(v536[0], ", insts: ", 9uLL);
          }
          sub_1C5E21910(v126, *(unsigned int *)(v85 + 64), 0, 0, 0);
          if ((*(_WORD *)(v85 + 68) & 0x3FF) != 0)
          {
            v128 = v536[0];
            v129 = (_WORD *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v129 > 1uLL)
            {
              *v129 = 8236;
              *((_QWORD *)v128 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], ", ", 2uLL);
            }
            v130 = *(_DWORD *)(v85 + 68);
            v607 = 0uLL;
            v608 = 0;
            *(_DWORD *)&__dst[8] = 0;
            v603 = 0;
            v604 = 0;
            *(_QWORD *)__dst = &unk_1E81A7208;
            v606 = &v607;
            v605 = 0;
            v601 = 0;
            v602 = 0;
            *(_QWORD *)&__dst[16] = 0;
            llvm::raw_ostream::write((llvm::raw_ostream *)__dst, "funcFlags: (", 0xCuLL);
            v131 = v602;
            if ((unint64_t)(v601 - v602) > 9)
            {
              *((_WORD *)v602 + 4) = 8250;
              *v131 = *(_QWORD *)"readNone: ";
              v602 += 10;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, "readNone: ", 0xAuLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, v130 & 1, 0, 0, 0);
            v132 = v602;
            if ((unint64_t)(v601 - v602) > 0xB)
            {
              *((_DWORD *)v602 + 2) = 540703084;
              *v132 = *(_QWORD *)", readOnly: ";
              v602 += 12;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", readOnly: ", 0xCuLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 1) & 1, 0, 0, 0);
            v133 = v602;
            if ((unint64_t)(v601 - v602) > 0xC)
            {
              *(_QWORD *)v602 = *(_QWORD *)", noRecurse: ";
              *(_QWORD *)(v133 + 5) = *(_QWORD *)"ecurse: ";
              v602 += 13;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", noRecurse: ", 0xDuLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 2) & 1, 0, 0, 0);
            v134 = v602;
            if ((unint64_t)(v601 - v602) > 0x15)
            {
              *(_OWORD *)v602 = *(_OWORD *)", returnDoesNotAlias: ";
              *(_QWORD *)(v134 + 14) = *(_QWORD *)"tAlias: ";
              v602 += 22;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", returnDoesNotAlias: ", 0x16uLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 3) & 1, 0, 0, 0);
            v135 = v602;
            if ((unint64_t)(v601 - v602) > 0xB)
            {
              *((_DWORD *)v602 + 2) = 540697966;
              *v135 = *(_QWORD *)", noInline: ";
              v602 += 12;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", noInline: ", 0xCuLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 4) & 1, 0, 0, 0);
            if ((unint64_t)(v601 - v602) > 0xF)
            {
              *(_OWORD *)v602 = *(_OWORD *)", alwaysInline: ";
              v602 += 16;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", alwaysInline: ", 0x10uLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 5) & 1, 0, 0, 0);
            v136 = v602;
            if ((unint64_t)(v601 - v602) > 0xB)
            {
              *((_DWORD *)v602 + 2) = 540697710;
              *v136 = *(_QWORD *)", noUnwind: ";
              v602 += 12;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", noUnwind: ", 0xCuLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 6) & 1, 0, 0, 0);
            v137 = v602;
            if ((unint64_t)(v601 - v602) > 0xB)
            {
              *((_DWORD *)v602 + 2) = 540702575;
              *v137 = *(_QWORD *)", mayThrow: ";
              v602 += 12;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", mayThrow: ", 0xCuLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 7) & 1, 0, 0, 0);
            v138 = v602;
            if ((unint64_t)(v601 - v602) > 0x11)
            {
              *((_WORD *)v602 + 8) = 8250;
              *v138 = *(_OWORD *)", hasUnknownCall: ";
              v602 += 18;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", hasUnknownCall: ", 0x12uLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 8) & 1, 0, 0, 0);
            v139 = v602;
            if ((unint64_t)(v601 - v602) > 0x14)
            {
              *(_OWORD *)v602 = *(_OWORD *)", mustBeUnreachable: ";
              *(_QWORD *)(v139 + 13) = *(_QWORD *)"chable: ";
              v602 += 21;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ", mustBeUnreachable: ", 0x15uLL);
            }
            sub_1C5E21910((llvm::raw_ostream *)__dst, (v130 >> 9) & 1, 0, 0, 0);
            if (v601 == v602)
              llvm::raw_ostream::write((llvm::raw_ostream *)__dst, ")", 1uLL);
            else
              *v602++ = 41;
            if (*((char *)v606 + 23) < 0)
            {
              sub_1C47EBC30(&__p, *(void **)v606, *((_QWORD *)v606 + 1));
            }
            else
            {
              v140 = *v606;
              v599 = *((_QWORD *)v606 + 2);
              __p = v140;
            }
            *(_QWORD *)__dst = off_1E81A6E70;
            if (v605 == 1 && *(_QWORD *)&__dst[16])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&__dst[16], 0x1000C8077774924);
            if (SHIBYTE(v608) < 0)
              operator delete((void *)v607);
            if (v599 >= 0)
              p_p = (const char *)&__p;
            else
              p_p = (const char *)__p;
            if (v599 >= 0)
              v171 = HIBYTE(v599) & 0x7F;
            else
              v171 = *((_QWORD *)&__p + 1);
            llvm::raw_ostream::write(v128, p_p, v171);
            if (SHIBYTE(v599) < 0)
              operator delete((void *)__p);
          }
          if (*(_QWORD *)(v85 + 88) != *(_QWORD *)(v85 + 80))
          {
            v172 = v536[0];
            v173 = *((_QWORD *)v536[0] + 4);
            if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v173) > 9)
            {
              *(_WORD *)(v173 + 8) = 10272;
              *(_QWORD *)v173 = *(_QWORD *)", calls: (";
              *((_QWORD *)v172 + 4) += 10;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], ", calls: (", 0xAuLL);
            }
            v175 = *(_QWORD *)(v85 + 80);
            v174 = *(_QWORD *)(v85 + 88);
            v176 = v174 - v175;
            if (v174 != v175)
            {
              v177 = 0;
              v178 = 16 * (v176 >> 4);
              v179 = (_DWORD *)(v175 + 8);
              do
              {
                if ((v177 & 1) != 0)
                {
                  v180 = v536[0];
                  v181 = (_WORD *)*((_QWORD *)v536[0] + 4);
                  if (*((_QWORD *)v536[0] + 3) - (_QWORD)v181 > 1uLL)
                  {
                    *v181 = 8236;
                    *((_QWORD *)v180 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                  }
                }
                v182 = v536[0];
                v183 = *((_QWORD *)v536[0] + 4);
                if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v183) > 9)
                {
                  *(_WORD *)(v183 + 8) = 24096;
                  *(_QWORD *)v183 = *(_QWORD *)"(callee: ^";
                  *((_QWORD *)v182 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], "(callee: ^", 0xAuLL);
                }
                v184 = llvm::SlotTracker::getGUIDSlot(v539, *(_QWORD *)(*((_QWORD *)v179 - 1) & 0xFFFFFFFFFFFFFFF8));
                v185 = v184;
                if (v184 < 0)
                {
                  v185 = -(uint64_t)v184;
                  v186 = v182;
                  v187 = 1;
                }
                else
                {
                  v186 = v182;
                  v187 = 0;
                }
                sub_1C5E21910(v186, v185, 0, 0, v187);
                if ((*v179 & 7) != 0)
                {
                  v188 = v536[0];
                  v189 = *((_QWORD *)v536[0] + 4);
                  if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v189) > 0xA)
                  {
                    *(_DWORD *)(v189 + 7) = 540701555;
                    *(_QWORD *)v189 = *(_QWORD *)", hotness: ";
                    *((_QWORD *)v188 + 4) += 11;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", hotness: ", 0xBuLL);
                  }
                  v190 = off_1E814DDC8[*v179 & 7];
                  v191 = strlen(v190);
                  v192 = (void *)*((_QWORD *)v188 + 4);
                  if (v191 <= *((_QWORD *)v188 + 3) - (_QWORD)v192)
                  {
                    if (v191)
                    {
                      memcpy(v192, v190, v191);
                      *((_QWORD *)v188 + 4) += v191;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v188, v190, v191);
                  }
                }
                else if (*v179 >= 8u)
                {
                  v193 = v536[0];
                  v194 = *((_QWORD *)v536[0] + 4);
                  if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v194) > 8)
                  {
                    *(_BYTE *)(v194 + 8) = 32;
                    *(_QWORD *)v194 = *(_QWORD *)", relbf: ";
                    *((_QWORD *)v193 + 4) += 9;
                  }
                  else
                  {
                    v193 = llvm::raw_ostream::write(v536[0], ", relbf: ", 9uLL);
                  }
                  sub_1C5E21910(v193, (unint64_t)*v179 >> 3, 0, 0, 0);
                }
                v195 = v536[0];
                v196 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                if (*((_BYTE **)v536[0] + 3) == v196)
                {
                  llvm::raw_ostream::write(v536[0], ")", 1uLL);
                }
                else
                {
                  *v196 = 41;
                  ++*((_QWORD *)v195 + 4);
                }
                v179 += 4;
                v177 = 1;
                v178 -= 16;
              }
              while (v178);
            }
            v197 = v536[0];
            v198 = (_BYTE *)*((_QWORD *)v536[0] + 4);
            if (*((_BYTE **)v536[0] + 3) == v198)
            {
              llvm::raw_ostream::write(v536[0], ")", 1uLL);
            }
            else
            {
              *v198 = 41;
              ++*((_QWORD *)v197 + 4);
            }
          }
          v199 = *(_QWORD *)(v85 + 104);
          if (v199)
          {
            v200 = v536[0];
            v201 = (void *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v201 > 0xEuLL)
            {
              qmemcpy(v201, ", typeIdInfo: (", 15);
              *((_QWORD *)v200 + 4) += 15;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], ", typeIdInfo: (", 0xFuLL);
            }
            if (*(_QWORD *)v199 == *(_QWORD *)(v199 + 8))
            {
              v228 = (unint64_t **)(v199 + 24);
              if (*(_QWORD *)(v199 + 24) != *(_QWORD *)(v199 + 32))
                goto LABEL_299;
              v231 = (unint64_t **)(v199 + 48);
              if (*(_QWORD *)(v199 + 48) != *(_QWORD *)(v199 + 56))
              {
LABEL_303:
                sub_1C53232F8((uint64_t *)v536, v231, "typeCheckedLoadVCalls");
                goto LABEL_304;
              }
              v234 = (_QWORD *)(v199 + 72);
              if (*(_QWORD *)(v199 + 72) != *(_QWORD *)(v199 + 80))
              {
LABEL_307:
                sub_1C5323478((uint64_t *)v536, v234, "typeTestAssumeConstVCalls");
                goto LABEL_308;
              }
              v305 = *(_QWORD *)(v199 + 96);
              v306 = *(_QWORD *)(v199 + 104);
              v239 = (_QWORD *)(v199 + 96);
              if (v305 != v306)
LABEL_311:
                sub_1C5323478((uint64_t *)v536, v239, "typeCheckedLoadConstVCalls");
            }
            else
            {
              v202 = v536[0];
              v203 = *((_QWORD *)v536[0] + 4);
              if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v203) > 0xB)
              {
                *(_DWORD *)(v203 + 8) = 673200755;
                *(_QWORD *)v203 = *(_QWORD *)"typeTests: (";
                *((_QWORD *)v202 + 4) += 12;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], "typeTests: (", 0xCuLL);
              }
              v204 = *(unint64_t **)v199;
              v205 = *(unint64_t **)(v199 + 8);
              if (*(unint64_t **)v199 != v205)
              {
                v206 = 0;
                v207 = 1;
                do
                {
                  v208 = sub_1C4FCD918((uint64_t)v537 + 56, v204);
                  if (v208 == v209)
                  {
                    if ((v206 & 1) != 0)
                    {
                      v224 = v536[0];
                      v225 = (_WORD *)*((_QWORD *)v536[0] + 4);
                      if (*((_QWORD *)v536[0] + 3) - (_QWORD)v225 > 1uLL)
                      {
                        *v225 = 8236;
                        *((_QWORD *)v224 + 4) += 2;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                      }
                    }
                    sub_1C5E21910(v536[0], *v204, 0, 0, 0);
                  }
                  else
                  {
                    v210 = v208;
                    v211 = v209;
                    do
                    {
                      if (!v207)
                      {
                        v212 = v536[0];
                        v213 = (_WORD *)*((_QWORD *)v536[0] + 4);
                        if (*((_QWORD *)v536[0] + 3) - (_QWORD)v213 > 1uLL)
                        {
                          *v213 = 8236;
                          *((_QWORD *)v212 + 4) += 2;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                        }
                      }
                      v214 = *((_BYTE *)v210 + 63);
                      if (v214 >= 0)
                        v215 = (unsigned __int8 *)(v210 + 5);
                      else
                        v215 = (unsigned __int8 *)v210[5];
                      if (v214 >= 0)
                        v216 = v214 & 0x7F;
                      else
                        v216 = v210[6];
                      TypeIdSlot = llvm::SlotTracker::getTypeIdSlot((uint64_t)v539, v215, v216);
                      v218 = v536[0];
                      v219 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                      if (*((_BYTE **)v536[0] + 3) == v219)
                      {
                        v218 = llvm::raw_ostream::write(v536[0], "^", 1uLL);
                      }
                      else
                      {
                        *v219 = 94;
                        ++*((_QWORD *)v218 + 4);
                      }
                      v220 = TypeIdSlot;
                      if (TypeIdSlot < 0)
                      {
                        v220 = -(uint64_t)TypeIdSlot;
                        v221 = 1;
                      }
                      else
                      {
                        v221 = 0;
                      }
                      sub_1C5E21910(v218, v220, 0, 0, v221);
                      v222 = (_QWORD *)v210[1];
                      if (v222)
                      {
                        do
                        {
                          v223 = v222;
                          v222 = (_QWORD *)*v222;
                        }
                        while (v222);
                      }
                      else
                      {
                        do
                        {
                          v223 = (_QWORD *)v210[2];
                          v31 = *v223 == (_QWORD)v210;
                          v210 = v223;
                        }
                        while (!v31);
                      }
                      v207 = 0;
                      v210 = v223;
                    }
                    while (v223 != v211);
                  }
                  v207 = 0;
                  ++v204;
                  v206 = 1;
                }
                while (v204 != v205);
              }
              v226 = v536[0];
              v227 = (_BYTE *)*((_QWORD *)v536[0] + 4);
              if (*((_BYTE **)v536[0] + 3) == v227)
              {
                llvm::raw_ostream::write(v536[0], ")", 1uLL);
              }
              else
              {
                *v227 = 41;
                ++*((_QWORD *)v226 + 4);
              }
              v41 = v517;
              v228 = (unint64_t **)(v199 + 24);
              if (*(_QWORD *)(v199 + 24) != *(_QWORD *)(v199 + 32))
              {
                v229 = v536[0];
                v230 = (_WORD *)*((_QWORD *)v536[0] + 4);
                if (*((_QWORD *)v536[0] + 3) - (_QWORD)v230 > 1uLL)
                {
                  *v230 = 8236;
                  *((_QWORD *)v229 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                }
LABEL_299:
                sub_1C53232F8((uint64_t *)v536, v228, "typeTestAssumeVCalls");
              }
              v231 = (unint64_t **)(v199 + 48);
              if (*(_QWORD *)(v199 + 48) != *(_QWORD *)(v199 + 56))
              {
                v232 = v536[0];
                v233 = (_WORD *)*((_QWORD *)v536[0] + 4);
                if (*((_QWORD *)v536[0] + 3) - (_QWORD)v233 > 1uLL)
                {
                  *v233 = 8236;
                  *((_QWORD *)v232 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                }
                goto LABEL_303;
              }
LABEL_304:
              v234 = (_QWORD *)(v199 + 72);
              if (*(_QWORD *)(v199 + 72) != *(_QWORD *)(v199 + 80))
              {
                v235 = v536[0];
                v236 = (_WORD *)*((_QWORD *)v536[0] + 4);
                if (*((_QWORD *)v536[0] + 3) - (_QWORD)v236 > 1uLL)
                {
                  *v236 = 8236;
                  *((_QWORD *)v235 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                }
                goto LABEL_307;
              }
LABEL_308:
              v237 = *(_QWORD *)(v199 + 96);
              v238 = *(_QWORD *)(v199 + 104);
              v239 = (_QWORD *)(v199 + 96);
              if (v237 != v238)
              {
                v240 = v536[0];
                v241 = (_WORD *)*((_QWORD *)v536[0] + 4);
                if (*((_QWORD *)v536[0] + 3) - (_QWORD)v241 > 1uLL)
                {
                  *v241 = 8236;
                  *((_QWORD *)v240 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                }
                goto LABEL_311;
              }
            }
            v242 = v536[0];
            v243 = (_BYTE *)*((_QWORD *)v536[0] + 4);
            if (*((_BYTE **)v536[0] + 3) == v243)
            {
              llvm::raw_ostream::write(v536[0], ")", 1uLL);
            }
            else
            {
              *v243 = 41;
              ++*((_QWORD *)v242 + 4);
            }
          }
          v244 = *(_QWORD **)(v85 + 112);
          if (!v244 || v244[1] == *v244)
            goto LABEL_370;
          v245 = v536[0];
          v246 = *((_QWORD *)v536[0] + 4);
          if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v246) > 0xA)
          {
            *(_DWORD *)(v246 + 7) = 673200755;
            *(_QWORD *)v246 = *(_QWORD *)", params: (";
            *((_QWORD *)v245 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v536[0], ", params: (", 0xBuLL);
          }
          v247 = *(unint64_t ***)(v85 + 112);
          if (v247)
          {
            v248 = *v247;
            v249 = v247[1];
            if (v249 != *v247)
            {
              v250 = 0;
              do
              {
                if ((v250 & 1) != 0)
                {
                  v251 = v536[0];
                  v252 = (_WORD *)*((_QWORD *)v536[0] + 4);
                  if (*((_QWORD *)v536[0] + 3) - (_QWORD)v252 > 1uLL)
                  {
                    *v252 = 8236;
                    *((_QWORD *)v251 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                  }
                }
                v253 = v536[0];
                v254 = (_QWORD *)*((_QWORD *)v536[0] + 4);
                if (*((_QWORD *)v536[0] + 3) - (_QWORD)v254 > 7uLL)
                {
                  *v254 = 0x203A6D6172617028;
                  *((_QWORD *)v253 + 4) += 8;
                }
                else
                {
                  v253 = llvm::raw_ostream::write(v536[0], "(param: ", 8uLL);
                }
                sub_1C5E21910(v253, *v248, 0, 0, 0);
                v255 = v536[0];
                v256 = *((_QWORD *)v536[0] + 4);
                if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v256) > 9)
                {
                  *(_WORD *)(v256 + 8) = 8250;
                  *(_QWORD *)v256 = *(_QWORD *)", offset: ";
                  *((_QWORD *)v255 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(v536[0], ", offset: ", 0xAuLL);
                }
                sub_1C53230E8(v536[0], (llvm::ConstantRange *)(v248 + 1));
                if (v248[5] != v248[6])
                {
                  v257 = v536[0];
                  v258 = *((_QWORD *)v536[0] + 4);
                  if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v258) > 9)
                  {
                    *(_WORD *)(v258 + 8) = 10272;
                    *(_QWORD *)v258 = *(_QWORD *)", calls: (";
                    *((_QWORD *)v257 + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", calls: (", 0xAuLL);
                  }
                  v259 = (unint64_t *)v248[5];
                  v260 = (unint64_t *)v248[6];
                  if (v259 != v260)
                  {
                    v261 = 0;
                    do
                    {
                      if ((v261 & 1) != 0)
                      {
                        v262 = v536[0];
                        v263 = (_WORD *)*((_QWORD *)v536[0] + 4);
                        if (*((_QWORD *)v536[0] + 3) - (_QWORD)v263 > 1uLL)
                        {
                          *v263 = 8236;
                          *((_QWORD *)v262 + 4) += 2;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                        }
                      }
                      v264 = v536[0];
                      v265 = *((_QWORD *)v536[0] + 4);
                      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v265) > 9)
                      {
                        *(_WORD *)(v265 + 8) = 24096;
                        *(_QWORD *)v265 = *(_QWORD *)"(callee: ^";
                        *((_QWORD *)v264 + 4) += 10;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v536[0], "(callee: ^", 0xAuLL);
                      }
                      v266 = llvm::SlotTracker::getGUIDSlot(v539, *(_QWORD *)(v259[1] & 0xFFFFFFFFFFFFFFF8));
                      v267 = v266;
                      if (v266 < 0)
                      {
                        v267 = -(uint64_t)v266;
                        v268 = v264;
                        v269 = 1;
                      }
                      else
                      {
                        v268 = v264;
                        v269 = 0;
                      }
                      sub_1C5E21910(v268, v267, 0, 0, v269);
                      v270 = v536[0];
                      v271 = *((_QWORD *)v536[0] + 4);
                      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v271) > 8)
                      {
                        *(_BYTE *)(v271 + 8) = 32;
                        *(_QWORD *)v271 = *(_QWORD *)", param: ";
                        *((_QWORD *)v270 + 4) += 9;
                      }
                      else
                      {
                        v270 = llvm::raw_ostream::write(v536[0], ", param: ", 9uLL);
                      }
                      sub_1C5E21910(v270, *v259, 0, 0, 0);
                      v272 = v536[0];
                      v273 = *((_QWORD *)v536[0] + 4);
                      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v273) > 9)
                      {
                        *(_WORD *)(v273 + 8) = 8250;
                        *(_QWORD *)v273 = *(_QWORD *)", offset: ";
                        *((_QWORD *)v272 + 4) += 10;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v536[0], ", offset: ", 0xAuLL);
                      }
                      sub_1C53230E8(v536[0], (llvm::ConstantRange *)(v259 + 2));
                      v274 = v536[0];
                      v275 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                      if (*((_BYTE **)v536[0] + 3) == v275)
                      {
                        llvm::raw_ostream::write(v536[0], ")", 1uLL);
                      }
                      else
                      {
                        *v275 = 41;
                        ++*((_QWORD *)v274 + 4);
                      }
                      v259 += 6;
                      v261 = 1;
                    }
                    while (v259 != v260);
                  }
                  v276 = v536[0];
                  v277 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                  if (*((_BYTE **)v536[0] + 3) == v277)
                  {
                    llvm::raw_ostream::write(v536[0], ")", 1uLL);
                  }
                  else
                  {
                    *v277 = 41;
                    ++*((_QWORD *)v276 + 4);
                  }
                }
                v278 = v536[0];
                v279 = (_BYTE *)*((_QWORD *)v536[0] + 4);
                if (*((_BYTE **)v536[0] + 3) == v279)
                {
                  llvm::raw_ostream::write(v536[0], ")", 1uLL);
                }
                else
                {
                  *v279 = 41;
                  ++*((_QWORD *)v278 + 4);
                }
                v248 += 8;
                v250 = 1;
              }
              while (v248 != v249);
            }
          }
          goto LABEL_366;
        }
LABEL_470:
        v313 = v536[0];
        v314 = (_BYTE *)*((_QWORD *)v536[0] + 4);
        if (*((_BYTE **)v536[0] + 3) == v314)
        {
          llvm::raw_ostream::write(v536[0], ")", 1uLL);
        }
        else
        {
          *v314 = 41;
          ++*((_QWORD *)v313 + 4);
        }
      }
      v315 = v536[0];
      v316 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v316)
      {
        llvm::raw_ostream::write(v536[0], ")", 1uLL);
        if (!v49)
          goto LABEL_484;
      }
      else
      {
        *v316 = 41;
        ++*((_QWORD *)v315 + 4);
        if (!v49)
        {
LABEL_484:
          v326 = v48 + 2;
LABEL_485:
          if (*v326)
          {
            v327 = v536[0];
            v328 = *((_QWORD *)v536[0] + 4);
            if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v328) > 9)
            {
              *(_WORD *)(v328 + 8) = 8253;
              *(_QWORD *)v328 = *(_QWORD *)" ; guid = ";
              *((_QWORD *)v327 + 4) += 10;
            }
            else
            {
              v327 = llvm::raw_ostream::write(v536[0], " ; guid = ", 0xAuLL);
            }
            sub_1C5E21910(v327, *v48, 0, 0, 0);
          }
          goto LABEL_489;
        }
      }
      v317 = v48[1];
      if ((*(_BYTE *)(v317 + 23) & 0x10) != 0)
      {
        v318 = ***(_QWORD ***)v317;
        v319 = *(_QWORD *)(v318 + 152);
        v320 = *(unsigned int *)(v318 + 168);
        if (!(_DWORD)v320)
          goto LABEL_481;
        LODWORD(v321) = (v320 - 1) & ((v317 >> 4) ^ (v317 >> 9));
        v322 = (uint64_t *)(v319 + 16 * v321);
        v323 = *v322;
        if (*v322 != v317)
        {
          v324 = 1;
          while (v323 != -4096)
          {
            v325 = v321 + v324++;
            v321 = v325 & (v320 - 1);
            v323 = *(_QWORD *)(v319 + 16 * v321);
            if (v323 == v317)
            {
              v322 = (uint64_t *)(v319 + 16 * v321);
              goto LABEL_482;
            }
          }
LABEL_481:
          v322 = (uint64_t *)(v319 + 16 * v320);
        }
LABEL_482:
        v326 = (_QWORD *)v322[1];
        goto LABEL_485;
      }
LABEL_489:
      v329 = v536[0];
      v330 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v330)
      {
        llvm::raw_ostream::write(v536[0], "\n", 1uLL);
      }
      else
      {
        *v330 = 10;
        ++*((_QWORD *)v329 + 4);
      }
      v331 = (char *)*((_QWORD *)v34 + 1);
      if (v331)
      {
        do
        {
          v332 = v331;
          v331 = *(char **)v331;
        }
        while (v331);
      }
      else
      {
        do
        {
          v332 = (char *)*((_QWORD *)v34 + 2);
          v31 = *(_QWORD *)v332 == (_QWORD)v34;
          v34 = v332;
        }
        while (!v31);
      }
      v34 = v332;
      if (v332 == v41)
      {
        v32 = v537;
        goto LABEL_542;
      }
    }
    v57 = 1;
    while (v56 != -4096)
    {
      v58 = v54 + v57++;
      v54 = v58 & (v53 - 1);
      v56 = *(_QWORD *)(v52 + 16 * v54);
      if (v56 == v50)
      {
        v55 = (uint64_t *)(v52 + 16 * v54);
        goto LABEL_60;
      }
    }
LABEL_59:
    v55 = (uint64_t *)(v52 + 16 * v53);
    goto LABEL_60;
  }
LABEL_542:
  v355 = (_QWORD *)*((_QWORD *)v32 + 7);
  v356 = (_QWORD *)((char *)v32 + 64);
  if (v355 != (_QWORD *)((char *)v32 + 64))
  {
    v522 = (char *)v32 + 64;
    do
    {
      v357 = v536[0];
      v358 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v358)
      {
        llvm::raw_ostream::write(v536[0], "^", 1uLL);
      }
      else
      {
        *v358 = 94;
        ++*((_QWORD *)v357 + 4);
      }
      v359 = *((_BYTE *)v355 + 63);
      v360 = v359;
      if (v359 >= 0)
        v361 = (unsigned __int8 *)(v355 + 5);
      else
        v361 = (unsigned __int8 *)v355[5];
      v362 = v359 & 0x7F;
      if (v360 >= 0)
        v363 = v362;
      else
        v363 = v355[6];
      v364 = llvm::SlotTracker::getTypeIdSlot((uint64_t)v539, v361, v363);
      v365 = v364;
      if (v364 < 0)
      {
        v365 = -(uint64_t)v364;
        v366 = v357;
        v367 = 1;
      }
      else
      {
        v366 = v357;
        v367 = 0;
      }
      sub_1C5E21910(v366, v365, 0, 0, v367);
      v368 = *((_QWORD *)v357 + 4);
      if ((unint64_t)(*((_QWORD *)v357 + 3) - v368) > 0x12)
      {
        *(_DWORD *)(v368 + 15) = 572537445;
        *(_OWORD *)v368 = *(_OWORD *)" = typeid: (name: \"";
        *((_QWORD *)v357 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(v357, " = typeid: (name: \"", 0x13uLL);
      }
      v369 = *((_BYTE *)v355 + 63);
      v370 = v369 < 0;
      if (v369 >= 0)
        v371 = (const char *)(v355 + 5);
      else
        v371 = (const char *)v355[5];
      v372 = v369 & 0x7F;
      if (v370)
        v373 = v355[6];
      else
        v373 = v372;
      llvm::raw_ostream::write(v357, v371, v373);
      v374 = (_BYTE *)*((_QWORD *)v357 + 4);
      if (*((_BYTE **)v357 + 3) == v374)
      {
        llvm::raw_ostream::write(v357, "\"", 1uLL);
      }
      else
      {
        *v374 = 34;
        ++*((_QWORD *)v357 + 4);
      }
      v375 = v536[0];
      v376 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v376) > 0xB)
      {
        *(_DWORD *)(v376 + 8) = 673200761;
        *(_QWORD *)v376 = *(_QWORD *)", summary: (";
        *((_QWORD *)v375 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], ", summary: (", 0xCuLL);
      }
      v377 = v536[0];
      v378 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v378) > 0x13)
      {
        *(_DWORD *)(v378 + 16) = 540697710;
        *(_OWORD *)v378 = *(_OWORD *)"typeTestRes: (kind: ";
        *((_QWORD *)v377 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], "typeTestRes: (kind: ", 0x14uLL);
      }
      v379 = off_1E814DDF0[*((int *)v355 + 16)];
      v380 = strlen(v379);
      v381 = (_WORD *)*((_QWORD *)v377 + 4);
      if (v380 <= *((_QWORD *)v377 + 3) - (_QWORD)v381)
      {
        if (v380)
        {
          memcpy(v381, v379, v380);
          v381 = (_WORD *)(*((_QWORD *)v377 + 4) + v380);
          *((_QWORD *)v377 + 4) = v381;
        }
      }
      else
      {
        llvm::raw_ostream::write(v377, v379, v380);
        v381 = (_WORD *)*((_QWORD *)v377 + 4);
      }
      if (*((_QWORD *)v377 + 3) - (_QWORD)v381 > 0x11uLL)
      {
        v381[8] = 8250;
        *(_OWORD *)v381 = *(_OWORD *)", sizeM1BitWidth: ";
        *((_QWORD *)v377 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v377, ", sizeM1BitWidth: ", 0x12uLL);
      }
      sub_1C5E21910(v377, *((unsigned int *)v355 + 17), 0, 0, 0);
      if (v355[9])
      {
        v382 = v536[0];
        v383 = (void *)*((_QWORD *)v536[0] + 4);
        if (*((_QWORD *)v536[0] + 3) - (_QWORD)v383 > 0xCuLL)
        {
          qmemcpy(v383, ", alignLog2: ", 13);
          *((_QWORD *)v382 + 4) += 13;
        }
        else
        {
          v382 = llvm::raw_ostream::write(v536[0], ", alignLog2: ", 0xDuLL);
        }
        sub_1C5E21910(v382, v355[9], 0, 0, 0);
      }
      if (v355[10])
      {
        v384 = v536[0];
        v385 = *((_QWORD *)v536[0] + 4);
        if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v385) > 9)
        {
          *(_WORD *)(v385 + 8) = 8250;
          *(_QWORD *)v385 = *(_QWORD *)", sizeM1: ";
          *((_QWORD *)v384 + 4) += 10;
        }
        else
        {
          v384 = llvm::raw_ostream::write(v536[0], ", sizeM1: ", 0xAuLL);
        }
        sub_1C5E21910(v384, v355[10], 0, 0, 0);
      }
      if (*((_BYTE *)v355 + 88))
      {
        v386 = v536[0];
        v387 = *((_QWORD *)v536[0] + 4);
        if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v387) > 0xA)
        {
          *(_DWORD *)(v387 + 7) = 540699507;
          *(_QWORD *)v387 = *(_QWORD *)", bitMask: ";
          *((_QWORD *)v386 + 4) += 11;
        }
        else
        {
          v386 = llvm::raw_ostream::write(v536[0], ", bitMask: ", 0xBuLL);
        }
        sub_1C5E21910(v386, *((unsigned __int8 *)v355 + 88), 0, 0, 0);
      }
      if (v355[12])
      {
        v388 = v536[0];
        v389 = (void *)*((_QWORD *)v536[0] + 4);
        if (*((_QWORD *)v536[0] + 3) - (_QWORD)v389 > 0xDuLL)
        {
          qmemcpy(v389, ", inlineBits: ", 14);
          *((_QWORD *)v388 + 4) += 14;
        }
        else
        {
          v388 = llvm::raw_ostream::write(v536[0], ", inlineBits: ", 0xEuLL);
        }
        sub_1C5E21910(v388, v355[12], 0, 0, 0);
      }
      v390 = v536[0];
      v391 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v391)
      {
        llvm::raw_ostream::write(v536[0], ")", 1uLL);
      }
      else
      {
        *v391 = 41;
        ++*((_QWORD *)v390 + 4);
      }
      if (v355[15])
      {
        v392 = v536[0];
        v393 = *((_QWORD *)v536[0] + 4);
        if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v393) > 0x12)
        {
          *(_DWORD *)(v393 + 15) = 673200755;
          *(_OWORD *)v393 = *(_OWORD *)", wpdResolutions: (";
          *((_QWORD *)v392 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(v536[0], ", wpdResolutions: (", 0x13uLL);
        }
        v394 = (_QWORD *)v355[13];
        if (v394 != v355 + 14)
        {
          v404 = 0;
          do
          {
            if ((v404 & 1) != 0)
            {
              v405 = v536[0];
              v406 = (_WORD *)*((_QWORD *)v536[0] + 4);
              if (*((_QWORD *)v536[0] + 3) - (_QWORD)v406 > 1uLL)
              {
                *v406 = 8236;
                *((_QWORD *)v405 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], ", ", 2uLL);
              }
            }
            v407 = v536[0];
            v408 = *((_QWORD *)v536[0] + 4);
            if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v408) > 8)
            {
              *(_BYTE *)(v408 + 8) = 32;
              *(_QWORD *)v408 = *(_QWORD *)"(offset: ";
              *((_QWORD *)v407 + 4) += 9;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], "(offset: ", 9uLL);
            }
            sub_1C5E21910(v407, v394[4], 0, 0, 0);
            v409 = (_WORD *)*((_QWORD *)v407 + 4);
            if (*((_QWORD *)v407 + 3) - (_QWORD)v409 > 1uLL)
            {
              *v409 = 8236;
              *((_QWORD *)v407 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v407, ", ", 2uLL);
            }
            v410 = v536[0];
            v411 = (void *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v411 > 0xEuLL)
            {
              qmemcpy(v411, "wpdRes: (kind: ", 15);
              *((_QWORD *)v410 + 4) += 15;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], "wpdRes: (kind: ", 0xFuLL);
            }
            v412 = v536[0];
            v413 = off_1E814DE20[*((int *)v394 + 10)];
            v414 = strlen(v413);
            v415 = (void *)*((_QWORD *)v536[0] + 4);
            if (v414 <= *((_QWORD *)v536[0] + 3) - (_QWORD)v415)
            {
              if (v414)
              {
                memcpy(v415, v413, v414);
                *((_QWORD *)v412 + 4) += v414;
              }
            }
            else
            {
              llvm::raw_ostream::write(v536[0], v413, v414);
            }
            if (*((_DWORD *)v394 + 10) == 1)
            {
              v416 = v536[0];
              v417 = *((_QWORD *)v536[0] + 4);
              if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v417) > 0x12)
              {
                *(_DWORD *)(v417 + 15) = 572537445;
                *(_OWORD *)v417 = *(_OWORD *)", singleImplName: \"";
                *((_QWORD *)v416 + 4) += 19;
              }
              else
              {
                v416 = llvm::raw_ostream::write(v536[0], ", singleImplName: \"", 0x13uLL);
              }
              v418 = *((_BYTE *)v394 + 71);
              if (v418 >= 0)
                v419 = (const char *)(v394 + 6);
              else
                v419 = (const char *)v394[6];
              if (v418 >= 0)
                v420 = v418 & 0x7F;
              else
                v420 = v394[7];
              v421 = llvm::raw_ostream::write(v416, v419, v420);
              v422 = (_BYTE *)*((_QWORD *)v421 + 4);
              if (*((_BYTE **)v421 + 3) == v422)
              {
                llvm::raw_ostream::write(v421, "\"", 1uLL);
              }
              else
              {
                *v422 = 34;
                ++*((_QWORD *)v421 + 4);
              }
            }
            if (v394[11])
            {
              v423 = v536[0];
              v424 = (void *)*((_QWORD *)v536[0] + 4);
              if (*((_QWORD *)v536[0] + 3) - (_QWORD)v424 > 0xCuLL)
              {
                qmemcpy(v424, ", resByArg: (", 13);
                *((_QWORD *)v423 + 4) += 13;
              }
              else
              {
                llvm::raw_ostream::write(v536[0], ", resByArg: (", 0xDuLL);
              }
              v425 = (unint64_t **)v394[9];
              if (v425 != v394 + 10)
              {
                v426 = 0;
                do
                {
                  if ((v426 & 1) != 0)
                  {
                    v427 = v536[0];
                    v428 = (_WORD *)*((_QWORD *)v536[0] + 4);
                    if (*((_QWORD *)v536[0] + 3) - (_QWORD)v428 > 1uLL)
                    {
                      *v428 = 8236;
                      *((_QWORD *)v427 + 4) += 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v536[0], ", ", 2uLL);
                    }
                  }
                  sub_1C5323A88(v536, v425 + 4);
                  v429 = v536[0];
                  v430 = (_OWORD *)*((_QWORD *)v536[0] + 4);
                  if (*((_QWORD *)v536[0] + 3) - (_QWORD)v430 > 0xFuLL)
                  {
                    *v430 = *(_OWORD *)", byArg: (kind: ";
                    *((_QWORD *)v429 + 4) += 16;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], ", byArg: (kind: ", 0x10uLL);
                  }
                  v431 = v536[0];
                  v432 = off_1E814DE38[*((int *)v425 + 14)];
                  v433 = strlen(v432);
                  v434 = (void *)*((_QWORD *)v536[0] + 4);
                  if (v433 <= *((_QWORD *)v536[0] + 3) - (_QWORD)v434)
                  {
                    if (v433)
                    {
                      memcpy(v434, v432, v433);
                      *((_QWORD *)v431 + 4) += v433;
                    }
                  }
                  else
                  {
                    llvm::raw_ostream::write(v536[0], v432, v433);
                  }
                  v435 = v536[0];
                  if ((*((_DWORD *)v425 + 14) - 1) <= 1)
                  {
                    v436 = (_QWORD *)*((_QWORD *)v536[0] + 4);
                    if (*((_QWORD *)v536[0] + 3) - (_QWORD)v436 > 7uLL)
                    {
                      *v436 = 0x203A6F666E69202CLL;
                      *((_QWORD *)v435 + 4) += 8;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v536[0], ", info: ", 8uLL);
                    }
                    sub_1C5E21910(v435, (unint64_t)v425[8], 0, 0, 0);
                    v435 = v536[0];
                  }
                  if (v425[9])
                  {
                    v437 = (_QWORD *)*((_QWORD *)v435 + 4);
                    if (*((_QWORD *)v435 + 3) - (_QWORD)v437 > 7uLL)
                    {
                      *v437 = 0x203A65747962202CLL;
                      *((_QWORD *)v435 + 4) += 8;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v435, ", byte: ", 8uLL);
                    }
                    sub_1C5E21910(v435, *((unsigned int *)v425 + 18), 0, 0, 0);
                    v438 = (_DWORD *)*((_QWORD *)v435 + 4);
                    if (*((_QWORD *)v435 + 3) - (_QWORD)v438 > 6uLL)
                    {
                      *(_DWORD *)((char *)v438 + 3) = 540701801;
                      *v438 = 1768038444;
                      *((_QWORD *)v435 + 4) += 7;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v435, ", bit: ", 7uLL);
                    }
                    sub_1C5E21910(v435, *((unsigned int *)v425 + 19), 0, 0, 0);
                    v435 = v536[0];
                  }
                  v439 = (_BYTE *)*((_QWORD *)v435 + 4);
                  if (*((_BYTE **)v435 + 3) == v439)
                  {
                    llvm::raw_ostream::write(v435, ")", 1uLL);
                  }
                  else
                  {
                    *v439 = 41;
                    ++*((_QWORD *)v435 + 4);
                  }
                  v440 = v425[1];
                  if (v440)
                  {
                    do
                    {
                      v441 = (unint64_t **)v440;
                      v440 = (unint64_t *)*v440;
                    }
                    while (v440);
                  }
                  else
                  {
                    do
                    {
                      v441 = (unint64_t **)v425[2];
                      v31 = *v441 == (unint64_t *)v425;
                      v425 = v441;
                    }
                    while (!v31);
                  }
                  v426 = 1;
                  v425 = v441;
                }
                while (v441 != v394 + 10);
              }
              v442 = v536[0];
              v443 = (_BYTE *)*((_QWORD *)v536[0] + 4);
              if (*((_BYTE **)v536[0] + 3) == v443)
              {
                llvm::raw_ostream::write(v536[0], ")", 1uLL);
              }
              else
              {
                *v443 = 41;
                ++*((_QWORD *)v442 + 4);
              }
            }
            v444 = v536[0];
            v445 = (_BYTE *)*((_QWORD *)v536[0] + 4);
            if (*((_BYTE **)v536[0] + 3) == v445)
            {
              llvm::raw_ostream::write(v536[0], ")", 1uLL);
            }
            else
            {
              *v445 = 41;
              ++*((_QWORD *)v444 + 4);
            }
            v446 = v536[0];
            v447 = (_BYTE *)*((_QWORD *)v536[0] + 4);
            if (*((_BYTE **)v536[0] + 3) == v447)
            {
              llvm::raw_ostream::write(v536[0], ")", 1uLL);
            }
            else
            {
              *v447 = 41;
              ++*((_QWORD *)v446 + 4);
            }
            v448 = (_QWORD *)v394[1];
            if (v448)
            {
              do
              {
                v449 = v448;
                v448 = (_QWORD *)*v448;
              }
              while (v448);
            }
            else
            {
              do
              {
                v449 = (_QWORD *)v394[2];
                v31 = *v449 == (_QWORD)v394;
                v394 = v449;
              }
              while (!v31);
            }
            v404 = 1;
            v394 = v449;
          }
          while (v449 != v355 + 14);
        }
        v395 = v536[0];
        v396 = (_BYTE *)*((_QWORD *)v536[0] + 4);
        if (*((_BYTE **)v536[0] + 3) == v396)
        {
          llvm::raw_ostream::write(v536[0], ")", 1uLL);
        }
        else
        {
          *v396 = 41;
          ++*((_QWORD *)v395 + 4);
        }
        v356 = v522;
      }
      v397 = v536[0];
      v398 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v398)
      {
        llvm::raw_ostream::write(v536[0], ")", 1uLL);
      }
      else
      {
        *v398 = 41;
        ++*((_QWORD *)v397 + 4);
      }
      v399 = v536[0];
      v400 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v400) > 0xA)
      {
        *(_DWORD *)(v400 + 7) = 540876900;
        *(_QWORD *)v400 = *(_QWORD *)") ; guid = ";
        *((_QWORD *)v399 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], ") ; guid = ", 0xBuLL);
      }
      sub_1C5E21910(v399, v355[4], 0, 0, 0);
      v401 = (_BYTE *)*((_QWORD *)v399 + 4);
      if (*((_BYTE **)v399 + 3) == v401)
      {
        llvm::raw_ostream::write(v399, "\n", 1uLL);
      }
      else
      {
        *v401 = 10;
        ++*((_QWORD *)v399 + 4);
      }
      v402 = (_QWORD *)v355[1];
      if (v402)
      {
        do
        {
          v403 = v402;
          v402 = (_QWORD *)*v402;
        }
        while (v402);
      }
      else
      {
        do
        {
          v403 = (_QWORD *)v355[2];
          v31 = *v403 == (_QWORD)v355;
          v355 = v403;
        }
        while (!v31);
      }
      v355 = v403;
    }
    while (v403 != v356);
    v32 = v537;
  }
  v450 = (_QWORD *)*((_QWORD *)v32 + 10);
  v451 = (_QWORD *)((char *)v32 + 88);
  if (v450 != (_QWORD *)((char *)v32 + 88))
  {
    do
    {
      v452 = *((_BYTE *)v450 + 55);
      v453 = v452;
      if (v452 >= 0)
        v454 = (int *)(v450 + 4);
      else
        v454 = (int *)v450[4];
      v455 = v452 & 0x7F;
      if (v453 >= 0)
        v456 = v455;
      else
        v456 = v450[5];
      *(_OWORD *)__dst = xmmword_1C85F4BB0;
      *(_QWORD *)&__dst[16] = 0;
      llvm::MD5::update((int *)__dst, v454, v456);
      llvm::MD5::final((int *)__dst, (int *)&v607);
      v457 = v607;
      v458 = v536[0];
      v459 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v459)
      {
        llvm::raw_ostream::write(v536[0], "^", 1uLL);
      }
      else
      {
        *v459 = 94;
        ++*((_QWORD *)v458 + 4);
      }
      v460 = llvm::SlotTracker::getGUIDSlot(v539, v457);
      v461 = v460;
      if (v460 < 0)
      {
        v461 = -(uint64_t)v460;
        v462 = v458;
        v463 = 1;
      }
      else
      {
        v462 = v458;
        v463 = 0;
      }
      sub_1C5E21910(v462, v461, 0, 0, v463);
      v464 = (void *)*((_QWORD *)v458 + 4);
      if (*((_QWORD *)v458 + 3) - (_QWORD)v464 > 0x22uLL)
      {
        qmemcpy(v464, " = typeidCompatibleVTable: (name: \"", 35);
        *((_QWORD *)v458 + 4) += 35;
      }
      else
      {
        llvm::raw_ostream::write(v458, " = typeidCompatibleVTable: (name: \"", 0x23uLL);
      }
      v465 = *((_BYTE *)v450 + 55);
      v466 = v465 < 0;
      if (v465 >= 0)
        v467 = (const char *)(v450 + 4);
      else
        v467 = (const char *)v450[4];
      v468 = v465 & 0x7F;
      if (v466)
        v469 = v450[5];
      else
        v469 = v468;
      llvm::raw_ostream::write(v458, v467, v469);
      v470 = (_BYTE *)*((_QWORD *)v458 + 4);
      if (*((_BYTE **)v458 + 3) == v470)
      {
        llvm::raw_ostream::write(v458, "\"", 1uLL);
      }
      else
      {
        *v470 = 34;
        ++*((_QWORD *)v458 + 4);
      }
      v471 = v536[0];
      v472 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v472) > 0xB)
      {
        *(_DWORD *)(v472 + 8) = 673200761;
        *(_QWORD *)v472 = *(_QWORD *)", summary: (";
        *((_QWORD *)v471 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], ", summary: (", 0xCuLL);
      }
      v474 = (unint64_t *)v450[7];
      v473 = (unint64_t *)v450[8];
      if (v474 != v473)
      {
        v475 = 0;
        do
        {
          if ((v475 & 1) != 0)
          {
            v476 = v536[0];
            v477 = (_WORD *)*((_QWORD *)v536[0] + 4);
            if (*((_QWORD *)v536[0] + 3) - (_QWORD)v477 > 1uLL)
            {
              *v477 = 8236;
              *((_QWORD *)v476 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v536[0], ", ", 2uLL);
            }
          }
          v478 = v536[0];
          v479 = *((_QWORD *)v536[0] + 4);
          if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v479) > 8)
          {
            *(_BYTE *)(v479 + 8) = 32;
            *(_QWORD *)v479 = *(_QWORD *)"(offset: ";
            *((_QWORD *)v478 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v536[0], "(offset: ", 9uLL);
          }
          sub_1C5E21910(v478, *v474, 0, 0, 0);
          v480 = (_WORD *)*((_QWORD *)v478 + 4);
          if (*((_QWORD *)v478 + 3) - (_QWORD)v480 > 1uLL)
          {
            *v480 = 8236;
            *((_QWORD *)v478 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v478, ", ", 2uLL);
          }
          v481 = v536[0];
          v482 = (_BYTE *)*((_QWORD *)v536[0] + 4);
          if (*((_BYTE **)v536[0] + 3) == v482)
          {
            llvm::raw_ostream::write(v536[0], "^", 1uLL);
          }
          else
          {
            *v482 = 94;
            ++*((_QWORD *)v481 + 4);
          }
          v483 = llvm::SlotTracker::getGUIDSlot(v539, *(_QWORD *)(v474[1] & 0xFFFFFFFFFFFFFFF8));
          v484 = v483;
          if (v483 < 0)
          {
            v484 = -(uint64_t)v483;
            v485 = v481;
            v486 = 1;
          }
          else
          {
            v485 = v481;
            v486 = 0;
          }
          sub_1C5E21910(v485, v484, 0, 0, v486);
          v487 = v536[0];
          v488 = (_BYTE *)*((_QWORD *)v536[0] + 4);
          if (*((_BYTE **)v536[0] + 3) == v488)
          {
            llvm::raw_ostream::write(v536[0], ")", 1uLL);
          }
          else
          {
            *v488 = 41;
            ++*((_QWORD *)v487 + 4);
          }
          v474 += 2;
          v475 = 1;
        }
        while (v474 != v473);
      }
      v489 = v536[0];
      v490 = (_BYTE *)*((_QWORD *)v536[0] + 4);
      if (*((_BYTE **)v536[0] + 3) == v490)
      {
        llvm::raw_ostream::write(v536[0], ")", 1uLL);
      }
      else
      {
        *v490 = 41;
        ++*((_QWORD *)v489 + 4);
      }
      v491 = v536[0];
      v492 = *((_QWORD *)v536[0] + 4);
      if ((unint64_t)(*((_QWORD *)v536[0] + 3) - v492) > 0xA)
      {
        *(_DWORD *)(v492 + 7) = 540876900;
        *(_QWORD *)v492 = *(_QWORD *)") ; guid = ";
        *((_QWORD *)v491 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v536[0], ") ; guid = ", 0xBuLL);
      }
      sub_1C5E21910(v491, v457, 0, 0, 0);
      v493 = (_BYTE *)*((_QWORD *)v491 + 4);
      if (*((_BYTE **)v491 + 3) == v493)
      {
        llvm::raw_ostream::write(v491, "\n", 1uLL);
      }
      else
      {
        *v493 = 10;
        ++*((_QWORD *)v491 + 4);
      }
      v494 = (_QWORD *)v450[1];
      if (v494)
      {
        do
        {
          v495 = v494;
          v494 = (_QWORD *)*v494;
        }
        while (v494);
      }
      else
      {
        do
        {
          v495 = (_QWORD *)v450[2];
          v31 = *v495 == (_QWORD)v450;
          v450 = v495;
        }
        while (!v31);
      }
      v450 = v495;
    }
    while (v495 != v451);
    v32 = v537;
  }
  Flags = llvm::ModuleSummaryIndex::getFlags(v32);
  v497 = v536[0];
  if (Flags)
  {
    v508 = (_BYTE *)*((_QWORD *)v536[0] + 4);
    v498 = (void **)v516;
    v499 = (void **)v518;
    if (*((_BYTE **)v536[0] + 3) == v508)
    {
      llvm::raw_ostream::write(v536[0], "^", 1uLL);
    }
    else
    {
      *v508 = 94;
      ++*((_QWORD *)v497 + 4);
    }
    v509 = v515;
    if (v515 < 0)
    {
      v509 = -(uint64_t)v515;
      v510 = v497;
      v511 = 1;
    }
    else
    {
      v510 = v497;
      v511 = 0;
    }
    sub_1C5E21910(v510, v509, 0, 0, v511);
    v512 = *((_QWORD *)v497 + 4);
    if ((unint64_t)(*((_QWORD *)v497 + 3) - v512) > 9)
    {
      *(_WORD *)(v512 + 8) = 8250;
      *(_QWORD *)v512 = *(_QWORD *)" = flags: ";
      *((_QWORD *)v497 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v497, " = flags: ", 0xAuLL);
    }
    v513 = llvm::ModuleSummaryIndex::getFlags(v537);
    sub_1C5E21910(v497, v513, 0, 0, 0);
    v514 = (_BYTE *)*((_QWORD *)v497 + 4);
    if (*((_BYTE **)v497 + 3) == v514)
    {
      llvm::raw_ostream::write(v497, "\n", 1uLL);
    }
    else
    {
      *v514 = 10;
      ++*((_QWORD *)v497 + 4);
    }
    v500 = v515 + 1;
    v497 = v536[0];
  }
  else
  {
    v498 = (void **)v516;
    v499 = (void **)v518;
    v500 = v515;
  }
  v501 = (_BYTE *)*((_QWORD *)v497 + 4);
  if (*((_BYTE **)v497 + 3) == v501)
  {
    llvm::raw_ostream::write(v497, "^", 1uLL);
  }
  else
  {
    *v501 = 94;
    ++*((_QWORD *)v497 + 4);
  }
  v502 = v500;
  if (v500 < 0)
  {
    v502 = -(uint64_t)v500;
    v503 = v497;
    v504 = 1;
  }
  else
  {
    v503 = v497;
    v504 = 0;
  }
  sub_1C5E21910(v503, v502, 0, 0, v504);
  v505 = (void *)*((_QWORD *)v497 + 4);
  if (*((_QWORD *)v497 + 3) - (_QWORD)v505 > 0xEuLL)
  {
    qmemcpy(v505, " = blockcount: ", 15);
    *((_QWORD *)v497 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v497, " = blockcount: ", 0xFuLL);
  }
  sub_1C5E21910(v497, *((_QWORD *)v537 + 37), 0, 0, 0);
  v506 = (_BYTE *)*((_QWORD *)v497 + 4);
  if (*((_BYTE **)v497 + 3) == v506)
  {
    llvm::raw_ostream::write(v497, "\n", 1uLL);
    if (!v498)
      goto LABEL_798;
  }
  else
  {
    *v506 = 10;
    ++*((_QWORD *)v497 + 4);
    if (!v498)
      goto LABEL_798;
  }
  for (; v499 != v498; v499 -= 6)
  {
    if (*((char *)v499 - 25) < 0)
      operator delete(*(v499 - 6));
  }
  operator delete(v498);
LABEL_798:
  sub_1C530B4B8(v536);
  sub_1C4D687F0((llvm::raw_ostream *)&v524);
  return sub_1C531C430(&v570);
}

void llvm::ModuleSlotTracker::collectMDNodes(uint64_t a1, char **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v6;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = a3;
    v8 = *(_DWORD *)(v4 + 176);
    v9 = *(uint64_t **)(v4 + 168);
    v10 = *(unsigned int *)(v4 + 184);
    v11 = &v9[2 * v10];
    if (v8)
    {
      if ((_DWORD)v10)
      {
        v12 = 16 * v10;
        v13 = v9;
        while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v13 += 2;
          v12 -= 16;
          if (!v12)
            goto LABEL_7;
        }
      }
      else
      {
        v13 = v9;
      }
    }
    else
    {
LABEL_7:
      v13 = &v9[2 * v10];
    }
    v14 = &v9[2 * v10];
    if (v13 != v14)
    {
      v31 = v14;
      do
      {
        v15 = *((unsigned int *)v13 + 2);
        if (v15 >= v6 && v15 < a4)
        {
          v17 = *v13;
          v19 = a2[1];
          v18 = (unint64_t)a2[2];
          if ((unint64_t)v19 >= v18)
          {
            v21 = a4;
            v22 = *a2;
            v23 = (v19 - *a2) >> 4;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 60)
              abort();
            v25 = v18 - (_QWORD)v22;
            if (v25 >> 3 > v24)
              v24 = v25 >> 3;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
              v26 = 0xFFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              if (v26 >> 60)
                sub_1C4764EE4();
              v27 = (char *)operator new(16 * v26);
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[16 * v23];
            *(_QWORD *)v28 = v15;
            *((_QWORD *)v28 + 1) = v17;
            v29 = v28;
            a4 = v21;
            if (v19 != v22)
            {
              do
              {
                *((_OWORD *)v29 - 1) = *((_OWORD *)v19 - 1);
                v29 -= 16;
                v19 -= 16;
              }
              while (v19 != v22);
              v19 = *a2;
            }
            v6 = a3;
            v20 = v28 + 16;
            *a2 = v29;
            a2[1] = v28 + 16;
            a2[2] = &v27[16 * v26];
            if (v19)
              operator delete(v19);
            v14 = v31;
          }
          else
          {
            *(_QWORD *)v19 = v15;
            *((_QWORD *)v19 + 1) = v17;
            v20 = v19 + 16;
          }
          a2[1] = v20;
        }
        v30 = v13 + 2;
        v13 = v11;
        if (v30 != v11)
        {
          v13 = v30;
          while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v13 += 2;
            if (v13 == v11)
            {
              v13 = v11;
              break;
            }
          }
        }
      }
      while (v13 != v14);
    }
  }
}

uint64_t sub_1C5319038(_QWORD *a1)
{
  if (*a1 == a1[2] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t sub_1C5319054(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 24) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

BOOL sub_1C5319070(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C5319094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

void sub_1C53190B8(uint64_t *a1, _DWORD *a2, char *a3, size_t a4)
{
  unsigned int v4;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  llvm::raw_ostream *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  _QWORD v25[4];

  v4 = a2[2];
  if (v4)
  {
    if (!*((_DWORD *)a1 + 80))
    {
      v9 = a1 + 39;
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 16);
      v11 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0)
        v11 = (_QWORD *)*v11;
      llvm::LLVMContext::getMDKindNames((uint64_t)v11, v9);
      v4 = a2[2];
    }
    v12 = a1[4];
    v13 = a1[1];
    v25[0] = off_1E814DD30;
    v25[1] = a1 + 5;
    v25[2] = v12;
    v25[3] = v13;
    if (v4)
    {
      v14 = *(uint64_t ****)a2;
      v15 = *(_QWORD *)a2 + 16 * v4;
      do
      {
        v16 = *(unsigned int *)v14;
        v17 = *a1;
        v18 = *(void **)(*a1 + 32);
        if (a4 <= *(_QWORD *)(*a1 + 24) - (_QWORD)v18)
        {
          if (a4)
          {
            memcpy(v18, a3, a4);
            *(_QWORD *)(v17 + 32) += a4;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)*a1, a3, a4);
        }
        v19 = (llvm::raw_ostream *)*a1;
        v21 = *(char **)(*a1 + 24);
        v20 = *(char **)(*a1 + 32);
        if (*((_DWORD *)a1 + 80) <= v16)
        {
          if ((unint64_t)(v21 - v20) > 0xF)
          {
            *(_OWORD *)v20 = *(_OWORD *)"!<unknown kind #";
            *((_QWORD *)v19 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "!<unknown kind #", 0x10uLL);
          }
          sub_1C5E21910(v19, v16, 0, 0, 0);
          v22 = (_BYTE *)*((_QWORD *)v19 + 4);
          if (*((_BYTE **)v19 + 3) == v22)
          {
            llvm::raw_ostream::write(v19, ">", 1uLL);
          }
          else
          {
            *v22 = 62;
            ++*((_QWORD *)v19 + 4);
          }
        }
        else
        {
          if (v21 == v20)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "!", 1uLL);
          }
          else
          {
            *v20 = 33;
            ++*((_QWORD *)v19 + 4);
          }
          sub_1C531AF20(*(llvm::raw_ostream **)(a1[39] + 16 * v16), *(_QWORD *)(a1[39] + 16 * v16 + 8), (llvm::raw_ostream *)*a1);
        }
        v23 = (llvm::raw_ostream *)*a1;
        v24 = *(_BYTE **)(*a1 + 32);
        if ((unint64_t)v24 >= *(_QWORD *)(*a1 + 24))
        {
          llvm::raw_ostream::write(v23, 32);
        }
        else
        {
          *((_QWORD *)v23 + 4) = v24 + 1;
          *v24 = 32;
        }
        sub_1C531B20C((llvm::raw_ostream *)*a1, v14[1], (uint64_t)v25);
        v14 += 2;
      }
      while (v14 != (uint64_t ***)v15);
    }
  }
}

void sub_1C53192E8(uint64_t a1, int a2)
{
  std::string *v3;
  std::string v4;

  if (a2)
  {
    sub_1C531C04C((uint64_t)&v4, a2);
    v3 = std::string::append(&v4, " ");
    *(std::string *)a1 = *v3;
    v3->__r_.__value_.__r.__words[0] = 0;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
  }
}

llvm::raw_ostream *sub_1C531935C(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  int v2;
  uint64_t v4;

  v2 = *((_DWORD *)result + 8);
  if ((v2 & 0x4000) != 0 && (*((_DWORD *)result + 8) & 0xFu) - 7 >= 2)
  {
    if ((v2 & 0x30) == 0
      || (result = (llvm::raw_ostream *)llvm::GlobalValue::hasExternalWeakLinkage(result), (_DWORD)result))
    {
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 9)
      {
        *(_WORD *)(v4 + 8) = 8300;
        *(_QWORD *)v4 = *(_QWORD *)"dso_local ";
        *((_QWORD *)this + 4) += 10;
      }
      else
      {
        return llvm::raw_ostream::write(this, "dso_local ", 0xAuLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C53193F0(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  _WORD *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  size_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  int v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  char v32;
  const char *v33;
  const char *v34;

  v3 = result;
  switch((int)result)
  {
    case 8:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "fastcc";
        goto LABEL_68;
      }
      *(_WORD *)(v4 + 4) = 25443;
      v21 = 1953718630;
      goto LABEL_157;
    case 9:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "coldcc";
        goto LABEL_68;
      }
      *(_WORD *)(v4 + 4) = 25443;
      v21 = 1684828003;
      goto LABEL_157;
    case 10:
      v8 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v8) <= 4)
      {
        v5 = "ghccc";
        v9 = this;
        v10 = 5;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      *(_BYTE *)(v8 + 4) = 99;
      *(_DWORD *)v8 = 1667459175;
      v22 = *((_QWORD *)this + 4) + 5;
      goto LABEL_190;
    case 11:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 73:
    case 74:
    case 86:
    case 94:
    case 99:
      goto LABEL_7;
    case 12:
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 0xA)
      {
        v5 = "webkit_jscc";
        goto LABEL_75;
      }
      v23 = 1667461994;
      v24 = "webkit_jscc";
      goto LABEL_161;
    case 13:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "anyregcc";
        goto LABEL_120;
      }
      v25 = 0x676572796E61;
      goto LABEL_185;
    case 14:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xEuLL)
      {
        v5 = "preserve_mostcc";
        goto LABEL_42;
      }
      v26 = "preserve_mostcc";
      goto LABEL_143;
    case 15:
      v14 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "preserve_allcc";
        goto LABEL_57;
      }
      v27 = "preserve_allcc";
      goto LABEL_151;
    case 16:
      v15 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 6uLL)
      {
        v5 = "swiftcc";
        goto LABEL_62;
      }
      *(int *)((char *)v15 + 3) = 1667462246;
      v28 = 1718187891;
      goto LABEL_154;
    case 17:
      v14 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "cxx_fast_tlscc";
        goto LABEL_57;
      }
      v27 = "cxx_fast_tlscc";
      goto LABEL_151;
    case 18:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "tailcc";
        goto LABEL_68;
      }
      *(_WORD *)(v4 + 4) = 25443;
      v21 = 1818845556;
      goto LABEL_157;
    case 19:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xEuLL)
      {
        v5 = "cfguard_checkcc";
        goto LABEL_42;
      }
      v26 = "cfguard_checkcc";
      goto LABEL_143;
    case 20:
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 0xA)
      {
        v5 = "swifttailcc";
        goto LABEL_75;
      }
      v23 = 1667460201;
      v24 = "swifttailcc";
      goto LABEL_161;
    case 64:
      v16 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0xCuLL)
      {
        v5 = "x86_stdcallcc";
        goto LABEL_90;
      }
      v29 = "x86_stdcallcc";
      goto LABEL_169;
    case 65:
      v14 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "x86_fastcallcc";
        goto LABEL_57;
      }
      v27 = "x86_fastcallcc";
      goto LABEL_151;
    case 66:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 9)
      {
        v5 = "arm_apcscc";
        goto LABEL_123;
      }
      v30 = 25443;
      v31 = "arm_apcscc";
      goto LABEL_187;
    case 67:
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 0xA)
      {
        v5 = "arm_aapcscc";
        goto LABEL_75;
      }
      v23 = 1667461987;
      v24 = "arm_aapcscc";
      goto LABEL_161;
    case 68:
      v13 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0xEuLL)
      {
        v5 = "arm_aapcs_vfpcc";
LABEL_42:
        v9 = this;
        v10 = 15;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v26 = "arm_aapcs_vfpcc";
LABEL_143:
      *v13 = *(_QWORD *)v26;
      *(_QWORD *)((char *)v13 + 7) = *(_QWORD *)(v26 + 7);
      v22 = *((_QWORD *)this + 4) + 15;
      goto LABEL_190;
    case 69:
      v16 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0xCuLL)
      {
        v5 = "msp430_intrcc";
        goto LABEL_90;
      }
      v29 = "msp430_intrcc";
      goto LABEL_169;
    case 70:
      v14 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "x86_thiscallcc";
        goto LABEL_57;
      }
      v27 = "x86_thiscallcc";
      goto LABEL_151;
    case 71:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 9)
      {
        v5 = "ptx_kernel";
        goto LABEL_123;
      }
      v30 = 27749;
      v31 = "ptx_kernel";
      goto LABEL_187;
    case 72:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 9)
      {
        v5 = "ptx_device";
        goto LABEL_123;
      }
      v30 = 25955;
      v31 = "ptx_device";
      goto LABEL_187;
    case 75:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "spir_func";
        goto LABEL_97;
      }
      v32 = 99;
      v33 = "spir_func";
      goto LABEL_173;
    case 76:
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 0xA)
      {
        v5 = "spir_kernel";
        goto LABEL_75;
      }
      v23 = 1818586738;
      v24 = "spir_kernel";
      goto LABEL_161;
    case 77:
      v14 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "intel_ocl_bicc";
LABEL_57:
        v9 = this;
        v10 = 14;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v27 = "intel_ocl_bicc";
LABEL_151:
      *v14 = *(_QWORD *)v27;
      *(_QWORD *)((char *)v14 + 6) = *(_QWORD *)(v27 + 6);
      v22 = *((_QWORD *)this + 4) + 14;
      goto LABEL_190;
    case 78:
      v16 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0xCuLL)
      {
        v5 = "x86_64_sysvcc";
        goto LABEL_90;
      }
      v29 = "x86_64_sysvcc";
      goto LABEL_169;
    case 79:
      v15 = (int *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v15 <= 6uLL)
      {
        v5 = "win64cc";
LABEL_62:
        v9 = this;
        v10 = 7;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      *(int *)((char *)v15 + 3) = 1667445814;
      v28 = 913205623;
LABEL_154:
      *v15 = v28;
      v22 = *((_QWORD *)this + 4) + 7;
      goto LABEL_190;
    case 80:
      v6 = (_OWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v6 <= 0xFuLL)
      {
        v5 = "x86_vectorcallcc";
        goto LABEL_65;
      }
      v34 = "x86_vectorcallcc";
      goto LABEL_189;
    case 81:
      v4 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v4) <= 5)
      {
        v5 = "hhvmcc";
LABEL_68:
        v9 = this;
        v10 = 6;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      *(_WORD *)(v4 + 4) = 25443;
      v21 = 1836476520;
LABEL_157:
      *(_DWORD *)v4 = v21;
      v22 = *((_QWORD *)this + 4) + 6;
      goto LABEL_190;
    case 82:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "hhvm_ccc";
        goto LABEL_120;
      }
      v25 = 0x635F6D766868;
      goto LABEL_185;
    case 83:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 9)
      {
        v5 = "x86_intrcc";
        goto LABEL_123;
      }
      v30 = 25443;
      v31 = "x86_intrcc";
      goto LABEL_187;
    case 84:
      v11 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v11) <= 0xA)
      {
        v5 = "avr_intrcc ";
LABEL_75:
        v9 = this;
        v10 = 11;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v23 = 543384434;
      v24 = "avr_intrcc ";
LABEL_161:
      *(_DWORD *)(v11 + 7) = v23;
      *(_QWORD *)v11 = *(_QWORD *)v24;
      v22 = *((_QWORD *)this + 4) + 11;
      goto LABEL_190;
    case 85:
      v16 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0xCuLL)
      {
        v5 = "avr_signalcc ";
        goto LABEL_90;
      }
      v29 = "avr_signalcc ";
      goto LABEL_169;
    case 87:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_vs";
        goto LABEL_97;
      }
      v32 = 115;
      v33 = "amdgpu_vs";
      goto LABEL_173;
    case 88:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_gs";
        goto LABEL_97;
      }
      v32 = 115;
      v33 = "amdgpu_gs";
      goto LABEL_173;
    case 89:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_ps";
        goto LABEL_97;
      }
      v32 = 115;
      v33 = "amdgpu_ps";
      goto LABEL_173;
    case 90:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_cs";
        goto LABEL_97;
      }
      v32 = 115;
      v33 = "amdgpu_cs";
      goto LABEL_173;
    case 91:
      v16 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0xCuLL)
      {
        v5 = "amdgpu_kernel";
        goto LABEL_90;
      }
      v29 = "amdgpu_kernel";
      goto LABEL_169;
    case 92:
      v16 = (_QWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 0xCuLL)
      {
        v5 = "x86_regcallcc";
LABEL_90:
        v9 = this;
        v10 = 13;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v29 = "x86_regcallcc";
LABEL_169:
      *v16 = *(_QWORD *)v29;
      *(_QWORD *)((char *)v16 + 5) = *(_QWORD *)(v29 + 5);
      v22 = *((_QWORD *)this + 4) + 13;
      goto LABEL_190;
    case 93:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_hs";
        goto LABEL_97;
      }
      v32 = 115;
      v33 = "amdgpu_hs";
      goto LABEL_173;
    case 95:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_ls";
        goto LABEL_97;
      }
      v32 = 115;
      v33 = "amdgpu_ls";
      goto LABEL_173;
    case 96:
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 8)
      {
        v5 = "amdgpu_es";
LABEL_97:
        v9 = this;
        v10 = 9;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v32 = 115;
      v33 = "amdgpu_es";
LABEL_173:
      *(_BYTE *)(v18 + 8) = v32;
      *(_QWORD *)v18 = *(_QWORD *)v33;
      v22 = *((_QWORD *)this + 4) + 9;
      goto LABEL_190;
    case 97:
      v19 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v19) <= 0x11)
      {
        v5 = "aarch64_vector_pcs";
        v9 = this;
        v10 = 18;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      *(_WORD *)(v19 + 16) = 29539;
      *(_OWORD *)v19 = *(_OWORD *)"aarch64_vector_pcs";
      v22 = *((_QWORD *)this + 4) + 18;
      goto LABEL_190;
    case 98:
      v20 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v20 <= 0x15uLL)
      {
        v5 = "aarch64_sve_vector_pcs";
        v9 = this;
        v10 = 22;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      qmemcpy(v20, "aarch64_sve_vector_pcs", 22);
      v22 = *((_QWORD *)this + 4) + 22;
      goto LABEL_190;
    case 100:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_ticc";
        goto LABEL_120;
      }
      v25 = 0x69745F786761;
      goto LABEL_185;
    case 101:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_pscc";
        goto LABEL_120;
      }
      v25 = 0x73705F786761;
      goto LABEL_185;
    case 102:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_vscc";
        goto LABEL_120;
      }
      v25 = 0x73765F786761;
      goto LABEL_185;
    case 103:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_sscc";
        goto LABEL_120;
      }
      v25 = 0x73735F786761;
      goto LABEL_185;
    case 104:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_sfcc";
        goto LABEL_120;
      }
      v25 = 0x66735F786761;
      goto LABEL_185;
    case 105:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_sicc";
        goto LABEL_120;
      }
      v25 = 0x69735F786761;
      goto LABEL_185;
    case 106:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_clcc";
        goto LABEL_120;
      }
      v25 = 0x6C635F786761;
      goto LABEL_185;
    case 107:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_dscc";
        goto LABEL_120;
      }
      v25 = 0x73645F786761;
      goto LABEL_185;
    case 108:
      v12 = (uint64_t *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 <= 7uLL)
      {
        v5 = "agx_mrcc";
LABEL_120:
        v9 = this;
        v10 = 8;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v25 = 0x726D5F786761;
LABEL_185:
      *v12 = v25 & 0xFFFFFFFFFFFFLL | 0x6363000000000000;
      v22 = *((_QWORD *)this + 4) + 8;
      goto LABEL_190;
    case 109:
      v17 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 9)
      {
        v5 = "amdgpu_gfx";
LABEL_123:
        v9 = this;
        v10 = 10;
        return llvm::raw_ostream::write(v9, v5, v10);
      }
      v30 = 30822;
      v31 = "amdgpu_gfx";
LABEL_187:
      *(_WORD *)(v17 + 8) = v30;
      *(_QWORD *)v17 = *(_QWORD *)v31;
      v22 = *((_QWORD *)this + 4) + 10;
      goto LABEL_190;
    default:
      if ((_DWORD)result == 255)
      {
        v6 = (_OWORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v6 > 0xFuLL)
        {
          v34 = "air_intersection";
LABEL_189:
          *v6 = *(_OWORD *)v34;
          v22 = *((_QWORD *)this + 4) + 16;
LABEL_190:
          *((_QWORD *)this + 4) = v22;
        }
        else
        {
          v5 = "air_intersection";
LABEL_65:
          v9 = this;
          v10 = 16;
          return llvm::raw_ostream::write(v9, v5, v10);
        }
      }
      else
      {
LABEL_7:
        v7 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v7 > 1uLL)
        {
          *v7 = 25443;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "cc", 2uLL);
        }
        return sub_1C5E21910(this, v3, 0, 0, 0);
      }
      return result;
  }
}

void sub_1C5319F38(char **this, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  unsigned int v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::detail::DoubleAPFloat *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::detail::DoubleAPFloat *v21;
  int v22;
  int v23;
  size_t *v24;
  llvm::raw_ostream *v25;
  size_t v26;
  size_t v27;
  int v28;
  llvm::SlotTracker *v29;
  __n128 v30;
  llvm::SlotTracker *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::detail::DoubleAPFloat *v36;
  int v37;
  int v38;
  int GlobalSlot;
  char v40;
  llvm::SlotTracker *v41;
  __n128 v42;
  llvm::SlotTracker *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::detail::DoubleAPFloat *v48;
  int v49;
  int v50;
  char v51;
  llvm::raw_ostream *v52;
  uint64_t v53;
  char *v54;
  llvm::raw_ostream *v55;
  uint64_t *v56;
  llvm::raw_ostream *v57;
  char v58;
  int v59;
  llvm::raw_ostream *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  llvm::raw_ostream *v67;
  int v68;

  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v8 = ***(_QWORD ***)a2;
    v9 = *(_QWORD *)(v8 + 152);
    v10 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v10)
    {
      LODWORD(v11) = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v12 = v9 + 16 * v11;
      v13 = *(llvm::detail::DoubleAPFloat **)v12;
      if (*(llvm::detail::DoubleAPFloat **)v12 == a2)
      {
LABEL_43:
        v24 = *(size_t **)(v12 + 8);
        v27 = *v24;
        v25 = (llvm::raw_ostream *)(v24 + 2);
        v26 = v27;
        if (*((unsigned __int8 *)a2 + 16) >= 4u)
          v28 = 3;
        else
          v28 = 0;
        sub_1C530D5AC((llvm::raw_ostream *)this, v25, v26, v28);
        return;
      }
      v14 = 1;
      while (v13 != (llvm::detail::DoubleAPFloat *)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(llvm::detail::DoubleAPFloat **)(v9 + 16 * v11);
        if (v13 == a2)
        {
          v12 = v9 + 16 * v11;
          goto LABEL_43;
        }
      }
    }
    v12 = v9 + 16 * v10;
    goto LABEL_43;
  }
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 <= 0x14)
  {
    if (v5 >= 4)
    {
      sub_1C5312DB0((int **)this, a2, a3);
      return;
    }
    goto LABEL_28;
  }
  if (v5 == 23)
  {
    sub_1C531B20C((llvm::raw_ostream *)this);
    return;
  }
  if (v5 != 24)
  {
LABEL_28:
    v16 = *(_QWORD *)(a3 + 16);
    if (v16)
    {
      if (v5 <= 3)
      {
        GlobalSlot = llvm::SlotTracker::getGlobalSlot(*(llvm::SlotTracker **)(a3 + 16), a2);
        v40 = 64;
        goto LABEL_105;
      }
      if (*(_QWORD *)(v16 + 8))
      {
        llvm::SlotTracker::processModule(*(llvm::SlotTracker **)(a3 + 16));
        *(_QWORD *)(v16 + 8) = 0;
      }
      if (*(_QWORD *)(v16 + 16) && !*(_BYTE *)(v16 + 24))
        llvm::SlotTracker::processFunction((llvm::SlotTracker *)v16);
      v17 = *(_QWORD *)(v16 + 136);
      v18 = *(unsigned int *)(v16 + 152);
      if ((_DWORD)v18)
      {
        LODWORD(v19) = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v20 = v17 + 16 * v19;
        v21 = *(llvm::detail::DoubleAPFloat **)v20;
        if (*(llvm::detail::DoubleAPFloat **)v20 == a2)
        {
LABEL_62:
          if (v20 != v17 + 16 * v18)
          {
            GlobalSlot = *(_DWORD *)(v20 + 8);
            if (GlobalSlot != -1)
            {
              v40 = 37;
LABEL_106:
              v64 = this[4];
              if (v64 >= this[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)this, v40);
              }
              else
              {
                this[4] = v64 + 1;
                *v64 = v40;
              }
              v66 = GlobalSlot;
              if (GlobalSlot < 0)
              {
                v66 = -(uint64_t)GlobalSlot;
                v67 = (llvm::raw_ostream *)this;
                v68 = 1;
              }
              else
              {
                v67 = (llvm::raw_ostream *)this;
                v68 = 0;
              }
              sub_1C5E21910(v67, v66, 0, 0, v68);
              return;
            }
          }
          v42.n128_f64[0] = sub_1C531C1F4((uint64_t)a2);
          if (!v41)
          {
LABEL_108:
            v65 = this[4];
            if ((unint64_t)(this[3] - v65) > 7)
            {
              *(_QWORD *)v65 = 0x3E6665726461623CLL;
              this[4] += 8;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)this, "<badref>", 8uLL);
            }
            return;
          }
          v43 = v41;
          if (*((_QWORD *)v41 + 1))
          {
            llvm::SlotTracker::processModule(v41);
            *((_QWORD *)v43 + 1) = 0;
          }
          if (*((_QWORD *)v43 + 2) && !*((_BYTE *)v43 + 24))
            llvm::SlotTracker::processFunction(v43);
          v44 = *((_QWORD *)v43 + 17);
          v45 = *((unsigned int *)v43 + 38);
          if ((_DWORD)v45)
          {
            LODWORD(v46) = (v45 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v47 = v44 + 16 * v46;
            v48 = *(llvm::detail::DoubleAPFloat **)v47;
            if (*(llvm::detail::DoubleAPFloat **)v47 == a2)
            {
LABEL_101:
              if (v47 == v44 + 16 * v45)
                GlobalSlot = -1;
              else
                GlobalSlot = *(_DWORD *)(v47 + 8);
              (*(void (**)(llvm::SlotTracker *, __n128))(*(_QWORD *)v43 + 8))(v43, v42);
              v40 = 37;
LABEL_105:
              if (GlobalSlot != -1)
                goto LABEL_106;
              goto LABEL_108;
            }
            v49 = 1;
            while (v48 != (llvm::detail::DoubleAPFloat *)-4096)
            {
              v50 = v46 + v49++;
              v46 = v50 & (v45 - 1);
              v48 = *(llvm::detail::DoubleAPFloat **)(v44 + 16 * v46);
              if (v48 == a2)
              {
                v47 = v44 + 16 * v46;
                goto LABEL_101;
              }
            }
          }
          v47 = v44 + 16 * v45;
          goto LABEL_101;
        }
        v22 = 1;
        while (v21 != (llvm::detail::DoubleAPFloat *)-4096)
        {
          v23 = v19 + v22++;
          v19 = v23 & (v18 - 1);
          v21 = *(llvm::detail::DoubleAPFloat **)(v17 + 16 * v19);
          if (v21 == a2)
          {
            v20 = v17 + 16 * v19;
            goto LABEL_62;
          }
        }
      }
      v20 = v17 + 16 * v18;
      goto LABEL_62;
    }
    v30.n128_f64[0] = sub_1C531C1F4((uint64_t)a2);
    if (!v29)
      goto LABEL_108;
    v31 = v29;
    if (*((unsigned __int8 *)a2 + 16) <= 3u)
    {
      GlobalSlot = llvm::SlotTracker::getGlobalSlot(v29, a2);
      v40 = 64;
LABEL_99:
      (*(void (**)(llvm::SlotTracker *, __n128))(*(_QWORD *)v31 + 8))(v31, v30);
      goto LABEL_105;
    }
    if (*((_QWORD *)v29 + 1))
    {
      llvm::SlotTracker::processModule(v29);
      *((_QWORD *)v31 + 1) = 0;
    }
    if (*((_QWORD *)v31 + 2) && !*((_BYTE *)v31 + 24))
      llvm::SlotTracker::processFunction(v31);
    v32 = *((_QWORD *)v31 + 17);
    v33 = *((unsigned int *)v31 + 38);
    if ((_DWORD)v33)
    {
      LODWORD(v34) = (v33 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v35 = v32 + 16 * v34;
      v36 = *(llvm::detail::DoubleAPFloat **)v35;
      if (*(llvm::detail::DoubleAPFloat **)v35 == a2)
      {
LABEL_96:
        if (v35 == v32 + 16 * v33)
          GlobalSlot = -1;
        else
          GlobalSlot = *(_DWORD *)(v35 + 8);
        v40 = 37;
        goto LABEL_99;
      }
      v37 = 1;
      while (v36 != (llvm::detail::DoubleAPFloat *)-4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & (v33 - 1);
        v36 = *(llvm::detail::DoubleAPFloat **)(v32 + 16 * v34);
        if (v36 == a2)
        {
          v35 = v32 + 16 * v34;
          goto LABEL_96;
        }
      }
    }
    v35 = v32 + 16 * v33;
    goto LABEL_96;
  }
  v6 = this[4];
  if ((unint64_t)(this[3] - v6) > 3)
  {
    *(_DWORD *)v6 = 544043873;
    v7 = (unint64_t)(this[4] + 4);
    this[4] = (char *)v7;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)this, "asm ", 4uLL);
    v7 = (unint64_t)this[4];
  }
  if (*((_BYTE *)a2 + 80))
  {
    if ((unint64_t)&this[3][-v7] > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 544498533;
      *(_QWORD *)v7 = *(_QWORD *)"sideeffect ";
      v7 = (unint64_t)(this[4] + 11);
      this[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "sideeffect ", 0xBuLL);
      v7 = (unint64_t)this[4];
    }
  }
  if (*((_BYTE *)a2 + 81))
  {
    if ((unint64_t)&this[3][-v7] > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 543908705;
      *(_QWORD *)v7 = *(_QWORD *)"alignstack ";
      v7 = (unint64_t)(this[4] + 11);
      this[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "alignstack ", 0xBuLL);
      v7 = (unint64_t)this[4];
    }
  }
  if (*((_DWORD *)a2 + 21) == 1)
  {
    if ((unint64_t)&this[3][-v7] > 0xC)
    {
      qmemcpy((void *)v7, "inteldialect ", 13);
      v7 = (unint64_t)(this[4] + 13);
      this[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "inteldialect ", 0xDuLL);
      v7 = (unint64_t)this[4];
    }
  }
  if (*((_BYTE *)a2 + 88))
  {
    if ((unint64_t)&this[3][-v7] > 6)
    {
      *(_DWORD *)(v7 + 3) = 543452777;
      *(_DWORD *)v7 = 1769434741;
      v7 = (unint64_t)(this[4] + 7);
      this[4] = (char *)v7;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, "unwind ", 7uLL);
      v7 = (unint64_t)this[4];
    }
  }
  if (v7 >= (unint64_t)this[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)this, 34);
  }
  else
  {
    this[4] = (char *)(v7 + 1);
    *(_BYTE *)v7 = 34;
  }
  v51 = *((_BYTE *)a2 + 47);
  if (v51 >= 0)
    v52 = (llvm::detail::DoubleAPFloat *)((char *)a2 + 24);
  else
    v52 = (llvm::raw_ostream *)*((_QWORD *)a2 + 3);
  if (v51 >= 0)
    v53 = v51 & 0x7F;
  else
    v53 = *((_QWORD *)a2 + 4);
  llvm::printEscapedString(v52, v53, (llvm::raw_ostream *)this);
  v54 = this[4];
  if ((unint64_t)(this[3] - v54) > 3)
  {
    *(_DWORD *)v54 = 572533794;
    this[4] += 4;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)this, "\", \"", 4uLL);
  }
  v57 = (llvm::raw_ostream *)*((_QWORD *)a2 + 6);
  v56 = (uint64_t *)((char *)a2 + 48);
  v55 = v57;
  v58 = *((_BYTE *)v56 + 23);
  v59 = v58;
  if (v58 >= 0)
    v60 = (llvm::raw_ostream *)v56;
  else
    v60 = v55;
  v61 = v58 & 0x7F;
  if (v59 >= 0)
    v62 = v61;
  else
    v62 = v56[1];
  llvm::printEscapedString(v60, v62, (llvm::raw_ostream *)this);
  v63 = this[4];
  if (v63 >= this[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)this, 34);
  }
  else
  {
    this[4] = v63 + 1;
    *v63 = 34;
  }
}

void sub_1C531A660(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::Attribute *v3;
  uint64_t v4;
  char i;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  size_t v10;
  char *NameFromAttrKind;
  size_t v12;
  void *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  std::string *p_p;
  size_t size;
  std::string __p;

  if (a2)
    v3 = (llvm::Attribute *)(a2 + 48);
  else
    v3 = 0;
  if (a2)
    v4 = a2 + 48 + 8 * *(unsigned int *)(a2 + 8);
  else
    v4 = 0;
  if (v3 != (llvm::Attribute *)v4)
  {
    for (i = 1; ; i = 0)
    {
      if ((i & 1) == 0)
      {
        v6 = *a1;
        v7 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v7 >= *((_QWORD *)*a1 + 3))
        {
          llvm::raw_ostream::write(v6, 32);
        }
        else
        {
          *((_QWORD *)v6 + 4) = v7 + 1;
          *v7 = 32;
        }
      }
      v8 = *(_QWORD *)v3;
      if (!*(_QWORD *)v3)
        break;
      v9 = *a1;
      if (*(_BYTE *)(v8 + 8) != 3)
        goto LABEL_28;
      NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v8 + 12));
      v12 = v10;
      v13 = (void *)*((_QWORD *)v9 + 4);
      if (v10 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
      {
        if (v10)
        {
          memcpy(v13, NameFromAttrKind, v10);
          *((_QWORD *)v9 + 4) += v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, NameFromAttrKind, v10);
      }
      if (*(_QWORD *)v3)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v3 + 16);
        if (v14)
        {
          v15 = *a1;
          v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v16 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v15, 40);
          }
          else
          {
            *((_QWORD *)v15 + 4) = v16 + 1;
            *v16 = 40;
          }
          sub_1C530D7AC((uint64_t)(a1 + 5), v14);
          v17 = *a1;
          v18 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v18 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v17, 41);
          }
          else
          {
            *((_QWORD *)v17 + 4) = v18 + 1;
            *v18 = 41;
          }
        }
      }
LABEL_36:
      v3 = (llvm::Attribute *)((char *)v3 + 8);
      if (v3 == (llvm::Attribute *)v4)
        return;
    }
    v9 = *a1;
LABEL_28:
    llvm::Attribute::getAsString(v3, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v9, (const char *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_36;
  }
}

llvm::raw_ostream *sub_1C531A844(llvm::raw_ostream *this, uint64_t ***a2)
{
  size_t **v2;
  llvm::raw_ostream *v4;
  _BYTE *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  size_t *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  llvm::raw_ostream *v19;
  size_t v20;
  _BYTE *v21;
  _BYTE *v22;

  v2 = (size_t **)a2[6];
  if (!v2)
    return this;
  v4 = this;
  if (*((_BYTE *)a2 + 16) == 3)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v5 >= *((_QWORD *)this + 3))
    {
      this = llvm::raw_ostream::write(this, 44);
    }
    else
    {
      *((_QWORD *)this + 4) = v5 + 1;
      *v5 = 44;
    }
  }
  v6 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 6uLL)
  {
    *(_DWORD *)((char *)v6 + 3) = 1952539757;
    *v6 = 1836016416;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    this = llvm::raw_ostream::write(v4, " comdat", 7uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v7 = ***a2;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
      {
LABEL_16:
        v15 = (size_t *)v11[1];
        v17 = *v15;
        this = (llvm::raw_ostream *)(v15 + 2);
        v16 = v17;
        if (v17 == **v2)
        {
          if (!v16)
            return this;
          this = (llvm::raw_ostream *)memcmp(this, *v2 + 9, v16);
          if (!(_DWORD)this)
            return this;
        }
        goto LABEL_19;
      }
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a2)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_16;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_16;
  }
  if (!**v2)
    return this;
LABEL_19:
  v18 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 40);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v18 + 1;
    *v18 = 40;
  }
  v19 = (llvm::raw_ostream *)(*v2 + 9);
  v20 = **v2;
  v21 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 36);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v21 + 1;
    *v21 = 36;
  }
  this = llvm::printLLVMNameWithoutPrefix(v4, v19, v20);
  v22 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v4 + 3))
    return llvm::raw_ostream::write(v4, 41);
  *((_QWORD *)v4 + 4) = v22 + 1;
  *v22 = 41;
  return this;
}

void sub_1C531AA44(char ***a1, llvm::detail::DoubleAPFloat *a2, int a3)
{
  llvm::raw_ostream *v5;
  char *v6;
  char **v7;
  char *v8;
  char **v9;
  char **v10;
  char **v11;
  _QWORD v12[4];

  if (a2)
  {
    if (a3)
    {
      sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)a2);
      v5 = (llvm::raw_ostream *)*a1;
      v6 = (*a1)[4];
      if (v6 >= (*a1)[3])
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((_QWORD *)v5 + 4) = v6 + 1;
        *v6 = 32;
      }
    }
    v9 = a1[4];
    v12[0] = off_1E814DD30;
    v12[1] = a1 + 5;
    v10 = *a1;
    v11 = a1[1];
    v12[2] = v9;
    v12[3] = v11;
    sub_1C5319F38(v10, a2, (uint64_t)v12);
  }
  else
  {
    v7 = *a1;
    v8 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v8) > 0xE)
    {
      qmemcpy(v8, "<null operand!>", 15);
      v7[4] += 15;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v7, "<null operand!>", 0xFuLL);
    }
  }
}

char **sub_1C531AB30(uint64_t a1, uint64_t a2)
{
  char **result;
  uint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t *i;
  uint64_t *v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  unint64_t v12;
  char **v13;
  uint64_t v14;
  char **v15;
  _DWORD *v16;
  char **v17;
  _WORD *v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  char **v22;
  _BYTE *v23;
  char **v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _WORD *v30;
  _QWORD v31[4];

  v31[0] = 0;
  result = (char **)sub_1C531C328(*(_QWORD *)(a1 + 288), *(_DWORD *)(a1 + 304), a2, v31);
  v4 = v31[0];
  if ((_DWORD)result)
    v5 = v31[0] == *(_QWORD *)(a1 + 288) + 56 * *(unsigned int *)(a1 + 304);
  else
    v5 = 1;
  if (!v5)
  {
    result = *(char ***)a1;
    v6 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v6 > 0x1AuLL)
    {
      qmemcpy(v6, "\n; uselistorder directives\n", 27);
      result[4] += 27;
    }
    else
    {
      result = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n; uselistorder directives\n", 0x1BuLL);
    }
    v8 = *(uint64_t **)(v4 + 32);
    for (i = *(uint64_t **)(v4 + 40); v8 != i; v8 += 4)
    {
      v9 = *v8;
      v10 = *(char ***)a1;
      v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      v12 = *(_QWORD *)(*(_QWORD *)a1 + 24) - v11;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
      {
        if (v12 > 1)
        {
          *(_WORD *)v11 = 8224;
          v10[4] += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v10, "  ", 2uLL);
        }
        v13 = *(char ***)a1;
        v14 = *(_QWORD *)(*(_QWORD *)a1 + 32);
        if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v14) > 0xB)
        {
          *(_DWORD *)(v14 + 8) = 1919247474;
          *(_QWORD *)v14 = *(_QWORD *)"uselistorder";
          v13[4] += 12;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v13, "uselistorder", 0xCuLL);
        }
      }
      else
      {
        if (v12 > 0xB)
        {
          *(_DWORD *)(v11 + 8) = 1919247474;
          *(_QWORD *)v11 = *(_QWORD *)"uselistorder";
          v10[4] += 12;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v10, "uselistorder", 0xCuLL);
        }
        if (*(_BYTE *)(v9 + 16) == 22)
        {
          v15 = *(char ***)a1;
          v16 = *(_DWORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v16 > 3uLL)
          {
            *v16 = 543318623;
            v15[4] += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v15, "_bb ", 4uLL);
          }
          sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v9 + 56), 0);
          v17 = *(char ***)a1;
          v18 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v18 > 1uLL)
          {
            *v18 = 8236;
            v17[4] += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v17, ", ", 2uLL);
          }
          v19 = *(_QWORD *)(a1 + 32);
          v31[0] = off_1E814DD30;
          v31[1] = a1 + 40;
          v20 = *(char ***)a1;
          v21 = *(_QWORD *)(a1 + 8);
          v31[2] = v19;
          v31[3] = v21;
          sub_1C5319F38(v20, (llvm::detail::DoubleAPFloat *)v9, (uint64_t)v31);
          goto LABEL_26;
        }
      }
      v22 = *(char ***)a1;
      v23 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v23)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v22, " ", 1uLL);
      }
      else
      {
        *v23 = 32;
        ++v22[4];
      }
      sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v9, 1);
LABEL_26:
      v24 = *(char ***)a1;
      v25 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v25 > 3uLL)
      {
        *v25 = 544940076;
        v24[4] += 4;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v24, ", { ", 4uLL);
      }
      sub_1C5E21910(*(llvm::raw_ostream **)a1, *(unsigned int *)v8[1], 0, 0, 0);
      v26 = (unint64_t)(v8[2] - v8[1]) >> 2;
      if ((_DWORD)v26 != 1)
      {
        v28 = 1;
        do
        {
          v29 = *(llvm::raw_ostream **)a1;
          v30 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v30 > 1uLL)
          {
            *v30 = 8236;
            *((_QWORD *)v29 + 4) += 2;
          }
          else
          {
            v29 = llvm::raw_ostream::write(v29, ", ", 2uLL);
          }
          sub_1C5E21910(v29, *(unsigned int *)(v8[1] + 4 * v28++), 0, 0, 0);
        }
        while ((_DWORD)v26 != (_DWORD)v28);
      }
      result = *(char ***)a1;
      v27 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v27) > 2)
      {
        *(_BYTE *)(v27 + 2) = 10;
        *(_WORD *)v27 = 32032;
        result[4] += 3;
      }
      else
      {
        result = (char **)llvm::raw_ostream::write((llvm::raw_ostream *)result, " }\n", 3uLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C531AF20(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  int v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  void *v8;
  _BYTE *v10;
  char v11;
  int v12;
  char *v13;
  char v14;
  int v15;
  __darwin_ct_rune_t v16;
  unint64_t v17;
  char *v19;
  char v20;
  _BYTE *v21;
  char v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  char v26;
  char *v27;
  char *v28;

  if (!a2)
  {
    v8 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 <= 0xCuLL)
      return llvm::raw_ostream::write(this, "<empty name> ", 0xDuLL);
    qmemcpy(v8, "<empty name> ", 13);
    *((_QWORD *)this + 4) += 13;
    return result;
  }
  v4 = a2;
  v5 = result;
  v6 = *(char *)result;
  v7 = MEMORY[0x1E0C80978];
  if (v6 < 0)
  {
    result = (llvm::raw_ostream *)__maskrune(*(unsigned __int8 *)result, 0x100uLL);
    LOBYTE(v6) = *v5;
    if (!(_DWORD)result)
      goto LABEL_8;
LABEL_12:
    v10 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v10 < *((_QWORD *)this + 3))
    {
      *((_QWORD *)this + 4) = v10 + 1;
      *v10 = v6;
      goto LABEL_16;
    }
    v11 = v6;
    goto LABEL_15;
  }
  result = (llvm::raw_ostream *)(*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)result + 60) & 0x100);
  if ((_DWORD)result)
    goto LABEL_12;
LABEL_8:
  if (v6 - 36 <= 0x3B
    && ((1 << (v6 - 36)) & 0x800000000000601) != 0)
  {
    goto LABEL_12;
  }
  v25 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v25 >= *((_QWORD *)this + 3))
  {
    result = llvm::raw_ostream::write(this, 92);
  }
  else
  {
    *((_QWORD *)this + 4) = v25 + 1;
    *v25 = 92;
  }
  v26 = a0123456789abcd_6[(char)*v5 >> 4];
  v27 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)v27 >= *((_QWORD *)this + 3))
  {
    result = llvm::raw_ostream::write(this, v26);
  }
  else
  {
    *((_QWORD *)this + 4) = v27 + 1;
    *v27 = v26;
  }
  v11 = a0123456789abcd_6[*v5 & 0xF];
  v28 = (char *)*((_QWORD *)this + 4);
  if ((unint64_t)v28 >= *((_QWORD *)this + 3))
  {
LABEL_15:
    result = llvm::raw_ostream::write(this, v11);
    goto LABEL_16;
  }
  *((_QWORD *)this + 4) = v28 + 1;
  *v28 = v11;
LABEL_16:
  v12 = v4 - 1;
  if (v12)
  {
    v13 = v5 + 1;
    do
    {
      v15 = *v13++;
      v14 = v15;
      v16 = v15;
      v17 = v15;
      if (v15 < 0)
      {
        result = (llvm::raw_ostream *)__maskrune(v16, 0x500uLL);
        if ((_DWORD)result)
          goto LABEL_26;
      }
      else
      {
        result = (llvm::raw_ostream *)(*(_DWORD *)(v7 + 4 * v17 + 60) & 0x500);
        if ((_DWORD)result)
          goto LABEL_26;
      }
      if ((v16 - 36) > 0x3B || ((1 << (v16 - 36)) & 0x800000000000601) == 0)
      {
        v21 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v21 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, 92);
        }
        else
        {
          *((_QWORD *)this + 4) = v21 + 1;
          *v21 = 92;
        }
        v22 = a0123456789abcd_6[v17 >> 4];
        v23 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v23 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, v22);
        }
        else
        {
          *((_QWORD *)this + 4) = v23 + 1;
          *v23 = v22;
        }
        v20 = a0123456789abcd_6[v17 & 0xF];
        v24 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v24 < *((_QWORD *)this + 3))
        {
          *((_QWORD *)this + 4) = v24 + 1;
          *v24 = v20;
          goto LABEL_30;
        }
        goto LABEL_29;
      }
LABEL_26:
      v19 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v19 >= *((_QWORD *)this + 3))
      {
        v20 = v14;
LABEL_29:
        result = llvm::raw_ostream::write(this, v20);
        goto LABEL_30;
      }
      *((_QWORD *)this + 4) = v19 + 1;
      *v19 = v14;
LABEL_30:
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1C531B20C(llvm::raw_ostream *this, uint64_t **a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  _WORD *v19;
  _BYTE *v20;
  llvm::SlotTracker *v21;

  v6 = *(unsigned __int8 *)a2;
  if (v6 == 32)
  {
    sub_1C531B8B4(this, (uint64_t)a2);
  }
  else if (v6 == 6)
  {
    sub_1C531B514(this, (llvm::DIExpression *)a2);
  }
  else if ((v6 - 4) > 0x1E)
  {
    if (*(_BYTE *)a2)
    {
      sub_1C530D7AC(*(_QWORD *)(a3 + 8), *a2[16]);
      v13 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v13 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((_QWORD *)this + 4) = v13 + 1;
        *v13 = 32;
      }
      sub_1C5319F38((char **)this, (llvm::detail::DoubleAPFloat *)a2[16], a3);
    }
    else
    {
      v19 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v19 > 1uLL)
      {
        *v19 = 8737;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "!\"", 2uLL);
      }
      llvm::printEscapedString((llvm::raw_ostream *)(a2[1] + 3), *a2[1], this);
      v20 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v20 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 34);
      }
      else
      {
        *((_QWORD *)this + 4) = v20 + 1;
        *v20 = 34;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 16);
    if (v7)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a3 + 16);
    }
    else
    {
      v21 = (llvm::SlotTracker *)operator new();
      llvm::SlotTracker::SlotTracker(v21, *(const llvm::Module **)(a3 + 24), 0);
      *(_QWORD *)(a3 + 16) = v9;
      v8 = v9;
    }
    v10 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v9 + 32))(v9, a2);
    if (v10 == -1)
    {
      if (*(_BYTE *)a2 == 5)
      {
        sub_1C531BA08(this, (uint64_t)a2, a3);
      }
      else
      {
        v17 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v17)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *v17 = 60;
          ++*((_QWORD *)this + 4);
        }
        llvm::write_hex(this, (unint64_t)a2, 3, 0, 0);
        v18 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v18)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *v18 = 62;
          ++*((_QWORD *)this + 4);
        }
      }
    }
    else
    {
      v11 = v10;
      v12 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v12 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 33);
      }
      else
      {
        *((_QWORD *)this + 4) = v12 + 1;
        *v12 = 33;
      }
      v14 = v11;
      if (v11 < 0)
      {
        v14 = -(uint64_t)v11;
        v15 = this;
        v16 = 1;
      }
      else
      {
        v15 = this;
        v16 = 0;
      }
      sub_1C5E21910(v15, v14, 0, 0, v16);
    }
    *(_QWORD *)(a3 + 16) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t sub_1C531B514(llvm::raw_ostream *this, llvm::DIExpression *a2)
{
  void *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  _WORD *v14;
  int Size;
  uint64_t v16;
  unint64_t *v17;
  _WORD *v18;
  unint64_t v19;
  _WORD *v20;
  _WORD *v21;
  void *v22;
  size_t v23;
  const char *v24;
  size_t v25;
  char v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int *v31;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0xDuLL)
  {
    qmemcpy(v4, "!DIExpression(", 14);
    *((_QWORD *)this + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DIExpression(", 0xEuLL);
  }
  result = llvm::DIExpression::isValid(a2);
  v7 = (unsigned int *)*((_QWORD *)a2 + 3);
  v6 = (unsigned int *)*((_QWORD *)a2 + 4);
  v8 = (char *)v6 - (char *)v7;
  if ((_DWORD)result)
  {
    v31 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v6 != v7)
    {
      v9 = 0;
      v10 = (unsigned int *)((char *)v7 + (v8 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        v11 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*v7);
        v13 = v12;
        v14 = (_WORD *)*((_QWORD *)this + 4);
        if ((v9 & 1) != 0)
        {
          if (*((_QWORD *)this + 3) - (_QWORD)v14 > 1uLL)
          {
            *v14 = 8236;
            v14 = (_WORD *)(*((_QWORD *)this + 4) + 2);
            *((_QWORD *)this + 4) = v14;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
            v14 = (_WORD *)*((_QWORD *)this + 4);
          }
        }
        if (v13 <= *((_QWORD *)this + 3) - (_QWORD)v14)
        {
          if (v13)
          {
            memcpy(v14, v11, v13);
            *((_QWORD *)this + 4) += v13;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, v11, v13);
        }
        if (*(_QWORD *)v7 == 4097)
        {
          v20 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v20 > 1uLL)
          {
            *v20 = 8236;
            *((_QWORD *)this + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
          }
          sub_1C5E21910(this, *((_QWORD *)v7 + 1), 0, 0, 0);
          v21 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v21 > 1uLL)
          {
            *v21 = 8236;
            v22 = (void *)(*((_QWORD *)this + 4) + 2);
            *((_QWORD *)this + 4) = v22;
          }
          else
          {
            llvm::raw_ostream::write(this, ", ", 2uLL);
            v22 = (void *)*((_QWORD *)this + 4);
          }
          v24 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)v7[4]);
          v25 = v23;
          if (v23 <= *((_QWORD *)this + 3) - (_QWORD)v22)
          {
            if (v23)
            {
              memcpy(v22, v24, v23);
              *((_QWORD *)this + 4) += v25;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, v24, v23);
          }
        }
        else
        {
          Size = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v31);
          v16 = (Size - 1);
          if (Size != 1)
          {
            v17 = (unint64_t *)(v7 + 2);
            do
            {
              v18 = (_WORD *)*((_QWORD *)this + 4);
              if (*((_QWORD *)this + 3) - (_QWORD)v18 > 1uLL)
              {
                *v18 = 8236;
                *((_QWORD *)this + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(this, ", ", 2uLL);
              }
              v19 = *v17++;
              sub_1C5E21910(this, v19, 0, 0, 0);
              --v16;
            }
            while (v16);
          }
        }
        result = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v31);
        v7 += 2 * result;
        v31 = v7;
        v9 = 1;
      }
      while (v7 != v10);
    }
  }
  else if (v6 != v7)
  {
    v26 = 0;
    v27 = 8 * (v8 >> 3);
    do
    {
      if ((v26 & 1) != 0)
      {
        v28 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v28 > 1uLL)
        {
          *v28 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
      }
      v29 = *(_QWORD *)v7;
      v7 += 2;
      result = (uint64_t)sub_1C5E21910(this, v29, 0, 0, 0);
      v26 = 1;
      v27 -= 8;
    }
    while (v27);
  }
  v30 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v30)
    return (uint64_t)llvm::raw_ostream::write(this, ")", 1uLL);
  *v30 = 41;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *sub_1C531B8B4(llvm::raw_ostream *this, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _BYTE *v10;

  v3 = this;
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0xA)
  {
    *(_DWORD *)(v4 + 7) = 678720361;
    *(_QWORD *)v4 = *(_QWORD *)"!DIArgList(";
    *((_QWORD *)this + 4) += 11;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "!DIArgList(", 0xBuLL);
  }
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 24);
    v8 = 8 * v5;
    do
    {
      if ((v6 & 1) != 0)
      {
        v9 = (_WORD *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v9 > 1uLL)
        {
          *v9 = 8236;
          *((_QWORD *)v3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v3, ", ", 2uLL);
        }
      }
      this = (llvm::raw_ostream *)sub_1C531B20C(v3);
      v7 += 8;
      v6 = 1;
      v8 -= 8;
    }
    while (v8);
  }
  v10 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v10)
    return llvm::raw_ostream::write(v3, ")", 1uLL);
  *v10 = 41;
  ++*((_QWORD *)v3 + 4);
  return this;
}

llvm::raw_ostream *sub_1C531BA08(llvm::raw_ostream *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *result;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  char v11;
  const char *v12;
  uint64_t v13;

  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 0xB)
  {
    *(_DWORD *)(v6 + 8) = 678326121;
    *(_QWORD *)v6 = *(_QWORD *)"!DILocation(";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DILocation(", 0xCuLL);
  }
  v10 = this;
  v11 = 1;
  v12 = ", ";
  v13 = a3;
  sub_1C531BB94((llvm::raw_ostream *)&v10, "line", 4uLL, *(_DWORD *)(a2 + 4), 0);
  sub_1C531BB94((llvm::raw_ostream *)&v10, "column", 6uLL, *(unsigned __int16 *)(a2 + 2), 1);
  sub_1C531BCE0((llvm::raw_ostream *)&v10, "scope", 5uLL, *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8)), 0);
  if (*(_DWORD *)(a2 + 8) == 2)
    v7 = *(_QWORD *)(a2 - 8);
  else
    v7 = 0;
  sub_1C531BCE0((llvm::raw_ostream *)&v10, "inlinedAt", 9uLL, v7, 1);
  result = sub_1C531BE34((llvm::raw_ostream *)&v10, "isImplicitCode", 0xEuLL, *(unsigned __int8 *)(a2 + 1) >> 7, 256);
  v9 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v9)
    return llvm::raw_ostream::write(this, ")", 1uLL);
  *v9 = 41;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *sub_1C531BB94(llvm::raw_ostream *result, char *a2, size_t a3, unsigned int a4, char a5)
{
  llvm::raw_ostream *v8;
  const void *v9;
  size_t v10;
  void *v11;
  _WORD *v12;

  if (a4 || (a5 & 1) == 0)
  {
    v8 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v9 = (const void *)*((_QWORD *)result + 2);
      if (v9)
      {
        v10 = strlen(*((const char **)result + 2));
        v11 = (void *)*((_QWORD *)v8 + 4);
        if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v11)
        {
          if (v10)
          {
            memcpy(v11, v9, v10);
            *((_QWORD *)v8 + 4) += v10;
          }
        }
        else
        {
          llvm::raw_ostream::write(v8, (const char *)v9, v10);
        }
      }
    }
    v12 = (_WORD *)*((_QWORD *)v8 + 4);
    if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
    {
      if (a3)
      {
        memcpy(v12, a2, a3);
        v12 = (_WORD *)(*((_QWORD *)v8 + 4) + a3);
        *((_QWORD *)v8 + 4) = v12;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, a2, a3);
      v12 = (_WORD *)*((_QWORD *)v8 + 4);
    }
    if (*((_QWORD *)v8 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 8250;
      *((_QWORD *)v8 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v8, ": ", 2uLL);
    }
    return sub_1C5E21910(v8, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *sub_1C531BCE0(llvm::raw_ostream *result, char *a2, size_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  llvm::raw_ostream *v9;
  const void *v10;
  size_t v11;
  void *v12;
  _WORD *v13;

  v8 = (uint64_t)result;
  if (a4 || (a5 & 1) == 0)
  {
    v9 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v10 = (const void *)*((_QWORD *)result + 2);
      if (v10)
      {
        v11 = strlen(*((const char **)result + 2));
        v12 = (void *)*((_QWORD *)v9 + 4);
        if (v11 <= *((_QWORD *)v9 + 3) - (_QWORD)v12)
        {
          if (v11)
          {
            memcpy(v12, v10, v11);
            *((_QWORD *)v9 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v9, (const char *)v10, v11);
        }
      }
    }
    v13 = (_WORD *)*((_QWORD *)v9 + 4);
    if (a3 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
    {
      if (a3)
      {
        memcpy(v13, a2, a3);
        v13 = (_WORD *)(*((_QWORD *)v9 + 4) + a3);
        *((_QWORD *)v9 + 4) = v13;
      }
    }
    else
    {
      llvm::raw_ostream::write(v9, a2, a3);
      v13 = (_WORD *)*((_QWORD *)v9 + 4);
    }
    if (*((_QWORD *)v9 + 3) - (_QWORD)v13 > 1uLL)
    {
      *v13 = 8250;
      *((_QWORD *)v9 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v9, ": ", 2uLL);
    }
    return sub_1C531BFC8(*(llvm::raw_ostream **)v8, a4, *(uint64_t (****)(_QWORD, uint64_t))(v8 + 24));
  }
  return result;
}

llvm::raw_ostream *sub_1C531BE34(llvm::raw_ostream *result, char *a2, size_t a3, int a4, __int16 a5)
{
  llvm::raw_ostream *v8;
  const void *v9;
  size_t v10;
  void *v11;
  _WORD *v12;
  void *v13;
  const char *v14;
  size_t v15;

  if ((a5 & 0xFF00) == 0 || a4 != a5)
  {
    v8 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v9 = (const void *)*((_QWORD *)result + 2);
      if (v9)
      {
        v10 = strlen(*((const char **)result + 2));
        v11 = (void *)*((_QWORD *)v8 + 4);
        if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v11)
        {
          if (v10)
          {
            memcpy(v11, v9, v10);
            *((_QWORD *)v8 + 4) += v10;
          }
        }
        else
        {
          llvm::raw_ostream::write(v8, (const char *)v9, v10);
        }
      }
    }
    v12 = (_WORD *)*((_QWORD *)v8 + 4);
    if (a3 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
    {
      if (a3)
      {
        memcpy(v12, a2, a3);
        v12 = (_WORD *)(*((_QWORD *)v8 + 4) + a3);
        *((_QWORD *)v8 + 4) = v12;
      }
    }
    else
    {
      llvm::raw_ostream::write(v8, a2, a3);
      v12 = (_WORD *)*((_QWORD *)v8 + 4);
    }
    if (*((_QWORD *)v8 + 3) - (_QWORD)v12 > 1uLL)
    {
      *v12 = 8250;
      v13 = (void *)(*((_QWORD *)v8 + 4) + 2);
      *((_QWORD *)v8 + 4) = v13;
    }
    else
    {
      llvm::raw_ostream::write(v8, ": ", 2uLL);
      v13 = (void *)*((_QWORD *)v8 + 4);
    }
    if (a4)
      v14 = "true";
    else
      v14 = "false";
    if (a4)
      v15 = 4;
    else
      v15 = 5;
    if (v15 <= *((_QWORD *)v8 + 3) - (_QWORD)v13)
    {
      result = (llvm::raw_ostream *)memcpy(v13, v14, v15);
      *((_QWORD *)v8 + 4) += v15;
    }
    else
    {
      return llvm::raw_ostream::write(v8, v14, v15);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C531BFC8(llvm::raw_ostream *result, uint64_t a2, uint64_t (***a3)(_QWORD, uint64_t))
{
  _DWORD *v5;

  if (a2)
  {
    sub_1C531B20C(result);
    return (llvm::raw_ostream *)(**a3)(a3, a2);
  }
  else
  {
    v5 = (_DWORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v5 > 3uLL)
    {
      *v5 = 1819047278;
      *((_QWORD *)result + 4) += 4;
    }
    else
    {
      return llvm::raw_ostream::write(result, "null", 4uLL);
    }
  }
  return result;
}

uint64_t sub_1C531C04C(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C531C068 + 4 * byte_1C85FC51A[a2]))();
}

char *sub_1C531C068(char *result)
{
  result[23] = 8;
  strcpy(result, "external");
  return result;
}

char *sub_1C531C17C(char *result)
{
  result[23] = 11;
  strcpy(result, "extern_weak");
  return result;
}

char *sub_1C531C1A8(char *result)
{
  result[23] = 6;
  strcpy(result, "common");
  return result;
}

char *sub_1C531C1CC(char *result)
{
  result[23] = 7;
  strcpy(result, "private");
  return result;
}

double sub_1C531C1F4(uint64_t a1)
{
  unsigned int v2;
  llvm::SlotTracker *v3;
  const llvm::Function *v4;
  llvm::SlotTracker *v5;
  double result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 == 21)
  {
    v3 = (llvm::SlotTracker *)operator new();
    v4 = *(const llvm::Function **)(a1 + 24);
    return llvm::SlotTracker::SlotTracker(v3, v4, 0);
  }
  if (a1 && v2 >= 0x1C)
  {
    if (!*(_QWORD *)(a1 + 40))
      return result;
    v3 = (llvm::SlotTracker *)operator new();
    v4 = *(const llvm::Function **)(*(_QWORD *)(a1 + 40) + 56);
    return llvm::SlotTracker::SlotTracker(v3, v4, 0);
  }
  if (a1 && v2 == 22)
  {
    v3 = (llvm::SlotTracker *)operator new();
    v4 = *(const llvm::Function **)(a1 + 56);
    return llvm::SlotTracker::SlotTracker(v3, v4, 0);
  }
  if (a1 && v2 == 3 || a1 && v2 == 1 || a1 && v2 == 2)
  {
    v5 = (llvm::SlotTracker *)operator new();
    return llvm::SlotTracker::SlotTracker(v5, *(const llvm::Module **)(a1 + 40), 0);
  }
  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    v3 = (llvm::SlotTracker *)operator new();
    v4 = (const llvm::Function *)a1;
    return llvm::SlotTracker::SlotTracker(v3, v4, 0);
  }
  return result;
}

uint64_t sub_1C531C328(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 56 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 56 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t *sub_1C531C3C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    v5 = v3 + 8;
    do
    {
      if ((*(_QWORD *)(v5 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C621E630(v5);
      v5 += 56;
      v4 -= 56;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C531C430(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E814DC38;
  sub_1C51838C8((uint64_t)(a1 + 38));
  MEMORY[0x1CAA32FB4](a1[34], 8);
  sub_1C51838C8((uint64_t)(a1 + 29));
  MEMORY[0x1CAA32FB4](a1[25], 8);
  MEMORY[0x1CAA32FB4](a1[21], 8);
  MEMORY[0x1CAA32FB4](a1[17], 8);
  MEMORY[0x1CAA32FB4](a1[13], 8);
  v2 = (_QWORD *)a1[11];
  if (v2 == a1 + 8)
  {
    v5 = 4;
    v2 = a1 + 8;
  }
  else
  {
    if (!v2)
      goto LABEL_3;
    v5 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v5))();
LABEL_3:
  v3 = (_QWORD *)a1[7];
  if (v3 == a1 + 4)
  {
    v6 = 4;
    v3 = a1 + 4;
LABEL_11:
    (*(void (**)(void))(*v3 + 8 * v6))();
    return a1;
  }
  if (v3)
  {
    v6 = 5;
    goto LABEL_11;
  }
  return a1;
}

_DWORD *sub_1C531C510(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v12;
  uint64_t v13;

  v13 = a1;
  result = (_DWORD *)sub_1C6226C9C(a2, a1);
  if (!(_DWORD)result)
  {
    if (a1)
    {
      v5 = *(unsigned __int8 *)(a1 + 16);
      if (v5 <= 0x14 && v5 >= 4)
      {
        v6 = *(_DWORD *)(a1 + 20);
        v7 = v6 & 0x7FFFFFF;
        if ((v6 & 0x7FFFFFF) != 0)
        {
          if ((v6 & 0x40000000) != 0)
          {
            v8 = *(_QWORD *)(a1 - 8);
          }
          else
          {
            v7 = v7;
            v8 = a1 - 32 * v7;
          }
          v9 = 32 * v7;
          do
          {
            v10 = *(unsigned __int8 *)(*(_QWORD *)v8 + 16);
            if (v10 >= 4 && v10 != 22)
              sub_1C531C510();
            v8 += 32;
            v9 -= 32;
          }
          while (v9);
        }
      }
    }
    v12 = ((*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4) + 1;
    result = (_DWORD *)sub_1C6226D14(a2, &v13);
    *result = v12;
  }
  return result;
}

uint64_t sub_1C531C5E4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  unint64_t v80;
  uint64_t *v81;
  int v82;
  int v83;
  int64_t v85;
  uint64_t v86;

  v8 = result;
LABEL_2:
  v81 = (uint64_t *)(a2 - 16);
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C531CE00(a3, *(_QWORD *)(a2 - 16), *(_QWORD *)v8);
        if ((_DWORD)result)
        {
          v37 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v37;
          LODWORD(v37) = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v37;
        }
        return result;
      case 3:
        return sub_1C531D084(v8, v8 + 16, (uint64_t)v81, a3);
      case 4:
        return sub_1C531D378(v8, v8 + 16, v8 + 32, (uint64_t)v81, a3);
      case 5:
        return sub_1C531CF6C(v8, v8 + 16, v8 + 32, v8 + 48, (uint64_t)v81, a3);
      default:
        if (v10 <= 383)
        {
          v38 = v8 + 16;
          v40 = v8 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = v8;
              do
              {
                v43 = *(_QWORD *)(v42 + 16);
                v44 = *(_QWORD *)v42;
                v42 = v38;
                result = sub_1C531CE00(a3, v43, v44);
                if ((_DWORD)result)
                {
                  v45 = *(_QWORD *)v42;
                  v46 = *(_DWORD *)(v42 + 8);
                  v47 = v41;
                  while (1)
                  {
                    v48 = v8 + v47;
                    *(_QWORD *)(v48 + 16) = *(_QWORD *)(v8 + v47);
                    *(_DWORD *)(v48 + 24) = *(_DWORD *)(v8 + v47 + 8);
                    if (!v47)
                      break;
                    result = sub_1C531CE00(a3, v45, *(_QWORD *)(v48 - 16));
                    v47 -= 16;
                    if ((result & 1) == 0)
                    {
                      v49 = v8 + v47 + 16;
                      goto LABEL_72;
                    }
                  }
                  v49 = v8;
LABEL_72:
                  *(_QWORD *)v49 = v45;
                  *(_DWORD *)(v49 + 8) = v46;
                }
                v38 = v42 + 16;
                v41 += 16;
              }
              while (v42 + 16 != a2);
            }
          }
          else if (!v40)
          {
            v72 = (_DWORD *)(v8 + 24);
            do
            {
              v73 = *(_QWORD *)(v8 + 16);
              v74 = *(_QWORD *)v8;
              v8 = v38;
              result = sub_1C531CE00(a3, v73, v74);
              if ((_DWORD)result)
              {
                v75 = *(_QWORD *)v8;
                v76 = *(_DWORD *)(v8 + 8);
                v77 = v72;
                do
                {
                  v78 = v77;
                  *((_QWORD *)v77 - 1) = *((_QWORD *)v77 - 3);
                  v79 = *(v77 - 4);
                  v77 -= 4;
                  *v78 = v79;
                  result = sub_1C531CE00(a3, v75, *((_QWORD *)v78 - 5));
                }
                while ((result & 1) != 0);
                *((_QWORD *)v77 - 1) = v75;
                *v77 = v76;
              }
              v38 = v8 + 16;
              v72 += 4;
            }
            while (v8 + 16 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v80 = a2;
            v50 = (unint64_t)(v11 - 2) >> 1;
            v85 = v50;
            do
            {
              v51 = v50;
              if (v85 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = v8 + 16 * v52;
                if (2 * v50 + 2 < v11 && sub_1C531CE00(a3, *(_QWORD *)v53, *(_QWORD *)(v53 + 16)))
                {
                  v53 += 16;
                  v52 = 2 * v51 + 2;
                }
                v54 = v8 + 16 * v51;
                result = sub_1C531CE00(a3, *(_QWORD *)v53, *(_QWORD *)v54);
                if ((result & 1) == 0)
                {
                  v55 = *(_QWORD *)v54;
                  v82 = *(_DWORD *)(v54 + 8);
                  do
                  {
                    v56 = v53;
                    *(_QWORD *)v54 = *(_QWORD *)v53;
                    *(_DWORD *)(v54 + 8) = *(_DWORD *)(v53 + 8);
                    if (v85 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = v8 + 16 * v57;
                    if (2 * v52 + 2 < v11 && sub_1C531CE00(a3, *(_QWORD *)v53, *(_QWORD *)(v53 + 16)))
                    {
                      v53 += 16;
                      v57 = 2 * v52 + 2;
                    }
                    result = sub_1C531CE00(a3, *(_QWORD *)v53, v55);
                    v54 = v56;
                    v52 = v57;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v56 = v55;
                  *(_DWORD *)(v56 + 8) = v82;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v58 = v80;
            do
            {
              v59 = 0;
              v86 = *(_QWORD *)v8;
              v83 = *(_DWORD *)(v8 + 8);
              v60 = v8;
              do
              {
                v61 = v60 + 16 * v59 + 16;
                v62 = (2 * v59) | 1;
                v63 = 2 * v59 + 2;
                if (v63 < v11)
                {
                  result = sub_1C531CE00(a3, *(_QWORD *)v61, *(_QWORD *)(v60 + 16 * v59 + 32));
                  if ((_DWORD)result)
                  {
                    v61 += 16;
                    v62 = v63;
                  }
                }
                *(_QWORD *)v60 = *(_QWORD *)v61;
                *(_DWORD *)(v60 + 8) = *(_DWORD *)(v61 + 8);
                v60 = v61;
                v59 = v62;
              }
              while (v62 <= (uint64_t)((unint64_t)(v11 - 2) >> 1));
              v64 = v58 - 16;
              if (v61 == v58 - 16)
              {
                *(_QWORD *)v61 = v86;
                *(_DWORD *)(v61 + 8) = v83;
              }
              else
              {
                *(_QWORD *)v61 = *(_QWORD *)(v58 - 16);
                *(_DWORD *)(v61 + 8) = *(_DWORD *)(v58 - 8);
                *(_QWORD *)(v58 - 16) = v86;
                *(_DWORD *)(v58 - 8) = v83;
                v65 = v61 - v8 + 16;
                if (v65 >= 17)
                {
                  v66 = (((unint64_t)v65 >> 4) - 2) >> 1;
                  v67 = v8 + 16 * v66;
                  result = sub_1C531CE00(a3, *(_QWORD *)v67, *(_QWORD *)v61);
                  if ((_DWORD)result)
                  {
                    v68 = *(_QWORD *)v61;
                    v69 = *(_DWORD *)(v61 + 8);
                    do
                    {
                      v70 = v67;
                      *(_QWORD *)v61 = *(_QWORD *)v67;
                      *(_DWORD *)(v61 + 8) = *(_DWORD *)(v67 + 8);
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = v8 + 16 * v66;
                      result = sub_1C531CE00(a3, *(_QWORD *)v67, v68);
                      v61 = v70;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v70 = v68;
                    *(_DWORD *)(v70 + 8) = v69;
                  }
                }
              }
              v58 = v64;
            }
            while (v11-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v8 + 16 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x801)
        {
          sub_1C531D084(v13, v8, (uint64_t)v81, a3);
        }
        else
        {
          sub_1C531D084(v8, v13, (uint64_t)v81, a3);
          sub_1C531D084(v8 + 16, v13 - 16, a2 - 32, a3);
          sub_1C531D084(v8 + 32, v8 + 16 + 16 * v12, a2 - 48, a3);
          sub_1C531D084(v13 - 16, v13, v8 + 16 + 16 * v12, a3);
          v14 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
          LODWORD(v14) = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v13 + 8) = v14;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C531CE00(a3, *(_QWORD *)(v8 - 16), *(_QWORD *)v8))
        {
          v28 = *(_QWORD *)v8;
          v29 = *(_DWORD *)(v8 + 8);
          result = sub_1C531CE00(a3, *(_QWORD *)v8, *v81);
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v30 = *(_QWORD *)(v9 + 16);
              v9 += 16;
              result = sub_1C531CE00(a3, v28, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = v8 + 16;
            do
            {
              v9 = v31;
              if (v31 >= a2)
                break;
              v31 += 16;
              result = sub_1C531CE00(a3, v28, *(_QWORD *)v9);
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v9 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(_QWORD *)(v32 - 16);
              v32 -= 16;
              result = sub_1C531CE00(a3, v28, v33);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v32)
          {
            v34 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v32;
            *(_QWORD *)v32 = v34;
            LODWORD(v34) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v32 + 8);
            *(_DWORD *)(v32 + 8) = v34;
            do
            {
              v35 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (!sub_1C531CE00(a3, v28, v35));
            do
            {
              v36 = *(_QWORD *)(v32 - 16);
              v32 -= 16;
              result = sub_1C531CE00(a3, v28, v36);
            }
            while ((result & 1) != 0);
          }
          if (v9 - 16 != v8)
          {
            *(_QWORD *)v8 = *(_QWORD *)(v9 - 16);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 8);
          }
          a5 = 0;
          *(_QWORD *)(v9 - 16) = v28;
          *(_DWORD *)(v9 - 8) = v29;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)v8;
        v17 = *(_DWORD *)(v8 + 8);
        do
        {
          v18 = sub_1C531CE00(a3, *(_QWORD *)(v8 + v15 + 16), v16);
          v15 += 16;
        }
        while (v18);
        v19 = v8 + v15;
        v20 = a2;
        if (v15 == 16)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *(_QWORD *)(v20 - 16);
            v20 -= 16;
          }
          while (!sub_1C531CE00(a3, v22, v16));
        }
        else
        {
          do
          {
            v21 = *(_QWORD *)(v20 - 16);
            v20 -= 16;
          }
          while (!sub_1C531CE00(a3, v21, v16));
        }
        v9 = v8 + v15;
        if (v19 < v20)
        {
          v23 = v20;
          do
          {
            v24 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v23;
            *(_QWORD *)v23 = v24;
            LODWORD(v24) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v23 + 8);
            *(_DWORD *)(v23 + 8) = v24;
            do
            {
              v25 = *(_QWORD *)(v9 + 16);
              v9 += 16;
            }
            while (sub_1C531CE00(a3, v25, v16));
            do
            {
              v26 = *(_QWORD *)(v23 - 16);
              v23 -= 16;
            }
            while (!sub_1C531CE00(a3, v26, v16));
          }
          while (v9 < v23);
        }
        if (v9 - 16 != v8)
        {
          *(_QWORD *)v8 = *(_QWORD *)(v9 - 16);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 - 8);
        }
        *(_QWORD *)(v9 - 16) = v16;
        *(_DWORD *)(v9 - 8) = v17;
        if (v19 < v20)
        {
LABEL_30:
          result = sub_1C531C5E4(v8, v9 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = sub_1C531D1AC(v8, v9 - 16, a3);
        result = sub_1C531D1AC(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_30;
        }
        a2 = v9 - 16;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C531CE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  if (a2 == a3)
    return 0;
  v7 = sub_1C6226C9C(*(_QWORD *)a1, *(_QWORD *)(a2 + 24));
  v8 = sub_1C6226C9C(*(_QWORD *)a1, *(_QWORD *)(a3 + 24));
  if (v7 < v8)
    return **(_BYTE **)(a1 + 8) && v8 <= **(_DWORD **)(a1 + 16);
  if (v8 < v7)
    return !**(_BYTE **)(a1 + 8) || v7 > **(_DWORD **)(a1 + 16);
  if (**(_BYTE **)(a1 + 8) && v7 <= **(_DWORD **)(a1 + 16))
  {
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_DWORD *)(v16 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(v16 - 8);
    else
      v18 = v16 - 32 * (v17 & 0x7FFFFFF);
    v19 = (unint64_t)(a2 - v18) >> 5;
    v20 = *(_QWORD *)(a3 + 24);
    v21 = *(_DWORD *)(v20 + 20);
    if ((v21 & 0x40000000) != 0)
      v22 = *(_QWORD *)(v20 - 8);
    else
      v22 = v20 - 32 * (v21 & 0x7FFFFFF);
    return v19 < ((unint64_t)(a3 - v22) >> 5);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v9 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(_QWORD *)(v9 - 8);
    else
      v11 = v9 - 32 * (v10 & 0x7FFFFFF);
    v12 = (unint64_t)(a2 - v11) >> 5;
    v13 = *(_QWORD *)(a3 + 24);
    v14 = *(_DWORD *)(v13 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(v13 - 8);
    else
      v15 = v13 - 32 * (v14 & 0x7FFFFFF);
    return v12 > ((unint64_t)(a3 - v15) >> 5);
  }
}

BOOL sub_1C531CF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C531D378(a1, a2, a3, a4, a6);
  result = sub_1C531CE00(a6, *(_QWORD *)a5, *(_QWORD *)a4);
  if (result)
  {
    v13 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v13;
    LODWORD(v13) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    result = sub_1C531CE00(a6, *(_QWORD *)a4, *(_QWORD *)a3);
    if (result)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      LODWORD(v14) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v14;
      result = sub_1C531CE00(a6, *(_QWORD *)a3, *(_QWORD *)a2);
      if (result)
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        LODWORD(v15) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v15;
        result = sub_1C531CE00(a6, *(_QWORD *)a2, *(_QWORD *)a1);
        if (result)
        {
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v16;
          LODWORD(v16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C531D084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v8 = sub_1C531CE00(a4, *(_QWORD *)a2, *(_QWORD *)a1);
  result = sub_1C531CE00(a4, *(_QWORD *)a3, *(_QWORD *)a2);
  if (v8)
  {
    v10 = *(_QWORD *)a1;
    if (result)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      v11 = (int *)(a3 + 8);
      v12 = (int *)(a1 + 8);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v10;
      v17 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v17;
      result = sub_1C531CE00(a4, *(_QWORD *)a3, v10);
      if (!result)
        return result;
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v18;
      v11 = (int *)(a3 + 8);
      v12 = (int *)(a2 + 8);
    }
    v15 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v15 = (int *)(a2 + 8);
    v14 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)a3 = v13;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v14;
    result = sub_1C531CE00(a4, *(_QWORD *)a2, *(_QWORD *)a1);
    if (result)
    {
      v16 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = (int *)(a1 + 8);
      *(_QWORD *)a2 = v16;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
    }
  }
  return result;
}

BOOL sub_1C531D1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C531CE00(a3, *(_QWORD *)(a2 - 16), *(_QWORD *)a1))
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v8;
        LODWORD(v8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      sub_1C531D084(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_1C531D378(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_1C531CF6C(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      v9 = (uint64_t *)(a1 + 32);
      sub_1C531D084(a1, a1 + 16, a1 + 32, a3);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C531CE00(a3, *(_QWORD *)v10, *v9))
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_DWORD *)(v10 + 8);
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 48) = *(_QWORD *)(a1 + v15 + 32);
        *(_DWORD *)(v16 + 56) = *(_DWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (!sub_1C531CE00(a3, v13, *(_QWORD *)(v16 + 16)))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v13;
      *(_DWORD *)(v17 + 8) = v14;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (uint64_t *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

BOOL sub_1C531D378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C531D084(a1, a2, a3, a5);
  result = sub_1C531CE00(a5, *(_QWORD *)a4, *(_QWORD *)a3);
  if (result)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    result = sub_1C531CE00(a5, *(_QWORD *)a3, *(_QWORD *)a2);
    if (result)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      LODWORD(v12) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      result = sub_1C531CE00(a5, *(_QWORD *)a2, *(_QWORD *)a1);
      if (result)
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

_QWORD *sub_1C531D458(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6226EF4(a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1C531D51C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_QWORD *)a1)
  {
    llvm::TypeFinder::run((llvm::TypeFinder *)(a1 + 8), *(const llvm::Module **)a1, 0);
    *(_QWORD *)a1 = 0;
    v2 = *(uint64_t **)(a1 + 104);
    v3 = *(uint64_t **)(a1 + 112);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = *(uint64_t **)(a1 + 104);
      do
      {
        v6 = *v5;
        v8 = v6;
        if ((*(_BYTE *)(v6 + 9) & 4) == 0)
        {
          v7 = *(_QWORD **)(v6 + 24);
          if (v7 && *v7)
            *v2++ = v6;
          else
            *((_DWORD *)sub_1C6144C70(a1 + 136, &v8) + 2) = v4++;
        }
        ++v5;
      }
      while (v5 != v3);
      if (v2 != *(uint64_t **)(a1 + 112))
        *(_QWORD *)(a1 + 112) = v2;
    }
  }
}

void sub_1C531D608(llvm::raw_ostream *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = *(_BYTE *)(a2 + 1) & 0x7F;
  if (v3 == 2)
  {
    v7 = (void *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v7 <= 0xCuLL)
    {
      v5 = "<temporary!> ";
      v6 = 13;
      goto LABEL_7;
    }
    qmemcpy(v7, "<temporary!> ", 13);
    v8 = *((_QWORD *)a1 + 4) + 13;
  }
  else
  {
    if (v3 != 1)
      goto LABEL_8;
    v4 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v4) <= 8)
    {
      v5 = "distinct ";
      v6 = 9;
LABEL_7:
      llvm::raw_ostream::write(a1, v5, v6);
      goto LABEL_8;
    }
    *(_BYTE *)(v4 + 8) = 32;
    *(_QWORD *)v4 = *(_QWORD *)"distinct ";
    v8 = *((_QWORD *)a1 + 4) + 9;
  }
  *((_QWORD *)a1 + 4) = v8;
LABEL_8:
  __asm { BR              X10 }
}

void sub_1C5320530(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm::raw_ostream *a14, char a15, const char *a16, uint64_t a17)
{
  llvm::raw_ostream *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  size_t v23;
  const char *v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t v31;

  v19 = *((_QWORD *)v17 + 4);
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v19) > 8)
  {
    *(_BYTE *)(v19 + 8) = 40;
    *(_QWORD *)v19 = *(_QWORD *)"!DIMacro(";
    v20 = *((_QWORD *)v17 + 4) + 9;
    *((_QWORD *)v17 + 4) = v20;
  }
  else
  {
    llvm::raw_ostream::write(v17, "!DIMacro(", 9uLL);
    v20 = *((_QWORD *)v17 + 4);
  }
  a14 = v17;
  a16 = ", ";
  a15 = 0;
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v20) > 5)
  {
    *(_WORD *)(v20 + 4) = 8250;
    *(_DWORD *)v20 = 1701869940;
    *((_QWORD *)v17 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v17, "type: ", 6uLL);
  }
  v21 = *(unsigned __int16 *)(v18 + 2);
  v22 = llvm::dwarf::MacinfoString((llvm::dwarf *)v21);
  if (v23)
  {
    v24 = v22;
    v25 = v23;
    v26 = (void *)*((_QWORD *)v17 + 4);
    if (v23 <= *((_QWORD *)v17 + 3) - (_QWORD)v26)
    {
      memcpy(v26, v24, v23);
      *((_QWORD *)v17 + 4) += v25;
    }
    else
    {
      llvm::raw_ostream::write(v17, v24, v23);
    }
  }
  else
  {
    sub_1C5E21910(v17, v21, 0, 0, 0);
  }
  sub_1C531BB94((llvm::raw_ostream *)&a14, "line", 4uLL, *(_DWORD *)(v18 + 24), 1);
  v27 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8));
  if (v27)
  {
    v28 = *(uint64_t **)(v27 + 8);
    v31 = *v28;
    v29 = (llvm::raw_ostream *)(v28 + 3);
    v30 = v31;
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  sub_1C532157C((llvm::raw_ostream *)&a14, "name", 4uLL, v29, v30, 1);
  JUMPOUT(0x1C5320F44);
}

llvm::raw_ostream *sub_1C5321414(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  const char *v11;
  size_t v12;
  llvm::raw_ostream *v13;
  void *v14;
  llvm::raw_ostream *result;

  v4 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v5 = *(const void **)(a1 + 16);
    if (v5)
    {
      v6 = strlen(*(const char **)(a1 + 16));
      v7 = (void *)*((_QWORD *)v4 + 4);
      if (v6 <= *((_QWORD *)v4 + 3) - (_QWORD)v7)
      {
        if (v6)
        {
          memcpy(v7, v5, v6);
          *((_QWORD *)v4 + 4) += v6;
        }
      }
      else
      {
        llvm::raw_ostream::write(v4, (const char *)v5, v6);
      }
    }
  }
  v8 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v8) > 4)
  {
    *(_BYTE *)(v8 + 4) = 32;
    *(_DWORD *)v8 = 979853684;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v4, "tag: ", 5uLL);
  }
  v9 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a2 + 2));
  if (!v10)
    return sub_1C5E21910(*(llvm::raw_ostream **)a1, *(unsigned __int16 *)(a2 + 2), 0, 0, 0);
  v11 = v9;
  v12 = v10;
  v13 = *(llvm::raw_ostream **)a1;
  v14 = (void *)*((_QWORD *)v13 + 4);
  if (v10 > *((_QWORD *)v13 + 3) - (_QWORD)v14)
    return llvm::raw_ostream::write(v13, v11, v10);
  result = (llvm::raw_ostream *)memcpy(v14, v11, v10);
  *((_QWORD *)v13 + 4) += v12;
  return result;
}

llvm::raw_ostream *sub_1C532157C(llvm::raw_ostream *result, char *a2, size_t a3, llvm::raw_ostream *a4, uint64_t a5, int a6)
{
  llvm::raw_ostream **v10;
  llvm::raw_ostream *v11;
  const void *v12;
  size_t v13;
  void *v14;
  _BYTE *v15;
  _BYTE *v16;

  v10 = (llvm::raw_ostream **)result;
  if (!a6 || a5)
  {
    v11 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v12 = (const void *)*((_QWORD *)result + 2);
      if (v12)
      {
        v13 = strlen(*((const char **)result + 2));
        v14 = (void *)*((_QWORD *)v11 + 4);
        if (v13 <= *((_QWORD *)v11 + 3) - (_QWORD)v14)
        {
          if (v13)
          {
            memcpy(v14, v12, v13);
            *((_QWORD *)v11 + 4) += v13;
          }
        }
        else
        {
          llvm::raw_ostream::write(v11, (const char *)v12, v13);
        }
      }
    }
    v15 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (a3 <= *((_QWORD *)v11 + 3) - (_QWORD)v15)
    {
      if (a3)
      {
        memcpy(v15, a2, a3);
        v15 = (_BYTE *)(*((_QWORD *)v11 + 4) + a3);
        *((_QWORD *)v11 + 4) = v15;
      }
    }
    else
    {
      llvm::raw_ostream::write(v11, a2, a3);
      v15 = (_BYTE *)*((_QWORD *)v11 + 4);
    }
    if (*((_QWORD *)v11 + 3) - (_QWORD)v15 > 2uLL)
    {
      v15[2] = 34;
      *(_WORD *)v15 = 8250;
      *((_QWORD *)v11 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v11, ": \"", 3uLL);
    }
    llvm::printEscapedString(a4, a5, *v10);
    result = *v10;
    v16 = (_BYTE *)*((_QWORD *)*v10 + 4);
    if (*((_BYTE **)*v10 + 3) == v16)
    {
      return llvm::raw_ostream::write(result, "\"", 1uLL);
    }
    else
    {
      *v16 = 34;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C5321714(uint64_t a1, char *a2, size_t a3, unint64_t a4)
{
  llvm::raw_ostream *v7;
  const void *v8;
  size_t v9;
  void *v10;
  _WORD *v11;

  v7 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v8 = *(const void **)(a1 + 16);
    if (v8)
    {
      v9 = strlen(*(const char **)(a1 + 16));
      v10 = (void *)*((_QWORD *)v7 + 4);
      if (v9 <= *((_QWORD *)v7 + 3) - (_QWORD)v10)
      {
        if (v9)
        {
          memcpy(v10, v8, v9);
          *((_QWORD *)v7 + 4) += v9;
        }
      }
      else
      {
        llvm::raw_ostream::write(v7, (const char *)v8, v9);
      }
    }
  }
  v11 = (_WORD *)*((_QWORD *)v7 + 4);
  if (a3 <= *((_QWORD *)v7 + 3) - (_QWORD)v11)
  {
    if (a3)
    {
      memcpy(v11, a2, a3);
      v11 = (_WORD *)(*((_QWORD *)v7 + 4) + a3);
      *((_QWORD *)v7 + 4) = v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, a2, a3);
    v11 = (_WORD *)*((_QWORD *)v7 + 4);
  }
  if (*((_QWORD *)v7 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8250;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ": ", 2uLL);
  }
  return llvm::raw_ostream::operator<<(v7, a4);
}

void sub_1C5321838()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED8042C0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1ED8042C0))
    {
      qword_1ED8042C8 = (uint64_t)off_1E814DD30;
      unk_1ED8042D0 = 0;
      qword_1ED8042D8 = 0;
      unk_1ED8042E0 = 0;
      __cxa_guard_release(&qword_1ED8042C0);
    }
  }
}

llvm::raw_ostream *sub_1C5321894(llvm::raw_ostream *result, char *a2, size_t a3, unint64_t a4)
{
  llvm::raw_ostream *v7;
  const void *v8;
  size_t v9;
  void *v10;
  _WORD *v11;

  if (a4)
  {
    v7 = *(llvm::raw_ostream **)result;
    if (*((_BYTE *)result + 8))
    {
      *((_BYTE *)result + 8) = 0;
    }
    else
    {
      v8 = (const void *)*((_QWORD *)result + 2);
      if (v8)
      {
        v9 = strlen(*((const char **)result + 2));
        v10 = (void *)*((_QWORD *)v7 + 4);
        if (v9 <= *((_QWORD *)v7 + 3) - (_QWORD)v10)
        {
          if (v9)
          {
            memcpy(v10, v8, v9);
            *((_QWORD *)v7 + 4) += v9;
          }
        }
        else
        {
          llvm::raw_ostream::write(v7, (const char *)v8, v9);
        }
      }
    }
    v11 = (_WORD *)*((_QWORD *)v7 + 4);
    if (a3 <= *((_QWORD *)v7 + 3) - (_QWORD)v11)
    {
      if (a3)
      {
        memcpy(v11, a2, a3);
        v11 = (_WORD *)(*((_QWORD *)v7 + 4) + a3);
        *((_QWORD *)v7 + 4) = v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, a2, a3);
      v11 = (_WORD *)*((_QWORD *)v7 + 4);
    }
    if (*((_QWORD *)v7 + 3) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 8250;
      *((_QWORD *)v7 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v7, ": ", 2uLL);
    }
    return sub_1C5E21910(v7, a4, 0, 0, 0);
  }
  return result;
}

void sub_1C53219CC(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  _WORD *v9;
  unsigned int v10;
  char v11;
  int *v12;
  uint64_t v13;
  const char *FlagString;
  size_t v15;
  size_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  void *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
  {
    v4 = *(llvm::raw_ostream **)a1;
    if (*(_BYTE *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 8) = 0;
    }
    else
    {
      v5 = *(const void **)(a1 + 16);
      if (v5)
      {
        v6 = strlen(*(const char **)(a1 + 16));
        v7 = (void *)*((_QWORD *)v4 + 4);
        if (v6 <= *((_QWORD *)v4 + 3) - (_QWORD)v7)
        {
          if (v6)
          {
            memcpy(v7, v5, v6);
            *((_QWORD *)v4 + 4) += v6;
          }
        }
        else
        {
          llvm::raw_ostream::write(v4, (const char *)v5, v6);
        }
      }
    }
    v8 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v8) > 4)
    {
      *(_BYTE *)(v8 + 4) = 115;
      *(_DWORD *)v8 = 1734437990;
      v9 = (_WORD *)(*((_QWORD *)v4 + 4) + 5);
      *((_QWORD *)v4 + 4) = v9;
    }
    else
    {
      llvm::raw_ostream::write(v4, "flags", 5uLL);
      v9 = (_WORD *)*((_QWORD *)v4 + 4);
    }
    if (*((_QWORD *)v4 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8250;
      *((_QWORD *)v4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v4, ": ", 2uLL);
    }
    v22 = v24;
    v23 = 0x800000000;
    v10 = llvm::DINode::splitFlags(a2, (uint64_t)&v22);
    if ((_DWORD)v23)
    {
      v11 = 0;
      v12 = (int *)v22;
      v13 = 4 * v23;
      do
      {
        FlagString = llvm::DINode::getFlagString(*v12);
        v16 = v15;
        v17 = *(llvm::raw_ostream **)a1;
        if ((v11 & 1) != 0)
        {
          v18 = *((_QWORD *)v17 + 4);
          if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 2)
          {
            *(_BYTE *)(v18 + 2) = 32;
            *(_WORD *)v18 = 31776;
            *((_QWORD *)v17 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, " | ", 3uLL);
          }
        }
        v19 = (void *)*((_QWORD *)v17 + 4);
        if (v16 <= *((_QWORD *)v17 + 3) - (_QWORD)v19)
        {
          if (v16)
          {
            memcpy(v19, FlagString, v16);
            *((_QWORD *)v17 + 4) += v16;
          }
        }
        else
        {
          llvm::raw_ostream::write(v17, FlagString, v16);
        }
        ++v12;
        v11 = 1;
        v13 -= 4;
      }
      while (v13);
      if (!v10 && (_DWORD)v23)
        goto LABEL_30;
      v20 = *(llvm::raw_ostream **)a1;
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v21) > 2)
      {
        *(_BYTE *)(v21 + 2) = 32;
        *(_WORD *)v21 = 31776;
        *((_QWORD *)v20 + 4) += 3;
      }
      else
      {
        v20 = llvm::raw_ostream::write(v20, " | ", 3uLL);
      }
    }
    else
    {
      v20 = *(llvm::raw_ostream **)a1;
    }
    sub_1C5E21910(v20, v10, 0, 0, 0);
LABEL_30:
    if (v22 != v24)
      free(v22);
  }
}

uint64_t sub_1C5321CA0(_BYTE *a1)
{
  return (*a1 < 0x23uLL) & (0x7FFFFFFF0uLL >> *a1);
}

llvm::raw_ostream *sub_1C5321CBC(llvm::raw_ostream *a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  _DWORD *v17;
  _DWORD *v18;
  const char *v19;
  llvm::raw_ostream *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  result = (llvm::raw_ostream *)sub_1C4774A9C(a2);
  if (a2 && (_DWORD)result)
  {
    v5 = *(unsigned __int8 *)(a2 + 17) >> 1;
    if (v5 == 127)
      v5 = -1;
    v25 = v5;
    result = llvm::FastMathFlags::print((llvm::raw_ostream *)&v25, a1);
  }
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < 0x1C)
  {
    if ((_DWORD)v6 != 5)
      return result;
    v12 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v14) = v12 - 13;
    LODWORD(v14) = v12 - 13;
    v13 = v14 >> 1;
    v9 = v13 > 6;
    v15 = (1 << v13) & 0x47;
    if (!v9 && v15 != 0)
    {
LABEL_21:
      if ((*(_BYTE *)(a2 + 17) & 2) != 0)
      {
        v17 = (_DWORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v17 > 3uLL)
        {
          *v17 = 2004184608;
          *((_QWORD *)a1 + 4) += 4;
        }
        else
        {
          result = llvm::raw_ostream::write(a1, " nuw", 4uLL);
        }
      }
      if ((*(_BYTE *)(a2 + 17) & 4) != 0)
      {
        v18 = (_DWORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v18 <= 3uLL)
        {
          v19 = " nsw";
          v20 = a1;
          v21 = 4;
          return llvm::raw_ostream::write(v20, v19, v21);
        }
        *v18 = 2004053536;
        v24 = *((_QWORD *)a1 + 4) + 4;
        goto LABEL_40;
      }
      return result;
    }
    if (v12 > 0x22)
      return result;
    if (((1 << v12) & 0xC180000) == 0)
    {
      if (v12 != 34)
        return result;
      goto LABEL_35;
    }
  }
  else
  {
    HIDWORD(v8) = v6 - 41;
    LODWORD(v8) = v6 - 41;
    v7 = v8 >> 1;
    v9 = v7 > 6;
    v10 = (1 << v7) & 0x47;
    if (!v9 && v10 != 0)
      goto LABEL_21;
    if (v6 > 0x3E)
      return result;
    if (((1 << v6) & 0xC1800000000000) == 0)
    {
      if (v6 != 62)
        return result;
LABEL_35:
      if ((*(_BYTE *)(a2 + 17) & 2) != 0)
      {
        v23 = *((_QWORD *)a1 + 4);
        if ((unint64_t)(*((_QWORD *)a1 + 3) - v23) <= 8)
        {
          v19 = " inbounds";
          v20 = a1;
          v21 = 9;
          return llvm::raw_ostream::write(v20, v19, v21);
        }
        *(_BYTE *)(v23 + 8) = 115;
        *(_QWORD *)v23 = *(_QWORD *)" inbounds";
        v24 = *((_QWORD *)a1 + 4) + 9;
        goto LABEL_40;
      }
      return result;
    }
  }
  if ((*(_BYTE *)(a2 + 17) & 2) != 0)
  {
    v22 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v22) <= 5)
    {
      v19 = " exact";
      v20 = a1;
      v21 = 6;
      return llvm::raw_ostream::write(v20, v19, v21);
    }
    *(_WORD *)(v22 + 4) = 29795;
    *(_DWORD *)v22 = 1635280160;
    v24 = *((_QWORD *)a1 + 4) + 6;
LABEL_40:
    *((_QWORD *)a1 + 4) = v24;
  }
  return result;
}

llvm::raw_ostream *sub_1C5321EF4(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  unsigned int v4;
  llvm::raw_ostream *result;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  v4 = *(_DWORD *)(a1 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 8);
  if (v4 > 0xFF || (result = (llvm::raw_ostream *)sub_1C530E898(a2)) == 0 || *((_DWORD *)result + 71))
  {
    v6 = v4 >> 8;
    v7 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v7) > 0xA)
    {
      *(_DWORD *)(v7 + 7) = 677733217;
      *(_QWORD *)v7 = *(_QWORD *)" addrspace(";
      *((_QWORD *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, " addrspace(", 0xBuLL);
    }
    result = sub_1C5E21910(this, v6, 0, 0, 0);
    v8 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v8)
    {
      return llvm::raw_ostream::write(this, ")", 1uLL);
    }
    else
    {
      *v8 = 41;
      ++*((_QWORD *)this + 4);
    }
  }
  return result;
}

void sub_1C5321FF0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  void *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  _QWORD v15[4];

  if (a2)
  {
    sub_1C530D7AC(a1 + 40, *a2);
    if (a3)
    {
      v6 = *(llvm::raw_ostream **)a1;
      v7 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v7 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        llvm::raw_ostream::write(v6, 32);
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 32;
      }
      sub_1C531A660((llvm::raw_ostream **)a1, a3);
    }
    v10 = *(llvm::raw_ostream **)a1;
    v11 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v11 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v12 = *(_QWORD *)(a1 + 32);
    v15[0] = off_1E814DD30;
    v15[1] = a1 + 40;
    v13 = *(llvm::raw_ostream **)a1;
    v14 = *(_QWORD *)(a1 + 8);
    v15[2] = v12;
    v15[3] = v14;
    sub_1C5319F38((char **)v13, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)v15);
  }
  else
  {
    v8 = *(llvm::raw_ostream **)a1;
    v9 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v9 > 0xEuLL)
    {
      qmemcpy(v9, "<null operand!>", 15);
      *((_QWORD *)v8 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v8, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *sub_1C5322124(llvm::raw_ostream *result, uint64_t a2)
{
  int v2;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  int v7;
  _WORD *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  uint64_t **v29;
  char v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD v38[4];

  v2 = *(_DWORD *)(a2 + 20);
  if (v2 < 0 && (*(_QWORD *)(a2 - 32 * (v2 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
  {
    v4 = result;
    v5 = *(llvm::raw_ostream **)result;
    v6 = *((_QWORD *)v5 + 4);
    if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 2)
    {
      *(_BYTE *)(v6 + 2) = 32;
      *(_WORD *)v6 = 23328;
      *((_QWORD *)v5 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v5, " [ ", 3uLL);
    }
    v7 = *(_DWORD *)(a2 + 20);
    if (v7 < 0)
    {
      v9 = *(_QWORD *)(a2 - 32 * (v7 & 0x7FFFFFF) - 8);
      if ((v9 & 0xFFFFFFFF0) != 0)
      {
        v10 = 0;
        v37 = (v9 >> 4);
        v11 = 1;
        do
        {
          v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
          v13 = a2 - 8 - 32 * v12 - *(_QWORD *)(a2 - 8 - 32 * v12) + 16 * v10;
          v15 = *(unsigned int *)(a2 - 32 * v12 - *(_QWORD *)(a2 - 8 - 32 * v12) + 16 * v10);
          v14 = *(unsigned int *)(v13 + 12);
          v16 = *(uint64_t **)v13;
          if ((v11 & 1) == 0)
          {
            v17 = *(llvm::raw_ostream **)v4;
            v18 = *(_WORD **)(*(_QWORD *)v4 + 32);
            if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v18 > 1uLL)
            {
              *v18 = 8236;
              *((_QWORD *)v17 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v17, ", ", 2uLL);
            }
          }
          v19 = *(llvm::raw_ostream **)v4;
          v20 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v20 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v19, 34);
          }
          else
          {
            *((_QWORD *)v19 + 4) = v20 + 1;
            *v20 = 34;
          }
          llvm::printEscapedString((llvm::raw_ostream *)(v16 + 2), *v16, *(llvm::raw_ostream **)v4);
          v21 = *(llvm::raw_ostream **)v4;
          v22 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v22 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v21, 34);
          }
          else
          {
            *((_QWORD *)v21 + 4) = v22 + 1;
            *v22 = 34;
          }
          v23 = *(llvm::raw_ostream **)v4;
          v24 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v24 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v23, 40);
          }
          else
          {
            *((_QWORD *)v23 + 4) = v24 + 1;
            *v24 = 40;
          }
          v25 = *((_QWORD *)v4 + 4);
          v26 = *((_QWORD *)v4 + 1);
          v38[0] = off_1E814DD30;
          v38[1] = (char *)v4 + 40;
          v38[2] = v25;
          v38[3] = v26;
          if ((_DWORD)v15 != (_DWORD)v14)
          {
            v29 = (uint64_t **)(a2 - 32 * v12 + 32 * v15);
            v30 = 1;
            v31 = 32 * v14 - 32 * v15;
            do
            {
              if ((v30 & 1) == 0)
              {
                v32 = *(llvm::raw_ostream **)v4;
                v33 = *(_WORD **)(*(_QWORD *)v4 + 32);
                if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v33 > 1uLL)
                {
                  *v33 = 8236;
                  *((_QWORD *)v32 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v32, ", ", 2uLL);
                }
              }
              sub_1C530D7AC((uint64_t)v4 + 40, **v29);
              v34 = *(llvm::raw_ostream **)v4;
              v35 = *(_BYTE **)(*(_QWORD *)v4 + 32);
              if (*(_BYTE **)(*(_QWORD *)v4 + 24) == v35)
              {
                llvm::raw_ostream::write(v34, " ", 1uLL);
              }
              else
              {
                *v35 = 32;
                ++*((_QWORD *)v34 + 4);
              }
              v36 = *v29;
              v29 += 4;
              sub_1C5319F38(*(char ***)v4, (llvm::detail::DoubleAPFloat *)v36, (uint64_t)v38);
              v30 = 0;
              v31 -= 32;
            }
            while (v31);
          }
          v27 = *(llvm::raw_ostream **)v4;
          v28 = *(_BYTE **)(*(_QWORD *)v4 + 32);
          if ((unint64_t)v28 >= *(_QWORD *)(*(_QWORD *)v4 + 24))
          {
            llvm::raw_ostream::write(v27, 41);
          }
          else
          {
            *((_QWORD *)v27 + 4) = v28 + 1;
            *v28 = 41;
          }
          v11 = 0;
          ++v10;
        }
        while (v10 != v37);
      }
    }
    result = *(llvm::raw_ostream **)v4;
    v8 = *(_WORD **)(*(_QWORD *)v4 + 32);
    if (*(_QWORD *)(*(_QWORD *)v4 + 24) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 23840;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, " ]", 2uLL);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C532246C(llvm::raw_ostream *result, uint64_t a2, int a3, unsigned int a4)
{
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  const char *v8;
  size_t v9;

  if (a3)
  {
    v5 = result;
    result = sub_1C5322A48(result, a2, a4);
    v6 = *(llvm::raw_ostream **)v5;
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if (*((_BYTE **)v6 + 3) == v7)
    {
      result = llvm::raw_ostream::write(v6, " ", 1uLL);
    }
    else
    {
      *v7 = 32;
      ++*((_QWORD *)v6 + 4);
    }
    v8 = off_1EF8EB230[a3];
    if (v8)
    {
      v9 = strlen(v8);
      result = (llvm::raw_ostream *)*((_QWORD *)v6 + 4);
      if (v9 <= *((_QWORD *)v6 + 3) - (_QWORD)result)
      {
        if (v9)
        {
          result = (llvm::raw_ostream *)memcpy(result, v8, v9);
          *((_QWORD *)v6 + 4) += v9;
        }
      }
      else
      {
        return llvm::raw_ostream::write(v6, v8, v9);
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C5322540(llvm::raw_ostream *this, uint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  void *v15;
  const char *v16;
  llvm::raw_ostream *v17;
  size_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _WORD *v25;
  llvm::raw_ostream *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;

  v8 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 60;
    *(_WORD *)v8 = 8236;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, ", <", 3uLL);
  }
  if (*(_BYTE *)(a2 + 8) == 19)
  {
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v9) > 8)
    {
      *(_BYTE *)(v9 + 8) = 32;
      *(_QWORD *)v9 = *(_QWORD *)"vscale x ";
      *((_QWORD *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "vscale x ", 9uLL);
    }
  }
  result = sub_1C5E21910(this, a4, 0, 0, 0);
  v11 = (_QWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v11 > 7uLL)
  {
    *v11 = 0x203E323369207820;
    *((_QWORD *)this + 4) += 8;
    if (a4)
    {
LABEL_8:
      v12 = 4 * a4;
      v13 = 4 * a4;
      v14 = a3;
      while (!*v14)
      {
        ++v14;
        v13 -= 4;
        if (!v13)
          goto LABEL_11;
      }
      v19 = 4 * a4;
      v20 = a3;
      while (*v20 == -1)
      {
        ++v20;
        v19 -= 4;
        if (!v19)
        {
          v21 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v21) <= 4)
          {
            v16 = "undef";
            v17 = this;
            v18 = 5;
            return llvm::raw_ostream::write(v17, v16, v18);
          }
          *(_BYTE *)(v21 + 4) = 102;
          *(_DWORD *)v21 = 1701080693;
          v31 = *((_QWORD *)this + 4) + 5;
          goto LABEL_45;
        }
      }
      v22 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v22)
      {
        result = llvm::raw_ostream::write(this, "<", 1uLL);
      }
      else
      {
        *v22 = 60;
        ++*((_QWORD *)this + 4);
      }
      v23 = 1;
      do
      {
        v24 = *a3;
        v25 = (_WORD *)*((_QWORD *)this + 4);
        if ((v23 & 1) == 0)
        {
          if (*((_QWORD *)this + 3) - (_QWORD)v25 > 1uLL)
          {
            *v25 = 8236;
            v25 = (_WORD *)(*((_QWORD *)this + 4) + 2);
            *((_QWORD *)this + 4) = v25;
          }
          else
          {
            result = llvm::raw_ostream::write(this, ", ", 2uLL);
            v25 = (_WORD *)*((_QWORD *)this + 4);
          }
        }
        if (*((_QWORD *)this + 3) - (_QWORD)v25 > 3uLL)
        {
          *(_DWORD *)v25 = 540160873;
          *((_QWORD *)this + 4) += 4;
        }
        else
        {
          result = llvm::raw_ostream::write(this, "i32 ", 4uLL);
        }
        if ((_DWORD)v24 == -1)
        {
          v29 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v29) > 4)
          {
            *(_BYTE *)(v29 + 4) = 102;
            *(_DWORD *)v29 = 1701080693;
            *((_QWORD *)this + 4) += 5;
          }
          else
          {
            result = llvm::raw_ostream::write(this, "undef", 5uLL);
          }
        }
        else
        {
          if ((v24 & 0x80000000) != 0)
          {
            v27 = -(uint64_t)v24;
            v26 = this;
            v28 = 1;
          }
          else
          {
            v26 = this;
            v27 = v24;
            v28 = 0;
          }
          result = sub_1C5E21910(v26, v27, 0, 0, v28);
        }
        v23 = 0;
        ++a3;
        v12 -= 4;
      }
      while (v12);
      v30 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v30)
      {
        v16 = ">";
        v17 = this;
        v18 = 1;
        return llvm::raw_ostream::write(v17, v16, v18);
      }
      *v30 = 62;
      v31 = *((_QWORD *)this + 4) + 1;
      goto LABEL_45;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(this, " x i32> ", 8uLL);
    if (a4)
      goto LABEL_8;
  }
LABEL_11:
  v15 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v15 > 0xEuLL)
  {
    qmemcpy(v15, "zeroinitializer", 15);
    v31 = *((_QWORD *)this + 4) + 15;
LABEL_45:
    *((_QWORD *)this + 4) = v31;
    return result;
  }
  v16 = "zeroinitializer";
  v17 = this;
  v18 = 15;
  return llvm::raw_ostream::write(v17, v16, v18);
}

uint64_t sub_1C5322914(char ***a1, llvm::GCRelocateInst *a2)
{
  llvm::raw_ostream *v4;
  char *v5;
  llvm::detail::DoubleAPFloat *BasePtr;
  char **v7;
  char *v8;
  llvm::detail::DoubleAPFloat *DerivedPtr;
  char **v10;
  char *v11;
  uint64_t result;

  if (sub_1C4E9AE24((uint64_t)a2))
  {
    v4 = (llvm::raw_ostream *)*a1;
    v5 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v5) > 3)
    {
      *(_DWORD *)v5 = 673200928;
      *((_QWORD *)v4 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v4, " ; (", 4uLL);
    }
    BasePtr = (llvm::detail::DoubleAPFloat *)llvm::GCRelocateInst::getBasePtr(a2);
    sub_1C531AA44(a1, BasePtr, 0);
    v7 = *a1;
    v8 = (*a1)[4];
    if ((unint64_t)((*a1)[3] - v8) > 1)
    {
      *(_WORD *)v8 = 8236;
      v7[4] += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v7, ", ", 2uLL);
    }
    DerivedPtr = (llvm::detail::DoubleAPFloat *)llvm::GCRelocateInst::getDerivedPtr(a2);
    sub_1C531AA44(a1, DerivedPtr, 0);
    v10 = *a1;
    v11 = (*a1)[4];
    if ((*a1)[3] == v11)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v10, ")", 1uLL);
    }
    else
    {
      *v11 = 41;
      ++v10[4];
    }
  }
  result = (uint64_t)a1[28];
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::GCRelocateInst *, char **))(*(_QWORD *)result + 48))(result, a2, *a1);
  return result;
}

llvm::raw_ostream *sub_1C5322A48(llvm::raw_ostream *result, uint64_t a2, unsigned int a3)
{
  llvm::raw_ostream **v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;

  if (a3 != 1)
  {
    v4 = (llvm::raw_ostream **)result;
    if (!*((_DWORD *)result + 116))
      llvm::LLVMContextImpl::getSyncScopeNames(a2, (_QWORD *)result + 57);
    v5 = *v4;
    v6 = *((_QWORD *)*v4 + 4);
    if ((unint64_t)(*((_QWORD *)*v4 + 3) - v6) > 0xB)
    {
      *(_DWORD *)(v6 + 8) = 573072752;
      *(_QWORD *)v6 = *(_QWORD *)" syncscope(\"";
      *((_QWORD *)v5 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v5, " syncscope(\"", 0xCuLL);
    }
    v7 = (uint64_t)v4[57] + 16 * a3;
    llvm::printEscapedString(*(llvm::raw_ostream **)v7, *(_QWORD *)(v7 + 8), *v4);
    result = *v4;
    v8 = (_WORD *)*((_QWORD *)*v4 + 4);
    if (*((_QWORD *)*v4 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 10530;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "\")", 2uLL);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C5322B30(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  switch((int)result)
  {
    case 1:
      v2 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v2 > 0xCuLL)
      {
        qmemcpy(v2, "thread_local ", 13);
        v6 = *((_QWORD *)this + 4) + 13;
        goto LABEL_15;
      }
      result = llvm::raw_ostream::write(this, "thread_local ", 0xDuLL);
      break;
    case 2:
      v3 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v3 > 0x1AuLL)
      {
        qmemcpy(v3, "thread_local(localdynamic) ", 27);
        v6 = *((_QWORD *)this + 4) + 27;
        goto LABEL_15;
      }
      result = llvm::raw_ostream::write(this, "thread_local(localdynamic) ", 0x1BuLL);
      break;
    case 3:
      v4 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x19uLL)
      {
        qmemcpy(v4, "thread_local(initialexec) ", 26);
        v6 = *((_QWORD *)this + 4) + 26;
        goto LABEL_15;
      }
      result = llvm::raw_ostream::write(this, "thread_local(initialexec) ", 0x1AuLL);
      break;
    case 4:
      v5 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x17uLL)
      {
        qmemcpy(v5, "thread_local(localexec) ", 24);
        v6 = *((_QWORD *)this + 4) + 24;
LABEL_15:
        *((_QWORD *)this + 4) = v6;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "thread_local(localexec) ", 0x18uLL);
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C5322C8C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5322CA0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v6 = *(void **)(a1 + 8);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v6 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::toString(v5, (uint64_t)a2, a3, a4, a5);
  else
    llvm::detail::IEEEFloat::toString((uint64_t)v5, a2, a3, a4, a5);
}

void sub_1C5322CBC(uint64_t a1, uint64_t **a2)
{
  llvm::SmallPtrSetImplBase *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *__s;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v4 = (llvm::SmallPtrSetImplBase *)(a1 + 184);
  v5 = sub_1C477672C(a1 + 184, (uint64_t)a2);
  v6 = *(_QWORD *)(a1 + 192);
  v7 = 200;
  if (v6 == *(_QWORD *)(a1 + 184))
    v7 = 204;
  if (v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)(a1 + v7)))
  {
    sub_1C4774094(v4, (uint64_t)a2);
    __p[0] = 0;
    __p[1] = 0;
    v26 = 0;
    LODWORD(v17) = 0;
    v21 = 0;
    __s = 0;
    v16 = (uint64_t)&unk_1E81A7208;
    v24 = (uint64_t)__p;
    LODWORD(v23) = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v8 = (*(_DWORD *)(a1 + 32) + 1);
    *(_DWORD *)(a1 + 32) = v8;
    v27 = v8;
    v28 = (uint64_t)"";
    sub_1C6227018(a1 + 40, (uint64_t)&v27);
    v9 = *(_DWORD *)(a1 + 48);
    LODWORD(v28) = 0;
    LOBYTE(v32) = 0;
    v33 = 0;
    LODWORD(v34) = 1;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    v27 = (uint64_t)&off_1E81A1100;
    v35 = 0;
    v36 = 0;
    v37 = (uint64_t)&v39;
    v38 = xmmword_1C6612EF0;
    sub_1C4D685DC((uint64_t)&v27, (uint64_t)&v16);
    sub_1C531B20C((llvm::raw_ostream *)&v27, a2, a1);
    v10 = *(unsigned __int8 *)a2;
    if (v10 - 4 < 2 || v10 <= 0x22 && ((1 << v10) & 0x6FFFFFF80) != 0)
    {
      v11 = (_WORD *)v31;
      if ((unint64_t)(v30 - v31) > 2)
      {
        *(_BYTE *)(v31 + 2) = 32;
        *v11 = 15648;
        v31 += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v27, " = ", 3uLL);
      }
      sub_1C531D608((llvm::raw_ostream *)&v27, (uint64_t)a2);
    }
    sub_1C4D687F0((llvm::raw_ostream *)&v27);
    v12 = v24;
    v13 = *(_QWORD *)(a1 + 40) + 32 * (v9 - 1);
    v14 = v13 + 8;
    if (*(char *)(v13 + 31) < 0)
      operator delete(*(void **)v14);
    v15 = *(_OWORD *)v12;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v12 + 16);
    *(_OWORD *)v14 = v15;
    *(_BYTE *)(v12 + 23) = 0;
    *(_BYTE *)v12 = 0;
    --*(_DWORD *)(a1 + 32);
    v16 = (uint64_t)off_1E81A6E70;
    if ((_DWORD)v23 == 1 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_1C5322F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  char v11;
  int v12;
  const char *v13;
  size_t v14;
  size_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_1E814DD58;
  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = v3 + 32 * v2;
    do
    {
      v5 = *(llvm::raw_ostream **)(a1 + 248);
      v6 = (_BYTE *)*((_QWORD *)v5 + 4);
      if (*((_BYTE **)v5 + 3) == v6)
      {
        llvm::raw_ostream::write(v5, "\n", 1uLL);
      }
      else
      {
        *v6 = 10;
        ++*((_QWORD *)v5 + 4);
      }
      v7 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)(a1 + 248), 2 * *(_DWORD *)v3);
      v10 = *(const char **)(v3 + 8);
      v9 = v3 + 8;
      v8 = v10;
      v11 = *(_BYTE *)(v9 + 23);
      v12 = v11;
      if (v11 >= 0)
        v13 = (const char *)v9;
      else
        v13 = v8;
      v14 = v11 & 0x7F;
      if (v12 >= 0)
        v15 = v14;
      else
        v15 = *(_QWORD *)(v9 + 8);
      llvm::raw_ostream::write(v7, v13, v15);
      v3 = v9 + 24;
    }
    while (v3 != v4);
  }
  v16 = *(void **)(a1 + 192);
  if (v16 != *(void **)(a1 + 184))
    free(v16);
  v17 = *(char **)(a1 + 40);
  v18 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v18)
  {
    v19 = 32 * v18;
    do
    {
      if (v17[v19 - 1] < 0)
        operator delete(*(void **)&v17[v19 - 24]);
      v19 -= 32;
    }
    while (v19);
    v17 = *(char **)(a1 + 40);
  }
  if (v17 != (char *)(a1 + 56))
    free(v17);
  return a1;
}

void sub_1C5323040(uint64_t a1)
{
  sub_1C5322F20(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5323064(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = *a1 + 32 * v2;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v3;
      v5 = *(_OWORD *)(v3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
      *(_OWORD *)(a2 + 8) = v5;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      v3 += 32;
      a2 += 32;
    }
    while (v3 != v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 32 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 1) < 0)
          operator delete(*(void **)(v7 + v8 - 24));
        v8 -= 32;
      }
      while (v8);
    }
  }
}

void sub_1C53230E8(llvm::raw_ostream *this, llvm::ConstantRange *a2)
{
  _BYTE *v4;
  _WORD *v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  __int128 v12;
  _QWORD v13[6];

  v13[5] = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *v4 = 91;
    ++*((_QWORD *)this + 4);
  }
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v9);
  v11 = v13;
  v12 = xmmword_1C64638D0;
  llvm::APInt::toString((uint64_t)&v9, &v11, 0xAu, 1, 0);
  llvm::raw_ostream::write(this, (const char *)v11, v12);
  if (v11 != v13)
    free(v11);
  v5 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 8236;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, ", ", 2uLL);
  }
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v7);
  v11 = v13;
  v12 = xmmword_1C64638D0;
  llvm::APInt::toString((uint64_t)&v7, &v11, 0xAu, 1, 0);
  llvm::raw_ostream::write(this, (const char *)v11, v12);
  if (v11 != v13)
    free(v11);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v6)
  {
    llvm::raw_ostream::write(this, "]", 1uLL);
  }
  else
  {
    *v6 = 93;
    ++*((_QWORD *)this + 4);
  }
  if (v8 >= 0x41 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  if (v10 >= 0x41)
  {
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  }
}

llvm::raw_ostream *sub_1C53232F8(uint64_t *a1, unint64_t **a2, char *__s)
{
  llvm::raw_ostream *v5;
  size_t v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  char v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  unint64_t v15;
  unint64_t v16;
  llvm::raw_ostream *result;
  _BYTE *v18;

  v5 = (llvm::raw_ostream *)*a1;
  if (__s)
  {
    v7 = strlen(__s);
    v8 = (void *)*((_QWORD *)v5 + 4);
    if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, __s, v7);
        *((_QWORD *)v5 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, __s, v7);
    }
  }
  v9 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 40;
    *(_WORD *)v9 = 8250;
    *((_QWORD *)v5 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v5, ": (", 3uLL);
  }
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    v12 = 0;
    do
    {
      if ((v12 & 1) != 0)
      {
        v13 = (llvm::raw_ostream *)*a1;
        v14 = *(_WORD **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v14 > 1uLL)
        {
          *v14 = 8236;
          *((_QWORD *)v13 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v13, ", ", 2uLL);
        }
      }
      v15 = *v10;
      v16 = v10[1];
      v10 += 2;
      sub_1C53236E0(a1, v15, v16);
      v12 = 1;
    }
    while (v10 != v11);
  }
  result = (llvm::raw_ostream *)*a1;
  v18 = *(_BYTE **)(*a1 + 32);
  if (*(_BYTE **)(*a1 + 24) == v18)
    return llvm::raw_ostream::write(result, ")", 1uLL);
  *v18 = 41;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm::raw_ostream *sub_1C5323478(uint64_t *a1, _QWORD *a2, char *__s)
{
  llvm::raw_ostream *v5;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  _BYTE *v23;

  v5 = (llvm::raw_ostream *)*a1;
  if (__s)
  {
    v7 = strlen(__s);
    v8 = (void *)*((_QWORD *)v5 + 4);
    if (v7 <= *((_QWORD *)v5 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, __s, v7);
        *((_QWORD *)v5 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, __s, v7);
    }
  }
  v9 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 40;
    *(_WORD *)v9 = 8250;
    *((_QWORD *)v5 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v5, ": (", 3uLL);
  }
  v10 = a2[1];
  if (*a2 != v10)
  {
    v11 = 0;
    v12 = *a2 + 16;
    do
    {
      if ((v11 & 1) != 0)
      {
        v13 = (llvm::raw_ostream *)*a1;
        v14 = *(_WORD **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v14 > 1uLL)
        {
          *v14 = 8236;
          *((_QWORD *)v13 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v13, ", ", 2uLL);
        }
      }
      v15 = (llvm::raw_ostream *)*a1;
      v16 = *(_BYTE **)(*a1 + 32);
      if (*(_BYTE **)(*a1 + 24) == v16)
      {
        llvm::raw_ostream::write(v15, "(", 1uLL);
      }
      else
      {
        *v16 = 40;
        ++*((_QWORD *)v15 + 4);
      }
      sub_1C53236E0(a1, *(_QWORD *)(v12 - 16), *(_QWORD *)(v12 - 8));
      if (*(_QWORD *)v12 != *(_QWORD *)(v12 + 8))
      {
        v17 = (llvm::raw_ostream *)*a1;
        v18 = *(_WORD **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v18 > 1uLL)
        {
          *v18 = 8236;
          *((_QWORD *)v17 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v17, ", ", 2uLL);
        }
        sub_1C5323A88((llvm::raw_ostream **)a1, (unint64_t **)v12);
      }
      v19 = (llvm::raw_ostream *)*a1;
      v20 = *(_BYTE **)(*a1 + 32);
      if (*(_BYTE **)(*a1 + 24) == v20)
      {
        llvm::raw_ostream::write(v19, ")", 1uLL);
      }
      else
      {
        *v20 = 41;
        ++*((_QWORD *)v19 + 4);
      }
      v21 = v12 + 24;
      v12 += 40;
      v11 = 1;
    }
    while (v21 != v10);
  }
  result = (llvm::raw_ostream *)*a1;
  v23 = *(_BYTE **)(*a1 + 32);
  if (*(_BYTE **)(*a1 + 24) == v23)
    return llvm::raw_ostream::write(result, ")", 1uLL);
  *v23 = 41;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm::raw_ostream *sub_1C53236E0(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  size_t v15;
  int TypeIdSlot;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *result;
  _BYTE *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  llvm::raw_ostream *v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;

  v35 = a2;
  v36 = a3;
  v4 = sub_1C4FCD918(a1[2] + 56, &v35);
  if (v4 == v5)
  {
    v28 = (llvm::raw_ostream *)*a1;
    v29 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v29) > 9)
    {
      *(_WORD *)(v29 + 8) = 10272;
      *(_QWORD *)v29 = *(_QWORD *)"vFuncId: (";
      *((_QWORD *)v28 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v28, "vFuncId: (", 0xAuLL);
    }
    v30 = (llvm::raw_ostream *)*a1;
    v31 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v31) > 5)
    {
      *(_WORD *)(v31 + 4) = 8250;
      *(_DWORD *)v31 = 1684632935;
      *((_QWORD *)v30 + 4) += 6;
    }
    else
    {
      v30 = llvm::raw_ostream::write(v30, "guid: ", 6uLL);
    }
    sub_1C5E21910(v30, v35, 0, 0, 0);
    v32 = (llvm::raw_ostream *)*a1;
    v33 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v33) > 9)
    {
      *(_WORD *)(v33 + 8) = 8250;
      *(_QWORD *)v33 = *(_QWORD *)", offset: ";
      *((_QWORD *)v32 + 4) += 10;
    }
    else
    {
      v32 = llvm::raw_ostream::write(v32, ", offset: ", 0xAuLL);
    }
    sub_1C5E21910(v32, v36, 0, 0, 0);
    result = (llvm::raw_ostream *)*a1;
    v34 = *(_BYTE **)(*a1 + 32);
    if (*(_BYTE **)(*a1 + 24) == v34)
    {
      return llvm::raw_ostream::write(result, ")", 1uLL);
    }
    else
    {
      *v34 = 41;
      ++*((_QWORD *)result + 4);
    }
  }
  else
  {
    v6 = v4;
    v7 = v5;
    v8 = 0;
    do
    {
      if ((v8 & 1) != 0)
      {
        v9 = (llvm::raw_ostream *)*a1;
        v10 = *(_WORD **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v10 > 1uLL)
        {
          *v10 = 8236;
          *((_QWORD *)v9 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v9, ", ", 2uLL);
        }
      }
      v11 = (llvm::raw_ostream *)*a1;
      v12 = *(_QWORD *)(*a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v12) > 9)
      {
        *(_WORD *)(v12 + 8) = 10272;
        *(_QWORD *)v12 = *(_QWORD *)"vFuncId: (";
        *((_QWORD *)v11 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v11, "vFuncId: (", 0xAuLL);
      }
      v13 = *((_BYTE *)v6 + 63);
      if (v13 >= 0)
        v14 = (unsigned __int8 *)(v6 + 5);
      else
        v14 = (unsigned __int8 *)v6[5];
      if (v13 >= 0)
        v15 = v13 & 0x7F;
      else
        v15 = v6[6];
      TypeIdSlot = llvm::SlotTracker::getTypeIdSlot(a1[4], v14, v15);
      v17 = (llvm::raw_ostream *)*a1;
      v18 = *(_BYTE **)(*a1 + 32);
      if (*(_BYTE **)(*a1 + 24) == v18)
      {
        v17 = llvm::raw_ostream::write(v17, "^", 1uLL);
      }
      else
      {
        *v18 = 94;
        ++*((_QWORD *)v17 + 4);
      }
      v19 = TypeIdSlot;
      if (TypeIdSlot < 0)
      {
        v19 = -(uint64_t)TypeIdSlot;
        v20 = 1;
      }
      else
      {
        v20 = 0;
      }
      sub_1C5E21910(v17, v19, 0, 0, v20);
      v21 = (llvm::raw_ostream *)*a1;
      v22 = *(_QWORD *)(*a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v22) > 9)
      {
        *(_WORD *)(v22 + 8) = 8250;
        *(_QWORD *)v22 = *(_QWORD *)", offset: ";
        *((_QWORD *)v21 + 4) += 10;
      }
      else
      {
        v21 = llvm::raw_ostream::write(v21, ", offset: ", 0xAuLL);
      }
      sub_1C5E21910(v21, v36, 0, 0, 0);
      result = (llvm::raw_ostream *)*a1;
      v24 = *(_BYTE **)(*a1 + 32);
      if (*(_BYTE **)(*a1 + 24) == v24)
      {
        result = llvm::raw_ostream::write(result, ")", 1uLL);
      }
      else
      {
        *v24 = 41;
        ++*((_QWORD *)result + 4);
      }
      v25 = (_QWORD *)v6[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v6[2];
          v27 = *v26 == (_QWORD)v6;
          v6 = v26;
        }
        while (!v27);
      }
      v8 = 1;
      v6 = v26;
    }
    while (v26 != v7);
  }
  return result;
}

llvm::raw_ostream *sub_1C5323A88(llvm::raw_ostream **a1, unint64_t **a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  unint64_t *v6;
  unint64_t *v7;
  char v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;

  v4 = *a1;
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 673200755;
    *v5 = 1936159329;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v4, "args: (", 7uLL);
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *v6;
      if ((v8 & 1) != 0)
      {
        v10 = *a1;
        v11 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v11 > 1uLL)
        {
          *v11 = 8236;
          *((_QWORD *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, ", ", 2uLL);
        }
      }
      sub_1C5E21910(*a1, v9, 0, 0, 0);
      ++v6;
      v8 = 1;
    }
    while (v6 != v7);
  }
  result = *a1;
  v13 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v13)
    return llvm::raw_ostream::write(result, ")", 1uLL);
  *v13 = 41;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t sub_1C5323BCC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5323C60(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6227144(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C5323D18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v6;
  __int128 v7;
  void *v8[2];
  _QWORD v9[17];

  v9[16] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (!*a1)
    return 0;
  v8[1] = (void *)0x800000000;
  v6 = *(unsigned int *)(v2 + 16);
  *(_QWORD *)&v7 = v2 + *(unsigned int *)(v2 + 12) + 25;
  *((_QWORD *)&v7 + 1) = v6;
  v8[0] = v9;
  llvm::StringRef::split(&v7, (uint64_t)v8, ",", 1uLL, -1, 1);
  v3 = sub_1C6227268((uint64_t *)v8, a2);
  if (v8[0] != v9)
    free(v8[0]);
  return v3;
}

BOOL llvm::hasAssumption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int j;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a1 - 32);
  if (v4 && !*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *(_QWORD *)(a1 + 72))
  {
    v5 = *(_QWORD *)(v4 + 112);
    if (v5)
    {
      if (!*(_DWORD *)(v5 + 8))
        goto LABEL_24;
      v5 = *(_QWORD *)(v5 + 40);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 40);
        if (v6)
        {
          v7 = *(_QWORD *)(v5 + 24);
          v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          v9 = &unk_1ED7EA000;
          if ((v8 & 1) == 0)
          {
            v40 = v7;
            v38 = v6;
            v35 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v9 = &unk_1ED7EA000;
            v6 = v38;
            v7 = v40;
            if (v35)
            {
              v36 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v36 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v36;
              __cxa_guard_release(&qword_1ED7EAC88);
              v9 = (_QWORD *)&unk_1ED7EA000;
              v6 = v38;
              v7 = v40;
            }
          }
          v10 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v9[400] ^ 0xBC7FCC80C3180049)) ^ ((0x9DDFEA08EB382D69
                                                                             * (v9[400] ^ 0xBC7FCC80C3180049)) >> 47) ^ 0xCF0CADAEAE6E6C25);
          v11 = (-348639895 * ((v10 >> 47) ^ v10)) ^ 0x73612E6D;
          v12 = v6 - 1;
          for (i = 1; ; ++i)
          {
            v14 = v11 & v12;
            v15 = v7 + 24 * v14;
            v16 = *(_QWORD **)v15;
            if (*(_QWORD *)v15 == -1)
            {
              if ("llvm.assume" == (char *)-1)
                goto LABEL_23;
            }
            else if (v16 == (_QWORD *)-2)
            {
              if ("llvm.assume" == (char *)-2)
                goto LABEL_23;
            }
            else if (*(_QWORD *)(v15 + 8) == 11
                   && *v16 == 0x7373612E6D766C6CLL
                   && *(_QWORD *)((char *)v16 + 3) == 0x656D757373612E6DLL)
            {
LABEL_23:
              v5 = *(_QWORD *)(v15 + 16);
              goto LABEL_25;
            }
            if (v16 == (_QWORD *)-1)
              break;
            v11 = i + v14;
          }
        }
LABEL_24:
        v5 = 0;
      }
    }
LABEL_25:
    v41 = v5;
    if (sub_1C5323D18(&v41, a2))
      return 1;
  }
  v19 = *(_QWORD *)(a1 + 64);
  if (!v19 || !*(_DWORD *)(v19 + 8) || (v20 = *(_QWORD *)(v19 + 40)) == 0 || (v21 = *(_DWORD *)(v20 + 40)) == 0)
  {
LABEL_47:
    v32 = llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(a1, "llvm.assume", 0xBuLL);
    goto LABEL_48;
  }
  v22 = *(_QWORD *)(v20 + 24);
  v23 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v23 & 1) == 0)
  {
    v39 = v22;
    v37 = v21;
    v33 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v21 = v37;
    v22 = v39;
    if (v33)
    {
      v34 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v34 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v34;
      __cxa_guard_release(&qword_1ED7EAC88);
      v21 = v37;
      v22 = v39;
    }
  }
  v24 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC7FCC80C3180049)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xBC7FCC80C3180049)) >> 47) ^ 0xCF0CADAEAE6E6C25);
  v25 = (-348639895 * ((v24 >> 47) ^ v24)) ^ 0x73612E6D;
  v26 = v21 - 1;
  for (j = 1; ; ++j)
  {
    v28 = v25 & v26;
    v29 = v22 + 24 * v28;
    v30 = *(_QWORD **)v29;
    if (*(_QWORD *)v29 == -1)
    {
      if ("llvm.assume" == (char *)-1)
        goto LABEL_46;
      goto LABEL_35;
    }
    if (v30 != (_QWORD *)-2)
      break;
    if ("llvm.assume" == (char *)-2)
      goto LABEL_46;
LABEL_35:
    if (v30 == (_QWORD *)-1)
      goto LABEL_47;
    v25 = j + v28;
  }
  if (*(_QWORD *)(v29 + 8) != 11)
    goto LABEL_35;
  if (*v30 != 0x7373612E6D766C6CLL || *(_QWORD *)((char *)v30 + 3) != 0x656D757373612E6DLL)
    goto LABEL_35;
LABEL_46:
  v32 = *(_QWORD *)(v29 + 16);
  if (!v32)
    goto LABEL_47;
LABEL_48:
  v41 = v32;
  return sub_1C5323D18(&v41, a2);
}

{
  uint64_t FnAttribute;

  FnAttribute = llvm::Function::getFnAttribute(a1, "llvm.assume", 0xBuLL);
  return sub_1C5323D18(&FnAttribute, a2);
}

void sub_1C53241BC(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  const void *v13;
  BOOL v14;
  uint64_t v15;
  _OWORD *v16;
  int v17;
  char *v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[18];

  v22[16] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v3 = a2 + *(unsigned int *)(a2 + 12);
    *((_QWORD *)&v19 + 1) = *(unsigned int *)(a2 + 16);
    v20 = v22;
    v21 = 0x800000000;
    *(_QWORD *)&v19 = v3 + 25;
    llvm::StringRef::split(&v19, (uint64_t)&v20, ",", 1uLL, -1, 1);
    v4 = (char *)v20;
    if ((_DWORD)v21)
    {
      v18 = (char *)v20 + 16 * v21;
      do
      {
        v19 = *(_OWORD *)v4;
        v5 = *(_DWORD *)(a1 + 16);
        if (v5)
        {
          v6 = *(_QWORD *)a1;
          v7 = sub_1C5E3DF4C((_QWORD *)v19, v19 + *((_QWORD *)&v19 + 1));
          v8 = 0;
          v9 = v5 - 1;
          v17 = 1;
          v10 = v19;
          while (1)
          {
            v11 = v7 & v9;
            v12 = v6 + 16 * (v7 & v9);
            v13 = *(const void **)v12;
            if (*(_QWORD *)v12 == -1)
            {
              if ((_QWORD)v10 == -1)
                goto LABEL_26;
            }
            else if (v13 == (const void *)-2)
            {
              if ((_QWORD)v10 == -2)
                goto LABEL_26;
            }
            else if (*((_QWORD *)&v10 + 1) == *(_QWORD *)(v12 + 8)
                   && (!*((_QWORD *)&v10 + 1) || !memcmp((const void *)v10, *(const void **)v12, *((size_t *)&v10 + 1))))
            {
              goto LABEL_26;
            }
            if (v13 == (const void *)-1)
              break;
            if (v8)
              v14 = 0;
            else
              v14 = v13 == (const void *)-2;
            if (v14)
              v8 = v6 + 16 * v11;
            v7 = v17 + v11;
            ++v17;
          }
          if (v8)
            v15 = v8;
          else
            v15 = v6 + 16 * v11;
        }
        else
        {
          v15 = 0;
        }
        v16 = (_OWORD *)sub_1C4FAA5F8(a1, (uint64_t)&v19, (uint64_t)&v19, v15);
        *v16 = v19;
LABEL_26:
        v4 += 16;
      }
      while (v4 != v18);
      v4 = (char *)v20;
    }
    if (v4 != (char *)v22)
      free(v4);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void llvm::getAssumptions(llvm *this@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  llvm *v24;

  v4 = *((_QWORD *)this + 8);
  if (!v4 || !*(_DWORD *)(v4 + 8) || (v5 = *(_QWORD *)(v4 + 40)) == 0 || (v6 = *(_DWORD *)(v5 + 40)) == 0)
  {
LABEL_21:
    v18 = llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>((uint64_t)this, "llvm.assume", 0xBuLL);
    goto LABEL_22;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v9 = &unk_1ED7EA000;
  if ((v8 & 1) == 0)
  {
    v23 = v7;
    v24 = this;
    v22 = v6;
    v19 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = &unk_1ED7EA000;
    v6 = v22;
    v20 = v19;
    v7 = v23;
    this = v24;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v21;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = (_QWORD *)&unk_1ED7EA000;
      v6 = v22;
      v7 = v23;
      this = v24;
    }
  }
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9[400] ^ 0xBC7FCC80C3180049)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v9[400] ^ 0xBC7FCC80C3180049)) >> 47) ^ 0xCF0CADAEAE6E6C25);
  v11 = (-348639895 * ((v10 >> 47) ^ v10)) ^ 0x73612E6D;
  v12 = v6 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = v7 + 24 * v14;
    v16 = *(_QWORD **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if ("llvm.assume" == (char *)-1)
        goto LABEL_20;
      goto LABEL_9;
    }
    if (v16 != (_QWORD *)-2)
      break;
    if ("llvm.assume" == (char *)-2)
      goto LABEL_20;
LABEL_9:
    if (v16 == (_QWORD *)-1)
      goto LABEL_21;
    v11 = i + v14;
  }
  if (*(_QWORD *)(v15 + 8) != 11)
    goto LABEL_9;
  if (*v16 != 0x7373612E6D766C6CLL || *(_QWORD *)((char *)v16 + 3) != 0x656D757373612E6DLL)
    goto LABEL_9;
LABEL_20:
  v18 = *(_QWORD *)(v15 + 16);
  if (!v18)
    goto LABEL_21;
LABEL_22:
  sub_1C53241BC(a2, v18);
}

{
  uint64_t FnAttribute;

  FnAttribute = llvm::Function::getFnAttribute((uint64_t)this, "llvm.assume", 0xBuLL);
  sub_1C53241BC(a2, FnAttribute);
}

uint64_t llvm::addAssumptions(llvm::LLVMContext ***a1, uint64_t a2)
{
  llvm::LLVMContext **v4;
  llvm::AttributeList *v5;
  llvm::LLVMContext *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  std::string::size_type v24;
  unint64_t *v25;
  std::string::size_type v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string::size_type *j;
  unint64_t *v33;
  const std::string::value_type *v34;
  unint64_t *v35;
  char v36;
  std::string::size_type size;
  std::string::size_type v38;
  BOOL v39;
  std::string *p_p;
  size_t v41;
  size_t v42;
  unsigned int *v43;
  unint64_t v45;
  std::string __p;
  unint64_t *v47;
  int v48;
  unsigned int v49;

  if (!*(_DWORD *)(a2 + 8))
    return 0;
  v5 = (llvm::AttributeList *)(a1 + 14);
  v4 = a1[14];
  if (v4)
  {
    if (*((_DWORD *)v4 + 2))
    {
      v6 = v4[5];
      if (v6)
      {
        v7 = *((_DWORD *)v6 + 10);
        if (v7)
        {
          v8 = *((_QWORD *)v6 + 3);
          v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v45 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v45 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v45;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v10 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xBC7FCC80C3180049)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1ED7EAC80 ^ 0xBC7FCC80C3180049)) >> 47) ^ 0xCF0CADAEAE6E6C25);
          v11 = (-348639895 * ((v10 >> 47) ^ v10)) ^ 0x73612E6D;
          for (i = 1; ; ++i)
          {
            v13 = v11 & (v7 - 1);
            v14 = v8 + 24 * v13;
            v15 = *(_QWORD **)v14;
            if (*(_QWORD *)v14 == -1)
            {
              if ("llvm.assume" == (char *)-1)
                goto LABEL_21;
            }
            else if (v15 == (_QWORD *)-2)
            {
              if ("llvm.assume" == (char *)-2)
                goto LABEL_21;
            }
            else if (*(_QWORD *)(v14 + 8) == 11
                   && *v15 == 0x7373612E6D766C6CLL
                   && *(_QWORD *)((char *)v15 + 3) == 0x656D757373612E6DLL)
            {
LABEL_21:
              v17 = *(_QWORD *)(v14 + 16);
              goto LABEL_23;
            }
            if (v15 == (_QWORD *)-1)
              break;
            v11 = i + v13;
          }
        }
      }
    }
  }
  v17 = 0;
LABEL_23:
  sub_1C53241BC((unint64_t)&v47, v17);
  v18 = sub_1C5324B90((unint64_t)&v47, a2);
  if ((_DWORD)v18)
  {
    v19 = (uint64_t *)**a1;
    v20 = &v47[2 * v49];
    if (v48)
    {
      if (v49)
      {
        v21 = 16 * v49;
        v22 = v47;
        while (*v22 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v22 += 2;
          v21 -= 16;
          if (!v21)
            goto LABEL_29;
        }
      }
      else
      {
        v22 = v47;
      }
    }
    else
    {
LABEL_29:
      v22 = &v47[2 * v49];
    }
    v23 = &v47[2 * v49];
    memset(&__p, 0, sizeof(__p));
    if (v22 == v23)
    {
      size = 0;
      v38 = 0;
      v36 = 0;
    }
    else
    {
      v24 = 0;
      v25 = v22;
      do
      {
        v26 = v24++;
        v27 = v25 + 2;
        while (v27 != v20)
        {
          v28 = *v27;
          v27 += 2;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v25 = v27 - 2;
            goto LABEL_39;
          }
        }
        v25 = &v47[2 * v49];
LABEL_39:
        ;
      }
      while (v25 != v23);
      v29 = v22;
      do
      {
        v26 += v29[1];
        v30 = v29 + 2;
        while (v30 != v20)
        {
          v31 = *v30;
          v30 += 2;
          if (v31 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v29 = v30 - 2;
            goto LABEL_46;
          }
        }
        v29 = &v47[2 * v49];
LABEL_46:
        ;
      }
      while (v29 != v23);
      std::string::reserve(&__p, v26);
      for (j = v22 + 1; ; j = v35 + 1)
      {
        v34 = (const std::string::value_type *)*v22;
        v33 = v22 + 2;
        std::string::append(&__p, v34, *j);
        while (1)
        {
          v35 = v33;
          if (v33 == v20)
            break;
          v33 += 2;
          if (*v35 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v22 = v35;
            goto LABEL_53;
          }
        }
        v22 = v20;
LABEL_53:
        if (v22 == v23)
          break;
        std::string::append(&__p, ",", 1uLL);
      }
      v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      size = __p.__r_.__value_.__l.__size_;
      v38 = __p.__r_.__value_.__r.__words[0];
    }
    v39 = v36 < 0;
    if (v36 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)v38;
    v41 = v36 & 0x7F;
    if (v39)
      v42 = size;
    else
      v42 = v41;
    v43 = llvm::Attribute::get(v19, "llvm.assume", 0xBuLL, (unsigned __int8 *)p_p, v42);
    a1[14] = (llvm::LLVMContext **)llvm::AttributeList::addAttributeAtIndex(v5, **a1, -1, (uint64_t)v43);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1CAA32FB4](v47, 8);
  return v18;
}

uint64_t llvm::addAssumptions(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  std::string::size_type v10;
  unint64_t *v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string::size_type *i;
  unint64_t *v19;
  const std::string::value_type *v20;
  unint64_t *v21;
  char v22;
  std::string::size_type size;
  std::string::size_type v24;
  BOOL v25;
  std::string *p_p;
  size_t v27;
  size_t v28;
  unsigned int *v29;
  std::string __p;
  unint64_t *v32;
  int v33;
  unsigned int v34;

  if (!*(_DWORD *)(a2 + 8))
    return 0;
  llvm::getAssumptions((llvm *)a1, (unint64_t)&v32);
  v4 = sub_1C5324B90((unint64_t)&v32, a2);
  if ((_DWORD)v4)
  {
    v5 = **a1;
    v6 = &v32[2 * v34];
    if (v33)
    {
      if (v34)
      {
        v7 = 16 * v34;
        v8 = v32;
        while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v8 += 2;
          v7 -= 16;
          if (!v7)
            goto LABEL_8;
        }
      }
      else
      {
        v8 = v32;
      }
    }
    else
    {
LABEL_8:
      v8 = &v32[2 * v34];
    }
    v9 = &v32[2 * v34];
    memset(&__p, 0, sizeof(__p));
    if (v8 == v9)
    {
      size = 0;
      v24 = 0;
      v22 = 0;
    }
    else
    {
      v10 = 0;
      v11 = v8;
      do
      {
        v12 = v10++;
        v13 = v11 + 2;
        while (v13 != v6)
        {
          v14 = *v13;
          v13 += 2;
          if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v11 = v13 - 2;
            goto LABEL_18;
          }
        }
        v11 = &v32[2 * v34];
LABEL_18:
        ;
      }
      while (v11 != v9);
      v15 = v8;
      do
      {
        v12 += v15[1];
        v16 = v15 + 2;
        while (v16 != v6)
        {
          v17 = *v16;
          v16 += 2;
          if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v15 = v16 - 2;
            goto LABEL_25;
          }
        }
        v15 = &v32[2 * v34];
LABEL_25:
        ;
      }
      while (v15 != v9);
      std::string::reserve(&__p, v12);
      for (i = v8 + 1; ; i = v21 + 1)
      {
        v20 = (const std::string::value_type *)*v8;
        v19 = v8 + 2;
        std::string::append(&__p, v20, *i);
        while (1)
        {
          v21 = v19;
          if (v19 == v6)
            break;
          v19 += 2;
          if (*v21 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v8 = v21;
            goto LABEL_32;
          }
        }
        v8 = v6;
LABEL_32:
        if (v8 == v9)
          break;
        std::string::append(&__p, ",", 1uLL);
      }
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      size = __p.__r_.__value_.__l.__size_;
      v24 = __p.__r_.__value_.__r.__words[0];
    }
    v25 = v22 < 0;
    if (v22 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)v24;
    v27 = v22 & 0x7F;
    if (v25)
      v28 = size;
    else
      v28 = v27;
    v29 = llvm::Attribute::get(v5, "llvm.assume", 0xBuLL, (unsigned __int8 *)p_p, v28);
    a1[8] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 8), (llvm::LLVMContext *)**a1, -1, (uint64_t)v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x1CAA32FB4](v32, 8);
  return v4;
}

uint64_t sub_1C5324B90(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char v23;
  int v25;
  uint64_t v26;

  v2 = a1;
  v3 = *(unsigned int *)(a2 + 16);
  v4 = *(_QWORD *)a2 + 16 * v3;
  if (*(_DWORD *)(a2 + 8))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(_QWORD *)a2;
      while (*(_QWORD *)v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD *)a2;
    }
  }
  else
  {
LABEL_6:
    v6 = *(_QWORD *)a2 + 16 * v3;
  }
  v26 = *(_QWORD *)a2 + 16 * v3;
  if (v6 == v26)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    do
    {
      v7 = *(_DWORD *)(v2 + 16);
      if (v7)
      {
        v8 = *(_QWORD *)v2;
        v9 = sub_1C5E3DF4C(*(_QWORD **)v6, *(_QWORD *)v6 + *(_QWORD *)(v6 + 8));
        v10 = 0;
        v11 = v7 - 1;
        v12 = *(const void **)v6;
        v13 = *(_QWORD *)(v6 + 8);
        for (i = 1; ; i = v25 + 1)
        {
          v25 = i;
          v15 = v9 & v11;
          v16 = v8 + 16 * (v9 & v11);
          v17 = *(const void **)v16;
          if (*(_QWORD *)v16 == -1)
          {
            if (v12 == (const void *)-1)
              goto LABEL_27;
          }
          else if (v17 == (const void *)-2)
          {
            if (v12 == (const void *)-2)
              goto LABEL_27;
          }
          else if (v13 == *(_QWORD *)(v16 + 8) && (!v13 || !memcmp(v12, *(const void **)v16, v13)))
          {
LABEL_27:
            v2 = a1;
            goto LABEL_33;
          }
          if (v17 == (const void *)-1)
            break;
          if (v10)
            v18 = 0;
          else
            v18 = v17 == (const void *)-2;
          if (v18)
            v10 = v8 + 16 * v15;
          v9 = v25 + v15;
        }
        if (v10)
          v19 = v10;
        else
          v19 = v8 + 16 * v15;
        v2 = a1;
      }
      else
      {
        v19 = 0;
      }
      *(_OWORD *)sub_1C4FAA5F8(v2, v6, v6, v19) = *(_OWORD *)v6;
      v23 = 1;
LABEL_33:
      v20 = (unint64_t *)(v6 + 16);
      while (v20 != (unint64_t *)v4)
      {
        v21 = *v20;
        v20 += 2;
        if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = (uint64_t)(v20 - 2);
          goto LABEL_38;
        }
      }
      v6 = v4;
LABEL_38:
      ;
    }
    while (v6 != v26);
  }
  return v23 & 1;
}

uint64_t sub_1C5324D54()
{
  uint64_t v0;

  v0 = 0;
  llvm::KnownAssumptionStrings = 0;
  *(_QWORD *)algn_1ED8305B8 = 0;
  qword_1ED8305C0 = 0x800000000;
  do
  {
    sub_1C4F024D8((llvm::StringMapImpl *)&llvm::KnownAssumptionStrings, (unsigned __int8 *)(&off_1E814DE78)[v0], (size_t)(&off_1E814DE78)[v0 + 1]);
    v0 += 2;
  }
  while (v0 != 10);
  return __cxa_atexit((void (*)(void *))sub_1C5324B8C, &llvm::KnownAssumptionStrings, &dword_1C475E000);
}

unint64_t llvm::Attribute::get(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  BOOL v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v16;
  _QWORD *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  void *__s1;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v19 = a2;
  if (!a3)
  {
    v5 = v4 + 224;
    v6 = *(_QWORD *)(v4 + 224) + 8 * ((*(_DWORD *)(v4 + 232) - 1) & sub_1C4F5AB38(&v19, (uint64_t)&v20));
    v7 = *(_QWORD *)v6;
    __s1 = v24;
    v23 = 0x2000000000;
    if (v7)
      v8 = (v7 & 1) == 0;
    else
      v8 = 0;
    if (v8)
    {
      while (1)
      {
        sub_1C53284C4((unsigned int *)v7, (unsigned int *)&__s1);
        if ((_DWORD)v23 == 1)
        {
          v9 = __s1;
          if (!memcmp(__s1, &v19, 4uLL))
            break;
        }
        LODWORD(v23) = 0;
        v7 = *(_QWORD *)v7;
        if (v7)
          v10 = (v7 & 1) == 0;
        else
          v10 = 0;
        if (!v10)
        {
          v7 = 0;
          v9 = __s1;
          goto LABEL_15;
        }
      }
      v6 = 0;
LABEL_15:
      if (v9 != v24)
        free(v9);
      if (v7)
        return v7;
    }
    v7 = sub_1C484358C(v4 + 2040, 16, 3);
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 12) = a2;
LABEL_20:
    v12 = *(_DWORD *)(v4 + 232);
    v13 = *(_DWORD *)(v4 + 236) + 1;
    if (v13 > 2 * v12)
    {
      llvm::FoldingSetBase::GrowBucketCount(v5, 2 * v12, (uint64_t)off_1E814DEE0);
      __s1 = v24;
      v23 = 0x2000000000;
      v6 = *(_QWORD *)(v4 + 224)
         + 8
         * ((*(_DWORD *)(v4 + 232) - 1) & sub_1C6227D14(v5, (unsigned int *)v7, (unsigned int *)&__s1));
      if (__s1 != v24)
        free(__s1);
      v13 = *(_DWORD *)(v4 + 236) + 1;
    }
    *(_DWORD *)(v4 + 236) = v13;
    v14 = *(_QWORD *)v6;
    if (!*(_QWORD *)v6)
      v14 = v6 | 1;
    *(_QWORD *)v7 = v14;
    *(_QWORD *)v6 = v7;
    return v7;
  }
  v20 = a3;
  v5 = v4 + 224;
  v6 = *(_QWORD *)(v4 + 224) + 8 * ((*(_DWORD *)(v4 + 232) - 1) & sub_1C4F5AB38(&v19, (uint64_t)&v21));
  v7 = *(_QWORD *)v6;
  __s1 = v24;
  v23 = 0x2000000000;
  if (v7)
    v16 = (v7 & 1) == 0;
  else
    v16 = 0;
  if (!v16)
    goto LABEL_40;
  while (1)
  {
    sub_1C53284C4((unsigned int *)v7, (unsigned int *)&__s1);
    if ((_DWORD)v23 == 3)
    {
      v17 = __s1;
      if (!memcmp(__s1, &v19, 0xCuLL))
        break;
    }
    LODWORD(v23) = 0;
    v7 = *(_QWORD *)v7;
    if (v7)
      v18 = (v7 & 1) == 0;
    else
      v18 = 0;
    if (!v18)
    {
      v7 = 0;
      v17 = __s1;
      goto LABEL_37;
    }
  }
  v6 = 0;
LABEL_37:
  if (v17 != v24)
    free(v17);
  if (!v7)
  {
LABEL_40:
    v7 = sub_1C484358C(v4 + 2040, 24, 3);
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 1;
    *(_DWORD *)(v7 + 12) = a2;
    *(_QWORD *)(v7 + 16) = a3;
    goto LABEL_20;
  }
  return v7;
}

{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  BOOL v10;
  int v12;
  uint64_t v13;
  int v14;
  void *__s1;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v12 = a2;
  v13 = a3;
  v6 = (unint64_t *)(*(_QWORD *)(v5 + 224)
                          + 8 * ((*(_DWORD *)(v5 + 232) - 1) & sub_1C4F5AB38(&v12, (uint64_t)&v14)));
  v7 = *v6;
  __s1 = v17;
  v16 = 0x2000000000;
  if (v7)
    v8 = (v7 & 1) == 0;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_18;
  while (1)
  {
    sub_1C53284C4((unsigned int *)v7, (unsigned int *)&__s1);
    if ((_DWORD)v16 == 3)
    {
      v9 = __s1;
      if (!memcmp(__s1, &v12, 0xCuLL))
        break;
    }
    LODWORD(v16) = 0;
    v7 = *(_QWORD *)v7;
    if (v7)
      v10 = (v7 & 1) == 0;
    else
      v10 = 0;
    if (!v10)
    {
      v7 = 0;
      v9 = __s1;
      goto LABEL_14;
    }
  }
  v6 = 0;
LABEL_14:
  if (v9 != v17)
    free(v9);
  if (!v7)
  {
LABEL_18:
    v7 = sub_1C484358C(v5 + 2040, 24, 3);
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 3;
    *(_DWORD *)(v7 + 12) = a2;
    *(_QWORD *)(v7 + 16) = a3;
    llvm::FoldingSetBase::InsertNode(v5 + 224, (uint64_t *)v7, (uint64_t)v6, (uint64_t)off_1E814DEE0);
  }
  return v7;
}

unsigned int *llvm::Attribute::get(uint64_t *a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  size_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  BOOL v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  void *__s2;
  uint64_t v23;
  _BYTE v24[128];
  void *__s1;
  uint64_t v26;
  _QWORD v27[18];

  v7 = a3;
  v27[16] = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  __s2 = v24;
  v23 = 0x2000000000;
  llvm::FoldingSetNodeID::AddString((unsigned int *)&__s2, a2, a3);
  if (a5)
    llvm::FoldingSetNodeID::AddString((unsigned int *)&__s2, a4, a5);
  v10 = *(_QWORD *)(v9 + 224)
      + 8 * ((*(_DWORD *)(v9 + 232) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v23));
  v11 = *(unsigned int **)v10;
  __s1 = v27;
  v26 = 0x2000000000;
  if (v11)
    v12 = (v11 & 1) == 0;
  else
    v12 = 0;
  if (!v12)
    goto LABEL_19;
  while (1)
  {
    sub_1C53284C4(v11, (unsigned int *)&__s1);
    if ((_DWORD)v23 == (_DWORD)v26)
    {
      v13 = __s1;
      if (!memcmp(__s1, __s2, 4 * v23))
        break;
    }
    LODWORD(v26) = 0;
    v11 = *(unsigned int **)v11;
    if (v11)
      v14 = (v11 & 1) == 0;
    else
      v14 = 0;
    if (!v14)
    {
      v11 = 0;
      v13 = __s1;
      goto LABEL_16;
    }
  }
  v10 = 0;
LABEL_16:
  if (v13 != v27)
    free(v13);
  if (!v11)
  {
LABEL_19:
    v15 = sub_1C484358C(v9 + 2040, v7 + a5 + 26, 3);
    v11 = (unsigned int *)v15;
    *(_QWORD *)v15 = 0;
    *(_BYTE *)(v15 + 8) = 2;
    *(_DWORD *)(v15 + 12) = v7;
    *(_DWORD *)(v15 + 16) = a5;
    v16 = v15 + 24;
    if (v7)
      memmove((void *)(v15 + 24), a2, v7);
    *(_BYTE *)(v16 + v7) = 0;
    if (a5)
    {
      memmove((void *)(v16 + (v7 + 1)), a4, a5);
      LODWORD(v7) = v11[3];
      v17 = v11[4] + 1;
    }
    else
    {
      v17 = 1;
    }
    *(_BYTE *)(v16 + (v17 + v7)) = 0;
    v18 = *(_DWORD *)(v9 + 232);
    v19 = *(_DWORD *)(v9 + 236) + 1;
    if (v19 > 2 * v18)
    {
      llvm::FoldingSetBase::GrowBucketCount(v9 + 224, 2 * v18, (uint64_t)off_1E814DEE0);
      __s1 = v27;
      v26 = 0x2000000000;
      v10 = *(_QWORD *)(v9 + 224)
          + 8 * ((*(_DWORD *)(v9 + 232) - 1) & sub_1C6227D14(v9 + 224, v11, (unsigned int *)&__s1));
      if (__s1 != v27)
        free(__s1);
      v19 = *(_DWORD *)(v9 + 236) + 1;
    }
    *(_DWORD *)(v9 + 236) = v19;
    v20 = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
      v20 = v10 | 1;
    *(_QWORD *)v11 = v20;
    *(_QWORD *)v10 = v11;
  }
  if (__s2 != v24)
    free(__s2);
  return v11;
}

unint64_t llvm::Attribute::getWithAlignment(uint64_t *a1, char a2)
{
  return llvm::Attribute::get(a1, 74, 1 << a2);
}

unint64_t llvm::Attribute::getWithStackAlignment(uint64_t *a1, char a2)
{
  return llvm::Attribute::get(a1, 78, 1 << a2);
}

unint64_t llvm::Attribute::getWithDereferenceableBytes(llvm::Attribute *this, llvm::LLVMContext *a2)
{
  return llvm::Attribute::get((uint64_t *)this, 76, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithByRefType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 68, (uint64_t)a2);
}

unint64_t llvm::Attribute::getWithPreallocatedType(llvm::Attribute *this, llvm::LLVMContext *a2, llvm::Type *a3)
{
  return llvm::Attribute::get((uint64_t *)this, 72, (uint64_t)a2);
}

uint64_t llvm::Attribute::getAttrKindFromName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v9;
  int v32;
  int v34;
  char v36;
  char v37;
  int v40;
  char v42;
  char v43;
  char v51;
  int v59;
  char v61;
  char v64;
  char v71;
  char v73;
  char v74;
  _BOOL4 v77;
  char v79;
  char v83;
  char v84;
  uint64_t v86;
  BOOL v87;
  char v96;
  char v97;
  char v100;
  char v101;
  char v103;

  v2 = 0;
  v3 = 0x100000024;
  v4 = 1;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 28520 || *(_BYTE *)(a1 + 2) != 116)
      {
        v2 = 0;
        goto LABEL_7;
      }
      v3 = 0x100000008;
      goto LABEL_534;
    case 4:
      if (*(_DWORD *)a1 == 1684828003)
      {
        v3 = 0x100000005;
      }
      else
      {
        if (*(_DWORD *)a1 != 1953719662)
          goto LABEL_29;
        v3 = 0x100000012;
      }
      goto LABEL_534;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *(_BYTE *)(a1 + 4) == 103)
      {
        v3 = 0x10000000ALL;
      }
      else
      {
        if (*(_DWORD *)a1 != 1701536110 || *(_BYTE *)(a1 + 4) != 100)
        {
LABEL_29:
          v2 = 0;
          v9 = 0;
          v4 = 1;
          goto LABEL_147;
        }
        v3 = 0x100000011;
      }
      goto LABEL_534;
    case 6:
      if (*(_DWORD *)a1 != 1634561385 || *(_WORD *)(a1 + 4) != 26482)
        goto LABEL_63;
      v3 = 0x100000009;
      goto LABEL_534;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)(a1 + 3) == 1852404844)
      {
        v3 = 0x100000004;
      }
      else if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        v3 = 0x10000000FLL;
      }
      else
      {
        if (*(_DWORD *)a1 != 1818324846 || *(_DWORD *)(a1 + 3) != 1935763820)
        {
          v2 = 0;
          v4 = 1;
          v9 = 1;
          goto LABEL_147;
        }
        v3 = 0x100000013;
      }
      goto LABEL_534;
    case 8:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_140;
    case 9:
      if (*(_QWORD *)a1 == 0x6C626174706D756ALL && *(_BYTE *)(a1 + 8) == 101)
      {
        v3 = 0x10000000ELL;
        goto LABEL_534;
      }
      if (a2 != 9)
      {
LABEL_63:
        v2 = 0;
        v4 = 1;
        goto LABEL_140;
      }
      if (*(_QWORD *)a1 == 0x69746C6975626F6ELL && *(_BYTE *)(a1 + 8) == 110)
      {
        v3 = 0x100000014;
      }
      else if (*(_QWORD *)a1 == 0x7275747061636F6ELL && *(_BYTE *)(a1 + 8) == 101)
      {
        v3 = 0x100000016;
      }
      else
      {
        v2 = 0;
        LOBYTE(v9) = 0;
        if (*(_QWORD *)a1 == 0x6C69666F72706F6ELL && *(_BYTE *)(a1 + 8) == 101)
        {
          v3 = 0x10000001DLL;
        }
        else if (*(_QWORD *)a1 == 0x7372756365726F6ELL && *(_BYTE *)(a1 + 8) == 101)
        {
          v3 = 0x10000001ELL;
        }
        else
        {
          if (*(_QWORD *)a1 != 0x6E6F7A6465726F6ELL || *(_BYTE *)(a1 + 8) != 101)
          {
            v4 = 1;
            v34 = 1;
            goto LABEL_223;
          }
          v3 = 0x10000001FLL;
        }
      }
      goto LABEL_534;
    case 10:
      if (*(_QWORD *)a1 == 0x696C61636F6C6C61 && *(_WORD *)(a1 + 8) == 28263)
      {
        v3 = 0x100000001;
      }
      else if (*(_QWORD *)a1 == 0x6E6F6D656D677261 && *(_WORD *)(a1 + 8) == 31084)
      {
        v3 = 0x100000003;
      }
      else if (*(_QWORD *)a1 == 0x65677265766E6F63 && *(_WORD *)(a1 + 8) == 29806)
      {
        v3 = 0x100000006;
      }
      else if (*(_QWORD *)a1 == 0x6968656E696C6E69 && *(_WORD *)(a1 + 8) == 29806)
      {
        v3 = 0x10000000DLL;
      }
      else if (*(_QWORD *)a1 == 0x61626C6C61636F6ELL && *(_WORD *)(a1 + 8) == 27491)
      {
        v3 = 0x100000015;
      }
      else if (*(_QWORD *)a1 == 0x6568635F66636F6ELL && *(_WORD *)(a1 + 8) == 27491)
      {
        v3 = 0x100000017;
      }
      else if (*(_QWORD *)a1 == 0x7973617466697773 && *(_WORD *)(a1 + 8) == 25454)
      {
        v3 = 0x10000003ELL;
      }
      else if (*(_QWORD *)a1 == 0x7272657466697773 && *(_WORD *)(a1 + 8) == 29295)
      {
        v3 = 0x10000003FLL;
      }
      else if (*(_QWORD *)a1 == 0x757465726C6C6977 && *(_WORD *)(a1 + 8) == 28274)
      {
        v3 = 0x100000041;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x6174736E67696C61 || *(_WORD *)(a1 + 8) != 27491)
        {
          v2 = 0;
          goto LABEL_533;
        }
        v3 = 0x10000004ELL;
      }
      goto LABEL_534;
    case 12:
      if (*(_QWORD *)a1 == 0x6E69737961776C61 && *(_DWORD *)(a1 + 8) == 1701734764)
      {
        v4 = 0;
        v2 = 0x100000002;
        goto LABEL_140;
      }
      if (*(_QWORD *)a1 != 0x676F72707473756DLL || *(_DWORD *)(a1 + 8) != 1936942450)
      {
        v2 = 0;
        v4 = 1;
        goto LABEL_114;
      }
      v3 = 0x100000010;
      goto LABEL_534;
    case 19:
      if (*(_QWORD *)a1 != 0x7373656363616E69
        || *(_QWORD *)(a1 + 8) != 0x6F6D656D656C6269
        || *(_QWORD *)(a1 + 11) != 0x796C6E6F6D656D65)
      {
        v32 = 0;
        v2 = 0;
        v9 = 0;
        v4 = 1;
        goto LABEL_241;
      }
      v3 = 0x10000000BLL;
      goto LABEL_534;
    default:
      if (a2 == 29)
      {
        if (*(_QWORD *)a1 ^ 0x7373656363616E69 | *(_QWORD *)(a1 + 8) ^ 0x5F6D656D656C6269 | *(_QWORD *)(a1 + 16) ^ 0x656D6772615F726FLL | *(_QWORD *)(a1 + 21) ^ 0x796C6E6F6D656D67)
          v3 = 0;
        else
          v3 = 0x10000000CLL;
        goto LABEL_534;
      }
      if (a2 == 33)
      {
        if (!memcmp((const void *)a1, "disable_sanitizer_instrumentation", 0x21uLL))
          v3 = 0x100000007;
        else
          v3 = 0;
        goto LABEL_534;
      }
LABEL_140:
      v9 = 0;
      if (a2 == 11 && v4)
      {
        if (*(_QWORD *)a1 == 0x63696C7075646F6ELL && *(_QWORD *)(a1 + 3) == 0x65746163696C7075)
        {
          v3 = 0x100000018;
          goto LABEL_534;
        }
        v34 = 0;
        v9 = 0;
        v4 = 1;
LABEL_259:
        v40 = 0;
        if (a2 == 11 && v4)
        {
          if (*(_QWORD *)a1 == 0x62797A616C6E6F6ELL && *(_QWORD *)(a1 + 3) == 0x646E6962797A616CLL)
          {
            v3 = 0x100000026;
            goto LABEL_534;
          }
          v40 = 0;
          v4 = 1;
        }
        goto LABEL_266;
      }
LABEL_147:
      if (a2 == 6)
        v32 = v4;
      else
        v32 = 0;
      if (v32 == 1)
      {
        if (*(_DWORD *)a1 == 1919315822 && *(_WORD *)(a1 + 4) == 25957)
        {
          v3 = 0x100000019;
          goto LABEL_534;
        }
        goto LABEL_165;
      }
      v36 = v4 ^ 1;
      if (a2 == 15)
        v37 = v4 ^ 1;
      else
        v37 = 1;
      if ((v37 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x63696C706D696F6ELL && *(_QWORD *)(a1 + 7) == 0x74616F6C66746963)
        {
          v3 = 0x10000001ALL;
          goto LABEL_534;
        }
LABEL_165:
        if ((v9 & 1) == 0)
        {
          v9 = 0;
          goto LABEL_229;
        }
        goto LABEL_182;
      }
      if (a2 != 8)
        v36 = 1;
      if ((v36 & 1) != 0)
      {
        if (!v9)
        {
          v32 = 0;
          goto LABEL_229;
        }
LABEL_182:
        if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)(a1 + 3) == 1701278309)
        {
          v3 = 0x10000001CLL;
          goto LABEL_534;
        }
        v9 = 1;
LABEL_229:
        v51 = v4 ^ 1;
        if (a2 != 17)
          v51 = 1;
        if ((v51 & 1) != 0)
        {
LABEL_241:
          if (a2 != 19 || !v4)
          {
LABEL_251:
            v34 = 0;
            if (v32)
            {
              if (*(_DWORD *)a1 == 2037608302 && *(_WORD *)(a1 + 4) == 25454)
              {
                v3 = 0x100000023;
                goto LABEL_534;
              }
            }
            else
            {
LABEL_223:
              if ((v9 & 1) != 0)
              {
                if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878)
                  goto LABEL_534;
                v9 = 1;
              }
              else
              {
                v9 = 0;
              }
            }
            goto LABEL_259;
          }
          if (*(_QWORD *)a1 == 0x6974696E61736F6ELL
            && *(_QWORD *)(a1 + 8) == 0x7265766F635F657ALL
            && *(_QWORD *)(a1 + 11) == 0x6567617265766F63)
          {
            v3 = 0x100000022;
            goto LABEL_534;
          }
        }
        else if (*(_QWORD *)a1 == 0x6974696E61736F6ELL
               && *(_QWORD *)(a1 + 8) == 0x646E756F625F657ALL
               && *(_BYTE *)(a1 + 16) == 115)
        {
          v3 = 0x100000021;
          goto LABEL_534;
        }
        v4 = 1;
        goto LABEL_251;
      }
      if (*(_QWORD *)a1 == 0x656E696C6E696F6ELL)
      {
        v3 = 0x10000001BLL;
        goto LABEL_534;
      }
      if (*(_QWORD *)a1 == 0x6E72757465726F6ELL)
      {
        v3 = 0x100000020;
        goto LABEL_534;
      }
      if ((v9 & 1) != 0 && *(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878)
        goto LABEL_534;
      if (*(_QWORD *)a1 == 0x646E69776E756F6ELL)
      {
        v3 = 0x100000025;
        goto LABEL_534;
      }
      v34 = 0;
      v4 = 1;
      v40 = 1;
LABEL_266:
      if (v9)
      {
        if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)(a1 + 3) == 1819047278)
        {
          v3 = 0x100000027;
          goto LABEL_534;
        }
        if (a2 == 13)
          v59 = v4;
        else
          v59 = 0;
        if ((v59 & 1) == 0)
        {
          if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)(a1 + 3) == 1702521203)
          {
            v3 = 0x10000002ALL;
            goto LABEL_534;
          }
          goto LABEL_311;
        }
        if (*(_QWORD *)a1 != 0x7566726F6674706FLL || *(_QWORD *)(a1 + 5) != 0x676E697A7A756672)
        {
LABEL_311:
          if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)(a1 + 3) == 1701736302)
          {
            v3 = 0x10000002BLL;
            goto LABEL_534;
          }
          goto LABEL_315;
        }
LABEL_404:
        v3 = 0x100000029;
        goto LABEL_534;
      }
      v61 = v4 ^ 1;
      if (a2 != 21)
        v61 = 1;
      if ((v61 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x696F705F6C6C756ELL
          && *(_QWORD *)(a1 + 8) == 0x5F73695F7265746ELL
          && *(_QWORD *)(a1 + 13) == 0x64696C61765F7369)
        {
          v3 = 0x100000028;
          goto LABEL_534;
        }
        goto LABEL_303;
      }
      if (a2 == 13)
        v64 = v4;
      else
        v64 = 0;
      if ((v64 & 1) == 0)
      {
LABEL_303:
        v59 = 0;
LABEL_315:
        if (v40)
          goto LABEL_316;
        if (!v59)
          goto LABEL_327;
LABEL_321:
        if (*(_QWORD *)a1 == 0x5F736E7275746572 && *(_QWORD *)(a1 + 5) == 0x65636977745F736ELL)
        {
          v3 = 0x10000002FLL;
          goto LABEL_534;
        }
        goto LABEL_332;
      }
      if (*(_QWORD *)a1 == 0x7566726F6674706FLL && *(_QWORD *)(a1 + 5) == 0x676E697A7A756672)
        goto LABEL_404;
      if (!v40)
        goto LABEL_321;
LABEL_316:
      switch(*(_QWORD *)a1)
      {
        case 0x656E6F6E64616572:
          v3 = 0x10000002CLL;
          goto LABEL_534;
        case 0x796C6E6F64616572:
          v3 = 0x10000002DLL;
          goto LABEL_534;
        case 0x64656E7275746572:
          v3 = 0x10000002ELL;
          goto LABEL_534;
      }
LABEL_327:
      if (v9)
      {
        if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)(a1 + 3) == 1954047342)
        {
          v3 = 0x100000030;
          goto LABEL_534;
        }
      }
LABEL_332:
      if (v34)
      {
        if (*(_QWORD *)a1 == 0x6361747365666173 && *(_BYTE *)(a1 + 8) == 107)
        {
          v3 = 0x100000031;
          goto LABEL_534;
        }
      }
      else
      {
        v71 = v4 ^ 1;
        if (a2 != 16)
          v71 = 1;
        if ((v71 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 8) == 0x737365726464615FLL)
          {
            v3 = 0x100000032;
            goto LABEL_534;
          }
          goto LABEL_360;
        }
      }
      v73 = v4 ^ 1;
      if (a2 == 18)
        v74 = v4 ^ 1;
      else
        v74 = 1;
      if ((v74 & 1) != 0)
      {
        if (a2 != 15)
          v73 = 1;
        if ((v73 & 1) != 0)
        {
LABEL_114:
          if (a2 == 12 && v4)
          {
            if (*(_QWORD *)a1 == 0x74616C7563657073 && *(_DWORD *)(a1 + 8) == 1701601889)
            {
              v3 = 0x100000038;
              goto LABEL_534;
            }
          }
          else
          {
            v42 = v4 ^ 1;
            if (a2 == 26)
              v43 = v42;
            else
              v43 = 1;
            if ((v43 & 1) != 0)
            {
              if (a2 != 3)
                v42 = 1;
              if ((v42 & 1) != 0)
              {
                v77 = (v2 & 0xFF00000000) == 0;
                if (a2 == 6 && (v2 & 0xFF00000000) == 0)
                {
                  if (*(_DWORD *)a1 == 1919972211 && *(_WORD *)(a1 + 4) == 29029)
                  {
                    v3 = 0x10000003BLL;
                    goto LABEL_534;
                  }
                  goto LABEL_533;
                }
                goto LABEL_361;
              }
LABEL_7:
              if (*(_WORD *)a1 == 29555 && *(_BYTE *)(a1 + 2) == 112)
              {
                v3 = 0x10000003ALL;
                goto LABEL_534;
              }
            }
            else if (*(_QWORD *)a1 == 0x74616C7563657073
                   && *(_QWORD *)(a1 + 8) == 0x64616F6C5F657669
                   && *(_QWORD *)(a1 + 16) == 0x696E65647261685FLL
                   && *(_WORD *)(a1 + 24) == 26478)
            {
              v3 = 0x100000039;
              goto LABEL_534;
            }
          }
        }
        else
        {
          if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6761746D656D5F65)
          {
            v3 = 0x100000034;
            goto LABEL_534;
          }
          if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x79726F6D656D5F65)
          {
            v3 = 0x100000035;
            goto LABEL_534;
          }
          if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)(a1 + 7) == 0x6461657268745F65)
          {
            v3 = 0x100000036;
            goto LABEL_534;
          }
          if (*(_QWORD *)a1 == 0x6163776F64616873 && *(_QWORD *)(a1 + 7) == 0x6B636174736C6C61)
          {
            v3 = 0x100000037;
            goto LABEL_534;
          }
        }
      }
      else if (*(_QWORD *)a1 == 0x657A6974696E6173
             && *(_QWORD *)(a1 + 8) == 0x657264646177685FLL
             && *(_WORD *)(a1 + 16) == 29555)
      {
        v3 = 0x100000033;
        goto LABEL_534;
      }
LABEL_360:
      v77 = (v2 & 0xFF00000000) == 0;
LABEL_361:
      if (a2 == 9 && v77)
      {
        if (*(_QWORD *)a1 == 0x6E6F727473707373 && *(_BYTE *)(a1 + 8) == 103)
        {
          v3 = 0x10000003CLL;
          goto LABEL_534;
        }
        v77 = 1;
      }
      else
      {
        v79 = !v77;
        if (a2 != 8)
          v79 = 1;
        if ((v79 & 1) == 0)
        {
          if (*(_QWORD *)a1 == 0x7066746369727473)
          {
            v3 = 0x10000003DLL;
            goto LABEL_534;
          }
          if (*(_QWORD *)a1 == 0x61636F6C6C616E69)
          {
            v3 = 0x100000047;
            goto LABEL_534;
          }
          goto LABEL_533;
        }
      }
      if (a2 == 9 && v77)
      {
        if (*(_QWORD *)a1 == 0x6C65737466697773 && *(_BYTE *)(a1 + 8) == 102)
        {
          v3 = 0x100000040;
          goto LABEL_534;
        }
        if (*(_QWORD *)a1 == 0x6C6E6F6574697277 && *(_BYTE *)(a1 + 8) == 121)
        {
          v3 = 0x100000042;
          goto LABEL_534;
        }
        if (*(_QWORD *)a1 == 0x7A6973636F6C6C61 && *(_BYTE *)(a1 + 8) == 101)
        {
          v3 = 0x10000004BLL;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      v83 = !v77;
      v84 = a2 != 7 || !v77;
      if ((v84 & 1) == 0)
      {
        if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)(a1 + 3) == 1954047343)
        {
          v3 = 0x100000043;
          goto LABEL_534;
        }
        v77 = 1;
        goto LABEL_399;
      }
      if (a2 != 5)
        v83 = 1;
      if ((v83 & 1) == 0)
      {
        if (*(_DWORD *)a1 == 1702000994 && *(_BYTE *)(a1 + 4) == 102)
        {
          v3 = 0x100000044;
          goto LABEL_534;
        }
        if (*(_DWORD *)a1 == 1635154274 && *(_BYTE *)(a1 + 4) == 108)
        {
          v3 = 0x100000045;
          goto LABEL_534;
        }
        if (*(_DWORD *)a1 == 1734962273 && *(_BYTE *)(a1 + 4) == 110)
        {
          v3 = 0x10000004ALL;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      v96 = !v77;
      v97 = a2 != 11 || !v77;
      if ((v97 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x74746E656D656C65 && *(_QWORD *)(a1 + 3) == 0x65707974746E656DLL)
        {
          v3 = 0x100000046;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      if (a2 != 12)
        v96 = 1;
      if ((v96 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x636F6C6C61657270 && *(_DWORD *)(a1 + 8) == 1684370529)
        {
          v3 = 0x100000048;
          goto LABEL_534;
        }
LABEL_492:
        if (a2 == 12 && v77)
        {
          v86 = 0x100000050;
          v87 = (*(_QWORD *)a1 ^ 0x725F656C61637376 | *(unsigned int *)(a1 + 8) ^ 0x65676E61) == 0;
LABEL_495:
          if (v87)
            v3 = v86;
          else
            v3 = v2;
          goto LABEL_534;
        }
LABEL_533:
        v3 = v2;
        goto LABEL_534;
      }
      v100 = !v77;
      v101 = a2 != 4 || !v77;
      if ((v101 & 1) == 0)
      {
        if (*(_DWORD *)a1 == 1952805491)
        {
          v3 = 0x100000049;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      if (a2 != 15)
        v100 = 1;
      if ((v100 & 1) == 0)
      {
        if (*(_QWORD *)a1 == 0x6572656665726564 && *(_QWORD *)(a1 + 7) == 0x656C626165636E65)
        {
          v3 = 0x10000004CLL;
          goto LABEL_534;
        }
        goto LABEL_533;
      }
      v103 = !v77;
      if (a2 != 23)
        v103 = 1;
      if ((v103 & 1) != 0)
      {
LABEL_399:
        if (a2 == 7 && v77)
        {
          v86 = 0x10000004FLL;
          v87 = (*(_DWORD *)a1 ^ 0x61747775 | *(_DWORD *)(a1 + 3) ^ 0x656C6261) == 0;
          goto LABEL_495;
        }
        goto LABEL_492;
      }
      if (*(_QWORD *)a1 != 0x6572656665726564
        || *(_QWORD *)(a1 + 8) != 0x5F656C626165636ELL
        || *(_QWORD *)(a1 + 15) != 0x6C6C756E5F726F5FLL)
      {
        goto LABEL_533;
      }
      v3 = 0x10000004DLL;
LABEL_534:
      if ((v3 & 0xFF00000000) != 0)
        return v3;
      else
        return 0;
  }
}

char *llvm::Attribute::getNameFromAttrKind(int a1)
{
  return off_1E814DF28[a1];
}

BOOL llvm::Attribute::isExistingAttribute(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v61;
  uint64_t v63;
  BOOL v64;
  BOOL v70;
  BOOL v76;
  BOOL v82;

  v2 = 0;
  switch(a2)
  {
    case 3:
      if (*a1 == 28520 && *((_BYTE *)a1 + 2) == 116)
        return 1;
      v4 = *((unsigned __int8 *)a1 + 2);
      v5 = *a1 == 29555;
      v6 = 112;
      return v5 && v4 == v6;
    case 4:
      return *(_DWORD *)a1 == 1684828003 || *(_DWORD *)a1 == 1953719662 || *(_DWORD *)a1 == 1952805491;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *((_BYTE *)a1 + 4) == 103)
        return 1;
      if (*(_DWORD *)a1 == 1701536110 && *((_BYTE *)a1 + 4) == 100)
        return 1;
      if (*(_DWORD *)a1 == 1702000994 && *((_BYTE *)a1 + 4) == 102)
        return 1;
      if (*(_DWORD *)a1 == 1635154274 && *((_BYTE *)a1 + 4) == 108)
        return 1;
      v4 = *((unsigned __int8 *)a1 + 4);
      v5 = *(_DWORD *)a1 == 1734962273;
      v6 = 110;
      return v5 && v4 == v6;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && a1[2] == 26482)
        return 1;
      if (*(_DWORD *)a1 == 1919315822 && a1[2] == 25957)
        return 1;
      if (*(_DWORD *)a1 == 2037608302 && a1[2] == 25454)
        return 1;
      v4 = a1[2];
      v5 = *(_DWORD *)a1 == 1919972211;
      v6 = 29029;
      return v5 && v4 == v6;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)((char *)a1 + 3) == 1852404844)
        return 1;
      if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)((char *)a1 + 3) == 1702521203)
        return 1;
      if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)((char *)a1 + 3) == 1935763820)
        return 1;
      if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)((char *)a1 + 3) == 1701278309)
        return 1;
      if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)((char *)a1 + 3) == 1717920878)
        return 1;
      if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)((char *)a1 + 3) == 1819047278)
        return 1;
      if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)((char *)a1 + 3) == 1702521203)
        return 1;
      if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)((char *)a1 + 3) == 1701736302)
        return 1;
      if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)((char *)a1 + 3) == 1954047342)
        return 1;
      if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)((char *)a1 + 3) == 1954047343)
        return 1;
      v4 = *(_DWORD *)((char *)a1 + 3);
      v5 = *(_DWORD *)a1 == 1635022709;
      v6 = 1701601889;
      return v5 && v4 == v6;
    case 8:
      return *(_QWORD *)a1 == 0x656E696C6E696F6ELL
          || *(_QWORD *)a1 == 0x6E72757465726F6ELL
          || *(_QWORD *)a1 == 0x646E69776E756F6ELL
          || *(_QWORD *)a1 == 0x656E6F6E64616572
          || *(_QWORD *)a1 == 0x796C6E6F64616572
          || *(_QWORD *)a1 == 0x64656E7275746572
          || *(_QWORD *)a1 == 0x7066746369727473
          || *(_QWORD *)a1 == 0x61636F6C6C616E69;
    case 9:
      if (*(_QWORD *)a1 == 0x6C626174706D756ALL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x69746C6975626F6ELL && *((_BYTE *)a1 + 8) == 110)
        return 1;
      if (*(_QWORD *)a1 == 0x7275747061636F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x6C69666F72706F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x7372756365726F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x6E6F7A6465726F6ELL && *((_BYTE *)a1 + 8) == 101)
        return 1;
      if (*(_QWORD *)a1 == 0x6361747365666173 && *((_BYTE *)a1 + 8) == 107)
        return 1;
      if (*(_QWORD *)a1 == 0x6E6F727473707373 && *((_BYTE *)a1 + 8) == 103)
        return 1;
      if (*(_QWORD *)a1 == 0x6C65737466697773 && *((_BYTE *)a1 + 8) == 102)
        return 1;
      if (*(_QWORD *)a1 == 0x6C6E6F6574697277 && *((_BYTE *)a1 + 8) == 121)
        return 1;
      v4 = *((unsigned __int8 *)a1 + 8);
      v5 = *(_QWORD *)a1 == 0x7A6973636F6C6C61;
      v6 = 101;
      return v5 && v4 == v6;
    case 10:
      if (*(_QWORD *)a1 == 0x696C61636F6C6C61 && a1[4] == 28263)
        return 1;
      if (*(_QWORD *)a1 == 0x6E6F6D656D677261 && a1[4] == 31084)
        return 1;
      if (*(_QWORD *)a1 == 0x65677265766E6F63 && a1[4] == 29806)
        return 1;
      if (*(_QWORD *)a1 == 0x6968656E696C6E69 && a1[4] == 29806)
        return 1;
      if (*(_QWORD *)a1 == 0x61626C6C61636F6ELL && a1[4] == 27491)
        return 1;
      if (*(_QWORD *)a1 == 0x6568635F66636F6ELL && a1[4] == 27491)
        return 1;
      if (*(_QWORD *)a1 == 0x7973617466697773 && a1[4] == 25454)
        return 1;
      if (*(_QWORD *)a1 == 0x7272657466697773 && a1[4] == 29295)
        return 1;
      if (*(_QWORD *)a1 == 0x757465726C6C6977 && a1[4] == 28274)
        return 1;
      v4 = a1[4];
      v5 = *(_QWORD *)a1 == 0x6174736E67696C61;
      v6 = 27491;
      return v5 && v4 == v6;
    case 11:
      if (*(_QWORD *)a1 == 0x63696C7075646F6ELL && *(_QWORD *)((char *)a1 + 3) == 0x65746163696C7075)
        return 1;
      if (*(_QWORD *)a1 == 0x62797A616C6E6F6ELL && *(_QWORD *)((char *)a1 + 3) == 0x646E6962797A616CLL)
        return 1;
      v45 = *(_QWORD *)((char *)a1 + 3);
      v46 = *(_QWORD *)a1 == 0x74746E656D656C65;
      v47 = 0x65707974746E656DLL;
      return v46 && v45 == v47;
    case 12:
      if (*(_QWORD *)a1 == 0x6E69737961776C61 && *((_DWORD *)a1 + 2) == 1701734764)
        return 1;
      if (*(_QWORD *)a1 == 0x676F72707473756DLL && *((_DWORD *)a1 + 2) == 1936942450)
        return 1;
      if (*(_QWORD *)a1 == 0x74616C7563657073 && *((_DWORD *)a1 + 2) == 1701601889)
        return 1;
      if (*(_QWORD *)a1 == 0x636F6C6C61657270 && *((_DWORD *)a1 + 2) == 1684370529)
        return 1;
      v4 = *((_DWORD *)a1 + 2);
      v5 = *(_QWORD *)a1 == 0x725F656C61637376;
      v6 = 1701277281;
      return v5 && v4 == v6;
    case 13:
      if (*(_QWORD *)a1 == 0x7566726F6674706FLL && *(_QWORD *)((char *)a1 + 5) == 0x676E697A7A756672)
        return 1;
      v45 = *(_QWORD *)((char *)a1 + 5);
      v46 = *(_QWORD *)a1 == 0x5F736E7275746572;
      v47 = 0x65636977745F736ELL;
      return v46 && v45 == v47;
    case 14:
      if (*(_QWORD *)a1 == 0x2D706D756A2D6F6ELL && *(_QWORD *)(a1 + 3) == 0x73656C6261742D70)
        return 1;
      v45 = *(_QWORD *)(a1 + 3);
      v46 = *(_QWORD *)a1 == 0x662D656661736E75;
      v47 = 0x6874616D2D70662DLL;
      return v46 && v45 == v47;
    case 15:
      if (*(_QWORD *)a1 == 0x63696C706D696F6ELL && *(_QWORD *)((char *)a1 + 7) == 0x74616F6C66746963)
        return 1;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)((char *)a1 + 7) == 0x6761746D656D5F65)
        return 1;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)((char *)a1 + 7) == 0x79726F6D656D5F65)
        return 1;
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *(_QWORD *)((char *)a1 + 7) == 0x6461657268745F65)
        return 1;
      if (*(_QWORD *)a1 == 0x6163776F64616873 && *(_QWORD *)((char *)a1 + 7) == 0x6B636174736C6C61)
        return 1;
      if (*(_QWORD *)a1 == 0x6572656665726564 && *(_QWORD *)((char *)a1 + 7) == 0x656C626165636E65)
        return 1;
      v61 = 0x6874616D2D70662DLL;
      if (*(_QWORD *)a1 == 0x2D73666E692D6F6ELL && *(_QWORD *)((char *)a1 + 7) == 0x6874616D2D70662DLL)
        return 1;
      v63 = *(_QWORD *)((char *)a1 + 7);
      v64 = *(_QWORD *)a1 == 0x2D736E616E2D6F6ELL;
      return v64 && v63 == v61;
    case 16:
      v45 = *((_QWORD *)a1 + 1);
      v46 = *(_QWORD *)a1 == 0x657A6974696E6173;
      v47 = 0x737365726464615FLL;
      return v46 && v45 == v47;
    case 17:
      return *(_QWORD *)a1 == 0x6974696E61736F6ELL
          && *((_QWORD *)a1 + 1) == 0x646E756F625F657ALL
          && *((_BYTE *)a1 + 16) == 115;
    case 18:
      if (*(_QWORD *)a1 == 0x657A6974696E6173 && *((_QWORD *)a1 + 1) == 0x657264646177685FLL && a1[8] == 29555)
        return 1;
      v70 = *(_QWORD *)a1 == 0x6572702D7373656CLL && *((_QWORD *)a1 + 1) == 0x6D70662D65736963;
      if (v70 && a1[8] == 25697)
        return 1;
      return *(_QWORD *)a1 == 0x706D61732D657375 && *((_QWORD *)a1 + 1) == 0x69666F72702D656CLL && a1[8] == 25964;
    case 19:
      if (*(_QWORD *)a1 == 0x7373656363616E69
        && *((_QWORD *)a1 + 1) == 0x6F6D656D656C6269
        && *(_QWORD *)((char *)a1 + 11) == 0x796C6E6F6D656D65)
      {
        return 1;
      }
      v76 = *(_QWORD *)a1 == 0x6974696E61736F6ELL && *((_QWORD *)a1 + 1) == 0x7265766F635F657ALL;
      if (v76 && *(_QWORD *)((char *)a1 + 11) == 0x6567617265766F63)
        return 1;
      v63 = *(_QWORD *)((char *)a1 + 11);
      v64 = *(_QWORD *)a1 == 0x662D786F72707061 && *((_QWORD *)a1 + 1) == 0x6D2D70662D636E75;
      v61 = 0x6874616D2D70662DLL;
      return v64 && v63 == v61;
    case 21:
      if (*(_QWORD *)a1 == 0x696F705F6C6C756ELL
        && *((_QWORD *)a1 + 1) == 0x5F73695F7265746ELL
        && *(_QWORD *)((char *)a1 + 13) == 0x64696C61765F7369)
      {
        return 1;
      }
      v63 = *(_QWORD *)((char *)a1 + 13);
      v64 = *(_QWORD *)a1 == 0x6E696C6E692D6F6ELL && *((_QWORD *)a1 + 1) == 0x742D656E696C2D65;
      v61 = 0x73656C6261742D65;
      return v64 && v63 == v61;
    case 23:
      if (*(_QWORD *)a1 == 0x6572656665726564
        && *((_QWORD *)a1 + 1) == 0x5F656C626165636ELL
        && *(_QWORD *)((char *)a1 + 15) == 0x6C6C756E5F726F5FLL)
      {
        return 1;
      }
      v82 = *(_QWORD *)a1 == 0x656E6769732D6F6ELL && *((_QWORD *)a1 + 1) == 0x2D736F72657A2D64;
      if (v82 && *(_QWORD *)((char *)a1 + 15) == 0x6874616D2D70662DLL)
        return 1;
      v63 = *(_QWORD *)((char *)a1 + 15);
      v64 = *(_QWORD *)a1 == 0x2D656C69666F7270 && *((_QWORD *)a1 + 1) == 0x612D656C706D6173;
      v61 = 0x6574617275636361;
      return v64 && v63 == v61;
    case 26:
      return *(_QWORD *)a1 == 0x74616C7563657073
          && *((_QWORD *)a1 + 1) == 0x64616F6C5F657669
          && *((_QWORD *)a1 + 2) == 0x696E65647261685FLL
          && a1[12] == 26478;
    case 29:
      return *(_QWORD *)a1 == 0x7373656363616E69
          && *((_QWORD *)a1 + 1) == 0x5F6D656D656C6269
          && *((_QWORD *)a1 + 2) == 0x656D6772615F726FLL
          && *(_QWORD *)((char *)a1 + 21) == 0x796C6E6F6D656D67;
    case 33:
      return !memcmp(a1, "disable_sanitizer_instrumentation", 0x21uLL);
    default:
      return v2;
  }
}

BOOL llvm::Attribute::isEnumAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 0;
}

BOOL llvm::Attribute::isIntAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 1;
}

BOOL llvm::Attribute::isStringAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 2;
}

BOOL llvm::Attribute::isTypeAttribute(llvm::Attribute *this)
{
  return *(_QWORD *)this && *(_BYTE *)(*(_QWORD *)this + 8) == 3;
}

uint64_t llvm::Attribute::getKindAsEnum(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 12);
  else
    return 0;
}

uint64_t llvm::AttributeImpl::getKindAsEnum(llvm::AttributeImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t llvm::Attribute::getValueAsInt(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 16);
  else
    return 0;
}

uint64_t llvm::AttributeImpl::getValueAsInt(llvm::AttributeImpl *this)
{
  return *((_QWORD *)this + 2);
}

BOOL llvm::Attribute::getValueAsBool(llvm::Attribute *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  return *(_QWORD *)this && *(_DWORD *)(v1 + 16) == 4 && *(_DWORD *)(v1 + *(unsigned int *)(v1 + 12) + 25) == 1702195828;
}

BOOL llvm::AttributeImpl::getValueAsBool(llvm::AttributeImpl *this)
{
  return *((_DWORD *)this + 4) == 4 && *(_DWORD *)((char *)this + *((unsigned int *)this + 3) + 25) == 1702195828;
}

uint64_t llvm::Attribute::getKindAsString(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 24;
  else
    return 0;
}

uint64_t llvm::AttributeImpl::getKindAsString(llvm::AttributeImpl *this)
{
  return (uint64_t)this + 24;
}

uint64_t llvm::Attribute::getValueAsString(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + *(unsigned int *)(*(_QWORD *)this + 12) + 25;
  else
    return 0;
}

uint64_t llvm::AttributeImpl::getValueAsString(llvm::AttributeImpl *this)
{
  return (uint64_t)this + *((unsigned int *)this + 3) + 25;
}

uint64_t llvm::Attribute::getValueAsType(llvm::Attribute *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 16);
  else
    return 0;
}

uint64_t llvm::AttributeImpl::getValueAsType(llvm::AttributeImpl *this)
{
  return *((_QWORD *)this + 2);
}

BOOL llvm::Attribute::hasAttribute(uint64_t *a1, int a2)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1 && *(_BYTE *)(v2 + 8) != 2 && *(_DWORD *)(v2 + 12) == a2)
    return 1;
  return !a2 && v2 == 0;
}

BOOL llvm::AttributeImpl::hasAttribute(uint64_t a1, int a2)
{
  return *(_BYTE *)(a1 + 8) != 2 && *(_DWORD *)(a1 + 12) == a2;
}

BOOL llvm::Attribute::hasAttribute(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  size_t v5;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (*(_BYTE *)(v3 + 8) != 2)
    return 0;
  v5 = *(unsigned int *)(v3 + 12);
  if (a3 != v5)
    return 0;
  if ((_DWORD)v5)
    return memcmp((const void *)(v3 + 24), a2, v5) == 0;
  return 1;
}

BOOL llvm::AttributeImpl::hasAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;

  if (*(_BYTE *)(a1 + 8) != 2)
    return 0;
  v4 = *(unsigned int *)(a1 + 12);
  if (a3 != v4)
    return 0;
  if ((_DWORD)v4)
    return memcmp((const void *)(a1 + 24), a2, v4) == 0;
  return 1;
}

uint64_t llvm::Attribute::getAlignment(llvm::Attribute *this)
{
  unint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  v2 = __clz(v1) ^ 0x3F | 0x100;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t llvm::Attribute::getStackAlignment(llvm::Attribute *this)
{
  unint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  v2 = __clz(v1) ^ 0x3F | 0x100;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t llvm::Attribute::getDereferenceableOrNullBytes(llvm::Attribute *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t llvm::Attribute::getAllocSizeArgs(llvm::Attribute *this)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  _BYTE v6[12];

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  v2 = v1 == 0xFFFFFFFFLL;
  v3 = v1 != 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (v2)
    v4 = 0;
  *(_QWORD *)&v6[4] = v4 & 0xFFFFFFFEFFFFFFFFLL | *(_QWORD *)(*(_QWORD *)this + 16) & 0xFFFFFF00 | ((unint64_t)v3 << 32);
  return *(_QWORD *)v6;
}

uint64_t llvm::Attribute::getVScaleRangeMin(llvm::Attribute *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 20);
}

uint64_t llvm::Attribute::getVScaleRangeMax(llvm::Attribute *this)
{
  uint64_t v1;
  __int128 v3;
  _BYTE v4[12];

  v1 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (!*(_QWORD *)(*(_QWORD *)this + 16))
    v1 = 0;
  *(_QWORD *)&v4[4] = v1 | *(_QWORD *)(*(_QWORD *)this + 16) & 0xFFFFFF00 | ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) != 0) << 32);
  *((_QWORD *)&v3 + 1) = *(_QWORD *)(*(_QWORD *)this + 16) != 0;
  *(_QWORD *)&v3 = *(_QWORD *)v4;
  return v3 >> 32;
}

uint64_t llvm::Attribute::getUWTableKind(llvm::Attribute *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 16);
}

void llvm::Attribute::getAsString(llvm::Attribute *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  int v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  char *v10;
  char *NameFromAttrKind;
  unint64_t v12;
  size_t v13;
  char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  unint64_t v28;
  const char *v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  _BYTE *v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int16 v52;
  const char *v53;
  const char *v54;
  int v55;
  const char *v56;
  char v57;
  _QWORD v58[2];
  unint64_t v59;
  __int16 v60;
  _BYTE v61[12];
  char *v62;
  _BYTE *v63;
  char *v64;
  char v65;
  uint64_t v66;
  int v67;
  std::string *v68;
  _QWORD v69[2];
  const char *v70;
  __int16 v71;
  _QWORD v72[2];
  const char *v73;
  __int16 v74;

  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_10;
  v6 = *(unsigned __int8 *)(v4 + 8);
  if (v6 == 3)
  {
    NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (!NameFromAttrKind)
    {
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
LABEL_30:
      std::string::push_back(a3, 40);
      *(_DWORD *)&v61[8] = 0;
      v65 = 0;
      v66 = 0;
      *(_QWORD *)v61 = &unk_1E81A7208;
      v68 = a3;
      v67 = 0;
      v63 = 0;
      v64 = 0;
      v62 = 0;
      if (*(_QWORD *)this)
        v22 = *(llvm::Type **)(*(_QWORD *)this + 16);
      else
        v22 = 0;
      llvm::Type::print(v22, (llvm::raw_ostream *)v61, 0, 1);
      v23 = v64 - v62;
      if (v64 != v62)
      {
        v64 = v62;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v61, v62, v23);
      }
      std::string::push_back(a3, 41);
      goto LABEL_64;
    }
    v13 = v12;
    if (v12 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_95;
    v14 = NameFromAttrKind;
    if (v12 >= 0x17)
    {
      v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v20 = v12 | 7;
      v21 = v20 + 1;
      v15 = operator new(v20 + 1);
      a3->__r_.__value_.__l.__size_ = v13;
      a3->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    }
    else
    {
      *((_BYTE *)&a3->__r_.__value_.__s + 23) = v12;
      v15 = a3;
      if (!v12)
        goto LABEL_29;
    }
    memmove(v15, v14, v13);
LABEL_29:
    *((_BYTE *)v15 + v13) = 0;
    goto LABEL_30;
  }
  if (v6 == 2)
  {
LABEL_50:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    *(_DWORD *)&v61[8] = 0;
    v65 = 0;
    v66 = 0;
    *(_QWORD *)v61 = &unk_1E81A7208;
    v68 = a3;
    v67 = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    v39 = (llvm::raw_ostream *)v61;
    llvm::raw_ostream::write((llvm::raw_ostream *)v61, 34);
    v40 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v41 = (const void *)(v40 + 24);
      v42 = *(unsigned int *)(v40 + 12);
      if (v63 - v64 >= v42)
      {
        if ((_DWORD)v42)
        {
          memcpy(v64, v41, v42);
          v64 += v42;
        }
        v39 = (llvm::raw_ostream *)v61;
      }
      else
      {
        v39 = llvm::raw_ostream::write((llvm::raw_ostream *)v61, (const char *)v41, v42);
      }
    }
    v43 = (_BYTE *)*((_QWORD *)v39 + 4);
    if ((unint64_t)v43 >= *((_QWORD *)v39 + 3))
    {
      llvm::raw_ostream::write(v39, 34);
    }
    else
    {
      *((_QWORD *)v39 + 4) = v43 + 1;
      *v43 = 34;
    }
    v44 = *(unsigned int *)(*(_QWORD *)this + 16);
    if ((_DWORD)v44)
    {
      v45 = (llvm::raw_ostream *)(*(_QWORD *)this + *(unsigned int *)(*(_QWORD *)this + 12) + 25);
      if ((unint64_t)(v63 - v64) > 1)
      {
        *(_WORD *)v64 = 8765;
        v64 += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v61, "=\"", 2uLL);
      }
      llvm::printEscapedString(v45, v44, (llvm::raw_ostream *)v61);
      if (v63 == v64)
        llvm::raw_ostream::write((llvm::raw_ostream *)v61, "\"", 1uLL);
      else
        *v64++ = 34;
    }
LABEL_64:
    *(_QWORD *)v61 = off_1E81A6E70;
    if (v67 == 1 && v62)
      MEMORY[0x1CAA32F9C](v62, 0x1000C8077774924);
    return;
  }
  if (!*(_BYTE *)(v4 + 8))
  {
    v7 = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (v7)
    {
      v9 = v8;
      if (v8 <= 0x7FFFFFFFFFFFFFF7)
      {
        v10 = v7;
        if (v8 >= 0x17)
        {
          v17 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17)
            v17 = v8 | 7;
          v18 = v17 + 1;
          v19 = (std::string *)operator new(v17 + 1);
          a3->__r_.__value_.__l.__size_ = v9;
          a3->__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
          a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          a3 = v19;
        }
        else
        {
          *((_BYTE *)&a3->__r_.__value_.__s + 23) = v8;
          if (!v8)
            goto LABEL_24;
        }
        memmove(a3, v10, v9);
LABEL_24:
        a3->__r_.__value_.__s.__data_[v9] = 0;
        return;
      }
LABEL_95:
      abort();
    }
LABEL_10:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  switch(*(_DWORD *)(v4 + 12))
  {
    case 'J':
      v72[0] = *(_QWORD *)(v4 + 16);
      if (a2)
        v16 = "align=";
      else
        v16 = "align ";
      *(_QWORD *)v61 = v16;
      v62 = (char *)v72;
      v52 = 3075;
      goto LABEL_82;
    case 'K':
      v28 = *(_QWORD *)(v4 + 16);
      v24 = HIDWORD(v28);
      v25 = v28 == 0xFFFFFFFFLL;
      v26 = v28 != 0xFFFFFFFF;
      v27 = v28 & 0xFFFFFF00;
      LODWORD(v28) = v28;
      *(_DWORD *)v61 = v24;
      if (v25)
        LODWORD(v28) = 0;
      *(_DWORD *)&v61[4] = v28 | v27;
      *(_DWORD *)&v61[8] = v26;
      v29 = (const char *)*(unsigned int *)v61;
      if ((*(_QWORD *)&v61[4] & 0xFF00000000) != 0)
      {
        v58[0] = "allocsize(";
        v59 = *(unsigned int *)v61;
        v60 = 2051;
        v69[0] = v58;
        v70 = ",";
        v71 = 770;
        v29 = (const char *)*(unsigned int *)&v61[4];
        v30 = 2;
        v72[0] = v69;
      }
      else
      {
        v72[0] = "allocsize(";
        v30 = 3;
      }
      v73 = v29;
      LOBYTE(v74) = v30;
      HIBYTE(v74) = 8;
      *(_QWORD *)v61 = v72;
      v62 = ")";
      v52 = 770;
LABEL_82:
      LOWORD(v64) = v52;
      goto LABEL_83;
    case 'L':
      v31 = *(_QWORD *)(v4 + 16);
      if (a2)
      {
        v69[0] = v31;
        v72[0] = "=";
        v73 = (const char *)v69;
        v74 = 3075;
        v32 = 2;
        v33 = 3;
        v34 = "dereferenceable";
        goto LABEL_46;
      }
      v58[0] = v31;
      v69[0] = "(";
      v70 = (const char *)v58;
      v71 = 3075;
      v53 = "dereferenceable";
      goto LABEL_77;
    case 'M':
      v35 = *(_QWORD *)(v4 + 16);
      if (a2)
      {
        v69[0] = v35;
        v72[0] = "=";
        v73 = (const char *)v69;
        v74 = 3075;
        v32 = 2;
        v33 = 3;
        v34 = "dereferenceable_or_null";
        goto LABEL_46;
      }
      v58[0] = v35;
      v69[0] = "(";
      v70 = (const char *)v58;
      v71 = 3075;
      v53 = "dereferenceable_or_null";
      goto LABEL_77;
    case 'N':
      v36 = *(_QWORD *)(v4 + 16);
      if (a2)
      {
        v69[0] = v36;
        v72[0] = "=";
        v73 = (const char *)v69;
        v74 = 3075;
        v32 = 2;
        v33 = 3;
        v34 = "alignstack";
LABEL_46:
        v37 = (char *)v72;
      }
      else
      {
        v58[0] = v36;
        v69[0] = "(";
        v70 = (const char *)v58;
        v71 = 3075;
        v53 = "alignstack";
LABEL_77:
        v72[0] = v53;
        v73 = (const char *)v69;
        v32 = 3;
        v33 = 2;
        v37 = ")";
        v74 = 515;
        v34 = (const char *)v72;
      }
      *(_QWORD *)v61 = v34;
      v62 = v37;
      LOBYTE(v64) = v33;
      goto LABEL_79;
    case 'O':
      v38 = *(_DWORD *)(v4 + 16);
      if (!v38)
        goto LABEL_50;
      if (v38 == 2)
      {
        *((_BYTE *)&a3->__r_.__value_.__s + 23) = 7;
        strcpy((char *)a3, "uwtable");
      }
      else
      {
        v54 = "sync";
        if (v38 != 1)
          v54 = "async";
        v55 = *(unsigned __int8 *)v54;
        v56 = "uwtable(";
        if (*v54)
        {
          v72[0] = "uwtable(";
          v73 = v54;
          v74 = 771;
          v57 = 2;
        }
        else
        {
          v72[0] = "uwtable(";
          v74 = 259;
          v57 = 3;
        }
        if (v55)
          v56 = (const char *)v72;
        *(_QWORD *)v61 = v56;
        v62 = ")";
        LOBYTE(v64) = v57;
        v32 = 3;
LABEL_79:
        BYTE1(v64) = v32;
LABEL_83:
        llvm::Twine::str((llvm::Twine *)v61, a3);
      }
      break;
    case 'P':
      v49 = *(_QWORD *)(v4 + 16);
      v46 = HIDWORD(v49);
      v25 = v49 == 0;
      v47 = v49 != 0;
      v48 = v49 & 0xFFFFFF00;
      v49 = v49;
      if (v25)
        v49 = 0;
      *(_DWORD *)v61 = v46;
      *(_QWORD *)&v61[4] = v49 | v48 | (v47 << 32);
      v58[0] = "vscale_range(";
      v59 = v46;
      *((_QWORD *)&v51 + 1) = v47;
      *(_QWORD *)&v51 = *(_QWORD *)v61;
      v50 = v51 >> 32;
      v60 = 2051;
      v69[0] = v58;
      v70 = ",";
      v71 = 770;
      if (v50 <= 0x100000000)
        LODWORD(v50) = 0;
      v72[0] = v69;
      v73 = (const char *)v50;
      v74 = 2050;
      *(_QWORD *)v61 = v72;
      v62 = ")";
      LOWORD(v64) = 770;
      goto LABEL_83;
    default:
      goto LABEL_50;
  }
}

BOOL llvm::Attribute::hasParentContext(unsigned int **this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  unsigned int *v5;
  BOOL v6;
  _QWORD *v7;
  BOOL v8;
  unsigned int *v9;
  void *__s2;
  uint64_t v12;
  _BYTE v13[128];
  void *__s1;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  __s2 = v13;
  v12 = 0x2000000000;
  sub_1C53284C4(*this, (unsigned int *)&__s2);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int **)(*(_QWORD *)(v4 + 224)
                        + 8
                        * ((*(_DWORD *)(v4 + 232) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v12)));
  __s1 = v16;
  v15 = 0x2000000000;
  if (v5)
    v6 = (v5 & 1) == 0;
  else
    v6 = 0;
  if (v6)
  {
    while (1)
    {
      sub_1C53284C4(v5, (unsigned int *)&__s1);
      if ((_DWORD)v12 == (_DWORD)v15)
      {
        v7 = __s1;
        if (!memcmp(__s1, __s2, 4 * v12))
          break;
      }
      LODWORD(v15) = 0;
      v5 = *(unsigned int **)v5;
      if (v5)
        v8 = (v5 & 1) == 0;
      else
        v8 = 0;
      if (!v8)
      {
        v5 = 0;
        v7 = __s1;
        break;
      }
    }
    if (v7 != v16)
      free(v7);
  }
  else
  {
    v5 = 0;
  }
  v9 = *this;
  if (__s2 != v13)
    free(__s2);
  return v5 == v9;
}

unsigned int *sub_1C53284C4(unsigned int *result, unsigned int *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *((unsigned __int8 *)result + 8);
  if (v3 == 2)
  {
    v6 = result + 6;
    v8 = result[3];
    v7 = result[4];
    result = llvm::FoldingSetNodeID::AddString(a2, (unsigned __int8 *)result + 24, v8);
    if (v7)
      return llvm::FoldingSetNodeID::AddString(a2, (unsigned __int8 *)v6 + v8 + 1, v7);
  }
  else if (v3 == 1)
  {
    return sub_1C5331460(a2, result[3], *((_QWORD *)result + 2));
  }
  else if (*((_BYTE *)result + 8))
  {
    return (unsigned int *)sub_1C5331544((uint64_t)a2, result[3], *((_QWORD *)result + 2));
  }
  else
  {
    v4 = result[3];
    v5 = a2[2];
    if (v5 >= a2[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v5 + 1, 4);
      LODWORD(v5) = a2[2];
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v4;
    ++a2[2];
  }
  return result;
}

uint64_t llvm::AttributeImpl::operator<(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  int v14;
  int v15;
  int v17;
  int v18;
  int v19;

  if (a1 == a2)
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 2)
  {
    if (v4 != 2)
      return 0;
    v5 = a1 + 24;
    v6 = *(unsigned int *)(a1 + 12);
    v7 = a2 + 24;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 == (_DWORD)v8)
    {
      if (!(_DWORD)v6
        || (v9 = memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), *(unsigned int *)(a2 + 12)), v10 = v6, !v9))
      {
        v11 = *(_DWORD *)(a1 + 16);
        v12 = *(_DWORD *)(a2 + 16);
        if (v12 >= v11)
          v13 = v11;
        else
          v13 = v12;
        if ((_DWORD)v13 && (v14 = memcmp((const void *)(v5 + v6 + 1), (const void *)(v7 + v8 + 1), v13)) != 0)
        {
          v15 = (v14 >> 31) | 1;
        }
        else
        {
          if (v11 < v12)
            v15 = -1;
          else
            v15 = 1;
          if (v11 == v12)
            v15 = 0;
        }
        return v15 == -1;
      }
    }
    else
    {
      if (v8 >= v6)
        v10 = *(_DWORD *)(a1 + 12);
      else
        v10 = *(_DWORD *)(a2 + 12);
      if (!v10)
      {
LABEL_27:
        if (v6 < v8)
          v15 = -1;
        else
          v15 = 1;
        return v15 == -1;
      }
    }
    v19 = memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), v10);
    v15 = (v19 >> 31) | 1;
    if (!v19)
      v15 = 0;
    if ((_DWORD)v6 == (_DWORD)v8 || v19)
      return v15 == -1;
    goto LABEL_27;
  }
  if (v4 == 2)
    return 1;
  v17 = *(_DWORD *)(a1 + 12);
  v18 = *(_DWORD *)(a2 + 12);
  if (v17 == v18)
    return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
  else
    return v17 < v18;
}

uint64_t *llvm::Attribute::Profile(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *result;
  v3 = *(unsigned int *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    v6 = a2;
    v8 = *result;
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v3 + 1, 4);
    a2 = v6;
    v2 = v8;
    LODWORD(v3) = *(_DWORD *)(v6 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v3) = v2;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    v7 = a2;
    v9 = HIDWORD(v2);
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 4);
    a2 = v7;
    HIDWORD(v2) = v9;
    LODWORD(v5) = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = HIDWORD(v2);
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::Attribute::canUseAsFnAttr(int a1)
{
  return byte_1C85FC5EE[a1 - 1] & 1;
}

uint64_t llvm::Attribute::canUseAsParamAttr(int a1)
{
  return (byte_1C85FC5EE[a1 - 1] >> 1) & 1;
}

uint64_t llvm::Attribute::canUseAsRetAttr(int a1)
{
  return (byte_1C85FC5EE[a1 - 1] >> 2) & 1;
}

uint64_t llvm::AttributeSet::get(llvm::AttributeSet *this, uint64_t **a2, const llvm::AttrBuilder *a3)
{
  return llvm::AttributeSetNode::getSorted((uint64_t *)this, a2[1], *((unsigned int *)a2 + 4));
}

uint64_t llvm::AttributeSetNode::get(llvm::AttributeSetNode *this, uint64_t **a2, const llvm::AttrBuilder *a3)
{
  return llvm::AttributeSetNode::getSorted((uint64_t *)this, a2[1], *((unsigned int *)a2 + 4));
}

uint64_t llvm::AttributeSetNode::get(uint64_t *a1, void *__src, uint64_t a3)
{
  size_t v6;
  int v7;
  _QWORD *v8;
  size_t v9;
  uint64_t Sorted;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v6 = 8 * a3;
  v12 = v14;
  v13 = 0x800000000;
  if ((unint64_t)(8 * a3) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, (8 * a3) >> 3, 8);
    v7 = v13;
    v8 = v12;
  }
  else
  {
    v7 = 0;
    v8 = v14;
  }
  if (a3)
  {
    memcpy(&v8[v7], __src, v6);
    v7 = v13;
    v8 = v12;
  }
  v9 = v7 + (v6 >> 3);
  LODWORD(v13) = v9;
  if (v9 >= 2)
  {
    qsort(v8, v9, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5331F00);
    v8 = v12;
    LODWORD(v9) = v13;
  }
  Sorted = llvm::AttributeSetNode::getSorted(a1, v8, v9);
  if (v12 != v14)
    free(v12);
  return Sorted;
}

uint64_t llvm::AttributeSet::addAttribute(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t Sorted;
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  void *__s2;
  uint64_t v22;
  void *v23[16];
  void *__s1;
  uint64_t v25;
  _QWORD v26[18];

  v26[16] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (!*a1 || ((*(unsigned __int8 *)(v6 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0)
  {
    v18 = v20;
    v19 = 0x800000000;
    v7 = *a2;
    __s2 = v23;
    LODWORD(v23[0]) = a3;
    v22 = 0x2000000001;
    v8 = *(_QWORD *)(v7 + 224)
       + 8 * ((*(_DWORD *)(v7 + 232) - 1) & sub_1C4F5AB38(v23, (uint64_t)v23 + 4));
    v9 = *(_QWORD *)v8;
    __s1 = v26;
    v25 = 0x2000000000;
    if (v9)
      v10 = (v9 & 1) == 0;
    else
      v10 = 0;
    if (!v10)
      goto LABEL_19;
    while (1)
    {
      sub_1C53284C4((unsigned int *)v9, (unsigned int *)&__s1);
      if ((_DWORD)v22 == (_DWORD)v25)
      {
        v11 = __s1;
        if (!memcmp(__s1, __s2, 4 * v22))
          break;
      }
      LODWORD(v25) = 0;
      v9 = *(_QWORD *)v9;
      if (v9)
        v12 = (v9 & 1) == 0;
      else
        v12 = 0;
      if (!v12)
      {
        v9 = 0;
        v11 = __s1;
        goto LABEL_16;
      }
    }
    v8 = 0;
LABEL_16:
    if (v11 != v26)
      free(v11);
    if (!v9)
    {
LABEL_19:
      v9 = sub_1C484358C(v7 + 2040, 16, 3);
      *(_QWORD *)v9 = 0;
      *(_BYTE *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 12) = a3;
      v13 = *(_DWORD *)(v7 + 232);
      v14 = *(_DWORD *)(v7 + 236) + 1;
      if (v14 > 2 * v13)
      {
        llvm::FoldingSetBase::GrowBucketCount(v7 + 224, 2 * v13, (uint64_t)off_1E814DEE0);
        __s1 = v26;
        v25 = 0x2000000000;
        v8 = *(_QWORD *)(v7 + 224)
           + 8
           * ((*(_DWORD *)(v7 + 232) - 1) & sub_1C6227D14(v7 + 224, (unsigned int *)v9, (unsigned int *)&__s1));
        if (__s1 != v26)
          free(__s1);
        v14 = *(_DWORD *)(v7 + 236) + 1;
      }
      *(_DWORD *)(v7 + 236) = v14;
      v15 = *(_QWORD *)v8;
      if (!*(_QWORD *)v8)
        v15 = v8 | 1;
      *(_QWORD *)v9 = v15;
      *(_QWORD *)v8 = v9;
    }
    if (__s2 != v23)
      free(__s2);
    sub_1C532EC68((unsigned int *)&v18, a3, v9);
    Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v18, v19);
    v6 = llvm::AttributeSet::addAttributes(a1, a2, Sorted);
    if (v18 != v20)
      free(v18);
  }
  return v6;
}

uint64_t llvm::AttributeSet::hasAttribute(_QWORD *a1, int a2)
{
  if (*a1)
    return (*(unsigned __int8 *)(*a1 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  else
    return 0;
}

uint64_t **llvm::AttrBuilder::addAttribute(unsigned int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  BOOL v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14[16];
  void *__s1;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v4 = **(_QWORD **)a1;
  LODWORD(v14[0]) = a2;
  v5 = *(_QWORD *)(v4 + 224) + 8 * ((*(_DWORD *)(v4 + 232) - 1) & sub_1C4F5AB38(v14, (uint64_t)v14 + 4));
  v6 = *(_QWORD *)v5;
  __s1 = v17;
  v16 = 0x2000000000;
  if (v6)
    v7 = (v6 & 1) == 0;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  while (1)
  {
    sub_1C53284C4((unsigned int *)v6, (unsigned int *)&__s1);
    if ((_DWORD)v16 == 1)
    {
      v8 = __s1;
      if (!memcmp(__s1, v14, 4uLL))
        break;
    }
    LODWORD(v16) = 0;
    v6 = *(_QWORD *)v6;
    if (v6)
      v9 = (v6 & 1) == 0;
    else
      v9 = 0;
    if (!v9)
    {
      v6 = 0;
      v8 = __s1;
      goto LABEL_14;
    }
  }
  v5 = 0;
LABEL_14:
  if (v8 != v17)
    free(v8);
  if (!v6)
  {
LABEL_18:
    v6 = sub_1C484358C(v4 + 2040, 16, 3);
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 12) = a2;
    v11 = *(_DWORD *)(v4 + 232);
    v12 = *(_DWORD *)(v4 + 236) + 1;
    if (v12 > 2 * v11)
    {
      llvm::FoldingSetBase::GrowBucketCount(v4 + 224, 2 * v11, (uint64_t)off_1E814DEE0);
      __s1 = v17;
      v16 = 0x2000000000;
      v5 = *(_QWORD *)(v4 + 224)
         + 8
         * ((*(_DWORD *)(v4 + 232) - 1) & sub_1C6227D14(v4 + 224, (unsigned int *)v6, (unsigned int *)&__s1));
      if (__s1 != v17)
        free(__s1);
      v12 = *(_DWORD *)(v4 + 236) + 1;
    }
    *(_DWORD *)(v4 + 236) = v12;
    v13 = *(_QWORD *)v5;
    if (!*(_QWORD *)v5)
      v13 = v5 | 1;
    *(_QWORD *)v6 = v13;
    *(_QWORD *)v5 = v6;
  }
  sub_1C532EC68(a1 + 2, a2, v6);
  return (uint64_t **)a1;
}

uint64_t llvm::AttributeSet::addAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t Sorted;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  Sorted = *a1;
  if (!*a1)
    return a3;
  if (a3)
  {
    v13[8] = a2;
    v14 = v16;
    v15 = 0x800000000;
    sub_1C53321EC((unsigned int *)&v14, (uint64_t)v16, (char *)(Sorted + 48), (char *)(Sorted + 48 + 8 * *(unsigned int *)(Sorted + 8)));
    v11 = v13;
    v12 = 0x800000000;
    sub_1C53321EC((unsigned int *)&v11, (uint64_t)v13, (char *)(a3 + 48), (char *)(a3 + 48 + 8 * *(unsigned int *)(a3 + 8)));
    v6 = (uint64_t *)v11;
    if (!(_DWORD)v12)
      goto LABEL_14;
    v7 = 8 * v12;
    while (1)
    {
      v8 = *v6;
      if (*v6)
      {
        if (*(_BYTE *)(v8 + 8) == 2)
        {
          sub_1C532EADC((uint64_t)&v14, (void *)(v8 + 24), *(unsigned int *)(v8 + 12), v8);
          goto LABEL_9;
        }
        v9 = *(_DWORD *)(v8 + 12);
      }
      else
      {
        v9 = 0;
      }
      sub_1C532EC68((unsigned int *)&v14, v9, *v6);
LABEL_9:
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        v6 = (uint64_t *)v11;
LABEL_14:
        if (v6 != v13)
          free(v6);
        Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v14, v15);
        if (v14 != v16)
          free(v14);
        return Sorted;
      }
    }
  }
  return Sorted;
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t v8;
  unsigned int *v9;

  v8 = (uint64_t)(a1 + 1);
  v9 = llvm::Attribute::get(*a1, a2, a3, a4, a5);
  sub_1C532EADC(v8, a2, a3, (uint64_t)v9);
  return a1;
}

_QWORD *llvm::AttrBuilder::AttrBuilder(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  char *v8;

  *a1 = a2;
  v4 = (uint64_t)(a1 + 3);
  a1[1] = a1 + 3;
  v5 = (unsigned int *)(a1 + 1);
  a1[2] = 0x800000000;
  if (a3)
  {
    v8 = a3;
    a3 += 48;
    v6 = &a3[8 * *((unsigned int *)v8 + 2)];
  }
  else
  {
    v6 = 0;
  }
  sub_1C53321EC(v5, v4, a3, v6);
  return a1;
}

{
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  char *v7;

  *a1 = a2;
  v4 = (uint64_t)(a1 + 3);
  a1[1] = a1 + 3;
  v5 = (unsigned int *)(a1 + 1);
  a1[2] = 0x800000000;
  if (a3)
  {
    v6 = a3;
    a3 += 48;
    v7 = &a3[8 * *((unsigned int *)v6 + 2)];
  }
  else
  {
    v7 = 0;
  }
  sub_1C53321EC(v5, v4, a3, v7);
  return a1;
}

uint64_t llvm::AttributeSet::removeAttribute(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t Sorted;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  Sorted = *a1;
  if (*a1)
  {
    if (((*(unsigned __int8 *)(Sorted + a3 / 8 + 12) >> (a3 & 7)) & 1) != 0)
    {
      v7 = a2;
      v8 = v10;
      v9 = 0x800000000;
      sub_1C53321EC((unsigned int *)&v8, (uint64_t)v10, (char *)(Sorted + 48), (char *)(Sorted + 48 + 8 * *(unsigned int *)(Sorted + 8)));
      llvm::AttrBuilder::removeAttribute((uint64_t)&v7, a3);
      Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v8, v9);
      if (v8 != v10)
        free(v8);
    }
  }
  return Sorted;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4)
  {
    v5 = *(char **)(a1 + 8);
    v6 = v4;
    while (1)
    {
      v7 = v6 >> 1;
      v8 = (uint64_t *)&v5[8 * (v6 >> 1)];
      v9 = *v8;
      if (!*v8)
        goto LABEL_6;
      if (*(_BYTE *)(v9 + 8) != 2)
        break;
LABEL_8:
      v6 = v7;
      if (!v7)
        goto LABEL_11;
    }
    LODWORD(v9) = *(_DWORD *)(v9 + 12);
LABEL_6:
    v10 = (char *)(v8 + 1);
    v11 = v6 + ~v7;
    if ((int)v9 < a2)
    {
      v7 = v11;
      v5 = v10;
    }
    goto LABEL_8;
  }
  v5 = *(char **)(a1 + 8);
LABEL_11:
  v12 = (char *)(v3 + 8 * v4);
  if (v5 != v12)
  {
    v13 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
    {
      if (*(_BYTE *)(v13 + 8) == 2 || *(_DWORD *)(v13 + 12) != a2)
        return a1;
    }
    else if (a2)
    {
      return a1;
    }
    if (v12 != v5 + 8)
    {
      memmove(v5, v5 + 8, v12 - (v5 + 8));
      LODWORD(v4) = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v4 - 1;
  }
  return a1;
}

uint64_t llvm::AttributeSet::removeAttribute(uint64_t *a1, uint64_t *a2, _QWORD *a3, size_t a4)
{
  uint64_t Sorted;
  int v5;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  Sorted = *a1;
  if (!*a1)
    return Sorted;
  v5 = *(_DWORD *)(Sorted + 40);
  if (!v5)
    return Sorted;
  v10 = *(_QWORD *)(Sorted + 24);
  v11 = sub_1C5E3DF4C(a3, (uint64_t)a3 + a4);
  v12 = v5 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    v15 = v10 + 24 * (v11 & v12);
    v16 = *(const void **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if (a3 == (_QWORD *)-1)
        goto LABEL_13;
      goto LABEL_6;
    }
    if (v16 != (const void *)-2)
      break;
    if (a3 == (_QWORD *)-2)
      goto LABEL_13;
LABEL_6:
    if (v16 == (const void *)-1)
      return *a1;
    v11 = i + v14;
  }
  if (a4 != *(_QWORD *)(v15 + 8) || a4 && memcmp(a3, v16, a4))
    goto LABEL_6;
LABEL_13:
  v18 = *a1;
  v21 = a2;
  v22 = v24;
  v23 = 0x800000000;
  if (v18)
  {
    v19 = (char *)(v18 + 48);
    v20 = (char *)(v18 + 48 + 8 * *(unsigned int *)(v18 + 8));
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  sub_1C53321EC((unsigned int *)&v22, (uint64_t)v24, v19, v20);
  llvm::AttrBuilder::removeAttribute((uint64_t)&v21, a3, a4);
  Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return Sorted;
}

uint64_t llvm::AttributeSet::hasAttribute(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5[0] = a2;
  v5[1] = a3;
  v6 = 0;
  return sub_1C5331A1C((uint64_t *)(v3 + 24), (uint64_t)v5, &v6);
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a1 + 8);
    do
    {
      v9 = &v8[v7 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = sub_1C5331648((int)&v15, v11, a2, a3);
      if (v12)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12)
        v8 = v10;
    }
    while (v7);
    v6 = *(_QWORD *)(a1 + 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 8);
  }
  v13 = (uint64_t *)(v6 + 8 * v7);
  if (v8 != v13 && llvm::Attribute::hasAttribute(v8, a2, a3))
  {
    if (v13 != v8 + 1)
    {
      memmove(v8, v8 + 1, (char *)v13 - (char *)(v8 + 1));
      LODWORD(v7) = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v7 - 1;
  }
  return a1;
}

uint64_t llvm::AttributeSet::removeAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t Sorted;
  _QWORD v16[2];
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v17 = a2;
  v18 = v20;
  v19 = 0x800000000;
  if (v6)
  {
    v7 = (char *)(v6 + 48);
    v8 = (char *)(v6 + 48 + 8 * *(unsigned int *)(v6 + 8));
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  sub_1C53321EC((unsigned int *)&v18, (uint64_t)v20, v7, v8);
  if ((_DWORD)v19)
  {
    v9 = (unint64_t *)v18;
    v10 = 8 * v19;
    while (1)
    {
      v11 = *v9;
      if (!*v9)
        goto LABEL_9;
      if (*(_BYTE *)(v11 + 8) != 2)
        break;
      v12 = v11 + 24;
      v13 = *(unsigned int *)(v11 + 12);
      v16[0] = v12;
      v16[1] = v13;
      if (sub_1C5332404(a3 + 16, (uint64_t)v16))
      {
LABEL_13:
        llvm::AttrBuilder::remove((uint64_t)&v17, a3);
        Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v18, v19);
        goto LABEL_15;
      }
LABEL_10:
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_14;
    }
    v11 = *(unsigned int *)(v11 + 12);
LABEL_9:
    if (((1 << v11) & *(_QWORD *)(a3 + ((v11 >> 3) & 0x1FFFFFF8))) != 0)
      goto LABEL_13;
    goto LABEL_10;
  }
LABEL_14:
  Sorted = *a1;
LABEL_15:
  if (v18 != v20)
    free(v18);
  return Sorted;
}

BOOL llvm::AttrBuilder::overlaps(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v4 = *(unint64_t **)(a1 + 8);
    v5 = a2 + 16;
    for (i = 8 * v2 - 8; ; i -= 8)
    {
      v7 = *v4;
      if (*v4)
      {
        if (*(_BYTE *)(v7 + 8) == 2)
        {
          v11 = v7 + 24;
          v12 = *(unsigned int *)(v7 + 12);
          v13[0] = v11;
          v13[1] = v12;
          v8 = sub_1C5332404(v5, (uint64_t)v13);
          goto LABEL_7;
        }
        v7 = *(unsigned int *)(v7 + 12);
      }
      v8 = (1 << v7) & *(_QWORD *)(a2 + ((v7 >> 3) & 0x1FFFFFF8));
LABEL_7:
      result = v8 != 0;
      ++v4;
      if (v8)
        v10 = 1;
      else
        v10 = i == 0;
      if (v10)
        return result;
    }
  }
  return 0;
}

uint64_t llvm::AttrBuilder::remove(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v3 = *(unint64_t **)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v4)
    goto LABEL_2;
  v5 = &v3[v4];
  v8 = 8 * v4 - 8;
  while (1)
  {
    v9 = *v3;
    if (!*v3)
      goto LABEL_8;
    if (*(_BYTE *)(v9 + 8) != 2)
    {
      v9 = *(unsigned int *)(v9 + 12);
LABEL_8:
      v10 = (1 << v9) & *(_QWORD *)(a2 + ((v9 >> 3) & 0x1FFFFFF8));
      goto LABEL_9;
    }
    v13 = *(unsigned int *)(v9 + 12);
    v14[0] = v9 + 24;
    v14[1] = v13;
    v10 = sub_1C5332404(a2 + 16, (uint64_t)v14);
LABEL_9:
    v11 = v3 + 1;
    if (v10)
      break;
    v8 -= 8;
    ++v3;
    if (v11 == v5)
      goto LABEL_3;
  }
  if (v11 == v5)
  {
LABEL_2:
    v5 = v3;
    goto LABEL_3;
  }
  v12 = 1;
  v5 = v3;
  do
  {
    if (!sub_1C5332394(a2, v3[v12]))
      *v5++ = v3[v12];
    ++v12;
    v8 -= 8;
  }
  while (v8);
LABEL_3:
  *(_DWORD *)(a1 + 16) = ((unint64_t)v5 - *(_QWORD *)(a1 + 8)) >> 3;
  return a1;
}

uint64_t llvm::AttributeSet::getNumAttributes(llvm::AttributeSet *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 8);
  else
    return 0;
}

uint64_t llvm::AttributeSetNode::hasAttribute(uint64_t a1, _QWORD *a2, size_t a3)
{
  int v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int i;
  int v10;
  uint64_t v11;
  const void *v12;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
    v8 = v3 - 1;
    for (i = 1; ; ++i)
    {
      v10 = v7 & v8;
      v11 = v6 + 24 * (v7 & v8);
      v12 = *(const void **)v11;
      if (*(_QWORD *)v11 == -1)
      {
        if (a2 == (_QWORD *)-1)
          return 1;
      }
      else if (v12 == (const void *)-2)
      {
        if (a2 == (_QWORD *)-2)
          return 1;
      }
      else if (a3 == *(_QWORD *)(v11 + 8) && (!a3 || !memcmp(a2, v12, a3)))
      {
        return 1;
      }
      if (v12 == (const void *)-1)
        return 0;
      v7 = i + v10;
    }
  }
  return 0;
}

uint64_t llvm::AttributeSetNode::getAttribute(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0)
    return 0;
  v3 = (_QWORD *)(a1 + 48);
  v4 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < a2)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  return *v3;
}

uint64_t llvm::AttributeSetNode::getAttribute(uint64_t a1, _QWORD *a2, size_t a3)
{
  int v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int i;
  int v10;
  uint64_t v11;
  const void *v12;

  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
    v8 = v3 - 1;
    for (i = 1; ; ++i)
    {
      v10 = v7 & v8;
      v11 = v6 + 24 * (v7 & v8);
      v12 = *(const void **)v11;
      if (*(_QWORD *)v11 == -1)
      {
        if (a2 == (_QWORD *)-1)
          return *(_QWORD *)(v11 + 16);
      }
      else if (v12 == (const void *)-2)
      {
        if (a2 == (_QWORD *)-2)
          return *(_QWORD *)(v11 + 16);
      }
      else if (a3 == *(_QWORD *)(v11 + 8) && (!a3 || !memcmp(a2, *(const void **)v11, a3)))
      {
        return *(_QWORD *)(v11 + 16);
      }
      if (v12 == (const void *)-1)
        return 0;
      v7 = i + v10;
    }
  }
  return 0;
}

uint64_t llvm::AttributeSet::getAlignment(llvm::AttributeSetNode **this)
{
  llvm::AttributeSetNode *v1;
  int v2;

  v1 = *this;
  if (v1)
  {
    LOWORD(v1) = llvm::AttributeSetNode::getAlignment(v1);
    v2 = BYTE1(v1);
  }
  else
  {
    v2 = 0;
  }
  return v1 | (v2 << 8);
}

uint64_t llvm::AttributeSetNode::getAlignment(llvm::AttributeSetNode *this)
{
  unsigned int v1;
  unsigned int v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;

  if ((*((_BYTE *)this + 21) & 4) != 0)
  {
    v4 = (char *)this + 48;
    v5 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
    if (v5)
    {
      v6 = v5 >> 3;
      do
      {
        v7 = v6 >> 1;
        v8 = &v4[8 * (v6 >> 1)];
        v9 = *(_QWORD *)v8;
        if (*(_QWORD *)v8)
          LODWORD(v9) = *(_DWORD *)(v9 + 12);
        v10 = v8 + 8;
        v6 += ~v7;
        if ((int)v9 < 74)
          v4 = v10;
        else
          v6 = v7;
      }
      while (v6);
    }
    v11 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    v2 = __clz(v11) ^ 0x3F | 0x100;
    if (!v11)
      v2 = 0;
    v1 = v2 >> 8;
  }
  else
  {
    v1 = 0;
    LOBYTE(v2) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeSet::getStackAlignment(llvm::AttributeSetNode **this)
{
  llvm::AttributeSetNode *v1;
  int v2;

  v1 = *this;
  if (v1)
  {
    LOWORD(v1) = llvm::AttributeSetNode::getStackAlignment(v1);
    v2 = BYTE1(v1);
  }
  else
  {
    v2 = 0;
  }
  return v1 | (v2 << 8);
}

uint64_t llvm::AttributeSetNode::getStackAlignment(llvm::AttributeSetNode *this)
{
  unsigned int v1;
  unsigned int v2;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;

  if ((*((_BYTE *)this + 21) & 0x40) != 0)
  {
    v4 = (char *)this + 48;
    v5 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
    if (v5)
    {
      v6 = v5 >> 3;
      do
      {
        v7 = v6 >> 1;
        v8 = &v4[8 * (v6 >> 1)];
        v9 = *(_QWORD *)v8;
        if (*(_QWORD *)v8)
          LODWORD(v9) = *(_DWORD *)(v9 + 12);
        v10 = v8 + 8;
        v6 += ~v7;
        if ((int)v9 < 78)
          v4 = v10;
        else
          v6 = v7;
      }
      while (v6);
    }
    v11 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    v2 = __clz(v11) ^ 0x3F | 0x100;
    if (!v11)
      v2 = 0;
    v1 = v2 >> 8;
  }
  else
  {
    v1 = 0;
    LOBYTE(v2) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeSet::getDereferenceableBytes(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 0x10) == 0)
    return 0;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 76)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  return *(_QWORD *)(*v3 + 16);
}

uint64_t llvm::AttributeSetNode::getDereferenceableBytes(llvm::AttributeSetNode *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  if ((*((_BYTE *)this + 21) & 0x10) == 0)
    return 0;
  v2 = (char *)this + 48;
  v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[8 * (v4 >> 1)];
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 76)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  return *(_QWORD *)(*(_QWORD *)v2 + 16);
}

uint64_t llvm::AttributeSet::getDereferenceableOrNullBytes(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 0x20) == 0)
    return 0;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 77)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  return *(_QWORD *)(*v3 + 16);
}

uint64_t llvm::AttributeSetNode::getDereferenceableOrNullBytes(llvm::AttributeSetNode *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  if ((*((_BYTE *)this + 21) & 0x20) == 0)
    return 0;
  v2 = (char *)this + 48;
  v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[8 * (v4 >> 1)];
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 77)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  return *(_QWORD *)(*(_QWORD *)v2 + 16);
}

uint64_t llvm::AttributeSet::getByRefType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 20) & 0x10) == 0)
    return 0;
  v3 = (uint64_t *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 68)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  v10 = *v3;
  if (v10)
    return *(_QWORD *)(v10 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSetNode::getAttributeType(uint64_t a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0)
    return 0;
  v3 = (uint64_t *)(a1 + 48);
  v4 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < a2)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  v10 = *v3;
  if (v10)
    return *(_QWORD *)(v10 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getByValType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 20) & 0x20) == 0)
    return 0;
  v3 = (uint64_t *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 69)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  v10 = *v3;
  if (v10)
    return *(_QWORD *)(v10 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getStructRetType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 2) == 0)
    return 0;
  v3 = (uint64_t *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 73)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  v10 = *v3;
  if (v10)
    return *(_QWORD *)(v10 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getPreallocatedType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(_BYTE *)(v1 + 21) & 1) == 0)
    return 0;
  v3 = (uint64_t *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 72)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  v10 = *v3;
  if (v10)
    return *(_QWORD *)(v10 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSet::getInAllocaType(llvm::AttributeSet *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(char *)(v1 + 20) & 0x80000000) == 0)
    return 0;
  v3 = (uint64_t *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 71)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  v10 = *v3;
  if (v10)
    return *(_QWORD *)(v10 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeSetNode::getAllocSizeArgs(llvm::AttributeSetNode *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 21) & 8) == 0)
    return 0;
  v2 = (char *)this + 48;
  v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[8 * (v4 >> 1)];
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 75)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  v12 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v9 = HIDWORD(v12);
  v10 = v12 == 0xFFFFFFFFLL;
  v11 = v12 & 0xFFFFFF00;
  LODWORD(v12) = v12;
  LODWORD(v13) = v9;
  if (v10)
    LODWORD(v12) = 0;
  HIDWORD(v13) = v12 | v11;
  return v13;
}

uint64_t llvm::AttributeSet::getVScaleRangeMin(llvm::AttributeSetNode **this)
{
  llvm::AttributeSetNode *v1;

  v1 = *this;
  if (v1)
    return llvm::AttributeSetNode::getVScaleRangeMin(v1);
  else
    return 1;
}

uint64_t llvm::AttributeSetNode::getVScaleRangeMin(llvm::AttributeSetNode *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 1;
  v2 = (char *)this + 48;
  v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[8 * (v4 >> 1)];
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 80)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  return *(unsigned int *)(*(_QWORD *)v2 + 20);
}

uint64_t llvm::AttributeSetNode::getVScaleRangeMax(llvm::AttributeSetNode *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _BOOL8 v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 0;
  v2 = (char *)this + 48;
  v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[8 * (v4 >> 1)];
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 80)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  v13 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v9 = HIDWORD(v13);
  v10 = v13 == 0;
  v11 = v13 != 0;
  v12 = v13 & 0xFFFFFF00;
  LODWORD(v13) = v13;
  LODWORD(v15) = v9;
  if (v10)
    LODWORD(v13) = 0;
  HIDWORD(v15) = v13 | v12;
  *((_QWORD *)&v14 + 1) = v11;
  *(_QWORD *)&v14 = v15;
  return v14 >> 32;
}

uint64_t llvm::AttributeSet::getUWTableKind(llvm::AttributeSet *this)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || (*(char *)(v1 + 21) & 0x80000000) == 0)
    return 0;
  v3 = (_QWORD *)(v1 + 48);
  v4 = 8 * *(unsigned int *)(v1 + 8) - 8 * *(unsigned int *)(v1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < 79)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  return *(unsigned int *)(*v3 + 16);
}

uint64_t llvm::AttributeSetNode::getUWTableKind(llvm::AttributeSetNode *this)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  if ((*((char *)this + 21) & 0x80000000) == 0)
    return 0;
  v2 = (char *)this + 48;
  v3 = 8 * *((unsigned int *)this + 2) - 8 * *((unsigned int *)this + 8);
  if (v3)
  {
    v4 = v3 >> 3;
    do
    {
      v5 = v4 >> 1;
      v6 = &v2[8 * (v4 >> 1)];
      v7 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      v8 = v6 + 8;
      v4 += ~v5;
      if ((int)v7 < 79)
        v2 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  return *(unsigned int *)(*(_QWORD *)v2 + 16);
}

void llvm::AttributeSet::getAsString(llvm::AttributeSetNode **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  llvm::AttributeSetNode *v3;

  v3 = *this;
  if (v3)
  {
    llvm::AttributeSetNode::getAsString(v3, a2, (std::string *)a3);
  }
  else
  {
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void llvm::AttributeSetNode::getAsString(llvm::AttributeSetNode *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = (char *)this + 48;
    v8 = 8 * v4;
    do
    {
      if (v6)
        std::string::push_back(a3, 32);
      llvm::Attribute::getAsString((llvm::Attribute *)&v7[v6], a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 8;
    }
    while (v8 != v6);
  }
}

BOOL llvm::AttributeSet::hasParentContext(llvm::AttributeSet *this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  _BYTE v21[128];
  void *v22;
  uint64_t v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x2000000000;
  v4 = *(unsigned int *)(*(_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = 0;
    v6 = (uint64_t *)(*(_QWORD *)this + 48);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (v5 >= HIDWORD(v20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v5 + 1, 4);
        LODWORD(v5) = v20;
      }
      *((_DWORD *)v19 + v5) = v8;
      v9 = (v20 + 1);
      LODWORD(v20) = v9;
      if (v9 >= HIDWORD(v20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v9 + 1, 4);
        LODWORD(v9) = v20;
      }
      *((_DWORD *)v19 + v9) = HIDWORD(v8);
      v5 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v10 = v19;
  }
  else
  {
    v5 = 0;
    v10 = v21;
  }
  v11 = *(_QWORD *)a2;
  v12 = sub_1C4F5AB38(v10, (uint64_t)v10 + 4 * v5);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 256) + 8 * ((*(_DWORD *)(v11 + 264) - 1) & v12));
  v22 = v24;
  v23 = 0x2000000000;
  if (v13)
    v14 = (v13 & 1) == 0;
  else
    v14 = 0;
  if (v14)
  {
    v15 = v11 + 256;
    while (!sub_1C5331840(v15, v13, (uint64_t)&v19, v12, (uint64_t)&v22))
    {
      LODWORD(v23) = 0;
      v13 = *(_QWORD *)v13;
      if (v13)
        v16 = (v13 & 1) == 0;
      else
        v16 = 0;
      if (!v16)
      {
        v13 = 0;
        break;
      }
    }
    if (v22 != v24)
      free(v22);
  }
  else
  {
    v13 = 0;
  }
  v17 = *(_QWORD *)this;
  if (v19 != v21)
    free(v19);
  return v13 == v17;
}

uint64_t llvm::AttributeSet::begin(llvm::AttributeSet *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 48;
  else
    return 0;
}

uint64_t llvm::AttributeSet::end(llvm::AttributeSet *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 8 * *(unsigned int *)(*(_QWORD *)this + 8) + 48;
  else
    return 0;
}

void llvm::AttributeSet::dump(llvm::AttributeSet *this)
{
  llvm *v2;
  uint64_t v3;
  llvm *v4;
  _DWORD *v5;
  std::string::size_type size;
  llvm *v7;
  char v8;
  BOOL v9;
  std::string *p_p;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  std::string __p;

  v2 = llvm::dbgs(this);
  v3 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 4)
  {
    *(_BYTE *)(v3 + 4) = 10;
    *(_DWORD *)v3 = 1025528641;
    *((_QWORD *)v2 + 4) += 5;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "AS =\n", 5uLL);
  }
  v4 = llvm::dbgs(v2);
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 3uLL)
  {
    *v5 = 544940064;
    *((_QWORD *)v4 + 4) += 4;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "  { ", 4uLL);
  }
  v7 = llvm::dbgs(v4);
  if (*(_QWORD *)this)
  {
    llvm::AttributeSetNode::getAsString(*(llvm::AttributeSetNode **)this, 1, &__p);
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    v8 = 0;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
  }
  v9 = v8 < 0;
  if (v8 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v11 = v8 & 0x7F;
  if (v9)
    v12 = size;
  else
    v12 = v11;
  v13 = llvm::raw_ostream::write(v7, (const char *)p_p, v12);
  v14 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 2)
  {
    *(_BYTE *)(v14 + 2) = 10;
    *(_WORD *)v14 = 32032;
    *((_QWORD *)v13 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v13, " }\n", 3uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t llvm::AttributeSetNode::AttributeSetNode(uint64_t a1, const void *a2, uint64_t a3)
{
  int v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  const void *v15;
  unsigned int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v23;
  int v24;
  uint64_t v25;
  void *__s1[2];
  uint64_t v27;

  v3 = a3;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 12) = 0u;
  v25 = a1 + 12;
  *(_OWORD *)(a1 + 28) = 0u;
  if (a3)
  {
    v5 = (uint64_t *)(a1 + 48);
    memmove((void *)(a1 + 48), a2, 8 * a3);
    if (v3)
    {
      v6 = &v5[v3];
      do
      {
        v7 = *v5;
        if (*v5)
        {
          if (*(_BYTE *)(v7 + 8) == 2)
          {
            v8 = (void *)*(unsigned int *)(v7 + 12);
            __s1[0] = (void *)(v7 + 24);
            __s1[1] = v8;
            v27 = v7;
            v9 = *(_DWORD *)(a1 + 40);
            if (v9)
            {
              v10 = *(_QWORD *)(a1 + 24);
              v11 = sub_1C5E3DF4C((_QWORD *)(v7 + 24), (uint64_t)v8 + v7 + 24);
              v12 = 0;
              v13 = v9 - 1;
              v14 = 1;
              v15 = __s1[0];
              while (1)
              {
                v16 = v11 & v13;
                v17 = v10 + 24 * (v11 & v13);
                v18 = *(const void **)v17;
                if (*(_QWORD *)v17 == -1)
                {
                  if (v15 == (const void *)-1)
                    goto LABEL_15;
                }
                else if (v18 == (const void *)-2)
                {
                  if (v15 == (const void *)-2)
                    goto LABEL_15;
                }
                else if (__s1[1] == *(void **)(v17 + 8))
                {
                  if (!__s1[1])
                    goto LABEL_15;
                  v24 = v14;
                  v21 = memcmp(v15, *(const void **)v17, (size_t)__s1[1]);
                  v14 = v24;
                  if (!v21)
                    goto LABEL_15;
                }
                if (v18 == (const void *)-1)
                  break;
                if (v12)
                  v23 = 0;
                else
                  v23 = v18 == (const void *)-2;
                if (v23)
                  v12 = v10 + 24 * v16;
                v11 = v14 + v16;
                ++v14;
              }
              if (v12)
                v19 = v12;
              else
                v19 = v10 + 24 * v16;
            }
            else
            {
              v19 = 0;
            }
            v20 = sub_1C5331B2C(a1 + 24, (uint64_t)__s1, (uint64_t)__s1, v19);
            *(_OWORD *)v20 = *(_OWORD *)__s1;
            *(_QWORD *)(v20 + 16) = v27;
            goto LABEL_15;
          }
          LODWORD(v7) = *(_DWORD *)(v7 + 12);
        }
        *(_BYTE *)(v25 + (int)v7 / 8) |= 1 << (v7 & 7);
LABEL_15:
        ++v5;
      }
      while (v5 != v6);
    }
  }
  return a1;
}

uint64_t llvm::AttributeSetNode::getSorted(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unsigned int v23;
  int v24;
  uint64_t v25;
  void *__s2;
  uint64_t v28;
  _BYTE v29[128];
  void *__s1;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v4 = 0;
  v5 = *a1;
  v28 = 0x2000000000;
  v6 = 8 * a3;
  v7 = 8 * a3;
  __s2 = v29;
  v8 = a2;
  do
  {
    v9 = *v8;
    if (v4 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v29, v4 + 1, 4);
      v4 = v28;
    }
    *((_DWORD *)__s2 + v4) = v9;
    v10 = (v28 + 1);
    LODWORD(v28) = v10;
    if (v10 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v29, v10 + 1, 4);
      LODWORD(v10) = v28;
    }
    *((_DWORD *)__s2 + v10) = HIDWORD(v9);
    v4 = v28 + 1;
    LODWORD(v28) = v28 + 1;
    ++v8;
    v7 -= 8;
  }
  while (v7);
  v11 = *(_QWORD *)(v5 + 256)
      + 8 * ((*(_DWORD *)(v5 + 264) - 1) & sub_1C4F5AB38(__s2, (uint64_t)__s2 + 4 * v4));
  v12 = *(_QWORD *)v11;
  __s1 = v32;
  v31 = 0x2000000000;
  if (v12)
    v13 = (v12 & 1) == 0;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_35;
  while (1)
  {
    v14 = *(unsigned int *)(v12 + 8);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = (uint64_t *)(v12 + 48);
      v17 = 8 * v14;
      do
      {
        v18 = *v16;
        if (v15 >= HIDWORD(v31))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v32, v15 + 1, 4);
          v15 = v31;
        }
        *((_DWORD *)__s1 + v15) = v18;
        v19 = (v31 + 1);
        LODWORD(v31) = v19;
        if (v19 >= HIDWORD(v31))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v32, v19 + 1, 4);
          LODWORD(v19) = v31;
        }
        *((_DWORD *)__s1 + v19) = HIDWORD(v18);
        v15 = v31 + 1;
        LODWORD(v31) = v31 + 1;
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    else
    {
      v15 = 0;
    }
    if ((_DWORD)v28 == v15)
    {
      v20 = __s1;
      if (!memcmp(__s1, __s2, 4 * v15))
        break;
    }
    LODWORD(v31) = 0;
    v12 = *(_QWORD *)v12;
    if (v12)
      v21 = (v12 & 1) == 0;
    else
      v21 = 0;
    if (!v21)
    {
      v12 = 0;
      v20 = __s1;
      goto LABEL_29;
    }
  }
  v11 = 0;
LABEL_29:
  if (v20 != v32)
    free(v20);
  if (!v12)
  {
LABEL_35:
    v12 = (uint64_t)operator new(v6 + 48);
    llvm::AttributeSetNode::AttributeSetNode(v12, a2, a3);
    v23 = *(_DWORD *)(v5 + 268) + 1;
    v24 = *(_DWORD *)(v5 + 264);
    if (v23 > 2 * v24)
    {
      llvm::FoldingSetBase::GrowBucketCount(v5 + 256, 2 * v24, (uint64_t)off_1E814DEF8);
      __s1 = v32;
      v31 = 0x2000000000;
      v11 = *(_QWORD *)(v5 + 256)
          + 8 * ((*(_DWORD *)(v5 + 264) - 1) & sub_1C5331944(v5 + 256, v12, (uint64_t)&__s1));
      if (__s1 != v32)
        free(__s1);
      v23 = *(_DWORD *)(v5 + 268) + 1;
    }
    *(_DWORD *)(v5 + 268) = v23;
    v25 = *(_QWORD *)v11;
    if (!*(_QWORD *)v11)
      v25 = v11 | 1;
    *(_QWORD *)v12 = v25;
    *(_QWORD *)v11 = v12;
  }
  if (__s2 != v29)
    free(__s2);
  return v12;
}

uint64_t llvm::AttributeSetNode::findEnumAttribute(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0)
    return 0;
  v3 = (_QWORD *)(a1 + 48);
  v4 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v4)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = v5 >> 1;
      v7 = &v3[v5 >> 1];
      v8 = *v7;
      if (*v7)
        LODWORD(v8) = *(_DWORD *)(v8 + 12);
      v9 = v7 + 1;
      v5 += ~v6;
      if ((int)v8 < a2)
        v3 = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  return *v3;
}

uint64_t llvm::AttributeListImpl::AttributeListImpl(uint64_t a1, _QWORD *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v4 = __src;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 12) = 0;
  v6 = a1 + 12;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  if (a3)
    memmove((void *)(a1 + 40), __src, 8 * a3);
  v7 = *v4;
  if (*v4)
    v8 = (uint64_t *)(*v4 + 48);
  else
    v8 = 0;
  if (v7)
    v9 = *v4 + 48 + 8 * *(unsigned int *)(v7 + 8);
  else
    v9 = 0;
  if (v8 != (uint64_t *)v9)
  {
    while (1)
    {
      v10 = *v8;
      if (!*v8)
        goto LABEL_14;
      if (*(_BYTE *)(v10 + 8) != 2)
        break;
LABEL_11:
      if (++v8 == (uint64_t *)v9)
        goto LABEL_15;
    }
    LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_14:
    *(_BYTE *)(v6 + (int)v10 / 8) |= 1 << (v10 & 7);
    goto LABEL_11;
  }
LABEL_15:
  if (a3)
  {
    v11 = &v4[a3];
    do
    {
      v12 = 0;
      v13 = *v4;
      if (*v4)
        v14 = (uint64_t *)(*v4 + 48);
      else
        v14 = 0;
      if (v13)
        v12 = *v4 + 48 + 8 * *(unsigned int *)(v13 + 8);
      while (v14 != (uint64_t *)v12)
      {
        v15 = *v14;
        if (*v14)
        {
          if (*(_BYTE *)(v15 + 8) == 2)
            goto LABEL_26;
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        *(_BYTE *)(a1 + 24 + (int)v15 / 8) |= 1 << (v15 & 7);
LABEL_26:
        ++v14;
      }
      ++v4;
    }
    while (v4 != v11);
  }
  return a1;
}

{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v4 = __src;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 12) = 0;
  v6 = a1 + 12;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  if (a3)
    memmove((void *)(a1 + 40), __src, 8 * a3);
  v7 = *v4;
  if (*v4)
    v8 = (uint64_t *)(*v4 + 48);
  else
    v8 = 0;
  if (v7)
    v9 = *v4 + 48 + 8 * *(unsigned int *)(v7 + 8);
  else
    v9 = 0;
  if (v8 != (uint64_t *)v9)
  {
    while (1)
    {
      v10 = *v8;
      if (!*v8)
        goto LABEL_12;
      if (*(_BYTE *)(v10 + 8) != 2)
        break;
LABEL_13:
      if (++v8 == (uint64_t *)v9)
        goto LABEL_14;
    }
    LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_12:
    *(_BYTE *)(v6 + (int)v10 / 8) |= 1 << (v10 & 7);
    goto LABEL_13;
  }
LABEL_14:
  if (a3)
  {
    v11 = &v4[a3];
    do
    {
      v12 = 0;
      v13 = *v4;
      if (*v4)
        v14 = (uint64_t *)(*v4 + 48);
      else
        v14 = 0;
      if (v13)
        v12 = *v4 + 48 + 8 * *(unsigned int *)(v13 + 8);
      while (v14 != (uint64_t *)v12)
      {
        v15 = *v14;
        if (*v14)
        {
          if (*(_BYTE *)(v15 + 8) == 2)
            goto LABEL_25;
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        *(_BYTE *)(a1 + 24 + (int)v15 / 8) |= 1 << (v15 & 7);
LABEL_25:
        ++v14;
      }
      ++v4;
    }
    while (v4 != v11);
  }
  return a1;
}

unsigned int *llvm::AttributeListImpl::Profile(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)(result + 10);
    v5 = a2 + 16;
    v6 = *(_DWORD *)(a2 + 8);
    v7 = 8 * v2;
    do
    {
      v8 = *v4;
      if (v6 >= *(_DWORD *)(a2 + 12))
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v5, v6 + 1, 4);
        v6 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = v8;
      v9 = *(_DWORD *)(a2 + 12);
      v10 = (*(_DWORD *)(a2 + 8) + 1);
      *(_DWORD *)(a2 + 8) = v10;
      if (v10 >= v9)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v5, v10 + 1, 4);
        LODWORD(v10) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v6;
      ++v4;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

_DWORD *llvm::AttributeListImpl::Profile(_DWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (a3)
  {
    v4 = (uint64_t)result;
    v5 = (uint64_t)(result + 4);
    v6 = result[2];
    v7 = 8 * a3;
    do
    {
      v8 = *a2;
      if (v6 >= *(_DWORD *)(v4 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v5, v6 + 1, 4);
        v6 = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v4 + 4 * v6) = v8;
      v9 = *(_DWORD *)(v4 + 12);
      v10 = (*(_DWORD *)(v4 + 8) + 1);
      *(_DWORD *)(v4 + 8) = v10;
      if (v10 >= v9)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v5, v10 + 1, 4);
        LODWORD(v10) = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v4 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(v4 + 8) + 1;
      *(_DWORD *)(v4 + 8) = v6;
      ++a2;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

BOOL llvm::AttributeListImpl::hasAttrSomewhere(uint64_t a1, int a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;

  if (a2 >= 0)
    v3 = a2;
  else
    v3 = a2 + 7;
  v4 = 1 << (a2 & 7);
  v5 = (v4 & *(_BYTE *)(a1 + (v3 >> 3) + 24));
  if (a3)
  {
    if ((v4 & *(_BYTE *)(a1 + (v3 >> 3) + 24)) != 0)
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v6)
      {
        v7 = (uint64_t)v3 >> 3;
        v8 = (_QWORD *)(a1 + 40);
        v9 = -1;
        while (!*v8 || (v4 & *(_BYTE *)(*v8 + v7 + 12)) == 0)
        {
          ++v9;
          ++v8;
          if (!--v6)
            return v5 != 0;
        }
        *a3 = v9;
      }
    }
  }
  return v5 != 0;
}

uint64_t llvm::AttributeList::getImpl(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  void *__s2;
  uint64_t v41;
  _BYTE v42[128];
  void *__s1;
  uint64_t v44;
  _QWORD v45[18];

  v4 = a2;
  v45[16] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  __s2 = v42;
  v41 = 0x2000000000;
  if (a3)
  {
    LODWORD(v6) = 0;
    v7 = 8 * a3;
    v8 = a2;
    do
    {
      v9 = *v8;
      if (v6 >= HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v42, v6 + 1, 4);
        LODWORD(v6) = v41;
      }
      *((_DWORD *)__s2 + v6) = v9;
      v10 = (v41 + 1);
      LODWORD(v41) = v10;
      if (v10 >= HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v42, v10 + 1, 4);
        LODWORD(v10) = v41;
      }
      *((_DWORD *)__s2 + v10) = HIDWORD(v9);
      v6 = (v41 + 1);
      LODWORD(v41) = v41 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
    v11 = __s2;
  }
  else
  {
    v6 = 0;
    v11 = v42;
  }
  v39 = v5;
  v12 = v5 + 240;
  v13 = *(_QWORD *)(v5 + 240)
      + 8 * ((*(_DWORD *)(v5 + 248) - 1) & sub_1C4F5AB38(v11, (uint64_t)v11 + 4 * v6));
  v14 = *(_QWORD *)v13;
  __s1 = v45;
  v44 = 0x2000000000;
  if (v14)
    v15 = (v14 & 1) == 0;
  else
    v15 = 0;
  if (!v15)
    goto LABEL_37;
  while (1)
  {
    v16 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = (uint64_t *)(v14 + 40);
      v19 = 8 * v16;
      do
      {
        v20 = *v18;
        if (v17 >= HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v45, v17 + 1, 4);
          v17 = v44;
        }
        *((_DWORD *)__s1 + v17) = v20;
        v21 = (v44 + 1);
        LODWORD(v44) = v21;
        if (v21 >= HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v45, v21 + 1, 4);
          LODWORD(v21) = v44;
        }
        *((_DWORD *)__s1 + v21) = HIDWORD(v20);
        v17 = v44 + 1;
        LODWORD(v44) = v44 + 1;
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    else
    {
      v17 = 0;
    }
    if ((_DWORD)v41 == v17)
    {
      v22 = __s1;
      if (!memcmp(__s1, __s2, 4 * v17))
        break;
    }
    LODWORD(v44) = 0;
    v14 = *(_QWORD *)v14;
    if (v14)
      v23 = (v14 & 1) == 0;
    else
      v23 = 0;
    if (!v23)
    {
      v14 = 0;
      v22 = __s1;
      goto LABEL_30;
    }
  }
  v13 = 0;
LABEL_30:
  if (v22 != v45)
    free(v22);
  if (!v14)
  {
LABEL_37:
    v25 = sub_1C484358C(v39 + 2040, 8 * a3 + 40, 3);
    v14 = v25;
    *(_QWORD *)v25 = 0;
    *(_DWORD *)(v25 + 8) = a3;
    *(_QWORD *)(v25 + 12) = 0;
    v26 = v25 + 12;
    *(_QWORD *)(v25 + 28) = 0;
    *(_QWORD *)(v25 + 20) = 0;
    if (a3)
      memmove((void *)(v25 + 40), v4, 8 * a3);
    v27 = *v4;
    if (*v4)
      v28 = (uint64_t *)(*v4 + 48);
    else
      v28 = 0;
    if (v27)
      v29 = *v4 + 48 + 8 * *(unsigned int *)(v27 + 8);
    else
      v29 = 0;
    if (v28 != (uint64_t *)v29)
    {
      while (1)
      {
        v30 = *v28;
        if (!*v28)
          goto LABEL_50;
        if (*(_BYTE *)(v30 + 8) != 2)
          break;
LABEL_47:
        if (++v28 == (uint64_t *)v29)
          goto LABEL_51;
      }
      LODWORD(v30) = *(_DWORD *)(v30 + 12);
LABEL_50:
      *(_BYTE *)(v26 + (int)v30 / 8) |= 1 << (v30 & 7);
      goto LABEL_47;
    }
LABEL_51:
    if (!a3)
      goto LABEL_65;
    v31 = &v4[a3];
LABEL_53:
    v32 = 0;
    v33 = *v4;
    if (*v4)
      v34 = (uint64_t *)(*v4 + 48);
    else
      v34 = 0;
    if (v33)
      v32 = *v4 + 48 + 8 * *(unsigned int *)(v33 + 8);
    while (1)
    {
      if (v34 == (uint64_t *)v32)
      {
        if (++v4 == v31)
        {
LABEL_65:
          v36 = *(_DWORD *)(v39 + 248);
          v37 = *(_DWORD *)(v39 + 252) + 1;
          if (v37 > 2 * v36)
          {
            llvm::FoldingSetBase::GrowBucketCount(v12, 2 * v36, (uint64_t)off_1E814DF10);
            __s1 = v45;
            v44 = 0x2000000000;
            v13 = *(_QWORD *)(v39 + 240)
                + 8 * ((*(_DWORD *)(v39 + 248) - 1) & sub_1C533209C(v12, v14, (uint64_t)&__s1));
            if (__s1 != v45)
              free(__s1);
            v37 = *(_DWORD *)(v39 + 252) + 1;
          }
          *(_DWORD *)(v39 + 252) = v37;
          v38 = *(_QWORD *)v13;
          if (!*(_QWORD *)v13)
            v38 = v13 | 1;
          *(_QWORD *)v14 = v38;
          *(_QWORD *)v13 = v14;
          break;
        }
        goto LABEL_53;
      }
      v35 = *v34;
      if (*v34)
      {
        if (*(_BYTE *)(v35 + 8) == 2)
          goto LABEL_62;
        LODWORD(v35) = *(_DWORD *)(v35 + 12);
      }
      *(_BYTE *)(v14 + 24 + (int)v35 / 8) |= 1 << (v35 & 7);
LABEL_62:
      ++v34;
    }
  }
  if (__s2 != v42)
    free(__s2);
  return v14;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  int v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *Sorted;
  int v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t Impl;
  char *v19;
  unint64_t v20;
  void *v21;
  char *v23;
  int v24;
  unsigned int v25;
  void *__src;
  uint64_t v27;
  _BYTE v28[32];
  void *v29;
  uint64_t v30;
  _BYTE v31[128];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[10];

  v34[8] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v3 = a2;
  v29 = v31;
  v30 = 0x800000000;
  v5 = a2 + 16 * a3;
  do
  {
    v6 = 0;
    v25 = 0;
    v25 = *(_DWORD *)v3;
    __src = v28;
    v27 = 0x400000000;
    while (*(_DWORD *)v3 == v25)
    {
      v7 = *(_QWORD *)(v3 + 8);
      if (v6 >= HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v28, v6 + 1, 8);
        v6 = v27;
      }
      *((_QWORD *)__src + v6) = v7;
      v6 = v27 + 1;
      LODWORD(v27) = v27 + 1;
      v3 += 16;
      if (v3 == v5)
      {
        v3 = v5;
        break;
      }
    }
    v8 = __src;
    v32 = v34;
    v33 = 0x800000000;
    if (v6 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v6, 8);
      v15 = v33;
      v16 = v32;
    }
    else
    {
      if (!v6)
      {
        v9 = 0;
        v10 = v34;
        goto LABEL_12;
      }
      v15 = 0;
      v16 = v34;
    }
    memcpy(&v16[v15], v8, 8 * v6);
    v9 = v33;
    v10 = v32;
LABEL_12:
    v11 = v9 + v6;
    LODWORD(v33) = v11;
    if (v11 >= 2)
    {
      qsort(v10, v11, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5331F00);
      v10 = v32;
      LODWORD(v11) = v33;
    }
    Sorted = (_QWORD *)llvm::AttributeSetNode::getSorted(a1, v10, v11);
    if (v32 != v34)
      free(v32);
    v32 = Sorted;
    v13 = v30;
    if (v30 >= HIDWORD(v30))
    {
      sub_1C4775004((uint64_t)&v29, &v25, (uint64_t *)&v32);
    }
    else
    {
      v14 = (char *)v29 + 16 * v30;
      *(_DWORD *)v14 = v25;
      *((_QWORD *)v14 + 1) = Sorted;
      LODWORD(v30) = v13 + 1;
    }
    if (__src != v28)
      free(__src);
  }
  while (v3 != v5);
  v17 = (char *)v29;
  Impl = v30;
  if ((_DWORD)v30 == 1)
  {
    v19 = (char *)v29 + 16;
    v20 = (*(_DWORD *)v29 + 2);
    v32 = v34;
    v33 = 0x400000000;
    sub_1C4848C0C((unsigned int *)&v32, v20, 0);
    do
    {
      v32[*(_DWORD *)v17 + 1] = *((_QWORD *)v17 + 1);
      v17 += 16;
    }
    while (v17 != v19);
    Impl = llvm::AttributeList::getImpl(a1, v32, v33);
    v21 = v32;
    if (v32 == v34)
      goto LABEL_28;
LABEL_41:
    free(v21);
    goto LABEL_28;
  }
  if ((_DWORD)v30)
  {
    v23 = (char *)v29 + 16 * v30;
    v24 = *((_DWORD *)v23 - 4);
    if (v24 == -1)
      v24 = *((_DWORD *)v29 + 4 * v30 - 8);
    v32 = v34;
    v33 = 0x400000000;
    sub_1C4848C0C((unsigned int *)&v32, (v24 + 2), 0);
    do
    {
      v32[*(_DWORD *)v17 + 1] = *((_QWORD *)v17 + 1);
      v17 += 16;
    }
    while (v17 != v23);
    Impl = llvm::AttributeList::getImpl(a1, v32, v33);
    v21 = v32;
    if (v32 != v34)
      goto LABEL_41;
LABEL_28:
    v17 = (char *)v29;
  }
  if (v17 != v31)
    free(v17);
  return Impl;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t Impl;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v3 = a2;
  v5 = a2 + 16 * a3;
  v6 = *(_DWORD *)(v5 - 16);
  if (v6 == -1)
  {
    if (a3 >= 2)
      v6 = *(_DWORD *)(a2 + 16 * a3 - 32);
    else
      v6 = -1;
  }
  v9 = v11;
  v10 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v9, (v6 + 2), 0);
  do
  {
    *((_QWORD *)v9 + (*(_DWORD *)v3 + 1)) = *(_QWORD *)(v3 + 8);
    v3 += 16;
  }
  while (v3 != v5);
  Impl = llvm::AttributeList::getImpl(a1, v9, v10);
  if (v9 != v11)
    free(v9);
  return Impl;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *__src, size_t __n)
{
  uint64_t v10;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t Impl;
  size_t v19;
  unint64_t v20;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v10 = 0;
  v24[8] = *MEMORY[0x1E0C80C00];
  do
  {
    if (!(__n + v10))
      goto LABEL_5;
  }
  while (!__src[__n - 1 + v10--]);
  v12 = __n + v10;
  if ((_DWORD)__n + (_DWORD)v10 != -3)
  {
    v14 = v12 + 3;
    v22 = v24;
    v23 = 0x800000000;
    if ((v12 + 3) < 9)
    {
      v24[0] = a2;
      v16 = 1;
      LODWORD(v23) = 1;
      if (v12 == -2)
      {
        v15 = v24;
        goto LABEL_27;
      }
      LODWORD(v13) = 1;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, (v12 + 3), 8);
      v17 = v23;
      if (v23 >= HIDWORD(v23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
        v17 = v23;
      }
      *((_QWORD *)v22 + v17) = a2;
      v13 = (v23 + 1);
      LODWORD(v23) = v13;
      if (v13 >= HIDWORD(v23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v13 + 1, 8);
        LODWORD(v13) = v23;
      }
    }
    goto LABEL_18;
  }
LABEL_5:
  if (a3)
  {
    v22 = v24;
    v24[0] = a2;
    v23 = 0x800000001;
    LODWORD(v13) = 1;
    v14 = 2;
LABEL_18:
    *((_QWORD *)v22 + v13) = a3;
    v16 = v23 + 1;
    LODWORD(v23) = v23 + 1;
    v15 = v22;
    if (v14 >= 3)
    {
      if (__n >= v14 - 2)
        v19 = v14 - 2;
      else
        v19 = __n;
      v20 = v19 + v16;
      if (v20 > HIDWORD(v23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v20, 8);
        v16 = v23;
        v15 = v22;
      }
      if (v19)
      {
        memcpy(&v15[v16], __src, 8 * v19);
        v16 = v23;
        v15 = v22;
      }
      v16 += v19;
      LODWORD(v23) = v16;
    }
    goto LABEL_27;
  }
  if (!a2)
    return 0;
  v15 = v24;
  v22 = v24;
  v24[0] = a2;
  v23 = 0x800000001;
  v16 = 1;
LABEL_27:
  Impl = llvm::AttributeList::getImpl(a1, v15, v16);
  if (v22 != v24)
    free(v22);
  return Impl;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t Impl;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v5 = a2 + 1;
  v8 = v10;
  v9 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v8, (a2 + 2), 0);
  *((_QWORD *)v8 + v5) = a3;
  Impl = llvm::AttributeList::getImpl(a1, v8, v9);
  if (v8 != v10)
    free(v8);
  return Impl;
}

uint64_t llvm::AttributeList::get(llvm::AttributeList *this, llvm::LLVMContext *a2, uint64_t a3, const llvm::AttrBuilder *a4)
{
  int v4;
  uint64_t Sorted;

  v4 = (int)a2;
  Sorted = llvm::AttributeSetNode::getSorted((uint64_t *)this, *(uint64_t **)(a3 + 8), *(unsigned int *)(a3 + 16));
  return llvm::AttributeList::get((uint64_t *)this, v4, Sorted);
}

uint64_t llvm::AttributeList::get(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4)
{
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  int v12;
  char *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int *v24;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[16];
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[18];

  v35[16] = *MEMORY[0x1E0C80C00];
  v26 = a2;
  v27 = v29;
  v28 = 0x800000000;
  if (a4)
  {
    v4 = a3;
    v24 = &a3[a4];
    do
    {
      v5 = *v4;
      v6 = *a1;
      v30 = v32;
      LODWORD(v32[0]) = v5;
      v31 = 0x2000000001;
      v7 = *(_QWORD *)(v6 + 224)
         + 8 * ((*(_DWORD *)(v6 + 232) - 1) & sub_1C4F5AB38(v32, (uint64_t)v32 + 4));
      v8 = *(_QWORD *)v7;
      v33 = v35;
      v34 = 0x2000000000;
      if (v8)
        v9 = (v8 & 1) == 0;
      else
        v9 = 0;
      if (!v9)
        goto LABEL_25;
      while (1)
      {
        sub_1C53284C4((unsigned int *)v8, (unsigned int *)&v33);
        if ((_DWORD)v31 == (_DWORD)v34)
        {
          v10 = v33;
          if (!memcmp(v33, v30, 4 * v31))
            break;
        }
        LODWORD(v34) = 0;
        v8 = *(_QWORD *)v8;
        if (v8)
          v11 = (v8 & 1) == 0;
        else
          v11 = 0;
        if (!v11)
        {
          v8 = 0;
          v10 = v33;
          goto LABEL_16;
        }
      }
      v7 = 0;
LABEL_16:
      if (v10 != v35)
        free(v10);
      if (!v8)
      {
LABEL_25:
        v8 = sub_1C484358C(v6 + 2040, 16, 3);
        *(_QWORD *)v8 = 0;
        *(_BYTE *)(v8 + 8) = 0;
        *(_DWORD *)(v8 + 12) = v5;
        v14 = *(_DWORD *)(v6 + 232);
        v15 = *(_DWORD *)(v6 + 236) + 1;
        if (v15 > 2 * v14)
        {
          llvm::FoldingSetBase::GrowBucketCount(v6 + 224, 2 * v14, (uint64_t)off_1E814DEE0);
          v33 = v35;
          v34 = 0x2000000000;
          v21 = sub_1C6227D14(v6 + 224, (unsigned int *)v8, (unsigned int *)&v33);
          v22 = *(_QWORD *)(v6 + 224);
          v23 = *(_DWORD *)(v6 + 232);
          if (v33 != v35)
            free(v33);
          v7 = v22 + 8 * ((v23 - 1) & v21);
          v15 = *(_DWORD *)(v6 + 236) + 1;
        }
        *(_DWORD *)(v6 + 236) = v15;
        v16 = *(_QWORD *)v7;
        if (!*(_QWORD *)v7)
          v16 = v7 | 1;
        *(_QWORD *)v8 = v16;
        *(_QWORD *)v7 = v8;
      }
      if (v30 != v32)
        free(v30);
      v33 = (_QWORD *)v8;
      v12 = v28;
      if (v28 >= HIDWORD(v28))
      {
        sub_1C4775004((uint64_t)&v27, &v26, (uint64_t *)&v33);
      }
      else
      {
        v13 = (char *)v27 + 16 * v28;
        *(_DWORD *)v13 = v26;
        *((_QWORD *)v13 + 1) = v8;
        LODWORD(v28) = v12 + 1;
      }
      ++v4;
    }
    while (v4 != v24);
    v17 = v27;
    v18 = v28;
  }
  else
  {
    v18 = 0;
    v17 = v29;
  }
  v19 = llvm::AttributeList::get(a1, (uint64_t)v17, v18);
  if (v27 != v29)
    free(v27);
  return v19;
}

uint64_t sub_1C532C21C(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C4775004(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_DWORD *)v4 = *a2;
  *(_QWORD *)(v4 + 8) = *a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  size_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[128];
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[128];
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[18];

  v36[16] = *MEMORY[0x1E0C80C00];
  v27 = a2;
  v28 = v30;
  v29 = 0x800000000;
  if (a4)
  {
    v4 = a3;
    v25 = a3 + 16 * a4;
    while (1)
    {
      v6 = *(unsigned __int8 **)v4;
      v5 = *(_QWORD *)(v4 + 8);
      v7 = *a1;
      v31 = v33;
      v32 = 0x2000000000;
      llvm::FoldingSetNodeID::AddString((unsigned int *)&v31, v6, v5);
      v8 = sub_1C4F5AB38(v31, (uint64_t)&v31[4 * v32]);
      v9 = *(_QWORD *)(v7 + 224) + 8 * ((*(_DWORD *)(v7 + 232) - 1) & v8);
      v10 = *(unsigned int **)v9;
      v34 = v36;
      v35 = 0x2000000000;
      if (!v10 || (v10 & 1) != 0)
        break;
      while (!sub_1C53317E4(v7 + 224, v10, (uint64_t)&v31, v8, (unsigned int *)&v34))
      {
        LODWORD(v35) = 0;
        v10 = *(unsigned int **)v10;
        if (v10)
          v12 = (v10 & 1) == 0;
        else
          v12 = 0;
        if (!v12)
        {
          v10 = 0;
          goto LABEL_15;
        }
      }
      v9 = 0;
LABEL_15:
      if (v34 == v36)
      {
        if (!v10)
          break;
      }
      else
      {
        free(v34);
        if (!v10)
          break;
      }
LABEL_23:
      if (v31 != v33)
        free(v31);
      v34 = v10;
      sub_1C532C21C((uint64_t)&v28, &v27, (uint64_t *)&v34);
      v4 += 16;
      if (v4 == v25)
      {
        v21 = v28;
        v22 = v29;
        goto LABEL_33;
      }
    }
    v13 = sub_1C484358C(v7 + 2040, v5 + 26, 3);
    v10 = (unsigned int *)v13;
    *(_QWORD *)v13 = 0;
    *(_BYTE *)(v13 + 8) = 2;
    *(_DWORD *)(v13 + 12) = v5;
    *(_DWORD *)(v13 + 16) = 0;
    v14 = v13 + 24;
    if (v5)
      memmove((void *)(v13 + 24), v6, v5);
    *(_BYTE *)(v14 + v5) = 0;
    *(_BYTE *)(v14 + (v5 + 1)) = 0;
    v15 = *(_DWORD *)(v7 + 232);
    v16 = *(_DWORD *)(v7 + 236) + 1;
    if (v16 > 2 * v15)
    {
      llvm::FoldingSetBase::GrowBucketCount(v7 + 224, 2 * v15, (uint64_t)off_1E814DEE0);
      v34 = v36;
      v35 = 0x2000000000;
      v18 = sub_1C6227D14(v7 + 224, v10, (unsigned int *)&v34);
      v19 = *(_QWORD *)(v7 + 224);
      v20 = *(_DWORD *)(v7 + 232);
      if (v34 != v36)
        free(v34);
      v9 = v19 + 8 * ((v20 - 1) & v18);
      v16 = *(_DWORD *)(v7 + 236) + 1;
    }
    *(_DWORD *)(v7 + 236) = v16;
    v17 = *(_QWORD *)v9;
    if (!*(_QWORD *)v9)
      v17 = v9 | 1;
    *(_QWORD *)v10 = v17;
    *(_QWORD *)v9 = v10;
    goto LABEL_23;
  }
  v22 = 0;
  v21 = v30;
LABEL_33:
  v23 = llvm::AttributeList::get(a1, (uint64_t)v21, v22);
  if (v28 != v30)
    free(v28);
  return v23;
}

uint64_t llvm::AttributeList::get(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t Impl;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t Sorted;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];
  void *v26;
  uint64_t v27;
  _BYTE v28[64];
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[10];

  Impl = a3;
  v31[8] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return Impl;
  if (a3 == 1)
    return *a2;
  LODWORD(v5) = 0;
  v6 = 8 * a3;
  v7 = a2;
  v8 = &a2[a3];
  do
  {
    v9 = *v7;
    if (*v7)
      LODWORD(v9) = *(_DWORD *)(v9 + 8);
    if (v5 <= v9)
      v5 = v9;
    else
      v5 = v5;
    ++v7;
    v6 -= 8;
  }
  while (v6);
  if (!(_DWORD)v5)
    return 0;
  v29 = v31;
  v30 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v29, v5, 0);
  for (i = 0; i != v5; ++i)
  {
    v25[8] = a1;
    v26 = v28;
    v11 = a2;
    v27 = 0x800000000;
    do
    {
      v12 = *v11;
      if (*v11 && i < *(unsigned int *)(v12 + 8))
      {
        v13 = *(_QWORD *)(v12 + 8 * i + 40);
        v23 = v25;
        v24 = 0x800000000;
        if (v13)
        {
          v14 = (char *)(v13 + 48);
          v15 = (char *)(v13 + 48 + 8 * *(unsigned int *)(v13 + 8));
        }
        else
        {
          v14 = 0;
          v15 = 0;
        }
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v23 = v25;
        v24 = 0x800000000;
      }
      sub_1C53321EC((unsigned int *)&v23, (uint64_t)v25, v14, v15);
      v16 = (uint64_t *)v23;
      if ((_DWORD)v24)
      {
        v17 = 8 * v24;
        while (1)
        {
          v18 = *v16;
          if (*v16)
          {
            if (*(_BYTE *)(v18 + 8) == 2)
            {
              sub_1C532EADC((uint64_t)&v26, (void *)(v18 + 24), *(unsigned int *)(v18 + 12), v18);
              goto LABEL_25;
            }
            v19 = *(_DWORD *)(v18 + 12);
          }
          else
          {
            v19 = 0;
          }
          sub_1C532EC68((unsigned int *)&v26, v19, *v16);
LABEL_25:
          ++v16;
          v17 -= 8;
          if (!v17)
          {
            v16 = (uint64_t *)v23;
            break;
          }
        }
      }
      if (v16 != v25)
        free(v16);
      ++v11;
    }
    while (v11 != v8);
    Sorted = llvm::AttributeSetNode::getSorted(a1, (uint64_t *)v26, v27);
    v29[i] = Sorted;
    if (v26 != v28)
      free(v26);
  }
  Impl = llvm::AttributeList::getImpl(a1, v29, v30);
  if (v29 != v31)
    free(v29);
  return Impl;
}

uint64_t llvm::AttributeList::getNumAttrSets(llvm::AttributeList *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 8);
  else
    return 0;
}

uint64_t llvm::AttributeList::getAttributes(llvm::AttributeList *this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this && (a2 + 1) < *(_DWORD *)(v2 + 8))
    return *(_QWORD *)(v2 + 8 * (a2 + 1) + 40);
  else
    return 0;
}

uint64_t llvm::AttributeList::addAttributeAtIndex(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  int v21;
  _QWORD *v22;
  size_t v23;
  uint64_t Sorted;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  void *__src;
  uint64_t v35;
  _BYTE v36[64];
  void *v37[2];
  void *v38[16];
  void *v39;
  uint64_t v40;
  _QWORD v41[18];

  v41[16] = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  if (*a1
    && (a3 + 1) < *(_DWORD *)(v7 + 8)
    && (v26 = *(_QWORD *)(v7 + 8 * (a3 + 1) + 40)) != 0)
  {
    if (((*(unsigned __int8 *)(v26 + a4 / 8 + 12) >> (a4 & 7)) & 1) != 0)
      return v7;
    v33 = a1;
    v8 = (const void *)(v26 + 48);
    v9 = v26 + 48 + 8 * *(unsigned int *)(v26 + 8);
  }
  else
  {
    v33 = a1;
    v8 = 0;
    v9 = 0;
  }
  __src = v36;
  v35 = 0x800000000;
  v10 = v9 - (_QWORD)v8;
  if ((unint64_t)(v9 - (_QWORD)v8) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v36, v10 >> 3, 8);
    v11 = v35;
  }
  else
  {
    v11 = 0;
  }
  if (v8 != (const void *)v9)
  {
    memcpy((char *)__src + 8 * v11, v8, v9 - (_QWORD)v8);
    v11 = v35;
  }
  LODWORD(v35) = v11 + ((unint64_t)v10 >> 3);
  v12 = *a2;
  v37[0] = v38;
  LODWORD(v38[0]) = a4;
  v37[1] = (void *)0x2000000001;
  v13 = sub_1C4F5AB38(v38, (uint64_t)v38 + 4);
  v14 = *(_QWORD *)(v12 + 224) + 8 * ((*(_DWORD *)(v12 + 232) - 1) & v13);
  v15 = *(_QWORD *)v14;
  v39 = v41;
  v40 = 0x2000000000;
  if (v15)
    v16 = (v15 & 1) == 0;
  else
    v16 = 0;
  if (!v16)
  {
    v27 = a3;
LABEL_40:
    v15 = sub_1C484358C(v12 + 2040, 16, 3);
    *(_QWORD *)v15 = 0;
    *(_BYTE *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 12) = a4;
    v28 = *(_DWORD *)(v12 + 232);
    v29 = *(_DWORD *)(v12 + 236) + 1;
    if (v29 > 2 * v28)
    {
      llvm::FoldingSetBase::GrowBucketCount(v12 + 224, 2 * v28, (uint64_t)off_1E814DEE0);
      v39 = v41;
      v40 = 0x2000000000;
      v14 = *(_QWORD *)(v12 + 224)
          + 8
          * ((*(_DWORD *)(v12 + 232) - 1) & sub_1C6227D14(v12 + 224, (unsigned int *)v15, (unsigned int *)&v39));
      if (v39 != v41)
        free(v39);
      v29 = *(_DWORD *)(v12 + 236) + 1;
    }
    *(_DWORD *)(v12 + 236) = v29;
    v30 = *(_QWORD *)v14;
    if (!*(_QWORD *)v14)
      v30 = v14 | 1;
    *(_QWORD *)v15 = v30;
    *(_QWORD *)v14 = v15;
    goto LABEL_22;
  }
  while (!sub_1C53317E4(v12 + 224, (unsigned int *)v15, (uint64_t)v37, v13, (unsigned int *)&v39))
  {
    LODWORD(v40) = 0;
    v15 = *(_QWORD *)v15;
    if (v15)
      v17 = (v15 & 1) == 0;
    else
      v17 = 0;
    if (!v17)
    {
      v15 = 0;
      goto LABEL_19;
    }
  }
  v14 = 0;
LABEL_19:
  v27 = a3;
  if (v39 != v41)
    free(v39);
  if (!v15)
    goto LABEL_40;
LABEL_22:
  if (v37[0] != v38)
    free(v37[0]);
  v18 = v35;
  if (v35 >= HIDWORD(v35))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v36, v35 + 1, 8);
    v18 = v35;
  }
  *((_QWORD *)__src + v18) = v15;
  v19 = (v35 + 1);
  LODWORD(v35) = v19;
  v20 = __src;
  v39 = v41;
  v40 = 0x800000000;
  if (v19 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v19, 8);
    v31 = v40;
    v32 = v39;
    goto LABEL_45;
  }
  if ((_DWORD)v19)
  {
    v31 = 0;
    v32 = v41;
LABEL_45:
    memcpy(&v32[v31], v20, 8 * v19);
    v21 = v40;
    v22 = v39;
    goto LABEL_29;
  }
  v21 = 0;
  v22 = v41;
LABEL_29:
  v23 = (v21 + v19);
  LODWORD(v40) = v23;
  if (v23 >= 2)
  {
    qsort(v22, v23, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5331F00);
    v22 = v39;
    LODWORD(v23) = v40;
  }
  Sorted = llvm::AttributeSetNode::getSorted(a2, v22, v23);
  if (v39 != v41)
    free(v39);
  v7 = llvm::AttributeList::setAttributesAtIndex(v33, a2, v27, Sorted);
  if (__src != v36)
    free(__src);
  return v7;
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a1;
  if (*a1
    && (a2 + 1) < *(_DWORD *)(v3 + 8)
    && (v5 = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v5 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::AttributeList::setAttributesAtIndex(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t Impl;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v7 = 0;
  v18[4] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (*a1)
    v9 = (const void *)(*a1 + 40);
  else
    v9 = 0;
  if (v8)
    v7 = *a1 + 40 + 8 * *(unsigned int *)(v8 + 8);
  v16 = v18;
  v17 = 0x400000000;
  v10 = v7 - (_QWORD)v9;
  if ((unint64_t)(v7 - (_QWORD)v9) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v10 >> 3, 8);
    v11 = v17;
  }
  else
  {
    v11 = 0;
  }
  v12 = (a3 + 1);
  if (v9 != (const void *)v7)
  {
    memcpy((char *)v16 + 8 * v11, v9, v7 - (_QWORD)v9);
    v11 = v17;
  }
  v13 = v11 + ((unint64_t)v10 >> 3);
  LODWORD(v17) = v13;
  if (v13 <= v12)
  {
    sub_1C5332174((uint64_t)&v16, (a3 + 2));
    v13 = v17;
  }
  *((_QWORD *)v16 + v12) = a4;
  Impl = llvm::AttributeList::getImpl(a2, v16, v13);
  if (v16 != v18)
    free(v16);
  return Impl;
}

uint64_t llvm::AttributeList::addAttributeAtIndex(llvm::AttributeList *a1, uint64_t *a2, int a3, unsigned __int8 *a4, size_t a5, unsigned __int8 *a6, size_t a7)
{
  unsigned int *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  v12 = llvm::Attribute::get(a2, a4, a5, a6, a7);
  sub_1C532EADC((uint64_t)v16, a4, a5, (uint64_t)v12);
  result = llvm::AttributeList::addAttributesAtIndex(a1, (llvm::LLVMContext *)a2, a3, (const llvm::AttrBuilder *)&v15);
  if (v16[0] != v17)
  {
    v14 = result;
    free(v16[0]);
    return v14;
  }
  return result;
}

uint64_t llvm::AttributeList::addAttributesAtIndex(llvm::AttributeList *this, llvm::LLVMContext *a2, int a3, const llvm::AttrBuilder *a4)
{
  uint64_t v5;
  uint64_t Impl;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t Sorted;
  uint64_t *v20;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned int *)a4 + 4);
  Impl = *(_QWORD *)this;
  if ((_DWORD)v5)
  {
    if (Impl)
    {
      if ((a3 + 1) >= *(_DWORD *)(Impl + 8))
      {
        v12 = 0;
        v13 = 0;
        v11 = v26;
        v23 = (uint64_t *)a2;
        v24 = v26;
        v25 = 0x800000000;
      }
      else
      {
        v10 = *(_QWORD *)(Impl + 8 * (a3 + 1) + 40);
        v11 = v26;
        v23 = (uint64_t *)a2;
        v24 = v26;
        v25 = 0x800000000;
        if (v10)
        {
          v12 = (char *)(v10 + 48);
          v13 = (char *)(v10 + 48 + 8 * *(unsigned int *)(v10 + 8));
        }
        else
        {
          v12 = 0;
          v13 = 0;
        }
      }
      sub_1C53321EC((unsigned int *)&v24, (uint64_t)v26, v12, v13);
      v14 = *((unsigned int *)a4 + 4);
      if ((_DWORD)v14)
      {
        v15 = (uint64_t *)*((_QWORD *)a4 + 1);
        for (i = 8 * v14; i; i -= 8)
        {
          v17 = *v15;
          if (*v15)
          {
            if (*(_BYTE *)(v17 + 8) == 2)
            {
              sub_1C532EADC((uint64_t)&v24, (void *)(v17 + 24), *(unsigned int *)(v17 + 12), v17);
              goto LABEL_12;
            }
            v18 = *(_DWORD *)(v17 + 12);
          }
          else
          {
            v18 = 0;
          }
          sub_1C532EC68((unsigned int *)&v24, v18, *v15);
LABEL_12:
          ++v15;
        }
      }
      Sorted = llvm::AttributeSetNode::getSorted((uint64_t *)a2, (uint64_t *)v24, v25);
      Impl = llvm::AttributeList::setAttributesAtIndex(this, (uint64_t *)a2, a3, Sorted);
      v20 = (uint64_t *)v24;
    }
    else
    {
      v22 = llvm::AttributeSetNode::getSorted((uint64_t *)a2, *((uint64_t **)a4 + 1), v5);
      v11 = &v25;
      v23 = &v25;
      v24 = (void *)0x400000000;
      sub_1C4848C0C((unsigned int *)&v23, (a3 + 2), 0);
      v23[a3 + 1] = v22;
      Impl = llvm::AttributeList::getImpl((uint64_t *)a2, v23, v24);
      v20 = v23;
    }
    if (v20 != v11)
      free(v20);
  }
  return Impl;
}

uint64_t llvm::AttributeList::addAttributeAtIndex(llvm::AttributeList *a1, llvm::LLVMContext *a2, int a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  llvm::LLVMContext *v10;
  void *v11[2];
  _QWORD v12[9];

  v12[8] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  if (!a4)
  {
    v7 = 0;
    goto LABEL_4;
  }
  if (*(_BYTE *)(a4 + 8) != 2)
  {
    v7 = *(_DWORD *)(a4 + 12);
LABEL_4:
    sub_1C532EC68((unsigned int *)v11, v7, a4);
    goto LABEL_5;
  }
  sub_1C532EADC((uint64_t)v11, (void *)(a4 + 24), *(unsigned int *)(a4 + 12), a4);
LABEL_5:
  v8 = llvm::AttributeList::addAttributesAtIndex(a1, a2, a3, (const llvm::AttrBuilder *)&v10);
  if (v11[0] != v12)
    free(v11[0]);
  return v8;
}

uint64_t llvm::AttrBuilder::addAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 8) == 2)
    {
      sub_1C532EADC(a1 + 8, (void *)(a2 + 24), *(unsigned int *)(a2 + 12), a2);
      return a1;
    }
    LODWORD(a2) = *(_DWORD *)(a2 + 12);
  }
  sub_1C532EC68((unsigned int *)(a1 + 8), a2, v2);
  return a1;
}

uint64_t llvm::AttributeList::begin(llvm::AttributeList *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 40;
  else
    return 0;
}

uint64_t llvm::AttributeList::end(llvm::AttributeList *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)this + 8 * *(unsigned int *)(*(_QWORD *)this + 8) + 40;
  else
    return 0;
}

uint64_t llvm::AttributeList::addParamAttribute(_QWORD *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t Sorted;
  uint64_t Impl;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v9 = 0;
  v29[4] = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  if (*a1)
    v11 = (const void *)(*a1 + 40);
  else
    v11 = 0;
  if (v10)
    v9 = *a1 + 40 + 8 * *(unsigned int *)(v10 + 8);
  v27 = v29;
  v28 = 0x400000000;
  v12 = v9 - (_QWORD)v11;
  if ((unint64_t)(v9 - (_QWORD)v11) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v12 >> 3, 8);
    v13 = v28;
  }
  else
  {
    v13 = 0;
  }
  if (v11 != (const void *)v9)
  {
    memcpy((char *)v27 + 8 * v13, v11, v9 - (_QWORD)v11);
    v13 = v28;
  }
  LODWORD(v28) = v13 + ((unint64_t)v12 >> 3);
  v14 = a3[a4 - 1];
  if (v28 <= v14 + 2)
    sub_1C5332174((uint64_t)&v27, (v14 + 3));
  if (a4)
  {
    for (i = 4 * a4; i; i -= 4)
    {
      v16 = (*a3 + 2);
      v17 = *((_QWORD *)v27 + v16);
      v24 = v26;
      v25 = 0x800000000;
      if (v17)
      {
        v18 = (char *)(v17 + 48);
        v19 = (char *)(v17 + 48 + 8 * *(unsigned int *)(v17 + 8));
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      sub_1C53321EC((unsigned int *)&v24, (uint64_t)v26, v18, v19);
      if (a5)
      {
        v20 = *(unsigned int *)(a5 + 12);
        if (*(_BYTE *)(a5 + 8) == 2)
        {
          sub_1C532EADC((uint64_t)&v24, (void *)(a5 + 24), v20, a5);
          goto LABEL_19;
        }
      }
      else
      {
        LODWORD(v20) = 0;
      }
      sub_1C532EC68((unsigned int *)&v24, v20, a5);
LABEL_19:
      Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v24, v25);
      *((_QWORD *)v27 + v16) = Sorted;
      if (v24 != v26)
        free(v24);
      ++a3;
    }
  }
  Impl = llvm::AttributeList::getImpl(a2, v27, v28);
  if (v27 != v29)
    free(v27);
  return Impl;
}

uint64_t llvm::AttributeList::removeAttributeAtIndex(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t Impl;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  Impl = *a1;
  if (*a1)
  {
    v5 = (a3 + 1);
    v6 = *(unsigned int *)(Impl + 8);
    if (v5 < v6)
    {
      v7 = *(_QWORD *)(Impl + 40 + 8 * v5);
      if (v7)
      {
        if (((*(unsigned __int8 *)(v7 + a4 / 8 + 12) >> (a4 & 7)) & 1) != 0)
        {
          v14 = v16;
          v15 = 0x400000000;
          if (v6 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v6, 8);
            v11 = v15;
            v12 = v14;
          }
          else
          {
            v11 = 0;
            v12 = v16;
          }
          memcpy(&v12[v11], (const void *)(Impl + 40), 8 * v6);
          LODWORD(v15) = v15 + v6;
          v13 = llvm::AttributeSet::removeAttribute((uint64_t *)v14 + v5, a2, a4);
          *((_QWORD *)v14 + v5) = v13;
          Impl = llvm::AttributeList::getImpl(a2, v14, v15);
          if (v14 != v16)
            free(v14);
        }
      }
    }
  }
  return Impl;
}

uint64_t llvm::AttributeList::removeAttributeAtIndex(uint64_t *a1, uint64_t *a2, int a3, _QWORD *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t Impl;
  unsigned int v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::AttributeList::hasAttributeAtIndex(a1, a3, a4, a5) & 1) == 0)
    return *a1;
  v10 = *a1;
  v11 = *a1 + 40;
  if (*a1)
    v12 = (_BYTE *)(*a1 + 40);
  else
    v12 = 0;
  if (v10)
    v13 = (_BYTE *)(v11 + 8 * *(unsigned int *)(v10 + 8));
  else
    v13 = 0;
  v15 = a3 + 1;
  v21 = v23;
  v22 = 0x400000000;
  v16 = v13 - v12;
  if ((unint64_t)(v13 - v12) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v16 >> 3, 8);
    v17 = v22;
    v18 = v21;
  }
  else
  {
    v17 = 0;
    v18 = v23;
  }
  if (v12 != v13)
  {
    memcpy(&v18[v17], v12, v13 - v12);
    v17 = v22;
    v18 = v21;
  }
  LODWORD(v22) = v17 + ((unint64_t)v16 >> 3);
  v19 = llvm::AttributeSet::removeAttribute(&v18[v15], a2, a4, a5);
  *((_QWORD *)v21 + v15) = v19;
  Impl = llvm::AttributeList::getImpl(a2, v21, v22);
  if (v21 != v23)
    free(v21);
  return Impl;
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, _QWORD *a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int i;
  int v13;
  uint64_t v14;
  const void *v15;

  v4 = *a1;
  if (!*a1)
    return 0;
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(v5 + 40);
  if (!v6)
    return 0;
  v9 = *(_QWORD *)(v5 + 24);
  v10 = sub_1C5E3DF4C(a3, (uint64_t)a3 + a4);
  v11 = v6 - 1;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v11;
    v14 = v9 + 24 * (v10 & v11);
    v15 = *(const void **)v14;
    if (*(_QWORD *)v14 == -1)
    {
      if (a3 == (_QWORD *)-1)
        return 1;
      goto LABEL_8;
    }
    if (v15 != (const void *)-2)
      break;
    if (a3 == (_QWORD *)-2)
      return 1;
LABEL_8:
    if (v15 == (const void *)-1)
      return 0;
    v10 = i + v13;
  }
  if (a4 != *(_QWORD *)(v14 + 8) || a4 && memcmp(a3, v15, a4))
    goto LABEL_8;
  return 1;
}

uint64_t llvm::AttributeList::removeAttributesAtIndex(_QWORD *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8))
    v8 = *(_QWORD *)(v7 + 8 * (a3 + 1) + 40);
  else
    v8 = 0;
  v11 = v8;
  v9 = llvm::AttributeSet::removeAttributes(&v11, a2, a4);
  if (v8 == v9)
    return *a1;
  else
    return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, v9);
}

uint64_t llvm::AttributeList::addDereferenceableRetAttr(llvm::AttributeList *this, llvm::LLVMContext *a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  llvm::LLVMContext *v9;
  void *v10[2];
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  if (a3)
  {
    v5 = llvm::Attribute::get((uint64_t *)a2, 76, a3);
    if (!v5)
    {
      v6 = 0;
      goto LABEL_5;
    }
    if (*(_BYTE *)(v5 + 8) != 2)
    {
      v6 = *(_DWORD *)(v5 + 12);
LABEL_5:
      sub_1C532EC68((unsigned int *)v10, v6, v5);
      goto LABEL_6;
    }
    sub_1C532EADC((uint64_t)v10, (void *)(v5 + 24), *(unsigned int *)(v5 + 12), v5);
  }
LABEL_6:
  v7 = llvm::AttributeList::addAttributesAtIndex(this, a2, 0, (const llvm::AttrBuilder *)&v9);
  if (v10[0] != v11)
    free(v10[0]);
  return v7;
}

llvm::AttrBuilder *llvm::AttrBuilder::addDereferenceableAttr(llvm::AttrBuilder *this, uint64_t a2)
{
  unint64_t v3;
  int v4;

  if (a2)
  {
    v3 = llvm::Attribute::get(*(uint64_t **)this, 76, a2);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 8) == 2)
      {
        sub_1C532EADC((uint64_t)this + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
        return this;
      }
      v4 = *(_DWORD *)(v3 + 12);
    }
    else
    {
      v4 = 0;
    }
    sub_1C532EC68((unsigned int *)this + 2, v4, v3);
  }
  return this;
}

uint64_t llvm::AttributeList::addDereferenceableParamAttr(llvm::AttributeList *this, llvm::LLVMContext *a2, int a3, uint64_t a4)
{
  unint64_t v7;
  int v8;
  uint64_t v9;
  llvm::LLVMContext *v11;
  void *v12[2];
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if (a4)
  {
    v7 = llvm::Attribute::get((uint64_t *)a2, 76, a4);
    if (!v7)
    {
      v8 = 0;
      goto LABEL_5;
    }
    if (*(_BYTE *)(v7 + 8) != 2)
    {
      v8 = *(_DWORD *)(v7 + 12);
LABEL_5:
      sub_1C532EC68((unsigned int *)v12, v8, v7);
      goto LABEL_6;
    }
    sub_1C532EADC((uint64_t)v12, (void *)(v7 + 24), *(unsigned int *)(v7 + 12), v7);
  }
LABEL_6:
  v9 = llvm::AttributeList::addAttributesAtIndex(this, a2, a3 + 1, (const llvm::AttrBuilder *)&v11);
  if (v12[0] != v13)
    free(v12[0]);
  return v9;
}

uint64_t llvm::AttributeList::addAllocSizeParamAttr(llvm::AttributeList *a1, uint64_t *a2, int a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v13;
  void *v14[2];
  _QWORD v15[9];

  v15[8] = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14[0] = v15;
  v14[1] = (void *)0x800000000;
  v8 = 0xFFFFFFFFLL;
  if (*((_BYTE *)a5 + 4))
    v8 = *a5;
  v9 = llvm::Attribute::get(a2, 75, v8 | (a4 << 32));
  if (!v9)
  {
    v10 = 0;
    goto LABEL_6;
  }
  if (*(_BYTE *)(v9 + 8) != 2)
  {
    v10 = *(_DWORD *)(v9 + 12);
LABEL_6:
    sub_1C532EC68((unsigned int *)v14, v10, v9);
    goto LABEL_7;
  }
  sub_1C532EADC((uint64_t)v14, (void *)(v9 + 24), *(unsigned int *)(v9 + 12), v9);
LABEL_7:
  v11 = llvm::AttributeList::addAttributesAtIndex(a1, (llvm::LLVMContext *)a2, a3 + 1, (const llvm::AttrBuilder *)&v13);
  if (v14[0] != v15)
    free(v14[0]);
  return v11;
}

uint64_t llvm::AttributeList::getParamAttrs(llvm::AttributeList *this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this && (a2 + 2) < *(_DWORD *)(v2 + 8))
    return *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  else
    return 0;
}

uint64_t llvm::AttributeList::getRetAttrs(llvm::AttributeList *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v1 + 8) >= 2u)
    return *(_QWORD *)(v1 + 48);
  else
    return 0;
}

uint64_t llvm::AttributeList::getFnAttrs(llvm::AttributeList *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v1 + 8))
    return *(_QWORD *)(v1 + 40);
  else
    return 0;
}

BOOL llvm::AttributeList::hasAttributesAtIndex(llvm::AttributeList *this, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  return *(_QWORD *)this
      && (a2 + 1) < *(_DWORD *)(v2 + 8)
      && *(_QWORD *)(v2 + 8 * (a2 + 1) + 40) != 0;
}

uint64_t llvm::AttributeList::hasFnAttr(_QWORD *a1, int a2)
{
  if (*a1)
    return (*(unsigned __int8 *)(*a1 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  else
    return 0;
}

uint64_t llvm::AttributeList::hasFnAttr(uint64_t *a1, _QWORD *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int i;
  int v12;
  uint64_t v13;
  const void *v14;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (!*(_DWORD *)(v3 + 8))
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 40);
  if (!v5)
    return 0;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
  v10 = v5 - 1;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v10;
    v13 = v8 + 24 * (v9 & v10);
    v14 = *(const void **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if (a2 == (_QWORD *)-1)
        return 1;
      goto LABEL_8;
    }
    if (v14 != (const void *)-2)
      break;
    if (a2 == (_QWORD *)-2)
      return 1;
LABEL_8:
    if (v14 == (const void *)-1)
      return 0;
    v9 = i + v12;
  }
  if (a3 != *(_QWORD *)(v13 + 8) || a3 && memcmp(a2, v14, a3))
    goto LABEL_8;
  return 1;
}

BOOL llvm::AttributeList::hasAttrSomewhere(uint64_t *a1, int a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = a2 + 7;
  v5 = 1 << (a2 & 7);
  result = (v5 & *(_BYTE *)(v3 + (v4 >> 3) + 24)) != 0;
  if (a3 && (v5 & *(_BYTE *)(v3 + (v4 >> 3) + 24)) != 0)
  {
    v7 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t)v4 >> 3;
      v9 = (_QWORD *)(v3 + 40);
      v10 = -1;
      while (!*v9 || (v5 & *(_BYTE *)(*v9 + v8 + 12)) == 0)
      {
        ++v10;
        ++v9;
        if (!--v7)
          return 1;
      }
      *a3 = v10;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *a1;
  if (!*a1)
    return 0;
  if ((a2 + 1) >= *(_DWORD *)(v3 + 8))
    return 0;
  v4 = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40);
  if (!v4 || ((*(unsigned __int8 *)(v4 + a3 / 8 + 12) >> (a3 & 7)) & 1) == 0)
    return 0;
  v6 = (_QWORD *)(v4 + 48);
  v7 = 8 * *(unsigned int *)(v4 + 8) - 8 * *(unsigned int *)(v4 + 32);
  if (v7)
  {
    v8 = v7 >> 3;
    do
    {
      v9 = v8 >> 1;
      v10 = &v6[v8 >> 1];
      v11 = *v10;
      if (*v10)
        LODWORD(v11) = *(_DWORD *)(v11 + 12);
      v12 = v10 + 1;
      v8 += ~v9;
      if ((int)v11 < a3)
        v6 = v12;
      else
        v8 = v9;
    }
    while (v8);
  }
  return *v6;
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, _QWORD *a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int i;
  int v13;
  uint64_t v14;
  const void *v15;

  v4 = *a1;
  if (!*a1)
    return 0;
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(v5 + 40);
  if (!v6)
    return 0;
  v9 = *(_QWORD *)(v5 + 24);
  v10 = sub_1C5E3DF4C(a3, (uint64_t)a3 + a4);
  v11 = v6 - 1;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v11;
    v14 = v9 + 24 * (v10 & v11);
    v15 = *(const void **)v14;
    if (*(_QWORD *)v14 == -1)
    {
      if (a3 == (_QWORD *)-1)
        return *(_QWORD *)(v14 + 16);
      goto LABEL_8;
    }
    if (v15 != (const void *)-2)
      break;
    if (a3 == (_QWORD *)-2)
      return *(_QWORD *)(v14 + 16);
LABEL_8:
    if (v15 == (const void *)-1)
      return 0;
    v10 = i + v13;
  }
  if (a4 != *(_QWORD *)(v14 + 8) || a4 && memcmp(a3, *(const void **)v14, a4))
    goto LABEL_8;
  return *(_QWORD *)(v14 + 16);
}

uint64_t llvm::AttributeList::getRetAlignment(llvm::AttributeList *this)
{
  uint64_t v1;
  llvm::AttributeSetNode *v2;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | ((_DWORD)v1 << 8);
  }
  v2 = *(llvm::AttributeSetNode **)(v1 + 48);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | ((_DWORD)v1 << 8);
}

uint64_t llvm::AttributeList::getParamAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  llvm::AttributeSetNode *v3;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
    LODWORD(v2) = 0;
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 | ((_DWORD)v2 << 8);
  }
  v3 = *(llvm::AttributeSetNode **)(v2 + 8 * (a2 + 2) + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getAlignment(v3);
    LODWORD(v2) = BYTE1(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v3 | ((_DWORD)v2 << 8);
}

uint64_t llvm::AttributeList::getParamStackAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  llvm::AttributeSetNode *v3;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
    LODWORD(v2) = 0;
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 | ((_DWORD)v2 << 8);
  }
  v3 = *(llvm::AttributeSetNode **)(v2 + 8 * (a2 + 2) + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getStackAlignment(v3);
    LODWORD(v2) = BYTE1(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v3 | ((_DWORD)v2 << 8);
}

uint64_t llvm::AttributeList::getParamByValType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(_BYTE *)(v3 + 20) & 0x20) == 0)
    return 0;
  v5 = (uint64_t *)(v3 + 48);
  v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[v7 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 69)
        v5 = v11;
      else
        v7 = v8;
    }
    while (v7);
  }
  v12 = *v5;
  if (v12)
    return *(_QWORD *)(v12 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeList::getParamStructRetType(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(_BYTE *)(v3 + 21) & 2) == 0)
    return 0;
  v5 = (uint64_t *)(v3 + 48);
  v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[v7 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 73)
        v5 = v11;
      else
        v7 = v8;
    }
    while (v7);
  }
  v12 = *v5;
  if (v12)
    return *(_QWORD *)(v12 + 16);
  else
    return 0;
}

uint64_t llvm::AttributeList::getFnStackAlignment(llvm::AttributeList *this)
{
  uint64_t v1;
  llvm::AttributeSetNode *v2;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if (!*(_DWORD *)(v1 + 8))
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | ((_DWORD)v1 << 8);
  }
  v2 = *(llvm::AttributeSetNode **)(v1 + 40);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getStackAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | ((_DWORD)v1 << 8);
}

uint64_t llvm::AttributeList::getRetStackAlignment(llvm::AttributeList *this)
{
  uint64_t v1;
  llvm::AttributeSetNode *v2;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | ((_DWORD)v1 << 8);
  }
  v2 = *(llvm::AttributeSetNode **)(v1 + 48);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getStackAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | ((_DWORD)v1 << 8);
}

uint64_t llvm::AttributeList::getRetDereferenceableBytes(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t EnumAttribute;
  char v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v1 + 8) < 2u)
    return 0;
  result = *(_QWORD *)(v1 + 48);
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 76);
    if (v4)
      return *(_QWORD *)(EnumAttribute + 16);
    return 0;
  }
  return result;
}

uint64_t llvm::AttributeList::getParamDereferenceableBytes(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  v3 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v3 || (*(_BYTE *)(v3 + 21) & 0x10) == 0)
    return 0;
  v5 = (_QWORD *)(v3 + 48);
  v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[v7 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 76)
        v5 = v11;
      else
        v7 = v8;
    }
    while (v7);
  }
  return *(_QWORD *)(*v5 + 16);
}

uint64_t llvm::AttributeList::getRetDereferenceableOrNullBytes(llvm::AttributeList *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t EnumAttribute;
  char v4;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v1 + 8) < 2u)
    return 0;
  result = *(_QWORD *)(v1 + 48);
  if (result)
  {
    EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 77);
    if (v4)
      return *(_QWORD *)(EnumAttribute + 16);
    return 0;
  }
  return result;
}

uint64_t llvm::AttributeList::getParamDereferenceableOrNullBytes(llvm::AttributeList *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
    return 0;
  v4 = *(_QWORD *)(v2 + 8 * (a2 + 2) + 40);
  if (!v4 || (*(_BYTE *)(v4 + 21) & 0x20) == 0)
    return 0;
  v5 = (_QWORD *)(v4 + 48);
  v6 = 8 * *(unsigned int *)(v4 + 8) - 8 * *(unsigned int *)(v4 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[v7 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 77)
        v5 = v11;
      else
        v7 = v8;
    }
    while (v7);
  }
  return *(_QWORD *)(*v5 + 16);
}

void llvm::AttributeList::getAsString(llvm::AttributeList *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  llvm::AttributeSetNode *v5;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this
    && (a2 + 1) < *(_DWORD *)(v4 + 8)
    && (v5 = *(llvm::AttributeSetNode **)(v4 + 8 * (a2 + 1) + 40)) != 0)
  {
    llvm::AttributeSetNode::getAsString(v5, a3, (std::string *)a4);
  }
  else
  {
    *(_BYTE *)(a4 + 23) = 0;
    *(_BYTE *)a4 = 0;
  }
}

BOOL llvm::AttributeList::hasParentContext(llvm::AttributeList *this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  _BYTE v22[128];
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x2000000000;
  v4 = *(unsigned int *)(*(_QWORD *)this + 8);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = 0;
    v6 = (uint64_t *)(*(_QWORD *)this + 40);
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (v5 >= HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v5 + 1, 4);
        LODWORD(v5) = v21;
      }
      *((_DWORD *)v20 + v5) = v8;
      v9 = (v21 + 1);
      LODWORD(v21) = v9;
      if (v9 >= HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v9 + 1, 4);
        LODWORD(v9) = v21;
      }
      *((_DWORD *)v20 + v9) = HIDWORD(v8);
      v5 = (v21 + 1);
      LODWORD(v21) = v21 + 1;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    v10 = v20;
  }
  else
  {
    v5 = 0;
    v10 = v22;
  }
  v11 = *(_QWORD *)a2;
  v12 = sub_1C4F5AB38(v10, (uint64_t)v10 + 4 * v5);
  v14 = *(_QWORD *)(v11 + 240);
  v13 = v11 + 240;
  v15 = *(_QWORD *)(v14 + 8 * ((*(_DWORD *)(v13 + 8) - 1) & v12));
  v23 = v25;
  v24 = 0x2000000000;
  if (v15)
    v16 = (v15 & 1) == 0;
  else
    v16 = 0;
  if (v16)
  {
    while (!sub_1C5331F98(v13, v15, (uint64_t)&v20, v12, (uint64_t)&v23))
    {
      LODWORD(v24) = 0;
      v15 = *(_QWORD *)v15;
      if (v15)
        v17 = (v15 & 1) == 0;
      else
        v17 = 0;
      if (!v17)
      {
        v15 = 0;
        break;
      }
    }
    if (v23 != v25)
      free(v23);
  }
  else
  {
    v15 = 0;
  }
  v18 = *(_QWORD *)this;
  if (v20 != v22)
    free(v20);
  return v15 == v18;
}

void llvm::AttributeList::print(llvm::AttributeList *this, llvm::raw_ostream *a2)
{
  void *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _DWORD *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  _DWORD *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::AttributeSetNode *v21;
  char v22;
  BOOL v23;
  std::string *p_p;
  std::string::size_type v25;
  std::string::size_type size;
  llvm::raw_ostream *v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  std::string __p;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0xEuLL)
  {
    qmemcpy(v4, "AttributeList[\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "AttributeList[\n", 0xFuLL);
  }
  if (*(_QWORD *)this)
  {
    v5 = *(_DWORD *)(*(_QWORD *)this + 8);
    if (v5)
    {
      v6 = 0;
      v7 = 40;
      while (1)
      {
        v8 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          if (v6 < *(_DWORD *)(v8 + 8) && *(_QWORD *)(v8 + v7))
            break;
        }
LABEL_39:
        ++v6;
        v7 += 8;
        if (v5 == v6)
          goto LABEL_49;
      }
      v9 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 3uLL)
      {
        *v9 = 544940064;
        *((_QWORD *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  { ", 4uLL);
      }
      if (v6)
      {
        if (v6 != 1)
        {
          v15 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 3uLL)
          {
            *v15 = 677868129;
            *((_QWORD *)a2 + 4) += 4;
            v16 = a2;
          }
          else
          {
            v16 = llvm::raw_ostream::write(a2, "arg(", 4uLL);
          }
          sub_1C5E21910(v16, v6 - 2, 0, 0, 0);
          v17 = (_BYTE *)*((_QWORD *)v16 + 4);
          if (*((_BYTE **)v16 + 3) == v17)
          {
            v11 = v16;
            v12 = ")";
            v13 = 1;
            goto LABEL_21;
          }
          *v17 = 41;
          ++*((_QWORD *)v16 + 4);
LABEL_22:
          v18 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v18 > 3uLL)
          {
            *v18 = 540949792;
            *((_QWORD *)a2 + 4) += 4;
            v19 = a2;
          }
          else
          {
            v19 = llvm::raw_ostream::write(a2, " => ", 4uLL);
          }
          v20 = *(_QWORD *)this;
          if (*(_QWORD *)this && v6 < *(_DWORD *)(v20 + 8) && (v21 = *(llvm::AttributeSetNode **)(v20 + v7)) != 0)
          {
            llvm::AttributeSetNode::getAsString(v21, 0, &__p);
            v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v22 = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
            __p.__r_.__value_.__s.__data_[0] = 0;
          }
          v23 = v22 < 0;
          if (v22 >= 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v25 = v22 & 0x7F;
          if (v23)
            size = __p.__r_.__value_.__l.__size_;
          else
            size = v25;
          v27 = llvm::raw_ostream::write(v19, (const char *)p_p, size);
          v28 = *((_QWORD *)v27 + 4);
          if ((unint64_t)(*((_QWORD *)v27 + 3) - v28) > 2)
          {
            *(_BYTE *)(v28 + 2) = 10;
            *(_WORD *)v28 = 32032;
            *((_QWORD *)v27 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v27, " }\n", 3uLL);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_39;
        }
        v10 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) <= 5)
        {
          v11 = a2;
          v12 = "return";
          v13 = 6;
LABEL_21:
          llvm::raw_ostream::write(v11, v12, v13);
          goto LABEL_22;
        }
        *(_WORD *)(v10 + 4) = 28274;
        *(_DWORD *)v10 = 1970562418;
        v29 = *((_QWORD *)a2 + 4) + 6;
      }
      else
      {
        v14 = (_QWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 7uLL)
        {
          v11 = a2;
          v12 = "function";
          v13 = 8;
          goto LABEL_21;
        }
        *v14 = 0x6E6F6974636E7566;
        v29 = *((_QWORD *)a2 + 4) + 8;
      }
      *((_QWORD *)a2 + 4) = v29;
      goto LABEL_22;
    }
  }
LABEL_49:
  v30 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v30 > 1uLL)
  {
    *v30 = 2653;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "]\n", 2uLL);
  }
}

uint64_t sub_1C532EADC(uint64_t result, void *__s2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v7 = result;
  v8 = *(uint64_t **)result;
  v9 = *(unsigned int *)(result + 8);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)result;
    do
    {
      v11 = &v10[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      result = sub_1C5331648((int)&v18, v13, __s2, a3);
      if ((_DWORD)result)
        v9 += ~(v9 >> 1);
      else
        v9 >>= 1;
      if ((_DWORD)result)
        v10 = v12;
    }
    while (v9);
    v8 = *(uint64_t **)v7;
    LODWORD(v9) = *(_DWORD *)(v7 + 8);
  }
  else
  {
    v10 = *(uint64_t **)result;
  }
  v14 = v9;
  if (v10 == &v8[v9])
  {
    if (v9 >= *(_DWORD *)(v7 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v7 + 16, v9 + 1, 8);
      v8 = *(uint64_t **)v7;
      v14 = *(unsigned int *)(v7 + 8);
    }
    v8[v14] = a4;
    ++*(_DWORD *)(v7 + 8);
  }
  else
  {
    result = llvm::Attribute::hasAttribute(v10, __s2, a3);
    if ((_DWORD)result)
    {
      *v10 = a4;
    }
    else
    {
      v15 = v10 - v8;
      if (v9 >= *(_DWORD *)(v7 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v7 + 16, v9 + 1, 8);
        v8 = *(uint64_t **)v7;
        v14 = *(unsigned int *)(v7 + 8);
        LODWORD(v9) = *(_DWORD *)(v7 + 8);
      }
      v16 = &v8[v15];
      v8[v14] = v8[v14 - 1];
      v17 = *(_QWORD *)v7 + 8 * v14 - 8;
      if ((uint64_t *)v17 != v16)
      {
        result = (uint64_t)memmove(v16 + 1, v16, v17 - (_QWORD)v16);
        LODWORD(v9) = *(_DWORD *)(v7 + 8);
      }
      *(_DWORD *)(v7 + 8) = v9 + 1;
      *v16 = a4;
    }
  }
  return result;
}

unsigned int *sub_1C532EC68(unsigned int *result, int a2, uint64_t a3)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = result;
  v5 = *(_QWORD **)result;
  v6 = result[2];
  v7 = *(uint64_t **)result;
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)result;
    v8 = result[2];
    while (1)
    {
      v9 = v8 >> 1;
      v10 = &v7[v8 >> 1];
      v11 = *v10;
      if (!*v10)
        goto LABEL_6;
      if (*(_BYTE *)(v11 + 8) != 2)
        break;
LABEL_8:
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    LODWORD(v11) = *(_DWORD *)(v11 + 12);
LABEL_6:
    v12 = v10 + 1;
    v13 = v8 + ~v9;
    if ((int)v11 < a2)
    {
      v9 = v13;
      v7 = v12;
    }
    goto LABEL_8;
  }
LABEL_9:
  if (v7 == &v5[v6])
  {
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
      v5 = *(_QWORD **)v4;
      v6 = v4[2];
    }
    v5[v6] = a3;
    ++v4[2];
  }
  else
  {
    v14 = *v7;
    if (*v7)
    {
      if (*(_BYTE *)(v14 + 8) != 2 && *(_DWORD *)(v14 + 12) == a2)
        goto LABEL_13;
    }
    else if (!a2)
    {
LABEL_13:
      *v7 = a3;
      return result;
    }
    v15 = v7 - v5;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
      v5 = *(_QWORD **)v4;
      v6 = v4[2];
    }
    v16 = &v5[v15];
    v5[v6] = v5[v6 - 1];
    v17 = *(_QWORD *)v4 + 8 * v6 - 8;
    if ((_QWORD *)v17 != v16)
    {
      result = (unsigned int *)memmove(v16 + 1, v16, v17 - (_QWORD)v16);
      LODWORD(v6) = v4[2];
    }
    v4[2] = v6 + 1;
    *v16 = a3;
  }
  return result;
}

uint64_t llvm::AttrBuilder::getRawIntAttr(uint64_t a1, int a2)
{
  uint64_t result;

  result = llvm::AttrBuilder::getAttribute(a1, a2);
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 8);
    v4 = *(unsigned int *)(a1 + 16);
    while (1)
    {
      v5 = v4 >> 1;
      v6 = &v3[v4 >> 1];
      v7 = *v6;
      if (!*v6)
        goto LABEL_6;
      if (*(_BYTE *)(v7 + 8) != 2)
        break;
LABEL_8:
      v4 = v5;
      if (!v5)
        goto LABEL_11;
    }
    LODWORD(v7) = *(_DWORD *)(v7 + 12);
LABEL_6:
    v8 = v6 + 1;
    v9 = v4 + ~v5;
    if ((int)v7 < a2)
    {
      v5 = v9;
      v3 = v8;
    }
    goto LABEL_8;
  }
  v3 = *(uint64_t **)(a1 + 8);
LABEL_11:
  if (v3 == (uint64_t *)(*(_QWORD *)(a1 + 8) + 8 * v2))
    return 0;
  result = *v3;
  if (!*v3)
  {
    if (!a2)
      return result;
    return 0;
  }
  if (*(_BYTE *)(result + 8) == 2 || *(_DWORD *)(result + 12) != a2)
    return 0;
  return result;
}

uint64_t llvm::AttrBuilder::addRawIntAttr(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4;
  int v5;

  v4 = llvm::Attribute::get(*(uint64_t **)a1, a2, a3);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 8) == 2)
    {
      sub_1C532EADC(a1 + 8, (void *)(v4 + 24), *(unsigned int *)(v4 + 12), v4);
      return a1;
    }
    v5 = *(_DWORD *)(v4 + 12);
  }
  else
  {
    v5 = 0;
  }
  sub_1C532EC68((unsigned int *)(a1 + 8), v5, v4);
  return a1;
}

uint64_t llvm::AttrBuilder::getAllocSizeArgs(llvm::AttrBuilder *this)
{
  uint64_t Attribute;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v7;

  Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, 75);
  if (Attribute)
    v2 = *(_QWORD *)(Attribute + 16);
  else
    v2 = 0;
  v3 = HIDWORD(v2);
  v4 = v2 == 0xFFFFFFFFLL;
  v5 = v2 & 0xFFFFFF00;
  LODWORD(v2) = v2;
  LODWORD(v7) = v3;
  if (v4)
    LODWORD(v2) = 0;
  HIDWORD(v7) = v2 | v5;
  return v7;
}

unint64_t llvm::AttrBuilder::getVScaleRangeMin(llvm::AttrBuilder *this)
{
  uint64_t Attribute;
  unint64_t v2;

  Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, 80);
  if (Attribute)
    v2 = *(_QWORD *)(Attribute + 16);
  else
    v2 = 0;
  return HIDWORD(v2);
}

uint64_t llvm::AttrBuilder::getVScaleRangeMax(llvm::AttrBuilder *this)
{
  uint64_t Attribute;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL8 v5;
  int v6;
  __int128 v8;
  uint64_t v9;

  Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, 80);
  if (Attribute)
    v2 = *(_QWORD *)(Attribute + 16);
  else
    v2 = 0;
  v3 = HIDWORD(v2);
  v4 = v2 == 0;
  v5 = v2 != 0;
  v6 = v2 & 0xFFFFFF00;
  LODWORD(v2) = v2;
  LODWORD(v9) = v3;
  if (v4)
    LODWORD(v2) = 0;
  HIDWORD(v9) = v2 | v6;
  *((_QWORD *)&v8 + 1) = v5;
  *(_QWORD *)&v8 = v9;
  return v8 >> 32;
}

uint64_t llvm::AttrBuilder::addAlignmentAttr(uint64_t a1, __int16 a2)
{
  unint64_t v3;
  int v4;

  if ((a2 & 0xFF00) != 0)
  {
    v3 = llvm::Attribute::get(*(uint64_t **)a1, 74, 1 << a2);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 8) == 2)
      {
        sub_1C532EADC(a1 + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
        return a1;
      }
      v4 = *(_DWORD *)(v3 + 12);
    }
    else
    {
      v4 = 0;
    }
    sub_1C532EC68((unsigned int *)(a1 + 8), v4, v3);
  }
  return a1;
}

uint64_t **llvm::AttrBuilder::addStackAlignmentAttr(uint64_t **result, __int16 a2)
{
  unint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF00) != 0)
  {
    v3 = (uint64_t)result;
    v2 = llvm::Attribute::get(*result, 78, 1 << a2);
    llvm::AttrBuilder::addAttribute(v3, v2);
    return (uint64_t **)v3;
  }
  return result;
}

llvm::AttrBuilder *llvm::AttrBuilder::addStructRetAttr(llvm::AttrBuilder *this, llvm::Type *a2)
{
  unint64_t v3;
  int v4;

  v3 = llvm::Attribute::get(*(uint64_t **)this, 73, (uint64_t)a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      sub_1C532EADC((uint64_t)this + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v4 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v4 = 0;
  }
  sub_1C532EC68((unsigned int *)this + 2, v4, v3);
  return this;
}

llvm::AttrBuilder *llvm::AttrBuilder::addPreallocatedAttr(llvm::AttrBuilder *this, llvm::Type *a2)
{
  unint64_t v3;
  int v4;

  v3 = llvm::Attribute::get(*(uint64_t **)this, 72, (uint64_t)a2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 8) == 2)
    {
      sub_1C532EADC((uint64_t)this + 8, (void *)(v3 + 24), *(unsigned int *)(v3 + 12), v3);
      return this;
    }
    v4 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v4 = 0;
  }
  sub_1C532EC68((unsigned int *)this + 2, v4, v3);
  return this;
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  char v15;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v8 = *(uint64_t **)(a1 + 8);
    do
    {
      v9 = &v8[v6 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = sub_1C5331648((int)&v15, v11, a2, a3);
      if (v12)
        v6 += ~(v6 >> 1);
      else
        v6 >>= 1;
      if (v12)
        v8 = v10;
    }
    while (v6);
    v5 = *(_QWORD *)(a1 + 8);
    v13 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v13 = 0;
    v8 = *(uint64_t **)(a1 + 8);
  }
  if (v8 == (uint64_t *)(v5 + 8 * v13) || !llvm::Attribute::hasAttribute(v8, a2, a3))
    return 0;
  else
    return *v8;
}

BOOL llvm::AttrBuilder::contains(uint64_t a1, int a2)
{
  return llvm::AttrBuilder::getAttribute(a1, a2) != 0;
}

BOOL llvm::AttrBuilder::contains(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL8 result;
  char v15;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v8 = *(uint64_t **)(a1 + 8);
    do
    {
      v9 = &v8[v6 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v12 = sub_1C5331648((int)&v15, v11, a2, a3);
      if (v12)
        v6 += ~(v6 >> 1);
      else
        v6 >>= 1;
      if (v12)
        v8 = v10;
    }
    while (v6);
    v5 = *(_QWORD *)(a1 + 8);
    v13 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v13 = 0;
    v8 = *(uint64_t **)(a1 + 8);
  }
  if (v8 == (uint64_t *)(v5 + 8 * v13))
    return 0;
  result = llvm::Attribute::hasAttribute(v8, a2, a3);
  if (result)
    return *v8 != 0;
  return result;
}

uint64_t llvm::AttributeFuncs::typeIncompatible@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v3 = 0;
  v4 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[4] = 0;
  a3[3] = 0;
  a3[2] = (uint64_t)(a3 + 3);
  v5 = *(unsigned __int8 *)(result + 8);
  if (v5 != 13)
  {
    if ((a2 & 1) != 0)
    {
      v4 = 2;
      *a3 = 2;
      if ((a2 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      if ((a2 & 2) != 0)
      {
LABEL_4:
        v4 |= 0x1000000000000uLL;
        v3 = 8;
        *a3 = v4;
        a3[1] = 8;
        goto LABEL_7;
      }
    }
    v3 = 0;
LABEL_7:
    if (v5 == 15)
      goto LABEL_12;
  }
  if ((a2 & 1) != 0)
  {
    v4 |= 0x308000480000uLL;
    v3 |= 0x3000uLL;
    *a3 = v4;
    a3[1] = v3;
  }
  if ((a2 & 2) != 0)
  {
    v4 |= 0x8000000000040000;
    v3 |= 0x3F0uLL;
    *a3 = v4;
    a3[1] = v3;
  }
LABEL_12:
  v6 = v5;
  if ((v5 & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(result + 16) + 8);
  if ((a2 & 1) != 0 && v6 != 15)
    a3[1] = v3 | 0x400;
  if ((a2 & 1) != 0 && v5 == 7)
    *a3 = v4 | 0x1000000000;
  return result;
}

double llvm::AttributeFuncs::getUBImplyingAttributes@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)&result = 0x1000000000;
  *(_OWORD *)a1 = xmmword_1C85FC8D0;
  return result;
}

uint64_t llvm::AttributeFuncs::areOutlineCompatible(llvm::AttributeFuncs *this, const llvm::Function *a2, const llvm::Function *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  const char **v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  size_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int j;
  int v46;
  uint64_t v47;
  const void *v48;
  int v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned int v56;
  int k;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int m;
  int v66;
  uint64_t v67;
  const void *v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t AttributeAtIndex;
  uint64_t *v101;
  uint64_t *v102;

  v5 = (uint64_t *)((char *)this + 112);
  AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)this + 14, -1, 50);
  v6 = (uint64_t *)((char *)a2 + 112);
  v99 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 50);
  v98 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 54);
  v97 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 54);
  v96 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 53);
  v95 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 53);
  v94 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 51);
  v93 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 51);
  v92 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 52);
  v91 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 52);
  v90 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 49);
  v89 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 49);
  v101 = v5;
  v88 = llvm::AttributeList::getAttributeAtIndex(v5, -1, 55);
  v102 = v6;
  v87 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 55);
  v7 = *((_QWORD *)this + 14);
  if (!v7 || !*(_DWORD *)(v7 + 8) || (v8 = *(_QWORD *)(v7 + 40)) == 0 || (v9 = *(_DWORD *)(v8 + 40)) == 0)
  {
LABEL_24:
    v86 = 0;
    goto LABEL_25;
  }
  v10 = *(_QWORD *)(v8 + 24);
  v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v81 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v81 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v81;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v12 = __ROR8__(qword_1ED7EAC80 ^ 0x3A4251CF5CABDDE3, 30);
  v13 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                    * ((v12 - 0x3222A10545348927) ^ (qword_1ED7EAC80
                                                                                     + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v12 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))));
  v14 = -348639895 * ((v13 >> 47) ^ v13);
  for (i = 1; ; ++i)
  {
    v16 = v14 & (v9 - 1);
    v17 = (uint64_t *)(v10 + 24 * v16);
    v18 = *v17;
    if (*v17 == -1)
    {
      if ("use-sample-profile" == (char *)-1)
        goto LABEL_23;
      goto LABEL_9;
    }
    if (v18 != -2)
      break;
    if ("use-sample-profile" == (char *)-2)
      goto LABEL_23;
LABEL_9:
    if (v18 == -1)
      goto LABEL_24;
    v14 = i + v16;
  }
  if (v17[1] != 18)
    goto LABEL_9;
  v19 = *(_QWORD *)v18 == 0x706D61732D657375 && *(_QWORD *)(v18 + 8) == 0x69666F72702D656CLL;
  if (!v19 || *(_WORD *)(v18 + 16) != 25964)
    goto LABEL_9;
LABEL_23:
  v86 = v17[2];
LABEL_25:
  v21 = *v6;
  if (!*v6 || !*(_DWORD *)(v21 + 8) || (v22 = *(_QWORD *)(v21 + 40)) == 0 || (v23 = *(_DWORD *)(v22 + 40)) == 0)
  {
LABEL_48:
    v85 = 0;
    goto LABEL_49;
  }
  v24 = *(_QWORD *)(v22 + 24);
  v25 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v82 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v82 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v82;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v26 = __ROR8__(qword_1ED7EAC80 ^ 0x3A4251CF5CABDDE3, 30);
  v27 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                    * ((v26 - 0x3222A10545348927) ^ (qword_1ED7EAC80
                                                                                     + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v26 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))));
  v28 = -348639895 * ((v27 >> 47) ^ v27);
  v29 = 1;
  while (2)
  {
    v30 = v28 & (v23 - 1);
    v31 = (uint64_t *)(v24 + 24 * v30);
    v32 = *v31;
    if (*v31 == -1)
    {
      if ("use-sample-profile" == (char *)-1)
        break;
      goto LABEL_33;
    }
    if (v32 == -2)
    {
      if ("use-sample-profile" == (char *)-2)
        break;
      goto LABEL_33;
    }
    if (v31[1] != 18
      || (*(_QWORD *)v32 == 0x706D61732D657375 ? (v33 = *(_QWORD *)(v32 + 8) == 0x69666F72702D656CLL) : (v33 = 0),
          v33 ? (v34 = *(unsigned __int16 *)(v32 + 16) == 25964) : (v34 = 0),
          !v34))
    {
LABEL_33:
      if (v32 == -1)
        goto LABEL_48;
      v28 = v29 + v30;
      ++v29;
      continue;
    }
    break;
  }
  v85 = v31[2];
LABEL_49:
  v84 = llvm::AttributeList::getAttributeAtIndex(v101, -1, 29);
  v83 = llvm::AttributeList::getAttributeAtIndex(v6, -1, 29);
  v35 = (const char **)off_1E814DEC8;
  do
  {
    v36 = (char *)*v35;
    if (*v35)
    {
      v37 = strlen(*v35);
      v38 = *v101;
      if (*v101)
      {
        if (*(_DWORD *)(v38 + 8))
        {
          v39 = *(_QWORD *)(v38 + 40);
          if (v39)
          {
            v40 = *(_DWORD *)(v39 + 40);
            if (v40)
            {
              v41 = v37;
              v42 = *(_QWORD *)(v39 + 24);
              v43 = sub_1C5E3DF4C(v36, (uint64_t)&v36[v37]);
              v44 = v40 - 1;
              for (j = 1; ; ++j)
              {
                v46 = v43 & v44;
                v47 = v42 + 24 * (v43 & v44);
                v48 = *(const void **)v47;
                if (*(_QWORD *)v47 == -1)
                {
                  if (v36 == (char *)-1)
                    goto LABEL_66;
                }
                else if (v48 == (const void *)-2)
                {
                  if (v36 == (char *)-2)
                    goto LABEL_66;
                }
                else if (v41 == *(_QWORD *)(v47 + 8) && (!v41 || !memcmp(v36, v48, v41)))
                {
LABEL_66:
                  v49 = 1;
                  goto LABEL_68;
                }
                if (v48 == (const void *)-1)
                  break;
                v43 = j + v46;
              }
            }
          }
        }
      }
      v49 = 0;
LABEL_68:
      v50 = strlen(v36);
    }
    else
    {
      v51 = *v101;
      if (*v101 && *(_DWORD *)(v51 + 8) && (v52 = *(_QWORD *)(v51 + 40)) != 0 && (v53 = *(_DWORD *)(v52 + 40)) != 0)
      {
        v54 = *(_QWORD *)(v52 + 24);
        v55 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v70 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v70 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v70;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v56 = qword_1ED7EAC80 ^ 0x2F90404F;
        for (k = 1; ; ++k)
        {
          v58 = v56 & (v53 - 1);
          v59 = (_QWORD *)(v54 + 24 * v58);
          if (*v59 <= 0xFFFFFFFFFFFFFFFDLL && !v59[1])
            break;
          if (*v59 == -1)
            goto LABEL_80;
          v56 = k + v58;
        }
        v36 = 0;
        v50 = 0;
        v49 = 1;
      }
      else
      {
LABEL_80:
        v49 = 0;
        v36 = 0;
        v50 = 0;
      }
    }
    v60 = *v102;
    if (*v102)
    {
      if (!*(_DWORD *)(v60 + 8))
        goto LABEL_97;
      v60 = *(_QWORD *)(v60 + 40);
      if (v60)
      {
        v61 = *(_DWORD *)(v60 + 40);
        if (v61)
        {
          v62 = *(_QWORD *)(v60 + 24);
          v63 = sub_1C5E3DF4C(v36, (uint64_t)&v36[v50]);
          v64 = v61 - 1;
          for (m = 1; ; ++m)
          {
            v66 = v63 & v64;
            v67 = v62 + 24 * (v63 & v64);
            v68 = *(const void **)v67;
            if (*(_QWORD *)v67 == -1)
            {
              if (v36 == (char *)-1)
                goto LABEL_96;
            }
            else if (v68 == (const void *)-2)
            {
              if (v36 == (char *)-2)
                goto LABEL_96;
            }
            else if (v50 == *(_QWORD *)(v67 + 8) && (!v50 || !memcmp(v36, v68, v50)))
            {
LABEL_96:
              LODWORD(v60) = 1;
              goto LABEL_98;
            }
            if (v68 == (const void *)-1)
              break;
            v63 = m + v66;
          }
        }
LABEL_97:
        LODWORD(v60) = 0;
      }
    }
LABEL_98:
    v69 = v49 ^ v60;
    if ((v69 & 1) != 0)
      break;
    ++v35;
  }
  while (v35 != (const char **)off_1E814DEE0);
  v71 = v69 ^ 1;
  if (AttributeAtIndex == v99
    && v98 == v97
    && v96 == v95
    && v94 == v93
    && v92 == v91
    && v90 == v89
    && v88 == v87
    && v86 == v85
    && v84 == v83)
  {
    return v71;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::AttributeFuncs::mergeAttributesForOutlining(llvm::AttributeFuncs *this, llvm::Function *a2, const llvm::Function *a3)
{
  llvm::AttributeList *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  unsigned int v17;
  int j;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  int k;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  unsigned int v45;
  int i;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int m;
  unsigned int v61;
  uint64_t *v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  int n;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  BOOL v80;
  BOOL v81;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned __int8 v89;
  unint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned __int8 v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  _QWORD *v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned int v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  unint64_t v123;
  BOOL v124;
  int v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  _QWORD *v131;
  int v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  int v146;
  int v147;
  unsigned int v148;
  unint64_t v149;
  _BOOL4 v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  _QWORD *v165;
  BOOL v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unsigned int v177;
  int ii;
  unsigned int v179;
  uint64_t v180;
  _QWORD *v181;
  BOOL v182;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  unsigned __int8 *v190;
  int v191;
  int v192;
  unsigned int v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t result;
  uint64_t v199;
  _BOOL4 v200;
  _QWORD *v201;
  int v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  unsigned __int8 *v211;
  int v212;
  int v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  _QWORD *v219;
  _QWORD v220[3];

  v5 = (llvm::AttributeFuncs *)((char *)this + 112);
  if (sub_1C53316CC(*((_QWORD *)this + 14), "less-precise-fpmad", 0x12uLL)
    && !sub_1C53316CC(*((_QWORD *)a2 + 14), "less-precise-fpmad", 0x12uLL))
  {
    *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "less-precise-fpmad", 0x12uLL, "false", 5uLL);
  }
  if (sub_1C53316CC(*(_QWORD *)v5, "no-infs-fp-math", 0xFuLL)
    && !sub_1C53316CC(*((_QWORD *)a2 + 14), "no-infs-fp-math", 0xFuLL))
  {
    *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-infs-fp-math", 0xFuLL, "false", 5uLL);
  }
  if (sub_1C53316CC(*(_QWORD *)v5, "no-nans-fp-math", 0xFuLL)
    && !sub_1C53316CC(*((_QWORD *)a2 + 14), "no-nans-fp-math", 0xFuLL))
  {
    *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-nans-fp-math", 0xFuLL, "false", 5uLL);
  }
  if (sub_1C53316CC(*(_QWORD *)v5, "approx-func-fp-math", 0x13uLL)
    && !sub_1C53316CC(*((_QWORD *)a2 + 14), "approx-func-fp-math", 0x13uLL))
  {
    *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "approx-func-fp-math", 0x13uLL, "false", 5uLL);
  }
  if (sub_1C53316CC(*(_QWORD *)v5, "no-signed-zeros-fp-math", 0x17uLL)
    && !sub_1C53316CC(*((_QWORD *)a2 + 14), "no-signed-zeros-fp-math", 0x17uLL))
  {
    *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-signed-zeros-fp-math", 0x17uLL, "false", 5uLL);
  }
  if (!sub_1C53316CC(*(_QWORD *)v5, "unsafe-fp-math", 0xEuLL)
    || sub_1C53316CC(*((_QWORD *)a2 + 14), "unsafe-fp-math", 0xEuLL))
  {
    v6 = *(_QWORD *)v5;
    if (!*(_QWORD *)v5)
      goto LABEL_22;
LABEL_21:
    if ((*(_BYTE *)(v6 + 15) & 4) != 0)
      goto LABEL_25;
    goto LABEL_22;
  }
  v6 = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "unsafe-fp-math", 0xEuLL, "false", 5uLL);
  *((_QWORD *)this + 14) = v6;
  if (v6)
    goto LABEL_21;
LABEL_22:
  v7 = *((_QWORD *)a2 + 14);
  if (v7 && (*(_BYTE *)(v7 + 15) & 4) != 0)
  {
    v6 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 26);
    *((_QWORD *)this + 14) = v6;
  }
LABEL_25:
  if (!sub_1C53316CC(v6, "no-jump-tables", 0xEuLL) && sub_1C53316CC(*((_QWORD *)a2 + 14), "no-jump-tables", 0xEuLL))
    *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "no-jump-tables", 0xEuLL, "true", 4uLL);
  if (sub_1C53316CC(*(_QWORD *)v5, "profile-sample-accurate", 0x17uLL)
    || !sub_1C53316CC(*((_QWORD *)a2 + 14), "profile-sample-accurate", 0x17uLL))
  {
    v8 = *(_QWORD *)v5;
  }
  else
  {
    v8 = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "profile-sample-accurate", 0x17uLL, "true", 4uLL);
    *((_QWORD *)this + 14) = v8;
  }
  v9 = &unk_1ED7EA000;
  if (!v8 || (*(_BYTE *)(v8 + 19) & 2) == 0)
  {
    v10 = *((_QWORD *)a2 + 14);
    if (v10 && (*(_BYTE *)(v10 + 19) & 2) != 0)
    {
      v8 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 57);
      v9 = &unk_1ED7EA000;
      *((_QWORD *)this + 14) = v8;
    }
    if (!v8)
      goto LABEL_38;
  }
  if ((*(_BYTE *)(v8 + 19) & 0x1C) != 0)
  {
    v36 = 0;
    v220[0] = 0;
    v220[1] = 0;
    v219 = v220;
    v218 = xmmword_1C85FC8E0;
    v37 = *((_QWORD *)a2 + 14);
    if (!v37)
      goto LABEL_89;
    v38 = *(_BYTE *)(v37 + 19);
    if ((v38 & 8) != 0)
    {
      v39 = 59;
    }
    else
    {
      if ((v38 & 0x10) == 0 || (*(_BYTE *)(v8 + 19) & 8) != 0)
      {
        if ((v38 & 4) == 0 || (*(_BYTE *)(v8 + 19) & 0x18) != 0)
        {
          v36 = 0;
LABEL_89:
          sub_1C5010E9C((uint64_t)&v219, v36);
          v8 = *(_QWORD *)v5;
          v9 = &unk_1ED7EA000;
          if (!*(_QWORD *)v5)
            goto LABEL_38;
          goto LABEL_90;
        }
        v39 = 58;
LABEL_85:
        *((_QWORD *)this + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, v39);
        v36 = (_QWORD *)v220[0];
        goto LABEL_89;
      }
      v39 = 60;
    }
    llvm::Function::removeFnAttrs((uint64_t)this, (uint64_t)&v218);
    goto LABEL_85;
  }
LABEL_90:
  if (*(_DWORD *)(v8 + 8))
  {
    v40 = *(_QWORD *)(v8 + 40);
    if (v40)
    {
      v41 = *(_DWORD *)(v40 + 40);
      if (v41)
      {
        v42 = *(_QWORD *)(v40 + 24);
        v43 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v43 & 1) == 0)
        {
          v134 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v9 = &unk_1ED7EA000;
          if (v134)
          {
            v135 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v135 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v135;
            __cxa_guard_release(&qword_1ED7EAC88);
            v9 = &unk_1ED7EA000;
          }
        }
        v44 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD9DE41094CE117DCLL)) ^ ((0x9DDFEA08EB382D69
                                                                                   * (qword_1ED7EAC80 ^ 0xD9DE41094CE117DCLL)) >> 47) ^ 0xADAD6C6C2E8E65ACLL);
        v45 = (-348639895 * ((v44 >> 47) ^ v44)) ^ 0x732D6562;
        for (i = 1; ; ++i)
        {
          v47 = v45 & (v41 - 1);
          v48 = v42 + 24 * v47;
          v49 = *(_QWORD **)v48;
          if (*(_QWORD *)v48 == -1)
          {
            if ("probe-stack" == (char *)-1)
              goto LABEL_108;
          }
          else if (v49 == (_QWORD *)-2)
          {
            if ("probe-stack" == (char *)-2)
              goto LABEL_108;
          }
          else if (*(_QWORD *)(v48 + 8) == 11
                 && *v49 == 0x74732D65626F7270
                 && *(_QWORD *)((char *)v49 + 3) == 0x6B636174732D6562)
          {
            goto LABEL_108;
          }
          if (v49 == (_QWORD *)-1)
            break;
          v45 = i + v47;
        }
      }
    }
  }
LABEL_38:
  v11 = *((_QWORD *)a2 + 14);
  if (!v11 || !*(_DWORD *)(v11 + 8) || (v12 = *(_QWORD *)(v11 + 40)) == 0 || (v13 = *(_DWORD *)(v12 + 40)) == 0)
  {
LABEL_108:
    v51 = *(_QWORD *)v5;
    goto LABEL_109;
  }
  v14 = *(_QWORD *)(v12 + 24);
  v15 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v15 & 1) == 0)
  {
    v127 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = &unk_1ED7EA000;
    if (v127)
    {
      v128 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v128 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v128;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = &unk_1ED7EA000;
    }
  }
  v16 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD9DE41094CE117DCLL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xD9DE41094CE117DCLL)) >> 47) ^ 0xADAD6C6C2E8E65ACLL);
  v17 = (-348639895 * ((v16 >> 47) ^ v16)) ^ 0x732D6562;
  for (j = 1; ; ++j)
  {
    v19 = v17 & (v13 - 1);
    v20 = v14 + 24 * v19;
    v21 = *(_QWORD **)v20;
    if (*(_QWORD *)v20 == -1)
    {
      if ("probe-stack" == (char *)-1)
        goto LABEL_57;
      goto LABEL_46;
    }
    if (v21 != (_QWORD *)-2)
      break;
    if ("probe-stack" == (char *)-2)
      goto LABEL_57;
LABEL_46:
    if (v21 == (_QWORD *)-1)
      goto LABEL_108;
    v17 = j + v19;
  }
  if (*(_QWORD *)(v20 + 8) != 11)
    goto LABEL_46;
  if (*v21 != 0x74732D65626F7270 || *(_QWORD *)((char *)v21 + 3) != 0x6B636174732D6562)
    goto LABEL_46;
LABEL_57:
  v23 = *((_QWORD *)a2 + 14);
  if (v23)
  {
    if (*(_DWORD *)(v23 + 8))
    {
      v24 = *(_QWORD *)(v23 + 40);
      if (v24)
      {
        v25 = *(_DWORD *)(v24 + 40);
        if (v25)
        {
          v26 = *(_QWORD *)(v24 + 24);
          v27 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v136 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v136 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v136;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v28 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD9DE41094CE117DCLL)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1ED7EAC80 ^ 0xD9DE41094CE117DCLL)) >> 47) ^ 0xADAD6C6C2E8E65ACLL);
          v29 = (-348639895 * ((v28 >> 47) ^ v28)) ^ 0x732D6562;
          for (k = 1; ; ++k)
          {
            v31 = v29 & (v25 - 1);
            v32 = v26 + 24 * v31;
            v33 = *(_QWORD **)v32;
            if (*(_QWORD *)v32 == -1)
            {
              if ("probe-stack" == (char *)-1)
                goto LABEL_76;
            }
            else if (v33 == (_QWORD *)-2)
            {
              if ("probe-stack" == (char *)-2)
                goto LABEL_76;
            }
            else if (*(_QWORD *)(v32 + 8) == 11
                   && *v33 == 0x74732D65626F7270
                   && *(_QWORD *)((char *)v33 + 3) == 0x6B636174732D6562)
            {
LABEL_76:
              v35 = *(_QWORD *)(v32 + 16);
              goto LABEL_216;
            }
            if (v33 == (_QWORD *)-1)
              break;
            v29 = k + v31;
          }
        }
      }
    }
  }
  v35 = 0;
LABEL_216:
  v51 = llvm::AttributeList::addAttributeAtIndex(v5, **(llvm::LLVMContext ***)this, -1, v35);
  *((_QWORD *)this + 14) = v51;
  v9 = &unk_1ED7EA000;
LABEL_109:
  if (v51)
  {
    if (*(_DWORD *)(v51 + 8))
    {
      v52 = *(_QWORD *)(v51 + 40);
      if (v52)
      {
        v53 = *(_DWORD *)(v52 + 40);
        if (v53)
        {
          v54 = *(_QWORD *)(v52 + 24);
          v55 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v55 & 1) == 0)
          {
            v125 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v9 = &unk_1ED7EA000;
            if (v125)
            {
              v126 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v126 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v126;
              __cxa_guard_release(&qword_1ED7EAC88);
              v9 = (_QWORD *)&unk_1ED7EA000;
            }
          }
          v56 = v9[400];
          v57 = __ROR8__(v56 ^ 0xABC84C55DF6D441, 30);
          v58 = 0x9DDFEA08EB382D69
              * ((v56 + 0x421125E725863753) ^ ((0x9DDFEA08EB382D69
                                                * ((v57 - 0x3D0443CB263770ABLL) ^ (v56 + 0x421125E725863753))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v57 - 0x3D0443CB263770ABLL) ^ (v56 + 0x421125E725863753))));
          v59 = -348639895 * ((v58 >> 47) ^ v58);
          for (m = 1; ; ++m)
          {
            v61 = v59 & (v53 - 1);
            v62 = (uint64_t *)(v54 + 24 * v61);
            v63 = *v62;
            if (*v62 == -1)
            {
              if ("darwin-stkchk-strong-link" == (char *)-1)
                goto LABEL_161;
            }
            else if (v63 == -2)
            {
              if ("darwin-stkchk-strong-link" == (char *)-2)
                goto LABEL_161;
            }
            else if (v62[1] == 25)
            {
              v64 = *(_QWORD *)v63 == 0x732D6E6977726164 && *(_QWORD *)(v63 + 8) == 0x74732D6B68636B74;
              v65 = v64 && *(_QWORD *)(v63 + 16) == 0x6E696C2D676E6F72;
              if (v65 && *(_BYTE *)(v63 + 24) == 107)
                goto LABEL_161;
            }
            if (v63 == -1)
              break;
            v59 = m + v61;
          }
        }
      }
    }
  }
  v67 = *((_QWORD *)a2 + 14);
  if (v67)
  {
    if (*(_DWORD *)(v67 + 8))
    {
      v68 = *(_QWORD *)(v67 + 40);
      if (v68)
      {
        v69 = *(_DWORD *)(v68 + 40);
        if (v69)
        {
          v70 = *(_QWORD *)(v68 + 24);
          v71 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v71 & 1) == 0)
          {
            v129 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v9 = &unk_1ED7EA000;
            if (v129)
            {
              v130 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v130 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v130;
              __cxa_guard_release(&qword_1ED7EAC88);
              v9 = (_QWORD *)&unk_1ED7EA000;
            }
          }
          v72 = v9[400];
          v73 = __ROR8__(v72 ^ 0xABC84C55DF6D441, 30);
          v74 = 0x9DDFEA08EB382D69
              * ((v72 + 0x421125E725863753) ^ ((0x9DDFEA08EB382D69
                                                * ((v73 - 0x3D0443CB263770ABLL) ^ (v72 + 0x421125E725863753))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v73 - 0x3D0443CB263770ABLL) ^ (v72 + 0x421125E725863753))));
          v75 = -348639895 * ((v74 >> 47) ^ v74);
          for (n = 1; ; ++n)
          {
            v77 = v75 & (v69 - 1);
            v78 = (uint64_t *)(v70 + 24 * v77);
            v79 = *v78;
            if (*v78 == -1)
            {
              if ("darwin-stkchk-strong-link" == (char *)-1)
                goto LABEL_160;
            }
            else if (v79 == -2)
            {
              if ("darwin-stkchk-strong-link" == (char *)-2)
                goto LABEL_160;
            }
            else if (v78[1] == 25)
            {
              v80 = *(_QWORD *)v79 == 0x732D6E6977726164 && *(_QWORD *)(v79 + 8) == 0x74732D6B68636B74;
              v81 = v80 && *(_QWORD *)(v79 + 16) == 0x6E696C2D676E6F72;
              if (v81 && *(_BYTE *)(v79 + 24) == 107)
              {
LABEL_160:
                v83 = v9;
                v84 = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)this, -1, "darwin-stkchk-strong-link", 0x19uLL, 0, 0);
                v9 = v83;
                *((_QWORD *)this + 14) = v84;
                break;
              }
            }
            if (v79 == -1)
              break;
            v75 = n + v77;
          }
        }
      }
    }
  }
LABEL_161:
  v85 = *((_QWORD *)a2 + 14);
  if (!v85)
    goto LABEL_275;
  if (!*(_DWORD *)(v85 + 8))
    goto LABEL_275;
  v86 = *(_QWORD *)(v85 + 40);
  if (!v86)
    goto LABEL_275;
  v87 = *(_DWORD *)(v86 + 40);
  if (!v87)
    goto LABEL_275;
  v88 = *(_QWORD *)(v86 + 24);
  v89 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v89 & 1) == 0)
  {
    v131 = v9;
    v132 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = v131;
    if (v132)
    {
      v133 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v133 = 0xFF51AFD7ED558CCDLL;
      v131[400] = v133;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = v131;
    }
  }
  v90 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9[400] ^ 0x100F48110A125916)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v9[400] ^ 0x100F48110A125916)) >> 47) ^ 0x627F657A69732D65);
  v91 = (-348639895 * ((v90 >> 47) ^ v90)) ^ 0x2D65626F;
  v92 = 1;
  while (2)
  {
    v93 = v91 & (v87 - 1);
    v94 = v88 + 24 * v93;
    v95 = *(_QWORD **)v94;
    if (*(_QWORD *)v94 == -1)
    {
      if ("stack-probe-size" == (char *)-1)
        break;
      goto LABEL_169;
    }
    if (v95 == (_QWORD *)-2)
    {
      if ("stack-probe-size" == (char *)-2)
        break;
      goto LABEL_169;
    }
    if (*(_QWORD *)(v94 + 8) != 16
      || (*v95 == 0x72702D6B63617473 ? (v96 = v95[1] == 0x657A69732D65626FLL) : (v96 = 0), !v96))
    {
LABEL_169:
      if (v95 == (_QWORD *)-1)
        goto LABEL_275;
      v91 = v92 + v93;
      ++v92;
      continue;
    }
    break;
  }
  v97 = *(_QWORD *)(v94 + 16);
  if (!v97)
    goto LABEL_275;
  v98 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5)
    goto LABEL_333;
  if (!*(_DWORD *)(v98 + 8))
    goto LABEL_333;
  v99 = *(_QWORD *)(v98 + 40);
  if (!v99)
    goto LABEL_333;
  v100 = *(_DWORD *)(v99 + 40);
  if (!v100)
    goto LABEL_333;
  v101 = *(_QWORD *)(v99 + 24);
  v102 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v102 & 1) == 0)
  {
    v216 = *(_QWORD *)(v94 + 16);
    v137 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v97 = v216;
    v9 = &unk_1ED7EA000;
    if (v137)
    {
      v138 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v138 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v138;
      __cxa_guard_release(&qword_1ED7EAC88);
      v97 = v216;
      v9 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v103 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v9[400] ^ 0x100F48110A125916)) ^ ((0x9DDFEA08EB382D69
                                                                      * (v9[400] ^ 0x100F48110A125916)) >> 47) ^ 0x627F657A69732D65);
  v104 = (-348639895 * ((v103 >> 47) ^ v103)) ^ 0x2D65626F;
  v105 = 1;
  while (2)
  {
    v106 = v104 & (v100 - 1);
    v107 = v101 + 24 * v106;
    v108 = *(_QWORD **)v107;
    if (*(_QWORD *)v107 == -1)
    {
      if ("stack-probe-size" == (char *)-1)
        break;
      goto LABEL_189;
    }
    if (v108 == (_QWORD *)-2)
    {
      if ("stack-probe-size" == (char *)-2)
        break;
      goto LABEL_189;
    }
    if (*(_QWORD *)(v107 + 8) != 16
      || (*v108 == 0x72702D6B63617473 ? (v109 = v108[1] == 0x657A69732D65626FLL) : (v109 = 0), !v109))
    {
LABEL_189:
      if (v108 == (_QWORD *)-1)
        goto LABEL_333;
      v104 = v105 + v106;
      ++v105;
      continue;
    }
    break;
  }
  v110 = *(_QWORD *)(v107 + 16);
  if (!v110)
    goto LABEL_333;
  v111 = v97;
  v112 = v9;
  v113 = *(unsigned int *)(v110 + 16);
  *(_QWORD *)&v218 = v110 + *(unsigned int *)(v110 + 12) + 25;
  *((_QWORD *)&v218 + 1) = v113;
  v114 = sub_1C5E3D4C0((uint64_t)&v218);
  v115 = BYTE8(v218);
  if (!*((_QWORD *)&v218 + 1))
  {
    v123 = 0;
    v124 = 1;
    v119 = v111;
    goto LABEL_250;
  }
  v116 = 0;
  v117 = *((_QWORD *)&v218 + 1);
  v118 = (unsigned __int8 *)v218;
  v119 = v111;
  while (2)
  {
    v120 = *v118;
    if ((v120 - 48) < 0xA)
    {
      v121 = -48;
LABEL_205:
      v122 = v121 + v120;
      if (v122 >= v114)
      {
        v123 = v116;
        goto LABEL_249;
      }
      v123 = v116 * v114 + v122;
      if (v123 / v114 < v116)
      {
        v115 = 1;
        v124 = 1;
        goto LABEL_250;
      }
      ++v118;
      v116 = v116 * v114 + v122;
      if (!--v117)
        goto LABEL_249;
      continue;
    }
    break;
  }
  if ((v120 - 97) < 0x1A)
  {
    v121 = -87;
LABEL_213:
    v119 = v111;
    goto LABEL_205;
  }
  if ((v120 - 65) <= 0x19)
  {
    v121 = -55;
    goto LABEL_213;
  }
  v123 = v116;
  v119 = v111;
LABEL_249:
  v124 = *((_QWORD *)&v218 + 1) == v117;
  v115 = v117 != 0;
LABEL_250:
  v139 = v115 | v124;
  v140 = *(unsigned int *)(v119 + 16);
  *(_QWORD *)&v218 = v119 + *(unsigned int *)(v119 + 12) + 25;
  *((_QWORD *)&v218 + 1) = v140;
  v141 = sub_1C5E3D4C0((uint64_t)&v218);
  v142 = DWORD2(v218);
  if (!*((_QWORD *)&v218 + 1))
  {
    v149 = 0;
    v150 = 1;
    v9 = v112;
    v97 = v111;
    goto LABEL_268;
  }
  v143 = 0;
  v144 = *((_QWORD *)&v218 + 1);
  v145 = (unsigned __int8 *)v218;
  v9 = v112;
  v97 = v111;
  while (2)
  {
    v146 = *v145;
    if ((v146 - 48) < 0xA)
    {
      v147 = -48;
LABEL_254:
      v148 = v147 + v146;
      if (v148 >= v141)
      {
        v149 = v143;
        goto LABEL_267;
      }
      v149 = v143 * v141 + v148;
      if (v149 / v141 < v143)
      {
        v142 = 1;
        v150 = 1;
        goto LABEL_268;
      }
      ++v145;
      v143 = v149;
      if (!--v144)
        goto LABEL_267;
      continue;
    }
    break;
  }
  if ((v146 - 97) < 0x1A)
  {
    v147 = -87;
LABEL_262:
    v9 = v112;
    v97 = v111;
    goto LABEL_254;
  }
  if ((v146 - 65) <= 0x19)
  {
    v147 = -55;
    goto LABEL_262;
  }
  v149 = v143;
  v9 = v112;
  v97 = v111;
LABEL_267:
  v150 = *((_QWORD *)&v218 + 1) == v144;
  v142 = v144 != 0;
LABEL_268:
  if (v142 | v150)
    v151 = 0;
  else
    v151 = v149;
  if (v123 <= v151)
    v152 = 1;
  else
    v152 = v139;
  if ((v152 & 1) != 0)
  {
LABEL_275:
    v153 = *(_QWORD *)v5;
    if (!*(_QWORD *)v5)
      goto LABEL_337;
    goto LABEL_276;
  }
LABEL_333:
  v195 = v9;
  v153 = llvm::AttributeList::addAttributeAtIndex(v5, **(llvm::LLVMContext ***)this, -1, v97);
  v9 = v195;
  *((_QWORD *)this + 14) = v153;
  if (!v153)
    goto LABEL_337;
LABEL_276:
  if (!*(_DWORD *)(v153 + 8))
    goto LABEL_337;
  v154 = *(_QWORD *)(v153 + 40);
  if (!v154)
    goto LABEL_337;
  v155 = *(_DWORD *)(v154 + 40);
  if (!v155)
    goto LABEL_337;
  v156 = *(_QWORD *)(v154 + 24);
  v157 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v157 & 1) == 0)
  {
    v201 = v9;
    v202 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = v201;
    if (v202)
    {
      v203 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v203 = 0xFF51AFD7ED558CCDLL;
      v201[400] = v203;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = v201;
    }
  }
  v158 = v9[400];
  v159 = __ROR8__(v158 ^ 0xCFA4117EE3121041, 30);
  v160 = 0x9DDFEA08EB382D69
       * ((v158 - 0x53DD633131DD66D6) ^ ((0x9DDFEA08EB382D69
                                          * ((v159 - 0x1284505D46BAD7E0) ^ (v158 - 0x53DD633131DD66D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v159 - 0x1284505D46BAD7E0) ^ (v158 - 0x53DD633131DD66D6))));
  v161 = -348639895 * ((v160 >> 47) ^ v160);
  v162 = 1;
  while (2)
  {
    v163 = v161 & (v155 - 1);
    v164 = v156 + 24 * v163;
    v165 = *(_QWORD **)v164;
    if (*(_QWORD *)v164 == -1)
    {
      if ("min-legal-vector-width" == (char *)-1)
        break;
      goto LABEL_283;
    }
    if (v165 == (_QWORD *)-2)
    {
      if ("min-legal-vector-width" == (char *)-2)
        break;
      goto LABEL_283;
    }
    if (*(_QWORD *)(v164 + 8) != 22
      || (*v165 == 0x6167656C2D6E696DLL ? (v166 = v165[1] == 0x726F746365762D6CLL) : (v166 = 0),
          v166 ? (v167 = *(_QWORD *)((char *)v165 + 14) == 0x68746469772D726FLL) : (v167 = 0),
          !v167))
    {
LABEL_283:
      if (v165 == (_QWORD *)-1)
        goto LABEL_337;
      v161 = v162 + v163;
      ++v162;
      continue;
    }
    break;
  }
  v168 = *(_QWORD *)(v164 + 16);
  if (!v168)
    goto LABEL_337;
  v169 = *((_QWORD *)a2 + 14);
  if (!v169)
    goto LABEL_335;
  if (!*(_DWORD *)(v169 + 8))
    goto LABEL_335;
  v170 = *(_QWORD *)(v169 + 40);
  if (!v170)
    goto LABEL_335;
  v171 = *(_DWORD *)(v170 + 40);
  if (!v171)
    goto LABEL_335;
  v172 = *(_QWORD *)(v170 + 24);
  v173 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v173 & 1) == 0)
  {
    v217 = v172;
    v204 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v172 = v217;
    v9 = &unk_1ED7EA000;
    if (v204)
    {
      v205 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v205 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v205;
      __cxa_guard_release(&qword_1ED7EAC88);
      v172 = v217;
      v9 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v174 = v9[400];
  v175 = __ROR8__(v174 ^ 0xCFA4117EE3121041, 30);
  v176 = 0x9DDFEA08EB382D69
       * ((v174 - 0x53DD633131DD66D6) ^ ((0x9DDFEA08EB382D69
                                          * ((v175 - 0x1284505D46BAD7E0) ^ (v174 - 0x53DD633131DD66D6))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v175 - 0x1284505D46BAD7E0) ^ (v174 - 0x53DD633131DD66D6))));
  v177 = -348639895 * ((v176 >> 47) ^ v176);
  for (ii = 1; ; ++ii)
  {
    v179 = v177 & (v171 - 1);
    v180 = v172 + 24 * v179;
    v181 = *(_QWORD **)v180;
    if (*(_QWORD *)v180 == -1)
    {
      if ("min-legal-vector-width" == (char *)-1)
        goto LABEL_320;
      goto LABEL_306;
    }
    if (v181 != (_QWORD *)-2)
      break;
    if ("min-legal-vector-width" == (char *)-2)
      goto LABEL_320;
LABEL_306:
    if (v181 == (_QWORD *)-1)
      goto LABEL_335;
    v177 = ii + v179;
  }
  if (*(_QWORD *)(v180 + 8) != 22)
    goto LABEL_306;
  v182 = *v181 == 0x6167656C2D6E696DLL && v181[1] == 0x726F746365762D6CLL;
  if (!v182 || *(_QWORD *)((char *)v181 + 14) != 0x68746469772D726FLL)
    goto LABEL_306;
LABEL_320:
  v184 = *(_QWORD *)(v180 + 16);
  if (!v184)
  {
LABEL_335:
    v196 = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, "min-legal-vector-width", 0x16uLL);
LABEL_336:
    *((_QWORD *)this + 14) = v196;
    goto LABEL_337;
  }
  v185 = *(unsigned int *)(v168 + 16);
  *(_QWORD *)&v218 = v168 + *(unsigned int *)(v168 + 12) + 25;
  *((_QWORD *)&v218 + 1) = v185;
  v186 = sub_1C5E3D4C0((uint64_t)&v218);
  v187 = DWORD2(v218);
  if (!*((_QWORD *)&v218 + 1))
  {
    v194 = 0;
LABEL_350:
    v200 = 1;
    goto LABEL_362;
  }
  v188 = 0;
  v189 = *((_QWORD *)&v218 + 1);
  v190 = (unsigned __int8 *)v218;
  while (2)
  {
    v191 = *v190;
    if ((v191 - 48) < 0xA)
    {
      v192 = -48;
LABEL_325:
      v193 = v192 + v191;
      if (v193 >= v186)
        goto LABEL_360;
      v194 = v188 * v186 + v193;
      if (v194 / v186 < v188)
      {
        v187 = 1;
        goto LABEL_350;
      }
      ++v190;
      v188 = v194;
      if (!--v189)
        goto LABEL_361;
      continue;
    }
    break;
  }
  if ((v191 - 97) < 0x1A)
  {
    v192 = -87;
    goto LABEL_325;
  }
  if ((v191 - 65) <= 0x19)
  {
    v192 = -55;
    goto LABEL_325;
  }
LABEL_360:
  v194 = v188;
LABEL_361:
  v200 = *((_QWORD *)&v218 + 1) == v189;
  v187 = v189 != 0;
LABEL_362:
  if (v187 | v200)
    v206 = 0;
  else
    v206 = v194;
  v207 = *(unsigned int *)(v184 + 16);
  *(_QWORD *)&v218 = v184 + *(unsigned int *)(v184 + 12) + 25;
  *((_QWORD *)&v218 + 1) = v207;
  v208 = sub_1C5E3D4C0((uint64_t)&v218);
  v209 = *((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v210 = 0;
    v211 = (unsigned __int8 *)v218;
    while (1)
    {
      v212 = *v211;
      if ((v212 - 48) >= 0xA)
      {
        if ((v212 - 97) >= 0x1A)
        {
          if ((v212 - 65) > 0x19)
            break;
          v213 = -55;
        }
        else
        {
          v213 = -87;
        }
      }
      else
      {
        v213 = -48;
      }
      v214 = v213 + v212;
      if (v214 >= v208)
        break;
      v215 = v210 * v208 + v214;
      if (v215 / v208 < v210)
        break;
      ++v211;
      v210 = v215;
      if (!--v209)
      {
        if (v215 <= v206)
          break;
        v196 = llvm::AttributeList::addAttributeAtIndex(v5, **(llvm::LLVMContext ***)this, -1, v184);
        goto LABEL_336;
      }
    }
  }
LABEL_337:
  v197 = *((_QWORD *)a2 + 14);
  if (v197)
  {
    result = *(_QWORD *)v5;
    if ((*(_BYTE *)(v197 + 17) & 1) == 0)
      goto LABEL_343;
    if (!result || (*(_BYTE *)(result + 17) & 1) == 0)
    {
      result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 40);
      *((_QWORD *)this + 14) = result;
      goto LABEL_343;
    }
    goto LABEL_344;
  }
  result = *(_QWORD *)v5;
LABEL_343:
  if (result)
  {
LABEL_344:
    if ((*(_BYTE *)(result + 14) & 1) != 0)
    {
      v199 = *((_QWORD *)a2 + 14);
      if (!v199 || (*(_BYTE *)(v199 + 14) & 1) == 0)
      {
        result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v5, **(uint64_t ***)this, -1, 16);
        *((_QWORD *)this + 14) = result;
      }
    }
  }
  return result;
}

_DWORD *sub_1C5331460(_DWORD *result, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v5 = (uint64_t)result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 4);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = a2;
  v7 = (*(_DWORD *)(v5 + 8) + 1);
  *(_DWORD *)(v5 + 8) = v7;
  if (a3)
  {
    if (v7 >= *(_DWORD *)(v5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v7 + 1, 4);
      LODWORD(v7) = *(_DWORD *)(v5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v5 + 4 * v7) = a3;
    v8 = *(_DWORD *)(v5 + 12);
    v9 = (*(_DWORD *)(v5 + 8) + 1);
    *(_DWORD *)(v5 + 8) = v9;
    if (v9 >= v8)
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v9 + 1, 4);
      LODWORD(v9) = *(_DWORD *)(v5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v5 + 4 * v9) = HIDWORD(a3);
    ++*(_DWORD *)(v5 + 8);
  }
  return result;
}

uint64_t sub_1C5331544(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v14 = result;
    v8 = a2;
    v10 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v3 + 1, 4);
    a2 = v8;
    a3 = v10;
    result = v14;
    LODWORD(v3) = *(_DWORD *)(v14 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v3) = a2;
  v4 = *(_DWORD *)(result + 12);
  v5 = (*(_DWORD *)(result + 8) + 1);
  *(_DWORD *)(result + 8) = v5;
  if (v5 >= v4)
  {
    v12 = result;
    v9 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v5 + 1, 4);
    a3 = v9;
    result = v12;
    LODWORD(v5) = *(_DWORD *)(v12 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v5) = a3;
  v6 = *(_DWORD *)(result + 12);
  v7 = (*(_DWORD *)(result + 8) + 1);
  *(_DWORD *)(result + 8) = v7;
  if (v7 >= v6)
  {
    v13 = result;
    v11 = HIDWORD(a3);
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v7 + 1, 4);
    HIDWORD(a3) = v11;
    result = v13;
    LODWORD(v7) = *(_DWORD *)(v13 + 8);
  }
  *(_DWORD *)(*(_QWORD *)result + 4 * v7) = HIDWORD(a3);
  ++*(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C5331648(int a1, uint64_t a2, void *__s2, size_t a4)
{
  size_t v5;
  size_t v6;
  int v7;
  int v8;

  if (!a2)
    return 1;
  if (*(_BYTE *)(a2 + 8) != 2)
    return 1;
  v5 = *(unsigned int *)(a2 + 12);
  if (a4 >= v5)
    v6 = *(unsigned int *)(a2 + 12);
  else
    v6 = a4;
  if (v6 && (v7 = memcmp((const void *)(a2 + 24), __s2, v6)) != 0)
  {
    v8 = (v7 >> 31) | 1;
  }
  else
  {
    if (a4 > v5)
      v8 = -1;
    else
      v8 = 1;
    if (a4 == v5)
      v8 = 0;
  }
  return v8 == -1;
}

BOOL sub_1C53316CC(_BOOL8 result, _QWORD *a2, size_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int i;
  int v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  if (!result)
    return result;
  if (!*(_DWORD *)(result + 8))
    return 0;
  v3 = *(_QWORD *)(result + 40);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(v3 + 40);
  if (!v4)
    return 0;
  v7 = *(_QWORD *)(v3 + 24);
  v8 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
  v9 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v8 & v9;
    v12 = v7 + 24 * (v8 & v9);
    v13 = *(const void **)v12;
    if (*(_QWORD *)v12 == -1)
    {
      if (a2 == (_QWORD *)-1)
        goto LABEL_15;
      goto LABEL_8;
    }
    if (v13 != (const void *)-2)
      break;
    if (a2 == (_QWORD *)-2)
      goto LABEL_15;
LABEL_8:
    if (v13 == (const void *)-1)
      return 0;
    v8 = i + v11;
  }
  if (a3 != *(_QWORD *)(v12 + 8) || a3 && memcmp(a2, *(const void **)v12, a3))
    goto LABEL_8;
LABEL_15:
  v14 = *(_QWORD *)(v12 + 16);
  if (v14 && *(_DWORD *)(v14 + 16) == 4)
    return *(_DWORD *)(v14 + *(unsigned int *)(v14 + 12) + 25) == 1702195828;
  return 0;
}

BOOL sub_1C53317E4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;

  sub_1C53284C4(a2, a5);
  v7 = *(unsigned int *)(a3 + 8);
  return (_DWORD)v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

BOOL sub_1C5331840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(a2 + 48);
    v9 = *(_DWORD *)(a5 + 8);
    v10 = 8 * v7;
    do
    {
      v11 = *v8;
      if (v9 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v9 + 1, 4);
        v9 = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = v11;
      v12 = *(_DWORD *)(a5 + 12);
      v13 = (*(_DWORD *)(a5 + 8) + 1);
      *(_DWORD *)(a5 + 8) = v13;
      if (v13 >= v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v13 + 1, 4);
        LODWORD(v13) = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v13) = HIDWORD(v11);
      v9 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v9;
      ++v8;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v9 = *(_DWORD *)(a5 + 8);
  }
  return *(_DWORD *)(a3 + 8) == v9 && memcmp(*(const void **)a5, *(const void **)a3, 4 * v9) == 0;
}

unint64_t sub_1C5331944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a2 + 48);
    v6 = *(_DWORD *)(a3 + 8);
    v7 = 8 * v4;
    do
    {
      v8 = *v5;
      if (v6 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 4);
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v6) = v8;
      v9 = *(_DWORD *)(a3 + 12);
      v10 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v10;
      if (v10 >= v9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v10 + 1, 4);
        LODWORD(v10) = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v6 = *(_DWORD *)(a3 + 8);
  }
  return sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v6);
}

uint64_t sub_1C5331A1C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  const void *v10;
  int i;
  int v12;
  uint64_t v13;
  const void *v14;
  uint64_t result;
  size_t v16;
  BOOL v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C5E3DF4C(*(_QWORD **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
    v8 = 0;
    v9 = v4 - 1;
    v10 = *(const void **)a2;
    for (i = 1; ; ++i)
    {
      v12 = v7 & v9;
      v13 = v6 + 24 * (v7 & v9);
      v14 = *(const void **)v13;
      if (*(_QWORD *)v13 == -1)
      {
        if (v10 == (const void *)-1)
          goto LABEL_14;
      }
      else if (v14 == (const void *)-2)
      {
        if (v10 == (const void *)-2)
          goto LABEL_14;
      }
      else
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (v16 == *(_QWORD *)(v13 + 8) && (!v16 || !memcmp(v10, *(const void **)v13, v16)))
        {
LABEL_14:
          result = 1;
          goto LABEL_8;
        }
      }
      if (v14 == (const void *)-1)
        break;
      if (v8)
        v17 = 0;
      else
        v17 = v14 == (const void *)-2;
      if (v17)
        v8 = v13;
      v7 = i + v12;
    }
    result = 0;
    if (v8)
      v13 = v8;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v13;
  return result;
}

uint64_t sub_1C5331B2C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  const void *v15;
  int i;
  int v17;
  const void *v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5331CCC(a1, 2 * v7);
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)a1;
      v12 = sub_1C5E3DF4C(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
      v13 = 0;
      v14 = v10 - 1;
      v15 = *(const void **)a3;
      for (i = 1; ; ++i)
      {
        v17 = v12 & v14;
        a4 = v11 + 24 * (v12 & v14);
        v18 = *(const void **)a4;
        if (*(_QWORD *)a4 == -1)
        {
          if (v15 == (const void *)-1)
            goto LABEL_4;
        }
        else if (v18 == (const void *)-2)
        {
          if (v15 == (const void *)-2)
            goto LABEL_4;
        }
        else
        {
          v19 = *(_QWORD *)(a3 + 8);
          if (v19 == *(_QWORD *)(a4 + 8) && (!v19 || !memcmp(v15, *(const void **)a4, v19)))
            goto LABEL_4;
        }
        if (v18 == (const void *)-1)
          break;
        if (v13)
          v20 = 0;
        else
          v20 = v18 == (const void *)-2;
        if (v20)
          v13 = a4;
        v12 = i + v17;
      }
      if (v13)
        a4 = v13;
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C5331CCC(a1, v7);
    v21 = 0;
    sub_1C5331A1C((uint64_t *)a1, a3, &v21);
    a4 = v21;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C5331CCC(unint64_t a1, int a2)
{
  unsigned int v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5331D94(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F6FF0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C5331D94(unint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  size_t v12;
  const void *v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  BOOL v18;
  size_t v19;
  unint64_t *v20;

  v3 = a2;
  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_OWORD **)result;
    v7 = 24 * v5;
    do
    {
      *v6 = xmmword_1C85F6FF0;
      v6 = (_OWORD *)((char *)v6 + 24);
      v7 -= 24;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v20 = a3;
    do
    {
      result = *v3;
      if (*v3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = *(_QWORD *)v4;
        v9 = *(_DWORD *)(v4 + 16);
        result = sub_1C5E3DF4C((_QWORD *)result, result + v3[1]);
        v10 = 0;
        v11 = v9 - 1;
        v13 = (const void *)*v3;
        v12 = v3[1];
        for (i = 1; ; ++i)
        {
          v15 = result & v11;
          v16 = v8 + 24 * (result & v11);
          v17 = *(const void **)v16;
          if (*(_QWORD *)v16 == -1)
          {
            if (v13 == (const void *)-1)
              goto LABEL_26;
          }
          else if (v17 == (const void *)-2)
          {
            if (v13 == (const void *)-2)
              goto LABEL_26;
          }
          else if (v12 == *(_QWORD *)(v16 + 8))
          {
            if (!v12)
              goto LABEL_26;
            v19 = v12;
            result = memcmp(v13, *(const void **)v16, v12);
            v12 = v19;
            if (!(_DWORD)result)
              goto LABEL_26;
          }
          if (v17 == (const void *)-1)
            break;
          if (v10)
            v18 = 0;
          else
            v18 = v17 == (const void *)-2;
          if (v18)
            v10 = v8 + 24 * v15;
          result = i + v15;
        }
        if (v10)
          v16 = v10;
LABEL_26:
        *(_OWORD *)v16 = *(_OWORD *)v3;
        *(_QWORD *)(v16 + 16) = v3[2];
        ++*(_DWORD *)(v4 + 8);
        a3 = v20;
      }
      v3 += 3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1C5331F00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;

  v2 = *a2;
  v3 = *a1;
  if (*a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if ((llvm::AttributeImpl::operator<(*a1, *a2) & 1) == 0)
      return llvm::AttributeImpl::operator<(v2, v3);
    return 0xFFFFFFFFLL;
  }
  if (v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = v3 != 0;
    if (v2)
      v8 = v3 == 0;
    else
      v8 = 0;
    if (v8)
      return 0xFFFFFFFFLL;
  }
  else
  {
    if (llvm::AttributeImpl::operator<(*a1, *a2))
      return 0xFFFFFFFFLL;
    v7 = 1;
  }
  if (v2)
    result = 0;
  else
    result = v7;
  if (v2 && v3)
    return llvm::AttributeImpl::operator<(v2, v3);
  return result;
}

BOOL sub_1C5331F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = (uint64_t *)(a2 + 40);
    v9 = *(_DWORD *)(a5 + 8);
    v10 = 8 * v7;
    do
    {
      v11 = *v8;
      if (v9 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v9 + 1, 4);
        v9 = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v9) = v11;
      v12 = *(_DWORD *)(a5 + 12);
      v13 = (*(_DWORD *)(a5 + 8) + 1);
      *(_DWORD *)(a5 + 8) = v13;
      if (v13 >= v12)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v13 + 1, 4);
        LODWORD(v13) = *(_DWORD *)(a5 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a5 + 4 * v13) = HIDWORD(v11);
      v9 = *(_DWORD *)(a5 + 8) + 1;
      *(_DWORD *)(a5 + 8) = v9;
      ++v8;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v9 = *(_DWORD *)(a5 + 8);
  }
  return *(_DWORD *)(a3 + 8) == v9 && memcmp(*(const void **)a5, *(const void **)a3, 4 * v9) == 0;
}

unint64_t sub_1C533209C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)(a2 + 40);
    v6 = *(_DWORD *)(a3 + 8);
    v7 = 8 * v4;
    do
    {
      v8 = *v5;
      if (v6 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 4);
        v6 = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v6) = v8;
      v9 = *(_DWORD *)(a3 + 12);
      v10 = (*(_DWORD *)(a3 + 8) + 1);
      *(_DWORD *)(a3 + 8) = v10;
      if (v10 >= v9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v10 + 1, 4);
        LODWORD(v10) = *(_DWORD *)(a3 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a3 + 4 * v10) = HIDWORD(v8);
      v6 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v6;
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    v6 = *(_DWORD *)(a3 + 8);
  }
  return sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v6);
}

void sub_1C5332174(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 8);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * a2 - 8 * v2);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

_BYTE *sub_1C53321EC(unsigned int *a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *__srca;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  v10 = a1[3];
  v11 = a4 - __src;
  v12 = v9 + ((a4 - __src) >> 3);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      LODWORD(v9) = a1[2];
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 8 * v9), v5, v11);
      LODWORD(v9) = a1[2];
      v7 = *(_QWORD *)a1;
    }
    a1[2] = v9 + (v11 >> 3);
    return (_BYTE *)(v7 + 8 * v8);
  }
  else
  {
    v15 = (uint64_t)v11 >> 3;
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v16 = (_BYTE *)(v7 + 8 * v9);
    __srca = (_BYTE *)(v7 + 8 * v8);
    v17 = (v16 - __srca) >> 3;
    if (v17 >= v15)
    {
      sub_1C6177054(a1, &v16[-8 * v15], (char *)(v7 + 8 * v9));
      if (&v16[-8 * v15] != __srca)
        memmove(&__srca[8 * v15], __srca, &v16[-8 * v15] - __srca);
      if (v5 != a4)
      {
        v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      v18 = v9 + (v11 >> 3);
      a1[2] = v18;
      if (v8 != v9)
      {
        v19 = (_QWORD *)(v7 + 8 * v8);
        memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16 - __srca);
        do
        {
          v20 = *(_QWORD *)v5;
          v5 += 8;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4)
        memcpy(v16, v5, a4 - v5);
    }
    return __srca;
  }
}

BOOL sub_1C5332394(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  if (a2)
  {
    if (*(_BYTE *)(a2 + 8) == 2)
    {
      v5 = *(unsigned int *)(a2 + 12);
      v6[0] = a2 + 24;
      v6[1] = v5;
      v3 = sub_1C5332404(a1 + 16, (uint64_t)v6);
      return v3 != 0;
    }
    v2 = *(unsigned int *)(a2 + 12);
  }
  else
  {
    v2 = 0;
  }
  v3 = (1 << v2) & *(_QWORD *)(a1 + ((v2 >> 3) & 0x1FFFFFF8));
  return v3 != 0;
}

uint64_t sub_1C5332404(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _BOOL4 v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = a1 + 16;
  while (sub_1C4E4FA7C(v5, a2, (uint64_t)(v3 + 4)))
  {
    v2 = v3;
LABEL_7:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return 0;
  }
  if (sub_1C4E4FA7C(v5, (uint64_t)(v3 + 4), a2))
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (_QWORD *)*v3;
  v8 = v3;
  if (*v3)
  {
    v8 = v3;
    do
    {
      v9 = sub_1C4E4FA7C(v5, (uint64_t)(v7 + 4), a2);
      v10 = v7 + 1;
      if (!v9)
      {
        v10 = v7;
        v8 = v7;
      }
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      v12 = sub_1C4E4FA7C(v5, a2, (uint64_t)(v11 + 4));
      v13 = v11 + 1;
      if (v12)
      {
        v13 = v11;
        v2 = v11;
      }
      v11 = (_QWORD *)*v13;
    }
    while (*v13);
  }
  if (v8 == v2)
    return 0;
  result = 0;
  do
  {
    v14 = (_QWORD *)v8[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v8[2];
        v16 = *v15 == (_QWORD)v8;
        v8 = v15;
      }
      while (!v16);
    }
    ++result;
    v8 = v15;
  }
  while (v15 != v2);
  return result;
}

uint64_t llvm::UpgradeIntrinsicFunction(uint64_t ***this, uint64_t ****a2, llvm::Function **a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t ***v11;
  llvm::LLVMContext *v12;

  *a2 = 0;
  v10 = sub_1C5332594(this, (std::string::size_type)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*a2)
    v11 = *a2;
  else
    v11 = this;
  v12 = (llvm::LLVMContext *)*((unsigned int *)v11 + 9);
  if ((_DWORD)v12)
    v11[14] = (uint64_t **)llvm::Intrinsic::getAttributes((llvm::Intrinsic *)**v11, v12);
  return v10;
}

uint64_t sub_1C5332594(uint64_t ***a1, std::string::size_type a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;
  uint64_t ***v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  int v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  _DWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  BOOL v40;
  uint64_t v41;
  uint64_t ****v42;
  uint64_t ***v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  unsigned __int16 *v47;
  uint64_t v48;
  int v52;
  int v53;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  std::string *v61;
  uint64_t *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t ****v65;
  uint64_t ***v66;
  int v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t ****v71;
  uint64_t ***v72;
  int v73;
  int v74;
  _DWORD *v76;
  size_t v77;
  BOOL v78;
  BOOL v79;
  uint64_t *v81;
  unint64_t v83;
  BOOL v85;
  uint64_t v86;
  uint64_t ****v87;
  uint64_t ***v88;
  int v89;
  int v90;
  int v91;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ****v99;
  uint64_t ***v100;
  int v101;
  int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t ****v105;
  uint64_t ***v106;
  int v107;
  int v108;
  uint64_t *v110;
  char v113;
  BOOL v118;
  BOOL v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  uint64_t ***v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ****v134;
  uint64_t ***v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t ****v143;
  uint64_t ***v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t ****v151;
  uint64_t ***v152;
  int v153;
  int v154;
  size_t *v155;
  size_t v156;
  const void *v157;
  size_t v158;
  _BOOL4 v159;
  int v160;
  void *v161;
  std::string::size_type v162;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t ****v171;
  uint64_t ***v172;
  int v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t ****v180;
  uint64_t ***v181;
  int v182;
  int v183;
  uint64_t ***v184;
  size_t v185;
  char *v186;
  size_t v187;
  _BOOL4 v188;
  int v189;
  void *v190;
  std::string::size_type size;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t ****v197;
  uint64_t ***v198;
  int v199;
  int v200;
  BOOL v201;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t ****v207;
  uint64_t ***v208;
  int v209;
  int v210;
  uint64_t *v211;
  std::string *v212;
  uint64_t *v213;
  int v214;
  uint64_t ***v216;
  char *v217;
  std::string::size_type v218;
  std::string::size_type v219;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t ***v230;
  char *v231;
  std::string::size_type v232;
  std::string::size_type v233;
  uint64_t *v234;
  uint64_t ***v235;
  char *v236;
  size_t v237;
  size_t v238;
  int v239;
  void *v240;
  std::string::size_type v241;
  _BOOL4 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t ****v247;
  uint64_t ***v248;
  int v249;
  int v250;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t ****v257;
  uint64_t ***v258;
  int v259;
  int v260;
  uint64_t ***v261;
  char *v262;
  size_t v263;
  size_t v264;
  _BOOL4 v265;
  int v266;
  void *v267;
  std::string::size_type v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  BOOL v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t ****v277;
  uint64_t ***v278;
  int v279;
  int v280;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t ****v287;
  uint64_t ***v288;
  int v289;
  int v290;
  uint64_t *v291;
  BOOL v292;
  const char *v294;
  char *v295;
  size_t v296;
  uint64_t ***v297;
  char *v298;
  std::string::size_type v299;
  std::string::size_type v300;
  uint64_t ***v301;
  char *v302;
  std::string::size_type v303;
  std::string::size_type v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t *v307;
  std::string::size_type *v308;
  std::string::size_type v309;
  std::string::size_type *v310;
  std::string::size_type v311;
  uint64_t v312;
  std::string::size_type *v313;
  std::string::size_type v314;
  uint64_t *v315;
  int v318;
  llvm::PointerType *v319;
  char v320;
  llvm::Type *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  uint64_t ***v326;
  char *v327;
  std::string::size_type v328;
  std::string::size_type v329;
  uint64_t ***v330;
  char *v331;
  std::string::size_type v332;
  std::string::size_type v333;
  uint64_t *v334;
  uint64_t ***v335;
  size_t v336;
  char *v337;
  size_t v338;
  int v339;
  void *v340;
  std::string::size_type v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t ****v346;
  uint64_t ***v347;
  int v348;
  int v349;
  uint64_t ***v350;
  char *v351;
  std::string::size_type v352;
  std::string::size_type v353;
  std::string::size_type *v354;
  std::string::size_type v355;
  uint64_t *v356;
  uint64_t ***v357;
  char *v358;
  size_t v359;
  size_t v360;
  int v361;
  void *v362;
  std::string::size_type v363;
  _BOOL4 v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t ****v369;
  uint64_t ***v370;
  int v371;
  int v372;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t ****v378;
  uint64_t ***v379;
  int v380;
  int v381;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v394;
  int v395;
  BOOL v397;
  int v398;
  std::string::size_type *v399;
  std::string::size_type v400;
  uint64_t *v401;
  uint64_t ***v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t ****v420;
  uint64_t ***v421;
  int v422;
  int v423;
  unsigned __int8 v424;
  _DWORD *v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t ****v431;
  uint64_t ***v432;
  int v433;
  int v434;
  uint64_t ***v435;
  char *v436;
  uint64_t **v437;
  uint64_t **v438;
  uint64_t *v439;
  int v440;
  uint64_t ***v441;
  char *v442;
  uint64_t **v443;
  uint64_t **v444;
  void *v445;
  uint64_t ***v446;
  char *v447;
  std::string::size_type v448;
  std::string::size_type v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t ***v452;
  char *v453;
  size_t v454;
  size_t v455;
  int v456;
  void *v457;
  std::string::size_type v458;
  _BOOL4 v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t ****v464;
  uint64_t ***v465;
  int v466;
  int v467;
  uint64_t *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t ****v474;
  uint64_t ***v475;
  int v476;
  int v477;
  BOOL v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t ****v483;
  uint64_t ***v484;
  int v485;
  int v486;
  int v487;
  uint64_t ***v488;
  int v489;
  BOOL v492;
  uint64_t v493;
  uint64_t ****v494;
  uint64_t ***v495;
  int v496;
  int v497;
  BOOL v498;
  uint64_t v499;
  uint64_t ****v500;
  uint64_t ***v501;
  int v502;
  int v503;
  uint64_t v505;
  unsigned int v506;
  std::string::size_type *v507;
  std::string::size_type v508;
  uint64_t ***v509;
  char *v510;
  std::string::size_type v511;
  std::string::size_type v512;
  uint64_t *v513;
  uint64_t ***v514;
  char *v515;
  size_t v516;
  size_t v517;
  int v518;
  void *v519;
  std::string::size_type v520;
  _BOOL4 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t ****v526;
  uint64_t ***v527;
  int v528;
  int v529;
  BOOL v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t ****v535;
  uint64_t ***v536;
  int v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t ****v543;
  uint64_t ***v544;
  int v545;
  int v546;
  BOOL v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t ****v552;
  uint64_t ***v553;
  int v554;
  int v555;
  uint64_t ***v556;
  char *v557;
  std::string::size_type v558;
  std::string::size_type v559;
  uint64_t ***v560;
  char *v561;
  std::string::size_type v562;
  std::string::size_type v563;
  uint64_t *v564;
  std::string::size_type v565;
  std::string::size_type v566;
  uint64_t ***v567;
  char *v568;
  std::string::size_type v569;
  std::string::size_type v570;
  size_t Declaration;
  uint64_t v573;
  uint64_t ****v574;
  uint64_t ***v575;
  int v576;
  int v577;
  uint64_t v590;
  BOOL v592;
  uint64_t v593;
  int v596;
  uint64_t v598;
  llvm::Type *v600;
  const char *v601;
  unint64_t PrimitiveSizeInBits;
  uint64_t v603;
  std::string::size_type v604;
  uint64_t ***v605;
  char *v606;
  std::string::size_type v607;
  std::string::size_type v608;
  std::string::size_type *v609;
  std::string::size_type v610;
  uint64_t v611;
  int v612;
  uint64_t *v613;
  uint64_t **v614;
  uint64_t **v615;
  llvm::PointerType *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  size_t *v620;
  uint64_t v621;
  uint64_t ****v622;
  uint64_t ***v623;
  int v624;
  int v625;
  char v626;
  unint64_t *v627;
  size_t v628;
  const void *v629;
  unint64_t v630;
  void **v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t ****v638;
  uint64_t ***v639;
  int v640;
  int v641;
  uint64_t ***v642;
  char *v643;
  uint64_t **v644;
  uint64_t **v645;
  char v646;
  llvm::Type *v647;
  uint64_t v648;
  char *v649;
  char *v650;
  llvm::Function *v651;
  size_t v652;
  char v653;
  std::string::size_type *v654;
  std::string::size_type v655;
  std::string::size_type *v656;
  std::string::size_type v657;
  const char *v658;
  int v659;
  int v660;
  uint64_t ***v662;
  char *v663;
  std::string::size_type v664;
  std::string::size_type v665;
  int v666;
  int v667;
  void *__dst[2];
  unint64_t v669;
  char *v670;
  unint64_t v671;
  std::string v672;
  unint64_t v673;
  __int16 v674;
  __int128 v675;
  const char *v676;
  __int16 v677;
  uint64_t v678;

  v678 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    return 0;
  v8 = (uint64_t *)a2;
  v10 = *a1;
  v11 = ***a1;
  v12 = *(_QWORD *)(v11 + 152);
  v13 = *(unsigned int *)(v11 + 168);
  v14 = a1 >> 4;
  if (!(_DWORD)v13)
    goto LABEL_8;
  LODWORD(v15) = (v13 - 1) & (v14 ^ (a1 >> 9));
  v16 = (uint64_t ****)(v12 + 16 * v15);
  v17 = *v16;
  if (*v16 != a1)
  {
    v18 = 1;
    while (v17 != (uint64_t ***)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v13 - 1);
      v17 = *(uint64_t ****)(v12 + 16 * v15);
      if (v17 == a1)
      {
        v16 = (uint64_t ****)(v12 + 16 * v15);
        goto LABEL_9;
      }
    }
LABEL_8:
    v16 = (uint64_t ****)(v12 + 16 * v13);
  }
LABEL_9:
  v20 = v16[1];
  v21 = (uint64_t)*v20;
  v22 = (unint64_t)*v20 - 9;
  if ((unint64_t)*v20 < 9)
    return 0;
  if (*((_DWORD *)v20 + 4) != 1836477548 || *((_BYTE *)v20 + 20) != 46)
    return 0;
  v27 = (uint64_t)v20 + 21;
  v26 = *((char *)v20 + 21);
  v28 = v21 - 5;
  v670 = (char *)v20 + 21;
  v671 = v21 - 5;
  switch(v26)
  {
    case 'a':
      if (v28 < 8)
        goto LABEL_94;
      if (*(_QWORD *)v27 == 0x746962722E6D7261)
        goto LABEL_229;
      if (v28 < 0xC)
        goto LABEL_94;
      if (*(_QWORD *)v27 != 0x2E34366863726161 || *(_DWORD *)((char *)v20 + 29) != 1953063538)
      {
        if (v28 >= 0x13)
        {
          if (*(_QWORD *)v27 == 0x2E34366863726161
            && *(uint64_t ***)((char *)v20 + 29) == (uint64_t **)0x6972662E6E6F656ELL
            && v20[4] == (uint64_t **)0x6E746E6972662E6ELL)
          {
            v307 = (uint64_t *)a1[5];
            if ((*((_WORD *)a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)a1);
            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
            v24 = 1;
            v212 = &v672;
            v213 = v307;
            v214 = 260;
            goto LABEL_756;
          }
        }
        else if (v28 < 0x11)
        {
          if (v28 < 0xD)
            goto LABEL_94;
          goto LABEL_440;
        }
        if (*(_QWORD *)v27 == 0x2E34366863726161
          && *(uint64_t ***)((char *)v20 + 29) == (uint64_t **)0x6962722E6E6F656ELL
          && *((_BYTE *)v20 + 37) == 116)
        {
          v305 = (uint64_t *)a1[5];
          if ((*((_WORD *)a1 + 9) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)a1);
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
          v24 = 1;
          v212 = &v672;
          v213 = v305;
          v214 = 8;
          goto LABEL_756;
        }
LABEL_440:
        if (*(_QWORD *)v27 == 0x6E6F656E2E6D7261
          && *(uint64_t ***)((char *)v20 + 26) == (uint64_t **)0x7A6C63762E6E6F65)
        {
          if ((*((_WORD *)a1 + 9) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)a1);
            v11 = ***a1;
          }
          *(_QWORD *)&v675 = *a1[11];
          *((_QWORD *)&v675 + 1) = v11 + 1888;
          v319 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)*a1[3][2], (uint64_t *)&v675, 2, 0);
          v320 = (_DWORD)a1[4] & 0xF;
          v321 = (llvm::Type *)(*((_DWORD *)*a1 + 2) >> 8);
          v322 = 14;
          if (v28 < 0xE)
            v322 = v21 - 5;
          v674 = 1283;
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.ctlz.";
          v672.__r_.__value_.__r.__words[2] = v27 + v322;
          v673 = v28 - v322;
          v323 = (uint64_t)a1[5];
          v324 = (char *)operator new(0x80uLL);
          v325 = v324 + 8;
          *((_DWORD *)v324 + 7) = *((_DWORD *)v324 + 7) & 0x38000000 | 0x40000000;
          *(_QWORD *)v324 = 0;
          llvm::Function::Function((uint64_t *)v324 + 1, v319, v320, v321, (uint64_t)&v672, v323);
          *v8 = (uint64_t)v325;
          return 1;
        }
        if (*(_QWORD *)v27 == 0x6E6F656E2E6D7261
          && *(uint64_t ***)((char *)v20 + 26) == (uint64_t **)0x746E63762E6E6F65)
        {
          v226 = (uint64_t *)a1[5];
          if ((*((_WORD *)a1 + 9) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)a1);
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
          v24 = 1;
          v212 = &v672;
          v213 = v226;
          v214 = 53;
          goto LABEL_756;
        }
LABEL_94:
        v56 = atomic_load((unsigned __int8 *)&qword_1ED8042E8);
        if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_1ED8042E8))
        {
          llvm::Regex::Regex((uint64_t)&unk_1ED804300, "^arm\\.neon\\.vst([1234]|[234]lane)\\.v[a-z0-9]*$", 46, 0);
          __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ED804300, &dword_1C475E000);
          __cxa_guard_release(&qword_1ED8042E8);
        }
        if (llvm::Regex::match((uint64_t)&unk_1ED804300, v670, v671, 0, 0))
        {
          v57 = a1[3];
          v58 = 8 * *((unsigned int *)v57 + 3) - 8;
          *(_OWORD *)&v672.__r_.__value_.__l.__data_ = *(_OWORD *)(v57[2] + 1);
          v59 = llvm::StringRef::find((uint64_t *)&v670, "lane", 4uLL, 0);
          v60 = (char *)&unk_1C85FCA34 + (v58 >> 1) - 20;
          if (v59 == -1)
            v60 = (char *)&unk_1C85FCA24 + (v58 >> 1) - 12;
          LODWORD(a2) = *(_DWORD *)v60;
          v61 = &v672;
          v62 = (uint64_t *)a1[5];
          goto LABEL_1036;
        }
        if (v671 == 18)
        {
          if (*(_QWORD *)v670 != 0x657268742E6D7261
            || *((_QWORD *)v670 + 1) != 0x746E696F702E6461
            || *((_WORD *)v670 + 8) != 29285)
          {
            goto LABEL_254;
          }
        }
        else
        {
          if (v671 != 22)
          {
            if (v671 < 0x10)
            {
              if (v671 != 15)
              {
                if (v671 < 0xC
                  || (*(_QWORD *)v670 == 0x6E6F656E2E6D7261
                    ? (v292 = *((_DWORD *)v670 + 2) == 1835426350)
                    : (v292 = 0),
                      !v292))
                {
LABEL_578:
                  if ((uint64_t)v671 > 51)
                  {
                    switch(v671)
                    {
                      case '4':
                        v294 = "arm.mve.vldr.gather.base.predicated.v2i64.v2i64.v4i1";
                        v295 = v670;
                        v296 = 52;
                        break;
                      case '5':
                        v294 = "arm.mve.vstr.scatter.base.predicated.v2i64.v2i64.v4i1";
                        v295 = v670;
                        v296 = 53;
                        break;
                      case '7':
                        v294 = "arm.mve.vldr.gather.base.wb.predicated.v2i64.v2i64.v4i1";
                        v295 = v670;
                        v296 = 55;
                        break;
                      case '8':
                        v294 = "arm.mve.vstr.scatter.base.wb.predicated.v2i64.v2i64.v4i1";
                        v295 = v670;
                        v296 = 56;
                        break;
                      case '<':
                        v294 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0i64.v2i64.v4i1";
                        v295 = v670;
                        v296 = 60;
                        break;
                      case '=':
                        v294 = "arm.mve.vstr.scatter.offset.predicated.p0i64.v2i64.v2i64.v4i1";
                        v295 = v670;
                        v296 = 61;
                        break;
                      default:
                        goto LABEL_1170;
                    }
LABEL_896:
                    if (!memcmp(v295, v294, v296))
                      return 1;
                  }
                  else
                  {
                    switch(v671)
                    {
                      case '#':
                        if (!memcmp(v670, "arm.cde.vcx1q.predicated.v2i64.v4i1", 0x23uLL)
                          || !memcmp(v670, "arm.cde.vcx2q.predicated.v2i64.v4i1", 0x23uLL))
                        {
                          return 1;
                        }
                        v294 = "arm.cde.vcx3q.predicated.v2i64.v4i1";
                        v295 = v670;
                        v296 = 35;
                        goto LABEL_896;
                      case '$':
                        if (!memcmp(v670, "arm.cde.vcx1qa.predicated.v2i64.v4i1", 0x24uLL)
                          || !memcmp(v670, "arm.cde.vcx2qa.predicated.v2i64.v4i1", 0x24uLL))
                        {
                          return 1;
                        }
                        v294 = "arm.cde.vcx3qa.predicated.v2i64.v4i1";
                        v295 = v670;
                        v296 = 36;
                        goto LABEL_896;
                      case '%':
                      case '&':
                      case '\'':
                      case '(':
                      case ')':
                      case '*':
                        goto LABEL_1170;
                      case '+':
                        v294 = "arm.mve.vqdmull.predicated.v2i64.v4i32.v4i1";
                        v295 = v670;
                        v296 = 43;
                        goto LABEL_896;
                      case ',':
                        v294 = "arm.mve.mull.int.predicated.v2i64.v4i32.v4i1";
                        v295 = v670;
                        v296 = 44;
                        goto LABEL_896;
                      default:
                        if (v671 == 14)
                        {
                          v478 = *(_QWORD *)v670 == 0x2E65766D2E6D7261
                              && *(_QWORD *)(v670 + 6) == 0x3436707463762E65;
                          if (v478 && *(_DWORD *)(*a1[3][2] + 32) == 4)
                          {
                            if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
                            {
                              v479 = ***a1;
                              v480 = *(_QWORD *)(v479 + 152);
                              v481 = *(unsigned int *)(v479 + 168);
                              if ((_DWORD)v481)
                              {
                                LODWORD(v482) = (v481 - 1) & (v14 ^ (a1 >> 9));
                                v483 = (uint64_t ****)(v480 + 16 * v482);
                                v484 = *v483;
                                if (*v483 != a1)
                                {
                                  v485 = 1;
                                  do
                                  {
                                    if (v484 == (uint64_t ***)-4096)
                                      goto LABEL_1238;
                                    v486 = v482 + v485++;
                                    v482 = v486 & (v481 - 1);
                                    v484 = *(uint64_t ****)(v480 + 16 * v482);
                                  }
                                  while (v484 != a1);
                                  v483 = (uint64_t ****)(v480 + 16 * v482);
                                }
                              }
                              else
                              {
LABEL_1238:
                                v483 = (uint64_t ****)(v480 + 16 * v481);
                              }
                              v662 = v483[1];
                              v665 = (std::string::size_type)*v662;
                              v663 = (char *)(v662 + 2);
                              v664 = v665;
                            }
                            else
                            {
                              v664 = 0;
                              v663 = &byte_1C871356D;
                            }
                            v674 = 773;
                            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v663;
                            v672.__r_.__value_.__l.__size_ = v664;
                            v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                            llvm::Value::setName(a1, (uint64_t)&v672);
                            return 1;
                          }
                        }
                        else if (v671 == 15
                               && *(_QWORD *)v670 == 0x612E6E6367646D61
                               && *(_QWORD *)(v670 + 7) == 0x7469626E67696C61)
                        {
                          v213 = (uint64_t *)a1[5];
                          v672.__r_.__value_.__r.__words[0] = *a1[3][2];
                          v24 = 1;
                          v212 = &v672;
                          v214 = 149;
                          goto LABEL_756;
                        }
                        break;
                    }
                  }
                  goto LABEL_1170;
                }
                goto LABEL_574;
              }
              v113 = 1;
LABEL_279:
              v120 = *(_QWORD *)v670 == 0x6E6F656E2E6D7261 && *(_QWORD *)(v670 + 7) == 0x2E746F6466622E6ELL;
              if (v120
                || v671 >= 0x13
                && (*(_QWORD *)v670 == 0x2E34366863726161
                  ? (v121 = *((_QWORD *)v670 + 1) == 0x6466622E6E6F656ELL)
                  : (v121 = 0),
                    v121 ? (v122 = *(_QWORD *)(v670 + 11) == 0x2E746F6466622E6ELL) : (v122 = 0),
                    v122))
              {
                if (*(_WORD *)&v670[v671 - 2] == 14441)
                {
                  switch(v671)
                  {
                    case 0x19uLL:
                      v395 = v670[24];
                      v397 = *(_QWORD *)v670 == 0x6E6F656E2E6D7261
                          && *((_QWORD *)v670 + 1) == 0x762E746F6466622ELL
                          && *((_QWORD *)v670 + 2) == 0x6938762E32336632;
                      v398 = 56;
                      goto LABEL_1125;
                    case 0x1AuLL:
                      v395 = *((unsigned __int16 *)v670 + 12);
                      v397 = *(_QWORD *)v670 == 0x6E6F656E2E6D7261
                          && *((_QWORD *)v670 + 1) == 0x762E746F6466622ELL
                          && *((_QWORD *)v670 + 2) == 0x3631762E32336634;
                      v398 = 14441;
LABEL_1125:
                      if (!v397 || v395 != v398)
                        goto LABEL_1170;
                      v596 = 3860;
                      goto LABEL_1144;
                    case 0x1DuLL:
                      v590 = *(_QWORD *)(v670 + 21);
                      v592 = *(_QWORD *)v670 == 0x2E34366863726161
                          && *((_QWORD *)v670 + 1) == 0x6466622E6E6F656ELL
                          && *((_QWORD *)v670 + 2) == 0x32336632762E746FLL;
                      v593 = 0x38762E323366;
                      goto LABEL_1138;
                    case 0x1EuLL:
                      v590 = *(_QWORD *)(v670 + 22);
                      v592 = *(_QWORD *)v670 == 0x2E34366863726161
                          && *((_QWORD *)v670 + 1) == 0x6466622E6E6F656ELL
                          && *((_QWORD *)v670 + 2) == 0x32336634762E746FLL;
                      v593 = 0x3631762E3233;
LABEL_1138:
                      v598 = v593 & 0xFFFFFFFFFFFFLL | 0x3869000000000000;
                      if (!v592 || v590 != v598)
                        goto LABEL_1170;
                      v596 = 458;
LABEL_1144:
                      v600 = (llvm::Type *)*a1[3][2];
                      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v600);
                      if ((_DWORD)v601 == 1)
                      {
                        v600 = (llvm::Type *)*a1[3][2];
                      }
                      v603 = (uint64_t)*a1[5];
                      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v600;
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v603 + 1648), (llvm::Type *)(PrimitiveSizeInBits >> 4));
                      v672.__r_.__value_.__l.__size_ = v604;
                      v62 = (uint64_t *)a1[5];
                      v61 = &v672;
                      LODWORD(a2) = v596;
                      break;
                    default:
                      goto LABEL_1170;
                  }
                  goto LABEL_1036;
                }
              }
              if (*(_QWORD *)v670 != 0x6E6F656E2E6D7261 || *((_DWORD *)v670 + 2) != 1835426350)
              {
                if ((v113 & 1) != 0)
                  goto LABEL_578;
                if (*(_QWORD *)v670 != 0x2E34366863726161 || *((_QWORD *)v670 + 1) != 0x6D66622E6E6F656ELL)
                  goto LABEL_578;
              }
LABEL_574:
              if (*(_QWORD *)&v670[v671 - 12] != 0x762E32336634762ELL || *(_DWORD *)&v670[v671 - 4] != 946419249)
                goto LABEL_578;
              switch(v671)
              {
                case 0x1BuLL:
                  if (*(_QWORD *)v670 != 0x6E6F656E2E6D7261
                    || *((_QWORD *)v670 + 1) != 0x2E616C6D6D66622ELL
                    || *((_QWORD *)v670 + 2) != 0x31762E3233663476
                    || *(_QWORD *)(v670 + 19) != 0x38693631762E3233)
                  {
                    break;
                  }
                  v394 = v8;
                  a2 = 0x100000F17;
                  goto LABEL_1161;
                case 0x1CuLL:
                  v394 = v8;
                  if (*(_QWORD *)v670 == 0x6E6F656E2E6D7261
                    && *((_QWORD *)v670 + 1) == 0x626C616C6D66622ELL
                    && *((_QWORD *)v670 + 2) == 0x762E32336634762ELL
                    && *((_DWORD *)v670 + 6) == 946419249)
                  {
                    a2 = 0x100000F15;
                  }
                  else if (*(_QWORD *)v670 ^ 0x6E6F656E2E6D7261 | *((_QWORD *)v670 + 1) ^ 0x746C616C6D66622ELL | *((_QWORD *)v670 + 2) ^ 0x762E32336634762ELL | *((unsigned int *)v670 + 6) ^ 0x38693631)
                  {
                    a2 = 0;
                  }
                  else
                  {
                    a2 = 0x100000F16;
                  }
                  goto LABEL_1161;
                case 0x1FuLL:
                  if (*(_QWORD *)v670 != 0x2E34366863726161
                    || *((_QWORD *)v670 + 1) != 0x6D66622E6E6F656ELL
                    || *((_QWORD *)v670 + 2) != 0x336634762E616C6DLL
                    || *(_QWORD *)(v670 + 23) != 0x38693631762E3233)
                  {
                    break;
                  }
                  v394 = v8;
                  a2 = 0x1000001CDLL;
                  goto LABEL_1161;
                case 0x20uLL:
                  v394 = v8;
                  if (*(_QWORD *)v670 == 0x2E34366863726161
                    && *((_QWORD *)v670 + 1) == 0x6D66622E6E6F656ELL
                    && *((_QWORD *)v670 + 2) == 0x6634762E626C616CLL
                    && *((_QWORD *)v670 + 3) == 0x38693631762E3233)
                  {
                    a2 = 0x1000001CBLL;
                  }
                  else
                  {
                    if (*(_QWORD *)v670 != 0x2E34366863726161
                      || *((_QWORD *)v670 + 1) != 0x6D66622E6E6F656ELL
                      || *((_QWORD *)v670 + 2) != 0x6634762E746C616CLL
                      || *((_QWORD *)v670 + 3) != 0x38693631762E3233)
                    {
                      break;
                    }
                    a2 = 0x1000001CCLL;
                  }
LABEL_1161:
                  v8 = v394;
                  if (HIDWORD(a2) && (_DWORD)a2)
                  {
                    v62 = (uint64_t *)a1[5];
                    goto LABEL_612;
                  }
                  break;
                default:
                  break;
              }
LABEL_1170:
              if (*(_BYTE *)(*a1[3][2] + 8) == 16)
                v611 = *a1[3][2];
              else
                v611 = 0;
              v612 = *((_DWORD *)a1 + 9);
              if (v612 && v611 && (*(_DWORD *)(v611 + 8) & 0x600) != 0x400)
              {
                v672.__r_.__value_.__r.__words[0] = (std::string::size_type)&v672.__r_.__value_.__r.__words[2];
                v672.__r_.__value_.__l.__size_ = 0x400000000;
                llvm::Intrinsic::getIntrinsicInfoTableEntries(v612);
                if (*(_DWORD *)v672.__r_.__value_.__l.__data_ == 13)
                {
                  v613 = v8;
                  v614 = a1[3];
                  v615 = (uint64_t **)llvm::StructType::get(*(uint64_t **)v611, *(_QWORD *)(v611 + 16), *(unsigned int *)(v611 + 12), 0);
                  v616 = (llvm::PointerType *)llvm::FunctionType::get(v615, v614[2] + 1, (8 * *((unsigned int *)v614 + 3) - 8) >> 3, *((_DWORD *)v614 + 2) > 0xFFu);
                  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
                  {
                    v628 = 0;
                    HIBYTE(v669) = 0;
                    v631 = __dst;
                    v620 = (size_t *)v613;
                    goto LABEL_1198;
                  }
                  v617 = ***a1;
                  v618 = *(_QWORD *)(v617 + 152);
                  v619 = *(unsigned int *)(v617 + 168);
                  v620 = (size_t *)v613;
                  if ((_DWORD)v619)
                  {
                    LODWORD(v621) = (v619 - 1) & (v14 ^ (a1 >> 9));
                    v622 = (uint64_t ****)(v618 + 16 * v621);
                    v623 = *v622;
                    if (*v622 == a1)
                      goto LABEL_1190;
                    v624 = 1;
                    while (v623 != (uint64_t ***)-4096)
                    {
                      v625 = v621 + v624++;
                      v621 = v625 & (v619 - 1);
                      v623 = *(uint64_t ****)(v618 + 16 * v621);
                      if (v623 == a1)
                      {
                        v622 = (uint64_t ****)(v618 + 16 * v621);
                        goto LABEL_1190;
                      }
                    }
                  }
                  v622 = (uint64_t ****)(v618 + 16 * v619);
LABEL_1190:
                  v627 = (unint64_t *)v622[1];
                  v630 = *v627;
                  v629 = v627 + 2;
                  v628 = v630;
                  if (v630 >= 0x7FFFFFFFFFFFFFF8)
                    abort();
                  if (v628 >= 0x17)
                  {
                    v632 = (v628 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v628 | 7) != 0x17)
                      v632 = v628 | 7;
                    v633 = v632 + 1;
                    v631 = (void **)operator new(v632 + 1);
                    __dst[1] = (void *)v628;
                    v669 = v633 | 0x8000000000000000;
                    __dst[0] = v631;
                  }
                  else
                  {
                    HIBYTE(v669) = v628;
                    v631 = __dst;
                    if (!v628)
                    {
LABEL_1198:
                      *((_BYTE *)v631 + v628) = 0;
                      if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
                      {
                        v644 = 0;
                        v643 = &byte_1C871356D;
LABEL_1207:
                        v677 = 773;
                        *(_QWORD *)&v675 = v643;
                        *((_QWORD *)&v675 + 1) = v644;
                        v676 = ".old";
                        llvm::Value::setName(a1, (uint64_t)&v675);
                        v646 = (_DWORD)a1[4] & 0xF;
                        v647 = (llvm::Type *)(*((_DWORD *)*a1 + 2) >> 8);
                        v677 = 260;
                        *(_QWORD *)&v675 = __dst;
                        v648 = (uint64_t)a1[5];
                        v649 = (char *)operator new(0x80uLL);
                        v650 = v649 + 8;
                        *((_DWORD *)v649 + 7) = *((_DWORD *)v649 + 7) & 0x38000000 | 0x40000000;
                        *(_QWORD *)v649 = 0;
                        llvm::Function::Function((uint64_t *)v649 + 1, v616, v646, v647, (uint64_t)&v675, v648);
                        *v620 = (size_t)v650;
                        v652 = llvm::Intrinsic::remangleIntrinsicFunction((llvm::Intrinsic *)a1, v651);
                        if (v653)
                          *v620 = v652;
                        if (SHIBYTE(v669) < 0)
                          operator delete(__dst[0]);
                        v445 = (void *)v672.__r_.__value_.__r.__words[0];
                        if ((std::string::size_type *)v672.__r_.__value_.__l.__data_ != &v672.__r_.__value_.__r.__words[2])
LABEL_1212:
                          free(v445);
                        return 1;
                      }
                      v634 = ***a1;
                      v635 = *(_QWORD *)(v634 + 152);
                      v636 = *(unsigned int *)(v634 + 168);
                      if ((_DWORD)v636)
                      {
                        LODWORD(v637) = (v636 - 1) & (v14 ^ (a1 >> 9));
                        v638 = (uint64_t ****)(v635 + 16 * v637);
                        v639 = *v638;
                        if (*v638 == a1)
                        {
LABEL_1206:
                          v642 = v638[1];
                          v645 = *v642;
                          v643 = (char *)(v642 + 2);
                          v644 = v645;
                          goto LABEL_1207;
                        }
                        v640 = 1;
                        while (v639 != (uint64_t ***)-4096)
                        {
                          v641 = v637 + v640++;
                          v637 = v641 & (v636 - 1);
                          v639 = *(uint64_t ****)(v635 + 16 * v637);
                          if (v639 == a1)
                          {
                            v638 = (uint64_t ****)(v635 + 16 * v637);
                            goto LABEL_1206;
                          }
                        }
                      }
                      v638 = (uint64_t ****)(v635 + 16 * v636);
                      goto LABEL_1206;
                    }
                  }
                  memmove(v631, v629, v628);
                  goto LABEL_1198;
                }
                if ((std::string::size_type *)v672.__r_.__value_.__l.__data_ != &v672.__r_.__value_.__r.__words[2])
                  free(v672.__r_.__value_.__l.__data_);
              }
              Declaration = llvm::Intrinsic::remangleIntrinsicFunction((llvm::Intrinsic *)a1, (llvm::Function *)a2);
              if (v626)
                goto LABEL_1187;
              return 0;
            }
            goto LABEL_254;
          }
          if (*(_QWORD *)v670 != 0x2E34366863726161
            || *((_QWORD *)v670 + 1) != 0x702E646165726874
            || *(_QWORD *)(v670 + 14) != 0x7265746E696F702ELL)
          {
LABEL_254:
            if (*(_QWORD *)v670 == 0x6E6F656E2E6D7261 && *((_QWORD *)v670 + 1) == 0x2E7364646171762ELL)
            {
              v211 = (uint64_t *)a1[5];
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)a1);
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
              v24 = 1;
              v212 = &v672;
              v213 = v211;
              v214 = 262;
            }
            else if (*(_QWORD *)v670 == 0x6E6F656E2E6D7261 && *((_QWORD *)v670 + 1) == 0x2E7564646171762ELL)
            {
              v227 = (uint64_t *)a1[5];
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)a1);
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
              v24 = 1;
              v212 = &v672;
              v213 = v227;
              v214 = 300;
            }
            else if (*(_QWORD *)v670 == 0x6E6F656E2E6D7261 && *((_QWORD *)v670 + 1) == 0x2E7362757371762ELL)
            {
              v291 = (uint64_t *)a1[5];
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)a1);
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
              v24 = 1;
              v212 = &v672;
              v213 = v291;
              v214 = 283;
            }
            else
            {
              if (*(_QWORD *)v670 != 0x6E6F656E2E6D7261 || *((_QWORD *)v670 + 1) != 0x2E7562757371762ELL)
              {
                if (v671 >= 0x11
                  && (*(_QWORD *)v670 == 0x2E34366863726161
                    ? (v118 = *((_QWORD *)v670 + 1) == 0x6464612E6E6F656ELL)
                    : (v118 = 0),
                      v118 ? (v119 = v670[16] == 112) : (v119 = 0),
                      v119))
                {
                  if (a1[12] != (uint64_t **)2)
                    goto LABEL_1170;
                  v113 = 0;
                  v450 = *a1[3][2];
                  if (v450 && (*(_DWORD *)(v450 + 8) & 0xFE) == 0x12)
                  {
                    if (*(unsigned __int8 *)(*(_QWORD *)(v450 + 24) + 8) <= 6u)
                    {
                      v451 = (uint64_t *)a1[5];
                      v672.__r_.__value_.__r.__words[0] = *a1[3][2];
                      v24 = 1;
                      *v8 = llvm::Intrinsic::getDeclaration(v451, 466, (uint64_t *)&v672, 1);
                      return v24;
                    }
                    v113 = 0;
                  }
                }
                else
                {
                  v113 = 0;
                }
                goto LABEL_279;
              }
              v306 = (uint64_t *)a1[5];
              if ((*((_WORD *)a1 + 9) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)a1);
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
              v24 = 1;
              v212 = &v672;
              v213 = v306;
              v214 = 311;
            }
LABEL_756:
            *v8 = llvm::Intrinsic::getDeclaration(v213, v214, (uint64_t *)v212, 1);
            return v24;
          }
        }
        v62 = (uint64_t *)a1[5];
        LODWORD(a2) = 294;
        goto LABEL_612;
      }
LABEL_229:
      v110 = (uint64_t *)a1[5];
      if ((*((_WORD *)a1 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)a1);
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
      v24 = 1;
      *v8 = llvm::Intrinsic::getDeclaration(v110, 8, (uint64_t *)&v672, 1);
      return v24;
    case 'c':
      if (v28 < 5)
        goto LABEL_1170;
      v69 = *(_DWORD *)v27 == 2053928035 && *((_BYTE *)v20 + 25) == 46;
      if (v69 && a1[12] == (uint64_t **)1)
      {
        if ((_DWORD)v13)
        {
          LODWORD(v70) = (v13 - 1) & (v14 ^ (a1 >> 9));
          v71 = (uint64_t ****)(v12 + 16 * v70);
          v72 = *v71;
          if (*v71 != a1)
          {
            v73 = 1;
            do
            {
              if (v72 == (uint64_t ***)-4096)
                goto LABEL_613;
              v74 = v70 + v73++;
              v70 = v74 & (v13 - 1);
              v72 = *(uint64_t ****)(v12 + 16 * v70);
            }
            while (v72 != a1);
            v71 = (uint64_t ****)(v12 + 16 * v70);
          }
        }
        else
        {
LABEL_613:
          v71 = (uint64_t ****)(v12 + 16 * v13);
        }
        v313 = (std::string::size_type *)v71[1];
        v314 = *v313;
        v674 = 773;
        v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v313 + 2);
        v672.__r_.__value_.__l.__size_ = v314;
        v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
        llvm::Value::setName(a1, (uint64_t)&v672);
        v315 = (uint64_t *)a1[5];
        if ((*((_WORD *)a1 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)a1);
        v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
        v24 = 1;
        v212 = &v672;
        v213 = v315;
        v214 = 52;
        goto LABEL_756;
      }
      v85 = *(_DWORD *)v27 == 2054452323 && *((_BYTE *)v20 + 25) == 46;
      if (!v85 || a1[12] != (uint64_t **)1)
        goto LABEL_1170;
      if (!(_DWORD)v13)
        goto LABEL_668;
      LODWORD(v86) = (v13 - 1) & (v14 ^ (a1 >> 9));
      v87 = (uint64_t ****)(v12 + 16 * v86);
      v88 = *v87;
      if (*v87 == a1)
        goto LABEL_669;
      v89 = 1;
      while (v88 != (uint64_t ***)-4096)
      {
        v90 = v86 + v89++;
        v86 = v90 & (v13 - 1);
        v88 = *(uint64_t ****)(v12 + 16 * v86);
        if (v88 == a1)
        {
          v87 = (uint64_t ****)(v12 + 16 * v86);
          goto LABEL_669;
        }
      }
LABEL_668:
      v87 = (uint64_t ****)(v12 + 16 * v13);
LABEL_669:
      v354 = (std::string::size_type *)v87[1];
      v355 = *v354;
      v674 = 773;
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v354 + 2);
      v672.__r_.__value_.__l.__size_ = v355;
      v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setName(a1, (uint64_t)&v672);
      v356 = (uint64_t *)a1[5];
      if ((*((_WORD *)a1 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)a1);
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
      v24 = 1;
      v212 = &v672;
      v213 = v356;
      v214 = 54;
      goto LABEL_756;
    case 'd':
      if (v21 != 14)
        goto LABEL_1170;
      v63 = *(_QWORD *)v27 == 0x756C61762E676264 && *((_BYTE *)v20 + 29) == 101;
      if (!v63 || a1[12] != (uint64_t **)4)
        goto LABEL_1170;
      if (!(_DWORD)v13)
        goto LABEL_610;
      LODWORD(v64) = (v13 - 1) & (v14 ^ (a1 >> 9));
      v65 = (uint64_t ****)(v12 + 16 * v64);
      v66 = *v65;
      if (*v65 == a1)
        goto LABEL_611;
      v67 = 1;
      while (v66 != (uint64_t ***)-4096)
      {
        v68 = v64 + v67++;
        v64 = v68 & (v13 - 1);
        v66 = *(uint64_t ****)(v12 + 16 * v64);
        if (v66 == a1)
        {
          v65 = (uint64_t ****)(v12 + 16 * v64);
          goto LABEL_611;
        }
      }
LABEL_610:
      v65 = (uint64_t ****)(v12 + 16 * v13);
LABEL_611:
      v310 = (std::string::size_type *)v65[1];
      v311 = *v310;
      v674 = 773;
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v310 + 2);
      v672.__r_.__value_.__l.__size_ = v311;
      v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setName(a1, (uint64_t)&v672);
      v62 = (uint64_t *)a1[5];
      LODWORD(a2) = 58;
      goto LABEL_612;
    case 'e':
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)&v672.__r_.__value_.__r.__words[2];
      v672.__r_.__value_.__l.__size_ = 0x200000000;
      v46 = atomic_load((unsigned __int8 *)&qword_1ED8042F0);
      if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_1ED8042F0))
      {
        llvm::Regex::Regex((uint64_t)&unk_1ED804310, "^experimental.vector.reduce.([a-z]+)\\.[a-z][0-9]+", 49, 0);
        __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ED804310, &dword_1C475E000);
        __cxa_guard_release(&qword_1ED8042F0);
      }
      if (!llvm::Regex::match((uint64_t)&unk_1ED804310, v670, v671, (uint64_t)&v672, 0))
        goto LABEL_816;
      v47 = *(unsigned __int16 **)(v672.__r_.__value_.__r.__words[0] + 16);
      v48 = *(_QWORD *)(v672.__r_.__value_.__r.__words[0] + 24);
      switch(v48)
      {
        case 2:
          if (*v47 != 29295)
            goto LABEL_816;
          v55 = 0x100000144;
          break;
        case 4:
          switch(*(_DWORD *)v47)
          {
            case 0x78616D73:
              v55 = 0x100000145;
              break;
            case 0x6E696D73:
              v55 = 0x100000146;
              break;
            case 0x78616D75:
              v55 = 0x100000147;
              break;
            case 0x6E696D75:
              v55 = 0x100000148;
              break;
            case 0x78616D66:
              v55 = 0x100000140;
              break;
            case 0x6E696D66:
              v55 = 0x100000141;
              break;
            default:
              v55 = 0;
              break;
          }
          break;
        case 3:
          if (*v47 == 25697 && *((_BYTE *)v47 + 2) == 100)
          {
            v55 = 0x10000013DLL;
          }
          else if (*v47 == 30061 && *((_BYTE *)v47 + 2) == 108)
          {
            v55 = 0x100000143;
          }
          else if (*v47 == 28257 && *((_BYTE *)v47 + 2) == 100)
          {
            v55 = 0x10000013ELL;
          }
          else
          {
            v52 = *v47;
            v53 = *((unsigned __int8 *)v47 + 2);
            if (v52 == 28536 && v53 == 114)
              v55 = 0x100000149;
            else
              v55 = 0;
          }
          break;
        default:
          goto LABEL_816;
      }
      if ((v55 & 0x300000000) != 0 && (_DWORD)v55)
      {
        if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
        {
          v437 = 0;
          v436 = &byte_1C871356D;
          goto LABEL_834;
        }
        v416 = ***a1;
        v417 = *(_QWORD *)(v416 + 152);
        v418 = *(unsigned int *)(v416 + 168);
        if ((_DWORD)v418)
        {
          LODWORD(v419) = (v418 - 1) & (v14 ^ (a1 >> 9));
          v420 = (uint64_t ****)(v417 + 16 * v419);
          v421 = *v420;
          if (*v420 == a1)
          {
LABEL_833:
            v435 = v420[1];
            v438 = *v435;
            v436 = (char *)(v435 + 2);
            v437 = v438;
LABEL_834:
            v677 = 773;
            *(_QWORD *)&v675 = v436;
            *((_QWORD *)&v675 + 1) = v437;
            v676 = ".old";
            llvm::Value::setName(a1, (uint64_t)&v675);
            v439 = (uint64_t *)a1[5];
            *(_QWORD *)&v675 = a1[3][2][1];
            v440 = v55;
            goto LABEL_838;
          }
          v422 = 1;
          while (v421 != (uint64_t ***)-4096)
          {
            v423 = v419 + v422++;
            v419 = v423 & (v418 - 1);
            v421 = *(uint64_t ****)(v417 + 16 * v419);
            if (v421 == a1)
            {
              v420 = (uint64_t ****)(v417 + 16 * v419);
              goto LABEL_833;
            }
          }
        }
        v420 = (uint64_t ****)(v417 + 16 * v418);
        goto LABEL_833;
      }
LABEL_816:
      v424 = atomic_load((unsigned __int8 *)&qword_1ED8042F8);
      if ((v424 & 1) == 0 && __cxa_guard_acquire(&qword_1ED8042F8))
      {
        llvm::Regex::Regex((uint64_t)&unk_1ED804320, "^experimental.vector.reduce.v2.([a-z]+)\\.[fi][0-9]+", 51, 0);
        __cxa_atexit((void (*)(void *))llvm::Regex::~Regex, &unk_1ED804320, &dword_1C475E000);
        __cxa_guard_release(&qword_1ED8042F8);
      }
      LODWORD(v672.__r_.__value_.__r.__words[1]) = 0;
      if (!llvm::Regex::match((uint64_t)&unk_1ED804320, v670, v671, (uint64_t)&v672, 0)
        || *(_QWORD *)(v672.__r_.__value_.__r.__words[0] + 24) != 4)
      {
        goto LABEL_821;
      }
      v425 = *(_DWORD **)(v672.__r_.__value_.__r.__words[0] + 16);
      if (*v425 == 1819635046)
      {
        v426 = 322;
      }
      else
      {
        if (*v425 != 1684300134)
        {
LABEL_821:
          if ((std::string::size_type *)v672.__r_.__value_.__l.__data_ != &v672.__r_.__value_.__r.__words[2])
            free(v672.__r_.__value_.__l.__data_);
          goto LABEL_1170;
        }
        v426 = 319;
      }
      if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
      {
        v443 = 0;
        v442 = &byte_1C871356D;
        goto LABEL_837;
      }
      v427 = ***a1;
      v428 = *(_QWORD *)(v427 + 152);
      v429 = *(unsigned int *)(v427 + 168);
      if ((_DWORD)v429)
      {
        LODWORD(v430) = (v429 - 1) & (v14 ^ (a1 >> 9));
        v431 = (uint64_t ****)(v428 + 16 * v430);
        v432 = *v431;
        if (*v431 == a1)
        {
LABEL_836:
          v441 = v431[1];
          v444 = *v441;
          v442 = (char *)(v441 + 2);
          v443 = v444;
LABEL_837:
          v677 = 773;
          *(_QWORD *)&v675 = v442;
          *((_QWORD *)&v675 + 1) = v443;
          v676 = ".old";
          llvm::Value::setName(a1, (uint64_t)&v675);
          *(_QWORD *)&v675 = a1[3][2][2];
          v439 = (uint64_t *)a1[5];
          v440 = v426;
LABEL_838:
          *v8 = llvm::Intrinsic::getDeclaration(v439, v440, (uint64_t *)&v675, 1);
          v445 = (void *)v672.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v672.__r_.__value_.__l.__data_ != &v672.__r_.__value_.__r.__words[2])
            goto LABEL_1212;
          return 1;
        }
        v433 = 1;
        while (v432 != (uint64_t ***)-4096)
        {
          v434 = v430 + v433++;
          v430 = v434 & (v429 - 1);
          v432 = *(uint64_t ****)(v428 + 16 * v430);
          if (v432 == a1)
          {
            v431 = (uint64_t ****)(v428 + 16 * v430);
            goto LABEL_836;
          }
        }
      }
      v431 = (uint64_t ****)(v428 + 16 * v429);
      goto LABEL_836;
    case 'i':
    case 'l':
      if (v28 < 0xE)
      {
        if (v28 < 0xC)
          goto LABEL_1170;
        goto LABEL_347;
      }
      if (*(_QWORD *)v27 == 0x656D69746566696CLL
        && *(uint64_t ***)((char *)v20 + 27) == (uint64_t **)0x74726174732E656DLL)
      {
        v91 = 168;
      }
      else
      {
        if (v28 < 0xF)
        {
          if (*(_QWORD *)v27 != 0x656D69746566696CLL || *(_DWORD *)((char *)v20 + 29) != 1684956462)
          {
LABEL_352:
            if (*(_QWORD *)v27 != 0x6E61697261766E69 || *(_QWORD *)(v27 + 5) != 0x646E652E746E6169)
              goto LABEL_396;
            v165 = 163;
            v166 = 2;
LABEL_368:
            v175 = a1[3][2];
            *(_QWORD *)&v675 = 0;
            *(_QWORD *)&v675 = v175[v166 + 1];
            if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
            {
              v185 = 0;
              v186 = &byte_1C871356D;
LABEL_377:
              v188 = 1;
              v667 = v165;
              sub_1C53CF274(v165, (uint64_t *)&v675, 1, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
              v189 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
              v190 = (void *)v672.__r_.__value_.__r.__words[0];
              if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                a2 = (std::string::size_type)&v672;
              else
                a2 = v672.__r_.__value_.__r.__words[0];
              size = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
              if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = v672.__r_.__value_.__l.__size_;
              if (v185 == size)
              {
                if (v185)
                  v188 = memcmp(v186, (const void *)a2, v185) != 0;
                else
                  v188 = 0;
              }
              if (v189 < 0)
                operator delete(v190);
              if (v188)
              {
                if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
                {
                  v192 = ***a1;
                  v193 = *(_QWORD *)(v192 + 152);
                  v194 = *(unsigned int *)(v192 + 168);
                  v195 = v667;
                  if ((_DWORD)v194)
                  {
                    LODWORD(v196) = (v194 - 1) & (v14 ^ (a1 >> 9));
                    v197 = (uint64_t ****)(v193 + 16 * v196);
                    v198 = *v197;
                    if (*v197 != a1)
                    {
                      v199 = 1;
                      do
                      {
                        if (v198 == (uint64_t ***)-4096)
                          goto LABEL_423;
                        v200 = v196 + v199++;
                        v196 = v200 & (v194 - 1);
                        v198 = *(uint64_t ****)(v193 + 16 * v196);
                      }
                      while (v198 != a1);
                      v197 = (uint64_t ****)(v193 + 16 * v196);
                    }
                  }
                  else
                  {
LABEL_423:
                    v197 = (uint64_t ****)(v193 + 16 * v194);
                  }
                  v216 = v197[1];
                  v219 = (std::string::size_type)*v216;
                  v217 = (char *)(v216 + 2);
                  v218 = v219;
                }
                else
                {
                  v218 = 0;
                  v217 = &byte_1C871356D;
                  v195 = v667;
                }
                v674 = 773;
                v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
                v672.__r_.__value_.__l.__size_ = v218;
                v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setName(a1, (uint64_t)&v672);
                v62 = (uint64_t *)a1[5];
                v61 = (std::string *)&v675;
                LODWORD(a2) = v195;
                goto LABEL_640;
              }
LABEL_396:
              if (v28 < 0x17)
                goto LABEL_1170;
              v201 = *(_QWORD *)v27 == 0x6E61697261766E69 && *(_QWORD *)(v27 + 8) == 0x2E70756F72672E74;
              if (!v201 || *(_QWORD *)(v27 + 15) != 0x726569727261622ELL)
                goto LABEL_1170;
              *(_QWORD *)&v675 = a1[3][2][1];
              if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
              {
                v303 = 0;
                v302 = &byte_1C871356D;
                goto LABEL_593;
              }
              v203 = ***a1;
              v204 = *(_QWORD *)(v203 + 152);
              v205 = *(unsigned int *)(v203 + 168);
              if ((_DWORD)v205)
              {
                LODWORD(v206) = (v205 - 1) & (v14 ^ (a1 >> 9));
                v207 = (uint64_t ****)(v204 + 16 * v206);
                v208 = *v207;
                if (*v207 == a1)
                {
LABEL_592:
                  v301 = v207[1];
                  v304 = (std::string::size_type)*v301;
                  v302 = (char *)(v301 + 2);
                  v303 = v304;
LABEL_593:
                  v674 = 773;
                  v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v302;
                  v672.__r_.__value_.__l.__size_ = v303;
                  v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                  llvm::Value::setName(a1, (uint64_t)&v672);
                  v213 = (uint64_t *)a1[5];
                  v24 = 1;
                  v212 = (std::string *)&v675;
                  v214 = 166;
                  goto LABEL_756;
                }
                v209 = 1;
                while (v208 != (uint64_t ***)-4096)
                {
                  v210 = v206 + v209++;
                  v206 = v210 & (v205 - 1);
                  v208 = *(uint64_t ****)(v204 + 16 * v206);
                  if (v208 == a1)
                  {
                    v207 = (uint64_t ****)(v204 + 16 * v206);
                    goto LABEL_592;
                  }
                }
              }
              v207 = (uint64_t ****)(v204 + 16 * v205);
              goto LABEL_592;
            }
            v176 = ***a1;
            v177 = *(_QWORD *)(v176 + 152);
            v178 = *(unsigned int *)(v176 + 168);
            if ((_DWORD)v178)
            {
              LODWORD(v179) = (v178 - 1) & (v14 ^ (a1 >> 9));
              v180 = (uint64_t ****)(v177 + 16 * v179);
              v181 = *v180;
              if (*v180 == a1)
              {
LABEL_376:
                v184 = v180[1];
                v187 = (size_t)*v184;
                v186 = (char *)(v184 + 2);
                v185 = v187;
                goto LABEL_377;
              }
              v182 = 1;
              while (v181 != (uint64_t ***)-4096)
              {
                v183 = v179 + v182++;
                v179 = v183 & (v178 - 1);
                v181 = *(uint64_t ****)(v177 + 16 * v179);
                if (v181 == a1)
                {
                  v180 = (uint64_t ****)(v177 + 16 * v179);
                  goto LABEL_376;
                }
              }
            }
            v180 = (uint64_t ****)(v177 + 16 * v178);
            goto LABEL_376;
          }
LABEL_367:
          v165 = 167;
          v166 = 1;
          goto LABEL_368;
        }
        if (*(_QWORD *)v27 != 0x6E61697261766E69
          || *(uint64_t ***)((char *)v20 + 28) != (uint64_t **)0x74726174732E746ELL)
        {
LABEL_347:
          if (*(_QWORD *)v27 != 0x656D69746566696CLL || *(_DWORD *)(v27 + 8) != 1684956462)
          {
            if (v28 < 0xD)
              goto LABEL_1170;
            goto LABEL_352;
          }
          goto LABEL_367;
        }
        v91 = 164;
      }
      *(_QWORD *)&v675 = a1[3][2][2];
      v95 = **v10;
      v96 = *(_QWORD *)(v95 + 152);
      v97 = *(unsigned int *)(v95 + 168);
      if (!(_DWORD)v97)
        goto LABEL_337;
      LODWORD(v98) = (v97 - 1) & (v14 ^ (a1 >> 9));
      v99 = (uint64_t ****)(v96 + 16 * v98);
      v100 = *v99;
      if (*v99 != a1)
      {
        v101 = 1;
        while (v100 != (uint64_t ***)-4096)
        {
          v102 = v98 + v101++;
          v98 = v102 & (v97 - 1);
          v100 = *(uint64_t ****)(v96 + 16 * v98);
          if (v100 == a1)
          {
            v99 = (uint64_t ****)(v96 + 16 * v98);
            goto LABEL_338;
          }
        }
LABEL_337:
        v99 = (uint64_t ****)(v96 + 16 * v97);
      }
LABEL_338:
      v155 = (size_t *)v99[1];
      v158 = *v155;
      v157 = v155 + 2;
      v156 = v158;
      v159 = 1;
      v666 = v91;
      sub_1C53CF274(v91, (uint64_t *)&v675, 1, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
      v160 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
      v161 = (void *)v672.__r_.__value_.__r.__words[0];
      if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        a2 = (std::string::size_type)&v672;
      else
        a2 = v672.__r_.__value_.__r.__words[0];
      v162 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
      if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v162 = v672.__r_.__value_.__l.__size_;
      if (v156 == v162)
      {
        if (v156)
        {
          v159 = memcmp(v157, (const void *)a2, v156) != 0;
          if (v160 < 0)
            goto LABEL_346;
LABEL_359:
          if (!v159)
            goto LABEL_347;
LABEL_360:
          if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
          {
            v167 = ***a1;
            v168 = *(_QWORD *)(v167 + 152);
            v169 = *(unsigned int *)(v167 + 168);
            if ((_DWORD)v169)
            {
              LODWORD(v170) = (v169 - 1) & (v14 ^ (a1 >> 9));
              v171 = (uint64_t ****)(v168 + 16 * v170);
              v172 = *v171;
              if (*v171 != a1)
              {
                v173 = 1;
                do
                {
                  if (v172 == (uint64_t ***)-4096)
                    goto LABEL_469;
                  v174 = v170 + v173++;
                  v170 = v174 & (v169 - 1);
                  v172 = *(uint64_t ****)(v168 + 16 * v170);
                }
                while (v172 != a1);
                v171 = (uint64_t ****)(v168 + 16 * v170);
              }
            }
            else
            {
LABEL_469:
              v171 = (uint64_t ****)(v168 + 16 * v169);
            }
            v230 = v171[1];
            v233 = (std::string::size_type)*v230;
            v231 = (char *)(v230 + 2);
            v232 = v233;
          }
          else
          {
            v232 = 0;
            v231 = &byte_1C871356D;
          }
          v674 = 773;
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
          v672.__r_.__value_.__l.__size_ = v232;
          v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
          llvm::Value::setName(a1, (uint64_t)&v672);
          v62 = (uint64_t *)a1[5];
          v61 = (std::string *)&v675;
          LODWORD(a2) = v666;
          goto LABEL_640;
        }
        v159 = 0;
        if ((SHIBYTE(v672.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_359;
      }
      else if ((SHIBYTE(v672.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_359;
      }
LABEL_346:
      operator delete(v161);
      if (!v159)
        goto LABEL_347;
      goto LABEL_360;
    case 'm':
      if (v28 < 0xC)
      {
        if (v28 < 7)
          goto LABEL_1170;
LABEL_994:
        v530 = *(_DWORD *)v27 == 1668113773 && *(_DWORD *)(v27 + 3) == 779710563;
        if (v530 && a1[12] == (uint64_t **)5)
        {
          if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
          {
            v558 = 0;
            v557 = &byte_1C871356D;
            goto LABEL_1032;
          }
          v531 = ***a1;
          v532 = *(_QWORD *)(v531 + 152);
          v533 = *(unsigned int *)(v531 + 168);
          if ((_DWORD)v533)
          {
            LODWORD(v534) = (v533 - 1) & (v14 ^ (a1 >> 9));
            v535 = (uint64_t ****)(v532 + 16 * v534);
            v536 = *v535;
            if (*v535 == a1)
            {
LABEL_1031:
              v556 = v535[1];
              v559 = (std::string::size_type)*v556;
              v557 = (char *)(v556 + 2);
              v558 = v559;
LABEL_1032:
              v674 = 773;
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v557;
              v672.__r_.__value_.__l.__size_ = v558;
              v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setName(a1, (uint64_t)&v672);
              v61 = (std::string *)(a1[3][2] + 1);
              v62 = (uint64_t *)a1[5];
              LODWORD(a2) = 194;
LABEL_1040:
              v312 = 3;
              goto LABEL_1041;
            }
            v537 = 1;
            while (v536 != (uint64_t ***)-4096)
            {
              v538 = v534 + v537++;
              v534 = v538 & (v533 - 1);
              v536 = *(uint64_t ****)(v532 + 16 * v534);
              if (v536 == a1)
              {
                v535 = (uint64_t ****)(v532 + 16 * v534);
                goto LABEL_1031;
              }
            }
          }
          v535 = (uint64_t ****)(v532 + 16 * v533);
          goto LABEL_1031;
        }
        if (v28 >= 8 && *(_QWORD *)v27 == 0x2E65766F6D6D656DLL && a1[12] == (uint64_t **)5)
        {
          if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
          {
            v569 = 0;
            v568 = &byte_1C871356D;
            goto LABEL_1039;
          }
          v539 = ***a1;
          v540 = *(_QWORD *)(v539 + 152);
          v541 = *(unsigned int *)(v539 + 168);
          if ((_DWORD)v541)
          {
            LODWORD(v542) = (v541 - 1) & (v14 ^ (a1 >> 9));
            v543 = (uint64_t ****)(v540 + 16 * v542);
            v544 = *v543;
            if (*v543 == a1)
            {
LABEL_1038:
              v567 = v543[1];
              v570 = (std::string::size_type)*v567;
              v568 = (char *)(v567 + 2);
              v569 = v570;
LABEL_1039:
              v674 = 773;
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v568;
              v672.__r_.__value_.__l.__size_ = v569;
              v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setName(a1, (uint64_t)&v672);
              v61 = (std::string *)(a1[3][2] + 1);
              v62 = (uint64_t *)a1[5];
              LODWORD(a2) = 197;
              goto LABEL_1040;
            }
            v545 = 1;
            while (v544 != (uint64_t ***)-4096)
            {
              v546 = v542 + v545++;
              v542 = v546 & (v541 - 1);
              v544 = *(uint64_t ****)(v540 + 16 * v542);
              if (v544 == a1)
              {
                v543 = (uint64_t ****)(v540 + 16 * v542);
                goto LABEL_1038;
              }
            }
          }
          v543 = (uint64_t ****)(v540 + 16 * v541);
          goto LABEL_1038;
        }
        v547 = *(_DWORD *)v27 == 1936549229 && *(_DWORD *)(v27 + 3) == 779380083;
        if (!v547 || a1[12] != (uint64_t **)5)
          goto LABEL_1170;
        if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
        {
          v562 = 0;
          v561 = &byte_1C871356D;
          goto LABEL_1035;
        }
        v548 = ***a1;
        v549 = *(_QWORD *)(v548 + 152);
        v550 = *(unsigned int *)(v548 + 168);
        if ((_DWORD)v550)
        {
          LODWORD(v551) = (v550 - 1) & (v14 ^ (a1 >> 9));
          v552 = (uint64_t ****)(v549 + 16 * v551);
          v553 = *v552;
          if (*v552 == a1)
          {
LABEL_1034:
            v560 = v552[1];
            v563 = (std::string::size_type)*v560;
            v561 = (char *)(v560 + 2);
            v562 = v563;
LABEL_1035:
            v674 = 773;
            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v561;
            v672.__r_.__value_.__l.__size_ = v562;
            v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setName(a1, (uint64_t)&v672);
            v564 = a1[3][2];
            v565 = v564[1];
            v566 = v564[3];
            v672.__r_.__value_.__r.__words[0] = v565;
            v672.__r_.__value_.__l.__size_ = v566;
            v62 = (uint64_t *)a1[5];
            v61 = &v672;
            LODWORD(a2) = 199;
            goto LABEL_1036;
          }
          v554 = 1;
          while (v553 != (uint64_t ***)-4096)
          {
            v555 = v551 + v554++;
            v551 = v555 & (v550 - 1);
            v553 = *(uint64_t ****)(v549 + 16 * v551);
            if (v553 == a1)
            {
              v552 = (uint64_t ****)(v549 + 16 * v551);
              goto LABEL_1034;
            }
          }
        }
        v552 = (uint64_t ****)(v549 + 16 * v550);
        goto LABEL_1034;
      }
      if (*(_QWORD *)v27 != 0x6C2E64656B73616DLL || *(_DWORD *)((char *)v20 + 29) != 778330479)
        goto LABEL_499;
      v675 = 0uLL;
      *(_QWORD *)&v675 = *a1[3][2];
      if ((*((_BYTE *)a1 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)a1);
        v129 = *((_DWORD *)a1 + 5);
        *((_QWORD *)&v675 + 1) = *a1[11];
        if ((v129 & 0x10000000) == 0)
        {
          v234 = v8;
          v237 = 0;
          v236 = &byte_1C871356D;
LABEL_479:
          sub_1C53CF274(185, (uint64_t *)&v675, 2, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
          v239 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
          v240 = (void *)v672.__r_.__value_.__r.__words[0];
          if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            a2 = (std::string::size_type)&v672;
          else
            a2 = v672.__r_.__value_.__r.__words[0];
          v241 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
          if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v241 = v672.__r_.__value_.__l.__size_;
          if (v237 == v241)
          {
            v8 = v234;
            if (v237)
              v242 = memcmp(v236, (const void *)a2, v237) != 0;
            else
              v242 = 0;
          }
          else
          {
            v242 = 1;
            v8 = v234;
          }
          if (v239 < 0)
            operator delete(v240);
          if (v242)
          {
            if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
            {
              v243 = ***a1;
              v244 = *(_QWORD *)(v243 + 152);
              v245 = *(unsigned int *)(v243 + 168);
              if ((_DWORD)v245)
              {
                LODWORD(v246) = (v245 - 1) & (v14 ^ (a1 >> 9));
                v247 = (uint64_t ****)(v244 + 16 * v246);
                v248 = *v247;
                if (*v247 != a1)
                {
                  v249 = 1;
                  do
                  {
                    if (v248 == (uint64_t ***)-4096)
                      goto LABEL_634;
                    v250 = v246 + v249++;
                    v246 = v250 & (v245 - 1);
                    v248 = *(uint64_t ****)(v244 + 16 * v246);
                  }
                  while (v248 != a1);
                  v247 = (uint64_t ****)(v244 + 16 * v246);
                }
              }
              else
              {
LABEL_634:
                v247 = (uint64_t ****)(v244 + 16 * v245);
              }
              v326 = v247[1];
              v329 = (std::string::size_type)*v326;
              v327 = (char *)(v326 + 2);
              v328 = v329;
            }
            else
            {
              v328 = 0;
              v327 = &byte_1C871356D;
            }
            v674 = 773;
            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
            v672.__r_.__value_.__l.__size_ = v328;
            v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setName(a1, (uint64_t)&v672);
            v62 = (uint64_t *)a1[5];
            v61 = (std::string *)&v675;
            LODWORD(a2) = 185;
            goto LABEL_1036;
          }
LABEL_499:
          if (v28 < 0xD)
            goto LABEL_994;
          if (*(_QWORD *)v27 != 0x732E64656B73616DLL || *(_QWORD *)(v27 + 5) != 0x2E65726F74732E64)
          {
LABEL_694:
            if (v28 < 0xE)
              goto LABEL_994;
            if (*(_QWORD *)v27 != 0x672E64656B73616DLL || *(_QWORD *)(v27 + 6) != 0x2E7265687461672ELL)
            {
LABEL_871:
              if (v28 < 0xF)
                goto LABEL_994;
              if (*(_QWORD *)v27 != 0x732E64656B73616DLL || *(_QWORD *)(v27 + 7) != 0x2E72657474616373)
                goto LABEL_994;
              v469 = a1[3][2];
              v675 = 0uLL;
              v675 = *(_OWORD *)(v469 + 1);
              if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
              {
                v513 = v8;
                v516 = 0;
                v515 = &byte_1C871356D;
LABEL_973:
                sub_1C53CF274(186, (uint64_t *)&v675, 2, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
                v518 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
                v519 = (void *)v672.__r_.__value_.__r.__words[0];
                if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  a2 = (std::string::size_type)&v672;
                else
                  a2 = v672.__r_.__value_.__r.__words[0];
                v520 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
                if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v520 = v672.__r_.__value_.__l.__size_;
                if (v516 == v520)
                {
                  if (v516)
                    v521 = memcmp(v515, (const void *)a2, v516) != 0;
                  else
                    v521 = 0;
                }
                else
                {
                  v521 = 1;
                }
                if (v518 < 0)
                  operator delete(v519);
                if (!v521)
                {
                  v8 = v513;
                  goto LABEL_994;
                }
                if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
                {
                  v607 = 0;
                  v606 = &byte_1C871356D;
                  goto LABEL_1155;
                }
                v522 = ***a1;
                v523 = *(_QWORD *)(v522 + 152);
                v524 = *(unsigned int *)(v522 + 168);
                if ((_DWORD)v524)
                {
                  LODWORD(v525) = (v524 - 1) & (v14 ^ (a1 >> 9));
                  v526 = (uint64_t ****)(v523 + 16 * v525);
                  v527 = *v526;
                  if (*v526 == a1)
                  {
LABEL_1154:
                    v605 = v526[1];
                    v608 = (std::string::size_type)*v605;
                    v606 = (char *)(v605 + 2);
                    v607 = v608;
LABEL_1155:
                    v674 = 773;
                    v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v606;
                    v672.__r_.__value_.__l.__size_ = v607;
                    v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                    llvm::Value::setName(a1, (uint64_t)&v672);
                    *v513 = llvm::Intrinsic::getDeclaration((uint64_t *)a1[5], 186, (uint64_t *)&v675, 2);
                    return 1;
                  }
                  v528 = 1;
                  while (v527 != (uint64_t ***)-4096)
                  {
                    v529 = v525 + v528++;
                    v525 = v529 & (v524 - 1);
                    v527 = *(uint64_t ****)(v523 + 16 * v525);
                    if (v527 == a1)
                    {
                      v526 = (uint64_t ****)(v523 + 16 * v525);
                      goto LABEL_1154;
                    }
                  }
                }
                v526 = (uint64_t ****)(v523 + 16 * v524);
                goto LABEL_1154;
              }
              v470 = ***a1;
              v471 = *(_QWORD *)(v470 + 152);
              v472 = *(unsigned int *)(v470 + 168);
              if ((_DWORD)v472)
              {
                LODWORD(v473) = (v472 - 1) & (v14 ^ (a1 >> 9));
                v474 = (uint64_t ****)(v471 + 16 * v473);
                v475 = *v474;
                if (*v474 == a1)
                {
LABEL_972:
                  v513 = v8;
                  v514 = v474[1];
                  v517 = (size_t)*v514;
                  v515 = (char *)(v514 + 2);
                  v516 = v517;
                  goto LABEL_973;
                }
                v476 = 1;
                while (v475 != (uint64_t ***)-4096)
                {
                  v477 = v473 + v476++;
                  v473 = v477 & (v472 - 1);
                  v475 = *(uint64_t ****)(v471 + 16 * v473);
                  if (v475 == a1)
                  {
                    v474 = (uint64_t ****)(v471 + 16 * v473);
                    goto LABEL_972;
                  }
                }
              }
              v474 = (uint64_t ****)(v471 + 16 * v472);
              goto LABEL_972;
            }
            v675 = 0uLL;
            *(_QWORD *)&v675 = *a1[3][2];
            if ((*((_BYTE *)a1 + 18) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)a1);
            *((_QWORD *)&v675 + 1) = *a1[11];
            if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
            {
              v454 = 0;
              v453 = &byte_1C871356D;
LABEL_851:
              sub_1C53CF274(184, (uint64_t *)&v675, 2, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
              v456 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
              v457 = (void *)v672.__r_.__value_.__r.__words[0];
              if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                a2 = (std::string::size_type)&v672;
              else
                a2 = v672.__r_.__value_.__r.__words[0];
              v458 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
              if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v458 = v672.__r_.__value_.__l.__size_;
              if (v454 == v458)
              {
                if (v454)
                  v459 = memcmp(v453, (const void *)a2, v454) != 0;
                else
                  v459 = 0;
              }
              else
              {
                v459 = 1;
              }
              if (v456 < 0)
                operator delete(v457);
              if (!v459)
                goto LABEL_871;
              if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
              {
                v511 = 0;
                v510 = &byte_1C871356D;
                goto LABEL_967;
              }
              v460 = ***a1;
              v461 = *(_QWORD *)(v460 + 152);
              v462 = *(unsigned int *)(v460 + 168);
              if ((_DWORD)v462)
              {
                LODWORD(v463) = (v462 - 1) & (v14 ^ (a1 >> 9));
                v464 = (uint64_t ****)(v461 + 16 * v463);
                v465 = *v464;
                if (*v464 == a1)
                {
LABEL_966:
                  v509 = v464[1];
                  v512 = (std::string::size_type)*v509;
                  v510 = (char *)(v509 + 2);
                  v511 = v512;
LABEL_967:
                  v674 = 773;
                  v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v510;
                  v672.__r_.__value_.__l.__size_ = v511;
                  v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                  llvm::Value::setName(a1, (uint64_t)&v672);
                  v62 = (uint64_t *)a1[5];
                  v61 = (std::string *)&v675;
                  LODWORD(a2) = 184;
LABEL_1036:
                  v312 = 2;
LABEL_1041:
                  Declaration = llvm::Intrinsic::getDeclaration(v62, a2, (uint64_t *)v61, v312);
LABEL_1187:
                  *v8 = Declaration;
                  return 1;
                }
                v466 = 1;
                while (v465 != (uint64_t ***)-4096)
                {
                  v467 = v463 + v466++;
                  v463 = v467 & (v462 - 1);
                  v465 = *(uint64_t ****)(v461 + 16 * v463);
                  if (v465 == a1)
                  {
                    v464 = (uint64_t ****)(v461 + 16 * v463);
                    goto LABEL_966;
                  }
                }
              }
              v464 = (uint64_t ****)(v461 + 16 * v462);
              goto LABEL_966;
            }
            v374 = ***a1;
            v375 = *(_QWORD *)(v374 + 152);
            v376 = *(unsigned int *)(v374 + 168);
            if ((_DWORD)v376)
            {
              LODWORD(v377) = (v376 - 1) & (v14 ^ (a1 >> 9));
              v378 = (uint64_t ****)(v375 + 16 * v377);
              v379 = *v378;
              if (*v378 == a1)
              {
LABEL_850:
                v452 = v378[1];
                v455 = (size_t)*v452;
                v453 = (char *)(v452 + 2);
                v454 = v455;
                goto LABEL_851;
              }
              v380 = 1;
              while (v379 != (uint64_t ***)-4096)
              {
                v381 = v377 + v380++;
                v377 = v381 & (v376 - 1);
                v379 = *(uint64_t ****)(v375 + 16 * v377);
                if (v379 == a1)
                {
                  v378 = (uint64_t ****)(v375 + 16 * v377);
                  goto LABEL_850;
                }
              }
            }
            v378 = (uint64_t ****)(v375 + 16 * v376);
            goto LABEL_850;
          }
          v252 = a1[3][2];
          v675 = 0uLL;
          v675 = *(_OWORD *)(v252 + 1);
          if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
          {
            v359 = 0;
            v358 = &byte_1C871356D;
LABEL_674:
            sub_1C53CF274(187, (uint64_t *)&v675, 2, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
            v361 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
            v362 = (void *)v672.__r_.__value_.__r.__words[0];
            if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              a2 = (std::string::size_type)&v672;
            else
              a2 = v672.__r_.__value_.__r.__words[0];
            v363 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
            if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v363 = v672.__r_.__value_.__l.__size_;
            if (v359 == v363)
            {
              if (v359)
                v364 = memcmp(v358, (const void *)a2, v359) != 0;
              else
                v364 = 0;
            }
            else
            {
              v364 = 1;
            }
            if (v361 < 0)
              operator delete(v362);
            if (!v364)
              goto LABEL_694;
            if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
            {
              v448 = 0;
              v447 = &byte_1C871356D;
              goto LABEL_843;
            }
            v365 = ***a1;
            v366 = *(_QWORD *)(v365 + 152);
            v367 = *(unsigned int *)(v365 + 168);
            if ((_DWORD)v367)
            {
              LODWORD(v368) = (v367 - 1) & (v14 ^ (a1 >> 9));
              v369 = (uint64_t ****)(v366 + 16 * v368);
              v370 = *v369;
              if (*v369 == a1)
              {
LABEL_842:
                v446 = v369[1];
                v449 = (std::string::size_type)*v446;
                v447 = (char *)(v446 + 2);
                v448 = v449;
LABEL_843:
                v674 = 773;
                v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v447;
                v672.__r_.__value_.__l.__size_ = v448;
                v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setName(a1, (uint64_t)&v672);
                v62 = (uint64_t *)a1[5];
                v61 = (std::string *)&v675;
                LODWORD(a2) = 187;
                goto LABEL_1036;
              }
              v371 = 1;
              while (v370 != (uint64_t ***)-4096)
              {
                v372 = v368 + v371++;
                v368 = v372 & (v367 - 1);
                v370 = *(uint64_t ****)(v366 + 16 * v368);
                if (v370 == a1)
                {
                  v369 = (uint64_t ****)(v366 + 16 * v368);
                  goto LABEL_842;
                }
              }
            }
            v369 = (uint64_t ****)(v366 + 16 * v367);
            goto LABEL_842;
          }
          v253 = ***a1;
          v254 = *(_QWORD *)(v253 + 152);
          v255 = *(unsigned int *)(v253 + 168);
          if ((_DWORD)v255)
          {
            LODWORD(v256) = (v255 - 1) & (v14 ^ (a1 >> 9));
            v257 = (uint64_t ****)(v254 + 16 * v256);
            v258 = *v257;
            if (*v257 == a1)
            {
LABEL_673:
              v357 = v257[1];
              v360 = (size_t)*v357;
              v358 = (char *)(v357 + 2);
              v359 = v360;
              goto LABEL_674;
            }
            v259 = 1;
            while (v258 != (uint64_t ***)-4096)
            {
              v260 = v256 + v259++;
              v256 = v260 & (v255 - 1);
              v258 = *(uint64_t ****)(v254 + 16 * v256);
              if (v258 == a1)
              {
                v257 = (uint64_t ****)(v254 + 16 * v256);
                goto LABEL_673;
              }
            }
          }
          v257 = (uint64_t ****)(v254 + 16 * v255);
          goto LABEL_673;
        }
      }
      else
      {
        *((_QWORD *)&v675 + 1) = *a1[11];
      }
      v130 = ***a1;
      v131 = *(_QWORD *)(v130 + 152);
      v132 = *(unsigned int *)(v130 + 168);
      if (!(_DWORD)v132)
        goto LABEL_477;
      LODWORD(v133) = (v132 - 1) & (v14 ^ (a1 >> 9));
      v134 = (uint64_t ****)(v131 + 16 * v133);
      v135 = *v134;
      if (*v134 != a1)
      {
        v136 = 1;
        while (v135 != (uint64_t ***)-4096)
        {
          v137 = v133 + v136++;
          v133 = v137 & (v132 - 1);
          v135 = *(uint64_t ****)(v131 + 16 * v133);
          if (v135 == a1)
          {
            v134 = (uint64_t ****)(v131 + 16 * v133);
            goto LABEL_478;
          }
        }
LABEL_477:
        v134 = (uint64_t ****)(v131 + 16 * v132);
      }
LABEL_478:
      v234 = v8;
      v235 = v134[1];
      v238 = (size_t)*v235;
      v236 = (char *)(v235 + 2);
      v237 = v238;
      goto LABEL_479;
    case 'n':
      if (v28 < 5)
        goto LABEL_1170;
      if (*(_DWORD *)v27 != 1836480110 || *((_BYTE *)v20 + 25) != 46)
        goto LABEL_1170;
      v76 = (_DWORD *)((char *)v20 + 26);
      v77 = v21 - 10;
      if (v21 != 15)
      {
        if (v21 != 16)
        {
          v81 = (uint64_t *)a2;
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v20 + 26;
          v672.__r_.__value_.__l.__size_ = v21 - 10;
          LOWORD(v672.__r_.__value_.__r.__words[2]) = 0;
          goto LABEL_716;
        }
        v78 = *v76 == 1986359906 && *((_WORD *)v20 + 15) == 12851;
        if (v78 || (*v76 == 1986359906 ? (v79 = *((unsigned __int16 *)v20 + 15) == 13366) : (v79 = 0), v79))
        {
          v214 = 8;
        }
        else
        {
          if (*v76 != 1668312944 || *((_WORD *)v20 + 15) != 26926)
          {
            v81 = (uint64_t *)a2;
            goto LABEL_475;
          }
          v214 = 53;
        }
        if (a1[12] != (uint64_t **)1)
        {
          v81 = v8;
LABEL_475:
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v20 + 26;
          v672.__r_.__value_.__l.__size_ = 6;
          LOWORD(v672.__r_.__value_.__r.__words[2]) = 0;
          if (memcmp(v76, "abs.ll", v77))
            goto LABEL_716;
          goto LABEL_715;
        }
LABEL_590:
        v213 = (uint64_t *)a1[5];
        v672.__r_.__value_.__r.__words[0] = *a1[3][2];
        v24 = 1;
        v212 = &v672;
        goto LABEL_756;
      }
      if (*v76 == 779775075 && *((_BYTE *)v20 + 30) == 105)
      {
        if (a1[12] == (uint64_t **)1)
        {
          v214 = 52;
          goto LABEL_590;
        }
        v81 = (uint64_t *)a2;
      }
      else
      {
        v81 = (uint64_t *)a2;
        v77 = 5;
      }
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v20 + 26;
      v672.__r_.__value_.__l.__size_ = v77;
      LOWORD(v672.__r_.__value_.__r.__words[2]) = 0;
      if (*v76 != 779313761 || *((_BYTE *)v20 + 30) != 105)
        goto LABEL_716;
LABEL_715:
      LOWORD(v672.__r_.__value_.__r.__words[2]) = 257;
LABEL_716:
      v383 = sub_1C534A194((uint64_t)&v672, "clz.ll", 6, "popc.ll", 7, "h2f", 3, 1);
      v385 = sub_1C534A1F4(v383, "max.i", 5, "max.ll", 6, "max.ui", 6, v384, "max.ull", 7, 1);
      v387 = sub_1C534A1F4(v385, "min.i", 5, "min.ll", 6, "min.ui", 6, v386, "min.ull", 7, 1);
      v388 = sub_1C534A270(v387, "atomic.load.add.f32.p", 0x15uLL);
      v389 = sub_1C534A270(v388, "atomic.load.add.f64.p", 0x15uLL);
      v8 = v81;
      if (!*(_BYTE *)(v389 + 17) || !*(_BYTE *)(v389 + 16))
        goto LABEL_1170;
LABEL_718:
      *v8 = 0;
      return 1;
    case 'o':
      if (v28 < 0xB)
        goto LABEL_1170;
      if (*(_QWORD *)v27 != 0x69737463656A626FLL || v20[3] != (uint64_t **)0x2E657A6973746365)
        goto LABEL_1170;
      v675 = 0uLL;
      *(_QWORD *)&v675 = *a1[3][2];
      if ((*((_BYTE *)a1 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)a1);
      v83 = (unint64_t)a1[12];
      *((_QWORD *)&v675 + 1) = *a1[11];
      if ((v83 & 0xFFFFFFFFFFFFFFFELL) == 2)
        goto LABEL_655;
      if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
      {
        v147 = ***a1;
        v148 = *(_QWORD *)(v147 + 152);
        v149 = *(unsigned int *)(v147 + 168);
        if ((_DWORD)v149)
        {
          LODWORD(v150) = (v149 - 1) & (v14 ^ (a1 >> 9));
          v151 = (uint64_t ****)(v148 + 16 * v150);
          v152 = *v151;
          if (*v151 != a1)
          {
            v153 = 1;
            do
            {
              if (v152 == (uint64_t ***)-4096)
                goto LABEL_641;
              v154 = v150 + v153++;
              v150 = v154 & (v149 - 1);
              v152 = *(uint64_t ****)(v148 + 16 * v150);
            }
            while (v152 != a1);
            v151 = (uint64_t ****)(v148 + 16 * v150);
          }
        }
        else
        {
LABEL_641:
          v151 = (uint64_t ****)(v148 + 16 * v149);
        }
        v334 = v8;
        v335 = v151[1];
        v338 = (size_t)*v335;
        v337 = (char *)(v335 + 2);
        v336 = v338;
        goto LABEL_643;
      }
      v334 = v8;
      v336 = 0;
      v337 = &byte_1C871356D;
LABEL_643:
      sub_1C53CF274(236, (uint64_t *)&v675, 2, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
      v339 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
      v340 = (void *)v672.__r_.__value_.__r.__words[0];
      if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        a2 = (std::string::size_type)&v672;
      else
        a2 = v672.__r_.__value_.__r.__words[0];
      v341 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
      if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v341 = v672.__r_.__value_.__l.__size_;
      if (v336 == v341)
      {
        v8 = v334;
        if (v336)
          LODWORD(v336) = memcmp(v337, (const void *)a2, v336) != 0;
      }
      else
      {
        LODWORD(v336) = 1;
        v8 = v334;
      }
      if (v339 < 0)
        operator delete(v340);
      if (!(_DWORD)v336)
        goto LABEL_1170;
LABEL_655:
      if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
      {
        v342 = ***a1;
        v343 = *(_QWORD *)(v342 + 152);
        v344 = *(unsigned int *)(v342 + 168);
        if ((_DWORD)v344)
        {
          LODWORD(v345) = (v344 - 1) & (v14 ^ (a1 >> 9));
          v346 = (uint64_t ****)(v343 + 16 * v345);
          v347 = *v346;
          if (*v346 != a1)
          {
            v348 = 1;
            do
            {
              if (v347 == (uint64_t ***)-4096)
                goto LABEL_662;
              v349 = v345 + v348++;
              v345 = v349 & (v344 - 1);
              v347 = *(uint64_t ****)(v343 + 16 * v345);
            }
            while (v347 != a1);
            v346 = (uint64_t ****)(v343 + 16 * v345);
          }
        }
        else
        {
LABEL_662:
          v346 = (uint64_t ****)(v343 + 16 * v344);
        }
        v350 = v346[1];
        v353 = (std::string::size_type)*v350;
        v351 = (char *)(v350 + 2);
        v352 = v353;
        goto LABEL_664;
      }
      v352 = 0;
      v351 = &byte_1C871356D;
LABEL_664:
      v674 = 773;
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v351;
      v672.__r_.__value_.__l.__size_ = v352;
      v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setName(a1, (uint64_t)&v672);
      v62 = (uint64_t *)a1[5];
      LODWORD(a2) = 236;
      v61 = (std::string *)&v675;
      v312 = 2;
      goto LABEL_1041;
    case 'p':
      if (v21 != 13)
      {
        if (v28 >= 0xF)
        {
          v103 = *(_QWORD *)v27 == 0x6F6E6E612E727470
              && *(uint64_t ***)((char *)v20 + 28) == (uint64_t **)0x2E6E6F697461746FLL;
          if (v103 && a1[12] == (uint64_t **)4)
          {
            if ((_DWORD)v13)
            {
              LODWORD(v104) = (v13 - 1) & (v14 ^ (a1 >> 9));
              v105 = (uint64_t ****)(v12 + 16 * v104);
              v106 = *v105;
              if (*v105 != a1)
              {
                v107 = 1;
                do
                {
                  if (v106 == (uint64_t ***)-4096)
                    goto LABEL_752;
                  v108 = v104 + v107++;
                  v104 = v108 & (v13 - 1);
                  v106 = *(uint64_t ****)(v12 + 16 * v104);
                }
                while (v106 != a1);
                v105 = (uint64_t ****)(v12 + 16 * v104);
              }
            }
            else
            {
LABEL_752:
              v105 = (uint64_t ****)(v12 + 16 * v13);
            }
            v399 = (std::string::size_type *)v105[1];
            v400 = *v399;
            v674 = 773;
            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v399 + 2);
            v672.__r_.__value_.__l.__size_ = v400;
            v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setName(a1, (uint64_t)&v672);
            v401 = (uint64_t *)a1[5];
            if ((*((_WORD *)a1 + 9) & 1) != 0)
              llvm::Function::BuildLazyArguments((llvm::Function *)a1);
            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1[11];
            v24 = 1;
            v212 = &v672;
            v213 = v401;
            v214 = 245;
            goto LABEL_756;
          }
        }
        else if (v28 < 8)
        {
          goto LABEL_1170;
        }
        goto LABEL_523;
      }
      if (*(_QWORD *)v27 != 0x6863746566657270)
        goto LABEL_523;
      *(_QWORD *)&v675 = 0;
      if ((*((_WORD *)a1 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)a1);
        v138 = *((_DWORD *)a1 + 5);
        *(_QWORD *)&v675 = *a1[11];
        if ((v138 & 0x10000000) == 0)
        {
          v263 = 0;
          v262 = &byte_1C871356D;
LABEL_514:
          v265 = 1;
          sub_1C53CF274(240, (uint64_t *)&v675, 1, (uint64_t *)a1[5], 0, a6, a7, a8, &v672);
          v266 = SHIBYTE(v672.__r_.__value_.__r.__words[2]);
          v267 = (void *)v672.__r_.__value_.__r.__words[0];
          if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            a2 = (std::string::size_type)&v672;
          else
            a2 = v672.__r_.__value_.__r.__words[0];
          v268 = *((_BYTE *)&v672.__r_.__value_.__s + 23) & 0x7F;
          if ((v672.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v268 = v672.__r_.__value_.__l.__size_;
          if (v263 == v268)
          {
            if (v263)
            {
              v265 = memcmp(v262, (const void *)a2, v263) != 0;
              if (v266 < 0)
                goto LABEL_522;
LABEL_528:
              if (!v265)
                goto LABEL_523;
              goto LABEL_529;
            }
            v265 = 0;
            if ((SHIBYTE(v672.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_528;
          }
          else if ((SHIBYTE(v672.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_528;
          }
LABEL_522:
          operator delete(v267);
          if (!v265)
          {
LABEL_523:
            if (*(_QWORD *)v27 == 0x2E68747561727470)
            {
              v269 = 0;
              v270 = (_QWORD *)(v27 + 8);
              switch(v28)
              {
                case 0x10uLL:
                  v269 = 0x1000000F6;
                  if (*v270 != 0x3436692E68747561)
                  {
                    v271 = 0x1000000F9;
                    v272 = *v270 == 0x3436692E6E676973;
                    goto LABEL_549;
                  }
                  break;
                case 0x11uLL:
                  if (*v270 == 0x36692E7069727473 && *(_BYTE *)(v27 + 16) == 52)
                  {
                    v269 = 0x1000000FBLL;
                  }
                  else if (*(_QWORD *)(v27 + 8) ^ 0x36692E646E656C62 | *(unsigned __int8 *)(v27 + 16) ^ 0x34)
                  {
                    v269 = 0;
                  }
                  else
                  {
                    v269 = 0x1000000F7;
                  }
                  break;
                case 0x12uLL:
                  if (*v270 == 0x692E6E6769736572 && *(_WORD *)(v27 + 16) == 13366)
                    v269 = 0x1000000F8;
                  else
                    v269 = 0;
                  break;
                case 0x18uLL:
                  v271 = 0x1000000FALL;
                  v272 = (*(_QWORD *)(v27 + 8) ^ 0x6E65672E6E676973 | *(_QWORD *)(v27 + 16) ^ 0x3436692E63697265) == 0;
LABEL_549:
                  if (v272)
                    v269 = v271;
                  else
                    v269 = 0;
                  break;
                default:
                  break;
              }
              if ((v269 & 0x300000000) != 0 && (_DWORD)v269)
              {
                if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
                {
                  v283 = ***a1;
                  v284 = *(_QWORD *)(v283 + 152);
                  v285 = *(unsigned int *)(v283 + 168);
                  if ((_DWORD)v285)
                  {
                    LODWORD(v286) = (v285 - 1) & (v14 ^ (a1 >> 9));
                    v287 = (uint64_t ****)(v284 + 16 * v286);
                    v288 = *v287;
                    if (*v287 != a1)
                    {
                      v289 = 1;
                      do
                      {
                        if (v288 == (uint64_t ***)-4096)
                          goto LABEL_585;
                        v290 = v286 + v289++;
                        v286 = v290 & (v285 - 1);
                        v288 = *(uint64_t ****)(v284 + 16 * v286);
                      }
                      while (v288 != a1);
                      v287 = (uint64_t ****)(v284 + 16 * v286);
                    }
                  }
                  else
                  {
LABEL_585:
                    v287 = (uint64_t ****)(v284 + 16 * v285);
                  }
                  v297 = v287[1];
                  v300 = (std::string::size_type)*v297;
                  v298 = (char *)(v297 + 2);
                  v299 = v300;
                }
                else
                {
                  v299 = 0;
                  v298 = &byte_1C871356D;
                }
                v674 = 773;
                v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v298;
                v672.__r_.__value_.__l.__size_ = v299;
                v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setName(a1, (uint64_t)&v672);
                v62 = (uint64_t *)a1[5];
                LODWORD(a2) = v269;
                goto LABEL_612;
              }
            }
            goto LABEL_1170;
          }
LABEL_529:
          if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
          {
            v332 = 0;
            v331 = &byte_1C871356D;
LABEL_639:
            v674 = 773;
            v672.__r_.__value_.__r.__words[0] = (std::string::size_type)v331;
            v672.__r_.__value_.__l.__size_ = v332;
            v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
            llvm::Value::setName(a1, (uint64_t)&v672);
            v62 = (uint64_t *)a1[5];
            v61 = (std::string *)&v675;
            LODWORD(a2) = 240;
LABEL_640:
            v312 = 1;
            goto LABEL_1041;
          }
          v273 = ***a1;
          v274 = *(_QWORD *)(v273 + 152);
          v275 = *(unsigned int *)(v273 + 168);
          if ((_DWORD)v275)
          {
            LODWORD(v276) = (v275 - 1) & (v14 ^ (a1 >> 9));
            v277 = (uint64_t ****)(v274 + 16 * v276);
            v278 = *v277;
            if (*v277 == a1)
            {
LABEL_638:
              v330 = v277[1];
              v333 = (std::string::size_type)*v330;
              v331 = (char *)(v330 + 2);
              v332 = v333;
              goto LABEL_639;
            }
            v279 = 1;
            while (v278 != (uint64_t ***)-4096)
            {
              v280 = v276 + v279++;
              v276 = v280 & (v275 - 1);
              v278 = *(uint64_t ****)(v274 + 16 * v276);
              if (v278 == a1)
              {
                v277 = (uint64_t ****)(v274 + 16 * v276);
                goto LABEL_638;
              }
            }
          }
          v277 = (uint64_t ****)(v274 + 16 * v275);
          goto LABEL_638;
        }
      }
      else
      {
        *(_QWORD *)&v675 = *a1[11];
      }
      v139 = ***a1;
      v140 = *(_QWORD *)(v139 + 152);
      v141 = *(unsigned int *)(v139 + 168);
      if (!(_DWORD)v141)
        goto LABEL_512;
      LODWORD(v142) = (v141 - 1) & (v14 ^ (a1 >> 9));
      v143 = (uint64_t ****)(v140 + 16 * v142);
      v144 = *v143;
      if (*v143 != a1)
      {
        v145 = 1;
        while (v144 != (uint64_t ***)-4096)
        {
          v146 = v142 + v145++;
          v142 = v146 & (v141 - 1);
          v144 = *(uint64_t ****)(v140 + 16 * v142);
          if (v144 == a1)
          {
            v143 = (uint64_t ****)(v140 + 16 * v142);
            goto LABEL_513;
          }
        }
LABEL_512:
        v143 = (uint64_t ****)(v140 + 16 * v141);
      }
LABEL_513:
      v261 = v143[1];
      v264 = (size_t)*v261;
      v262 = (char *)(v261 + 2);
      v263 = v264;
      goto LABEL_514;
    case 's':
      if (v21 != 24)
        goto LABEL_1170;
      v29 = *(_QWORD *)v27 == 0x6F72706B63617473
         && *(uint64_t ***)((char *)v20 + 29) == (uint64_t **)0x6863726F74636574;
      if (!v29 || v20[4] != (uint64_t **)0x6B63656863726F74)
        goto LABEL_1170;
      goto LABEL_718;
    case 'v':
      if (v21 != 19)
        goto LABEL_1170;
      v40 = *(_QWORD *)v27 == 0x6F6E6E612E726176
         && *(uint64_t ***)((char *)v20 + 27) == (uint64_t **)0x6E6F697461746F6ELL;
      if (!v40 || a1[12] != (uint64_t **)4)
        goto LABEL_1170;
      if (!(_DWORD)v13)
        goto LABEL_608;
      LODWORD(v41) = (v13 - 1) & (v14 ^ (a1 >> 9));
      v42 = (uint64_t ****)(v12 + 16 * v41);
      v43 = *v42;
      if (*v42 == a1)
        goto LABEL_609;
      v44 = 1;
      while (v43 != (uint64_t ***)-4096)
      {
        v45 = v41 + v44++;
        v41 = v45 & (v13 - 1);
        v43 = *(uint64_t ****)(v12 + 16 * v41);
        if (v43 == a1)
        {
          v42 = (uint64_t ****)(v12 + 16 * v41);
          goto LABEL_609;
        }
      }
LABEL_608:
      v42 = (uint64_t ****)(v12 + 16 * v13);
LABEL_609:
      v308 = (std::string::size_type *)v42[1];
      v309 = *v308;
      v674 = 773;
      v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v308 + 2);
      v672.__r_.__value_.__l.__size_ = v309;
      v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
      llvm::Value::setName(a1, (uint64_t)&v672);
      v62 = (uint64_t *)a1[5];
      LODWORD(a2) = 316;
      goto LABEL_612;
    case 'x':
      if (*(_DWORD *)v27 != 775305336)
        goto LABEL_1170;
      v31 = (_DWORD *)((char *)v20 + 25);
      if (sub_1C534A2BC((uint64_t)v20 + 25, v22))
        goto LABEL_718;
      if (v22 == 6)
      {
        v32 = *v31 == 1937007730 && *(_WORD *)((char *)v20 + 29) == 28771;
        if (v32 && *((_DWORD *)a1[3] + 3) != 1)
        {
          if ((_DWORD)v13)
          {
            LODWORD(v33) = (v13 - 1) & (v14 ^ (a1 >> 9));
            v34 = (uint64_t ****)(v12 + 16 * v33);
            v35 = *v34;
            if (*v34 != a1)
            {
              v36 = 1;
              do
              {
                if (v35 == (uint64_t ***)-4096)
                  goto LABEL_962;
                v37 = v33 + v36++;
                v33 = v37 & (v13 - 1);
                v35 = *(uint64_t ****)(v12 + 16 * v33);
              }
              while (v35 != a1);
              v34 = (uint64_t ****)(v12 + 16 * v33);
            }
          }
          else
          {
LABEL_962:
            v34 = (uint64_t ****)(v12 + 16 * v13);
          }
          v507 = (std::string::size_type *)v34[1];
          v508 = *v507;
          v674 = 773;
          v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v507 + 2);
          v672.__r_.__value_.__l.__size_ = v508;
          v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
          llvm::Value::setName(a1, (uint64_t)&v672);
          v62 = (uint64_t *)a1[5];
          LODWORD(a2) = 12167;
          goto LABEL_612;
        }
        goto LABEL_1170;
      }
      if (v22 < 0xB)
      {
        if (v22 != 10)
          goto LABEL_1170;
        if (*(_QWORD *)v31 == 0x70642E3134657373 && *(_WORD *)((char *)v20 + 33) == 25712)
        {
          v127 = a1;
          v128 = 12292;
        }
        else
        {
          if (*(_QWORD *)v31 != 0x70642E3134657373 || *(_WORD *)((char *)v20 + 33) != 29552)
            goto LABEL_1170;
          v127 = a1;
          v128 = 12293;
        }
LABEL_1060:
        if (sub_1C534E388(v127, v128, v8))
          return 1;
        goto LABEL_1170;
      }
      if (*(_QWORD *)v31 != 0x74702E3134657373
        || *(uint64_t ***)((char *)v20 + 28) != (uint64_t **)0x74736574702E3134)
      {
        if (v21 <= 22)
        {
          if (v21 == 21)
            goto LABEL_461;
          goto LABEL_619;
        }
        if (v21 != 31)
        {
          if (v21 != 23)
          {
LABEL_804:
            if (v22 < 0xC)
              goto LABEL_1170;
            goto LABEL_928;
          }
LABEL_924:
          if (*(_QWORD *)v31 == 0x6E692E3134657373
            && *(uint64_t ***)((char *)v20 + 31) == (uint64_t **)0x7370747265736E69)
          {
            v127 = a1;
            v128 = 12294;
            goto LABEL_1060;
          }
          goto LABEL_928;
        }
LABEL_760:
        if (*(_QWORD *)v31 == 0x6D2E323135787661
          && *(uint64_t ***)((char *)v20 + 33) == (uint64_t **)0x2E706D632E6B7361
          && *(uint64_t ***)((char *)v20 + 39) == (uint64_t **)0x3832312E64702E70)
        {
          v414 = a1;
          v415 = 11368;
        }
        else if (*(_QWORD *)v31 == 0x6D2E323135787661
               && *(uint64_t ***)((char *)v20 + 33) == (uint64_t **)0x2E706D632E6B7361
               && *(uint64_t ***)((char *)v20 + 39) == (uint64_t **)0x3635322E64702E70)
        {
          v414 = a1;
          v415 = 11369;
        }
        else if (*(_QWORD *)v31 == 0x6D2E323135787661
               && *(uint64_t ***)((char *)v20 + 33) == (uint64_t **)0x2E706D632E6B7361
               && *(uint64_t ***)((char *)v20 + 39) == (uint64_t **)0x3231352E64702E70)
        {
          v414 = a1;
          v415 = 11370;
        }
        else if (*(_QWORD *)v31 == 0x6D2E323135787661
               && *(uint64_t ***)((char *)v20 + 33) == (uint64_t **)0x2E706D632E6B7361
               && *(uint64_t ***)((char *)v20 + 39) == (uint64_t **)0x3832312E73702E70)
        {
          v414 = a1;
          v415 = 11371;
        }
        else if (*(_QWORD *)v31 == 0x6D2E323135787661
               && *(uint64_t ***)((char *)v20 + 33) == (uint64_t **)0x2E706D632E6B7361
               && *(uint64_t ***)((char *)v20 + 39) == (uint64_t **)0x3635322E73702E70)
        {
          v414 = a1;
          v415 = 11372;
        }
        else
        {
          if (*(_QWORD *)v31 != 0x6D2E323135787661
            || *(uint64_t ***)((char *)v20 + 33) != (uint64_t **)0x2E706D632E6B7361
            || *(uint64_t ***)((char *)v20 + 39) != (uint64_t **)0x3231352E73702E70)
          {
LABEL_928:
            v318 = 0;
            goto LABEL_929;
          }
          v414 = a1;
          v415 = 11373;
        }
        if (!sub_1C534E4B8(v414, v415, v8))
          goto LABEL_1170;
        return 1;
      }
      if (v21 > 22)
      {
        if (v21 != 23)
        {
          if (v21 != 31)
            goto LABEL_804;
          goto LABEL_760;
        }
        if (*((_WORD *)v20 + 18) != 31342 || *((_BYTE *)v20 + 38) != 99)
          goto LABEL_924;
        v488 = a1;
        v489 = 12300;
      }
      else
      {
        if (v21 != 21)
        {
LABEL_619:
          if (v21 == 22)
          {
            if (*(_QWORD *)v31 == 0x706D2E3134657373
              && *(uint64_t ***)((char *)v20 + 30) == (uint64_t **)0x7762646173706D2ELL)
            {
              v127 = a1;
              v128 = 12295;
              goto LABEL_1060;
            }
            if (*(_QWORD *)v31 == 0x702E70642E787661
              && *(uint64_t ***)((char *)v20 + 30) == (uint64_t **)0x3635322E73702E70)
            {
              v127 = a1;
              v128 = 11163;
              goto LABEL_1060;
            }
            v318 = 1;
LABEL_929:
            v492 = *(_QWORD *)v31 == 0x637266762E706F78 && *(_DWORD *)((char *)v20 + 33) == 1936928378;
            if (v492 && a1[12] == (uint64_t **)2)
            {
              if ((_DWORD)v13)
              {
                LODWORD(v493) = (v13 - 1) & (v14 ^ (a1 >> 9));
                v494 = (uint64_t ****)(v12 + 16 * v493);
                v495 = *v494;
                if (*v494 != a1)
                {
                  v496 = 1;
                  do
                  {
                    if (v495 == (uint64_t ***)-4096)
                      goto LABEL_1166;
                    v497 = v493 + v496++;
                    v493 = v497 & (v13 - 1);
                    v495 = *(uint64_t ****)(v12 + 16 * v493);
                  }
                  while (v495 != a1);
                  v494 = (uint64_t ****)(v12 + 16 * v493);
                }
              }
              else
              {
LABEL_1166:
                v494 = (uint64_t ****)(v12 + 16 * v13);
              }
              v609 = (std::string::size_type *)v494[1];
              v610 = *v609;
              v674 = 773;
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v609 + 2);
              v672.__r_.__value_.__l.__size_ = v610;
              v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setName(a1, (uint64_t)&v672);
              v62 = (uint64_t *)a1[5];
              LODWORD(a2) = 12415;
              goto LABEL_612;
            }
            v498 = *(_QWORD *)v31 == 0x637266762E706F78 && *(_DWORD *)((char *)v20 + 33) == 1685270138;
            if (v498 && a1[12] == (uint64_t **)2)
            {
              if ((_DWORD)v13)
              {
                LODWORD(v499) = (v13 - 1) & (v14 ^ (a1 >> 9));
                v500 = (uint64_t ****)(v12 + 16 * v499);
                v501 = *v500;
                if (*v500 != a1)
                {
                  v502 = 1;
                  do
                  {
                    if (v501 == (uint64_t ***)-4096)
                      goto LABEL_1215;
                    v503 = v499 + v502++;
                    v499 = v503 & (v13 - 1);
                    v501 = *(uint64_t ****)(v12 + 16 * v499);
                  }
                  while (v501 != a1);
                  v500 = (uint64_t ****)(v12 + 16 * v499);
                }
              }
              else
              {
LABEL_1215:
                v500 = (uint64_t ****)(v12 + 16 * v13);
              }
              v654 = (std::string::size_type *)v500[1];
              v655 = *v654;
              v674 = 773;
              v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v654 + 2);
              v672.__r_.__value_.__l.__size_ = v655;
              v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
              llvm::Value::setName(a1, (uint64_t)&v672);
              v62 = (uint64_t *)a1[5];
              LODWORD(a2) = 12414;
              goto LABEL_612;
            }
            if (*(_QWORD *)v31 == 0x726570762E706F78 && *(_DWORD *)((char *)v20 + 33) == 845965677)
            {
              v505 = a1[3][2][3];
              if ((*(_DWORD *)(v505 + 8) & 0xFE) == 0x12)
                v506 = *(unsigned __int8 *)(**(_QWORD **)(v505 + 16) + 8);
              else
                v506 = *(_DWORD *)(v505 + 8);
              if (v506 < 7)
              {
                if ((_DWORD)v13)
                {
                  LODWORD(v573) = (v13 - 1) & (v14 ^ (a1 >> 9));
                  v574 = (uint64_t ****)(v12 + 16 * v573);
                  v575 = *v574;
                  if (*v574 != a1)
                  {
                    v576 = 1;
                    do
                    {
                      if (v575 == (uint64_t ***)-4096)
                        goto LABEL_1218;
                      v577 = v573 + v576++;
                      v573 = v577 & (v13 - 1);
                      v575 = *(uint64_t ****)(v12 + 16 * v573);
                    }
                    while (v575 != a1);
                    v574 = (uint64_t ****)(v12 + 16 * v573);
                  }
                }
                else
                {
LABEL_1218:
                  v574 = (uint64_t ****)(v12 + 16 * v13);
                }
                v656 = (std::string::size_type *)v574[1];
                v657 = *v656;
                v674 = 773;
                v672.__r_.__value_.__r.__words[0] = (std::string::size_type)(v656 + 2);
                v672.__r_.__value_.__l.__size_ = v657;
                v672.__r_.__value_.__r.__words[2] = (std::string::size_type)".old";
                llvm::Value::setName(a1, (uint64_t)&v672);
                v659 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v505);
                if ((_DWORD)v658 == 1)
                if ((*(_DWORD *)(v505 + 8) & 0xFE) == 0x12)
                  v505 = **(_QWORD **)(v505 + 16);
                v660 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v505);
                if (v660 == 64 && v659 == 128)
                {
                  LODWORD(a2) = 12416;
                }
                else if (v660 == 32 && v659 == 128)
                {
                  LODWORD(a2) = 12418;
                }
                else if (v659 == 256 && v660 == 64)
                {
                  LODWORD(a2) = 12417;
                }
                else
                {
                  LODWORD(a2) = 12419;
                }
                v62 = (uint64_t *)a1[5];
                goto LABEL_612;
              }
              if ((v318 & 1) == 0)
                goto LABEL_1170;
            }
            else if (!v318)
            {
              goto LABEL_1170;
            }
            if (*(_QWORD *)v31 != 0x6F6365722E686573
              || *(uint64_t ***)((char *)v20 + 30) != (uint64_t **)0x70667265766F6365)
            {
              goto LABEL_1170;
            }
            v62 = (uint64_t *)a1[5];
            LODWORD(a2) = 64;
LABEL_612:
            v61 = 0;
            v312 = 0;
            goto LABEL_1041;
          }
          goto LABEL_804;
        }
        v487 = *((unsigned __int8 *)v20 + 36);
        if (v487 == 122)
        {
          v488 = a1;
          v489 = 12301;
        }
        else
        {
          if (v487 != 99)
          {
LABEL_461:
            if (*(_QWORD *)v31 == 0x73706D2E32787661 && *(_DWORD *)((char *)v20 + 33) == 2002936929)
            {
              v127 = a1;
              v128 = 11232;
              goto LABEL_1060;
            }
            goto LABEL_928;
          }
          v488 = a1;
          v489 = 12299;
        }
      }
      if (sub_1C534E24C(v488, v489, v8))
        return 1;
      goto LABEL_1170;
    default:
      goto LABEL_1170;
  }
}

char *llvm::UpgradeGlobalVariable(llvm *this, llvm::GlobalVariable *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm *v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v45;
  uint64_t v46;
  llvm *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  llvm::ConstantAggregateZero *v61;
  uint64_t v62;
  int v63;
  llvm::Type *v64;
  char *v65;
  uint64_t v66;
  llvm::UndefValue **v67;
  int v68;
  uint64_t v69;
  llvm::Constant *v70;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v72;
  llvm::Constant *v73;
  llvm::Type *v74;
  llvm::Value **NullValue;
  char *v76;
  llvm::Type *v77;
  llvm::PoisonValue *v78;
  llvm::Value **v79;
  _DWORD *v80;
  llvm::PointerType *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  llvm *v88;
  int v89;
  int v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  llvm::Type *v97;
  __int128 v98;
  uint64_t v99;
  __int16 v100;
  void *v101;
  uint64_t v102;
  _QWORD v103[6];
  uint64_t *v104;
  void **v105;
  _QWORD *v106;
  uint64_t v107;
  int v108;
  __int16 v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  _QWORD v114[3];

  v114[1] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 8);
  v4 = *((_DWORD *)this + 5);
  v5 = this >> 4;
  if ((v3 & 0xF) == 6)
  {
    if ((v4 & 0x10000000) == 0)
      return 0;
    v6 = ***(_QWORD ***)this;
    v7 = *(_QWORD *)(v6 + 152);
    v8 = *(unsigned int *)(v6 + 168);
    if ((_DWORD)v8)
    {
      LODWORD(v9) = (v8 - 1) & (v5 ^ (this >> 9));
      v10 = v7 + 16 * v9;
      v11 = *(llvm **)v10;
      if (*(llvm **)v10 == this)
      {
LABEL_12:
        v14 = *(_QWORD *)(v10 + 8);
        if (*(_QWORD *)v14 == 12)
        {
          v15 = *(_QWORD *)(v14 + 16);
          v16 = *(_DWORD *)(v14 + 24);
          if (v15 == 0x646D632E6D766C6CLL && v16 == 1701734764)
            goto LABEL_38;
        }
        if ((_DWORD)v8)
        {
          LODWORD(v18) = (v8 - 1) & (v5 ^ (this >> 9));
          v19 = v7 + 16 * v18;
          v20 = *(llvm **)v19;
          if (*(llvm **)v19 == this)
          {
LABEL_24:
            v23 = *(_QWORD *)(v19 + 8);
            if (*(_QWORD *)v23 != 20)
              goto LABEL_32;
            v24 = *(_QWORD *)(v23 + 16);
            v25 = *(_QWORD *)(v23 + 24);
            v26 = *(_DWORD *)(v23 + 32);
            v27 = v24 == 0x626D652E6D766C6CLL && v25 == 0x6F6D2E6465646465;
            if (!v27 || v26 != 1701606756)
              goto LABEL_32;
LABEL_38:
            v38 = 0;
            *((_DWORD *)this + 8) = v3 & 0xFFFFBFC0 | 0x4008;
            return v38;
          }
          v21 = 1;
          while (v20 != (llvm *)-4096)
          {
            v22 = v18 + v21++;
            v18 = v22 & (v8 - 1);
            v20 = *(llvm **)(v7 + 16 * v18);
            if (v20 == this)
            {
              v19 = v7 + 16 * v18;
              goto LABEL_24;
            }
          }
        }
        v19 = v7 + 16 * v8;
        goto LABEL_24;
      }
      v12 = 1;
      while (v11 != (llvm *)-4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v8 - 1);
        v11 = *(llvm **)(v7 + 16 * v9);
        if (v11 == this)
        {
          v10 = v7 + 16 * v9;
          goto LABEL_12;
        }
      }
    }
    v10 = v7 + 16 * v8;
    goto LABEL_12;
  }
  if ((v4 & 0x10000000) == 0)
    return 0;
LABEL_32:
  v29 = **(uint64_t ***)this;
  v30 = *v29;
  v31 = *(_QWORD *)(*v29 + 152);
  v32 = *(unsigned int *)(*v29 + 168);
  if (!(_DWORD)v32)
  {
LABEL_39:
    v34 = v31 + 16 * v32;
    goto LABEL_40;
  }
  LODWORD(v33) = (v32 - 1) & (v5 ^ (this >> 9));
  v34 = v31 + 16 * v33;
  v35 = *(llvm **)v34;
  if (*(llvm **)v34 != this)
  {
    v36 = 1;
    while (v35 != (llvm *)-4096)
    {
      v37 = v33 + v36++;
      v33 = v37 & (v32 - 1);
      v35 = *(llvm **)(v31 + 16 * v33);
      if (v35 == this)
      {
        v34 = v31 + 16 * v33;
        goto LABEL_40;
      }
    }
    goto LABEL_39;
  }
LABEL_40:
  v39 = *(_QWORD *)(v34 + 8);
  if (*(_QWORD *)v39 == 17)
  {
    v40 = *(_QWORD *)(v39 + 16);
    v41 = *(_QWORD *)(v39 + 24);
    v42 = *(unsigned __int8 *)(v39 + 32);
    v43 = v40 == 0x6F6C672E6D766C6CLL && v41 == 0x726F74635F6C6162;
    if (v43 && v42 == 115)
      goto LABEL_65;
  }
  if (!(_DWORD)v32)
    goto LABEL_54;
  LODWORD(v45) = (v32 - 1) & (v5 ^ (this >> 9));
  v46 = v31 + 16 * v45;
  v47 = *(llvm **)v46;
  if (*(llvm **)v46 != this)
  {
    v48 = 1;
    while (v47 != (llvm *)-4096)
    {
      v49 = v45 + v48++;
      v45 = v49 & (v32 - 1);
      v47 = *(llvm **)(v31 + 16 * v45);
      if (v47 == this)
      {
        v46 = v31 + 16 * v45;
        goto LABEL_55;
      }
    }
LABEL_54:
    v46 = v31 + 16 * v32;
  }
LABEL_55:
  v50 = *(_QWORD *)(v46 + 8);
  if (*(_QWORD *)v50 != 17)
    return 0;
  v51 = *(_QWORD *)(v50 + 16);
  v52 = *(_QWORD *)(v50 + 24);
  v53 = *(unsigned __int8 *)(v50 + 32);
  v54 = v51 == 0x6F6C672E6D766C6CLL && v52 == 0x726F74645F6C6162;
  if (!v54 || v53 != 115)
    return 0;
LABEL_65:
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (v4 & 0x7FFFFFF) == 0)
      return 0;
  }
  else if ((v3 & 0x800000) == 0 && *((llvm **)this + 9) == (llvm *)((char *)this + 72))
  {
    return 0;
  }
  v38 = 0;
  v57 = *((_QWORD *)this + 3);
  if (v57)
  {
    if (*(_BYTE *)(v57 + 8) == 17)
    {
      v38 = 0;
      v58 = *(_QWORD *)(v57 + 24);
      if (v58)
      {
        if (*(_BYTE *)(v58 + 8) == 16)
        {
          if (*(_DWORD *)(v58 + 12) == 2)
          {
            v101 = v103;
            v102 = 0x200000000;
            v104 = v29;
            v105 = &v113;
            v106 = v114;
            v107 = 0;
            v108 = 0;
            v109 = 512;
            v110 = 7;
            v103[4] = 0;
            v103[5] = 0;
            v111 = 0;
            v112 = 0;
            v113 = &unk_1E8167888;
            v114[0] = &unk_1E8167A08;
            v96 = *(_OWORD *)*(_QWORD *)(v58 + 16);
            v59 = llvm::PointerType::get((llvm::PointerType *)(v30 + 1912), 0);
            v60 = *(uint64_t **)v96;
            v98 = v96;
            v99 = v59;
            v61 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v60, (uint64_t)&v98, 3, 0);
            v62 = *((_QWORD *)this - 4);
            v63 = *(_DWORD *)(v62 + 20);
            v64 = (llvm::Type *)(v63 & 0x7FFFFFF);
            if ((v63 & 0x7FFFFFF) != 0)
            {
              v65 = (char *)operator new(8 * (_QWORD)v64);
              bzero(v65, 8 * (_QWORD)v64);
              v66 = 0;
              v67 = (llvm::UndefValue **)v65;
              v95 = &v65[8 * (_QWORD)v64];
              v97 = (llvm::Type *)v65;
              do
              {
                v68 = *(_DWORD *)(v62 + 20);
                if ((v68 & 0x40000000) != 0)
                  v69 = *(_QWORD *)(v62 - 8);
                else
                  v69 = v62 - 32 * (v68 & 0x7FFFFFF);
                v70 = *(llvm::Constant **)(v69 + v66);
                AggregateElement = llvm::Constant::getAggregateElement(v70, 0);
                v72 = llvm::Constant::getAggregateElement(v70, (llvm::Type *)1);
                v73 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v104 + 1912), 0);
                NullValue = llvm::Constant::getNullValue(v73, v74);
                *(_QWORD *)&v98 = AggregateElement;
                *((_QWORD *)&v98 + 1) = v72;
                v99 = (uint64_t)NullValue;
                *v67++ = llvm::ConstantStruct::get(v61, (llvm::Type *)&v98, 3);
                v66 += 32;
              }
              while (32 * (_QWORD)v64 != v66);
              v76 = v95;
              v77 = v97;
            }
            else
            {
              v76 = 0;
              v77 = 0;
            }
            llvm::ArrayType::get(v61, v64);
            v79 = llvm::ConstantArray::get(v78, v77, (v76 - (char *)v77) >> 3);
            v80 = operator new(0x78uLL);
            v38 = (char *)(v80 + 8);
            v80[13] = v80[13] & 0x38000000 | 1;
            *(_QWORD *)v80 = 0;
            *((_QWORD *)v80 + 1) = 0;
            *((_QWORD *)v80 + 2) = 0;
            *((_QWORD *)v80 + 3) = v80 + 8;
            v81 = *v79;
            v82 = *((_DWORD *)this + 8) & 0xF;
            if ((*((_BYTE *)this + 23) & 0x10) == 0)
            {
              v93 = 0;
              v92 = &byte_1C871356D;
              goto LABEL_93;
            }
            v83 = ***(_QWORD ***)this;
            v84 = *(_QWORD *)(v83 + 152);
            v85 = *(unsigned int *)(v83 + 168);
            if ((_DWORD)v85)
            {
              LODWORD(v86) = (v85 - 1) & (v5 ^ (this >> 9));
              v87 = v84 + 16 * v86;
              v88 = *(llvm **)v87;
              if (*(llvm **)v87 == this)
              {
LABEL_92:
                v91 = *(_QWORD **)(v87 + 8);
                v94 = *v91;
                v92 = (char *)(v91 + 2);
                v93 = v94;
LABEL_93:
                v100 = 261;
                *(_QWORD *)&v98 = v92;
                *((_QWORD *)&v98 + 1) = v93;
                llvm::GlobalVariable::GlobalVariable((uint64_t)(v80 + 8), v81, 0, v82, (uint64_t)v79, (uint64_t)&v98, 0, 0, 0);
                if (v77)
                  operator delete(v77);
                if (v101 != v103)
                  free(v101);
                return v38;
              }
              v89 = 1;
              while (v88 != (llvm *)-4096)
              {
                v90 = v86 + v89++;
                v86 = v90 & (v85 - 1);
                v88 = *(llvm **)(v84 + 16 * v86);
                if (v88 == this)
                {
                  v87 = v84 + 16 * v86;
                  goto LABEL_92;
                }
              }
            }
            v87 = v84 + 16 * v85;
            goto LABEL_92;
          }
          return 0;
        }
      }
    }
  }
  return v38;
}

unint64_t sub_1C5336B88(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

void llvm::UpgradeIntrinsicCall(llvm *this, llvm::CallBase *a2, llvm::Function *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ValueHandleBase *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::PoisonValue **v26;
  llvm::PoisonValue *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v43;
  llvm::CallBase *v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned __int8 **v65;
  unsigned __int8 **v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t **v71;
  uint64_t **v72;
  uint64_t v73;
  llvm::ValueHandleBase *v74;
  llvm::PoisonValue *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  llvm::Value *v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v93;
  unint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  char *v101;
  char *v102;
  unsigned __int8 **v103;
  llvm::Value *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 ***v109;
  uint64_t v110;
  llvm::Value *v111;
  llvm::Value *v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  char *v141;
  uint64_t *v142;
  void **v143;
  char v144;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  unint64_t v155;
  BOOL v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  BOOL v162;
  BOOL v163;
  char v164;
  char v167;
  BOOL v168;
  char *v173;
  uint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  uint64_t *v177;
  char *v178;
  unsigned __int8 *v179;
  _QWORD *v180;
  uint64_t VectorSplat;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  char *v191;
  uint64_t **v192;
  llvm::Constant *v193;
  llvm::Type *v194;
  uint64_t *Select;
  llvm::Value *v196;
  int v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  llvm::ValueHandleBase *v205;
  llvm::ConstantInt *v206;
  uint64_t v207;
  llvm::Type *v208;
  unsigned __int8 *v209;
  llvm::Value *v210;
  uint64_t v211;
  _QWORD *v212;
  void *v213;
  uint64_t v215;
  uint64_t **v216;
  int v217;
  uint64_t v218;
  char *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  llvm::CallBase *v229;
  uint64_t **v230;
  uint64_t *v231;
  void *v232;
  char *v233;
  int v234;
  llvm::ValueAsMetadata ***v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  llvm::ValueAsMetadata ***v239;
  char *v240;
  char *v241;
  char *v242;
  llvm::ValueAsMetadata **v243;
  llvm::ValueAsMetadata *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t **v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t **v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  llvm::ValueAsMetadata ***v257;
  llvm::ValueAsMetadata **v258;
  void *v259;
  uint64_t v260;
  uint64_t **v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  llvm::Value **v266;
  llvm::Value *v267;
  int v268;
  int v269;
  llvm::Value *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  llvm::ValueHandleBase *v280;
  int v281;
  int v282;
  uint64_t v283;
  char *v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned __int8 *v296;
  uint64_t v297;
  unsigned __int8 *v298;
  uint64_t **v299;
  uint64_t **v300;
  llvm::ConstantInt *v301;
  unsigned int v302;
  char v303;
  llvm::Value *v304;
  llvm::ValueHandleBase *v305;
  _QWORD *v306;
  unsigned int v307;
  void *v308;
  char *v309;
  unsigned __int8 *v310;
  uint64_t v311;
  uint64_t v312;
  const llvm::APInt *v313;
  unsigned __int8 *v314;
  llvm::ConstantInt *v315;
  llvm::ValueHandleBase *v316;
  unsigned __int8 *v317;
  char *v318;
  char *v319;
  unsigned __int8 **v320;
  llvm::Value *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  unsigned __int8 ***v326;
  uint64_t v327;
  uint64_t *v328;
  int v330;
  int v331;
  int v332;
  char v333;
  char v334;
  BOOL v335;
  BOOL v336;
  char v337;
  char v338;
  BOOL v340;
  BOOL v341;
  BOOL v342;
  uint64_t v344;
  int v345;
  char v348;
  uint64_t **v349;
  llvm::ConstantInt *v350;
  unsigned int v351;
  char v352;
  llvm::Value *v353;
  llvm::ValueHandleBase *v354;
  _QWORD *v355;
  unsigned int v356;
  char *v357;
  unsigned __int8 *v358;
  uint64_t v359;
  uint64_t v360;
  unsigned __int8 *v361;
  unint64_t v362;
  char *v363;
  unsigned __int8 **v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  char v368;
  uint64_t v369;
  unsigned __int8 ***v370;
  uint64_t v371;
  int v372;
  unsigned __int8 *v373;
  BOOL v376;
  BOOL v377;
  BOOL v378;
  llvm::Value *v381;
  unsigned __int8 *v382;
  uint64_t v383;
  _QWORD *v384;
  llvm::Value *v385;
  uint64_t v386;
  _QWORD *v387;
  llvm::ValueAsMetadata ***v394;
  uint64_t *v395;
  uint64_t v396;
  const llvm::APInt *v397;
  uint64_t *v401;
  uint64_t v402;
  uint64_t **v403;
  __int16 v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  unsigned __int8 *v408;
  llvm::ConstantAggregateZero *v409;
  void **p_src;
  uint64_t v411;
  uint64_t v412;
  unint64_t *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  __int16 v417;
  unint64_t v418;
  __int16 v419;
  llvm::Constant **v420;
  unsigned __int8 *v421;
  llvm::Type *v422;
  llvm::Value **v423;
  uint64_t v424;
  BOOL v425;
  BOOL v426;
  _QWORD *v429;
  llvm::ConstantInt *v430;
  unsigned int v431;
  char v432;
  llvm::ValueHandleBase *v433;
  unsigned __int8 *v434;
  char *v435;
  unsigned __int8 *v436;
  llvm::PointerType **v437;
  _BOOL4 v438;
  char *v439;
  unsigned __int8 *v440;
  uint64_t v441;
  uint64_t v442;
  unsigned __int8 *v443;
  char *v444;
  char *v445;
  unsigned __int8 **v446;
  llvm::Value *v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  unsigned __int8 ***v452;
  uint64_t v453;
  char *v454;
  char *v455;
  unsigned __int8 **v456;
  int v457;
  unsigned __int8 *v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  uint64_t **v461;
  char *v462;
  llvm::Constant *v463;
  llvm::Type *v464;
  char *v465;
  BOOL v466;
  __int16 v467;
  llvm::Value *v468;
  llvm::Value *v469;
  int v470;
  uint64_t v471;
  char *v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  _QWORD *v480;
  _QWORD *v481;
  uint64_t v482;
  uint64_t v483;
  unsigned __int8 *v484;
  uint64_t v485;
  unsigned __int8 *v486;
  BOOL v489;
  char *v491;
  char *v492;
  BOOL v493;
  __int16 v494;
  int v503;
  char v504;
  llvm::ConstantInt *v505;
  uint64_t v506;
  llvm::Value **v507;
  uint64_t *v508;
  uint64_t v509;
  llvm::Value **v510;
  unsigned __int8 *v511;
  uint64_t v512;
  char *v513;
  unsigned __int8 *v514;
  unsigned __int8 *v515;
  uint64_t v516;
  unsigned __int8 *v517;
  unsigned __int8 *v518;
  uint64_t v519;
  unsigned __int8 *v520;
  char *v521;
  char *v522;
  unsigned __int8 **v523;
  llvm::Value *v524;
  uint64_t v525;
  _QWORD *v526;
  uint64_t v527;
  uint64_t v528;
  unsigned __int8 ***v529;
  uint64_t v530;
  char *v531;
  char *v532;
  unsigned __int8 **v533;
  int v534;
  unsigned __int8 *v535;
  unsigned __int8 *v536;
  unsigned __int8 *v537;
  unsigned __int8 *v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  llvm::Value *v545;
  int v546;
  int v547;
  uint64_t v548;
  _QWORD *v549;
  unsigned int v550;
  llvm::ConstantAggregateZero *v551;
  const char *v552;
  unint64_t v553;
  unint64_t v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  int v558;
  int v559;
  int v560;
  unsigned int v561;
  unsigned int v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  char *v567;
  _QWORD *v568;
  uint64_t v569;
  unsigned __int8 *v570;
  uint64_t v571;
  llvm::Type *v572;
  unsigned __int8 *v573;
  llvm::Constant *v574;
  void *AllOnesValue;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t **v580;
  char v583;
  uint64_t v586;
  llvm::ConstantInt *v587;
  llvm::ValueHandleBase *v588;
  uint64_t *v589;
  uint64_t v590;
  uint64_t **v591;
  llvm::Type *v592;
  const char *v593;
  unint64_t v594;
  const char *v595;
  unint64_t v596;
  unsigned __int8 *v597;
  unsigned __int8 *v598;
  _QWORD *v599;
  char *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t *v603;
  llvm::ValueAsMetadata **v604;
  uint64_t v605;
  uint64_t **v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  _QWORD *v611;
  BOOL v612;
  BOOL v613;
  BOOL v614;
  BOOL v615;
  BOOL v616;
  BOOL v617;
  uint64_t *v619;
  uint64_t v620;
  llvm::Value *v621;
  int v622;
  __int16 v623;
  char *v624;
  uint64_t **v625;
  const llvm::APInt *v626;
  llvm::ValueAsMetadata **v627;
  llvm::ConstantInt *v628;
  llvm::ValueHandleBase *v629;
  uint64_t v630;
  uint64_t v631;
  llvm::Value **v632;
  llvm::ConstantInt *v638;
  int v643;
  uint64_t v644;
  char *v645;
  int v646;
  uint64_t v647;
  uint64_t v648;
  char *v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t **v653;
  uint64_t **v654;
  uint64_t v655;
  uint64_t *v656;
  uint64_t v657;
  const char *v658;
  int v659;
  int v660;
  llvm::Type *v661;
  int v662;
  char *v663;
  char *v664;
  unsigned __int8 **v665;
  int v666;
  unsigned __int8 *v667;
  unsigned __int8 *v668;
  unsigned __int8 *v669;
  unsigned int v670;
  unint64_t v671;
  _DWORD *v672;
  uint64_t m;
  uint64_t v674;
  uint64_t *v675;
  char *v676;
  unsigned __int8 *v677;
  uint64_t v678;
  uint64_t v679;
  BOOL v684;
  BOOL v686;
  BOOL v688;
  llvm::Constant ***v690;
  llvm::Constant **v691;
  llvm::Value **v692;
  llvm::Type *v693;
  unsigned __int8 *v694;
  char *v700;
  char *v701;
  unsigned __int8 **v702;
  int v703;
  unsigned __int8 *v704;
  unsigned __int8 *v705;
  unsigned __int8 *v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t *v709;
  uint64_t v710;
  llvm::ConstantInt *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  _QWORD *v716;
  uint64_t v717;
  BOOL v723;
  BOOL v724;
  BOOL v725;
  BOOL v729;
  BOOL v730;
  BOOL v731;
  BOOL v735;
  BOOL v736;
  BOOL v737;
  BOOL v741;
  BOOL v742;
  BOOL v743;
  uint64_t v744;
  uint64_t v746;
  BOOL v747;
  uint64_t v748;
  uint64_t v749;
  const llvm::APInt *v750;
  uint64_t v751;
  uint64_t **v752;
  llvm::Value *v753;
  int v754;
  llvm::ConstantInt *v755;
  llvm::ValueHandleBase *v756;
  uint64_t v757;
  int v758;
  int v759;
  int v760;
  uint64_t v761;
  char *v762;
  char *v763;
  _QWORD *v764;
  uint64_t v765;
  uint64_t v766;
  BOOL v767;
  BOOL v768;
  BOOL v769;
  BOOL v770;
  BOOL v771;
  BOOL v772;
  BOOL v773;
  BOOL v774;
  BOOL v775;
  BOOL v776;
  BOOL v779;
  int v780;
  BOOL v781;
  BOOL v784;
  BOOL v785;
  BOOL v786;
  BOOL v787;
  BOOL v788;
  BOOL v789;
  BOOL v790;
  BOOL v791;
  BOOL v792;
  BOOL v793;
  BOOL v794;
  char v795;
  llvm::PoisonValue **v796;
  llvm::Type *v797;
  uint64_t **v798;
  llvm::Constant *v799;
  llvm::Type *v800;
  llvm::Value **NullValue;
  void *v802;
  uint64_t v803;
  llvm::Type *v804;
  _QWORD *v805;
  int v806;
  uint64_t v807;
  int v808;
  int v809;
  uint64_t v810;
  char *v811;
  unsigned __int8 *v812;
  uint64_t v813;
  uint64_t *v814;
  uint64_t v815;
  void *v816;
  int v817;
  uint64_t v818;
  int v819;
  int v820;
  uint64_t v821;
  char *v822;
  char *v823;
  uint64_t v824;
  _QWORD *v825;
  uint64_t *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t **v829;
  BOOL v831;
  char *v834;
  llvm::Constant **v835;
  uint64_t v836;
  unsigned __int8 *v837;
  uint64_t v838;
  llvm::Type *v839;
  llvm::Value **v840;
  __int16 v841;
  char *v842;
  char *v843;
  unsigned __int8 **v844;
  int v845;
  unsigned __int8 *v846;
  unsigned __int8 *v847;
  unsigned __int8 *v848;
  _QWORD *v849;
  uint64_t v850;
  uint64_t v851;
  _QWORD *v852;
  uint64_t v853;
  uint64_t v854;
  _QWORD *v855;
  uint64_t v856;
  const char *v857;
  int v858;
  int v859;
  int v860;
  const char *v861;
  int v862;
  uint64_t v863;
  llvm::ConstantAggregateZero *v864;
  unsigned int v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  int v870;
  uint64_t v871;
  uint64_t MaskedLoad;
  uint64_t *v873;
  uint64_t v874;
  _QWORD *v875;
  uint64_t v876;
  llvm::ValueHandleBase *v878;
  llvm::ValueHandleBase *v879;
  uint64_t v880;
  char *v881;
  llvm::ValueHandleBase *v882;
  uint64_t v883;
  uint64_t **v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  BOOL v889;
  BOOL v890;
  BOOL v891;
  BOOL v892;
  llvm::Value *v895;
  int v896;
  char *v897;
  llvm::Type *v898;
  uint64_t ***v899;
  BOOL v902;
  BOOL v903;
  BOOL v904;
  BOOL v905;
  uint64_t v913;
  uint64_t **v914;
  _QWORD *v915;
  BOOL v916;
  BOOL v918;
  BOOL v919;
  BOOL v920;
  uint64_t *v922;
  uint64_t *v923;
  unsigned __int8 *v924;
  uint64_t v925;
  llvm::ConstantInt *v926;
  __n128 v927;
  uint64_t *v929;
  uint64_t *v930;
  BOOL v934;
  BOOL v936;
  BOOL v938;
  BOOL v940;
  BOOL v942;
  BOOL v944;
  BOOL v946;
  BOOL v948;
  BOOL v952;
  BOOL v954;
  BOOL v956;
  uint64_t *v958;
  llvm::PoisonValue **v959;
  uint64_t v960;
  _QWORD *v961;
  uint64_t v962;
  unsigned int v963;
  unint64_t v964;
  uint64_t v965;
  llvm::Type *v966;
  _DWORD *v967;
  uint64_t j;
  int v969;
  uint64_t v970;
  _QWORD *v971;
  uint64_t v972;
  _DWORD *v973;
  uint64_t k;
  uint64_t v975;
  int v976;
  int v977;
  uint64_t v978;
  int v979;
  int v980;
  uint64_t v981;
  BOOL v984;
  BOOL v985;
  uint64_t *v988;
  uint64_t v989;
  uint64_t v990;
  _QWORD *v991;
  _QWORD *v992;
  unint64_t v993;
  unsigned int v994;
  _DWORD *v995;
  uint64_t v996;
  int v997;
  _DWORD *v998;
  BOOL v1005;
  BOOL v1008;
  BOOL v1009;
  BOOL v1010;
  char *v1011;
  uint64_t v1012;
  _QWORD *v1013;
  unsigned __int8 *v1014;
  unsigned int v1015;
  uint64_t v1016;
  uint64_t *v1017;
  uint64_t *v1018;
  uint64_t *v1019;
  uint64_t v1020;
  _QWORD *v1021;
  unsigned int v1022;
  unint64_t v1023;
  char v1024;
  uint64_t v1025;
  int64x2_t v1026;
  uint64x2_t v1027;
  int64x2_t v1028;
  int32x2_t v1029;
  int v1030;
  uint64_t v1031;
  int v1032;
  int v1033;
  uint64_t v1034;
  BOOL v1038;
  BOOL v1039;
  uint64_t v1042;
  unint64_t *v1043;
  unint64_t v1044;
  unint64_t v1045;
  llvm::Type *v1046;
  char *v1047;
  _QWORD *v1048;
  _QWORD *v1049;
  char *v1054;
  uint64_t v1055;
  _QWORD *v1056;
  unsigned int v1057;
  unsigned __int8 *v1058;
  uint64_t *v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  _QWORD *v1065;
  unsigned int v1066;
  unint64_t v1067;
  char *v1068;
  uint64_t v1069;
  int64x2_t v1070;
  uint64x2_t v1071;
  int64x2_t v1072;
  int32x2_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  char *v1077;
  uint64_t v1078;
  _QWORD *v1079;
  char *v1080;
  llvm::Type *v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  unsigned __int8 *v1085;
  int v1086;
  BOOL v1091;
  BOOL v1092;
  BOOL v1093;
  BOOL v1094;
  BOOL v1095;
  char v1096;
  char v1097;
  uint64_t *v1098;
  uint64_t v1099;
  _QWORD *v1100;
  uint64_t v1101;
  llvm::ConstantAggregateZero *v1102;
  unint64_t v1103;
  unsigned int v1104;
  unsigned int v1105;
  _DWORD *v1106;
  uint64_t v1107;
  unsigned int v1108;
  int v1109;
  int v1110;
  int64x2_t v1111;
  uint64x2_t v1112;
  int64x2_t v1113;
  int32x2_t v1114;
  int v1115;
  uint64_t v1116;
  int v1117;
  int v1118;
  uint64_t v1119;
  char *v1120;
  BOOL v1121;
  BOOL v1123;
  BOOL v1124;
  BOOL v1129;
  BOOL v1130;
  BOOL v1132;
  BOOL v1133;
  llvm::ConstantAggregateZero *v1134;
  uint64_t *v1135;
  uint64_t v1136;
  int v1137;
  uint64_t v1138;
  uint64_t *v1139;
  uint64_t *v1140;
  int v1141;
  uint64_t v1142;
  int v1143;
  int v1144;
  uint64_t v1145;
  char *v1146;
  char *v1147;
  uint64_t v1148;
  _QWORD *v1149;
  int v1150;
  uint64_t *v1151;
  uint64_t Declaration;
  uint64_t **v1153;
  int v1154;
  uint64_t v1155;
  int v1156;
  int v1157;
  uint64_t v1158;
  unint64_t v1159;
  int v1160;
  uint64_t v1161;
  _DWORD *v1162;
  uint64_t v1163;
  int v1164;
  char *v1165;
  char *v1166;
  uint64_t v1167;
  _QWORD *v1168;
  char *v1169;
  unsigned __int8 *v1170;
  llvm::Type *v1171;
  uint64_t v1172;
  BOOL v1178;
  BOOL v1179;
  BOOL v1180;
  BOOL v1181;
  unsigned __int8 *v1182;
  BOOL v1184;
  BOOL v1185;
  BOOL v1186;
  BOOL v1187;
  unsigned __int8 *v1188;
  BOOL v1189;
  BOOL v1190;
  BOOL v1191;
  BOOL v1192;
  BOOL v1193;
  BOOL v1194;
  BOOL v1195;
  BOOL v1196;
  BOOL v1197;
  BOOL v1200;
  BOOL v1201;
  BOOL v1202;
  BOOL v1203;
  BOOL v1204;
  BOOL v1205;
  llvm::ConstantAggregateZero *v1206;
  uint64_t v1207;
  int v1208;
  uint64_t *v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t **v1212;
  uint64_t *v1213;
  uint64_t v1214;
  _QWORD *v1215;
  unsigned int v1216;
  unint64_t v1217;
  unint64_t v1218;
  int8x16_t v1219;
  int8x16_t v1220;
  int8x16_t *v1221;
  int8x16_t v1222;
  int32x4_t v1223;
  int32x4_t v1224;
  llvm::Value *v1230;
  int v1231;
  uint64_t *v1232;
  uint64_t v1233;
  _QWORD *v1234;
  unsigned int v1235;
  unint64_t v1236;
  unint64_t v1237;
  int8x16_t v1238;
  int8x16_t v1239;
  unsigned __int128 *v1240;
  int32x2_t v1241;
  unsigned __int8 *v1242;
  _BOOL4 v1243;
  int v1244;
  uint64_t v1245;
  int v1246;
  int v1247;
  uint64_t v1248;
  char *v1249;
  uint64_t *v1250;
  uint64_t v1251;
  _QWORD *v1252;
  _QWORD *v1253;
  uint64_t *v1254;
  uint64_t v1255;
  _QWORD *v1256;
  uint64_t v1257;
  uint64_t v1258;
  llvm::ConstantAggregateZero *v1259;
  unint64_t v1260;
  unsigned int v1261;
  unsigned int v1262;
  uint64_t v1263;
  unsigned int v1264;
  unsigned int v1265;
  _DWORD *v1266;
  int v1267;
  int64x2_t v1268;
  uint64x2_t v1269;
  int64x2_t v1270;
  int32x2_t v1271;
  int v1272;
  int v1273;
  uint64_t *v1274;
  char *v1275;
  unsigned __int8 *v1276;
  uint64_t v1277;
  uint64_t v1278;
  unsigned __int8 *v1279;
  unint64_t v1280;
  int v1281;
  char *v1282;
  unsigned __int8 *v1283;
  llvm::PointerType **v1284;
  unsigned __int8 *v1285;
  llvm::PointerType *v1286;
  uint64_t v1287;
  uint64_t *v1288;
  char v1289;
  BOOL v1292;
  BOOL v1293;
  BOOL v1294;
  BOOL v1295;
  BOOL v1297;
  BOOL v1298;
  BOOL v1299;
  BOOL v1302;
  uint64_t *v1304;
  uint64_t v1305;
  uint64_t v1306;
  llvm::ConstantAggregateZero *v1307;
  unint64_t v1308;
  uint64_t v1309;
  unsigned int v1310;
  _DWORD *v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64x2_t v1314;
  int64x2_t v1315;
  uint64_t v1316;
  int v1317;
  int64x2_t v1318;
  int32x2_t v1319;
  _BOOL4 v1320;
  llvm::Value *v1321;
  int v1322;
  BOOL v1329;
  BOOL v1338;
  BOOL v1339;
  BOOL v1340;
  BOOL v1341;
  BOOL v1342;
  BOOL v1343;
  BOOL v1346;
  char v1348;
  uint64_t v1349;
  uint64_t v1350;
  _QWORD *v1351;
  _QWORD *v1352;
  _QWORD *v1353;
  uint64_t v1354;
  BOOL v1365;
  uint64_t v1367;
  int v1368;
  llvm::ConstantAggregateZero *v1369;
  unint64_t v1370;
  uint64_t v1371;
  unsigned int v1372;
  _BOOL4 v1373;
  char *v1375;
  char *v1376;
  uint64_t v1377;
  _QWORD *v1378;
  uint64_t v1379;
  char *v1380;
  _QWORD *v1381;
  uint64_t v1382;
  char *v1383;
  unsigned int *v1384;
  unsigned __int8 *v1385;
  uint64_t v1386;
  unsigned __int8 *v1387;
  uint64_t v1388;
  uint64_t *v1389;
  uint64_t v1390;
  _DWORD *v1393;
  int v1394;
  uint64_t v1395;
  unsigned int v1396;
  int v1397;
  char *v1398;
  uint64_t *v1399;
  llvm::ConstantAggregateZero *v1400;
  unint64_t v1401;
  uint64_t v1402;
  unsigned int v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64x2_t v1406;
  int64x2_t v1407;
  uint64_t v1408;
  int64x2_t v1409;
  int32x2_t v1410;
  char *v1411;
  uint64_t *v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  int v1419;
  int v1420;
  _BOOL4 v1421;
  uint64_t *v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  unint64_t v1426;
  llvm::Type *v1427;
  _DWORD *v1428;
  uint64_t i;
  llvm::PoisonValue **v1430;
  uint64_t v1431;
  _QWORD *v1432;
  unsigned __int8 *v1433;
  uint64_t v1434;
  char *v1435;
  uint64_t *v1436;
  uint64_t v1437;
  llvm::ConstantAggregateZero *v1438;
  uint64_t v1439;
  uint64_t v1440;
  BOOL v1441;
  __int16 v1442;
  __int16 v1443;
  llvm::ConstantAggregateZero *v1444;
  uint64_t v1445;
  uint64_t v1446;
  unsigned __int8 *v1447;
  _QWORD *v1448;
  unsigned __int8 *v1449;
  unsigned __int8 *v1450;
  __int128 *v1451;
  char *v1452;
  char *v1453;
  _QWORD *v1454;
  uint64_t v1455;
  _QWORD *v1456;
  uint64_t v1457;
  uint64_t v1458;
  _QWORD *v1459;
  uint64_t v1460;
  char *v1461;
  char *v1462;
  unsigned __int8 **v1463;
  int v1464;
  unsigned __int8 *v1465;
  unsigned __int8 *v1466;
  unsigned __int8 *v1467;
  char *v1468;
  uint64_t *v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  unsigned __int8 *v1473;
  unsigned __int8 *v1474;
  unsigned __int8 *v1475;
  unsigned __int8 *v1476;
  unsigned __int8 *v1477;
  uint64_t *v1478;
  uint64_t v1479;
  const llvm::APInt *v1480;
  uint64_t v1481;
  uint64_t **v1482;
  uint64_t v1483;
  uint64_t v1484;
  unsigned __int8 *v1485;
  unsigned __int8 *v1486;
  unsigned __int8 *v1487;
  unsigned __int8 *v1488;
  uint64_t v1489;
  llvm::PointerType *v1490;
  uint64_t v1491;
  unsigned __int8 *v1492;
  uint64_t v1493;
  unsigned __int8 *v1494;
  char v1495;
  char v1496;
  char *v1497;
  char *v1498;
  llvm::Value *v1499;
  uint64_t v1500;
  _QWORD *v1501;
  uint64_t v1502;
  llvm::Type *v1503;
  uint64_t v1504;
  uint64_t v1505;
  llvm::ConstantInt *v1506;
  llvm::Value **v1507;
  uint64_t v1508;
  unsigned __int8 *v1509;
  uint64_t v1510;
  unsigned __int8 *v1511;
  uint64_t **v1512;
  char *v1513;
  unsigned int **v1514;
  unsigned int *v1515;
  unsigned __int8 *v1516;
  uint64_t v1517;
  unsigned __int8 *v1518;
  uint64_t v1519;
  uint64_t *v1520;
  uint64_t v1521;
  int v1522;
  int v1523;
  _BOOL4 v1524;
  uint64_t v1525;
  uint64_t v1526;
  unsigned __int8 *v1527;
  unsigned __int8 *v1528;
  unsigned __int8 *v1529;
  char *v1530;
  int v1531;
  uint64_t v1532;
  int v1533;
  int v1534;
  uint64_t v1535;
  char *v1536;
  uint64_t *v1537;
  uint64_t v1538;
  char *v1539;
  char *v1540;
  unsigned __int8 **v1541;
  int v1542;
  unsigned __int8 *v1543;
  unsigned __int8 *v1544;
  unsigned __int8 *v1545;
  int v1546;
  int v1547;
  _BOOL4 v1548;
  uint64_t *v1549;
  uint64_t v1550;
  uint64_t v1551;
  llvm::ConstantInt ***v1552;
  llvm::Value **v1553;
  llvm::Type *v1554;
  llvm::Constant **v1555;
  llvm::Value **v1556;
  const llvm::APInt *v1557;
  uint64_t v1558;
  llvm::ConstantInt *v1559;
  llvm::ValueHandleBase *v1560;
  const llvm::APInt *v1561;
  uint64_t *v1562;
  llvm::ConstantInt *v1563;
  llvm::ValueHandleBase *v1564;
  unsigned __int8 *v1565;
  BOOL v1570;
  BOOL v1571;
  unsigned __int8 *v1574;
  BOOL v1577;
  BOOL v1579;
  BOOL v1581;
  BOOL v1582;
  unsigned __int8 *v1583;
  BOOL v1584;
  BOOL v1585;
  BOOL v1586;
  BOOL v1587;
  BOOL v1588;
  BOOL v1589;
  char *v1590;
  uint64_t *v1591;
  uint64_t v1592;
  llvm::ConstantAggregateZero *v1593;
  __int16 v1594;
  unsigned __int8 *v1595;
  uint64_t v1596;
  llvm::ConstantAggregateZero *v1597;
  _BOOL4 v1598;
  llvm::ConstantInt *v1599;
  llvm::ValueHandleBase *v1600;
  uint64_t **v1601;
  llvm::ConstantInt *v1602;
  unsigned int v1603;
  unint64_t v1604;
  llvm::Value *v1605;
  llvm::ValueHandleBase *v1606;
  void *Impl;
  unsigned __int8 *v1608;
  uint64_t v1609;
  unsigned __int8 *v1610;
  llvm::ConstantAggregateZero *v1611;
  unint64_t v1612;
  char *v1613;
  char *v1614;
  char v1615;
  uint64_t v1616;
  _QWORD *v1617;
  uint64_t v1618;
  int MDKindID;
  unsigned __int8 *v1620;
  BOOL v1621;
  int v1622;
  int v1632;
  BOOL v1633;
  int v1634;
  uint64_t v1635;
  unsigned __int8 *v1636;
  unint64_t v1637;
  int v1638;
  uint64_t v1639;
  int v1640;
  char *v1641;
  unsigned __int8 *v1642;
  unsigned __int8 *v1643;
  unsigned __int8 *v1644;
  int v1645;
  llvm::Value *v1646;
  llvm::ConstantAggregateZero *v1647;
  const char *v1648;
  int v1649;
  int v1650;
  int v1651;
  _BOOL4 v1652;
  BOOL v1655;
  llvm::Type *v1657;
  const char *v1658;
  unint64_t v1659;
  llvm::Type *v1660;
  llvm::PointerType *v1661;
  llvm::PointerType *v1662;
  unsigned __int8 *v1663;
  uint64_t v1664;
  unsigned __int8 *v1665;
  char *v1666;
  char *v1667;
  llvm::PoisonValue **v1668;
  uint64_t v1669;
  _QWORD *v1670;
  uint64_t v1671;
  llvm::Type *v1672;
  _QWORD *v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  _QWORD *v1677;
  char *v1678;
  char *v1679;
  llvm::Type **v1680;
  int v1681;
  unsigned __int8 *v1682;
  llvm::Value *v1683;
  llvm::ConstantAggregateZero *v1684;
  const char *v1685;
  int PrimitiveSizeInBits;
  int v1687;
  int v1688;
  uint64_t v1689;
  int v1690;
  int v1691;
  uint64_t v1692;
  uint64_t v1693;
  int v1694;
  int v1695;
  char *v1696;
  unsigned __int8 *v1697;
  uint64_t v1698;
  unsigned __int8 *v1699;
  unsigned __int8 *v1700;
  _BOOL4 v1701;
  BOOL v1702;
  BOOL v1704;
  BOOL v1706;
  BOOL v1708;
  uint64_t v1709;
  unsigned __int8 *v1710;
  int v1711;
  uint64_t v1712;
  int v1713;
  int v1714;
  uint64_t v1715;
  int v1716;
  char *v1717;
  char *v1718;
  int v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t **v1723;
  unint64_t v1724;
  uint64_t v1725;
  uint64_t *v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t **v1729;
  uint64_t v1730;
  int v1731;
  uint64_t *v1732;
  uint64_t v1733;
  uint64_t **v1734;
  _BOOL4 v1735;
  uint64_t v1736;
  uint64_t **v1737;
  _QWORD *v1738;
  uint64_t v1739;
  int v1740;
  llvm::Value **v1741;
  BOOL v1746;
  BOOL v1747;
  BOOL v1748;
  BOOL v1749;
  BOOL v1750;
  BOOL v1751;
  int v1756;
  uint64_t v1757;
  int v1758;
  const char *v1759;
  int v1760;
  int v1761;
  int v1762;
  int v1763;
  llvm::ConstantAggregateZero *v1764;
  const char *v1765;
  int v1766;
  unsigned int v1767;
  int v1768;
  _BOOL4 v1769;
  BOOL v1770;
  int v1771;
  int v1772;
  char *v1773;
  char *v1774;
  llvm::Type **v1775;
  int v1776;
  unsigned __int8 *v1777;
  uint64_t v1778;
  int v1779;
  const char *v1780;
  int v1781;
  _QWORD *v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  llvm::Type *v1787;
  uint64_t v1788;
  uint64_t **v1789;
  uint64_t v1790;
  uint64_t v1791;
  _DWORD *v1792;
  uint64_t v1793;
  uint64x2_t v1794;
  int64x2_t v1795;
  int64x2_t v1796;
  int32x2_t v1797;
  llvm::Value *v1798;
  _QWORD *v1799;
  uint64_t v1800;
  uint64_t v1801;
  char *v1802;
  const char *v1803;
  int v1804;
  int v1805;
  int v1806;
  int v1807;
  int v1808;
  int v1809;
  int v1810;
  BOOL v1811;
  int v1812;
  BOOL v1813;
  int v1814;
  int v1815;
  uint64_t v1816;
  BOOL v1817;
  int v1818;
  BOOL v1820;
  int v1821;
  BOOL v1823;
  int v1824;
  BOOL v1826;
  int v1827;
  BOOL v1829;
  int v1830;
  int v1831;
  uint64_t v1832;
  char *v1833;
  char *v1834;
  unsigned __int8 **v1835;
  int v1836;
  unsigned __int8 *v1837;
  unsigned __int8 *v1838;
  unsigned __int8 *v1839;
  uint64_t v1840;
  uint64_t v1841;
  llvm::Value *v1845;
  const char *v1846;
  int v1847;
  unint64_t v1848;
  int v1849;
  llvm::Type *v1850;
  int v1851;
  _DWORD *v1852;
  int v1856;
  int v1857;
  int v1858;
  int v1859;
  int v1860;
  unsigned __int8 *v1861;
  _BOOL4 v1862;
  _QWORD *v1864;
  uint64_t v1865;
  uint64_t **v1866;
  llvm::Type *v1867;
  llvm::Value *v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  char *v1872;
  uint64_t v1873;
  char *v1874;
  uint64_t v1875;
  char *v1876;
  uint64_t v1877;
  char *v1878;
  uint64_t v1879;
  _QWORD *v1880;
  uint64_t v1881;
  uint64_t **v1882;
  uint64_t *v1883;
  uint64_t v1884;
  unsigned __int8 *v1885;
  uint64_t v1886;
  unsigned __int8 *v1887;
  char *v1888;
  char *v1889;
  unsigned __int8 **v1890;
  llvm::Value *v1891;
  uint64_t v1892;
  _QWORD *v1893;
  uint64_t v1894;
  uint64_t v1895;
  unsigned __int8 ***v1896;
  uint64_t v1897;
  BOOL v1898;
  int v1899;
  _BOOL4 v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  _QWORD *v1905;
  uint64_t v1906;
  uint64_t **v1907;
  llvm::Type *v1908;
  uint64_t v1909;
  uint64_t *v1910;
  uint64_t v1911;
  uint64_t v1912;
  uint64_t v1913;
  unsigned __int8 *v1914;
  uint64_t *v1915;
  uint64_t v1916;
  uint64_t **v1917;
  uint64_t v1918;
  llvm::Type *v1919;
  unsigned __int8 *v1920;
  uint64_t v1921;
  BOOL v1924;
  BOOL v1926;
  BOOL v1928;
  BOOL v1929;
  BOOL v1932;
  BOOL v1934;
  BOOL v1936;
  BOOL v1938;
  BOOL v1940;
  BOOL v1941;
  BOOL v1942;
  int v1944;
  BOOL v1945;
  int v1946;
  uint64_t v1947;
  unsigned __int8 *v1948;
  int v1949;
  uint64_t v1950;
  int v1951;
  char *v1952;
  unsigned __int8 *v1953;
  unsigned __int8 *v1954;
  unsigned __int8 *v1955;
  unsigned __int8 *v1956;
  unsigned __int8 *v1957;
  unsigned __int8 *v1958;
  unsigned __int8 *v1959;
  uint64_t v1960;
  _QWORD *v1961;
  uint64_t *v1962;
  uint64_t v1963;
  uint64_t v1964;
  uint64_t **v1965;
  int v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  char *v1970;
  char *v1971;
  unsigned __int8 **v1972;
  int v1973;
  unsigned __int8 *v1974;
  unsigned __int8 *v1975;
  unsigned __int8 *v1976;
  unsigned int v1978;
  int v1979;
  uint64_t v1980;
  int v1981;
  int v1982;
  uint64_t v1983;
  char *v1984;
  char *v1985;
  uint64_t v1986;
  _QWORD *v1987;
  uint64_t *v1988;
  uint64_t v1989;
  char *v1990;
  uint64_t v1991;
  int v1992;
  uint64_t v1993;
  llvm::Constant **v1994;
  llvm::Type *v1995;
  unsigned __int8 *v1996;
  uint64_t v1997;
  unsigned __int8 *v1998;
  uint64_t v1999;
  const llvm::APInt *v2000;
  unsigned __int8 *v2001;
  llvm::ConstantInt *v2002;
  llvm::ValueHandleBase *v2003;
  unsigned __int8 *v2004;
  char *v2005;
  uint64_t v2006;
  BOOL v2007;
  int v2008;
  uint64_t v2009;
  int v2010;
  uint64_t v2011;
  char *v2012;
  int v2013;
  uint64_t v2014;
  uint64_t v2015;
  char *v2016;
  uint64_t v2017;
  uint64_t v2018;
  int v2019;
  _QWORD *v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t **v2024;
  uint64_t v2025;
  int v2026;
  uint64_t v2027;
  int v2028;
  uint64_t v2029;
  llvm::Value *v2030;
  unint64_t v2031;
  BOOL v2039;
  char *v2042;
  uint64_t v2043;
  uint64_t *v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t **v2048;
  llvm::Type *v2049;
  uint64_t v2050;
  _QWORD *v2051;
  unsigned __int8 *v2052;
  _BOOL4 v2053;
  BOOL v2054;
  int v2055;
  BOOL v2056;
  int v2057;
  BOOL v2059;
  int v2060;
  BOOL v2062;
  int v2063;
  int v2064;
  char *v2067;
  uint64_t v2068;
  BOOL v2073;
  int v2075;
  char *v2076;
  uint64_t v2077;
  char *v2078;
  uint64_t v2079;
  char *v2080;
  uint64_t v2081;
  char *v2082;
  uint64_t v2083;
  BOOL v2084;
  int v2085;
  char *v2086;
  uint64_t v2087;
  uint64_t v2088;
  char *v2089;
  uint64_t v2090;
  char *v2091;
  uint64_t v2092;
  uint64_t v2093;
  char *v2094;
  uint64_t v2095;
  uint64_t v2096;
  char *v2097;
  uint64_t v2098;
  int v2099;
  llvm::Value *v2100;
  llvm::PoisonValue *v2101;
  llvm::ConstantAggregateZero *v2102;
  unsigned __int8 *v2103;
  unint64_t v2104;
  llvm::CallBase *v2105;
  llvm::Value *v2106;
  llvm::ValueAsMetadata **v2107;
  llvm::CallBase **v2108;
  void *v2109;
  __int16 v2110;
  void *__src;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  llvm::Value **v2115;
  void *v2116;
  uint64_t v2117;
  _BYTE v2118[32];
  uint64_t v2119;
  uint64_t v2120;
  uint64_t *v2121;
  void **v2122;
  void **v2123;
  uint64_t v2124;
  int v2125;
  __int16 v2126;
  char v2127;
  uint64_t v2128;
  uint64_t v2129;
  void *v2130;
  void *v2131;
  __int128 v2132;
  __int128 v2133;
  __int16 v2134;
  uint64_t v2135;
  uint64_t v2136[3];

  v2136[1] = *MEMORY[0x1E0C80C00];
  v2105 = a2;
  v2106 = this;
  v3 = *((_QWORD *)this - 4);
  if (!v3 || *(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *((_QWORD *)this + 9))
    v3 = 0;
  v2101 = (llvm::PoisonValue *)v3;
  v4 = **(uint64_t ***)this;
  v2116 = v2118;
  v2117 = 0x200000000;
  v2121 = v4;
  v2122 = &v2130;
  v2123 = &v2131;
  v2124 = 0;
  v2125 = 0;
  v2126 = 512;
  v2127 = 7;
  v2119 = 0;
  v2120 = 0;
  v2128 = 0;
  v2129 = 0;
  v2130 = &unk_1E8167888;
  v2131 = &unk_1E8167A08;
  sub_1C4D8AE2C((uint64_t)&v2116, *((_QWORD *)this + 5), (uint64_t)this + 24);
  v6 = (uint64_t)v2105;
  if (!v2105)
  {
    v21 = v2101;
    if ((*((_BYTE *)v2101 + 23) & 0x10) == 0)
    {
      v77 = 0;
      v76 = &byte_1C871356D;
LABEL_73:
      v79 = 5;
      if (v77 < 5)
        v79 = v77;
      v80 = &v76[v79];
      v81 = v77 - v79;
      v2103 = (unsigned __int8 *)v80;
      v2104 = v77 - v79;
      v82 = v77 - v79 >= 4;
      v83 = v77 - v79 - 4;
      if (!v82)
        goto LABEL_76;
      v85 = *(_DWORD *)v80 != 775305336;
      if (*(_DWORD *)v80 == 775305336)
      {
        v80 += 4;
        v2103 = (unsigned __int8 *)v80;
        v2104 = v83;
        v81 = v83;
      }
      v86 = v81 > 4;
      if (v81 >= 5)
      {
        if (*(_DWORD *)v80 != 1836480110 || v80[4] != 46)
        {
          v86 = 0;
LABEL_139:
          if (*(_DWORD *)v80 == 778924641)
          {
            v80 += 4;
            v81 -= 4;
            v2103 = (unsigned __int8 *)v80;
            v2104 = v81;
            if (v85)
              goto LABEL_141;
LABEL_249:
            if (v81 < 0xC)
            {
              if (v81 < 0xA)
                goto LABEL_424;
              goto LABEL_256;
            }
            if (*(_QWORD *)v80 != 0x6F6D2E6134657373 || *((_DWORD *)v80 + 2) != 779382390)
            {
LABEL_256:
              if (*(_QWORD *)v80 != 0x6E766F6D2E787661 || *((_WORD *)v80 + 4) != 11892)
              {
                if (v81 < 0xF)
                {
                  if (v81 != 14)
                  {
LABEL_424:
                    if (v81 < 0xB)
                    {
                      v185 = 0;
                      v330 = 0;
                      v331 = 0;
                      v332 = 0;
                      v333 = 1;
                      v334 = 1;
                      v335 = 1;
                      v336 = 1;
                      v337 = 1;
                      v338 = 1;
                      if (v81 < 9)
                      {
LABEL_426:
                        if (v81 == 10)
                        {
                          if ((*(_QWORD *)v80 != 0x2E6464612E657373 || *((_WORD *)v80 + 4) != 29555)
                            && (*(_QWORD *)v80 != 0x2E6275732E657373 || *((_WORD *)v80 + 4) != 29555)
                            && (*(_QWORD *)v80 != 0x2E6C756D2E657373 || *((_WORD *)v80 + 4) != 29555)
                            && (*(_QWORD *)v80 != 0x2E7669642E657373 || *((_WORD *)v80 + 4) != 29555))
                          {
                            goto LABEL_733;
                          }
                          goto LABEL_734;
                        }
                        if (v81 == 17)
                        {
                          v340 = *(_QWORD *)v80 == 0x6B2E323135787661
                              && *((_QWORD *)v80 + 1) == 0x2E7A74736574726FLL
                              && v80[16] == 119;
                          if (v340
                            || (*(_QWORD *)v80 == 0x6B2E323135787661
                              ? (v341 = *((_QWORD *)v80 + 1) == 0x2E6374736574726FLL)
                              : (v341 = 0),
                                v341 ? (v342 = v80[16] == 119) : (v342 = 0),
                                v342))
                          {
                            v568 = (_QWORD *)sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                            v569 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], 0x10u);
                            LOWORD(v2115) = 257;
                            v570 = (unsigned __int8 *)sub_1C4773594((uint64_t)&v2116, v568, v569, (uint64_t)&__src);
                            v571 = *v2121 + 1936;
                            LOWORD(v2115) = 257;
                            v573 = sub_1C4773E38((uint64_t *)&v2116, 49, v570, v571, (uint64_t)&__src);
                            v574 = (llvm::Constant *)(*v2121 + 1936);
                            if (v80[14] == 99)
                              AllOnesValue = llvm::Constant::getAllOnesValue(v574, v572);
                            else
                              AllOnesValue = llvm::Constant::getNullValue(v574, v572);
                            LOWORD(v2115) = 257;
                            v408 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v2116, 32, (uint64_t)v573, (uint64_t)AllOnesValue, (uint64_t)&__src);
                            v409 = (llvm::ConstantAggregateZero *)(*v2121 + 1960);
                            LOWORD(v2115) = 257;
                            p_src = &__src;
                            v411 = 39;
                            goto LABEL_577;
                          }
                          if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x706D63702E6B7361)
                          {
                            v344 = 0;
                            v345 = 1;
LABEL_447:
                            v5 = 1;
                            goto LABEL_448;
                          }
LABEL_915:
                          v621 = v2106;
                          if (v80[16] == 101)
                            v622 = 0;
                          else
                            v622 = 6;
                          goto LABEL_1090;
                        }
                        if (v330)
                        {
                          if ((*(_QWORD *)v80 != 0x6464612E32657373 || *(_QWORD *)(v80 + 3) != 0x64732E6464612E32)
                            && (*(_QWORD *)v80 != 0x6275732E32657373 || *(_QWORD *)(v80 + 3) != 0x64732E6275732E32)
                            && (*(_QWORD *)v80 != 0x6C756D2E32657373 || *(_QWORD *)(v80 + 3) != 0x64732E6C756D2E32)
                            && (*(_QWORD *)v80 != 0x7669642E32657373 || *(_QWORD *)(v80 + 3) != 0x64732E7669642E32))
                          {
LABEL_733:
                            v344 = 0;
                            v345 = 0;
                            v503 = 0;
                            v348 = 1;
                            v504 = 1;
                            v5 = 1;
                            goto LABEL_1105;
                          }
LABEL_734:
                          v505 = (llvm::ConstantInt *)(*v4 + 1960);
                          v506 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                          v507 = llvm::ConstantInt::get(v505, 0, 0);
                          LOWORD(v2115) = 257;
                          v508 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v2116, v506, (uint64_t)v507, (uint64_t)&__src);
                          v509 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                          v510 = llvm::ConstantInt::get(v505, 0, 0);
                          LOWORD(v2115) = 257;
                          v511 = sub_1C4772EE0((uint64_t *)&v2116, v509, (uint64_t)v510, (uint64_t)&__src);
                          if (llvm::StringRef::find((uint64_t *)&v2103, ".add.", 5uLL, 0) == -1)
                          {
                            if (llvm::StringRef::find((uint64_t *)&v2103, ".sub.", 5uLL, 0) == -1)
                            {
                              if (llvm::StringRef::find((uint64_t *)&v2103, ".mul.", 5uLL, 0) == -1)
                              {
                                LOWORD(v2115) = 257;
                                v512 = sub_1C47721F8((uint64_t)&v2116, v508, (uint64_t)v511, (uint64_t)&__src, 0);
                              }
                              else
                              {
                                LOWORD(v2115) = 257;
                                v512 = sub_1C4772428((uint64_t)&v2116, v508, (uint64_t)v511, (uint64_t)&__src, 0);
                              }
                            }
                            else
                            {
                              LOWORD(v2115) = 257;
                              v512 = sub_1C477265C((uint64_t)&v2116, v508, (uint64_t)v511, (uint64_t)&__src, 0);
                            }
                          }
                          else
                          {
                            LOWORD(v2115) = 257;
                            v512 = sub_1C534554C((uint64_t)&v2116, v508, (uint64_t)v511, (uint64_t)&__src, 0);
                          }
                          v712 = v512;
                          v713 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                          v632 = llvm::ConstantInt::get(v505, 0, 0);
                          LOWORD(v2115) = 257;
                          v630 = v713;
                          v631 = v712;
LABEL_1102:
                          VectorSplat = (uint64_t)sub_1C4773154((uint64_t *)&v2116, v630, v631, (uint64_t)v632, (uint64_t)&__src);
                          goto LABEL_2998;
                        }
                        v344 = 0;
LABEL_820:
                        if (v81 < 0x10)
                        {
                          if (v81 < 0xC)
                          {
                            v345 = 0;
                            v503 = 0;
                            v348 = 1;
                            v504 = 1;
                            v5 = 1;
                            v583 = 1;
                            if (v81 < 9)
                            {
LABEL_1116:
                              if (v331)
                              {
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && *((_DWORD *)v80 + 2) == 1651734625)
                                  goto LABEL_1228;
                                if (*(_QWORD *)v80 == 0x616D702E32657373 && *((_DWORD *)v80 + 2) == 1999532920)
                                  goto LABEL_1228;
                                v6 = *((unsigned int *)v80 + 2);
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && v6 == 1685289057)
                                  goto LABEL_1228;
                              }
                              if ((v338 & 1) == 0)
                              {
                                v6 = 0x616D702E32787661;
                                v723 = *(_QWORD *)v80 == 0x616D702E32787661 && *((_WORD *)v80 + 4) == 29560;
                                if (v723
                                  || (v333 & 1) == 0
                                  && ((v6 = v80[16], *(_QWORD *)v80 == 0x6D2E323135787661)
                                    ? (v724 = *((_QWORD *)v80 + 1) == 0x78616D702E6B7361)
                                    : (v724 = 0),
                                      v724 ? (v725 = (_DWORD)v6 == 115) : (v725 = 0),
                                      v725))
                                {
LABEL_1228:
                                  v753 = v2106;
                                  v754 = 274;
                                  goto LABEL_1586;
                                }
                              }
                              if (v331)
                              {
                                if (*(_QWORD *)v80 == 0x616D702E32657373 && *((_DWORD *)v80 + 2) == 1647211896)
                                  goto LABEL_1238;
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && *((_DWORD *)v80 + 2) == 2004187233)
                                  goto LABEL_1238;
                                v6 = *((unsigned int *)v80 + 2);
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && (_DWORD)v6 == 1685420129)
                                  goto LABEL_1238;
                              }
                              if ((v338 & 1) == 0)
                              {
                                v6 = 0x616D702E32787661;
                                v729 = *(_QWORD *)v80 == 0x616D702E32787661 && *((_WORD *)v80 + 4) == 30072;
                                if (v729
                                  || (v333 & 1) == 0
                                  && ((v6 = v80[16], *(_QWORD *)v80 == 0x6D2E323135787661)
                                    ? (v730 = *((_QWORD *)v80 + 1) == 0x78616D702E6B7361)
                                    : (v730 = 0),
                                      v730 ? (v731 = (_DWORD)v6 == 117) : (v731 = 0),
                                      v731))
                                {
LABEL_1238:
                                  v753 = v2106;
                                  v754 = 305;
                                  goto LABEL_1586;
                                }
                              }
                              if (v331)
                              {
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && *((_DWORD *)v80 + 2) == 1651732073)
                                  goto LABEL_1438;
                                if (*(_QWORD *)v80 == 0x696D702E32657373 && *((_DWORD *)v80 + 2) == 1999532910)
                                  goto LABEL_1438;
                                v6 = *((unsigned int *)v80 + 2);
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && (_DWORD)v6 == 1685286505)
                                  goto LABEL_1438;
                              }
                              if ((v338 & 1) == 0)
                              {
                                v6 = 0x696D702E32787661;
                                v735 = *(_QWORD *)v80 == 0x696D702E32787661 && *((_WORD *)v80 + 4) == 29550;
                                if (v735
                                  || (v333 & 1) == 0
                                  && ((v6 = v80[16], *(_QWORD *)v80 == 0x6D2E323135787661)
                                    ? (v736 = *((_QWORD *)v80 + 1) == 0x6E696D702E6B7361)
                                    : (v736 = 0),
                                      v736 ? (v737 = (_DWORD)v6 == 115) : (v737 = 0),
                                      v737))
                                {
LABEL_1438:
                                  v753 = v2106;
                                  v754 = 275;
                                  goto LABEL_1586;
                                }
                              }
                              if (v331)
                              {
                                if (*(_QWORD *)v80 == 0x696D702E32657373 && *((_DWORD *)v80 + 2) == 1647211886)
                                  goto LABEL_1460;
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && *((_DWORD *)v80 + 2) == 2004184681)
                                  goto LABEL_1460;
                                v6 = *((unsigned int *)v80 + 2);
                                if (*(_QWORD *)v80 == 0x6D702E3134657373 && v6 == 1685417577)
                                  goto LABEL_1460;
                              }
                              if ((v338 & 1) == 0)
                              {
                                v6 = 0x696D702E32787661;
                                v741 = *(_QWORD *)v80 == 0x696D702E32787661 && *((_WORD *)v80 + 4) == 30062;
                                if (v741
                                  || (v333 & 1) == 0
                                  && ((v6 = 0x6D2E323135787661, *(_QWORD *)v80 == 0x6D2E323135787661)
                                    ? (v742 = *((_QWORD *)v80 + 1) == 0x6E696D702E6B7361)
                                    : (v742 = 0),
                                      v742 ? (v743 = v80[16] == 117) : (v743 = 0),
                                      v743))
                                {
LABEL_1460:
                                  MaskedLoad = (uint64_t)sub_1C534591C((uint64_t *)&v2116, (uint64_t)v2106, 306);
                                  goto LABEL_1633;
                                }
                              }
                              if ((_DWORD)v344)
                              {
                                v744 = 0x71642E756C756D70;
                                if (*(_QWORD *)v80 == 0x756D702E32657373
                                  && *(_QWORD *)(v80 + 5) == 0x71642E756C756D70)
                                {
                                  goto LABEL_1530;
                                }
                                v746 = *(_QWORD *)(v80 + 5);
                                v6 = 0x756D702E32787661;
                                v747 = *(_QWORD *)v80 == 0x756D702E32787661;
                              }
                              else
                              {
                                if (v81 != 19)
                                {
LABEL_1503:
                                  if ((v5 & 1) != 0
                                    || ((v6 = 0x6D2E323135787661, *(_QWORD *)v80 == 0x6D2E323135787661)
                                      ? (v889 = *((_QWORD *)v80 + 1) == 0x6C756D702E6B7361)
                                      : (v889 = 0),
                                        v889 ? (v890 = *(_QWORD *)(v80 + 13) == 0x2E71642E756C756DLL) : (v890 = 0),
                                        !v890))
                                  {
                                    if (!v331
                                      || (*(_QWORD *)v80 == 0x6D702E3134657373
                                        ? (v891 = *((_DWORD *)v80 + 2) == 1902406773)
                                        : (v891 = 0),
                                          !v891
                                       && (*(_QWORD *)v80 == 0x756D702E32787661
                                         ? (v892 = *((_DWORD *)v80 + 2) == 1902390892)
                                         : (v892 = 0),
                                           !v892)))
                                    {
                                      if (v81 == 18)
                                      {
                                        v6 = *((unsigned __int16 *)v80 + 8);
                                        if (*(_QWORD *)v80 != 0x702E323135787661
                                          || *((_QWORD *)v80 + 1) != 0x352E71642E6C756DLL
                                          || (_DWORD)v6 != 12849)
                                        {
LABEL_1608:
                                          if (!v331
                                            || (*(_QWORD *)v80 == 0x737476632E657373
                                              ? (v918 = *((unsigned int *)v80 + 2) == 1936929385)
                                              : (v918 = 0),
                                                !v918))
                                          {
                                            if (!(_DWORD)v344
                                              || (*(_QWORD *)v80 == 0x7476632E32657373
                                                ? (v919 = *(_QWORD *)(v80 + 5) == 0x6473326973747663)
                                                : (v919 = 0),
                                                  !v919))
                                            {
                                              if (!v332
                                                || (*(_QWORD *)v80 == 0x737476632E657373
                                                  ? (v920 = *(_QWORD *)(v80 + 6) == 0x7373323436697374)
                                                  : (v920 = 0),
                                                    !v920))
                                              {
                                                if (v81 != 15)
                                                {
                                                  if (!v503)
                                                  {
                                                    if ((_DWORD)v344)
                                                    {
                                                      if (*(_QWORD *)v80 == 0x7476632E32657373
                                                        && *(_QWORD *)(v80 + 5) == 0x6473327373747663)
                                                      {
                                                        v1016 = ((_QWORD *)v2106
                                                               - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                        LOWORD(v2115) = 257;
                                                        v1017 = (uint64_t *)sub_1C5344F14((uint64_t)&v2116, v1016, (const llvm::APInt *)&__src);
                                                        v1018 = *(uint64_t **)(*(_QWORD *)v2106 + 24);
                                                        LOWORD(v2115) = 257;
                                                        v924 = sub_1C47721A0((uint64_t)&v2116, v1017, v1018, (uint64_t)&__src);
                                                        goto LABEL_1630;
                                                      }
                                                      if (*(_QWORD *)v80 == 0x7476632E32657373
                                                        && *(_QWORD *)(v80 + 5) == 0x6470327164747663)
                                                      {
                                                        goto LABEL_2083;
                                                      }
                                                      if (*(_QWORD *)v80 == 0x7476632E32657373
                                                        && *(_QWORD *)(v80 + 5) == 0x7370327164747663)
                                                      {
                                                        goto LABEL_2083;
                                                      }
                                                    }
LABEL_1664:
                                                    if (v345)
                                                    {
                                                      v934 = *(_QWORD *)v80 == 0x647476632E787661
                                                          && *((_QWORD *)v80 + 1) == 0x35322E64702E3271;
                                                      if (v934 && v80[16] == 54)
                                                        goto LABEL_2083;
                                                      v936 = *(_QWORD *)v80 == 0x647476632E787661
                                                          && *((_QWORD *)v80 + 1) == 0x35322E73702E3271;
                                                      if (v936 && v80[16] == 54)
                                                        goto LABEL_2083;
                                                    }
                                                    if ((v5 & 1) == 0)
                                                    {
                                                      v938 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                          && *((_QWORD *)v80 + 1) == 0x647476632E6B7361;
                                                      if (v938 && *(_QWORD *)(v80 + 13) == 0x2E64703271647476)
                                                        goto LABEL_2083;
                                                    }
                                                    if (!v335)
                                                    {
                                                      v6 = 0x2E64703271647574;
                                                      v940 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                          && *((_QWORD *)v80 + 1) == 0x757476632E6B7361;
                                                      if (v940 && *(_QWORD *)(v80 + 14) == 0x2E64703271647574)
                                                        goto LABEL_2083;
                                                    }
                                                    if ((v5 & 1) == 0)
                                                    {
                                                      v942 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                          && *((_QWORD *)v80 + 1) == 0x647476632E6B7361;
                                                      if (v942 && *(_QWORD *)(v80 + 13) == 0x2E73703271647476)
                                                        goto LABEL_2083;
                                                    }
                                                    if (!v335)
                                                    {
                                                      v6 = 0x2E73703271647574;
                                                      v944 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                          && *((_QWORD *)v80 + 1) == 0x757476632E6B7361;
                                                      if (v944 && *(_QWORD *)(v80 + 14) == 0x2E73703271647574)
                                                        goto LABEL_2083;
                                                    }
                                                    if ((v5 & 1) == 0)
                                                    {
                                                      v946 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                          && *((_QWORD *)v80 + 1) == 0x717476632E6B7361;
                                                      if (v946 && *(_QWORD *)(v80 + 13) == 0x2E64703271717476)
                                                        goto LABEL_2083;
                                                    }
                                                    if (!v335)
                                                    {
                                                      v948 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                          && *((_QWORD *)v80 + 1) == 0x757476632E6B7361;
                                                      if (v948 && *(_QWORD *)(v80 + 14) == 0x2E64703271717574)
                                                        goto LABEL_2083;
                                                    }
                                                    if (v81 == 25)
                                                    {
                                                      if (*(_QWORD *)v80 == 0x6D2E323135787661
                                                        && *((_QWORD *)v80 + 1) == 0x757476632E6B7361
                                                        && *((_QWORD *)v80 + 2) == 0x35322E7370327171
                                                        && v80[24] == 54)
                                                      {
                                                        goto LABEL_2083;
                                                      }
                                                      v344 = *((_QWORD *)v80 + 1);
                                                      v1038 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                           && v344 == 0x757476632E6B7361;
                                                      v1039 = v1038 && *((_QWORD *)v80 + 2) == 0x31352E7370327171;
                                                      if (v1039 && v80[24] == 50)
                                                        goto LABEL_2083;
                                                    }
                                                    else
                                                    {
                                                      if (v81 == 24)
                                                      {
                                                        if (*(_QWORD *)v80 != 0x6D2E323135787661
                                                          || *((_QWORD *)v80 + 1) != 0x717476632E6B7361
                                                          || *((_QWORD *)v80 + 2) != 0x3635322E73703271)
                                                        {
                                                          v952 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                              && *((_QWORD *)v80 + 1) == 0x717476632E6B7361;
                                                          if (!v952 || *((_QWORD *)v80 + 2) != 0x3231352E73703271)
                                                          {
                                                            v954 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                                && *((_QWORD *)v80 + 1) == 0x707476632E6B7361;
                                                            if (!v954 || *((_QWORD *)v80 + 2) != 0x3832312E64703273)
                                                            {
                                                              v344 = *((_QWORD *)v80 + 1);
                                                              v956 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                                  && v344 == 0x707476632E6B7361;
                                                              if (!v956 || *((_QWORD *)v80 + 2) != 0x3635322E64703273)
                                                                goto LABEL_2035;
                                                            }
                                                          }
                                                        }
LABEL_2083:
                                                        v1134 = *(llvm::ConstantAggregateZero **)v2106;
                                                        v1135 = (uint64_t *)*((_QWORD *)v2106
                                                                           - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                        v1136 = *v1135;
                                                        if (*(_DWORD *)(*(_QWORD *)v2106 + 32) < *(_DWORD *)(*v1135 + 32))
                                                        {
                                                          *(_QWORD *)&v2132 = 0x100000000;
                                                          LOWORD(v2115) = 257;
                                                          v1135 = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, (uint64_t)v1135, (uint64_t)v1135, &v2132, 2, (uint64_t)&__src);
                                                        }
                                                        v1137 = *(unsigned __int8 *)(*(_QWORD *)(v1136 + 24) + 8);
                                                        v1138 = llvm::StringRef::find((uint64_t *)&v2103, "cvtu", 4uLL, 0);
                                                        if (v1137 != 2)
                                                        {
                                                          v1141 = *((unsigned __int8 *)v2106 + 16);
                                                          if (v1141 == 84)
                                                          {
                                                            v1142 = 0;
                                                          }
                                                          else if (v1141 == 39)
                                                          {
                                                            v1142 = (*((_DWORD *)v2106 + 20) + 1);
                                                          }
                                                          else
                                                          {
                                                            v1142 = 2;
                                                          }
                                                          v1143 = 0;
                                                          v1144 = *((_DWORD *)v2106 + 5);
                                                          v1145 = -(uint64_t)(v1144 & 0x7FFFFFF);
                                                          if (v1144 < 0)
                                                          {
                                                            v2076 = (char *)v2106 - 32 * (v1144 & 0x7FFFFFF);
                                                            v2077 = *((_QWORD *)v2076 - 1);
                                                            if ((v2077 & 0xFFFFFFFF0) != 0)
                                                              v1143 = *((_DWORD *)v2076 - 3) - *(_DWORD *)&v2076[-v2077];
                                                            else
                                                              v1143 = 0;
                                                          }
                                                          v1146 = (char *)v2106
                                                                + 32 * -v1143
                                                                + -32 * v1142;
                                                          v1147 = (char *)v2106 + 32 * v1145;
                                                          if (((v1146 - v1147 - 32) & 0x1FFFFFFFE0) != 0x80)
                                                            goto LABEL_2096;
                                                          v1148 = *((_QWORD *)v1147 + 12);
                                                          if (*(_BYTE *)(v1148 + 16) != 16)
                                                            goto LABEL_2098;
                                                          v1149 = (_QWORD *)(v1148 + 24);
                                                          if (*(_DWORD *)(v1148 + 32) >= 0x41u)
                                                            v1149 = (_QWORD *)*v1149;
                                                          if (*v1149 == 4)
                                                          {
LABEL_2096:
                                                            __src = "cvt";
                                                            LOWORD(v2115) = 259;
                                                            if (v1138 == -1)
                                                              v1140 = (uint64_t *)sub_1C4773B3C((uint64_t)&v2116, v1135, (uint64_t *)v1134, (uint64_t)&__src);
                                                            else
                                                              v1140 = (uint64_t *)sub_1C5345CE4((uint64_t)&v2116, v1135, (uint64_t *)v1134, (uint64_t)&__src);
                                                          }
                                                          else
                                                          {
LABEL_2098:
                                                            if (v1138 == -1)
                                                              v1150 = 11794;
                                                            else
                                                              v1150 = 11799;
                                                            v1151 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5)
                                                                                            + 56)
                                                                                + 40);
                                                            __src = v1134;
                                                            v2112 = v1136;
                                                            Declaration = llvm::Intrinsic::getDeclaration(v1151, v1150, (uint64_t *)&__src, 2);
                                                            if (Declaration)
                                                              v1153 = *(uint64_t ***)(Declaration + 24);
                                                            else
                                                              v1153 = 0;
                                                            *(_QWORD *)&v2132 = v1135;
                                                            *((_QWORD *)&v2132 + 1) = ((_QWORD *)v2106
                                                                                     - 4
                                                                                     * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[12];
                                                            LOWORD(v2115) = 257;
                                                            v1140 = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1153, Declaration, (uint64_t *)&v2132, 2, (uint64_t)&__src, 0);
                                                          }
                                                          goto LABEL_2106;
                                                        }
                                                        __src = "cvtps2pd";
                                                        LOWORD(v2115) = 259;
                                                        v1139 = v1135;
LABEL_2087:
                                                        v1140 = (uint64_t *)sub_1C47721A0((uint64_t)&v2116, v1139, (uint64_t *)v1134, (uint64_t)&__src);
LABEL_2106:
                                                        Select = v1140;
                                                        v1154 = *((unsigned __int8 *)v2106 + 16);
                                                        if (v1154 == 84)
                                                        {
                                                          v1155 = 0;
                                                        }
                                                        else if (v1154 == 39)
                                                        {
                                                          v1155 = (*((_DWORD *)v2106 + 20) + 1);
                                                        }
                                                        else
                                                        {
                                                          v1155 = 2;
                                                        }
                                                        v1156 = 0;
                                                        v1157 = *((_DWORD *)v2106 + 5);
                                                        v1158 = -(uint64_t)(v1157 & 0x7FFFFFF);
                                                        if (v1157 < 0)
                                                        {
                                                          v2067 = (char *)v2106 - 32 * (v1157 & 0x7FFFFFF);
                                                          v2068 = *((_QWORD *)v2067 - 1);
                                                          if ((v2068 & 0xFFFFFFFF0) != 0)
                                                            v1156 = *((_DWORD *)v2067 - 3) - *(_DWORD *)&v2067[-v2068];
                                                          else
                                                            v1156 = 0;
                                                        }
                                                        if (((-32 * v1155
                                                                           + 32 * (unint64_t)-v1156
                                                                           - 32 * v1158
                                                                           - 32) >> 5) < 3)
                                                          goto LABEL_2999;
                                                        MaskedLoad = (uint64_t)sub_1C53451A0((uint64_t *)&v2116, *((unsigned __int8 **)v2106+ 4 * v1158+ 8), v1140, *((_QWORD *)v2106 + 4 * v1158 + 4));
                                                        goto LABEL_1633;
                                                      }
                                                      if ((_DWORD)v344)
                                                      {
                                                        v344 = 0x7476632E32657373;
                                                        if (*(_QWORD *)v80 == 0x7476632E32657373
                                                          && *(_QWORD *)(v80 + 5) == 0x6470327370747663)
                                                        {
                                                          goto LABEL_2083;
                                                        }
                                                      }
                                                      else if (v81 == 18)
                                                      {
                                                        v344 = *((unsigned __int16 *)v80 + 8);
                                                        v1121 = *(_QWORD *)v80 == 0x2E7476632E787661
                                                             && *((_QWORD *)v80 + 1) == 0x322E64702E327370;
                                                        if (v1121 && (_DWORD)v344 == 13877)
                                                          goto LABEL_2083;
                                                      }
                                                    }
LABEL_2035:
                                                    if (v335
                                                      || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                        ? (v1123 = *((_QWORD *)v80 + 1) == 0x747663762E6B7361)
                                                        : (v1123 = 0),
                                                          v1123
                                                        ? (v1124 = *(_QWORD *)(v80 + 14) == 0x2E73703268707476)
                                                        : (v1124 = 0),
                                                          !v1124))
                                                    {
                                                      if ((v338 & 1) != 0)
                                                        goto LABEL_2072;
                                                      if (*(_QWORD *)v80 != 0x7032687074766376
                                                        || *((_WORD *)v80 + 4) != 11891)
                                                      {
                                                        if ((v583 & 1) != 0)
                                                          goto LABEL_2072;
                                                        if (*(_QWORD *)v80 != 0x6D2E323135787661
                                                          || *((_QWORD *)v80 + 1) != 0x64616F6C2E6B7361)
                                                        {
                                                          if (v81 >= 0x18)
                                                          {
                                                            if (*(_QWORD *)v80 == 0x6D2E323135787661
                                                              && *((_QWORD *)v80 + 1) == 0x617078652E6B7361
                                                              && *((_QWORD *)v80 + 2) == 0x2E64616F6C2E646ELL)
                                                            {
                                                              v1384 = *(unsigned int **)v2106;
                                                              v1385 = (unsigned __int8 *)*((_QWORD *)v2106
                                                                                         - 4
                                                                                         * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                              v1386 = llvm::PointerType::get(*(llvm::PointerType **)(*(_QWORD *)v2106 + 24), 0);
                                                              LOWORD(v2115) = 257;
                                                              v1387 = sub_1C4773E38((uint64_t *)&v2116, 49, v1385, v1386, (uint64_t)&__src);
                                                              v1388 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106- 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8], v1384[8]);
                                                              v1389 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                              __src = v1384;
                                                              v1390 = llvm::Intrinsic::getDeclaration(v1389, 183, (uint64_t *)&__src, 1);
                                                              v1211 = v1390;
                                                              if (v1390)
                                                                v1212 = *(uint64_t ***)(v1390 + 24);
                                                              else
                                                                v1212 = 0;
                                                              *(_QWORD *)&v2132 = v1387;
                                                              *((_QWORD *)&v2132 + 1) = v1388;
                                                              *(_QWORD *)&v2133 = ((_QWORD *)v2106
                                                                                 - 4
                                                                                 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                            }
                                                            else
                                                            {
                                                              if (v81 < 0x1B)
                                                                goto LABEL_2072;
                                                              v344 = *(_QWORD *)(v80 + 19);
                                                              v1129 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                                   && *((_QWORD *)v80 + 1) == 0x706D6F632E6B7361;
                                                              v1130 = v1129
                                                                   && *((_QWORD *)v80 + 2) == 0x6F74732E73736572;
                                                              if (!v1130 || v344 != 0x2E65726F74732E73)
                                                                goto LABEL_2072;
                                                              v1513 = (char *)v2106
                                                                    - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                              v1514 = (unsigned int **)*((_QWORD *)v1513 + 4);
                                                              v1515 = *v1514;
                                                              v1516 = *(unsigned __int8 **)v1513;
                                                              v1517 = llvm::PointerType::get(*((llvm::PointerType **)*v1514 + 3), 0);
                                                              LOWORD(v2115) = 257;
                                                              v1518 = sub_1C4773E38((uint64_t *)&v2116, 49, v1516, v1517, (uint64_t)&__src);
                                                              v1519 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106- 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8], v1515[8]);
                                                              v1520 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                              __src = v1515;
                                                              v1521 = llvm::Intrinsic::getDeclaration(v1520, 182, (uint64_t *)&__src, 1);
                                                              v1211 = v1521;
                                                              if (v1521)
                                                                v1212 = *(uint64_t ***)(v1521 + 24);
                                                              else
                                                                v1212 = 0;
                                                              *(_QWORD *)&v2132 = ((_QWORD *)v2106
                                                                                 - 4
                                                                                 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                              *((_QWORD *)&v2132 + 1) = v1518;
                                                              *(_QWORD *)&v2133 = v1519;
                                                            }
                                                            LOWORD(v2115) = 257;
                                                            goto LABEL_2338;
                                                          }
LABEL_2072:
                                                          if ((v5 & 1) != 0
                                                            || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                              ? (v1132 = *((_QWORD *)v80 + 1) == 0x706D6F632E6B7361)
                                                              : (v1132 = 0),
                                                                v1132
                                                              ? (v1133 = *(_QWORD *)(v80 + 13) == 0x2E73736572706D6FLL)
                                                              : (v1133 = 0),
                                                                !v1133))
                                                          {
                                                            if (v81 < 0x13)
                                                            {
                                                              if ((v348 & 1) != 0)
                                                              {
LABEL_2158:
                                                                if ((v334 & 1) != 0
                                                                  || (*(_QWORD *)v2103 == 0x702E323135787661
                                                                    ? (v1178 = *(_QWORD *)(v2103 + 3) == 0x6C6F72702E323135)
                                                                    : (v1178 = 0),
                                                                      !v1178))
                                                                {
                                                                  if ((v583 & 1) != 0
                                                                    || (*(_QWORD *)v2103 == 0x6D2E323135787661
                                                                      ? (v1179 = *((_QWORD *)v2103 + 1) == 0x6C6F72702E6B7361)
                                                                      : (v1179 = 0),
                                                                        !v1179))
                                                                  {
                                                                    if ((v334 & 1) != 0
                                                                      || (*(_QWORD *)v2103 == 0x702E323135787661
                                                                        ? (v1180 = *(_QWORD *)(v2103 + 3) == 0x726F72702E323135)
                                                                        : (v1180 = 0),
                                                                          !v1180))
                                                                    {
                                                                      if ((v583 & 1) != 0
                                                                        || (*(_QWORD *)v2103 == 0x6D2E323135787661
                                                                          ? (v1181 = *((_QWORD *)v2103 + 1) == 0x726F72702E6B7361)
                                                                          : (v1181 = 0),
                                                                            !v1181))
                                                                      {
                                                                        if ((v337 & 1) == 0)
                                                                        {
                                                                          v1182 = v2103;
                                                                          if (*(_QWORD *)v2103 == 0x762E323135787661
                                                                            && *(_QWORD *)(v2103 + 6) == 0x2E646C687370762ELL)
                                                                          {
                                                                            goto LABEL_2434;
                                                                          }
                                                                        }
                                                                        if (!v336
                                                                          && ((v1182 = v2103,
                                                                               *(_QWORD *)v2103 == 0x6D2E323135787661)
                                                                            ? (v1184 = *((_QWORD *)v2103 + 1) == 0x687370762E6B7361)
                                                                            : (v1184 = 0),
                                                                              v1184
                                                                            ? (v1185 = *((unsigned __int16 *)v2103 + 8) == 25708)
                                                                            : (v1185 = 0),
                                                                              v1185)
                                                                          || v81 >= 0x13
                                                                          && ((v1182 = v2103,
                                                                               *(_QWORD *)v2103 == 0x6D2E323135787661)
                                                                            ? (v1186 = *((_QWORD *)v2103 + 1) == 0x7370762E7A6B7361)
                                                                            : (v1186 = 0),
                                                                              v1186
                                                                            ? (v1187 = *(_QWORD *)(v2103 + 11) == 0x646C687370762E7ALL)
                                                                            : (v1187 = 0),
                                                                              v1187))
                                                                        {
LABEL_2434:
                                                                          v1320 = v1182[11] == 122;
                                                                          v1321 = v2106;
                                                                          v1322 = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                          if ((v337 & 1) != 0
                                                                            || ((v1188 = v2103,
                                                                                 *(_QWORD *)v2103 == 0x762E323135787661)
                                                                              ? (v1189 = *(_QWORD *)(v2103 + 6) == 0x2E6472687370762ELL)
                                                                              : (v1189 = 0),
                                                                                !v1189))
                                                                          {
                                                                            if (v336
                                                                              || ((v1188 = v2103,
                                                                                   *(_QWORD *)v2103 == 0x6D2E323135787661)
                                                                                ? (v1190 = *((_QWORD *)v2103 + 1) == 0x687370762E6B7361)
                                                                                : (v1190 = 0),
                                                                                  v1190
                                                                                ? (v1191 = *((unsigned __int16 *)v2103
                                                                                           + 8) == 25714)
                                                                                : (v1191 = 0),
                                                                                  !v1191))
                                                                            {
                                                                              if (v81 < 0x13
                                                                                || ((v1188 = v2103,
                                                                                     *(_QWORD *)v2103 == 0x6D2E323135787661)
                                                                                  ? (v1192 = *((_QWORD *)v2103 + 1) == 0x7370762E7A6B7361)
                                                                                  : (v1192 = 0),
                                                                                    v1192
                                                                                  ? (v1193 = *(_QWORD *)(v2103 + 11) == 0x6472687370762E7ALL)
                                                                                  : (v1193 = 0),
                                                                                    !v1193))
                                                                              {
                                                                                if (!v503
                                                                                  || (*(_QWORD *)v80 == 0x72632E3234657373
                                                                                    ? (v1194 = *((_QWORD *)v80 + 1) == 0x382E34362E323363)
                                                                                    : (v1194 = 0),
                                                                                      !v1194))
                                                                                {
                                                                                  if ((v583 & 1) != 0
                                                                                    || (*(_QWORD *)v2103 == 0x6F7262762E787661
                                                                                      ? (v1195 = *((_QWORD *)v2103 + 1) == 0x732E747361636461)
                                                                                      : (v1195 = 0),
                                                                                        !v1195
                                                                                     && (v81 < 0x13
                                                                                      || (*(_QWORD *)v2103 == 0x762E323135787661
                                                                                        ? (v1196 = *((_QWORD *)v2103 + 1) == 0x73616364616F7262)
                                                                                        : (v1196 = 0),
                                                                                          v1196
                                                                                        ? (v1197 = *(_QWORD *)(v2103 + 11) == 0x732E747361636461)
                                                                                        : (v1197 = 0),
                                                                                          !v1197))))
                                                                                  {
                                                                                    if ((v504 & 1) == 0)
                                                                                    {
                                                                                      if (*(_QWORD *)v2103 == 0x6D702E3134657373
                                                                                        && *((_DWORD *)v2103 + 2) == 2020832879)
                                                                                      {
                                                                                        goto LABEL_2673;
                                                                                      }
                                                                                      if (*(_QWORD *)v2103 == 0x6D702E3134657373
                                                                                        && *((_DWORD *)v2103 + 2) == 2021291631)
                                                                                      {
                                                                                        goto LABEL_2673;
                                                                                      }
                                                                                    }
                                                                                    if ((v334 & 1) == 0
                                                                                      && (*(_QWORD *)v2103 == 0x6F6D702E32787661
                                                                                        ? (v1200 = *(_QWORD *)(v2103 + 3) == 0x7873766F6D702E32)
                                                                                        : (v1200 = 0),
                                                                                          v1200
                                                                                       || (*(_QWORD *)v2103 == 0x6F6D702E32787661
                                                                                         ? (v1201 = *(_QWORD *)(v2103 + 3) == 0x787A766F6D702E32)
                                                                                         : (v1201 = 0),
                                                                                           v1201))
                                                                                      || !v336
                                                                                      && (*(_QWORD *)v2103 == 0x6D2E323135787661
                                                                                        ? (v1202 = *((_QWORD *)v2103 + 1) == 0x766F6D702E6B7361)
                                                                                        : (v1202 = 0),
                                                                                          v1202
                                                                                        ? (v1203 = *((unsigned __int16 *)v2103 + 8) == 30835)
                                                                                        : (v1203 = 0),
                                                                                          v1203
                                                                                       || (*(_QWORD *)v2103 == 0x6D2E323135787661
                                                                                         ? (v1204 = *((_QWORD *)v2103 + 1) == 0x766F6D702E6B7361)
                                                                                         : (v1204 = 0),
                                                                                           v1204
                                                                                         ? (v1205 = *((unsigned __int16 *)v2103 + 8) == 30842)
                                                                                         : (v1205 = 0),
                                                                                           v1205)))
                                                                                    {
LABEL_2673:
                                                                                      v1425 = *(_QWORD *)v2106;
                                                                                      v1426 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                      __src = &v2113;
                                                                                      v2112 = 0x800000000;
                                                                                      sub_1C4893E04((char *)&__src, v1426, 0);
                                                                                      v1428 = __src;
                                                                                      if ((_DWORD)v1426)
                                                                                      {
                                                                                        for (i = 0; i != v1426; ++i)
                                                                                          v1428[i] = i;
                                                                                      }
                                                                                      v1430 = (llvm::PoisonValue **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                      v1431 = v2112;
                                                                                      v2134 = 257;
                                                                                      v1432 = llvm::PoisonValue::get(*v1430, v1427);
                                                                                      v1433 = (unsigned __int8 *)sub_1C486AD20((uint64_t)&v2116, (uint64_t)v1430, (uint64_t)v1432, v1428, v1431, (uint64_t)&v2132);
                                                                                      if (llvm::StringRef::find((uint64_t *)&v2103, "pmovsx", 6uLL, 0) == -1)
                                                                                      {
                                                                                        v2134 = 257;
                                                                                        v1434 = 39;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v2134 = 257;
                                                                                        v1434 = 40;
                                                                                      }
                                                                                      Select = (uint64_t *)sub_1C4773E38((uint64_t *)&v2116, v1434, v1433, v1425, (uint64_t)&v2132);
                                                                                      v1531 = *((unsigned __int8 *)v2106
                                                                                              + 16);
                                                                                      if (v1531 == 84)
                                                                                      {
                                                                                        v1532 = 0;
                                                                                      }
                                                                                      else if (v1531 == 39)
                                                                                      {
                                                                                        v1532 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1532 = 2;
                                                                                      }
                                                                                      v1533 = 0;
                                                                                      v1534 = *((_DWORD *)v2106 + 5);
                                                                                      v1535 = -(uint64_t)(v1534 & 0x7FFFFFF);
                                                                                      if (v1534 < 0)
                                                                                      {
                                                                                        v2089 = (char *)v2106
                                                                                              - 32 * (v1534 & 0x7FFFFFF);
                                                                                        v2090 = *((_QWORD *)v2089 - 1);
                                                                                        if ((v2090 & 0xFFFFFFFF0) != 0)
                                                                                          v1533 = *((_DWORD *)v2089 - 3)
                                                                                                - *(_DWORD *)&v2089[-v2090];
                                                                                        else
                                                                                          v1533 = 0;
                                                                                      }
                                                                                      if (((-32 * v1532
                                                                                           + 32 * -v1533
                                                                                           - 32 * v1535
                                                                                           - 32) & 0x1FFFFFFFE0) == 0x60)
                                                                                        Select = (uint64_t *)sub_1C53451A0((uint64_t *)&v2116, *((unsigned __int8 **)v2106 + 4 * v1535 + 8), Select, *((_QWORD *)v2106 + 4 * v1535 + 4));
                                                                                      if (__src != &v2113)
                                                                                        free(__src);
                                                                                      goto LABEL_2999;
                                                                                    }
                                                                                    v80 = (char *)v2103;
                                                                                    v155 = v2104;
                                                                                    if (v2104 != 23)
                                                                                    {
                                                                                      if (v2104 < 0x12)
                                                                                      {
                                                                                        v164 = 1;
                                                                                        if (v2104 < 0xF)
                                                                                        {
                                                                                          v167 = 1;
                                                                                          v781 = 1;
                                                                                          v780 = 1;
                                                                                          v773 = 1;
                                                                                          if (v2104 < 0xB)
                                                                                            goto LABEL_1817;
                                                                                          goto LABEL_1256;
                                                                                        }
LABEL_210:
                                                                                        if (*(_QWORD *)v80 == 0x7262702E32787661
                                                                                          && *(_QWORD *)(v80 + 7) == 0x7473616364616F72)
                                                                                        {
                                                                                          goto LABEL_1352;
                                                                                        }
                                                                                        if (*(_QWORD *)v80 == 0x7262762E32787661
                                                                                          && *(_QWORD *)(v80 + 7) == 0x7473616364616F72)
                                                                                        {
                                                                                          goto LABEL_1352;
                                                                                        }
                                                                                        if (v155 < 0x11)
                                                                                        {
                                                                                          v167 = 1;
                                                                                          goto LABEL_1256;
                                                                                        }
                                                                                        v767 = *(_QWORD *)v80 == 0x702E323135787661
                                                                                            && *((_QWORD *)v80 + 1) == 0x73616364616F7262;
                                                                                        v768 = v767 && v80[16] == 116;
                                                                                        if (v768
                                                                                          || v155 >= 0x17
                                                                                          && (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                            ? (v769 = *((_QWORD *)v80 + 1) == 0x616F72622E6B7361)
                                                                                            : (v769 = 0),
                                                                                              v769
                                                                                            ? (v770 = *(_QWORD *)(v80 + 15) == 0x732E747361636461)
                                                                                            : (v770 = 0),
                                                                                              v770))
                                                                                        {
LABEL_1352:
                                                                                          v796 = (llvm::PoisonValue **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                          v797 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                          v798 = (uint64_t **)(*v4 + 1960);
                                                                                          if (*(_BYTE *)(*(_QWORD *)v2106 + 8) == 19)
                                                                                            llvm::ScalableVectorType::get(v798, v797);
                                                                                          else
                                                                                            llvm::FixedVectorType::get((llvm::FixedVectorType *)v798, v797);
                                                                                          __src = &v2113;
                                                                                          v2112 = 0x800000000;
                                                                                          NullValue = llvm::Constant::getNullValue(v799, v800);
                                                                                          llvm::ShuffleVectorInst::getShuffleMask((llvm::ConstantDataSequential *)NullValue, (uint64_t)&__src);
                                                                                          v802 = __src;
                                                                                          v803 = v2112;
                                                                                          v2134 = 257;
                                                                                          v805 = llvm::PoisonValue::get(*v796, v804);
                                                                                          Select = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, (uint64_t)v796, (uint64_t)v805, v802, v803, (uint64_t)&v2132);
                                                                                          v806 = *((unsigned __int8 *)v2106
                                                                                                 + 16);
                                                                                          if (v806 == 84)
                                                                                          {
                                                                                            v807 = 0;
                                                                                          }
                                                                                          else if (v806 == 39)
                                                                                          {
                                                                                            v807 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v807 = 2;
                                                                                          }
                                                                                          v808 = 0;
                                                                                          v809 = *((_DWORD *)v2106 + 5);
                                                                                          v810 = -(uint64_t)(v809 & 0x7FFFFFF);
                                                                                          if (v809 < 0)
                                                                                          {
                                                                                            v2005 = (char *)v2106 - 32 * (v809 & 0x7FFFFFF);
                                                                                            v2006 = *((_QWORD *)v2005 - 1);
                                                                                            if ((v2006 & 0xFFFFFFFF0) != 0)
                                                                                              v808 = *((_DWORD *)v2005 - 3) - *(_DWORD *)&v2005[-v2006];
                                                                                            else
                                                                                              v808 = 0;
                                                                                          }
                                                                                          v811 = (char *)v2106
                                                                                               + 32 * v810;
                                                                                          if (((-32 * v807
                                                                                               + 32
                                                                                               * -v808
                                                                                               - 32 * v810
                                                                                               - 32) & 0x1FFFFFFFE0) == 0x60)
                                                                                          {
                                                                                            v812 = (unsigned __int8 *)*((_QWORD *)v811 + 8);
                                                                                            v813 = *((_QWORD *)v811 + 4);
LABEL_1359:
                                                                                            v814 = Select;
LABEL_1360:
                                                                                            v815 = (uint64_t)sub_1C53451A0((uint64_t *)&v2116, v812, v814, v813);
LABEL_1361:
                                                                                            Select = (uint64_t *)v815;
                                                                                          }
LABEL_1362:
                                                                                          v816 = __src;
                                                                                          if (__src == &v2113)
                                                                                            goto LABEL_2999;
                                                                                          goto LABEL_1482;
                                                                                        }
                                                                                        v167 = 0;
LABEL_1256:
                                                                                        v771 = *(_QWORD *)v80 == 0x6461702E32657373
                                                                                            && *(_QWORD *)(v80 + 3) == 0x2E73646461702E32;
                                                                                        if (v771
                                                                                          || (*(_QWORD *)v80 == 0x6461702E32787661
                                                                                            ? (v772 = *(_QWORD *)(v80 + 3) == 0x2E73646461702E32)
                                                                                            : (v772 = 0),
                                                                                              v772
                                                                                           || (v773 = v155 < 0xD,
                                                                                               v155 >= 0xD)
                                                                                           && (*(_QWORD *)v80 == 0x702E323135787661
                                                                                             ? (v774 = *(_QWORD *)(v80 + 5) == 0x2E73646461702E32)
                                                                                             : (v774 = 0),
                                                                                               v774
                                                                                            || (v164 & 1) == 0
                                                                                            && (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                              ? (v775 = *((_QWORD *)v80 + 1) == 0x646461702E6B7361)
                                                                                              : (v775 = 0),
                                                                                                v775
                                                                                              ? (v776 = *((unsigned __int16 *)v80 + 8) == 11891)
                                                                                              : (v776 = 0),
                                                                                                v776))))
                                                                                        {
                                                                                          v753 = v2106;
                                                                                          v754 = 262;
                                                                                          goto LABEL_1586;
                                                                                        }
                                                                                        if ((*(_QWORD *)v80 != 0x7573702E32657373
                                                                                           || *(_QWORD *)(v80 + 3) != 0x2E73627573702E32)
                                                                                          && (*(_QWORD *)v80 != 0x7573702E32787661
                                                                                           || *(_QWORD *)(v80 + 3) != 0x2E73627573702E32))
                                                                                        {
                                                                                          if (v155 < 0xD
                                                                                            || (*(_QWORD *)v80 == 0x702E323135787661
                                                                                              ? (v779 = *(_QWORD *)(v80 + 5) == 0x2E73627573702E32)
                                                                                              : (v779 = 0),
                                                                                                !v779))
                                                                                          {
                                                                                            if ((v164 & 1) != 0)
                                                                                            {
                                                                                              if (v155 < 0xC)
                                                                                              {
                                                                                                v780 = 0;
                                                                                                v781 = 1;
                                                                                                v155 = 11;
                                                                                                v164 = 1;
                                                                                                goto LABEL_1293;
                                                                                              }
LABEL_1542:
                                                                                              v902 = *(_QWORD *)v80 == 0x6461702E32657373 && *((_DWORD *)v80 + 2) == 779318628;
                                                                                              if (v902
                                                                                                || (*(_QWORD *)v80 == 0x6461702E32787661 ? (v903 = *((unsigned int *)v80 + 2) == 779318628) : (v903 = 0),
                                                                                                    v903 || v155 >= 0x13 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v904 = *((_QWORD *)v80 + 1) == 0x646461702E6B7361) : (v904 = 0), v904 ? (v905 = *(_QWORD *)(v80 + 11) == 0x2E7375646461702ELL) : (v905 = 0), v905)))
                                                                                              {
                                                                                                v753 = v2106;
                                                                                                v754 = 300;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if ((*(_QWORD *)v80 != 0x7573702E32657373 || *((_DWORD *)v80 + 2) != 779318626) && (*(_QWORD *)v80 != 0x7573702E32787661 || *((_DWORD *)v80 + 2) != 779318626))
                                                                                                {
                                                                                                  if (v155 < 0x13)
                                                                                                  {
                                                                                                    if (v155 == 12)
                                                                                                    {
                                                                                                      if ((*(_QWORD *)v80 != 0x6C73702E32657373 || *((_DWORD *)v80 + 2) != 1902390892) && (*(_QWORD *)v80 != 0x6C73702E32787661 || *((_DWORD *)v80 + 2) != 1902390892))
                                                                                                      {
                                                                                                        if ((*(_QWORD *)v80 != 0x7273702E32657373 || *((_DWORD *)v80 + 2) != 1902390892) && (*(_QWORD *)v80 != 0x7273702E32787661 || *((_DWORD *)v80 + 2) != 1902390892))
                                                                                                        {
                                                                                                          v773 = 1;
                                                                                                          v155 = 12;
                                                                                                          v781 = 1;
                                                                                                          v780 = 1;
LABEL_1953:
                                                                                                          if (*(_QWORD *)v80 == 0x6C622E3134657373 && *((_DWORD *)v80 + 2) == 1885630053)
                                                                                                            goto LABEL_1958;
LABEL_1293:
                                                                                                          if (*(_QWORD *)v80 == 0x6E656C622E787661 && *(_QWORD *)(v80 + 3) == 0x702E646E656C622ELL)
                                                                                                            goto LABEL_1958;
                                                                                                          if (v780)
                                                                                                          {
                                                                                                            if (*(_QWORD *)v80 == 0x6C62702E32787661 && *((_DWORD *)v80 + 2) == 2003070565)
                                                                                                              goto LABEL_1958;
                                                                                                          }
                                                                                                          goto LABEL_1302;
                                                                                                        }
                                                                                                        v1166 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                        v1167 = *((_QWORD *)v1166 + 4);
                                                                                                        v1168 = (_QWORD *)(v1167 + 24);
                                                                                                        if (*(_DWORD *)(v1167 + 32) >= 0x41u)
                                                                                                          v1168 = (_QWORD *)*v1168;
                                                                                                        v1058 = *(unsigned __int8 **)v1166;
                                                                                                        v1057 = *(_DWORD *)v1168 >> 3;
LABEL_2126:
                                                                                                        VectorSplat = (uint64_t)sub_1C53464E0((uint64_t)&v2116, v1058, v1057);
                                                                                                        goto LABEL_2998;
                                                                                                      }
                                                                                                      v1011 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                      v1012 = *((_QWORD *)v1011 + 4);
                                                                                                      v1013 = (_QWORD *)(v1012 + 24);
                                                                                                      if (*(_DWORD *)(v1012 + 32) >= 0x41u)
                                                                                                        v1013 = (_QWORD *)*v1013;
                                                                                                      v1014 = *(unsigned __int8 **)v1011;
                                                                                                      v1015 = *(_DWORD *)v1013 >> 3;
LABEL_1972:
                                                                                                      VectorSplat = (uint64_t)sub_1C5346348((uint64_t)&v2116, v1014, v1015);
                                                                                                      goto LABEL_2998;
                                                                                                    }
                                                                                                    v780 = 0;
                                                                                                    v781 = 1;
LABEL_1817:
                                                                                                    switch(v155)
                                                                                                    {
                                                                                                      case 0xDuLL:
                                                                                                        if (*(_QWORD *)v80 == 0x62702E3134657373 && *(_QWORD *)(v80 + 5) == 0x77646E656C62702ELL)
                                                                                                          goto LABEL_1958;
                                                                                                        break;
                                                                                                      case 0x12uLL:
                                                                                                        if (*(_QWORD *)v80 == 0x702E323135787661 && *((_QWORD *)v80 + 1) == 0x352E71642E6C6C73 && *((_WORD *)v80 + 8) == 12849)
                                                                                                          goto LABEL_1969;
                                                                                                        if (*(_QWORD *)v80 == 0x702E323135787661 && *((_QWORD *)v80 + 1) == 0x352E71642E6C7273 && *((_WORD *)v80 + 8) == 12849)
                                                                                                          goto LABEL_1945;
                                                                                                        break;
                                                                                                      case 0xFuLL:
                                                                                                        if ((*(_QWORD *)v80 != 0x6C73702E32657373 || *(_QWORD *)(v80 + 7) != 0x73622E71642E6C6CLL) && (*(_QWORD *)v80 != 0x6C73702E32787661 || *(_QWORD *)(v80 + 7) != 0x73622E71642E6C6CLL))
                                                                                                        {
                                                                                                          if ((*(_QWORD *)v80 != 0x7273702E32657373 || *(_QWORD *)(v80 + 7) != 0x73622E71642E6C72) && (*(_QWORD *)v80 != 0x7273702E32787661 || *(_QWORD *)(v80 + 7) != 0x73622E71642E6C72))
                                                                                                            break;
LABEL_1945:
                                                                                                          v1054 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                          v1055 = *((_QWORD *)v1054 + 4);
                                                                                                          v1056 = (_QWORD *)(v1055 + 24);
                                                                                                          if (*(_DWORD *)(v1055 + 32) >= 0x41u)
                                                                                                            v1056 = (_QWORD *)*v1056;
                                                                                                          v1057 = *(_DWORD *)v1056;
                                                                                                          v1058 = *(unsigned __int8 **)v1054;
                                                                                                          goto LABEL_2126;
                                                                                                        }
LABEL_1969:
                                                                                                        v1077 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                        v1078 = *((_QWORD *)v1077 + 4);
                                                                                                        v1079 = (_QWORD *)(v1078 + 24);
                                                                                                        if (*(_DWORD *)(v1078 + 32) >= 0x41u)
                                                                                                          v1079 = (_QWORD *)*v1079;
                                                                                                        v1015 = *(_DWORD *)v1079;
                                                                                                        v1014 = *(unsigned __int8 **)v1077;
                                                                                                        goto LABEL_1972;
                                                                                                      default:
                                                                                                        break;
                                                                                                    }
                                                                                                    if (v780)
                                                                                                    {
LABEL_1302:
                                                                                                      if (v773 || (*(_QWORD *)v80 == 0x6C62702E32787661 ? (v784 = *(_QWORD *)(v80 + 5) == 0x2E64646E656C6270) : (v784 = 0), !v784))
                                                                                                      {
                                                                                                        if (v155 >= 0x10 && (*(_QWORD *)v80 == 0x736E69762E787661 ? (v785 = *((_QWORD *)v80 + 1) == 0x2E38323166747265) : (v785 = 0), v785) || v155 == 16 && (*(_QWORD *)v80 == 0x6E69762E32787661 ? (v786 = *((_QWORD *)v80 + 1) == 0x3832316974726573) : (v786 = 0), v786) || (v164 & 1) == 0 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v787 = *((_QWORD *)v80 + 1) == 0x65736E692E6B7361) : (v787 = 0), v787 ? (v788 = *((unsigned __int16 *)v80 + 8) == 29810) : (v788 = 0), v788))
                                                                                                        {
                                                                                                          v958 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                          v959 = (llvm::PoisonValue **)v958[4];
                                                                                                          v960 = v958[8];
                                                                                                          v961 = (_QWORD *)(v960 + 24);
                                                                                                          if (*(_DWORD *)(v960 + 32) >= 0x41u)
                                                                                                            v961 = (_QWORD *)*v961;
                                                                                                          v962 = *v958;
                                                                                                          v963 = *(_DWORD *)v961;
                                                                                                          v964 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                          v965 = *((unsigned int *)*v959 + 8);
                                                                                                          __src = &v2113;
                                                                                                          v2112 = 0x800000000;
                                                                                                          sub_1C4893E04((char *)&__src, v964, 0);
                                                                                                          v967 = __src;
                                                                                                          if ((_DWORD)v965)
                                                                                                          {
                                                                                                            for (j = 0;
                                                                                                                  j != v965;
                                                                                                                  ++j)
                                                                                                            {
                                                                                                              v967[j] = j;
                                                                                                            }
                                                                                                          }
                                                                                                          if ((_DWORD)v965 != (_DWORD)v964)
                                                                                                          {
                                                                                                            v969 = v965;
                                                                                                            do
                                                                                                              v967[v969++] = v965;
                                                                                                            while ((_DWORD)v964 != v969);
                                                                                                          }
                                                                                                          v970 = v2112;
                                                                                                          v2134 = 257;
                                                                                                          v971 = llvm::PoisonValue::get(*v959, v966);
                                                                                                          v972 = sub_1C486AD20((uint64_t)&v2116, (uint64_t)v959, (uint64_t)v971, v967, v970, (uint64_t)&v2132);
                                                                                                          v973 = __src;
                                                                                                          if ((_DWORD)v964)
                                                                                                          {
                                                                                                            for (k = 0;
                                                                                                                  k != v964;
                                                                                                                  ++k)
                                                                                                            {
                                                                                                              v973[k] = k;
                                                                                                            }
                                                                                                          }
                                                                                                          if ((_DWORD)v965)
                                                                                                          {
                                                                                                            v975 = 0;
                                                                                                            v976 = v963 % (v964 / v965) * v965;
                                                                                                            do
                                                                                                            {
                                                                                                              v973[(v976 + v975++)] = v964;
                                                                                                              LODWORD(v964) = v964 + 1;
                                                                                                              --v965;
                                                                                                            }
                                                                                                            while (v965);
                                                                                                          }
                                                                                                          v2134 = 257;
                                                                                                          Select = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v962, v972, v973, v2112, (uint64_t)&v2132);
                                                                                                          v977 = *((unsigned __int8 *)v2106 + 16);
                                                                                                          if (v977 == 84)
                                                                                                          {
                                                                                                            v978 = 0;
                                                                                                          }
                                                                                                          else if (v977 == 39)
                                                                                                          {
                                                                                                            v978 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            v978 = 2;
                                                                                                          }
                                                                                                          v979 = 0;
                                                                                                          v980 = *((_DWORD *)v2106 + 5);
                                                                                                          v981 = -(uint64_t)(v980 & 0x7FFFFFF);
                                                                                                          if (v980 < 0)
                                                                                                          {
                                                                                                            v2078 = (char *)v2106 - 32 * (v980 & 0x7FFFFFF);
                                                                                                            v2079 = *((_QWORD *)v2078 - 1);
                                                                                                            if ((v2079 & 0xFFFFFFFF0) != 0)
                                                                                                              v979 = *((_DWORD *)v2078 - 3) - *(_DWORD *)&v2078[-v2079];
                                                                                                            else
                                                                                                              v979 = 0;
                                                                                                          }
                                                                                                          if (((-32 * v978 + 32 * -v979 - 32 * v981 - 32) & 0x1FFFFFFFE0) == 0xA0)
                                                                                                            Select = (uint64_t *)sub_1C53451A0((uint64_t *)&v2116, *((unsigned __int8 **)v2106 + 4 * v981 + 16), Select, *((_QWORD *)v2106 + 4 * v981 + 12));
                                                                                                          v816 = __src;
                                                                                                          if (__src == &v2113)
                                                                                                            goto LABEL_2999;
LABEL_1482:
                                                                                                          free(v816);
                                                                                                          goto LABEL_2999;
                                                                                                        }
                                                                                                        if ((v167 & 1) == 0 && (*(_QWORD *)v80 == 0x747865762E787661 ? (v789 = *((_QWORD *)v80 + 1) == 0x3832316674636172) : (v789 = 0), v789 ? (v790 = v80[16] == 46) : (v790 = 0), v790) || v155 == 17 && (*(_QWORD *)v80 == 0x7865762E32787661 ? (v791 = *((_QWORD *)v80 + 1) == 0x3231697463617274) : (v791 = 0), v791 ? (v792 = v80[16] == 56) : (v792 = 0), v792) || !v781 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v793 = *((_QWORD *)v80 + 1) == 0x747865762E6B7361) : (v793 = 0), v793 ? (v794 = *((_DWORD *)v80 + 4) == 1952670066) : (v794 = 0), v794))
                                                                                                        {
                                                                                                          v988 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                          v989 = *v988;
                                                                                                          v990 = v988[4];
                                                                                                          v991 = (_QWORD *)(v990 + 24);
                                                                                                          if (*(_DWORD *)(v990 + 32) >= 0x41u)
                                                                                                            v991 = (_QWORD *)*v991;
                                                                                                          v992 = (_QWORD *)*v991;
                                                                                                          v993 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                          v994 = *(_DWORD *)(*(_QWORD *)v989 + 32);
                                                                                                          __src = &v2113;
                                                                                                          v2112 = 0x800000000;
                                                                                                          sub_1C4893E04((char *)&__src, v993, 0);
                                                                                                          v995 = __src;
                                                                                                          if ((_DWORD)v993)
                                                                                                          {
                                                                                                            v996 = 0;
                                                                                                            v997 = v992 % (v994 / v993) * v993;
                                                                                                            v998 = __src;
                                                                                                            do
                                                                                                            {
                                                                                                              *v998++ = v997 + v996++;
                                                                                                              --v993;
                                                                                                            }
                                                                                                            while (v993);
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          if (v155 < 0x14)
                                                                                                          {
                                                                                                            if (v155 < 0xF)
                                                                                                            {
                                                                                                              v795 = 1;
                                                                                                              goto LABEL_1857;
                                                                                                            }
LABEL_1852:
                                                                                                            if (*(_QWORD *)v80 == 0x726570762E787661 && *(_QWORD *)(v80 + 7) == 0x2E38323166326D72)
                                                                                                            {
LABEL_1924:
                                                                                                              v1042 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                                                                                                              v1043 = (unint64_t *)(v1042 + 24);
                                                                                                              if (*(_DWORD *)(v1042 + 32) >= 0x41u)
                                                                                                                v1043 = (unint64_t *)*v1043;
                                                                                                              v1044 = *v1043;
                                                                                                              v1045 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                              __src = &v2113;
                                                                                                              v2112 = 0x800000000;
                                                                                                              sub_1C4893E04((char *)&__src, v1045, 0);
                                                                                                              v1047 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                              v1048 = *(_QWORD **)&v1047[v1044 & 0x20];
                                                                                                              if ((v1044 & 8) != 0)
                                                                                                                v1049 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v2106, v1046);
                                                                                                              else
                                                                                                                v1049 = *(_QWORD **)&v1047[32 * ((v1044 >> 1) & 1)];
                                                                                                              if ((v1044 & 0x80) != 0)
                                                                                                                v1048 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v2106, v1046);
                                                                                                              v1068 = (char *)__src;
                                                                                                              if (v1045 >= 2)
                                                                                                              {
                                                                                                                v1159 = v1045 >> 1;
                                                                                                                v1160 = ((int)((_DWORD)v1044 << 31) >> 31) & (v1045 >> 1);
                                                                                                                if ((v1045 >> 1) <= 1)
                                                                                                                  v1161 = 1;
                                                                                                                else
                                                                                                                  v1161 = v1159;
                                                                                                                v1162 = __src;
                                                                                                                v1163 = v1161;
                                                                                                                do
                                                                                                                {
                                                                                                                  *v1162++ = v1160++;
                                                                                                                  --v1163;
                                                                                                                }
                                                                                                                while (v1163);
                                                                                                                v1164 = (v1159 & ((int)((_DWORD)v1044 << 27) >> 31)) + v1045;
                                                                                                                v1165 = &v1068[4 * v1159];
                                                                                                                do
                                                                                                                {
                                                                                                                  *(_DWORD *)v1165 = v1164;
                                                                                                                  v1165 += 4;
                                                                                                                  ++v1164;
                                                                                                                  --v1161;
                                                                                                                }
                                                                                                                while (v1161);
                                                                                                              }
                                                                                                              v1074 = v2112;
                                                                                                              v2134 = 257;
                                                                                                              v1075 = (uint64_t)v1049;
                                                                                                              v1076 = (uint64_t)v1048;
LABEL_1968:
                                                                                                              v815 = sub_1C486AD20((uint64_t)&v2116, v1075, v1076, v1068, v1074, (uint64_t)&v2132);
                                                                                                              goto LABEL_1361;
                                                                                                            }
                                                                                                            v795 = 0;
LABEL_1857:
                                                                                                            if (v155 != 15 || (*(_QWORD *)v80 == 0x6570762E32787661 ? (v1008 = *(_QWORD *)(v80 + 7) == 0x38323169326D7265) : (v1008 = 0), !v1008))
                                                                                                            {
                                                                                                              if (v155 < 0xC || (*(_QWORD *)v80 == 0x726570762E787661 ? (v1009 = *((_DWORD *)v80 + 2) == 778856813) : (v1009 = 0), !v1009))
                                                                                                              {
                                                                                                                if (v155 != 12 || (*(_QWORD *)v80 == 0x6873702E32657373 ? (v1010 = *((_DWORD *)v80 + 2) == 1680762485) : (v1010 = 0), !v1010))
                                                                                                                {
                                                                                                                  if (v155 >= 0x15)
                                                                                                                  {
                                                                                                                    if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x726570762E6B7361 && *(_QWORD *)(v80 + 13) == 0x702E6C696D726570)
                                                                                                                      goto LABEL_2010;
                                                                                                                  }
                                                                                                                  else if (v155 < 0x14)
                                                                                                                  {
LABEL_1988:
                                                                                                                    if (v155 == 13 && (*(_QWORD *)v80 == 0x6873702E32657373 ? (v1091 = *(_QWORD *)(v80 + 5) == 0x772E6C6675687370) : (v1091 = 0), v1091) || v155 >= 0x15 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1092 = *((_QWORD *)v80 + 1) == 0x756873702E6B7361) : (v1092 = 0), v1092 ? (v1093 = *(_QWORD *)(v80 + 13) == 0x2E772E6C66756873) : (v1093 = 0), v1093))
                                                                                                                    {
                                                                                                                      v1213 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                      v989 = *v1213;
                                                                                                                      v1214 = v1213[4];
                                                                                                                      v1215 = (_QWORD *)(v1214 + 24);
                                                                                                                      if (*(_DWORD *)(v1214 + 32) >= 0x41u)
                                                                                                                        v1215 = (_QWORD *)*v1215;
                                                                                                                      v1216 = *(_DWORD *)v1215;
                                                                                                                      v1217 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                      __src = &v2113;
                                                                                                                      v2112 = 0x1000000000;
                                                                                                                      sub_1C4893E04((char *)&__src, v1217, 0);
                                                                                                                      v995 = __src;
                                                                                                                      if ((_DWORD)v1217)
                                                                                                                      {
                                                                                                                        v1218 = 0;
                                                                                                                        v1219.i64[0] = 0x300000003;
                                                                                                                        v1219.i64[1] = 0x300000003;
                                                                                                                        v1220 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v1216), (uint32x4_t)xmmword_1C85FCA40), v1219);
                                                                                                                        v1221 = (int8x16_t *)__src;
                                                                                                                        do
                                                                                                                        {
                                                                                                                          *v1221 = vorrq_s8(v1220, (int8x16_t)vdupq_n_s32(v1218));
                                                                                                                          v1221 += 2;
                                                                                                                          v1222 = (int8x16_t)vdupq_n_s64(v1218);
                                                                                                                          v1223 = (int32x4_t)vorrq_s8(v1222, (int8x16_t)xmmword_1C85FCA50);
                                                                                                                          v1224 = (int32x4_t)vorrq_s8(v1222, (int8x16_t)xmmword_1C85F9F50);
                                                                                                                          *(int32x4_t *)&v995[v1224.i64[0]] = vuzp1q_s32(v1224, v1223);
                                                                                                                          v1218 += 8;
                                                                                                                        }
                                                                                                                        while ((_DWORD)v1217 != (_DWORD)v1218);
                                                                                                                      }
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      if (v155 != 13 || (*(_QWORD *)v80 == 0x6873702E32657373 ? (v1094 = *(_QWORD *)(v80 + 5) == 0x772E686675687370) : (v1094 = 0), !v1094))
                                                                                                                      {
                                                                                                                        if (v155 < 0x15)
                                                                                                                        {
                                                                                                                          if ((v164 & 1) != 0)
                                                                                                                          {
                                                                                                                            v1095 = 1;
                                                                                                                            v1096 = 1;
                                                                                                                            v1097 = 1;
                                                                                                                            if (v155 < 0x10)
                                                                                                                              goto LABEL_2460;
LABEL_2303:
                                                                                                                            if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x2E646E612E6B7361)
                                                                                                                            {
                                                                                                                              if (v155 < 0x11)
                                                                                                                              {
                                                                                                                                if (v1095)
                                                                                                                                {
                                                                                                                                  v1097 = 0;
                                                                                                                                  v1095 = 1;
LABEL_2451:
                                                                                                                                  v1096 = 1;
LABEL_2460:
                                                                                                                                  if ((v795 & 1) != 0 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1329 = *(_QWORD *)(v80 + 7) == 0x2E726F2E6B73616DLL) : (v1329 = 0), !v1329))
                                                                                                                                  {
                                                                                                                                    if ((v1097 & 1) != 0)
                                                                                                                                      goto LABEL_2474;
                                                                                                                                    if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x2E726F702E6B7361)
                                                                                                                                    {
                                                                                                                                      if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x2E726F782E6B7361)
                                                                                                                                      {
LABEL_2713:
                                                                                                                                        v1444 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                        sub_1C6227E64(*(_QWORD *)v2106);
                                                                                                                                        v1484 = v1483;
                                                                                                                                        v1485 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                        v1486 = sub_1C4773E38((uint64_t *)&v2116, 49, v1485, v1483, (uint64_t)&__src);
                                                                                                                                        v1487 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                                                                        v2134 = 257;
                                                                                                                                        v1488 = sub_1C4773E38((uint64_t *)&v2116, 49, v1487, v1484, (uint64_t)&v2132);
                                                                                                                                        v2110 = 257;
                                                                                                                                        v1477 = sub_1C506EC1C((uint64_t *)&v2116, v1486, (uint64_t)v1488, (uint64_t)&v2107);
                                                                                                                                        goto LABEL_2735;
                                                                                                                                      }
LABEL_2474:
                                                                                                                                      if (v1095)
                                                                                                                                        goto LABEL_2496;
                                                                                                                                      if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x726F78702E6B7361 || v80[16] != 46)
                                                                                                                                      {
                                                                                                                                        if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x646461702E6B7361 || v80[16] != 46)
                                                                                                                                        {
                                                                                                                                          if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x627573702E6B7361 && v80[16] == 46)
                                                                                                                                          {
                                                                                                                                            v1422 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                            v1423 = *v1422;
                                                                                                                                            v1424 = v1422[4];
                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                            v1415 = sub_1C47733F8((uint64_t)&v2116, v1423, v1424, (uint64_t)&__src, 0, 0);
                                                                                                                                            goto LABEL_2736;
                                                                                                                                          }
LABEL_2496:
                                                                                                                                          if ((v1096 & 1) == 0 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1338 = *((_QWORD *)v80 + 1) == 0x6C756D702E6B7361) : (v1338 = 0), v1338 ? (v1339 = *((unsigned __int16 *)v80 + 8) == 11884) : (v1339 = 0), v1339))
                                                                                                                                          {
                                                                                                                                            v1412 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                            v1413 = *v1412;
                                                                                                                                            v1414 = v1412[4];
                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                            v1415 = sub_1C4EC4040((uint64_t)&v2116, v1413, v1414, (uint64_t)&__src, 0, 0);
                                                                                                                                          }
                                                                                                                                          else
                                                                                                                                          {
                                                                                                                                            if (v1095)
                                                                                                                                            {
LABEL_2505:
                                                                                                                                              if ((v1096 & 1) != 0 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1340 = *((_QWORD *)v80 + 1) == 0x6E637A6C2E6B7361) : (v1340 = 0), v1340 ? (v1341 = *((unsigned __int16 *)v80 + 8) == 11892) : (v1341 = 0), !v1341))
                                                                                                                                              {
                                                                                                                                                if ((v1097 & 1) != 0)
                                                                                                                                                {
LABEL_2514:
                                                                                                                                                  if ((v1096 & 1) != 0 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1342 = *((_QWORD *)v80 + 1) == 0x65766F6D2E6B7361) : (v1342 = 0), v1342 ? (v1343 = *((unsigned __int16 *)v80 + 8) == 29486) : (v1343 = 0), !v1343))
                                                                                                                                                  {
                                                                                                                                                    if ((v795 & 1) == 0 && *(_QWORD *)v80 == 0x632E323135787661 && *(_QWORD *)(v80 + 7) == 0x326B73616D747663)
                                                                                                                                                    {
                                                                                                                                                      v1593 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                      v408 = (unsigned __int8 *)sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), *(_DWORD *)(*(_QWORD *)v2106 + 32));
                                                                                                                                                      __src = "vpmovm2";
                                                                                                                                                      LOWORD(v2115) = 259;
                                                                                                                                                      p_src = &__src;
                                                                                                                                                      v411 = 40;
                                                                                                                                                      v409 = v1593;
                                                                                                                                                      goto LABEL_577;
                                                                                                                                                    }
                                                                                                                                                    if (v155 < 9)
                                                                                                                                                      goto LABEL_2533;
                                                                                                                                                    if (*(_QWORD *)&v80[v155 - 9] != 0x7164746E766F6D2ELL || v80[v155 - 1] != 97)
                                                                                                                                                    {
                                                                                                                                                      if (v155 < 0xB)
                                                                                                                                                      {
LABEL_2533:
                                                                                                                                                        v1346 = 1;
LABEL_2534:
                                                                                                                                                        if ((v795 & 1) == 0 && *(_QWORD *)v80 == 0x736D66762E616D66 && *(_QWORD *)(v80 + 7) == 0x702E646461627573)
                                                                                                                                                        {
                                                                                                                                                          v1683 = v2106;
                                                                                                                                                          v1684 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                          if ((_DWORD)v1685 == 1)
                                                                                                                                                          {
                                                                                                                                                            v1683 = v2106;
                                                                                                                                                            v1684 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                          }
                                                                                                                                                          if ((*((_DWORD *)v1684 + 2) & 0xFE) == 0x12)
                                                                                                                                                            v1684 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1684 + 2);
                                                                                                                                                          v1687 = llvm::Type::getPrimitiveSizeInBits(v1684);
                                                                                                                                                          if (PrimitiveSizeInBits == 128 && v1687 == 32)
                                                                                                                                                          {
                                                                                                                                                            v1688 = 12054;
                                                                                                                                                          }
                                                                                                                                                          else if (PrimitiveSizeInBits == 256 && v1687 == 32)
                                                                                                                                                          {
                                                                                                                                                            v1688 = 12055;
                                                                                                                                                          }
                                                                                                                                                          else if (v1687 == 64 && PrimitiveSizeInBits == 128)
                                                                                                                                                          {
                                                                                                                                                            v1688 = 12052;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            v1688 = 12053;
                                                                                                                                                          }
                                                                                                                                                          v1783 = (_QWORD *)((char *)v1683 - 32 * (*((_DWORD *)v1683 + 5) & 0x7FFFFFF));
                                                                                                                                                          *(_QWORD *)&v2132 = *v1783;
                                                                                                                                                          *((_QWORD *)&v2132 + 1) = v1783[4];
                                                                                                                                                          v1784 = v1783[8];
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          *(_QWORD *)&v2133 = sub_1C4772890((uint64_t *)&v2116, v1784, (uint64_t)&__src, 0);
                                                                                                                                                          v1785 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), v1688, 0, 0);
                                                                                                                                                          v579 = v1785;
                                                                                                                                                          if (v1785)
                                                                                                                                                            v580 = *(uint64_t ***)(v1785 + 24);
                                                                                                                                                          else
                                                                                                                                                            v580 = 0;
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          v709 = (uint64_t *)&v2132;
                                                                                                                                                          v710 = 3;
LABEL_1095:
                                                                                                                                                          VectorSplat = sub_1C4774778((uint64_t *)&v2116, v580, v579, v709, v710, (uint64_t)&__src, 0);
                                                                                                                                                          goto LABEL_2998;
                                                                                                                                                        }
                                                                                                                                                        if (v155 < 0x17)
                                                                                                                                                        {
                                                                                                                                                          v1348 = 1;
                                                                                                                                                          if (v155 < 0x15)
                                                                                                                                                          {
LABEL_2794:
                                                                                                                                                            if (v1346 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1570 = *((_QWORD *)v80 + 1) == 0x6574702E7A6B7361) : (v1570 = 0), v1570 ? (v1571 = *(_QWORD *)(v80 + 14) == 0x2E676F6C6E726574) : (v1571 = 0), !v1571))
                                                                                                                                                            {
                                                                                                                                                              if (v155 >= 0x14)
                                                                                                                                                              {
                                                                                                                                                                if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x616D70762E6B7361 && *((_DWORD *)v80 + 4) == 842359908)
                                                                                                                                                                {
                                                                                                                                                                  v1574 = v2103;
                                                                                                                                                                  goto LABEL_3120;
                                                                                                                                                                }
                                                                                                                                                                if (v155 >= 0x15)
                                                                                                                                                                {
                                                                                                                                                                  v1574 = v2103;
                                                                                                                                                                  if (*(_QWORD *)v2103 != 0x6D2E323135787661 || *((_QWORD *)v2103 + 1) != 0x6D70762E7A6B7361 || *(_QWORD *)(v2103 + 13) != 0x32356464616D7076)
                                                                                                                                                                  {
                                                                                                                                                                    if (v155 >= 0x17)
                                                                                                                                                                    {
                                                                                                                                                                      v1577 = *(_QWORD *)v2103 == 0x6D2E323135787661 && *((_QWORD *)v2103 + 1) == 0x726570762E6B7361;
                                                                                                                                                                      if (v1577 && *(_QWORD *)(v2103 + 15) == 0x2E72617632696D72)
                                                                                                                                                                        goto LABEL_3210;
                                                                                                                                                                      v1579 = *(_QWORD *)v2103 == 0x6D2E323135787661 && *((_QWORD *)v2103 + 1) == 0x726570762E6B7361;
                                                                                                                                                                      if (v1579 && *(_QWORD *)(v2103 + 15) == 0x2E72617632746D72)
                                                                                                                                                                        goto LABEL_3210;
                                                                                                                                                                    }
                                                                                                                                                                    goto LABEL_2833;
                                                                                                                                                                  }
LABEL_3120:
                                                                                                                                                                  v1735 = v1574[20] == 104 || v1574[21] == 104;
                                                                                                                                                                  v1756 = v1574[11];
                                                                                                                                                                  v1804 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                                  if ((_DWORD)v1803 == 1)
                                                                                                                                                                  v1805 = v1804 != 128 || v1735;
                                                                                                                                                                  if (v1805 != 1)
                                                                                                                                                                  {
                                                                                                                                                                    v1761 = 11857;
                                                                                                                                                                    goto LABEL_3690;
                                                                                                                                                                  }
                                                                                                                                                                  v1806 = v1804 != 256 || v1735;
                                                                                                                                                                  if (v1806 != 1)
                                                                                                                                                                  {
                                                                                                                                                                    v1761 = 11858;
                                                                                                                                                                    goto LABEL_3690;
                                                                                                                                                                  }
                                                                                                                                                                  v1807 = v1804 != 512 || v1735;
                                                                                                                                                                  if (v1807 != 1)
                                                                                                                                                                  {
                                                                                                                                                                    v1761 = 11859;
                                                                                                                                                                    goto LABEL_3690;
                                                                                                                                                                  }
                                                                                                                                                                  v1808 = !v1735;
                                                                                                                                                                  if (v1804 == 128 && !v1808)
                                                                                                                                                                  {
                                                                                                                                                                    v1761 = 11854;
                                                                                                                                                                    goto LABEL_3690;
                                                                                                                                                                  }
                                                                                                                                                                  if (v1804 != 256)
                                                                                                                                                                    v1808 = 1;
                                                                                                                                                                  v1898 = v1808 == 0;
                                                                                                                                                                  v1899 = 11855;
                                                                                                                                                                  goto LABEL_3687;
                                                                                                                                                                }
                                                                                                                                                              }
LABEL_2833:
                                                                                                                                                              if ((v1348 & 1) != 0 || ((v1574 = v2103, *(_QWORD *)v2103 == 0x6D2E323135787661) ? (v1581 = *((_QWORD *)v2103 + 1) == 0x6570762E7A6B7361) : (v1581 = 0), v1581 ? (v1582 = *((_QWORD *)v2103 + 2) == 0x2E72617632746D72) : (v1582 = 0), !v1582))
                                                                                                                                                              {
                                                                                                                                                                if (v155 < 0x15 || ((v1583 = v2103, *(_QWORD *)v2103 == 0x6D2E323135787661) ? (v1584 = *((_QWORD *)v2103 + 1) == 0x706470762E6B7361) : (v1584 = 0), v1584 ? (v1585 = *(_QWORD *)(v2103 + 13) == 0x2E64737562706470) : (v1585 = 0), !v1585))
                                                                                                                                                                {
                                                                                                                                                                  if (v1346 || ((v1583 = v2103, *(_QWORD *)v2103 == 0x6D2E323135787661) ? (v1586 = *((_QWORD *)v2103 + 1) == 0x6470762E7A6B7361) : (v1586 = 0), v1586 ? (v1587 = *(_QWORD *)(v2103 + 14) == 0x2E64737562706470) : (v1587 = 0), !v1587 && (*(_QWORD *)v2103 == 0x6D2E323135787661 ? (v1588 = *((_QWORD *)v2103 + 1) == 0x706470762E6B7361) : (v1588 = 0), v1588 ? (v1589 = *(_QWORD *)(v2103 + 14) == 0x2E73647375627064) : (v1589 = 0), !v1589)))
                                                                                                                                                                  {
                                                                                                                                                                    if (v155 < 0x17)
                                                                                                                                                                    {
                                                                                                                                                                      if (v155 < 0x15)
                                                                                                                                                                        goto LABEL_3161;
                                                                                                                                                                      v1583 = v2103;
LABEL_3154:
                                                                                                                                                                      if (*(_QWORD *)v1583 == 0x6D2E323135787661 && *((_QWORD *)v1583 + 1) == 0x706470762E6B7361 && *(_QWORD *)(v1583 + 13) == 0x2E64737377706470)
                                                                                                                                                                      {
LABEL_3242:
                                                                                                                                                                        v1756 = v1583[11];
                                                                                                                                                                        v1778 = 20;
                                                                                                                                                                        if (v1756 == 122)
                                                                                                                                                                          v1778 = 21;
                                                                                                                                                                        v1779 = v1583[v1778];
                                                                                                                                                                        v1781 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                                        if ((_DWORD)v1780 == 1)
                                                                                                                                                                        if (v1781 == 128 && v1779 != 115)
                                                                                                                                                                        {
                                                                                                                                                                          v1761 = 11828;
                                                                                                                                                                          goto LABEL_3690;
                                                                                                                                                                        }
                                                                                                                                                                        if (v1781 == 256 && v1779 != 115)
                                                                                                                                                                        {
                                                                                                                                                                          v1761 = 11829;
                                                                                                                                                                          goto LABEL_3690;
                                                                                                                                                                        }
                                                                                                                                                                        if (v1781 == 512 && v1779 != 115)
                                                                                                                                                                        {
                                                                                                                                                                          v1761 = 11830;
                                                                                                                                                                          goto LABEL_3690;
                                                                                                                                                                        }
                                                                                                                                                                        v1900 = v1779 != 115;
                                                                                                                                                                        if (v1781 == 128 && v1779 == 115)
                                                                                                                                                                        {
                                                                                                                                                                          v1761 = 11831;
                                                                                                                                                                          goto LABEL_3690;
                                                                                                                                                                        }
                                                                                                                                                                        if (v1781 != 256)
                                                                                                                                                                          v1900 = 1;
                                                                                                                                                                        v1898 = !v1900;
                                                                                                                                                                        v1899 = 11832;
                                                                                                                                                                        goto LABEL_3687;
                                                                                                                                                                      }
LABEL_3161:
                                                                                                                                                                      if (v1346 || ((v1583 = v2103, *(_QWORD *)v2103 == 0x6D2E323135787661) ? (v1746 = *((_QWORD *)v2103 + 1) == 0x6470762E7A6B7361) : (v1746 = 0), v1746 ? (v1747 = *(_QWORD *)(v2103 + 14) == 0x2E64737377706470) : (v1747 = 0), !v1747 && (*(_QWORD *)v2103 == 0x6D2E323135787661 ? (v1748 = *((_QWORD *)v2103 + 1) == 0x706470762E6B7361) : (v1748 = 0), v1748 ? (v1749 = *(_QWORD *)(v2103 + 14) == 0x2E73647373777064) : (v1749 = 0), !v1749)))
                                                                                                                                                                      {
                                                                                                                                                                        if (v155 < 0x17 || ((v1583 = v2103, *(_QWORD *)v2103 == 0x6D2E323135787661) ? (v1750 = *((_QWORD *)v2103 + 1) == 0x6470762E7A6B7361) : (v1750 = 0), v1750 ? (v1751 = *(_QWORD *)(v2103 + 15) == 0x2E73647373777064) : (v1751 = 0), !v1751))
                                                                                                                                                                        {
                                                                                                                                                                          if (v155 == 13)
                                                                                                                                                                          {
                                                                                                                                                                            if ((*(_QWORD *)v80 != 0x7972726163646461 || *(_QWORD *)(v80 + 5) != 0x3233752E78797272) && (*(_QWORD *)v80 != 0x7972726163646461 || *(_QWORD *)(v80 + 5) != 0x3436752E78797272) && (*(_QWORD *)v80 != 0x6F72726F62627573 || *(_QWORD *)(v80 + 5) != 0x3233752E776F7272) && (*(_QWORD *)v80 != 0x6F72726F62627573 || *(_QWORD *)(v80 + 5) != 0x3436752E776F7272))
                                                                                                                                                                            {
LABEL_3493:
                                                                                                                                                                              if (v155 < 0xC)
                                                                                                                                                                                goto LABEL_228;
                                                                                                                                                                              if (*(_QWORD *)v2103 != 0x6D2E323135787661 || *((_DWORD *)v2103 + 2) != 778793825)
                                                                                                                                                                                goto LABEL_228;
                                                                                                                                                                              v1845 = v2106;
                                                                                                                                                                              v6 = *(_QWORD *)v2106;
                                                                                                                                                                              v1847 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                                              if ((_DWORD)v1846 == 1)
                                                                                                                                                                              {
                                                                                                                                                                                v6 = *(_QWORD *)v2106;
                                                                                                                                                                              }
                                                                                                                                                                              v1848 = v155 - 12;
                                                                                                                                                                              v1849 = *(_DWORD *)(v6 + 8);
                                                                                                                                                                              v1850 = (llvm::Type *)v6;
                                                                                                                                                                              if ((v1849 & 0xFE) == 0x12)
                                                                                                                                                                                v1850 = **(llvm::Type ***)(v6 + 16);
                                                                                                                                                                              v1851 = llvm::Type::getPrimitiveSizeInBits(v1850);
                                                                                                                                                                              if (v1848 < 5)
                                                                                                                                                                                goto LABEL_228;
                                                                                                                                                                              v1852 = v80 + 12;
                                                                                                                                                                              if (*((_DWORD *)v80 + 3) == 779641197 && v80[16] == 112)
                                                                                                                                                                              {
                                                                                                                                                                                if (v1847 == 128 && v1851 == 32)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 12203;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1847 == 128 && v1851 == 64)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 12242;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                v2007 = v1851 == 32 && v1847 == 256;
                                                                                                                                                                                v2008 = 11177;
                                                                                                                                                                              }
                                                                                                                                                                              else if (*v1852 == 778987885 && v80[16] == 112)
                                                                                                                                                                              {
                                                                                                                                                                                if (v1847 == 128 && v1851 == 32)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 12205;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1847 == 128 && v1851 == 64)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 12245;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                v2007 = v1851 == 32 && v1847 == 256;
                                                                                                                                                                                v2008 = 11179;
                                                                                                                                                                              }
                                                                                                                                                                              else
                                                                                                                                                                              {
                                                                                                                                                                                if (v1848 < 8)
                                                                                                                                                                                {
LABEL_3513:
                                                                                                                                                                                  if (*v1852 != 1735811440 || v80[16] != 46)
                                                                                                                                                                                    goto LABEL_228;
                                                                                                                                                                                  v1856 = v80[17];
                                                                                                                                                                                  if (v1856 == 98 && v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12252;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1856 == 98 && v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11237;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1856 == 98 && v1847 == 512)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11673;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1856 == 119 && v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12253;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256 && v1856 == 119)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11238;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11674;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x2E622E6675687370)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12348;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11255;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11696;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1848 >= 0xB && *(_QWORD *)v1852 == 0x2E72682E6C756D70 && *(_QWORD *)(v80 + 15) == 0x2E77732E72682E6CLL)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12346;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11251;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11689;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x2E772E686C756D70)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12256;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11252;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11690;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1848 < 9)
                                                                                                                                                                                {
                                                                                                                                                                                  if (*(_QWORD *)v1852 != 0x2E7261766D726570)
                                                                                                                                                                                    goto LABEL_3513;
LABEL_3868:
                                                                                                                                                                                  if ((v1849 & 0xFE) == 0x12)
                                                                                                                                                                                    v1978 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
                                                                                                                                                                                  else
                                                                                                                                                                                    v1978 = v1849;
                                                                                                                                                                                  v2053 = v1978 > 6;
                                                                                                                                                                                  v2054 = v1847 == 256 && v1851 == 32;
                                                                                                                                                                                  v2055 = !v2054;
                                                                                                                                                                                  if (v2054 && v1978 <= 6)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11241;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1978 < 7)
                                                                                                                                                                                    v2055 = 1;
                                                                                                                                                                                  if (v2055 != 1)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11240;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  v2056 = v1847 == 256 && v1851 == 64;
                                                                                                                                                                                  v2057 = !v2056;
                                                                                                                                                                                  if (v2056 && v1978 <= 6)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11675;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1978 < 7)
                                                                                                                                                                                    v2057 = 1;
                                                                                                                                                                                  if (v2057 != 1)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11677;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  v2059 = v1847 == 512 && v1851 == 32;
                                                                                                                                                                                  v2060 = !v2059;
                                                                                                                                                                                  if (v2059 && v1978 <= 6)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11685;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1978 < 7)
                                                                                                                                                                                    v2060 = 1;
                                                                                                                                                                                  if (v2060 != 1)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11686;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  v2062 = v1847 == 512 && v1851 == 64;
                                                                                                                                                                                  v2063 = !v2062;
                                                                                                                                                                                  if (!v2062)
                                                                                                                                                                                    v2053 = 1;
                                                                                                                                                                                  if (!v2053)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11676;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1978 < 7)
                                                                                                                                                                                    v2064 = 1;
                                                                                                                                                                                  else
                                                                                                                                                                                    v2064 = v2063;
                                                                                                                                                                                  if (v2064 != 1)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11678;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1847 == 128 && v1851 == 16)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11679;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1847 == 256 && v1851 == 16)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11680;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1847 == 512 && v1851 == 16)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11681;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v1847 == 128 && v1851 == 8)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11682;
                                                                                                                                                                                    goto LABEL_3945;
                                                                                                                                                                                  }
                                                                                                                                                                                  v2084 = v1851 == 8 && v1847 == 256;
                                                                                                                                                                                  v2085 = 11683;
                                                                                                                                                                                  goto LABEL_4298;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x772E75686C756D70 && v80[20] == 46)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12257;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11253;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11691;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x642E776464616D70 && v80[20] == 46)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12254;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11249;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11688;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1848 >= 0xB && *(_QWORD *)v1852 == 0x7362756464616D70 && *(_QWORD *)(v80 + 15) == 0x2E772E7362756464)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12344;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11248;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11687;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x627773736B636170 && v80[20] == 46)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12249;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11234;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11670;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x776473736B636170 && v80[20] == 46)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12248;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11233;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11669;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x627773756B636170 && v80[20] == 46)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12250;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11236;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11672;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (*(_QWORD *)v1852 == 0x776473756B636170 && v80[20] == 46)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1847 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 12296;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1847 == 256)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11235;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1857 = 11671;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1848 < 0xB || (*(_QWORD *)v1852 == 0x766C696D72657076 ? (v2039 = *(_QWORD *)(v80 + 15) == 0x2E7261766C696D72) : (v2039 = 0), !v2039))
                                                                                                                                                                                {
                                                                                                                                                                                  if (v1848 == 13)
                                                                                                                                                                                  {
                                                                                                                                                                                    if (*(_QWORD *)v1852 == 0x6432647074747663 && *(_QWORD *)(v80 + 17) == 0x3635322E71643264)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11161;
                                                                                                                                                                                      goto LABEL_3945;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (*(_QWORD *)v1852 == 0x6432737074747663 && *(_QWORD *)(v80 + 17) == 0x3832312E71643273)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 12237;
                                                                                                                                                                                      goto LABEL_3945;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (*(_QWORD *)v1852 == 0x6432737074747663 && *(_QWORD *)(v80 + 17) == 0x3635322E71643273)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11162;
                                                                                                                                                                                      goto LABEL_3945;
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1848 == 12)
                                                                                                                                                                                  {
                                                                                                                                                                                    if (*(_QWORD *)v1852 == 0x7164326470747663 && *((_DWORD *)v80 + 5) == 909455918)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11159;
                                                                                                                                                                                      goto LABEL_3945;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (*(_QWORD *)v1852 == 0x7370326470747663 && *((_DWORD *)v80 + 5) == 909455918)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11158;
                                                                                                                                                                                      goto LABEL_3945;
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  if (*(_QWORD *)v1852 == 0x2E7261766D726570)
                                                                                                                                                                                    goto LABEL_3868;
                                                                                                                                                                                  if (*(_QWORD *)v1852 == 0x7762646173706264 && v80[20] == 46)
                                                                                                                                                                                  {
                                                                                                                                                                                    if (v1847 == 128)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11313;
                                                                                                                                                                                    }
                                                                                                                                                                                    else if (v1847 == 256)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11314;
                                                                                                                                                                                    }
                                                                                                                                                                                    else
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11315;
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    if (v1848 < 0xF || (*(_QWORD *)v1852 == 0x687369746C756D70 ? (v2073 = *(_QWORD *)(v80 + 19) == 0x2E62712E74666968) : (v2073 = 0), !v2073))
                                                                                                                                                                                    {
                                                                                                                                                                                      if (*(_QWORD *)v1852 != 0x7463696C666E6F63 || v80[20] != 46)
                                                                                                                                                                                        goto LABEL_3513;
                                                                                                                                                                                      v2075 = v80[21];
                                                                                                                                                                                      if (v2075 == 100 && v1847 == 128)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1857 = 11293;
                                                                                                                                                                                        goto LABEL_3945;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v2075 == 100 && v1847 == 256)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1857 = 11294;
                                                                                                                                                                                        goto LABEL_3945;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v2075 == 100 && v1847 == 512)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1857 = 11295;
                                                                                                                                                                                        goto LABEL_3945;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v2075 == 113 && v1847 == 128)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1857 = 11296;
                                                                                                                                                                                        goto LABEL_3945;
                                                                                                                                                                                      }
                                                                                                                                                                                      v2084 = v1847 == 256 && v2075 == 113;
                                                                                                                                                                                      v2085 = 11297;
LABEL_4298:
                                                                                                                                                                                      if (v2084)
                                                                                                                                                                                        v1857 = v2085;
                                                                                                                                                                                      else
                                                                                                                                                                                        v1857 = v2085 + 1;
                                                                                                                                                                                      goto LABEL_3945;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v1847 == 128)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11692;
                                                                                                                                                                                    }
                                                                                                                                                                                    else if (v1847 == 256)
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11693;
                                                                                                                                                                                    }
                                                                                                                                                                                    else
                                                                                                                                                                                    {
                                                                                                                                                                                      v1857 = 11694;
                                                                                                                                                                                    }
                                                                                                                                                                                  }
LABEL_3945:
                                                                                                                                                                                  v2010 = *((_DWORD *)v2106 + 5);
                                                                                                                                                                                  v2011 = v2010 & 0x7FFFFFF;
                                                                                                                                                                                  v2012 = (char *)v2106 - 32 * v2011;
                                                                                                                                                                                  v2013 = *((unsigned __int8 *)v2106 + 16);
                                                                                                                                                                                  if (v2013 == 84)
                                                                                                                                                                                  {
                                                                                                                                                                                    v2014 = 0;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v2013 == 39)
                                                                                                                                                                                  {
                                                                                                                                                                                    v2014 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v2014 = 2;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v2010 < 0 && (v2096 = *((_QWORD *)v2012 - 1), (v2096 & 0xFFFFFFFF0) != 0))
                                                                                                                                                                                    v2015 = (*((_DWORD *)v2012 - 3) - *(_DWORD *)&v2012[-v2096]);
                                                                                                                                                                                  else
                                                                                                                                                                                    v2015 = 0;
                                                                                                                                                                                  v2016 = (char *)v2106 + -32 * v2015 + -32 * v2014 - 32;
                                                                                                                                                                                  __src = &v2113;
                                                                                                                                                                                  v2112 = 0x400000000;
                                                                                                                                                                                  v2017 = v2016 - v2012;
                                                                                                                                                                                  if ((unint64_t)(v2016 - v2012) >= 0x81)
                                                                                                                                                                                  {
                                                                                                                                                                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v2017 >> 5, 8);
                                                                                                                                                                                    v2018 = v2112;
                                                                                                                                                                                    v2019 = v2112;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v2018 = 0;
                                                                                                                                                                                    v2019 = 0;
                                                                                                                                                                                  }
                                                                                                                                                                                  if (v2012 != v2016)
                                                                                                                                                                                  {
                                                                                                                                                                                    v2020 = (char *)__src + 8 * v2018;
                                                                                                                                                                                    v2021 = 32 * v2011 - 32 * v2014 - 32 * v2015 - 32;
                                                                                                                                                                                    do
                                                                                                                                                                                    {
                                                                                                                                                                                      v2022 = *(_QWORD *)v2012;
                                                                                                                                                                                      v2012 += 32;
                                                                                                                                                                                      *v2020++ = v2022;
                                                                                                                                                                                      v2021 -= 32;
                                                                                                                                                                                    }
                                                                                                                                                                                    while (v2021);
                                                                                                                                                                                  }
                                                                                                                                                                                  LODWORD(v2112) = ((unint64_t)v2017 >> 5) + v2019 - 2;
                                                                                                                                                                                  v2023 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1845 + 5) + 56) + 40), v1857, 0, 0);
                                                                                                                                                                                  if (v2023)
                                                                                                                                                                                    v2024 = *(uint64_t ***)(v2023 + 24);
                                                                                                                                                                                  else
                                                                                                                                                                                    v2024 = 0;
                                                                                                                                                                                  v2134 = 257;
                                                                                                                                                                                  v675 = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v2024, v2023, (uint64_t *)__src, v2112, (uint64_t)&v2132, 0);
                                                                                                                                                                                  v2025 = 0;
                                                                                                                                                                                  v2026 = *((unsigned __int8 *)v1845 + 16);
                                                                                                                                                                                  if (v2026 != 84)
                                                                                                                                                                                  {
                                                                                                                                                                                    if (v2026 == 39)
                                                                                                                                                                                      v2025 = (*((_DWORD *)v1845 + 20) + 1);
                                                                                                                                                                                    else
                                                                                                                                                                                      v2025 = 2;
                                                                                                                                                                                  }
                                                                                                                                                                                  v2027 = 0;
                                                                                                                                                                                  v2028 = *((_DWORD *)v1845 + 5);
                                                                                                                                                                                  v2029 = -(uint64_t)(v2028 & 0x7FFFFFF);
                                                                                                                                                                                  if (v2028 < 0)
                                                                                                                                                                                  {
                                                                                                                                                                                    v2097 = (char *)v1845 - 32 * (v2028 & 0x7FFFFFF);
                                                                                                                                                                                    v2098 = *((_QWORD *)v2097 - 1);
                                                                                                                                                                                    if ((v2098 & 0xFFFFFFFF0) != 0)
                                                                                                                                                                                      v2027 = (*((_DWORD *)v2097 - 3) - *(_DWORD *)&v2097[-v2098]);
                                                                                                                                                                                    else
                                                                                                                                                                                      v2027 = 0;
                                                                                                                                                                                  }
                                                                                                                                                                                  v2030 = (llvm::Value *)((char *)v1845 + 32 * v2029);
                                                                                                                                                                                  v2031 = (unint64_t)((llvm::Value *)((char *)v1845 - 32 * v2025 + -32 * v2027) - v2030 - 32) >> 5;
                                                                                                                                                                                  v677 = (unsigned __int8 *)*((_QWORD *)v2030 + 4 * (v2031 - 1));
                                                                                                                                                                                  v678 = *((_QWORD *)v2030 + 4 * (v2031 - 2));
LABEL_1013:
                                                                                                                                                                                  v679 = (uint64_t)sub_1C53451A0((uint64_t *)&v2116, v677, v675, v678);
                                                                                                                                                                                  goto LABEL_1481;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1847 == 128 && v1851 == 32)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 11192;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1847 == 128 && v1851 == 64)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 11190;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1847 == 256 && v1851 == 32)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 11193;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                if (v1847 == 256 && v1851 == 64)
                                                                                                                                                                                {
                                                                                                                                                                                  v1857 = 11191;
                                                                                                                                                                                  goto LABEL_3945;
                                                                                                                                                                                }
                                                                                                                                                                                v2007 = v1851 == 32 && v1847 == 512;
                                                                                                                                                                                v2008 = 11852;
                                                                                                                                                                              }
                                                                                                                                                                              if (v2007)
                                                                                                                                                                                v1857 = v2008 + 1;
                                                                                                                                                                              else
                                                                                                                                                                                v1857 = v2008;
                                                                                                                                                                              goto LABEL_3945;
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                          else
                                                                                                                                                                          {
                                                                                                                                                                            if (v155 != 12)
                                                                                                                                                                              goto LABEL_3493;
                                                                                                                                                                            if ((*(_QWORD *)v80 != 0x7972726163646461 || *((_DWORD *)v80 + 2) != 842233134) && (*(_QWORD *)v80 != 0x7972726163646461 || *((_DWORD *)v80 + 2) != 875984174))
                                                                                                                                                                              goto LABEL_3493;
                                                                                                                                                                          }
                                                                                                                                                                          v1858 = *v2103;
                                                                                                                                                                          if (v1858 == 115)
                                                                                                                                                                          {
                                                                                                                                                                            if (v2103[v155 - 1] == 50)
                                                                                                                                                                            {
                                                                                                                                                                              v1860 = 12357;
                                                                                                                                                                              goto LABEL_3632;
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                          else if (v1858 == 97)
                                                                                                                                                                          {
                                                                                                                                                                            v1859 = v2103[v155 - 1];
                                                                                                                                                                            if (v1859 == 50)
                                                                                                                                                                            {
                                                                                                                                                                              v1860 = 11125;
                                                                                                                                                                              goto LABEL_3632;
                                                                                                                                                                            }
                                                                                                                                                                            if (v1859 == 52)
                                                                                                                                                                            {
                                                                                                                                                                              v1860 = 11126;
LABEL_3632:
                                                                                                                                                                              v1880 = (_QWORD *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                                              *(_QWORD *)&v2132 = *v1880;
                                                                                                                                                                              *((_QWORD *)&v2132 + 1) = v1880[4];
                                                                                                                                                                              *(_QWORD *)&v2133 = v1880[8];
                                                                                                                                                                              v1881 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40), v1860, 0, 0);
                                                                                                                                                                              if (v1881)
                                                                                                                                                                                v1882 = *(uint64_t ***)(v1881 + 24);
                                                                                                                                                                              else
                                                                                                                                                                                v1882 = 0;
                                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                                              v1883 = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1882, v1881, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                                                                                                                                              LODWORD(v2107) = 1;
                                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                                              v1884 = sub_1C506DBC4((uint64_t)&v2116, v1883, (unsigned int *)&v2107, 1, (uint64_t)&__src);
                                                                                                                                                                              v1885 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[12];
                                                                                                                                                                              v1886 = llvm::PointerType::get(*(llvm::PointerType **)v1884, 0);
                                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                                              v1887 = sub_1C4773E38((uint64_t *)&v2116, 49, v1885, v1886, (uint64_t)&__src);
                                                                                                                                                                              v1888 = (char *)operator new(0x80uLL);
                                                                                                                                                                              v1889 = v1888;
                                                                                                                                                                              *((_DWORD *)v1888 + 21) = *((_DWORD *)v1888 + 21) & 0x38000000 | 2;
                                                                                                                                                                              *(_QWORD *)v1888 = 0;
                                                                                                                                                                              *((_QWORD *)v1888 + 2) = 0;
                                                                                                                                                                              *((_QWORD *)v1888 + 1) = 0;
                                                                                                                                                                              *((_QWORD *)v1888 + 5) = 0;
                                                                                                                                                                              *((_QWORD *)v1888 + 6) = 0;
                                                                                                                                                                              *((_QWORD *)v1888 + 4) = 0;
                                                                                                                                                                              v1890 = (unsigned __int8 **)(v1888 + 32);
                                                                                                                                                                              *((_QWORD *)v1888 + 8) = ***(_QWORD ***)v1884 + 1576;
                                                                                                                                                                              v1891 = (llvm::Value *)(v1888 + 64);
                                                                                                                                                                              *((_QWORD *)v1888 + 3) = v1888 + 64;
                                                                                                                                                                              *((_QWORD *)v1888 + 7) = v1888 + 64;
                                                                                                                                                                              *((_QWORD *)v1888 + 9) = 0;
                                                                                                                                                                              v1888[80] = 61;
                                                                                                                                                                              v1888[81] = 0;
                                                                                                                                                                              *((_WORD *)v1888 + 41) = 0;
                                                                                                                                                                              *((_DWORD *)v1888 + 21) = 2;
                                                                                                                                                                              *(_OWORD *)(v1888 + 88) = 0u;
                                                                                                                                                                              *(_OWORD *)(v1888 + 104) = 0u;
                                                                                                                                                                              *((_DWORD *)v1888 + 30) = 0;
                                                                                                                                                                              *(_QWORD *)v1888 = v1884;
                                                                                                                                                                              v1894 = *(_QWORD *)(v1884 + 8);
                                                                                                                                                                              v1893 = (_QWORD *)(v1884 + 8);
                                                                                                                                                                              v1892 = v1894;
                                                                                                                                                                              *((_QWORD *)v1888 + 1) = v1894;
                                                                                                                                                                              if (v1894)
                                                                                                                                                                                *(_QWORD *)(v1892 + 16) = v1888 + 8;
                                                                                                                                                                              *((_QWORD *)v1888 + 2) = v1893;
                                                                                                                                                                              *v1893 = v1888;
                                                                                                                                                                              if (*((_QWORD *)v1888 + 4))
                                                                                                                                                                              {
                                                                                                                                                                                **((_QWORD **)v1888 + 6) = *((_QWORD *)v1888 + 5);
                                                                                                                                                                                v2093 = *((_QWORD *)v1888 + 5);
                                                                                                                                                                                if (v2093)
                                                                                                                                                                                  *(_QWORD *)(v2093 + 16) = *((_QWORD *)v1888 + 6);
                                                                                                                                                                              }
                                                                                                                                                                              *v1890 = v1887;
                                                                                                                                                                              if (v1887)
                                                                                                                                                                              {
                                                                                                                                                                                v1897 = *((_QWORD *)v1887 + 1);
                                                                                                                                                                                v1896 = (unsigned __int8 ***)(v1887 + 8);
                                                                                                                                                                                v1895 = v1897;
                                                                                                                                                                                *((_QWORD *)v1888 + 5) = v1897;
                                                                                                                                                                                if (v1897)
                                                                                                                                                                                  *(_QWORD *)(v1895 + 16) = v1888 + 40;
                                                                                                                                                                                *((_QWORD *)v1888 + 6) = v1896;
                                                                                                                                                                                *v1896 = v1890;
                                                                                                                                                                              }
                                                                                                                                                                              *((_WORD *)v1888 + 41) = 0;
                                                                                                                                                                              v1888[124] = 1;
                                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                                              (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v2123 + 2))(v2123, v1891, &__src, v2119, v2120);
                                                                                                                                                                              if (!(_DWORD)v2117)
                                                                                                                                                                              {
LABEL_3643:
                                                                                                                                                                                LODWORD(v2107) = 0;
                                                                                                                                                                                LOWORD(v2115) = 257;
                                                                                                                                                                                v469 = (llvm::Value *)sub_1C506DBC4((uint64_t)&v2116, v1883, (unsigned int *)&v2107, 1, (uint64_t)&__src);
                                                                                                                                                                                v468 = v2106;
                                                                                                                                                                                goto LABEL_3001;
                                                                                                                                                                              }
                                                                                                                                                                              v1970 = (char *)v2116;
                                                                                                                                                                              v1971 = (char *)v2116 + 16 * v2117;
                                                                                                                                                                              v1972 = (unsigned __int8 **)(v1889 + 112);
                                                                                                                                                                              while (1)
                                                                                                                                                                              {
                                                                                                                                                                                v1973 = *(_DWORD *)v1970;
                                                                                                                                                                                v1974 = (unsigned __int8 *)*((_QWORD *)v1970 + 1);
                                                                                                                                                                                if (v1974)
                                                                                                                                                                                {
                                                                                                                                                                                  if (!v1973)
                                                                                                                                                                                  {
                                                                                                                                                                                    v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v1970 + 1);
                                                                                                                                                                                    llvm::MetadataTracking::track((uint64_t)&v2107, v1974, 2);
                                                                                                                                                                                    v1975 = *v1972;
                                                                                                                                                                                    goto LABEL_3852;
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                else
                                                                                                                                                                                {
                                                                                                                                                                                  v1975 = *v1972;
                                                                                                                                                                                  if (!*v1972 && (v1889[87] & 0x20) == 0)
                                                                                                                                                                                    goto LABEL_3849;
                                                                                                                                                                                  if (!v1973)
                                                                                                                                                                                  {
                                                                                                                                                                                    v2107 = 0;
LABEL_3852:
                                                                                                                                                                                    if (v1975)
                                                                                                                                                                                      llvm::MetadataTracking::untrack((uint64_t)(v1889 + 112), v1975);
                                                                                                                                                                                    v1976 = (unsigned __int8 *)v2107;
                                                                                                                                                                                    *v1972 = (unsigned __int8 *)v2107;
                                                                                                                                                                                    if (v1976)
                                                                                                                                                                                      llvm::MetadataTracking::retrack((uint64_t)&v2107, v1976, (uint64_t)(v1889 + 112));
                                                                                                                                                                                    goto LABEL_3849;
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                llvm::Value::setMetadata(v1891, *(_DWORD *)v1970, (llvm::MDNode *)v1974);
LABEL_3849:
                                                                                                                                                                                v1970 += 16;
                                                                                                                                                                                if (v1970 == v1971)
                                                                                                                                                                                  goto LABEL_3643;
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                          v1860 = 12358;
                                                                                                                                                                          goto LABEL_3632;
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      goto LABEL_3242;
                                                                                                                                                                    }
                                                                                                                                                                    v1583 = v2103;
                                                                                                                                                                    if (*(_QWORD *)v2103 != 0x6D2E323135787661 || *((_QWORD *)v2103 + 1) != 0x6470762E7A6B7361 || *(_QWORD *)(v2103 + 15) != 0x2E73647375627064)
                                                                                                                                                                      goto LABEL_3154;
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                v1756 = v1583[11];
                                                                                                                                                                v1757 = 20;
                                                                                                                                                                if (v1756 == 122)
                                                                                                                                                                  v1757 = 21;
                                                                                                                                                                v1758 = v1583[v1757];
                                                                                                                                                                v1760 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                                if ((_DWORD)v1759 == 1)
                                                                                                                                                                if (v1760 == 128 && v1758 != 115)
                                                                                                                                                                {
                                                                                                                                                                  v1761 = 11822;
                                                                                                                                                                  goto LABEL_3690;
                                                                                                                                                                }
                                                                                                                                                                if (v1760 == 256 && v1758 != 115)
                                                                                                                                                                {
                                                                                                                                                                  v1761 = 11823;
                                                                                                                                                                  goto LABEL_3690;
                                                                                                                                                                }
                                                                                                                                                                if (v1760 == 512 && v1758 != 115)
                                                                                                                                                                {
                                                                                                                                                                  v1761 = 11824;
                                                                                                                                                                  goto LABEL_3690;
                                                                                                                                                                }
                                                                                                                                                                v1862 = v1758 != 115;
                                                                                                                                                                if (v1760 == 128 && v1758 == 115)
                                                                                                                                                                {
                                                                                                                                                                  v1761 = 11825;
                                                                                                                                                                  goto LABEL_3690;
                                                                                                                                                                }
                                                                                                                                                                if (v1760 != 256)
                                                                                                                                                                  v1862 = 1;
                                                                                                                                                                v1898 = !v1862;
                                                                                                                                                                v1899 = 11826;
LABEL_3687:
                                                                                                                                                                if (v1898)
                                                                                                                                                                  v1761 = v1899;
                                                                                                                                                                else
                                                                                                                                                                  v1761 = v1899 + 1;
LABEL_3690:
                                                                                                                                                                v1905 = (_QWORD *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                                *(_QWORD *)&v2132 = *v1905;
                                                                                                                                                                *((_QWORD *)&v2132 + 1) = v1905[4];
                                                                                                                                                                *(_QWORD *)&v2133 = v1905[8];
                                                                                                                                                                v1906 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40), v1761, 0, 0);
                                                                                                                                                                if (v1906)
                                                                                                                                                                  v1907 = *(uint64_t ***)(v1906 + 24);
                                                                                                                                                                else
                                                                                                                                                                  v1907 = 0;
                                                                                                                                                                LOWORD(v2115) = 257;
                                                                                                                                                                Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1907, v1906, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                                                                                                                                v1798 = v2106;
                                                                                                                                                                if (v1756 == 122)
                                                                                                                                                                {
                                                                                                                                                                  v1799 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v2106, v1908);
                                                                                                                                                                  goto LABEL_3695;
                                                                                                                                                                }
                                                                                                                                                                v1909 = *((_DWORD *)v2106 + 5) & 0x7FFFFFF;
                                                                                                                                                                v1801 = -v1909;
                                                                                                                                                                v1802 = (char *)v2106 - 32 * v1909;
                                                                                                                                                                goto LABEL_3697;
                                                                                                                                                              }
LABEL_3210:
                                                                                                                                                              v1762 = v1574[11];
                                                                                                                                                              v1763 = v1574[17];
                                                                                                                                                              v1764 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                              v1766 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                              if ((_DWORD)v1765 == 1)
                                                                                                                                                              if ((*((_DWORD *)v1764 + 2) & 0xFE) == 0x12)
                                                                                                                                                              {
                                                                                                                                                                v1920 = (unsigned __int8 *)**((_QWORD **)v1764 + 2);
                                                                                                                                                                v1768 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v1920);
                                                                                                                                                                v1767 = v1920[8];
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
                                                                                                                                                                v1767 = *((_DWORD *)v1764 + 2);
                                                                                                                                                                v1768 = llvm::Type::getPrimitiveSizeInBits(v1764);
                                                                                                                                                              }
                                                                                                                                                              v1769 = v1767 > 6;
                                                                                                                                                              v1770 = v1766 == 128 && v1768 == 32;
                                                                                                                                                              v1771 = !v1770;
                                                                                                                                                              if (v1770 && v1767 <= 6)
                                                                                                                                                              {
                                                                                                                                                                v1772 = 11843;
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
                                                                                                                                                                if (v1767 < 7)
                                                                                                                                                                  v1771 = 1;
                                                                                                                                                                if (v1771 == 1)
                                                                                                                                                                {
                                                                                                                                                                  v1817 = v1766 == 128 && v1768 == 64;
                                                                                                                                                                  v1818 = !v1817;
                                                                                                                                                                  if (!v1817 || v1767 > 6)
                                                                                                                                                                  {
                                                                                                                                                                    if (v1767 < 7)
                                                                                                                                                                      v1818 = 1;
                                                                                                                                                                    if (v1818 == 1)
                                                                                                                                                                    {
                                                                                                                                                                      v1820 = v1766 == 256 && v1768 == 32;
                                                                                                                                                                      v1821 = !v1820;
                                                                                                                                                                      if (!v1820 || v1767 > 6)
                                                                                                                                                                      {
                                                                                                                                                                        if (v1767 < 7)
                                                                                                                                                                          v1821 = 1;
                                                                                                                                                                        if (v1821 == 1)
                                                                                                                                                                        {
                                                                                                                                                                          v1823 = v1766 == 256 && v1768 == 64;
                                                                                                                                                                          v1824 = !v1823;
                                                                                                                                                                          if (!v1823 || v1767 > 6)
                                                                                                                                                                          {
                                                                                                                                                                            if (v1767 < 7)
                                                                                                                                                                              v1824 = 1;
                                                                                                                                                                            if (v1824 == 1)
                                                                                                                                                                            {
                                                                                                                                                                              v1826 = v1766 == 512 && v1768 == 32;
                                                                                                                                                                              v1827 = !v1826;
                                                                                                                                                                              if (!v1826 || v1767 > 6)
                                                                                                                                                                              {
                                                                                                                                                                                if (v1767 < 7)
                                                                                                                                                                                  v1827 = 1;
                                                                                                                                                                                if (v1827 == 1)
                                                                                                                                                                                {
                                                                                                                                                                                  v1829 = v1766 == 512 && v1768 == 64;
                                                                                                                                                                                  v1830 = !v1829;
                                                                                                                                                                                  if (!v1829)
                                                                                                                                                                                    v1769 = 1;
                                                                                                                                                                                  if (v1769)
                                                                                                                                                                                  {
                                                                                                                                                                                    if (v1767 < 7)
                                                                                                                                                                                      v1831 = 1;
                                                                                                                                                                                    else
                                                                                                                                                                                      v1831 = v1830;
                                                                                                                                                                                    if (v1831 == 1)
                                                                                                                                                                                    {
                                                                                                                                                                                      if (v1766 == 128 && v1768 == 16)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1772 = 11837;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1766 == 256 && v1768 == 16)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1772 = 11838;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1766 == 512 && v1768 == 16)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1772 = 11839;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1766 == 128 && v1768 == 8)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1772 = 11849;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1768 == 8 && v1766 == 256)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1772 = 11850;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        v1772 = 11851;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    else
                                                                                                                                                                                    {
                                                                                                                                                                                      v1772 = 11848;
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    v1772 = 11842;
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                else
                                                                                                                                                                                {
                                                                                                                                                                                  v1772 = 11836;
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              else
                                                                                                                                                                              {
                                                                                                                                                                                v1772 = 11845;
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            else
                                                                                                                                                                            {
                                                                                                                                                                              v1772 = 11847;
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                          else
                                                                                                                                                                          {
                                                                                                                                                                            v1772 = 11841;
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                        else
                                                                                                                                                                        {
                                                                                                                                                                          v1772 = 11835;
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
                                                                                                                                                                        v1772 = 11844;
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                      v1772 = 11846;
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  else
                                                                                                                                                                  {
                                                                                                                                                                    v1772 = 11840;
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                else
                                                                                                                                                                {
                                                                                                                                                                  v1772 = 11834;
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                              v2044 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                              v2045 = *v2044;
                                                                                                                                                              *(_QWORD *)&v2132 = *v2044;
                                                                                                                                                              v2046 = v2044[4];
                                                                                                                                                              *((_QWORD *)&v2132 + 1) = v2046;
                                                                                                                                                              *(_QWORD *)&v2133 = v2044[8];
                                                                                                                                                              if (v1763 != 105)
                                                                                                                                                              {
                                                                                                                                                                *(_QWORD *)&v2132 = v2046;
                                                                                                                                                                *((_QWORD *)&v2132 + 1) = v2045;
                                                                                                                                                              }
                                                                                                                                                              v2047 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40), v1772, 0, 0);
                                                                                                                                                              if (v2047)
                                                                                                                                                                v2048 = *(uint64_t ***)(v2047 + 24);
                                                                                                                                                              else
                                                                                                                                                                v2048 = 0;
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v2050 = sub_1C4774778((uint64_t *)&v2116, v2048, v2047, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                                                                                                                              if (v1762 == 122)
                                                                                                                                                              {
                                                                                                                                                                v2051 = llvm::ConstantAggregateZero::get(v1764, v2049);
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
                                                                                                                                                                v2052 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                                                                                                LOWORD(v2115) = 257;
                                                                                                                                                                v2051 = sub_1C4773E38((uint64_t *)&v2116, 49, v2052, (uint64_t)v1764, (uint64_t)&__src);
                                                                                                                                                              }
                                                                                                                                                              v180 = v2051;
                                                                                                                                                              v179 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[12];
                                                                                                                                                              v177 = (uint64_t *)v2050;
                                                                                                                                                              goto LABEL_247;
                                                                                                                                                            }
LABEL_2961:
                                                                                                                                                            v1645 = v80[11];
                                                                                                                                                            v1646 = v2106;
                                                                                                                                                            v1647 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                            v1649 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                                                                                            if ((_DWORD)v1648 == 1)
                                                                                                                                                            {
                                                                                                                                                              v1646 = v2106;
                                                                                                                                                              v1647 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                            }
                                                                                                                                                            if ((*((_DWORD *)v1647 + 2) & 0xFE) == 0x12)
                                                                                                                                                              v1647 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1647 + 2);
                                                                                                                                                            v1650 = llvm::Type::getPrimitiveSizeInBits(v1647);
                                                                                                                                                            if (v1649 == 128 && v1650 == 32)
                                                                                                                                                            {
                                                                                                                                                              v1651 = 11736;
                                                                                                                                                            }
                                                                                                                                                            else if (v1649 == 256 && v1650 == 32)
                                                                                                                                                            {
                                                                                                                                                              v1651 = 11737;
                                                                                                                                                            }
                                                                                                                                                            else if (v1649 == 512 && v1650 == 32)
                                                                                                                                                            {
                                                                                                                                                              v1651 = 11738;
                                                                                                                                                            }
                                                                                                                                                            else if (v1649 == 128 && v1650 == 64)
                                                                                                                                                            {
                                                                                                                                                              v1651 = 11739;
                                                                                                                                                            }
                                                                                                                                                            else if (v1650 == 64 && v1649 == 256)
                                                                                                                                                            {
                                                                                                                                                              v1651 = 11740;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              v1651 = 11741;
                                                                                                                                                            }
                                                                                                                                                            v1864 = (_QWORD *)((char *)v1646 - 32 * (*((_DWORD *)v1646 + 5) & 0x7FFFFFF));
                                                                                                                                                            *(_QWORD *)&v2132 = *v1864;
                                                                                                                                                            *((_QWORD *)&v2132 + 1) = v1864[4];
                                                                                                                                                            *(_QWORD *)&v2133 = v1864[8];
                                                                                                                                                            *((_QWORD *)&v2133 + 1) = v1864[12];
                                                                                                                                                            v1865 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v1646 + 5) + 56) + 40), v1651, 0, 0);
                                                                                                                                                            if (v1865)
                                                                                                                                                              v1866 = *(uint64_t ***)(v1865 + 24);
                                                                                                                                                            else
                                                                                                                                                              v1866 = 0;
                                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                                            Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1866, v1865, (uint64_t *)&v2132, 4, (uint64_t)&__src, 0);
                                                                                                                                                            v1868 = v2106;
                                                                                                                                                            if (v1645 == 122)
                                                                                                                                                            {
                                                                                                                                                              v180 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v2106, v1867);
                                                                                                                                                              v1868 = v2106;
                                                                                                                                                              v1869 = -(uint64_t)(*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              v1870 = *((_DWORD *)v2106 + 5) & 0x7FFFFFF;
                                                                                                                                                              v1869 = -v1870;
                                                                                                                                                              v180 = (_QWORD *)*((_QWORD *)v2106 - 4 * v1870);
                                                                                                                                                            }
                                                                                                                                                            v179 = (unsigned __int8 *)*((_QWORD *)v1868 + 4 * v1869 + 16);
                                                                                                                                                            goto LABEL_1237;
                                                                                                                                                          }
LABEL_2787:
                                                                                                                                                          if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x726574702E6B7361 && *(_QWORD *)(v80 + 13) == 0x2E676F6C6E726574)
                                                                                                                                                            goto LABEL_2961;
                                                                                                                                                          goto LABEL_2794;
                                                                                                                                                        }
                                                                                                                                                        if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x616D66762E6B7361 || *(_QWORD *)(v80 + 15) != 0x702E627573646461)
                                                                                                                                                        {
                                                                                                                                                          if (v155 < 0x18)
                                                                                                                                                          {
                                                                                                                                                            v1348 = 1;
                                                                                                                                                            goto LABEL_2787;
                                                                                                                                                          }
                                                                                                                                                          v1702 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E336B7361;
                                                                                                                                                          if (!v1702 || *((_QWORD *)v80 + 2) != 0x702E627573646461)
                                                                                                                                                          {
                                                                                                                                                            v1704 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E7A6B7361;
                                                                                                                                                            if (!v1704 || *((_QWORD *)v80 + 2) != 0x702E627573646461)
                                                                                                                                                            {
                                                                                                                                                              v1706 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E336B7361;
                                                                                                                                                              if (!v1706 || *((_QWORD *)v80 + 2) != 0x702E646461627573)
                                                                                                                                                              {
                                                                                                                                                                v1348 = 0;
                                                                                                                                                                goto LABEL_2787;
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        v1632 = v80[11];
                                                                                                                                                        v1708 = v1632 == 122 || v1632 == 51;
                                                                                                                                                        v1709 = 12;
                                                                                                                                                        if (v1708)
                                                                                                                                                          v1709 = 13;
                                                                                                                                                        v1710 = (unsigned __int8 *)&v80[v1709];
                                                                                                                                                        v2103 = (unsigned __int8 *)&v80[v1709];
                                                                                                                                                        v2104 = v155 - v1709;
                                                                                                                                                        v1711 = *((unsigned __int8 *)v2106 + 16);
                                                                                                                                                        if (v1711 == 84)
                                                                                                                                                        {
                                                                                                                                                          v1712 = 0;
                                                                                                                                                        }
                                                                                                                                                        else if (v1711 == 39)
                                                                                                                                                        {
                                                                                                                                                          v1712 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1712 = 2;
                                                                                                                                                        }
                                                                                                                                                        v1713 = 0;
                                                                                                                                                        v1714 = *((_DWORD *)v2106 + 5);
                                                                                                                                                        v1715 = -(uint64_t)(v1714 & 0x7FFFFFF);
                                                                                                                                                        if (v1714 < 0)
                                                                                                                                                        {
                                                                                                                                                          v2091 = (char *)v2106 - 32 * (v1714 & 0x7FFFFFF);
                                                                                                                                                          v2092 = *((_QWORD *)v2091 - 1);
                                                                                                                                                          if ((v2092 & 0xFFFFFFFF0) != 0)
                                                                                                                                                            v1713 = *((_DWORD *)v2091 - 3) - *(_DWORD *)&v2091[-v2092];
                                                                                                                                                          else
                                                                                                                                                            v1713 = 0;
                                                                                                                                                        }
                                                                                                                                                        v1716 = v1710[3];
                                                                                                                                                        v1717 = (char *)v2106 + 32 * -v1713 + -32 * v1712;
                                                                                                                                                        v1718 = (char *)v2106 + 32 * v1715;
                                                                                                                                                        if (((v1717 - v1718 - 32) & 0x1FFFFFFFE0) != 0xA0)
                                                                                                                                                        {
                                                                                                                                                          v1724 = *(int *)(*(_QWORD *)v2106 + 32);
                                                                                                                                                          v1725 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                                                          v2107 = *(llvm::ValueAsMetadata ***)v1718;
                                                                                                                                                          v2108 = (llvm::CallBase **)*((_QWORD *)v1718 + 4);
                                                                                                                                                          v2109 = (void *)*((_QWORD *)v1718 + 8);
                                                                                                                                                          v1726 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40);
                                                                                                                                                          __src = *v2107;
                                                                                                                                                          v1727 = llvm::Intrinsic::getDeclaration(v1726, 142, (uint64_t *)&__src, 1);
                                                                                                                                                          v1728 = v1727;
                                                                                                                                                          if (v1727)
                                                                                                                                                            v1729 = *(uint64_t ***)(v1727 + 24);
                                                                                                                                                          else
                                                                                                                                                            v1729 = 0;
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          v1788 = sub_1C4774778((uint64_t *)&v2116, v1729, v1727, (uint64_t *)&v2107, 3, (uint64_t)&__src, 0);
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          v2109 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v2109, (uint64_t)&__src, 0);
                                                                                                                                                          if (v1728)
                                                                                                                                                            v1789 = *(uint64_t ***)(v1728 + 24);
                                                                                                                                                          else
                                                                                                                                                            v1789 = 0;
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          v1790 = sub_1C4774778((uint64_t *)&v2116, v1789, v1728, (uint64_t *)&v2107, 3, (uint64_t)&__src, 0);
                                                                                                                                                          if (v1716 == 115)
                                                                                                                                                            v1791 = v1788;
                                                                                                                                                          else
                                                                                                                                                            v1791 = v1790;
                                                                                                                                                          if (v1716 == 115)
                                                                                                                                                            v1788 = v1790;
                                                                                                                                                          __src = &v2113;
                                                                                                                                                          v2112 = 0x2000000000;
                                                                                                                                                          sub_1C4893E04((char *)&__src, v1724, 0);
                                                                                                                                                          v1792 = __src;
                                                                                                                                                          if ((_DWORD)v1725)
                                                                                                                                                          {
                                                                                                                                                            v1793 = 0;
                                                                                                                                                            v1794 = (uint64x2_t)vdupq_n_s64(v1725 - 1);
                                                                                                                                                            v1795 = (int64x2_t)xmmword_1C64632D0;
                                                                                                                                                            v1796 = vdupq_n_s64(2uLL);
                                                                                                                                                            do
                                                                                                                                                            {
                                                                                                                                                              v1797 = vmovn_s64((int64x2_t)vcgeq_u64(v1794, (uint64x2_t)v1795));
                                                                                                                                                              if ((v1797.i8[0] & 1) != 0)
                                                                                                                                                                v1792[v1793] = v1793;
                                                                                                                                                              if ((v1797.i8[4] & 1) != 0)
                                                                                                                                                                v1792[v1793 + 1] = v1724 + 1 + v1793;
                                                                                                                                                              v1793 += 2;
                                                                                                                                                              v1795 = vaddq_s64(v1795, v1796);
                                                                                                                                                            }
                                                                                                                                                            while (((v1725 + 1) & 0x1FFFFFFFELL) != v1793);
                                                                                                                                                          }
                                                                                                                                                          v2134 = 257;
                                                                                                                                                          Select = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v1791, v1788, v1792, v2112, (uint64_t)&v2132);
                                                                                                                                                          if (__src != &v2113)
                                                                                                                                                            free(__src);
                                                                                                                                                          goto LABEL_3283;
                                                                                                                                                        }
                                                                                                                                                        if (v1710[v155 - v1709 - 5] == 115)
                                                                                                                                                          v1719 = 11815;
                                                                                                                                                        else
                                                                                                                                                          v1719 = 11814;
                                                                                                                                                        *(_QWORD *)&v2132 = *(_QWORD *)v1718;
                                                                                                                                                        *((_QWORD *)&v2132 + 1) = *((_QWORD *)v1718 + 4);
                                                                                                                                                        v1720 = *((_QWORD *)v1718 + 8);
                                                                                                                                                        *(_QWORD *)&v2133 = v1720;
                                                                                                                                                        *((_QWORD *)&v2133 + 1) = *((_QWORD *)v1718 + 16);
                                                                                                                                                        if (v1716 == 115)
                                                                                                                                                        {
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          *(_QWORD *)&v2133 = sub_1C4772890((uint64_t *)&v2116, v1720, (uint64_t)&__src, 0);
                                                                                                                                                        }
                                                                                                                                                        v1721 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), v1719, 0, 0);
                                                                                                                                                        v1722 = v1721;
                                                                                                                                                        if (v1721)
                                                                                                                                                          v1723 = *(uint64_t ***)(v1721 + 24);
                                                                                                                                                        else
                                                                                                                                                          v1723 = 0;
                                                                                                                                                        goto LABEL_3263;
                                                                                                                                                      }
                                                                                                                                                      if ((*(_QWORD *)v80 != 0x616D66762E616D66 || *(_QWORD *)(v80 + 3) != 0x2E6464616D66762ELL) && (*(_QWORD *)v80 != 0x736D66762E616D66 || *(_QWORD *)(v80 + 3) != 0x2E6275736D66762ELL))
                                                                                                                                                      {
                                                                                                                                                        if (v155 < 0xC)
                                                                                                                                                          goto LABEL_2533;
                                                                                                                                                        if ((*(_QWORD *)v80 != 0x6D6E66762E616D66 || *((_DWORD *)v80 + 2) != 778331233) && (*(_QWORD *)v80 != 0x6D6E66762E616D66 || *((_DWORD *)v80 + 2) != 778204531))
                                                                                                                                                        {
                                                                                                                                                          if (v155 < 0xD)
                                                                                                                                                            goto LABEL_2533;
                                                                                                                                                          if (*(_QWORD *)v80 != 0x6D66762E34616D66 || *(_QWORD *)(v80 + 5) != 0x732E6464616D6676)
                                                                                                                                                          {
                                                                                                                                                            if (v155 < 0x14)
                                                                                                                                                              goto LABEL_2533;
                                                                                                                                                            if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x616D66762E6B7361 || *((_DWORD *)v80 + 4) != 1932420196)
                                                                                                                                                            {
                                                                                                                                                              if (v155 < 0x15)
                                                                                                                                                              {
                                                                                                                                                                if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x616D66762E6B7361 || *((_DWORD *)v80 + 4) != 1882088548)
                                                                                                                                                                  goto LABEL_2533;
LABEL_2948:
                                                                                                                                                                v1632 = v80[11];
                                                                                                                                                                v1633 = v1632 == 51 || v1632 == 122;
                                                                                                                                                                v1634 = v1633;
                                                                                                                                                                v1635 = 12;
                                                                                                                                                                if (v1633)
                                                                                                                                                                  v1635 = 13;
                                                                                                                                                                v1636 = (unsigned __int8 *)&v80[v1635];
                                                                                                                                                                v1637 = v155 - v1635;
                                                                                                                                                                v2103 = v1636;
                                                                                                                                                                v2104 = v155 - v1635;
                                                                                                                                                                v1638 = v1636[2];
                                                                                                                                                                v1639 = 3;
                                                                                                                                                                if (v1638 == 110)
                                                                                                                                                                  v1639 = 4;
                                                                                                                                                                v1640 = v1636[v1639];
                                                                                                                                                                v1641 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                                                v1642 = *(unsigned __int8 **)v1641;
                                                                                                                                                                v1643 = (unsigned __int8 *)*((_QWORD *)v1641 + 4);
                                                                                                                                                                v1644 = (unsigned __int8 *)*((_QWORD *)v1641 + 8);
                                                                                                                                                                if (v1634 == 1 && v1638 == 110)
                                                                                                                                                                {
                                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                                  v1642 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1642, (uint64_t)&__src, 0);
                                                                                                                                                                }
                                                                                                                                                                else if (v1638 != 110)
                                                                                                                                                                {
LABEL_3877:
                                                                                                                                                                  if (v1640 == 115)
                                                                                                                                                                  {
                                                                                                                                                                    LOWORD(v2115) = 257;
                                                                                                                                                                    v1644 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1644, (uint64_t)&__src, 0);
                                                                                                                                                                  }
                                                                                                                                                                  v1979 = *((unsigned __int8 *)v2106 + 16);
                                                                                                                                                                  if (v1979 == 84)
                                                                                                                                                                  {
                                                                                                                                                                    v1980 = 0;
                                                                                                                                                                  }
                                                                                                                                                                  else if (v1979 == 39)
                                                                                                                                                                  {
                                                                                                                                                                    v1980 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                                                                                  }
                                                                                                                                                                  else
                                                                                                                                                                  {
                                                                                                                                                                    v1980 = 2;
                                                                                                                                                                  }
                                                                                                                                                                  v1981 = 0;
                                                                                                                                                                  v1982 = *((_DWORD *)v2106 + 5);
                                                                                                                                                                  v1983 = -(uint64_t)(v1982 & 0x7FFFFFF);
                                                                                                                                                                  if (v1982 < 0)
                                                                                                                                                                  {
                                                                                                                                                                    v2094 = (char *)v2106 - 32 * (v1982 & 0x7FFFFFF);
                                                                                                                                                                    v2095 = *((_QWORD *)v2094 - 1);
                                                                                                                                                                    if ((v2095 & 0xFFFFFFFF0) != 0)
                                                                                                                                                                      v1981 = *((_DWORD *)v2094 - 3) - *(_DWORD *)&v2094[-v2095];
                                                                                                                                                                    else
                                                                                                                                                                      v1981 = 0;
                                                                                                                                                                  }
                                                                                                                                                                  v1984 = (char *)v2106 + 32 * -v1981 + -32 * v1980;
                                                                                                                                                                  v1985 = (char *)v2106 + 32 * v1983;
                                                                                                                                                                  if (((v1984 - v1985 - 32) & 0x1FFFFFFFE0) != 0xA0)
                                                                                                                                                                    goto LABEL_3887;
                                                                                                                                                                  v1986 = *((_QWORD *)v1985 + 16);
                                                                                                                                                                  if (*(_BYTE *)(v1986 + 16) == 16)
                                                                                                                                                                  {
                                                                                                                                                                    v1987 = (_QWORD *)(v1986 + 24);
                                                                                                                                                                    if (*(_DWORD *)(v1986 + 32) >= 0x41u)
                                                                                                                                                                      v1987 = (_QWORD *)*v1987;
                                                                                                                                                                    if (*v1987 == 4)
                                                                                                                                                                    {
LABEL_3887:
                                                                                                                                                                      v1988 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40);
                                                                                                                                                                      __src = *(void **)v1642;
                                                                                                                                                                      v1989 = llvm::Intrinsic::getDeclaration(v1988, 142, (uint64_t *)&__src, 1);
                                                                                                                                                                      v1722 = v1989;
                                                                                                                                                                      if (v1989)
                                                                                                                                                                        v1723 = *(uint64_t ***)(v1989 + 24);
                                                                                                                                                                      else
                                                                                                                                                                        v1723 = 0;
                                                                                                                                                                      *(_QWORD *)&v2132 = v1642;
                                                                                                                                                                      *((_QWORD *)&v2132 + 1) = v1643;
                                                                                                                                                                      *(_QWORD *)&v2133 = v1644;
                                                                                                                                                                      LOWORD(v2115) = 257;
                                                                                                                                                                      v1786 = 3;
                                                                                                                                                                      goto LABEL_3264;
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  if (v1636[v1637 - 5] == 115)
                                                                                                                                                                    v1992 = 11813;
                                                                                                                                                                  else
                                                                                                                                                                    v1992 = 11812;
                                                                                                                                                                  v1993 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), v1992, 0, 0);
                                                                                                                                                                  v1722 = v1993;
                                                                                                                                                                  if (v1993)
                                                                                                                                                                    v1723 = *(uint64_t ***)(v1993 + 24);
                                                                                                                                                                  else
                                                                                                                                                                    v1723 = 0;
                                                                                                                                                                  *(_QWORD *)&v2132 = v1642;
                                                                                                                                                                  *((_QWORD *)&v2132 + 1) = v1643;
                                                                                                                                                                  *(_QWORD *)&v2133 = v1644;
                                                                                                                                                                  *((_QWORD *)&v2133 + 1) = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[16];
LABEL_3263:
                                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                                  v1786 = 4;
LABEL_3264:
                                                                                                                                                                  Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1723, v1722, (uint64_t *)&v2132, v1786, (uint64_t)&__src, 0);
LABEL_3283:
                                                                                                                                                                  v1798 = v2106;
                                                                                                                                                                  if (v1632 == 122)
                                                                                                                                                                  {
                                                                                                                                                                    v1799 = llvm::Constant::getNullValue(*(llvm::Constant **)v2106, v1787);
LABEL_3695:
                                                                                                                                                                    v180 = v1799;
                                                                                                                                                                    v1798 = v2106;
                                                                                                                                                                    v1801 = -(uint64_t)(*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                                                    goto LABEL_3698;
                                                                                                                                                                  }
                                                                                                                                                                  v1800 = *((_DWORD *)v2106 + 5) & 0x7FFFFFF;
                                                                                                                                                                  v1801 = -v1800;
                                                                                                                                                                  v1802 = (char *)v2106 - 32 * v1800;
                                                                                                                                                                  if (v1632 == 51)
                                                                                                                                                                  {
                                                                                                                                                                    v180 = (_QWORD *)*((_QWORD *)v1802 + 8);
LABEL_3698:
                                                                                                                                                                    v179 = (unsigned __int8 *)*((_QWORD *)v1798 + 4 * v1801 + 12);
                                                                                                                                                                    goto LABEL_1237;
                                                                                                                                                                  }
LABEL_3697:
                                                                                                                                                                  v180 = *(_QWORD **)v1802;
                                                                                                                                                                  goto LABEL_3698;
                                                                                                                                                                }
                                                                                                                                                                if (v1632 != 51 && v1632 != 122)
                                                                                                                                                                {
                                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                                  v1643 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1643, (uint64_t)&__src, 0);
                                                                                                                                                                }
                                                                                                                                                                goto LABEL_3877;
                                                                                                                                                              }
                                                                                                                                                              if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x6D66762E7A6B7361 || *(_QWORD *)(v80 + 13) != 0x732E6464616D6676)
                                                                                                                                                              {
                                                                                                                                                                v1924 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E336B7361;
                                                                                                                                                                if (!v1924 || *(_QWORD *)(v80 + 13) != 0x732E6464616D6676)
                                                                                                                                                                {
                                                                                                                                                                  v1926 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E336B7361;
                                                                                                                                                                  if (!v1926 || *(_QWORD *)(v80 + 13) != 0x732E6275736D6676)
                                                                                                                                                                  {
                                                                                                                                                                    v1346 = v155 < 0x16;
                                                                                                                                                                    if (v155 < 0x16 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1928 = *((_QWORD *)v80 + 1) == 0x6E66762E336B7361) : (v1928 = 0), v1928 ? (v1929 = *(_QWORD *)(v80 + 14) == 0x732E6275736D6E66) : (v1929 = 0), !v1929))
                                                                                                                                                                    {
                                                                                                                                                                      if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x616D66762E6B7361 || *((_DWORD *)v80 + 4) != 1882088548)
                                                                                                                                                                      {
                                                                                                                                                                        v1932 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D6E66762E6B7361;
                                                                                                                                                                        if (!v1932 || *(_QWORD *)(v80 + 13) != 0x702E6464616D6E66)
                                                                                                                                                                        {
                                                                                                                                                                          v1934 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D6E66762E6B7361;
                                                                                                                                                                          if (!v1934 || *(_QWORD *)(v80 + 13) != 0x702E6275736D6E66)
                                                                                                                                                                          {
                                                                                                                                                                            v1936 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E336B7361;
                                                                                                                                                                            if (!v1936 || *(_QWORD *)(v80 + 13) != 0x702E6464616D6676)
                                                                                                                                                                            {
                                                                                                                                                                              v1938 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E336B7361;
                                                                                                                                                                              if (!v1938 || *(_QWORD *)(v80 + 13) != 0x702E6275736D6676)
                                                                                                                                                                              {
                                                                                                                                                                                if (v155 < 0x16 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1940 = *((_QWORD *)v80 + 1) == 0x6E66762E336B7361) : (v1940 = 0), v1940 ? (v1941 = *(_QWORD *)(v80 + 14) == 0x702E6275736D6E66) : (v1941 = 0), !v1941))
                                                                                                                                                                                {
                                                                                                                                                                                  v1942 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D66762E7A6B7361;
                                                                                                                                                                                  if (!v1942 || *(_QWORD *)(v80 + 13) != 0x702E6464616D6676)
                                                                                                                                                                                    goto LABEL_2534;
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      goto LABEL_2948;
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                            v1944 = v80[11];
                                                                                                                                                            v1945 = v1944 == 51 || v1944 == 122;
                                                                                                                                                            v1946 = v1945;
                                                                                                                                                            v1947 = 12;
                                                                                                                                                            if (v1945)
                                                                                                                                                              v1947 = 13;
                                                                                                                                                            v1948 = (unsigned __int8 *)&v80[v1947];
                                                                                                                                                            v2103 = (unsigned __int8 *)&v80[v1947];
                                                                                                                                                            v2104 = v155 - v1947;
                                                                                                                                                            v1949 = v80[v1947 + 2];
                                                                                                                                                            v1950 = 3;
                                                                                                                                                            if (v1949 == 110)
                                                                                                                                                              v1950 = 4;
                                                                                                                                                            v1951 = v1948[v1950];
                                                                                                                                                            v1952 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                                            v1953 = *(unsigned __int8 **)v1952;
                                                                                                                                                            v1954 = (unsigned __int8 *)*((_QWORD *)v1952 + 4);
                                                                                                                                                            v1955 = (unsigned __int8 *)*((_QWORD *)v1952 + 8);
                                                                                                                                                            if (v1946 == 1 && v1949 == 110)
                                                                                                                                                            {
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v1953 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1953, (uint64_t)&__src, 0);
                                                                                                                                                            }
                                                                                                                                                            else if (v1949 != 110)
                                                                                                                                                            {
                                                                                                                                                              goto LABEL_3819;
                                                                                                                                                            }
                                                                                                                                                            if (v1944 != 51 && v1944 != 122)
                                                                                                                                                            {
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v1954 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1954, (uint64_t)&__src, 0);
                                                                                                                                                            }
LABEL_3819:
                                                                                                                                                            if (v1951 == 115)
                                                                                                                                                            {
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v1955 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1955, (uint64_t)&__src, 0);
                                                                                                                                                            }
                                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                                            v1956 = sub_1C5344F14((uint64_t)&v2116, (uint64_t)v1953, (const llvm::APInt *)&__src);
                                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                                            v1957 = sub_1C5344F14((uint64_t)&v2116, (uint64_t)v1954, (const llvm::APInt *)&__src);
                                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                                            v1958 = sub_1C5344F14((uint64_t)&v2116, (uint64_t)v1955, (const llvm::APInt *)&__src);
                                                                                                                                                            v1959 = v1958;
                                                                                                                                                            v1960 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                            if (*(_BYTE *)(v1960 + 16) != 16)
                                                                                                                                                              goto LABEL_3827;
                                                                                                                                                            v1961 = (_QWORD *)(v1960 + 24);
                                                                                                                                                            if (*(_DWORD *)(v1960 + 32) >= 0x41u)
                                                                                                                                                              v1961 = (_QWORD *)*v1961;
                                                                                                                                                            if (*v1961 == 4)
                                                                                                                                                            {
                                                                                                                                                              v1962 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40);
                                                                                                                                                              __src = *(void **)v1956;
                                                                                                                                                              v1963 = llvm::Intrinsic::getDeclaration(v1962, 142, (uint64_t *)&__src, 1);
                                                                                                                                                              v1964 = v1963;
                                                                                                                                                              if (v1963)
                                                                                                                                                                v1965 = *(uint64_t ***)(v1963 + 24);
                                                                                                                                                              else
                                                                                                                                                                v1965 = 0;
                                                                                                                                                              *(_QWORD *)&v2132 = v1956;
                                                                                                                                                              *((_QWORD *)&v2132 + 1) = v1957;
                                                                                                                                                              *(_QWORD *)&v2133 = v1959;
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v1969 = 3;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
LABEL_3827:
                                                                                                                                                              *(_QWORD *)&v2132 = v1956;
                                                                                                                                                              *((_QWORD *)&v2132 + 1) = v1957;
                                                                                                                                                              *(_QWORD *)&v2133 = v1958;
                                                                                                                                                              *((_QWORD *)&v2133 + 1) = v1960;
                                                                                                                                                              if (v2103[v2104 - 1] == 100)
                                                                                                                                                                v1966 = 11811;
                                                                                                                                                              else
                                                                                                                                                                v1966 = 11810;
                                                                                                                                                              v1967 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40), v1966, 0, 0);
                                                                                                                                                              v1964 = v1967;
                                                                                                                                                              if (v1967)
                                                                                                                                                                v1965 = *(uint64_t ***)(v1967 + 24);
                                                                                                                                                              else
                                                                                                                                                                v1965 = 0;
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v1969 = 4;
                                                                                                                                                            }
                                                                                                                                                            v1994 = (llvm::Constant **)sub_1C4774778((uint64_t *)&v2116, v1965, v1964, (uint64_t *)&v2132, v1969, (uint64_t)&__src, 0);
                                                                                                                                                            Select = (uint64_t *)v1994;
                                                                                                                                                            if (v1944 == 122)
                                                                                                                                                            {
                                                                                                                                                              v1996 = (unsigned __int8 *)llvm::Constant::getNullValue(*v1994, v1995);
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              if (v1944 != 51)
                                                                                                                                                                goto LABEL_3910;
                                                                                                                                                              v1956 = v1959;
                                                                                                                                                              if (v1951 != 115)
                                                                                                                                                                goto LABEL_3910;
                                                                                                                                                              v1997 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v1996 = sub_1C5344F14((uint64_t)&v2116, v1997, (const llvm::APInt *)&__src);
                                                                                                                                                            }
                                                                                                                                                            v1956 = v1996;
LABEL_3910:
                                                                                                                                                            v1998 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[12];
                                                                                                                                                            if (!v1998 || v1998[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)v1998))
                                                                                                                                                            {
                                                                                                                                                              llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v2121 + 1888), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v1998 + 8) >> 8));
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v2001 = sub_1C4773E38((uint64_t *)&v2116, 49, v1998, v1999, (uint64_t)&__src);
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              v2002 = *(llvm::ConstantInt **)(*v2121 + 1984);
                                                                                                                                                              DWORD2(v2132) = *(_DWORD *)(*v2121 + 1992) >> 8;
                                                                                                                                                              if (DWORD2(v2132) > 0x40)
                                                                                                                                                                llvm::APInt::initSlowCase((llvm::APInt *)&v2132, 0, 0);
                                                                                                                                                              else
                                                                                                                                                                *(_QWORD *)&v2132 = 0;
                                                                                                                                                              v2003 = llvm::ConstantInt::get(v2002, (llvm::LLVMContext *)&v2132, v2000);
                                                                                                                                                              if (DWORD2(v2132) >= 0x41 && (_QWORD)v2132)
                                                                                                                                                                MEMORY[0x1CAA32F9C](v2132, 0x1000C8000313F17);
                                                                                                                                                              v2004 = sub_1C4772EE0((uint64_t *)&v2116, (uint64_t)v2001, (uint64_t)v2003, (uint64_t)&__src);
                                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                                              Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v2116, (uint64_t)v2004, Select, (uint64_t)v1956, (uint64_t)&__src, 0);
                                                                                                                                                            }
                                                                                                                                                            v1741 = (llvm::Value **)*((_QWORD *)v2106 + 8 * (unint64_t)(v1944 == 51) + -4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                                                            goto LABEL_3145;
                                                                                                                                                          }
                                                                                                                                                          v1910 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                          v1911 = *v1910;
                                                                                                                                                          v1912 = v1910[4];
                                                                                                                                                          v1913 = v1910[8];
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          v1914 = sub_1C5344F14((uint64_t)&v2116, v1911, (const llvm::APInt *)&__src);
                                                                                                                                                          *(_QWORD *)&v2132 = v1914;
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          *((_QWORD *)&v2132 + 1) = sub_1C5344F14((uint64_t)&v2116, v1912, (const llvm::APInt *)&__src);
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          *(_QWORD *)&v2133 = sub_1C5344F14((uint64_t)&v2116, v1913, (const llvm::APInt *)&__src);
                                                                                                                                                          v1915 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40);
                                                                                                                                                          v2107 = *(llvm::ValueAsMetadata ***)v1914;
                                                                                                                                                          v1916 = llvm::Intrinsic::getDeclaration(v1915, 142, (uint64_t *)&v2107, 1);
                                                                                                                                                          if (v1916)
                                                                                                                                                            v1917 = *(uint64_t ***)(v1916 + 24);
                                                                                                                                                          else
                                                                                                                                                            v1917 = 0;
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1917, v1916, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                                                                                                                          v1741 = llvm::Constant::getNullValue(*(llvm::Constant **)v2106, v1919);
                                                                                                                                                          LOWORD(v2115) = 257;
LABEL_3145:
                                                                                                                                                          VectorSplat = (uint64_t)sub_1C53450D8((uint64_t)&v2116, (uint64_t)v1741, (const llvm::APInt *)Select, (uint64_t)&__src);
                                                                                                                                                          goto LABEL_2998;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      v1691 = v80[6];
                                                                                                                                                      v1692 = 7;
                                                                                                                                                      if (v1691 == 110)
                                                                                                                                                        v1692 = 8;
                                                                                                                                                      v1693 = 11;
                                                                                                                                                      if (v1691 == 110)
                                                                                                                                                        v1693 = 12;
                                                                                                                                                      v1694 = v80[v1692];
                                                                                                                                                      v1695 = v80[v1693];
                                                                                                                                                      v1696 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                                      v1697 = *(unsigned __int8 **)v1696;
                                                                                                                                                      *(_QWORD *)&v2132 = *(_QWORD *)v1696;
                                                                                                                                                      v1698 = *((_QWORD *)v1696 + 4);
                                                                                                                                                      *((_QWORD *)&v2132 + 1) = v1698;
                                                                                                                                                      v1699 = (unsigned __int8 *)*((_QWORD *)v1696 + 8);
                                                                                                                                                      *(_QWORD *)&v2133 = v1699;
                                                                                                                                                      if (v1695 == 115)
                                                                                                                                                      {
                                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                                        v1697 = sub_1C5344F14((uint64_t)&v2116, (uint64_t)v1697, (const llvm::APInt *)&__src);
                                                                                                                                                        *(_QWORD *)&v2132 = v1697;
                                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                                        v1700 = sub_1C5344F14((uint64_t)&v2116, v1698, (const llvm::APInt *)&__src);
                                                                                                                                                        *((_QWORD *)&v2132 + 1) = v1700;
                                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                                        v1699 = sub_1C5344F14((uint64_t)&v2116, (uint64_t)v1699, (const llvm::APInt *)&__src);
                                                                                                                                                        *(_QWORD *)&v2133 = v1699;
                                                                                                                                                        if (v1691 == 110)
                                                                                                                                                        {
                                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                                          *((_QWORD *)&v2132 + 1) = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1700, (uint64_t)&__src, 0);
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      else if (v1691 == 110)
                                                                                                                                                      {
                                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                                        v1697 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1697, (uint64_t)&__src, 0);
                                                                                                                                                        *(_QWORD *)&v2132 = v1697;
                                                                                                                                                      }
                                                                                                                                                      if (v1694 == 115)
                                                                                                                                                      {
                                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                                        *(_QWORD *)&v2133 = sub_1C4772890((uint64_t *)&v2116, (uint64_t)v1699, (uint64_t)&__src, 0);
                                                                                                                                                      }
                                                                                                                                                      v1732 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40);
                                                                                                                                                      v2107 = *(llvm::ValueAsMetadata ***)v1697;
                                                                                                                                                      v1733 = llvm::Intrinsic::getDeclaration(v1732, 142, (uint64_t *)&v2107, 1);
                                                                                                                                                      if (v1733)
                                                                                                                                                        v1734 = *(uint64_t ***)(v1733 + 24);
                                                                                                                                                      else
                                                                                                                                                        v1734 = 0;
                                                                                                                                                      LOWORD(v2115) = 257;
                                                                                                                                                      Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v1734, v1733, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                                                                                                                      if (v1695 == 115)
                                                                                                                                                      {
                                                                                                                                                        v1741 = (llvm::Value **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                        LOWORD(v2115) = 257;
                                                                                                                                                        goto LABEL_3145;
                                                                                                                                                      }
LABEL_2999:
                                                                                                                                                      if (!Select)
                                                                                                                                                        goto LABEL_3002;
                                                                                                                                                      goto LABEL_3000;
                                                                                                                                                    }
                                                                                                                                                    v1601 = (uint64_t **)*((_QWORD *)v2101 + 5);
                                                                                                                                                    v1602 = *(llvm::ConstantInt **)(*v4 + 1960);
                                                                                                                                                    v1603 = *(_DWORD *)(*v4 + 1968);
                                                                                                                                                    LODWORD(v2112) = v1603 >> 8;
                                                                                                                                                    if (v1603 >> 8 > 0x40)
                                                                                                                                                    {
                                                                                                                                                      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      if (v1603 <= 0xFF)
                                                                                                                                                        LOBYTE(v1604) = 0;
                                                                                                                                                      else
                                                                                                                                                        v1604 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1603);
                                                                                                                                                      __src = (void *)(v1604 & 1);
                                                                                                                                                    }
                                                                                                                                                    v1606 = llvm::ConstantInt::get(v1602, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
                                                                                                                                                    if (v2112 >= 0x41 && __src)
                                                                                                                                                      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                                                                                                                                                    __src = llvm::ValueAsMetadata::get(v1606, v1605);
                                                                                                                                                    Impl = (void *)llvm::MDTuple::getImpl(v4, &__src, 1, 0, 1);
                                                                                                                                                    v1608 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                    v1609 = llvm::PointerType::get(*(llvm::PointerType **)v2106, 0);
                                                                                                                                                    __src = "cast";
                                                                                                                                                    LOWORD(v2115) = 259;
                                                                                                                                                    v1610 = sub_1C4773E38((uint64_t *)&v2116, 49, v1608, v1609, (uint64_t)&__src);
                                                                                                                                                    v1611 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                                    v1612 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106) >> 3;
                                                                                                                                                    v2134 = 257;
                                                                                                                                                    v1613 = (char *)operator new(0x60uLL);
                                                                                                                                                    v1614 = v1613;
                                                                                                                                                    Select = (uint64_t *)(v1613 + 32);
                                                                                                                                                    *((_QWORD *)v1613 + 2) = 0;
                                                                                                                                                    *((_QWORD *)v1613 + 3) = v1613 + 32;
                                                                                                                                                    v1615 = __clz(v1612);
                                                                                                                                                    LOWORD(v2115) = 257;
                                                                                                                                                    *((_QWORD *)v1613 + 4) = v1611;
                                                                                                                                                    *((_QWORD *)v1613 + 5) = 0;
                                                                                                                                                    *((_WORD *)v1613 + 24) = 60;
                                                                                                                                                    *((_DWORD *)v1613 + 13) = 1;
                                                                                                                                                    *(_OWORD *)(v1613 + 56) = 0u;
                                                                                                                                                    *(_OWORD *)(v1613 + 72) = 0u;
                                                                                                                                                    *((_DWORD *)v1613 + 22) = 0;
                                                                                                                                                    *(_QWORD *)v1613 = v1610;
                                                                                                                                                    *((_QWORD *)v1613 + 1) = 0;
                                                                                                                                                    if (v1610)
                                                                                                                                                    {
                                                                                                                                                      v1618 = *((_QWORD *)v1610 + 1);
                                                                                                                                                      v1617 = v1610 + 8;
                                                                                                                                                      v1616 = v1618;
                                                                                                                                                      *((_QWORD *)v1613 + 1) = v1618;
                                                                                                                                                      if (v1618)
                                                                                                                                                        *(_QWORD *)(v1616 + 16) = v1613 + 8;
                                                                                                                                                      *((_QWORD *)v1613 + 2) = v1617;
                                                                                                                                                      *v1617 = v1613;
                                                                                                                                                    }
                                                                                                                                                    *((_WORD *)v1613 + 25) = (126 - 2 * v1615) & 0x7E;
                                                                                                                                                    v1613[92] = 1;
                                                                                                                                                    llvm::Value::setName((uint64_t ***)v1613 + 4, (uint64_t)&__src);
                                                                                                                                                    (*((void (**)(void **, uint64_t *, __int128 *, uint64_t, uint64_t))*v2123 + 2))(v2123, Select, &v2132, v2119, v2120);
                                                                                                                                                    if (!(_DWORD)v2117)
                                                                                                                                                    {
LABEL_2898:
                                                                                                                                                      MDKindID = llvm::LLVMContext::getMDKindID(*v1601, "nontemporal", 0xBuLL);
                                                                                                                                                      if (Impl)
                                                                                                                                                      {
                                                                                                                                                        if (!MDKindID)
                                                                                                                                                        {
                                                                                                                                                          __src = Impl;
                                                                                                                                                          llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)Impl, 2);
                                                                                                                                                          v1620 = (unsigned __int8 *)*((_QWORD *)v1614 + 10);
                                                                                                                                                          goto LABEL_3527;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1620 = (unsigned __int8 *)*((_QWORD *)v1614 + 10);
                                                                                                                                                        if (!v1620 && (v1614[55] & 0x20) == 0)
                                                                                                                                                          goto LABEL_3000;
                                                                                                                                                        if (!MDKindID)
                                                                                                                                                        {
                                                                                                                                                          __src = 0;
LABEL_3527:
                                                                                                                                                          if (v1620)
                                                                                                                                                            llvm::MetadataTracking::untrack((uint64_t)(v1614 + 80), v1620);
                                                                                                                                                          v1861 = (unsigned __int8 *)__src;
                                                                                                                                                          *((_QWORD *)v1614 + 10) = __src;
                                                                                                                                                          if (v1861)
                                                                                                                                                            llvm::MetadataTracking::retrack((uint64_t)&__src, v1861, (uint64_t)(v1614 + 80));
                                                                                                                                                          goto LABEL_3000;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      llvm::Value::setMetadata((llvm::Value *)Select, MDKindID, (llvm::MDNode *)Impl);
                                                                                                                                                      goto LABEL_3000;
                                                                                                                                                    }
                                                                                                                                                    v1833 = (char *)v2116;
                                                                                                                                                    v1834 = (char *)v2116 + 16 * v2117;
                                                                                                                                                    v1835 = (unsigned __int8 **)(v1614 + 80);
                                                                                                                                                    while (1)
                                                                                                                                                    {
                                                                                                                                                      v1836 = *(_DWORD *)v1833;
                                                                                                                                                      v1837 = (unsigned __int8 *)*((_QWORD *)v1833 + 1);
                                                                                                                                                      if (v1837)
                                                                                                                                                      {
                                                                                                                                                        if (!v1836)
                                                                                                                                                        {
                                                                                                                                                          v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v1833 + 1);
                                                                                                                                                          llvm::MetadataTracking::track((uint64_t)&v2107, v1837, 2);
                                                                                                                                                          v1838 = *v1835;
                                                                                                                                                          goto LABEL_3472;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1838 = *v1835;
                                                                                                                                                        if (!*v1835 && (v1614[55] & 0x20) == 0)
                                                                                                                                                          goto LABEL_3469;
                                                                                                                                                        if (!v1836)
                                                                                                                                                        {
                                                                                                                                                          v2107 = 0;
LABEL_3472:
                                                                                                                                                          if (v1838)
                                                                                                                                                            llvm::MetadataTracking::untrack((uint64_t)(v1614 + 80), v1838);
                                                                                                                                                          v1839 = (unsigned __int8 *)v2107;
                                                                                                                                                          *v1835 = (unsigned __int8 *)v2107;
                                                                                                                                                          if (v1839)
                                                                                                                                                            llvm::MetadataTracking::retrack((uint64_t)&v2107, v1839, (uint64_t)(v1614 + 80));
                                                                                                                                                          goto LABEL_3469;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      llvm::Value::setMetadata((llvm::Value *)Select, *(_DWORD *)v1833, (llvm::MDNode *)v1837);
LABEL_3469:
                                                                                                                                                      v1833 += 16;
                                                                                                                                                      if (v1833 == v1834)
                                                                                                                                                        goto LABEL_2898;
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  v1549 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                  v586 = *v1549;
                                                                                                                                                  v1550 = v1549[4];
                                                                                                                                                  v1551 = v1549[8];
                                                                                                                                                  v1552 = (llvm::ConstantInt ***)v1549[12];
                                                                                                                                                  DWORD2(v2132) = 8;
                                                                                                                                                  *(_QWORD *)&v2132 = 1;
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  v1553 = llvm::ConstantInt::get(*v1552, (llvm::Type *)&v2132, (const llvm::APInt *)v5);
                                                                                                                                                  v1555 = (llvm::Constant **)sub_1C4D89BCC((uint64_t)&v2116, v1552, (uint64_t)v1553, (uint64_t)&__src);
                                                                                                                                                  if (DWORD2(v2132) >= 0x41 && (_QWORD)v2132)
                                                                                                                                                    MEMORY[0x1CAA32F9C](v2132, 0x1000C8000313F17);
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  v1556 = llvm::Constant::getNullValue(*v1555, v1554);
                                                                                                                                                  v1558 = sub_1C4774B48((uint64_t)&v2116, 33, (uint64_t)v1555, (uint64_t)v1556, (uint64_t)&__src);
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  v1559 = *(llvm::ConstantInt **)(*v2121 + 1984);
                                                                                                                                                  DWORD2(v2132) = *(_DWORD *)(*v2121 + 1992) >> 8;
                                                                                                                                                  if (DWORD2(v2132) > 0x40)
                                                                                                                                                    llvm::APInt::initSlowCase((llvm::APInt *)&v2132, 0, 0);
                                                                                                                                                  else
                                                                                                                                                    *(_QWORD *)&v2132 = 0;
                                                                                                                                                  v1560 = llvm::ConstantInt::get(v1559, (llvm::LLVMContext *)&v2132, v1557);
                                                                                                                                                  if (DWORD2(v2132) >= 0x41 && (_QWORD)v2132)
                                                                                                                                                    MEMORY[0x1CAA32F9C](v2132, 0x1000C8000313F17);
                                                                                                                                                  v1562 = (uint64_t *)sub_1C4772EE0((uint64_t *)&v2116, v1550, (uint64_t)v1560, (uint64_t)&__src);
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  v1563 = *(llvm::ConstantInt **)(*v2121 + 1984);
                                                                                                                                                  DWORD2(v2132) = *(_DWORD *)(*v2121 + 1992) >> 8;
                                                                                                                                                  if (DWORD2(v2132) > 0x40)
                                                                                                                                                    llvm::APInt::initSlowCase((llvm::APInt *)&v2132, 0, 0);
                                                                                                                                                  else
                                                                                                                                                    *(_QWORD *)&v2132 = 0;
                                                                                                                                                  v1564 = llvm::ConstantInt::get(v1563, (llvm::LLVMContext *)&v2132, v1561);
                                                                                                                                                  if (DWORD2(v2132) >= 0x41 && (_QWORD)v2132)
                                                                                                                                                    MEMORY[0x1CAA32F9C](v2132, 0x1000C8000313F17);
                                                                                                                                                  v1565 = sub_1C4772EE0((uint64_t *)&v2116, v1551, (uint64_t)v1564, (uint64_t)&__src);
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  v627 = (llvm::ValueAsMetadata **)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v2116, v1558, v1562, (uint64_t)v1565, (uint64_t)&__src, 0);
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  goto LABEL_927;
                                                                                                                                                }
                                                                                                                                                if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x6C6C73702E6B7361)
                                                                                                                                                {
                                                                                                                                                  if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x6C7273702E6B7361)
                                                                                                                                                  {
                                                                                                                                                    if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x617273702E6B7361)
                                                                                                                                                      goto LABEL_2514;
                                                                                                                                                    v1419 = v80[16];
                                                                                                                                                    if (v1419 == 105)
                                                                                                                                                    {
                                                                                                                                                      v1420 = v80[18];
                                                                                                                                                      if (v80[17] == 46)
                                                                                                                                                      {
                                                                                                                                                        v1421 = 0;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1421 = 0;
                                                                                                                                                        v1739 = 19;
                                                                                                                                                        if (v1420 != 46)
                                                                                                                                                          v1739 = 20;
                                                                                                                                                        v1420 = v80[v1739];
                                                                                                                                                      }
                                                                                                                                                      v1701 = 1;
                                                                                                                                                      goto LABEL_3539;
                                                                                                                                                    }
                                                                                                                                                    v1701 = v155 >= 0x13 && v80[18] == 105;
                                                                                                                                                    v1421 = v1419 == 118;
                                                                                                                                                    v1740 = v80[17];
                                                                                                                                                    if (v1419 == 46)
                                                                                                                                                    {
                                                                                                                                                      v1420 = v80[17];
                                                                                                                                                      if (v155 < 4)
                                                                                                                                                        goto LABEL_3542;
LABEL_3539:
                                                                                                                                                      if (*(_DWORD *)&v80[v155 - 4] == 942813486)
                                                                                                                                                      {
                                                                                                                                                        if (v1420 == 113)
                                                                                                                                                        {
                                                                                                                                                          if (v1421)
                                                                                                                                                            v1810 = 11719;
                                                                                                                                                          else
                                                                                                                                                            v1810 = 11709;
                                                                                                                                                          v1811 = !v1701;
                                                                                                                                                          v1812 = 11714;
                                                                                                                                                          goto LABEL_3609;
                                                                                                                                                        }
                                                                                                                                                        v1813 = !v1701;
                                                                                                                                                        if (v1420 == 100)
                                                                                                                                                        {
                                                                                                                                                          v1814 = 12265;
                                                                                                                                                          v1815 = 12267;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1814 = 12266;
                                                                                                                                                          v1815 = 12268;
                                                                                                                                                        }
                                                                                                                                                        goto LABEL_3613;
                                                                                                                                                      }
                                                                                                                                                      if (*(_DWORD *)&v80[v155 - 4] == 909455918)
                                                                                                                                                      {
                                                                                                                                                        if (v1420 == 113)
                                                                                                                                                        {
                                                                                                                                                          if (v1421)
                                                                                                                                                            v1810 = 11720;
                                                                                                                                                          else
                                                                                                                                                            v1810 = 11710;
                                                                                                                                                          v1811 = !v1701;
                                                                                                                                                          v1812 = 11715;
                                                                                                                                                          goto LABEL_3609;
                                                                                                                                                        }
                                                                                                                                                        v1813 = !v1701;
                                                                                                                                                        if (v1420 == 100)
                                                                                                                                                        {
                                                                                                                                                          v1814 = 11269;
                                                                                                                                                          v1815 = 11271;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1814 = 11270;
                                                                                                                                                          v1815 = 11272;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
LABEL_3542:
                                                                                                                                                        if (v1420 == 113)
                                                                                                                                                        {
                                                                                                                                                          if (v1421)
                                                                                                                                                            v1810 = 11721;
                                                                                                                                                          else
                                                                                                                                                            v1810 = 11711;
                                                                                                                                                          v1811 = !v1701;
                                                                                                                                                          v1812 = 11716;
                                                                                                                                                          goto LABEL_3609;
                                                                                                                                                        }
                                                                                                                                                        if (v1420 == 100)
                                                                                                                                                        {
                                                                                                                                                          if (v1421)
                                                                                                                                                            v1810 = 11718;
                                                                                                                                                          else
                                                                                                                                                            v1810 = 11708;
                                                                                                                                                          v1811 = !v1701;
                                                                                                                                                          v1812 = 11713;
LABEL_3609:
                                                                                                                                                          if (v1811)
                                                                                                                                                            v1809 = v1810;
                                                                                                                                                          else
                                                                                                                                                            v1809 = v1812;
                                                                                                                                                          goto LABEL_3616;
                                                                                                                                                        }
                                                                                                                                                        v1813 = !v1701;
                                                                                                                                                        v1814 = 11712;
                                                                                                                                                        v1815 = 11717;
                                                                                                                                                      }
LABEL_3613:
                                                                                                                                                      if (v1813)
                                                                                                                                                        v1809 = v1814;
                                                                                                                                                      else
                                                                                                                                                        v1809 = v1815;
                                                                                                                                                      goto LABEL_3616;
                                                                                                                                                    }
                                                                                                                                                    v1420 = v80[18];
                                                                                                                                                    if (v1740 == 46)
                                                                                                                                                      goto LABEL_3539;
                                                                                                                                                    if (v1420 == 46)
                                                                                                                                                      v1420 = v80[19];
                                                                                                                                                    else
                                                                                                                                                      v1420 = v80[20];
                                                                                                                                                    if (v1419 != 118)
                                                                                                                                                    {
                                                                                                                                                      v1421 = 0;
                                                                                                                                                      goto LABEL_3539;
                                                                                                                                                    }
                                                                                                                                                    if (v1420 == 104)
                                                                                                                                                    {
                                                                                                                                                      if (v1740 == 49)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11723;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      if (v1740 == 56)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11722;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else if (v1420 == 115)
                                                                                                                                                    {
                                                                                                                                                      if (v1740 == 52)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11273;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      if (v1740 == 56)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11274;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    v1809 = 11724;
                                                                                                                                                    goto LABEL_3616;
                                                                                                                                                  }
                                                                                                                                                  v1546 = v80[16];
                                                                                                                                                  if (v1546 == 105)
                                                                                                                                                  {
                                                                                                                                                    v1547 = v80[18];
                                                                                                                                                    if (v80[17] == 46)
                                                                                                                                                    {
                                                                                                                                                      v1548 = 0;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      v1548 = 0;
                                                                                                                                                      v1730 = 19;
                                                                                                                                                      if (v1547 != 46)
                                                                                                                                                        v1730 = 20;
                                                                                                                                                      v1547 = v80[v1730];
                                                                                                                                                    }
                                                                                                                                                    v1652 = 1;
                                                                                                                                                    goto LABEL_3432;
                                                                                                                                                  }
                                                                                                                                                  v1652 = v155 >= 0x13 && v80[18] == 105;
                                                                                                                                                  v1548 = v1546 == 118;
                                                                                                                                                  v1731 = v80[17];
                                                                                                                                                  if (v1546 == 46)
                                                                                                                                                  {
                                                                                                                                                    v1547 = v80[17];
                                                                                                                                                    if (v155 < 4)
                                                                                                                                                      goto LABEL_3435;
LABEL_3432:
                                                                                                                                                    if (*(_DWORD *)&v80[v155 - 4] == 942813486)
                                                                                                                                                    {
                                                                                                                                                      if (v1547 == 113)
                                                                                                                                                      {
                                                                                                                                                        v1813 = !v1652;
                                                                                                                                                        v1814 = 12270;
                                                                                                                                                        v1815 = 12273;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1813 = !v1652;
                                                                                                                                                        if (v1547 == 100)
                                                                                                                                                        {
                                                                                                                                                          v1814 = 12269;
                                                                                                                                                          v1815 = 12272;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1814 = 12271;
                                                                                                                                                          v1815 = 12274;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      goto LABEL_3613;
                                                                                                                                                    }
                                                                                                                                                    if (*(_DWORD *)&v80[v155 - 4] == 909455918)
                                                                                                                                                    {
                                                                                                                                                      if (v1547 == 113)
                                                                                                                                                      {
                                                                                                                                                        v1813 = !v1652;
                                                                                                                                                        v1814 = 11276;
                                                                                                                                                        v1815 = 11279;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        v1813 = !v1652;
                                                                                                                                                        if (v1547 == 100)
                                                                                                                                                        {
                                                                                                                                                          v1814 = 11275;
                                                                                                                                                          v1815 = 11278;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          v1814 = 11277;
                                                                                                                                                          v1815 = 11280;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
LABEL_3435:
                                                                                                                                                      if (v1547 == 113)
                                                                                                                                                      {
                                                                                                                                                        if (v1548)
                                                                                                                                                          v1810 = 11732;
                                                                                                                                                        else
                                                                                                                                                          v1810 = 11726;
                                                                                                                                                        v1811 = !v1652;
                                                                                                                                                        v1812 = 11729;
                                                                                                                                                        goto LABEL_3609;
                                                                                                                                                      }
                                                                                                                                                      if (v1547 == 100)
                                                                                                                                                      {
                                                                                                                                                        if (v1548)
                                                                                                                                                          v1810 = 11731;
                                                                                                                                                        else
                                                                                                                                                          v1810 = 11725;
                                                                                                                                                        v1811 = !v1652;
                                                                                                                                                        v1812 = 11728;
                                                                                                                                                        goto LABEL_3609;
                                                                                                                                                      }
                                                                                                                                                      v1813 = !v1652;
                                                                                                                                                      v1814 = 11727;
                                                                                                                                                      v1815 = 11730;
                                                                                                                                                    }
                                                                                                                                                    goto LABEL_3613;
                                                                                                                                                  }
                                                                                                                                                  v1547 = v80[18];
                                                                                                                                                  if (v1731 == 46)
                                                                                                                                                    goto LABEL_3432;
                                                                                                                                                  if (v1547 == 46)
                                                                                                                                                    v1547 = v80[19];
                                                                                                                                                  else
                                                                                                                                                    v1547 = v80[20];
                                                                                                                                                  if (v1546 != 118)
                                                                                                                                                  {
                                                                                                                                                    v1548 = 0;
                                                                                                                                                    goto LABEL_3432;
                                                                                                                                                  }
                                                                                                                                                  switch(v1547)
                                                                                                                                                  {
                                                                                                                                                    case 's':
                                                                                                                                                      if (v1731 == 52)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11281;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      if (v1731 == 56)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11282;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      break;
                                                                                                                                                    case 'h':
                                                                                                                                                      if (v1731 == 49)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11734;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      if (v1731 == 56)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11733;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      break;
                                                                                                                                                    case 'd':
                                                                                                                                                      if (v1731 == 50)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11283;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      if (v1731 == 52)
                                                                                                                                                      {
                                                                                                                                                        v1809 = 11284;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      break;
                                                                                                                                                  }
                                                                                                                                                  v1809 = 11735;
                                                                                                                                                  goto LABEL_3616;
                                                                                                                                                }
                                                                                                                                                v1522 = v80[16];
                                                                                                                                                if (v1522 == 105)
                                                                                                                                                {
                                                                                                                                                  v1523 = v80[18];
                                                                                                                                                  if (v80[17] == 46)
                                                                                                                                                  {
                                                                                                                                                    v1524 = 0;
                                                                                                                                                  }
                                                                                                                                                  else
                                                                                                                                                  {
                                                                                                                                                    v1524 = 0;
                                                                                                                                                    v1689 = 19;
                                                                                                                                                    if (v1523 != 46)
                                                                                                                                                      v1689 = 20;
                                                                                                                                                    v1523 = v80[v1689];
                                                                                                                                                  }
                                                                                                                                                  v1598 = 1;
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                  v1598 = v155 >= 0x13 && v80[18] == 105;
                                                                                                                                                  v1524 = v1522 == 118;
                                                                                                                                                  v1690 = v80[17];
                                                                                                                                                  if (v1522 == 46)
                                                                                                                                                  {
                                                                                                                                                    v1523 = v80[17];
                                                                                                                                                  }
                                                                                                                                                  else
                                                                                                                                                  {
                                                                                                                                                    v1523 = v80[18];
                                                                                                                                                    if (v1690 != 46)
                                                                                                                                                    {
                                                                                                                                                      if (v1523 == 46)
                                                                                                                                                        v1523 = v80[19];
                                                                                                                                                      else
                                                                                                                                                        v1523 = v80[20];
                                                                                                                                                      if (v1522 == 118)
                                                                                                                                                      {
                                                                                                                                                        switch(v1523)
                                                                                                                                                        {
                                                                                                                                                          case 's':
                                                                                                                                                            if (v1690 == 52)
                                                                                                                                                            {
                                                                                                                                                              v1809 = 11265;
                                                                                                                                                              goto LABEL_3616;
                                                                                                                                                            }
                                                                                                                                                            if (v1690 == 56)
                                                                                                                                                            {
                                                                                                                                                              v1809 = 11266;
                                                                                                                                                              goto LABEL_3616;
                                                                                                                                                            }
                                                                                                                                                            break;
                                                                                                                                                          case 'h':
                                                                                                                                                            if (v1690 == 49)
                                                                                                                                                            {
                                                                                                                                                              v1809 = 11706;
                                                                                                                                                              goto LABEL_3616;
                                                                                                                                                            }
                                                                                                                                                            if (v1690 == 56)
                                                                                                                                                            {
                                                                                                                                                              v1809 = 11705;
                                                                                                                                                              goto LABEL_3616;
                                                                                                                                                            }
                                                                                                                                                            break;
                                                                                                                                                          case 'd':
                                                                                                                                                            if (v1690 == 50)
                                                                                                                                                            {
                                                                                                                                                              v1809 = 11267;
                                                                                                                                                              goto LABEL_3616;
                                                                                                                                                            }
                                                                                                                                                            if (v1690 == 52)
                                                                                                                                                            {
                                                                                                                                                              v1809 = 11268;
LABEL_3616:
                                                                                                                                                              VectorSplat = (uint64_t)sub_1C534666C((uint64_t *)&v2116, (uint64_t)v2106, v1809);
                                                                                                                                                              goto LABEL_2998;
                                                                                                                                                            }
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                        v1809 = 11707;
                                                                                                                                                        goto LABEL_3616;
                                                                                                                                                      }
                                                                                                                                                      v1524 = 0;
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                if (v155 < 4)
                                                                                                                                                  goto LABEL_3318;
                                                                                                                                                if (*(_DWORD *)&v80[v155 - 4] == 942813486)
                                                                                                                                                {
                                                                                                                                                  if (v1523 == 113)
                                                                                                                                                  {
                                                                                                                                                    v1813 = !v1598;
                                                                                                                                                    v1814 = 12260;
                                                                                                                                                    v1815 = 12263;
                                                                                                                                                  }
                                                                                                                                                  else
                                                                                                                                                  {
                                                                                                                                                    v1813 = !v1598;
                                                                                                                                                    if (v1523 == 100)
                                                                                                                                                    {
                                                                                                                                                      v1814 = 12259;
                                                                                                                                                      v1815 = 12262;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      v1814 = 12261;
                                                                                                                                                      v1815 = 12264;
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  goto LABEL_3613;
                                                                                                                                                }
                                                                                                                                                if (*(_DWORD *)&v80[v155 - 4] == 909455918)
                                                                                                                                                {
                                                                                                                                                  if (v1523 == 113)
                                                                                                                                                  {
                                                                                                                                                    v1813 = !v1598;
                                                                                                                                                    v1814 = 11260;
                                                                                                                                                    v1815 = 11263;
                                                                                                                                                  }
                                                                                                                                                  else
                                                                                                                                                  {
                                                                                                                                                    v1813 = !v1598;
                                                                                                                                                    if (v1523 == 100)
                                                                                                                                                    {
                                                                                                                                                      v1814 = 11259;
                                                                                                                                                      v1815 = 11262;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      v1814 = 11261;
                                                                                                                                                      v1815 = 11264;
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
LABEL_3318:
                                                                                                                                                  if (v1523 == 113)
                                                                                                                                                  {
                                                                                                                                                    if (v1524)
                                                                                                                                                      v1810 = 11704;
                                                                                                                                                    else
                                                                                                                                                      v1810 = 11698;
                                                                                                                                                    v1811 = !v1598;
                                                                                                                                                    v1812 = 11701;
                                                                                                                                                    goto LABEL_3609;
                                                                                                                                                  }
                                                                                                                                                  if (v1523 == 100)
                                                                                                                                                  {
                                                                                                                                                    if (v1524)
                                                                                                                                                      v1810 = 11703;
                                                                                                                                                    else
                                                                                                                                                      v1810 = 11697;
                                                                                                                                                    v1811 = !v1598;
                                                                                                                                                    v1812 = 11700;
                                                                                                                                                    goto LABEL_3609;
                                                                                                                                                  }
                                                                                                                                                  v1813 = !v1598;
                                                                                                                                                  v1814 = 11699;
                                                                                                                                                  v1815 = 11702;
                                                                                                                                                }
                                                                                                                                                goto LABEL_3613;
                                                                                                                                              }
                                                                                                                                              v1478 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                                                                                                              v2107 = *(llvm::ValueAsMetadata ***)v2106;
                                                                                                                                              v1479 = llvm::Intrinsic::getDeclaration(v1478, 52, (uint64_t *)&v2107, 1);
                                                                                                                                              v1481 = v1479;
                                                                                                                                              if (v1479)
                                                                                                                                                v1482 = *(uint64_t ***)(v1479 + 24);
                                                                                                                                              else
                                                                                                                                                v1482 = 0;
                                                                                                                                              *(_QWORD *)&v2132 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                              v1599 = *(llvm::ConstantInt **)(*v2121 + 1888);
                                                                                                                                              LODWORD(v2112) = *(_DWORD *)(*v2121 + 1896) >> 8;
                                                                                                                                              if (v2112 > 0x40)
                                                                                                                                                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                                                                                                                                              else
                                                                                                                                                __src = 0;
                                                                                                                                              v1600 = llvm::ConstantInt::get(v1599, (llvm::LLVMContext *)&__src, v1480);
                                                                                                                                              if (v2112 >= 0x41 && __src)
                                                                                                                                                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                                                                                                                                              *((_QWORD *)&v2132 + 1) = v1600;
                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                              v873 = (uint64_t *)&v2132;
                                                                                                                                              v829 = v1482;
                                                                                                                                              v828 = v1481;
                                                                                                                                              goto LABEL_1492;
                                                                                                                                            }
                                                                                                                                            if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x2E6464612E6B7361 && v80[16] == 112)
                                                                                                                                            {
                                                                                                                                              if (v155 >= 4 && *(_DWORD *)&v80[v155 - 4] == 842085678)
                                                                                                                                              {
                                                                                                                                                v1621 = v80[17] == 115;
                                                                                                                                                v1622 = 11285;
                                                                                                                                                goto LABEL_3123;
                                                                                                                                              }
                                                                                                                                              v1435 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                              v1436 = *(uint64_t **)v1435;
                                                                                                                                              v1437 = *((_QWORD *)v1435 + 4);
                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                              v1415 = sub_1C534554C((uint64_t)&v2116, v1436, v1437, (uint64_t)&__src, 0);
                                                                                                                                            }
                                                                                                                                            else if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x2E7669642E6B7361 && v80[16] == 112)
                                                                                                                                            {
                                                                                                                                              if (v155 >= 4 && *(_DWORD *)&v80[v155 - 4] == 842085678)
                                                                                                                                              {
                                                                                                                                                v1621 = v80[17] == 115;
                                                                                                                                                v1622 = 11316;
                                                                                                                                                goto LABEL_3123;
                                                                                                                                              }
                                                                                                                                              v1468 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                              v1469 = *(uint64_t **)v1468;
                                                                                                                                              v1470 = *((_QWORD *)v1468 + 4);
                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                              v1415 = sub_1C47721F8((uint64_t)&v2116, v1469, v1470, (uint64_t)&__src, 0);
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                              if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x2E6C756D2E6B7361 || v80[16] != 112)
                                                                                                                                              {
                                                                                                                                                if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x2E6275732E6B7361 || v80[16] != 112)
                                                                                                                                                {
                                                                                                                                                  if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x2E78616D2E6B7361 || v80[16] != 112)
                                                                                                                                                  {
                                                                                                                                                    v1365 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x2E6E696D2E6B7361;
                                                                                                                                                    if (!v1365 || v80[16] != 112)
                                                                                                                                                      goto LABEL_2505;
                                                                                                                                                  }
                                                                                                                                                  v1367 = 18;
                                                                                                                                                  if (v155 < 0x12)
                                                                                                                                                    v1367 = v155;
                                                                                                                                                  if (v155 - v1367 != 4 || *(_DWORD *)&v80[v1367] != 842085678)
                                                                                                                                                    goto LABEL_2505;
                                                                                                                                                  v1368 = dword_1C85FCA14[2 * (v80[13] == 105) + (v80[17] == 100)];
                                                                                                                                                  goto LABEL_3126;
                                                                                                                                                }
                                                                                                                                                if (v155 < 4 || *(_DWORD *)&v80[v155 - 4] != 842085678)
                                                                                                                                                {
                                                                                                                                                  v1590 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                                  v1591 = *(uint64_t **)v1590;
                                                                                                                                                  v1592 = *((_QWORD *)v1590 + 4);
                                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                                  v1415 = sub_1C477265C((uint64_t)&v2116, v1591, v1592, (uint64_t)&__src, 0);
                                                                                                                                                  goto LABEL_2736;
                                                                                                                                                }
                                                                                                                                                v1621 = v80[17] == 115;
                                                                                                                                                v1622 = 11797;
LABEL_3123:
                                                                                                                                                if (v1621)
                                                                                                                                                  v1368 = v1622 + 1;
                                                                                                                                                else
                                                                                                                                                  v1368 = v1622;
LABEL_3126:
                                                                                                                                                v1736 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), v1368, 0, 0);
                                                                                                                                                if (v1736)
                                                                                                                                                  v1737 = *(uint64_t ***)(v1736 + 24);
                                                                                                                                                else
                                                                                                                                                  v1737 = 0;
                                                                                                                                                v1738 = (_QWORD *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                                *(_QWORD *)&v2132 = *v1738;
                                                                                                                                                *((_QWORD *)&v2132 + 1) = v1738[4];
                                                                                                                                                *(_QWORD *)&v2133 = v1738[16];
                                                                                                                                                LOWORD(v2115) = 257;
                                                                                                                                                v1415 = sub_1C4774778((uint64_t *)&v2116, v1737, v1736, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                                                                                                                goto LABEL_2736;
                                                                                                                                              }
                                                                                                                                              if (v155 >= 4 && *(_DWORD *)&v80[v155 - 4] == 842085678)
                                                                                                                                              {
                                                                                                                                                v1621 = v80[17] == 115;
                                                                                                                                                v1622 = 11667;
                                                                                                                                                goto LABEL_3123;
                                                                                                                                              }
                                                                                                                                              v1536 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                              v1537 = *(uint64_t **)v1536;
                                                                                                                                              v1538 = *((_QWORD *)v1536 + 4);
                                                                                                                                              LOWORD(v2115) = 257;
                                                                                                                                              v1415 = sub_1C4772428((uint64_t)&v2116, v1537, v1538, (uint64_t)&__src, 0);
                                                                                                                                            }
                                                                                                                                          }
LABEL_2736:
                                                                                                                                          v177 = (uint64_t *)v1415;
                                                                                                                                          v1530 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                          v179 = (unsigned __int8 *)*((_QWORD *)v1530 + 12);
                                                                                                                                          v180 = (_QWORD *)*((_QWORD *)v1530 + 8);
                                                                                                                                          goto LABEL_247;
                                                                                                                                        }
                                                                                                                                        v1380 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                        v1381 = *(_QWORD **)v1380;
                                                                                                                                        v1382 = *((_QWORD *)v1380 + 4);
                                                                                                                                        v2134 = 257;
                                                                                                                                        Select = (uint64_t *)(*((uint64_t (**)(void **, _QWORD *, uint64_t, _QWORD, _QWORD))*v2122 + 2))(v2122, v1381, v1382, 0, 0);
                                                                                                                                        if (!Select)
                                                                                                                                        {
                                                                                                                                          LOWORD(v2115) = 257;
                                                                                                                                          v1452 = (char *)operator new(0x80uLL);
                                                                                                                                          v1453 = v1452;
                                                                                                                                          *((_QWORD *)v1452 + 4) = 0;
                                                                                                                                          v1454 = v1452 + 32;
                                                                                                                                          *((_QWORD *)v1452 + 5) = 0;
                                                                                                                                          *((_QWORD *)v1452 + 6) = 0;
                                                                                                                                          *((_QWORD *)v1452 + 8) = *v1381;
                                                                                                                                          Select = (uint64_t *)(v1452 + 64);
                                                                                                                                          *((_QWORD *)v1452 + 3) = v1452 + 64;
                                                                                                                                          *((_QWORD *)v1452 + 7) = v1452 + 64;
                                                                                                                                          *((_QWORD *)v1452 + 9) = 0;
                                                                                                                                          v1452[80] = 41;
                                                                                                                                          v1452[81] = 0;
                                                                                                                                          *((_WORD *)v1452 + 41) = 0;
                                                                                                                                          *((_DWORD *)v1452 + 21) = 2;
                                                                                                                                          *(_OWORD *)(v1452 + 88) = 0u;
                                                                                                                                          *(_OWORD *)(v1452 + 104) = 0u;
                                                                                                                                          *((_DWORD *)v1452 + 30) = 0;
                                                                                                                                          *(_QWORD *)v1452 = v1381;
                                                                                                                                          v1457 = v1381[1];
                                                                                                                                          v1456 = v1381 + 1;
                                                                                                                                          v1455 = v1457;
                                                                                                                                          *((_QWORD *)v1452 + 1) = v1457;
                                                                                                                                          if (v1457)
                                                                                                                                            *(_QWORD *)(v1455 + 16) = v1452 + 8;
                                                                                                                                          *((_QWORD *)v1452 + 2) = v1456;
                                                                                                                                          *v1456 = v1452;
                                                                                                                                          if (*((_QWORD *)v1452 + 4))
                                                                                                                                          {
                                                                                                                                            **((_QWORD **)v1452 + 6) = *((_QWORD *)v1452 + 5);
                                                                                                                                            v2088 = *((_QWORD *)v1452 + 5);
                                                                                                                                            if (v2088)
                                                                                                                                              *(_QWORD *)(v2088 + 16) = *((_QWORD *)v1452 + 6);
                                                                                                                                          }
                                                                                                                                          *v1454 = v1382;
                                                                                                                                          if (v1382)
                                                                                                                                          {
                                                                                                                                            v1460 = *(_QWORD *)(v1382 + 8);
                                                                                                                                            v1459 = (_QWORD *)(v1382 + 8);
                                                                                                                                            v1458 = v1460;
                                                                                                                                            *((_QWORD *)v1452 + 5) = v1460;
                                                                                                                                            if (v1460)
                                                                                                                                              *(_QWORD *)(v1458 + 16) = v1452 + 40;
                                                                                                                                            *((_QWORD *)v1452 + 6) = v1459;
                                                                                                                                            *v1459 = v1454;
                                                                                                                                          }
                                                                                                                                          llvm::Value::setName((uint64_t ***)v1452 + 8, (uint64_t)&__src);
                                                                                                                                          (*((void (**)(void **, uint64_t *, __int128 *, uint64_t, uint64_t))*v2123 + 2))(v2123, Select, &v2132, v2119, v2120);
                                                                                                                                          if ((_DWORD)v2117)
                                                                                                                                          {
                                                                                                                                            v1461 = (char *)v2116;
                                                                                                                                            v1462 = (char *)v2116 + 16 * v2117;
                                                                                                                                            v1463 = (unsigned __int8 **)(v1453 + 112);
                                                                                                                                            do
                                                                                                                                            {
                                                                                                                                              v1464 = *(_DWORD *)v1461;
                                                                                                                                              v1465 = (unsigned __int8 *)*((_QWORD *)v1461 + 1);
                                                                                                                                              if (v1465)
                                                                                                                                              {
                                                                                                                                                if (!v1464)
                                                                                                                                                {
                                                                                                                                                  v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v1461 + 1);
                                                                                                                                                  llvm::MetadataTracking::track((uint64_t)&v2107, v1465, 2);
                                                                                                                                                  v1466 = *v1463;
                                                                                                                                                  goto LABEL_2702;
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              else
                                                                                                                                              {
                                                                                                                                                v1466 = *v1463;
                                                                                                                                                if (!*v1463 && (v1453[87] & 0x20) == 0)
                                                                                                                                                  goto LABEL_2699;
                                                                                                                                                if (!v1464)
                                                                                                                                                {
                                                                                                                                                  v2107 = 0;
LABEL_2702:
                                                                                                                                                  if (v1466)
                                                                                                                                                    llvm::MetadataTracking::untrack((uint64_t)(v1453 + 112), v1466);
                                                                                                                                                  v1467 = (unsigned __int8 *)v2107;
                                                                                                                                                  *v1463 = (unsigned __int8 *)v2107;
                                                                                                                                                  if (v1467)
                                                                                                                                                    llvm::MetadataTracking::retrack((uint64_t)&v2107, v1467, (uint64_t)(v1453 + 112));
                                                                                                                                                  goto LABEL_2699;
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              llvm::Value::setMetadata((llvm::Value *)Select, *(_DWORD *)v1461, (llvm::MDNode *)v1465);
LABEL_2699:
                                                                                                                                              v1461 += 16;
                                                                                                                                            }
                                                                                                                                            while (v1461 != v1462);
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        v1383 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                                        v179 = (unsigned __int8 *)*((_QWORD *)v1383 + 12);
                                                                                                                                        v180 = (_QWORD *)*((_QWORD *)v1383 + 8);
LABEL_1237:
                                                                                                                                        v177 = Select;
                                                                                                                                        goto LABEL_247;
                                                                                                                                      }
                                                                                                                                      goto LABEL_2713;
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  v1444 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                  sub_1C6227E64(*(_QWORD *)v2106);
                                                                                                                                  v1472 = v1471;
                                                                                                                                  v1473 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                  v1474 = sub_1C4773E38((uint64_t *)&v2116, 49, v1473, v1471, (uint64_t)&__src);
                                                                                                                                  v1475 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                                                                  v2134 = 257;
                                                                                                                                  v1476 = sub_1C4773E38((uint64_t *)&v2116, 49, v1475, v1472, (uint64_t)&v2132);
                                                                                                                                  v2110 = 257;
                                                                                                                                  v1477 = (unsigned __int8 *)sub_1C4773594((uint64_t)&v2116, v1474, (uint64_t)v1476, (uint64_t)&v2107);
LABEL_2735:
                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                  v1415 = (uint64_t)sub_1C4773E38((uint64_t *)&v2116, 49, v1477, (uint64_t)v1444, (uint64_t)&__src);
                                                                                                                                  goto LABEL_2736;
                                                                                                                                }
                                                                                                                                goto LABEL_2452;
                                                                                                                              }
                                                                                                                              if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x646E61702E6B7361 || v80[16] != 46)
                                                                                                                              {
                                                                                                                                if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6E646E612E6B7361 && v80[16] == 46)
                                                                                                                                {
LABEL_2733:
                                                                                                                                  v1444 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                  sub_1C6227E64(*(_QWORD *)v2106);
                                                                                                                                  v1526 = v1525;
                                                                                                                                  v1527 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                  v1528 = sub_1C4773E38((uint64_t *)&v2116, 49, v1527, v1525, (uint64_t)&__src);
                                                                                                                                  v2134 = 257;
                                                                                                                                  v1448 = (_QWORD *)sub_1C506EAA0((uint64_t)&v2116, (uint64_t)v1528, (uint64_t)&v2132);
                                                                                                                                  v1529 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                                                                  LOWORD(v2115) = 257;
                                                                                                                                  v1450 = sub_1C4773E38((uint64_t *)&v2116, 49, v1529, v1526, (uint64_t)&__src);
                                                                                                                                  v2134 = 257;
                                                                                                                                  v1451 = &v2132;
                                                                                                                                  goto LABEL_2734;
                                                                                                                                }
                                                                                                                                if (v1095)
                                                                                                                                {
                                                                                                                                  v1095 = 0;
                                                                                                                                  v1097 = 0;
                                                                                                                                  goto LABEL_2451;
                                                                                                                                }
LABEL_2452:
                                                                                                                                if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x646E61702E6B7361 || *((_WORD *)v80 + 8) != 11886)
                                                                                                                                {
                                                                                                                                  v1096 = 0;
                                                                                                                                  v1097 = 0;
                                                                                                                                  v1095 = v155 < 0x11;
                                                                                                                                  goto LABEL_2460;
                                                                                                                                }
                                                                                                                                goto LABEL_2733;
                                                                                                                              }
                                                                                                                            }
                                                                                                                            v1444 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                            sub_1C6227E64(*(_QWORD *)v2106);
                                                                                                                            v1446 = v1445;
                                                                                                                            v1447 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                            LOWORD(v2115) = 257;
                                                                                                                            v1448 = sub_1C4773E38((uint64_t *)&v2116, 49, v1447, v1445, (uint64_t)&__src);
                                                                                                                            v1449 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                                                            v2134 = 257;
                                                                                                                            v1450 = sub_1C4773E38((uint64_t *)&v2116, 49, v1449, v1446, (uint64_t)&v2132);
                                                                                                                            v2110 = 257;
                                                                                                                            v1451 = (__int128 *)&v2107;
LABEL_2734:
                                                                                                                            v1477 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v2116, v1448, (uint64_t)v1450, (uint64_t)v1451);
                                                                                                                            goto LABEL_2735;
                                                                                                                          }
                                                                                                                          goto LABEL_2294;
                                                                                                                        }
                                                                                                                        if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x756873702E6B7361 || *(_QWORD *)(v80 + 13) != 0x2E772E6866756873)
                                                                                                                        {
LABEL_2294:
                                                                                                                          if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x667568732E6B7361 && *((_WORD *)v80 + 8) == 28718)
                                                                                                                          {
                                                                                                                            v1254 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                            v1255 = v1254[8];
                                                                                                                            v1256 = (_QWORD *)(v1255 + 24);
                                                                                                                            if (*(_DWORD *)(v1255 + 32) >= 0x41u)
                                                                                                                              v1256 = (_QWORD *)*v1256;
                                                                                                                            v1257 = *v1254;
                                                                                                                            v1258 = v1254[4];
                                                                                                                            v1259 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                            v1260 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                            if ((*(_DWORD *)(*(_QWORD *)v2106 + 8) & 0xFE) == 0x12)
                                                                                                                              v1259 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1259 + 2);
                                                                                                                            v1261 = *(_DWORD *)v1256;
                                                                                                                            v1262 = llvm::Type::getPrimitiveSizeInBits(v1259);
                                                                                                                            __src = &v2113;
                                                                                                                            v2112 = 0x1000000000;
                                                                                                                            sub_1C4893E04((char *)&__src, v1260, 0);
                                                                                                                            if ((_DWORD)v1260)
                                                                                                                            {
                                                                                                                              v1263 = 0;
                                                                                                                              v1264 = 0x80 / v1262;
                                                                                                                              v1265 = (0x80 / v1262) >> 1;
                                                                                                                              v1266 = __src;
                                                                                                                              v1267 = ~(-1 << v1265);
                                                                                                                              v1268 = (int64x2_t)xmmword_1C64632D0;
                                                                                                                              v1269 = (uint64x2_t)vdupq_n_s64(v1260 - 1);
                                                                                                                              v1270 = vdupq_n_s64(2uLL);
                                                                                                                              do
                                                                                                                              {
                                                                                                                                v1271 = vmovn_s64((int64x2_t)vcgeq_u64(v1269, (uint64x2_t)v1268));
                                                                                                                                if ((v1271.i8[0] & 1) != 0)
                                                                                                                                {
                                                                                                                                  if (v1263 % v1264 >= v1265)
                                                                                                                                    v1272 = v1260;
                                                                                                                                  else
                                                                                                                                    v1272 = 0;
                                                                                                                                  v1266[v1263] = v1263 / v1264 * v1264 + ((v1261 >> ((v1265 * v1263) & 6)) & v1267) + v1272;
                                                                                                                                }
                                                                                                                                if ((v1271.i8[4] & 1) != 0)
                                                                                                                                {
                                                                                                                                  if (((int)v1263 + 1) % v1264 >= v1265)
                                                                                                                                    v1273 = v1260;
                                                                                                                                  else
                                                                                                                                    v1273 = 0;
                                                                                                                                  v1266[v1263 + 1] = ((int)v1263 + 1) / v1264 * v1264 + ((v1261 >> ((v1265 * (v1263 | 1)) & 7)) & v1267) + v1273;
                                                                                                                                }
                                                                                                                                v1263 += 2;
                                                                                                                                v1268 = vaddq_s64(v1268, v1270);
                                                                                                                              }
                                                                                                                              while (((v1260 + 1) & 0x1FFFFFFFELL) != v1263);
                                                                                                                            }
                                                                                                                            v2134 = 257;
                                                                                                                            v1274 = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v1257, v1258, __src, v2112, (uint64_t)&v2132);
                                                                                                                            v1275 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                            v1276 = (unsigned __int8 *)*((_QWORD *)v1275 + 16);
                                                                                                                            v1277 = *((_QWORD *)v1275 + 12);
LABEL_2653:
                                                                                                                            Select = (uint64_t *)sub_1C53451A0((uint64_t *)&v2116, v1276, v1274, v1277);
                                                                                                                            v816 = __src;
                                                                                                                            if (__src == &v2113)
                                                                                                                              goto LABEL_2999;
                                                                                                                            goto LABEL_1482;
                                                                                                                          }
                                                                                                                          if (v155 < 0x13)
                                                                                                                          {
LABEL_2302:
                                                                                                                            v1095 = 0;
                                                                                                                            goto LABEL_2303;
                                                                                                                          }
                                                                                                                          if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x64766F6D2E6B7361 || *(_QWORD *)(v80 + 11) != 0x70756464766F6D2ELL)
                                                                                                                          {
                                                                                                                            if (v155 < 0x14 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1292 = *((_QWORD *)v80 + 1) == 0x73766F6D2E6B7361) : (v1292 = 0), v1292 ? (v1293 = *((_DWORD *)v80 + 4) == 1886741608) : (v1293 = 0), !v1293 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1294 = *((_QWORD *)v80 + 1) == 0x73766F6D2E6B7361) : (v1294 = 0), v1294 ? (v1295 = *((unsigned int *)v80 + 4) == 1886741612) : (v1295 = 0), !v1295)))
                                                                                                                            {
                                                                                                                              v1297 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x706E75702E6B7361 && *(_QWORD *)(v80 + 11) == 0x6C6B63706E75702ELL;
                                                                                                                              if (v1297 || (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v1298 = *((_QWORD *)v80 + 1) == 0x63706E752E6B7361) : (v1298 = 0), v1298 ? (v1299 = *(_QWORD *)(v80 + 11) == 0x2E6C6B63706E752ELL) : (v1299 = 0), v1299))
                                                                                                                              {
                                                                                                                                v1399 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                v1305 = *v1399;
                                                                                                                                v1306 = v1399[4];
                                                                                                                                v1400 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                v1401 = *(int *)(*(_QWORD *)v2106 + 32);
                                                                                                                                v1402 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                                if ((*(_DWORD *)(*(_QWORD *)v2106 + 8) & 0xFE) == 0x12)
                                                                                                                                  v1400 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1400 + 2);
                                                                                                                                v1403 = llvm::Type::getPrimitiveSizeInBits(v1400);
                                                                                                                                __src = &v2113;
                                                                                                                                v2112 = 0x4000000000;
                                                                                                                                sub_1C4893E04((char *)&__src, v1401, 0);
                                                                                                                                v1311 = __src;
                                                                                                                                if ((_DWORD)v1402)
                                                                                                                                {
                                                                                                                                  v1404 = 0;
                                                                                                                                  v1405 = 0x80 / v1403;
                                                                                                                                  v1406 = (uint64x2_t)vdupq_n_s64(v1405 - 1);
                                                                                                                                  v1407 = vdupq_n_s64(2uLL);
                                                                                                                                  do
                                                                                                                                  {
                                                                                                                                    if (v1403 <= 0x80)
                                                                                                                                    {
                                                                                                                                      v1408 = 0;
                                                                                                                                      v1409 = (int64x2_t)xmmword_1C64632D0;
                                                                                                                                      do
                                                                                                                                      {
                                                                                                                                        v1410 = vmovn_s64((int64x2_t)vcgeq_u64(v1406, (uint64x2_t)v1409));
                                                                                                                                        if ((v1410.i8[0] & 1) != 0)
                                                                                                                                          v1311[v1408 + v1404] = v1404 + (v1408 >> 1);
                                                                                                                                        if ((v1410.i8[4] & 1) != 0)
                                                                                                                                          v1311[(v1408 | 1) + v1404] = v1404 + (v1408 >> 1) + v1401;
                                                                                                                                        v1408 += 2;
                                                                                                                                        v1409 = vaddq_s64(v1409, v1407);
                                                                                                                                      }
                                                                                                                                      while ((((_WORD)v1405 + 1) & 0x1FE) != v1408);
                                                                                                                                    }
                                                                                                                                    v1404 += v1405;
                                                                                                                                  }
                                                                                                                                  while (v1404 != v1402);
                                                                                                                                }
                                                                                                                              }
                                                                                                                              else
                                                                                                                              {
                                                                                                                                if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x706E75702E6B7361 || *(_QWORD *)(v80 + 11) != 0x686B63706E75702ELL)
                                                                                                                                {
                                                                                                                                  v1302 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x63706E752E6B7361;
                                                                                                                                  if (!v1302 || *(_QWORD *)(v80 + 11) != 0x2E686B63706E752ELL)
                                                                                                                                    goto LABEL_2302;
                                                                                                                                }
                                                                                                                                v1304 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                                v1305 = *v1304;
                                                                                                                                v1306 = v1304[4];
                                                                                                                                v1307 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                                v1308 = *(int *)(*(_QWORD *)v2106 + 32);
                                                                                                                                v1309 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                                if ((*(_DWORD *)(*(_QWORD *)v2106 + 8) & 0xFE) == 0x12)
                                                                                                                                  v1307 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1307 + 2);
                                                                                                                                v1310 = llvm::Type::getPrimitiveSizeInBits(v1307);
                                                                                                                                __src = &v2113;
                                                                                                                                v2112 = 0x4000000000;
                                                                                                                                sub_1C4893E04((char *)&__src, v1308, 0);
                                                                                                                                v1311 = __src;
                                                                                                                                if ((_DWORD)v1309)
                                                                                                                                {
                                                                                                                                  v1312 = 0;
                                                                                                                                  v1313 = 0x80 / v1310;
                                                                                                                                  v1314 = (uint64x2_t)vdupq_n_s64(v1313 - 1);
                                                                                                                                  v1315 = vdupq_n_s64(2uLL);
                                                                                                                                  do
                                                                                                                                  {
                                                                                                                                    if (v1310 <= 0x80)
                                                                                                                                    {
                                                                                                                                      v1316 = 0;
                                                                                                                                      v1317 = (v1313 >> 1) + v1312;
                                                                                                                                      v1318 = (int64x2_t)xmmword_1C64632D0;
                                                                                                                                      do
                                                                                                                                      {
                                                                                                                                        v1319 = vmovn_s64((int64x2_t)vcgeq_u64(v1314, (uint64x2_t)v1318));
                                                                                                                                        if ((v1319.i8[0] & 1) != 0)
                                                                                                                                          v1311[v1316 + v1312] = v1317 + (v1316 >> 1);
                                                                                                                                        if ((v1319.i8[4] & 1) != 0)
                                                                                                                                          v1311[(v1316 | 1) + v1312] = v1317 + (v1316 >> 1) + v1308;
                                                                                                                                        v1316 += 2;
                                                                                                                                        v1318 = vaddq_s64(v1318, v1315);
                                                                                                                                      }
                                                                                                                                      while ((((_WORD)v1313 + 1) & 0x1FE) != v1316);
                                                                                                                                    }
                                                                                                                                    v1312 += v1313;
                                                                                                                                  }
                                                                                                                                  while (v1312 != v1309);
                                                                                                                                }
                                                                                                                              }
                                                                                                                              v2134 = 257;
                                                                                                                              v1274 = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v1305, v1306, v1311, v2112, (uint64_t)&v2132);
                                                                                                                              v1411 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                              v1276 = (unsigned __int8 *)*((_QWORD *)v1411 + 12);
                                                                                                                              v1277 = *((_QWORD *)v1411 + 8);
                                                                                                                              goto LABEL_2653;
                                                                                                                            }
                                                                                                                          }
                                                                                                                          v1369 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                                          v1370 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                          if ((*(_DWORD *)(*(_QWORD *)v2106 + 8) & 0xFE) == 0x12)
                                                                                                                            v1369 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1369 + 2);
                                                                                                                          v1371 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                          v1372 = llvm::Type::getPrimitiveSizeInBits(v1369);
                                                                                                                          v1373 = v155 >= 0x15 && *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x73766F6D2E6B7361 && *(_QWORD *)(v80 + 13) == 0x2E7075646873766FLL;
                                                                                                                          __src = &v2113;
                                                                                                                          v2112 = 0x1000000000;
                                                                                                                          sub_1C4893E04((char *)&__src, v1370, 0);
                                                                                                                          v1393 = __src;
                                                                                                                          if ((_DWORD)v1370)
                                                                                                                          {
                                                                                                                            v1394 = 0;
                                                                                                                            do
                                                                                                                            {
                                                                                                                              if (v1372 <= 0x80)
                                                                                                                              {
                                                                                                                                v1395 = 0;
                                                                                                                                v1396 = 0x80 / v1372;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  v1397 = v1394 + v1395 + v1373;
                                                                                                                                  v1393[(v1394 + v1395)] = v1397;
                                                                                                                                  v1393[(v1394 + v1395 + 1)] = v1397;
                                                                                                                                  v1395 += 2;
                                                                                                                                  v1396 -= 2;
                                                                                                                                }
                                                                                                                                while (v1396);
                                                                                                                              }
                                                                                                                              v1394 += 0x80 / v1372;
                                                                                                                            }
                                                                                                                            while (v1394 != (_DWORD)v1370);
                                                                                                                          }
                                                                                                                          v2134 = 257;
                                                                                                                          v814 = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v1371, v1371, v1393, v2112, (uint64_t)&v2132);
                                                                                                                          v1398 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                                          v812 = (unsigned __int8 *)*((_QWORD *)v1398 + 8);
                                                                                                                          v813 = *((_QWORD *)v1398 + 4);
                                                                                                                          goto LABEL_1360;
                                                                                                                        }
                                                                                                                      }
                                                                                                                      v1232 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                                      v989 = *v1232;
                                                                                                                      v1233 = v1232[4];
                                                                                                                      v1234 = (_QWORD *)(v1233 + 24);
                                                                                                                      if (*(_DWORD *)(v1233 + 32) >= 0x41u)
                                                                                                                        v1234 = (_QWORD *)*v1234;
                                                                                                                      v1235 = *(_DWORD *)v1234;
                                                                                                                      v1236 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                                      __src = &v2113;
                                                                                                                      v2112 = 0x1000000000;
                                                                                                                      sub_1C4893E04((char *)&__src, v1236, 0);
                                                                                                                      v995 = __src;
                                                                                                                      if ((_DWORD)v1236)
                                                                                                                      {
                                                                                                                        v1237 = 0;
                                                                                                                        v1238.i64[0] = 0x300000003;
                                                                                                                        v1238.i64[1] = 0x300000003;
                                                                                                                        v1239 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v1235), (uint32x4_t)xmmword_1C85FCA40), v1238);
                                                                                                                        v1240 = (unsigned __int128 *)((char *)__src + 16);
                                                                                                                        do
                                                                                                                        {
                                                                                                                          v1241.i32[0] = v1237;
                                                                                                                          v1241.i32[1] = v1237 + 1;
                                                                                                                          *(v1240 - 1) = (unsigned __int128)vmovn_hight_s64(v1241, (int64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v1237), (int8x16_t)xmmword_1C850F410));
                                                                                                                          *v1240 = *(_OWORD *)&vorrq_s8(v1239, (int8x16_t)vdupq_n_s32(v1237)) | __PAIR128__(0x400000004, 0x400000004);
                                                                                                                          v1240 += 2;
                                                                                                                          v1237 += 8;
                                                                                                                        }
                                                                                                                        while ((_DWORD)v1236 != (_DWORD)v1237);
                                                                                                                      }
                                                                                                                    }
                                                                                                                    goto LABEL_1888;
                                                                                                                  }
                                                                                                                  if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x756873702E6B7361 || *((_DWORD *)v80 + 4) != 778317414)
                                                                                                                    goto LABEL_1988;
                                                                                                                }
                                                                                                              }
LABEL_2010:
                                                                                                              v1098 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                              v1099 = v1098[4];
                                                                                                              v1100 = (_QWORD *)(v1099 + 24);
                                                                                                              if (*(_DWORD *)(v1099 + 32) >= 0x41u)
                                                                                                                v1100 = (_QWORD *)*v1100;
                                                                                                              v1101 = *v1098;
                                                                                                              v1102 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                                              v1103 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                              if ((*(_DWORD *)(*(_QWORD *)v2106 + 8) & 0xFE) == 0x12)
                                                                                                                v1102 = (llvm::ConstantAggregateZero *)**((_QWORD **)v1102 + 2);
                                                                                                              v1104 = *(_DWORD *)v1100;
                                                                                                              v1105 = llvm::Type::getPrimitiveSizeInBits(v1102);
                                                                                                              __src = &v2113;
                                                                                                              v2112 = 0x800000000;
                                                                                                              sub_1C4893E04((char *)&__src, v1103, 0);
                                                                                                              v1106 = __src;
                                                                                                              if ((_DWORD)v1103)
                                                                                                              {
                                                                                                                v1107 = 0;
                                                                                                                v1108 = 0x40 / v1105;
                                                                                                                v1109 = -1 << (0x40 / v1105);
                                                                                                                v1110 = ~v1109;
                                                                                                                v1111 = (int64x2_t)xmmword_1C64632D0;
                                                                                                                v1112 = (uint64x2_t)vdupq_n_s64(v1103 - 1);
                                                                                                                v1113 = vdupq_n_s64(2uLL);
                                                                                                                do
                                                                                                                {
                                                                                                                  v1114 = vmovn_s64((int64x2_t)vcgeq_u64(v1112, (uint64x2_t)v1111));
                                                                                                                  if ((v1114.i8[0] & 1) != 0)
                                                                                                                    v1106[v1107] = (v1104 >> ((v1108 * v1107) & 6)) & v1110 | v1109 & v1107;
                                                                                                                  if ((v1114.i8[4] & 1) != 0)
                                                                                                                    v1106[v1107 + 1] = (v1104 >> ((v1108 * (v1107 | 1)) & 7)) & v1110 | v1109 & (v1107 + 1);
                                                                                                                  v1107 += 2;
                                                                                                                  v1111 = vaddq_s64(v1111, v1113);
                                                                                                                }
                                                                                                                while (((v1103 + 1) & 0x1FFFFFFFELL) != v1107);
                                                                                                              }
                                                                                                              v2134 = 257;
                                                                                                              Select = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v1101, v1101, v1106, v2112, (uint64_t)&v2132);
                                                                                                              v1115 = *((unsigned __int8 *)v2106 + 16);
                                                                                                              if (v1115 == 84)
                                                                                                              {
                                                                                                                v1116 = 0;
                                                                                                              }
                                                                                                              else if (v1115 == 39)
                                                                                                              {
                                                                                                                v1116 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v1116 = 2;
                                                                                                              }
                                                                                                              v1117 = 0;
                                                                                                              v1118 = *((_DWORD *)v2106 + 5);
                                                                                                              v1119 = -(uint64_t)(v1118 & 0x7FFFFFF);
                                                                                                              if (v1118 < 0)
                                                                                                              {
                                                                                                                v2082 = (char *)v2106 - 32 * (v1118 & 0x7FFFFFF);
                                                                                                                v2083 = *((_QWORD *)v2082 - 1);
                                                                                                                if ((v2083 & 0xFFFFFFFF0) != 0)
                                                                                                                  v1117 = *((_DWORD *)v2082 - 3) - *(_DWORD *)&v2082[-v2083];
                                                                                                                else
                                                                                                                  v1117 = 0;
                                                                                                              }
                                                                                                              v1120 = (char *)v2106 + 32 * v1119;
                                                                                                              if (((-32 * v1116 + 32 * -v1117 - 32 * v1119 - 32) & 0x1FFFFFFFE0) == 0x80)
                                                                                                              {
                                                                                                                v812 = (unsigned __int8 *)*((_QWORD *)v1120 + 12);
                                                                                                                v813 = *((_QWORD *)v1120 + 8);
                                                                                                                goto LABEL_1359;
                                                                                                              }
                                                                                                              goto LABEL_1362;
                                                                                                            }
                                                                                                            goto LABEL_1924;
                                                                                                          }
                                                                                                          if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x6D7265702E6B7361 || *((_DWORD *)v80 + 4) != 778462254)
                                                                                                          {
                                                                                                            v1005 = *(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x6D7265702E6B7361;
                                                                                                            if (!v1005 || *((_DWORD *)v80 + 4) != 778658862)
                                                                                                              goto LABEL_1852;
                                                                                                          }
                                                                                                          v1019 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                          v989 = *v1019;
                                                                                                          v1020 = v1019[4];
                                                                                                          v1021 = (_QWORD *)(v1020 + 24);
                                                                                                          if (*(_DWORD *)(v1020 + 32) >= 0x41u)
                                                                                                            v1021 = (_QWORD *)*v1021;
                                                                                                          v1022 = *(_DWORD *)v1021;
                                                                                                          v1023 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                          __src = &v2113;
                                                                                                          v2112 = 0x800000000;
                                                                                                          sub_1C4893E04((char *)&__src, v1023, 0);
                                                                                                          v995 = __src;
                                                                                                          if ((_DWORD)v1023)
                                                                                                          {
                                                                                                            v1024 = 0;
                                                                                                            v1025 = 0;
                                                                                                            v1026 = (int64x2_t)xmmword_1C64632D0;
                                                                                                            v1027 = (uint64x2_t)vdupq_n_s64(v1023 - 1);
                                                                                                            v1028 = vdupq_n_s64(2uLL);
                                                                                                            do
                                                                                                            {
                                                                                                              v1029 = vmovn_s64((int64x2_t)vcgeq_u64(v1027, (uint64x2_t)v1026));
                                                                                                              if ((v1029.i8[0] & 1) != 0)
                                                                                                                v995[v1025] = v1025 & 0xFFFFFFFC | (v1022 >> (v1024 & 4)) & 3;
                                                                                                              if ((v1029.i8[4] & 1) != 0)
                                                                                                                v995[v1025 + 1] = v1025 & 0xFFFFFFFC | (v1022 >> (v1024 & 4 | 2)) & 3;
                                                                                                              v1025 += 2;
                                                                                                              v1026 = vaddq_s64(v1026, v1028);
                                                                                                              v1024 += 4;
                                                                                                            }
                                                                                                            while (((v1023 + 1) & 0x1FFFFFFFELL) != v1025);
                                                                                                          }
                                                                                                        }
LABEL_1888:
                                                                                                        v2134 = 257;
                                                                                                        Select = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v989, v989, v995, v2112, (uint64_t)&v2132);
                                                                                                        v1030 = *((unsigned __int8 *)v2106 + 16);
                                                                                                        if (v1030 == 84)
                                                                                                        {
                                                                                                          v1031 = 0;
                                                                                                        }
                                                                                                        else if (v1030 == 39)
                                                                                                        {
                                                                                                          v1031 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          v1031 = 2;
                                                                                                        }
                                                                                                        v1032 = 0;
                                                                                                        v1033 = *((_DWORD *)v2106 + 5);
                                                                                                        v1034 = -(uint64_t)(v1033 & 0x7FFFFFF);
                                                                                                        if (v1033 < 0)
                                                                                                        {
                                                                                                          v2080 = (char *)v2106 - 32 * (v1033 & 0x7FFFFFF);
                                                                                                          v2081 = *((_QWORD *)v2080 - 1);
                                                                                                          if ((v2081 & 0xFFFFFFFF0) != 0)
                                                                                                            v1032 = *((_DWORD *)v2080 - 3) - *(_DWORD *)&v2080[-v2081];
                                                                                                          else
                                                                                                            v1032 = 0;
                                                                                                        }
                                                                                                        if (((-32 * v1031 + 32 * -v1032 - 32 * v1034 - 32) & 0x1FFFFFFFE0) == 0x80)
                                                                                                          Select = (uint64_t *)sub_1C53451A0((uint64_t *)&v2116, *((unsigned __int8 **)v2106 + 4 * v1034 + 12), Select, *((_QWORD *)v2106 + 4 * v1034 + 8));
                                                                                                        v816 = __src;
                                                                                                        if (__src == &v2113)
                                                                                                          goto LABEL_2999;
                                                                                                        goto LABEL_1482;
                                                                                                      }
LABEL_1958:
                                                                                                      v1061 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                      v1062 = *v1061;
                                                                                                      v1063 = v1061[4];
                                                                                                      v1064 = v1061[8];
                                                                                                      v1065 = (_QWORD *)(v1064 + 24);
                                                                                                      if (*(_DWORD *)(v1064 + 32) >= 0x41u)
                                                                                                        v1065 = (_QWORD *)*v1065;
                                                                                                      v1066 = *(_DWORD *)v1065;
                                                                                                      v1067 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                                      __src = &v2113;
                                                                                                      v2112 = 0x1000000000;
                                                                                                      sub_1C4893E04((char *)&__src, v1067, 0);
                                                                                                      v1068 = (char *)__src;
                                                                                                      if ((_DWORD)v1067)
                                                                                                      {
                                                                                                        v1069 = 0;
                                                                                                        v1070 = (int64x2_t)xmmword_1C64632D0;
                                                                                                        v1071 = (uint64x2_t)vdupq_n_s64(v1067 - 1);
                                                                                                        v1072 = vdupq_n_s64(2uLL);
                                                                                                        do
                                                                                                        {
                                                                                                          v1073 = vmovn_s64((int64x2_t)vcgeq_u64(v1071, (uint64x2_t)v1070));
                                                                                                          if ((v1073.i8[0] & 1) != 0)
                                                                                                            *(_DWORD *)&v1068[4 * v1069] = v1069 + (((int)(v1066 >> (v1069 & 6) << 31) >> 31) & v1067);
                                                                                                          if ((v1073.i8[4] & 1) != 0)
                                                                                                            *(_DWORD *)&v1068[4 * v1069 + 4] = v1069 + (((int)(v1066 >> ((v1069 + 1) & 7) << 31) >> 31) & v1067) + 1;
                                                                                                          v1069 += 2;
                                                                                                          v1070 = vaddq_s64(v1070, v1072);
                                                                                                        }
                                                                                                        while (((v1067 + 1) & 0x1FFFFFFFELL) != v1069);
                                                                                                      }
                                                                                                      v1074 = v2112;
                                                                                                      v2134 = 257;
                                                                                                      v1075 = v1062;
                                                                                                      v1076 = v1063;
                                                                                                      goto LABEL_1968;
                                                                                                    }
                                                                                                    goto LABEL_1953;
                                                                                                  }
                                                                                                  if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x627573702E6B7361 || *(_QWORD *)(v80 + 11) != 0x2E7375627573702ELL)
                                                                                                  {
                                                                                                    v781 = v155 < 0x14;
                                                                                                    if (v155 >= 0x14 && (*(_QWORD *)v80 == 0x6D2E323135787661 ? (v984 = *((_QWORD *)v80 + 1) == 0x696C61702E6B7361) : (v984 = 0), v984 ? (v985 = *((_DWORD *)v80 + 4) == 779251303) : (v985 = 0), v985))
                                                                                                    {
                                                                                                      v1169 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                      v1081 = *(llvm::Type **)v1169;
                                                                                                      v1082 = *((_QWORD *)v1169 + 4);
                                                                                                      v1083 = *((_QWORD *)v1169 + 8);
                                                                                                      v1084 = *((_QWORD *)v1169 + 12);
                                                                                                      v1085 = (unsigned __int8 *)*((_QWORD *)v1169 + 16);
                                                                                                      v1086 = 0;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      if (*(_QWORD *)v80 != 0x6D2E323135787661 || *((_QWORD *)v80 + 1) != 0x696C61762E6B7361 || *(_QWORD *)(v80 + 11) != 0x2E6E67696C61762ELL)
                                                                                                      {
                                                                                                        v780 = 0;
                                                                                                        v773 = 0;
                                                                                                        goto LABEL_1817;
                                                                                                      }
                                                                                                      v1080 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                      v1081 = *(llvm::Type **)v1080;
                                                                                                      v1082 = *((_QWORD *)v1080 + 4);
                                                                                                      v1083 = *((_QWORD *)v1080 + 8);
                                                                                                      v1084 = *((_QWORD *)v1080 + 12);
                                                                                                      v1085 = (unsigned __int8 *)*((_QWORD *)v1080 + 16);
                                                                                                      v1086 = 1;
                                                                                                    }
                                                                                                    VectorSplat = (uint64_t)sub_1C5346184((uint64_t *)&v2116, v1081, v1082, v1083, v1084, v1085, v1086);
                                                                                                    goto LABEL_2998;
                                                                                                  }
                                                                                                }
                                                                                                v753 = v2106;
                                                                                                v754 = 311;
                                                                                              }
LABEL_1586:
                                                                                              VectorSplat = (uint64_t)sub_1C534591C((uint64_t *)&v2116, (uint64_t)v753, v754);
                                                                                              goto LABEL_2998;
                                                                                            }
                                                                                            if (*(_QWORD *)v80 != 0x6D2E323135787661
                                                                                              || *((_QWORD *)v80 + 1) != 0x627573702E6B7361
                                                                                              || *((_WORD *)v80 + 8) != 11891)
                                                                                            {
                                                                                              goto LABEL_1542;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                        v753 = v2106;
                                                                                        v754 = 283;
                                                                                        goto LABEL_1586;
                                                                                      }
                                                                                      if (*(_QWORD *)v2103 != 0x6F7262762E787661
                                                                                        || *((_QWORD *)v2103 + 1) != 0x3166747361636461
                                                                                        || *((_WORD *)v2103 + 8) != 14386)
                                                                                      {
                                                                                        if (v2104 != 19)
                                                                                          goto LABEL_180;
                                                                                        v1655 = *(_QWORD *)v2103 == 0x7262762E32787661
                                                                                             && *((_QWORD *)v2103 + 1) == 0x697473616364616FLL;
                                                                                        if (!v1655
                                                                                          || *(_QWORD *)(v2103 + 11) != 0x3832316974736163)
                                                                                        {
                                                                                          v155 = 19;
                                                                                          goto LABEL_180;
                                                                                        }
                                                                                      }
                                                                                      goto LABEL_2987;
                                                                                    }
                                                                                    v144 = 1;
LABEL_143:
                                                                                    v146 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                                                        && *((_QWORD *)v80 + 1) == 0x766F6D702E6B7361
                                                                                        && *(_QWORD *)(v80 + 15) == 0x3635322E64712E76;
                                                                                    if (v146
                                                                                      || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                        ? (v147 = *((_QWORD *)v80 + 1) == 0x766F6D702E6B7361)
                                                                                        : (v147 = 0),
                                                                                          v147
                                                                                        ? (v148 = *(_QWORD *)(v80 + 15) == 0x3231352E64712E76)
                                                                                        : (v148 = 0),
                                                                                          v148
                                                                                       || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                         ? (v149 = *((_QWORD *)v80 + 1) == 0x766F6D702E6B7361)
                                                                                         : (v149 = 0),
                                                                                           v149
                                                                                         ? (v150 = *(_QWORD *)(v80 + 15) == 0x3635322E62772E76)
                                                                                         : (v150 = 0),
                                                                                           v150
                                                                                        || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                          ? (v151 = *((_QWORD *)v80 + 1) == 0x766F6D702E6B7361)
                                                                                          : (v151 = 0),
                                                                                            v151
                                                                                          ? (v152 = *(_QWORD *)(v80 + 15) == 0x3231352E62772E76)
                                                                                          : (v152 = 0),
                                                                                            v152))))
                                                                                    {
                                                                                      v173 = (char *)v2106
                                                                                           - 32
                                                                                           * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                      v174 = **((_QWORD **)v173 + 4);
                                                                                      v175 = *(unsigned __int8 **)v173;
                                                                                      LOWORD(v2115) = 257;
                                                                                      v176 = (uint64_t)sub_1C4773E38((uint64_t *)&v2116, 38, v175, v174, (uint64_t)&__src);
LABEL_246:
                                                                                      v177 = (uint64_t *)v176;
                                                                                      v178 = (char *)v2106
                                                                                           - 32
                                                                                           * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                      v179 = (unsigned __int8 *)*((_QWORD *)v178 + 8);
                                                                                      v180 = (_QWORD *)*((_QWORD *)v178 + 4);
LABEL_247:
                                                                                      VectorSplat = (uint64_t)sub_1C53451A0((uint64_t *)&v2116, v179, v177, (uint64_t)v180);
                                                                                      goto LABEL_2998;
                                                                                    }
                                                                                    if ((v144 & 1) == 0)
                                                                                    {
LABEL_228:
                                                                                      if (!v86)
                                                                                        goto LABEL_684;
                                                                                      if (v2104 == 6)
                                                                                      {
                                                                                        if (*(_DWORD *)v2103 == 779313761
                                                                                          && *((_WORD *)v2103 + 2) == 27756)
                                                                                        {
                                                                                          goto LABEL_593;
                                                                                        }
                                                                                        if (*(_DWORD *)v2103 == 779641197
                                                                                          && *((_WORD *)v2103 + 2) == 27756)
                                                                                        {
                                                                                          goto LABEL_644;
                                                                                        }
                                                                                        if (*(_DWORD *)v2103 == 779641197
                                                                                          && *((_WORD *)v2103 + 2) == 26997)
                                                                                        {
                                                                                          goto LABEL_644;
                                                                                        }
                                                                                        if ((*(_DWORD *)v2103 != 778987885
                                                                                           || *((_WORD *)v2103 + 2) != 27756)
                                                                                          && (*(_DWORD *)v2103 != 778987885
                                                                                           || *((_WORD *)v2103 + 2) != 26997))
                                                                                        {
                                                                                          if (*(_DWORD *)v2103 != 779775075
                                                                                            || *((_WORD *)v2103 + 2) != 27756)
                                                                                          {
                                                                                            goto LABEL_684;
                                                                                          }
                                                                                          v394 = (llvm::ValueAsMetadata ***)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                          v395 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                                                          v2107 = *v394;
                                                                                          v396 = llvm::Intrinsic::getDeclaration(v395, 52, (uint64_t *)&v2107, 1);
                                                                                          v84 = (llvm::Value *)v396;
                                                                                          if (v396)
                                                                                            v6 = *(_QWORD *)(v396 + 24);
                                                                                          else
                                                                                            v6 = 0;
                                                                                          *(_QWORD *)&v2132 = v394;
                                                                                          v80 = (char *)*v2121;
                                                                                          v21 = *(llvm::ValueHandleBase **)(*v2121 + 1568);
                                                                                          if (!v21)
                                                                                          {
                                                                                            v926 = (llvm::ConstantInt *)*((_QWORD *)v80 + 236);
                                                                                            LODWORD(v2112) = *((_DWORD *)v80 + 474) >> 8;
                                                                                            if (v2112 > 0x40)
                                                                                              llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                                                                                            else
                                                                                              __src = 0;
                                                                                            v21 = llvm::ConstantInt::get(v926, (llvm::LLVMContext *)&__src, v397);
                                                                                            if (v2112 >= 0x41)
                                                                                            {
LABEL_3030:
                                                                                              if (__src)
                                                                                                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17, v927);
                                                                                            }
                                                                                            *((_QWORD *)v80 + 196) = v21;
                                                                                          }
                                                                                          *((_QWORD *)&v2132 + 1) = v21;
                                                                                          __src = "ctlz";
                                                                                          LOWORD(v2115) = 259;
                                                                                          v408 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v2116, (uint64_t **)v6, (uint64_t)v84, (uint64_t *)&v2132, 2, (uint64_t)&__src, 0);
                                                                                          v409 = (llvm::ConstantAggregateZero *)(*v2121 + 1960);
                                                                                          __src = "ctlz.trunc";
                                                                                          LOWORD(v2115) = 259;
LABEL_1441:
                                                                                          p_src = &__src;
                                                                                          v411 = 38;
LABEL_577:
                                                                                          VectorSplat = (uint64_t)sub_1C4773E38((uint64_t *)&v2116, v411, v408, (uint64_t)v409, (uint64_t)p_src);
                                                                                          goto LABEL_2998;
                                                                                        }
LABEL_692:
                                                                                        v492 = (char *)v2106
                                                                                             - 32
                                                                                             * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                        v420 = *(llvm::Constant ***)v492;
                                                                                        v421 = (unsigned __int8 *)*((_QWORD *)v492 + 4);
                                                                                        v493 = *(_WORD *)&v2103[v2104 - 3] == 29998
                                                                                            && v2103[v2104 - 1] == 105;
                                                                                        if (v493
                                                                                          || *(_DWORD *)&v2103[v2104 - 4] == 1819047214)
                                                                                        {
                                                                                          __src = "min.cond";
                                                                                          LOWORD(v2115) = 259;
                                                                                          v494 = 37;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          __src = "min.cond";
                                                                                          LOWORD(v2115) = 259;
                                                                                          v494 = 41;
                                                                                        }
                                                                                        v424 = sub_1C4774B48((uint64_t)&v2116, v494, (uint64_t)v420, (uint64_t)v421, (uint64_t)&__src);
                                                                                        v491 = "min";
LABEL_774:
                                                                                        __src = v491;
                                                                                        LOWORD(v2115) = 259;
                                                                                        goto LABEL_775;
                                                                                      }
                                                                                      if (v2104 == 5)
                                                                                      {
                                                                                        if (*(_DWORD *)v2103 != 779313761
                                                                                          || v2103[4] != 105)
                                                                                        {
                                                                                          if (*(_DWORD *)v2103 != 779641197
                                                                                            || v2103[4] != 105)
                                                                                          {
                                                                                            if (*(_DWORD *)v2103 != 778987885
                                                                                              || v2103[4] != 105)
                                                                                            {
                                                                                              goto LABEL_684;
                                                                                            }
                                                                                            goto LABEL_692;
                                                                                          }
LABEL_644:
                                                                                          v465 = (char *)v2106
                                                                                               - 32
                                                                                               * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                          v420 = *(llvm::Constant ***)v465;
                                                                                          v421 = (unsigned __int8 *)*((_QWORD *)v465 + 4);
                                                                                          v466 = *(_WORD *)&v2103[v2104 - 3] == 29998
                                                                                              && v2103[v2104 - 1] == 105;
                                                                                          if (v466
                                                                                            || *(_DWORD *)&v2103[v2104 - 4] == 1819047214)
                                                                                          {
                                                                                            __src = "max.cond";
                                                                                            LOWORD(v2115) = 259;
                                                                                            v467 = 35;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            __src = "max.cond";
                                                                                            LOWORD(v2115) = 259;
                                                                                            v467 = 39;
                                                                                          }
                                                                                          v424 = sub_1C4774B48((uint64_t)&v2116, v467, (uint64_t)v420, (uint64_t)v421, (uint64_t)&__src);
                                                                                          v491 = "max";
                                                                                          goto LABEL_774;
                                                                                        }
LABEL_593:
                                                                                        v420 = (llvm::Constant **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                        __src = "neg";
                                                                                        LOWORD(v2115) = 259;
                                                                                        v421 = sub_1C5346748((uint64_t)&v2116, (uint64_t)v420, (uint64_t)&__src, 0, 0);
                                                                                        v423 = llvm::Constant::getNullValue(*v420, v422);
                                                                                        __src = "abs.cond";
                                                                                        LOWORD(v2115) = 259;
                                                                                        v424 = sub_1C4774B48((uint64_t)&v2116, 39, (uint64_t)v420, (uint64_t)v423, (uint64_t)&__src);
                                                                                        __src = "abs";
                                                                                        LOWORD(v2115) = 259;
LABEL_775:
                                                                                        VectorSplat = (uint64_t)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v2116, v424, (uint64_t *)v420, (uint64_t)v421, (uint64_t)&__src, 0);
                                                                                        goto LABEL_2998;
                                                                                      }
                                                                                      if (v2104 < 0x15)
                                                                                      {
                                                                                        if (v2104 != 3)
                                                                                        {
                                                                                          if (v2104 == 7)
                                                                                          {
                                                                                            if (*(_DWORD *)v2103 == 779641197
                                                                                              && *(_DWORD *)(v2103 + 3) == 1819047214)
                                                                                            {
                                                                                              goto LABEL_644;
                                                                                            }
                                                                                            if (*(_DWORD *)v2103 != 778987885
                                                                                              || *(_DWORD *)(v2103 + 3) != 1819047214)
                                                                                            {
                                                                                              if (*(_DWORD *)v2103 != 1668312944
                                                                                                || *(_DWORD *)(v2103 + 3) != 1819029091)
                                                                                              {
                                                                                                goto LABEL_684;
                                                                                              }
                                                                                              *(_QWORD *)&v2132 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                              v401 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                                                              v2107 = *(llvm::ValueAsMetadata ***)v2132;
                                                                                              v402 = llvm::Intrinsic::getDeclaration(v401, 53, (uint64_t *)&v2107, 1);
                                                                                              if (v402)
                                                                                                v403 = *(uint64_t ***)(v402 + 24);
                                                                                              else
                                                                                                v403 = 0;
                                                                                              __src = "ctpop";
                                                                                              LOWORD(v2115) = 259;
                                                                                              v408 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v2116, v403, v402, (uint64_t *)&v2132, 1, (uint64_t)&__src, 0);
                                                                                              v409 = (llvm::ConstantAggregateZero *)(*v2121 + 1960);
                                                                                              __src = "ctpop.trunc";
                                                                                              LOWORD(v2115) = 259;
                                                                                              goto LABEL_1441;
                                                                                            }
                                                                                            goto LABEL_692;
                                                                                          }
LABEL_684:
                                                                                          v80 = (char *)v2103;
                                                                                          v81 = v2104;
                                                                                          v21 = v2101;
LABEL_76:
                                                                                          v84 = v2106;
                                                                                          switch(v81)
                                                                                          {
                                                                                            case '0':
                                                                                            case '1':
                                                                                            case '2':
                                                                                            case '3':
                                                                                            case '4':
                                                                                            case '5':
                                                                                            case '6':
                                                                                            case '7':
                                                                                            case '8':
                                                                                            case '9':
LABEL_86:
                                                                                              v2132 = 0uLL;
                                                                                              *(_QWORD *)&v2133 = 0;
                                                                                              v88 = *((_QWORD *)v2106 - 4);
                                                                                              if (!v88
                                                                                                || *(_BYTE *)(v88 + 16)
                                                                                                || *(_QWORD *)(v88 + 24) != *((_QWORD *)v2106 + 9))
                                                                                              {
                                                                                                v927.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v2121 + 1888), (llvm::Type *)2);
                                                                                                __break(1u);
                                                                                                goto LABEL_3030;
                                                                                              }
                                                                                              v89 = *(_DWORD *)(v88 + 36);
                                                                                              llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v2121 + 1888), (llvm::Type *)2);
                                                                                              v91 = v90;
                                                                                              v2099 = v89;
                                                                                              if (v89 <= 3776)
                                                                                              {
                                                                                                if ((v89 - 3610) <= 0xE && ((1 << (v89 - 26)) & 0x5145) != 0)
                                                                                                {
                                                                                                  __src = (void *)*((_QWORD **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                                  v2112 = v90;
                                                                                                  v93 = (char *)&v2113;
                                                                                                  v94 = 2;
                                                                                                  goto LABEL_323;
                                                                                                }
                                                                                                goto LABEL_136;
                                                                                              }
                                                                                              if (v89 <= 3804)
                                                                                              {
                                                                                                if (v89 == 3777)
                                                                                                {
LABEL_136:
                                                                                                  __src = *(void **)v2106;
                                                                                                  v143 = (void **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
LABEL_269:
                                                                                                  v2112 = (uint64_t)*v143;
                                                                                                  v2113 = v90;
                                                                                                  v93 = (char *)&v2114;
                                                                                                  v94 = 3;
                                                                                                  goto LABEL_323;
                                                                                                }
                                                                                                if (v89 == 3779)
                                                                                                {
LABEL_268:
                                                                                                  v143 = (void **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                                  __src = *v143;
                                                                                                  goto LABEL_269;
                                                                                                }
                                                                                                __src = *(void **)v2106;
                                                                                                v141 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                v2112 = **(_QWORD **)v141;
                                                                                                v142 = (uint64_t *)*((_QWORD *)v141 + 4);
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if (v89 <= 3852)
                                                                                                {
                                                                                                  if (v89 == 3805)
                                                                                                    goto LABEL_136;
                                                                                                  goto LABEL_268;
                                                                                                }
                                                                                                if (v89 == 3853)
                                                                                                  goto LABEL_268;
                                                                                                v233 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                                __src = **(void ***)v233;
                                                                                                v2112 = **((_QWORD **)v233 + 4);
                                                                                                v142 = (uint64_t *)*((_QWORD *)v233 + 8);
                                                                                              }
                                                                                              v2113 = *v142;
                                                                                              v2114 = v90;
                                                                                              v93 = (char *)&v2115;
                                                                                              v94 = 4;
LABEL_323:
                                                                                              sub_1C534E8A4(&v2132, (char *)&__src, v93, v94);
                                                                                              v234 = *((_DWORD *)v2106 + 5);
                                                                                              v235 = (llvm::ValueAsMetadata ***)((char *)v2106 - 32 * (v234 & 0x7FFFFFF));
                                                                                              v236 = *((unsigned __int8 *)v2106 + 16);
                                                                                              if (v236 == 84)
                                                                                              {
                                                                                                v237 = 0;
                                                                                                if ((v234 & 0x80000000) == 0)
                                                                                                {
LABEL_325:
                                                                                                  v238 = 0;
                                                                                                  goto LABEL_326;
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                if (v236 == 39)
                                                                                                  v237 = (*((_DWORD *)v2106 + 20) + 1);
                                                                                                else
                                                                                                  v237 = 2;
                                                                                                v21 = v2101;
                                                                                                if ((v234 & 0x80000000) == 0)
                                                                                                  goto LABEL_325;
                                                                                              }
                                                                                              v1816 = (uint64_t)*(v235 - 1);
                                                                                              if ((v1816 & 0xFFFFFFFF0) != 0)
                                                                                                v238 = (*((_DWORD *)v235 - 3) - *(_DWORD *)((char *)v235 - v1816));
                                                                                              else
                                                                                                v238 = 0;
                                                                                              v21 = v2101;
LABEL_326:
                                                                                              v2100 = v2106;
                                                                                              v239 = (llvm::ValueAsMetadata ***)((char *)v2106 + -32 * v238 + -32 * v237 - 32);
                                                                                              if (v235 == v239)
                                                                                              {
                                                                                                v252 = 0;
                                                                                                v240 = 0;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v240 = 0;
                                                                                                v241 = 0;
                                                                                                v242 = 0;
                                                                                                do
                                                                                                {
                                                                                                  v243 = *v235;
                                                                                                  v2107 = v243;
                                                                                                  v244 = *v243;
                                                                                                  if ((*((_DWORD *)*v243 + 2) & 0xFE) == 0x12)
                                                                                                    v244 = (llvm::ValueAsMetadata *)**((_QWORD **)v244 + 2);
                                                                                                  if (llvm::Type::getPrimitiveSizeInBits(v244) == 1)
                                                                                                  {
                                                                                                    v2136[0] = 0;
                                                                                                    v245 = (uint64_t *)*((_QWORD *)v21 + 5);
                                                                                                    llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v2121 + 1888), (llvm::Type *)4);
                                                                                                    v2135 = v246;
                                                                                                    v247 = llvm::Intrinsic::getDeclaration(v245, 3707, &v2135, 1);
                                                                                                    if (v247)
                                                                                                      v248 = *(uint64_t ***)(v247 + 24);
                                                                                                    else
                                                                                                      v248 = 0;
                                                                                                    LOWORD(v2115) = 257;
                                                                                                    v249 = sub_1C4774778((uint64_t *)&v2116, v248, v247, (uint64_t *)&v2107, 1, (uint64_t)&__src, 0);
                                                                                                    v2135 = v91;
                                                                                                    v2136[0] = v249;
                                                                                                    v250 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v21 + 5), 3706, &v2135, 1);
                                                                                                    if (v250)
                                                                                                      v251 = *(uint64_t ***)(v250 + 24);
                                                                                                    else
                                                                                                      v251 = 0;
                                                                                                    LOWORD(v2115) = 257;
                                                                                                    v243 = (llvm::ValueAsMetadata **)sub_1C4774778((uint64_t *)&v2116, v251, v250, v2136, 1, (uint64_t)&__src, 0);
                                                                                                    v2107 = v243;
                                                                                                  }
                                                                                                  if (v241 >= v242)
                                                                                                  {
                                                                                                    v253 = (v241 - v240) >> 3;
                                                                                                    v254 = v253 + 1;
                                                                                                    if ((unint64_t)(v253 + 1) >> 61)
                                                                                                      abort();
                                                                                                    if ((v242 - v240) >> 2 > v254)
                                                                                                      v254 = (v242 - v240) >> 2;
                                                                                                    if ((unint64_t)(v242 - v240) >= 0x7FFFFFFFFFFFFFF8)
                                                                                                      v255 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                                    else
                                                                                                      v255 = v254;
                                                                                                    if (v255)
                                                                                                    {
                                                                                                      if (v255 >> 61)
                                                                                                        sub_1C4764EE4();
                                                                                                      v256 = (char *)operator new(8 * v255);
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v256 = 0;
                                                                                                    }
                                                                                                    v257 = (llvm::ValueAsMetadata ***)&v256[8 * v253];
                                                                                                    *v257 = v243;
                                                                                                    v252 = (char *)(v257 + 1);
                                                                                                    while (v241 != v240)
                                                                                                    {
                                                                                                      v258 = (llvm::ValueAsMetadata **)*((_QWORD *)v241 - 1);
                                                                                                      v241 -= 8;
                                                                                                      *--v257 = v258;
                                                                                                    }
                                                                                                    v242 = &v256[8 * v255];
                                                                                                    if (v240)
                                                                                                      operator delete(v240);
                                                                                                    v240 = (char *)v257;
                                                                                                    v21 = v2101;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    *(_QWORD *)v241 = v243;
                                                                                                    v252 = v241 + 8;
                                                                                                  }
                                                                                                  v235 += 4;
                                                                                                  v241 = v252;
                                                                                                }
                                                                                                while (v235 != v239);
                                                                                              }
                                                                                              v259 = (void *)v2132;
                                                                                              v260 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v21 + 5), v2099, (uint64_t *)v2132, (uint64_t)(*((_QWORD *)&v2132 + 1) - v2132) >> 3);
                                                                                              if (v260)
                                                                                                v261 = *(uint64_t ***)(v260 + 24);
                                                                                              else
                                                                                                v261 = 0;
                                                                                              if ((*((_BYTE *)v2100 + 23) & 0x10) == 0)
                                                                                              {
                                                                                                v272 = 0;
                                                                                                v271 = &byte_1C871356D;
                                                                                                goto LABEL_371;
                                                                                              }
                                                                                              v262 = ***(_QWORD ***)v2100;
                                                                                              v263 = *(_QWORD *)(v262 + 152);
                                                                                              v264 = *(unsigned int *)(v262 + 168);
                                                                                              if ((_DWORD)v264)
                                                                                              {
                                                                                                LODWORD(v265) = (v264 - 1) & ((v2100 >> 4) ^ (v2100 >> 9));
                                                                                                v266 = (llvm::Value **)(v263 + 16 * v265);
                                                                                                v267 = *v266;
                                                                                                if (*v266 == v2100)
                                                                                                {
LABEL_370:
                                                                                                  v270 = v266[1];
                                                                                                  v273 = *(_QWORD *)v270;
                                                                                                  v271 = (char *)v270 + 16;
                                                                                                  v272 = v273;
LABEL_371:
                                                                                                  LOWORD(v2115) = 261;
                                                                                                  __src = v271;
                                                                                                  v2112 = v272;
                                                                                                  Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v261, v260, (uint64_t *)v240, (v252 - v240) >> 3, (uint64_t)&__src, 0);
                                                                                                  if (v240)
                                                                                                  {
                                                                                                    operator delete(v240);
                                                                                                    v259 = (void *)v2132;
                                                                                                  }
                                                                                                  if (v259)
                                                                                                    operator delete(v259);
                                                                                                  goto LABEL_2999;
                                                                                                }
                                                                                                v268 = 1;
                                                                                                while (v267 != (llvm::Value *)-4096)
                                                                                                {
                                                                                                  v269 = v265 + v268++;
                                                                                                  v265 = v269 & (v264 - 1);
                                                                                                  v267 = *(llvm::Value **)(v263 + 16 * v265);
                                                                                                  if (v267 == v2100)
                                                                                                  {
                                                                                                    v266 = (llvm::Value **)(v263 + 16 * v265);
                                                                                                    goto LABEL_370;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                              v266 = (llvm::Value **)(v263 + 16 * v264);
                                                                                              goto LABEL_370;
                                                                                            default:
                                                                                              switch(v81)
                                                                                              {
                                                                                                case 0x1FuLL:
                                                                                                case 0x20uLL:
                                                                                                case 0x21uLL:
                                                                                                case 0x22uLL:
                                                                                                case 0x23uLL:
                                                                                                case 0x24uLL:
                                                                                                case 0x25uLL:
                                                                                                case 0x26uLL:
                                                                                                case 0x27uLL:
                                                                                                case 0x28uLL:
                                                                                                  goto LABEL_86;
                                                                                                default:
                                                                                                  if (v81 != 14)
                                                                                                    goto LABEL_86;
                                                                                                  if (*(_QWORD *)v80 != 0x707463762E65766DLL || *(_QWORD *)(v80 + 6) != 0x646C6F2E34367074)
                                                                                                    goto LABEL_86;
                                                                                                  v215 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v21 + 5), 3747, 0, 0);
                                                                                                  if (v215)
                                                                                                    v216 = *(uint64_t ***)(v215 + 24);
                                                                                                  else
                                                                                                    v216 = 0;
                                                                                                  v539 = *((_DWORD *)v2106 + 5);
                                                                                                  *(_QWORD *)&v2132 = *((_QWORD *)v2106 - 4 * (v539 & 0x7FFFFFF));
                                                                                                  if ((v539 & 0x10000000) != 0)
                                                                                                  {
                                                                                                    v540 = ***(_QWORD ***)v2106;
                                                                                                    v541 = *(_QWORD *)(v540 + 152);
                                                                                                    v542 = *(unsigned int *)(v540 + 168);
                                                                                                    if ((_DWORD)v542)
                                                                                                    {
                                                                                                      LODWORD(v543) = (v542 - 1) & ((v2106 >> 4) ^ (v2106 >> 9));
                                                                                                      v544 = v541 + 16 * v543;
                                                                                                      v545 = *(llvm::Value **)v544;
                                                                                                      if (*(llvm::Value **)v544 != v2106)
                                                                                                      {
                                                                                                        v546 = 1;
                                                                                                        do
                                                                                                        {
                                                                                                          if (v545 == (llvm::Value *)-4096)
                                                                                                            goto LABEL_853;
                                                                                                          v547 = v543 + v546++;
                                                                                                          v543 = v547 & (v542 - 1);
                                                                                                          v545 = *(llvm::Value **)(v541 + 16 * v543);
                                                                                                        }
                                                                                                        while (v545 != v2106);
                                                                                                        v544 = v541 + 16 * v543;
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
LABEL_853:
                                                                                                      v544 = v541 + 16 * v542;
                                                                                                    }
                                                                                                    v599 = *(_QWORD **)(v544 + 8);
                                                                                                    v602 = *v599;
                                                                                                    v600 = (char *)(v599 + 2);
                                                                                                    v601 = v602;
                                                                                                    goto LABEL_855;
                                                                                                  }
                                                                                                  v601 = 0;
                                                                                                  v600 = &byte_1C871356D;
LABEL_855:
                                                                                                  LOWORD(v2115) = 261;
                                                                                                  __src = v600;
                                                                                                  v2112 = v601;
                                                                                                  *(_QWORD *)&v2132 = sub_1C4774778((uint64_t *)&v2116, v216, v215, (uint64_t *)&v2132, 1, (uint64_t)&__src, 0);
                                                                                                  v603 = (uint64_t *)*((_QWORD *)v21 + 5);
                                                                                                  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v2121 + 1888), (llvm::Type *)2);
                                                                                                  v2107 = v604;
                                                                                                  v605 = llvm::Intrinsic::getDeclaration(v603, 3707, (uint64_t *)&v2107, 1);
                                                                                                  if (v605)
                                                                                                    v606 = *(uint64_t ***)(v605 + 24);
                                                                                                  else
                                                                                                    v606 = 0;
                                                                                                  LOWORD(v2115) = 257;
                                                                                                  v2107 = (llvm::ValueAsMetadata **)sub_1C4774778((uint64_t *)&v2116, v606, v605, (uint64_t *)&v2132, 1, (uint64_t)&__src, 0);
                                                                                                  v607 = (uint64_t *)*((_QWORD *)v21 + 5);
                                                                                                  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v2121 + 1888), (llvm::Type *)4);
                                                                                                  v2136[0] = v608;
                                                                                                  v609 = llvm::Intrinsic::getDeclaration(v607, 3706, v2136, 1);
                                                                                                  v579 = v609;
                                                                                                  if (v609)
                                                                                                    v580 = *(uint64_t ***)(v609 + 24);
                                                                                                  else
                                                                                                    v580 = 0;
                                                                                                  LOWORD(v2115) = 257;
                                                                                                  break;
                                                                                              }
                                                                                              goto LABEL_1094;
                                                                                          }
                                                                                        }
                                                                                        if (*(_WORD *)v2103 != 12904
                                                                                          || v2103[2] != 102)
                                                                                        {
                                                                                          goto LABEL_684;
                                                                                        }
                                                                                        v577 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                                                        *(_QWORD *)&v2132 = *v2121 + 1672;
                                                                                        v578 = llvm::Intrinsic::getDeclaration(v577, 17, (uint64_t *)&v2132, 1);
                                                                                        v579 = v578;
                                                                                        if (v578)
                                                                                          v580 = *(uint64_t ***)(v578 + 24);
                                                                                        else
                                                                                          v580 = 0;
                                                                                        v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                        __src = "h2f";
                                                                                        v623 = 259;
                                                                                        goto LABEL_1093;
                                                                                      }
                                                                                      if (*(_QWORD *)v2103 != 0x6C2E63696D6F7461
                                                                                        || *((_QWORD *)v2103 + 1) != 0x2E6464612E64616FLL
                                                                                        || *(_QWORD *)(v2103 + 13) != 0x702E3233662E6464)
                                                                                      {
                                                                                        v489 = *(_QWORD *)v2103 == 0x6C2E63696D6F7461
                                                                                            && *((_QWORD *)v2103 + 1) == 0x2E6464612E64616FLL;
                                                                                        if (!v489
                                                                                          || *(_QWORD *)(v2103 + 13) != 0x702E3436662E6464)
                                                                                        {
                                                                                          goto LABEL_684;
                                                                                        }
                                                                                      }
                                                                                      v625 = (uint64_t **)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                      VectorSplat = (uint64_t)sub_1C61D775C((uint64_t *)&v2116, 11, (uint64_t)*v625, v625[4], 0, 7, 1);
LABEL_2998:
                                                                                      Select = (uint64_t *)VectorSplat;
                                                                                      goto LABEL_2999;
                                                                                    }
                                                                                    if (*(_QWORD *)v80 != 0x6F7262762E787661
                                                                                      || *((_QWORD *)v80 + 1) != 0x3166747361636461
                                                                                      || *((_WORD *)v80 + 8) != 14386)
                                                                                    {
                                                                                      v155 = 23;
LABEL_180:
                                                                                      v157 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                                                          && *((_QWORD *)v80 + 1) == 0x667568732E6B7361
                                                                                          && *((_WORD *)v80 + 8) == 26926;
                                                                                      if (v157
                                                                                        || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                          ? (v158 = *((_QWORD *)v80 + 1) == 0x667568732E6B7361)
                                                                                          : (v158 = 0),
                                                                                            v158
                                                                                          ? (v159 = *((unsigned __int16 *)v80 + 8) == 26158)
                                                                                          : (v159 = 0),
                                                                                            v159))
                                                                                      {
                                                                                        v548 = ((_QWORD *)v2106
                                                                                              - 4
                                                                                              * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                                                                                        v549 = (_QWORD *)(v548 + 24);
                                                                                        if (*(_DWORD *)(v548 + 32) >= 0x41u)
                                                                                          v549 = (_QWORD *)*v549;
                                                                                        v550 = *(_DWORD *)v549;
                                                                                        v551 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                        v553 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                                                                                        if ((_DWORD)v552 == 1)
                                                                                        v554 = v553 >> 7;
                                                                                        if ((*((_DWORD *)v551 + 2) & 0xFE) == 0x12)
                                                                                          v551 = (llvm::ConstantAggregateZero *)**((_QWORD **)v551 + 2);
                                                                                        v555 = llvm::Type::getPrimitiveSizeInBits(v551);
                                                                                        __src = &v2113;
                                                                                        v2112 = 0x800000000;
                                                                                        sub_1C4893E04((char *)&__src, 0, 0);
                                                                                        if ((_DWORD)v554)
                                                                                        {
                                                                                          v556 = 0;
                                                                                          v557 = v554 >> 1;
                                                                                          do
                                                                                          {
                                                                                            if (v555 <= 0x80)
                                                                                            {
                                                                                              v558 = 0;
                                                                                              if (v556 >= v557)
                                                                                                v559 = v553 >> 7;
                                                                                              else
                                                                                                v559 = 0;
                                                                                              v560 = (((v550 >> (v556 * v557)) & (v554 - 1)) + v559) * (0x80 / v555);
                                                                                              v561 = v2112;
                                                                                              v562 = 0x80 / v555;
                                                                                              do
                                                                                              {
                                                                                                if (v561 >= HIDWORD(v2112))
                                                                                                {
                                                                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v561 + 1, 4);
                                                                                                  v561 = v2112;
                                                                                                }
                                                                                                *((_DWORD *)__src + v561) = v558 + v560;
                                                                                                v561 = v2112 + 1;
                                                                                                LODWORD(v2112) = v2112 + 1;
                                                                                                ++v558;
                                                                                                --v562;
                                                                                              }
                                                                                              while (v562);
                                                                                            }
                                                                                            ++v556;
                                                                                          }
                                                                                          while (v556 != (_DWORD)v554);
                                                                                        }
                                                                                        v563 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                        v564 = *v563;
                                                                                        v565 = v563[4];
                                                                                        v2134 = 257;
                                                                                        v566 = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v564, v565, __src, v2112, (uint64_t)&v2132);
                                                                                        v567 = (char *)v2106
                                                                                             - 32
                                                                                             * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                        Select = (uint64_t *)sub_1C53451A0((uint64_t *)&v2116, *((unsigned __int8 **)v567 + 16), v566, *((_QWORD *)v567 + 12));
                                                                                        if (__src != &v2113)
                                                                                          free(__src);
                                                                                        goto LABEL_2999;
                                                                                      }
                                                                                      if (v155 >= 0x16)
                                                                                      {
                                                                                        v160 = *(_QWORD *)v80 == 0x6D2E323135787661
                                                                                            && *((_QWORD *)v80 + 1) == 0x616F72622E6B7361;
                                                                                        v161 = v160
                                                                                            && *(_QWORD *)(v80 + 14) == 0x667473616364616FLL;
                                                                                        if (v161
                                                                                          || (*(_QWORD *)v80 == 0x6D2E323135787661
                                                                                            ? (v162 = *((_QWORD *)v80 + 1) == 0x616F72622E6B7361)
                                                                                            : (v162 = 0),
                                                                                              v162
                                                                                            ? (v163 = *(_QWORD *)(v80 + 14) == 0x697473616364616FLL)
                                                                                            : (v163 = 0),
                                                                                              v163))
                                                                                        {
                                                                                          v670 = *(_DWORD *)(**((_QWORD **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)) + 32);
                                                                                          v671 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                          __src = &v2113;
                                                                                          v2112 = 0x800000000;
                                                                                          sub_1C4893E04((char *)&__src, v671, 0);
                                                                                          v672 = __src;
                                                                                          if ((_DWORD)v671)
                                                                                          {
                                                                                            for (m = 0; m != v671; ++m)
                                                                                              v672[m] = m % v670;
                                                                                          }
                                                                                          v674 = *((_QWORD *)v2106
                                                                                                 - 4
                                                                                                 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                          v2134 = 257;
                                                                                          v675 = (uint64_t *)sub_1C486AD20((uint64_t)&v2116, v674, v674, v672, v2112, (uint64_t)&v2132);
                                                                                          v676 = (char *)v2106
                                                                                               - 32
                                                                                               * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                                                          v677 = (unsigned __int8 *)*((_QWORD *)v676 + 8);
                                                                                          v678 = *((_QWORD *)v676 + 4);
                                                                                          goto LABEL_1013;
                                                                                        }
                                                                                      }
                                                                                      v164 = 0;
                                                                                      goto LABEL_210;
                                                                                    }
LABEL_2987:
                                                                                    v1657 = *(llvm::Type **)(*(_QWORD *)v2106 + 24);
                                                                                    v1659 = llvm::Type::getPrimitiveSizeInBits(v1657);
                                                                                    if ((_DWORD)v1658 == 1)
                                                                                    v1660 = (llvm::Type *)(0x80 / v1659);
                                                                                    llvm::FixedVectorType::get(v1657, v1660);
                                                                                    v1662 = v1661;
                                                                                    v1663 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                    v1664 = llvm::PointerType::get(v1661, 0);
                                                                                    LOWORD(v2115) = 257;
                                                                                    v1665 = sub_1C5098D9C((uint64_t *)&v2116, v1663, v1664, (uint64_t)&__src);
                                                                                    v2134 = 257;
                                                                                    v1666 = (char *)operator new(0x60uLL);
                                                                                    v1667 = v1666;
                                                                                    v1668 = (llvm::PoisonValue **)(v1666 + 32);
                                                                                    *((_QWORD *)v1666 + 2) = 0;
                                                                                    *((_QWORD *)v1666 + 3) = v1666 + 32;
                                                                                    LOWORD(v2115) = 257;
                                                                                    *((_QWORD *)v1666 + 4) = v1662;
                                                                                    *((_QWORD *)v1666 + 5) = 0;
                                                                                    *((_WORD *)v1666 + 24) = 60;
                                                                                    *((_DWORD *)v1666 + 13) = 1;
                                                                                    *(_OWORD *)(v1666 + 56) = 0u;
                                                                                    *(_OWORD *)(v1666 + 72) = 0u;
                                                                                    *((_DWORD *)v1666 + 22) = 0;
                                                                                    *(_QWORD *)v1666 = v1665;
                                                                                    *((_QWORD *)v1666 + 1) = 0;
                                                                                    if (v1665)
                                                                                    {
                                                                                      v1671 = *((_QWORD *)v1665 + 1);
                                                                                      v1670 = v1665 + 8;
                                                                                      v1669 = v1671;
                                                                                      *((_QWORD *)v1666 + 1) = v1671;
                                                                                      if (v1671)
                                                                                        *(_QWORD *)(v1669 + 16) = v1666 + 8;
                                                                                      *((_QWORD *)v1666 + 2) = v1670;
                                                                                      *v1670 = v1666;
                                                                                    }
                                                                                    *((_WORD *)v1666 + 25) = 0;
                                                                                    v1666[92] = 1;
                                                                                    llvm::Value::setName((uint64_t ***)v1666 + 4, (uint64_t)&__src);
                                                                                    (*((void (**)(void **, llvm::PoisonValue **, __int128 *, uint64_t, uint64_t))*v2123
                                                                                     + 2))(v2123, v1668, &v2132, v2119, v2120);
                                                                                    if (!(_DWORD)v2117)
                                                                                    {
LABEL_2994:
                                                                                      if ((_DWORD)v1660 == 2)
                                                                                      {
                                                                                        v2132 = xmmword_1C85FCA60;
                                                                                        LOWORD(v2115) = 257;
                                                                                        v1673 = llvm::PoisonValue::get(*v1668, v1672);
                                                                                        v1674 = (uint64_t)v1668;
                                                                                        v1675 = 4;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v2132 = xmmword_1C85FC9F4;
                                                                                        v2133 = *(_OWORD *)algn_1C85FCA04;
                                                                                        LOWORD(v2115) = 257;
                                                                                        v1673 = llvm::PoisonValue::get(*v1668, v1672);
                                                                                        v1674 = (uint64_t)v1668;
                                                                                        v1675 = 8;
                                                                                      }
                                                                                      VectorSplat = sub_1C486AD20((uint64_t)&v2116, v1674, (uint64_t)v1673, &v2132, v1675, (uint64_t)&__src);
                                                                                      goto LABEL_2998;
                                                                                    }
                                                                                    v1678 = (char *)v2116;
                                                                                    v1679 = (char *)v2116
                                                                                          + 16 * v2117;
                                                                                    v1680 = (llvm::Type **)(v1667 + 80);
                                                                                    while (1)
                                                                                    {
                                                                                      v1681 = *(_DWORD *)v1678;
                                                                                      v1682 = (unsigned __int8 *)*((_QWORD *)v1678 + 1);
                                                                                      if (v1682)
                                                                                      {
                                                                                        if (!v1681)
                                                                                        {
                                                                                          v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v1678 + 1);
                                                                                          llvm::MetadataTracking::track((uint64_t)&v2107, v1682, 2);
                                                                                          v1672 = *v1680;
                                                                                          goto LABEL_3018;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1672 = *v1680;
                                                                                        if (!*v1680
                                                                                          && (v1667[55] & 0x20) == 0)
                                                                                        {
                                                                                          goto LABEL_3015;
                                                                                        }
                                                                                        if (!v1681)
                                                                                        {
                                                                                          v2107 = 0;
LABEL_3018:
                                                                                          if (v1672)
                                                                                            llvm::MetadataTracking::untrack((uint64_t)(v1667 + 80), (unsigned __int8 *)v1672);
                                                                                          v1672 = (llvm::Type *)v2107;
                                                                                          *v1680 = (llvm::Type *)v2107;
                                                                                          if (v1672)
                                                                                            llvm::MetadataTracking::retrack((uint64_t)&v2107, (unsigned __int8 *)v1672, (uint64_t)(v1667 + 80));
                                                                                          goto LABEL_3015;
                                                                                        }
                                                                                      }
                                                                                      llvm::Value::setMetadata((llvm::Value *)v1668, *(_DWORD *)v1678, (llvm::MDNode *)v1682);
LABEL_3015:
                                                                                      v1678 += 16;
                                                                                      if (v1678 == v1679)
                                                                                        goto LABEL_2994;
                                                                                    }
                                                                                  }
                                                                                  v1490 = *(llvm::PointerType **)(*(_QWORD *)v2106 + 24);
                                                                                  v2102 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                  v1491 = *(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                                                  v1492 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                  v1493 = llvm::PointerType::get(v1490, 0);
                                                                                  LOWORD(v2115) = 257;
                                                                                  v1494 = sub_1C4773E38((uint64_t *)&v2116, 49, v1492, v1493, (uint64_t)&__src);
                                                                                  v2134 = 257;
                                                                                  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v2119 + 56)+ 40)+ 272, (uint64_t)v1490);
                                                                                  v1496 = v1495;
                                                                                  v1497 = (char *)operator new(0x60uLL);
                                                                                  v1498 = v1497;
                                                                                  v1499 = (llvm::Value *)(v1497 + 32);
                                                                                  *((_QWORD *)v1497 + 2) = 0;
                                                                                  *((_QWORD *)v1497 + 3) = v1497 + 32;
                                                                                  LOWORD(v2115) = 257;
                                                                                  *((_QWORD *)v1497 + 4) = v1490;
                                                                                  *((_QWORD *)v1497 + 5) = 0;
                                                                                  *((_WORD *)v1497 + 24) = 60;
                                                                                  *((_DWORD *)v1497 + 13) = 1;
                                                                                  *(_OWORD *)(v1497 + 56) = 0u;
                                                                                  *(_OWORD *)(v1497 + 72) = 0u;
                                                                                  *((_DWORD *)v1497 + 22) = 0;
                                                                                  *(_QWORD *)v1497 = v1494;
                                                                                  *((_QWORD *)v1497 + 1) = 0;
                                                                                  if (v1494)
                                                                                  {
                                                                                    v1502 = *((_QWORD *)v1494 + 1);
                                                                                    v1501 = v1494 + 8;
                                                                                    v1500 = v1502;
                                                                                    *((_QWORD *)v1497 + 1) = v1502;
                                                                                    if (v1502)
                                                                                      *(_QWORD *)(v1500 + 16) = v1497 + 8;
                                                                                    *((_QWORD *)v1497 + 2) = v1501;
                                                                                    *v1501 = v1497;
                                                                                  }
                                                                                  *((_WORD *)v1497 + 25) = 2 * (v1496 & 0x3F);
                                                                                  v1497[92] = 1;
                                                                                  llvm::Value::setName((uint64_t ***)v1497 + 4, (uint64_t)&__src);
                                                                                  (*((void (**)(void **, llvm::Value *, __int128 *, uint64_t, uint64_t))*v2123
                                                                                   + 2))(v2123, v1499, &v2132, v2119, v2120);
                                                                                  if (!(_DWORD)v2117)
                                                                                  {
LABEL_2722:
                                                                                    v1504 = *v4;
                                                                                    Select = llvm::PoisonValue::get(v2102, v1503);
                                                                                    if ((_DWORD)v1491)
                                                                                    {
                                                                                      v1505 = 0;
                                                                                      v1506 = (llvm::ConstantInt *)(v1504 + 1960);
                                                                                      do
                                                                                      {
                                                                                        v1507 = llvm::ConstantInt::get(v1506, v1505, 0);
                                                                                        LOWORD(v2115) = 257;
                                                                                        Select = (uint64_t *)sub_1C4773154((uint64_t *)&v2116, (uint64_t)Select, (uint64_t)v1499, (uint64_t)v1507, (uint64_t)&__src);
                                                                                        ++v1505;
                                                                                      }
                                                                                      while (v1491 != v1505);
                                                                                    }
                                                                                    goto LABEL_2999;
                                                                                  }
                                                                                  v1773 = (char *)v2116;
                                                                                  v1774 = (char *)v2116
                                                                                        + 16 * v2117;
                                                                                  v1775 = (llvm::Type **)(v1498 + 80);
                                                                                  while (1)
                                                                                  {
                                                                                    v1776 = *(_DWORD *)v1773;
                                                                                    v1777 = (unsigned __int8 *)*((_QWORD *)v1773 + 1);
                                                                                    if (v1777)
                                                                                    {
                                                                                      if (!v1776)
                                                                                      {
                                                                                        v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v1773 + 1);
                                                                                        llvm::MetadataTracking::track((uint64_t)&v2107, v1777, 2);
                                                                                        v1503 = *v1775;
                                                                                        goto LABEL_3235;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v1503 = *v1775;
                                                                                      if (!*v1775
                                                                                        && (v1498[55] & 0x20) == 0)
                                                                                      {
                                                                                        goto LABEL_3232;
                                                                                      }
                                                                                      if (!v1776)
                                                                                      {
                                                                                        v2107 = 0;
LABEL_3235:
                                                                                        if (v1503)
                                                                                          llvm::MetadataTracking::untrack((uint64_t)(v1498 + 80), (unsigned __int8 *)v1503);
                                                                                        v1503 = (llvm::Type *)v2107;
                                                                                        *v1775 = (llvm::Type *)v2107;
                                                                                        if (v1503)
                                                                                          llvm::MetadataTracking::retrack((uint64_t)&v2107, (unsigned __int8 *)v1503, (uint64_t)(v1498 + 80));
                                                                                        goto LABEL_3232;
                                                                                      }
                                                                                    }
                                                                                    llvm::Value::setMetadata(v1499, *(_DWORD *)v1773, (llvm::MDNode *)v1777);
LABEL_3232:
                                                                                    v1773 += 16;
                                                                                    if (v1773 == v1774)
                                                                                      goto LABEL_2722;
                                                                                  }
                                                                                }
                                                                                v1508 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), 12308, 0, 0);
                                                                                v1509 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                                v1510 = *v4 + 1960;
                                                                                LOWORD(v2115) = 257;
                                                                                v1511 = sub_1C4773E38((uint64_t *)&v2116, 38, v1509, v1510, (uint64_t)&__src);
                                                                                if (v1508)
                                                                                  v1512 = *(uint64_t ***)(v1508 + 24);
                                                                                else
                                                                                  v1512 = 0;
                                                                                *(_QWORD *)&v2132 = v1511;
                                                                                *((_QWORD *)&v2132 + 1) = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                                LOWORD(v2115) = 257;
                                                                                v1595 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v2116, v1512, v1508, (uint64_t *)&v2132, 2, (uint64_t)&__src, 0);
                                                                                v1597 = *(llvm::ConstantAggregateZero **)v2106;
                                                                                LOWORD(v2115) = 257;
                                                                                v1596 = 39;
                                                                                goto LABEL_2880;
                                                                              }
                                                                            }
                                                                          }
                                                                          v1320 = v1188[11] == 122;
                                                                          v1321 = v2106;
                                                                          v1322 = 1;
                                                                        }
                                                                        MaskedLoad = (uint64_t)sub_1C5345F34((uint64_t *)&v2116, (uint64_t)v1321, v1322, v1320);
LABEL_1633:
                                                                        Select = (uint64_t *)MaskedLoad;
                                                                        goto LABEL_2999;
                                                                      }
                                                                    }
                                                                    v1230 = v2106;
                                                                    v1231 = 1;
LABEL_2431:
                                                                    MaskedLoad = (uint64_t)sub_1C5345D3C((uint64_t *)&v2116, (uint64_t)v1230, v1231);
                                                                    goto LABEL_1633;
                                                                  }
                                                                }
LABEL_2310:
                                                                v1230 = v2106;
                                                                v1231 = 0;
                                                                goto LABEL_2431;
                                                              }
LABEL_2145:
                                                              if (*(_QWORD *)v80 != 0x6F6370762E706F78
                                                                || v80[8] != 109)
                                                              {
                                                                if ((v338 & 1) == 0
                                                                  && *(_QWORD *)v2103 == 0x6D6370762E706F78
                                                                  && *((_WORD *)v2103 + 4) == 30319)
                                                                {
                                                                  v1349 = ((_QWORD *)v2106
                                                                         - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                                                                  LOWORD(v2115) = 257;
                                                                  v1350 = sub_1C506EAA0((uint64_t)&v2116, v1349, (uint64_t)&__src);
                                                                  v1351 = (_QWORD *)*((_QWORD *)v2106
                                                                                    - 4
                                                                                    * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                                  LOWORD(v2115) = 257;
                                                                  v1352 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v2116, v1351, v1349, (uint64_t)&__src);
                                                                  v1353 = (_QWORD *)((_QWORD *)v2106
                                                                                   - 4
                                                                                   * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                                  LOWORD(v2115) = 257;
                                                                  v1354 = sub_1C4D89BCC((uint64_t)&v2116, v1353, v1350, (uint64_t)&__src);
                                                                  LOWORD(v2115) = 257;
                                                                  MaskedLoad = sub_1C4773594((uint64_t)&v2116, v1352, v1354, (uint64_t)&__src);
                                                                  goto LABEL_1633;
                                                                }
                                                                if (*(_QWORD *)v2103 == 0x6F7270762E706F78
                                                                  && v2103[8] == 116)
                                                                {
                                                                  goto LABEL_2310;
                                                                }
                                                                goto LABEL_2158;
                                                              }
                                                              v1242 = &v2103[v81];
                                                              v1243 = *((_WORD *)v1242 - 1) != 25205
                                                                   && *((_WORD *)v1242 - 1) != 30581
                                                                   && *((_WORD *)v1242 - 1) != 25717
                                                                   && *((_WORD *)v1242 - 1) != 29045;
                                                              v1244 = *((unsigned __int8 *)v2106 + 16);
                                                              if (v1244 == 84)
                                                              {
                                                                v1245 = 0;
                                                              }
                                                              else if (v1244 == 39)
                                                              {
                                                                v1245 = (*((_DWORD *)v2106 + 20) + 1);
                                                              }
                                                              else
                                                              {
                                                                v1245 = 2;
                                                              }
                                                              v1246 = *((_DWORD *)v2106 + 5);
                                                              if (v1246 < 0
                                                                && (v2086 = (char *)v2106 - 32 * (v1246 & 0x7FFFFFF),
                                                                    v2087 = *((_QWORD *)v2086 - 1),
                                                                    (v2087 & 0xFFFFFFFF0) != 0))
                                                              {
                                                                v1248 = -(uint64_t)(v1246 & 0x7FFFFFF);
                                                                v1247 = *((_DWORD *)v2086 - 3)
                                                                      - *(_DWORD *)&v2086[-v2087];
                                                              }
                                                              else
                                                              {
                                                                v1247 = 0;
                                                                v1248 = -(uint64_t)(v1246 & 0x7FFFFFF);
                                                              }
                                                              v1249 = (char *)v2106
                                                                    + 32 * -v1247
                                                                    + -32 * v1245;
                                                              v1250 = (uint64_t *)((char *)v2106 + 32 * v1248);
                                                              if (((v1249 - (char *)v1250 - 32) & 0x1FFFFFFFE0) == 0x60)
                                                              {
                                                                v1251 = v1250[8];
                                                                v1252 = (_QWORD *)(v1251 + 24);
                                                                if (*(_DWORD *)(v1251 + 32) >= 0x41u)
                                                                  v1252 = (_QWORD *)*v1252;
                                                                __asm { BR              X10 }
                                                              }
                                                              if (v2104 >= 9)
                                                                v1278 = 9;
                                                              else
                                                                v1278 = v2104;
                                                              v1279 = &v2103[v1278];
                                                              v1280 = v2104 - v1278;
                                                              v2103 += v1278;
                                                              v2104 = v1280;
                                                              if (v1280 < 2)
                                                              {
LABEL_2363:
                                                                MaskedLoad = (uint64_t)llvm::Constant::getAllOnesValue(*(llvm::Constant **)v2106, (llvm::Type *)v344);
                                                                goto LABEL_1633;
                                                              }
                                                              if (*(_WORD *)v1279 == 29804)
                                                              {
                                                                v1438 = *(llvm::ConstantAggregateZero **)v2106;
                                                                v1439 = *v1250;
                                                                v1440 = v1250[4];
                                                                v1441 = !v1243;
                                                                v1442 = 36;
                                                                v1443 = 40;
                                                              }
                                                              else if (*(_WORD *)v1279 == 25964)
                                                              {
                                                                v1438 = *(llvm::ConstantAggregateZero **)v2106;
                                                                v1439 = *v1250;
                                                                v1440 = v1250[4];
                                                                v1441 = !v1243;
                                                                v1442 = 37;
                                                                v1443 = 41;
                                                              }
                                                              else if (*(_WORD *)v1279 == 29799)
                                                              {
                                                                v1438 = *(llvm::ConstantAggregateZero **)v2106;
                                                                v1439 = *v1250;
                                                                v1440 = v1250[4];
                                                                v1441 = !v1243;
                                                                v1442 = 34;
                                                                v1443 = 38;
                                                              }
                                                              else
                                                              {
                                                                if (*(_WORD *)v1279 != 25959)
                                                                {
                                                                  if (*(_WORD *)v1279 == 29029)
                                                                  {
                                                                    v1438 = *(llvm::ConstantAggregateZero **)v2106;
                                                                    v1439 = *v1250;
                                                                    v1594 = 32;
                                                                    v1440 = v1250[4];
                                                                  }
                                                                  else
                                                                  {
                                                                    if (*(_WORD *)v1279 != 25966)
                                                                    {
                                                                      if (v1280 >= 5
                                                                        && *(_DWORD *)v1279 == 1936482662
                                                                        && v1279[4] == 101)
                                                                      {
                                                                        MaskedLoad = (uint64_t)llvm::Constant::getNullValue(*(llvm::Constant **)v2106, (llvm::Type *)v344);
                                                                        goto LABEL_1633;
                                                                      }
                                                                      goto LABEL_2363;
                                                                    }
                                                                    v1438 = *(llvm::ConstantAggregateZero **)v2106;
                                                                    v1439 = *v1250;
                                                                    v1440 = v1250[4];
                                                                    v1594 = 33;
                                                                  }
LABEL_2879:
                                                                  LOWORD(v2115) = 257;
                                                                  v1595 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v2116, v1594, v1439, v1440, (uint64_t)&__src);
                                                                  LOWORD(v2115) = 257;
                                                                  v1596 = 40;
                                                                  v1597 = v1438;
LABEL_2880:
                                                                  MaskedLoad = (uint64_t)sub_1C4773E38((uint64_t *)&v2116, v1596, v1595, (uint64_t)v1597, (uint64_t)&__src);
                                                                  goto LABEL_1633;
                                                                }
                                                                v1438 = *(llvm::ConstantAggregateZero **)v2106;
                                                                v1439 = *v1250;
                                                                v1440 = v1250[4];
                                                                v1441 = !v1243;
                                                                v1442 = 35;
                                                                v1443 = 39;
                                                              }
                                                              if (v1441)
                                                                v1594 = v1442;
                                                              else
                                                                v1594 = v1443;
                                                              goto LABEL_2879;
                                                            }
                                                            if (*(_QWORD *)v80 != 0x6D2E323135787661
                                                              || *((_QWORD *)v80 + 1) != 0x617078652E6B7361
                                                              || *(_QWORD *)(v80 + 11) != 0x2E646E617078652ELL)
                                                            {
                                                              goto LABEL_2145;
                                                            }
                                                          }
                                                          v1206 = *(llvm::ConstantAggregateZero **)v2106;
                                                          v1207 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106- 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8], *(_DWORD *)(*(_QWORD *)v2106 + 32));
                                                          if (v80[12] == 99)
                                                            v1208 = 11376;
                                                          else
                                                            v1208 = 11430;
                                                          v1209 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                                          __src = v1206;
                                                          v1210 = llvm::Intrinsic::getDeclaration(v1209, v1208, (uint64_t *)&__src, 1);
                                                          v1211 = v1210;
                                                          if (v1210)
                                                            v1212 = *(uint64_t ***)(v1210 + 24);
                                                          else
                                                            v1212 = 0;
                                                          v1253 = (_QWORD *)((char *)v2106
                                                                           - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                          *(_QWORD *)&v2132 = *v1253;
                                                          *((_QWORD *)&v2132 + 1) = v1253[4];
                                                          *(_QWORD *)&v2133 = v1207;
                                                          LOWORD(v2115) = 257;
LABEL_2338:
                                                          MaskedLoad = sub_1C4774778((uint64_t *)&v2116, v1212, v1211, (uint64_t *)&v2132, 3, (uint64_t)&__src, 0);
                                                          goto LABEL_1633;
                                                        }
                                                        v1281 = v80[16];
                                                        v1282 = (char *)v2106
                                                              - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                                        v1283 = *(unsigned __int8 **)v1282;
                                                        v1284 = (llvm::PointerType **)*((_QWORD *)v1282 + 4);
                                                        v1285 = (unsigned __int8 *)*((_QWORD *)v1282 + 8);
                                                        v1286 = *v1284;
                                                        v1287 = llvm::PointerType::get(*v1284, 0);
                                                        LOWORD(v2115) = 257;
                                                        v1288 = (uint64_t *)sub_1C4773E38((uint64_t *)&v2116, 49, v1283, v1287, (uint64_t)&__src);
                                                        if (v1281 == 117)
                                                          v1289 = 0;
                                                        else
                                                          v1289 = 63
                                                                - __clz(llvm::Type::getPrimitiveSizeInBits(*v1284) >> 3);
                                                        if (!v1285
                                                          || v1285[16] > 0x14u
                                                          || !llvm::Constant::isAllOnesValue((llvm::Constant *)v1285))
                                                        {
                                                          v1489 = sub_1C534544C((uint64_t)&v2116, v1285, *((_DWORD *)v1286 + 8));
                                                          LOWORD(v2115) = 257;
                                                          MaskedLoad = llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)&v2116, v1286, v1288, v1289, v1489, (llvm::UndefValue *)v1284, (uint64_t)&__src);
                                                          goto LABEL_1633;
                                                        }
                                                        v2134 = 257;
                                                        v1375 = (char *)operator new(0x60uLL);
                                                        v1376 = v1375;
                                                        Select = (uint64_t *)(v1375 + 32);
                                                        *((_QWORD *)v1375 + 2) = 0;
                                                        *((_QWORD *)v1375 + 3) = v1375 + 32;
                                                        LOWORD(v2115) = 257;
                                                        *((_QWORD *)v1375 + 4) = v1286;
                                                        *((_QWORD *)v1375 + 5) = 0;
                                                        *((_WORD *)v1375 + 24) = 60;
                                                        *((_DWORD *)v1375 + 13) = 1;
                                                        *(_OWORD *)(v1375 + 56) = 0u;
                                                        *(_OWORD *)(v1375 + 72) = 0u;
                                                        *((_DWORD *)v1375 + 22) = 0;
                                                        *(_QWORD *)v1375 = v1288;
                                                        *((_QWORD *)v1375 + 1) = 0;
                                                        if (v1288)
                                                        {
                                                          v1379 = v1288[1];
                                                          v1378 = v1288 + 1;
                                                          v1377 = v1379;
                                                          *((_QWORD *)v1375 + 1) = v1379;
                                                          if (v1379)
                                                            *(_QWORD *)(v1377 + 16) = v1375 + 8;
                                                          *((_QWORD *)v1375 + 2) = v1378;
                                                          *v1378 = v1375;
                                                        }
                                                        *((_WORD *)v1375 + 25) = 2 * (v1289 & 0x3F);
                                                        v1375[92] = 1;
                                                        llvm::Value::setName((uint64_t ***)v1375 + 4, (uint64_t)&__src);
                                                        (*((void (**)(void **, uint64_t *, __int128 *, uint64_t, uint64_t))*v2123
                                                         + 2))(v2123, Select, &v2132, v2119, v2120);
                                                        if (!(_DWORD)v2117)
                                                          goto LABEL_3000;
                                                        v1539 = (char *)v2116;
                                                        v1540 = (char *)v2116 + 16 * v2117;
                                                        v1541 = (unsigned __int8 **)(v1376 + 80);
                                                        while (1)
                                                        {
                                                          v1542 = *(_DWORD *)v1539;
                                                          v1543 = (unsigned __int8 *)*((_QWORD *)v1539 + 1);
                                                          if (v1543)
                                                          {
                                                            if (!v1542)
                                                            {
                                                              v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v1539 + 1);
                                                              llvm::MetadataTracking::track((uint64_t)&v2107, v1543, 2);
                                                              v1544 = *v1541;
                                                              goto LABEL_2761;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v1544 = *v1541;
                                                            if (!*v1541 && (v1376[55] & 0x20) == 0)
                                                              goto LABEL_2758;
                                                            if (!v1542)
                                                            {
                                                              v2107 = 0;
LABEL_2761:
                                                              if (v1544)
                                                                llvm::MetadataTracking::untrack((uint64_t)(v1376 + 80), v1544);
                                                              v1545 = (unsigned __int8 *)v2107;
                                                              *v1541 = (unsigned __int8 *)v2107;
                                                              if (v1545)
                                                                llvm::MetadataTracking::retrack((uint64_t)&v2107, v1545, (uint64_t)(v1376 + 80));
                                                              goto LABEL_2758;
                                                            }
                                                          }
                                                          llvm::Value::setMetadata((llvm::Value *)Select, *(_DWORD *)v1539, (llvm::MDNode *)v1543);
LABEL_2758:
                                                          v1539 += 16;
                                                          if (v1539 == v1540)
                                                            goto LABEL_3000;
                                                        }
                                                      }
                                                    }
                                                    v1134 = *(llvm::ConstantAggregateZero **)v2106;
                                                    v1170 = (unsigned __int8 *)*((_QWORD *)v2106
                                                                               - 4
                                                                               * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                    v1171 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v2106 + 32);
                                                    if ((_DWORD)v1171 != *(_DWORD *)(*(_QWORD *)v1170 + 32))
                                                    {
                                                      v2132 = xmmword_1C6429EB0;
                                                      LOWORD(v2115) = 257;
                                                      v1170 = (unsigned __int8 *)sub_1C486AD20((uint64_t)&v2116, (uint64_t)v1170, (uint64_t)v1170, &v2132, 4, (uint64_t)&__src);
                                                    }
                                                    llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v4 + 1624), v1171);
                                                    LOWORD(v2115) = 257;
                                                    v1139 = (uint64_t *)sub_1C4773E38((uint64_t *)&v2116, 49, v1170, v1172, (uint64_t)&__src);
                                                    __src = "cvtph2ps";
                                                    LOWORD(v2115) = 259;
                                                    goto LABEL_2087;
                                                  }
                                                  if (*(_QWORD *)v80 != 0x632E323135787661
                                                    || *((_QWORD *)v80 + 1) != 0x6473326973757476)
                                                  {
                                                    goto LABEL_1664;
                                                  }
                                                  v929 = (uint64_t *)((_QWORD *)v2106
                                                                   - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                                  v930 = *(uint64_t **)(*(_QWORD *)v2106 + 24);
                                                  LOWORD(v2115) = 257;
                                                  v924 = sub_1C5345CE4((uint64_t)&v2116, v929, v930, (uint64_t)&__src);
LABEL_1630:
                                                  v925 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                                  LOWORD(v2115) = 257;
                                                  MaskedLoad = (uint64_t)sub_1C53450D8((uint64_t)&v2116, v925, (const llvm::APInt *)v924, (uint64_t)&__src);
                                                  goto LABEL_1633;
                                                }
                                                if (*(_QWORD *)v80 != 0x7476632E32657373
                                                  || *(_QWORD *)(v80 + 7) != 0x6473323436697374)
                                                {
                                                  goto LABEL_1664;
                                                }
                                              }
                                            }
                                          }
                                          v922 = (uint64_t *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
                                          v923 = *(uint64_t **)(*(_QWORD *)v2106 + 24);
                                          LOWORD(v2115) = 257;
                                          v924 = sub_1C4773B3C((uint64_t)&v2116, v922, v923, (uint64_t)&__src);
                                          goto LABEL_1630;
                                        }
                                      }
                                      else
                                      {
                                        if (v81 < 0x14)
                                          goto LABEL_1608;
                                        v6 = 0x6D2E323135787661;
                                        v916 = *(_QWORD *)v80 == 0x6D2E323135787661
                                            && *((_QWORD *)v80 + 1) == 0x6C756D702E6B7361;
                                        if (!v916 || *((_DWORD *)v80 + 4) != 779183150)
                                          goto LABEL_1608;
                                      }
                                    }
                                    v895 = v2106;
                                    v896 = 1;
LABEL_1632:
                                    MaskedLoad = (uint64_t)sub_1C5345A98((uint64_t *)&v2116, (uint64_t)v895, v896);
                                    goto LABEL_1633;
                                  }
LABEL_1530:
                                  v895 = v2106;
                                  v896 = 0;
                                  goto LABEL_1632;
                                }
                                v746 = *(_QWORD *)(v80 + 11);
                                v6 = 0x702E323135787661;
                                v747 = *(_QWORD *)v80 == 0x702E323135787661
                                    && *((_QWORD *)v80 + 1) == 0x2E71642E756C756DLL;
                                v744 = 0x3231352E71642E75;
                              }
                              if (v747 && v746 == v744)
                                goto LABEL_1530;
                              goto LABEL_1503;
                            }
                            goto LABEL_1105;
                          }
                          if (*(_QWORD *)v80 != 0x632E323135787661 || *((_DWORD *)v80 + 2) != 1882091629)
                          {
                            v345 = 0;
                            v348 = 1;
                            v5 = 1;
LABEL_961:
                            if ((v333 & 1) != 0)
                              goto LABEL_962;
                            if (*(_QWORD *)v80 != 0x6D2E323135787661
                              || *((_QWORD *)v80 + 1) != 0x706D63752E6B7361
                              || v80[16] != 46)
                            {
                              if (*(_QWORD *)v80 != 0x632E323135787661
                                || *((_QWORD *)v80 + 1) != 0x6B73616D32627476
                                || v80[16] != 46)
                              {
                                v684 = *(_QWORD *)v80 == 0x632E323135787661
                                    && *((_QWORD *)v80 + 1) == 0x6B73616D32777476;
                                if (!v684 || v80[16] != 46)
                                {
                                  v6 = 0x6B73616D32647476;
                                  v686 = *(_QWORD *)v80 == 0x632E323135787661
                                      && *((_QWORD *)v80 + 1) == 0x6B73616D32647476;
                                  if (!v686 || v80[16] != 46)
                                  {
                                    v688 = *(_QWORD *)v80 == 0x632E323135787661
                                        && *((_QWORD *)v80 + 1) == 0x6B73616D32717476;
                                    if (!v688 || v80[16] != 46)
                                    {
LABEL_962:
                                      if (v81 == 16)
                                      {
                                        if (*(_QWORD *)v80 == 0x61702E3365737373
                                          && *((_QWORD *)v80 + 1) == 0x3832312E622E7362)
                                        {
                                          goto LABEL_1226;
                                        }
                                        if (*(_QWORD *)v80 == 0x61702E3365737373
                                          && *((_QWORD *)v80 + 1) == 0x3832312E772E7362)
                                        {
                                          goto LABEL_1226;
                                        }
                                        if (*(_QWORD *)v80 == 0x61702E3365737373
                                          && *((_QWORD *)v80 + 1) == 0x3832312E642E7362)
                                        {
                                          goto LABEL_1226;
                                        }
                                        v504 = 0;
                                        v503 = 1;
                                      }
                                      else
                                      {
                                        v504 = 0;
                                        v503 = 0;
                                      }
LABEL_1105:
                                      if (*(_QWORD *)v80 != 0x6261702E32787661 || v80[8] != 115)
                                      {
                                        if ((v348 & 1) != 0)
                                        {
                                          v348 = 0;
                                          v583 = 1;
                                          goto LABEL_1116;
                                        }
                                        if (*(_QWORD *)v80 != 0x6D2E323135787661
                                          || *((_QWORD *)v80 + 1) != 0x736261702E6B7361)
                                        {
                                          v348 = 0;
                                          v583 = 0;
                                          goto LABEL_1116;
                                        }
                                      }
LABEL_1226:
                                      v2107 = *(llvm::ValueAsMetadata ***)v2106;
                                      v748 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                      v749 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40), 1, (uint64_t *)&v2107, 1);
                                      v751 = v749;
                                      if (v749)
                                        v752 = *(uint64_t ***)(v749 + 24);
                                      else
                                        v752 = 0;
                                      *(_QWORD *)&v2132 = v748;
                                      v755 = *(llvm::ConstantInt **)(*v2121 + 1888);
                                      LODWORD(v2112) = *(_DWORD *)(*v2121 + 1896) >> 8;
                                      if (v2112 > 0x40)
                                        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                                      else
                                        __src = 0;
                                      v756 = llvm::ConstantInt::get(v755, (llvm::LLVMContext *)&__src, v750);
                                      if (v2112 >= 0x41 && __src)
                                        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                                      *((_QWORD *)&v2132 + 1) = v756;
                                      LOWORD(v2115) = 257;
                                      Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v752, v751, (uint64_t *)&v2132, 2, (uint64_t)&__src, 0);
                                      v757 = 0;
                                      v758 = *((unsigned __int8 *)v2106 + 16);
                                      if (v758 != 84)
                                      {
                                        if (v758 == 39)
                                          v757 = (*((_DWORD *)v2106 + 20) + 1);
                                        else
                                          v757 = 2;
                                      }
                                      v759 = 0;
                                      v760 = *((_DWORD *)v2106 + 5);
                                      v761 = -(uint64_t)(v760 & 0x7FFFFFF);
                                      if (v760 < 0)
                                      {
                                        v1990 = (char *)v2106 - 32 * (v760 & 0x7FFFFFF);
                                        v1991 = *((_QWORD *)v1990 - 1);
                                        if ((v1991 & 0xFFFFFFFF0) != 0)
                                          v759 = *((_DWORD *)v1990 - 3) - *(_DWORD *)&v1990[-v1991];
                                        else
                                          v759 = 0;
                                      }
                                      v762 = (char *)v2106 + 32 * -v759 + -32 * v757;
                                      v763 = (char *)v2106 + 32 * v761;
                                      if (((v762 - v763 - 32) & 0x1FFFFFFFE0) != 0x60)
                                        goto LABEL_2999;
                                      v179 = (unsigned __int8 *)*((_QWORD *)v763 + 8);
                                      v180 = (_QWORD *)*((_QWORD *)v763 + 4);
                                      goto LABEL_1237;
                                    }
                                  }
                                }
                              }
                              v690 = (llvm::Constant ***)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                              v691 = *v690;
                              v692 = llvm::Constant::getNullValue(**v690, (llvm::Type *)v344);
                              LOWORD(v2115) = 257;
                              v693 = (llvm::Type *)sub_1C4774B48((uint64_t)&v2116, 40, (uint64_t)v691, (uint64_t)v692, (uint64_t)&__src);
                              v694 = 0;
LABEL_1599:
                              VectorSplat = (uint64_t)sub_1C5345234((uint64_t *)&v2116, v693, v694);
                              goto LABEL_2998;
                            }
                            v621 = v2106;
                            v851 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                            v852 = (_QWORD *)(v851 + 24);
                            if (*(_DWORD *)(v851 + 32) >= 0x41u)
                              v852 = (_QWORD *)*v852;
                            v622 = *(_DWORD *)v852;
LABEL_1090:
                            sub_1C5345780((uint64_t)&v2116, (uint64_t)v621, v622);
                            goto LABEL_2998;
                          }
LABEL_976:
                          v643 = *((_DWORD *)v2106 + 5);
                          v644 = v643 & 0x7FFFFFF;
                          v645 = (char *)v2106 - 32 * v644;
                          v646 = *((unsigned __int8 *)v2106 + 16);
                          if (v646 == 84)
                          {
                            v647 = 0;
                          }
                          else if (v646 == 39)
                          {
                            v647 = (*((_DWORD *)v2106 + 20) + 1);
                          }
                          else
                          {
                            v647 = 2;
                          }
                          if (v643 < 0 && (v2009 = *((_QWORD *)v645 - 1), (v2009 & 0xFFFFFFFF0) != 0))
                            v648 = (*((_DWORD *)v645 - 3) - *(_DWORD *)&v645[-v2009]);
                          else
                            v648 = 0;
                          v649 = (char *)v2106 + -32 * v648 + -32 * v647 - 32;
                          __src = &v2113;
                          v2112 = 0x400000000;
                          v650 = v649 - v645;
                          if ((unint64_t)(v649 - v645) >= 0x81)
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v650 >> 5, 8);
                            v651 = v2112;
                            v653 = (uint64_t **)__src;
                            v652 = v2112;
                          }
                          else
                          {
                            v651 = 0;
                            v652 = 0;
                            v653 = (uint64_t **)&v2113;
                          }
                          if (v645 != v649)
                          {
                            v654 = &v653[v651];
                            v655 = 32 * v644 - 32 * v647 - 32 * v648 - 32;
                            do
                            {
                              v656 = *(uint64_t **)v645;
                              v645 += 32;
                              *v654++ = v656;
                              v655 -= 32;
                            }
                            while (v655);
                            v653 = (uint64_t **)__src;
                          }
                          LODWORD(v2112) = v652 + ((unint64_t)v650 >> 5);
                          v657 = **v653;
                          v659 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v657);
                          if ((_DWORD)v658 == 1)
                          if ((*(_DWORD *)(v657 + 8) & 0xFE) == 0x12)
                            v657 = **(_QWORD **)(v657 + 16);
                          v660 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v657);
                          if (v659 == 128 && v660 == 32)
                          {
                            v662 = 11371;
                          }
                          else if (v659 == 256 && v660 == 32)
                          {
                            v662 = 11372;
                          }
                          else if (v659 == 512 && v660 == 32)
                          {
                            v662 = 11373;
                          }
                          else if (v659 == 128 && v660 == 64)
                          {
                            v662 = 11368;
                          }
                          else if (v660 == 64 && v659 == 256)
                          {
                            v662 = 11369;
                          }
                          else
                          {
                            v662 = 11370;
                          }
                          v878 = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v2106, v661);
                          v879 = v878;
                          v880 = v2112;
                          if (v659 == 512)
                          {
                            v881 = (char *)__src + 8 * v2112;
                            v882 = (llvm::ValueHandleBase *)*((_QWORD *)v881 - 1);
                            *((_QWORD *)v881 - 1) = v878;
                            v879 = v882;
                          }
                          if (v880 >= HIDWORD(v2112))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v880 + 1, 8);
                            LODWORD(v880) = v2112;
                          }
                          *((_QWORD *)__src + v880) = v879;
                          LODWORD(v2112) = v2112 + 1;
                          v883 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), v662, 0, 0);
                          if (v883)
                            v884 = *(uint64_t ***)(v883 + 24);
                          else
                            v884 = 0;
                          v2134 = 257;
                          v679 = sub_1C4774778((uint64_t *)&v2116, v884, v883, (uint64_t *)__src, v2112, (uint64_t)&v2132, 0);
LABEL_1481:
                          Select = (uint64_t *)v679;
                          v816 = __src;
                          if (__src == &v2113)
                            goto LABEL_2999;
                          goto LABEL_1482;
                        }
                        if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x706D63702E6B7361)
                          goto LABEL_915;
                        if (v81 >= 0x19)
                        {
                          if (*(_QWORD *)v80 == 0x6D2E323135787661
                            && *((_QWORD *)v80 + 1) == 0x687370762E6B7361
                            && *((_QWORD *)v80 + 2) == 0x626D717469626675
                            && v80[24] == 46)
                          {
                            v862 = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v2106
                                                                       - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)));
                            if ((_DWORD)v861 == 1)
                            if (v862 == 128)
                            {
                              v860 = 11860;
                            }
                            else if (v862 == 256)
                            {
                              v860 = 11861;
                            }
                            else
                            {
                              v860 = 11862;
                            }
                            goto LABEL_1595;
                          }
                        }
                        else if (v81 < 0x15)
                        {
                          v345 = 0;
                          goto LABEL_447;
                        }
                        if (*(_QWORD *)v80 != 0x6D2E323135787661
                          || *((_QWORD *)v80 + 1) != 0x6C6370662E6B7361
                          || *(_QWORD *)(v80 + 13) != 0x702E7373616C6370)
                        {
                          v345 = 0;
                          v5 = 0;
LABEL_448:
                          if (*(_QWORD *)v80 != 0x632E323135787661 || *((_DWORD *)v80 + 2) != 1882091629)
                          {
                            if (*(_QWORD *)v80 == 0x6D2E323135787661 && *((_QWORD *)v80 + 1) == 0x2E706D632E6B7361)
                            {
                              v621 = v2106;
                              v707 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                              v708 = (_QWORD *)(v707 + 24);
                              if (*(_DWORD *)(v707 + 32) >= 0x41u)
                                v708 = (_QWORD *)*v708;
                              v622 = *(_DWORD *)v708;
                              goto LABEL_1090;
                            }
                            v348 = 0;
                            goto LABEL_961;
                          }
                          goto LABEL_976;
                        }
                        v856 = **((_QWORD **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                        v858 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v856);
                        if ((_DWORD)v857 == 1)
                        if ((*(_DWORD *)(v856 + 8) & 0xFE) == 0x12)
                          v856 = **(_QWORD **)(v856 + 16);
                        v859 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v856);
                        if (v858 == 128 && v859 == 32)
                        {
                          v860 = 11323;
                        }
                        else if (v858 == 256 && v859 == 32)
                        {
                          v860 = 11324;
                        }
                        else if (v858 == 512 && v859 == 32)
                        {
                          v860 = 11325;
                        }
                        else if (v858 == 128 && v859 == 64)
                        {
                          v860 = 11320;
                        }
                        else if (v859 == 64 && v858 == 256)
                        {
                          v860 = 11321;
                        }
                        else
                        {
                          v860 = 11322;
                        }
LABEL_1595:
                        v913 = llvm::Intrinsic::getDeclaration(*((uint64_t **)v2101 + 5), v860, 0, 0);
                        if (v913)
                          v914 = *(uint64_t ***)(v913 + 24);
                        else
                          v914 = 0;
                        v915 = (_QWORD *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                        *(_QWORD *)&v2132 = *v915;
                        *((_QWORD *)&v2132 + 1) = v915[4];
                        LOWORD(v2115) = 257;
                        v693 = (llvm::Type *)sub_1C4774778((uint64_t *)&v2116, v914, v913, (uint64_t *)&v2132, 2, (uint64_t)&__src, 0);
                        v694 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                        goto LABEL_1599;
                      }
LABEL_490:
                      v376 = *(_QWORD *)v80 == 0x6D63702E32657373 && v80[8] == 112;
                      if (v376 || (*(_QWORD *)v80 == 0x6D63702E32787661 ? (v377 = v80[8] == 112) : (v377 = 0), v377))
                      {
                        if (v80[9] == 101)
                          v404 = 32;
                        else
                          v404 = 38;
                        v405 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                        v406 = *v405;
                        v407 = v405[4];
                        LOWORD(v2115) = 257;
                        v408 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&v2116, v404, v406, v407, (uint64_t)&__src);
                        v409 = *(llvm::ConstantAggregateZero **)v2106;
                        LOWORD(v2115) = 257;
                        p_src = &__src;
                        v411 = 40;
                        goto LABEL_577;
                      }
                      if ((v333 & 1) == 0)
                      {
                        v378 = *(_QWORD *)v80 == 0x622E323135787661 && *((_QWORD *)v80 + 1) == 0x7473616364616F72;
                        if (v378 && v80[16] == 109)
                        {
                          if (*(_DWORD *)(**((_QWORD **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)) + 8) == 2061)
                            v592 = (llvm::Type *)(*v4 + 1984);
                          else
                            v592 = (llvm::Type *)(*v4 + 1960);
                          v594 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v2106);
                          if ((_DWORD)v593 == 1)
                          v596 = llvm::Type::getPrimitiveSizeInBits(v592);
                          if ((_DWORD)v595 == 1)
                          v597 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                          LOWORD(v2115) = 257;
                          v598 = sub_1C4773E38((uint64_t *)&v2116, 39, v597, (uint64_t)v592, (uint64_t)&__src);
                          LOWORD(v2115) = 257;
                          VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v2116, (llvm::Type *)(v594 / v596), (uint64_t ***)v598, (uint64_t)&__src);
                          goto LABEL_2998;
                        }
                      }
                      if (v81 == 12)
                      {
                        if (*(_QWORD *)v80 != 0x7271732E32657373 || *((_DWORD *)v80 + 2) != 1685270132)
                        {
                          v330 = 0;
                          v331 = 1;
                          goto LABEL_874;
                        }
                      }
                      else
                      {
                        if (v81 != 11)
                        {
                          v330 = 0;
                          if (v81 < 0xA)
                          {
                            v335 = 1;
                            v334 = 1;
                            v336 = 1;
                            v337 = 1;
                            v331 = 0;
                            v338 = 1;
                            if (!v185)
                            {
LABEL_890:
                              v332 = 0;
                              goto LABEL_891;
                            }
LABEL_814:
                            if (*(_QWORD *)v80 == 0x6B2E323135787661 && *(_QWORD *)(v80 + 6) == 0x772E6E646E616B2ELL)
                            {
                              v714 = sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                              v715 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], 0x10u);
                              LOWORD(v2115) = 257;
                              v716 = (_QWORD *)sub_1C506EAA0((uint64_t)&v2116, v714, (uint64_t)&__src);
                              LOWORD(v2115) = 257;
                              v717 = sub_1C4D89BCC((uint64_t)&v2116, v716, v715, (uint64_t)&__src);
LABEL_1424:
                              v408 = (unsigned __int8 *)v717;
                              v409 = *(llvm::ConstantAggregateZero **)v2106;
                              LOWORD(v2115) = 257;
LABEL_1465:
                              p_src = &__src;
LABEL_1466:
                              v411 = 49;
                              goto LABEL_577;
                            }
                            v185 = 0;
                            v332 = 1;
                            goto LABEL_891;
                          }
                          v331 = 0;
LABEL_874:
                          v612 = *(_QWORD *)v80 == 0x747271732E787661 && *((_WORD *)v80 + 4) == 28718;
                          if (v612
                            || (v334 & 1) == 0
                            && (*(_QWORD *)v80 == 0x7271732E32657373
                              ? (v613 = *(_QWORD *)(v80 + 3) == 0x702E747271732E32)
                              : (v613 = 0),
                                v613)
                            || (*(_QWORD *)v80 == 0x747271732E657373
                              ? (v614 = *((unsigned __int16 *)v80 + 4) == 28718)
                              : (v614 = 0),
                                v614))
                          {
                            v619 = (uint64_t *)*((_QWORD *)v2101 + 5);
                            *(_QWORD *)&v2132 = *(_QWORD *)v2106;
                            v620 = llvm::Intrinsic::getDeclaration(v619, 280, (uint64_t *)&v2132, 1);
                            v579 = v620;
                            if (v620)
                              v580 = *(uint64_t ***)(v620 + 24);
                            else
                              v580 = 0;
                            v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v2106
                                                              - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                            v623 = 257;
LABEL_1093:
                            LOWORD(v2115) = v623;
LABEL_1094:
                            v709 = (uint64_t *)&v2107;
                            v710 = 1;
                            goto LABEL_1095;
                          }
                          v336 = v81 < 0x12;
                          if (v81 >= 0x12)
                          {
                            if (*(_QWORD *)v80 == 0x6D2E323135787661
                              && *((_QWORD *)v80 + 1) == 0x747271732E6B7361
                              && *((_WORD *)v80 + 8) == 28718)
                            {
                              v817 = *((unsigned __int8 *)v2106 + 16);
                              if (v817 == 84)
                              {
                                v818 = 0;
                              }
                              else if (v817 == 39)
                              {
                                v818 = (*((_DWORD *)v2106 + 20) + 1);
                              }
                              else
                              {
                                v818 = 2;
                              }
                              v819 = 0;
                              v820 = *((_DWORD *)v2106 + 5);
                              v821 = -(uint64_t)(v820 & 0x7FFFFFF);
                              if (v820 < 0)
                              {
                                v2042 = (char *)v2106 - 32 * (v820 & 0x7FFFFFF);
                                v2043 = *((_QWORD *)v2042 - 1);
                                if ((v2043 & 0xFFFFFFFF0) != 0)
                                  v819 = *((_DWORD *)v2042 - 3) - *(_DWORD *)&v2042[-v2043];
                                else
                                  v819 = 0;
                              }
                              v822 = (char *)v2106 + 32 * -v819 + -32 * v818;
                              v823 = (char *)v2106 + 32 * v821;
                              if (((v822 - v823 - 32) & 0x1FFFFFFFE0) != 0x80)
                                goto LABEL_1373;
                              v824 = *((_QWORD *)v823 + 12);
                              if (*(_BYTE *)(v824 + 16) == 16)
                              {
                                v825 = (_QWORD *)(v824 + 24);
                                if (*(_DWORD *)(v824 + 32) >= 0x41u)
                                  v825 = (_QWORD *)*v825;
                                if (*v825 == 4)
                                {
LABEL_1373:
                                  v826 = (uint64_t *)*((_QWORD *)v2101 + 5);
                                  *(_QWORD *)&v2132 = *(_QWORD *)v2106;
                                  v827 = llvm::Intrinsic::getDeclaration(v826, 280, (uint64_t *)&v2132, 1);
                                  v828 = v827;
                                  if (v827)
                                    v829 = *(uint64_t ***)(v827 + 24);
                                  else
                                    v829 = 0;
                                  v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v2106
                                                                    - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                                  LOWORD(v2115) = 257;
                                  v873 = (uint64_t *)&v2107;
                                  v874 = 1;
                                  goto LABEL_1493;
                                }
                              }
                              if (v80[18] == 115)
                                v870 = 11796;
                              else
                                v870 = 11795;
                              *(_QWORD *)&v2132 = *(_QWORD *)v823;
                              *((_QWORD *)&v2132 + 1) = v824;
                              v871 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v2106 + 5) + 56) + 40), v870, 0, 0);
                              v828 = v871;
                              if (v871)
                                v829 = *(uint64_t ***)(v871 + 24);
                              else
                                v829 = 0;
                              LOWORD(v2115) = 257;
                              v873 = (uint64_t *)&v2132;
LABEL_1492:
                              v874 = 2;
LABEL_1493:
                              v176 = sub_1C4774778((uint64_t *)&v2116, v829, v828, v873, v874, (uint64_t)&__src, 0);
                              goto LABEL_246;
                            }
                          }
                          else if (v81 < 0xD)
                          {
                            v338 = 0;
                            v335 = 1;
                            v336 = 1;
                            v337 = 1;
                            if (!v185)
                              goto LABEL_890;
                            goto LABEL_814;
                          }
                          if (*(_QWORD *)v80 != 0x702E323135787661 || *(_QWORD *)(v80 + 5) != 0x6D74736574702E32)
                          {
                            if (v81 < 0xE)
                            {
                              if (*(_QWORD *)v80 != 0x6B2E323135787661
                                || *(_QWORD *)(v80 + 5) != 0x6B63706E756B2E32)
                              {
                                if (*(_QWORD *)v80 == 0x6B2E323135787661
                                  && *(_QWORD *)(v80 + 5) == 0x772E646E616B2E32)
                                {
                                  v875 = (_QWORD *)sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106- 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                                  v876 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], 0x10u);
                                  LOWORD(v2115) = 257;
                                  v766 = sub_1C4D89BCC((uint64_t)&v2116, v875, v876, (uint64_t)&__src);
                                  goto LABEL_1464;
                                }
                                v338 = 0;
                                v332 = 0;
                                v185 = 1;
                                v335 = 1;
                                v336 = 1;
                                v337 = 1;
LABEL_891:
                                if (v331
                                  && (*(_QWORD *)v80 == 0x6B2E323135787661
                                    ? (v615 = *((_DWORD *)v80 + 2) == 1999532655)
                                    : (v615 = 0),
                                      v615))
                                {
                                  v764 = (_QWORD *)sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106- 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                                  v765 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], 0x10u);
                                  LOWORD(v2115) = 257;
                                  v766 = sub_1C4773594((uint64_t)&v2116, v764, v765, (uint64_t)&__src);
                                }
                                else
                                {
                                  if (!v185
                                    || (*(_QWORD *)v80 == 0x6B2E323135787661
                                      ? (v616 = *(_QWORD *)(v80 + 5) == 0x772E726F786B2E32)
                                      : (v616 = 0),
                                        !v616))
                                  {
                                    if (!v332
                                      || (*(_QWORD *)v80 == 0x6B2E323135787661
                                        ? (v617 = *(_QWORD *)(v80 + 6) == 0x772E726F6E786B2ELL)
                                        : (v617 = 0),
                                          !v617))
                                    {
                                      if (!v185)
                                        goto LABEL_426;
                                      if (*(_QWORD *)v80 != 0x6B2E323135787661
                                        || *(_QWORD *)(v80 + 5) != 0x772E746F6E6B2E32)
                                      {
                                        v344 = 1;
                                        goto LABEL_820;
                                      }
                                      v863 = sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                                      LOWORD(v2115) = 257;
                                      v408 = (unsigned __int8 *)sub_1C506EAA0((uint64_t)&v2116, v863, (uint64_t)&__src);
                                      v409 = *(llvm::ConstantAggregateZero **)v2106;
                                      LOWORD(v2115) = 257;
                                      goto LABEL_1465;
                                    }
                                    v853 = sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                                    v854 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], 0x10u);
                                    LOWORD(v2115) = 257;
                                    v855 = (_QWORD *)sub_1C506EAA0((uint64_t)&v2116, v853, (uint64_t)&__src);
                                    LOWORD(v2115) = 257;
                                    v717 = (uint64_t)sub_1C506EC1C((uint64_t *)&v2116, v855, v854, (uint64_t)&__src);
                                    goto LABEL_1424;
                                  }
                                  v849 = (_QWORD *)sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106- 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), 0x10u);
                                  v850 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], 0x10u);
                                  LOWORD(v2115) = 257;
                                  v766 = (uint64_t)sub_1C506EC1C((uint64_t *)&v2116, v849, v850, (uint64_t)&__src);
                                }
LABEL_1464:
                                v408 = (unsigned __int8 *)v766;
                                v409 = *(llvm::ConstantAggregateZero **)v2106;
                                LOWORD(v2115) = 257;
                                goto LABEL_1465;
                              }
                              goto LABEL_1442;
                            }
                            if (*(_QWORD *)v80 != 0x702E323135787661 || *(_QWORD *)(v80 + 6) != 0x6D6E74736574702ELL)
                            {
                              v335 = v81 < 0x16;
                              if (v81 >= 0x16)
                              {
                                v831 = *(_QWORD *)v80 == 0x6D2E323135787661
                                    && *((_QWORD *)v80 + 1) == 0x6F7262702E6B7361;
                                if (v831 && *(_QWORD *)(v80 + 14) == 0x7473616364616F72)
                                {
                                  v897 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                                  v898 = (llvm::Type *)*(unsigned int *)(**((_QWORD **)v897 + 4) + 32);
                                  v899 = *(uint64_t ****)v897;
                                  LOWORD(v2115) = 257;
                                  v176 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v2116, v898, v899, (uint64_t)&__src);
                                  goto LABEL_246;
                                }
                              }
                              if (*(_QWORD *)v80 != 0x6B2E323135787661
                                || *(_QWORD *)(v80 + 5) != 0x6B63706E756B2E32)
                              {
                                v337 = 0;
                                v338 = 0;
                                if (!v185)
                                  goto LABEL_890;
                                goto LABEL_814;
                              }
LABEL_1442:
                              v864 = *(llvm::ConstantAggregateZero **)v2106;
                              if ((*(_DWORD *)(*(_QWORD *)v2106 + 8) & 0xFE) == 0x12)
                                v864 = (llvm::ConstantAggregateZero *)**((_QWORD **)v864 + 2);
                              v865 = llvm::Type::getPrimitiveSizeInBits(v864);
                              v866 = sub_1C534544C((uint64_t)&v2116, *((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF)), v865);
                              v867 = sub_1C534544C((uint64_t)&v2116, ((unsigned __int8 **)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4], v865);
                              if (v865)
                              {
                                v868 = 0;
                                v869 = v865;
                                do
                                {
                                  *((_DWORD *)&__src + v868) = v868;
                                  ++v868;
                                }
                                while (v865 != v868);
                              }
                              else
                              {
                                v869 = 0;
                              }
                              v885 = v865 >> 1;
                              v2134 = 257;
                              v886 = sub_1C486AD20((uint64_t)&v2116, v866, v866, &__src, v885, (uint64_t)&v2132);
                              v2134 = 257;
                              v887 = sub_1C486AD20((uint64_t)&v2116, v867, v867, &__src, v885, (uint64_t)&v2132);
                              v2134 = 257;
                              v408 = (unsigned __int8 *)sub_1C486AD20((uint64_t)&v2116, v887, v886, &__src, v869, (uint64_t)&v2132);
                              v409 = *(llvm::ConstantAggregateZero **)v2106;
                              v2134 = 257;
                              p_src = (void **)&v2132;
                              goto LABEL_1466;
                            }
                          }
                          v834 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                          v835 = *(llvm::Constant ***)v834;
                          v836 = *((_QWORD *)v834 + 4);
                          v837 = (unsigned __int8 *)*((_QWORD *)v834 + 8);
                          LOWORD(v2115) = 257;
                          v838 = sub_1C4D89BCC((uint64_t)&v2116, v835, v836, (uint64_t)&__src);
                          v840 = llvm::Constant::getNullValue(*v835, v839);
                          if (*(_QWORD *)v80 ^ 0x702E323135787661 | *(_QWORD *)(v80 + 5) ^ 0x6D74736574702E32)
                            v841 = 32;
                          else
                            v841 = 33;
                          LOWORD(v2115) = 257;
                          v693 = (llvm::Type *)sub_1C4774B48((uint64_t)&v2116, v841, v838, (uint64_t)v840, (uint64_t)&__src);
                          v694 = v837;
                          goto LABEL_1599;
                        }
                        if (*(_QWORD *)v80 != 0x747271732E657373 || *(_QWORD *)(v80 + 3) != 0x73732E747271732ELL)
                        {
                          v331 = 0;
                          v330 = 1;
                          goto LABEL_874;
                        }
                      }
                      v586 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
                      LOWORD(v2115) = 257;
                      v587 = *(llvm::ConstantInt **)(*v2121 + 1984);
                      DWORD2(v2132) = *(_DWORD *)(*v2121 + 1992) >> 8;
                      if (DWORD2(v2132) > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)&v2132, 0, 0);
                      else
                        *(_QWORD *)&v2132 = 0;
                      v588 = llvm::ConstantInt::get(v587, (llvm::LLVMContext *)&v2132, (const llvm::APInt *)v5);
                      if (DWORD2(v2132) >= 0x41 && (_QWORD)v2132)
                        MEMORY[0x1CAA32F9C](v2132, 0x1000C8000313F17);
                      v2107 = (llvm::ValueAsMetadata **)sub_1C4772EE0((uint64_t *)&v2116, v586, (uint64_t)v588, (uint64_t)&__src);
                      v589 = (uint64_t *)*((_QWORD *)v2101 + 5);
                      __src = *v2107;
                      v590 = llvm::Intrinsic::getDeclaration(v589, 280, (uint64_t *)&__src, 1);
                      if (v590)
                        v591 = *(uint64_t ***)(v590 + 24);
                      else
                        v591 = 0;
                      LOWORD(v2115) = 257;
                      v627 = (llvm::ValueAsMetadata **)sub_1C4774778((uint64_t *)&v2116, v591, v590, (uint64_t *)&v2107, 1, (uint64_t)&__src, 0);
                      v2107 = v627;
                      LOWORD(v2115) = 257;
LABEL_927:
                      v628 = *(llvm::ConstantInt **)(*v2121 + 1984);
                      DWORD2(v2132) = *(_DWORD *)(*v2121 + 1992) >> 8;
                      if (DWORD2(v2132) > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)&v2132, 0, 0);
                      else
                        *(_QWORD *)&v2132 = 0;
                      v629 = llvm::ConstantInt::get(v628, (llvm::LLVMContext *)&v2132, v626);
                      if (DWORD2(v2132) >= 0x41 && (_QWORD)v2132)
                        MEMORY[0x1CAA32F9C](v2132, 0x1000C8000313F17);
                      v630 = v586;
                      v631 = (uint64_t)v627;
                      v632 = (llvm::Value **)v629;
                      goto LABEL_1102;
                    }
                    v185 = 0;
                    goto LABEL_480;
                  }
                  if (*(_QWORD *)v80 != 0x6F74732E32657373 || *(_QWORD *)(v80 + 6) != 0x71642E6C65726F74)
                  {
                    v185 = 1;
LABEL_480:
                    if (*(_QWORD *)v80 == 0x726F74732E657373 && *(_QWORD *)(v80 + 3) == 0x2E7565726F74732ELL)
                      goto LABEL_619;
                    if (v81 < 0xC)
                    {
                      if (*(_QWORD *)v80 != 0x726F74732E787661 || *(_QWORD *)(v80 + 3) != 0x2E7565726F74732ELL)
                        goto LABEL_489;
                      goto LABEL_619;
                    }
                    v425 = *(_QWORD *)v80 == 0x6F74732E32657373 && *((_DWORD *)v80 + 2) == 779445618;
                    if (v425
                      || (*(_QWORD *)v80 == 0x726F74732E787661
                        ? (v426 = *(_QWORD *)(v80 + 3) == 0x2E7565726F74732ELL)
                        : (v426 = 0),
                          v426))
                    {
LABEL_619:
                      v439 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                      v440 = *(unsigned __int8 **)v439;
                      v441 = *((_QWORD *)v439 + 4);
                      v442 = llvm::PointerType::get(*(llvm::PointerType **)v441, 0);
                      __src = "cast";
                      LOWORD(v2115) = 259;
                      v443 = sub_1C4773E38((uint64_t *)&v2116, 49, v440, v442, (uint64_t)&__src);
                      v444 = (char *)operator new(0x80uLL);
                      v445 = v444;
                      *((_DWORD *)v444 + 21) = *((_DWORD *)v444 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v444 = 0;
                      *((_QWORD *)v444 + 2) = 0;
                      *((_QWORD *)v444 + 1) = 0;
                      *((_QWORD *)v444 + 5) = 0;
                      *((_QWORD *)v444 + 6) = 0;
                      *((_QWORD *)v444 + 4) = 0;
                      v446 = (unsigned __int8 **)(v444 + 32);
                      *((_QWORD *)v444 + 8) = ***(_QWORD ***)v441 + 1576;
                      v447 = (llvm::Value *)(v444 + 64);
                      *((_QWORD *)v444 + 3) = v444 + 64;
                      *((_QWORD *)v444 + 7) = v444 + 64;
                      *((_QWORD *)v444 + 9) = 0;
                      v444[80] = 61;
                      v444[81] = 0;
                      *((_WORD *)v444 + 41) = 0;
                      *((_DWORD *)v444 + 21) = 2;
                      *(_OWORD *)(v444 + 88) = 0u;
                      *(_OWORD *)(v444 + 104) = 0u;
                      *((_DWORD *)v444 + 30) = 0;
                      *(_QWORD *)v444 = v441;
                      v450 = *(_QWORD *)(v441 + 8);
                      v449 = (_QWORD *)(v441 + 8);
                      v448 = v450;
                      *((_QWORD *)v444 + 1) = v450;
                      if (v450)
                        *(_QWORD *)(v448 + 16) = v444 + 8;
                      *((_QWORD *)v444 + 2) = v449;
                      *v449 = v444;
                      if (*((_QWORD *)v444 + 4))
                      {
                        **((_QWORD **)v444 + 6) = *((_QWORD *)v444 + 5);
                        v1903 = *((_QWORD *)v444 + 5);
                        if (v1903)
                          *(_QWORD *)(v1903 + 16) = *((_QWORD *)v444 + 6);
                      }
                      *v446 = v443;
                      if (v443)
                      {
                        v453 = *((_QWORD *)v443 + 1);
                        v452 = (unsigned __int8 ***)(v443 + 8);
                        v451 = v453;
                        *((_QWORD *)v444 + 5) = v453;
                        if (v453)
                          *(_QWORD *)(v451 + 16) = v444 + 40;
                        *((_QWORD *)v444 + 6) = v452;
                        *v452 = v446;
                      }
                      *((_WORD *)v444 + 41) = 0;
                      v444[124] = 1;
                      LOWORD(v2115) = 257;
                      (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v2123 + 2))(v2123, v447, &__src, v2119, v2120);
                      if (!(_DWORD)v2117)
                        goto LABEL_3002;
                      v454 = (char *)v2116;
                      v455 = (char *)v2116 + 16 * v2117;
                      v456 = (unsigned __int8 **)(v445 + 112);
                      while (1)
                      {
                        v457 = *(_DWORD *)v454;
                        v458 = (unsigned __int8 *)*((_QWORD *)v454 + 1);
                        if (v458)
                        {
                          if (!v457)
                          {
                            *(_QWORD *)&v2132 = *((_QWORD *)v454 + 1);
                            llvm::MetadataTracking::track((uint64_t)&v2132, v458, 2);
                            v459 = *v456;
                            goto LABEL_638;
                          }
                        }
                        else
                        {
                          v459 = *v456;
                          if (!*v456 && (v445[87] & 0x20) == 0)
                            goto LABEL_635;
                          if (!v457)
                          {
                            *(_QWORD *)&v2132 = 0;
LABEL_638:
                            if (v459)
                              llvm::MetadataTracking::untrack((uint64_t)(v445 + 112), v459);
                            v460 = (unsigned __int8 *)v2132;
                            *v456 = (unsigned __int8 *)v2132;
                            if (v460)
                              llvm::MetadataTracking::retrack((uint64_t)&v2132, v460, (uint64_t)(v445 + 112));
                            goto LABEL_635;
                          }
                        }
                        llvm::Value::setMetadata(v447, *(_DWORD *)v454, (llvm::MDNode *)v458);
LABEL_635:
                        v454 += 16;
                        if (v454 == v455)
                          goto LABEL_3002;
                      }
                    }
                    if (v81 == 20)
                    {
                      if (*(_QWORD *)v80 == 0x6D2E323135787661
                        && *((_QWORD *)v80 + 1) == 0x726F74732E6B7361
                        && *((_DWORD *)v80 + 4) == 1936928357)
                      {
                        v429 = (_QWORD *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[8];
                        v430 = *(llvm::ConstantInt **)(*v2121 + 1912);
                        v431 = *(_DWORD *)(*v2121 + 1920);
                        LODWORD(v2112) = v431 >> 8;
                        if (v431 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
                        }
                        else
                        {
                          if (v431 <= 0xFF)
                            v432 = 0;
                          else
                            v432 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v431);
                          __src = (void *)(v432 & 1);
                        }
                        v433 = llvm::ConstantInt::get(v430, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
                        if (v2112 >= 0x41 && __src)
                          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                        LOWORD(v2115) = 257;
                        v434 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v2116, v429, (uint64_t)v433, (uint64_t)&__src);
                        v435 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                        v436 = *(unsigned __int8 **)v435;
                        v437 = (llvm::PointerType **)*((_QWORD *)v435 + 4);
                        v438 = 0;
                        goto LABEL_921;
                      }
                    }
                    else if (v81 < 0x11)
                    {
LABEL_489:
                      v334 = 0;
                      v333 = 1;
                      goto LABEL_490;
                    }
                    if (*(_QWORD *)v80 != 0x6D2E323135787661
                      || *((_QWORD *)v80 + 1) != 0x726F74732E6B7361
                      || v80[16] != 101)
                    {
                      v333 = 0;
                      v334 = 0;
                      goto LABEL_490;
                    }
                    v438 = v80[17] != 117;
                    v624 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                    v436 = *(unsigned __int8 **)v624;
                    v437 = (llvm::PointerType **)*((_QWORD *)v624 + 4);
                    v434 = (unsigned __int8 *)*((_QWORD *)v624 + 8);
LABEL_921:
                    sub_1C5344FD4((uint64_t *)&v2116, v436, v437, v434, v438);
                    goto LABEL_3002;
                  }
                  v513 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
                  v514 = *(unsigned __int8 **)v513;
                  v515 = (unsigned __int8 *)*((_QWORD *)v513 + 4);
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v4 + 1984), (llvm::Type *)2);
                  __src = "cast";
                  LOWORD(v2115) = 259;
                  v517 = sub_1C4773E38((uint64_t *)&v2116, 49, v515, v516, (uint64_t)&__src);
                  LOWORD(v2115) = 257;
                  v518 = sub_1C5344F14((uint64_t)&v2116, (uint64_t)v517, (const llvm::APInt *)&__src);
                  v519 = llvm::PointerType::get(*(llvm::PointerType **)v518, 0);
                  __src = "cast";
                  LOWORD(v2115) = 259;
                  v520 = sub_1C4773E38((uint64_t *)&v2116, 49, v514, v519, (uint64_t)&__src);
                  v521 = (char *)operator new(0x80uLL);
                  v522 = v521;
                  *((_DWORD *)v521 + 21) = *((_DWORD *)v521 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v521 = 0;
                  *((_QWORD *)v521 + 2) = 0;
                  *((_QWORD *)v521 + 1) = 0;
                  *((_QWORD *)v521 + 4) = 0;
                  v523 = (unsigned __int8 **)(v521 + 32);
                  *((_QWORD *)v521 + 5) = 0;
                  *((_QWORD *)v521 + 6) = 0;
                  *((_QWORD *)v521 + 8) = ***(_QWORD ***)v518 + 1576;
                  v524 = (llvm::Value *)(v521 + 64);
                  *((_QWORD *)v521 + 3) = v521 + 64;
                  *((_QWORD *)v521 + 7) = v521 + 64;
                  *((_QWORD *)v521 + 9) = 0;
                  v521[80] = 61;
                  v521[81] = 0;
                  *((_WORD *)v521 + 41) = 0;
                  *((_DWORD *)v521 + 21) = 2;
                  *(_OWORD *)(v521 + 88) = 0u;
                  *(_OWORD *)(v521 + 104) = 0u;
                  *((_DWORD *)v521 + 30) = 0;
                  *(_QWORD *)v521 = v518;
                  v527 = *((_QWORD *)v518 + 1);
                  v526 = v518 + 8;
                  v525 = v527;
                  *((_QWORD *)v521 + 1) = v527;
                  if (v527)
                    *(_QWORD *)(v525 + 16) = v521 + 8;
                  *((_QWORD *)v521 + 2) = v526;
                  *v526 = v521;
                  if (*((_QWORD *)v521 + 4))
                  {
                    **((_QWORD **)v521 + 6) = *((_QWORD *)v521 + 5);
                    v1968 = *((_QWORD *)v521 + 5);
                    if (v1968)
                      *(_QWORD *)(v1968 + 16) = *((_QWORD *)v521 + 6);
                  }
                  *v523 = v520;
                  if (v520)
                  {
                    v530 = *((_QWORD *)v520 + 1);
                    v529 = (unsigned __int8 ***)(v520 + 8);
                    v528 = v530;
                    *((_QWORD *)v521 + 5) = v530;
                    if (v530)
                      *(_QWORD *)(v528 + 16) = v521 + 40;
                    *((_QWORD *)v521 + 6) = v529;
                    *v529 = v523;
                  }
                  *((_WORD *)v521 + 41) = 0;
                  v521[124] = 1;
                  LOWORD(v2115) = 257;
                  (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v2123 + 2))(v2123, v524, &__src, v2119, v2120);
                  if (!(_DWORD)v2117)
                    goto LABEL_3002;
                  v531 = (char *)v2116;
                  v532 = (char *)v2116 + 16 * v2117;
                  v533 = (unsigned __int8 **)(v522 + 112);
                  while (1)
                  {
                    v534 = *(_DWORD *)v531;
                    v535 = (unsigned __int8 *)*((_QWORD *)v531 + 1);
                    if (v535)
                    {
                      if (!v534)
                      {
                        *(_QWORD *)&v2132 = *((_QWORD *)v531 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v2132, v535, 2);
                        v536 = *v533;
                        goto LABEL_755;
                      }
                    }
                    else
                    {
                      v536 = *v533;
                      if (!*v533 && (v522[87] & 0x20) == 0)
                        goto LABEL_752;
                      if (!v534)
                      {
                        *(_QWORD *)&v2132 = 0;
LABEL_755:
                        if (v536)
                          llvm::MetadataTracking::untrack((uint64_t)(v522 + 112), v536);
                        v537 = (unsigned __int8 *)v2132;
                        *v533 = (unsigned __int8 *)v2132;
                        if (v537)
                          llvm::MetadataTracking::retrack((uint64_t)&v2132, v537, (uint64_t)(v522 + 112));
                        goto LABEL_752;
                      }
                    }
                    llvm::Value::setMetadata(v524, *(_DWORD *)v531, (llvm::MDNode *)v535);
LABEL_752:
                    v531 += 16;
                    if (v531 == v532)
                      goto LABEL_3002;
                  }
                }
                if (*(_QWORD *)v80 != 0x732E323135787661 || *(_QWORD *)(v80 + 7) != 0x2E746E65726F7473)
                  goto LABEL_424;
              }
              v349 = (uint64_t **)*((_QWORD *)v2101 + 5);
              *(_QWORD *)&v2132 = &v2133;
              *((_QWORD *)&v2132 + 1) = 0x100000000;
              v350 = *(llvm::ConstantInt **)(*v4 + 1960);
              v351 = *(_DWORD *)(*v4 + 1968);
              LODWORD(v2112) = v351 >> 8;
              if (v351 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
              }
              else
              {
                if (v351 <= 0xFF)
                  v352 = 0;
                else
                  v352 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v351);
                __src = (void *)(v352 & 1);
              }
              v354 = llvm::ConstantInt::get(v350, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
              if (v2112 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              v355 = llvm::ValueAsMetadata::get(v354, v353);
              v356 = DWORD2(v2132);
              if (DWORD2(v2132) >= HIDWORD(v2132))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2132, (uint64_t)&v2133, DWORD2(v2132) + 1, 8);
                v356 = DWORD2(v2132);
              }
              *(_QWORD *)(v2132 + 8 * v356) = v355;
              ++DWORD2(v2132);
              v308 = (void *)llvm::MDTuple::getImpl(v4, (_QWORD *)v2132, DWORD2(v2132), 0, 1);
              v357 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
              v358 = *(unsigned __int8 **)v357;
              v359 = *((_QWORD *)v357 + 4);
              v360 = llvm::PointerType::get(*(llvm::PointerType **)v359, 0);
              __src = "cast";
              LOWORD(v2115) = 259;
              v361 = sub_1C4773E38((uint64_t *)&v2116, 49, v358, v360, (uint64_t)&__src);
              v362 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v359) >> 3;
              v363 = (char *)operator new(0x80uLL);
              v319 = v363;
              *((_DWORD *)v363 + 21) = *((_DWORD *)v363 + 21) & 0x38000000 | 2;
              *(_QWORD *)v363 = 0;
              *((_QWORD *)v363 + 2) = 0;
              *((_QWORD *)v363 + 1) = 0;
              *((_QWORD *)v363 + 5) = 0;
              *((_QWORD *)v363 + 6) = 0;
              *((_QWORD *)v363 + 4) = 0;
              v364 = (unsigned __int8 **)(v363 + 32);
              *((_QWORD *)v363 + 8) = ***(_QWORD ***)v359 + 1576;
              v321 = (llvm::Value *)(v363 + 64);
              *((_QWORD *)v363 + 3) = v363 + 64;
              *((_QWORD *)v363 + 7) = v363 + 64;
              *((_QWORD *)v363 + 9) = 0;
              v363[80] = 61;
              v363[81] = 0;
              *((_WORD *)v363 + 41) = 0;
              *((_DWORD *)v363 + 21) = 2;
              *(_OWORD *)(v363 + 88) = 0u;
              *(_OWORD *)(v363 + 104) = 0u;
              *((_DWORD *)v363 + 30) = 0;
              *(_QWORD *)v363 = v359;
              v367 = *(_QWORD *)(v359 + 8);
              v366 = (_QWORD *)(v359 + 8);
              v365 = v367;
              *((_QWORD *)v363 + 1) = v367;
              if (v367)
                *(_QWORD *)(v365 + 16) = v363 + 8;
              v368 = __clz(v362);
              *((_QWORD *)v363 + 2) = v366;
              *v366 = v363;
              if (*((_QWORD *)v363 + 4))
              {
                **((_QWORD **)v363 + 6) = *((_QWORD *)v363 + 5);
                v1902 = *((_QWORD *)v363 + 5);
                if (v1902)
                  *(_QWORD *)(v1902 + 16) = *((_QWORD *)v363 + 6);
              }
              *v364 = v361;
              if (v361)
              {
                v371 = *((_QWORD *)v361 + 1);
                v370 = (unsigned __int8 ***)(v361 + 8);
                v369 = v371;
                *((_QWORD *)v363 + 5) = v371;
                if (v371)
                  *(_QWORD *)(v369 + 16) = v363 + 40;
                *((_QWORD *)v363 + 6) = v370;
                *v370 = v364;
              }
              *((_WORD *)v363 + 41) = (126 - 2 * v368) & 0x7E;
              v363[124] = 1;
              LOWORD(v2115) = 257;
              (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v2123 + 2))(v2123, v321, &__src, v2119, v2120);
              if (!(_DWORD)v2117)
              {
LABEL_473:
                v328 = *v349;
LABEL_474:
                v372 = llvm::LLVMContext::getMDKindID(v328, "nontemporal", 0xBuLL);
                if (v308)
                {
                  if (!v372)
                  {
                    __src = v308;
                    llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v308, 2);
                    v373 = (unsigned __int8 *)*((_QWORD *)v319 + 14);
                    goto LABEL_760;
                  }
                }
                else
                {
                  v373 = (unsigned __int8 *)*((_QWORD *)v319 + 14);
                  if (!v373 && (v319[87] & 0x20) == 0)
                    goto LABEL_525;
                  if (!v372)
                  {
                    __src = 0;
LABEL_760:
                    if (v373)
                      llvm::MetadataTracking::untrack((uint64_t)(v319 + 112), v373);
                    v538 = (unsigned __int8 *)__src;
                    *((_QWORD *)v319 + 14) = __src;
                    if (v538)
                      llvm::MetadataTracking::retrack((uint64_t)&__src, v538, (uint64_t)(v319 + 112));
LABEL_525:
                    v385 = v2106;
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v2106 + 5) + 40, (uint64_t ***)v2106);
                    v386 = *((_QWORD *)v2106 + 3);
                    v387 = (_QWORD *)*((_QWORD *)v2106 + 4);
                    *v387 = v386;
                    *(_QWORD *)(v386 + 8) = v387;
                    *((_QWORD *)v385 + 3) = 0;
                    *((_QWORD *)v385 + 4) = 0;
                    llvm::Value::deleteValue(v385);
                    v213 = (void *)v2132;
                    if ((__int128 *)v2132 == &v2133)
                      goto LABEL_3004;
                    goto LABEL_526;
                  }
                }
                llvm::Value::setMetadata(v321, v372, (llvm::MDNode *)v308);
                goto LABEL_525;
              }
              v663 = (char *)v2116;
              v664 = (char *)v2116 + 16 * v2117;
              v665 = (unsigned __int8 **)(v319 + 112);
              while (1)
              {
                v666 = *(_DWORD *)v663;
                v667 = (unsigned __int8 *)*((_QWORD *)v663 + 1);
                if (v667)
                {
                  if (!v666)
                  {
                    v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v663 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v2107, v667, 2);
                    v668 = *v665;
                    goto LABEL_1005;
                  }
                }
                else
                {
                  v668 = *v665;
                  if (!*v665 && (v319[87] & 0x20) == 0)
                    goto LABEL_1002;
                  if (!v666)
                  {
                    v2107 = 0;
LABEL_1005:
                    if (v668)
                      llvm::MetadataTracking::untrack((uint64_t)(v319 + 112), v668);
                    v669 = (unsigned __int8 *)v2107;
                    *v665 = (unsigned __int8 *)v2107;
                    if (v669)
                      llvm::MetadataTracking::retrack((uint64_t)&v2107, v669, (uint64_t)(v319 + 112));
                    goto LABEL_1002;
                  }
                }
                llvm::Value::setMetadata(v321, *(_DWORD *)v663, (llvm::MDNode *)v667);
LABEL_1002:
                v663 += 16;
                if (v663 == v664)
                  goto LABEL_473;
              }
            }
            v300 = (uint64_t **)*((_QWORD *)v2101 + 5);
            *(_QWORD *)&v2132 = &v2133;
            *((_QWORD *)&v2132 + 1) = 0x100000000;
            v301 = *(llvm::ConstantInt **)(*v4 + 1960);
            v302 = *(_DWORD *)(*v4 + 1968);
            LODWORD(v2112) = v302 >> 8;
            if (v302 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
            }
            else
            {
              if (v302 <= 0xFF)
                v303 = 0;
              else
                v303 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v302);
              __src = (void *)(v303 & 1);
            }
            v305 = llvm::ConstantInt::get(v301, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
            if (v2112 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            v306 = llvm::ValueAsMetadata::get(v305, v304);
            v307 = DWORD2(v2132);
            if (DWORD2(v2132) >= HIDWORD(v2132))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v2132, (uint64_t)&v2133, DWORD2(v2132) + 1, 8);
              v307 = DWORD2(v2132);
            }
            *(_QWORD *)(v2132 + 8 * v307) = v306;
            ++DWORD2(v2132);
            v308 = (void *)llvm::MDTuple::getImpl(v4, (_QWORD *)v2132, DWORD2(v2132), 0, 1);
            v309 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
            v310 = *(unsigned __int8 **)v309;
            v311 = *((_QWORD *)v309 + 4);
            v312 = llvm::PointerType::get(*(llvm::PointerType **)(*(_QWORD *)v311 + 24), 0);
            __src = "cast";
            LOWORD(v2115) = 259;
            v314 = sub_1C4773E38((uint64_t *)&v2116, 49, v310, v312, (uint64_t)&__src);
            __src = "extractelement";
            LOWORD(v2115) = 259;
            v315 = *(llvm::ConstantInt **)(*v2121 + 1984);
            LODWORD(v2108) = *(_DWORD *)(*v2121 + 1992) >> 8;
            if (v2108 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v2107, 0, 0);
            else
              v2107 = 0;
            v316 = llvm::ConstantInt::get(v315, (llvm::LLVMContext *)&v2107, v313);
            if (v2108 >= 0x41 && v2107)
              MEMORY[0x1CAA32F9C](v2107, 0x1000C8000313F17);
            v317 = sub_1C4772EE0((uint64_t *)&v2116, v311, (uint64_t)v316, (uint64_t)&__src);
            v318 = (char *)operator new(0x80uLL);
            v319 = v318;
            *((_DWORD *)v318 + 21) = *((_DWORD *)v318 + 21) & 0x38000000 | 2;
            *(_QWORD *)v318 = 0;
            *((_QWORD *)v318 + 2) = 0;
            *((_QWORD *)v318 + 1) = 0;
            *((_QWORD *)v318 + 5) = 0;
            *((_QWORD *)v318 + 6) = 0;
            *((_QWORD *)v318 + 4) = 0;
            v320 = (unsigned __int8 **)(v318 + 32);
            *((_QWORD *)v318 + 8) = ***(_QWORD ***)v317 + 1576;
            v321 = (llvm::Value *)(v318 + 64);
            *((_QWORD *)v318 + 3) = v318 + 64;
            *((_QWORD *)v318 + 7) = v318 + 64;
            *((_QWORD *)v318 + 9) = 0;
            v318[80] = 61;
            v318[81] = 0;
            *((_WORD *)v318 + 41) = 0;
            *((_DWORD *)v318 + 21) = 2;
            *(_OWORD *)(v318 + 88) = 0u;
            *(_OWORD *)(v318 + 104) = 0u;
            *((_DWORD *)v318 + 30) = 0;
            *(_QWORD *)v318 = v317;
            v324 = *((_QWORD *)v317 + 1);
            v323 = v317 + 8;
            v322 = v324;
            *((_QWORD *)v318 + 1) = v324;
            if (v324)
              *(_QWORD *)(v322 + 16) = v318 + 8;
            *((_QWORD *)v318 + 2) = v323;
            *v323 = v318;
            if (*((_QWORD *)v318 + 4))
            {
              **((_QWORD **)v318 + 6) = *((_QWORD *)v318 + 5);
              v1904 = *((_QWORD *)v318 + 5);
              if (v1904)
                *(_QWORD *)(v1904 + 16) = *((_QWORD *)v318 + 6);
            }
            *v320 = v314;
            if (v314)
            {
              v327 = *((_QWORD *)v314 + 1);
              v326 = (unsigned __int8 ***)(v314 + 8);
              v325 = v327;
              *((_QWORD *)v318 + 5) = v327;
              if (v327)
                *(_QWORD *)(v325 + 16) = v318 + 40;
              *((_QWORD *)v318 + 6) = v326;
              *v326 = v320;
            }
            *((_WORD *)v318 + 41) = 0;
            v318[124] = 1;
            LOWORD(v2115) = 257;
            (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v2123 + 2))(v2123, v321, &__src, v2119, v2120);
            if (!(_DWORD)v2117)
            {
LABEL_419:
              v328 = *v300;
              goto LABEL_474;
            }
            v700 = (char *)v2116;
            v701 = (char *)v2116 + 16 * v2117;
            v702 = (unsigned __int8 **)(v319 + 112);
            while (1)
            {
              v703 = *(_DWORD *)v700;
              v704 = (unsigned __int8 *)*((_QWORD *)v700 + 1);
              if (v704)
              {
                if (!v703)
                {
                  v2107 = (llvm::ValueAsMetadata **)*((_QWORD *)v700 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v2107, v704, 2);
                  v705 = *v702;
                  goto LABEL_1083;
                }
              }
              else
              {
                v705 = *v702;
                if (!*v702 && (v319[87] & 0x20) == 0)
                  goto LABEL_1080;
                if (!v703)
                {
                  v2107 = 0;
LABEL_1083:
                  if (v705)
                    llvm::MetadataTracking::untrack((uint64_t)(v319 + 112), v705);
                  v706 = (unsigned __int8 *)v2107;
                  *v702 = (unsigned __int8 *)v2107;
                  if (v706)
                    llvm::MetadataTracking::retrack((uint64_t)&v2107, v706, (uint64_t)(v319 + 112));
                  goto LABEL_1080;
                }
              }
              llvm::Value::setMetadata(v321, *(_DWORD *)v700, (llvm::MDNode *)v704);
LABEL_1080:
              v700 += 16;
              if (v700 == v701)
                goto LABEL_419;
            }
          }
LABEL_140:
          if (v85)
          {
LABEL_141:
            if (v81 != 23)
            {
              if (v81 == 19)
              {
                v168 = *(_QWORD *)v80 == 0x6F72706B63617473 && *((_QWORD *)v80 + 1) == 0x6863726F74636574;
                if (v168 && *(_QWORD *)(v80 + 11) == 0x6B63656863726F74)
                {
LABEL_3002:
                  v381 = v2106;
LABEL_3003:
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v381 + 5) + 40, (uint64_t ***)v381);
                  v1676 = *((_QWORD *)v381 + 3);
                  v1677 = (_QWORD *)*((_QWORD *)v381 + 4);
                  *v1677 = v1676;
                  *(_QWORD *)(v1676 + 8) = v1677;
                  *((_QWORD *)v381 + 3) = 0;
                  *((_QWORD *)v381 + 4) = 0;
                  llvm::Value::deleteValue(v381);
                  goto LABEL_3004;
                }
              }
              goto LABEL_228;
            }
            v144 = 0;
            goto LABEL_143;
          }
          goto LABEL_249;
        }
        v80 += 5;
        v2103 = (unsigned __int8 *)v80;
        v2104 = v81 - 5;
        v81 -= 5;
      }
      if (v81 < 4)
        goto LABEL_140;
      goto LABEL_139;
    }
    v22 = ***(_QWORD ***)v2101;
    v23 = *(_QWORD *)(v22 + 152);
    v24 = *(unsigned int *)(v22 + 168);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((v2101 >> 4) ^ (v2101 >> 9));
      v26 = (llvm::PoisonValue **)(v23 + 16 * v25);
      v27 = *v26;
      if (*v26 == v2101)
      {
LABEL_72:
        v75 = v26[1];
        v78 = *(_QWORD *)v75;
        v76 = (char *)v75 + 16;
        v77 = v78;
        goto LABEL_73;
      }
      v28 = 1;
      while (v27 != (llvm::PoisonValue *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(llvm::PoisonValue **)(v23 + 16 * v25);
        if (v27 == v2101)
        {
          v26 = (llvm::PoisonValue **)(v23 + 16 * v25);
          goto LABEL_72;
        }
      }
    }
    v26 = (llvm::PoisonValue **)(v23 + 16 * v24);
    goto LABEL_72;
  }
  v2107 = &v2106;
  v2108 = &v2105;
  v2109 = &v2116;
  v7 = *((_DWORD *)v2105 + 9);
  if (v7 <= 3981)
  {
    if (v7 <= 235)
    {
      if (v7 <= 162)
      {
        switch(v7)
        {
          case '4':
          case '6':
            v72 = (uint64_t **)*((_QWORD *)v2105 + 3);
            *(_QWORD *)&v2132 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
            v73 = *v2121;
            v74 = *(llvm::ValueHandleBase **)(*v2121 + 1568);
            if (!v74)
            {
              v638 = *(llvm::ConstantInt **)(v73 + 1888);
              LODWORD(v2112) = *(_DWORD *)(v73 + 1896) >> 8;
              if (v2112 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
              else
                __src = 0;
              v74 = llvm::ConstantInt::get(v638, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
              if (v2112 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              *(_QWORD *)(v73 + 1568) = v74;
            }
            *((_QWORD *)&v2132 + 1) = v74;
            LOWORD(v2115) = 257;
            v45 = (uint64_t *)&v2132;
            v43 = v72;
            v44 = (llvm::CallBase *)v6;
            goto LABEL_652;
          case '5':
            goto LABEL_300;
          case '7':
          case '8':
          case '9':
            goto LABEL_669;
          case ':':
            v381 = v2106;
            v382 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
            if (!v382 || v382[16] > 0x14u)
              goto LABEL_3003;
            if ((llvm::Constant::isZeroValue((llvm::Constant *)v382) & 1) == 0)
              goto LABEL_3002;
            v44 = v2105;
            if (v2105)
              v43 = (uint64_t **)*((_QWORD *)v2105 + 3);
            else
              v43 = 0;
            v611 = (_QWORD *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
            *(_QWORD *)&v2132 = *v611;
            *((_QWORD *)&v2132 + 1) = v611[8];
            *(_QWORD *)&v2133 = v611[12];
            LOWORD(v2115) = 257;
            v45 = (uint64_t *)&v2132;
            v46 = 3;
            goto LABEL_653;
          default:
            if (v7 != 8 && v7 != 17)
              goto LABEL_669;
LABEL_300:
            v43 = (uint64_t **)*((_QWORD *)v2105 + 3);
            v207 = *((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
            goto LABEL_301;
        }
      }
      v8 = v7 - 163;
      if (v8 > 0x24)
        goto LABEL_669;
      if (((1 << v8) & 0x1E00000) != 0)
      {
        v127 = *((_DWORD *)v2106 + 5);
        v128 = v127 & 0x7FFFFFF;
        v129 = (char *)v2106 - 32 * v128;
        v130 = *((unsigned __int8 *)v2106 + 16);
        if (v130 == 84)
        {
          v131 = 0;
        }
        else if (v130 == 39)
        {
          v131 = (*((_DWORD *)v2106 + 20) + 1);
        }
        else
        {
          v131 = 2;
        }
        if (v127 < 0 && (v1871 = *((_QWORD *)v129 - 1), (v1871 & 0xFFFFFFFF0) != 0))
          v132 = (*((_DWORD *)v129 - 3) - *(_DWORD *)&v129[-v1871]);
        else
          v132 = 0;
        v133 = (char *)v2106 + -32 * v132 + -32 * v131 - 32;
        __src = &v2113;
        v2112 = 0x400000000;
        v134 = v133 - v129;
        if ((unint64_t)(v133 - v129) >= 0x81)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v134 >> 5, 8);
          v135 = v2112;
          v136 = v2112;
        }
        else
        {
          v135 = 0;
          v136 = 0;
        }
        if (v129 != v133)
        {
          v137 = (char *)__src + 8 * v135;
          v138 = 32 * v128 - 32 * v131 - 32 * v132 - 32;
          do
          {
            v139 = *(_QWORD *)v129;
            v129 += 32;
            *v137++ = v139;
            v138 -= 32;
          }
          while (v138);
        }
        LODWORD(v2112) = v136 + ((unint64_t)v134 >> 5);
        if (v2105)
          v140 = (uint64_t **)*((_QWORD *)v2105 + 3);
        else
          v140 = 0;
        v2134 = 257;
        v16 = sub_1C4774778((uint64_t *)&v2116, v140, (uint64_t)v2105, (uint64_t *)__src, v136 + ((unint64_t)v134 >> 5), (uint64_t)&v2132, 0);
        llvm::Instruction::copyMetadata(v16, (uint64_t)v2106, 0, 0);
LABEL_319:
        v232 = __src;
        if (__src == &v2113)
          goto LABEL_654;
        goto LABEL_399;
      }
      if (((1 << v8) & 0x1480000000) != 0)
      {
        v9 = *((unsigned __int8 *)v2106 + 16);
        if (v9 == 84)
        {
          v10 = 0;
        }
        else if (v9 == 39)
        {
          v10 = (*((_DWORD *)v2106 + 20) + 1);
        }
        else
        {
          v10 = 2;
        }
        v11 = *((_DWORD *)v2106 + 5);
        if (v11 < 0
          && (v1872 = (char *)v2106 - 32 * (v11 & 0x7FFFFFF),
              v1873 = *((_QWORD *)v1872 - 1),
              (v1873 & 0xFFFFFFFF0) != 0))
        {
          v13 = -(uint64_t)(v11 & 0x7FFFFFF);
          v12 = *((_DWORD *)v1872 - 3) - *(_DWORD *)&v1872[-v1873];
        }
        else
        {
          v12 = 0;
          v13 = -(uint64_t)(v11 & 0x7FFFFFF);
        }
        v14 = (_QWORD *)((char *)v2106 + 32 * v13);
        if (((-32 * v10 + 32 * -v12 - 32 * v13 - 32) & 0x1FFFFFFFE0) == 0xA0)
        {
          *(_QWORD *)&v2132 = *v14;
          *((_QWORD *)&v2132 + 1) = v14[4];
          *(_QWORD *)&v2133 = v14[8];
          *((_QWORD *)&v2133 + 1) = v14[16];
          v15 = (uint64_t **)*((_QWORD *)v2105 + 3);
          LOWORD(v2115) = 257;
          v16 = sub_1C4774778((uint64_t *)&v2116, v15, (uint64_t)v2105, (uint64_t *)&v2132, 4, (uint64_t)&__src, 0);
          v17 = *((_QWORD *)v2106 + 8);
          if (!v17)
          {
            v19 = 0;
            v20 = 0;
            __src = 0;
            v2112 = 0;
            goto LABEL_579;
          }
          v18 = *(_DWORD *)(v17 + 8);
          if (v18)
          {
            v19 = *(_QWORD *)(v17 + 40);
            if (v18 != 1)
            {
              v20 = *(_QWORD *)(v17 + 48);
              if (v18 > 2)
              {
                __src = *(void **)(v17 + 56);
                if (v18 != 3)
                {
                  v2112 = *(_QWORD *)(v17 + 64);
                  if (v18 > 4)
                  {
                    v2113 = *(_QWORD *)(v17 + 72);
                    if (v18 < 7)
                      v17 = 0;
                    else
                      v17 = *(_QWORD *)(v17 + 88);
                    goto LABEL_580;
                  }
                  goto LABEL_23;
                }
LABEL_22:
                v2112 = 0;
LABEL_23:
                v17 = 0;
LABEL_579:
                v2113 = 0;
LABEL_580:
                v2114 = v17;
                *(_QWORD *)(v16 + 64) = llvm::AttributeList::get(v4, v19, v20, &__src, 4uLL);
                v412 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[12];
                v413 = (unint64_t *)(v412 + 24);
                v414 = (unint64_t *)(v412 + 24);
                if (*(_DWORD *)(v412 + 32) >= 0x41u)
                  v414 = (unint64_t *)*v413;
                v415 = *v414;
                v416 = __clz(v415) ^ 0x13F;
                if (v415)
                  v417 = v416;
                else
                  v417 = 0;
                sub_1C5346BA8(v16, v417);
                if ((*(_DWORD *)(*(_QWORD *)(v16 - 32) + 36) - 194) <= 3
                  && *(_DWORD *)(*(_QWORD *)(v16 - 32) + 36) != 195)
                {
                  if (*(_DWORD *)(v412 + 32) >= 0x41u)
                    v413 = (unint64_t *)*v413;
                  v418 = __clz(*v413) ^ 0x13F;
                  if (*v413)
                    v419 = v418;
                  else
                    v419 = 0;
                  sub_1C5346C3C(v16, v419);
                }
                goto LABEL_654;
              }
LABEL_21:
              __src = 0;
              goto LABEL_22;
            }
          }
          else
          {
            v19 = 0;
          }
          v20 = 0;
          goto LABEL_21;
        }
LABEL_669:
        sub_1C53468F4(&v2107);
        goto LABEL_3004;
      }
      if (((1 << v8) & 3) == 0)
        goto LABEL_669;
      v217 = *((_DWORD *)v2106 + 5);
      v218 = v217 & 0x7FFFFFF;
      v219 = (char *)v2106 - 32 * v218;
      v220 = *((unsigned __int8 *)v2106 + 16);
      if (v220 == 84)
      {
        v221 = 0;
      }
      else if (v220 == 39)
      {
        v221 = (*((_DWORD *)v2106 + 20) + 1);
      }
      else
      {
        v221 = 2;
      }
      if (v217 < 0 && (v1901 = *((_QWORD *)v219 - 1), (v1901 & 0xFFFFFFFF0) != 0))
        v222 = (*((_DWORD *)v219 - 3) - *(_DWORD *)&v219[-v1901]);
      else
        v222 = 0;
      v223 = (char *)v2106 + -32 * v222 + -32 * v221 - 32;
      __src = &v2113;
      v2112 = 0x400000000;
      v37 = v223 - v219;
      if ((unint64_t)(v223 - v219) >= 0x81)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v37 >> 5, 8);
        v224 = v2112;
        v39 = v2112;
      }
      else
      {
        v224 = 0;
        v39 = 0;
      }
      if (v219 != v223)
      {
        v225 = (char *)__src + 8 * v224;
        v226 = 32 * v218 - 32 * v221 - 32 * v222 - 32;
        do
        {
          v227 = *(_QWORD *)v219;
          v219 += 32;
          *v225++ = v227;
          v226 -= 32;
        }
        while (v226);
      }
      goto LABEL_312;
    }
    if (v7 <= 315)
    {
      if (v7 != 236)
      {
        if (v7 != 245)
        {
          if (v7 != 294)
            goto LABEL_669;
          v43 = (uint64_t **)*((_QWORD *)v2105 + 3);
          LOWORD(v2115) = 257;
          v44 = v2105;
          v45 = 0;
          v46 = 0;
          goto LABEL_653;
        }
        v186 = *((unsigned __int8 *)v2106 + 16);
        if (v186 == 84)
        {
          v187 = 0;
        }
        else if (v186 == 39)
        {
          v187 = (*((_DWORD *)v2106 + 20) + 1);
        }
        else
        {
          v187 = 2;
        }
        v188 = 0;
        v189 = *((_DWORD *)v2106 + 5);
        v190 = -(uint64_t)(v189 & 0x7FFFFFF);
        if (v189 < 0)
        {
          v1874 = (char *)v2106 - 32 * (v189 & 0x7FFFFFF);
          v1875 = *((_QWORD *)v1874 - 1);
          if ((v1875 & 0xFFFFFFFF0) != 0)
            v188 = *((_DWORD *)v1874 - 3) - *(_DWORD *)&v1874[-v1875];
          else
            v188 = 0;
        }
        v191 = (char *)v2106 + 32 * v190;
        if (((-32 * v187 + 32 * -v188 - 32 * v190 - 32) & 0x1FFFFFFFE0) != 0x80)
          goto LABEL_669;
        v192 = (uint64_t **)*((_QWORD *)v2105 + 3);
        __src = *(void **)v191;
        v2112 = *((_QWORD *)v191 + 4);
        v2113 = *((_QWORD *)v191 + 8);
        v2114 = *((_QWORD *)v191 + 12);
        v193 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v2121 + 1912), 0);
        v2115 = llvm::Constant::getNullValue(v193, v194);
        v2134 = 257;
        Select = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v192, v6, (uint64_t *)&__src, 5, (uint64_t)&v2132, 0);
        llvm::Value::takeName((llvm::Value *)Select, v2106);
LABEL_3000:
        v468 = v2106;
        v469 = (llvm::Value *)Select;
        goto LABEL_3001;
      }
      v196 = v2106;
      v197 = *((unsigned __int8 *)v2106 + 16);
      if (v197 == 84)
      {
        v198 = 0;
      }
      else if (v197 == 39)
      {
        v198 = (*((_DWORD *)v2106 + 20) + 1);
      }
      else
      {
        v198 = 2;
      }
      v199 = *((_DWORD *)v2106 + 5);
      if (v199 < 0
        && (v1876 = (char *)v2106 - 32 * (v199 & 0x7FFFFFF), v1877 = *((_QWORD *)v1876 - 1),
                                                             (v1877 & 0xFFFFFFFF0) != 0))
      {
        v201 = -(uint64_t)(v199 & 0x7FFFFFF);
        v200 = *((_DWORD *)v1876 - 3) - *(_DWORD *)&v1876[-v1877];
      }
      else
      {
        v200 = 0;
        v201 = -(uint64_t)(v199 & 0x7FFFFFF);
      }
      v202 = (char *)v2106 + 32 * -v200 + -32 * v198;
      v203 = (char *)v2106 + 32 * v201;
      if (((v202 - v203 - 32) & 0x1FFFFFFFE0) == 0x40)
      {
        v204 = *v2121;
        v205 = *(llvm::ValueHandleBase **)(*v2121 + 1568);
        if (!v205)
        {
          v206 = *(llvm::ConstantInt **)(v204 + 1888);
          LODWORD(v2112) = *(_DWORD *)(v204 + 1896) >> 8;
          if (v2112 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          else
            __src = 0;
          v205 = llvm::ConstantInt::get(v206, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
          if (v2112 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          *(_QWORD *)(v204 + 1568) = v205;
          v196 = v2106;
          v197 = *((unsigned __int8 *)v2106 + 16);
        }
      }
      else
      {
        v205 = (llvm::ValueHandleBase *)*((_QWORD *)v203 + 8);
      }
      if (v197 == 84)
      {
        v274 = 0;
      }
      else if (v197 == 39)
      {
        v274 = (*((_DWORD *)v196 + 20) + 1);
      }
      else
      {
        v274 = 2;
      }
      v275 = 0;
      v276 = *((_DWORD *)v196 + 5);
      v277 = -(uint64_t)(v276 & 0x7FFFFFF);
      if (v276 < 0)
      {
        v1878 = (char *)v196 - 32 * (v276 & 0x7FFFFFF);
        v1879 = *((_QWORD *)v1878 - 1);
        if ((v1879 & 0xFFFFFFFF0) != 0)
          v275 = *((_DWORD *)v1878 - 3) - *(_DWORD *)&v1878[-v1879];
        else
          v275 = 0;
      }
      v278 = (uint64_t)v196 + 32 * -v275 + -32 * v274;
      v279 = (char *)v196 + 32 * v277;
      if (((v278 - (_QWORD)v279 - 32) & 0x1FFFFFFF80) != 0)
      {
        v280 = (llvm::ValueHandleBase *)*((_QWORD *)v279 + 12);
      }
      else
      {
        v383 = *v2121;
        v280 = *(llvm::ValueHandleBase **)(*v2121 + 1568);
        if (!v280)
        {
          v711 = *(llvm::ConstantInt **)(v383 + 1888);
          LODWORD(v2112) = *(_DWORD *)(v383 + 1896) >> 8;
          if (v2112 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          else
            __src = 0;
          v280 = llvm::ConstantInt::get(v711, (llvm::LLVMContext *)&__src, (const llvm::APInt *)v5);
          if (v2112 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          *(_QWORD *)(v383 + 1568) = v280;
        }
      }
      v44 = v2105;
      if (v2105)
        v43 = (uint64_t **)*((_QWORD *)v2105 + 3);
      else
        v43 = 0;
      v384 = (_QWORD *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
      *(_QWORD *)&v2132 = *v384;
      *((_QWORD *)&v2132 + 1) = v384[4];
      *(_QWORD *)&v2133 = v205;
      *((_QWORD *)&v2133 + 1) = v280;
      LOWORD(v2115) = 257;
      v45 = (uint64_t *)&v2132;
      v46 = 4;
LABEL_653:
      v16 = sub_1C4774778((uint64_t *)&v2116, v43, (uint64_t)v44, v45, v46, (uint64_t)&__src, 0);
      goto LABEL_654;
    }
    if ((v7 - 458) >= 4 && (v7 - 3860) >= 4)
    {
      if (v7 == 316)
      {
        v461 = (uint64_t **)*((_QWORD *)v2105 + 3);
        v462 = (char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF);
        __src = *(void **)v462;
        v2112 = *((_QWORD *)v462 + 4);
        v2113 = *((_QWORD *)v462 + 8);
        v2114 = *((_QWORD *)v462 + 12);
        v463 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v2121 + 1912), 0);
        v2115 = llvm::Constant::getNullValue(v463, v464);
        v2134 = 257;
        sub_1C4774778((uint64_t *)&v2116, v461, v6, (uint64_t *)&__src, 5, (uint64_t)&v2132, 0);
        goto LABEL_3002;
      }
      goto LABEL_669;
    }
    __src = &v2113;
    v2112 = 0x300000000;
    v114 = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type ***)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4]);
    if ((_DWORD)v113 == 1)
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v4 + 1648), (llvm::Type *)(v114 >> 4));
    v116 = v115;
    v117 = (uint64_t *)((char *)v2106 - 32 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
    v118 = *v117;
    v119 = v2112;
    if (v2112 >= HIDWORD(v2112))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v2112 + 1, 8);
      v119 = v2112;
    }
    *((_QWORD *)__src + v119) = v118;
    LODWORD(v2112) = v2112 + 1;
    v120 = (unsigned __int8 *)v117[4];
    v2134 = 257;
    v121 = sub_1C4773E38((uint64_t *)&v2116, 49, v120, v116, (uint64_t)&v2132);
    v122 = v2112;
    if (v2112 >= HIDWORD(v2112))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v2112 + 1, 8);
      v122 = v2112;
    }
    *((_QWORD *)__src + v122) = v121;
    LODWORD(v2112) = v2112 + 1;
    v123 = (unsigned __int8 *)v117[8];
    v2134 = 257;
    v124 = sub_1C4773E38((uint64_t *)&v2116, 49, v123, v116, (uint64_t)&v2132);
    v125 = v2112;
    if (v2112 >= HIDWORD(v2112))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v2112 + 1, 8);
      v125 = v2112;
    }
    *((_QWORD *)__src + v125) = v124;
    v126 = (v2112 + 1);
    LODWORD(v2112) = v2112 + 1;
LABEL_395:
    if (v2105)
      v299 = (uint64_t **)*((_QWORD *)v2105 + 3);
    else
      v299 = 0;
    v2134 = 257;
    v16 = sub_1C4774778((uint64_t *)&v2116, v299, (uint64_t)v2105, (uint64_t *)__src, v126, (uint64_t)&v2132, 0);
    v232 = __src;
    if (__src == &v2113)
      goto LABEL_654;
LABEL_399:
    free(v232);
LABEL_654:
    v111 = v2106;
    v112 = (llvm::Value *)v16;
    goto LABEL_655;
  }
  if (v7 > 12166)
  {
    if (v7 > 12298)
    {
      if ((v7 - 12299) >= 3)
      {
        if ((v7 - 12414) >= 2)
        {
          if ((v7 - 12416) >= 4)
            goto LABEL_669;
          v470 = *((_DWORD *)v2106 + 5);
          v471 = v470 & 0x7FFFFFF;
          v472 = (char *)v2106 - 32 * v471;
          v473 = *((unsigned __int8 *)v2106 + 16);
          if (v473 == 84)
          {
            v474 = 0;
          }
          else if (v473 == 39)
          {
            v474 = (*((_DWORD *)v2106 + 20) + 1);
          }
          else
          {
            v474 = 2;
          }
          if (v470 < 0 && (v1921 = *((_QWORD *)v472 - 1), (v1921 & 0xFFFFFFFF0) != 0))
            v475 = (*((_DWORD *)v472 - 3) - *(_DWORD *)&v472[-v1921]);
          else
            v475 = 0;
          v476 = (char *)v2106 + -32 * v475 + -32 * v474 - 32;
          __src = &v2113;
          v2112 = 0x400000000;
          v477 = v476 - v472;
          if ((unint64_t)(v476 - v472) >= 0x81)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v477 >> 5, 8);
            v478 = v2112;
            v480 = __src;
            v479 = v2112;
          }
          else
          {
            v478 = 0;
            v479 = 0;
            v480 = &v2113;
          }
          if (v472 != v476)
          {
            v481 = &v480[v478];
            v482 = 32 * v471 - 32 * v474 - 32 * v475 - 32;
            do
            {
              v483 = *(_QWORD *)v472;
              v472 += 32;
              *v481++ = v483;
              v482 -= 32;
            }
            while (v482);
            v480 = __src;
          }
          LODWORD(v2112) = v479 + ((unint64_t)v477 >> 5);
          sub_1C6227E64(*(_QWORD *)v480[2]);
          v484 = (unsigned __int8 *)*((_QWORD *)__src + 2);
          v2134 = 257;
          v486 = sub_1C4773E38((uint64_t *)&v2116, 49, v484, v485, (uint64_t)&v2132);
          v231 = (uint64_t *)__src;
          *((_QWORD *)__src + 2) = v486;
          v229 = v2105;
          if (v2105)
            v230 = (uint64_t **)*((_QWORD *)v2105 + 3);
          else
            v230 = 0;
          v228 = v2112;
          v2134 = 257;
          goto LABEL_316;
        }
        v43 = (uint64_t **)*((_QWORD *)v2105 + 3);
        v207 = ((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
LABEL_301:
        *(_QWORD *)&v2132 = v207;
        LOWORD(v2115) = 257;
        v45 = (uint64_t *)&v2132;
        v44 = v2105;
        v46 = 1;
      }
      else
      {
        v47 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
        v48 = *(_QWORD *)v47;
        llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v4 + 1672), (llvm::Type *)4);
        if (v48 != v49)
          goto LABEL_3004;
        v50 = (unsigned __int8 *)((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF))[4];
        llvm::FixedVectorType::get((llvm::FixedVectorType *)(*v4 + 1984), (llvm::Type *)2);
        v52 = v51;
        __src = "cast";
        LOWORD(v2115) = 259;
        v53 = sub_1C4773E38((uint64_t *)&v2116, 49, v47, v51, (uint64_t)&__src);
        __src = "cast";
        LOWORD(v2115) = 259;
        v54 = sub_1C4773E38((uint64_t *)&v2116, 49, v50, v52, (uint64_t)&__src);
        v44 = v2105;
        if (v2105)
          v43 = (uint64_t **)*((_QWORD *)v2105 + 3);
        else
          v43 = 0;
        *(_QWORD *)&v2132 = v53;
        *((_QWORD *)&v2132 + 1) = v54;
        LOWORD(v2115) = 257;
        v45 = (uint64_t *)&v2132;
LABEL_652:
        v46 = 2;
      }
      goto LABEL_653;
    }
    if ((v7 - 12292) < 4)
      goto LABEL_384;
    if (v7 != 12167)
      goto LABEL_669;
    if ((*((_DWORD *)v2106 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_3004;
    v95 = (uint64_t **)*((_QWORD *)v2105 + 3);
    LOWORD(v2115) = 257;
    v96 = (uint64_t *)sub_1C4774778((uint64_t *)&v2116, v95, (uint64_t)v2105, 0, 0, (uint64_t)&__src, 0);
    LODWORD(v2132) = 1;
    LOWORD(v2115) = 257;
    v97 = sub_1C506DBC4((uint64_t)&v2116, v96, (unsigned int *)&v2132, 1, (uint64_t)&__src);
    v98 = (unsigned __int8 *)*((_QWORD *)v2106 - 4 * (*((_DWORD *)v2106 + 5) & 0x7FFFFFF));
    v99 = llvm::PointerType::get(*(llvm::PointerType **)v97, 0);
    LOWORD(v2115) = 257;
    v100 = sub_1C4773E38((uint64_t *)&v2116, 49, v98, v99, (uint64_t)&__src);
    v101 = (char *)operator new(0x80uLL);
    v102 = v101;
    *((_DWORD *)v101 + 21) = *((_DWORD *)v101 + 21) & 0x38000000 | 2;
    *(_QWORD *)v101 = 0;
    *((_QWORD *)v101 + 2) = 0;
    *((_QWORD *)v101 + 1) = 0;
    *((_QWORD *)v101 + 5) = 0;
    *((_QWORD *)v101 + 6) = 0;
    *((_QWORD *)v101 + 4) = 0;
    v103 = (unsigned __int8 **)(v101 + 32);
    *((_QWORD *)v101 + 8) = ***(_QWORD ***)v97 + 1576;
    v104 = (llvm::Value *)(v101 + 64);
    *((_QWORD *)v101 + 3) = v101 + 64;
    *((_QWORD *)v101 + 7) = v101 + 64;
    *((_QWORD *)v101 + 9) = 0;
    v101[80] = 61;
    v101[81] = 0;
    *((_WORD *)v101 + 41) = 0;
    *((_DWORD *)v101 + 21) = 2;
    *(_OWORD *)(v101 + 88) = 0u;
    *(_OWORD *)(v101 + 104) = 0u;
    *((_DWORD *)v101 + 30) = 0;
    *(_QWORD *)v101 = v97;
    v107 = *(_QWORD *)(v97 + 8);
    v106 = (_QWORD *)(v97 + 8);
    v105 = v107;
    *((_QWORD *)v101 + 1) = v107;
    if (v107)
      *(_QWORD *)(v105 + 16) = v101 + 8;
    *((_QWORD *)v101 + 2) = v106;
    *v106 = v101;
    if (*((_QWORD *)v101 + 4))
    {
      **((_QWORD **)v101 + 6) = *((_QWORD *)v101 + 5);
      v1918 = *((_QWORD *)v101 + 5);
      if (v1918)
        *(_QWORD *)(v1918 + 16) = *((_QWORD *)v101 + 6);
    }
    *v103 = v100;
    if (v100)
    {
      v110 = *((_QWORD *)v100 + 1);
      v109 = (unsigned __int8 ***)(v100 + 8);
      v108 = v110;
      *((_QWORD *)v101 + 5) = v110;
      if (v110)
        *(_QWORD *)(v108 + 16) = v101 + 40;
      *((_QWORD *)v101 + 6) = v109;
      *v109 = v103;
    }
    *((_WORD *)v101 + 41) = 0;
    v101[124] = 1;
    LOWORD(v2115) = 257;
    (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v2123 + 2))(v2123, v104, &__src, v2119, v2120);
    if (!(_DWORD)v2117)
    {
LABEL_110:
      LODWORD(v2132) = 0;
      LOWORD(v2115) = 257;
      v16 = sub_1C506DBC4((uint64_t)&v2116, v96, (unsigned int *)&v2132, 1, (uint64_t)&__src);
      v111 = v2106;
      v112 = (llvm::Value *)v96;
LABEL_655:
      llvm::Value::takeName(v112, v111);
      v468 = v2106;
      v469 = (llvm::Value *)v16;
LABEL_3001:
      llvm::Value::doRAUW(v468, v469, (llvm::Value *)1);
      goto LABEL_3002;
    }
    v842 = (char *)v2116;
    v843 = (char *)v2116 + 16 * v2117;
    v844 = (unsigned __int8 **)(v102 + 112);
    while (1)
    {
      v845 = *(_DWORD *)v842;
      v846 = (unsigned __int8 *)*((_QWORD *)v842 + 1);
      if (v846)
      {
        if (!v845)
        {
          *(_QWORD *)&v2132 = *((_QWORD *)v842 + 1);
          llvm::MetadataTracking::track((uint64_t)&v2132, v846, 2);
          v847 = *v844;
          goto LABEL_1409;
        }
      }
      else
      {
        v847 = *v844;
        if (!*v844 && (v102[87] & 0x20) == 0)
          goto LABEL_1406;
        if (!v845)
        {
          *(_QWORD *)&v2132 = 0;
LABEL_1409:
          if (v847)
            llvm::MetadataTracking::untrack((uint64_t)(v102 + 112), v847);
          v848 = (unsigned __int8 *)v2132;
          *v844 = (unsigned __int8 *)v2132;
          if (v848)
            llvm::MetadataTracking::retrack((uint64_t)&v2132, v848, (uint64_t)(v102 + 112));
          goto LABEL_1406;
        }
      }
      llvm::Value::setMetadata(v104, *(_DWORD *)v842, (llvm::MDNode *)v846);
LABEL_1406:
      v842 += 16;
      if (v842 == v843)
        goto LABEL_110;
    }
  }
  if (v7 <= 11231)
  {
    if ((v7 - 3982) <= 9 && ((1 << (v7 + 114)) & 0x3F1) != 0)
    {
      v30 = *((_DWORD *)v2106 + 5);
      v31 = v30 & 0x7FFFFFF;
      v32 = (char *)v2106 - 32 * v31;
      v33 = *((unsigned __int8 *)v2106 + 16);
      if (v33 == 84)
      {
        v34 = 0;
      }
      else if (v33 == 39)
      {
        v34 = (*((_DWORD *)v2106 + 20) + 1);
      }
      else
      {
        v34 = 2;
      }
      if (v30 < 0 && (v1832 = *((_QWORD *)v32 - 1), (v1832 & 0xFFFFFFFF0) != 0))
        v35 = (*((_DWORD *)v32 - 3) - *(_DWORD *)&v32[-v1832]);
      else
        v35 = 0;
      v36 = (char *)v2106 + -32 * v35 + -32 * v34 - 32;
      __src = &v2113;
      v2112 = 0x400000000;
      v37 = v36 - v32;
      if ((unint64_t)(v36 - v32) >= 0x81)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v37 >> 5, 8);
        v38 = v2112;
        v39 = v2112;
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
      if (v32 != v36)
      {
        v40 = (char *)__src + 8 * v38;
        v41 = 32 * v31 - 32 * v34 - 32 * v35 - 32;
        do
        {
          v42 = *(_QWORD *)v32;
          v32 += 32;
          *v40++ = v42;
          v41 -= 32;
        }
        while (v41);
      }
LABEL_312:
      v228 = v39 + ((unint64_t)v37 >> 5);
      LODWORD(v2112) = v39 + ((unint64_t)v37 >> 5);
      v229 = v2105;
      if (v2105)
        v230 = (uint64_t **)*((_QWORD *)v2105 + 3);
      else
        v230 = 0;
      v231 = (uint64_t *)__src;
      v2134 = 257;
LABEL_316:
      v16 = sub_1C4774778((uint64_t *)&v2116, v230, (uint64_t)v229, v231, v228, (uint64_t)&v2132, 0);
      goto LABEL_319;
    }
    v281 = 11163;
    goto LABEL_383;
  }
  if ((v7 - 11368) >= 6)
  {
    v281 = 11232;
LABEL_383:
    if (v7 != v281)
      goto LABEL_669;
LABEL_384:
    v282 = *((_DWORD *)v2106 + 5);
    v283 = v282 & 0x7FFFFFF;
    v284 = (char *)v2106 - 32 * v283;
    v285 = *((unsigned __int8 *)v2106 + 16);
    if (v285 == 84)
    {
      v286 = 0;
    }
    else if (v285 == 39)
    {
      v286 = (*((_DWORD *)v2106 + 20) + 1);
    }
    else
    {
      v286 = 2;
    }
    if (v282 < 0 && (v1841 = *((_QWORD *)v284 - 1), (v1841 & 0xFFFFFFFF0) != 0))
      v287 = (*((_DWORD *)v284 - 3) - *(_DWORD *)&v284[-v1841]);
    else
      v287 = 0;
    v288 = (char *)v2106 + -32 * v287 + -32 * v286 - 32;
    __src = &v2113;
    v2112 = 0x400000000;
    v289 = v288 - v284;
    if ((unint64_t)(v288 - v284) >= 0x81)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v289 >> 5, 8);
      v290 = v2112;
      v292 = __src;
      v291 = v2112;
    }
    else
    {
      v290 = 0;
      v291 = 0;
      v292 = &v2113;
    }
    if (v284 != v288)
    {
      v293 = &v292[v290];
      v294 = 32 * v283 - 32 * v286 - 32 * v287 - 32;
      do
      {
        v295 = *(_QWORD *)v284;
        v284 += 32;
        *v293++ = v295;
        v294 -= 32;
      }
      while (v294);
      v292 = __src;
    }
    LODWORD(v2112) = v291 + ((unint64_t)v289 >> 5);
    v296 = (unsigned __int8 *)v292[v2112 - 1];
    v297 = *v4 + 1912;
    *(_QWORD *)&v2132 = "trunc";
    v2134 = 259;
    v298 = sub_1C4773E38((uint64_t *)&v2116, 38, v296, v297, (uint64_t)&v2132);
    v126 = v2112;
    *((_QWORD *)__src + v2112 - 1) = v298;
    goto LABEL_395;
  }
  v55 = *((_DWORD *)v2106 + 5);
  v56 = v55 & 0x7FFFFFF;
  v57 = (char *)v2106 - 32 * v56;
  v58 = *((unsigned __int8 *)v2106 + 16);
  if (v58 == 84)
  {
    v59 = 0;
  }
  else if (v58 == 39)
  {
    v59 = (*((_DWORD *)v2106 + 20) + 1);
  }
  else
  {
    v59 = 2;
  }
  if (v55 < 0 && (v1840 = *((_QWORD *)v57 - 1), (v1840 & 0xFFFFFFFF0) != 0))
    v60 = (*((_DWORD *)v57 - 3) - *(_DWORD *)&v57[-v1840]);
  else
    v60 = 0;
  v61 = (char *)v2106 + -32 * v60 + -32 * v59 - 32;
  __src = &v2113;
  v2112 = 0x400000000;
  v62 = v61 - v57;
  if ((unint64_t)(v61 - v57) >= 0x81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v2113, v62 >> 5, 8);
    v63 = v2112;
    v65 = (unsigned __int8 **)__src;
    v64 = v2112;
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = (unsigned __int8 **)&v2113;
  }
  if (v57 != v61)
  {
    v66 = &v65[v63];
    v67 = 32 * v56 - 32 * v59 - 32 * v60 - 32;
    do
    {
      v68 = *(unsigned __int8 **)v57;
      v57 += 32;
      *v66++ = v68;
      v67 -= 32;
    }
    while (v67);
    v65 = (unsigned __int8 **)__src;
  }
  LODWORD(v2112) = v64 + ((unint64_t)v62 >> 5);
  v69 = sub_1C534544C((uint64_t)&v2116, v65[3], *(_DWORD *)(*(_QWORD *)*v65 + 32));
  v70 = (uint64_t *)__src;
  *((_QWORD *)__src + 3) = v69;
  if (v2105)
    v71 = (uint64_t **)*((_QWORD *)v2105 + 3);
  else
    v71 = 0;
  v2134 = 257;
  v208 = (llvm::Type *)sub_1C4774778((uint64_t *)&v2116, v71, (uint64_t)v2105, v70, v2112, (uint64_t)&v2132, 0);
  v209 = sub_1C5345234((uint64_t *)&v2116, v208, 0);
  llvm::Value::takeName(v208, v2106);
  llvm::Value::doRAUW(v2106, (llvm::Value *)v209, (llvm::Value *)1);
  v210 = v2106;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v2106 + 5) + 40, (uint64_t ***)v2106);
  v211 = *((_QWORD *)v210 + 3);
  v212 = (_QWORD *)*((_QWORD *)v210 + 4);
  *v212 = v211;
  *(_QWORD *)(v211 + 8) = v212;
  *((_QWORD *)v210 + 3) = 0;
  *((_QWORD *)v210 + 4) = 0;
  llvm::Value::deleteValue(v210);
  v213 = __src;
  if (__src != &v2113)
LABEL_526:
    free(v213);
LABEL_3004:
  if (v2116 != v2118)
    free(v2116);
}

unsigned __int8 *sub_1C5344F14(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v6;
  llvm::ConstantInt *v7;
  llvm::ValueHandleBase *v8;
  llvm::ConstantInt *v10;
  llvm::ValueHandleBase *v11;
  uint64_t v12;
  unsigned int v13;

  v6 = **(_QWORD **)(a1 + 64);
  v7 = *(llvm::ConstantInt **)(v6 + 1984);
  v13 = *(_DWORD *)(v6 + 1992) >> 8;
  if (v13 > 0x40)
  {
    v10 = v7;
    llvm::APInt::initSlowCase((llvm::APInt *)&v12, 0, 0);
    v7 = v10;
  }
  else
  {
    v12 = 0;
  }
  v8 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v12, a3);
  if (v13 >= 0x41 && v12)
  {
    v11 = v8;
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    v8 = v11;
  }
  return sub_1C4772EE0((uint64_t *)a1, a2, (uint64_t)v8, (uint64_t)a3);
}

llvm::Value *sub_1C5344FD4(uint64_t *a1, unsigned __int8 *a2, llvm::PointerType **a3, unsigned __int8 *a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  __int16 v12;
  uint64_t v14;
  _BYTE v15[32];
  __int16 v16;

  v10 = llvm::PointerType::get(*a3, 0);
  v16 = 257;
  v11 = (uint64_t *)sub_1C4773E38(a1, 49, a2, v10, (uint64_t)v15);
  if (a5)
  {
    v12 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits(*a3) >> 3));
    if (!a4)
      goto LABEL_8;
  }
  else
  {
    v12 = 0;
    if (!a4)
      goto LABEL_8;
  }
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4))
    return sub_1C509CCE8(a1, (uint64_t *)a3, (uint64_t)v11, v12 | 0x100u, 0);
LABEL_8:
  v14 = sub_1C534544C((uint64_t)a1, a4, *((_DWORD *)*a3 + 8));
  return (llvm::Value *)llvm::IRBuilderBase::CreateMaskedStore((uint64_t)a1, (uint64_t *)a3, v11, v12, v14);
}

unsigned __int8 *sub_1C53450D8(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4)
{
  uint64_t v8;
  llvm::ConstantInt *v9;
  llvm::ValueHandleBase *v10;
  llvm::ConstantInt *v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  unsigned int v15;

  v8 = **(_QWORD **)(a1 + 64);
  v9 = *(llvm::ConstantInt **)(v8 + 1984);
  v15 = *(_DWORD *)(v8 + 1992) >> 8;
  if (v15 > 0x40)
  {
    v12 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 0, 0);
    v9 = v12;
  }
  else
  {
    v14 = 0;
  }
  v10 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v14, a3);
  if (v15 >= 0x41 && v14)
  {
    v13 = v10;
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    v10 = v13;
  }
  return sub_1C4773154((uint64_t *)a1, a2, (uint64_t)a3, (uint64_t)v10, a4);
}

llvm::Value *sub_1C53451A0(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    v8 = sub_1C534544C((uint64_t)a1, a2, *(_DWORD *)(*a3 + 32));
    v11 = 257;
    return llvm::IRBuilderBase::CreateSelect(a1, v8, a3, a4, (uint64_t)v10, 0);
  }
  return (llvm::Value *)a3;
}

unsigned __int8 *sub_1C5345234(uint64_t *a1, llvm::Type *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t i;
  unsigned int j;
  llvm::Value **NullValue;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  _DWORD v18[8];
  __int16 v19;
  _DWORD v20[8];
  uint64_t v21;

  v3 = (unsigned __int8 *)a2;
  v21 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  if (a3 && (a3[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a3)))
  {
    v7 = sub_1C534544C((uint64_t)a1, a3, v5);
    v19 = 257;
    v3 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)a1, v3, v7, (uint64_t)v18);
  }
  if (v5 <= 7)
  {
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
        v20[i] = i;
    }
    for (j = v5; j != 8; ++j)
      v20[j] = j % v5 + v5;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v3, a2);
    v19 = 257;
    v3 = (unsigned __int8 *)sub_1C486AD20((uint64_t)a1, (uint64_t)v3, (uint64_t)NullValue, v20, 8, (uint64_t)v18);
  }
  if (v5 <= 8)
    v11 = 8;
  else
    v11 = v5;
  v12 = (_QWORD *)a1[8];
  v18[0] = v11;
  if (v11 <= 63)
  {
    switch(v11)
    {
      case 32:
        v13 = (_QWORD *)(*v12 + 1960);
        goto LABEL_22;
      case 16:
        v13 = (_QWORD *)(*v12 + 1936);
        goto LABEL_22;
      case 8:
        v13 = (_QWORD *)(*v12 + 1912);
        goto LABEL_22;
    }
  }
  else
  {
    if (v11 == 64)
    {
      v13 = (_QWORD *)(*v12 + 1984);
      goto LABEL_22;
    }
    if (v11 == 128)
    {
      v13 = (_QWORD *)(*v12 + 2008);
      goto LABEL_22;
    }
  }
  v15 = sub_1C5270984(*v12 + 2168, v18);
  v13 = (_QWORD *)*((_QWORD *)v15 + 1);
  if (!v13)
  {
    v16 = v15;
    v13 = (_QWORD *)sub_1C484358C(*v12 + 2040, 24, 3);
    v17 = v18[0];
    *v13 = v12;
    v13[2] = 0;
    v13[1] = (v17 << 8) | 0xDu;
    *((_QWORD *)v16 + 1) = v13;
  }
LABEL_22:
  v19 = 257;
  return sub_1C4773E38(a1, 49, v3, (uint64_t)v13, (uint64_t)v18);
}

uint64_t sub_1C534544C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;
  _DWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)(a1 + 64) + 1888), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
  v12 = 257;
  v7 = sub_1C4773E38((uint64_t *)a1, 49, a2, v6, (uint64_t)v11);
  if (a3 <= 4)
  {
    if (a3)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v13[v8] = v8;
        ++v8;
      }
      while (a3 != v8);
    }
    else
    {
      v9 = 0;
    }
    v11[0] = "extract";
    v12 = 259;
    return sub_1C486AD20(a1, (uint64_t)v7, (uint64_t)v7, v13, v9, (uint64_t)v11);
  }
  return (uint64_t)v7;
}

uint64_t sub_1C534554C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  llvm::MDNode *v5;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  llvm::Value *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;

  v5 = a5;
  if (!*(_BYTE *)(a1 + 100))
  {
    v10 = sub_1C477422C((uint64_t *)a1, 14, (uint64_t)a2, a3, a4);
    if (v10)
      return (uint64_t)v10;
    v31 = 257;
    v11 = (char *)operator new(0x80uLL);
    v12 = v11;
    *((_QWORD *)v11 + 8) = *a2;
    v13 = (llvm::Value *)(v11 + 64);
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 5) = 0;
    v14 = v11 + 40;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0x20000002ALL;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *((_DWORD *)v11 + 30) = 0;
    *(_QWORD *)v11 = a2;
    v17 = a2[1];
    v16 = a2 + 1;
    v15 = v17;
    *((_QWORD *)v11 + 1) = v17;
    if (v17)
      *(_QWORD *)(v15 + 16) = v11 + 8;
    *((_QWORD *)v11 + 2) = v16;
    *v16 = v11;
    *((_QWORD *)v11 + 4) = a3;
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      v19 = (_QWORD *)(a3 + 8);
      v18 = v20;
      *v14 = v20;
      if (v20)
        *(_QWORD *)(v18 + 16) = v14;
      *((_QWORD *)v11 + 6) = v19;
      *v19 = v11 + 32;
    }
    llvm::Value::setName((uint64_t ***)v11 + 8, (uint64_t)v30);
    v21 = *(_DWORD *)(a1 + 96);
    if (v5 || (v5 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v13, 3, v5);
    v12[81] |= 2 * (_BYTE)v21;
    (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v13, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v22 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v22)
      return (uint64_t)v13;
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD *)a1 + 16 * v22;
    while (1)
    {
      v26 = *(_DWORD *)v24;
      v27 = *(unsigned __int8 **)(v24 + 8);
      if (v27)
      {
        if (!v26)
        {
          v30[0] = *(_QWORD *)(v24 + 8);
          llvm::MetadataTracking::track((uint64_t)v30, v27, 2);
          v28 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
          goto LABEL_24;
        }
      }
      else
      {
        v28 = (unsigned __int8 *)*((_QWORD *)v12 + 14);
        if (!v28 && (v12[87] & 0x20) == 0)
          goto LABEL_21;
        if (!v26)
        {
          v30[0] = 0;
LABEL_24:
          if (v28)
            llvm::MetadataTracking::untrack((uint64_t)(v12 + 112), v28);
          v29 = (unsigned __int8 *)v30[0];
          *((_QWORD *)v12 + 14) = v30[0];
          if (v29)
            llvm::MetadataTracking::retrack((uint64_t)v30, v29, (uint64_t)(v12 + 112));
          goto LABEL_21;
        }
      }
      llvm::Value::setMetadata(v13, *(_DWORD *)v24, (llvm::MDNode *)v27);
LABEL_21:
      v24 += 16;
      if (v24 == v25)
        return (uint64_t)v13;
    }
  }
  return llvm::IRBuilderBase::CreateConstrainedFPBinOp(a1, 83, a2, a3, 0, a4, a5, 0, 0);
}

void sub_1C5345780(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X12 }
}

unsigned __int8 *sub_1C53457D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  llvm::Type *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _WORD v18[36];

  if (a4)
    v7 = 40;
  else
    v7 = 36;
  v8 = *(_QWORD *)(v4 + 32);
  v18[16] = 257;
  v9 = (llvm::Type *)sub_1C4774B48((uint64_t)v5, v7, a3, v8, (uint64_t)v18);
  v10 = *(unsigned __int8 *)(v6 + 16);
  if (v10 == 84)
  {
    v11 = 0;
  }
  else if (v10 == 39)
  {
    v11 = (*(_DWORD *)(v6 + 80) + 1);
  }
  else
  {
    v11 = 2;
  }
  v12 = 0;
  v13 = *(_DWORD *)(v6 + 20);
  v14 = -(uint64_t)(v13 & 0x7FFFFFF);
  if (v13 < 0)
  {
    v16 = v6 - 32 * (v13 & 0x7FFFFFF);
    v17 = *(_QWORD *)(v16 - 8);
    if ((v17 & 0xFFFFFFFF0) != 0)
      v12 = *(_DWORD *)(v16 - 12) - *(_DWORD *)(v16 - v17);
    else
      v12 = 0;
  }
  return sub_1C5345234(v5, v9, *(unsigned __int8 **)(v6+ 32 * v14+ 32* (((-32 * v11 + 32 * (unint64_t)-v12 - 32 * v14 - 32) >> 5)- 1)));
}

llvm::Value *sub_1C534591C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Declaration;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];
  __int16 v22;
  uint64_t v23;
  uint64_t v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v23 = *(_QWORD *)a2;
  v5 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v6 = *v5;
  v7 = v5[4];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), a3, &v23, 1);
  if (Declaration)
    v9 = *(uint64_t ***)(Declaration + 24);
  else
    v9 = 0;
  v24[0] = v6;
  v24[1] = v7;
  v22 = 257;
  v10 = (uint64_t *)sub_1C4774778(a1, v9, Declaration, v24, 2, (uint64_t)v21, 0);
  v11 = 0;
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 != 84)
  {
    if (v12 == 39)
      v11 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v11 = 2;
  }
  v13 = 0;
  v14 = *(_DWORD *)(a2 + 20);
  v15 = -(uint64_t)(v14 & 0x7FFFFFF);
  if (v14 < 0)
  {
    v19 = a2 - 32 * (v14 & 0x7FFFFFF);
    v20 = *(_QWORD *)(v19 - 8);
    if ((v20 & 0xFFFFFFFF0) != 0)
      v13 = *(_DWORD *)(v19 - 12) - *(_DWORD *)(v19 - v20);
    else
      v13 = 0;
  }
  v16 = a2 - 32 * v11 + 32 * -v13;
  v17 = a2 + 32 * v15;
  if (((v16 - v17 - 32) & 0x1FFFFFFFE0) == 0x80)
    return sub_1C53451A0(a1, *(unsigned __int8 **)(v17 + 96), v10, *(_QWORD *)(v17 + 64));
  return (llvm::Value *)v10;
}

llvm::Value *sub_1C5345A98(uint64_t *a1, uint64_t a2, int a3)
{
  llvm::ConstantInt *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  llvm::Value **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value **v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];
  __int16 v29;

  v6 = *(llvm::ConstantInt **)a2;
  v7 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v29 = 257;
  v8 = sub_1C4773E38(a1, 49, v7, (uint64_t)v6, (uint64_t)v28);
  v9 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  v29 = 257;
  v10 = sub_1C4773E38(a1, 49, v9, (uint64_t)v6, (uint64_t)v28);
  if (a3)
  {
    v11 = llvm::ConstantInt::get(v6, 32, 0);
    v29 = 257;
    v12 = sub_1C506E874((uint64_t)a1, (uint64_t)v8, (uint64_t)v11, (uint64_t)v28, 0, 0);
    v29 = 257;
    v13 = sub_1C534E5D8((uint64_t)a1, v12, (uint64_t)v11, (uint64_t)v28, 0);
    v29 = 257;
    v14 = sub_1C506E874((uint64_t)a1, (uint64_t)v10, (uint64_t)v11, (uint64_t)v28, 0, 0);
    v29 = 257;
    v15 = sub_1C534E5D8((uint64_t)a1, v14, (uint64_t)v11, (uint64_t)v28, 0);
  }
  else
  {
    v16 = llvm::ConstantInt::get(v6, 0xFFFFFFFFLL, 0);
    v29 = 257;
    v13 = sub_1C4D89BCC((uint64_t)a1, v8, (uint64_t)v16, (uint64_t)v28);
    v29 = 257;
    v15 = sub_1C4D89BCC((uint64_t)a1, v10, (uint64_t)v16, (uint64_t)v28);
  }
  v29 = 257;
  v17 = (uint64_t *)sub_1C4EC4040((uint64_t)a1, v13, v15, (uint64_t)v28, 0, 0);
  v18 = *(unsigned __int8 *)(a2 + 16);
  if (v18 == 84)
  {
    v19 = 0;
  }
  else if (v18 == 39)
  {
    v19 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v19 = 2;
  }
  v20 = 0;
  v21 = *(_DWORD *)(a2 + 20);
  v22 = -(uint64_t)(v21 & 0x7FFFFFF);
  if (v21 < 0)
  {
    v26 = a2 - 32 * (v21 & 0x7FFFFFF);
    v27 = *(_QWORD *)(v26 - 8);
    if ((v27 & 0xFFFFFFFF0) != 0)
      v20 = *(_DWORD *)(v26 - 12) - *(_DWORD *)(v26 - v27);
    else
      v20 = 0;
  }
  v23 = a2 - 32 * v19 + 32 * -v20;
  v24 = a2 + 32 * v22;
  if (((v23 - v24 - 32) & 0x1FFFFFFFE0) == 0x80)
    return sub_1C53451A0(a1, *(unsigned __int8 **)(v24 + 96), v17, *(_QWORD *)(v24 + 64));
  return (llvm::Value *)v17;
}

unsigned __int8 *sub_1C5345CE4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 118, a2, a3, 0, a4, 0, 0, 0);
  else
    return sub_1C4773E38((uint64_t *)a1, 43, (unsigned __int8 *)a2, (uint64_t)a3, a4);
}

llvm::Value *sub_1C5345D3C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *VectorSplat;
  llvm::Type *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t Declaration;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  __int16 v27;
  uint64_t v28;
  uint64_t v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v28 = v6;
  v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v8 = *v7;
  VectorSplat = (unsigned __int8 *)v7[4];
  if (*(_QWORD *)VectorSplat != v6)
  {
    v10 = (llvm::Type *)*(unsigned int *)(v6 + 32);
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      v6 = **(_QWORD **)(v6 + 16);
    v27 = 257;
    v11 = sub_1C4D8D514(a1, VectorSplat, v6, 0, (uint64_t)v26);
    v27 = 257;
    VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)a1, v10, (uint64_t ***)v11, (uint64_t)v26);
  }
  if (a3)
    v12 = 149;
  else
    v12 = 148;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), v12, &v28, 1);
  if (Declaration)
    v14 = *(uint64_t ***)(Declaration + 24);
  else
    v14 = 0;
  v29[0] = v8;
  v29[1] = v8;
  v29[2] = (uint64_t)VectorSplat;
  v27 = 257;
  v15 = (uint64_t *)sub_1C4774778(a1, v14, Declaration, v29, 3, (uint64_t)v26, 0);
  v16 = 0;
  v17 = *(unsigned __int8 *)(a2 + 16);
  if (v17 != 84)
  {
    if (v17 == 39)
      v16 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v16 = 2;
  }
  v18 = 0;
  v19 = *(_DWORD *)(a2 + 20);
  v20 = -(uint64_t)(v19 & 0x7FFFFFF);
  if (v19 < 0)
  {
    v24 = a2 - 32 * (v19 & 0x7FFFFFF);
    v25 = *(_QWORD *)(v24 - 8);
    if ((v25 & 0xFFFFFFFF0) != 0)
      v18 = *(_DWORD *)(v24 - 12) - *(_DWORD *)(v24 - v25);
    else
      v18 = 0;
  }
  v21 = a2 - 32 * v16 + 32 * -v18;
  v22 = a2 + 32 * v20;
  if (((v21 - v22 - 32) & 0x1FFFFFFFE0) == 0x80)
    return sub_1C53451A0(a1, *(unsigned __int8 **)(v22 + 96), v15, *(_QWORD *)(v22 + 64));
  return (llvm::Value *)v15;
}

llvm::Value *sub_1C5345F34(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  llvm::ConstantAggregateZero *v8;
  uint64_t *v9;
  unsigned __int8 *VectorSplat;
  uint64_t v11;
  uint64_t v12;
  llvm::Type *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t Declaration;
  uint64_t **v17;
  llvm::Type *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  __int16 v33;
  llvm::ConstantAggregateZero *v34;
  uint64_t v35[4];

  v35[3] = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::ConstantAggregateZero **)a2;
  v34 = *(llvm::ConstantAggregateZero **)a2;
  v9 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  VectorSplat = (unsigned __int8 *)v9[8];
  if (a3)
    v11 = *v9;
  else
    v11 = v9[4];
  if (a3)
    v12 = v9[4];
  else
    v12 = *v9;
  if (*(llvm::ConstantAggregateZero **)VectorSplat != v8)
  {
    v13 = (llvm::Type *)*((unsigned int *)v8 + 8);
    if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
      v8 = (llvm::ConstantAggregateZero *)**((_QWORD **)v8 + 2);
    v33 = 257;
    v14 = sub_1C4D8D514(a1, VectorSplat, (uint64_t)v8, 0, (uint64_t)v32);
    v33 = 257;
    VectorSplat = (unsigned __int8 *)llvm::IRBuilderBase::CreateVectorSplat((uint64_t)a1, v13, (uint64_t ***)v14, (uint64_t)v32);
  }
  if (a3)
    v15 = 149;
  else
    v15 = 148;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), v15, (uint64_t *)&v34, 1);
  if (Declaration)
    v17 = *(uint64_t ***)(Declaration + 24);
  else
    v17 = 0;
  v35[0] = v12;
  v35[1] = v11;
  v35[2] = (uint64_t)VectorSplat;
  v33 = 257;
  v19 = (uint64_t *)sub_1C4774778(a1, v17, Declaration, v35, 3, (uint64_t)v32, 0);
  v20 = 0;
  v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 != 84)
  {
    if (v21 == 39)
      v20 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v20 = 2;
  }
  v22 = 0;
  v23 = *(_DWORD *)(a2 + 20);
  v24 = -(uint64_t)(v23 & 0x7FFFFFF);
  if (v23 < 0)
  {
    v30 = a2 - 32 * (v23 & 0x7FFFFFF);
    v31 = *(_QWORD *)(v30 - 8);
    if ((v31 & 0xFFFFFFFF0) != 0)
      v22 = (*(_DWORD *)(v30 - 12) - *(_DWORD *)(v30 - v31));
    else
      v22 = 0;
  }
  v25 = a2 - 32 * v20 - 32 * v22;
  v26 = a2 + 32 * v24;
  v27 = (unint64_t)(v25 - v26 - 32) >> 5;
  if (v27 >= 4)
  {
    if ((_DWORD)v27 == 5)
    {
      v28 = *(_QWORD **)(v26 + 96);
    }
    else if (a4)
    {
      v28 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)a2, v18);
      v24 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    }
    else
    {
      v28 = *(_QWORD **)v26;
    }
    return sub_1C53451A0(a1, *(unsigned __int8 **)(a2 + 32 * v24 + 32 * (v27 - 1)), v19, (uint64_t)v28);
  }
  return (llvm::Value *)v19;
}

llvm::Value **sub_1C5346184(uint64_t *a1, llvm::Type *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, int a7)
{
  uint64_t v10;
  _QWORD *v12;
  unsigned int v13;
  llvm::Constant *v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  llvm::Value **NullValue;
  unint64_t v20;
  int32x2_t v21;
  int8x8_t v22;
  _BYTE *v23;
  uint64_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int8x8_t v28;
  unsigned int v29;
  uint64_t *v30;
  const char *v31;
  __int16 v32;
  _BYTE v33[256];
  uint64_t v34;

  v10 = (uint64_t)a2;
  v34 = *MEMORY[0x1E0C80C00];
  v12 = (_QWORD *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u)
    v12 = (_QWORD *)*v12;
  v13 = *(_DWORD *)v12;
  v14 = *(llvm::Constant **)a2;
  v15 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  v16 = v15 - 1;
  if (!a7)
    v16 = -1;
  v17 = v16 & v13;
  if ((v16 & v13) >= 0x20)
    return llvm::Constant::getNullValue(v14, a2);
  if (v17 >= 0x11)
  {
    v17 -= 16;
    NullValue = llvm::Constant::getNullValue(v14, a2);
    a3 = v10;
    v10 = (uint64_t)NullValue;
  }
  if ((_DWORD)v15)
  {
    v20 = 0;
    v21 = vdup_n_s32(v17);
    v22 = (int8x8_t)vdup_n_s32((int)v15 - 16);
    v23 = v33;
    do
    {
      v24 = 0;
      v25 = vdup_n_s32(v20);
      v26 = (int32x2_t)0x100000000;
      do
      {
        v27 = vadd_s32(v21, v26);
        v28 = (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, (uint32x2_t)v27);
        if (a7)
          v29 = -1;
        else
          v29 = 0;
        *(int32x2_t *)&v23[v24] = vadd_s32(vadd_s32(v27, v25), (int32x2_t)vbic_s8(v22, vorr_s8(v28, (int8x8_t)vdup_n_s32(v29))));
        v26 = vadd_s32(v26, (int32x2_t)0x200000002);
        v24 += 8;
      }
      while (v24 != 64);
      v20 += 16;
      v23 += 64;
    }
    while (v20 < v15);
  }
  else
  {
    v15 = 0;
  }
  v31 = "palignr";
  v32 = 259;
  v30 = (uint64_t *)sub_1C486AD20((uint64_t)a1, a3, v10, v33, v15, (uint64_t)&v31);
  return (llvm::Value **)sub_1C53451A0(a1, a6, v30, a5);
}

unsigned __int8 *sub_1C5346348(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Constant *v9;
  unsigned __int8 *v10;
  llvm::Type *v11;
  unsigned __int8 *NullValue;
  unsigned int v13;
  int32x4_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  _QWORD *v17;
  int32x4_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  _WORD v24[20];
  _QWORD v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = (8 * *(_DWORD *)(*(_QWORD *)a2 + 32));
  llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)(a1 + 64) + 1912), (llvm::Type *)v7);
  v9 = (llvm::Constant *)v8;
  v25[0] = "cast";
  v26 = 259;
  v10 = sub_1C4773E38((uint64_t *)a1, 49, a2, v8, (uint64_t)v25);
  NullValue = (unsigned __int8 *)llvm::Constant::getNullValue(v9, v11);
  if (a3 <= 0xF)
  {
    if ((_DWORD)v7)
    {
      v13 = 0;
      v14 = vdupq_n_s32(v7 - a3);
      v15 = (uint32x4_t)vdupq_n_s32(v7);
      v16 = (int8x16_t)vdupq_n_s32(16 - (int)v7);
      v17 = v25;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      do
      {
        v19 = 0;
        v20 = vdupq_n_s32(v13);
        v21 = (int32x4_t)xmmword_1C6429EB0;
        do
        {
          v22 = vaddq_s32(v14, v21);
          *(int32x4_t *)&v17[v19] = vaddq_s32(vaddq_s32(v22, v20), (int32x4_t)vandq_s8(v16, (int8x16_t)vcgtq_u32(v15, (uint32x4_t)v22)));
          v21 = vaddq_s32(v21, v18);
          v19 += 2;
        }
        while (v19 != 8);
        v13 += 16;
        v17 += 8;
      }
      while ((_DWORD)v7 != v13);
    }
    v24[16] = 257;
    NullValue = (unsigned __int8 *)sub_1C486AD20(a1, (uint64_t)NullValue, (uint64_t)v10, v25, v7, (uint64_t)v24);
  }
  v25[0] = "cast";
  v26 = 259;
  return sub_1C4773E38((uint64_t *)a1, 49, NullValue, v6, (uint64_t)v25);
}

unsigned __int8 *sub_1C53464E0(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Constant *v9;
  unsigned __int8 *v10;
  llvm::Type *v11;
  unsigned __int8 *NullValue;
  unsigned int v13;
  int32x4_t v14;
  int8x16_t v15;
  _QWORD *v16;
  uint32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  _WORD v24[20];
  _QWORD v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = (8 * *(_DWORD *)(*(_QWORD *)a2 + 32));
  llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)(a1 + 64) + 1912), (llvm::Type *)v7);
  v9 = (llvm::Constant *)v8;
  v25[0] = "cast";
  v26 = 259;
  v10 = sub_1C4773E38((uint64_t *)a1, 49, a2, v8, (uint64_t)v25);
  NullValue = (unsigned __int8 *)llvm::Constant::getNullValue(v9, v11);
  if (a3 <= 0xF)
  {
    if ((_DWORD)v7)
    {
      v13 = 0;
      v14 = vdupq_n_s32(a3);
      v15 = (int8x16_t)vdupq_n_s32((int)v7 - 16);
      v16 = v25;
      v17.i64[0] = 0xF0000000FLL;
      v17.i64[1] = 0xF0000000FLL;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      do
      {
        v19 = 0;
        v20 = vdupq_n_s32(v13);
        v21 = (int32x4_t)xmmword_1C6429EB0;
        do
        {
          v22 = vaddq_s32(v21, v14);
          *(int32x4_t *)&v16[v19] = vaddq_s32(vaddq_s32(v22, v20), (int32x4_t)vandq_s8(v15, (int8x16_t)vcgtq_u32((uint32x4_t)v22, v17)));
          v21 = vaddq_s32(v21, v18);
          v19 += 2;
        }
        while (v19 != 8);
        v13 += 16;
        v16 += 8;
      }
      while ((_DWORD)v7 != v13);
    }
    v24[16] = 257;
    NullValue = (unsigned __int8 *)sub_1C486AD20(a1, (uint64_t)v10, (uint64_t)NullValue, v25, v7, (uint64_t)v24);
  }
  v25[0] = "cast";
  v26 = 259;
  return sub_1C4773E38((uint64_t *)a1, 49, NullValue, v6, (uint64_t)v25);
}

llvm::Value *sub_1C534666C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t Declaration;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _WORD v13[20];
  uint64_t v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), a3, 0, 0);
  if (Declaration)
    v6 = *(uint64_t ***)(Declaration + 24);
  else
    v6 = 0;
  v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v8 = *v7;
  v9 = v7[4];
  v14[0] = v8;
  v14[1] = v9;
  v13[16] = 257;
  v10 = (uint64_t *)sub_1C4774778(a1, v6, Declaration, v14, 2, (uint64_t)v13, 0);
  v11 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  return sub_1C53451A0(a1, *(unsigned __int8 **)(v11 + 96), v10, *(_QWORD *)(v11 + 64));
}

unsigned __int8 *sub_1C5346748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  llvm::Value *Neg;
  uint64_t v19;
  unsigned __int8 *v21[4];
  __int16 v22;

  v5 = a5;
  v6 = a4;
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 192))(*(_QWORD *)(a1 + 72), a2, a4, a5);
    if (v9)
      v10 = v9[16] >= 0x1Cu;
    else
      v10 = 0;
    if (v10)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9, a3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1 + 16 * v11;
        v14 = (unsigned __int8 **)(v9 + 48);
        do
        {
          v15 = *(_DWORD *)v12;
          v16 = *(unsigned __int8 **)(v12 + 8);
          if (v16)
          {
            if (!v15)
            {
              v21[0] = *(unsigned __int8 **)(v12 + 8);
              llvm::MetadataTracking::track((uint64_t)v21, v16, 2);
LABEL_20:
              if (v21 == v14)
              {
                if (v21[0])
                  llvm::MetadataTracking::untrack((uint64_t)v21, v21[0]);
              }
              else
              {
                if (*v14)
                  llvm::MetadataTracking::untrack((uint64_t)(v9 + 48), *v14);
                v17 = v21[0];
                *v14 = v21[0];
                if (v17)
                  llvm::MetadataTracking::retrack((uint64_t)v21, v17, (uint64_t)(v9 + 48));
              }
              goto LABEL_17;
            }
          }
          else
          {
            if (!*v14 && (v9[23] & 0x20) == 0)
              goto LABEL_17;
            if (!v15)
            {
              v21[0] = 0;
              goto LABEL_20;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v9, v15, (llvm::MDNode *)v16);
LABEL_17:
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
    v22 = 257;
    Neg = llvm::BinaryOperator::CreateNeg((uint64_t *)a2, (llvm::Type *)v21, 0);
    v19 = sub_1C4773754((uint64_t *)a1, (uint64_t)Neg, a3);
    v9 = (unsigned __int8 *)v19;
    if (v6)
      *(_BYTE *)(v19 + 17) |= 2u;
    if (v5)
      *(_BYTE *)(v19 + 17) |= 4u;
  }
  return v9;
}

void sub_1C53468F4(llvm::ValueAsMetadata ***a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::PoisonValue *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  llvm::Type *v22;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::ValueAsMetadata *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int i;
  _BYTE v32[32];
  __int16 v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[7];

  v36[6] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t)**a1;
  if (*(_QWORD *)(v3 + 72) == *(_QWORD *)(*v2 + 24))
  {
    sub_1C500A72C(v3, *v2);
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 20);
    v5 = v4 & 0x7FFFFFF;
    v6 = (_QWORD *)(v3 - 32 * v5);
    v7 = *(unsigned __int8 *)(v3 + 16);
    if (v7 == 84)
    {
      v8 = 0;
    }
    else if (v7 == 39)
    {
      v8 = (*(_DWORD *)(v3 + 80) + 1);
    }
    else
    {
      v8 = 2;
    }
    if (v4 < 0 && (v30 = *(v6 - 1), (v30 & 0xFFFFFFFF0) != 0))
      v9 = (*((_DWORD *)v6 - 3) - *(_DWORD *)((char *)v6 - v30));
    else
      v9 = 0;
    v10 = *(llvm::PoisonValue **)v3;
    v11 = v3 - 32 * v8 - 32 * v9 - 32;
    v34 = v36;
    v35 = 0x600000000;
    v12 = v11 - (_QWORD)v6;
    if ((unint64_t)(v11 - (_QWORD)v6) >= 0xC1)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v12 >> 5, 8);
      v13 = v35;
      v14 = v35;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    if (v6 != (_QWORD *)v11)
    {
      v15 = (char *)v34 + 8 * v13;
      v16 = 32 * v5 - 32 * v8 - 32 * v9 - 32;
      do
      {
        v17 = *v6;
        v6 += 4;
        *v15++ = v17;
        v16 -= 32;
      }
      while (v16);
    }
    LODWORD(v35) = v14 + ((unint64_t)v12 >> 5);
    v18 = (uint64_t *)a1[2];
    v19 = (uint64_t)*a1[1];
    if (v19)
      v20 = *(uint64_t ***)(v19 + 24);
    else
      v20 = 0;
    v33 = 257;
    v21 = (uint64_t *)sub_1C4774778(v18, v20, v19, (uint64_t *)v34, v14 + ((unint64_t)v12 >> 5), (uint64_t)v32, 0);
    v23 = (llvm::Value *)llvm::PoisonValue::get(v10, v22);
    for (i = 0; i < *((_DWORD *)v10 + 3); ++i)
    {
      v24 = (uint64_t)a1[2];
      v33 = 257;
      v25 = sub_1C506DBC4(v24, v21, &i, 1, (uint64_t)v32);
      v26 = (uint64_t)a1[2];
      v33 = 257;
      v23 = (llvm::Value *)sub_1C506D788(v26, (uint64_t)v23, v25, &i, 1, (uint64_t)v32);
    }
    llvm::Value::doRAUW(**a1, v23, (llvm::Value *)1);
    v27 = **a1;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v27 + 5) + 40, (uint64_t ***)v27);
    v28 = *((_QWORD *)v27 + 3);
    v29 = (_QWORD *)*((_QWORD *)v27 + 4);
    *v29 = v28;
    *(_QWORD *)(v28 + 8) = v29;
    *((_QWORD *)v27 + 3) = 0;
    *((_QWORD *)v27 + 4) = 0;
    llvm::Value::deleteValue(v27);
    if (v34 != v36)
      free(v34);
  }
}

uint64_t sub_1C5346BA8(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  int v7;

  v4 = (_QWORD *)(a1 + 64);
  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 1, 74);
  *(_QWORD *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    v6 = llvm::Attribute::get(**(uint64_t ***)a1, 74, 1 << a2);
    v7 = 0;
    result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t sub_1C5346C3C(uint64_t a1, __int16 a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  int v7;

  v4 = (_QWORD *)(a1 + 64);
  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, 2, 74);
  *(_QWORD *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    v6 = llvm::Attribute::get(**(uint64_t ***)a1, 74, 1 << a2);
    v7 = 1;
    result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

void llvm::UpgradeCallsToIntrinsic(uint64_t ***this, llvm::Function *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  llvm::Function *v9;
  int v10;
  llvm::CallBase *v11;
  llvm::CallBase *v12;
  llvm::LLVMContext *v13;
  uint64_t **v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  llvm::CallBase *v21;

  v21 = 0;
  v10 = sub_1C5332594(this, (std::string::size_type)&v21, a3, a4, a5, a6, a7, a8);
  v11 = v21;
  if (v21)
    v12 = v21;
  else
    v12 = (llvm::CallBase *)this;
  v13 = (llvm::LLVMContext *)*((unsigned int *)v12 + 9);
  if ((_DWORD)v13)
    *((_QWORD *)v12 + 14) = llvm::Intrinsic::getAttributes(**(llvm::Intrinsic ***)v12, v13);
  if (v10)
  {
    v14 = this[1];
    while (v14)
    {
      v15 = (unsigned __int8 *)v14[3];
      v14 = (uint64_t **)v14[1];
      v16 = v15[16];
      if (v16 >= 0x1C)
      {
        v17 = v16 - 33;
        v18 = v17 > 0x33;
        v19 = (1 << v17) & 0x8000000000041;
        if (!v18 && v19 != 0)
          llvm::UpgradeIntrinsicCall((llvm *)v15, v11, v9);
      }
    }
    llvm::Function::eraseFromParent((llvm::Function *)this);
  }
}

llvm *llvm::UpgradeTBAANode(llvm *this, llvm::MDNode *a2)
{
  llvm *v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  llvm::Type *v10;
  llvm::Value **NullValue;
  llvm::Value *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::Value **v17;
  llvm::Value *v18;
  llvm *Impl;
  llvm *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = this;
  v24[2] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 2);
  v4 = (unsigned __int8 **)((char *)this - 8 * v3);
  v5 = (uint64_t)*v4;
  if (v3 < 3 || **v4 - 4 >= 0x1F)
  {
    v7 = *((_QWORD *)this + 2);
    v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
      v8 = (uint64_t *)*v8;
    if ((_DWORD)v3 == 3)
    {
      v9 = v4[1];
      v24[0] = v5;
      v24[1] = v9;
      Impl = (llvm *)llvm::MDTuple::getImpl(v8, v24, 2, 0, 1);
      v21 = Impl;
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*v8 + 1984), v10);
      v13 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)NullValue, v12);
      v14 = ((_QWORD *)v2 - *((unsigned int *)v2 + 2))[2];
      v22 = v13;
      v23 = v14;
      v15 = v8;
      v16 = 4;
    }
    else
    {
      Impl = this;
      v21 = this;
      v17 = llvm::Constant::getNullValue((llvm::Constant *)(*v8 + 1984), a2);
      v22 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v17, v18);
      v15 = v8;
      v16 = 3;
    }
    return (llvm *)llvm::MDTuple::getImpl(v15, &Impl, v16, 0, 1);
  }
  return v2;
}

void llvm::UpgradeBitCastInst(llvm *this, uint64_t *a2, llvm::Value *a3, llvm::Type *a4, llvm::Instruction **a5)
{
  uint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  uint64_t v11;

  if ((_DWORD)this == 49)
  {
    *(_QWORD *)a4 = 0;
    v5 = *a2;
    v6 = *(_DWORD *)(*a2 + 8);
    v7 = v6;
    if ((v6 & 0xFE) == 0x12)
      v7 = *(_BYTE *)(**(_QWORD **)(v5 + 16) + 8);
    if (v7 == 15)
    {
      v8 = *((_DWORD *)a3 + 2);
      v9 = v8;
      if ((v8 & 0xFE) == 0x12)
        v9 = *(_BYTE *)(**((_QWORD **)a3 + 2) + 8);
      if (v9 == 15)
      {
        if ((v6 & 0xFE) == 0x12)
          v6 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
        if ((v8 & 0xFE) == 0x12)
          v8 = *(_DWORD *)(**((_QWORD **)a3 + 2) + 8);
        if ((v8 ^ v6) >= 0x100)
        {
          llvm::CastInst::Create(47);
          *(_QWORD *)a4 = v11;
          llvm::CastInst::Create(48);
        }
      }
    }
  }
}

llvm::UndefValue *llvm::UpgradeBitCastExpr(llvm *this, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Type *a4)
{
  _QWORD **v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  llvm::UndefValue *PtrToInt;

  if ((_DWORD)this != 49)
    return 0;
  v5 = *(_QWORD ***)a2;
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v7 = v6;
  if ((v6 & 0xFE) == 0x12)
    v7 = *(_BYTE *)(*v5[2] + 8);
  if (v7 != 15)
    return 0;
  v8 = *((_DWORD *)a3 + 2);
  v9 = v8;
  if ((v8 & 0xFE) == 0x12)
    v9 = *(_BYTE *)(**((_QWORD **)a3 + 2) + 8);
  if (v9 != 15)
    return 0;
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(*v5[2] + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**((_QWORD **)a3 + 2) + 8);
  if ((v8 ^ v6) < 0x100)
    return 0;
  PtrToInt = llvm::ConstantExpr::getPtrToInt(a2, (llvm::Constant *)(**v5 + 1984), 0);
  return llvm::ConstantExpr::getIntToPtr(PtrToInt, a3, 0);
}

uint64_t llvm::UpgradeDebugInfo(llvm *this, llvm::Module *a2)
{
  llvm *DebugMetadataVersionFromModule;
  llvm::Module *v4;
  int v5;
  const llvm::Module *v6;
  BOOL *v7;
  llvm::Module *v8;
  char v9;
  uint64_t v10;
  llvm *v11;
  char v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void *v20;
  int v21;
  char v22;
  llvm *v23;
  int v24;
  char v25;

  DebugMetadataVersionFromModule = (llvm *)llvm::getDebugMetadataVersionFromModule(this, a2);
  if ((_DWORD)DebugMetadataVersionFromModule == 700000003
    || (v5 = (int)DebugMetadataVersionFromModule, (_DWORD)DebugMetadataVersionFromModule == 3))
  {
    v25 = 0;
    v6 = (const llvm::Module *)llvm::errs(DebugMetadataVersionFromModule);
    if (llvm::verifyModule(this, v6, (llvm::raw_ostream *)&v25, v7))
      llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const char *)1);
    if (!v25)
    {
      v9 = 0;
      return v9 & 1;
    }
    v21 = 5;
    v22 = 1;
    v20 = &unk_1E814E6D0;
    v23 = this;
    llvm::LLVMContext::diagnose(*(_QWORD *)this, (const llvm::DiagnosticInfo *)&v20);
    v9 = llvm::StripDebugInfo(this, v8);
  }
  else if (llvm::StripDebugInfo(this, v4))
  {
    v21 = 5;
    v9 = 1;
    v22 = 1;
    v20 = &unk_1E814E6A0;
    v23 = this;
    v24 = v5;
    llvm::LLVMContext::diagnose(*(_QWORD *)this, (const llvm::DiagnosticInfo *)&v20);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_QWORD *)this + 10);
  if ((llvm *)v10 != (llvm *)((char *)this + 72))
  {
    do
    {
      v11 = *(llvm **)(v10 + 8);
      v12 = *(_BYTE *)(v10 + 39);
      v13 = v12;
      v14 = v12 & 0x7E;
      if (v13 < 0)
        v14 = *(_QWORD *)(v10 + 24);
      if (v14 >= 0xA)
      {
        if (v13 >= 0)
          v15 = (uint64_t *)(v10 + 16);
        else
          v15 = *(uint64_t **)(v10 + 16);
        v16 = *v15;
        v17 = *((unsigned __int16 *)v15 + 4);
        if (v16 == 0x696F706563617274 && v17 == 29806)
          llvm::Module::eraseNamedMetadata(*(llvm::Module **)(v10 + 40), (llvm::NamedMDNode *)v10);
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v11 != (llvm *)((char *)this + 72));
  }
  return v9 & 1;
}

llvm::NamedMDNode *llvm::UpgradeARCRuntime(llvm *this, llvm::Module *a2)
{
  llvm::NamedMDNode *result;
  llvm::NamedMDNode *v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  void *v8;
  const void *v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  const void *v16;
  size_t v17;
  void *v18;
  std::string::size_type v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void **p_p;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  unsigned __int8 *v30;
  size_t v31;
  uint64_t *v32;
  void *__p;
  size_t v34;
  unint64_t v35;
  std::string __dst;
  std::string v37;
  void *v38[2];
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v32 = (uint64_t *)this;
  sub_1C534783C(&v32, "clang.arc.use", 214);
  v40 = "clang.arc.retainAutoreleasedReturnValueMarker";
  LOWORD(v43) = 259;
  result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v40);
  if (result)
  {
    v4 = result;
    v5 = ***((_QWORD ***)result + 6);
    if (v5)
    {
      v6 = *(_QWORD **)(v5 - 8 * *(unsigned int *)(v5 + 8));
      if (v6)
      {
        if (!*(_BYTE *)v6)
        {
          v40 = &v42;
          v41 = 0x400000000;
          v7 = (void **)v6[1];
          v8 = *v7;
          v38[0] = v7 + 3;
          v38[1] = v8;
          llvm::StringRef::split(v38, (uint64_t)&v40, "#", 1uLL, -1, 1);
          if ((_DWORD)v41 != 2)
            goto LABEL_48;
          v9 = *(const void **)v40;
          if (!*(_QWORD *)v40)
          {
            memset(&__dst, 0, sizeof(__dst));
            goto LABEL_17;
          }
          v10 = *((_QWORD *)v40 + 1);
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_50;
          if (v10 >= 0x17)
          {
            v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v12 = v10 | 7;
            v13 = v12 + 1;
            p_dst = (std::string *)operator new(v12 + 1);
            __dst.__r_.__value_.__l.__size_ = v10;
            __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v40 + 1);
            p_dst = &__dst;
            if (!v10)
              goto LABEL_16;
          }
          memmove(p_dst, v9, v10);
LABEL_16:
          p_dst->__r_.__value_.__s.__data_[v10] = 0;
LABEL_17:
          v14 = std::string::append(&__dst, ";");
          v15 = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          v16 = (const void *)*((_QWORD *)v40 + 2);
          if (!v16)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            __p = 0;
            v34 = 0;
            v35 = 0;
LABEL_28:
            v24 = v21 < 0;
            if (v21 >= 0)
              p_p = &__p;
            else
              p_p = v20;
            v26 = v21 & 0x7F;
            if (v24)
              v27 = v19;
            else
              v27 = v26;
            v28 = std::string::append(&v37, (const std::string::value_type *)p_p, v27);
            v29 = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)v38 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v39 = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v35) < 0)
              operator delete(__p);
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v37.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v39 >= 0)
              v30 = (unsigned __int8 *)v38;
            else
              v30 = (unsigned __int8 *)v38[0];
            if (v39 >= 0)
              v31 = HIBYTE(v39) & 0x7F;
            else
              v31 = (size_t)v38[1];
            v6 = llvm::MDString::get(*(uint64_t **)this, v30, v31);
            if (SHIBYTE(v39) < 0)
              operator delete(v38[0]);
LABEL_48:
            llvm::Module::addModuleFlag((uint64_t **)this, (llvm::Type *)1, "clang.arc.retainAutoreleasedReturnValueMarker", 0x2DuLL, (uint64_t)v6);
            llvm::Module::eraseNamedMetadata(this, v4);
          }
          v17 = *((_QWORD *)v40 + 3);
          if (v17 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v17 >= 0x17)
            {
              v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v17 | 7) != 0x17)
                v22 = v17 | 7;
              v23 = v22 + 1;
              v18 = operator new(v22 + 1);
              v34 = v17;
              v35 = v23 | 0x8000000000000000;
              __p = v18;
            }
            else
            {
              HIBYTE(v35) = *((_QWORD *)v40 + 3);
              v18 = &__p;
              if (!v17)
                goto LABEL_27;
            }
            memmove(v18, v16, v17);
LABEL_27:
            *((_BYTE *)v18 + v17) = 0;
            v21 = HIBYTE(v35);
            v20 = (void **)__p;
            v19 = v34;
            goto LABEL_28;
          }
LABEL_50:
          abort();
        }
      }
    }
  }
  return result;
}

void sub_1C534783C(uint64_t **a1, char *__s, int a3)
{
  uint64_t *v6;
  size_t v7;
  uint64_t v8;
  llvm::Function *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  llvm::Value *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Declaration;
  _BYTE v36[32];
  __int16 v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[16];
  void *v41[2];
  _QWORD v42[17];

  v42[15] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  if (__s)
    v7 = strlen(__s);
  else
    v7 = 0;
  v8 = sub_1C4FB7E80((uint64_t *)v6[14], (unsigned __int8 *)__s, v7);
  if (v8)
  {
    v9 = (llvm::Function *)v8;
    if (!*(_BYTE *)(v8 + 16))
    {
      Declaration = llvm::Intrinsic::getDeclaration(*a1, a3, 0, 0);
      v10 = *((_QWORD *)v9 + 1);
      if (!v10)
        goto LABEL_47;
      do
      {
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 24);
          v10 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            if (*(_BYTE *)(v11 + 16) == 84)
            {
              v12 = *(_QWORD *)(v11 - 32);
              if (!v12 || *(_BYTE *)(v12 + 16) || *(_QWORD *)(v12 + 24) != *(_QWORD *)(v11 + 72))
                v12 = 0;
              if ((llvm::Function *)v12 == v9)
              {
                sub_1C4D8ADA0((uint64_t)v41, *(uint64_t ***)(v11 + 40), v11 + 24, 0, 0, 0);
                v13 = *(_QWORD *)(Declaration + 24);
                v38 = v40;
                v39 = 0x200000000;
                v14 = *(uint64_t **)(v13 + 16);
                if (*v14 == *(_QWORD *)v11 || llvm::CastInst::castIsValid(49, *(llvm::Type **)v11, *v14))
                {
                  v15 = *(unsigned __int8 *)(v11 + 16);
                  if (v15 == 84)
                  {
                    v16 = 0;
                  }
                  else if (v15 == 39)
                  {
                    v16 = (*(_DWORD *)(v11 + 80) + 1);
                  }
                  else
                  {
                    v16 = 2;
                  }
                  v17 = *(_DWORD *)(v11 + 20);
                  if (v17 < 0
                    && (v33 = v11 - 32 * (v17 & 0x7FFFFFF), v34 = *(_QWORD *)(v33 - 8), (v34 & 0xFFFFFFFF0) != 0))
                  {
                    v19 = -(uint64_t)(v17 & 0x7FFFFFF);
                    v18 = (*(_DWORD *)(v33 - 12) - *(_DWORD *)(v33 - v34));
                  }
                  else
                  {
                    v18 = 0;
                    v19 = -(uint64_t)(v17 & 0x7FFFFFF);
                  }
                  v20 = -32 * v16 - 32 * v18 - 32 * v19 - 32;
                  if ((v20 & 0x1FFFFFFFE0) != 0)
                  {
                    v21 = 0;
                    v22 = (v20 >> 5);
                    v23 = v11;
                    do
                    {
                      v24 = *(unsigned __int8 **)(v23 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
                      if (v21 < (*(_DWORD *)(v13 + 12) - 1))
                      {
                        if (!llvm::CastInst::castIsValid(49, *(llvm::Type **)v24, *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v21 + 8)))goto LABEL_34;
                        v25 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * v21 + 8);
                        v37 = 257;
                        v24 = sub_1C4773E38((uint64_t *)v41, 49, v24, v25, (uint64_t)v36);
                      }
                      v26 = v39;
                      if (v39 >= (unint64_t)HIDWORD(v39))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 8);
                        v26 = v39;
                      }
                      *((_QWORD *)v38 + v26) = v24;
                      v27 = v39 + 1;
                      LODWORD(v39) = v39 + 1;
                      ++v21;
                      v23 += 32;
                    }
                    while (v22 != v21);
                  }
                  else
                  {
                    v27 = v39;
                  }
                  v37 = 257;
                  v28 = (llvm::Value *)sub_1C4774778((uint64_t *)v41, (uint64_t **)v13, Declaration, (uint64_t *)v38, v27, (uint64_t)v36, 0);
                  *((_WORD *)v28 + 9) = *((_WORD *)v28 + 9) & 0xFFFC | *(_WORD *)(v11 + 18) & 3;
                  llvm::Value::takeName(v28, (llvm::Value *)v11);
                  v29 = *(_QWORD *)v11;
                  v37 = 257;
                  v30 = sub_1C4773E38((uint64_t *)v41, 49, (unsigned __int8 *)v28, v29, (uint64_t)v36);
                  if (*(_QWORD *)(v11 + 8))
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, (llvm::Value *)v30, (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
                  v31 = *(_QWORD *)(v11 + 24);
                  v32 = *(_QWORD **)(v11 + 32);
                  *v32 = v31;
                  *(_QWORD *)(v31 + 8) = v32;
                  *(_QWORD *)(v11 + 24) = 0;
                  *(_QWORD *)(v11 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v11);
                }
LABEL_34:
                if (v38 != v40)
                  free(v38);
                if (v41[0] != v42)
                  break;
              }
            }
          }
          if (!v10)
            goto LABEL_46;
        }
        free(v41[0]);
      }
      while (v10);
LABEL_46:
      if (!*((_QWORD *)v9 + 1))
LABEL_47:
        llvm::Function::eraseFromParent(v9);
    }
  }
}

uint64_t llvm::UpgradeModuleFlags(uint64_t **this, llvm::Module *a2)
{
  uint64_t **v2;
  uint64_t NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _BOOL4 v20;
  _BOOL4 v24;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::APInt *v33;
  unsigned int v34;
  llvm::ConstantInt *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD **v38;
  llvm::Value **v39;
  llvm::Value *v40;
  unsigned __int8 *Impl;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  llvm::ConstantInt *v52;
  uint64_t v53;
  _QWORD **v54;
  llvm::Value **v55;
  llvm::Value *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  BOOL v59;
  BOOL v60;
  uint64_t v65;
  uint64_t v66;
  llvm::UndefValue *AggregateElement;
  uint64_t **v68;
  char *v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t v72;
  llvm::ConstantInt *v73;
  unsigned int v74;
  int v75;
  char v76;
  llvm::Value *v77;
  llvm::ValueHandleBase *v78;
  const llvm::APInt *v79;
  llvm::ConstantInt *v80;
  unsigned int v81;
  char v82;
  llvm::Value *v83;
  llvm::ValueHandleBase *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  std::string::size_type *v87;
  std::string::size_type v88;
  char v89;
  uint64_t v90;
  size_t *v91;
  const void *v92;
  size_t v93;
  void **v94;
  std::string::size_type v95;
  const std::string::value_type *v96;
  char v97;
  uint64_t v98;
  BOOL v99;
  const std::string::value_type *p_dst;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type size;
  std::string::size_type v104;
  uint64_t v105;
  BOOL v106;
  std::string *v107;
  size_t v108;
  size_t v109;
  unsigned __int8 *v110;
  _BOOL4 v113;
  int v114;
  int v115;
  int v116;
  int v117;
  char v118;
  char v120;
  const llvm::APInt *v121;
  llvm::ConstantInt *v122;
  unsigned int v123;
  char v124;
  llvm::Value *v125;
  llvm::ValueHandleBase *v126;
  _QWORD *v127;
  const llvm::APInt *v128;
  llvm::ConstantInt *v129;
  unsigned int v130;
  unint64_t v131;
  llvm::Value *v132;
  llvm::ValueHandleBase *v133;
  _QWORD *v134;
  llvm::APInt **v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150[8];
  BOOL v151[8];
  BOOL v152[8];
  _QWORD **v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t **v166;
  uint64_t **v167;
  uint64_t **v168;
  unsigned int v169;
  llvm::Type *v170;
  unint64_t v171;
  uint64_t v172;
  std::string v173;
  void **__dst;
  size_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  _QWORD *v179;
  __int16 v180;
  uint64_t v181;

  v2 = this;
  v181 = *MEMORY[0x1E0C80C00];
  v177 = "llvm.module.flags";
  v180 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)this, (uint64_t)&v177);
  if (!NamedMetadata)
    return sub_1C5348D0C(v2);
  v4 = NamedMetadata;
  v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
  if (!(_DWORD)v5)
  {
    v9 = 0;
    goto LABEL_210;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LOBYTE(v170) = 0;
  LOBYTE(v171) = 0;
  v169 = 0;
  v172 = **v2;
  v12 = v172 + 1912;
  v13 = 0x67616D4920432D65;
  v14 = &v179;
  do
  {
    v15 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + 8 * v6);
    if (*(_DWORD *)(v15 + 8) == 3)
    {
      v16 = *(_QWORD *)(v15 - 16);
      if (v16)
      {
        if (!*(_BYTE *)v16)
        {
          v17 = *(_QWORD *)(v16 + 8);
          v18 = (_QWORD *)(v17 + 24);
          v19 = *(_QWORD *)v17;
          if (*(_QWORD *)v17 == 9)
          {
            if ((*v18 != 0x6576654C20434950 || *(_BYTE *)(v17 + 32) != 108)
              && (*v18 != 0x6576654C20454950 || *(_BYTE *)(v17 + 32) != 108))
            {
              goto LABEL_69;
            }
            v30 = *(_QWORD *)(v15 - 24);
            if (!v30)
              goto LABEL_69;
            if (*(_BYTE *)v30 != 1)
              goto LABEL_69;
            v31 = *(_QWORD *)(v30 + 128);
            if (*(_BYTE *)(v31 + 16) != 16)
              goto LABEL_69;
            v32 = v12;
            v166 = v2;
            v33 = (llvm::APInt *)(v31 + 24);
            v34 = *(_DWORD *)(v31 + 32);
            if (v34 >= 0x41)
            {
              *(_QWORD *)v150 = v14;
              v142 = v32;
              v146 = v8;
              v154 = v7;
              v160 = v11;
              v137 = v10;
              v135 = (llvm::APInt **)(v31 + 24);
              if (v34 - llvm::APInt::countLeadingZerosSlowCase(v33) > 0x40)
              {
                v2 = v166;
                v10 = v137;
                v7 = v154;
                v11 = v160;
                v8 = v146;
                v12 = v142;
                v13 = 0x67616D4920432D65;
                v14 = *(_QWORD ***)v150;
                goto LABEL_69;
              }
              v33 = *v135;
              v2 = v166;
              v10 = v137;
              v7 = v154;
              v11 = v160;
              v8 = v146;
              v32 = v142;
              v13 = 0x67616D4920432D65;
              v14 = *(_QWORD ***)v150;
            }
            else
            {
              v2 = v166;
            }
            if (*(_QWORD *)v33 != 1)
            {
              v12 = v32;
              goto LABEL_69;
            }
            v35 = (llvm::ConstantInt *)(**v2 + 1960);
            v177 = 0;
            v178 = 0;
            v179 = 0;
            v138 = v10;
            v155 = v7;
            v161 = v11;
            v36 = v8;
            v37 = v32;
            v38 = v14;
            v39 = llvm::ConstantInt::get(v35, 7, 0);
            v177 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v39, v40);
            v178 = (uint64_t)llvm::MDString::get(*v2, (unsigned __int8 *)(*(_QWORD *)(v16 + 8) + 24), **(_QWORD **)(v16 + 8));
            v179 = *(_QWORD **)(v15 - 8 * *(unsigned int *)(v15 + 8) + 16);
            v9 = 1;
            Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(*v2, &v177, 3, 0, 1);
            sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v4 + 48) + 8 * v6), Impl);
            v14 = v38;
            v13 = 0x67616D4920432D65;
            v12 = v37;
            v8 = v36;
            v7 = v155;
            v11 = v161;
            v10 = v138;
            v17 = *(_QWORD *)(v16 + 8);
            v19 = *(_QWORD *)v17;
          }
          else
          {
            if (v19 == 28)
            {
              v20 = *v18 == 0x76697463656A624FLL
                 && *(_QWORD *)(v17 + 32) == 0x73616C4320432D65
                 && *(_QWORD *)(v17 + 40) == 0x7265706F72502073
                 && *(_DWORD *)(v17 + 48) == 1936025972;
              goto LABEL_35;
            }
            if (v19 == 30)
            {
              v20 = 0;
              v24 = *v18 == 0x76697463656A624FLL
                 && *(_QWORD *)(v17 + 32) == 0x67616D4920432D65
                 && *(_QWORD *)(v17 + 40) == 0x56206F666E492065
                 && *(_QWORD *)(v17 + 46) == 0x6E6F697372655620;
              v7 |= v24;
LABEL_35:
              v8 = v20 | v8;
              goto LABEL_69;
            }
          }
          v18 = (_QWORD *)(v17 + 24);
          if (v19 == 25)
          {
            if (*v18 == 0x742D68636E617262
              && *(_QWORD *)(v17 + 32) == 0x6E652D7465677261
              && *(_QWORD *)(v17 + 40) == 0x6E656D6563726F66
              && *(_BYTE *)(v17 + 48) == 116)
            {
LABEL_78:
              v47 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8));
              if (v47)
              {
                if (*(_BYTE *)v47 == 1)
                {
                  v48 = *(_QWORD *)(v47 + 128);
                  if (*(_BYTE *)(v48 + 16) == 16)
                  {
                    v167 = v2;
                    v49 = (_QWORD *)(v48 + 24);
                    v50 = *(_DWORD *)(v48 + 32);
                    if (v50 >= 0x41)
                    {
                      *(_QWORD *)v151 = v14;
                      v143 = v12;
                      v147 = v8;
                      v156 = v7;
                      v162 = v11;
                      v139 = v10;
                      if (v50 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v48 + 24)) > 0x40)
                      {
                        v2 = v167;
                        v10 = v139;
                        v7 = v156;
                        v11 = v162;
                        v8 = v147;
                        v12 = v143;
                        v13 = 0x67616D4920432D65;
                        v14 = *(_QWORD ***)v151;
                        goto LABEL_88;
                      }
                      v49 = (_QWORD *)*v49;
                      v10 = v139;
                      v7 = v156;
                      v11 = v162;
                      v8 = v147;
                      v12 = v143;
                      v13 = 0x67616D4920432D65;
                      v14 = *(_QWORD ***)v151;
                    }
                    if (*v49 == 1)
                    {
                      v2 = v167;
                      v51 = v12;
                      v52 = (llvm::ConstantInt *)(**v167 + 1960);
                      v177 = 0;
                      v178 = 0;
                      v179 = 0;
                      v140 = v10;
                      v157 = v7;
                      v163 = v11;
                      v53 = v8;
                      v54 = v14;
                      v55 = llvm::ConstantInt::get(v52, 8, 0);
                      v177 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v55, v56);
                      v57 = v15 - 8 * *(unsigned int *)(v15 + 8);
                      v178 = *(_QWORD *)(v57 + 8);
                      v179 = *(_QWORD **)(v57 + 16);
                      v9 = 1;
                      v58 = (unsigned __int8 *)llvm::MDTuple::getImpl(*v167, &v177, 3, 0, 1);
                      sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v4 + 48) + 8 * v6), v58);
                      v14 = v54;
                      v13 = 0x67616D4920432D65;
                      v12 = v51;
                      v8 = v53;
                      v7 = v157;
                      v11 = v163;
                      v10 = v140;
                      v17 = *(_QWORD *)(v16 + 8);
                      v19 = *(_QWORD *)v17;
                    }
                    else
                    {
                      v2 = v167;
                    }
                  }
                }
              }
LABEL_88:
              if (v19 == 30)
              {
                v59 = *(_QWORD *)(v17 + 24) == 0x76697463656A624FLL && *(_QWORD *)(v17 + 32) == 0x67616D4920432D65;
                v60 = v59 && *(_QWORD *)(v17 + 40) == 0x53206F666E492065;
                if (!v60 || *(_QWORD *)(v17 + 46) != 0x6E6F697463655320)
                  goto LABEL_99;
                v86 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 16);
                if (!v86 || *(_BYTE *)v86)
                  goto LABEL_99;
                v145 = v12;
                v149 = v8;
                v159 = v7;
                v165 = v11;
                v141 = v10;
                v153 = v14;
                v177 = v14;
                v178 = 0x400000000;
                v87 = *(std::string::size_type **)(v86 + 8);
                v88 = *v87;
                v173.__r_.__value_.__r.__words[0] = (std::string::size_type)(v87 + 3);
                v173.__r_.__value_.__l.__size_ = v88;
                llvm::StringRef::split(&v173, (uint64_t)&v177, " ", 1uLL, -1, 1);
                v89 = v178;
                if ((_DWORD)v178 != 1)
                {
                  memset(&v173, 0, sizeof(v173));
                  if ((_DWORD)v178)
                  {
                    v90 = 16 * v178;
                    v91 = (size_t *)((char *)v177 + 8);
                    v168 = v2;
                    while (1)
                    {
                      v92 = (const void *)*(v91 - 1);
                      if (v92)
                        break;
                      v95 = 0;
                      v96 = 0;
                      v97 = 0;
                      __dst = 0;
                      v175 = 0;
                      v176 = 0;
LABEL_147:
                      v99 = v97 < 0;
                      if (v97 >= 0)
                        p_dst = (const std::string::value_type *)&__dst;
                      else
                        p_dst = v96;
                      v101 = v97 & 0x7F;
                      if (v99)
                        v102 = v95;
                      else
                        v102 = v101;
                      std::string::append(&v173, p_dst, v102);
                      if (SHIBYTE(v176) < 0)
                        operator delete(__dst);
                      v91 += 2;
                      v90 -= 16;
                      if (!v90)
                      {
                        v89 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
                        size = v173.__r_.__value_.__l.__size_;
                        v104 = v173.__r_.__value_.__r.__words[0];
                        goto LABEL_159;
                      }
                    }
                    v93 = *v91;
                    if (*v91 >= 0x7FFFFFFFFFFFFFF8)
                      abort();
                    if (v93 >= 0x17)
                    {
                      v98 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v93 | 7) != 0x17)
                        v98 = v93 | 7;
                      v136 = v98 + 1;
                      v94 = (void **)operator new(v98 + 1);
                      v175 = v93;
                      v176 = v136 | 0x8000000000000000;
                      __dst = v94;
                    }
                    else
                    {
                      HIBYTE(v176) = *v91;
                      v94 = (void **)&__dst;
                      if (!v93)
                        goto LABEL_146;
                    }
                    memmove(v94, v92, v93);
LABEL_146:
                    *((_BYTE *)v94 + v93) = 0;
                    v97 = HIBYTE(v176);
                    v96 = (const std::string::value_type *)__dst;
                    v95 = v175;
                    v2 = v168;
                    goto LABEL_147;
                  }
                  size = 0;
                  v104 = 0;
LABEL_159:
                  v175 = 0;
                  v176 = 0;
                  __dst = 0;
                  v105 = v15 - 8 * *(unsigned int *)(v15 + 8);
                  __dst = *(void ***)v105;
                  v175 = *(_QWORD *)(v105 + 8);
                  v106 = v89 < 0;
                  if (v89 >= 0)
                    v107 = &v173;
                  else
                    v107 = (std::string *)v104;
                  v108 = v89 & 0x7F;
                  if (v106)
                    v109 = size;
                  else
                    v109 = v108;
                  v176 = (unint64_t)llvm::MDString::get(*v2, (unsigned __int8 *)v107, v109);
                  v110 = (unsigned __int8 *)llvm::MDTuple::getImpl(*v2, &__dst, 3, 0, 1);
                  sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v4 + 48) + 8 * v6), v110);
                  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v173.__r_.__value_.__l.__data_);
                  v9 = 1;
                }
                v14 = v153;
                if (v177 != v153)
                {
                  free(v177);
                  v14 = v153;
                }
                v17 = *(_QWORD *)(v16 + 8);
                v19 = *(_QWORD *)v17;
                v10 = v141;
                v7 = v159;
                v11 = v165;
                v8 = v149;
                v12 = v145;
                v13 = 0x67616D4920432D65;
                if (*(_QWORD *)v17 == 30)
                {
LABEL_99:
                  if (*(_QWORD *)(v17 + 24) != 0x76697463656A624FLL
                    || *(_QWORD *)(v17 + 32) != 0x6272614720432D65
                    || *(_QWORD *)(v17 + 40) != 0x6C6C6F4320656761
                    || *(_QWORD *)(v17 + 46) != 0x6E6F697463656C6CLL)
                  {
                    goto LABEL_181;
                  }
                  v65 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 16);
                  if (*(_BYTE *)v65 != 1)
                    goto LABEL_181;
                  v66 = v12;
                  AggregateElement = *(llvm::UndefValue **)(v65 + 128);
                  if (*(_QWORD *)AggregateElement == v66)
                  {
                    v12 = v66;
                    goto LABEL_183;
                  }
                  v144 = v66;
                  *(_QWORD *)v152 = v14;
                  if (*((_BYTE *)AggregateElement + 16) != 16)
                  {
                    v114 = v10;
                    v115 = v11;
                    v116 = v7;
                    v117 = v8;
                    AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
                    LODWORD(v8) = v117;
                    v7 = v116;
                    v11 = v115;
                    v10 = v114;
                  }
                  v68 = v2;
                  v71 = (unint64_t *)*((_QWORD *)AggregateElement + 3);
                  v69 = (char *)AggregateElement + 24;
                  v70 = v71;
                  if (*((_DWORD *)v69 + 2) < 0x41u)
                    v70 = (unint64_t *)v69;
                  v72 = *v70;
                  if (*v70 >= 0x100)
                  {
                    v169 = BYTE1(v72);
                    v11 = 1;
                    v170 = (llvm::Type *)(v72 >> 24);
                    v171 = v72 >> 16;
                  }
                  v177 = 0;
                  v178 = 0;
                  v179 = 0;
                  v73 = *(llvm::ConstantInt **)(v172 + 1960);
                  v74 = *(_DWORD *)(v172 + 1968);
                  LODWORD(v173.__r_.__value_.__r.__words[1]) = v74 >> 8;
                  v158 = v7;
                  v164 = v11;
                  v148 = v8;
                  v75 = v10;
                  if (v74 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v173, 1, 0);
                  }
                  else
                  {
                    if (v74 <= 0xFF)
                      v76 = 0;
                    else
                      v76 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v74);
                    v173.__r_.__value_.__r.__words[0] = v76 & 1;
                  }
                  v78 = llvm::ConstantInt::get(v73, (llvm::LLVMContext *)&v173, (const llvm::APInt *)v13);
                  if (LODWORD(v173.__r_.__value_.__r.__words[1]) >= 0x41 && v173.__r_.__value_.__r.__words[0])
                    MEMORY[0x1CAA32F9C](v173.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                  v177 = llvm::ValueAsMetadata::get(v78, v77);
                  v178 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 8);
                  v80 = *(llvm::ConstantInt **)(v172 + 1912);
                  v81 = *(_DWORD *)(v172 + 1920);
                  LODWORD(v173.__r_.__value_.__r.__words[1]) = v81 >> 8;
                  if (v81 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v173, v72, 0);
                  }
                  else
                  {
                    if (v81 <= 0xFF)
                      v82 = 0;
                    else
                      v82 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v81);
                    v173.__r_.__value_.__r.__words[0] = (v82 & v72);
                  }
                  v84 = llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v173, v79);
                  if (LODWORD(v173.__r_.__value_.__r.__words[1]) >= 0x41 && v173.__r_.__value_.__r.__words[0])
                    MEMORY[0x1CAA32F9C](v173.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                  v179 = llvm::ValueAsMetadata::get(v84, v83);
                  v2 = v68;
                  v9 = 1;
                  v85 = (unsigned __int8 *)llvm::MDTuple::getImpl(*v68, &v177, 3, 0, 1);
                  sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v4 + 48) + 8 * v6), v85);
                  v17 = *(_QWORD *)(v16 + 8);
                  v19 = *(_QWORD *)v17;
                  v10 = v75;
                  v7 = v158;
                  v11 = v164;
                  v8 = v148;
                  v12 = v144;
                  v13 = 0x67616D4920432D65;
                  v14 = *(_QWORD ***)v152;
                }
              }
              if (v19 == 19)
              {
                v113 = *(_QWORD *)(v17 + 24) == 0x2E68747561727470
                    && *(_QWORD *)(v17 + 32) == 0x737265762D696261
                    && *(_QWORD *)(v17 + 35) == 0x6E6F69737265762DLL;
                goto LABEL_182;
              }
LABEL_181:
              v113 = 0;
LABEL_182:
              v10 |= v113;
              goto LABEL_183;
            }
LABEL_70:
            if (*v18 != 0x7465722D6E676973
              || v18[1] != 0x726464612D6E7275
              || *(_QWORD *)((char *)v18 + 11) != 0x737365726464612DLL)
            {
              goto LABEL_88;
            }
            goto LABEL_78;
          }
LABEL_69:
          if (v19 < 0x13)
            goto LABEL_181;
          goto LABEL_70;
        }
      }
    }
LABEL_183:
    ++v6;
  }
  while (v6 != v5);
  v118 = v10;
  if (v8 & 1 | ((v7 & 1) == 0))
  {
    if ((v11 & 1) == 0)
      goto LABEL_209;
    goto LABEL_197;
  }
  v120 = v11;
  llvm::Module::addModuleFlag(v2, (llvm::Type *)4, "Objective-C Class Properties", 0x1CuLL, 0);
  if ((v120 & 1) != 0)
  {
LABEL_197:
    llvm::Module::addModuleFlag(v2, (llvm::Type *)1, "Swift ABI Version", 0x11uLL, (llvm::Type *)v169);
    v122 = *(llvm::ConstantInt **)(v172 + 1912);
    v123 = *(_DWORD *)(v172 + 1920);
    LODWORD(v178) = v123 >> 8;
    if (v123 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v177, v170, 0);
    }
    else
    {
      if (v123 <= 0xFF)
        v124 = 0;
      else
        v124 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v123);
      v177 = (void *)(v124 & v170);
    }
    v126 = llvm::ConstantInt::get(v122, (llvm::LLVMContext *)&v177, v121);
    if (v178 >= 0x41 && v177)
      MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
    v127 = llvm::ValueAsMetadata::get(v126, v125);
    llvm::Module::addModuleFlag(v2, (llvm::Type *)1, "Swift Major Version", 0x13uLL, (uint64_t)v127);
    v129 = *(llvm::ConstantInt **)(v172 + 1912);
    v130 = *(_DWORD *)(v172 + 1920);
    LODWORD(v178) = v130 >> 8;
    if (v130 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v177, v171, 0);
    }
    else
    {
      if (v130 <= 0xFF)
        LOBYTE(v131) = 0;
      else
        v131 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v130);
      v177 = (void *)(v131 & v171);
    }
    v133 = llvm::ConstantInt::get(v129, (llvm::LLVMContext *)&v177, v128);
    if (v178 >= 0x41)
    {
      if (v177)
        MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
    }
    v134 = llvm::ValueAsMetadata::get(v133, v132);
    v9 = 1;
    llvm::Module::addModuleFlag(v2, (llvm::Type *)1, "Swift Minor Version", 0x13uLL, (uint64_t)v134);
LABEL_209:
    if ((v118 & 1) == 0)
LABEL_210:
      v9 |= sub_1C5348D0C(v2);
  }
  else
  {
    v9 = 1;
    if ((v118 & 1) == 0)
      goto LABEL_210;
  }
  return v9 & 1;
}

uint64_t sub_1C5348D0C(uint64_t **a1)
{
  llvm::Triple *ArchName;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t **v7;
  __int16 v8;
  void *__p[2];
  char v10;

  v8 = 260;
  v7 = a1 + 27;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v7);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)__p);
  if (v3 == 6
    && (*(_DWORD *)ArchName == 913142369 ? (v4 = *((unsigned __int16 *)ArchName + 2) == 25908) : (v4 = 0), v4))
  {
    llvm::Module::setPtrAuthABIVersion(a1, 0xFFFFFFFFuLL);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (v10 < 0)
    operator delete(__p[0]);
  return v5;
}

void llvm::UpgradeSectionAttributes(llvm *this, llvm::Module *a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD ***v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  _QWORD *v23;
  void *v24;
  __int128 *v25;
  uint64_t v26;
  _BYTE *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  __int128 *p_dst;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  __int128 *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD ***v51;
  _QWORD *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  _QWORD *v56;
  void *v57;
  uint64_t *v58;
  __int128 __dst;
  int64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  unint64_t v63;
  char *v64;
  int v65;
  _QWORD *v66;
  _QWORD v67[2];
  void *v68;
  __int128 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[12];

  v73[10] = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 8;
  v3 = (char *)*((_QWORD *)this + 2);
  if (v3 != (char *)this + 8)
  {
    v4 = v73;
    v5 = &v70;
    while (1)
    {
      if (v3)
        v6 = v3 - 56;
      else
        v6 = 0;
      if ((v6[34] & 0x40) == 0)
        goto LABEL_17;
      v7 = ***(_QWORD ***)v6;
      v71 = v6;
      v8 = *(_DWORD *)(v7 + 2520);
      v9 = v6 >> 4;
      if (!v8)
        break;
      v10 = *(_QWORD *)(v7 + 2504);
      v11 = v8 - 1;
      v12 = v11 & (v9 ^ (v6 >> 9));
      v13 = (_QWORD *)(v10 + 24 * v12);
      v14 = (_QWORD ***)*v13;
      if ((char *)*v13 != v6)
      {
        v19 = 0;
        v20 = 1;
        while (v14 != (_QWORD ***)-4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v14 == (_QWORD ***)-8192;
          if (v21)
            v19 = v13;
          v22 = v12 + v20++;
          v12 = v22 & v11;
          v13 = (_QWORD *)(v10 + 24 * v12);
          v14 = (_QWORD ***)*v13;
          if ((char *)*v13 == v6)
            goto LABEL_9;
        }
        if (v19)
          v23 = v19;
        else
          v23 = v13;
        goto LABEL_31;
      }
LABEL_9:
      v15 = v13[2];
      if (v15 < 0x16)
        goto LABEL_17;
      v16 = (_QWORD *)v13[1];
      v17 = *v16 == 0x202C415441445F5FLL && v16[1] == 0x635F636A626F5F5FLL;
      if (!v17 || *(_QWORD *)((char *)v16 + 14) != 0x7473696C7461635FLL)
        goto LABEL_17;
      v67[0] = v13[1];
      v67[1] = v15;
      v71 = v4;
      v72 = 0x500000000;
      llvm::StringRef::split((char *)v67, (uint64_t)&v71, 44, -1, 1);
      v68 = v5;
      v69 = xmmword_1C677F680;
      sub_1C613932C((uint64_t)v61, (uint64_t)&v68);
      if ((_DWORD)v72)
      {
        v25 = (__int128 *)v71;
        v26 = 16 * v72;
        do
        {
          __dst = *v25;
          v27 = v64;
          if ((unint64_t)v64 >= v63)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v61, 44);
          }
          else
          {
            ++v64;
            *v27 = 44;
          }
          v29 = (const void *)sub_1C534E9D8((uint64_t *)&__dst, " \t\n\v\f\r", 6);
          v30 = v28;
          if (v28 <= v63 - (unint64_t)v64)
          {
            if (v28)
            {
              memcpy(v64, v29, v28);
              v64 += v30;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v61, (const char *)v29, v28);
          }
          ++v25;
          v26 -= 16;
        }
        while (v26);
      }
      v31 = v66[1];
      v32 = v31 != 0;
      if (v31)
        v33 = (const void *)(*v66 + 1);
      else
        v33 = (const void *)*v66;
      v34 = v31 - v32;
      if ((unint64_t)(v31 - v32) >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v34 >= 0x17)
      {
        v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v36 = v34 | 7;
        v58 = v5;
        v37 = v4;
        v38 = v36 + 1;
        p_dst = (__int128 *)operator new(v36 + 1);
        v39 = v38 | 0x8000000000000000;
        v4 = v37;
        v5 = v58;
        *((_QWORD *)&__dst + 1) = v34;
        v60 = v39;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v60) = v31 - v32;
        p_dst = &__dst;
        if (v31 == v32)
          goto LABEL_53;
      }
      memmove(p_dst, v33, v34);
LABEL_53:
      *((_BYTE *)p_dst + v34) = 0;
      v61[0] = off_1E81A6E70;
      if (v65 == 1 && v62)
        MEMORY[0x1CAA32F9C](v62, 0x1000C8077774924);
      if (v68 != v5)
        free(v68);
      if (v71 != v4)
        free(v71);
      v40 = HIBYTE(v60);
      if (v60 >= 0)
        v41 = &__dst;
      else
        v41 = (__int128 *)__dst;
      if (v60 >= 0)
        v42 = HIBYTE(v60) & 0x7F;
      else
        v42 = *((_QWORD *)&__dst + 1);
      if ((v6[34] & 0x40) == 0 && !v42)
        goto LABEL_71;
      if (v42)
      {
        v41 = (__int128 *)llvm::UniqueStringSaver::save(***(_QWORD ***)v6 + 2136, v41, v42);
        v44 = v43;
      }
      else
      {
        v44 = 0;
      }
      v45 = ***(_QWORD ***)v6;
      v71 = v6;
      v46 = *(_DWORD *)(v45 + 2520);
      if (!v46)
      {
        v56 = 0;
LABEL_87:
        v50 = sub_1C53D65B8(v45 + 2504, (uint64_t)&v71, (uint64_t *)&v71, v56);
        v57 = v71;
        v50[1] = 0;
        v50[2] = 0;
        *v50 = v57;
        goto LABEL_70;
      }
      v47 = *(_QWORD *)(v45 + 2504);
      v48 = v46 - 1;
      v49 = v48 & (v9 ^ (v6 >> 9));
      v50 = (_QWORD *)(v47 + 24 * v49);
      v51 = (_QWORD ***)*v50;
      if ((char *)*v50 != v6)
      {
        v52 = 0;
        v53 = 1;
        while (v51 != (_QWORD ***)-4096)
        {
          if (v52)
            v54 = 0;
          else
            v54 = v51 == (_QWORD ***)-8192;
          if (v54)
            v52 = v50;
          v55 = v49 + v53++;
          v49 = v55 & v48;
          v50 = (_QWORD *)(v47 + 24 * v49);
          v51 = (_QWORD ***)*v50;
          if ((char *)*v50 == v6)
            goto LABEL_70;
        }
        if (v52)
          v56 = v52;
        else
          v56 = v50;
        goto LABEL_87;
      }
LABEL_70:
      v50[1] = v41;
      v50[2] = v44;
      *((_DWORD *)v6 + 8) = *((_DWORD *)v6 + 8) & 0xFFBFFFFF | ((v44 != 0) << 22);
      v40 = HIBYTE(v60);
LABEL_71:
      if (v40 < 0)
        operator delete((void *)__dst);
LABEL_17:
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return;
    }
    v23 = 0;
LABEL_31:
    v13 = sub_1C53D65B8(v7 + 2504, (uint64_t)&v71, (uint64_t *)&v71, v23);
    v24 = v71;
    v13[1] = 0;
    v13[2] = 0;
    *v13 = v24;
    goto LABEL_9;
  }
}

void llvm::UpgradeFunctionAttributes(llvm *this, llvm::Function *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23[2];
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      goto LABEL_18;
  }
  else if (*((llvm **)this + 9) == (llvm *)((char *)this + 72) && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    goto LABEL_18;
  }
  v3 = *((_QWORD *)this + 14);
  if (!v3 || (*(_BYTE *)(v3 + 19) & 0x20) == 0)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 10);
    while (v4 != (_QWORD *)((char *)this + 72))
    {
      v5 = v4 - 3;
      v6 = v4 == 0;
      v4 = (_QWORD *)v4[1];
      if (v6)
        v5 = 0;
      v7 = (_QWORD *)v5[6];
      if (v7 != v5 + 5)
      {
        if (v7)
          v8 = v7 - 3;
        else
          v8 = 0;
        __asm { BR              X9 }
      }
    }
  }
LABEL_18:
  llvm::AttributeFuncs::typeIncompatible(**(_QWORD **)(*((_QWORD *)this + 3) + 16), 3, v23);
  v9 = **(uint64_t ***)this;
  v10 = *((_QWORD *)this + 14);
  if (v10 && *(_DWORD *)(v10 + 8) >= 2u)
    v11 = *(_QWORD *)(v10 + 48);
  else
    v11 = 0;
  v27 = v11;
  v12 = llvm::AttributeSet::removeAttributes(&v27, v9, (uint64_t)v23);
  if (v11 == v12)
    v13 = *((_QWORD *)this + 14);
  else
    v13 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)this + 14, v9, 0, v12);
  *((_QWORD *)this + 14) = v13;
  sub_1C5010E9C((uint64_t)&v24, v25);
  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v14 = *((_QWORD *)this + 11);
LABEL_25:
    v15 = v14;
    goto LABEL_26;
  }
  llvm::Function::BuildLazyArguments(this);
  v14 = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_25;
  llvm::Function::BuildLazyArguments(this);
  v15 = *((_QWORD *)this + 11);
LABEL_26:
  for (i = v15 + 40 * *((_QWORD *)this + 12); v14 != i; v14 += 40)
  {
    llvm::AttributeFuncs::typeIncompatible(*(_QWORD *)v14, 3, v23);
    v17 = *(_QWORD *)(v14 + 24);
    v18 = *(_QWORD *)(v17 + 112);
    v26 = v18;
    v19 = *(_DWORD *)(v14 + 32);
    if (v18 && (v19 + 2) < *(_DWORD *)(v18 + 8))
      v20 = *(_QWORD *)(v18 + 8 * (v19 + 2) + 40);
    else
      v20 = 0;
    v21 = **(uint64_t ***)v17;
    v27 = v20;
    v22 = llvm::AttributeSet::removeAttributes(&v27, v21, (uint64_t)v23);
    if (v20 != v22)
      v18 = llvm::AttributeList::setAttributesAtIndex(&v26, v21, v19 + 1, v22);
    *(_QWORD *)(*(_QWORD *)(v14 + 24) + 112) = v18;
    sub_1C5010E9C((uint64_t)&v24, v25);
  }
}

llvm *llvm::upgradeInstructionLoopAttachment(llvm *this, llvm::MDNode *a2)
{
  llvm *v2;
  int v3;
  llvm *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t Impl;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 *v36;
  size_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD v51[4];
  __int16 v52;
  void *__p[2];
  char v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[64];
  void *v58;
  uint64_t v59;
  _QWORD v60[10];

  v2 = this;
  v60[8] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)this;
  if (v3 == 4)
    v4 = this;
  else
    v4 = 0;
  if (v3 == 4)
  {
    v5 = *((unsigned int *)this + 2);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)((char *)this - 8 * v5);
      while (1)
      {
        v7 = *v6;
        if (*v6)
        {
          if (*(_BYTE *)v7 == 4)
          {
            v8 = *(unsigned int *)(v7 + 8);
            if ((_DWORD)v8)
            {
              v9 = *(_QWORD *)(v7 - 8 * v8);
              if (v9)
              {
                if (!*(_BYTE *)v9)
                {
                  v10 = *(_QWORD **)(v9 + 8);
                  if (*v10 >= 0x10uLL)
                  {
                    v12 = v10[3];
                    v11 = v10[4];
                    if (v12 == 0x6365762E6D766C6CLL && v11 == 0x2E72657A69726F74)
                      break;
                  }
                }
              }
            }
          }
        }
        if (++v6 == (uint64_t *)v4)
          return v2;
      }
      v55 = v57;
      v56 = 0x800000000;
      if (v5 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v5, 8);
        LODWORD(v5) = *((_DWORD *)v2 + 2);
      }
      if ((_DWORD)v5)
      {
        v15 = (uint64_t *)((char *)v4 - 8 * v5);
        v16 = v60;
        v17 = "llvm.loop.vectorize.";
        do
        {
          Impl = *v15;
          if (*v15)
          {
            if (*(_BYTE *)Impl == 4)
            {
              v20 = (_DWORD *)(Impl + 8);
              v19 = *(unsigned int *)(Impl + 8);
              if ((_DWORD)v19)
              {
                v21 = *(_QWORD *)(Impl - 8 * v19);
                if (v21)
                {
                  if (!*(_BYTE *)v21)
                  {
                    v22 = *(_QWORD **)(v21 + 8);
                    if (*v22 >= 0x10uLL)
                    {
                      v24 = v22[3];
                      v23 = v22[4];
                      if (v24 == 0x6365762E6D766C6CLL && v23 == 0x2E72657A69726F74)
                      {
                        v58 = v16;
                        v59 = 0x800000000;
                        if (v19 >= 9)
                        {
                          v26 = v17;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v16, v19, 8);
                          v17 = v26;
                        }
                        v27 = *(_QWORD *)(Impl + 16);
                        v28 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFF8);
                        if ((v27 & 4) != 0)
                          v28 = (uint64_t *)*v28;
                        v29 = *(unint64_t **)(v21 + 8);
                        v32 = *v29;
                        v31 = v29 + 3;
                        v30 = v32;
                        if (v32 == 22
                          && (*v31 == 0x6365762E6D766C6CLL ? (v33 = v31[1] == 0x2E72657A69726F74) : (v33 = 0),
                              v33 ? (v34 = *(_QWORD *)((char *)v31 + 14) == 0x6C6C6F726E752E72) : (v34 = 0),
                              v34))
                        {
                          v38 = llvm::MDString::get(v28, "llvm.loop.interleave.count", 0x1AuLL);
                        }
                        else
                        {
                          if (v30 >= 0x10)
                            v35 = 16;
                          else
                            v35 = v30;
                          v51[0] = v17;
                          v51[2] = (char *)v31 + v35;
                          v51[3] = v30 - v35;
                          v52 = 1283;
                          llvm::Twine::str((llvm::Twine *)v51, __p);
                          if (v54 >= 0)
                            v36 = (unsigned __int8 *)__p;
                          else
                            v36 = (unsigned __int8 *)__p[0];
                          if (v54 >= 0)
                            v37 = v54 & 0x7F;
                          else
                            v37 = (size_t)__p[1];
                          v38 = llvm::MDString::get(v28, v36, v37);
                          if (v54 < 0)
                            operator delete(__p[0]);
                        }
                        v39 = v59;
                        if (v59 >= (unint64_t)HIDWORD(v59))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v16, v59 + 1, 8);
                          v39 = v59;
                        }
                        v50 = v16;
                        *((_QWORD *)v58 + v39) = v38;
                        v40 = v59 + 1;
                        LODWORD(v59) = v59 + 1;
                        v41 = *v20 - 1;
                        if (*v20 != 1)
                        {
                          v45 = Impl + 8;
                          do
                          {
                            v46 = *(_QWORD *)(v45 - 8 * *v20);
                            if (v40 >= HIDWORD(v59))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v50, v40 + 1, 8);
                              v40 = v59;
                            }
                            *((_QWORD *)v58 + v40) = v46;
                            v40 = v59 + 1;
                            LODWORD(v59) = v59 + 1;
                            v45 += 8;
                            --v41;
                          }
                          while (v41);
                        }
                        v42 = *(_QWORD *)(Impl + 16);
                        v43 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFF8);
                        if ((v42 & 4) != 0)
                          v43 = (uint64_t *)*v43;
                        Impl = llvm::MDTuple::getImpl(v43, v58, v40, 0, 1);
                        v16 = v50;
                        if (v58 != v50)
                          free(v58);
                        v17 = "llvm.loop.vectorize.";
                      }
                    }
                  }
                }
              }
            }
          }
          v44 = v56;
          if (v56 >= (unint64_t)HIDWORD(v56))
          {
            v47 = v17;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v56 + 1, 8);
            v17 = v47;
            v44 = v56;
          }
          *((_QWORD *)v55 + v44) = Impl;
          LODWORD(v56) = v56 + 1;
          ++v15;
        }
        while (v15 != (uint64_t *)v4);
      }
      v48 = *((_QWORD *)v4 + 2);
      v49 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFF8);
      if ((v48 & 4) != 0)
        v49 = (uint64_t *)*v49;
      v2 = (llvm *)llvm::MDTuple::getImpl(v49, v55, v56, 0, 1);
      if (v55 != v57)
        free(v55);
    }
  }
  return v2;
}

void llvm::UpgradeDataLayoutString(char *a1@<X0>, size_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  __int128 v24;
  void **p_p;
  __int16 v26;
  _QWORD v27[2];
  const char *v28;
  uint64_t v29;
  __int16 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[16];
  void *__p;
  __int128 v35;
  void *v36;
  char v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  _QWORD v45[2];
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v41 = a1;
  v42 = a2;
  v46 = 261;
  v43 = a3;
  v44 = a4;
  llvm::Triple::Triple((uint64_t)&v36, (llvm::Twine *)&v43);
  v8 = v38;
  v9 = v38 == 30 || v38 == 25;
  if (v9 && llvm::StringRef::find((uint64_t *)&v41, "-G", 2uLL, 0) == -1)
  {
    if (!a2)
    {
      *(_BYTE *)(a5 + 23) = 2;
      strcpy((char *)a5, "G1");
      goto LABEL_44;
    }
    if (*a1 != 71)
    {
      v46 = 773;
      v43 = a1;
      v44 = a2;
      v45[0] = "-G1";
      llvm::Twine::str((llvm::Twine *)&v43, (_QWORD *)a5);
      goto LABEL_44;
    }
  }
  else if (!a1)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    goto LABEL_18;
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 >= 0x17)
  {
    v11 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v11 = a2 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = v12 | 0x8000000000000000;
    *(_QWORD *)a5 = v10;
  }
  else
  {
    *(_BYTE *)(a5 + 23) = a2;
    v10 = (void *)a5;
    if (!a2)
      goto LABEL_17;
  }
  memmove(v10, a1, a2);
LABEL_17:
  *((_BYTE *)v10 + a2) = 0;
  v8 = v38;
LABEL_18:
  if ((v8 - 41) <= 1)
  {
    __p = operator new(0x28uLL);
    v35 = xmmword_1C85F4B50;
    strcpy((char *)__p, "-p270:32:32-p271:32:32-p272:64:64");
    if (llvm::StringRef::find((uint64_t *)&v41, (char *)__p, 0x21uLL, 0) == -1)
    {
      v43 = (char *)v45;
      v44 = 0x400000000;
      llvm::Regex::Regex((uint64_t)v33, "(e-m:[a-z](-p:32:32)?)(-[if]64:.*$)", 35, 0);
      if (llvm::Regex::match((uint64_t)v33, v41, v42, (uint64_t)&v43, 0))
      {
        v21 = *((_QWORD *)v43 + 3);
        *(_QWORD *)&v24 = *((_QWORD *)v43 + 2);
        *((_QWORD *)&v24 + 1) = v21;
        p_p = &__p;
        v26 = 1029;
        v22 = (const char *)*((_QWORD *)v43 + 6);
        v23 = *((_QWORD *)v43 + 7);
        v27[0] = &v24;
        v28 = v22;
        v29 = v23;
        v30 = 1282;
        llvm::Twine::str((llvm::Twine *)v27, &v31);
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(_OWORD *)a5 = v31;
        *(_QWORD *)(a5 + 16) = v32;
      }
      llvm::Regex::~Regex((llvm::Regex *)v33);
      if (v43 != (char *)v45)
        free(v43);
    }
    if (v39 == 15 && (v40 & 0xFFFFFFEF) == 0 && sub_1C5E4EA90(v38) != 64)
    {
      v13 = *(_BYTE *)(a5 + 23);
      v14 = v13 < 0;
      v15 = v13 >= 0 ? a5 : *(_QWORD *)a5;
      v16 = v13 & 0x7F;
      v17 = v14 ? *(_QWORD *)(a5 + 8) : v16;
      *(_QWORD *)&v31 = v15;
      *((_QWORD *)&v31 + 1) = v17;
      v18 = llvm::StringRef::find((uint64_t *)&v31, "-f80:32-", 8uLL, 0);
      if (v18 != -1)
      {
        if (v17 >= v18)
          v19 = v18;
        else
          v19 = v17;
        v30 = 773;
        v27[0] = v15;
        v27[1] = v19;
        v28 = "-f80:128-";
        v20 = v18 + 8;
        if (v17 < v18 + 8)
          v20 = v17;
        v43 = (char *)v27;
        v45[0] = v15 + v20;
        v45[1] = v17 - v20;
        v46 = 1282;
        llvm::Twine::str((llvm::Twine *)&v43, &v24);
        if (*(char *)(a5 + 23) < 0)
          operator delete(*(void **)a5);
        *(_OWORD *)a5 = v24;
        *(_QWORD *)(a5 + 16) = p_p;
      }
    }
    if (SHIBYTE(v35) < 0)
      operator delete(__p);
  }
LABEL_44:
  if (v37 < 0)
    operator delete(v36);
}

uint64_t llvm::UpgradeAttributes(llvm *this, llvm::AttrBuilder *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *ValueAsString;
  char *v20;
  uint64_t v21;
  size_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  char v28;
  char v29;

  v3 = *((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 1);
    do
    {
      v6 = &v5[v4 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v9 = sub_1C5331648((int)&v28, v8, "no-frame-pointer-elim", 0x15uLL);
      if (v9)
        v4 += ~(v4 >> 1);
      else
        v4 >>= 1;
      if (v9)
        v5 = v7;
    }
    while (v4);
    v3 = *((_QWORD *)this + 1);
    v10 = *((unsigned int *)this + 4);
  }
  else
  {
    v10 = 0;
    v5 = (uint64_t *)*((_QWORD *)this + 1);
  }
  if (v5 == (uint64_t *)(v3 + 8 * v10) || !llvm::Attribute::hasAttribute(v5, "no-frame-pointer-elim", 21))
  {
    v27 = 0;
    goto LABEL_12;
  }
  v27 = *v5;
  if (!v27)
  {
LABEL_12:
    result = llvm::AttrBuilder::contains((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
    if ((result & 1) == 0)
      goto LABEL_13;
LABEL_47:
    v20 = "non-leaf";
    v22 = 8;
    goto LABEL_48;
  }
  ValueAsString = (_DWORD *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v27);
  v20 = "none";
  if (v21 == 4 && *ValueAsString == 1702195828)
    v20 = "all";
  v22 = strlen(v20);
  llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim", 0x15uLL);
  result = llvm::AttrBuilder::contains((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
  if ((result & 1) == 0)
  {
    if (!v22)
      goto LABEL_13;
    goto LABEL_31;
  }
  if (v22 != 3)
    goto LABEL_47;
  if (*(_WORD *)v20 != 27745 || v20[2] != 108)
    goto LABEL_47;
  v22 = 3;
LABEL_48:
  llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 0x1EuLL);
LABEL_31:
  result = (uint64_t)llvm::AttrBuilder::addAttribute((uint64_t **)this, "frame-pointer", 0xDuLL, (unsigned __int8 *)v20, v22);
LABEL_13:
  v12 = *((_QWORD *)this + 1);
  v13 = *((unsigned int *)this + 4);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 1);
    do
    {
      v15 = &v14[v13 >> 1];
      v17 = *v15;
      v16 = v15 + 1;
      result = sub_1C5331648((int)&v29, v17, "null-pointer-is-valid", 0x15uLL);
      if ((_DWORD)result)
        v13 += ~(v13 >> 1);
      else
        v13 >>= 1;
      if ((_DWORD)result)
        v14 = v16;
    }
    while (v13);
    v12 = *((_QWORD *)this + 1);
    v18 = *((unsigned int *)this + 4);
  }
  else
  {
    v18 = 0;
    v14 = (uint64_t *)*((_QWORD *)this + 1);
  }
  if (v14 != (uint64_t *)(v12 + 8 * v18))
  {
    result = llvm::Attribute::hasAttribute(v14, "null-pointer-is-valid", 21);
    if ((_DWORD)result)
    {
      v27 = *v14;
      if (v27)
      {
        v23 = (int *)llvm::Attribute::getValueAsString((llvm::Attribute *)&v27);
        if (v24 == 4)
        {
          v25 = *v23;
          result = llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
          if (v25 == 1702195828)
            return (uint64_t)llvm::AttrBuilder::addAttribute((unsigned int *)this, 40);
        }
        else
        {
          return llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 0x15uLL);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::UpgradeOperandBundles(uint64_t *a1)
{
  uint64_t v2;
  __int128 *v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;

  v2 = *a1;
  v3 = (__int128 *)a1[1];
  if ((__int128 *)*a1 == v3)
  {
    v3 = (__int128 *)*a1;
  }
  else
  {
    while (1)
    {
      v4 = *(_BYTE *)(v2 + 23);
      v5 = v4;
      v6 = v4 & 0x7F;
      if (v5 < 0)
        v6 = *(_QWORD *)(v2 + 8);
      if (v6 == 22)
      {
        v7 = v5 >= 0 ? (uint64_t *)v2 : *(uint64_t **)v2;
        v8 = *v7;
        v9 = v7[1];
        v10 = *(uint64_t *)((char *)v7 + 14);
        v11 = v8 == 0x72612E676E616C63 && v9 == 0x6863617474612E63;
        v12 = v11 && v10 == 0x6C6C616364656863;
        if (v12 && *(_QWORD *)(v2 + 32) == *(_QWORD *)(v2 + 24))
          break;
      }
      v2 += 48;
      if ((__int128 *)v2 == v3)
      {
        v2 = a1[1];
        return sub_1C534EAD4((uint64_t)a1, v2, v3);
      }
    }
    v14 = v2 + 48;
    if ((__int128 *)(v2 + 48) != v3)
    {
      do
      {
        v15 = *(_BYTE *)(v14 + 23);
        v16 = v15;
        v17 = v15 & 0x7F;
        if (v16 < 0)
          v17 = *(_QWORD *)(v14 + 8);
        if (v17 != 22
          || (v16 >= 0 ? (v18 = (uint64_t *)v14) : (v18 = *(uint64_t **)v14),
              (v19 = *v18, v20 = v18[1], v21 = *(uint64_t *)((char *)v18 + 14), v19 == 0x72612E676E616C63)
            ? (v22 = v20 == 0x6863617474612E63)
            : (v22 = 0),
              v22 ? (v23 = v21 == 0x6C6C616364656863) : (v23 = 0),
              !v23 || *(_QWORD *)(v14 + 32) != *(_QWORD *)(v14 + 24)))
        {
          if (*(char *)(v2 + 23) < 0)
            operator delete(*(void **)v2);
          v24 = *(_OWORD *)v14;
          *(_QWORD *)(v2 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v2 = v24;
          *(_BYTE *)(v14 + 23) = 0;
          *(_BYTE *)v14 = 0;
          sub_1C6184574(v2 + 24, (__n128 *)(v14 + 24));
          v2 += 48;
        }
        v14 += 48;
      }
      while ((__int128 *)v14 != v3);
      v3 = (__int128 *)a1[1];
    }
  }
  return sub_1C534EAD4((uint64_t)a1, v2, v3);
}

uint64_t sub_1C534A194(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, char a8)
{
  uint64_t v13;
  uint64_t v14;

  v13 = sub_1C6227ED4(a1, a2, a3, a8);
  v14 = sub_1C6227ED4(v13, a4, a5, a8);
  return sub_1C6227ED4(v14, a6, a7, a8);
}

uint64_t sub_1C534A1F4(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, char a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = sub_1C6227ED4(a1, a2, a3, a11);
  v16 = sub_1C6227ED4(v15, a4, a5, a11);
  v17 = sub_1C6227ED4(v16, a6, a7, a11);
  return sub_1C6227ED4(v17, a9, a10, a11);
}

uint64_t sub_1C534A270(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(_BYTE *)(a1 + 17) && *(_QWORD *)(a1 + 8) >= a3 && (!a3 || !memcmp(*(const void **)a1, a2, a3)))
    *(_WORD *)(a1 + 16) = 257;
  return a1;
}

BOOL sub_1C534A2BC(uint64_t a1, unint64_t a2)
{
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  int v23;
  char v24;
  char v25;
  char v26;
  BOOL v27;
  char v28;
  BOOL v29;
  char v30;
  char v31;
  char v32;
  BOOL v33;
  BOOL v34;
  char v35;
  BOOL v42;
  char v45;
  char v46;
  BOOL v47;
  BOOL v48;
  int v49;
  char v50;
  char v51;
  char v52;
  int v53;
  int v54;
  BOOL v55;
  char v56;
  int v57;
  int v58;
  char v59;
  BOOL v60;
  int v61;
  char v62;
  char v63;
  BOOL v64;
  char v65;
  BOOL v66;
  BOOL v70;
  BOOL v71;
  BOOL v73;
  BOOL v74;
  BOOL v76;
  BOOL v77;
  BOOL v79;
  BOOL v80;
  BOOL v82;
  BOOL v83;
  BOOL v87;
  BOOL v94;
  BOOL v97;
  BOOL v99;
  BOOL v101;
  BOOL v103;
  int v115;
  BOOL v119;
  BOOL v121;
  char v122;
  BOOL v125;
  _BOOL4 v129;
  BOOL v132;
  BOOL v135;
  BOOL v137;
  BOOL v139;
  BOOL v141;
  BOOL v147;
  BOOL v149;
  BOOL v151;
  BOOL v153;
  BOOL v155;
  BOOL v157;
  BOOL v159;
  BOOL v162;
  BOOL v168;
  BOOL v170;
  BOOL v172;
  BOOL v174;
  BOOL v176;
  BOOL v178;
  BOOL v180;
  BOOL v182;
  BOOL v184;
  BOOL v186;
  BOOL v188;
  BOOL v190;
  BOOL v192;
  BOOL v194;
  BOOL v196;
  BOOL v198;
  BOOL v200;
  BOOL v202;
  BOOL v204;
  BOOL v206;
  BOOL v208;
  BOOL v210;
  BOOL v214;
  char v219;
  BOOL v222;
  BOOL v224;
  BOOL v226;
  BOOL v228;
  BOOL v240;
  BOOL v243;
  BOOL v245;
  BOOL v247;
  BOOL v249;
  BOOL v253;
  BOOL v255;
  BOOL v256;
  BOOL v261;
  BOOL v263;
  BOOL v265;
  BOOL v268;
  BOOL v269;
  BOOL v271;
  BOOL v273;
  BOOL v275;
  BOOL v279;
  BOOL v281;
  BOOL v283;
  BOOL v285;
  BOOL v287;
  BOOL v289;
  BOOL v291;
  BOOL v293;
  BOOL v295;
  BOOL v297;
  BOOL v299;
  BOOL v301;
  BOOL v303;
  BOOL v305;
  BOOL v307;
  BOOL v309;
  BOOL v311;
  BOOL v313;
  BOOL v315;
  BOOL v317;
  BOOL v319;
  BOOL v345;
  BOOL v347;
  BOOL v349;
  BOOL v351;
  BOOL v353;
  BOOL v355;
  int v356;
  BOOL v362;
  BOOL v374;
  BOOL v376;
  BOOL v378;
  BOOL v380;
  BOOL v382;
  BOOL v384;
  BOOL v386;
  BOOL v388;
  BOOL v390;
  BOOL v392;
  BOOL v394;
  BOOL v397;
  BOOL v400;
  BOOL v404;
  BOOL v406;
  BOOL v408;
  BOOL v410;
  BOOL v412;
  BOOL v414;
  BOOL v416;
  BOOL v418;
  BOOL v420;
  BOOL v422;
  BOOL v424;
  BOOL v426;
  BOOL v428;
  BOOL v430;
  BOOL v432;
  BOOL v437;
  BOOL v439;
  BOOL v441;
  BOOL v443;
  BOOL v445;
  BOOL v447;
  BOOL v452;
  BOOL v454;
  BOOL v456;
  BOOL v461;
  BOOL v463;
  int v465;
  BOOL v466;
  int v467;
  BOOL v479;
  BOOL v481;
  BOOL v483;
  BOOL v485;
  BOOL v487;
  BOOL v489;
  BOOL v490;
  BOOL v494;
  BOOL v496;
  BOOL v498;
  BOOL v501;
  BOOL v503;
  BOOL v505;
  BOOL v507;
  BOOL v509;
  BOOL v511;
  BOOL v513;
  BOOL v515;
  BOOL v517;
  BOOL v519;
  BOOL v521;
  BOOL v523;
  BOOL v525;
  BOOL v527;
  BOOL v529;
  BOOL v541;
  BOOL v543;
  BOOL v547;
  BOOL v554;
  BOOL v556;
  BOOL v558;
  BOOL v560;
  BOOL v563;
  BOOL v564;
  BOOL v566;
  BOOL v567;
  BOOL v569;
  BOOL v570;
  BOOL v572;
  BOOL v573;
  BOOL v575;
  BOOL v576;
  BOOL v578;
  BOOL v579;
  BOOL v581;
  BOOL v582;
  BOOL v584;
  BOOL v585;
  BOOL v587;
  char v588;
  char v590;
  int v591;
  BOOL v592;
  char v593;
  char v594;

  if (a2 == 13)
  {
    if (*(_QWORD *)a1 == 0x7972726163646461 && *(_QWORD *)(a1 + 5) == 0x3233752E78797272)
      return 1;
    if (*(_QWORD *)a1 == 0x7972726163646461 && *(_QWORD *)(a1 + 5) == 0x3436752E78797272)
      return 1;
    if (*(_QWORD *)a1 == 0x6F72726F62627573 && *(_QWORD *)(a1 + 5) == 0x3233752E776F7272)
      return 1;
    if (*(_QWORD *)a1 == 0x6F72726F62627573 && *(_QWORD *)(a1 + 5) == 0x3436752E776F7272)
      return 1;
    goto LABEL_62;
  }
  if (a2 == 12)
  {
    if (*(_QWORD *)a1 == 0x7972726163646461 && *(_DWORD *)(a1 + 8) == 842233134)
      return 1;
    v7 = *(_QWORD *)a1 == 0x7972726163646461 && *(_DWORD *)(a1 + 8) == 875984174;
    v8 = 1;
    v9 = 1;
    if (v7)
      return v9;
    goto LABEL_63;
  }
  if (a2 >= 0xB)
  {
LABEL_62:
    v8 = 0;
LABEL_63:
    if (*(_QWORD *)a1 == 0x6461702E32657373 && *(_QWORD *)(a1 + 3) == 0x2E73646461702E32)
      return 1;
    if (*(_QWORD *)a1 == 0x7573702E32657373 && *(_QWORD *)(a1 + 3) == 0x2E73627573702E32)
      return 1;
    v27 = a2 < 0xC;
    if (a2 >= 0xC)
    {
      if (*(_QWORD *)a1 == 0x6461702E32657373 && *(_DWORD *)(a1 + 8) == 779318628)
        return 1;
      if (*(_QWORD *)a1 == 0x7573702E32657373 && *(_DWORD *)(a1 + 8) == 779318626)
        return 1;
    }
    if (*(_QWORD *)a1 == 0x6461702E32787661 && *(_QWORD *)(a1 + 3) == 0x2E73646461702E32)
      return 1;
    if (*(_QWORD *)a1 == 0x7573702E32787661 && *(_QWORD *)(a1 + 3) == 0x2E73627573702E32)
      return 1;
    if (a2 < 0xC)
      goto LABEL_89;
    if (*(_QWORD *)a1 == 0x6461702E32787661 && *(_DWORD *)(a1 + 8) == 779318628)
      return 1;
    if (*(_QWORD *)a1 == 0x7573702E32787661 && *(_DWORD *)(a1 + 8) == 779318626)
      return 1;
    if (a2 < 0xD)
    {
LABEL_89:
      v20 = 0;
      v28 = 1;
      v42 = 1;
      v24 = 1;
      goto LABEL_90;
    }
    if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 5) == 0x2E73646461702E32)
      return 1;
    if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 5) == 0x2E73627573702E32)
      return 1;
    v42 = a2 < 0x12;
    if (a2 >= 0x12)
    {
      if (*(_QWORD *)a1 == 0x6D2E323135787661
        && *(_QWORD *)(a1 + 8) == 0x646461702E6B7361
        && *(_WORD *)(a1 + 16) == 11891)
      {
        return 1;
      }
      v240 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x627573702E6B7361;
      if (v240 && *(_WORD *)(a1 + 16) == 11891)
        return 1;
      if (a2 >= 0x13)
      {
        if (*(_QWORD *)a1 == 0x6D2E323135787661
          && *(_QWORD *)(a1 + 8) == 0x646461702E6B7361
          && *(_QWORD *)(a1 + 11) == 0x2E7375646461702ELL)
        {
          return 1;
        }
        v279 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x627573702E6B7361;
        if (v279 && *(_QWORD *)(a1 + 11) == 0x2E7375627573702ELL)
          return 1;
        v24 = 0;
        v20 = 0;
        goto LABEL_799;
      }
    }
    else if (a2 == 16)
    {
      if (*(_QWORD *)a1 == 0x61702E3365737373 && *(_QWORD *)(a1 + 8) == 0x3832312E622E7362)
        return 1;
      if (*(_QWORD *)a1 == 0x61702E3365737373 && *(_QWORD *)(a1 + 8) == 0x3832312E772E7362)
        return 1;
      v94 = *(_QWORD *)a1 == 0x61702E3365737373 && *(_QWORD *)(a1 + 8) == 0x3832312E642E7362;
      v24 = 1;
      v20 = 1;
      v9 = 1;
      if (v94)
        return v9;
      goto LABEL_799;
    }
    v20 = 0;
    v24 = 1;
LABEL_799:
    if (*(_QWORD *)a1 == 0x6D66762E34616D66 && *(_QWORD *)(a1 + 5) == 0x732E6464616D6676)
      return 1;
    v28 = 0;
LABEL_90:
    if (*(_QWORD *)a1 == 0x616D66762E616D66 && *(_QWORD *)(a1 + 3) == 0x2E6464616D66762ELL)
      return 1;
    if (*(_QWORD *)a1 == 0x736D66762E616D66 && *(_QWORD *)(a1 + 3) == 0x2E6275736D66762ELL)
      return 1;
    v29 = a2 < 0xE;
    if (a2 >= 0xE)
    {
      if (*(_QWORD *)a1 == 0x736D66762E616D66 && *(_QWORD *)(a1 + 6) == 0x2E6464616275736DLL)
        return 1;
    }
    else if (a2 < 0xC)
    {
LABEL_304:
      if ((v24 & 1) == 0)
      {
        v119 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616D66762E6B7361;
        if (v119 && *(_QWORD *)(a1 + 11) == 0x2E6464616D66762ELL)
          return 1;
      }
      if (a2 <= 0x13)
        goto LABEL_313;
      if (*(_QWORD *)a1 == 0x6D2E323135787661
        && *(_QWORD *)(a1 + 8) == 0x6D6E66762E6B7361
        && *(_DWORD *)(a1 + 16) == 778331233)
      {
        return 1;
      }
      v135 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D6E66762E6B7361;
      if (v135 && *(_DWORD *)(a1 + 16) == 778204531)
        return 1;
      v137 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D66762E336B7361;
      if (v137 && *(_DWORD *)(a1 + 16) == 778331233)
        return 1;
      v139 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D66762E7A6B7361;
      if (v139 && *(_DWORD *)(a1 + 16) == 778331233)
        return 1;
      v141 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D66762E336B7361;
      if (v141 && *(_DWORD *)(a1 + 16) == 778204531)
        return 1;
      if (a2 < 0x15)
      {
LABEL_313:
        v121 = 1;
        v31 = 1;
        v30 = 1;
        v122 = 1;
        if (v42)
          goto LABEL_329;
      }
      else
      {
        if (*(_QWORD *)a1 == 0x6D2E323135787661
          && *(_QWORD *)(a1 + 8) == 0x6E66762E336B7361
          && *(_QWORD *)(a1 + 13) == 0x2E6275736D6E6676)
        {
          return 1;
        }
        v121 = a2 < 0x16;
        if (a2 < 0x16)
          goto LABEL_409;
        if (*(_QWORD *)a1 == 0x6D2E323135787661
          && *(_QWORD *)(a1 + 8) == 0x616D66762E6B7361
          && *(_QWORD *)(a1 + 14) == 0x2E6275736464616DLL)
        {
          return 1;
        }
        if (a2 >= 0x17)
        {
          if (*(_QWORD *)a1 == 0x6D2E323135787661
            && *(_QWORD *)(a1 + 8) == 0x6D66762E7A6B7361
            && *(_QWORD *)(a1 + 15) == 0x2E6275736464616DLL)
          {
            return 1;
          }
          v345 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D66762E336B7361;
          if (v345 && *(_QWORD *)(a1 + 15) == 0x2E6275736464616DLL)
            return 1;
          v347 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D66762E336B7361;
          if (v347 && *(_QWORD *)(a1 + 15) == 0x2E6464616275736DLL)
            return 1;
          v30 = 0;
        }
        else
        {
LABEL_409:
          v30 = 1;
        }
        v31 = 0;
        if (v42)
        {
          v122 = 1;
          if ((v28 & 1) != 0)
            goto LABEL_335;
          goto LABEL_330;
        }
      }
      if (*(_QWORD *)a1 == 0x6D2E323135787661
        && *(_QWORD *)(a1 + 8) == 0x667568732E6B7361
        && *(_WORD *)(a1 + 16) == 26926)
      {
        return 1;
      }
      v125 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x667568732E6B7361;
      if (v125 && *(_WORD *)(a1 + 16) == 26158)
        return 1;
      v122 = 0;
LABEL_329:
      if ((v28 & 1) != 0)
        goto LABEL_335;
LABEL_330:
      if (*(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 5) == 0x6B63706E756B2E32)
        return 1;
      v27 = 0;
LABEL_335:
      if (*(_QWORD *)a1 == 0x6261702E32787661 && *(_WORD *)(a1 + 8) == 11891)
        return 1;
      v33 = a2 < 0x11;
      if (a2 >= 0x11)
      {
        if (*(_QWORD *)a1 == 0x6D2E323135787661
          && *(_QWORD *)(a1 + 8) == 0x736261702E6B7361
          && *(_BYTE *)(a1 + 16) == 46)
        {
          return 1;
        }
        v253 = *(_QWORD *)a1 == 0x622E323135787661 && *(_QWORD *)(a1 + 8) == 0x7473616364616F72;
        if (v253 && *(_BYTE *)(a1 + 16) == 109)
          return 1;
        v129 = 0;
        v21 = 0;
        if ((v8 & 1) == 0)
          goto LABEL_853;
      }
      else
      {
        v129 = a2 == 11;
        if (a2 == 11 && *(_QWORD *)a1 == 0x747271732E657373 && *(_QWORD *)(a1 + 3) == 0x73732E747271732ELL)
          return 1;
        if (!v8)
        {
          v21 = 0;
LABEL_853:
          if ((v122 & 1) == 0)
          {
            v256 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x747271732E6B7361;
            if (v256 && *(_WORD *)(a1 + 16) == 28718)
              return 1;
          }
          if (*(_QWORD *)a1 == 0x747271732E787661 && *(_WORD *)(a1 + 8) == 28718)
            return 1;
          if (*(_QWORD *)a1 == 0x7271732E32657373 && *(_QWORD *)(a1 + 3) == 0x702E747271732E32)
            return 1;
          if (*(_QWORD *)a1 == 0x747271732E657373 && *(_WORD *)(a1 + 8) == 28718)
            return 1;
          if (!v121)
          {
            v261 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6F7262702E6B7361;
            if (v261 && *(_QWORD *)(a1 + 14) == 0x7473616364616F72)
              return 1;
          }
          if (!v27)
          {
            if (*(_QWORD *)a1 == 0x6D63702E32657373 && *(_DWORD *)(a1 + 8) == 779183472)
              return 1;
            if (*(_QWORD *)a1 == 0x6D63702E32657373 && *(_DWORD *)(a1 + 8) == 779380592)
              return 1;
            if (*(_QWORD *)a1 == 0x6D63702E32787661 && *(_DWORD *)(a1 + 8) == 779183472)
              return 1;
            if (*(_QWORD *)a1 == 0x6D63702E32787661 && *(_DWORD *)(a1 + 8) == 779380592)
              return 1;
          }
          if ((v24 & 1) == 0)
          {
            v263 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D63702E6B7361;
            if (v263 && *(_QWORD *)(a1 + 11) == 0x2E7165706D63702ELL)
              return 1;
            v265 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D63702E6B7361;
            if (v265 && *(_QWORD *)(a1 + 11) == 0x2E7467706D63702ELL)
              return 1;
          }
          v34 = a2 < 0xF;
          if (a2 < 0xF)
            goto LABEL_1118;
          if (*(_QWORD *)a1 == 0x726570762E787661 && *(_QWORD *)(a1 + 7) == 0x2E38323166326D72)
            return 1;
          if (a2 == 15)
          {
            v268 = *(_QWORD *)a1 == 0x6570762E32787661 && *(_QWORD *)(a1 + 7) == 0x38323169326D7265;
            v19 = 1;
            v9 = 1;
            if (v268)
              return v9;
          }
          else
          {
LABEL_1118:
            v19 = 0;
          }
          if (v129)
          {
            if (*(_QWORD *)a1 == 0x6464612E32657373 && *(_QWORD *)(a1 + 3) == 0x64732E6464612E32)
              return 1;
            if (*(_QWORD *)a1 == 0x6275732E32657373 && *(_QWORD *)(a1 + 3) == 0x64732E6275732E32)
              return 1;
            if (*(_QWORD *)a1 == 0x6C756D2E32657373 && *(_QWORD *)(a1 + 3) == 0x64732E6C756D2E32)
              return 1;
            if (*(_QWORD *)a1 == 0x7669642E32657373 && *(_QWORD *)(a1 + 3) == 0x64732E7669642E32)
              return 1;
          }
          if (v21)
          {
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1651734625)
              return 1;
            if (*(_QWORD *)a1 == 0x616D702E32657373 && *(_DWORD *)(a1 + 8) == 1999532920)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685289057)
              return 1;
            if (*(_QWORD *)a1 == 0x616D702E32657373 && *(_DWORD *)(a1 + 8) == 1647211896)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2004187233)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685420129)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1651732073)
              return 1;
            if (*(_QWORD *)a1 == 0x696D702E32657373 && *(_DWORD *)(a1 + 8) == 1999532910)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685286505)
              return 1;
            if (*(_QWORD *)a1 == 0x696D702E32657373 && *(_DWORD *)(a1 + 8) == 1647211886)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2004184681)
              return 1;
            if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1685417577)
              return 1;
          }
          if (a2 == 13)
          {
            if (*(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 5) == 0x772E646E616B2E32)
              return 1;
            if (*(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 5) == 0x772E746F6E6B2E32)
              return 1;
          }
          else if (a2 == 14)
          {
            v355 = *(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 6) == 0x772E6E646E616B2ELL;
            v356 = 1;
            v9 = 1;
            if (v355)
              return v9;
LABEL_1249:
            if (v21)
            {
              if (*(_QWORD *)a1 == 0x6B2E323135787661 && *(_DWORD *)(a1 + 8) == 1999532655)
                return 1;
            }
            if (a2 == 13 && *(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 5) == 0x772E726F786B2E32)
              return 1;
            if (v356)
            {
              if (*(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 6) == 0x772E726F6E786B2ELL)
                return 1;
            }
            if (a2 == 17)
            {
              if (*(_QWORD *)a1 == 0x6B2E323135787661
                && *(_QWORD *)(a1 + 8) == 0x2E6374736574726FLL
                && *(_BYTE *)(a1 + 16) == 119)
              {
                return 1;
              }
              v362 = *(_QWORD *)a1 == 0x6B2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E7A74736574726FLL;
              if (v362 && *(_BYTE *)(a1 + 16) == 119)
                return 1;
              v17 = 0;
              v26 = 0;
              v29 = 0;
              v33 = 0;
              v22 = 0;
              v34 = 0;
              v35 = 1;
              v25 = v122;
              v32 = v121;
              v23 = v356;
              v18 = 1;
            }
            else
            {
              if (a2 >= 0x14)
              {
                if (*(_QWORD *)a1 == 0x6D2E323135787661
                  && *(_QWORD *)(a1 + 8) == 0x756873702E6B7361
                  && *(_DWORD *)(a1 + 16) == 778186342)
                {
                  return 1;
                }
                v18 = 0;
                v17 = 0;
                v26 = 0;
                v29 = 0;
                v33 = 0;
                v22 = 0;
                v34 = 0;
                v35 = 0;
              }
              else
              {
                v18 = 0;
                v17 = 0;
                v26 = 0;
                v22 = 0;
                v35 = 1;
              }
              v25 = v122;
              v32 = v121;
              v23 = v356;
            }
            goto LABEL_1291;
          }
          v356 = 0;
          goto LABEL_1249;
        }
      }
      v255 = *(_QWORD *)a1 == 0x7271732E32657373 && *(_DWORD *)(a1 + 8) == 1685270132;
      v21 = 1;
      v9 = 1;
      if (v255)
        return v9;
      goto LABEL_853;
    }
    if (*(_QWORD *)a1 == 0x6D6E66762E616D66 && *(_DWORD *)(a1 + 8) == 778331233)
      return 1;
    if (*(_QWORD *)a1 == 0x6D6E66762E616D66 && *(_DWORD *)(a1 + 8) == 778204531)
      return 1;
    goto LABEL_304;
  }
  if (a2 == 10)
  {
    if (*(_QWORD *)a1 == 0x6261702E32787661 && *(_WORD *)(a1 + 8) == 11891)
      return 1;
    if (*(_QWORD *)a1 == 0x747271732E787661 && *(_WORD *)(a1 + 8) == 28718)
      return 1;
    if (*(_QWORD *)a1 == 0x747271732E657373 && *(_WORD *)(a1 + 8) == 28718)
      return 1;
    if (*(_QWORD *)a1 == 0x2E6464612E657373 && *(_WORD *)(a1 + 8) == 29555)
      return 1;
    if (*(_QWORD *)a1 == 0x2E6275732E657373 && *(_WORD *)(a1 + 8) == 29555)
      return 1;
    if (*(_QWORD *)a1 == 0x2E6C756D2E657373 && *(_WORD *)(a1 + 8) == 29555)
      return 1;
    v16 = *(_QWORD *)a1 == 0x2E7669642E657373 && *(_WORD *)(a1 + 8) == 29555;
    v17 = 1;
    if (v16)
      return 1;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    v30 = 1;
    v31 = 1;
    v32 = 1;
    v33 = 1;
    v34 = 1;
    v35 = 1;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v20 = 0;
    v21 = 0;
    v23 = 0;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    v30 = 1;
    v31 = 1;
    v32 = 1;
    v33 = 1;
    v22 = 1;
    v34 = 1;
    v35 = 1;
    v45 = 1;
    v46 = 1;
    v47 = 1;
    if (a2 < 9)
      goto LABEL_102;
  }
LABEL_1291:
  if (*(_QWORD *)a1 == 0x616D702E32787661 && *(_BYTE *)(a1 + 8) == 120)
    return 1;
  if (*(_QWORD *)a1 == 0x696D702E32787661 && *(_BYTE *)(a1 + 8) == 110)
    return 1;
  if (a2 >= 0x10)
  {
    if (*(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x78616D702E6B7361)
      return 1;
    if (*(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6E696D702E6B7361)
      return 1;
  }
  else if (v34)
  {
    goto LABEL_1318;
  }
  if (*(_QWORD *)a1 == 0x7262762E32787661 && *(_QWORD *)(a1 + 7) == 0x7473616364616F72)
    return 1;
  if (*(_QWORD *)a1 == 0x7262702E32787661 && *(_QWORD *)(a1 + 7) == 0x7473616364616F72)
    return 1;
LABEL_1318:
  if (!v27 && *(_QWORD *)a1 == 0x726570762E787661 && *(_DWORD *)(a1 + 8) == 778856813)
    return 1;
  if ((v22 & 1) == 0 && *(_QWORD *)a1 == 0x6873702E32657373 && *(_WORD *)(a1 + 8) == 26229)
    return 1;
  if (!v33)
  {
    v374 = *(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 8) == 0x73616364616F7262;
    if (v374 && *(_BYTE *)(a1 + 16) == 116)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v376 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    if (v376 && *(_QWORD *)(a1 + 15) == 0x732E747361636461)
      return 1;
  }
  if ((v24 & 1) == 0)
  {
    v378 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x64766F6D2E6B7361;
    if (v378 && *(_QWORD *)(a1 + 11) == 0x70756464766F6D2ELL)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v420 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x73766F6D2E6B7361;
    if (v420 && *(_DWORD *)(a1 + 16) == 1886741608)
      return 1;
    v422 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x73766F6D2E6B7361;
    if (v422 && *(_DWORD *)(a1 + 16) == 1886741612)
      return 1;
    v424 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x756873702E6B7361;
    if (v424 && *(_DWORD *)(a1 + 16) == 778317414)
      return 1;
  }
  if ((v31 & 1) == 0)
  {
    v380 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x756873702E6B7361;
    if (v380 && *(_QWORD *)(a1 + 13) == 0x2E772E6C66756873)
      return 1;
    v382 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x756873702E6B7361;
    if (v382 && *(_QWORD *)(a1 + 13) == 0x2E772E6866756873)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v384 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x667568732E6B7361;
    if (v384 && *(_WORD *)(a1 + 16) == 28718)
      return 1;
  }
  if ((v31 & 1) == 0)
  {
    v386 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726570762E6B7361;
    if (v386 && *(_QWORD *)(a1 + 13) == 0x702E6C696D726570)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v388 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D7265702E6B7361;
    if (v388 && *(_DWORD *)(a1 + 16) == 778462254)
      return 1;
    v390 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D7265702E6B7361;
    if (v390 && *(_DWORD *)(a1 + 16) == 778658862)
      return 1;
  }
  if ((v24 & 1) == 0)
  {
    v426 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706E75702E6B7361;
    if (v426 && *(_QWORD *)(a1 + 11) == 0x6C6B63706E75702ELL)
      return 1;
    v428 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706E75702E6B7361;
    if (v428 && *(_QWORD *)(a1 + 11) == 0x686B63706E75702ELL)
      return 1;
    v430 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x63706E752E6B7361;
    if (v430 && *(_QWORD *)(a1 + 11) == 0x2E6C6B63706E752ELL)
      return 1;
    v432 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x63706E752E6B7361;
    if (v432 && *(_QWORD *)(a1 + 11) == 0x2E686B63706E752ELL)
      return 1;
  }
  if (!v33)
  {
    v392 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x646E61702E6B7361;
    if (v392 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v394 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x646E61702E6B7361;
    if (v394 && *(_WORD *)(a1 + 16) == 11886)
      return 1;
  }
  if (a2 >= 0x10 && *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E726F702E6B7361)
    return 1;
  v47 = a2 < 0x10;
  if (!v33)
  {
    v397 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F78702E6B7361;
    if (v397 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if (a2 >= 0x10 && *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E646E612E6B7361)
    return 1;
  if (!v33)
  {
    v400 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6E646E612E6B7361;
    if (v400 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if (!v34 && *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 7) == 0x2E726F2E6B73616DLL)
    return 1;
  if (a2 >= 0x10 && *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E726F782E6B7361)
    return 1;
  if (!v33)
  {
    v404 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x646461702E6B7361;
    if (v404 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
    v406 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x627573702E6B7361;
    if (v406 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v408 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v408 && *(_WORD *)(a1 + 16) == 11884)
      return 1;
  }
  if ((v31 & 1) == 0)
  {
    v410 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x647476632E6B7361;
    if (v410 && *(_QWORD *)(a1 + 13) == 0x2E64703271647476)
      return 1;
  }
  if ((v32 & 1) == 0)
  {
    v412 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x757476632E6B7361;
    if (v412 && *(_QWORD *)(a1 + 14) == 0x2E64703271647574)
      return 1;
    v414 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x757476632E6B7361;
    if (v414 && *(_QWORD *)(a1 + 14) == 0x2E73703271647574)
      return 1;
  }
  if ((v31 & 1) == 0)
  {
    v416 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x717476632E6B7361;
    if (v416 && *(_QWORD *)(a1 + 13) == 0x2E64703271717476)
      return 1;
  }
  if ((v32 & 1) == 0)
  {
    v418 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x757476632E6B7361;
    if (v418 && *(_QWORD *)(a1 + 14) == 0x2E64703271717574)
      return 1;
  }
  if ((v31 & 1) != 0)
  {
    v46 = 0;
    v45 = 1;
  }
  else
  {
    if (*(_QWORD *)a1 == 0x6D2E323135787661
      && *(_QWORD *)(a1 + 8) == 0x647476632E6B7361
      && *(_QWORD *)(a1 + 13) == 0x2E73703271647476)
    {
      return 1;
    }
    v45 = 0;
    v46 = 0;
  }
LABEL_102:
  if (a2 == 24)
  {
    v593 = v45;
    v594 = v22;
    v48 = v27;
    v49 = v18;
    v50 = v30;
    v51 = v35;
    v52 = v46;
    v53 = v20;
    v54 = v19;
    v55 = v47;
    v56 = v24;
    v57 = v17;
    v58 = v21;
    v59 = v26;
    v60 = v34;
    v61 = v23;
    v62 = v28;
    v63 = v32;
    v64 = v33;
    v65 = v25;
    v66 = v29;
    if (*(_QWORD *)a1 == 0x6D2E323135787661
      && *(_QWORD *)(a1 + 8) == 0x717476632E6B7361
      && *(_QWORD *)(a1 + 16) == 0x3635322E73703271)
    {
      return 1;
    }
    v97 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x717476632E6B7361;
    if (v97 && *(_QWORD *)(a1 + 16) == 0x3231352E73703271)
      return 1;
    v99 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x707476632E6B7361;
    if (v99 && *(_QWORD *)(a1 + 16) == 0x3635322E71643264)
      return 1;
    v101 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x707476632E6B7361;
    if (v101 && *(_QWORD *)(a1 + 16) == 0x3635322E73703264)
      return 1;
    v103 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x707476632E6B7361;
    if (v103 && *(_QWORD *)(a1 + 16) == 0x3832312E64703273)
      return 1;
    v87 = *(_QWORD *)a1 == 0x6D2E323135787661
       && *(_QWORD *)(a1 + 8) == 0x707476632E6B7361
       && *(_QWORD *)(a1 + 16) == 0x3635322E64703273;
  }
  else
  {
    if (a2 != 25)
      goto LABEL_248;
    v593 = v45;
    v594 = v22;
    v48 = v27;
    v49 = v18;
    v50 = v30;
    v51 = v35;
    v52 = v46;
    v53 = v20;
    v54 = v19;
    v55 = v47;
    v56 = v24;
    v57 = v17;
    v58 = v21;
    v59 = v26;
    v60 = v34;
    v61 = v23;
    v62 = v28;
    v63 = v32;
    v64 = v33;
    v65 = v25;
    v66 = v29;
    if (*(_QWORD *)a1 == 0x6D2E323135787661
      && *(_QWORD *)(a1 + 8) == 0x747663762E6B7361
      && *(_QWORD *)(a1 + 16) == 0x32312E7370326870
      && *(_BYTE *)(a1 + 24) == 56)
    {
      return 1;
    }
    v70 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x747663762E6B7361;
    v71 = v70 && *(_QWORD *)(a1 + 16) == 0x35322E7370326870;
    if (v71 && *(_BYTE *)(a1 + 24) == 54)
      return 1;
    v73 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x757476632E6B7361;
    v74 = v73 && *(_QWORD *)(a1 + 16) == 0x35322E7370327171;
    if (v74 && *(_BYTE *)(a1 + 24) == 54)
      return 1;
    v76 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x757476632E6B7361;
    v77 = v76 && *(_QWORD *)(a1 + 16) == 0x31352E7370327171;
    if (v77 && *(_BYTE *)(a1 + 24) == 50)
      return 1;
    v79 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x747476632E6B7361;
    v80 = v79 && *(_QWORD *)(a1 + 16) == 0x35322E7164326470;
    if (v80 && *(_BYTE *)(a1 + 24) == 54)
      return 1;
    v82 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x747476632E6B7361;
    v83 = v82 && *(_QWORD *)(a1 + 16) == 0x32312E7164327370;
    if (v83 && *(_BYTE *)(a1 + 24) == 56)
      return 1;
    v87 = *(_QWORD *)a1 == 0x6D2E323135787661
       && *(_QWORD *)(a1 + 8) == 0x747476632E6B7361
       && *(_QWORD *)(a1 + 16) == 0x35322E7164327370
       && *(_BYTE *)(a1 + 24) == 54;
  }
  v29 = v66;
  v25 = v65;
  v33 = v64;
  v32 = v63;
  v28 = v62;
  v23 = v61;
  v34 = v60;
  v26 = v59;
  v21 = v58;
  v17 = v57;
  v24 = v56;
  v47 = v55;
  v19 = v54;
  v20 = v53;
  v46 = v52;
  v35 = v51;
  v30 = v50;
  v18 = v49;
  v27 = v48;
  v45 = v593;
  v22 = v594;
  if (v87)
    return 1;
LABEL_248:
  if (v20)
  {
    if (*(_QWORD *)a1 == 0x632E323135787661 && *(_QWORD *)(a1 + 8) == 0x6473326973757476)
      return 1;
  }
  if ((v35 & 1) != 0)
  {
    if (a2 == 13 && *(_QWORD *)a1 == 0x756D702E32657373 && *(_QWORD *)(a1 + 5) == 0x71642E756C756D70)
      return 1;
  }
  else if (*(_QWORD *)a1 == 0x6D2E323135787661
         && *(_QWORD *)(a1 + 8) == 0x6D7265702E6B7361
         && *(_DWORD *)(a1 + 16) == 779247990)
  {
    return 1;
  }
  if (v21)
  {
    if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 1902406773)
      return 1;
  }
  if (a2 == 13 && *(_QWORD *)a1 == 0x756D702E32787661 && *(_QWORD *)(a1 + 5) == 0x71642E756C756D70)
    return 1;
  if (v21)
  {
    if (*(_QWORD *)a1 == 0x756D702E32787661 && *(_DWORD *)(a1 + 8) == 1902390892)
      return 1;
  }
  if (a2 == 19)
  {
    if (*(_QWORD *)a1 == 0x702E323135787661
      && *(_QWORD *)(a1 + 8) == 0x2E71642E756C756DLL
      && *(_QWORD *)(a1 + 11) == 0x3231352E71642E75)
    {
      return 1;
    }
    v590 = v46;
    v591 = v17;
    v115 = v19;
    v592 = v29;
  }
  else
  {
    v591 = v17;
    v592 = v29;
    v590 = v46;
    if (a2 == 18)
    {
      v115 = v19;
      v132 = *(_QWORD *)a1 == 0x702E323135787661
          && *(_QWORD *)(a1 + 8) == 0x352E71642E6C756DLL
          && *(_WORD *)(a1 + 16) == 12849;
      v9 = 1;
      if (v132)
        return v9;
      goto LABEL_423;
    }
    if ((v35 & 1) == 0)
    {
      v147 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361;
      if (v147 && *(_DWORD *)(a1 + 16) == 779183150)
        return 1;
    }
    v115 = v19;
  }
  LODWORD(v9) = 0;
LABEL_423:
  if ((v45 & 1) == 0)
  {
    v149 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v149 && *(_QWORD *)(a1 + 13) == 0x2E71642E756C756DLL)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v151 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v151 && *(_QWORD *)(a1 + 15) == 0x2E77732E72682E6CLL)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v153 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v153 && *(_DWORD *)(a1 + 16) == 779562600)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v155 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361;
    if (v155 && *(_QWORD *)(a1 + 13) == 0x2E772E75686C756DLL)
      return 1;
    v157 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x64616D702E6B7361;
    if (v157 && *(_QWORD *)(a1 + 13) == 0x2E642E776464616DLL)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v159 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x64616D702E6B7361;
    if (v159 && *(_QWORD *)(a1 + 15) == 0x2E772E7362756464)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v243 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v243 && *(_QWORD *)(a1 + 13) == 0x2E627773736B6361)
      return 1;
    v245 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v245 && *(_QWORD *)(a1 + 13) == 0x2E776473736B6361)
      return 1;
    v247 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v247 && *(_QWORD *)(a1 + 13) == 0x2E627773756B6361)
      return 1;
    v249 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B6361702E6B7361;
    if (v249 && *(_QWORD *)(a1 + 13) == 0x2E776473756B6361)
      return 1;
  }
  if (!v33)
  {
    v269 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v269 && *(_BYTE *)(a1 + 16) == 98)
      return 1;
    v271 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v271 && *(_BYTE *)(a1 + 16) == 100)
      return 1;
    v273 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v273 && *(_BYTE *)(a1 + 16) == 113)
      return 1;
    v275 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E706D632E6B7361;
    if (v275 && *(_BYTE *)(a1 + 16) == 119)
      return 1;
  }
  if (!v27 && *(_QWORD *)a1 == 0x632E323135787661 && *(_DWORD *)(a1 + 8) == 1882091629)
    return 1;
  if (!v33)
  {
    v281 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D63752E6B7361;
    if (v281 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
    v283 = *(_QWORD *)a1 == 0x632E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B73616D32627476;
    if (v283 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
    v285 = *(_QWORD *)a1 == 0x632E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B73616D32777476;
    if (v285 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
    v287 = *(_QWORD *)a1 == 0x632E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B73616D32647476;
    if (v287 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
    v289 = *(_QWORD *)a1 == 0x632E323135787661 && *(_QWORD *)(a1 + 8) == 0x6B73616D32717476;
    if (v289 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v162 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726570762E6B7361;
    if (v162 && *(_QWORD *)(a1 + 15) == 0x2E7261766C696D72)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v291 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v291 && *(_WORD *)(a1 + 16) == 25646)
      return 1;
    v293 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v293 && *(_WORD *)(a1 + 16) == 28974)
      return 1;
    v295 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v295 && *(_WORD *)(a1 + 16) == 30510)
      return 1;
    v297 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617273702E6B7361;
    if (v297 && *(_WORD *)(a1 + 16) == 25646)
      return 1;
    v299 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617273702E6B7361;
    if (v299 && *(_WORD *)(a1 + 16) == 28974)
      return 1;
    v301 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617273702E6B7361;
    if (v301 && *(_WORD *)(a1 + 16) == 30510)
      return 1;
    v303 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v303 && *(_WORD *)(a1 + 16) == 25646)
      return 1;
    v305 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v305 && *(_WORD *)(a1 + 16) == 28974)
      return 1;
    v307 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v307 && *(_WORD *)(a1 + 16) == 30510)
      return 1;
  }
  if (!v33)
  {
    v309 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v309 && *(_BYTE *)(a1 + 16) == 105)
      return 1;
    v311 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617273702E6B7361;
    if (v311 && *(_BYTE *)(a1 + 16) == 105)
      return 1;
    v313 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v313 && *(_BYTE *)(a1 + 16) == 105)
      return 1;
    v315 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6C73702E6B7361;
    if (v315 && *(_BYTE *)(a1 + 16) == 118)
      return 1;
    v317 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617273702E6B7361;
    if (v317 && *(_BYTE *)(a1 + 16) == 118)
      return 1;
    v319 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C7273702E6B7361;
    if (v319 && *(_BYTE *)(a1 + 16) == 118)
      return 1;
  }
  if (!v27)
  {
    if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2020832879)
      return 1;
    if (*(_QWORD *)a1 == 0x6D702E3134657373 && *(_DWORD *)(a1 + 8) == 2021291631)
      return 1;
  }
  if ((v26 & 1) == 0)
  {
    if (*(_QWORD *)a1 == 0x6F6D702E32787661 && *(_QWORD *)(a1 + 3) == 0x7873766F6D702E32)
      return 1;
    if (*(_QWORD *)a1 == 0x6F6D702E32787661 && *(_QWORD *)(a1 + 3) == 0x787A766F6D702E32)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v349 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v349 && *(_WORD *)(a1 + 16) == 30835)
      return 1;
    v351 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v351 && *(_WORD *)(a1 + 16) == 30842)
      return 1;
    v353 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6E637A6C2E6B7361;
    if (v353 && *(_WORD *)(a1 + 16) == 11892)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v168 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726574702E6B7361;
    if (v168 && *(_QWORD *)(a1 + 13) == 0x2E676F6C6E726574)
      return 1;
  }
  if ((v32 & 1) == 0)
  {
    v170 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6574702E7A6B7361;
    if (v170 && *(_QWORD *)(a1 + 14) == 0x2E676F6C6E726574)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v172 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616D70762E6B7361;
    if (v172 && *(_DWORD *)(a1 + 16) == 842359908)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v174 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6D70762E7A6B7361;
    if (v174 && *(_QWORD *)(a1 + 13) == 0x32356464616D7076)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v176 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726570762E6B7361;
    if (v176 && *(_QWORD *)(a1 + 15) == 0x2E72617632696D72)
      return 1;
    v178 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726570762E6B7361;
    if (v178 && *(_QWORD *)(a1 + 15) == 0x2E72617632746D72)
      return 1;
  }
  if (a2 >= 0x18)
  {
    v180 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6570762E7A6B7361;
    if (v180 && *(_QWORD *)(a1 + 16) == 0x2E72617632746D72)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v182 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706470762E6B7361;
    if (v182 && *(_QWORD *)(a1 + 13) == 0x2E64737562706470)
      return 1;
  }
  if ((v32 & 1) == 0)
  {
    v184 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v184 && *(_QWORD *)(a1 + 14) == 0x2E64737562706470)
      return 1;
    v186 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706470762E6B7361;
    if (v186 && *(_QWORD *)(a1 + 14) == 0x2E73647375627064)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v188 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v188 && *(_QWORD *)(a1 + 15) == 0x2E73647375627064)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v190 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706470762E6B7361;
    if (v190 && *(_QWORD *)(a1 + 13) == 0x2E64737377706470)
      return 1;
  }
  if ((v32 & 1) == 0)
  {
    v192 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v192 && *(_QWORD *)(a1 + 14) == 0x2E64737377706470)
      return 1;
    v194 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706470762E6B7361;
    if (v194 && *(_QWORD *)(a1 + 14) == 0x2E73647373777064)
      return 1;
  }
  if ((v30 & 1) == 0)
  {
    v196 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6470762E7A6B7361;
    if (v196 && *(_QWORD *)(a1 + 15) == 0x2E73647373777064)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v198 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x737062642E6B7361;
    if (v198 && *(_QWORD *)(a1 + 13) == 0x2E77626461737062)
      return 1;
  }
  if ((v24 & 1) == 0)
  {
    v200 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x687370762E6B7361;
    if (v200 && *(_QWORD *)(a1 + 11) == 0x2E646C687370762ELL)
      return 1;
    v202 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x687370762E6B7361;
    if (v202 && *(_QWORD *)(a1 + 11) == 0x2E6472687370762ELL)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v204 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x687370762E6B7361;
    if (v204 && *(_DWORD *)(a1 + 16) == 779510892)
      return 1;
    v206 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x687370762E6B7361;
    if (v206 && *(_DWORD *)(a1 + 16) == 779510898)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v208 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x7370762E7A6B7361;
    if (v208 && *(_QWORD *)(a1 + 13) == 0x2E76646C68737076)
      return 1;
    v210 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x7370762E7A6B7361;
    if (v210 && *(_QWORD *)(a1 + 13) == 0x2E76647268737076)
      return 1;
  }
  if (!v592)
  {
    if (*(_QWORD *)a1 == 0x762E323135787661 && *(_QWORD *)(a1 + 6) == 0x2E646C687370762ELL)
      return 1;
    if (*(_QWORD *)a1 == 0x762E323135787661 && *(_QWORD *)(a1 + 6) == 0x2E6472687370762ELL)
      return 1;
  }
  if (!v33)
  {
    v437 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E6464612E6B7361;
    if (v437 && *(_BYTE *)(a1 + 16) == 112)
      return 1;
    v439 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E6275732E6B7361;
    if (v439 && *(_BYTE *)(a1 + 16) == 112)
      return 1;
    v441 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E6C756D2E6B7361;
    if (v441 && *(_BYTE *)(a1 + 16) == 112)
      return 1;
    v443 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E7669642E6B7361;
    if (v443 && *(_BYTE *)(a1 + 16) == 112)
      return 1;
    v445 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E78616D2E6B7361;
    if (v445 && *(_BYTE *)(a1 + 16) == 112)
      return 1;
    v447 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x2E6E696D2E6B7361;
    if (v447 && *(_BYTE *)(a1 + 16) == 112)
      return 1;
  }
  if ((v45 & 1) == 0)
  {
    v214 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6370662E6B7361;
    if (v214 && *(_QWORD *)(a1 + 13) == 0x702E7373616C6370)
      return 1;
  }
  if (a2 < 0x19)
    goto LABEL_707;
  if (*(_QWORD *)a1 == 0x6D2E323135787661
    && *(_QWORD *)(a1 + 8) == 0x687370762E6B7361
    && *(_QWORD *)(a1 + 16) == 0x626D717469626675
    && *(_BYTE *)(a1 + 24) == 46)
  {
    return 1;
  }
  if (a2 >= 0x1B)
  {
    if (*(_QWORD *)a1 == 0x6D2E323135787661
      && *(_QWORD *)(a1 + 8) == 0x6C756D702E6B7361
      && *(_QWORD *)(a1 + 16) == 0x2E74666968736974
      && *(_QWORD *)(a1 + 19) == 0x2E62712E74666968)
    {
      return 1;
    }
    v219 = 0;
    if ((v45 & 1) != 0)
      goto LABEL_715;
  }
  else
  {
LABEL_707:
    v219 = 1;
    if ((v45 & 1) != 0)
      goto LABEL_715;
  }
  if (*(_QWORD *)a1 == 0x6D2E323135787661
    && *(_QWORD *)(a1 + 8) == 0x666E6F632E6B7361
    && *(_QWORD *)(a1 + 13) == 0x2E7463696C666E6FLL)
  {
    return 1;
  }
LABEL_715:
  if (a2 == 23)
  {
    v222 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v222 && *(_QWORD *)(a1 + 15) == 0x3635322E64712E76)
      return 1;
    v224 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v224 && *(_QWORD *)(a1 + 15) == 0x3231352E64712E76)
      return 1;
    v226 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v226 && *(_QWORD *)(a1 + 15) == 0x3635322E62772E76)
      return 1;
    v228 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x766F6D702E6B7361;
    if (v228 && *(_QWORD *)(a1 + 15) == 0x3231352E62772E76)
      return 1;
  }
  if (v21)
  {
    if (*(_QWORD *)a1 == 0x737476632E657373 && *(_DWORD *)(a1 + 8) == 1936929385)
      return 1;
  }
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x737476632E657373 && *(_QWORD *)(a1 + 6) == 0x7373323436697374)
      return 1;
  }
  if (a2 == 13 && *(_QWORD *)a1 == 0x7476632E32657373 && *(_QWORD *)(a1 + 5) == 0x6473326973747663)
    return 1;
  if (v115)
  {
    if (*(_QWORD *)a1 == 0x7476632E32657373 && *(_QWORD *)(a1 + 7) == 0x6473323436697374)
      return 1;
  }
  if (a2 == 13)
  {
    if (*(_QWORD *)a1 == 0x7476632E32657373 && *(_QWORD *)(a1 + 5) == 0x6473327373747663)
      return 1;
    if (*(_QWORD *)a1 == 0x7476632E32657373 && *(_QWORD *)(a1 + 5) == 0x6470327164747663)
      return 1;
    if (*(_QWORD *)a1 == 0x7476632E32657373 && *(_QWORD *)(a1 + 5) == 0x7370327164747663)
      return 1;
    if (*(_QWORD *)a1 == 0x7476632E32657373 && *(_QWORD *)(a1 + 5) == 0x6470327370747663)
      return 1;
  }
  else if (v18)
  {
    v452 = *(_QWORD *)a1 == 0x647476632E787661 && *(_QWORD *)(a1 + 8) == 0x35322E64702E3271;
    if (v452 && *(_BYTE *)(a1 + 16) == 54)
      return 1;
    v454 = *(_QWORD *)a1 == 0x647476632E787661 && *(_QWORD *)(a1 + 8) == 0x35322E73702E3271;
    if (v454 && *(_BYTE *)(a1 + 16) == 54)
      return 1;
  }
  if ((_DWORD)v9)
  {
    v456 = *(_QWORD *)a1 == 0x2E7476632E787661 && *(_QWORD *)(a1 + 8) == 0x322E64702E327370;
    if (v456 && *(_WORD *)(a1 + 16) == 13877)
      return 1;
  }
  if ((v22 & 1) == 0 && *(_QWORD *)a1 == 0x7032687074766376 && *(_WORD *)(a1 + 8) == 11891)
    return 1;
  if (!v47 && *(_QWORD *)a1 == 0x736E69762E787661 && *(_QWORD *)(a1 + 8) == 0x2E38323166747265)
    return 1;
  if (v20)
  {
    if (*(_QWORD *)a1 == 0x6E69762E32787661 && *(_QWORD *)(a1 + 8) == 0x3832316974726573)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v461 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x65736E692E6B7361;
    if (v461 && *(_WORD *)(a1 + 16) == 29810)
      return 1;
  }
  if (!v33)
  {
    v463 = *(_QWORD *)a1 == 0x747865762E787661 && *(_QWORD *)(a1 + 8) == 0x3832316674636172;
    if (v463 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if (v18)
  {
    v465 = *(unsigned __int8 *)(a1 + 16);
    v466 = *(_QWORD *)a1 == 0x7865762E32787661 && *(_QWORD *)(a1 + 8) == 0x3231697463617274;
    v467 = 56;
  }
  else
  {
    if ((v35 & 1) != 0)
      goto LABEL_1702;
    v465 = *(_DWORD *)(a1 + 16);
    v466 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x747865762E6B7361;
    v467 = 1952670066;
  }
  if (v466 && v465 == v467)
    return 1;
LABEL_1702:
  if (!v27 && *(_QWORD *)a1 == 0x6F6D2E6134657373 && *(_DWORD *)(a1 + 8) == 779382390)
    return 1;
  if ((v22 & 1) == 0 && *(_QWORD *)a1 == 0x6E766F6D2E787661 && *(_WORD *)(a1 + 8) == 11892)
    return 1;
  if (!v34 && *(_QWORD *)a1 == 0x732E323135787661 && *(_QWORD *)(a1 + 7) == 0x2E746E65726F7473)
    return 1;
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x6F6D2E3134657373 && *(_QWORD *)(a1 + 6) == 0x617164746E766F6DLL)
      return 1;
  }
  if (a2 == 13 && *(_QWORD *)a1 == 0x766F6D2E32787661 && *(_QWORD *)(a1 + 5) == 0x617164746E766F6DLL)
    return 1;
  if (v115)
  {
    if (*(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 7) == 0x617164746E766F6DLL)
      return 1;
  }
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x6F74732E32657373 && *(_QWORD *)(a1 + 6) == 0x71642E6C65726F74)
      return 1;
  }
  if ((v26 & 1) == 0 && *(_QWORD *)a1 == 0x726F74732E657373 && *(_QWORD *)(a1 + 3) == 0x2E7565726F74732ELL)
    return 1;
  if (!v27 && *(_QWORD *)a1 == 0x6F74732E32657373 && *(_DWORD *)(a1 + 8) == 779445618)
    return 1;
  if ((v26 & 1) == 0 && *(_QWORD *)a1 == 0x726F74732E787661 && *(_QWORD *)(a1 + 3) == 0x2E7565726F74732ELL)
    return 1;
  if ((v24 & 1) == 0)
  {
    v479 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
    if (v479 && *(_QWORD *)(a1 + 11) == 0x2E7565726F74732ELL)
      return 1;
    v481 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
    if (v481 && *(_QWORD *)(a1 + 11) == 0x702E65726F74732ELL)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v501 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
    if (v501 && *(_DWORD *)(a1 + 16) == 778186341)
      return 1;
    v503 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
    if (v503 && *(_DWORD *)(a1 + 16) == 779562597)
      return 1;
    v505 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
    if (v505 && *(_DWORD *)(a1 + 16) == 778317413)
      return 1;
    v507 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
    if (v507 && *(_DWORD *)(a1 + 16) == 779169381)
      return 1;
    if (a2 == 20)
    {
      v509 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F74732E6B7361;
      if (v509 && *(_DWORD *)(a1 + 16) == 1936928357)
        return 1;
    }
  }
  if ((v25 & 1) == 0)
  {
    v483 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x64616F6C2E6B7361;
    if (v483 && *(_WORD *)(a1 + 16) == 11893)
      return 1;
  }
  if (!v33)
  {
    v485 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x64616F6C2E6B7361;
    if (v485 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if (a2 >= 0x18)
  {
    v487 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617078652E6B7361;
    if (v487 && *(_QWORD *)(a1 + 16) == 0x2E64616F6C2E646ELL)
      return 1;
  }
  if ((v219 & 1) == 0)
  {
    v489 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D6F632E6B7361;
    v490 = v489 && *(_QWORD *)(a1 + 16) == 0x6F74732E73736572;
    if (v490 && *(_QWORD *)(a1 + 19) == 0x2E65726F74732E73)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v511 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617078652E6B7361;
    if (v511 && *(_DWORD *)(a1 + 16) == 1647207534)
      return 1;
    v513 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617078652E6B7361;
    if (v513 && *(_DWORD *)(a1 + 16) == 1999529070)
      return 1;
    v515 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617078652E6B7361;
    if (v515 && *(_DWORD *)(a1 + 16) == 1680761966)
      return 1;
    v517 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617078652E6B7361;
    if (v517 && *(_DWORD *)(a1 + 16) == 1898865774)
      return 1;
    v519 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x617078652E6B7361;
    if (v519 && *(_DWORD *)(a1 + 16) == 1882088558)
      return 1;
  }
  if ((v32 & 1) == 0)
  {
    v521 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v521 && *(_QWORD *)(a1 + 14) == 0x622E73736572706DLL)
      return 1;
    v523 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v523 && *(_QWORD *)(a1 + 14) == 0x772E73736572706DLL)
      return 1;
    v525 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v525 && *(_QWORD *)(a1 + 14) == 0x642E73736572706DLL)
      return 1;
    v527 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v527 && *(_QWORD *)(a1 + 14) == 0x712E73736572706DLL)
      return 1;
    v529 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x706D6F632E6B7361;
    if (v529 && *(_QWORD *)(a1 + 14) == 0x702E73736572706DLL)
      return 1;
  }
  if (v20)
  {
    if (*(_QWORD *)a1 == 0x72632E3234657373 && *(_QWORD *)(a1 + 8) == 0x382E34362E323363)
      return 1;
  }
  if (!v47 && *(_QWORD *)a1 == 0x6F7262762E787661 && *(_QWORD *)(a1 + 8) == 0x732E747361636461)
    return 1;
  if ((v24 & 1) == 0)
  {
    v494 = *(_QWORD *)a1 == 0x762E323135787661 && *(_QWORD *)(a1 + 8) == 0x73616364616F7262;
    if (v494 && *(_QWORD *)(a1 + 11) == 0x732E747361636461)
      return 1;
  }
  if ((v35 & 1) == 0)
  {
    v496 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x696C61702E6B7361;
    if (v496 && *(_DWORD *)(a1 + 16) == 779251303)
      return 1;
  }
  if ((v24 & 1) == 0)
  {
    v498 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x696C61762E6B7361;
    if (v498 && *(_QWORD *)(a1 + 11) == 0x2E6E67696C61762ELL)
      return 1;
  }
  if (!v27)
  {
    if (*(_QWORD *)a1 == 0x6C73702E32657373 && *(_DWORD *)(a1 + 8) == 1902390892)
      return 1;
    if (*(_QWORD *)a1 == 0x7273702E32657373 && *(_DWORD *)(a1 + 8) == 1902390892)
      return 1;
    if (*(_QWORD *)a1 == 0x6C73702E32787661 && *(_DWORD *)(a1 + 8) == 1902390892)
      return 1;
    if (*(_QWORD *)a1 == 0x7273702E32787661 && *(_DWORD *)(a1 + 8) == 1902390892)
      return 1;
  }
  if (v592)
  {
    if (a2 == 13 && *(_QWORD *)a1 == 0x62702E3134657373 && *(_QWORD *)(a1 + 5) == 0x77646E656C62702ELL)
      return 1;
  }
  else
  {
    if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 6) == 0x71642E6C6C73702ELL)
      return 1;
    if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 6) == 0x71642E6C7273702ELL)
      return 1;
  }
  if (!v27 && *(_QWORD *)a1 == 0x6C622E3134657373 && *(_DWORD *)(a1 + 8) == 1885630053)
    return 1;
  if ((v26 & 1) == 0 && *(_QWORD *)a1 == 0x6E656C622E787661 && *(_QWORD *)(a1 + 3) == 0x702E646E656C622ELL)
    return 1;
  if (v21)
  {
    if (*(_QWORD *)a1 == 0x6C62702E32787661 && *(_DWORD *)(a1 + 8) == 2003070565)
      return 1;
  }
  if ((v28 & 1) == 0 && *(_QWORD *)a1 == 0x6C62702E32787661 && *(_QWORD *)(a1 + 5) == 0x2E64646E656C6270)
    return 1;
  if ((v25 & 1) == 0)
  {
    v541 = *(_QWORD *)a1 == 0x6F7262762E787661 && *(_QWORD *)(a1 + 8) == 0x3166747361636461;
    if (v541 && *(_WORD *)(a1 + 16) == 14386)
      return 1;
  }
  if (a2 == 19)
  {
    v543 = *(_QWORD *)a1 == 0x7262762E32787661 && *(_QWORD *)(a1 + 8) == 0x697473616364616FLL;
    if (v543 && *(_QWORD *)(a1 + 11) == 0x3832316974736163)
      return 1;
  }
  if ((v219 & 1) == 0)
  {
    v563 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v564 = v563 && *(_QWORD *)(a1 + 16) == 0x3233667473616364;
    if (v564 && *(_QWORD *)(a1 + 19) == 0x2E34783233667473)
      return 1;
    v566 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v567 = v566 && *(_QWORD *)(a1 + 16) == 0x3436667473616364;
    if (v567 && *(_QWORD *)(a1 + 19) == 0x2E32783436667473)
      return 1;
    v569 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v570 = v569 && *(_QWORD *)(a1 + 16) == 0x3233667473616364;
    if (v570 && *(_QWORD *)(a1 + 19) == 0x2E38783233667473)
      return 1;
    v572 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v573 = v572 && *(_QWORD *)(a1 + 16) == 0x3436667473616364;
    if (v573 && *(_QWORD *)(a1 + 19) == 0x2E34783436667473)
      return 1;
    v575 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v576 = v575 && *(_QWORD *)(a1 + 16) == 0x3233697473616364;
    if (v576 && *(_QWORD *)(a1 + 19) == 0x2E34783233697473)
      return 1;
    v578 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v579 = v578 && *(_QWORD *)(a1 + 16) == 0x3436697473616364;
    if (v579 && *(_QWORD *)(a1 + 19) == 0x2E32783436697473)
      return 1;
    v581 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v582 = v581 && *(_QWORD *)(a1 + 16) == 0x3233697473616364;
    if (v582 && *(_QWORD *)(a1 + 19) == 0x2E38783233697473)
      return 1;
    v584 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x616F72622E6B7361;
    v585 = v584 && *(_QWORD *)(a1 + 16) == 0x3436697473616364;
    if (v585 && *(_QWORD *)(a1 + 19) == 0x2E34783436697473)
      return 1;
  }
  if (v591)
  {
    if (*(_QWORD *)a1 == 0x6D6370762E706F78 && *(_WORD *)(a1 + 8) == 30319)
      return 1;
  }
  if (v23)
  {
    if (*(_QWORD *)a1 == 0x6D6370762E706F78 && *(_QWORD *)(a1 + 6) == 0x3635322E766F6D63)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v547 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x65766F6D2E6B7361;
    if (v547 && *(_WORD *)(a1 + 16) == 29486)
      return 1;
  }
  if (!v34 && *(_QWORD *)a1 == 0x632E323135787661 && *(_QWORD *)(a1 + 7) == 0x326B73616D747663)
    return 1;
  if ((v590 & 1) == 0)
  {
    if (*(_QWORD *)a1 == 0x6F6370762E706F78 && *(_BYTE *)(a1 + 8) == 109)
      return 1;
    if (*(_QWORD *)a1 == 0x6F7270762E706F78 && *(_BYTE *)(a1 + 8) == 116)
      return 1;
  }
  if ((v26 & 1) == 0)
  {
    if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 3) == 0x6C6F72702E323135)
      return 1;
    if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 3) == 0x726F72702E323135)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v554 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F72702E6B7361;
    if (v554 && *(_WORD *)(a1 + 16) == 11894)
      return 1;
  }
  if (!v33)
  {
    v556 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x726F72702E6B7361;
    if (v556 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if ((v25 & 1) == 0)
  {
    v558 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6F72702E6B7361;
    if (v558 && *(_WORD *)(a1 + 16) == 11894)
      return 1;
  }
  if (!v33)
  {
    v560 = *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x6C6F72702E6B7361;
    if (v560 && *(_BYTE *)(a1 + 16) == 46)
      return 1;
  }
  if ((v28 & 1) != 0)
    goto LABEL_2102;
  if (*(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 5) == 0x6D74736574702E32)
    return 1;
  if (v592)
  {
LABEL_2102:
    if (v47)
      return 0;
    return *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x677661702E6B7361;
  }
  v587 = *(_QWORD *)a1 == 0x702E323135787661 && *(_QWORD *)(a1 + 6) == 0x6D6E74736574702ELL;
  v9 = v587;
  v588 = v587 || v47;
  if ((v588 & 1) == 0)
    return *(_QWORD *)a1 == 0x6D2E323135787661 && *(_QWORD *)(a1 + 8) == 0x677661702E6B7361;
  return v9;
}

BOOL sub_1C534E24C(uint64_t ***a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t ***v17;
  char *v18;
  uint64_t **v19;
  uint64_t **v20;
  _QWORD v22[4];
  __int16 v23;

  v6 = a1[3][2][1];
  llvm::FixedVectorType::get((llvm::FixedVectorType *)(***a1 + 1672), (llvm::Type *)4);
  v8 = v7;
  if (v6 == v7)
  {
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    {
      v19 = 0;
      v18 = &byte_1C871356D;
      goto LABEL_11;
    }
    v9 = ***a1;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == a1)
      {
LABEL_10:
        v17 = v13[1];
        v20 = *v17;
        v18 = (char *)(v17 + 2);
        v19 = v20;
LABEL_11:
        v23 = 773;
        v22[0] = v18;
        v22[1] = v19;
        v22[2] = ".old";
        llvm::Value::setName(a1, (uint64_t)v22);
        *a3 = llvm::Intrinsic::getDeclaration((uint64_t *)a1[5], a2, 0, 0);
        return v6 == v8;
      }
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == a1)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_10;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_10;
  }
  return v6 == v8;
}

BOOL sub_1C534E388(uint64_t ***a1, int a2, uint64_t *a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  char *v16;
  uint64_t **v17;
  uint64_t **v18;
  _QWORD v20[4];
  __int16 v21;

  v3 = *(_DWORD *)(a1[3][2][*((_DWORD *)a1[3] + 3) - 1] + 8);
  if (v3 == 8205)
  {
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    {
      v17 = 0;
      v16 = &byte_1C871356D;
      goto LABEL_11;
    }
    v7 = ***a1;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == a1)
      {
LABEL_10:
        v15 = v11[1];
        v18 = *v15;
        v16 = (char *)(v15 + 2);
        v17 = v18;
LABEL_11:
        v21 = 773;
        v20[0] = v16;
        v20[1] = v17;
        v20[2] = ".old";
        llvm::Value::setName(a1, (uint64_t)v20);
        *a3 = llvm::Intrinsic::getDeclaration((uint64_t *)a1[5], a2, 0, 0);
        return v3 == 8205;
      }
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a1)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_10;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_10;
  }
  return v3 == 8205;
}

BOOL sub_1C534E4B8(uint64_t ***a1, int a2, uint64_t *a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  char *v16;
  uint64_t **v17;
  uint64_t **v18;
  _QWORD v20[4];
  __int16 v21;

  v3 = *(_DWORD *)(*a1[3][2] + 8) & 0xFE;
  if (v3 != 18)
  {
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    {
      v17 = 0;
      v16 = &byte_1C871356D;
      goto LABEL_11;
    }
    v7 = ***a1;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == a1)
      {
LABEL_10:
        v15 = v11[1];
        v18 = *v15;
        v16 = (char *)(v15 + 2);
        v17 = v18;
LABEL_11:
        v21 = 773;
        v20[0] = v16;
        v20[1] = v17;
        v20[2] = ".old";
        llvm::Value::setName(a1, (uint64_t)v20);
        *a3 = llvm::Intrinsic::getDeclaration((uint64_t *)a1[5], a2, 0, 0);
        return v3 != 18;
      }
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a1)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_10;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_10;
  }
  return v3 != 18;
}

uint64_t sub_1C534E5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 *v40[4];
  __int16 v41;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 168))(*(_QWORD *)(a1 + 72), a2, a3, a5);
    if (v9)
      v10 = v9[16] >= 0x1Cu;
    else
      v10 = 0;
    if (v10)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1 + 16 * v11;
        v14 = (unsigned __int8 **)(v9 + 48);
        do
        {
          v15 = *(_DWORD *)v12;
          v16 = *(unsigned __int8 **)(v12 + 8);
          if (v16)
          {
            if (!v15)
            {
              v40[0] = *(unsigned __int8 **)(v12 + 8);
              llvm::MetadataTracking::track((uint64_t)v40, v16, 2);
LABEL_22:
              if (v40 == v14)
              {
                if (v40[0])
                  llvm::MetadataTracking::untrack((uint64_t)v40, v40[0]);
              }
              else
              {
                if (*v14)
                  llvm::MetadataTracking::untrack((uint64_t)(v9 + 48), *v14);
                v17 = v40[0];
                *v14 = v40[0];
                if (v17)
                  llvm::MetadataTracking::retrack((uint64_t)v40, v17, (uint64_t)(v9 + 48));
              }
              goto LABEL_19;
            }
          }
          else
          {
            if (!*v14 && (v9[23] & 0x20) == 0)
              goto LABEL_19;
            if (!v15)
            {
              v40[0] = 0;
              goto LABEL_22;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v9, v15, (llvm::MDNode *)v16);
LABEL_19:
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v41 = 257;
      v18 = (char *)operator new(0x80uLL);
      v19 = v18;
      *((_QWORD *)v18 + 8) = *(_QWORD *)a2;
      v20 = v18 + 64;
      *((_QWORD *)v18 + 3) = v18 + 64;
      *((_QWORD *)v18 + 5) = 0;
      v21 = v18 + 40;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 7) = v18 + 64;
      *((_QWORD *)v18 + 9) = 0;
      *((_QWORD *)v18 + 10) = 0x200000037;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *((_DWORD *)v18 + 30) = 0;
      *(_QWORD *)v18 = a2;
      v24 = *(_QWORD *)(a2 + 8);
      v23 = (_QWORD *)(a2 + 8);
      v22 = v24;
      *((_QWORD *)v18 + 1) = v24;
      if (v24)
        *(_QWORD *)(v22 + 16) = v18 + 8;
      *((_QWORD *)v18 + 2) = v23;
      *v23 = v18;
      *((_QWORD *)v18 + 4) = a3;
      if (a3)
      {
        v27 = *(_QWORD *)(a3 + 8);
        v26 = (_QWORD *)(a3 + 8);
        v25 = v27;
        *v21 = v27;
        if (v27)
          *(_QWORD *)(v25 + 16) = v21;
        *((_QWORD *)v18 + 6) = v26;
        *v26 = v18 + 32;
      }
      llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v40);
      v19[81] |= 2u;
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v20;
    }
    else
    {
      v41 = 257;
      v30 = (char *)operator new(0x80uLL);
      *((_QWORD *)v30 + 8) = *(_QWORD *)a2;
      v31 = v30 + 64;
      *((_QWORD *)v30 + 3) = v30 + 64;
      *((_QWORD *)v30 + 5) = 0;
      v32 = v30 + 40;
      *((_QWORD *)v30 + 6) = 0;
      *((_QWORD *)v30 + 7) = v30 + 64;
      *((_QWORD *)v30 + 9) = 0;
      *((_QWORD *)v30 + 10) = 0x200000037;
      *(_OWORD *)(v30 + 88) = 0u;
      *(_OWORD *)(v30 + 104) = 0u;
      *((_DWORD *)v30 + 30) = 0;
      *(_QWORD *)v30 = a2;
      v35 = *(_QWORD *)(a2 + 8);
      v34 = (_QWORD *)(a2 + 8);
      v33 = v35;
      *((_QWORD *)v30 + 1) = v35;
      if (v35)
        *(_QWORD *)(v33 + 16) = v30 + 8;
      *((_QWORD *)v30 + 2) = v34;
      *v34 = v30;
      *((_QWORD *)v30 + 4) = a3;
      if (a3)
      {
        v38 = *(_QWORD *)(a3 + 8);
        v37 = (_QWORD *)(a3 + 8);
        v36 = v38;
        *v32 = v38;
        if (v38)
          *(_QWORD *)(v36 + 16) = v32;
        *((_QWORD *)v30 + 6) = v37;
        *v37 = v30 + 32;
      }
      llvm::Value::setName((uint64_t ***)v30 + 8, (uint64_t)v40);
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v31;
    }
    return sub_1C4773754(v28, v29, a4);
  }
  return (uint64_t)v9;
}

_QWORD *sub_1C534E8A4(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 61)
      abort();
    result = operator new(8 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v17 = (void *)*result;
LABEL_20:
    result = memmove(v17, __src, v12);
    goto LABEL_21;
  }
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_20;
  }
LABEL_21:
  *v13 = &v9[v12];
  return result;
}

uint64_t sub_1C534E9D8(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t first_not_of;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  first_not_of = llvm::StringRef::find_first_not_of(a1, a2, a3, 0);
  v8 = *a1;
  v7 = a1[1];
  if (first_not_of >= v7)
    v9 = a1[1];
  else
    v9 = first_not_of;
  v10 = v8 + v9;
  v12[0] = v8 + v9;
  v12[1] = v7 - v9;
  llvm::StringRef::find_last_not_of(v12, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
  return v10;
}

uint64_t sub_1C534EA50(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;

  v3 = (uint64_t *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 && (*(_BYTE *)(v2 + 19) & 0x20) != 0
    || (result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 61), (_DWORD)result))
  {
    result = sub_1C4DF8FCC(a1);
    if ((result & 1) == 0)
    {
      *(_QWORD *)(a1 + 64) = llvm::AttributeList::removeAttributeAtIndex(v3, **(uint64_t ***)a1, -1, 61);
      result = llvm::AttributeList::addAttributeAtIndex(v3, **(uint64_t ***)a1, -1, 20);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  return result;
}

uint64_t sub_1C534EAD4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v10;

  if ((__int128 *)a2 != a3)
  {
    sub_1C534EB68((uint64_t)&v10, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = *(void **)(v7 - 24);
        if (v8)
        {
          *(_QWORD *)(v7 - 16) = v8;
          operator delete(v8);
        }
        if (*(char *)(v7 - 25) < 0)
          operator delete(*(void **)(v7 - 48));
        v7 -= 48;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__int128 *sub_1C534EB68(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      sub_1C6184574(a4 + 24, (__n128 *)((char *)v5 + 24));
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t llvm::BasicBlock::getValueSymbolTable(llvm::BasicBlock *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return *(_QWORD *)(v1 + 104);
  else
    return 0;
}

uint64_t llvm::BasicBlock::getContext(llvm::BasicBlock *this)
{
  return **(_QWORD **)this;
}

uint64_t llvm::invalidateParentIListOrdering<llvm::BasicBlock>(uint64_t result)
{
  *(_WORD *)(result + 18) &= ~0x8000u;
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::getListOwner(uint64_t a1)
{
  return a1 - 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::getList(uint64_t a1)
{
  return a1 + 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::Instruction>::getSymTab(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 56);
    if (v1)
      return *(_QWORD *)(v1 + 104);
    else
      return 0;
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::Instruction>::addNodeToList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::ValueSymbolTable *v3;

  *(_QWORD *)(a2 + 40) = a1 - 40;
  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(llvm::ValueSymbolTable **)(v2 + 104);
      if (v3)
        llvm::ValueSymbolTable::reinsertValue(v3, (llvm::Value *)a2);
    }
  }
}

{
  __ZN4llvm21SymbolTableListTraitsINS_11InstructionEE13addNodeToListEPS1_(a1, a2);
}

int32x2_t llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int32x2_t result;

  a2[5] = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    return result;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return result;
  v3 = *(uint64_t **)(v2 + 104);
  if (!v3)
    return result;
  v4 = ***a2;
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(unsigned int *)(v4 + 168);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t ****)(v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_11;
    v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_11;
      }
    }
  }
  v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_11:
  v12 = *((unsigned int *)v3 + 2);
  if ((_DWORD)v12)
  {
    v13 = (size_t *)v8[1];
    v14 = *((unsigned int *)v3 + 5);
    v15 = (unsigned __int8 *)v13 + v14;
    v16 = *v13;
    if (*v13)
    {
      v17 = 0;
      v18 = *v13;
      v19 = v15;
      do
      {
        v20 = *v19++;
        v17 = 33 * v17 + v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      v17 = 0;
    }
    v21 = v12 - 1;
    v22 = *v3;
    v23 = *v3 + 8 * v12 + 8;
    v24 = 1;
    v25 = v17;
    while (1)
    {
      v26 = v25 & v21;
      v27 = *(_QWORD **)(v22 + 8 * v26);
      if (v27 != (_QWORD *)-8)
      {
        if (!v27)
          return result;
        if (*(_DWORD *)(v23 + 4 * v26) == v17 && v16 == *v27 && (!v16 || !memcmp(v15, (char *)v27 + v14, v16)))
          break;
      }
      v25 = v24 + v26;
      ++v24;
    }
    *(_QWORD *)(v22 + 8 * (int)v26) = -8;
    result = vadd_s32(*(int32x2_t *)((char *)v3 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v3 + 12) = (uint64_t)result;
  }
  return result;
}

{
  return __ZN4llvm21SymbolTableListTraitsINS_11InstructionEE18removeNodeFromListEPS1_(a1, a2);
}

void llvm::SymbolTableListTraits<llvm::Instruction>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  llvm::ValueSymbolTable *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t *ValueName;
  uint64_t v13;
  llvm::ValueSymbolTable *v14;
  uint64_t *v15;
  uint64_t v16;

  *(_WORD *)(a1 - 22) &= ~0x8000u;
  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      v5 = *(llvm::ValueSymbolTable **)(v4 + 104);
    else
      v5 = 0;
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
      v7 = *(uint64_t **)(v6 + 104);
    else
      v7 = 0;
    if (v5 == (llvm::ValueSymbolTable *)v7)
    {
      while (a3 != a4)
      {
        v8 = a3 - 24;
        if (!a3)
          v8 = 0;
        *(_QWORD *)(v8 + 40) = a1 - 40;
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
    else
    {
      v14 = v5;
      v15 = v7;
      if (a3 != a4)
      {
        v13 = a1 - 40;
        do
        {
          v16 = a3;
          if (a3)
            v9 = a3 - 24;
          else
            v9 = 0;
          v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
          if (v15 && v10)
          {
            ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v9);
            llvm::ValueSymbolTable::removeValueName(v15, ValueName);
          }
          *(_QWORD *)(v9 + 40) = v13;
          if (v14 && v10)
            llvm::ValueSymbolTable::reinsertValue(v14, (llvm::Value *)v9);
          a3 = *(_QWORD *)(v16 + 8);
        }
        while (a3 != a4);
      }
    }
  }
}

uint64_t llvm::BasicBlock::BasicBlock(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  *(_QWORD *)a1 = *a2 + 1600;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = a1 + 24;
  *(_DWORD *)(a1 + 16) = 22;
  *(_DWORD *)(a1 + 20) = v7 & 0xC0000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
  {
    if (a5)
      v9 = (uint64_t *)(a5 + 24);
    else
      v9 = (uint64_t *)(a4 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a4 + 72, (_QWORD *)a1);
    v10 = *v9;
    *(_QWORD *)(a1 + 24) = *v9;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *v9 = v8;
  }
  llvm::Value::setName((uint64_t ***)a1, a3);
  return a1;
}

{
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  *(_QWORD *)a1 = *a2 + 1600;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = a1 + 24;
  *(_DWORD *)(a1 + 16) = 22;
  *(_DWORD *)(a1 + 20) = v7 & 0xC0000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 40;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
  {
    if (a5)
      v9 = (uint64_t *)(a5 + 24);
    else
      v9 = (uint64_t *)(a4 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a4 + 72, (_QWORD *)a1);
    v10 = *v9;
    *(_QWORD *)(a1 + 24) = *v9;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *v9 = v8;
  }
  llvm::Value::setName((uint64_t ***)a1, a3);
  return a1;
}

void llvm::BasicBlock::insertInto(llvm::BasicBlock *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  llvm::BasicBlock *v7;
  uint64_t v8;
  char *v9;

  v4 = (uint64_t *)((char *)a2 + 72);
  if (a3)
  {
    v7 = a3;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, this);
    v8 = *((_QWORD *)v7 + 3);
    v7 = (llvm::BasicBlock *)((char *)v7 + 24);
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = v7;
    v9 = (char *)this + 24;
    *(_QWORD *)(v8 + 8) = v9;
    *(_QWORD *)v7 = v9;
  }
  else
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a2 + 72, this);
    v5 = *v4;
    *((_QWORD *)this + 3) = *v4;
    *((_QWORD *)this + 4) = v4;
    v6 = (char *)this + 24;
    *(_QWORD *)(v5 + 8) = v6;
    *v4 = (uint64_t)v6;
  }
}

void llvm::BasicBlock::~BasicBlock(llvm::BasicBlock *this, llvm::LLVMContext *a2)
{
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  llvm::Value *v12;
  llvm::ConstantInt **Int32Ty;
  llvm::ValueHandleBase *v14;
  uint64_t v15;
  llvm::ConstantExpr *v16;
  llvm::Constant **v17;
  llvm::UndefValue *IntToPtr;

  if ((*((_WORD *)this + 9) & 0x7FFF) != 0)
  {
    Int32Ty = (llvm::ConstantInt **)llvm::Type::getInt32Ty(**(llvm::Type ***)this, a2);
    v14 = llvm::ConstantInt::get(Int32Ty, 1, 0);
    v15 = *((_QWORD *)this + 1);
    if (v15)
    {
      v16 = v14;
      do
      {
        v17 = *(llvm::Constant ***)(v15 + 24);
        IntToPtr = llvm::ConstantExpr::getIntToPtr(v16, *v17, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v17, IntToPtr, (llvm::Value *)1);
        llvm::Constant::destroyConstant((int32x2_t ****)v17);
        v15 = *((_QWORD *)this + 1);
      }
      while (v15);
    }
  }
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (char *)this + 40;
  if (v3 != (_QWORD *)((char *)this + 40))
  {
    while (1)
    {
      if (v3)
        v5 = v3 - 3;
      else
        v5 = 0;
      v6 = *((_DWORD *)v5 + 5);
      if ((v6 & 0x40000000) != 0)
      {
        v8 = (_QWORD *)*(v5 - 1);
        v7 = v6 & 0x7FFFFFF;
        if (v7)
        {
LABEL_8:
          v9 = 32 * v7;
          v10 = (_QWORD **)(v8 + 2);
          do
          {
            if (*(v10 - 2))
            {
              **v10 = *(v10 - 1);
              v11 = (uint64_t)*(v10 - 1);
              if (v11)
                *(_QWORD *)(v11 + 16) = *v10;
            }
            *(v10 - 2) = 0;
            v10 += 4;
            v9 -= 32;
          }
          while (v9);
        }
      }
      else
      {
        v7 = v6 & 0x7FFFFFF;
        v8 = &v5[-4 * v7];
        if (v7)
          goto LABEL_8;
      }
      v3 = (_QWORD *)v3[1];
      if (v3 == (_QWORD *)((char *)this + 40))
      {
        v4 = (char *)*((_QWORD *)this + 6);
        break;
      }
    }
  }
  sub_1C52DC3F0((uint64_t)this + 40, (uint64_t)v4, (uint64_t)this + 40);
  sub_1C52DC3F0((uint64_t)this + 40, *((_QWORD *)this + 6), (uint64_t)this + 40);
  llvm::Value::~Value(this, v12);
}

uint64_t llvm::BasicBlock::dropAllReferences(uint64_t this)
{
  uint64_t i;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;

  for (i = *(_QWORD *)(this + 48); i != this + 40; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v2 = i - 24;
    else
      v2 = 0;
    v3 = *(_DWORD *)(v2 + 20);
    if ((v3 & 0x40000000) != 0)
    {
      v5 = *(_QWORD *)(v2 - 8);
      v4 = v3 & 0x7FFFFFF;
      if (!v4)
        continue;
    }
    else
    {
      v4 = v3 & 0x7FFFFFF;
      v5 = v2 - 32 * v4;
      if (!v4)
        continue;
    }
    v6 = 32 * v4;
    v7 = (_QWORD **)(v5 + 16);
    do
    {
      if (*(v7 - 2))
      {
        **v7 = *(v7 - 1);
        v8 = (uint64_t)*(v7 - 1);
        if (v8)
          *(_QWORD *)(v8 + 16) = *v7;
      }
      *(v7 - 2) = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return this;
}

void llvm::BasicBlock::setParent(llvm::BasicBlock *this, llvm::Function *a2)
{
  uint64_t v2;
  llvm::ValueSymbolTable *v3;
  uint64_t v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  size_t v18;
  int v19;
  size_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t i;
  llvm::Value *v31;
  llvm::ValueSymbolTable *v32;
  llvm::ValueSymbolTable *v34;
  char *v35;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    v34 = *(llvm::ValueSymbolTable **)(v2 + 104);
  else
    v34 = 0;
  *((_QWORD *)this + 7) = a2;
  if (a2)
    v3 = (llvm::ValueSymbolTable *)*((_QWORD *)a2 + 13);
  else
    v3 = 0;
  if (v34 != v3)
  {
    v35 = (char *)this + 40;
    if (*((llvm::BasicBlock **)this + 5) != (llvm::BasicBlock *)((char *)this + 40))
    {
      v32 = v3;
      if (v34)
      {
        v4 = *((_QWORD *)this + 6);
        if ((char *)v4 != v35)
        {
          while (1)
          {
            v5 = (uint64_t ***)(v4 - 24);
            if (!v4)
              v5 = 0;
            if ((*((_BYTE *)v5 + 23) & 0x10) != 0)
              break;
LABEL_14:
            v4 = *(_QWORD *)(v4 + 8);
            if ((char *)v4 == v35)
              goto LABEL_37;
          }
          v6 = ***v5;
          v7 = *(_QWORD *)(v6 + 152);
          v8 = *(unsigned int *)(v6 + 168);
          if ((_DWORD)v8)
          {
            LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
            v10 = (uint64_t ****)(v7 + 16 * v9);
            v11 = *v10;
            if (*v10 == v5)
              goto LABEL_22;
            v12 = 1;
            while (v11 != (uint64_t ***)-4096)
            {
              v13 = v9 + v12++;
              v9 = v13 & (v8 - 1);
              v11 = *(uint64_t ****)(v7 + 16 * v9);
              if (v11 == v5)
              {
                v10 = (uint64_t ****)(v7 + 16 * v9);
                goto LABEL_22;
              }
            }
          }
          v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_22:
          v14 = *((unsigned int *)v34 + 2);
          if ((_DWORD)v14)
          {
            v15 = (size_t *)v10[1];
            v16 = *((unsigned int *)v34 + 5);
            v17 = (unsigned __int8 *)v15 + v16;
            v18 = *v15;
            if (*v15)
            {
              v19 = 0;
              v20 = *v15;
              v21 = v17;
              do
              {
                v22 = *v21++;
                v19 = 33 * v19 + v22;
                --v20;
              }
              while (v20);
            }
            else
            {
              v19 = 0;
            }
            v23 = v14 - 1;
            v24 = *(_QWORD *)v34;
            v25 = *(_QWORD *)v34 + 8 * v14 + 8;
            v26 = 1;
            v27 = v19;
            while (1)
            {
              v28 = v27 & v23;
              v29 = *(_QWORD **)(v24 + 8 * v28);
              if (v29 != (_QWORD *)-8)
              {
                if (!v29)
                  goto LABEL_14;
                if (*(_DWORD *)(v25 + 4 * v28) == v19 && v18 == *v29 && (!v18 || !memcmp(v17, (char *)v29 + v16, v18)))
                  break;
              }
              v27 = v26 + v28;
              ++v26;
            }
            *(_QWORD *)(v24 + 8 * (int)v28) = -8;
            *(int32x2_t *)((char *)v34 + 12) = vadd_s32(*(int32x2_t *)((char *)v34 + 12), (int32x2_t)0x1FFFFFFFFLL);
          }
          goto LABEL_14;
        }
      }
LABEL_37:
      if (v32)
      {
        for (i = *((_QWORD *)this + 6); (char *)i != v35; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v31 = (llvm::Value *)(i - 24);
          else
            v31 = 0;
          if ((*((_BYTE *)v31 + 23) & 0x10) != 0)
            llvm::ValueSymbolTable::reinsertValue(v32, v31);
        }
      }
    }
  }
}

void sub_1C534F4D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::ValueSymbolTable *v7;
  _QWORD *i;
  llvm::Value *v9;
  size_t *ValueName;
  _QWORD *j;
  llvm::Value *v12;

  v4 = a1[2];
  if (v4)
    v5 = *(uint64_t **)(v4 + 104);
  else
    v5 = 0;
  *a2 = a3;
  v6 = a1[2];
  if (v6)
    v7 = *(llvm::ValueSymbolTable **)(v6 + 104);
  else
    v7 = 0;
  if (v5 != (uint64_t *)v7 && (_QWORD *)*a1 != a1)
  {
    if (v5)
    {
      for (i = (_QWORD *)a1[1]; i != a1; i = (_QWORD *)i[1])
      {
        if (i)
          v9 = (llvm::Value *)(i - 3);
        else
          v9 = 0;
        if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
        {
          ValueName = (size_t *)llvm::Value::getValueName(v9);
          llvm::ValueSymbolTable::removeValueName(v5, ValueName);
        }
      }
    }
    if (v7)
    {
      for (j = (_QWORD *)a1[1]; j != a1; j = (_QWORD *)j[1])
      {
        if (j)
          v12 = (llvm::Value *)(j - 3);
        else
          v12 = 0;
        if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
          llvm::ValueSymbolTable::reinsertValue(v7, v12);
      }
    }
  }
}

uint64_t (***llvm::BasicBlock::instructionsWithoutDebug@<X0>(llvm::BasicBlock *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>))()
{
  void (**v3)(void);
  uint64_t (***result)();
  uint64_t (**v5)(void);
  uint64_t (**v6)();
  char v7;
  uint64_t (***v8)();
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = &v9;
  v8 = &v6;
  v9 = &off_1E814E1C0;
  v6 = &off_1E814E1C0;
  v7 = a2;
  sub_1C6227F30((uint64_t)this, &v6, a3);
  if (v8 == &v6)
  {
    v3 = (void (**)(void))(v6 + 4);
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = (void (**)(void))(*v8 + 5);
  }
  (*v3)();
LABEL_6:
  result = v11;
  if (v11 == &v9)
  {
    v5 = v9 + 4;
  }
  else
  {
    if (!v11)
      return result;
    v5 = *v11 + 5;
  }
  return (uint64_t (***)())(*v5)();
}

uint64_t (***llvm::BasicBlock::instructionsWithoutDebug@<X0>(llvm::BasicBlock *this@<X0>, char a2@<W1>, uint64_t a3@<X8>))()
{
  void (**v3)(void);
  uint64_t (***result)();
  uint64_t (**v5)(void);
  uint64_t (**v6)();
  char v7;
  uint64_t (***v8)();
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = &v9;
  v8 = &v6;
  v9 = &off_1E814E208;
  v6 = &off_1E814E208;
  v7 = a2;
  sub_1C534F76C((uint64_t)this, &v6, a3);
  if (v8 == &v6)
  {
    v3 = (void (**)(void))(v6 + 4);
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = (void (**)(void))(*v8 + 5);
  }
  (*v3)();
LABEL_6:
  result = v11;
  if (v11 == &v9)
  {
    v5 = v9 + 4;
  }
  else
  {
    if (!v11)
      return result;
    v5 = *v11 + 5;
  }
  return (uint64_t (***)())(*v5)();
}

_QWORD *sub_1C534F76C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void (**v14)(_QWORD *);
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t (**v18)(_QWORD *);
  _QWORD v19[3];
  _QWORD *v20;
  __int128 v21;
  _BYTE v22[24];
  _BYTE *v23;
  _QWORD v24[3];
  _QWORD *v25;
  __int128 v26;
  _BYTE v27[24];
  _BYTE *v28;
  __int128 v29;
  _QWORD v30[3];
  _QWORD *v31;
  __int128 v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 40;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (_QWORD *)a2[3];
  if (v7)
  {
    if (v7 == a2)
    {
      v25 = v24;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v24);
    }
    else
    {
      v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v25 = 0;
  }
  sub_1C5352270(&v26, v6, v5, v24);
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v20 = v19;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v19);
    }
    else
    {
      v20 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v20 = 0;
  }
  sub_1C5352270(&v21, v5, v5, v19);
  v32 = v26;
  v9 = v33;
  if (v28)
  {
    if (v28 == v27)
    {
      v34 = v33;
      (*(void (**)(void))(*(_QWORD *)v28 + 24))();
    }
    else
    {
      v34 = v28;
      v28 = 0;
    }
  }
  else
  {
    v34 = 0;
  }
  v29 = v21;
  if (v23)
  {
    if (v23 == v22)
    {
      v31 = v30;
      (*(void (**)(void))(*(_QWORD *)v23 + 24))();
    }
    else
    {
      v31 = v23;
      v23 = 0;
    }
  }
  else
  {
    v31 = 0;
  }
  *(_OWORD *)a3 = v32;
  if (v34)
  {
    if (v34 == v33)
    {
      *(_QWORD *)(a3 + 40) = a3 + 16;
      (*(void (**)(_QWORD *))(v33[0] + 24))(v33);
    }
    else
    {
      *(_QWORD *)(a3 + 40) = v34;
      v34 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 40) = 0;
  }
  *(_OWORD *)(a3 + 48) = v29;
  if (v31)
  {
    if (v31 == v30)
    {
      *(_QWORD *)(a3 + 88) = a3 + 64;
      (*(void (**)(_QWORD *))(v30[0] + 24))(v30);
      if (v31 == v30)
      {
        (*(void (**)(_QWORD *))(v30[0] + 32))(v30);
      }
      else if (v31)
      {
        (*(void (**)(_QWORD *))(*v31 + 40))(v31);
      }
    }
    else
    {
      *(_QWORD *)(a3 + 88) = v31;
      v31 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 88) = 0;
  }
  if (v34 == v33)
  {
    v10 = 4;
LABEL_22:
    (*(void (**)(_QWORD *))(*v9 + 8 * v10))(v9);
    goto LABEL_23;
  }
  if (v34)
  {
    v10 = 5;
    v9 = v34;
    goto LABEL_22;
  }
LABEL_23:
  v11 = v23;
  if (v23 == v22)
  {
    v12 = 4;
    v11 = v22;
LABEL_25:
    (*(void (**)(void))(*v11 + 8 * v12))();
    goto LABEL_26;
  }
  if (v23)
  {
    v12 = 5;
    goto LABEL_25;
  }
LABEL_26:
  v13 = v20;
  if (v20 == v19)
  {
    v14 = (void (**)(_QWORD *))(v19[0] + 32);
    v13 = v19;
LABEL_28:
    (*v14)(v13);
    goto LABEL_29;
  }
  if (v20)
  {
    v14 = (void (**)(_QWORD *))(*v20 + 40);
    goto LABEL_28;
  }
LABEL_29:
  v15 = v28;
  if (v28 == v27)
  {
    v16 = 4;
    v15 = v27;
LABEL_31:
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_32;
  }
  if (v28)
  {
    v16 = 5;
    goto LABEL_31;
  }
LABEL_32:
  result = v25;
  if (v25 == v24)
  {
    v18 = (uint64_t (**)(_QWORD *))(v24[0] + 32);
    result = v24;
    return (_QWORD *)(*v18)(result);
  }
  if (v25)
  {
    v18 = (uint64_t (**)(_QWORD *))(*v25 + 40);
    return (_QWORD *)(*v18)(result);
  }
  return result;
}

uint64_t sub_1C534FAE4(__int128 *a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 *v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  _BYTE v16[24];
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = *a1;
  v4 = v19;
  v5 = (__int128 *)*((_QWORD *)a1 + 5);
  if (v5)
  {
    if (v5 == a1 + 1)
    {
      v20 = v19;
      (*(void (**)(__int128 *, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v19);
    }
    else
    {
      v20 = (_BYTE *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    v20 = 0;
  }
  v15 = *a2;
  v6 = v16;
  v7 = (__int128 *)*((_QWORD *)a2 + 5);
  if (v7)
  {
    if (v7 == a2 + 1)
    {
      v17 = v16;
      (*(void (**)(__int128 *, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v16);
    }
    else
    {
      v17 = (_BYTE *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    v17 = 0;
  }
  v8 = v18;
  v9 = v15;
  if ((_QWORD)v18 == (_QWORD)v15)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v8 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)&v18 = v8;
      if (v8 != *((_QWORD *)&v18 + 1))
      {
        do
        {
          if (!v20)
            sub_1C485C2F0();
          v11 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 48))();
          v8 = v18;
          if ((v11 & 1) != 0)
            break;
          v8 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)&v18 = v8;
        }
        while (v8 != *((_QWORD *)&v18 + 1));
        v9 = v15;
      }
      ++v10;
    }
    while (v8 != v9);
  }
  if (v17 == v16)
  {
    v12 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_26;
    v12 = 5;
    v6 = v17;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v12))(v6);
LABEL_26:
  if (v20 == v19)
  {
    v13 = 4;
    goto LABEL_30;
  }
  if (v20)
  {
    v13 = 5;
    v4 = v20;
LABEL_30:
    (*(void (**)(_QWORD *))(*v4 + 8 * v13))(v4);
  }
  return v10;
}

void llvm::BasicBlock::removeFromParent(llvm::BasicBlock *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;

  v2 = (char *)this + 56;
  v3 = *((_QWORD *)this + 7);
  sub_1C534F4D8((_QWORD *)this + 5, (_QWORD *)this + 7, 0);
  if ((*(v2 - 33) & 0x10) == 0)
    goto LABEL_23;
  v30 = *(uint64_t **)(v3 + 104);
  if (!v30)
    goto LABEL_23;
  v4 = ***(_QWORD ***)this;
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(unsigned int *)(v4 + 168);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((this >> 4) ^ (this >> 9));
    v8 = v5 + 16 * v7;
    v9 = *(llvm::BasicBlock **)v8;
    if (*(llvm::BasicBlock **)v8 == this)
      goto LABEL_9;
    v10 = 1;
    while (v9 != (llvm::BasicBlock *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(llvm::BasicBlock **)(v5 + 16 * v7);
      if (v9 == this)
      {
        v8 = v5 + 16 * v7;
        goto LABEL_9;
      }
    }
  }
  v8 = v5 + 16 * v6;
LABEL_9:
  v12 = *((unsigned int *)v30 + 2);
  if ((_DWORD)v12)
  {
    v13 = *(size_t **)(v8 + 8);
    v14 = *((unsigned int *)v30 + 5);
    v15 = (unsigned __int8 *)v13 + v14;
    v16 = *v13;
    if (*v13)
    {
      v17 = 0;
      v18 = *v13;
      v19 = v15;
      do
      {
        v20 = *v19++;
        v17 = 33 * v17 + v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      v17 = 0;
    }
    v21 = v12 - 1;
    v22 = *v30;
    v23 = *v30 + 8 * v12 + 8;
    v24 = 1;
    v25 = v17;
    while (1)
    {
      v26 = v25 & v21;
      v27 = *(_QWORD **)(v22 + 8 * v26);
      if (v27 != (_QWORD *)-8)
      {
        if (!v27)
          goto LABEL_23;
        if (*(_DWORD *)(v23 + 4 * v26) == v17 && v16 == *v27 && (!v16 || !memcmp(v15, (char *)v27 + v14, v16)))
          break;
      }
      v25 = v24 + v26;
      ++v24;
    }
    *(_QWORD *)(v22 + 8 * (int)v26) = -8;
    *(uint64_t *)((char *)v30 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v30 + 12), (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_23:
  v28 = *((_QWORD *)this + 3);
  v29 = (_QWORD *)*((_QWORD *)this + 4);
  *v29 = v28;
  *(_QWORD *)(v28 + 8) = v29;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
}

uint64_t llvm::BasicBlock::eraseFromParent(llvm::BasicBlock *this)
{
  uint64_t v2;
  char *v3;
  llvm::LLVMContext *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t *v33;

  v3 = (char *)this + 56;
  v2 = *((_QWORD *)this + 7);
  v32 = *((_QWORD *)this + 4);
  sub_1C534F4D8((_QWORD *)this + 5, (_QWORD *)this + 7, 0);
  if ((*(v3 - 33) & 0x10) == 0)
    goto LABEL_23;
  v33 = *(uint64_t **)(v2 + 104);
  if (!v33)
    goto LABEL_23;
  v5 = ***(_QWORD ***)this;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((this >> 4) ^ (this >> 9));
    v9 = v6 + 16 * v8;
    v10 = *(llvm::BasicBlock **)v9;
    if (*(llvm::BasicBlock **)v9 == this)
      goto LABEL_9;
    v11 = 1;
    while (v10 != (llvm::BasicBlock *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(llvm::BasicBlock **)(v6 + 16 * v8);
      if (v10 == this)
      {
        v9 = v6 + 16 * v8;
        goto LABEL_9;
      }
    }
  }
  v9 = v6 + 16 * v7;
LABEL_9:
  v13 = *((unsigned int *)v33 + 2);
  if ((_DWORD)v13)
  {
    v14 = *(size_t **)(v9 + 8);
    v15 = *((unsigned int *)v33 + 5);
    v16 = (unsigned __int8 *)v14 + v15;
    v17 = *v14;
    if (*v14)
    {
      v18 = 0;
      v19 = *v14;
      v20 = v16;
      do
      {
        v21 = *v20++;
        v18 = 33 * v18 + v21;
        --v19;
      }
      while (v19);
    }
    else
    {
      v18 = 0;
    }
    v22 = v13 - 1;
    v23 = *v33;
    v24 = *v33 + 8 * v13 + 8;
    v25 = 1;
    v26 = v18;
    while (1)
    {
      v27 = v26 & v22;
      v28 = *(_QWORD **)(v23 + 8 * v27);
      if (v28 != (_QWORD *)-8)
      {
        if (!v28)
          goto LABEL_23;
        if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v15, v17)))
          break;
      }
      v26 = v25 + v27;
      ++v25;
    }
    *(_QWORD *)(v23 + 8 * (int)v27) = -8;
    *(uint64_t *)((char *)v33 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v33 + 12), (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_23:
  v29 = *((_QWORD *)this + 3);
  v30 = (_QWORD *)*((_QWORD *)this + 4);
  *v30 = v29;
  *(_QWORD *)(v29 + 8) = v30;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  llvm::BasicBlock::~BasicBlock(this, v4);
  MEMORY[0x1CAA32FC0]();
  return v32;
}

void llvm::BasicBlock::moveBefore(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  sub_1C4FCEAA0(*((_QWORD *)a2 + 7) + 72, (uint64_t *)a2 + 3, *((_QWORD *)this + 7) + 72, (uint64_t *)this + 3);
}

void llvm::BasicBlock::moveAfter(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  sub_1C4FCEAA0(*((_QWORD *)a2 + 7) + 72, *((uint64_t **)a2 + 4), *((_QWORD *)this + 7) + 72, (uint64_t *)this + 3);
}

uint64_t llvm::BasicBlock::getModule(llvm::BasicBlock *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 40);
}

uint64_t llvm::BasicBlock::getTerminatingMustTailCall(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v1;
  uint64_t result;
  char *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  _QWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;

  v1 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40))
    return 0;
  result = 0;
  v4 = (char *)v1 - 24;
  if (!v1)
    v4 = 0;
  v5 = v4[16];
  if (v5 != 29)
    v4 = 0;
  if (v1)
    v6 = v5 == 29;
  else
    v6 = 0;
  if (v6)
  {
    v7 = *((_QWORD *)this + 6);
    if (v7)
      v8 = (char *)(v7 - 24);
    else
      v8 = 0;
    if (v4 == v8)
      return 0;
    v9 = (_QWORD **)(v4 + 24);
    if (*(char **)(*((_QWORD *)v4 + 5) + 48) == v4 + 24)
      return 0;
    v10 = *v9;
    if (!*v9)
      return 0;
    v11 = (uint64_t)(v10 - 3);
    v12 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)&v4[-32 * v12];
      if (v13)
      {
        if (v13 != v11)
          return 0;
        if (*((_BYTE *)v10 - 8) == 77)
        {
          if (*(_QWORD **)(v10[2] + 48) == v10)
            return 0;
          result = 0;
          v14 = *(v10 - 7);
          v15 = *v10;
          v11 = v15 - 24;
          if (v15)
            v16 = v15 - 24;
          else
            v16 = 0;
          if (v15)
            v17 = v14 == v16;
          else
            v17 = 0;
          if (!v17)
            return result;
        }
      }
    }
    if (*(_BYTE *)(v11 + 16) == 84)
    {
      result = v11;
      if ((*(_WORD *)(v11 + 18) & 3) == 2)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::BasicBlock::getTerminatingDeoptimizeCall(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v2;
  uint64_t result;
  char *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;

  v2 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (v2 != (llvm::BasicBlock *)((char *)this + 40) && v2 != 0)
  {
    result = 0;
    v5 = (char *)v2 - 24;
    v6 = *((unsigned __int8 *)v2 - 8);
    if (v6 != 29)
      v5 = 0;
    if (v2)
      v7 = v6 == 29;
    else
      v7 = 0;
    if (!v7)
      return result;
    v8 = *((_QWORD *)this + 6);
    if (v8)
      v9 = v8 - 24 == (_QWORD)v5;
    else
      v9 = v6 != 29;
    if (v9)
      return 0;
LABEL_16:
    if (*(char **)(*((_QWORD *)v5 + 5) + 48) != v5 + 24)
    {
      v10 = *((_QWORD *)v5 + 3);
      if (v10)
      {
        if (*(_BYTE *)(v10 - 8) == 84)
        {
          v11 = *(_QWORD *)(v10 - 56);
          if (v11)
          {
            if (!*(_BYTE *)(v11 + 16) && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v10 + 48) && *(_DWORD *)(v11 + 36) == 119)
              return v10 - 24;
          }
        }
      }
    }
    return 0;
  }
  if (v2 == (llvm::BasicBlock *)((char *)this + 40))
    return 0;
  result = 0;
  v5 = (char *)v2 - 24;
  if (!v2)
    v5 = 0;
  v12 = v5[16];
  if (v12 != 29)
    v5 = 0;
  if (v2 && v12 == 29)
  {
    v13 = *((_QWORD *)this + 6);
    if (v13)
      v14 = (char *)(v13 - 24);
    else
      v14 = 0;
    if (v5 == v14)
      return 0;
    goto LABEL_16;
  }
  return result;
}

uint64_t llvm::BasicBlock::getPostdominatingDeoptimizeCall(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v1;
  llvm::BasicBlock *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[64];

  v1 = this;
  v23 = v27;
  v24 = v27;
  v25 = 8;
  v26 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, (uint64_t)this);
  while (1)
  {
    v2 = (llvm::BasicBlock *)*((_QWORD *)v1 + 5);
    if (v2 == (llvm::BasicBlock *)((char *)v1 + 40))
      goto LABEL_33;
    v3 = v2 ? (uint64_t)v2 - 24 : 0;
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v4 == 30)
    {
      v5 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      v6 = (uint64_t *)(v3 - 32);
    }
    else
    {
      v5 = 2;
      switch(*(_BYTE *)(v3 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_53;
        case 0x1F:
          v5 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_36;
        case 0x20:
        case 0x26:
          v5 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_36;
        case 0x21:
          v6 = (uint64_t *)(v3 - 96);
          break;
        case 0x24:
          v5 = *(_WORD *)(v3 + 18) & 1;
          goto LABEL_36;
        case 0x25:
LABEL_53:
          v6 = (uint64_t *)(v3 - 32);
          v5 = 1;
          break;
        case 0x27:
          v5 = *(_DWORD *)(v3 + 80) + 1;
LABEL_36:
          if (!v5)
            goto LABEL_33;
          if (v4 != 31)
            __asm { BR              X15 }
          v20 = *(_DWORD *)(v3 + 20);
          if ((v20 & 0x40000000) != 0)
            v21 = *(_QWORD *)(v3 - 8);
          else
            v21 = v3 - 32 * (v20 & 0x7FFFFFF);
          v6 = (uint64_t *)(v21 + 32);
          break;
        default:
          goto LABEL_15;
      }
    }
    v7 = *v6;
    v8 = v5 - 1;
    if (v8)
      break;
LABEL_43:
    if (!v7)
      goto LABEL_15;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v23, v7);
    v1 = (llvm::BasicBlock *)v7;
    if (!v22)
      goto LABEL_33;
  }
  v9 = 0;
  v10 = *(unsigned __int8 *)(v3 + 16);
  v11 = v3 - 32;
  v12 = 2;
  v13 = 1;
  while (1)
  {
    if (v10 != 30)
      __asm { BR              X2 }
    if (*(_QWORD *)(v3 - 32 - 32 * v13) != v7)
      break;
    ++v13;
    v12 += 2;
    ++v9;
    v11 += 32;
    if (v8 == (_DWORD)v9)
      goto LABEL_43;
  }
LABEL_15:
  v14 = 0;
  if (v4 != 29)
    v3 = 0;
  if (v2 && v4 == 29)
  {
    v16 = *((_QWORD *)v1 + 6);
    if (v16)
      v17 = v16 - 24;
    else
      v17 = 0;
    if (v3 == v17
      || *(_QWORD *)(*(_QWORD *)(v3 + 40) + 48) == v3 + 24
      || (v18 = *(_QWORD *)(v3 + 24)) == 0
      || *(_BYTE *)(v18 - 8) != 84
      || (v19 = *(_QWORD *)(v18 - 56)) == 0
      || *(_BYTE *)(v19 + 16)
      || *(_QWORD *)(v19 + 24) != *(_QWORD *)(v18 + 48)
      || *(_DWORD *)(v19 + 36) != 119)
    {
LABEL_33:
      v14 = 0;
      goto LABEL_19;
    }
    v14 = v18 - 24;
  }
LABEL_19:
  if (v24 != v23)
    free(v24);
  return v14;
}

uint64_t llvm::BasicBlock::getUniqueSuccessor(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v1;
  char *v2;
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  char *v14;

  v1 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40))
    return 0;
  if (v1)
    v2 = (char *)v1 - 24;
  else
    v2 = 0;
  v3 = v2[16];
  if (v3 == 30)
  {
    if ((*((_DWORD *)v2 + 5) & 0x7FFFFFF) == 3)
      v4 = 2;
    else
      v4 = 1;
    v5 = (uint64_t *)(v2 - 32);
  }
  else
  {
    v4 = 2;
    result = 0;
    switch(v2[16])
    {
      case 29:
      case 34:
      case 35:
        return result;
      case 30:
        __break(1u);
        goto LABEL_32;
      case 31:
        v4 = (*((_DWORD *)v2 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_18;
      case 32:
      case 38:
        v4 = (*((_DWORD *)v2 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_18;
      case 33:
        v5 = (uint64_t *)(v2 - 96);
        break;
      case 36:
        v4 = *((_WORD *)v2 + 9) & 1;
        goto LABEL_18;
      case 37:
LABEL_32:
        v5 = (uint64_t *)(v2 - 32);
        v4 = 1;
        break;
      case 39:
        v4 = *((_DWORD *)v2 + 20) + 1;
LABEL_18:
        if (!v4)
          return 0;
        if (v3 != 31)
          return ((uint64_t (*)(_QWORD))((char *)&loc_1C53506F0 + 4 * byte_1C85FCA97[v3 - 32]))(0);
        v13 = *((_DWORD *)v2 + 5);
        if ((v13 & 0x40000000) != 0)
          v14 = (char *)*((_QWORD *)v2 - 1);
        else
          v14 = &v2[-32 * (v13 & 0x7FFFFFF)];
        v5 = (uint64_t *)(v14 + 32);
        break;
      default:
        return 0;
    }
  }
  result = *v5;
  v7 = v4 - 1;
  if (v7)
  {
    v8 = 0;
    v9 = v2[16];
    v10 = 1;
    v11 = 2;
    v12 = v2 - 32;
    while (v9 == 30)
    {
      if (*(_QWORD *)&v2[-32 * v10 - 32] != result)
        return 0;
      ++v10;
      v11 += 2;
      ++v8;
      v12 += 32;
      if (v7 == (_DWORD)v8)
        return result;
    }
    return ((uint64_t (*)(uint64_t, char *, char *))((char *)&loc_1C53506A8 + 4 * byte_1C85FCA9F[v9 - 31]))(result, v12, v2 - 32);
  }
  return result;
}

uint64_t llvm::BasicBlock::getFirstNonPHI(llvm::BasicBlock *this)
{
  char *v1;
  uint64_t i;
  uint64_t result;
  uint64_t v4;

  v1 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v1; i = *(_QWORD *)(i + 8))
  {
    result = i - 24;
    if (i)
      v4 = i - 24;
    else
      v4 = 0;
    if (*(_BYTE *)(v4 + 16) != 83)
      return result;
  }
  return 0;
}

char *llvm::BasicBlock::getFirstNonPHIOrDbg(llvm::BasicBlock *this, int a2)
{
  char *v2;
  char *v3;
  char *v5;
  uint64_t v6;

  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == (char *)this + 40)
    return 0;
  while (1)
  {
    v5 = v3 - 24;
    v6 = v3 ? (uint64_t)(v3 - 24) : 0;
    if (*(_BYTE *)(v6 + 16) != 83 && !sub_1C4D99D08(v6) && (!a2 || !sub_1C509DDB0(v6)))
      break;
    v3 = (char *)*((_QWORD *)v3 + 1);
    if (v3 == v2)
      return 0;
  }
  return v5;
}

char *llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(llvm::BasicBlock *this, int a2)
{
  char *v2;
  char *v3;
  char *v5;
  llvm::Instruction *v6;

  v2 = (char *)this + 40;
  v3 = (char *)*((_QWORD *)this + 6);
  if (v3 == (char *)this + 40)
    return 0;
  while (1)
  {
    v5 = v3 - 24;
    v6 = v3 ? (llvm::Instruction *)(v3 - 24) : 0;
    if (*((_BYTE *)v6 + 16) != 83
      && !sub_1C4D99D08((uint64_t)v6)
      && !llvm::Instruction::isLifetimeStartOrEnd(v6)
      && (!a2 || !sub_1C509DDB0((uint64_t)v6)))
    {
      break;
    }
    v3 = (char *)*((_QWORD *)v3 + 1);
    if (v3 == v2)
      return 0;
  }
  return v5;
}

uint64_t llvm::BasicBlock::getFirstInsertionPt(llvm::BasicBlock *this)
{
  uint64_t result;
  uint64_t i;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  result = (uint64_t)this + 40;
  for (i = *((_QWORD *)this + 6); i != result; i = *(_QWORD *)(i + 8))
  {
    v4 = i - 24;
    if (!i)
      v4 = 0;
    if (*(_BYTE *)(v4 + 16) != 83)
    {
      v5 = *(unsigned __int8 *)(i - 8) - 38;
      v6 = v5 > 0x38;
      v7 = (1 << v5) & 0x100060000000001;
      if (v6 || v7 == 0)
        return i;
      else
        return *(_QWORD *)(i + 8);
    }
  }
  return result;
}

char *llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(llvm::BasicBlock *this)
{
  char *v1;
  char *i;
  char *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  llvm::BasicBlock *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (char *)this + 40;
  for (i = (char *)*((_QWORD *)this + 6); i != v1; i = (char *)*((_QWORD *)i + 1))
  {
    v3 = i - 24;
    if (!i)
      v3 = 0;
    if (v3[16] != 83)
    {
      v4 = *(i - 8) - 38;
      v5 = v4 > 0x38;
      v6 = (1 << v4) & 0x100060000000001;
      if (!v5 && v6 != 0)
        i = (char *)*((_QWORD *)i + 1);
      v8 = *(_QWORD *)(*((_QWORD *)this + 7) + 80);
      if (v8)
        v9 = (llvm::BasicBlock *)(v8 - 24);
      else
        v9 = 0;
      if (v9 == this && i != v1)
      {
        while (1)
        {
          v11 = i ? (uint64_t)(i - 24) : 0;
          if (*(_BYTE *)(v11 + 16) != 59 && !sub_1C4D99D08(v11) && !sub_1C509DDB0(v11))
            break;
          if (i && *(_BYTE *)(v11 + 16) == 59)
          {
            if (*(_BYTE *)(*(_QWORD *)(v11 - 32) + 16) != 16)
              break;
            v12 = *(_QWORD *)(v11 + 40);
            v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
            v14 = v13 ? v13 - 24 : 0;
            if (v12 != v14 || (*(_WORD *)(v11 + 18) & 0x40) != 0)
              break;
          }
          i = (char *)*((_QWORD *)i + 1);
          if (i == v1)
            return v1;
        }
      }
      return i;
    }
  }
  return v1;
}

BOOL llvm::BasicBlock::isEntryBlock(llvm::BasicBlock *this)
{
  uint64_t v1;
  llvm::BasicBlock *v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 7) + 80);
  if (v1)
    v2 = (llvm::BasicBlock *)(v1 - 24);
  else
    v2 = 0;
  return v2 == this;
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  result = *(_QWORD *)(v2 + 40);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      break;
    v7 = *(_QWORD *)(v1 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7)
      v9 = v8 >= 0x1C;
    else
      v9 = 0;
    if (v9 && v8 - 29 <= 0xA)
      return 0;
  }
  return result;
}

uint64_t llvm::BasicBlock::getUniquePredecessor(llvm::BasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v11;
  BOOL v12;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    v4 = v2 && v3 >= 0x1C;
    if (v4 && v3 - 29 < 0xB)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  result = *(_QWORD *)(v2 + 40);
  while (1)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return result;
    v7 = *(_QWORD *)(v1 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7)
      v9 = v8 >= 0x1C;
    else
      v9 = 0;
    if (v9 && v8 - 29 <= 0xA)
    {
LABEL_29:
      if (*(_QWORD *)(v7 + 40) != result)
        return 0;
      while (1)
      {
        v1 = *(_QWORD *)(v1 + 8);
        if (!v1)
          return result;
        v7 = *(_QWORD *)(v1 + 24);
        v11 = *(unsigned __int8 *)(v7 + 16);
        if (v7)
          v12 = v11 >= 0x1C;
        else
          v12 = 0;
        if (v12 && v11 - 29 <= 0xA)
          goto LABEL_29;
      }
    }
  }
}

uint64_t llvm::BasicBlock::hasNPredecessors(llvm::BasicBlock *this, int a2)
{
  uint64_t i;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  for (i = *((_QWORD *)this + 1); i; i = *(_QWORD *)(i + 8))
  {
    v3 = *(_QWORD *)(i + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v5 = v4 >= 0x1C;
    else
      v5 = 0;
    if (v5 && v4 - 29 < 0xB)
      break;
  }
  v10 = i;
  v8 = sub_1C5351E54;
  v9 = 0;
  return sub_1C5350CB4(&v10, &v9, a2, (uint64_t (**)(uint64_t *))&v8);
}

uint64_t sub_1C5350CB4(uint64_t *a1, _QWORD *a2, int a3, uint64_t (**a4)(uint64_t *))
{
  uint64_t v7;
  int v8;
  uint64_t (*v9)(uint64_t *);
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t (*v14)(uint64_t *);
  int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v21;

  v7 = *a1;
  if (a3)
  {
    v8 = a3;
    while (v7 != *a2)
    {
      v9 = *a4;
      v21 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 40);
      v8 -= v9(&v21);
      v7 = *a1;
      do
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          break;
        v10 = *(_QWORD *)(v7 + 24);
        v11 = *(unsigned __int8 *)(v10 + 16);
        v12 = v10 && v11 >= 0x1C;
      }
      while (!v12 || v11 - 29 > 0xA);
      *a1 = v7;
      if (!v8)
        goto LABEL_14;
    }
    return 0;
  }
  else
  {
LABEL_14:
    if (v7 == *a2)
    {
      return 1;
    }
    else
    {
      do
      {
        v14 = *a4;
        v21 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 40);
        v15 = v14(&v21);
        if ((v15 & 1) != 0)
          break;
        v7 = *a1;
        do
        {
          v7 = *(_QWORD *)(v7 + 8);
          if (!v7)
            break;
          v16 = *(_QWORD *)(v7 + 24);
          v17 = *(unsigned __int8 *)(v16 + 16);
          v18 = v16 && v17 >= 0x1C;
        }
        while (!v18 || v17 - 29 > 0xA);
        *a1 = v7;
      }
      while (v7 != *a2);
      return v15 ^ 1u;
    }
  }
}

BOOL llvm::BasicBlock::hasNPredecessorsOrMore(llvm::BasicBlock *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return a2 == 0;
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return a2 == 0;
  }
  result = 1;
  if (a2)
  {
LABEL_13:
    --a2;
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return a2 == 0;
      v8 = *(_QWORD *)(v2 + 24);
      v9 = *(unsigned __int8 *)(v8 + 16);
      if (v8)
        v10 = v9 >= 0x1C;
      else
        v10 = 0;
      if (v10 && v9 - 29 <= 0xA)
      {
        if (a2)
          goto LABEL_13;
        return result;
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::getSingleSuccessor(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v1;
  char *v2;
  int v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  char *v9;

  v1 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40))
    return 0;
  v2 = (char *)v1 - 24;
  if (!v1)
    v2 = 0;
  v3 = v2[16];
  if (v3 == 30)
  {
    if ((*((_DWORD *)v2 + 5) & 0x7FFFFFF) == 3)
      v4 = 2;
    else
      v4 = 1;
    v5 = v2 - 32;
  }
  else
  {
    v4 = 2;
    result = 0;
    switch(v2[16])
    {
      case 29:
      case 34:
      case 35:
        return result;
      case 30:
        __break(1u);
        JUMPOUT(0x1C5350F38);
      case 31:
        v4 = (*((_DWORD *)v2 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_14;
      case 32:
      case 38:
        v4 = (*((_DWORD *)v2 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_14;
      case 33:
        v5 = v2 - 96;
        break;
      case 36:
        v4 = *((_WORD *)v2 + 9) & 1;
        goto LABEL_14;
      case 37:
        v5 = v2 - 32;
        v4 = 1;
        break;
      case 39:
        v4 = *((_DWORD *)v2 + 20) + 1;
LABEL_14:
        if (!v4)
          return 0;
        if (v3 != 31)
          return ((uint64_t (*)(_QWORD))((char *)&loc_1C5350EBC + 4 * byte_1C85FCAB3[v3 - 32]))(0);
        v8 = *((_DWORD *)v2 + 5);
        if ((v8 & 0x40000000) != 0)
          v9 = (char *)*((_QWORD *)v2 - 1);
        else
          v9 = &v2[-32 * (v8 & 0x7FFFFFF)];
        v5 = v9 + 32;
        break;
      default:
        return 0;
    }
  }
  v6 = *(_QWORD *)v5;
  if (v4 == 1)
    return v6;
  else
    return 0;
}

char *llvm::BasicBlock::phis(llvm::BasicBlock **this)
{
  llvm::BasicBlock *v1;
  char *v2;

  if (this[5] == (llvm::BasicBlock *)(this + 5))
    return 0;
  v1 = this[6];
  if (v1)
    v2 = (char *)v1 - 24;
  else
    v2 = 0;
  if (v2[16] == 83)
    return v2;
  else
    return 0;
}

void llvm::BasicBlock::removePredecessor(llvm::BasicBlock *this, llvm::BasicBlock *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  llvm::UndefValue **v18;
  unsigned int v19;
  llvm::UndefValue *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  llvm::UndefValue *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  if (*((llvm::BasicBlock **)this + 5) != (llvm::BasicBlock *)((char *)this + 40))
  {
    v3 = *((_QWORD *)this + 6);
    v4 = v3 - 24;
    v5 = v3 ? v3 - 24 : 0;
    if (*(_BYTE *)(v5 + 16) == 83)
    {
      v7 = a3 ^ 1;
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 1)
        v8 = 1;
      else
        v8 = a3;
      while (1)
      {
        v9 = *(_QWORD *)(v4 + 32);
        v10 = v9 - 24;
        if (!v9)
          v10 = 0;
        v11 = *(unsigned __int8 *)(v10 + 16);
        if (v11 == 83)
          v12 = v10;
        else
          v12 = 0;
        v13 = *(_DWORD *)(v4 + 20);
        v14 = v13 & 0x7FFFFFF;
        if ((v13 & 0x7FFFFFF) != 0)
        {
          v15 = 0;
          while (1)
          {
            v16 = v4 - 32 * v14;
            if ((v13 & 0x40000000) != 0)
              v16 = *(_QWORD *)(v4 - 8);
            if (*(llvm::BasicBlock **)(v16 + 32 * *(unsigned int *)(v4 + 60) + 8 * v15) == a2)
              break;
            if (v14 == ++v15)
              goto LABEL_20;
          }
        }
        else
        {
LABEL_20:
          LODWORD(v15) = -1;
        }
        llvm::PHINode::removeIncomingValue((llvm::PHINode *)v4, v15, v7);
        if ((v8 & 1) != 0)
          goto LABEL_22;
        v17 = *(_DWORD *)(v4 + 20);
        if ((v17 & 0x40000000) != 0)
        {
          v18 = *(llvm::UndefValue ***)(v4 - 8);
          v19 = v17 & 0x7FFFFFF;
        }
        else
        {
          v19 = v17 & 0x7FFFFFF;
          v18 = (llvm::UndefValue **)(v4 - 32 * (v17 & 0x7FFFFFF));
        }
        v20 = *v18;
        v21 = v19 - 1;
        if (v19 != 1)
        {
          v22 = v4 - 32 * v19;
          v23 = 32;
          do
          {
            if ((v17 & 0x40000000) != 0)
              v24 = *(llvm::UndefValue **)(*(_QWORD *)(v4 - 8) + v23);
            else
              v24 = *(llvm::UndefValue **)(v22 + v23);
            if (v24 != v20 && v24 != (llvm::UndefValue *)v4)
            {
              if (v20 != (llvm::UndefValue *)v4)
                goto LABEL_22;
              v25 = v22;
              if ((v17 & 0x40000000) != 0)
                v25 = *(_QWORD *)(v4 - 8);
              v20 = *(llvm::UndefValue **)(v25 + v23);
            }
            v23 += 32;
            --v21;
          }
          while (v21);
        }
        if (v20 != (llvm::UndefValue *)v4)
          break;
        v20 = llvm::UndefValue::get(*(llvm::UndefValue **)v4, v20);
        if (v20)
          goto LABEL_42;
LABEL_22:
        if (v9)
        {
          v4 = v12;
          if (v11 == 83)
            continue;
        }
        return;
      }
      if (!v20)
        goto LABEL_22;
LABEL_42:
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v20, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v4 + 40) + 40, (uint64_t ***)v4);
      v26 = *(_QWORD *)(v4 + 24);
      v27 = *(_QWORD **)(v4 + 32);
      *v27 = v26;
      *(_QWORD *)(v26 + 8) = v27;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v4);
      goto LABEL_22;
    }
  }
}

BOOL llvm::BasicBlock::canSplitPredecessors(llvm::BasicBlock *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (uint64_t *)((char *)this + 48);
  do
  {
    v2 = *v1;
    v3 = v2 - 24;
    if (!v2)
      v3 = 0;
    v4 = *(unsigned __int8 *)(v3 + 16);
    v1 = (uint64_t *)(v2 + 8);
  }
  while (v4 == 83);
  return (v4 - 38) > 0x2A || ((1 << (v4 - 38)) & 0x60000000001) == 0;
}

unint64_t llvm::BasicBlock::isLegalToHoistInto(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v1;
  char *v2;
  unsigned int v3;
  unint64_t result;

  v1 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40))
    return 1;
  if (v1)
    v2 = (char *)v1 - 24;
  else
    v2 = 0;
  v3 = v2[16];
  result = 1;
  if (v3 - 29 <= 0xA && v3 <= 0x26)
    return (0x9FFFFFFFFuLL >> v3) & 1;
  return result;
}

uint64_t llvm::BasicBlock::splitBasicBlock(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  size_t *ValueName;
  llvm::ValueSymbolTable *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;

  if (a4)
    return llvm::BasicBlock::splitBasicBlockBefore((llvm::BasicBlock *)a1, a2, a3);
  v8 = *(_QWORD **)*a1;
  v9 = (_QWORD *)a1[7];
  v10 = (_QWORD *)a1[4];
  v11 = operator new();
  *(_QWORD *)v11 = *v8 + 1600;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = *(_DWORD *)(v11 + 20) & 0xC0000000;
  *(_QWORD *)(v11 + 24) = 0;
  v13 = v11 + 24;
  *(_DWORD *)(v11 + 16) = 22;
  *(_DWORD *)(v11 + 20) = v12;
  v14 = (uint64_t *)(v11 + 40);
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v11 + 40;
  *(_QWORD *)(v11 + 48) = v11 + 40;
  *(_QWORD *)(v11 + 56) = 0;
  if (v9)
  {
    v15 = v10 == v9 + 9 || v10 == 0;
    v16 = v10 - 3;
    if (v15)
      v16 = 0;
    v17 = v16 + 3;
    if (v15)
      v18 = v9 + 9;
    else
      v18 = v17;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v9 + 9), (_QWORD *)v11);
    v19 = *v18;
    *(_QWORD *)(v11 + 24) = *v18;
    *(_QWORD *)(v11 + 32) = v18;
    *(_QWORD *)(v19 + 8) = v13;
    *v18 = v13;
  }
  llvm::Value::setName((uint64_t ***)v11, a3);
  v20 = a2 - 3;
  if (!a2)
    v20 = 0;
  v21 = (unsigned __int8 *)v20[6];
  v42 = v21;
  if (v21)
    llvm::MetadataTracking::track((uint64_t)&v42, v21, 2);
  v22 = a1 + 5;
  if (a1 + 5 != a2 && (uint64_t *)v11 != a1)
  {
    *(_WORD *)(v11 + 18) &= ~0x8000u;
    v23 = *(uint64_t **)(v11 + 56);
    if (v23)
      v23 = (uint64_t *)v23[13];
    v24 = (_QWORD *)a1[7];
    if (v24)
      v25 = (uint64_t *)v24[13];
    else
      v25 = 0;
    if (v23 == v25)
    {
      v26 = a2;
      do
      {
        v27 = v26 - 3;
        if (!v26)
          v27 = 0;
        v27[5] = v11;
        v26 = (uint64_t *)v26[1];
      }
      while (v26 != v22);
    }
    else
    {
      v40 = (llvm::ValueSymbolTable *)v23;
      v36 = a2;
      do
      {
        if (v36)
          v37 = v36 - 3;
        else
          v37 = 0;
        v38 = *((_DWORD *)v37 + 5) & 0x10000000;
        if (v25 && v38)
        {
          ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v37);
          llvm::ValueSymbolTable::removeValueName(v25, ValueName);
        }
        v37[5] = v11;
        if (v40 && v38)
          llvm::ValueSymbolTable::reinsertValue(v40, (llvm::Value *)v37);
        v36 = (uint64_t *)v36[1];
        v22 = a1 + 5;
        v14 = (uint64_t *)(v11 + 40);
      }
      while (v36 != a1 + 5);
    }
    v28 = *v22;
    v29 = *a2;
    *(_QWORD *)(v29 + 8) = v22;
    *v22 = v29;
    v30 = *v14;
    *(_QWORD *)(v28 + 8) = v14;
    *a2 = v30;
    *(_QWORD *)(v30 + 8) = a2;
    *v14 = v28;
  }
  v31 = (char *)operator new(0x60uLL);
  *((_DWORD *)v31 + 13) = *((_DWORD *)v31 + 13) & 0x38000000 | 1;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = v31 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v31 + 32), (llvm::BasicBlock *)v11, (llvm::BasicBlock *)a1);
  v41 = v42;
  if (v42)
    llvm::MetadataTracking::track((uint64_t)&v41, v42, 2);
  v34 = (unsigned __int8 *)*((_QWORD *)v31 + 10);
  v33 = (unsigned __int8 **)(v31 + 80);
  v32 = v34;
  if (v34)
    llvm::MetadataTracking::untrack((uint64_t)v33, v32);
  v35 = v41;
  *v33 = v41;
  if (v35)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v41, v35, (uint64_t)v33);
    v41 = 0;
  }
  llvm::BasicBlock::replaceSuccessorsPhiUsesWith((llvm::BasicBlock *)v11, (llvm::BasicBlock *)a1, (llvm::BasicBlock *)v11);
  if (v42)
    llvm::MetadataTracking::untrack((uint64_t)&v42, v42);
  return v11;
}

uint64_t llvm::BasicBlock::splitBasicBlockBefore(llvm::BasicBlock *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  char *v28;
  unsigned __int8 *v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  int v52;
  size_t *ValueName;
  uint64_t *v54;
  llvm::ValueSymbolTable *v55;
  uint64_t *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;

  v6 = **(_QWORD ***)a1;
  v7 = *((_QWORD *)a1 + 7);
  v8 = operator new();
  *(_QWORD *)v8 = *v6 + 1600;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = *(_DWORD *)(v8 + 20) & 0xC0000000;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = v8 + 24;
  *(_DWORD *)(v8 + 16) = 22;
  *(_DWORD *)(v8 + 20) = v9;
  v11 = (uint64_t *)(v8 + 40);
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v8 + 40;
  *(_QWORD *)(v8 + 48) = v8 + 40;
  *(_QWORD *)(v8 + 56) = 0;
  if (v7)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v7 + 72, (_QWORD *)v8);
    v12 = *((_QWORD *)a1 + 3);
    *(_QWORD *)(v8 + 24) = v12;
    *(_QWORD *)(v8 + 32) = (char *)a1 + 24;
    *(_QWORD *)(v12 + 8) = v10;
    *((_QWORD *)a1 + 3) = v10;
  }
  llvm::Value::setName((uint64_t ***)v8, a3);
  v13 = a2 - 3;
  if (!a2)
    v13 = 0;
  v14 = (unsigned __int8 *)v13[6];
  v58 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v58, v14, 2);
  if (v11 != a2)
  {
    v15 = (uint64_t *)*((_QWORD *)a1 + 6);
    if (v15 != a2)
    {
      *(_WORD *)(v8 + 18) &= ~0x8000u;
      if ((llvm::BasicBlock *)v8 != a1)
      {
        v16 = *(uint64_t **)(v8 + 56);
        if (v16)
          v16 = (uint64_t *)v16[13];
        v17 = (uint64_t *)*((_QWORD *)a1 + 7);
        if (v17)
          v17 = (uint64_t *)v17[13];
        if (v16 == v17)
        {
          v18 = v15;
          do
          {
            v19 = v18 - 3;
            if (!v18)
              v19 = 0;
            v19[5] = v8;
            v18 = (uint64_t *)v18[1];
          }
          while (v18 != a2);
        }
        else
        {
          v55 = (llvm::ValueSymbolTable *)v16;
          v56 = v17;
          v49 = v15;
          v54 = v15;
          do
          {
            v50 = v11;
            if (v49)
              v51 = v49 - 3;
            else
              v51 = 0;
            v52 = *((_DWORD *)v51 + 5) & 0x10000000;
            if (v56 && v52)
            {
              ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v51);
              llvm::ValueSymbolTable::removeValueName(v56, ValueName);
            }
            v51[5] = v8;
            if (v55 && v52)
              llvm::ValueSymbolTable::reinsertValue(v55, (llvm::Value *)v51);
            v49 = (uint64_t *)v49[1];
            v11 = v50;
            v15 = v54;
          }
          while (v49 != a2);
        }
      }
      v20 = *a2;
      v21 = *v15;
      *(_QWORD *)(v21 + 8) = a2;
      *a2 = v21;
      v22 = *v11;
      *(_QWORD *)(v20 + 8) = v11;
      *v15 = v22;
      *(_QWORD *)(v22 + 8) = v15;
      *v11 = v20;
    }
  }
  v23 = *((_QWORD *)a1 + 1);
  if (v23)
  {
    while (1)
    {
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(unsigned __int8 *)(v24 + 16);
      v26 = v24 && v25 >= 0x1C;
      if (v26 && v25 - 29 <= 0xA)
        break;
      v23 = *(_QWORD *)(v23 + 8);
      if (!v23)
        goto LABEL_30;
    }
LABEL_39:
    v34 = *(_QWORD *)(v24 + 40);
    v35 = *(_QWORD *)(v34 + 40);
    if (v35 == v34 + 40)
    {
      v37 = 0;
    }
    else
    {
      if (v35)
        v36 = v35 - 24;
      else
        v36 = 0;
      if (*(unsigned __int8 *)(v36 + 16) - 29 >= 0xB)
        v37 = 0;
      else
        v37 = v36;
    }
    llvm::Instruction::replaceSuccessorWith(v37, a1, (llvm::BasicBlock *)v8);
    for (i = *((_QWORD *)a1 + 6);
          (llvm::BasicBlock *)i != (llvm::BasicBlock *)((char *)a1 + 40) && i && *(_BYTE *)(i - 8) == 83;
          i = *(_QWORD *)(i + 8))
    {
      v39 = *(_DWORD *)(i - 4);
      v40 = v39 & 0x7FFFFFF;
      if ((v39 & 0x7FFFFFF) != 0)
      {
        v41 = 0;
        v42 = 8 * v40;
        do
        {
          v43 = *(_DWORD *)(i - 4);
          if ((v43 & 0x40000000) != 0)
            v44 = *(_QWORD *)(i - 32);
          else
            v44 = i - 24 - 32 * (v43 & 0x7FFFFFF);
          v45 = *(unsigned int *)(i + 36);
          if (*(_QWORD *)(v44 + 32 * v45 + v41) == v34)
            *(_QWORD *)(v44 + 32 * v45 + v41) = v8;
          v41 += 8;
        }
        while (v42 != v41);
      }
    }
    while (1)
    {
      v23 = *(_QWORD *)(v23 + 8);
      if (!v23)
        break;
      v24 = *(_QWORD *)(v23 + 24);
      v46 = *(unsigned __int8 *)(v24 + 16);
      if (v24)
        v47 = v46 >= 0x1C;
      else
        v47 = 0;
      if (v47 && v46 - 29 < 0xB)
        goto LABEL_39;
    }
  }
LABEL_30:
  v28 = (char *)operator new(0x60uLL);
  *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = v28 + 32;
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v28 + 32), a1, (llvm::BasicBlock *)v8);
  v57 = v58;
  if (v58)
    llvm::MetadataTracking::track((uint64_t)&v57, v58, 2);
  v31 = (unsigned __int8 *)*((_QWORD *)v28 + 10);
  v30 = (unsigned __int8 **)(v28 + 80);
  v29 = v31;
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)v30, v29);
  v32 = v57;
  *v30 = v57;
  if (v32)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v57, v32, (uint64_t)v30);
    v57 = 0;
  }
  if (v58)
    llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  return v8;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *((_QWORD *)this + 5);
  result = (uint64_t)this + 40;
  v4 = v5;
  if (v5 != result)
  {
    if (v4)
      v6 = v4 - 24;
    else
      v6 = 0;
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 != 30)
    {
      v8 = 2;
      switch(*(_BYTE *)(v6 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_34;
        case 0x1F:
          v8 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_31;
        case 0x20:
        case 0x26:
LABEL_34:
          v8 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_31;
        case 0x21:
          goto LABEL_9;
        case 0x24:
          v8 = *(_WORD *)(v6 + 18) & 1;
          goto LABEL_31;
        case 0x25:
          v8 = 1;
          goto LABEL_9;
        case 0x27:
          v8 = *(_DWORD *)(v6 + 80) + 1;
LABEL_31:
          if (!v8)
            return result;
          goto LABEL_9;
        default:
          return result;
      }
    }
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
      v8 = 2;
    else
      v8 = 1;
LABEL_9:
    for (i = 0; i != v8; ++i)
    {
      if (v7 != 30)
        __asm { BR              X3 }
      v10 = *(_QWORD *)(v6 - 32 - 32 * i);
      result = v10 + 40;
      for (j = *(_QWORD *)(v10 + 48); j != result && j && *(_BYTE *)(j - 8) == 83; j = *(_QWORD *)(j + 8))
      {
        v12 = *(_DWORD *)(j - 4);
        v13 = v12 & 0x7FFFFFF;
        if ((v12 & 0x7FFFFFF) != 0)
        {
          v14 = 0;
          v15 = 8 * v13;
          do
          {
            v16 = *(_DWORD *)(j - 4);
            if ((v16 & 0x40000000) != 0)
              v17 = *(_QWORD *)(j - 32);
            else
              v17 = j - 24 - 32 * (v16 & 0x7FFFFFF);
            v18 = *(unsigned int *)(j + 36);
            if (*(llvm::BasicBlock **)(v17 + 32 * v18 + v14) == a2)
              *(_QWORD *)(v17 + 32 * v18 + v14) = a3;
            v14 += 8;
          }
          while (v15 != v14);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::BasicBlock::replacePhiUsesWith(uint64_t this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  for (i = *(_QWORD *)(this + 48); i != this + 40 && i && *(_BYTE *)(i - 8) == 83; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_DWORD *)(i - 4);
    v5 = v4 & 0x7FFFFFF;
    if ((v4 & 0x7FFFFFF) != 0)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_DWORD *)(i - 4);
        if ((v8 & 0x40000000) != 0)
          v9 = *(_QWORD *)(i - 32);
        else
          v9 = i - 24 - 32 * (v8 & 0x7FFFFFF);
        v10 = *(unsigned int *)(i + 36);
        if (*(llvm::BasicBlock **)(v9 + 32 * v10 + v6) == a2)
          *(_QWORD *)(v9 + 32 * v10 + v6) = a3;
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return this;
}

uint64_t llvm::BasicBlock::replaceSuccessorsPhiUsesWith(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  return llvm::BasicBlock::replaceSuccessorsPhiUsesWith(this, this, a2);
}

BOOL llvm::BasicBlock::isLandingPad(llvm::BasicBlock *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (uint64_t *)((char *)this + 48);
  do
  {
    v2 = *v1;
    v3 = v2 - 24;
    if (!v2)
      v3 = 0;
    v4 = *(unsigned __int8 *)(v3 + 16);
    v1 = (uint64_t *)(v2 + 8);
  }
  while (v4 == 83);
  return v4 == 94;
}

_QWORD *llvm::BasicBlock::getLandingPadInst(llvm::BasicBlock *this)
{
  _QWORD *i;
  _QWORD *v2;
  _QWORD *v3;

  for (i = (_QWORD *)*((_QWORD *)this + 6); i != (_QWORD *)((char *)this + 40); i = (_QWORD *)i[1])
  {
    v2 = i - 3;
    if (i)
      v3 = i - 3;
    else
      v3 = 0;
    if (*((_BYTE *)v3 + 16) != 83)
      goto LABEL_9;
  }
  v2 = 0;
LABEL_9:
  if (*((_BYTE *)v2 + 16) == 94)
    return v2;
  else
    return 0;
}

unint64_t llvm::BasicBlock::getIrrLoopHeaderWeight(llvm::BasicBlock *this)
{
  llvm::BasicBlock *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  BOOL v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;

  v1 = (llvm::BasicBlock *)*((_QWORD *)this + 5);
  if (v1 == (llvm::BasicBlock *)((char *)this + 40))
  {
    v3 = 0;
  }
  else
  {
    if (v1)
      v2 = (char *)v1 - 24;
    else
      v2 = 0;
    if (v2[16] - 29 >= 0xB)
      v3 = 0;
    else
      v3 = (uint64_t)v2;
  }
  if ((*(_BYTE *)(v3 + 23) & 0x20) == 0)
    goto LABEL_34;
  v4 = ***(_QWORD ***)v3;
  v32 = v3;
  v5 = *(_DWORD *)(v4 + 2496);
  if (!v5)
  {
    v28 = 0;
LABEL_41:
    v9 = sub_1C541AB24(v4 + 2480, (uint64_t)&v32, &v32, v28);
    v29 = v32;
    v9[3] = 0;
    v9[4] = 0;
    *v9 = v29;
    v9[1] = v9 + 3;
    v9[2] = 0x100000000;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(v4 + 2480);
  v7 = v5 - 1;
  v8 = v7 & ((v3 >> 4) ^ (v3 >> 9));
  v9 = (_QWORD *)(v6 + 40 * v8);
  v10 = *v9;
  if (*v9 != v3)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v6 + 40 * v8);
      v10 = *v9;
      if (*v9 == v3)
        goto LABEL_20;
    }
    if (v11)
      v28 = v11;
    else
      v28 = v9;
    goto LABEL_41;
  }
LABEL_20:
  v15 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v15)
    goto LABEL_34;
  v16 = (_QWORD *)(v9[1] + 8);
  v17 = 16 * v15;
  while (*((_DWORD *)v16 - 2) != 24)
  {
    v18 = 0;
    v19 = 0;
    v16 += 2;
    v17 -= 16;
    if (!v17)
      return v19 | v18;
  }
  v18 = *v16;
  if (!*v16)
    goto LABEL_35;
  v20 = (_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8));
  v21 = *(_QWORD *)(*v20 + 8);
  if (*(_QWORD *)v21 != 18
    || ((v22 = *(_QWORD *)(v21 + 24),
         v23 = *(_QWORD *)(v21 + 32),
         v24 = *(unsigned __int16 *)(v21 + 40),
         v22 == 0x6165685F706F6F6CLL)
      ? (v25 = v23 == 0x676965775F726564)
      : (v25 = 0),
        v25 ? (v26 = v24 == 29800) : (v26 = 0),
        !v26))
  {
LABEL_34:
    v18 = 0;
LABEL_35:
    v19 = 0;
    return v19 | v18;
  }
  v30 = *(_QWORD *)(v20[1] + 128);
  v31 = (unint64_t *)(v30 + 24);
  if (*(_DWORD *)(v30 + 32) >= 0x41u)
    v31 = (unint64_t *)*v31;
  v19 = *v31;
  v18 = *v31 & 0xFFFFFFFFFFFFFF00;
  v19 = v19;
  return v19 | v18;
}

uint64_t llvm::skipDebugIntrinsics(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  if (a1)
    v2 = a1 - 24;
  else
    v2 = 0;
  if (sub_1C4D99D08(v2))
  {
    do
    {
      v1 = *(_QWORD *)(v1 + 8);
      if (v1)
        v3 = v1 - 24;
      else
        v3 = 0;
    }
    while (sub_1C4D99D08(v3));
  }
  return v1;
}

uint64_t llvm::BasicBlock::renumberInstructions(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 48);
  if (v1 != this + 40)
  {
    v2 = 0;
    do
    {
      v3 = v1 - 24;
      if (!v1)
        v3 = 0;
      *(_DWORD *)(v3 + 56) = v2++;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1 != this + 40);
  }
  *(_WORD *)(this + 18) |= 0x8000u;
  return this;
}

uint64_t sub_1C5351E54()
{
  return 1;
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(uint64_t a1, _QWORD *a2)
{
  llvm::Value *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t v15;
  size_t *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  size_t v19;
  int v20;
  size_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  llvm::ValueSymbolTable *v31;
  _QWORD *i;
  llvm::Value *v33;
  llvm::ValueSymbolTable *v35;
  uint64_t *v37;
  _QWORD *v38;

  v2 = (llvm::Value *)a2;
  v3 = a2[7];
  if (v3)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = 0;
  a2[7] = a1 - 72;
  if (v4 != *(uint64_t **)(a1 + 32))
  {
    v38 = a2 + 5;
    if ((_QWORD *)a2[5] != a2 + 5)
    {
      v35 = *(llvm::ValueSymbolTable **)(a1 + 32);
      v37 = v4;
      if (v4)
      {
        v5 = (_QWORD *)a2[6];
        if (v5 != v38)
        {
          while (1)
          {
            v6 = (uint64_t ***)(v5 - 3);
            if (!v5)
              v6 = 0;
            if ((*((_BYTE *)v6 + 23) & 0x10) != 0)
              break;
LABEL_11:
            v5 = (_QWORD *)v5[1];
            if (v5 == v38)
              goto LABEL_34;
          }
          v7 = ***v6;
          v8 = *(_QWORD *)(v7 + 152);
          v9 = *(unsigned int *)(v7 + 168);
          if ((_DWORD)v9)
          {
            LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
            v11 = (uint64_t ****)(v8 + 16 * v10);
            v12 = *v11;
            if (*v11 == v6)
              goto LABEL_19;
            v13 = 1;
            while (v12 != (uint64_t ***)-4096)
            {
              v14 = v10 + v13++;
              v10 = v14 & (v9 - 1);
              v12 = *(uint64_t ****)(v8 + 16 * v10);
              if (v12 == v6)
              {
                v11 = (uint64_t ****)(v8 + 16 * v10);
                goto LABEL_19;
              }
            }
          }
          v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_19:
          v15 = *((unsigned int *)v37 + 2);
          if ((_DWORD)v15)
          {
            v16 = (size_t *)v11[1];
            v17 = *((unsigned int *)v37 + 5);
            v18 = (unsigned __int8 *)v16 + v17;
            v19 = *v16;
            if (*v16)
            {
              v20 = 0;
              v21 = *v16;
              v22 = v18;
              do
              {
                v23 = *v22++;
                v20 = 33 * v20 + v23;
                --v21;
              }
              while (v21);
            }
            else
            {
              v20 = 0;
            }
            v24 = v15 - 1;
            v25 = *v37;
            v26 = *v37 + 8 * v15 + 8;
            v27 = 1;
            v28 = v20;
            while (1)
            {
              v29 = v28 & v24;
              v30 = *(_QWORD **)(v25 + 8 * v29);
              if (v30 != (_QWORD *)-8)
              {
                if (!v30)
                  goto LABEL_11;
                if (*(_DWORD *)(v26 + 4 * v29) == v20 && v19 == *v30 && (!v19 || !memcmp(v18, (char *)v30 + v17, v19)))
                  break;
              }
              v28 = v27 + v29;
              ++v27;
            }
            *(_QWORD *)(v25 + 8 * (int)v29) = -8;
            *(uint64_t *)((char *)v37 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v37 + 12), (int32x2_t)0x1FFFFFFFFLL);
          }
          goto LABEL_11;
        }
      }
LABEL_34:
      v2 = (llvm::Value *)a2;
      if (v35)
      {
        for (i = (_QWORD *)a2[6]; i != v38; i = (_QWORD *)i[1])
        {
          if (i)
            v33 = (llvm::Value *)(i - 3);
          else
            v33 = 0;
          if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
            llvm::ValueSymbolTable::reinsertValue(v35, v33);
        }
      }
    }
  }
  if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
  {
    v31 = *(llvm::ValueSymbolTable **)(a1 + 32);
    if (v31)
      llvm::ValueSymbolTable::reinsertValue(v31, v2);
  }
}

void sub_1C53520F4()
{
  JUMPOUT(0x1CAA32FC0);
}

_BYTE *sub_1C5352108(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E814E1C0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1C5352140(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E814E1C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

BOOL sub_1C5352160(uint64_t a1, uint64_t a2)
{
  if (sub_1C4D99D08(a2))
    return 0;
  if (*(_BYTE *)(a1 + 8))
    return !sub_1C509DDB0(a2);
  return 1;
}

void sub_1C53521B4()
{
  JUMPOUT(0x1CAA32FC0);
}

_BYTE *sub_1C53521C8(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E814E208;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1C5352200(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E814E208;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

BOOL sub_1C5352220(uint64_t a1, uint64_t a2)
{
  if (sub_1C4D99D08(a2))
    return 0;
  if (*(_BYTE *)(a1 + 8))
    return !sub_1C509DDB0(a2);
  return 1;
}

_QWORD *sub_1C5352270(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (**v14)(_QWORD *);
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v16);
      v8 = v17;
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      v17 = v8;
    }
    *a1 = a2;
    a1[1] = a3;
    if (v8)
    {
      if (v8 == v16)
      {
        a1[5] = a1 + 2;
        (*(void (**)(_QWORD *))(v16[0] + 24))(v16);
      }
      else
      {
        a1[5] = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
      }
      goto LABEL_7;
    }
  }
  else
  {
    v17 = 0;
    *a1 = a2;
    a1[1] = a3;
  }
  a1[5] = 0;
LABEL_7:
  v9 = *a1;
  v10 = a1[1];
  while (1)
  {
    if (v9 == v10)
    {
LABEL_14:
      v13 = v17;
      if (v17 != v16)
        goto LABEL_24;
      v14 = (void (**)(_QWORD *))(v16[0] + 32);
      v13 = v16;
LABEL_16:
      (*v14)(v13);
      return a1;
    }
    v11 = a1[5];
    if (!v11)
      break;
    if (v9)
      v12 = v9 - 24;
    else
      v12 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v12) & 1) != 0)
      goto LABEL_14;
    v10 = a1[1];
    v9 = *(_QWORD *)(*a1 + 8);
    *a1 = v9;
  }
  sub_1C485C2F0();
LABEL_24:
  if (v13)
  {
    v14 = (void (**)(_QWORD *))(*v13 + 40);
    goto LABEL_16;
  }
  return a1;
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  llvm::ValueSymbolTable *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  size_t *ValueName;
  uint64_t v12;

  if (a1 != a2)
  {
    v6 = a1 - 72;
    v7 = *(llvm::ValueSymbolTable **)(a1 + 32);
    v8 = *(uint64_t **)(a2 + 32);
    if (v7 == (llvm::ValueSymbolTable *)v8)
    {
      while (a3 != a4)
      {
        v12 = a3 - 24;
        if (!a3)
          v12 = 0;
        sub_1C534F4D8((_QWORD *)(v12 + 40), (_QWORD *)(v12 + 56), v6);
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
    else
    {
      while (a3 != a4)
      {
        if (a3)
          v9 = a3 - 24;
        else
          v9 = 0;
        v10 = *(_DWORD *)(v9 + 20) & 0x10000000;
        if (v8 && v10)
        {
          ValueName = (size_t *)llvm::Value::getValueName((llvm::Value *)v9);
          llvm::ValueSymbolTable::removeValueName(v8, ValueName);
        }
        sub_1C534F4D8((_QWORD *)(v9 + 40), (_QWORD *)(v9 + 56), v6);
        if (v7 && v10)
          llvm::ValueSymbolTable::reinsertValue(v7, (llvm::Value *)v9);
        a3 = *(_QWORD *)(a3 + 8);
      }
    }
  }
}

uint64_t sub_1C53524CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 31) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E814E250;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 33) = 257;
  *a1 = result;
  return result;
}

uint64_t sub_1C5352520(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5352560(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C53525B0()
{
  return 0;
}

uint64_t sub_1C53525B8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C53525F8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5352648@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 31) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E814E278;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 33) = 257;
  *a1 = result;
  return result;
}

uint64_t sub_1C535269C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C53526DC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C535272C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)v2 = off_1E814E2A0;
  *a1 = v2;
  return result;
}

uint64_t sub_1C535277C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C53527BC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C535280C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E814E2C8;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 32) = 1;
  *(_BYTE *)(result + 34) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1C5352860(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C53528A0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C53528F0(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

uint64_t sub_1C5352908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E814E2F0;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 32) = 1;
  *(_BYTE *)(result + 34) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_1C535295C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C535299C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E814E318;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C53529EC(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)(a2 + 8) & 0xFFFFFF00) == 256) | 0x100u;
}

void sub_1C5352A04()
{
  _QWORD *v0;

  qword_1ED804330 = (uint64_t)"erlang";
  *(_QWORD *)algn_1ED804338 = 6;
  qword_1ED804350 = (uint64_t)sub_1C53524CC;
  qword_1ED804360 = (uint64_t)&qword_1ED804330;
  v0 = (_QWORD *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail)
    v0 = &llvm::Registry<llvm::GCStrategy>::Head;
  qword_1ED804340 = (uint64_t)"erlang-compatible garbage collector";
  *v0 = &qword_1ED804358;
  qword_1ED804368 = (uint64_t)"ocaml";
  qword_1ED804348 = 35;
  qword_1ED804370 = 5;
  unk_1ED804378 = "ocaml 3.10-compatible GC";
  qword_1ED804380 = 24;
  unk_1ED804388 = sub_1C5352648;
  qword_1ED804398 = (uint64_t)&qword_1ED804368;
  qword_1ED804390 = (uint64_t)&qword_1ED8043C8;
  qword_1ED804358 = (uint64_t)&qword_1ED804390;
  qword_1ED8043A0 = (uint64_t)"shadow-stack";
  qword_1ED8043A8 = 12;
  unk_1ED8043B0 = "Very portable GC for uncooperative code generators";
  qword_1ED8043D8 = (uint64_t)"statepoint-example";
  qword_1ED8043B8 = 50;
  unk_1ED8043C0 = sub_1C535272C;
  qword_1ED8043E0 = 18;
  unk_1ED8043E8 = "an example strategy for statepoint";
  qword_1ED8043F0 = 34;
  unk_1ED8043F8 = sub_1C535280C;
  qword_1ED804408 = (uint64_t)&qword_1ED8043D8;
  qword_1ED804410 = (uint64_t)"coreclr";
  qword_1ED8043C8 = (uint64_t)&qword_1ED804400;
  unk_1ED8043D0 = &qword_1ED8043A0;
  qword_1ED804418 = 7;
  unk_1ED804420 = "CoreCLR-compatible GC";
  qword_1ED804428 = 21;
  unk_1ED804430 = sub_1C5352908;
  qword_1ED804438 = 0;
  qword_1ED804440 = (uint64_t)&qword_1ED804410;
  qword_1ED804400 = &qword_1ED804438;
  llvm::Registry<llvm::GCStrategy>::Tail = (uint64_t)&qword_1ED804438;
}

double llvm::Comdat::Comdat(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a1 + 48;
  *(_QWORD *)(a1 + 24) = a1 + 48;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 32) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = a1 + 48;
  *(_QWORD *)(a1 + 24) = a1 + 48;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 32) = 2;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

double llvm::Comdat::Comdat(llvm::Comdat *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = (char *)this + 48;
  *((_QWORD *)this + 3) = (char *)this + 48;
  *(_QWORD *)&result = 2;
  *((_QWORD *)this + 4) = 2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = (char *)this + 48;
  *((_QWORD *)this + 3) = (char *)this + 48;
  *(_QWORD *)&result = 2;
  *((_QWORD *)this + 4) = 2;
  *((_DWORD *)this + 10) = 0;
  return result;
}

size_t *LLVMGetOrInsertComdat(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return llvm::Module::getOrInsertComdat(a1, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetComdat(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t LLVMGetComdatSelectionKind(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t LLVMSetComdatSelectionKind(uint64_t result, unsigned int a2)
{
  if (a2 <= 4)
    *(_DWORD *)(result + 8) = a2;
  return result;
}

llvm::UndefValue *llvm::ConstantFoldCastInstruction(llvm *this, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  int v5;
  int v7;
  llvm::Type *v9;
  int v10;
  int v11;
  int v12;
  int isEliminableCastPair;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Cast;
  llvm::Constant *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ConstantInt *v21;
  llvm::Value **v22;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  _QWORD **v27;
  uint64_t v28;
  uint64_t v29;
  llvm::FixedVectorType ***v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t Impl;
  _QWORD **v35;
  uint64_t i;
  _WORD v37[4];
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  llvm::FixedVectorType ***v43;
  uint64_t v44;
  _BYTE v45[128];
  _QWORD v46[62];

  v46[2] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get(a3, (llvm::Type *)a2);
  v7 = (int)this;
  if ((v5 - 11) > 1)
  {
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
    {
      v10 = *((unsigned __int8 *)a3 + 8);
      if (v10 != 10 && v7 != 50 && v10 != 11)
        return (llvm::UndefValue *)llvm::Constant::getNullValue(a3, (llvm::Type *)a2);
    }
    v11 = *(unsigned __int8 *)(a2 + 16);
    if (v11 == 5)
    {
      v12 = *(unsigned __int16 *)(a2 + 18);
      if ((v12 - 38) > 0xC)
      {
        if (v7 != 50
          && v12 == 34
          && *(unsigned __int8 *)(a2 + 17) <= 3u
          && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
        {
          v31 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
          v32 = v31 - 1;
          if (v31 == 1)
          {
            v33 = 1;
            return llvm::ConstantExpr::getPointerCast(*(llvm::ConstantExpr **)(a2 - 32 * v33), a3, v9);
          }
          for (i = a2 + 32;
                (llvm::Constant::isNullValue(*(llvm::Constant **)(i - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) & 1) != 0;
                i += 32)
          {
            if (!--v32)
            {
              v33 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
              return llvm::ConstantExpr::getPointerCast(*(llvm::ConstantExpr **)(a2 - 32 * v33), a3, v9);
            }
          }
        }
      }
      else
      {
        isEliminableCastPair = llvm::CastInst::isEliminableCastPair(v12, v7, **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), *(_QWORD *)a2, (uint64_t)a3);
        if (isEliminableCastPair)
          return (llvm::UndefValue *)llvm::ConstantExpr::getCast(isEliminableCastPair);
      }
      v11 = *(unsigned __int8 *)(a2 + 16);
    }
    v14 = v11 == 15 || v11 == 10;
    if (!v14 || (*((_DWORD *)a3 + 2) & 0xFE) != 0x12 || *((_DWORD *)a3 + 8) != *(_DWORD *)(*(_QWORD *)a2 + 32))
      __asm { BR              X11 }
    if (llvm::Constant::getSplatValue((llvm::Constant *)a2, 0))
    {
      v15 = *((unsigned int *)a3 + 8);
      v16 = *((unsigned __int8 *)a3 + 8) == 19;
      Cast = llvm::ConstantExpr::getCast(v7);
      return (llvm::UndefValue *)llvm::ConstantVector::getSplat((llvm::Type *)(v15 | (v16 << 32)), Cast, v18);
    }
    else
    {
      v43 = (llvm::FixedVectorType ***)v45;
      v44 = 0x1000000000;
      v19 = *(unsigned int *)(*(_QWORD *)a2 + 32);
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = (llvm::ConstantInt *)(***(_QWORD ***)a2 + 1960);
        do
        {
          v22 = llvm::ConstantInt::get(v21, v20, 0);
          if (!llvm::ConstantFoldExtractElementInstruction((llvm *)a2, (llvm::Constant *)v22, v23))
          {
            v27 = *(_QWORD ***)a2;
            v28 = *(_QWORD *)(*(_QWORD *)a2 + 24);
            if (v28)
            {
              v46[0] = a2;
              v46[1] = v22;
              v29 = **v27 + 1512;
              v37[0] = 61;
              v37[1] = 0;
              v38 = v46;
              v39 = 2;
              v40 = 0u;
              v41 = 0u;
              v42 = 0;
              sub_1C537D4FC(v29, v28, (unsigned __int8 *)v37);
            }
          }
          v24 = llvm::ConstantExpr::getCast(v7);
          v25 = v44;
          if (v44 >= (unint64_t)HIDWORD(v44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v44 + 1, 8);
            v25 = v44;
          }
          v43[v25] = (llvm::FixedVectorType **)v24;
          v26 = (llvm::Type *)(v44 + 1);
          LODWORD(v44) = v44 + 1;
          ++v20;
        }
        while (v19 != v20);
        v30 = v43;
      }
      else
      {
        v26 = 0;
        v30 = (llvm::FixedVectorType ***)v45;
      }
      Impl = (uint64_t)llvm::ConstantVector::getImpl(v30, (llvm::Type *)v26);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v30, v26);
        Impl = sub_1C537B3A4(**v35 + 1288, (uint64_t)v35, v30, v26);
      }
      if (v43 != (llvm::FixedVectorType ***)v45)
        free(v43);
      return (llvm::UndefValue *)Impl;
    }
  }
  if (this <= 0x2C && ((1 << (char)this) & 0x198000000000) != 0)
    return (llvm::UndefValue *)llvm::Constant::getNullValue(a3, (llvm::Type *)a2);
  return llvm::UndefValue::get(a3, (llvm::Type *)a2);
}

void sub_1C5353BD4()
{
  JUMPOUT(0x1C5353060);
}

void sub_1C5353BE4()
{
  JUMPOUT(0x1C5353060);
}

void sub_1C5353BF4()
{
  JUMPOUT(0x1C5353060);
}

void sub_1C5353C04()
{
  JUMPOUT(0x1C5353060);
}

void sub_1C5353C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  llvm::detail::DoubleAPFloat::DoubleAPFloat((uint64_t *)va, (uint64_t)&unk_1C866F1C0, v11 + 24);
  JUMPOUT(0x1C5353870);
}

llvm::Value **sub_1C5353C64(llvm::ValueHandleBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  signed int v8;
  unint64_t v9;
  unsigned int v10;
  llvm::ValueHandleBase *v11;
  int v12;
  int v13;
  llvm::ValueHandleBase **v14;
  llvm::ConstantInt *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  llvm::Value **v19;
  llvm::Constant *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  BOOL v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  llvm::Constant *v39;
  llvm::ConstantExpr *v40;
  llvm::Constant *v41;
  llvm::Constant *v42;
  uint64_t v44;
  unsigned int v45;
  llvm::APInt *v46;
  _QWORD *v47;
  llvm::Constant *v48;
  unint64_t v49;
  size_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  const llvm::APInt *v83;
  _QWORD *v84;
  llvm::Constant *v85;
  llvm::ConstantExpr *v86;
  llvm::Constant *v87;
  llvm::Constant *v88;
  llvm::Value **NullValue;
  _DWORD *v90;
  int v91;
  _DWORD *v92;
  _DWORD *v93;
  _QWORD *v94;
  int v95;
  _DWORD *v96;
  int v97;
  int v98;
  llvm::APInt *v99;
  int v100;
  int v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unsigned int v105;

  v6 = (8 * a2);
  v7 = v6;
  v8 = 8 * a3;
  v9 = (a3 + a2);
  v10 = 8 * v9;
  do
  {
    v11 = a1;
    v12 = *((unsigned __int8 *)a1 + 16);
    if (v12 != 5)
    {
      if (v12 != 16)
        return 0;
      v31 = *((unsigned int *)a1 + 8);
      v105 = v31;
      if (v31 > 0x40)
      {
        v49 = v31 + 63;
        v50 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
        v51 = (void *)operator new[]();
        memcpy(v51, *((const void **)v11 + 3), v50);
        v104 = (unint64_t)v51;
        if ((_DWORD)a2)
          llvm::APInt::tcShiftRight((llvm::APInt *)v51, (unint64_t *)(v49 >> 6), v7);
      }
      else
      {
        v32 = *((_QWORD *)a1 + 3);
        v104 = v32;
        if ((_DWORD)a2)
        {
          if ((_DWORD)v31 == (_DWORD)v6)
            v104 = 0;
          else
            v104 = v32 >> v6;
        }
      }
      llvm::APInt::trunc((llvm::APInt *)&v104, v8, (llvm::APInt *)&v102);
      if (v105 >= 0x41 && v104)
        MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
      v104 = v102;
      v105 = v103;
      a1 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v11, (llvm::LLVMContext *)&v104, v83);
      if (v105 < 0x41 || !v104)
        return (llvm::Value **)a1;
LABEL_139:
      MEMORY[0x1CAA32F9C]();
      return (llvm::Value **)a1;
    }
    v13 = *((unsigned __int16 *)a1 + 9);
    if (v13 != 39)
    {
      a1 = 0;
      switch(v13)
      {
        case 25:
          v22 = (_QWORD *)((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
          if (v22)
            v23 = *((_BYTE *)v22 + 16) == 16;
          else
            v23 = 0;
          if (!v23)
            return 0;
          v24 = *((unsigned int *)v22 + 8);
          if (v24 < 0x41)
          {
            v25 = v22[3];
            if ((v25 & 7) != 0)
              return 0;
            v26 = v25 >> 3;
            if ((_DWORD)v24 == 3)
              v27 = 0;
            else
              v27 = v26;
            v28 = v27;
            if (v27 >= v9)
              goto LABEL_112;
            goto LABEL_30;
          }
          v100 = *((_DWORD *)v22 + 8);
          v52 = v24 + 63;
          v53 = (unint64_t)(v24 + 63) >> 3;
          v54 = (void *)operator new[]();
          memcpy(v54, (const void *)v22[3], v53 & 0x3FFFFFF8);
          v55 = (_QWORD *)operator new[]();
          v99 = (llvm::APInt *)v54;
          memcpy(v55, v54, v53 & 0x3FFFFFF8);
          v56 = *v55 & 7;
          *v55 = v56;
          bzero(v55 + 1, ((_DWORD)v53 - 8) & 0xFFFFFFF8);
          v57 = 0;
          v58 = v52 >> 6;
          v59 = v52 >> 6;
          do
          {
            v18 = v59-- < 1;
            if (v18)
              break;
            v60 = v55[v59];
            v57 += __clz(v60);
          }
          while (!v60);
          LODWORD(v24) = v100;
          if ((v100 & 0x3F) != 0)
            v61 = v100 | 0xFFFFFFC0;
          else
            v61 = 0;
          v62 = v55;
          if (v100 - v57 - v61 >= 0x41)
            goto LABEL_103;
          MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
          if (v56)
            goto LABEL_104;
          v27 = (unint64_t)v99;
          llvm::APInt::tcShiftRight(v99, (unint64_t *)v58, 3u);
          v63 = 0;
          v64 = v58;
          do
          {
            v18 = v64-- < 1;
            if (v18)
              break;
            v65 = *((_QWORD *)v99 + v64);
            v63 += __clz(v65);
          }
          while (!v65);
          if (v100 - (v61 + v63) < 0x41)
          {
            v28 = *(_QWORD *)v99;
            if (*(_QWORD *)v99 < v9)
            {
              v66 = 0;
              do
              {
                v18 = v58-- < 1;
                if (v18)
                  break;
                v67 = *((_QWORD *)v99 + v58);
                v66 += __clz(v67);
              }
              while (!v67);
              if (v100 - (v61 + v66) > 0x40)
                goto LABEL_49;
LABEL_30:
              if (v28 > a2)
                goto LABEL_49;
              v29 = (_QWORD *)*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
              v30 = (a2 - v28);
              goto LABEL_130;
            }
          }
          goto LABEL_112;
        case 26:
          v33 = (_QWORD *)((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
          if (v33)
            v34 = *((_BYTE *)v33 + 16) == 16;
          else
            v34 = 0;
          if (!v34)
            return 0;
          v35 = *(_DWORD *)(*(_QWORD *)v11 + 8) >> 11;
          v24 = *((unsigned int *)v33 + 8);
          if (v24 < 0x41)
          {
            v36 = v33[3];
            if ((v36 & 7) != 0)
              return 0;
            v37 = v36 >> 3;
            if ((_DWORD)v24 == 3)
              v27 = 0;
            else
              v27 = v37;
            v38 = v27;
            if (v27 < (v35 - a2))
            {
LABEL_48:
              if (v38 > (v35 - v9))
              {
LABEL_49:
                a1 = 0;
                goto LABEL_137;
              }
              v29 = (_QWORD *)*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
              v30 = (v38 + a2);
LABEL_130:
              NullValue = (llvm::Value **)sub_1C5353C64(v29, v30, a3);
              goto LABEL_136;
            }
            goto LABEL_112;
          }
          v98 = *(_DWORD *)(*(_QWORD *)v11 + 8) >> 11;
          v101 = *((_DWORD *)v33 + 8);
          v68 = v24 + 63;
          v69 = (unint64_t)(v24 + 63) >> 3;
          v70 = (void *)operator new[]();
          memcpy(v70, (const void *)v33[3], v69 & 0x3FFFFFF8);
          v71 = (_QWORD *)operator new[]();
          v99 = (llvm::APInt *)v70;
          memcpy(v71, v70, v69 & 0x3FFFFFF8);
          v72 = *v71 & 7;
          *v71 = v72;
          bzero(v71 + 1, ((_DWORD)v69 - 8) & 0xFFFFFFF8);
          v73 = 0;
          v74 = v68 >> 6;
          v75 = v68 >> 6;
          do
          {
            v18 = v75-- < 1;
            if (v18)
              break;
            v76 = v71[v75];
            v73 += __clz(v76);
          }
          while (!v76);
          LODWORD(v24) = v101;
          if ((v101 & 0x3F) != 0)
            v77 = v101 | 0xFFFFFFC0;
          else
            v77 = 0;
          v62 = v71;
          if (v101 - v73 - v77 >= 0x41)
          {
LABEL_103:
            MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
          }
          else
          {
            MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
            if (!v72)
            {
              v27 = (unint64_t)v99;
              llvm::APInt::tcShiftRight(v99, (unint64_t *)v74, 3u);
              v78 = 0;
              v35 = v98;
              v79 = v74;
              do
              {
                v18 = v79-- < 1;
                if (v18)
                  break;
                v80 = *((_QWORD *)v99 + v79);
                v78 += __clz(v80);
              }
              while (!v80);
              if (v101 - (v77 + v78) < 0x41)
              {
                v38 = *(_QWORD *)v99;
                if (*(_QWORD *)v99 < (unint64_t)(v98 - a2))
                {
                  v81 = 0;
                  do
                  {
                    v18 = v74-- < 1;
                    if (v18)
                      break;
                    v82 = *((_QWORD *)v99 + v74);
                    v81 += __clz(v82);
                  }
                  while (!v82);
                  if (v101 - (v77 + v81) > 0x40)
                    goto LABEL_49;
                  goto LABEL_48;
                }
              }
LABEL_112:
              v84 = **(_QWORD ***)v11;
              LODWORD(v104) = v8;
              if (v8 <= 63)
              {
                switch(v8)
                {
                  case 32:
                    v85 = (llvm::Constant *)(*v84 + 1960);
                    goto LABEL_135;
                  case 16:
                    v85 = (llvm::Constant *)(*v84 + 1936);
                    goto LABEL_135;
                  case 8:
                    v85 = (llvm::Constant *)(*v84 + 1912);
                    goto LABEL_135;
                }
              }
              else
              {
                if (v8 == 64)
                {
                  v85 = (llvm::Constant *)(*v84 + 1984);
LABEL_135:
                  NullValue = llvm::Constant::getNullValue(v85, (llvm::Type *)v6);
LABEL_136:
                  a1 = (llvm::ValueHandleBase *)NullValue;
                  goto LABEL_137;
                }
                if (v8 == 128)
                {
                  v85 = (llvm::Constant *)(*v84 + 2008);
                  goto LABEL_135;
                }
              }
              v96 = sub_1C5270984(*v84 + 2168, &v104);
              v85 = (llvm::Constant *)*((_QWORD *)v96 + 1);
              if (!v85)
              {
                v85 = (llvm::Constant *)sub_1C484358C(*v84 + 2040, 24, 3);
                v97 = v104;
                *(_QWORD *)v85 = v84;
                *((_QWORD *)v85 + 2) = 0;
                *((_QWORD *)v85 + 1) = (v97 << 8) | 0xDu;
                *((_QWORD *)v96 + 1) = v85;
              }
              goto LABEL_135;
            }
          }
LABEL_104:
          a1 = 0;
          v27 = (unint64_t)v99;
LABEL_137:
          if (v24 < 0x41 || !v27)
            return (llvm::Value **)a1;
          goto LABEL_139;
        case 28:
          v39 = (llvm::Constant *)sub_1C5353C64(((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4], a2, a3);
          a1 = v39;
          if (!v39 || (llvm::Constant::isNullValue(v39) & 1) != 0)
            return (llvm::Value **)a1;
          v40 = (llvm::ConstantExpr *)sub_1C5353C64(*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)), a2, a3);
          if (!v40)
            return 0;
          return (llvm::Value **)llvm::ConstantExpr::getAnd(v40, a1, v41, v42);
        case 29:
          v44 = sub_1C5353C64(((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4], a2, a3);
          a1 = (llvm::ValueHandleBase *)v44;
          if (!v44)
            return (llvm::Value **)a1;
          if (*(_BYTE *)(v44 + 16) != 16)
            goto LABEL_118;
          v45 = *(_DWORD *)(v44 + 32);
          if (!v45)
            return (llvm::Value **)a1;
          v46 = (llvm::APInt *)(v44 + 24);
          if (v45 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(v46) == v45)
              return (llvm::Value **)a1;
          }
          else if (*(_QWORD *)v46 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v45)
          {
            return (llvm::Value **)a1;
          }
LABEL_118:
          v86 = (llvm::ConstantExpr *)sub_1C5353C64(*((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)), a2, a3);
          if (!v86)
            return 0;
          return (llvm::Value **)llvm::ConstantExpr::getOr(v86, a1, v87, v88);
        default:
          return (llvm::Value **)a1;
      }
    }
    v14 = (llvm::ValueHandleBase **)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
    a1 = *v14;
    v15 = *(llvm::ConstantInt **)*v14;
    v16 = *((_DWORD *)v15 + 2);
    if (v6 >= v16 >> 8)
    {
      v47 = **(_QWORD ***)v11;
      LODWORD(v104) = 8 * a3;
      if (v8 <= 63)
      {
        switch(v8)
        {
          case 32:
            v48 = (llvm::Constant *)(*v47 + 1960);
            return llvm::Constant::getNullValue(v48, (llvm::Type *)v6);
          case 16:
            v48 = (llvm::Constant *)(*v47 + 1936);
            return llvm::Constant::getNullValue(v48, (llvm::Type *)v6);
          case 8:
            v48 = (llvm::Constant *)(*v47 + 1912);
            return llvm::Constant::getNullValue(v48, (llvm::Type *)v6);
        }
      }
      else
      {
        if (v8 == 64)
        {
          v48 = (llvm::Constant *)(*v47 + 1984);
          return llvm::Constant::getNullValue(v48, (llvm::Type *)v6);
        }
        if (v8 == 128)
        {
          v48 = (llvm::Constant *)(*v47 + 2008);
          return llvm::Constant::getNullValue(v48, (llvm::Type *)v6);
        }
      }
      v90 = sub_1C5270984(*v47 + 2168, &v104);
      v48 = (llvm::Constant *)*((_QWORD *)v90 + 1);
      if (!v48)
      {
        v48 = (llvm::Constant *)sub_1C484358C(*v47 + 2040, 24, 3);
        v91 = v104;
        *(_QWORD *)v48 = v47;
        *((_QWORD *)v48 + 2) = 0;
        *((_QWORD *)v48 + 1) = (v91 << 8) | 0xDu;
        *((_QWORD *)v90 + 1) = v48;
      }
      return llvm::Constant::getNullValue(v48, (llvm::Type *)v6);
    }
    v17 = v16 >> 8;
    if (!(_DWORD)a2 && v8 == v17)
      return (llvm::Value **)a1;
    v18 = (v16 & 0x700) != 0 || v10 > v17;
  }
  while (!v18);
  if (v10 >= v17)
    return 0;
  if ((_DWORD)a2)
  {
    v19 = llvm::ConstantInt::get(v15, v6, 0);
    llvm::ConstantExpr::getLShr(a1, (llvm::Constant *)v19, 0, v20);
  }
  v21 = **(_QWORD ***)v11;
  LODWORD(v104) = v8;
  if (v8 > 63)
  {
    if (v8 == 64 || v8 == 128)
      return (llvm::Value **)sub_1C537D3B8(38);
LABEL_147:
    v92 = sub_1C5270984(*v21 + 2168, &v104);
    if (!*((_QWORD *)v92 + 1))
    {
      v93 = v92;
      v94 = (_QWORD *)sub_1C484358C(*v21 + 2040, 24, 3);
      v95 = v104;
      *v94 = v21;
      v94[2] = 0;
      v94[1] = (v95 << 8) | 0xDu;
      *((_QWORD *)v93 + 1) = v94;
    }
    return (llvm::Value **)sub_1C537D3B8(38);
  }
  if (v8 != 32 && v8 != 16 && v8 != 8)
    goto LABEL_147;
  return (llvm::Value **)sub_1C537D3B8(38);
}

llvm::Constant *llvm::ConstantFoldSelectInstruction(llvm *this, llvm::PoisonValue **a2, llvm::PoisonValue **a3, llvm::Constant *a4)
{
  llvm::Type *v7;
  llvm::Type *v8;
  BOOL v9;
  llvm::Type *v10;
  int v11;
  unsigned int *v12;
  llvm::Type *v13;
  llvm::ConstantInt *v14;
  llvm *v15;
  llvm::Constant *v16;
  llvm::Constant *v17;
  BOOL v18;
  uint64_t ElementInstruction;
  llvm::Constant *v20;
  llvm::Constant *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  llvm::PoisonValue *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::PoisonValue *v30;
  uint64_t v31;
  llvm::FixedVectorType ***v32;
  uint64_t Impl;
  _QWORD **v34;
  char v35;
  int v38;
  unsigned int v39;
  unsigned int v40;
  llvm::PoisonValue **v41;
  llvm::PoisonValue **v42;
  llvm::Constant *v43;
  llvm::ConstantExpr *v44;
  llvm::Constant *v45;
  unsigned int *v46;
  __int16 v47;
  __int16 v48;
  llvm::Constant **v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  llvm::Constant *v57;
  llvm::Constant *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if ((llvm::Constant::isNullValue(this) & 1) != 0)
    return (llvm::Constant *)a3;
  if (llvm::Constant::isAllOnesValue(this))
    return (llvm::Constant *)a2;
  v11 = *((unsigned __int8 *)this + 16);
  if (!this || v11 != 10)
  {
LABEL_42:
    if (v11 == 12)
      return (llvm::Constant *)llvm::PoisonValue::get(*a2, v8);
    if ((v11 - 11) <= 1)
    {
      if (*((unsigned __int8 *)a2 + 16) - 11 >= 2)
        return (llvm::Constant *)a3;
      else
        return (llvm::Constant *)a2;
    }
    if (a2 == a3)
      return (llvm::Constant *)a2;
    v38 = *((unsigned __int8 *)a2 + 16);
    if (v38 != 12)
    {
      v39 = *((unsigned __int8 *)a3 + 16);
      if (v39 == 12)
        return (llvm::Constant *)a2;
      if ((v38 - 11) > 1)
      {
LABEL_60:
        if (*((unsigned __int8 *)a3 + 16) - 11 <= 1)
        {
          v40 = *((unsigned __int8 *)a2 + 16);
          if (v40 <= 0x13)
          {
            if (((1 << v40) & 0xB0009) != 0)
              return (llvm::Constant *)a2;
            if (((1 << v40) & 0x1020) != 0)
              goto LABEL_68;
          }
          if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12
            && (sub_1C5375B0C((llvm::Constant *)a2, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FF8, (uint64_t)&v54) & 1) == 0&& !llvm::Constant::containsConstantExpression((llvm::Constant *)a2))
          {
            return (llvm::Constant *)a2;
          }
        }
        v40 = *((unsigned __int8 *)a2 + 16);
LABEL_68:
        if (v40 == 5 && *((_WORD *)a2 + 9) == 57 && (v41 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], *v41 == this))
        {
          v43 = v41[4];
          v44 = this;
          v45 = (llvm::Constant *)a3;
        }
        else
        {
          if (*((_BYTE *)a3 + 16) != 5)
            return 0;
          if (*((_WORD *)a3 + 9) != 57)
            return 0;
          v42 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
          if (*v42 != this)
            return 0;
          v45 = v42[8];
          v44 = this;
          v43 = (llvm::Constant *)a2;
        }
        return (llvm::Constant *)llvm::ConstantExpr::getSelect(v44, v43, v45, 0, v10);
      }
      if (v39 <= 0x13)
      {
        if (((1 << v39) & 0xB0009) != 0)
          return (llvm::Constant *)a3;
        if (v39 == 5)
          goto LABEL_60;
      }
      if ((*((_DWORD *)*a3 + 2) & 0xFE) != 0x12
        || (sub_1C5375B0C((llvm::Constant *)a3, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FF8, (uint64_t)&v54) & 1) != 0|| llvm::Constant::containsConstantExpression((llvm::Constant *)a3))
      {
        goto LABEL_60;
      }
    }
    return (llvm::Constant *)a3;
  }
  v12 = *(unsigned int **)this;
  v54 = v56;
  v55 = 0x1000000000;
  v13 = (llvm::Type *)v12[8];
  if (!(_DWORD)v13)
  {
    v26 = 0;
    goto LABEL_34;
  }
  v7 = 0;
  v14 = (llvm::ConstantInt *)(**(_QWORD **)v12 + 1960);
  v46 = v12;
  v15 = this;
  while (1)
  {
    v16 = (llvm::Constant *)llvm::ConstantInt::get(v14, v7, 0, v9);
    ElementInstruction = llvm::ConstantFoldExtractElementInstruction((llvm *)a2, v16, v17);
    if (!ElementInstruction)
    {
      v27 = *a2;
      v28 = *((_QWORD *)*a2 + 3);
      if (v28)
      {
        v57 = (llvm::Constant *)a2;
        v58 = v16;
        v29 = **(_QWORD **)v27 + 1512;
        v47 = 61;
        v48 = 0;
        v49 = &v57;
        v50 = 2;
        v51 = 0u;
        v52 = 0u;
        v53 = 0;
        ElementInstruction = sub_1C537D4FC(v29, v28, (unsigned __int8 *)&v47);
      }
      else
      {
        ElementInstruction = 0;
      }
    }
    v20 = (llvm::Constant *)llvm::ConstantInt::get(v14, v7, 0, v18);
    v22 = llvm::ConstantFoldExtractElementInstruction((llvm *)a3, v20, v21);
    if (!v22)
    {
      v30 = *a3;
      v8 = (llvm::Type *)*((_QWORD *)*a3 + 3);
      if (v8)
      {
        v57 = (llvm::Constant *)a3;
        v58 = v20;
        v31 = **(_QWORD **)v30 + 1512;
        v47 = 61;
        v48 = 0;
        v49 = &v57;
        v50 = 2;
        v51 = 0u;
        v52 = 0u;
        v53 = 0;
        v22 = sub_1C537D4FC(v31, (uint64_t)v8, (unsigned __int8 *)&v47);
      }
      else
      {
        v22 = 0;
      }
    }
    v23 = (unsigned __int8 *)*((_QWORD *)v15 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    v24 = v23[16];
    if (v24 != 12)
      break;
    ElementInstruction = (uint64_t)llvm::PoisonValue::get(*(llvm::PoisonValue **)ElementInstruction, v8);
LABEL_21:
    v25 = v55;
    if (v55 >= (unint64_t)HIDWORD(v55))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
      v25 = v55;
    }
    *((_QWORD *)v54 + v25) = ElementInstruction;
    v26 = (v55 + 1);
    LODWORD(v55) = v55 + 1;
    v7 = (llvm::Type *)((char *)v7 + 1);
    v15 = (llvm *)((char *)v15 + 32);
    if (v13 == v7)
      goto LABEL_33;
  }
  if (ElementInstruction == v22)
    goto LABEL_21;
  if ((v24 - 11) <= 1)
  {
    if (*(unsigned __int8 *)(ElementInstruction + 16) - 11 >= 2)
      ElementInstruction = v22;
    goto LABEL_21;
  }
  if (v24 == 16)
  {
    if (llvm::Constant::isNullValue((llvm::Constant *)v23))
      ElementInstruction = v22;
    goto LABEL_21;
  }
  v26 = v55;
LABEL_33:
  if ((_DWORD)v26 == v46[8])
  {
LABEL_34:
    v32 = (llvm::FixedVectorType ***)v54;
    Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v54, (llvm::Type *)v26);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v32, (llvm::Type *)v26);
      Impl = sub_1C537B3A4(**v34 + 1288, (uint64_t)v34, v32, v26);
    }
    v7 = (llvm::Type *)Impl;
    v35 = 1;
  }
  else
  {
    v35 = 0;
  }
  if (v54 != v56)
    free(v54);
  if ((v35 & 1) == 0)
  {
    v11 = *((unsigned __int8 *)this + 16);
    goto LABEL_42;
  }
  return v7;
}

llvm::UndefValue *llvm::ConstantFoldExtractElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3)
{
  uint64_t v3;
  int v4;
  int v6;
  unint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  llvm *v17;
  uint64_t ElementInstruction;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  llvm::APInt *v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  llvm::Constant *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  llvm::Constant *v35;
  int v36;
  char *v37;
  llvm *v38;
  _QWORD **v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  llvm *v48;
  llvm::Constant *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[4];

  v54[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v3 + 24), a2);
  v6 = *((unsigned __int8 *)a2 + 16);
  if ((v6 - 11) <= 1)
    return (llvm::UndefValue *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v3 + 24), a2);
  if ((v4 - 11) <= 1)
    return llvm::UndefValue::get(*(llvm::UndefValue **)(v3 + 24), a2);
  if (v6 != 16)
    return 0;
  if (*(_BYTE *)(v3 + 8) == 18 && v3 != 0)
  {
    v10 = *(unsigned int *)(v3 + 32);
    v11 = (unint64_t *)((char *)a2 + 24);
    v12 = *((_DWORD *)a2 + 8);
    if (v12 >= 0x41)
    {
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40)
        return (llvm::UndefValue *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v3 + 24), a2);
      v11 = (unint64_t *)*v11;
    }
    if (*v11 < v10)
      goto LABEL_15;
    return (llvm::UndefValue *)llvm::PoisonValue::get(*(llvm::PoisonValue **)(v3 + 24), a2);
  }
LABEL_15:
  if (v4 == 5)
  {
    v13 = *((unsigned __int16 *)this + 9);
    if (v13 == 62)
    {
      v24 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[8];
      if (v24)
        v25 = *(_BYTE *)(v24 + 16) == 16;
      else
        v25 = 0;
      if (v25)
      {
        v29 = *(unsigned int *)(v24 + 32);
        if (v29 > 0x40)
        {
          v30 = (void *)operator new[]();
          memcpy(v30, *(const void **)(v24 + 24), ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v30 = *(void **)(v24 + 24);
        }
        LODWORD(v43) = v29;
        v42 = v30;
        BYTE4(v43) = 1;
        v33 = *((unsigned int *)a2 + 8);
        if (v33 > 0x40)
        {
          v34 = (void *)operator new[]();
          memcpy(v34, *((const void **)a2 + 3), ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v34 = (void *)*((_QWORD *)a2 + 3);
        }
        LODWORD(v49) = v33;
        v48 = (llvm *)v34;
        BYTE4(v49) = 1;
        v36 = sub_1C4FCF8D8((uint64_t)&v42, (uint64_t)&v48);
        if (v49 >= 0x41 && v48)
          MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
        if (v43 >= 0x41 && v42)
          MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
        v37 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
        if (!v36)
          return (llvm::UndefValue *)*((_QWORD *)v37 + 4);
        v38 = *(llvm **)v37;
        ElementInstruction = llvm::ConstantFoldExtractElementInstruction(*(llvm **)v37, a2, v35);
        if (!ElementInstruction)
        {
          v39 = *(_QWORD ***)v38;
          v40 = *(_QWORD *)(*(_QWORD *)v38 + 24);
          if (v40)
          {
            v48 = v38;
            v49 = a2;
            v41 = **v39 + 1512;
            LODWORD(v42) = 61;
            v43 = (uint64_t)&v48;
            v44 = 2;
            v45 = 0u;
            v46 = 0u;
            v47 = 0;
            return (llvm::UndefValue *)sub_1C537D4FC(v41, v40, (unsigned __int8 *)&v42);
          }
          return 0;
        }
        return (llvm::UndefValue *)ElementInstruction;
      }
    }
    else if (v13 == 34)
    {
      v42 = &v44;
      v43 = 0x800000000;
      v14 = *((_DWORD *)this + 5);
      v15 = v14 & 0x7FFFFFF;
      if ((v14 & 0x7FFFFFFu) >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)&v44, v15, 8);
        v14 = *((_DWORD *)this + 5);
      }
      v16 = v14 & 0x7FFFFFF;
      if ((v14 & 0x7FFFFFF) != 0)
      {
        v17 = this;
        while (1)
        {
          ElementInstruction = *((_QWORD *)v17 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
          if ((*(_DWORD *)(*(_QWORD *)ElementInstruction + 8) & 0xFE) == 0x12)
          {
            v19 = llvm::ConstantFoldExtractElementInstruction(*((llvm **)v17 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)), a2, (llvm::Constant *)v15);
            if (v19)
            {
              ElementInstruction = v19;
            }
            else
            {
              v22 = *(_QWORD *)(*(_QWORD *)ElementInstruction + 24);
              if (!v22)
              {
                ElementInstruction = 0;
                goto LABEL_50;
              }
              v54[0] = ElementInstruction;
              v54[1] = a2;
              v23 = ***(_QWORD ***)ElementInstruction + 1512;
              LODWORD(v48) = 61;
              v49 = (llvm::Constant *)v54;
              v50 = 2;
              v51 = 0u;
              v52 = 0u;
              v53 = 0;
              ElementInstruction = sub_1C537D4FC(v23, v22, (unsigned __int8 *)&v48);
              if (!ElementInstruction)
                goto LABEL_50;
            }
          }
          v20 = v43;
          if (v43 >= (unint64_t)HIDWORD(v43))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)&v44, v43 + 1, 8);
            v20 = v43;
          }
          *((_QWORD *)v42 + v20) = ElementInstruction;
          v21 = v43 + 1;
          LODWORD(v43) = v43 + 1;
          v17 = (llvm *)((char *)v17 + 32);
          if (!--v16)
            goto LABEL_47;
        }
      }
      v21 = v43;
LABEL_47:
      v31 = (llvm::Constant *)v21;
      v32 = 24;
      if (*((_BYTE *)this + 16) == 62)
        v32 = 64;
      ElementInstruction = llvm::ConstantExpr::getWithOperands((uint64_t)this, (uint64_t)v42, v31, *(llvm::Constant **)(v3 + 24), 0, *(llvm::GetElementPtrInst **)((char *)this + v32));
LABEL_50:
      if (v42 != &v44)
        free(v42);
      return (llvm::UndefValue *)ElementInstruction;
    }
  }
  ElementInstruction = (uint64_t)llvm::Constant::getAggregateElement(this, a2);
  if (!ElementInstruction)
  {
    v26 = (llvm::Constant *)((char *)a2 + 24);
    v27 = *(unsigned int *)(v3 + 32);
    v28 = *((_DWORD *)a2 + 8);
    if (v28 < 0x41)
    {
LABEL_40:
      if (*(_QWORD *)v26 < v27)
      {
        ElementInstruction = (uint64_t)llvm::Constant::getSplatValue(this, 0);
        if (ElementInstruction)
          return (llvm::UndefValue *)ElementInstruction;
      }
      return 0;
    }
    if (v28 - llvm::APInt::countLeadingZerosSlowCase(v26) <= 0x40)
    {
      v26 = *(llvm::APInt **)v26;
      goto LABEL_40;
    }
    return 0;
  }
  return (llvm::UndefValue *)ElementInstruction;
}

llvm *llvm::ConstantFoldInsertElementInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm *Impl;
  int v5;
  llvm::PoisonValue *v6;
  llvm::PoisonValue *v10;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  unsigned int v20;
  unint64_t v21;
  llvm::Constant *v22;
  llvm::Constant *v23;
  uint64_t ElementInstruction;
  uint64_t v25;
  unint64_t v26;
  llvm::PoisonValue *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::FixedVectorType ***v30;
  _QWORD **v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[128];
  _QWORD v41[4];

  Impl = this;
  v41[2] = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)a3 + 16);
  if ((v5 - 11) <= 1)
  {
    v6 = *(llvm::PoisonValue **)this;
    return (llvm *)llvm::PoisonValue::get(v6, a2);
  }
  if (*((_BYTE *)this + 16) != 13)
  {
LABEL_7:
    if (v5 != 16)
      return 0;
    v10 = *(llvm::PoisonValue **)Impl;
    if (*(_BYTE *)(*(_QWORD *)Impl + 8) == 19)
      return 0;
    v11 = *((unsigned int *)v10 + 8);
    v12 = (unint64_t *)((char *)a3 + 24);
    v13 = *((_DWORD *)a3 + 8);
    v14 = (unint64_t *)((char *)a3 + 24);
    if (v13 >= 0x41)
    {
      if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) > 0x40)
        goto LABEL_43;
      v14 = (unint64_t *)*v12;
    }
    if (*v14 < v11)
    {
      v38 = v40;
      v39 = 0x1000000000;
      if (v11 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v11, 8);
        v10 = *(llvm::PoisonValue **)Impl;
        v13 = *((_DWORD *)a3 + 8);
      }
      if (v13 >= 0x41)
        v12 = (unint64_t *)*v12;
      if ((_DWORD)v11)
      {
        v15 = 0;
        v16 = **(_QWORD **)v10;
        v17 = (unint64_t *)*v12;
        do
        {
          if (v17 == (unint64_t *)v15)
          {
            v18 = v39;
            if (v39 >= (unint64_t)HIDWORD(v39))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 8);
              v18 = v39;
            }
            *((_QWORD *)v38 + v18) = a2;
          }
          else
          {
            v19 = *(llvm::ConstantInt **)(v16 + 1960);
            v20 = *(_DWORD *)(v16 + 1968);
            LODWORD(v33) = v20 >> 8;
            if (v20 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v32, v15, 0);
            }
            else
            {
              if (v20 <= 0xFF)
                v21 = 0;
              else
                v21 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
              v32 = v21 & v15;
            }
            v23 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v32, a3);
            if (v33 >= 0x41 && v32)
              MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
            ElementInstruction = (uint64_t)llvm::ConstantFoldExtractElementInstruction(Impl, v23, v22);
            if (!ElementInstruction)
            {
              v27 = *(llvm::PoisonValue **)Impl;
              v28 = *(_QWORD *)(*(_QWORD *)Impl + 24);
              if (v28)
              {
                v41[0] = Impl;
                v41[1] = v23;
                v29 = **(_QWORD **)v27 + 1512;
                LODWORD(v32) = 61;
                v33 = v41;
                v34 = 2;
                v35 = 0u;
                v36 = 0u;
                v37 = 0;
                ElementInstruction = sub_1C537D4FC(v29, v28, (unsigned __int8 *)&v32);
              }
              else
              {
                ElementInstruction = 0;
              }
            }
            v25 = v39;
            if (v39 >= (unint64_t)HIDWORD(v39))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v39 + 1, 8);
              v25 = v39;
            }
            *((_QWORD *)v38 + v25) = ElementInstruction;
          }
          v26 = (v39 + 1);
          LODWORD(v39) = v39 + 1;
          ++v15;
        }
        while (v11 != v15);
      }
      else
      {
        v26 = v39;
      }
      v30 = (llvm::FixedVectorType ***)v38;
      Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v38, (llvm::Type *)v26);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v30, (llvm::Type *)v26);
        Impl = (llvm *)sub_1C537B3A4(**v31 + 1288, (uint64_t)v31, v30, v26);
      }
      if (v38 != v40)
        free(v38);
      return Impl;
    }
LABEL_43:
    v6 = v10;
    return (llvm *)llvm::PoisonValue::get(v6, a2);
  }
  if ((llvm::Constant::isNullValue(a2) & 1) == 0)
  {
    v5 = *((unsigned __int8 *)a3 + 16);
    goto LABEL_7;
  }
  return Impl;
}

llvm::UndefValue *llvm::ConstantFoldShuffleVectorInstruction(llvm *a1, llvm *a2, int *a3, _BOOL8 a4)
{
  uint64_t v5;
  int v6;
  llvm::UndefValue *v7;
  int *v8;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  llvm::Constant *v15;
  llvm::Constant *v16;
  llvm::Constant *ElementInstruction;
  uint64_t v18;
  llvm::ConstantAggregateZero *v19;
  llvm::Type *v20;
  llvm::UndefValue *v22;
  llvm::Type *v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  llvm::Type *v29;
  llvm::Type *v30;
  llvm::Constant *v31;
  llvm::Constant *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Constant *v37;
  _QWORD **v38;
  uint64_t v39;
  llvm::FixedVectorType ***v40;
  uint64_t Impl;
  _QWORD **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  llvm *v50;
  llvm::Constant *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[4];

  v56[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)a1;
  v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  v7 = *(llvm::UndefValue **)(*(_QWORD *)a1 + 24);
  if (!a4)
  {
LABEL_15:
    llvm::VectorType::get(*(llvm::FixedVectorType **)(*(_QWORD *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(v6 == 19) << 32)));
    return llvm::UndefValue::get(v22, v23);
  }
  v8 = a3;
  v11 = 4 * a4;
  v12 = 4 * a4;
  v13 = a3;
  while (*v13 == -1)
  {
    ++v13;
    v12 -= 4;
    if (!v12)
      goto LABEL_15;
  }
  v14 = a3;
  do
  {
    if (*v14)
      goto LABEL_20;
    ++v14;
    v11 -= 4;
  }
  while (v11);
  v15 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(**(_QWORD **)v5 + 1960), 0, 0, a4);
  ElementInstruction = (llvm::Constant *)llvm::ConstantFoldExtractElementInstruction(a1, v15, v16);
  if (!ElementInstruction)
  {
    v24 = *(_QWORD ***)a1;
    v25 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v25)
    {
      v50 = a1;
      v51 = v15;
      v26 = **v24 + 1512;
      LODWORD(v44) = 61;
      v45 = (uint64_t)&v50;
      v46 = 2;
      v47 = 0u;
      v48 = 0u;
      v49 = 0;
      ElementInstruction = (llvm::Constant *)sub_1C537D4FC(v26, v25, (unsigned __int8 *)&v44);
    }
    else
    {
      ElementInstruction = 0;
    }
  }
  if (!llvm::Constant::isNullValue(ElementInstruction))
  {
    if (v6 != 19)
      return (llvm::UndefValue *)llvm::ConstantVector::getSplat(a4, ElementInstruction, v18);
    v6 = *(unsigned __int8 *)(v5 + 8);
LABEL_20:
    if (v6 == 19)
      return 0;
    v27 = *(_DWORD *)(v5 + 32);
    v44 = &v46;
    v45 = 0x2000000000;
    v28 = a4;
    if (a4)
    {
      while (1)
      {
        v30 = (llvm::Type *)*v8++;
        v29 = v30;
        if ((_DWORD)v30 == -1 || v29 >= 2 * v27)
          break;
        if (v29 >= v27)
        {
          v31 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)a2 + 1960), (llvm::Type *)(v29 - v27), 0, a4);
          v33 = llvm::ConstantFoldExtractElementInstruction(a2, v31, v37);
          if (v33)
            goto LABEL_26;
          v38 = *(_QWORD ***)a2;
          v39 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          if (!v39)
            goto LABEL_45;
          v56[0] = a2;
LABEL_43:
          v56[1] = v31;
          v43 = **v38 + 1512;
          LODWORD(v50) = 61;
          v51 = (llvm::Constant *)v56;
          v52 = 2;
          v53 = 0u;
          v54 = 0u;
          v55 = 0;
          v36 = sub_1C537D4FC(v43, v39, (unsigned __int8 *)&v50);
LABEL_31:
          v33 = v36;
          goto LABEL_26;
        }
        v31 = (llvm::Constant *)llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)a1 + 1960), v29, 0, a4);
        v33 = llvm::ConstantFoldExtractElementInstruction(a1, v31, v32);
        if (!v33)
        {
          v38 = *(_QWORD ***)a1;
          v39 = *(_QWORD *)(*(_QWORD *)a1 + 24);
          if (!v39)
          {
LABEL_45:
            v33 = 0;
            goto LABEL_26;
          }
          v56[0] = a1;
          goto LABEL_43;
        }
LABEL_26:
        v34 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)&v46, v45 + 1, 8);
          v34 = v45;
        }
        *((_QWORD *)v44 + v34) = v33;
        v35 = (v45 + 1);
        LODWORD(v45) = v45 + 1;
        if (!--v28)
        {
          v40 = (llvm::FixedVectorType ***)v44;
          goto LABEL_35;
        }
      }
      v36 = (uint64_t)llvm::UndefValue::get(v7, v29);
      goto LABEL_31;
    }
    v35 = 0;
    v40 = (llvm::FixedVectorType ***)&v46;
LABEL_35:
    Impl = (uint64_t)llvm::ConstantVector::getImpl(v40, (llvm::Type *)v35);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v40, (llvm::Type *)v35);
      Impl = sub_1C537B3A4(**v42 + 1288, (uint64_t)v42, v40, v35);
    }
    if (v44 != &v46)
      free(v44);
    return (llvm::UndefValue *)Impl;
  }
  if (v6 == 19)
    llvm::ScalableVectorType::get((uint64_t **)v7, (llvm::Type *)a4);
  else
    llvm::FixedVectorType::get(v7, (llvm::Type *)a4);
  return (llvm::UndefValue *)llvm::ConstantAggregateZero::get(v19, v20);
}

llvm::UndefValue *llvm::ConstantFoldExtractValueInstruction(llvm::UndefValue *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3;
    do
    {
      result = llvm::Constant::getAggregateElement(result, (llvm::Type *)*a2);
      if (!result)
        break;
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *llvm::ConstantFoldInsertValueInstruction(llvm::Constant *a1, void *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  llvm::Type *v11;
  uint64_t v12;
  llvm::UndefValue *AggregateElement;
  uint64_t inserted;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  void *v18;
  void *v20;
  uint64_t v21;
  _QWORD v22[33];

  v22[32] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = *(_QWORD *)a1;
    v8 = *(unsigned __int8 *)(v7 + 8);
    if (v7)
      v9 = v8 == 16;
    else
      v9 = 0;
    if (v9)
      v10 = *(_DWORD *)(v7 + 12);
    else
      v10 = *(_DWORD *)(v7 + 32);
    v20 = v22;
    v21 = 0x2000000000;
    if (v10)
    {
      v11 = 0;
      v12 = a4 - 1;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement(a1, v11);
        if (!AggregateElement)
          break;
        inserted = (uint64_t)AggregateElement;
        if ((_DWORD)v11 == *a3)
          inserted = llvm::ConstantFoldInsertValueInstruction(AggregateElement, a2, a3 + 1, v12);
        v15 = v21;
        if (v21 >= (unint64_t)HIDWORD(v21))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v21 + 1, 8);
          v15 = v21;
        }
        *((_QWORD *)v20 + v15) = inserted;
        v16 = (v21 + 1);
        LODWORD(v21) = v21 + 1;
        v11 = (llvm::Type *)((_DWORD)v11 + 1);
        if (v10 == (_DWORD)v11)
        {
          v7 = *(_QWORD *)a1;
          v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
          v17 = (llvm::Type *)v20;
          goto LABEL_19;
        }
      }
      a2 = 0;
    }
    else
    {
      v16 = 0;
      v17 = (llvm::Type *)v22;
LABEL_19:
      if (v8 == 16)
        v18 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)v7, v17, v16);
      else
        v18 = llvm::ConstantArray::get((llvm::PoisonValue *)v7, v17, v16);
      a2 = v18;
    }
    if (v20 != v22)
      free(v20);
  }
  return a2;
}

uint64_t llvm::ConstantFoldUnaryInstruction(llvm *this, unsigned __int8 *a2, llvm::Constant *a3)
{
  uint64_t Impl;
  llvm::ConstantExpr *v4;
  llvm::ConstantFP **v5;
  int v6;
  _BOOL4 v8;
  int v9;
  llvm::ConstantFP *v10;
  const llvm::detail::DoubleAPFloat *v11;
  uint64_t v12;
  char v13;
  int v14;
  _BOOL4 v16;
  uint64_t v17;
  llvm **v18;
  llvm **v19;
  llvm **v20;
  llvm **v21;
  unint64_t v22;
  llvm *v23;
  void *v24;
  llvm *v25;
  uint64_t v26;
  llvm::APFloatBase *SplatValue;
  BOOL v28;
  llvm::Type *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Type *v33;
  llvm::Type *v34;
  llvm::ConstantInt *v35;
  llvm::Constant *v36;
  llvm::Constant *v37;
  uint64_t ElementInstruction;
  llvm::Type *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD **v44;
  uint64_t v45;
  llvm::FixedVectorType ***v46;
  _QWORD **v47;
  _WORD v48[4];
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  llvm *v56;
  int v57;
  char v58;
  void *v59;
  llvm *v60;
  int v61;
  char v62;
  _QWORD v63[4];

  Impl = (uint64_t)a2;
  v4 = this;
  v63[2] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::ConstantFP ***)a2;
  v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12 || v6 == 19)
  {
    v9 = a2[16];
    v8 = (_DWORD)this == 12;
    if ((_DWORD)this == 12 && (v9 - 11) < 2)
      return Impl;
  }
  else
  {
    v8 = (_DWORD)this == 12;
    v9 = a2[16];
  }
  if (v9 == 17)
  {
    if (v8)
    {
      v10 = *v5;
      v11 = (const llvm::detail::DoubleAPFloat *)(a2 + 32);
      v12 = *(_QWORD *)(Impl + 32);
      if ((_UNKNOWN *)v12 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v59, v11);
      }
      else
      {
        v59 = *(void **)(Impl + 32);
        if ((*(_DWORD *)(v12 + 8) + 64) >= 0x80)
        {
          this = (llvm *)operator new[]();
          v60 = this;
        }
        v13 = *(_BYTE *)(Impl + 52);
        v14 = v13 & 7;
        v62 = v13 & 0xF;
        v61 = *(_DWORD *)(Impl + 48);
        v16 = (v13 & 6) != 0 && v14 != 3;
        if (v14 == 1 || v16)
        {
          v17 = *(unsigned int *)(v12 + 8);
          if ((v17 - 64) <= 0xFFFFFF7F)
            v18 = (llvm **)this;
          else
            v18 = &v60;
          v21 = *(llvm ***)(Impl + 40);
          v20 = (llvm **)(Impl + 40);
          v19 = v21;
          if ((*((_DWORD *)*(v20 - 1) + 2) - 64) >= 0xFFFFFF80)
            v19 = v20;
          if (v17 <= 0xFFFFFFBF)
          {
            v22 = (unint64_t)(v17 + 64) >> 6;
            do
            {
              v23 = *v19++;
              *v18++ = v23;
              --v22;
            }
            while (v22);
          }
        }
      }
      v24 = v59;
      if (v59 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v59);
        v24 = v59;
        if (v59 == &unk_1C866F1C0)
        {
          v25 = v60;
          v60 = 0;
          v24 = &unk_1C866F1C0;
          goto LABEL_32;
        }
      }
      else
      {
        v62 ^= 8u;
      }
      v25 = v60;
      v57 = v61;
      v58 = v58 & 0xF0 | v62 & 0xF;
LABEL_32:
      v55 = (uint64_t)v24;
      v56 = v25;
      v59 = &unk_1C866F210;
      Impl = (uint64_t)llvm::ConstantFP::get(v10, (llvm::LLVMContext *)&v54, a3);
      if ((_UNKNOWN *)v55 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v56);
      }
      else if ((*(_DWORD *)(v55 + 8) - 64) <= 0xFFFFFF7F && v56)
      {
        MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
      }
      if (v59 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v60);
      }
      else if ((*((_DWORD *)v59 + 2) - 64) <= 0xFFFFFF7F)
      {
        if (v60)
          MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
      }
      return Impl;
    }
    return 0;
  }
  if (v6 != 18)
    return 0;
  v26 = *(_QWORD *)*v5;
  SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
  if (SplatValue)
  {
    v30 = llvm::ConstantExpr::get(v4, SplatValue, 0, 0, v29);
    return llvm::ConstantVector::getSplat(*((unsigned int *)v5 + 8) | ((unint64_t)(*((_BYTE *)v5 + 8) == 19) << 32), v30, v31);
  }
  v54 = &v56;
  v55 = 0x1000000000;
  v33 = (llvm::Type *)*((unsigned int *)v5 + 8);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = (llvm::ConstantInt *)(v26 + 1960);
    do
    {
      v36 = (llvm::Constant *)llvm::ConstantInt::get(v35, v34, 0, v28);
      ElementInstruction = llvm::ConstantFoldExtractElementInstruction((llvm *)Impl, v36, v37);
      LODWORD(v40) = ElementInstruction;
      if (!ElementInstruction)
      {
        v44 = *(_QWORD ***)Impl;
        v40 = *(_QWORD *)(*(_QWORD *)Impl + 24);
        if (v40)
        {
          v63[0] = Impl;
          v63[1] = v36;
          v45 = **v44 + 1512;
          v48[0] = 61;
          v48[1] = 0;
          v49 = v63;
          v50 = 2;
          v51 = 0u;
          v52 = 0u;
          v53 = 0;
          LODWORD(v40) = sub_1C537D4FC(v45, v40, (unsigned __int8 *)v48);
        }
      }
      v41 = llvm::ConstantExpr::get(v4, v40, 0, 0, v39);
      v42 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)&v56, v55 + 1, 8);
        v42 = v55;
      }
      *((_QWORD *)v54 + v42) = v41;
      v43 = (v55 + 1);
      LODWORD(v55) = v55 + 1;
      v34 = (llvm::Type *)((char *)v34 + 1);
    }
    while (v33 != v34);
    v46 = (llvm::FixedVectorType ***)v54;
  }
  else
  {
    v43 = 0;
    v46 = (llvm::FixedVectorType ***)&v56;
  }
  Impl = (uint64_t)llvm::ConstantVector::getImpl(v46, (llvm::Type *)v43);
  if (!Impl)
  {
    llvm::FixedVectorType::get(**v46, (llvm::Type *)v43);
    Impl = sub_1C537B3A4(**v47 + 1288, (uint64_t)v47, v46, v43);
  }
  if (v54 != &v56)
    free(v54);
  return Impl;
}

llvm::ValueHandleBase *llvm::ConstantFoldBinaryInstruction(llvm *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t NullValue;
  llvm::ConstantFP *v8;
  llvm::Constant *Zero;
  int v10;
  llvm::ConstantFP *v11;
  int v12;
  llvm::PoisonValue *v13;
  char v16;
  char v17;
  llvm::APInt *v18;
  unsigned int v19;
  llvm::Constant *v20;
  uint64_t v21;
  llvm::APInt *v23;
  unsigned int v24;
  llvm::APInt *v25;
  uint64_t v26;
  llvm::Type *v27;
  unsigned int v28;
  llvm::APInt *v29;
  _QWORD *v30;
  llvm::APInt *v31;
  int v32;
  llvm::Constant *v33;
  int v34;
  unsigned int v35;
  const char *v36;
  unsigned int PrimitiveSizeInBits;
  int v38;
  llvm::Constant *v39;
  llvm::APFloatBase *SplatValue;
  char *v41;
  int v42;
  int v43;
  char v44;
  int v45;
  llvm::UndefValue *AggregateElement;
  int v47;
  char *v48;
  size_t v49;
  char *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  int v54;
  _QWORD *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  size_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  const void **v71;
  llvm::APInt *v72;
  llvm::ConstantInt *v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char v77;
  int v78;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  char *v87;
  const llvm::APFloat *v88;
  llvm::ConstantFP *v89;
  llvm::Constant *v90;
  llvm::Constant *v91;
  llvm::PoisonValue *v92;
  llvm::APInt *v93;
  unsigned int v94;
  llvm::APFloatBase *v95;
  llvm::Constant **v96;
  unint64_t v97;
  _QWORD **v98;
  uint64_t v99;
  llvm::Type *v100;
  llvm::Type *v101;
  llvm::ConstantInt *v102;
  llvm::Constant *v103;
  llvm::Constant *v104;
  llvm::Constant *v105;
  llvm::Constant *ElementInstruction;
  llvm::Constant *v107;
  llvm::Constant *v108;
  llvm::Type *v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Type *v112;
  _QWORD **v113;
  uint64_t v114;
  llvm::ConstantFP *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD **v118;
  uint64_t v119;
  uint64_t v120;
  llvm::Constant **v121;
  uint64_t v122;
  llvm::Constant **v123;
  uint64_t *v124;
  uint64_t v125;
  llvm::ConstantInt *v126;
  llvm::FixedVectorType ***v127;
  _QWORD **v128;
  unint64_t v129;
  unsigned int v130;
  void *v131;
  llvm::ConstantInt *v132;
  unsigned int v133;
  unint64_t v134;
  unsigned int v135;
  unint64_t *v136;
  unint64_t v137;
  unsigned int v138;
  llvm::APInt *v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t *v142;
  unint64_t v143;
  unsigned int v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _BOOL4 v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _BOOL4 v171;
  unint64_t v172;
  llvm::ConstantInt *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  void *v177;
  unsigned int v178;
  llvm::Constant *v179;
  uint64_t v180;
  uint64_t v181;
  void *__src;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  llvm::Constant **v188;
  llvm::Constant **v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  llvm::Constant *v194;
  llvm::Constant *v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::ConstantFP **)a2;
  switch((int)this)
  {
    case 13:
      goto LABEL_6;
    case 14:
      Zero = llvm::ConstantFP::getZero(v8, (llvm::Type *)1);
      if (Zero)
        goto LABEL_13;
      goto LABEL_15;
    case 15:
    case 16:
      goto LABEL_15;
    case 17:
      Zero = (llvm::Constant *)llvm::ConstantInt::get(v8, (llvm::Type *)1, 0, (BOOL)a4);
      if (!Zero)
        goto LABEL_15;
      goto LABEL_13;
    case 18:
      Zero = llvm::ConstantFP::get((llvm::ConstantFP **)v8, a2, 1.0);
      if (!Zero)
        goto LABEL_15;
      goto LABEL_13;
    default:
      if ((_DWORD)this == 28)
      {
        Zero = llvm::Constant::getAllOnesValue(v8, a2);
        if (!Zero)
          goto LABEL_15;
        goto LABEL_13;
      }
      if (((_DWORD)this - 29) > 1)
        goto LABEL_15;
LABEL_6:
      Zero = (llvm::Constant *)llvm::Constant::getNullValue(v8, a2);
      if (Zero)
      {
LABEL_13:
        if (Zero == a2)
          return a3;
        if (Zero == a3)
          return a2;
      }
LABEL_15:
      v10 = *((unsigned __int8 *)a2 + 16);
      if (v10 == 12)
      {
        v11 = *(llvm::ConstantFP **)a2;
LABEL_18:
        v13 = v11;
        return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v13, a2);
      }
      v12 = *((unsigned __int8 *)a3 + 16);
      v11 = *(llvm::ConstantFP **)a2;
      if (v12 == 12)
        goto LABEL_18;
      if ((*((_DWORD *)v11 + 2) & 0xFE) != 0x12 || *((_DWORD *)v11 + 2) == 19)
      {
        v16 = v10 - 11;
        v17 = v12 - 11;
        if ((v10 - 11) < 2u || (v12 - 11) <= 1u)
        {
          switch((int)this)
          {
            case 13:
            case 15:
              return llvm::UndefValue::get(*(llvm::UndefValue **)a2, a2);
            case 14:
            case 18:
            case 21:
            case 24:
              goto LABEL_40;
            case 16:
              SplatValue = a2;
              if (v10 == 17)
                goto LABEL_124;
              if ((*((_DWORD *)v11 + 2) & 0xFE) != 0x12)
                goto LABEL_40;
              SplatValue = llvm::Constant::getSplatValue(a2, 0);
              if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
              {
LABEL_124:
                v41 = (char *)SplatValue + 24;
                if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
                  v41 = (char *)*((_QWORD *)SplatValue + 5);
                if ((v41[28] & 0xF) != 0xB)
                  goto LABEL_40;
              }
              else
              {
                if (*((_BYTE *)v11 + 8) != 18)
                  goto LABEL_40;
                v42 = *((_DWORD *)v11 + 8);
                if (!v42)
                  goto LABEL_40;
                v43 = 0;
                v44 = 0;
                v45 = -v42;
                do
                {
                  ++v43;
                  while (1)
                  {
                    AggregateElement = llvm::Constant::getAggregateElement(a2, (llvm::Type *)(v43 - 1));
                    if (!AggregateElement)
                      goto LABEL_40;
                    v47 = *((unsigned __int8 *)AggregateElement + 16);
                    if ((v47 - 11) >= 2)
                      break;
                    ++v43;
                    if (v45 + v43 == 1)
                    {
                      if ((v44 & 1) == 0)
                        goto LABEL_40;
                      goto LABEL_127;
                    }
                  }
                  if (v47 != 17)
                    goto LABEL_40;
                  v48 = (char *)AggregateElement + 24;
                  if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                    v48 = (char *)*((_QWORD *)AggregateElement + 5);
                  if ((v48[28] & 0xF) != 0xB)
                    goto LABEL_40;
                  v44 = 1;
                }
                while (v45 + v43);
              }
LABEL_127:
              if (*((unsigned __int8 *)a3 + 16) - 11 < 2)
                return a3;
LABEL_40:
              if (*((unsigned __int8 *)a2 + 16) - 11 > 1
                || *((unsigned __int8 *)a3 + 16) - 11 >= 2)
              {
                return llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)a2, 0, 0);
              }
              return a2;
            case 17:
              if ((v17 | v16) < 2u)
                return a2;
              v194 = 0;
              __src = &v194;
              v183 = 0;
              if ((sub_1C4D8A004((uint64_t)&__src, a2) & 1) == 0)
              {
                v188 = &v194;
                v189 = 0;
                if ((sub_1C4D8A004((uint64_t)&v188, a3) & 1) == 0)
                  return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v27);
              }
              v39 = v194;
              if (*((_DWORD *)v194 + 2) >= 0x41u)
                v39 = *(llvm::Constant **)v194;
              if ((*(_BYTE *)v39 & 1) == 0)
                return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v27);
              return llvm::UndefValue::get(*(llvm::UndefValue **)a2, v27);
            case 19:
            case 20:
              if (sub_1C535A1B4(a3))
                goto LABEL_85;
              if ((sub_1C4D89E3C((uint64_t)&__src, a3) & 1) != 0)
                return a2;
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v27);
            case 22:
            case 23:
              if (sub_1C535A1B4(a3))
                goto LABEL_85;
              v33 = *(llvm::Constant **)a2;
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(v33, a2);
            case 25:
            case 26:
            case 27:
              if ((v12 - 11) <= 1u)
                goto LABEL_85;
              if ((llvm::Constant::isNullValue(a3) & 1) != 0 || (sub_1C4E71060((uint64_t)&__src, a3) & 1) != 0)
                return a2;
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)a2, v27);
            case 28:
              NullValue = (uint64_t)a2;
              if ((v17 | v16) >= 2u)
                goto LABEL_120;
              return (llvm::ValueHandleBase *)NullValue;
            case 29:
              NullValue = (uint64_t)a2;
              if ((v17 | v16) < 2u)
                return (llvm::ValueHandleBase *)NullValue;
              return llvm::Constant::getAllOnesValue(*(llvm::Constant **)a2, a2);
            case 30:
              if ((v17 | v16) > 1u)
                return llvm::UndefValue::get(*(llvm::UndefValue **)a2, a2);
LABEL_120:
              v33 = *(llvm::Constant **)a2;
              break;
            default:
              goto LABEL_27;
          }
          return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(v33, a2);
        }
      }
LABEL_27:
      if (v12 == 16)
      {
        switch((int)this)
        {
          case 13:
          case 15:
            v18 = (llvm::Constant *)((char *)a3 + 24);
            v19 = *((_DWORD *)a3 + 8);
            if (v19 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v18) == v19)
                return a2;
            }
            else if (!*(_QWORD *)v18)
            {
              return a2;
            }
            goto LABEL_182;
          case 17:
            v31 = (llvm::Constant *)((char *)a3 + 24);
            NullValue = *((unsigned int *)a3 + 8);
            if (NullValue <= 0x40)
            {
              v26 = *(_QWORD *)v31;
              if (*(_QWORD *)v31)
              {
LABEL_72:
                if (v26 != 1)
                  goto LABEL_182;
                return a2;
              }
              return a3;
            }
            v38 = llvm::APInt::countLeadingZerosSlowCase(v31);
            if (v38 == (_DWORD)NullValue)
              return a3;
            if (v38 == (_DWORD)NullValue - 1)
              return a2;
            goto LABEL_182;
          case 19:
          case 20:
            v25 = (llvm::Constant *)((char *)a3 + 24);
            v24 = *((_DWORD *)a3 + 8);
            if (v24 <= 0x40)
            {
              v26 = *(_QWORD *)v25;
              if (*(_QWORD *)v25)
                goto LABEL_72;
LABEL_85:
              v13 = *(llvm::PoisonValue **)a3;
              return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v13, a2);
            }
            v32 = llvm::APInt::countLeadingZerosSlowCase(v25);
            if (v32 == v24 - 1)
              return a2;
            goto LABEL_79;
          case 22:
          case 23:
            v23 = (llvm::Constant *)((char *)a3 + 24);
            v24 = *((_DWORD *)a3 + 8);
            if (v24 <= 0x40)
            {
              if (!*(_QWORD *)v23)
                goto LABEL_85;
              if (*(_QWORD *)v23 != 1)
                goto LABEL_182;
              goto LABEL_77;
            }
            v32 = llvm::APInt::countLeadingZerosSlowCase(v23);
            if (v32 == v24 - 1)
            {
LABEL_77:
              v33 = *(llvm::Constant **)a3;
              return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(v33, a2);
            }
LABEL_79:
            if (v32 == v24)
              goto LABEL_85;
            goto LABEL_182;
          case 27:
            if (v10 != 5 || *((_WORD *)a2 + 9) != 39)
              goto LABEL_182;
            return (llvm::ValueHandleBase *)llvm::ConstantExpr::getLShr(a2, a3, 0, a4);
          case 28:
            v30 = (_QWORD *)((char *)a3 + 24);
            NullValue = *((unsigned int *)a3 + 8);
            if (NullValue > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) == (_DWORD)NullValue)
                return a3;
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::Constant *)((char *)a3 + 24)) == (_DWORD)NullValue)
                return a2;
            }
            else
            {
              if (!*v30)
                return a3;
              if (!(_DWORD)NullValue || *v30 == 0xFFFFFFFFFFFFFFFFLL >> -(char)NullValue)
                return a2;
            }
            if (v10 != 5)
              goto LABEL_182;
            v34 = *((unsigned __int16 *)a2 + 9);
            if (v34 == 39)
            {
              v35 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)a2
                                                                        - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
              if ((_DWORD)v36 == 1)
              LODWORD(v183) = v35;
              if (v35 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
              else
                __src = 0;
              sub_1C4912E54(&__src, 0, PrimitiveSizeInBits);
              if (v183 >= 0x41)
              {
                v49 = (((unint64_t)v183 + 63) >> 3) & 0x3FFFFFF8;
                v50 = (char *)operator new[]();
                v51 = __src;
                memcpy(v50, __src, v49);
                v52 = 0;
                v53 = (char *)*v30;
                do
                {
                  *(_QWORD *)&v50[v52] &= *(_QWORD *)&v53[v52];
                  v52 += 8;
                }
                while (v49 != v52);
                v54 = memcmp(v50, v51, v49);
                MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
                if (v183 >= 0x41 && __src)
                  MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                if (!v54)
                  return a2;
              }
              else if (((unint64_t)__src & ~*v30) == 0)
              {
                return a2;
              }
              v34 = *((unsigned __int16 *)a2 + 9);
            }
            NullValue = (uint64_t)a2;
            if (v34 != 47)
              goto LABEL_182;
            v55 = (_QWORD *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            v56 = *((unsigned __int8 *)v55 + 16);
            NullValue = (uint64_t)a2;
            if (v56 > 3)
              goto LABEL_182;
            v57 = v55[5];
            if (v57)
            {
              llvm::Value::getPointerAlignment(*((llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (const llvm::DataLayout *)(v57 + 272));
              if (!*((_BYTE *)v55 + 16) && *(unsigned __int16 *)(v57 + 292) < 0x100u)
              {
                v58 = 2;
                goto LABEL_166;
              }
            }
            else
            {
              NullValue = (uint64_t)a2;
              if (v56 != 3)
                goto LABEL_182;
              NullValue = (uint64_t)a2;
              if ((*((_WORD *)v55 + 17) & 0x3F) == 0)
                goto LABEL_182;
              v58 = (*((_WORD *)v55 + 17) & 0x3F) - 1;
            }
            NullValue = (uint64_t)a2;
            if (!v58)
              goto LABEL_182;
LABEL_166:
            v59 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
            if (v59 >= v58)
              v60 = v58;
            else
              v60 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
            LODWORD(v183) = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
            if (v59 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            else
              __src = 0;
            sub_1C4912E54(&__src, 0, v60);
            v61 = *((unsigned int *)a3 + 8);
            if (v61 >= 0x41)
            {
              v63 = ((unint64_t)(v61 + 63) >> 3) & 0x3FFFFFF8;
              v64 = (char *)operator new[]();
              v65 = (char *)*v30;
              memcpy(v64, v65, v63);
              v66 = 0;
              v67 = (char *)__src;
              do
              {
                *(_QWORD *)&v64[v66] &= *(_QWORD *)&v67[v66];
                v66 += 8;
              }
              while (v63 != v66);
              v68 = memcmp(v64, v65, v63);
              MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
              if (!v68)
                goto LABEL_173;
            }
            else if ((*v30 & ~(unint64_t)__src) == 0)
            {
LABEL_173:
              NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a3, a2);
              v62 = 1;
LABEL_178:
              if (v183 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              if ((v62 & 1) != 0)
                return (llvm::ValueHandleBase *)NullValue;
LABEL_182:
              v69 = *((unsigned __int8 *)a2 + 16);
              if (v69 == 17)
              {
                v70 = *((unsigned __int8 *)a3 + 16);
                if (v70 != 17)
                  goto LABEL_266;
                v76 = (_QWORD *)*((_QWORD *)a2 + 4);
                if (v76 == (_QWORD *)&unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v183, (llvm::Constant *)((char *)a2 + 32));
                }
                else
                {
                  v183 = *((_QWORD *)a2 + 4);
                  if ((*((_DWORD *)v76 + 2) + 64) >= 0x80)
                    v184 = operator new[]();
                  v77 = *((_BYTE *)a2 + 52);
                  v78 = v77 & 7;
                  BYTE4(v185) = BYTE4(v185) & 0xF0 | v77 & 0xF;
                  LODWORD(v185) = *((_DWORD *)a2 + 12);
                  v80 = (v77 & 6) != 0 && v78 != 3;
                  if (v78 == 1 || v80)
                  {
                    v81 = *(unsigned int *)(v183 + 8);
                    if ((v81 - 64) <= 0xFFFFFF7F)
                      v82 = (uint64_t *)v184;
                    else
                      v82 = &v184;
                    v83 = (uint64_t *)((char *)a2 + 40);
                    if ((*(_DWORD *)(*((_QWORD *)a2 + 4) + 8) - 64) < 0xFFFFFF80)
                      v83 = (uint64_t *)*((_QWORD *)a2 + 5);
                    if (v81 <= 0xFFFFFFBF)
                    {
                      v84 = (unint64_t)(v81 + 64) >> 6;
                      do
                      {
                        v85 = *v83++;
                        *v82++ = v85;
                        --v84;
                      }
                      while (v84);
                    }
                  }
                }
                v86 = 1;
                v87 = (char *)a3 + 24;
                switch((int)this)
                {
                  case 14:
                    sub_1C47B4138((uint64_t)&__src, (uint64_t)v87, 1);
                    goto LABEL_251;
                  case 16:
                    sub_1C48DB604((uint64_t)&__src, (uint64_t)v87, 1);
                    goto LABEL_251;
                  case 18:
                    sub_1C48DB628((uint64_t)&__src, (uint64_t)v87, 1);
                    goto LABEL_251;
                  case 21:
                    sub_1C47B1140((uint64_t)&__src, (uint64_t)v87, 1);
                    goto LABEL_251;
                  case 24:
                    sub_1C6187438((uint64_t)&__src, (uint64_t)v87);
LABEL_251:
                    NullValue = (uint64_t)llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)&__src, v88);
                    v86 = 0;
                    break;
                  default:
                    break;
                }
                if ((_UNKNOWN *)v183 == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v184);
                }
                else if ((*(_DWORD *)(v183 + 8) - 64) <= 0xFFFFFF7F && v184)
                {
                  MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
                }
                if ((v86 & 1) == 0)
                  return (llvm::ValueHandleBase *)NullValue;
              }
              else if (v69 == 16)
              {
                v70 = *((unsigned __int8 *)a3 + 16);
                if (v70 == 16)
                {
                  v71 = (const void **)((char *)a2 + 24);
                  v72 = (llvm::Constant *)((char *)a3 + 24);
                  switch((int)this)
                  {
                    case 13:
                      v73 = **(llvm::ConstantInt ***)a2;
                      v74 = *((unsigned int *)a2 + 8);
                      if (v74 < 0x41)
                      {
                        v75 = (unint64_t)*v71 + *(_QWORD *)v72;
                        goto LABEL_303;
                      }
                      v131 = (void *)operator new[]();
                      memcpy(v131, *v71, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
                      v157 = 0;
                      v158 = *(unint64_t **)v72;
                      v159 = (unint64_t)(v74 + 63) >> 6;
                      v160 = (unint64_t *)v131;
                      v161 = v159;
                      do
                      {
                        v162 = *v158++;
                        v163 = v162 + *v160;
                        v164 = v163 + 1 <= *v160;
                        if (v157)
                        {
                          ++v163;
                          v157 = v164;
                        }
                        else
                        {
                          v157 = v163 < *v160;
                        }
                        *v160++ = v163;
                        --v161;
                      }
                      while (v161);
                      goto LABEL_349;
                    case 15:
                      v73 = **(llvm::ConstantInt ***)a2;
                      v74 = *((unsigned int *)a2 + 8);
                      if (v74 < 0x41)
                      {
                        v75 = (unint64_t)*v71 - *(_QWORD *)v72;
LABEL_303:
                        v129 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v74;
                        if (!(_DWORD)v74)
                          v129 = 0;
                        goto LABEL_305;
                      }
                      v131 = (void *)operator new[]();
                      memcpy(v131, *v71, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
                      v165 = 0;
                      v166 = *(unint64_t **)v72;
                      v159 = (unint64_t)(v74 + 63) >> 6;
                      v167 = (unint64_t *)v131;
                      v168 = v159;
                      do
                      {
                        v169 = *v166++;
                        v170 = *v167 - v169;
                        v171 = *v167 < v169;
                        v172 = *v167 + ~v169;
                        if (v165)
                        {
                          v165 = v172 >= *v167;
                        }
                        else
                        {
                          v172 = v170;
                          v165 = v171;
                        }
                        *v167++ = v172;
                        --v168;
                      }
                      while (v168);
LABEL_349:
                      *((_QWORD *)v131 + (v159 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v74;
                      goto LABEL_350;
                    case 17:
                      v132 = **(llvm::ConstantInt ***)a2;
                      llvm::APInt::operator*((uint64_t)v71, (_QWORD *)a3 + 3, (uint64_t)&__src);
                      goto LABEL_378;
                    case 19:
                      v132 = **(llvm::ConstantInt ***)a2;
                      llvm::APInt::udiv((llvm::APInt *)v71, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
                      goto LABEL_378;
                    case 20:
                      v130 = *((_DWORD *)a3 + 8);
                      if (!v130)
                        goto LABEL_352;
                      if (v130 > 0x40)
                      {
                        if (llvm::APInt::countTrailingOnesSlowCase(v72) != v130)
                          goto LABEL_354;
                      }
                      else if (*(_QWORD *)v72 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v130)
                      {
                        goto LABEL_354;
                      }
LABEL_352:
                      v174 = *((_DWORD *)a2 + 8);
                      if (v174 <= 0x40)
                      {
                        if (*v71 == (const void *)(1 << (v174 - 1)))
                          goto LABEL_358;
                        goto LABEL_354;
                      }
                      if (((*((_QWORD *)*v71 + ((v174 - 1) >> 6)) >> (v174 - 1)) & 1) != 0
                        && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a2 + 3) == v174 - 1)
                      {
LABEL_358:
                        v92 = *(llvm::PoisonValue **)a2;
                        return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v92, a2);
                      }
LABEL_354:
                      v132 = **(llvm::ConstantInt ***)a2;
                      llvm::APInt::sdiv((llvm::APInt *)v71, (const void **)v72, (llvm::APInt *)&__src);
                      goto LABEL_378;
                    case 22:
                      v132 = **(llvm::ConstantInt ***)a2;
                      llvm::APInt::urem((llvm::APInt *)v71, (llvm::Constant *)((char *)a3 + 24), (llvm::APInt *)&__src);
                      goto LABEL_378;
                    case 23:
                      v133 = *((_DWORD *)a3 + 8);
                      if (!v133)
                        goto LABEL_356;
                      if (v133 > 0x40)
                      {
                        if (llvm::APInt::countTrailingOnesSlowCase(v72) != v133)
                          goto LABEL_377;
                      }
                      else if (*(_QWORD *)v72 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v133)
                      {
                        goto LABEL_377;
                      }
LABEL_356:
                      v175 = *((_DWORD *)a2 + 8);
                      if (v175 > 0x40)
                      {
                        if (((*((_QWORD *)*v71 + ((v175 - 1) >> 6)) >> (v175 - 1)) & 1) != 0
                          && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a2 + 3) == v175 - 1)
                        {
                          goto LABEL_358;
                        }
                      }
                      else if (*v71 == (const void *)(1 << (v175 - 1)))
                      {
                        goto LABEL_358;
                      }
LABEL_377:
                      v132 = **(llvm::ConstantInt ***)a2;
                      llvm::APInt::srem((llvm::APInt *)v71, (const void **)v72, (llvm::APInt *)&__src);
LABEL_378:
                      v173 = v132;
LABEL_379:
                      NullValue = (uint64_t)llvm::ConstantInt::get(v173, (llvm::LLVMContext *)&__src, a3);
                      if (v183 >= 0x41)
                      {
                        if (__src)
                          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                      }
                      return (llvm::ValueHandleBase *)NullValue;
                    case 25:
                      v134 = *((unsigned int *)a2 + 8);
                      v135 = *((_DWORD *)a3 + 8);
                      v136 = (unint64_t *)v72;
                      if (v135 < 0x41)
                        goto LABEL_313;
                      if (v135 - llvm::APInt::countLeadingZerosSlowCase(v72) >= 0x41)
                        goto LABEL_358;
                      v136 = *(unint64_t **)v72;
LABEL_313:
                      v92 = *(llvm::PoisonValue **)a2;
                      if (*v136 >= v134)
                        return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v92, a2);
                      v132 = *(llvm::ConstantInt **)v92;
                      LODWORD(v183) = v134;
                      if (v134 > 0x40)
                      {
                        __src = (void *)operator new[]();
                        memcpy(__src, *v71, ((v134 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        __src = (void *)*v71;
                      }
                      v176 = sub_1C47EE5B8((uint64_t ***)v72, v134);
                      sub_1C4888094((uint64_t)&__src, v176);
                      goto LABEL_378;
                    case 26:
                      v140 = *((unsigned int *)a2 + 8);
                      v141 = *((_DWORD *)a3 + 8);
                      v142 = (unint64_t *)v72;
                      if (v141 < 0x41)
                        goto LABEL_325;
                      if (v141 - llvm::APInt::countLeadingZerosSlowCase(v72) >= 0x41)
                        goto LABEL_358;
                      v142 = *(unint64_t **)v72;
LABEL_325:
                      v92 = *(llvm::PoisonValue **)a2;
                      if (*v142 >= v140)
                        return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v92, a2);
                      v132 = *(llvm::ConstantInt **)v92;
                      LODWORD(v183) = v140;
                      if (v140 > 0x40)
                      {
                        v177 = (void *)operator new[]();
                        __src = v177;
                        memcpy(v177, *v71, ((v140 + 63) >> 3) & 0x3FFFFFF8);
                        v178 = sub_1C47EE5B8((uint64_t ***)v72, v140);
                        llvm::APInt::tcShiftRight((llvm::APInt *)v177, (unint64_t *)((v140 + 63) >> 6), v178);
                      }
                      else
                      {
                        v143 = (unint64_t)*v71;
                        v144 = sub_1C47EE5B8((uint64_t ***)v72, v140);
                        if ((_DWORD)v140 == v144)
                          __src = 0;
                        else
                          __src = (void *)(v143 >> v144);
                      }
                      goto LABEL_378;
                    case 27:
                      v137 = *((unsigned int *)a2 + 8);
                      v138 = *((_DWORD *)a3 + 8);
                      v139 = v72;
                      if (v138 < 0x41)
                        goto LABEL_319;
                      if (v138 - llvm::APInt::countLeadingZerosSlowCase(v72) >= 0x41)
                        goto LABEL_358;
                      v139 = *(llvm::APInt **)v72;
LABEL_319:
                      v92 = *(llvm::PoisonValue **)a2;
                      if (*(_QWORD *)v139 >= v137)
                        return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v92, a2);
                      v132 = *(llvm::ConstantInt **)v92;
                      LODWORD(v183) = v137;
                      if (v137 > 0x40)
                      {
                        __src = (void *)operator new[]();
                        memcpy(__src, *v71, ((v137 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        __src = (void *)*v71;
                      }
                      llvm::APInt::ashrInPlace((llvm::APInt *)&__src, (uint64_t ***)v72);
                      goto LABEL_378;
                    case 28:
                      v73 = **(llvm::ConstantInt ***)a2;
                      v74 = *((unsigned int *)a2 + 8);
                      if (v74 > 0x40)
                      {
                        v131 = (void *)operator new[]();
                        memcpy(v131, *v71, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
                        v145 = *(unint64_t **)v72;
                        v146 = (unint64_t)(v74 + 63) >> 6;
                        v147 = v131;
                        do
                        {
                          v148 = *v145++;
                          *v147++ &= v148;
                          --v146;
                        }
                        while (v146);
                      }
                      else
                      {
                        v75 = (unint64_t)*v71;
                        v129 = *(_QWORD *)v72;
LABEL_305:
                        v131 = (void *)(v129 & v75);
                      }
LABEL_350:
                      LODWORD(v183) = v74;
                      __src = v131;
                      v173 = v73;
                      goto LABEL_379;
                    case 29:
                      v73 = **(llvm::ConstantInt ***)a2;
                      v74 = *((unsigned int *)a2 + 8);
                      if (v74 > 0x40)
                      {
                        v131 = (void *)operator new[]();
                        memcpy(v131, *v71, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
                        v153 = *(unint64_t **)v72;
                        v154 = (unint64_t)(v74 + 63) >> 6;
                        v155 = v131;
                        do
                        {
                          v156 = *v153++;
                          *v155++ |= v156;
                          --v154;
                        }
                        while (v154);
                      }
                      else
                      {
                        v131 = (void *)(*(_QWORD *)v72 | (unint64_t)*v71);
                      }
                      goto LABEL_350;
                    case 30:
                      v73 = **(llvm::ConstantInt ***)a2;
                      v74 = *((unsigned int *)a2 + 8);
                      if (v74 > 0x40)
                      {
                        v131 = (void *)operator new[]();
                        memcpy(v131, *v71, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
                        v149 = *(unint64_t **)v72;
                        v150 = (unint64_t)(v74 + 63) >> 6;
                        v151 = v131;
                        do
                        {
                          v152 = *v149++;
                          *v151++ ^= v152;
                          --v150;
                        }
                        while (v150);
                      }
                      else
                      {
                        v131 = (void *)(*(_QWORD *)v72 ^ (unint64_t)*v71);
                      }
                      goto LABEL_350;
                    default:
                      goto LABEL_255;
                  }
                }
                if (this > 0x1B || ((1 << (char)this) & 0xED80000) == 0)
                  goto LABEL_266;
                v93 = (llvm::Constant *)((char *)a2 + 24);
                v94 = *((_DWORD *)a2 + 8);
                if (v94 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase(v93) == v94)
                    return a2;
                }
                else if (!*(_QWORD *)v93)
                {
                  return a2;
                }
              }
              else
              {
                v89 = *(llvm::ConstantFP **)a2;
                if (*(_QWORD *)a2 && (*((_DWORD *)v89 + 2) & 0xFE) == 0x12)
                {
                  v90 = llvm::Constant::getSplatValue(a3, 0);
                  if (v90)
                  {
                    v91 = v90;
                    if (this <= 0x17
                      && ((1 << (char)this) & 0xD80000) != 0
                      && llvm::Constant::isNullValue(v90))
                    {
                      v92 = v89;
                      return (llvm::ValueHandleBase *)llvm::PoisonValue::get(v92, a2);
                    }
                    v95 = llvm::Constant::getSplatValue(a2, 0);
                    if (v95)
                    {
                      v96 = (llvm::Constant **)v95;
                      v97 = *((unsigned int *)v89 + 8) | ((unint64_t)(*((_BYTE *)v89 + 8) == 19) << 32);
                      v98 = (_QWORD **)llvm::ConstantFoldBinaryInstruction(this, v95, v91, a4);
                      if (!v98)
                      {
                        v98 = (_QWORD **)*v96;
                        if (*v96)
                        {
                          v188 = v96;
                          v189 = (llvm::Constant **)v91;
                          v181 = **v98 + 1512;
                          LODWORD(__src) = this;
                          v183 = (uint64_t)&v188;
                          v184 = 2;
                          v185 = 0u;
                          v186 = 0u;
                          v187 = 0;
                          v98 = (_QWORD **)sub_1C537D4FC(v181, (uint64_t)v98, (unsigned __int8 *)&__src);
                        }
                      }
                      return (llvm::ValueHandleBase *)llvm::ConstantVector::getSplat(v97, v98, v99);
                    }
                  }
                  if (*((_BYTE *)v89 + 8) == 18)
                  {
                    __src = &v184;
                    v183 = 0x1000000000;
                    v100 = (llvm::Type *)*((unsigned int *)v89 + 8);
                    if ((_DWORD)v100)
                    {
                      v101 = 0;
                      v102 = (llvm::ConstantInt *)(**(_QWORD **)v89 + 1960);
                      while (1)
                      {
                        v103 = (llvm::Constant *)llvm::ConstantInt::get(v102, v101, 0, (BOOL)a4);
                        ElementInstruction = (llvm::Constant *)llvm::ConstantFoldExtractElementInstruction(a2, v103, v104);
                        if (!ElementInstruction)
                        {
                          v115 = *(llvm::ConstantFP **)a2;
                          v116 = *(_QWORD *)(*(_QWORD *)a2 + 24);
                          if (v116)
                          {
                            v194 = a2;
                            v195 = v103;
                            v117 = **(_QWORD **)v115 + 1512;
                            LODWORD(v188) = 61;
                            v189 = &v194;
                            v190 = 2;
                            v191 = 0u;
                            v192 = 0u;
                            v193 = 0;
                            ElementInstruction = (llvm::Constant *)sub_1C537D4FC(v117, v116, (unsigned __int8 *)&v188);
                          }
                          else
                          {
                            ElementInstruction = 0;
                          }
                        }
                        v108 = (llvm::Constant *)llvm::ConstantFoldExtractElementInstruction(a3, v103, v105);
                        if (!v108)
                        {
                          v118 = *(_QWORD ***)a3;
                          v119 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                          if (v119)
                          {
                            v194 = a3;
                            v195 = v103;
                            v120 = **v118 + 1512;
                            LODWORD(v188) = 61;
                            v189 = &v194;
                            v190 = 2;
                            v191 = 0u;
                            v192 = 0u;
                            v193 = 0;
                            v108 = (llvm::Constant *)sub_1C537D4FC(v120, v119, (unsigned __int8 *)&v188);
                          }
                          else
                          {
                            v108 = 0;
                          }
                        }
                        if (this <= 0x17
                          && ((1 << (char)this) & 0xD80000) != 0
                          && (llvm::Constant::isNullValue(v108) & 1) != 0)
                        {
                          break;
                        }
                        v110 = llvm::ConstantFoldBinaryInstruction(this, ElementInstruction, v108, v107);
                        if (!v110)
                        {
                          if (*(_QWORD *)ElementInstruction)
                          {
                            v194 = ElementInstruction;
                            v195 = v108;
                            v113 = *(_QWORD ***)ElementInstruction;
                            v114 = ***(_QWORD ***)ElementInstruction + 1512;
                            LODWORD(v188) = this;
                            v189 = &v194;
                            v190 = 2;
                            v191 = 0u;
                            v192 = 0u;
                            v193 = 0;
                            v110 = sub_1C537D4FC(v114, (uint64_t)v113, (unsigned __int8 *)&v188);
                          }
                          else
                          {
                            v110 = 0;
                          }
                        }
                        v111 = v183;
                        if (v183 >= (unint64_t)HIDWORD(v183))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v184, v183 + 1, 8);
                          v111 = v183;
                        }
                        *((_QWORD *)__src + v111) = v110;
                        v112 = (llvm::Type *)(v183 + 1);
                        LODWORD(v183) = v183 + 1;
                        v101 = (llvm::Type *)((char *)v101 + 1);
                        if (v100 == v101)
                        {
                          v127 = (llvm::FixedVectorType ***)__src;
                          goto LABEL_283;
                        }
                      }
                      NullValue = (uint64_t)llvm::PoisonValue::get(v89, v109);
                    }
                    else
                    {
                      v112 = 0;
                      v127 = (llvm::FixedVectorType ***)&v184;
LABEL_283:
                      NullValue = (uint64_t)llvm::ConstantVector::getImpl(v127, (llvm::Type *)v112);
                      if (!NullValue)
                      {
                        llvm::FixedVectorType::get(**v127, v112);
                        NullValue = sub_1C537B3A4(**v128 + 1288, (uint64_t)v128, v127, v112);
                      }
                    }
                    if (__src != &v184)
                      free(__src);
                    return (llvm::ValueHandleBase *)NullValue;
                  }
                }
              }
LABEL_255:
              if (*((_BYTE *)a2 + 16) == 5)
              {
                if (this <= 0x1E
                  && ((1 << (char)this) & 0x70022000) != 0
                  && *((unsigned __int16 *)a2 + 9) == (_DWORD)this)
                {
                  v121 = (llvm::Constant **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
                  v122 = llvm::ConstantFoldBinaryInstruction(this, v121, a3, a4);
                  if (!v122)
                  {
                    v179 = *v121;
                    if (*v121)
                    {
                      v188 = v121;
                      v189 = (llvm::Constant **)a3;
                      v180 = **(_QWORD **)v179 + 1512;
                      LODWORD(__src) = this;
                      v183 = (uint64_t)&v188;
                      v184 = 2;
                      v185 = 0u;
                      v186 = 0u;
                      v187 = 0;
                      v122 = sub_1C537D4FC(v180, (uint64_t)v179, (unsigned __int8 *)&__src);
                    }
                    else
                    {
                      v122 = 0;
                    }
                  }
                  if (*(_BYTE *)(v122 + 16) != 5 || *(unsigned __int16 *)(v122 + 18) != (_DWORD)this)
                  {
                    v123 = (llvm::Constant **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
                    NullValue = llvm::ConstantFoldBinaryInstruction(this, v123, (llvm::Constant *)v122, a4);
                    if (!NullValue)
                    {
                      v20 = *v123;
                      if (*v123)
                      {
                        v188 = v123;
                        v189 = (llvm::Constant **)v122;
                        goto LABEL_38;
                      }
                      return 0;
                    }
                    return (llvm::ValueHandleBase *)NullValue;
                  }
                }
LABEL_270:
                if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
                {
                  NullValue = 0;
                  switch((int)this)
                  {
                    case 13:
                    case 15:
                      return (llvm::ValueHandleBase *)llvm::ConstantExpr::getXor(a2, a3, a3, a4);
                    case 17:
                      return (llvm::ValueHandleBase *)llvm::ConstantExpr::getAnd(a2, a3, a3, a4);
                    case 19:
                    case 20:
                    case 25:
                    case 26:
                    case 27:
                      return a2;
                    case 22:
                    case 23:
                      v124 = **(uint64_t ***)a2;
                      v125 = *v124;
                      NullValue = *(_QWORD *)(*v124 + 1568);
                      if (!NullValue)
                      {
                        v126 = *(llvm::ConstantInt **)(v125 + 1888);
                        LODWORD(v183) = *(_DWORD *)(v125 + 1896) >> 8;
                        if (v183 > 0x40)
                          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                        else
                          __src = 0;
                        NullValue = (uint64_t)llvm::ConstantInt::get(v126, (llvm::LLVMContext *)&__src, a3);
                        if (v183 >= 0x41 && __src)
                          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                        *(_QWORD *)(v125 + 1568) = NullValue;
                      }
                      break;
                    default:
                      return (llvm::ValueHandleBase *)NullValue;
                  }
                  return (llvm::ValueHandleBase *)NullValue;
                }
                return 0;
              }
              v70 = *((unsigned __int8 *)a3 + 16);
LABEL_266:
              if (v70 == 5 && this <= 0x1E && ((1 << (char)this) & 0x70066000) != 0)
                return (llvm::ValueHandleBase *)llvm::ConstantFoldBinaryInstruction(this, a3, a2, a4);
              goto LABEL_270;
            }
            v62 = 0;
            NullValue = (uint64_t)a2;
            goto LABEL_178;
          case 29:
            NullValue = (uint64_t)a3 + 24;
            v28 = *((_DWORD *)a3 + 8);
            if (v28 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a3 + 24)) == v28)
                return a2;
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::Constant *)((char *)a3 + 24)) == v28)
                return a3;
            }
            else
            {
              if (!*(_QWORD *)NullValue)
                return a2;
              if (!v28 || *(_QWORD *)NullValue == 0xFFFFFFFFFFFFFFFFLL >> -(char)v28)
                return a3;
            }
            goto LABEL_182;
          case 30:
            v29 = (llvm::Constant *)((char *)a3 + 24);
            NullValue = *((unsigned int *)a3 + 8);
            if (NullValue > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v29) == (_DWORD)NullValue)
                return a2;
            }
            else if (!*(_QWORD *)v29)
            {
              return a2;
            }
            if (v10 == 5 && *((unsigned __int16 *)a2 + 9) - 53 <= 1)
              __asm { BR              X11 }
            goto LABEL_182;
          default:
            goto LABEL_182;
        }
      }
      if (v10 != 16 || this > 0x1E || ((1 << (char)this) & 0x70066000) == 0)
        goto LABEL_182;
      NullValue = llvm::ConstantFoldBinaryInstruction(this, a3, a2, a4);
      if (!NullValue)
      {
        v20 = *(llvm::Constant **)a3;
        if (*(_QWORD *)a3)
        {
          v188 = (llvm::Constant **)a3;
          v189 = (llvm::Constant **)a2;
LABEL_38:
          v21 = **(_QWORD **)v20 + 1512;
          LODWORD(__src) = this;
          v183 = (uint64_t)&v188;
          v184 = 2;
          v185 = 0u;
          v186 = 0u;
          v187 = 0;
          return (llvm::ValueHandleBase *)sub_1C537D4FC(v21, (uint64_t)v20, (unsigned __int8 *)&__src);
        }
        return 0;
      }
      return (llvm::ValueHandleBase *)NullValue;
  }
}

llvm::UndefValue *llvm::ConstantFoldCompareInstruction(int a1, unsigned __int8 *a2, unsigned __int8 *a3, BOOL a4)
{
  int v7;
  uint64_t **v8;
  BOOL v9;
  llvm::Type *v10;
  uint64_t **v11;
  int v13;
  int v14;
  const llvm::APInt *v15;
  llvm::Constant *v16;
  BOOL v17;
  unsigned int v18;
  uint64_t **v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t Impl;
  llvm::ConstantInt *v26;
  uint64_t **v27;
  llvm::Constant *Not;
  llvm::ConstantExpr *v29;
  int v30;
  unsigned int v31;
  llvm::APFloatBase *SplatValue;
  BOOL v33;
  uint64_t ***v34;
  llvm::Constant *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ICmp;
  uint64_t v40;
  char *v41;
  char *v42;
  llvm::Type *v43;
  llvm::Type *v44;
  llvm::ConstantInt *v45;
  llvm::Constant *v46;
  llvm::Constant *v47;
  BOOL v48;
  uint64_t ***ElementInstruction;
  llvm::Constant *v50;
  llvm::Constant *v51;
  llvm::Constant *v52;
  BOOL v53;
  uint64_t FCmp;
  uint64_t v55;
  uint64_t v56;
  llvm::Type *v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD **v61;
  uint64_t v62;
  uint64_t v63;
  llvm::FixedVectorType ***v64;
  uint64_t *v65;
  uint64_t v66;
  llvm::ConstantInt *v67;
  unsigned int v68;
  char v69;
  _QWORD **v70;
  uint64_t v71;
  unsigned __int8 **v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  llvm::FixedVectorType ***v77;
  uint64_t v78;
  _BYTE v79[32];
  unsigned __int8 *v80;
  llvm::Constant *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v8 = (uint64_t **)(***(_QWORD ***)a2 + 1888);
  if (*(_QWORD *)a2)
    v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (v9)
  {
    v10 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a2 + 32);
    if (v7 == 19)
      llvm::ScalableVectorType::get(v8, v10);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, v10);
    v8 = v11;
  }
  if (a1 == 15)
    return llvm::Constant::getAllOnesValue((llvm::Constant *)v8, (llvm::Type *)a2);
  if (!a1)
    return (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)v8, (llvm::Type *)a2);
  v13 = a2[16];
  if (v13 == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v8, (llvm::Type *)a2);
  v14 = a3[16];
  if (v14 == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v8, (llvm::Type *)a2);
  if ((v13 - 11) < 2 || (v14 - 11) <= 1)
  {
    if ((a1 & 0xFFFFFFFE) != 0x20)
    {
      v20 = a1 - 32;
      if ((a1 - 32) > 9)
      {
        v21 = (a1 - 8) < 7;
        return (llvm::UndefValue *)llvm::ConstantInt::get((llvm::ConstantInt *)v8, (llvm::Type *)v21, 0, a4);
      }
      if (a2 != a3)
      {
        if (v20 > 9)
          v21 = 0;
        else
          v21 = qword_1C85FCC38[v20];
        return (llvm::UndefValue *)llvm::ConstantInt::get((llvm::ConstantInt *)v8, (llvm::Type *)v21, 0, a4);
      }
    }
    return llvm::UndefValue::get((llvm::UndefValue *)v8, (llvm::Type *)a2);
  }
  if (!llvm::Constant::isNullValue((llvm::Constant *)a2))
  {
    if (!llvm::Constant::isNullValue((llvm::Constant *)a3))
      goto LABEL_46;
    v22 = a2[16];
    if (v22 <= 3 && v22 != 1 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) == 0)
    {
      v19 = *(uint64_t ***)a2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) <= 0xFFu)
      {
        switch(a1)
        {
          case ' ':
            goto LABEL_37;
          case '!':
            goto LABEL_92;
          case '#':
            return llvm::Constant::getAllOnesValue((llvm::Constant *)v8, (llvm::Type *)a2);
          case '$':
            return (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)v8, (llvm::Type *)a2);
          default:
            goto LABEL_46;
        }
      }
    }
    if (a1 == 36)
      return (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)v8, (llvm::Type *)a2);
    if (a1 != 35)
      goto LABEL_46;
    return llvm::Constant::getAllOnesValue((llvm::Constant *)v8, (llvm::Type *)a2);
  }
  v18 = a3[16];
  if (v18 <= 3
    && v18 != 1
    && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a3) & 1) == 0
    && *(_DWORD *)(*(_QWORD *)a3 + 8) <= 0xFFu)
  {
    if (a1 == 33)
    {
      v19 = *(uint64_t ***)a2;
LABEL_92:
      v65 = *v19;
      v66 = *v65;
      Impl = *(_QWORD *)(*v65 + 1560);
      if (!Impl)
      {
        v67 = *(llvm::ConstantInt **)(v66 + 1888);
        v68 = *(_DWORD *)(v66 + 1896);
        LODWORD(v72) = v68 >> 8;
        if (v68 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v71, 1, 0);
        }
        else
        {
          if (v68 <= 0xFF)
            v69 = 0;
          else
            v69 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v68);
          v71 = v69 & 1;
        }
        Impl = (uint64_t)llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v71, v15);
        if (v72 >= 0x41 && v71)
          MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
        *(_QWORD *)(v66 + 1560) = Impl;
      }
      return (llvm::UndefValue *)Impl;
    }
    if (a1 == 32)
    {
      v19 = *(uint64_t ***)a2;
LABEL_37:
      v23 = *v19;
      v24 = *v23;
      Impl = *(_QWORD *)(*v23 + 1568);
      if (!Impl)
      {
        v26 = *(llvm::ConstantInt **)(v24 + 1888);
        LODWORD(v72) = *(_DWORD *)(v24 + 1896) >> 8;
        if (v72 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v71, 0, 0);
        else
          v71 = 0;
        Impl = (uint64_t)llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v71, v15);
        if (v72 >= 0x41)
        {
          if (v71)
            MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
        }
        *(_QWORD *)(v24 + 1568) = Impl;
      }
      return (llvm::UndefValue *)Impl;
    }
  }
LABEL_46:
  v27 = *(uint64_t ***)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 269)
  {
    if (a1 == 33)
    {
      v29 = (llvm::ConstantExpr *)a2;
      goto LABEL_89;
    }
    if (a1 == 32)
    {
      if (a3[16] == 16)
      {
        Not = (llvm::Constant *)llvm::ConstantExpr::getNot((llvm::Constant **)a3, (llvm::Constant *)a2);
        v29 = (llvm::ConstantExpr *)a2;
        return (llvm::UndefValue *)llvm::ConstantExpr::getXor(v29, Not, v15, v16);
      }
      v29 = (llvm::ConstantExpr *)llvm::ConstantExpr::getNot((llvm::Constant **)a2, (llvm::Constant *)a2);
LABEL_89:
      Not = (llvm::Constant *)a3;
      return (llvm::UndefValue *)llvm::ConstantExpr::getXor(v29, Not, v15, v16);
    }
  }
  v30 = a2[16];
  if (v30 == 17)
  {
    if (a3[16] == 17)
    {
      llvm::FCmpInst::compare((uint64_t)(a2 + 24), (uint64_t)(a3 + 24), a1);
      goto LABEL_57;
    }
  }
  else if (v30 == 16 && a3[16] == 16)
  {
    llvm::ICmpInst::compare((uint64_t)(a2 + 24), (uint64_t)(a3 + 24), a1);
LABEL_57:
    v21 = v31;
    return (llvm::UndefValue *)llvm::ConstantInt::get((llvm::ConstantInt *)v8, (llvm::Type *)v21, 0, a4);
  }
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 8) <= 6u && (v30 == 5 || a3[16] == 5))
    {
      v41 = (char *)&loc_1C5357FC0
          + 4 * word_1C85FCC16[sub_1C53587E4((uint64_t ***)a2, (llvm::Constant *)a3)];
      __asm { BR              X10 }
    }
    v42 = (char *)&loc_1C535803C
        + 4
        * word_1C85FCC00[sub_1C5358954((uint64_t)a2, (uint64_t)a3, (a1 - 38) < 4, (uint64_t)v16, v17)- 32];
    __asm { BR              X10 }
  }
  SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
  if (!SplatValue
    || (v34 = (uint64_t ***)SplatValue, (v35 = llvm::Constant::getSplatValue((llvm::Constant *)a3, 0)) == 0))
  {
    if (*((_BYTE *)v27 + 8) == 19)
      return 0;
    v77 = (llvm::FixedVectorType ***)v79;
    v78 = 0x400000000;
    v43 = (llvm::Type *)*((unsigned int *)v27 + 8);
    if ((_DWORD)v43)
    {
      v44 = 0;
      v45 = (llvm::ConstantInt *)(***(_QWORD ***)a2 + 1960);
      do
      {
        v46 = (llvm::Constant *)llvm::ConstantInt::get(v45, v44, 0, v33);
        ElementInstruction = (uint64_t ***)llvm::ConstantFoldExtractElementInstruction((llvm *)a2, v46, v47);
        if (!ElementInstruction)
        {
          v58 = *(uint64_t ***)a2;
          v59 = *(_QWORD *)(*(_QWORD *)a2 + 24);
          if (v59)
          {
            v80 = a2;
            v81 = v46;
            v60 = **v58 + 1512;
            LODWORD(v71) = 61;
            v72 = &v80;
            v73 = 2;
            v74 = 0u;
            v75 = 0u;
            v76 = 0;
            ElementInstruction = (uint64_t ***)sub_1C537D4FC(v60, v59, (unsigned __int8 *)&v71);
          }
          else
          {
            ElementInstruction = 0;
          }
        }
        v50 = (llvm::Constant *)llvm::ConstantInt::get(v45, v44, 0, v48);
        v52 = (llvm::Constant *)llvm::ConstantFoldExtractElementInstruction((llvm *)a3, v50, v51);
        if (!v52)
        {
          v61 = *(_QWORD ***)a3;
          v62 = *(_QWORD *)(*(_QWORD *)a3 + 24);
          if (v62)
          {
            v80 = a3;
            v81 = v50;
            v63 = **v61 + 1512;
            LODWORD(v71) = 61;
            v72 = &v80;
            v73 = 2;
            v74 = 0u;
            v75 = 0u;
            v76 = 0;
            v52 = (llvm::Constant *)sub_1C537D4FC(v63, v62, (unsigned __int8 *)&v71);
          }
          else
          {
            v52 = 0;
          }
        }
        if ((unsigned __int16)a1 <= 0xFu)
          FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)(unsigned __int16)a1, ElementInstruction, v52, 0);
        else
          FCmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(unsigned __int16)a1, (unsigned __int16)ElementInstruction, v52, 0, v53);
        v55 = FCmp;
        v56 = v78;
        if (v78 >= (unint64_t)HIDWORD(v78))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 8);
          v56 = v78;
        }
        v77[v56] = (llvm::FixedVectorType **)v55;
        v57 = (llvm::Type *)(v78 + 1);
        LODWORD(v78) = v78 + 1;
        v44 = (llvm::Type *)((char *)v44 + 1);
      }
      while (v43 != v44);
      v64 = v77;
    }
    else
    {
      v57 = 0;
      v64 = (llvm::FixedVectorType ***)v79;
    }
    Impl = (uint64_t)llvm::ConstantVector::getImpl(v64, (llvm::Type *)v57);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v64, v57);
      Impl = sub_1C537B3A4(**v70 + 1288, (uint64_t)v70, v64, v57);
    }
    if (v77 != (llvm::FixedVectorType ***)v79)
      free(v77);
    return (llvm::UndefValue *)Impl;
  }
  v37 = *((unsigned int *)v27 + 8);
  v38 = *((unsigned __int8 *)v27 + 8) == 19;
  if ((unsigned __int16)a1 <= 0xFu)
    ICmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)(unsigned __int16)a1, v34, v35, 0);
  else
    ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(unsigned __int16)a1, (unsigned __int16)v34, v35, 0, v36);
  return (llvm::UndefValue *)llvm::ConstantVector::getSplat(v37 | (v38 << 32), ICmp, v40);
}

uint64_t sub_1C53587E4(uint64_t ***a1, llvm::Constant *a2)
{
  uint64_t FCmp;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  if (a1 == (uint64_t ***)a2)
    return 9;
  if (*((_BYTE *)a1 + 16) == 5)
    return 16;
  if (*((_BYTE *)a2 + 16) == 5)
    return dword_1C85FCEF0[(int)sub_1C53587E4(a2, a1)];
  FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)1, a1, a2, 0);
  if (FCmp && *(_BYTE *)(FCmp + 16) == 16)
  {
    v6 = *(_DWORD *)(FCmp + 32);
    if (v6 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(FCmp + 24)) != v6)
        return 1;
    }
    else if (*(_QWORD *)(FCmp + 24))
    {
      return 1;
    }
  }
  v7 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)4, a1, a2, 0);
  if (v7 && *(_BYTE *)(v7 + 16) == 16)
  {
    v8 = *(_DWORD *)(v7 + 32);
    if (v8 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 24)) != v8)
        return 4;
    }
    else if (*(_QWORD *)(v7 + 24))
    {
      return 4;
    }
  }
  v9 = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)2, a1, a2, 0);
  if (!v9 || *(_BYTE *)(v9 + 16) != 16)
    return 16;
  v10 = *(_DWORD *)(v9 + 32);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 24)) == v10)
      return 16;
  }
  else if (!*(_QWORD *)(v9 + 24))
  {
    return 16;
  }
  return 2;
}

uint64_t sub_1C5358954(uint64_t a1, uint64_t a2, char a3, uint64_t a4, BOOL a5)
{
  uint64_t NullValue;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  llvm::Type *v12;
  int v13;
  BOOL v14;
  llvm::GlobalValue *v15;
  uint64_t ICmp;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  llvm::GlobalValue *v24;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  unsigned __int8 **v30;
  uint64_t v31;
  unsigned int v32;
  llvm::GlobalValue *v33;
  BOOL v34;
  unsigned __int8 *v35;
  BOOL v36;

  if (a1 == a2)
    return 32;
  NullValue = a2;
  v7 = a1;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 >= 6)
    {
      if (*(unsigned __int8 *)(NullValue + 16) < 6u)
        return dword_1C85FCF98[(int)sub_1C5358954(NullValue, v7, a3 & 1)];
      ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x20, v7, (llvm::Constant *)NullValue, 0, a5);
      if (!ICmp || *(_BYTE *)(ICmp + 16) != 16)
      {
LABEL_58:
        if ((a3 & 1) != 0)
          v19 = 40;
        else
          v19 = 36;
        v26 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v19, v7, (llvm::Constant *)NullValue, 0, v17);
        if (v26 && *(_BYTE *)(v26 + 16) == 16)
        {
          v28 = *(_DWORD *)(v26 + 32);
          if (v28 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v26 + 24)) != v28)
              return v19;
          }
          else if (*(_QWORD *)(v26 + 24))
          {
            return v19;
          }
        }
        if ((a3 & 1) != 0)
          v19 = 38;
        else
          v19 = 34;
        v31 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)v19, v7, (llvm::Constant *)NullValue, 0, v27);
        if (!v31 || *(_BYTE *)(v31 + 16) != 16)
          return 42;
        v32 = *(_DWORD *)(v31 + 32);
        if (v32 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v31 + 24)) == v32)
            return 42;
        }
        else if (!*(_QWORD *)(v31 + 24))
        {
          return 42;
        }
        return v19;
      }
      v18 = *(_DWORD *)(ICmp + 32);
      if (v18 <= 0x40)
      {
        if (*(_QWORD *)(ICmp + 24))
          return 32;
        goto LABEL_58;
      }
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(ICmp + 24)) == v18)
        goto LABEL_58;
      return 32;
    }
    if (v8 <= 3)
    {
      v20 = *(unsigned __int8 *)(NullValue + 16);
      if (v20 != 5)
      {
        if (v20 <= 3)
        {
          v15 = (llvm::GlobalValue *)v7;
LABEL_55:
          v24 = (llvm::GlobalValue *)NullValue;
          return sub_1C5359EC0(v15, v24);
        }
        if (v20 != 4)
        {
          if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v7) & 1) == 0
            && *(_BYTE *)(v7 + 16) != 1
            && *(_DWORD *)(*(_QWORD *)v7 + 8) < 0x100u)
          {
            return 34;
          }
          return 42;
        }
        return 33;
      }
      return dword_1C85FCF98[(int)sub_1C5358954(NullValue, v7, a3 & 1)];
    }
    if (v8 == 4)
    {
      v21 = *(unsigned __int8 *)(NullValue + 16);
      if (v21 == 4)
      {
        if (*(_QWORD *)(NullValue - 64) == *(_QWORD *)(v7 - 64))
          return 42;
      }
      else if (v21 == 5)
      {
        return dword_1C85FCF98[(int)sub_1C5358954(NullValue, v7, a3 & 1)];
      }
      return 33;
    }
    v9 = *(unsigned __int16 *)(v7 + 18);
    if (v9 > 0x31)
      return 42;
    v10 = *(unsigned __int8 **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    if (((1 << v9) & 0x198000000000) != 0)
      goto LABEL_8;
    if (v9 != 49)
      break;
    v14 = v10[16] > 3u || v10 == 0;
    if (!v14 && NullValue && *(unsigned __int8 *)(NullValue + 16) <= 3u)
    {
      v15 = *(llvm::GlobalValue **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      goto LABEL_55;
    }
LABEL_8:
    if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) == 0x12)
      v11 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v10 + 16) + 8);
    else
      v11 = *(_DWORD *)(*(_QWORD *)v10 + 8);
    if (v11 < 7
      || !llvm::Constant::isNullValue((llvm::Constant *)NullValue)
      || (*(_DWORD *)(*(_QWORD *)v7 + 8) & 0xFD) != 0xD)
    {
      return 42;
    }
    v13 = *(unsigned __int16 *)(v7 + 18);
    if (v13 == 40)
      a3 = 1;
    else
      a3 &= v13 != 39;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
    v7 = (uint64_t)v10;
    if (v10 == (unsigned __int8 *)NullValue)
      return 32;
  }
  if (v9 != 34)
    return 42;
  v22 = *(unsigned __int8 *)(NullValue + 16);
  if (v22 == 19)
  {
    v23 = v10[16] > 3u || v10 == 0;
    if (!v23
      && (llvm::GlobalValue::hasExternalWeakLinkage(*(llvm::GlobalValue **)(v7
                                                                          - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))) & 1) == 0
      && (*(_BYTE *)(v7 + 17) & 2) != 0)
    {
      return 34;
    }
    return 42;
  }
  if (v22 <= 3)
  {
    if (v10[16] >= 4u)
      v33 = 0;
    else
      v33 = *(llvm::GlobalValue **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    if (v33)
      v34 = v33 == (llvm::GlobalValue *)NullValue;
    else
      v34 = 1;
    if (v34 || !sub_1C535A110(v7))
      return 42;
    v15 = v33;
    goto LABEL_55;
  }
  if (v22 != 62 && (v22 != 5 || *(_WORD *)(NullValue + 18) != 34))
    return 42;
  v29 = *(_DWORD *)(NullValue + 20);
  v30 = (v29 & 0x40000000) != 0
      ? *(unsigned __int8 ***)(NullValue - 8)
      : (unsigned __int8 **)(NullValue - 32 * (v29 & 0x7FFFFFF));
  if (v10[16] > 3u)
    return 42;
  v35 = *v30;
  v36 = (*v30)[16] > 3u || v10 == v35;
  if (v36 || !sub_1C535A110(v7) || !sub_1C535A110(NullValue))
    return 42;
  v15 = (llvm::GlobalValue *)v10;
  v24 = (llvm::GlobalValue *)v35;
  return sub_1C5359EC0(v15, v24);
}

llvm::UndefValue *llvm::ConstantFoldGetElementPtr(llvm::GetElementPtrInst *a1, uint64_t *a2, unsigned int a3, uint64_t a4, llvm::Value *a5, uint64_t a6)
{
  unsigned __int8 *v6;
  llvm::Constant **v8;
  unint64_t TypeAtIndex;
  llvm::PoisonValue *v12;
  llvm::Type *v13;
  llvm::PoisonValue *v14;
  int v15;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  llvm::Value *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Constant **v24;
  uint64_t v25;
  llvm::Type **v26;
  uint64_t v27;
  llvm::Type *v28;
  uint64_t **v29;
  llvm::Constant *v30;
  llvm::Type *v31;
  BOOL v32;
  llvm::Type *v33;
  uint64_t v34;
  uint64_t v36;
  llvm::Constant **v37;
  llvm::Constant *v38;
  uint64_t v39;
  uint64_t ElementPtr;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  llvm::ConstantDataSequential *v54;
  int v55;
  BOOL v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::UndefValue *AggregateElement;
  BOOL v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  _QWORD *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  char v71;
  uint64_t v72;
  llvm::APFloatBase *v73;
  BOOL v74;
  _QWORD *v75;
  unsigned int v76;
  unsigned int v77;
  char v78;
  llvm::Constant *v79;
  BOOL v80;
  uint64_t **v81;
  llvm::Type *v82;
  uint64_t **Splat;
  int v84;
  _BOOL4 v85;
  int v86;
  uint64_t *v89;
  llvm::Constant *v90;
  llvm::Constant *v91;
  uint64_t **v92;
  uint64_t **v93;
  llvm::ValueHandleBase *SRem;
  llvm::Constant *v95;
  llvm::ValueHandleBase *SDiv;
  uint64_t *v97;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v99;
  llvm::Type *v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t **v106;
  unsigned int v107;
  llvm::Constant *v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  llvm::ValueHandleBase *Add;
  int v114;
  unint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  llvm::Type *v121;
  llvm::Type **SExtOrBitCast;
  int v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unsigned __int8 *v131;
  llvm::GetElementPtrInst *v132;
  llvm::Constant *v133;
  llvm::APInt *v134;
  unsigned int v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  unsigned __int8 *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  unsigned __int8 *v153;
  char v154;
  llvm::Constant *v155;
  int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  llvm::APFloatBase *ElementAsConstant;
  llvm::Type **v160;
  llvm::Type *v161;
  uint64_t v162;
  unsigned __int8 *v163;
  int v164;
  llvm::Constant **v165;
  uint64_t v166;
  uint64_t v167;
  llvm::Type *v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned int v174;
  _QWORD *v175;
  unint64_t v176;
  llvm::Type *v177;
  char v178;
  char v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  _DWORD *v190;
  _DWORD *v191;
  int v192;
  llvm::Type *v193;
  uint64_t v194;
  _DWORD *v195;
  int v196;
  unsigned int v197;
  llvm::Type **v198;
  uint64_t v199;
  llvm::Constant **v200;
  llvm::GetElementPtrInst *v201;
  unsigned __int8 *v202;
  _BOOL4 v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  llvm::Constant **v210;
  _QWORD *v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  _BYTE v218[128];
  _QWORD v219[4];

  v6 = (unsigned __int8 *)a2;
  v219[2] = *MEMORY[0x1E0C80C00];
  if (!a6)
    return (llvm::UndefValue *)v6;
  v8 = (llvm::Constant **)a5;
  TypeAtIndex = (unint64_t)a1;
  sub_1C4774650(a1, a2, a5, a6);
  v14 = v12;
  v15 = v6[16];
  if (v15 == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get(v12, v13);
  if ((v15 - 11) <= 1)
  {
    if (!a3)
      return llvm::UndefValue::get(v12, v13);
    return (llvm::UndefValue *)llvm::PoisonValue::get(v12, v13);
  }
  v17 = *(_QWORD *)v6;
  if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
  {
    v17 = **(_QWORD **)(v17 + 16);
    v18 = *(unsigned __int8 *)(v17 + 8);
  }
  else
  {
    v18 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  }
  v206 = a3;
  v19 = v18 == 15 && *(_QWORD *)(v17 + 24) == 0;
  v207 = a6;
  if (a6 == 1 || v19)
  {
    v36 = 8 * a6;
    v37 = v8;
    do
    {
      v38 = *v37;
      if ((llvm::Constant::isNullValue(*v37) & 1) == 0 && *((unsigned __int8 *)v38 + 16) - 11 > 1)
        goto LABEL_15;
      ++v37;
      v36 -= 8;
    }
    while (v36);
    if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12 && (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) != 0x12)
      return (llvm::UndefValue *)llvm::ConstantVector::getSplat(*((unsigned int *)v14 + 8) | ((unint64_t)(*((_DWORD *)v14 + 2) == 19) << 32), v6, v39);
    return (llvm::UndefValue *)v6;
  }
LABEL_15:
  v21 = v207;
  if (llvm::Constant::isNullValue((llvm::Constant *)v6))
  {
    v22 = 8 * v207;
    v23 = 8 * v207;
    v24 = v8;
    while (*((unsigned __int8 *)*v24 + 16) - 11 < 2 || llvm::Constant::isNullValue(*v24))
    {
      ++v24;
      v23 -= 8;
      if (!v23)
      {
        v25 = *(_QWORD *)v6;
        if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
          v25 = **(_QWORD **)(v25 + 16);
        v26 = v8 + 1;
        v27 = v22 - 8;
        do
        {
          if (!v27)
            break;
          v28 = *v26++;
          TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)TypeAtIndex, v28, v20);
          v27 -= 8;
        }
        while (TypeAtIndex);
        v29 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)TypeAtIndex, (llvm::Type *)(*(_DWORD *)(v25 + 8) >> 8));
        v30 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)TypeAtIndex, (llvm::Type *)(*(_DWORD *)(v25 + 8) >> 8));
        if (*(_QWORD *)v6)
          v32 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 18;
        else
          v32 = 0;
        if (v32)
        {
          v33 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v6 + 32);
          if (*(_DWORD *)(*(_QWORD *)v6 + 8) == 19)
            llvm::ScalableVectorType::get(v29, v33);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v29, v33);
        }
        while (1)
        {
          v34 = *(_QWORD *)*v8;
          if (v34 && (*(_DWORD *)(v34 + 8) & 0xFE) == 18)
            break;
          ++v8;
          v22 -= 8;
          if (!v22)
            return (llvm::UndefValue *)llvm::Constant::getNullValue(v30, v31);
        }
        v121 = (llvm::Type *)*(unsigned int *)(v34 + 32);
        if (*(_DWORD *)(v34 + 8) == 19)
          llvm::ScalableVectorType::get(v29, v121);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v29, v121);
        return (llvm::UndefValue *)llvm::Constant::getNullValue(v30, v31);
      }
    }
  }
  if (!v6 || v6[16] != 5)
    goto LABEL_75;
  if (*((_WORD *)v6 + 9) == 34 && *((_QWORD *)v6 + 4) == TypeAtIndex)
  {
    SExtOrBitCast = (llvm::Type **)*v8;
    if (llvm::Constant::isNullValue(*v8))
    {
      v216 = v218;
      v217 = 0x1000000000;
      v123 = *((_DWORD *)v6 + 5);
      v124 = v207 + (v123 & 0x7FFFFFFu) - 1;
      if (v124 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v124, 8);
        v123 = *((_DWORD *)v6 + 5);
      }
      if ((v123 & 0x40000000) != 0)
      {
        v126 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
        v125 = v123 & 0x7FFFFFF;
      }
      else
      {
        v125 = v123 & 0x7FFFFFF;
        v126 = &v6[-32 * v125];
      }
      v138 = 32 * v125 - 32;
      v139 = v217;
      v140 = v217 + (v138 >> 5);
      if (v140 > HIDWORD(v217))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v140, 8);
        v139 = v217;
      }
      if (v125 != 1)
      {
        v141 = (uint64_t *)(v126 + 32);
        v142 = (char *)v216 + 8 * v139;
        v143 = 32 * v125 - 32;
        do
        {
          v144 = *v141;
          v141 += 4;
          *v142++ = v144;
          v143 -= 32;
        }
        while (v143);
      }
      LODWORD(v217) = v139 + ((unint64_t)v138 >> 5);
      sub_1C4FA6FB8((unsigned int *)&v216, (_BYTE *)v8 + 8, &v8[v207]);
      v145 = 24;
      if (v6[16] == 62)
        v145 = 64;
      v146 = *(_QWORD *)&v6[v145];
      v147 = *((_DWORD *)v6 + 5);
      if ((v147 & 0x40000000) != 0)
        v148 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
      else
        v148 = &v6[-32 * (v147 & 0x7FFFFFF)];
      v149 = *(_QWORD *)v148;
      v150 = v6[17];
      if (v150 <= 3)
        v151 = 0;
      else
        v151 = ((v150 >> 2) + 0xFFFFFFFF) | 0x100000000;
      ElementPtr = llvm::ConstantExpr::getGetElementPtr(v146, v149, v216, v217, v206 & ((v150 & 2) >> 1), v151, 0);
      v152 = v216;
      if (v216 != v218)
LABEL_224:
        free(v152);
    }
    else
    {
      v127 = 24;
      if (v6[16] == 62)
        v127 = 64;
      v128 = *(_QWORD *)&v6[v127];
      v129 = *((_DWORD *)v6 + 5);
      if ((v129 & 0x40000000) != 0)
      {
        v131 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
        v130 = v129 & 0x7FFFFFF;
      }
      else
      {
        v130 = v129 & 0x7FFFFFF;
        v131 = &v6[-32 * v130];
      }
      v216 = v131 + 32;
      v217 = v128 | 4;
      if (v130 == 1)
        goto LABEL_50;
      v153 = &v131[32 * v130];
      do
      {
        v154 = v217;
        sub_1C4774E38((uint64_t)&v216);
      }
      while (v216 != v153);
      if ((v154 & 4) == 0 || !SExtOrBitCast || *((_BYTE *)SExtOrBitCast + 16) != 16)
        goto LABEL_50;
      v156 = *((_DWORD *)v6 + 5);
      v157 = (v156 & 0x7FFFFFFu) - 1;
      v158 = (v156 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)v6 - 1) : &v6[-32 * (v156 & 0x7FFFFFF)];
      v160 = *(llvm::Type ***)&v158[32 * (v156 & 0x7FFFFFF) - 32];
      v161 = *v160;
      if ((*((_DWORD *)*v160 + 2) & 0xFE) == 0x12)
        goto LABEL_50;
      v216 = v218;
      v217 = 0x1000000000;
      if (v207 + v157 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v207 + v157, 8);
        v156 = *((_DWORD *)v6 + 5);
      }
      v205 = a4;
      if ((v156 & 0x40000000) != 0)
      {
        v163 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
        v162 = v156 & 0x7FFFFFF;
      }
      else
      {
        v162 = v156 & 0x7FFFFFF;
        v163 = &v6[-32 * v162];
      }
      v166 = 32 * (v162 - 1) - 32;
      v167 = v217;
      v168 = (llvm::Type *)(v217 + (v166 >> 5));
      if ((unint64_t)v168 > HIDWORD(v217))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, (unint64_t)v168, 8);
        v167 = v217;
      }
      if (v162 != 2)
      {
        v169 = (uint64_t *)(v163 + 32);
        v170 = (char *)v216 + 8 * v167;
        v171 = 32 * v162 - 64;
        do
        {
          v172 = *v169;
          v169 += 4;
          *v170++ = v172;
          v171 -= 32;
        }
        while (v171);
      }
      LODWORD(v217) = v167 + ((unint64_t)v166 >> 5);
      v173 = v6;
      if (v161 == *SExtOrBitCast)
      {
        a4 = v205;
      }
      else
      {
        if (*((_DWORD *)v161 + 2) >> 8 <= *((_DWORD *)*SExtOrBitCast + 2) >> 8)
          v174 = *((_DWORD *)*SExtOrBitCast + 2) >> 8;
        else
          v174 = *((_DWORD *)v161 + 2) >> 8;
        if (v174 <= 0x40)
          v174 = 64;
        v175 = *(_QWORD **)v161;
        LODWORD(v210) = v174;
        a4 = v205;
        if (v174 == 64)
        {
          v176 = *v175 + 1984;
        }
        else if (v174 == 128)
        {
          v176 = *v175 + 2008;
          a4 = v205;
        }
        else
        {
          v190 = sub_1C5270984(*v175 + 2168, &v210);
          v176 = *((_QWORD *)v190 + 1);
          a4 = v205;
          if (!v176)
          {
            v191 = v190;
            v176 = sub_1C484358C(*v175 + 2040, 24, 3);
            v192 = (int)v210;
            *(_QWORD *)v176 = v175;
            *(_QWORD *)(v176 + 16) = 0;
            *(_QWORD *)(v176 + 8) = (v192 << 8) | 0xDu;
            *((_QWORD *)v191 + 1) = v176;
          }
        }
        SExtOrBitCast = (llvm::Type **)llvm::ConstantExpr::getSExtOrBitCast(SExtOrBitCast, (llvm::Type ***)v176, v168);
        v160 = (llvm::Type **)llvm::ConstantExpr::getSExtOrBitCast(v160, (llvm::Type ***)v176, v177);
      }
      v180 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xD, (llvm::Constant *)SExtOrBitCast, (llvm::Constant *)v160, v155);
      if (!v180)
      {
        v193 = *SExtOrBitCast;
        if (*SExtOrBitCast)
        {
          v219[0] = SExtOrBitCast;
          v219[1] = v160;
          v194 = **(_QWORD **)v193 + 1512;
          LODWORD(v210) = 13;
          v211 = v219;
          v212 = 2;
          v213 = 0u;
          v214 = 0u;
          v215 = 0;
          v180 = sub_1C537D4FC(v194, (uint64_t)v193, (unsigned __int8 *)&v210);
        }
        else
        {
          v180 = 0;
        }
        a4 = v205;
      }
      v181 = v217;
      if (v217 >= HIDWORD(v217))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v216, (uint64_t)v218, v217 + 1, 8);
        v181 = v217;
      }
      *((_QWORD *)v216 + v181) = v180;
      LODWORD(v217) = v217 + 1;
      sub_1C4FA6FB8((unsigned int *)&v216, (_BYTE *)v8 + 8, &v8[v207]);
      v6 = v173;
      v182 = v173[17];
      v183 = *((_DWORD *)v173 + 5);
      v184 = (v183 & 0x7FFFFFF) - 2;
      v32 = v184 == (v182 >> 2) - 1;
      v185 = v184 != (v182 >> 2) - 1;
      v186 = (v182 >> 2) - 1;
      if (v32)
        v186 = 0;
      v187 = v185 << 32;
      if (v182 < 4)
      {
        v186 = 0;
        v187 = 0;
      }
      v188 = 24;
      if (v173[16] == 62)
        v188 = 64;
      if ((v183 & 0x40000000) != 0)
        v189 = (unsigned __int8 *)*((_QWORD *)v173 - 1);
      else
        v189 = &v173[-32 * (v183 & 0x7FFFFFF)];
      ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(_QWORD *)&v173[v188], *(_QWORD *)v189, v216, v217, v206 & (v182 >> 1), v187 | v186, 0);
      v152 = v216;
      if (v216 != v218)
        goto LABEL_224;
    }
    if (ElementPtr)
      return (llvm::UndefValue *)ElementPtr;
  }
LABEL_50:
  v21 = v207;
  if (v207 >= 2
    && *((unsigned __int16 *)v6 + 9) - 38 <= 0xC
    && llvm::Constant::isNullValue(*v8))
  {
    v41 = *(uint64_t **)&v6[-32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
    v42 = *v41;
    if (*(_BYTE *)(*v41 + 8) != 15)
      v42 = 0;
    v43 = *(_QWORD *)v6;
    if (*(_BYTE *)(*(_QWORD *)v6 + 8) != 15)
      v43 = 0;
    v44 = !v42 || v43 == 0;
    if (!v44 && *(_QWORD *)(v42 + 24) && *(_QWORD *)(v43 + 24))
    {
      if (*(_BYTE *)(**(_QWORD **)(v42 + 16) + 8) == 17)
        v45 = **(_QWORD **)(v42 + 16);
      else
        v45 = 0;
      v46 = **(_QWORD **)(v43 + 16);
      if (*(_BYTE *)(v46 + 8) != 17)
        v46 = 0;
      v47 = !v45 || v46 == 0;
      if (!v47
        && *(_QWORD *)(v45 + 24) == *(_QWORD *)(v46 + 24)
        && (*(_DWORD *)(v43 + 8) ^ *(_DWORD *)(v42 + 8)) <= 0xFF)
      {
        return (llvm::UndefValue *)llvm::ConstantExpr::getGetElementPtr(v45, v41, v8, v207, v206, a4, 0);
      }
    }
  }
LABEL_75:
  v216 = v218;
  v217 = 0x800000000;
  v48 = *(_QWORD *)v6;
  v210 = v8;
  v211 = (_QWORD *)(TypeAtIndex | 4);
  v49 = *((unsigned __int8 *)*v8 + 16) - 17 < 0xFFFFFFFE;
  if ((_DWORD)v21 == 1)
  {
LABEL_182:
    ElementPtr = 0;
    if ((v49 & 1) != 0 || (v206 & 1) != 0)
      goto LABEL_187;
    if (v6[16] != 3 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) != 0)
      goto LABEL_186;
    if ((llvm::Constant::isNullValue(*v8) & 1) != 0)
    {
LABEL_199:
      v118 = TypeAtIndex;
      v119 = v6;
      v117 = v8;
      v115 = v207;
      v120 = 1;
      goto LABEL_181;
    }
    v132 = (llvm::GetElementPtrInst *)TypeAtIndex;
    v133 = *v8;
    if (*v8 && *((_BYTE *)v133 + 16) == 16)
    {
      v134 = (llvm::Constant *)((char *)v133 + 24);
      v135 = *((_DWORD *)v133 + 8);
      if (v135 <= 0x40)
      {
        v136 = *(_QWORD *)v134;
LABEL_208:
        v137 = v136 == 1;
        goto LABEL_250;
      }
    }
    else
    {
      if ((*((_BYTE *)v133 + 40) & 1) != 0)
      {
        if ((*((_BYTE *)v133 + 40) & 2) == 0)
          goto LABEL_186;
      }
      else
      {
        *((_BYTE *)v133 + 40) |= 1u;
        if (llvm::ConstantDataVector::isSplatData(v133))
          v178 = 2;
        else
          v178 = 0;
        v179 = *((_BYTE *)v133 + 40) & 0xFD | v178;
        *((_BYTE *)v133 + 40) = v179;
        if ((v179 & 2) == 0)
          goto LABEL_186;
      }
      ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v133);
      if (!ElementAsConstant || *((_BYTE *)ElementAsConstant + 16) != 16)
        goto LABEL_186;
      v135 = *((_DWORD *)ElementAsConstant + 8);
      if (v135 <= 0x40)
      {
        v136 = *((_QWORD *)ElementAsConstant + 3);
        goto LABEL_208;
      }
      v134 = (llvm::APFloatBase *)((char *)ElementAsConstant + 24);
    }
    v137 = llvm::APInt::countLeadingZerosSlowCase(v134) == v135 - 1;
LABEL_250:
    TypeAtIndex = (unint64_t)v132;
    if (v137)
    {
      v164 = v207 - 1;
      if ((_DWORD)v207 == 1)
        goto LABEL_199;
      v165 = v8 + 1;
      while ((llvm::Constant::isNullValue(*v165) & 1) != 0)
      {
        ++v165;
        if (!--v164)
          goto LABEL_199;
      }
    }
LABEL_186:
    ElementPtr = 0;
    goto LABEL_187;
  }
  v208 = (a4 + 1);
  v209 = a4 & 0xFF00000000;
  v50 = 1;
  v51 = TypeAtIndex;
  v52 = 1;
  v201 = (llvm::GetElementPtrInst *)v51;
  v204 = a4;
  do
  {
    v53 = v51;
    v54 = v8[v50];
    v55 = *((unsigned __int8 *)v54 + 16);
    if ((v55 - 15) > 1)
    {
LABEL_88:
      v49 = 1;
      goto LABEL_89;
    }
    if (v209)
      v56 = v50 == v208;
    else
      v56 = 0;
    v57 = v56;
    if (*((unsigned __int8 *)v8[v50 - 1] + 16) - 17 >= 0xFFFFFFFE && (v57 & 1) == 0)
    {
      v58 = *(unsigned __int8 *)(v53 + 8);
      if (v58 != 16)
      {
        if ((v58 & 0xFE) == 0x12)
          goto LABEL_88;
        if (v55 == 16)
        {
          v199 = v50 - 1;
          if (sub_1C5359E38(*(_QWORD *)(v53 + 32), (uint64_t)v54))
            goto LABEL_89;
          v66 = (_QWORD *)((char *)v54 + 24);
          v67 = *((_DWORD *)v54 + 8);
          v68 = v67 - 1;
          if (v67 >= 0x41)
            v66 = (_QWORD *)(*v66 + 8 * (v68 >> 6));
          if (((*v66 >> v68) & 1) != 0)
            goto LABEL_88;
        }
        else
        {
          v202 = v6;
          v200 = v8;
          v69 = *(_DWORD *)(*(_QWORD *)v54 + 32);
          if (!v69)
          {
LABEL_131:
            v6 = v202;
            a4 = v204;
            v21 = v207;
            v8 = v200;
            goto LABEL_89;
          }
          v199 = v50 - 1;
          v70 = 0;
          v71 = 1;
          do
          {
            v72 = v49;
            v73 = llvm::ConstantDataSequential::getElementAsConstant(v54);
            v74 = sub_1C5359E38(*(_QWORD *)(v53 + 32), (uint64_t)v73);
            v75 = (_QWORD *)((char *)v73 + 24);
            v76 = *((_DWORD *)v73 + 8);
            v77 = v76 - 1;
            if (v76 >= 0x41)
              v75 = (_QWORD *)(*v75 + 8 * (v77 >> 6));
            if (((*v75 >> v77) & 1) != 0)
            {
              v49 = 1;
              goto LABEL_131;
            }
            v49 = v72;
            v71 &= v74;
            ++v70;
          }
          while (v69 != v70);
          v78 = v71 | v72;
          v6 = v202;
          a4 = v204;
          v21 = v207;
          v8 = v200;
          if ((v78 & 1) != 0)
            goto LABEL_89;
          LODWORD(v49) = 0;
        }
        if (*(_BYTE *)(v48 + 8) == 16)
          goto LABEL_88;
        v197 = v49;
        sub_1C515FA1C((uint64_t)&v216, v21);
        v81 = (uint64_t **)*((_QWORD *)v216 + v199);
        if (!v81)
          v81 = (uint64_t **)v8[v199];
        v82 = *(llvm::Type **)(v53 + 32);
        Splat = (uint64_t **)v8[v50];
        v84 = (*Splat)[1] & 0xFE;
        v85 = v84 == 18;
        v86 = (*v81)[1] & 0xFE;
        if (v86 == 18)
          v85 = 1;
        v203 = v85;
        if (v84 != 18 && v86 == 18)
        {
          Splat = (uint64_t **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)*v81 + 8), Splat, v79);
        }
        else if (v86 != 18 && v84 == 18)
        {
          v81 = (uint64_t **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)*Splat + 8), v81, v79);
        }
        v89 = *Splat;
        if (((*Splat)[1] & 0xFE) == 0x12)
          v89 = *(uint64_t **)v89[2];
        v92 = (uint64_t **)llvm::ConstantInt::get((llvm::ConstantInt *)v89, v82, 0, v80);
        if (v203)
        {
          if (v86 == 18)
            v93 = v81;
          else
            v93 = Splat;
          v92 = (uint64_t **)llvm::ConstantDataVector::getSplat((llvm::ConstantDataVector *)*((unsigned int *)*v93 + 8), v92, v90);
        }
        SRem = llvm::ConstantExpr::getSRem((llvm::ConstantExpr *)Splat, (llvm::Constant *)v92, v90, v91);
        *((_QWORD *)v216 + v50) = SRem;
        SDiv = llvm::ConstantExpr::getSDiv((llvm::ConstantExpr *)Splat, (llvm::Constant *)v92, 0, v95);
        v97 = *v81;
        v198 = (llvm::Type **)SDiv;
        if (((*v81)[1] & 0xFE) == 0x12)
          v97 = *(uint64_t **)v97[2];
        v196 = v86;
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v97);
        v99 = *v198;
        v100 = *v198;
        if ((*((_DWORD *)*v198 + 2) & 0xFE) == 0x12)
          v100 = (llvm::Type *)**((_QWORD **)v99 + 2);
        v101 = llvm::Type::getPrimitiveSizeInBits(v100);
        if (PrimitiveSizeInBits <= v101)
          v102 = v101;
        else
          v102 = PrimitiveSizeInBits;
        if (v102 <= 0x40)
          v103 = 64;
        else
          v103 = v102;
        v104 = *(_QWORD **)v99;
        LODWORD(v219[0]) = v103;
        if (v103 == 64)
        {
          v105 = *v104 + 1984;
        }
        else if (v103 == 128)
        {
          v105 = *v104 + 2008;
        }
        else
        {
          v195 = sub_1C5270984(*v104 + 2168, v219);
          v105 = *((_QWORD *)v195 + 1);
          if (!v105)
          {
            v105 = sub_1C484358C(*v104 + 2040, 24, 3);
            v114 = v219[0];
            *(_QWORD *)v105 = v104;
            *(_QWORD *)(v105 + 16) = 0;
            *(_DWORD *)(v105 + 8) = (v114 << 8) | 0xD;
            *(_DWORD *)(v105 + 12) = 0;
            *((_QWORD *)v195 + 1) = v105;
          }
        }
        if (v203)
        {
          if (v196 == 18)
            v106 = v81;
          else
            v106 = Splat;
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v105, (llvm::Type *)*((unsigned int *)*v106 + 8));
        }
        a4 = v204;
        v21 = v207;
        v107 = *((_DWORD *)*v81 + 2);
        if ((v107 & 0xFE) == 0x12)
          v107 = *(_DWORD *)(*(_QWORD *)(*v81)[2] + 8);
        if (v107 != 13 || v107 >> 8 != v103)
          v81 = (uint64_t **)sub_1C537D3B8(40);
        v108 = (llvm::Constant *)v198;
        v109 = *((_DWORD *)*v198 + 2);
        if ((v109 & 0xFE) == 0x12)
          v109 = *(_DWORD *)(**((_QWORD **)*v198 + 2) + 8);
        v110 = v109;
        v111 = v109 >> 8;
        if (v110 != 13 || v111 != v103)
          v108 = (llvm::Constant *)sub_1C537D3B8(40);
        v49 = v197;
        Add = llvm::ConstantExpr::getAdd((llvm::ConstantExpr *)v81, v108, 0, 0);
        *((_QWORD *)v216 + v199) = Add;
      }
    }
LABEL_89:
    v59 = sub_1C4843D7C((uint64_t)&v210);
    v60 = *(_QWORD *)(v59 + 8);
    v51 = v60 & 0xFFFFFFFFFFFFFFF8;
    if ((v60 & 4) == 0 || !v51)
    {
      AggregateElement = **(llvm::UndefValue ***)v59;
      if (AggregateElement)
        v62 = *((_BYTE *)AggregateElement + 16) == 16;
      else
        v62 = 0;
      if (!v62)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v65 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v63 = (unsigned int *)((char *)AggregateElement + 24);
      v64 = v65;
      if (v63[2] < 0x41)
        v64 = v63;
      v51 = *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8 * *v64);
    }
    ++v52;
    ++v50;
    v48 = v53;
  }
  while (v52 != (_DWORD)v21);
  v115 = v217;
  TypeAtIndex = (unint64_t)v201;
  if (!(_DWORD)v217)
    goto LABEL_182;
  if ((_DWORD)v21)
  {
    v116 = 0;
    do
    {
      if (!*(_QWORD *)((char *)v216 + v116 * 8))
        *(_QWORD *)((char *)v216 + v116 * 8) = v8[v116];
      ++v116;
    }
    while (v21 != v116);
  }
  v117 = v216;
  v118 = (unint64_t)v201;
  v119 = v6;
  v120 = v206;
LABEL_181:
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(v118, v119, v117, v115, v120, a4, 0);
LABEL_187:
  if (v216 != v218)
    free(v216);
  return (llvm::UndefValue *)ElementPtr;
}

BOOL sub_1C5359E38(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  int v5;
  unsigned int v6;
  unint64_t v7;

  v4 = (_QWORD **)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5 - sub_1C4959174((llvm::APInt *)(a2 + 24)) - 64 >= 0xFFFFFFBF)
  {
    v6 = *(_DWORD *)(a2 + 32);
    if (v6 > 0x40)
    {
      v7 = **v4;
      if ((v7 & 0x8000000000000000) == 0)
        return a1 - 1 >= v7;
    }
    else
    {
      v7 = (uint64_t)((_QWORD)*v4 << -(char)v6) >> -(char)v6;
      if ((v7 & 0x8000000000000000) == 0)
        return a1 - 1 >= v7;
    }
  }
  return 0;
}

uint64_t sub_1C5359EC0(llvm::GlobalValue *this, llvm::GlobalValue *a2)
{
  int v2;
  llvm::GlobalValue *Section;
  uint64_t v6;
  int v7;
  llvm::Module *v8;
  _BOOL4 SemanticInterposition;
  unsigned __int8 *v10;
  unsigned int v11;
  llvm::GlobalValue *v12;
  uint64_t v13;
  int v14;
  llvm::Module *v15;
  _BOOL4 v16;
  uint64_t result;
  unsigned __int8 *v18;
  unsigned int v19;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 1 || *((_BYTE *)a2 + 16) == 1)
    return 42;
  if (v2 == 3)
  {
    Section = llvm::GlobalValue::getSection(this);
    if (v6 == 12
      && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
      && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
    {
      return 42;
    }
  }
  v7 = *((_DWORD *)this + 8);
  if ((v7 & 0xFu) - 5 < 4 || (result = 42, ((1 << (v7 & 0xF)) & 0x614) == 0))
  {
    v8 = (llvm::Module *)*((_QWORD *)this + 5);
    if (v8)
    {
      SemanticInterposition = llvm::Module::getSemanticInterposition(v8);
      v7 = *((_DWORD *)this + 8);
      if (SemanticInterposition && (v7 & 0x4000) == 0)
        return 42;
    }
    if ((v7 & 0xC0) == 0x80)
      return 42;
    if (*((_BYTE *)this + 16) != 3)
    {
LABEL_13:
      if (*((_BYTE *)a2 + 16) == 3)
      {
        v12 = llvm::GlobalValue::getSection(a2);
        if (v13 == 12
          && *(_QWORD *)v12 == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)v12 + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          return 42;
        }
      }
      v14 = *((_DWORD *)a2 + 8);
      if ((v14 & 0xFu) - 5 >= 4 && ((1 << (v14 & 0xF)) & 0x614) != 0)
        return 42;
      v15 = (llvm::Module *)*((_QWORD *)a2 + 5);
      if (v15)
      {
        v16 = llvm::Module::getSemanticInterposition(v15);
        v14 = *((_DWORD *)a2 + 8);
        if (v16 && (v14 & 0x4000) == 0)
          return 42;
      }
      if ((v14 & 0xC0) == 0x80)
        return 42;
      if (*((_BYTE *)a2 + 16) != 3)
        return 33;
      v18 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      v19 = v18[8];
      if (v19 > 0x11)
        goto LABEL_43;
      if (((1 << v19) & 0xAC7F) != 0)
      {
LABEL_24:
        if (!llvm::Type::isEmptyTy((llvm::Type *)v18))
          return 33;
        return 42;
      }
      if (((1 << v19) & 0x30000) == 0)
      {
LABEL_43:
        if ((v19 & 0xFE) != 0x12 && v19 != 21)
          return 42;
      }
      if (!llvm::Type::isSizedDerivedType((uint64_t)v18, 0))
        return 42;
      goto LABEL_24;
    }
    v10 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v11 = v10[8];
    if (v11 > 0x11)
      goto LABEL_33;
    if (((1 << v11) & 0xAC7F) != 0)
      goto LABEL_12;
    if (((1 << v11) & 0x30000) == 0)
    {
LABEL_33:
      if ((v11 & 0xFE) != 0x12 && v11 != 21)
        return 42;
    }
    if (!llvm::Type::isSizedDerivedType((uint64_t)v10, 0))
      return 42;
LABEL_12:
    if ((llvm::Type::isEmptyTy((llvm::Type *)v10) & 1) != 0)
      return 42;
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1C535A110(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::APInt *v8;
  unsigned int v9;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
  {
    v3 = *(_QWORD *)(a1 - 8);
    v2 = v1 & 0x7FFFFFF;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = a1 - 32 * v2;
  }
  if (v2 == 1)
    return 1;
  v4 = (uint64_t *)(v3 + 32);
  v5 = 32 * v2 - 32;
  while (1)
  {
    v6 = *v4;
    if (!*v4 || *(_BYTE *)(*v4 + 16) != 16)
      break;
    v8 = (llvm::APInt *)(v6 + 24);
    v9 = *(_DWORD *)(v6 + 32);
    if (v9 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9)
        return 0;
    }
    else if (*(_QWORD *)v8)
    {
      return 0;
    }
    v4 += 4;
    v5 -= 32;
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t sub_1C535A1B4(llvm::Constant *a1)
{
  char v3;

  if ((sub_1C4E7B480((uint64_t)a1) & 1) != 0)
    return 1;
  if (!a1)
    return 0;
  if ((llvm::Constant::isNullValue(a1) & 1) != 0)
    return 1;
  return sub_1C4E71060((uint64_t)&v3, a1);
}

llvm::ConstantRange *llvm::ConstantRange::ConstantRange(llvm::ConstantRange *this, unsigned int a2, int a3)
{
  unint64_t v4;
  unsigned int v5;
  llvm::APInt *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  *((_DWORD *)this + 2) = a2;
  if (a3)
  {
    if (a2 <= 0x40)
    {
      v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2)
        v4 = 0;
      *(_QWORD *)this = v4;
      goto LABEL_6;
    }
    v9 = -1;
    v10 = 1;
  }
  else
  {
    if (a2 <= 0x40)
    {
      v7 = 0;
      *(_QWORD *)this = 0;
      v6 = (llvm::ConstantRange *)((char *)this + 16);
      *((_DWORD *)this + 6) = a2;
      goto LABEL_8;
    }
    v9 = 0;
    v10 = 0;
  }
  llvm::APInt::initSlowCase(this, v9, v10);
LABEL_6:
  v5 = *((_DWORD *)this + 2);
  v6 = (llvm::ConstantRange *)((char *)this + 16);
  *((_DWORD *)this + 6) = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase(v6, (const void **)this);
    return this;
  }
  v7 = *(_QWORD *)this;
LABEL_8:
  *(_QWORD *)v6 = v7;
  return this;
}

{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  int v10;

  *((_DWORD *)this + 2) = a2;
  if (a3)
  {
    if (a2 <= 0x40)
    {
      v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2)
        v4 = 0;
      *(_QWORD *)this = v4;
      goto LABEL_6;
    }
    v9 = -1;
    v10 = 1;
  }
  else
  {
    if (a2 <= 0x40)
    {
      v6 = 0;
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 6) = a2;
      goto LABEL_8;
    }
    v9 = 0;
    v10 = 0;
  }
  llvm::APInt::initSlowCase(this, v9, v10);
LABEL_6:
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 6) = v5;
  if (v5 > 0x40)
  {
    v8 = (void *)operator new[]();
    *((_QWORD *)this + 2) = v8;
    memcpy(v8, *(const void **)this, (((unint64_t)*((unsigned int *)this + 6) + 63) >> 3) & 0x3FFFFFF8);
    return this;
  }
  v6 = *(_QWORD *)this;
LABEL_8:
  *((_QWORD *)this + 2) = v6;
  return this;
}

uint64_t llvm::ConstantRange::ConstantRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  size_t v6;
  void *v7;
  int v8;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(a1 + 8);
  v8 = v3;
  if (v3 > 0x40)
  {
    v6 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
    v4 = (void *)operator new[]();
    memcpy(v4, *(const void **)a1, v6);
  }
  else
  {
    v4 = *(void **)a1;
  }
  v7 = v4;
  llvm::APInt::operator+=((uint64_t)&v7, 1uLL);
  *(_DWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  return a1;
}

{
  uint64_t v3;
  void *v4;
  size_t v6;
  void *v7;
  int v8;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(a1 + 8);
  v8 = v3;
  if (v3 > 0x40)
  {
    v6 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
    v4 = (void *)operator new[]();
    memcpy(v4, *(const void **)a1, v6);
  }
  else
  {
    v4 = *(void **)a1;
  }
  v7 = v4;
  llvm::APInt::operator+=((uint64_t)&v7, 1uLL);
  *(_DWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t llvm::ConstantRange::ConstantRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

void llvm::ConstantRange::fromKnownBits(llvm::ConstantRange *this@<X0>, const llvm::KnownBits *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  llvm::ConstantRange *v11;
  int v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::ConstantRange *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  const void **v32;
  llvm::ConstantRange *v33;
  size_t v34;
  const void **v35;
  uint64_t v36;
  llvm::ConstantRange *v37;
  int v38;
  llvm::ConstantRange *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  void *v46;
  unsigned int v47;

  v3 = (char)a2;
  v5 = *((_DWORD *)this + 2);
  if (v5 > 0x40)
  {
    v11 = this;
    v12 = llvm::APInt::countLeadingZerosSlowCase(this);
    this = v11;
    if (v12 != v5)
      goto LABEL_14;
  }
  else if (*(_QWORD *)this)
  {
    goto LABEL_14;
  }
  v6 = *((_DWORD *)this + 6);
  if (v6 > 0x40)
  {
    v37 = this;
    v38 = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16));
    this = v37;
    if (v38 == v6)
      goto LABEL_5;
LABEL_14:
    if ((v3 & 1) != 0)
    {
      v19 = *((_QWORD *)this + 2);
      v13 = *((unsigned int *)this + 6);
      v20 = v13 - 1;
      v21 = (v13 - 1) >> 6;
      v22 = (_QWORD *)(v19 + 8 * v21);
      if (v13 < 0x41)
        v22 = (_QWORD *)((char *)this + 16);
      v23 = 1 << v20;
      if (((1 << v20) & *v22) == 0)
      {
        v24 = (llvm::ConstantRange *)(*(_QWORD *)this + 8 * ((v5 - 1) >> 6));
        if (v5 < 0x41)
          v24 = this;
        if (((*(_QWORD *)v24 >> (v5 - 1)) & 1) == 0)
        {
          if (v13 >= 0x41)
          {
            v39 = this;
            v41 = 1 << v20;
            v19 = operator new[]();
            memcpy((void *)v19, *((const void **)v39 + 2), ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
            v23 = v41;
            this = v39;
            v5 = *((_DWORD *)v39 + 2);
          }
          v47 = v5;
          if (v5 > 0x40)
          {
            v34 = (((unint64_t)v5 + 63) >> 3) & 0x3FFFFFF8;
            v35 = (const void **)this;
            v36 = v23;
            v46 = (void *)operator new[]();
            memcpy(v46, *v35, v34);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v46);
            v23 = v36;
            v5 = v47;
            v26 = (unint64_t)v46;
          }
          else
          {
            v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
            if (!v5)
              v25 = 0;
            v26 = v25 & ~*(_QWORD *)this;
          }
          if (v13 > 0x40)
            *(_QWORD *)(v19 + 8 * v21) |= v23;
          else
            v19 |= v23;
          v27 = ~(1 << (v5 - 1));
          if (v5 > 0x40)
            *(_QWORD *)(v26 + 8 * ((v5 - 1) >> 6)) &= v27;
          else
            v26 &= v27;
          v28 = (void *)v19;
          if (v13 >= 0x41)
          {
            v28 = (void *)operator new[]();
            memcpy(v28, (const void *)v19, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
          }
          v43 = v5;
          if (v5 > 0x40)
          {
            v40 = v13;
            v13 = operator new[]();
            memcpy((void *)v13, (const void *)v26, (((unint64_t)v5 + 63) >> 3) & 0x3FFFFFF8);
            v29 = v13;
            LODWORD(v13) = v40;
          }
          else
          {
            v29 = v26;
          }
          v42 = v29;
          llvm::APInt::operator+=((uint64_t)&v42, 1uLL);
          v30 = v43;
          v31 = v42;
          v43 = 0;
          *(_DWORD *)(a3 + 8) = v13;
          *(_QWORD *)a3 = v28;
          *(_DWORD *)(a3 + 24) = v30;
          *(_QWORD *)(a3 + 16) = v31;
          if (v5 >= 0x41 && v26)
            MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
          if (v13 >= 0x41 && v19)
            MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
          return;
        }
      }
    }
    else
    {
      LODWORD(v13) = *((_DWORD *)this + 6);
    }
    if (v13 > 0x40)
    {
      v33 = this;
      v14 = (void *)operator new[]();
      memcpy(v14, *((const void **)v33 + 2), (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8);
      this = v33;
      v5 = *((_DWORD *)v33 + 2);
    }
    else
    {
      v14 = (void *)*((_QWORD *)this + 2);
    }
    v47 = v5;
    if (v5 > 0x40)
    {
      v32 = (const void **)this;
      v46 = (void *)operator new[]();
      memcpy(v46, *v32, (((unint64_t)v5 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v46);
      v5 = v47;
      v16 = (unint64_t)v46;
    }
    else
    {
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      if (!v5)
        v15 = 0;
      v16 = v15 & ~*(_QWORD *)this;
    }
    v45 = v5;
    v44 = v16;
    llvm::APInt::operator+=((uint64_t)&v44, 1uLL);
    v17 = v45;
    v18 = v44;
    *(_DWORD *)(a3 + 8) = v13;
    *(_QWORD *)a3 = v14;
    *(_DWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 16) = v18;
    return;
  }
  if (*((_QWORD *)this + 2))
    goto LABEL_14;
LABEL_5:
  *(_DWORD *)(a3 + 8) = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
    v8 = *(unsigned int *)(a3 + 8);
    *(_DWORD *)(a3 + 24) = v8;
    if (v8 > 0x40)
    {
      v9 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
      v10 = (void *)operator new[]();
      *(_QWORD *)(a3 + 16) = v10;
      memcpy(v10, *(const void **)a3, v9);
      return;
    }
    v7 = *(_QWORD *)a3;
  }
  else
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!v5)
      v7 = 0;
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a3 + 24) = v5;
  }
  *(_QWORD *)(a3 + 16) = v7;
}

uint64_t llvm::ConstantRange::makeAllowedICmpRegion@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, void *a6, int a7, void *a8, int a9, void *__s2, int a11, void *__s1, int a13, uint64_t a14, int a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,int a21,void *a22,int a23)
{
  uint64_t v26;

  v26 = *(unsigned int *)(a2 + 8);
  if (v26 >= 0x41)
  {
    if (memcmp(*(const void **)a2, *(const void **)(a2 + 16), ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v26)
    {
LABEL_3:
      __asm { BR              X10 }
    }
  }
  else if (*(_QWORD *)(a2 + 16) | *(_QWORD *)a2)
  {
    goto LABEL_3;
  }
  return sub_1C4E94384(a3, a2);
}

BOOL llvm::ConstantRange::isEmptySet(const void **this)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
      return 0;
    return llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v2;
  }
  else
  {
    return ((unint64_t)this[2] | (unint64_t)*this) == 0;
  }
}

void llvm::ConstantRange::getUnsignedMax(llvm::ConstantRange *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  int v20;

  v4 = *((unsigned int *)this + 2);
  if (v4 <= 0x40)
  {
    v5 = (char *)*((_QWORD *)this + 2);
    if (*(char **)this == v5)
    {
      if ((_DWORD)v4)
      {
        if (*(_QWORD *)this != 0xFFFFFFFFFFFFFFFFLL >> -(char)v4)
        {
          v5 = *(char **)this;
          goto LABEL_4;
        }
        *((_DWORD *)a2 + 2) = v4;
        v8 = -(int)v4;
        goto LABEL_11;
      }
      *((_DWORD *)a2 + 2) = 0;
    }
    else
    {
      if (*(_QWORD *)this <= (unint64_t)v5)
      {
LABEL_4:
        v6 = *((unsigned int *)this + 6);
        v20 = v6;
        if (v6 > 0x40)
        {
          v18 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
          v5 = (char *)operator new[]();
          memcpy(v5, *((const void **)this + 2), v18);
        }
        v19 = (unint64_t)v5;
        llvm::APInt::operator-=((uint64_t)&v19, 1uLL);
        *((_DWORD *)a2 + 2) = v20;
        v7 = v19;
        goto LABEL_7;
      }
      *((_DWORD *)a2 + 2) = v4;
      if ((_DWORD)v4)
      {
        v8 = -(int)v4;
LABEL_11:
        v7 = 0xFFFFFFFFFFFFFFFFLL >> v8;
LABEL_7:
        *(_QWORD *)a2 = v7;
        return;
      }
    }
    v7 = 0;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)this;
  v5 = (char *)*((_QWORD *)this + 2);
  v10 = (unint64_t)(v4 + 63) >> 3;
  v11 = v10 & 0x3FFFFFF8;
  if (memcmp(*(const void **)this, v5, v11))
  {
    while (v11)
    {
      v12 = *(_QWORD *)(v9 - 8 + v11);
      v13 = *(_QWORD *)&v5[v11 - 8];
      v11 -= 8;
      v14 = v12 > v13;
      if (v12 != v13)
        goto LABEL_18;
    }
    goto LABEL_4;
  }
  if (llvm::APInt::countTrailingOnesSlowCase(this) != (_DWORD)v4)
  {
    v15 = v10 & 0x3FFFFFF8;
    while (v15)
    {
      v16 = *(_QWORD *)(v9 - 8 + v15);
      v17 = *(_QWORD *)&v5[v15 - 8];
      v15 -= 8;
      v14 = v16 > v17;
      if (v16 != v17)
      {
LABEL_18:
        if (v14)
          goto LABEL_20;
        goto LABEL_4;
      }
    }
    goto LABEL_4;
  }
LABEL_20:
  *((_DWORD *)a2 + 2) = v4;
  llvm::APInt::initSlowCase(a2, -1, 1);
}

uint64_t llvm::ConstantRange::getSignedMax@<X0>(llvm::ConstantRange *this@<X0>, llvm::APInt *a2@<X8>)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v4 = (const void **)((char *)this + 16);
  v5 = *((unsigned int *)this + 2);
  if (v5 <= 0x40)
  {
    v6 = *(_QWORD *)this;
    v7 = *((_QWORD *)this + 2);
    if ((*(_QWORD *)this != v7 || (_DWORD)v5 && v6 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v5)
      && v6 << (64 - v5) >> (64 - v5) <= v7 << (64 - v5) >> (64 - v5))
    {
      v8 = *((_DWORD *)this + 6);
      goto LABEL_5;
    }
LABEL_11:
    result = (uint64_t)sub_1C4832EA4(a2, v5, -1, 1);
    v11 = v5 - 1;
    if (*((_DWORD *)a2 + 2) >= 0x41u)
      a2 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * (v11 >> 6));
    v10 = *(_QWORD *)a2 & ~(1 << v11);
    goto LABEL_8;
  }
  v12 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 2);
  v13 = (unint64_t)(v5 + 63) >> 3;
  if (!memcmp(*(const void **)this, (const void *)v7, v13 & 0x3FFFFFF8)
    && llvm::APInt::countTrailingOnesSlowCase(this) == (_DWORD)v5)
  {
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(v12 + 8 * ((v5 - 1) >> 6)) & (1 << (v5 - 1));
  v8 = *((_DWORD *)this + 6);
  v15 = (_QWORD *)(v7 + 8 * ((v8 - 1) >> 6));
  if (v8 < 0x41)
    v15 = v4;
  if ((v14 != 0) == ((*v15 >> (v8 - 1)) & 1))
  {
    v17 = v13 & 0x3FFFFFF8;
    while (v17)
    {
      v18 = *(_QWORD *)(v12 - 8 + v17);
      v19 = *(_QWORD *)(v7 + v17 - 8);
      v17 -= 8;
      if (v18 != v19)
      {
        if (v18 <= v19)
          goto LABEL_5;
        goto LABEL_11;
      }
    }
    goto LABEL_5;
  }
  if (!v14)
    goto LABEL_11;
LABEL_5:
  v21 = v8;
  if (v8 >= 0x41)
  {
    v16 = (((unint64_t)v8 + 63) >> 3) & 0x3FFFFFF8;
    v7 = operator new[]();
    memcpy((void *)v7, *v4, v16);
  }
  v20 = v7;
  result = llvm::APInt::operator-=((uint64_t)&v20, 1uLL);
  *((_DWORD *)a2 + 2) = v21;
  v10 = v20;
LABEL_8:
  *(_QWORD *)a2 = v10;
  return result;
}

BOOL sub_1C535BACC(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * ((v1 - 1) >> 6)) >> (v1 - 1)) & 1) == 0)
      return 0;
    return llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a1) == v1 - 1;
  }
  else
  {
    return *(_QWORD *)a1 == 1 << (v1 - 1);
  }
}

llvm::APInt *llvm::ConstantRange::getUnsignedMin@<X0>(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  _DWORD *v2;
  uint64_t v4;
  char *v5;
  char *v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;

  v2 = this;
  v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    v5 = *(char **)this;
    v6 = (char *)*((_QWORD *)this + 2);
    v7 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    this = (llvm::APInt *)memcmp(*(const void **)this, v6, v7);
    if (!(_DWORD)this)
    {
      this = (llvm::APInt *)llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v2);
      if ((_DWORD)this == (_DWORD)v4)
        return sub_1C4832EA4(a2, v4, 0, 0);
    }
    while (v7)
    {
      v8 = *(_QWORD *)&v5[v7 - 8];
      v9 = *(_QWORD *)&v6[v7 - 8];
      v7 -= 8;
      if (v8 != v9)
      {
        if (v8 <= v9)
          break;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v5 = *(char **)this;
    v6 = (char *)*((_QWORD *)this + 2);
    if (*(char **)this == v6 && (!(_DWORD)v4 || v5 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4)))
      return sub_1C4832EA4(a2, v4, 0, 0);
    if (v5 <= v6)
    {
      *((_DWORD *)a2 + 2) = v4;
LABEL_5:
      *(_QWORD *)a2 = v5;
      return this;
    }
LABEL_13:
    v10 = v2[6];
    if (v10 <= 0x40)
    {
      if (!v6)
        goto LABEL_15;
      return sub_1C4832EA4(a2, v4, 0, 0);
    }
    this = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v2 + 4));
    if ((_DWORD)this != v10)
      return sub_1C4832EA4(a2, v4, 0, 0);
  }
LABEL_15:
  *((_DWORD *)a2 + 2) = v4;
  if (v4 < 0x41)
    goto LABEL_5;
  v11 = (void *)operator new[]();
  *(_QWORD *)a2 = v11;
  return (llvm::APInt *)memcpy(v11, *(const void **)v2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
}

uint64_t llvm::ConstantRange::getSignedMin@<X0>(uint64_t this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v2;
  llvm::APInt *v3;
  unint64_t **v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = this;
  v3 = a2;
  v4 = (unint64_t **)(this + 16);
  v5 = *(unsigned int *)(this + 8);
  if (v5 <= 0x40)
  {
    v6 = *(const void **)this;
    v7 = *(const void **)(this + 16);
    if (*(const void **)this == v7 && (!(_DWORD)v5 || v6 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v5)))
      goto LABEL_8;
    if ((uint64_t)((_QWORD)v6 << (64 - v5)) >> (64 - v5) <= (uint64_t)((_QWORD)v7 << (64 - v5)) >> (64 - v5))
    {
      *((_DWORD *)a2 + 2) = v5;
LABEL_5:
      *(_QWORD *)v3 = v6;
      return this;
    }
    v9 = *(_DWORD *)(this + 24);
    goto LABEL_12;
  }
  v6 = *(const void **)this;
  v7 = *(const void **)(this + 16);
  v11 = (unint64_t)(v5 + 63) >> 3;
  this = memcmp(*(const void **)this, v7, v11 & 0x3FFFFFF8);
  if ((_DWORD)this || (this = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v2), (_DWORD)this != (_DWORD)v5))
  {
    v12 = *((_QWORD *)v6 + ((v5 - 1) >> 6)) & (1 << (v5 - 1));
    v9 = *(_DWORD *)(v2 + 24);
    v13 = (char *)v7 + 8 * ((v9 - 1) >> 6);
    if (v9 < 0x41)
      v13 = v4;
    if ((v12 != 0) == ((*v13 >> (v9 - 1)) & 1))
    {
      v15 = v11 & 0x3FFFFFF8;
      while (v15)
      {
        v16 = *(_QWORD *)((char *)v6 + v15 - 8);
        v17 = *(_QWORD *)((char *)v7 + v15 - 8);
        v15 -= 8;
        if (v16 != v17)
        {
          if (v16 <= v17)
            goto LABEL_14;
          goto LABEL_12;
        }
      }
      goto LABEL_14;
    }
    if (v12)
    {
      *((_DWORD *)v3 + 2) = v5;
      goto LABEL_22;
    }
LABEL_12:
    v10 = v9 - 1;
    if (v9 > 0x40)
    {
      if (((*((_QWORD *)v7 + (v10 >> 6)) >> v10) & 1) == 0)
        goto LABEL_8;
      this = llvm::APInt::countTrailingZerosSlowCase(v4);
      if ((_DWORD)this != v10)
        goto LABEL_8;
    }
    else if (v7 != (const void *)(1 << v10))
    {
      goto LABEL_8;
    }
LABEL_14:
    *((_DWORD *)v3 + 2) = v5;
    if (v5 < 0x41)
      goto LABEL_5;
LABEL_22:
    v14 = (void *)operator new[]();
    *(_QWORD *)v3 = v14;
    return (uint64_t)memcpy(v14, *(const void **)v2, (((unint64_t)*((unsigned int *)v3 + 2) + 63) >> 3) & 0x3FFFFFF8);
  }
LABEL_8:
  this = (uint64_t)sub_1C4832EA4(v3, v5, 0, 0);
  v8 = v5 - 1;
  if (*((_DWORD *)v3 + 2) >= 0x41u)
    v3 = (llvm::APInt *)(*(_QWORD *)v3 + 8 * (v8 >> 6));
  *(_QWORD *)v3 |= 1 << v8;
  return this;
}

#error "1C535BF08: call analysis failed (funcsize=33)"

llvm::ConstantRange *llvm::ConstantRange::inverse@<X0>(llvm::ConstantRange *this@<X0>, uint64_t a2@<X8>)
{
  llvm::ConstantRange *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  llvm::ConstantRange *v10;
  unsigned int v11;
  int v12;
  void *v13;
  const void *v14;

  v2 = this;
  v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    v6 = *((_QWORD *)this + 2);
    this = (llvm::ConstantRange *)memcmp(*(const void **)this, (const void *)v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    if ((_DWORD)this)
      goto LABEL_4;
    if (llvm::APInt::countTrailingOnesSlowCase(v2) != (_DWORD)v4)
    {
      this = (llvm::ConstantRange *)llvm::APInt::countLeadingZerosSlowCase(v2);
      if ((_DWORD)this != (_DWORD)v4)
        goto LABEL_4;
      goto LABEL_19;
    }
LABEL_14:
    v10 = (llvm::ConstantRange *)a2;
    v11 = v4;
    v12 = 0;
    return llvm::ConstantRange::ConstantRange(v10, v11, v12);
  }
  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this == v6 && (!(_DWORD)v4 || v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4))
    goto LABEL_14;
  if (!(v6 | v5))
  {
LABEL_19:
    v10 = (llvm::ConstantRange *)a2;
    v11 = v4;
    v12 = 1;
    return llvm::ConstantRange::ConstantRange(v10, v11, v12);
  }
LABEL_4:
  v7 = *((unsigned int *)v2 + 6);
  if (v7 >= 0x41)
  {
    v6 = operator new[]();
    this = (llvm::ConstantRange *)memcpy((void *)v6, *((const void **)v2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v4) = *((_DWORD *)v2 + 2);
  }
  if (v4 > 0x40)
  {
    v13 = (void *)operator new[]();
    v14 = *(const void **)v2;
    v8 = v13;
    this = (llvm::ConstantRange *)memcpy(v13, v14, (((unint64_t)v4 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v8 = *(void **)v2;
  }
  *(_DWORD *)(a2 + 8) = v7;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 16) = v8;
  return this;
}

#error "1C535C164: call analysis failed (funcsize=72)"

uint64_t llvm::ConstantRange::areInsensitiveToSignednessOfICmpPredicate(const void **this, const llvm::ConstantRange *a2, const llvm::ConstantRange *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *((unsigned int *)this + 2);
  if (v5 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v5)
    {
      return 1;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 1;
  }
  v6 = *((unsigned int *)a2 + 2);
  if (v6 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return 1;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v6)
  {
    return 1;
  }
LABEL_5:
  if (llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)this) && llvm::ConstantRange::isAllNonNegative(a2))
    return 1;
  result = llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)this);
  if ((_DWORD)result)
    return llvm::ConstantRange::isAllNegative(a2);
  return result;
}

BOOL llvm::ConstantRange::isAllNonNegative(llvm::ConstantRange *this)
{
  unint64_t **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;

  v2 = (unint64_t **)((char *)this + 16);
  v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    v4 = *(_QWORD *)this;
    v12 = (v3 - 1) >> 6;
    v13 = *(_QWORD *)(*(_QWORD *)this + 8 * v12) & (1 << (v3 - 1));
    v10 = *((_DWORD *)this + 6);
    v6 = *((_QWORD *)this + 2);
    v14 = (_QWORD *)(v6 + 8 * ((v10 - 1) >> 6));
    if (v10 < 0x41)
      v14 = v2;
    if ((v13 != 0) == ((*v14 >> (v10 - 1)) & 1))
    {
      v15 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
      while (v15)
      {
        v16 = *(_QWORD *)(v4 + v15 - 8);
        v17 = *(_QWORD *)(v6 + v15 - 8);
        v15 -= 8;
        if (v16 != v17)
        {
          if (v16 <= v17)
            goto LABEL_9;
          goto LABEL_7;
        }
      }
      goto LABEL_9;
    }
    if (v13)
    {
      LOBYTE(v8) = v3 - 1;
      goto LABEL_11;
    }
  }
  else
  {
    v4 = *(_QWORD *)this;
    v5 = (uint64_t)(*(_QWORD *)this << -(char)v3) >> -(char)v3;
    v6 = *((_QWORD *)this + 2);
    v7 = v6 << -(char)v3 >> -(char)v3;
    if (v5 < v7 || v5 <= v7)
    {
      LOBYTE(v8) = v3 - 1;
      return ((v4 >> v8) & 1) == 0;
    }
    v10 = *((_DWORD *)this + 6);
  }
LABEL_7:
  v11 = v10 - 1;
  if (v10 > 0x40)
  {
    v21 = v3;
    v19 = v10 - 1;
    v20 = v4;
    if (((*(_QWORD *)(v6 + 8 * (v11 >> 6)) >> (v10 - 1)) & 1) == 0)
      return 0;
    v18 = llvm::APInt::countTrailingZerosSlowCase(v2);
    v4 = v20;
    LODWORD(v3) = v21;
    if (v18 != v19)
      return 0;
LABEL_9:
    v8 = v3 - 1;
    if (v3 >= 0x41)
    {
      v12 = v8 >> 6;
LABEL_11:
      v4 = *(_QWORD *)(v4 + 8 * v12);
    }
    return ((v4 >> v8) & 1) == 0;
  }
  if (v6 == 1 << v11)
    goto LABEL_9;
  return 0;
}

uint64_t llvm::ConstantRange::isAllNegative(llvm::ConstantRange *this)
{
  llvm::APInt *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  llvm::APInt *v14;
  unint64_t i;
  unint64_t v16;
  unint64_t v17;

  v2 = (llvm::ConstantRange *)((char *)this + 16);
  v3 = *((unsigned int *)this + 2);
  if (v3 >= 0x41)
  {
    v8 = *(_QWORD *)this;
    v9 = (char *)*((_QWORD *)this + 2);
    v10 = (unint64_t)(v3 + 63) >> 3;
    if (!memcmp(*(const void **)this, v9, v10 & 0x3FFFFFF8))
    {
      if (llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v3)
        return 1;
      if (llvm::APInt::countTrailingOnesSlowCase(this) == (_DWORD)v3)
        return 0;
    }
    v11 = *(_QWORD *)(v8 + 8 * ((v3 - 1) >> 6)) & (1 << (v3 - 1));
    v12 = *((_DWORD *)this + 6);
    v13 = v12 - 1;
    if (v12 >= 0x41)
      v14 = (llvm::APInt *)&v9[8 * (v13 >> 6)];
    else
      v14 = v2;
    if ((v11 != 0) == ((*(_QWORD *)v14 >> v13) & 1))
    {
      for (i = v10 & 0x3FFFFFF8; i; i -= 8)
      {
        v16 = *(_QWORD *)(v8 - 8 + i);
        v17 = *(_QWORD *)&v9[i - 8];
        if (v16 != v17)
        {
          if (v16 <= v17)
            return sub_1C49591DC(v2) ^ 1;
          return 0;
        }
      }
      return sub_1C49591DC(v2) ^ 1;
    }
    if (v11)
      return sub_1C49591DC(v2) ^ 1;
    return 0;
  }
  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 2);
  if (v5 | *(_QWORD *)this)
  {
    if (v4 != v5)
    {
      v6 = 64 - v3;
      goto LABEL_5;
    }
    if ((_DWORD)v3 && v4 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v3)
    {
      v6 = 64 - v3;
LABEL_5:
      if (v4 << v6 >> v6 <= v5 << v6 >> v6)
        return sub_1C49591DC(v2) ^ 1;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::ConstantRange::areInsensitiveToSignednessOfInvertedICmpPredicate(const void **this, const llvm::ConstantRange *a2, const llvm::ConstantRange *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *((unsigned int *)this + 2);
  if (v5 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v5)
    {
      return 1;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 1;
  }
  v6 = *((unsigned int *)a2 + 2);
  if (v6 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return 1;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v6)
  {
    return 1;
  }
LABEL_5:
  if (llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)this)
    && (llvm::ConstantRange::isAllNegative(a2) & 1) != 0)
  {
    return 1;
  }
  result = llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)this);
  if ((_DWORD)result)
    return llvm::ConstantRange::isAllNonNegative(a2);
  return result;
}

uint64_t llvm::ConstantRange::getEquivalentPredWithFlippedSignedness(int a1, const void **a2, const llvm::ConstantRange *a3)
{
  uint64_t FlippedSignednessPredicate;
  const llvm::ConstantRange *v6;
  const llvm::ConstantRange *v7;

  FlippedSignednessPredicate = llvm::CmpInst::getFlippedSignednessPredicate(a1);
  if ((llvm::ConstantRange::areInsensitiveToSignednessOfICmpPredicate(a2, a3, v6) & 1) != 0)
    return FlippedSignednessPredicate;
  if (!llvm::ConstantRange::areInsensitiveToSignednessOfInvertedICmpPredicate(a2, a3, v7))
    return 42;
  return llvm::CmpInst::getInversePredicate(FlippedSignednessPredicate);
}

uint64_t llvm::ConstantRange::getEquivalentICmp(uint64_t a1, int *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  uint64_t result;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  const llvm::APInt *v21;
  unsigned int v23;
  int v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::APInt *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unint64_t v46;
  const llvm::APInt *v47;
  size_t v48;
  unsigned int v49;
  unsigned int v50;
  void *v51;
  unsigned int v52;
  void *__s2;
  unsigned int v54;

  sub_1C4832EA4((llvm::APInt *)&__s2, *(_DWORD *)(a1 + 8), 0, 0);
  if (*((_DWORD *)a4 + 2) >= 0x41u && *a4)
    MEMORY[0x1CAA32F9C](*a4, 0x1000C8000313F17);
  *a4 = (uint64_t)__s2;
  *((_DWORD *)a4 + 2) = v54;
  v8 = *(unsigned int *)(a1 + 8);
  if (v8 <= 0x40)
  {
    v9 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)a1 == v10)
    {
      if ((_DWORD)v8)
      {
        if (v9 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v8 && v9 != 0)
          goto LABEL_5;
      }
    }
    else if (v10 | v9)
    {
LABEL_5:
      v54 = *(_DWORD *)(a1 + 8);
      __s2 = (void *)v9;
      goto LABEL_6;
    }
LABEL_39:
    if (llvm::ConstantRange::isEmptySet((const void **)a1))
      v24 = 36;
    else
      v24 = 35;
    *a2 = v24;
    result = (uint64_t)sub_1C4832EA4((llvm::APInt *)&__s2, v8, 0, 0);
    if (*((_DWORD *)a3 + 2) >= 0x41u)
    {
      result = (uint64_t)*a3;
      if (*a3)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    *a3 = __s2;
    v20 = v54;
    goto LABEL_21;
  }
  if (!memcmp(*(const void **)a1, *(const void **)(a1 + 16), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
    && (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a1) == (_DWORD)v8
     || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a1) == (_DWORD)v8))
  {
    goto LABEL_39;
  }
  v54 = v8;
  __s2 = (void *)operator new[]();
  memcpy(__s2, *(const void **)a1, (((unint64_t)v54 + 63) >> 3) & 0x3FFFFFF8);
LABEL_6:
  v11 = (const void **)(a1 + 16);
  result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v13 = v54;
  v14 = __s2;
  v54 = 0;
  v15 = *(unsigned int *)(a1 + 24);
  if (v15 > 0x40)
  {
    v25 = __s2;
    v26 = v13;
    result = memcmp(*v11, __s2, ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
    v13 = v26;
    v14 = v25;
    v16 = (_DWORD)result == 0;
  }
  else
  {
    v16 = *v11 == __s2;
  }
  v17 = v16;
  if (v13 >= 0x41)
  {
    if (v14)
    {
      result = MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      if (v54 >= 0x41)
      {
        result = (uint64_t)__s2;
        if (__s2)
          result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v17)
  {
    *a2 = 32;
    if (*((_DWORD *)a3 + 2) <= 0x40u)
    {
      v23 = *(_DWORD *)(a1 + 8);
      goto LABEL_60;
    }
LABEL_88:
    v47 = (const llvm::APInt *)a3;
    v21 = (const llvm::APInt *)a1;
    return (uint64_t)llvm::APInt::assignSlowCase(v47, v21);
  }
  result = (uint64_t)sub_1C535CE68(a1);
  if (result)
  {
    v21 = (const llvm::APInt *)result;
    *a2 = 33;
    if (*((_DWORD *)a3 + 2) <= 0x40u && *(_DWORD *)(result + 8) <= 0x40u)
    {
      *a3 = *(void **)result;
      v20 = *(_DWORD *)(result + 8);
      goto LABEL_21;
    }
    v47 = (const llvm::APInt *)a3;
    return (uint64_t)llvm::APInt::assignSlowCase(v47, v21);
  }
  v18 = *(_DWORD *)(a1 + 8);
  if (v18 > 0x40)
  {
    v27 = *(_DWORD *)(a1 + 8);
    v28 = v18 - 1;
    v29 = (llvm::APInt *)a1;
    if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * ((v18 - 1) >> 6)) >> (v18 - 1)) & 1) != 0)
    {
      result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a1);
      if ((_DWORD)result == v28)
        goto LABEL_99;
      v29 = (llvm::APInt *)a1;
    }
    result = llvm::APInt::countLeadingZerosSlowCase(v29);
    v18 = v27;
    if ((_DWORD)result == v27)
      goto LABEL_17;
    goto LABEL_53;
  }
  if (*(_QWORD *)a1 == 1 << (v18 - 1))
  {
LABEL_99:
    v19 = 40;
LABEL_18:
    *a2 = v19;
    if (*((_DWORD *)a3 + 2) <= 0x40u && *(_DWORD *)(a1 + 24) <= 0x40u)
    {
      *a3 = *(void **)(a1 + 16);
      v20 = *(_DWORD *)(a1 + 24);
LABEL_21:
      *((_DWORD *)a3 + 2) = v20;
      return result;
    }
    v47 = (const llvm::APInt *)a3;
    v21 = (const llvm::APInt *)(a1 + 16);
    return (uint64_t)llvm::APInt::assignSlowCase(v47, v21);
  }
  if (!*(_QWORD *)a1)
  {
LABEL_17:
    v19 = 36;
    goto LABEL_18;
  }
LABEL_53:
  v30 = *(unsigned int *)(a1 + 24);
  if (v30 > 0x40)
  {
    v50 = v18;
    if (((*((_QWORD *)*v11 + ((v30 - 1) >> 6)) >> (v30 - 1)) & 1) != 0
      && (result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(a1 + 16)),
          (_DWORD)result == (_DWORD)v30 - 1))
    {
      v31 = 39;
    }
    else
    {
      result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 16));
      if ((_DWORD)result != (_DWORD)v30)
      {
        *a2 = 36;
        v33 = (void *)operator new[]();
        memcpy(v33, *(const void **)(a1 + 16), ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
        v38 = 0;
        v39 = *(unint64_t **)a1;
        v40 = (unint64_t)(v30 + 63) >> 6;
        v41 = (unint64_t *)v33;
        v42 = v40;
        do
        {
          v43 = *v39++;
          v44 = *v41 - v43;
          v45 = *v41 < v43;
          v46 = *v41 + ~v43;
          if (v38)
          {
            v38 = v46 >= *v41;
          }
          else
          {
            v46 = v44;
            v38 = v45;
          }
          *v41++ = v46;
          --v42;
        }
        while (v42);
        *((_QWORD *)v33 + (v40 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
        goto LABEL_65;
      }
      v31 = 35;
    }
    v18 = v50;
LABEL_58:
    *a2 = v31;
    if (v18 <= 0x40)
    {
      v23 = *((_DWORD *)a3 + 2);
LABEL_60:
      if (v23 <= 0x40)
      {
        *a3 = *(void **)a1;
        v20 = *(_DWORD *)(a1 + 8);
        goto LABEL_21;
      }
      goto LABEL_88;
    }
    goto LABEL_88;
  }
  if (*v11 == (const void *)(1 << (v30 - 1)))
  {
    v31 = 39;
    goto LABEL_58;
  }
  if (!*v11)
  {
    v31 = 35;
    goto LABEL_58;
  }
  *a2 = 36;
  if ((_DWORD)v30)
    v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
  else
    v32 = 0;
  v33 = (void *)(v32 & (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1));
LABEL_65:
  if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
    MEMORY[0x1CAA32F9C](*a3, 0x1000C8000313F17);
  *a3 = v33;
  *((_DWORD *)a3 + 2) = v30;
  v34 = *(unsigned int *)(a1 + 8);
  v52 = v34;
  if (v34 > 0x40)
  {
    v48 = ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8;
    v51 = (void *)operator new[]();
    memcpy(v51, *(const void **)a1, v48);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v51);
  }
  else
  {
    if ((_DWORD)v34)
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
    else
      v35 = 0;
    v51 = (void *)(v35 & ~*(_QWORD *)a1);
  }
  result = llvm::APInt::operator++((uint64_t)&v51);
  v36 = v52;
  v37 = (uint64_t)v51;
  v52 = 0;
  if (*((_DWORD *)a4 + 2) > 0x40u && (result = *a4) != 0)
  {
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v49 = v52;
    *a4 = v37;
    *((_DWORD *)a4 + 2) = v36;
    if (v49 >= 0x41)
    {
      result = (uint64_t)v51;
      if (v51)
        return MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    }
  }
  else
  {
    *a4 = (uint64_t)v51;
    *((_DWORD *)a4 + 2) = v36;
  }
  return result;
}

BOOL llvm::ConstantRange::isFullSet(const void **this)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    if (memcmp(*this, this[2], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
      return 0;
    return llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)this) == (_DWORD)v2;
  }
  else
  {
    if (*this != this[2])
      return 0;
    if (!(_DWORD)v2)
      return 1;
    return *this == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v2);
  }
}

void **sub_1C535CE68(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v11;
  size_t v12;
  const void *v13;
  void *v14;
  int v15;
  const void **v16;
  void *__s2;
  unsigned int v18;

  v2 = (void **)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  v18 = v3;
  if (v3 > 0x40)
  {
    v16 = (const void **)(a1 + 16);
    v11 = ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8;
    v4 = (void *)operator new[]();
    v12 = v11;
    v2 = (void **)v16;
    memcpy(v4, *v16, v12);
  }
  else
  {
    v4 = *v2;
  }
  __s2 = v4;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v5 = v18;
  v6 = __s2;
  v18 = 0;
  v7 = *(unsigned int *)(a1 + 8);
  if (v7 > 0x40)
  {
    v13 = *(const void **)a1;
    v14 = __s2;
    v15 = memcmp(v13, __s2, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    v6 = v14;
    v8 = v15 == 0;
  }
  else
  {
    v8 = *(_QWORD *)a1 == (_QWORD)__s2;
  }
  v9 = v8;
  if (v5 >= 0x41)
  {
    if (v6)
    {
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
      if (v18 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v9)
    return v2;
  else
    return 0;
}

BOOL llvm::ConstantRange::getEquivalentICmp(uint64_t a1, int *a2, void **a3)
{
  unsigned int v4;
  _BOOL4 v5;
  uint64_t v6;
  unsigned int v7;

  v7 = 1;
  v6 = 0;
  llvm::ConstantRange::getEquivalentICmp(a1, a2, a3, &v6);
  if (v7 <= 0x40)
    return v6 == 0;
  v4 = v7;
  v5 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6) == v4;
  if (v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  return v5;
}

#error "1C535D054: call analysis failed (funcsize=54)"

BOOL llvm::ConstantRange::contains(llvm::ConstantRange *this, const llvm::ConstantRange *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    v5 = *(_QWORD *)this;
    v7 = (char *)*((_QWORD *)this + 2);
    if (!memcmp(*(const void **)this, v7, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(this) == (_DWORD)v4)
    {
      return 1;
    }
    v6 = (unint64_t)v7;
  }
  else
  {
    v5 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 2);
    if (*(_QWORD *)this == v6)
    {
      if (!(_DWORD)v4 || v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4)
        return 1;
      v7 = (char *)*((_QWORD *)this + 2);
      v6 = *(_QWORD *)this;
    }
    else
    {
      v7 = (char *)*((_QWORD *)this + 2);
    }
  }
  v8 = *((unsigned int *)a2 + 2);
  if (v8 >= 0x41)
  {
    v9 = *(char **)a2;
    v10 = *((_QWORD *)a2 + 2);
    if (!memcmp(*(const void **)a2, (const void *)v10, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v8)
    {
      return 1;
    }
  }
  else
  {
    v9 = *(char **)a2;
    v10 = *((_QWORD *)a2 + 2);
    if (!(v10 | *(_QWORD *)a2))
      return 1;
  }
  if (v4 >= 0x41)
  {
    if (!memcmp((const void *)v5, v7, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v4)
    {
      return 0;
    }
  }
  else if (!(v6 | v5))
  {
    return 0;
  }
  if (v8 > 0x40)
  {
    if (!memcmp(v9, (const void *)v10, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(a2) == (_DWORD)v8)
    {
      return 0;
    }
  }
  else if (v9 == (char *)v10 && (!(_DWORD)v8 || v9 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v8)))
  {
    return 0;
  }
  if (v4 > 0x40)
  {
    v11 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    while (v11)
    {
      v25 = *(_QWORD *)(v5 - 8 + v11);
      v26 = *(_QWORD *)&v7[v11 - 8];
      v11 -= 8;
      if (v25 != v26)
      {
        if (v25 > v26)
          LODWORD(v11) = 1;
        else
          LODWORD(v11) = -1;
        break;
      }
    }
  }
  else if (v5 < v6)
  {
    LODWORD(v11) = -1;
  }
  else
  {
    LODWORD(v11) = v5 > v6;
  }
  if (v8 > 0x40)
  {
    v27 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v27)
      {
        v12 = 0;
        goto LABEL_17;
      }
      v28 = *(_QWORD *)&v9[v27 - 8];
      v29 = *(_QWORD *)(v10 - 8 + v27);
      v27 -= 8;
    }
    while (v28 == v29);
    if (v28 > v29)
      v12 = 1;
    else
      v12 = -1;
  }
  else
  {
    v12 = (unint64_t)v9 > v10;
    if ((unint64_t)v9 < v10)
      v12 = -1;
  }
LABEL_17:
  if ((int)v11 <= 0)
  {
    if (v12 <= 0)
    {
      if (v4 > 0x40)
      {
        v33 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
        while (v33)
        {
          v34 = *(_QWORD *)(v5 - 8 + v33);
          v35 = *(_QWORD *)&v9[v33 - 8];
          v33 -= 8;
          v13 = v34 > v35;
          if (v34 != v35)
            goto LABEL_21;
        }
      }
      else
      {
        v13 = v5 > (unint64_t)v9;
LABEL_21:
        if (v13)
          return 0;
      }
      v14 = *((unsigned int *)a2 + 6);
      if (v14 <= 0x40)
      {
        v15 = v10 >= v6;
        v16 = v10 > v6;
LABEL_31:
        v19 = v16;
        if (!v15)
          v19 = -1;
        return v19 < 1;
      }
      v36 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      while (v36)
      {
        v37 = *(_QWORD *)(v10 - 8 + v36);
        v38 = *(_QWORD *)&v7[v36 - 8];
        v36 -= 8;
        v24 = v37 > v38;
        if (v37 != v38)
          goto LABEL_85;
      }
LABEL_95:
      v19 = 0;
      return v19 < 1;
    }
    return 0;
  }
  v17 = *((unsigned int *)a2 + 6);
  if (v17 > 0x40)
  {
    v30 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v30)
      {
        v18 = 0;
        goto LABEL_27;
      }
      v31 = *(_QWORD *)(v10 - 8 + v30);
      v32 = *(_QWORD *)&v7[v30 - 8];
      v30 -= 8;
    }
    while (v31 == v32);
    if (v31 > v32)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v18 = v10 > v6;
    if (v10 < v6)
      v18 = -1;
  }
LABEL_27:
  if (v12 > 0)
  {
    if (v18 > 0)
      return 0;
    if (v4 > 0x40)
    {
      v21 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v21)
      {
        v22 = *(_QWORD *)(v5 - 8 + v21);
        v23 = *(_QWORD *)&v9[v21 - 8];
        v21 -= 8;
        v24 = v22 > v23;
        if (v22 != v23)
        {
LABEL_85:
          if (v24)
            v19 = 1;
          else
            v19 = -1;
          return v19 < 1;
        }
      }
      goto LABEL_95;
    }
LABEL_30:
    v15 = v5 >= (unint64_t)v9;
    v16 = v5 > (unint64_t)v9;
    goto LABEL_31;
  }
  if (v18 >= 1)
  {
    if (v4 > 0x40)
    {
      v39 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v39)
      {
        v40 = *(_QWORD *)(v5 - 8 + v39);
        v41 = *(_QWORD *)&v9[v39 - 8];
        v39 -= 8;
        v24 = v40 > v41;
        if (v40 != v41)
          goto LABEL_85;
      }
      goto LABEL_95;
    }
    goto LABEL_30;
  }
  return 1;
}

void llvm::ConstantRange::makeGuaranteedNoWrapRegion(llvm::ConstantRange *this@<X1>, int a2@<W0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  void **p_src;
  unsigned int v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t v12;
  void *v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  const void *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  llvm::APInt *v29;
  llvm::APInt *v30;
  unsigned int v31;
  unint64_t *v32;
  unsigned int v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL4 v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  llvm::APInt *v51;
  unsigned int v52;
  void *v53;
  unint64_t v54;
  llvm::APInt *v55;
  unsigned int v56;
  const void *v57;
  const void *v58;
  unint64_t v59;
  llvm::APInt *v60;
  unint64_t *v61;
  unsigned int v62;
  _BYTE *v63;
  char *v64;
  unsigned int v65;
  void *v66;
  unsigned int v67;
  void *v68;
  unint64_t v69;
  llvm::APInt *v70;
  unsigned int v71;
  void *v72;
  uint64_t **v73;
  unsigned int v74;
  void *v75;
  void **v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t **v83;
  unsigned int v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  llvm::APInt *v88;
  unsigned int v89;
  void *v90;
  size_t v91;
  unsigned int v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t **v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BOOL4 v106;
  unint64_t v107;
  size_t v108;
  size_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BOOL4 v125;
  size_t v126;
  _QWORD *v127;
  _QWORD *v128;
  void *v129;
  unsigned int v130;
  void *v131;
  unsigned int v132;
  llvm::APInt *v133;
  unsigned int v134;
  void *__s1;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t **v139;
  unsigned int v140;
  uint64_t **v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  void *__src;
  unsigned int v146;
  void *__s2;
  unsigned int v148;
  _QWORD *v149;
  unsigned int v150;
  const void *v151;
  unsigned int v152;
  const void *v153;
  unsigned int v154;
  unint64_t v155;
  unsigned int v156;
  const void *v157;
  unsigned int v158;
  char *v159;
  unsigned int v160;
  unint64_t *v161;
  unsigned int v162;

  v7 = *((unsigned int *)this + 2);
  if (a2 == 13)
  {
    if (a3 != 1)
    {
      p_src = &__src;
      sub_1C4832EA4((llvm::APInt *)&__src, *((_DWORD *)this + 2), 0, 0);
      v9 = v7 - 1;
      if (v146 >= 0x41)
        p_src = (void **)((char *)__src + 8 * (v9 >> 6));
      *p_src = (void *)((unint64_t)*p_src | (1 << v9));
      llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v141);
      llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v161);
      v10 = v142 - 1;
      if (v142 >= 0x41)
        v11 = &v141[v10 >> 6];
      else
        v11 = (uint64_t **)&v141;
      v12 = v146;
      if (((1 << v10) & (unint64_t)*v11) != 0)
      {
        if (v146 >= 0x41)
        {
          v99 = v146 + 63;
          v13 = (void *)operator new[]();
          memcpy(v13, __src, (v99 >> 3) & 0x3FFFFFF8);
          v100 = 0;
          v101 = v141;
          v102 = (unint64_t *)v13;
          v103 = v99 >> 6;
          do
          {
            v104 = (unint64_t)*v101++;
            v105 = *v102 - v104;
            v106 = *v102 < v104;
            v107 = *v102 + ~v104;
            if (v100)
            {
              v100 = v107 >= *v102;
            }
            else
            {
              v107 = v105;
              v100 = v106;
            }
            *v102++ = v107;
            --v103;
          }
          while (v103);
          *((_QWORD *)v13 + (v99 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
        }
        else
        {
          if (v146)
            v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v146;
          else
            v36 = 0;
          v13 = (void *)(v36 & ((_BYTE *)__src - (_BYTE *)v141));
        }
      }
      else if (v146 > 0x40)
      {
        v37 = (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8;
        v13 = (void *)operator new[]();
        memcpy(v13, __src, v37);
      }
      else
      {
        v13 = __src;
      }
      v14 = sub_1C49591DC((llvm::APInt *)&v161);
      v15 = v146;
      if (v14)
      {
        if (v146 >= 0x41)
        {
          v38 = v146 + 63;
          v17 = (void *)operator new[]();
          memcpy(v17, __src, (v38 >> 3) & 0x3FFFFFF8);
          v39 = 0;
          v40 = v161;
          v41 = (unint64_t *)v17;
          v42 = v38 >> 6;
          do
          {
            v43 = *v40++;
            v44 = *v41 - v43;
            v45 = *v41 < v43;
            v46 = *v41 + ~v43;
            if (v39)
            {
              v39 = v46 >= *v41;
            }
            else
            {
              v46 = v44;
              v39 = v45;
            }
            *v41++ = v46;
            --v42;
          }
          while (v42);
          *((_QWORD *)v17 + (v38 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
        }
        else
        {
          if (v146)
            v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v146;
          else
            v16 = 0;
          v17 = (void *)(v16 & ((_BYTE *)__src - (_BYTE *)v161));
        }
      }
      else if (v146 > 0x40)
      {
        v108 = (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8;
        v17 = (void *)operator new[]();
        memcpy(v17, __src, v108);
      }
      else
      {
        v17 = __src;
      }
      if (v12 > 0x40)
      {
        if (!memcmp(v13, v17, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8))
        {
          *(_DWORD *)(a4 + 8) = v12;
          llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
          v71 = *(_DWORD *)(a4 + 8);
          *(_DWORD *)(a4 + 24) = v71;
          if (v71 > 0x40)
          {
            v72 = (void *)operator new[]();
            *(_QWORD *)(a4 + 16) = v72;
            memcpy(v72, *(const void **)a4, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
            goto LABEL_132;
          }
          v18 = *(_QWORD *)a4;
LABEL_21:
          *(_QWORD *)(a4 + 16) = v18;
LABEL_132:
          if (v15 >= 0x41 && v17)
            MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
          if (v12 >= 0x41 && v13)
          {
            v98 = v13;
            goto LABEL_241;
          }
          goto LABEL_134;
        }
      }
      else if (v13 == v17)
      {
        *(_DWORD *)(a4 + 8) = v12;
        if ((_DWORD)v12)
          v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
        else
          v18 = 0;
        *(_QWORD *)a4 = v18;
        *(_DWORD *)(a4 + 24) = v12;
        goto LABEL_21;
      }
      *(_DWORD *)(a4 + 8) = v12;
      *(_QWORD *)a4 = v13;
      *(_DWORD *)(a4 + 24) = v15;
      *(_QWORD *)(a4 + 16) = v17;
      LODWORD(v12) = 0;
      v15 = 0;
      goto LABEL_132;
    }
    sub_1C4832EA4((llvm::APInt *)&v157, *((_DWORD *)this + 2), 0, 0);
    llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v155);
    if (v156 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v155);
    }
    else
    {
      if (v156)
        v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v156;
      else
        v19 = 0;
      v155 = v19 & ~v155;
    }
    llvm::APInt::operator++((uint64_t)&v155);
    v20 = v156;
    v21 = v155;
    v156 = 0;
    v22 = v158;
    if (v158 > 0x40)
    {
      v23 = v157;
      if (!memcmp(v157, (const void *)v155, (((unint64_t)v158 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a4 + 8) = v22;
        llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
        v74 = *(_DWORD *)(a4 + 8);
        *(_DWORD *)(a4 + 24) = v74;
        if (v74 > 0x40)
        {
          v75 = (void *)operator new[]();
          *(_QWORD *)(a4 + 16) = v75;
          memcpy(v75, *(const void **)a4, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_33;
        }
        v24 = *(_QWORD *)a4;
LABEL_32:
        *(_QWORD *)(a4 + 16) = v24;
LABEL_33:
        if (v20 >= 0x41 && v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
LABEL_147:
        if (v156 >= 0x41 && v155)
          MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
        if (v158 >= 0x41 && v157)
          goto LABEL_138;
        return;
      }
    }
    else
    {
      v23 = v157;
      if (v157 == (const void *)v155)
      {
        *(_DWORD *)(a4 + 8) = v158;
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
        if (!v22)
          v24 = 0;
        *(_QWORD *)a4 = v24;
        *(_DWORD *)(a4 + 24) = v22;
        goto LABEL_32;
      }
    }
    v158 = 0;
    *(_DWORD *)(a4 + 8) = v22;
    *(_QWORD *)a4 = v23;
    *(_DWORD *)(a4 + 24) = v20;
    *(_QWORD *)(a4 + 16) = v21;
    goto LABEL_147;
  }
  HIDWORD(v26) = a2 - 13;
  LODWORD(v26) = a2 - 13;
  v25 = v26 >> 1;
  if (v25 == 2)
  {
    if (a3 != 1)
    {
      llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v161);
      sub_1C535EBA0((llvm::ConstantRange *)&__src, (llvm::APInt *)&v161);
      llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v159);
      sub_1C535EBA0((llvm::ConstantRange *)&v141, (llvm::APInt *)&v159);
      llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v141, 0, a4);
      if (v144 >= 0x41 && v143)
        MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
      if (v142 >= 0x41 && v141)
        MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
      if (v160 >= 0x41 && v159)
        MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
      if (v148 >= 0x41 && __s2)
        MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      if (v146 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v162 >= 0x41 && v161)
        goto LABEL_138;
      return;
    }
    llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v149);
    v27 = v150;
    if (v150 < 0x41 || v27 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v149) <= 0x40)
    {
      v28 = v149;
      if (v27 < 0x41)
        v28 = &v149;
      if (!*v28)
      {
        llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v27, 1);
        goto LABEL_180;
      }
    }
    sub_1C4832EA4((llvm::APInt *)&v141, v27, 0, 0);
    llvm::APIntOps::RoundingUDiv((llvm::APInt *)&v141, (const llvm::APInt *)&v149, 2u, v29, (llvm::APInt *)&__src);
    v30 = sub_1C4832EA4((llvm::APInt *)&v159, v27, -1, 1);
    llvm::APInt::udiv(v30, (const llvm::APInt *)&v149, (llvm::APInt *)&v161);
    llvm::APInt::operator+=((uint64_t)&v161, 1uLL);
    v31 = v162;
    v32 = v161;
    v162 = 0;
    v33 = v146;
    if (v146 > 0x40)
    {
      v34 = __src;
      if (!memcmp(__src, v161, (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a4 + 8) = v33;
        llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
        v89 = *(_DWORD *)(a4 + 8);
        *(_DWORD *)(a4 + 24) = v89;
        if (v89 > 0x40)
        {
          v90 = (void *)operator new[]();
          *(_QWORD *)(a4 + 16) = v90;
          memcpy(v90, *(const void **)a4, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_48;
        }
        v35 = *(_QWORD *)a4;
LABEL_47:
        *(_QWORD *)(a4 + 16) = v35;
LABEL_48:
        if (v31 >= 0x41 && v32)
          MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        goto LABEL_175;
      }
    }
    else
    {
      v34 = __src;
      if (__src == v161)
      {
        *(_DWORD *)(a4 + 8) = v146;
        if (v33)
          v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
        else
          v35 = 0;
        *(_QWORD *)a4 = v35;
        *(_DWORD *)(a4 + 24) = v33;
        goto LABEL_47;
      }
    }
    v146 = 0;
    *(_DWORD *)(a4 + 8) = v33;
    *(_QWORD *)a4 = v34;
    *(_DWORD *)(a4 + 24) = v31;
    *(_QWORD *)(a4 + 16) = v32;
LABEL_175:
    if (v162 >= 0x41 && v161)
      MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
    if (v160 >= 0x41 && v159)
      MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
    if (v146 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (v142 >= 0x41 && v141)
      MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
    v27 = v150;
LABEL_180:
    if (v27 >= 0x41 && v149)
      goto LABEL_138;
    return;
  }
  if (v25 != 6)
  {
    if (a3 == 1)
    {
      llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v153);
      sub_1C4832EA4((llvm::APInt *)&v151, v7, 0, 0);
      v56 = v154;
      if (v154 > 0x40)
      {
        v57 = v153;
        v58 = v151;
        if (!memcmp(v153, v151, (((unint64_t)v154 + 63) >> 3) & 0x3FFFFFF8))
        {
          *(_DWORD *)(a4 + 8) = v56;
          llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
          v95 = *(_DWORD *)(a4 + 8);
          v60 = (llvm::APInt *)(a4 + 16);
          *(_DWORD *)(a4 + 24) = v95;
          if (v95 > 0x40)
          {
            llvm::APInt::initSlowCase(v60, (const void **)a4);
            goto LABEL_225;
          }
          v59 = *(_QWORD *)a4;
LABEL_102:
          *(_QWORD *)v60 = v59;
LABEL_225:
          if (v152 >= 0x41 && v151)
            MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
          if (v56 >= 0x41 && v57)
            goto LABEL_138;
          return;
        }
      }
      else
      {
        v57 = v153;
        v58 = v151;
        if (v153 == v151)
        {
          *(_DWORD *)(a4 + 8) = v154;
          v59 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
          if (!v56)
            v59 = 0;
          *(_QWORD *)a4 = v59;
          v60 = (llvm::APInt *)(a4 + 16);
          *(_DWORD *)(a4 + 24) = v56;
          goto LABEL_102;
        }
      }
      v154 = 0;
      v96 = v152;
      v152 = 0;
      *(_DWORD *)(a4 + 8) = v56;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 24) = v96;
      *(_QWORD *)(a4 + 16) = v58;
      v56 = 0;
      goto LABEL_225;
    }
    v76 = &__src;
    sub_1C4832EA4((llvm::APInt *)&__src, *((_DWORD *)this + 2), 0, 0);
    v77 = v7 - 1;
    if (v146 >= 0x41)
      v76 = (void **)((char *)__src + 8 * (v77 >> 6));
    *v76 = (void *)((unint64_t)*v76 | (1 << v77));
    llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v141);
    llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v161);
    v78 = sub_1C49591DC((llvm::APInt *)&v161);
    v79 = v146;
    if (v78)
    {
      if (v146 >= 0x41)
      {
        v110 = v146 + 63;
        v111 = (unint64_t *)operator new[]();
        v80 = __src;
        memcpy(v111, __src, (v110 >> 3) & 0x3FFFFFF8);
        v112 = 0;
        v113 = (uint64_t *)v161;
        v128 = v111;
        v114 = v110 >> 6;
        do
        {
          v115 = *v113++;
          v116 = v115 + *v111;
          v117 = v116 + 1 <= *v111;
          if (v112)
          {
            ++v116;
            v112 = v117;
          }
          else
          {
            v112 = v116 < *v111;
          }
          *v111++ = v116;
          --v114;
        }
        while (v114);
        v128[(v110 >> 6) - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
      }
      else
      {
        v80 = __src;
        if (v146)
          v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v146;
        else
          v81 = 0;
        v128 = (_QWORD *)(v81 & ((unint64_t)__src + (_QWORD)v161));
      }
    }
    else if (v146 > 0x40)
    {
      v126 = (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8;
      v127 = (_QWORD *)operator new[]();
      v80 = __src;
      v128 = v127;
      memcpy(v127, __src, v126);
    }
    else
    {
      v80 = __src;
      v128 = __src;
    }
    v82 = v142 - 1;
    v83 = (uint64_t **)&v141;
    if (v142 >= 0x41)
      v83 = &v141[v82 >> 6];
    v84 = v146;
    if (((1 << v82) & (unint64_t)*v83) != 0)
    {
      if (v146 >= 0x41)
      {
        v118 = v146 + 63;
        v80 = (_QWORD *)operator new[]();
        memcpy(v80, __src, (v118 >> 3) & 0x3FFFFFF8);
        v119 = 0;
        v120 = v141;
        v121 = v80;
        v122 = v118 >> 6;
        do
        {
          v123 = (uint64_t)*v120++;
          v124 = v123 + *v121;
          v125 = v124 + 1 <= *v121;
          if (v119)
          {
            ++v124;
            v119 = v125;
          }
          else
          {
            v119 = v124 < *v121;
          }
          *v121++ = v124;
          --v122;
        }
        while (v122);
        v80[(v118 >> 6) - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
      }
      else
      {
        if (v146)
          v85 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v146;
        else
          v85 = 0;
        v80 = (_QWORD *)(v85 & ((unint64_t)v141 + (_QWORD)v80));
      }
    }
    else if (v146 >= 0x41)
    {
      v91 = (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8;
      v80 = (_QWORD *)operator new[]();
      memcpy(v80, __src, v91);
    }
    if (v79 > 0x40)
    {
      v86 = v128;
      if (!memcmp(v128, v80, ((unint64_t)(v79 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a4 + 8) = v79;
        llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
        v97 = *(_DWORD *)(a4 + 8);
        v88 = (llvm::APInt *)(a4 + 16);
        *(_DWORD *)(a4 + 24) = v97;
        if (v97 > 0x40)
        {
          llvm::APInt::initSlowCase(v88, (const void **)a4);
          goto LABEL_233;
        }
        v87 = *(_QWORD *)a4;
LABEL_169:
        *(_QWORD *)v88 = v87;
LABEL_233:
        if (v84 >= 0x41 && v80)
          MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
        if (v79 >= 0x41 && v128)
        {
          v98 = v128;
LABEL_241:
          MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
        }
LABEL_134:
        if (v162 >= 0x41 && v161)
          MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
        if (v142 >= 0x41)
        {
          v73 = v141;
          if (v141)
            goto LABEL_142;
        }
        goto LABEL_136;
      }
    }
    else
    {
      v86 = v128;
      if (v128 == v80)
      {
        *(_DWORD *)(a4 + 8) = v79;
        if ((_DWORD)v79)
          v87 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
        else
          v87 = 0;
        *(_QWORD *)a4 = v87;
        v88 = (llvm::APInt *)(a4 + 16);
        *(_DWORD *)(a4 + 24) = v79;
        goto LABEL_169;
      }
    }
    *(_DWORD *)(a4 + 8) = v79;
    *(_QWORD *)a4 = v86;
    *(_DWORD *)(a4 + 24) = v84;
    *(_QWORD *)(a4 + 16) = v80;
    LODWORD(v79) = 0;
    v84 = 0;
    goto LABEL_233;
  }
  sub_1C4832EA4((llvm::APInt *)&v139, *((_DWORD *)this + 2), 0, 0);
  sub_1C4832EA4((llvm::APInt *)&v137, v7, v7, 0);
  v142 = v140;
  v141 = v139;
  v140 = 0;
  v144 = v138;
  v143 = v137;
  v138 = 0;
  llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v141, 0, (uint64_t)&__src);
  if (v144 >= 0x41 && v143)
    MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
  if (v142 >= 0x41 && v141)
    MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
  if (v138 >= 0x41 && v137)
    MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
  if (v140 >= 0x41 && v139)
    MEMORY[0x1CAA32F9C](v139, 0x1000C8000313F17);
  v47 = v146;
  if (v146 < 0x41)
  {
    if ((unint64_t)__s2 | (unint64_t)__src)
      goto LABEL_81;
LABEL_193:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v7, 1);
    goto LABEL_218;
  }
  if (!memcmp(__src, __s2, (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__src) == v47)
  {
    goto LABEL_193;
  }
LABEL_81:
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&__src, (llvm::APInt *)&v141);
  if (a3 == 1)
  {
    sub_1C4832EA4((llvm::APInt *)&__s1, v7, 0, 0);
    sub_1C4832EA4((llvm::APInt *)&v161, v7, -1, 1);
    v48 = v162;
    v134 = v162;
    if (v162 > 0x40)
    {
      v133 = (llvm::APInt *)operator new[]();
      v48 = v134;
      memcpy(v133, v161, (((unint64_t)v134 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v133 = (llvm::APInt *)v161;
    }
    v49 = sub_1C47EE5B8(&v141, v48);
    if (v134 > 0x40)
    {
      llvm::APInt::tcShiftRight(v133, (unint64_t *)(((unint64_t)v134 + 63) >> 6), v49);
    }
    else if (v134 == v49)
    {
      v133 = 0;
    }
    else
    {
      v133 = (llvm::APInt *)((unint64_t)v133 >> v49);
    }
    llvm::APInt::operator+=((uint64_t)&v133, 1uLL);
    v50 = v134;
    v51 = v133;
    v134 = 0;
    v52 = v136;
    if (v136 > 0x40)
    {
      v53 = __s1;
      if (!memcmp(__s1, v133, (((unint64_t)v136 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a4 + 8) = v52;
        llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
        v92 = *(_DWORD *)(a4 + 8);
        v55 = (llvm::APInt *)(a4 + 16);
        *(_DWORD *)(a4 + 24) = v92;
        if (v92 > 0x40)
        {
          llvm::APInt::initSlowCase(v55, (const void **)a4);
          goto LABEL_93;
        }
        v54 = *(_QWORD *)a4;
LABEL_92:
        *(_QWORD *)v55 = v54;
LABEL_93:
        if (v50 >= 0x41 && v51)
          MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
LABEL_204:
        if (v134 >= 0x41 && v133)
          MEMORY[0x1CAA32F9C](v133, 0x1000C8000313F17);
        if (v162 >= 0x41 && v161)
          MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
        if (v136 < 0x41)
          goto LABEL_217;
        v93 = __s1;
        if (!__s1)
          goto LABEL_217;
        goto LABEL_282;
      }
    }
    else
    {
      v53 = __s1;
      if (__s1 == v133)
      {
        *(_DWORD *)(a4 + 8) = v136;
        if (v52)
          v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
        else
          v54 = 0;
        *(_QWORD *)a4 = v54;
        v55 = (llvm::APInt *)(a4 + 16);
        *(_DWORD *)(a4 + 24) = v52;
        goto LABEL_92;
      }
    }
    v136 = 0;
    *(_DWORD *)(a4 + 8) = v52;
    *(_QWORD *)a4 = v53;
    *(_DWORD *)(a4 + 24) = v50;
    *(_QWORD *)(a4 + 16) = v51;
    goto LABEL_204;
  }
  v61 = (unint64_t *)&v161;
  sub_1C4832EA4((llvm::APInt *)&v161, v7, 0, 0);
  v62 = v7 - 1;
  if (v162 >= 0x41)
    v61 = &v161[v62 >> 6];
  *v61 |= 1 << v62;
  v132 = v162;
  if (v162 > 0x40)
  {
    v109 = (((unint64_t)v162 + 63) >> 3) & 0x3FFFFFF8;
    v63 = (_BYTE *)operator new[]();
    memcpy(v63, v161, v109);
  }
  else
  {
    v63 = v161;
  }
  v131 = v63;
  llvm::APInt::ashrInPlace((llvm::APInt *)&v131, &v141);
  v64 = (char *)&v159;
  sub_1C4832EA4((llvm::APInt *)&v159, v7, -1, 1);
  if (v160 >= 0x41)
    v64 = &v159[8 * (v62 >> 6)];
  *(_QWORD *)v64 &= ~(1 << v62);
  v130 = v160;
  if (v160 > 0x40)
  {
    v129 = (void *)operator new[]();
    memcpy(v129, v159, (((unint64_t)v130 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v129 = v159;
  }
  llvm::APInt::ashrInPlace((llvm::APInt *)&v129, &v141);
  llvm::APInt::operator+=((uint64_t)&v129, 1uLL);
  v65 = v130;
  v66 = v129;
  v130 = 0;
  v67 = v132;
  if (v132 <= 0x40)
  {
    v68 = v131;
    if (v131 == v129)
    {
      *(_DWORD *)(a4 + 8) = v132;
      if (v67)
        v69 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
      else
        v69 = 0;
      *(_QWORD *)a4 = v69;
      v70 = (llvm::APInt *)(a4 + 16);
      *(_DWORD *)(a4 + 24) = v67;
      goto LABEL_124;
    }
LABEL_212:
    v132 = 0;
    *(_DWORD *)(a4 + 8) = v67;
    *(_QWORD *)a4 = v68;
    *(_DWORD *)(a4 + 24) = v65;
    *(_QWORD *)(a4 + 16) = v66;
    v67 = 0;
    goto LABEL_213;
  }
  v68 = v131;
  if (memcmp(v131, v129, (((unint64_t)v132 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_212;
  *(_DWORD *)(a4 + 8) = v67;
  llvm::APInt::initSlowCase((llvm::APInt *)a4, -1, 1);
  v94 = *(_DWORD *)(a4 + 8);
  v70 = (llvm::APInt *)(a4 + 16);
  *(_DWORD *)(a4 + 24) = v94;
  if (v94 > 0x40)
  {
    llvm::APInt::initSlowCase(v70, (const void **)a4);
    goto LABEL_125;
  }
  v69 = *(_QWORD *)a4;
LABEL_124:
  *(_QWORD *)v70 = v69;
LABEL_125:
  if (v65 >= 0x41 && v66)
    MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
LABEL_213:
  if (v130 >= 0x41 && v129)
    MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
  if (v160 >= 0x41 && v159)
    MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
  if (v67 >= 0x41 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  if (v162 < 0x41)
    goto LABEL_217;
  v93 = v161;
  if (!v161)
    goto LABEL_217;
LABEL_282:
  MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
LABEL_217:
  if (v142 >= 0x41 && v141)
    MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
LABEL_218:
  if (v148 >= 0x41)
  {
    v73 = (uint64_t **)__s2;
    if (__s2)
LABEL_142:
      MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  }
LABEL_136:
  if (v146 >= 0x41 && __src)
LABEL_138:
    MEMORY[0x1CAA32F9C]();
}

llvm::ConstantRange *sub_1C535EBA0(llvm::ConstantRange *this, llvm::APInt *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  void **v8;
  void **p_src;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t v12;
  llvm::ConstantRange *result;
  unint64_t v14;
  size_t v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  size_t v20;
  void *v21;
  unsigned int v22;
  llvm::APInt *v23;
  llvm::APInt *v24;
  void *v25;
  unsigned int v26;
  void **v27;
  const void *v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  void *v32;
  void *v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  void *__src;
  unsigned int v40;
  void *v41;
  unsigned int v42;

  v4 = *((_DWORD *)a2 + 2);
  if (v4 < 0x41)
  {
    if (*(_QWORD *)a2 >= 2uLL)
    {
      v5 = v4 - 1;
      goto LABEL_9;
    }
    return llvm::ConstantRange::ConstantRange(this, v4, 1);
  }
  v6 = llvm::APInt::countLeadingZerosSlowCase(a2);
  if (v4 - v6 >= 0x41)
  {
    v5 = v4 - 1;
    if (v6 == v4 - 1)
      return llvm::ConstantRange::ConstantRange(this, v4, 1);
  }
  else
  {
    v5 = v4 - 1;
    if (v6 == v4 - 1 || **(_QWORD **)a2 == 0)
      return llvm::ConstantRange::ConstantRange(this, v4, 1);
  }
LABEL_9:
  v8 = &v41;
  sub_1C4832EA4((llvm::APInt *)&v41, v4, 0, 0);
  if (v42 >= 0x41)
    v8 = (void **)((char *)v41 + 8 * (v5 >> 6));
  *v8 = (void *)((unint64_t)*v8 | (1 << v5));
  p_src = &__src;
  sub_1C4832EA4((llvm::APInt *)&__src, v4, -1, 1);
  if (v40 >= 0x41)
    p_src = (void **)((char *)__src + 8 * (v5 >> 6));
  *p_src = (void *)((unint64_t)*p_src & ~(1 << v5));
  v11 = *((_DWORD *)a2 + 2);
  if (v11)
  {
    if (v11 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase(a2) != v11)
      {
        v12 = *(_QWORD *)a2;
        goto LABEL_32;
      }
    }
    else
    {
      v12 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v11)
      {
LABEL_32:
        v23 = (llvm::APInt *)(v12 + 8 * ((v11 - 1) >> 6));
        if (v11 < 0x41)
          v23 = a2;
        if (((*(_QWORD *)v23 >> (v11 - 1)) & 1) != 0)
        {
          llvm::APIntOps::RoundingSDiv((const void **)a2, (llvm::APInt *)&__src, 2, v10, (llvm::APInt *)&v35);
          v25 = v35;
          v26 = v36;
          v27 = &v41;
        }
        else
        {
          llvm::APIntOps::RoundingSDiv((const void **)a2, (llvm::APInt *)&v41, 2, v10, (llvm::APInt *)&v35);
          v25 = v35;
          v26 = v36;
          v27 = &__src;
        }
        llvm::APIntOps::RoundingSDiv((const void **)a2, (llvm::APInt *)v27, 0, v24, (llvm::APInt *)&v35);
        v28 = v35;
        v29 = v36;
        v30 = v25;
        if (v26 >= 0x41)
        {
          v30 = (void *)operator new[]();
          memcpy(v30, v25, (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8);
        }
        v34 = v29;
        if (v29 > 0x40)
        {
          v33 = (void *)operator new[]();
          memcpy(v33, v28, (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v33 = (void *)v28;
        }
        result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&v33, 1uLL);
        v31 = v34;
        v32 = v33;
        v34 = 0;
        *((_DWORD *)this + 2) = v26;
        *(_QWORD *)this = v30;
        *((_DWORD *)this + 6) = v31;
        *((_QWORD *)this + 2) = v32;
        if (v29 >= 0x41 && v28)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
        if (v26 < 0x41 || !v25)
          goto LABEL_48;
        goto LABEL_47;
      }
    }
  }
  v38 = v40;
  if (v40 > 0x40)
  {
    v15 = (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8;
    v37 = (void *)operator new[]();
    memcpy(v37, __src, v15);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v37);
  }
  else
  {
    if (v40)
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
    else
      v14 = 0;
    v37 = (void *)(v14 & ~(unint64_t)__src);
  }
  result = (llvm::ConstantRange *)llvm::APInt::operator++((uint64_t)&v37);
  v16 = v38;
  v17 = v37;
  v38 = 0;
  v18 = v42;
  if (v42 <= 0x40)
  {
    v19 = v41;
    *((_DWORD *)this + 2) = v16;
    *(_QWORD *)this = v17;
    *((_DWORD *)this + 6) = v18;
    *((_QWORD *)this + 2) = v19;
    goto LABEL_48;
  }
  v20 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
  v21 = (void *)operator new[]();
  result = (llvm::ConstantRange *)memcpy(v21, v41, v20);
  v22 = v38;
  *((_DWORD *)this + 2) = v16;
  *(_QWORD *)this = v17;
  *((_DWORD *)this + 6) = v18;
  *((_QWORD *)this + 2) = v21;
  if (v22 < 0x41)
    goto LABEL_48;
  result = (llvm::ConstantRange *)v37;
  if (!v37)
    goto LABEL_48;
LABEL_47:
  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C]();
LABEL_48:
  if (v40 >= 0x41)
  {
    result = (llvm::ConstantRange *)__src;
    if (__src)
      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  if (v42 >= 0x41)
  {
    result = (llvm::ConstantRange *)v41;
    if (v41)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::intersectWith@<X0>(uint64_t result@<X0>, llvm::ConstantRange *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  llvm::ConstantRange *v8;
  unsigned int v9;
  const void **v10;
  char *v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  unsigned int v19;
  const void *v20;
  uint64_t v21;
  const void **v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  void *v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  const void *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  const void **v93;
  const void **v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  size_t v100;
  const void **v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  const void **v105;
  const void **v106;
  size_t v107;
  unsigned int v108;
  unsigned int v109;
  const void **v110;
  const void **v111;

  LODWORD(v7) = *(_DWORD *)(result + 8);
  while (1)
  {
    v8 = a2;
    a2 = (llvm::ConstantRange *)result;
    v9 = v7;
    v10 = (const void **)(result + 16);
    if (v7 >= 0x41)
    {
      v30 = a3;
      v31 = (const void **)(result + 16);
      v11 = *(char **)result;
      v12 = *(_QWORD *)(result + 16);
      result = memcmp(*(const void **)result, (const void *)v12, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
      if (!(_DWORD)result)
      {
        result = llvm::APInt::countLeadingZerosSlowCase(a2);
        if ((_DWORD)result == v9)
        {
          *(_DWORD *)(a4 + 8) = v9;
          goto LABEL_178;
        }
      }
      v10 = v31;
      a3 = v30;
    }
    else
    {
      v11 = *(char **)result;
      v12 = *(_QWORD *)(result + 16);
      if (!(v12 | *(_QWORD *)result))
      {
        *(_DWORD *)(a4 + 8) = v7;
        goto LABEL_20;
      }
    }
    v7 = *((unsigned int *)v8 + 2);
    v13 = v7 < 0x41;
    if (v7 > 0x40)
    {
      v108 = a3;
      v110 = v10;
      v14 = *(_QWORD *)v8;
      v15 = *((_QWORD *)v8 + 2);
      result = memcmp(*(const void **)v8, (const void *)v15, ((v7 + 63) >> 3) & 0x3FFFFFF8);
      if (!(_DWORD)result)
      {
        result = llvm::APInt::countTrailingOnesSlowCase(v8);
        v10 = v110;
        if ((_DWORD)result == (_DWORD)v7)
          goto LABEL_19;
        result = llvm::APInt::countLeadingZerosSlowCase(v8);
        if ((_DWORD)result == (_DWORD)v7)
        {
          *(_DWORD *)(a4 + 8) = v7;
          goto LABEL_132;
        }
      }
      v10 = v110;
      a3 = v108;
    }
    else
    {
      v14 = *(_QWORD *)v8;
      v15 = *((_QWORD *)v8 + 2);
      if (*(_QWORD *)v8 == v15 && (!(_DWORD)v7 || v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
      {
LABEL_19:
        *(_DWORD *)(a4 + 8) = v9;
        if (v9 < 0x41)
        {
LABEL_20:
          *(_QWORD *)a4 = *(_QWORD *)a2;
LABEL_21:
          v19 = *((_DWORD *)a2 + 6);
          *(_DWORD *)(a4 + 24) = v19;
          if (v19 <= 0x40)
          {
            v20 = *v10;
LABEL_41:
            *(_QWORD *)(a4 + 16) = v20;
            return result;
          }
          v94 = v10;
          v84 = (void *)operator new[]();
          *(_QWORD *)(a4 + 16) = v84;
          v85 = *v94;
          return (uint64_t)memcpy(v84, v85, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
        }
        v31 = v10;
LABEL_178:
        v95 = (void *)operator new[]();
        *(_QWORD *)a4 = v95;
        result = (uint64_t)memcpy(v95, *(const void **)a2, (((unint64_t)*(unsigned int *)(a4 + 8) + 63) >> 3) & 0x3FFFFFF8);
        v10 = v31;
        goto LABEL_21;
      }
      if (!(v15 | v14))
        goto LABEL_120;
    }
    if (v9 > 0x40)
    {
      v111 = v10;
      v109 = a3;
      result = memcmp(v11, (const void *)v12, (((unint64_t)*((unsigned int *)a2 + 2) + 63) >> 3) & 0x3FFFFFF8);
      a3 = v109;
      v10 = v111;
      if (!(_DWORD)result)
      {
        result = llvm::APInt::countTrailingOnesSlowCase(a2);
        a3 = v109;
        v10 = v111;
        if ((_DWORD)result == v9)
        {
LABEL_37:
          *(_DWORD *)(a4 + 8) = v7;
          if (v7 >= 0x41)
            goto LABEL_132;
          goto LABEL_38;
        }
      }
    }
    else if (v11 == (char *)v12 && (!v9 || v11 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v9)))
    {
      goto LABEL_37;
    }
    v16 = *((unsigned int *)a2 + 2);
    if (v16 <= 0x40)
      break;
    v32 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
    while (v32)
    {
      v33 = *(_QWORD *)&v11[v32 - 8];
      v34 = *(_QWORD *)(v12 - 8 + v32);
      v32 -= 8;
      v17 = v33 > v34;
      if (v33 != v34)
        goto LABEL_11;
    }
LABEL_12:
    if (v7 > 0x40)
    {
      v35 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v35)
          goto LABEL_79;
        v36 = *(_QWORD *)(v14 - 8 + v35);
        v37 = *(_QWORD *)(v15 - 8 + v35);
        v35 -= 8;
      }
      while (v36 == v37);
      if (v36 <= v37)
      {
LABEL_79:
        v13 = 0;
        goto LABEL_30;
      }
      v18 = 1;
    }
    else
    {
      v18 = v14 > v15;
      if (v14 < v15)
      {
        v13 = 1;
LABEL_30:
        if (v16 > 0x40)
        {
          v38 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
          while (v38)
          {
            v39 = *(_QWORD *)&v11[v38 - 8];
            v40 = *(_QWORD *)(v14 - 8 + v38);
            v38 -= 8;
            if (v39 != v40)
            {
              if (v39 <= v40)
                goto LABEL_32;
              break;
            }
          }
        }
        else if ((unint64_t)v11 < v14)
        {
LABEL_32:
          v22 = (const void **)*((unsigned int *)a2 + 6);
          if (v22 > 0x40)
          {
            v56 = 8 * (((unint64_t)v22 + 63) >> 6);
            v57 = (char *)(v12 - 8);
            v58 = v56;
            while (v58)
            {
              v59 = *(_QWORD *)&v57[v58];
              v60 = *(_QWORD *)(v14 - 8 + v58);
              v58 -= 8;
              if (v59 != v60)
              {
                if (v59 <= v60)
                  return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
                while (v56)
                {
                  v61 = *(_QWORD *)&v57[v56];
                  v62 = *(_QWORD *)(v15 - 8 + v56);
                  v56 -= 8;
                  if (v61 != v62)
                  {
                    if (v61 <= v62)
                      goto LABEL_43;
                    goto LABEL_131;
                  }
                }
                goto LABEL_131;
              }
            }
            return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
          }
          if (v12 <= v14)
            return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
          if (v12 < v15)
          {
LABEL_43:
            if (!v13)
            {
              v22 = v10;
              v14 = operator new[]();
              result = (uint64_t)memcpy((void *)v14, *(const void **)v8, ((v7 + 63) >> 3) & 0x3FFFFFF8);
              v10 = v22;
              LODWORD(v22) = *((_DWORD *)a2 + 6);
            }
            if (v22 > 0x40)
            {
              v106 = v10;
              v24 = (void *)operator new[]();
              result = (uint64_t)memcpy(v24, *v106, (((unint64_t)v22 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v24 = (void *)*v10;
            }
            *(_DWORD *)(a4 + 8) = v7;
            *(_QWORD *)a4 = v14;
            *(_DWORD *)(a4 + 24) = (_DWORD)v22;
            goto LABEL_48;
          }
LABEL_131:
          *(_DWORD *)(a4 + 8) = v7;
          if (!v13)
            goto LABEL_132;
          goto LABEL_38;
        }
        v41 = *((unsigned int *)a2 + 6);
        if (v41 > 0x40)
        {
          v64 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
          while (v64)
          {
            v65 = *(_QWORD *)(v12 - 8 + v64);
            v66 = *(_QWORD *)(v15 - 8 + v64);
            v64 -= 8;
            if (v65 != v66)
            {
              if (v65 <= v66)
                goto LABEL_86;
              break;
            }
          }
        }
        else if (v12 < v15)
        {
LABEL_86:
          *(_DWORD *)(a4 + 8) = v9;
          if (v9 > 0x40)
          {
            v105 = v10;
            llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a2);
            v10 = v105;
          }
          else
          {
            *(_QWORD *)a4 = *(_QWORD *)a2;
          }
          result = a4 + 16;
          v42 = *((_DWORD *)a2 + 6);
          *(_DWORD *)(a4 + 24) = v42;
          if (v42 > 0x40)
            return (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, v10);
          *(_QWORD *)result = *v10;
          return result;
        }
        if (v16 > 0x40)
        {
          v81 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
          while (v81)
          {
            v82 = *(_QWORD *)&v11[v81 - 8];
            v83 = *(_QWORD *)(v15 - 8 + v81);
            v81 -= 8;
            if (v82 != v83)
            {
              if (v82 <= v83)
                goto LABEL_139;
              return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
            }
          }
          return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
        }
        if ((unint64_t)v11 < v15)
        {
LABEL_139:
          if (v9 >= 0x41)
          {
            v11 = (char *)operator new[]();
            result = (uint64_t)memcpy(v11, *(const void **)a2, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
          }
          v25 = *((unsigned int *)v8 + 6);
          if (v25 <= 0x40)
            goto LABEL_142;
          v27 = v25 + 63;
LABEL_193:
          v107 = (v27 >> 3) & 0x3FFFFFF8;
          v55 = (void *)operator new[]();
          result = (uint64_t)memcpy(v55, *((const void **)v8 + 2), v107);
          goto LABEL_143;
        }
        return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
      }
    }
    result = (uint64_t)v8;
    if (!v18)
      goto LABEL_30;
  }
  v17 = (unint64_t)v11 > v12;
LABEL_11:
  if (!v17)
    goto LABEL_12;
  if (v7 > 0x40)
  {
    v43 = 8 * ((v7 + 63) >> 6);
    v44 = v14 - 8;
    v45 = v43;
    while (v45)
    {
      v46 = *(_QWORD *)(v44 + v45);
      v47 = *(_QWORD *)(v15 - 8 + v45);
      v45 -= 8;
      if (v46 != v47)
      {
        if (v46 > v47)
          goto LABEL_104;
        break;
      }
    }
    v48 = 8 * ((v7 + 63) >> 6);
    do
    {
      if (!v48)
        goto LABEL_100;
      v49 = *(_QWORD *)(v44 + v48);
      v50 = *(_QWORD *)(v12 - 8 + v48);
      v48 -= 8;
    }
    while (v49 == v50);
    if (v49 > v50)
    {
LABEL_100:
      while (v43)
      {
        v51 = *(_QWORD *)(v44 + v43);
        v52 = *(_QWORD *)&v11[v43 - 8];
        v43 -= 8;
        if (v51 != v52)
        {
          if (v51 <= v52)
            goto LABEL_50;
          goto LABEL_103;
        }
      }
      goto LABEL_103;
    }
LABEL_26:
    v21 = *((unsigned int *)v8 + 6);
    if (v21 > 0x40)
    {
      v74 = 8 * ((unint64_t)(v21 + 63) >> 6);
      v75 = (char *)(v15 - 8);
      v76 = v74;
      do
      {
        if (!v76)
          goto LABEL_157;
        v77 = *(_QWORD *)&v75[v76];
        v78 = *(_QWORD *)(v12 - 8 + v76);
        v76 -= 8;
      }
      while (v77 == v78);
      if (v77 <= v78)
      {
LABEL_28:
        *(_DWORD *)(a4 + 8) = v7;
        if (v7 > 0x40)
        {
LABEL_132:
          v63 = (void *)operator new[]();
          *(_QWORD *)a4 = v63;
          result = (uint64_t)memcpy(v63, *(const void **)v8, (((unint64_t)*(unsigned int *)(a4 + 8) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_39;
        }
LABEL_38:
        *(_QWORD *)a4 = *(_QWORD *)v8;
LABEL_39:
        v23 = *((_DWORD *)v8 + 6);
        *(_DWORD *)(a4 + 24) = v23;
        if (v23 <= 0x40)
        {
          v20 = (const void *)*((_QWORD *)v8 + 2);
          goto LABEL_41;
        }
        v84 = (void *)operator new[]();
        *(_QWORD *)(a4 + 16) = v84;
        v85 = (const void *)*((_QWORD *)v8 + 2);
        return (uint64_t)memcpy(v84, v85, (((unint64_t)*(unsigned int *)(a4 + 24) + 63) >> 3) & 0x3FFFFFF8);
      }
LABEL_157:
      while (v74)
      {
        v79 = *(_QWORD *)&v75[v74];
        v80 = *(_QWORD *)&v11[v74 - 8];
        v74 -= 8;
        v28 = v79 > v80;
        if (v79 != v80)
          goto LABEL_59;
      }
    }
    else
    {
      if (v15 < v12)
        goto LABEL_28;
      v28 = v15 > (unint64_t)v11;
LABEL_59:
      if (v28)
        return sub_1C5360914(a4, a2, v8, a3);
    }
    if (v7 < 0x41)
      goto LABEL_61;
    v96 = (v7 + 63) >> 3;
    goto LABEL_183;
  }
  if (v14 > v15)
  {
LABEL_104:
    v53 = *((unsigned int *)v8 + 6);
    if (v53 > 0x40)
    {
      v67 = 8 * ((unint64_t)(v53 + 63) >> 6);
      v68 = (char *)(v15 - 8);
      v69 = v67;
      do
      {
        if (!v69)
          goto LABEL_150;
        v70 = *(_QWORD *)&v68[v69];
        v71 = *(_QWORD *)(v12 - 8 + v69);
        v69 -= 8;
      }
      while (v70 == v71);
      if (v70 <= v71)
        goto LABEL_106;
LABEL_150:
      while (v67)
      {
        v72 = *(_QWORD *)&v68[v67];
        v73 = *(_QWORD *)&v11[v67 - 8];
        v67 -= 8;
        v54 = v72 > v73;
        if (v72 != v73)
          goto LABEL_110;
      }
    }
    else
    {
      if (v15 < v12)
      {
LABEL_106:
        if (v7 <= 0x40)
        {
          if (v14 >= v12)
          {
            if (v14 < (unint64_t)v11)
            {
LABEL_115:
              if (v9 >= 0x41)
              {
                v11 = (char *)operator new[]();
                result = (uint64_t)memcpy(v11, *(const void **)a2, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v53) = *((_DWORD *)v8 + 6);
              }
              if (v53 > 0x40)
              {
                v55 = (void *)operator new[]();
                result = (uint64_t)memcpy(v55, *((const void **)v8 + 2), (((unint64_t)v53 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v55 = (void *)*((_QWORD *)v8 + 2);
              }
              *(_DWORD *)(a4 + 8) = v9;
              *(_QWORD *)a4 = v11;
              *(_DWORD *)(a4 + 24) = v53;
              goto LABEL_144;
            }
            goto LABEL_120;
          }
          return sub_1C5360914(a4, a2, v8, a3);
        }
        v86 = 8 * ((v7 + 63) >> 6);
        v87 = v14 - 8;
        v88 = v86;
        do
        {
          if (!v88)
            goto LABEL_171;
          v89 = *(_QWORD *)(v87 + v88);
          v90 = *(_QWORD *)(v12 - 8 + v88);
          v88 -= 8;
        }
        while (v89 == v90);
        if (v89 <= v90)
          return sub_1C5360914(a4, a2, v8, a3);
LABEL_171:
        while (v86)
        {
          v91 = *(_QWORD *)(v87 + v86);
          v92 = *(_QWORD *)&v11[v86 - 8];
          v86 -= 8;
          if (v91 != v92)
          {
            if (v91 <= v92)
              goto LABEL_115;
            break;
          }
        }
LABEL_103:
        *(_DWORD *)(a4 + 8) = v7;
        goto LABEL_132;
      }
      v54 = v15 > (unint64_t)v11;
LABEL_110:
      if (v54)
        return sub_1C5360914(a4, a2, v8, a3);
    }
    if (v7 <= 0x40)
    {
      if (v14 < (unint64_t)v11)
        goto LABEL_86;
LABEL_61:
      v29 = *((unsigned int *)a2 + 6);
      if (v29 > 0x40)
      {
        v93 = v10;
        v24 = (void *)operator new[]();
        result = (uint64_t)memcpy(v24, *v93, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v24 = (void *)*v10;
      }
      *(_DWORD *)(a4 + 8) = v7;
      *(_QWORD *)a4 = v14;
      *(_DWORD *)(a4 + 24) = v29;
LABEL_48:
      *(_QWORD *)(a4 + 16) = v24;
      return result;
    }
    v96 = (v7 + 63) >> 3;
    v97 = v96 & 0x3FFFFFF8;
    while (v97)
    {
      v98 = *(_QWORD *)(v14 - 8 + v97);
      v99 = *(_QWORD *)&v11[v97 - 8];
      v97 -= 8;
      if (v98 != v99)
      {
        if (v98 <= v99)
          goto LABEL_86;
        break;
      }
    }
LABEL_183:
    v100 = v96 & 0x3FFFFFF8;
    v101 = v10;
    v14 = operator new[]();
    result = (uint64_t)memcpy((void *)v14, *(const void **)v8, v100);
    v10 = v101;
    goto LABEL_61;
  }
  if (v14 < v12)
    goto LABEL_26;
  if (v14 >= (unint64_t)v11)
  {
LABEL_120:
    *(_DWORD *)(a4 + 8) = v7;
    goto LABEL_38;
  }
LABEL_50:
  v25 = *((unsigned int *)v8 + 6);
  if (v25 > 0x40)
  {
    v102 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
    while (v102)
    {
      v103 = *(_QWORD *)(v15 - 8 + v102);
      v104 = *(_QWORD *)&v11[v102 - 8];
      v102 -= 8;
      v26 = v103 > v104;
      if (v103 != v104)
        goto LABEL_52;
    }
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
  }
  v26 = v15 > (unint64_t)v11;
LABEL_52:
  if (!v26)
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 0);
  if (v9 >= 0x41)
  {
    v11 = (char *)operator new[]();
    result = (uint64_t)memcpy(v11, *(const void **)a2, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v25) = *((_DWORD *)v8 + 6);
  }
  if (v25 > 0x40)
  {
    v27 = v25 + 63;
    goto LABEL_193;
  }
LABEL_142:
  v55 = (void *)*((_QWORD *)v8 + 2);
LABEL_143:
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)a4 = v11;
  *(_DWORD *)(a4 + 24) = v25;
LABEL_144:
  *(_QWORD *)(a4 + 16) = v55;
  return result;
}

uint64_t llvm::ConstantRange::isWrappedSet(llvm::ConstantRange *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;

  v1 = *((unsigned int *)this + 2);
  if (v1 > 0x40)
  {
    v2 = *((_QWORD *)this + 2);
    v4 = ((unint64_t)(v1 + 63) >> 3) & 0x3FFFFFF8;
    while (v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)this - 8 + v4);
      v6 = *(_QWORD *)(v2 - 8 + v4);
      v4 -= 8;
      if (v5 != v6)
      {
        if (v5 <= v6)
          return 0;
        goto LABEL_8;
      }
    }
    return 0;
  }
  v2 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this <= v2)
    return 0;
LABEL_8:
  v7 = *((_DWORD *)this + 6);
  if (v7 > 0x40)
    v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16)) == v7;
  else
    v8 = v2 == 0;
  v9 = v8;
  return v9 ^ 1u;
}

BOOL llvm::ConstantRange::isSizeStrictlySmallerThan(llvm::ConstantRange *this, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _BOOL8 result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL8 v39;
  char *v40;
  int v41;
  _BOOL8 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    v5 = *(_QWORD *)this;
    v6 = (const void *)*((_QWORD *)this + 2);
    if (memcmp(*(const void **)this, v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countTrailingOnesSlowCase(this) != (_DWORD)v4)
    {
      goto LABEL_3;
    }
    return 0;
  }
  v5 = *(_QWORD *)this;
  v6 = (const void *)*((_QWORD *)this + 2);
  if (*(const void **)this == v6)
  {
    if ((_DWORD)v4)
    {
      result = 0;
      v6 = *(const void **)this;
      if (v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4)
        return result;
      goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  v7 = *((unsigned int *)a2 + 2);
  if (v7 > 0x40)
  {
    if (!memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2) == (_DWORD)v7)
    {
      return 1;
    }
  }
  else if (*a2 == a2[2] && (!(_DWORD)v7 || *a2 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v7)))
  {
    return 1;
  }
  v8 = *((unsigned int *)this + 6);
  if (v8 >= 0x41)
  {
    v44 = *((unsigned int *)this + 6);
    v18 = v8 + 63;
    v19 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v20 = (unint64_t *)operator new[]();
    memcpy(v20, *((const void **)this + 2), v19);
    v21 = 0;
    v22 = *(unint64_t **)this;
    v23 = v20;
    v24 = v18 >> 6;
    do
    {
      v25 = *v22++;
      v26 = *v20 - v25;
      v27 = *v20 < v25;
      v28 = *v20 + ~v25;
      if (v21)
      {
        v21 = v28 >= *v20;
      }
      else
      {
        v28 = v26;
        v21 = v27;
      }
      *v20++ = v28;
      --v24;
    }
    while (v24);
    v8 = v44;
    v10 = (unint64_t)v23;
    v23[(v18 >> 6) - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
  }
  else
  {
    v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v9 = 0;
    v10 = v9 & ((unint64_t)v6 - v5);
  }
  v11 = *((unsigned int *)a2 + 6);
  if (v11 >= 0x41)
  {
    v43 = v10;
    v45 = v8;
    v13 = (char *)operator new[]();
    memcpy(v13, a2[2], ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    v29 = 0;
    v30 = (unint64_t *)*a2;
    v31 = (unint64_t)(v11 + 63) >> 6;
    v32 = (unint64_t *)v13;
    v33 = v31;
    do
    {
      v34 = *v30++;
      v35 = *v32 - v34;
      v36 = *v32 < v34;
      v37 = *v32 + ~v34;
      if (v29)
      {
        v29 = v37 >= *v32;
      }
      else
      {
        v37 = v35;
        v29 = v36;
      }
      *v32++ = v37;
      --v33;
    }
    while (v33);
    *(_QWORD *)&v13[8 * (v31 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    v10 = v43;
    v8 = v45;
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (!(_DWORD)v11)
      v12 = 0;
    v13 = (char *)(v12 & ((_BYTE *)a2[2] - (_BYTE *)*a2));
  }
  if (v8 > 0x40)
  {
    v15 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    while (v15)
    {
      v16 = *(_QWORD *)(v10 - 8 + v15);
      v17 = *(_QWORD *)&v13[v15 - 8];
      v15 -= 8;
      if (v16 != v17)
      {
        result = v16 <= v17;
        goto LABEL_15;
      }
    }
    result = 0;
  }
  else
  {
    result = v10 < (unint64_t)v13;
  }
LABEL_15:
  if (v11 >= 0x41 && v13)
  {
    v38 = v10;
    v39 = result;
    v40 = v13;
    v41 = v8;
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    LODWORD(v8) = v41;
    result = v39;
    v10 = v38;
  }
  if (v8 >= 0x41)
  {
    v42 = result;
    if (v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    return v42;
  }
  return result;
}

BOOL llvm::ConstantRange::isSizeLargerThan(llvm::ConstantRange *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  BOOL v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  _BOOL4 v24;
  int v25;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unsigned int v30;
  unint64_t *v31;
  unsigned int v32;

  v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    v5 = *(_QWORD *)this;
    v6 = (const void *)*((_QWORD *)this + 2);
    if (memcmp(*(const void **)this, v6, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countTrailingOnesSlowCase(this) != (_DWORD)v4)
    {
LABEL_3:
      v7 = *((unsigned int *)this + 6);
      if (v7 < 0x41)
      {
        v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
        if (!(_DWORD)v7)
          v8 = 0;
        v9 = (_QWORD *)(v8 & ((unint64_t)v6 - v5));
        return (unint64_t)v9 > a2;
      }
      v14 = (unint64_t *)operator new[]();
      memcpy(v14, *((const void **)this + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
      v15 = 0;
      v16 = 0;
      v17 = *(_QWORD *)this;
      v18 = (unint64_t)(v7 + 63) >> 6;
      do
      {
        v19 = v14[v15];
        v20 = *(_QWORD *)(v17 + v15 * 8);
        v21 = v19 - v20;
        v22 = v19 < v20;
        v23 = v19 + ~v20;
        v24 = v23 >= v19;
        if (v16)
        {
          v16 = v24;
        }
        else
        {
          v23 = v21;
          v16 = v22;
        }
        v14[v15++] = v23;
      }
      while (v18 != v15);
      v25 = 0;
      v14[(v18 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      do
      {
        if (v18-- < 1)
          break;
        v27 = v14[v18];
        v25 += __clz(v27);
      }
      while (!v27);
      v28 = v7 | 0xFFFFFFC0;
      if ((v7 & 0x3F) == 0)
        v28 = 0;
      v10 = (v7 - v25 - v28) > 0x40 || *v14 > a2;
      v29 = v14;
LABEL_33:
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      return v10;
    }
  }
  else
  {
    v5 = *(_QWORD *)this;
    v6 = (const void *)*((_QWORD *)this + 2);
    if (*(const void **)this != v6)
      goto LABEL_3;
    v12 = !(_DWORD)v4 || v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    v6 = *(const void **)this;
    if (!v12)
      goto LABEL_3;
  }
  if (!a2)
    return 1;
  sub_1C4832EA4((llvm::APInt *)&v31, v4, -1, 1);
  --a2;
  v13 = v32;
  if (v32 >= 0x41)
  {
    v30 = v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v31);
    v29 = v31;
    if (v30 <= 0x40)
    {
      v10 = *v31 > a2;
    }
    else
    {
      v10 = 1;
      if (!v31)
        return v10;
    }
    goto LABEL_33;
  }
  v9 = v31;
  return (unint64_t)v9 > a2;
}

BOOL llvm::ConstantRange::contains(llvm::ConstantRange *this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  const llvm::APInt *v32;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v32 = a2;
    v15 = *(_QWORD *)this;
    v30 = *((_DWORD *)this + 2);
    v16 = v2 + 63;
    v4 = (char *)*((_QWORD *)this + 2);
    if (memcmp(*(const void **)this, v4, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8))
    {
      v17 = 8 * (v16 >> 6);
      v18 = v15 - 8;
      v19 = v17;
      while (v19)
      {
        v20 = *(_QWORD *)(v18 + v19);
        v21 = *(_QWORD *)&v4[v19 - 8];
        v19 -= 8;
        if (v20 != v21)
        {
          v22 = v20 > v21;
          goto LABEL_23;
        }
      }
      v22 = 0;
LABEL_23:
      a2 = v32;
      v5 = *(_QWORD *)v32;
      while (v17)
      {
        v23 = *(_QWORD *)(v18 + v17);
        v24 = *(_QWORD *)(v5 + v17 - 8);
        v17 -= 8;
        if (v23 != v24)
        {
          v6 = v23 <= v24;
          if (!v22)
            goto LABEL_4;
          goto LABEL_27;
        }
      }
      if (v22)
        return 1;
      a2 = v32;
      goto LABEL_5;
    }
    return llvm::APInt::countTrailingOnesSlowCase(this) == v30;
  }
  else
  {
    v3 = *(_QWORD *)this;
    v4 = (char *)*((_QWORD *)this + 2);
    if (*(char **)this != v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = v3 <= *(_QWORD *)a2;
      if (v3 <= (unint64_t)v4)
      {
LABEL_4:
        if (v6)
        {
LABEL_5:
          v7 = *((unsigned int *)a2 + 2);
          if (v7 <= 0x40)
            return v5 < (unint64_t)v4;
          v9 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
          v10 = v5 - 8;
          while (v9)
          {
            v11 = *(_QWORD *)(v10 + v9);
            v12 = *(_QWORD *)&v4[v9 - 8];
            v9 -= 8;
            v13 = v11 > v12;
            if (v11 != v12)
              return !v13;
          }
        }
        return 0;
      }
LABEL_27:
      if (!v6)
      {
        v25 = *((unsigned int *)a2 + 2);
        if (v25 <= 0x40)
          return v5 < (unint64_t)v4;
        v26 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
        v27 = v5 - 8;
        while (v26)
        {
          v28 = *(_QWORD *)(v27 + v26);
          v29 = *(_QWORD *)&v4[v26 - 8];
          v26 -= 8;
          v13 = v28 > v29;
          if (v28 != v29)
            return !v13;
        }
        return 0;
      }
      return 1;
    }
    if (!(_DWORD)v2)
      return 1;
    return v3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
}

uint64_t llvm::ConstantRange::getActiveBits(llvm::ConstantRange *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t v6;
  unsigned int v7;

  v2 = *((unsigned int *)this + 2);
  if (v2 < 0x41)
  {
    if (*((_QWORD *)this + 2) | *(_QWORD *)this)
      goto LABEL_3;
    return 0;
  }
  if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v2)
  {
    return 0;
  }
LABEL_3:
  llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v6);
  v3 = v7;
  if (v7 > 0x40)
  {
    v4 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v6);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  else
  {
    v4 = v7 + __clz(v6) - 64;
  }
  return v3 - v4;
}

uint64_t llvm::ConstantRange::getMinSignedBits(llvm::ConstantRange *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *((unsigned int *)this + 2);
  if (v2 < 0x41)
  {
    if (*((_QWORD *)this + 2) | *(_QWORD *)this)
      goto LABEL_3;
    return 0;
  }
  if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v2)
  {
    return 0;
  }
LABEL_3:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v11);
  v3 = v12;
  v4 = v3 - sub_1C4959174((llvm::APInt *)&v11) + 1;
  llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v9);
  v5 = v10;
  v6 = v5 - sub_1C4959174((llvm::APInt *)&v9);
  if (v4 <= v6 + 1)
    v7 = (v6 + 1);
  else
    v7 = v4;
  if (v10 >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  if (v12 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  return v7;
}

char *llvm::ConstantRange::subtract@<X0>(char *this@<X0>, unint64_t **a2@<X1>, llvm::APInt *a3@<X8>)
{
  const void **v4;
  uint64_t v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  llvm::APInt *v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t v16;
  size_t v17;
  unint64_t *v18;
  uint64_t v19;
  llvm::APInt *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  const void **v29;
  const llvm::APInt *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  const void **v39;
  const llvm::APInt *v40;
  int v41;
  const void **v42;
  llvm::APInt *v43;
  int v44;
  int v45;
  llvm::APInt *v46;
  llvm::APInt *v47;

  v4 = (const void **)(this + 16);
  v5 = *((unsigned int *)this + 2);
  if (v5 <= 0x40)
  {
    v6 = *(char **)this;
    if (*(_QWORD *)this != *((_QWORD *)this + 2))
    {
      v7 = *a2;
      v8 = v6 - (char *)*a2;
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      if (!(_DWORD)v5)
        v9 = 0;
      v10 = (llvm::APInt *)(v9 & v8);
      goto LABEL_6;
    }
    *((_DWORD *)a3 + 2) = v5;
    *(_QWORD *)a3 = v6;
LABEL_12:
    v15 = *((_DWORD *)this + 6);
    *((_DWORD *)a3 + 6) = v15;
    if (v15 > 0x40)
      return (char *)llvm::APInt::initSlowCase((llvm::APInt *)((char *)a3 + 16), v4);
    *((_QWORD *)a3 + 2) = *v4;
    return this;
  }
  v39 = (const void **)(this + 16);
  v40 = (const llvm::APInt *)a2;
  v44 = *((_DWORD *)this + 2);
  v46 = a3;
  v16 = v5 + 63;
  v42 = (const void **)this;
  v17 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
  if (!memcmp(*(const void **)this, *((const void **)this + 2), v17))
  {
    *((_DWORD *)v46 + 2) = v44;
    llvm::APInt::initSlowCase(v46, v42);
    this = (char *)v42;
    a3 = v46;
    v4 = v39;
    goto LABEL_12;
  }
  v18 = (unint64_t *)operator new[]();
  memcpy(v18, *v42, v17);
  v19 = 0;
  v7 = *(unint64_t **)v40;
  v20 = (llvm::APInt *)v18;
  v21 = *(unint64_t **)v40;
  v22 = v16 >> 6;
  do
  {
    v23 = *v21++;
    v24 = *v18 - v23;
    v25 = *v18 < v23;
    v26 = *v18 + ~v23;
    if (v19)
    {
      v19 = v26 >= *v18;
    }
    else
    {
      v26 = v24;
      v19 = v25;
    }
    *v18++ = v26;
    --v22;
  }
  while (v22);
  this = (char *)v42;
  LODWORD(v5) = v44;
  v10 = v20;
  *((_QWORD *)v20 + (v16 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
  a3 = v46;
  v4 = v39;
  a2 = (unint64_t **)v40;
LABEL_6:
  v11 = *((unsigned int *)this + 6);
  if (v11 >= 0x41)
  {
    v43 = v10;
    v45 = v5;
    v47 = a3;
    v41 = *((_DWORD *)this + 6);
    v27 = v11 + 63;
    v28 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
    v29 = v4;
    v30 = (const llvm::APInt *)a2;
    v31 = (unint64_t *)operator new[]();
    this = (char *)memcpy(v31, *v29, v28);
    v32 = 0;
    v33 = *(unint64_t **)v30;
    v14 = v31;
    v34 = v27 >> 6;
    do
    {
      v35 = *v33++;
      v36 = *v31 - v35;
      v37 = *v31 < v35;
      v38 = *v31 + ~v35;
      if (v32)
      {
        v32 = v38 >= *v31;
      }
      else
      {
        v38 = v36;
        v32 = v37;
      }
      *v31++ = v38;
      --v34;
    }
    while (v34);
    LODWORD(v11) = v41;
    v10 = v43;
    v14[(v27 >> 6) - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
    LODWORD(v5) = v45;
    a3 = v47;
  }
  else
  {
    v12 = (_BYTE *)*v4 - (_BYTE *)v7;
    v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (!(_DWORD)v11)
      v13 = 0;
    v14 = (_QWORD *)(v13 & v12);
  }
  *((_DWORD *)a3 + 2) = v5;
  *(_QWORD *)a3 = v10;
  *((_DWORD *)a3 + 6) = v11;
  *((_QWORD *)a3 + 2) = v14;
  return this;
}

uint64_t llvm::ConstantRange::difference@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  llvm::ConstantRange::inverse(a2, (uint64_t)&v6);
  result = llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v6, 0, a3);
  if (v9 >= 0x41)
  {
    result = v8;
    if (v8)
      result = MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  }
  if (v7 >= 0x41)
  {
    result = v6;
    if (v6)
      return MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C5360914(uint64_t result, llvm::ConstantRange *this, llvm::ConstantRange *a3, int a4)
{
  uint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  void *v9;
  llvm::APInt *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t **v15;
  uint64_t v16;
  char *v17;
  llvm::APInt *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  llvm::APInt *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  void *v60;
  const void *v61;
  size_t v62;
  unint64_t v63;
  size_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t **v68;
  char *v69;
  unsigned int v70;
  llvm::APInt *v71;
  const void **v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  size_t v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  llvm::APInt *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t **v94;
  int v95;
  llvm::APInt *v96;
  int v97;
  llvm::APInt *v98;
  llvm::APInt *v99;
  llvm::APInt *v100;
  llvm::APInt *v101;
  llvm::APInt *v102;
  llvm::APInt *v103;

  v6 = result;
  if (a4 != 2)
  {
    if (a4 != 1)
      goto LABEL_21;
    v7 = (llvm::ConstantRange *)((char *)this + 16);
    v8 = *((unsigned int *)this + 2);
    if (v8 > 0x40)
    {
      v9 = *(void **)this;
      v10 = (llvm::APInt *)*((_QWORD *)this + 2);
      v47 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
      while (v47)
      {
        v48 = *(_QWORD *)(*(_QWORD *)this - 8 + v47);
        v49 = *(_QWORD *)((char *)v10 + v47 - 8);
        v47 -= 8;
        if (v48 != v49)
        {
          if (v48 <= v49)
            break;
          goto LABEL_64;
        }
      }
    }
    else
    {
      v9 = *(void **)this;
      v10 = (llvm::APInt *)*((_QWORD *)this + 2);
      if (*(_QWORD *)this > (unint64_t)v10)
      {
LABEL_64:
        v14 = *((_DWORD *)this + 6);
        if (v14 > 0x40)
        {
          v96 = v10;
          v101 = (llvm::ConstantRange *)((char *)this + 16);
          result = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16));
          if ((_DWORD)result != v14)
          {
LABEL_136:
            result = llvm::APInt::countLeadingZerosSlowCase(v101);
            if ((_DWORD)result == v14)
              goto LABEL_21;
            goto LABEL_66;
          }
          v11 = 1;
          v10 = v96;
          v7 = v101;
        }
        else
        {
          if (v10)
          {
LABEL_66:
            v15 = (unint64_t **)((char *)a3 + 16);
            v50 = (llvm::APInt *)*((unsigned int *)a3 + 2);
            if (v50 > 0x40)
            {
              v52 = *((_QWORD *)a3 + 2);
              v65 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
              v51 = *(_QWORD *)a3;
              while (v65)
              {
                v66 = *(_QWORD *)(*(_QWORD *)a3 - 8 + v65);
                v67 = *(_QWORD *)(v52 - 8 + v65);
                v65 -= 8;
                if (v66 != v67)
                {
                  if (v66 > v67)
                    goto LABEL_90;
                  break;
                }
              }
            }
            else
            {
              v51 = *(_QWORD *)a3;
              v52 = *((_QWORD *)a3 + 2);
              if (*(_QWORD *)a3 <= v52)
              {
                *(_DWORD *)(v6 + 8) = (_DWORD)v50;
LABEL_69:
                *(_QWORD *)v6 = v51;
LABEL_102:
                v36 = *((unsigned int *)a3 + 6);
LABEL_103:
                *(_DWORD *)(v6 + 24) = v36;
                if (v36 <= 0x40)
                {
                  v28 = *v15;
                  goto LABEL_105;
                }
                v59 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
                v60 = (void *)operator new[]();
                *(_QWORD *)(v6 + 16) = v60;
                v61 = *v15;
LABEL_122:
                v64 = v59;
                return (uint64_t)memcpy(v60, v61, v64);
              }
LABEL_90:
              v70 = *((_DWORD *)a3 + 6);
              if (v70 > 0x40)
              {
                v103 = (llvm::APInt *)*((unsigned int *)a3 + 2);
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)a3 + 16));
                v50 = v103;
                if ((_DWORD)result != v70)
                  goto LABEL_21;
              }
              else if (v52)
              {
                goto LABEL_21;
              }
            }
            *(_DWORD *)(v6 + 8) = (_DWORD)v50;
            if (v50 < 0x41)
              goto LABEL_69;
LABEL_110:
            v80 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
            v81 = (void *)operator new[]();
            *(_QWORD *)v6 = v81;
            result = (uint64_t)memcpy(v81, *(const void **)a3, v80);
            goto LABEL_102;
          }
          v11 = 1;
        }
LABEL_6:
        v12 = *((unsigned int *)a3 + 2);
        if (v12 > 0x40)
        {
          v13 = *((_QWORD *)a3 + 2);
          v53 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
          while (v53)
          {
            v54 = *(_QWORD *)(*(_QWORD *)a3 - 8 + v53);
            v55 = *(_QWORD *)(v13 - 8 + v53);
            v53 -= 8;
            if (v54 != v55)
            {
              if (v54 <= v55)
                goto LABEL_8;
              goto LABEL_75;
            }
          }
          goto LABEL_8;
        }
        v13 = *((_QWORD *)a3 + 2);
        if (*(_QWORD *)a3 <= v13)
        {
LABEL_8:
          if (!v11)
            goto LABEL_21;
          v14 = *((_DWORD *)this + 6);
          if (v14 <= 0x40)
          {
            if (!v10)
              goto LABEL_21;
            goto LABEL_66;
          }
          v101 = v7;
          goto LABEL_136;
        }
LABEL_75:
        v56 = *((_DWORD *)a3 + 6);
        if (v56 > 0x40)
        {
          v102 = v7;
          v93 = v8;
          v88 = v10;
          v97 = v11;
          result = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)a3 + 16));
          v11 = v97;
          v10 = v88;
          v8 = v93;
          v7 = v102;
          if ((_DWORD)result == v56)
            goto LABEL_8;
        }
        else if (!v13)
        {
          goto LABEL_8;
        }
        *(_DWORD *)(v6 + 8) = v8;
        if (v8 > 0x40)
        {
          v71 = v7;
          v9 = (void *)operator new[]();
          result = (uint64_t)memcpy(v9, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
          v7 = v71;
        }
        *(_QWORD *)v6 = v9;
        v57 = *((unsigned int *)this + 6);
        *(_DWORD *)(v6 + 24) = v57;
        if (v57 <= 0x40)
        {
          v28 = *(unint64_t **)v7;
          goto LABEL_105;
        }
        v59 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
        v72 = (const void **)v7;
        v60 = (void *)operator new[]();
        *(_QWORD *)(v6 + 16) = v60;
        v61 = *v72;
        goto LABEL_122;
      }
    }
    v11 = 0;
    goto LABEL_6;
  }
  v15 = (unint64_t **)((char *)this + 16);
  v16 = *((unsigned int *)this + 2);
  if (v16 > 0x40)
  {
    v17 = *(char **)this;
    v37 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v16 - 1) >> 6)) & (1 << (v16 - 1));
    v32 = *((_DWORD *)this + 6);
    v18 = (llvm::APInt *)*((_QWORD *)this + 2);
    v38 = (_QWORD *)((char *)v18 + 8 * ((v32 - 1) >> 6));
    if (v32 < 0x41)
      v38 = (_QWORD *)((char *)this + 16);
    if ((v37 != 0) == ((*v38 >> (v32 - 1)) & 1))
    {
      v41 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      while (v41)
      {
        v42 = *(_QWORD *)&v17[v41 - 8];
        v43 = *(_QWORD *)((char *)v18 + v41 - 8);
        v41 -= 8;
        if (v42 != v43)
        {
          if (v42 <= v43)
            goto LABEL_14;
          goto LABEL_31;
        }
      }
      goto LABEL_14;
    }
    if (v37)
    {
LABEL_14:
      v19 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    v17 = *(char **)this;
    v18 = (llvm::APInt *)*((_QWORD *)this + 2);
    if ((uint64_t)(*(_QWORD *)this << -(char)v16) >> -(char)v16 <= (uint64_t)((_QWORD)v18 << -(char)v16) >> -(char)v16)
      goto LABEL_14;
    v32 = *((_DWORD *)this + 6);
  }
LABEL_31:
  v33 = v32 - 1;
  if (v32 > 0x40)
  {
    v89 = v17;
    v91 = *((unsigned int *)this + 2);
    v94 = (unint64_t **)((char *)this + 16);
    v98 = v18;
    v73 = v33 >> 6;
    v74 = v32 - 1;
    v75 = 1 << (v32 - 1);
    if ((*((_QWORD *)v18 + v73) & v75) == 0
      || llvm::APInt::countTrailingZerosSlowCase(v94) != v74)
    {
      v92 = v74;
      goto LABEL_97;
    }
    v19 = 1;
    v15 = v94;
    v18 = v98;
    v17 = v89;
    v16 = v91;
LABEL_15:
    result = (uint64_t)a3 + 16;
    v20 = *((unsigned int *)a3 + 2);
    if (v20 > 0x40)
    {
      v39 = *(_QWORD *)(*(_QWORD *)a3 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
      v34 = *((_DWORD *)a3 + 6);
      v21 = *((_QWORD *)a3 + 2);
      v40 = (_QWORD *)(v21 + 8 * ((v34 - 1) >> 6));
      if (v34 < 0x41)
        v40 = (_QWORD *)((char *)a3 + 16);
      if ((v39 != 0) == ((*v40 >> (v34 - 1)) & 1))
      {
        v44 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
        while (v44)
        {
          v45 = *(_QWORD *)(*(_QWORD *)a3 - 8 + v44);
          v46 = *(_QWORD *)(v21 + v44 - 8);
          v44 -= 8;
          if (v45 != v46)
          {
            if (v45 <= v46)
              goto LABEL_17;
            goto LABEL_35;
          }
        }
        goto LABEL_17;
      }
      if (v39)
      {
LABEL_17:
        if (!v19)
          goto LABEL_21;
        v22 = *((_DWORD *)this + 6);
        v23 = v22 - 1;
        if (v22 <= 0x40)
        {
          v24 = 1 << v23;
          goto LABEL_20;
        }
        v94 = v15;
        v98 = v18;
        v73 = v23 >> 6;
        v92 = v22 - 1;
        v75 = 1 << (v22 - 1);
LABEL_97:
        result = (uint64_t)v94;
        if ((v75 & *((_QWORD *)v98 + v73)) != 0)
        {
          result = llvm::APInt::countTrailingZerosSlowCase(v94);
          if ((_DWORD)result == v92)
            goto LABEL_21;
        }
        goto LABEL_98;
      }
    }
    else
    {
      v21 = *((_QWORD *)a3 + 2);
      if ((uint64_t)(*(_QWORD *)a3 << -(char)v20) >> -(char)v20 <= v21 << -(char)v20 >> -(char)v20)
        goto LABEL_17;
      v34 = *((_DWORD *)a3 + 6);
    }
LABEL_35:
    v35 = v34 - 1;
    if (v34 > 0x40)
    {
      if (((*(_QWORD *)(v21 + 8 * (v35 >> 6)) >> v35) & 1) != 0)
      {
        v90 = v17;
        v95 = v19;
        v99 = v18;
        result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
        v19 = v95;
        v18 = v99;
        v17 = v90;
        if ((_DWORD)result == v35)
          goto LABEL_17;
      }
    }
    else if (v21 == 1 << v35)
    {
      goto LABEL_17;
    }
    *(_DWORD *)(v6 + 8) = v16;
    if (v16 > 0x40)
    {
      v68 = v15;
      v69 = (char *)operator new[]();
      result = (uint64_t)memcpy(v69, *(const void **)this, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
      v17 = v69;
      v15 = v68;
    }
    *(_QWORD *)v6 = v17;
    v36 = *((unsigned int *)this + 6);
    goto LABEL_103;
  }
  v19 = 1;
  v24 = 1 << v33;
  if (v18 == (llvm::APInt *)v24)
    goto LABEL_15;
LABEL_20:
  if (v18 == (llvm::APInt *)v24)
    goto LABEL_21;
LABEL_98:
  v15 = (unint64_t **)((char *)a3 + 16);
  v50 = (llvm::APInt *)*((unsigned int *)a3 + 2);
  if (v50 > 0x40)
  {
    v76 = *(_QWORD *)a3;
    v82 = *(_QWORD *)(*(_QWORD *)a3 + 8 * (((_DWORD)v50 - 1) >> 6)) & (1 << (v50 - 1));
    v78 = *((_DWORD *)a3 + 6);
    v77 = *((_QWORD *)a3 + 2);
    v83 = (_QWORD *)(v77 + 8 * ((v78 - 1) >> 6));
    if (v78 < 0x41)
      v83 = (_QWORD *)((char *)a3 + 16);
    if ((v82 != 0) == ((*v83 >> (v78 - 1)) & 1))
    {
      v84 = (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8;
      while (v84)
      {
        v85 = *(_QWORD *)(v76 - 8 + v84);
        v86 = *(_QWORD *)(v77 + v84 - 8);
        v84 -= 8;
        if (v85 != v86)
        {
          if (v85 <= v86)
            goto LABEL_109;
          goto LABEL_107;
        }
      }
      goto LABEL_109;
    }
    if (v82)
    {
      *(_DWORD *)(v6 + 8) = (_DWORD)v50;
      goto LABEL_110;
    }
  }
  else
  {
    v76 = *(_QWORD *)a3;
    v77 = *((_QWORD *)a3 + 2);
    if ((uint64_t)(*(_QWORD *)a3 << -(char)v50) >> -(char)v50 <= v77 << -(char)v50 >> -(char)v50)
    {
      *(_DWORD *)(v6 + 8) = (_DWORD)v50;
      goto LABEL_101;
    }
    v78 = *((_DWORD *)a3 + 6);
  }
LABEL_107:
  v79 = v78 - 1;
  if (v78 <= 0x40)
  {
    if (v77 != 1 << v79)
      goto LABEL_21;
LABEL_109:
    *(_DWORD *)(v6 + 8) = (_DWORD)v50;
    if (v50 >= 0x41)
      goto LABEL_110;
LABEL_101:
    *(_QWORD *)v6 = v76;
    goto LABEL_102;
  }
  if (((*(_QWORD *)(v77 + 8 * (v79 >> 6)) >> v79) & 1) != 0)
  {
    v100 = (llvm::APInt *)*((unsigned int *)a3 + 2);
    v87 = v76;
    result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a3 + 2);
    v76 = v87;
    v50 = v100;
    if ((_DWORD)result == v79)
      goto LABEL_109;
  }
LABEL_21:
  result = llvm::ConstantRange::isSizeStrictlySmallerThan(this, (const void **)a3);
  if ((_DWORD)result)
  {
    v25 = *((unsigned int *)this + 2);
    *(_DWORD *)(v6 + 8) = v25;
    if (v25 > 0x40)
    {
      v58 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
      v26 = (void *)operator new[]();
      result = (uint64_t)memcpy(v26, *(const void **)this, v58);
    }
    else
    {
      v26 = *(void **)this;
    }
    *(_QWORD *)v6 = v26;
    v27 = *((unsigned int *)this + 6);
    *(_DWORD *)(v6 + 24) = v27;
    if (v27 <= 0x40)
    {
      v28 = (unint64_t *)*((_QWORD *)this + 2);
LABEL_105:
      *(_QWORD *)(v6 + 16) = v28;
      return result;
    }
    v59 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
    v60 = (void *)operator new[]();
    *(_QWORD *)(v6 + 16) = v60;
    v61 = (const void *)*((_QWORD *)this + 2);
    goto LABEL_122;
  }
  v29 = *((unsigned int *)a3 + 2);
  *(_DWORD *)(v6 + 8) = v29;
  if (v29 > 0x40)
  {
    v62 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
    v30 = (void *)operator new[]();
    result = (uint64_t)memcpy(v30, *(const void **)a3, v62);
  }
  else
  {
    v30 = *(void **)a3;
  }
  *(_QWORD *)v6 = v30;
  v31 = *((unsigned int *)a3 + 6);
  *(_DWORD *)(v6 + 24) = v31;
  if (v31 <= 0x40)
  {
    v28 = (unint64_t *)*((_QWORD *)a3 + 2);
    goto LABEL_105;
  }
  v63 = ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8;
  v60 = (void *)operator new[]();
  *(_QWORD *)(v6 + 16) = v60;
  v61 = (const void *)*((_QWORD *)a3 + 2);
  v64 = v63;
  return (uint64_t)memcpy(v60, v61, v64);
}

uint64_t llvm::ConstantRange::unionWith@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  const void **v14;
  _BOOL4 v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  BOOL v33;
  const void **v34;
  BOOL v35;
  uint64_t v36;
  const void **v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  unsigned int v43;
  BOOL v44;
  const void **v45;
  const void **v46;
  void *v47;
  uint64_t v48;
  const void **v49;
  BOOL v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  const void **v71;
  void *v72;
  const void **v73;
  uint64_t v74;
  const void **v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  char *v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  const void **v93;
  unint64_t v94;
  BOOL v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  const void **v117;
  void *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  int64_t v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  const void **v154;
  size_t v155;
  const void **v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  int v161;
  int64_t v162;
  unint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  const void **v171;
  int v172;
  uint64_t v173;
  const void **v174;
  int v175;
  int v176;
  const void **v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const void **v181;
  uint64_t v182;
  size_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  size_t v189;
  uint64_t v190;
  const void **v191;
  int v192;
  int v193;
  const void **v194;
  uint64_t v195;
  uint64_t v196;
  const void **v197;
  char *v198;
  char *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  int v204;
  const void **v205;
  const void **v206;
  uint64_t v207;
  uint64_t v208;
  const void **v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  unsigned int v222;
  char *v223;
  unsigned int v224;
  char *v225;
  int v226;
  void *v227;
  int v228;
  unint64_t v229;
  unsigned int v230;
  void *v231;
  int v232;

  LODWORD(v7) = *(_DWORD *)(result + 8);
  while (1)
  {
    v8 = a2;
    a2 = (unsigned int *)result;
    v9 = v7;
    v10 = result + 16;
    if (v7 > 0x40)
    {
      v57 = a3;
      v58 = result + 16;
      v59 = a4;
      v11 = *(_QWORD *)result;
      v60 = *(char **)(result + 16);
      result = memcmp(*(const void **)result, v60, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
      if ((_DWORD)result)
      {
        v12 = (unint64_t)v60;
        a4 = v59;
        v10 = v58;
        a3 = v57;
        v13 = v60;
      }
      else
      {
        result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2);
        if ((_DWORD)result == v9)
        {
          *(_DWORD *)(v59 + 8) = v9;
          goto LABEL_228;
        }
        v13 = v60;
        v12 = (unint64_t)v60;
        a4 = v59;
        v10 = v58;
        a3 = v57;
      }
    }
    else
    {
      v11 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)result == v12)
      {
        if (!(_DWORD)v7 || v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v7)
        {
          *(_DWORD *)(a4 + 8) = v7;
          goto LABEL_145;
        }
        v13 = *(char **)(result + 16);
        v12 = *(_QWORD *)result;
      }
      else
      {
        v13 = *(char **)(result + 16);
      }
    }
    v14 = (const void **)(v8 + 4);
    v7 = v8[2];
    v15 = v7 < 0x41;
    if (v7 >= 0x41)
    {
      v199 = v13;
      v201 = a3;
      v205 = (const void **)(v8 + 4);
      v207 = v10;
      v212 = a4;
      v16 = *(char **)v8;
      v55 = (char *)*((_QWORD *)v8 + 2);
      result = memcmp(*(const void **)v8, v55, ((v7 + 63) >> 3) & 0x3FFFFFF8);
      if ((_DWORD)result)
      {
        v17 = (unint64_t)v55;
        v10 = v207;
        a4 = v212;
        v14 = (const void **)(v8 + 4);
        a3 = v201;
        v13 = v199;
        v18 = v55;
      }
      else
      {
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v8);
        v10 = v207;
        a4 = v212;
        if ((_DWORD)result == (_DWORD)v7)
        {
LABEL_144:
          *(_DWORD *)(a4 + 8) = v9;
          if (v9 >= 0x41)
          {
            v58 = v10;
            v59 = a4;
LABEL_228:
            v141 = (void *)operator new[]();
            *(_QWORD *)v59 = v141;
            result = (uint64_t)memcpy(v141, *(const void **)a2, (((unint64_t)*(unsigned int *)(v59 + 8) + 63) >> 3) & 0x3FFFFFF8);
            a4 = v59;
            v10 = v58;
          }
          else
          {
LABEL_145:
            *(_QWORD *)a4 = *(_QWORD *)a2;
          }
          goto LABEL_146;
        }
        result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v8);
        if ((_DWORD)result == (_DWORD)v7)
        {
          *(_DWORD *)(v212 + 8) = v7;
LABEL_212:
          v130 = (void *)operator new[]();
          *(_QWORD *)v212 = v130;
          result = (uint64_t)memcpy(v130, *(const void **)v8, (((unint64_t)*(unsigned int *)(v212 + 8) + 63) >> 3) & 0x3FFFFFF8);
          a4 = v212;
          v14 = v205;
          goto LABEL_88;
        }
        v18 = v55;
        v17 = (unint64_t)v55;
        v10 = v207;
        a4 = v212;
        v14 = (const void **)(v8 + 4);
        a3 = v201;
        v13 = v199;
      }
    }
    else
    {
      v16 = *(char **)v8;
      v17 = *((_QWORD *)v8 + 2);
      if (!(v17 | *(_QWORD *)v8))
        goto LABEL_144;
      if (v16 == (char *)v17)
      {
        if (!(_DWORD)v7 || v16 == (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v7))
        {
          *(_DWORD *)(a4 + 8) = v7;
          goto LABEL_87;
        }
        v18 = (char *)*((_QWORD *)v8 + 2);
        v17 = *(_QWORD *)v8;
      }
      else
      {
        v18 = (char *)*((_QWORD *)v8 + 2);
      }
    }
    if (v9 >= 0x41)
    {
      v202 = a3;
      v206 = v14;
      v208 = v10;
      v213 = a4;
      v198 = v18;
      v200 = a2[2];
      v56 = v13;
      result = memcmp((const void *)v11, v13, ((unint64_t)(v200 + 63) >> 3) & 0x3FFFFFF8);
      if ((_DWORD)result)
      {
        v10 = v208;
        a4 = v213;
        v14 = v206;
        a3 = v202;
        v18 = v198;
        v19 = v200;
        v13 = v56;
      }
      else
      {
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2);
        v10 = v208;
        a4 = v213;
        v14 = v206;
        a3 = v202;
        v18 = v198;
        v19 = v200;
        v13 = v56;
        if ((_DWORD)result == v9)
        {
LABEL_155:
          *(_DWORD *)(a4 + 8) = v7;
          if (v7 >= 0x41)
          {
            v205 = v14;
            v212 = a4;
            goto LABEL_212;
          }
LABEL_87:
          *(_QWORD *)a4 = *(_QWORD *)v8;
LABEL_88:
          v53 = v8[6];
          *(_DWORD *)(a4 + 24) = v53;
          if (v53 <= 0x40)
          {
            v54 = (void *)*v14;
LABEL_148:
            *(_QWORD *)(a4 + 16) = v54;
            return result;
          }
          v116 = a4;
          v117 = v14;
LABEL_191:
          v118 = (void *)operator new[]();
          *(_QWORD *)(v116 + 16) = v118;
          return (uint64_t)memcpy(v118, *v117, (((unint64_t)*(unsigned int *)(v116 + 24) + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
    else
    {
      if (!(v12 | v11))
        goto LABEL_155;
      v19 = a2[2];
    }
    if (v19 <= 0x40)
      break;
    v61 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
    while (v61)
    {
      v62 = *(_QWORD *)(v11 - 8 + v61);
      v63 = *(_QWORD *)&v13[v61 - 8];
      v61 -= 8;
      v20 = v62 > v63;
      if (v62 != v63)
        goto LABEL_14;
    }
LABEL_15:
    if (v7 > 0x40)
    {
      v64 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v64)
          goto LABEL_105;
        v65 = *(_QWORD *)&v16[v64 - 8];
        v66 = *(_QWORD *)&v18[v64 - 8];
        v64 -= 8;
      }
      while (v65 == v66);
      if (v65 <= v66)
      {
LABEL_105:
        v15 = 0;
        goto LABEL_26;
      }
      v21 = 1;
    }
    else
    {
      v21 = (unint64_t)v16 > v17;
      if ((unint64_t)v16 < v17)
      {
        v15 = 1;
LABEL_26:
        v22 = v8[6];
        if (v22 > 0x40)
        {
          v67 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
          while (v67)
          {
            v68 = *(_QWORD *)&v18[v67 - 8];
            v69 = *(_QWORD *)(v11 - 8 + v67);
            v67 -= 8;
            if (v68 != v69)
            {
              if (v68 <= v69)
                goto LABEL_28;
              break;
            }
          }
        }
        else if (v17 < v11)
        {
          goto LABEL_28;
        }
        v70 = a2[6];
        if (v70 > 0x40)
        {
          v86 = ((unint64_t)(v70 + 63) >> 3) & 0x3FFFFFF8;
          while (v86)
          {
            v87 = *(_QWORD *)&v13[v86 - 8];
            v88 = *(_QWORD *)&v16[v86 - 8];
            v86 -= 8;
            if (v87 != v88)
            {
              if (v87 <= v88)
                goto LABEL_28;
              break;
            }
          }
        }
        else if (v12 < (unint64_t)v16)
        {
LABEL_28:
          if (v9 >= 0x41)
          {
            v22 = a4;
            v170 = v10;
            v171 = v14;
            v172 = a3;
            v11 = operator new[]();
            memcpy((void *)v11, *(const void **)a2, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(a3) = v172;
            v14 = v171;
            v10 = v170;
            a4 = v22;
            LODWORD(v22) = v8[6];
          }
          if (v22 > 0x40)
          {
            v215 = a4;
            v173 = v10;
            v174 = v14;
            v175 = a3;
            v23 = (void *)operator new[]();
            memcpy(v23, *v174, (((unint64_t)v22 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(a3) = v175;
            v10 = v173;
            a4 = v215;
          }
          else
          {
            v23 = (void *)*v14;
          }
          v230 = v9;
          v229 = v11;
          v232 = v22;
          v231 = v23;
          v24 = v8[2];
          if (v24 > 0x40)
          {
            v210 = v10;
            v216 = a4;
            v176 = a3;
            v25 = (char *)operator new[]();
            memcpy(v25, *(const void **)v8, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(a3) = v176;
            v10 = v210;
            a4 = v216;
          }
          else
          {
            v25 = *(char **)v8;
          }
          v26 = a2[6];
          if (v26 > 0x40)
          {
            v217 = a4;
            v177 = (const void **)v10;
            v203 = a3;
            v27 = (void *)operator new[]();
            memcpy(v27, *v177, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(a3) = v203;
            a4 = v217;
          }
          else
          {
            v27 = *(void **)v10;
          }
          v226 = v24;
          v225 = v25;
          v228 = v26;
          v227 = v27;
          result = sub_1C5360914(a4, (llvm::ConstantRange *)&v229, (llvm::ConstantRange *)&v225, a3);
          if (v26 >= 0x41 && v27)
            result = MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
          if (v24 >= 0x41 && v25)
            result = MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
          if (v22 < 0x41)
            goto LABEL_39;
          goto LABEL_72;
        }
        if (v15)
        {
          v71 = (const void **)v8;
          if ((unint64_t)v16 < v11)
            goto LABEL_115;
        }
        else
        {
          v99 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
          while (v99)
          {
            v100 = *(_QWORD *)&v16[v99 - 8];
            v101 = *(_QWORD *)(v11 - 8 + v99);
            v99 -= 8;
            if (v100 != v101)
            {
              v71 = (const void **)v8;
              if (v100 <= v101)
                goto LABEL_115;
              break;
            }
          }
        }
        LODWORD(v7) = v19;
        v71 = (const void **)a2;
LABEL_115:
        if (v7 > 0x40)
        {
          v22 = a4;
          v153 = v10;
          v154 = v14;
          v72 = (void *)operator new[]();
          memcpy(v72, *v71, (((unint64_t)v7 + 63) >> 3) & 0x3FFFFFF8);
          v14 = v154;
          v10 = v153;
          a4 = v22;
          LODWORD(v22) = v8[6];
        }
        else
        {
          v72 = (void *)*v71;
        }
        v224 = v22;
        v73 = (const void **)v10;
        v74 = a4;
        if (v22 > 0x40)
        {
          v155 = (((unint64_t)v22 + 63) >> 3) & 0x3FFFFFF8;
          v156 = v14;
          v223 = (char *)operator new[]();
          v75 = v156;
          memcpy(v223, *v156, v155);
        }
        else
        {
          v75 = v14;
          v223 = (char *)*v14;
        }
        llvm::APInt::operator-=((uint64_t)&v223, 1uLL);
        v76 = v224;
        v77 = v223;
        v224 = 0;
        v222 = a2[6];
        if (v222 > 0x40)
        {
          v221 = (char *)operator new[]();
          memcpy(v221, *v73, (((unint64_t)v222 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v221 = (char *)*v73;
        }
        result = llvm::APInt::operator-=((uint64_t)&v221, 1uLL);
        v78 = v222;
        v79 = v221;
        v222 = 0;
        if (v76 > 0x40)
        {
          v102 = ((unint64_t)(v76 + 63) >> 3) & 0x3FFFFFF8;
          v81 = v74;
          while (v102)
          {
            v103 = *(_QWORD *)&v77[v102 - 8];
            v104 = *(_QWORD *)&v221[v102 - 8];
            v102 -= 8;
            v80 = v103 > v104;
            if (v103 != v104)
              goto LABEL_176;
          }
        }
        else
        {
          v80 = v77 > v221;
          v81 = v74;
          if (v77 >= v221)
          {
LABEL_176:
            if (v80)
              v73 = v75;
          }
        }
        v82 = *((unsigned int *)v73 + 2);
        if (v82 > 0x40)
        {
          v209 = v73;
          v214 = v81;
          v83 = (void *)operator new[]();
          result = (uint64_t)memcpy(v83, *v209, ((unint64_t)(v82 + 63) >> 3) & 0x3FFFFFF8);
          v81 = v214;
        }
        else
        {
          v83 = (void *)*v73;
        }
        if (v78 >= 0x41 && v79)
        {
          v157 = v79;
          v158 = v81;
          result = MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
          v81 = v158;
        }
        if (v222 >= 0x41)
        {
          result = (uint64_t)v221;
          if (v221)
          {
            v178 = v81;
            result = MEMORY[0x1CAA32F9C](v221, 0x1000C8000313F17);
            v81 = v178;
          }
        }
        if (v76 >= 0x41 && v77)
        {
          v159 = v77;
          v160 = v81;
          result = MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          v81 = v160;
        }
        if (v224 >= 0x41)
        {
          result = (uint64_t)v223;
          if (v223)
          {
            v179 = v81;
            result = MEMORY[0x1CAA32F9C](v223, 0x1000C8000313F17);
            v81 = v179;
          }
        }
        if (v7 > 0x40)
        {
          v161 = 0;
          v162 = ((unint64_t)v7 + 63) >> 6;
          do
          {
            v20 = v162-- < 1;
            if (v20)
              break;
            v163 = *((_QWORD *)v72 + v162);
            v161 += __clz(v163);
          }
          while (!v163);
          v164 = v7 | 0xFFFFFFC0;
          if ((v7 & 0x3F) == 0)
            v164 = 0;
          if (v161 + v164 != (_DWORD)v7)
            goto LABEL_133;
        }
        else if (v72)
        {
LABEL_133:
          *(_DWORD *)(v81 + 8) = v7;
          *(_QWORD *)v81 = v72;
          *(_DWORD *)(v81 + 24) = v82;
          *(_QWORD *)(v81 + 16) = v83;
          return result;
        }
        if (v82 > 0x40)
        {
          v149 = 0;
          v150 = (unint64_t)(v82 + 63) >> 6;
          do
          {
            v20 = v150-- < 1;
            if (v20)
              break;
            v151 = *((_QWORD *)v83 + v150);
            v149 += __clz(v151);
          }
          while (!v151);
          v152 = v82 | 0xFFFFFFC0;
          if ((v82 & 0x3F) == 0)
            v152 = 0;
          if (v149 + v152 != (_DWORD)v82)
            goto LABEL_133;
          result = (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)v81, a2[2], 1);
          if (v83)
            result = MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
        }
        else
        {
          if (v83)
            goto LABEL_133;
          result = (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)v81, a2[2], 1);
        }
        if (v7 < 0x41 || !v72)
          return result;
        v84 = (unint64_t)v72;
        return MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
      }
    }
    result = (uint64_t)v8;
    if (!v21)
      goto LABEL_26;
  }
  v20 = v11 > v12;
LABEL_14:
  if (!v20)
    goto LABEL_15;
  if (v7 > 0x40)
  {
    v89 = 8 * ((v7 + 63) >> 6);
    v90 = v16 - 8;
    v91 = v89;
    while (v91)
    {
      v92 = *(_QWORD *)&v90[v91];
      v93 = v14;
      v94 = *(_QWORD *)&v18[v91 - 8];
      v91 -= 8;
      v95 = v92 == v94;
      v96 = v92 > v94;
      v14 = v93;
      if (!v95)
      {
        if (!v96)
          break;
        while (v89)
        {
          v97 = *(_QWORD *)&v90[v89];
          v98 = *(_QWORD *)&v13[v89 - 8];
          v89 -= 8;
          v33 = v97 > v98;
          if (v97 != v98)
            goto LABEL_49;
        }
        return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
      }
    }
LABEL_43:
    v28 = v8[6];
    if (v28 > 0x40)
    {
      v105 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
      while (v105)
      {
        v106 = *(_QWORD *)&v18[v105 - 8];
        v107 = *(_QWORD *)&v13[v105 - 8];
        v105 -= 8;
        v29 = v106 > v107;
        if (v106 != v107)
          goto LABEL_45;
      }
      goto LABEL_46;
    }
    v29 = v17 > v12;
LABEL_45:
    if (!v29)
      goto LABEL_46;
    if (v7 > 0x40)
    {
      v108 = 8 * ((v7 + 63) >> 6);
      v109 = v16 - 8;
      v110 = v108;
      while (v110)
      {
        v111 = *(_QWORD *)&v109[v110];
        v34 = v14;
        v112 = *(_QWORD *)(v11 - 8 + v110);
        v110 -= 8;
        v95 = v111 == v112;
        v113 = v111 > v112;
        v14 = v34;
        if (!v95)
        {
          if (v113)
            goto LABEL_46;
          while (v108)
          {
            v114 = *(_QWORD *)&v109[v108];
            v115 = *(_QWORD *)&v13[v108 - 8];
            v108 -= 8;
            v35 = v114 > v115;
            if (v114 != v115)
              goto LABEL_54;
          }
          goto LABEL_55;
        }
      }
      goto LABEL_46;
    }
    if ((unint64_t)v16 >= v11)
    {
LABEL_46:
      *(_DWORD *)(a4 + 8) = v9;
      if (v9 <= 0x40)
        goto LABEL_145;
      v30 = a4;
      v31 = v10;
      v32 = (void *)operator new[]();
      *(_QWORD *)v30 = v32;
      result = (uint64_t)memcpy(v32, *(const void **)a2, (((unint64_t)*(unsigned int *)(v30 + 8) + 63) >> 3) & 0x3FFFFFF8);
      v10 = v31;
      a4 = v30;
LABEL_146:
      v85 = a2[6];
      *(_DWORD *)(a4 + 24) = v85;
      if (v85 <= 0x40)
      {
        v54 = *(void **)v10;
        goto LABEL_148;
      }
      v116 = a4;
      v117 = (const void **)v10;
      goto LABEL_191;
    }
    v34 = v14;
    v35 = (unint64_t)v16 > v12;
LABEL_54:
    if (!v35)
    {
LABEL_55:
      if (v19 > 0x40)
      {
        v126 = a4;
        result = (uint64_t)v18;
        v127 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
        while (1)
        {
          a4 = v126;
          if (!v127)
            return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
          v128 = *(_QWORD *)(v11 - 8 + v127);
          v129 = *(_QWORD *)&v18[v127 - 8];
          v127 -= 8;
          if (v128 != v129)
          {
            a4 = v126;
            if (v128 <= v129)
              return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
            goto LABEL_57;
          }
        }
      }
      if (v11 <= v17)
        return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
    }
LABEL_57:
    v36 = a2[6];
    if (v36 > 0x40)
    {
      v122 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
      while (v122)
      {
        v123 = *(_QWORD *)&v13[v122 - 8];
        v124 = *(_QWORD *)&v16[v122 - 8];
        v122 -= 8;
        if (v123 != v124)
        {
          if (v123 <= v124)
            goto LABEL_59;
          break;
        }
      }
    }
    else if (v12 < (unint64_t)v16)
    {
LABEL_59:
      if (v28 > 0x40)
      {
        result = v19;
        v142 = v10;
        v143 = a4;
        v144 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
        v145 = v18;
        v146 = v18 - 8;
        while (1)
        {
          a4 = v143;
          v10 = v142;
          LODWORD(v19) = result;
          v18 = v145;
          LODWORD(v28) = v8[6];
          if (!v144)
            break;
          v147 = *(_QWORD *)&v146[v144];
          v148 = *(_QWORD *)(v11 - 8 + v144);
          v144 -= 8;
          if (v147 != v148)
          {
            a4 = v143;
            v10 = v142;
            LODWORD(v19) = result;
            v18 = v145;
            LODWORD(v28) = v8[6];
            if (v147 <= v148)
              goto LABEL_61;
            break;
          }
        }
      }
      else if (v17 < v11)
      {
LABEL_61:
        if (v9 >= 0x41)
        {
          v186 = a4;
          v187 = v10;
          v188 = a3;
          v11 = operator new[]();
          memcpy((void *)v11, *(const void **)a2, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(a3) = v188;
          v10 = v187;
          a4 = v186;
          LODWORD(v28) = v8[6];
        }
        v37 = v34;
        v38 = v28;
        if (v28 > 0x40)
        {
          v189 = (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8;
          v218 = a4;
          v190 = v10;
          v191 = v37;
          v192 = a3;
          v23 = (void *)operator new[]();
          memcpy(v23, *v191, v189);
          LODWORD(v28) = v38;
          LODWORD(a3) = v192;
          v10 = v190;
          a4 = v218;
        }
        else
        {
          v23 = (void *)*v34;
        }
        v230 = v9;
        v229 = v11;
        v232 = v28;
        v231 = v23;
        v39 = v8[2];
        if (v39 > 0x40)
        {
          v211 = v10;
          v219 = a4;
          v193 = a3;
          v40 = (char *)operator new[]();
          memcpy(v40, *(const void **)v8, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(a3) = v193;
          v10 = v211;
          a4 = v219;
        }
        else
        {
          v40 = *(char **)v8;
        }
        v41 = a2[6];
        if (v41 > 0x40)
        {
          v220 = a4;
          v194 = (const void **)v10;
          v204 = a3;
          v42 = (void *)operator new[]();
          memcpy(v42, *v194, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(a3) = v204;
          a4 = v220;
        }
        else
        {
          v42 = *(void **)v10;
        }
        v226 = v39;
        v225 = v40;
        v228 = v41;
        v227 = v42;
        result = sub_1C5360914(a4, (llvm::ConstantRange *)&v229, (llvm::ConstantRange *)&v225, a3);
        if (v41 >= 0x41 && v42)
          result = MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
        v43 = v38;
        if (v39 >= 0x41 && v40)
        {
          result = MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
          v43 = v38;
        }
        if (v43 < 0x41)
          goto LABEL_39;
LABEL_72:
        if (v23)
          result = MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
LABEL_39:
        if (v9 < 0x41 || !v11)
          return result;
        v84 = v11;
        return MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
      }
      if (v19 > 0x40)
      {
        v165 = v10;
        v166 = a4;
        v167 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
        while (1)
        {
          a4 = v166;
          v10 = v165;
          if (!v167)
            goto LABEL_235;
          v168 = *(_QWORD *)(v11 - 8 + v167);
          v169 = *(_QWORD *)&v18[v167 - 8];
          v167 -= 8;
          if (v168 != v169)
          {
            a4 = v166;
            v10 = v165;
            if (v168 <= v169)
              goto LABEL_235;
            goto LABEL_200;
          }
        }
      }
      if (v11 <= v17)
      {
LABEL_235:
        if (v7 >= 0x41)
        {
          v36 = a4;
          v195 = v10;
          v16 = (char *)operator new[]();
          result = (uint64_t)memcpy(v16, *(const void **)v8, ((v7 + 63) >> 3) & 0x3FFFFFF8);
          v10 = v195;
          a4 = v36;
          LODWORD(v36) = a2[6];
        }
        if (v36 > 0x40)
        {
          v196 = a4;
          v197 = (const void **)v10;
          v125 = (void *)operator new[]();
          result = (uint64_t)memcpy(v125, *v197, (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
          a4 = v196;
        }
        else
        {
          v125 = *(void **)v10;
        }
        *(_DWORD *)(a4 + 8) = v7;
        *(_QWORD *)a4 = v16;
        *(_DWORD *)(a4 + 24) = v36;
LABEL_205:
        *(_QWORD *)(a4 + 16) = v125;
        return result;
      }
    }
LABEL_200:
    if (v9 >= 0x41)
    {
      v182 = a4;
      v11 = operator new[]();
      result = (uint64_t)memcpy((void *)v11, *(const void **)a2, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
      a4 = v182;
      LODWORD(v28) = v8[6];
    }
    if (v28 > 0x40)
    {
      v183 = (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8;
      v184 = a4;
      v185 = v28;
      v125 = (void *)operator new[]();
      result = (uint64_t)memcpy(v125, *v34, v183);
      LODWORD(v28) = v185;
      a4 = v184;
    }
    else
    {
      v125 = (void *)*v34;
    }
    *(_DWORD *)(a4 + 8) = v9;
    *(_QWORD *)a4 = v11;
    *(_DWORD *)(a4 + 24) = v28;
    goto LABEL_205;
  }
  if ((unint64_t)v16 <= v17)
    goto LABEL_43;
  v33 = (unint64_t)v16 > v12;
LABEL_49:
  if (!v33)
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
  if (v19 > 0x40)
  {
    v119 = (((unint64_t)v19 + 63) >> 3) & 0x3FFFFFF8;
    while (v119)
    {
      v120 = *(_QWORD *)(v11 - 8 + v119);
      v121 = *(_QWORD *)&v18[v119 - 8];
      v119 -= 8;
      v44 = v120 > v121;
      if (v120 != v121)
        goto LABEL_76;
    }
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
  }
  v44 = v11 > v17;
LABEL_76:
  if (!v44)
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a4, v9, 1);
  v45 = v14;
  if (v7 > 0x40)
  {
    result = v19;
    v131 = v10;
    v132 = a4;
    v133 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
    while (1)
    {
      a4 = v132;
      v10 = v131;
      LODWORD(v19) = result;
      if (!v133)
        break;
      v134 = *(_QWORD *)&v16[v133 - 8];
      v135 = *(_QWORD *)(v11 - 8 + v133);
      v133 -= 8;
      if (v134 != v135)
      {
        v46 = (const void **)v8;
        a4 = v132;
        v10 = v131;
        LODWORD(v19) = result;
        if (v134 <= v135)
          goto LABEL_218;
        break;
      }
    }
  }
  else
  {
    v46 = (const void **)v8;
    if ((unint64_t)v16 < v11)
      goto LABEL_80;
  }
  LODWORD(v7) = v19;
  v46 = (const void **)a2;
LABEL_218:
  if (v7 <= 0x40)
  {
LABEL_80:
    v47 = (void *)*v46;
  }
  else
  {
    v136 = a4;
    v137 = v10;
    v47 = (void *)operator new[]();
    result = (uint64_t)memcpy(v47, *v46, (((unint64_t)v7 + 63) >> 3) & 0x3FFFFFF8);
    v10 = v137;
    a4 = v136;
  }
  v48 = v8[6];
  v49 = v45;
  if (v48 > 0x40)
  {
    v138 = ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8;
    while (v138)
    {
      v139 = *(_QWORD *)((char *)*v45 + v138 - 8);
      v140 = *(_QWORD *)(*(_QWORD *)v10 - 8 + v138);
      v138 -= 8;
      v50 = v139 > v140;
      if (v139 != v140)
      {
        v49 = v45;
        goto LABEL_224;
      }
    }
  }
  else
  {
    v50 = (unint64_t)*v45 > *(_QWORD *)v10;
    if ((unint64_t)*v45 >= *(_QWORD *)v10)
    {
LABEL_224:
      if (v50)
        v10 = (uint64_t)v49;
    }
  }
  v51 = *(unsigned int *)(v10 + 8);
  if (v51 > 0x40)
  {
    v180 = a4;
    v181 = (const void **)v10;
    v52 = (void *)operator new[]();
    result = (uint64_t)memcpy(v52, *v181, ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8);
    a4 = v180;
  }
  else
  {
    v52 = *(void **)v10;
  }
  *(_DWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v47;
  *(_DWORD *)(a4 + 24) = v51;
  *(_QWORD *)(a4 + 16) = v52;
  return result;
}

uint64_t llvm::ConstantRange::exactIntersectWith@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  BOOL v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  void *__s2;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;

  llvm::ConstantRange::intersectWith((uint64_t)this, a2, 0, (uint64_t)&v26);
  llvm::ConstantRange::inverse(this, (uint64_t)&v14);
  llvm::ConstantRange::inverse(a2, (uint64_t)&v10);
  llvm::ConstantRange::unionWith((uint64_t)&v14, (unsigned int *)&v10, 0, (uint64_t)&v18);
  result = (uint64_t)llvm::ConstantRange::inverse((llvm::ConstantRange *)&v18, (uint64_t)&__s2);
  if (v27 > 0x40)
  {
    result = memcmp(v26, __s2, (((unint64_t)v27 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
      goto LABEL_3;
LABEL_42:
    v8 = 0;
    goto LABEL_8;
  }
  if (v26 != __s2)
    goto LABEL_42;
LABEL_3:
  if (v29 > 0x40)
  {
    result = memcmp(v28, v24, (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8);
    v7 = (_DWORD)result == 0;
  }
  else
  {
    v7 = v28 == v24;
  }
  v8 = v7;
LABEL_8:
  if (v25 >= 0x41)
  {
    result = (uint64_t)v24;
    if (v24)
      result = MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  }
  if (v23 >= 0x41)
  {
    result = (uint64_t)__s2;
    if (__s2)
      result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      result = MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  if (v8)
  {
    *(_DWORD *)(a3 + 8) = v27;
    *(_QWORD *)a3 = v26;
    *(_DWORD *)(a3 + 24) = v29;
    *(_QWORD *)(a3 + 16) = v28;
    v27 = 0;
    v29 = 0;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    v9 = v29;
    *(_BYTE *)(a3 + 32) = 0;
    if (v9 >= 0x41)
    {
      result = (uint64_t)v28;
      if (v28)
        result = MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
  }
  if (v27 >= 0x41)
  {
    result = (uint64_t)v26;
    if (v26)
      return MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::exactUnionWith@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  BOOL v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  void *__s2;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;

  llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 0, (uint64_t)&v26);
  llvm::ConstantRange::inverse(this, (uint64_t)&v14);
  llvm::ConstantRange::inverse(a2, (uint64_t)&v10);
  llvm::ConstantRange::intersectWith((uint64_t)&v14, (llvm::ConstantRange *)&v10, 0, (uint64_t)&v18);
  result = (uint64_t)llvm::ConstantRange::inverse((llvm::ConstantRange *)&v18, (uint64_t)&__s2);
  if (v27 > 0x40)
  {
    result = memcmp(v26, __s2, (((unint64_t)v27 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
      goto LABEL_3;
LABEL_42:
    v8 = 0;
    goto LABEL_8;
  }
  if (v26 != __s2)
    goto LABEL_42;
LABEL_3:
  if (v29 > 0x40)
  {
    result = memcmp(v28, v24, (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8);
    v7 = (_DWORD)result == 0;
  }
  else
  {
    v7 = v28 == v24;
  }
  v8 = v7;
LABEL_8:
  if (v25 >= 0x41)
  {
    result = (uint64_t)v24;
    if (v24)
      result = MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  }
  if (v23 >= 0x41)
  {
    result = (uint64_t)__s2;
    if (__s2)
      result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      result = MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      result = MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  if (v8)
  {
    *(_DWORD *)(a3 + 8) = v27;
    *(_QWORD *)a3 = v26;
    *(_DWORD *)(a3 + 24) = v29;
    *(_QWORD *)(a3 + 16) = v28;
    v27 = 0;
    v29 = 0;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    v9 = v29;
    *(_BYTE *)(a3 + 32) = 0;
    if (v9 >= 0x41)
    {
      result = (uint64_t)v28;
      if (v28)
        result = MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    }
  }
  if (v27 >= 0x41)
  {
    result = (uint64_t)v26;
    if (v26)
      return MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::castOp(uint64_t a1, int a2)
{
  __asm { BR              X11 }
}

void sub_1C5362CAC(llvm::ConstantRange *a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  llvm::ConstantRange::zeroExtend(a1, a2, a3);
}

uint64_t sub_1C5362CC0@<X0>(llvm::ConstantRange *a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return llvm::ConstantRange::truncate(a1, a2, a3);
}

void sub_1C5362CD4(llvm::ConstantRange *a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  llvm::ConstantRange::signExtend(a1, a2, a3);
}

const void **sub_1C5362CE8@<X0>(const void **result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  uint64_t v5;
  void *v6;
  const void **v7;
  uint64_t v8;
  void *v9;

  v2 = *((_DWORD *)result + 2);
  *(_DWORD *)(a2 + 8) = v2;
  if (v2 > 0x40)
  {
    v4 = result;
    v5 = a2;
    v6 = (void *)operator new[]();
    *(_QWORD *)v5 = v6;
    memcpy(v6, *v4, (((unint64_t)*(unsigned int *)(v5 + 8) + 63) >> 3) & 0x3FFFFFF8);
    result = v4;
    a2 = v5;
  }
  else
  {
    *(_QWORD *)a2 = *result;
  }
  v3 = *((_DWORD *)result + 6);
  *(_DWORD *)(a2 + 24) = v3;
  if (v3 > 0x40)
  {
    v7 = result;
    v8 = a2;
    v9 = (void *)operator new[]();
    *(_QWORD *)(v8 + 16) = v9;
    return (const void **)memcpy(v9, v7[2], (((unint64_t)*(unsigned int *)(v8 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = result[2];
  }
  return result;
}

void sub_1C5362E08(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v10 = *(_DWORD *)(a1 + 8);
  sub_1C4832EA4((llvm::APInt *)&a8, v10, 0, 0);
  llvm::APInt::zextOrSelf((llvm::APInt *)&a8, a2, v9 - 32);
  if (a9 >= 0x41 && a8)
    MEMORY[0x1CAA32F9C](a8, 0x1000C8000313F17);
  sub_1C4832EA4((llvm::APInt *)&a6, v10, -1, 1);
  llvm::APInt::zextOrSelf((llvm::APInt *)&a6, a2, (uint64_t)&a8);
  if (a7 >= 0x41 && a6)
    MEMORY[0x1CAA32F9C](a6, 0x1000C8000313F17);
  v12 = *(_QWORD *)(v9 - 32);
  v13 = a9;
  v14 = a8;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v9 - 24);
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 16) = v14;
  JUMPOUT(0x1C5362D18);
}

uint64_t llvm::ConstantRange::truncate@<X0>(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  const void **v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
    {
      if (llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
        return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 0);
      if (llvm::APInt::countTrailingOnesSlowCase(this) == (_DWORD)v6)
        return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 1);
    }
    v102 = v6;
    v101 = operator new[]();
    memcpy((void *)v101, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    goto LABEL_5;
  }
  v7 = *(void **)this;
  v8 = *((_QWORD *)this + 2);
  if (!(v8 | *(_QWORD *)this))
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 0);
  if (v7 == (void *)v8 && (!(_DWORD)v6 || v7 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6)))
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 1);
  v102 = *((_DWORD *)this + 2);
  v101 = (uint64_t)v7;
LABEL_5:
  v9 = (const void **)((char *)this + 16);
  v10 = *((unsigned int *)this + 6);
  v100 = v10;
  if (v10 > 0x40)
  {
    v12 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
    v11 = (void *)operator new[]();
    memcpy(v11, *v9, v12);
  }
  else
  {
    v11 = (void *)*v9;
  }
  v99 = (uint64_t)v11;
  llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)&v95, a2, 0);
  v13 = *((unsigned int *)this + 2);
  if (v13 > 0x40)
  {
    v14 = *((_QWORD *)this + 2);
    v67 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
    while (v67)
    {
      v68 = *(_QWORD *)(*(_QWORD *)this - 8 + v67);
      v69 = *(_QWORD *)(v14 - 8 + v67);
      v67 -= 8;
      if (v68 != v69)
      {
        if (v68 <= v69)
          goto LABEL_10;
        goto LABEL_93;
      }
    }
    goto LABEL_10;
  }
  v14 = *((_QWORD *)this + 2);
  if (*(_QWORD *)this <= v14)
  {
LABEL_10:
    v15 = v102;
    if (v102 <= 0x40)
    {
      v16 = v101;
LABEL_12:
      v17 = v15 + __clz(v16) - 64;
      goto LABEL_20;
    }
    v18 = v102;
    v19 = v101;
    v20 = v102 + 63;
LABEL_14:
    v21 = 0;
    v22 = v20 >> 6;
    do
    {
      v23 = v22-- < 1;
      if (v23)
        break;
      v24 = *(_QWORD *)(v19 + 8 * v22);
      v21 += __clz(v24);
    }
    while (!v24);
    v25 = *(_DWORD *)&v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0)
      v25 = 0;
    v17 = v21 + v25;
LABEL_20:
    if (v15 - v17 > a2)
    {
      sub_1C4832EA4((llvm::APInt *)&v87, *((_DWORD *)this + 2), 0, 0);
      sub_1C4912E54(&v87, a2, v88);
      v26 = v88;
      if (v88 > 0x40)
      {
        v29 = (_QWORD *)v87;
        v30 = (uint64_t *)v101;
        v31 = ((unint64_t)v88 + 63) >> 6;
        do
        {
          v32 = *v30++;
          *v29++ &= v32;
          --v31;
        }
        while (v31);
        v27 = v87;
      }
      else
      {
        v27 = v87 & v101;
      }
      v33 = v102;
      if (v102 >= 0x41)
      {
        v49 = 0;
        v50 = (unint64_t *)v101;
        v51 = ((unint64_t)v102 + 63) >> 6;
        v52 = (unint64_t *)v27;
        v53 = v51;
        do
        {
          v54 = *v52++;
          v55 = *v50 - v54;
          v56 = *v50 < v54;
          v57 = *v50 + ~v54;
          if (v49)
          {
            v49 = v57 >= *v50;
          }
          else
          {
            v57 = v55;
            v49 = v56;
          }
          *v50++ = v57;
          --v53;
        }
        while (v53);
        *(_QWORD *)(v101 + 8 * (v51 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v33;
      }
      else
      {
        v34 = v102 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v102 : 0;
        v101 = v34 & (v101 - v27);
      }
      v35 = v100;
      if (v100 >= 0x41)
      {
        v58 = 0;
        v59 = (unint64_t *)v99;
        v60 = ((unint64_t)v100 + 63) >> 6;
        v61 = (unint64_t *)v27;
        v62 = v60;
        do
        {
          v63 = *v61++;
          v64 = *v59 - v63;
          v65 = *v59 < v63;
          v66 = *v59 + ~v63;
          if (v58)
          {
            v58 = v66 >= *v59;
          }
          else
          {
            v66 = v64;
            v58 = v65;
          }
          *v59++ = v66;
          --v62;
        }
        while (v62);
        *(_QWORD *)(v99 + 8 * (v60 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v35;
      }
      else
      {
        v36 = v100 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v100 : 0;
        v99 = v36 & (v99 - v27);
      }
      if (v26 >= 0x41 && v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    }
    v37 = v100;
    if (v100 > 0x40)
    {
      v40 = 0;
      v41 = ((unint64_t)v100 + 63) >> 6;
      v38 = v99;
      do
      {
        v23 = v41-- < 1;
        if (v23)
          break;
        v42 = *(_QWORD *)(v99 + 8 * v41);
        v40 += __clz(v42);
      }
      while (!v42);
      v43 = v100 | 0xFFFFFFC0;
      if ((v100 & 0x3F) == 0)
        v43 = 0;
      v39 = v40 + v43;
    }
    else
    {
      v38 = v99;
      v39 = v100 + __clz(v99) - 64;
    }
    v44 = v100 - v39;
    if (v44 <= a2)
    {
      llvm::APInt::trunc((llvm::APInt *)&v101, a2, (llvm::APInt *)&v85);
      llvm::APInt::trunc((llvm::APInt *)&v99, a2, (llvm::APInt *)&v83);
      v88 = v86;
      v87 = v85;
      v86 = 0;
      v90 = v84;
      v89 = v83;
      v84 = 0;
      result = llvm::ConstantRange::unionWith((uint64_t)&v87, (unsigned int *)&v95, 0, a3);
      if (v90 >= 0x41)
      {
        result = v89;
        if (v89)
          result = MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
      }
      if (v88 >= 0x41)
      {
        result = v87;
        if (v87)
          result = MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
      }
      if (v84 >= 0x41)
      {
        result = v83;
        if (v83)
          result = MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
      }
      if (v86 < 0x41)
        goto LABEL_100;
      result = v85;
      if (!v85)
        goto LABEL_100;
    }
    else
    {
      if (v44 != a2 + 1)
        goto LABEL_99;
      v45 = ~(1 << a2);
      if (v100 > 0x40)
      {
        *(_QWORD *)(v38 + 8 * (a2 >> 6)) &= v45;
        v46 = ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8;
        while (v46)
        {
          v47 = *(_QWORD *)(v99 - 8 + v46);
          v48 = *(_QWORD *)(v101 - 8 + v46);
          v46 -= 8;
          if (v47 != v48)
          {
            if (v47 > v48)
              goto LABEL_99;
            goto LABEL_67;
          }
        }
        goto LABEL_99;
      }
      v99 = v38 & v45;
      if ((v38 & (unint64_t)v45) >= v101)
      {
LABEL_99:
        result = (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 1);
        goto LABEL_100;
      }
LABEL_67:
      llvm::APInt::trunc((llvm::APInt *)&v101, a2, (llvm::APInt *)&v81);
      llvm::APInt::trunc((llvm::APInt *)&v99, a2, (llvm::APInt *)&v79);
      v88 = v82;
      v87 = v81;
      v82 = 0;
      v90 = v80;
      v89 = v79;
      v80 = 0;
      result = llvm::ConstantRange::unionWith((uint64_t)&v87, (unsigned int *)&v95, 0, a3);
      if (v90 >= 0x41)
      {
        result = v89;
        if (v89)
          result = MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
      }
      if (v88 >= 0x41)
      {
        result = v87;
        if (v87)
          result = MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
      }
      if (v80 >= 0x41)
      {
        result = v79;
        if (v79)
          result = MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
      }
      if (v82 < 0x41)
        goto LABEL_100;
      result = v81;
      if (!v81)
        goto LABEL_100;
    }
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    goto LABEL_100;
  }
LABEL_93:
  v70 = *((_DWORD *)this + 6);
  if (v70 > 0x40)
  {
    if (v70 - llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantRange *)((char *)this + 16)) > a2)
      goto LABEL_99;
    v71 = llvm::APInt::countTrailingOnesSlowCase((llvm::ConstantRange *)((char *)this + 16));
  }
  else
  {
    if (64 - __clz(v14) > a2)
      goto LABEL_99;
    v71 = __clz(__rbit64(~v14));
  }
  if (v71 == a2)
    goto LABEL_99;
  sub_1C4832EA4((llvm::APInt *)&v93, a2, -1, 1);
  result = (uint64_t)llvm::APInt::trunc((llvm::ConstantRange *)((char *)this + 16), a2, (llvm::APInt *)&v91);
  v72 = v94;
  v73 = v93;
  v94 = 0;
  v74 = v92;
  v75 = v91;
  v92 = 0;
  if (v96 >= 0x41)
  {
    result = v95;
    if (v95)
      result = MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
  }
  v95 = v73;
  v96 = v72;
  if (v98 >= 0x41)
  {
    result = v97;
    if (v97)
      result = MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
  }
  v97 = v75;
  v98 = v74;
  if (v92 >= 0x41)
  {
    result = v91;
    if (v91)
      result = MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
  }
  if (v94 >= 0x41)
  {
    result = v93;
    if (v93)
      result = MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
  }
  v76 = v100;
  if (v100 <= 0x40)
  {
    v99 = -1;
    if (v100)
      goto LABEL_119;
LABEL_143:
    v77 = 0;
    goto LABEL_120;
  }
  result = (uint64_t)memset((void *)v99, 255, (((unint64_t)v100 + 63) >> 3) & 0x3FFFFFF8);
  v76 = v100;
  if (!v100)
    goto LABEL_143;
LABEL_119:
  v77 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
  if (v76 < 0x41)
  {
LABEL_120:
    v78 = &v99;
    goto LABEL_121;
  }
  v78 = (uint64_t *)(v99 + 8 * ((((unint64_t)v76 + 63) >> 6) - 1));
LABEL_121:
  *v78 &= v77;
  v15 = v102;
  if (v102 > 0x40)
  {
    v19 = v101;
    v18 = v102;
    v20 = v102 + 63;
    result = memcmp((const void *)v101, (const void *)v99, (v20 >> 3) & 0x3FFFFFF8);
    if ((_DWORD)result)
      goto LABEL_14;
  }
  else
  {
    v16 = v101;
    if (v101 != v99)
      goto LABEL_12;
  }
  *(_DWORD *)(a3 + 8) = v96;
  *(_QWORD *)a3 = v95;
  *(_DWORD *)(a3 + 24) = v98;
  *(_QWORD *)(a3 + 16) = v97;
  v96 = 0;
  v98 = 0;
LABEL_100:
  if (v98 >= 0x41)
  {
    result = v97;
    if (v97)
      result = MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
  }
  if (v96 >= 0x41)
  {
    result = v95;
    if (v95)
      result = MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
  }
  if (v100 >= 0x41)
  {
    result = v99;
    if (v99)
      result = MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
  }
  if (v102 >= 0x41)
  {
    result = v101;
    if (v101)
      return MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::signExtend(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;

  v6 = *((unsigned int *)this + 2);
  if (v6 < 0x41)
  {
    v7 = *(_QWORD *)this;
    v8 = *((_QWORD *)this + 2);
    if (v8 | *(_QWORD *)this)
      goto LABEL_3;
LABEL_15:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 0);
    return;
  }
  v7 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 2);
  if (!memcmp(*(const void **)this, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
  {
    goto LABEL_15;
  }
LABEL_3:
  v9 = *((_DWORD *)this + 6);
  v10 = v9 - 1;
  if (v9 <= 0x40)
  {
    if (v8 != 1 << v10)
      goto LABEL_5;
LABEL_33:
    llvm::APInt::sext(this, a2, (llvm::APInt *)&v30);
    llvm::APInt::zext((llvm::ConstantRange *)((char *)this + 16), a2, (uint64_t)&v28);
    *(_DWORD *)(a3 + 8) = v31;
    *(_QWORD *)a3 = v30;
    *(_DWORD *)(a3 + 24) = v29;
    v11 = v28;
    goto LABEL_9;
  }
  if (((*(_QWORD *)(v8 + 8 * (v10 >> 6)) >> v10) & 1) != 0
    && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) == v10)
  {
    goto LABEL_33;
  }
LABEL_5:
  if (v6 > 0x40)
  {
    v12 = (unint64_t)(v6 + 63) >> 3;
    if (memcmp((const void *)v7, (const void *)v8, v12 & 0x3FFFFFF8)
      || llvm::APInt::countTrailingOnesSlowCase(this) != (_DWORD)v6)
    {
      v13 = *(_QWORD *)(v7 + 8 * ((v6 - 1) >> 6)) & (1 << (v6 - 1));
      v14 = (_QWORD *)(v8 + 8 * (v10 >> 6));
      if (v9 < 0x41)
        v14 = (_QWORD *)((char *)this + 16);
      if ((v13 != 0) == ((*v14 >> v10) & 1))
      {
        v17 = v12 & 0x3FFFFFF8;
        while (v17)
        {
          v18 = *(_QWORD *)(v7 - 8 + v17);
          v19 = *(_QWORD *)(v8 - 8 + v17);
          v17 -= 8;
          if (v18 != v19)
          {
            if (v18 <= v19)
              goto LABEL_8;
            goto LABEL_21;
          }
        }
        goto LABEL_8;
      }
      if (v13)
      {
LABEL_8:
        llvm::APInt::sext(this, a2, (llvm::APInt *)&v22);
        llvm::APInt::sext((llvm::ConstantRange *)((char *)this + 16), a2, (llvm::APInt *)&v20);
        *(_DWORD *)(a3 + 8) = v23;
        *(_QWORD *)a3 = v22;
        *(_DWORD *)(a3 + 24) = v21;
        v11 = v20;
LABEL_9:
        *(_QWORD *)(a3 + 16) = v11;
        return;
      }
      goto LABEL_21;
    }
  }
  else if (v7 != v8 || (_DWORD)v6 && v7 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v6)
  {
    if ((uint64_t)(v7 << (64 - v6)) >> (64 - v6) <= (uint64_t)(v8 << (64 - v6)) >> (64 - v6))
      goto LABEL_8;
LABEL_21:
    if (v9 > 0x40)
    {
      if (((*(_QWORD *)(v8 + 8 * (v10 >> 6)) >> v10) & 1) != 0
        && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) == v10)
      {
        goto LABEL_8;
      }
    }
    else if (v8 == 1 << v10)
    {
      goto LABEL_8;
    }
  }
  sub_1C4832EA4((llvm::APInt *)&v26, a2, 0, 0);
  sub_1C4912E54(&v26, v6 + ~a2 + v27, v27);
  sub_1C4832EA4((llvm::APInt *)&v24, a2, 0, 0);
  sub_1C4912E54(&v24, 0, v6 - 1);
  llvm::APInt::operator+=((uint64_t)&v24, 1uLL);
  v15 = v25;
  v16 = v24;
  *(_DWORD *)(a3 + 8) = v27;
  *(_QWORD *)a3 = v26;
  *(_DWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 16) = v16;
}

void llvm::ConstantRange::zeroExtend(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  llvm::APInt *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;

  v6 = (llvm::ConstantRange *)((char *)this + 16);
  v7 = *((unsigned int *)this + 2);
  if (v7 < 0x41)
  {
    v8 = *(_QWORD *)this;
    v9 = *((_QWORD *)this + 2);
    if (v9 | *(_QWORD *)this)
    {
      if (v8 != v9 || (_DWORD)v7 && v8 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v7)
      {
        v10 = v8 > v9;
LABEL_5:
        if (!v10)
        {
LABEL_6:
          llvm::APInt::zext(this, a2, (uint64_t)&v24);
          llvm::APInt::zext(v6, a2, (uint64_t)&v22);
          *(_DWORD *)(a3 + 8) = v25;
          *(_QWORD *)a3 = v24;
          *(_DWORD *)(a3 + 24) = v23;
          *(_QWORD *)(a3 + 16) = v22;
          return;
        }
      }
      goto LABEL_10;
    }
LABEL_25:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, a2, 0);
    return;
  }
  v17 = *(_QWORD *)this;
  v18 = (char *)*((_QWORD *)this + 2);
  v19 = ((v7 + 63) >> 3) & 0x3FFFFFF8;
  if (memcmp(*(const void **)this, v18, v19))
    goto LABEL_18;
  if (llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v7)
    goto LABEL_25;
  if (llvm::APInt::countTrailingOnesSlowCase(this) != (_DWORD)v7)
  {
LABEL_18:
    while (v19)
    {
      v20 = *(_QWORD *)(v17 - 8 + v19);
      v21 = *(_QWORD *)&v18[v19 - 8];
      v19 -= 8;
      v10 = v20 > v21;
      if (v20 != v21)
        goto LABEL_5;
    }
    goto LABEL_6;
  }
LABEL_10:
  sub_1C4832EA4((llvm::APInt *)&v30, a2, 0, 0);
  v11 = *((_DWORD *)this + 6);
  if (v11 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v6) != v11)
      goto LABEL_12;
LABEL_27:
    llvm::APInt::zext(this, a2, (uint64_t)&v28);
    if (v31 >= 0x41 && v30)
      MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    v30 = v28;
    v31 = v29;
    goto LABEL_12;
  }
  if (!*(_QWORD *)v6)
    goto LABEL_27;
LABEL_12:
  v12 = v31;
  v13 = v30;
  v31 = 0;
  sub_1C4832EA4((llvm::APInt *)&v26, a2, 0, 0);
  v14 = 1 << v7;
  v15 = v27;
  if (v27 > 0x40)
  {
    *(_QWORD *)(v26 + ((v7 >> 3) & 0x1FFFFFF8)) |= v14;
    v16 = v26;
  }
  else
  {
    v16 = v26 | v14;
    v26 = v16;
  }
  *(_DWORD *)(a3 + 8) = v12;
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 16) = v16;
  v27 = 0;
  if (v31 >= 0x41)
  {
    if (v30)
      MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  }
}

void llvm::ConstantRange::zextOrTrunc(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unsigned int v5;
  llvm::APInt *v6;
  const void **v7;
  unsigned int v8;

  v5 = *((_DWORD *)this + 2);
  if (v5 > a2)
  {
    llvm::ConstantRange::truncate(this, a2, (uint64_t)a3);
  }
  else if (v5 >= a2)
  {
    a3[2] = v5;
    if (v5 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)this);
    else
      *(_QWORD *)a3 = *(_QWORD *)this;
    v6 = (llvm::APInt *)(a3 + 4);
    v7 = (const void **)((char *)this + 16);
    v8 = *((_DWORD *)this + 6);
    a3[6] = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase(v6, v7);
    else
      *(_QWORD *)v6 = *v7;
  }
  else
  {
    llvm::ConstantRange::zeroExtend(this, a2, (uint64_t)a3);
  }
}

void llvm::ConstantRange::sextOrTrunc(llvm::ConstantRange *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  void *v7;
  void *v8;

  v5 = *((_DWORD *)this + 2);
  if (v5 > a2)
  {
    llvm::ConstantRange::truncate(this, a2, a3);
  }
  else if (v5 >= a2)
  {
    *(_DWORD *)(a3 + 8) = v5;
    if (v5 > 0x40)
    {
      v7 = (void *)operator new[]();
      *(_QWORD *)a3 = v7;
      memcpy(v7, *(const void **)this, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)a3 = *(_QWORD *)this;
    }
    v6 = *((_DWORD *)this + 6);
    *(_DWORD *)(a3 + 24) = v6;
    if (v6 > 0x40)
    {
      v8 = (void *)operator new[]();
      *(_QWORD *)(a3 + 16) = v8;
      memcpy(v8, *((const void **)this + 2), (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(a3 + 16) = *((_QWORD *)this + 2);
    }
  }
  else
  {
    llvm::ConstantRange::signExtend(this, a2, a3);
  }
}

void llvm::ConstantRange::binaryOp(llvm::ConstantRange *a1@<X2>, unsigned int *a2@<X0>, int a3@<W1>, llvm::ConstantRange *a4@<X8>)
{
  switch(a3)
  {
    case 13:
    case 14:
      llvm::ConstantRange::add((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 15:
    case 16:
      llvm::ConstantRange::sub((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 17:
    case 18:
      llvm::ConstantRange::multiply((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 19:
      llvm::ConstantRange::udiv((const void **)a2, (void **)a1, (uint64_t)a4);
      break;
    case 20:
      llvm::ConstantRange::sdiv((void **)a2, a1, (uint64_t)a4);
      break;
    case 22:
      llvm::ConstantRange::urem((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 23:
      llvm::ConstantRange::srem((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 25:
      llvm::ConstantRange::shl((llvm::ConstantRange *)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 26:
      llvm::ConstantRange::lshr((const void **)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 27:
      llvm::ConstantRange::ashr((const void **)a2, (const void **)a1, (uint64_t)a4);
      break;
    case 28:
      llvm::ConstantRange::binaryAnd((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 29:
      llvm::ConstantRange::binaryOr((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    case 30:
      llvm::ConstantRange::binaryXor((llvm::ConstantRange *)a2, a1, (uint64_t)a4);
      break;
    default:
      llvm::ConstantRange::ConstantRange(a4, a2[2], 1);
      break;
  }
}

llvm::ConstantRange *llvm::ConstantRange::add@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unsigned int v17;
  void *v18;
  llvm::ConstantRange *result;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  void *v36;
  int v37;
  void *v38;
  unsigned int v39;
  void *__s2;
  unsigned int v41;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    v7 = *(const void **)this;
    v8 = *((_QWORD *)this + 2);
    if (!memcmp(*(const void **)this, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else
  {
    v7 = *(const void **)this;
    v8 = *((_QWORD *)this + 2);
    if (!(v8 | *(_QWORD *)this))
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v9 = *((unsigned int *)a2 + 2);
  if (v9 < 0x41)
  {
    v10 = *(const void **)a2;
    v11 = *((_QWORD *)a2 + 2);
    if (v11 | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v10 = *(const void **)a2;
  v11 = *((_QWORD *)a2 + 2);
  if (!memcmp(*(const void **)a2, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v9)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  if (v6 > 0x40)
  {
    if (!memcmp(v7, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
    }
  }
  else if (v7 == (const void *)v8 && (!(_DWORD)v6 || v7 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6)))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
  }
  if (v9 <= 0x40)
  {
    if (v10 != (const void *)v11 || (_DWORD)v9 && v10 != (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v9))
      goto LABEL_9;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
  }
  if (!memcmp(v10, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countTrailingOnesSlowCase(a2) == (_DWORD)v9)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
  }
LABEL_9:
  if (v6 >= 0x41)
  {
    v13 = (void *)operator new[]();
    memcpy(v13, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    v20 = 0;
    v21 = *(uint64_t **)a2;
    v22 = (unint64_t)(v6 + 63) >> 6;
    v23 = (unint64_t *)v13;
    v24 = v22;
    do
    {
      v25 = *v21++;
      v26 = v25 + *v23;
      v27 = v26 + 1 <= *v23;
      if (v20)
      {
        ++v26;
        v20 = v27;
      }
      else
      {
        v20 = v26 < *v23;
      }
      *v23++ = v26;
      --v24;
    }
    while (v24);
    *((_QWORD *)v13 + (v22 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!(_DWORD)v6)
      v12 = 0;
    v13 = (void *)(v12 & ((unint64_t)v7 + (_QWORD)v10));
  }
  v14 = *((unsigned int *)this + 6);
  if (v14 >= 0x41)
  {
    v16 = (void *)operator new[]();
    memcpy(v16, *((const void **)this + 2), ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
    v28 = 0;
    v29 = (uint64_t *)*((_QWORD *)a2 + 2);
    v30 = (unint64_t)(v14 + 63) >> 6;
    v31 = (unint64_t *)v16;
    v32 = v30;
    do
    {
      v33 = *v29++;
      v34 = v33 + *v31;
      v35 = v34 + 1 <= *v31;
      if (v28)
      {
        ++v34;
        v28 = v35;
      }
      else
      {
        v28 = v34 < *v31;
      }
      *v31++ = v34;
      --v32;
    }
    while (v32);
    *((_QWORD *)v16 + (v30 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
  }
  else
  {
    v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    if (!(_DWORD)v14)
      v15 = 0;
    v16 = (void *)(v15 & (*((_QWORD *)a2 + 2) + *((_QWORD *)this + 2)));
  }
  v41 = v14;
  __s2 = v16;
  llvm::APInt::operator-=((uint64_t)&__s2, 1uLL);
  v17 = v41;
  v18 = __s2;
  v41 = 0;
  if (v6 > 0x40)
  {
    if (!memcmp(v13, __s2, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_54;
  }
  else if (v13 == __s2)
  {
    goto LABEL_54;
  }
  v37 = v6;
  v36 = v13;
  v39 = v17;
  v38 = v18;
  if (!llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v36, (const void **)this))
  {
    result = (llvm::ConstantRange *)llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v36, (const void **)a2);
    if ((result & 1) == 0)
    {
      *(_DWORD *)(a3 + 8) = v6;
      *(_QWORD *)a3 = v13;
      *(_DWORD *)(a3 + 24) = v17;
      *(_QWORD *)(a3 + 16) = v18;
      return result;
    }
  }
LABEL_54:
  result = llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 1);
  if (v17 >= 0x41 && v18)
    result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  if (v6 >= 0x41)
  {
    if (v13)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  }
  return result;
}

llvm::ConstantRange *llvm::ConstantRange::sub@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  const void *v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  llvm::ConstantRange *result;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t v37;
  void *v38;
  int v39;
  void *v40;
  int v41;
  void *__s1;
  unsigned int v43;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    v7 = *(const void **)this;
    v8 = *((_QWORD *)this + 2);
    if (!memcmp(*(const void **)this, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else
  {
    v7 = *(const void **)this;
    v8 = *((_QWORD *)this + 2);
    if (!(v8 | *(_QWORD *)this))
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v9 = *((unsigned int *)a2 + 2);
  if (v9 < 0x41)
  {
    v10 = *(const void **)a2;
    v11 = *((_QWORD *)a2 + 2);
    if (v11 | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v10 = *(const void **)a2;
  v11 = *((_QWORD *)a2 + 2);
  if (!memcmp(*(const void **)a2, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v9)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  if (v6 > 0x40)
  {
    if (!memcmp(v7, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
    }
  }
  else if (v7 == (const void *)v8 && (!(_DWORD)v6 || v7 == (const void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v6)))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
  }
  if (v9 > 0x40)
  {
    if (!memcmp(v10, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countTrailingOnesSlowCase(a2) == (_DWORD)v9)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
    }
  }
  else if (v10 == (const void *)v11 && (!(_DWORD)v9 || v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v9))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 1);
  }
  if (v6 >= 0x41)
  {
    v13 = (void *)operator new[]();
    memcpy(v13, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    v20 = 0;
    v21 = (unint64_t *)*((_QWORD *)a2 + 2);
    v22 = (unint64_t)(v6 + 63) >> 6;
    v23 = (unint64_t *)v13;
    v24 = v22;
    do
    {
      v25 = *v21++;
      v26 = *v23 - v25;
      v27 = *v23 < v25;
      v28 = *v23 + ~v25;
      if (v20)
      {
        v20 = v28 >= *v23;
      }
      else
      {
        v28 = v26;
        v20 = v27;
      }
      *v23++ = v28;
      --v24;
    }
    while (v24);
    *((_QWORD *)v13 + (v22 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!(_DWORD)v6)
      v12 = 0;
    v13 = (void *)(v12 & ((unint64_t)v7 - v11));
  }
  v43 = v6;
  __s1 = v13;
  llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
  v14 = v43;
  v15 = __s1;
  v43 = 0;
  v16 = *((unsigned int *)this + 6);
  if (v16 >= 0x41)
  {
    v18 = (void *)operator new[]();
    memcpy(v18, *((const void **)this + 2), ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
    v29 = 0;
    v30 = *(unint64_t **)a2;
    v31 = (unint64_t)(v16 + 63) >> 6;
    v32 = (unint64_t *)v18;
    v33 = v31;
    do
    {
      v34 = *v30++;
      v35 = *v32 - v34;
      v36 = *v32 < v34;
      v37 = *v32 + ~v34;
      if (v29)
      {
        v29 = v37 >= *v32;
      }
      else
      {
        v37 = v35;
        v29 = v36;
      }
      *v32++ = v37;
      --v33;
    }
    while (v33);
    *((_QWORD *)v18 + (v31 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
  }
  else
  {
    v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    if (!(_DWORD)v16)
      v17 = 0;
    v18 = (void *)(v17 & (*((_QWORD *)this + 2) - *(_QWORD *)a2));
  }
  if (v14 > 0x40)
  {
    if (!memcmp(v15, v18, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_54;
  }
  else if (v15 == v18)
  {
    goto LABEL_54;
  }
  v39 = v14;
  v38 = v15;
  v41 = v16;
  v40 = v18;
  if (!llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v38, (const void **)this))
  {
    result = (llvm::ConstantRange *)llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v38, (const void **)a2);
    if ((result & 1) == 0)
    {
      *(_DWORD *)(a3 + 8) = v14;
      *(_QWORD *)a3 = v15;
      *(_DWORD *)(a3 + 24) = v16;
      *(_QWORD *)(a3 + 16) = v18;
      return result;
    }
  }
LABEL_54:
  result = llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 1);
  if (v16 >= 0x41 && v18)
    result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  if (v14 >= 0x41)
  {
    if (v15)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::multiply@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unint64_t **v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  const void **v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  void *v66;
  size_t v67;
  void *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t *v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[8];
  _BYTE v105[8];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin(this, (llvm::APInt *)&v100);
  llvm::APInt::zext((llvm::APInt *)&v100, 2 * *((_DWORD *)this + 2), (uint64_t)&v98);
  if (v101 >= 0x41 && v100)
    MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v100);
  llvm::APInt::zext((llvm::APInt *)&v100, 2 * *((_DWORD *)this + 2), (uint64_t)&v96);
  if (v101 >= 0x41 && v100)
    MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v100);
  llvm::APInt::zext((llvm::APInt *)&v100, 2 * *((_DWORD *)this + 2), (uint64_t)&v94);
  if (v101 >= 0x41 && v100)
    MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v100);
  llvm::APInt::zext((llvm::APInt *)&v100, 2 * *((_DWORD *)this + 2), (uint64_t)&v92);
  if (v101 >= 0x41 && v100)
    MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
  llvm::APInt::operator*((uint64_t)&v98, &v94, (uint64_t)&v86);
  llvm::APInt::operator*((uint64_t)&v96, &v92, (uint64_t)&v84);
  llvm::APInt::operator+=((uint64_t)&v84, 1uLL);
  v8 = v85;
  v85 = 0;
  v89 = v87;
  v88 = v86;
  v87 = 0;
  v91 = v8;
  v90 = v84;
  llvm::ConstantRange::truncate((llvm::ConstantRange *)&v88, *((_DWORD *)this + 2), (uint64_t)&v80);
  v9 = v81;
  if (v81 > 0x40)
  {
    v10 = v80;
    v11 = v82;
    v62 = (((unint64_t)v81 + 63) >> 3) & 0x3FFFFFF8;
    while (v62)
    {
      v63 = *(_QWORD *)(v80 - 8 + v62);
      v64 = *(unint64_t *)((char *)v82 + v62 - 8);
      v62 -= 8;
      if (v63 != v64)
      {
        if (v63 <= v64)
          break;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v10 = v80;
    v11 = v82;
    if (v80 > (unint64_t)v82)
      goto LABEL_17;
  }
  result = (uint64_t)&v82;
  v13 = v83;
  v14 = v83 - 1;
  if (v83 >= 0x41)
    v15 = (unint64_t **)&v11[v14 >> 6];
  else
    v15 = &v82;
  if (((1 << v14) & (unint64_t)*v15) == 0)
    goto LABEL_168;
  if (v83 > 0x40)
  {
    if ((v11[v14 >> 6] & (1 << v14)) != 0)
    {
      v69 = v83 - 1;
      result = llvm::APInt::countTrailingZerosSlowCase(&v82);
      if ((_DWORD)result == v69)
        goto LABEL_168;
    }
LABEL_17:
    llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v76);
    llvm::APInt::sext((llvm::APInt *)&v76, 2 * *((_DWORD *)this + 2), (llvm::APInt *)&v100);
    if (v99 >= 0x41 && v98)
      MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
    v98 = v100;
    v99 = v101;
    v101 = 0;
    if (v77 >= 0x41 && v76)
      MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v76);
    llvm::APInt::sext((llvm::APInt *)&v76, 2 * *((_DWORD *)this + 2), (llvm::APInt *)&v100);
    if (v97 >= 0x41 && v96)
      MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
    v96 = v100;
    v97 = v101;
    v101 = 0;
    if (v77 >= 0x41 && v76)
      MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v76);
    llvm::APInt::sext((llvm::APInt *)&v76, 2 * *((_DWORD *)this + 2), (llvm::APInt *)&v100);
    if (v95 >= 0x41 && v94)
      MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
    v94 = v100;
    v95 = v101;
    v101 = 0;
    if (v77 >= 0x41 && v76)
      MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v76);
    llvm::APInt::sext((llvm::APInt *)&v76, 2 * *((_DWORD *)this + 2), (llvm::APInt *)&v100);
    if (v93 >= 0x41 && v92)
      MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
    v92 = v100;
    v93 = v101;
    v101 = 0;
    if (v77 >= 0x41 && v76)
      MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    llvm::APInt::operator*((uint64_t)&v98, &v94, (uint64_t)&v100);
    llvm::APInt::operator*((uint64_t)&v98, &v92, (uint64_t)&v102);
    llvm::APInt::operator*((uint64_t)&v96, &v94, (uint64_t)&v103);
    llvm::APInt::operator*((uint64_t)&v96, &v92, (uint64_t)v104);
    v16 = 1;
    v17 = &v100;
    do
    {
      v18 = v17;
      v19 = &v100 + 2 * v16;
      v20 = *((unsigned int *)v19 + 2);
      if (v20 > 0x40)
      {
        v48 = *(_QWORD *)(*v19 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
        v49 = *((_DWORD *)v17 + 2);
        v50 = v49 - 1;
        if (v49 >= 0x41)
          v51 = (uint64_t *)(*v17 + 8 * (v50 >> 6));
        else
          v51 = v17;
        if ((v48 != 0) == (((unint64_t)*v51 >> v50) & 1))
        {
          v56 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v56)
            {
              v25 = 0;
              goto LABEL_30;
            }
            v57 = *(_QWORD *)(*v19 - 8 + v56);
            v58 = *(_QWORD *)(*v17 - 8 + v56);
            v56 -= 8;
          }
          while (v57 == v58);
          if (v57 > v58)
            v25 = 1;
          else
            v25 = -1;
        }
        else if (v48)
        {
          v25 = -1;
        }
        else
        {
          v25 = 1;
        }
      }
      else
      {
        v21 = -v20;
        v22 = *v19 << v21 >> v21;
        v23 = *v17 << v21 >> v21;
        v24 = v22 < v23;
        v25 = v22 > v23;
        if (v24)
          v25 = -1;
      }
LABEL_30:
      if (v25 < 0)
        v17 = &v100 + 2 * v16;
      ++v16;
    }
    while (v16 != 4);
    v26 = (unsigned int *)(v18 + 1);
    if (v25 < 0)
      v26 = (unsigned int *)v105;
    v27 = *v26;
    if (v27 > 0x40)
    {
      v28 = (void *)operator new[]();
      memcpy(v28, (const void *)*v17, ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v28 = (void *)*v17;
    }
    v29 = 1;
    v30 = &v100;
    do
    {
      v31 = v30;
      v32 = &v100 + 2 * v29;
      v33 = *((unsigned int *)v30 + 2);
      if (v33 > 0x40)
      {
        v52 = *(_QWORD *)(*v30 + 8 * ((v33 - 1) >> 6)) & (1 << (v33 - 1));
        v53 = *((_DWORD *)v32 + 2);
        v54 = v53 - 1;
        if (v53 >= 0x41)
          v55 = (uint64_t *)(*v32 + 8 * (v54 >> 6));
        else
          v55 = &v100 + 2 * v29;
        if ((v52 != 0) == (((unint64_t)*v55 >> v54) & 1))
        {
          v59 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v59)
            {
              v37 = 0;
              goto LABEL_42;
            }
            v60 = *(_QWORD *)(*v30 - 8 + v59);
            v61 = *(_QWORD *)(*v32 - 8 + v59);
            v59 -= 8;
          }
          while (v60 == v61);
          if (v60 > v61)
            v37 = 1;
          else
            v37 = -1;
        }
        else if (v52)
        {
          v37 = -1;
        }
        else
        {
          v37 = 1;
        }
      }
      else
      {
        v34 = -v33;
        v35 = *v30 << v34 >> v34;
        v36 = *v32 << v34 >> v34;
        v24 = v35 < v36;
        v37 = v35 > v36;
        if (v24)
          v37 = -1;
      }
LABEL_42:
      if (v37 < 0)
        v30 = &v100 + 2 * v29;
      ++v29;
    }
    while (v29 != 4);
    v38 = (unsigned int *)(v31 + 1);
    if (v37 < 0)
      v38 = (unsigned int *)v105;
    v75 = *v38;
    if (v75 > 0x40)
    {
      v74 = (void *)operator new[]();
      memcpy(v74, (const void *)*v30, (((unint64_t)v75 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v74 = (void *)*v30;
    }
    llvm::APInt::operator+=((uint64_t)&v74, 1uLL);
    v39 = v75;
    v75 = 0;
    v77 = v27;
    v76 = (uint64_t)v28;
    v79 = v39;
    v78 = (uint64_t)v74;
    llvm::ConstantRange::truncate((llvm::ConstantRange *)&v76, *((_DWORD *)this + 2), (uint64_t)&v70);
    result = llvm::ConstantRange::isSizeStrictlySmallerThan((llvm::ConstantRange *)&v80, (const void **)&v70);
    v40 = result;
    if ((_DWORD)result)
      v41 = (const void **)&v80;
    else
      v41 = (const void **)&v70;
    v42 = &v71;
    if ((_DWORD)result)
      v42 = &v81;
    v43 = *v42;
    *(_DWORD *)(a3 + 8) = v43;
    if (v43 > 0x40)
    {
      v65 = ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8;
      v66 = (void *)operator new[]();
      *(_QWORD *)a3 = v66;
      result = (uint64_t)memcpy(v66, *v41, v65);
    }
    else
    {
      *(_QWORD *)a3 = *v41;
    }
    if (v40)
      v44 = &v80;
    else
      v44 = (unint64_t *)&v70;
    v45 = v73;
    if (v40)
      v46 = v83;
    else
      v46 = v73;
    *(_DWORD *)(a3 + 24) = v46;
    if (v46 > 0x40)
    {
      v67 = ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8;
      v68 = (void *)operator new[]();
      *(_QWORD *)(a3 + 16) = v68;
      result = (uint64_t)memcpy(v68, (const void *)v44[2], v67);
      v45 = v73;
    }
    else
    {
      *(_QWORD *)(a3 + 16) = v44[2];
    }
    if (v45 >= 0x41)
    {
      result = v72;
      if (v72)
        result = MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
    }
    if (v71 >= 0x41)
    {
      result = v70;
      if (v70)
        result = MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
    }
    if (v79 >= 0x41)
    {
      result = v78;
      if (v78)
        result = MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
    }
    if (v77 >= 0x41)
    {
      result = v76;
      if (v76)
        result = MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    }
    for (i = 0; i != -64; i -= 16)
    {
      if (*(_DWORD *)&v105[i] >= 0x41u)
      {
        result = *(_QWORD *)&v104[i];
        if (result)
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
    }
    if (v83 >= 0x41)
    {
      result = (uint64_t)v82;
      if (v82)
        result = MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
    }
    goto LABEL_75;
  }
  if ((unint64_t *)(1 << v14) != v11)
    goto LABEL_17;
LABEL_168:
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v10;
  *(_DWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 16) = v11;
  v81 = 0;
  v83 = 0;
LABEL_75:
  if (v81 >= 0x41)
  {
    result = v80;
    if (v80)
      result = MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
  }
  if (v91 >= 0x41)
  {
    result = v90;
    if (v90)
      result = MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
  }
  if (v89 >= 0x41)
  {
    result = v88;
    if (v88)
      result = MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
  }
  if (v93 >= 0x41)
  {
    result = v92;
    if (v92)
      result = MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
  }
  if (v95 >= 0x41)
  {
    result = v94;
    if (v94)
      result = MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
  }
  if (v97 >= 0x41)
  {
    result = v96;
    if (v96)
      result = MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
  }
  if (v99 >= 0x41)
  {
    result = v98;
    if (v98)
      return MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::udiv(const void **this@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int64_t v12;
  BOOL v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  void *__s2;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  void *__dst;
  unsigned int v40;
  void *__s1;
  unsigned int v42;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_25;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_25;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if ((unint64_t)a2[2] | (unint64_t)*a2)
      goto LABEL_5;
LABEL_25:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) == (_DWORD)v7)
  {
    goto LABEL_25;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&__s1);
  v8 = v42;
  if (v42 <= 0x40)
  {
    if (__s1)
      goto LABEL_7;
    goto LABEL_24;
  }
  v11 = 0;
  v12 = ((unint64_t)v42 + 63) >> 6;
  do
  {
    v13 = v12-- < 1;
    if (v13)
      break;
    v14 = *((_QWORD *)__s1 + v12);
    v11 += __clz(v14);
  }
  while (!v14);
  v15 = v42 | 0xFFFFFFC0;
  if ((v42 & 0x3F) == 0)
    v15 = 0;
  v16 = v11 + v15;
  if (__s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v16 == v8)
  {
LABEL_24:
    LODWORD(v6) = *((_DWORD *)this + 2);
    goto LABEL_25;
  }
LABEL_7:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&__dst);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v37);
  llvm::APInt::udiv((llvm::APInt *)&__dst, (const llvm::APInt *)&v37, (llvm::APInt *)&__s1);
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  if (v40 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&__dst);
  v9 = v40;
  if (v40 > 0x40)
  {
    v17 = 0;
    v18 = ((unint64_t)v40 + 63) >> 6;
    v10 = __dst;
    do
    {
      v13 = v18-- < 1;
      if (v13)
        break;
      v19 = *((_QWORD *)__dst + v18);
      v17 += __clz(v19);
    }
    while (!v19);
    v20 = v40 | 0xFFFFFFC0;
    if ((v40 & 0x3F) == 0)
      v20 = 0;
    if (v17 + v20 == v40)
    {
LABEL_32:
      v21 = *((_DWORD *)a2 + 6);
      if (v21 >= 0x41 && v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 2)) > 0x40)
        goto LABEL_40;
      v22 = a2[2];
      if (v21 < 0x41)
        v22 = a2 + 2;
      if (*v22 == 1)
      {
        if (v9 <= 0x40)
        {
          v23 = *((_DWORD *)a2 + 2);
          if (v23 <= 0x40)
          {
            __dst = *a2;
            v40 = v23;
            goto LABEL_47;
          }
        }
        if (&__dst == a2)
          goto LABEL_47;
        llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)a2 + 2));
        if (v40 > 0x40)
        {
          memcpy(__dst, *a2, (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_47;
        }
        v25 = *a2;
      }
      else
      {
LABEL_40:
        if (v9 > 0x40)
        {
          *v10 = 1;
          bzero((char *)__dst + 8, (((unint64_t)(v9 + 63) >> 3) - 8) & 0xFFFFFFF8);
          goto LABEL_47;
        }
        if ((_DWORD)v9)
          v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
        else
          LOBYTE(v24) = 0;
        v25 = (void *)(v24 & 1);
      }
      __dst = v25;
    }
  }
  else
  {
    v10 = __dst;
    if (!__dst)
      goto LABEL_32;
  }
LABEL_47:
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v37);
  llvm::APInt::udiv((llvm::APInt *)&v37, (const llvm::APInt *)&__dst, (llvm::APInt *)&__s2);
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v26 = v36;
  v27 = __s2;
  v36 = 0;
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  v28 = v42;
  v29 = __s1;
  v42 = 0;
  if (v28 > 0x40)
  {
    if (!memcmp(__s1, v27, ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8))
    {
      v31 = v26;
      *(_DWORD *)(a3 + 8) = v28;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v32 = *(unsigned int *)(a3 + 8);
      *(_DWORD *)(a3 + 24) = v32;
      if (v32 > 0x40)
      {
        v33 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
        v34 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v34;
        memcpy(v34, *(const void **)a3, v33);
        v26 = v31;
LABEL_56:
        if (v26 >= 0x41 && v27)
          MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
        if (v28 >= 0x41 && v29)
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
        goto LABEL_74;
      }
      v30 = *(_QWORD *)a3;
LABEL_55:
      *(_QWORD *)(a3 + 16) = v30;
      goto LABEL_56;
    }
  }
  else if (__s1 == v27)
  {
    *(_DWORD *)(a3 + 8) = v28;
    v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
    if (!(_DWORD)v28)
      v30 = 0;
    *(_QWORD *)a3 = v30;
    *(_DWORD *)(a3 + 24) = v28;
    goto LABEL_55;
  }
  *(_DWORD *)(a3 + 8) = v28;
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 24) = v26;
  *(_QWORD *)(a3 + 16) = v27;
LABEL_74:
  if (v40 >= 0x41 && __dst)
    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
  if (v42 >= 0x41)
  {
    if (__s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
}

uint64_t llvm::ConstantRange::sdiv@<X0>(void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  int v27;
  int64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  unsigned int v35;
  void *v36;
  size_t v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  BOOL v41;
  char v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  void *v54;
  unint64_t v55;
  int v56;
  int64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  int64_t v62;
  unint64_t v63;
  int v64;
  _QWORD *v65;
  int v66;
  int64_t v67;
  unint64_t v68;
  int v69;
  _QWORD *v70;
  int v71;
  int64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t result;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  size_t v98;
  void *v99;
  unint64_t v100;
  int v101;
  int64_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  int64_t v107;
  unint64_t v108;
  int v109;
  _QWORD *v110;
  int v111;
  int64_t v112;
  unint64_t v113;
  int v114;
  _QWORD *v115;
  int v116;
  int64_t v117;
  unint64_t v118;
  int v119;
  _QWORD *v120;
  int v121;
  int64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  BOOL v129;
  _QWORD *v130;
  int v131;
  int64_t v132;
  unint64_t v133;
  int v134;
  char *v135;
  unint64_t v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  void *v149;
  unsigned int v150;
  void *v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  void *v155;
  unsigned int v156;
  void *v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  void *v163;
  unsigned int v164;
  void *v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  void *v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  void *v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  void *v177;
  unsigned int v178;
  void *v179;
  unsigned int v180;
  void *__s2;
  unsigned int v182;
  void *v183;
  unsigned int v184;
  const void *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  void *v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  void *v197;
  unsigned int v198;
  void *__dst;
  unsigned int v200;
  void *v201;
  unsigned int v202;
  void *v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  void *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  void *v215;
  unsigned int v216;
  void *v217;
  unsigned int v218;
  void *__s1;
  unsigned int v220;
  void *__src;
  unsigned int v222;
  unint64_t v223;
  unsigned int v224;
  unint64_t v225;
  unsigned int v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  char *v241;
  unsigned int v242;
  char *v243;
  unsigned int v244;

  sub_1C4832EA4((llvm::APInt *)&v243, *((_DWORD *)this + 2), 0, 0);
  v6 = *((_DWORD *)this + 2);
  v7 = (char *)&v241;
  sub_1C4832EA4((llvm::APInt *)&v241, v6, 0, 0);
  v8 = v6 - 1;
  if (v242 >= 0x41)
    v7 = &v241[8 * (v8 >> 6)];
  *(_QWORD *)v7 |= 1 << v8;
  sub_1C4832EA4((llvm::APInt *)&v235, *((_DWORD *)this + 2), 1, 0);
  v9 = v242;
  if (v242 > 0x40)
  {
    v12 = (void *)operator new[]();
    v10 = v241;
    memcpy(v12, v241, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    v11 = v242;
  }
  else
  {
    v10 = v241;
    v11 = v242;
    v12 = v241;
  }
  v238 = v236;
  v237 = v235;
  v236 = 0;
  v240 = v9;
  v239 = (uint64_t)v12;
  if (v11 >= 0x41)
  {
    v10 = (void *)operator new[]();
    memcpy(v10, v241, (((unint64_t)v11 + 63) >> 3) & 0x3FFFFFF8);
  }
  v13 = v244;
  if (v244 > 0x40)
  {
    v14 = (void *)operator new[]();
    memcpy(v14, v243, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v14 = v243;
  }
  v232 = v11;
  v231 = (uint64_t)v10;
  v234 = v13;
  v233 = (uint64_t)v14;
  llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v237, 0, (uint64_t)&v227);
  llvm::ConstantRange::intersectWith((uint64_t)this, (llvm::ConstantRange *)&v231, 0, (uint64_t)&v223);
  llvm::ConstantRange::intersectWith((uint64_t)a2, (llvm::ConstantRange *)&v237, 0, (uint64_t)&__s1);
  llvm::ConstantRange::intersectWith((uint64_t)a2, (llvm::ConstantRange *)&v231, 0, (uint64_t)&v215);
  llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)&v211, *((_DWORD *)this + 2), 0);
  v15 = v228;
  if (v228 >= 0x41)
  {
    v55 = v227;
    if (!memcmp((const void *)v227, (const void *)v229, (((unint64_t)v228 + 63) >> 3) & 0x3FFFFFF8))
    {
      v56 = 0;
      v57 = (unint64_t)(v15 + 63) >> 6;
      do
      {
        v129 = v57-- < 1;
        if (v129)
          break;
        v58 = *(_QWORD *)(v55 + 8 * v57);
        v56 += __clz(v58);
      }
      while (!v58);
      v59 = v15 | 0xFFFFFFC0;
      if ((v15 & 0x3F) == 0)
        v59 = 0;
      if (v56 + v59 == (_DWORD)v15)
        goto LABEL_41;
    }
  }
  else if (!(v229 | v227))
  {
    goto LABEL_41;
  }
  v16 = v220;
  if (v220 < 0x41)
  {
    v17 = __src;
    if (!((unint64_t)__src | (unint64_t)__s1))
      goto LABEL_41;
    goto LABEL_15;
  }
  v65 = __s1;
  v17 = __src;
  if (memcmp(__s1, __src, (((unint64_t)v220 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_15;
  v66 = 0;
  v67 = (unint64_t)(v16 + 63) >> 6;
  do
  {
    v129 = v67-- < 1;
    if (v129)
      break;
    v68 = v65[v67];
    v66 += __clz(v68);
  }
  while (!v68);
  v69 = v16 | 0xFFFFFFC0;
  if ((v16 & 0x3F) == 0)
    v69 = 0;
  if (v66 + v69 != (_DWORD)v16)
  {
LABEL_15:
    v208 = v222;
    if (v222 > 0x40)
    {
      v207 = (void *)operator new[]();
      memcpy(v207, __src, (((unint64_t)v208 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v207 = v17;
    }
    llvm::APInt::operator-=((uint64_t)&v207, 1uLL);
    v194 = v208;
    v193 = (uint64_t)v207;
    v208 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v227, (const void **)&v193, (llvm::APInt *)&v209);
    v204 = v230;
    if (v230 > 0x40)
    {
      v203 = (void *)operator new[]();
      memcpy(v203, (const void *)v229, (((unint64_t)v204 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v203 = (void *)v229;
    }
    llvm::APInt::operator-=((uint64_t)&v203, 1uLL);
    v190 = v204;
    v189 = v203;
    v204 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v189, (const void **)&__s1, (llvm::APInt *)&v205);
    llvm::APInt::operator+=((uint64_t)&v205, 1uLL);
    v18 = v206;
    v19 = v205;
    v206 = 0;
    v20 = v210;
    v21 = v209;
    v210 = 0;
    if (v212 >= 0x41 && v211)
      MEMORY[0x1CAA32F9C](v211, 0x1000C8000313F17);
    v211 = v21;
    v212 = v20;
    if (v214 >= 0x41 && v213)
      MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
    v213 = v19;
    v214 = v18;
    if (v206 >= 0x41 && v205)
      MEMORY[0x1CAA32F9C](v205, 0x1000C8000313F17);
    if (v190 >= 0x41 && v189)
      MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
    if (v204 >= 0x41 && v203)
      MEMORY[0x1CAA32F9C](v203, 0x1000C8000313F17);
    if (v210 >= 0x41 && v209)
      MEMORY[0x1CAA32F9C](v209, 0x1000C8000313F17);
    if (v194 >= 0x41 && v193)
      MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
    if (v208 >= 0x41 && v207)
      MEMORY[0x1CAA32F9C](v207, 0x1000C8000313F17);
  }
LABEL_41:
  v22 = v224;
  if (v224 >= 0x41)
  {
    v60 = v223;
    v23 = (void *)v225;
    if (!memcmp((const void *)v223, (const void *)v225, (((unint64_t)v224 + 63) >> 3) & 0x3FFFFFF8))
    {
      v61 = 0;
      v62 = (unint64_t)(v22 + 63) >> 6;
      do
      {
        v129 = v62-- < 1;
        if (v129)
          break;
        v63 = *(_QWORD *)(v60 + 8 * v62);
        v61 += __clz(v63);
      }
      while (!v63);
      v64 = v22 | 0xFFFFFFC0;
      if ((v22 & 0x3F) == 0)
        v64 = 0;
      if (v61 + v64 == (_DWORD)v22)
        goto LABEL_234;
    }
  }
  else
  {
    v23 = (void *)v225;
    if (!(v225 | v223))
      goto LABEL_234;
  }
  v24 = v216;
  if (v216 < 0x41)
  {
    if (!((unint64_t)v217 | (unint64_t)v215))
      goto LABEL_234;
LABEL_45:
    v202 = v226;
    if (v226 > 0x40)
    {
      v201 = (void *)operator new[]();
      memcpy(v201, (const void *)v225, (((unint64_t)v202 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v201 = v23;
    }
    llvm::APInt::operator-=((uint64_t)&v201, 1uLL);
    v194 = v202;
    v193 = (uint64_t)v201;
    v202 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v193, (const void **)&v215, (llvm::APInt *)&v157);
    if (v194 >= 0x41 && v193)
      MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
    if (v202 >= 0x41 && v201)
      MEMORY[0x1CAA32F9C](v201, 0x1000C8000313F17);
    if (v224 > 0x40)
    {
      if (((*(_QWORD *)(v223 + 8 * ((v224 - 1) >> 6)) >> (v224 - 1)) & 1) == 0)
        goto LABEL_214;
      v75 = v224 - 1;
      if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v223) != v75)
        goto LABEL_214;
    }
    else if (v223 != 1 << (v224 - 1))
    {
      goto LABEL_214;
    }
    v25 = v218;
    if (v218 > 0x40)
    {
      v27 = 0;
      v28 = ((unint64_t)v218 + 63) >> 6;
      v26 = v217;
      do
      {
        v129 = v28-- < 1;
        if (v129)
          break;
        v29 = *((_QWORD *)v217 + v28);
        v27 += __clz(v29);
      }
      while (!v29);
      v30 = v218 | 0xFFFFFFC0;
      if ((v218 & 0x3F) == 0)
        v30 = 0;
      if (v27 + v30 == v218)
      {
LABEL_65:
        v31 = v216;
        if (!v216)
          goto LABEL_106;
        if (v216 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v215) == v31)
            goto LABEL_106;
        }
        else if (v215 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v216))
        {
          goto LABEL_106;
        }
        v200 = 1;
        __dst = 0;
        v32 = *((_DWORD *)a2 + 2);
        if (v32)
        {
          if (v32 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(a2) != v32)
              goto LABEL_73;
          }
          else if (*(_QWORD *)a2 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v32)
          {
LABEL_73:
            v198 = v25;
            if (v25 > 0x40)
            {
              v197 = (void *)operator new[]();
              memcpy(v197, v217, (((unint64_t)v198 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v197 = v26;
            }
            llvm::APInt::operator-=((uint64_t)&v197, 1uLL);
            v33 = v198;
            v34 = v197;
            v198 = 0;
            goto LABEL_82;
          }
        }
        v33 = *((_DWORD *)a2 + 6);
        if (v33 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)a2 + 6));
          v33 = v200;
          if (v200 <= 0x40)
          {
            v34 = (void *)*((_QWORD *)a2 + 2);
            __dst = v34;
          }
          else
          {
            v34 = __dst;
            memcpy(__dst, *((const void **)a2 + 2), (((unint64_t)v200 + 63) >> 3) & 0x3FFFFFF8);
          }
LABEL_83:
          v35 = v158;
          if (v158 > 0x40)
          {
            v37 = (((unint64_t)v158 + 63) >> 3) & 0x3FFFFFF8;
            v36 = (void *)operator new[]();
            memcpy(v36, v157, v37);
          }
          else
          {
            v36 = v157;
          }
          v184 = v33;
          if (v33 > 0x40)
          {
            v183 = (void *)operator new[]();
            memcpy(v183, v34, (((unint64_t)v184 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v183 = v34;
          }
          llvm::APInt::operator-=((uint64_t)&v183, 1uLL);
          v186 = v184;
          v185 = v183;
          v184 = 0;
          llvm::APInt::sdiv((llvm::APInt *)&v223, &v185, (llvm::APInt *)&v187);
          llvm::APInt::operator+=((uint64_t)&v187, 1uLL);
          v38 = v188;
          v188 = 0;
          v190 = v35;
          v189 = v36;
          v192 = v38;
          v191 = v187;
          llvm::ConstantRange::unionWith((uint64_t)&v211, (unsigned int *)&v189, 0, (uint64_t)&v193);
          if (v212 >= 0x41 && v211)
            MEMORY[0x1CAA32F9C](v211, 0x1000C8000313F17);
          v211 = v193;
          v212 = v194;
          v194 = 0;
          if (v214 >= 0x41 && v213)
          {
            MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
            v213 = v195;
            v214 = v196;
            v196 = 0;
            if (v194 >= 0x41 && v193)
              MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
          }
          else
          {
            v213 = v195;
            v214 = v196;
            v196 = 0;
          }
          if (v192 >= 0x41 && v191)
            MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
          if (v190 >= 0x41 && v189)
            MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
          if (v188 >= 0x41 && v187)
            MEMORY[0x1CAA32F9C](v187, 0x1000C8000313F17);
          if (v186 >= 0x41 && v185)
            MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
          if (v184 >= 0x41 && v183)
            MEMORY[0x1CAA32F9C](v183, 0x1000C8000313F17);
          if (v33 >= 0x41 && v34)
            MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
LABEL_106:
          v182 = v242;
          if (v242 > 0x40)
          {
            __s2 = (void *)operator new[]();
            memcpy(__s2, v241, (((unint64_t)v182 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __s2 = v241;
          }
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          v39 = v182;
          v40 = __s2;
          v182 = 0;
          if (v226 > 0x40)
            v41 = memcmp((const void *)v225, __s2, (((unint64_t)v226 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v41 = v225 == (_QWORD)__s2;
          v42 = v41;
          if (v39 >= 0x41)
          {
            if (v40)
            {
              MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
              if (v182 >= 0x41)
              {
                if (__s2)
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              }
            }
          }
          if ((v42 & 1) != 0)
            goto LABEL_231;
          v200 = 1;
          __dst = 0;
          v180 = v242;
          if (v242 > 0x40)
          {
            v179 = (void *)operator new[]();
            memcpy(v179, v241, (((unint64_t)v180 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v179 = v241;
          }
          llvm::APInt::operator+=((uint64_t)&v179, 1uLL);
          v43 = v180;
          v44 = v179;
          v180 = 0;
          v45 = *((unsigned int *)this + 6);
          if (v45 > 0x40)
            v46 = memcmp(this[2], v179, ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v46 = this[2] == v179;
          v47 = v46;
          if (v43 >= 0x41)
          {
            if (v44)
            {
              MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
              if (v180 >= 0x41)
              {
                if (v179)
                  MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
              }
            }
          }
          if (v47)
          {
            if (v200 > 0x40 || (v48 = *((_DWORD *)this + 2), v48 > 0x40))
            {
              if (&__dst != this)
              {
                llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)this + 2));
                if (v200 <= 0x40)
                  __dst = *this;
                else
                  memcpy(__dst, *this, (((unint64_t)v200 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              __dst = *this;
              v200 = v48;
            }
          }
          else
          {
            v178 = v224;
            if (v224 > 0x40)
            {
              v177 = (void *)operator new[]();
              memcpy(v177, (const void *)v223, (((unint64_t)v178 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v177 = (void *)v223;
            }
            llvm::APInt::operator+=((uint64_t)&v177, 1uLL);
            v49 = v178;
            v50 = v177;
            v178 = 0;
            if (v200 > 0x40 && __dst)
            {
              MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              __dst = v50;
              v200 = v49;
              if (v178 >= 0x41 && v177)
                MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
            }
            else
            {
              __dst = v177;
              v200 = v49;
            }
          }
          v51 = v158;
          v52 = v157;
          v158 = 0;
          v174 = v218;
          if (v218 > 0x40)
          {
            v173 = (void *)operator new[]();
            memcpy(v173, v217, (((unint64_t)v174 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v173 = v217;
          }
          llvm::APInt::operator-=((uint64_t)&v173, 1uLL);
          v186 = v174;
          v185 = v173;
          v174 = 0;
          llvm::APInt::sdiv((llvm::APInt *)&__dst, &v185, (llvm::APInt *)&v175);
          llvm::APInt::operator+=((uint64_t)&v175, 1uLL);
          v53 = v176;
          v176 = 0;
          v190 = v51;
          v189 = v52;
          v192 = v53;
          v191 = v175;
          llvm::ConstantRange::unionWith((uint64_t)&v211, (unsigned int *)&v189, 0, (uint64_t)&v193);
          if (v212 >= 0x41 && v211)
            MEMORY[0x1CAA32F9C](v211, 0x1000C8000313F17);
          v211 = v193;
          v212 = v194;
          v194 = 0;
          if (v214 >= 0x41 && v213)
          {
            MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
            v213 = v195;
            v214 = v196;
            v196 = 0;
            if (v194 >= 0x41 && v193)
              MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
          }
          else
          {
            v213 = v195;
            v214 = v196;
            v196 = 0;
          }
          if (v192 >= 0x41 && v191)
            MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
          if (v190 >= 0x41 && v189)
            MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
          if (v176 >= 0x41 && v175)
            MEMORY[0x1CAA32F9C](v175, 0x1000C8000313F17);
          if (v186 >= 0x41 && v185)
            MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
          if (v174 >= 0x41 && v173)
            MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
          if (v200 < 0x41)
            goto LABEL_231;
          v54 = __dst;
          if (!__dst)
            goto LABEL_231;
          goto LABEL_230;
        }
        v34 = (void *)*((_QWORD *)a2 + 2);
LABEL_82:
        __dst = v34;
        v200 = v33;
        goto LABEL_83;
      }
    }
    else if (!v217)
    {
      v26 = 0;
      goto LABEL_65;
    }
LABEL_214:
    v76 = v158;
    v77 = v157;
    v158 = 0;
    v170 = v218;
    if (v218 > 0x40)
    {
      v169 = (void *)operator new[]();
      memcpy(v169, v217, (((unint64_t)v170 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v169 = v217;
    }
    llvm::APInt::operator-=((uint64_t)&v169, 1uLL);
    v200 = v170;
    __dst = v169;
    v170 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v223, (const void **)&__dst, (llvm::APInt *)&v171);
    llvm::APInt::operator+=((uint64_t)&v171, 1uLL);
    v78 = v172;
    v172 = 0;
    v190 = v76;
    v189 = v77;
    v192 = v78;
    v191 = v171;
    llvm::ConstantRange::unionWith((uint64_t)&v211, (unsigned int *)&v189, 0, (uint64_t)&v193);
    if (v212 >= 0x41 && v211)
      MEMORY[0x1CAA32F9C](v211, 0x1000C8000313F17);
    v211 = v193;
    v212 = v194;
    v194 = 0;
    if (v214 >= 0x41 && v213)
    {
      MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
      v213 = v195;
      v214 = v196;
      v196 = 0;
      if (v194 >= 0x41 && v193)
        MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
    }
    else
    {
      v213 = v195;
      v214 = v196;
      v196 = 0;
    }
    if (v192 >= 0x41 && v191)
      MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
    if (v190 >= 0x41 && v189)
      MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
    if (v172 >= 0x41 && v171)
      MEMORY[0x1CAA32F9C](v171, 0x1000C8000313F17);
    if (v200 >= 0x41 && __dst)
      MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
    if (v170 < 0x41)
      goto LABEL_231;
    v54 = v169;
    if (!v169)
      goto LABEL_231;
LABEL_230:
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
LABEL_231:
    if (v158 >= 0x41 && v157)
      MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
    goto LABEL_234;
  }
  v70 = v215;
  if (memcmp(v215, v217, (((unint64_t)v216 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_45;
  v71 = 0;
  v72 = (unint64_t)(v24 + 63) >> 6;
  do
  {
    v129 = v72-- < 1;
    if (v129)
      break;
    v73 = v70[v72];
    v71 += __clz(v73);
  }
  while (!v73);
  v74 = v24 | 0xFFFFFFC0;
  if ((v24 & 0x3F) == 0)
    v74 = 0;
  if (v71 + v74 != (_DWORD)v24)
    goto LABEL_45;
LABEL_234:
  llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)&v193, *((_DWORD *)this + 2), 0);
  v79 = v228;
  if (v228 >= 0x41)
  {
    v100 = v227;
    v80 = (void *)v229;
    if (!memcmp((const void *)v227, (const void *)v229, (((unint64_t)v228 + 63) >> 3) & 0x3FFFFFF8))
    {
      v101 = 0;
      v102 = (unint64_t)(v79 + 63) >> 6;
      do
      {
        v129 = v102-- < 1;
        if (v129)
          break;
        v103 = *(_QWORD *)(v100 + 8 * v102);
        v101 += __clz(v103);
      }
      while (!v103);
      v104 = v79 | 0xFFFFFFC0;
      if ((v79 & 0x3F) == 0)
        v104 = 0;
      if (v101 + v104 == (_DWORD)v79)
        goto LABEL_264;
    }
  }
  else
  {
    v80 = (void *)v229;
    if (!(v229 | v227))
      goto LABEL_264;
  }
  v81 = v216;
  if (v216 < 0x41)
  {
    if (!((unint64_t)v217 | (unint64_t)v215))
      goto LABEL_264;
    goto LABEL_238;
  }
  v110 = v215;
  if (memcmp(v215, v217, (((unint64_t)v216 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_238;
  v111 = 0;
  v112 = (unint64_t)(v81 + 63) >> 6;
  do
  {
    v129 = v112-- < 1;
    if (v129)
      break;
    v113 = v110[v112];
    v111 += __clz(v113);
  }
  while (!v113);
  v114 = v81 | 0xFFFFFFC0;
  if ((v81 & 0x3F) == 0)
    v114 = 0;
  if (v111 + v114 != (_DWORD)v81)
  {
LABEL_238:
    v166 = v230;
    if (v230 > 0x40)
    {
      v165 = (void *)operator new[]();
      memcpy(v165, (const void *)v229, (((unint64_t)v166 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v165 = v80;
    }
    llvm::APInt::operator-=((uint64_t)&v165, 1uLL);
    v190 = v166;
    v189 = v165;
    v166 = 0;
    v164 = v218;
    if (v218 > 0x40)
    {
      v163 = (void *)operator new[]();
      memcpy(v163, v217, (((unint64_t)v164 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v163 = v217;
    }
    llvm::APInt::operator-=((uint64_t)&v163, 1uLL);
    v158 = v164;
    v157 = v163;
    v164 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&v189, (const void **)&v157, (llvm::APInt *)&v167);
    llvm::APInt::sdiv((llvm::APInt *)&v227, (const void **)&v215, (llvm::APInt *)&v161);
    llvm::APInt::operator+=((uint64_t)&v161, 1uLL);
    v82 = v162;
    v83 = v161;
    v162 = 0;
    v84 = v168;
    v85 = v167;
    v168 = 0;
    if (v194 >= 0x41 && v193)
      MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
    v193 = v85;
    v194 = v84;
    if (v196 >= 0x41 && v195)
      MEMORY[0x1CAA32F9C](v195, 0x1000C8000313F17);
    v195 = v83;
    v196 = v82;
    if (v162 >= 0x41 && v161)
      MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
    if (v168 >= 0x41 && v167)
      MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
    if (v158 >= 0x41 && v157)
      MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
    if (v164 >= 0x41 && v163)
      MEMORY[0x1CAA32F9C](v163, 0x1000C8000313F17);
    if (v190 >= 0x41 && v189)
      MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
    if (v166 >= 0x41 && v165)
      MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
  }
LABEL_264:
  v86 = v224;
  if (v224 >= 0x41)
  {
    v105 = v223;
    if (!memcmp((const void *)v223, (const void *)v225, (((unint64_t)v224 + 63) >> 3) & 0x3FFFFFF8))
    {
      v106 = 0;
      v107 = (unint64_t)(v86 + 63) >> 6;
      do
      {
        v129 = v107-- < 1;
        if (v129)
          break;
        v108 = *(_QWORD *)(v105 + 8 * v107);
        v106 += __clz(v108);
      }
      while (!v108);
      v109 = v86 | 0xFFFFFFC0;
      if ((v86 & 0x3F) == 0)
        v109 = 0;
      if (v106 + v109 == (_DWORD)v86)
        goto LABEL_297;
    }
  }
  else if (!(v225 | v223))
  {
    goto LABEL_297;
  }
  v87 = v220;
  if (v220 < 0x41)
  {
    if (!((unint64_t)__src | (unint64_t)__s1))
      goto LABEL_297;
    goto LABEL_268;
  }
  v115 = __s1;
  if (memcmp(__s1, __src, (((unint64_t)v220 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_268;
  v116 = 0;
  v117 = (unint64_t)(v87 + 63) >> 6;
  do
  {
    v129 = v117-- < 1;
    if (v129)
      break;
    v118 = v115[v117];
    v116 += __clz(v118);
  }
  while (!v118);
  v119 = v87 | 0xFFFFFFC0;
  if ((v87 & 0x3F) == 0)
    v119 = 0;
  if (v116 + v119 != (_DWORD)v87)
  {
LABEL_268:
    llvm::APInt::sdiv((llvm::APInt *)&v223, (const void **)&__s1, (llvm::APInt *)&v155);
    v152 = v226;
    if (v226 > 0x40)
    {
      v151 = (void *)operator new[]();
      memcpy(v151, (const void *)v225, (((unint64_t)v152 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v151 = (void *)v225;
    }
    llvm::APInt::operator-=((uint64_t)&v151, 1uLL);
    v200 = v152;
    __dst = v151;
    v152 = 0;
    v150 = v222;
    if (v222 > 0x40)
    {
      v149 = (void *)operator new[]();
      memcpy(v149, __src, (((unint64_t)v150 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v149 = __src;
    }
    llvm::APInt::operator-=((uint64_t)&v149, 1uLL);
    v186 = v150;
    v185 = v149;
    v150 = 0;
    llvm::APInt::sdiv((llvm::APInt *)&__dst, &v185, (llvm::APInt *)&v153);
    llvm::APInt::operator+=((uint64_t)&v153, 1uLL);
    v88 = v154;
    v154 = 0;
    v158 = v156;
    v157 = v155;
    v156 = 0;
    v160 = v88;
    v159 = v153;
    llvm::ConstantRange::unionWith((uint64_t)&v193, (unsigned int *)&v157, 0, (uint64_t)&v189);
    if (v194 >= 0x41 && v193)
      MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
    v193 = (uint64_t)v189;
    v194 = v190;
    v190 = 0;
    if (v196 >= 0x41 && v195)
    {
      MEMORY[0x1CAA32F9C](v195, 0x1000C8000313F17);
      v195 = v191;
      v196 = v192;
      v192 = 0;
      if (v190 >= 0x41 && v189)
        MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
    }
    else
    {
      v195 = v191;
      v196 = v192;
      v192 = 0;
    }
    if (v160 >= 0x41 && v159)
      MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
    if (v158 >= 0x41 && v157)
      MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
    if (v154 >= 0x41 && v153)
      MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
    if (v186 >= 0x41 && v185)
      MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
    if (v150 >= 0x41 && v149)
      MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
    if (v200 >= 0x41 && __dst)
      MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
    if (v152 >= 0x41 && v151)
      MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
    if (v156 >= 0x41 && v155)
      MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
  }
LABEL_297:
  result = llvm::ConstantRange::unionWith((uint64_t)&v193, (unsigned int *)&v211, 2, a3);
  v90 = *((unsigned int *)this + 2);
  if (v90 > 0x40)
  {
    v135 = (char *)*this;
    v92 = (char *)this[2];
    result = memcmp(*this, v92, ((unint64_t)(v90 + 63) >> 3) & 0x3FFFFFF8);
    if ((_DWORD)result)
    {
      v136 = 8 * ((unint64_t)(v90 + 63) >> 6);
      v137 = v135 - 8;
      v138 = v136;
      while (v138)
      {
        v139 = *(_QWORD *)&v137[v138];
        v140 = *(_QWORD *)&v92[v138 - 8];
        v138 -= 8;
        if (v139 != v140)
        {
          v141 = v139 > v140;
          goto LABEL_444;
        }
      }
      v141 = 0;
LABEL_444:
      v93 = v243;
      while (v136)
      {
        v142 = *(_QWORD *)&v137[v136];
        v143 = *(_QWORD *)&v243[v136 - 8];
        v136 -= 8;
        if (v142 != v143)
        {
          v94 = v142 <= v143;
          if (!v141)
            goto LABEL_300;
          goto LABEL_448;
        }
      }
      if (!v141)
        goto LABEL_301;
    }
    else
    {
      result = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)this);
      if ((_DWORD)result != (_DWORD)v90)
        goto LABEL_315;
    }
  }
  else
  {
    v91 = (unint64_t)*this;
    v92 = (char *)this[2];
    if (*this == v92)
    {
      if ((_DWORD)v90 && v91 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v90)
        goto LABEL_315;
    }
    else
    {
      v93 = v243;
      v94 = v91 <= (unint64_t)v243;
      if (v91 > (unint64_t)v92)
      {
LABEL_448:
        if (v94)
          goto LABEL_303;
        if (v244 > 0x40)
        {
          v144 = (((unint64_t)v244 + 63) >> 3) & 0x3FFFFFF8;
          v145 = v93 - 8;
          while (v144)
          {
            v146 = *(_QWORD *)&v145[v144];
            v147 = *(_QWORD *)&v92[v144 - 8];
            v144 -= 8;
            v129 = v146 > v147;
            if (v146 != v147)
            {
LABEL_413:
              if (v129)
                goto LABEL_315;
              goto LABEL_303;
            }
          }
          goto LABEL_315;
        }
      }
      else
      {
LABEL_300:
        if (!v94)
          goto LABEL_315;
LABEL_301:
        if (v244 > 0x40)
        {
          v125 = (((unint64_t)v244 + 63) >> 3) & 0x3FFFFFF8;
          v126 = v93 - 8;
          while (v125)
          {
            v127 = *(_QWORD *)&v126[v125];
            v128 = *(_QWORD *)&v92[v125 - 8];
            v125 -= 8;
            v129 = v127 > v128;
            if (v127 != v128)
              goto LABEL_413;
          }
          goto LABEL_315;
        }
      }
      if (v93 >= v92)
        goto LABEL_315;
    }
  }
LABEL_303:
  v95 = v220;
  if (v220 >= 0x41)
  {
    v120 = __s1;
    result = memcmp(__s1, __src, (((unint64_t)v220 + 63) >> 3) & 0x3FFFFFF8);
    if ((_DWORD)result)
      goto LABEL_307;
    v121 = 0;
    v122 = (unint64_t)(v95 + 63) >> 6;
    do
    {
      v129 = v122-- < 1;
      if (v129)
        break;
      v123 = v120[v122];
      v121 += __clz(v123);
    }
    while (!v123);
    v124 = v95 | 0xFFFFFFC0;
    if ((v95 & 0x3F) == 0)
      v124 = 0;
    if (v121 + v124 != (_DWORD)v95)
      goto LABEL_307;
  }
  else if ((unint64_t)__src | (unint64_t)__s1)
  {
    goto LABEL_307;
  }
  v96 = v216;
  if (v216 < 0x41)
  {
    if (!((unint64_t)v217 | (unint64_t)v215))
      goto LABEL_315;
    goto LABEL_307;
  }
  v130 = v215;
  result = memcmp(v215, v217, (((unint64_t)v216 + 63) >> 3) & 0x3FFFFFF8);
  if ((_DWORD)result)
    goto LABEL_307;
  v131 = 0;
  v132 = (unint64_t)(v96 + 63) >> 6;
  do
  {
    v129 = v132-- < 1;
    if (v129)
      break;
    v133 = v130[v132];
    v131 += __clz(v133);
  }
  while (!v133);
  v134 = v96 | 0xFFFFFFC0;
  if ((v96 & 0x3F) == 0)
    v134 = 0;
  if (v131 + v134 != (_DWORD)v96)
  {
LABEL_307:
    v97 = v244;
    if (v244 > 0x40)
    {
      v98 = (((unint64_t)v244 + 63) >> 3) & 0x3FFFFFF8;
      v99 = (void *)operator new[]();
      memcpy(v99, v243, v98);
      v158 = v97;
      v157 = v99;
      v190 = v97;
      v189 = (void *)operator new[]();
      memcpy(v189, v157, (((unint64_t)v190 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v158 = v244;
      v157 = v243;
      v190 = v244;
      v189 = v243;
    }
    llvm::APInt::operator+=((uint64_t)&v189, 1uLL);
    v160 = v190;
    v159 = (uint64_t)v189;
    result = llvm::ConstantRange::unionWith(a3, (unsigned int *)&v157, 0, (uint64_t)&v189);
    if (*(_DWORD *)(a3 + 8) >= 0x41u)
    {
      result = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    *(_QWORD *)a3 = v189;
    *(_DWORD *)(a3 + 8) = v190;
    v190 = 0;
    if (*(_DWORD *)(a3 + 24) >= 0x41u && (result = *(_QWORD *)(a3 + 16)) != 0)
    {
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      v148 = v190;
      *(_QWORD *)(a3 + 16) = v191;
      *(_DWORD *)(a3 + 24) = v192;
      v192 = 0;
      if (v148 >= 0x41)
      {
        result = (uint64_t)v189;
        if (v189)
          result = MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_QWORD *)(a3 + 16) = v191;
      *(_DWORD *)(a3 + 24) = v192;
      v192 = 0;
    }
    if (v160 >= 0x41)
    {
      result = v159;
      if (v159)
        result = MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
    }
    if (v158 >= 0x41)
    {
      result = (uint64_t)v157;
      if (v157)
        result = MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
    }
  }
LABEL_315:
  if (v196 >= 0x41)
  {
    result = v195;
    if (v195)
      result = MEMORY[0x1CAA32F9C](v195, 0x1000C8000313F17);
  }
  if (v194 >= 0x41)
  {
    result = v193;
    if (v193)
      result = MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
  }
  if (v214 >= 0x41)
  {
    result = v213;
    if (v213)
      result = MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
  }
  if (v212 >= 0x41)
  {
    result = v211;
    if (v211)
      result = MEMORY[0x1CAA32F9C](v211, 0x1000C8000313F17);
  }
  if (v218 >= 0x41)
  {
    result = (uint64_t)v217;
    if (v217)
      result = MEMORY[0x1CAA32F9C](v217, 0x1000C8000313F17);
  }
  if (v216 >= 0x41)
  {
    result = (uint64_t)v215;
    if (v215)
      result = MEMORY[0x1CAA32F9C](v215, 0x1000C8000313F17);
  }
  if (v222 >= 0x41)
  {
    result = (uint64_t)__src;
    if (__src)
      result = MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  if (v220 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      result = MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  if (v226 >= 0x41)
  {
    result = v225;
    if (v225)
      result = MEMORY[0x1CAA32F9C](v225, 0x1000C8000313F17);
  }
  if (v224 >= 0x41)
  {
    result = v223;
    if (v223)
      result = MEMORY[0x1CAA32F9C](v223, 0x1000C8000313F17);
  }
  if (v230 >= 0x41)
  {
    result = v229;
    if (v229)
      result = MEMORY[0x1CAA32F9C](v229, 0x1000C8000313F17);
  }
  if (v228 >= 0x41)
  {
    result = v227;
    if (v227)
      result = MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
  }
  if (v234 >= 0x41)
  {
    result = v233;
    if (v233)
      result = MEMORY[0x1CAA32F9C](v233, 0x1000C8000313F17);
  }
  if (v232 >= 0x41)
  {
    result = v231;
    if (v231)
      result = MEMORY[0x1CAA32F9C](v231, 0x1000C8000313F17);
  }
  if (v240 >= 0x41)
  {
    result = v239;
    if (v239)
      result = MEMORY[0x1CAA32F9C](v239, 0x1000C8000313F17);
  }
  if (v238 >= 0x41)
  {
    result = v237;
    if (v237)
      result = MEMORY[0x1CAA32F9C](v237, 0x1000C8000313F17);
  }
  if (v242 >= 0x41)
  {
    result = (uint64_t)v241;
    if (v241)
      result = MEMORY[0x1CAA32F9C](v241, 0x1000C8000313F17);
  }
  if (v244 >= 0x41)
  {
    result = (uint64_t)v243;
    if (v243)
      return MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::urem(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int v25;
  int64_t v26;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  void *v32;
  unint64_t v33;
  int v34;
  unsigned int v36;
  const void *v37;
  unsigned int v38;
  void *v39;
  unsigned int v40;
  BOOL v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  size_t v45;
  void *v46;
  const void *v47;
  unsigned int v48;
  void *v49;
  unsigned int v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  unsigned int v61;
  void *v62;
  size_t v63;
  size_t v64;
  void *__s1;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  void *__s2;
  unsigned int v76;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      goto LABEL_41;
    }
  }
  else if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
  {
    goto LABEL_41;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
LABEL_41:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    goto LABEL_41;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&__s2);
  v8 = v76;
  if (v76 <= 0x40)
  {
    if (__s2)
      goto LABEL_7;
    goto LABEL_40;
  }
  v25 = 0;
  v26 = ((unint64_t)v76 + 63) >> 6;
  do
  {
    if (v26-- < 1)
      break;
    v28 = *((_QWORD *)__s2 + v26);
    v25 += __clz(v28);
  }
  while (!v28);
  v29 = v76 | 0xFFFFFFC0;
  if ((v76 & 0x3F) == 0)
    v29 = 0;
  v30 = v25 + v29;
  if (__s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v30 == v8)
  {
LABEL_40:
    LODWORD(v6) = *((_DWORD *)this + 2);
    goto LABEL_41;
  }
LABEL_7:
  v9 = *((unsigned int *)a2 + 2);
  v76 = v9;
  if (v9 > 0x40)
  {
    v63 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
    v10 = (void *)operator new[]();
    memcpy(v10, *(const void **)a2, v63);
  }
  else
  {
    v10 = *(void **)a2;
  }
  __s2 = v10;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v11 = v76;
  v12 = __s2;
  v76 = 0;
  v13 = *((unsigned int *)a2 + 6);
  if (v13 > 0x40)
    v14 = memcmp(*((const void **)a2 + 2), __s2, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v14 = *((_QWORD *)a2 + 2) == (_QWORD)__s2;
  v15 = v14;
  if (v11 >= 0x41)
  {
    if (v12)
    {
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      if (v76 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (!v15)
    goto LABEL_42;
  v16 = *((_DWORD *)a2 + 2);
  if (v16 <= 0x40)
  {
    if (*(_QWORD *)a2)
      goto LABEL_18;
LABEL_64:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 0);
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(a2) == v16)
    goto LABEL_64;
LABEL_18:
  v76 = *((_DWORD *)this + 2);
  if (v76 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *(const void **)this, (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *(void **)this;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v17 = v76;
  v18 = __s2;
  v76 = 0;
  v19 = *((unsigned int *)this + 6);
  if (v19 > 0x40)
    v20 = memcmp(*((const void **)this + 2), __s2, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v20 = *((_QWORD *)this + 2) == (_QWORD)__s2;
  v21 = v20;
  if (v17 >= 0x41)
  {
    if (v18)
    {
      MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
      if (v76 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v21)
  {
    llvm::APInt::urem(this, a2, (llvm::APInt *)&v73);
    v22 = v74;
    *(_DWORD *)(a3 + 8) = v74;
    v23 = v73;
    *(_QWORD *)a3 = v73;
    v74 = 0;
    v76 = v22;
    if (v22 > 0x40)
    {
      v64 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)a3, v64);
    }
    else
    {
      __s2 = v23;
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    *(_DWORD *)(a3 + 24) = v76;
    *(_QWORD *)(a3 + 16) = __s2;
    if (v74 < 0x41)
      return;
    v24 = v73;
    if (!v73)
      return;
LABEL_116:
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    return;
  }
LABEL_42:
  llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&__s2);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v71);
  v31 = v76;
  if (v76 > 0x40)
  {
    v32 = __s2;
    v33 = v71;
    v53 = (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v53)
      {
        v34 = 0;
        goto LABEL_46;
      }
      v54 = *(_QWORD *)((char *)__s2 + v53 - 8);
      v55 = *(_QWORD *)(v71 + v53 - 8);
      v53 -= 8;
    }
    while (v54 == v55);
    if (v54 > v55)
      v34 = 1;
    else
      v34 = -1;
  }
  else
  {
    v32 = __s2;
    v33 = v71;
    if ((unint64_t)__s2 < v71)
      v34 = -1;
    else
      v34 = (unint64_t)__s2 > v71;
  }
LABEL_46:
  if (v72 >= 0x41 && v33 != 0)
    MEMORY[0x1CAA32F9C]();
  if (v31 >= 0x41 && v32)
    MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  if ((v34 & 0x80000000) == 0)
  {
    llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&__s2);
    llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v67);
    llvm::APInt::operator-=((uint64_t)&v67, 1uLL);
    v36 = v68;
    v37 = (const void *)v67;
    v68 = 0;
    v38 = v76;
    if (v76 > 0x40)
    {
      v39 = __s2;
      v56 = (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v56)
        {
          v41 = 0;
          v40 = v36;
          goto LABEL_58;
        }
        v57 = *(_QWORD *)((char *)__s2 + v56 - 8);
        v58 = *(_QWORD *)(v67 - 8 + v56);
        v56 -= 8;
      }
      while (v57 == v58);
      v41 = v57 <= v58;
      v40 = v36;
      if (v57 <= v58)
        goto LABEL_57;
    }
    else
    {
      v39 = __s2;
      v40 = v36;
      v41 = (unint64_t)__s2 < v67;
      if ((unint64_t)__s2 < v67)
LABEL_57:
        v40 = v76;
    }
LABEL_58:
    v70 = v40;
    if (v40 > 0x40)
    {
      v45 = (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8;
      v46 = (void *)operator new[]();
      v69 = v46;
      if (v41)
        v47 = v39;
      else
        v47 = v37;
      memcpy(v46, v47, v45);
    }
    else
    {
      if (v41)
        v42 = v39;
      else
        v42 = (void *)v67;
      v69 = v42;
    }
    llvm::APInt::operator+=((uint64_t)&v69, 1uLL);
    v48 = v70;
    v49 = v69;
    v70 = 0;
    if (v36 >= 0x41 && v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    if (v68 >= 0x41 && v67)
      MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
    if (v38 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    sub_1C4832EA4((llvm::APInt *)&__s1, *((_DWORD *)this + 2), 0, 0);
    v50 = v66;
    if (v66 > 0x40)
    {
      v51 = __s1;
      if (!memcmp(__s1, v49, (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a3 + 8) = v50;
        llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
        v61 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 24) = v61;
        if (v61 > 0x40)
        {
          v62 = (void *)operator new[]();
          *(_QWORD *)(a3 + 16) = v62;
          memcpy(v62, *(const void **)a3, (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_88;
        }
        v52 = *(_QWORD *)a3;
LABEL_87:
        *(_QWORD *)(a3 + 16) = v52;
LABEL_88:
        if (v48 >= 0x41 && v49)
          MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
LABEL_114:
        if (v66 < 0x41)
          return;
        v24 = __s1;
        if (!__s1)
          return;
        goto LABEL_116;
      }
    }
    else
    {
      v51 = __s1;
      if (__s1 == v49)
      {
        *(_DWORD *)(a3 + 8) = v66;
        if (v50)
          v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
        else
          v52 = 0;
        *(_QWORD *)a3 = v52;
        *(_DWORD *)(a3 + 24) = v50;
        goto LABEL_87;
      }
    }
    v66 = 0;
    *(_DWORD *)(a3 + 8) = v50;
    *(_QWORD *)a3 = v51;
    *(_DWORD *)(a3 + 24) = v48;
    *(_QWORD *)(a3 + 16) = v49;
    goto LABEL_114;
  }
  v43 = *((_DWORD *)this + 2);
  *(_DWORD *)(a3 + 8) = v43;
  if (v43 > 0x40)
  {
    v59 = (void *)operator new[]();
    *(_QWORD *)a3 = v59;
    memcpy(v59, *(const void **)this, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)this;
  }
  v44 = *((_DWORD *)this + 6);
  *(_DWORD *)(a3 + 24) = v44;
  if (v44 > 0x40)
  {
    v60 = (void *)operator new[]();
    *(_QWORD *)(a3 + 16) = v60;
    memcpy(v60, *((const void **)this + 2), (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a3 + 16) = *((_QWORD *)this + 2);
  }
}

llvm::ConstantRange *llvm::ConstantRange::srem@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  void *v21;
  llvm::ConstantRange *result;
  unsigned int v23;
  const void *v24;
  uint64_t v25;
  int v26;
  int64_t v27;
  BOOL v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  int64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  const void *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  const void *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  const void *v60;
  unsigned int v61;
  char *v62;
  char *v63;
  unsigned int v64;
  BOOL v65;
  size_t v66;
  char *v67;
  const void *v68;
  unsigned int v69;
  char *v70;
  unsigned int v71;
  char *v72;
  char *v73;
  unsigned int v74;
  BOOL v75;
  size_t v76;
  char *v77;
  const void *v78;
  unsigned int v79;
  char *v80;
  void *v81;
  const void *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  void *v102;
  size_t v103;
  char *v104;
  unsigned int v105;
  char *v106;
  unsigned int v107;
  unint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unsigned int v117;
  char *v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  char *v122;
  unsigned int v123;
  char *v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int v129;
  const void *v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  void *v134;
  unsigned int v135;
  llvm::ConstantRange *v136;
  unsigned int v137;
  void *v138;
  unsigned int v139;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    v8 = *(void **)a2;
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
    {
      v135 = *((_DWORD *)a2 + 2);
      v134 = v8;
      goto LABEL_6;
    }
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v135 = v7;
  v134 = (void *)operator new[]();
  memcpy(v134, *(const void **)a2, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
LABEL_6:
  llvm::APInt::operator+=((uint64_t)&v134, 1uLL);
  v9 = v135;
  v10 = v134;
  v135 = 0;
  v11 = *((unsigned int *)a2 + 6);
  if (v11 > 0x40)
    v12 = memcmp(*((const void **)a2 + 2), v134, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v12 = *((_QWORD *)a2 + 2) == (_QWORD)v134;
  v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      if (v135 >= 0x41)
      {
        if (v134)
          MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
      }
    }
  }
  if (!v13)
  {
LABEL_29:
    llvm::ConstantRange::abs(a2, 0, (uint64_t)&v134);
    llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&v134, (llvm::APInt *)&v132);
    llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v134, (llvm::APInt *)&v130);
    v23 = v131;
    if (v131 > 0x40)
    {
      v26 = 0;
      v27 = ((unint64_t)v131 + 63) >> 6;
      v24 = v130;
      do
      {
        v28 = v27-- < 1;
        if (v28)
          break;
        v29 = *((_QWORD *)v130 + v27);
        v26 += __clz(v29);
      }
      while (!v29);
      v30 = v131 | 0xFFFFFFC0;
      if ((v131 & 0x3F) == 0)
        v30 = 0;
      v25 = (uint64_t)v130;
      if (v26 + v30 != v131)
      {
LABEL_31:
        if (v133 > 0x40)
        {
          v31 = 0;
          v32 = ((unint64_t)v133 + 63) >> 6;
          do
          {
            v28 = v32-- < 1;
            if (v28)
              break;
            v33 = *(_QWORD *)(v132 + 8 * v32);
            v31 += __clz(v33);
          }
          while (!v33);
          v34 = v133 | 0xFFFFFFC0;
          if ((v133 & 0x3F) == 0)
            v34 = 0;
          if (v31 + v34 != v133)
          {
LABEL_50:
            llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v128);
            result = (llvm::ConstantRange *)llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v126);
            if (v129 >= 0x41)
              v35 = (unint64_t *)(v128 + 8 * ((v129 - 1) >> 6));
            else
              v35 = &v128;
            if (((*v35 >> (v129 - 1)) & 1) != 0)
            {
              if (v127 >= 0x41)
                v36 = (unint64_t *)(v126 + 8 * ((v127 - 1) >> 6));
              else
                v36 = &v126;
              if (((*v36 >> (v127 - 1)) & 1) == 0)
              {
                v109 = v23;
                v37 = v25;
                v38 = v23;
                if (v23 >= 0x41
                  && (v37 = operator new[](),
                      v108 = v37,
                      v38 = v109,
                      memcpy((void *)v37, v24, (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8),
                      v109 > 0x40))
                {
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v108);
                }
                else
                {
                  if (v38)
                    v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
                  else
                    v39 = 0;
                  v108 = v39 & ~v37;
                }
                llvm::APInt::operator++((uint64_t)&v108);
                v111 = v109;
                v110 = v108;
                v109 = 0;
                llvm::APInt::operator+=((uint64_t)&v110, 1uLL);
                v40 = v111;
                v41 = (const void *)v110;
                v111 = 0;
                if (v129 > 0x40)
                {
                  v42 = v128;
                  v89 = (((unint64_t)v129 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v89)
                    {
                      v43 = 0;
                      goto LABEL_73;
                    }
                    v90 = *(_QWORD *)(v128 - 8 + v89);
                    v91 = *(_QWORD *)(v110 - 8 + v89);
                    v89 -= 8;
                  }
                  while (v90 == v91);
                  if (v90 > v91)
                    v43 = 1;
                  else
                    v43 = -1;
                }
                else
                {
                  v42 = v128;
                  if (v128 < v110)
                    v43 = -1;
                  else
                    v43 = v128 > v110;
                }
LABEL_73:
                if (v43 <= 0)
                  v44 = v40;
                else
                  v44 = v129;
                if (v44 > 0x40)
                {
                  v59 = (void *)operator new[]();
                  v45 = (unint64_t)v59;
                  if (v43 <= 0)
                    v60 = v41;
                  else
                    v60 = (const void *)v128;
                  memcpy(v59, v60, ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8);
                }
                else if (v43 <= 0)
                {
                  v45 = v110;
                }
                else
                {
                  v45 = v42;
                }
                if (v40 >= 0x41 && v41)
                  MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
                if (v111 >= 0x41 && v110)
                  MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
                if (v109 >= 0x41 && v108)
                  MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
                v105 = v23;
                if (v23 > 0x40)
                {
                  v104 = (char *)operator new[]();
                  memcpy(v104, v24, (((unint64_t)v105 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v104 = (char *)v25;
                }
                llvm::APInt::operator-=((uint64_t)&v104, 1uLL);
                v61 = v105;
                v62 = v104;
                v105 = 0;
                if (v127 > 0x40)
                {
                  v63 = (char *)v126;
                  v92 = (((unint64_t)v127 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v92)
                    {
                      v65 = 0;
                      v64 = v61;
                      goto LABEL_133;
                    }
                    v93 = *(_QWORD *)(v126 - 8 + v92);
                    v94 = *(_QWORD *)&v104[v92 - 8];
                    v92 -= 8;
                  }
                  while (v93 == v94);
                  v65 = v93 <= v94;
                  v64 = v61;
                  if (v93 <= v94)
                    goto LABEL_132;
                }
                else
                {
                  v63 = (char *)v126;
                  v64 = v61;
                  v65 = v126 < (unint64_t)v104;
                  if (v126 < (unint64_t)v104)
LABEL_132:
                    v64 = v127;
                }
LABEL_133:
                v107 = v64;
                if (v64 > 0x40)
                {
                  v66 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
                  v67 = (char *)operator new[]();
                  v106 = v67;
                  if (v65)
                    v68 = (const void *)v126;
                  else
                    v68 = v62;
                  memcpy(v67, v68, v66);
                }
                else
                {
                  if (!v65)
                    v63 = v104;
                  v106 = v63;
                }
                result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&v106, 1uLL);
                v69 = v107;
                v70 = v106;
                v107 = 0;
                if (v61 >= 0x41 && v62)
                  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
                if (v105 >= 0x41)
                {
                  result = (llvm::ConstantRange *)v104;
                  if (v104)
                    result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
                }
                *(_DWORD *)(a3 + 8) = v44;
                *(_QWORD *)a3 = v45;
                *(_DWORD *)(a3 + 24) = v69;
                *(_QWORD *)(a3 + 16) = v70;
                goto LABEL_181;
              }
              v119 = v133;
              if (v133 > 0x40)
              {
                v118 = (char *)operator new[]();
                memcpy(v118, (const void *)v132, (((unint64_t)v119 + 63) >> 3) & 0x3FFFFFF8);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v118);
              }
              else
              {
                v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v133;
                if (!v133)
                  v46 = 0;
                v118 = (char *)(v46 & ~v132);
              }
              llvm::APInt::operator++((uint64_t)&v118);
              v47 = v119;
              result = (llvm::ConstantRange *)v118;
              v119 = 0;
              if (v129 > 0x40)
              {
                v83 = (((unint64_t)v129 + 63) >> 3) & 0x3FFFFFF8;
                do
                {
                  if (!v83)
                  {
                    v48 = 0;
                    goto LABEL_88;
                  }
                  v84 = *(_QWORD *)(v128 - 8 + v83);
                  v85 = *(_QWORD *)&v118[v83 - 8];
                  v83 -= 8;
                }
                while (v84 == v85);
                if (v84 > v85)
                  v48 = 1;
                else
                  v48 = -1;
              }
              else if (v128 < (unint64_t)v118)
              {
                v48 = -1;
              }
              else
              {
                v48 = v128 > (unint64_t)v118;
              }
LABEL_88:
              if (v47 >= 0x41)
              {
                if (v118)
                {
                  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
                  if (v119 >= 0x41)
                  {
                    result = (llvm::ConstantRange *)v118;
                    if (v118)
                      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
                  }
                }
              }
              if (v48 < 1)
              {
                v115 = v23;
                v51 = v23;
                if (v23 >= 0x41
                  && (v25 = operator new[](),
                      v114 = v25,
                      v51 = v115,
                      memcpy((void *)v25, v24, (((unint64_t)v115 + 63) >> 3) & 0x3FFFFFF8),
                      v115 > 0x40))
                {
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v114);
                }
                else
                {
                  v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
                  if (!v51)
                    v52 = 0;
                  v114 = v52 & ~v25;
                }
                llvm::APInt::operator++((uint64_t)&v114);
                v117 = v115;
                v116 = v114;
                v115 = 0;
                llvm::APInt::operator+=((uint64_t)&v116, 1uLL);
                v53 = v117;
                v54 = (const void *)v116;
                v117 = 0;
                if (v129 > 0x40)
                {
                  v55 = v128;
                  v98 = (((unint64_t)v129 + 63) >> 3) & 0x3FFFFFF8;
                  do
                  {
                    if (!v98)
                    {
                      v56 = 0;
                      goto LABEL_107;
                    }
                    v99 = *(_QWORD *)(v128 - 8 + v98);
                    v100 = *(_QWORD *)(v116 - 8 + v98);
                    v98 -= 8;
                  }
                  while (v99 == v100);
                  if (v99 > v100)
                    v56 = 1;
                  else
                    v56 = -1;
                }
                else
                {
                  v55 = v128;
                  if (v128 < v116)
                    v56 = -1;
                  else
                    v56 = v128 > v116;
                }
LABEL_107:
                if (v56 <= 0)
                  v57 = v53;
                else
                  v57 = v129;
                if (v57 > 0x40)
                {
                  v81 = (void *)operator new[]();
                  v58 = (unint64_t)v81;
                  if (v56 <= 0)
                    v82 = v54;
                  else
                    v82 = (const void *)v128;
                  memcpy(v81, v82, ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8);
                }
                else if (v56 <= 0)
                {
                  v58 = v116;
                }
                else
                {
                  v58 = v55;
                }
                if (v53 >= 0x41 && v54)
                  MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
                if (v117 >= 0x41 && v116)
                  MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
                if (v115 >= 0x41 && v114)
                  MEMORY[0x1CAA32F9C](v114, 0x1000C8000313F17);
                result = sub_1C4832EA4((llvm::APInt *)&v112, *((_DWORD *)this + 2), 1, 0);
                *(_DWORD *)(a3 + 8) = v57;
                *(_QWORD *)a3 = v58;
                *(_DWORD *)(a3 + 24) = v113;
                *(_QWORD *)(a3 + 16) = v112;
                v113 = 0;
                goto LABEL_181;
              }
LABEL_94:
              v49 = *((_DWORD *)this + 2);
              *(_DWORD *)(a3 + 8) = v49;
              if (v49 > 0x40)
              {
                v101 = (void *)operator new[]();
                *(_QWORD *)a3 = v101;
                result = (llvm::ConstantRange *)memcpy(v101, *(const void **)this, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                *(_QWORD *)a3 = *(_QWORD *)this;
              }
              v50 = *((_DWORD *)this + 6);
              *(_DWORD *)(a3 + 24) = v50;
              if (v50 > 0x40)
              {
                v102 = (void *)operator new[]();
                *(_QWORD *)(a3 + 16) = v102;
                result = (llvm::ConstantRange *)memcpy(v102, *((const void **)this + 2), (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                *(_QWORD *)(a3 + 16) = *((_QWORD *)this + 2);
              }
LABEL_181:
              if (v127 >= 0x41)
              {
                result = (llvm::ConstantRange *)v126;
                if (v126)
                  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
              }
              if (v129 >= 0x41)
              {
                result = (llvm::ConstantRange *)v128;
                if (v128)
                  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
              }
LABEL_187:
              if (v23 >= 0x41 && v24)
                result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
              if (v133 >= 0x41)
              {
                result = (llvm::ConstantRange *)v132;
                if (v132)
                  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
              }
              if (v137 >= 0x41)
              {
                result = v136;
                if (v136)
                  result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v136, 0x1000C8000313F17);
              }
              if (v135 >= 0x41)
              {
                result = (llvm::ConstantRange *)v134;
                if (v134)
                  return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
              }
              return result;
            }
            if (v127 > 0x40)
            {
              v86 = (((unint64_t)v127 + 63) >> 3) & 0x3FFFFFF8;
              while (v86)
              {
                v87 = *(_QWORD *)(v126 - 8 + v86);
                v88 = *(_QWORD *)(v132 - 8 + v86);
                v86 -= 8;
                if (v87 != v88)
                {
                  if (v87 <= v88)
                    goto LABEL_94;
                  break;
                }
              }
            }
            else if (v126 < v132)
            {
              goto LABEL_94;
            }
            v123 = v23;
            if (v23 > 0x40)
            {
              v122 = (char *)operator new[]();
              memcpy(v122, v24, (((unint64_t)v123 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v122 = (char *)v25;
            }
            llvm::APInt::operator-=((uint64_t)&v122, 1uLL);
            v71 = v123;
            v72 = v122;
            v123 = 0;
            if (v127 > 0x40)
            {
              v73 = (char *)v126;
              v95 = (((unint64_t)v127 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v95)
                {
                  v75 = 0;
                  v74 = v71;
                  goto LABEL_152;
                }
                v96 = *(_QWORD *)(v126 - 8 + v95);
                v97 = *(_QWORD *)&v122[v95 - 8];
                v95 -= 8;
              }
              while (v96 == v97);
              v75 = v96 <= v97;
              v74 = v71;
              if (v96 <= v97)
                goto LABEL_151;
            }
            else
            {
              v73 = (char *)v126;
              v74 = v71;
              v75 = v126 < (unint64_t)v122;
              if (v126 < (unint64_t)v122)
LABEL_151:
                v74 = v127;
            }
LABEL_152:
            v125 = v74;
            if (v74 > 0x40)
            {
              v76 = (((unint64_t)v74 + 63) >> 3) & 0x3FFFFFF8;
              v77 = (char *)operator new[]();
              v124 = v77;
              if (v75)
                v78 = (const void *)v126;
              else
                v78 = v72;
              memcpy(v77, v78, v76);
            }
            else
            {
              if (!v75)
                v73 = v122;
              v124 = v73;
            }
            llvm::APInt::operator+=((uint64_t)&v124, 1uLL);
            v79 = v125;
            v80 = v124;
            v125 = 0;
            if (v71 >= 0x41 && v72)
              MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
            if (v123 >= 0x41 && v122)
              MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
            result = sub_1C4832EA4((llvm::APInt *)&v120, *((_DWORD *)this + 2), 0, 0);
            *(_DWORD *)(a3 + 8) = v121;
            *(_QWORD *)a3 = v120;
            v121 = 0;
            *(_DWORD *)(a3 + 24) = v79;
            *(_QWORD *)(a3 + 16) = v80;
            goto LABEL_181;
          }
        }
        else if (v132)
        {
          goto LABEL_50;
        }
        llvm::APInt::operator++((uint64_t)&v132);
        goto LABEL_50;
      }
    }
    else
    {
      v24 = v130;
      v25 = (uint64_t)v130;
      if (v130)
        goto LABEL_31;
    }
    result = llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 0);
    goto LABEL_187;
  }
  v14 = *((_DWORD *)a2 + 2);
  if (v14 <= 0x40)
  {
    if (*(_QWORD *)a2)
      goto LABEL_15;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 0);
  }
  if (llvm::APInt::countLeadingZerosSlowCase(a2) == v14)
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 0);
LABEL_15:
  v135 = *((_DWORD *)this + 2);
  if (v135 > 0x40)
  {
    v134 = (void *)operator new[]();
    memcpy(v134, *(const void **)this, (((unint64_t)v135 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v134 = *(void **)this;
  }
  llvm::APInt::operator+=((uint64_t)&v134, 1uLL);
  v15 = v135;
  v16 = v134;
  v135 = 0;
  v17 = *((unsigned int *)this + 6);
  if (v17 > 0x40)
    v18 = memcmp(*((const void **)this + 2), v134, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v18 = *((_QWORD *)this + 2) == (_QWORD)v134;
  v19 = v18;
  if (v15 >= 0x41)
  {
    if (v16)
    {
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      if (v135 >= 0x41)
      {
        if (v134)
          MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
      }
    }
  }
  if (!v19)
    goto LABEL_29;
  llvm::APInt::srem(this, (const void **)a2, (llvm::APInt *)&v138);
  v20 = v139;
  *(_DWORD *)(a3 + 8) = v139;
  v21 = v138;
  *(_QWORD *)a3 = v138;
  v139 = 0;
  v135 = v20;
  if (v20 > 0x40)
  {
    v103 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
    v134 = (void *)operator new[]();
    memcpy(v134, *(const void **)a3, v103);
  }
  else
  {
    v134 = v21;
  }
  result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&v134, 1uLL);
  *(_DWORD *)(a3 + 24) = v135;
  *(_QWORD *)(a3 + 16) = v134;
  if (v139 >= 0x41)
  {
    result = (llvm::ConstantRange *)v138;
    if (v138)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::shl(llvm::ConstantRange *this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  const void **v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t ***v26;
  int v27;
  int64_t v28;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  unsigned int v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  const void **v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  size_t v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  void *v60;
  unint64_t v61;
  unsigned int v62;
  void *v63;
  uint64_t **v64;
  unsigned int v65;
  void *v66;
  unsigned int v67;
  void *v68;
  void *__s2;
  unsigned int v70;
  uint64_t **v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  void *__s1;
  unsigned int v76;
  void *v77;
  unsigned int v78;
  void *v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t **v85;
  unsigned int v86;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      goto LABEL_95;
    }
  }
  else if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
  {
    goto LABEL_95;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v7)
    {
      goto LABEL_5;
    }
LABEL_95:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    goto LABEL_95;
LABEL_5:
  llvm::ConstantRange::getUnsignedMin(this, (llvm::APInt *)&v83);
  llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v81);
  v86 = *((_DWORD *)a2 + 2);
  if (v86 > 0x40)
  {
    v85 = (uint64_t **)operator new[]();
    memcpy(v85, *a2, (((unint64_t)v86 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v85 = (uint64_t **)*a2;
  }
  llvm::APInt::operator+=((uint64_t)&v85, 1uLL);
  v8 = v86;
  v9 = v85;
  v86 = 0;
  v10 = *((unsigned int *)a2 + 6);
  if (v10 > 0x40)
    v11 = memcmp(a2[2], v85, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v11 = a2[2] == v85;
  v12 = v11;
  if (v8 >= 0x41)
  {
    if (v9)
    {
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
      if (v86 >= 0x41)
      {
        if (v85)
          MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
      }
    }
  }
  if (!v12)
  {
    llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v85);
    v19 = v82;
    if (v82 > 0x40)
    {
      v21 = 0;
      v22 = ((unint64_t)v82 + 63) >> 6;
      do
      {
        v23 = v22-- < 1;
        if (v23)
          break;
        v24 = *(_QWORD *)(v81 + 8 * v22);
        v21 += __clz(v24);
      }
      while (!v24);
      v25 = v82 | 0xFFFFFFC0;
      if ((v82 & 0x3F) == 0)
        v25 = 0;
      v20 = v21 + v25;
    }
    else
    {
      v20 = v82 + __clz(v81) - 64;
    }
    if (v86 >= 0x41)
    {
      v27 = 0;
      v26 = (uint64_t ***)v85;
      v28 = ((unint64_t)v86 + 63) >> 6;
      do
      {
        v23 = v28-- < 1;
        if (v23)
          break;
        v29 = v85[v28];
        v27 += __clz((unint64_t)v29);
      }
      while (!v29);
      v30 = v86 | 0xFFFFFFC0;
      if ((v86 & 0x3F) == 0)
        v30 = 0;
      if (v86 - v27 - v30 > 0x40)
        goto LABEL_38;
    }
    else
    {
      v26 = &v85;
    }
    if ((unint64_t)*v26 > v20)
    {
LABEL_38:
      llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 1);
      goto LABEL_112;
    }
    llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&v71);
    v31 = sub_1C47EE5B8(&v71, v84);
    sub_1C4888094((uint64_t)&v83, v31);
    if (v72 >= 0x41 && v71)
      MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
    v32 = sub_1C47EE5B8(&v85, v19);
    sub_1C4888094((uint64_t)&v81, v32);
    v33 = v84;
    v34 = (void *)v83;
    v84 = 0;
    v70 = v82;
    __s2 = (void *)v81;
    v82 = 0;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v35 = v70;
    v36 = __s2;
    v70 = 0;
    if (v33 > 0x40)
    {
      if (!memcmp(v34, __s2, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a3 + 8) = v33;
        llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
        v62 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 24) = v62;
        if (v62 > 0x40)
        {
          v63 = (void *)operator new[]();
          *(_QWORD *)(a3 + 16) = v63;
          memcpy(v63, *(const void **)a3, (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_48;
        }
        v37 = *(_QWORD *)a3;
LABEL_47:
        *(_QWORD *)(a3 + 16) = v37;
LABEL_48:
        if (v35 >= 0x41 && v36)
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
        goto LABEL_106;
      }
    }
    else if (v34 == __s2)
    {
      *(_DWORD *)(a3 + 8) = v33;
      if ((_DWORD)v33)
        v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
      else
        v37 = 0;
      *(_QWORD *)a3 = v37;
      *(_DWORD *)(a3 + 24) = v33;
      goto LABEL_47;
    }
    *(_DWORD *)(a3 + 8) = v33;
    *(_QWORD *)a3 = v34;
    *(_DWORD *)(a3 + 24) = v35;
    *(_QWORD *)(a3 + 16) = v36;
    LODWORD(v33) = 0;
LABEL_106:
    if (v70 >= 0x41 && __s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    if (v33 >= 0x41 && v34)
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
LABEL_112:
    if (v86 < 0x41)
      goto LABEL_134;
    v64 = v85;
    if (!v85)
      goto LABEL_134;
    goto LABEL_114;
  }
  v13 = *((unsigned int *)this + 2);
  v14 = *((_DWORD *)a2 + 2);
  v15 = a2;
  if (v14 >= 0x41)
  {
    if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) > 0x40)
    {
LABEL_22:
      llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v13, 0);
      goto LABEL_134;
    }
    v15 = (const void **)*a2;
  }
  if ((unint64_t)*v15 >= v13)
    goto LABEL_22;
  v16 = v84;
  if (v84 >= 0x41)
  {
    v38 = (char *)operator new[]();
    memcpy(v38, (const void *)v83, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
    v39 = 0;
    v17 = (char *)v81;
    v40 = (unint64_t)(v16 + 63) >> 6;
    do
    {
      *(_QWORD *)&v38[v39] ^= *(_QWORD *)&v17[v39];
      v39 += 8;
    }
    while (8 * v40 != v39);
    v41 = 0;
    do
    {
      v23 = v40-- < 1;
      if (v23)
        break;
      v42 = *(_QWORD *)&v38[8 * v40];
      v41 += __clz(v42);
    }
    while (!v42);
    v43 = v16 | 0xFFFFFFC0;
    if ((v16 & 0x3F) == 0)
      v43 = 0;
    v18 = v41 + v43;
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
    v14 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v17 = (char *)v81;
    v18 = v84 + __clz(v81 ^ v83) - 64;
  }
  v44 = a2;
  if (v14 >= 0x41)
  {
    if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) > 0x40)
      goto LABEL_63;
    v44 = (const void **)*a2;
  }
  if ((unint64_t)*v44 > v18)
  {
LABEL_63:
    sub_1C4832EA4((llvm::APInt *)&__s1, v13, 0, 0);
    if (*((_DWORD *)a2 + 2) >= 0x41u)
      v45 = (unsigned int *)*a2;
    else
      v45 = (unsigned int *)a2;
    v46 = *v45;
    sub_1C4832EA4((llvm::APInt *)&v73, v13, 0, 0);
    sub_1C4912E54(&v73, v46, v74);
    llvm::APInt::operator+=((uint64_t)&v73, 1uLL);
    v47 = v74;
    v48 = v73;
    v74 = 0;
    v49 = v76;
    if (v76 > 0x40)
    {
      v50 = __s1;
      if (!memcmp(__s1, v73, (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8))
      {
        *(_DWORD *)(a3 + 8) = v49;
        llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
        v65 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 24) = v65;
        if (v65 > 0x40)
        {
          v66 = (void *)operator new[]();
          *(_QWORD *)(a3 + 16) = v66;
          memcpy(v66, *(const void **)a3, (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_72;
        }
        v51 = *(_QWORD *)a3;
LABEL_71:
        *(_QWORD *)(a3 + 16) = v51;
LABEL_72:
        if (v47 >= 0x41 && v48)
          MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
LABEL_119:
        if (v74 >= 0x41 && v73)
          MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
        if (v76 < 0x41)
          goto LABEL_134;
        v64 = (uint64_t **)__s1;
        if (!__s1)
          goto LABEL_134;
        goto LABEL_114;
      }
    }
    else
    {
      v50 = __s1;
      if (__s1 == v73)
      {
        *(_DWORD *)(a3 + 8) = v76;
        if (v49)
          v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
        else
          v51 = 0;
        *(_QWORD *)a3 = v51;
        *(_DWORD *)(a3 + 24) = v49;
        goto LABEL_71;
      }
    }
    v76 = 0;
    *(_DWORD *)(a3 + 8) = v49;
    *(_QWORD *)a3 = v50;
    *(_DWORD *)(a3 + 24) = v47;
    *(_QWORD *)(a3 + 16) = v48;
    goto LABEL_119;
  }
  v52 = v84;
  v80 = v84;
  if (v84 > 0x40)
  {
    v79 = (void *)operator new[]();
    memcpy(v79, (const void *)v83, ((v52 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v79 = (void *)v83;
  }
  v53 = sub_1C47EE5B8((uint64_t ***)a2, v52);
  sub_1C4888094((uint64_t)&v79, v53);
  v54 = v82;
  v78 = v82;
  if (v82 > 0x40)
  {
    v55 = (((unint64_t)v82 + 63) >> 3) & 0x3FFFFFF8;
    v77 = (void *)operator new[]();
    memcpy(v77, v17, v55);
  }
  else
  {
    v77 = v17;
  }
  v56 = sub_1C47EE5B8((uint64_t ***)a2, v54);
  sub_1C4888094((uint64_t)&v77, v56);
  llvm::APInt::operator+=((uint64_t)&v77, 1uLL);
  v57 = v78;
  v58 = v77;
  v78 = 0;
  v59 = v80;
  if (v80 <= 0x40)
  {
    v60 = v79;
    if (v79 == v77)
    {
      *(_DWORD *)(a3 + 8) = v80;
      if (v59)
        v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
      else
        v61 = 0;
      *(_QWORD *)a3 = v61;
      *(_DWORD *)(a3 + 24) = v59;
      goto LABEL_86;
    }
LABEL_128:
    v80 = 0;
    *(_DWORD *)(a3 + 8) = v59;
    *(_QWORD *)a3 = v60;
    *(_DWORD *)(a3 + 24) = v57;
    *(_QWORD *)(a3 + 16) = v58;
    goto LABEL_129;
  }
  v60 = v79;
  if (memcmp(v79, v77, (((unint64_t)v80 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_128;
  *(_DWORD *)(a3 + 8) = v59;
  llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
  v67 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 24) = v67;
  if (v67 > 0x40)
  {
    v68 = (void *)operator new[]();
    *(_QWORD *)(a3 + 16) = v68;
    memcpy(v68, *(const void **)a3, (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
    goto LABEL_87;
  }
  v61 = *(_QWORD *)a3;
LABEL_86:
  *(_QWORD *)(a3 + 16) = v61;
LABEL_87:
  if (v57 >= 0x41 && v58)
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
LABEL_129:
  if (v78 >= 0x41 && v77)
    MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
  if (v80 < 0x41)
    goto LABEL_134;
  v64 = (uint64_t **)v79;
  if (!v79)
    goto LABEL_134;
LABEL_114:
  MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
LABEL_134:
  if (v82 >= 0x41 && v81)
    MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
  if (v84 >= 0x41)
  {
    if (v83)
      MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  }
}

void llvm::ConstantRange::lshr(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  llvm::APInt *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  uint64_t **v24;
  unsigned int v25;
  void *__src;
  unsigned int v27;
  llvm::APInt *v28;
  unsigned int v29;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_34;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_34;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v7)
    {
      goto LABEL_5;
    }
LABEL_34:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    goto LABEL_34;
LABEL_5:
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&v24);
  v8 = v27;
  v29 = v27;
  if (v27 > 0x40)
  {
    v28 = (llvm::APInt *)operator new[]();
    v9 = __src;
    v10 = v29;
    memcpy(v28, __src, (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v9 = __src;
    v28 = (llvm::APInt *)__src;
    v10 = v27;
  }
  v11 = sub_1C47EE5B8(&v24, v10);
  if (v29 > 0x40)
  {
    llvm::APInt::tcShiftRight(v28, (unint64_t *)(((unint64_t)v29 + 63) >> 6), v11);
  }
  else if (v29 == v11)
  {
    v28 = 0;
  }
  else
  {
    v28 = (llvm::APInt *)((unint64_t)v28 >> v11);
  }
  llvm::APInt::operator+=((uint64_t)&v28, 1uLL);
  v12 = v29;
  v13 = v28;
  v29 = 0;
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  if (v8 >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v24);
  v14 = v27;
  if (v27 > 0x40)
  {
    v19 = (((unint64_t)v27 + 63) >> 3) & 0x3FFFFFF8;
    v17 = operator new[]();
    memcpy((void *)v17, __src, v19);
    v20 = sub_1C47EE5B8(&v24, v14);
    llvm::APInt::tcShiftRight((llvm::APInt *)v17, (unint64_t *)((v14 + 63) >> 6), v20);
  }
  else
  {
    v15 = (unint64_t)__src;
    v16 = sub_1C47EE5B8(&v24, v27);
    if ((_DWORD)v14 == v16)
      v17 = 0;
    else
      v17 = v15 >> v16;
  }
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  if (v27 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v14 <= 0x40)
  {
    if ((llvm::APInt *)v17 == v13)
    {
      *(_DWORD *)(a3 + 8) = v14;
      if ((_DWORD)v14)
        v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
      else
        v18 = 0;
      *(_QWORD *)a3 = v18;
      *(_DWORD *)(a3 + 24) = v14;
      goto LABEL_22;
    }
LABEL_49:
    *(_DWORD *)(a3 + 8) = v14;
    *(_QWORD *)a3 = v17;
    *(_DWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 16) = v13;
    return;
  }
  if (memcmp((const void *)v17, v13, ((v14 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_49;
  *(_DWORD *)(a3 + 8) = v14;
  llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
  v21 = *(unsigned int *)(a3 + 8);
  *(_DWORD *)(a3 + 24) = v21;
  if (v21 <= 0x40)
  {
    v18 = *(_QWORD *)a3;
LABEL_22:
    *(_QWORD *)(a3 + 16) = v18;
    goto LABEL_23;
  }
  v22 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
  v23 = (void *)operator new[]();
  *(_QWORD *)(a3 + 16) = v23;
  memcpy(v23, *(const void **)a3, v22);
LABEL_23:
  if (v12 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  if (v14 >= 0x41)
  {
    if (v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
}

uint64_t llvm::ConstantRange::ashr@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL4 v17;
  void *v18;
  void **v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unsigned int v25;
  void **p_src;
  uint64_t v27;
  unsigned int v28;
  void *__s1;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  void *__src;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  void *v43;
  unsigned int v44;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v7)
    {
      goto LABEL_5;
    }
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
LABEL_5:
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&v37);
  v42 = v40;
  if (v40 > 0x40)
  {
    v41 = (void *)operator new[]();
    memcpy(v41, __src, (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v41 = __src;
  }
  llvm::APInt::ashrInPlace((llvm::APInt *)&v41, (uint64_t ***)&v37);
  llvm::APInt::operator+=((uint64_t)&v41, 1uLL);
  v44 = v42;
  v43 = v41;
  v42 = 0;
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  if (v40 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v37);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v35);
  v40 = v38;
  if (v38 > 0x40)
  {
    __src = (void *)operator new[]();
    memcpy(__src, v37, (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __src = v37;
  }
  llvm::APInt::ashrInPlace((llvm::APInt *)&__src, (uint64_t ***)&v35);
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v35);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v31);
  v34 = v36;
  if (v36 > 0x40)
  {
    v33 = (void *)operator new[]();
    memcpy(v33, v35, (((unint64_t)v34 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v33 = v35;
  }
  llvm::APInt::ashrInPlace((llvm::APInt *)&v33, (uint64_t ***)&v31);
  llvm::APInt::operator+=((uint64_t)&v33, 1uLL);
  v38 = v34;
  v37 = v33;
  v34 = 0;
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v31);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&__s1);
  v36 = v32;
  if (v32 > 0x40)
  {
    v35 = (void *)operator new[]();
    memcpy(v35, v31, (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v35 = v31;
  }
  llvm::APInt::ashrInPlace((llvm::APInt *)&v35, (uint64_t ***)&__s1);
  if (v30 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  v32 = 1;
  v31 = 0;
  v30 = 1;
  __s1 = 0;
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v27);
  v8 = v28 - 1;
  result = v27;
  if (v28 >= 0x41)
    v10 = (uint64_t *)(v27 + 8 * (v8 >> 6));
  else
    v10 = &v27;
  v11 = (1 << v8) & *v10;
  if (v28 >= 0x41 && v27)
    result = MEMORY[0x1CAA32F9C]();
  if (!v11)
  {
    if (v30 <= 0x40)
    {
      v15 = v40;
      if (v40 <= 0x40)
      {
        v18 = __src;
        goto LABEL_39;
      }
    }
    p_src = &__src;
LABEL_117:
    result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)&__s1, (const llvm::APInt *)p_src);
    goto LABEL_40;
  }
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v27);
  v12 = v28 - 1;
  result = v27;
  if (v28 >= 0x41)
    v13 = (uint64_t *)(v27 + 8 * (v12 >> 6));
  else
    v13 = &v27;
  v14 = (1 << v12) & *v13;
  if (v28 >= 0x41 && v27)
    result = MEMORY[0x1CAA32F9C]();
  v15 = v36;
  v17 = v30 < 0x41 && v36 < 0x41;
  if (!v14)
  {
    if (v17)
    {
      v18 = v35;
LABEL_39:
      __s1 = v18;
      v30 = v15;
LABEL_40:
      v19 = &v43;
      if (v32 <= 0x40)
      {
        v20 = v44;
        if (v44 <= 0x40)
        {
          v21 = v43;
LABEL_43:
          v31 = v21;
          goto LABEL_44;
        }
      }
      goto LABEL_79;
    }
    p_src = &v35;
    goto LABEL_117;
  }
  if (v17)
  {
    __s1 = v35;
    v30 = v36;
  }
  else
  {
    result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)&__s1, (const llvm::APInt *)&v35);
  }
  v19 = &v37;
  if (v32 <= 0x40)
  {
    v20 = v38;
    if (v38 <= 0x40)
    {
      v21 = v37;
      goto LABEL_43;
    }
  }
LABEL_79:
  result = (uint64_t)llvm::APInt::assignSlowCase((const llvm::APInt *)&v31, (const llvm::APInt *)v19);
  v20 = v32;
  v21 = v31;
LABEL_44:
  v22 = v30;
  v23 = __s1;
  v30 = 0;
  v32 = 0;
  if (v22 > 0x40)
  {
    result = memcmp(__s1, v21, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = v22;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v25 = *(_DWORD *)(a3 + 8);
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v25;
      if (v25 > 0x40)
      {
        result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
LABEL_50:
        if (v20 >= 0x41 && v21)
          result = MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
        if (v22 >= 0x41 && v23)
          result = MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        goto LABEL_72;
      }
      v24 = *(_QWORD *)a3;
LABEL_49:
      *(_QWORD *)result = v24;
      goto LABEL_50;
    }
  }
  else if (__s1 == v21)
  {
    *(_DWORD *)(a3 + 8) = v22;
    if ((_DWORD)v22)
      v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
    else
      v24 = 0;
    *(_QWORD *)a3 = v24;
    result = a3 + 16;
    *(_DWORD *)(a3 + 24) = v22;
    goto LABEL_49;
  }
  *(_DWORD *)(a3 + 8) = v22;
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 16) = v21;
LABEL_72:
  if (v30 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      result = MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  if (v32 >= 0x41)
  {
    result = (uint64_t)v31;
    if (v31)
      result = MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  }
  if (v36 >= 0x41)
  {
    result = (uint64_t)v35;
    if (v35)
      result = MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  }
  if (v38 >= 0x41)
  {
    result = (uint64_t)v37;
    if (v37)
      result = MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  if (v40 >= 0x41)
  {
    result = (uint64_t)__src;
    if (__src)
      result = MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  if (v44 >= 0x41)
  {
    result = (uint64_t)v43;
    if (v43)
      return MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::binaryAnd(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  llvm::ConstantRange *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  unint64_t v30;
  BOOL v31;
  void **v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  const llvm::ConstantRange *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  size_t v58;
  void *__s2;
  unsigned int v60;
  void *__s1;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  void *v65;
  unsigned int v66;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    v7 = *(void **)this;
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      goto LABEL_62;
    }
  }
  else
  {
    v7 = *(void **)this;
    if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
      goto LABEL_62;
  }
  v8 = *((unsigned int *)a2 + 2);
  if (v8 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
LABEL_62:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v8)
  {
    goto LABEL_62;
  }
LABEL_5:
  v66 = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  v65 = v7;
  llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
  v9 = v66;
  v10 = v65;
  v66 = 0;
  v11 = *((unsigned int *)this + 6);
  if (v11 > 0x40)
    v12 = memcmp(*((const void **)this + 2), v65, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v12 = *((_QWORD *)this + 2) == (_QWORD)v65;
  v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      if (v66 >= 0x41)
      {
        if (v65)
          MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
      }
    }
  }
  if (v13)
  {
    v66 = *((_DWORD *)a2 + 2);
    if (v66 > 0x40)
    {
      v65 = (void *)operator new[]();
      memcpy(v65, *(const void **)a2, (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v65 = *(void **)a2;
    }
    llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
    v14 = v66;
    v15 = v65;
    v66 = 0;
    v16 = *((unsigned int *)a2 + 6);
    if (v16 > 0x40)
      v17 = memcmp(*((const void **)a2 + 2), v65, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v17 = *((_QWORD *)a2 + 2) == (_QWORD)v65;
    v18 = v17;
    if (v14 >= 0x41)
    {
      if (v15)
      {
        MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
        if (v66 >= 0x41)
        {
          if (v65)
            MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
        }
      }
    }
    if (v18)
    {
      v19 = *((unsigned int *)this + 2);
      v66 = v19;
      if (v19 > 0x40)
      {
        v57 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
        v65 = (void *)operator new[]();
        memcpy(v65, *(const void **)this, v57);
      }
      else
      {
        v65 = *(void **)this;
      }
      llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
      v20 = v66;
      v21 = v65;
      v66 = 0;
      v22 = *((unsigned int *)this + 6);
      if (v22 > 0x40)
        v23 = memcmp(*((const void **)this + 2), v65, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v23 = *((_QWORD *)this + 2) == (_QWORD)v65;
      v24 = v23;
      if (v20 >= 0x41)
      {
        if (v21)
        {
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
          if (v66 >= 0x41)
          {
            if (v65)
              MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
          }
        }
      }
      if (v24)
        v25 = this;
      else
        v25 = 0;
      v26 = *((unsigned int *)v25 + 2);
      if (v26 > 0x40)
      {
        v27 = operator new[]();
        memcpy((void *)v27, *(const void **)v25, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v27 = *(_QWORD *)v25;
      }
      v33 = *((unsigned int *)a2 + 2);
      v66 = v33;
      if (v33 > 0x40)
      {
        v58 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
        v65 = (void *)operator new[]();
        memcpy(v65, *(const void **)a2, v58);
      }
      else
      {
        v65 = *(void **)a2;
      }
      llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
      v34 = v66;
      v35 = v65;
      v66 = 0;
      v36 = *((unsigned int *)a2 + 6);
      if (v36 > 0x40)
        v37 = memcmp(*((const void **)a2 + 2), v65, ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v37 = *((_QWORD *)a2 + 2) == (_QWORD)v65;
      v38 = v37;
      if (v34 >= 0x41)
      {
        if (v35)
        {
          MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
          if (v66 >= 0x41)
          {
            if (v65)
              MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
          }
        }
      }
      if (v38)
        v39 = a2;
      else
        v39 = 0;
      if (v26 >= 0x41)
      {
        v41 = 0;
        v42 = *(_QWORD *)v39;
        do
        {
          *(_QWORD *)(v27 + v41) &= *(_QWORD *)(v42 + v41);
          v41 += 8;
        }
        while ((((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8) != v41);
        *(_DWORD *)(a3 + 8) = v26;
        *(_QWORD *)a3 = v27;
        v66 = v26;
        v65 = (void *)operator new[]();
        memcpy(v65, (const void *)v27, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v40 = (void *)(*(_QWORD *)v39 & v27);
        *(_DWORD *)(a3 + 8) = v26;
        *(_QWORD *)a3 = v40;
        v66 = v26;
        v65 = v40;
      }
      llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
      *(_DWORD *)(a3 + 24) = v66;
      *(_QWORD *)(a3 + 16) = v65;
      return;
    }
  }
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v65);
  llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v63);
  v28 = v66;
  if (v66 > 0x40)
  {
    v29 = v65;
    v30 = v63;
    v43 = (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v43)
      {
        v32 = (void **)&v63;
        v46 = v64;
        v47 = v64;
        goto LABEL_70;
      }
      v44 = *(_QWORD *)((char *)v65 + v43 - 8);
      v45 = *(_QWORD *)(v63 + v43 - 8);
      v43 -= 8;
    }
    while (v44 == v45);
    v31 = v44 <= v45;
    if (v44 <= v45)
      goto LABEL_38;
  }
  else
  {
    v29 = v65;
    v30 = v63;
    v31 = (unint64_t)v65 < v63;
    if ((unint64_t)v65 < v63)
    {
LABEL_38:
      v32 = &v65;
      goto LABEL_68;
    }
  }
  v32 = (void **)&v63;
LABEL_68:
  v46 = v64;
  v47 = v64;
  if (v31)
    v47 = v66;
LABEL_70:
  if (v47 > 0x40)
  {
    v48 = (void *)operator new[]();
    memcpy(v48, *v32, (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v48 = *v32;
  }
  if (v46 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v28 >= 0x41 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  sub_1C4832EA4((llvm::APInt *)&__s1, *((_DWORD *)this + 2), 0, 0);
  v60 = v47;
  __s2 = v48;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v49 = v60;
  v50 = __s2;
  v60 = 0;
  v51 = v62;
  if (v62 > 0x40)
  {
    v52 = __s1;
    if (!memcmp(__s1, __s2, (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8))
    {
      *(_DWORD *)(a3 + 8) = v51;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v54 = *(unsigned int *)(a3 + 8);
      *(_DWORD *)(a3 + 24) = v54;
      if (v54 > 0x40)
      {
        v55 = ((unint64_t)(v54 + 63) >> 3) & 0x3FFFFFF8;
        v56 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v56;
        memcpy(v56, *(const void **)a3, v55);
        goto LABEL_85;
      }
      v53 = *(_QWORD *)a3;
LABEL_84:
      *(_QWORD *)(a3 + 16) = v53;
LABEL_85:
      if (v49 >= 0x41 && v50)
        MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
      goto LABEL_92;
    }
  }
  else
  {
    v52 = __s1;
    if (__s1 == __s2)
    {
      *(_DWORD *)(a3 + 8) = v62;
      if (v51)
        v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
      else
        v53 = 0;
      *(_QWORD *)a3 = v53;
      *(_DWORD *)(a3 + 24) = v51;
      goto LABEL_84;
    }
  }
  v62 = 0;
  *(_DWORD *)(a3 + 8) = v51;
  *(_QWORD *)a3 = v52;
  *(_DWORD *)(a3 + 24) = v49;
  *(_QWORD *)(a3 + 16) = v50;
LABEL_92:
  if (v60 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v62 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
}

void llvm::ConstantRange::binaryOr(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  llvm::ConstantRange *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  void **v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  const llvm::ConstantRange *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  unsigned int v52;
  size_t v53;
  size_t v54;
  unsigned int v55;
  int v56;
  void *__s2;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  void *v61;
  unsigned int v62;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    v7 = *(void **)this;
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      goto LABEL_84;
    }
  }
  else
  {
    v7 = *(void **)this;
    if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
      goto LABEL_84;
  }
  v8 = *((unsigned int *)a2 + 2);
  if (v8 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
LABEL_84:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v8)
  {
    goto LABEL_84;
  }
LABEL_5:
  v62 = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  v61 = v7;
  llvm::APInt::operator+=((uint64_t)&v61, 1uLL);
  v9 = v62;
  v10 = v61;
  v62 = 0;
  v11 = *((unsigned int *)this + 6);
  if (v11 > 0x40)
    v12 = memcmp(*((const void **)this + 2), v61, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v12 = *((_QWORD *)this + 2) == (_QWORD)v61;
  v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      if (v62 >= 0x41)
      {
        if (v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
      }
    }
  }
  if (v13)
  {
    v62 = *((_DWORD *)a2 + 2);
    if (v62 > 0x40)
    {
      v61 = (void *)operator new[]();
      memcpy(v61, *(const void **)a2, (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v61 = *(void **)a2;
    }
    llvm::APInt::operator+=((uint64_t)&v61, 1uLL);
    v14 = v62;
    v15 = v61;
    v62 = 0;
    v16 = *((unsigned int *)a2 + 6);
    if (v16 > 0x40)
      v17 = memcmp(*((const void **)a2 + 2), v61, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v17 = *((_QWORD *)a2 + 2) == (_QWORD)v61;
    v18 = v17;
    if (v14 >= 0x41)
    {
      if (v15)
      {
        MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
        if (v62 >= 0x41)
        {
          if (v61)
            MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        }
      }
    }
    if (v18)
    {
      v19 = *((unsigned int *)this + 2);
      v62 = v19;
      if (v19 > 0x40)
      {
        v53 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
        v61 = (void *)operator new[]();
        memcpy(v61, *(const void **)this, v53);
      }
      else
      {
        v61 = *(void **)this;
      }
      llvm::APInt::operator+=((uint64_t)&v61, 1uLL);
      v20 = v62;
      v21 = v61;
      v62 = 0;
      v22 = *((unsigned int *)this + 6);
      if (v22 > 0x40)
        v23 = memcmp(*((const void **)this + 2), v61, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v23 = *((_QWORD *)this + 2) == (_QWORD)v61;
      v24 = v23;
      if (v20 >= 0x41)
      {
        if (v21)
        {
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
          if (v62 >= 0x41)
          {
            if (v61)
              MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
          }
        }
      }
      if (v24)
        v25 = this;
      else
        v25 = 0;
      v26 = *((unsigned int *)v25 + 2);
      if (v26 > 0x40)
      {
        v27 = operator new[]();
        memcpy((void *)v27, *(const void **)v25, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v27 = *(_QWORD *)v25;
      }
      v36 = *((unsigned int *)a2 + 2);
      v62 = v36;
      if (v36 > 0x40)
      {
        v54 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
        v61 = (void *)operator new[]();
        memcpy(v61, *(const void **)a2, v54);
      }
      else
      {
        v61 = *(void **)a2;
      }
      llvm::APInt::operator+=((uint64_t)&v61, 1uLL);
      v37 = v62;
      v38 = v61;
      v62 = 0;
      v39 = *((unsigned int *)a2 + 6);
      if (v39 > 0x40)
      {
        v55 = v37;
        v56 = memcmp(*((const void **)a2 + 2), v61, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8);
        v37 = v55;
        v40 = v56 == 0;
      }
      else
      {
        v40 = *((_QWORD *)a2 + 2) == (_QWORD)v61;
      }
      v41 = v40;
      if (v37 >= 0x41)
      {
        if (v38)
        {
          MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
          if (v62 >= 0x41)
          {
            if (v61)
              MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
          }
        }
      }
      if (v41)
        v42 = a2;
      else
        v42 = 0;
      if (v26 >= 0x41)
      {
        v44 = 0;
        v45 = *(_QWORD *)v42;
        do
        {
          *(_QWORD *)(v27 + v44) |= *(_QWORD *)(v45 + v44);
          v44 += 8;
        }
        while ((((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8) != v44);
        *(_DWORD *)(a3 + 8) = v26;
        *(_QWORD *)a3 = v27;
        v62 = v26;
        v61 = (void *)operator new[]();
        memcpy(v61, (const void *)v27, ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v43 = (void *)(*(_QWORD *)v42 | v27);
        *(_DWORD *)(a3 + 8) = v26;
        *(_QWORD *)a3 = v43;
        v62 = v26;
        v61 = v43;
      }
      llvm::APInt::operator+=((uint64_t)&v61, 1uLL);
      *(_DWORD *)(a3 + 24) = v62;
      *(_QWORD *)(a3 + 16) = v61;
      return;
    }
  }
  llvm::ConstantRange::getUnsignedMin(this, (llvm::APInt *)&v61);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v59);
  if (v62 > 0x40)
  {
    v46 = (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8;
    while (v46)
    {
      v47 = *(_QWORD *)((char *)v61 + v46 - 8);
      v48 = *(_QWORD *)(v59 - 8 + v46);
      v46 -= 8;
      v28 = v47 > v48;
      if (v47 != v48)
        goto LABEL_38;
    }
    v30 = (void **)&v59;
    v31 = v60;
    v32 = v60;
  }
  else
  {
    v28 = (unint64_t)v61 > v59;
LABEL_38:
    v29 = v28;
    if (v28)
      v30 = &v61;
    else
      v30 = (void **)&v59;
    v31 = v60;
    v32 = v60;
    if ((v29 & 1) != 0)
      v32 = v62;
  }
  if (v32 > 0x40)
  {
    v33 = (void *)operator new[]();
    memcpy(v33, *v30, (((unint64_t)v32 + 63) >> 3) & 0x3FFFFFF8);
    v31 = v60;
  }
  else
  {
    v33 = *v30;
  }
  if (v31 >= 0x41 && v59)
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  if (v62 >= 0x41 && v61)
    MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
  sub_1C4832EA4((llvm::APInt *)&__s2, *((_DWORD *)this + 2), 0, 0);
  if (v32 <= 0x40)
  {
    v34 = __s2;
    if (v33 == __s2)
    {
      *(_DWORD *)(a3 + 8) = v32;
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
      if (!v32)
        v35 = 0;
      *(_QWORD *)a3 = v35;
      *(_DWORD *)(a3 + 24) = v32;
      goto LABEL_60;
    }
    goto LABEL_92;
  }
  v34 = __s2;
  if (memcmp(v33, __s2, (((unint64_t)v32 + 63) >> 3) & 0x3FFFFFF8))
  {
LABEL_92:
    v52 = v58;
    v58 = 0;
    *(_DWORD *)(a3 + 8) = v32;
    *(_QWORD *)a3 = v33;
    *(_DWORD *)(a3 + 24) = v52;
    *(_QWORD *)(a3 + 16) = v34;
    v32 = 0;
    goto LABEL_93;
  }
  *(_DWORD *)(a3 + 8) = v32;
  llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
  v49 = *(unsigned int *)(a3 + 8);
  *(_DWORD *)(a3 + 24) = v49;
  if (v49 <= 0x40)
  {
    v35 = *(_QWORD *)a3;
LABEL_60:
    *(_QWORD *)(a3 + 16) = v35;
    goto LABEL_93;
  }
  v50 = ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8;
  v51 = (void *)operator new[]();
  *(_QWORD *)(a3 + 16) = v51;
  memcpy(v51, *(const void **)a3, v50);
LABEL_93:
  if (v58 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v32 >= 0x41 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
}

llvm::ConstantRange *llvm::ConstantRange::binaryXor@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  const llvm::ConstantRange *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  llvm::ConstantRange *result;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  llvm::ConstantRange *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  const llvm::ConstantRange *v53;
  void *v54;
  uint64_t v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  llvm::ConstantRange *v61;
  unsigned int v62;
  uint64_t v63;
  llvm::ConstantRange *v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  size_t v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  size_t v76;
  unsigned int v77;
  int v78;
  size_t v79;
  unsigned int v80;
  int v81;
  void *v82;
  int v83;
  size_t v84;
  unsigned int v85;
  int v86;
  uint64_t *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *__s2;
  unsigned int v92;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    v7 = *(void **)this;
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else
  {
    v7 = *(void **)this;
    if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v8 = *((unsigned int *)a2 + 2);
  if (v8 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v8)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  v92 = v6;
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  __s2 = v7;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v9 = v92;
  v10 = __s2;
  v92 = 0;
  v11 = *((unsigned int *)this + 6);
  if (v11 > 0x40)
  {
    v65 = v9;
    v66 = memcmp(*((const void **)this + 2), __s2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    v9 = v65;
    v12 = v66 == 0;
  }
  else
  {
    v12 = *((_QWORD *)this + 2) == (_QWORD)__s2;
  }
  v13 = v12;
  if (v9 >= 0x41)
  {
    if (v10)
    {
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      if (v92 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (!v13)
    goto LABEL_14;
  v92 = *((_DWORD *)a2 + 2);
  if (v92 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *(const void **)a2, (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *(void **)a2;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v33 = v92;
  v34 = __s2;
  v92 = 0;
  v35 = *((unsigned int *)a2 + 6);
  if (v35 > 0x40)
  {
    v74 = v33;
    v75 = memcmp(*((const void **)a2 + 2), __s2, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8);
    v33 = v74;
    v36 = v75 == 0;
  }
  else
  {
    v36 = *((_QWORD *)a2 + 2) == (_QWORD)__s2;
  }
  v37 = v36;
  if (v33 >= 0x41)
  {
    if (v34)
    {
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      if (v92 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (!v37)
  {
LABEL_14:
    v92 = *((_DWORD *)a2 + 2);
    if (v92 > 0x40)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)a2, (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = *(void **)a2;
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v14 = v92;
    v15 = __s2;
    v92 = 0;
    v16 = *((unsigned int *)a2 + 6);
    if (v16 > 0x40)
    {
      v67 = v14;
      v68 = memcmp(*((const void **)a2 + 2), __s2, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
      v14 = v67;
      v17 = v68 == 0;
    }
    else
    {
      v17 = *((_QWORD *)a2 + 2) == (_QWORD)__s2;
    }
    v18 = v17;
    if (v14 >= 0x41)
    {
      if (v15)
      {
        MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
        if (v92 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v18)
    {
      v92 = *((_DWORD *)a2 + 2);
      if (v92 > 0x40)
      {
        __s2 = (void *)operator new[]();
        memcpy(__s2, *(const void **)a2, (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __s2 = *(void **)a2;
      }
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      v19 = v92;
      v20 = __s2;
      v92 = 0;
      v21 = *((unsigned int *)a2 + 6);
      if (v21 > 0x40)
      {
        v69 = v19;
        v70 = memcmp(*((const void **)a2 + 2), __s2, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8);
        v19 = v69;
        v22 = v70 == 0;
      }
      else
      {
        v22 = *((_QWORD *)a2 + 2) == (_QWORD)__s2;
      }
      v23 = v22;
      if (v19 >= 0x41)
      {
        if (v20)
        {
          MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
          if (v92 >= 0x41)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      if (v23)
        v24 = a2;
      else
        v24 = 0;
      v25 = *((_DWORD *)v24 + 2);
      if (!v25)
        goto LABEL_152;
      if (v25 <= 0x40)
      {
        if (*(_QWORD *)v24 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v25)
          goto LABEL_37;
LABEL_152:
        v63 = a3;
        v64 = this;
        return llvm::ConstantRange::binaryNot(v64, v63);
      }
      if (llvm::APInt::countTrailingOnesSlowCase(v24) == v25)
        goto LABEL_152;
    }
LABEL_37:
    v26 = *((unsigned int *)this + 2);
    v92 = v26;
    if (v26 > 0x40)
    {
      v71 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)this, v71);
    }
    else
    {
      __s2 = *(void **)this;
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v27 = v92;
    v28 = __s2;
    v92 = 0;
    v29 = *((unsigned int *)this + 6);
    if (v29 > 0x40)
    {
      v72 = v27;
      v73 = memcmp(*((const void **)this + 2), __s2, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
      v27 = v72;
      v30 = v73 == 0;
    }
    else
    {
      v30 = *((_QWORD *)this + 2) == (_QWORD)__s2;
    }
    v31 = v30;
    if (v27 >= 0x41)
    {
      if (v28)
      {
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
        if (v92 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (!v31)
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 1);
    v55 = *((unsigned int *)this + 2);
    v92 = v55;
    if (v55 > 0x40)
    {
      v84 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)this, v84);
    }
    else
    {
      __s2 = *(void **)this;
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v56 = v92;
    v57 = __s2;
    v92 = 0;
    v58 = *((unsigned int *)this + 6);
    if (v58 > 0x40)
    {
      v85 = v56;
      v86 = memcmp(*((const void **)this + 2), __s2, ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8);
      v56 = v85;
      v59 = v86 == 0;
    }
    else
    {
      v59 = *((_QWORD *)this + 2) == (_QWORD)__s2;
    }
    v60 = v59;
    if (v56 >= 0x41)
    {
      if (v57)
      {
        MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        if (v92 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v60)
      v61 = this;
    else
      v61 = 0;
    v62 = *((_DWORD *)v61 + 2);
    if (!v62)
      goto LABEL_103;
    if (v62 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase(v61) == v62)
        goto LABEL_103;
    }
    else if (*(_QWORD *)v61 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v62)
    {
LABEL_103:
      v63 = a3;
      v64 = a2;
      return llvm::ConstantRange::binaryNot(v64, v63);
    }
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 1);
  }
  v38 = *((unsigned int *)this + 2);
  v92 = v38;
  if (v38 > 0x40)
  {
    v76 = ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8;
    __s2 = (void *)operator new[]();
    memcpy(__s2, *(const void **)this, v76);
  }
  else
  {
    __s2 = *(void **)this;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v39 = v92;
  v40 = __s2;
  v92 = 0;
  v41 = *((unsigned int *)this + 6);
  if (v41 > 0x40)
  {
    v77 = v39;
    v78 = memcmp(*((const void **)this + 2), __s2, ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8);
    v39 = v77;
    v42 = v78 == 0;
  }
  else
  {
    v42 = *((_QWORD *)this + 2) == (_QWORD)__s2;
  }
  v43 = v42;
  if (v39 >= 0x41)
  {
    if (v40)
    {
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
      if (v92 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v43)
    v44 = this;
  else
    v44 = 0;
  v45 = *((unsigned int *)v44 + 2);
  if (v45 > 0x40)
  {
    v46 = operator new[]();
    memcpy((void *)v46, *(const void **)v44, ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v46 = *(_QWORD *)v44;
  }
  v47 = *((unsigned int *)a2 + 2);
  v92 = v47;
  if (v47 > 0x40)
  {
    v79 = ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8;
    __s2 = (void *)operator new[]();
    memcpy(__s2, *(const void **)a2, v79);
  }
  else
  {
    __s2 = *(void **)a2;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v48 = v92;
  v49 = __s2;
  v92 = 0;
  v50 = *((unsigned int *)a2 + 6);
  if (v50 > 0x40)
  {
    v80 = v48;
    v81 = memcmp(*((const void **)a2 + 2), __s2, ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8);
    v48 = v80;
    v51 = v81 == 0;
  }
  else
  {
    v51 = *((_QWORD *)a2 + 2) == (_QWORD)__s2;
  }
  v52 = v51;
  if (v48 >= 0x41)
  {
    if (v49)
    {
      v82 = v49;
      v83 = v52;
      MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
      v52 = v83;
      if (v92 >= 0x41)
      {
        if (__s2)
        {
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          v52 = v83;
        }
      }
    }
  }
  if (v52)
    v53 = a2;
  else
    v53 = 0;
  if (v45 >= 0x41)
  {
    v87 = *(uint64_t **)v53;
    v88 = (unint64_t)(v45 + 63) >> 6;
    v89 = (_QWORD *)v46;
    do
    {
      v90 = *v87++;
      *v89++ ^= v90;
      --v88;
    }
    while (v88);
    *(_DWORD *)(a3 + 8) = v45;
    *(_QWORD *)a3 = v46;
    v92 = v45;
    __s2 = (void *)operator new[]();
    memcpy(__s2, *(const void **)a3, ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v54 = (void *)(*(_QWORD *)v53 ^ v46);
    *(_DWORD *)(a3 + 8) = v45;
    *(_QWORD *)a3 = v54;
    v92 = v45;
    __s2 = v54;
  }
  result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  *(_DWORD *)(a3 + 24) = v92;
  *(_QWORD *)(a3 + 16) = __s2;
  return result;
}

void llvm::ConstantRange::overflowingBinaryOp(llvm::ConstantRange *a1@<X2>, llvm::ConstantRange *a2@<X3>, llvm::ConstantRange *a3@<X0>, int a4@<W1>, llvm::ConstantRange *a5@<X8>)
{
  if (a4 == 13)
  {
    llvm::ConstantRange::addWithNoWrap(a3, a1, (char)a2, 0, (uint64_t)a5);
  }
  else if (a4 == 15)
  {
    llvm::ConstantRange::subWithNoWrap(a3, a1, (char)a2, 0, (uint64_t)a5);
  }
  else
  {
    llvm::ConstantRange::binaryOp(a1, (unsigned int *)a3, a4, a5);
  }
}

llvm::ConstantRange *llvm::ConstantRange::addWithNoWrap@<X0>(llvm::ConstantRange *this@<X0>, llvm::ConstantRange *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  const void *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;
  uint64_t v15;
  llvm::ConstantRange *result;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::ConstantRange *v29;
  unsigned int v30;
  llvm::ConstantRange *v31;
  unsigned int v32;
  llvm::ConstantRange *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;

  v9 = *((unsigned int *)this + 2);
  if (v9 >= 0x41)
  {
    v17 = a4;
    v10 = *(const void **)this;
    v11 = *((_QWORD *)this + 2);
    if (!memcmp(*(const void **)this, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v9)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
    }
    a4 = v17;
  }
  else
  {
    v10 = *(const void **)this;
    v11 = *((_QWORD *)this + 2);
    if (!(v11 | *(_QWORD *)this))
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
  }
  v12 = *((unsigned int *)a2 + 2);
  if (v12 < 0x41)
  {
    v13 = *(const void **)a2;
    v14 = *((_QWORD *)a2 + 2);
    if (v14 | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
  }
  v28 = a4;
  v13 = *(const void **)a2;
  v14 = *((_QWORD *)a2 + 2);
  if (!memcmp(*(const void **)a2, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8))
  {
    v22 = llvm::APInt::countLeadingZerosSlowCase(a2);
    a4 = v28;
    if (v22 == (_DWORD)v12)
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
  }
  else
  {
    a4 = v28;
  }
LABEL_5:
  if (v9 > 0x40)
  {
    v18 = (const void *)v11;
    v19 = a4;
    v20 = memcmp(v10, v18, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    a4 = v19;
    if (!v20)
    {
      v21 = llvm::APInt::countTrailingOnesSlowCase(this);
      a4 = v19;
      if (v21 == (_DWORD)v9)
      {
LABEL_22:
        if (v12 > 0x40)
        {
          v23 = a4;
          v24 = memcmp(v13, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
          a4 = v23;
          if (!v24)
          {
            v25 = llvm::APInt::countTrailingOnesSlowCase(a2);
            a4 = v23;
            if (v25 == (_DWORD)v12)
              return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 1);
          }
        }
        else if (v13 == (const void *)v14 && (!(_DWORD)v12 || v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v12))
        {
          return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 1);
        }
      }
    }
  }
  else if (v10 == (const void *)v11 && (!(_DWORD)v9 || v11 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v9))
  {
    goto LABEL_22;
  }
  v15 = a4;
  result = llvm::ConstantRange::add(this, a2, a5);
  if ((a3 & 2) != 0)
  {
    llvm::ConstantRange::sadd_sat((const void **)this, a2, (uint64_t)&v29);
    result = (llvm::ConstantRange *)llvm::ConstantRange::intersectWith(a5, (llvm::ConstantRange *)&v29, v15, (uint64_t)&v33);
    if (*(_DWORD *)(a5 + 8) >= 0x41u)
    {
      result = *(llvm::ConstantRange **)a5;
      if (*(_QWORD *)a5)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    *(_QWORD *)a5 = v33;
    *(_DWORD *)(a5 + 8) = v34;
    v34 = 0;
    if (*(_DWORD *)(a5 + 24) >= 0x41u && (result = *(llvm::ConstantRange **)(a5 + 16)) != 0)
    {
      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      v26 = v34;
      *(_QWORD *)(a5 + 16) = v35;
      *(_DWORD *)(a5 + 24) = v36;
      v36 = 0;
      if (v26 >= 0x41)
      {
        result = v33;
        if (v33)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v35;
      *(_DWORD *)(a5 + 24) = v36;
      v36 = 0;
    }
    if (v32 >= 0x41)
    {
      result = v31;
      if (v31)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    }
    if (v30 >= 0x41)
    {
      result = v29;
      if (v29)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
  }
  if ((a3 & 1) != 0)
  {
    llvm::ConstantRange::uadd_sat((const void **)this, a2, (uint64_t)&v29);
    result = (llvm::ConstantRange *)llvm::ConstantRange::intersectWith(a5, (llvm::ConstantRange *)&v29, v15, (uint64_t)&v33);
    if (*(_DWORD *)(a5 + 8) >= 0x41u)
    {
      result = *(llvm::ConstantRange **)a5;
      if (*(_QWORD *)a5)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    *(_QWORD *)a5 = v33;
    *(_DWORD *)(a5 + 8) = v34;
    v34 = 0;
    if (*(_DWORD *)(a5 + 24) >= 0x41u && (result = *(llvm::ConstantRange **)(a5 + 16)) != 0)
    {
      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      v27 = v34;
      *(_QWORD *)(a5 + 16) = v35;
      *(_DWORD *)(a5 + 24) = v36;
      v36 = 0;
      if (v27 >= 0x41)
      {
        result = v33;
        if (v33)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v35;
      *(_DWORD *)(a5 + 24) = v36;
      v36 = 0;
    }
    if (v32 >= 0x41)
    {
      result = v31;
      if (v31)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    }
    if (v30 >= 0x41)
    {
      result = v29;
      if (v29)
        return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::ConstantRange *llvm::ConstantRange::subWithNoWrap@<X0>(llvm::ConstantRange *this@<X0>, llvm::ConstantRange *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  const void *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;
  uint64_t v15;
  llvm::ConstantRange *result;
  unsigned int v17;
  llvm::ConstantRange *v18;
  llvm::ConstantRange *v19;
  BOOL v20;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  llvm::ConstantRange *v35;
  unsigned int v36;
  llvm::ConstantRange *v37;
  unsigned int v38;
  llvm::ConstantRange *v39;
  unsigned int v40;
  llvm::ConstantRange *v41;
  unsigned int v42;
  llvm::ConstantRange *v43;
  unsigned int v44;
  llvm::ConstantRange *v45;
  unsigned int v46;

  v9 = *((unsigned int *)this + 2);
  if (v9 >= 0x41)
  {
    v22 = a4;
    v10 = *(const void **)this;
    v11 = *((_QWORD *)this + 2);
    if (!memcmp(*(const void **)this, (const void *)v11, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v9)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
    }
    a4 = v22;
  }
  else
  {
    v10 = *(const void **)this;
    v11 = *((_QWORD *)this + 2);
    if (!(v11 | *(_QWORD *)this))
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
  }
  v12 = *((unsigned int *)a2 + 2);
  if (v12 < 0x41)
  {
    v13 = *(const void **)a2;
    v14 = *((_QWORD *)a2 + 2);
    if (v14 | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
  }
  v34 = a4;
  v13 = *(const void **)a2;
  v14 = *((_QWORD *)a2 + 2);
  if (!memcmp(*(const void **)a2, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8))
  {
    v27 = llvm::APInt::countLeadingZerosSlowCase(a2);
    a4 = v34;
    if (v27 == (_DWORD)v12)
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 0);
  }
  else
  {
    a4 = v34;
  }
LABEL_5:
  if (v9 > 0x40)
  {
    v23 = (const void *)v11;
    v24 = a4;
    v25 = memcmp(v10, v23, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    a4 = v24;
    if (v25)
      goto LABEL_7;
    v26 = llvm::APInt::countTrailingOnesSlowCase(this);
    a4 = v24;
    if (v26 != (_DWORD)v9)
      goto LABEL_7;
  }
  else if (v10 != (const void *)v11 || (_DWORD)v9 && v11 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
  {
    goto LABEL_7;
  }
  if (v12 > 0x40)
  {
    v31 = a4;
    v32 = memcmp(v13, (const void *)v14, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    a4 = v31;
    if (!v32)
    {
      v33 = llvm::APInt::countTrailingOnesSlowCase(a2);
      a4 = v31;
      if (v33 == (_DWORD)v12)
        return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 1);
    }
  }
  else if (v13 == (const void *)v14 && (!(_DWORD)v12 || v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v12))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9, 1);
  }
LABEL_7:
  v15 = a4;
  result = llvm::ConstantRange::sub(this, a2, (uint64_t)&v43);
  if ((a3 & 2) != 0)
  {
    llvm::ConstantRange::ssub_sat((const void **)this, a2, (uint64_t)&v35);
    result = (llvm::ConstantRange *)llvm::ConstantRange::intersectWith((uint64_t)&v43, (llvm::ConstantRange *)&v35, v15, (uint64_t)&v39);
    if (v44 >= 0x41)
    {
      result = v43;
      if (v43)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    }
    v43 = v39;
    v44 = v40;
    v40 = 0;
    if (v46 >= 0x41 && (result = v45) != 0)
    {
      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      v45 = v41;
      v46 = v42;
      v42 = 0;
      if (v40 >= 0x41)
      {
        result = v39;
        if (v39)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      }
    }
    else
    {
      v45 = v41;
      v46 = v42;
      v42 = 0;
    }
    if (v38 >= 0x41)
    {
      result = v37;
      if (v37)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    }
    if (v36 >= 0x41)
    {
      result = v35;
      if (v35)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    }
  }
  if ((a3 & 1) != 0)
  {
    llvm::ConstantRange::getUnsignedMax(this, (llvm::APInt *)&v39);
    llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v35);
    v17 = v40;
    if (v40 > 0x40)
    {
      v18 = v39;
      v19 = v35;
      v28 = (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8;
      while (v28)
      {
        v29 = *(_QWORD *)((char *)v39 + v28 - 8);
        v30 = *(_QWORD *)((char *)v35 + v28 - 8);
        v28 -= 8;
        if (v29 != v30)
        {
          v20 = v29 <= v30;
          goto LABEL_16;
        }
      }
      v20 = 0;
    }
    else
    {
      v18 = v39;
      v19 = v35;
      v20 = v39 < v35;
    }
LABEL_16:
    if (v36 >= 0x41 && v19 != 0)
      MEMORY[0x1CAA32F9C]();
    if (v17 >= 0x41 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    if (v20)
    {
      result = llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, *((_DWORD *)this + 2), 0);
      if (v46 >= 0x41)
      {
        result = v45;
        if (v45)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      }
      goto LABEL_34;
    }
    llvm::ConstantRange::usub_sat((const void **)this, a2, (uint64_t)&v35);
    result = (llvm::ConstantRange *)llvm::ConstantRange::intersectWith((uint64_t)&v43, (llvm::ConstantRange *)&v35, v15, (uint64_t)&v39);
    if (v44 >= 0x41)
    {
      result = v43;
      if (v43)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    }
    v43 = v39;
    v44 = v40;
    v40 = 0;
    if (v46 >= 0x41 && (result = v45) != 0)
    {
      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
      v45 = v41;
      v46 = v42;
      v42 = 0;
      if (v40 >= 0x41)
      {
        result = v39;
        if (v39)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      }
    }
    else
    {
      v45 = v41;
      v46 = v42;
      v42 = 0;
    }
    if (v38 >= 0x41)
    {
      result = v37;
      if (v37)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    }
    if (v36 >= 0x41)
    {
      result = v35;
      if (v35)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    }
  }
  *(_DWORD *)(a5 + 8) = v44;
  *(_QWORD *)a5 = v43;
  *(_DWORD *)(a5 + 24) = v46;
  *(_QWORD *)(a5 + 16) = v45;
  v44 = 0;
  v46 = 0;
LABEL_34:
  if (v44 >= 0x41)
  {
    result = v43;
    if (v43)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  }
  return result;
}

BOOL llvm::ConstantRange::isIntrinsicSupported(llvm::ConstantRange *this)
{
  int v1;
  _BOOL8 result;

  v1 = (int)this;
  result = 1;
  if ((v1 - 262) > 0x31 || ((1 << (v1 - 6)) & 0x2184000203001) == 0)
    return v1 == 1;
  return result;
}

void llvm::ConstantRange::intrinsic(const void **this@<X1>, int a2@<W0>, uint64_t a3@<X8>)
{
  const llvm::ConstantRange *v5;
  void **v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  void **v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  size_t v19;
  unsigned int v20;
  int v21;
  void *v22;
  void *__s2;
  unsigned int v24;

  if (a2 == 306)
  {
    llvm::ConstantRange::umin(this, (const llvm::ConstantRange *)(this + 4), a3);
  }
  else if (a2 > 282)
  {
    v5 = (const llvm::ConstantRange *)(this + 4);
    if (a2 > 310)
    {
      llvm::ConstantRange::usub_sat(this, v5, a3);
    }
    else if (a2 == 305)
    {
      llvm::ConstantRange::umax(this, v5, a3);
    }
    else if (a2 == 300)
    {
      llvm::ConstantRange::uadd_sat(this, v5, a3);
    }
    else
    {
      llvm::ConstantRange::ssub_sat(this, v5, a3);
    }
  }
  else if (a2 > 274)
  {
    llvm::ConstantRange::smin(this, (const llvm::ConstantRange *)(this + 4), a3);
  }
  else if (a2 == 274)
  {
    llvm::ConstantRange::smax(this, (const llvm::ConstantRange *)(this + 4), a3);
  }
  else if (a2 == 1)
  {
    v6 = (void **)(this + 4);
    v7 = *((unsigned int *)this + 10);
    v24 = v7;
    if (v7 > 0x40)
    {
      v18 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
      v8 = (void *)operator new[]();
      v19 = v18;
      v6 = (void **)(this + 4);
      memcpy(v8, this[4], v19);
    }
    else
    {
      v8 = *v6;
    }
    __s2 = v8;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v9 = v24;
    v10 = __s2;
    v24 = 0;
    v11 = *((unsigned int *)this + 14);
    if (v11 > 0x40)
    {
      v22 = __s2;
      v20 = v9;
      v21 = memcmp(this[6], __s2, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      v9 = v20;
      v10 = v22;
      v12 = v21 == 0;
    }
    else
    {
      v12 = this[6] == __s2;
    }
    v13 = v12;
    if (v9 >= 0x41)
    {
      if (v10)
      {
        MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        if (v24 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v13)
      v14 = v6;
    else
      v14 = 0;
    v15 = *((_DWORD *)v14 + 2);
    if (v15 > 0x40)
      v16 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v14) == v15;
    else
      v16 = *v14 == 0;
    v17 = v16;
    llvm::ConstantRange::abs((llvm::ConstantRange *)this, v17 ^ 1, a3);
  }
  else
  {
    llvm::ConstantRange::sadd_sat(this, (const llvm::ConstantRange *)(this + 4), a3);
  }
}

uint64_t llvm::ConstantRange::uadd_sat@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned int v14;
  void *__s2;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  void *__s1;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  BOOL v25;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v17);
  v25 = 0;
  llvm::APInt::uadd_ov((const void **)&v19, &v17, &v25, (uint64_t)&v23);
  if (v25)
  {
    sub_1C4832EA4((llvm::APInt *)&__s1, v20, -1, 1);
    if (v24 >= 0x41 && v23)
      MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  }
  else
  {
    v22 = v24;
    __s1 = v23;
  }
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v17);
  v25 = 0;
  llvm::APInt::uadd_ov((const void **)&v19, &v17, &v25, (uint64_t)&v23);
  if (v25)
  {
    sub_1C4832EA4((llvm::APInt *)&__s2, v20, -1, 1);
    if (v24 >= 0x41 && v23)
      MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  }
  else
  {
    v16 = v24;
    __s2 = v23;
  }
  result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v9 = v16;
  v10 = __s2;
  v16 = 0;
  if (v18 >= 0x41)
  {
    result = (uint64_t)v17;
    if (v17)
      result = MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  v11 = v22;
  v12 = __s1;
  v22 = 0;
  if (v11 > 0x40)
  {
    result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v14 = *(_DWORD *)(a3 + 8);
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v14;
      if (v14 > 0x40)
      {
        result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
LABEL_19:
        if (v9 >= 0x41 && v10)
          result = MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        if (v11 >= 0x41 && v12)
          result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
        goto LABEL_39;
      }
      v13 = *(_QWORD *)a3;
LABEL_18:
      *(_QWORD *)result = v13;
      goto LABEL_19;
    }
  }
  else if (__s1 == v10)
  {
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v13 = 0;
    *(_QWORD *)a3 = v13;
    result = a3 + 16;
    *(_DWORD *)(a3 + 24) = v11;
    goto LABEL_18;
  }
  *(_DWORD *)(a3 + 8) = v11;
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 16) = v10;
LABEL_39:
  if (v22 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      return MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::usub_sat@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned int v14;
  void *__s2;
  unsigned int v16;
  unint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  void *__s1;
  unsigned int v22;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v17);
  llvm::APInt::usub_sat((llvm::APInt *)&v19, &v17, (llvm::APInt *)&__s1);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v17);
  llvm::APInt::usub_sat((llvm::APInt *)&v19, &v17, (llvm::APInt *)&__s2);
  result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v9 = v16;
  v10 = __s2;
  v16 = 0;
  if (v18 >= 0x41)
  {
    result = (uint64_t)v17;
    if (v17)
      result = MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  v11 = v22;
  v12 = __s1;
  v22 = 0;
  if (v11 > 0x40)
  {
    result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v14 = *(_DWORD *)(a3 + 8);
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v14;
      if (v14 > 0x40)
      {
        result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
LABEL_15:
        if (v9 >= 0x41 && v10)
          result = MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        if (v11 >= 0x41 && v12)
          result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
        goto LABEL_29;
      }
      v13 = *(_QWORD *)a3;
LABEL_14:
      *(_QWORD *)result = v13;
      goto LABEL_15;
    }
  }
  else if (__s1 == v10)
  {
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v13 = 0;
    *(_QWORD *)a3 = v13;
    result = a3 + 16;
    *(_DWORD *)(a3 + 24) = v11;
    goto LABEL_14;
  }
  *(_DWORD *)(a3 + 8) = v11;
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 16) = v10;
LABEL_29:
  if (v22 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      return MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::sadd_sat@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned int v14;
  void *__s2;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  void *__s1;
  unsigned int v22;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v17);
  llvm::APInt::sadd_sat((const void **)&v19, (const llvm::APInt *)&v17, (llvm::APInt *)&__s1);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v17);
  llvm::APInt::sadd_sat((const void **)&v19, (const llvm::APInt *)&v17, (llvm::APInt *)&__s2);
  result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v9 = v16;
  v10 = __s2;
  v16 = 0;
  if (v18 >= 0x41)
  {
    result = v17;
    if (v17)
      result = MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  v11 = v22;
  v12 = __s1;
  v22 = 0;
  if (v11 > 0x40)
  {
    result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v14 = *(_DWORD *)(a3 + 8);
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v14;
      if (v14 > 0x40)
      {
        result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
LABEL_15:
        if (v9 >= 0x41 && v10)
          result = MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        if (v11 >= 0x41 && v12)
          result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
        goto LABEL_29;
      }
      v13 = *(_QWORD *)a3;
LABEL_14:
      *(_QWORD *)result = v13;
      goto LABEL_15;
    }
  }
  else if (__s1 == v10)
  {
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v13 = 0;
    *(_QWORD *)a3 = v13;
    result = a3 + 16;
    *(_DWORD *)(a3 + 24) = v11;
    goto LABEL_14;
  }
  *(_DWORD *)(a3 + 8) = v11;
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 16) = v10;
LABEL_29:
  if (v22 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      return MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::ssub_sat@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned int v14;
  void *__s2;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  void *__s1;
  unsigned int v22;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v17);
  llvm::APInt::ssub_sat((const void **)&v19, (const llvm::APInt *)&v17, (llvm::APInt *)&__s1);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v19);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v17);
  llvm::APInt::ssub_sat((const void **)&v19, (const llvm::APInt *)&v17, (llvm::APInt *)&__s2);
  result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v9 = v16;
  v10 = __s2;
  v16 = 0;
  if (v18 >= 0x41)
  {
    result = v17;
    if (v17)
      result = MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  v11 = v22;
  v12 = __s1;
  v22 = 0;
  if (v11 > 0x40)
  {
    result = memcmp(__s1, v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v14 = *(_DWORD *)(a3 + 8);
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v14;
      if (v14 > 0x40)
      {
        result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
LABEL_15:
        if (v9 >= 0x41 && v10)
          result = MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        if (v11 >= 0x41 && v12)
          result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
        goto LABEL_29;
      }
      v13 = *(_QWORD *)a3;
LABEL_14:
      *(_QWORD *)result = v13;
      goto LABEL_15;
    }
  }
  else if (__s1 == v10)
  {
    *(_DWORD *)(a3 + 8) = v11;
    if ((_DWORD)v11)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v13 = 0;
    *(_QWORD *)a3 = v13;
    result = a3 + 16;
    *(_DWORD *)(a3 + 24) = v11;
    goto LABEL_14;
  }
  *(_DWORD *)(a3 + 8) = v11;
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 16) = v10;
LABEL_29:
  if (v22 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      return MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::umin(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  void **p_src;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  void *v46;
  int v47;
  void *v48;
  int v49;
  void *__s1;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  void *__src;
  unsigned int v56;
  void *v57;
  unsigned int v58;
  void *__s2;
  unsigned int v60;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_59;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_59;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
LABEL_59:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    goto LABEL_59;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v51);
  if (v56 > 0x40)
  {
    v26 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v26)
      {
        v8 = 0;
        goto LABEL_8;
      }
      v27 = *(_QWORD *)((char *)__src + v26 - 8);
      v28 = *(_QWORD *)(v51 - 8 + v26);
      v26 -= 8;
    }
    while (v27 == v28);
    if (v27 > v28)
      v8 = 1;
    else
      v8 = -1;
  }
  else
  {
    v8 = (unint64_t)__src > v51;
    if ((unint64_t)__src < v51)
      v8 = -1;
  }
LABEL_8:
  v9 = v8 < 0;
  if (v8 >= 0)
    p_src = (void **)&v51;
  else
    p_src = &__src;
  v11 = v52;
  if (v9)
    v12 = v56;
  else
    v12 = v52;
  if (v12 > 0x40)
  {
    __s1 = (void *)operator new[]();
    memcpy(__s1, *p_src, ((v12 + 63) >> 3) & 0x3FFFFFF8);
    v11 = v52;
  }
  else
  {
    __s1 = *p_src;
  }
  if (v11 >= 0x41 && v51)
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  if (v56 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v51);
  v13 = v56;
  if (v56 > 0x40)
  {
    v14 = __src;
    v15 = v51;
    v16 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
    while (v16)
    {
      v29 = *(_QWORD *)((char *)__src + v16 - 8);
      v30 = *(_QWORD *)(v51 + v16 - 8);
      v16 -= 8;
      if (v29 != v30)
      {
        if (v29 > v30)
          LODWORD(v16) = 1;
        else
          LODWORD(v16) = -1;
        break;
      }
    }
  }
  else
  {
    v14 = __src;
    v15 = v51;
    LODWORD(v16) = (unint64_t)__src > v51;
    if ((unint64_t)__src < v51)
      LODWORD(v16) = -1;
  }
  if ((v16 & 0x80000000) == 0)
    v17 = (void **)&v51;
  else
    v17 = &__src;
  v18 = v52;
  if ((v16 & 0x80000000) == 0)
    v19 = v52;
  else
    v19 = v56;
  v60 = v19;
  if (v19 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *v17, (((unint64_t)v60 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *v17;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v20 = v60;
  v21 = __s2;
  v60 = 0;
  if (v18 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  if (v13 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v12 <= 0x40)
  {
    v22 = __s1;
    if (__s1 == v21)
    {
      v56 = v12;
      if ((_DWORD)v12)
        v23 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v12);
      else
        v23 = 0;
      __src = v23;
      v58 = v12;
      v24 = v12;
      goto LABEL_46;
    }
LABEL_75:
    v56 = v12;
    __src = v22;
    v58 = v20;
    v24 = v20;
    v57 = v21;
    goto LABEL_76;
  }
  v31 = memcmp(__s1, v21, ((v12 + 63) >> 3) & 0x3FFFFFF8);
  v22 = __s1;
  if (v31)
    goto LABEL_75;
  v32 = v12;
  v56 = v12;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v24 = v56;
  v58 = v56;
  if (v56 <= 0x40)
  {
    v23 = __src;
    v22 = __s1;
LABEL_46:
    v57 = v23;
    v25 = v23;
    goto LABEL_47;
  }
  v12 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
  v23 = (void *)operator new[]();
  v57 = v23;
  v25 = __src;
  memcpy(v23, __src, v12);
  LODWORD(v12) = v32;
  v22 = __s1;
LABEL_47:
  if (v20 >= 0x41 && v21)
  {
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    v22 = __s1;
  }
  if (v12 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  v21 = v23;
  v22 = v25;
  LODWORD(v12) = v24;
LABEL_76:
  v33 = *((unsigned int *)this + 2);
  if (v33 > 0x40)
  {
    v34 = (char *)this[2];
    v39 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
    while (v39)
    {
      v40 = *(_QWORD *)((char *)*this + v39 - 8);
      v41 = *(_QWORD *)&v34[v39 - 8];
      v39 -= 8;
      v35 = v40 > v41;
      if (v40 != v41)
        goto LABEL_78;
    }
  }
  else
  {
    v34 = (char *)this[2];
    v35 = *this > v34;
LABEL_78:
    if (v35)
    {
      v38 = *((_DWORD *)this + 6);
      if (v38 > 0x40)
      {
        v46 = v22;
        v47 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(this + 2));
        v22 = v46;
        if (v47 != v38)
          goto LABEL_99;
      }
      else if (v34)
      {
        goto LABEL_99;
      }
    }
  }
  v36 = *((unsigned int *)a2 + 2);
  if (v36 > 0x40)
  {
    v37 = *((_QWORD *)a2 + 2);
    v42 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
    while (v42)
    {
      v43 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v42);
      v44 = *(_QWORD *)(v37 - 8 + v42);
      v42 -= 8;
      if (v43 != v44)
      {
        if (v43 <= v44)
          goto LABEL_81;
        goto LABEL_97;
      }
    }
    goto LABEL_81;
  }
  v37 = *((_QWORD *)a2 + 2);
  if (*(_QWORD *)a2 > v37)
  {
LABEL_97:
    v45 = *((_DWORD *)a2 + 6);
    if (v45 > 0x40)
    {
      v48 = v22;
      v49 = llvm::APInt::countLeadingZerosSlowCase((const llvm::ConstantRange *)((char *)a2 + 16));
      v22 = v48;
      if (v49 == v45)
        goto LABEL_81;
    }
    else if (!v37)
    {
      goto LABEL_81;
    }
LABEL_99:
    llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 1, (uint64_t)&v51);
    llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v51, 1, a3);
    if (v54 >= 0x41 && v53)
      MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
    if (v52 >= 0x41 && v51)
      MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    if (v58 >= 0x41 && v57)
      MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
    goto LABEL_82;
  }
LABEL_81:
  *(_DWORD *)(a3 + 8) = v12;
  *(_QWORD *)a3 = v22;
  *(_DWORD *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 16) = v21;
  v56 = 0;
  v58 = 0;
LABEL_82:
  if (v56 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

void llvm::ConstantRange::umax(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  void **p_src;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  void *v46;
  int v47;
  void *v48;
  int v49;
  void *__s1;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  void *__src;
  unsigned int v56;
  void *v57;
  unsigned int v58;
  void *__s2;
  unsigned int v60;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_59;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_59;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
LABEL_59:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    goto LABEL_59;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v51);
  if (v56 > 0x40)
  {
    v26 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v26)
      {
        v8 = 0;
        goto LABEL_8;
      }
      v27 = *(_QWORD *)((char *)__src + v26 - 8);
      v28 = *(_QWORD *)(v51 - 8 + v26);
      v26 -= 8;
    }
    while (v27 == v28);
    if (v27 > v28)
      v8 = 1;
    else
      v8 = -1;
  }
  else
  {
    v8 = (unint64_t)__src > v51;
    if ((unint64_t)__src < v51)
      v8 = -1;
  }
LABEL_8:
  v9 = v8 <= 0;
  if (v8 <= 0)
    p_src = (void **)&v51;
  else
    p_src = &__src;
  v11 = v52;
  if (v9)
    v12 = v52;
  else
    v12 = v56;
  if (v12 > 0x40)
  {
    __s1 = (void *)operator new[]();
    memcpy(__s1, *p_src, ((v12 + 63) >> 3) & 0x3FFFFFF8);
    v11 = v52;
  }
  else
  {
    __s1 = *p_src;
  }
  if (v11 >= 0x41 && v51)
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  if (v56 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v51);
  v13 = v56;
  if (v56 > 0x40)
  {
    v14 = __src;
    v15 = v51;
    v16 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
    while (v16)
    {
      v29 = *(_QWORD *)((char *)__src + v16 - 8);
      v30 = *(_QWORD *)(v51 + v16 - 8);
      v16 -= 8;
      if (v29 != v30)
      {
        if (v29 > v30)
          LODWORD(v16) = 1;
        else
          LODWORD(v16) = -1;
        break;
      }
    }
  }
  else
  {
    v14 = __src;
    v15 = v51;
    LODWORD(v16) = (unint64_t)__src > v51;
    if ((unint64_t)__src < v51)
      LODWORD(v16) = -1;
  }
  if ((int)v16 <= 0)
    v17 = (void **)&v51;
  else
    v17 = &__src;
  v18 = v52;
  if ((int)v16 <= 0)
    v19 = v52;
  else
    v19 = v56;
  v60 = v19;
  if (v19 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *v17, (((unint64_t)v60 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *v17;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v20 = v60;
  v21 = __s2;
  v60 = 0;
  if (v18 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  if (v13 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v12 <= 0x40)
  {
    v22 = __s1;
    if (__s1 == v21)
    {
      v56 = v12;
      if ((_DWORD)v12)
        v23 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v12);
      else
        v23 = 0;
      __src = v23;
      v58 = v12;
      v24 = v12;
      goto LABEL_46;
    }
LABEL_75:
    v56 = v12;
    __src = v22;
    v58 = v20;
    v24 = v20;
    v57 = v21;
    goto LABEL_76;
  }
  v31 = memcmp(__s1, v21, ((v12 + 63) >> 3) & 0x3FFFFFF8);
  v22 = __s1;
  if (v31)
    goto LABEL_75;
  v32 = v12;
  v56 = v12;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v24 = v56;
  v58 = v56;
  if (v56 <= 0x40)
  {
    v23 = __src;
    v22 = __s1;
LABEL_46:
    v57 = v23;
    v25 = v23;
    goto LABEL_47;
  }
  v12 = (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8;
  v23 = (void *)operator new[]();
  v57 = v23;
  v25 = __src;
  memcpy(v23, __src, v12);
  LODWORD(v12) = v32;
  v22 = __s1;
LABEL_47:
  if (v20 >= 0x41 && v21)
  {
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    v22 = __s1;
  }
  if (v12 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  v21 = v23;
  v22 = v25;
  LODWORD(v12) = v24;
LABEL_76:
  v33 = *((unsigned int *)this + 2);
  if (v33 > 0x40)
  {
    v34 = (char *)this[2];
    v39 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
    while (v39)
    {
      v40 = *(_QWORD *)((char *)*this + v39 - 8);
      v41 = *(_QWORD *)&v34[v39 - 8];
      v39 -= 8;
      v35 = v40 > v41;
      if (v40 != v41)
        goto LABEL_78;
    }
  }
  else
  {
    v34 = (char *)this[2];
    v35 = *this > v34;
LABEL_78:
    if (v35)
    {
      v38 = *((_DWORD *)this + 6);
      if (v38 > 0x40)
      {
        v46 = v22;
        v47 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(this + 2));
        v22 = v46;
        if (v47 != v38)
          goto LABEL_99;
      }
      else if (v34)
      {
        goto LABEL_99;
      }
    }
  }
  v36 = *((unsigned int *)a2 + 2);
  if (v36 > 0x40)
  {
    v37 = *((_QWORD *)a2 + 2);
    v42 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
    while (v42)
    {
      v43 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v42);
      v44 = *(_QWORD *)(v37 - 8 + v42);
      v42 -= 8;
      if (v43 != v44)
      {
        if (v43 <= v44)
          goto LABEL_81;
        goto LABEL_97;
      }
    }
    goto LABEL_81;
  }
  v37 = *((_QWORD *)a2 + 2);
  if (*(_QWORD *)a2 > v37)
  {
LABEL_97:
    v45 = *((_DWORD *)a2 + 6);
    if (v45 > 0x40)
    {
      v48 = v22;
      v49 = llvm::APInt::countLeadingZerosSlowCase((const llvm::ConstantRange *)((char *)a2 + 16));
      v22 = v48;
      if (v49 == v45)
        goto LABEL_81;
    }
    else if (!v37)
    {
      goto LABEL_81;
    }
LABEL_99:
    llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 1, (uint64_t)&v51);
    llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v51, 1, a3);
    if (v54 >= 0x41 && v53)
      MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
    if (v52 >= 0x41 && v51)
      MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    if (v58 >= 0x41 && v57)
      MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
    goto LABEL_82;
  }
LABEL_81:
  *(_DWORD *)(a3 + 8) = v12;
  *(_QWORD *)a3 = v22;
  *(_DWORD *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 16) = v21;
  v56 = 0;
  v58 = 0;
LABEL_82:
  if (v56 >= 0x41)
  {
    if (__src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
}

llvm::ConstantRange *llvm::ConstantRange::smin@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  void **p_src;
  size_t v15;
  llvm::ConstantRange *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  unsigned int v22;
  void **v23;
  unsigned int v24;
  llvm::ConstantRange *v25;
  void *v26;
  int v27;
  llvm::ConstantRange *v28;
  uint64_t v29;
  llvm::ConstantRange **v30;
  uint64_t v31;
  llvm::ConstantRange **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  llvm::ConstantRange *result;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  llvm::ConstantRange *v59;
  unsigned int v60;
  llvm::ConstantRange *v61;
  unsigned int v62;
  void *__src;
  unsigned int v64;
  llvm::ConstantRange *v65;
  unsigned int v66;
  void *__s2;
  unsigned int v68;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v59);
  if (v64 > 0x40)
  {
    v29 = *((_QWORD *)__src + ((v64 - 1) >> 6)) & (1 << (v64 - 1));
    v13 = v60;
    v30 = (llvm::ConstantRange **)((char *)v59 + 8 * ((v60 - 1) >> 6));
    if (v60 < 0x41)
      v30 = &v59;
    if ((v29 != 0) == (((unint64_t)*v30 >> (v60 - 1)) & 1))
    {
      v33 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v33)
        {
          v12 = 0;
          goto LABEL_10;
        }
        v34 = *(_QWORD *)((char *)__src + v33 - 8);
        v35 = *(_QWORD *)((char *)v59 + v33 - 8);
        v33 -= 8;
      }
      while (v34 == v35);
      if (v34 > v35)
        v12 = 1;
      else
        v12 = -1;
    }
    else if (v29)
    {
      v12 = -1;
    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v8 = (uint64_t)((_QWORD)__src << -(char)v64) >> -(char)v64;
    v9 = (uint64_t)((_QWORD)v59 << -(char)v64) >> -(char)v64;
    v10 = v8 < v9;
    v11 = v8 > v9;
    if (v10)
      v12 = -1;
    else
      v12 = v11;
    v13 = v60;
  }
LABEL_10:
  if (v12 >= 0)
    p_src = (void **)&v59;
  else
    p_src = &__src;
  if (v12 >= 0)
    v15 = v13;
  else
    v15 = v64;
  if (v15 > 0x40)
  {
    v16 = (llvm::ConstantRange *)operator new[]();
    memcpy(v16, *p_src, ((v15 + 63) >> 3) & 0x3FFFFFF8);
    v13 = v60;
  }
  else
  {
    v16 = (llvm::ConstantRange *)*p_src;
  }
  if (v13 >= 0x41 && v59)
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  if (v64 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v59);
  v17 = v64;
  if (v64 > 0x40)
  {
    v31 = *((_QWORD *)__src + ((v64 - 1) >> 6)) & (1 << (v64 - 1));
    v22 = v60;
    v32 = (llvm::ConstantRange **)((char *)v59 + 8 * ((v60 - 1) >> 6));
    if (v60 < 0x41)
      v32 = &v59;
    if ((v31 != 0) == (((unint64_t)*v32 >> (v60 - 1)) & 1))
    {
      v36 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v36)
        {
          v21 = 0;
          goto LABEL_30;
        }
        v37 = *(_QWORD *)((char *)__src + v36 - 8);
        v38 = *(_QWORD *)((char *)v59 + v36 - 8);
        v36 -= 8;
      }
      while (v37 == v38);
      if (v37 > v38)
        v21 = 1;
      else
        v21 = -1;
    }
    else if (v31)
    {
      v21 = -1;
    }
    else
    {
      v21 = 1;
    }
  }
  else
  {
    v18 = (uint64_t)((_QWORD)__src << -(char)v64) >> -(char)v64;
    v19 = (uint64_t)((_QWORD)v59 << -(char)v64) >> -(char)v64;
    v10 = v18 < v19;
    v20 = v18 > v19;
    if (v10)
      v21 = -1;
    else
      v21 = v20;
    v22 = v60;
  }
LABEL_30:
  if (v21 >= 0)
    v23 = (void **)&v59;
  else
    v23 = &__src;
  if (v21 >= 0)
    v17 = v22;
  v68 = v17;
  if (v17 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *v23, (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *v23;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v24 = v68;
  v25 = (llvm::ConstantRange *)__s2;
  v68 = 0;
  if (v60 >= 0x41 && v59)
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  if (v64 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v15 <= 0x40)
  {
    if (v16 == v25)
    {
      v64 = v15;
      if ((_DWORD)v15)
        v26 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
      else
        v26 = 0;
      __src = v26;
      v66 = v15;
      v27 = v15;
      goto LABEL_49;
    }
LABEL_92:
    v64 = v15;
    __src = v16;
    v66 = v24;
    v27 = v24;
    v65 = v25;
    goto LABEL_93;
  }
  if (memcmp(v16, v25, ((v15 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_92;
  v58 = v15;
  v64 = v15;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v27 = v64;
  v66 = v64;
  if (v64 <= 0x40)
  {
    v26 = __src;
LABEL_49:
    v65 = (llvm::ConstantRange *)v26;
    v28 = (llvm::ConstantRange *)v26;
    goto LABEL_50;
  }
  v15 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
  v26 = (void *)operator new[]();
  v65 = (llvm::ConstantRange *)v26;
  v28 = (llvm::ConstantRange *)__src;
  memcpy(v26, __src, v15);
  LODWORD(v15) = v58;
LABEL_50:
  if (v24 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  if (v15 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  v25 = (llvm::ConstantRange *)v26;
  v16 = v28;
  LODWORD(v15) = v27;
LABEL_93:
  v40 = *((unsigned int *)this + 2);
  if (v40 > 0x40)
  {
    v48 = *((_QWORD *)*this + ((v40 - 1) >> 6)) & (1 << (v40 - 1));
    v44 = *((_DWORD *)this + 6);
    v41 = this[2];
    v49 = (char *)v41 + 8 * ((v44 - 1) >> 6);
    if (v44 < 0x41)
      v49 = this + 2;
    if ((v48 != 0) == ((*v49 >> (v44 - 1)) & 1))
    {
      v52 = ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8;
      while (v52)
      {
        v53 = *(_QWORD *)((char *)*this + v52 - 8);
        v54 = *(_QWORD *)((char *)v41 + v52 - 8);
        v52 -= 8;
        if (v53 != v54)
        {
          if (v53 <= v54)
            goto LABEL_95;
          goto LABEL_101;
        }
      }
      goto LABEL_95;
    }
    if (v48)
      goto LABEL_95;
  }
  else
  {
    v41 = this[2];
    if ((uint64_t)((_QWORD)*this << -(char)v40) >> -(char)v40 <= (uint64_t)((_QWORD)v41 << -(char)v40) >> -(char)v40)
      goto LABEL_95;
    v44 = *((_DWORD *)this + 6);
  }
LABEL_101:
  v45 = v44 - 1;
  if (v44 > 0x40)
  {
    if (((*((_QWORD *)v41 + (v45 >> 6)) >> v45) & 1) == 0
      || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) != v45)
    {
      goto LABEL_107;
    }
  }
  else if (v41 != (const void *)(1 << v45))
  {
    goto LABEL_107;
  }
LABEL_95:
  result = (const llvm::ConstantRange *)((char *)a2 + 16);
  v42 = *((unsigned int *)a2 + 2);
  if (v42 <= 0x40)
  {
    v43 = *((_QWORD *)a2 + 2);
    if ((uint64_t)(*(_QWORD *)a2 << -(char)v42) >> -(char)v42 <= v43 << -(char)v42 >> -(char)v42)
      goto LABEL_97;
    v46 = *((_DWORD *)a2 + 6);
    goto LABEL_105;
  }
  v50 = *(_QWORD *)(*(_QWORD *)a2 + 8 * ((v42 - 1) >> 6)) & (1 << (v42 - 1));
  v46 = *((_DWORD *)a2 + 6);
  v43 = *((_QWORD *)a2 + 2);
  v51 = (_QWORD *)(v43 + 8 * ((v46 - 1) >> 6));
  if (v46 < 0x41)
    v51 = (_QWORD *)((char *)a2 + 16);
  if ((v50 != 0) == ((*v51 >> (v46 - 1)) & 1))
  {
    v55 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
    while (v55)
    {
      v56 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v55);
      v57 = *(_QWORD *)(v43 + v55 - 8);
      v55 -= 8;
      if (v56 != v57)
      {
        if (v56 <= v57)
          goto LABEL_97;
        goto LABEL_105;
      }
    }
    goto LABEL_97;
  }
  if (!v50)
  {
LABEL_105:
    v47 = v46 - 1;
    if (v46 > 0x40)
    {
      if (((*(_QWORD *)(v43 + 8 * (v47 >> 6)) >> v47) & 1) != 0)
      {
        result = (llvm::ConstantRange *)llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
        if ((_DWORD)result == v47)
          goto LABEL_97;
      }
    }
    else if (v43 == 1 << v47)
    {
      goto LABEL_97;
    }
LABEL_107:
    llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 2, (uint64_t)&v59);
    result = (llvm::ConstantRange *)llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v59, 2, a3);
    if (v62 >= 0x41)
    {
      result = v61;
      if (v61)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
    }
    if (v60 >= 0x41)
    {
      result = v59;
      if (v59)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    }
    if (v66 >= 0x41)
    {
      result = v65;
      if (v65)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
    }
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a3 + 8) = v15;
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 24) = v27;
  *(_QWORD *)(a3 + 16) = v25;
  v64 = 0;
  v66 = 0;
LABEL_98:
  if (v64 >= 0x41)
  {
    result = (llvm::ConstantRange *)__src;
    if (__src)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

llvm::ConstantRange *llvm::ConstantRange::smax@<X0>(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  void **p_src;
  size_t v15;
  llvm::ConstantRange *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  unsigned int v22;
  void **v23;
  unsigned int v24;
  llvm::ConstantRange *v25;
  void *v26;
  int v27;
  llvm::ConstantRange *v28;
  uint64_t v29;
  llvm::ConstantRange **v30;
  uint64_t v31;
  llvm::ConstantRange **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  llvm::ConstantRange *result;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  llvm::ConstantRange *v59;
  unsigned int v60;
  llvm::ConstantRange *v61;
  unsigned int v62;
  void *__src;
  unsigned int v64;
  llvm::ConstantRange *v65;
  unsigned int v66;
  void *__s2;
  unsigned int v68;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v59);
  if (v64 > 0x40)
  {
    v29 = *((_QWORD *)__src + ((v64 - 1) >> 6)) & (1 << (v64 - 1));
    v13 = v60;
    v30 = (llvm::ConstantRange **)((char *)v59 + 8 * ((v60 - 1) >> 6));
    if (v60 < 0x41)
      v30 = &v59;
    if ((v29 != 0) == (((unint64_t)*v30 >> (v60 - 1)) & 1))
    {
      v33 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v33)
        {
          v12 = 0;
          goto LABEL_10;
        }
        v34 = *(_QWORD *)((char *)__src + v33 - 8);
        v35 = *(_QWORD *)((char *)v59 + v33 - 8);
        v33 -= 8;
      }
      while (v34 == v35);
      if (v34 > v35)
        v12 = 1;
      else
        v12 = -1;
    }
    else if (v29)
    {
      v12 = -1;
    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v8 = (uint64_t)((_QWORD)__src << -(char)v64) >> -(char)v64;
    v9 = (uint64_t)((_QWORD)v59 << -(char)v64) >> -(char)v64;
    v10 = v8 < v9;
    v11 = v8 > v9;
    if (v10)
      v12 = -1;
    else
      v12 = v11;
    v13 = v60;
  }
LABEL_10:
  if (v12 <= 0)
    p_src = (void **)&v59;
  else
    p_src = &__src;
  if (v12 <= 0)
    v15 = v13;
  else
    v15 = v64;
  if (v15 > 0x40)
  {
    v16 = (llvm::ConstantRange *)operator new[]();
    memcpy(v16, *p_src, ((v15 + 63) >> 3) & 0x3FFFFFF8);
    v13 = v60;
  }
  else
  {
    v16 = (llvm::ConstantRange *)*p_src;
  }
  if (v13 >= 0x41 && v59)
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  if (v64 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&__src);
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v59);
  v17 = v64;
  if (v64 > 0x40)
  {
    v31 = *((_QWORD *)__src + ((v64 - 1) >> 6)) & (1 << (v64 - 1));
    v22 = v60;
    v32 = (llvm::ConstantRange **)((char *)v59 + 8 * ((v60 - 1) >> 6));
    if (v60 < 0x41)
      v32 = &v59;
    if ((v31 != 0) == (((unint64_t)*v32 >> (v60 - 1)) & 1))
    {
      v36 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v36)
        {
          v21 = 0;
          goto LABEL_30;
        }
        v37 = *(_QWORD *)((char *)__src + v36 - 8);
        v38 = *(_QWORD *)((char *)v59 + v36 - 8);
        v36 -= 8;
      }
      while (v37 == v38);
      if (v37 > v38)
        v21 = 1;
      else
        v21 = -1;
    }
    else if (v31)
    {
      v21 = -1;
    }
    else
    {
      v21 = 1;
    }
  }
  else
  {
    v18 = (uint64_t)((_QWORD)__src << -(char)v64) >> -(char)v64;
    v19 = (uint64_t)((_QWORD)v59 << -(char)v64) >> -(char)v64;
    v10 = v18 < v19;
    v20 = v18 > v19;
    if (v10)
      v21 = -1;
    else
      v21 = v20;
    v22 = v60;
  }
LABEL_30:
  if (v21 <= 0)
    v23 = (void **)&v59;
  else
    v23 = &__src;
  if (v21 <= 0)
    v17 = v22;
  v68 = v17;
  if (v17 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *v23, (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *v23;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v24 = v68;
  v25 = (llvm::ConstantRange *)__s2;
  v68 = 0;
  if (v60 >= 0x41 && v59)
    MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  if (v64 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v15 <= 0x40)
  {
    if (v16 == v25)
    {
      v64 = v15;
      if ((_DWORD)v15)
        v26 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
      else
        v26 = 0;
      __src = v26;
      v66 = v15;
      v27 = v15;
      goto LABEL_49;
    }
LABEL_92:
    v64 = v15;
    __src = v16;
    v66 = v24;
    v27 = v24;
    v65 = v25;
    goto LABEL_93;
  }
  if (memcmp(v16, v25, ((v15 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_92;
  v58 = v15;
  v64 = v15;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v27 = v64;
  v66 = v64;
  if (v64 <= 0x40)
  {
    v26 = __src;
LABEL_49:
    v65 = (llvm::ConstantRange *)v26;
    v28 = (llvm::ConstantRange *)v26;
    goto LABEL_50;
  }
  v15 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
  v26 = (void *)operator new[]();
  v65 = (llvm::ConstantRange *)v26;
  v28 = (llvm::ConstantRange *)__src;
  memcpy(v26, __src, v15);
  LODWORD(v15) = v58;
LABEL_50:
  if (v24 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  if (v15 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  v25 = (llvm::ConstantRange *)v26;
  v16 = v28;
  LODWORD(v15) = v27;
LABEL_93:
  v40 = *((unsigned int *)this + 2);
  if (v40 > 0x40)
  {
    v48 = *((_QWORD *)*this + ((v40 - 1) >> 6)) & (1 << (v40 - 1));
    v44 = *((_DWORD *)this + 6);
    v41 = this[2];
    v49 = (char *)v41 + 8 * ((v44 - 1) >> 6);
    if (v44 < 0x41)
      v49 = this + 2;
    if ((v48 != 0) == ((*v49 >> (v44 - 1)) & 1))
    {
      v52 = ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8;
      while (v52)
      {
        v53 = *(_QWORD *)((char *)*this + v52 - 8);
        v54 = *(_QWORD *)((char *)v41 + v52 - 8);
        v52 -= 8;
        if (v53 != v54)
        {
          if (v53 <= v54)
            goto LABEL_95;
          goto LABEL_101;
        }
      }
      goto LABEL_95;
    }
    if (v48)
      goto LABEL_95;
  }
  else
  {
    v41 = this[2];
    if ((uint64_t)((_QWORD)*this << -(char)v40) >> -(char)v40 <= (uint64_t)((_QWORD)v41 << -(char)v40) >> -(char)v40)
      goto LABEL_95;
    v44 = *((_DWORD *)this + 6);
  }
LABEL_101:
  v45 = v44 - 1;
  if (v44 > 0x40)
  {
    if (((*((_QWORD *)v41 + (v45 >> 6)) >> v45) & 1) == 0
      || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 2) != v45)
    {
      goto LABEL_107;
    }
  }
  else if (v41 != (const void *)(1 << v45))
  {
    goto LABEL_107;
  }
LABEL_95:
  result = (const llvm::ConstantRange *)((char *)a2 + 16);
  v42 = *((unsigned int *)a2 + 2);
  if (v42 <= 0x40)
  {
    v43 = *((_QWORD *)a2 + 2);
    if ((uint64_t)(*(_QWORD *)a2 << -(char)v42) >> -(char)v42 <= v43 << -(char)v42 >> -(char)v42)
      goto LABEL_97;
    v46 = *((_DWORD *)a2 + 6);
    goto LABEL_105;
  }
  v50 = *(_QWORD *)(*(_QWORD *)a2 + 8 * ((v42 - 1) >> 6)) & (1 << (v42 - 1));
  v46 = *((_DWORD *)a2 + 6);
  v43 = *((_QWORD *)a2 + 2);
  v51 = (_QWORD *)(v43 + 8 * ((v46 - 1) >> 6));
  if (v46 < 0x41)
    v51 = (_QWORD *)((char *)a2 + 16);
  if ((v50 != 0) == ((*v51 >> (v46 - 1)) & 1))
  {
    v55 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
    while (v55)
    {
      v56 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v55);
      v57 = *(_QWORD *)(v43 + v55 - 8);
      v55 -= 8;
      if (v56 != v57)
      {
        if (v56 <= v57)
          goto LABEL_97;
        goto LABEL_105;
      }
    }
    goto LABEL_97;
  }
  if (!v50)
  {
LABEL_105:
    v47 = v46 - 1;
    if (v46 > 0x40)
    {
      if (((*(_QWORD *)(v43 + 8 * (v47 >> 6)) >> v47) & 1) != 0)
      {
        result = (llvm::ConstantRange *)llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
        if ((_DWORD)result == v47)
          goto LABEL_97;
      }
    }
    else if (v43 == 1 << v47)
    {
      goto LABEL_97;
    }
LABEL_107:
    llvm::ConstantRange::unionWith((uint64_t)this, (unsigned int *)a2, 2, (uint64_t)&v59);
    result = (llvm::ConstantRange *)llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v59, 2, a3);
    if (v62 >= 0x41)
    {
      result = v61;
      if (v61)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
    }
    if (v60 >= 0x41)
    {
      result = v59;
      if (v59)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
    }
    if (v66 >= 0x41)
    {
      result = v65;
      if (v65)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
    }
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a3 + 8) = v15;
  *(_QWORD *)a3 = v16;
  *(_DWORD *)(a3 + 24) = v27;
  *(_QWORD *)(a3 + 16) = v25;
  v64 = 0;
  v66 = 0;
LABEL_98:
  if (v64 >= 0x41)
  {
    result = (llvm::ConstantRange *)__src;
    if (__src)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

llvm::ConstantRange *llvm::ConstantRange::abs@<X0>(llvm::ConstantRange *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void **v6;
  uint64_t v7;
  unint64_t v8;
  llvm::ConstantRange *result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  size_t v47;
  unsigned int v48;
  void *v49;
  unint64_t v50;
  size_t v51;
  unsigned int v52;
  void *v53;
  size_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  void *v65;
  size_t v66;
  unint64_t *v67;
  const void *v68;
  unsigned int v69;
  unint64_t *v70;
  unint64_t *v71;
  unsigned int v72;
  unint64_t *v73;
  unsigned int v74;
  llvm::ConstantRange *v75;
  unsigned int v76;
  void *v77;
  unsigned int v78;
  void *v79;
  unsigned int v80;
  void *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  void *v87;
  unsigned int v88;
  unint64_t *v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  unsigned int v94;

  v6 = (const void **)((char *)this + 16);
  v7 = *((unsigned int *)this + 2);
  if (v7 < 0x41)
  {
    v8 = *((_QWORD *)this + 2);
    if (v8 | *(_QWORD *)this)
    {
      if ((uint64_t)(*(_QWORD *)this << -(char)v7) >> -(char)v7 <= (uint64_t)(v8 << -(char)v7) >> -(char)v7)
        goto LABEL_4;
      v10 = *((_DWORD *)this + 6);
      goto LABEL_11;
    }
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v7, 0);
  }
  v28 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 2);
  v29 = (unint64_t)(v7 + 63) >> 3;
  if (!memcmp(*(const void **)this, (const void *)v8, v29 & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v7)
  {
    return llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v7, 0);
  }
  v30 = *(_QWORD *)(v28 + 8 * ((v7 - 1) >> 6)) & (1 << (v7 - 1));
  v10 = *((_DWORD *)this + 6);
  v31 = (_QWORD *)(v8 + 8 * ((v10 - 1) >> 6));
  if (v10 < 0x41)
    v31 = v6;
  if ((v30 != 0) == ((*v31 >> (v10 - 1)) & 1))
  {
    v33 = v29 & 0x3FFFFFF8;
    while (v33)
    {
      v34 = *(_QWORD *)(v28 - 8 + v33);
      v35 = *(_QWORD *)(v8 + v33 - 8);
      v33 -= 8;
      if (v34 != v35)
      {
        if (v34 <= v35)
          goto LABEL_4;
        goto LABEL_11;
      }
    }
    goto LABEL_4;
  }
  if (v30)
    goto LABEL_4;
LABEL_11:
  v11 = v10 - 1;
  if (v10 <= 0x40)
  {
    if (v8 != 1 << v11)
      goto LABEL_13;
LABEL_4:
    llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v93);
    result = (llvm::ConstantRange *)llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v91);
    if (!a2)
      goto LABEL_78;
    if (v94 > 0x40)
    {
      v39 = v94 - 1;
      if (((*(_QWORD *)(v93 + 8 * ((v94 - 1) >> 6)) >> (v94 - 1)) & 1) == 0)
        goto LABEL_78;
      result = (llvm::ConstantRange *)llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v93);
      if ((_DWORD)result != v39)
        goto LABEL_78;
    }
    else if (v93 != 1 << (v94 - 1))
    {
      goto LABEL_78;
    }
    if (v92 > 0x40)
    {
      if (((*(_QWORD *)(v91 + 8 * ((v92 - 1) >> 6)) >> (v92 - 1)) & 1) != 0)
      {
        v40 = v92 - 1;
        if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v91) == v40)
          goto LABEL_9;
      }
    }
    else if (v91 == 1 << (v92 - 1))
    {
LABEL_9:
      result = llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 0);
      goto LABEL_143;
    }
    result = (llvm::ConstantRange *)llvm::APInt::operator++((uint64_t)&v93);
LABEL_78:
    if (v94 >= 0x41)
      v41 = (unint64_t *)(v93 + 8 * ((v94 - 1) >> 6));
    else
      v41 = &v93;
    if (((*v41 >> (v94 - 1)) & 1) == 0)
    {
      v44 = *((_DWORD *)this + 2);
      *(_DWORD *)(a3 + 8) = v44;
      if (v44 > 0x40)
      {
        v64 = (void *)operator new[]();
        *(_QWORD *)a3 = v64;
        result = (llvm::ConstantRange *)memcpy(v64, *(const void **)this, (((unint64_t)*(unsigned int *)(a3 + 8) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)a3 = *(_QWORD *)this;
      }
      v45 = *((_DWORD *)this + 6);
      *(_DWORD *)(a3 + 24) = v45;
      if (v45 > 0x40)
      {
        v65 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v65;
        result = (llvm::ConstantRange *)memcpy(v65, *v6, (((unint64_t)*(unsigned int *)(a3 + 24) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(a3 + 16) = *v6;
      }
      goto LABEL_143;
    }
    v42 = (unint64_t *)(v91 + 8 * ((v92 - 1) >> 6));
    if (v92 < 0x41)
      v42 = &v91;
    if (((*v42 >> (v92 - 1)) & 1) != 0)
    {
      v82 = v92;
      if (v92 > 0x40)
      {
        v47 = (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8;
        v81 = (void *)operator new[]();
        memcpy(v81, (const void *)v91, v47);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v81);
      }
      else
      {
        if (v92)
          v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v92;
        else
          v43 = 0;
        v81 = (void *)(v43 & ~v91);
      }
      llvm::APInt::operator++((uint64_t)&v81);
      v48 = v82;
      v49 = v81;
      v82 = 0;
      v78 = v94;
      if (v94 > 0x40)
      {
        v51 = (((unint64_t)v94 + 63) >> 3) & 0x3FFFFFF8;
        v77 = (void *)operator new[]();
        memcpy(v77, (const void *)v93, v51);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v77);
      }
      else
      {
        if (v94)
          v50 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
        else
          v50 = 0;
        v77 = (void *)(v50 & ~v93);
      }
      llvm::APInt::operator++((uint64_t)&v77);
      v80 = v78;
      v79 = v77;
      v78 = 0;
      result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&v79, 1uLL);
      v52 = v80;
      v53 = v79;
      v80 = 0;
      *(_DWORD *)(a3 + 8) = v48;
      *(_QWORD *)a3 = v49;
      *(_DWORD *)(a3 + 24) = v52;
      *(_QWORD *)(a3 + 16) = v53;
      if (v78 >= 0x41)
      {
        result = (llvm::ConstantRange *)v77;
        if (v77)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
      }
      if (v82 < 0x41)
        goto LABEL_143;
      result = (llvm::ConstantRange *)v81;
      if (!v81)
        goto LABEL_143;
      goto LABEL_142;
    }
    sub_1C4832EA4((llvm::APInt *)&v75, *((_DWORD *)this + 2), 0, 0);
    v72 = v94;
    if (v94 > 0x40)
    {
      v54 = (((unint64_t)v94 + 63) >> 3) & 0x3FFFFFF8;
      v71 = (unint64_t *)operator new[]();
      memcpy(v71, (const void *)v93, v54);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v71);
    }
    else
    {
      if (v94)
        v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
      else
        v46 = 0;
      v71 = (unint64_t *)(v46 & ~v93);
    }
    llvm::APInt::operator++((uint64_t)&v71);
    v55 = v72;
    v56 = v71;
    v72 = 0;
    if (v55 > 0x40)
    {
      v57 = (unint64_t *)v91;
      v61 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
      while (v61)
      {
        v62 = *(unint64_t *)((char *)v71 + v61 - 8);
        v63 = *(_QWORD *)(v91 - 8 + v61);
        v61 -= 8;
        v58 = v62 > v63;
        if (v62 != v63)
          goto LABEL_112;
      }
      v59 = 0;
    }
    else
    {
      v57 = (unint64_t *)v91;
      v58 = (unint64_t)v71 > v91;
LABEL_112:
      v59 = v58;
      if (v58)
      {
        v60 = v55;
        goto LABEL_126;
      }
    }
    v60 = v92;
LABEL_126:
    v74 = v60;
    if (v60 > 0x40)
    {
      v66 = (((unint64_t)v60 + 63) >> 3) & 0x3FFFFFF8;
      v67 = (unint64_t *)operator new[]();
      v73 = v67;
      if ((v59 & 1) != 0)
        v68 = v56;
      else
        v68 = (const void *)v91;
      memcpy(v67, v68, v66);
    }
    else
    {
      if ((v59 & 1) != 0)
        v57 = v71;
      v73 = v57;
    }
    result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&v73, 1uLL);
    v69 = v74;
    v70 = v73;
    v74 = 0;
    *(_DWORD *)(a3 + 8) = v76;
    *(_QWORD *)a3 = v75;
    v76 = 0;
    *(_DWORD *)(a3 + 24) = v69;
    *(_QWORD *)(a3 + 16) = v70;
    if (v55 >= 0x41 && v56)
      result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
    if (v72 >= 0x41)
    {
      result = (llvm::ConstantRange *)v71;
      if (v71)
        result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
    }
    if (v76 < 0x41 || (result = v75) == 0)
    {
LABEL_143:
      if (v92 >= 0x41)
      {
        result = (llvm::ConstantRange *)v91;
        if (v91)
          result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
      }
      if (v94 >= 0x41)
      {
        result = (llvm::ConstantRange *)v93;
        if (v93)
          return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      return result;
    }
LABEL_142:
    result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    goto LABEL_143;
  }
  if (((*(_QWORD *)(v8 + 8 * (v11 >> 6)) >> v11) & 1) != 0
    && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v6) == v11)
  {
    goto LABEL_4;
  }
LABEL_13:
  v94 = 1;
  v93 = 0;
  if ((sub_1C49591DC((llvm::APInt *)v6) & 1) != 0 || (sub_1C49591DC(this) & 1) == 0)
  {
    sub_1C4832EA4((llvm::APInt *)&v91, *((_DWORD *)this + 2), 0, 0);
    v14 = (unint64_t *)v91;
    v93 = v91;
    LODWORD(v15) = v92;
    v94 = v92;
    v16 = (unint64_t *)v91;
    goto LABEL_20;
  }
  v12 = *((unsigned int *)this + 6);
  v88 = v12;
  if (v12 > 0x40)
  {
    v25 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    v87 = (void *)operator new[]();
    memcpy(v87, *v6, v25);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v87);
  }
  else
  {
    if ((_DWORD)v12)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    else
      v13 = 0;
    v87 = (void *)(v13 & ~(unint64_t)*v6);
  }
  llvm::APInt::operator++((uint64_t)&v87);
  v90 = v88;
  v89 = (unint64_t *)v87;
  v88 = 0;
  llvm::APInt::operator+=((uint64_t)&v89, 1uLL);
  v26 = v90;
  v27 = v89;
  v90 = 0;
  v15 = *((unsigned int *)this + 2);
  if (v15 > 0x40)
  {
    v36 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
    while (v36)
    {
      v37 = *(_QWORD *)(*(_QWORD *)this - 8 + v36);
      v38 = *(unint64_t *)((char *)v89 + v36 - 8);
      v36 -= 8;
      if (v37 != v38)
      {
        if (v37 > v38)
          break;
        llvm::APInt::reallocate((uint64_t)&v93, *((_DWORD *)this + 2));
        LODWORD(v15) = v94;
        if (v94 >= 0x41)
        {
          v32 = *(unint64_t **)this;
          goto LABEL_48;
        }
        v14 = *(unint64_t **)this;
        goto LABEL_66;
      }
    }
  }
  else
  {
    v14 = *(unint64_t **)this;
    if (*(_QWORD *)this < (unint64_t)v89)
      goto LABEL_39;
  }
  if (v26 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)&v93, v26);
    LODWORD(v15) = v94;
    if (v94 < 0x41)
    {
      v14 = v27;
LABEL_66:
      v93 = (unint64_t)v14;
    }
    else
    {
      v32 = v27;
LABEL_48:
      v14 = (unint64_t *)v93;
      memcpy((void *)v93, v32, (((unint64_t)v15 + 63) >> 3) & 0x3FFFFFF8);
    }
    goto LABEL_49;
  }
  LODWORD(v15) = v26;
  v14 = v89;
LABEL_39:
  v93 = (unint64_t)v14;
  v94 = v15;
LABEL_49:
  v16 = v14;
  if (v26 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  if (v90 >= 0x41 && v89)
    MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
  if (v88 >= 0x41 && v87)
    MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
LABEL_20:
  if (a2)
  {
    if (v15 >= 0x41)
    {
      v16 = (unint64_t *)operator new[]();
      memcpy(v16, v14, (((unint64_t)v15 + 63) >> 3) & 0x3FFFFFF8);
    }
    v17 = *((_DWORD *)this + 2);
    v18 = &v85;
    result = sub_1C4832EA4((llvm::APInt *)&v85, v17, 0, 0);
    v19 = v17 - 1;
    if (v86 >= 0x41)
      v18 = (uint64_t *)(v85 + 8 * (v19 >> 6));
    *v18 |= 1 << v19;
    *(_DWORD *)(a3 + 8) = v15;
    *(_QWORD *)a3 = v16;
    *(_DWORD *)(a3 + 24) = v86;
    *(_QWORD *)(a3 + 16) = v85;
    v86 = 0;
  }
  else
  {
    if (v15 >= 0x41)
    {
      v16 = (unint64_t *)operator new[]();
      memcpy(v16, v14, (((unint64_t)v15 + 63) >> 3) & 0x3FFFFFF8);
    }
    v20 = *((_DWORD *)this + 2);
    v21 = &v83;
    sub_1C4832EA4((llvm::APInt *)&v83, v20, 0, 0);
    v22 = v20 - 1;
    if (v84 >= 0x41)
      v21 = (uint64_t *)(v83 + 8 * (v22 >> 6));
    *v21 |= 1 << v22;
    result = (llvm::ConstantRange *)llvm::APInt::operator+=((uint64_t)&v83, 1uLL);
    v23 = v84;
    v24 = v83;
    v84 = 0;
    *(_DWORD *)(a3 + 8) = v15;
    *(_QWORD *)a3 = v16;
    *(_DWORD *)(a3 + 24) = v23;
    *(_QWORD *)(a3 + 16) = v24;
  }
  if (v15 >= 0x41 && v14)
  {
    result = (llvm::ConstantRange *)v14;
    return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::ConstantRange::smul_fast@<X0>(llvm::ConstantRange *this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t result;
  unsigned int v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t i;
  void *__s2;
  unsigned int v52;
  BOOL v53[4];
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[8];
  _BYTE v66[8];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*(const void **)this, *((const void **)this + 2), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase(this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!(*((_QWORD *)this + 2) | *(_QWORD *)this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v60);
  llvm::ConstantRange::getSignedMax(this, (llvm::APInt *)&v58);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v56);
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v54);
  *(_DWORD *)v53 = 0;
  llvm::APInt::smul_ov((const void **)&v60, (const llvm::APInt *)&v56, &v53[3], (llvm::APInt *)v62);
  llvm::APInt::smul_ov((const void **)&v60, (const llvm::APInt *)&v54, &v53[2], (llvm::APInt *)&v63);
  llvm::APInt::smul_ov((const void **)&v58, (const llvm::APInt *)&v56, &v53[1], (llvm::APInt *)&v64);
  llvm::APInt::smul_ov((const void **)&v58, (const llvm::APInt *)&v54, v53, (llvm::APInt *)v65);
  if (!v53[3] && !v53[2] && !v53[1] && !v53[0])
  {
    v8 = 1;
    v9 = v62;
    do
    {
      v10 = v9;
      v11 = &v62[16 * v8];
      v12 = *((unsigned int *)v11 + 2);
      if (v12 > 0x40)
      {
        v35 = *(_QWORD *)(*(_QWORD *)v11 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
        v36 = *((_DWORD *)v9 + 2);
        v37 = v36 - 1;
        if (v36 >= 0x41)
          v38 = (_QWORD *)(*(_QWORD *)v9 + 8 * (v37 >> 6));
        else
          v38 = v9;
        if ((v35 != 0) == ((*v38 >> v37) & 1))
        {
          v43 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v43)
            {
              v17 = 0;
              goto LABEL_14;
            }
            v44 = *(_QWORD *)(*(_QWORD *)v11 - 8 + v43);
            v45 = *(_QWORD *)(*(_QWORD *)v9 - 8 + v43);
            v43 -= 8;
          }
          while (v44 == v45);
          if (v44 > v45)
            v17 = 1;
          else
            v17 = -1;
        }
        else if (v35)
        {
          v17 = -1;
        }
        else
        {
          v17 = 1;
        }
      }
      else
      {
        v13 = -v12;
        v14 = (uint64_t)(*(_QWORD *)v11 << v13) >> v13;
        v15 = (uint64_t)(*(_QWORD *)v9 << v13) >> v13;
        v16 = v14 < v15;
        v17 = v14 > v15;
        if (v16)
          v17 = -1;
      }
LABEL_14:
      if (v17 < 0)
        v9 = &v62[16 * v8];
      ++v8;
    }
    while (v8 != 4);
    v18 = (unsigned int *)v66;
    v19 = (unsigned int *)(v10 + 8);
    if (v17 < 0)
      v19 = (unsigned int *)v66;
    v20 = *v19;
    if (v20 > 0x40)
    {
      v21 = (void *)operator new[]();
      memcpy(v21, *(const void **)v9, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
      v18 = (unsigned int *)v66;
    }
    else
    {
      v21 = *(void **)v9;
    }
    v22 = 1;
    v23 = v62;
    do
    {
      v24 = v23;
      v25 = &v62[16 * v22];
      v26 = *((unsigned int *)v23 + 2);
      if (v26 > 0x40)
      {
        v39 = *(_QWORD *)(*(_QWORD *)v23 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
        v40 = *((_DWORD *)v25 + 2);
        v41 = v40 - 1;
        if (v40 >= 0x41)
          v42 = (_QWORD *)(*(_QWORD *)v25 + 8 * (v41 >> 6));
        else
          v42 = &v62[16 * v22];
        if ((v39 != 0) == ((*v42 >> v41) & 1))
        {
          v46 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v46)
            {
              v30 = 0;
              goto LABEL_26;
            }
            v47 = *(_QWORD *)(*(_QWORD *)v23 - 8 + v46);
            v48 = *(_QWORD *)(*(_QWORD *)v25 - 8 + v46);
            v46 -= 8;
          }
          while (v47 == v48);
          if (v47 > v48)
            v30 = 1;
          else
            v30 = -1;
        }
        else if (v39)
        {
          v30 = -1;
        }
        else
        {
          v30 = 1;
        }
      }
      else
      {
        v27 = -v26;
        v28 = (uint64_t)(*(_QWORD *)v23 << v27) >> v27;
        v29 = (uint64_t)(*(_QWORD *)v25 << v27) >> v27;
        v16 = v28 < v29;
        v30 = v28 > v29;
        if (v16)
          v30 = -1;
      }
LABEL_26:
      if (v30 < 0)
        v23 = &v62[16 * v22];
      ++v22;
    }
    while (v22 != 4);
    if (v30 >= 0)
      v18 = (unsigned int *)(v24 + 8);
    v52 = *v18;
    if (v52 > 0x40)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)v23, (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = *(void **)v23;
    }
    result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v32 = v52;
    v33 = __s2;
    v52 = 0;
    if (v20 > 0x40)
    {
      result = memcmp(v21, __s2, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
      if (!(_DWORD)result)
      {
        *(_DWORD *)(a3 + 8) = v20;
        llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
        v49 = *(_DWORD *)(a3 + 8);
        result = a3 + 16;
        *(_DWORD *)(a3 + 24) = v49;
        if (v49 > 0x40)
        {
          result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
          goto LABEL_39;
        }
        v34 = *(_QWORD *)a3;
LABEL_38:
        *(_QWORD *)result = v34;
LABEL_39:
        if (v32 >= 0x41 && v33)
          result = MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
        goto LABEL_81;
      }
    }
    else if (v21 == __s2)
    {
      *(_DWORD *)(a3 + 8) = v20;
      if ((_DWORD)v20)
        v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
      else
        v34 = 0;
      *(_QWORD *)a3 = v34;
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v20;
      goto LABEL_38;
    }
    *(_DWORD *)(a3 + 8) = v20;
    *(_QWORD *)a3 = v21;
    *(_DWORD *)(a3 + 24) = v32;
    *(_QWORD *)(a3 + 16) = v33;
    LODWORD(v20) = 0;
LABEL_81:
    if (v52 >= 0x41)
    {
      result = (uint64_t)__s2;
      if (__s2)
        result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    }
    if (v20 >= 0x41 && v21)
      result = MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    goto LABEL_83;
  }
  result = (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, *((_DWORD *)this + 2), 1);
LABEL_83:
  for (i = 0; i != -64; i -= 16)
  {
    if (*(_DWORD *)&v66[i] >= 0x41u)
    {
      result = *(_QWORD *)&v65[i];
      if (result)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
  }
  if (v55 >= 0x41)
  {
    result = v54;
    if (v54)
      result = MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  }
  if (v57 >= 0x41)
  {
    result = v56;
    if (v56)
      result = MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
  }
  if (v59 >= 0x41)
  {
    result = v58;
    if (v58)
      result = MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
  }
  if (v61 >= 0x41)
  {
    result = v60;
    if (v60)
      return MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
  }
  return result;
}

llvm::ConstantRange *llvm::ConstantRange::binaryNot@<X0>(llvm::ConstantRange *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  unsigned int v6;
  void *v7;
  llvm::ConstantRange *result;
  void *v9;
  unsigned int v10;
  void *v11;
  int v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;

  sub_1C4832EA4((llvm::APInt *)&v9, *((_DWORD *)this + 2), -1, 1);
  v4 = v10;
  v12 = v4;
  v5 = v9;
  v11 = v9;
  v10 = 0;
  v16 = v4;
  if (v4 > 0x40)
  {
    v15 = (void *)operator new[]();
    memcpy(v15, v5, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v15 = v9;
  }
  llvm::APInt::operator+=((uint64_t)&v15, 1uLL);
  v6 = v16;
  v14 = v16;
  v7 = v15;
  v13 = v15;
  result = llvm::ConstantRange::sub((llvm::ConstantRange *)&v11, this, a2);
  if (v6 >= 0x41 && v7)
    result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  if (v4 >= 0x41 && v5)
    result = (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  if (v10 >= 0x41)
  {
    result = (llvm::ConstantRange *)v9;
    if (v9)
      return (llvm::ConstantRange *)MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::umul_sat(const void **this@<X0>, const llvm::ConstantRange *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  unsigned int v16;
  void *__s2;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  void *__s1;
  unsigned int v24;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_34;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_34;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
LABEL_34:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v7)
  {
    goto LABEL_34;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v21);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v19);
  llvm::APInt::umul_sat((llvm::APInt *)&v21, &v19, (llvm::APInt *)&__s1);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v21);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v19);
  llvm::APInt::umul_sat((llvm::APInt *)&v21, &v19, (llvm::APInt *)&__s2);
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v8 = v18;
  v9 = __s2;
  v18 = 0;
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  v10 = v24;
  v11 = __s1;
  v24 = 0;
  if (v10 > 0x40)
  {
    if (!memcmp(__s1, v9, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8))
    {
      v16 = v8;
      *(_DWORD *)(a3 + 8) = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v13 = *(unsigned int *)(a3 + 8);
      *(_DWORD *)(a3 + 24) = v13;
      if (v13 > 0x40)
      {
        v14 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
        v15 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v15;
        memcpy(v15, *(const void **)a3, v14);
        v8 = v16;
LABEL_23:
        if (v8 >= 0x41 && v9)
          MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
        if (v10 >= 0x41 && v11)
          MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
        goto LABEL_39;
      }
      v12 = *(_QWORD *)a3;
LABEL_22:
      *(_QWORD *)(a3 + 16) = v12;
      goto LABEL_23;
    }
  }
  else if (__s1 == v9)
  {
    *(_DWORD *)(a3 + 8) = v10;
    if ((_DWORD)v10)
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    else
      v12 = 0;
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 24) = v10;
    goto LABEL_22;
  }
  *(_DWORD *)(a3 + 8) = v10;
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 16) = v9;
LABEL_39:
  if (v24 >= 0x41)
  {
    if (__s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
}

uint64_t llvm::ConstantRange::smul_sat@<X0>(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t result;
  unsigned int v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t i;
  void *__s2;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE v61[16];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[8];
  _BYTE v65[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v7)
    {
      goto LABEL_5;
    }
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    return (uint64_t)llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v59);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v57);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v55);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v53);
  llvm::APInt::smul_sat((const void **)&v59, (const llvm::APInt *)&v55, (llvm::APInt *)v61);
  llvm::APInt::smul_sat((const void **)&v59, (const llvm::APInt *)&v53, (llvm::APInt *)&v62);
  llvm::APInt::smul_sat((const void **)&v57, (const llvm::APInt *)&v55, (llvm::APInt *)&v63);
  llvm::APInt::smul_sat((const void **)&v57, (const llvm::APInt *)&v53, (llvm::APInt *)v64);
  v8 = 1;
  v9 = v61;
  do
  {
    v10 = v9;
    v11 = &v61[16 * v8];
    v12 = *((unsigned int *)v11 + 2);
    if (v12 > 0x40)
    {
      v35 = *(_QWORD *)(*(_QWORD *)v11 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
      v36 = *((_DWORD *)v9 + 2);
      v37 = v36 - 1;
      if (v36 >= 0x41)
        v38 = (_QWORD *)(*(_QWORD *)v9 + 8 * (v37 >> 6));
      else
        v38 = v9;
      if ((v35 != 0) == ((*v38 >> v37) & 1))
      {
        v43 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v43)
          {
            v17 = 0;
            goto LABEL_10;
          }
          v44 = *(_QWORD *)(*(_QWORD *)v11 - 8 + v43);
          v45 = *(_QWORD *)(*(_QWORD *)v9 - 8 + v43);
          v43 -= 8;
        }
        while (v44 == v45);
        if (v44 > v45)
          v17 = 1;
        else
          v17 = -1;
      }
      else if (v35)
      {
        v17 = -1;
      }
      else
      {
        v17 = 1;
      }
    }
    else
    {
      v13 = -v12;
      v14 = (uint64_t)(*(_QWORD *)v11 << v13) >> v13;
      v15 = (uint64_t)(*(_QWORD *)v9 << v13) >> v13;
      v16 = v14 < v15;
      v17 = v14 > v15;
      if (v16)
        v17 = -1;
    }
LABEL_10:
    if (v17 < 0)
      v9 = &v61[16 * v8];
    ++v8;
  }
  while (v8 != 4);
  v18 = (unsigned int *)v65;
  v19 = (unsigned int *)(v10 + 8);
  if (v17 < 0)
    v19 = (unsigned int *)v65;
  v20 = *v19;
  if (v20 > 0x40)
  {
    v21 = (void *)operator new[]();
    memcpy(v21, *(const void **)v9, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
    v18 = (unsigned int *)v65;
  }
  else
  {
    v21 = *(void **)v9;
  }
  v22 = 1;
  v23 = v61;
  do
  {
    v24 = v23;
    v25 = &v61[16 * v22];
    v26 = *((unsigned int *)v23 + 2);
    if (v26 > 0x40)
    {
      v39 = *(_QWORD *)(*(_QWORD *)v23 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
      v40 = *((_DWORD *)v25 + 2);
      v41 = v40 - 1;
      if (v40 >= 0x41)
        v42 = (_QWORD *)(*(_QWORD *)v25 + 8 * (v41 >> 6));
      else
        v42 = &v61[16 * v22];
      if ((v39 != 0) == ((*v42 >> v41) & 1))
      {
        v46 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v46)
          {
            v30 = 0;
            goto LABEL_22;
          }
          v47 = *(_QWORD *)(*(_QWORD *)v23 - 8 + v46);
          v48 = *(_QWORD *)(*(_QWORD *)v25 - 8 + v46);
          v46 -= 8;
        }
        while (v47 == v48);
        if (v47 > v48)
          v30 = 1;
        else
          v30 = -1;
      }
      else if (v39)
      {
        v30 = -1;
      }
      else
      {
        v30 = 1;
      }
    }
    else
    {
      v27 = -v26;
      v28 = (uint64_t)(*(_QWORD *)v23 << v27) >> v27;
      v29 = (uint64_t)(*(_QWORD *)v25 << v27) >> v27;
      v16 = v28 < v29;
      v30 = v28 > v29;
      if (v16)
        v30 = -1;
    }
LABEL_22:
    if (v30 < 0)
      v23 = &v61[16 * v22];
    ++v22;
  }
  while (v22 != 4);
  if (v30 >= 0)
    v18 = (unsigned int *)(v24 + 8);
  v52 = *v18;
  if (v52 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, *(const void **)v23, (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = *(void **)v23;
  }
  result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v32 = v52;
  v33 = __s2;
  v52 = 0;
  if (v20 > 0x40)
  {
    result = memcmp(v21, __s2, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a3 + 8) = v20;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v49 = *(_DWORD *)(a3 + 8);
      result = a3 + 16;
      *(_DWORD *)(a3 + 24) = v49;
      if (v49 > 0x40)
      {
        result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)result, (const void **)a3);
        goto LABEL_35;
      }
      v34 = *(_QWORD *)a3;
LABEL_34:
      *(_QWORD *)result = v34;
LABEL_35:
      if (v32 >= 0x41 && v33)
        result = MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
      goto LABEL_76;
    }
  }
  else if (v21 == __s2)
  {
    *(_DWORD *)(a3 + 8) = v20;
    if ((_DWORD)v20)
      v34 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    else
      v34 = 0;
    *(_QWORD *)a3 = v34;
    result = a3 + 16;
    *(_DWORD *)(a3 + 24) = v20;
    goto LABEL_34;
  }
  *(_DWORD *)(a3 + 8) = v20;
  *(_QWORD *)a3 = v21;
  *(_DWORD *)(a3 + 24) = v32;
  *(_QWORD *)(a3 + 16) = v33;
  LODWORD(v20) = 0;
LABEL_76:
  if (v52 >= 0x41)
  {
    result = (uint64_t)__s2;
    if (__s2)
      result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  }
  if (v20 >= 0x41 && v21)
    result = MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  for (i = 0; i != -64; i -= 16)
  {
    if (*(_DWORD *)&v65[i] >= 0x41u)
    {
      result = *(_QWORD *)&v64[i];
      if (result)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
  }
  if (v54 >= 0x41)
  {
    result = v53;
    if (v53)
      result = MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
  }
  if (v56 >= 0x41)
  {
    result = v55;
    if (v55)
      result = MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
  }
  if (v58 >= 0x41)
  {
    result = v57;
    if (v57)
      result = MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  }
  if (v60 >= 0x41)
  {
    result = v59;
    if (v59)
      return MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
  }
  return result;
}

void llvm::ConstantRange::ushl_sat(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  unsigned int v16;
  void *__s2;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  void *__s1;
  unsigned int v24;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_5;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
LABEL_5:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (!memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) == (_DWORD)v7)
    {
      goto LABEL_5;
    }
  }
  else if (!((unint64_t)a2[2] | (unint64_t)*a2))
  {
    goto LABEL_5;
  }
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v21);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&v19);
  llvm::APInt::ushl_sat((llvm::APInt *)&v21, (const llvm::APInt *)&v19, (llvm::APInt *)&__s1);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v21);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v19);
  llvm::APInt::ushl_sat((llvm::APInt *)&v21, (const llvm::APInt *)&v19, (llvm::APInt *)&__s2);
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v8 = v18;
  v9 = __s2;
  v18 = 0;
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  v10 = v24;
  v11 = __s1;
  v24 = 0;
  if (v10 > 0x40)
  {
    if (!memcmp(__s1, v9, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8))
    {
      v16 = v8;
      *(_DWORD *)(a3 + 8) = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v13 = *(unsigned int *)(a3 + 8);
      *(_DWORD *)(a3 + 24) = v13;
      if (v13 > 0x40)
      {
        v14 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
        v15 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v15;
        memcpy(v15, *(const void **)a3, v14);
        v8 = v16;
LABEL_28:
        if (v8 >= 0x41 && v9)
          MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
        if (v10 >= 0x41 && v11)
          MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
        goto LABEL_40;
      }
      v12 = *(_QWORD *)a3;
LABEL_27:
      *(_QWORD *)(a3 + 16) = v12;
      goto LABEL_28;
    }
  }
  else if (__s1 == v9)
  {
    *(_DWORD *)(a3 + 8) = v10;
    if ((_DWORD)v10)
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    else
      v12 = 0;
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 24) = v10;
    goto LABEL_27;
  }
  *(_DWORD *)(a3 + 8) = v10;
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 16) = v9;
LABEL_40:
  if (v24 >= 0x41)
  {
    if (__s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  }
}

void llvm::ConstantRange::sshl_sat(const void **this@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const llvm::APInt *v9;
  uint64_t *v10;
  const llvm::APInt *v11;
  unsigned int v12;
  void *v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *__s2;
  unsigned int v23;
  void *__s1;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;

  v6 = *((unsigned int *)this + 2);
  if (v6 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v6)
    {
      goto LABEL_34;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    goto LABEL_34;
  }
  v7 = *((unsigned int *)a2 + 2);
  if (v7 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v7)
    {
      goto LABEL_5;
    }
LABEL_34:
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a3, v6, 0);
    return;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    goto LABEL_34;
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v32);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v30);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&v28);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v26);
  if (v33 >= 0x41)
    v8 = (uint64_t *)(v32 + 8 * ((v33 - 1) >> 6));
  else
    v8 = &v32;
  if ((((unint64_t)*v8 >> (v33 - 1)) & 1) != 0)
    v9 = (const llvm::APInt *)&v26;
  else
    v9 = (const llvm::APInt *)&v28;
  llvm::APInt::sshl_sat((llvm::APInt *)&v32, v9, (llvm::APInt *)&__s1);
  if (v31 >= 0x41)
    v10 = (uint64_t *)(v30 + 8 * ((v31 - 1) >> 6));
  else
    v10 = &v30;
  if ((((unint64_t)*v10 >> (v31 - 1)) & 1) != 0)
    v11 = (const llvm::APInt *)&v28;
  else
    v11 = (const llvm::APInt *)&v26;
  llvm::APInt::sshl_sat((llvm::APInt *)&v30, v11, (llvm::APInt *)&__s2);
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v12 = v23;
  v13 = __s2;
  v23 = 0;
  v14 = v25;
  v15 = __s1;
  v25 = 0;
  if (v14 > 0x40)
  {
    v17 = __s2;
    v18 = memcmp(__s1, __s2, ((v14 + 63) >> 3) & 0x3FFFFFF8);
    v13 = v17;
    if (!v18)
    {
      v21 = v14;
      *(_DWORD *)(a3 + 8) = v14;
      llvm::APInt::initSlowCase((llvm::APInt *)a3, -1, 1);
      v19 = *(unsigned int *)(a3 + 8);
      *(_DWORD *)(a3 + 24) = v19;
      if (v19 > 0x40)
      {
        v14 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
        v20 = (void *)operator new[]();
        *(_QWORD *)(a3 + 16) = v20;
        memcpy(v20, *(const void **)a3, v14);
        v13 = v17;
        LODWORD(v14) = v21;
LABEL_23:
        if (v12 >= 0x41 && v13)
          MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
        if (v14 >= 0x41 && v15)
          MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
        goto LABEL_39;
      }
      v16 = *(_QWORD *)a3;
      v13 = v17;
LABEL_22:
      *(_QWORD *)(a3 + 16) = v16;
      goto LABEL_23;
    }
  }
  else if (__s1 == __s2)
  {
    *(_DWORD *)(a3 + 8) = v14;
    if ((_DWORD)v14)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    else
      v16 = 0;
    *(_QWORD *)a3 = v16;
    *(_DWORD *)(a3 + 24) = v14;
    goto LABEL_22;
  }
  *(_DWORD *)(a3 + 8) = v14;
  *(_QWORD *)a3 = v15;
  *(_DWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 16) = v13;
LABEL_39:
  if (v25 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v33 >= 0x41)
  {
    if (v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
}

uint64_t llvm::ConstantRange::unsignedAddMayOverflow(const void **this, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  char *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  void *__src;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v4)
    {
      return 2;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  v5 = *((unsigned int *)a2 + 2);
  if (v5 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v5)
    {
      goto LABEL_5;
    }
    return 2;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    return 2;
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v39);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v37);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&__src);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v33);
  v6 = v36;
  v32 = v36;
  if (v36 > 0x40)
  {
    v23 = (((unint64_t)v36 + 63) >> 3) & 0x3FFFFFF8;
    v31 = (char *)operator new[]();
    memcpy(v31, __src, v23);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v31);
    v6 = v32;
    v8 = v31;
  }
  else
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
    if (!v36)
      v7 = 0;
    v8 = (char *)(v7 & ~(unint64_t)__src);
  }
  if (v40 > 0x40)
  {
    v17 = (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v17)
      {
        v9 = 0;
        goto LABEL_13;
      }
      v18 = *(_QWORD *)(v39 - 8 + v17);
      v19 = *(_QWORD *)&v8[v17 - 8];
      v17 -= 8;
    }
    while (v18 == v19);
    if (v18 > v19)
      v9 = 1;
    else
      v9 = -1;
  }
  else if (v39 < (unint64_t)v8)
  {
    v9 = -1;
  }
  else
  {
    v9 = v39 > (unint64_t)v8;
  }
LABEL_13:
  if (v6 >= 0x41 && v8)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  if (v9 >= 1)
  {
    result = 1;
    v10 = v34;
  }
  else
  {
    v10 = v34;
    v30 = v34;
    if (v34 > 0x40)
    {
      v24 = (((unint64_t)v34 + 63) >> 3) & 0x3FFFFFF8;
      v29 = (char *)operator new[]();
      memcpy(v29, v33, v24);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v29);
      v13 = v30;
      v12 = v29;
    }
    else
    {
      v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
      if (!v34)
        v11 = 0;
      v12 = (char *)(v11 & ~(unint64_t)v33);
      v13 = v34;
    }
    if (v38 > 0x40)
    {
      v20 = (((unint64_t)v38 + 63) >> 3) & 0x3FFFFFF8;
      while (v20)
      {
        v21 = *(_QWORD *)(v37 - 8 + v20);
        v22 = *(_QWORD *)&v12[v20 - 8];
        v20 -= 8;
        v14 = v21 > v22;
        if (v21 != v22)
          goto LABEL_21;
      }
      v15 = 0;
    }
    else
    {
      v14 = v37 > (unint64_t)v12;
LABEL_21:
      v15 = v14;
    }
    if (v13 >= 0x41 && v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    if (v15)
      result = 2;
    else
      result = 3;
  }
  if (v10 >= 0x41 && v33)
  {
    v25 = result;
    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    result = v25;
  }
  if (v36 >= 0x41 && __src)
  {
    v26 = result;
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    result = v26;
  }
  if (v38 >= 0x41 && v37)
  {
    v27 = result;
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    result = v27;
  }
  if (v40 >= 0x41)
  {
    if (v39)
    {
      v28 = result;
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      return v28;
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::signedAddMayOverflow(const void **this, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void **v7;
  unsigned int v8;
  unsigned int v9;
  void **p_src;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unint64_t *v21;
  unsigned int v22;
  unint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  uint64_t result;
  unsigned int v32;
  unint64_t *v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  uint64_t *v42;
  unsigned int v43;
  unint64_t *v44;
  unsigned int v45;
  unint64_t v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _BOOL4 v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _BOOL4 v93;
  unint64_t v94;
  unsigned int v95;
  void *v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  void *v101;
  unsigned int v102;
  void *v103;
  unsigned int v104;
  void *__src;
  unsigned int v106;
  void *v107;
  unsigned int v108;
  unint64_t *v109;
  unsigned int v110;
  unint64_t *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v4)
    {
      return 2;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  v5 = *((unsigned int *)a2 + 2);
  if (v5 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v5)
    {
      goto LABEL_5;
    }
    return 2;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    return 2;
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v115);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v113);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v111);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v109);
  v6 = *((_DWORD *)this + 2);
  v7 = &v107;
  sub_1C4832EA4((llvm::APInt *)&v107, v6, 0, 0);
  v8 = v6 - 1;
  if (v108 >= 0x41)
    v7 = (void **)((char *)v107 + 8 * (v8 >> 6));
  *v7 = (void *)((unint64_t)*v7 | (1 << v8));
  v9 = *((_DWORD *)this + 2);
  p_src = &__src;
  sub_1C4832EA4((llvm::APInt *)&__src, v9, -1, 1);
  v11 = v9 - 1;
  if (v106 >= 0x41)
    p_src = (void **)((char *)__src + 8 * (v11 >> 6));
  *p_src = (void *)((unint64_t)*p_src & ~(1 << v11));
  v12 = v116;
  v13 = (uint64_t *)(v115 + 8 * ((v116 - 1) >> 6));
  if (v116 < 0x41)
    v13 = &v115;
  if ((((unint64_t)*v13 >> (v116 - 1)) & 1) == 0)
  {
    v32 = v112 - 1;
    v33 = (unint64_t *)&v111;
    if (v112 >= 0x41)
      v33 = &v111[v32 >> 6];
    if (((*v33 >> v32) & 1) == 0)
    {
      v34 = v106;
      if (v106 >= 0x41)
      {
        v100 = v106;
        v86 = v106 + 63;
        v87 = (unint64_t *)operator new[]();
        memcpy(v87, __src, (v86 >> 3) & 0x3FFFFFF8);
        v88 = 0;
        v89 = v111;
        v36 = (uint64_t)v87;
        v90 = v86 >> 6;
        do
        {
          v91 = *v89++;
          v92 = *v87 - v91;
          v93 = *v87 < v91;
          v94 = *v87 + ~v91;
          if (v88)
          {
            v88 = v94 >= *v87;
          }
          else
          {
            v94 = v92;
            v88 = v93;
          }
          *v87++ = v94;
          --v90;
        }
        while (v90);
        v34 = v100;
        *(_QWORD *)(v36 + 8 * ((v86 >> 6) - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
        v12 = v116;
      }
      else
      {
        v35 = v106 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v106 : 0;
        v36 = v35 & ((_BYTE *)__src - (_BYTE *)v111);
      }
      if (v12 > 0x40)
      {
        v55 = *(_QWORD *)(v115 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
        v56 = v36;
        if (v34 >= 0x41)
          v56 = *(_QWORD *)(v36 + 8 * ((v34 - 1) >> 6));
        if ((v55 != 0) == ((v56 & (1 << (v34 - 1))) != 0))
        {
          v57 = (((unint64_t)v12 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            if (!v57)
            {
              v41 = 0;
              goto LABEL_50;
            }
            v58 = *(_QWORD *)(v115 - 8 + v57);
            v59 = *(_QWORD *)(v36 + v57 - 8);
            v57 -= 8;
          }
          while (v58 == v59);
          v41 = v58 > v59 ? 1 : -1;
        }
        else
        {
          v41 = v55 ? -1 : 1;
        }
      }
      else
      {
        v37 = -v12;
        v38 = v115 << v37 >> v37;
        v39 = v36 << v37 >> v37;
        v28 = v38 < v39;
        v40 = v38 > v39;
        v41 = v28 ? -1 : v40;
      }
LABEL_50:
      if (v34 >= 0x41 && v36)
        MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
      if (v41 > 0)
      {
        result = 1;
        goto LABEL_32;
      }
    }
  }
  v14 = v114;
  v15 = v113;
  v16 = (v114 - 1) >> 6;
  v17 = (uint64_t *)(v113 + 8 * v16);
  if (v114 < 0x41)
    v17 = &v113;
  v18 = 1 << (v114 - 1);
  if ((v18 & *v17) == 0)
    goto LABEL_15;
  v60 = v110 - 1;
  v61 = (unint64_t *)&v109;
  if (v110 >= 0x41)
    v61 = &v109[v60 >> 6];
  if (((*v61 >> v60) & 1) == 0)
  {
LABEL_15:
    v19 = (uint64_t *)(v15 + 8 * v16);
    if (v14 < 0x41)
      v19 = &v113;
    if ((*v19 & v18) != 0)
      goto LABEL_53;
    v20 = v110 - 1;
    v21 = (unint64_t *)&v109;
    if (v110 >= 0x41)
      v21 = &v109[v20 >> 6];
    if (((*v21 >> v20) & 1) != 0)
      goto LABEL_53;
    v22 = v106;
    if (v106 >= 0x41)
    {
      v98 = v106;
      v68 = v106 + 63;
      v69 = (unint64_t *)operator new[]();
      memcpy(v69, __src, (v68 >> 3) & 0x3FFFFFF8);
      v70 = 0;
      v71 = v109;
      v24 = (int64_t)v69;
      v72 = v68 >> 6;
      do
      {
        v73 = *v71++;
        v74 = *v69 - v73;
        v75 = *v69 < v73;
        v76 = *v69 + ~v73;
        if (v70)
        {
          v70 = v76 >= *v69;
        }
        else
        {
          v76 = v74;
          v70 = v75;
        }
        *v69++ = v76;
        --v72;
      }
      while (v72);
      v22 = v98;
      *(_QWORD *)(v24 + 8 * ((v68 >> 6) - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v98;
      v14 = v114;
    }
    else
    {
      v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
      if (!v106)
        v23 = 0;
      v24 = v23 & ((_BYTE *)__src - (_BYTE *)v109);
    }
    if (v14 > 0x40)
    {
      v50 = *(_QWORD *)(v113 + 8 * ((v14 - 1) >> 6)) & (1 << (v14 - 1));
      v51 = v24;
      if (v22 >= 0x41)
        v51 = *(_QWORD *)(v24 + 8 * ((v22 - 1) >> 6));
      if ((v50 != 0) == ((v51 & (1 << (v22 - 1))) != 0))
      {
        v52 = (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v52)
          {
            v30 = 0;
            goto LABEL_29;
          }
          v53 = *(_QWORD *)(v113 - 8 + v52);
          v54 = *(_QWORD *)(v24 + v52 - 8);
          v52 -= 8;
        }
        while (v53 == v54);
        v30 = v53 > v54 ? 1 : -1;
      }
      else
      {
        v30 = v50 ? -1 : 1;
      }
    }
    else
    {
      v25 = -v14;
      v26 = v113 << v25 >> v25;
      v27 = v24 << v25 >> v25;
      v28 = v26 < v27;
      v29 = v26 > v27;
      v30 = v28 ? -1 : v29;
    }
LABEL_29:
    if (v22 >= 0x41 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    if (v30 <= 0)
    {
LABEL_53:
      v42 = &v115;
      if (v116 >= 0x41)
        v42 = (uint64_t *)(v115 + 8 * ((v116 - 1) >> 6));
      if ((((unint64_t)*v42 >> (v116 - 1)) & 1) == 0)
        goto LABEL_89;
      v43 = v112 - 1;
      v44 = (unint64_t *)&v111;
      if (v112 >= 0x41)
        v44 = &v111[v43 >> 6];
      if (((*v44 >> v43) & 1) != 0)
      {
        v45 = v108;
        if (v108 >= 0x41)
        {
          v99 = v108;
          v77 = v108 + 63;
          v47 = (void *)operator new[]();
          memcpy(v47, v107, (v77 >> 3) & 0x3FFFFFF8);
          v78 = 0;
          v79 = v111;
          v80 = (unint64_t *)v47;
          v81 = v77 >> 6;
          do
          {
            v82 = *v79++;
            v83 = *v80 - v82;
            v84 = *v80 < v82;
            v85 = *v80 + ~v82;
            if (v78)
            {
              v78 = v85 >= *v80;
            }
            else
            {
              v85 = v83;
              v78 = v84;
            }
            *v80++ = v85;
            --v81;
          }
          while (v81);
          v45 = v99;
          *((_QWORD *)v47 + (v77 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v99;
        }
        else
        {
          if (v108)
            v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v108;
          else
            v46 = 0;
          v47 = (void *)(v46 & ((_BYTE *)v107 - (_BYTE *)v111));
        }
        v104 = v45;
        v103 = v47;
        v48 = llvm::APInt::compareSigned((llvm::APInt *)&v115, (const llvm::APInt *)&v103);
        result = 2;
        if (v45 > 0x40 || (v48 & 0x80000000) == 0)
        {
          if (v48 < 0)
            v49 = 2;
          else
            v49 = 3;
          if (v45 >= 0x41 && v47)
            MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
          result = v49;
        }
      }
      else
      {
LABEL_89:
        result = 3;
      }
    }
    else
    {
      result = 2;
    }
    goto LABEL_32;
  }
  v102 = v108;
  if (v108 > 0x40)
  {
    v101 = (void *)operator new[]();
    memcpy(v101, v107, (((unint64_t)v102 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v101 = v107;
  }
  llvm::APInt::operator-=((uint64_t)&v101, &v109);
  v95 = v102;
  v104 = v102;
  v96 = v101;
  v103 = v101;
  v102 = 0;
  v97 = llvm::APInt::compareSigned((llvm::APInt *)&v113, (const llvm::APInt *)&v103);
  if (v95 >= 0x41)
  {
    if (v96)
    {
      MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
      if (v102 >= 0x41)
      {
        if (v101)
          MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
      }
    }
  }
  if ((v97 & 0x80000000) == 0)
  {
    v14 = v114;
    v15 = v113;
    v16 = (v114 - 1) >> 6;
    v18 = 1 << (v114 - 1);
    goto LABEL_15;
  }
  result = 0;
LABEL_32:
  if (v106 >= 0x41 && __src)
  {
    v62 = result;
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    result = v62;
  }
  if (v108 >= 0x41 && v107)
  {
    v63 = result;
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
    result = v63;
  }
  if (v110 >= 0x41 && v109)
  {
    v64 = result;
    MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
    result = v64;
  }
  if (v112 >= 0x41 && v111)
  {
    v65 = result;
    MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
    result = v65;
  }
  if (v114 >= 0x41 && v113)
  {
    v66 = result;
    MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
    result = v66;
  }
  if (v116 >= 0x41)
  {
    if (v115)
    {
      v67 = result;
      MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
      return v67;
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::unsignedSubMayOverflow(const void **this, const llvm::ConstantRange *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v4)
    {
      return 2;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  v5 = *((unsigned int *)a2 + 2);
  if (v5 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return 2;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v5)
  {
    return 2;
  }
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v28);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v26);
  llvm::ConstantRange::getUnsignedMin(a2, (llvm::APInt *)&v24);
  llvm::ConstantRange::getUnsignedMax(a2, (llvm::APInt *)&v22);
  v6 = v27;
  if (v27 > 0x40)
  {
    v7 = v26;
    v10 = (((unint64_t)v27 + 63) >> 3) & 0x3FFFFFF8;
    while (v10)
    {
      v11 = *(_QWORD *)(v26 + v10 - 8);
      v12 = *(_QWORD *)(v24 - 8 + v10);
      v10 -= 8;
      if (v11 != v12)
      {
        if (v11 <= v12)
          goto LABEL_7;
        break;
      }
    }
  }
  else
  {
    v7 = v26;
    if (v26 < v24)
    {
LABEL_7:
      v8 = 0;
      goto LABEL_8;
    }
  }
  if (v29 > 0x40)
  {
    v13 = (((unint64_t)v29 + 63) >> 3) & 0x3FFFFFF8;
    while (v13)
    {
      v14 = *(_QWORD *)(v28 - 8 + v13);
      v15 = *(_QWORD *)(v22 - 8 + v13);
      v13 -= 8;
      if (v14 != v15)
      {
        if (v14 <= v15)
          goto LABEL_25;
        break;
      }
    }
  }
  else if (v28 < v22)
  {
LABEL_25:
    v8 = 2;
    goto LABEL_8;
  }
  v8 = 3;
LABEL_8:
  if (v23 >= 0x41 && v22)
  {
    v16 = v7;
    v17 = v8;
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    v8 = v17;
    v7 = v16;
  }
  if (v25 >= 0x41 && v24)
  {
    v18 = v7;
    v19 = v8;
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    v8 = v19;
    v7 = v18;
  }
  if (v6 >= 0x41 && v7)
  {
    v20 = v8;
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
    v8 = v20;
  }
  if (v29 >= 0x41 && v28)
  {
    v21 = v8;
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    return v21;
  }
  return v8;
}

uint64_t llvm::ConstantRange::signedSubMayOverflow(const void **this, const llvm::ConstantRange *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void **v7;
  unsigned int v8;
  unsigned int v9;
  void **p_src;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  int v27;
  uint64_t result;
  uint64_t *v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BOOL4 v53;
  unsigned int v54;
  void *v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  void *v66;
  unsigned int v67;
  void *v68;
  unsigned int v69;
  void *v70;
  unsigned int v71;
  void *__src;
  unsigned int v73;
  void *v74;
  unsigned int v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v4)
    {
      return 2;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  v5 = *((unsigned int *)a2 + 2);
  if (v5 < 0x41)
  {
    if (*((_QWORD *)a2 + 2) | *(_QWORD *)a2)
      goto LABEL_5;
    return 2;
  }
  if (!memcmp(*(const void **)a2, *((const void **)a2 + 2), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countLeadingZerosSlowCase(a2) == (_DWORD)v5)
  {
    return 2;
  }
LABEL_5:
  llvm::ConstantRange::getSignedMin((uint64_t)this, (llvm::APInt *)&v82);
  llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v80);
  llvm::ConstantRange::getSignedMin((uint64_t)a2, (llvm::APInt *)&v78);
  llvm::ConstantRange::getSignedMax(a2, (llvm::APInt *)&v76);
  v6 = *((_DWORD *)this + 2);
  v7 = &v74;
  sub_1C4832EA4((llvm::APInt *)&v74, v6, 0, 0);
  v8 = v6 - 1;
  if (v75 >= 0x41)
    v7 = (void **)((char *)v74 + 8 * (v8 >> 6));
  *v7 = (void *)((unint64_t)*v7 | (1 << v8));
  v9 = *((_DWORD *)this + 2);
  p_src = &__src;
  sub_1C4832EA4((llvm::APInt *)&__src, v9, -1, 1);
  v11 = v9 - 1;
  if (v73 >= 0x41)
    p_src = (void **)((char *)__src + 8 * (v11 >> 6));
  *p_src = (void *)((unint64_t)*p_src & ~(1 << v11));
  v12 = &v82;
  if (v83 >= 0x41)
    v12 = (uint64_t *)(v82 + 8 * ((v83 - 1) >> 6));
  if ((((unint64_t)*v12 >> (v83 - 1)) & 1) == 0)
  {
    v13 = v77 - 1;
    v14 = (uint64_t *)&v76;
    if (v77 >= 0x41)
      v14 = &v76[v13 >> 6];
    if ((((unint64_t)*v14 >> v13) & 1) != 0)
    {
      v69 = v73;
      if (v73 > 0x40)
      {
        v68 = (void *)operator new[]();
        memcpy(v68, __src, (((unint64_t)v69 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v68 = __src;
      }
      llvm::APInt::operator+=((uint64_t)&v68, &v76);
      v54 = v69;
      v71 = v69;
      v55 = v68;
      v70 = v68;
      v69 = 0;
      v56 = llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&v70);
      if (v54 >= 0x41)
      {
        if (v55)
        {
          MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
          if (v69 >= 0x41)
          {
            if (v68)
              MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
          }
        }
      }
      if (v56 > 0)
      {
        result = 1;
        goto LABEL_32;
      }
    }
  }
  v15 = v81;
  v16 = v80;
  v17 = (v81 - 1) >> 6;
  v18 = (uint64_t *)(v80 + 8 * v17);
  if (v81 < 0x41)
    v18 = &v80;
  v19 = 1 << (v81 - 1);
  if ((v19 & *v18) == 0)
    goto LABEL_18;
  v36 = (uint64_t *)&v78;
  if (v79 >= 0x41)
    v36 = &v78[(v79 - 1) >> 6];
  if ((((unint64_t)*v36 >> (v79 - 1)) & 1) != 0)
  {
LABEL_18:
    v20 = (uint64_t *)(v16 + 8 * v17);
    if (v15 >= 0x41)
      v21 = v20;
    else
      v21 = &v80;
    if ((*v21 & v19) != 0)
      goto LABEL_39;
    v22 = v79 - 1;
    v23 = (uint64_t *)&v78;
    if (v79 >= 0x41)
      v23 = &v78[v22 >> 6];
    if ((((unint64_t)*v23 >> v22) & 1) == 0)
      goto LABEL_39;
    v24 = v73;
    if (v73 >= 0x41)
    {
      v46 = v73 + 63;
      v26 = (void *)operator new[]();
      memcpy(v26, __src, (v46 >> 3) & 0x3FFFFFF8);
      v47 = 0;
      v48 = v78;
      v49 = (unint64_t *)v26;
      v50 = v46 >> 6;
      do
      {
        v51 = *v48++;
        v52 = v51 + *v49;
        v53 = v52 + 1 <= *v49;
        if (v47)
        {
          ++v52;
          v47 = v53;
        }
        else
        {
          v47 = v52 < *v49;
        }
        *v49++ = v52;
        --v50;
      }
      while (v50);
      *((_QWORD *)v26 + (v46 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
    }
    else
    {
      if (v73)
        v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v73;
      else
        v25 = 0;
      v26 = (void *)(v25 & ((unint64_t)v78 + (_QWORD)__src));
    }
    v71 = v24;
    v70 = v26;
    v27 = llvm::APInt::compareSigned((llvm::APInt *)&v80, (const llvm::APInt *)&v70);
    if (v24 >= 0x41 && v26)
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    if (v27 <= 0)
    {
LABEL_39:
      v29 = &v82;
      if (v83 >= 0x41)
        v29 = (uint64_t *)(v82 + 8 * ((v83 - 1) >> 6));
      if ((((unint64_t)*v29 >> (v83 - 1)) & 1) == 0)
        goto LABEL_61;
      v30 = v77 - 1;
      v31 = (uint64_t *)&v76;
      if (v77 >= 0x41)
        v31 = &v76[v30 >> 6];
      if ((((unint64_t)*v31 >> v30) & 1) != 0)
      {
LABEL_61:
        result = 3;
      }
      else
      {
        v32 = v75;
        if (v75 >= 0x41)
        {
          v57 = v75;
          v58 = v75 + 63;
          v34 = (void *)operator new[]();
          memcpy(v34, v74, (v58 >> 3) & 0x3FFFFFF8);
          v59 = 0;
          v60 = v76;
          v61 = (unint64_t *)v34;
          v62 = v58 >> 6;
          do
          {
            v63 = *v60++;
            v64 = v63 + *v61;
            v65 = v64 + 1 <= *v61;
            if (v59)
            {
              ++v64;
              v59 = v65;
            }
            else
            {
              v59 = v64 < *v61;
            }
            *v61++ = v64;
            --v62;
          }
          while (v62);
          v32 = v57;
          *((_QWORD *)v34 + (v58 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v57;
        }
        else
        {
          if (v75)
            v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v75;
          else
            v33 = 0;
          v34 = (void *)(v33 & ((unint64_t)v76 + (_QWORD)v74));
        }
        v71 = v32;
        v70 = v34;
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v82, (const llvm::APInt *)&v70) < 0)
          result = 2;
        else
          result = 3;
        if (v32 >= 0x41 && v34)
        {
          v35 = result;
          MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
          result = v35;
        }
      }
    }
    else
    {
      result = 2;
    }
    goto LABEL_32;
  }
  v67 = v75;
  if (v75 > 0x40)
  {
    v66 = (void *)operator new[]();
    memcpy(v66, v74, (((unint64_t)v67 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v66 = v74;
  }
  llvm::APInt::operator+=((uint64_t)&v66, &v78);
  v37 = v67;
  v71 = v67;
  v38 = v66;
  v70 = v66;
  v67 = 0;
  v39 = llvm::APInt::compareSigned((llvm::APInt *)&v80, (const llvm::APInt *)&v70);
  if (v37 >= 0x41)
  {
    if (v38)
    {
      MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
      if (v67 >= 0x41)
      {
        if (v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      }
    }
  }
  if ((v39 & 0x80000000) == 0)
  {
    v15 = v81;
    v16 = v80;
    v17 = (v81 - 1) >> 6;
    v19 = 1 << (v81 - 1);
    goto LABEL_18;
  }
  result = 0;
LABEL_32:
  if (v73 >= 0x41 && __src)
  {
    v40 = result;
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    result = v40;
  }
  if (v75 >= 0x41 && v74)
  {
    v41 = result;
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
    result = v41;
  }
  if (v77 >= 0x41 && v76)
  {
    v42 = result;
    MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    result = v42;
  }
  if (v79 >= 0x41 && v78)
  {
    v43 = result;
    MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
    result = v43;
  }
  if (v81 >= 0x41 && v80)
  {
    v44 = result;
    MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
    result = v44;
  }
  if (v83 >= 0x41)
  {
    if (v82)
    {
      v45 = result;
      MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
      return v45;
    }
  }
  return result;
}

uint64_t llvm::ConstantRange::unsignedMulMayOverflow(const void **this, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= 0x41)
  {
    if (!memcmp(*this, this[2], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8)
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) == (_DWORD)v4)
    {
      return 2;
    }
  }
  else if (!((unint64_t)this[2] | (unint64_t)*this))
  {
    return 2;
  }
  v5 = *((unsigned int *)a2 + 2);
  if (v5 >= 0x41)
  {
    if (memcmp(*a2, a2[2], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8)
      || llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != (_DWORD)v5)
    {
      goto LABEL_5;
    }
    return 2;
  }
  if (!((unint64_t)a2[2] | (unint64_t)*a2))
    return 2;
LABEL_5:
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)this, (llvm::APInt *)&v22);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)this, (llvm::APInt *)&v20);
  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)a2, (llvm::APInt *)&v18);
  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)a2, (llvm::APInt *)&v16);
  v15 = 0;
  llvm::APInt::umul_ov((llvm::APInt *)&v22, &v18, &v15, (uint64_t)&v13);
  if (v14 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  if (v15)
  {
    result = 1;
  }
  else
  {
    llvm::APInt::umul_ov((llvm::APInt *)&v20, &v16, &v15, (uint64_t)&v11);
    if (v12 >= 0x41 && v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
    if (v15)
      result = 2;
    else
      result = 3;
  }
  if (v17 >= 0x41 && v16)
  {
    v7 = result;
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    result = v7;
  }
  if (v19 >= 0x41 && v18)
  {
    v8 = result;
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    result = v8;
  }
  if (v21 >= 0x41 && v20)
  {
    v9 = result;
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    result = v9;
  }
  if (v23 >= 0x41)
  {
    if (v22)
    {
      v10 = result;
      MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      return v10;
    }
  }
  return result;
}

uint64_t llvm::getConstantRangeFromMetadata@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  _BYTE v33[32];

  v3 = *(unsigned int *)(this + 8);
  v4 = (_QWORD *)(this - 8 * v3);
  v5 = *(_QWORD *)(*v4 + 128);
  v6 = *(_QWORD *)(v4[1] + 128);
  v7 = *(unsigned int *)(v5 + 32);
  if (v7 > 0x40)
  {
    v11 = this;
    v12 = a2;
    v13 = (void *)operator new[]();
    memcpy(v13, *(const void **)(v5 + 24), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    v8 = v13;
    a2 = v12;
    this = v11;
  }
  else
  {
    v8 = *(void **)(v5 + 24);
  }
  v9 = *(unsigned int *)(v6 + 32);
  if (v9 > 0x40)
  {
    v27 = this;
    v14 = a2;
    v15 = v8;
    v10 = (void *)operator new[]();
    memcpy(v10, *(const void **)(v6 + 24), ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    v8 = v15;
    a2 = v14;
    this = v27;
  }
  else
  {
    v10 = *(void **)(v6 + 24);
  }
  *(_DWORD *)(a2 + 8) = v7;
  *(_QWORD *)a2 = v8;
  *(_DWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  if (v3 >= 4)
  {
    LODWORD(v16) = v3 >> 1;
    if (v3 >> 1 <= 2)
      v16 = 2;
    else
      v16 = v16;
    v17 = v16 - 1;
    v18 = this;
    v26 = a2;
    v28 = this;
    do
    {
      v19 = v18 - 8 * *(unsigned int *)(this + 8);
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 128);
      v21 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 128);
      v22 = *(unsigned int *)(v20 + 32);
      if (v22 > 0x40)
      {
        v23 = (void *)operator new[]();
        memcpy(v23, *(const void **)(v20 + 24), ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v23 = *(void **)(v20 + 24);
      }
      v24 = *(unsigned int *)(v21 + 32);
      if (v24 > 0x40)
      {
        v25 = (void *)operator new[]();
        memcpy(v25, *(const void **)(v21 + 24), ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v25 = *(void **)(v21 + 24);
      }
      v30 = v22;
      v29 = v23;
      v32 = v24;
      v31 = v25;
      llvm::ConstantRange::unionWith(v26, (unsigned int *)&v29, 0, (uint64_t)v33);
      sub_1C4FCC3C8(v26, (uint64_t)v33);
      sub_1C4E8C6FC((uint64_t)v33);
      sub_1C4E8C6FC((uint64_t)&v29);
      v18 += 16;
      --v17;
      this = v28;
    }
    while (v17);
  }
  return this;
}

uint64_t llvm::Constant::isNegativeZeroValue(llvm::Constant *this)
{
  BOOL v1;
  llvm::Constant *v2;
  unsigned int v3;
  unsigned int v5;

  v1 = *((_BYTE *)this + 16) != 17;
  while (1)
  {
    v2 = this;
    if (!v1)
      break;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    {
      this = llvm::Constant::getSplatValue(this, 0);
      if (this)
      {
        v1 = 0;
        if (*((_BYTE *)this + 16) == 17)
          continue;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)v2 + 8) & 0xFE) == 0x12)
      v3 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v2 + 16) + 8);
    else
      v3 = *(_DWORD *)(*(_QWORD *)v2 + 8);
    if (v3 >= 7)
      return llvm::Constant::isNullValue(v2);
    return 0;
  }
  if (*((_UNKNOWN **)this + 4) == &unk_1C866F1C0)
    v5 = *(unsigned __int8 *)(*((_QWORD *)this + 5) + 28);
  else
    v5 = *((unsigned __int8 *)this + 52);
  if ((v5 & 7) == 3)
    return (v5 >> 3) & 1;
  return 0;
}

llvm::APFloatBase *llvm::Constant::getSplatValue(llvm::Constant *this, llvm::Type *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  char v18;

  v3 = 0;
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 > 0xC)
  {
    if (v4 != 15)
    {
      if (v4 == 13)
        return (llvm::APFloatBase *)llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)this + 24), a2);
      return (llvm::APFloatBase *)v3;
    }
    if ((*((_BYTE *)this + 40) & 1) != 0)
    {
      if ((*((_BYTE *)this + 40) & 2) == 0)
        return 0;
    }
    else
    {
      *((_BYTE *)this + 40) |= 1u;
      if (llvm::ConstantDataVector::isSplatData(this))
        v17 = 2;
      else
        v17 = 0;
      v18 = *((_BYTE *)this + 40) & 0xFD | v17;
      *((_BYTE *)this + 40) = v18;
      if ((v18 & 2) == 0)
        return 0;
    }
    return llvm::ConstantDataSequential::getElementAsConstant(this);
  }
  if (v4 != 5)
  {
    if (v4 == 10)
      return (llvm::APFloatBase *)llvm::ConstantVector::getSplatValue(this, (int)a2);
    return (llvm::APFloatBase *)v3;
  }
  if (*((_WORD *)this + 9) != 63)
    return 0;
  v6 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (*(unsigned __int8 *)(v6[4] + 16) - 11 > 1)
    return 0;
  v7 = *v6;
  if (!v7 || *(_BYTE *)(v7 + 16) != 5)
    return 0;
  if (*(_WORD *)(v7 + 18) != 62)
    return 0;
  v9 = (_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
  if (*(unsigned __int8 *)(*v9 + 16) - 11 > 1)
    return 0;
  v10 = v9[8];
  if (!v10 || *(_BYTE *)(v10 + 16) != 16)
    return 0;
  v12 = (_DWORD *)*((_QWORD *)this + 3);
  v13 = *((unsigned int *)this + 8);
  v3 = v9[4];
  v14 = (_QWORD *)(v10 + 24);
  v15 = *(_DWORD *)(v10 + 32);
  if (v15 >= 0x41)
  {
    if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v10 + 24)) > 0x40)
      return 0;
    v14 = (_QWORD *)*v14;
  }
  if (*v14)
    return 0;
  if ((_DWORD)v13)
  {
    v16 = 4 * v13;
    while (!*v12)
    {
      ++v12;
      v16 -= 4;
      if (!v16)
        return (llvm::APFloatBase *)v3;
    }
    return 0;
  }
  return (llvm::APFloatBase *)v3;
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  unsigned int v2;
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  _QWORD v10[2];
  int v11;
  char v12;
  const llvm::APInt *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 16)
  {
    v3 = (llvm::Constant *)((char *)this + 24);
    v4 = *((_DWORD *)this + 8);
    if (v4 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
    else
      return *(_QWORD *)v3 == 0;
  }
  else
  {
    if (this && v2 == 17)
    {
      LODWORD(v14) = 64;
      v13 = 0;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v10, &v13);
      v14 = v10[0];
      v15 = v10[1];
      v16 = v11;
      v17 = v12 & 0xF;
      llvm::APFloat::convert((uint64_t)&v13, *((void **)this + 4), 1, v10);
      result = sub_1C47ECB98((uint64_t)this + 24, (uint64_t)&v13);
      if ((_UNKNOWN *)v14 == &unk_1C866F1C0)
      {
        v7 = result;
        sub_1C4773C74(&v15);
      }
      else
      {
        if ((*(_DWORD *)(v14 + 8) - 64) > 0xFFFFFF7F || !v15)
          return result;
        v7 = result;
        MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
      }
      return v7;
    }
    v8 = v2 > 0x14;
    v9 = (0x1C2000u >> v2) & 1;
    if (v8)
      return 0;
    else
      return v9;
  }
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  char *v2;
  llvm::APFloatBase *SplatValue;

  if (this && *((_BYTE *)this + 16) == 17)
  {
    if (*((_UNKNOWN **)this + 4) == &unk_1C866F1C0)
      v2 = (char *)*((_QWORD *)this + 5);
    else
      v2 = (char *)this + 24;
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
      return llvm::Constant::isNullValue(this);
    SplatValue = llvm::Constant::getSplatValue(this, 0);
    if (!SplatValue || *((_BYTE *)SplatValue + 16) != 17)
      return llvm::Constant::isNullValue(this);
    if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
      v2 = (char *)*((_QWORD *)SplatValue + 5);
    else
      v2 = (char *)SplatValue + 24;
  }
  return (v2[28] & 7) == 3;
}

BOOL llvm::Constant::isAllOnesValue(llvm::Constant *this)
{
  int v1;
  _BOOL8 v2;
  unsigned int v3;
  llvm::APInt *v4;
  uint64_t v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;
  uint64_t v10;
  unsigned int v11;

  while (1)
  {
    v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
    {
      v3 = *((_DWORD *)this + 8);
      if (v3)
      {
        v4 = (llvm::Constant *)((char *)this + 24);
        if (v3 <= 0x40)
        {
          v5 = *(_QWORD *)v4;
          return v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
        }
        return llvm::APInt::countTrailingOnesSlowCase(v4) == v3;
      }
      return 1;
    }
    if (this && v1 == 17)
      break;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    {
      this = llvm::Constant::getSplatValue(this, 0);
      if (this)
        continue;
    }
    return 0;
  }
  v7 = (void *)*((_QWORD *)this + 4);
  v6 = (llvm::Constant *)((char *)this + 32);
  if (v7 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v6, (unsigned int *)&v10);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v6, (unsigned int *)&v10);
  v3 = v11;
  if (!v11)
    return 1;
  if (v11 <= 0x40)
  {
    v5 = v10;
    return v5 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
  }
  v2 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v10) == v3;
  if (v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  return v2;
}

BOOL llvm::Constant::isOneValue(llvm::Constant *this)
{
  int v1;
  _BOOL8 v2;
  unsigned int v3;
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  int v9;
  int64_t v10;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;

  while (1)
  {
    v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
    {
      v3 = *((_DWORD *)this + 8);
      if (v3 <= 0x40)
      {
        v4 = *((_QWORD *)this + 3);
        return v4 == 1;
      }
      return llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)this + 24)) == v3 - 1;
    }
    if (this && v1 == 17)
      break;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    {
      this = llvm::Constant::getSplatValue(this, 0);
      if (this)
        continue;
    }
    return 0;
  }
  v6 = (void *)*((_QWORD *)this + 4);
  v5 = (llvm::Constant *)((char *)this + 32);
  if (v6 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v14);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v14);
  if (v15 <= 0x40)
  {
    v4 = v14;
    return v4 == 1;
  }
  v9 = 0;
  v10 = ((unint64_t)v15 + 63) >> 6;
  do
  {
    if (v10-- < 1)
      break;
    v12 = *(_QWORD *)(v14 + 8 * v10);
    v9 += __clz(v12);
  }
  while (!v12);
  v13 = v15 | 0xFFFFFFC0;
  if ((v15 & 0x3F) == 0)
    v13 = 0;
  v2 = v9 + v13 == v15 - 1;
  if (v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  return v2;
}

uint64_t llvm::Constant::isNotOneValue(llvm::Constant *this)
{
  int v2;
  int v3;
  BOOL v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  int v7;
  llvm::Type *v8;
  llvm::UndefValue *AggregateElement;
  int v11;
  int64_t v12;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  while (1)
  {
    v2 = *((unsigned __int8 *)this + 16);
    if (this && v2 == 16)
      return !llvm::Constant::isOneValue(this);
    if (this && v2 == 17)
      break;
    v3 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)this)
      v4 = v3 == 18;
    else
      v4 = 0;
    if (v4)
    {
      v7 = *(_DWORD *)(*(_QWORD *)this + 32);
      if (!v7)
        return 1;
      v8 = 0;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement(this, v8);
        if (!AggregateElement || (llvm::Constant::isNotOneValue(AggregateElement) & 1) == 0)
          break;
        v8 = (llvm::Type *)((_DWORD)v8 + 1);
        if (v7 == (_DWORD)v8)
          return 1;
      }
      return 0;
    }
    if ((v3 & 0xFE) != 0x12)
      return 0;
    this = llvm::Constant::getSplatValue(this, 0);
    if (!this)
      return (uint64_t)this;
  }
  v6 = (void *)*((_QWORD *)this + 4);
  v5 = (llvm::Constant *)((char *)this + 32);
  if (v6 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v16);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v16);
  if (v17 <= 0x40)
    return v16 != 1;
  v11 = 0;
  v12 = ((unint64_t)v17 + 63) >> 6;
  do
  {
    if (v12-- < 1)
      break;
    v14 = *(_QWORD *)(v16 + 8 * v12);
    v11 += __clz(v14);
  }
  while (!v14);
  v15 = v17 | 0xFFFFFFC0;
  if ((v17 & 0x3F) == 0)
    v15 = 0;
  this = (llvm::Constant *)(v11 + v15 != v17 - 1);
  if (v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  return (uint64_t)this;
}

llvm::UndefValue *llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Type *a2)
{
  unsigned int v2;
  int v4;
  uint64_t v5;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  llvm::UndefValue **v15;
  llvm::Constant **v16;
  llvm::PoisonValue **v17;

  v2 = a2;
  v4 = *((unsigned __int8 *)this + 16);
  if (this && (v4 - 11) >= 0xFFFFFFFD)
  {
    v5 = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if (v5 > a2)
      return (llvm::UndefValue *)*((_QWORD *)this + 4 * a2 + -4 * v5);
    return 0;
  }
  if (this && v4 == 13)
  {
    if (llvm::ConstantAggregateZero::getElementCount(this) > a2)
    {
      v8 = *(_QWORD *)this;
      if (*(_DWORD *)(*(_QWORD *)this + 8) == 17
        || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
      {
        v16 = (llvm::Constant **)(v8 + 24);
      }
      else
      {
        v16 = (llvm::Constant **)(*(_QWORD *)(v8 + 16) + 8 * v2);
      }
      return (llvm::UndefValue *)llvm::Constant::getNullValue(*v16, v7);
    }
    return 0;
  }
  v10 = *(_QWORD *)this;
  v11 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (v11 == 19)
    return 0;
  if (v4 == 12)
  {
    if (v11 == 17 || (v11 & 0xFE) == 0x12)
      v12 = *(_DWORD *)(v10 + 32);
    else
      v12 = *(_DWORD *)(v10 + 12);
    if (v12 <= a2)
      return 0;
    if (v11 == 17 || (v11 & 0xFE) == 18)
      v17 = (llvm::PoisonValue **)(v10 + 24);
    else
      v17 = (llvm::PoisonValue **)(*(_QWORD *)(v10 + 16) + 8 * a2);
    return (llvm::UndefValue *)llvm::PoisonValue::get(*v17, a2);
  }
  else
  {
    if ((v4 - 13) < 0xFFFFFFFE)
    {
      if ((v4 & 0xFE) == 0xE && *(_DWORD *)(v10 + 32) > a2)
        return llvm::ConstantDataSequential::getElementAsConstant(this);
      return 0;
    }
    if (v11 == 17 || (v11 & 0xFE) == 0x12)
      v13 = *(_DWORD *)(v10 + 32);
    else
      v13 = *(_DWORD *)(v10 + 12);
    if (v13 <= a2)
      return 0;
    if (v11 == 17 || (v11 & 0xFE) == 0x12)
      v15 = (llvm::UndefValue **)(v10 + 24);
    else
      v15 = (llvm::UndefValue **)(*(_QWORD *)(v10 + 16) + 8 * a2);
    return llvm::UndefValue::get(*v15, a2);
  }
}

llvm::APFloatBase *llvm::Constant::isMinSignedValue(llvm::APFloatBase *this)
{
  int v1;
  _QWORD *v2;
  unsigned int v3;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  unsigned int v7;
  unint64_t *v8;
  _BOOL8 v9;
  unint64_t *v10;
  unsigned int v11;

  while (1)
  {
    v1 = *((unsigned __int8 *)this + 16);
    if (this && v1 == 16)
    {
      v2 = (_QWORD *)((char *)this + 24);
      v3 = *((_DWORD *)this + 8);
      if (v3 > 0x40)
      {
        if (((*(_QWORD *)(*v2 + 8 * ((v3 - 1) >> 6)) >> (v3 - 1)) & 1) == 0)
          return 0;
        return (llvm::APFloatBase *)(llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this + 3) == v3 - 1);
      }
      else
      {
        return (llvm::APFloatBase *)(*v2 == 1 << (v3 - 1));
      }
    }
    if (this && v1 == 17)
      break;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
      return 0;
    this = llvm::Constant::getSplatValue(this, 0);
    if (!this)
      return this;
  }
  v6 = (void *)*((_QWORD *)this + 4);
  v5 = (llvm::APFloatBase *)((char *)this + 32);
  if (v6 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v10);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v10);
  if (v11 < 0x41)
    return (llvm::APFloatBase *)(v10 == (unint64_t *)(1 << (v11 - 1)));
  v8 = v10;
  if (((v10[(v11 - 1) >> 6] >> (v11 - 1)) & 1) != 0)
  {
    v7 = v11 - 1;
    v9 = llvm::APInt::countTrailingZerosSlowCase(&v10) == v7;
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  return (llvm::APFloatBase *)v9;
}

unint64_t llvm::Constant::isNotMinSignedValue(unint64_t this)
{
  int v2;
  int v3;
  unint64_t **v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  llvm::detail::DoubleAPFloat *v9;
  void *v10;
  int v11;
  llvm::Type *v12;
  llvm::UndefValue *AggregateElement;
  unsigned int v15;
  unint64_t *v16;
  unint64_t *v17;
  unsigned int v18;

  while (1)
  {
    v2 = *(unsigned __int8 *)(this + 16);
    if (this && v2 == 16)
    {
      v5 = (unint64_t **)(this + 24);
      v6 = *(_DWORD *)(this + 32);
      if (v6 > 0x40)
      {
        if ((((*v5)[(v6 - 1) >> 6] >> (v6 - 1)) & 1) == 0)
        {
          v8 = 0;
          return v8 ^ 1u;
        }
        v7 = llvm::APInt::countTrailingZerosSlowCase(v5) == v6 - 1;
      }
      else
      {
        v7 = *v5 == (unint64_t *)(1 << (v6 - 1));
      }
      v8 = v7;
      return v8 ^ 1u;
    }
    if (this && v2 == 17)
    {
      v10 = *(void **)(this + 32);
      v9 = (llvm::detail::DoubleAPFloat *)(this + 32);
      if (v10 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v9, (unsigned int *)&v17);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v9, (unsigned int *)&v17);
      if (v18 < 0x41)
        return v17 != (unint64_t *)(1 << (v18 - 1));
      v16 = v17;
      if (((v17[(v18 - 1) >> 6] >> (v18 - 1)) & 1) != 0)
      {
        v15 = v18 - 1;
        this = llvm::APInt::countTrailingZerosSlowCase(&v17) != v15;
      }
      else
      {
        this = 1;
      }
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      return this;
    }
    v3 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
    if (*(_QWORD *)this && v3 == 18)
      break;
    if ((v3 & 0xFE) != 0x12)
      return 0;
    this = (unint64_t)llvm::Constant::getSplatValue((llvm::Constant *)this, 0);
    if (!this)
      return this;
  }
  v11 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (!v11)
    return 1;
  v12 = 0;
  while (1)
  {
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)this, v12);
    if (!AggregateElement || (llvm::Constant::isNotMinSignedValue(AggregateElement) & 1) == 0)
      break;
    v12 = (llvm::Type *)((_DWORD)v12 + 1);
    if (v11 == (_DWORD)v12)
      return 1;
  }
  return 0;
}

uint64_t llvm::Constant::isFiniteNonZeroFP(llvm::Constant *this)
{
  llvm::Constant *v1;
  BOOL v2;
  int v3;
  uint64_t result;
  char v6;
  unsigned int v7;
  int v8;
  llvm::Type *v9;
  char v10;
  unsigned int v11;

  v1 = this;
  v2 = *((_BYTE *)this + 16) != 17;
  while (1)
  {
    if (!v2)
    {
      if (*((_UNKNOWN **)v1 + 4) == &unk_1C866F1C0)
        v6 = *(_BYTE *)(*((_QWORD *)v1 + 5) + 28);
      else
        v6 = *((_BYTE *)v1 + 52);
      v7 = v6 & 7;
      if (v7 >= 2)
        return v7 != 3;
      return 0;
    }
    v3 = *(unsigned __int8 *)(*(_QWORD *)v1 + 8);
    if (*(_QWORD *)v1 && v3 == 18)
      break;
    if ((v3 & 0xFE) != 0x12)
      return 0;
    result = (uint64_t)llvm::Constant::getSplatValue(v1, 0);
    if (result)
    {
      v1 = (llvm::Constant *)result;
      v2 = 0;
      result = 0;
      if (*((_BYTE *)v1 + 16) == 17)
        continue;
    }
    return result;
  }
  v8 = *(_DWORD *)(*(_QWORD *)v1 + 32);
  if (!v8)
    return 1;
  v9 = 0;
  while (1)
  {
    result = (uint64_t)llvm::Constant::getAggregateElement(v1, v9);
    if (!result)
      break;
    if (*(_BYTE *)(result + 16) != 17)
      return 0;
    v10 = *(_UNKNOWN **)(result + 32) == &unk_1C866F1C0
        ? *(_BYTE *)(*(_QWORD *)(result + 40) + 28)
        : *(_BYTE *)(result + 52);
    v11 = v10 & 7;
    if (v11 < 2 || v11 == 3)
      return 0;
    v9 = (llvm::Type *)((_DWORD)v9 + 1);
    if (v8 == (_DWORD)v9)
      return 1;
  }
  return result;
}

uint64_t llvm::Constant::isNormalFP(llvm::Constant *this)
{
  llvm::Constant *v1;
  BOOL v2;
  int v3;
  BOOL v4;
  uint64_t result;
  int v6;
  llvm::Type *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  char v11;
  unsigned int v12;

  v1 = this;
  v2 = *((_BYTE *)this + 16) != 17;
  while (v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)v1 + 8);
    if (*(_QWORD *)v1)
      v4 = v3 == 18;
    else
      v4 = 0;
    if (v4)
    {
      v6 = *(_DWORD *)(*(_QWORD *)v1 + 32);
      if (!v6)
        return 1;
      v7 = 0;
      while (1)
      {
        result = (uint64_t)llvm::Constant::getAggregateElement(v1, v7);
        if (!result)
          break;
        v8 = result;
        if (*(_BYTE *)(result + 16) != 17 || sub_1C4773C58(result + 24))
          return 0;
        v9 = *(_UNKNOWN **)(v8 + 32) == &unk_1C866F1C0 ? *(_BYTE *)(*(_QWORD *)(v8 + 40) + 28) : *(_BYTE *)(v8 + 52);
        v10 = v9 & 7;
        if (v10 < 2 || v10 == 3)
          return 0;
        v7 = (llvm::Type *)((_DWORD)v7 + 1);
        result = 1;
        if (v6 == (_DWORD)v7)
          return result;
      }
      return result;
    }
    if ((v3 & 0xFE) != 0x12)
      return 0;
    result = (uint64_t)llvm::Constant::getSplatValue(v1, 0);
    if (result)
    {
      v1 = (llvm::Constant *)result;
      v2 = 0;
      result = 0;
      if (*((_BYTE *)v1 + 16) == 17)
        continue;
    }
    return result;
  }
  if (sub_1C4773C58((uint64_t)v1 + 24))
    return 0;
  v11 = *((_UNKNOWN **)v1 + 4) == &unk_1C866F1C0 ? *(_BYTE *)(*((_QWORD *)v1 + 5) + 28) : *((_BYTE *)v1 + 52);
  v12 = v11 & 7;
  if (v12 < 2)
    return 0;
  return v12 != 3;
}

uint64_t llvm::Constant::hasExactInverseFP(llvm::Constant *this)
{
  llvm::Constant *v1;
  BOOL v2;
  int v3;
  uint64_t result;
  int v6;
  llvm::Type *v7;

  v1 = this;
  v2 = *((_BYTE *)this + 16) != 17;
  while (1)
  {
    if (!v2)
      return sub_1C5375770((uint64_t)v1 + 24, 0);
    v3 = *(unsigned __int8 *)(*(_QWORD *)v1 + 8);
    if (*(_QWORD *)v1 && v3 == 18)
      break;
    if ((v3 & 0xFE) != 0x12)
      return 0;
    result = (uint64_t)llvm::Constant::getSplatValue(v1, 0);
    if (result)
    {
      v1 = (llvm::Constant *)result;
      v2 = 0;
      result = 0;
      if (*((_BYTE *)v1 + 16) == 17)
        continue;
    }
    return result;
  }
  v6 = *(_DWORD *)(*(_QWORD *)v1 + 32);
  if (!v6)
    return 1;
  v7 = 0;
  while (1)
  {
    result = (uint64_t)llvm::Constant::getAggregateElement(v1, v7);
    if (!result)
      break;
    if (*(_BYTE *)(result + 16) != 17 || (sub_1C5375770(result + 24, 0) & 1) == 0)
      return 0;
    v7 = (llvm::Type *)((_DWORD)v7 + 1);
    if (v6 == (_DWORD)v7)
      return 1;
  }
  return result;
}

uint64_t sub_1C5375770(uint64_t a1, llvm::APFloat *a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::getExactInverse(v2, a2);
  else
    return llvm::detail::IEEEFloat::getExactInverse(v2, (uint64_t)a2);
}

uint64_t llvm::Constant::isNaN(llvm::Constant *this)
{
  llvm::Constant *v1;
  char *v2;
  int v3;
  BOOL v4;
  uint64_t result;
  int v6;
  llvm::Type *v7;
  uint64_t v8;

  v1 = this;
  if (this && *((_BYTE *)this + 16) == 17)
  {
LABEL_3:
    if (*((_UNKNOWN **)v1 + 4) == &unk_1C866F1C0)
      v2 = (char *)*((_QWORD *)v1 + 5);
    else
      v2 = (char *)v1 + 24;
    return (v2[28] & 7) == 1;
  }
  v3 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (*(_QWORD *)this)
    v4 = v3 == 18;
  else
    v4 = 0;
  if (!v4)
  {
    if ((v3 & 0xFE) != 0x12)
      return 0;
    result = (uint64_t)llvm::Constant::getSplatValue(this, 0);
    if (!result)
      return result;
    v1 = (llvm::Constant *)result;
    if (*(_BYTE *)(result + 16) != 17)
      return 0;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (!v6)
    return 1;
  v7 = 0;
  while (1)
  {
    result = (uint64_t)llvm::Constant::getAggregateElement(v1, v7);
    if (!result)
      break;
    if (*(_BYTE *)(result + 16) != 17)
      return 0;
    v8 = *(_UNKNOWN **)(result + 32) == &unk_1C866F1C0 ? *(_QWORD *)(result + 40) : result + 24;
    if ((*(_BYTE *)(v8 + 28) & 7) != 1)
      return 0;
    v7 = (llvm::Type *)((_DWORD)v7 + 1);
    if (v6 == (_DWORD)v7)
      return 1;
  }
  return result;
}

uint64_t llvm::Constant::isElementWiseEqual(llvm::Constant *this, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v8;
  BOOL v9;
  int v10;
  llvm::Constant *v12;
  llvm::Constant *v13;
  unsigned __int8 *ICmp;
  llvm::UndefValue *v15;
  llvm::UndefValue *v16;
  _BYTE v17[25];
  uint64_t v18;

  if (this == a2)
    return 1;
  *(_QWORD *)&v17[17] = v2;
  v18 = v3;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v5 = *(_QWORD *)this;
  else
    v5 = 0;
  if (*((unsigned __int8 *)a2 + 16) > 0x14u || v5 == 0)
    return 0;
  v15 = this;
  v16 = a2;
  if (v5 != *(_QWORD *)a2)
    return 0;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 24) + 8);
  v9 = v8 > 0xD;
  v10 = (1 << v8) & 0x207F;
  if (v9 || v10 == 0)
    return 0;
  sub_1C6227E64(v5);
  v13 = v12;
  if (*(llvm::Constant **)v15 != v12)
    v15 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v15, v12, 0);
  if (*(llvm::Constant **)v16 != v13)
    v16 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v16, v13, 0);
  ICmp = (unsigned __int8 *)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x20, (unsigned __int8 *)v15, v16, 0);
  if (ICmp[16] - 11 >= 2)
    return sub_1C4D89E3C((uint64_t)v17, (llvm::Constant *)ICmp);
  else
    return 1;
}

llvm::UndefValue *llvm::ConstantExpr::getBitCast(llvm::UndefValue *this, llvm::Constant *a2, llvm::Type *a3)
{
  if (*(llvm::Constant **)this != a2)
    return sub_1C537D3B8((llvm *)0x31, (uint64_t)this, a2, a3);
  return this;
}

llvm::UndefValue *llvm::ConstantExpr::getICmp(llvm::ConstantExpr *this, unsigned __int8 *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  __int16 v7;
  llvm::UndefValue *result;
  uint64_t v9;
  uint64_t **v10;
  llvm::Type *v11;
  uint64_t **v12;
  _WORD v13[4];
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];

  v4 = (char)a4;
  v7 = (__int16)this;
  v19[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldCompareInstruction((int)this, a2, (unsigned __int8 *)a3, (BOOL)a4);
  if (!result && (v4 & 1) == 0)
  {
    v19[0] = a2;
    v19[1] = a3;
    v9 = ***(_QWORD ***)a2;
    v10 = (uint64_t **)(v9 + 1888);
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    {
      v11 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a2 + 32);
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 19)
        llvm::ScalableVectorType::get(v10, v11);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v10, v11);
      v10 = v12;
      v9 = ***(_QWORD ***)a2;
    }
    v13[0] = 53;
    v13[1] = v7;
    v14 = v19;
    v15 = 2;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    return (llvm::UndefValue *)sub_1C537D4FC(v9 + 1512, (uint64_t)v10, (unsigned __int8 *)v13);
  }
  return result;
}

uint64_t llvm::Constant::containsUndefOrPoisonElement(llvm::Constant *this)
{
  char v2;

  return sub_1C5375B0C(this, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4, (uint64_t)&v2);
}

uint64_t sub_1C5375B0C(llvm::Constant *a1, uint64_t (*a2)(uint64_t, llvm::UndefValue *), uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  int v9;
  llvm::Type *v10;
  llvm::UndefValue *AggregateElement;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v4 = (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 18;
  else
    v4 = 0;
  if (!v4)
    return 0;
  if ((a2(a3, a1) & 1) == 0)
  {
    if (*((_BYTE *)a1 + 16) == 13)
      return 0;
    if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 19)
      return 0;
    v9 = *(_DWORD *)(v3 + 32);
    if (!v9)
      return 0;
    v10 = 0;
    while (1)
    {
      AggregateElement = llvm::Constant::getAggregateElement(a1, v10);
      if (AggregateElement)
      {
        if ((a2(a3, AggregateElement) & 1) != 0)
          break;
      }
      result = 0;
      v10 = (llvm::Type *)((_DWORD)v10 + 1);
      if (v9 == (_DWORD)v10)
        return result;
    }
  }
  return 1;
}

uint64_t llvm::Constant::containsPoisonElement(llvm::Constant *this)
{
  char v2;

  return sub_1C5375B0C(this, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FF8, (uint64_t)&v2);
}

BOOL llvm::Constant::containsConstantExpression(llvm::Constant *this)
{
  BOOL v1;
  int v2;
  llvm::Type *v4;
  int v5;
  int v6;
  _BOOL8 result;
  BOOL v8;

  if (*(_QWORD *)this)
    v1 = *(_BYTE *)(*(_QWORD *)this + 8) == 18;
  else
    v1 = 0;
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)this + 32);
  if (!v2)
    return 0;
  v4 = 0;
  v5 = v2 - 1;
  do
  {
    v6 = *((unsigned __int8 *)llvm::Constant::getAggregateElement(this, v4) + 16);
    result = v6 == 5;
    v8 = v6 == 5 || v5 == (_DWORD)v4;
    v4 = (llvm::Type *)((_DWORD)v4 + 1);
  }
  while (!v8);
  return result;
}

llvm::Value **llvm::Constant::getNullValue(llvm::Constant *this, llvm::Type *a2)
{
  uint64_t v2;

  v2 = *((unsigned __int8 *)this + 8);
  if ((_DWORD)v2 != 13)
    __asm { BR              X10 }
  return llvm::ConstantInt::get(this, 0, 0);
}

llvm::Value **llvm::ConstantInt::get(llvm::ConstantInt *this, uint64_t a2, const llvm::APInt *a3)
{
  unsigned int v4;
  llvm::ConstantInt *v5;
  llvm::ConstantInt *v6;
  unint64_t v7;
  llvm::ValueHandleBase *v8;
  llvm::Constant *v9;
  llvm::ConstantInt *v11;
  llvm::ValueHandleBase *v12;
  unint64_t v13;
  unsigned int v14;

  v4 = *((_DWORD *)this + 2);
  v5 = this;
  if ((v4 & 0xFE) == 0x12)
  {
    v5 = (llvm::ConstantInt *)**((_QWORD **)this + 2);
    v4 = *((_DWORD *)v5 + 2);
  }
  v6 = *(llvm::ConstantInt **)v5;
  v14 = v4 >> 8;
  if (v4 >> 8 > 0x40)
  {
    v11 = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, a2, (int)a3);
    v6 = v11;
  }
  else
  {
    if (v4 <= 0xFF)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4);
    v13 = v7 & a2;
  }
  v8 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v13, a3);
  if (v14 >= 0x41 && v13)
  {
    v12 = v8;
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
    v8 = v12;
  }
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v8, v9);
  return (llvm::Value **)v8;
}

llvm::APFloatBase *llvm::ConstantFP::get(llvm::ConstantFP *this, llvm::LLVMContext *a2, const llvm::APFloat *a3)
{
  uint64_t *v5;
  char v6;
  uint64_t v7;
  llvm::APFloatBase *result;
  void *v9;
  const llvm::detail::DoubleAPFloat *v10;
  uint64_t v11;
  llvm::Value **v12;
  _QWORD *v13;
  llvm::detail::DoubleAPFloat *v14;
  uint64_t v15;
  char v16;
  int v17;
  _BOOL4 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  llvm::APFloatBase *v30;
  llvm::APFloatBase *v31;
  uint64_t v32;
  llvm::APFloatBase *v33;
  uint64_t v34;

  v5 = (uint64_t *)(*(_QWORD *)this + 200);
  v34 = 0;
  v6 = sub_1C53826DC(v5, (uint64_t)a2, &v34);
  v7 = v34;
  if ((v6 & 1) != 0)
  {
    result = *(llvm::APFloatBase **)(v34 + 32);
    if (result)
      return result;
  }
  else
  {
    v7 = sub_1C5382950((uint64_t)v5, (uint64_t)a2, (uint64_t)a2, v34);
    result = sub_1C4DF91B8((llvm::detail::IEEEFloat *)(v7 + 8), (uint64_t)a2 + 8);
    *(_QWORD *)(v7 + 32) = 0;
  }
  v10 = (llvm::LLVMContext *)((char *)a2 + 8);
  v9 = (void *)*((_QWORD *)a2 + 1);
  if (v9 == &unk_1C866F15C)
  {
    v11 = *(_QWORD *)this + 1624;
  }
  else if (v9 == &unk_1C866F170)
  {
    v11 = *(_QWORD *)this + 1648;
  }
  else if (v9 == &unk_1C866F184)
  {
    v11 = *(_QWORD *)this + 1672;
  }
  else
  {
    v33 = (llvm::APFloatBase *)*((_QWORD *)a2 + 1);
    if (v9 == &unk_1C866F198)
    {
      v11 = *(_QWORD *)this + 1696;
    }
    else
    {
      v30 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(result);
      if (v30 == v33)
      {
        v11 = *(_QWORD *)this + 1768;
      }
      else
      {
        v31 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEquad(v30);
        v32 = *(_QWORD *)this;
        if (v31 == v33)
          v11 = v32 + 1792;
        else
          v11 = v32 + 1816;
      }
    }
  }
  v12 = (llvm::Value **)(v7 + 32);
  v13 = operator new(0x38uLL);
  *v13 = v11;
  v13[1] = 0;
  v13[2] = 17;
  v14 = (llvm::detail::DoubleAPFloat *)(v13 + 4);
  v15 = *(_QWORD *)v10;
  if (*(_UNKNOWN **)v10 == &unk_1C866F1C0)
  {
    v27 = v13;
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v14, v10);
    v13 = v27;
  }
  else
  {
    *(_QWORD *)v14 = v15;
    if ((*(_DWORD *)(v15 + 8) + 64) >= 0x80)
    {
      v28 = v13;
      v29 = operator new[]();
      v13 = v28;
      v28[5] = v29;
    }
    v16 = *((_BYTE *)a2 + 28);
    v17 = v16 & 7;
    *((_BYTE *)v13 + 52) = *((_BYTE *)v13 + 52) & 0xF0 | v16 & 0xF;
    *((_DWORD *)v13 + 12) = *((_DWORD *)a2 + 6);
    v19 = (v16 & 6) != 0 && v17 != 3;
    if (v17 == 1 || v19)
    {
      v20 = *(unsigned int *)(v13[4] + 8);
      v21 = v13 + 5;
      if ((v20 - 64) <= 0xFFFFFF7F)
        v21 = (_QWORD *)*v21;
      v24 = (uint64_t *)*((_QWORD *)a2 + 2);
      v23 = (char *)a2 + 16;
      v22 = v24;
      if ((*(_DWORD *)(*((_QWORD *)v23 - 1) + 8) - 64) >= 0xFFFFFF80)
        v22 = (uint64_t *)v23;
      if (v20 <= 0xFFFFFFBF)
      {
        v25 = (unint64_t)(v20 + 64) >> 6;
        do
        {
          v26 = *v22++;
          *v21++ = v26;
          --v25;
        }
        while (v25);
      }
    }
  }
  sub_1C5379324(v12, (llvm::Value *)v13);
  return *v12;
}

_QWORD *llvm::ConstantPointerNull::get(llvm::ConstantPointerNull *this, llvm::PointerType *a2)
{
  _QWORD *v2;
  _QWORD *result;
  llvm::Value *v4;
  llvm::Value *v5;
  _DWORD *v6;
  llvm::ConstantPointerNull *v7;

  v7 = this;
  v2 = sub_1C5384B08((uint64_t *)(**(_QWORD **)this + 1312), &v7);
  result = (_QWORD *)v2[1];
  if (!result)
  {
    result = operator new(0x18uLL);
    *result = v7;
    result[1] = 0;
    result[2] = 19;
    v5 = (llvm::Value *)v2[1];
    v2[1] = result;
    if (v5)
    {
      llvm::Value::~Value(v5, v4);
      llvm::User::operator delete(v6);
      return (_QWORD *)v2[1];
    }
  }
  return result;
}

_QWORD *llvm::ConstantAggregateZero::get(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  uint64_t *v2;
  _QWORD *result;
  llvm::Value *v4;
  _DWORD *v5;
  llvm::ConstantAggregateZero *v6;

  v6 = this;
  v2 = sub_1C5384860(**(_QWORD **)this + 1216, (uint64_t *)&v6);
  result = (_QWORD *)v2[1];
  if (!result)
  {
    result = operator new(0x18uLL);
    *result = v6;
    result[1] = 0;
    result[2] = 13;
    v4 = (llvm::Value *)v2[1];
    v2[1] = (uint64_t)result;
    if (v4)
    {
      llvm::Value::~Value(v4);
      llvm::User::operator delete(v5);
      return (_QWORD *)v2[1];
    }
  }
  return result;
}

llvm::Value **llvm::Constant::getIntegerValue(llvm::Constant ***this, llvm::Type *a2, const llvm::APInt *a3)
{
  llvm::Constant *v4;
  llvm::ValueHandleBase *v5;
  llvm::Constant *v6;

  v4 = (llvm::Constant *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v4 = *this[2];
  v5 = llvm::ConstantInt::get((llvm::ConstantInt *)*this, a2, a3);
  if (*((_BYTE *)v4 + 8) == 15 && v4 != 0)
    v5 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v5, v4, 0);
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v5, v6);
  else
    return (llvm::Value **)v5;
}

llvm::ValueHandleBase *llvm::ConstantInt::get(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t *v5;
  char v6;
  uint64_t v7;
  llvm::ValueHandleBase *result;
  llvm::LLVMContext *v9;
  int v10;
  _QWORD *v11;
  llvm::ValueHandleBase **v12;
  uint64_t v13;
  llvm::ValueHandleBase *v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  size_t v19;
  llvm::ValueHandleBase *v20;
  void *v21;
  uint64_t v22;
  int v23;

  v5 = (uint64_t *)(*(_QWORD *)this + 176);
  v22 = 0;
  v6 = sub_1C5382008(v5, a2, &v22);
  v7 = v22;
  if ((v6 & 1) != 0)
  {
    result = *(llvm::ValueHandleBase **)(v22 + 16);
    if (result)
      return result;
  }
  else
  {
    v9 = (llvm::LLVMContext *)sub_1C5382148((uint64_t)v5, (uint64_t)a2, a2, v22);
    v7 = (uint64_t)v9;
    if (*((_DWORD *)v9 + 2) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
    {
      if (v9 != a2)
      {
        llvm::APInt::reallocate((uint64_t)v9, *((_DWORD *)a2 + 2));
        v18 = *(unsigned int *)(v7 + 8);
        if (v18 <= 0x40)
          *(_QWORD *)v7 = *(_QWORD *)a2;
        else
          memcpy(*(void **)v7, *(const void **)a2, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *((_DWORD *)a2 + 2);
    }
    *(_QWORD *)(v7 + 16) = 0;
  }
  v10 = *((_DWORD *)a2 + 2);
  v23 = v10;
  if (v10 <= 63)
  {
    if (v10 <= 31)
    {
      switch(v10)
      {
        case 16:
          v11 = (_QWORD *)(*(_QWORD *)this + 1936);
          goto LABEL_11;
        case 8:
          v11 = (_QWORD *)(*(_QWORD *)this + 1912);
          goto LABEL_11;
        case 1:
          v11 = (_QWORD *)(*(_QWORD *)this + 1888);
          goto LABEL_11;
      }
    }
    else if (v10 == 32)
    {
      v11 = (_QWORD *)(*(_QWORD *)this + 1960);
      goto LABEL_11;
    }
LABEL_26:
    v15 = sub_1C5270984(*(_QWORD *)this + 2168, &v23);
    v11 = (_QWORD *)*((_QWORD *)v15 + 1);
    if (!v11)
    {
      v16 = v15;
      v11 = (_QWORD *)sub_1C484358C(*(_QWORD *)this + 2040, 24, 3);
      v17 = v23;
      *v11 = this;
      v11[2] = 0;
      v11[1] = (v17 << 8) | 0xDu;
      *((_QWORD *)v16 + 1) = v11;
    }
    goto LABEL_11;
  }
  if (v10 != 64)
  {
    if (v10 == 128)
    {
      v11 = (_QWORD *)(*(_QWORD *)this + 2008);
      goto LABEL_11;
    }
    goto LABEL_26;
  }
  v11 = (_QWORD *)(*(_QWORD *)this + 1984);
LABEL_11:
  v12 = (llvm::ValueHandleBase **)(v7 + 16);
  result = (llvm::ValueHandleBase *)operator new(0x28uLL);
  *(_QWORD *)result = v11;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 16;
  v13 = *((unsigned int *)a2 + 2);
  *((_DWORD *)result + 8) = v13;
  if (v13 > 0x40)
  {
    v19 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
    v20 = result;
    v21 = (void *)operator new[]();
    *((_QWORD *)v20 + 3) = v21;
    memcpy(v21, *(const void **)a2, v19);
    result = v20;
  }
  else
  {
    *((_QWORD *)result + 3) = *(_QWORD *)a2;
  }
  v14 = *v12;
  *v12 = result;
  if (v14)
  {
    sub_1C5382408((int)v12, v14);
    return *v12;
  }
  return result;
}

llvm::UndefValue *llvm::ConstantExpr::getIntToPtr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x30, (uint64_t)this, a2, a3);
}

llvm::Value **llvm::ConstantVector::getSplat(llvm::Type *a1, uint64_t a2, llvm::Constant *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  llvm::FixedVectorType ***v12;
  uint64_t v13;
  llvm::UndefValue *Impl;
  _QWORD **v15;
  uint64_t ShuffleVector;
  llvm::ConstantAggregateZero *v17;
  llvm::ConstantAggregateZero *v18;
  llvm::Type *v19;
  llvm::ConstantInt *v20;
  llvm::ConstantExpr *v21;
  BOOL v22;
  llvm::Constant *v23;
  llvm::Type *v24;
  llvm *InsertElement;
  void *v26;
  uint64_t v27;
  _QWORD v28[33];

  v4 = a1;
  v28[32] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a1 >> 32 == 1)
  {
    llvm::ScalableVectorType::get(*(uint64_t ***)a2, a1);
    v18 = v17;
    if (llvm::Constant::isNullValue((llvm::Constant *)a2))
      return (llvm::Value **)llvm::ConstantAggregateZero::get(v18, v19);
    if (*(unsigned __int8 *)(a2 + 16) - 11 <= 1)
      return (llvm::Value **)llvm::UndefValue::get(v18, v19);
    v20 = (llvm::ConstantInt *)(**(_QWORD **)v18 + 1960);
    v21 = (llvm::ConstantExpr *)llvm::PoisonValue::get(v18, v19);
    v23 = (llvm::Constant *)llvm::ConstantInt::get(v20, 0, 0, v22);
    InsertElement = llvm::ConstantExpr::getInsertElement(v21, (llvm::Constant *)a2, v23, 0, v24);
    v26 = v28;
    v27 = 0x800000000;
    sub_1C4893E04((char *)&v26, v4, 0);
    ShuffleVector = (uint64_t)llvm::ConstantExpr::getShuffleVector(InsertElement, v21, (int *)v26, v27, 0);
  }
  else
  {
    if ((*(_BYTE *)(a2 + 16) & 0xFE) == 0x10)
    {
      v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if (v5 < 4u)
        return llvm::ConstantDataVector::getSplat(a1, (uint64_t **)a2, a3);
      if (v5 == 13)
      {
        HIDWORD(v7) = v5 >> 8;
        LODWORD(v7) = (v5 >> 8) - 8;
        v6 = v7 >> 3;
        v8 = v6 > 7;
        v9 = (1 << v6) & 0x8B;
        if (!v8 && v9 != 0)
          return llvm::ConstantDataVector::getSplat(a1, (uint64_t **)a2, a3);
      }
    }
    v26 = v28;
    v27 = 0x2000000000;
    sub_1C4848C0C((unsigned int *)&v26, a1, a2);
    v12 = (llvm::FixedVectorType ***)v26;
    v13 = v27;
    Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v26, (llvm::Type *)v27);
    if (Impl)
      goto LABEL_13;
    llvm::FixedVectorType::get(**v12, (llvm::Type *)v13);
    ShuffleVector = sub_1C537B3A4(**v15 + 1288, (uint64_t)v15, v12, v13);
  }
  Impl = (llvm::UndefValue *)ShuffleVector;
LABEL_13:
  if (v26 != v28)
    free(v26);
  return (llvm::Value **)Impl;
}

llvm::ValueHandleBase *llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2)
{
  unsigned int v3;
  llvm::ConstantInt *v4;
  const llvm::APInt *v5;
  llvm::ValueHandleBase *v6;
  uint64_t v7;
  unsigned int *v8;
  const llvm::APFloat *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t AllOnesValue;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 2);
  if (this && v3 == 13)
  {
    v4 = *(llvm::ConstantInt **)this;
    sub_1C4832EA4((llvm::APInt *)&v15, v3 >> 8, -1, 1);
    v6 = llvm::ConstantInt::get(v4, (llvm::LLVMContext *)&v15, v5);
    if (v16 < 0x41)
      return v6;
    v7 = v15;
    if (!v15)
      return v6;
  }
  else
  {
    if (v3 != 2)
    {
      v8 = (unsigned int *)&unk_1C866F15C;
      switch((char)v3)
      {
        case 0:
          goto LABEL_8;
        case 1:
          v8 = (unsigned int *)&unk_1C866F170;
          goto LABEL_8;
        case 2:
          __break(1u);
          goto LABEL_18;
        case 3:
LABEL_18:
          v8 = (unsigned int *)&unk_1C866F198;
          goto LABEL_8;
        case 4:
          v8 = (unsigned int *)llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)&unk_1C866F15C);
          goto LABEL_8;
        case 5:
          v8 = (unsigned int *)llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)&unk_1C866F15C);
          goto LABEL_8;
        case 6:
          v8 = (unsigned int *)&unk_1C866F1C0;
          goto LABEL_8;
        default:
          v11 = *((unsigned int *)this + 8);
          v12 = v3 == 19;
          AllOnesValue = llvm::Constant::getAllOnesValue(*((llvm::Constant **)this + 3), a2);
          return (llvm::ValueHandleBase *)llvm::ConstantVector::getSplat(v11 | (v12 << 32), AllOnesValue, v14);
      }
    }
    v8 = (unsigned int *)&unk_1C866F184;
LABEL_8:
    llvm::APFloat::getAllOnesValue(v8, (uint64_t)&v15);
    v6 = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)&v15, v9);
    if ((_UNKNOWN *)v16 == &unk_1C866F1C0)
    {
      sub_1C4773C74(v17);
      return v6;
    }
    if ((*(_DWORD *)(v16 + 8) - 64) > 0xFFFFFF7F)
      return v6;
    v7 = v17[0];
    if (!v17[0])
      return v6;
  }
  MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  return v6;
}

unint64_t llvm::ConstantAggregateZero::getElementCount(llvm::ConstantAggregateZero *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  BOOL v4;

  v1 = *(_QWORD *)this;
  v2 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (*(_QWORD *)this)
    v3 = v2 == 17;
  else
    v3 = 0;
  if (v3)
    return *(unsigned int *)(v1 + 32);
  if (v1)
    v4 = (v2 & 0xFE) == 18;
  else
    v4 = 0;
  if (v4)
    return *(unsigned int *)(v1 + 32) | ((unint64_t)(v2 == 19) << 32);
  else
    return *(unsigned int *)(v1 + 12);
}

llvm::Value **llvm::ConstantAggregateZero::getElementValue(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  uint64_t v2;
  llvm::Constant **v5;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 17 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
    v5 = (llvm::Constant **)(v2 + 24);
  else
    v5 = (llvm::Constant **)(*(_QWORD *)(v2 + 16) + 8 * a2);
  return llvm::Constant::getNullValue(*v5, a2);
}

uint64_t llvm::UndefValue::getNumElements(llvm::UndefValue *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = *(_QWORD *)this;
  v2 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
  if (*(_QWORD *)this)
    v3 = v2 == 17;
  else
    v3 = 0;
  if (v3)
    return *(unsigned int *)(v1 + 32);
  v4 = v2 & 0xFE;
  if (v1 && v4 == 18)
    return *(unsigned int *)(v1 + 32);
  else
    return *(unsigned int *)(v1 + 12);
}

_QWORD *llvm::PoisonValue::getElementValue(llvm::PoisonValue *this, llvm::Type *a2)
{
  uint64_t v2;
  llvm::PoisonValue **v5;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 17 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
    v5 = (llvm::PoisonValue **)(v2 + 24);
  else
    v5 = (llvm::PoisonValue **)(*(_QWORD *)(v2 + 16) + 8 * a2);
  return llvm::PoisonValue::get(*v5, a2);
}

llvm::UndefValue *llvm::UndefValue::getElementValue(llvm::UndefValue *this, llvm::Type *a2)
{
  uint64_t v2;
  llvm::UndefValue **v5;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 17 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
    v5 = (llvm::UndefValue **)(v2 + 24);
  else
    v5 = (llvm::UndefValue **)(*(_QWORD *)(v2 + 16) + 8 * a2);
  return llvm::UndefValue::get(*v5, a2);
}

uint64_t llvm::ConstantDataSequential::getNumElements(llvm::ConstantDataSequential *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 32);
}

llvm::APFloatBase *llvm::ConstantDataSequential::getElementAsConstant(llvm::ConstantDataSequential *this)
{
  llvm::ConstantInt *v1;
  llvm::Type *v2;
  BOOL v3;
  llvm::APFloatBase *result;
  llvm::ConstantFP *v5;
  const llvm::APFloat *v6;
  llvm::APFloatBase *v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v1 = *(llvm::ConstantInt **)(*(_QWORD *)this + 24);
  if ((*((_BYTE *)v1 + 8) & 0xFC) != 0)
  {
    llvm::ConstantDataSequential::getElementAsInteger(this);
    return (llvm::APFloatBase *)llvm::ConstantInt::get(v1, v2, 0, v3);
  }
  v5 = **(llvm::ConstantFP ***)this;
  llvm::ConstantDataSequential::getElementAsAPFloat(this);
  result = llvm::ConstantFP::get(v5, (llvm::LLVMContext *)v8, v6);
  if ((_UNKNOWN *)v9 == &unk_1C866F1C0)
  {
    v7 = result;
    sub_1C4773C74(v10);
    return v7;
  }
  if ((*(_DWORD *)(v9 + 8) - 64) <= 0xFFFFFF7F && v10[0])
  {
    v7 = result;
    MEMORY[0x1CAA32F9C](v10[0], 0x1000C8000313F17);
    return v7;
  }
  return result;
}

llvm::UndefValue *llvm::Constant::getAggregateElement(llvm::Constant *this, llvm::Constant *a2)
{
  unsigned int *v3;
  unsigned int v4;

  if (!a2 || *((_BYTE *)a2 + 16) != 16)
    return 0;
  v3 = (unsigned int *)((char *)a2 + 24);
  v4 = *((_DWORD *)a2 + 8);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::Constant *)((char *)a2 + 24)) > 0x40)
      return 0;
    v3 = *(unsigned int **)v3;
  }
  return llvm::Constant::getAggregateElement(this, (llvm::Type *)*v3);
}

void llvm::Constant::destroyConstant(int32x2_t ****this)
{
  uint64_t v2;
  int32x2_t **v3;
  int32x2_t *v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  llvm::Constant **v8;
  llvm::Constant *v9;
  int32x2_t ***v10;
  int v11;
  int v12;

  v2 = *((unsigned __int8 *)this + 16);
  if ((_DWORD)v2 != 5)
    __asm { BR              X10 }
  v3 = **this;
  v4 = *v3;
  v5 = (*v3)[189];
  v6 = (*v3)[191].i32[0];
  if (!v6)
  {
    v7 = 0;
LABEL_10:
    v8 = (llvm::Constant **)(*(_QWORD *)&v5 + 8 * v7);
    goto LABEL_4;
  }
  LODWORD(v7) = sub_1C5385A80((uint64_t *)this) & (v6 - 1);
  v8 = (llvm::Constant **)(*(_QWORD *)&v5 + 8 * v7);
  v9 = *v8;
  if (*v8 != (llvm::Constant *)this)
  {
    v11 = 1;
    while (v9 != (llvm::Constant *)-4096)
    {
      v12 = v7 + v11++;
      v7 = v12 & (v6 - 1);
      v9 = *(llvm::Constant **)(*(_QWORD *)&v5 + 8 * v7);
      if (v9 == (llvm::Constant *)this)
        goto LABEL_10;
    }
    v5 = v4[189];
    v7 = v4[191].u32[0];
    goto LABEL_10;
  }
LABEL_4:
  *v8 = (llvm::Constant *)-8192;
  v4[190] = vadd_s32(v4[190], (int32x2_t)0x1FFFFFFFFLL);
  while (1)
  {
    v10 = this[1];
    if (!v10)
      break;
    llvm::Constant::destroyConstant((llvm::Constant *)v10[3]);
  }
  llvm::deleteConstant((uint64_t)this);
}

void sub_1C5376F54()
{
  llvm::GlobalValue *v0;

  llvm::GlobalValue::destroyConstantImpl(v0);
}

void sub_1C5376F60()
{
  llvm::BlockAddress *v0;

  llvm::BlockAddress::destroyConstantImpl(v0);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376F70()
{
  llvm::DSOLocalEquivalent *v0;

  llvm::DSOLocalEquivalent::destroyConstantImpl(v0);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376F7C()
{
  llvm::NoCFIValue *v0;

  llvm::NoCFIValue::destroyConstantImpl(v0);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376F88()
{
  uint64_t *v0;

  sub_1C62292B8(**(_QWORD **)*v0 + 1288, v0);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376FA4()
{
  llvm::UndefValue *v0;

  llvm::UndefValue::destroyConstantImpl(v0);
}

void sub_1C5376FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  _QWORD ***v10;
  uint64_t v11;

  v11 = ***v10 + 1384;
  a10 = *v10;
  sub_1C6229470(v11, (uint64_t *)&a10);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  _QWORD ***v10;
  uint64_t v11;

  v11 = ***v10 + 1216;
  a10 = *v10;
  sub_1C6229240(v11, (uint64_t *)&a10);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376FEC()
{
  llvm::Value **v0;

  llvm::ConstantDataSequential::destroyConstantImpl(v0);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5376FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  _QWORD ***v10;
  uint64_t v11;

  v11 = ***v10 + 1336;
  a10 = *v10;
  sub_1C6229390(v11, (uint64_t *)&a10);
  JUMPOUT(0x1C5376E94);
}

void sub_1C5377018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD **a10)
{
  _QWORD ***v10;
  uint64_t v11;

  v11 = ***v10 + 1312;
  a10 = *v10;
  sub_1C6229328(v11, &a10);
  JUMPOUT(0x1C5376E94);
}

int32x2_t llvm::ConstantExpr::destroyConstantImpl(llvm::ConstantExpr *this)
{
  return sub_1C537FC54((int32x2_t *)(***(_QWORD ***)this + 1512), (uint64_t *)this);
}

int32x2_t llvm::ConstantArray::destroyConstantImpl(int32x2_t ****this)
{
  return sub_1C537C658(***this + 155, (uint64_t)this);
}

int32x2_t llvm::ConstantStruct::destroyConstantImpl(int32x2_t ****this)
{
  return sub_1C537C708(***this + 158, (uint64_t)this);
}

int32x2_t llvm::ConstantVector::destroyConstantImpl(llvm::ConstantVector *this)
{
  return sub_1C62292B8(***(_QWORD ***)this + 1288, (uint64_t *)this);
}

int32x2_t llvm::PoisonValue::destroyConstantImpl(llvm::PoisonValue *this)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD **v4;

  v1 = *(_QWORD ***)this;
  v2 = ***(_QWORD ***)this + 1384;
  v4 = v1;
  return sub_1C6229470(v2, (uint64_t *)&v4);
}

int32x2_t llvm::ConstantAggregateZero::destroyConstantImpl(llvm::ConstantAggregateZero *this)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD **v4;

  v1 = *(_QWORD ***)this;
  v2 = ***(_QWORD ***)this + 1216;
  v4 = v1;
  return sub_1C6229240(v2, (uint64_t *)&v4);
}

int32x2_t llvm::ConstantTargetNone::destroyConstantImpl(llvm::ConstantTargetNone *this)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD **v4;

  v1 = *(_QWORD ***)this;
  v2 = ***(_QWORD ***)this + 1336;
  v4 = v1;
  return sub_1C6229390(v2, (uint64_t *)&v4);
}

int32x2_t llvm::ConstantPointerNull::destroyConstantImpl(llvm::ConstantPointerNull *this)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD **v4;

  v1 = *(_QWORD ***)this;
  v2 = ***(_QWORD ***)this + 1312;
  v4 = v1;
  return sub_1C6229328(v2, &v4);
}

void llvm::deleteConstant(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1C53771A8()
{
  llvm::Value *v0;
  int v1;
  uint64_t v2;
  char *v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  llvm::Value::~Value(v0);
  v1 = *((_DWORD *)v0 + 5);
  if ((v1 & 0x40000000) != 0)
  {
    v9 = (char *)*((_QWORD *)v0 - 1);
    v8 = (char *)v0 - 8;
    v7 = v9;
    v10 = v1 & 0x7FFFFFF;
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        v12 = &v7[v11];
        if (*(_QWORD *)&v7[v11 - 32])
        {
          **((_QWORD **)v12 - 2) = *((_QWORD *)v12 - 3);
          v13 = *((_QWORD *)v12 - 3);
          if (v13)
            *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 - 2);
        }
        v11 -= 32;
      }
      while (v11);
    }
    operator delete(v7);
    v3 = v8;
  }
  else
  {
    v2 = v1 & 0x7FFFFFF;
    v3 = (char *)v0 - 32 * v2;
    if ((_DWORD)v2)
    {
      v4 = (_QWORD **)((char *)v0 - 16);
      v5 = -32 * v2;
      do
      {
        if (*(v4 - 2))
        {
          **v4 = *(v4 - 1);
          v6 = (uint64_t)*(v4 - 1);
          if (v6)
            *(_QWORD *)(v6 + 16) = *v4;
        }
        v4 -= 4;
        v5 += 32;
      }
      while (v5);
    }
    if (v1 < 0)
      v3 = &v3[-*((_QWORD *)v3 - 1) - 8];
  }
  operator delete(v3);
}

uint64_t llvm::Constant::canTrap(llvm::Constant *this)
{
  uint64_t result;
  unsigned int v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BYTE v7[32];

  v3 = v7;
  v4 = v7;
  v5 = 4;
  v6 = 0;
  result = sub_1C53774DC((uint64_t)this, (llvm::SmallPtrSetImplBase *)&v3);
  if (v4 != v3)
  {
    v2 = result;
    free(v4);
    return v2;
  }
  return result;
}

uint64_t sub_1C53774DC(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  llvm::Constant *v15;

  result = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 5)
  {
    v4 = *(_DWORD *)(a1 + 20);
    v5 = v4 & 0x7FFFFFF;
    if ((v4 & 0x7FFFFFF) != 0)
    {
      v7 = a1;
      do
      {
        v8 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
        if (v8 && *(_BYTE *)(v8 + 16) == 5)
        {
          sub_1C4774094(a2, *(_QWORD *)(v7 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)));
          if (v10)
          {
            if ((sub_1C53774DC(v8, a2) & 1) != 0)
              return 1;
          }
        }
        v7 += 32;
      }
      while (--v5);
    }
    v11 = *(unsigned __int16 *)(a1 + 18);
    v12 = v11 > 0x17;
    v13 = (1 << v11) & 0xD80000;
    if (!v12 && v13 != 0)
    {
      v15 = *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
      if (*((_BYTE *)v15 + 16) == 16)
        return llvm::Constant::isNullValue(v15);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::Constant::isThreadDependent(llvm::Constant *this)
{
  return sub_1C53775E8((uint64_t)this, (uint64_t (*)(uint64_t))sub_1C5381FC0);
}

uint64_t sub_1C53775E8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[64];
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v15 = v19;
  v16 = v19;
  v17 = 8;
  v18 = 0;
  v20 = v22;
  v22[0] = a1;
  v21 = 0x800000001;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v15, a1);
  while (1)
  {
    if (!(_DWORD)v21)
    {
      v13 = 0;
      goto LABEL_25;
    }
    v3 = *((_QWORD *)v20 + v21 - 1);
    LODWORD(v21) = v21 - 1;
    v4 = !v3 || *(unsigned __int8 *)(v3 + 16) > 3u;
    if (!v4 && (a2(v3) & 1) != 0)
      break;
    v5 = *(_DWORD *)(v3 + 20);
    if ((v5 & 0x40000000) != 0)
    {
      v7 = *(uint64_t **)(v3 - 8);
      v6 = v5 & 0x7FFFFFF;
      if (v6)
        goto LABEL_12;
    }
    else
    {
      v6 = v5 & 0x7FFFFFF;
      v7 = (uint64_t *)(v3 - 32 * v6);
      if (v6)
      {
LABEL_12:
        v8 = 32 * v6;
        do
        {
          v9 = *v7;
          if (*v7)
            v10 = *(unsigned __int8 *)(*v7 + 16) > 0x14u;
          else
            v10 = 1;
          if (!v10)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v15, *v7);
            if (v11)
            {
              v12 = v21;
              if (v21 >= (unint64_t)HIDWORD(v21))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v21 + 1, 8);
                v12 = v21;
              }
              *((_QWORD *)v20 + v12) = v9;
              LODWORD(v21) = v21 + 1;
            }
          }
          v7 += 4;
          v8 -= 32;
        }
        while (v8);
      }
    }
  }
  v13 = 1;
LABEL_25:
  if (v20 != v22)
    free(v20);
  if (v16 != v15)
    free(v16);
  return v13;
}

uint64_t llvm::Constant::isDLLImportDependent(llvm::Constant *this)
{
  return sub_1C53775E8((uint64_t)this, (uint64_t (*)(uint64_t))sub_1C5381FD0);
}

uint64_t llvm::Constant::isConstantUsed(llvm::Constant *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  BOOL v3;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(unsigned __int8 **)(v1 + 24);
    v3 = v2 && v2[16] - 21 >= 0xFFFFFFEF;
    if (!v3 || llvm::Constant::isConstantUsed((llvm::Constant *)v2))
      break;
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  return 1;
}

uint64_t llvm::Constant::getRelocationInfo(llvm::Constant *this)
{
  unsigned int v1;
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BYTE *v8;
  _BYTE *v9;
  llvm::Value *v10;
  llvm::Value *v12;
  llvm::Value *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  int RelocationInfo;

  v1 = *((unsigned __int8 *)this + 16);
  if (v1 < 4)
    return 2;
  v2 = this;
  while (v1 == 4)
  {
    v2 = (llvm::Constant *)*((_QWORD *)v2 - 8);
    v1 = *((unsigned __int8 *)v2 + 16);
    if (v1 < 4)
      return 2;
  }
  if (v1 != 5 || *((_WORD *)v2 + 9) != 15)
    goto LABEL_34;
  v4 = (_QWORD *)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v5 = *v4;
  if (*(_BYTE *)(*v4 + 16) != 5)
    v5 = 0;
  v6 = v4[4];
  if (*(_BYTE *)(v6 + 16) != 5)
    v6 = 0;
  v7 = !v5 || v6 == 0;
  if (v7 || *(_WORD *)(v5 + 18) != 47 || *(_WORD *)(v6 + 18) != 47)
    goto LABEL_34;
  v8 = *(_BYTE **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
  v9 = *(_BYTE **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
  if (v8[16] == 4 && v9[16] == 4 && *((_QWORD *)v8 - 8) == *((_QWORD *)v9 - 8))
    return 0;
  v10 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v9);
  if (!v10 || *((unsigned __int8 *)v10 + 16) > 3u)
    goto LABEL_34;
  v12 = v10;
  v13 = llvm::Value::stripInBoundsConstantOffsets((llvm::Value *)v8);
  v14 = *((unsigned __int8 *)v13 + 16);
  if (v13)
    v15 = v14 > 3;
  else
    v15 = 1;
  if (v15)
  {
    if (v14 != 6)
      goto LABEL_34;
  }
  else if ((*((_BYTE *)v13 + 33) & 0x40) == 0)
  {
    goto LABEL_34;
  }
  if ((*((_BYTE *)v12 + 33) & 0x40) != 0)
    return 1;
LABEL_34:
  v16 = *((_DWORD *)v2 + 5) & 0x7FFFFFF;
  if (!(_DWORD)v16)
    return 0;
  v17 = 0;
  LODWORD(v3) = 0;
  v18 = 32 * v16;
  do
  {
    v19 = *((_DWORD *)v2 + 5);
    if ((v19 & 0x40000000) != 0)
      v20 = (char *)*((_QWORD *)v2 - 1);
    else
      v20 = (char *)v2 - 32 * (v19 & 0x7FFFFFF);
    RelocationInfo = llvm::Constant::getRelocationInfo(*(llvm::Constant **)&v20[v17]);
    if (RelocationInfo <= (int)v3)
      v3 = v3;
    else
      v3 = RelocationInfo;
    v17 += 32;
  }
  while (v18 != v17);
  return v3;
}

BOOL llvm::Constant::needsRelocation(llvm::Constant *this)
{
  return llvm::Constant::getRelocationInfo(this) != 0;
}

uint64_t llvm::Constant::removeDeadConstantUsers(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;

  v1 = (uint64_t *)(this + 8);
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      this = *(_QWORD *)(v2 + 24);
      if (this)
        v4 = *(unsigned __int8 *)(this + 16) >= 0x15u;
      else
        v4 = 1;
      if (v4)
      {
        v5 = (uint64_t *)(v2 + 8);
      }
      else
      {
        this = sub_1C5377A34(this, 1);
        v5 = (uint64_t *)(v3 + 8);
        if (!v3)
          v5 = v1;
        if ((this & 1) != 0)
          v2 = v3;
        else
          v5 = (uint64_t *)(v2 + 8);
      }
      v3 = v2;
      v2 = *v5;
    }
    while (*v5);
  }
  return this;
}

uint64_t sub_1C5377A34(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;

  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    return 0;
  v5 = (uint64_t *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u)
        return 0;
      result = sub_1C5377A34();
      if (!(_DWORD)result)
        return result;
      v9 = (uint64_t *)(v6 + 8);
      if (a2)
        v9 = v5;
      v6 = *v9;
    }
    while (*v9);
  }
  if (a2)
    llvm::Constant::destroyConstant((int32x2_t ****)a1);
  return 1;
}

uint64_t llvm::Constant::hasOneLiveUse(llvm::Constant *this)
{
  return llvm::Constant::hasNLiveUses(this, 1u);
}

uint64_t llvm::Constant::hasNLiveUses(llvm::Constant *this, unsigned int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 24);
      v6 = !v5 || *(unsigned __int8 *)(v5 + 16) > 0x14u;
      if ((v6 || (sub_1C5377A34(v5, 0) & 1) == 0) && ++v4 > a2)
        break;
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_12;
    }
    v7 = 0;
  }
  else
  {
    v4 = 0;
LABEL_12:
    v7 = 1;
  }
  if (v4 == a2)
    return v7;
  else
    return 0;
}

uint64_t llvm::Constant::hasZeroLiveUses(llvm::Constant *this)
{
  return llvm::Constant::hasNLiveUses(this, 0);
}

llvm::UndefValue *llvm::ConstantVector::get(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  llvm::UndefValue *result;
  _QWORD **v5;

  result = llvm::ConstantVector::getImpl(a1, a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    return (llvm::UndefValue *)sub_1C537B3A4(**v5 + 1288, (uint64_t)v5, a1, (uint64_t)a2);
  }
  return result;
}

llvm::UndefValue *llvm::Constant::mergeUndefsWith(llvm::Constant *this, llvm::Constant *a2, llvm::Constant *a3)
{
  llvm::Constant *Impl;
  uint64_t v5;
  llvm::Type *v6;
  BOOL v8;
  llvm::UndefValue *v9;
  unint64_t v10;
  llvm::Type *v11;
  char v12;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v14;
  llvm::Type *v15;
  llvm::UndefValue *v16;
  llvm::FixedVectorType ***v17;
  uint64_t v18;
  _QWORD **v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[33];

  Impl = this;
  v22[32] = *MEMORY[0x1E0C80C00];
  if ((sub_1C4E7B480((uint64_t)this) & 1) == 0)
  {
    v5 = *(_QWORD *)Impl;
    if (sub_1C4E7B480((uint64_t)a2))
      return llvm::UndefValue::get((llvm::UndefValue *)v5, v6);
    v8 = *(_BYTE *)(v5 + 8) != 18 || v5 == 0;
    if (!v8)
    {
      v9 = *(llvm::UndefValue **)(v5 + 24);
      v10 = *(unsigned int *)(v5 + 32);
      v20 = v22;
      v21 = 0x2000000000;
      sub_1C4848C0C((unsigned int *)&v20, v10, 0);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = 0;
        do
        {
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(Impl, v11);
            *((_QWORD *)v20 + (_QWORD)v11) = AggregateElement;
            v14 = llvm::Constant::getAggregateElement(a2, v11);
            if ((sub_1C4E7B480(*((_QWORD *)v20 + (_QWORD)v11)) & 1) != 0 || (sub_1C4E7B480((uint64_t)v14) & 1) == 0)
              break;
            v16 = llvm::UndefValue::get(v9, v15);
            *((_QWORD *)v20 + (_QWORD)v11) = v16;
            v12 = 1;
            v8 = v10 - 1 == (_QWORD)v11;
            v11 = (llvm::Type *)((char *)v11 + 1);
            if (v8)
              goto LABEL_18;
          }
          v11 = (llvm::Type *)((char *)v11 + 1);
        }
        while ((llvm::Type *)v10 != v11);
        if ((v12 & 1) == 0)
          goto LABEL_20;
LABEL_18:
        v17 = (llvm::FixedVectorType ***)v20;
        v18 = v21;
        Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v20, (llvm::Type *)v21);
        if (!Impl)
        {
          llvm::FixedVectorType::get(**v17, (llvm::Type *)v18);
          Impl = (llvm::Constant *)sub_1C537B3A4(**v19 + 1288, (uint64_t)v19, v17, v18);
        }
      }
LABEL_20:
      if (v20 != v22)
        free(v20);
    }
  }
  return Impl;
}

llvm::UndefValue *llvm::UndefValue::get(llvm::UndefValue *this, llvm::Type *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  llvm::UndefValue **v7;
  llvm::UndefValue *v8;
  llvm::UndefValue *result;
  llvm::UndefValue **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  llvm::UndefValue **v14;
  llvm::Value *v15;
  llvm::Value *v16;
  _DWORD *v17;
  llvm::UndefValue *v18;

  v18 = this;
  v2 = **(_QWORD **)this;
  v3 = *(_DWORD *)(v2 + 1376);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1360);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (llvm::UndefValue **)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == this)
      goto LABEL_3;
    v10 = 0;
    v11 = 1;
    while (v8 != (llvm::UndefValue *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == (llvm::UndefValue *)-8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (llvm::UndefValue **)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == this)
        goto LABEL_3;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v7;
  }
  else
  {
    v14 = 0;
  }
  v7 = (llvm::UndefValue **)sub_1C5384E20(v2 + 1360, (uint64_t)&v18, (uint64_t *)&v18, v14);
  *v7 = v18;
  v7[1] = 0;
LABEL_3:
  result = v7[1];
  if (!result)
  {
    result = (llvm::UndefValue *)operator new(0x18uLL);
    *(_QWORD *)result = v18;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 11;
    v16 = v7[1];
    v7[1] = result;
    if (v16)
    {
      llvm::Value::~Value(v16, v15);
      llvm::User::operator delete(v17);
      return v7[1];
    }
  }
  return result;
}

uint64_t llvm::ConstantInt::ConstantInt(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  unsigned int v4;
  llvm::APInt *v5;
  unsigned int v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 16;
  *(_DWORD *)(a1 + 20) = v4;
  v5 = (llvm::APInt *)(a1 + 24);
  v6 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 32) = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase(v5, (const void **)a3);
  else
    *(_QWORD *)v5 = *(_QWORD *)a3;
  return a1;
}

llvm::ValueHandleBase *llvm::ConstantInt::getTrue(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v5;
  unsigned int v6;
  char v7;
  llvm::ConstantInt *v8;
  llvm::ValueHandleBase *v9;
  uint64_t v10;
  unsigned int v11;

  v3 = *(_QWORD *)this;
  result = *(llvm::ValueHandleBase **)(*(_QWORD *)this + 1560);
  if (!result)
  {
    v5 = *(llvm::ConstantInt **)(v3 + 1888);
    v6 = *(_DWORD *)(v3 + 1896);
    v11 = v6 >> 8;
    if (v6 >> 8 > 0x40)
    {
      v8 = v5;
      llvm::APInt::initSlowCase((llvm::APInt *)&v10, 1, 0);
      v5 = v8;
    }
    else
    {
      if (v6 <= 0xFF)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v6);
      v10 = v7 & 1;
    }
    result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v10, a3);
    if (v11 >= 0x41)
    {
      if (v10)
      {
        v9 = result;
        MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
        result = v9;
      }
    }
    *(_QWORD *)(v3 + 1560) = result;
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantInt::get(llvm::ConstantInt **this, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ConstantInt *v4;
  unint64_t v5;
  unint64_t v6;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v8;
  llvm::ValueHandleBase *v9;
  unint64_t v10;
  unsigned int v11;

  v4 = *this;
  v5 = *((unsigned int *)this + 2);
  v11 = v5 >> 8;
  if (v5 >> 8 > 0x40)
  {
    v8 = v4;
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, a2, (int)a3);
    v4 = v8;
  }
  else
  {
    if (v5 <= 0xFF)
      v6 = 0;
    else
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v5);
    v10 = v6 & a2;
  }
  result = llvm::ConstantInt::get(v4, (llvm::LLVMContext *)&v10, a3);
  if (v11 >= 0x41)
  {
    if (v10)
    {
      v9 = result;
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      return v9;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantInt::getFalse(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v5;
  llvm::ConstantInt *v6;
  llvm::ValueHandleBase *v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(_QWORD *)this;
  result = *(llvm::ValueHandleBase **)(*(_QWORD *)this + 1568);
  if (!result)
  {
    v5 = *(llvm::ConstantInt **)(v3 + 1888);
    v9 = *(_DWORD *)(v3 + 1896) >> 8;
    if (v9 > 0x40)
    {
      v6 = v5;
      llvm::APInt::initSlowCase((llvm::APInt *)&v8, 0, 0);
      v5 = v6;
    }
    else
    {
      v8 = 0;
    }
    result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v8, a3);
    if (v9 >= 0x41)
    {
      if (v8)
      {
        v7 = result;
        MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
        result = v7;
      }
    }
    *(_QWORD *)(v3 + 1568) = result;
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantInt::getBool(llvm::ConstantInt *this, llvm::LLVMContext *a2, const llvm::APInt *a3)
{
  uint64_t v3;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v5;
  llvm::ConstantInt *v6;
  unsigned int v7;
  char v8;
  llvm::ConstantInt *v9;
  llvm::ConstantInt *v10;
  llvm::ValueHandleBase *v11;
  llvm::ValueHandleBase *v12;
  uint64_t v13;
  unsigned int v14;

  v3 = *(_QWORD *)this;
  if ((_DWORD)a2)
  {
    result = *(llvm::ValueHandleBase **)(v3 + 1560);
    if (!result)
    {
      v6 = *(llvm::ConstantInt **)(v3 + 1888);
      v7 = *(_DWORD *)(v3 + 1896);
      v14 = v7 >> 8;
      if (v7 >> 8 > 0x40)
      {
        v10 = v6;
        llvm::APInt::initSlowCase((llvm::APInt *)&v13, 1, 0);
        v6 = v10;
      }
      else
      {
        if (v7 <= 0xFF)
          v8 = 0;
        else
          v8 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v7);
        v13 = v8 & 1;
      }
      result = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v13, a3);
      if (v14 >= 0x41)
      {
        if (v13)
        {
          v12 = result;
          MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
          result = v12;
        }
      }
      *(_QWORD *)(v3 + 1560) = result;
    }
  }
  else
  {
    result = *(llvm::ValueHandleBase **)(v3 + 1568);
    if (!result)
    {
      v5 = *(llvm::ConstantInt **)(v3 + 1888);
      v14 = *(_DWORD *)(v3 + 1896) >> 8;
      if (v14 > 0x40)
      {
        v9 = v5;
        llvm::APInt::initSlowCase((llvm::APInt *)&v13, 0, 0);
        v5 = v9;
      }
      else
      {
        v13 = 0;
      }
      result = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v13, a3);
      if (v14 >= 0x41 && v13)
      {
        v11 = result;
        MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
        result = v11;
      }
      *(_QWORD *)(v3 + 1568) = result;
    }
  }
  return result;
}

llvm::Value **llvm::ConstantInt::getTrue(uint64_t **this, llvm::Type *a2, const llvm::APInt *a3)
{
  uint64_t v4;
  llvm::ValueHandleBase *v5;
  llvm::ConstantInt *v7;
  unsigned int v8;
  char v9;
  llvm::ConstantInt *v10;
  llvm::ValueHandleBase *v11;
  uint64_t v12;
  unsigned int v13;

  v4 = **this;
  v5 = *(llvm::ValueHandleBase **)(v4 + 1560);
  if (!v5)
  {
    v7 = *(llvm::ConstantInt **)(v4 + 1888);
    v8 = *(_DWORD *)(v4 + 1896);
    v13 = v8 >> 8;
    if (v8 >> 8 > 0x40)
    {
      v10 = v7;
      llvm::APInt::initSlowCase((llvm::APInt *)&v12, 1, 0);
      v7 = v10;
    }
    else
    {
      if (v8 <= 0xFF)
        v9 = 0;
      else
        v9 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v8);
      v12 = v9 & 1;
    }
    v5 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v12, a3);
    if (v13 >= 0x41 && v12)
    {
      v11 = v5;
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      v5 = v11;
    }
    *(_QWORD *)(v4 + 1560) = v5;
  }
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v5, a3);
  return (llvm::Value **)v5;
}

llvm::Value **llvm::ConstantInt::getFalse(uint64_t **this, llvm::Type *a2, const llvm::APInt *a3)
{
  uint64_t v4;
  llvm::ValueHandleBase *v5;
  llvm::ConstantInt *v7;
  llvm::ConstantInt *v8;
  llvm::ValueHandleBase *v9;
  uint64_t v10;
  unsigned int v11;

  v4 = **this;
  v5 = *(llvm::ValueHandleBase **)(v4 + 1568);
  if (!v5)
  {
    v7 = *(llvm::ConstantInt **)(v4 + 1888);
    v11 = *(_DWORD *)(v4 + 1896) >> 8;
    if (v11 > 0x40)
    {
      v8 = v7;
      llvm::APInt::initSlowCase((llvm::APInt *)&v10, 0, 0);
      v7 = v8;
    }
    else
    {
      v10 = 0;
    }
    v5 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v10, a3);
    if (v11 >= 0x41 && v10)
    {
      v9 = v5;
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      v5 = v9;
    }
    *(_QWORD *)(v4 + 1568) = v5;
  }
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v5, a3);
  return (llvm::Value **)v5;
}

llvm::ValueHandleBase *llvm::ConstantInt::getSigned(llvm::ConstantInt **this, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ConstantInt *v4;
  unint64_t v5;
  unint64_t v6;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v8;
  llvm::ValueHandleBase *v9;
  unint64_t v10;
  unsigned int v11;

  v4 = *this;
  v5 = *((unsigned int *)this + 2);
  v11 = v5 >> 8;
  if (v5 >> 8 > 0x40)
  {
    v8 = v4;
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, a2, 1);
    v4 = v8;
  }
  else
  {
    if (v5 <= 0xFF)
      v6 = 0;
    else
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v5);
    v10 = v6 & a2;
  }
  result = llvm::ConstantInt::get(v4, (llvm::LLVMContext *)&v10, a3);
  if (v11 >= 0x41)
  {
    if (v10)
    {
      v9 = result;
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      return v9;
    }
  }
  return result;
}

llvm::Value **llvm::ConstantInt::getSigned(llvm::ConstantInt *this, llvm::Type *a2)
{
  return llvm::ConstantInt::get(this, (uint64_t)a2, (const llvm::APInt *)1);
}

llvm::Value **llvm::ConstantInt::get(llvm::ConstantInt **this, llvm::Type *a2, const llvm::APInt *a3)
{
  llvm::Value **result;
  llvm::Constant *v5;

  result = (llvm::Value **)llvm::ConstantInt::get(*this, a2, a3);
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)result, v5);
  return result;
}

llvm::ValueHandleBase *llvm::ConstantInt::get(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  llvm::ConstantInt *v4;
  const llvm::APInt *v5;
  llvm::ValueHandleBase *v6;
  uint64_t v8;
  unsigned int v9;

  v4 = *(llvm::ConstantInt **)a1;
  v9 = *(_DWORD *)(a1 + 8) >> 8;
  llvm::APInt::fromString((uint64_t)&v8, (uint64_t)a2, a2, a3, a4);
  v6 = llvm::ConstantInt::get(v4, (llvm::LLVMContext *)&v8, v5);
  if (v9 >= 0x41 && v8)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  return v6;
}

llvm::APFloatBase *llvm::ConstantFP::get(llvm::ConstantFP **this, llvm::Type *a2, double a3)
{
  llvm::ConstantFP *v4;
  int v5;
  const llvm::APFloat *v6;
  uint64_t v7;
  llvm::APFloatBase *Splat;
  _QWORD v10[2];
  int v11;
  char v12;
  const llvm::APInt *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *this;
  LODWORD(v14) = 64;
  v13 = *(const llvm::APInt **)&a3;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v10, &v13);
  v14 = v10[0];
  v15 = v10[1];
  v16 = v11;
  v17 = v12 & 0xF;
  v5 = *((_DWORD *)this + 2);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(*(_QWORD *)this[2] + 8);
  if (v5 != 2)
    __asm { BR              X10 }
  llvm::APFloat::convert((uint64_t)&v13, &unk_1C866F184, 1, v10);
  Splat = llvm::ConstantFP::get(v4, (llvm::LLVMContext *)&v13, v6);
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    Splat = (llvm::APFloatBase *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat, v7);
  if ((_UNKNOWN *)v14 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v15);
  }
  else if ((*(_DWORD *)(v14 + 8) - 64) <= 0xFFFFFF7F && v15)
  {
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  return Splat;
}

void sub_1C5378788()
{
  JUMPOUT(0x1C5378680);
}

void sub_1C5378794(llvm::APFloatBase *a1)
{
  llvm::APFloatBase::x87DoubleExtended(a1);
  JUMPOUT(0x1C5378680);
}

void sub_1C53787A8()
{
  JUMPOUT(0x1C5378680);
}

llvm::Value **llvm::ConstantFP::get(llvm::ConstantFP **this, llvm::Type *a2, const llvm::APFloat *a3)
{
  llvm::Value **result;
  llvm::Constant *v5;

  result = (llvm::Value **)llvm::ConstantFP::get(*this, a2, a3);
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)result, v5);
  return result;
}

void *llvm::ConstantFP::get(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  int v4;
  llvm::ConstantFP *v5;
  const llvm::APFloat *v6;
  llvm::Constant *v7;
  void *Splat;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 8);
  v5 = *(llvm::ConstantFP **)a1;
  if (v4 != 2)
    __asm { BR              X10 }
  llvm::APFloat::APFloat((uint64_t)v10, &unk_1C866F184, a2, a3);
  Splat = llvm::ConstantFP::get(v5, (llvm::LLVMContext *)v10, v6);
  if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(_DWORD *)(a1 + 8) == 19) << 32)), (uint64_t)Splat, v7);
  if ((_UNKNOWN *)v11 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v12);
  }
  else if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F && v12[0])
  {
    MEMORY[0x1CAA32F9C](v12[0], 0x1000C8000313F17);
  }
  return Splat;
}

void sub_1C5378978()
{
  JUMPOUT(0x1C5378874);
}

void sub_1C5378984(llvm::APFloatBase *a1)
{
  llvm::APFloatBase::x87DoubleExtended(a1);
  JUMPOUT(0x1C5378874);
}

void sub_1C53789B0()
{
  JUMPOUT(0x1C5378874);
}

llvm::APFloatBase *llvm::ConstantFP::getNaN(llvm::ConstantFP *this, llvm::Type *a2, uint64_t a3)
{
  int v4;
  const llvm::APFloat *v5;
  llvm::APFloatBase *Splat;
  uint64_t v7;
  llvm::APFloatBase *v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  if (v4 != 2)
    __asm { BR              X10 }
  sub_1C5378B58((uint64_t)&unk_1C866F184, (char)a2, a3, (uint64_t)v10);
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)v10, v5);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = (llvm::APFloatBase *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat, v7);
  if ((_UNKNOWN *)v11 == &unk_1C866F1C0)
  {
    v9 = Splat;
    sub_1C4773C74(v12);
    return v9;
  }
  if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F && v12[0])
  {
    v9 = Splat;
    MEMORY[0x1CAA32F9C](v12[0], 0x1000C8000313F17);
    return v9;
  }
  return Splat;
}

void sub_1C5378B18()
{
  JUMPOUT(0x1C5378A10);
}

void sub_1C5378B24(llvm::APFloatBase *a1)
{
  llvm::APFloatBase::x87DoubleExtended(a1);
  JUMPOUT(0x1C5378A10);
}

void sub_1C5378B4C()
{
  JUMPOUT(0x1C5378A10);
}

uint64_t sub_1C5378B58@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t result;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;

  v6 = a4;
  if (!a3)
  {
    v7 = (uint64_t *)(a4 + 8);
    if ((_UNKNOWN *)a1 == &unk_1C866F1C0)
    {
      v12 = v6;
      v13 = a2;
      llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)(v6 + 8), (uint64_t)&unk_1C866F1C0);
    }
    else
    {
      *v7 = a1;
      if ((*(_DWORD *)(a1 + 8) + 64) >= 0x80)
      {
        v14 = v6;
        v15 = a2;
        v16 = operator new[]();
        a2 = v15;
        v17 = v16;
        v6 = v14;
        *(_QWORD *)(v14 + 16) = v17;
        a1 = *(_QWORD *)(v14 + 8);
      }
      *(_BYTE *)(v6 + 28) = *(_BYTE *)(v6 + 28) & 0xF0 | 3;
      *(_DWORD *)(v6 + 24) = *(_DWORD *)(a1 + 4) - 1;
      v8 = *(_DWORD *)(a1 + 8);
      if ((v8 - 64) >= 0xFFFFFF80)
      {
        *(_QWORD *)(v6 + 16) = 0;
        return sub_1C4DF8C5C(v6, 0, a2, 0);
      }
      v18 = *(_QWORD **)(v6 + 16);
      *v18 = 0;
      v12 = v6;
      v13 = a2;
      bzero(v18 + 1, 8 * (((v8 + 64) >> 6) - 2) + 8);
    }
    v6 = v12;
    a2 = v13;
    return sub_1C4DF8C5C(v6, 0, a2, 0);
  }
  v20 = 64;
  v19 = a3;
  v21 = 0;
  v10 = a2;
  sub_1C47A8E34((_QWORD *)(a4 + 8), a1);
  result = sub_1C4DF8C5C(a4, 0, v10, (const llvm::APInt *)&v19);
  if (v20 >= 0x41)
  {
    result = v19;
    if (v19)
      return MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  return result;
}

void *llvm::ConstantFP::getQNaN(llvm::ConstantFP *this, llvm::Type *a2, const llvm::APInt *a3, llvm::APInt *a4)
{
  char v5;
  int v7;
  const llvm::APFloat *v8;
  llvm::Constant *v9;
  void *Splat;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14[3];

  v5 = (char)a2;
  v14[2] = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)this + 2);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  if (v7 != 2)
    __asm { BR              X10 }
  llvm::detail::IEEEFloat::IEEEFloat(&v13, (uint64_t)&unk_1C866F184);
  sub_1C4DF8C5C((uint64_t)v12, 0, v5, a3);
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)v12, v8);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)Splat, v9);
  if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v14);
  }
  else if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F && v14[0])
  {
    MEMORY[0x1CAA32F9C](v14[0], 0x1000C8000313F17);
  }
  return Splat;
}

void sub_1C5378E84()
{
  JUMPOUT(0x1C5378D64);
}

void sub_1C5378E90(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  if (llvm::APFloatBase::x87DoubleExtended(a1) == v3)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((uint64_t *)va, (uint64_t)&unk_1C866F1C0);
    JUMPOUT(0x1C5378D78);
  }
  JUMPOUT(0x1C5378D6CLL);
}

void *llvm::ConstantFP::getSNaN(llvm::ConstantFP *this, llvm::Type *a2, const llvm::APInt *a3, llvm::APInt *a4)
{
  char v5;
  int v7;
  const llvm::APFloat *v8;
  llvm::Constant *v9;
  void *Splat;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14[3];

  v5 = (char)a2;
  v14[2] = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)this + 2);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  if (v7 != 2)
    __asm { BR              X10 }
  llvm::detail::IEEEFloat::IEEEFloat(&v13, (uint64_t)&unk_1C866F184);
  sub_1C4DF8C5C((uint64_t)v12, 1, v5, a3);
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)v12, v8);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)Splat, v9);
  if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v14);
  }
  else if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F && v14[0])
  {
    MEMORY[0x1CAA32F9C](v14[0], 0x1000C8000313F17);
  }
  return Splat;
}

void sub_1C5379060()
{
  JUMPOUT(0x1C5378F40);
}

void sub_1C537906C(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  if (llvm::APFloatBase::x87DoubleExtended(a1) == v3)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((uint64_t *)va, (uint64_t)&unk_1C866F1C0);
    JUMPOUT(0x1C5378F54);
  }
  JUMPOUT(0x1C5378F48);
}

llvm::APFloatBase *llvm::ConstantFP::getZero(llvm::ConstantFP *this, llvm::Type *a2)
{
  int v2;
  int v4;
  const llvm::APFloat *v5;
  char v6;
  int v7;
  uint64_t v8;
  llvm::APFloatBase *Splat;
  _QWORD *v11;
  _BYTE v12[8];
  uint64_t v13;
  _QWORD *v14;
  int v15;
  char v16;
  uint64_t v17;

  v2 = (int)a2;
  v17 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  if (v4 != 2)
    __asm { BR              X10 }
  llvm::detail::IEEEFloat::IEEEFloat(&v13, (uint64_t)&unk_1C866F184);
  if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v13, v2);
  }
  else
  {
    if (v2)
      v6 = 11;
    else
      v6 = 3;
    v16 = v16 & 0xF0 | v6;
    v15 = *(_DWORD *)(v13 + 4) - 1;
    v7 = *(_DWORD *)(v13 + 8);
    if ((v7 - 64) < 0xFFFFFF80)
    {
      v11 = v14;
      *v14 = 0;
      bzero(v11 + 1, 8 * (((v7 + 64) >> 6) - 2) + 8);
    }
    else
    {
      v14 = 0;
    }
  }
  Splat = llvm::ConstantFP::get(*(llvm::ConstantFP **)this, (llvm::LLVMContext *)v12, v5);
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    Splat = (llvm::APFloatBase *)llvm::ConstantVector::getSplat(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32), Splat, v8);
  if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v14);
  }
  else if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F && v14)
  {
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  return Splat;
}

void sub_1C537929C()
{
  JUMPOUT(0x1C5379114);
}

void sub_1C53792A8(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  if (llvm::APFloatBase::x87DoubleExtended(a1) == v3)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((uint64_t *)va, (uint64_t)&unk_1C866F1C0);
    JUMPOUT(0x1C5379128);
  }
  JUMPOUT(0x1C537911CLL);
}

llvm::Value **llvm::ConstantFP::getZeroValueForNegation(llvm::ConstantFP *this, llvm::Type *a2)
{
  unsigned int v2;

  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    v2 = *(unsigned __int8 *)(**((_QWORD **)this + 2) + 8);
  else
    v2 = *((_DWORD *)this + 2);
  if (v2 <= 6)
    return (llvm::Value **)llvm::ConstantFP::getZero(this, (llvm::Type *)1);
  else
    return llvm::Constant::getNullValue(this, a2);
}

void sub_1C5379324(llvm::Value **a1, llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 4);
    if ((_UNKNOWN *)v3 == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)v2 + 5);
    }
    else if ((*(_DWORD *)(v3 + 8) - 64) <= 0xFFFFFF7F)
    {
      v17 = *((_QWORD *)v2 + 5);
      if (v17)
        MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
    llvm::Value::~Value(v2, a2);
    v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0)
    {
      v12 = (char *)*((_QWORD *)v2 - 1);
      v11 = (char *)v2 - 8;
      v10 = v12;
      v13 = v4 & 0x7FFFFFF;
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          v15 = &v10[v14];
          if (*(_QWORD *)&v10[v14 - 32])
          {
            **((_QWORD **)v15 - 2) = *((_QWORD *)v15 - 3);
            v16 = *((_QWORD *)v15 - 3);
            if (v16)
              *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 - 2);
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      v6 = v11;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (char *)v2 - 32 * v5;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD **)((char *)v2 - 16);
        v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **v7 = *(v7 - 1);
            v9 = (uint64_t)*(v7 - 1);
            if (v9)
              *(_QWORD *)(v9 + 16) = *v7;
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0)
        v6 = &v6[-*((_QWORD *)v6 - 1) - 8];
    }
    operator delete(v6);
  }
}

uint64_t llvm::ConstantFP::ConstantFP(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  _BOOL4 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 17;
  *(_DWORD *)(result + 20) = v3;
  v4 = *(_QWORD *)(a3 + 8);
  if ((_UNKNOWN *)v4 == &unk_1C866F1C0)
  {
    v19 = result;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(result + 32), (const llvm::detail::DoubleAPFloat *)(a3 + 8));
    return v19;
  }
  else
  {
    *(_QWORD *)(result + 32) = v4;
    if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80)
    {
      v18 = a3;
      v20 = result;
      v17 = operator new[]();
      a3 = v18;
      result = v20;
      *(_QWORD *)(v20 + 40) = v17;
    }
    v5 = *(_BYTE *)(result + 52) & 0xF7 | *(_BYTE *)(a3 + 28) & 8;
    *(_BYTE *)(result + 52) = v5;
    v6 = *(_BYTE *)(a3 + 28);
    v7 = v6 & 7;
    *(_BYTE *)(result + 52) = v5 & 0xF8 | v6 & 7;
    *(_DWORD *)(result + 48) = *(_DWORD *)(a3 + 24);
    v9 = (v6 & 6) != 0 && v7 != 3;
    if (v7 == 1 || v9)
    {
      v10 = *(unsigned int *)(*(_QWORD *)(result + 32) + 8);
      v11 = (_QWORD *)(result + 40);
      if ((v10 - 64) <= 0xFFFFFF7F)
        v11 = (_QWORD *)*v11;
      v14 = *(uint64_t **)(a3 + 16);
      v12 = (uint64_t *)(a3 + 16);
      v13 = v14;
      if ((*(_DWORD *)(*(v12 - 1) + 8) - 64) >= 0xFFFFFF80)
        v13 = v12;
      if (v10 <= 0xFFFFFFBF)
      {
        v15 = (unint64_t)(v10 + 64) >> 6;
        do
        {
          v16 = *v13++;
          *v11++ = v16;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

{
  unsigned int v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  _BOOL4 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(result + 20) & 0xC0000000;
  *(_DWORD *)(result + 16) = 17;
  *(_DWORD *)(result + 20) = v3;
  v4 = *(_QWORD *)(a3 + 8);
  if ((_UNKNOWN *)v4 == &unk_1C866F1C0)
  {
    v19 = result;
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(result + 32), (const llvm::detail::DoubleAPFloat *)(a3 + 8));
    return v19;
  }
  else
  {
    *(_QWORD *)(result + 32) = v4;
    if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80)
    {
      v18 = a3;
      v20 = result;
      v17 = operator new[]();
      a3 = v18;
      result = v20;
      *(_QWORD *)(v20 + 40) = v17;
    }
    v5 = *(_BYTE *)(result + 52) & 0xF7 | *(_BYTE *)(a3 + 28) & 8;
    *(_BYTE *)(result + 52) = v5;
    v6 = *(_BYTE *)(a3 + 28);
    v7 = v6 & 7;
    *(_BYTE *)(result + 52) = v5 & 0xF8 | v6 & 7;
    *(_DWORD *)(result + 48) = *(_DWORD *)(a3 + 24);
    v9 = (v6 & 6) != 0 && v7 != 3;
    if (v7 == 1 || v9)
    {
      v10 = *(unsigned int *)(*(_QWORD *)(result + 32) + 8);
      v11 = (_QWORD *)(result + 40);
      if ((v10 - 64) <= 0xFFFFFF7F)
        v11 = (_QWORD *)*v11;
      v14 = *(uint64_t **)(a3 + 16);
      v12 = (uint64_t *)(a3 + 16);
      v13 = v14;
      if ((*(_DWORD *)(*(v12 - 1) + 8) - 64) >= 0xFFFFFF80)
        v13 = v12;
      if (v10 <= 0xFFFFFFBF)
      {
        v15 = (unint64_t)(v10 + 64) >> 6;
        do
        {
          v16 = *v13++;
          *v11++ = v16;
          --v15;
        }
        while (v15);
      }
    }
  }
  return result;
}

llvm::Value **llvm::ConstantFP::getInfinity(llvm::ConstantFP *this, llvm::Type *a2)
{
  int v2;
  int v4;
  llvm::ConstantFP *v5;
  const llvm::APFloat *v6;
  llvm::Constant *v7;
  llvm::APFloatBase *v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12[3];

  v2 = (int)a2;
  v12[2] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 2);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)this + 2) + 8);
  if (v4 != 2)
    __asm { BR              X10 }
  v5 = *(llvm::ConstantFP **)this;
  llvm::detail::IEEEFloat::IEEEFloat(&v11, (uint64_t)&unk_1C866F184);
  sub_1C47A8F34((uint64_t)v10, v2);
  v8 = llvm::ConstantFP::get(v5, (llvm::LLVMContext *)v10, v6);
  if ((_UNKNOWN *)v11 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v12);
  }
  else if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F && v12[0])
  {
    MEMORY[0x1CAA32F9C](v12[0], 0x1000C8000313F17);
  }
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    return llvm::ConstantVector::getSplat((llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)), (uint64_t)v8, v7);
  return (llvm::Value **)v8;
}

void sub_1C5379718()
{
  JUMPOUT(0x1C53795FCLL);
}

void sub_1C5379724(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  if (llvm::APFloatBase::x87DoubleExtended(a1) == v3)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((uint64_t *)va, (uint64_t)&unk_1C866F1C0);
    JUMPOUT(0x1C5379614);
  }
  JUMPOUT(0x1C5379608);
}

uint64_t llvm::ConstantFP::isExactlyValue(llvm::ConstantFP *this, const llvm::APFloat *a2)
{
  return sub_1C47ECB98((uint64_t)this + 24, (uint64_t)a2);
}

llvm::Value **llvm::ConstantAggregateZero::getSequentialElement(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  return llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)this + 24), a2);
}

llvm::Value **llvm::ConstantAggregateZero::getStructElement(llvm::ConstantAggregateZero *this, llvm::Type *a2)
{
  return llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * a2), a2);
}

llvm::Value **llvm::ConstantAggregateZero::getElementValue(llvm::ConstantAggregateZero *this, llvm::Constant *a2)
{
  uint64_t v2;
  llvm::Constant **v4;
  unsigned int *v5;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 17 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
  {
    v4 = (llvm::Constant **)(v2 + 24);
  }
  else
  {
    v5 = (unsigned int *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u)
      v5 = *(unsigned int **)v5;
    v4 = (llvm::Constant **)(*(_QWORD *)(v2 + 16) + 8 * *v5);
  }
  return llvm::Constant::getNullValue(*v4, a2);
}

llvm::UndefValue *llvm::UndefValue::getSequentialElement(llvm::UndefValue *this, llvm::Type *a2)
{
  return llvm::UndefValue::get(*(llvm::UndefValue **)(*(_QWORD *)this + 24), a2);
}

llvm::UndefValue *llvm::UndefValue::getStructElement(llvm::UndefValue *this, llvm::Type *a2)
{
  return llvm::UndefValue::get(*(llvm::UndefValue **)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * a2), a2);
}

llvm::UndefValue *llvm::UndefValue::getElementValue(llvm::UndefValue *this, llvm::Constant *a2)
{
  uint64_t v2;
  llvm::UndefValue **v4;
  unsigned int *v5;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 17 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
  {
    v4 = (llvm::UndefValue **)(v2 + 24);
  }
  else
  {
    v5 = (unsigned int *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u)
      v5 = *(unsigned int **)v5;
    v4 = (llvm::UndefValue **)(*(_QWORD *)(v2 + 16) + 8 * *v5);
  }
  return llvm::UndefValue::get(*v4, a2);
}

_QWORD *llvm::PoisonValue::getSequentialElement(llvm::PoisonValue *this, llvm::Type *a2)
{
  return llvm::PoisonValue::get(*(llvm::PoisonValue **)(*(_QWORD *)this + 24), a2);
}

_QWORD *llvm::PoisonValue::get(llvm::PoisonValue *this, llvm::Type *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  llvm::PoisonValue *v8;
  _QWORD *result;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  llvm::Value *v14;
  _DWORD *v15;
  uint64_t *v16;
  llvm::PoisonValue *v17;

  v17 = this;
  v2 = **(_QWORD **)this;
  v3 = *(_DWORD *)(v2 + 1400);
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 1384);
    v5 = v3 - 1;
    v6 = v5 & ((this >> 4) ^ (this >> 9));
    v7 = (uint64_t *)(v4 + 16 * v6);
    v8 = (llvm::PoisonValue *)*v7;
    if ((llvm::PoisonValue *)*v7 == this)
      goto LABEL_3;
    v10 = 0;
    v11 = 1;
    while (v8 != (llvm::PoisonValue *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == (llvm::PoisonValue *)-8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = (llvm::PoisonValue *)*v7;
      if ((llvm::PoisonValue *)*v7 == this)
        goto LABEL_3;
    }
    if (v10)
      v16 = v10;
    else
      v16 = v7;
  }
  else
  {
    v16 = 0;
  }
  v7 = sub_1C5385134(v2 + 1384, (uint64_t)&v17, (uint64_t *)&v17, v16);
  *v7 = (uint64_t)v17;
  v7[1] = 0;
LABEL_3:
  result = (_QWORD *)v7[1];
  if (!result)
  {
    result = operator new(0x18uLL);
    *result = v17;
    result[1] = 0;
    result[2] = 12;
    v14 = (llvm::Value *)v7[1];
    v7[1] = (uint64_t)result;
    if (v14)
    {
      llvm::Value::~Value(v14);
      llvm::User::operator delete(v15);
      return (_QWORD *)v7[1];
    }
  }
  return result;
}

_QWORD *llvm::PoisonValue::getStructElement(llvm::PoisonValue *this, llvm::Type *a2)
{
  return llvm::PoisonValue::get(*(llvm::PoisonValue **)(*(_QWORD *)(*(_QWORD *)this + 16) + 8 * a2), a2);
}

_QWORD *llvm::PoisonValue::getElementValue(llvm::PoisonValue *this, llvm::Constant *a2)
{
  uint64_t v2;
  llvm::PoisonValue **v4;
  unsigned int *v5;

  v2 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 17 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
  {
    v4 = (llvm::PoisonValue **)(v2 + 24);
  }
  else
  {
    v5 = (unsigned int *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u)
      v5 = *(unsigned int **)v5;
    v4 = (llvm::PoisonValue **)(*(_QWORD *)(v2 + 16) + 8 * *v5);
  }
  return llvm::PoisonValue::get(*v4, a2);
}

uint64_t llvm::ConstantAggregate::ConstantAggregate(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  sub_1C5382FD4((uint64_t)&v7, a4, &a4[a5], a1 - 32 * (a5 & 0x7FFFFFF));
  return a1;
}

{
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | a5 & 0x7FFFFFF;
  sub_1C5382FD4((uint64_t)&v7, a4, &a4[a5], a1 - 32 * (a5 & 0x7FFFFFF));
  return a1;
}

uint64_t llvm::ConstantArray::ConstantArray(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1C5382FD4((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

{
  int v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1C5382FD4((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

llvm::Value **llvm::ConstantArray::get(llvm::PoisonValue *a1, llvm::Type *a2, uint64_t a3)
{
  llvm::Value **result;

  result = llvm::ConstantArray::getImpl(a1, a2, a3);
  if (!result)
    return (llvm::Value **)sub_1C537A570(**(_QWORD **)a1 + 1240, (uint64_t)a1, (uint64_t *)a2, a3);
  return result;
}

llvm::Value **llvm::ConstantArray::getImpl(llvm::PoisonValue *this, llvm::Type *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  llvm::Type *i;
  uint64_t v11;
  llvm::Type *j;
  uint64_t v13;
  llvm::Type *k;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v22;
  unsigned int v23;
  uint64_t v26;
  llvm::Type *v27;
  llvm::Type **v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::detail::DoubleAPFloat *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::Value **Impl;
  uint64_t v43;
  llvm::Type *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::detail::DoubleAPFloat *v54;
  void *v55;
  unsigned __int16 v56;
  llvm::Type *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  __int16 v63;
  uint64_t v64;
  _BYTE *v65;
  llvm::ConstantAggregateZero *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::detail::DoubleAPFloat *v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  llvm::Type *v75;
  _BYTE *v76;
  llvm::ConstantAggregateZero *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _BYTE *v85;
  uint64_t v86;
  llvm::ConstantAggregateZero *v87;
  llvm::ConstantAggregateZero *v88;
  llvm::Type *v89;
  _BYTE *v90;
  uint64_t v91;
  llvm::ConstantAggregateZero *v92;
  _QWORD *v93;
  _BYTE *v94;
  uint64_t v95;
  llvm::ArrayType *v96;
  _QWORD *v97;
  llvm::ConstantAggregateZero *v98;
  uint64_t **v99;
  unsigned int v100;
  void *v101;
  llvm::Type *v102[2];
  _QWORD v103[16];

  v103[15] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return (llvm::Value **)llvm::ConstantAggregateZero::get(this, a2);
  v6 = *(unsigned __int8 **)a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  if (v7 == 12)
  {
    v8 = 8 * a3;
    for (i = a2; *(unsigned __int8 **)i == v6; i = (llvm::Type *)((char *)i + 8))
    {
      v8 -= 8;
      if (!v8)
        return (llvm::Value **)llvm::PoisonValue::get(this, a2);
    }
  }
  if ((v7 - 11) <= 1)
  {
    v11 = 8 * a3;
    for (j = a2; *(unsigned __int8 **)j == v6; j = (llvm::Type *)((char *)j + 8))
    {
      v11 -= 8;
      if (!v11)
        return (llvm::Value **)llvm::UndefValue::get(this, a2);
    }
  }
  if (llvm::Constant::isNullValue(*(llvm::Constant **)a2))
  {
    v13 = 8 * a3;
    for (k = a2; *(unsigned __int8 **)k == v6; k = (llvm::Type *)((char *)k + 8))
    {
      v13 -= 8;
      if (!v13)
        return (llvm::Value **)llvm::ConstantAggregateZero::get(this, a2);
    }
  }
  v15 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  v16 = v15;
  if (v15 >= 4u)
  {
    if (v15 != 13)
      return 0;
    HIDWORD(v18) = v15 >> 8;
    LODWORD(v18) = (v15 >> 8) - 8;
    v17 = v18 >> 3;
    v19 = v17 > 7;
    v20 = (1 << v17) & 0x8B;
    if (v19 || v20 == 0)
      return 0;
  }
  v22 = v6[16];
  if (v22 == 17)
  {
    if (v15 < 2u)
    {
      v50 = 0;
      v28 = (llvm::Type **)v103;
      v101 = v103;
      *(_OWORD *)v102 = xmmword_1C6612EE0;
      v51 = 8 * a3;
      while (1)
      {
        v52 = *(_QWORD *)((char *)a2 + v50);
        if (!v52 || *(_BYTE *)(v52 + 16) != 17)
          goto LABEL_137;
        v55 = *(void **)(v52 + 32);
        v54 = (llvm::detail::DoubleAPFloat *)(v52 + 32);
        if (v55 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v54, (unsigned int *)&v99);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v54, (unsigned int *)&v99);
        v56 = (unsigned __int16)sub_1C47EE5B8(&v99, 0xFFFFFFFFFFFFFFFFLL);
        v57 = v102[0];
        if ((llvm::Type *)((char *)v102[0] + 1) > v102[1])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v101, v103, (unint64_t)v102[0] + 1, 2);
          v57 = v102[0];
        }
        *((_WORD *)v101 + (_QWORD)v57) = v56;
        ++v102[0];
        if (v100 >= 0x41 && v99)
          MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
        v50 += 8;
        if (v51 == v50)
        {
          v76 = v101;
          v75 = v102[0];
          llvm::ArrayType::get(**(llvm::ArrayType ***)a2, v102[0]);
          v88 = v77;
          v89 = (llvm::Type *)(2 * (_QWORD)v75);
LABEL_138:
          v90 = v76;
LABEL_140:
          Impl = llvm::ConstantDataSequential::getImpl(v90, v89, v88);
          goto LABEL_141;
        }
      }
    }
    if (v15 == 2)
    {
      v67 = 0;
      v28 = &v102[1];
      v101 = &v102[1];
      v102[0] = (llvm::Type *)0x1000000000;
      v68 = 8 * a3;
      while (1)
      {
        v69 = *(_QWORD *)((char *)a2 + v67);
        if (!v69 || *(_BYTE *)(v69 + 16) != 17)
          break;
        v72 = *(void **)(v69 + 32);
        v71 = (llvm::detail::DoubleAPFloat *)(v69 + 32);
        if (v72 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v71, (unsigned int *)&v99);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v71, (unsigned int *)&v99);
        v73 = sub_1C47EE5B8(&v99, 0xFFFFFFFFFFFFFFFFLL);
        v74 = LODWORD(v102[0]);
        if (LODWORD(v102[0]) >= (unint64_t)HIDWORD(v102[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)&v102[1], LODWORD(v102[0]) + 1, 4);
          v74 = LODWORD(v102[0]);
        }
        *((_DWORD *)v101 + v74) = v73;
        ++LODWORD(v102[0]);
        if (v100 >= 0x41 && v99)
          MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
        v67 += 8;
        if (v68 == v67)
        {
          v91 = LODWORD(v102[0]);
          v76 = v101;
          llvm::ArrayType::get(**(llvm::ArrayType ***)a2, (llvm::Type *)LODWORD(v102[0]));
          v88 = v92;
          v89 = (llvm::Type *)(4 * v91);
          goto LABEL_138;
        }
      }
    }
    else
    {
      if (v15 != 3)
        return 0;
      v34 = 0;
      v28 = &v102[1];
      v101 = &v102[1];
      v102[0] = (llvm::Type *)0x1000000000;
      v35 = 8 * a3;
      while (1)
      {
        v36 = *(_QWORD *)((char *)a2 + v34);
        if (!v36 || *(_BYTE *)(v36 + 16) != 17)
          break;
        v39 = *(void **)(v36 + 32);
        v38 = (llvm::detail::DoubleAPFloat *)(v36 + 32);
        if (v39 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v38, (unsigned int *)&v99);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v38, (unsigned int *)&v99);
        v40 = sub_1C47EE5B8(&v99, 0xFFFFFFFFFFFFFFFFLL);
        v41 = LODWORD(v102[0]);
        if (LODWORD(v102[0]) >= (unint64_t)HIDWORD(v102[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)&v102[1], LODWORD(v102[0]) + 1, 8);
          v41 = LODWORD(v102[0]);
        }
        *((_QWORD *)v101 + v41) = v40;
        ++LODWORD(v102[0]);
        if (v100 >= 0x41 && v99)
          MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
        v34 += 8;
        if (v35 == v34)
        {
          v85 = v101;
          v86 = LODWORD(v102[0]);
          llvm::ArrayType::get(**(llvm::ArrayType ***)a2, (llvm::Type *)LODWORD(v102[0]));
          v88 = v87;
          v89 = (llvm::Type *)(8 * v86);
          v90 = v85;
          goto LABEL_140;
        }
      }
    }
LABEL_137:
    Impl = 0;
LABEL_141:
    if (v101 != v28)
      free(v101);
    return Impl;
  }
  if (v22 != 16)
    return 0;
  v23 = v15 >> 8;
  if (v16 == 13 && v23 == 8)
  {
    v43 = 0;
    v44 = 0;
    v28 = (llvm::Type **)v103;
    v101 = v103;
    *(_OWORD *)v102 = xmmword_1C6612EE0;
    v45 = 8 * a3;
    while (1)
    {
      v46 = *(_QWORD *)((char *)a2 + v43);
      if (!v46 || *(_BYTE *)(v46 + 16) != 16)
        goto LABEL_137;
      v48 = (_QWORD *)(v46 + 24);
      if (*(_DWORD *)(v46 + 32) >= 0x41u)
        v48 = (_QWORD *)*v48;
      v49 = *(_BYTE *)v48;
      if ((llvm::Type *)((char *)v44 + 1) > v102[1])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v101, v103, (unint64_t)v44 + 1, 1);
        v44 = v102[0];
      }
      *((_BYTE *)v44 + (_QWORD)v101) = v49;
      v44 = ++v102[0];
      v43 += 8;
      if (v45 == v43)
      {
        v64 = ***(_QWORD ***)a2;
        v65 = v101;
        llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v64 + 1912), v44);
        v88 = v66;
        v90 = v65;
        v89 = v44;
        goto LABEL_140;
      }
    }
  }
  if (v16 == 13 && v23 == 16)
  {
    v58 = 0;
    v27 = 0;
    v28 = (llvm::Type **)v103;
    v101 = v103;
    *(_OWORD *)v102 = xmmword_1C6612EE0;
    v59 = 8 * a3;
    while (1)
    {
      v60 = *(_QWORD *)((char *)a2 + v58);
      if (!v60 || *(_BYTE *)(v60 + 16) != 16)
        goto LABEL_137;
      v62 = (_QWORD *)(v60 + 24);
      if (*(_DWORD *)(v60 + 32) >= 0x41u)
        v62 = (_QWORD *)*v62;
      v63 = *(_WORD *)v62;
      if ((llvm::Type *)((char *)v27 + 1) > v102[1])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v101, v103, (unint64_t)v27 + 1, 2);
        v27 = v102[0];
      }
      *((_WORD *)v101 + (_QWORD)v27) = v63;
      v27 = ++v102[0];
      v58 += 8;
      if (v59 == v58)
      {
        v84 = ***(_QWORD ****)a2;
        v94 = v101;
        v95 = 2 * (_QWORD)v27;
        v96 = (llvm::ArrayType *)(*v84 + 1936);
LABEL_139:
        llvm::ArrayType::get(v96, v27);
        v88 = v98;
        v90 = v94;
        v89 = (llvm::Type *)v95;
        goto LABEL_140;
      }
    }
  }
  if (v16 == 13 && v23 == 32)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    v28 = &v102[1];
    v101 = &v102[1];
    v102[0] = (llvm::Type *)0x1000000000;
    v29 = 8 * a3;
    while (1)
    {
      v30 = *(_QWORD *)((char *)a2 + v26);
      if (!v30 || *(_BYTE *)(v30 + 16) != 16)
        goto LABEL_137;
      v32 = (_QWORD *)(v30 + 24);
      if (*(_DWORD *)(v30 + 32) >= 0x41u)
        v32 = (_QWORD *)*v32;
      v33 = *(_DWORD *)v32;
      if (v27 >= HIDWORD(v102[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)&v102[1], v27 + 1, 4);
        LODWORD(v27) = v102[0];
      }
      *((_DWORD *)v101 + v27) = v33;
      v27 = (llvm::Type *)++LODWORD(v102[0]);
      v26 += 8;
      if (v29 == v26)
      {
        v93 = ***(_QWORD ****)a2;
        v94 = v101;
        v95 = 4 * v27;
        v96 = (llvm::ArrayType *)(*v93 + 1960);
        goto LABEL_139;
      }
    }
  }
  Impl = 0;
  if (v16 == 13 && v23 == 64)
  {
    v78 = 0;
    LODWORD(v27) = 0;
    v28 = &v102[1];
    v101 = &v102[1];
    v102[0] = (llvm::Type *)0x1000000000;
    v79 = 8 * a3;
    while (1)
    {
      v80 = *(_QWORD *)((char *)a2 + v78);
      if (!v80 || *(_BYTE *)(v80 + 16) != 16)
        goto LABEL_137;
      v82 = (_QWORD *)(v80 + 24);
      if (*(_DWORD *)(v80 + 32) >= 0x41u)
        v82 = (_QWORD *)*v82;
      v83 = (_QWORD *)*v82;
      if (v27 >= HIDWORD(v102[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)&v102[1], v27 + 1, 8);
        LODWORD(v27) = v102[0];
      }
      *((_QWORD *)v101 + v27) = v83;
      v27 = (llvm::Type *)++LODWORD(v102[0]);
      v78 += 8;
      if (v79 == v78)
      {
        v97 = ***(_QWORD ****)a2;
        v94 = v101;
        v95 = 8 * v27;
        v96 = (llvm::ArrayType *)(*v97 + 1984);
        goto LABEL_139;
      }
    }
  }
  return Impl;
}

_QWORD *sub_1C537A570(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19[3];

  v4 = a4;
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  v17 = a4;
  v8 = &a3[a4];
  v13 = sub_1C53831BC(a3, (uint64_t)v8);
  v13 = sub_1C5383050((uint64_t *)&v16, &v13);
  v14 = v16;
  v15 = v17;
  v19[0] = 0;
  if (sub_1C5383578((uint64_t *)a1, (uint64_t)&v13, v19)
    && v19[0] != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return (_QWORD *)*v19[0];
  }
  v9 = operator new((32 * v4) | 0x18);
  v10 = &v9[4 * v4];
  *((_DWORD *)v10 + 5) = *((_DWORD *)v10 + 5) & 0x38000000 | v4 & 0x7FFFFFF;
  if (v4)
  {
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = v10;
      v9 += 4;
    }
    while (v9 != v10);
    v11 = *((_DWORD *)v10 + 5) & 0xC0000000;
  }
  else
  {
    v11 = 0;
  }
  *v10 = a2;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = 8;
  *((_DWORD *)v10 + 5) = v11 | v4 & 0x7FFFFFF;
  sub_1C5382FD4((uint64_t)v19, a3, v8, (uint64_t)&v10[-4 * (v4 & 0x7FFFFFF)]);
  v18 = v10;
  sub_1C53836C8(a1, &v18, (uint64_t)&v13, (uint64_t)v19);
  return v10;
}

uint64_t llvm::ConstantDataSequential::isElementTypeCompatible(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  unint64_t v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 4u)
    return 1;
  if (v1 == 13)
  {
    HIDWORD(v4) = v1 >> 8;
    LODWORD(v4) = (v1 >> 8) - 8;
    v3 = v4 >> 3;
    if (v3 <= 7)
      return (0x8Bu >> v3) & 1;
  }
  return 0;
}

uint64_t llvm::ConstantStruct::ConstantStruct(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 9;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1C5382FD4((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

{
  int v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 9;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1C5382FD4((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

llvm::UndefValue *llvm::ConstantStruct::get(llvm::ConstantAggregateZero *this, llvm::Type *a2, uint64_t a3)
{
  int v6;
  int isNullValue;
  char v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  llvm::Constant **v13;
  llvm::Constant *v14;
  llvm::Constant *v15;
  int v16;

  if (!a3)
    return (llvm::UndefValue *)llvm::ConstantAggregateZero::get(this, a2);
  v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  isNullValue = llvm::Constant::isNullValue(*(llvm::Constant **)a2);
  if ((v6 - 11) >= 2 && isNullValue == 0)
    return (llvm::UndefValue *)sub_1C537A8F8(**(_QWORD **)this + 1264, (uint64_t)this, (uint64_t *)a2, a3);
  v9 = isNullValue;
  v10 = (v6 - 11) < 2;
  v11 = v6 == 12;
  v12 = 8 * a3;
  v13 = (llvm::Constant **)a2;
  do
  {
    v15 = *v13++;
    v14 = v15;
    if (!llvm::Constant::isNullValue(v15))
      v9 = 0;
    v16 = *((unsigned __int8 *)v14 + 16);
    if (v16 != 12)
      v11 = 0;
    if (v16 != 11)
      v10 = 0;
    v12 -= 8;
  }
  while (v12);
  if ((v9 & 1) != 0)
    return (llvm::UndefValue *)llvm::ConstantAggregateZero::get(this, a2);
  if (v11)
    return (llvm::UndefValue *)llvm::PoisonValue::get(this, a2);
  if (!v10)
    return (llvm::UndefValue *)sub_1C537A8F8(**(_QWORD **)this + 1264, (uint64_t)this, (uint64_t *)a2, a3);
  return llvm::UndefValue::get(this, a2);
}

_QWORD *sub_1C537A8F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19[3];

  v4 = a4;
  *(_QWORD *)&v16 = a2;
  *((_QWORD *)&v16 + 1) = a3;
  v17 = a4;
  v8 = &a3[a4];
  v13 = sub_1C53831BC(a3, (uint64_t)v8);
  v13 = sub_1C5383050((uint64_t *)&v16, &v13);
  v14 = v16;
  v15 = v17;
  v19[0] = 0;
  if (sub_1C5383AFC((uint64_t *)a1, (uint64_t)&v13, v19)
    && v19[0] != (uint64_t *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16)))
  {
    return (_QWORD *)*v19[0];
  }
  v9 = operator new((32 * v4) | 0x18);
  v10 = &v9[4 * v4];
  *((_DWORD *)v10 + 5) = *((_DWORD *)v10 + 5) & 0x38000000 | v4 & 0x7FFFFFF;
  if (v4)
  {
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = v10;
      v9 += 4;
    }
    while (v9 != v10);
    v11 = *((_DWORD *)v10 + 5) & 0xC0000000;
  }
  else
  {
    v11 = 0;
  }
  *v10 = a2;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = 9;
  *((_DWORD *)v10 + 5) = v11 | v4 & 0x7FFFFFF;
  sub_1C5382FD4((uint64_t)v19, a3, v8, (uint64_t)&v10[-4 * (v4 & 0x7FFFFFF)]);
  v18 = v10;
  sub_1C5383C4C(a1, &v18, (uint64_t)&v13, (uint64_t)v19);
  return v10;
}

uint64_t llvm::ConstantVector::ConstantVector(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 10;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1C5382FD4((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

{
  int v5;
  char v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 20) & 0xC0000000 | a4 & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 10;
  *(_DWORD *)(a1 + 20) = v5;
  sub_1C5382FD4((uint64_t)&v7, a3, &a3[a4], a1 - 32 * (a4 & 0x7FFFFFF));
  return a1;
}

llvm::UndefValue *llvm::ConstantVector::getImpl(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  llvm::ConstantAggregateZero *v4;
  llvm::ConstantAggregateZero *v5;
  llvm::FixedVectorType **v6;
  int isNullValue;
  llvm::Type *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  llvm::FixedVectorType ***v25;
  llvm::FixedVectorType **v26;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  llvm::FixedVectorType ***v31;
  llvm::FixedVectorType **v32;
  llvm::detail::DoubleAPFloat *v34;
  llvm::FixedVectorType *v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::Value **Impl;
  llvm::Type *v39;
  uint64_t v40;
  llvm::FixedVectorType ***v41;
  llvm::FixedVectorType **v42;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  llvm::FixedVectorType ***v47;
  llvm::FixedVectorType **v48;
  llvm::detail::DoubleAPFloat *v50;
  llvm::FixedVectorType *v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  llvm::FixedVectorType ***v55;
  llvm::FixedVectorType **v56;
  _QWORD *v58;
  __int16 v59;
  uint64_t v60;
  llvm::FixedVectorType ***v61;
  llvm::FixedVectorType **v62;
  llvm::detail::DoubleAPFloat *v64;
  llvm::FixedVectorType *v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  llvm::ConstantAggregateZero *v69;
  llvm::ConstantAggregateZero *v70;
  _BYTE *v71;
  llvm::Type *v72;
  uint64_t v73;
  llvm::FixedVectorType ***v74;
  llvm::FixedVectorType **v75;
  _QWORD *v77;
  _QWORD *v78;
  llvm::Type *v79;
  llvm::FixedVectorType *v80;
  llvm::ConstantAggregateZero *v81;
  unint64_t v82;
  llvm::FixedVectorType *v83;
  llvm::FixedVectorType *v84;
  char *v85;
  llvm::ConstantAggregateZero *v86;
  llvm::ConstantAggregateZero *v87;
  uint64_t **v88;
  unsigned int v89;
  void *v90;
  __int128 v91;
  _QWORD v92[16];

  v92[15] = *MEMORY[0x1E0C80C00];
  llvm::FixedVectorType::get(**a1, a2);
  v5 = v4;
  v6 = *a1;
  isNullValue = llvm::Constant::isNullValue((llvm::Constant *)*a1);
  v9 = *((unsigned __int8 *)v6 + 16);
  if ((v9 - 11) < 2)
    v10 = 1;
  else
    v10 = isNullValue;
  if ((_DWORD)a2 == 1 || !v10)
  {
LABEL_9:
    if (isNullValue)
      return (llvm::UndefValue *)llvm::ConstantAggregateZero::get(v5, v8);
    if (v9 == 12)
      return (llvm::UndefValue *)llvm::PoisonValue::get(v5, v8);
    if ((v9 - 11) <= 1)
      return llvm::UndefValue::get(v5, v8);
  }
  else
  {
    v11 = 1;
    while (a1[v11] == v6)
    {
      if ((_DWORD)a2 == ++v11)
        goto LABEL_9;
    }
  }
  v13 = *((_DWORD *)*v6 + 2);
  if (v13 < 4u
    || v13 == 13
    && ((HIDWORD(v15) = v13 >> 8,
         LODWORD(v15) = (v13 >> 8) - 8,
         v14 = v15 >> 3,
         v16 = v14 > 7,
         v17 = (1 << v14) & 0x8B,
         !v16)
      ? (v18 = v17 == 0)
      : (v18 = 1),
        !v18))
  {
    if (v9 == 17)
    {
      if (v13 < 2u)
      {
        v22 = (char *)v92;
        v90 = v92;
        v91 = xmmword_1C6612EE0;
        if (a2)
        {
          v46 = 8 * (_QWORD)a2;
          v47 = a1;
          while (1)
          {
            v48 = *v47;
            if (!*v47 || *((_BYTE *)*v47 + 16) != 17)
              goto LABEL_145;
            v51 = v48[4];
            v50 = (llvm::detail::DoubleAPFloat *)(v48 + 4);
            if (v51 == (llvm::FixedVectorType *)&unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v50, (unsigned int *)&v88);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v50, (unsigned int *)&v88);
            v52 = (unsigned __int16)sub_1C47EE5B8(&v88, 0xFFFFFFFFFFFFFFFFLL);
            v53 = v91;
            if ((unint64_t)(v91 + 1) > *((_QWORD *)&v91 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v90, v92, v91 + 1, 2);
              v53 = v91;
            }
            *((_WORD *)v90 + v53) = v52;
            *(_QWORD *)&v91 = v91 + 1;
            if (v89 >= 0x41 && v88)
              MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
            ++v47;
            v46 -= 8;
            if (!v46)
            {
              v85 = (char *)v90;
              v79 = (llvm::Type *)v91;
              goto LABEL_146;
            }
          }
        }
        v79 = 0;
        v85 = (char *)v92;
LABEL_146:
        v80 = **a1;
        goto LABEL_149;
      }
      if (v13 == 2)
      {
        v22 = (char *)&v91 + 8;
        v90 = (char *)&v91 + 8;
        *(_QWORD *)&v91 = 0x1000000000;
        if (a2)
        {
          v60 = 8 * (_QWORD)a2;
          v61 = a1;
          while (1)
          {
            v62 = *v61;
            if (!*v61 || *((_BYTE *)*v61 + 16) != 17)
              goto LABEL_145;
            v65 = v62[4];
            v64 = (llvm::detail::DoubleAPFloat *)(v62 + 4);
            if (v65 == (llvm::FixedVectorType *)&unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v64, (unsigned int *)&v88);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v64, (unsigned int *)&v88);
            v66 = sub_1C47EE5B8(&v88, 0xFFFFFFFFFFFFFFFFLL);
            v67 = v91;
            if (v91 >= (unint64_t)DWORD1(v91))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)&v91 + 8, v91 + 1, 4);
              v67 = v91;
            }
            *((_DWORD *)v90 + v67) = v66;
            LODWORD(v91) = v91 + 1;
            if (v89 >= 0x41 && v88)
              MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
            ++v61;
            v60 -= 8;
            if (!v60)
            {
              v85 = (char *)v90;
              v23 = v91;
              goto LABEL_153;
            }
          }
        }
        v23 = 0;
        v85 = (char *)&v91 + 8;
LABEL_153:
        v84 = **a1;
LABEL_156:
        llvm::FixedVectorType::get(v84, (llvm::Type *)v23);
        v70 = v86;
        v72 = (llvm::Type *)(4 * v23);
        goto LABEL_160;
      }
      if (v13 == 3)
      {
        v22 = (char *)&v91 + 8;
        v90 = (char *)&v91 + 8;
        *(_QWORD *)&v91 = 0x1000000000;
        if (a2)
        {
          v30 = 8 * (_QWORD)a2;
          v31 = a1;
          while (1)
          {
            v32 = *v31;
            if (!*v31 || *((_BYTE *)*v31 + 16) != 17)
              goto LABEL_145;
            v35 = v32[4];
            v34 = (llvm::detail::DoubleAPFloat *)(v32 + 4);
            if (v35 == (llvm::FixedVectorType *)&unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt(v34, (unsigned int *)&v88);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v34, (unsigned int *)&v88);
            v36 = sub_1C47EE5B8(&v88, 0xFFFFFFFFFFFFFFFFLL);
            v37 = v91;
            if (v91 >= (unint64_t)DWORD1(v91))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)&v91 + 8, v91 + 1, 8);
              v37 = v91;
            }
            *((_QWORD *)v90 + v37) = v36;
            LODWORD(v91) = v91 + 1;
            if (v89 >= 0x41 && v88)
              MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
            ++v31;
            v30 -= 8;
            if (!v30)
            {
              v85 = (char *)v90;
              v82 = v91;
              goto LABEL_152;
            }
          }
        }
        v82 = 0;
        v85 = (char *)&v91 + 8;
LABEL_152:
        v83 = **a1;
        goto LABEL_159;
      }
    }
    else if (v9 == 16)
    {
      v19 = v13 >> 8;
      if (v13 == 13 && v19 == 8)
      {
        v22 = (char *)v92;
        v90 = v92;
        v91 = xmmword_1C6612EE0;
        v39 = 0;
        if (a2)
        {
          v40 = 8 * (_QWORD)a2;
          v41 = a1;
          while (1)
          {
            v42 = *v41;
            if (!*v41 || *((_BYTE *)*v41 + 16) != 16)
              goto LABEL_145;
            v44 = v42 + 3;
            if (*((_DWORD *)v42 + 8) >= 0x41u)
              v44 = (_QWORD *)*v44;
            v45 = *(_BYTE *)v44;
            if ((unint64_t)v39 + 1 > *((_QWORD *)&v91 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v90, v92, (unint64_t)v39 + 1, 1);
              v39 = (llvm::Type *)v91;
            }
            *((_BYTE *)v39 + (_QWORD)v90) = v45;
            v39 = (llvm::Type *)(v91 + 1);
            *(_QWORD *)&v91 = v91 + 1;
            ++v41;
            v40 -= 8;
            if (!v40)
            {
              v68 = v90;
              goto LABEL_128;
            }
          }
        }
        v68 = v92;
LABEL_128:
        llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)**a1 + 1912), v39);
        v70 = v69;
        v71 = v68;
        v72 = v39;
LABEL_161:
        Impl = llvm::ConstantDataSequential::getImpl(v71, v72, v70);
LABEL_162:
        if (v90 != v22)
          free(v90);
        return (llvm::UndefValue *)Impl;
      }
      if (v13 != 13 || v19 != 16)
      {
        if (v13 == 13 && v19 == 32)
        {
          v22 = (char *)&v91 + 8;
          v90 = (char *)&v91 + 8;
          *(_QWORD *)&v91 = 0x1000000000;
          v23 = 0;
          if (a2)
          {
            v24 = 8 * (_QWORD)a2;
            v25 = a1;
            while (1)
            {
              v26 = *v25;
              if (!*v25 || *((_BYTE *)*v25 + 16) != 16)
                break;
              v28 = v26 + 3;
              if (*((_DWORD *)v26 + 8) >= 0x41u)
                v28 = (_QWORD *)*v28;
              v29 = *(_DWORD *)v28;
              if (v23 >= DWORD1(v91))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)&v91 + 8, v23 + 1, 4);
                LODWORD(v23) = v91;
              }
              *((_DWORD *)v90 + v23) = v29;
              v23 = (v91 + 1);
              LODWORD(v91) = v91 + 1;
              ++v25;
              v24 -= 8;
              if (!v24)
              {
                v85 = (char *)v90;
                goto LABEL_155;
              }
            }
LABEL_145:
            Impl = 0;
            goto LABEL_162;
          }
          v85 = (char *)&v91 + 8;
LABEL_155:
          v84 = (llvm::FixedVectorType *)(**(_QWORD **)**a1 + 1960);
          goto LABEL_156;
        }
        Impl = 0;
        if (v13 != 13 || v19 != 64)
          return (llvm::UndefValue *)Impl;
        v22 = (char *)&v91 + 8;
        v90 = (char *)&v91 + 8;
        *(_QWORD *)&v91 = 0x1000000000;
        v82 = 0;
        if (a2)
        {
          v73 = 8 * (_QWORD)a2;
          v74 = a1;
          while (1)
          {
            v75 = *v74;
            if (!*v74 || *((_BYTE *)*v74 + 16) != 16)
              goto LABEL_145;
            v77 = v75 + 3;
            if (*((_DWORD *)v75 + 8) >= 0x41u)
              v77 = (_QWORD *)*v77;
            v78 = (_QWORD *)*v77;
            if (v82 >= DWORD1(v91))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)&v91 + 8, v82 + 1, 8);
              LODWORD(v82) = v91;
            }
            *((_QWORD *)v90 + v82) = v78;
            v82 = (v91 + 1);
            LODWORD(v91) = v91 + 1;
            ++v74;
            v73 -= 8;
            if (!v73)
            {
              v85 = (char *)v90;
              goto LABEL_158;
            }
          }
        }
        v85 = (char *)&v91 + 8;
LABEL_158:
        v83 = (llvm::FixedVectorType *)(**(_QWORD **)**a1 + 1984);
LABEL_159:
        llvm::FixedVectorType::get(v83, (llvm::Type *)v82);
        v70 = v87;
        v72 = (llvm::Type *)(8 * v82);
        goto LABEL_160;
      }
      v22 = (char *)v92;
      v90 = v92;
      v91 = xmmword_1C6612EE0;
      v79 = 0;
      if (a2)
      {
        v54 = 8 * (_QWORD)a2;
        v55 = a1;
        while (1)
        {
          v56 = *v55;
          if (!*v55 || *((_BYTE *)*v55 + 16) != 16)
            goto LABEL_145;
          v58 = v56 + 3;
          if (*((_DWORD *)v56 + 8) >= 0x41u)
            v58 = (_QWORD *)*v58;
          v59 = *(_WORD *)v58;
          if ((unint64_t)v79 + 1 > *((_QWORD *)&v91 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v90, v92, (unint64_t)v79 + 1, 2);
            v79 = (llvm::Type *)v91;
          }
          *((_WORD *)v90 + (_QWORD)v79) = v59;
          v79 = (llvm::Type *)(v91 + 1);
          *(_QWORD *)&v91 = v91 + 1;
          ++v55;
          v54 -= 8;
          if (!v54)
          {
            v85 = (char *)v90;
            goto LABEL_148;
          }
        }
      }
      v85 = (char *)v92;
LABEL_148:
      v80 = (llvm::FixedVectorType *)(**(_QWORD **)**a1 + 1936);
LABEL_149:
      llvm::FixedVectorType::get(v80, v79);
      v70 = v81;
      v72 = (llvm::Type *)(2 * (_QWORD)v79);
LABEL_160:
      v71 = v85;
      goto LABEL_161;
    }
  }
  return 0;
}

uint64_t sub_1C537B3A4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int i;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  unint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  __int128 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = &a3[a4];
  v9 = sub_1C53831BC(a3, (uint64_t)v8);
  DWORD2(v28) = 0;
  *(_QWORD *)&v28 = 0;
  v10 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v25 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v25 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v25;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  *(_QWORD *)((char *)&v28 + 4) = __PAIR64__(v9, HIDWORD(a2));
  v11 = 0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ a2 ^ __ROR8__(__PAIR64__(v9, HIDWORD(a2)) + 12, 12));
  v12 = __ROR8__(__PAIR64__(v9, HIDWORD(a2)) + 12, 12) ^ (v11 >> 47);
  v13 = (-348639895 * ((((0x9DDFEA08EB382D69 * (v12 ^ v11)) >> 32) >> 15) ^ (-348639895 * (v12 ^ v11)))) ^ HIDWORD(a2);
  LODWORD(v28) = v13;
  *((_QWORD *)&v28 + 1) = a2;
  v29 = a3;
  v30 = a4;
  v14 = *(_DWORD *)(a1 + 16);
  if (!v14)
  {
    v15 = a4;
    goto LABEL_17;
  }
  v15 = a4;
  for (i = 1; ; ++i)
  {
    v17 = v13 & (v14 - 1);
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v17);
    if (v18 != -8192)
    {
      if (v18 == -4096)
        goto LABEL_17;
      if (*(_QWORD *)v18 == a2 && a4 == (*(_DWORD *)(v18 + 20) & 0x7FFFFFF))
        break;
    }
LABEL_13:
    v13 = v17 + i;
  }
  if ((_DWORD)a4)
  {
    v19 = (_QWORD *)(v18 - 32 * a4);
    v20 = a4;
    v21 = a3;
    while (*v21 == *v19)
    {
      v19 += 4;
      ++v21;
      if (!--v20)
        goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_14:
  if (v17 == v14)
  {
LABEL_17:
    v22 = operator new((32 * v15) | 0x18);
    v18 = (uint64_t)&v22[4 * v15];
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0x38000000 | a4 & 0x7FFFFFF;
    if ((_DWORD)a4)
    {
      do
      {
        *v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = v18;
        v22 += 4;
      }
      while (v22 != (_QWORD *)v18);
      v23 = *(_DWORD *)(v18 + 20) & 0xC0000000;
    }
    else
    {
      v23 = 0;
    }
    *(_QWORD *)v18 = a2;
    *(_QWORD *)(v18 + 8) = 0;
    *(_DWORD *)(v18 + 16) = 10;
    *(_DWORD *)(v18 + 20) = v23 | a4 & 0x7FFFFFF;
    sub_1C5382FD4((uint64_t)v27, a3, v8, v18 - 32 * (a4 & 0x7FFFFFF));
    v26 = v18;
    sub_1C5384228(a1, &v26, (uint64_t)&v28, (uint64_t)v27);
  }
  return v18;
}

llvm::Value **llvm::ConstantDataVector::getSplat(llvm::ConstantDataVector *this, uint64_t **a2, llvm::Constant *a3)
{
  int v4;
  int v5;
  int v6;
  uint64_t *v8;
  int v10;
  llvm::Type **v11;
  _QWORD *v12;
  _BYTE *v13;
  llvm::Type *v14;
  llvm::FixedVectorType *v15;
  unint64_t v16;
  llvm::detail::DoubleAPFloat *v17;
  __int16 v18;
  llvm::FixedVectorType *v19;
  llvm::Type *v20;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  llvm::Type *v26;
  llvm::ConstantAggregateZero *v27;
  llvm::ConstantAggregateZero *v28;
  _BYTE *v29;
  llvm::Type *v30;
  __int16 v31;
  _QWORD *v32;
  llvm::ConstantAggregateZero *v33;
  uint64_t v34;
  _QWORD *v35;
  llvm::Type *v36;
  llvm::FixedVectorType *v37;
  unint64_t v38;
  llvm::detail::DoubleAPFloat *v39;
  int v40;
  llvm::ConstantAggregateZero *v41;
  unint64_t v42;
  llvm::detail::DoubleAPFloat *v43;
  uint64_t *v44;
  llvm::ConstantAggregateZero *v45;
  llvm::Value **Impl;
  uint64_t **v47;
  unsigned int v48;
  void *v49;
  llvm::Type *v50[2];
  _QWORD v51[16];

  v51[15] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = *((_DWORD *)*a2 + 2);
    v6 = *((_DWORD *)*a2 + 2) >> 8;
    if (v5 == 13 && v6 == 8)
    {
      v22 = (unsigned __int8 *)(a2 + 3);
      if (*((_DWORD *)a2 + 8) >= 0x41u)
        v22 = *(unsigned __int8 **)v22;
      v23 = *v22;
      v11 = (llvm::Type **)v51;
      v49 = v51;
      *(_OWORD *)v50 = xmmword_1C6612EE0;
      sub_1C538606C((size_t *)&v49, this, v23);
      v24 = **a2;
      v25 = v49;
      v26 = v50[0];
      llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v24 + 1912), v50[0]);
      v28 = v27;
      v29 = v25;
      v30 = v26;
    }
    else
    {
      v8 = (uint64_t *)(a2 + 3);
      if (v5 == 13 && v6 == 16)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u)
          v8 = (uint64_t *)*v8;
        v31 = *(_WORD *)v8;
        v11 = (llvm::Type **)v51;
        v49 = v51;
        *(_OWORD *)v50 = xmmword_1C6612EE0;
        sub_1C4C080F8(&v49, this, v31);
        v32 = (_QWORD *)**a2;
        v13 = v49;
        v20 = v50[0];
        v19 = (llvm::FixedVectorType *)(*v32 + 1936);
LABEL_32:
        llvm::FixedVectorType::get(v19, v20);
        v28 = v33;
        v30 = (llvm::Type *)(2 * (_QWORD)v20);
      }
      else if (v5 == 13 && v6 == 32)
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u)
          v8 = (uint64_t *)*v8;
        v10 = *(_DWORD *)v8;
        v11 = &v50[1];
        v49 = &v50[1];
        v50[0] = (llvm::Type *)0x1000000000;
        sub_1C4893E04((char *)&v49, this, v10);
        v12 = (_QWORD *)**a2;
        v13 = v49;
        v14 = (llvm::Type *)LODWORD(v50[0]);
        v15 = (llvm::FixedVectorType *)(*v12 + 1960);
LABEL_42:
        llvm::FixedVectorType::get(v15, v14);
        v28 = v41;
        v30 = (llvm::Type *)(4 * (_QWORD)v14);
      }
      else
      {
        if (*((_DWORD *)a2 + 8) >= 0x41u)
          v8 = (uint64_t *)*v8;
        v34 = *v8;
        v11 = &v50[1];
        v49 = &v50[1];
        v50[0] = (llvm::Type *)0x1000000000;
        sub_1C4765AA4((char *)&v49, this, v34);
        v35 = (_QWORD *)**a2;
        v13 = v49;
        v36 = (llvm::Type *)LODWORD(v50[0]);
        v37 = (llvm::FixedVectorType *)(*v35 + 1984);
LABEL_49:
        llvm::FixedVectorType::get(v37, v36);
        v28 = v45;
        v30 = (llvm::Type *)(8 * (_QWORD)v36);
      }
      v29 = v13;
    }
    Impl = llvm::ConstantDataSequential::getImpl(v29, v30, v28);
    if (v49 != v11)
      free(v49);
    return Impl;
  }
  else
  {
    if (a2 && v4 == 17)
    {
      switch(*((_BYTE *)*a2 + 8))
      {
        case 0:
        case 1:
          v16 = this;
          v17 = (llvm::detail::DoubleAPFloat *)(a2 + 4);
          if (a2[4] == (uint64_t *)&unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v17, (unsigned int *)&v47);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v17, (unsigned int *)&v47);
          v18 = (unsigned __int16)sub_1C47EE5B8(&v47, 0xFFFFFFFFFFFFFFFFLL);
          v11 = (llvm::Type **)v51;
          v49 = v51;
          *(_OWORD *)v50 = xmmword_1C6612EE0;
          sub_1C4C080F8(&v49, v16, v18);
          if (v48 >= 0x41 && v47)
            MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
          v19 = (llvm::FixedVectorType *)*a2;
          v13 = v49;
          v20 = v50[0];
          goto LABEL_32;
        case 2:
          v38 = this;
          v39 = (llvm::detail::DoubleAPFloat *)(a2 + 4);
          if (a2[4] == (uint64_t *)&unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v39, (unsigned int *)&v47);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v39, (unsigned int *)&v47);
          v40 = sub_1C47EE5B8(&v47, 0xFFFFFFFFFFFFFFFFLL);
          v11 = &v50[1];
          v49 = &v50[1];
          v50[0] = (llvm::Type *)0x1000000000;
          sub_1C4893E04((char *)&v49, v38, v40);
          if (v48 >= 0x41 && v47)
            MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
          v15 = (llvm::FixedVectorType *)*a2;
          v13 = v49;
          v14 = (llvm::Type *)LODWORD(v50[0]);
          goto LABEL_42;
        case 3:
          v42 = this;
          v43 = (llvm::detail::DoubleAPFloat *)(a2 + 4);
          if (a2[4] == (uint64_t *)&unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v43, (unsigned int *)&v47);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v43, (unsigned int *)&v47);
          v44 = sub_1C47EE5B8(&v47, 0xFFFFFFFFFFFFFFFFLL);
          v11 = &v50[1];
          v49 = &v50[1];
          v50[0] = (llvm::Type *)0x1000000000;
          sub_1C4765AA4((char *)&v49, v42, (uint64_t)v44);
          if (v48 >= 0x41 && v47)
            MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
          v37 = (llvm::FixedVectorType *)*a2;
          v13 = v49;
          v36 = (llvm::Type *)LODWORD(v50[0]);
          goto LABEL_49;
        default:
          return (llvm::Value **)llvm::ConstantVector::getSplat(this, a2, a3);
      }
    }
    return (llvm::Value **)llvm::ConstantVector::getSplat(this, a2, a3);
  }
}

llvm *llvm::ConstantExpr::getInsertElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  llvm *result;
  _QWORD **v10;
  uint64_t v11;
  _WORD v12[4];
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldInsertElementInstruction(this, a2, a3, a4);
  if (!result)
  {
    v10 = *(_QWORD ***)this;
    if (*(llvm::Constant **)this == a4)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      v18[2] = a3;
      v11 = **v10 + 1512;
      v12[0] = 62;
      v12[1] = 0;
      v13 = v18;
      v14 = 3;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      return (llvm *)sub_1C537D4FC(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
  }
  return result;
}

llvm::UndefValue *llvm::ConstantExpr::getShuffleVector(llvm *a1, llvm *a2, int *a3, _BOOL8 a4, _QWORD **a5)
{
  llvm::UndefValue *result;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  _WORD v14[4];
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _BOOL8 v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldShuffleVectorInstruction(a1, a2, a3, a4);
  if (!result)
  {
    llvm::VectorType::get(*(llvm::FixedVectorType **)(*(_QWORD *)a1 + 24), (llvm::Type *)(a4 | ((unint64_t)(*(_BYTE *)(*(_QWORD *)a1 + 8) == 19) << 32)));
    if (v11 == a5)
    {
      return 0;
    }
    else
    {
      v12 = (uint64_t)v11;
      v22[0] = a1;
      v22[1] = a2;
      v13 = **v11 + 1512;
      v14[0] = 63;
      v14[1] = 0;
      v15 = v22;
      v16 = 2;
      v17 = 0;
      v18 = 0;
      v19 = a3;
      v20 = a4;
      v21 = 0;
      return (llvm::UndefValue *)sub_1C537D4FC(v13, v12, (unsigned __int8 *)v14);
    }
  }
  return result;
}

BOOL llvm::ConstantExpr::isCast(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 9) - 38 < 0xD;
}

BOOL llvm::ConstantExpr::isCompare(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 9) - 53 < 2;
}

BOOL llvm::ConstantExpr::hasIndices(llvm::ConstantExpr *this)
{
  return (*((_WORD *)this + 9) & 0xFFFE) == 64;
}

uint64_t llvm::ConstantExpr::getIndices(llvm::ConstantExpr *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::ConstantExpr::getPredicate(llvm::ConstantExpr *this)
{
  return *((unsigned __int16 *)this + 12);
}

uint64_t llvm::ConstantExpr::getWithOperands(uint64_t result, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5, llvm::GetElementPtrInst *a6)
{
  uint64_t **v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  llvm::ConstantExpr *v12;
  unsigned __int8 *v13;
  llvm::Constant *v14;
  unsigned __int8 *v15;
  llvm::Constant *v16;
  _QWORD **v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  llvm::Value *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  llvm::Constant *v26;
  unsigned int v27;
  _WORD v28[4];
  unsigned __int8 **v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  llvm::Constant *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(llvm::Constant **)result == a4)
  {
    if (!a3)
      return result;
    v9 = -32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
    v10 = 8 * (_QWORD)a3;
    v11 = (_QWORD *)a2;
    while (*v11 == *(_QWORD *)(result + v9))
    {
      ++v11;
      v9 += 32;
      v10 -= 8;
      if (!v10)
        return result;
    }
  }
  if ((_DWORD)a5)
    v7 = (uint64_t **)a4;
  else
    v7 = 0;
  v8 = *(_WORD *)(result + 18);
  switch(v8)
  {
    case 12:
      result = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, *(unsigned __int8 **)a2, 0, 0, a5);
      break;
    case 34:
      if (!a6)
      {
        v20 = 24;
        if (*(_BYTE *)(result + 16) == 62)
          v20 = 64;
        a6 = *(llvm::GetElementPtrInst **)(result + v20);
      }
      v22 = (llvm::Value *)(a2 + 8);
      v21 = *(unsigned __int8 **)a2;
      v23 = *(unsigned __int8 *)(result + 17);
      v24 = ((v23 >> 2) + 0xFFFFFFFF) | 0x100000000;
      if (v23 <= 3)
        v24 = 0;
      result = llvm::ConstantExpr::getGetElementPtr(a6, (uint64_t *)v21, v22, (uint64_t)a3 - 1, (v23 & 2) != 0, v24, v7);
      break;
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      result = llvm::ConstantExpr::getCast(*(unsigned __int16 *)(result + 18));
      break;
    case 53:
    case 54:
      v12 = (llvm::ConstantExpr *)*(unsigned __int16 *)(result + 24);
      v13 = *(unsigned __int8 **)a2;
      v14 = *(llvm::Constant **)(a2 + 8);
      if (v12 > 0xF)
        result = (uint64_t)llvm::ConstantExpr::getICmp(v12, v13, v14, (llvm::Constant *)(v7 != 0));
      else
        result = llvm::ConstantExpr::getFCmp(v12, (uint64_t ***)v13, v14, (llvm::Constant *)(v7 != 0));
      break;
    case 57:
      result = (uint64_t)llvm::ConstantExpr::getSelect(*(llvm::ConstantExpr **)a2, *(llvm::PoisonValue ***)(a2 + 8), *(llvm::PoisonValue ***)(a2 + 16), (llvm::Constant *)v7, a5);
      break;
    case 61:
      v15 = *(unsigned __int8 **)a2;
      v16 = *(llvm::Constant **)(a2 + 8);
      result = llvm::ConstantFoldExtractElementInstruction(*(llvm **)a2, v16, a3);
      if (!result)
      {
        v17 = *(_QWORD ***)v15;
        v18 = *(uint64_t ***)(*(_QWORD *)v15 + 24);
        if (v18 == v7)
          goto LABEL_36;
        v34 = v15;
        v35 = v16;
        v19 = **v17 + 1512;
        v28[0] = 61;
        goto LABEL_35;
      }
      break;
    case 62:
      result = llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)a2, *(llvm::Constant **)(a2 + 8), *(llvm::Constant **)(a2 + 16), (llvm::Constant *)v7, a5);
      break;
    case 63:
      result = (uint64_t)llvm::ConstantExpr::getShuffleVector(*(llvm **)a2, *(llvm **)(a2 + 8), *(int **)(result + 24), *(unsigned int *)(result + 32), v7);
      break;
    case 64:
      result = (uint64_t)llvm::ConstantExpr::getExtractValue(*(llvm::UndefValue **)a2, *(unsigned int **)(result + 24), *(unsigned int *)(result + 32), (uint64_t)v7);
      break;
    case 65:
      result = (uint64_t)llvm::ConstantExpr::getInsertValue(*(llvm::Constant **)a2, *(uint64_t **)(a2 + 8), *(_DWORD **)(result + 24), *(unsigned int *)(result + 32), (uint64_t)v7);
      break;
    default:
      v25 = *(unsigned __int8 **)a2;
      v26 = *(llvm::Constant **)(a2 + 8);
      v27 = *(unsigned __int8 *)(result + 17);
      result = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)*(unsigned __int16 *)(result + 18), *(llvm::Constant **)a2, v26, a4);
      if (!result)
      {
        v18 = *(uint64_t ***)v25;
        if (*(uint64_t ***)v25 == v7)
        {
LABEL_36:
          result = 0;
        }
        else
        {
          v34 = v25;
          v35 = v26;
          v19 = **v18 + 1512;
          LOBYTE(v28[0]) = v8;
          HIBYTE(v28[0]) = v27 >> 1;
LABEL_35:
          v28[1] = 0;
          v29 = &v34;
          v30 = 2;
          v31 = 0u;
          v32 = 0u;
          v33 = 0;
          result = sub_1C537D4FC(v19, (uint64_t)v18, (unsigned __int8 *)v28);
        }
      }
      break;
  }
  return result;
}

uint64_t llvm::ConstantExpr::getCast(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C537C120 + 4 * byte_1C85FD1CD[a1 - 38]))();
}

uint64_t sub_1C537C120(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  if (*a2 == a3)
    return (uint64_t)a2;
  else
    return sub_1C537D3B8(49);
}

uint64_t sub_1C537C164(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant ***a3, llvm::Type *a4)
{
  return llvm::ConstantExpr::getAddrSpaceCast(a2, a3, a4);
}

llvm::UndefValue *sub_1C537C174(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  return sub_1C537D3B8((llvm *)0x2D, a2, a3, a4);
}

llvm::UndefValue *sub_1C537C17C(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  return sub_1C537D3B8((llvm *)0x2E, a2, a3, a4);
}

llvm::UndefValue *sub_1C537C184(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  return sub_1C537D3B8((llvm *)0x2B, a2, a3, a4);
}

llvm::UndefValue *sub_1C537C18C(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  return sub_1C537D3B8((llvm *)0x2C, a2, a3, a4);
}

llvm::UndefValue *sub_1C537C194(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  return sub_1C537D3B8((llvm *)0x29, a2, a3, a4);
}

llvm::UndefValue *sub_1C537C19C(uint64_t a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  return sub_1C537D3B8((llvm *)0x2A, a2, a3, a4);
}

llvm::Constant *llvm::ConstantExpr::getSelect(llvm::ConstantExpr *this, llvm::PoisonValue **a2, llvm::PoisonValue **a3, llvm::Constant *a4, llvm::Type *a5)
{
  llvm::Constant *result;
  llvm::PoisonValue *v10;
  uint64_t v11;
  _WORD v12[4];
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldSelectInstruction(this, a2, a3, a4);
  if (!result)
  {
    v10 = *a2;
    if (*a2 == a4)
    {
      return 0;
    }
    else
    {
      v18[0] = this;
      v18[1] = a2;
      v18[2] = a3;
      v11 = ***(_QWORD ***)this + 1512;
      v12[0] = 57;
      v12[1] = 0;
      v13 = v18;
      v14 = 3;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      return (llvm::Constant *)sub_1C537D4FC(v11, (uint64_t)v10, (unsigned __int8 *)v12);
    }
  }
  return result;
}

llvm::UndefValue *llvm::ConstantExpr::getExtractElement(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Type *a4)
{
  llvm::UndefValue *result;
  _QWORD **v8;
  llvm::Constant *v9;
  uint64_t v10;
  _WORD v11[4];
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldExtractElementInstruction(this, a2, a3);
  if (!result)
  {
    v8 = *(_QWORD ***)this;
    v9 = *(llvm::Constant **)(*(_QWORD *)this + 24);
    if (v9 == a3)
    {
      return 0;
    }
    else
    {
      v17[0] = this;
      v17[1] = a2;
      v10 = **v8 + 1512;
      v11[0] = 61;
      v11[1] = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::UndefValue *)sub_1C537D4FC(v10, (uint64_t)v9, (unsigned __int8 *)v11);
    }
  }
  return result;
}

void *llvm::ConstantExpr::getInsertValue(llvm::Constant *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *result;
  uint64_t v12;
  _WORD v13[4];
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  result = llvm::ConstantFoldInsertValueInstruction(a1, a2, a3, a4);
  if (!result)
  {
    if (v10 == a5)
    {
      return 0;
    }
    else
    {
      v21[0] = a1;
      v21[1] = a2;
      v12 = ***(_QWORD ***)a1 + 1512;
      v13[0] = 65;
      v13[1] = 0;
      v14 = v21;
      v15 = 2;
      v16 = a3;
      v17 = a4;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      return (void *)sub_1C537D4FC(v12, v10, (unsigned __int8 *)v13);
    }
  }
  return result;
}

llvm::UndefValue *llvm::ConstantExpr::getExtractValue(llvm::UndefValue *this, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  llvm::UndefValue *v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _WORD v17[4];
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v4 = this;
  v25[1] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return this;
  v8 = *(_QWORD *)this;
  v9 = 4 * a3;
  v10 = a2;
  while (1)
  {
    v11 = *v10;
    v12 = *(unsigned __int8 *)(v8 + 8);
    if (!v8 || v12 != 17)
      break;
    if (*(_QWORD *)(v8 + 32) <= v11)
      goto LABEL_19;
    v14 = (uint64_t *)(v8 + 24);
LABEL_9:
    v8 = *v14;
    ++v10;
    v13 = v8;
    v9 -= 4;
    if (!v9)
      goto LABEL_10;
  }
  v13 = 0;
  if (!v8 || v12 != 16)
    goto LABEL_10;
  if (v11 < *(_DWORD *)(v8 + 12))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v8 + 16) + 8 * v11);
    goto LABEL_9;
  }
LABEL_19:
  v13 = 0;
LABEL_10:
  v15 = 0;
  while (1)
  {
    this = llvm::Constant::getAggregateElement(this, (llvm::Type *)a2[v15]);
    if (!this)
      break;
    if (a3 == ++v15)
      return this;
  }
  if (v13 == a4)
    return 0;
  v25[0] = v4;
  v16 = ***(_QWORD ***)v4 + 1512;
  v17[0] = 64;
  v17[1] = 0;
  v18 = v25;
  v19 = 1;
  v20 = a2;
  v21 = a3;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  return (llvm::UndefValue *)sub_1C537D4FC(v16, v13, (unsigned __int8 *)v17);
}

uint64_t llvm::ConstantExpr::getFNeg(llvm::ConstantExpr *this, llvm::Constant *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)this, 0, 0, a5);
}

llvm::UndefValue *llvm::ConstantExpr::getCompare(llvm::ConstantExpr *this, unsigned __int8 *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  if (this <= 0xF)
    return (llvm::UndefValue *)llvm::ConstantExpr::getFCmp(this, (uint64_t ***)a2, a3, a4);
  else
    return llvm::ConstantExpr::getICmp(this, a2, a3, a4);
}

llvm::ValueHandleBase *llvm::ConstantExpr::get(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  unsigned __int8 v7;
  unsigned __int8 v10;
  llvm::ValueHandleBase *result;
  _QWORD **v12;
  uint64_t v13;
  unsigned __int8 v14[2];
  __int16 v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];

  v7 = a4;
  v10 = this;
  v21[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction(this, a2, a3, a4);
  if (!result)
  {
    v12 = *(_QWORD ***)a2;
    if (*(_QWORD *)a2 == a5)
    {
      return 0;
    }
    else
    {
      v21[0] = a2;
      v21[1] = a3;
      v13 = **v12 + 1512;
      v14[0] = v10;
      v14[1] = v7;
      v15 = 0;
      v16 = v21;
      v17 = 2;
      v18 = 0u;
      v19 = 0u;
      v20 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v13, (uint64_t)v12, v14);
    }
  }
  return result;
}

int32x2_t sub_1C537C658(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v3;
  __int32 v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int32x2_t result;
  int v10;
  int v11;

  v3 = *a1;
  v4 = a1[2].i32[0];
  if (!v4)
  {
    v6 = 0;
LABEL_7:
    v7 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v6);
    goto LABEL_3;
  }
  LODWORD(v6) = sub_1C53839B8(a2) & (v4 - 1);
  v7 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8 != -4096)
    {
      v11 = v6 + v10++;
      v6 = v11 & (v4 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v6);
      if (v8 == a2)
        goto LABEL_7;
    }
    v3 = *a1;
    v6 = a1[2].u32[0];
    goto LABEL_7;
  }
LABEL_3:
  *v7 = -8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

int32x2_t sub_1C537C708(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v3;
  __int32 v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int32x2_t result;
  int v10;
  int v11;

  v3 = *a1;
  v4 = a1[2].i32[0];
  if (!v4)
  {
    v6 = 0;
LABEL_7:
    v7 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v6);
    goto LABEL_3;
  }
  LODWORD(v6) = sub_1C5383F10(a2) & (v4 - 1);
  v7 = (uint64_t *)(*(_QWORD *)&v3 + 8 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8 != -4096)
    {
      v11 = v6 + v10++;
      v6 = v11 & (v4 - 1);
      v8 = *(_QWORD *)(*(_QWORD *)&v3 + 8 * v6);
      if (v8 == a2)
        goto LABEL_7;
    }
    v3 = *a1;
    v6 = a1[2].u32[0];
    goto LABEL_7;
  }
LABEL_3:
  *v7 = -8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

llvm::APFloatBase *llvm::ConstantDataVector::getSplatValue(llvm::ConstantDataVector *this)
{
  char v2;
  char v4;

  v2 = *((_BYTE *)this + 40);
  if ((v2 & 1) == 0)
  {
    *((_BYTE *)this + 40) = v2 | 1;
    if (llvm::ConstantDataVector::isSplatData(this))
      v4 = 2;
    else
      v4 = 0;
    v2 = *((_BYTE *)this + 40) & 0xFD | v4;
    *((_BYTE *)this + 40) = v2;
  }
  if ((v2 & 2) != 0)
    return llvm::ConstantDataSequential::getElementAsConstant(this);
  else
    return 0;
}

uint64_t llvm::ConstantVector::getSplatValue(llvm::ConstantVector *this, int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;

  v3 = *((_DWORD *)this + 5) & 0x7FFFFFF;
  result = *((_QWORD *)this - 4 * v3);
  if (v3 >= 2)
  {
    v5 = -32 * v3;
    v6 = (char *)this + 32;
    do
    {
      v7 = *(_QWORD *)&v6[v5];
      if (v7 == result)
        v8 = 4;
      else
        v8 = 1;
      if (v7 != result && a2 != 0)
      {
        if (*(unsigned __int8 *)(v7 + 16) - 11 < 2)
          goto LABEL_15;
        if (*(unsigned __int8 *)(result + 16) - 11 < 2)
          result = *(_QWORD *)&v6[v5];
        v8 = v7 != result;
      }
      if ((v8 | 4) != 4)
        return 0;
LABEL_15:
      v5 += 32;
    }
    while (v5 != -32);
  }
  return result;
}

uint64_t llvm::Constant::getUniqueInteger(llvm::Constant *this)
{
  if (!this || *((_BYTE *)this + 16) != 16)
    this = llvm::Constant::getAggregateElement(this, 0);
  return (uint64_t)this + 24;
}

uint64_t llvm::BlockAddress::lookup(llvm::BlockAddress *this, const llvm::BasicBlock *a2)
{
  uint64_t result;
  llvm::Function *v3;
  uint64_t *v5;
  int v6;
  _QWORD v7[2];
  uint64_t v8;

  if ((*((_WORD *)this + 9) & 0x7FFF) == 0)
    return 0;
  v3 = (llvm::Function *)*((_QWORD *)this + 7);
  v5 = (uint64_t *)(*(_QWORD *)llvm::Function::getContext(v3) + 1440);
  v7[0] = v3;
  v7[1] = this;
  v8 = 0;
  v6 = sub_1C6214EF4(v5, v7, &v8);
  result = 0;
  if (v6)
    return *(_QWORD *)(v8 + 16);
  return result;
}

uint64_t llvm::BlockAddress::handleOperandChangeImpl(uint64_t ***this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v3;
  llvm::Value *v5;
  llvm::Value **v6;
  llvm::Value **v7;
  llvm::Value *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  llvm::Value *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t **v18;
  llvm::Value ***v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t **v22;
  llvm::Value ***v23;
  uint64_t **v24;
  llvm::Value *v25;
  llvm::Value *v26;
  _QWORD *v27;

  v3 = a3;
  v6 = (llvm::Value **)(this - 8);
  v5 = (llvm::Value *)*(this - 8);
  v7 = (llvm::Value **)(this - 4);
  if (v5 == a2)
  {
    v8 = *v7;
    v5 = llvm::Value::stripPointerCasts(a3);
    v3 = v8;
  }
  v9 = (uint64_t *)(***this + 1440);
  v25 = v5;
  v26 = v3;
  v10 = sub_1C622A684(v9, &v25);
  v11 = v10[2];
  if (!v11)
  {
    v13 = v10;
    v14 = (llvm::Value *)*(this - 4);
    *((_WORD *)v14 + 9) = *((_WORD *)v14 + 9) & 0x8000 | (*((_WORD *)v14 + 9) - 1) & 0x7FFF;
    v15 = ***this;
    v25 = (llvm::Value *)*(this - 8);
    v26 = v14;
    v27 = 0;
    if (sub_1C6214EF4((uint64_t *)(v15 + 1440), &v25, &v27))
    {
      v16 = v27;
      *v27 = -8192;
      v16[1] = -8192;
      *(int32x2_t *)(v15 + 1448) = vadd_s32(*(int32x2_t *)(v15 + 1448), (int32x2_t)0x1FFFFFFFFLL);
    }
    v13[2] = this;
    if (*(this - 8))
    {
      **(this - 6) = (uint64_t *)*(this - 7);
      v17 = (uint64_t)*(this - 7);
      if (v17)
        *(_QWORD *)(v17 + 16) = *(this - 6);
    }
    *v6 = v5;
    if (v5)
    {
      v20 = (uint64_t **)*((_QWORD *)v5 + 1);
      v19 = (llvm::Value ***)((char *)v5 + 8);
      v18 = v20;
      *(this - 7) = v20;
      if (v20)
        v18[2] = (uint64_t *)(this - 7);
      *(this - 6) = (uint64_t **)v19;
      *v19 = v6;
    }
    if (*v7)
    {
      **(this - 2) = (uint64_t *)*(this - 3);
      v21 = (uint64_t)*(this - 3);
      if (v21)
        *(_QWORD *)(v21 + 16) = *(this - 2);
    }
    *(this - 4) = (uint64_t **)v3;
    v24 = (uint64_t **)*((_QWORD *)v3 + 1);
    v23 = (llvm::Value ***)((char *)v3 + 8);
    v22 = v24;
    *(this - 3) = v24;
    if (v24)
      v22[2] = (uint64_t *)(this - 3);
    *(this - 2) = (uint64_t **)v23;
    *v23 = v7;
    *((_WORD *)*(this - 4) + 9) = *((_WORD *)*(this - 4) + 9) & 0x8000 | (*((_WORD *)*(this - 4) + 9) + 1) & 0x7FFF;
  }
  return v11;
}

uint64_t llvm::DSOLocalEquivalent::DSOLocalEquivalent(uint64_t result, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_DWORD *)(result + 20) & 0xC0000000 | 1;
  *(_DWORD *)(result + 16) = 6;
  *(_DWORD *)(result + 20) = v2;
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v6 = a2[1];
  v4 = a2 + 1;
  v5 = v6;
  *(_QWORD *)(result - 24) = v6;
  if (v6)
    *(_QWORD *)(v5 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v4;
  *v4 = result - 32;
  return result;
}

llvm::UndefValue *llvm::DSOLocalEquivalent::handleOperandChangeImpl(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v3;
  llvm::Value *v5;
  llvm::Constant **v7;
  llvm::Value *v8;
  uint64_t v9;
  _QWORD *v10;
  llvm::Constant *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value **v15;
  uint64_t v16;
  llvm::Constant *v17;
  llvm::Constant *v18;
  llvm::Value *v19;

  v3 = a3;
  if (*((unsigned __int8 *)a3 + 16) >= 4u)
    v5 = 0;
  else
    v5 = a3;
  v19 = v5;
  if (v5 && (v7 = (llvm::Constant **)sub_1C6180A54(**(_QWORD **)*this + 1464, (uint64_t *)&v19)[1]) != 0)
  {
    if (*v7 != *this)
      return sub_1C537D3B8((llvm *)0x31, (uint64_t)v7, *this, 0);
    return (llvm::UndefValue *)v7;
  }
  else if ((llvm::Constant::isNullValue(v3) & 1) == 0)
  {
    v8 = llvm::Value::stripPointerCastsAndAliases(v3);
    v9 = **(_QWORD **)*this + 1464;
    v19 = v8;
    v10 = sub_1C6180A54(v9, (uint64_t *)&v19);
    v3 = (llvm::Value *)v10[1];
    v11 = *this;
    if (v3)
    {
      if (*(llvm::Constant **)v3 != v11)
        return sub_1C537D3B8((llvm *)0x31, (uint64_t)v3, v11, 0);
    }
    else
    {
      v12 = v10;
      v13 = **(_QWORD **)v11;
      v15 = this - 4;
      v14 = (uint64_t)*(this - 4);
      v19 = 0;
      if (sub_1C6144BDC(*(_QWORD *)(v13 + 1464), *(_DWORD *)(v13 + 1480), v14, &v19))
      {
        *(_QWORD *)v19 = -8192;
        *(int32x2_t *)(v13 + 1472) = vadd_s32(*(int32x2_t *)(v13 + 1472), (int32x2_t)0x1FFFFFFFFLL);
      }
      v12[1] = this;
      if (*(this - 4))
      {
        *(_QWORD *)*(this - 2) = *(this - 3);
        v16 = (uint64_t)*(this - 3);
        if (v16)
          *(_QWORD *)(v16 + 16) = *(this - 2);
      }
      *v15 = v8;
      if (v8)
      {
        v17 = (llvm::Value *)((char *)v8 + 8);
        v18 = (llvm::Constant *)*((_QWORD *)v8 + 1);
        *(this - 3) = v18;
        if (v18)
          *((_QWORD *)v18 + 2) = this - 3;
        *(this - 2) = v17;
        *(_QWORD *)v17 = v15;
      }
      v3 = 0;
      if (*(llvm::Constant **)v8 != *this)
        *this = *(llvm::Constant **)v8;
    }
  }
  return v3;
}

uint64_t llvm::NoCFIValue::NoCFIValue(uint64_t result, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  v2 = *(_DWORD *)(result + 20) & 0xC0000000 | 1;
  *(_DWORD *)(result + 16) = 7;
  *(_DWORD *)(result + 20) = v2;
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *(_QWORD *)(result - 32) = a2;
  v6 = a2[1];
  v4 = a2 + 1;
  v5 = v6;
  *(_QWORD *)(result - 24) = v6;
  if (v6)
    *(_QWORD *)(v5 + 16) = result - 24;
  *(_QWORD *)(result - 16) = v4;
  *v4 = result - 32;
  return result;
}

llvm::UndefValue *llvm::NoCFIValue::handleOperandChangeImpl(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v4;
  llvm::Value *v5;
  _QWORD *v6;
  llvm::Constant **v7;
  llvm::Constant *v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Constant **v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Constant *v16;
  llvm::Constant *v17;
  llvm::Constant *v18;
  llvm::Value *v19;
  _QWORD *v20;

  v4 = llvm::Value::stripPointerCasts(a3);
  if (*((unsigned __int8 *)v4 + 16) >= 4u)
    v5 = 0;
  else
    v5 = v4;
  v19 = v5;
  v6 = sub_1C6180A54(**(_QWORD **)*this + 1488, (uint64_t *)&v19);
  v7 = (llvm::Constant **)v6[1];
  v8 = *this;
  if (v7)
  {
    if (*v7 != v8)
      return sub_1C537D3B8((llvm *)0x31, (uint64_t)v7, v8, 0);
  }
  else
  {
    v10 = v6;
    v11 = **(_QWORD **)v8;
    v13 = this - 4;
    v12 = (uint64_t)*(this - 4);
    v20 = 0;
    if (sub_1C6144BDC(*(_QWORD *)(v11 + 1488), *(_DWORD *)(v11 + 1504), v12, &v20))
    {
      *v20 = -8192;
      *(int32x2_t *)(v11 + 1496) = vadd_s32(*(int32x2_t *)(v11 + 1496), (int32x2_t)0x1FFFFFFFFLL);
    }
    v10[1] = this;
    v14 = v19;
    if (*(this - 4))
    {
      *(_QWORD *)*(this - 2) = *(this - 3);
      v15 = (uint64_t)*(this - 3);
      if (v15)
        *(_QWORD *)(v15 + 16) = *(this - 2);
    }
    *v13 = v14;
    if (v14)
    {
      v18 = (llvm::Constant *)*((_QWORD *)v14 + 1);
      v16 = (llvm::Value *)((char *)v14 + 8);
      v17 = v18;
      *(this - 3) = v18;
      if (v18)
        *((_QWORD *)v17 + 2) = this - 3;
      *(this - 2) = v16;
      *(_QWORD *)v16 = v13;
    }
    v7 = 0;
    if (*(llvm::Constant **)v19 != *this)
      *this = *(llvm::Constant **)v19;
  }
  return (llvm::UndefValue *)v7;
}

llvm::UndefValue *llvm::ConstantExpr::getTrunc(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x26, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getZExt(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x27, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getSExt(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x28, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getFPTrunc(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x2D, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getFPExtend(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x2E, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getUIToFP(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x2B, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getSIToFP(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x2C, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getFPToUI(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x29, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getFPToSI(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x2A, (uint64_t)this, a2, a3);
}

llvm::UndefValue *llvm::ConstantExpr::getPtrToInt(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  return sub_1C537D3B8((llvm *)0x2F, (uint64_t)this, a2, a3);
}

uint64_t llvm::ConstantExpr::getAddrSpaceCast(llvm::ConstantExpr *this, llvm::Constant ***a2, llvm::Type *a3)
{
  uint64_t v5;
  llvm::Constant *v6;
  llvm::PointerType *v7;
  llvm::Type *v8;
  llvm::FixedVectorType *v9;
  llvm::FixedVectorType *v10;
  llvm::FixedVectorType *v11;

  v5 = *(_QWORD *)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  v6 = (llvm::Constant *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v6 = *a2[2];
  v7 = (llvm::PointerType *)*((_QWORD *)v6 + 3);
  if (*(llvm::PointerType **)(v5 + 24) != v7)
  {
    v8 = (llvm::Type *)(*(_DWORD *)(v5 + 8) >> 8);
    if (v7)
      v9 = (llvm::FixedVectorType *)llvm::PointerType::get(v7, v8);
    else
      v9 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)v6, v8);
    v10 = v9;
    if (((_DWORD)a2[1] & 0xFE) == 0x12)
    {
      llvm::FixedVectorType::get(v9, (llvm::Type *)*((unsigned int *)a2 + 8));
      v10 = v11;
    }
    if (*(llvm::FixedVectorType **)this != v10)
      sub_1C537D3B8(49);
  }
  return sub_1C537D3B8(50);
}

llvm::UndefValue *llvm::ConstantExpr::getZExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  llvm::Type *v5;
  llvm::Type *v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  uint64_t v10;

  v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)v5 + 2);
  else
    v6 = *this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  v8 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v8 = *a2[2];
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2)
      return (llvm::UndefValue *)this;
    v10 = 49;
  }
  else
  {
    v10 = 39;
  }
  return sub_1C537D3B8((llvm *)v10, (uint64_t)this, (llvm::Constant *)a2, 0);
}

llvm::ConstantExpr *llvm::ConstantExpr::getSExtOrBitCast(llvm::Type **this, llvm::Type ***a2, llvm::Type *a3)
{
  llvm::Type *v5;
  llvm::Type *v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  uint64_t v10;

  v5 = *this;
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)v5 + 2);
  else
    v6 = *this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v6);
  v8 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v8 = *a2[2];
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v8))
  {
    if (v5 == (llvm::Type *)a2)
      return (llvm::ConstantExpr *)this;
    v10 = 49;
  }
  else
  {
    v10 = 40;
  }
  return (llvm::ConstantExpr *)sub_1C537D3B8(v10);
}

llvm::ConstantExpr *llvm::ConstantExpr::getPointerCast(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  int v3;
  char v4;
  llvm::Constant *v5;
  unsigned int v6;

  v3 = *((_DWORD *)a2 + 2);
  v4 = v3;
  if ((v3 & 0xFE) == 0x12)
    v4 = *(_BYTE *)(**((_QWORD **)a2 + 2) + 8);
  if (v4 == 13)
    return (llvm::ConstantExpr *)sub_1C537D3B8(47);
  v5 = *(llvm::Constant **)this;
  v6 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**((_QWORD **)v5 + 2) + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if (v3 == 15 && (v3 ^ v6) >= 0x100)
    return (llvm::ConstantExpr *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0);
  if (v5 != a2)
    return (llvm::ConstantExpr *)sub_1C537D3B8(49);
  return this;
}

llvm::UndefValue *llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(llvm::UndefValue *this, llvm::Constant *a2, llvm::Type *a3)
{
  llvm::Constant *v3;
  unsigned int v4;
  int v5;

  v3 = *(llvm::Constant **)this;
  v4 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**((_QWORD **)v3 + 2) + 8);
  v5 = *((_DWORD *)a2 + 2);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**((_QWORD **)a2 + 2) + 8);
  if ((v5 ^ v4) >= 0x100)
    return (llvm::UndefValue *)llvm::ConstantExpr::getAddrSpaceCast(this, (llvm::Constant ***)a2, 0);
  if (v3 != a2)
    return sub_1C537D3B8((llvm *)0x31, (uint64_t)this, a2, 0);
  return this;
}

uint64_t llvm::ConstantExpr::getIntegerCast(llvm::ConstantExpr *this, llvm::Type ***a2, llvm::Type *a3)
{
  int v3;
  uint64_t v5;
  unsigned int PrimitiveSizeInBits;
  llvm::Type *v7;
  unsigned int v8;
  int v9;
  int v10;

  v3 = (int)a3;
  v5 = *(_QWORD *)this;
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5);
  v7 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *a2[2];
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (v3)
    v9 = 40;
  else
    v9 = 39;
  if (PrimitiveSizeInBits > v8)
    v9 = 38;
  if (PrimitiveSizeInBits == v8)
    v10 = 49;
  else
    v10 = v9;
  return llvm::ConstantExpr::getCast(v10);
}

llvm::UndefValue *sub_1C537D3B8(llvm *a1, uint64_t a2, llvm::Constant *a3, llvm::Type *a4)
{
  char v4;
  unsigned __int8 v6;
  llvm::UndefValue *result;
  uint64_t v8;
  unsigned __int8 v9[2];
  __int16 v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = (char)a4;
  v6 = a1;
  v16 = a2;
  result = llvm::ConstantFoldCastInstruction(a1, a2, a3, a4);
  if (!result && (v4 & 1) == 0)
  {
    v8 = **(_QWORD **)a3 + 1512;
    v9[0] = v6;
    v9[1] = 0;
    v10 = 0;
    v11 = &v16;
    v12 = 1;
    v13 = 0u;
    v14 = 0u;
    v15 = 0;
    return (llvm::UndefValue *)sub_1C537D4FC(v8, (uint64_t)a3, v9);
  }
  return result;
}

uint64_t llvm::ConstantExpr::get(llvm::ConstantExpr *this, unsigned __int8 *a2, llvm::Constant *a3, uint64_t a4, llvm::Type *a5)
{
  unsigned __int8 v6;
  unsigned __int8 v8;
  uint64_t result;
  _QWORD **v10;
  uint64_t v11;
  unsigned __int8 v12[2];
  __int16 v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = a3;
  v8 = this;
  v19[1] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldUnaryInstruction(this, a2, a3);
  if (!result)
  {
    v10 = *(_QWORD ***)a2;
    if (*(_QWORD *)a2 == a4)
    {
      return 0;
    }
    else
    {
      v19[0] = a2;
      v11 = **v10 + 1512;
      v12[0] = v8;
      v12[1] = v6;
      v13 = 0;
      v14 = v19;
      v15 = 1;
      v16 = 0u;
      v17 = 0u;
      v18 = 0;
      return sub_1C537D4FC(v11, (uint64_t)v10, v12);
    }
  }
  return result;
}

uint64_t sub_1C537D4FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  char v4;
  unsigned __int8 v5;
  __int16 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int i;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  uint64_t *v38;
  __int16 v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int j;
  unsigned int v67;
  uint64_t *v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t *v71;
  llvm::GetElementPtrInst *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  _QWORD *v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  char *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;
  _DWORD *v147;
  _DWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t **v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _BYTE v168[40];
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v5 = a3[1];
  v6 = *((_WORD *)a3 + 1);
  v161 = *((_DWORD *)a3 + 1);
  v7 = (_QWORD *)*((_QWORD *)a3 + 3);
  v8 = *((_QWORD *)a3 + 4);
  v10 = (_QWORD *)*((_QWORD *)a3 + 5);
  v9 = *((_QWORD *)a3 + 6);
  v11 = *((_QWORD *)a3 + 7);
  v163 = *((_QWORD *)a3 + 2);
  v162 = (_QWORD *)*((_QWORD *)a3 + 1);
  v12 = sub_1C53831BC(v162, (uint64_t)&v162[v163]);
  v164 = v8;
  v13 = sub_1C4F5AB38(v7, (uint64_t)v7 + 4 * v8);
  v14 = sub_1C517D118(v10, (uint64_t)v10 + 4 * v9);
  memset(v168, 0, 36);
  v15 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v15 & 1) == 0)
  {
    v160 = v14;
    v157 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v14 = v160;
    if (v157)
    {
      v158 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v158 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v158;
      __cxa_guard_release(&qword_1ED7EAC88);
      v14 = v160;
    }
  }
  v168[0] = v4;
  v168[1] = v5;
  *(_WORD *)&v168[2] = v6;
  *(_QWORD *)&v168[4] = v12;
  *(_QWORD *)&v168[12] = v13;
  *(_QWORD *)&v168[20] = v14;
  *(_QWORD *)&v168[28] = v11;
  v16 = *(_QWORD *)v168 - 0x3C5A37A36834CED9 * v14 - 0x7CAFD2FAA76D1684;
  v17 = __ROR8__(v16 + *(_QWORD *)&v168[24], 52);
  v18 = v16 + *(_QWORD *)&v168[8];
  v19 = __ROR8__(v18, 7);
  v20 = v18 + *(_QWORD *)&v168[16];
  v21 = v19
      + __ROR8__(*(_QWORD *)v168 - 0x3C5A37A36834CED9 * v14 - 0x7CAFD2FAA76D1684, 37)
      + v17
      + __ROR8__(v20, 31);
  v22 = 0xC3A5C85C97CB3127 * (v13 + v12 + *(_QWORD *)&v168[16] + v14 + v11 + v21)
      - 0x651E95C4D06FBFB1
      * (v20
       + *(_QWORD *)&v168[24]
       + __ROR8__(v12 + *(_QWORD *)&v168[16], 37)
       + __ROR8__(v12 + *(_QWORD *)&v168[16] + v11, 52)
       + __ROR8__(v13 + v12 + *(_QWORD *)&v168[16], 7)
       + __ROR8__(v13 + v12 + *(_QWORD *)&v168[16] + v14, 31));
  v23 = 797982799
      * (((((0xC3A5C85C97CB3127 * (v22 ^ (v22 >> 47))) ^ qword_1ED7EAC80) + v21) >> 47) ^ (((-1748291289
                                                                                             * (v22 ^ (v22 >> 47))) ^ qword_1ED7EAC80)
                                                                                           + v21));
  *(_DWORD *)&v168[8] = 0;
  *(_QWORD *)v168 = 0;
  v24 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v159 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v159 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v159;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  *(_DWORD *)&v168[4] = HIDWORD(a2);
  *(_DWORD *)&v168[8] = v23;
  v25 = 0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ a2 ^ __ROR8__(*(_QWORD *)&v168[4] + 12, 12));
  v26 = __ROR8__(*(_QWORD *)&v168[4] + 12, 12) ^ (v25 >> 47);
  v27 = (-348639895 * ((((0x9DDFEA08EB382D69 * (v26 ^ v25)) >> 32) >> 15) ^ (-348639895 * (v26 ^ v25)))) ^ HIDWORD(a2);
  *(_DWORD *)v168 = v27;
  *(_QWORD *)&v168[8] = a2;
  v168[16] = v4;
  v168[17] = v5;
  *(_WORD *)&v168[18] = v6;
  *(_DWORD *)&v168[20] = v161;
  *(_QWORD *)&v168[24] = v162;
  *(_QWORD *)&v168[32] = v163;
  v28 = a1;
  v169 = v7;
  v170 = v164;
  v171 = v10;
  v172 = v9;
  v173 = v11;
  v29 = *(_DWORD *)(a1 + 16);
  if (!v29)
    goto LABEL_11;
  v30 = *(_QWORD *)a1;
  v31 = v29 - 1;
  v32 = 1;
  for (i = (-348639895
           * ((((0x9DDFEA08EB382D69 * (v26 ^ v25)) >> 32) >> 15) ^ (-348639895 * (v26 ^ v25)))) ^ HIDWORD(a2);
        ;
        i = v34 + v32++)
  {
    v34 = i & v31;
    v35 = *(_QWORD *)(v30 + 8 * (i & v31));
    if (v35 == -4096)
      goto LABEL_11;
    if (v35 != -8192 && *(_QWORD *)v35 == a2 && sub_1C53854C4(&v168[16], *(_QWORD *)(v30 + 8 * v34)))
      break;
  }
  if (v34 == v29)
  {
LABEL_11:
    v36 = *a3;
    v37 = a3[1];
    v38 = (uint64_t *)*((_QWORD *)a3 + 1);
    v39 = *((_WORD *)a3 + 1);
    v40 = (_BYTE *)*((_QWORD *)a3 + 3);
    v41 = *((_QWORD *)a3 + 4);
    switch(*a3)
    {
      case '5':
        v147 = operator new(0x60uLL);
        v147[21] = v147[21] & 0x38000000 | 2;
        v35 = (uint64_t)(v147 + 16);
        *(_QWORD *)v147 = 0;
        *((_QWORD *)v147 + 1) = 0;
        *((_QWORD *)v147 + 2) = 0;
        *((_QWORD *)v147 + 3) = v147 + 16;
        *((_QWORD *)v147 + 4) = 0;
        *((_QWORD *)v147 + 5) = 0;
        *((_QWORD *)v147 + 6) = 0;
        *((_QWORD *)v147 + 7) = v147 + 16;
        v142 = *v38;
        v143 = v38[1];
        v144 = (uint64_t)(v147 + 16);
        v145 = a2;
        v146 = 53;
        goto LABEL_116;
      case '6':
        v141 = operator new(0x60uLL);
        v141[21] = v141[21] & 0x38000000 | 2;
        v35 = (uint64_t)(v141 + 16);
        *(_QWORD *)v141 = 0;
        *((_QWORD *)v141 + 1) = 0;
        *((_QWORD *)v141 + 2) = 0;
        *((_QWORD *)v141 + 3) = v141 + 16;
        *((_QWORD *)v141 + 4) = 0;
        *((_QWORD *)v141 + 5) = 0;
        *((_QWORD *)v141 + 6) = 0;
        *((_QWORD *)v141 + 7) = v141 + 16;
        v142 = *v38;
        v143 = v38[1];
        v144 = (uint64_t)(v141 + 16);
        v145 = a2;
        v146 = 54;
LABEL_116:
        sub_1C622AA20(v144, v145, v146, v39, v142, v143);
        goto LABEL_35;
      case '7':
      case '8':
      case ':':
      case ';':
      case '<':
        goto LABEL_57;
      case '9':
        v42 = (char *)operator new(0x78uLL);
        v43 = 0;
        v35 = (uint64_t)(v42 + 96);
        *((_DWORD *)v42 + 29) = *((_DWORD *)v42 + 29) & 0x38000000 | 3;
        do
        {
          v44 = &v42[v43];
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = 0;
          *((_QWORD *)v44 + 2) = 0;
          *((_QWORD *)v44 + 3) = v35;
          v43 += 32;
        }
        while (v43 != 96);
        v46 = *v38;
        v45 = (_QWORD *)v38[1];
        v47 = v38[2];
        *((_QWORD *)v42 + 12) = *v45;
        *((_QWORD *)v42 + 13) = 0;
        v42[112] = 5;
        v42[113] = 0;
        *((_DWORD *)v42 + 29) = *((_DWORD *)v42 + 29) & 0xC0000000 | 3;
        *((_WORD *)v42 + 57) = 57;
        if (*(_QWORD *)v42)
        {
          **((_QWORD **)v42 + 2) = *((_QWORD *)v42 + 1);
          v48 = *((_QWORD *)v42 + 1);
          if (v48)
            *(_QWORD *)(v48 + 16) = *((_QWORD *)v42 + 2);
        }
        *(_QWORD *)v42 = v46;
        if (v46)
        {
          v51 = *(_QWORD *)(v46 + 8);
          v49 = (_QWORD *)(v46 + 8);
          v50 = v51;
          *((_QWORD *)v42 + 1) = v51;
          if (v51)
            *(_QWORD *)(v50 + 16) = v42 + 8;
          *((_QWORD *)v42 + 2) = v49;
          *v49 = v42;
        }
        v52 = v42 + 32;
        if (*((_QWORD *)v42 + 4))
        {
          **((_QWORD **)v42 + 6) = *((_QWORD *)v42 + 5);
          v53 = *((_QWORD *)v42 + 5);
          if (v53)
            *(_QWORD *)(v53 + 16) = *((_QWORD *)v42 + 6);
        }
        *((_QWORD *)v42 + 4) = v45;
        goto LABEL_25;
      case '=':
        v124 = (char *)operator new(0x58uLL);
        v35 = (uint64_t)(v124 + 64);
        *((_DWORD *)v124 + 21) = *((_DWORD *)v124 + 21) & 0x38000000 | 2;
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v124 + 1) = 0;
        *((_QWORD *)v124 + 2) = 0;
        *((_QWORD *)v124 + 3) = v124 + 64;
        *((_QWORD *)v124 + 4) = 0;
        v125 = (uint64_t *)(v124 + 32);
        *((_QWORD *)v124 + 5) = 0;
        *((_QWORD *)v124 + 6) = 0;
        *((_QWORD *)v124 + 7) = v124 + 64;
        v127 = *v38;
        v126 = v38[1];
        *((_QWORD *)v124 + 8) = *(_QWORD *)(*(_QWORD *)*v38 + 24);
        *((_QWORD *)v124 + 9) = 0;
        v124[80] = 5;
        v124[81] = 0;
        *((_DWORD *)v124 + 21) = 2;
        *((_WORD *)v124 + 41) = 61;
        *(_QWORD *)v124 = v127;
        v130 = *(_QWORD *)(v127 + 8);
        v128 = (_QWORD *)(v127 + 8);
        v129 = v130;
        *((_QWORD *)v124 + 1) = v130;
        if (v130)
          *(_QWORD *)(v129 + 16) = v124 + 8;
        *((_QWORD *)v124 + 2) = v128;
        *v128 = v124;
        if (*((_QWORD *)v124 + 4))
        {
          **((_QWORD **)v124 + 6) = *((_QWORD *)v124 + 5);
          v131 = *((_QWORD *)v124 + 5);
          if (v131)
            *(_QWORD *)(v131 + 16) = *((_QWORD *)v124 + 6);
        }
        *v125 = v126;
        if (v126)
        {
          v134 = *(_QWORD *)(v126 + 8);
          v132 = (uint64_t **)(v126 + 8);
          v133 = v134;
          *((_QWORD *)v124 + 5) = v134;
          if (v134)
            *(_QWORD *)(v133 + 16) = v124 + 40;
          *((_QWORD *)v124 + 6) = v132;
          *v132 = v125;
        }
        goto LABEL_35;
      case '>':
        v42 = (char *)operator new(0x78uLL);
        v93 = 0;
        v35 = (uint64_t)(v42 + 96);
        *((_DWORD *)v42 + 29) = *((_DWORD *)v42 + 29) & 0x38000000 | 3;
        do
        {
          v94 = &v42[v93];
          *(_QWORD *)v94 = 0;
          *((_QWORD *)v94 + 1) = 0;
          *((_QWORD *)v94 + 2) = 0;
          *((_QWORD *)v94 + 3) = v35;
          v93 += 32;
        }
        while (v93 != 96);
        v95 = *v38;
        v45 = (_QWORD *)v38[1];
        v47 = v38[2];
        *((_QWORD *)v42 + 12) = *(_QWORD *)*v38;
        *((_QWORD *)v42 + 13) = 0;
        v42[112] = 5;
        v42[113] = 0;
        *((_DWORD *)v42 + 29) = *((_DWORD *)v42 + 29) & 0xC0000000 | 3;
        *((_WORD *)v42 + 57) = 62;
        if (*(_QWORD *)v42)
        {
          **((_QWORD **)v42 + 2) = *((_QWORD *)v42 + 1);
          v96 = *((_QWORD *)v42 + 1);
          if (v96)
            *(_QWORD *)(v96 + 16) = *((_QWORD *)v42 + 2);
        }
        *(_QWORD *)v42 = v95;
        v99 = *(_QWORD *)(v95 + 8);
        v97 = (_QWORD *)(v95 + 8);
        v98 = v99;
        *((_QWORD *)v42 + 1) = v99;
        if (v99)
          *(_QWORD *)(v98 + 16) = v42 + 8;
        *((_QWORD *)v42 + 2) = v97;
        *v97 = v42;
        v52 = v42 + 32;
        if (*((_QWORD *)v42 + 4))
        {
          **((_QWORD **)v42 + 6) = *((_QWORD *)v42 + 5);
          v100 = *((_QWORD *)v42 + 5);
          if (v100)
            *(_QWORD *)(v100 + 16) = *((_QWORD *)v42 + 6);
        }
        *v52 = v45;
        if (!v45)
          goto LABEL_28;
LABEL_25:
        v56 = v45[1];
        v54 = v45 + 1;
        v55 = v56;
        *((_QWORD *)v42 + 5) = v56;
        if (v56)
          *(_QWORD *)(v55 + 16) = v42 + 40;
        *((_QWORD *)v42 + 6) = v54;
        *v54 = v52;
LABEL_28:
        v57 = (uint64_t *)(v42 + 64);
        if (*((_QWORD *)v42 + 8))
        {
          **((_QWORD **)v42 + 10) = *((_QWORD *)v42 + 9);
          v58 = *((_QWORD *)v42 + 9);
          if (v58)
            *(_QWORD *)(v58 + 16) = *((_QWORD *)v42 + 10);
        }
        *v57 = v47;
        if (v47)
        {
          v61 = *(_QWORD *)(v47 + 8);
          v59 = (uint64_t **)(v47 + 8);
          v60 = v61;
          *((_QWORD *)v42 + 9) = v61;
          if (v61)
            *(_QWORD *)(v60 + 16) = v42 + 72;
          *((_QWORD *)v42 + 10) = v59;
          *v59 = v57;
        }
        goto LABEL_35;
      case '?':
        v101 = (void *)*((_QWORD *)a3 + 5);
        v102 = *((_QWORD *)a3 + 6);
        v103 = (char *)operator new(0x80uLL);
        v35 = (uint64_t)(v103 + 64);
        *((_DWORD *)v103 + 21) = *((_DWORD *)v103 + 21) & 0x38000000 | 2;
        *(_QWORD *)v103 = 0;
        *((_QWORD *)v103 + 1) = 0;
        *((_QWORD *)v103 + 2) = 0;
        *((_QWORD *)v103 + 3) = v103 + 64;
        *((_QWORD *)v103 + 4) = 0;
        v104 = (uint64_t *)(v103 + 32);
        *((_QWORD *)v103 + 5) = 0;
        *((_QWORD *)v103 + 6) = 0;
        *((_QWORD *)v103 + 7) = v103 + 64;
        v105 = *v38;
        v106 = v38[1];
        v107 = *(_QWORD *)*v38;
        v108 = *(uint64_t ***)(v107 + 24);
        if (*(_BYTE *)(v107 + 8) == 19)
          llvm::ScalableVectorType::get(v108, (llvm::Type *)v102);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v108, (llvm::Type *)v102);
        *((_QWORD *)v103 + 8) = v109;
        *((_QWORD *)v103 + 9) = 0;
        v111 = *((_DWORD *)v103 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v103 + 20) = 4128773;
        *((_DWORD *)v103 + 21) = v111;
        *((_QWORD *)v103 + 11) = v103 + 104;
        *((_QWORD *)v103 + 12) = 0x400000000;
        v112 = *(_QWORD *)v103;
        v113 = 4 * v102;
        if ((unint64_t)(4 * v102) <= 0x10 && v102)
        {
          if (v112)
          {
            **((_QWORD **)v103 + 2) = *((_QWORD *)v103 + 1);
            v114 = *((_QWORD *)v103 + 1);
            if (v114)
              *(_QWORD *)(v114 + 16) = *((_QWORD *)v103 + 2);
          }
          *(_QWORD *)v103 = v105;
          v117 = *(_QWORD *)(v105 + 8);
          v116 = (_QWORD *)(v105 + 8);
          v115 = v117;
          *((_QWORD *)v103 + 1) = v117;
          if (v117)
            *(_QWORD *)(v115 + 16) = v103 + 8;
          *((_QWORD *)v103 + 2) = v116;
          *v116 = v103;
          if (*((_QWORD *)v103 + 4))
          {
            **((_QWORD **)v103 + 6) = *((_QWORD *)v103 + 5);
            v118 = *((_QWORD *)v103 + 5);
            if (v118)
              *(_QWORD *)(v118 + 16) = *((_QWORD *)v103 + 6);
          }
          *v104 = v106;
          if (v106)
          {
            v121 = *(_QWORD *)(v106 + 8);
            v120 = (uint64_t **)(v106 + 8);
            v119 = v121;
            *((_QWORD *)v103 + 5) = v121;
            if (v121)
              *(_QWORD *)(v119 + 16) = v103 + 40;
            *((_QWORD *)v103 + 6) = v120;
            *v120 = v104;
          }
          *((_DWORD *)v103 + 24) = 0;
          v122 = v113 >> 2;
          memcpy(*((void **)v103 + 11), v101, 4 * v102);
          goto LABEL_98;
        }
        v165 = v103 + 88;
        if (v112)
        {
          **((_QWORD **)v103 + 2) = *((_QWORD *)v103 + 1);
          v149 = *((_QWORD *)v103 + 1);
          if (v149)
            *(_QWORD *)(v149 + 16) = *((_QWORD *)v103 + 2);
        }
        *(_QWORD *)v103 = v105;
        v152 = *(_QWORD *)(v105 + 8);
        v151 = (_QWORD *)(v105 + 8);
        v150 = v152;
        *((_QWORD *)v103 + 1) = v152;
        if (v152)
          *(_QWORD *)(v150 + 16) = v103 + 8;
        *((_QWORD *)v103 + 2) = v151;
        *v151 = v103;
        if (*((_QWORD *)v103 + 4))
        {
          **((_QWORD **)v103 + 6) = *((_QWORD *)v103 + 5);
          v153 = *((_QWORD *)v103 + 5);
          if (v153)
            *(_QWORD *)(v153 + 16) = *((_QWORD *)v103 + 6);
        }
        *v104 = v106;
        if (v106)
        {
          v156 = *(_QWORD *)(v106 + 8);
          v155 = (uint64_t **)(v106 + 8);
          v154 = v156;
          *((_QWORD *)v103 + 5) = v156;
          if (v156)
            *(_QWORD *)(v154 + 16) = v103 + 40;
          *((_QWORD *)v103 + 6) = v155;
          *v155 = v104;
        }
        v123 = 0;
        *((_DWORD *)v103 + 24) = 0;
        v122 = (4 * v102) >> 2;
        if ((unint64_t)v113 >= 0x11)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v165, (uint64_t)(v103 + 104), (4 * v102) >> 2, 4);
          v123 = *((_DWORD *)v103 + 24);
        }
        if (v102)
        {
          memcpy((void *)(*v165 + 4 * v123), v101, 4 * v102);
          v28 = a1;
LABEL_98:
          v123 = *((_DWORD *)v103 + 24);
          goto LABEL_99;
        }
        v28 = a1;
LABEL_99:
        *((_DWORD *)v103 + 24) = v123 + v122;
        *((_QWORD *)v103 + 15) = llvm::ShuffleVectorInst::convertShuffleMaskForBitcode((int *)v101, v102, *((_BYTE **)v103 + 8), v110);
LABEL_35:
        v62 = *(_DWORD *)(v28 + 16);
        if (v62)
        {
          v63 = 0;
          v64 = *(_QWORD *)v28;
          v65 = v62 - 1;
          for (j = 1; ; ++j)
          {
            v67 = v27 & v65;
            v68 = (uint64_t *)(v64 + 8 * v67);
            v69 = (_QWORD *)*v68;
            if (*v68 == -4096)
              break;
            if (v69 != (_QWORD *)-8192)
            {
              if (*v69 == a2 && sub_1C53854C4(&v168[16], *v68))
                return v35;
              if (v69 == (_QWORD *)-4096)
                break;
            }
            if (v63)
              v70 = 0;
            else
              v70 = v69 == (_QWORD *)-8192;
            if (v70)
              v63 = (uint64_t *)(v64 + 8 * v67);
            v27 = v67 + j;
          }
          if (v63)
            v71 = v63;
          else
            v71 = (uint64_t *)(v64 + 8 * v67);
        }
        else
        {
          v71 = 0;
        }
        *sub_1C5385734(v28, (uint64_t)v168, v71) = v35;
        break;
      case '@':
        v148 = operator new(0x58uLL);
        v35 = (uint64_t)(v148 + 8);
        v148[13] = v148[13] & 0x38000000 | 1;
        *(_QWORD *)v148 = 0;
        *((_QWORD *)v148 + 1) = 0;
        *((_QWORD *)v148 + 2) = 0;
        *((_QWORD *)v148 + 3) = v148 + 8;
        sub_1C622A974((uint64_t)(v148 + 8), *v38, v40, v41, a2);
        goto LABEL_35;
      case 'A':
        v140 = operator new(0x78uLL);
        v140[21] = v140[21] & 0x38000000 | 2;
        v35 = (uint64_t)(v140 + 16);
        *(_QWORD *)v140 = 0;
        *((_QWORD *)v140 + 1) = 0;
        *((_QWORD *)v140 + 2) = 0;
        *((_QWORD *)v140 + 3) = v140 + 16;
        *((_QWORD *)v140 + 4) = 0;
        *((_QWORD *)v140 + 5) = 0;
        *((_QWORD *)v140 + 6) = 0;
        *((_QWORD *)v140 + 7) = v140 + 16;
        sub_1C622A878((uint64_t)(v140 + 16), *v38, v38[1], v40, v41, a2);
        goto LABEL_35;
      default:
        if (v36 == 34)
        {
          v73 = (llvm::GetElementPtrInst *)*((_QWORD *)a3 + 7);
          v76 = *v38;
          v74 = (uint64_t)(v38 + 1);
          v75 = (_QWORD *)v76;
          v77 = *((_QWORD *)a3 + 2);
          v78 = v77 - 1;
          v79 = v77;
          v80 = (_DWORD)v77 == 0;
          v81 = operator new(32 * v77 + 40);
          v35 = (uint64_t)&v81[4 * v79];
          *(_DWORD *)(v35 + 20) = *(_DWORD *)(v35 + 20) & 0x38000000 | v79 & 0x7FFFFFF;
          if (!v80)
          {
            do
            {
              *v81 = 0;
              v81[1] = 0;
              v81[2] = 0;
              v81[3] = v35;
              v81 += 4;
            }
            while (v81 != (_QWORD *)v35);
          }
          llvm::GetElementPtrConstantExpr::GetElementPtrConstantExpr(v35, v73, v75, v74, v78, a2);
          *(_BYTE *)(v35 + 17) = *(_BYTE *)(v35 + 17) & 1 | (2 * v37);
        }
        else
        {
LABEL_57:
          if (v36 == 12 || (v36 - 38) <= 0xC)
          {
            v135 = operator new(0x38uLL);
            v135[13] = v135[13] & 0x38000000 | 1;
            v35 = (uint64_t)(v135 + 8);
            *(_QWORD *)v135 = 0;
            *((_QWORD *)v135 + 1) = 0;
            *((_QWORD *)v135 + 2) = 0;
            *((_QWORD *)v135 + 3) = v135 + 8;
            v136 = *v38;
            *((_QWORD *)v135 + 4) = a2;
            *((_QWORD *)v135 + 5) = 0;
            *((_BYTE *)v135 + 48) = 5;
            *((_BYTE *)v135 + 49) = 0;
            v135[13] = 1;
            *((_WORD *)v135 + 25) = v36;
            *(_QWORD *)v135 = v136;
            if (v136)
            {
              v139 = *(_QWORD *)(v136 + 8);
              v137 = (_QWORD *)(v136 + 8);
              v138 = v139;
              *((_QWORD *)v135 + 1) = v139;
              if (v139)
                *(_QWORD *)(v138 + 16) = v135 + 2;
              *((_QWORD *)v135 + 2) = v137;
              *v137 = v135;
            }
          }
          else
          {
            v82 = (char *)operator new(0x58uLL);
            v35 = (uint64_t)(v82 + 64);
            *((_DWORD *)v82 + 21) = *((_DWORD *)v82 + 21) & 0x38000000 | 2;
            *((_QWORD *)v82 + 1) = 0;
            *(_QWORD *)v82 = 0;
            *((_QWORD *)v82 + 2) = 0;
            *((_QWORD *)v82 + 3) = v82 + 64;
            *((_QWORD *)v82 + 4) = 0;
            v83 = (uint64_t *)(v82 + 32);
            *((_QWORD *)v82 + 5) = 0;
            *((_QWORD *)v82 + 6) = 0;
            *((_QWORD *)v82 + 7) = v82 + 64;
            v85 = *v38;
            v84 = v38[1];
            *((_QWORD *)v82 + 8) = *(_QWORD *)*v38;
            *((_QWORD *)v82 + 9) = 0;
            v82[80] = 5;
            v82[81] = 0;
            *((_DWORD *)v82 + 21) = 2;
            *((_WORD *)v82 + 41) = v36;
            *(_QWORD *)v82 = v85;
            v88 = *(_QWORD *)(v85 + 8);
            v86 = (_QWORD *)(v85 + 8);
            v87 = v88;
            *((_QWORD *)v82 + 1) = v88;
            if (v88)
              *(_QWORD *)(v87 + 16) = v82 + 8;
            *((_QWORD *)v82 + 2) = v86;
            *v86 = v82;
            if (*((_QWORD *)v82 + 4))
            {
              **((_QWORD **)v82 + 6) = *((_QWORD *)v82 + 5);
              v89 = *((_QWORD *)v82 + 5);
              if (v89)
                *(_QWORD *)(v89 + 16) = *((_QWORD *)v82 + 6);
            }
            *v83 = v84;
            if (v84)
            {
              v92 = *(_QWORD *)(v84 + 8);
              v90 = (uint64_t **)(v84 + 8);
              v91 = v92;
              *((_QWORD *)v82 + 5) = v92;
              if (v92)
                *(_QWORD *)(v91 + 16) = v82 + 40;
              *((_QWORD *)v82 + 6) = v90;
              *v90 = v83;
            }
            v82[81] = v82[81] & 1 | (2 * v37);
          }
        }
        goto LABEL_35;
    }
  }
  return v35;
}

llvm::UndefValue *llvm::ConstantExpr::getAlignOf(uint64_t **this, llvm::Type *a2)
{
  uint64_t v3;
  uint64_t *v4;
  llvm::PointerType *v5;
  llvm::Constant *v6;
  llvm::Type *v7;
  const llvm::APInt *v8;
  uint64_t *NullValue;
  uint64_t v10;
  llvm::ConstantInt *v11;
  const llvm::APInt *v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  llvm::ConstantInt *v15;
  unint64_t v16;
  char v17;
  llvm::ValueHandleBase *v18;
  uint64_t ElementPtr;
  llvm::ConstantInt *v21;
  llvm::ValueHandleBase *v22;
  llvm::ValueHandleBase *v23;
  llvm::ConstantExpr *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = **this;
  v4 = *(uint64_t **)(v3 + 1888);
  v23 = (llvm::ValueHandleBase *)(v3 + 1888);
  v24 = (llvm::ConstantExpr *)this;
  v5 = (llvm::PointerType *)llvm::StructType::get(v4, (uint64_t)&v23, 2, 0);
  v6 = (llvm::Constant *)llvm::PointerType::get(v5, 0);
  NullValue = (uint64_t *)llvm::Constant::getNullValue(v6, v7);
  v10 = **this;
  v11 = *(llvm::ConstantInt **)(v10 + 1984);
  LODWORD(v24) = *(_DWORD *)(v10 + 1992) >> 8;
  if (v24 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, 0, 0);
  else
    v23 = 0;
  v13 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v23, v8);
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  v14 = **this;
  v15 = *(llvm::ConstantInt **)(v14 + 1960);
  v16 = *(unsigned int *)(v14 + 1968);
  LODWORD(v24) = v16 >> 8;
  if (v16 >> 8 > 0x40)
  {
    v21 = v15;
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, 1, 0);
    v15 = v21;
  }
  else
  {
    if (v16 <= 0xFF)
      v17 = 0;
    else
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v16);
    v23 = (llvm::ValueHandleBase *)(v17 & 1);
  }
  v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v23, v12);
  if (v24 >= 0x41 && v23)
  {
    v22 = v18;
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    v18 = v22;
  }
  v23 = v13;
  v24 = v18;
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(v5, NullValue, (llvm::Value *)&v23, 2, 0, 0, 0);
  return sub_1C537D3B8((llvm *)0x2F, ElementPtr, (llvm::Constant *)(**this + 1984), 0);
}

llvm::UndefValue *llvm::ConstantExpr::getOffsetOf(llvm::ConstantExpr *this, llvm::StructType *a2, const llvm::APInt *a3)
{
  uint64_t v4;
  llvm::ConstantInt *v5;
  unint64_t v6;
  int v7;
  llvm::Type *v8;
  llvm::Constant *v9;
  llvm::ConstantInt *v11;
  llvm::Type *v12;
  uint64_t v13;
  unsigned int v14;

  v4 = **(_QWORD **)this;
  v5 = *(llvm::ConstantInt **)(v4 + 1960);
  v6 = *(unsigned int *)(v4 + 1968);
  v14 = v6 >> 8;
  if (v6 >> 8 > 0x40)
  {
    v11 = v5;
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, a2, 0);
    v5 = v11;
  }
  else
  {
    if (v6 <= 0xFF)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v6);
    v13 = v7 & a2;
  }
  v8 = llvm::ConstantInt::get(v5, (llvm::LLVMContext *)&v13, a3);
  if (v14 >= 0x41 && v13)
  {
    v12 = v8;
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
    v8 = v12;
  }
  return llvm::ConstantExpr::getOffsetOf(this, v8, v9);
}

llvm::UndefValue *llvm::ConstantExpr::getOffsetOf(llvm::ConstantExpr *this, llvm::Type *a2, llvm::Constant *a3)
{
  uint64_t v5;
  llvm::ConstantInt *v6;
  llvm::ValueHandleBase *v7;
  llvm::Constant *v8;
  llvm::Type *v9;
  uint64_t *NullValue;
  uint64_t ElementPtr;
  llvm::ConstantInt *v13;
  llvm::ValueHandleBase *v14;
  llvm::ValueHandleBase *v15;
  llvm::Type *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = **(_QWORD **)this;
  v6 = *(llvm::ConstantInt **)(v5 + 1984);
  LODWORD(v16) = *(_DWORD *)(v5 + 1992) >> 8;
  if (v16 > 0x40)
  {
    v13 = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, 0, 0);
    v6 = v13;
  }
  else
  {
    v15 = 0;
  }
  v7 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v15, a3);
  if (v16 >= 0x41 && v15)
  {
    v14 = v7;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    v7 = v14;
  }
  v15 = v7;
  v16 = a2;
  v8 = (llvm::Constant *)llvm::PointerType::get(this, 0);
  NullValue = (uint64_t *)llvm::Constant::getNullValue(v8, v9);
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(this, NullValue, (llvm::Value *)&v15, 2, 0, 0, 0);
  return sub_1C537D3B8((llvm *)0x2F, ElementPtr, (llvm::Constant *)(**(_QWORD **)this + 1984), 0);
}

uint64_t llvm::ConstantExpr::getFCmp(llvm::ConstantExpr *this, uint64_t ***a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  __int16 v7;
  uint64_t result;
  uint64_t v9;
  uint64_t **v10;
  llvm::Type *v11;
  uint64_t **v12;
  _WORD v13[4];
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];

  v4 = (char)a4;
  v7 = (__int16)this;
  v19[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldCompareInstruction();
  if (!result && (v4 & 1) == 0)
  {
    v19[0] = a2;
    v19[1] = a3;
    v9 = ***a2;
    v10 = (uint64_t **)(v9 + 1888);
    if (((_DWORD)(*a2)[1] & 0xFE) == 0x12)
    {
      v11 = (llvm::Type *)*((unsigned int *)*a2 + 8);
      if (*((_DWORD *)*a2 + 2) == 19)
        llvm::ScalableVectorType::get(v10, v11);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v10, v11);
      v10 = v12;
      v9 = ***a2;
    }
    v13[0] = 54;
    v13[1] = v7;
    v14 = v19;
    v15 = 2;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    return sub_1C537D4FC(v9 + 1512, (uint64_t)v10, (unsigned __int8 *)v13);
  }
  return result;
}

uint64_t llvm::ConstantExpr::getGetElementPtr(llvm::GetElementPtrInst *a1, uint64_t *a2, llvm::Value *a3, uint64_t a4, char a5, uint64_t a6, uint64_t **a7)
{
  llvm::Constant **v11;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t ElementPtr;
  uint64_t v18;
  llvm::GetElementPtrInst *TypeAtIndex;
  llvm::Type **v20;
  uint64_t v21;
  llvm::Type *v22;
  llvm::Type *v23;
  uint64_t **v24;
  _QWORD **v25;
  llvm::Type *v26;
  uint64_t v27;
  llvm::Constant **v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  llvm::Constant **v35;
  char *v36;
  _QWORD *v37;
  llvm::Constant **v38;
  llvm::Constant **v39;
  llvm::Constant *v40;
  llvm::APFloatBase *SplatValue;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  llvm::Constant **v46;
  llvm::Constant *v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  llvm::GetElementPtrInst *v54;
  uint64_t *v55;
  unsigned __int8 v56[2];
  __int16 v57;
  _QWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  llvm::GetElementPtrInst *v62;
  llvm::Constant **v63;
  uint64_t v64;

  v11 = (llvm::Constant **)a3;
  v14 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v14 = **(_QWORD **)(v14 + 16);
  ElementPtr = (uint64_t)llvm::ConstantFoldGetElementPtr(a1, a2, a5, a6, a3, a4);
  if (!ElementPtr)
  {
    v52 = a6;
    v55 = a2;
    v18 = 8 * a4;
    TypeAtIndex = a1;
    if (a4)
    {
      v20 = v11 + 1;
      v21 = v18 - 8;
      TypeAtIndex = a1;
      do
      {
        if (!v21)
          break;
        v22 = *v20++;
        TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v22, v15);
        v21 -= 8;
      }
      while (TypeAtIndex);
    }
    v23 = (llvm::Type *)(*(_DWORD *)(v14 + 8) >> 8);
    if (*(_QWORD *)(v14 + 24))
      v24 = (uint64_t **)llvm::PointerType::get(TypeAtIndex, v23);
    else
      v24 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v14, v23);
    v25 = (_QWORD **)*v55;
    v54 = a1;
    v53 = a5;
    if (*v55 && ((_DWORD)v25[1] & 0xFE) == 0x12)
    {
      v26 = (llvm::Type *)*((unsigned int *)v25 + 8);
      v27 = *((_DWORD *)v25 + 2) == 19;
    }
    else
    {
      v27 = 0;
      v26 = 0;
      if (!a4)
        goto LABEL_26;
      v28 = v11;
      do
      {
        v29 = *(_QWORD *)*v28;
        if (v29)
          v30 = (*(_DWORD *)(v29 + 8) & 0xFE) == 18;
        else
          v30 = 0;
        if (v30)
        {
          v26 = (llvm::Type *)*(unsigned int *)(v29 + 32);
          v27 = *(_DWORD *)(v29 + 8) == 19;
        }
        ++v28;
        v18 -= 8;
      }
      while (v18);
    }
    if ((_DWORD)v26)
    {
      if ((_DWORD)v27 == 1)
      {
        llvm::ScalableVectorType::get(v24, v26);
        v31 = 0;
        v27 = 1;
      }
      else
      {
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v24, v26);
        v31 = 0;
      }
      goto LABEL_27;
    }
LABEL_26:
    v31 = 1;
LABEL_27:
    if (v24 == a7)
      return 0;
    v32 = a4 + 1;
    v51 = (uint64_t)v24;
    if (a4 == -1)
    {
      v34 = operator new(8uLL);
      *v34 = v55;
      v35 = (llvm::Constant **)(v34 + 1);
      v63 = v11;
      v64 = (unint64_t)v54 | 4;
      v36 = (char *)(v34 + 1);
    }
    else
    {
      if (v32 >> 61)
LABEL_69:
        abort();
      v37 = operator new(8 * v32);
      v34 = v37;
      *v37 = v55;
      v35 = (llvm::Constant **)(v37 + 1);
      v63 = v11;
      v64 = (unint64_t)v54 | 4;
      if (!a4)
      {
LABEL_60:
        v48 = v52 >= 0x3F || (v52 & 0xFF00000000) == 0;
        v49 = 2 * v52 + 2;
        v50 = **(_QWORD **)*v55;
        if (v48)
          v49 = 0;
        v56[0] = 34;
        v56[1] = v49 | v53;
        v57 = 0;
        v58 = v34;
        v59 = v35 - (llvm::Constant **)v34;
        v60 = 0u;
        v61 = 0u;
        v62 = v54;
        ElementPtr = sub_1C537D4FC(v50 + 1512, v51, v56);
        if (v34)
          operator delete(v34);
        return ElementPtr;
      }
      v36 = (char *)&v37[v32];
    }
    v38 = &v11[a4];
    v39 = v35;
    while (1)
    {
      v40 = *v11;
      if ((v64 & 4) != 0)
        break;
      if ((*(_DWORD *)(*(_QWORD *)v40 + 8) & 0xFE) == 0x12)
      {
        SplatValue = llvm::Constant::getSplatValue(v40, 0);
LABEL_41:
        v40 = SplatValue;
      }
LABEL_42:
      if (v39 >= (llvm::Constant **)v36)
      {
        v42 = v39 - (llvm::Constant **)v34;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          goto LABEL_69;
        if ((v36 - (char *)v34) >> 2 > v43)
          v43 = (v36 - (char *)v34) >> 2;
        if ((unint64_t)(v36 - (char *)v34) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 61)
            sub_1C4764EE4();
          v45 = (char *)operator new(8 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = (llvm::Constant **)&v45[8 * v42];
        v36 = &v45[8 * v44];
        *v46 = v40;
        v35 = v46 + 1;
        if (v39 == v34)
          goto LABEL_57;
        do
        {
          v47 = *--v39;
          *--v46 = v47;
        }
        while (v39 != v34);
        if (v34)
LABEL_57:
          operator delete(v34);
        v34 = v46;
      }
      else
      {
        *v39 = v40;
        v35 = v39 + 1;
      }
      sub_1C4843D7C((uint64_t)&v63);
      v11 = v63;
      v39 = v35;
      if (v63 == v38)
        goto LABEL_60;
    }
    if ((v31 & 1) != 0 || (*(_DWORD *)(*(_QWORD *)v40 + 8) & 0xFE) == 0x12)
      goto LABEL_42;
    SplatValue = (llvm::APFloatBase *)llvm::ConstantVector::getSplat(v26 | (unint64_t)(v27 << 32), v40, v33);
    goto LABEL_41;
  }
  return ElementPtr;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getNeg(llvm::ConstantExpr *this, llvm::Constant *a2, int a3)
{
  char v4;
  uint64_t v6;
  unsigned int v7;
  llvm::Constant *Zero;
  llvm::Constant *v9;
  llvm::Constant *v10;
  char v11;
  llvm::ValueHandleBase *result;
  _QWORD **v13;
  uint64_t v14;
  unsigned __int8 v15[2];
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];

  v4 = (char)a2;
  v22[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)this;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(v6 + 16) + 8);
  else
    v7 = *(_DWORD *)(v6 + 8);
  if (v7 <= 6)
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v6, (llvm::Type *)1);
  else
    Zero = (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v6, a2);
  v10 = Zero;
  if (a3)
    v11 = 2;
  else
    v11 = 0;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, this, v9);
  if (!result)
  {
    v13 = *(_QWORD ***)v10;
    if (*(_QWORD *)v10)
    {
      v22[0] = v10;
      v22[1] = this;
      v14 = **v13 + 1512;
      v15[0] = 15;
      v15[1] = v11 | v4;
      v16 = 0;
      v17 = v22;
      v18 = 2;
      v19 = 0u;
      v20 = 0u;
      v21 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v14, (uint64_t)v13, v15);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getSub(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  char v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  unsigned __int8 v11[2];
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v4 = (char)a3;
  v18[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v7 = 2;
  else
    v7 = 0;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, this, a2, a4);
  if (!result)
  {
    v9 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      v10 = **v9 + 1512;
      v11[0] = 15;
      v11[1] = v7 | v4;
      v12 = 0;
      v13 = v18;
      v14 = 2;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getNot(llvm::Constant **this, llvm::Constant *a2)
{
  llvm::Constant *AllOnesValue;
  llvm::Constant *v4;
  uint64_t result;
  llvm::Constant *v6;
  uint64_t v7;
  _WORD v8[4];
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  AllOnesValue = llvm::Constant::getAllOnesValue(*this, a2);
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1E, this, AllOnesValue, v4);
  if (!result)
  {
    v6 = *this;
    if (*this)
    {
      v14[0] = this;
      v14[1] = AllOnesValue;
      v7 = **(_QWORD **)v6 + 1512;
      v8[0] = 30;
      v8[1] = 0;
      v9 = v14;
      v10 = 2;
      v11 = 0u;
      v12 = 0u;
      v13 = 0;
      return sub_1C537D4FC(v7, (uint64_t)v6, (unsigned __int8 *)v8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getAdd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  char v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  unsigned __int8 v11[2];
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v4 = (char)a3;
  v18[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v7 = 2;
  else
    v7 = 0;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xD, this, a2, a4);
  if (!result)
  {
    v9 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      v10 = **v9 + 1512;
      v11[0] = 13;
      v11[1] = v7 | v4;
      v12 = 0;
      v13 = v18;
      v14 = 2;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getFAdd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xE, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 14;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getFSub(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x10, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 16;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getMul(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  char v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  unsigned __int8 v11[2];
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v4 = (char)a3;
  v18[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v7 = 2;
  else
    v7 = 0;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x11, this, a2, a4);
  if (!result)
  {
    v9 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      v10 = **v9 + 1512;
      v11[0] = 17;
      v11[1] = v7 | v4;
      v12 = 0;
      v13 = v18;
      v14 = 2;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getFMul(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x12, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 18;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getUDiv(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v4;
  llvm::ValueHandleBase *result;
  _QWORD **v8;
  uint64_t v9;
  unsigned __int8 v10[2];
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v4 = a3;
  v17[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x13, this, a2, a4);
  if (!result)
  {
    v8 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v17[0] = this;
      v17[1] = a2;
      v9 = **v8 + 1512;
      v10[0] = 19;
      v10[1] = v4;
      v11 = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getSDiv(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v4;
  llvm::ValueHandleBase *result;
  _QWORD **v8;
  uint64_t v9;
  unsigned __int8 v10[2];
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v4 = a3;
  v17[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x14, this, a2, a4);
  if (!result)
  {
    v8 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v17[0] = this;
      v17[1] = a2;
      v9 = **v8 + 1512;
      v10[0] = 20;
      v10[1] = v4;
      v11 = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getFDiv(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x15, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 21;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getURem(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x16, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 22;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getSRem(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x17, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 23;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getAnd(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1C, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 28;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getOr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1D, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 29;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getXor(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t result;
  _QWORD **v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1E, this, a2, a4);
  if (!result)
  {
    v7 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v15[0] = this;
      v15[1] = a2;
      v8 = **v7 + 1512;
      v9[0] = 30;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return sub_1C537D4FC(v8, (uint64_t)v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ConstantExpr::getShl(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  char v4;
  char v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  unsigned __int8 v11[2];
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];

  v4 = (char)a3;
  v18[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a4)
    v7 = 2;
  else
    v7 = 0;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x19, this, a2, a4);
  if (!result)
  {
    v9 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v18[0] = this;
      v18[1] = a2;
      v10 = **v9 + 1512;
      v11[0] = 25;
      v11[1] = v7 | v4;
      v12 = 0;
      v13 = v18;
      v14 = 2;
      v15 = 0u;
      v16 = 0u;
      v17 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::ConstantExpr::getLShr(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v4;
  uint64_t result;
  _QWORD **v8;
  uint64_t v9;
  unsigned __int8 v10[2];
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v4 = a3;
  v17[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0x1A, this, a2, a4);
  if (!result)
  {
    v8 = *(_QWORD ***)this;
    if (*(_QWORD *)this)
    {
      v17[0] = this;
      v17[1] = a2;
      v9 = **v8 + 1512;
      v10[0] = 26;
      v10[1] = v4;
      v11 = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return sub_1C537D4FC(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Value **llvm::ConstantExpr::getExactLogBase2(llvm::ConstantExpr *this, llvm::Constant *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Impl;
  int v7;
  llvm::Type *v8;
  unsigned __int8 *AggregateElement;
  llvm::Type *v10;
  llvm::Constant *v11;
  llvm::Value **NullValue;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t v17;
  uint8x8_t v18;
  llvm::ConstantInt *v19;
  unsigned int v20;
  int v21;
  llvm::Value **v22;
  uint64_t v23;
  llvm::Type *v24;
  int v25;
  unint64_t v26;
  int8x8_t *v27;
  int8x8_t v28;
  uint8x8_t v29;
  unsigned int v30;
  int v31;
  llvm::FixedVectorType ***v32;
  _QWORD **v33;
  _QWORD v35[2];
  llvm::APInt *v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v36 = 0;
  v37 = &v36;
  v38 = 0;
  if (!sub_1C4D8A004((uint64_t)&v37, this))
    goto LABEL_5;
  v4 = *((unsigned int *)v36 + 2);
  if (v4 > 0x40)
  {
    v25 = 0;
    v26 = (unint64_t)(v4 + 63) >> 6;
    v27 = *(int8x8_t **)v36;
    do
    {
      v28 = *v27++;
      v29 = (uint8x8_t)vcnt_s8(v28);
      v29.i16[0] = vaddlv_u8(v29);
      v25 += v29.i32[0];
      --v26;
    }
    while (v26);
    if (v25 != 1)
      goto LABEL_5;
LABEL_39:
    v30 = *((_DWORD *)v36 + 2);
    if (v30 > 0x40)
      v31 = llvm::APInt::countLeadingZerosSlowCase(v36);
    else
      v31 = v30 + __clz(*(_QWORD *)v36) - 64;
    return llvm::ConstantInt::get((llvm::ConstantInt *)v3, v30 + ~v31, 0);
  }
  if (*(_QWORD *)v36 && (*(_QWORD *)v36 & (*(_QWORD *)v36 - 1)) == 0)
    goto LABEL_39;
LABEL_5:
  if (*(_BYTE *)(v3 + 8) != 18 || v3 == 0)
    return 0;
  v37 = v39;
  v38 = 0x400000000;
  v7 = *(_DWORD *)(v3 + 32);
  if (v7)
  {
    v8 = 0;
    while (1)
    {
      AggregateElement = (unsigned __int8 *)llvm::Constant::getAggregateElement(this, v8);
      if (!AggregateElement)
        break;
      v10 = (llvm::Type *)AggregateElement;
      if (AggregateElement[16] - 11 > 1)
      {
        v35[0] = &v36;
        v35[1] = 0;
        if (!sub_1C4D8A004((uint64_t)v35, (llvm::Constant *)AggregateElement))
          break;
        v13 = *((unsigned int *)v36 + 2);
        if (v13 > 0x40)
        {
          v14 = 0;
          v15 = (unint64_t)(v13 + 63) >> 6;
          v16 = *(int8x8_t **)v36;
          do
          {
            v17 = *v16++;
            v18 = (uint8x8_t)vcnt_s8(v17);
            v18.i16[0] = vaddlv_u8(v18);
            v14 += v18.i32[0];
            --v15;
          }
          while (v15);
          if (v14 != 1)
            break;
        }
        else if (!*(_QWORD *)v36 || (*(_QWORD *)v36 & (*(_QWORD *)v36 - 1)) != 0)
        {
          break;
        }
        v19 = (llvm::ConstantInt *)v3;
        if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
          v19 = **(llvm::ConstantInt ***)(v3 + 16);
        v20 = *((_DWORD *)v36 + 2);
        if (v20 > 0x40)
          v21 = llvm::APInt::countLeadingZerosSlowCase(v36);
        else
          v21 = v20 + __clz(*(_QWORD *)v36) - 64;
        NullValue = llvm::ConstantInt::get(v19, v20 + ~v21, 0);
      }
      else
      {
        v11 = (llvm::Constant *)v3;
        if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
          v11 = **(llvm::Constant ***)(v3 + 16);
        NullValue = llvm::Constant::getNullValue(v11, v10);
      }
      v22 = NullValue;
      v23 = v38;
      if (v38 >= (unint64_t)HIDWORD(v38))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v38 + 1, 8);
        v23 = v38;
      }
      *((_QWORD *)v37 + v23) = v22;
      v24 = (llvm::Type *)(v38 + 1);
      LODWORD(v38) = v38 + 1;
      v8 = (llvm::Type *)((_DWORD)v8 + 1);
      if ((_DWORD)v8 == v7)
      {
        v32 = (llvm::FixedVectorType ***)v37;
        goto LABEL_45;
      }
    }
    Impl = 0;
  }
  else
  {
    v24 = 0;
    v32 = (llvm::FixedVectorType ***)v39;
LABEL_45:
    Impl = (uint64_t)llvm::ConstantVector::getImpl(v32, (llvm::Type *)v24);
    if (!Impl)
    {
      llvm::FixedVectorType::get(**v32, v24);
      Impl = sub_1C537B3A4(**v33 + 1288, (uint64_t)v33, v32, v24);
    }
  }
  if (v37 != v39)
    free(v37);
  return (llvm::Value **)Impl;
}

llvm::Value **llvm::ConstantExpr::getBinOpIdentity(llvm::ConstantExpr *this, llvm::ConstantFP *a2, llvm::Type *a3, int a4)
{
  switch((int)this)
  {
    case 13:
      return llvm::Constant::getNullValue(a2, a2);
    case 14:
      return (llvm::Value **)llvm::ConstantFP::getZero(a2, (llvm::Type *)(a4 ^ 1u));
    case 15:
    case 16:
      goto LABEL_5;
    case 17:
      return llvm::ConstantInt::get(a2, 1, 0);
    case 18:
      return (llvm::Value **)llvm::ConstantFP::get((llvm::ConstantFP **)a2, a2, 1.0);
    default:
      if ((_DWORD)this == 28)
        return (llvm::Value **)llvm::Constant::getAllOnesValue(a2, a2);
      if (((_DWORD)this - 29) < 2)
        return llvm::Constant::getNullValue(a2, a2);
LABEL_5:
      if ((a3 & 1) == 0)
        return 0;
      if (((_DWORD)this - 15) < 2 || ((_DWORD)this - 25) < 3)
        return llvm::Constant::getNullValue(a2, a2);
      if ((_DWORD)this == 21)
        return (llvm::Value **)llvm::ConstantFP::get((llvm::ConstantFP **)a2, a2, 1.0);
      if (((_DWORD)this - 19) >= 2)
        return 0;
      return llvm::ConstantInt::get(a2, 1, 0);
  }
}

llvm::Value **llvm::ConstantExpr::getBinOpAbsorber(llvm::ConstantExpr *this, llvm::Constant *a2, llvm::Type *a3)
{
  if ((_DWORD)this == 28 || (_DWORD)this == 17)
    return llvm::Constant::getNullValue(a2, a2);
  if ((_DWORD)this == 29)
    return (llvm::Value **)llvm::Constant::getAllOnesValue(a2, a2);
  return 0;
}

int32x2_t sub_1C537FC54(int32x2_t *a1, uint64_t *a2)
{
  int32x2_t v3;
  __int32 v4;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  int32x2_t result;
  int v10;
  int v11;

  v3 = *a1;
  v4 = a1[2].i32[0];
  if (!v4)
  {
    v6 = 0;
LABEL_7:
    v7 = (uint64_t **)(*(_QWORD *)&v3 + 8 * v6);
    goto LABEL_3;
  }
  LODWORD(v6) = sub_1C5385A80(a2) & (v4 - 1);
  v7 = (uint64_t **)(*(_QWORD *)&v3 + 8 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8 != (uint64_t *)-4096)
    {
      v11 = v6 + v10++;
      v6 = v11 & (v4 - 1);
      v8 = *(uint64_t **)(*(_QWORD *)&v3 + 8 * v6);
      if (v8 == a2)
        goto LABEL_7;
    }
    v3 = *a1;
    v6 = a1[2].u32[0];
    goto LABEL_7;
  }
LABEL_3:
  *v7 = (uint64_t *)-8192;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

const char *llvm::ConstantExpr::getOpcodeName(llvm::ConstantExpr *this)
{
  return llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)this + 9));
}

uint64_t llvm::GetElementPtrConstantExpr::GetElementPtrConstantExpr(uint64_t a1, llvm::GetElementPtrInst *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  uint64_t *v7;
  llvm::GetElementPtrInst *TypeAtIndex;
  int v11;
  int v12;
  llvm::Type **v13;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v6 = a5;
  v7 = (uint64_t *)a4;
  TypeAtIndex = a2;
  v11 = a5 + 1;
  *(_QWORD *)a1 = a6;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0xC0000000 | (a5 + 1) & 0x7FFFFFF;
  *(_DWORD *)(a1 + 16) = 2228229;
  *(_DWORD *)(a1 + 20) = v12;
  *(_QWORD *)(a1 + 24) = a2;
  if (a5)
  {
    v13 = (llvm::Type **)(a4 + 8);
    v14 = 8 * a5 - 8;
    do
    {
      if (!v14)
        break;
      v15 = *v13++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v15, (llvm::Value *)a3);
      v14 -= 8;
    }
    while (TypeAtIndex);
    v11 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 32) = TypeAtIndex;
  v16 = v11 & 0x7FFFFFF;
  v17 = -v16;
  v18 = (_QWORD *)(a1 - 32 * v16);
  if (*v18)
  {
    v33 = a1 + 32 * v17;
    v35 = *(_QWORD **)(v33 + 16);
    v34 = (_QWORD *)(v33 + 16);
    *v35 = *(v34 - 1);
    v36 = *(v34 - 1);
    if (v36)
      *(_QWORD *)(v36 + 16) = *v34;
  }
  *v18 = a3;
  if (a3)
  {
    v21 = a3[1];
    v20 = a3 + 1;
    v19 = v21;
    v22 = a1 + 32 * v17;
    *(_QWORD *)(v22 + 8) = v21;
    if (v21)
      *(_QWORD *)(v19 + 16) = v22 + 8;
    *(_QWORD *)(v22 + 16) = v20;
    *v20 = v18;
  }
  v23 = *(_DWORD *)(a1 + 20);
  if ((v23 & 0x40000000) != 0)
    v24 = *(_QWORD *)(a1 - 8);
  else
    v24 = a1 - 32 * (v23 & 0x7FFFFFF);
  if (v6)
  {
    v25 = v6;
    v26 = v24 + 32;
    do
    {
      v27 = *v7;
      if (*(_QWORD *)v26)
      {
        **(_QWORD **)(v26 + 16) = *(_QWORD *)(v26 + 8);
        v32 = *(_QWORD *)(v26 + 8);
        if (v32)
          *(_QWORD *)(v32 + 16) = *(_QWORD *)(v26 + 16);
      }
      *(_QWORD *)v26 = v27;
      if (v27)
      {
        v30 = *(_QWORD *)(v27 + 8);
        v28 = (_QWORD *)(v27 + 8);
        v29 = v30;
        *(_QWORD *)(v26 + 8) = v30;
        if (v30)
          *(_QWORD *)(v29 + 16) = v26 + 8;
        *(_QWORD *)(v26 + 16) = v28;
        *v28 = v26;
      }
      ++v7;
      v26 += 32;
      --v25;
    }
    while (v25);
  }
  return a1;
}

uint64_t llvm::GetElementPtrConstantExpr::getSourceElementType(llvm::GetElementPtrConstantExpr *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::GetElementPtrConstantExpr::getResultElementType(llvm::GetElementPtrConstantExpr *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::ConstantDataSequential::getElementType(llvm::ConstantDataSequential *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 24);
}

uint64_t llvm::ConstantDataSequential::getRawDataValues(llvm::ConstantDataSequential *this)
{
  uint64_t v1;
  const char *v2;

  v1 = *((_QWORD *)this + 3);
  llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  if ((_DWORD)v2 == 1)
  return v1;
}

unint64_t llvm::ConstantDataSequential::getElementByteSize(llvm::ConstantDataSequential *this)
{
  unint64_t PrimitiveSizeInBits;
  const char *v2;
  unint64_t v4;

  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  if ((_DWORD)v2 == 1)
  {
    v4 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v4;
  }
  return PrimitiveSizeInBits >> 3;
}

uint64_t llvm::ConstantDataSequential::getElementPointer(llvm::ConstantDataSequential *this, unsigned int a2)
{
  uint64_t v3;
  unint64_t PrimitiveSizeInBits;
  const char *v5;
  unint64_t v7;

  v3 = *((_QWORD *)this + 3);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  if ((_DWORD)v5 == 1)
  {
    v7 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v7;
  }
  return v3 + (PrimitiveSizeInBits >> 3) * a2;
}

llvm::Value **llvm::ConstantDataSequential::getImpl(_BYTE *a1, llvm::Type *a2, llvm::ConstantAggregateZero *a3)
{
  uint64_t v6;
  llvm::Value **result;
  uint64_t v8;
  unsigned int v9;
  llvm::Type *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Type **v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  llvm::Type ***i;
  llvm::Type *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  llvm::Value *v32;
  int v33;
  uint64_t v34;
  char *v35;
  _QWORD **v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value *v39;
  uint64_t v40;
  _QWORD **v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  llvm::StringMapImpl *v56;
  llvm::ConstantAggregateZero *v57;
  int v58;

  if (!a2)
    return (llvm::Value **)llvm::ConstantAggregateZero::get(a3, a2);
  v6 = 0;
  while (!a1[v6])
  {
    if (a2 == (llvm::Type *)++v6)
      return (llvm::Value **)llvm::ConstantAggregateZero::get(a3, a2);
  }
  v8 = **(_QWORD **)a3;
  v9 = *(_DWORD *)(v8 + 1416);
  if (!v9)
  {
    *(_QWORD *)(v8 + 1420) = 0;
    v23 = v8;
    v24 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v24)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v24[16] = 2;
    *(_QWORD *)(v23 + 1408) = v24;
    v9 = 16;
    *(_DWORD *)(v23 + 1416) = 16;
    v8 = v23;
  }
  v10 = 0;
  v11 = 0;
  v56 = (llvm::StringMapImpl *)(v8 + 1408);
  v57 = a3;
  do
  {
    v11 = 33 * v11 + *((unsigned __int8 *)v10 + (_QWORD)a1);
    v10 = (llvm::Type *)((char *)v10 + 1);
  }
  while (a2 != v10);
  v12 = *(_QWORD *)(v8 + 1408);
  v13 = v9 - 1;
  v14 = v12 + 8 * v9 + 8;
  v58 = -1;
  v15 = 1;
  v16 = v11;
  while (1)
  {
    v17 = v16 & v13;
    v18 = *(llvm::Type ***)(v12 + 8 * v17);
    if (!v18)
      break;
    if (v18 == (llvm::Type **)-8)
    {
      if (v58 == -1)
        v21 = v16 & v13;
      else
        v21 = v58;
      v58 = v21;
    }
    else if (*(_DWORD *)(v14 + 4 * v17) == v11 && a2 == *v18)
    {
      v19 = v8;
      v20 = memcmp(a1, (char *)v18 + *(unsigned int *)(v8 + 1428), (size_t)a2);
      v8 = v19;
      if (!v20)
        goto LABEL_24;
    }
    v16 = v15 + v17;
    ++v15;
  }
  v22 = v58;
  if (v58 == -1)
  {
    v22 = v17;
    v17 = v17;
  }
  else
  {
    v17 = v58;
  }
  *(_DWORD *)(v14 + 4 * v22) = v11;
  v18 = *(llvm::Type ***)(v12 + 8 * v17);
LABEL_24:
  if (v18)
  {
    if (v18 != (llvm::Type **)-8)
      goto LABEL_36;
    --*(_DWORD *)(v8 + 1424);
  }
  v25 = v8;
  v26 = operator new((size_t)a2 + 17, (std::align_val_t)8uLL);
  memcpy(v26 + 2, a1, (size_t)a2);
  *((_BYTE *)a2 + (_QWORD)(v26 + 2)) = 0;
  *v26 = a2;
  v26[1] = 0;
  *(_QWORD *)(v12 + 8 * v17) = v26;
  ++*(_DWORD *)(v25 + 1420);
  for (i = (llvm::Type ***)(*(_QWORD *)(v25 + 1408) + 8 * llvm::StringMapImpl::RehashTable(v56, v17));
        ;
        ++i)
  {
    v18 = *i;
    if (*i && v18 + 1 != 0)
      break;
  }
LABEL_36:
  v30 = v18 + 1;
  v29 = v18[1];
  if (!v29)
  {
LABEL_40:
    v31 = (llvm::Value *)(v18 + 2);
    if (*((_BYTE *)v57 + 8) == 17)
    {
      result = (llvm::Value **)operator new(0x28uLL);
      *result = v57;
      result[1] = 0;
      result[2] = (llvm::Value *)14;
      result[3] = v31;
      result[4] = 0;
      v32 = *v30;
      *v30 = (llvm::Value *)result;
      if (!v32)
        return result;
      sub_1C5385EA8(v32);
      v33 = *((_DWORD *)v32 + 5);
      if ((v33 & 0x40000000) == 0)
      {
        v34 = v33 & 0x7FFFFFF;
        v35 = (char *)v32 - 32 * v34;
        if ((_DWORD)v34)
        {
          v36 = (_QWORD **)((char *)v32 - 16);
          v37 = -32 * v34;
          do
          {
            if (*(v36 - 2))
            {
              **v36 = *(v36 - 1);
              v38 = (uint64_t)*(v36 - 1);
              if (v38)
                *(_QWORD *)(v38 + 16) = *v36;
            }
            v36 -= 4;
            v37 += 32;
          }
          while (v37);
        }
LABEL_58:
        if (v33 < 0)
          v35 = &v35[-*((_QWORD *)v35 - 1) - 8];
        goto LABEL_60;
      }
      v46 = (char *)*((_QWORD *)v32 - 1);
      v45 = (char *)v32 - 8;
      v44 = v46;
      v47 = v33 & 0x7FFFFFF;
      if ((_DWORD)v47)
      {
        v48 = 32 * v47;
        do
        {
          v49 = &v44[v48];
          if (*(_QWORD *)&v44[v48 - 32])
          {
            **((_QWORD **)v49 - 2) = *((_QWORD *)v49 - 3);
            v50 = *((_QWORD *)v49 - 3);
            if (v50)
              *(_QWORD *)(v50 + 16) = *((_QWORD *)v49 - 2);
          }
          v48 -= 32;
        }
        while (v48);
      }
    }
    else
    {
      result = (llvm::Value **)operator new(0x30uLL);
      *result = v57;
      result[1] = 0;
      result[2] = (llvm::Value *)15;
      result[3] = v31;
      result[4] = 0;
      *((_BYTE *)result + 40) &= ~1u;
      v39 = *v30;
      *v30 = (llvm::Value *)result;
      if (!v39)
        return result;
      sub_1C5385EA8(v39);
      v33 = *((_DWORD *)v39 + 5);
      if ((v33 & 0x40000000) == 0)
      {
        v40 = v33 & 0x7FFFFFF;
        v35 = (char *)v39 - 32 * v40;
        if ((_DWORD)v40)
        {
          v41 = (_QWORD **)((char *)v39 - 16);
          v42 = -32 * v40;
          do
          {
            if (*(v41 - 2))
            {
              **v41 = *(v41 - 1);
              v43 = (uint64_t)*(v41 - 1);
              if (v43)
                *(_QWORD *)(v43 + 16) = *v41;
            }
            v41 -= 4;
            v42 += 32;
          }
          while (v42);
        }
        goto LABEL_58;
      }
      v51 = (char *)*((_QWORD *)v39 - 1);
      v45 = (char *)v39 - 8;
      v44 = v51;
      v52 = v33 & 0x7FFFFFF;
      if ((_DWORD)v52)
      {
        v53 = 32 * v52;
        do
        {
          v54 = &v44[v53];
          if (*(_QWORD *)&v44[v53 - 32])
          {
            **((_QWORD **)v54 - 2) = *((_QWORD *)v54 - 3);
            v55 = *((_QWORD *)v54 - 3);
            if (v55)
              *(_QWORD *)(v55 + 16) = *((_QWORD *)v54 - 2);
          }
          v53 -= 32;
        }
        while (v53);
      }
    }
    operator delete(v44);
    v35 = v45;
LABEL_60:
    operator delete(v35);
    return (llvm::Value **)*v30;
  }
  while (1)
  {
    result = (llvm::Value **)v29;
    if (*(llvm::ConstantAggregateZero **)v29 == v57)
      return result;
    v29 = (llvm::Type *)*((_QWORD *)v29 + 4);
    if (!v29)
    {
      v30 = result + 4;
      goto LABEL_40;
    }
  }
}

llvm::Value **llvm::ConstantDataArray::getFP(llvm::ArrayType *a1, _BYTE *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::ArrayType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

llvm::Value **llvm::ConstantDataArray::getString(uint64_t a1, char *a2, llvm::Type *a3, char a4)
{
  llvm::ConstantAggregateZero *v7;
  uint64_t v9;
  _BYTE *v10;
  llvm::Type *v11;
  llvm::ConstantAggregateZero *v12;
  llvm::Value **Impl;
  void *v14;
  __int128 v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
  {
    v14 = v16;
    v15 = xmmword_1C64638C0;
    sub_1C53805B8(&v14, a2, (char *)a3 + (_QWORD)a2);
    v9 = v15;
    if ((unint64_t)(v15 + 1) > *((_QWORD *)&v15 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v14, v16, v15 + 1, 1);
      v9 = v15;
    }
    *((_BYTE *)v14 + v9) = 0;
    v10 = v14;
    v11 = (llvm::Type *)(v15 + 1);
    *(_QWORD *)&v15 = v11;
    llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)a1 + 1912), v11);
    Impl = llvm::ConstantDataSequential::getImpl(v10, v11, v12);
    if (v14 != v16)
      free(v14);
    return Impl;
  }
  else
  {
    llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)a1 + 1912), a3);
    return llvm::ConstantDataSequential::getImpl(a2, a3, v7);
  }
}

_QWORD *sub_1C53805B8(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  char v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[1];
  v8 = v7 + a3 - a2;
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    v7 = v5[1];
  }
  if (v4 != a3)
  {
    v9 = (_BYTE *)(*v5 + v7);
    do
    {
      v10 = *v4++;
      *v9++ = v10;
    }
    while (v4 != a3);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

llvm::Value **llvm::ConstantDataVector::get(uint64_t a1, _BYTE *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)a1 + 1912), a3);
  return llvm::ConstantDataSequential::getImpl(a2, a3, v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)a1 + 1936), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)a1 + 1960), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)a1 + 1984), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)a1 + 1672), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)a1 + 1696), a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

llvm::Value **llvm::ConstantDataVector::getFP(llvm::FixedVectorType *a1, _BYTE *a2, llvm::Type *a3)
{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(2 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(4 * (_QWORD)a3), v5);
}

{
  llvm::ConstantAggregateZero *v5;

  llvm::FixedVectorType::get(a1, a3);
  return llvm::ConstantDataSequential::getImpl(a2, (llvm::Type *)(8 * (_QWORD)a3), v5);
}

void llvm::ConstantDataSequential::getElementAsInteger(llvm::ConstantDataSequential *this)
{
  llvm::Type *v2;
  const char *v3;
  uint64_t v4;

  v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  llvm::Type::getPrimitiveSizeInBits(v2);
  if ((_DWORD)v3 == 1)
  {
    v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  }
  HIDWORD(v4) = *((_DWORD *)v2 + 2) >> 8;
  LODWORD(v4) = HIDWORD(v4) - 8;
  __asm { BR              X11 }
}

void llvm::ConstantDataSequential::getElementAsAPInt(llvm::ConstantDataSequential *this)
{
  llvm::Type *v2;
  const char *v3;
  uint64_t v4;

  v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  llvm::Type::getPrimitiveSizeInBits(v2);
  if ((_DWORD)v3 == 1)
  {
    v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  }
  HIDWORD(v4) = *((_DWORD *)v2 + 2) >> 8;
  LODWORD(v4) = HIDWORD(v4) - 8;
  __asm { BR              X11 }
}

void llvm::ConstantDataSequential::getElementAsAPFloat(llvm::ConstantDataSequential *this)
{
  llvm::Type *v2;
  const char *v3;

  v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  llvm::Type::getPrimitiveSizeInBits(v2);
  if ((_DWORD)v3 == 1)
  {
    v2 = *(llvm::Type **)(*(_QWORD *)this + 24);
  }
  __asm { BR              X11 }
}

BOOL llvm::ConstantDataSequential::isString(llvm::ConstantDataSequential *this, int a2)
{
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 17)
    return 0;
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) == 13
      && a2 == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) >> 8;
}

BOOL llvm::ConstantDataSequential::isCString(llvm::ConstantDataSequential *this)
{
  _BYTE *RawDataValues;
  unint64_t v2;
  size_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 17)
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) != 2061)
    return 0;
  RawDataValues = (_BYTE *)llvm::ConstantDataSequential::getRawDataValues(this);
  if (RawDataValues[v2 - 1])
    return 0;
  if (v2 >= v2 - 1)
    v4 = v2 - 1;
  else
    v4 = v2;
  if (v4 && (v5 = RawDataValues, (v6 = memchr(RawDataValues, 0, v4)) != 0))
    v7 = v6 - v5;
  else
    v7 = -1;
  return v7 == -1;
}

BOOL llvm::ConstantDataVector::isSplatData(llvm::ConstantDataVector *this)
{
  char *RawDataValues;
  uint64_t v3;
  unint64_t PrimitiveSizeInBits;
  const char *v5;
  int v6;
  _BOOL8 result;
  unint64_t v8;
  size_t v9;
  int v10;
  unint64_t v11;
  int v12;
  BOOL v14;
  unint64_t v15;

  RawDataValues = (char *)llvm::ConstantDataSequential::getRawDataValues(this);
  v3 = *(_QWORD *)this;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(*(_QWORD *)this + 24));
  if ((_DWORD)v5 == 1)
  {
    v15 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v15;
    v3 = *(_QWORD *)this;
  }
  v6 = *(_DWORD *)(v3 + 32);
  if (v6 == 1)
    return 1;
  v8 = PrimitiveSizeInBits >> 3;
  v9 = (PrimitiveSizeInBits >> 3);
  v10 = v6 - 2;
  v11 = PrimitiveSizeInBits >> 3;
  do
  {
    v12 = memcmp(RawDataValues, &RawDataValues[v11], v9);
    result = v12 == 0;
    v14 = v10-- != 0;
    if (v12)
      break;
    LODWORD(v11) = v11 + v8;
  }
  while (v14);
  return result;
}

uint64_t llvm::ConstantDataVector::isSplat(llvm::ConstantDataVector *this)
{
  unsigned int v1;
  int v3;

  v1 = *((unsigned __int8 *)this + 40);
  if ((v1 & 1) == 0)
  {
    *((_BYTE *)this + 40) = v1 | 1;
    if (llvm::ConstantDataVector::isSplatData(this))
      v3 = 2;
    else
      v3 = 0;
    v1 = *((_BYTE *)this + 40) & 0xFD | v3;
    *((_BYTE *)this + 40) = v1;
  }
  return (v1 >> 1) & 1;
}

